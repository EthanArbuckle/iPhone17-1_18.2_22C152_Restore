uint64_t sub_95BEC(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = *(void *)(a1 + 32);
    v5 = &v2[v4 >> 4];
    v6 = (uint64_t)*v5 + 264 * (v4 & 0xF);
    v7 = *(uint64_t *)((char *)v2 + (((*(void *)(a1 + 40) + v4) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 264 * ((*(_DWORD *)(a1 + 40) + (int)v4) & 0xF);
    if (v6 != v7)
    {
      do
      {
        sub_B9500(v6);
        v6 += 264;
        if (v6 - (void)*v5 == 4224)
        {
          v8 = (uint64_t)v5[1];
          ++v5;
          v6 = v8;
        }
      }
      while (v6 != v7);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *(void *)(a1 + 40) = 0;
  v9 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      v9 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v10 = v9 >> 3;
  if (v10 == 1)
  {
    v11 = 8;
    goto LABEL_14;
  }
  if (v10 == 2)
  {
    v11 = 16;
LABEL_14:
    *(void *)(a1 + 32) = v11;
  }
  if (v2 != v3)
  {
    do
    {
      v12 = *v2++;
      operator delete(v12);
    }
    while (v2 != v3);
    v14 = *(void *)(a1 + 8);
    v13 = *(void *)(a1 + 16);
    if (v13 != v14) {
      *(void *)(a1 + 16) = v13 + ((v14 - v13 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_95D38(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _DWORD *a5)
{
  if (a2 && a3)
  {
    v622 = 0;
    uint64_t v8 = *(void *)(a1 + 128);
    if (!v8) {
      operator new();
    }
    v622 = *(void **)(a1 + 128);
    if (*(unsigned char *)(a1 + 92)) {
      uint64_t v9 = *(void *)(a1 + 56);
    }
    else {
      uint64_t v9 = 0;
    }
    if (*(unsigned char *)(a1 + 93)) {
      uint64_t v11 = *(void *)(a1 + 72);
    }
    else {
      uint64_t v11 = 0;
    }
    sub_F63C8(v8, (uint64_t *)(a1 + 136), 1 << (*(_DWORD *)(a1 + 100) + 6), v9, v11);
    uint64_t v576 = *(void *)(v8 + 26024);
    if (a5) {
      *a5 = 0;
    }
    uint64_t v13 = 8 * a3;
    unint64_t v621 = 0;
    if (8 * a3)
    {
      char v570 = a4;
      v563 = a5;
      unint64_t v14 = 0;
      uint64_t v579 = 0;
      v575 = (void **)(a1 + 41928);
      uint64_t v567 = a1 + 41976;
      uint64_t v566 = a1 + 39472;
      uint64_t v565 = a1 + 35392;
      uint64_t v562 = a1 + 39880;
      uint64_t v564 = a1 + 35296;
      uint64_t v568 = a1 + 34208;
      uint64_t v569 = a1 + 34656;
      uint64_t v573 = a1 + 160;
      v574 = (unint64_t *)(a1 + 72);
      v571 = (uint64_t *)(a1 + 56);
      v572 = (unsigned char *)(a1 + 93);
      while (1)
      {
        if (v13 - v14 <= 0x300)
        {
          memset(__s1, 0, 96);
          uint64_t v12 = memcmp(__s1, (const void *)(a2 + (v14 >> 3)), a3 - (v14 >> 3));
          if (!v12) {
            goto LABEL_893;
          }
        }
        char v620 = 0;
        uint64_t v12 = sub_B9BA8((uint64_t)v634, a2, (uint64_t *)&v621, &v620);
        if (!v620) {
          break;
        }
        if (v634[0] >= 0x12u)
        {
          v17 = sub_12C18C();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__s1 = 136315650;
            *(void *)&__s1[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/"
                                  "AGXProfilingSupport/APS/AGXPSAPSParserGen1.cpp";
            *(_WORD *)&__s1[12] = 1024;
            *(_DWORD *)&__s1[14] = 994;
            *(_WORD *)&__s1[18] = 2080;
            *(void *)&__s1[20] = "tokenTypeIndex < numTokenTypes";
            _os_log_error_impl(&def_1C1270, v17, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", __s1, 0x1Cu);
          }
          uint64_t v12 = sub_12C17C();
          if (v12) {
            uint64_t v12 = sub_12C184();
          }
        }
        else
        {
          v15 = (void *)(v576 + 16 * v634[0]);
          uint64_t v16 = v15[1];
          ++*v15;
          v15[1] = v621 - v14 + v16;
        }
        switch(v634[0])
        {
          case 0:
            unsigned int v18 = (unsigned __int16)v635;
            if (v635 <= 0x97u)
            {
              uint64_t v19 = v573 + 224 * v635;
              v20 = v622;
              if (!*(unsigned char *)(v19 + 216))
              {
                *(void *)__s1 = (((v622[3259] - v622[3258]) << 29) - 0x100000000) | (((v622[3256] - v622[3255]) >> 3)
                                                                                       - 1);
                memset(&__s1[16], 255, 20);
                __s1[36] = v635;
                char v631 = 0;
                memset(&__s1[40], 0, 64);
                long long v624 = 0u;
                long long v625 = 0u;
                long long __p = 0u;
                long long v627 = 0u;
                char v628 = 0;
                int v632 = 0;
                sub_C2204(v19, (uint64_t)__s1);
                if ((void)__p)
                {
                  *((void *)&__p + 1) = __p;
                  operator delete((void *)__p);
                }
                if (*((void *)&v624 + 1))
                {
                  *(void *)&long long v625 = *((void *)&v624 + 1);
                  operator delete(*((void **)&v624 + 1));
                }
                if (*(void *)&__s1[88])
                {
                  *(void *)&__s1[96] = *(void *)&__s1[88];
                  operator delete(*(void **)&__s1[88]);
                }
                if (*(void *)&__s1[64])
                {
                  *(void *)&__s1[72] = *(void *)&__s1[64];
                  operator delete(*(void **)&__s1[64]);
                }
                if (*(void *)&__s1[40])
                {
                  *(void *)&__s1[48] = *(void *)&__s1[40];
                  operator delete(*(void **)&__s1[40]);
                }
                v20 = v622;
                unsigned int v18 = (unsigned __int16)v635;
              }
              v21 = (char **)(v19 + 40);
              sub_47ECC((void *)(v19 + 40), v20);
              sub_48030((void *)(v19 + 40), 0);
              int v22 = (v18 >> 6) & 0x100 | (v18 >> 8) & 0x3F;
              uint64_t v12 = v19 + 56;
              unint64_t v23 = *(void *)(v19 + 56);
              v24 = *(_WORD **)(v19 + 48);
              if ((unint64_t)v24 >= v23)
              {
                uint64_t v165 = (char *)v24 - *v21;
                if (v165 <= -3) {
                  sub_566C();
                }
                uint64_t v166 = v165 >> 1;
                unint64_t v167 = v23 - (void)*v21;
                if (v167 <= (v165 >> 1) + 1) {
                  unint64_t v168 = v166 + 1;
                }
                else {
                  unint64_t v168 = v167;
                }
                if (v167 >= 0x7FFFFFFFFFFFFFFELL) {
                  uint64_t v169 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  uint64_t v169 = v168;
                }
                if (v169) {
                  uint64_t v12 = (uint64_t)sub_45900(v12, v169);
                }
                else {
                  uint64_t v12 = 0;
                }
                v283 = (_WORD *)(v12 + 2 * v166);
                _WORD *v283 = v22;
                v25 = v283 + 1;
                v285 = *(char **)(v19 + 40);
                v284 = *(char **)(v19 + 48);
                if (v284 != v285)
                {
                  do
                  {
                    __int16 v286 = *((_WORD *)v284 - 1);
                    v284 -= 2;
                    *--v283 = v286;
                  }
                  while (v284 != v285);
                  v284 = *v21;
                }
                *(void *)(v19 + 40) = v283;
                *(void *)(v19 + 48) = v25;
                *(void *)(v19 + 56) = v12 + 2 * v169;
                if (v284) {
                  operator delete(v284);
                }
              }
              else
              {
                _WORD *v24 = v22;
                v25 = v24 + 1;
              }
              *(void *)(v19 + 48) = v25;
            }
            goto LABEL_874;
          case 1:
            unint64_t v75 = *(unsigned int *)(a1 + 24);
            unint64_t v76 = *(void *)(a1 + 72);
            unint64_t v77 = v76 + v75;
            if (v76 % v75) {
              unint64_t v77 = (v77 - 1) / v75 * v75;
            }
            unint64_t *v574 = v77;
            v78 = v622;
            v79 = (unint64_t *)v622[3259];
            unint64_t v80 = v622[3260];
            if ((unint64_t)v79 >= v80)
            {
              uint64_t v12 = v622[3258];
              uint64_t v138 = ((uint64_t)v79 - v12) >> 3;
              if ((unint64_t)(v138 + 1) >> 61) {
                sub_566C();
              }
              unint64_t v139 = v80 - v12;
              unint64_t v140 = (uint64_t)(v80 - v12) >> 2;
              if (v140 <= v138 + 1) {
                unint64_t v140 = v138 + 1;
              }
              if (v139 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v141 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v141 = v140;
              }
              if (v141)
              {
                v142 = (char *)sub_5714((uint64_t)(v622 + 3260), v141);
                v79 = (unint64_t *)v78[3259];
                uint64_t v12 = v78[3258];
              }
              else
              {
                v142 = 0;
              }
              v180 = (unint64_t *)&v142[8 * v138];
              unint64_t *v180 = v77;
              v81 = v180 + 1;
              while (v79 != (unint64_t *)v12)
              {
                unint64_t v181 = *--v79;
                *--v180 = v181;
              }
              v78[3258] = v180;
              v78[3259] = v81;
              v78[3260] = &v142[8 * v141];
              if (v12) {
                operator delete((void *)v12);
              }
            }
            else
            {
              unint64_t *v79 = v77;
              v81 = v79 + 1;
            }
            v78[3259] = v81;
            if (!(v77 % v75)) {
              v78[3264] = ((((void)v81 - v78[3258]) << 29) - 0x100000000) | (((v78[3256] - v78[3255]) >> 3)
            }
                                                                               - 1);
            ++*(_DWORD *)(a1 + 96);
            goto LABEL_874;
          case 2:
            v44 = v622;
            uint64_t v45 = v622[3259];
            uint64_t v46 = v622[3258];
            if (v45 - v46 == 8 && !*(void *)(v45 - 8)) {
              v622[3259] = v46;
            }
            uint64_t v47 = *(void *)(a1 + 56) + (1 << (*(_DWORD *)(a1 + 100) + 6));
            unint64_t v48 = sub_3EFB8(a1, (uint64_t)v44, v635 & 0xFFFFF, v47);
            uint64_t v12 = sub_F6A5C((uint64_t)v44, v572, *(unsigned int *)(a1 + 24), v574, v48);
            if (v48 < *(void *)(a1 + 72))
            {
              v49 = sub_12C18C();
              if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)__s1 = 136315650;
                *(void *)&__s1[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupp"
                                      "ort/AGXProfilingSupport/APS/AGXPSAPSParserGen1.cpp";
                *(_WORD *)&__s1[12] = 1024;
                *(_DWORD *)&__s1[14] = 1091;
                *(_WORD *)&__s1[18] = 2080;
                *(void *)&__s1[20] = "uscTimestamp >= parser->lastUSCTimestamp";
                _os_log_error_impl(&def_1C1270, v49, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", __s1, 0x1Cu);
              }
              uint64_t v12 = sub_12C17C();
              if (v12) {
                uint64_t v12 = sub_12C184();
              }
            }
            v50 = v622;
            unint64_t v51 = *(unsigned int *)(a1 + 24);
            v52 = (unint64_t *)v622[3259];
            unint64_t v53 = v622[3260];
            if ((unint64_t)v52 >= v53)
            {
              uint64_t v12 = v622[3258];
              uint64_t v143 = ((uint64_t)v52 - v12) >> 3;
              if ((unint64_t)(v143 + 1) >> 61) {
                sub_566C();
              }
              unint64_t v144 = v53 - v12;
              unint64_t v145 = (uint64_t)(v53 - v12) >> 2;
              if (v145 <= v143 + 1) {
                unint64_t v145 = v143 + 1;
              }
              if (v144 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v146 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v146 = v145;
              }
              if (v146)
              {
                v147 = (char *)sub_5714((uint64_t)(v622 + 3260), v146);
                v52 = (unint64_t *)v50[3259];
                uint64_t v12 = v50[3258];
              }
              else
              {
                v147 = 0;
              }
              v190 = (unint64_t *)&v147[8 * v143];
              unint64_t *v190 = v48;
              v54 = v190 + 1;
              while (v52 != (unint64_t *)v12)
              {
                unint64_t v191 = *--v52;
                *--v190 = v191;
              }
              v50[3258] = v190;
              v50[3259] = v54;
              v50[3260] = &v147[8 * v146];
              if (v12) {
                operator delete((void *)v12);
              }
            }
            else
            {
              unint64_t *v52 = v48;
              v54 = v52 + 1;
            }
            v50[3259] = v54;
            if (!(v48 % v51)) {
              v50[3264] = ((((void)v54 - v50[3258]) << 29) - 0x100000000) | (((v50[3256] - v50[3255]) >> 3)
            }
                                                                               - 1);
            *(void *)(a1 + 72) = v48;
            *(void *)(a1 + 80) = v48;
            *(_DWORD *)(a1 + 88) = v635 & 0xFFFFF;
            *(_DWORD *)(a1 + 96) = 0;
            v192 = v622;
            v193 = (uint64_t *)v622[3256];
            unint64_t v194 = v622[3257];
            if ((unint64_t)v193 >= v194)
            {
              uint64_t v12 = v622[3255];
              uint64_t v196 = ((uint64_t)v193 - v12) >> 3;
              if ((unint64_t)(v196 + 1) >> 61) {
                sub_566C();
              }
              unint64_t v197 = v194 - v12;
              unint64_t v198 = (uint64_t)(v194 - v12) >> 2;
              if (v198 <= v196 + 1) {
                unint64_t v198 = v196 + 1;
              }
              if (v197 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v199 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v199 = v198;
              }
              if (v199)
              {
                v200 = (char *)sub_5714((uint64_t)(v622 + 3257), v199);
                v193 = (uint64_t *)v192[3256];
                uint64_t v12 = v192[3255];
              }
              else
              {
                v200 = 0;
              }
              v201 = (uint64_t *)&v200[8 * v196];
              uint64_t *v201 = v47;
              v195 = v201 + 1;
              while (v193 != (uint64_t *)v12)
              {
                uint64_t v202 = *--v193;
                *--v201 = v202;
              }
              v192[3255] = v201;
              v192[3256] = v195;
              v192[3257] = &v200[8 * v199];
              if (v12) {
                operator delete((void *)v12);
              }
            }
            else
            {
              uint64_t *v193 = v47;
              v195 = v193 + 1;
            }
            v192[3256] = v195;
            uint64_t *v571 = v47;
            v203 = v622;
            uint64_t v204 = (((v622[3259] - v622[3258]) << 29) - 0x100000000) | (((v622[3256] - v622[3255]) >> 3)
                                                                        - 1);
            v205 = (uint64_t *)v622[3262];
            unint64_t v206 = v622[3263];
            if ((unint64_t)v205 >= v206)
            {
              v208 = (void **)(v622 + 3261);
              uint64_t v209 = v622[3261];
              uint64_t v210 = ((uint64_t)v205 - v209) >> 3;
              if ((unint64_t)(v210 + 1) >> 61) {
                sub_566C();
              }
              uint64_t v211 = v206 - v209;
              uint64_t v212 = v211 >> 2;
              if (v211 >> 2 <= (unint64_t)(v210 + 1)) {
                uint64_t v212 = v210 + 1;
              }
              if ((unint64_t)v211 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v213 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v213 = v212;
              }
              if (v213) {
                uint64_t v12 = (uint64_t)sub_5714((uint64_t)(v622 + 3263), v213);
              }
              else {
                uint64_t v12 = 0;
              }
              v228 = (uint64_t *)(v12 + 8 * v210);
              uint64_t *v228 = v204;
              v207 = v228 + 1;
              v229 = (char *)v203[3262];
              v230 = (char *)v203[3261];
              if (v229 != v230)
              {
                do
                {
                  uint64_t v231 = *((void *)v229 - 1);
                  v229 -= 8;
                  *--v228 = v231;
                }
                while (v229 != v230);
                v229 = (char *)*v208;
              }
              v203[3261] = v228;
              v203[3262] = v207;
              v203[3263] = v12 + 8 * v213;
              if (v229) {
                operator delete(v229);
              }
            }
            else
            {
              uint64_t *v205 = v204;
              v207 = v205 + 1;
            }
            v203[3262] = v207;
            goto LABEL_874;
          case 3:
            v60 = v622;
            uint64_t v61 = v622[3256];
            uint64_t v62 = v622[3255];
            if (v61 - v62 == 8 && !*(void *)(v61 - 8)) {
              v622[3256] = v62;
            }
            uint64_t v63 = v60[3259];
            uint64_t v64 = v60[3258];
            if (v63 - v64 == 8 && !*(void *)(v63 - 8)) {
              v60[3259] = v64;
            }
            unint64_t v65 = *((void *)&v635 + 1) & 0x3FFFFFFFFFFFFFLL;
            unint64_t v66 = sub_3EFB8(a1, (uint64_t)v60, v635 & 0xFFFFF, *((void *)&v635 + 1) & 0x3FFFFFFFFFFFFFLL);
            sub_F6A04((uint64_t)v60, (unsigned char *)(a1 + 92), 1 << (*(_DWORD *)(a1 + 100) + 6), v571, v65);
            uint64_t v12 = sub_F6A5C((uint64_t)v622, v572, *(unsigned int *)(a1 + 24), v574, v66);
            if ((*((void *)&v635 + 1) & 0x3FFFFFFFFFFFFFuLL) <= *(void *)(a1 + 56))
            {
              v67 = sub_12C18C();
              if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)__s1 = 136315650;
                *(void *)&__s1[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupp"
                                      "ort/AGXProfilingSupport/APS/AGXPSAPSParserGen1.cpp";
                *(_WORD *)&__s1[12] = 1024;
                *(_DWORD *)&__s1[14] = 1035;
                *(_WORD *)&__s1[18] = 2080;
                *(void *)&__s1[20] = "token.bits.tok.timeStamp.systemTime > parser->lastSystemTimestamp";
                _os_log_error_impl(&def_1C1270, v67, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", __s1, 0x1Cu);
              }
              uint64_t v12 = sub_12C17C();
              if (v12) {
                uint64_t v12 = sub_12C184();
              }
            }
            v68 = v622;
            uint64_t v69 = *((void *)&v635 + 1) & 0x3FFFFFFFFFFFFFLL;
            v70 = (uint64_t *)v622[3256];
            unint64_t v71 = v622[3257];
            if ((unint64_t)v70 >= v71)
            {
              uint64_t v12 = v622[3255];
              uint64_t v148 = ((uint64_t)v70 - v12) >> 3;
              if ((unint64_t)(v148 + 1) >> 61) {
                sub_566C();
              }
              unint64_t v149 = v71 - v12;
              unint64_t v150 = (uint64_t)(v71 - v12) >> 2;
              if (v150 <= v148 + 1) {
                unint64_t v150 = v148 + 1;
              }
              if (v149 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v151 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v151 = v150;
              }
              if (v151)
              {
                v152 = (char *)sub_5714((uint64_t)(v622 + 3257), v151);
                v70 = (uint64_t *)v68[3256];
                uint64_t v12 = v68[3255];
              }
              else
              {
                v152 = 0;
              }
              v214 = (uint64_t *)&v152[8 * v148];
              uint64_t *v214 = v69;
              v72 = v214 + 1;
              while (v70 != (uint64_t *)v12)
              {
                uint64_t v215 = *--v70;
                *--v214 = v215;
              }
              v68[3255] = v214;
              v68[3256] = v72;
              v68[3257] = &v152[8 * v151];
              if (v12) {
                operator delete((void *)v12);
              }
            }
            else
            {
              uint64_t *v70 = v69;
              v72 = v70 + 1;
            }
            v68[3256] = v72;
            unint64_t v216 = *v574;
            if (v66 <= *v574)
            {
              if (v66 >= *v574) {
                goto LABEL_486;
              }
              *(void *)(a1 + 80) = v216;
              int v222 = (v635 & 0xFFFFF) + v66 - v216;
            }
            else
            {
              v217 = v622;
              unint64_t v218 = *(unsigned int *)(a1 + 24);
              v219 = (unint64_t *)v622[3259];
              unint64_t v220 = v622[3260];
              if ((unint64_t)v219 >= v220)
              {
                uint64_t v12 = v622[3258];
                uint64_t v223 = ((uint64_t)v219 - v12) >> 3;
                if ((unint64_t)(v223 + 1) >> 61) {
                  sub_566C();
                }
                unint64_t v224 = v220 - v12;
                unint64_t v225 = (uint64_t)(v220 - v12) >> 2;
                if (v225 <= v223 + 1) {
                  unint64_t v225 = v223 + 1;
                }
                if (v224 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v226 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v226 = v225;
                }
                if (v226)
                {
                  v227 = (char *)sub_5714((uint64_t)(v622 + 3260), v226);
                  v219 = (unint64_t *)v217[3259];
                  uint64_t v12 = v217[3258];
                }
                else
                {
                  v227 = 0;
                }
                v311 = (unint64_t *)&v227[8 * v223];
                unint64_t *v311 = v66;
                v221 = v311 + 1;
                while (v219 != (unint64_t *)v12)
                {
                  unint64_t v312 = *--v219;
                  *--v311 = v312;
                }
                v217[3258] = v311;
                v217[3259] = v221;
                v217[3260] = &v227[8 * v226];
                if (v12) {
                  operator delete((void *)v12);
                }
              }
              else
              {
                unint64_t *v219 = v66;
                v221 = v219 + 1;
              }
              v217[3259] = v221;
              if (!(v66 % v218)) {
                v217[3264] = ((((void)v221 - v217[3258]) << 29) - 0x100000000) | (((v217[3256] - v217[3255]) >> 3)
              }
                                                                                    - 1);
              *(void *)(a1 + 72) = v66;
              *(void *)(a1 + 80) = v66;
              int v222 = v635 & 0xFFFFF;
            }
            *(_DWORD *)(a1 + 88) = v222;
LABEL_486:
            *(_DWORD *)(a1 + 96) = 0;
            v313 = v622;
            uint64_t v314 = (((v622[3259] - v622[3258]) << 29) - 0x100000000) | (((v622[3256] - v622[3255]) >> 3)
                                                                        - 1);
            v315 = (uint64_t *)v622[3262];
            unint64_t v316 = v622[3263];
            if ((unint64_t)v315 >= v316)
            {
              v318 = (void **)(v622 + 3261);
              uint64_t v319 = v622[3261];
              uint64_t v320 = ((uint64_t)v315 - v319) >> 3;
              if ((unint64_t)(v320 + 1) >> 61) {
                sub_566C();
              }
              uint64_t v321 = v316 - v319;
              uint64_t v322 = v321 >> 2;
              if (v321 >> 2 <= (unint64_t)(v320 + 1)) {
                uint64_t v322 = v320 + 1;
              }
              if ((unint64_t)v321 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v323 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v323 = v322;
              }
              if (v323) {
                uint64_t v12 = (uint64_t)sub_5714((uint64_t)(v622 + 3263), v323);
              }
              else {
                uint64_t v12 = 0;
              }
              v324 = (uint64_t *)(v12 + 8 * v320);
              uint64_t *v324 = v314;
              v317 = v324 + 1;
              v325 = (char *)v313[3262];
              v326 = (char *)v313[3261];
              if (v325 != v326)
              {
                do
                {
                  uint64_t v327 = *((void *)v325 - 1);
                  v325 -= 8;
                  *--v324 = v327;
                }
                while (v325 != v326);
                v325 = (char *)*v318;
              }
              v313[3261] = v324;
              v313[3262] = v317;
              v313[3263] = v12 + 8 * v323;
              if (v325) {
                operator delete(v325);
              }
            }
            else
            {
              uint64_t *v315 = v314;
              v317 = v315 + 1;
            }
            v313[3262] = v317;
            uint64_t v328 = *((void *)&v635 + 1) & 0x3FFFFFFFFFFFFFLL;
            *(void *)(a1 + 56) = *((void *)&v635 + 1) & 0x3FFFFFFFFFFFFFLL;
            *(void *)(a1 + 64) = v328;
            *(_DWORD *)(a1 + 100) = v636;
            goto LABEL_874;
          case 4:
            v29 = sub_12C18C();
            if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__s1 = 136315650;
              *(void *)&__s1[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSuppor"
                                    "t/AGXProfilingSupport/APS/AGXPSAPSParserGen1.cpp";
              *(_WORD *)&__s1[12] = 1024;
              *(_DWORD *)&__s1[14] = 1153;
              *(_WORD *)&__s1[18] = 2080;
              *(void *)&__s1[20] = "false";
              _os_log_error_impl(&def_1C1270, v29, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", __s1, 0x1Cu);
            }
            uint64_t v12 = sub_12C17C();
            if (v12) {
              uint64_t v12 = sub_12C184();
            }
            goto LABEL_874;
          case 5:
            int v82 = v635;
            unsigned int v83 = BYTE4(v635);
            BOOL v84 = v635 == 1;
            if (v635 == 1) {
              unsigned int v85 = BYTE4(v635) & 0xF | 0x60;
            }
            else {
              unsigned int v85 = BYTE4(v635);
            }
            if (v85 > 0x97) {
              goto LABEL_874;
            }
            char v86 = BYTE5(v635);
            unsigned int v87 = DWORD2(v635);
            uint64_t v88 = v573 + 224 * v85;
            if (!*(unsigned char *)(v88 + 216)) {
              goto LABEL_124;
            }
            if (*(unsigned char *)(v88 + 214))
            {
              sub_B998C(a1, v622, *(unsigned __int8 *)(v88 + 36), 1);
LABEL_124:
              *(void *)__s1 = (((v622[3259] - v622[3258]) << 29) - 0x100000000) | (((v622[3256] - v622[3255]) >> 3)
                                                                                     - 1);
              memset(&__s1[16], 255, 20);
              __s1[36] = v85;
              char v631 = 0;
              memset(&__s1[40], 0, 64);
              long long v624 = 0u;
              long long v625 = 0u;
              long long __p = 0u;
              long long v627 = 0u;
              char v628 = 0;
              int v632 = 0;
              sub_C2204(v88, (uint64_t)__s1);
              if ((void)__p)
              {
                *((void *)&__p + 1) = __p;
                operator delete((void *)__p);
              }
              if (*((void *)&v624 + 1))
              {
                *(void *)&long long v625 = *((void *)&v624 + 1);
                operator delete(*((void **)&v624 + 1));
              }
              if (*(void *)&__s1[88])
              {
                *(void *)&__s1[96] = *(void *)&__s1[88];
                operator delete(*(void **)&__s1[88]);
              }
              if (*(void *)&__s1[64])
              {
                *(void *)&__s1[72] = *(void *)&__s1[64];
                operator delete(*(void **)&__s1[64]);
              }
              uint64_t v12 = *(void *)&__s1[40];
              if (*(void *)&__s1[40])
              {
                *(void *)&__s1[48] = *(void *)&__s1[40];
                operator delete(*(void **)&__s1[40]);
              }
            }
            if (!*(unsigned char *)(v88 + 216)) {
              sub_8894();
            }
            *(unsigned char *)(v88 + 215) = v84;
            *(unsigned char *)(v88 + 214) = 1;
            *(unsigned char *)(v88 + 36) = v85;
            if (v82)
            {
              uint64_t v89 = *(void *)(a1 + 104);
              if (v89 == -1) {
                uint64_t v89 = 0;
              }
              *(void *)(a1 + 104) = v89 + 1;
              *(void *)(v88 + 16) = v89;
              uint64_t v90 = v562 + 16 * (v86 & 0x7F);
              *(void *)uint64_t v90 = v89;
              *(unsigned char *)(v90 + 8) = 1;
              unsigned int v83 = v85;
            }
            else
            {
              *(unsigned char *)(v88 + 36) = v83;
              if (v87 <= 7)
              {
                unsigned int v182 = *(_DWORD *)(v564 + 12 * v87);
                *(_DWORD *)(v88 + 208) = v182;
                if (v182 <= 7)
                {
                  uint64_t v183 = v568 + 56 * v182;
                  if (*(unsigned char *)(v183 + 48)) {
                    *(_DWORD *)(v88 + 32) = *(_DWORD *)(v183 + 24);
                  }
                }
                uint64_t v184 = v562 + 16 * (*(unsigned char *)(v564 + 12 * v87 + 8) & 0x7F);
                if (*(unsigned char *)(v184 + 8)) {
                  *(void *)(v88 + 16) = *(void *)v184;
                }
                if (v87 - 4 <= 2)
                {
                  uint64_t v185 = v569 + 40 * (v87 - 4);
                  if (*(unsigned char *)(v185 + 32)) {
                    *(void *)(v88 + 24) = *(void *)(v185 + 16);
                  }
                }
              }
            }
            if (v83 < 0x60) {
              goto LABEL_273;
            }
            if (v83 >= 0x68)
            {
              if (v83 <= 0x97) {
                goto LABEL_874;
              }
            }
            else if (v82 == 1)
            {
              goto LABEL_874;
            }
LABEL_273:
            if (*(void *)(v567 + 48 * v85 + 40))
            {
              uint64_t v186 = v567 + 48 * v85;
              uint64_t v188 = *(void *)(v186 + 8);
              v187 = (void *)(v186 + 8);
              if (*(unsigned char *)(*(void *)(*(void *)(v188 + ((v187[3] >> 6) & 0x3FFFFFFFFFFFFF8))
                                        + 8 * (v187[3] & 0x1FFLL))
                            + 32))
              {
                v189 = sub_12C18C();
                if (os_log_type_enabled(v189, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)__s1 = 136315650;
                  *(void *)&__s1[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSu"
                                        "pport/AGXProfilingSupport/APS/AGXPSAPSParserGen1.cpp";
                  *(_WORD *)&__s1[12] = 1024;
                  *(_DWORD *)&__s1[14] = 1429;
                  *(_WORD *)&__s1[18] = 2080;
                  *(void *)&__s1[20] = "!pendingPositionsForClique.front()->cliqueStartSeen";
                  _os_log_error_impl(&def_1C1270, v189, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", __s1, 0x1Cu);
                }
                if (sub_12C17C()) {
                  sub_12C184();
                }
              }
              *(unsigned char *)(*(void *)(*(void *)(*v187 + ((v187[3] >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * (v187[3] & 0x1FFLL))
                       + 32) = 1;
              *(unsigned char *)(v88 + 213) = 1;
              sub_C2388(a1, v622);
            }
            goto LABEL_874;
          case 6:
            sub_B998C(a1, v622, v635, 0);
            goto LABEL_874;
          case 7:
            if (DWORD1(v635) == 1)
            {
              uint64_t v73 = (*((void *)&v635 + 1) >> 5) & 0xFFFFFFFFFFFFLL;
              uint64_t v74 = v565 + 16 * (BYTE8(v635) & 0x1F);
              *(void *)uint64_t v74 = v73;
              *(unsigned char *)(v74 + 8) = 1;
            }
            else
            {
              if (BYTE8(v635) == 255) {
                goto LABEL_874;
              }
              uint64_t v133 = v565 + 16 * BYTE8(v635);
              if (!*(unsigned char *)(v133 + 8)) {
                goto LABEL_874;
              }
              uint64_t v73 = *(void *)v133;
            }
            if (v635 <= 0x97uLL)
            {
              uint64_t v134 = v573 + 224 * v635;
              if (!*(unsigned char *)(v134 + 216))
              {
                *(void *)__s1 = (((v622[3259] - v622[3258]) << 29) - 0x100000000) | (((v622[3256] - v622[3255]) >> 3)
                                                                                       - 1);
                memset(&__s1[16], 255, 20);
                __s1[36] = v635;
                char v631 = 0;
                memset(&__s1[40], 0, 64);
                long long v624 = 0u;
                long long v625 = 0u;
                long long __p = 0u;
                long long v627 = 0u;
                char v628 = 0;
                int v632 = 0;
                sub_C2204(v134, (uint64_t)__s1);
                if ((void)__p)
                {
                  *((void *)&__p + 1) = __p;
                  operator delete((void *)__p);
                }
                if (*((void *)&v624 + 1))
                {
                  *(void *)&long long v625 = *((void *)&v624 + 1);
                  operator delete(*((void **)&v624 + 1));
                }
                if (*(void *)&__s1[88])
                {
                  *(void *)&__s1[96] = *(void *)&__s1[88];
                  operator delete(*(void **)&__s1[88]);
                }
                if (*(void *)&__s1[64])
                {
                  *(void *)&__s1[72] = *(void *)&__s1[64];
                  operator delete(*(void **)&__s1[64]);
                }
                uint64_t v12 = *(void *)&__s1[40];
                if (*(void *)&__s1[40])
                {
                  *(void *)&__s1[48] = *(void *)&__s1[40];
                  operator delete(*(void **)&__s1[40]);
                }
              }
              unint64_t v135 = *(void *)(v134 + 80);
              v136 = *(uint64_t **)(v134 + 72);
              if ((unint64_t)v136 >= v135)
              {
                uint64_t v12 = *(void *)(v134 + 64);
                uint64_t v232 = ((uint64_t)v136 - v12) >> 3;
                if ((unint64_t)(v232 + 1) >> 61) {
                  sub_566C();
                }
                unint64_t v233 = v135 - v12;
                unint64_t v234 = (uint64_t)(v135 - v12) >> 2;
                if (v234 <= v232 + 1) {
                  unint64_t v234 = v232 + 1;
                }
                if (v233 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v235 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v235 = v234;
                }
                if (v235)
                {
                  v236 = (char *)sub_5714(v134 + 80, v235);
                  uint64_t v12 = *(void *)(v134 + 64);
                  v136 = *(uint64_t **)(v134 + 72);
                }
                else
                {
                  v236 = 0;
                }
                v336 = (uint64_t *)&v236[8 * v232];
                uint64_t *v336 = v73;
                v137 = v336 + 1;
                while (v136 != (uint64_t *)v12)
                {
                  uint64_t v337 = *--v136;
                  *--v336 = v337;
                }
                *(void *)(v134 + 64) = v336;
                *(void *)(v134 + 72) = v137;
                *(void *)(v134 + 80) = &v236[8 * v235];
                if (v12) {
                  operator delete((void *)v12);
                }
              }
              else
              {
                uint64_t *v136 = v73;
                v137 = v136 + 1;
              }
              *(void *)(v134 + 72) = v137;
            }
            goto LABEL_874;
          case 8:
            v108 = (void *)(a1 + 41928);
            v109 = *(char **)(a1 + 41944);
            unsigned int v110 = v635;
            v111 = *(char **)(a1 + 41936);
            uint64_t v112 = v109 - v111;
            *(_OWORD *)__s1 = v635;
            *(_OWORD *)&__s1[16] = v636;
            __s1[32] = 0;
            __s1[40] = 0;
            unsigned __int8 v633 = 0;
            if (v109 == v111) {
              uint64_t v113 = 0;
            }
            else {
              uint64_t v113 = 2 * (v109 - v111) - 1;
            }
            unint64_t v114 = *(void *)(a1 + 41960);
            if (v113 != *(void *)(a1 + 41968) + v114) {
              goto LABEL_768;
            }
            BOOL v115 = v114 >= 0x10;
            unint64_t v116 = v114 - 16;
            if (v115)
            {
              v108 = (void *)(a1 + 41928);
              *(void *)(a1 + 41960) = v116;
              uint64_t v119 = *(void *)v111;
              v118 = v111 + 8;
              uint64_t v117 = v119;
              *(void *)(a1 + 41936) = v118;
              if (v109 == *(char **)(a1 + 41952))
              {
                unsigned int v120 = v110;
                v121 = (char *)*v575;
                if (v118 <= *v575)
                {
                  if (v109 == v121) {
                    unint64_t v338 = 1;
                  }
                  else {
                    unint64_t v338 = (v109 - v121) >> 2;
                  }
                  if (v338 >> 61) {
LABEL_934:
                  }
                    sub_574C();
                  v339 = (char *)operator new(8 * v338);
                  v340 = &v339[8 * (v338 >> 2)];
                  uint64_t v341 = v109 - v118;
                  BOOL v534 = v109 == v118;
                  v109 = v340;
                  if (!v534)
                  {
                    v109 = &v340[v341 & 0xFFFFFFFFFFFFFFF8];
                    uint64_t v342 = 8 * (v341 >> 3);
                    v343 = &v339[8 * (v338 >> 2)];
                    do
                    {
                      uint64_t v344 = *(void *)v118;
                      v118 += 8;
                      *(void *)v343 = v344;
                      v343 += 8;
                      v342 -= 8;
                    }
                    while (v342);
                  }
                  v108 = (void *)(a1 + 41928);
                  *v575 = v339;
                  *(void *)(a1 + 41936) = v340;
                  *(void *)(a1 + 41944) = v109;
                  *(void *)(a1 + 41952) = &v339[8 * v338];
                  if (v121)
                  {
                    operator delete(v121);
                    v109 = *(char **)(a1 + 41944);
                  }
                }
                else
                {
                  uint64_t v122 = (v118 - (unsigned char *)*v575) >> 3;
                  if (v122 >= -1) {
                    uint64_t v123 = v122 + 1;
                  }
                  else {
                    uint64_t v123 = v122 + 2;
                  }
                  v124 = &v118[-8 * (v123 >> 1)];
                  int64_t v125 = v109 - v118;
                  v108 = (void *)(a1 + 41928);
                  if (v109 != v118)
                  {
                    memmove(&v118[-8 * (v123 >> 1)], v118, v109 - v118);
                    v109 = *(char **)(a1 + 41936);
                  }
                  v126 = &v109[-8 * (v123 >> 1)];
                  v109 = &v124[v125];
                  *(void *)(a1 + 41936) = v126;
                  *(void *)(a1 + 41944) = &v124[v125];
                  unsigned int v110 = v120;
                }
              }
              *(void *)v109 = v117;
              goto LABEL_767;
            }
            unsigned int v559 = v635;
            uint64_t v159 = v112 >> 3;
            v160 = *(char **)(a1 + 41952);
            v161 = (char *)*v575;
            uint64_t v162 = v160 - (unsigned char *)*v575;
            if (v112 >> 3 < (unint64_t)(v162 >> 3))
            {
              v163 = operator new(0x1080uLL);
              v164 = v163;
              if (v160 == v109)
              {
                if (v111 == v161)
                {
                  if (v109 == v111) {
                    unint64_t v437 = 1;
                  }
                  else {
                    unint64_t v437 = (v160 - v111) >> 2;
                  }
                  if (v437 >> 61) {
                    goto LABEL_934;
                  }
                  v438 = (char *)operator new(8 * v437);
                  v345 = &v438[(2 * v437 + 6) & 0xFFFFFFFFFFFFFFF8];
                  v439 = v345;
                  if (v109 != v111)
                  {
                    uint64_t v440 = 8 * v159;
                    v441 = &v438[(2 * v437 + 6) & 0xFFFFFFFFFFFFFFF8];
                    v442 = v111;
                    v439 = &v345[8 * v159];
                    do
                    {
                      uint64_t v443 = *(void *)v442;
                      v442 += 8;
                      *(void *)v441 = v443;
                      v441 += 8;
                      v440 -= 8;
                    }
                    while (v440);
                  }
                  v346 = (void *)(a1 + 41928);
                  *v575 = v438;
                  *(void *)(a1 + 41936) = v345;
                  *(void *)(a1 + 41944) = v439;
                  *(void *)(a1 + 41952) = &v438[8 * v437];
                  if (v111)
                  {
                    operator delete(v111);
                    v345 = *(char **)(a1 + 41936);
                  }
                }
                else
                {
                  v345 = v111;
                  v346 = (void *)(a1 + 41928);
                }
                *((void *)v345 - 1) = v164;
                v445 = (char *)v346[1];
                v444 = (char *)v346[2];
                v346[1] = v445 - 8;
                uint64_t v446 = *((void *)v445 - 1);
                v346[1] = v445;
                if (v444 == (char *)v346[3])
                {
                  v447 = (char *)*v575;
                  if (v445 <= *v575)
                  {
                    if (v444 == v447) {
                      unint64_t v453 = 1;
                    }
                    else {
                      unint64_t v453 = (v444 - v447) >> 2;
                    }
                    if (v453 >> 61) {
                      goto LABEL_934;
                    }
                    v454 = (char *)operator new(8 * v453);
                    v455 = &v454[8 * (v453 >> 2)];
                    uint64_t v456 = v444 - v445;
                    BOOL v534 = v444 == v445;
                    v444 = v455;
                    if (!v534)
                    {
                      v444 = &v455[v456 & 0xFFFFFFFFFFFFFFF8];
                      uint64_t v457 = 8 * (v456 >> 3);
                      v458 = &v454[8 * (v453 >> 2)];
                      do
                      {
                        uint64_t v459 = *(void *)v445;
                        v445 += 8;
                        *(void *)v458 = v459;
                        v458 += 8;
                        v457 -= 8;
                      }
                      while (v457);
                    }
                    *v575 = v454;
                    *(void *)(a1 + 41936) = v455;
                    *(void *)(a1 + 41944) = v444;
                    *(void *)(a1 + 41952) = &v454[8 * v453];
                    if (v447)
                    {
                      operator delete(v447);
                      v444 = *(char **)(a1 + 41944);
                    }
                  }
                  else
                  {
                    uint64_t v448 = (v445 - (unsigned char *)*v575) >> 3;
                    if (v448 >= -1) {
                      uint64_t v449 = v448 + 1;
                    }
                    else {
                      uint64_t v449 = v448 + 2;
                    }
                    v450 = &v445[-8 * (v449 >> 1)];
                    int64_t v451 = v444 - v445;
                    if (v444 == v445)
                    {
                      uint64_t v452 = a1 + 41928;
                    }
                    else
                    {
                      memmove(&v445[-8 * (v449 >> 1)], v445, v444 - v445);
                      uint64_t v452 = a1 + 41928;
                      v445 = *(char **)(a1 + 41936);
                    }
                    v444 = &v450[v451];
                    *(void *)(v452 + 8) = &v445[-8 * (v449 >> 1)];
                    *(void *)(v452 + 16) = &v450[v451];
                  }
                }
                *(void *)v444 = v446;
              }
              else
              {
                *(void *)v109 = v163;
              }
              unsigned int v110 = v559;
              v108 = (void *)(a1 + 41928);
LABEL_767:
              v108[2] += 8;
              goto LABEL_768;
            }
            uint64_t v249 = v162 >> 2;
            if (v160 == v161) {
              unint64_t v250 = 1;
            }
            else {
              unint64_t v250 = v249;
            }
            if (v250 >> 61) {
              goto LABEL_934;
            }
            v251 = (char *)operator new(8 * v250);
            v252 = operator new(0x1080uLL);
            v253 = &v251[8 * v159];
            v254 = &v251[8 * v250];
            if (v159 == v250)
            {
              if (v112 < 1)
              {
                if (v109 == v111) {
                  unint64_t v421 = 1;
                }
                else {
                  unint64_t v421 = v112 >> 2;
                }
                if (v421 >> 61) {
                  sub_574C();
                }
                v422 = (char *)operator new(8 * v421);
                v253 = &v422[8 * (v421 >> 2)];
                v254 = &v422[8 * v421];
                operator delete(v251);
                v111 = *(char **)(a1 + 41936);
                v109 = *(char **)(a1 + 41944);
                v251 = v422;
              }
              else
              {
                unint64_t v255 = v159 + 2;
                if (v159 >= -1) {
                  unint64_t v255 = v159 + 1;
                }
                v253 -= 8 * (v255 >> 1);
              }
            }
            *(void *)v253 = v252;
            v423 = v253 + 8;
            if (v109 != v111)
            {
              do
              {
                if (v253 == v251)
                {
                  if (v423 >= v254)
                  {
                    if (v254 == v253) {
                      unint64_t v428 = 1;
                    }
                    else {
                      unint64_t v428 = (v254 - v253) >> 2;
                    }
                    if (v428 >> 61) {
                      sub_574C();
                    }
                    v429 = (char *)operator new(8 * v428);
                    v251 = v429;
                    v424 = &v429[(2 * v428 + 6) & 0xFFFFFFFFFFFFFFF8];
                    v425 = v424;
                    uint64_t v430 = v423 - v253;
                    if (v423 != v253)
                    {
                      v425 = &v424[v430 & 0xFFFFFFFFFFFFFFF8];
                      uint64_t v431 = 8 * (v430 >> 3);
                      v432 = &v429[(2 * v428 + 6) & 0xFFFFFFFFFFFFFFF8];
                      v433 = v253;
                      do
                      {
                        uint64_t v434 = *(void *)v433;
                        v433 += 8;
                        *(void *)v432 = v434;
                        v432 += 8;
                        v431 -= 8;
                      }
                      while (v431);
                    }
                    v254 = &v429[8 * v428];
                    operator delete(v253);
                  }
                  else
                  {
                    uint64_t v426 = (v254 - v423) >> 3;
                    if (v426 >= -1) {
                      unint64_t v427 = v426 + 1;
                    }
                    else {
                      unint64_t v427 = v426 + 2;
                    }
                    v425 = &v423[8 * (v427 >> 1)];
                    v424 = &v253[8 * (v427 >> 1)];
                    if (v423 == v253)
                    {
                      v251 = v423;
                    }
                    else
                    {
                      memmove(&v253[8 * (v427 >> 1)], v253, v423 - v253);
                      v251 = v253;
                    }
                  }
                }
                else
                {
                  v424 = v253;
                  v425 = v423;
                }
                uint64_t v435 = *((void *)v109 - 1);
                v109 -= 8;
                *((void *)v424 - 1) = v435;
                v253 = v424 - 8;
                v423 = v425;
              }
              while (v109 != *(char **)(a1 + 41936));
            }
            v108 = (void *)(a1 + 41928);
            v436 = *v575;
            *v575 = v251;
            *(void *)(a1 + 41936) = v253;
            *(void *)(a1 + 41944) = v423;
            *(void *)(a1 + 41952) = v254;
            unsigned int v110 = v559;
            if (v436) {
              operator delete(v436);
            }
LABEL_768:
            unint64_t v460 = v108[5] + v108[4];
            uint64_t v461 = *(void *)(v108[1] + ((v460 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 264 * (v460 & 0xF);
            long long v462 = *(_OWORD *)__s1;
            long long v463 = *(_OWORD *)&__s1[16];
            *(unsigned char *)(v461 + 32) = __s1[32];
            *(_OWORD *)uint64_t v461 = v462;
            *(_OWORD *)(v461 + 16) = v463;
            *(unsigned char *)(v461 + 256) = 0;
            *(unsigned char *)(v461 + 40) = 0;
            uint64_t v12 = v461 + 40;
            if (v633)
            {
              sub_C22B0(v12, (long long *)&__s1[40]);
              int v464 = v633;
              ++v108[5];
              if (v464)
              {
                if (v629)
                {
                  v630 = v629;
                  operator delete(v629);
                }
                if ((void)v627) {
                  operator delete((void *)v627);
                }
                if (*((void *)&v625 + 1)) {
                  operator delete(*((void **)&v625 + 1));
                }
                if ((void)v624) {
                  operator delete((void *)v624);
                }
                uint64_t v12 = *(void *)&__s1[80];
                if (*(void *)&__s1[80]) {
                  operator delete(*(void **)&__s1[80]);
                }
              }
            }
            else
            {
              ++v108[5];
            }
            if (v110 > 0x97) {
              goto LABEL_874;
            }
            v465 = (uint64_t *)(v567 + 48 * v110);
            v466 = (char *)v465[2];
            v467 = (char *)v465[1];
            uint64_t v468 = ((v466 - v467) << 6) - 1;
            uint64_t v469 = v466 - v467;
            unint64_t v470 = *(void *)(a1 + 41968) + *(void *)(a1 + 41960) - 1;
            uint64_t v561 = *(void *)(*(void *)(a1 + 41936) + ((v470 >> 1) & 0x7FFFFFFFFFFFFFF8));
            v472 = (unint64_t *)(v465 + 4);
            unint64_t v471 = v465[4];
            if (v466 == v467) {
              uint64_t v468 = 0;
            }
            v473 = v465 + 5;
            if (v468 != v465[5] + v471) {
              goto LABEL_867;
            }
            BOOL v115 = v471 >= 0x200;
            unint64_t v474 = v471 - 512;
            if (v115)
            {
              char v475 = *(unsigned char *)(a1 + 41968) + *(unsigned char *)(a1 + 41960) - 1;
              unint64_t *v472 = v474;
              unint64_t v477 = *(void *)v467;
              v476 = v467 + 8;
              unint64_t v470 = v477;
              v465[1] = (uint64_t)v476;
              if (v466 == (char *)v465[3])
              {
                v478 = (char *)*v465;
                if ((unint64_t)v476 <= *v465)
                {
                  if (v466 == v478) {
                    unint64_t v496 = 1;
                  }
                  else {
                    unint64_t v496 = (v466 - v478) >> 2;
                  }
                  if (v496 >> 61) {
                    sub_574C();
                  }
                  uint64_t v12 = (uint64_t)operator new(8 * v496);
                  unint64_t v497 = v12 + 8 * (v496 >> 2);
                  v498 = (char *)v497;
                  if (v466 != v476)
                  {
                    v498 = (char *)(v497 + ((v466 - v476) & 0xFFFFFFFFFFFFFFF8));
                    uint64_t v499 = 8 * ((v466 - v476) >> 3);
                    v500 = (void *)(v12 + 8 * (v496 >> 2));
                    do
                    {
                      uint64_t v501 = *(void *)v476;
                      v476 += 8;
                      *v500++ = v501;
                      v499 -= 8;
                    }
                    while (v499);
                  }
                  uint64_t *v465 = v12;
                  v465[1] = v497;
                  v465[2] = (uint64_t)v498;
                  v465[3] = v12 + 8 * v496;
                  v466 = v498;
                  v473 = v465 + 5;
                  if (v478)
                  {
                    operator delete(v478);
                    v466 = (char *)v465[2];
                  }
                }
                else
                {
                  unsigned int v479 = v110;
                  uint64_t v480 = (uint64_t)&v476[-*v465] >> 3;
                  if (v480 >= -1) {
                    uint64_t v481 = v480 + 1;
                  }
                  else {
                    uint64_t v481 = v480 + 2;
                  }
                  v482 = &v476[-8 * (v481 >> 1)];
                  int64_t v483 = v466 - v476;
                  if (v466 != v476)
                  {
                    uint64_t v12 = (uint64_t)memmove(&v476[-8 * (v481 >> 1)], v476, v466 - v476);
                    v466 = (char *)v465[1];
                  }
                  v484 = &v466[-8 * (v481 >> 1)];
                  v466 = &v482[v483];
                  v465[1] = (uint64_t)v484;
                  v465[2] = (uint64_t)&v482[v483];
                  unsigned int v110 = v479;
                  v473 = v465 + 5;
                  v472 = (unint64_t *)(v465 + 4);
                }
              }
              *(void *)v466 = v470;
              v465[2] += 8;
              LOBYTE(v470) = v475;
            }
            else
            {
              unsigned int v560 = v110;
              uint64_t v485 = v469 >> 3;
              v486 = (char *)v465[3];
              v487 = (char *)*v465;
              uint64_t v488 = (uint64_t)&v486[-*v465];
              uint64_t v558 = *(void *)(a1 + 41968) + *(void *)(a1 + 41960) - 1;
              if (v469 >> 3 < (unint64_t)(v488 >> 3))
              {
                uint64_t v12 = (uint64_t)operator new(0x1000uLL);
                uint64_t v489 = v12;
                if (v486 != v466)
                {
                  *(void *)v466 = v12;
                  LOBYTE(v470) = v558;
                  v473 = v465 + 5;
LABEL_866:
                  v465[2] += 8;
                  unsigned int v110 = v560;
                  goto LABEL_867;
                }
                if (v467 == v487)
                {
                  if (v466 == v467) {
                    unint64_t v518 = 1;
                  }
                  else {
                    unint64_t v518 = (v486 - v467) >> 2;
                  }
                  if (v518 >> 61) {
                    sub_574C();
                  }
                  uint64_t v12 = (uint64_t)operator new(8 * v518);
                  v502 = (char *)(v12 + 8 * ((v518 + 3) >> 2));
                  v519 = v502;
                  if (v466 != v467)
                  {
                    uint64_t v520 = 8 * v485;
                    v521 = (void *)(v12 + 8 * ((v518 + 3) >> 2));
                    v522 = v467;
                    v519 = &v502[8 * v485];
                    do
                    {
                      uint64_t v523 = *(void *)v522;
                      v522 += 8;
                      *v521++ = v523;
                      v520 -= 8;
                    }
                    while (v520);
                  }
                  uint64_t *v465 = v12;
                  v465[1] = (uint64_t)v502;
                  v465[2] = (uint64_t)v519;
                  v465[3] = v12 + 8 * v518;
                  if (v467)
                  {
                    operator delete(v467);
                    v502 = (char *)v465[1];
                  }
                }
                else
                {
                  v502 = v467;
                }
                *((void *)v502 - 1) = v489;
                v525 = (char *)v465[1];
                v524 = (char *)v465[2];
                v465[1] = (uint64_t)(v525 - 8);
                uint64_t v526 = *((void *)v525 - 1);
                v465[1] = (uint64_t)v525;
                v473 = v465 + 5;
                if (v524 == (char *)v465[3])
                {
                  v527 = (char *)*v465;
                  if ((unint64_t)v525 > *v465)
                  {
                    uint64_t v528 = (uint64_t)&v525[-*v465] >> 3;
                    if (v528 >= -1) {
                      uint64_t v529 = v528 + 1;
                    }
                    else {
                      uint64_t v529 = v528 + 2;
                    }
                    v530 = &v525[-8 * (v529 >> 1)];
                    int64_t v531 = v524 - v525;
                    if (v524 != v525)
                    {
                      uint64_t v12 = (uint64_t)memmove(&v525[-8 * (v529 >> 1)], v525, v524 - v525);
                      v525 = (char *)v465[1];
                    }
                    v524 = &v530[v531];
                    v465[1] = (uint64_t)&v525[-8 * (v529 >> 1)];
                    v465[2] = (uint64_t)&v530[v531];
                    v472 = (unint64_t *)(v465 + 4);
                    goto LABEL_864;
                  }
                  if (v524 == v527) {
                    unint64_t v470 = 1;
                  }
                  else {
                    unint64_t v470 = (v524 - v527) >> 2;
                  }
                  if (v470 >> 61) {
                    sub_574C();
                  }
                  uint64_t v12 = (uint64_t)operator new(8 * v470);
                  unint64_t v537 = v12 + 8 * (v470 >> 2);
                  v538 = (char *)v537;
                  v473 = v465 + 5;
                  if (v524 != v525)
                  {
                    v538 = (char *)(v537 + ((v524 - v525) & 0xFFFFFFFFFFFFFFF8));
                    uint64_t v539 = 8 * ((v524 - v525) >> 3);
                    v540 = (void *)(v12 + 8 * (v470 >> 2));
                    do
                    {
                      uint64_t v541 = *(void *)v525;
                      v525 += 8;
                      *v540++ = v541;
                      v539 -= 8;
                    }
                    while (v539);
                  }
                  uint64_t *v465 = v12;
                  v465[1] = v537;
                  v465[2] = (uint64_t)v538;
                  v465[3] = v12 + 8 * v470;
                  v524 = v538;
                  LOBYTE(v470) = v558;
                  if (v527)
                  {
                    operator delete(v527);
                    v524 = (char *)v465[2];
                  }
                }
                else
                {
LABEL_864:
                  LOBYTE(v470) = v558;
                }
                *(void *)v524 = v526;
                goto LABEL_866;
              }
              uint64_t v490 = v488 >> 2;
              if (v486 == v487) {
                unint64_t v491 = 1;
              }
              else {
                unint64_t v491 = v490;
              }
              if (v491 >> 61) {
                sub_574C();
              }
              v492 = (char *)operator new(8 * v491);
              v493 = operator new(0x1000uLL);
              v494 = &v492[8 * v485];
              unint64_t v470 = (unint64_t)&v492[8 * v491];
              if (v485 == v491)
              {
                v557 = v493;
                v473 = v465 + 5;
                if (v469 < 1)
                {
                  if (v466 == v467) {
                    unint64_t v503 = 1;
                  }
                  else {
                    unint64_t v503 = v469 >> 2;
                  }
                  if (v503 >> 61) {
                    sub_574C();
                  }
                  v504 = (char *)operator new(8 * v503);
                  v494 = &v504[8 * (v503 >> 2)];
                  unint64_t v470 = (unint64_t)&v504[8 * v503];
                  operator delete(v492);
                  v467 = (char *)v465[1];
                  v466 = (char *)v465[2];
                  v492 = v504;
                }
                else
                {
                  unint64_t v495 = v485 + 2;
                  if (v485 >= -1) {
                    unint64_t v495 = v485 + 1;
                  }
                  v494 -= 8 * (v495 >> 1);
                }
                v493 = v557;
              }
              else
              {
                v473 = v465 + 5;
              }
              *(void *)v494 = v493;
              v505 = v494 + 8;
              if (v466 != v467)
              {
                do
                {
                  if (v494 == v492)
                  {
                    if ((unint64_t)v505 >= v470)
                    {
                      if ((char *)v470 == v494) {
                        unint64_t v510 = 1;
                      }
                      else {
                        unint64_t v510 = (uint64_t)(v470 - (void)v494) >> 2;
                      }
                      if (v510 >> 61) {
                        sub_574C();
                      }
                      v511 = (char *)operator new(8 * v510);
                      v492 = v511;
                      v506 = &v511[(2 * v510 + 6) & 0xFFFFFFFFFFFFFFF8];
                      v507 = v506;
                      uint64_t v512 = v505 - v494;
                      if (v505 != v494)
                      {
                        v507 = &v506[v512 & 0xFFFFFFFFFFFFFFF8];
                        uint64_t v513 = 8 * (v512 >> 3);
                        v514 = &v511[(2 * v510 + 6) & 0xFFFFFFFFFFFFFFF8];
                        v515 = v494;
                        do
                        {
                          uint64_t v516 = *(void *)v515;
                          v515 += 8;
                          *(void *)v514 = v516;
                          v514 += 8;
                          v513 -= 8;
                        }
                        while (v513);
                      }
                      unint64_t v470 = (unint64_t)&v511[8 * v510];
                      operator delete(v494);
                    }
                    else
                    {
                      uint64_t v508 = (uint64_t)(v470 - (void)v505) >> 3;
                      if (v508 >= -1) {
                        unint64_t v509 = v508 + 1;
                      }
                      else {
                        unint64_t v509 = v508 + 2;
                      }
                      v507 = &v505[8 * (v509 >> 1)];
                      v506 = &v494[8 * (v509 >> 1)];
                      if (v505 == v494)
                      {
                        v492 = v505;
                      }
                      else
                      {
                        memmove(&v494[8 * (v509 >> 1)], v494, v505 - v494);
                        v492 = v494;
                      }
                    }
                  }
                  else
                  {
                    v506 = v494;
                    v507 = v505;
                  }
                  uint64_t v517 = *((void *)v466 - 1);
                  v466 -= 8;
                  *((void *)v506 - 1) = v517;
                  v494 = v506 - 8;
                  v505 = v507;
                }
                while (v466 != (char *)v465[1]);
              }
              uint64_t v12 = *v465;
              uint64_t *v465 = (uint64_t)v492;
              v465[1] = (uint64_t)v494;
              v465[2] = (uint64_t)v505;
              v465[3] = v470;
              unsigned int v110 = v560;
              v472 = (unint64_t *)(v465 + 4);
              LOBYTE(v470) = v558;
              if (v12) {
                operator delete((void *)v12);
              }
            }
LABEL_867:
            uint64_t v532 = *v473;
            *(void *)(*(void *)(v465[1] + (((*v472 + *v473) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((*v472 + *v473) & 0x1FF)) = v561 + 264 * (v470 & 0xF);
            uint64_t *v473 = v532 + 1;
            v533 = (unsigned __int8 *)(v573 + 224 * v110);
            if (v533[216]) {
              BOOL v534 = v533[214] == 0;
            }
            else {
              BOOL v534 = 1;
            }
            if (v534 || v533[213]) {
              goto LABEL_874;
            }
            unsigned int v535 = v533[36];
            if (v535 < 0x60) {
              goto LABEL_873;
            }
            if (v535 >= 0x68)
            {
              if (v535 >= 0x98)
              {
LABEL_873:
                unint64_t v536 = *(void *)(a1 + 41968) + *(void *)(a1 + 41960) - 1;
                *(unsigned char *)(*(void *)(*(void *)(a1 + 41936) + ((v536 >> 1) & 0x7FFFFFFFFFFFFFF8))
                         + 264 * (v536 & 0xF)
                         + 32) = 1;
                v533[213] = 1;
                sub_C2388(a1, v622);
              }
            }
            else if (!v533[215])
            {
              goto LABEL_873;
            }
LABEL_874:
            ++v579;
            unint64_t v14 = v621;
            uint64_t v13 = 8 * a3;
            if (v621 >= 8 * a3) {
              goto LABEL_893;
            }
            break;
          case 9:
            if (v635 <= 0x97uLL)
            {
              uint64_t v41 = v573 + 224 * v635;
              v42 = v622;
              if (!*(unsigned char *)(v41 + 216))
              {
                *(void *)__s1 = (((v622[3259] - v622[3258]) << 29) - 0x100000000) | (((v622[3256] - v622[3255]) >> 3)
                                                                                       - 1);
                memset(&__s1[16], 255, 20);
                __s1[36] = v635;
                char v631 = 0;
                memset(&__s1[40], 0, 64);
                long long v624 = 0u;
                long long v625 = 0u;
                long long __p = 0u;
                long long v627 = 0u;
                char v628 = 0;
                int v632 = 0;
                sub_C2204(v41, (uint64_t)__s1);
                if ((void)__p)
                {
                  *((void *)&__p + 1) = __p;
                  operator delete((void *)__p);
                }
                if (*((void *)&v624 + 1))
                {
                  *(void *)&long long v625 = *((void *)&v624 + 1);
                  operator delete(*((void **)&v624 + 1));
                }
                if (*(void *)&__s1[88])
                {
                  *(void *)&__s1[96] = *(void *)&__s1[88];
                  operator delete(*(void **)&__s1[88]);
                }
                if (*(void *)&__s1[64])
                {
                  *(void *)&__s1[72] = *(void *)&__s1[64];
                  operator delete(*(void **)&__s1[64]);
                }
                if (*(void *)&__s1[40])
                {
                  *(void *)&__s1[48] = *(void *)&__s1[40];
                  operator delete(*(void **)&__s1[40]);
                }
                v42 = v622;
              }
              if (DWORD1(v635) == 2)
              {
                int v43 = DWORD2(v635);
              }
              else if (DWORD1(v635) == 1)
              {
                int v43 = ~(-1 << SBYTE8(v635));
              }
              else if (DWORD1(v635))
              {
                int v43 = 0;
              }
              else
              {
                int v43 = -SBYTE8(v635);
              }
              sub_47ECC((void *)(v41 + 40), v42);
              sub_48030((void *)(v41 + 40), 1);
              unint64_t v241 = *(void *)(v41 + 104);
              v242 = *(int **)(v41 + 96);
              if ((unint64_t)v242 >= v241)
              {
                uint64_t v12 = *(void *)(v41 + 88);
                uint64_t v244 = ((uint64_t)v242 - v12) >> 2;
                if ((unint64_t)(v244 + 1) >> 62) {
                  sub_566C();
                }
                unint64_t v245 = v241 - v12;
                unint64_t v246 = (uint64_t)(v241 - v12) >> 1;
                if (v246 <= v244 + 1) {
                  unint64_t v246 = v244 + 1;
                }
                if (v245 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v247 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v247 = v246;
                }
                if (v247)
                {
                  v248 = (char *)sub_458C8(v41 + 104, v247);
                  uint64_t v12 = *(void *)(v41 + 88);
                  v242 = *(int **)(v41 + 96);
                }
                else
                {
                  v248 = 0;
                }
                v281 = (int *)&v248[4 * v244];
                int *v281 = v43;
                v243 = v281 + 1;
                while (v242 != (int *)v12)
                {
                  int v282 = *--v242;
                  *--v281 = v282;
                }
                *(void *)(v41 + 88) = v281;
                *(void *)(v41 + 96) = v243;
                *(void *)(v41 + 104) = &v248[4 * v247];
                if (v12) {
                  operator delete((void *)v12);
                }
              }
              else
              {
                int *v242 = v43;
                v243 = v242 + 1;
              }
              *(void *)(v41 + 96) = v243;
            }
            goto LABEL_874;
          case 0xA:
            unint64_t v98 = v622[3264];
            uint64_t v99 = v635;
            *(_DWORD *)__s1 = v635;
            v100 = &v622[3 * v635];
            v101 = (unint64_t *)v100[3097];
            v102 = (unint64_t *)v100[3098];
            if (v101 == v102
              || (unint64_t v103 = v635,
                  *(void *)(v622[3258] + ((v98 >> 29) & 0x7FFFFFFF8))
                - *(void *)(v622[3258] + ((*(v102 - 1) >> 29) & 0x7FFFFFFF8)) >= (unint64_t)*(unsigned int *)(a1 + 32)))
            {
              v104 = (void **)(v100 + 3098);
              v105 = &v622[3 * v635];
              unint64_t v106 = v105[3099];
              if ((unint64_t)v102 >= v106)
              {
                v153 = (void **)(v100 + 3097);
                uint64_t v154 = v102 - v101;
                if ((unint64_t)(v154 + 1) >> 61) {
                  sub_566C();
                }
                v155 = v105 + 3099;
                uint64_t v156 = v106 - (void)v101;
                uint64_t v157 = v156 >> 2;
                if (v156 >> 2 <= (unint64_t)(v154 + 1)) {
                  uint64_t v157 = v154 + 1;
                }
                if ((unint64_t)v156 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v158 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v158 = v157;
                }
                if (v158) {
                  uint64_t v12 = (uint64_t)sub_5714((uint64_t)v155, v158);
                }
                else {
                  uint64_t v12 = 0;
                }
                v237 = (unint64_t *)(v12 + 8 * v154);
                unint64_t *v237 = v98;
                v107 = v237 + 1;
                v238 = (char *)*v104;
                v239 = (char *)*v153;
                if (*v104 != *v153)
                {
                  do
                  {
                    unint64_t v240 = *((void *)v238 - 1);
                    v238 -= 8;
                    *--v237 = v240;
                  }
                  while (v238 != v239);
                  v238 = (char *)*v153;
                }
                *v153 = v237;
                *v104 = v107;
                void *v155 = v12 + 8 * v158;
                if (v238) {
                  operator delete(v238);
                }
              }
              else
              {
                unint64_t *v102 = v98;
                v107 = v102 + 1;
              }
              *v104 = v107;
              unint64_t v103 = *(unsigned int *)__s1;
              if (*(_DWORD *)__s1 <= 0x13u) {
                *(unsigned char *)(v566 + *(unsigned int *)__s1) = 0;
              }
            }
            if (*(void *)(a1 + 136) == *(void *)(a1 + 144))
            {
              switch(v99)
              {
                case 0:
                  v619[0] = a1;
                  v619[1] = (uint64_t)&v622;
                  v619[2] = (uint64_t)v634;
                  if (v103 <= 0x13) {
                    sub_C2B20(v619, (unsigned char *)(v566 + v103));
                  }
                  break;
                case 1:
                  v618[0] = a1;
                  v618[1] = (uint64_t)&v622;
                  v618[2] = (uint64_t)v634;
                  if (v103 <= 0x13) {
                    sub_C5024(v618, (unsigned char *)(v566 + v103));
                  }
                  break;
                case 2:
                  v617[0] = a1;
                  v617[1] = (uint64_t)&v622;
                  v617[2] = (uint64_t)v634;
                  if (v103 <= 0x13) {
                    sub_C67C8(v617, (unsigned char *)(v566 + v103));
                  }
                  break;
                case 3:
                  v616[0] = a1;
                  v616[1] = (uint64_t)&v622;
                  v616[2] = (uint64_t)v634;
                  if (v103 <= 0x13) {
                    sub_C8834(v616, (unsigned char *)(v566 + v103));
                  }
                  break;
                case 4:
                  v615[0] = a1;
                  v615[1] = (uint64_t)&v622;
                  v615[2] = (uint64_t)v634;
                  if (v103 <= 0x13) {
                    sub_CAEA8(v615, (unsigned char *)(v566 + v103));
                  }
                  break;
                case 5:
                  v614[0] = a1;
                  v614[1] = (uint64_t)&v622;
                  v614[2] = (uint64_t)v634;
                  if (v103 <= 0x13) {
                    sub_CCBC4(v614, (unsigned char *)(v566 + v103));
                  }
                  break;
                case 6:
                  v613[0] = a1;
                  v613[1] = (uint64_t)&v622;
                  v613[2] = (uint64_t)v634;
                  if (v103 <= 0x13) {
                    sub_CDA9C(v613, (unsigned char *)(v566 + v103));
                  }
                  break;
                case 7:
                  v612[0] = a1;
                  v612[1] = (uint64_t)&v622;
                  v612[2] = (uint64_t)v634;
                  if (v103 <= 0x13) {
                    sub_CEBAC(v612, (unsigned char *)(v566 + v103));
                  }
                  break;
                case 8:
                  v611[0] = a1;
                  v611[1] = (uint64_t)&v622;
                  v611[2] = (uint64_t)v634;
                  if (v103 <= 0x13) {
                    sub_D06B8(v611, (unsigned char *)(v566 + v103));
                  }
                  break;
                case 9:
                  v610[0] = a1;
                  v610[1] = (uint64_t)&v622;
                  v610[2] = (uint64_t)v634;
                  if (v103 <= 0x13) {
                    sub_D201C(v610, (unsigned char *)(v566 + v103));
                  }
                  break;
                case 10:
                  v609[0] = a1;
                  v609[1] = (uint64_t)&v622;
                  v609[2] = (uint64_t)v634;
                  if (v103 <= 0x13) {
                    sub_D2A14(v609, (unsigned char *)(v566 + v103));
                  }
                  break;
                case 11:
                  v608[0] = a1;
                  v608[1] = (uint64_t)&v622;
                  v608[2] = (uint64_t)v634;
                  if (v103 <= 0x13) {
                    sub_D5F58(v608, (unsigned char *)(v566 + v103));
                  }
                  break;
                case 12:
                  v607[0] = a1;
                  v607[1] = (uint64_t)&v622;
                  v607[2] = (uint64_t)v634;
                  if (v103 <= 0x13) {
                    sub_D6ADC(v607, (unsigned char *)(v566 + v103));
                  }
                  break;
                case 13:
                  v606[0] = a1;
                  v606[1] = (uint64_t)&v622;
                  v606[2] = (uint64_t)v634;
                  if (v103 <= 0x13) {
                    sub_D7CE4(v606, (unsigned char *)(v566 + v103));
                  }
                  break;
                case 14:
                  v605[0] = a1;
                  v605[1] = (uint64_t)&v622;
                  v605[2] = (uint64_t)v634;
                  if (v103 <= 0x13) {
                    sub_D92DC(v605, (unsigned char *)(v566 + v103));
                  }
                  break;
                case 15:
                  v604[0] = a1;
                  v604[1] = (uint64_t)&v622;
                  v604[2] = (uint64_t)v634;
                  if (v103 <= 0x13) {
                    sub_DC4D8(v604, (unsigned char *)(v566 + v103));
                  }
                  break;
                case 16:
                  v603[0] = a1;
                  v603[1] = (uint64_t)&v622;
                  v603[2] = (uint64_t)v634;
                  if (v103 <= 0x13) {
                    sub_DCA50(v603, (unsigned char *)(v566 + v103));
                  }
                  break;
                case 17:
                  v602[0] = a1;
                  v602[1] = (uint64_t)&v622;
                  v602[2] = (uint64_t)v634;
                  if (v103 <= 0x13) {
                    sub_DDB60(v602, (unsigned char *)(v566 + v103));
                  }
                  break;
                case 18:
                  v601[0] = a1;
                  v601[1] = (uint64_t)&v622;
                  v601[2] = (uint64_t)v634;
                  if (v103 <= 0x13) {
                    sub_DEB88(v601, (unsigned char *)(v566 + v103));
                  }
                  break;
                case 19:
                  v600[0] = a1;
                  v600[1] = (uint64_t)&v622;
                  v600[2] = (uint64_t)v634;
                  if (v103 <= 0x13) {
                    sub_E0264(v600, (unsigned char *)(v566 + v103));
                  }
                  break;
                default:
                  goto LABEL_874;
              }
            }
            else
            {
              switch(v99)
              {
                case 0:
                  v599[0] = a1;
                  v599[1] = (uint64_t)__s1;
                  v599[2] = (uint64_t)&v622;
                  v599[3] = (uint64_t)v634;
                  if (v103 <= 0x13) {
                    sub_E177C(v599, (unsigned char *)(v566 + v103));
                  }
                  break;
                case 1:
                  v598[0] = a1;
                  v598[1] = (uint64_t)__s1;
                  v598[2] = (uint64_t)&v622;
                  v598[3] = (uint64_t)v634;
                  if (v103 <= 0x13) {
                    sub_E2D14(v598, (unsigned char *)(v566 + v103));
                  }
                  break;
                case 2:
                  v597[0] = a1;
                  v597[1] = (uint64_t)__s1;
                  v597[2] = (uint64_t)&v622;
                  v597[3] = (uint64_t)v634;
                  if (v103 <= 0x13) {
                    sub_E3B3C(v597, (unsigned char *)(v566 + v103));
                  }
                  break;
                case 3:
                  v596[0] = a1;
                  v596[1] = (uint64_t)__s1;
                  v596[2] = (uint64_t)&v622;
                  v596[3] = (uint64_t)v634;
                  if (v103 <= 0x13) {
                    sub_E4DBC(v596, (unsigned char *)(v566 + v103));
                  }
                  break;
                case 4:
                  v595[0] = a1;
                  v595[1] = (uint64_t)__s1;
                  v595[2] = (uint64_t)&v622;
                  v595[3] = (uint64_t)v634;
                  if (v103 <= 0x13) {
                    sub_E63CC(v595, (unsigned char *)(v566 + v103));
                  }
                  break;
                case 5:
                  v594[0] = a1;
                  v594[1] = (uint64_t)__s1;
                  v594[2] = (uint64_t)&v622;
                  v594[3] = (uint64_t)v634;
                  if (v103 <= 0x13) {
                    sub_E75AC(v594, (unsigned char *)(v566 + v103));
                  }
                  break;
                case 6:
                  v593[0] = a1;
                  v593[1] = (uint64_t)__s1;
                  v593[2] = (uint64_t)&v622;
                  v593[3] = (uint64_t)v634;
                  if (v103 <= 0x13) {
                    sub_E7EC0(v593, (unsigned char *)(v566 + v103));
                  }
                  break;
                case 7:
                  v592[0] = a1;
                  v592[1] = (uint64_t)__s1;
                  v592[2] = (uint64_t)&v622;
                  v592[3] = (uint64_t)v634;
                  if (v103 <= 0x13) {
                    sub_E8948(v592, (unsigned char *)(v566 + v103));
                  }
                  break;
                case 8:
                  v591[0] = a1;
                  v591[1] = (uint64_t)__s1;
                  v591[2] = (uint64_t)&v622;
                  v591[3] = (uint64_t)v634;
                  if (v103 <= 0x13) {
                    sub_E9958(v591, (unsigned char *)(v566 + v103));
                  }
                  break;
                case 9:
                  v590[0] = a1;
                  v590[1] = (uint64_t)__s1;
                  v590[2] = (uint64_t)&v622;
                  v590[3] = (uint64_t)v634;
                  if (v103 <= 0x13) {
                    sub_EA87C(v590, (unsigned char *)(v566 + v103));
                  }
                  break;
                case 10:
                  v589[0] = a1;
                  v589[1] = (uint64_t)__s1;
                  v589[2] = (uint64_t)&v622;
                  v589[3] = (uint64_t)v634;
                  if (v103 <= 0x13) {
                    sub_EAEFC(v589, (unsigned char *)(v566 + v103));
                  }
                  break;
                case 11:
                  v588[0] = a1;
                  v588[1] = (uint64_t)__s1;
                  v588[2] = (uint64_t)&v622;
                  v588[3] = (uint64_t)v634;
                  if (v103 <= 0x13) {
                    sub_ECE14(v588, (unsigned char *)(v566 + v103));
                  }
                  break;
                case 12:
                  v587[0] = a1;
                  v587[1] = (uint64_t)__s1;
                  v587[2] = (uint64_t)&v622;
                  v587[3] = (uint64_t)v634;
                  if (v103 <= 0x13) {
                    sub_ED56C(v587, (unsigned char *)(v566 + v103));
                  }
                  break;
                case 13:
                  v586[0] = a1;
                  v586[1] = (uint64_t)__s1;
                  v586[2] = (uint64_t)&v622;
                  v586[3] = (uint64_t)v634;
                  if (v103 <= 0x13) {
                    sub_EE054(v586, (unsigned char *)(v566 + v103));
                  }
                  break;
                case 14:
                  v585[0] = a1;
                  v585[1] = (uint64_t)__s1;
                  v585[2] = (uint64_t)&v622;
                  v585[3] = (uint64_t)v634;
                  if (v103 <= 0x13) {
                    sub_EED90(v585, (unsigned char *)(v566 + v103));
                  }
                  break;
                case 15:
                  v584[0] = a1;
                  v584[1] = (uint64_t)__s1;
                  v584[2] = (uint64_t)&v622;
                  v584[3] = (uint64_t)v634;
                  if (v103 <= 0x13) {
                    sub_F0ACC(v584, (unsigned char *)(v566 + v103));
                  }
                  break;
                case 16:
                  v583[0] = a1;
                  v583[1] = (uint64_t)__s1;
                  v583[2] = (uint64_t)&v622;
                  v583[3] = (uint64_t)v634;
                  if (v103 <= 0x13) {
                    sub_F0EA0(v583, (unsigned char *)(v566 + v103));
                  }
                  break;
                case 17:
                  v582[0] = a1;
                  v582[1] = (uint64_t)__s1;
                  v582[2] = (uint64_t)&v622;
                  v582[3] = (uint64_t)v634;
                  if (v103 <= 0x13) {
                    sub_F1928(v582, (unsigned char *)(v566 + v103));
                  }
                  break;
                case 18:
                  v581[0] = a1;
                  v581[1] = (uint64_t)__s1;
                  v581[2] = (uint64_t)&v622;
                  v581[3] = (uint64_t)v634;
                  if (v103 <= 0x13) {
                    sub_F2308(v581, (unsigned char *)(v566 + v103));
                  }
                  break;
                case 19:
                  v580[0] = a1;
                  v580[1] = (uint64_t)__s1;
                  v580[2] = (uint64_t)&v622;
                  v580[3] = (uint64_t)v634;
                  if (v103 <= 0x13) {
                    sub_F3098(v580, (unsigned char *)(v566 + v103));
                  }
                  break;
                default:
                  goto LABEL_874;
              }
            }
            goto LABEL_874;
          case 0xB:
            unsigned int v26 = v635;
            if (v635 > 7)
            {
              int v27 = 0;
              __int16 v28 = -1;
            }
            else
            {
              int v27 = dword_4C7020[(int)v635];
              __int16 v28 = word_4C7D30[(int)v635];
            }
            uint64_t v127 = (((v622[3259] - v622[3258]) << 29) - 0x100000000) | (((v622[3256] - v622[3255]) >> 3)
                                                                        - 1);
            uint64_t v128 = *((void *)&v635 + 1);
            if (*(_DWORD *)(a1 + 120) == -1) {
              int v129 = 0;
            }
            else {
              int v129 = *(_DWORD *)(a1 + 120);
            }
            *(_DWORD *)(a1 + 120) = v129 + 1;
            if (v26 > 7) {
              goto LABEL_243;
            }
            uint64_t v130 = v568 + 56 * v26;
            if (!*(unsigned char *)(v130 + 48))
            {
              *(void *)uint64_t v130 = v127;
              *(void *)(v130 + 16) = v128;
              *(_DWORD *)(v130 + 24) = v129;
              *(_DWORD *)(v130 + 28) = v27;
              *(_WORD *)(v130 + 32) = v28;
              *(void *)(v130 + 40) = 0;
LABEL_242:
              *(unsigned char *)(v130 + 48) = 1;
              goto LABEL_243;
            }
            v131 = sub_12C18C();
            if (os_log_type_enabled(v131, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__s1 = 136315650;
              *(void *)&__s1[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSuppor"
                                    "t/AGXProfilingSupport/APS/AGXPSAPSParserGen1.cpp";
              *(_WORD *)&__s1[12] = 1024;
              *(_DWORD *)&__s1[14] = 1206;
              *(_WORD *)&__s1[18] = 2080;
              *(void *)&__s1[20] = "!currentKick";
              _os_log_error_impl(&def_1C1270, v131, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", __s1, 0x1Cu);
            }
            uint64_t v12 = sub_12C17C();
            if (v12) {
              uint64_t v12 = sub_12C184();
            }
            int v132 = *(unsigned __int8 *)(v130 + 48);
            *(void *)uint64_t v130 = v127;
            *(void *)(v130 + 16) = v128;
            *(_DWORD *)(v130 + 24) = v129;
            *(_DWORD *)(v130 + 28) = v27;
            *(_WORD *)(v130 + 32) = v28;
            *(void *)(v130 + 40) = 0;
            if (!v132) {
              goto LABEL_242;
            }
LABEL_243:
            if ((v570 & 2) != 0)
            {
              v170 = v622;
              v171 = (uint64_t *)v622[2];
              uint64_t v12 = (uint64_t)(v622 + 3);
              unint64_t v172 = v622[3];
              if ((unint64_t)v171 >= v172)
              {
                v174 = (void **)(v622 + 1);
                uint64_t v175 = v622[1];
                uint64_t v176 = ((uint64_t)v171 - v175) >> 3;
                if ((unint64_t)(v176 + 1) >> 61) {
                  sub_566C();
                }
                uint64_t v177 = v172 - v175;
                uint64_t v178 = v177 >> 2;
                if (v177 >> 2 <= (unint64_t)(v176 + 1)) {
                  uint64_t v178 = v176 + 1;
                }
                if ((unint64_t)v177 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v179 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v179 = v178;
                }
                if (v179) {
                  uint64_t v12 = (uint64_t)sub_5714(v12, v179);
                }
                else {
                  uint64_t v12 = 0;
                }
                v256 = (uint64_t *)(v12 + 8 * v176);
                uint64_t *v256 = v127;
                v173 = v256 + 1;
                v258 = (char *)v170[1];
                v257 = (char *)v170[2];
                if (v257 != v258)
                {
                  do
                  {
                    uint64_t v259 = *((void *)v257 - 1);
                    v257 -= 8;
                    *--v256 = v259;
                  }
                  while (v257 != v258);
                  v257 = (char *)*v174;
                }
                v170[1] = v256;
                v170[2] = v173;
                v170[3] = v12 + 8 * v179;
                if (v257) {
                  operator delete(v257);
                }
              }
              else
              {
                uint64_t *v171 = v127;
                v173 = v171 + 1;
              }
              v170[2] = v173;
              v260 = v622;
              v261 = (_DWORD *)v622[14];
              unint64_t v262 = v622[15];
              if ((unint64_t)v261 >= v262)
              {
                uint64_t v12 = v622[13];
                uint64_t v264 = ((uint64_t)v261 - v12) >> 2;
                if ((unint64_t)(v264 + 1) >> 62) {
                  sub_566C();
                }
                unint64_t v265 = v262 - v12;
                unint64_t v266 = (uint64_t)(v262 - v12) >> 1;
                if (v266 <= v264 + 1) {
                  unint64_t v266 = v264 + 1;
                }
                if (v265 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v267 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v267 = v266;
                }
                if (v267)
                {
                  v268 = (char *)sub_458C8((uint64_t)(v622 + 15), v267);
                  uint64_t v12 = v260[13];
                  v261 = (_DWORD *)v260[14];
                }
                else
                {
                  v268 = 0;
                }
                v269 = &v268[4 * v264];
                *(_DWORD *)v269 = v129;
                v263 = v269 + 4;
                while (v261 != (_DWORD *)v12)
                {
                  int v270 = *--v261;
                  *((_DWORD *)v269 - 1) = v270;
                  v269 -= 4;
                }
                v260[13] = v269;
                v260[14] = v263;
                v260[15] = &v268[4 * v267];
                if (v12) {
                  operator delete((void *)v12);
                }
              }
              else
              {
                _DWORD *v261 = v129;
                v263 = v261 + 1;
              }
              v260[14] = v263;
              v271 = v622;
              v272 = (__int16 *)v622[20];
              unint64_t v273 = v622[21];
              if ((unint64_t)v272 >= v273)
              {
                uint64_t v12 = v622[19];
                uint64_t v275 = (uint64_t)v272 - v12;
                if ((uint64_t)v272 - v12 <= -3) {
                  sub_566C();
                }
                uint64_t v276 = v275 >> 1;
                unint64_t v277 = v273 - v12;
                if (v277 <= (v275 >> 1) + 1) {
                  unint64_t v278 = v276 + 1;
                }
                else {
                  unint64_t v278 = v277;
                }
                if (v277 >= 0x7FFFFFFFFFFFFFFELL) {
                  uint64_t v279 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  uint64_t v279 = v278;
                }
                if (v279)
                {
                  v280 = (char *)sub_45900((uint64_t)(v622 + 21), v279);
                  uint64_t v12 = v271[19];
                  v272 = (__int16 *)v271[20];
                }
                else
                {
                  v280 = 0;
                }
                v287 = (__int16 *)&v280[2 * v276];
                __int16 *v287 = v28;
                v274 = v287 + 1;
                while (v272 != (__int16 *)v12)
                {
                  __int16 v288 = *--v272;
                  *--v287 = v288;
                }
                v271[19] = v287;
                v271[20] = v274;
                v271[21] = &v280[2 * v279];
                if (v12) {
                  operator delete((void *)v12);
                }
              }
              else
              {
                __int16 *v272 = v28;
                v274 = v272 + 1;
              }
              v271[20] = v274;
              v289 = v622;
              v290 = (_DWORD *)v622[17];
              unint64_t v291 = v622[18];
              if ((unint64_t)v290 >= v291)
              {
                uint64_t v12 = v622[16];
                uint64_t v293 = ((uint64_t)v290 - v12) >> 2;
                if ((unint64_t)(v293 + 1) >> 62) {
                  sub_566C();
                }
                unint64_t v294 = v291 - v12;
                unint64_t v295 = (uint64_t)(v291 - v12) >> 1;
                if (v295 <= v293 + 1) {
                  unint64_t v295 = v293 + 1;
                }
                if (v294 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v296 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v296 = v295;
                }
                if (v296)
                {
                  v297 = (char *)sub_458C8((uint64_t)(v622 + 18), v296);
                  uint64_t v12 = v289[16];
                  v290 = (_DWORD *)v289[17];
                }
                else
                {
                  v297 = 0;
                }
                v298 = &v297[4 * v293];
                *(_DWORD *)v298 = v27;
                v292 = v298 + 4;
                while (v290 != (_DWORD *)v12)
                {
                  int v299 = *--v290;
                  *((_DWORD *)v298 - 1) = v299;
                  v298 -= 4;
                }
                v289[16] = v298;
                v289[17] = v292;
                v289[18] = &v297[4 * v296];
                if (v12) {
                  operator delete((void *)v12);
                }
              }
              else
              {
                _DWORD *v290 = v27;
                v292 = v290 + 1;
              }
              v289[17] = v292;
              v300 = v622;
              v301 = (void *)v622[8];
              unint64_t v302 = v622[9];
              if ((unint64_t)v301 >= v302)
              {
                uint64_t v12 = v622[7];
                uint64_t v304 = ((uint64_t)v301 - v12) >> 3;
                if ((unint64_t)(v304 + 1) >> 61) {
                  sub_566C();
                }
                unint64_t v305 = v302 - v12;
                unint64_t v306 = (uint64_t)(v302 - v12) >> 2;
                if (v306 <= v304 + 1) {
                  unint64_t v306 = v304 + 1;
                }
                if (v305 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v307 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v307 = v306;
                }
                if (v307)
                {
                  v308 = (char *)sub_5714((uint64_t)(v622 + 9), v307);
                  uint64_t v12 = v300[7];
                  v301 = (void *)v300[8];
                }
                else
                {
                  v308 = 0;
                }
                v309 = &v308[8 * v304];
                *(void *)v309 = v128;
                v303 = v309 + 8;
                while (v301 != (void *)v12)
                {
                  uint64_t v310 = *--v301;
                  *((void *)v309 - 1) = v310;
                  v309 -= 8;
                }
                v300[7] = v309;
                v300[8] = v303;
                v300[9] = &v308[8 * v307];
                if (v12) {
                  operator delete((void *)v12);
                }
              }
              else
              {
                void *v301 = v128;
                v303 = v301 + 1;
              }
              v300[8] = v303;
            }
            goto LABEL_874;
          case 0xC:
            if (v635 <= 7)
            {
              uint64_t v30 = v568 + 56 * v635;
              if (*(unsigned char *)(v30 + 48))
              {
                uint64_t v31 = 0;
                uint64_t v32 = (((v622[3259] - v622[3258]) << 29) - 0x100000000) | (((v622[3256] - v622[3255]) >> 3)
                                                                           - 1);
                *(void *)(v30 + 40) = 0;
                v33 = (void *)(v30 + 40);
                *(void *)(v30 + 8) = v32;
                uint64_t v34 = a1 + 192;
                *(unsigned char *)(v30 + 42) = BYTE6(v635);
                *(_WORD *)(v30 + 40) = WORD2(v635);
                do
                {
                  if (*(unsigned char *)(v34 + 184) && *(_DWORD *)v34 == *(_DWORD *)(v30 + 24)) {
                    sub_B998C(a1, v622, v31, 1);
                  }
                  ++v31;
                  v34 += 224;
                }
                while (v31 != 152);
                uint64_t v35 = 0;
                v36 = (unsigned char *)(a1 + 34688);
                do
                {
                  if (*v36 && *((_DWORD *)v36 - 2) == *(_DWORD *)(v30 + 24)) {
                    sub_B960C(a1, v622, v35);
                  }
                  ++v35;
                  v36 += 40;
                }
                while (v35 != 16);
                if ((v570 & 2) == 0)
                {
                  v37 = v622;
                  v38 = (void *)v622[2];
                  unint64_t v39 = v622[3];
                  if ((unint64_t)v38 >= v39)
                  {
                    v329 = (void **)(v622 + 1);
                    uint64_t v330 = v622[1];
                    uint64_t v331 = ((uint64_t)v38 - v330) >> 3;
                    if ((unint64_t)(v331 + 1) >> 61) {
                      sub_566C();
                    }
                    uint64_t v332 = v39 - v330;
                    uint64_t v333 = v332 >> 2;
                    if (v332 >> 2 <= (unint64_t)(v331 + 1)) {
                      uint64_t v333 = v331 + 1;
                    }
                    if ((unint64_t)v332 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v334 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v334 = v333;
                    }
                    if (v334) {
                      v335 = (char *)sub_5714((uint64_t)(v622 + 3), v334);
                    }
                    else {
                      v335 = 0;
                    }
                    v347 = &v335[8 * v331];
                    *(void *)v347 = *(void *)v30;
                    v40 = v347 + 8;
                    v349 = (char *)v37[1];
                    v348 = (char *)v37[2];
                    if (v348 != v349)
                    {
                      do
                      {
                        uint64_t v350 = *((void *)v348 - 1);
                        v348 -= 8;
                        *((void *)v347 - 1) = v350;
                        v347 -= 8;
                      }
                      while (v348 != v349);
                      v348 = (char *)*v329;
                    }
                    v37[1] = v347;
                    v37[2] = v40;
                    v37[3] = &v335[8 * v334];
                    if (v348) {
                      operator delete(v348);
                    }
                  }
                  else
                  {
                    void *v38 = *(void *)v30;
                    v40 = v38 + 1;
                  }
                  v37[2] = v40;
                  v351 = v622;
                  v352 = (void *)v622[5];
                  uint64_t v12 = (uint64_t)(v622 + 6);
                  unint64_t v353 = v622[6];
                  if ((unint64_t)v352 >= v353)
                  {
                    v355 = (void **)(v622 + 4);
                    uint64_t v356 = v622[4];
                    uint64_t v357 = ((uint64_t)v352 - v356) >> 3;
                    if ((unint64_t)(v357 + 1) >> 61) {
                      sub_566C();
                    }
                    uint64_t v358 = v353 - v356;
                    uint64_t v359 = v358 >> 2;
                    if (v358 >> 2 <= (unint64_t)(v357 + 1)) {
                      uint64_t v359 = v357 + 1;
                    }
                    if ((unint64_t)v358 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v360 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v360 = v359;
                    }
                    if (v360) {
                      uint64_t v12 = (uint64_t)sub_5714(v12, v360);
                    }
                    else {
                      uint64_t v12 = 0;
                    }
                    v361 = (void *)(v12 + 8 * v357);
                    void *v361 = *(void *)(v30 + 8);
                    v354 = v361 + 1;
                    v363 = (char *)v351[4];
                    v362 = (char *)v351[5];
                    if (v362 != v363)
                    {
                      do
                      {
                        uint64_t v364 = *((void *)v362 - 1);
                        v362 -= 8;
                        *--v361 = v364;
                      }
                      while (v362 != v363);
                      v362 = (char *)*v355;
                    }
                    v351[4] = v361;
                    v351[5] = v354;
                    v351[6] = v12 + 8 * v360;
                    if (v362) {
                      operator delete(v362);
                    }
                  }
                  else
                  {
                    void *v352 = *(void *)(v30 + 8);
                    v354 = v352 + 1;
                  }
                  v351[5] = v354;
                  v365 = v622;
                  v366 = (_DWORD *)v622[14];
                  unint64_t v367 = v622[15];
                  if ((unint64_t)v366 >= v367)
                  {
                    uint64_t v12 = v622[13];
                    uint64_t v369 = ((uint64_t)v366 - v12) >> 2;
                    if ((unint64_t)(v369 + 1) >> 62) {
                      sub_566C();
                    }
                    unint64_t v370 = v367 - v12;
                    unint64_t v371 = (uint64_t)(v367 - v12) >> 1;
                    if (v371 <= v369 + 1) {
                      unint64_t v371 = v369 + 1;
                    }
                    if (v370 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v372 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v372 = v371;
                    }
                    if (v372)
                    {
                      v373 = (char *)sub_458C8((uint64_t)(v622 + 15), v372);
                      uint64_t v12 = v365[13];
                      v366 = (_DWORD *)v365[14];
                    }
                    else
                    {
                      v373 = 0;
                    }
                    v374 = &v373[4 * v369];
                    *(_DWORD *)v374 = *(_DWORD *)(v30 + 24);
                    v368 = v374 + 4;
                    while (v366 != (_DWORD *)v12)
                    {
                      int v375 = *--v366;
                      *((_DWORD *)v374 - 1) = v375;
                      v374 -= 4;
                    }
                    v365[13] = v374;
                    v365[14] = v368;
                    v365[15] = &v373[4 * v372];
                    if (v12) {
                      operator delete((void *)v12);
                    }
                  }
                  else
                  {
                    _DWORD *v366 = *(_DWORD *)(v30 + 24);
                    v368 = v366 + 1;
                  }
                  v365[14] = v368;
                  v376 = v622;
                  v377 = (_WORD *)v622[20];
                  unint64_t v378 = v622[21];
                  if ((unint64_t)v377 >= v378)
                  {
                    uint64_t v12 = v622[19];
                    uint64_t v380 = (uint64_t)v377 - v12;
                    if ((uint64_t)v377 - v12 <= -3) {
                      sub_566C();
                    }
                    uint64_t v381 = v380 >> 1;
                    unint64_t v382 = v378 - v12;
                    if (v382 <= (v380 >> 1) + 1) {
                      unint64_t v383 = v381 + 1;
                    }
                    else {
                      unint64_t v383 = v382;
                    }
                    if (v382 >= 0x7FFFFFFFFFFFFFFELL) {
                      uint64_t v384 = 0x7FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      uint64_t v384 = v383;
                    }
                    if (v384)
                    {
                      v385 = (char *)sub_45900((uint64_t)(v622 + 21), v384);
                      uint64_t v12 = v376[19];
                      v377 = (_WORD *)v376[20];
                    }
                    else
                    {
                      v385 = 0;
                    }
                    v386 = &v385[2 * v381];
                    *(_WORD *)v386 = *(_WORD *)(v30 + 32);
                    v379 = v386 + 2;
                    while (v377 != (_WORD *)v12)
                    {
                      __int16 v387 = *--v377;
                      *((_WORD *)v386 - 1) = v387;
                      v386 -= 2;
                    }
                    v376[19] = v386;
                    v376[20] = v379;
                    v376[21] = &v385[2 * v384];
                    if (v12) {
                      operator delete((void *)v12);
                    }
                  }
                  else
                  {
                    _WORD *v377 = *(_WORD *)(v30 + 32);
                    v379 = v377 + 1;
                  }
                  v376[20] = v379;
                  v388 = v622;
                  v389 = (_DWORD *)v622[17];
                  unint64_t v390 = v622[18];
                  if ((unint64_t)v389 >= v390)
                  {
                    uint64_t v12 = v622[16];
                    uint64_t v392 = ((uint64_t)v389 - v12) >> 2;
                    if ((unint64_t)(v392 + 1) >> 62) {
                      sub_566C();
                    }
                    unint64_t v393 = v390 - v12;
                    unint64_t v394 = (uint64_t)(v390 - v12) >> 1;
                    if (v394 <= v392 + 1) {
                      unint64_t v394 = v392 + 1;
                    }
                    if (v393 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v395 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v395 = v394;
                    }
                    if (v395)
                    {
                      v396 = (char *)sub_458C8((uint64_t)(v622 + 18), v395);
                      uint64_t v12 = v388[16];
                      v389 = (_DWORD *)v388[17];
                    }
                    else
                    {
                      v396 = 0;
                    }
                    v397 = &v396[4 * v392];
                    *(_DWORD *)v397 = *(_DWORD *)(v30 + 28);
                    v391 = v397 + 4;
                    while (v389 != (_DWORD *)v12)
                    {
                      int v398 = *--v389;
                      *((_DWORD *)v397 - 1) = v398;
                      v397 -= 4;
                    }
                    v388[16] = v397;
                    v388[17] = v391;
                    v388[18] = &v396[4 * v395];
                    if (v12) {
                      operator delete((void *)v12);
                    }
                  }
                  else
                  {
                    _DWORD *v389 = *(_DWORD *)(v30 + 28);
                    v391 = v389 + 1;
                  }
                  v388[17] = v391;
                  v399 = v622;
                  v400 = (void *)v622[8];
                  unint64_t v401 = v622[9];
                  if ((unint64_t)v400 >= v401)
                  {
                    uint64_t v12 = v622[7];
                    uint64_t v403 = ((uint64_t)v400 - v12) >> 3;
                    if ((unint64_t)(v403 + 1) >> 61) {
                      sub_566C();
                    }
                    unint64_t v404 = v401 - v12;
                    unint64_t v405 = (uint64_t)(v401 - v12) >> 2;
                    if (v405 <= v403 + 1) {
                      unint64_t v405 = v403 + 1;
                    }
                    if (v404 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v406 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v406 = v405;
                    }
                    if (v406)
                    {
                      v407 = (char *)sub_5714((uint64_t)(v622 + 9), v406);
                      uint64_t v12 = v399[7];
                      v400 = (void *)v399[8];
                    }
                    else
                    {
                      v407 = 0;
                    }
                    v408 = &v407[8 * v403];
                    *(void *)v408 = *(void *)(v30 + 16);
                    v402 = v408 + 8;
                    while (v400 != (void *)v12)
                    {
                      uint64_t v409 = *--v400;
                      *((void *)v408 - 1) = v409;
                      v408 -= 8;
                    }
                    v399[7] = v408;
                    v399[8] = v402;
                    v399[9] = &v407[8 * v406];
                    if (v12) {
                      operator delete((void *)v12);
                    }
                  }
                  else
                  {
                    void *v400 = *(void *)(v30 + 16);
                    v402 = v400 + 1;
                  }
                  v399[8] = v402;
                  v410 = v622;
                  v411 = (void *)v622[11];
                  unint64_t v412 = v622[12];
                  if ((unint64_t)v411 >= v412)
                  {
                    uint64_t v12 = v622[10];
                    uint64_t v414 = ((uint64_t)v411 - v12) >> 3;
                    if ((unint64_t)(v414 + 1) >> 61) {
                      sub_566C();
                    }
                    unint64_t v415 = v412 - v12;
                    unint64_t v416 = (uint64_t)(v412 - v12) >> 2;
                    if (v416 <= v414 + 1) {
                      unint64_t v416 = v414 + 1;
                    }
                    if (v415 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v417 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v417 = v416;
                    }
                    if (v417)
                    {
                      v418 = (char *)sub_5714((uint64_t)(v622 + 12), v417);
                      uint64_t v12 = v410[10];
                      v411 = (void *)v410[11];
                    }
                    else
                    {
                      v418 = 0;
                    }
                    v419 = &v418[8 * v414];
                    *(void *)v419 = *v33;
                    v413 = v419 + 8;
                    while (v411 != (void *)v12)
                    {
                      uint64_t v420 = *--v411;
                      *((void *)v419 - 1) = v420;
                      v419 -= 8;
                    }
                    v410[10] = v419;
                    v410[11] = v413;
                    v410[12] = &v418[8 * v417];
                    if (v12) {
                      operator delete((void *)v12);
                    }
                  }
                  else
                  {
                    void *v411 = *v33;
                    v413 = v411 + 1;
                  }
                  v410[11] = v413;
                }
                if (*(unsigned char *)(v30 + 48)) {
                  *(unsigned char *)(v30 + 48) = 0;
                }
              }
            }
            goto LABEL_874;
          case 0xD:
            uint64_t v91 = v569 + 40 * (v635 & 3);
            if (*(unsigned char *)(v91 + 32))
            {
              v92 = sub_12C18C();
              if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)__s1 = 136315650;
                *(void *)&__s1[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupp"
                                      "ort/AGXProfilingSupport/APS/AGXPSAPSParserGen1.cpp";
                *(_WORD *)&__s1[12] = 1024;
                *(_DWORD *)&__s1[14] = 1287;
                *(_WORD *)&__s1[18] = 2080;
                *(void *)&__s1[20] = "!currentTile.has_value()";
                _os_log_error_impl(&def_1C1270, v92, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", __s1, 0x1Cu);
              }
              uint64_t v12 = sub_12C17C();
              if (v12) {
                uint64_t v12 = sub_12C184();
              }
            }
            uint64_t v93 = v622[3256];
            uint64_t v94 = v622[3255];
            uint64_t v95 = v622[3259];
            uint64_t v96 = v622[3258];
            uint64_t v97 = *(void *)(a1 + 112);
            if (v97 == -1) {
              uint64_t v97 = 0;
            }
            *(void *)(a1 + 112) = v97 + 1;
            if (!*(unsigned char *)(v91 + 32)) {
              *(unsigned char *)(v91 + 32) = 1;
            }
            *(void *)uint64_t v91 = (((v95 - v96) << 29) - 0x100000000) | (((unint64_t)(v93 - v94) >> 3)
                                                                    - 1);
            *(void *)(v91 + 16) = v97;
            *(_DWORD *)(v91 + 24) = -1;
            goto LABEL_874;
          case 0xE:
            sub_B960C(a1, v622, v635 & 3);
            goto LABEL_874;
          case 0xF:
            int v55 = DWORD1(v635);
            if (DWORD1(v635) <= 7)
            {
              uint64_t v56 = v564 + 12 * DWORD1(v635);
              *(void *)uint64_t v56 = v635;
              *(_DWORD *)(v56 + 8) = DWORD2(v635);
              unsigned int v57 = v55 - 4;
              if (v57 <= 2)
              {
                uint64_t v58 = v569 + 40 * v57;
                if (*(unsigned char *)(v58 + 32))
                {
                  if (v635 <= 7)
                  {
                    uint64_t v59 = v568 + 56 * v635;
                    if (*(unsigned char *)(v59 + 48)) {
                      *(_DWORD *)(v58 + 24) = *(_DWORD *)(v59 + 24);
                    }
                  }
                }
              }
            }
            goto LABEL_874;
          case 0x10:
            unint64_t v621 = (v621 & 0xFFFFFFFFFFFF8000) + 0x8000;
            goto LABEL_874;
          default:
            goto LABEL_874;
        }
      }
      if (v563) {
        _DWORD *v563 = 2;
      }
    }
    else
    {
      uint64_t v579 = 0;
    }
LABEL_893:
    uint64_t v542 = 0;
    *(_DWORD *)&__s1[8] = 298;
    *(void *)__s1 = off_7426F8;
    do
    {
      v543 = v622;
      if (v622[3 * v542 + 97] != v622[3 * v542 + 98])
      {
        uint64_t v12 = (uint64_t)sub_B9B34(v12, v542);
        uint64_t v544 = v12;
        v545 = (uint64_t *)v543[3248];
        unint64_t v546 = v543[3249];
        if ((unint64_t)v545 >= v546)
        {
          uint64_t v548 = v543[3247];
          uint64_t v549 = ((uint64_t)v545 - v548) >> 3;
          if ((unint64_t)(v549 + 1) >> 61) {
            sub_566C();
          }
          uint64_t v550 = v546 - v548;
          uint64_t v551 = v550 >> 2;
          if (v550 >> 2 <= (unint64_t)(v549 + 1)) {
            uint64_t v551 = v549 + 1;
          }
          if ((unint64_t)v550 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v552 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v552 = v551;
          }
          if (v552) {
            uint64_t v12 = (uint64_t)sub_5714((uint64_t)(v543 + 3249), v552);
          }
          else {
            uint64_t v12 = 0;
          }
          v553 = (uint64_t *)(v12 + 8 * v549);
          uint64_t *v553 = v544;
          v547 = v553 + 1;
          v554 = (char *)v543[3248];
          v555 = (char *)v543[3247];
          if (v554 != v555)
          {
            do
            {
              uint64_t v556 = *((void *)v554 - 1);
              v554 -= 8;
              *--v553 = v556;
            }
            while (v554 != v555);
            v554 = (char *)v543[3247];
          }
          v543[3247] = v553;
          v543[3248] = v547;
          v543[3249] = v12 + 8 * v552;
          if (v554) {
            operator delete(v554);
          }
        }
        else
        {
          uint64_t *v545 = v12;
          v547 = v545 + 1;
        }
        v543[3248] = v547;
      }
      ++v542;
    }
    while (v542 != 298);
    result = v622;
    v622[3250] = v579;
    result[3251] = v621;
  }
  else
  {
    result = 0;
    if (a5) {
      *a5 = 1;
    }
  }
  return result;
}

void sub_9994C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p)
{
  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

#error "99AF8: too big function (funcsize=0)"

void sub_B8000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B92EC(uint64_t a1)
{
  *(void *)a1 = off_7426C8;
  if (*(void *)(a1 + 128))
  {
    sub_F63C4();
    operator delete();
  }
  uint64_t v2 = a1 + 41976;
  uint64_t v3 = a1 + 49272;
  do
  {
    v4 = *(void ***)(v3 - 40);
    v5 = *(void ***)(v3 - 32);
    *(void *)(v3 - 8) = 0;
    unint64_t v6 = (char *)v5 - (char *)v4;
    if ((unint64_t)((char *)v5 - (char *)v4) >= 0x11)
    {
      do
      {
        operator delete(*v4);
        v5 = *(void ***)(v3 - 32);
        v4 = (void **)(*(void *)(v3 - 40) + 8);
        *(void *)(v3 - 40) = v4;
        unint64_t v6 = (char *)v5 - (char *)v4;
      }
      while ((unint64_t)((char *)v5 - (char *)v4) > 0x10);
    }
    unint64_t v7 = v6 >> 3;
    if (v7 == 1)
    {
      uint64_t v8 = 256;
      goto LABEL_10;
    }
    if (v7 == 2)
    {
      uint64_t v8 = 512;
LABEL_10:
      *(void *)(v3 - 16) = v8;
    }
    if (v4 != v5)
    {
      do
      {
        uint64_t v9 = *v4++;
        operator delete(v9);
      }
      while (v4 != v5);
      uint64_t v11 = *(void *)(v3 - 40);
      uint64_t v10 = *(void *)(v3 - 32);
      if (v10 != v11) {
        *(void *)(v3 - 32) = v10 + ((v11 - v10 + 7) & 0xFFFFFFFFFFFFFFF8);
      }
    }
    uint64_t v13 = *(void **)(v3 - 48);
    v3 -= 48;
    uint64_t v12 = v13;
    if (v13) {
      operator delete(v12);
    }
  }
  while (v3 != v2);
  sub_95BEC(a1 + 41928);
  uint64_t v14 = 0;
  uint64_t v15 = a1 + 34024;
  do
  {
    if (*(unsigned char *)(a1 + 34200 + v14))
    {
      uint64_t v16 = v15 + v14;
      v17 = *(void **)(v15 + v14 + 96);
      if (v17)
      {
        *(void *)(v16 + 104) = v17;
        operator delete(v17);
      }
      unsigned int v18 = *(void **)(v16 + 72);
      if (v18)
      {
        *(void *)(v15 + v14 + 80) = v18;
        operator delete(v18);
      }
      uint64_t v19 = v15 + v14;
      v20 = *(void **)(v15 + v14 + 48);
      if (v20)
      {
        *(void *)(v19 + 56) = v20;
        operator delete(v20);
      }
      v21 = *(void **)(v19 + 24);
      if (v21)
      {
        *(void *)(v15 + v14 + 32) = v21;
        operator delete(v21);
      }
      int v22 = *(void **)(v15 + v14);
      if (v22)
      {
        *(void *)(v15 + v14 + 8) = v22;
        operator delete(v22);
      }
    }
    v14 -= 224;
  }
  while (v14 != -34048);
  v24 = (void **)(a1 + 136);
  std::vector<std::vector<ProfileEvent>>::__destroy_vector::operator()[abi:nn180100](&v24);
  return a1;
}

void sub_B94C8(uint64_t a1)
{
  sub_B92EC(a1);

  operator delete();
}

void sub_B9500(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 256))
  {
    uint64_t v2 = *(void **)(a1 + 176);
    if (v2)
    {
      *(void *)(a1 + 184) = v2;
      operator delete(v2);
    }
    uint64_t v3 = *(void **)(a1 + 152);
    if (v3)
    {
      *(void *)(a1 + 160) = v3;
      operator delete(v3);
    }
    v4 = *(void **)(a1 + 128);
    if (v4)
    {
      *(void *)(a1 + 136) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(a1 + 104);
    if (v5)
    {
      *(void *)(a1 + 112) = v5;
      operator delete(v5);
    }
    unint64_t v6 = *(void **)(a1 + 80);
    if (v6)
    {
      *(void *)(a1 + 88) = v6;
      operator delete(v6);
    }
  }
}

uint64_t sub_B9590(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 256))
  {
    uint64_t v2 = *(void **)(a1 + 176);
    if (v2)
    {
      *(void *)(a1 + 184) = v2;
      operator delete(v2);
    }
    uint64_t v3 = *(void **)(a1 + 152);
    if (v3)
    {
      *(void *)(a1 + 160) = v3;
      operator delete(v3);
    }
    v4 = *(void **)(a1 + 128);
    if (v4)
    {
      *(void *)(a1 + 136) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(a1 + 104);
    if (v5)
    {
      *(void *)(a1 + 112) = v5;
      operator delete(v5);
    }
    unint64_t v6 = *(void **)(a1 + 80);
    if (v6)
    {
      *(void *)(a1 + 88) = v6;
      operator delete(v6);
    }
  }
  return a1;
}

void sub_B960C(uint64_t a1, void *a2, unsigned int a3)
{
  if (a3 > 0xF) {
    return;
  }
  uint64_t v3 = a1 + 40 * a3 + 34656;
  if (!*(unsigned char *)(a1 + 40 * a3 + 34688)) {
    return;
  }
  uint64_t v5 = *(void *)v3;
  uint64_t v6 = *(void *)(a1 + 40 * a3 + 34672);
  int v66 = *(_DWORD *)(a1 + 40 * a3 + 34680);
  uint64_t v7 = (uint64_t)(a2 + 24);
  unint64_t v8 = a2[24];
  uint64_t v9 = a2[3256];
  uint64_t v10 = a2[3255];
  uint64_t v11 = a2[3259];
  uint64_t v12 = a2[3258];
  uint64_t v13 = (void *)a2[23];
  if ((unint64_t)v13 >= v8)
  {
    uint64_t v15 = (void **)(a2 + 22);
    uint64_t v16 = a2[22];
    uint64_t v17 = ((uint64_t)v13 - v16) >> 3;
    if ((unint64_t)(v17 + 1) >> 61) {
      goto LABEL_70;
    }
    uint64_t v18 = v8 - v16;
    uint64_t v19 = v18 >> 2;
    if (v18 >> 2 <= (unint64_t)(v17 + 1)) {
      uint64_t v19 = v17 + 1;
    }
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v19;
    }
    if (v20) {
      v21 = (char *)sub_5714(v7, v20);
    }
    else {
      v21 = 0;
    }
    int v22 = &v21[8 * v17];
    unint64_t v23 = &v21[8 * v20];
    *(void *)int v22 = v5;
    uint64_t v14 = v22 + 8;
    v25 = (char *)a2[22];
    v24 = (char *)a2[23];
    if (v24 != v25)
    {
      do
      {
        uint64_t v26 = *((void *)v24 - 1);
        v24 -= 8;
        *((void *)v22 - 1) = v26;
        v22 -= 8;
      }
      while (v24 != v25);
      v24 = (char *)*v15;
    }
    a2[22] = v22;
    a2[23] = v14;
    a2[24] = v23;
    if (v24) {
      operator delete(v24);
    }
  }
  else
  {
    *uint64_t v13 = v5;
    uint64_t v14 = v13 + 1;
  }
  uint64_t v27 = (((v11 - v12) << 29) - 0x100000000) | (((unint64_t)(v9 - v10) >> 3) - 1);
  unint64_t v28 = a2[27];
  a2[23] = v14;
  v29 = (uint64_t *)a2[26];
  if ((unint64_t)v29 >= v28)
  {
    uint64_t v31 = a2[25];
    uint64_t v32 = ((uint64_t)v29 - v31) >> 3;
    if (!((unint64_t)(v32 + 1) >> 61))
    {
      uint64_t v33 = v28 - v31;
      uint64_t v34 = v33 >> 2;
      if (v33 >> 2 <= (unint64_t)(v32 + 1)) {
        uint64_t v34 = v32 + 1;
      }
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v35 = v34;
      }
      if (v35) {
        v36 = (char *)sub_5714((uint64_t)(a2 + 27), v35);
      }
      else {
        v36 = 0;
      }
      v37 = (uint64_t *)&v36[8 * v32];
      v38 = &v36[8 * v35];
      uint64_t *v37 = v27;
      uint64_t v30 = v37 + 1;
      v40 = (char *)a2[25];
      unint64_t v39 = (char *)a2[26];
      if (v39 != v40)
      {
        do
        {
          uint64_t v41 = *((void *)v39 - 1);
          v39 -= 8;
          *--v37 = v41;
        }
        while (v39 != v40);
        unint64_t v39 = (char *)a2[25];
      }
      a2[25] = v37;
      a2[26] = v30;
      a2[27] = v38;
      if (v39) {
        operator delete(v39);
      }
      goto LABEL_35;
    }
LABEL_70:
    sub_566C();
  }
  uint64_t *v29 = v27;
  uint64_t v30 = v29 + 1;
LABEL_35:
  unint64_t v42 = a2[30];
  a2[26] = v30;
  int v43 = (char *)a2[29];
  if ((unint64_t)v43 >= v42)
  {
    uint64_t v45 = (char *)a2[28];
    uint64_t v46 = (v43 - v45) >> 3;
    if ((unint64_t)(v46 + 1) >> 61) {
      sub_566C();
    }
    unint64_t v47 = v42 - (void)v45;
    unint64_t v48 = (uint64_t)(v42 - (void)v45) >> 2;
    if (v48 <= v46 + 1) {
      unint64_t v48 = v46 + 1;
    }
    if (v47 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v49 = v48;
    }
    if (v49)
    {
      v50 = (char *)sub_5714((uint64_t)(a2 + 30), v49);
      uint64_t v45 = (char *)a2[28];
      int v43 = (char *)a2[29];
    }
    else
    {
      v50 = 0;
    }
    unint64_t v51 = &v50[8 * v46];
    v52 = &v50[8 * v49];
    *(void *)unint64_t v51 = v6;
    v44 = v51 + 8;
    while (v43 != v45)
    {
      uint64_t v53 = *((void *)v43 - 1);
      v43 -= 8;
      *((void *)v51 - 1) = v53;
      v51 -= 8;
    }
    a2[28] = v51;
    a2[29] = v44;
    a2[30] = v52;
    if (v45) {
      operator delete(v45);
    }
  }
  else
  {
    *(void *)int v43 = v6;
    v44 = v43 + 8;
  }
  a2[29] = v44;
  v54 = (char *)a2[32];
  unint64_t v55 = a2[33];
  if ((unint64_t)v54 >= v55)
  {
    unsigned int v57 = (char *)a2[31];
    uint64_t v58 = (v54 - v57) >> 2;
    if ((unint64_t)(v58 + 1) >> 62) {
      sub_566C();
    }
    unint64_t v59 = v55 - (void)v57;
    unint64_t v60 = (uint64_t)(v55 - (void)v57) >> 1;
    if (v60 <= v58 + 1) {
      unint64_t v60 = v58 + 1;
    }
    if (v59 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v61 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v61 = v60;
    }
    if (v61)
    {
      uint64_t v62 = (char *)sub_458C8((uint64_t)(a2 + 33), v61);
      unsigned int v57 = (char *)a2[31];
      v54 = (char *)a2[32];
    }
    else
    {
      uint64_t v62 = 0;
    }
    uint64_t v63 = &v62[4 * v58];
    uint64_t v64 = &v62[4 * v61];
    *(_DWORD *)uint64_t v63 = v66;
    uint64_t v56 = v63 + 4;
    while (v54 != v57)
    {
      int v65 = *((_DWORD *)v54 - 1);
      v54 -= 4;
      *((_DWORD *)v63 - 1) = v65;
      v63 -= 4;
    }
    a2[31] = v63;
    a2[32] = v56;
    a2[33] = v64;
    if (v57) {
      operator delete(v57);
    }
  }
  else
  {
    *(_DWORD *)v54 = v66;
    uint64_t v56 = v54 + 4;
  }
  a2[32] = v56;
  if (*(unsigned char *)(v3 + 32)) {
    *(unsigned char *)(v3 + 32) = 0;
  }
}

void sub_B998C(uint64_t a1, void *a2, unsigned int a3, char a4)
{
  if (a3 > 0x97) {
    return;
  }
  uint64_t v4 = a1 + 224 * a3;
  if (!*(unsigned char *)(v4 + 376)) {
    return;
  }
  uint64_t v7 = v4 + 160;
  unsigned int v8 = *(unsigned __int8 *)(v4 + 196);
  if (v8 >= 0x60)
  {
    if (v8 >= 0x68)
    {
      if (v8 < 0x98) {
        goto LABEL_13;
      }
    }
    else if (*(unsigned char *)(v7 + 215))
    {
      goto LABEL_13;
    }
  }
  uint64_t v9 = a1 + 41976;
  uint64_t v10 = (int64x2_t *)(a1 + 41976 + 48 * a3);
  if (v10[2].i64[1])
  {
    unint64_t v11 = *(void *)(v9 + 48 * a3 + 32);
    uint64_t v12 = *(void *)(*(void *)(v10->i64[1] + ((v11 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v11 & 0x1FF));
    if (*(unsigned char *)(v12 + 32))
    {
      sub_47E68(v10);
      if (*(unsigned char *)(v7 + 216))
      {
        *(void *)(v7 + 8) = (((a2[3259] - a2[3258]) << 29) - 0x100000000) | (((a2[3256] - a2[3255]) >> 3)
                                                                               - 1);
        *(unsigned char *)(v7 + 212) = a4;
      }
      sub_C2204(v12 + 40, v7);
      goto LABEL_14;
    }
  }
LABEL_13:
  *(void *)(v7 + 8) = (((a2[3259] - a2[3258]) << 29) - 0x100000000) | (((a2[3256] - a2[3255]) >> 3) - 1);
  *(unsigned char *)(v7 + 212) = a4;
  sub_46078(a2, v7);
LABEL_14:
  if (*(unsigned char *)(v7 + 216))
  {
    uint64_t v13 = *(void **)(v7 + 136);
    if (v13)
    {
      *(void *)(v7 + 144) = v13;
      operator delete(v13);
    }
    uint64_t v14 = *(void **)(v7 + 112);
    if (v14)
    {
      *(void *)(v7 + 120) = v14;
      operator delete(v14);
    }
    uint64_t v15 = *(void **)(v7 + 88);
    if (v15)
    {
      *(void *)(v7 + 96) = v15;
      operator delete(v15);
    }
    uint64_t v16 = *(void **)(v7 + 64);
    if (v16)
    {
      *(void *)(v7 + 72) = v16;
      operator delete(v16);
    }
    uint64_t v17 = *(void **)(v7 + 40);
    if (v17)
    {
      *(void *)(v7 + 48) = v17;
      operator delete(v17);
    }
    *(unsigned char *)(v7 + 216) = 0;
  }
}

const char *sub_B9B34(uint64_t a1, unsigned int a2)
{
  unsigned int v2 = a2 - 128;
  if (a2 < 0x80)
  {
    uint64_t v3 = &off_742720[a2];
    return *v3;
  }
  if (v2 < 0x40)
  {
    uint64_t v4 = off_742B20;
LABEL_9:
    uint64_t v3 = &v4[v2];
    return *v3;
  }
  unsigned int v2 = a2 - 192;
  if (a2 - 192 < 0x40)
  {
    uint64_t v4 = off_742D20;
    goto LABEL_9;
  }
  unsigned int v2 = a2 - 256;
  if (a2 - 256 < 0x2A)
  {
    uint64_t v4 = off_742F20;
    goto LABEL_9;
  }
  return "Invalid";
}

uint64_t sub_B9BA8(uint64_t result, uint64_t a2, uint64_t *a3, unsigned char *a4)
{
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *a4 = 1;
  uint64_t v4 = *a3;
  uint64_t v5 = *a3 & 7;
  unint64_t v6 = (unint64_t)*a3 >> 3;
  if (v5 == 7) {
    int v7 = *(unsigned __int16 *)(a2 + v6) >> 7;
  }
  else {
    int v7 = *(unsigned __int8 *)(a2 + v6) >> v5;
  }
  switch(v7 & 3)
  {
    case 1:
      uint64_t v12 = (v4 + 2) & 7;
      unint64_t v13 = (unint64_t)(v4 + 2) >> 3;
      if (v12 == 7) {
        int v14 = *(unsigned __int16 *)(a2 + v13) >> 7;
      }
      else {
        int v14 = *(unsigned __int8 *)(a2 + v13) >> v12;
      }
      switch(v14 & 3)
      {
        case 1:
          unint64_t v44 = v4 + 4;
          uint64_t v45 = (v4 + 4) & 7;
          unint64_t v46 = v44 >> 3;
          if (v45 == 7) {
            int v47 = *(unsigned __int16 *)(a2 + v46) >> 7;
          }
          else {
            int v47 = *(unsigned __int8 *)(a2 + v46) >> v45;
          }
          int v84 = v47 & 3;
          if (v84 != 2)
          {
            if (v84 == 1)
            {
              *(_WORD *)(result + 8) = 11;
              *(void *)result = 0x300000003;
              unint64_t v146 = *a3 + 26;
              unint64_t v147 = v146 & 7;
              unint64_t v148 = v146 >> 3;
              if (v147 > 2)
              {
                unint64_t v150 = ((unint64_t)*(unsigned __int8 *)(v148 + a2 + 7) << 56) | ((unint64_t)*(unsigned __int8 *)(v148 + a2 + 6) << 48);
                unint64_t v149 = (unint64_t)*(unsigned __int8 *)(v148 + a2 + 5) << 40;
              }
              else
              {
                unint64_t v149 = (unint64_t)*(unsigned __int8 *)(v148 + a2 + 6) << 48;
                unint64_t v150 = (unint64_t)*(unsigned __int8 *)(v148 + a2 + 5) << 40;
              }
              uint64_t v212 = (unsigned __int8 *)(a2 + v148);
              *(void *)(result + 24) |= ((v150 | v149 | ((unint64_t)v212[4] << 32) | ((unint64_t)v212[3] << 24) | ((unint64_t)v212[2] << 16) | ((unint64_t)v212[1] << 8) | *v212) >> v147) & 0x3FFFFFFFFFFFFFLL;
              unint64_t v213 = *a3 & 7;
              unint64_t v214 = (unint64_t)(*a3 + 80) >> 3;
              if (v213 > 5) {
                unsigned int v215 = *(unsigned __int16 *)(a2 + v214);
              }
              else {
                unsigned int v215 = *(unsigned __int8 *)(a2 + v214);
              }
              *(_DWORD *)(result + 32) |= (v215 >> v213) & 7;
              unint64_t v229 = *a3 + 6;
              unint64_t v230 = v229 & 7;
              unint64_t v231 = v229 >> 3;
              if (v230 > 4)
              {
                int v233 = (*(unsigned __int8 *)(v231 + a2 + 3) << 24) | (*(unsigned __int8 *)(v231 + a2 + 2) << 16);
                int v232 = *(unsigned __int8 *)(v231 + a2 + 1) << 8;
              }
              else
              {
                int v232 = *(unsigned __int8 *)(v231 + a2 + 2) << 16;
                int v233 = *(unsigned __int8 *)(v231 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 16) |= ((v233 | v232 | *(unsigned __int8 *)(a2 + v231)) >> v230) & 0xFFFFF;
              uint64_t v22 = 83;
              goto LABEL_1232;
            }
            if (v84) {
              goto LABEL_82;
            }
            *(_WORD *)(result + 8) = 4;
            *(void *)result = 0x200000002;
            unint64_t v85 = *a3 + 6;
            unint64_t v86 = v85 & 7;
            unint64_t v87 = v85 >> 3;
            if (v86 > 4)
            {
              int v89 = (*(unsigned __int8 *)(v87 + a2 + 3) << 24) | (*(unsigned __int8 *)(v87 + a2 + 2) << 16);
              int v88 = *(unsigned __int8 *)(v87 + a2 + 1) << 8;
            }
            else
            {
              int v88 = *(unsigned __int8 *)(v87 + a2 + 2) << 16;
              int v89 = *(unsigned __int8 *)(v87 + a2 + 1) << 8;
            }
            *(_DWORD *)(result + 16) |= ((v89 | v88 | *(unsigned __int8 *)(a2 + v87)) >> v86) & 0xFFFFF;
            goto LABEL_1231;
          }
          *(_WORD *)(result + 8) = 4;
          *(void *)result = 0x1100000011;
          unint64_t v143 = *a3 + 6;
          unint64_t v144 = v143 >> 3;
          unint64_t v145 = v143 & 7;
          if (v145) {
            LOWORD(v145) = (*(unsigned __int16 *)(a2 + v144) >> v145);
          }
          else {
            unint64_t v145 = *(unsigned __int8 *)(a2 + v144);
          }
          __int16 v251 = *(_WORD *)(result + 16) | v145;
          *(_WORD *)(result + 16) = v251;
          uint64_t v252 = *a3;
          if ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 14) >> 3)) >> ((*(unsigned char *)a3 + 14) & 7)))
          {
            unint64_t v253 = v252 + 15;
            unint64_t v254 = (v252 + 15) & 7;
            unint64_t v255 = v253 >> 3;
            if (v254 > 2) {
              unsigned __int16 v256 = *(_WORD *)(a2 + v255);
            }
            else {
              unsigned __int16 v256 = *(unsigned __int8 *)(a2 + v255);
            }
            __int16 v305 = (((v256 >> v254) & 0x3F) << 8) | v251;
            *(_WORD *)(result + 16) = v305;
            *(_WORD *)(result + 16) = v305 & 0xBFFF | (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 21) >> 3)) >> ((*(unsigned char *)a3 + 21) & 7)) & 1) << 14);
            unint64_t v306 = *a3 + 22;
            unint64_t v307 = v306 & 7;
            unint64_t v308 = v306 >> 3;
            if (v307 > 4) {
              unsigned __int16 v309 = *(_WORD *)(a2 + v308);
            }
            else {
              unsigned __int16 v309 = *(unsigned __int8 *)(a2 + v308);
            }
            switch((v309 >> v307) & 0xF)
            {
              case 0:
                *(_DWORD *)(result + 20) = 0;
                goto LABEL_1231;
              case 1:
                int v1540 = 1;
                break;
              case 2:
                int v1540 = 2;
                break;
              case 3:
                int v1540 = 3;
                break;
              case 4:
                int v1540 = 4;
                break;
              case 5:
                int v1540 = 5;
                break;
              case 6:
                int v1540 = 6;
                break;
              case 7:
                int v1540 = 7;
                break;
              case 8:
                int v1540 = 8;
                break;
              case 9:
                int v1540 = 9;
                break;
              default:
                goto LABEL_82;
            }
            *(_DWORD *)(result + 20) = v1540;
            goto LABEL_1231;
          }
          __int16 v275 = v251 & 0xBFFF;
          *(_WORD *)(result + 16) = v275;
          unint64_t v276 = *a3 + 15;
          unint64_t v277 = v276 & 7;
          unint64_t v278 = v276 >> 3;
          if (v277 > 4) {
            unsigned __int16 v279 = *(_WORD *)(a2 + v278);
          }
          else {
            unsigned __int16 v279 = *(unsigned __int8 *)(a2 + v278);
          }
          *(_WORD *)(result + 16) = (((v279 >> v277) & 0xF) << 8) | v275;
          unint64_t v425 = *a3 + 19;
          unint64_t v426 = v425 & 7;
          unint64_t v427 = v425 >> 3;
          if (v426 > 4) {
            unsigned __int16 v428 = *(_WORD *)(a2 + v427);
          }
          else {
            unsigned __int16 v428 = *(unsigned __int8 *)(a2 + v427);
          }
          switch((v428 >> v426) & 0xF)
          {
            case 0:
              *(_DWORD *)(result + 20) = 0;
              goto LABEL_1243;
            case 1:
              int v1541 = 1;
              goto LABEL_1242;
            case 2:
              int v1541 = 2;
              goto LABEL_1242;
            case 3:
              int v1541 = 3;
              goto LABEL_1242;
            case 4:
              int v1541 = 4;
              goto LABEL_1242;
            case 5:
              int v1541 = 5;
              goto LABEL_1242;
            case 6:
              int v1541 = 6;
              goto LABEL_1242;
            case 7:
              int v1541 = 7;
              goto LABEL_1242;
            case 8:
              int v1541 = 8;
              goto LABEL_1242;
            case 9:
              int v1541 = 9;
LABEL_1242:
              *(_DWORD *)(result + 20) = v1541;
LABEL_1243:
              uint64_t v22 = 23;
              break;
            default:
              goto LABEL_82;
          }
          break;
        case 2:
          *(_WORD *)(result + 8) = 2;
          *(void *)result = 0x500000005;
          if ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 4) >> 3)) >> ((*(unsigned char *)a3 + 4) & 7)))
          {
            *(_DWORD *)(result + 16) = 1;
            unint64_t v48 = *a3 + 5;
            unint64_t v49 = v48 & 7;
            unint64_t v50 = v48 >> 3;
            if (v49 > 4) {
              unsigned int v51 = *(unsigned __int16 *)(a2 + v50);
            }
            else {
              unsigned int v51 = *(unsigned __int8 *)(a2 + v50);
            }
            *(unsigned char *)(result + 20) |= (v51 >> v49) & 0xF;
            unint64_t v133 = *a3 + 9;
            unint64_t v134 = v133 & 7;
            unint64_t v135 = v133 >> 3;
            if (v134 > 1) {
              unsigned int v136 = *(unsigned __int16 *)(a2 + v135);
            }
            else {
              unsigned int v136 = *(unsigned __int8 *)(a2 + v135);
            }
            *(unsigned char *)(result + 21) |= (v136 >> v134) & 0x7F;
          }
          else
          {
            *(_DWORD *)(result + 16) = 0;
            unint64_t v104 = *a3 + 5;
            unint64_t v105 = v104 >> 3;
            unint64_t v106 = v104 & 7;
            if (v106) {
              int v107 = *(unsigned __int16 *)(a2 + v105) >> v106;
            }
            else {
              LOBYTE(v107) = *(unsigned char *)(a2 + v105);
            }
            *(unsigned char *)(result + 20) |= v107;
            unint64_t v197 = *a3 + 13;
            unint64_t v198 = v197 & 7;
            unint64_t v199 = v197 >> 3;
            if (v198 > 5) {
              unsigned __int16 v200 = *(_WORD *)(a2 + v199);
            }
            else {
              unsigned __int16 v200 = *(unsigned __int8 *)(a2 + v199);
            }
            switch((v200 >> v198) & 7)
            {
              case 1:
                int v416 = 1;
                goto LABEL_321;
              case 2:
                int v416 = 2;
                goto LABEL_321;
              case 3:
                int v416 = 3;
                goto LABEL_321;
              case 4:
                int v416 = 4;
                goto LABEL_321;
              case 5:
                int v416 = 5;
                goto LABEL_321;
              case 6:
                int v416 = 6;
                goto LABEL_321;
              case 7:
                int v416 = 7;
LABEL_321:
                *(_DWORD *)(result + 24) = v416;
                break;
              default:
                *(_DWORD *)(result + 24) = 0;
                break;
            }
          }
          uint64_t v22 = 16;
          goto LABEL_1232;
        case 3:
          *(_WORD *)(result + 8) = 2;
          *(void *)result = 0x600000006;
          unint64_t v52 = *a3 + 4;
          unint64_t v53 = v52 >> 3;
          unint64_t v54 = v52 & 7;
          if (v54) {
            int v55 = *(unsigned __int16 *)(a2 + v53) >> v54;
          }
          else {
            LOBYTE(v55) = *(unsigned char *)(a2 + v53);
          }
          *(unsigned char *)(result + 16) |= v55;
          uint64_t v22 = 12;
          goto LABEL_1232;
        default:
          *(_WORD *)(result + 8) = 1;
          *(void *)result = 0x100000001;
          uint64_t v22 = 4;
          goto LABEL_1232;
      }
      break;
    case 2:
      unint64_t v15 = v4 + 2;
      uint64_t v16 = (v4 + 2) & 7;
      unint64_t v17 = v15 >> 3;
      if (v16 == 7) {
        int v18 = *(unsigned __int16 *)(a2 + v17) >> 7;
      }
      else {
        int v18 = *(unsigned __int8 *)(a2 + v17) >> v16;
      }
      switch(v18 & 3)
      {
        case 1:
          *(_WORD *)(result + 8) = 17;
          *(void *)result = 0x800000008;
          unint64_t v56 = *a3 + 4;
          unint64_t v57 = v56 >> 3;
          unint64_t v58 = v56 & 7;
          if (v58) {
            int v59 = *(unsigned __int16 *)(a2 + v57) >> v58;
          }
          else {
            LOBYTE(v59) = *(unsigned char *)(a2 + v57);
          }
          *(unsigned char *)(result + 16) |= v59;
          unint64_t v108 = *a3 + 12;
          unint64_t v109 = v108 & 7;
          unint64_t v110 = v108 >> 3;
          if (v109 == 7) {
            int v111 = *(unsigned __int16 *)(a2 + v110) >> 7;
          }
          else {
            int v111 = *(unsigned __int8 *)(a2 + v110) >> v109;
          }
          switch(v111 & 3)
          {
            case 1:
              *(_DWORD *)(result + 20) = 0;
              unint64_t v151 = *a3 + 14;
              unint64_t v152 = v151 >> 3;
              unint64_t v153 = v151 & 7;
              if (v153)
              {
                uint64_t v154 = (unsigned __int8 *)(a2 + v152);
                uint64_t v155 = ((((unint64_t)v154[4] << 32) | ((unint64_t)v154[3] << 24) | ((unint64_t)v154[2] << 16) | ((unint64_t)v154[1] << 8) | *v154) >> v153);
              }
              else
              {
                uint64_t v155 = *(unsigned int *)(a2 + v152);
              }
              int v257 = *(_DWORD *)(result + 32);
              unint64_t v258 = *(void *)(result + 24) & 0xFFFFFFFF00000000 | v155 | *(void *)(result + 24);
              *(void *)(result + 24) = v258;
              unint64_t v259 = *a3 + 46;
              unint64_t v260 = v259 >> 3;
              unint64_t v261 = v259 & 7;
              if (v261)
              {
                unint64_t v262 = (unsigned __int8 *)(a2 + v260);
                uint64_t v263 = ((((unint64_t)v262[4] << 32) | ((unint64_t)v262[3] << 24) | ((unint64_t)v262[2] << 16) | ((unint64_t)v262[1] << 8) | *v262) >> v261);
              }
              else
              {
                uint64_t v263 = *(unsigned int *)(a2 + v260);
              }
              unint64_t v280 = v258 & 0xFFFFFFFF00000000 | (v263 << 32) | v258;
              *(_DWORD *)(result + 32) = v257;
              *(void *)(result + 24) = v280;
              unint64_t v281 = *a3 + 78;
              unint64_t v282 = v281 >> 3;
              unint64_t v283 = v281 & 7;
              if (v283)
              {
                v284 = (unsigned __int8 *)(a2 + v282);
                int v285 = (((unint64_t)v284[4] << 32) | ((unint64_t)v284[3] << 24) | ((unint64_t)v284[2] << 16) | ((unint64_t)v284[1] << 8) | *v284) >> v283;
              }
              else
              {
                int v285 = *(_DWORD *)(a2 + v282);
              }
              *(void *)(result + 24) = v280;
              *(_DWORD *)(result + 32) = v285 | v257;
              if ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 110) >> 3)) >> ((*(unsigned char *)a3 + 110) & 7)))
              {
                *(_DWORD *)(result + 36) = 1;
                unint64_t v286 = *a3 + 111;
                unint64_t v287 = v286 & 7;
                unint64_t v288 = v286 >> 3;
                if (v287 > 3) {
                  unsigned int v289 = *(unsigned __int16 *)(a2 + v288);
                }
                else {
                  unsigned int v289 = *(unsigned __int8 *)(a2 + v288);
                }
                *(unsigned char *)(result + 40) |= (v289 >> v287) & 0x1F;
                unint64_t v310 = *a3 + 116;
                unint64_t v311 = v310 & 7;
                unint64_t v312 = v310 >> 3;
                if (v311 > 4) {
                  unsigned int v313 = (*(unsigned __int8 *)(a2 + v312 + 2) << 16) | (*(unsigned __int8 *)(a2 + v312 + 1) << 8) | *(unsigned __int8 *)(a2 + v312);
                }
                else {
                  unsigned int v313 = *(unsigned __int16 *)(a2 + v312);
                }
                int v319 = *(_DWORD *)(result + 42) | (v313 >> v311) & 0xFFF;
                *(_DWORD *)(result + 42) = v319;
                unint64_t v320 = *a3 & 7;
                unint64_t v321 = (unint64_t)(*a3 + 128) >> 3;
                if (v320 > 4) {
                  unsigned int v322 = *(unsigned __int16 *)(a2 + v321);
                }
                else {
                  unsigned int v322 = *(unsigned __int8 *)(a2 + v321);
                }
                int v327 = v319 | (((v322 >> v320) & 0xF) << 12);
                *(_DWORD *)(result + 42) = v327;
                unint64_t v328 = (*(unsigned char *)a3 - 124) & 7;
                unint64_t v329 = (unint64_t)(*a3 + 132) >> 3;
                if (v328 > 4) {
                  unsigned int v330 = *(unsigned __int16 *)(a2 + v329);
                }
                else {
                  unsigned int v330 = *(unsigned __int8 *)(a2 + v329);
                }
                *(_DWORD *)(result + 42) = v327 | (((v330 >> v328) & 0xF) << 16);
                uint64_t v22 = 136;
              }
              else
              {
                *(_DWORD *)(result + 36) = 0;
                unint64_t v290 = *a3 + 111;
                unint64_t v291 = v290 & 7;
                unint64_t v292 = v290 >> 3;
                if (v291 > 3) {
                  unsigned int v293 = *(unsigned __int16 *)(a2 + v292);
                }
                else {
                  unsigned int v293 = *(unsigned __int8 *)(a2 + v292);
                }
                *(unsigned char *)(result + 40) |= (v293 >> v291) & 0x1F;
                uint64_t v22 = 116;
              }
              break;
            case 2:
              *(_DWORD *)(result + 20) = 3;
              unint64_t v156 = *a3 + 14;
              unsigned int v157 = *(unsigned __int8 *)(a2 + (v156 >> 3));
              char v158 = v156 & 7;
              char v159 = *(unsigned char *)(result + 24);
              if ((v157 >> v158))
              {
                *(unsigned char *)(result + 24) = v159 | 1;
                int v160 = (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 15) >> 3)) >> ((*(unsigned char *)a3 + 15) & 7)) & 1 | *(unsigned __int8 *)(result + 25);
                *(unsigned char *)(result + 25) |= (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 15) >> 3)) >> ((*(unsigned char *)a3 + 15) & 7)) & 1;
                unint64_t v161 = *a3 & 7;
                unint64_t v162 = (unint64_t)(*a3 + 16) >> 3;
                if (v161 > 4) {
                  unsigned int v163 = *(unsigned __int16 *)(a2 + v162);
                }
                else {
                  unsigned int v163 = *(unsigned __int8 *)(a2 + v162);
                }
                *(unsigned char *)(result + 25) = (2 * ((v163 >> v161) & 0xF)) | v160;
                unint64_t v294 = *a3 + 20;
                unint64_t v295 = v294 & 7;
                unint64_t v296 = v294 >> 3;
                if (v295 > 4) {
                  unsigned int v297 = *(unsigned __int16 *)(a2 + v296);
                }
                else {
                  unsigned int v297 = *(unsigned __int8 *)(a2 + v296);
                }
                *(unsigned char *)(result + 26) |= (v297 >> v295) & 0xF;
                uint64_t v22 = 24;
              }
              else
              {
                *(unsigned char *)(result + 24) = v159 & 0xFE;
                unint64_t v264 = *a3 + 15;
                unint64_t v265 = v264 & 7;
                unint64_t v266 = v264 >> 3;
                if (v265 > 4) {
                  unsigned int v267 = *(unsigned __int16 *)(a2 + v266);
                }
                else {
                  unsigned int v267 = *(unsigned __int8 *)(a2 + v266);
                }
                *(unsigned char *)(result + 25) |= (v267 >> v265) & 0xF;
                unint64_t v417 = *a3 + 19;
                unint64_t v418 = v417 & 7;
                unint64_t v419 = v417 >> 3;
                if (v418 > 4) {
                  unsigned int v420 = *(unsigned __int16 *)(a2 + v419);
                }
                else {
                  unsigned int v420 = *(unsigned __int8 *)(a2 + v419);
                }
                *(unsigned char *)(result + 33) |= (v420 >> v418) & 0xF;
                unint64_t v429 = *a3 + 23;
                unint64_t v430 = v429 & 7;
                unint64_t v431 = v429 >> 3;
                if (v430 > 4) {
                  unsigned int v432 = *(unsigned __int16 *)(a2 + v431);
                }
                else {
                  unsigned int v432 = *(unsigned __int8 *)(a2 + v431);
                }
                *(unsigned char *)(result + 26) |= (v432 >> v430) & 0xF;
                unint64_t v436 = *a3 + 27;
                unint64_t v437 = v436 & 7;
                unint64_t v438 = v436 >> 3;
                if (v437 > 4) {
                  unsigned int v439 = *(unsigned __int16 *)(a2 + v438);
                }
                else {
                  unsigned int v439 = *(unsigned __int8 *)(a2 + v438);
                }
                *(unsigned char *)(result + 34) |= (v439 >> v437) & 0xF;
                unint64_t v444 = *a3 + 31;
                unint64_t v445 = v444 & 7;
                unint64_t v446 = v444 >> 3;
                if (v445 > 4) {
                  unsigned int v447 = *(unsigned __int16 *)(a2 + v446);
                }
                else {
                  unsigned int v447 = *(unsigned __int8 *)(a2 + v446);
                }
                *(unsigned char *)(result + 27) |= (v447 >> v445) & 0xF;
                unint64_t v451 = *a3 + 35;
                unint64_t v452 = v451 & 7;
                unint64_t v453 = v451 >> 3;
                if (v452 > 4) {
                  unsigned int v454 = *(unsigned __int16 *)(a2 + v453);
                }
                else {
                  unsigned int v454 = *(unsigned __int8 *)(a2 + v453);
                }
                *(unsigned char *)(result + 35) |= (v454 >> v452) & 0xF;
                unint64_t v459 = *a3 + 39;
                unint64_t v460 = v459 & 7;
                unint64_t v461 = v459 >> 3;
                if (v460 > 4) {
                  unsigned int v462 = *(unsigned __int16 *)(a2 + v461);
                }
                else {
                  unsigned int v462 = *(unsigned __int8 *)(a2 + v461);
                }
                *(unsigned char *)(result + 28) |= (v462 >> v460) & 0xF;
                unint64_t v466 = *a3 + 43;
                unint64_t v467 = v466 & 7;
                unint64_t v468 = v466 >> 3;
                if (v467 > 4) {
                  unsigned int v469 = *(unsigned __int16 *)(a2 + v468);
                }
                else {
                  unsigned int v469 = *(unsigned __int8 *)(a2 + v468);
                }
                *(unsigned char *)(result + 36) |= (v469 >> v467) & 0xF;
                unint64_t v474 = *a3 + 47;
                unint64_t v475 = v474 & 7;
                unint64_t v476 = v474 >> 3;
                if (v475 > 4) {
                  unsigned int v477 = *(unsigned __int16 *)(a2 + v476);
                }
                else {
                  unsigned int v477 = *(unsigned __int8 *)(a2 + v476);
                }
                *(unsigned char *)(result + 29) |= (v477 >> v475) & 0xF;
                unint64_t v481 = *a3 + 51;
                unint64_t v482 = v481 & 7;
                unint64_t v483 = v481 >> 3;
                if (v482 > 4) {
                  unsigned int v484 = *(unsigned __int16 *)(a2 + v483);
                }
                else {
                  unsigned int v484 = *(unsigned __int8 *)(a2 + v483);
                }
                *(unsigned char *)(result + 37) |= (v484 >> v482) & 0xF;
                unint64_t v489 = *a3 + 55;
                unint64_t v490 = v489 & 7;
                unint64_t v491 = v489 >> 3;
                if (v490 > 4) {
                  unsigned int v492 = *(unsigned __int16 *)(a2 + v491);
                }
                else {
                  unsigned int v492 = *(unsigned __int8 *)(a2 + v491);
                }
                *(unsigned char *)(result + 30) |= (v492 >> v490) & 0xF;
                unint64_t v496 = *a3 + 59;
                unint64_t v497 = v496 & 7;
                unint64_t v498 = v496 >> 3;
                if (v497 > 4) {
                  unsigned int v499 = *(unsigned __int16 *)(a2 + v498);
                }
                else {
                  unsigned int v499 = *(unsigned __int8 *)(a2 + v498);
                }
                *(unsigned char *)(result + 38) |= (v499 >> v497) & 0xF;
                unint64_t v504 = *a3 + 63;
                unint64_t v505 = v504 & 7;
                unint64_t v506 = v504 >> 3;
                if (v505 > 4) {
                  unsigned int v507 = *(unsigned __int16 *)(a2 + v506);
                }
                else {
                  unsigned int v507 = *(unsigned __int8 *)(a2 + v506);
                }
                *(unsigned char *)(result + 31) |= (v507 >> v505) & 0xF;
                unint64_t v511 = *a3 + 67;
                unint64_t v512 = v511 & 7;
                unint64_t v513 = v511 >> 3;
                if (v512 > 4) {
                  unsigned int v514 = *(unsigned __int16 *)(a2 + v513);
                }
                else {
                  unsigned int v514 = *(unsigned __int8 *)(a2 + v513);
                }
                *(unsigned char *)(result + 39) |= (v514 >> v512) & 0xF;
                unint64_t v519 = *a3 + 71;
                unint64_t v520 = v519 & 7;
                unint64_t v521 = v519 >> 3;
                if (v520 > 4) {
                  unsigned int v522 = *(unsigned __int16 *)(a2 + v521);
                }
                else {
                  unsigned int v522 = *(unsigned __int8 *)(a2 + v521);
                }
                *(unsigned char *)(result + 32) |= (v522 >> v520) & 0xF;
                unint64_t v526 = *a3 + 75;
                unint64_t v527 = v526 & 7;
                unint64_t v528 = v526 >> 3;
                if (v527 > 4) {
                  unsigned int v529 = *(unsigned __int16 *)(a2 + v528);
                }
                else {
                  unsigned int v529 = *(unsigned __int8 *)(a2 + v528);
                }
                *(unsigned char *)(result + 40) |= (v529 >> v527) & 0xF;
                uint64_t v22 = 79;
              }
              break;
            case 3:
              *(_DWORD *)(result + 20) = 2;
              unint64_t v164 = *a3 + 14;
              unint64_t v165 = v164 & 7;
              unint64_t v166 = v164 >> 3;
              if (v165 > 5) {
                unsigned int v167 = (*(unsigned __int8 *)(a2 + v166 + 2) << 16) | (*(unsigned __int8 *)(a2 + v166 + 1) << 8) | *(unsigned __int8 *)(a2 + v166);
              }
              else {
                unsigned int v167 = *(unsigned __int16 *)(a2 + v166);
              }
              *(_WORD *)(result + 24) |= (v167 >> v165) & 0x7FF;
              unint64_t v216 = *a3 + 25;
              unint64_t v217 = v216 & 7;
              unint64_t v218 = v216 >> 3;
              if (v217 > 5) {
                unsigned int v219 = (*(unsigned __int8 *)(a2 + v218 + 2) << 16) | (*(unsigned __int8 *)(a2 + v218 + 1) << 8) | *(unsigned __int8 *)(a2 + v218);
              }
              else {
                unsigned int v219 = *(unsigned __int16 *)(a2 + v218);
              }
              *(_WORD *)(result + 26) |= (v219 >> v217) & 0x7FF;
              unint64_t v234 = *a3 + 36;
              unint64_t v235 = v234 & 7;
              unint64_t v236 = v234 >> 3;
              if (v235 > 5) {
                unsigned int v237 = (*(unsigned __int8 *)(a2 + v236 + 2) << 16) | (*(unsigned __int8 *)(a2 + v236 + 1) << 8) | *(unsigned __int8 *)(a2 + v236);
              }
              else {
                unsigned int v237 = *(unsigned __int16 *)(a2 + v236);
              }
              *(_WORD *)(result + 28) |= (v237 >> v235) & 0x7FF;
              unint64_t v242 = *a3 + 47;
              unsigned int v243 = *(unsigned __int8 *)(a2 + (v242 >> 3));
              char v244 = v242 & 7;
              char v245 = *(unsigned char *)(result + 30);
              if ((v243 >> v244))
              {
                *(unsigned char *)(result + 30) = v245 | 1;
                int v246 = (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 48) >> 3)) >> (*a3 & 7)) & 1 | *(unsigned __int8 *)(result + 31);
                *(unsigned char *)(result + 31) |= (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 48) >> 3)) >> (*a3 & 7)) & 1;
                unint64_t v247 = *a3 + 49;
                unint64_t v248 = v247 & 7;
                unint64_t v249 = v247 >> 3;
                if (v248 > 4) {
                  unsigned int v250 = *(unsigned __int16 *)(a2 + v249);
                }
                else {
                  unsigned int v250 = *(unsigned __int8 *)(a2 + v249);
                }
                *(unsigned char *)(result + 31) = (2 * ((v250 >> v248) & 0xF)) | v246;
                unint64_t v301 = *a3 + 53;
                unint64_t v302 = v301 & 7;
                unint64_t v303 = v301 >> 3;
                if (v302 > 4) {
                  unsigned int v304 = *(unsigned __int16 *)(a2 + v303);
                }
                else {
                  unsigned int v304 = *(unsigned __int8 *)(a2 + v303);
                }
                *(unsigned char *)(result + 32) |= (v304 >> v302) & 0xF;
                uint64_t v22 = 57;
              }
              else
              {
                *(unsigned char *)(result + 30) = v245 & 0xFE;
                unint64_t v272 = *a3 & 7;
                unint64_t v273 = (unint64_t)(*a3 + 48) >> 3;
                if (v272 > 4) {
                  unsigned int v274 = *(unsigned __int16 *)(a2 + v273);
                }
                else {
                  unsigned int v274 = *(unsigned __int8 *)(a2 + v273);
                }
                *(unsigned char *)(result + 31) |= (v274 >> v272) & 0xF;
                unint64_t v421 = *a3 + 52;
                unint64_t v422 = v421 & 7;
                unint64_t v423 = v421 >> 3;
                if (v422 > 4) {
                  unsigned int v424 = *(unsigned __int16 *)(a2 + v423);
                }
                else {
                  unsigned int v424 = *(unsigned __int8 *)(a2 + v423);
                }
                *(unsigned char *)(result + 39) |= (v424 >> v422) & 0xF;
                unint64_t v433 = *a3 & 7;
                unint64_t v434 = (unint64_t)(*a3 + 56) >> 3;
                if (v433 > 4) {
                  unsigned int v435 = *(unsigned __int16 *)(a2 + v434);
                }
                else {
                  unsigned int v435 = *(unsigned __int8 *)(a2 + v434);
                }
                *(unsigned char *)(result + 32) |= (v435 >> v433) & 0xF;
                unint64_t v440 = *a3 + 60;
                unint64_t v441 = v440 & 7;
                unint64_t v442 = v440 >> 3;
                if (v441 > 4) {
                  unsigned int v443 = *(unsigned __int16 *)(a2 + v442);
                }
                else {
                  unsigned int v443 = *(unsigned __int8 *)(a2 + v442);
                }
                *(unsigned char *)(result + 40) |= (v443 >> v441) & 0xF;
                unint64_t v448 = *a3 & 7;
                unint64_t v449 = (unint64_t)(*a3 + 64) >> 3;
                if (v448 > 4) {
                  unsigned int v450 = *(unsigned __int16 *)(a2 + v449);
                }
                else {
                  unsigned int v450 = *(unsigned __int8 *)(a2 + v449);
                }
                *(unsigned char *)(result + 33) |= (v450 >> v448) & 0xF;
                unint64_t v455 = *a3 + 68;
                unint64_t v456 = v455 & 7;
                unint64_t v457 = v455 >> 3;
                if (v456 > 4) {
                  unsigned int v458 = *(unsigned __int16 *)(a2 + v457);
                }
                else {
                  unsigned int v458 = *(unsigned __int8 *)(a2 + v457);
                }
                *(unsigned char *)(result + 41) |= (v458 >> v456) & 0xF;
                unint64_t v463 = *a3 & 7;
                unint64_t v464 = (unint64_t)(*a3 + 72) >> 3;
                if (v463 > 4) {
                  unsigned int v465 = *(unsigned __int16 *)(a2 + v464);
                }
                else {
                  unsigned int v465 = *(unsigned __int8 *)(a2 + v464);
                }
                *(unsigned char *)(result + 34) |= (v465 >> v463) & 0xF;
                unint64_t v470 = *a3 + 76;
                unint64_t v471 = v470 & 7;
                unint64_t v472 = v470 >> 3;
                if (v471 > 4) {
                  unsigned int v473 = *(unsigned __int16 *)(a2 + v472);
                }
                else {
                  unsigned int v473 = *(unsigned __int8 *)(a2 + v472);
                }
                *(unsigned char *)(result + 42) |= (v473 >> v471) & 0xF;
                unint64_t v478 = *a3 & 7;
                unint64_t v479 = (unint64_t)(*a3 + 80) >> 3;
                if (v478 > 4) {
                  unsigned int v480 = *(unsigned __int16 *)(a2 + v479);
                }
                else {
                  unsigned int v480 = *(unsigned __int8 *)(a2 + v479);
                }
                *(unsigned char *)(result + 35) |= (v480 >> v478) & 0xF;
                unint64_t v485 = *a3 + 84;
                unint64_t v486 = v485 & 7;
                unint64_t v487 = v485 >> 3;
                if (v486 > 4) {
                  unsigned int v488 = *(unsigned __int16 *)(a2 + v487);
                }
                else {
                  unsigned int v488 = *(unsigned __int8 *)(a2 + v487);
                }
                *(unsigned char *)(result + 43) |= (v488 >> v486) & 0xF;
                unint64_t v493 = *a3 & 7;
                unint64_t v494 = (unint64_t)(*a3 + 88) >> 3;
                if (v493 > 4) {
                  unsigned int v495 = *(unsigned __int16 *)(a2 + v494);
                }
                else {
                  unsigned int v495 = *(unsigned __int8 *)(a2 + v494);
                }
                *(unsigned char *)(result + 36) |= (v495 >> v493) & 0xF;
                unint64_t v500 = *a3 + 92;
                unint64_t v501 = v500 & 7;
                unint64_t v502 = v500 >> 3;
                if (v501 > 4) {
                  unsigned int v503 = *(unsigned __int16 *)(a2 + v502);
                }
                else {
                  unsigned int v503 = *(unsigned __int8 *)(a2 + v502);
                }
                *(unsigned char *)(result + 44) |= (v503 >> v501) & 0xF;
                unint64_t v508 = *a3 & 7;
                unint64_t v509 = (unint64_t)(*a3 + 96) >> 3;
                if (v508 > 4) {
                  unsigned int v510 = *(unsigned __int16 *)(a2 + v509);
                }
                else {
                  unsigned int v510 = *(unsigned __int8 *)(a2 + v509);
                }
                *(unsigned char *)(result + 37) |= (v510 >> v508) & 0xF;
                unint64_t v515 = *a3 + 100;
                unint64_t v516 = v515 & 7;
                unint64_t v517 = v515 >> 3;
                if (v516 > 4) {
                  unsigned int v518 = *(unsigned __int16 *)(a2 + v517);
                }
                else {
                  unsigned int v518 = *(unsigned __int8 *)(a2 + v517);
                }
                *(unsigned char *)(result + 45) |= (v518 >> v516) & 0xF;
                unint64_t v523 = *a3 & 7;
                unint64_t v524 = (unint64_t)(*a3 + 104) >> 3;
                if (v523 > 4) {
                  unsigned int v525 = *(unsigned __int16 *)(a2 + v524);
                }
                else {
                  unsigned int v525 = *(unsigned __int8 *)(a2 + v524);
                }
                *(unsigned char *)(result + 38) |= (v525 >> v523) & 0xF;
                unint64_t v530 = *a3 + 108;
                unint64_t v531 = v530 & 7;
                unint64_t v532 = v530 >> 3;
                if (v531 > 4) {
                  unsigned int v533 = *(unsigned __int16 *)(a2 + v532);
                }
                else {
                  unsigned int v533 = *(unsigned __int8 *)(a2 + v532);
                }
                *(unsigned char *)(result + 46) |= (v533 >> v531) & 0xF;
                uint64_t v22 = 112;
              }
              break;
            default:
              *(_DWORD *)(result + 20) = 1;
              unint64_t v112 = *a3 + 14;
              unint64_t v113 = v112 & 7;
              unint64_t v114 = v112 >> 3;
              if (v113 > 4) {
                unsigned __int16 v115 = *(_WORD *)(a2 + v114);
              }
              else {
                unsigned __int16 v115 = *(unsigned __int8 *)(a2 + v114);
              }
              int v207 = *(unsigned __int16 *)(result + 24) | (v115 >> v113) & 0xF;
              *(_WORD *)(result + 24) = v207;
              unint64_t v208 = *a3 + 18;
              unint64_t v209 = v208 & 7;
              unint64_t v210 = v208 >> 3;
              if (v209 > 4) {
                unsigned __int16 v211 = *(_WORD *)(a2 + v210);
              }
              else {
                unsigned __int16 v211 = *(unsigned __int8 *)(a2 + v210);
              }
              int v224 = (16 * ((v211 >> v209) & 0xF)) | v207;
              *(_WORD *)(result + 24) = v224;
              unint64_t v225 = *a3 + 22;
              unint64_t v226 = v225 & 7;
              unint64_t v227 = v225 >> 3;
              if (v226 > 4) {
                unsigned __int16 v228 = *(_WORD *)(a2 + v227);
              }
              else {
                unsigned __int16 v228 = *(unsigned __int8 *)(a2 + v227);
              }
              *(_WORD *)(result + 24) = (((v228 >> v226) & 0xF) << 8) | v224;
              if ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 26) >> 3)) >> ((*(unsigned char *)a3 + 26) & 7)))
              {
                *(_DWORD *)(result + 28) = 1;
                unint64_t v238 = *a3 + 27;
                unint64_t v239 = v238 & 7;
                unint64_t v240 = v238 >> 3;
                if (v239 > 3) {
                  unsigned int v241 = *(unsigned __int16 *)(a2 + v240);
                }
                else {
                  unsigned int v241 = *(unsigned __int8 *)(a2 + v240);
                }
                *(unsigned char *)(result + 32) |= (v241 >> v239) & 0x1F;
                unint64_t v298 = *a3 & 7;
                unint64_t v299 = (unint64_t)(*a3 + 32) >> 3;
                if (v298 > 4) {
                  unsigned int v300 = (*(unsigned __int8 *)(a2 + v299 + 2) << 16) | (*(unsigned __int8 *)(a2 + v299 + 1) << 8) | *(unsigned __int8 *)(a2 + v299);
                }
                else {
                  unsigned int v300 = *(unsigned __int16 *)(a2 + v299);
                }
                int v314 = *(_DWORD *)(result + 34) | (v300 >> v298) & 0xFFF;
                *(_DWORD *)(result + 34) = v314;
                unint64_t v315 = *a3 + 44;
                unint64_t v316 = v315 & 7;
                unint64_t v317 = v315 >> 3;
                if (v316 > 4) {
                  unsigned int v318 = *(unsigned __int16 *)(a2 + v317);
                }
                else {
                  unsigned int v318 = *(unsigned __int8 *)(a2 + v317);
                }
                int v323 = v314 | (((v318 >> v316) & 0xF) << 12);
                *(_DWORD *)(result + 34) = v323;
                unint64_t v324 = *a3 & 7;
                unint64_t v325 = (unint64_t)(*a3 + 48) >> 3;
                if (v324 > 4) {
                  unsigned int v326 = *(unsigned __int16 *)(a2 + v325);
                }
                else {
                  unsigned int v326 = *(unsigned __int8 *)(a2 + v325);
                }
                *(_DWORD *)(result + 34) = v323 | (((v326 >> v324) & 0xF) << 16);
                uint64_t v22 = 52;
              }
              else
              {
                *(_DWORD *)(result + 28) = 0;
                unint64_t v268 = *a3 + 27;
                unint64_t v269 = v268 & 7;
                unint64_t v270 = v268 >> 3;
                if (v269 > 3) {
                  unsigned int v271 = *(unsigned __int16 *)(a2 + v270);
                }
                else {
                  unsigned int v271 = *(unsigned __int8 *)(a2 + v270);
                }
                *(unsigned char *)(result + 32) |= (v271 >> v269) & 0x1F;
                uint64_t v22 = 32;
              }
              break;
          }
          break;
        case 2:
          *(_WORD *)(result + 8) = 6;
          *(void *)result = 0x900000009;
          unint64_t v60 = *a3 + 4;
          unint64_t v61 = v60 >> 3;
          unint64_t v62 = v60 & 7;
          if (v62) {
            int v63 = *(unsigned __int16 *)(a2 + v61) >> v62;
          }
          else {
            LOBYTE(v63) = *(unsigned char *)(a2 + v61);
          }
          *(unsigned char *)(result + 16) |= v63;
          if ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 12) >> 3)) >> ((*(unsigned char *)a3 + 12) & 7)))
          {
            if (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 13) >> 3)) >> ((*(unsigned char *)a3 + 13) & 7)) & 1) == 0)
            {
              *(_DWORD *)(result + 20) = 1;
              unint64_t v168 = *a3 + 14;
              unint64_t v169 = v168 & 7;
              unint64_t v170 = v168 >> 3;
              if (v169 > 3) {
                unsigned int v171 = *(unsigned __int16 *)(a2 + v170);
              }
              else {
                unsigned int v171 = *(unsigned __int8 *)(a2 + v170);
              }
              *(unsigned char *)(result + 24) |= (v171 >> v169) & 0x1F;
              goto LABEL_313;
            }
            *(_DWORD *)(result + 20) = 2;
            unint64_t v116 = *a3 + 14;
            unint64_t v117 = v116 >> 3;
            unint64_t v118 = v116 & 7;
            if (v118)
            {
              uint64_t v119 = (unsigned __int8 *)(a2 + v117);
              unint64_t v120 = (((unint64_t)v119[4] << 32) | ((unint64_t)v119[3] << 24) | ((unint64_t)v119[2] << 16) | ((unint64_t)v119[1] << 8) | *v119) >> v118;
            }
            else
            {
              LODWORD(v120) = *(_DWORD *)(a2 + v117);
            }
            *(_DWORD *)(result + 24) |= v120;
            uint64_t v22 = 46;
          }
          else
          {
            *(_DWORD *)(result + 20) = 0;
            *(unsigned char *)(result + 24) = ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 13) >> 3)) >> ((*(unsigned char *)a3 + 13) & 7)) & 1) != 0;
            uint64_t v22 = 14;
          }
          break;
        case 3:
          *(_WORD *)(result + 8) = 62;
          *(void *)result = 0xA0000000ALL;
          unint64_t v64 = *a3 + 4;
          unint64_t v65 = v64 & 7;
          unint64_t v66 = v64 >> 3;
          if (v65 > 3) {
            unsigned __int16 v67 = *(_WORD *)(a2 + v66);
          }
          else {
            unsigned __int16 v67 = *(unsigned __int8 *)(a2 + v66);
          }
          switch((v67 >> v65) & 0x1F)
          {
            case 0:
              *(_DWORD *)(result + 16) = 0;
              unint64_t v90 = *a3 + 9;
              unint64_t v91 = v90 & 7;
              unint64_t v92 = v90 >> 3;
              if (v91 == 7) {
                int v93 = *(unsigned __int16 *)(a2 + v92) >> 7;
              }
              else {
                int v93 = *(unsigned __int8 *)(a2 + v92) >> v91;
              }
              int v535 = *(_DWORD *)(result + 20) | v93 & 3;
              *(_DWORD *)(result + 20) = v535;
              unint64_t v536 = *a3 + 11;
              unint64_t v537 = v536 & 7;
              unint64_t v538 = v536 >> 3;
              if (v537 > 4)
              {
                int v540 = (*(unsigned __int8 *)(v538 + a2 + 3) << 24) | (*(unsigned __int8 *)(v538 + a2 + 2) << 16);
                int v539 = *(unsigned __int8 *)(v538 + a2 + 1) << 8;
              }
              else
              {
                int v539 = *(unsigned __int8 *)(v538 + a2 + 2) << 16;
                int v540 = *(unsigned __int8 *)(v538 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 20) = (4
                                        * (((v540 | v539 | *(unsigned __int8 *)(a2 + v538)) >> v537) & 0xFFFFF)) | v535;
              unint64_t v597 = *a3 + 31;
              unint64_t v598 = v597 & 7;
              unint64_t v599 = v597 >> 3;
              if (v598 == 7) {
                int v600 = *(_DWORD *)(a2 + v599) >> 7;
              }
              else {
                int v600 = ((*(unsigned __int8 *)(a2 + v599 + 2) << 16) | (*(unsigned __int8 *)(a2 + v599 + 1) << 8) | *(unsigned __int8 *)(a2 + v599)) >> v598;
              }
              *(_DWORD *)(result + 24) |= v600 & 0x3FFFF;
              unint64_t v661 = *a3 + 49;
              unint64_t v662 = v661 & 7;
              unint64_t v663 = v661 >> 3;
              if (v662 > 5)
              {
                int v665 = (*(unsigned __int8 *)(v663 + a2 + 3) << 24) | (*(unsigned __int8 *)(v663 + a2 + 2) << 16);
                int v664 = *(unsigned __int8 *)(v663 + a2 + 1) << 8;
              }
              else
              {
                int v664 = *(unsigned __int8 *)(v663 + a2 + 2) << 16;
                int v665 = *(unsigned __int8 *)(v663 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 28) |= ((v665 | v664 | *(unsigned __int8 *)(a2 + v663)) >> v662) & 0x7FFFF;
              unint64_t v720 = *a3 + 68;
              unint64_t v721 = v720 & 7;
              unint64_t v722 = v720 >> 3;
              if (v721 > 1) {
                unsigned int v723 = (*(unsigned __int8 *)(a2 + v722 + 2) << 16) | (*(unsigned __int8 *)(a2 + v722 + 1) << 8) | *(unsigned __int8 *)(a2 + v722);
              }
              else {
                unsigned int v723 = *(unsigned __int16 *)(a2 + v722);
              }
              *(_WORD *)(result + 32) |= (v723 >> v721) & 0x7FFF;
              unint64_t v783 = *a3 + 83;
              unint64_t v784 = v783 & 7;
              unint64_t v785 = v783 >> 3;
              if (v784 > 2) {
                unsigned int v786 = (*(unsigned __int8 *)(a2 + v785 + 2) << 16) | (*(unsigned __int8 *)(a2 + v785 + 1) << 8) | *(unsigned __int8 *)(a2 + v785);
              }
              else {
                unsigned int v786 = *(unsigned __int16 *)(a2 + v785);
              }
              *(_WORD *)(result + 34) |= (v786 >> v784) & 0x3FFF;
              unint64_t v841 = *a3 + 97;
              unint64_t v842 = v841 & 7;
              unint64_t v843 = v841 >> 3;
              if (v842 > 2) {
                unsigned int v844 = (*(unsigned __int8 *)(a2 + v843 + 2) << 16) | (*(unsigned __int8 *)(a2 + v843 + 1) << 8) | *(unsigned __int8 *)(a2 + v843);
              }
              else {
                unsigned int v844 = *(unsigned __int16 *)(a2 + v843);
              }
              *(_WORD *)(result + 36) |= (v844 >> v842) & 0x3FFF;
              unint64_t v895 = *a3 + 111;
              unint64_t v896 = v895 & 7;
              unint64_t v897 = v895 >> 3;
              if (v896 > 2) {
                unsigned int v898 = (*(unsigned __int8 *)(a2 + v897 + 2) << 16) | (*(unsigned __int8 *)(a2 + v897 + 1) << 8) | *(unsigned __int8 *)(a2 + v897);
              }
              else {
                unsigned int v898 = *(unsigned __int16 *)(a2 + v897);
              }
              *(_WORD *)(result + 38) |= (v898 >> v896) & 0x3FFF;
              unint64_t v946 = *a3 + 125;
              unint64_t v947 = v946 & 7;
              unint64_t v948 = v946 >> 3;
              if (v947 > 1) {
                unsigned int v949 = (*(unsigned __int8 *)(a2 + v948 + 2) << 16) | (*(unsigned __int8 *)(a2 + v948 + 1) << 8) | *(unsigned __int8 *)(a2 + v948);
              }
              else {
                unsigned int v949 = *(unsigned __int16 *)(a2 + v948);
              }
              *(_WORD *)(result + 40) |= (v949 >> v947) & 0x7FFF;
              unint64_t v990 = (*(unsigned char *)a3 - 116) & 7;
              unint64_t v991 = (unint64_t)(*a3 + 140) >> 3;
              if (v990 > 1) {
                unsigned int v992 = (*(unsigned __int8 *)(a2 + v991 + 2) << 16) | (*(unsigned __int8 *)(a2 + v991 + 1) << 8) | *(unsigned __int8 *)(a2 + v991);
              }
              else {
                unsigned int v992 = *(unsigned __int16 *)(a2 + v991);
              }
              *(_WORD *)(result + 42) |= (v992 >> v990) & 0x7FFF;
              unint64_t v1024 = (*(unsigned char *)a3 - 101) & 7;
              unint64_t v1025 = (unint64_t)(*a3 + 155) >> 3;
              if (v1024 > 1) {
                unsigned int v1026 = (*(unsigned __int8 *)(a2 + v1025 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1025 + 1) << 8) | *(unsigned __int8 *)(a2 + v1025);
              }
              else {
                unsigned int v1026 = *(unsigned __int16 *)(a2 + v1025);
              }
              *(_WORD *)(result + 44) |= (v1026 >> v1024) & 0x7FFF;
              uint64_t v1048 = (*(unsigned char *)a3 - 86) & 7;
              unint64_t v1049 = (unint64_t)(*a3 + 170) >> 3;
              if (v1048 == 7) {
                unsigned int v1050 = ((*(unsigned __int8 *)(a2 + v1049 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1049 + 1) << 8) | *(unsigned __int8 *)(a2 + v1049)) >> 7;
              }
              else {
                unsigned int v1050 = *(unsigned __int16 *)(a2 + v1049) >> v1048;
              }
              *(_WORD *)(result + 46) |= v1050 & 0x3FF;
              uint64_t v1072 = (*(unsigned char *)a3 - 76) & 7;
              unint64_t v1073 = (unint64_t)(*a3 + 180) >> 3;
              if (v1072 == 7) {
                unsigned int v1074 = ((*(unsigned __int8 *)(a2 + v1073 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1073 + 1) << 8) | *(unsigned __int8 *)(a2 + v1073)) >> 7;
              }
              else {
                unsigned int v1074 = *(unsigned __int16 *)(a2 + v1073) >> v1072;
              }
              *(_WORD *)(result + 48) |= v1074 & 0x3FF;
              unint64_t v1096 = (*(unsigned char *)a3 - 66) & 7;
              unint64_t v1097 = (unint64_t)(*a3 + 190) >> 3;
              if (v1096 > 4) {
                unsigned int v1098 = (*(unsigned __int8 *)(a2 + v1097 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1097 + 1) << 8) | *(unsigned __int8 *)(a2 + v1097);
              }
              else {
                unsigned int v1098 = *(unsigned __int16 *)(a2 + v1097);
              }
              *(_WORD *)(result + 50) |= (v1098 >> v1096) & 0xFFF;
              unint64_t v1120 = (*(unsigned char *)a3 - 54) & 7;
              unint64_t v1121 = (unint64_t)(*a3 + 202) >> 3;
              if (v1120 > 1) {
                unsigned int v1122 = (*(unsigned __int8 *)(a2 + v1121 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1121 + 1) << 8) | *(unsigned __int8 *)(a2 + v1121);
              }
              else {
                unsigned int v1122 = *(unsigned __int16 *)(a2 + v1121);
              }
              *(_WORD *)(result + 52) |= (v1122 >> v1120) & 0x7FFF;
              unint64_t v1139 = (*(unsigned char *)a3 - 39) & 7;
              unint64_t v1140 = (unint64_t)(*a3 + 217) >> 3;
              if (v1139 > 1) {
                unsigned int v1141 = (*(unsigned __int8 *)(a2 + v1140 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1140 + 1) << 8) | *(unsigned __int8 *)(a2 + v1140);
              }
              else {
                unsigned int v1141 = *(unsigned __int16 *)(a2 + v1140);
              }
              *(_WORD *)(result + 54) |= (v1141 >> v1139) & 0x7FFF;
              unint64_t v1152 = *a3 & 7;
              unint64_t v1153 = (unint64_t)(*a3 + 232) >> 3;
              if (v1152 > 1) {
                unsigned int v1154 = (*(unsigned __int8 *)(a2 + v1153 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1153 + 1) << 8) | *(unsigned __int8 *)(a2 + v1153);
              }
              else {
                unsigned int v1154 = *(unsigned __int16 *)(a2 + v1153);
              }
              *(_WORD *)(result + 56) |= (v1154 >> v1152) & 0x7FFF;
              unint64_t v1161 = (*(unsigned char *)a3 - 9) & 7;
              unint64_t v1162 = (unint64_t)(*a3 + 247) >> 3;
              if (v1161 > 2) {
                unsigned int v1163 = (*(unsigned __int8 *)(a2 + v1162 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1162 + 1) << 8) | *(unsigned __int8 *)(a2 + v1162);
              }
              else {
                unsigned int v1163 = *(unsigned __int16 *)(a2 + v1162);
              }
              *(_WORD *)(result + 58) |= (v1163 >> v1161) & 0x3FFF;
              unint64_t v1170 = *a3 + 261;
              unint64_t v1171 = v1170 & 7;
              unint64_t v1172 = v1170 >> 3;
              if (v1171 > 2) {
                unsigned int v1173 = (*(unsigned __int8 *)(a2 + v1172 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1172 + 1) << 8) | *(unsigned __int8 *)(a2 + v1172);
              }
              else {
                unsigned int v1173 = *(unsigned __int16 *)(a2 + v1172);
              }
              *(_WORD *)(result + 60) |= (v1173 >> v1171) & 0x3FFF;
              unint64_t v1182 = *a3 + 275;
              unint64_t v1183 = v1182 & 7;
              unint64_t v1184 = v1182 >> 3;
              if (v1183 > 2) {
                unsigned int v1185 = (*(unsigned __int8 *)(a2 + v1184 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1184 + 1) << 8) | *(unsigned __int8 *)(a2 + v1184);
              }
              else {
                unsigned int v1185 = *(unsigned __int16 *)(a2 + v1184);
              }
              *(_WORD *)(result + 62) |= (v1185 >> v1183) & 0x3FFF;
              unint64_t v1194 = *a3 + 289;
              unint64_t v1195 = v1194 & 7;
              unint64_t v1196 = v1194 >> 3;
              if (v1195 == 7) {
                unsigned int v1197 = ((*(unsigned __int8 *)(a2 + v1196 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1196 + 1) << 8) | *(unsigned __int8 *)(a2 + v1196)) >> 7;
              }
              else {
                unsigned int v1197 = *(unsigned __int16 *)(a2 + v1196) >> v1195;
              }
              *(_WORD *)(result + 64) |= v1197 & 0x3FF;
              unint64_t v1201 = *a3 + 299;
              unint64_t v1202 = v1201 & 7;
              unint64_t v1203 = v1201 >> 3;
              if (v1202 == 7) {
                unsigned int v1204 = ((*(unsigned __int8 *)(a2 + v1203 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1203 + 1) << 8) | *(unsigned __int8 *)(a2 + v1203)) >> 7;
              }
              else {
                unsigned int v1204 = *(unsigned __int16 *)(a2 + v1203) >> v1202;
              }
              *(_WORD *)(result + 66) |= v1204 & 0x3FF;
              unint64_t v1209 = *a3 + 309;
              unint64_t v1210 = v1209 & 7;
              unint64_t v1211 = v1209 >> 3;
              if (v1210 > 5) {
                unsigned int v1212 = (*(unsigned __int8 *)(a2 + v1211 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1211 + 1) << 8) | *(unsigned __int8 *)(a2 + v1211);
              }
              else {
                unsigned int v1212 = *(unsigned __int16 *)(a2 + v1211);
              }
              *(_WORD *)(result + 68) |= (v1212 >> v1210) & 0x7FF;
              uint64_t v22 = 320;
              goto LABEL_1232;
            case 1:
              *(_DWORD *)(result + 16) = 1;
              unint64_t v331 = *a3 + 9;
              unint64_t v332 = v331 & 7;
              unint64_t v333 = v331 >> 3;
              if (v332 > 4)
              {
                int v335 = (*(unsigned __int8 *)(v333 + a2 + 3) << 24) | (*(unsigned __int8 *)(v333 + a2 + 2) << 16);
                int v334 = *(unsigned __int8 *)(v333 + a2 + 1) << 8;
              }
              else
              {
                int v334 = *(unsigned __int8 *)(v333 + a2 + 2) << 16;
                int v335 = *(unsigned __int8 *)(v333 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 20) |= ((v335 | v334 | *(unsigned __int8 *)(a2 + v333)) >> v332) & 0xFFFFF;
              unint64_t v541 = *a3 + 29;
              unint64_t v542 = v541 & 7;
              unint64_t v543 = v541 >> 3;
              if (v542 > 4)
              {
                int v545 = (*(unsigned __int8 *)(v543 + a2 + 3) << 24) | (*(unsigned __int8 *)(v543 + a2 + 2) << 16);
                int v544 = *(unsigned __int8 *)(v543 + a2 + 1) << 8;
              }
              else
              {
                int v544 = *(unsigned __int8 *)(v543 + a2 + 2) << 16;
                int v545 = *(unsigned __int8 *)(v543 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 24) |= ((v545 | v544 | *(unsigned __int8 *)(a2 + v543)) >> v542) & 0xFFFFF;
              unint64_t v601 = *a3 + 49;
              unint64_t v602 = v601 & 7;
              unint64_t v603 = v601 >> 3;
              if (v602 > 4)
              {
                int v605 = (*(unsigned __int8 *)(v603 + a2 + 3) << 24) | (*(unsigned __int8 *)(v603 + a2 + 2) << 16);
                int v604 = *(unsigned __int8 *)(v603 + a2 + 1) << 8;
              }
              else
              {
                int v604 = *(unsigned __int8 *)(v603 + a2 + 2) << 16;
                int v605 = *(unsigned __int8 *)(v603 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 28) |= ((v605 | v604 | *(unsigned __int8 *)(a2 + v603)) >> v602) & 0xFFFFF;
              unint64_t v666 = *a3 + 69;
              unint64_t v667 = v666 & 7;
              unint64_t v668 = v666 >> 3;
              if (v667 > 4)
              {
                int v670 = (*(unsigned __int8 *)(v668 + a2 + 3) << 24) | (*(unsigned __int8 *)(v668 + a2 + 2) << 16);
                int v669 = *(unsigned __int8 *)(v668 + a2 + 1) << 8;
              }
              else
              {
                int v669 = *(unsigned __int8 *)(v668 + a2 + 2) << 16;
                int v670 = *(unsigned __int8 *)(v668 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 32) |= ((v670 | v669 | *(unsigned __int8 *)(a2 + v668)) >> v667) & 0xFFFFF;
              unint64_t v724 = *a3 + 89;
              unint64_t v725 = v724 & 7;
              unint64_t v726 = v724 >> 3;
              if (v725 > 4)
              {
                int v728 = (*(unsigned __int8 *)(v726 + a2 + 3) << 24) | (*(unsigned __int8 *)(v726 + a2 + 2) << 16);
                int v727 = *(unsigned __int8 *)(v726 + a2 + 1) << 8;
              }
              else
              {
                int v727 = *(unsigned __int8 *)(v726 + a2 + 2) << 16;
                int v728 = *(unsigned __int8 *)(v726 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 36) |= ((v728 | v727 | *(unsigned __int8 *)(a2 + v726)) >> v725) & 0xFFFFF;
              unint64_t v787 = *a3 + 109;
              unint64_t v788 = v787 & 7;
              unint64_t v789 = v787 >> 3;
              if (v788 > 4)
              {
                int v791 = (*(unsigned __int8 *)(v789 + a2 + 3) << 24) | (*(unsigned __int8 *)(v789 + a2 + 2) << 16);
                int v790 = *(unsigned __int8 *)(v789 + a2 + 1) << 8;
              }
              else
              {
                int v790 = *(unsigned __int8 *)(v789 + a2 + 2) << 16;
                int v791 = *(unsigned __int8 *)(v789 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 40) |= ((v791 | v790 | *(unsigned __int8 *)(a2 + v789)) >> v788) & 0xFFFFF;
              unint64_t v845 = (*(unsigned char *)a3 - 127) & 7;
              unint64_t v846 = (unint64_t)(*a3 + 129) >> 3;
              if (v845 > 4)
              {
                int v848 = (*(unsigned __int8 *)(v846 + a2 + 3) << 24) | (*(unsigned __int8 *)(v846 + a2 + 2) << 16);
                int v847 = *(unsigned __int8 *)(v846 + a2 + 1) << 8;
              }
              else
              {
                int v847 = *(unsigned __int8 *)(v846 + a2 + 2) << 16;
                int v848 = *(unsigned __int8 *)(v846 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 44) |= ((v848 | v847 | *(unsigned __int8 *)(a2 + v846)) >> v845) & 0xFFFFF;
              unint64_t v899 = (*(unsigned char *)a3 - 107) & 7;
              unint64_t v900 = (unint64_t)(*a3 + 149) >> 3;
              if (v899 > 4)
              {
                int v902 = (*(unsigned __int8 *)(v900 + a2 + 3) << 24) | (*(unsigned __int8 *)(v900 + a2 + 2) << 16);
                int v901 = *(unsigned __int8 *)(v900 + a2 + 1) << 8;
              }
              else
              {
                int v901 = *(unsigned __int8 *)(v900 + a2 + 2) << 16;
                int v902 = *(unsigned __int8 *)(v900 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 48) |= ((v902 | v901 | *(unsigned __int8 *)(a2 + v900)) >> v899) & 0xFFFFF;
              unint64_t v950 = (unint64_t)(*a3 + 169) >> 3;
              if (((*(unsigned char *)a3 - 87) & 7) != 0) {
                unsigned int v951 = ((*(unsigned __int8 *)(a2 + v950 + 2) << 16) | (*(unsigned __int8 *)(a2 + v950 + 1) << 8) | *(unsigned __int8 *)(a2 + v950)) >> ((*(unsigned char *)a3 - 87) & 7);
              }
              else {
                LOWORD(v951) = *(_WORD *)(a2 + v950);
              }
              int v1297 = *(_DWORD *)(result + 52) | (unsigned __int16)v951;
              *(_DWORD *)(result + 52) = v1297;
              unint64_t v1298 = (*(unsigned char *)a3 - 71) & 7;
              unint64_t v1299 = (unint64_t)(*a3 + 185) >> 3;
              if (v1298 > 1) {
                unsigned int v1300 = (*(unsigned __int8 *)(a2 + v1299 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1299 + 1) << 8) | *(unsigned __int8 *)(a2 + v1299);
              }
              else {
                unsigned int v1300 = *(unsigned __int16 *)(a2 + v1299);
              }
              *(_DWORD *)(result + 52) = (((v1300 >> v1298) & 0x7FFF) << 16) | v1297;
              unint64_t v1301 = (unint64_t)(*a3 + 200) >> 3;
              uint64_t v1302 = *a3 & 7;
              if (v1302) {
                unsigned int v1303 = ((*(unsigned __int8 *)(a2 + v1301 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1301 + 1) << 8) | *(unsigned __int8 *)(a2 + v1301)) >> v1302;
              }
              else {
                LOWORD(v1303) = *(_WORD *)(a2 + v1301);
              }
              int v1367 = *(_DWORD *)(result + 56) | (unsigned __int16)v1303;
              *(_DWORD *)(result + 56) = v1367;
              unint64_t v1368 = *a3 & 7;
              unint64_t v1369 = (unint64_t)(*a3 + 216) >> 3;
              if (v1368 > 1) {
                unsigned int v1370 = (*(unsigned __int8 *)(a2 + v1369 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1369 + 1) << 8) | *(unsigned __int8 *)(a2 + v1369);
              }
              else {
                unsigned int v1370 = *(unsigned __int16 *)(a2 + v1369);
              }
              *(_DWORD *)(result + 56) = (((v1370 >> v1368) & 0x7FFF) << 16) | v1367;
              unint64_t v1371 = (*(unsigned char *)a3 - 25) & 7;
              unint64_t v1372 = (unint64_t)(*a3 + 231) >> 3;
              if (v1371 > 1) {
                unsigned int v1373 = (*(unsigned __int8 *)(a2 + v1372 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1372 + 1) << 8) | *(unsigned __int8 *)(a2 + v1372);
              }
              else {
                unsigned int v1373 = *(unsigned __int16 *)(a2 + v1372);
              }
              *(_WORD *)(result + 60) |= (v1373 >> v1371) & 0x7FFF;
              unint64_t v1374 = (*(unsigned char *)a3 - 10) & 7;
              unint64_t v1375 = (unint64_t)(*a3 + 246) >> 3;
              if (v1374 > 1) {
                unsigned int v1376 = (*(unsigned __int8 *)(a2 + v1375 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1375 + 1) << 8) | *(unsigned __int8 *)(a2 + v1375);
              }
              else {
                unsigned int v1376 = *(unsigned __int16 *)(a2 + v1375);
              }
              *(_WORD *)(result + 62) |= (v1376 >> v1374) & 0x7FFF;
              uint64_t v22 = 261;
              goto LABEL_1232;
            case 2:
              *(_DWORD *)(result + 16) = 2;
              unint64_t v336 = *a3 + 9;
              unint64_t v337 = v336 & 7;
              unint64_t v338 = v336 >> 3;
              if (v337 > 1) {
                unsigned int v339 = (*(unsigned __int8 *)(a2 + v338 + 2) << 16) | (*(unsigned __int8 *)(a2 + v338 + 1) << 8) | *(unsigned __int8 *)(a2 + v338);
              }
              else {
                unsigned int v339 = *(unsigned __int16 *)(a2 + v338);
              }
              *(_WORD *)(result + 20) |= (v339 >> v337) & 0x7FFF;
              unint64_t v546 = *a3 & 7;
              unint64_t v547 = (unint64_t)(*a3 + 24) >> 3;
              if (v546 > 1) {
                unsigned int v548 = (*(unsigned __int8 *)(a2 + v547 + 2) << 16) | (*(unsigned __int8 *)(a2 + v547 + 1) << 8) | *(unsigned __int8 *)(a2 + v547);
              }
              else {
                unsigned int v548 = *(unsigned __int16 *)(a2 + v547);
              }
              *(_WORD *)(result + 22) |= (v548 >> v546) & 0x7FFF;
              unint64_t v606 = *a3 + 39;
              unint64_t v607 = v606 & 7;
              unint64_t v608 = v606 >> 3;
              if (v607 > 1) {
                unsigned int v609 = (*(unsigned __int8 *)(a2 + v608 + 2) << 16) | (*(unsigned __int8 *)(a2 + v608 + 1) << 8) | *(unsigned __int8 *)(a2 + v608);
              }
              else {
                unsigned int v609 = *(unsigned __int16 *)(a2 + v608);
              }
              *(_WORD *)(result + 24) |= (v609 >> v607) & 0x7FFF;
              unint64_t v671 = *a3 + 54;
              unint64_t v672 = v671 & 7;
              unint64_t v673 = v671 >> 3;
              if (v672 > 1) {
                unsigned int v674 = (*(unsigned __int8 *)(a2 + v673 + 2) << 16) | (*(unsigned __int8 *)(a2 + v673 + 1) << 8) | *(unsigned __int8 *)(a2 + v673);
              }
              else {
                unsigned int v674 = *(unsigned __int16 *)(a2 + v673);
              }
              *(_WORD *)(result + 26) |= (v674 >> v672) & 0x7FFF;
              unint64_t v729 = *a3 + 69;
              unint64_t v730 = v729 & 7;
              unint64_t v731 = v729 >> 3;
              if (v730 > 1) {
                unsigned int v732 = (*(unsigned __int8 *)(a2 + v731 + 2) << 16) | (*(unsigned __int8 *)(a2 + v731 + 1) << 8) | *(unsigned __int8 *)(a2 + v731);
              }
              else {
                unsigned int v732 = *(unsigned __int16 *)(a2 + v731);
              }
              *(_WORD *)(result + 28) |= (v732 >> v730) & 0x7FFF;
              unint64_t v792 = *a3 + 84;
              unint64_t v793 = v792 & 7;
              unint64_t v794 = v792 >> 3;
              if (v793 > 1) {
                unsigned int v795 = (*(unsigned __int8 *)(a2 + v794 + 2) << 16) | (*(unsigned __int8 *)(a2 + v794 + 1) << 8) | *(unsigned __int8 *)(a2 + v794);
              }
              else {
                unsigned int v795 = *(unsigned __int16 *)(a2 + v794);
              }
              *(_WORD *)(result + 30) |= (v795 >> v793) & 0x7FFF;
              unint64_t v849 = *a3 + 99;
              unint64_t v850 = v849 & 7;
              unint64_t v851 = v849 >> 3;
              if (v850 > 1) {
                unsigned int v852 = (*(unsigned __int8 *)(a2 + v851 + 2) << 16) | (*(unsigned __int8 *)(a2 + v851 + 1) << 8) | *(unsigned __int8 *)(a2 + v851);
              }
              else {
                unsigned int v852 = *(unsigned __int16 *)(a2 + v851);
              }
              *(_WORD *)(result + 32) |= (v852 >> v850) & 0x7FFF;
              unint64_t v903 = *a3 + 114;
              unint64_t v904 = v903 & 7;
              unint64_t v905 = v903 >> 3;
              if (v904 > 1) {
                unsigned int v906 = (*(unsigned __int8 *)(a2 + v905 + 2) << 16) | (*(unsigned __int8 *)(a2 + v905 + 1) << 8) | *(unsigned __int8 *)(a2 + v905);
              }
              else {
                unsigned int v906 = *(unsigned __int16 *)(a2 + v905);
              }
              *(_WORD *)(result + 34) |= (v906 >> v904) & 0x7FFF;
              unint64_t v952 = (*(unsigned char *)a3 - 127) & 7;
              unint64_t v953 = (unint64_t)(*a3 + 129) >> 3;
              if (v952 > 1) {
                unsigned int v954 = (*(unsigned __int8 *)(a2 + v953 + 2) << 16) | (*(unsigned __int8 *)(a2 + v953 + 1) << 8) | *(unsigned __int8 *)(a2 + v953);
              }
              else {
                unsigned int v954 = *(unsigned __int16 *)(a2 + v953);
              }
              *(_WORD *)(result + 36) |= (v954 >> v952) & 0x7FFF;
              unint64_t v993 = *a3 & 7;
              unint64_t v994 = (unint64_t)(*a3 + 144) >> 3;
              if (v993 > 1) {
                unsigned int v995 = (*(unsigned __int8 *)(a2 + v994 + 2) << 16) | (*(unsigned __int8 *)(a2 + v994 + 1) << 8) | *(unsigned __int8 *)(a2 + v994);
              }
              else {
                unsigned int v995 = *(unsigned __int16 *)(a2 + v994);
              }
              *(_WORD *)(result + 38) |= (v995 >> v993) & 0x7FFF;
              unint64_t v1027 = (*(unsigned char *)a3 - 97) & 7;
              unint64_t v1028 = (unint64_t)(*a3 + 159) >> 3;
              if (v1027 > 1) {
                unsigned int v1029 = (*(unsigned __int8 *)(a2 + v1028 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1028 + 1) << 8) | *(unsigned __int8 *)(a2 + v1028);
              }
              else {
                unsigned int v1029 = *(unsigned __int16 *)(a2 + v1028);
              }
              *(_WORD *)(result + 40) |= (v1029 >> v1027) & 0x7FFF;
              unint64_t v1051 = (*(unsigned char *)a3 - 82) & 7;
              unint64_t v1052 = (unint64_t)(*a3 + 174) >> 3;
              if (v1051 > 1) {
                unsigned int v1053 = (*(unsigned __int8 *)(a2 + v1052 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1052 + 1) << 8) | *(unsigned __int8 *)(a2 + v1052);
              }
              else {
                unsigned int v1053 = *(unsigned __int16 *)(a2 + v1052);
              }
              *(_WORD *)(result + 42) |= (v1053 >> v1051) & 0x7FFF;
              unint64_t v1075 = (*(unsigned char *)a3 - 67) & 7;
              unint64_t v1076 = (unint64_t)(*a3 + 189) >> 3;
              if (v1075 > 1) {
                unsigned int v1077 = (*(unsigned __int8 *)(a2 + v1076 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1076 + 1) << 8) | *(unsigned __int8 *)(a2 + v1076);
              }
              else {
                unsigned int v1077 = *(unsigned __int16 *)(a2 + v1076);
              }
              *(_WORD *)(result + 44) |= (v1077 >> v1075) & 0x7FFF;
              unint64_t v1099 = (*(unsigned char *)a3 - 52) & 7;
              unint64_t v1100 = (unint64_t)(*a3 + 204) >> 3;
              if (v1099 > 1) {
                unsigned int v1101 = (*(unsigned __int8 *)(a2 + v1100 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1100 + 1) << 8) | *(unsigned __int8 *)(a2 + v1100);
              }
              else {
                unsigned int v1101 = *(unsigned __int16 *)(a2 + v1100);
              }
              *(_WORD *)(result + 46) |= (v1101 >> v1099) & 0x7FFF;
              unint64_t v1123 = (*(unsigned char *)a3 - 37) & 7;
              unint64_t v1124 = (unint64_t)(*a3 + 219) >> 3;
              if (v1123 > 1) {
                unsigned int v1125 = (*(unsigned __int8 *)(a2 + v1124 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1124 + 1) << 8) | *(unsigned __int8 *)(a2 + v1124);
              }
              else {
                unsigned int v1125 = *(unsigned __int16 *)(a2 + v1124);
              }
              *(_WORD *)(result + 48) |= (v1125 >> v1123) & 0x7FFF;
              unint64_t v1142 = (*(unsigned char *)a3 - 22) & 7;
              unint64_t v1143 = (unint64_t)(*a3 + 234) >> 3;
              if (v1142 > 1) {
                unsigned int v1144 = (*(unsigned __int8 *)(a2 + v1143 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1143 + 1) << 8) | *(unsigned __int8 *)(a2 + v1143);
              }
              else {
                unsigned int v1144 = *(unsigned __int16 *)(a2 + v1143);
              }
              *(_WORD *)(result + 50) |= (v1144 >> v1142) & 0x7FFF;
              unint64_t v1155 = (*(unsigned char *)a3 - 7) & 7;
              unint64_t v1156 = (unint64_t)(*a3 + 249) >> 3;
              if (v1155 > 1) {
                unsigned int v1157 = (*(unsigned __int8 *)(a2 + v1156 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1156 + 1) << 8) | *(unsigned __int8 *)(a2 + v1156);
              }
              else {
                unsigned int v1157 = *(unsigned __int16 *)(a2 + v1156);
              }
              *(_WORD *)(result + 52) |= (v1157 >> v1155) & 0x7FFF;
              unint64_t v1164 = *a3 & 7;
              unint64_t v1165 = (unint64_t)(*a3 + 264) >> 3;
              if (v1164 > 1) {
                unsigned int v1166 = (*(unsigned __int8 *)(a2 + v1165 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1165 + 1) << 8) | *(unsigned __int8 *)(a2 + v1165);
              }
              else {
                unsigned int v1166 = *(unsigned __int16 *)(a2 + v1165);
              }
              *(_WORD *)(result + 54) |= (v1166 >> v1164) & 0x7FFF;
              unint64_t v1174 = *a3 + 279;
              unint64_t v1175 = v1174 & 7;
              unint64_t v1176 = v1174 >> 3;
              if (v1175 > 1) {
                unsigned int v1177 = (*(unsigned __int8 *)(a2 + v1176 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1176 + 1) << 8) | *(unsigned __int8 *)(a2 + v1176);
              }
              else {
                unsigned int v1177 = *(unsigned __int16 *)(a2 + v1176);
              }
              *(_WORD *)(result + 56) |= (v1177 >> v1175) & 0x7FFF;
              unint64_t v1186 = *a3 + 294;
              unint64_t v1187 = v1186 & 7;
              unint64_t v1188 = v1186 >> 3;
              if (v1187 > 1) {
                unsigned int v1189 = (*(unsigned __int8 *)(a2 + v1188 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1188 + 1) << 8) | *(unsigned __int8 *)(a2 + v1188);
              }
              else {
                unsigned int v1189 = *(unsigned __int16 *)(a2 + v1188);
              }
              *(_WORD *)(result + 58) |= (v1189 >> v1187) & 0x7FFF;
              uint64_t v22 = 309;
              goto LABEL_1232;
            case 3:
              *(_DWORD *)(result + 16) = 3;
              *(unsigned char *)(result + 20) |= (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 9) >> 3)) >> ((*(unsigned char *)a3 + 9) & 7)) & 1;
              unint64_t v340 = *a3 + 10;
              unint64_t v341 = v340 >> 3;
              unint64_t v342 = v340 & 7;
              if (v342) {
                LODWORD(v341) = ((*(unsigned __int8 *)(a2 + v341 + 2) << 16) | (*(unsigned __int8 *)(a2 + v341 + 1) << 8) | *(unsigned __int8 *)(a2 + v341)) >> v342;
              }
              else {
                LOWORD(v341) = *(_WORD *)(a2 + v341);
              }
              uint64_t v1248 = *(unsigned int *)(result + 22);
              unint64_t v1249 = v1248 | ((unint64_t)*(unsigned __int8 *)(result + 26) << 32);
              *(_DWORD *)(result + 22) = v1248 | (unsigned __int16)v341;
              unint64_t v1250 = *a3 + 26;
              unint64_t v1251 = v1250 & 7;
              unint64_t v1252 = v1250 >> 3;
              if (v1251 == 7) {
                int v1253 = *(_DWORD *)(a2 + v1252) >> 7;
              }
              else {
                int v1253 = ((*(unsigned __int8 *)(a2 + v1252 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1252 + 1) << 8) | *(unsigned __int8 *)(a2 + v1252)) >> v1251;
              }
              unint64_t v1254 = (unsigned __int16)v341 | ((unint64_t)(v1253 & 0x3FFFF) << 16) | v1249;
              *(_DWORD *)(result + 22) = v1254;
              *(unsigned char *)(result + 26) = BYTE4(v1254);
              unint64_t v1255 = *a3 + 44;
              unint64_t v1256 = v1255 & 7;
              unint64_t v1257 = v1255 >> 3;
              if (v1256 == 7) {
                int v1258 = *(_DWORD *)(a2 + v1257) >> 7;
              }
              else {
                int v1258 = ((*(unsigned __int8 *)(a2 + v1257 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1257 + 1) << 8) | *(unsigned __int8 *)(a2 + v1257)) >> v1256;
              }
              int v1259 = *(_DWORD *)(result + 32);
              *(_DWORD *)(result + 28) |= v1258 & 0x3FFFF;
              *(_DWORD *)(result + 32) = (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 62) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 62) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 62) >> 3))) >> ((*(unsigned char *)a3 + 62) & 7)) & 0x1FFFF | v1259;
              unint64_t v1260 = *a3 + 79;
              unint64_t v1261 = v1260 >> 3;
              unint64_t v1262 = v1260 & 7;
              if (v1262) {
                unsigned int v1263 = ((*(unsigned __int8 *)(a2 + v1261 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1261 + 1) << 8) | *(unsigned __int8 *)(a2 + v1261)) >> v1262;
              }
              else {
                LOWORD(v1263) = *(_WORD *)(a2 + v1261);
              }
              uint64_t v1310 = (unsigned __int16)v1263;
              int v1311 = *(unsigned __int16 *)(result + 44) | (*(unsigned __int8 *)(result + 46) << 16);
              uint64_t v1312 = *(void *)(result + 36);
              uint64_t v1313 = v1312 | v1310;
              *(void *)(result + 36) = v1313;
              unint64_t v1314 = *a3 + 95;
              unint64_t v1315 = v1314 >> 3;
              unint64_t v1316 = v1314 & 7;
              if (v1316) {
                unsigned int v1317 = ((*(unsigned __int8 *)(a2 + v1315 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1315 + 1) << 8) | *(unsigned __int8 *)(a2 + v1315)) >> v1316;
              }
              else {
                unsigned int v1317 = *(unsigned __int16 *)(a2 + v1315);
              }
              unint64_t v1387 = v1313 & 0xFFFFFFFF0000FFFFLL | v1313 & 0xFFFF0000 | (unint64_t)(v1317 << 16);
              *(_WORD *)(result + 44) = v1311;
              *(unsigned char *)(result + 46) = BYTE2(v1311);
              *(void *)(result + 36) = v1387;
              unint64_t v1388 = *a3 + 111;
              unint64_t v1389 = v1388 >> 3;
              unint64_t v1390 = v1388 & 7;
              if (v1390) {
                unsigned int v1391 = ((*(unsigned __int8 *)(a2 + v1389 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1389 + 1) << 8) | *(unsigned __int8 *)(a2 + v1389)) >> v1390;
              }
              else {
                LOWORD(v1391) = *(_WORD *)(a2 + v1389);
              }
              unint64_t v1409 = v1387 & 0xFFFF0000FFFFFFFFLL | v1312 & 0xFFFF00000000 | ((unint64_t)(unsigned __int16)v1391 << 32);
              *(_WORD *)(result + 44) = v1311;
              *(unsigned char *)(result + 46) = BYTE2(v1311);
              *(void *)(result + 36) = v1409;
              unint64_t v1410 = *a3 + 127;
              unint64_t v1411 = v1410 >> 3;
              unint64_t v1412 = v1410 & 7;
              if (v1412) {
                uint64_t v1413 = ((*(unsigned __int8 *)(a2 + v1411 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1411 + 1) << 8) | *(unsigned __int8 *)(a2 + v1411)) >> v1412;
              }
              else {
                uint64_t v1413 = *(unsigned __int16 *)(a2 + v1411);
              }
              *(_WORD *)(result + 44) = v1311;
              unint64_t v1436 = v1409 & 0xFFFF000000000000 | (v1413 << 48) | v1409 & 0xFFFFFFFFFFFFLL;
              *(unsigned char *)(result + 46) = BYTE2(v1311);
              *(void *)(result + 36) = v1436;
              unsigned int v1437 = v1311 | (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 143) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 143) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 143) >> 3))) >> ((*(unsigned char *)a3 - 113) & 7));
              *(void *)(result + 36) = v1436;
              *(_WORD *)(result + 44) = v1437;
              *(unsigned char *)(result + 46) = (v1311 & 0xFE0000 | v1437 & 0x1FFFF) >> 16;
              LODWORD(v1436) = *(_DWORD *)(result + 52);
              *(_DWORD *)(result + 48) |= (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 160) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 160) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 160) >> 3))) >> (*a3 & 7)) & 0x1FFFF;
              *(_DWORD *)(result + 52) = (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 177) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 177) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 177) >> 3))) >> ((*(unsigned char *)a3 - 79) & 7)) & 0x1FFFF | v1436;
              uint64_t v1438 = *(void *)(result + 56) | (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 194) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 194) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 194) >> 3))) >> ((*(unsigned char *)a3 - 62) & 7)) & 0x1FFFF;
              *(void *)(result + 56) = v1438;
              unint64_t v1439 = (*(unsigned char *)a3 - 45) & 7;
              unint64_t v1440 = (unint64_t)(*a3 + 211) >> 3;
              if (v1439 > 1) {
                unsigned int v1441 = (*(unsigned __int8 *)(a2 + v1440 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1440 + 1) << 8) | *(unsigned __int8 *)(a2 + v1440);
              }
              else {
                unsigned int v1441 = *(unsigned __int16 *)(a2 + v1440);
              }
              uint64_t v1442 = v1438 | (v1441 >> v1439 << 17);
              *(void *)(result + 56) = v1442;
              unint64_t v1443 = (unint64_t)(*a3 + 226) >> 3;
              if (((*(unsigned char *)a3 - 30) & 7) != 0) {
                unsigned int v1444 = ((*(unsigned __int8 *)(a2 + v1443 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1443 + 1) << 8) | *(unsigned __int8 *)(a2 + v1443)) >> ((*(unsigned char *)a3 - 30) & 7);
              }
              else {
                LOWORD(v1444) = *(_WORD *)(a2 + v1443);
              }
              *(void *)(result + 56) = v1442 | ((unint64_t)(unsigned __int16)v1444 << 32);
              uint64_t v1466 = (*(unsigned char *)a3 - 14) & 7;
              unint64_t v1467 = (unint64_t)(*a3 + 242) >> 3;
              if (v1466 == 7) {
                int v1468 = *(_DWORD *)(a2 + v1467) >> 7;
              }
              else {
                int v1468 = ((*(unsigned __int8 *)(a2 + v1467 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1467 + 1) << 8) | *(unsigned __int8 *)(a2 + v1467)) >> v1466;
              }
              *(_DWORD *)(result + 64) |= v1468 & 0x3FFFF;
              unint64_t v1469 = *a3 + 260;
              unint64_t v1470 = v1469 & 7;
              unint64_t v1471 = v1469 >> 3;
              if (v1470 == 7) {
                int v1472 = *(_DWORD *)(a2 + v1471) >> 7;
              }
              else {
                int v1472 = ((*(unsigned __int8 *)(a2 + v1471 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1471 + 1) << 8) | *(unsigned __int8 *)(a2 + v1471)) >> v1470;
              }
              int v1473 = *(_DWORD *)(result + 72);
              *(_DWORD *)(result + 68) |= v1472 & 0x3FFFF;
              *(_DWORD *)(result + 72) = (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 278) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 278) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 278) >> 3))) >> ((*(unsigned char *)a3 + 22) & 7)) & 0x1FFFF | v1473;
              unint64_t v1474 = *a3 + 295;
              unint64_t v1475 = v1474 >> 3;
              unint64_t v1476 = v1474 & 7;
              if (v1476) {
                unsigned int v1477 = ((*(unsigned __int8 *)(a2 + v1475 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1475 + 1) << 8) | *(unsigned __int8 *)(a2 + v1475)) >> v1476;
              }
              else {
                LOWORD(v1477) = *(_WORD *)(a2 + v1475);
              }
              uint64_t v1484 = (unsigned __int16)v1477;
              uint64_t v1485 = *(void *)(result + 84);
              uint64_t v1486 = *(void *)(result + 76);
              uint64_t v1487 = v1486 | v1484;
              *(void *)(result + 76) = v1487;
              unint64_t v1488 = *a3 + 311;
              unint64_t v1489 = v1488 >> 3;
              unint64_t v1490 = v1488 & 7;
              if (v1490) {
                unsigned int v1491 = ((*(unsigned __int8 *)(a2 + v1489 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1489 + 1) << 8) | *(unsigned __int8 *)(a2 + v1489)) >> v1490;
              }
              else {
                unsigned int v1491 = *(unsigned __int16 *)(a2 + v1489);
              }
              unint64_t v1497 = v1487 & 0xFFFFFFFF0000FFFFLL | v1487 & 0xFFFF0000 | (unint64_t)(v1491 << 16);
              *(void *)(result + 84) = v1485;
              *(void *)(result + 76) = v1497;
              unint64_t v1498 = *a3 + 327;
              unint64_t v1499 = v1498 >> 3;
              unint64_t v1500 = v1498 & 7;
              if (v1500) {
                unsigned int v1501 = ((*(unsigned __int8 *)(a2 + v1499 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1499 + 1) << 8) | *(unsigned __int8 *)(a2 + v1499)) >> v1500;
              }
              else {
                LOWORD(v1501) = *(_WORD *)(a2 + v1499);
              }
              unint64_t v1505 = v1497 & 0xFFFF0000FFFFFFFFLL | v1486 & 0xFFFF00000000 | ((unint64_t)(unsigned __int16)v1501 << 32);
              *(void *)(result + 84) = v1485;
              *(void *)(result + 76) = v1505;
              unint64_t v1506 = *a3 + 343;
              unint64_t v1507 = v1506 >> 3;
              unint64_t v1508 = v1506 & 7;
              if (v1508) {
                uint64_t v1509 = ((*(unsigned __int8 *)(a2 + v1507 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1507 + 1) << 8) | *(unsigned __int8 *)(a2 + v1507)) >> v1508;
              }
              else {
                uint64_t v1509 = *(unsigned __int16 *)(a2 + v1507);
              }
              unint64_t v1513 = v1505 & 0xFFFF000000000000 | (v1509 << 48) | v1505 & 0xFFFFFFFFFFFFLL;
              *(void *)(result + 84) = v1485;
              *(void *)(result + 76) = v1513;
              unint64_t v1514 = *a3 + 359;
              unint64_t v1515 = v1514 >> 3;
              unint64_t v1516 = v1514 & 7;
              if (v1516) {
                unsigned int v1517 = ((*(unsigned __int8 *)(a2 + v1515 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1515 + 1) << 8) | *(unsigned __int8 *)(a2 + v1515)) >> v1516;
              }
              else {
                LOWORD(v1517) = *(_WORD *)(a2 + v1515);
              }
              uint64_t v1521 = v1485 | (unsigned __int16)v1517;
              *(void *)(result + 76) = v1513;
              *(void *)(result + 84) = v1521;
              unint64_t v1522 = *a3 + 375;
              unint64_t v1523 = v1522 >> 3;
              unint64_t v1524 = v1522 & 7;
              if (v1524) {
                unsigned int v1525 = ((*(unsigned __int8 *)(a2 + v1523 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1523 + 1) << 8) | *(unsigned __int8 *)(a2 + v1523)) >> v1524;
              }
              else {
                LOWORD(v1525) = *(_WORD *)(a2 + v1523);
              }
              unint64_t v1536 = v1521 & 0xFFFFFFFF0000FFFFLL | ((unint64_t)(unsigned __int16)(WORD1(v1521) | v1525) << 16);
              *(void *)(result + 76) = v1513;
              *(void *)(result + 84) = v1536;
              unint64_t v1537 = (*(unsigned char *)a3 - 121) & 7;
              unint64_t v1538 = (unint64_t)(*a3 + 391) >> 3;
              if (v1537 > 1) {
                unsigned int v1539 = (*(unsigned __int8 *)(a2 + v1538 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1538 + 1) << 8) | *(unsigned __int8 *)(a2 + v1538);
              }
              else {
                unsigned int v1539 = *(unsigned __int16 *)(a2 + v1538);
              }
              *(void *)(result + 76) = v1513;
              *(void *)(result + 84) = v1536 & 0xFFFF8000FFFFFFFFLL | ((unint64_t)((WORD2(v1536) | (unsigned __int16)(v1539 >> v1537)) & 0x7FFF) << 32);
              uint64_t v22 = 406;
              goto LABEL_1232;
            case 4:
              *(_DWORD *)(result + 16) = 4;
              int v343 = (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 9) >> 3)) >> ((*(unsigned char *)a3 + 9) & 7)) & 1 | *(_DWORD *)(result + 20);
              *(_DWORD *)(result + 20) = v343;
              unint64_t v344 = *a3 + 10;
              unint64_t v345 = v344 & 7;
              unint64_t v346 = v344 >> 3;
              if (v345 == 7) {
                int v347 = *(_DWORD *)(a2 + v346) >> 7;
              }
              else {
                int v347 = ((*(unsigned __int8 *)(a2 + v346 + 2) << 16) | (*(unsigned __int8 *)(a2 + v346 + 1) << 8) | *(unsigned __int8 *)(a2 + v346)) >> v345;
              }
              *(_DWORD *)(result + 20) = (2 * (v347 & 0x3FFFF)) | v343;
              unint64_t v549 = *a3 + 28;
              unint64_t v550 = v549 & 7;
              unint64_t v551 = v549 >> 3;
              if (v550 == 7) {
                int v552 = *(_DWORD *)(a2 + v551) >> 7;
              }
              else {
                int v552 = ((*(unsigned __int8 *)(a2 + v551 + 2) << 16) | (*(unsigned __int8 *)(a2 + v551 + 1) << 8) | *(unsigned __int8 *)(a2 + v551)) >> v550;
              }
              *(_DWORD *)(result + 24) |= v552 & 0x3FFFF;
              unint64_t v610 = *a3 + 46;
              unint64_t v611 = v610 & 7;
              unint64_t v612 = v610 >> 3;
              if (v611 == 7) {
                int v613 = *(_DWORD *)(a2 + v612) >> 7;
              }
              else {
                int v613 = ((*(unsigned __int8 *)(a2 + v612 + 2) << 16) | (*(unsigned __int8 *)(a2 + v612 + 1) << 8) | *(unsigned __int8 *)(a2 + v612)) >> v611;
              }
              *(_DWORD *)(result + 28) |= v613 & 0x3FFFF;
              uint64_t v675 = *a3 & 7;
              unint64_t v676 = (unint64_t)(*a3 + 64) >> 3;
              if (v675 == 7) {
                int v677 = *(_DWORD *)(a2 + v676) >> 7;
              }
              else {
                int v677 = ((*(unsigned __int8 *)(a2 + v676 + 2) << 16) | (*(unsigned __int8 *)(a2 + v676 + 1) << 8) | *(unsigned __int8 *)(a2 + v676)) >> v675;
              }
              *(_DWORD *)(result + 32) |= v677 & 0x3FFFF;
              unint64_t v733 = *a3 + 82;
              unint64_t v734 = v733 & 7;
              unint64_t v735 = v733 >> 3;
              if (v734 == 7) {
                int v736 = *(_DWORD *)(a2 + v735) >> 7;
              }
              else {
                int v736 = ((*(unsigned __int8 *)(a2 + v735 + 2) << 16) | (*(unsigned __int8 *)(a2 + v735 + 1) << 8) | *(unsigned __int8 *)(a2 + v735)) >> v734;
              }
              *(_DWORD *)(result + 36) |= v736 & 0x3FFFF;
              unint64_t v796 = *a3 + 100;
              unint64_t v797 = v796 & 7;
              unint64_t v798 = v796 >> 3;
              if (v797 == 7) {
                int v799 = *(_DWORD *)(a2 + v798) >> 7;
              }
              else {
                int v799 = ((*(unsigned __int8 *)(a2 + v798 + 2) << 16) | (*(unsigned __int8 *)(a2 + v798 + 1) << 8) | *(unsigned __int8 *)(a2 + v798)) >> v797;
              }
              *(_DWORD *)(result + 40) |= v799 & 0x3FFFF;
              unint64_t v853 = *a3 + 118;
              unint64_t v854 = v853 & 7;
              unint64_t v855 = v853 >> 3;
              if (v854 > 1) {
                unsigned int v856 = (*(unsigned __int8 *)(a2 + v855 + 2) << 16) | (*(unsigned __int8 *)(a2 + v855 + 1) << 8) | *(unsigned __int8 *)(a2 + v855);
              }
              else {
                unsigned int v856 = *(unsigned __int16 *)(a2 + v855);
              }
              *(_WORD *)(result + 44) |= (v856 >> v854) & 0x7FFF;
              unint64_t v907 = (*(unsigned char *)a3 - 123) & 7;
              unint64_t v908 = (unint64_t)(*a3 + 133) >> 3;
              if (v907 > 1) {
                unsigned int v909 = (*(unsigned __int8 *)(a2 + v908 + 2) << 16) | (*(unsigned __int8 *)(a2 + v908 + 1) << 8) | *(unsigned __int8 *)(a2 + v908);
              }
              else {
                unsigned int v909 = *(unsigned __int16 *)(a2 + v908);
              }
              *(_WORD *)(result + 46) |= (v909 >> v907) & 0x7FFF;
              unint64_t v955 = (*(unsigned char *)a3 - 108) & 7;
              unint64_t v956 = (unint64_t)(*a3 + 148) >> 3;
              if (v955 > 1) {
                unsigned int v957 = (*(unsigned __int8 *)(a2 + v956 + 2) << 16) | (*(unsigned __int8 *)(a2 + v956 + 1) << 8) | *(unsigned __int8 *)(a2 + v956);
              }
              else {
                unsigned int v957 = *(unsigned __int16 *)(a2 + v956);
              }
              *(_WORD *)(result + 48) |= (v957 >> v955) & 0x7FFF;
              unint64_t v996 = (*(unsigned char *)a3 - 93) & 7;
              unint64_t v997 = (unint64_t)(*a3 + 163) >> 3;
              if (v996 > 1) {
                unsigned int v998 = (*(unsigned __int8 *)(a2 + v997 + 2) << 16) | (*(unsigned __int8 *)(a2 + v997 + 1) << 8) | *(unsigned __int8 *)(a2 + v997);
              }
              else {
                unsigned int v998 = *(unsigned __int16 *)(a2 + v997);
              }
              *(_WORD *)(result + 50) |= (v998 >> v996) & 0x7FFF;
              unint64_t v1030 = (*(unsigned char *)a3 - 78) & 7;
              unint64_t v1031 = (unint64_t)(*a3 + 178) >> 3;
              if (v1030 > 4)
              {
                int v1033 = (*(unsigned __int8 *)(v1031 + a2 + 3) << 24) | (*(unsigned __int8 *)(v1031 + a2 + 2) << 16);
                int v1032 = *(unsigned __int8 *)(v1031 + a2 + 1) << 8;
              }
              else
              {
                int v1032 = *(unsigned __int8 *)(v1031 + a2 + 2) << 16;
                int v1033 = *(unsigned __int8 *)(v1031 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 52) |= ((v1033 | v1032 | *(unsigned __int8 *)(a2 + v1031)) >> v1030) & 0xFFFFF;
              unint64_t v1054 = (*(unsigned char *)a3 - 58) & 7;
              unint64_t v1055 = (unint64_t)(*a3 + 198) >> 3;
              if (v1054 > 4)
              {
                int v1057 = (*(unsigned __int8 *)(v1055 + a2 + 3) << 24) | (*(unsigned __int8 *)(v1055 + a2 + 2) << 16);
                int v1056 = *(unsigned __int8 *)(v1055 + a2 + 1) << 8;
              }
              else
              {
                int v1056 = *(unsigned __int8 *)(v1055 + a2 + 2) << 16;
                int v1057 = *(unsigned __int8 *)(v1055 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 56) |= ((v1057 | v1056 | *(unsigned __int8 *)(a2 + v1055)) >> v1054) & 0xFFFFF;
              uint64_t v1078 = (*(unsigned char *)a3 - 38) & 7;
              unint64_t v1079 = (unint64_t)(*a3 + 218) >> 3;
              if (v1078 == 7) {
                int v1080 = *(_DWORD *)(a2 + v1079) >> 7;
              }
              else {
                int v1080 = ((*(unsigned __int8 *)(a2 + v1079 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1079 + 1) << 8) | *(unsigned __int8 *)(a2 + v1079)) >> v1078;
              }
              *(_DWORD *)(result + 60) |= v1080 & 0x3FFFF;
              unint64_t v1102 = (unint64_t)(*a3 + 236) >> 3;
              if (((*(unsigned char *)a3 - 20) & 7) != 0) {
                unsigned int v1103 = ((*(unsigned __int8 *)(a2 + v1102 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1102 + 1) << 8) | *(unsigned __int8 *)(a2 + v1102)) >> ((*(unsigned char *)a3 - 20) & 7);
              }
              else {
                LOWORD(v1103) = *(_WORD *)(a2 + v1102);
              }
              int v1307 = *(_DWORD *)(result + 64) | (unsigned __int16)v1103;
              *(_DWORD *)(result + 64) = v1307;
              unint64_t v1308 = (unint64_t)(*a3 + 252) >> 3;
              if (((*(unsigned char *)a3 - 4) & 7) != 0) {
                unsigned int v1309 = ((*(unsigned __int8 *)(a2 + v1308 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1308 + 1) << 8) | *(unsigned __int8 *)(a2 + v1308)) >> ((*(unsigned char *)a3 - 4) & 7);
              }
              else {
                unsigned int v1309 = *(unsigned __int16 *)(a2 + v1308);
              }
              *(_DWORD *)(result + 64) = v1307 | (v1309 << 16);
              uint64_t v22 = 268;
              goto LABEL_1232;
            case 5:
              *(_DWORD *)(result + 16) = 6;
              unint64_t v348 = *a3 + 9;
              unint64_t v349 = v348 & 7;
              unint64_t v350 = v348 >> 3;
              if (v349 > 5)
              {
                int v352 = (*(unsigned __int8 *)(v350 + a2 + 3) << 24) | (*(unsigned __int8 *)(v350 + a2 + 2) << 16);
                int v351 = *(unsigned __int8 *)(v350 + a2 + 1) << 8;
              }
              else
              {
                int v351 = *(unsigned __int8 *)(v350 + a2 + 2) << 16;
                int v352 = *(unsigned __int8 *)(v350 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 20) |= ((v352 | v351 | *(unsigned __int8 *)(a2 + v350)) >> v349) & 0x7FFFF;
              unint64_t v553 = *a3 + 28;
              unint64_t v554 = v553 & 7;
              unint64_t v555 = v553 >> 3;
              if (v554 > 5)
              {
                int v557 = (*(unsigned __int8 *)(v555 + a2 + 3) << 24) | (*(unsigned __int8 *)(v555 + a2 + 2) << 16);
                int v556 = *(unsigned __int8 *)(v555 + a2 + 1) << 8;
              }
              else
              {
                int v556 = *(unsigned __int8 *)(v555 + a2 + 2) << 16;
                int v557 = *(unsigned __int8 *)(v555 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 24) |= ((v557 | v556 | *(unsigned __int8 *)(a2 + v555)) >> v554) & 0x7FFFF;
              unint64_t v614 = *a3 + 47;
              unint64_t v615 = v614 & 7;
              unint64_t v616 = v614 >> 3;
              if (v615 > 5)
              {
                int v618 = (*(unsigned __int8 *)(v616 + a2 + 3) << 24) | (*(unsigned __int8 *)(v616 + a2 + 2) << 16);
                int v617 = *(unsigned __int8 *)(v616 + a2 + 1) << 8;
              }
              else
              {
                int v617 = *(unsigned __int8 *)(v616 + a2 + 2) << 16;
                int v618 = *(unsigned __int8 *)(v616 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 28) |= ((v618 | v617 | *(unsigned __int8 *)(a2 + v616)) >> v615) & 0x7FFFF;
              unint64_t v678 = *a3 + 66;
              unint64_t v679 = v678 & 7;
              unint64_t v680 = v678 >> 3;
              if (v679 > 5)
              {
                int v682 = (*(unsigned __int8 *)(v680 + a2 + 3) << 24) | (*(unsigned __int8 *)(v680 + a2 + 2) << 16);
                int v681 = *(unsigned __int8 *)(v680 + a2 + 1) << 8;
              }
              else
              {
                int v681 = *(unsigned __int8 *)(v680 + a2 + 2) << 16;
                int v682 = *(unsigned __int8 *)(v680 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 32) |= ((v682 | v681 | *(unsigned __int8 *)(a2 + v680)) >> v679) & 0x7FFFF;
              unint64_t v737 = *a3 + 85;
              unint64_t v738 = v737 & 7;
              unint64_t v739 = v737 >> 3;
              if (v738 > 3)
              {
                int v741 = (*(unsigned __int8 *)(v739 + a2 + 3) << 24) | (*(unsigned __int8 *)(v739 + a2 + 2) << 16);
                int v740 = *(unsigned __int8 *)(v739 + a2 + 1) << 8;
              }
              else
              {
                int v740 = *(unsigned __int8 *)(v739 + a2 + 2) << 16;
                int v741 = *(unsigned __int8 *)(v739 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 36) |= ((v741 | v740 | *(unsigned __int8 *)(a2 + v739)) >> v738) & 0x1FFFFF;
              unint64_t v800 = *a3 + 106;
              unint64_t v801 = v800 & 7;
              unint64_t v802 = v800 >> 3;
              if (v801 > 3)
              {
                int v804 = (*(unsigned __int8 *)(v802 + a2 + 3) << 24) | (*(unsigned __int8 *)(v802 + a2 + 2) << 16);
                int v803 = *(unsigned __int8 *)(v802 + a2 + 1) << 8;
              }
              else
              {
                int v803 = *(unsigned __int8 *)(v802 + a2 + 2) << 16;
                int v804 = *(unsigned __int8 *)(v802 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 40) |= ((v804 | v803 | *(unsigned __int8 *)(a2 + v802)) >> v801) & 0x1FFFFF;
              unint64_t v857 = *a3 + 127;
              unint64_t v858 = v857 & 7;
              unint64_t v859 = v857 >> 3;
              if (v858 > 3)
              {
                int v861 = (*(unsigned __int8 *)(v859 + a2 + 3) << 24) | (*(unsigned __int8 *)(v859 + a2 + 2) << 16);
                int v860 = *(unsigned __int8 *)(v859 + a2 + 1) << 8;
              }
              else
              {
                int v860 = *(unsigned __int8 *)(v859 + a2 + 2) << 16;
                int v861 = *(unsigned __int8 *)(v859 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 44) |= ((v861 | v860 | *(unsigned __int8 *)(a2 + v859)) >> v858) & 0x1FFFFF;
              unint64_t v910 = (*(unsigned char *)a3 - 108) & 7;
              unint64_t v911 = (unint64_t)(*a3 + 148) >> 3;
              if (v910 > 3)
              {
                int v913 = (*(unsigned __int8 *)(v911 + a2 + 3) << 24) | (*(unsigned __int8 *)(v911 + a2 + 2) << 16);
                int v912 = *(unsigned __int8 *)(v911 + a2 + 1) << 8;
              }
              else
              {
                int v912 = *(unsigned __int8 *)(v911 + a2 + 2) << 16;
                int v913 = *(unsigned __int8 *)(v911 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 48) |= ((v913 | v912 | *(unsigned __int8 *)(a2 + v911)) >> v910) & 0x1FFFFF;
              unint64_t v958 = (*(unsigned char *)a3 - 87) & 7;
              unint64_t v959 = (unint64_t)(*a3 + 169) >> 3;
              if (v958 > 3)
              {
                int v961 = (*(unsigned __int8 *)(v959 + a2 + 3) << 24) | (*(unsigned __int8 *)(v959 + a2 + 2) << 16);
                int v960 = *(unsigned __int8 *)(v959 + a2 + 1) << 8;
              }
              else
              {
                int v960 = *(unsigned __int8 *)(v959 + a2 + 2) << 16;
                int v961 = *(unsigned __int8 *)(v959 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 52) |= ((v961 | v960 | *(unsigned __int8 *)(a2 + v959)) >> v958) & 0x1FFFFF;
              unint64_t v999 = (*(unsigned char *)a3 - 66) & 7;
              unint64_t v1000 = (unint64_t)(*a3 + 190) >> 3;
              if (v999 > 1) {
                unsigned int v1001 = (*(unsigned __int8 *)(a2 + v1000 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1000 + 1) << 8) | *(unsigned __int8 *)(a2 + v1000);
              }
              else {
                unsigned int v1001 = *(unsigned __int16 *)(a2 + v1000);
              }
              *(_WORD *)(result + 56) |= (v1001 >> v999) & 0x7FFF;
              uint64_t v22 = 205;
              goto LABEL_1232;
            case 6:
              *(_DWORD *)(result + 16) = 7;
              unint64_t v353 = *a3 + 9;
              unint64_t v354 = v353 & 7;
              unint64_t v355 = v353 >> 3;
              if (v354 > 2)
              {
                int v357 = (*(unsigned __int8 *)(v355 + a2 + 3) << 24) | (*(unsigned __int8 *)(v355 + a2 + 2) << 16);
                int v356 = *(unsigned __int8 *)(v355 + a2 + 1) << 8;
              }
              else
              {
                int v356 = *(unsigned __int8 *)(v355 + a2 + 2) << 16;
                int v357 = *(unsigned __int8 *)(v355 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 20) |= ((v357 | v356 | *(unsigned __int8 *)(a2 + v355)) >> v354) & 0x3FFFFF;
              unint64_t v558 = *a3 + 31;
              unint64_t v559 = v558 & 7;
              unint64_t v560 = v558 >> 3;
              if (v559 > 2)
              {
                int v562 = (*(unsigned __int8 *)(v560 + a2 + 3) << 24) | (*(unsigned __int8 *)(v560 + a2 + 2) << 16);
                int v561 = *(unsigned __int8 *)(v560 + a2 + 1) << 8;
              }
              else
              {
                int v561 = *(unsigned __int8 *)(v560 + a2 + 2) << 16;
                int v562 = *(unsigned __int8 *)(v560 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 24) |= ((v562 | v561 | *(unsigned __int8 *)(a2 + v560)) >> v559) & 0x3FFFFF;
              unint64_t v619 = *a3 + 53;
              unint64_t v620 = v619 & 7;
              unint64_t v621 = v619 >> 3;
              if (v620 > 2)
              {
                int v623 = (*(unsigned __int8 *)(v621 + a2 + 3) << 24) | (*(unsigned __int8 *)(v621 + a2 + 2) << 16);
                int v622 = *(unsigned __int8 *)(v621 + a2 + 1) << 8;
              }
              else
              {
                int v622 = *(unsigned __int8 *)(v621 + a2 + 2) << 16;
                int v623 = *(unsigned __int8 *)(v621 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 28) |= ((v623 | v622 | *(unsigned __int8 *)(a2 + v621)) >> v620) & 0x3FFFFF;
              unint64_t v683 = *a3 + 75;
              unint64_t v684 = v683 & 7;
              unint64_t v685 = v683 >> 3;
              if (v684 > 2)
              {
                int v687 = (*(unsigned __int8 *)(v685 + a2 + 3) << 24) | (*(unsigned __int8 *)(v685 + a2 + 2) << 16);
                int v686 = *(unsigned __int8 *)(v685 + a2 + 1) << 8;
              }
              else
              {
                int v686 = *(unsigned __int8 *)(v685 + a2 + 2) << 16;
                int v687 = *(unsigned __int8 *)(v685 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 32) |= ((v687 | v686 | *(unsigned __int8 *)(a2 + v685)) >> v684) & 0x3FFFFF;
              unint64_t v742 = *a3 + 97;
              unint64_t v743 = v742 & 7;
              unint64_t v744 = v742 >> 3;
              if (v743 > 2)
              {
                int v746 = (*(unsigned __int8 *)(v744 + a2 + 3) << 24) | (*(unsigned __int8 *)(v744 + a2 + 2) << 16);
                int v745 = *(unsigned __int8 *)(v744 + a2 + 1) << 8;
              }
              else
              {
                int v745 = *(unsigned __int8 *)(v744 + a2 + 2) << 16;
                int v746 = *(unsigned __int8 *)(v744 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 36) |= ((v746 | v745 | *(unsigned __int8 *)(a2 + v744)) >> v743) & 0x3FFFFF;
              unint64_t v805 = *a3 + 119;
              unint64_t v806 = v805 & 7;
              unint64_t v807 = v805 >> 3;
              if (v806 > 2)
              {
                int v809 = (*(unsigned __int8 *)(v807 + a2 + 3) << 24) | (*(unsigned __int8 *)(v807 + a2 + 2) << 16);
                int v808 = *(unsigned __int8 *)(v807 + a2 + 1) << 8;
              }
              else
              {
                int v808 = *(unsigned __int8 *)(v807 + a2 + 2) << 16;
                int v809 = *(unsigned __int8 *)(v807 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 40) |= ((v809 | v808 | *(unsigned __int8 *)(a2 + v807)) >> v806) & 0x3FFFFF;
              unint64_t v862 = (*(unsigned char *)a3 - 115) & 7;
              unint64_t v863 = (unint64_t)(*a3 + 141) >> 3;
              if (v862 > 2)
              {
                int v865 = (*(unsigned __int8 *)(v863 + a2 + 3) << 24) | (*(unsigned __int8 *)(v863 + a2 + 2) << 16);
                int v864 = *(unsigned __int8 *)(v863 + a2 + 1) << 8;
              }
              else
              {
                int v864 = *(unsigned __int8 *)(v863 + a2 + 2) << 16;
                int v865 = *(unsigned __int8 *)(v863 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 44) |= ((v865 | v864 | *(unsigned __int8 *)(a2 + v863)) >> v862) & 0x3FFFFF;
              unint64_t v914 = (*(unsigned char *)a3 - 93) & 7;
              unint64_t v915 = (unint64_t)(*a3 + 163) >> 3;
              if (v914 > 5)
              {
                int v917 = (*(unsigned __int8 *)(v915 + a2 + 3) << 24) | (*(unsigned __int8 *)(v915 + a2 + 2) << 16);
                int v916 = *(unsigned __int8 *)(v915 + a2 + 1) << 8;
              }
              else
              {
                int v916 = *(unsigned __int8 *)(v915 + a2 + 2) << 16;
                int v917 = *(unsigned __int8 *)(v915 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 48) |= ((v917 | v916 | *(unsigned __int8 *)(a2 + v915)) >> v914) & 0x7FFFF;
              unint64_t v962 = (*(unsigned char *)a3 - 74) & 7;
              unint64_t v963 = (unint64_t)(*a3 + 182) >> 3;
              if (v962 > 2)
              {
                int v965 = (*(unsigned __int8 *)(v963 + a2 + 3) << 24) | (*(unsigned __int8 *)(v963 + a2 + 2) << 16);
                int v964 = *(unsigned __int8 *)(v963 + a2 + 1) << 8;
              }
              else
              {
                int v964 = *(unsigned __int8 *)(v963 + a2 + 2) << 16;
                int v965 = *(unsigned __int8 *)(v963 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 52) |= ((v965 | v964 | *(unsigned __int8 *)(a2 + v963)) >> v962) & 0x3FFFFF;
              unint64_t v1002 = (*(unsigned char *)a3 - 52) & 7;
              unint64_t v1003 = (unint64_t)(*a3 + 204) >> 3;
              if (v1002 > 2)
              {
                int v1005 = (*(unsigned __int8 *)(v1003 + a2 + 3) << 24) | (*(unsigned __int8 *)(v1003 + a2 + 2) << 16);
                int v1004 = *(unsigned __int8 *)(v1003 + a2 + 1) << 8;
              }
              else
              {
                int v1004 = *(unsigned __int8 *)(v1003 + a2 + 2) << 16;
                int v1005 = *(unsigned __int8 *)(v1003 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 56) |= ((v1005 | v1004 | *(unsigned __int8 *)(a2 + v1003)) >> v1002) & 0x3FFFFF;
              unint64_t v1034 = (*(unsigned char *)a3 - 30) & 7;
              unint64_t v1035 = (unint64_t)(*a3 + 226) >> 3;
              if (v1034 > 2)
              {
                int v1037 = (*(unsigned __int8 *)(v1035 + a2 + 3) << 24) | (*(unsigned __int8 *)(v1035 + a2 + 2) << 16);
                int v1036 = *(unsigned __int8 *)(v1035 + a2 + 1) << 8;
              }
              else
              {
                int v1036 = *(unsigned __int8 *)(v1035 + a2 + 2) << 16;
                int v1037 = *(unsigned __int8 *)(v1035 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 60) |= ((v1037 | v1036 | *(unsigned __int8 *)(a2 + v1035)) >> v1034) & 0x3FFFFF;
              unint64_t v1058 = *a3 & 7;
              unint64_t v1059 = (unint64_t)(*a3 + 248) >> 3;
              if (v1058 > 2)
              {
                int v1061 = (*(unsigned __int8 *)(v1059 + a2 + 3) << 24) | (*(unsigned __int8 *)(v1059 + a2 + 2) << 16);
                int v1060 = *(unsigned __int8 *)(v1059 + a2 + 1) << 8;
              }
              else
              {
                int v1060 = *(unsigned __int8 *)(v1059 + a2 + 2) << 16;
                int v1061 = *(unsigned __int8 *)(v1059 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 64) |= ((v1061 | v1060 | *(unsigned __int8 *)(a2 + v1059)) >> v1058) & 0x3FFFFF;
              unint64_t v1081 = *a3 + 270;
              unint64_t v1082 = v1081 & 7;
              unint64_t v1083 = v1081 >> 3;
              if (v1082 > 2)
              {
                int v1085 = (*(unsigned __int8 *)(v1083 + a2 + 3) << 24) | (*(unsigned __int8 *)(v1083 + a2 + 2) << 16);
                int v1084 = *(unsigned __int8 *)(v1083 + a2 + 1) << 8;
              }
              else
              {
                int v1084 = *(unsigned __int8 *)(v1083 + a2 + 2) << 16;
                int v1085 = *(unsigned __int8 *)(v1083 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 68) |= ((v1085 | v1084 | *(unsigned __int8 *)(a2 + v1083)) >> v1082) & 0x3FFFFF;
              unint64_t v1104 = *a3 + 292;
              unint64_t v1105 = v1104 & 7;
              unint64_t v1106 = v1104 >> 3;
              if (v1105 > 2)
              {
                int v1108 = (*(unsigned __int8 *)(v1106 + a2 + 3) << 24) | (*(unsigned __int8 *)(v1106 + a2 + 2) << 16);
                int v1107 = *(unsigned __int8 *)(v1106 + a2 + 1) << 8;
              }
              else
              {
                int v1107 = *(unsigned __int8 *)(v1106 + a2 + 2) << 16;
                int v1108 = *(unsigned __int8 *)(v1106 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 72) |= ((v1108 | v1107 | *(unsigned __int8 *)(a2 + v1106)) >> v1105) & 0x3FFFFF;
              unint64_t v1126 = *a3 + 314;
              unint64_t v1127 = v1126 & 7;
              unint64_t v1128 = v1126 >> 3;
              if (v1127 > 2)
              {
                int v1130 = (*(unsigned __int8 *)(v1128 + a2 + 3) << 24) | (*(unsigned __int8 *)(v1128 + a2 + 2) << 16);
                int v1129 = *(unsigned __int8 *)(v1128 + a2 + 1) << 8;
              }
              else
              {
                int v1129 = *(unsigned __int8 *)(v1128 + a2 + 2) << 16;
                int v1130 = *(unsigned __int8 *)(v1128 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 76) |= ((v1130 | v1129 | *(unsigned __int8 *)(a2 + v1128)) >> v1127) & 0x3FFFFF;
              unint64_t v1145 = *a3 & 7;
              unint64_t v1146 = (unint64_t)(*a3 + 336) >> 3;
              if (v1145 > 5)
              {
                int v1148 = (*(unsigned __int8 *)(v1146 + a2 + 3) << 24) | (*(unsigned __int8 *)(v1146 + a2 + 2) << 16);
                int v1147 = *(unsigned __int8 *)(v1146 + a2 + 1) << 8;
              }
              else
              {
                int v1147 = *(unsigned __int8 *)(v1146 + a2 + 2) << 16;
                int v1148 = *(unsigned __int8 *)(v1146 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 80) |= ((v1148 | v1147 | *(unsigned __int8 *)(a2 + v1146)) >> v1145) & 0x7FFFF;
              uint64_t v22 = 355;
              goto LABEL_1232;
            case 7:
              *(_DWORD *)(result + 16) = 8;
              unint64_t v358 = *a3 + 9;
              unint64_t v359 = v358 & 7;
              unint64_t v360 = v358 >> 3;
              if (v359 > 5)
              {
                int v362 = (*(unsigned __int8 *)(v360 + a2 + 3) << 24) | (*(unsigned __int8 *)(v360 + a2 + 2) << 16);
                int v361 = *(unsigned __int8 *)(v360 + a2 + 1) << 8;
              }
              else
              {
                int v361 = *(unsigned __int8 *)(v360 + a2 + 2) << 16;
                int v362 = *(unsigned __int8 *)(v360 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 20) |= ((v362 | v361 | *(unsigned __int8 *)(a2 + v360)) >> v359) & 0x7FFFF;
              unint64_t v563 = *a3 + 28;
              unint64_t v564 = v563 & 7;
              unint64_t v565 = v563 >> 3;
              if (v564 > 5)
              {
                int v567 = (*(unsigned __int8 *)(v565 + a2 + 3) << 24) | (*(unsigned __int8 *)(v565 + a2 + 2) << 16);
                int v566 = *(unsigned __int8 *)(v565 + a2 + 1) << 8;
              }
              else
              {
                int v566 = *(unsigned __int8 *)(v565 + a2 + 2) << 16;
                int v567 = *(unsigned __int8 *)(v565 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 24) |= ((v567 | v566 | *(unsigned __int8 *)(a2 + v565)) >> v564) & 0x7FFFF;
              unint64_t v624 = *a3 + 47;
              unint64_t v625 = v624 & 7;
              unint64_t v626 = v624 >> 3;
              if (v625 > 5)
              {
                int v628 = (*(unsigned __int8 *)(v626 + a2 + 3) << 24) | (*(unsigned __int8 *)(v626 + a2 + 2) << 16);
                int v627 = *(unsigned __int8 *)(v626 + a2 + 1) << 8;
              }
              else
              {
                int v627 = *(unsigned __int8 *)(v626 + a2 + 2) << 16;
                int v628 = *(unsigned __int8 *)(v626 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 28) |= ((v628 | v627 | *(unsigned __int8 *)(a2 + v626)) >> v625) & 0x7FFFF;
              unint64_t v688 = *a3 + 66;
              unint64_t v689 = v688 & 7;
              unint64_t v690 = v688 >> 3;
              if (v689 > 5)
              {
                int v692 = (*(unsigned __int8 *)(v690 + a2 + 3) << 24) | (*(unsigned __int8 *)(v690 + a2 + 2) << 16);
                int v691 = *(unsigned __int8 *)(v690 + a2 + 1) << 8;
              }
              else
              {
                int v691 = *(unsigned __int8 *)(v690 + a2 + 2) << 16;
                int v692 = *(unsigned __int8 *)(v690 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 32) |= ((v692 | v691 | *(unsigned __int8 *)(a2 + v690)) >> v689) & 0x7FFFF;
              unint64_t v747 = *a3 + 85;
              unint64_t v748 = v747 & 7;
              unint64_t v749 = v747 >> 3;
              if (v748 > 5)
              {
                int v751 = (*(unsigned __int8 *)(v749 + a2 + 3) << 24) | (*(unsigned __int8 *)(v749 + a2 + 2) << 16);
                int v750 = *(unsigned __int8 *)(v749 + a2 + 1) << 8;
              }
              else
              {
                int v750 = *(unsigned __int8 *)(v749 + a2 + 2) << 16;
                int v751 = *(unsigned __int8 *)(v749 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 36) |= ((v751 | v750 | *(unsigned __int8 *)(a2 + v749)) >> v748) & 0x7FFFF;
              unint64_t v810 = *a3 & 7;
              unint64_t v811 = (unint64_t)(*a3 + 104) >> 3;
              if (v810 > 5)
              {
                int v813 = (*(unsigned __int8 *)(v811 + a2 + 3) << 24) | (*(unsigned __int8 *)(v811 + a2 + 2) << 16);
                int v812 = *(unsigned __int8 *)(v811 + a2 + 1) << 8;
              }
              else
              {
                int v812 = *(unsigned __int8 *)(v811 + a2 + 2) << 16;
                int v813 = *(unsigned __int8 *)(v811 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 40) |= ((v813 | v812 | *(unsigned __int8 *)(a2 + v811)) >> v810) & 0x7FFFF;
              unint64_t v866 = *a3 + 123;
              unint64_t v867 = v866 & 7;
              unint64_t v868 = v866 >> 3;
              if (v867 > 5)
              {
                int v870 = (*(unsigned __int8 *)(v868 + a2 + 3) << 24) | (*(unsigned __int8 *)(v868 + a2 + 2) << 16);
                int v869 = *(unsigned __int8 *)(v868 + a2 + 1) << 8;
              }
              else
              {
                int v869 = *(unsigned __int8 *)(v868 + a2 + 2) << 16;
                int v870 = *(unsigned __int8 *)(v868 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 44) |= ((v870 | v869 | *(unsigned __int8 *)(a2 + v868)) >> v867) & 0x7FFFF;
              unint64_t v918 = (*(unsigned char *)a3 - 114) & 7;
              unint64_t v919 = (unint64_t)(*a3 + 142) >> 3;
              if (v918 > 1) {
                unsigned int v920 = (*(unsigned __int8 *)(a2 + v919 + 2) << 16) | (*(unsigned __int8 *)(a2 + v919 + 1) << 8) | *(unsigned __int8 *)(a2 + v919);
              }
              else {
                unsigned int v920 = *(unsigned __int16 *)(a2 + v919);
              }
              *(_WORD *)(result + 48) |= (v920 >> v918) & 0x7FFF;
              unint64_t v966 = (*(unsigned char *)a3 - 99) & 7;
              unint64_t v967 = (unint64_t)(*a3 + 157) >> 3;
              if (v966 > 4)
              {
                int v969 = (*(unsigned __int8 *)(v967 + a2 + 3) << 24) | (*(unsigned __int8 *)(v967 + a2 + 2) << 16);
                int v968 = *(unsigned __int8 *)(v967 + a2 + 1) << 8;
              }
              else
              {
                int v968 = *(unsigned __int8 *)(v967 + a2 + 2) << 16;
                int v969 = *(unsigned __int8 *)(v967 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 52) |= ((v969 | v968 | *(unsigned __int8 *)(a2 + v967)) >> v966) & 0xFFFFF;
              unint64_t v1006 = (*(unsigned char *)a3 - 79) & 7;
              unint64_t v1007 = (unint64_t)(*a3 + 177) >> 3;
              if (v1006 > 4)
              {
                int v1009 = (*(unsigned __int8 *)(v1007 + a2 + 3) << 24) | (*(unsigned __int8 *)(v1007 + a2 + 2) << 16);
                int v1008 = *(unsigned __int8 *)(v1007 + a2 + 1) << 8;
              }
              else
              {
                int v1008 = *(unsigned __int8 *)(v1007 + a2 + 2) << 16;
                int v1009 = *(unsigned __int8 *)(v1007 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 56) |= ((v1009 | v1008 | *(unsigned __int8 *)(a2 + v1007)) >> v1006) & 0xFFFFF;
              unint64_t v1038 = (*(unsigned char *)a3 - 59) & 7;
              unint64_t v1039 = (unint64_t)(*a3 + 197) >> 3;
              if (v1038 > 4)
              {
                int v1041 = (*(unsigned __int8 *)(v1039 + a2 + 3) << 24) | (*(unsigned __int8 *)(v1039 + a2 + 2) << 16);
                int v1040 = *(unsigned __int8 *)(v1039 + a2 + 1) << 8;
              }
              else
              {
                int v1040 = *(unsigned __int8 *)(v1039 + a2 + 2) << 16;
                int v1041 = *(unsigned __int8 *)(v1039 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 60) |= ((v1041 | v1040 | *(unsigned __int8 *)(a2 + v1039)) >> v1038) & 0xFFFFF;
              unint64_t v1062 = (*(unsigned char *)a3 - 39) & 7;
              unint64_t v1063 = (unint64_t)(*a3 + 217) >> 3;
              if (v1062 > 4)
              {
                int v1065 = (*(unsigned __int8 *)(v1063 + a2 + 3) << 24) | (*(unsigned __int8 *)(v1063 + a2 + 2) << 16);
                int v1064 = *(unsigned __int8 *)(v1063 + a2 + 1) << 8;
              }
              else
              {
                int v1064 = *(unsigned __int8 *)(v1063 + a2 + 2) << 16;
                int v1065 = *(unsigned __int8 *)(v1063 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 64) |= ((v1065 | v1064 | *(unsigned __int8 *)(a2 + v1063)) >> v1062) & 0xFFFFF;
              unint64_t v1086 = (*(unsigned char *)a3 - 19) & 7;
              unint64_t v1087 = (unint64_t)(*a3 + 237) >> 3;
              if (v1086 > 4)
              {
                int v1089 = (*(unsigned __int8 *)(v1087 + a2 + 3) << 24) | (*(unsigned __int8 *)(v1087 + a2 + 2) << 16);
                int v1088 = *(unsigned __int8 *)(v1087 + a2 + 1) << 8;
              }
              else
              {
                int v1088 = *(unsigned __int8 *)(v1087 + a2 + 2) << 16;
                int v1089 = *(unsigned __int8 *)(v1087 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 68) |= ((v1089 | v1088 | *(unsigned __int8 *)(a2 + v1087)) >> v1086) & 0xFFFFF;
              unint64_t v1109 = *a3 + 257;
              unint64_t v1110 = v1109 & 7;
              unint64_t v1111 = v1109 >> 3;
              if (v1110 > 4)
              {
                int v1113 = (*(unsigned __int8 *)(v1111 + a2 + 3) << 24) | (*(unsigned __int8 *)(v1111 + a2 + 2) << 16);
                int v1112 = *(unsigned __int8 *)(v1111 + a2 + 1) << 8;
              }
              else
              {
                int v1112 = *(unsigned __int8 *)(v1111 + a2 + 2) << 16;
                int v1113 = *(unsigned __int8 *)(v1111 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 72) |= ((v1113 | v1112 | *(unsigned __int8 *)(a2 + v1111)) >> v1110) & 0xFFFFF;
              unint64_t v1131 = *a3 + 277;
              unint64_t v1132 = v1131 & 7;
              unint64_t v1133 = v1131 >> 3;
              if (v1132 > 4)
              {
                int v1135 = (*(unsigned __int8 *)(v1133 + a2 + 3) << 24) | (*(unsigned __int8 *)(v1133 + a2 + 2) << 16);
                int v1134 = *(unsigned __int8 *)(v1133 + a2 + 1) << 8;
              }
              else
              {
                int v1134 = *(unsigned __int8 *)(v1133 + a2 + 2) << 16;
                int v1135 = *(unsigned __int8 *)(v1133 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 76) |= ((v1135 | v1134 | *(unsigned __int8 *)(a2 + v1133)) >> v1132) & 0xFFFFF;
              uint64_t v22 = 297;
              goto LABEL_1232;
            case 8:
              *(_DWORD *)(result + 16) = 9;
              unint64_t v363 = *a3 + 9;
              unint64_t v364 = v363 >> 3;
              unint64_t v365 = v363 & 7;
              if (v365) {
                unsigned int v366 = ((*(unsigned __int8 *)(a2 + v364 + 2) << 16) | (*(unsigned __int8 *)(a2 + v364 + 1) << 8) | *(unsigned __int8 *)(a2 + v364)) >> v365;
              }
              else {
                LOWORD(v366) = *(_WORD *)(a2 + v364);
              }
              uint64_t v1264 = *(void *)(result + 20) | (unsigned __int16)v366;
              *(void *)(result + 20) = v1264;
              unint64_t v1265 = *a3 + 25;
              unint64_t v1266 = v1265 >> 3;
              unint64_t v1267 = v1265 & 7;
              if (v1267) {
                unsigned int v1268 = ((*(unsigned __int8 *)(a2 + v1266 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1266 + 1) << 8) | *(unsigned __int8 *)(a2 + v1266)) >> v1267;
              }
              else {
                unsigned int v1268 = *(unsigned __int16 *)(a2 + v1266);
              }
              uint64_t v1318 = v1264 | (v1268 << 16);
              *(void *)(result + 20) = v1318;
              *(void *)(result + 20) = v1318 | ((unint64_t)((((*(unsigned __int8 *)(a2
                                                                                           + ((unint64_t)(*a3 + 41) >> 3)
                                                                                           + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 41) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 41) >> 3))) >> ((*(unsigned char *)a3 + 41) & 7)) & 0x1FFFF) << 32);
              int v1319 = *(_DWORD *)(result + 32);
              *(_DWORD *)(result + 28) |= (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 58) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 58) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 58) >> 3))) >> ((*(unsigned char *)a3 + 58) & 7)) & 0x1FFFF;
              *(_DWORD *)(result + 32) = (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 75) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 75) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 75) >> 3))) >> ((*(unsigned char *)a3 + 75) & 7)) & 0x1FFFF | v1319;
              unint64_t v1320 = *a3 + 92;
              unint64_t v1321 = v1320 & 7;
              unint64_t v1322 = v1320 >> 3;
              if (v1321 > 3)
              {
                int v1324 = (*(unsigned __int8 *)(v1322 + a2 + 3) << 24) | (*(unsigned __int8 *)(v1322 + a2 + 2) << 16);
                int v1323 = *(unsigned __int8 *)(v1322 + a2 + 1) << 8;
              }
              else
              {
                int v1323 = *(unsigned __int8 *)(v1322 + a2 + 2) << 16;
                int v1324 = *(unsigned __int8 *)(v1322 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 36) |= ((v1324 | v1323 | *(unsigned __int8 *)(a2 + v1322)) >> v1321) & 0x1FFFFF;
              uint64_t v22 = 113;
              goto LABEL_1232;
            case 9:
              *(_DWORD *)(result + 16) = 10;
              int v367 = (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 9) >> 3)) >> ((*(unsigned char *)a3 + 9) & 7)) & 1 | *(_DWORD *)(result + 20);
              *(_DWORD *)(result + 20) = v367;
              unint64_t v368 = *a3 + 10;
              unint64_t v369 = v368 & 7;
              unint64_t v370 = v368 >> 3;
              if (v369 > 1) {
                unsigned int v371 = (*(unsigned __int8 *)(a2 + v370 + 2) << 16) | (*(unsigned __int8 *)(a2 + v370 + 1) << 8) | *(unsigned __int8 *)(a2 + v370);
              }
              else {
                unsigned int v371 = *(unsigned __int16 *)(a2 + v370);
              }
              int v568 = (2 * ((v371 >> v369) & 0x7FFF)) | v367;
              *(_DWORD *)(result + 20) = v568;
              unint64_t v569 = *a3 + 25;
              unint64_t v570 = v569 & 7;
              unint64_t v571 = v569 >> 3;
              if (v570 > 1) {
                unsigned int v572 = (*(unsigned __int8 *)(a2 + v571 + 2) << 16) | (*(unsigned __int8 *)(a2 + v571 + 1) << 8) | *(unsigned __int8 *)(a2 + v571);
              }
              else {
                unsigned int v572 = *(unsigned __int16 *)(a2 + v571);
              }
              *(_DWORD *)(result + 20) = (((v572 >> v570) & 0x7FFF) << 16) | v568;
              unint64_t v629 = *a3 & 7;
              unint64_t v630 = (unint64_t)(*a3 + 40) >> 3;
              if (v629 > 1) {
                unsigned int v631 = (*(unsigned __int8 *)(a2 + v630 + 2) << 16) | (*(unsigned __int8 *)(a2 + v630 + 1) << 8) | *(unsigned __int8 *)(a2 + v630);
              }
              else {
                unsigned int v631 = *(unsigned __int16 *)(a2 + v630);
              }
              *(_WORD *)(result + 24) |= (v631 >> v629) & 0x7FFF;
              unint64_t v693 = *a3 + 55;
              unint64_t v694 = v693 & 7;
              unint64_t v695 = v693 >> 3;
              if (v694 > 1) {
                unsigned int v696 = (*(unsigned __int8 *)(a2 + v695 + 2) << 16) | (*(unsigned __int8 *)(a2 + v695 + 1) << 8) | *(unsigned __int8 *)(a2 + v695);
              }
              else {
                unsigned int v696 = *(unsigned __int16 *)(a2 + v695);
              }
              *(_WORD *)(result + 26) |= (v696 >> v694) & 0x7FFF;
              unint64_t v752 = *a3 + 70;
              unint64_t v753 = v752 & 7;
              unint64_t v754 = v752 >> 3;
              if (v753 > 1) {
                unsigned int v755 = (*(unsigned __int8 *)(a2 + v754 + 2) << 16) | (*(unsigned __int8 *)(a2 + v754 + 1) << 8) | *(unsigned __int8 *)(a2 + v754);
              }
              else {
                unsigned int v755 = *(unsigned __int16 *)(a2 + v754);
              }
              *(_WORD *)(result + 28) |= (v755 >> v753) & 0x7FFF;
              unint64_t v814 = *a3 + 85;
              unint64_t v815 = v814 & 7;
              unint64_t v816 = v814 >> 3;
              if (v815 > 1) {
                unsigned int v817 = (*(unsigned __int8 *)(a2 + v816 + 2) << 16) | (*(unsigned __int8 *)(a2 + v816 + 1) << 8) | *(unsigned __int8 *)(a2 + v816);
              }
              else {
                unsigned int v817 = *(unsigned __int16 *)(a2 + v816);
              }
              *(_WORD *)(result + 30) |= (v817 >> v815) & 0x7FFF;
              unint64_t v871 = *a3 + 100;
              unint64_t v872 = v871 & 7;
              unint64_t v873 = v871 >> 3;
              if (v872 > 1) {
                unsigned int v874 = (*(unsigned __int8 *)(a2 + v873 + 2) << 16) | (*(unsigned __int8 *)(a2 + v873 + 1) << 8) | *(unsigned __int8 *)(a2 + v873);
              }
              else {
                unsigned int v874 = *(unsigned __int16 *)(a2 + v873);
              }
              *(_WORD *)(result + 32) |= (v874 >> v872) & 0x7FFF;
              unint64_t v921 = *a3 + 115;
              unint64_t v922 = v921 & 7;
              unint64_t v923 = v921 >> 3;
              if (v922 > 1) {
                unsigned int v924 = (*(unsigned __int8 *)(a2 + v923 + 2) << 16) | (*(unsigned __int8 *)(a2 + v923 + 1) << 8) | *(unsigned __int8 *)(a2 + v923);
              }
              else {
                unsigned int v924 = *(unsigned __int16 *)(a2 + v923);
              }
              *(_WORD *)(result + 34) |= (v924 >> v922) & 0x7FFF;
              unint64_t v970 = (*(unsigned char *)a3 - 126) & 7;
              unint64_t v971 = (unint64_t)(*a3 + 130) >> 3;
              if (v970 > 2) {
                unsigned int v972 = (*(unsigned __int8 *)(a2 + v971 + 2) << 16) | (*(unsigned __int8 *)(a2 + v971 + 1) << 8) | *(unsigned __int8 *)(a2 + v971);
              }
              else {
                unsigned int v972 = *(unsigned __int16 *)(a2 + v971);
              }
              *(_WORD *)(result + 36) |= (v972 >> v970) & 0x3FFF;
              unint64_t v1010 = *a3 & 7;
              unint64_t v1011 = (unint64_t)(*a3 + 144) >> 3;
              if (v1010 > 2) {
                unsigned int v1012 = (*(unsigned __int8 *)(a2 + v1011 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1011 + 1) << 8) | *(unsigned __int8 *)(a2 + v1011);
              }
              else {
                unsigned int v1012 = *(unsigned __int16 *)(a2 + v1011);
              }
              *(_WORD *)(result + 38) |= (v1012 >> v1010) & 0x3FFF;
              unint64_t v1042 = (*(unsigned char *)a3 - 98) & 7;
              unint64_t v1043 = (unint64_t)(*a3 + 158) >> 3;
              if (v1042 > 2) {
                unsigned int v1044 = (*(unsigned __int8 *)(a2 + v1043 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1043 + 1) << 8) | *(unsigned __int8 *)(a2 + v1043);
              }
              else {
                unsigned int v1044 = *(unsigned __int16 *)(a2 + v1043);
              }
              *(_WORD *)(result + 40) |= (v1044 >> v1042) & 0x3FFF;
              unint64_t v1066 = (*(unsigned char *)a3 - 84) & 7;
              unint64_t v1067 = (unint64_t)(*a3 + 172) >> 3;
              if (v1066 > 2) {
                unsigned int v1068 = (*(unsigned __int8 *)(a2 + v1067 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1067 + 1) << 8) | *(unsigned __int8 *)(a2 + v1067);
              }
              else {
                unsigned int v1068 = *(unsigned __int16 *)(a2 + v1067);
              }
              *(_WORD *)(result + 42) |= (v1068 >> v1066) & 0x3FFF;
              unint64_t v1090 = (*(unsigned char *)a3 - 70) & 7;
              unint64_t v1091 = (unint64_t)(*a3 + 186) >> 3;
              if (v1090 > 2) {
                unsigned int v1092 = (*(unsigned __int8 *)(a2 + v1091 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1091 + 1) << 8) | *(unsigned __int8 *)(a2 + v1091);
              }
              else {
                unsigned int v1092 = *(unsigned __int16 *)(a2 + v1091);
              }
              *(_WORD *)(result + 44) |= (v1092 >> v1090) & 0x3FFF;
              unint64_t v1114 = *a3 & 7;
              unint64_t v1115 = (unint64_t)(*a3 + 200) >> 3;
              if (v1114 > 2) {
                unsigned int v1116 = (*(unsigned __int8 *)(a2 + v1115 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1115 + 1) << 8) | *(unsigned __int8 *)(a2 + v1115);
              }
              else {
                unsigned int v1116 = *(unsigned __int16 *)(a2 + v1115);
              }
              *(_WORD *)(result + 46) |= (v1116 >> v1114) & 0x3FFF;
              unint64_t v1136 = (*(unsigned char *)a3 - 42) & 7;
              unint64_t v1137 = (unint64_t)(*a3 + 214) >> 3;
              if (v1136 > 2) {
                unsigned int v1138 = (*(unsigned __int8 *)(a2 + v1137 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1137 + 1) << 8) | *(unsigned __int8 *)(a2 + v1137);
              }
              else {
                unsigned int v1138 = *(unsigned __int16 *)(a2 + v1137);
              }
              *(_WORD *)(result + 48) |= (v1138 >> v1136) & 0x3FFF;
              unint64_t v1149 = (*(unsigned char *)a3 - 28) & 7;
              unint64_t v1150 = (unint64_t)(*a3 + 228) >> 3;
              if (v1149 > 2) {
                unsigned int v1151 = (*(unsigned __int8 *)(a2 + v1150 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1150 + 1) << 8) | *(unsigned __int8 *)(a2 + v1150);
              }
              else {
                unsigned int v1151 = *(unsigned __int16 *)(a2 + v1150);
              }
              *(_WORD *)(result + 50) |= (v1151 >> v1149) & 0x3FFF;
              unint64_t v1158 = (*(unsigned char *)a3 - 14) & 7;
              unint64_t v1159 = (unint64_t)(*a3 + 242) >> 3;
              if (v1158 > 2) {
                unsigned int v1160 = (*(unsigned __int8 *)(a2 + v1159 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1159 + 1) << 8) | *(unsigned __int8 *)(a2 + v1159);
              }
              else {
                unsigned int v1160 = *(unsigned __int16 *)(a2 + v1159);
              }
              *(_WORD *)(result + 52) |= (v1160 >> v1158) & 0x3FFF;
              unint64_t v1167 = *a3 & 7;
              unint64_t v1168 = (unint64_t)(*a3 + 256) >> 3;
              if (v1167 > 2) {
                unsigned int v1169 = (*(unsigned __int8 *)(a2 + v1168 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1168 + 1) << 8) | *(unsigned __int8 *)(a2 + v1168);
              }
              else {
                unsigned int v1169 = *(unsigned __int16 *)(a2 + v1168);
              }
              *(_WORD *)(result + 54) |= (v1169 >> v1167) & 0x3FFF;
              unint64_t v1178 = *a3 + 270;
              unint64_t v1179 = v1178 & 7;
              unint64_t v1180 = v1178 >> 3;
              if (v1179 > 3) {
                unsigned int v1181 = (*(unsigned __int8 *)(a2 + v1180 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1180 + 1) << 8) | *(unsigned __int8 *)(a2 + v1180);
              }
              else {
                unsigned int v1181 = *(unsigned __int16 *)(a2 + v1180);
              }
              *(_WORD *)(result + 56) |= (v1181 >> v1179) & 0x1FFF;
              unint64_t v1190 = *a3 + 283;
              unint64_t v1191 = v1190 & 7;
              unint64_t v1192 = v1190 >> 3;
              if (v1191 > 3) {
                unsigned int v1193 = (*(unsigned __int8 *)(a2 + v1192 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1192 + 1) << 8) | *(unsigned __int8 *)(a2 + v1192);
              }
              else {
                unsigned int v1193 = *(unsigned __int16 *)(a2 + v1192);
              }
              *(_WORD *)(result + 58) |= (v1193 >> v1191) & 0x1FFF;
              unint64_t v1198 = *a3 & 7;
              unint64_t v1199 = (unint64_t)(*a3 + 296) >> 3;
              if (v1198 > 3) {
                unsigned int v1200 = (*(unsigned __int8 *)(a2 + v1199 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1199 + 1) << 8) | *(unsigned __int8 *)(a2 + v1199);
              }
              else {
                unsigned int v1200 = *(unsigned __int16 *)(a2 + v1199);
              }
              *(_WORD *)(result + 60) |= (v1200 >> v1198) & 0x1FFF;
              unint64_t v1205 = *a3 + 309;
              unint64_t v1206 = v1205 & 7;
              unint64_t v1207 = v1205 >> 3;
              if (v1206 > 2) {
                unsigned int v1208 = (*(unsigned __int8 *)(a2 + v1207 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1207 + 1) << 8) | *(unsigned __int8 *)(a2 + v1207);
              }
              else {
                unsigned int v1208 = *(unsigned __int16 *)(a2 + v1207);
              }
              *(_WORD *)(result + 62) |= (v1208 >> v1206) & 0x3FFF;
              unint64_t v1213 = *a3 + 323;
              unint64_t v1214 = v1213 & 7;
              unint64_t v1215 = v1213 >> 3;
              if (v1214 > 2) {
                unsigned int v1216 = (*(unsigned __int8 *)(a2 + v1215 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1215 + 1) << 8) | *(unsigned __int8 *)(a2 + v1215);
              }
              else {
                unsigned int v1216 = *(unsigned __int16 *)(a2 + v1215);
              }
              *(_WORD *)(result + 64) |= (v1216 >> v1214) & 0x3FFF;
              unint64_t v1217 = *a3 + 337;
              unint64_t v1218 = v1217 & 7;
              unint64_t v1219 = v1217 >> 3;
              if (v1218 > 2) {
                unsigned int v1220 = (*(unsigned __int8 *)(a2 + v1219 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1219 + 1) << 8) | *(unsigned __int8 *)(a2 + v1219);
              }
              else {
                unsigned int v1220 = *(unsigned __int16 *)(a2 + v1219);
              }
              *(_WORD *)(result + 66) |= (v1220 >> v1218) & 0x3FFF;
              unint64_t v1221 = *a3 + 351;
              unint64_t v1222 = v1221 & 7;
              unint64_t v1223 = v1221 >> 3;
              if (v1222 > 3) {
                unsigned int v1224 = (*(unsigned __int8 *)(a2 + v1223 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1223 + 1) << 8) | *(unsigned __int8 *)(a2 + v1223);
              }
              else {
                unsigned int v1224 = *(unsigned __int16 *)(a2 + v1223);
              }
              *(_WORD *)(result + 68) |= (v1224 >> v1222) & 0x1FFF;
              unint64_t v1225 = *a3 + 364;
              unint64_t v1226 = v1225 & 7;
              unint64_t v1227 = v1225 >> 3;
              if (v1226 > 3) {
                unsigned int v1228 = (*(unsigned __int8 *)(a2 + v1227 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1227 + 1) << 8) | *(unsigned __int8 *)(a2 + v1227);
              }
              else {
                unsigned int v1228 = *(unsigned __int16 *)(a2 + v1227);
              }
              *(_WORD *)(result + 70) |= (v1228 >> v1226) & 0x1FFF;
              unint64_t v1229 = *a3 + 377;
              unint64_t v1230 = v1229 & 7;
              unint64_t v1231 = v1229 >> 3;
              if (v1230 > 3) {
                unsigned int v1232 = (*(unsigned __int8 *)(a2 + v1231 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1231 + 1) << 8) | *(unsigned __int8 *)(a2 + v1231);
              }
              else {
                unsigned int v1232 = *(unsigned __int16 *)(a2 + v1231);
              }
              *(_WORD *)(result + 72) |= (v1232 >> v1230) & 0x1FFF;
              unint64_t v1233 = (*(unsigned char *)a3 - 122) & 7;
              unint64_t v1234 = (unint64_t)(*a3 + 390) >> 3;
              if (v1233 > 3) {
                unsigned int v1235 = (*(unsigned __int8 *)(a2 + v1234 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1234 + 1) << 8) | *(unsigned __int8 *)(a2 + v1234);
              }
              else {
                unsigned int v1235 = *(unsigned __int16 *)(a2 + v1234);
              }
              *(_WORD *)(result + 74) |= (v1235 >> v1233) & 0x1FFF;
              unint64_t v1236 = (*(unsigned char *)a3 - 109) & 7;
              unint64_t v1237 = (unint64_t)(*a3 + 403) >> 3;
              if (v1236 > 3) {
                unsigned int v1238 = (*(unsigned __int8 *)(a2 + v1237 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1237 + 1) << 8) | *(unsigned __int8 *)(a2 + v1237);
              }
              else {
                unsigned int v1238 = *(unsigned __int16 *)(a2 + v1237);
              }
              *(_WORD *)(result + 76) |= (v1238 >> v1236) & 0x1FFF;
              unint64_t v1239 = *a3 & 7;
              unint64_t v1240 = (unint64_t)(*a3 + 416) >> 3;
              if (v1239 > 3) {
                unsigned int v1241 = (*(unsigned __int8 *)(a2 + v1240 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1240 + 1) << 8) | *(unsigned __int8 *)(a2 + v1240);
              }
              else {
                unsigned int v1241 = *(unsigned __int16 *)(a2 + v1240);
              }
              *(_WORD *)(result + 78) |= (v1241 >> v1239) & 0x1FFF;
              unint64_t v1242 = (*(unsigned char *)a3 - 83) & 7;
              unint64_t v1243 = (unint64_t)(*a3 + 429) >> 3;
              if (v1242 > 3) {
                unsigned int v1244 = (*(unsigned __int8 *)(a2 + v1243 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1243 + 1) << 8) | *(unsigned __int8 *)(a2 + v1243);
              }
              else {
                unsigned int v1244 = *(unsigned __int16 *)(a2 + v1243);
              }
              *(_WORD *)(result + 80) |= (v1244 >> v1242) & 0x1FFF;
              unint64_t v1245 = (*(unsigned char *)a3 - 70) & 7;
              unint64_t v1246 = (unint64_t)(*a3 + 442) >> 3;
              if (v1245 > 3) {
                unsigned int v1247 = (*(unsigned __int8 *)(a2 + v1246 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1246 + 1) << 8) | *(unsigned __int8 *)(a2 + v1246);
              }
              else {
                unsigned int v1247 = *(unsigned __int16 *)(a2 + v1246);
              }
              *(_WORD *)(result + 82) |= (v1247 >> v1245) & 0x1FFF;
              uint64_t v22 = 455;
              goto LABEL_1232;
            case 0xA:
              *(_DWORD *)(result + 16) = 11;
              unint64_t v372 = *a3 + 9;
              unint64_t v373 = v372 >> 3;
              unint64_t v374 = v372 & 7;
              if (v374)
              {
                int v375 = (unsigned __int8 *)(a2 + v373);
                uint64_t v376 = ((((unint64_t)v375[4] << 32) | ((unint64_t)v375[3] << 24) | ((unint64_t)v375[2] << 16) | ((unint64_t)v375[1] << 8) | *v375) >> v374);
              }
              else
              {
                uint64_t v376 = *(unsigned int *)(a2 + v373);
              }
              __int16 v1269 = *(_WORD *)(result + 28);
              unint64_t v1270 = *(void *)(result + 20) & 0xFFFFFFFF00000000 | v376 | *(void *)(result + 20);
              *(void *)(result + 20) = v1270;
              unint64_t v1271 = *a3 + 41;
              unint64_t v1272 = v1271 >> 3;
              unint64_t v1273 = v1271 & 7;
              if (v1273)
              {
                v1274 = (unsigned __int8 *)(a2 + v1272);
                uint64_t v1275 = ((((unint64_t)v1274[4] << 32) | ((unint64_t)v1274[3] << 24) | ((unint64_t)v1274[2] << 16) | ((unint64_t)v1274[1] << 8) | *v1274) >> v1273);
              }
              else
              {
                uint64_t v1275 = *(unsigned int *)(a2 + v1272);
              }
              unint64_t v1325 = v1270 & 0xFFFFFFFF00000000 | (v1275 << 32) | v1270;
              *(_WORD *)(result + 28) = v1269;
              *(void *)(result + 20) = v1325;
              unint64_t v1326 = *a3 + 73;
              unint64_t v1327 = v1326 & 7;
              unint64_t v1328 = v1326 >> 3;
              if (v1327 > 1) {
                unsigned int v1329 = (*(unsigned __int8 *)(a2 + v1328 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1328 + 1) << 8) | *(unsigned __int8 *)(a2 + v1328);
              }
              else {
                unsigned int v1329 = *(unsigned __int16 *)(a2 + v1328);
              }
              *(void *)(result + 20) = v1325;
              *(_WORD *)(result + 28) = v1269 & 0x8000 | (v1269 | (v1329 >> v1327)) & 0x7FFF;
              unint64_t v1330 = *a3 & 7;
              unint64_t v1331 = (unint64_t)(*a3 + 88) >> 3;
              if (v1330 > 1) {
                unsigned int v1332 = (*(unsigned __int8 *)(a2 + v1331 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1331 + 1) << 8) | *(unsigned __int8 *)(a2 + v1331);
              }
              else {
                unsigned int v1332 = *(unsigned __int16 *)(a2 + v1331);
              }
              *(_WORD *)(result + 30) |= (v1332 >> v1330) & 0x7FFF;
              unint64_t v1333 = *a3 + 103;
              unint64_t v1334 = v1333 & 7;
              unint64_t v1335 = v1333 >> 3;
              if (v1334 > 1) {
                unsigned int v1336 = (*(unsigned __int8 *)(a2 + v1335 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1335 + 1) << 8) | *(unsigned __int8 *)(a2 + v1335);
              }
              else {
                unsigned int v1336 = *(unsigned __int16 *)(a2 + v1335);
              }
              *(_WORD *)(result + 32) |= (v1336 >> v1334) & 0x7FFF;
              unint64_t v1337 = *a3 + 118;
              unint64_t v1338 = v1337 & 7;
              unint64_t v1339 = v1337 >> 3;
              if (v1338 > 1) {
                unsigned int v1340 = (*(unsigned __int8 *)(a2 + v1339 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1339 + 1) << 8) | *(unsigned __int8 *)(a2 + v1339);
              }
              else {
                unsigned int v1340 = *(unsigned __int16 *)(a2 + v1339);
              }
              *(_WORD *)(result + 34) |= (v1340 >> v1338) & 0x7FFF;
              unint64_t v1341 = (unint64_t)(*a3 + 133) >> 3;
              if (((*(unsigned char *)a3 - 123) & 7) != 0) {
                unsigned int v1342 = ((*(unsigned __int8 *)(a2 + v1341 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1341 + 1) << 8) | *(unsigned __int8 *)(a2 + v1341)) >> ((*(unsigned char *)a3 - 123) & 7);
              }
              else {
                LOWORD(v1342) = *(_WORD *)(a2 + v1341);
              }
              *(_WORD *)(result + 36) |= v1342;
              uint64_t v22 = 149;
              goto LABEL_1232;
            case 0xB:
              *(_DWORD *)(result + 16) = 12;
              unint64_t v377 = *a3 + 9;
              unint64_t v378 = v377 & 7;
              unint64_t v379 = v377 >> 3;
              if (v378 > 1) {
                unsigned int v380 = (*(unsigned __int8 *)(a2 + v379 + 2) << 16) | (*(unsigned __int8 *)(a2 + v379 + 1) << 8) | *(unsigned __int8 *)(a2 + v379);
              }
              else {
                unsigned int v380 = *(unsigned __int16 *)(a2 + v379);
              }
              *(_WORD *)(result + 20) |= (v380 >> v378) & 0x7FFF;
              unint64_t v573 = *a3 & 7;
              unint64_t v574 = (unint64_t)(*a3 + 24) >> 3;
              if (v573 > 1) {
                unsigned int v575 = (*(unsigned __int8 *)(a2 + v574 + 2) << 16) | (*(unsigned __int8 *)(a2 + v574 + 1) << 8) | *(unsigned __int8 *)(a2 + v574);
              }
              else {
                unsigned int v575 = *(unsigned __int16 *)(a2 + v574);
              }
              *(_WORD *)(result + 22) |= (v575 >> v573) & 0x7FFF;
              unint64_t v632 = *a3 + 39;
              unint64_t v633 = v632 & 7;
              unint64_t v634 = v632 >> 3;
              if (v633 > 1) {
                unsigned int v635 = (*(unsigned __int8 *)(a2 + v634 + 2) << 16) | (*(unsigned __int8 *)(a2 + v634 + 1) << 8) | *(unsigned __int8 *)(a2 + v634);
              }
              else {
                unsigned int v635 = *(unsigned __int16 *)(a2 + v634);
              }
              *(_WORD *)(result + 24) |= (v635 >> v633) & 0x7FFF;
              unint64_t v697 = *a3 + 54;
              unint64_t v698 = v697 & 7;
              unint64_t v699 = v697 >> 3;
              if (v698 > 1) {
                unsigned int v700 = (*(unsigned __int8 *)(a2 + v699 + 2) << 16) | (*(unsigned __int8 *)(a2 + v699 + 1) << 8) | *(unsigned __int8 *)(a2 + v699);
              }
              else {
                unsigned int v700 = *(unsigned __int16 *)(a2 + v699);
              }
              *(_WORD *)(result + 26) |= (v700 >> v698) & 0x7FFF;
              unint64_t v756 = *a3 + 69;
              *(_DWORD *)(result + 28) |= (((*(unsigned __int8 *)(a2 + (v756 >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + (v756 >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + (v756 >> 3))) >> (v756 & 7)) & 0x1FFFF;
              unint64_t v757 = *a3 + 86;
              unint64_t v758 = v757 & 7;
              unint64_t v759 = v757 >> 3;
              if (v758 == 7) {
                int v760 = *(_DWORD *)(a2 + v759) >> 7;
              }
              else {
                int v760 = ((*(unsigned __int8 *)(a2 + v759 + 2) << 16) | (*(unsigned __int8 *)(a2 + v759 + 1) << 8) | *(unsigned __int8 *)(a2 + v759)) >> v758;
              }
              *(_DWORD *)(result + 32) |= v760 & 0x3FFFF;
              uint64_t v818 = *a3 & 7;
              unint64_t v819 = (unint64_t)(*a3 + 104) >> 3;
              if (v818 == 7) {
                int v820 = *(_DWORD *)(a2 + v819) >> 7;
              }
              else {
                int v820 = ((*(unsigned __int8 *)(a2 + v819 + 2) << 16) | (*(unsigned __int8 *)(a2 + v819 + 1) << 8) | *(unsigned __int8 *)(a2 + v819)) >> v818;
              }
              *(_DWORD *)(result + 36) |= v820 & 0x3FFFF;
              unint64_t v875 = *a3 + 122;
              unint64_t v876 = v875 & 7;
              unint64_t v877 = v875 >> 3;
              if (v876 > 1) {
                unsigned int v878 = (*(unsigned __int8 *)(a2 + v877 + 2) << 16) | (*(unsigned __int8 *)(a2 + v877 + 1) << 8) | *(unsigned __int8 *)(a2 + v877);
              }
              else {
                unsigned int v878 = *(unsigned __int16 *)(a2 + v877);
              }
              *(_WORD *)(result + 40) |= (v878 >> v876) & 0x7FFF;
              unint64_t v925 = (*(unsigned char *)a3 - 119) & 7;
              unint64_t v926 = (unint64_t)(*a3 + 137) >> 3;
              if (v925 > 2) {
                unsigned int v927 = (*(unsigned __int8 *)(a2 + v926 + 2) << 16) | (*(unsigned __int8 *)(a2 + v926 + 1) << 8) | *(unsigned __int8 *)(a2 + v926);
              }
              else {
                unsigned int v927 = *(unsigned __int16 *)(a2 + v926);
              }
              *(_WORD *)(result + 42) |= (v927 >> v925) & 0x3FFF;
              unint64_t v973 = (*(unsigned char *)a3 - 105) & 7;
              unint64_t v974 = (unint64_t)(*a3 + 151) >> 3;
              if (v973 > 3) {
                unsigned int v975 = (*(unsigned __int8 *)(a2 + v974 + 2) << 16) | (*(unsigned __int8 *)(a2 + v974 + 1) << 8) | *(unsigned __int8 *)(a2 + v974);
              }
              else {
                unsigned int v975 = *(unsigned __int16 *)(a2 + v974);
              }
              *(_WORD *)(result + 44) |= (v975 >> v973) & 0x1FFF;
              unint64_t v1013 = (unint64_t)(*a3 + 164) >> 3;
              if (((*(unsigned char *)a3 - 92) & 7) != 0) {
                int v1014 = *(unsigned __int16 *)(a2 + v1013) >> ((*(unsigned char *)a3 - 92) & 7);
              }
              else {
                LOBYTE(v1014) = *(unsigned char *)(a2 + v1013);
              }
              *(unsigned char *)(result + 46) |= v1014;
              break;
            case 0xC:
              *(_DWORD *)(result + 16) = 13;
              unint64_t v381 = *a3 + 9;
              unint64_t v382 = v381 & 7;
              unint64_t v383 = v381 >> 3;
              if (v382 > 1) {
                unsigned int v384 = (*(unsigned __int8 *)(a2 + v383 + 2) << 16) | (*(unsigned __int8 *)(a2 + v383 + 1) << 8) | *(unsigned __int8 *)(a2 + v383);
              }
              else {
                unsigned int v384 = *(unsigned __int16 *)(a2 + v383);
              }
              *(_WORD *)(result + 20) |= (v384 >> v382) & 0x7FFF;
              unint64_t v576 = *a3 & 7;
              unint64_t v577 = (unint64_t)(*a3 + 24) >> 3;
              if (v576 > 1) {
                unsigned int v578 = (*(unsigned __int8 *)(a2 + v577 + 2) << 16) | (*(unsigned __int8 *)(a2 + v577 + 1) << 8) | *(unsigned __int8 *)(a2 + v577);
              }
              else {
                unsigned int v578 = *(unsigned __int16 *)(a2 + v577);
              }
              *(_WORD *)(result + 22) |= (v578 >> v576) & 0x7FFF;
              unint64_t v636 = *a3 + 39;
              unint64_t v637 = v636 & 7;
              unint64_t v638 = v636 >> 3;
              if (v637 > 1) {
                unsigned int v639 = (*(unsigned __int8 *)(a2 + v638 + 2) << 16) | (*(unsigned __int8 *)(a2 + v638 + 1) << 8) | *(unsigned __int8 *)(a2 + v638);
              }
              else {
                unsigned int v639 = *(unsigned __int16 *)(a2 + v638);
              }
              *(_WORD *)(result + 24) |= (v639 >> v637) & 0x7FFF;
              unint64_t v701 = *a3 + 54;
              unint64_t v702 = v701 & 7;
              unint64_t v703 = v701 >> 3;
              if (v702 == 7) {
                int v704 = *(_DWORD *)(a2 + v703) >> 7;
              }
              else {
                int v704 = ((*(unsigned __int8 *)(a2 + v703 + 2) << 16) | (*(unsigned __int8 *)(a2 + v703 + 1) << 8) | *(unsigned __int8 *)(a2 + v703)) >> v702;
              }
              *(_DWORD *)(result + 28) |= v704 & 0x3FFFF;
              uint64_t v761 = *a3 & 7;
              unint64_t v762 = (unint64_t)(*a3 + 72) >> 3;
              if (v761 == 7) {
                int v763 = *(_DWORD *)(a2 + v762) >> 7;
              }
              else {
                int v763 = ((*(unsigned __int8 *)(a2 + v762 + 2) << 16) | (*(unsigned __int8 *)(a2 + v762 + 1) << 8) | *(unsigned __int8 *)(a2 + v762)) >> v761;
              }
              int v821 = *(_DWORD *)(result + 36);
              *(_DWORD *)(result + 32) |= v763 & 0x3FFFF;
              *(_DWORD *)(result + 36) = (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 90) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 90) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 90) >> 3))) >> ((*(unsigned char *)a3 + 90) & 7)) & 0x1FFFF | v821;
              unint64_t v822 = *a3 + 107;
              unint64_t v823 = v822 >> 3;
              unint64_t v824 = v822 & 7;
              if (v824) {
                unsigned int v825 = ((*(unsigned __int8 *)(a2 + v823 + 2) << 16) | (*(unsigned __int8 *)(a2 + v823 + 1) << 8) | *(unsigned __int8 *)(a2 + v823)) >> v824;
              }
              else {
                LOWORD(v825) = *(_WORD *)(a2 + v823);
              }
              uint64_t v1292 = *(void *)(result + 40) | (unsigned __int16)v825;
              *(void *)(result + 40) = v1292;
              unint64_t v1293 = *a3 + 123;
              unint64_t v1294 = v1293 >> 3;
              unint64_t v1295 = v1293 & 7;
              if (v1295) {
                unsigned int v1296 = ((*(unsigned __int8 *)(a2 + v1294 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1294 + 1) << 8) | *(unsigned __int8 *)(a2 + v1294)) >> v1295;
              }
              else {
                unsigned int v1296 = *(unsigned __int16 *)(a2 + v1294);
              }
              uint64_t v1361 = v1292 | (v1296 << 16);
              *(void *)(result + 40) = v1361;
              *(void *)(result + 40) = v1361 | ((unint64_t)((((*(unsigned __int8 *)(a2
                                                                                           + ((unint64_t)(*a3 + 139) >> 3)
                                                                                           + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 139) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 139) >> 3))) >> ((*(unsigned char *)a3 - 117) & 7)) & 0x1FFFF) << 32);
              int v1362 = *(_DWORD *)(result + 52);
              *(_DWORD *)(result + 48) |= (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 156) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 156) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 156) >> 3))) >> ((*(unsigned char *)a3 - 100) & 7)) & 0x1FFFF;
              *(_DWORD *)(result + 52) = (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 173) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 173) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 173) >> 3))) >> ((*(unsigned char *)a3 - 83) & 7)) & 0x1FFFF | v1362;
              unsigned int v1363 = (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 190) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 190) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 190) >> 3))) >> ((*(unsigned char *)a3 - 66) & 7)) & 0x1FFFF | *(_DWORD *)(result + 56);
              *(_DWORD *)(result + 56) = v1363;
              unint64_t v1364 = (*(unsigned char *)a3 - 49) & 7;
              unint64_t v1365 = (unint64_t)(*a3 + 207) >> 3;
              if (v1364 > 1) {
                unsigned int v1366 = (*(unsigned __int8 *)(a2 + v1365 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1365 + 1) << 8) | *(unsigned __int8 *)(a2 + v1365);
              }
              else {
                unsigned int v1366 = *(unsigned __int16 *)(a2 + v1365);
              }
              *(_DWORD *)(result + 56) = v1363 | (v1366 >> v1364 << 17);
              uint64_t v22 = 222;
              goto LABEL_1232;
            case 0xD:
              *(_DWORD *)(result + 16) = 14;
              unint64_t v385 = *a3 + 9;
              unint64_t v386 = v385 & 7;
              unint64_t v387 = v385 >> 3;
              if (v386 > 1) {
                unsigned int v388 = (*(unsigned __int8 *)(a2 + v387 + 2) << 16) | (*(unsigned __int8 *)(a2 + v387 + 1) << 8) | *(unsigned __int8 *)(a2 + v387);
              }
              else {
                unsigned int v388 = *(unsigned __int16 *)(a2 + v387);
              }
              *(_WORD *)(result + 20) |= (v388 >> v386) & 0x7FFF;
              unint64_t v579 = *a3 & 7;
              unint64_t v580 = (unint64_t)(*a3 + 24) >> 3;
              if (v579 > 1) {
                unsigned int v581 = (*(unsigned __int8 *)(a2 + v580 + 2) << 16) | (*(unsigned __int8 *)(a2 + v580 + 1) << 8) | *(unsigned __int8 *)(a2 + v580);
              }
              else {
                unsigned int v581 = *(unsigned __int16 *)(a2 + v580);
              }
              *(_WORD *)(result + 22) |= (v581 >> v579) & 0x7FFF;
              unint64_t v640 = *a3 + 39;
              unint64_t v641 = v640 & 7;
              unint64_t v642 = v640 >> 3;
              if (v641 > 1) {
                unsigned int v643 = (*(unsigned __int8 *)(a2 + v642 + 2) << 16) | (*(unsigned __int8 *)(a2 + v642 + 1) << 8) | *(unsigned __int8 *)(a2 + v642);
              }
              else {
                unsigned int v643 = *(unsigned __int16 *)(a2 + v642);
              }
              *(_WORD *)(result + 24) |= (v643 >> v641) & 0x7FFF;
              unint64_t v705 = *a3 + 54;
              unint64_t v706 = v705 & 7;
              unint64_t v707 = v705 >> 3;
              if (v706 > 1) {
                unsigned int v708 = (*(unsigned __int8 *)(a2 + v707 + 2) << 16) | (*(unsigned __int8 *)(a2 + v707 + 1) << 8) | *(unsigned __int8 *)(a2 + v707);
              }
              else {
                unsigned int v708 = *(unsigned __int16 *)(a2 + v707);
              }
              uint64_t v764 = *(unsigned int *)(result + 36);
              *(_WORD *)(result + 26) |= (v708 >> v706) & 0x7FFF;
              int v765 = *(_DWORD *)(result + 32);
              *(_DWORD *)(result + 28) |= (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 69) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 69) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 69) >> 3))) >> ((*(unsigned char *)a3 + 69) & 7)) & 0x1FFFF;
              *(_DWORD *)(result + 32) = (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 86) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 86) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 86) >> 3))) >> ((*(unsigned char *)a3 + 86) & 7)) & 0x1FFFF | v765;
              unint64_t v766 = v764 | ((unint64_t)*(unsigned __int16 *)(result + 40) << 32);
              unsigned int v767 = (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 103) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 103) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 103) >> 3))) >> ((*(unsigned char *)a3 + 103) & 7)) & 0x1FFFF;
              *(_DWORD *)(result + 36) = v764 | v767;
              unint64_t v768 = *a3 & 7;
              unint64_t v769 = (unint64_t)(*a3 + 120) >> 3;
              if (v768 > 1) {
                unsigned int v770 = (*(unsigned __int8 *)(a2 + v769 + 2) << 16) | (*(unsigned __int8 *)(a2 + v769 + 1) << 8) | *(unsigned __int8 *)(a2 + v769);
              }
              else {
                unsigned int v770 = *(unsigned __int16 *)(a2 + v769);
              }
              uint64_t v826 = v767 | (v770 >> v768 << 17);
              *(_WORD *)(result + 40) = WORD2(v766);
              *(_DWORD *)(result + 36) = v766 | v826;
              unint64_t v827 = (*(unsigned char *)a3 - 121) & 7;
              unint64_t v828 = (unint64_t)(*a3 + 135) >> 3;
              if (v827 > 1) {
                unsigned int v829 = (*(unsigned __int8 *)(a2 + v828 + 2) << 16) | (*(unsigned __int8 *)(a2 + v828 + 1) << 8) | *(unsigned __int8 *)(a2 + v828);
              }
              else {
                unsigned int v829 = *(unsigned __int16 *)(a2 + v828);
              }
              unint64_t v879 = v826 | ((unint64_t)((v829 >> v827) & 0x7FFF) << 32) | v766;
              *(_DWORD *)(result + 36) = v879;
              *(_WORD *)(result + 40) = WORD2(v879);
              unint64_t v880 = (*(unsigned char *)a3 - 106) & 7;
              unint64_t v881 = (unint64_t)(*a3 + 150) >> 3;
              if (v880 > 1) {
                unsigned int v882 = (*(unsigned __int8 *)(a2 + v881 + 2) << 16) | (*(unsigned __int8 *)(a2 + v881 + 1) << 8) | *(unsigned __int8 *)(a2 + v881);
              }
              else {
                unsigned int v882 = *(unsigned __int16 *)(a2 + v881);
              }
              uint64_t v928 = *(unsigned int *)(result + 48);
              *(_WORD *)(result + 42) |= (v882 >> v880) & 0x7FFF;
              *(_DWORD *)(result + 44) |= (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 165) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 165) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 165) >> 3))) >> ((*(unsigned char *)a3 - 91) & 7)) & 0x1FFFF;
              unint64_t v929 = v928 | ((unint64_t)*(unsigned __int16 *)(result + 52) << 32);
              unsigned int v930 = (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 182) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 182) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 182) >> 3))) >> ((*(unsigned char *)a3 - 74) & 7)) & 0x1FFFF;
              *(_DWORD *)(result + 48) = v928 | v930;
              unint64_t v931 = (*(unsigned char *)a3 - 57) & 7;
              unint64_t v932 = (unint64_t)(*a3 + 199) >> 3;
              if (v931 > 1) {
                unsigned int v933 = (*(unsigned __int8 *)(a2 + v932 + 2) << 16) | (*(unsigned __int8 *)(a2 + v932 + 1) << 8) | *(unsigned __int8 *)(a2 + v932);
              }
              else {
                unsigned int v933 = *(unsigned __int16 *)(a2 + v932);
              }
              uint64_t v976 = v930 | (v933 >> v931 << 17);
              *(_WORD *)(result + 52) = WORD2(v929);
              *(_DWORD *)(result + 48) = v929 | v976;
              unint64_t v977 = (*(unsigned char *)a3 - 42) & 7;
              unint64_t v978 = (unint64_t)(*a3 + 214) >> 3;
              if (v977 > 1) {
                unsigned int v979 = (*(unsigned __int8 *)(a2 + v978 + 2) << 16) | (*(unsigned __int8 *)(a2 + v978 + 1) << 8) | *(unsigned __int8 *)(a2 + v978);
              }
              else {
                unsigned int v979 = *(unsigned __int16 *)(a2 + v978);
              }
              unint64_t v1015 = v976 | ((unint64_t)((v979 >> v977) & 0x7FFF) << 32) | v929;
              *(_DWORD *)(result + 48) = v1015;
              *(_WORD *)(result + 52) = WORD2(v1015);
              unint64_t v1016 = (unint64_t)(*a3 + 229) >> 3;
              if (((*(unsigned char *)a3 - 27) & 7) != 0) {
                unsigned int v1017 = ((*(unsigned __int8 *)(a2 + v1016 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1016 + 1) << 8) | *(unsigned __int8 *)(a2 + v1016)) >> ((*(unsigned char *)a3 - 27) & 7);
              }
              else {
                LOWORD(v1017) = *(_WORD *)(a2 + v1016);
              }
              int v1304 = *(_DWORD *)(result + 54) | (unsigned __int16)v1017;
              *(_DWORD *)(result + 54) = v1304;
              unint64_t v1305 = (unint64_t)(*a3 + 245) >> 3;
              if (((*(unsigned char *)a3 - 11) & 7) != 0) {
                unsigned int v1306 = ((*(unsigned __int8 *)(a2 + v1305 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1305 + 1) << 8) | *(unsigned __int8 *)(a2 + v1305)) >> ((*(unsigned char *)a3 - 11) & 7);
              }
              else {
                unsigned int v1306 = *(unsigned __int16 *)(a2 + v1305);
              }
              *(_DWORD *)(result + 54) = v1304 | (v1306 << 16);
              int v1377 = *(_DWORD *)(result + 64);
              *(_DWORD *)(result + 60) |= (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 261) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 261) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 261) >> 3))) >> ((*(unsigned char *)a3 + 5) & 7)) & 0x1FFFF;
              *(_DWORD *)(result + 64) = (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 278) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 278) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 278) >> 3))) >> ((*(unsigned char *)a3 + 22) & 7)) & 0x1FFFF | v1377;
              unint64_t v1378 = *a3 + 295;
              *(_DWORD *)(result + 68) |= (((*(unsigned __int8 *)(a2 + (v1378 >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + (v1378 >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + (v1378 >> 3))) >> (v1378 & 7)) & 0x1FFFF;
              unint64_t v1379 = *a3 & 7;
              unint64_t v1380 = (unint64_t)(*a3 + 312) >> 3;
              if (v1379 > 4)
              {
                int v1382 = (*(unsigned __int8 *)(v1380 + a2 + 3) << 24) | (*(unsigned __int8 *)(v1380 + a2 + 2) << 16);
                int v1381 = *(unsigned __int8 *)(v1380 + a2 + 1) << 8;
              }
              else
              {
                int v1381 = *(unsigned __int8 *)(v1380 + a2 + 2) << 16;
                int v1382 = *(unsigned __int8 *)(v1380 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 72) |= ((v1382 | v1381 | *(unsigned __int8 *)(a2 + v1380)) >> v1379) & 0xFFFFF;
              unint64_t v1383 = *a3 + 332;
              unint64_t v1384 = v1383 >> 3;
              unint64_t v1385 = v1383 & 7;
              if (v1385) {
                unsigned int v1386 = ((*(unsigned __int8 *)(a2 + v1384 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1384 + 1) << 8) | *(unsigned __int8 *)(a2 + v1384)) >> v1385;
              }
              else {
                LOWORD(v1386) = *(_WORD *)(a2 + v1384);
              }
              uint64_t v1401 = (unsigned __int16)v1386;
              __int16 v1402 = *(_WORD *)(result + 84);
              uint64_t v1403 = *(void *)(result + 76);
              uint64_t v1404 = v1403 | v1401;
              *(void *)(result + 76) = v1404;
              unint64_t v1405 = *a3 + 348;
              unint64_t v1406 = v1405 >> 3;
              unint64_t v1407 = v1405 & 7;
              if (v1407) {
                unsigned int v1408 = ((*(unsigned __int8 *)(a2 + v1406 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1406 + 1) << 8) | *(unsigned __int8 *)(a2 + v1406)) >> v1407;
              }
              else {
                unsigned int v1408 = *(unsigned __int16 *)(a2 + v1406);
              }
              unint64_t v1423 = v1404 & 0xFFFFFFFF0000FFFFLL | v1404 & 0xFFFF0000 | (unint64_t)(v1408 << 16);
              *(_WORD *)(result + 84) = v1402;
              *(void *)(result + 76) = v1423;
              unint64_t v1424 = *a3 + 364;
              unint64_t v1425 = v1423 & 0xFFFE0000FFFFFFFFLL | v1403 & 0x1FFFF00000000 | ((unint64_t)((((*(unsigned __int8 *)(a2 + (v1424 >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + (v1424 >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + (v1424 >> 3))) >> (v1424 & 7)) & 0x1FFFF) << 32);
              *(_WORD *)(result + 84) = v1402;
              *(void *)(result + 76) = v1425;
              unint64_t v1426 = *a3 + 381;
              unint64_t v1427 = v1426 & 7;
              unint64_t v1428 = v1426 >> 3;
              if (v1427 > 1) {
                unsigned int v1429 = (*(unsigned __int8 *)(a2 + v1428 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1428 + 1) << 8) | *(unsigned __int8 *)(a2 + v1428);
              }
              else {
                unsigned int v1429 = *(unsigned __int16 *)(a2 + v1428);
              }
              unint64_t v1430 = v1425 & 0xFFFE000000000000 | ((unint64_t)(v1429 >> v1427) << 49) | v1425 & 0x1FFFFFFFFFFFFLL;
              *(_WORD *)(result + 84) = v1402;
              *(void *)(result + 76) = v1430;
              unint64_t v1431 = (*(unsigned char *)a3 - 116) & 7;
              unint64_t v1432 = (unint64_t)(*a3 + 396) >> 3;
              if (v1431 > 1) {
                unsigned int v1433 = (*(unsigned __int8 *)(a2 + v1432 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1432 + 1) << 8) | *(unsigned __int8 *)(a2 + v1432);
              }
              else {
                unsigned int v1433 = *(unsigned __int16 *)(a2 + v1432);
              }
              *(void *)(result + 76) = v1430;
              *(_WORD *)(result + 84) = v1402 & 0x8000 | (v1402 | (v1433 >> v1431)) & 0x7FFF;
              unint64_t v1434 = (unint64_t)(*a3 + 411) >> 3;
              if (((*(unsigned char *)a3 - 101) & 7) != 0) {
                unsigned int v1435 = ((*(unsigned __int8 *)(a2 + v1434 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1434 + 1) << 8) | *(unsigned __int8 *)(a2 + v1434)) >> ((*(unsigned char *)a3 - 101) & 7);
              }
              else {
                LOWORD(v1435) = *(_WORD *)(a2 + v1434);
              }
              uint64_t v1454 = *(void *)(result + 86) | (unsigned __int16)v1435;
              *(void *)(result + 86) = v1454;
              unint64_t v1455 = v1454 | ((unint64_t)((((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 427) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 427) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 427) >> 3))) >> ((*(unsigned char *)a3 - 85) & 7)) & 0x1FFFF) << 16);
              *(void *)(result + 86) = v1455;
              unint64_t v1456 = (*(unsigned char *)a3 - 68) & 7;
              unint64_t v1457 = (unint64_t)(*a3 + 444) >> 3;
              if (v1456 > 1) {
                unsigned int v1458 = (*(unsigned __int8 *)(a2 + v1457 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1457 + 1) << 8) | *(unsigned __int8 *)(a2 + v1457);
              }
              else {
                unsigned int v1458 = *(unsigned __int16 *)(a2 + v1457);
              }
              unint64_t v1459 = v1455 | ((unint64_t)((v1458 >> v1456) & 0x7FFF) << 33);
              *(void *)(result + 86) = v1459;
              unint64_t v1460 = (*(unsigned char *)a3 - 53) & 7;
              unint64_t v1461 = (unint64_t)(*a3 + 459) >> 3;
              if (v1460 > 1) {
                unsigned int v1462 = (*(unsigned __int8 *)(a2 + v1461 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1461 + 1) << 8) | *(unsigned __int8 *)(a2 + v1461);
              }
              else {
                unsigned int v1462 = *(unsigned __int16 *)(a2 + v1461);
              }
              *(void *)(result + 86) = v1459 | ((unint64_t)((v1462 >> v1460) & 0x7FFF) << 48);
              unint64_t v1463 = (*(unsigned char *)a3 - 38) & 7;
              unint64_t v1464 = (unint64_t)(*a3 + 474) >> 3;
              if (v1463 > 1) {
                unsigned int v1465 = (*(unsigned __int8 *)(a2 + v1464 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1464 + 1) << 8) | *(unsigned __int8 *)(a2 + v1464);
              }
              else {
                unsigned int v1465 = *(unsigned __int16 *)(a2 + v1464);
              }
              *(_WORD *)(result + 94) |= (v1465 >> v1463) & 0x7FFF;
              uint64_t v22 = 489;
              goto LABEL_1232;
            case 0xE:
              *(_DWORD *)(result + 16) = 15;
              unint64_t v389 = *a3 + 9;
              unint64_t v390 = v389 & 7;
              unint64_t v391 = v389 >> 3;
              if (v390 > 2)
              {
                int v393 = (*(unsigned __int8 *)(v391 + a2 + 3) << 24) | (*(unsigned __int8 *)(v391 + a2 + 2) << 16);
                int v392 = *(unsigned __int8 *)(v391 + a2 + 1) << 8;
              }
              else
              {
                int v392 = *(unsigned __int8 *)(v391 + a2 + 2) << 16;
                int v393 = *(unsigned __int8 *)(v391 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 20) |= ((v393 | v392 | *(unsigned __int8 *)(a2 + v391)) >> v390) & 0x3FFFFF;
              unint64_t v582 = *a3 + 31;
              unint64_t v583 = v582 & 7;
              unint64_t v584 = v582 >> 3;
              if (v583 > 3)
              {
                int v586 = (*(unsigned __int8 *)(v584 + a2 + 3) << 24) | (*(unsigned __int8 *)(v584 + a2 + 2) << 16);
                int v585 = *(unsigned __int8 *)(v584 + a2 + 1) << 8;
              }
              else
              {
                int v585 = *(unsigned __int8 *)(v584 + a2 + 2) << 16;
                int v586 = *(unsigned __int8 *)(v584 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 24) |= ((v586 | v585 | *(unsigned __int8 *)(a2 + v584)) >> v583) & 0x1FFFFF;
              unint64_t v644 = *a3 + 52;
              unint64_t v645 = v644 & 7;
              unint64_t v646 = v644 >> 3;
              if (v645 > 2)
              {
                int v648 = (*(unsigned __int8 *)(v646 + a2 + 3) << 24) | (*(unsigned __int8 *)(v646 + a2 + 2) << 16);
                int v647 = *(unsigned __int8 *)(v646 + a2 + 1) << 8;
              }
              else
              {
                int v647 = *(unsigned __int8 *)(v646 + a2 + 2) << 16;
                int v648 = *(unsigned __int8 *)(v646 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 28) |= ((v648 | v647 | *(unsigned __int8 *)(a2 + v646)) >> v645) & 0x3FFFFF;
              uint64_t v22 = 74;
              goto LABEL_1232;
            case 0xF:
              *(_DWORD *)(result + 16) = 16;
              unint64_t v394 = *a3 + 9;
              unint64_t v395 = v394 & 7;
              unint64_t v396 = v394 >> 3;
              if (v395 > 1) {
                unsigned int v397 = (*(unsigned __int8 *)(a2 + v396 + 2) << 16) | (*(unsigned __int8 *)(a2 + v396 + 1) << 8) | *(unsigned __int8 *)(a2 + v396);
              }
              else {
                unsigned int v397 = *(unsigned __int16 *)(a2 + v396);
              }
              *(_WORD *)(result + 20) |= (v397 >> v395) & 0x7FFF;
              unint64_t v587 = *a3 & 7;
              unint64_t v588 = (unint64_t)(*a3 + 24) >> 3;
              if (v587 > 1) {
                unsigned int v589 = (*(unsigned __int8 *)(a2 + v588 + 2) << 16) | (*(unsigned __int8 *)(a2 + v588 + 1) << 8) | *(unsigned __int8 *)(a2 + v588);
              }
              else {
                unsigned int v589 = *(unsigned __int16 *)(a2 + v588);
              }
              *(_WORD *)(result + 22) |= (v589 >> v587) & 0x7FFF;
              unint64_t v649 = *a3 + 39;
              unint64_t v650 = v649 & 7;
              unint64_t v651 = v649 >> 3;
              if (v650 > 2) {
                unsigned int v652 = (*(unsigned __int8 *)(a2 + v651 + 2) << 16) | (*(unsigned __int8 *)(a2 + v651 + 1) << 8) | *(unsigned __int8 *)(a2 + v651);
              }
              else {
                unsigned int v652 = *(unsigned __int16 *)(a2 + v651);
              }
              *(_WORD *)(result + 24) |= (v652 >> v650) & 0x3FFF;
              unint64_t v709 = *a3 + 53;
              unint64_t v710 = v709 & 7;
              unint64_t v711 = v709 >> 3;
              if (v710 > 2) {
                unsigned int v712 = (*(unsigned __int8 *)(a2 + v711 + 2) << 16) | (*(unsigned __int8 *)(a2 + v711 + 1) << 8) | *(unsigned __int8 *)(a2 + v711);
              }
              else {
                unsigned int v712 = *(unsigned __int16 *)(a2 + v711);
              }
              *(_WORD *)(result + 26) |= (v712 >> v710) & 0x3FFF;
              unint64_t v771 = *a3 + 67;
              unint64_t v772 = v771 & 7;
              unint64_t v773 = v771 >> 3;
              if (v772 > 3) {
                unsigned int v774 = (*(unsigned __int8 *)(a2 + v773 + 2) << 16) | (*(unsigned __int8 *)(a2 + v773 + 1) << 8) | *(unsigned __int8 *)(a2 + v773);
              }
              else {
                unsigned int v774 = *(unsigned __int16 *)(a2 + v773);
              }
              *(_WORD *)(result + 28) |= (v774 >> v772) & 0x1FFF;
              unint64_t v830 = *a3 & 7;
              unint64_t v831 = (unint64_t)(*a3 + 80) >> 3;
              if (v830 > 3) {
                unsigned int v832 = (*(unsigned __int8 *)(a2 + v831 + 2) << 16) | (*(unsigned __int8 *)(a2 + v831 + 1) << 8) | *(unsigned __int8 *)(a2 + v831);
              }
              else {
                unsigned int v832 = *(unsigned __int16 *)(a2 + v831);
              }
              *(_WORD *)(result + 30) |= (v832 >> v830) & 0x1FFF;
              unint64_t v883 = *a3 + 93;
              unint64_t v884 = v883 & 7;
              unint64_t v885 = v883 >> 3;
              if (v884 > 3) {
                unsigned int v886 = (*(unsigned __int8 *)(a2 + v885 + 2) << 16) | (*(unsigned __int8 *)(a2 + v885 + 1) << 8) | *(unsigned __int8 *)(a2 + v885);
              }
              else {
                unsigned int v886 = *(unsigned __int16 *)(a2 + v885);
              }
              int v934 = *(_DWORD *)(result + 32) | (v886 >> v884) & 0x1FFF;
              *(_DWORD *)(result + 32) = v934;
              unint64_t v935 = *a3 + 106;
              unint64_t v936 = v935 & 7;
              unint64_t v937 = v935 >> 3;
              if (v936 == 7) {
                int v938 = *(_DWORD *)(a2 + v937) >> 7;
              }
              else {
                int v938 = ((*(unsigned __int8 *)(a2 + v937 + 2) << 16) | (*(unsigned __int8 *)(a2 + v937 + 1) << 8) | *(unsigned __int8 *)(a2 + v937)) >> v936;
              }
              *(_DWORD *)(result + 32) = ((v938 & 0x3FFFF) << 13) | v934;
              unint64_t v980 = *a3 + 124;
              unint64_t v981 = v980 & 7;
              unint64_t v982 = v980 >> 3;
              if (v981 == 7) {
                int v983 = *(_DWORD *)(a2 + v982) >> 7;
              }
              else {
                int v983 = ((*(unsigned __int8 *)(a2 + v982 + 2) << 16) | (*(unsigned __int8 *)(a2 + v982 + 1) << 8) | *(unsigned __int8 *)(a2 + v982)) >> v981;
              }
              *(_DWORD *)(result + 36) |= v983 & 0x3FFFF;
              uint64_t v1018 = (*(unsigned char *)a3 - 114) & 7;
              unint64_t v1019 = (unint64_t)(*a3 + 142) >> 3;
              if (v1018 == 7) {
                int v1020 = *(_DWORD *)(a2 + v1019) >> 7;
              }
              else {
                int v1020 = ((*(unsigned __int8 *)(a2 + v1019 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1019 + 1) << 8) | *(unsigned __int8 *)(a2 + v1019)) >> v1018;
              }
              *(_DWORD *)(result + 40) |= v1020 & 0x3FFFF;
              uint64_t v22 = 160;
              goto LABEL_1232;
            case 0x10:
              *(_DWORD *)(result + 16) = 17;
              *(unsigned char *)(result + 20) |= (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 9) >> 3)) >> ((*(unsigned char *)a3 + 9) & 7)) & 1;
              unint64_t v398 = *a3 + 10;
              unint64_t v399 = v398 >> 3;
              unint64_t v400 = v398 & 7;
              if (v400) {
                LODWORD(v399) = ((*(unsigned __int8 *)(a2 + v399 + 2) << 16) | (*(unsigned __int8 *)(a2 + v399 + 1) << 8) | *(unsigned __int8 *)(a2 + v399)) >> v400;
              }
              else {
                LOWORD(v399) = *(_WORD *)(a2 + v399);
              }
              uint64_t v1276 = *(unsigned int *)(result + 22);
              unint64_t v1277 = v1276 | ((unint64_t)*(unsigned __int16 *)(result + 26) << 32);
              *(_DWORD *)(result + 22) = v1276 | (unsigned __int16)v399;
              unint64_t v1278 = *a3 + 26;
              unint64_t v1279 = v1278 >> 3;
              unint64_t v1280 = v1278 & 7;
              if (v1280) {
                unsigned int v1281 = ((*(unsigned __int8 *)(a2 + v1279 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1279 + 1) << 8) | *(unsigned __int8 *)(a2 + v1279)) >> v1280;
              }
              else {
                unsigned int v1281 = *(unsigned __int16 *)(a2 + v1279);
              }
              uint64_t v1343 = (unsigned __int16)v399 | (v1281 << 16);
              *(_WORD *)(result + 26) = WORD2(v1277);
              *(_DWORD *)(result + 22) = v1277 | v1343;
              unint64_t v1344 = *a3 + 42;
              unint64_t v1345 = v1344 & 7;
              unint64_t v1346 = v1344 >> 3;
              if (v1345 > 1) {
                unsigned int v1347 = (*(unsigned __int8 *)(a2 + v1346 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1346 + 1) << 8) | *(unsigned __int8 *)(a2 + v1346);
              }
              else {
                unsigned int v1347 = *(unsigned __int16 *)(a2 + v1346);
              }
              unint64_t v1348 = v1343 | ((unint64_t)((v1347 >> v1345) & 0x7FFF) << 32) | v1277;
              *(_DWORD *)(result + 22) = v1348;
              *(_WORD *)(result + 26) = WORD2(v1348);
              unint64_t v1349 = *a3 + 57;
              unint64_t v1350 = v1349 & 7;
              unint64_t v1351 = v1349 >> 3;
              if (v1350 > 1) {
                unsigned int v1352 = (*(unsigned __int8 *)(a2 + v1351 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1351 + 1) << 8) | *(unsigned __int8 *)(a2 + v1351);
              }
              else {
                unsigned int v1352 = *(unsigned __int16 *)(a2 + v1351);
              }
              *(_WORD *)(result + 28) |= (v1352 >> v1350) & 0x7FFF;
              unint64_t v1353 = (unint64_t)(*a3 + 72) >> 3;
              uint64_t v1354 = *a3 & 7;
              if (v1354) {
                unsigned int v1355 = ((*(unsigned __int8 *)(a2 + v1353 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1353 + 1) << 8) | *(unsigned __int8 *)(a2 + v1353)) >> v1354;
              }
              else {
                LOWORD(v1355) = *(_WORD *)(a2 + v1353);
              }
              uint64_t v1392 = *(void *)(result + 30) | (unsigned __int16)v1355;
              *(void *)(result + 30) = v1392;
              unint64_t v1393 = (unint64_t)(*a3 + 88) >> 3;
              uint64_t v1394 = *a3 & 7;
              if (v1394) {
                unsigned int v1395 = ((*(unsigned __int8 *)(a2 + v1393 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1393 + 1) << 8) | *(unsigned __int8 *)(a2 + v1393)) >> v1394;
              }
              else {
                unsigned int v1395 = *(unsigned __int16 *)(a2 + v1393);
              }
              uint64_t v1414 = v1392 | (v1395 << 16);
              *(void *)(result + 30) = v1414;
              unint64_t v1415 = (unint64_t)(*a3 + 104) >> 3;
              uint64_t v1416 = *a3 & 7;
              if (v1416) {
                unsigned int v1417 = ((*(unsigned __int8 *)(a2 + v1415 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1415 + 1) << 8) | *(unsigned __int8 *)(a2 + v1415)) >> v1416;
              }
              else {
                LOWORD(v1417) = *(_WORD *)(a2 + v1415);
              }
              unint64_t v1445 = v1414 | ((unint64_t)(unsigned __int16)v1417 << 32);
              *(void *)(result + 30) = v1445;
              unint64_t v1446 = (unint64_t)(*a3 + 120) >> 3;
              uint64_t v1447 = *a3 & 7;
              if (v1447) {
                uint64_t v1448 = ((*(unsigned __int8 *)(a2 + v1446 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1446 + 1) << 8) | *(unsigned __int8 *)(a2 + v1446)) >> v1447;
              }
              else {
                uint64_t v1448 = *(unsigned __int16 *)(a2 + v1446);
              }
              *(void *)(result + 30) = v1445 | (v1448 << 48);
              int v1478 = *(_DWORD *)(result + 44);
              *(_DWORD *)(result + 40) |= (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 136) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 136) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 136) >> 3))) >> (*a3 & 7)) & 0x1FFFF;
              *(_DWORD *)(result + 44) = (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 153) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 153) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 153) >> 3))) >> ((*(unsigned char *)a3 - 103) & 7)) & 0x1FFFF | v1478;
              uint64_t v22 = 170;
              goto LABEL_1232;
            case 0x11:
              *(_DWORD *)(result + 16) = 18;
              int v401 = (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 9) >> 3)) >> ((*(unsigned char *)a3 + 9) & 7)) & 1 | *(unsigned __int16 *)(result + 20);
              *(_WORD *)(result + 20) |= (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 9) >> 3)) >> ((*(unsigned char *)a3 + 9) & 7)) & 1;
              unint64_t v402 = *a3 + 10;
              unint64_t v403 = v402 & 7;
              unint64_t v404 = v402 >> 3;
              if (v403 > 2) {
                unsigned int v405 = (*(unsigned __int8 *)(a2 + v404 + 2) << 16) | (*(unsigned __int8 *)(a2 + v404 + 1) << 8) | *(unsigned __int8 *)(a2 + v404);
              }
              else {
                unsigned int v405 = *(unsigned __int16 *)(a2 + v404);
              }
              *(_WORD *)(result + 20) = (2 * ((v405 >> v403) & 0x3FFF)) | v401;
              unint64_t v590 = *a3 & 7;
              unint64_t v591 = (unint64_t)(*a3 + 24) >> 3;
              if (v590 > 1) {
                unsigned int v592 = (*(unsigned __int8 *)(a2 + v591 + 2) << 16) | (*(unsigned __int8 *)(a2 + v591 + 1) << 8) | *(unsigned __int8 *)(a2 + v591);
              }
              else {
                unsigned int v592 = *(unsigned __int16 *)(a2 + v591);
              }
              *(_WORD *)(result + 22) |= (v592 >> v590) & 0x7FFF;
              unint64_t v653 = *a3 + 39;
              unint64_t v654 = v653 & 7;
              unint64_t v655 = v653 >> 3;
              if (v654 > 1) {
                unsigned int v656 = (*(unsigned __int8 *)(a2 + v655 + 2) << 16) | (*(unsigned __int8 *)(a2 + v655 + 1) << 8) | *(unsigned __int8 *)(a2 + v655);
              }
              else {
                unsigned int v656 = *(unsigned __int16 *)(a2 + v655);
              }
              *(_WORD *)(result + 24) |= (v656 >> v654) & 0x7FFF;
              unint64_t v713 = *a3 + 54;
              unint64_t v714 = v713 & 7;
              unint64_t v715 = v713 >> 3;
              if (v714 > 1) {
                unsigned int v716 = (*(unsigned __int8 *)(a2 + v715 + 2) << 16) | (*(unsigned __int8 *)(a2 + v715 + 1) << 8) | *(unsigned __int8 *)(a2 + v715);
              }
              else {
                unsigned int v716 = *(unsigned __int16 *)(a2 + v715);
              }
              *(_WORD *)(result + 26) |= (v716 >> v714) & 0x7FFF;
              unint64_t v775 = *a3 + 69;
              unint64_t v776 = v775 & 7;
              unint64_t v777 = v775 >> 3;
              if (v776 > 1) {
                unsigned int v778 = (*(unsigned __int8 *)(a2 + v777 + 2) << 16) | (*(unsigned __int8 *)(a2 + v777 + 1) << 8) | *(unsigned __int8 *)(a2 + v777);
              }
              else {
                unsigned int v778 = *(unsigned __int16 *)(a2 + v777);
              }
              *(_WORD *)(result + 28) |= (v778 >> v776) & 0x7FFF;
              unint64_t v833 = *a3 + 84;
              unint64_t v834 = v833 & 7;
              unint64_t v835 = v833 >> 3;
              if (v834 > 1) {
                unsigned int v836 = (*(unsigned __int8 *)(a2 + v835 + 2) << 16) | (*(unsigned __int8 *)(a2 + v835 + 1) << 8) | *(unsigned __int8 *)(a2 + v835);
              }
              else {
                unsigned int v836 = *(unsigned __int16 *)(a2 + v835);
              }
              *(_WORD *)(result + 30) |= (v836 >> v834) & 0x7FFF;
              unint64_t v887 = *a3 + 99;
              unint64_t v888 = v887 & 7;
              unint64_t v889 = v887 >> 3;
              if (v888 > 1) {
                unsigned int v890 = (*(unsigned __int8 *)(a2 + v889 + 2) << 16) | (*(unsigned __int8 *)(a2 + v889 + 1) << 8) | *(unsigned __int8 *)(a2 + v889);
              }
              else {
                unsigned int v890 = *(unsigned __int16 *)(a2 + v889);
              }
              *(_WORD *)(result + 32) |= (v890 >> v888) & 0x7FFF;
              unint64_t v939 = *a3 + 114;
              unint64_t v940 = v939 & 7;
              unint64_t v941 = v939 >> 3;
              if (v940 > 1) {
                unsigned int v942 = (*(unsigned __int8 *)(a2 + v941 + 2) << 16) | (*(unsigned __int8 *)(a2 + v941 + 1) << 8) | *(unsigned __int8 *)(a2 + v941);
              }
              else {
                unsigned int v942 = *(unsigned __int16 *)(a2 + v941);
              }
              *(_WORD *)(result + 34) |= (v942 >> v940) & 0x7FFF;
              unint64_t v984 = (*(unsigned char *)a3 - 127) & 7;
              unint64_t v985 = (unint64_t)(*a3 + 129) >> 3;
              if (v984 > 1) {
                unsigned int v986 = (*(unsigned __int8 *)(a2 + v985 + 2) << 16) | (*(unsigned __int8 *)(a2 + v985 + 1) << 8) | *(unsigned __int8 *)(a2 + v985);
              }
              else {
                unsigned int v986 = *(unsigned __int16 *)(a2 + v985);
              }
              *(_WORD *)(result + 36) |= (v986 >> v984) & 0x7FFF;
              unint64_t v1021 = *a3 & 7;
              unint64_t v1022 = (unint64_t)(*a3 + 144) >> 3;
              if (v1021 > 1) {
                unsigned int v1023 = (*(unsigned __int8 *)(a2 + v1022 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1022 + 1) << 8) | *(unsigned __int8 *)(a2 + v1022);
              }
              else {
                unsigned int v1023 = *(unsigned __int16 *)(a2 + v1022);
              }
              *(_WORD *)(result + 38) |= (v1023 >> v1021) & 0x7FFF;
              unint64_t v1045 = (*(unsigned char *)a3 - 97) & 7;
              unint64_t v1046 = (unint64_t)(*a3 + 159) >> 3;
              if (v1045 > 1) {
                unsigned int v1047 = (*(unsigned __int8 *)(a2 + v1046 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1046 + 1) << 8) | *(unsigned __int8 *)(a2 + v1046);
              }
              else {
                unsigned int v1047 = *(unsigned __int16 *)(a2 + v1046);
              }
              *(_WORD *)(result + 40) |= (v1047 >> v1045) & 0x7FFF;
              unint64_t v1069 = (*(unsigned char *)a3 - 82) & 7;
              unint64_t v1070 = (unint64_t)(*a3 + 174) >> 3;
              if (v1069 > 1) {
                unsigned int v1071 = (*(unsigned __int8 *)(a2 + v1070 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1070 + 1) << 8) | *(unsigned __int8 *)(a2 + v1070);
              }
              else {
                unsigned int v1071 = *(unsigned __int16 *)(a2 + v1070);
              }
              *(_WORD *)(result + 42) |= (v1071 >> v1069) & 0x7FFF;
              unint64_t v1093 = (*(unsigned char *)a3 - 67) & 7;
              unint64_t v1094 = (unint64_t)(*a3 + 189) >> 3;
              if (v1093 > 1) {
                unsigned int v1095 = (*(unsigned __int8 *)(a2 + v1094 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1094 + 1) << 8) | *(unsigned __int8 *)(a2 + v1094);
              }
              else {
                unsigned int v1095 = *(unsigned __int16 *)(a2 + v1094);
              }
              *(_WORD *)(result + 44) |= (v1095 >> v1093) & 0x7FFF;
              unint64_t v1117 = (*(unsigned char *)a3 - 52) & 7;
              unint64_t v1118 = (unint64_t)(*a3 + 204) >> 3;
              if (v1117 > 1) {
                unsigned int v1119 = (*(unsigned __int8 *)(a2 + v1118 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1118 + 1) << 8) | *(unsigned __int8 *)(a2 + v1118);
              }
              else {
                unsigned int v1119 = *(unsigned __int16 *)(a2 + v1118);
              }
              *(_WORD *)(result + 46) |= (v1119 >> v1117) & 0x7FFF;
              uint64_t v22 = 219;
              goto LABEL_1232;
            case 0x12:
              *(_DWORD *)(result + 16) = 19;
              *(unsigned char *)(result + 20) |= (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 9) >> 3)) >> ((*(unsigned char *)a3 + 9) & 7)) & 1;
              unint64_t v406 = *a3 + 10;
              unint64_t v407 = v406 >> 3;
              unint64_t v408 = v406 & 7;
              if (v408) {
                unsigned int v409 = ((*(unsigned __int8 *)(a2 + v407 + 2) << 16) | (*(unsigned __int8 *)(a2 + v407 + 1) << 8) | *(unsigned __int8 *)(a2 + v407)) >> v408;
              }
              else {
                LOWORD(v409) = *(_WORD *)(a2 + v407);
              }
              uint64_t v1282 = (unsigned __int16)v409;
              uint64_t v1283 = *(void *)(result + 38);
              uint64_t v1284 = *(void *)(result + 30);
              unsigned __int8 v1285 = *(unsigned char *)(result + 46);
              uint64_t v1286 = *(void *)(result + 22);
              uint64_t v1287 = v1286 | v1282;
              *(void *)(result + 22) = v1287;
              unint64_t v1288 = *a3 + 26;
              unint64_t v1289 = v1288 >> 3;
              unint64_t v1290 = v1288 & 7;
              if (v1290) {
                unsigned int v1291 = ((*(unsigned __int8 *)(a2 + v1289 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1289 + 1) << 8) | *(unsigned __int8 *)(a2 + v1289)) >> v1290;
              }
              else {
                unsigned int v1291 = *(unsigned __int16 *)(a2 + v1289);
              }
              unint64_t v1356 = v1287 & 0xFFFFFFFF0000FFFFLL | v1287 & 0xFFFF0000 | (unint64_t)(v1291 << 16);
              *(void *)(result + 30) = v1284;
              *(void *)(result + 38) = v1283;
              *(unsigned char *)(result + 46) = v1285;
              *(void *)(result + 22) = v1356;
              unint64_t v1357 = *a3 + 42;
              unint64_t v1358 = v1357 >> 3;
              unint64_t v1359 = v1357 & 7;
              if (v1359) {
                unsigned int v1360 = ((*(unsigned __int8 *)(a2 + v1358 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1358 + 1) << 8) | *(unsigned __int8 *)(a2 + v1358)) >> v1359;
              }
              else {
                LOWORD(v1360) = *(_WORD *)(a2 + v1358);
              }
              unint64_t v1396 = v1356 & 0xFFFF0000FFFFFFFFLL | v1286 & 0xFFFF00000000 | ((unint64_t)(unsigned __int16)v1360 << 32);
              *(void *)(result + 30) = v1284;
              *(void *)(result + 38) = v1283;
              *(unsigned char *)(result + 46) = v1285;
              *(void *)(result + 22) = v1396;
              unint64_t v1397 = *a3 + 58;
              unint64_t v1398 = v1397 >> 3;
              unint64_t v1399 = v1397 & 7;
              if (v1399) {
                uint64_t v1400 = ((*(unsigned __int8 *)(a2 + v1398 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1398 + 1) << 8) | *(unsigned __int8 *)(a2 + v1398)) >> v1399;
              }
              else {
                uint64_t v1400 = *(unsigned __int16 *)(a2 + v1398);
              }
              unint64_t v1418 = v1396 & 0xFFFF000000000000 | (v1400 << 48) | v1396 & 0xFFFFFFFFFFFFLL;
              *(void *)(result + 30) = v1284;
              *(void *)(result + 38) = v1283;
              *(void *)(result + 22) = v1418;
              *(unsigned char *)(result + 46) = v1285;
              unint64_t v1419 = *a3 + 74;
              unint64_t v1420 = v1419 >> 3;
              unint64_t v1421 = v1419 & 7;
              if (v1421) {
                unsigned int v1422 = ((*(unsigned __int8 *)(a2 + v1420 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1420 + 1) << 8) | *(unsigned __int8 *)(a2 + v1420)) >> v1421;
              }
              else {
                LOWORD(v1422) = *(_WORD *)(a2 + v1420);
              }
              uint64_t v1449 = v1284 | (unsigned __int16)v1422;
              *(void *)(result + 22) = v1418;
              *(void *)(result + 38) = v1283;
              *(unsigned char *)(result + 46) = v1285;
              *(void *)(result + 30) = v1449;
              unint64_t v1450 = *a3 + 90;
              unint64_t v1451 = v1450 >> 3;
              unint64_t v1452 = v1450 & 7;
              if (v1452) {
                unsigned int v1453 = ((*(unsigned __int8 *)(a2 + v1451 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1451 + 1) << 8) | *(unsigned __int8 *)(a2 + v1451)) >> v1452;
              }
              else {
                LOWORD(v1453) = *(_WORD *)(a2 + v1451);
              }
              unint64_t v1479 = v1449 & 0xFFFFFFFF0000FFFFLL | ((unint64_t)(unsigned __int16)(WORD1(v1449) | v1453) << 16);
              *(void *)(result + 22) = v1418;
              *(void *)(result + 38) = v1283;
              *(unsigned char *)(result + 46) = v1285;
              *(void *)(result + 30) = v1479;
              unint64_t v1480 = *a3 + 106;
              unint64_t v1481 = v1480 >> 3;
              unint64_t v1482 = v1480 & 7;
              if (v1482) {
                unsigned int v1483 = ((*(unsigned __int8 *)(a2 + v1481 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1481 + 1) << 8) | *(unsigned __int8 *)(a2 + v1481)) >> v1482;
              }
              else {
                LOWORD(v1483) = *(_WORD *)(a2 + v1481);
              }
              unint64_t v1492 = v1479 & 0xFFFF0000FFFFFFFFLL | ((unint64_t)(unsigned __int16)(WORD2(v1479) | v1483) << 32);
              *(void *)(result + 22) = v1418;
              *(void *)(result + 38) = v1283;
              *(unsigned char *)(result + 46) = v1285;
              *(void *)(result + 30) = v1492;
              unint64_t v1493 = *a3 + 122;
              unint64_t v1494 = v1493 >> 3;
              unint64_t v1495 = v1493 & 7;
              if (v1495) {
                unsigned int v1496 = ((*(unsigned __int8 *)(a2 + v1494 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1494 + 1) << 8) | *(unsigned __int8 *)(a2 + v1494)) >> v1495;
              }
              else {
                LOWORD(v1496) = *(_WORD *)(a2 + v1494);
              }
              unint64_t v1502 = v1492 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)(HIWORD(v1492) | v1496) << 48);
              *(void *)(result + 22) = v1418;
              *(void *)(result + 38) = v1283;
              *(unsigned char *)(result + 46) = v1285;
              *(void *)(result + 30) = v1502;
              unint64_t v1503 = (unint64_t)(*a3 + 138) >> 3;
              if (((*(unsigned char *)a3 - 118) & 7) != 0) {
                unsigned int v1504 = ((*(unsigned __int8 *)(a2 + v1503 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1503 + 1) << 8) | *(unsigned __int8 *)(a2 + v1503)) >> ((*(unsigned char *)a3 - 118) & 7);
              }
              else {
                LOWORD(v1504) = *(_WORD *)(a2 + v1503);
              }
              uint64_t v1510 = v1283 | (unsigned __int16)v1504;
              *(void *)(result + 22) = v1418;
              *(void *)(result + 30) = v1502;
              *(unsigned char *)(result + 46) = v1285;
              *(void *)(result + 38) = v1510;
              unint64_t v1511 = (unint64_t)(*a3 + 154) >> 3;
              if (((*(unsigned char *)a3 - 102) & 7) != 0) {
                unsigned int v1512 = ((*(unsigned __int8 *)(a2 + v1511 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1511 + 1) << 8) | *(unsigned __int8 *)(a2 + v1511)) >> ((*(unsigned char *)a3 - 102) & 7);
              }
              else {
                LOWORD(v1512) = *(_WORD *)(a2 + v1511);
              }
              unint64_t v1518 = v1510 & 0xFFFFFFFF0000FFFFLL | ((unint64_t)(unsigned __int16)(WORD1(v1510) | v1512) << 16);
              *(void *)(result + 22) = v1418;
              *(void *)(result + 30) = v1502;
              *(unsigned char *)(result + 46) = v1285;
              *(void *)(result + 38) = v1518;
              unint64_t v1519 = (unint64_t)(*a3 + 170) >> 3;
              if (((*(unsigned char *)a3 - 86) & 7) != 0) {
                unsigned int v1520 = ((*(unsigned __int8 *)(a2 + v1519 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1519 + 1) << 8) | *(unsigned __int8 *)(a2 + v1519)) >> ((*(unsigned char *)a3 - 86) & 7);
              }
              else {
                LOWORD(v1520) = *(_WORD *)(a2 + v1519);
              }
              unint64_t v1526 = v1518 & 0xFFFF0000FFFFFFFFLL | ((unint64_t)(unsigned __int16)(WORD2(v1518) | v1520) << 32);
              *(void *)(result + 22) = v1418;
              *(void *)(result + 30) = v1502;
              *(unsigned char *)(result + 46) = v1285;
              *(void *)(result + 38) = v1526;
              unint64_t v1527 = (*(unsigned char *)a3 - 70) & 7;
              unint64_t v1528 = (unint64_t)(*a3 + 186) >> 3;
              if (v1527 > 4)
              {
                int v1530 = (*(unsigned __int8 *)(v1528 + a2 + 3) << 24) | (*(unsigned __int8 *)(v1528 + a2 + 2) << 16);
                int v1529 = *(unsigned __int8 *)(v1528 + a2 + 1) << 8;
              }
              else
              {
                int v1529 = *(unsigned __int8 *)(v1528 + a2 + 2) << 16;
                int v1530 = *(unsigned __int8 *)(v1528 + a2 + 1) << 8;
              }
              unsigned int v1531 = HIWORD(v1526) | (v1285 << 16) | ((v1530 | v1529 | *(unsigned __int8 *)(a2 + v1528)) >> v1527);
              *(void *)(result + 30) = v1502;
              *(void *)(result + 22) = v1418;
              *(void *)(result + 38) = v1526 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)v1531 << 48);
              *(unsigned char *)(result + 46) = v1285 & 0xF0 | BYTE2(v1531) & 0xF;
              unint64_t v1532 = (*(unsigned char *)a3 - 50) & 7;
              unint64_t v1533 = (unint64_t)(*a3 + 206) >> 3;
              if (v1532 > 5)
              {
                int v1535 = (*(unsigned __int8 *)(v1533 + a2 + 3) << 24) | (*(unsigned __int8 *)(v1533 + a2 + 2) << 16);
                int v1534 = *(unsigned __int8 *)(v1533 + a2 + 1) << 8;
              }
              else
              {
                int v1534 = *(unsigned __int8 *)(v1533 + a2 + 2) << 16;
                int v1535 = *(unsigned __int8 *)(v1533 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 48) |= ((v1535 | v1534 | *(unsigned __int8 *)(a2 + v1533)) >> v1532) & 0x7FFFF;
              uint64_t v22 = 225;
              goto LABEL_1232;
            case 0x13:
              *(_DWORD *)(result + 16) = 5;
              int v410 = (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 9) >> 3)) >> ((*(unsigned char *)a3 + 9) & 7)) & 1 | *(_DWORD *)(result + 20);
              *(_DWORD *)(result + 20) = v410;
              unint64_t v411 = *a3 + 10;
              unint64_t v412 = v411 & 7;
              unint64_t v413 = v411 >> 3;
              if (v412 == 7) {
                int v414 = *(_DWORD *)(a2 + v413) >> 7;
              }
              else {
                int v414 = ((*(unsigned __int8 *)(a2 + v413 + 2) << 16) | (*(unsigned __int8 *)(a2 + v413 + 1) << 8) | *(unsigned __int8 *)(a2 + v413)) >> v412;
              }
              *(_DWORD *)(result + 20) = (2 * (v414 & 0x3FFFF)) | v410;
              unint64_t v593 = *a3 + 28;
              unint64_t v594 = v593 & 7;
              unint64_t v595 = v593 >> 3;
              if (v594 == 7) {
                int v596 = *(_DWORD *)(a2 + v595) >> 7;
              }
              else {
                int v596 = ((*(unsigned __int8 *)(a2 + v595 + 2) << 16) | (*(unsigned __int8 *)(a2 + v595 + 1) << 8) | *(unsigned __int8 *)(a2 + v595)) >> v594;
              }
              *(_DWORD *)(result + 24) |= v596 & 0x3FFFF;
              unint64_t v657 = *a3 + 46;
              unint64_t v658 = v657 & 7;
              unint64_t v659 = v657 >> 3;
              if (v658 == 7) {
                int v660 = *(_DWORD *)(a2 + v659) >> 7;
              }
              else {
                int v660 = ((*(unsigned __int8 *)(a2 + v659 + 2) << 16) | (*(unsigned __int8 *)(a2 + v659 + 1) << 8) | *(unsigned __int8 *)(a2 + v659)) >> v658;
              }
              *(_DWORD *)(result + 28) |= v660 & 0x3FFFF;
              uint64_t v717 = *a3 & 7;
              unint64_t v718 = (unint64_t)(*a3 + 64) >> 3;
              if (v717 == 7) {
                int v719 = *(_DWORD *)(a2 + v718) >> 7;
              }
              else {
                int v719 = ((*(unsigned __int8 *)(a2 + v718 + 2) << 16) | (*(unsigned __int8 *)(a2 + v718 + 1) << 8) | *(unsigned __int8 *)(a2 + v718)) >> v717;
              }
              *(_DWORD *)(result + 32) |= v719 & 0x3FFFF;
              unint64_t v779 = *a3 + 82;
              unint64_t v780 = v779 & 7;
              unint64_t v781 = v779 >> 3;
              if (v780 == 7) {
                int v782 = *(_DWORD *)(a2 + v781) >> 7;
              }
              else {
                int v782 = ((*(unsigned __int8 *)(a2 + v781 + 2) << 16) | (*(unsigned __int8 *)(a2 + v781 + 1) << 8) | *(unsigned __int8 *)(a2 + v781)) >> v780;
              }
              *(_DWORD *)(result + 36) |= v782 & 0x3FFFF;
              unint64_t v837 = *a3 + 100;
              unint64_t v838 = v837 & 7;
              unint64_t v839 = v837 >> 3;
              if (v838 == 7) {
                int v840 = *(_DWORD *)(a2 + v839) >> 7;
              }
              else {
                int v840 = ((*(unsigned __int8 *)(a2 + v839 + 2) << 16) | (*(unsigned __int8 *)(a2 + v839 + 1) << 8) | *(unsigned __int8 *)(a2 + v839)) >> v838;
              }
              *(_DWORD *)(result + 40) |= v840 & 0x3FFFF;
              unint64_t v891 = *a3 + 118;
              unint64_t v892 = v891 & 7;
              unint64_t v893 = v891 >> 3;
              if (v892 == 7) {
                int v894 = *(_DWORD *)(a2 + v893) >> 7;
              }
              else {
                int v894 = ((*(unsigned __int8 *)(a2 + v893 + 2) << 16) | (*(unsigned __int8 *)(a2 + v893 + 1) << 8) | *(unsigned __int8 *)(a2 + v893)) >> v892;
              }
              *(_DWORD *)(result + 44) |= v894 & 0x3FFFF;
              uint64_t v943 = *a3 & 7;
              unint64_t v944 = (unint64_t)(*a3 + 136) >> 3;
              if (v943 == 7) {
                int v945 = *(_DWORD *)(a2 + v944) >> 7;
              }
              else {
                int v945 = ((*(unsigned __int8 *)(a2 + v944 + 2) << 16) | (*(unsigned __int8 *)(a2 + v944 + 1) << 8) | *(unsigned __int8 *)(a2 + v944)) >> v943;
              }
              *(_DWORD *)(result + 48) |= v945 & 0x3FFFF;
              uint64_t v987 = (*(unsigned char *)a3 - 102) & 7;
              unint64_t v988 = (unint64_t)(*a3 + 154) >> 3;
              if (v987 == 7) {
                int v989 = *(_DWORD *)(a2 + v988) >> 7;
              }
              else {
                int v989 = ((*(unsigned __int8 *)(a2 + v988 + 2) << 16) | (*(unsigned __int8 *)(a2 + v988 + 1) << 8) | *(unsigned __int8 *)(a2 + v988)) >> v987;
              }
              *(_DWORD *)(result + 52) |= v989 & 0x3FFFF;
              break;
            default:
              goto LABEL_82;
          }
          uint64_t v22 = 172;
          break;
        default:
          *(_WORD *)(result + 8) = 8;
          *(void *)result = 0x700000007;
          unint64_t v23 = *a3 + 4;
          unint64_t v24 = v23 >> 3;
          unint64_t v25 = v23 & 7;
          if (v25) {
            int v26 = *(unsigned __int16 *)(a2 + v24) >> v25;
          }
          else {
            LOBYTE(v26) = *(unsigned char *)(a2 + v24);
          }
          *(unsigned char *)(result + 16) |= v26;
          if (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 12) >> 3)) >> ((*(unsigned char *)a3 + 12) & 7)) & 1) == 0)
          {
            *(_DWORD *)(result + 20) = 0;
            unint64_t v121 = *a3 + 13;
            unint64_t v122 = v121 & 7;
            unint64_t v123 = v121 >> 3;
            if (v122 > 3) {
              unsigned int v124 = *(unsigned __int16 *)(a2 + v123);
            }
            else {
              unsigned int v124 = *(unsigned __int8 *)(a2 + v123);
            }
            *(unsigned char *)(result + 24) |= (v124 >> v122) & 0x1F;
            goto LABEL_56;
          }
          *(_DWORD *)(result + 20) = 1;
          unint64_t v100 = *a3 + 13;
          unint64_t v101 = v100 & 7;
          unint64_t v102 = v100 >> 3;
          if (v101 > 3) {
            unsigned int v103 = *(unsigned __int16 *)(a2 + v102);
          }
          else {
            unsigned int v103 = *(unsigned __int8 *)(a2 + v102);
          }
          uint64_t v137 = *(void *)(result + 24) | (v103 >> v101) & 0x1F;
          *(void *)(result + 24) = v137;
          unint64_t v138 = *a3 + 18;
          unint64_t v139 = v138 & 7;
          unint64_t v140 = v138 >> 3;
          if (v139 == 7)
          {
            unint64_t v141 = ((unint64_t)*(unsigned __int8 *)(v140 + a2 + 6) << 48) | ((unint64_t)*(unsigned __int8 *)(v140 + a2 + 5) << 40);
            unint64_t v142 = (unint64_t)*(unsigned __int8 *)(v140 + a2 + 4) << 32;
          }
          else
          {
            unint64_t v142 = (unint64_t)*(unsigned __int8 *)(v140 + a2 + 5) << 40;
            unint64_t v141 = (unint64_t)*(unsigned __int8 *)(v140 + a2 + 4) << 32;
          }
          *(void *)(result + 24) = ((((v141 | v142 | ((unint64_t)*(unsigned __int8 *)(a2 + v140 + 3) << 24) | ((unint64_t)*(unsigned __int8 *)(a2 + v140 + 2) << 16) | ((unint64_t)*(unsigned __int8 *)(a2 + v140 + 1) << 8) | *(unsigned __int8 *)(a2 + v140)) >> v139) & 0x3FFFFFFFFFFLL) << 6) | v137;
          uint64_t v22 = 60;
          break;
      }
      break;
    case 3:
      uint64_t v19 = (v4 + 2) & 7;
      unint64_t v20 = (unint64_t)(v4 + 2) >> 3;
      if (v19 == 7) {
        int v21 = *(unsigned __int16 *)(a2 + v20) >> 7;
      }
      else {
        int v21 = *(unsigned __int8 *)(a2 + v20) >> v19;
      }
      switch(v21 & 3)
      {
        case 1:
          unint64_t v68 = v4 + 4;
          uint64_t v69 = (v4 + 4) & 7;
          unint64_t v70 = v68 >> 3;
          if (v69 == 7) {
            int v71 = *(unsigned __int16 *)(a2 + v70) >> 7;
          }
          else {
            int v71 = *(unsigned __int8 *)(a2 + v70) >> v69;
          }
          int v94 = v71 & 3;
          if (v94 == 1)
          {
            *(_WORD *)(result + 8) = 1;
            uint64_t v95 = 0xE0000000ELL;
          }
          else
          {
            if (v94) {
              goto LABEL_82;
            }
            *(_WORD *)(result + 8) = 1;
            uint64_t v95 = 0xD0000000DLL;
          }
          *(void *)result = v95;
          unint64_t v129 = *a3 + 6;
          unint64_t v130 = v129 & 7;
          unint64_t v131 = v129 >> 3;
          if (v130 == 7) {
            int v132 = *(unsigned __int16 *)(a2 + v131) >> 7;
          }
          else {
            int v132 = *(unsigned __int8 *)(a2 + v131) >> v130;
          }
          *(unsigned char *)(result + 16) |= v132 & 3;
          uint64_t v22 = 8;
          goto LABEL_1232;
        case 2:
          unint64_t v72 = v4 + 4;
          uint64_t v73 = (v4 + 4) & 7;
          unint64_t v74 = v72 >> 3;
          if (v73 == 7)
          {
            if ((((unint64_t)(*(unsigned __int8 *)(a2 + v74) | (*(unsigned __int8 *)(a2 + v74 + 1) << 8)) >> 7) & 3) != 0) {
              goto LABEL_82;
            }
          }
          else if (((*(unsigned __int8 *)(a2 + v74) >> v73) & 3) != 0)
          {
            goto LABEL_82;
          }
          *(_WORD *)(result + 8) = 3;
          *(void *)result = 0xF0000000FLL;
          unint64_t v96 = *a3 + 6;
          unint64_t v97 = v96 & 7;
          unint64_t v98 = v96 >> 3;
          if (v97 > 1) {
            unsigned int v99 = *(unsigned __int16 *)(a2 + v98);
          }
          else {
            unsigned int v99 = *(unsigned __int8 *)(a2 + v98);
          }
          *(unsigned char *)(result + 24) |= (v99 >> v97) & 0x7F;
          unint64_t v172 = *a3 + 13;
          unint64_t v173 = v172 & 7;
          unint64_t v174 = v172 >> 3;
          if (v173 > 5) {
            unsigned __int16 v175 = *(_WORD *)(a2 + v174);
          }
          else {
            unsigned __int16 v175 = *(unsigned __int8 *)(a2 + v174);
          }
          *(_DWORD *)(result + 20) = (v175 >> v173) & 7;
          unint64_t v176 = *a3 & 7;
          unint64_t v177 = (unint64_t)(*a3 + 16) >> 3;
          if (v176 > 5) {
            unsigned __int16 v178 = *(_WORD *)(a2 + v177);
          }
          else {
            unsigned __int16 v178 = *(unsigned __int8 *)(a2 + v177);
          }
          switch((v178 >> v176) & 7)
          {
            case 1:
              int v415 = 1;
              goto LABEL_312;
            case 2:
              int v415 = 2;
              goto LABEL_312;
            case 3:
              int v415 = 3;
              goto LABEL_312;
            case 4:
              int v415 = 4;
              goto LABEL_312;
            case 5:
              int v415 = 5;
              goto LABEL_312;
            case 6:
              int v415 = 6;
              goto LABEL_312;
            case 7:
              int v415 = 7;
LABEL_312:
              *(_DWORD *)(result + 16) = v415;
              break;
            default:
              *(_DWORD *)(result + 16) = 0;
              break;
          }
LABEL_313:
          uint64_t v22 = 19;
          goto LABEL_1232;
        case 3:
          unint64_t v75 = v4 + 4;
          uint64_t v76 = (v4 + 4) & 7;
          unint64_t v77 = v75 >> 3;
          if (v76 == 7)
          {
            if ((((unint64_t)(*(unsigned __int8 *)(a2 + v77) | (*(unsigned __int8 *)(a2 + v77 + 1) << 8)) >> 7) & 3) != 0) {
              goto LABEL_82;
            }
          }
          else if (((*(unsigned __int8 *)(a2 + v77) >> v76) & 3) != 0)
          {
            goto LABEL_82;
          }
          *(_WORD *)(result + 8) = 1;
          *(void *)result = 0x1000000010;
          uint64_t v22 = 6;
          goto LABEL_1232;
        default:
          unint64_t v27 = v4 + 4;
          uint64_t v28 = (v4 + 4) & 7;
          unint64_t v29 = v27 >> 3;
          if (v28 == 7) {
            int v30 = *(unsigned __int16 *)(a2 + v29) >> 7;
          }
          else {
            int v30 = *(unsigned __int8 *)(a2 + v29) >> v28;
          }
          int v78 = v30 & 3;
          if (v78 == 1)
          {
            *(_WORD *)(result + 8) = 4;
            *(void *)result = 0xC0000000CLL;
            unint64_t v125 = *a3 + 6;
            unint64_t v126 = v125 & 7;
            unint64_t v127 = v125 >> 3;
            if (v126 > 5) {
              unsigned __int16 v128 = *(_WORD *)(a2 + v127);
            }
            else {
              unsigned __int16 v128 = *(unsigned __int8 *)(a2 + v127);
            }
            int v179 = *(unsigned __int16 *)(result + 20);
            *(_DWORD *)(result + 16) = (v128 >> v126) & 7;
            unsigned int v180 = v179 & 0xFFFFFFFE | (*(unsigned __int8 *)(result + 22) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 9) >> 3)) >> ((*(unsigned char *)a3 + 9) & 7)) & 1;
            *(_WORD *)(result + 20) = v179 & 0xFFFE | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 9) >> 3)) >> ((*(unsigned char *)a3 + 9) & 7)) & 1;
            unsigned int v181 = v180 & 0xFFFFFFFD | (2
                                      * ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 10) >> 3)) >> ((*(unsigned char *)a3 + 10) & 7)) & 1));
            *(_WORD *)(result + 20) = v181;
            unsigned int v182 = v181 & 0xFFFFFFFB | (4
                                      * ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 11) >> 3)) >> ((*(unsigned char *)a3 + 11) & 7)) & 1));
            *(_WORD *)(result + 20) = v182;
            unsigned int v183 = v182 & 0xFFFFFFF7 | (8
                                      * ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 12) >> 3)) >> ((*(unsigned char *)a3 + 12) & 7)) & 1));
            *(_WORD *)(result + 20) = v183;
            unsigned int v184 = v183 & 0xFFFFFFEF | (16
                                      * ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 13) >> 3)) >> ((*(unsigned char *)a3 + 13) & 7)) & 1));
            *(_WORD *)(result + 20) = v184;
            unsigned int v185 = v184 & 0xFFFFFFDF | (32
                                      * ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 14) >> 3)) >> ((*(unsigned char *)a3 + 14) & 7)) & 1));
            *(_WORD *)(result + 20) = v185;
            unsigned int v186 = v185 & 0xFFFFFFBF | (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 15) >> 3)) >> ((*(unsigned char *)a3 + 15) & 7)) & 1) << 6);
            *(_WORD *)(result + 20) = v186;
            unsigned int v187 = v186 & 0xFFFFFF7F | (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 16) >> 3)) >> (*a3 & 7)) & 1) << 7);
            *(_WORD *)(result + 20) = v187;
            unsigned int v188 = v187 & 0xFFFFFEFF | (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 17) >> 3)) >> ((*(unsigned char *)a3 + 17) & 7)) & 1) << 8);
            *(_WORD *)(result + 20) = v188;
            unsigned int v189 = v188 & 0xFFFFFDFF | (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 18) >> 3)) >> ((*(unsigned char *)a3 + 18) & 7)) & 1) << 9);
            *(_WORD *)(result + 20) = v189;
            unsigned int v190 = v189 & 0xFFFFFBFF | (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 19) >> 3)) >> ((*(unsigned char *)a3 + 19) & 7)) & 1) << 10);
            *(_WORD *)(result + 20) = v190;
            unsigned int v191 = v190 & 0xFFFFF7FF | (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 20) >> 3)) >> ((*(unsigned char *)a3 + 20) & 7)) & 1) << 11);
            *(_WORD *)(result + 20) = v191;
            unsigned int v192 = v191 & 0xFFFFEFFF | (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 21) >> 3)) >> ((*(unsigned char *)a3 + 21) & 7)) & 1) << 12);
            *(_WORD *)(result + 20) = v192;
            unsigned int v193 = v192 & 0xFFFFDFFF | (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 22) >> 3)) >> ((*(unsigned char *)a3 + 22) & 7)) & 1) << 13);
            *(_WORD *)(result + 20) = v193;
            unsigned int v194 = v193 & 0xFFFFBFFF | (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 23) >> 3)) >> ((*(unsigned char *)a3 + 23) & 7)) & 1) << 14);
            *(_WORD *)(result + 20) = v194;
            unsigned int v195 = v194 & 0xFFFF7FFF | (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 24) >> 3)) >> (*a3 & 7)) & 1) << 15);
            *(_WORD *)(result + 20) = v195;
            if ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 25) >> 3)) >> ((*(unsigned char *)a3 + 25) & 7))) {
              char v196 = BYTE2(v195) | 1;
            }
            else {
              char v196 = BYTE2(v195) & 0xFE;
            }
            *(_WORD *)(result + 20) = v195;
            *(unsigned char *)(result + 22) = v196;
LABEL_1231:
            uint64_t v22 = 26;
          }
          else
          {
            if (v78)
            {
LABEL_82:
              *a4 = 0;
              return result;
            }
            *(_WORD *)(result + 8) = 10;
            *(void *)result = 0xB0000000BLL;
            unint64_t v79 = *a3 + 9;
            unint64_t v80 = v79 >> 3;
            unint64_t v81 = v79 & 7;
            if (v81)
            {
              unint64_t v82 = ((unint64_t)*(unsigned __int8 *)(v80 + a2 + 7) << 56) | ((unint64_t)*(unsigned __int8 *)(v80 + a2 + 6) << 48);
              unint64_t v83 = (unint64_t)*(unsigned __int8 *)(v80 + a2 + 5) << 40;
            }
            else
            {
              unint64_t v83 = (unint64_t)*(unsigned __int8 *)(v80 + a2 + 6) << 48;
              unint64_t v82 = (unint64_t)*(unsigned __int8 *)(v80 + a2 + 5) << 40;
            }
            v201 = (unsigned __int8 *)(a2 + v80);
            unint64_t v202 = ((v82 | v83 | ((unint64_t)v201[4] << 32) | ((unint64_t)v201[3] << 24) | ((unint64_t)v201[2] << 16) | ((unint64_t)v201[1] << 8) | *v201) >> v81) & 0xFFFFFFFFFFFFFFLL;
            unint64_t v203 = *a3 + 65;
            unint64_t v204 = v203 >> 3;
            unint64_t v205 = v203 & 7;
            if (v205) {
              uint64_t v206 = (*(unsigned __int16 *)(a2 + v204) >> v205);
            }
            else {
              uint64_t v206 = *(unsigned __int8 *)(a2 + v204);
            }
            *(void *)(result + 24) |= v202 | (v206 << 56);
            unint64_t v220 = *a3 + 6;
            unint64_t v221 = v220 & 7;
            unint64_t v222 = v220 >> 3;
            if (v221 > 5) {
              unsigned __int16 v223 = *(_WORD *)(a2 + v222);
            }
            else {
              unsigned __int16 v223 = *(unsigned __int8 *)(a2 + v222);
            }
            switch((v223 >> v221) & 7)
            {
              case 1:
                int v534 = 1;
                goto LABEL_434;
              case 2:
                int v534 = 2;
                goto LABEL_434;
              case 3:
                int v534 = 3;
                goto LABEL_434;
              case 4:
                int v534 = 4;
                goto LABEL_434;
              case 5:
                int v534 = 5;
                goto LABEL_434;
              case 6:
                int v534 = 6;
                goto LABEL_434;
              case 7:
                int v534 = 7;
LABEL_434:
                *(_DWORD *)(result + 16) = v534;
                break;
              default:
                *(_DWORD *)(result + 16) = 0;
                break;
            }
            uint64_t v22 = 73;
          }
          break;
      }
      break;
    default:
      *(_WORD *)(result + 8) = 3;
      *(void *)result = 0;
      unint64_t v8 = *a3 + 2;
      unint64_t v9 = v8 >> 3;
      unint64_t v10 = v8 & 7;
      if (v10) {
        int v11 = (*(unsigned __int16 *)(a2 + v9) >> v10);
      }
      else {
        int v11 = *(unsigned __int8 *)(a2 + v9);
      }
      int v31 = *(unsigned __int16 *)(result + 16) | v11;
      *(_WORD *)(result + 16) = v31;
      uint64_t v32 = *a3;
      if ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 10) >> 3)) >> ((*(unsigned char *)a3 + 10) & 7)))
      {
        unint64_t v33 = v32 + 11;
        unint64_t v34 = (v32 + 11) & 7;
        unint64_t v35 = v33 >> 3;
        if (v34 > 2) {
          unsigned __int16 v36 = *(_WORD *)(a2 + v35);
        }
        else {
          unsigned __int16 v36 = *(unsigned __int8 *)(a2 + v35);
        }
        int v42 = (((v36 >> v34) & 0x3F) << 8) | v31;
        *(_WORD *)(result + 16) = v42;
        if ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 17) >> 3)) >> ((*(unsigned char *)a3 + 17) & 7))) {
          __int16 v43 = v42 | 0x4000;
        }
        else {
          __int16 v43 = v42 & 0xBFFF;
        }
        *(_WORD *)(result + 16) = v43;
LABEL_56:
        uint64_t v22 = 18;
      }
      else
      {
        __int16 v37 = v31 & 0xBFFF;
        *(_WORD *)(result + 16) = v37;
        unint64_t v38 = *a3 + 11;
        unint64_t v39 = v38 & 7;
        unint64_t v40 = v38 >> 3;
        if (v39 > 4) {
          unsigned __int16 v41 = *(_WORD *)(a2 + v40);
        }
        else {
          unsigned __int16 v41 = *(unsigned __int8 *)(a2 + v40);
        }
        *(_WORD *)(result + 16) = (((v41 >> v39) & 0xF) << 8) | v37;
        uint64_t v22 = 15;
      }
      break;
  }
LABEL_1232:
  *a3 += v22;
  return result;
}

uint64_t sub_C2204(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 216))
  {
    long long v4 = *(_OWORD *)a2;
    long long v5 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 29) = *(void *)(a2 + 29);
    *(_OWORD *)a1 = v4;
    *(_OWORD *)(a1 + 16) = v5;
    sub_45AC8(a1 + 40, (__n128 *)(a2 + 40));
    sub_45AC8(a1 + 64, (__n128 *)(a2 + 64));
    sub_45AC8(a1 + 88, (__n128 *)(a2 + 88));
    sub_45AC8(a1 + 112, (__n128 *)(a2 + 112));
    sub_45AC8(a1 + 136, (__n128 *)(a2 + 136));
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    long long v6 = *(_OWORD *)(a2 + 168);
    long long v7 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 184) = v7;
    *(_OWORD *)(a1 + 168) = v6;
  }
  else
  {
    sub_C22B0(a1, (long long *)a2);
  }
  return a1;
}

__n128 sub_C22B0(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  *(void *)(a1 + 29) = *(void *)((char *)a2 + 29);
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 40) = *(long long *)((char *)a2 + 40);
  *(void *)(a1 + 56) = *((void *)a2 + 7);
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 6) = 0;
  *((void *)a2 + 7) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 64) = a2[4];
  *(void *)(a1 + 80) = *((void *)a2 + 10);
  *((void *)a2 + 8) = 0;
  *((void *)a2 + 9) = 0;
  *((void *)a2 + 10) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 88) = *(long long *)((char *)a2 + 88);
  *(void *)(a1 + 104) = *((void *)a2 + 13);
  *((void *)a2 + 11) = 0;
  *((void *)a2 + 12) = 0;
  *((void *)a2 + 13) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 112) = a2[7];
  *(void *)(a1 + 128) = *((void *)a2 + 16);
  *((void *)a2 + 14) = 0;
  *((void *)a2 + 15) = 0;
  *((void *)a2 + 16) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 136) = *(long long *)((char *)a2 + 136);
  uint64_t v4 = *((void *)a2 + 20);
  *(void *)(a1 + 152) = *((void *)a2 + 19);
  *((void *)a2 + 17) = 0;
  *((void *)a2 + 18) = 0;
  *((void *)a2 + 19) = 0;
  *(void *)(a1 + 160) = v4;
  __n128 result = *(__n128 *)((char *)a2 + 168);
  long long v6 = *(long long *)((char *)a2 + 184);
  *(_OWORD *)(a1 + 200) = *(long long *)((char *)a2 + 200);
  *(_OWORD *)(a1 + 184) = v6;
  *(__n128 *)(a1 + 168) = result;
  *(unsigned char *)(a1 + 216) = 1;
  return result;
}

void sub_C2388(uint64_t a1, void *a2)
{
  uint64_t v2 = a1 + 41936;
  if (*(void *)(a1 + 41968))
  {
    uint64_t v15 = a1 + 160;
    uint64_t v5 = a1 + 41976;
    unint64_t v6 = *(void *)(a1 + 41960);
    do
    {
      uint64_t v7 = *(void *)(*(void *)v2 + ((v6 >> 1) & 0x7FFFFFFFFFFFFFF8));
      unsigned int v8 = v6 & 0xF;
      unint64_t v9 = (unsigned __int8 *)(v7 + 264 * (v6 & 0xF));
      if (!v9[32]) {
        break;
      }
      uint64_t v18 = a1;
      v16[0] = v9;
      v16[1] = &v18;
      v16[2] = a1;
      v16[3] = &v17;
      uint64_t v10 = v7 + 264 * v8;
      if (*(unsigned char *)(v10 + 256))
      {
        sub_C25D4((unint64_t)v16, v10 + 40);
        if (!*(unsigned char *)(v10 + 256)) {
          sub_8894();
        }
        sub_46078(a2, v10 + 40);
      }
      else
      {
        unint64_t v11 = *v9;
        if (v11 <= 0x97)
        {
          sub_C25D4((unint64_t)v16, v15 + 224 * *v9);
          uint64_t v12 = (int64x2_t *)(v5 + 48 * v11);
          if (v12[2].i64[1]) {
            goto LABEL_14;
          }
          unint64_t v13 = sub_12C18C();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            unint64_t v20 = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp"
                  "ort/APS/AGXPSAPSParserGen1.cpp";
            __int16 v21 = 1024;
            int v22 = 806;
            __int16 v23 = 2080;
            unint64_t v24 = "!pendingPositionsForClique.empty()";
            _os_log_error_impl(&def_1C1270, v13, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", buf, 0x1Cu);
          }
          if (sub_12C17C()) {
            sub_12C184();
          }
          if (v12[2].i64[1]) {
LABEL_14:
          }
            sub_47E68(v12);
        }
      }
      sub_B9500(*(void *)(*(void *)v2 + ((*(void *)(v2 + 24) >> 1) & 0x7FFFFFFFFFFFFFF8))+ 264 * (*(void *)(v2 + 24) & 0xFLL));
      uint64_t v14 = *(void *)(v2 + 32) - 1;
      unint64_t v6 = *(void *)(v2 + 24) + 1;
      *(void *)(v2 + 24) = v6;
      *(void *)(v2 + 32) = v14;
      if (v6 >= 0x20)
      {
        operator delete(**(void ***)v2);
        *(void *)v2 += 8;
        uint64_t v14 = *(void *)(v2 + 32);
        unint64_t v6 = *(void *)(v2 + 24) - 16;
        *(void *)(v2 + 24) = v6;
      }
    }
    while (v14);
  }
}

unint64_t sub_C25D4(unint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)result;
  unint64_t v4 = result;
  uint64_t v5 = *(void *)(result + 16);
  uint64_t v6 = *(unsigned int *)(a2 + 208);
  switch(*(_DWORD *)(*(void *)result + 4))
  {
    case 0:
      __n128 result = sub_C2A14(*(uint64_t **)(result + 8), *(void *)(v2 + 20), *(_DWORD *)(v2 + 28), v6, v2);
      uint64_t v8 = *(void *)(*(void *)v4 + 8);
      uint64_t v9 = ((v7 & 0x7FF) << 43) | ((HIDWORD(result) & 0x7FF) << 32) | (HIDWORD(v7) << 54) | *(unsigned int *)(*(void *)v4 + 16);
      if (v6 <= 7)
      {
        *((void *)&v10 + 1) = ((v7 & 0x7FF) << 43) | ((HIDWORD(result) & 0x7FF) << 32) | (HIDWORD(v7) << 54) | *(unsigned int *)(*(void *)v4 + 16);
        *(void *)&long long v10 = v8 & 0xFFFFFFFF00000000;
        uint64_t v11 = v5 + 16 * v6 + 39620;
        *(_DWORD *)uint64_t v11 = v8;
        *(int32x2_t *)(v11 + 4) = vzip1_s32((int32x2_t)(v10 >> 32), (int32x2_t)v9);
        *(unsigned char *)(v11 + 12) = 1;
      }
      int v12 = *(unsigned __int8 *)(a2 + 204);
      *(void *)(a2 + 168) = v8;
      *(void *)(a2 + 176) = v9;
      *(unsigned char *)(a2 + 184) = ((v7 & 0x40000000000) != 0) | (2 * result) & 0x3F;
      if (!v12) {
        goto LABEL_45;
      }
      break;
    case 1:
      __n128 result = sub_C2A14(*(uint64_t **)(result + 8), *(void *)(v2 + 12), *(_DWORD *)(v2 + 20), v6, v2);
      unint64_t v14 = 0;
      uint64_t v15 = ((HIDWORD(result) & 0x7FF) << 32) | ((v13 & 0x7FF) << 43) | (HIDWORD(v13) << 54);
      if (v6 <= 7)
      {
        uint64_t v16 = (_DWORD *)(v5 + 16 * v6 + 39620);
        if (*(unsigned char *)(v5 + 16 * v6 + 39632))
        {
          unsigned int v17 = *(unsigned __int16 *)(*(void *)v4 + 8);
          int32x2_t v18 = vadd_s32(*(int32x2_t *)(v5 + 16 * v6 + 39624), (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v17), (uint32x2_t)0xFFFFFFF8FFFFFFFCLL), (int8x8_t)0xF0000000FLL));
          uint64_t v19 = *v16 + (v17 & 0xF);
          unint64_t v14 = v19 | ((unint64_t)v18.u32[0] << 32);
          uint64_t v15 = v18.u32[1] | (unint64_t)v15;
          *uint64_t v16 = v19;
          *(int32x2_t *)(v5 + 16 * v6 + 39624) = v18;
        }
      }
      int v20 = *(unsigned __int8 *)(a2 + 204);
      *(void *)(a2 + 168) = v14;
      *(void *)(a2 + 176) = v15;
      *(unsigned char *)(a2 + 184) = ((v13 & 0x40000000000) != 0) | (2 * result) & 0x3F;
      if (!v20) {
        goto LABEL_45;
      }
      break;
    case 2:
      unsigned int v48 = *(_WORD *)(v2 + 8) & 0x3FF | ((*(_WORD *)(v2 + 10) & 0x3FF) << 10) & 0x800FFFFF | ((*(_WORD *)(v2 + 12) & 0x7FF) << 20);
      uint8x8_t v21 = *(uint8x8_t *)(v2 + 15);
      if (*(unsigned char *)(v2 + 14))
      {
        __int16 v25 = v21.i8[1] & 0xF;
        uint64_t v26 = 3;
        uint64_t v27 = 6;
        if (v21.i8[0]) {
          uint64_t v28 = 3;
        }
        else {
          uint64_t v28 = 6;
        }
        v47.i16[v28] = v25;
        unint64_t v29 = 4;
        if (v21.i8[0]) {
          unint64_t v29 = 2;
        }
        v47.i16[v29] = v25;
        v47.i16[v29 / 2] = v25;
        __int16 v30 = v25 + 1;
        v47.i16[7] = v25 + 1;
        __n128 result = 10;
        if ((v21.i8[0] & 1) == 0) {
          uint64_t v27 = 5;
        }
        v47.i16[v27] = v30;
        if (v21.i8[0]) {
          uint64_t v26 = 5;
        }
        v47.i16[v26] = v30;
        v47.i16[0] = v21.i8[1] & 0xF;
        uint64_t v31 = 4;
        if ((v21.i8[0] & 1) == 0) {
          uint64_t v31 = 1;
        }
        v47.i16[v31] = v30;
        int v32 = (v21.u8[0] >> 1) & 0xF;
        *(_WORD *)((unint64_t)&v46 | (v31 * 2)) = (v21.i8[0] >> 1) & 0xF;
        v46.i16[0] = (v21.i8[0] >> 1) & 0xF;
        __int16 v33 = v46.i16[0] + 1;
        *(_WORD *)((unint64_t)&v46 | (v26 * 2)) = v46.i16[0] + 1;
        *(_WORD *)((unint64_t)&v46 | v29) = v33;
        *(_WORD *)((unint64_t)&v46 | (v27 * 2)) = v32 + 2;
        *(_WORD *)((unint64_t)&v46 & 0xFFFFFFFFFFFFFFF3 | (4 * ((v29 >> 1) & 3))) = v32 + 2;
        *(_WORD *)((unint64_t)&v46 | (v28 * 2)) = v32 + 3;
        v46.i16[7] = v32 + 3;
      }
      else
      {
        uint16x8_t v22 = vmovl_u8(*(uint8x8_t *)(v2 + 23));
        uint16x8_t v46 = vmovl_u8(v21);
        uint16x8_t v47 = v22;
      }
      if (v6 <= 7)
      {
        unsigned int v34 = v48;
        uint64_t v35 = v5 + 16 * v6 + 39748;
        *(_DWORD *)uint64_t v35 = v48 & 0x3FF;
        *(int8x8_t *)(v35 + 4) = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v34), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x7FF000003FFLL);
        *(unsigned char *)(v35 + 12) = 1;
      }
      goto LABEL_44;
    case 3:
      uint8x8_t v23 = *(uint8x8_t *)(v2 + 9);
      if (*(unsigned char *)(v2 + 8))
      {
        __int16 v36 = v23.i8[1] & 0xF;
        uint64_t v37 = 3;
        uint64_t v38 = 6;
        if (v23.i8[0]) {
          uint64_t v39 = 3;
        }
        else {
          uint64_t v39 = 6;
        }
        v47.i16[v39] = v36;
        unint64_t v40 = 4;
        if (v23.i8[0]) {
          unint64_t v40 = 2;
        }
        v47.i16[v40] = v36;
        v47.i16[v40 / 2] = v36;
        __int16 v41 = v36 + 1;
        v47.i16[7] = v36 + 1;
        __n128 result = 10;
        if ((v23.i8[0] & 1) == 0) {
          uint64_t v38 = 5;
        }
        v47.i16[v38] = v41;
        if (v23.i8[0]) {
          uint64_t v37 = 5;
        }
        v47.i16[v37] = v41;
        v47.i16[0] = v23.i8[1] & 0xF;
        uint64_t v42 = 4;
        if ((v23.i8[0] & 1) == 0) {
          uint64_t v42 = 1;
        }
        v47.i16[v42] = v41;
        int v43 = (v23.u8[0] >> 1) & 0xF;
        *(_WORD *)((unint64_t)&v46 | (v42 * 2)) = (v23.i8[0] >> 1) & 0xF;
        v46.i16[0] = (v23.i8[0] >> 1) & 0xF;
        __int16 v44 = v46.i16[0] + 1;
        *(_WORD *)((unint64_t)&v46 | (v37 * 2)) = v46.i16[0] + 1;
        *(_WORD *)((unint64_t)&v46 | v40) = v44;
        *(_WORD *)((unint64_t)&v46 | (v38 * 2)) = v43 + 2;
        *(_WORD *)((unint64_t)&v46 & 0xFFFFFFFFFFFFFFF3 | (4 * ((v40 >> 1) & 3))) = v43 + 2;
        *(_WORD *)((unint64_t)&v46 | (v39 * 2)) = v43 + 3;
        v46.i16[7] = v43 + 3;
      }
      else
      {
        uint16x8_t v24 = vmovl_u8(*(uint8x8_t *)(v2 + 17));
        uint16x8_t v46 = vmovl_u8(v23);
        uint16x8_t v47 = v24;
      }
      if (v6 <= 7 && *(unsigned char *)(v5 + 16 * v6 + 39760)) {
        unsigned int v48 = *(_DWORD *)(v5 + 16 * v6 + 39748) & 0x3FF | ((*(_DWORD *)(v5 + 16 * v6 + 39752) & 0x3FF) << 10) & 0x800FFFFF | v48 & 0x80000000 | ((*(_DWORD *)(v5 + 16 * v6 + 39756) & 0x7FF) << 20);
      }
LABEL_44:
      uint16x8_t v45 = v47;
      *(uint16x8_t *)(a2 + 168) = v46;
      *(uint16x8_t *)(a2 + 184) = v45;
      *(_DWORD *)(a2 + 200) = v48;
      if (!*(unsigned char *)(a2 + 204)) {
LABEL_45:
      }
        *(unsigned char *)(a2 + 204) = 1;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_C2A14@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v5 = *a1;
  if (a2)
  {
    if (a2 == 1)
    {
      uint64_t v6 = HIDWORD(a2) & 0x1F;
      char v7 = HIWORD(a2) >> 12;
      a5 = (HIWORD(a2) & 0xFFF & ~(-1 << v7)) + 1;
      if (a4 <= 7)
      {
        uint64_t v8 = v5 + 16 * a4 + 39492;
        *(_DWORD *)uint64_t v8 = a5;
        *(void *)(v8 + 4) = ((((unsigned __int16)(HIWORD(a2) & 0xFFF) >> v7) & ~(-1 << (a3 & 0xF))) + 1) | ((unint64_t)((((unsigned __int16)(HIWORD(a2) & 0xFFF) >> v7) >> (a3 & 0xF)) + 1) << 32);
        *(unsigned char *)(v8 + 12) = 1;
      }
    }
    else
    {
      LODWORD(v6) = 0;
    }
  }
  else
  {
    uint64_t v6 = HIDWORD(a2) & 0x1F;
    if (a4 <= 7)
    {
      uint64_t v9 = (unsigned int *)(v5 + 16 * a4 + 39492);
      if (*((unsigned char *)v9 + 12))
      {
        a5 = *v9;
      }
      else
      {
        uint64_t v11 = sub_12C18C();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
          sub_1B4C04(v11);
        }
        if (sub_12C17C()) {
          sub_12C184();
        }
      }
    }
  }
  return v6 | (unint64_t)(a5 << 32);
}

void sub_C2B20(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    int v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_WORD *)(a1[2] + 58) & 0x3FFF;
      uint64_t v8 = (char *)v6[731];
      unint64_t v24 = v6[732];
      if ((unint64_t)v8 >= v24)
      {
        long long v10 = (char *)v6[730];
        uint64_t v26 = (v8 - v10) >> 3;
        if ((unint64_t)(v26 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v27 = v24 - (void)v10;
        unint64_t v28 = (uint64_t)(v24 - (void)v10) >> 2;
        if (v28 <= v26 + 1) {
          unint64_t v28 = v26 + 1;
        }
        if (v27 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v28;
        }
        if (v29)
        {
          __int16 v30 = (char *)sub_5714((uint64_t)(v6 + 732), v29);
          uint64_t v8 = (char *)v6[731];
          long long v10 = (char *)v6[730];
        }
        else
        {
          __int16 v30 = 0;
        }
        uint64_t v31 = &v30[8 * v26];
        int v32 = &v30[8 * v29];
        *(void *)uint64_t v31 = v7;
        __int16 v25 = v31 + 8;
        while (v8 != v10)
        {
          uint64_t v34 = *((void *)v8 - 1);
          v8 -= 8;
          *((void *)v31 - 1) = v34;
          v31 -= 8;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1) {
        goto LABEL_38;
      }
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_WORD *)(a1[2] + 58) & 0x3FFF;
      uint64_t v8 = (char *)v6[731];
      unint64_t v9 = v6[732];
      if ((unint64_t)v8 >= v9)
      {
        long long v10 = (char *)v6[730];
        uint64_t v11 = (v8 - v10) >> 3;
        if ((unint64_t)(v11 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v12 = v9 - (void)v10;
        unint64_t v13 = (uint64_t)(v9 - (void)v10) >> 2;
        if (v13 <= v11 + 1) {
          unint64_t v13 = v11 + 1;
        }
        if (v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14)
        {
          uint64_t v15 = (char *)sub_5714((uint64_t)(v6 + 732), v14);
          uint64_t v8 = (char *)v6[731];
          long long v10 = (char *)v6[730];
        }
        else
        {
          uint64_t v15 = 0;
        }
        uint64_t v31 = &v15[8 * v11];
        int v32 = &v15[8 * v14];
        *(void *)uint64_t v31 = v7;
        __int16 v25 = v31 + 8;
        while (v8 != v10)
        {
          uint64_t v33 = *((void *)v8 - 1);
          v8 -= 8;
          *((void *)v31 - 1) = v33;
          v31 -= 8;
        }
LABEL_35:
        v6[730] = v31;
        v6[731] = v25;
        v6[732] = v32;
        if (v10) {
          operator delete(v10);
        }
        goto LABEL_37;
      }
    }
    *(void *)uint64_t v8 = v7;
    __int16 v25 = v8 + 8;
LABEL_37:
    v6[731] = v25;
LABEL_38:
    int v35 = 1 << *(_DWORD *)(v3 + 48);
    if (v35 == 2)
    {
      __int16 v36 = *(void **)a1[1];
      uint64_t v37 = *(_WORD *)(a1[2] + 40) & 0x7FFF;
      uint64_t v38 = (char *)v36[734];
      unint64_t v46 = v36[735];
      if ((unint64_t)v38 >= v46)
      {
        unint64_t v40 = (char *)v36[733];
        uint64_t v48 = (v38 - v40) >> 3;
        if ((unint64_t)(v48 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v49 = v46 - (void)v40;
        unint64_t v50 = (uint64_t)(v46 - (void)v40) >> 2;
        if (v50 <= v48 + 1) {
          unint64_t v50 = v48 + 1;
        }
        if (v49 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v51 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v51 = v50;
        }
        if (v51)
        {
          unint64_t v52 = (char *)sub_5714((uint64_t)(v36 + 735), v51);
          uint64_t v38 = (char *)v36[734];
          unint64_t v40 = (char *)v36[733];
        }
        else
        {
          unint64_t v52 = 0;
        }
        unint64_t v53 = &v52[8 * v48];
        unint64_t v54 = &v52[8 * v51];
        *(void *)unint64_t v53 = v37;
        uint16x8_t v47 = v53 + 8;
        while (v38 != v40)
        {
          uint64_t v56 = *((void *)v38 - 1);
          v38 -= 8;
          *((void *)v53 - 1) = v56;
          v53 -= 8;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v35 != 1) {
        goto LABEL_70;
      }
      __int16 v36 = *(void **)a1[1];
      uint64_t v37 = *(_WORD *)(a1[2] + 40) & 0x7FFF;
      uint64_t v38 = (char *)v36[734];
      unint64_t v39 = v36[735];
      if ((unint64_t)v38 >= v39)
      {
        unint64_t v40 = (char *)v36[733];
        uint64_t v41 = (v38 - v40) >> 3;
        if ((unint64_t)(v41 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v42 = v39 - (void)v40;
        unint64_t v43 = (uint64_t)(v39 - (void)v40) >> 2;
        if (v43 <= v41 + 1) {
          unint64_t v43 = v41 + 1;
        }
        if (v42 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v44 = v43;
        }
        if (v44)
        {
          uint16x8_t v45 = (char *)sub_5714((uint64_t)(v36 + 735), v44);
          uint64_t v38 = (char *)v36[734];
          unint64_t v40 = (char *)v36[733];
        }
        else
        {
          uint16x8_t v45 = 0;
        }
        unint64_t v53 = &v45[8 * v41];
        unint64_t v54 = &v45[8 * v44];
        *(void *)unint64_t v53 = v37;
        uint16x8_t v47 = v53 + 8;
        while (v38 != v40)
        {
          uint64_t v55 = *((void *)v38 - 1);
          v38 -= 8;
          *((void *)v53 - 1) = v55;
          v53 -= 8;
        }
LABEL_67:
        v36[733] = v53;
        v36[734] = v47;
        v36[735] = v54;
        if (v40) {
          operator delete(v40);
        }
        goto LABEL_69;
      }
    }
    *(void *)uint64_t v38 = v37;
    uint16x8_t v47 = v38 + 8;
LABEL_69:
    v36[734] = v47;
LABEL_70:
    int v57 = 1 << *(_DWORD *)(v3 + 48);
    if (v57 == 2)
    {
      unint64_t v58 = *(void **)a1[1];
      uint64_t v59 = *(_WORD *)(a1[2] + 60) & 0x3FFF;
      unint64_t v60 = (char *)v58[737];
      unint64_t v68 = v58[738];
      if ((unint64_t)v60 >= v68)
      {
        unint64_t v62 = (char *)v58[736];
        uint64_t v70 = (v60 - v62) >> 3;
        if ((unint64_t)(v70 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v71 = v68 - (void)v62;
        unint64_t v72 = (uint64_t)(v68 - (void)v62) >> 2;
        if (v72 <= v70 + 1) {
          unint64_t v72 = v70 + 1;
        }
        if (v71 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v73 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v73 = v72;
        }
        if (v73)
        {
          unint64_t v74 = (char *)sub_5714((uint64_t)(v58 + 738), v73);
          unint64_t v60 = (char *)v58[737];
          unint64_t v62 = (char *)v58[736];
        }
        else
        {
          unint64_t v74 = 0;
        }
        unint64_t v75 = &v74[8 * v70];
        uint64_t v76 = &v74[8 * v73];
        *(void *)unint64_t v75 = v59;
        uint64_t v69 = v75 + 8;
        while (v60 != v62)
        {
          uint64_t v78 = *((void *)v60 - 1);
          v60 -= 8;
          *((void *)v75 - 1) = v78;
          v75 -= 8;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v57 != 1) {
        goto LABEL_102;
      }
      unint64_t v58 = *(void **)a1[1];
      uint64_t v59 = *(_WORD *)(a1[2] + 60) & 0x3FFF;
      unint64_t v60 = (char *)v58[737];
      unint64_t v61 = v58[738];
      if ((unint64_t)v60 >= v61)
      {
        unint64_t v62 = (char *)v58[736];
        uint64_t v63 = (v60 - v62) >> 3;
        if ((unint64_t)(v63 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v64 = v61 - (void)v62;
        unint64_t v65 = (uint64_t)(v61 - (void)v62) >> 2;
        if (v65 <= v63 + 1) {
          unint64_t v65 = v63 + 1;
        }
        if (v64 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v66 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v66 = v65;
        }
        if (v66)
        {
          unsigned __int16 v67 = (char *)sub_5714((uint64_t)(v58 + 738), v66);
          unint64_t v60 = (char *)v58[737];
          unint64_t v62 = (char *)v58[736];
        }
        else
        {
          unsigned __int16 v67 = 0;
        }
        unint64_t v75 = &v67[8 * v63];
        uint64_t v76 = &v67[8 * v66];
        *(void *)unint64_t v75 = v59;
        uint64_t v69 = v75 + 8;
        while (v60 != v62)
        {
          uint64_t v77 = *((void *)v60 - 1);
          v60 -= 8;
          *((void *)v75 - 1) = v77;
          v75 -= 8;
        }
LABEL_99:
        v58[736] = v75;
        v58[737] = v69;
        v58[738] = v76;
        if (v62) {
          operator delete(v62);
        }
        goto LABEL_101;
      }
    }
    *(void *)unint64_t v60 = v59;
    uint64_t v69 = v60 + 8;
LABEL_101:
    v58[737] = v69;
LABEL_102:
    int v79 = 1 << *(_DWORD *)(v3 + 48);
    if (v79 == 2)
    {
      unint64_t v80 = *(void **)a1[1];
      uint64_t v81 = *(_WORD *)(a1[2] + 42) & 0x7FFF;
      unint64_t v82 = (char *)v80[740];
      unint64_t v90 = v80[741];
      if ((unint64_t)v82 >= v90)
      {
        int v84 = (char *)v80[739];
        uint64_t v92 = (v82 - v84) >> 3;
        if ((unint64_t)(v92 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v93 = v90 - (void)v84;
        unint64_t v94 = (uint64_t)(v90 - (void)v84) >> 2;
        if (v94 <= v92 + 1) {
          unint64_t v94 = v92 + 1;
        }
        if (v93 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v95 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v95 = v94;
        }
        if (v95)
        {
          unint64_t v96 = (char *)sub_5714((uint64_t)(v80 + 741), v95);
          unint64_t v82 = (char *)v80[740];
          int v84 = (char *)v80[739];
        }
        else
        {
          unint64_t v96 = 0;
        }
        unint64_t v97 = &v96[8 * v92];
        unint64_t v98 = &v96[8 * v95];
        *(void *)unint64_t v97 = v81;
        unint64_t v91 = v97 + 8;
        while (v82 != v84)
        {
          uint64_t v100 = *((void *)v82 - 1);
          v82 -= 8;
          *((void *)v97 - 1) = v100;
          v97 -= 8;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v79 != 1) {
        goto LABEL_134;
      }
      unint64_t v80 = *(void **)a1[1];
      uint64_t v81 = *(_WORD *)(a1[2] + 42) & 0x7FFF;
      unint64_t v82 = (char *)v80[740];
      unint64_t v83 = v80[741];
      if ((unint64_t)v82 >= v83)
      {
        int v84 = (char *)v80[739];
        uint64_t v85 = (v82 - v84) >> 3;
        if ((unint64_t)(v85 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v86 = v83 - (void)v84;
        unint64_t v87 = (uint64_t)(v83 - (void)v84) >> 2;
        if (v87 <= v85 + 1) {
          unint64_t v87 = v85 + 1;
        }
        if (v86 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v88 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v88 = v87;
        }
        if (v88)
        {
          int v89 = (char *)sub_5714((uint64_t)(v80 + 741), v88);
          unint64_t v82 = (char *)v80[740];
          int v84 = (char *)v80[739];
        }
        else
        {
          int v89 = 0;
        }
        unint64_t v97 = &v89[8 * v85];
        unint64_t v98 = &v89[8 * v88];
        *(void *)unint64_t v97 = v81;
        unint64_t v91 = v97 + 8;
        while (v82 != v84)
        {
          uint64_t v99 = *((void *)v82 - 1);
          v82 -= 8;
          *((void *)v97 - 1) = v99;
          v97 -= 8;
        }
LABEL_131:
        v80[739] = v97;
        v80[740] = v91;
        v80[741] = v98;
        if (v84) {
          operator delete(v84);
        }
        goto LABEL_133;
      }
    }
    *(void *)unint64_t v82 = v81;
    unint64_t v91 = v82 + 8;
LABEL_133:
    v80[740] = v91;
LABEL_134:
    int v101 = 1 << *(_DWORD *)(v3 + 48);
    if (v101 == 2)
    {
      unint64_t v102 = *(void **)a1[1];
      uint64_t v103 = *(_WORD *)(a1[2] + 62) & 0x3FFF;
      unint64_t v104 = (char *)v102[743];
      unint64_t v112 = v102[744];
      if ((unint64_t)v104 >= v112)
      {
        unint64_t v106 = (char *)v102[742];
        uint64_t v114 = (v104 - v106) >> 3;
        if ((unint64_t)(v114 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v115 = v112 - (void)v106;
        unint64_t v116 = (uint64_t)(v112 - (void)v106) >> 2;
        if (v116 <= v114 + 1) {
          unint64_t v116 = v114 + 1;
        }
        if (v115 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v117 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v117 = v116;
        }
        if (v117)
        {
          unint64_t v118 = (char *)sub_5714((uint64_t)(v102 + 744), v117);
          unint64_t v104 = (char *)v102[743];
          unint64_t v106 = (char *)v102[742];
        }
        else
        {
          unint64_t v118 = 0;
        }
        uint64_t v119 = &v118[8 * v114];
        unint64_t v120 = &v118[8 * v117];
        *(void *)uint64_t v119 = v103;
        unint64_t v113 = v119 + 8;
        while (v104 != v106)
        {
          uint64_t v122 = *((void *)v104 - 1);
          v104 -= 8;
          *((void *)v119 - 1) = v122;
          v119 -= 8;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v101 != 1) {
        goto LABEL_166;
      }
      unint64_t v102 = *(void **)a1[1];
      uint64_t v103 = *(_WORD *)(a1[2] + 62) & 0x3FFF;
      unint64_t v104 = (char *)v102[743];
      unint64_t v105 = v102[744];
      if ((unint64_t)v104 >= v105)
      {
        unint64_t v106 = (char *)v102[742];
        uint64_t v107 = (v104 - v106) >> 3;
        if ((unint64_t)(v107 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v108 = v105 - (void)v106;
        unint64_t v109 = (uint64_t)(v105 - (void)v106) >> 2;
        if (v109 <= v107 + 1) {
          unint64_t v109 = v107 + 1;
        }
        if (v108 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v110 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v110 = v109;
        }
        if (v110)
        {
          int v111 = (char *)sub_5714((uint64_t)(v102 + 744), v110);
          unint64_t v104 = (char *)v102[743];
          unint64_t v106 = (char *)v102[742];
        }
        else
        {
          int v111 = 0;
        }
        uint64_t v119 = &v111[8 * v107];
        unint64_t v120 = &v111[8 * v110];
        *(void *)uint64_t v119 = v103;
        unint64_t v113 = v119 + 8;
        while (v104 != v106)
        {
          uint64_t v121 = *((void *)v104 - 1);
          v104 -= 8;
          *((void *)v119 - 1) = v121;
          v119 -= 8;
        }
LABEL_163:
        v102[742] = v119;
        v102[743] = v113;
        v102[744] = v120;
        if (v106) {
          operator delete(v106);
        }
        goto LABEL_165;
      }
    }
    *(void *)unint64_t v104 = v103;
    unint64_t v113 = v104 + 8;
LABEL_165:
    v102[743] = v113;
LABEL_166:
    int v123 = 1 << *(_DWORD *)(v3 + 48);
    if (v123 == 2)
    {
      unsigned int v124 = *(void **)a1[1];
      uint64_t v125 = *(_WORD *)(a1[2] + 44) & 0x7FFF;
      unint64_t v126 = (char *)v124[746];
      unint64_t v134 = v124[747];
      if ((unint64_t)v126 >= v134)
      {
        unsigned __int16 v128 = (char *)v124[745];
        uint64_t v136 = (v126 - v128) >> 3;
        if ((unint64_t)(v136 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v137 = v134 - (void)v128;
        unint64_t v138 = (uint64_t)(v134 - (void)v128) >> 2;
        if (v138 <= v136 + 1) {
          unint64_t v138 = v136 + 1;
        }
        if (v137 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v139 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v139 = v138;
        }
        if (v139)
        {
          unint64_t v140 = (char *)sub_5714((uint64_t)(v124 + 747), v139);
          unint64_t v126 = (char *)v124[746];
          unsigned __int16 v128 = (char *)v124[745];
        }
        else
        {
          unint64_t v140 = 0;
        }
        unint64_t v141 = &v140[8 * v136];
        unint64_t v142 = &v140[8 * v139];
        *(void *)unint64_t v141 = v125;
        unint64_t v135 = v141 + 8;
        while (v126 != v128)
        {
          uint64_t v144 = *((void *)v126 - 1);
          v126 -= 8;
          *((void *)v141 - 1) = v144;
          v141 -= 8;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v123 != 1) {
        goto LABEL_198;
      }
      unsigned int v124 = *(void **)a1[1];
      uint64_t v125 = *(_WORD *)(a1[2] + 44) & 0x7FFF;
      unint64_t v126 = (char *)v124[746];
      unint64_t v127 = v124[747];
      if ((unint64_t)v126 >= v127)
      {
        unsigned __int16 v128 = (char *)v124[745];
        uint64_t v129 = (v126 - v128) >> 3;
        if ((unint64_t)(v129 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v130 = v127 - (void)v128;
        unint64_t v131 = (uint64_t)(v127 - (void)v128) >> 2;
        if (v131 <= v129 + 1) {
          unint64_t v131 = v129 + 1;
        }
        if (v130 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v132 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v132 = v131;
        }
        if (v132)
        {
          unint64_t v133 = (char *)sub_5714((uint64_t)(v124 + 747), v132);
          unint64_t v126 = (char *)v124[746];
          unsigned __int16 v128 = (char *)v124[745];
        }
        else
        {
          unint64_t v133 = 0;
        }
        unint64_t v141 = &v133[8 * v129];
        unint64_t v142 = &v133[8 * v132];
        *(void *)unint64_t v141 = v125;
        unint64_t v135 = v141 + 8;
        while (v126 != v128)
        {
          uint64_t v143 = *((void *)v126 - 1);
          v126 -= 8;
          *((void *)v141 - 1) = v143;
          v141 -= 8;
        }
LABEL_195:
        v124[745] = v141;
        v124[746] = v135;
        v124[747] = v142;
        if (v128) {
          operator delete(v128);
        }
        goto LABEL_197;
      }
    }
    *(void *)unint64_t v126 = v125;
    unint64_t v135 = v126 + 8;
LABEL_197:
    v124[746] = v135;
LABEL_198:
    int v145 = 1 << *(_DWORD *)(v3 + 48);
    if (v145 == 2)
    {
      unint64_t v146 = *(void **)a1[1];
      uint64_t v147 = *(_DWORD *)(a1[2] + 24) & 0x3FFFFLL;
      unint64_t v148 = (uint64_t *)v146[749];
      unint64_t v156 = v146[750];
      if ((unint64_t)v148 >= v156)
      {
        unint64_t v150 = (uint64_t *)v146[748];
        uint64_t v158 = v148 - v150;
        if ((unint64_t)(v158 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v159 = v156 - (void)v150;
        unint64_t v160 = (uint64_t)(v156 - (void)v150) >> 2;
        if (v160 <= v158 + 1) {
          unint64_t v160 = v158 + 1;
        }
        if (v159 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v161 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v161 = v160;
        }
        if (v161)
        {
          unint64_t v162 = (char *)sub_5714((uint64_t)(v146 + 750), v161);
          unint64_t v148 = (uint64_t *)v146[749];
          unint64_t v150 = (uint64_t *)v146[748];
        }
        else
        {
          unint64_t v162 = 0;
        }
        unsigned int v163 = (uint64_t *)&v162[8 * v158];
        unint64_t v164 = &v162[8 * v161];
        uint64_t *v163 = v147;
        unsigned int v157 = v163 + 1;
        while (v148 != v150)
        {
          uint64_t v166 = *--v148;
          *--unsigned int v163 = v166;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v145 != 1) {
        goto LABEL_230;
      }
      unint64_t v146 = *(void **)a1[1];
      uint64_t v147 = *(_DWORD *)(a1[2] + 24) & 0x3FFFFLL;
      unint64_t v148 = (uint64_t *)v146[749];
      unint64_t v149 = v146[750];
      if ((unint64_t)v148 >= v149)
      {
        unint64_t v150 = (uint64_t *)v146[748];
        uint64_t v151 = v148 - v150;
        if ((unint64_t)(v151 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v152 = v149 - (void)v150;
        unint64_t v153 = (uint64_t)(v149 - (void)v150) >> 2;
        if (v153 <= v151 + 1) {
          unint64_t v153 = v151 + 1;
        }
        if (v152 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v154 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v154 = v153;
        }
        if (v154)
        {
          uint64_t v155 = (char *)sub_5714((uint64_t)(v146 + 750), v154);
          unint64_t v148 = (uint64_t *)v146[749];
          unint64_t v150 = (uint64_t *)v146[748];
        }
        else
        {
          uint64_t v155 = 0;
        }
        unsigned int v163 = (uint64_t *)&v155[8 * v151];
        unint64_t v164 = &v155[8 * v154];
        uint64_t *v163 = v147;
        unsigned int v157 = v163 + 1;
        while (v148 != v150)
        {
          uint64_t v165 = *--v148;
          *--unsigned int v163 = v165;
        }
LABEL_227:
        v146[748] = v163;
        v146[749] = v157;
        v146[750] = v164;
        if (v150) {
          operator delete(v150);
        }
        goto LABEL_229;
      }
    }
    *unint64_t v148 = v147;
    unsigned int v157 = v148 + 1;
LABEL_229:
    v146[749] = v157;
LABEL_230:
    int v167 = 1 << *(_DWORD *)(v3 + 48);
    if (v167 == 2)
    {
      unint64_t v168 = *(void **)a1[1];
      uint64_t v169 = *(_WORD *)(a1[2] + 52) & 0x7FFF;
      unint64_t v170 = (char *)v168[752];
      unint64_t v178 = v168[753];
      if ((unint64_t)v170 >= v178)
      {
        unint64_t v172 = (char *)v168[751];
        uint64_t v180 = (v170 - v172) >> 3;
        if ((unint64_t)(v180 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v181 = v178 - (void)v172;
        unint64_t v182 = (uint64_t)(v178 - (void)v172) >> 2;
        if (v182 <= v180 + 1) {
          unint64_t v182 = v180 + 1;
        }
        if (v181 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v183 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v183 = v182;
        }
        if (v183)
        {
          unsigned int v184 = (char *)sub_5714((uint64_t)(v168 + 753), v183);
          unint64_t v170 = (char *)v168[752];
          unint64_t v172 = (char *)v168[751];
        }
        else
        {
          unsigned int v184 = 0;
        }
        unsigned int v185 = &v184[8 * v180];
        unsigned int v186 = &v184[8 * v183];
        *(void *)unsigned int v185 = v169;
        int v179 = v185 + 8;
        while (v170 != v172)
        {
          uint64_t v188 = *((void *)v170 - 1);
          v170 -= 8;
          *((void *)v185 - 1) = v188;
          v185 -= 8;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v167 != 1) {
        goto LABEL_262;
      }
      unint64_t v168 = *(void **)a1[1];
      uint64_t v169 = *(_WORD *)(a1[2] + 52) & 0x7FFF;
      unint64_t v170 = (char *)v168[752];
      unint64_t v171 = v168[753];
      if ((unint64_t)v170 >= v171)
      {
        unint64_t v172 = (char *)v168[751];
        uint64_t v173 = (v170 - v172) >> 3;
        if ((unint64_t)(v173 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v174 = v171 - (void)v172;
        unint64_t v175 = (uint64_t)(v171 - (void)v172) >> 2;
        if (v175 <= v173 + 1) {
          unint64_t v175 = v173 + 1;
        }
        if (v174 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v176 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v176 = v175;
        }
        if (v176)
        {
          unint64_t v177 = (char *)sub_5714((uint64_t)(v168 + 753), v176);
          unint64_t v170 = (char *)v168[752];
          unint64_t v172 = (char *)v168[751];
        }
        else
        {
          unint64_t v177 = 0;
        }
        unsigned int v185 = &v177[8 * v173];
        unsigned int v186 = &v177[8 * v176];
        *(void *)unsigned int v185 = v169;
        int v179 = v185 + 8;
        while (v170 != v172)
        {
          uint64_t v187 = *((void *)v170 - 1);
          v170 -= 8;
          *((void *)v185 - 1) = v187;
          v185 -= 8;
        }
LABEL_259:
        v168[751] = v185;
        v168[752] = v179;
        v168[753] = v186;
        if (v172) {
          operator delete(v172);
        }
        goto LABEL_261;
      }
    }
    *(void *)unint64_t v170 = v169;
    int v179 = v170 + 8;
LABEL_261:
    v168[752] = v179;
LABEL_262:
    int v189 = 1 << *(_DWORD *)(v3 + 48);
    if (v189 == 2)
    {
      unsigned int v190 = *(void **)a1[1];
      uint64_t v191 = *(_WORD *)(a1[2] + 34) & 0x3FFF;
      unsigned int v192 = (char *)v190[755];
      unint64_t v200 = v190[756];
      if ((unint64_t)v192 >= v200)
      {
        unsigned int v194 = (char *)v190[754];
        uint64_t v202 = (v192 - v194) >> 3;
        if ((unint64_t)(v202 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v203 = v200 - (void)v194;
        unint64_t v204 = (uint64_t)(v200 - (void)v194) >> 2;
        if (v204 <= v202 + 1) {
          unint64_t v204 = v202 + 1;
        }
        if (v203 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v205 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v205 = v204;
        }
        if (v205)
        {
          uint64_t v206 = (char *)sub_5714((uint64_t)(v190 + 756), v205);
          unsigned int v192 = (char *)v190[755];
          unsigned int v194 = (char *)v190[754];
        }
        else
        {
          uint64_t v206 = 0;
        }
        int v207 = &v206[8 * v202];
        unint64_t v208 = &v206[8 * v205];
        *(void *)int v207 = v191;
        v201 = v207 + 8;
        while (v192 != v194)
        {
          uint64_t v210 = *((void *)v192 - 1);
          v192 -= 8;
          *((void *)v207 - 1) = v210;
          v207 -= 8;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v189 != 1) {
        goto LABEL_294;
      }
      unsigned int v190 = *(void **)a1[1];
      uint64_t v191 = *(_WORD *)(a1[2] + 34) & 0x3FFF;
      unsigned int v192 = (char *)v190[755];
      unint64_t v193 = v190[756];
      if ((unint64_t)v192 >= v193)
      {
        unsigned int v194 = (char *)v190[754];
        uint64_t v195 = (v192 - v194) >> 3;
        if ((unint64_t)(v195 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v196 = v193 - (void)v194;
        unint64_t v197 = (uint64_t)(v193 - (void)v194) >> 2;
        if (v197 <= v195 + 1) {
          unint64_t v197 = v195 + 1;
        }
        if (v196 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v198 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v198 = v197;
        }
        if (v198)
        {
          unint64_t v199 = (char *)sub_5714((uint64_t)(v190 + 756), v198);
          unsigned int v192 = (char *)v190[755];
          unsigned int v194 = (char *)v190[754];
        }
        else
        {
          unint64_t v199 = 0;
        }
        int v207 = &v199[8 * v195];
        unint64_t v208 = &v199[8 * v198];
        *(void *)int v207 = v191;
        v201 = v207 + 8;
        while (v192 != v194)
        {
          uint64_t v209 = *((void *)v192 - 1);
          v192 -= 8;
          *((void *)v207 - 1) = v209;
          v207 -= 8;
        }
LABEL_291:
        v190[754] = v207;
        v190[755] = v201;
        v190[756] = v208;
        if (v194) {
          operator delete(v194);
        }
        goto LABEL_293;
      }
    }
    *(void *)unsigned int v192 = v191;
    v201 = v192 + 8;
LABEL_293:
    v190[755] = v201;
LABEL_294:
    int v211 = 1 << *(_DWORD *)(v3 + 48);
    if (v211 == 2)
    {
      uint64_t v212 = *(void **)a1[1];
      uint64_t v213 = *(_WORD *)(a1[2] + 54) & 0x7FFF;
      unint64_t v214 = (char *)v212[758];
      unint64_t v222 = v212[759];
      if ((unint64_t)v214 >= v222)
      {
        unint64_t v216 = (char *)v212[757];
        uint64_t v224 = (v214 - v216) >> 3;
        if ((unint64_t)(v224 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v225 = v222 - (void)v216;
        unint64_t v226 = (uint64_t)(v222 - (void)v216) >> 2;
        if (v226 <= v224 + 1) {
          unint64_t v226 = v224 + 1;
        }
        if (v225 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v227 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v227 = v226;
        }
        if (v227)
        {
          unsigned __int16 v228 = (char *)sub_5714((uint64_t)(v212 + 759), v227);
          unint64_t v214 = (char *)v212[758];
          unint64_t v216 = (char *)v212[757];
        }
        else
        {
          unsigned __int16 v228 = 0;
        }
        unint64_t v229 = &v228[8 * v224];
        unint64_t v230 = &v228[8 * v227];
        *(void *)unint64_t v229 = v213;
        unsigned __int16 v223 = v229 + 8;
        while (v214 != v216)
        {
          uint64_t v232 = *((void *)v214 - 1);
          v214 -= 8;
          *((void *)v229 - 1) = v232;
          v229 -= 8;
        }
        goto LABEL_323;
      }
    }
    else
    {
      if (v211 != 1) {
        goto LABEL_326;
      }
      uint64_t v212 = *(void **)a1[1];
      uint64_t v213 = *(_WORD *)(a1[2] + 54) & 0x7FFF;
      unint64_t v214 = (char *)v212[758];
      unint64_t v215 = v212[759];
      if ((unint64_t)v214 >= v215)
      {
        unint64_t v216 = (char *)v212[757];
        uint64_t v217 = (v214 - v216) >> 3;
        if ((unint64_t)(v217 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v218 = v215 - (void)v216;
        unint64_t v219 = (uint64_t)(v215 - (void)v216) >> 2;
        if (v219 <= v217 + 1) {
          unint64_t v219 = v217 + 1;
        }
        if (v218 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v220 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v220 = v219;
        }
        if (v220)
        {
          unint64_t v221 = (char *)sub_5714((uint64_t)(v212 + 759), v220);
          unint64_t v214 = (char *)v212[758];
          unint64_t v216 = (char *)v212[757];
        }
        else
        {
          unint64_t v221 = 0;
        }
        unint64_t v229 = &v221[8 * v217];
        unint64_t v230 = &v221[8 * v220];
        *(void *)unint64_t v229 = v213;
        unsigned __int16 v223 = v229 + 8;
        while (v214 != v216)
        {
          uint64_t v231 = *((void *)v214 - 1);
          v214 -= 8;
          *((void *)v229 - 1) = v231;
          v229 -= 8;
        }
LABEL_323:
        v212[757] = v229;
        v212[758] = v223;
        v212[759] = v230;
        if (v216) {
          operator delete(v216);
        }
        goto LABEL_325;
      }
    }
    *(void *)unint64_t v214 = v213;
    unsigned __int16 v223 = v214 + 8;
LABEL_325:
    v212[758] = v223;
LABEL_326:
    int v233 = 1 << *(_DWORD *)(v3 + 48);
    if (v233 == 2)
    {
      unint64_t v234 = *(void **)a1[1];
      uint64_t v235 = *(_WORD *)(a1[2] + 36) & 0x3FFF;
      unint64_t v236 = (char *)v234[761];
      unint64_t v244 = v234[762];
      if ((unint64_t)v236 >= v244)
      {
        unint64_t v238 = (char *)v234[760];
        uint64_t v246 = (v236 - v238) >> 3;
        if ((unint64_t)(v246 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v247 = v244 - (void)v238;
        unint64_t v248 = (uint64_t)(v244 - (void)v238) >> 2;
        if (v248 <= v246 + 1) {
          unint64_t v248 = v246 + 1;
        }
        if (v247 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v249 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v249 = v248;
        }
        if (v249)
        {
          unsigned int v250 = (char *)sub_5714((uint64_t)(v234 + 762), v249);
          unint64_t v236 = (char *)v234[761];
          unint64_t v238 = (char *)v234[760];
        }
        else
        {
          unsigned int v250 = 0;
        }
        __int16 v251 = &v250[8 * v246];
        uint64_t v252 = &v250[8 * v249];
        *(void *)__int16 v251 = v235;
        char v245 = v251 + 8;
        while (v236 != v238)
        {
          uint64_t v254 = *((void *)v236 - 1);
          v236 -= 8;
          *((void *)v251 - 1) = v254;
          v251 -= 8;
        }
        goto LABEL_355;
      }
    }
    else
    {
      if (v233 != 1) {
        goto LABEL_358;
      }
      unint64_t v234 = *(void **)a1[1];
      uint64_t v235 = *(_WORD *)(a1[2] + 36) & 0x3FFF;
      unint64_t v236 = (char *)v234[761];
      unint64_t v237 = v234[762];
      if ((unint64_t)v236 >= v237)
      {
        unint64_t v238 = (char *)v234[760];
        uint64_t v239 = (v236 - v238) >> 3;
        if ((unint64_t)(v239 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v240 = v237 - (void)v238;
        unint64_t v241 = (uint64_t)(v237 - (void)v238) >> 2;
        if (v241 <= v239 + 1) {
          unint64_t v241 = v239 + 1;
        }
        if (v240 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v242 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v242 = v241;
        }
        if (v242)
        {
          unsigned int v243 = (char *)sub_5714((uint64_t)(v234 + 762), v242);
          unint64_t v236 = (char *)v234[761];
          unint64_t v238 = (char *)v234[760];
        }
        else
        {
          unsigned int v243 = 0;
        }
        __int16 v251 = &v243[8 * v239];
        uint64_t v252 = &v243[8 * v242];
        *(void *)__int16 v251 = v235;
        char v245 = v251 + 8;
        while (v236 != v238)
        {
          uint64_t v253 = *((void *)v236 - 1);
          v236 -= 8;
          *((void *)v251 - 1) = v253;
          v251 -= 8;
        }
LABEL_355:
        v234[760] = v251;
        v234[761] = v245;
        v234[762] = v252;
        if (v238) {
          operator delete(v238);
        }
        goto LABEL_357;
      }
    }
    *(void *)unint64_t v236 = v235;
    char v245 = v236 + 8;
LABEL_357:
    v234[761] = v245;
LABEL_358:
    int v255 = 1 << *(_DWORD *)(v3 + 48);
    if (v255 == 2)
    {
      unsigned __int16 v256 = *(void **)a1[1];
      uint64_t v257 = *(_WORD *)(a1[2] + 56) & 0x7FFF;
      unint64_t v258 = (char *)v256[764];
      unint64_t v266 = v256[765];
      if ((unint64_t)v258 >= v266)
      {
        unint64_t v260 = (char *)v256[763];
        uint64_t v268 = (v258 - v260) >> 3;
        if ((unint64_t)(v268 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v269 = v266 - (void)v260;
        unint64_t v270 = (uint64_t)(v266 - (void)v260) >> 2;
        if (v270 <= v268 + 1) {
          unint64_t v270 = v268 + 1;
        }
        if (v269 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v271 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v271 = v270;
        }
        if (v271)
        {
          unint64_t v272 = (char *)sub_5714((uint64_t)(v256 + 765), v271);
          unint64_t v258 = (char *)v256[764];
          unint64_t v260 = (char *)v256[763];
        }
        else
        {
          unint64_t v272 = 0;
        }
        unint64_t v273 = &v272[8 * v268];
        unsigned int v274 = &v272[8 * v271];
        *(void *)unint64_t v273 = v257;
        unsigned int v267 = v273 + 8;
        while (v258 != v260)
        {
          uint64_t v276 = *((void *)v258 - 1);
          v258 -= 8;
          *((void *)v273 - 1) = v276;
          v273 -= 8;
        }
        goto LABEL_387;
      }
    }
    else
    {
      if (v255 != 1) {
        goto LABEL_390;
      }
      unsigned __int16 v256 = *(void **)a1[1];
      uint64_t v257 = *(_WORD *)(a1[2] + 56) & 0x7FFF;
      unint64_t v258 = (char *)v256[764];
      unint64_t v259 = v256[765];
      if ((unint64_t)v258 >= v259)
      {
        unint64_t v260 = (char *)v256[763];
        uint64_t v261 = (v258 - v260) >> 3;
        if ((unint64_t)(v261 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v262 = v259 - (void)v260;
        unint64_t v263 = (uint64_t)(v259 - (void)v260) >> 2;
        if (v263 <= v261 + 1) {
          unint64_t v263 = v261 + 1;
        }
        if (v262 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v264 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v264 = v263;
        }
        if (v264)
        {
          unint64_t v265 = (char *)sub_5714((uint64_t)(v256 + 765), v264);
          unint64_t v258 = (char *)v256[764];
          unint64_t v260 = (char *)v256[763];
        }
        else
        {
          unint64_t v265 = 0;
        }
        unint64_t v273 = &v265[8 * v261];
        unsigned int v274 = &v265[8 * v264];
        *(void *)unint64_t v273 = v257;
        unsigned int v267 = v273 + 8;
        while (v258 != v260)
        {
          uint64_t v275 = *((void *)v258 - 1);
          v258 -= 8;
          *((void *)v273 - 1) = v275;
          v273 -= 8;
        }
LABEL_387:
        v256[763] = v273;
        v256[764] = v267;
        v256[765] = v274;
        if (v260) {
          operator delete(v260);
        }
        goto LABEL_389;
      }
    }
    *(void *)unint64_t v258 = v257;
    unsigned int v267 = v258 + 8;
LABEL_389:
    v256[764] = v267;
LABEL_390:
    int v277 = 1 << *(_DWORD *)(v3 + 48);
    if (v277 == 2)
    {
      unint64_t v278 = *(void **)a1[1];
      uint64_t v279 = *(_WORD *)(a1[2] + 38) & 0x3FFF;
      unint64_t v280 = (char *)v278[767];
      unint64_t v288 = v278[768];
      if ((unint64_t)v280 >= v288)
      {
        unint64_t v282 = (char *)v278[766];
        uint64_t v290 = (v280 - v282) >> 3;
        if ((unint64_t)(v290 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v291 = v288 - (void)v282;
        unint64_t v292 = (uint64_t)(v288 - (void)v282) >> 2;
        if (v292 <= v290 + 1) {
          unint64_t v292 = v290 + 1;
        }
        if (v291 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v293 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v293 = v292;
        }
        if (v293)
        {
          unint64_t v294 = (char *)sub_5714((uint64_t)(v278 + 768), v293);
          unint64_t v280 = (char *)v278[767];
          unint64_t v282 = (char *)v278[766];
        }
        else
        {
          unint64_t v294 = 0;
        }
        unint64_t v295 = &v294[8 * v290];
        unint64_t v296 = &v294[8 * v293];
        *(void *)unint64_t v295 = v279;
        unsigned int v289 = v295 + 8;
        while (v280 != v282)
        {
          uint64_t v298 = *((void *)v280 - 1);
          v280 -= 8;
          *((void *)v295 - 1) = v298;
          v295 -= 8;
        }
        goto LABEL_419;
      }
    }
    else
    {
      if (v277 != 1) {
        goto LABEL_422;
      }
      unint64_t v278 = *(void **)a1[1];
      uint64_t v279 = *(_WORD *)(a1[2] + 38) & 0x3FFF;
      unint64_t v280 = (char *)v278[767];
      unint64_t v281 = v278[768];
      if ((unint64_t)v280 >= v281)
      {
        unint64_t v282 = (char *)v278[766];
        uint64_t v283 = (v280 - v282) >> 3;
        if ((unint64_t)(v283 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v284 = v281 - (void)v282;
        unint64_t v285 = (uint64_t)(v281 - (void)v282) >> 2;
        if (v285 <= v283 + 1) {
          unint64_t v285 = v283 + 1;
        }
        if (v284 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v286 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v286 = v285;
        }
        if (v286)
        {
          unint64_t v287 = (char *)sub_5714((uint64_t)(v278 + 768), v286);
          unint64_t v280 = (char *)v278[767];
          unint64_t v282 = (char *)v278[766];
        }
        else
        {
          unint64_t v287 = 0;
        }
        unint64_t v295 = &v287[8 * v283];
        unint64_t v296 = &v287[8 * v286];
        *(void *)unint64_t v295 = v279;
        unsigned int v289 = v295 + 8;
        while (v280 != v282)
        {
          uint64_t v297 = *((void *)v280 - 1);
          v280 -= 8;
          *((void *)v295 - 1) = v297;
          v295 -= 8;
        }
LABEL_419:
        v278[766] = v295;
        v278[767] = v289;
        v278[768] = v296;
        if (v282) {
          operator delete(v282);
        }
        goto LABEL_421;
      }
    }
    *(void *)unint64_t v280 = v279;
    unsigned int v289 = v280 + 8;
LABEL_421:
    v278[767] = v289;
LABEL_422:
    int v299 = 1 << *(_DWORD *)(v3 + 48);
    if (v299 == 2)
    {
      unsigned int v300 = *(void **)a1[1];
      unint64_t v301 = ((unint64_t)*(unsigned int *)(a1[2] + 20) >> 2) & 0xFFFFF;
      unint64_t v302 = (unint64_t *)v300[770];
      unint64_t v310 = v300[771];
      if ((unint64_t)v302 >= v310)
      {
        unsigned int v304 = (unint64_t *)v300[769];
        uint64_t v312 = v302 - v304;
        if ((unint64_t)(v312 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v313 = v310 - (void)v304;
        unint64_t v314 = (uint64_t)(v310 - (void)v304) >> 2;
        if (v314 <= v312 + 1) {
          unint64_t v314 = v312 + 1;
        }
        if (v313 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v315 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v315 = v314;
        }
        if (v315)
        {
          unint64_t v316 = (char *)sub_5714((uint64_t)(v300 + 771), v315);
          unint64_t v302 = (unint64_t *)v300[770];
          unsigned int v304 = (unint64_t *)v300[769];
        }
        else
        {
          unint64_t v316 = 0;
        }
        unint64_t v317 = (unint64_t *)&v316[8 * v312];
        unsigned int v318 = &v316[8 * v315];
        unint64_t *v317 = v301;
        unint64_t v311 = v317 + 1;
        while (v302 != v304)
        {
          unint64_t v320 = *--v302;
          *--unint64_t v317 = v320;
        }
        goto LABEL_451;
      }
    }
    else
    {
      if (v299 != 1) {
        goto LABEL_454;
      }
      unsigned int v300 = *(void **)a1[1];
      unint64_t v301 = ((unint64_t)*(unsigned int *)(a1[2] + 20) >> 2) & 0xFFFFF;
      unint64_t v302 = (unint64_t *)v300[770];
      unint64_t v303 = v300[771];
      if ((unint64_t)v302 >= v303)
      {
        unsigned int v304 = (unint64_t *)v300[769];
        uint64_t v305 = v302 - v304;
        if ((unint64_t)(v305 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v306 = v303 - (void)v304;
        unint64_t v307 = (uint64_t)(v303 - (void)v304) >> 2;
        if (v307 <= v305 + 1) {
          unint64_t v307 = v305 + 1;
        }
        if (v306 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v308 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v308 = v307;
        }
        if (v308)
        {
          unsigned __int16 v309 = (char *)sub_5714((uint64_t)(v300 + 771), v308);
          unint64_t v302 = (unint64_t *)v300[770];
          unsigned int v304 = (unint64_t *)v300[769];
        }
        else
        {
          unsigned __int16 v309 = 0;
        }
        unint64_t v317 = (unint64_t *)&v309[8 * v305];
        unsigned int v318 = &v309[8 * v308];
        unint64_t *v317 = v301;
        unint64_t v311 = v317 + 1;
        while (v302 != v304)
        {
          unint64_t v319 = *--v302;
          *--unint64_t v317 = v319;
        }
LABEL_451:
        v300[769] = v317;
        v300[770] = v311;
        v300[771] = v318;
        if (v304) {
          operator delete(v304);
        }
        goto LABEL_453;
      }
    }
    *unint64_t v302 = v301;
    unint64_t v311 = v302 + 1;
LABEL_453:
    v300[770] = v311;
LABEL_454:
    int v321 = 1 << *(_DWORD *)(v3 + 48);
    if (v321 == 2)
    {
      unsigned int v322 = *(void **)a1[1];
      uint64_t v323 = *(_WORD *)(a1[2] + 68) & 0x7FF;
      unint64_t v324 = (char *)v322[773];
      unint64_t v332 = v322[774];
      if ((unint64_t)v324 >= v332)
      {
        unsigned int v326 = (char *)v322[772];
        uint64_t v334 = (v324 - v326) >> 3;
        if ((unint64_t)(v334 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v335 = v332 - (void)v326;
        unint64_t v336 = (uint64_t)(v332 - (void)v326) >> 2;
        if (v336 <= v334 + 1) {
          unint64_t v336 = v334 + 1;
        }
        if (v335 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v337 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v337 = v336;
        }
        if (v337)
        {
          unint64_t v338 = (char *)sub_5714((uint64_t)(v322 + 774), v337);
          unint64_t v324 = (char *)v322[773];
          unsigned int v326 = (char *)v322[772];
        }
        else
        {
          unint64_t v338 = 0;
        }
        unsigned int v339 = &v338[8 * v334];
        unint64_t v340 = &v338[8 * v337];
        *(void *)unsigned int v339 = v323;
        unint64_t v333 = v339 + 8;
        while (v324 != v326)
        {
          uint64_t v342 = *((void *)v324 - 1);
          v324 -= 8;
          *((void *)v339 - 1) = v342;
          v339 -= 8;
        }
        goto LABEL_483;
      }
    }
    else
    {
      if (v321 != 1) {
        goto LABEL_486;
      }
      unsigned int v322 = *(void **)a1[1];
      uint64_t v323 = *(_WORD *)(a1[2] + 68) & 0x7FF;
      unint64_t v324 = (char *)v322[773];
      unint64_t v325 = v322[774];
      if ((unint64_t)v324 >= v325)
      {
        unsigned int v326 = (char *)v322[772];
        uint64_t v327 = (v324 - v326) >> 3;
        if ((unint64_t)(v327 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v328 = v325 - (void)v326;
        unint64_t v329 = (uint64_t)(v325 - (void)v326) >> 2;
        if (v329 <= v327 + 1) {
          unint64_t v329 = v327 + 1;
        }
        if (v328 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v330 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v330 = v329;
        }
        if (v330)
        {
          unint64_t v331 = (char *)sub_5714((uint64_t)(v322 + 774), v330);
          unint64_t v324 = (char *)v322[773];
          unsigned int v326 = (char *)v322[772];
        }
        else
        {
          unint64_t v331 = 0;
        }
        unsigned int v339 = &v331[8 * v327];
        unint64_t v340 = &v331[8 * v330];
        *(void *)unsigned int v339 = v323;
        unint64_t v333 = v339 + 8;
        while (v324 != v326)
        {
          uint64_t v341 = *((void *)v324 - 1);
          v324 -= 8;
          *((void *)v339 - 1) = v341;
          v339 -= 8;
        }
LABEL_483:
        v322[772] = v339;
        v322[773] = v333;
        v322[774] = v340;
        if (v326) {
          operator delete(v326);
        }
        goto LABEL_485;
      }
    }
    *(void *)unint64_t v324 = v323;
    unint64_t v333 = v324 + 8;
LABEL_485:
    v322[773] = v333;
LABEL_486:
    int v343 = 1 << *(_DWORD *)(v3 + 48);
    if (v343 == 2)
    {
      unint64_t v344 = *(void **)a1[1];
      uint64_t v345 = *(_WORD *)(a1[2] + 50) & 0xFFF;
      unint64_t v346 = (char *)v344[776];
      unint64_t v354 = v344[777];
      if ((unint64_t)v346 >= v354)
      {
        unint64_t v348 = (char *)v344[775];
        uint64_t v356 = (v346 - v348) >> 3;
        if ((unint64_t)(v356 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v357 = v354 - (void)v348;
        unint64_t v358 = (uint64_t)(v354 - (void)v348) >> 2;
        if (v358 <= v356 + 1) {
          unint64_t v358 = v356 + 1;
        }
        if (v357 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v359 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v359 = v358;
        }
        if (v359)
        {
          unint64_t v360 = (char *)sub_5714((uint64_t)(v344 + 777), v359);
          unint64_t v346 = (char *)v344[776];
          unint64_t v348 = (char *)v344[775];
        }
        else
        {
          unint64_t v360 = 0;
        }
        int v361 = &v360[8 * v356];
        int v362 = &v360[8 * v359];
        *(void *)int v361 = v345;
        unint64_t v355 = v361 + 8;
        while (v346 != v348)
        {
          uint64_t v364 = *((void *)v346 - 1);
          v346 -= 8;
          *((void *)v361 - 1) = v364;
          v361 -= 8;
        }
        goto LABEL_515;
      }
    }
    else
    {
      if (v343 != 1) {
        goto LABEL_518;
      }
      unint64_t v344 = *(void **)a1[1];
      uint64_t v345 = *(_WORD *)(a1[2] + 50) & 0xFFF;
      unint64_t v346 = (char *)v344[776];
      unint64_t v347 = v344[777];
      if ((unint64_t)v346 >= v347)
      {
        unint64_t v348 = (char *)v344[775];
        uint64_t v349 = (v346 - v348) >> 3;
        if ((unint64_t)(v349 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v350 = v347 - (void)v348;
        unint64_t v351 = (uint64_t)(v347 - (void)v348) >> 2;
        if (v351 <= v349 + 1) {
          unint64_t v351 = v349 + 1;
        }
        if (v350 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v352 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v352 = v351;
        }
        if (v352)
        {
          unint64_t v353 = (char *)sub_5714((uint64_t)(v344 + 777), v352);
          unint64_t v346 = (char *)v344[776];
          unint64_t v348 = (char *)v344[775];
        }
        else
        {
          unint64_t v353 = 0;
        }
        int v361 = &v353[8 * v349];
        int v362 = &v353[8 * v352];
        *(void *)int v361 = v345;
        unint64_t v355 = v361 + 8;
        while (v346 != v348)
        {
          uint64_t v363 = *((void *)v346 - 1);
          v346 -= 8;
          *((void *)v361 - 1) = v363;
          v361 -= 8;
        }
LABEL_515:
        v344[775] = v361;
        v344[776] = v355;
        v344[777] = v362;
        if (v348) {
          operator delete(v348);
        }
        goto LABEL_517;
      }
    }
    *(void *)unint64_t v346 = v345;
    unint64_t v355 = v346 + 8;
LABEL_517:
    v344[776] = v355;
LABEL_518:
    int v365 = 1 << *(_DWORD *)(v3 + 48);
    if (v365 == 2)
    {
      unsigned int v366 = *(void **)a1[1];
      uint64_t v367 = *(_WORD *)(a1[2] + 32) & 0x7FFF;
      unint64_t v368 = (char *)v366[779];
      unint64_t v376 = v366[780];
      if ((unint64_t)v368 >= v376)
      {
        unint64_t v370 = (char *)v366[778];
        uint64_t v378 = (v368 - v370) >> 3;
        if ((unint64_t)(v378 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v379 = v376 - (void)v370;
        unint64_t v380 = (uint64_t)(v376 - (void)v370) >> 2;
        if (v380 <= v378 + 1) {
          unint64_t v380 = v378 + 1;
        }
        if (v379 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v381 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v381 = v380;
        }
        if (v381)
        {
          unint64_t v382 = (char *)sub_5714((uint64_t)(v366 + 780), v381);
          unint64_t v368 = (char *)v366[779];
          unint64_t v370 = (char *)v366[778];
        }
        else
        {
          unint64_t v382 = 0;
        }
        unint64_t v383 = &v382[8 * v378];
        unsigned int v384 = &v382[8 * v381];
        *(void *)unint64_t v383 = v367;
        unint64_t v377 = v383 + 8;
        while (v368 != v370)
        {
          uint64_t v386 = *((void *)v368 - 1);
          v368 -= 8;
          *((void *)v383 - 1) = v386;
          v383 -= 8;
        }
        goto LABEL_547;
      }
    }
    else
    {
      if (v365 != 1) {
        goto LABEL_550;
      }
      unsigned int v366 = *(void **)a1[1];
      uint64_t v367 = *(_WORD *)(a1[2] + 32) & 0x7FFF;
      unint64_t v368 = (char *)v366[779];
      unint64_t v369 = v366[780];
      if ((unint64_t)v368 >= v369)
      {
        unint64_t v370 = (char *)v366[778];
        uint64_t v371 = (v368 - v370) >> 3;
        if ((unint64_t)(v371 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v372 = v369 - (void)v370;
        unint64_t v373 = (uint64_t)(v369 - (void)v370) >> 2;
        if (v373 <= v371 + 1) {
          unint64_t v373 = v371 + 1;
        }
        if (v372 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v374 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v374 = v373;
        }
        if (v374)
        {
          int v375 = (char *)sub_5714((uint64_t)(v366 + 780), v374);
          unint64_t v368 = (char *)v366[779];
          unint64_t v370 = (char *)v366[778];
        }
        else
        {
          int v375 = 0;
        }
        unint64_t v383 = &v375[8 * v371];
        unsigned int v384 = &v375[8 * v374];
        *(void *)unint64_t v383 = v367;
        unint64_t v377 = v383 + 8;
        while (v368 != v370)
        {
          uint64_t v385 = *((void *)v368 - 1);
          v368 -= 8;
          *((void *)v383 - 1) = v385;
          v383 -= 8;
        }
LABEL_547:
        v366[778] = v383;
        v366[779] = v377;
        v366[780] = v384;
        if (v370) {
          operator delete(v370);
        }
        goto LABEL_549;
      }
    }
    *(void *)unint64_t v368 = v367;
    unint64_t v377 = v368 + 8;
LABEL_549:
    v366[779] = v377;
LABEL_550:
    int v387 = 1 << *(_DWORD *)(v3 + 48);
    if (v387 == 2)
    {
      unsigned int v388 = *(void **)a1[1];
      uint64_t v389 = *(_WORD *)(a1[2] + 64) & 0x3FF;
      unint64_t v390 = (char *)v388[782];
      unint64_t v398 = v388[783];
      if ((unint64_t)v390 >= v398)
      {
        int v392 = (char *)v388[781];
        uint64_t v400 = (v390 - v392) >> 3;
        if ((unint64_t)(v400 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v401 = v398 - (void)v392;
        unint64_t v402 = (uint64_t)(v398 - (void)v392) >> 2;
        if (v402 <= v400 + 1) {
          unint64_t v402 = v400 + 1;
        }
        if (v401 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v403 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v403 = v402;
        }
        if (v403)
        {
          unint64_t v404 = (char *)sub_5714((uint64_t)(v388 + 783), v403);
          unint64_t v390 = (char *)v388[782];
          int v392 = (char *)v388[781];
        }
        else
        {
          unint64_t v404 = 0;
        }
        unsigned int v405 = &v404[8 * v400];
        unint64_t v406 = &v404[8 * v403];
        *(void *)unsigned int v405 = v389;
        unint64_t v399 = v405 + 8;
        while (v390 != v392)
        {
          uint64_t v408 = *((void *)v390 - 1);
          v390 -= 8;
          *((void *)v405 - 1) = v408;
          v405 -= 8;
        }
        goto LABEL_579;
      }
    }
    else
    {
      if (v387 != 1) {
        goto LABEL_582;
      }
      unsigned int v388 = *(void **)a1[1];
      uint64_t v389 = *(_WORD *)(a1[2] + 64) & 0x3FF;
      unint64_t v390 = (char *)v388[782];
      unint64_t v391 = v388[783];
      if ((unint64_t)v390 >= v391)
      {
        int v392 = (char *)v388[781];
        uint64_t v393 = (v390 - v392) >> 3;
        if ((unint64_t)(v393 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v394 = v391 - (void)v392;
        unint64_t v395 = (uint64_t)(v391 - (void)v392) >> 2;
        if (v395 <= v393 + 1) {
          unint64_t v395 = v393 + 1;
        }
        if (v394 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v396 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v396 = v395;
        }
        if (v396)
        {
          unsigned int v397 = (char *)sub_5714((uint64_t)(v388 + 783), v396);
          unint64_t v390 = (char *)v388[782];
          int v392 = (char *)v388[781];
        }
        else
        {
          unsigned int v397 = 0;
        }
        unsigned int v405 = &v397[8 * v393];
        unint64_t v406 = &v397[8 * v396];
        *(void *)unsigned int v405 = v389;
        unint64_t v399 = v405 + 8;
        while (v390 != v392)
        {
          uint64_t v407 = *((void *)v390 - 1);
          v390 -= 8;
          *((void *)v405 - 1) = v407;
          v405 -= 8;
        }
LABEL_579:
        v388[781] = v405;
        v388[782] = v399;
        v388[783] = v406;
        if (v392) {
          operator delete(v392);
        }
        goto LABEL_581;
      }
    }
    *(void *)unint64_t v390 = v389;
    unint64_t v399 = v390 + 8;
LABEL_581:
    v388[782] = v399;
LABEL_582:
    int v409 = 1 << *(_DWORD *)(v3 + 48);
    if (v409 == 2)
    {
      int v410 = *(void **)a1[1];
      uint64_t v411 = *(_WORD *)(a1[2] + 46) & 0x3FF;
      unint64_t v412 = (char *)v410[785];
      unint64_t v420 = v410[786];
      if ((unint64_t)v412 >= v420)
      {
        int v414 = (char *)v410[784];
        uint64_t v422 = (v412 - v414) >> 3;
        if ((unint64_t)(v422 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v423 = v420 - (void)v414;
        unint64_t v424 = (uint64_t)(v420 - (void)v414) >> 2;
        if (v424 <= v422 + 1) {
          unint64_t v424 = v422 + 1;
        }
        if (v423 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v425 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v425 = v424;
        }
        if (v425)
        {
          unint64_t v426 = (char *)sub_5714((uint64_t)(v410 + 786), v425);
          unint64_t v412 = (char *)v410[785];
          int v414 = (char *)v410[784];
        }
        else
        {
          unint64_t v426 = 0;
        }
        unint64_t v427 = &v426[8 * v422];
        unsigned __int16 v428 = &v426[8 * v425];
        *(void *)unint64_t v427 = v411;
        unint64_t v421 = v427 + 8;
        while (v412 != v414)
        {
          uint64_t v430 = *((void *)v412 - 1);
          v412 -= 8;
          *((void *)v427 - 1) = v430;
          v427 -= 8;
        }
        goto LABEL_611;
      }
    }
    else
    {
      if (v409 != 1) {
        goto LABEL_614;
      }
      int v410 = *(void **)a1[1];
      uint64_t v411 = *(_WORD *)(a1[2] + 46) & 0x3FF;
      unint64_t v412 = (char *)v410[785];
      unint64_t v413 = v410[786];
      if ((unint64_t)v412 >= v413)
      {
        int v414 = (char *)v410[784];
        uint64_t v415 = (v412 - v414) >> 3;
        if ((unint64_t)(v415 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v416 = v413 - (void)v414;
        unint64_t v417 = (uint64_t)(v413 - (void)v414) >> 2;
        if (v417 <= v415 + 1) {
          unint64_t v417 = v415 + 1;
        }
        if (v416 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v418 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v418 = v417;
        }
        if (v418)
        {
          unint64_t v419 = (char *)sub_5714((uint64_t)(v410 + 786), v418);
          unint64_t v412 = (char *)v410[785];
          int v414 = (char *)v410[784];
        }
        else
        {
          unint64_t v419 = 0;
        }
        unint64_t v427 = &v419[8 * v415];
        unsigned __int16 v428 = &v419[8 * v418];
        *(void *)unint64_t v427 = v411;
        unint64_t v421 = v427 + 8;
        while (v412 != v414)
        {
          uint64_t v429 = *((void *)v412 - 1);
          v412 -= 8;
          *((void *)v427 - 1) = v429;
          v427 -= 8;
        }
LABEL_611:
        v410[784] = v427;
        v410[785] = v421;
        v410[786] = v428;
        if (v414) {
          operator delete(v414);
        }
        goto LABEL_613;
      }
    }
    *(void *)unint64_t v412 = v411;
    unint64_t v421 = v412 + 8;
LABEL_613:
    v410[785] = v421;
LABEL_614:
    int v431 = 1 << *(_DWORD *)(v3 + 48);
    if (v431 == 2)
    {
      unsigned int v432 = *(void **)a1[1];
      uint64_t v433 = *(_WORD *)(a1[2] + 66) & 0x3FF;
      unint64_t v434 = (char *)v432[788];
      unint64_t v442 = v432[789];
      if ((unint64_t)v434 >= v442)
      {
        unint64_t v436 = (char *)v432[787];
        uint64_t v444 = (v434 - v436) >> 3;
        if ((unint64_t)(v444 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v445 = v442 - (void)v436;
        unint64_t v446 = (uint64_t)(v442 - (void)v436) >> 2;
        if (v446 <= v444 + 1) {
          unint64_t v446 = v444 + 1;
        }
        if (v445 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v447 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v447 = v446;
        }
        if (v447)
        {
          unint64_t v448 = (char *)sub_5714((uint64_t)(v432 + 789), v447);
          unint64_t v434 = (char *)v432[788];
          unint64_t v436 = (char *)v432[787];
        }
        else
        {
          unint64_t v448 = 0;
        }
        unint64_t v449 = &v448[8 * v444];
        unsigned int v450 = &v448[8 * v447];
        *(void *)unint64_t v449 = v433;
        unsigned int v443 = v449 + 8;
        while (v434 != v436)
        {
          uint64_t v452 = *((void *)v434 - 1);
          v434 -= 8;
          *((void *)v449 - 1) = v452;
          v449 -= 8;
        }
        goto LABEL_643;
      }
    }
    else
    {
      if (v431 != 1) {
        goto LABEL_646;
      }
      unsigned int v432 = *(void **)a1[1];
      uint64_t v433 = *(_WORD *)(a1[2] + 66) & 0x3FF;
      unint64_t v434 = (char *)v432[788];
      unint64_t v435 = v432[789];
      if ((unint64_t)v434 >= v435)
      {
        unint64_t v436 = (char *)v432[787];
        uint64_t v437 = (v434 - v436) >> 3;
        if ((unint64_t)(v437 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v438 = v435 - (void)v436;
        unint64_t v439 = (uint64_t)(v435 - (void)v436) >> 2;
        if (v439 <= v437 + 1) {
          unint64_t v439 = v437 + 1;
        }
        if (v438 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v440 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v440 = v439;
        }
        if (v440)
        {
          unint64_t v441 = (char *)sub_5714((uint64_t)(v432 + 789), v440);
          unint64_t v434 = (char *)v432[788];
          unint64_t v436 = (char *)v432[787];
        }
        else
        {
          unint64_t v441 = 0;
        }
        unint64_t v449 = &v441[8 * v437];
        unsigned int v450 = &v441[8 * v440];
        *(void *)unint64_t v449 = v433;
        unsigned int v443 = v449 + 8;
        while (v434 != v436)
        {
          uint64_t v451 = *((void *)v434 - 1);
          v434 -= 8;
          *((void *)v449 - 1) = v451;
          v449 -= 8;
        }
LABEL_643:
        v432[787] = v449;
        v432[788] = v443;
        v432[789] = v450;
        if (v436) {
          operator delete(v436);
        }
        goto LABEL_645;
      }
    }
    *(void *)unint64_t v434 = v433;
    unsigned int v443 = v434 + 8;
LABEL_645:
    v432[788] = v443;
LABEL_646:
    int v453 = 1 << *(_DWORD *)(v3 + 48);
    if (v453 == 2)
    {
      unsigned int v454 = *(void **)a1[1];
      uint64_t v455 = *(_WORD *)(a1[2] + 48) & 0x3FF;
      unint64_t v456 = (char *)v454[791];
      unint64_t v464 = v454[792];
      if ((unint64_t)v456 >= v464)
      {
        unsigned int v458 = (char *)v454[790];
        uint64_t v466 = (v456 - v458) >> 3;
        if ((unint64_t)(v466 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v467 = v464 - (void)v458;
        unint64_t v468 = (uint64_t)(v464 - (void)v458) >> 2;
        if (v468 <= v466 + 1) {
          unint64_t v468 = v466 + 1;
        }
        if (v467 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v469 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v469 = v468;
        }
        if (v469)
        {
          unint64_t v470 = (char *)sub_5714((uint64_t)(v454 + 792), v469);
          unint64_t v456 = (char *)v454[791];
          unsigned int v458 = (char *)v454[790];
        }
        else
        {
          unint64_t v470 = 0;
        }
        unint64_t v471 = &v470[8 * v466];
        unint64_t v472 = &v470[8 * v469];
        *(void *)unint64_t v471 = v455;
        unsigned int v465 = v471 + 8;
        while (v456 != v458)
        {
          uint64_t v474 = *((void *)v456 - 1);
          v456 -= 8;
          *((void *)v471 - 1) = v474;
          v471 -= 8;
        }
        goto LABEL_675;
      }
    }
    else
    {
      if (v453 != 1) {
        goto LABEL_678;
      }
      unsigned int v454 = *(void **)a1[1];
      uint64_t v455 = *(_WORD *)(a1[2] + 48) & 0x3FF;
      unint64_t v456 = (char *)v454[791];
      unint64_t v457 = v454[792];
      if ((unint64_t)v456 >= v457)
      {
        unsigned int v458 = (char *)v454[790];
        uint64_t v459 = (v456 - v458) >> 3;
        if ((unint64_t)(v459 + 1) >> 61) {
          goto LABEL_712;
        }
        unint64_t v460 = v457 - (void)v458;
        unint64_t v461 = (uint64_t)(v457 - (void)v458) >> 2;
        if (v461 <= v459 + 1) {
          unint64_t v461 = v459 + 1;
        }
        if (v460 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v462 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v462 = v461;
        }
        if (v462)
        {
          unint64_t v463 = (char *)sub_5714((uint64_t)(v454 + 792), v462);
          unint64_t v456 = (char *)v454[791];
          unsigned int v458 = (char *)v454[790];
        }
        else
        {
          unint64_t v463 = 0;
        }
        unint64_t v471 = &v463[8 * v459];
        unint64_t v472 = &v463[8 * v462];
        *(void *)unint64_t v471 = v455;
        unsigned int v465 = v471 + 8;
        while (v456 != v458)
        {
          uint64_t v473 = *((void *)v456 - 1);
          v456 -= 8;
          *((void *)v471 - 1) = v473;
          v471 -= 8;
        }
LABEL_675:
        v454[790] = v471;
        v454[791] = v465;
        v454[792] = v472;
        if (v458) {
          operator delete(v458);
        }
        goto LABEL_677;
      }
    }
    *(void *)unint64_t v456 = v455;
    unsigned int v465 = v456 + 8;
LABEL_677:
    v454[791] = v465;
LABEL_678:
    int v475 = 1 << *(_DWORD *)(v3 + 48);
    if (v475 == 2)
    {
      uint64_t v487 = a1[2];
      unsigned int v477 = *(void **)a1[1];
      uint64_t v478 = *(_DWORD *)(v487 + 28) & 0x7FFFFLL;
      unint64_t v479 = (uint64_t *)v477[794];
      unint64_t v488 = v477[795];
      if ((unint64_t)v479 >= v488)
      {
        unint64_t v481 = (uint64_t *)v477[793];
        uint64_t v490 = v479 - v481;
        if (!((unint64_t)(v490 + 1) >> 61))
        {
          unint64_t v491 = v488 - (void)v481;
          unint64_t v492 = (uint64_t)(v488 - (void)v481) >> 2;
          if (v492 <= v490 + 1) {
            unint64_t v492 = v490 + 1;
          }
          if (v491 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v493 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v493 = v492;
          }
          if (v493)
          {
            unint64_t v494 = (char *)sub_5714((uint64_t)(v477 + 795), v493);
            unint64_t v479 = (uint64_t *)v477[794];
            unint64_t v481 = (uint64_t *)v477[793];
          }
          else
          {
            unint64_t v494 = 0;
          }
          unsigned int v495 = (uint64_t *)&v494[8 * v490];
          unint64_t v496 = &v494[8 * v493];
          *unsigned int v495 = v478;
          unint64_t v489 = v495 + 1;
          while (v479 != v481)
          {
            uint64_t v498 = *--v479;
            *--unsigned int v495 = v498;
          }
          goto LABEL_707;
        }
LABEL_712:
        sub_566C();
      }
    }
    else
    {
      if (v475 != 1)
      {
LABEL_710:
        *a2 = 1;
        return;
      }
      uint64_t v476 = a1[2];
      unsigned int v477 = *(void **)a1[1];
      uint64_t v478 = *(_DWORD *)(v476 + 28) & 0x7FFFFLL;
      unint64_t v479 = (uint64_t *)v477[794];
      unint64_t v480 = v477[795];
      if ((unint64_t)v479 >= v480)
      {
        unint64_t v481 = (uint64_t *)v477[793];
        uint64_t v482 = v479 - v481;
        if (!((unint64_t)(v482 + 1) >> 61))
        {
          unint64_t v483 = v480 - (void)v481;
          unint64_t v484 = (uint64_t)(v480 - (void)v481) >> 2;
          if (v484 <= v482 + 1) {
            unint64_t v484 = v482 + 1;
          }
          if (v483 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v485 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v485 = v484;
          }
          if (v485)
          {
            unint64_t v486 = (char *)sub_5714((uint64_t)(v477 + 795), v485);
            unint64_t v479 = (uint64_t *)v477[794];
            unint64_t v481 = (uint64_t *)v477[793];
          }
          else
          {
            unint64_t v486 = 0;
          }
          unsigned int v495 = (uint64_t *)&v486[8 * v482];
          unint64_t v496 = &v486[8 * v485];
          *unsigned int v495 = v478;
          unint64_t v489 = v495 + 1;
          while (v479 != v481)
          {
            uint64_t v497 = *--v479;
            *--unsigned int v495 = v497;
          }
LABEL_707:
          v477[793] = v495;
          v477[794] = v489;
          v477[795] = v496;
          if (v481) {
            operator delete(v481);
          }
          goto LABEL_709;
        }
        goto LABEL_712;
      }
    }
    *unint64_t v479 = v478;
    unint64_t v489 = v479 + 1;
LABEL_709:
    v477[794] = v489;
    goto LABEL_710;
  }
  int v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    int32x2_t v18 = (void *)a1[1];
    uint64_t v17 = a1[2];
    uint64_t v19 = (void *)*v18;
    *(void *)(v19[731] - 8) += *(_WORD *)(v17 + 58) & 0x3FFF;
    *(void *)(v19[734] - 8) += *(_WORD *)(v17 + 40) & 0x7FFF;
    *(void *)(v19[737] - 8) += *(_WORD *)(v17 + 60) & 0x3FFF;
    *(void *)(v19[740] - 8) += *(_WORD *)(v17 + 42) & 0x7FFF;
    *(void *)(v19[743] - 8) += *(_WORD *)(v17 + 62) & 0x3FFF;
    *(void *)(v19[746] - 8) += *(_WORD *)(v17 + 44) & 0x7FFF;
    *(void *)(v19[749] - 8) += *(_DWORD *)(v17 + 24) & 0x3FFFF;
    *(void *)(v19[752] - 8) += *(_WORD *)(v17 + 52) & 0x7FFF;
    *(void *)(v19[755] - 8) += *(_WORD *)(v17 + 34) & 0x3FFF;
    *(void *)(v19[758] - 8) += *(_WORD *)(v17 + 54) & 0x7FFF;
    uint64_t v20 = a1[2];
    uint8x8_t v21 = *(void **)a1[1];
    *(void *)(v21[761] - 8) += *(_WORD *)(v20 + 36) & 0x3FFF;
    *(void *)(v21[764] - 8) += *(_WORD *)(v20 + 56) & 0x7FFF;
    *(void *)(v21[767] - 8) += *(_WORD *)(v20 + 38) & 0x3FFF;
    *(void *)(v21[770] - 8) += ((unint64_t)*(unsigned int *)(v20 + 20) >> 2) & 0xFFFFF;
    *(void *)(v21[773] - 8) += *(_WORD *)(v20 + 68) & 0x7FF;
    *(void *)(v21[776] - 8) += *(_WORD *)(v20 + 50) & 0xFFF;
    *(void *)(v21[779] - 8) += *(_WORD *)(v20 + 32) & 0x7FFF;
    *(void *)(v21[782] - 8) += *(_WORD *)(v20 + 64) & 0x3FF;
    *(void *)(v21[785] - 8) += *(_WORD *)(v20 + 46) & 0x3FF;
    *(void *)(v21[788] - 8) += *(_WORD *)(v20 + 66) & 0x3FF;
    uint64_t v22 = a1[2];
    uint8x8_t v23 = (void *)*v18;
    *(void *)(v23[791] - 8) += *(_WORD *)(v22 + 48) & 0x3FF;
    *(void *)(v23[794] - 8) += *(_DWORD *)(v22 + 28) & 0x7FFFF;
  }
}

void sub_C5024(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    int v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_DWORD *)(a1[2] + 40) & 0xFFFFFLL;
      uint64_t v8 = (uint64_t *)v6[827];
      unint64_t v22 = v6[828];
      if ((unint64_t)v8 >= v22)
      {
        long long v10 = (uint64_t *)v6[826];
        uint64_t v24 = v8 - v10;
        if ((unint64_t)(v24 + 1) >> 61) {
          goto LABEL_456;
        }
        unint64_t v25 = v22 - (void)v10;
        unint64_t v26 = (uint64_t)(v22 - (void)v10) >> 2;
        if (v26 <= v24 + 1) {
          unint64_t v26 = v24 + 1;
        }
        if (v25 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v26;
        }
        if (v27)
        {
          unint64_t v28 = (char *)sub_5714((uint64_t)(v6 + 828), v27);
          uint64_t v8 = (uint64_t *)v6[827];
          long long v10 = (uint64_t *)v6[826];
        }
        else
        {
          unint64_t v28 = 0;
        }
        unint64_t v29 = (uint64_t *)&v28[8 * v24];
        __int16 v30 = &v28[8 * v27];
        uint64_t *v29 = v7;
        uint8x8_t v23 = v29 + 1;
        while (v8 != v10)
        {
          uint64_t v32 = *--v8;
          *--unint64_t v29 = v32;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1) {
        goto LABEL_38;
      }
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_DWORD *)(a1[2] + 40) & 0xFFFFFLL;
      uint64_t v8 = (uint64_t *)v6[827];
      unint64_t v9 = v6[828];
      if ((unint64_t)v8 >= v9)
      {
        long long v10 = (uint64_t *)v6[826];
        uint64_t v11 = v8 - v10;
        if ((unint64_t)(v11 + 1) >> 61) {
          goto LABEL_456;
        }
        unint64_t v12 = v9 - (void)v10;
        unint64_t v13 = (uint64_t)(v9 - (void)v10) >> 2;
        if (v13 <= v11 + 1) {
          unint64_t v13 = v11 + 1;
        }
        if (v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14)
        {
          uint64_t v15 = (char *)sub_5714((uint64_t)(v6 + 828), v14);
          uint64_t v8 = (uint64_t *)v6[827];
          long long v10 = (uint64_t *)v6[826];
        }
        else
        {
          uint64_t v15 = 0;
        }
        unint64_t v29 = (uint64_t *)&v15[8 * v11];
        __int16 v30 = &v15[8 * v14];
        uint64_t *v29 = v7;
        uint8x8_t v23 = v29 + 1;
        while (v8 != v10)
        {
          uint64_t v31 = *--v8;
          *--unint64_t v29 = v31;
        }
LABEL_35:
        v6[826] = v29;
        v6[827] = v23;
        v6[828] = v30;
        if (v10) {
          operator delete(v10);
        }
        goto LABEL_37;
      }
    }
    *uint64_t v8 = v7;
    uint8x8_t v23 = v8 + 1;
LABEL_37:
    v6[827] = v23;
LABEL_38:
    int v33 = 1 << *(_DWORD *)(v3 + 48);
    if (v33 == 2)
    {
      uint64_t v34 = *(void **)a1[1];
      uint64_t v35 = *(_DWORD *)(a1[2] + 44) & 0xFFFFFLL;
      __int16 v36 = (uint64_t *)v34[830];
      unint64_t v44 = v34[831];
      if ((unint64_t)v36 >= v44)
      {
        uint64_t v38 = (uint64_t *)v34[829];
        uint64_t v46 = v36 - v38;
        if ((unint64_t)(v46 + 1) >> 61) {
          goto LABEL_456;
        }
        unint64_t v47 = v44 - (void)v38;
        unint64_t v48 = (uint64_t)(v44 - (void)v38) >> 2;
        if (v48 <= v46 + 1) {
          unint64_t v48 = v46 + 1;
        }
        if (v47 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v49 = v48;
        }
        if (v49)
        {
          unint64_t v50 = (char *)sub_5714((uint64_t)(v34 + 831), v49);
          __int16 v36 = (uint64_t *)v34[830];
          uint64_t v38 = (uint64_t *)v34[829];
        }
        else
        {
          unint64_t v50 = 0;
        }
        unint64_t v51 = (uint64_t *)&v50[8 * v46];
        unint64_t v52 = &v50[8 * v49];
        *unint64_t v51 = v35;
        uint16x8_t v45 = v51 + 1;
        while (v36 != v38)
        {
          uint64_t v54 = *--v36;
          *--unint64_t v51 = v54;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v33 != 1) {
        goto LABEL_70;
      }
      uint64_t v34 = *(void **)a1[1];
      uint64_t v35 = *(_DWORD *)(a1[2] + 44) & 0xFFFFFLL;
      __int16 v36 = (uint64_t *)v34[830];
      unint64_t v37 = v34[831];
      if ((unint64_t)v36 >= v37)
      {
        uint64_t v38 = (uint64_t *)v34[829];
        uint64_t v39 = v36 - v38;
        if ((unint64_t)(v39 + 1) >> 61) {
          goto LABEL_456;
        }
        unint64_t v40 = v37 - (void)v38;
        unint64_t v41 = (uint64_t)(v37 - (void)v38) >> 2;
        if (v41 <= v39 + 1) {
          unint64_t v41 = v39 + 1;
        }
        if (v40 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v42 = v41;
        }
        if (v42)
        {
          unint64_t v43 = (char *)sub_5714((uint64_t)(v34 + 831), v42);
          __int16 v36 = (uint64_t *)v34[830];
          uint64_t v38 = (uint64_t *)v34[829];
        }
        else
        {
          unint64_t v43 = 0;
        }
        unint64_t v51 = (uint64_t *)&v43[8 * v39];
        unint64_t v52 = &v43[8 * v42];
        *unint64_t v51 = v35;
        uint16x8_t v45 = v51 + 1;
        while (v36 != v38)
        {
          uint64_t v53 = *--v36;
          *--unint64_t v51 = v53;
        }
LABEL_67:
        v34[829] = v51;
        v34[830] = v45;
        v34[831] = v52;
        if (v38) {
          operator delete(v38);
        }
        goto LABEL_69;
      }
    }
    uint64_t *v36 = v35;
    uint16x8_t v45 = v36 + 1;
LABEL_69:
    v34[830] = v45;
LABEL_70:
    int v55 = 1 << *(_DWORD *)(v3 + 48);
    if (v55 == 2)
    {
      uint64_t v56 = *(void **)a1[1];
      uint64_t v57 = *(_DWORD *)(a1[2] + 48) & 0xFFFFFLL;
      unint64_t v58 = (uint64_t *)v56[833];
      unint64_t v66 = v56[834];
      if ((unint64_t)v58 >= v66)
      {
        unint64_t v60 = (uint64_t *)v56[832];
        uint64_t v68 = v58 - v60;
        if ((unint64_t)(v68 + 1) >> 61) {
          goto LABEL_456;
        }
        unint64_t v69 = v66 - (void)v60;
        unint64_t v70 = (uint64_t)(v66 - (void)v60) >> 2;
        if (v70 <= v68 + 1) {
          unint64_t v70 = v68 + 1;
        }
        if (v69 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v71 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v71 = v70;
        }
        if (v71)
        {
          unint64_t v72 = (char *)sub_5714((uint64_t)(v56 + 834), v71);
          unint64_t v58 = (uint64_t *)v56[833];
          unint64_t v60 = (uint64_t *)v56[832];
        }
        else
        {
          unint64_t v72 = 0;
        }
        unint64_t v73 = (uint64_t *)&v72[8 * v68];
        unint64_t v74 = &v72[8 * v71];
        *unint64_t v73 = v57;
        unsigned __int16 v67 = v73 + 1;
        while (v58 != v60)
        {
          uint64_t v76 = *--v58;
          *--unint64_t v73 = v76;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v55 != 1) {
        goto LABEL_102;
      }
      uint64_t v56 = *(void **)a1[1];
      uint64_t v57 = *(_DWORD *)(a1[2] + 48) & 0xFFFFFLL;
      unint64_t v58 = (uint64_t *)v56[833];
      unint64_t v59 = v56[834];
      if ((unint64_t)v58 >= v59)
      {
        unint64_t v60 = (uint64_t *)v56[832];
        uint64_t v61 = v58 - v60;
        if ((unint64_t)(v61 + 1) >> 61) {
          goto LABEL_456;
        }
        unint64_t v62 = v59 - (void)v60;
        unint64_t v63 = (uint64_t)(v59 - (void)v60) >> 2;
        if (v63 <= v61 + 1) {
          unint64_t v63 = v61 + 1;
        }
        if (v62 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v64 = v63;
        }
        if (v64)
        {
          unint64_t v65 = (char *)sub_5714((uint64_t)(v56 + 834), v64);
          unint64_t v58 = (uint64_t *)v56[833];
          unint64_t v60 = (uint64_t *)v56[832];
        }
        else
        {
          unint64_t v65 = 0;
        }
        unint64_t v73 = (uint64_t *)&v65[8 * v61];
        unint64_t v74 = &v65[8 * v64];
        *unint64_t v73 = v57;
        unsigned __int16 v67 = v73 + 1;
        while (v58 != v60)
        {
          uint64_t v75 = *--v58;
          *--unint64_t v73 = v75;
        }
LABEL_99:
        v56[832] = v73;
        v56[833] = v67;
        v56[834] = v74;
        if (v60) {
          operator delete(v60);
        }
        goto LABEL_101;
      }
    }
    *unint64_t v58 = v57;
    unsigned __int16 v67 = v58 + 1;
LABEL_101:
    v56[833] = v67;
LABEL_102:
    int v77 = 1 << *(_DWORD *)(v3 + 48);
    if (v77 == 2)
    {
      uint64_t v89 = a1[1];
      int v79 = *(void **)v89;
      uint64_t v80 = *(unsigned __int16 *)(a1[2] + 56);
      uint64_t v81 = *(char **)(*(void *)v89 + 6688);
      unint64_t v90 = *(void *)(*(void *)v89 + 6696);
      if ((unint64_t)v81 >= v90)
      {
        unint64_t v83 = (char *)v79[835];
        uint64_t v92 = (v81 - v83) >> 3;
        if ((unint64_t)(v92 + 1) >> 61) {
          goto LABEL_456;
        }
        unint64_t v93 = v90 - (void)v83;
        unint64_t v94 = (uint64_t)(v90 - (void)v83) >> 2;
        if (v94 <= v92 + 1) {
          unint64_t v94 = v92 + 1;
        }
        if (v93 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v95 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v95 = v94;
        }
        if (v95)
        {
          unint64_t v96 = (char *)sub_5714((uint64_t)(v79 + 837), v95);
          uint64_t v81 = (char *)v79[836];
          unint64_t v83 = (char *)v79[835];
        }
        else
        {
          unint64_t v96 = 0;
        }
        unint64_t v97 = &v96[8 * v92];
        unint64_t v98 = &v96[8 * v95];
        *(void *)unint64_t v97 = v80;
        unint64_t v91 = v97 + 8;
        while (v81 != v83)
        {
          uint64_t v100 = *((void *)v81 - 1);
          v81 -= 8;
          *((void *)v97 - 1) = v100;
          v97 -= 8;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v77 != 1) {
        goto LABEL_134;
      }
      uint64_t v78 = a1[1];
      int v79 = *(void **)v78;
      uint64_t v80 = *(unsigned __int16 *)(a1[2] + 56);
      uint64_t v81 = *(char **)(*(void *)v78 + 6688);
      unint64_t v82 = *(void *)(*(void *)v78 + 6696);
      if ((unint64_t)v81 >= v82)
      {
        unint64_t v83 = (char *)v79[835];
        uint64_t v84 = (v81 - v83) >> 3;
        if ((unint64_t)(v84 + 1) >> 61) {
          goto LABEL_456;
        }
        unint64_t v85 = v82 - (void)v83;
        unint64_t v86 = (uint64_t)(v82 - (void)v83) >> 2;
        if (v86 <= v84 + 1) {
          unint64_t v86 = v84 + 1;
        }
        if (v85 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v87 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v87 = v86;
        }
        if (v87)
        {
          unint64_t v88 = (char *)sub_5714((uint64_t)(v79 + 837), v87);
          uint64_t v81 = (char *)v79[836];
          unint64_t v83 = (char *)v79[835];
        }
        else
        {
          unint64_t v88 = 0;
        }
        unint64_t v97 = &v88[8 * v84];
        unint64_t v98 = &v88[8 * v87];
        *(void *)unint64_t v97 = v80;
        unint64_t v91 = v97 + 8;
        while (v81 != v83)
        {
          uint64_t v99 = *((void *)v81 - 1);
          v81 -= 8;
          *((void *)v97 - 1) = v99;
          v97 -= 8;
        }
LABEL_131:
        v79[835] = v97;
        v79[836] = v91;
        v79[837] = v98;
        if (v83) {
          operator delete(v83);
        }
        goto LABEL_133;
      }
    }
    *(void *)uint64_t v81 = v80;
    unint64_t v91 = v81 + 8;
LABEL_133:
    v79[836] = v91;
LABEL_134:
    int v101 = 1 << *(_DWORD *)(v3 + 48);
    if (v101 == 2)
    {
      uint64_t v113 = a1[1];
      uint64_t v103 = *(void **)v113;
      uint64_t v104 = *(unsigned __int16 *)(a1[2] + 52);
      unint64_t v105 = *(char **)(*(void *)v113 + 6712);
      unint64_t v114 = *(void *)(*(void *)v113 + 6720);
      if ((unint64_t)v105 >= v114)
      {
        uint64_t v107 = (char *)v103[838];
        uint64_t v116 = (v105 - v107) >> 3;
        if ((unint64_t)(v116 + 1) >> 61) {
          goto LABEL_456;
        }
        unint64_t v117 = v114 - (void)v107;
        unint64_t v118 = (uint64_t)(v114 - (void)v107) >> 2;
        if (v118 <= v116 + 1) {
          unint64_t v118 = v116 + 1;
        }
        if (v117 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v119 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v119 = v118;
        }
        if (v119)
        {
          unint64_t v120 = (char *)sub_5714((uint64_t)(v103 + 840), v119);
          unint64_t v105 = (char *)v103[839];
          uint64_t v107 = (char *)v103[838];
        }
        else
        {
          unint64_t v120 = 0;
        }
        uint64_t v121 = &v120[8 * v116];
        uint64_t v122 = &v120[8 * v119];
        *(void *)uint64_t v121 = v104;
        unint64_t v115 = v121 + 8;
        while (v105 != v107)
        {
          uint64_t v124 = *((void *)v105 - 1);
          v105 -= 8;
          *((void *)v121 - 1) = v124;
          v121 -= 8;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v101 != 1) {
        goto LABEL_166;
      }
      uint64_t v102 = a1[1];
      uint64_t v103 = *(void **)v102;
      uint64_t v104 = *(unsigned __int16 *)(a1[2] + 52);
      unint64_t v105 = *(char **)(*(void *)v102 + 6712);
      unint64_t v106 = *(void *)(*(void *)v102 + 6720);
      if ((unint64_t)v105 >= v106)
      {
        uint64_t v107 = (char *)v103[838];
        uint64_t v108 = (v105 - v107) >> 3;
        if ((unint64_t)(v108 + 1) >> 61) {
          goto LABEL_456;
        }
        unint64_t v109 = v106 - (void)v107;
        unint64_t v110 = (uint64_t)(v106 - (void)v107) >> 2;
        if (v110 <= v108 + 1) {
          unint64_t v110 = v108 + 1;
        }
        if (v109 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v111 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v111 = v110;
        }
        if (v111)
        {
          unint64_t v112 = (char *)sub_5714((uint64_t)(v103 + 840), v111);
          unint64_t v105 = (char *)v103[839];
          uint64_t v107 = (char *)v103[838];
        }
        else
        {
          unint64_t v112 = 0;
        }
        uint64_t v121 = &v112[8 * v108];
        uint64_t v122 = &v112[8 * v111];
        *(void *)uint64_t v121 = v104;
        unint64_t v115 = v121 + 8;
        while (v105 != v107)
        {
          uint64_t v123 = *((void *)v105 - 1);
          v105 -= 8;
          *((void *)v121 - 1) = v123;
          v121 -= 8;
        }
LABEL_163:
        v103[838] = v121;
        v103[839] = v115;
        v103[840] = v122;
        if (v107) {
          operator delete(v107);
        }
        goto LABEL_165;
      }
    }
    *(void *)unint64_t v105 = v104;
    unint64_t v115 = v105 + 8;
LABEL_165:
    v103[839] = v115;
LABEL_166:
    int v125 = 1 << *(_DWORD *)(v3 + 48);
    if (v125 == 2)
    {
      unint64_t v126 = *(void **)a1[1];
      uint64_t v127 = *(_WORD *)(a1[2] + 58) & 0x7FFF;
      unsigned __int16 v128 = (char *)v126[842];
      unint64_t v136 = v126[843];
      if ((unint64_t)v128 >= v136)
      {
        unint64_t v130 = (char *)v126[841];
        uint64_t v138 = (v128 - v130) >> 3;
        if ((unint64_t)(v138 + 1) >> 61) {
          goto LABEL_456;
        }
        unint64_t v139 = v136 - (void)v130;
        unint64_t v140 = (uint64_t)(v136 - (void)v130) >> 2;
        if (v140 <= v138 + 1) {
          unint64_t v140 = v138 + 1;
        }
        if (v139 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v141 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v141 = v140;
        }
        if (v141)
        {
          unint64_t v142 = (char *)sub_5714((uint64_t)(v126 + 843), v141);
          unsigned __int16 v128 = (char *)v126[842];
          unint64_t v130 = (char *)v126[841];
        }
        else
        {
          unint64_t v142 = 0;
        }
        uint64_t v143 = &v142[8 * v138];
        uint64_t v144 = &v142[8 * v141];
        *(void *)uint64_t v143 = v127;
        unint64_t v137 = v143 + 8;
        while (v128 != v130)
        {
          uint64_t v146 = *((void *)v128 - 1);
          v128 -= 8;
          *((void *)v143 - 1) = v146;
          v143 -= 8;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v125 != 1) {
        goto LABEL_198;
      }
      unint64_t v126 = *(void **)a1[1];
      uint64_t v127 = *(_WORD *)(a1[2] + 58) & 0x7FFF;
      unsigned __int16 v128 = (char *)v126[842];
      unint64_t v129 = v126[843];
      if ((unint64_t)v128 >= v129)
      {
        unint64_t v130 = (char *)v126[841];
        uint64_t v131 = (v128 - v130) >> 3;
        if ((unint64_t)(v131 + 1) >> 61) {
          goto LABEL_456;
        }
        unint64_t v132 = v129 - (void)v130;
        unint64_t v133 = (uint64_t)(v129 - (void)v130) >> 2;
        if (v133 <= v131 + 1) {
          unint64_t v133 = v131 + 1;
        }
        if (v132 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v134 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v134 = v133;
        }
        if (v134)
        {
          unint64_t v135 = (char *)sub_5714((uint64_t)(v126 + 843), v134);
          unsigned __int16 v128 = (char *)v126[842];
          unint64_t v130 = (char *)v126[841];
        }
        else
        {
          unint64_t v135 = 0;
        }
        uint64_t v143 = &v135[8 * v131];
        uint64_t v144 = &v135[8 * v134];
        *(void *)uint64_t v143 = v127;
        unint64_t v137 = v143 + 8;
        while (v128 != v130)
        {
          uint64_t v145 = *((void *)v128 - 1);
          v128 -= 8;
          *((void *)v143 - 1) = v145;
          v143 -= 8;
        }
LABEL_195:
        v126[841] = v143;
        v126[842] = v137;
        v126[843] = v144;
        if (v130) {
          operator delete(v130);
        }
        goto LABEL_197;
      }
    }
    *(void *)unsigned __int16 v128 = v127;
    unint64_t v137 = v128 + 8;
LABEL_197:
    v126[842] = v137;
LABEL_198:
    int v147 = 1 << *(_DWORD *)(v3 + 48);
    if (v147 == 2)
    {
      unint64_t v148 = *(void **)a1[1];
      uint64_t v149 = *(_WORD *)(a1[2] + 54) & 0x7FFF;
      unint64_t v150 = (char *)v148[845];
      unint64_t v158 = v148[846];
      if ((unint64_t)v150 >= v158)
      {
        unint64_t v152 = (char *)v148[844];
        uint64_t v160 = (v150 - v152) >> 3;
        if ((unint64_t)(v160 + 1) >> 61) {
          goto LABEL_456;
        }
        unint64_t v161 = v158 - (void)v152;
        unint64_t v162 = (uint64_t)(v158 - (void)v152) >> 2;
        if (v162 <= v160 + 1) {
          unint64_t v162 = v160 + 1;
        }
        if (v161 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v163 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v163 = v162;
        }
        if (v163)
        {
          unint64_t v164 = (char *)sub_5714((uint64_t)(v148 + 846), v163);
          unint64_t v150 = (char *)v148[845];
          unint64_t v152 = (char *)v148[844];
        }
        else
        {
          unint64_t v164 = 0;
        }
        uint64_t v165 = &v164[8 * v160];
        uint64_t v166 = &v164[8 * v163];
        *(void *)uint64_t v165 = v149;
        unint64_t v159 = v165 + 8;
        while (v150 != v152)
        {
          uint64_t v168 = *((void *)v150 - 1);
          v150 -= 8;
          *((void *)v165 - 1) = v168;
          v165 -= 8;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v147 != 1) {
        goto LABEL_230;
      }
      unint64_t v148 = *(void **)a1[1];
      uint64_t v149 = *(_WORD *)(a1[2] + 54) & 0x7FFF;
      unint64_t v150 = (char *)v148[845];
      unint64_t v151 = v148[846];
      if ((unint64_t)v150 >= v151)
      {
        unint64_t v152 = (char *)v148[844];
        uint64_t v153 = (v150 - v152) >> 3;
        if ((unint64_t)(v153 + 1) >> 61) {
          goto LABEL_456;
        }
        unint64_t v154 = v151 - (void)v152;
        unint64_t v155 = (uint64_t)(v151 - (void)v152) >> 2;
        if (v155 <= v153 + 1) {
          unint64_t v155 = v153 + 1;
        }
        if (v154 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v156 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v156 = v155;
        }
        if (v156)
        {
          unsigned int v157 = (char *)sub_5714((uint64_t)(v148 + 846), v156);
          unint64_t v150 = (char *)v148[845];
          unint64_t v152 = (char *)v148[844];
        }
        else
        {
          unsigned int v157 = 0;
        }
        uint64_t v165 = &v157[8 * v153];
        uint64_t v166 = &v157[8 * v156];
        *(void *)uint64_t v165 = v149;
        unint64_t v159 = v165 + 8;
        while (v150 != v152)
        {
          uint64_t v167 = *((void *)v150 - 1);
          v150 -= 8;
          *((void *)v165 - 1) = v167;
          v165 -= 8;
        }
LABEL_227:
        v148[844] = v165;
        v148[845] = v159;
        v148[846] = v166;
        if (v152) {
          operator delete(v152);
        }
        goto LABEL_229;
      }
    }
    *(void *)unint64_t v150 = v149;
    unint64_t v159 = v150 + 8;
LABEL_229:
    v148[845] = v159;
LABEL_230:
    int v169 = 1 << *(_DWORD *)(v3 + 48);
    if (v169 == 2)
    {
      unint64_t v170 = *(void **)a1[1];
      uint64_t v171 = *(_WORD *)(a1[2] + 60) & 0x7FFF;
      unint64_t v172 = (char *)v170[848];
      unint64_t v180 = v170[849];
      if ((unint64_t)v172 >= v180)
      {
        unint64_t v174 = (char *)v170[847];
        uint64_t v182 = (v172 - v174) >> 3;
        if ((unint64_t)(v182 + 1) >> 61) {
          goto LABEL_456;
        }
        unint64_t v183 = v180 - (void)v174;
        unint64_t v184 = (uint64_t)(v180 - (void)v174) >> 2;
        if (v184 <= v182 + 1) {
          unint64_t v184 = v182 + 1;
        }
        if (v183 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v185 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v185 = v184;
        }
        if (v185)
        {
          unsigned int v186 = (char *)sub_5714((uint64_t)(v170 + 849), v185);
          unint64_t v172 = (char *)v170[848];
          unint64_t v174 = (char *)v170[847];
        }
        else
        {
          unsigned int v186 = 0;
        }
        uint64_t v187 = &v186[8 * v182];
        uint64_t v188 = &v186[8 * v185];
        *(void *)uint64_t v187 = v171;
        unint64_t v181 = v187 + 8;
        while (v172 != v174)
        {
          uint64_t v190 = *((void *)v172 - 1);
          v172 -= 8;
          *((void *)v187 - 1) = v190;
          v187 -= 8;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v169 != 1) {
        goto LABEL_262;
      }
      unint64_t v170 = *(void **)a1[1];
      uint64_t v171 = *(_WORD *)(a1[2] + 60) & 0x7FFF;
      unint64_t v172 = (char *)v170[848];
      unint64_t v173 = v170[849];
      if ((unint64_t)v172 >= v173)
      {
        unint64_t v174 = (char *)v170[847];
        uint64_t v175 = (v172 - v174) >> 3;
        if ((unint64_t)(v175 + 1) >> 61) {
          goto LABEL_456;
        }
        unint64_t v176 = v173 - (void)v174;
        unint64_t v177 = (uint64_t)(v173 - (void)v174) >> 2;
        if (v177 <= v175 + 1) {
          unint64_t v177 = v175 + 1;
        }
        if (v176 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v178 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v178 = v177;
        }
        if (v178)
        {
          int v179 = (char *)sub_5714((uint64_t)(v170 + 849), v178);
          unint64_t v172 = (char *)v170[848];
          unint64_t v174 = (char *)v170[847];
        }
        else
        {
          int v179 = 0;
        }
        uint64_t v187 = &v179[8 * v175];
        uint64_t v188 = &v179[8 * v178];
        *(void *)uint64_t v187 = v171;
        unint64_t v181 = v187 + 8;
        while (v172 != v174)
        {
          uint64_t v189 = *((void *)v172 - 1);
          v172 -= 8;
          *((void *)v187 - 1) = v189;
          v187 -= 8;
        }
LABEL_259:
        v170[847] = v187;
        v170[848] = v181;
        v170[849] = v188;
        if (v174) {
          operator delete(v174);
        }
        goto LABEL_261;
      }
    }
    *(void *)unint64_t v172 = v171;
    unint64_t v181 = v172 + 8;
LABEL_261:
    v170[848] = v181;
LABEL_262:
    int v191 = 1 << *(_DWORD *)(v3 + 48);
    if (v191 == 2)
    {
      unsigned int v192 = *(void **)a1[1];
      uint64_t v193 = *(_WORD *)(a1[2] + 62) & 0x7FFF;
      unsigned int v194 = (char *)v192[851];
      unint64_t v202 = v192[852];
      if ((unint64_t)v194 >= v202)
      {
        unint64_t v196 = (char *)v192[850];
        uint64_t v204 = (v194 - v196) >> 3;
        if ((unint64_t)(v204 + 1) >> 61) {
          goto LABEL_456;
        }
        unint64_t v205 = v202 - (void)v196;
        unint64_t v206 = (uint64_t)(v202 - (void)v196) >> 2;
        if (v206 <= v204 + 1) {
          unint64_t v206 = v204 + 1;
        }
        if (v205 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v207 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v207 = v206;
        }
        if (v207)
        {
          unint64_t v208 = (char *)sub_5714((uint64_t)(v192 + 852), v207);
          unsigned int v194 = (char *)v192[851];
          unint64_t v196 = (char *)v192[850];
        }
        else
        {
          unint64_t v208 = 0;
        }
        uint64_t v209 = &v208[8 * v204];
        uint64_t v210 = &v208[8 * v207];
        *(void *)uint64_t v209 = v193;
        unint64_t v203 = v209 + 8;
        while (v194 != v196)
        {
          uint64_t v212 = *((void *)v194 - 1);
          v194 -= 8;
          *((void *)v209 - 1) = v212;
          v209 -= 8;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v191 != 1) {
        goto LABEL_294;
      }
      unsigned int v192 = *(void **)a1[1];
      uint64_t v193 = *(_WORD *)(a1[2] + 62) & 0x7FFF;
      unsigned int v194 = (char *)v192[851];
      unint64_t v195 = v192[852];
      if ((unint64_t)v194 >= v195)
      {
        unint64_t v196 = (char *)v192[850];
        uint64_t v197 = (v194 - v196) >> 3;
        if ((unint64_t)(v197 + 1) >> 61) {
          goto LABEL_456;
        }
        unint64_t v198 = v195 - (void)v196;
        unint64_t v199 = (uint64_t)(v195 - (void)v196) >> 2;
        if (v199 <= v197 + 1) {
          unint64_t v199 = v197 + 1;
        }
        if (v198 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v200 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v200 = v199;
        }
        if (v200)
        {
          v201 = (char *)sub_5714((uint64_t)(v192 + 852), v200);
          unsigned int v194 = (char *)v192[851];
          unint64_t v196 = (char *)v192[850];
        }
        else
        {
          v201 = 0;
        }
        uint64_t v209 = &v201[8 * v197];
        uint64_t v210 = &v201[8 * v200];
        *(void *)uint64_t v209 = v193;
        unint64_t v203 = v209 + 8;
        while (v194 != v196)
        {
          uint64_t v211 = *((void *)v194 - 1);
          v194 -= 8;
          *((void *)v209 - 1) = v211;
          v209 -= 8;
        }
LABEL_291:
        v192[850] = v209;
        v192[851] = v203;
        v192[852] = v210;
        if (v196) {
          operator delete(v196);
        }
        goto LABEL_293;
      }
    }
    *(void *)unsigned int v194 = v193;
    unint64_t v203 = v194 + 8;
LABEL_293:
    v192[851] = v203;
LABEL_294:
    int v213 = 1 << *(_DWORD *)(v3 + 48);
    if (v213 == 2)
    {
      unint64_t v214 = *(void **)a1[1];
      uint64_t v215 = *(_DWORD *)(a1[2] + 28) & 0xFFFFFLL;
      unint64_t v216 = (uint64_t *)v214[854];
      unint64_t v224 = v214[855];
      if ((unint64_t)v216 >= v224)
      {
        unint64_t v218 = (uint64_t *)v214[853];
        uint64_t v226 = v216 - v218;
        if ((unint64_t)(v226 + 1) >> 61) {
          goto LABEL_456;
        }
        unint64_t v227 = v224 - (void)v218;
        unint64_t v228 = (uint64_t)(v224 - (void)v218) >> 2;
        if (v228 <= v226 + 1) {
          unint64_t v228 = v226 + 1;
        }
        if (v227 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v229 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v229 = v228;
        }
        if (v229)
        {
          unint64_t v230 = (char *)sub_5714((uint64_t)(v214 + 855), v229);
          unint64_t v216 = (uint64_t *)v214[854];
          unint64_t v218 = (uint64_t *)v214[853];
        }
        else
        {
          unint64_t v230 = 0;
        }
        uint64_t v231 = (uint64_t *)&v230[8 * v226];
        uint64_t v232 = &v230[8 * v229];
        *uint64_t v231 = v215;
        unint64_t v225 = v231 + 1;
        while (v216 != v218)
        {
          uint64_t v234 = *--v216;
          *--uint64_t v231 = v234;
        }
        goto LABEL_323;
      }
    }
    else
    {
      if (v213 != 1) {
        goto LABEL_326;
      }
      unint64_t v214 = *(void **)a1[1];
      uint64_t v215 = *(_DWORD *)(a1[2] + 28) & 0xFFFFFLL;
      unint64_t v216 = (uint64_t *)v214[854];
      unint64_t v217 = v214[855];
      if ((unint64_t)v216 >= v217)
      {
        unint64_t v218 = (uint64_t *)v214[853];
        uint64_t v219 = v216 - v218;
        if ((unint64_t)(v219 + 1) >> 61) {
          goto LABEL_456;
        }
        unint64_t v220 = v217 - (void)v218;
        unint64_t v221 = (uint64_t)(v217 - (void)v218) >> 2;
        if (v221 <= v219 + 1) {
          unint64_t v221 = v219 + 1;
        }
        if (v220 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v222 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v222 = v221;
        }
        if (v222)
        {
          unsigned __int16 v223 = (char *)sub_5714((uint64_t)(v214 + 855), v222);
          unint64_t v216 = (uint64_t *)v214[854];
          unint64_t v218 = (uint64_t *)v214[853];
        }
        else
        {
          unsigned __int16 v223 = 0;
        }
        uint64_t v231 = (uint64_t *)&v223[8 * v219];
        uint64_t v232 = &v223[8 * v222];
        *uint64_t v231 = v215;
        unint64_t v225 = v231 + 1;
        while (v216 != v218)
        {
          uint64_t v233 = *--v216;
          *--uint64_t v231 = v233;
        }
LABEL_323:
        v214[853] = v231;
        v214[854] = v225;
        v214[855] = v232;
        if (v218) {
          operator delete(v218);
        }
        goto LABEL_325;
      }
    }
    *unint64_t v216 = v215;
    unint64_t v225 = v216 + 1;
LABEL_325:
    v214[854] = v225;
LABEL_326:
    int v235 = 1 << *(_DWORD *)(v3 + 48);
    if (v235 == 2)
    {
      unint64_t v236 = *(void **)a1[1];
      uint64_t v237 = *(_DWORD *)(a1[2] + 32) & 0xFFFFFLL;
      unint64_t v238 = (uint64_t *)v236[857];
      unint64_t v246 = v236[858];
      if ((unint64_t)v238 >= v246)
      {
        unint64_t v240 = (uint64_t *)v236[856];
        uint64_t v248 = v238 - v240;
        if ((unint64_t)(v248 + 1) >> 61) {
          goto LABEL_456;
        }
        unint64_t v249 = v246 - (void)v240;
        unint64_t v250 = (uint64_t)(v246 - (void)v240) >> 2;
        if (v250 <= v248 + 1) {
          unint64_t v250 = v248 + 1;
        }
        if (v249 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v251 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v251 = v250;
        }
        if (v251)
        {
          uint64_t v252 = (char *)sub_5714((uint64_t)(v236 + 858), v251);
          unint64_t v238 = (uint64_t *)v236[857];
          unint64_t v240 = (uint64_t *)v236[856];
        }
        else
        {
          uint64_t v252 = 0;
        }
        uint64_t v253 = (uint64_t *)&v252[8 * v248];
        uint64_t v254 = &v252[8 * v251];
        uint64_t *v253 = v237;
        unint64_t v247 = v253 + 1;
        while (v238 != v240)
        {
          uint64_t v256 = *--v238;
          *--uint64_t v253 = v256;
        }
        goto LABEL_355;
      }
    }
    else
    {
      if (v235 != 1) {
        goto LABEL_358;
      }
      unint64_t v236 = *(void **)a1[1];
      uint64_t v237 = *(_DWORD *)(a1[2] + 32) & 0xFFFFFLL;
      unint64_t v238 = (uint64_t *)v236[857];
      unint64_t v239 = v236[858];
      if ((unint64_t)v238 >= v239)
      {
        unint64_t v240 = (uint64_t *)v236[856];
        uint64_t v241 = v238 - v240;
        if ((unint64_t)(v241 + 1) >> 61) {
          goto LABEL_456;
        }
        unint64_t v242 = v239 - (void)v240;
        unint64_t v243 = (uint64_t)(v239 - (void)v240) >> 2;
        if (v243 <= v241 + 1) {
          unint64_t v243 = v241 + 1;
        }
        if (v242 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v244 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v244 = v243;
        }
        if (v244)
        {
          char v245 = (char *)sub_5714((uint64_t)(v236 + 858), v244);
          unint64_t v238 = (uint64_t *)v236[857];
          unint64_t v240 = (uint64_t *)v236[856];
        }
        else
        {
          char v245 = 0;
        }
        uint64_t v253 = (uint64_t *)&v245[8 * v241];
        uint64_t v254 = &v245[8 * v244];
        uint64_t *v253 = v237;
        unint64_t v247 = v253 + 1;
        while (v238 != v240)
        {
          uint64_t v255 = *--v238;
          *--uint64_t v253 = v255;
        }
LABEL_355:
        v236[856] = v253;
        v236[857] = v247;
        v236[858] = v254;
        if (v240) {
          operator delete(v240);
        }
        goto LABEL_357;
      }
    }
    uint64_t *v238 = v237;
    unint64_t v247 = v238 + 1;
LABEL_357:
    v236[857] = v247;
LABEL_358:
    int v257 = 1 << *(_DWORD *)(v3 + 48);
    if (v257 == 2)
    {
      unint64_t v258 = *(void **)a1[1];
      uint64_t v259 = *(_DWORD *)(a1[2] + 36) & 0xFFFFFLL;
      unint64_t v260 = (uint64_t *)v258[860];
      unint64_t v268 = v258[861];
      if ((unint64_t)v260 >= v268)
      {
        unint64_t v262 = (uint64_t *)v258[859];
        uint64_t v270 = v260 - v262;
        if ((unint64_t)(v270 + 1) >> 61) {
          goto LABEL_456;
        }
        unint64_t v271 = v268 - (void)v262;
        unint64_t v272 = (uint64_t)(v268 - (void)v262) >> 2;
        if (v272 <= v270 + 1) {
          unint64_t v272 = v270 + 1;
        }
        if (v271 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v273 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v273 = v272;
        }
        if (v273)
        {
          unsigned int v274 = (char *)sub_5714((uint64_t)(v258 + 861), v273);
          unint64_t v260 = (uint64_t *)v258[860];
          unint64_t v262 = (uint64_t *)v258[859];
        }
        else
        {
          unsigned int v274 = 0;
        }
        uint64_t v275 = (uint64_t *)&v274[8 * v270];
        uint64_t v276 = &v274[8 * v273];
        *uint64_t v275 = v259;
        unint64_t v269 = v275 + 1;
        while (v260 != v262)
        {
          uint64_t v278 = *--v260;
          *--uint64_t v275 = v278;
        }
        goto LABEL_387;
      }
    }
    else
    {
      if (v257 != 1) {
        goto LABEL_390;
      }
      unint64_t v258 = *(void **)a1[1];
      uint64_t v259 = *(_DWORD *)(a1[2] + 36) & 0xFFFFFLL;
      unint64_t v260 = (uint64_t *)v258[860];
      unint64_t v261 = v258[861];
      if ((unint64_t)v260 >= v261)
      {
        unint64_t v262 = (uint64_t *)v258[859];
        uint64_t v263 = v260 - v262;
        if ((unint64_t)(v263 + 1) >> 61) {
          goto LABEL_456;
        }
        unint64_t v264 = v261 - (void)v262;
        unint64_t v265 = (uint64_t)(v261 - (void)v262) >> 2;
        if (v265 <= v263 + 1) {
          unint64_t v265 = v263 + 1;
        }
        if (v264 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v266 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v266 = v265;
        }
        if (v266)
        {
          unsigned int v267 = (char *)sub_5714((uint64_t)(v258 + 861), v266);
          unint64_t v260 = (uint64_t *)v258[860];
          unint64_t v262 = (uint64_t *)v258[859];
        }
        else
        {
          unsigned int v267 = 0;
        }
        uint64_t v275 = (uint64_t *)&v267[8 * v263];
        uint64_t v276 = &v267[8 * v266];
        *uint64_t v275 = v259;
        unint64_t v269 = v275 + 1;
        while (v260 != v262)
        {
          uint64_t v277 = *--v260;
          *--uint64_t v275 = v277;
        }
LABEL_387:
        v258[859] = v275;
        v258[860] = v269;
        v258[861] = v276;
        if (v262) {
          operator delete(v262);
        }
        goto LABEL_389;
      }
    }
    uint64_t *v260 = v259;
    unint64_t v269 = v260 + 1;
LABEL_389:
    v258[860] = v269;
LABEL_390:
    int v279 = 1 << *(_DWORD *)(v3 + 48);
    if (v279 == 2)
    {
      unint64_t v280 = *(void **)a1[1];
      uint64_t v281 = *(_DWORD *)(a1[2] + 20) & 0xFFFFFLL;
      unint64_t v282 = (uint64_t *)v280[863];
      unint64_t v290 = v280[864];
      if ((unint64_t)v282 >= v290)
      {
        unint64_t v284 = (uint64_t *)v280[862];
        uint64_t v292 = v282 - v284;
        if ((unint64_t)(v292 + 1) >> 61) {
          goto LABEL_456;
        }
        unint64_t v293 = v290 - (void)v284;
        unint64_t v294 = (uint64_t)(v290 - (void)v284) >> 2;
        if (v294 <= v292 + 1) {
          unint64_t v294 = v292 + 1;
        }
        if (v293 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v295 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v295 = v294;
        }
        if (v295)
        {
          unint64_t v296 = (char *)sub_5714((uint64_t)(v280 + 864), v295);
          unint64_t v282 = (uint64_t *)v280[863];
          unint64_t v284 = (uint64_t *)v280[862];
        }
        else
        {
          unint64_t v296 = 0;
        }
        uint64_t v297 = (uint64_t *)&v296[8 * v292];
        uint64_t v298 = &v296[8 * v295];
        uint64_t *v297 = v281;
        unint64_t v291 = v297 + 1;
        while (v282 != v284)
        {
          uint64_t v300 = *--v282;
          *--uint64_t v297 = v300;
        }
        goto LABEL_419;
      }
    }
    else
    {
      if (v279 != 1) {
        goto LABEL_422;
      }
      unint64_t v280 = *(void **)a1[1];
      uint64_t v281 = *(_DWORD *)(a1[2] + 20) & 0xFFFFFLL;
      unint64_t v282 = (uint64_t *)v280[863];
      unint64_t v283 = v280[864];
      if ((unint64_t)v282 >= v283)
      {
        unint64_t v284 = (uint64_t *)v280[862];
        uint64_t v285 = v282 - v284;
        if ((unint64_t)(v285 + 1) >> 61) {
          goto LABEL_456;
        }
        unint64_t v286 = v283 - (void)v284;
        unint64_t v287 = (uint64_t)(v283 - (void)v284) >> 2;
        if (v287 <= v285 + 1) {
          unint64_t v287 = v285 + 1;
        }
        if (v286 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v288 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v288 = v287;
        }
        if (v288)
        {
          unsigned int v289 = (char *)sub_5714((uint64_t)(v280 + 864), v288);
          unint64_t v282 = (uint64_t *)v280[863];
          unint64_t v284 = (uint64_t *)v280[862];
        }
        else
        {
          unsigned int v289 = 0;
        }
        uint64_t v297 = (uint64_t *)&v289[8 * v285];
        uint64_t v298 = &v289[8 * v288];
        uint64_t *v297 = v281;
        unint64_t v291 = v297 + 1;
        while (v282 != v284)
        {
          uint64_t v299 = *--v282;
          *--uint64_t v297 = v299;
        }
LABEL_419:
        v280[862] = v297;
        v280[863] = v291;
        v280[864] = v298;
        if (v284) {
          operator delete(v284);
        }
        goto LABEL_421;
      }
    }
    *unint64_t v282 = v281;
    unint64_t v291 = v282 + 1;
LABEL_421:
    v280[863] = v291;
LABEL_422:
    int v301 = 1 << *(_DWORD *)(v3 + 48);
    if (v301 == 2)
    {
      uint64_t v313 = a1[2];
      unint64_t v303 = *(void **)a1[1];
      uint64_t v304 = *(_DWORD *)(v313 + 24) & 0xFFFFFLL;
      uint64_t v305 = (uint64_t *)v303[866];
      unint64_t v314 = v303[867];
      if ((unint64_t)v305 >= v314)
      {
        unint64_t v307 = (uint64_t *)v303[865];
        uint64_t v316 = v305 - v307;
        if (!((unint64_t)(v316 + 1) >> 61))
        {
          unint64_t v317 = v314 - (void)v307;
          unint64_t v318 = (uint64_t)(v314 - (void)v307) >> 2;
          if (v318 <= v316 + 1) {
            unint64_t v318 = v316 + 1;
          }
          if (v317 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v319 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v319 = v318;
          }
          if (v319)
          {
            unint64_t v320 = (char *)sub_5714((uint64_t)(v303 + 867), v319);
            uint64_t v305 = (uint64_t *)v303[866];
            unint64_t v307 = (uint64_t *)v303[865];
          }
          else
          {
            unint64_t v320 = 0;
          }
          int v321 = (uint64_t *)&v320[8 * v316];
          unsigned int v322 = &v320[8 * v319];
          *int v321 = v304;
          unint64_t v315 = v321 + 1;
          while (v305 != v307)
          {
            uint64_t v324 = *--v305;
            *--int v321 = v324;
          }
          goto LABEL_451;
        }
LABEL_456:
        sub_566C();
      }
    }
    else
    {
      if (v301 != 1)
      {
LABEL_454:
        *a2 = 1;
        return;
      }
      uint64_t v302 = a1[2];
      unint64_t v303 = *(void **)a1[1];
      uint64_t v304 = *(_DWORD *)(v302 + 24) & 0xFFFFFLL;
      uint64_t v305 = (uint64_t *)v303[866];
      unint64_t v306 = v303[867];
      if ((unint64_t)v305 >= v306)
      {
        unint64_t v307 = (uint64_t *)v303[865];
        uint64_t v308 = v305 - v307;
        if (!((unint64_t)(v308 + 1) >> 61))
        {
          unint64_t v309 = v306 - (void)v307;
          unint64_t v310 = (uint64_t)(v306 - (void)v307) >> 2;
          if (v310 <= v308 + 1) {
            unint64_t v310 = v308 + 1;
          }
          if (v309 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v311 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v311 = v310;
          }
          if (v311)
          {
            uint64_t v312 = (char *)sub_5714((uint64_t)(v303 + 867), v311);
            uint64_t v305 = (uint64_t *)v303[866];
            unint64_t v307 = (uint64_t *)v303[865];
          }
          else
          {
            uint64_t v312 = 0;
          }
          int v321 = (uint64_t *)&v312[8 * v308];
          unsigned int v322 = &v312[8 * v311];
          *int v321 = v304;
          unint64_t v315 = v321 + 1;
          while (v305 != v307)
          {
            uint64_t v323 = *--v305;
            *--int v321 = v323;
          }
LABEL_451:
          v303[865] = v321;
          v303[866] = v315;
          v303[867] = v322;
          if (v307) {
            operator delete(v307);
          }
          goto LABEL_453;
        }
        goto LABEL_456;
      }
    }
    *uint64_t v305 = v304;
    unint64_t v315 = v305 + 1;
LABEL_453:
    v303[866] = v315;
    goto LABEL_454;
  }
  int v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    int32x2_t v18 = (void *)a1[1];
    uint64_t v17 = a1[2];
    uint64_t v19 = (void *)*v18;
    *(void *)(v19[827] - 8) += *(_DWORD *)(v17 + 40) & 0xFFFFF;
    *(void *)(v19[830] - 8) += *(_DWORD *)(v17 + 44) & 0xFFFFF;
    *(void *)(v19[833] - 8) += *(_DWORD *)(v17 + 48) & 0xFFFFF;
    *(void *)(v19[836] - 8) += *(unsigned __int16 *)(v17 + 56);
    *(void *)(v19[839] - 8) += *(unsigned __int16 *)(v17 + 52);
    *(void *)(v19[842] - 8) += *(_WORD *)(v17 + 58) & 0x7FFF;
    *(void *)(v19[845] - 8) += *(_WORD *)(v17 + 54) & 0x7FFF;
    *(void *)(v19[848] - 8) += *(_WORD *)(v17 + 60) & 0x7FFF;
    *(void *)(v19[851] - 8) += *(_WORD *)(v17 + 62) & 0x7FFF;
    *(void *)(v19[854] - 8) += *(_DWORD *)(v17 + 28) & 0xFFFFF;
    uint64_t v20 = (_DWORD *)a1[2];
    uint8x8_t v21 = (void *)*v18;
    *(void *)(v21[857] - 8) += v20[8] & 0xFFFFF;
    *(void *)(v21[860] - 8) += v20[9] & 0xFFFFF;
    *(void *)(v21[863] - 8) += v20[5] & 0xFFFFF;
    *(void *)(v21[866] - 8) += v20[6] & 0xFFFFF;
  }
}

void sub_C67C8(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    int v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_WORD *)(a1[2] + 56) & 0x7FFF;
      uint64_t v8 = (char *)v6[98];
      unint64_t v22 = v6[99];
      if ((unint64_t)v8 >= v22)
      {
        long long v10 = (char *)v6[97];
        uint64_t v24 = (v8 - v10) >> 3;
        if ((unint64_t)(v24 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v25 = v22 - (void)v10;
        unint64_t v26 = (uint64_t)(v22 - (void)v10) >> 2;
        if (v26 <= v24 + 1) {
          unint64_t v26 = v24 + 1;
        }
        if (v25 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v26;
        }
        if (v27)
        {
          unint64_t v28 = (char *)sub_5714((uint64_t)(v6 + 99), v27);
          uint64_t v8 = (char *)v6[98];
          long long v10 = (char *)v6[97];
        }
        else
        {
          unint64_t v28 = 0;
        }
        unint64_t v29 = &v28[8 * v24];
        __int16 v30 = &v28[8 * v27];
        *(void *)unint64_t v29 = v7;
        uint8x8_t v23 = v29 + 8;
        while (v8 != v10)
        {
          uint64_t v32 = *((void *)v8 - 1);
          v8 -= 8;
          *((void *)v29 - 1) = v32;
          v29 -= 8;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1) {
        goto LABEL_38;
      }
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_WORD *)(a1[2] + 56) & 0x7FFF;
      uint64_t v8 = (char *)v6[98];
      unint64_t v9 = v6[99];
      if ((unint64_t)v8 >= v9)
      {
        long long v10 = (char *)v6[97];
        uint64_t v11 = (v8 - v10) >> 3;
        if ((unint64_t)(v11 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v12 = v9 - (void)v10;
        unint64_t v13 = (uint64_t)(v9 - (void)v10) >> 2;
        if (v13 <= v11 + 1) {
          unint64_t v13 = v11 + 1;
        }
        if (v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14)
        {
          uint64_t v15 = (char *)sub_5714((uint64_t)(v6 + 99), v14);
          uint64_t v8 = (char *)v6[98];
          long long v10 = (char *)v6[97];
        }
        else
        {
          uint64_t v15 = 0;
        }
        unint64_t v29 = &v15[8 * v11];
        __int16 v30 = &v15[8 * v14];
        *(void *)unint64_t v29 = v7;
        uint8x8_t v23 = v29 + 8;
        while (v8 != v10)
        {
          uint64_t v31 = *((void *)v8 - 1);
          v8 -= 8;
          *((void *)v29 - 1) = v31;
          v29 -= 8;
        }
LABEL_35:
        v6[97] = v29;
        v6[98] = v23;
        v6[99] = v30;
        if (v10) {
          operator delete(v10);
        }
        goto LABEL_37;
      }
    }
    *(void *)uint64_t v8 = v7;
    uint8x8_t v23 = v8 + 8;
LABEL_37:
    v6[98] = v23;
LABEL_38:
    int v33 = 1 << *(_DWORD *)(v3 + 48);
    if (v33 == 2)
    {
      uint64_t v34 = *(void **)a1[1];
      uint64_t v35 = *(_WORD *)(a1[2] + 52) & 0x7FFF;
      __int16 v36 = (char *)v34[101];
      unint64_t v44 = v34[102];
      if ((unint64_t)v36 >= v44)
      {
        uint64_t v38 = (char *)v34[100];
        uint64_t v46 = (v36 - v38) >> 3;
        if ((unint64_t)(v46 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v47 = v44 - (void)v38;
        unint64_t v48 = (uint64_t)(v44 - (void)v38) >> 2;
        if (v48 <= v46 + 1) {
          unint64_t v48 = v46 + 1;
        }
        if (v47 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v49 = v48;
        }
        if (v49)
        {
          unint64_t v50 = (char *)sub_5714((uint64_t)(v34 + 102), v49);
          __int16 v36 = (char *)v34[101];
          uint64_t v38 = (char *)v34[100];
        }
        else
        {
          unint64_t v50 = 0;
        }
        unint64_t v51 = &v50[8 * v46];
        unint64_t v52 = &v50[8 * v49];
        *(void *)unint64_t v51 = v35;
        uint16x8_t v45 = v51 + 8;
        while (v36 != v38)
        {
          uint64_t v54 = *((void *)v36 - 1);
          v36 -= 8;
          *((void *)v51 - 1) = v54;
          v51 -= 8;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v33 != 1) {
        goto LABEL_70;
      }
      uint64_t v34 = *(void **)a1[1];
      uint64_t v35 = *(_WORD *)(a1[2] + 52) & 0x7FFF;
      __int16 v36 = (char *)v34[101];
      unint64_t v37 = v34[102];
      if ((unint64_t)v36 >= v37)
      {
        uint64_t v38 = (char *)v34[100];
        uint64_t v39 = (v36 - v38) >> 3;
        if ((unint64_t)(v39 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v40 = v37 - (void)v38;
        unint64_t v41 = (uint64_t)(v37 - (void)v38) >> 2;
        if (v41 <= v39 + 1) {
          unint64_t v41 = v39 + 1;
        }
        if (v40 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v42 = v41;
        }
        if (v42)
        {
          unint64_t v43 = (char *)sub_5714((uint64_t)(v34 + 102), v42);
          __int16 v36 = (char *)v34[101];
          uint64_t v38 = (char *)v34[100];
        }
        else
        {
          unint64_t v43 = 0;
        }
        unint64_t v51 = &v43[8 * v39];
        unint64_t v52 = &v43[8 * v42];
        *(void *)unint64_t v51 = v35;
        uint16x8_t v45 = v51 + 8;
        while (v36 != v38)
        {
          uint64_t v53 = *((void *)v36 - 1);
          v36 -= 8;
          *((void *)v51 - 1) = v53;
          v51 -= 8;
        }
LABEL_67:
        v34[100] = v51;
        v34[101] = v45;
        v34[102] = v52;
        if (v38) {
          operator delete(v38);
        }
        goto LABEL_69;
      }
    }
    *(void *)__int16 v36 = v35;
    uint16x8_t v45 = v36 + 8;
LABEL_69:
    v34[101] = v45;
LABEL_70:
    int v55 = 1 << *(_DWORD *)(v3 + 48);
    if (v55 == 2)
    {
      uint64_t v56 = *(void **)a1[1];
      uint64_t v57 = *(_WORD *)(a1[2] + 58) & 0x7FFF;
      unint64_t v58 = (char *)v56[104];
      unint64_t v66 = v56[105];
      if ((unint64_t)v58 >= v66)
      {
        unint64_t v60 = (char *)v56[103];
        uint64_t v68 = (v58 - v60) >> 3;
        if ((unint64_t)(v68 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v69 = v66 - (void)v60;
        unint64_t v70 = (uint64_t)(v66 - (void)v60) >> 2;
        if (v70 <= v68 + 1) {
          unint64_t v70 = v68 + 1;
        }
        if (v69 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v71 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v71 = v70;
        }
        if (v71)
        {
          unint64_t v72 = (char *)sub_5714((uint64_t)(v56 + 105), v71);
          unint64_t v58 = (char *)v56[104];
          unint64_t v60 = (char *)v56[103];
        }
        else
        {
          unint64_t v72 = 0;
        }
        unint64_t v73 = &v72[8 * v68];
        unint64_t v74 = &v72[8 * v71];
        *(void *)unint64_t v73 = v57;
        unsigned __int16 v67 = v73 + 8;
        while (v58 != v60)
        {
          uint64_t v76 = *((void *)v58 - 1);
          v58 -= 8;
          *((void *)v73 - 1) = v76;
          v73 -= 8;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v55 != 1) {
        goto LABEL_102;
      }
      uint64_t v56 = *(void **)a1[1];
      uint64_t v57 = *(_WORD *)(a1[2] + 58) & 0x7FFF;
      unint64_t v58 = (char *)v56[104];
      unint64_t v59 = v56[105];
      if ((unint64_t)v58 >= v59)
      {
        unint64_t v60 = (char *)v56[103];
        uint64_t v61 = (v58 - v60) >> 3;
        if ((unint64_t)(v61 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v62 = v59 - (void)v60;
        unint64_t v63 = (uint64_t)(v59 - (void)v60) >> 2;
        if (v63 <= v61 + 1) {
          unint64_t v63 = v61 + 1;
        }
        if (v62 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v64 = v63;
        }
        if (v64)
        {
          unint64_t v65 = (char *)sub_5714((uint64_t)(v56 + 105), v64);
          unint64_t v58 = (char *)v56[104];
          unint64_t v60 = (char *)v56[103];
        }
        else
        {
          unint64_t v65 = 0;
        }
        unint64_t v73 = &v65[8 * v61];
        unint64_t v74 = &v65[8 * v64];
        *(void *)unint64_t v73 = v57;
        unsigned __int16 v67 = v73 + 8;
        while (v58 != v60)
        {
          uint64_t v75 = *((void *)v58 - 1);
          v58 -= 8;
          *((void *)v73 - 1) = v75;
          v73 -= 8;
        }
LABEL_99:
        v56[103] = v73;
        v56[104] = v67;
        v56[105] = v74;
        if (v60) {
          operator delete(v60);
        }
        goto LABEL_101;
      }
    }
    *(void *)unint64_t v58 = v57;
    unsigned __int16 v67 = v58 + 8;
LABEL_101:
    v56[104] = v67;
LABEL_102:
    int v77 = 1 << *(_DWORD *)(v3 + 48);
    if (v77 == 2)
    {
      uint64_t v78 = *(void **)a1[1];
      uint64_t v79 = *(_WORD *)(a1[2] + 54) & 0x7FFF;
      uint64_t v80 = (char *)v78[107];
      unint64_t v88 = v78[108];
      if ((unint64_t)v80 >= v88)
      {
        unint64_t v82 = (char *)v78[106];
        uint64_t v90 = (v80 - v82) >> 3;
        if ((unint64_t)(v90 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v91 = v88 - (void)v82;
        unint64_t v92 = (uint64_t)(v88 - (void)v82) >> 2;
        if (v92 <= v90 + 1) {
          unint64_t v92 = v90 + 1;
        }
        if (v91 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v93 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v93 = v92;
        }
        if (v93)
        {
          unint64_t v94 = (char *)sub_5714((uint64_t)(v78 + 108), v93);
          uint64_t v80 = (char *)v78[107];
          unint64_t v82 = (char *)v78[106];
        }
        else
        {
          unint64_t v94 = 0;
        }
        unint64_t v95 = &v94[8 * v90];
        unint64_t v96 = &v94[8 * v93];
        *(void *)unint64_t v95 = v79;
        uint64_t v89 = v95 + 8;
        while (v80 != v82)
        {
          uint64_t v98 = *((void *)v80 - 1);
          v80 -= 8;
          *((void *)v95 - 1) = v98;
          v95 -= 8;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v77 != 1) {
        goto LABEL_134;
      }
      uint64_t v78 = *(void **)a1[1];
      uint64_t v79 = *(_WORD *)(a1[2] + 54) & 0x7FFF;
      uint64_t v80 = (char *)v78[107];
      unint64_t v81 = v78[108];
      if ((unint64_t)v80 >= v81)
      {
        unint64_t v82 = (char *)v78[106];
        uint64_t v83 = (v80 - v82) >> 3;
        if ((unint64_t)(v83 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v84 = v81 - (void)v82;
        unint64_t v85 = (uint64_t)(v81 - (void)v82) >> 2;
        if (v85 <= v83 + 1) {
          unint64_t v85 = v83 + 1;
        }
        if (v84 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v86 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v86 = v85;
        }
        if (v86)
        {
          unint64_t v87 = (char *)sub_5714((uint64_t)(v78 + 108), v86);
          uint64_t v80 = (char *)v78[107];
          unint64_t v82 = (char *)v78[106];
        }
        else
        {
          unint64_t v87 = 0;
        }
        unint64_t v95 = &v87[8 * v83];
        unint64_t v96 = &v87[8 * v86];
        *(void *)unint64_t v95 = v79;
        uint64_t v89 = v95 + 8;
        while (v80 != v82)
        {
          uint64_t v97 = *((void *)v80 - 1);
          v80 -= 8;
          *((void *)v95 - 1) = v97;
          v95 -= 8;
        }
LABEL_131:
        v78[106] = v95;
        v78[107] = v89;
        v78[108] = v96;
        if (v82) {
          operator delete(v82);
        }
        goto LABEL_133;
      }
    }
    *(void *)uint64_t v80 = v79;
    uint64_t v89 = v80 + 8;
LABEL_133:
    v78[107] = v89;
LABEL_134:
    int v99 = 1 << *(_DWORD *)(v3 + 48);
    if (v99 == 2)
    {
      uint64_t v100 = *(void **)a1[1];
      uint64_t v101 = *(_WORD *)(a1[2] + 36) & 0x7FFF;
      uint64_t v102 = (char *)v100[110];
      unint64_t v110 = v100[111];
      if ((unint64_t)v102 >= v110)
      {
        uint64_t v104 = (char *)v100[109];
        uint64_t v112 = (v102 - v104) >> 3;
        if ((unint64_t)(v112 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v113 = v110 - (void)v104;
        unint64_t v114 = (uint64_t)(v110 - (void)v104) >> 2;
        if (v114 <= v112 + 1) {
          unint64_t v114 = v112 + 1;
        }
        if (v113 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v115 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v115 = v114;
        }
        if (v115)
        {
          uint64_t v116 = (char *)sub_5714((uint64_t)(v100 + 111), v115);
          uint64_t v102 = (char *)v100[110];
          uint64_t v104 = (char *)v100[109];
        }
        else
        {
          uint64_t v116 = 0;
        }
        unint64_t v117 = &v116[8 * v112];
        unint64_t v118 = &v116[8 * v115];
        *(void *)unint64_t v117 = v101;
        unint64_t v111 = v117 + 8;
        while (v102 != v104)
        {
          uint64_t v120 = *((void *)v102 - 1);
          v102 -= 8;
          *((void *)v117 - 1) = v120;
          v117 -= 8;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v99 != 1) {
        goto LABEL_166;
      }
      uint64_t v100 = *(void **)a1[1];
      uint64_t v101 = *(_WORD *)(a1[2] + 36) & 0x7FFF;
      uint64_t v102 = (char *)v100[110];
      unint64_t v103 = v100[111];
      if ((unint64_t)v102 >= v103)
      {
        uint64_t v104 = (char *)v100[109];
        uint64_t v105 = (v102 - v104) >> 3;
        if ((unint64_t)(v105 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v106 = v103 - (void)v104;
        unint64_t v107 = (uint64_t)(v103 - (void)v104) >> 2;
        if (v107 <= v105 + 1) {
          unint64_t v107 = v105 + 1;
        }
        if (v106 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v108 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v108 = v107;
        }
        if (v108)
        {
          unint64_t v109 = (char *)sub_5714((uint64_t)(v100 + 111), v108);
          uint64_t v102 = (char *)v100[110];
          uint64_t v104 = (char *)v100[109];
        }
        else
        {
          unint64_t v109 = 0;
        }
        unint64_t v117 = &v109[8 * v105];
        unint64_t v118 = &v109[8 * v108];
        *(void *)unint64_t v117 = v101;
        unint64_t v111 = v117 + 8;
        while (v102 != v104)
        {
          uint64_t v119 = *((void *)v102 - 1);
          v102 -= 8;
          *((void *)v117 - 1) = v119;
          v117 -= 8;
        }
LABEL_163:
        v100[109] = v117;
        v100[110] = v111;
        v100[111] = v118;
        if (v104) {
          operator delete(v104);
        }
        goto LABEL_165;
      }
    }
    *(void *)uint64_t v102 = v101;
    unint64_t v111 = v102 + 8;
LABEL_165:
    v100[110] = v111;
LABEL_166:
    int v121 = 1 << *(_DWORD *)(v3 + 48);
    if (v121 == 2)
    {
      uint64_t v122 = *(void **)a1[1];
      uint64_t v123 = *(_WORD *)(a1[2] + 20) & 0x7FFF;
      uint64_t v124 = (char *)v122[113];
      unint64_t v132 = v122[114];
      if ((unint64_t)v124 >= v132)
      {
        unint64_t v126 = (char *)v122[112];
        uint64_t v134 = (v124 - v126) >> 3;
        if ((unint64_t)(v134 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v135 = v132 - (void)v126;
        unint64_t v136 = (uint64_t)(v132 - (void)v126) >> 2;
        if (v136 <= v134 + 1) {
          unint64_t v136 = v134 + 1;
        }
        if (v135 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v137 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v137 = v136;
        }
        if (v137)
        {
          uint64_t v138 = (char *)sub_5714((uint64_t)(v122 + 114), v137);
          uint64_t v124 = (char *)v122[113];
          unint64_t v126 = (char *)v122[112];
        }
        else
        {
          uint64_t v138 = 0;
        }
        unint64_t v139 = &v138[8 * v134];
        unint64_t v140 = &v138[8 * v137];
        *(void *)unint64_t v139 = v123;
        unint64_t v133 = v139 + 8;
        while (v124 != v126)
        {
          uint64_t v142 = *((void *)v124 - 1);
          v124 -= 8;
          *((void *)v139 - 1) = v142;
          v139 -= 8;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v121 != 1) {
        goto LABEL_198;
      }
      uint64_t v122 = *(void **)a1[1];
      uint64_t v123 = *(_WORD *)(a1[2] + 20) & 0x7FFF;
      uint64_t v124 = (char *)v122[113];
      unint64_t v125 = v122[114];
      if ((unint64_t)v124 >= v125)
      {
        unint64_t v126 = (char *)v122[112];
        uint64_t v127 = (v124 - v126) >> 3;
        if ((unint64_t)(v127 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v128 = v125 - (void)v126;
        unint64_t v129 = (uint64_t)(v125 - (void)v126) >> 2;
        if (v129 <= v127 + 1) {
          unint64_t v129 = v127 + 1;
        }
        if (v128 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v130 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v130 = v129;
        }
        if (v130)
        {
          uint64_t v131 = (char *)sub_5714((uint64_t)(v122 + 114), v130);
          uint64_t v124 = (char *)v122[113];
          unint64_t v126 = (char *)v122[112];
        }
        else
        {
          uint64_t v131 = 0;
        }
        unint64_t v139 = &v131[8 * v127];
        unint64_t v140 = &v131[8 * v130];
        *(void *)unint64_t v139 = v123;
        unint64_t v133 = v139 + 8;
        while (v124 != v126)
        {
          uint64_t v141 = *((void *)v124 - 1);
          v124 -= 8;
          *((void *)v139 - 1) = v141;
          v139 -= 8;
        }
LABEL_195:
        v122[112] = v139;
        v122[113] = v133;
        v122[114] = v140;
        if (v126) {
          operator delete(v126);
        }
        goto LABEL_197;
      }
    }
    *(void *)uint64_t v124 = v123;
    unint64_t v133 = v124 + 8;
LABEL_197:
    v122[113] = v133;
LABEL_198:
    int v143 = 1 << *(_DWORD *)(v3 + 48);
    if (v143 == 2)
    {
      uint64_t v144 = *(void **)a1[1];
      uint64_t v145 = *(_WORD *)(a1[2] + 38) & 0x7FFF;
      uint64_t v146 = (char *)v144[116];
      unint64_t v154 = v144[117];
      if ((unint64_t)v146 >= v154)
      {
        unint64_t v148 = (char *)v144[115];
        uint64_t v156 = (v146 - v148) >> 3;
        if ((unint64_t)(v156 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v157 = v154 - (void)v148;
        unint64_t v158 = (uint64_t)(v154 - (void)v148) >> 2;
        if (v158 <= v156 + 1) {
          unint64_t v158 = v156 + 1;
        }
        if (v157 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v159 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v159 = v158;
        }
        if (v159)
        {
          uint64_t v160 = (char *)sub_5714((uint64_t)(v144 + 117), v159);
          uint64_t v146 = (char *)v144[116];
          unint64_t v148 = (char *)v144[115];
        }
        else
        {
          uint64_t v160 = 0;
        }
        unint64_t v161 = &v160[8 * v156];
        unint64_t v162 = &v160[8 * v159];
        *(void *)unint64_t v161 = v145;
        unint64_t v155 = v161 + 8;
        while (v146 != v148)
        {
          uint64_t v164 = *((void *)v146 - 1);
          v146 -= 8;
          *((void *)v161 - 1) = v164;
          v161 -= 8;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v143 != 1) {
        goto LABEL_230;
      }
      uint64_t v144 = *(void **)a1[1];
      uint64_t v145 = *(_WORD *)(a1[2] + 38) & 0x7FFF;
      uint64_t v146 = (char *)v144[116];
      unint64_t v147 = v144[117];
      if ((unint64_t)v146 >= v147)
      {
        unint64_t v148 = (char *)v144[115];
        uint64_t v149 = (v146 - v148) >> 3;
        if ((unint64_t)(v149 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v150 = v147 - (void)v148;
        unint64_t v151 = (uint64_t)(v147 - (void)v148) >> 2;
        if (v151 <= v149 + 1) {
          unint64_t v151 = v149 + 1;
        }
        if (v150 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v152 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v152 = v151;
        }
        if (v152)
        {
          uint64_t v153 = (char *)sub_5714((uint64_t)(v144 + 117), v152);
          uint64_t v146 = (char *)v144[116];
          unint64_t v148 = (char *)v144[115];
        }
        else
        {
          uint64_t v153 = 0;
        }
        unint64_t v161 = &v153[8 * v149];
        unint64_t v162 = &v153[8 * v152];
        *(void *)unint64_t v161 = v145;
        unint64_t v155 = v161 + 8;
        while (v146 != v148)
        {
          uint64_t v163 = *((void *)v146 - 1);
          v146 -= 8;
          *((void *)v161 - 1) = v163;
          v161 -= 8;
        }
LABEL_227:
        v144[115] = v161;
        v144[116] = v155;
        v144[117] = v162;
        if (v148) {
          operator delete(v148);
        }
        goto LABEL_229;
      }
    }
    *(void *)uint64_t v146 = v145;
    unint64_t v155 = v146 + 8;
LABEL_229:
    v144[116] = v155;
LABEL_230:
    int v165 = 1 << *(_DWORD *)(v3 + 48);
    if (v165 == 2)
    {
      uint64_t v166 = *(void **)a1[1];
      uint64_t v167 = *(_WORD *)(a1[2] + 22) & 0x7FFF;
      uint64_t v168 = (char *)v166[119];
      unint64_t v176 = v166[120];
      if ((unint64_t)v168 >= v176)
      {
        unint64_t v170 = (char *)v166[118];
        uint64_t v178 = (v168 - v170) >> 3;
        if ((unint64_t)(v178 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v179 = v176 - (void)v170;
        unint64_t v180 = (uint64_t)(v176 - (void)v170) >> 2;
        if (v180 <= v178 + 1) {
          unint64_t v180 = v178 + 1;
        }
        if (v179 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v181 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v181 = v180;
        }
        if (v181)
        {
          uint64_t v182 = (char *)sub_5714((uint64_t)(v166 + 120), v181);
          uint64_t v168 = (char *)v166[119];
          unint64_t v170 = (char *)v166[118];
        }
        else
        {
          uint64_t v182 = 0;
        }
        unint64_t v183 = &v182[8 * v178];
        unint64_t v184 = &v182[8 * v181];
        *(void *)unint64_t v183 = v167;
        unint64_t v177 = v183 + 8;
        while (v168 != v170)
        {
          uint64_t v186 = *((void *)v168 - 1);
          v168 -= 8;
          *((void *)v183 - 1) = v186;
          v183 -= 8;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v165 != 1) {
        goto LABEL_262;
      }
      uint64_t v166 = *(void **)a1[1];
      uint64_t v167 = *(_WORD *)(a1[2] + 22) & 0x7FFF;
      uint64_t v168 = (char *)v166[119];
      unint64_t v169 = v166[120];
      if ((unint64_t)v168 >= v169)
      {
        unint64_t v170 = (char *)v166[118];
        uint64_t v171 = (v168 - v170) >> 3;
        if ((unint64_t)(v171 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v172 = v169 - (void)v170;
        unint64_t v173 = (uint64_t)(v169 - (void)v170) >> 2;
        if (v173 <= v171 + 1) {
          unint64_t v173 = v171 + 1;
        }
        if (v172 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v174 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v174 = v173;
        }
        if (v174)
        {
          uint64_t v175 = (char *)sub_5714((uint64_t)(v166 + 120), v174);
          uint64_t v168 = (char *)v166[119];
          unint64_t v170 = (char *)v166[118];
        }
        else
        {
          uint64_t v175 = 0;
        }
        unint64_t v183 = &v175[8 * v171];
        unint64_t v184 = &v175[8 * v174];
        *(void *)unint64_t v183 = v167;
        unint64_t v177 = v183 + 8;
        while (v168 != v170)
        {
          uint64_t v185 = *((void *)v168 - 1);
          v168 -= 8;
          *((void *)v183 - 1) = v185;
          v183 -= 8;
        }
LABEL_259:
        v166[118] = v183;
        v166[119] = v177;
        v166[120] = v184;
        if (v170) {
          operator delete(v170);
        }
        goto LABEL_261;
      }
    }
    *(void *)uint64_t v168 = v167;
    unint64_t v177 = v168 + 8;
LABEL_261:
    v166[119] = v177;
LABEL_262:
    int v187 = 1 << *(_DWORD *)(v3 + 48);
    if (v187 == 2)
    {
      uint64_t v188 = *(void **)a1[1];
      uint64_t v189 = *(_WORD *)(a1[2] + 40) & 0x7FFF;
      uint64_t v190 = (char *)v188[122];
      unint64_t v198 = v188[123];
      if ((unint64_t)v190 >= v198)
      {
        unsigned int v192 = (char *)v188[121];
        uint64_t v200 = (v190 - v192) >> 3;
        if ((unint64_t)(v200 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v201 = v198 - (void)v192;
        unint64_t v202 = (uint64_t)(v198 - (void)v192) >> 2;
        if (v202 <= v200 + 1) {
          unint64_t v202 = v200 + 1;
        }
        if (v201 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v203 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v203 = v202;
        }
        if (v203)
        {
          uint64_t v204 = (char *)sub_5714((uint64_t)(v188 + 123), v203);
          uint64_t v190 = (char *)v188[122];
          unsigned int v192 = (char *)v188[121];
        }
        else
        {
          uint64_t v204 = 0;
        }
        unint64_t v205 = &v204[8 * v200];
        unint64_t v206 = &v204[8 * v203];
        *(void *)unint64_t v205 = v189;
        unint64_t v199 = v205 + 8;
        while (v190 != v192)
        {
          uint64_t v208 = *((void *)v190 - 1);
          v190 -= 8;
          *((void *)v205 - 1) = v208;
          v205 -= 8;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v187 != 1) {
        goto LABEL_294;
      }
      uint64_t v188 = *(void **)a1[1];
      uint64_t v189 = *(_WORD *)(a1[2] + 40) & 0x7FFF;
      uint64_t v190 = (char *)v188[122];
      unint64_t v191 = v188[123];
      if ((unint64_t)v190 >= v191)
      {
        unsigned int v192 = (char *)v188[121];
        uint64_t v193 = (v190 - v192) >> 3;
        if ((unint64_t)(v193 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v194 = v191 - (void)v192;
        unint64_t v195 = (uint64_t)(v191 - (void)v192) >> 2;
        if (v195 <= v193 + 1) {
          unint64_t v195 = v193 + 1;
        }
        if (v194 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v196 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v196 = v195;
        }
        if (v196)
        {
          uint64_t v197 = (char *)sub_5714((uint64_t)(v188 + 123), v196);
          uint64_t v190 = (char *)v188[122];
          unsigned int v192 = (char *)v188[121];
        }
        else
        {
          uint64_t v197 = 0;
        }
        unint64_t v205 = &v197[8 * v193];
        unint64_t v206 = &v197[8 * v196];
        *(void *)unint64_t v205 = v189;
        unint64_t v199 = v205 + 8;
        while (v190 != v192)
        {
          uint64_t v207 = *((void *)v190 - 1);
          v190 -= 8;
          *((void *)v205 - 1) = v207;
          v205 -= 8;
        }
LABEL_291:
        v188[121] = v205;
        v188[122] = v199;
        v188[123] = v206;
        if (v192) {
          operator delete(v192);
        }
        goto LABEL_293;
      }
    }
    *(void *)uint64_t v190 = v189;
    unint64_t v199 = v190 + 8;
LABEL_293:
    v188[122] = v199;
LABEL_294:
    int v209 = 1 << *(_DWORD *)(v3 + 48);
    if (v209 == 2)
    {
      uint64_t v210 = *(void **)a1[1];
      uint64_t v211 = *(_WORD *)(a1[2] + 24) & 0x7FFF;
      uint64_t v212 = (char *)v210[125];
      unint64_t v220 = v210[126];
      if ((unint64_t)v212 >= v220)
      {
        unint64_t v214 = (char *)v210[124];
        uint64_t v222 = (v212 - v214) >> 3;
        if ((unint64_t)(v222 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v223 = v220 - (void)v214;
        unint64_t v224 = (uint64_t)(v220 - (void)v214) >> 2;
        if (v224 <= v222 + 1) {
          unint64_t v224 = v222 + 1;
        }
        if (v223 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v225 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v225 = v224;
        }
        if (v225)
        {
          uint64_t v226 = (char *)sub_5714((uint64_t)(v210 + 126), v225);
          uint64_t v212 = (char *)v210[125];
          unint64_t v214 = (char *)v210[124];
        }
        else
        {
          uint64_t v226 = 0;
        }
        unint64_t v227 = &v226[8 * v222];
        unint64_t v228 = &v226[8 * v225];
        *(void *)unint64_t v227 = v211;
        unint64_t v221 = v227 + 8;
        while (v212 != v214)
        {
          uint64_t v230 = *((void *)v212 - 1);
          v212 -= 8;
          *((void *)v227 - 1) = v230;
          v227 -= 8;
        }
        goto LABEL_323;
      }
    }
    else
    {
      if (v209 != 1) {
        goto LABEL_326;
      }
      uint64_t v210 = *(void **)a1[1];
      uint64_t v211 = *(_WORD *)(a1[2] + 24) & 0x7FFF;
      uint64_t v212 = (char *)v210[125];
      unint64_t v213 = v210[126];
      if ((unint64_t)v212 >= v213)
      {
        unint64_t v214 = (char *)v210[124];
        uint64_t v215 = (v212 - v214) >> 3;
        if ((unint64_t)(v215 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v216 = v213 - (void)v214;
        unint64_t v217 = (uint64_t)(v213 - (void)v214) >> 2;
        if (v217 <= v215 + 1) {
          unint64_t v217 = v215 + 1;
        }
        if (v216 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v218 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v218 = v217;
        }
        if (v218)
        {
          uint64_t v219 = (char *)sub_5714((uint64_t)(v210 + 126), v218);
          uint64_t v212 = (char *)v210[125];
          unint64_t v214 = (char *)v210[124];
        }
        else
        {
          uint64_t v219 = 0;
        }
        unint64_t v227 = &v219[8 * v215];
        unint64_t v228 = &v219[8 * v218];
        *(void *)unint64_t v227 = v211;
        unint64_t v221 = v227 + 8;
        while (v212 != v214)
        {
          uint64_t v229 = *((void *)v212 - 1);
          v212 -= 8;
          *((void *)v227 - 1) = v229;
          v227 -= 8;
        }
LABEL_323:
        v210[124] = v227;
        v210[125] = v221;
        v210[126] = v228;
        if (v214) {
          operator delete(v214);
        }
        goto LABEL_325;
      }
    }
    *(void *)uint64_t v212 = v211;
    unint64_t v221 = v212 + 8;
LABEL_325:
    v210[125] = v221;
LABEL_326:
    int v231 = 1 << *(_DWORD *)(v3 + 48);
    if (v231 == 2)
    {
      uint64_t v232 = *(void **)a1[1];
      uint64_t v233 = *(_WORD *)(a1[2] + 42) & 0x7FFF;
      uint64_t v234 = (char *)v232[128];
      unint64_t v242 = v232[129];
      if ((unint64_t)v234 >= v242)
      {
        unint64_t v236 = (char *)v232[127];
        uint64_t v244 = (v234 - v236) >> 3;
        if ((unint64_t)(v244 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v245 = v242 - (void)v236;
        unint64_t v246 = (uint64_t)(v242 - (void)v236) >> 2;
        if (v246 <= v244 + 1) {
          unint64_t v246 = v244 + 1;
        }
        if (v245 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v247 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v247 = v246;
        }
        if (v247)
        {
          uint64_t v248 = (char *)sub_5714((uint64_t)(v232 + 129), v247);
          uint64_t v234 = (char *)v232[128];
          unint64_t v236 = (char *)v232[127];
        }
        else
        {
          uint64_t v248 = 0;
        }
        unint64_t v249 = &v248[8 * v244];
        unint64_t v250 = &v248[8 * v247];
        *(void *)unint64_t v249 = v233;
        unint64_t v243 = v249 + 8;
        while (v234 != v236)
        {
          uint64_t v252 = *((void *)v234 - 1);
          v234 -= 8;
          *((void *)v249 - 1) = v252;
          v249 -= 8;
        }
        goto LABEL_355;
      }
    }
    else
    {
      if (v231 != 1) {
        goto LABEL_358;
      }
      uint64_t v232 = *(void **)a1[1];
      uint64_t v233 = *(_WORD *)(a1[2] + 42) & 0x7FFF;
      uint64_t v234 = (char *)v232[128];
      unint64_t v235 = v232[129];
      if ((unint64_t)v234 >= v235)
      {
        unint64_t v236 = (char *)v232[127];
        uint64_t v237 = (v234 - v236) >> 3;
        if ((unint64_t)(v237 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v238 = v235 - (void)v236;
        unint64_t v239 = (uint64_t)(v235 - (void)v236) >> 2;
        if (v239 <= v237 + 1) {
          unint64_t v239 = v237 + 1;
        }
        if (v238 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v240 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v240 = v239;
        }
        if (v240)
        {
          uint64_t v241 = (char *)sub_5714((uint64_t)(v232 + 129), v240);
          uint64_t v234 = (char *)v232[128];
          unint64_t v236 = (char *)v232[127];
        }
        else
        {
          uint64_t v241 = 0;
        }
        unint64_t v249 = &v241[8 * v237];
        unint64_t v250 = &v241[8 * v240];
        *(void *)unint64_t v249 = v233;
        unint64_t v243 = v249 + 8;
        while (v234 != v236)
        {
          uint64_t v251 = *((void *)v234 - 1);
          v234 -= 8;
          *((void *)v249 - 1) = v251;
          v249 -= 8;
        }
LABEL_355:
        v232[127] = v249;
        v232[128] = v243;
        v232[129] = v250;
        if (v236) {
          operator delete(v236);
        }
        goto LABEL_357;
      }
    }
    *(void *)uint64_t v234 = v233;
    unint64_t v243 = v234 + 8;
LABEL_357:
    v232[128] = v243;
LABEL_358:
    int v253 = 1 << *(_DWORD *)(v3 + 48);
    if (v253 == 2)
    {
      uint64_t v254 = *(void **)a1[1];
      uint64_t v255 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      uint64_t v256 = (char *)v254[131];
      unint64_t v264 = v254[132];
      if ((unint64_t)v256 >= v264)
      {
        unint64_t v258 = (char *)v254[130];
        uint64_t v266 = (v256 - v258) >> 3;
        if ((unint64_t)(v266 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v267 = v264 - (void)v258;
        unint64_t v268 = (uint64_t)(v264 - (void)v258) >> 2;
        if (v268 <= v266 + 1) {
          unint64_t v268 = v266 + 1;
        }
        if (v267 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v269 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v269 = v268;
        }
        if (v269)
        {
          uint64_t v270 = (char *)sub_5714((uint64_t)(v254 + 132), v269);
          uint64_t v256 = (char *)v254[131];
          unint64_t v258 = (char *)v254[130];
        }
        else
        {
          uint64_t v270 = 0;
        }
        unint64_t v271 = &v270[8 * v266];
        unint64_t v272 = &v270[8 * v269];
        *(void *)unint64_t v271 = v255;
        unint64_t v265 = v271 + 8;
        while (v256 != v258)
        {
          uint64_t v274 = *((void *)v256 - 1);
          v256 -= 8;
          *((void *)v271 - 1) = v274;
          v271 -= 8;
        }
        goto LABEL_387;
      }
    }
    else
    {
      if (v253 != 1) {
        goto LABEL_390;
      }
      uint64_t v254 = *(void **)a1[1];
      uint64_t v255 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      uint64_t v256 = (char *)v254[131];
      unint64_t v257 = v254[132];
      if ((unint64_t)v256 >= v257)
      {
        unint64_t v258 = (char *)v254[130];
        uint64_t v259 = (v256 - v258) >> 3;
        if ((unint64_t)(v259 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v260 = v257 - (void)v258;
        unint64_t v261 = (uint64_t)(v257 - (void)v258) >> 2;
        if (v261 <= v259 + 1) {
          unint64_t v261 = v259 + 1;
        }
        if (v260 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v262 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v262 = v261;
        }
        if (v262)
        {
          uint64_t v263 = (char *)sub_5714((uint64_t)(v254 + 132), v262);
          uint64_t v256 = (char *)v254[131];
          unint64_t v258 = (char *)v254[130];
        }
        else
        {
          uint64_t v263 = 0;
        }
        unint64_t v271 = &v263[8 * v259];
        unint64_t v272 = &v263[8 * v262];
        *(void *)unint64_t v271 = v255;
        unint64_t v265 = v271 + 8;
        while (v256 != v258)
        {
          uint64_t v273 = *((void *)v256 - 1);
          v256 -= 8;
          *((void *)v271 - 1) = v273;
          v271 -= 8;
        }
LABEL_387:
        v254[130] = v271;
        v254[131] = v265;
        v254[132] = v272;
        if (v258) {
          operator delete(v258);
        }
        goto LABEL_389;
      }
    }
    *(void *)uint64_t v256 = v255;
    unint64_t v265 = v256 + 8;
LABEL_389:
    v254[131] = v265;
LABEL_390:
    int v275 = 1 << *(_DWORD *)(v3 + 48);
    if (v275 == 2)
    {
      uint64_t v276 = *(void **)a1[1];
      uint64_t v277 = *(_WORD *)(a1[2] + 44) & 0x7FFF;
      uint64_t v278 = (char *)v276[134];
      unint64_t v286 = v276[135];
      if ((unint64_t)v278 >= v286)
      {
        unint64_t v280 = (char *)v276[133];
        uint64_t v288 = (v278 - v280) >> 3;
        if ((unint64_t)(v288 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v289 = v286 - (void)v280;
        unint64_t v290 = (uint64_t)(v286 - (void)v280) >> 2;
        if (v290 <= v288 + 1) {
          unint64_t v290 = v288 + 1;
        }
        if (v289 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v291 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v291 = v290;
        }
        if (v291)
        {
          uint64_t v292 = (char *)sub_5714((uint64_t)(v276 + 135), v291);
          uint64_t v278 = (char *)v276[134];
          unint64_t v280 = (char *)v276[133];
        }
        else
        {
          uint64_t v292 = 0;
        }
        unint64_t v293 = &v292[8 * v288];
        unint64_t v294 = &v292[8 * v291];
        *(void *)unint64_t v293 = v277;
        unint64_t v287 = v293 + 8;
        while (v278 != v280)
        {
          uint64_t v296 = *((void *)v278 - 1);
          v278 -= 8;
          *((void *)v293 - 1) = v296;
          v293 -= 8;
        }
        goto LABEL_419;
      }
    }
    else
    {
      if (v275 != 1) {
        goto LABEL_422;
      }
      uint64_t v276 = *(void **)a1[1];
      uint64_t v277 = *(_WORD *)(a1[2] + 44) & 0x7FFF;
      uint64_t v278 = (char *)v276[134];
      unint64_t v279 = v276[135];
      if ((unint64_t)v278 >= v279)
      {
        unint64_t v280 = (char *)v276[133];
        uint64_t v281 = (v278 - v280) >> 3;
        if ((unint64_t)(v281 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v282 = v279 - (void)v280;
        unint64_t v283 = (uint64_t)(v279 - (void)v280) >> 2;
        if (v283 <= v281 + 1) {
          unint64_t v283 = v281 + 1;
        }
        if (v282 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v284 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v284 = v283;
        }
        if (v284)
        {
          uint64_t v285 = (char *)sub_5714((uint64_t)(v276 + 135), v284);
          uint64_t v278 = (char *)v276[134];
          unint64_t v280 = (char *)v276[133];
        }
        else
        {
          uint64_t v285 = 0;
        }
        unint64_t v293 = &v285[8 * v281];
        unint64_t v294 = &v285[8 * v284];
        *(void *)unint64_t v293 = v277;
        unint64_t v287 = v293 + 8;
        while (v278 != v280)
        {
          uint64_t v295 = *((void *)v278 - 1);
          v278 -= 8;
          *((void *)v293 - 1) = v295;
          v293 -= 8;
        }
LABEL_419:
        v276[133] = v293;
        v276[134] = v287;
        v276[135] = v294;
        if (v280) {
          operator delete(v280);
        }
        goto LABEL_421;
      }
    }
    *(void *)uint64_t v278 = v277;
    unint64_t v287 = v278 + 8;
LABEL_421:
    v276[134] = v287;
LABEL_422:
    int v297 = 1 << *(_DWORD *)(v3 + 48);
    if (v297 == 2)
    {
      uint64_t v298 = *(void **)a1[1];
      uint64_t v299 = *(_WORD *)(a1[2] + 28) & 0x7FFF;
      uint64_t v300 = (char *)v298[137];
      unint64_t v308 = v298[138];
      if ((unint64_t)v300 >= v308)
      {
        uint64_t v302 = (char *)v298[136];
        uint64_t v310 = (v300 - v302) >> 3;
        if ((unint64_t)(v310 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v311 = v308 - (void)v302;
        unint64_t v312 = (uint64_t)(v308 - (void)v302) >> 2;
        if (v312 <= v310 + 1) {
          unint64_t v312 = v310 + 1;
        }
        if (v311 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v313 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v313 = v312;
        }
        if (v313)
        {
          unint64_t v314 = (char *)sub_5714((uint64_t)(v298 + 138), v313);
          uint64_t v300 = (char *)v298[137];
          uint64_t v302 = (char *)v298[136];
        }
        else
        {
          unint64_t v314 = 0;
        }
        unint64_t v315 = &v314[8 * v310];
        uint64_t v316 = &v314[8 * v313];
        *(void *)unint64_t v315 = v299;
        unint64_t v309 = v315 + 8;
        while (v300 != v302)
        {
          uint64_t v318 = *((void *)v300 - 1);
          v300 -= 8;
          *((void *)v315 - 1) = v318;
          v315 -= 8;
        }
        goto LABEL_451;
      }
    }
    else
    {
      if (v297 != 1) {
        goto LABEL_454;
      }
      uint64_t v298 = *(void **)a1[1];
      uint64_t v299 = *(_WORD *)(a1[2] + 28) & 0x7FFF;
      uint64_t v300 = (char *)v298[137];
      unint64_t v301 = v298[138];
      if ((unint64_t)v300 >= v301)
      {
        uint64_t v302 = (char *)v298[136];
        uint64_t v303 = (v300 - v302) >> 3;
        if ((unint64_t)(v303 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v304 = v301 - (void)v302;
        unint64_t v305 = (uint64_t)(v301 - (void)v302) >> 2;
        if (v305 <= v303 + 1) {
          unint64_t v305 = v303 + 1;
        }
        if (v304 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v306 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v306 = v305;
        }
        if (v306)
        {
          unint64_t v307 = (char *)sub_5714((uint64_t)(v298 + 138), v306);
          uint64_t v300 = (char *)v298[137];
          uint64_t v302 = (char *)v298[136];
        }
        else
        {
          unint64_t v307 = 0;
        }
        unint64_t v315 = &v307[8 * v303];
        uint64_t v316 = &v307[8 * v306];
        *(void *)unint64_t v315 = v299;
        unint64_t v309 = v315 + 8;
        while (v300 != v302)
        {
          uint64_t v317 = *((void *)v300 - 1);
          v300 -= 8;
          *((void *)v315 - 1) = v317;
          v315 -= 8;
        }
LABEL_451:
        v298[136] = v315;
        v298[137] = v309;
        v298[138] = v316;
        if (v302) {
          operator delete(v302);
        }
        goto LABEL_453;
      }
    }
    *(void *)uint64_t v300 = v299;
    unint64_t v309 = v300 + 8;
LABEL_453:
    v298[137] = v309;
LABEL_454:
    int v319 = 1 << *(_DWORD *)(v3 + 48);
    if (v319 == 2)
    {
      unint64_t v320 = *(void **)a1[1];
      uint64_t v321 = *(_WORD *)(a1[2] + 46) & 0x7FFF;
      unsigned int v322 = (char *)v320[140];
      unint64_t v330 = v320[141];
      if ((unint64_t)v322 >= v330)
      {
        uint64_t v324 = (char *)v320[139];
        uint64_t v332 = (v322 - v324) >> 3;
        if ((unint64_t)(v332 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v333 = v330 - (void)v324;
        unint64_t v334 = (uint64_t)(v330 - (void)v324) >> 2;
        if (v334 <= v332 + 1) {
          unint64_t v334 = v332 + 1;
        }
        if (v333 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v335 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v335 = v334;
        }
        if (v335)
        {
          unint64_t v336 = (char *)sub_5714((uint64_t)(v320 + 141), v335);
          unsigned int v322 = (char *)v320[140];
          uint64_t v324 = (char *)v320[139];
        }
        else
        {
          unint64_t v336 = 0;
        }
        unint64_t v337 = &v336[8 * v332];
        unint64_t v338 = &v336[8 * v335];
        *(void *)unint64_t v337 = v321;
        unint64_t v331 = v337 + 8;
        while (v322 != v324)
        {
          uint64_t v340 = *((void *)v322 - 1);
          v322 -= 8;
          *((void *)v337 - 1) = v340;
          v337 -= 8;
        }
        goto LABEL_483;
      }
    }
    else
    {
      if (v319 != 1) {
        goto LABEL_486;
      }
      unint64_t v320 = *(void **)a1[1];
      uint64_t v321 = *(_WORD *)(a1[2] + 46) & 0x7FFF;
      unsigned int v322 = (char *)v320[140];
      unint64_t v323 = v320[141];
      if ((unint64_t)v322 >= v323)
      {
        uint64_t v324 = (char *)v320[139];
        uint64_t v325 = (v322 - v324) >> 3;
        if ((unint64_t)(v325 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v326 = v323 - (void)v324;
        unint64_t v327 = (uint64_t)(v323 - (void)v324) >> 2;
        if (v327 <= v325 + 1) {
          unint64_t v327 = v325 + 1;
        }
        if (v326 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v328 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v328 = v327;
        }
        if (v328)
        {
          unint64_t v329 = (char *)sub_5714((uint64_t)(v320 + 141), v328);
          unsigned int v322 = (char *)v320[140];
          uint64_t v324 = (char *)v320[139];
        }
        else
        {
          unint64_t v329 = 0;
        }
        unint64_t v337 = &v329[8 * v325];
        unint64_t v338 = &v329[8 * v328];
        *(void *)unint64_t v337 = v321;
        unint64_t v331 = v337 + 8;
        while (v322 != v324)
        {
          uint64_t v339 = *((void *)v322 - 1);
          v322 -= 8;
          *((void *)v337 - 1) = v339;
          v337 -= 8;
        }
LABEL_483:
        v320[139] = v337;
        v320[140] = v331;
        v320[141] = v338;
        if (v324) {
          operator delete(v324);
        }
        goto LABEL_485;
      }
    }
    *(void *)unsigned int v322 = v321;
    unint64_t v331 = v322 + 8;
LABEL_485:
    v320[140] = v331;
LABEL_486:
    int v341 = 1 << *(_DWORD *)(v3 + 48);
    if (v341 == 2)
    {
      uint64_t v342 = *(void **)a1[1];
      uint64_t v343 = *(_WORD *)(a1[2] + 30) & 0x7FFF;
      unint64_t v344 = (char *)v342[143];
      unint64_t v352 = v342[144];
      if ((unint64_t)v344 >= v352)
      {
        unint64_t v346 = (char *)v342[142];
        uint64_t v354 = (v344 - v346) >> 3;
        if ((unint64_t)(v354 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v355 = v352 - (void)v346;
        unint64_t v356 = (uint64_t)(v352 - (void)v346) >> 2;
        if (v356 <= v354 + 1) {
          unint64_t v356 = v354 + 1;
        }
        if (v355 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v357 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v357 = v356;
        }
        if (v357)
        {
          unint64_t v358 = (char *)sub_5714((uint64_t)(v342 + 144), v357);
          unint64_t v344 = (char *)v342[143];
          unint64_t v346 = (char *)v342[142];
        }
        else
        {
          unint64_t v358 = 0;
        }
        unint64_t v359 = &v358[8 * v354];
        unint64_t v360 = &v358[8 * v357];
        *(void *)unint64_t v359 = v343;
        unint64_t v353 = v359 + 8;
        while (v344 != v346)
        {
          uint64_t v362 = *((void *)v344 - 1);
          v344 -= 8;
          *((void *)v359 - 1) = v362;
          v359 -= 8;
        }
        goto LABEL_515;
      }
    }
    else
    {
      if (v341 != 1) {
        goto LABEL_518;
      }
      uint64_t v342 = *(void **)a1[1];
      uint64_t v343 = *(_WORD *)(a1[2] + 30) & 0x7FFF;
      unint64_t v344 = (char *)v342[143];
      unint64_t v345 = v342[144];
      if ((unint64_t)v344 >= v345)
      {
        unint64_t v346 = (char *)v342[142];
        uint64_t v347 = (v344 - v346) >> 3;
        if ((unint64_t)(v347 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v348 = v345 - (void)v346;
        unint64_t v349 = (uint64_t)(v345 - (void)v346) >> 2;
        if (v349 <= v347 + 1) {
          unint64_t v349 = v347 + 1;
        }
        if (v348 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v350 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v350 = v349;
        }
        if (v350)
        {
          unint64_t v351 = (char *)sub_5714((uint64_t)(v342 + 144), v350);
          unint64_t v344 = (char *)v342[143];
          unint64_t v346 = (char *)v342[142];
        }
        else
        {
          unint64_t v351 = 0;
        }
        unint64_t v359 = &v351[8 * v347];
        unint64_t v360 = &v351[8 * v350];
        *(void *)unint64_t v359 = v343;
        unint64_t v353 = v359 + 8;
        while (v344 != v346)
        {
          uint64_t v361 = *((void *)v344 - 1);
          v344 -= 8;
          *((void *)v359 - 1) = v361;
          v359 -= 8;
        }
LABEL_515:
        v342[142] = v359;
        v342[143] = v353;
        v342[144] = v360;
        if (v346) {
          operator delete(v346);
        }
        goto LABEL_517;
      }
    }
    *(void *)unint64_t v344 = v343;
    unint64_t v353 = v344 + 8;
LABEL_517:
    v342[143] = v353;
LABEL_518:
    int v363 = 1 << *(_DWORD *)(v3 + 48);
    if (v363 == 2)
    {
      uint64_t v364 = *(void **)a1[1];
      uint64_t v365 = *(_WORD *)(a1[2] + 48) & 0x7FFF;
      unsigned int v366 = (char *)v364[146];
      unint64_t v374 = v364[147];
      if ((unint64_t)v366 >= v374)
      {
        unint64_t v368 = (char *)v364[145];
        uint64_t v376 = (v366 - v368) >> 3;
        if ((unint64_t)(v376 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v377 = v374 - (void)v368;
        unint64_t v378 = (uint64_t)(v374 - (void)v368) >> 2;
        if (v378 <= v376 + 1) {
          unint64_t v378 = v376 + 1;
        }
        if (v377 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v379 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v379 = v378;
        }
        if (v379)
        {
          unint64_t v380 = (char *)sub_5714((uint64_t)(v364 + 147), v379);
          unsigned int v366 = (char *)v364[146];
          unint64_t v368 = (char *)v364[145];
        }
        else
        {
          unint64_t v380 = 0;
        }
        unint64_t v381 = &v380[8 * v376];
        unint64_t v382 = &v380[8 * v379];
        *(void *)unint64_t v381 = v365;
        int v375 = v381 + 8;
        while (v366 != v368)
        {
          uint64_t v384 = *((void *)v366 - 1);
          v366 -= 8;
          *((void *)v381 - 1) = v384;
          v381 -= 8;
        }
        goto LABEL_547;
      }
    }
    else
    {
      if (v363 != 1) {
        goto LABEL_550;
      }
      uint64_t v364 = *(void **)a1[1];
      uint64_t v365 = *(_WORD *)(a1[2] + 48) & 0x7FFF;
      unsigned int v366 = (char *)v364[146];
      unint64_t v367 = v364[147];
      if ((unint64_t)v366 >= v367)
      {
        unint64_t v368 = (char *)v364[145];
        uint64_t v369 = (v366 - v368) >> 3;
        if ((unint64_t)(v369 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v370 = v367 - (void)v368;
        unint64_t v371 = (uint64_t)(v367 - (void)v368) >> 2;
        if (v371 <= v369 + 1) {
          unint64_t v371 = v369 + 1;
        }
        if (v370 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v372 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v372 = v371;
        }
        if (v372)
        {
          unint64_t v373 = (char *)sub_5714((uint64_t)(v364 + 147), v372);
          unsigned int v366 = (char *)v364[146];
          unint64_t v368 = (char *)v364[145];
        }
        else
        {
          unint64_t v373 = 0;
        }
        unint64_t v381 = &v373[8 * v369];
        unint64_t v382 = &v373[8 * v372];
        *(void *)unint64_t v381 = v365;
        int v375 = v381 + 8;
        while (v366 != v368)
        {
          uint64_t v383 = *((void *)v366 - 1);
          v366 -= 8;
          *((void *)v381 - 1) = v383;
          v381 -= 8;
        }
LABEL_547:
        v364[145] = v381;
        v364[146] = v375;
        v364[147] = v382;
        if (v368) {
          operator delete(v368);
        }
        goto LABEL_549;
      }
    }
    *(void *)unsigned int v366 = v365;
    int v375 = v366 + 8;
LABEL_549:
    v364[146] = v375;
LABEL_550:
    int v385 = 1 << *(_DWORD *)(v3 + 48);
    if (v385 == 2)
    {
      uint64_t v386 = *(void **)a1[1];
      uint64_t v387 = *(_WORD *)(a1[2] + 32) & 0x7FFF;
      unsigned int v388 = (char *)v386[149];
      unint64_t v396 = v386[150];
      if ((unint64_t)v388 >= v396)
      {
        unint64_t v390 = (char *)v386[148];
        uint64_t v398 = (v388 - v390) >> 3;
        if ((unint64_t)(v398 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v399 = v396 - (void)v390;
        unint64_t v400 = (uint64_t)(v396 - (void)v390) >> 2;
        if (v400 <= v398 + 1) {
          unint64_t v400 = v398 + 1;
        }
        if (v399 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v401 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v401 = v400;
        }
        if (v401)
        {
          unint64_t v402 = (char *)sub_5714((uint64_t)(v386 + 150), v401);
          unsigned int v388 = (char *)v386[149];
          unint64_t v390 = (char *)v386[148];
        }
        else
        {
          unint64_t v402 = 0;
        }
        unint64_t v403 = &v402[8 * v398];
        unint64_t v404 = &v402[8 * v401];
        *(void *)unint64_t v403 = v387;
        unsigned int v397 = v403 + 8;
        while (v388 != v390)
        {
          uint64_t v406 = *((void *)v388 - 1);
          v388 -= 8;
          *((void *)v403 - 1) = v406;
          v403 -= 8;
        }
        goto LABEL_579;
      }
    }
    else
    {
      if (v385 != 1) {
        goto LABEL_582;
      }
      uint64_t v386 = *(void **)a1[1];
      uint64_t v387 = *(_WORD *)(a1[2] + 32) & 0x7FFF;
      unsigned int v388 = (char *)v386[149];
      unint64_t v389 = v386[150];
      if ((unint64_t)v388 >= v389)
      {
        unint64_t v390 = (char *)v386[148];
        uint64_t v391 = (v388 - v390) >> 3;
        if ((unint64_t)(v391 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v392 = v389 - (void)v390;
        unint64_t v393 = (uint64_t)(v389 - (void)v390) >> 2;
        if (v393 <= v391 + 1) {
          unint64_t v393 = v391 + 1;
        }
        if (v392 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v394 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v394 = v393;
        }
        if (v394)
        {
          unint64_t v395 = (char *)sub_5714((uint64_t)(v386 + 150), v394);
          unsigned int v388 = (char *)v386[149];
          unint64_t v390 = (char *)v386[148];
        }
        else
        {
          unint64_t v395 = 0;
        }
        unint64_t v403 = &v395[8 * v391];
        unint64_t v404 = &v395[8 * v394];
        *(void *)unint64_t v403 = v387;
        unsigned int v397 = v403 + 8;
        while (v388 != v390)
        {
          uint64_t v405 = *((void *)v388 - 1);
          v388 -= 8;
          *((void *)v403 - 1) = v405;
          v403 -= 8;
        }
LABEL_579:
        v386[148] = v403;
        v386[149] = v397;
        v386[150] = v404;
        if (v390) {
          operator delete(v390);
        }
        goto LABEL_581;
      }
    }
    *(void *)unsigned int v388 = v387;
    unsigned int v397 = v388 + 8;
LABEL_581:
    v386[149] = v397;
LABEL_582:
    int v407 = 1 << *(_DWORD *)(v3 + 48);
    if (v407 == 2)
    {
      uint64_t v408 = *(void **)a1[1];
      uint64_t v409 = *(_WORD *)(a1[2] + 50) & 0x7FFF;
      int v410 = (char *)v408[152];
      unint64_t v418 = v408[153];
      if ((unint64_t)v410 >= v418)
      {
        unint64_t v412 = (char *)v408[151];
        uint64_t v420 = (v410 - v412) >> 3;
        if ((unint64_t)(v420 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v421 = v418 - (void)v412;
        unint64_t v422 = (uint64_t)(v418 - (void)v412) >> 2;
        if (v422 <= v420 + 1) {
          unint64_t v422 = v420 + 1;
        }
        if (v421 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v423 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v423 = v422;
        }
        if (v423)
        {
          unint64_t v424 = (char *)sub_5714((uint64_t)(v408 + 153), v423);
          int v410 = (char *)v408[152];
          unint64_t v412 = (char *)v408[151];
        }
        else
        {
          unint64_t v424 = 0;
        }
        unint64_t v425 = &v424[8 * v420];
        unint64_t v426 = &v424[8 * v423];
        *(void *)unint64_t v425 = v409;
        unint64_t v419 = v425 + 8;
        while (v410 != v412)
        {
          uint64_t v428 = *((void *)v410 - 1);
          v410 -= 8;
          *((void *)v425 - 1) = v428;
          v425 -= 8;
        }
        goto LABEL_611;
      }
    }
    else
    {
      if (v407 != 1) {
        goto LABEL_614;
      }
      uint64_t v408 = *(void **)a1[1];
      uint64_t v409 = *(_WORD *)(a1[2] + 50) & 0x7FFF;
      int v410 = (char *)v408[152];
      unint64_t v411 = v408[153];
      if ((unint64_t)v410 >= v411)
      {
        unint64_t v412 = (char *)v408[151];
        uint64_t v413 = (v410 - v412) >> 3;
        if ((unint64_t)(v413 + 1) >> 61) {
          goto LABEL_648;
        }
        unint64_t v414 = v411 - (void)v412;
        unint64_t v415 = (uint64_t)(v411 - (void)v412) >> 2;
        if (v415 <= v413 + 1) {
          unint64_t v415 = v413 + 1;
        }
        if (v414 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v416 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v416 = v415;
        }
        if (v416)
        {
          unint64_t v417 = (char *)sub_5714((uint64_t)(v408 + 153), v416);
          int v410 = (char *)v408[152];
          unint64_t v412 = (char *)v408[151];
        }
        else
        {
          unint64_t v417 = 0;
        }
        unint64_t v425 = &v417[8 * v413];
        unint64_t v426 = &v417[8 * v416];
        *(void *)unint64_t v425 = v409;
        unint64_t v419 = v425 + 8;
        while (v410 != v412)
        {
          uint64_t v427 = *((void *)v410 - 1);
          v410 -= 8;
          *((void *)v425 - 1) = v427;
          v425 -= 8;
        }
LABEL_611:
        v408[151] = v425;
        v408[152] = v419;
        v408[153] = v426;
        if (v412) {
          operator delete(v412);
        }
        goto LABEL_613;
      }
    }
    *(void *)int v410 = v409;
    unint64_t v419 = v410 + 8;
LABEL_613:
    v408[152] = v419;
LABEL_614:
    int v429 = 1 << *(_DWORD *)(v3 + 48);
    if (v429 == 2)
    {
      uint64_t v441 = a1[2];
      int v431 = *(void **)a1[1];
      uint64_t v432 = *(_WORD *)(v441 + 34) & 0x7FFF;
      uint64_t v433 = (char *)v431[155];
      unint64_t v442 = v431[156];
      if ((unint64_t)v433 >= v442)
      {
        unint64_t v435 = (char *)v431[154];
        uint64_t v444 = (v433 - v435) >> 3;
        if (!((unint64_t)(v444 + 1) >> 61))
        {
          unint64_t v445 = v442 - (void)v435;
          unint64_t v446 = (uint64_t)(v442 - (void)v435) >> 2;
          if (v446 <= v444 + 1) {
            unint64_t v446 = v444 + 1;
          }
          if (v445 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v447 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v447 = v446;
          }
          if (v447)
          {
            unint64_t v448 = (char *)sub_5714((uint64_t)(v431 + 156), v447);
            uint64_t v433 = (char *)v431[155];
            unint64_t v435 = (char *)v431[154];
          }
          else
          {
            unint64_t v448 = 0;
          }
          unint64_t v449 = &v448[8 * v444];
          unsigned int v450 = &v448[8 * v447];
          *(void *)unint64_t v449 = v432;
          unsigned int v443 = v449 + 8;
          while (v433 != v435)
          {
            uint64_t v452 = *((void *)v433 - 1);
            v433 -= 8;
            *((void *)v449 - 1) = v452;
            v449 -= 8;
          }
          goto LABEL_643;
        }
LABEL_648:
        sub_566C();
      }
    }
    else
    {
      if (v429 != 1)
      {
LABEL_646:
        *a2 = 1;
        return;
      }
      uint64_t v430 = a1[2];
      int v431 = *(void **)a1[1];
      uint64_t v432 = *(_WORD *)(v430 + 34) & 0x7FFF;
      uint64_t v433 = (char *)v431[155];
      unint64_t v434 = v431[156];
      if ((unint64_t)v433 >= v434)
      {
        unint64_t v435 = (char *)v431[154];
        uint64_t v436 = (v433 - v435) >> 3;
        if (!((unint64_t)(v436 + 1) >> 61))
        {
          unint64_t v437 = v434 - (void)v435;
          unint64_t v438 = (uint64_t)(v434 - (void)v435) >> 2;
          if (v438 <= v436 + 1) {
            unint64_t v438 = v436 + 1;
          }
          if (v437 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v439 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v439 = v438;
          }
          if (v439)
          {
            unint64_t v440 = (char *)sub_5714((uint64_t)(v431 + 156), v439);
            uint64_t v433 = (char *)v431[155];
            unint64_t v435 = (char *)v431[154];
          }
          else
          {
            unint64_t v440 = 0;
          }
          unint64_t v449 = &v440[8 * v436];
          unsigned int v450 = &v440[8 * v439];
          *(void *)unint64_t v449 = v432;
          unsigned int v443 = v449 + 8;
          while (v433 != v435)
          {
            uint64_t v451 = *((void *)v433 - 1);
            v433 -= 8;
            *((void *)v449 - 1) = v451;
            v449 -= 8;
          }
LABEL_643:
          v431[154] = v449;
          v431[155] = v443;
          v431[156] = v450;
          if (v435) {
            operator delete(v435);
          }
          goto LABEL_645;
        }
        goto LABEL_648;
      }
    }
    *(void *)uint64_t v433 = v432;
    unsigned int v443 = v433 + 8;
LABEL_645:
    v431[155] = v443;
    goto LABEL_646;
  }
  int v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    int32x2_t v18 = (void *)a1[1];
    uint64_t v17 = (_WORD *)a1[2];
    uint64_t v19 = (void *)*v18;
    *(void *)(v19[98] - 8) += v17[28] & 0x7FFF;
    *(void *)(v19[101] - 8) += v17[26] & 0x7FFF;
    *(void *)(v19[104] - 8) += v17[29] & 0x7FFF;
    *(void *)(v19[107] - 8) += v17[27] & 0x7FFF;
    *(void *)(v19[110] - 8) += v17[18] & 0x7FFF;
    *(void *)(v19[113] - 8) += v17[10] & 0x7FFF;
    *(void *)(v19[116] - 8) += v17[19] & 0x7FFF;
    *(void *)(v19[119] - 8) += v17[11] & 0x7FFF;
    *(void *)(v19[122] - 8) += v17[20] & 0x7FFF;
    *(void *)(v19[125] - 8) += v17[12] & 0x7FFF;
    uint64_t v20 = (_WORD *)a1[2];
    uint8x8_t v21 = (void *)*v18;
    *(void *)(v21[128] - 8) += v20[21] & 0x7FFF;
    *(void *)(v21[131] - 8) += v20[13] & 0x7FFF;
    *(void *)(v21[134] - 8) += v20[22] & 0x7FFF;
    *(void *)(v21[137] - 8) += v20[14] & 0x7FFF;
    *(void *)(v21[140] - 8) += v20[23] & 0x7FFF;
    *(void *)(v21[143] - 8) += v20[15] & 0x7FFF;
    *(void *)(v21[146] - 8) += v20[24] & 0x7FFF;
    *(void *)(v21[149] - 8) += v20[16] & 0x7FFF;
    *(void *)(v21[152] - 8) += v20[25] & 0x7FFF;
    *(void *)(v21[155] - 8) += v20[17] & 0x7FFF;
  }
}

void sub_C8834(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    int v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      uint64_t v25 = a1[1];
      uint64_t v7 = *(void **)v25;
      uint64_t v8 = *(unsigned __int16 *)(a1[2] + 60);
      unint64_t v9 = *(char **)(*(void *)v25 + 1936);
      unint64_t v26 = *(void *)(*(void *)v25 + 1944);
      if ((unint64_t)v9 >= v26)
      {
        uint64_t v11 = (char *)v7[241];
        uint64_t v28 = (v9 - v11) >> 3;
        if ((unint64_t)(v28 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v29 = v26 - (void)v11;
        unint64_t v30 = (uint64_t)(v26 - (void)v11) >> 2;
        if (v30 <= v28 + 1) {
          unint64_t v30 = v28 + 1;
        }
        if (v29 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v31 = v30;
        }
        if (v31)
        {
          uint64_t v32 = (char *)sub_5714((uint64_t)(v7 + 243), v31);
          unint64_t v9 = (char *)v7[242];
          uint64_t v11 = (char *)v7[241];
        }
        else
        {
          uint64_t v32 = 0;
        }
        int v33 = &v32[8 * v28];
        uint64_t v34 = &v32[8 * v31];
        *(void *)int v33 = v8;
        unint64_t v27 = v33 + 8;
        while (v9 != v11)
        {
          uint64_t v36 = *((void *)v9 - 1);
          v9 -= 8;
          *((void *)v33 - 1) = v36;
          v33 -= 8;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1) {
        goto LABEL_38;
      }
      uint64_t v6 = a1[1];
      uint64_t v7 = *(void **)v6;
      uint64_t v8 = *(unsigned __int16 *)(a1[2] + 60);
      unint64_t v9 = *(char **)(*(void *)v6 + 1936);
      unint64_t v10 = *(void *)(*(void *)v6 + 1944);
      if ((unint64_t)v9 >= v10)
      {
        uint64_t v11 = (char *)v7[241];
        uint64_t v12 = (v9 - v11) >> 3;
        if ((unint64_t)(v12 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v13 = v10 - (void)v11;
        unint64_t v14 = (uint64_t)(v10 - (void)v11) >> 2;
        if (v14 <= v12 + 1) {
          unint64_t v14 = v12 + 1;
        }
        if (v13 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        if (v15)
        {
          int v16 = (char *)sub_5714((uint64_t)(v7 + 243), v15);
          unint64_t v9 = (char *)v7[242];
          uint64_t v11 = (char *)v7[241];
        }
        else
        {
          int v16 = 0;
        }
        int v33 = &v16[8 * v12];
        uint64_t v34 = &v16[8 * v15];
        *(void *)int v33 = v8;
        unint64_t v27 = v33 + 8;
        while (v9 != v11)
        {
          uint64_t v35 = *((void *)v9 - 1);
          v9 -= 8;
          *((void *)v33 - 1) = v35;
          v33 -= 8;
        }
LABEL_35:
        v7[241] = v33;
        v7[242] = v27;
        v7[243] = v34;
        if (v11) {
          operator delete(v11);
        }
        goto LABEL_37;
      }
    }
    *(void *)unint64_t v9 = v8;
    unint64_t v27 = v9 + 8;
LABEL_37:
    v7[242] = v27;
LABEL_38:
    int v37 = 1 << *(_DWORD *)(v3 + 48);
    if (v37 == 2)
    {
      uint64_t v49 = a1[1];
      uint64_t v39 = *(void **)v49;
      uint64_t v40 = *(unsigned __int16 *)(a1[2] + 22);
      unint64_t v41 = *(char **)(*(void *)v49 + 1960);
      unint64_t v50 = *(void *)(*(void *)v49 + 1968);
      if ((unint64_t)v41 >= v50)
      {
        unint64_t v43 = (char *)v39[244];
        uint64_t v52 = (v41 - v43) >> 3;
        if ((unint64_t)(v52 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v53 = v50 - (void)v43;
        unint64_t v54 = (uint64_t)(v50 - (void)v43) >> 2;
        if (v54 <= v52 + 1) {
          unint64_t v54 = v52 + 1;
        }
        if (v53 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v55 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v55 = v54;
        }
        if (v55)
        {
          uint64_t v56 = (char *)sub_5714((uint64_t)(v39 + 246), v55);
          unint64_t v41 = (char *)v39[245];
          unint64_t v43 = (char *)v39[244];
        }
        else
        {
          uint64_t v56 = 0;
        }
        uint64_t v57 = &v56[8 * v52];
        unint64_t v58 = &v56[8 * v55];
        *(void *)uint64_t v57 = v40;
        unint64_t v51 = v57 + 8;
        while (v41 != v43)
        {
          uint64_t v60 = *((void *)v41 - 1);
          v41 -= 8;
          *((void *)v57 - 1) = v60;
          v57 -= 8;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v37 != 1) {
        goto LABEL_70;
      }
      uint64_t v38 = a1[1];
      uint64_t v39 = *(void **)v38;
      uint64_t v40 = *(unsigned __int16 *)(a1[2] + 22);
      unint64_t v41 = *(char **)(*(void *)v38 + 1960);
      unint64_t v42 = *(void *)(*(void *)v38 + 1968);
      if ((unint64_t)v41 >= v42)
      {
        unint64_t v43 = (char *)v39[244];
        uint64_t v44 = (v41 - v43) >> 3;
        if ((unint64_t)(v44 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v45 = v42 - (void)v43;
        unint64_t v46 = (uint64_t)(v42 - (void)v43) >> 2;
        if (v46 <= v44 + 1) {
          unint64_t v46 = v44 + 1;
        }
        if (v45 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v47 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v47 = v46;
        }
        if (v47)
        {
          unint64_t v48 = (char *)sub_5714((uint64_t)(v39 + 246), v47);
          unint64_t v41 = (char *)v39[245];
          unint64_t v43 = (char *)v39[244];
        }
        else
        {
          unint64_t v48 = 0;
        }
        uint64_t v57 = &v48[8 * v44];
        unint64_t v58 = &v48[8 * v47];
        *(void *)uint64_t v57 = v40;
        unint64_t v51 = v57 + 8;
        while (v41 != v43)
        {
          uint64_t v59 = *((void *)v41 - 1);
          v41 -= 8;
          *((void *)v57 - 1) = v59;
          v57 -= 8;
        }
LABEL_67:
        v39[244] = v57;
        v39[245] = v51;
        v39[246] = v58;
        if (v43) {
          operator delete(v43);
        }
        goto LABEL_69;
      }
    }
    *(void *)unint64_t v41 = v40;
    unint64_t v51 = v41 + 8;
LABEL_69:
    v39[245] = v51;
LABEL_70:
    int v61 = 1 << *(_DWORD *)(v3 + 48);
    if (v61 == 2)
    {
      unint64_t v62 = *(void **)a1[1];
      uint64_t v63 = *(_DWORD *)(a1[2] + 88) & 0x7FFFLL;
      unint64_t v64 = (uint64_t *)v62[248];
      unint64_t v72 = v62[249];
      if ((unint64_t)v64 >= v72)
      {
        unint64_t v66 = (uint64_t *)v62[247];
        uint64_t v74 = v64 - v66;
        if ((unint64_t)(v74 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v75 = v72 - (void)v66;
        unint64_t v76 = (uint64_t)(v72 - (void)v66) >> 2;
        if (v76 <= v74 + 1) {
          unint64_t v76 = v74 + 1;
        }
        if (v75 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v77 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v77 = v76;
        }
        if (v77)
        {
          uint64_t v78 = (char *)sub_5714((uint64_t)(v62 + 249), v77);
          unint64_t v64 = (uint64_t *)v62[248];
          unint64_t v66 = (uint64_t *)v62[247];
        }
        else
        {
          uint64_t v78 = 0;
        }
        uint64_t v79 = (uint64_t *)&v78[8 * v74];
        uint64_t v80 = &v78[8 * v77];
        uint64_t *v79 = v63;
        unint64_t v73 = v79 + 1;
        while (v64 != v66)
        {
          uint64_t v82 = *--v64;
          *--uint64_t v79 = v82;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v61 != 1) {
        goto LABEL_102;
      }
      unint64_t v62 = *(void **)a1[1];
      uint64_t v63 = *(_DWORD *)(a1[2] + 88) & 0x7FFFLL;
      unint64_t v64 = (uint64_t *)v62[248];
      unint64_t v65 = v62[249];
      if ((unint64_t)v64 >= v65)
      {
        unint64_t v66 = (uint64_t *)v62[247];
        uint64_t v67 = v64 - v66;
        if ((unint64_t)(v67 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v68 = v65 - (void)v66;
        unint64_t v69 = (uint64_t)(v65 - (void)v66) >> 2;
        if (v69 <= v67 + 1) {
          unint64_t v69 = v67 + 1;
        }
        if (v68 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v70 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v70 = v69;
        }
        if (v70)
        {
          unint64_t v71 = (char *)sub_5714((uint64_t)(v62 + 249), v70);
          unint64_t v64 = (uint64_t *)v62[248];
          unint64_t v66 = (uint64_t *)v62[247];
        }
        else
        {
          unint64_t v71 = 0;
        }
        uint64_t v79 = (uint64_t *)&v71[8 * v67];
        uint64_t v80 = &v71[8 * v70];
        uint64_t *v79 = v63;
        unint64_t v73 = v79 + 1;
        while (v64 != v66)
        {
          uint64_t v81 = *--v64;
          *--uint64_t v79 = v81;
        }
LABEL_99:
        v62[247] = v79;
        v62[248] = v73;
        v62[249] = v80;
        if (v66) {
          operator delete(v66);
        }
        goto LABEL_101;
      }
    }
    *unint64_t v64 = v63;
    unint64_t v73 = v64 + 1;
LABEL_101:
    v62[248] = v73;
LABEL_102:
    int v83 = 1 << *(_DWORD *)(v3 + 48);
    if (v83 == 2)
    {
      unint64_t v84 = *(void **)a1[1];
      uint64_t v85 = *(void *)(a1[2] + 56) >> 17;
      unint64_t v86 = (char *)v84[251];
      unint64_t v94 = v84[252];
      if ((unint64_t)v86 >= v94)
      {
        unint64_t v88 = (char *)v84[250];
        uint64_t v96 = (v86 - v88) >> 3;
        if ((unint64_t)(v96 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v97 = v94 - (void)v88;
        unint64_t v98 = (uint64_t)(v94 - (void)v88) >> 2;
        if (v98 <= v96 + 1) {
          unint64_t v98 = v96 + 1;
        }
        if (v97 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v99 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v99 = v98;
        }
        if (v99)
        {
          uint64_t v100 = (char *)sub_5714((uint64_t)(v84 + 252), v99);
          unint64_t v86 = (char *)v84[251];
          unint64_t v88 = (char *)v84[250];
        }
        else
        {
          uint64_t v100 = 0;
        }
        uint64_t v101 = &v100[8 * v96];
        uint64_t v102 = &v100[8 * v99];
        *(void *)uint64_t v101 = v85;
        unint64_t v95 = v101 + 8;
        while (v86 != v88)
        {
          uint64_t v104 = *((void *)v86 - 1);
          v86 -= 8;
          *((void *)v101 - 1) = v104;
          v101 -= 8;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v83 != 1) {
        goto LABEL_134;
      }
      unint64_t v84 = *(void **)a1[1];
      uint64_t v85 = *(void *)(a1[2] + 56) >> 17;
      unint64_t v86 = (char *)v84[251];
      unint64_t v87 = v84[252];
      if ((unint64_t)v86 >= v87)
      {
        unint64_t v88 = (char *)v84[250];
        uint64_t v89 = (v86 - v88) >> 3;
        if ((unint64_t)(v89 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v90 = v87 - (void)v88;
        unint64_t v91 = (uint64_t)(v87 - (void)v88) >> 2;
        if (v91 <= v89 + 1) {
          unint64_t v91 = v89 + 1;
        }
        if (v90 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v92 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v92 = v91;
        }
        if (v92)
        {
          unint64_t v93 = (char *)sub_5714((uint64_t)(v84 + 252), v92);
          unint64_t v86 = (char *)v84[251];
          unint64_t v88 = (char *)v84[250];
        }
        else
        {
          unint64_t v93 = 0;
        }
        uint64_t v101 = &v93[8 * v89];
        uint64_t v102 = &v93[8 * v92];
        *(void *)uint64_t v101 = v85;
        unint64_t v95 = v101 + 8;
        while (v86 != v88)
        {
          uint64_t v103 = *((void *)v86 - 1);
          v86 -= 8;
          *((void *)v101 - 1) = v103;
          v101 -= 8;
        }
LABEL_131:
        v84[250] = v101;
        v84[251] = v95;
        v84[252] = v102;
        if (v88) {
          operator delete(v88);
        }
        goto LABEL_133;
      }
    }
    *(void *)unint64_t v86 = v85;
    unint64_t v95 = v86 + 8;
LABEL_133:
    v84[251] = v95;
LABEL_134:
    int v105 = 1 << *(_DWORD *)(v3 + 48);
    if (v105 == 2)
    {
      uint64_t v117 = a1[1];
      unint64_t v107 = *(void **)v117;
      uint64_t v108 = *(unsigned __int16 *)(a1[2] + 80);
      unint64_t v109 = *(char **)(*(void *)v117 + 2032);
      unint64_t v118 = *(void *)(*(void *)v117 + 2040);
      if ((unint64_t)v109 >= v118)
      {
        unint64_t v111 = (char *)v107[253];
        uint64_t v120 = (v109 - v111) >> 3;
        if ((unint64_t)(v120 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v121 = v118 - (void)v111;
        unint64_t v122 = (uint64_t)(v118 - (void)v111) >> 2;
        if (v122 <= v120 + 1) {
          unint64_t v122 = v120 + 1;
        }
        if (v121 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v123 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v123 = v122;
        }
        if (v123)
        {
          uint64_t v124 = (char *)sub_5714((uint64_t)(v107 + 255), v123);
          unint64_t v109 = (char *)v107[254];
          unint64_t v111 = (char *)v107[253];
        }
        else
        {
          uint64_t v124 = 0;
        }
        unint64_t v125 = &v124[8 * v120];
        unint64_t v126 = &v124[8 * v123];
        *(void *)unint64_t v125 = v108;
        uint64_t v119 = v125 + 8;
        while (v109 != v111)
        {
          uint64_t v128 = *((void *)v109 - 1);
          v109 -= 8;
          *((void *)v125 - 1) = v128;
          v125 -= 8;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v105 != 1) {
        goto LABEL_166;
      }
      uint64_t v106 = a1[1];
      unint64_t v107 = *(void **)v106;
      uint64_t v108 = *(unsigned __int16 *)(a1[2] + 80);
      unint64_t v109 = *(char **)(*(void *)v106 + 2032);
      unint64_t v110 = *(void *)(*(void *)v106 + 2040);
      if ((unint64_t)v109 >= v110)
      {
        unint64_t v111 = (char *)v107[253];
        uint64_t v112 = (v109 - v111) >> 3;
        if ((unint64_t)(v112 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v113 = v110 - (void)v111;
        unint64_t v114 = (uint64_t)(v110 - (void)v111) >> 2;
        if (v114 <= v112 + 1) {
          unint64_t v114 = v112 + 1;
        }
        if (v113 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v115 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v115 = v114;
        }
        if (v115)
        {
          uint64_t v116 = (char *)sub_5714((uint64_t)(v107 + 255), v115);
          unint64_t v109 = (char *)v107[254];
          unint64_t v111 = (char *)v107[253];
        }
        else
        {
          uint64_t v116 = 0;
        }
        unint64_t v125 = &v116[8 * v112];
        unint64_t v126 = &v116[8 * v115];
        *(void *)unint64_t v125 = v108;
        uint64_t v119 = v125 + 8;
        while (v109 != v111)
        {
          uint64_t v127 = *((void *)v109 - 1);
          v109 -= 8;
          *((void *)v125 - 1) = v127;
          v125 -= 8;
        }
LABEL_163:
        v107[253] = v125;
        v107[254] = v119;
        v107[255] = v126;
        if (v111) {
          operator delete(v111);
        }
        goto LABEL_165;
      }
    }
    *(void *)unint64_t v109 = v108;
    uint64_t v119 = v109 + 8;
LABEL_165:
    v107[254] = v119;
LABEL_166:
    int v129 = 1 << *(_DWORD *)(v3 + 48);
    if (v129 == 2)
    {
      uint64_t v141 = a1[1];
      uint64_t v131 = *(void **)v141;
      uint64_t v132 = *(unsigned __int16 *)(a1[2] + 40);
      unint64_t v133 = *(char **)(*(void *)v141 + 2056);
      unint64_t v142 = *(void *)(*(void *)v141 + 2064);
      if ((unint64_t)v133 >= v142)
      {
        unint64_t v135 = (char *)v131[256];
        uint64_t v144 = (v133 - v135) >> 3;
        if ((unint64_t)(v144 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v145 = v142 - (void)v135;
        unint64_t v146 = (uint64_t)(v142 - (void)v135) >> 2;
        if (v146 <= v144 + 1) {
          unint64_t v146 = v144 + 1;
        }
        if (v145 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v147 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v147 = v146;
        }
        if (v147)
        {
          unint64_t v148 = (char *)sub_5714((uint64_t)(v131 + 258), v147);
          unint64_t v133 = (char *)v131[257];
          unint64_t v135 = (char *)v131[256];
        }
        else
        {
          unint64_t v148 = 0;
        }
        uint64_t v149 = &v148[8 * v144];
        unint64_t v150 = &v148[8 * v147];
        *(void *)uint64_t v149 = v132;
        int v143 = v149 + 8;
        while (v133 != v135)
        {
          uint64_t v152 = *((void *)v133 - 1);
          v133 -= 8;
          *((void *)v149 - 1) = v152;
          v149 -= 8;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v129 != 1) {
        goto LABEL_198;
      }
      uint64_t v130 = a1[1];
      uint64_t v131 = *(void **)v130;
      uint64_t v132 = *(unsigned __int16 *)(a1[2] + 40);
      unint64_t v133 = *(char **)(*(void *)v130 + 2056);
      unint64_t v134 = *(void *)(*(void *)v130 + 2064);
      if ((unint64_t)v133 >= v134)
      {
        unint64_t v135 = (char *)v131[256];
        uint64_t v136 = (v133 - v135) >> 3;
        if ((unint64_t)(v136 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v137 = v134 - (void)v135;
        unint64_t v138 = (uint64_t)(v134 - (void)v135) >> 2;
        if (v138 <= v136 + 1) {
          unint64_t v138 = v136 + 1;
        }
        if (v137 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v139 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v139 = v138;
        }
        if (v139)
        {
          unint64_t v140 = (char *)sub_5714((uint64_t)(v131 + 258), v139);
          unint64_t v133 = (char *)v131[257];
          unint64_t v135 = (char *)v131[256];
        }
        else
        {
          unint64_t v140 = 0;
        }
        uint64_t v149 = &v140[8 * v136];
        unint64_t v150 = &v140[8 * v139];
        *(void *)uint64_t v149 = v132;
        int v143 = v149 + 8;
        while (v133 != v135)
        {
          uint64_t v151 = *((void *)v133 - 1);
          v133 -= 8;
          *((void *)v149 - 1) = v151;
          v149 -= 8;
        }
LABEL_195:
        v131[256] = v149;
        v131[257] = v143;
        v131[258] = v150;
        if (v135) {
          operator delete(v135);
        }
        goto LABEL_197;
      }
    }
    *(void *)unint64_t v133 = v132;
    int v143 = v133 + 8;
LABEL_197:
    v131[257] = v143;
LABEL_198:
    int v153 = 1 << *(_DWORD *)(v3 + 48);
    if (v153 == 2)
    {
      unint64_t v154 = *(void **)a1[1];
      uint64_t v155 = *(_DWORD *)(a1[2] + 48) & 0x1FFFFLL;
      uint64_t v156 = (uint64_t *)v154[260];
      unint64_t v164 = v154[261];
      if ((unint64_t)v156 >= v164)
      {
        unint64_t v158 = (uint64_t *)v154[259];
        uint64_t v166 = v156 - v158;
        if ((unint64_t)(v166 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v167 = v164 - (void)v158;
        unint64_t v168 = (uint64_t)(v164 - (void)v158) >> 2;
        if (v168 <= v166 + 1) {
          unint64_t v168 = v166 + 1;
        }
        if (v167 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v169 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v169 = v168;
        }
        if (v169)
        {
          unint64_t v170 = (char *)sub_5714((uint64_t)(v154 + 261), v169);
          uint64_t v156 = (uint64_t *)v154[260];
          unint64_t v158 = (uint64_t *)v154[259];
        }
        else
        {
          unint64_t v170 = 0;
        }
        uint64_t v171 = (uint64_t *)&v170[8 * v166];
        unint64_t v172 = &v170[8 * v169];
        uint64_t *v171 = v155;
        int v165 = v171 + 1;
        while (v156 != v158)
        {
          uint64_t v174 = *--v156;
          *--uint64_t v171 = v174;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v153 != 1) {
        goto LABEL_230;
      }
      unint64_t v154 = *(void **)a1[1];
      uint64_t v155 = *(_DWORD *)(a1[2] + 48) & 0x1FFFFLL;
      uint64_t v156 = (uint64_t *)v154[260];
      unint64_t v157 = v154[261];
      if ((unint64_t)v156 >= v157)
      {
        unint64_t v158 = (uint64_t *)v154[259];
        uint64_t v159 = v156 - v158;
        if ((unint64_t)(v159 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v160 = v157 - (void)v158;
        unint64_t v161 = (uint64_t)(v157 - (void)v158) >> 2;
        if (v161 <= v159 + 1) {
          unint64_t v161 = v159 + 1;
        }
        if (v160 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v162 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v162 = v161;
        }
        if (v162)
        {
          uint64_t v163 = (char *)sub_5714((uint64_t)(v154 + 261), v162);
          uint64_t v156 = (uint64_t *)v154[260];
          unint64_t v158 = (uint64_t *)v154[259];
        }
        else
        {
          uint64_t v163 = 0;
        }
        uint64_t v171 = (uint64_t *)&v163[8 * v159];
        unint64_t v172 = &v163[8 * v162];
        uint64_t *v171 = v155;
        int v165 = v171 + 1;
        while (v156 != v158)
        {
          uint64_t v173 = *--v156;
          *--uint64_t v171 = v173;
        }
LABEL_227:
        v154[259] = v171;
        v154[260] = v165;
        v154[261] = v172;
        if (v158) {
          operator delete(v158);
        }
        goto LABEL_229;
      }
    }
    *uint64_t v156 = v155;
    int v165 = v156 + 1;
LABEL_229:
    v154[260] = v165;
LABEL_230:
    int v175 = 1 << *(_DWORD *)(v3 + 48);
    if (v175 == 2)
    {
      unint64_t v176 = *(void **)a1[1];
      uint64_t v177 = *(void *)(a1[2] + 56) & 0x1FFFFLL;
      uint64_t v178 = (uint64_t *)v176[263];
      unint64_t v186 = v176[264];
      if ((unint64_t)v178 >= v186)
      {
        unint64_t v180 = (uint64_t *)v176[262];
        uint64_t v188 = v178 - v180;
        if ((unint64_t)(v188 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v189 = v186 - (void)v180;
        unint64_t v190 = (uint64_t)(v186 - (void)v180) >> 2;
        if (v190 <= v188 + 1) {
          unint64_t v190 = v188 + 1;
        }
        if (v189 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v191 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v191 = v190;
        }
        if (v191)
        {
          unsigned int v192 = (char *)sub_5714((uint64_t)(v176 + 264), v191);
          uint64_t v178 = (uint64_t *)v176[263];
          unint64_t v180 = (uint64_t *)v176[262];
        }
        else
        {
          unsigned int v192 = 0;
        }
        uint64_t v193 = (uint64_t *)&v192[8 * v188];
        unint64_t v194 = &v192[8 * v191];
        uint64_t *v193 = v177;
        int v187 = v193 + 1;
        while (v178 != v180)
        {
          uint64_t v196 = *--v178;
          *--uint64_t v193 = v196;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v175 != 1) {
        goto LABEL_262;
      }
      unint64_t v176 = *(void **)a1[1];
      uint64_t v177 = *(void *)(a1[2] + 56) & 0x1FFFFLL;
      uint64_t v178 = (uint64_t *)v176[263];
      unint64_t v179 = v176[264];
      if ((unint64_t)v178 >= v179)
      {
        unint64_t v180 = (uint64_t *)v176[262];
        uint64_t v181 = v178 - v180;
        if ((unint64_t)(v181 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v182 = v179 - (void)v180;
        unint64_t v183 = (uint64_t)(v179 - (void)v180) >> 2;
        if (v183 <= v181 + 1) {
          unint64_t v183 = v181 + 1;
        }
        if (v182 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v184 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v184 = v183;
        }
        if (v184)
        {
          uint64_t v185 = (char *)sub_5714((uint64_t)(v176 + 264), v184);
          uint64_t v178 = (uint64_t *)v176[263];
          unint64_t v180 = (uint64_t *)v176[262];
        }
        else
        {
          uint64_t v185 = 0;
        }
        uint64_t v193 = (uint64_t *)&v185[8 * v181];
        unint64_t v194 = &v185[8 * v184];
        uint64_t *v193 = v177;
        int v187 = v193 + 1;
        while (v178 != v180)
        {
          uint64_t v195 = *--v178;
          *--uint64_t v193 = v195;
        }
LABEL_259:
        v176[262] = v193;
        v176[263] = v187;
        v176[264] = v194;
        if (v180) {
          operator delete(v180);
        }
        goto LABEL_261;
      }
    }
    *uint64_t v178 = v177;
    int v187 = v178 + 1;
LABEL_261:
    v176[263] = v187;
LABEL_262:
    int v197 = 1 << *(_DWORD *)(v3 + 48);
    if (v197 == 2)
    {
      unint64_t v198 = *(void **)a1[1];
      uint64_t v199 = *(_DWORD *)(a1[2] + 72) & 0x1FFFFLL;
      uint64_t v200 = (uint64_t *)v198[266];
      unint64_t v208 = v198[267];
      if ((unint64_t)v200 >= v208)
      {
        unint64_t v202 = (uint64_t *)v198[265];
        uint64_t v210 = v200 - v202;
        if ((unint64_t)(v210 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v211 = v208 - (void)v202;
        unint64_t v212 = (uint64_t)(v208 - (void)v202) >> 2;
        if (v212 <= v210 + 1) {
          unint64_t v212 = v210 + 1;
        }
        if (v211 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v213 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v213 = v212;
        }
        if (v213)
        {
          unint64_t v214 = (char *)sub_5714((uint64_t)(v198 + 267), v213);
          uint64_t v200 = (uint64_t *)v198[266];
          unint64_t v202 = (uint64_t *)v198[265];
        }
        else
        {
          unint64_t v214 = 0;
        }
        uint64_t v215 = (uint64_t *)&v214[8 * v210];
        unint64_t v216 = &v214[8 * v213];
        *uint64_t v215 = v199;
        int v209 = v215 + 1;
        while (v200 != v202)
        {
          uint64_t v218 = *--v200;
          *--uint64_t v215 = v218;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v197 != 1) {
        goto LABEL_294;
      }
      unint64_t v198 = *(void **)a1[1];
      uint64_t v199 = *(_DWORD *)(a1[2] + 72) & 0x1FFFFLL;
      uint64_t v200 = (uint64_t *)v198[266];
      unint64_t v201 = v198[267];
      if ((unint64_t)v200 >= v201)
      {
        unint64_t v202 = (uint64_t *)v198[265];
        uint64_t v203 = v200 - v202;
        if ((unint64_t)(v203 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v204 = v201 - (void)v202;
        unint64_t v205 = (uint64_t)(v201 - (void)v202) >> 2;
        if (v205 <= v203 + 1) {
          unint64_t v205 = v203 + 1;
        }
        if (v204 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v206 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v206 = v205;
        }
        if (v206)
        {
          uint64_t v207 = (char *)sub_5714((uint64_t)(v198 + 267), v206);
          uint64_t v200 = (uint64_t *)v198[266];
          unint64_t v202 = (uint64_t *)v198[265];
        }
        else
        {
          uint64_t v207 = 0;
        }
        uint64_t v215 = (uint64_t *)&v207[8 * v203];
        unint64_t v216 = &v207[8 * v206];
        *uint64_t v215 = v199;
        int v209 = v215 + 1;
        while (v200 != v202)
        {
          uint64_t v217 = *--v200;
          *--uint64_t v215 = v217;
        }
LABEL_291:
        v198[265] = v215;
        v198[266] = v209;
        v198[267] = v216;
        if (v202) {
          operator delete(v202);
        }
        goto LABEL_293;
      }
    }
    uint64_t *v200 = v199;
    int v209 = v200 + 1;
LABEL_293:
    v198[266] = v209;
LABEL_294:
    int v219 = 1 << *(_DWORD *)(v3 + 48);
    if (v219 == 2)
    {
      unint64_t v220 = *(void **)a1[1];
      uint64_t v221 = *(_DWORD *)(a1[2] + 32) & 0x1FFFFLL;
      uint64_t v222 = (uint64_t *)v220[269];
      unint64_t v230 = v220[270];
      if ((unint64_t)v222 >= v230)
      {
        unint64_t v224 = (uint64_t *)v220[268];
        uint64_t v232 = v222 - v224;
        if ((unint64_t)(v232 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v233 = v230 - (void)v224;
        unint64_t v234 = (uint64_t)(v230 - (void)v224) >> 2;
        if (v234 <= v232 + 1) {
          unint64_t v234 = v232 + 1;
        }
        if (v233 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v235 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v235 = v234;
        }
        if (v235)
        {
          unint64_t v236 = (char *)sub_5714((uint64_t)(v220 + 270), v235);
          uint64_t v222 = (uint64_t *)v220[269];
          unint64_t v224 = (uint64_t *)v220[268];
        }
        else
        {
          unint64_t v236 = 0;
        }
        uint64_t v237 = (uint64_t *)&v236[8 * v232];
        unint64_t v238 = &v236[8 * v235];
        uint64_t *v237 = v221;
        int v231 = v237 + 1;
        while (v222 != v224)
        {
          uint64_t v240 = *--v222;
          *--uint64_t v237 = v240;
        }
        goto LABEL_323;
      }
    }
    else
    {
      if (v219 != 1) {
        goto LABEL_326;
      }
      unint64_t v220 = *(void **)a1[1];
      uint64_t v221 = *(_DWORD *)(a1[2] + 32) & 0x1FFFFLL;
      uint64_t v222 = (uint64_t *)v220[269];
      unint64_t v223 = v220[270];
      if ((unint64_t)v222 >= v223)
      {
        unint64_t v224 = (uint64_t *)v220[268];
        uint64_t v225 = v222 - v224;
        if ((unint64_t)(v225 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v226 = v223 - (void)v224;
        unint64_t v227 = (uint64_t)(v223 - (void)v224) >> 2;
        if (v227 <= v225 + 1) {
          unint64_t v227 = v225 + 1;
        }
        if (v226 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v228 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v228 = v227;
        }
        if (v228)
        {
          uint64_t v229 = (char *)sub_5714((uint64_t)(v220 + 270), v228);
          uint64_t v222 = (uint64_t *)v220[269];
          unint64_t v224 = (uint64_t *)v220[268];
        }
        else
        {
          uint64_t v229 = 0;
        }
        uint64_t v237 = (uint64_t *)&v229[8 * v225];
        unint64_t v238 = &v229[8 * v228];
        uint64_t *v237 = v221;
        int v231 = v237 + 1;
        while (v222 != v224)
        {
          uint64_t v239 = *--v222;
          *--uint64_t v237 = v239;
        }
LABEL_323:
        v220[268] = v237;
        v220[269] = v231;
        v220[270] = v238;
        if (v224) {
          operator delete(v224);
        }
        goto LABEL_325;
      }
    }
    *uint64_t v222 = v221;
    int v231 = v222 + 1;
LABEL_325:
    v220[269] = v231;
LABEL_326:
    int v241 = 1 << *(_DWORD *)(v3 + 48);
    if (v241 == 2)
    {
      uint64_t v253 = a1[1];
      unint64_t v243 = *(void **)v253;
      uint64_t v244 = *(unsigned __int16 *)(a1[2] + 76);
      unint64_t v245 = *(char **)(*(void *)v253 + 2176);
      unint64_t v254 = *(void *)(*(void *)v253 + 2184);
      if ((unint64_t)v245 >= v254)
      {
        unint64_t v247 = (char *)v243[271];
        uint64_t v256 = (v245 - v247) >> 3;
        if ((unint64_t)(v256 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v257 = v254 - (void)v247;
        unint64_t v258 = (uint64_t)(v254 - (void)v247) >> 2;
        if (v258 <= v256 + 1) {
          unint64_t v258 = v256 + 1;
        }
        if (v257 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v259 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v259 = v258;
        }
        if (v259)
        {
          unint64_t v260 = (char *)sub_5714((uint64_t)(v243 + 273), v259);
          unint64_t v245 = (char *)v243[272];
          unint64_t v247 = (char *)v243[271];
        }
        else
        {
          unint64_t v260 = 0;
        }
        unint64_t v261 = &v260[8 * v256];
        unint64_t v262 = &v260[8 * v259];
        *(void *)unint64_t v261 = v244;
        uint64_t v255 = v261 + 8;
        while (v245 != v247)
        {
          uint64_t v264 = *((void *)v245 - 1);
          v245 -= 8;
          *((void *)v261 - 1) = v264;
          v261 -= 8;
        }
        goto LABEL_355;
      }
    }
    else
    {
      if (v241 != 1) {
        goto LABEL_358;
      }
      uint64_t v242 = a1[1];
      unint64_t v243 = *(void **)v242;
      uint64_t v244 = *(unsigned __int16 *)(a1[2] + 76);
      unint64_t v245 = *(char **)(*(void *)v242 + 2176);
      unint64_t v246 = *(void *)(*(void *)v242 + 2184);
      if ((unint64_t)v245 >= v246)
      {
        unint64_t v247 = (char *)v243[271];
        uint64_t v248 = (v245 - v247) >> 3;
        if ((unint64_t)(v248 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v249 = v246 - (void)v247;
        unint64_t v250 = (uint64_t)(v246 - (void)v247) >> 2;
        if (v250 <= v248 + 1) {
          unint64_t v250 = v248 + 1;
        }
        if (v249 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v251 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v251 = v250;
        }
        if (v251)
        {
          uint64_t v252 = (char *)sub_5714((uint64_t)(v243 + 273), v251);
          unint64_t v245 = (char *)v243[272];
          unint64_t v247 = (char *)v243[271];
        }
        else
        {
          uint64_t v252 = 0;
        }
        unint64_t v261 = &v252[8 * v248];
        unint64_t v262 = &v252[8 * v251];
        *(void *)unint64_t v261 = v244;
        uint64_t v255 = v261 + 8;
        while (v245 != v247)
        {
          uint64_t v263 = *((void *)v245 - 1);
          v245 -= 8;
          *((void *)v261 - 1) = v263;
          v261 -= 8;
        }
LABEL_355:
        v243[271] = v261;
        v243[272] = v255;
        v243[273] = v262;
        if (v247) {
          operator delete(v247);
        }
        goto LABEL_357;
      }
    }
    *(void *)unint64_t v245 = v244;
    uint64_t v255 = v245 + 8;
LABEL_357:
    v243[272] = v255;
LABEL_358:
    int v265 = 1 << *(_DWORD *)(v3 + 48);
    if (v265 == 2)
    {
      uint64_t v277 = a1[1];
      unint64_t v267 = *(void **)v277;
      uint64_t v268 = *(unsigned __int16 *)(a1[2] + 36);
      unint64_t v269 = *(char **)(*(void *)v277 + 2200);
      unint64_t v278 = *(void *)(*(void *)v277 + 2208);
      if ((unint64_t)v269 >= v278)
      {
        unint64_t v271 = (char *)v267[274];
        uint64_t v280 = (v269 - v271) >> 3;
        if ((unint64_t)(v280 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v281 = v278 - (void)v271;
        unint64_t v282 = (uint64_t)(v278 - (void)v271) >> 2;
        if (v282 <= v280 + 1) {
          unint64_t v282 = v280 + 1;
        }
        if (v281 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v283 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v283 = v282;
        }
        if (v283)
        {
          unint64_t v284 = (char *)sub_5714((uint64_t)(v267 + 276), v283);
          unint64_t v269 = (char *)v267[275];
          unint64_t v271 = (char *)v267[274];
        }
        else
        {
          unint64_t v284 = 0;
        }
        uint64_t v285 = &v284[8 * v280];
        unint64_t v286 = &v284[8 * v283];
        *(void *)uint64_t v285 = v268;
        unint64_t v279 = v285 + 8;
        while (v269 != v271)
        {
          uint64_t v288 = *((void *)v269 - 1);
          v269 -= 8;
          *((void *)v285 - 1) = v288;
          v285 -= 8;
        }
        goto LABEL_387;
      }
    }
    else
    {
      if (v265 != 1) {
        goto LABEL_390;
      }
      uint64_t v266 = a1[1];
      unint64_t v267 = *(void **)v266;
      uint64_t v268 = *(unsigned __int16 *)(a1[2] + 36);
      unint64_t v269 = *(char **)(*(void *)v266 + 2200);
      unint64_t v270 = *(void *)(*(void *)v266 + 2208);
      if ((unint64_t)v269 >= v270)
      {
        unint64_t v271 = (char *)v267[274];
        uint64_t v272 = (v269 - v271) >> 3;
        if ((unint64_t)(v272 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v273 = v270 - (void)v271;
        unint64_t v274 = (uint64_t)(v270 - (void)v271) >> 2;
        if (v274 <= v272 + 1) {
          unint64_t v274 = v272 + 1;
        }
        if (v273 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v275 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v275 = v274;
        }
        if (v275)
        {
          uint64_t v276 = (char *)sub_5714((uint64_t)(v267 + 276), v275);
          unint64_t v269 = (char *)v267[275];
          unint64_t v271 = (char *)v267[274];
        }
        else
        {
          uint64_t v276 = 0;
        }
        uint64_t v285 = &v276[8 * v272];
        unint64_t v286 = &v276[8 * v275];
        *(void *)uint64_t v285 = v268;
        unint64_t v279 = v285 + 8;
        while (v269 != v271)
        {
          uint64_t v287 = *((void *)v269 - 1);
          v269 -= 8;
          *((void *)v285 - 1) = v287;
          v285 -= 8;
        }
LABEL_387:
        v267[274] = v285;
        v267[275] = v279;
        v267[276] = v286;
        if (v271) {
          operator delete(v271);
        }
        goto LABEL_389;
      }
    }
    *(void *)unint64_t v269 = v268;
    unint64_t v279 = v269 + 8;
LABEL_389:
    v267[275] = v279;
LABEL_390:
    int v289 = 1 << *(_DWORD *)(v3 + 48);
    if (v289 == 2)
    {
      uint64_t v301 = a1[1];
      unint64_t v291 = *(void **)v301;
      uint64_t v292 = *(unsigned __int16 *)(a1[2] + 84);
      unint64_t v293 = *(char **)(*(void *)v301 + 2224);
      unint64_t v302 = *(void *)(*(void *)v301 + 2232);
      if ((unint64_t)v293 >= v302)
      {
        uint64_t v295 = (char *)v291[277];
        uint64_t v304 = (v293 - v295) >> 3;
        if ((unint64_t)(v304 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v305 = v302 - (void)v295;
        unint64_t v306 = (uint64_t)(v302 - (void)v295) >> 2;
        if (v306 <= v304 + 1) {
          unint64_t v306 = v304 + 1;
        }
        if (v305 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v307 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v307 = v306;
        }
        if (v307)
        {
          unint64_t v308 = (char *)sub_5714((uint64_t)(v291 + 279), v307);
          unint64_t v293 = (char *)v291[278];
          uint64_t v295 = (char *)v291[277];
        }
        else
        {
          unint64_t v308 = 0;
        }
        unint64_t v309 = &v308[8 * v304];
        uint64_t v310 = &v308[8 * v307];
        *(void *)unint64_t v309 = v292;
        uint64_t v303 = v309 + 8;
        while (v293 != v295)
        {
          uint64_t v312 = *((void *)v293 - 1);
          v293 -= 8;
          *((void *)v309 - 1) = v312;
          v309 -= 8;
        }
        goto LABEL_419;
      }
    }
    else
    {
      if (v289 != 1) {
        goto LABEL_422;
      }
      uint64_t v290 = a1[1];
      unint64_t v291 = *(void **)v290;
      uint64_t v292 = *(unsigned __int16 *)(a1[2] + 84);
      unint64_t v293 = *(char **)(*(void *)v290 + 2224);
      unint64_t v294 = *(void *)(*(void *)v290 + 2232);
      if ((unint64_t)v293 >= v294)
      {
        uint64_t v295 = (char *)v291[277];
        uint64_t v296 = (v293 - v295) >> 3;
        if ((unint64_t)(v296 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v297 = v294 - (void)v295;
        unint64_t v298 = (uint64_t)(v294 - (void)v295) >> 2;
        if (v298 <= v296 + 1) {
          unint64_t v298 = v296 + 1;
        }
        if (v297 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v299 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v299 = v298;
        }
        if (v299)
        {
          uint64_t v300 = (char *)sub_5714((uint64_t)(v291 + 279), v299);
          unint64_t v293 = (char *)v291[278];
          uint64_t v295 = (char *)v291[277];
        }
        else
        {
          uint64_t v300 = 0;
        }
        unint64_t v309 = &v300[8 * v296];
        uint64_t v310 = &v300[8 * v299];
        *(void *)unint64_t v309 = v292;
        uint64_t v303 = v309 + 8;
        while (v293 != v295)
        {
          uint64_t v311 = *((void *)v293 - 1);
          v293 -= 8;
          *((void *)v309 - 1) = v311;
          v309 -= 8;
        }
LABEL_419:
        v291[277] = v309;
        v291[278] = v303;
        v291[279] = v310;
        if (v295) {
          operator delete(v295);
        }
        goto LABEL_421;
      }
    }
    *(void *)unint64_t v293 = v292;
    uint64_t v303 = v293 + 8;
LABEL_421:
    v291[278] = v303;
LABEL_422:
    int v313 = 1 << *(_DWORD *)(v3 + 48);
    if (v313 == 2)
    {
      unint64_t v314 = *(void **)a1[1];
      uint64_t v315 = (*(unsigned __int16 *)(a1[2] + 44) | (*(unsigned __int8 *)(a1[2] + 46) << 16)) & 0x1FFFFLL;
      uint64_t v316 = (uint64_t *)v314[281];
      unint64_t v324 = v314[282];
      if ((unint64_t)v316 >= v324)
      {
        uint64_t v318 = (uint64_t *)v314[280];
        uint64_t v326 = v316 - v318;
        if ((unint64_t)(v326 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v327 = v324 - (void)v318;
        unint64_t v328 = (uint64_t)(v324 - (void)v318) >> 2;
        if (v328 <= v326 + 1) {
          unint64_t v328 = v326 + 1;
        }
        if (v327 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v329 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v329 = v328;
        }
        if (v329)
        {
          unint64_t v330 = (char *)sub_5714((uint64_t)(v314 + 282), v329);
          uint64_t v316 = (uint64_t *)v314[281];
          uint64_t v318 = (uint64_t *)v314[280];
        }
        else
        {
          unint64_t v330 = 0;
        }
        unint64_t v331 = (uint64_t *)&v330[8 * v326];
        uint64_t v332 = &v330[8 * v329];
        *unint64_t v331 = v315;
        uint64_t v325 = v331 + 1;
        while (v316 != v318)
        {
          uint64_t v334 = *--v316;
          *--unint64_t v331 = v334;
        }
        goto LABEL_451;
      }
    }
    else
    {
      if (v313 != 1) {
        goto LABEL_454;
      }
      unint64_t v314 = *(void **)a1[1];
      uint64_t v315 = (*(unsigned __int16 *)(a1[2] + 44) | (*(unsigned __int8 *)(a1[2] + 46) << 16)) & 0x1FFFFLL;
      uint64_t v316 = (uint64_t *)v314[281];
      unint64_t v317 = v314[282];
      if ((unint64_t)v316 >= v317)
      {
        uint64_t v318 = (uint64_t *)v314[280];
        uint64_t v319 = v316 - v318;
        if ((unint64_t)(v319 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v320 = v317 - (void)v318;
        unint64_t v321 = (uint64_t)(v317 - (void)v318) >> 2;
        if (v321 <= v319 + 1) {
          unint64_t v321 = v319 + 1;
        }
        if (v320 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v322 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v322 = v321;
        }
        if (v322)
        {
          unint64_t v323 = (char *)sub_5714((uint64_t)(v314 + 282), v322);
          uint64_t v316 = (uint64_t *)v314[281];
          uint64_t v318 = (uint64_t *)v314[280];
        }
        else
        {
          unint64_t v323 = 0;
        }
        unint64_t v331 = (uint64_t *)&v323[8 * v319];
        uint64_t v332 = &v323[8 * v322];
        *unint64_t v331 = v315;
        uint64_t v325 = v331 + 1;
        while (v316 != v318)
        {
          uint64_t v333 = *--v316;
          *--unint64_t v331 = v333;
        }
LABEL_451:
        v314[280] = v331;
        v314[281] = v325;
        v314[282] = v332;
        if (v318) {
          operator delete(v318);
        }
        goto LABEL_453;
      }
    }
    *uint64_t v316 = v315;
    uint64_t v325 = v316 + 1;
LABEL_453:
    v314[281] = v325;
LABEL_454:
    int v335 = 1 << *(_DWORD *)(v3 + 48);
    if (v335 == 2)
    {
      uint64_t v347 = a1[1];
      unint64_t v337 = *(void **)v347;
      uint64_t v338 = *(unsigned __int16 *)(a1[2] + 86);
      uint64_t v339 = *(char **)(*(void *)v347 + 2272);
      unint64_t v348 = *(void *)(*(void *)v347 + 2280);
      if ((unint64_t)v339 >= v348)
      {
        int v341 = (char *)v337[283];
        uint64_t v350 = (v339 - v341) >> 3;
        if ((unint64_t)(v350 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v351 = v348 - (void)v341;
        unint64_t v352 = (uint64_t)(v348 - (void)v341) >> 2;
        if (v352 <= v350 + 1) {
          unint64_t v352 = v350 + 1;
        }
        if (v351 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v353 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v353 = v352;
        }
        if (v353)
        {
          uint64_t v354 = (char *)sub_5714((uint64_t)(v337 + 285), v353);
          uint64_t v339 = (char *)v337[284];
          int v341 = (char *)v337[283];
        }
        else
        {
          uint64_t v354 = 0;
        }
        unint64_t v355 = &v354[8 * v350];
        unint64_t v356 = &v354[8 * v353];
        *(void *)unint64_t v355 = v338;
        unint64_t v349 = v355 + 8;
        while (v339 != v341)
        {
          uint64_t v358 = *((void *)v339 - 1);
          v339 -= 8;
          *((void *)v355 - 1) = v358;
          v355 -= 8;
        }
        goto LABEL_483;
      }
    }
    else
    {
      if (v335 != 1) {
        goto LABEL_486;
      }
      uint64_t v336 = a1[1];
      unint64_t v337 = *(void **)v336;
      uint64_t v338 = *(unsigned __int16 *)(a1[2] + 86);
      uint64_t v339 = *(char **)(*(void *)v336 + 2272);
      unint64_t v340 = *(void *)(*(void *)v336 + 2280);
      if ((unint64_t)v339 >= v340)
      {
        int v341 = (char *)v337[283];
        uint64_t v342 = (v339 - v341) >> 3;
        if ((unint64_t)(v342 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v343 = v340 - (void)v341;
        unint64_t v344 = (uint64_t)(v340 - (void)v341) >> 2;
        if (v344 <= v342 + 1) {
          unint64_t v344 = v342 + 1;
        }
        if (v343 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v345 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v345 = v344;
        }
        if (v345)
        {
          unint64_t v346 = (char *)sub_5714((uint64_t)(v337 + 285), v345);
          uint64_t v339 = (char *)v337[284];
          int v341 = (char *)v337[283];
        }
        else
        {
          unint64_t v346 = 0;
        }
        unint64_t v355 = &v346[8 * v342];
        unint64_t v356 = &v346[8 * v345];
        *(void *)unint64_t v355 = v338;
        unint64_t v349 = v355 + 8;
        while (v339 != v341)
        {
          uint64_t v357 = *((void *)v339 - 1);
          v339 -= 8;
          *((void *)v355 - 1) = v357;
          v355 -= 8;
        }
LABEL_483:
        v337[283] = v355;
        v337[284] = v349;
        v337[285] = v356;
        if (v341) {
          operator delete(v341);
        }
        goto LABEL_485;
      }
    }
    *(void *)uint64_t v339 = v338;
    unint64_t v349 = v339 + 8;
LABEL_485:
    v337[284] = v349;
LABEL_486:
    int v359 = 1 << *(_DWORD *)(v3 + 48);
    if (v359 == 2)
    {
      unint64_t v360 = *(void **)a1[1];
      uint64_t v361 = *(_DWORD *)(a1[2] + 52) & 0x1FFFFLL;
      uint64_t v362 = (uint64_t *)v360[287];
      unint64_t v370 = v360[288];
      if ((unint64_t)v362 >= v370)
      {
        uint64_t v364 = (uint64_t *)v360[286];
        uint64_t v372 = v362 - v364;
        if ((unint64_t)(v372 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v373 = v370 - (void)v364;
        unint64_t v374 = (uint64_t)(v370 - (void)v364) >> 2;
        if (v374 <= v372 + 1) {
          unint64_t v374 = v372 + 1;
        }
        if (v373 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v375 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v375 = v374;
        }
        if (v375)
        {
          uint64_t v376 = (char *)sub_5714((uint64_t)(v360 + 288), v375);
          uint64_t v362 = (uint64_t *)v360[287];
          uint64_t v364 = (uint64_t *)v360[286];
        }
        else
        {
          uint64_t v376 = 0;
        }
        unint64_t v377 = (uint64_t *)&v376[8 * v372];
        unint64_t v378 = &v376[8 * v375];
        uint64_t *v377 = v361;
        unint64_t v371 = v377 + 1;
        while (v362 != v364)
        {
          uint64_t v380 = *--v362;
          *--unint64_t v377 = v380;
        }
        goto LABEL_515;
      }
    }
    else
    {
      if (v359 != 1) {
        goto LABEL_518;
      }
      unint64_t v360 = *(void **)a1[1];
      uint64_t v361 = *(_DWORD *)(a1[2] + 52) & 0x1FFFFLL;
      uint64_t v362 = (uint64_t *)v360[287];
      unint64_t v363 = v360[288];
      if ((unint64_t)v362 >= v363)
      {
        uint64_t v364 = (uint64_t *)v360[286];
        uint64_t v365 = v362 - v364;
        if ((unint64_t)(v365 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v366 = v363 - (void)v364;
        unint64_t v367 = (uint64_t)(v363 - (void)v364) >> 2;
        if (v367 <= v365 + 1) {
          unint64_t v367 = v365 + 1;
        }
        if (v366 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v368 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v368 = v367;
        }
        if (v368)
        {
          uint64_t v369 = (char *)sub_5714((uint64_t)(v360 + 288), v368);
          uint64_t v362 = (uint64_t *)v360[287];
          uint64_t v364 = (uint64_t *)v360[286];
        }
        else
        {
          uint64_t v369 = 0;
        }
        unint64_t v377 = (uint64_t *)&v369[8 * v365];
        unint64_t v378 = &v369[8 * v368];
        uint64_t *v377 = v361;
        unint64_t v371 = v377 + 1;
        while (v362 != v364)
        {
          uint64_t v379 = *--v362;
          *--unint64_t v377 = v379;
        }
LABEL_515:
        v360[286] = v377;
        v360[287] = v371;
        v360[288] = v378;
        if (v364) {
          operator delete(v364);
        }
        goto LABEL_517;
      }
    }
    uint64_t *v362 = v361;
    unint64_t v371 = v362 + 1;
LABEL_517:
    v360[287] = v371;
LABEL_518:
    int v381 = 1 << *(_DWORD *)(v3 + 48);
    if (v381 == 2)
    {
      uint64_t v393 = a1[1];
      uint64_t v383 = *(void **)v393;
      uint64_t v384 = *(unsigned __int16 *)(a1[2] + 82);
      int v385 = *(char **)(*(void *)v393 + 2320);
      unint64_t v394 = *(void *)(*(void *)v393 + 2328);
      if ((unint64_t)v385 >= v394)
      {
        uint64_t v387 = (char *)v383[289];
        uint64_t v396 = (v385 - v387) >> 3;
        if ((unint64_t)(v396 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v397 = v394 - (void)v387;
        unint64_t v398 = (uint64_t)(v394 - (void)v387) >> 2;
        if (v398 <= v396 + 1) {
          unint64_t v398 = v396 + 1;
        }
        if (v397 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v399 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v399 = v398;
        }
        if (v399)
        {
          unint64_t v400 = (char *)sub_5714((uint64_t)(v383 + 291), v399);
          int v385 = (char *)v383[290];
          uint64_t v387 = (char *)v383[289];
        }
        else
        {
          unint64_t v400 = 0;
        }
        unint64_t v401 = &v400[8 * v396];
        unint64_t v402 = &v400[8 * v399];
        *(void *)unint64_t v401 = v384;
        unint64_t v395 = v401 + 8;
        while (v385 != v387)
        {
          uint64_t v404 = *((void *)v385 - 1);
          v385 -= 8;
          *((void *)v401 - 1) = v404;
          v401 -= 8;
        }
        goto LABEL_547;
      }
    }
    else
    {
      if (v381 != 1) {
        goto LABEL_550;
      }
      uint64_t v382 = a1[1];
      uint64_t v383 = *(void **)v382;
      uint64_t v384 = *(unsigned __int16 *)(a1[2] + 82);
      int v385 = *(char **)(*(void *)v382 + 2320);
      unint64_t v386 = *(void *)(*(void *)v382 + 2328);
      if ((unint64_t)v385 >= v386)
      {
        uint64_t v387 = (char *)v383[289];
        uint64_t v388 = (v385 - v387) >> 3;
        if ((unint64_t)(v388 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v389 = v386 - (void)v387;
        unint64_t v390 = (uint64_t)(v386 - (void)v387) >> 2;
        if (v390 <= v388 + 1) {
          unint64_t v390 = v388 + 1;
        }
        if (v389 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v391 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v391 = v390;
        }
        if (v391)
        {
          unint64_t v392 = (char *)sub_5714((uint64_t)(v383 + 291), v391);
          int v385 = (char *)v383[290];
          uint64_t v387 = (char *)v383[289];
        }
        else
        {
          unint64_t v392 = 0;
        }
        unint64_t v401 = &v392[8 * v388];
        unint64_t v402 = &v392[8 * v391];
        *(void *)unint64_t v401 = v384;
        unint64_t v395 = v401 + 8;
        while (v385 != v387)
        {
          uint64_t v403 = *((void *)v385 - 1);
          v385 -= 8;
          *((void *)v401 - 1) = v403;
          v401 -= 8;
        }
LABEL_547:
        v383[289] = v401;
        v383[290] = v395;
        v383[291] = v402;
        if (v387) {
          operator delete(v387);
        }
        goto LABEL_549;
      }
    }
    *(void *)int v385 = v384;
    unint64_t v395 = v385 + 8;
LABEL_549:
    v383[290] = v395;
LABEL_550:
    int v405 = 1 << *(_DWORD *)(v3 + 48);
    if (v405 == 2)
    {
      uint64_t v417 = a1[1];
      int v407 = *(void **)v417;
      uint64_t v408 = *(unsigned __int16 *)(a1[2] + 42);
      uint64_t v409 = *(char **)(*(void *)v417 + 2344);
      unint64_t v418 = *(void *)(*(void *)v417 + 2352);
      if ((unint64_t)v409 >= v418)
      {
        unint64_t v411 = (char *)v407[292];
        uint64_t v420 = (v409 - v411) >> 3;
        if ((unint64_t)(v420 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v421 = v418 - (void)v411;
        unint64_t v422 = (uint64_t)(v418 - (void)v411) >> 2;
        if (v422 <= v420 + 1) {
          unint64_t v422 = v420 + 1;
        }
        if (v421 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v423 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v423 = v422;
        }
        if (v423)
        {
          unint64_t v424 = (char *)sub_5714((uint64_t)(v407 + 294), v423);
          uint64_t v409 = (char *)v407[293];
          unint64_t v411 = (char *)v407[292];
        }
        else
        {
          unint64_t v424 = 0;
        }
        unint64_t v425 = &v424[8 * v420];
        unint64_t v426 = &v424[8 * v423];
        *(void *)unint64_t v425 = v408;
        unint64_t v419 = v425 + 8;
        while (v409 != v411)
        {
          uint64_t v428 = *((void *)v409 - 1);
          v409 -= 8;
          *((void *)v425 - 1) = v428;
          v425 -= 8;
        }
        goto LABEL_579;
      }
    }
    else
    {
      if (v405 != 1) {
        goto LABEL_582;
      }
      uint64_t v406 = a1[1];
      int v407 = *(void **)v406;
      uint64_t v408 = *(unsigned __int16 *)(a1[2] + 42);
      uint64_t v409 = *(char **)(*(void *)v406 + 2344);
      unint64_t v410 = *(void *)(*(void *)v406 + 2352);
      if ((unint64_t)v409 >= v410)
      {
        unint64_t v411 = (char *)v407[292];
        uint64_t v412 = (v409 - v411) >> 3;
        if ((unint64_t)(v412 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v413 = v410 - (void)v411;
        unint64_t v414 = (uint64_t)(v410 - (void)v411) >> 2;
        if (v414 <= v412 + 1) {
          unint64_t v414 = v412 + 1;
        }
        if (v413 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v415 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v415 = v414;
        }
        if (v415)
        {
          unint64_t v416 = (char *)sub_5714((uint64_t)(v407 + 294), v415);
          uint64_t v409 = (char *)v407[293];
          unint64_t v411 = (char *)v407[292];
        }
        else
        {
          unint64_t v416 = 0;
        }
        unint64_t v425 = &v416[8 * v412];
        unint64_t v426 = &v416[8 * v415];
        *(void *)unint64_t v425 = v408;
        unint64_t v419 = v425 + 8;
        while (v409 != v411)
        {
          uint64_t v427 = *((void *)v409 - 1);
          v409 -= 8;
          *((void *)v425 - 1) = v427;
          v425 -= 8;
        }
LABEL_579:
        v407[292] = v425;
        v407[293] = v419;
        v407[294] = v426;
        if (v411) {
          operator delete(v411);
        }
        goto LABEL_581;
      }
    }
    *(void *)uint64_t v409 = v408;
    unint64_t v419 = v409 + 8;
LABEL_581:
    v407[293] = v419;
LABEL_582:
    int v429 = 1 << *(_DWORD *)(v3 + 48);
    if (v429 == 2)
    {
      uint64_t v441 = a1[1];
      int v431 = *(void **)v441;
      uint64_t v432 = *(unsigned __int16 *)(a1[2] + 78);
      uint64_t v433 = *(char **)(*(void *)v441 + 2368);
      unint64_t v442 = *(void *)(*(void *)v441 + 2376);
      if ((unint64_t)v433 >= v442)
      {
        unint64_t v435 = (char *)v431[295];
        uint64_t v444 = (v433 - v435) >> 3;
        if ((unint64_t)(v444 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v445 = v442 - (void)v435;
        unint64_t v446 = (uint64_t)(v442 - (void)v435) >> 2;
        if (v446 <= v444 + 1) {
          unint64_t v446 = v444 + 1;
        }
        if (v445 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v447 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v447 = v446;
        }
        if (v447)
        {
          unint64_t v448 = (char *)sub_5714((uint64_t)(v431 + 297), v447);
          uint64_t v433 = (char *)v431[296];
          unint64_t v435 = (char *)v431[295];
        }
        else
        {
          unint64_t v448 = 0;
        }
        unint64_t v449 = &v448[8 * v444];
        unsigned int v450 = &v448[8 * v447];
        *(void *)unint64_t v449 = v432;
        unsigned int v443 = v449 + 8;
        while (v433 != v435)
        {
          uint64_t v452 = *((void *)v433 - 1);
          v433 -= 8;
          *((void *)v449 - 1) = v452;
          v449 -= 8;
        }
        goto LABEL_611;
      }
    }
    else
    {
      if (v429 != 1) {
        goto LABEL_614;
      }
      uint64_t v430 = a1[1];
      int v431 = *(void **)v430;
      uint64_t v432 = *(unsigned __int16 *)(a1[2] + 78);
      uint64_t v433 = *(char **)(*(void *)v430 + 2368);
      unint64_t v434 = *(void *)(*(void *)v430 + 2376);
      if ((unint64_t)v433 >= v434)
      {
        unint64_t v435 = (char *)v431[295];
        uint64_t v436 = (v433 - v435) >> 3;
        if ((unint64_t)(v436 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v437 = v434 - (void)v435;
        unint64_t v438 = (uint64_t)(v434 - (void)v435) >> 2;
        if (v438 <= v436 + 1) {
          unint64_t v438 = v436 + 1;
        }
        if (v437 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v439 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v439 = v438;
        }
        if (v439)
        {
          unint64_t v440 = (char *)sub_5714((uint64_t)(v431 + 297), v439);
          uint64_t v433 = (char *)v431[296];
          unint64_t v435 = (char *)v431[295];
        }
        else
        {
          unint64_t v440 = 0;
        }
        unint64_t v449 = &v440[8 * v436];
        unsigned int v450 = &v440[8 * v439];
        *(void *)unint64_t v449 = v432;
        unsigned int v443 = v449 + 8;
        while (v433 != v435)
        {
          uint64_t v451 = *((void *)v433 - 1);
          v433 -= 8;
          *((void *)v449 - 1) = v451;
          v449 -= 8;
        }
LABEL_611:
        v431[295] = v449;
        v431[296] = v443;
        v431[297] = v450;
        if (v435) {
          operator delete(v435);
        }
        goto LABEL_613;
      }
    }
    *(void *)uint64_t v433 = v432;
    unsigned int v443 = v433 + 8;
LABEL_613:
    v431[296] = v443;
LABEL_614:
    int v453 = 1 << *(_DWORD *)(v3 + 48);
    if (v453 == 2)
    {
      uint64_t v465 = a1[1];
      uint64_t v455 = *(void **)v465;
      uint64_t v456 = *(unsigned __int16 *)(a1[2] + 38);
      unint64_t v457 = *(char **)(*(void *)v465 + 2392);
      unint64_t v466 = *(void *)(*(void *)v465 + 2400);
      if ((unint64_t)v457 >= v466)
      {
        uint64_t v459 = (char *)v455[298];
        uint64_t v468 = (v457 - v459) >> 3;
        if ((unint64_t)(v468 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v469 = v466 - (void)v459;
        unint64_t v470 = (uint64_t)(v466 - (void)v459) >> 2;
        if (v470 <= v468 + 1) {
          unint64_t v470 = v468 + 1;
        }
        if (v469 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v471 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v471 = v470;
        }
        if (v471)
        {
          unint64_t v472 = (char *)sub_5714((uint64_t)(v455 + 300), v471);
          unint64_t v457 = (char *)v455[299];
          uint64_t v459 = (char *)v455[298];
        }
        else
        {
          unint64_t v472 = 0;
        }
        uint64_t v473 = &v472[8 * v468];
        uint64_t v474 = &v472[8 * v471];
        *(void *)uint64_t v473 = v456;
        unint64_t v467 = v473 + 8;
        while (v457 != v459)
        {
          uint64_t v476 = *((void *)v457 - 1);
          v457 -= 8;
          *((void *)v473 - 1) = v476;
          v473 -= 8;
        }
        goto LABEL_643;
      }
    }
    else
    {
      if (v453 != 1) {
        goto LABEL_646;
      }
      uint64_t v454 = a1[1];
      uint64_t v455 = *(void **)v454;
      uint64_t v456 = *(unsigned __int16 *)(a1[2] + 38);
      unint64_t v457 = *(char **)(*(void *)v454 + 2392);
      unint64_t v458 = *(void *)(*(void *)v454 + 2400);
      if ((unint64_t)v457 >= v458)
      {
        uint64_t v459 = (char *)v455[298];
        uint64_t v460 = (v457 - v459) >> 3;
        if ((unint64_t)(v460 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v461 = v458 - (void)v459;
        unint64_t v462 = (uint64_t)(v458 - (void)v459) >> 2;
        if (v462 <= v460 + 1) {
          unint64_t v462 = v460 + 1;
        }
        if (v461 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v463 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v463 = v462;
        }
        if (v463)
        {
          unint64_t v464 = (char *)sub_5714((uint64_t)(v455 + 300), v463);
          unint64_t v457 = (char *)v455[299];
          uint64_t v459 = (char *)v455[298];
        }
        else
        {
          unint64_t v464 = 0;
        }
        uint64_t v473 = &v464[8 * v460];
        uint64_t v474 = &v464[8 * v463];
        *(void *)uint64_t v473 = v456;
        unint64_t v467 = v473 + 8;
        while (v457 != v459)
        {
          uint64_t v475 = *((void *)v457 - 1);
          v457 -= 8;
          *((void *)v473 - 1) = v475;
          v473 -= 8;
        }
LABEL_643:
        v455[298] = v473;
        v455[299] = v467;
        v455[300] = v474;
        if (v459) {
          operator delete(v459);
        }
        goto LABEL_645;
      }
    }
    *(void *)unint64_t v457 = v456;
    unint64_t v467 = v457 + 8;
LABEL_645:
    v455[299] = v467;
LABEL_646:
    int v477 = 1 << *(_DWORD *)(v3 + 48);
    if (v477 == 2)
    {
      uint64_t v478 = *(void **)a1[1];
      uint64_t v479 = *(_DWORD *)(a1[2] + 64) & 0x3FFFFLL;
      unint64_t v480 = (uint64_t *)v478[302];
      unint64_t v488 = v478[303];
      if ((unint64_t)v480 >= v488)
      {
        uint64_t v482 = (uint64_t *)v478[301];
        uint64_t v490 = v480 - v482;
        if ((unint64_t)(v490 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v491 = v488 - (void)v482;
        unint64_t v492 = (uint64_t)(v488 - (void)v482) >> 2;
        if (v492 <= v490 + 1) {
          unint64_t v492 = v490 + 1;
        }
        if (v491 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v493 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v493 = v492;
        }
        if (v493)
        {
          unint64_t v494 = (char *)sub_5714((uint64_t)(v478 + 303), v493);
          unint64_t v480 = (uint64_t *)v478[302];
          uint64_t v482 = (uint64_t *)v478[301];
        }
        else
        {
          unint64_t v494 = 0;
        }
        unsigned int v495 = (uint64_t *)&v494[8 * v490];
        unint64_t v496 = &v494[8 * v493];
        *unsigned int v495 = v479;
        unint64_t v489 = v495 + 1;
        while (v480 != v482)
        {
          uint64_t v498 = *--v480;
          *--unsigned int v495 = v498;
        }
        goto LABEL_675;
      }
    }
    else
    {
      if (v477 != 1) {
        goto LABEL_678;
      }
      uint64_t v478 = *(void **)a1[1];
      uint64_t v479 = *(_DWORD *)(a1[2] + 64) & 0x3FFFFLL;
      unint64_t v480 = (uint64_t *)v478[302];
      unint64_t v481 = v478[303];
      if ((unint64_t)v480 >= v481)
      {
        uint64_t v482 = (uint64_t *)v478[301];
        uint64_t v483 = v480 - v482;
        if ((unint64_t)(v483 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v484 = v481 - (void)v482;
        unint64_t v485 = (uint64_t)(v481 - (void)v482) >> 2;
        if (v485 <= v483 + 1) {
          unint64_t v485 = v483 + 1;
        }
        if (v484 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v486 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v486 = v485;
        }
        if (v486)
        {
          uint64_t v487 = (char *)sub_5714((uint64_t)(v478 + 303), v486);
          unint64_t v480 = (uint64_t *)v478[302];
          uint64_t v482 = (uint64_t *)v478[301];
        }
        else
        {
          uint64_t v487 = 0;
        }
        unsigned int v495 = (uint64_t *)&v487[8 * v483];
        unint64_t v496 = &v487[8 * v486];
        *unsigned int v495 = v479;
        unint64_t v489 = v495 + 1;
        while (v480 != v482)
        {
          uint64_t v497 = *--v480;
          *--unsigned int v495 = v497;
        }
LABEL_675:
        v478[301] = v495;
        v478[302] = v489;
        v478[303] = v496;
        if (v482) {
          operator delete(v482);
        }
        goto LABEL_677;
      }
    }
    *unint64_t v480 = v479;
    unint64_t v489 = v480 + 1;
LABEL_677:
    v478[302] = v489;
LABEL_678:
    int v499 = 1 << *(_DWORD *)(v3 + 48);
    if (v499 == 2)
    {
      unint64_t v500 = *(void **)a1[1];
      unint64_t v501 = ((*(unsigned int *)(a1[2] + 22) | ((unint64_t)*(unsigned __int8 *)(a1[2] + 26) << 32)) >> 16) & 0x3FFFF;
      unint64_t v502 = (unint64_t *)v500[305];
      unint64_t v510 = v500[306];
      if ((unint64_t)v502 >= v510)
      {
        unint64_t v504 = (unint64_t *)v500[304];
        uint64_t v512 = v502 - v504;
        if ((unint64_t)(v512 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v513 = v510 - (void)v504;
        unint64_t v514 = (uint64_t)(v510 - (void)v504) >> 2;
        if (v514 <= v512 + 1) {
          unint64_t v514 = v512 + 1;
        }
        if (v513 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v515 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v515 = v514;
        }
        if (v515)
        {
          unint64_t v516 = (char *)sub_5714((uint64_t)(v500 + 306), v515);
          unint64_t v502 = (unint64_t *)v500[305];
          unint64_t v504 = (unint64_t *)v500[304];
        }
        else
        {
          unint64_t v516 = 0;
        }
        unint64_t v517 = (unint64_t *)&v516[8 * v512];
        unsigned int v518 = &v516[8 * v515];
        *unint64_t v517 = v501;
        unint64_t v511 = v517 + 1;
        while (v502 != v504)
        {
          unint64_t v520 = *--v502;
          *--unint64_t v517 = v520;
        }
        goto LABEL_707;
      }
    }
    else
    {
      if (v499 != 1) {
        goto LABEL_710;
      }
      unint64_t v500 = *(void **)a1[1];
      unint64_t v501 = ((*(unsigned int *)(a1[2] + 22) | ((unint64_t)*(unsigned __int8 *)(a1[2] + 26) << 32)) >> 16) & 0x3FFFF;
      unint64_t v502 = (unint64_t *)v500[305];
      unint64_t v503 = v500[306];
      if ((unint64_t)v502 >= v503)
      {
        unint64_t v504 = (unint64_t *)v500[304];
        uint64_t v505 = v502 - v504;
        if ((unint64_t)(v505 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v506 = v503 - (void)v504;
        unint64_t v507 = (uint64_t)(v503 - (void)v504) >> 2;
        if (v507 <= v505 + 1) {
          unint64_t v507 = v505 + 1;
        }
        if (v506 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v508 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v508 = v507;
        }
        if (v508)
        {
          unint64_t v509 = (char *)sub_5714((uint64_t)(v500 + 306), v508);
          unint64_t v502 = (unint64_t *)v500[305];
          unint64_t v504 = (unint64_t *)v500[304];
        }
        else
        {
          unint64_t v509 = 0;
        }
        unint64_t v517 = (unint64_t *)&v509[8 * v505];
        unsigned int v518 = &v509[8 * v508];
        *unint64_t v517 = v501;
        unint64_t v511 = v517 + 1;
        while (v502 != v504)
        {
          unint64_t v519 = *--v502;
          *--unint64_t v517 = v519;
        }
LABEL_707:
        v500[304] = v517;
        v500[305] = v511;
        v500[306] = v518;
        if (v504) {
          operator delete(v504);
        }
        goto LABEL_709;
      }
    }
    unint64_t *v502 = v501;
    unint64_t v511 = v502 + 1;
LABEL_709:
    v500[305] = v511;
LABEL_710:
    int v521 = 1 << *(_DWORD *)(v3 + 48);
    if (v521 == 2)
    {
      unsigned int v522 = *(void **)a1[1];
      uint64_t v523 = *(_DWORD *)(a1[2] + 68) & 0x3FFFFLL;
      unint64_t v524 = (uint64_t *)v522[308];
      unint64_t v532 = v522[309];
      if ((unint64_t)v524 >= v532)
      {
        unint64_t v526 = (uint64_t *)v522[307];
        uint64_t v534 = v524 - v526;
        if ((unint64_t)(v534 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v535 = v532 - (void)v526;
        unint64_t v536 = (uint64_t)(v532 - (void)v526) >> 2;
        if (v536 <= v534 + 1) {
          unint64_t v536 = v534 + 1;
        }
        if (v535 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v537 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v537 = v536;
        }
        if (v537)
        {
          unint64_t v538 = (char *)sub_5714((uint64_t)(v522 + 309), v537);
          unint64_t v524 = (uint64_t *)v522[308];
          unint64_t v526 = (uint64_t *)v522[307];
        }
        else
        {
          unint64_t v538 = 0;
        }
        int v539 = (uint64_t *)&v538[8 * v534];
        int v540 = &v538[8 * v537];
        *int v539 = v523;
        unsigned int v533 = v539 + 1;
        while (v524 != v526)
        {
          uint64_t v542 = *--v524;
          *--int v539 = v542;
        }
        goto LABEL_739;
      }
    }
    else
    {
      if (v521 != 1) {
        goto LABEL_742;
      }
      unsigned int v522 = *(void **)a1[1];
      uint64_t v523 = *(_DWORD *)(a1[2] + 68) & 0x3FFFFLL;
      unint64_t v524 = (uint64_t *)v522[308];
      unint64_t v525 = v522[309];
      if ((unint64_t)v524 >= v525)
      {
        unint64_t v526 = (uint64_t *)v522[307];
        uint64_t v527 = v524 - v526;
        if ((unint64_t)(v527 + 1) >> 61) {
          goto LABEL_776;
        }
        unint64_t v528 = v525 - (void)v526;
        unint64_t v529 = (uint64_t)(v525 - (void)v526) >> 2;
        if (v529 <= v527 + 1) {
          unint64_t v529 = v527 + 1;
        }
        if (v528 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v530 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v530 = v529;
        }
        if (v530)
        {
          unint64_t v531 = (char *)sub_5714((uint64_t)(v522 + 309), v530);
          unint64_t v524 = (uint64_t *)v522[308];
          unint64_t v526 = (uint64_t *)v522[307];
        }
        else
        {
          unint64_t v531 = 0;
        }
        int v539 = (uint64_t *)&v531[8 * v527];
        int v540 = &v531[8 * v530];
        *int v539 = v523;
        unsigned int v533 = v539 + 1;
        while (v524 != v526)
        {
          uint64_t v541 = *--v524;
          *--int v539 = v541;
        }
LABEL_739:
        v522[307] = v539;
        v522[308] = v533;
        v522[309] = v540;
        if (v526) {
          operator delete(v526);
        }
        goto LABEL_741;
      }
    }
    uint64_t *v524 = v523;
    unsigned int v533 = v524 + 1;
LABEL_741:
    v522[308] = v533;
LABEL_742:
    int v543 = 1 << *(_DWORD *)(v3 + 48);
    if (v543 == 2)
    {
      uint64_t v555 = a1[2];
      int v545 = *(void **)a1[1];
      uint64_t v546 = *(_DWORD *)(v555 + 28) & 0x3FFFFLL;
      unint64_t v547 = (uint64_t *)v545[311];
      unint64_t v556 = v545[312];
      if ((unint64_t)v547 >= v556)
      {
        unint64_t v549 = (uint64_t *)v545[310];
        uint64_t v558 = v547 - v549;
        if (!((unint64_t)(v558 + 1) >> 61))
        {
          unint64_t v559 = v556 - (void)v549;
          unint64_t v560 = (uint64_t)(v556 - (void)v549) >> 2;
          if (v560 <= v558 + 1) {
            unint64_t v560 = v558 + 1;
          }
          if (v559 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v561 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v561 = v560;
          }
          if (v561)
          {
            int v562 = (char *)sub_5714((uint64_t)(v545 + 312), v561);
            unint64_t v547 = (uint64_t *)v545[311];
            unint64_t v549 = (uint64_t *)v545[310];
          }
          else
          {
            int v562 = 0;
          }
          unint64_t v563 = (uint64_t *)&v562[8 * v558];
          unint64_t v564 = &v562[8 * v561];
          uint64_t *v563 = v546;
          int v557 = v563 + 1;
          while (v547 != v549)
          {
            uint64_t v566 = *--v547;
            *--unint64_t v563 = v566;
          }
          goto LABEL_771;
        }
LABEL_776:
        sub_566C();
      }
    }
    else
    {
      if (v543 != 1)
      {
LABEL_774:
        *a2 = 1;
        return;
      }
      uint64_t v544 = a1[2];
      int v545 = *(void **)a1[1];
      uint64_t v546 = *(_DWORD *)(v544 + 28) & 0x3FFFFLL;
      unint64_t v547 = (uint64_t *)v545[311];
      unint64_t v548 = v545[312];
      if ((unint64_t)v547 >= v548)
      {
        unint64_t v549 = (uint64_t *)v545[310];
        uint64_t v550 = v547 - v549;
        if (!((unint64_t)(v550 + 1) >> 61))
        {
          unint64_t v551 = v548 - (void)v549;
          unint64_t v552 = (uint64_t)(v548 - (void)v549) >> 2;
          if (v552 <= v550 + 1) {
            unint64_t v552 = v550 + 1;
          }
          if (v551 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v553 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v553 = v552;
          }
          if (v553)
          {
            unint64_t v554 = (char *)sub_5714((uint64_t)(v545 + 312), v553);
            unint64_t v547 = (uint64_t *)v545[311];
            unint64_t v549 = (uint64_t *)v545[310];
          }
          else
          {
            unint64_t v554 = 0;
          }
          unint64_t v563 = (uint64_t *)&v554[8 * v550];
          unint64_t v564 = &v554[8 * v553];
          uint64_t *v563 = v546;
          int v557 = v563 + 1;
          while (v547 != v549)
          {
            uint64_t v565 = *--v547;
            *--unint64_t v563 = v565;
          }
LABEL_771:
          v545[310] = v563;
          v545[311] = v557;
          v545[312] = v564;
          if (v549) {
            operator delete(v549);
          }
          goto LABEL_773;
        }
        goto LABEL_776;
      }
    }
    uint64_t *v547 = v546;
    int v557 = v547 + 1;
LABEL_773:
    v545[311] = v557;
    goto LABEL_774;
  }
  int v17 = 1 << *(_DWORD *)(v3 + 48);
  if (v17 == 2 || v17 == 1)
  {
    uint64_t v19 = (void *)a1[1];
    uint64_t v18 = a1[2];
    uint64_t v20 = (void *)*v19;
    *(void *)(v20[242] - 8) += *(unsigned __int16 *)(v18 + 60);
    *(void *)(v20[245] - 8) += *(unsigned __int16 *)(v18 + 22);
    *(void *)(v20[248] - 8) += *(_DWORD *)(v18 + 88) & 0x7FFF;
    *(void *)(v20[251] - 8) += *(void *)(v18 + 56) >> 17;
    *(void *)(v20[254] - 8) += *(unsigned __int16 *)(v18 + 80);
    *(void *)(v20[257] - 8) += *(unsigned __int16 *)(v18 + 40);
    *(void *)(v20[260] - 8) += *(_DWORD *)(v18 + 48) & 0x1FFFF;
    *(void *)(v20[263] - 8) += *(void *)(v18 + 56) & 0x1FFFFLL;
    *(void *)(v20[266] - 8) += *(_DWORD *)(v18 + 72) & 0x1FFFF;
    *(void *)(v20[269] - 8) += *(_DWORD *)(v18 + 32) & 0x1FFFF;
    uint64_t v21 = a1[2];
    unint64_t v22 = *(void **)a1[1];
    *(void *)(v22[272] - 8) += *(unsigned __int16 *)(v21 + 76);
    *(void *)(v22[275] - 8) += *(unsigned __int16 *)(v21 + 36);
    *(void *)(v22[278] - 8) += *(unsigned __int16 *)(v21 + 84);
    *(void *)(v22[281] - 8) += (*(unsigned __int16 *)(v21 + 44) | (*(unsigned __int8 *)(v21 + 46) << 16)) & 0x1FFFF;
    *(void *)(v22[284] - 8) += *(unsigned __int16 *)(v21 + 86);
    *(void *)(v22[287] - 8) += *(_DWORD *)(v21 + 52) & 0x1FFFF;
    *(void *)(v22[290] - 8) += *(unsigned __int16 *)(v21 + 82);
    *(void *)(v22[293] - 8) += *(unsigned __int16 *)(v21 + 42);
    *(void *)(v22[296] - 8) += *(unsigned __int16 *)(v21 + 78);
    *(void *)(v22[299] - 8) += *(unsigned __int16 *)(v21 + 38);
    uint64_t v23 = a1[2];
    uint64_t v24 = (void *)*v19;
    *(void *)(v24[302] - 8) += *(_DWORD *)(v23 + 64) & 0x3FFFF;
    *(void *)(v24[305] - 8) += ((*(unsigned int *)(v23 + 22) | ((unint64_t)*(unsigned __int8 *)(v23 + 26) << 32)) >> 16) & 0x3FFFF;
    *(void *)(v24[308] - 8) += *(_DWORD *)(v23 + 68) & 0x3FFFF;
    *(void *)(v24[311] - 8) += *(_DWORD *)(v23 + 28) & 0x3FFFF;
  }
}

void sub_CAEA8(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 == 1)
  {
    unsigned int v17 = *(_DWORD *)(v3 + 48);
    if (v17 <= 1)
    {
      uint64_t v18 = *(void *)(*(void *)a1[1] + 1480);
      *(void *)(v18 - 8) += *(unsigned __int16 *)(a1[2] + 64);
    }
    if (v17)
    {
      int v19 = 1 << v17;
      if (1 << v17 == 4)
      {
        uint64_t v32 = (_DWORD *)a1[2];
        int v33 = *(void **)a1[1];
        *(void *)(v33[221] - 8) += v32[10] & 0x3FFFF;
        *(void *)(v33[224] - 8) += v32[9] & 0x3FFFF;
        *(void *)(v33[227] - 8) += v32[8] & 0x3FFFF;
        uint64_t v34 = v32[7] & 0x3FFFF;
        uint64_t v35 = v33[230];
LABEL_38:
        *(void *)(v35 - 8) += v34;
        return;
      }
      if (v19 == 2)
      {
        int v37 = (void *)a1[1];
        uint64_t v36 = a1[2];
        uint64_t v38 = (void *)*v37;
        *(void *)(v38[194] - 8) += *(_DWORD *)(v36 + 24) & 0x3FFFF;
        *(void *)(v38[197] - 8) += ((unint64_t)*(unsigned int *)(v36 + 20) >> 1) & 0x3FFFF;
        *(void *)(v38[206] - 8) += *(unsigned __int16 *)(v36 + 66);
        *(void *)(v38[209] - 8) += *(_WORD *)(v36 + 48) & 0x7FFF;
        *(void *)(v38[212] - 8) += *(_WORD *)(v36 + 44) & 0x7FFF;
        *(void *)(v38[215] - 8) += *(_WORD *)(v36 + 50) & 0x7FFF;
        *(void *)(v38[218] - 8) += *(_WORD *)(v36 + 46) & 0x7FFF;
        *(void *)(v38[221] - 8) += *(_DWORD *)(v36 + 40) & 0x3FFFF;
        *(void *)(v38[224] - 8) += *(_DWORD *)(v36 + 36) & 0x3FFFF;
        *(void *)(v38[227] - 8) += *(_DWORD *)(v36 + 32) & 0x3FFFF;
        uint64_t v20 = a1[2];
        uint64_t v22 = *(_DWORD *)(v20 + 28) & 0x3FFFF;
        uint64_t v21 = (void *)*v37;
        uint64_t v23 = v21[230];
LABEL_37:
        *(void *)(v23 - 8) += v22;
        *(void *)(v21[233] - 8) += *(_DWORD *)(v20 + 52) & 0xFFFFF;
        *(void *)(v21[236] - 8) += *(_DWORD *)(v20 + 60) & 0x3FFFF;
        uint64_t v34 = *(_DWORD *)(v20 + 56) & 0xFFFFF;
        uint64_t v35 = v21[239];
        goto LABEL_38;
      }
      if (v19 != 1) {
        return;
      }
      uint64_t v20 = a1[2];
      uint64_t v21 = *(void **)a1[1];
    }
    else
    {
      uint64_t v20 = a1[2];
      uint64_t v21 = *(void **)a1[1];
      *(void *)(v21[188] - 8) += *(_DWORD *)(v20 + 32) & 0x3FFFF;
      *(void *)(v21[191] - 8) += *(_DWORD *)(v20 + 28) & 0x3FFFF;
    }
    *(void *)(v21[194] - 8) += *(_DWORD *)(v20 + 24) & 0x3FFFF;
    *(void *)(v21[197] - 8) += ((unint64_t)*(unsigned int *)(v20 + 20) >> 1) & 0x3FFFF;
    if (!v17)
    {
      *(void *)(v21[200] - 8) += *(_DWORD *)(v20 + 40) & 0x3FFFF;
      *(void *)(v21[203] - 8) += *(_DWORD *)(v20 + 36) & 0x3FFFF;
    }
    *(void *)(v21[206] - 8) += *(unsigned __int16 *)(v20 + 66);
    *(void *)(v21[209] - 8) += *(_WORD *)(v20 + 48) & 0x7FFF;
    *(void *)(v21[212] - 8) += *(_WORD *)(v20 + 44) & 0x7FFF;
    *(void *)(v21[215] - 8) += *(_WORD *)(v20 + 50) & 0x7FFF;
    uint64_t v22 = *(_WORD *)(v20 + 46) & 0x7FFF;
    uint64_t v23 = v21[218];
    goto LABEL_37;
  }
  if (*a2) {
    return;
  }
  int v5 = *(_DWORD *)(v3 + 48);
  if (1 << v5 == 2)
  {
    uint64_t v24 = a1[1];
    uint64_t v7 = *(void **)v24;
    uint64_t v8 = *(unsigned __int16 *)(a1[2] + 64);
    unint64_t v9 = *(char **)(*(void *)v24 + 1480);
    unint64_t v25 = *(void *)(*(void *)v24 + 1488);
    if ((unint64_t)v9 >= v25)
    {
      uint64_t v11 = (char *)v7[184];
      uint64_t v27 = (v9 - v11) >> 3;
      if ((unint64_t)(v27 + 1) >> 61) {
        goto LABEL_570;
      }
      unint64_t v28 = v25 - (void)v11;
      unint64_t v29 = (uint64_t)(v25 - (void)v11) >> 2;
      if (v29 <= v27 + 1) {
        unint64_t v29 = v27 + 1;
      }
      if (v28 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v30 = v29;
      }
      if (v30)
      {
        unint64_t v31 = (char *)sub_5714((uint64_t)(v7 + 186), v30);
        unint64_t v9 = (char *)v7[185];
        uint64_t v11 = (char *)v7[184];
      }
      else
      {
        unint64_t v31 = 0;
      }
      uint64_t v39 = &v31[8 * v27];
      uint64_t v40 = &v31[8 * v30];
      *(void *)uint64_t v39 = v8;
      unint64_t v26 = v39 + 8;
      while (v9 != v11)
      {
        uint64_t v42 = *((void *)v9 - 1);
        v9 -= 8;
        *((void *)v39 - 1) = v42;
        v39 -= 8;
      }
      goto LABEL_47;
    }
LABEL_26:
    *(void *)unint64_t v9 = v8;
    unint64_t v26 = v9 + 8;
LABEL_49:
    v7[185] = v26;
    int v5 = *(_DWORD *)(v3 + 48);
    goto LABEL_50;
  }
  if (1 << v5 == 1)
  {
    uint64_t v6 = a1[1];
    uint64_t v7 = *(void **)v6;
    uint64_t v8 = *(unsigned __int16 *)(a1[2] + 64);
    unint64_t v9 = *(char **)(*(void *)v6 + 1480);
    unint64_t v10 = *(void *)(*(void *)v6 + 1488);
    if ((unint64_t)v9 >= v10)
    {
      uint64_t v11 = (char *)v7[184];
      uint64_t v12 = (v9 - v11) >> 3;
      if ((unint64_t)(v12 + 1) >> 61) {
        goto LABEL_570;
      }
      unint64_t v13 = v10 - (void)v11;
      unint64_t v14 = (uint64_t)(v10 - (void)v11) >> 2;
      if (v14 <= v12 + 1) {
        unint64_t v14 = v12 + 1;
      }
      if (v13 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v14;
      }
      if (v15)
      {
        int v16 = (char *)sub_5714((uint64_t)(v7 + 186), v15);
        unint64_t v9 = (char *)v7[185];
        uint64_t v11 = (char *)v7[184];
      }
      else
      {
        int v16 = 0;
      }
      uint64_t v39 = &v16[8 * v12];
      uint64_t v40 = &v16[8 * v15];
      *(void *)uint64_t v39 = v8;
      unint64_t v26 = v39 + 8;
      while (v9 != v11)
      {
        uint64_t v41 = *((void *)v9 - 1);
        v9 -= 8;
        *((void *)v39 - 1) = v41;
        v39 -= 8;
      }
LABEL_47:
      v7[184] = v39;
      v7[185] = v26;
      v7[186] = v40;
      if (v11) {
        operator delete(v11);
      }
      goto LABEL_49;
    }
    goto LABEL_26;
  }
LABEL_50:
  if (!v5)
  {
    unint64_t v43 = *(void **)a1[1];
    uint64_t v44 = *(_DWORD *)(a1[2] + 32) & 0x3FFFFLL;
    unint64_t v45 = (uint64_t *)v43[188];
    unint64_t v46 = v43[189];
    if ((unint64_t)v45 >= v46)
    {
      unint64_t v48 = (uint64_t *)v43[187];
      uint64_t v49 = v45 - v48;
      if ((unint64_t)(v49 + 1) >> 61) {
        goto LABEL_570;
      }
      unint64_t v50 = v46 - (void)v48;
      unint64_t v51 = (uint64_t)(v46 - (void)v48) >> 2;
      if (v51 <= v49 + 1) {
        unint64_t v51 = v49 + 1;
      }
      if (v50 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v52 = v51;
      }
      if (v52)
      {
        unint64_t v53 = (char *)sub_5714((uint64_t)(v43 + 189), v52);
        unint64_t v45 = (uint64_t *)v43[188];
        unint64_t v48 = (uint64_t *)v43[187];
      }
      else
      {
        unint64_t v53 = 0;
      }
      unint64_t v54 = (uint64_t *)&v53[8 * v49];
      unint64_t v55 = &v53[8 * v52];
      uint64_t *v54 = v44;
      unint64_t v47 = v54 + 1;
      while (v45 != v48)
      {
        uint64_t v56 = *--v45;
        *--unint64_t v54 = v56;
      }
      v43[187] = v54;
      v43[188] = v47;
      v43[189] = v55;
      if (v48) {
        operator delete(v48);
      }
    }
    else
    {
      *unint64_t v45 = v44;
      unint64_t v47 = v45 + 1;
    }
    v43[188] = v47;
    int v5 = *(_DWORD *)(v3 + 48);
    if (!v5)
    {
      uint64_t v57 = *(void **)a1[1];
      uint64_t v58 = *(_DWORD *)(a1[2] + 28) & 0x3FFFFLL;
      uint64_t v59 = (uint64_t *)v57[191];
      unint64_t v60 = v57[192];
      if ((unint64_t)v59 >= v60)
      {
        unint64_t v62 = (uint64_t *)v57[190];
        uint64_t v63 = v59 - v62;
        if ((unint64_t)(v63 + 1) >> 61) {
          goto LABEL_570;
        }
        unint64_t v64 = v60 - (void)v62;
        unint64_t v65 = (uint64_t)(v60 - (void)v62) >> 2;
        if (v65 <= v63 + 1) {
          unint64_t v65 = v63 + 1;
        }
        if (v64 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v66 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v66 = v65;
        }
        if (v66)
        {
          uint64_t v67 = (char *)sub_5714((uint64_t)(v57 + 192), v66);
          uint64_t v59 = (uint64_t *)v57[191];
          unint64_t v62 = (uint64_t *)v57[190];
        }
        else
        {
          uint64_t v67 = 0;
        }
        unint64_t v68 = (uint64_t *)&v67[8 * v63];
        unint64_t v69 = &v67[8 * v66];
        uint64_t *v68 = v58;
        int v61 = v68 + 1;
        while (v59 != v62)
        {
          uint64_t v70 = *--v59;
          *--unint64_t v68 = v70;
        }
        v57[190] = v68;
        v57[191] = v61;
        v57[192] = v69;
        if (v62) {
          operator delete(v62);
        }
      }
      else
      {
        *uint64_t v59 = v58;
        int v61 = v59 + 1;
      }
      v57[191] = v61;
      int v5 = *(_DWORD *)(v3 + 48);
    }
  }
  int v71 = 1 << v5;
  if (v71 == 2)
  {
    unint64_t v72 = *(void **)a1[1];
    uint64_t v73 = *(_DWORD *)(a1[2] + 24) & 0x3FFFFLL;
    uint64_t v74 = (uint64_t *)v72[194];
    unint64_t v82 = v72[195];
    if ((unint64_t)v74 >= v82)
    {
      unint64_t v76 = (uint64_t *)v72[193];
      uint64_t v84 = v74 - v76;
      if ((unint64_t)(v84 + 1) >> 61) {
        goto LABEL_570;
      }
      unint64_t v85 = v82 - (void)v76;
      unint64_t v86 = (uint64_t)(v82 - (void)v76) >> 2;
      if (v86 <= v84 + 1) {
        unint64_t v86 = v84 + 1;
      }
      if (v85 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v87 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v87 = v86;
      }
      if (v87)
      {
        unint64_t v88 = (char *)sub_5714((uint64_t)(v72 + 195), v87);
        uint64_t v74 = (uint64_t *)v72[194];
        unint64_t v76 = (uint64_t *)v72[193];
      }
      else
      {
        unint64_t v88 = 0;
      }
      uint64_t v89 = (uint64_t *)&v88[8 * v84];
      unint64_t v90 = &v88[8 * v87];
      *uint64_t v89 = v73;
      int v83 = v89 + 1;
      while (v74 != v76)
      {
        uint64_t v92 = *--v74;
        *--uint64_t v89 = v92;
      }
      goto LABEL_114;
    }
  }
  else
  {
    if (v71 != 1) {
      goto LABEL_117;
    }
    unint64_t v72 = *(void **)a1[1];
    uint64_t v73 = *(_DWORD *)(a1[2] + 24) & 0x3FFFFLL;
    uint64_t v74 = (uint64_t *)v72[194];
    unint64_t v75 = v72[195];
    if ((unint64_t)v74 >= v75)
    {
      unint64_t v76 = (uint64_t *)v72[193];
      uint64_t v77 = v74 - v76;
      if ((unint64_t)(v77 + 1) >> 61) {
        goto LABEL_570;
      }
      unint64_t v78 = v75 - (void)v76;
      unint64_t v79 = (uint64_t)(v75 - (void)v76) >> 2;
      if (v79 <= v77 + 1) {
        unint64_t v79 = v77 + 1;
      }
      if (v78 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v80 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v80 = v79;
      }
      if (v80)
      {
        uint64_t v81 = (char *)sub_5714((uint64_t)(v72 + 195), v80);
        uint64_t v74 = (uint64_t *)v72[194];
        unint64_t v76 = (uint64_t *)v72[193];
      }
      else
      {
        uint64_t v81 = 0;
      }
      uint64_t v89 = (uint64_t *)&v81[8 * v77];
      unint64_t v90 = &v81[8 * v80];
      *uint64_t v89 = v73;
      int v83 = v89 + 1;
      while (v74 != v76)
      {
        uint64_t v91 = *--v74;
        *--uint64_t v89 = v91;
      }
LABEL_114:
      v72[193] = v89;
      v72[194] = v83;
      v72[195] = v90;
      if (v76) {
        operator delete(v76);
      }
      goto LABEL_116;
    }
  }
  *uint64_t v74 = v73;
  int v83 = v74 + 1;
LABEL_116:
  v72[194] = v83;
LABEL_117:
  int v93 = *(_DWORD *)(v3 + 48);
  if (1 << v93 == 2)
  {
    unint64_t v94 = *(void **)a1[1];
    unint64_t v95 = ((unint64_t)*(unsigned int *)(a1[2] + 20) >> 1) & 0x3FFFF;
    uint64_t v96 = (unint64_t *)v94[197];
    unint64_t v104 = v94[198];
    if ((unint64_t)v96 >= v104)
    {
      unint64_t v98 = (unint64_t *)v94[196];
      uint64_t v106 = v96 - v98;
      if ((unint64_t)(v106 + 1) >> 61) {
        goto LABEL_570;
      }
      unint64_t v107 = v104 - (void)v98;
      unint64_t v108 = (uint64_t)(v104 - (void)v98) >> 2;
      if (v108 <= v106 + 1) {
        unint64_t v108 = v106 + 1;
      }
      if (v107 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v109 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v109 = v108;
      }
      if (v109)
      {
        unint64_t v110 = (char *)sub_5714((uint64_t)(v94 + 198), v109);
        uint64_t v96 = (unint64_t *)v94[197];
        unint64_t v98 = (unint64_t *)v94[196];
      }
      else
      {
        unint64_t v110 = 0;
      }
      unint64_t v111 = (unint64_t *)&v110[8 * v106];
      uint64_t v112 = &v110[8 * v109];
      unint64_t *v111 = v95;
      int v105 = v111 + 1;
      while (v96 != v98)
      {
        unint64_t v114 = *--v96;
        *--unint64_t v111 = v114;
      }
      goto LABEL_146;
    }
LABEL_129:
    *uint64_t v96 = v95;
    int v105 = v96 + 1;
LABEL_148:
    v94[197] = v105;
    int v93 = *(_DWORD *)(v3 + 48);
    goto LABEL_149;
  }
  if (1 << v93 == 1)
  {
    unint64_t v94 = *(void **)a1[1];
    unint64_t v95 = ((unint64_t)*(unsigned int *)(a1[2] + 20) >> 1) & 0x3FFFF;
    uint64_t v96 = (unint64_t *)v94[197];
    unint64_t v97 = v94[198];
    if ((unint64_t)v96 >= v97)
    {
      unint64_t v98 = (unint64_t *)v94[196];
      uint64_t v99 = v96 - v98;
      if ((unint64_t)(v99 + 1) >> 61) {
        goto LABEL_570;
      }
      unint64_t v100 = v97 - (void)v98;
      unint64_t v101 = (uint64_t)(v97 - (void)v98) >> 2;
      if (v101 <= v99 + 1) {
        unint64_t v101 = v99 + 1;
      }
      if (v100 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v102 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v102 = v101;
      }
      if (v102)
      {
        uint64_t v103 = (char *)sub_5714((uint64_t)(v94 + 198), v102);
        uint64_t v96 = (unint64_t *)v94[197];
        unint64_t v98 = (unint64_t *)v94[196];
      }
      else
      {
        uint64_t v103 = 0;
      }
      unint64_t v111 = (unint64_t *)&v103[8 * v99];
      uint64_t v112 = &v103[8 * v102];
      unint64_t *v111 = v95;
      int v105 = v111 + 1;
      while (v96 != v98)
      {
        unint64_t v113 = *--v96;
        *--unint64_t v111 = v113;
      }
LABEL_146:
      v94[196] = v111;
      v94[197] = v105;
      v94[198] = v112;
      if (v98) {
        operator delete(v98);
      }
      goto LABEL_148;
    }
    goto LABEL_129;
  }
LABEL_149:
  if (!v93)
  {
    unint64_t v115 = *(void **)a1[1];
    uint64_t v116 = *(_DWORD *)(a1[2] + 40) & 0x3FFFFLL;
    uint64_t v117 = (uint64_t *)v115[200];
    unint64_t v118 = v115[201];
    if ((unint64_t)v117 >= v118)
    {
      uint64_t v120 = (uint64_t *)v115[199];
      uint64_t v121 = v117 - v120;
      if ((unint64_t)(v121 + 1) >> 61) {
        goto LABEL_570;
      }
      unint64_t v122 = v118 - (void)v120;
      unint64_t v123 = (uint64_t)(v118 - (void)v120) >> 2;
      if (v123 <= v121 + 1) {
        unint64_t v123 = v121 + 1;
      }
      if (v122 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v124 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v124 = v123;
      }
      if (v124)
      {
        unint64_t v125 = (char *)sub_5714((uint64_t)(v115 + 201), v124);
        uint64_t v117 = (uint64_t *)v115[200];
        uint64_t v120 = (uint64_t *)v115[199];
      }
      else
      {
        unint64_t v125 = 0;
      }
      unint64_t v126 = (uint64_t *)&v125[8 * v121];
      uint64_t v127 = &v125[8 * v124];
      uint64_t *v126 = v116;
      uint64_t v119 = v126 + 1;
      while (v117 != v120)
      {
        uint64_t v128 = *--v117;
        *--unint64_t v126 = v128;
      }
      v115[199] = v126;
      v115[200] = v119;
      v115[201] = v127;
      if (v120) {
        operator delete(v120);
      }
    }
    else
    {
      *uint64_t v117 = v116;
      uint64_t v119 = v117 + 1;
    }
    v115[200] = v119;
    int v93 = *(_DWORD *)(v3 + 48);
    if (!v93)
    {
      int v129 = *(void **)a1[1];
      uint64_t v130 = *(_DWORD *)(a1[2] + 36) & 0x3FFFFLL;
      uint64_t v131 = (uint64_t *)v129[203];
      unint64_t v132 = v129[204];
      if ((unint64_t)v131 >= v132)
      {
        unint64_t v134 = (uint64_t *)v129[202];
        uint64_t v135 = v131 - v134;
        if ((unint64_t)(v135 + 1) >> 61) {
          goto LABEL_570;
        }
        unint64_t v136 = v132 - (void)v134;
        unint64_t v137 = (uint64_t)(v132 - (void)v134) >> 2;
        if (v137 <= v135 + 1) {
          unint64_t v137 = v135 + 1;
        }
        if (v136 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v138 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v138 = v137;
        }
        if (v138)
        {
          unint64_t v139 = (char *)sub_5714((uint64_t)(v129 + 204), v138);
          uint64_t v131 = (uint64_t *)v129[203];
          unint64_t v134 = (uint64_t *)v129[202];
        }
        else
        {
          unint64_t v139 = 0;
        }
        unint64_t v140 = (uint64_t *)&v139[8 * v135];
        uint64_t v141 = &v139[8 * v138];
        *unint64_t v140 = v130;
        unint64_t v133 = v140 + 1;
        while (v131 != v134)
        {
          uint64_t v142 = *--v131;
          *--unint64_t v140 = v142;
        }
        v129[202] = v140;
        v129[203] = v133;
        v129[204] = v141;
        if (v134) {
          operator delete(v134);
        }
      }
      else
      {
        uint64_t *v131 = v130;
        unint64_t v133 = v131 + 1;
      }
      v129[203] = v133;
      int v93 = *(_DWORD *)(v3 + 48);
    }
  }
  int v143 = 1 << v93;
  if (v143 == 2)
  {
    uint64_t v155 = a1[1];
    unint64_t v145 = *(void **)v155;
    uint64_t v146 = *(unsigned __int16 *)(a1[2] + 66);
    unint64_t v147 = *(char **)(*(void *)v155 + 1648);
    unint64_t v156 = *(void *)(*(void *)v155 + 1656);
    if ((unint64_t)v147 >= v156)
    {
      uint64_t v149 = (char *)v145[205];
      uint64_t v158 = (v147 - v149) >> 3;
      if ((unint64_t)(v158 + 1) >> 61) {
        goto LABEL_570;
      }
      unint64_t v159 = v156 - (void)v149;
      unint64_t v160 = (uint64_t)(v156 - (void)v149) >> 2;
      if (v160 <= v158 + 1) {
        unint64_t v160 = v158 + 1;
      }
      if (v159 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v161 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v161 = v160;
      }
      if (v161)
      {
        unint64_t v162 = (char *)sub_5714((uint64_t)(v145 + 207), v161);
        unint64_t v147 = (char *)v145[206];
        uint64_t v149 = (char *)v145[205];
      }
      else
      {
        unint64_t v162 = 0;
      }
      uint64_t v163 = &v162[8 * v158];
      unint64_t v164 = &v162[8 * v161];
      *(void *)uint64_t v163 = v146;
      unint64_t v157 = v163 + 8;
      while (v147 != v149)
      {
        uint64_t v166 = *((void *)v147 - 1);
        v147 -= 8;
        *((void *)v163 - 1) = v166;
        v163 -= 8;
      }
      goto LABEL_213;
    }
  }
  else
  {
    if (v143 != 1) {
      goto LABEL_216;
    }
    uint64_t v144 = a1[1];
    unint64_t v145 = *(void **)v144;
    uint64_t v146 = *(unsigned __int16 *)(a1[2] + 66);
    unint64_t v147 = *(char **)(*(void *)v144 + 1648);
    unint64_t v148 = *(void *)(*(void *)v144 + 1656);
    if ((unint64_t)v147 >= v148)
    {
      uint64_t v149 = (char *)v145[205];
      uint64_t v150 = (v147 - v149) >> 3;
      if ((unint64_t)(v150 + 1) >> 61) {
        goto LABEL_570;
      }
      unint64_t v151 = v148 - (void)v149;
      unint64_t v152 = (uint64_t)(v148 - (void)v149) >> 2;
      if (v152 <= v150 + 1) {
        unint64_t v152 = v150 + 1;
      }
      if (v151 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v153 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v153 = v152;
      }
      if (v153)
      {
        unint64_t v154 = (char *)sub_5714((uint64_t)(v145 + 207), v153);
        unint64_t v147 = (char *)v145[206];
        uint64_t v149 = (char *)v145[205];
      }
      else
      {
        unint64_t v154 = 0;
      }
      uint64_t v163 = &v154[8 * v150];
      unint64_t v164 = &v154[8 * v153];
      *(void *)uint64_t v163 = v146;
      unint64_t v157 = v163 + 8;
      while (v147 != v149)
      {
        uint64_t v165 = *((void *)v147 - 1);
        v147 -= 8;
        *((void *)v163 - 1) = v165;
        v163 -= 8;
      }
LABEL_213:
      v145[205] = v163;
      v145[206] = v157;
      v145[207] = v164;
      if (v149) {
        operator delete(v149);
      }
      goto LABEL_215;
    }
  }
  *(void *)unint64_t v147 = v146;
  unint64_t v157 = v147 + 8;
LABEL_215:
  v145[206] = v157;
LABEL_216:
  int v167 = 1 << *(_DWORD *)(v3 + 48);
  if (v167 == 2)
  {
    unint64_t v168 = *(void **)a1[1];
    uint64_t v169 = *(_WORD *)(a1[2] + 48) & 0x7FFF;
    unint64_t v170 = (char *)v168[209];
    unint64_t v178 = v168[210];
    if ((unint64_t)v170 >= v178)
    {
      unint64_t v172 = (char *)v168[208];
      uint64_t v180 = (v170 - v172) >> 3;
      if ((unint64_t)(v180 + 1) >> 61) {
        goto LABEL_570;
      }
      unint64_t v181 = v178 - (void)v172;
      unint64_t v182 = (uint64_t)(v178 - (void)v172) >> 2;
      if (v182 <= v180 + 1) {
        unint64_t v182 = v180 + 1;
      }
      if (v181 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v183 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v183 = v182;
      }
      if (v183)
      {
        unint64_t v184 = (char *)sub_5714((uint64_t)(v168 + 210), v183);
        unint64_t v170 = (char *)v168[209];
        unint64_t v172 = (char *)v168[208];
      }
      else
      {
        unint64_t v184 = 0;
      }
      uint64_t v185 = &v184[8 * v180];
      unint64_t v186 = &v184[8 * v183];
      *(void *)uint64_t v185 = v169;
      unint64_t v179 = v185 + 8;
      while (v170 != v172)
      {
        uint64_t v188 = *((void *)v170 - 1);
        v170 -= 8;
        *((void *)v185 - 1) = v188;
        v185 -= 8;
      }
      goto LABEL_245;
    }
  }
  else
  {
    if (v167 != 1) {
      goto LABEL_248;
    }
    unint64_t v168 = *(void **)a1[1];
    uint64_t v169 = *(_WORD *)(a1[2] + 48) & 0x7FFF;
    unint64_t v170 = (char *)v168[209];
    unint64_t v171 = v168[210];
    if ((unint64_t)v170 >= v171)
    {
      unint64_t v172 = (char *)v168[208];
      uint64_t v173 = (v170 - v172) >> 3;
      if ((unint64_t)(v173 + 1) >> 61) {
        goto LABEL_570;
      }
      unint64_t v174 = v171 - (void)v172;
      unint64_t v175 = (uint64_t)(v171 - (void)v172) >> 2;
      if (v175 <= v173 + 1) {
        unint64_t v175 = v173 + 1;
      }
      if (v174 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v176 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v176 = v175;
      }
      if (v176)
      {
        uint64_t v177 = (char *)sub_5714((uint64_t)(v168 + 210), v176);
        unint64_t v170 = (char *)v168[209];
        unint64_t v172 = (char *)v168[208];
      }
      else
      {
        uint64_t v177 = 0;
      }
      uint64_t v185 = &v177[8 * v173];
      unint64_t v186 = &v177[8 * v176];
      *(void *)uint64_t v185 = v169;
      unint64_t v179 = v185 + 8;
      while (v170 != v172)
      {
        uint64_t v187 = *((void *)v170 - 1);
        v170 -= 8;
        *((void *)v185 - 1) = v187;
        v185 -= 8;
      }
LABEL_245:
      v168[208] = v185;
      v168[209] = v179;
      v168[210] = v186;
      if (v172) {
        operator delete(v172);
      }
      goto LABEL_247;
    }
  }
  *(void *)unint64_t v170 = v169;
  unint64_t v179 = v170 + 8;
LABEL_247:
  v168[209] = v179;
LABEL_248:
  int v189 = 1 << *(_DWORD *)(v3 + 48);
  if (v189 == 2)
  {
    unint64_t v190 = *(void **)a1[1];
    uint64_t v191 = *(_WORD *)(a1[2] + 44) & 0x7FFF;
    unsigned int v192 = (char *)v190[212];
    unint64_t v200 = v190[213];
    if ((unint64_t)v192 >= v200)
    {
      unint64_t v194 = (char *)v190[211];
      uint64_t v202 = (v192 - v194) >> 3;
      if ((unint64_t)(v202 + 1) >> 61) {
        goto LABEL_570;
      }
      unint64_t v203 = v200 - (void)v194;
      unint64_t v204 = (uint64_t)(v200 - (void)v194) >> 2;
      if (v204 <= v202 + 1) {
        unint64_t v204 = v202 + 1;
      }
      if (v203 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v205 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v205 = v204;
      }
      if (v205)
      {
        unint64_t v206 = (char *)sub_5714((uint64_t)(v190 + 213), v205);
        unsigned int v192 = (char *)v190[212];
        unint64_t v194 = (char *)v190[211];
      }
      else
      {
        unint64_t v206 = 0;
      }
      uint64_t v207 = &v206[8 * v202];
      unint64_t v208 = &v206[8 * v205];
      *(void *)uint64_t v207 = v191;
      unint64_t v201 = v207 + 8;
      while (v192 != v194)
      {
        uint64_t v210 = *((void *)v192 - 1);
        v192 -= 8;
        *((void *)v207 - 1) = v210;
        v207 -= 8;
      }
      goto LABEL_277;
    }
  }
  else
  {
    if (v189 != 1) {
      goto LABEL_280;
    }
    unint64_t v190 = *(void **)a1[1];
    uint64_t v191 = *(_WORD *)(a1[2] + 44) & 0x7FFF;
    unsigned int v192 = (char *)v190[212];
    unint64_t v193 = v190[213];
    if ((unint64_t)v192 >= v193)
    {
      unint64_t v194 = (char *)v190[211];
      uint64_t v195 = (v192 - v194) >> 3;
      if ((unint64_t)(v195 + 1) >> 61) {
        goto LABEL_570;
      }
      unint64_t v196 = v193 - (void)v194;
      unint64_t v197 = (uint64_t)(v193 - (void)v194) >> 2;
      if (v197 <= v195 + 1) {
        unint64_t v197 = v195 + 1;
      }
      if (v196 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v198 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v198 = v197;
      }
      if (v198)
      {
        uint64_t v199 = (char *)sub_5714((uint64_t)(v190 + 213), v198);
        unsigned int v192 = (char *)v190[212];
        unint64_t v194 = (char *)v190[211];
      }
      else
      {
        uint64_t v199 = 0;
      }
      uint64_t v207 = &v199[8 * v195];
      unint64_t v208 = &v199[8 * v198];
      *(void *)uint64_t v207 = v191;
      unint64_t v201 = v207 + 8;
      while (v192 != v194)
      {
        uint64_t v209 = *((void *)v192 - 1);
        v192 -= 8;
        *((void *)v207 - 1) = v209;
        v207 -= 8;
      }
LABEL_277:
      v190[211] = v207;
      v190[212] = v201;
      v190[213] = v208;
      if (v194) {
        operator delete(v194);
      }
      goto LABEL_279;
    }
  }
  *(void *)unsigned int v192 = v191;
  unint64_t v201 = v192 + 8;
LABEL_279:
  v190[212] = v201;
LABEL_280:
  int v211 = 1 << *(_DWORD *)(v3 + 48);
  if (v211 == 2)
  {
    unint64_t v212 = *(void **)a1[1];
    uint64_t v213 = *(_WORD *)(a1[2] + 50) & 0x7FFF;
    unint64_t v214 = (char *)v212[215];
    unint64_t v222 = v212[216];
    if ((unint64_t)v214 >= v222)
    {
      unint64_t v216 = (char *)v212[214];
      uint64_t v224 = (v214 - v216) >> 3;
      if ((unint64_t)(v224 + 1) >> 61) {
        goto LABEL_570;
      }
      unint64_t v225 = v222 - (void)v216;
      unint64_t v226 = (uint64_t)(v222 - (void)v216) >> 2;
      if (v226 <= v224 + 1) {
        unint64_t v226 = v224 + 1;
      }
      if (v225 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v227 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v227 = v226;
      }
      if (v227)
      {
        unint64_t v228 = (char *)sub_5714((uint64_t)(v212 + 216), v227);
        unint64_t v214 = (char *)v212[215];
        unint64_t v216 = (char *)v212[214];
      }
      else
      {
        unint64_t v228 = 0;
      }
      uint64_t v229 = &v228[8 * v224];
      unint64_t v230 = &v228[8 * v227];
      *(void *)uint64_t v229 = v213;
      unint64_t v223 = v229 + 8;
      while (v214 != v216)
      {
        uint64_t v232 = *((void *)v214 - 1);
        v214 -= 8;
        *((void *)v229 - 1) = v232;
        v229 -= 8;
      }
      goto LABEL_309;
    }
  }
  else
  {
    if (v211 != 1) {
      goto LABEL_312;
    }
    unint64_t v212 = *(void **)a1[1];
    uint64_t v213 = *(_WORD *)(a1[2] + 50) & 0x7FFF;
    unint64_t v214 = (char *)v212[215];
    unint64_t v215 = v212[216];
    if ((unint64_t)v214 >= v215)
    {
      unint64_t v216 = (char *)v212[214];
      uint64_t v217 = (v214 - v216) >> 3;
      if ((unint64_t)(v217 + 1) >> 61) {
        goto LABEL_570;
      }
      unint64_t v218 = v215 - (void)v216;
      unint64_t v219 = (uint64_t)(v215 - (void)v216) >> 2;
      if (v219 <= v217 + 1) {
        unint64_t v219 = v217 + 1;
      }
      if (v218 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v220 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v220 = v219;
      }
      if (v220)
      {
        uint64_t v221 = (char *)sub_5714((uint64_t)(v212 + 216), v220);
        unint64_t v214 = (char *)v212[215];
        unint64_t v216 = (char *)v212[214];
      }
      else
      {
        uint64_t v221 = 0;
      }
      uint64_t v229 = &v221[8 * v217];
      unint64_t v230 = &v221[8 * v220];
      *(void *)uint64_t v229 = v213;
      unint64_t v223 = v229 + 8;
      while (v214 != v216)
      {
        uint64_t v231 = *((void *)v214 - 1);
        v214 -= 8;
        *((void *)v229 - 1) = v231;
        v229 -= 8;
      }
LABEL_309:
      v212[214] = v229;
      v212[215] = v223;
      v212[216] = v230;
      if (v216) {
        operator delete(v216);
      }
      goto LABEL_311;
    }
  }
  *(void *)unint64_t v214 = v213;
  unint64_t v223 = v214 + 8;
LABEL_311:
  v212[215] = v223;
LABEL_312:
  int v233 = 1 << *(_DWORD *)(v3 + 48);
  if (v233 == 2)
  {
    unint64_t v234 = *(void **)a1[1];
    uint64_t v235 = *(_WORD *)(a1[2] + 46) & 0x7FFF;
    unint64_t v236 = (char *)v234[218];
    unint64_t v244 = v234[219];
    if ((unint64_t)v236 >= v244)
    {
      unint64_t v238 = (char *)v234[217];
      uint64_t v246 = (v236 - v238) >> 3;
      if ((unint64_t)(v246 + 1) >> 61) {
        goto LABEL_570;
      }
      unint64_t v247 = v244 - (void)v238;
      unint64_t v248 = (uint64_t)(v244 - (void)v238) >> 2;
      if (v248 <= v246 + 1) {
        unint64_t v248 = v246 + 1;
      }
      if (v247 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v249 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v249 = v248;
      }
      if (v249)
      {
        unint64_t v250 = (char *)sub_5714((uint64_t)(v234 + 219), v249);
        unint64_t v236 = (char *)v234[218];
        unint64_t v238 = (char *)v234[217];
      }
      else
      {
        unint64_t v250 = 0;
      }
      unint64_t v251 = &v250[8 * v246];
      uint64_t v252 = &v250[8 * v249];
      *(void *)unint64_t v251 = v235;
      unint64_t v245 = v251 + 8;
      while (v236 != v238)
      {
        uint64_t v254 = *((void *)v236 - 1);
        v236 -= 8;
        *((void *)v251 - 1) = v254;
        v251 -= 8;
      }
      goto LABEL_341;
    }
  }
  else
  {
    if (v233 != 1) {
      goto LABEL_344;
    }
    unint64_t v234 = *(void **)a1[1];
    uint64_t v235 = *(_WORD *)(a1[2] + 46) & 0x7FFF;
    unint64_t v236 = (char *)v234[218];
    unint64_t v237 = v234[219];
    if ((unint64_t)v236 >= v237)
    {
      unint64_t v238 = (char *)v234[217];
      uint64_t v239 = (v236 - v238) >> 3;
      if ((unint64_t)(v239 + 1) >> 61) {
        goto LABEL_570;
      }
      unint64_t v240 = v237 - (void)v238;
      unint64_t v241 = (uint64_t)(v237 - (void)v238) >> 2;
      if (v241 <= v239 + 1) {
        unint64_t v241 = v239 + 1;
      }
      if (v240 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v242 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v242 = v241;
      }
      if (v242)
      {
        unint64_t v243 = (char *)sub_5714((uint64_t)(v234 + 219), v242);
        unint64_t v236 = (char *)v234[218];
        unint64_t v238 = (char *)v234[217];
      }
      else
      {
        unint64_t v243 = 0;
      }
      unint64_t v251 = &v243[8 * v239];
      uint64_t v252 = &v243[8 * v242];
      *(void *)unint64_t v251 = v235;
      unint64_t v245 = v251 + 8;
      while (v236 != v238)
      {
        uint64_t v253 = *((void *)v236 - 1);
        v236 -= 8;
        *((void *)v251 - 1) = v253;
        v251 -= 8;
      }
LABEL_341:
      v234[217] = v251;
      v234[218] = v245;
      v234[219] = v252;
      if (v238) {
        operator delete(v238);
      }
      goto LABEL_343;
    }
  }
  *(void *)unint64_t v236 = v235;
  unint64_t v245 = v236 + 8;
LABEL_343:
  v234[218] = v245;
LABEL_344:
  int v255 = 1 << *(_DWORD *)(v3 + 48);
  if (v255 == 4)
  {
    uint64_t v256 = *(void **)a1[1];
    uint64_t v257 = *(_DWORD *)(a1[2] + 40) & 0x3FFFFLL;
    unint64_t v258 = (uint64_t *)v256[221];
    unint64_t v266 = v256[222];
    if ((unint64_t)v258 >= v266)
    {
      unint64_t v260 = (uint64_t *)v256[220];
      uint64_t v268 = v258 - v260;
      if ((unint64_t)(v268 + 1) >> 61) {
        goto LABEL_570;
      }
      unint64_t v269 = v266 - (void)v260;
      unint64_t v270 = (uint64_t)(v266 - (void)v260) >> 2;
      if (v270 <= v268 + 1) {
        unint64_t v270 = v268 + 1;
      }
      if (v269 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v271 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v271 = v270;
      }
      if (v271)
      {
        uint64_t v272 = (char *)sub_5714((uint64_t)(v256 + 222), v271);
        unint64_t v258 = (uint64_t *)v256[221];
        unint64_t v260 = (uint64_t *)v256[220];
      }
      else
      {
        uint64_t v272 = 0;
      }
      unint64_t v273 = (uint64_t *)&v272[8 * v268];
      unint64_t v274 = &v272[8 * v271];
      *unint64_t v273 = v257;
      unint64_t v267 = v273 + 1;
      while (v258 != v260)
      {
        uint64_t v276 = *--v258;
        *--unint64_t v273 = v276;
      }
      goto LABEL_373;
    }
  }
  else
  {
    if (v255 != 2) {
      goto LABEL_376;
    }
    uint64_t v256 = *(void **)a1[1];
    uint64_t v257 = *(_DWORD *)(a1[2] + 40) & 0x3FFFFLL;
    unint64_t v258 = (uint64_t *)v256[221];
    unint64_t v259 = v256[222];
    if ((unint64_t)v258 >= v259)
    {
      unint64_t v260 = (uint64_t *)v256[220];
      uint64_t v261 = v258 - v260;
      if ((unint64_t)(v261 + 1) >> 61) {
        goto LABEL_570;
      }
      unint64_t v262 = v259 - (void)v260;
      unint64_t v263 = (uint64_t)(v259 - (void)v260) >> 2;
      if (v263 <= v261 + 1) {
        unint64_t v263 = v261 + 1;
      }
      if (v262 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v264 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v264 = v263;
      }
      if (v264)
      {
        int v265 = (char *)sub_5714((uint64_t)(v256 + 222), v264);
        unint64_t v258 = (uint64_t *)v256[221];
        unint64_t v260 = (uint64_t *)v256[220];
      }
      else
      {
        int v265 = 0;
      }
      unint64_t v273 = (uint64_t *)&v265[8 * v261];
      unint64_t v274 = &v265[8 * v264];
      *unint64_t v273 = v257;
      unint64_t v267 = v273 + 1;
      while (v258 != v260)
      {
        uint64_t v275 = *--v258;
        *--unint64_t v273 = v275;
      }
LABEL_373:
      v256[220] = v273;
      v256[221] = v267;
      v256[222] = v274;
      if (v260) {
        operator delete(v260);
      }
      goto LABEL_375;
    }
  }
  uint64_t *v258 = v257;
  unint64_t v267 = v258 + 1;
LABEL_375:
  v256[221] = v267;
LABEL_376:
  int v277 = 1 << *(_DWORD *)(v3 + 48);
  if (v277 == 4)
  {
    unint64_t v278 = *(void **)a1[1];
    uint64_t v279 = *(_DWORD *)(a1[2] + 36) & 0x3FFFFLL;
    uint64_t v280 = (uint64_t *)v278[224];
    unint64_t v288 = v278[225];
    if ((unint64_t)v280 >= v288)
    {
      unint64_t v282 = (uint64_t *)v278[223];
      uint64_t v290 = v280 - v282;
      if ((unint64_t)(v290 + 1) >> 61) {
        goto LABEL_570;
      }
      unint64_t v291 = v288 - (void)v282;
      unint64_t v292 = (uint64_t)(v288 - (void)v282) >> 2;
      if (v292 <= v290 + 1) {
        unint64_t v292 = v290 + 1;
      }
      if (v291 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v293 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v293 = v292;
      }
      if (v293)
      {
        unint64_t v294 = (char *)sub_5714((uint64_t)(v278 + 225), v293);
        uint64_t v280 = (uint64_t *)v278[224];
        unint64_t v282 = (uint64_t *)v278[223];
      }
      else
      {
        unint64_t v294 = 0;
      }
      uint64_t v295 = (uint64_t *)&v294[8 * v290];
      uint64_t v296 = &v294[8 * v293];
      *uint64_t v295 = v279;
      int v289 = v295 + 1;
      while (v280 != v282)
      {
        uint64_t v298 = *--v280;
        *--uint64_t v295 = v298;
      }
      goto LABEL_405;
    }
  }
  else
  {
    if (v277 != 2) {
      goto LABEL_408;
    }
    unint64_t v278 = *(void **)a1[1];
    uint64_t v279 = *(_DWORD *)(a1[2] + 36) & 0x3FFFFLL;
    uint64_t v280 = (uint64_t *)v278[224];
    unint64_t v281 = v278[225];
    if ((unint64_t)v280 >= v281)
    {
      unint64_t v282 = (uint64_t *)v278[223];
      uint64_t v283 = v280 - v282;
      if ((unint64_t)(v283 + 1) >> 61) {
        goto LABEL_570;
      }
      unint64_t v284 = v281 - (void)v282;
      unint64_t v285 = (uint64_t)(v281 - (void)v282) >> 2;
      if (v285 <= v283 + 1) {
        unint64_t v285 = v283 + 1;
      }
      if (v284 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v286 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v286 = v285;
      }
      if (v286)
      {
        uint64_t v287 = (char *)sub_5714((uint64_t)(v278 + 225), v286);
        uint64_t v280 = (uint64_t *)v278[224];
        unint64_t v282 = (uint64_t *)v278[223];
      }
      else
      {
        uint64_t v287 = 0;
      }
      uint64_t v295 = (uint64_t *)&v287[8 * v283];
      uint64_t v296 = &v287[8 * v286];
      *uint64_t v295 = v279;
      int v289 = v295 + 1;
      while (v280 != v282)
      {
        uint64_t v297 = *--v280;
        *--uint64_t v295 = v297;
      }
LABEL_405:
      v278[223] = v295;
      v278[224] = v289;
      v278[225] = v296;
      if (v282) {
        operator delete(v282);
      }
      goto LABEL_407;
    }
  }
  uint64_t *v280 = v279;
  int v289 = v280 + 1;
LABEL_407:
  v278[224] = v289;
LABEL_408:
  int v299 = 1 << *(_DWORD *)(v3 + 48);
  if (v299 == 4)
  {
    uint64_t v300 = *(void **)a1[1];
    uint64_t v301 = *(_DWORD *)(a1[2] + 32) & 0x3FFFFLL;
    unint64_t v302 = (uint64_t *)v300[227];
    unint64_t v310 = v300[228];
    if ((unint64_t)v302 >= v310)
    {
      uint64_t v304 = (uint64_t *)v300[226];
      uint64_t v312 = v302 - v304;
      if ((unint64_t)(v312 + 1) >> 61) {
        goto LABEL_570;
      }
      unint64_t v313 = v310 - (void)v304;
      unint64_t v314 = (uint64_t)(v310 - (void)v304) >> 2;
      if (v314 <= v312 + 1) {
        unint64_t v314 = v312 + 1;
      }
      if (v313 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v315 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v315 = v314;
      }
      if (v315)
      {
        uint64_t v316 = (char *)sub_5714((uint64_t)(v300 + 228), v315);
        unint64_t v302 = (uint64_t *)v300[227];
        uint64_t v304 = (uint64_t *)v300[226];
      }
      else
      {
        uint64_t v316 = 0;
      }
      unint64_t v317 = (uint64_t *)&v316[8 * v312];
      uint64_t v318 = &v316[8 * v315];
      uint64_t *v317 = v301;
      uint64_t v311 = v317 + 1;
      while (v302 != v304)
      {
        uint64_t v320 = *--v302;
        *--unint64_t v317 = v320;
      }
      goto LABEL_437;
    }
  }
  else
  {
    if (v299 != 2) {
      goto LABEL_440;
    }
    uint64_t v300 = *(void **)a1[1];
    uint64_t v301 = *(_DWORD *)(a1[2] + 32) & 0x3FFFFLL;
    unint64_t v302 = (uint64_t *)v300[227];
    unint64_t v303 = v300[228];
    if ((unint64_t)v302 >= v303)
    {
      uint64_t v304 = (uint64_t *)v300[226];
      uint64_t v305 = v302 - v304;
      if ((unint64_t)(v305 + 1) >> 61) {
        goto LABEL_570;
      }
      unint64_t v306 = v303 - (void)v304;
      unint64_t v307 = (uint64_t)(v303 - (void)v304) >> 2;
      if (v307 <= v305 + 1) {
        unint64_t v307 = v305 + 1;
      }
      if (v306 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v308 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v308 = v307;
      }
      if (v308)
      {
        unint64_t v309 = (char *)sub_5714((uint64_t)(v300 + 228), v308);
        unint64_t v302 = (uint64_t *)v300[227];
        uint64_t v304 = (uint64_t *)v300[226];
      }
      else
      {
        unint64_t v309 = 0;
      }
      unint64_t v317 = (uint64_t *)&v309[8 * v305];
      uint64_t v318 = &v309[8 * v308];
      uint64_t *v317 = v301;
      uint64_t v311 = v317 + 1;
      while (v302 != v304)
      {
        uint64_t v319 = *--v302;
        *--unint64_t v317 = v319;
      }
LABEL_437:
      v300[226] = v317;
      v300[227] = v311;
      v300[228] = v318;
      if (v304) {
        operator delete(v304);
      }
      goto LABEL_439;
    }
  }
  *unint64_t v302 = v301;
  uint64_t v311 = v302 + 1;
LABEL_439:
  v300[227] = v311;
LABEL_440:
  int v321 = 1 << *(_DWORD *)(v3 + 48);
  if (v321 == 4)
  {
    unint64_t v322 = *(void **)a1[1];
    uint64_t v323 = *(_DWORD *)(a1[2] + 28) & 0x3FFFFLL;
    unint64_t v324 = (uint64_t *)v322[230];
    unint64_t v332 = v322[231];
    if ((unint64_t)v324 >= v332)
    {
      uint64_t v326 = (uint64_t *)v322[229];
      uint64_t v334 = v324 - v326;
      if ((unint64_t)(v334 + 1) >> 61) {
        goto LABEL_570;
      }
      unint64_t v335 = v332 - (void)v326;
      unint64_t v336 = (uint64_t)(v332 - (void)v326) >> 2;
      if (v336 <= v334 + 1) {
        unint64_t v336 = v334 + 1;
      }
      if (v335 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v337 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v337 = v336;
      }
      if (v337)
      {
        uint64_t v338 = (char *)sub_5714((uint64_t)(v322 + 231), v337);
        unint64_t v324 = (uint64_t *)v322[230];
        uint64_t v326 = (uint64_t *)v322[229];
      }
      else
      {
        uint64_t v338 = 0;
      }
      uint64_t v339 = (uint64_t *)&v338[8 * v334];
      unint64_t v340 = &v338[8 * v337];
      uint64_t *v339 = v323;
      uint64_t v333 = v339 + 1;
      while (v324 != v326)
      {
        uint64_t v342 = *--v324;
        *--uint64_t v339 = v342;
      }
      goto LABEL_469;
    }
  }
  else
  {
    if (v321 != 2) {
      goto LABEL_472;
    }
    unint64_t v322 = *(void **)a1[1];
    uint64_t v323 = *(_DWORD *)(a1[2] + 28) & 0x3FFFFLL;
    unint64_t v324 = (uint64_t *)v322[230];
    unint64_t v325 = v322[231];
    if ((unint64_t)v324 >= v325)
    {
      uint64_t v326 = (uint64_t *)v322[229];
      uint64_t v327 = v324 - v326;
      if ((unint64_t)(v327 + 1) >> 61) {
        goto LABEL_570;
      }
      unint64_t v328 = v325 - (void)v326;
      unint64_t v329 = (uint64_t)(v325 - (void)v326) >> 2;
      if (v329 <= v327 + 1) {
        unint64_t v329 = v327 + 1;
      }
      if (v328 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v330 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v330 = v329;
      }
      if (v330)
      {
        unint64_t v331 = (char *)sub_5714((uint64_t)(v322 + 231), v330);
        unint64_t v324 = (uint64_t *)v322[230];
        uint64_t v326 = (uint64_t *)v322[229];
      }
      else
      {
        unint64_t v331 = 0;
      }
      uint64_t v339 = (uint64_t *)&v331[8 * v327];
      unint64_t v340 = &v331[8 * v330];
      uint64_t *v339 = v323;
      uint64_t v333 = v339 + 1;
      while (v324 != v326)
      {
        uint64_t v341 = *--v324;
        *--uint64_t v339 = v341;
      }
LABEL_469:
      v322[229] = v339;
      v322[230] = v333;
      v322[231] = v340;
      if (v326) {
        operator delete(v326);
      }
      goto LABEL_471;
    }
  }
  uint64_t *v324 = v323;
  uint64_t v333 = v324 + 1;
LABEL_471:
  v322[230] = v333;
LABEL_472:
  int v343 = 1 << *(_DWORD *)(v3 + 48);
  if (v343 == 2)
  {
    unint64_t v344 = *(void **)a1[1];
    uint64_t v345 = *(_DWORD *)(a1[2] + 52) & 0xFFFFFLL;
    unint64_t v346 = (uint64_t *)v344[233];
    unint64_t v354 = v344[234];
    if ((unint64_t)v346 >= v354)
    {
      unint64_t v348 = (uint64_t *)v344[232];
      uint64_t v356 = v346 - v348;
      if ((unint64_t)(v356 + 1) >> 61) {
        goto LABEL_570;
      }
      unint64_t v357 = v354 - (void)v348;
      unint64_t v358 = (uint64_t)(v354 - (void)v348) >> 2;
      if (v358 <= v356 + 1) {
        unint64_t v358 = v356 + 1;
      }
      if (v357 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v359 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v359 = v358;
      }
      if (v359)
      {
        unint64_t v360 = (char *)sub_5714((uint64_t)(v344 + 234), v359);
        unint64_t v346 = (uint64_t *)v344[233];
        unint64_t v348 = (uint64_t *)v344[232];
      }
      else
      {
        unint64_t v360 = 0;
      }
      uint64_t v361 = (uint64_t *)&v360[8 * v356];
      uint64_t v362 = &v360[8 * v359];
      uint64_t *v361 = v345;
      unint64_t v355 = v361 + 1;
      while (v346 != v348)
      {
        uint64_t v364 = *--v346;
        *--uint64_t v361 = v364;
      }
      goto LABEL_501;
    }
  }
  else
  {
    if (v343 != 1) {
      goto LABEL_504;
    }
    unint64_t v344 = *(void **)a1[1];
    uint64_t v345 = *(_DWORD *)(a1[2] + 52) & 0xFFFFFLL;
    unint64_t v346 = (uint64_t *)v344[233];
    unint64_t v347 = v344[234];
    if ((unint64_t)v346 >= v347)
    {
      unint64_t v348 = (uint64_t *)v344[232];
      uint64_t v349 = v346 - v348;
      if ((unint64_t)(v349 + 1) >> 61) {
        goto LABEL_570;
      }
      unint64_t v350 = v347 - (void)v348;
      unint64_t v351 = (uint64_t)(v347 - (void)v348) >> 2;
      if (v351 <= v349 + 1) {
        unint64_t v351 = v349 + 1;
      }
      if (v350 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v352 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v352 = v351;
      }
      if (v352)
      {
        unint64_t v353 = (char *)sub_5714((uint64_t)(v344 + 234), v352);
        unint64_t v346 = (uint64_t *)v344[233];
        unint64_t v348 = (uint64_t *)v344[232];
      }
      else
      {
        unint64_t v353 = 0;
      }
      uint64_t v361 = (uint64_t *)&v353[8 * v349];
      uint64_t v362 = &v353[8 * v352];
      uint64_t *v361 = v345;
      unint64_t v355 = v361 + 1;
      while (v346 != v348)
      {
        uint64_t v363 = *--v346;
        *--uint64_t v361 = v363;
      }
LABEL_501:
      v344[232] = v361;
      v344[233] = v355;
      v344[234] = v362;
      if (v348) {
        operator delete(v348);
      }
      goto LABEL_503;
    }
  }
  uint64_t *v346 = v345;
  unint64_t v355 = v346 + 1;
LABEL_503:
  v344[233] = v355;
LABEL_504:
  int v365 = 1 << *(_DWORD *)(v3 + 48);
  if (v365 == 2)
  {
    unint64_t v366 = *(void **)a1[1];
    uint64_t v367 = *(_DWORD *)(a1[2] + 60) & 0x3FFFFLL;
    unint64_t v368 = (uint64_t *)v366[236];
    unint64_t v376 = v366[237];
    if ((unint64_t)v368 >= v376)
    {
      unint64_t v370 = (uint64_t *)v366[235];
      uint64_t v378 = v368 - v370;
      if ((unint64_t)(v378 + 1) >> 61) {
        goto LABEL_570;
      }
      unint64_t v379 = v376 - (void)v370;
      unint64_t v380 = (uint64_t)(v376 - (void)v370) >> 2;
      if (v380 <= v378 + 1) {
        unint64_t v380 = v378 + 1;
      }
      if (v379 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v381 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v381 = v380;
      }
      if (v381)
      {
        uint64_t v382 = (char *)sub_5714((uint64_t)(v366 + 237), v381);
        unint64_t v368 = (uint64_t *)v366[236];
        unint64_t v370 = (uint64_t *)v366[235];
      }
      else
      {
        uint64_t v382 = 0;
      }
      uint64_t v383 = (uint64_t *)&v382[8 * v378];
      uint64_t v384 = &v382[8 * v381];
      *uint64_t v383 = v367;
      unint64_t v377 = v383 + 1;
      while (v368 != v370)
      {
        uint64_t v386 = *--v368;
        *--uint64_t v383 = v386;
      }
      goto LABEL_533;
    }
  }
  else
  {
    if (v365 != 1) {
      goto LABEL_536;
    }
    unint64_t v366 = *(void **)a1[1];
    uint64_t v367 = *(_DWORD *)(a1[2] + 60) & 0x3FFFFLL;
    unint64_t v368 = (uint64_t *)v366[236];
    unint64_t v369 = v366[237];
    if ((unint64_t)v368 >= v369)
    {
      unint64_t v370 = (uint64_t *)v366[235];
      uint64_t v371 = v368 - v370;
      if ((unint64_t)(v371 + 1) >> 61) {
        goto LABEL_570;
      }
      unint64_t v372 = v369 - (void)v370;
      unint64_t v373 = (uint64_t)(v369 - (void)v370) >> 2;
      if (v373 <= v371 + 1) {
        unint64_t v373 = v371 + 1;
      }
      if (v372 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v374 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v374 = v373;
      }
      if (v374)
      {
        unint64_t v375 = (char *)sub_5714((uint64_t)(v366 + 237), v374);
        unint64_t v368 = (uint64_t *)v366[236];
        unint64_t v370 = (uint64_t *)v366[235];
      }
      else
      {
        unint64_t v375 = 0;
      }
      uint64_t v383 = (uint64_t *)&v375[8 * v371];
      uint64_t v384 = &v375[8 * v374];
      *uint64_t v383 = v367;
      unint64_t v377 = v383 + 1;
      while (v368 != v370)
      {
        uint64_t v385 = *--v368;
        *--uint64_t v383 = v385;
      }
LABEL_533:
      v366[235] = v383;
      v366[236] = v377;
      v366[237] = v384;
      if (v370) {
        operator delete(v370);
      }
      goto LABEL_535;
    }
  }
  uint64_t *v368 = v367;
  unint64_t v377 = v368 + 1;
LABEL_535:
  v366[236] = v377;
LABEL_536:
  int v387 = 1 << *(_DWORD *)(v3 + 48);
  if (v387 == 2)
  {
    uint64_t v399 = a1[2];
    unint64_t v389 = *(void **)a1[1];
    uint64_t v390 = *(_DWORD *)(v399 + 56) & 0xFFFFFLL;
    unint64_t v391 = (uint64_t *)v389[239];
    unint64_t v400 = v389[240];
    if ((unint64_t)v391 >= v400)
    {
      uint64_t v393 = (uint64_t *)v389[238];
      uint64_t v402 = v391 - v393;
      if (!((unint64_t)(v402 + 1) >> 61))
      {
        unint64_t v403 = v400 - (void)v393;
        unint64_t v404 = (uint64_t)(v400 - (void)v393) >> 2;
        if (v404 <= v402 + 1) {
          unint64_t v404 = v402 + 1;
        }
        if (v403 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v405 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v405 = v404;
        }
        if (v405)
        {
          uint64_t v406 = (char *)sub_5714((uint64_t)(v389 + 240), v405);
          unint64_t v391 = (uint64_t *)v389[239];
          uint64_t v393 = (uint64_t *)v389[238];
        }
        else
        {
          uint64_t v406 = 0;
        }
        int v407 = (uint64_t *)&v406[8 * v402];
        uint64_t v408 = &v406[8 * v405];
        uint64_t *v407 = v390;
        unint64_t v401 = v407 + 1;
        while (v391 != v393)
        {
          uint64_t v410 = *--v391;
          *--int v407 = v410;
        }
        goto LABEL_565;
      }
LABEL_570:
      sub_566C();
    }
LABEL_548:
    uint64_t *v391 = v390;
    unint64_t v401 = v391 + 1;
LABEL_567:
    v389[239] = v401;
    goto LABEL_568;
  }
  if (v387 == 1)
  {
    uint64_t v388 = a1[2];
    unint64_t v389 = *(void **)a1[1];
    uint64_t v390 = *(_DWORD *)(v388 + 56) & 0xFFFFFLL;
    unint64_t v391 = (uint64_t *)v389[239];
    unint64_t v392 = v389[240];
    if ((unint64_t)v391 >= v392)
    {
      uint64_t v393 = (uint64_t *)v389[238];
      uint64_t v394 = v391 - v393;
      if (!((unint64_t)(v394 + 1) >> 61))
      {
        unint64_t v395 = v392 - (void)v393;
        unint64_t v396 = (uint64_t)(v392 - (void)v393) >> 2;
        if (v396 <= v394 + 1) {
          unint64_t v396 = v394 + 1;
        }
        if (v395 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v397 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v397 = v396;
        }
        if (v397)
        {
          unint64_t v398 = (char *)sub_5714((uint64_t)(v389 + 240), v397);
          unint64_t v391 = (uint64_t *)v389[239];
          uint64_t v393 = (uint64_t *)v389[238];
        }
        else
        {
          unint64_t v398 = 0;
        }
        int v407 = (uint64_t *)&v398[8 * v394];
        uint64_t v408 = &v398[8 * v397];
        uint64_t *v407 = v390;
        unint64_t v401 = v407 + 1;
        while (v391 != v393)
        {
          uint64_t v409 = *--v391;
          *--int v407 = v409;
        }
LABEL_565:
        v389[238] = v407;
        v389[239] = v401;
        v389[240] = v408;
        if (v393) {
          operator delete(v393);
        }
        goto LABEL_567;
      }
      goto LABEL_570;
    }
    goto LABEL_548;
  }
LABEL_568:
  *a2 = 1;
}

void sub_CCBC4(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    int v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_DWORD *)(a1[2] + 28) & 0x3FFFFLL;
      uint64_t v8 = (uint64_t *)v6[158];
      unint64_t v19 = v6[159];
      if ((unint64_t)v8 >= v19)
      {
        unint64_t v10 = (uint64_t *)v6[157];
        uint64_t v21 = v8 - v10;
        if ((unint64_t)(v21 + 1) >> 61) {
          goto LABEL_296;
        }
        unint64_t v22 = v19 - (void)v10;
        unint64_t v23 = (uint64_t)(v19 - (void)v10) >> 2;
        if (v23 <= v21 + 1) {
          unint64_t v23 = v21 + 1;
        }
        if (v22 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v23;
        }
        if (v24)
        {
          unint64_t v25 = (char *)sub_5714((uint64_t)(v6 + 159), v24);
          uint64_t v8 = (uint64_t *)v6[158];
          unint64_t v10 = (uint64_t *)v6[157];
        }
        else
        {
          unint64_t v25 = 0;
        }
        unint64_t v26 = (uint64_t *)&v25[8 * v21];
        uint64_t v27 = &v25[8 * v24];
        *unint64_t v26 = v7;
        uint64_t v20 = v26 + 1;
        while (v8 != v10)
        {
          uint64_t v29 = *--v8;
          *--unint64_t v26 = v29;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1) {
        goto LABEL_38;
      }
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_DWORD *)(a1[2] + 28) & 0x3FFFFLL;
      uint64_t v8 = (uint64_t *)v6[158];
      unint64_t v9 = v6[159];
      if ((unint64_t)v8 >= v9)
      {
        unint64_t v10 = (uint64_t *)v6[157];
        uint64_t v11 = v8 - v10;
        if ((unint64_t)(v11 + 1) >> 61) {
          goto LABEL_296;
        }
        unint64_t v12 = v9 - (void)v10;
        unint64_t v13 = (uint64_t)(v9 - (void)v10) >> 2;
        if (v13 <= v11 + 1) {
          unint64_t v13 = v11 + 1;
        }
        if (v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14)
        {
          unint64_t v15 = (char *)sub_5714((uint64_t)(v6 + 159), v14);
          uint64_t v8 = (uint64_t *)v6[158];
          unint64_t v10 = (uint64_t *)v6[157];
        }
        else
        {
          unint64_t v15 = 0;
        }
        unint64_t v26 = (uint64_t *)&v15[8 * v11];
        uint64_t v27 = &v15[8 * v14];
        *unint64_t v26 = v7;
        uint64_t v20 = v26 + 1;
        while (v8 != v10)
        {
          uint64_t v28 = *--v8;
          *--unint64_t v26 = v28;
        }
LABEL_35:
        v6[157] = v26;
        v6[158] = v20;
        v6[159] = v27;
        if (v10) {
          operator delete(v10);
        }
        goto LABEL_37;
      }
    }
    *uint64_t v8 = v7;
    uint64_t v20 = v8 + 1;
LABEL_37:
    v6[158] = v20;
LABEL_38:
    int v30 = 1 << *(_DWORD *)(v3 + 48);
    if (v30 == 2)
    {
      unint64_t v31 = *(void **)a1[1];
      uint64_t v32 = *(_DWORD *)(a1[2] + 32) & 0x3FFFFLL;
      int v33 = (uint64_t *)v31[161];
      unint64_t v41 = v31[162];
      if ((unint64_t)v33 >= v41)
      {
        uint64_t v35 = (uint64_t *)v31[160];
        uint64_t v43 = v33 - v35;
        if ((unint64_t)(v43 + 1) >> 61) {
          goto LABEL_296;
        }
        unint64_t v44 = v41 - (void)v35;
        unint64_t v45 = (uint64_t)(v41 - (void)v35) >> 2;
        if (v45 <= v43 + 1) {
          unint64_t v45 = v43 + 1;
        }
        if (v44 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v46 = v45;
        }
        if (v46)
        {
          unint64_t v47 = (char *)sub_5714((uint64_t)(v31 + 162), v46);
          int v33 = (uint64_t *)v31[161];
          uint64_t v35 = (uint64_t *)v31[160];
        }
        else
        {
          unint64_t v47 = 0;
        }
        unint64_t v48 = (uint64_t *)&v47[8 * v43];
        uint64_t v49 = &v47[8 * v46];
        *unint64_t v48 = v32;
        uint64_t v42 = v48 + 1;
        while (v33 != v35)
        {
          uint64_t v51 = *--v33;
          *--unint64_t v48 = v51;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v30 != 1) {
        goto LABEL_70;
      }
      unint64_t v31 = *(void **)a1[1];
      uint64_t v32 = *(_DWORD *)(a1[2] + 32) & 0x3FFFFLL;
      int v33 = (uint64_t *)v31[161];
      unint64_t v34 = v31[162];
      if ((unint64_t)v33 >= v34)
      {
        uint64_t v35 = (uint64_t *)v31[160];
        uint64_t v36 = v33 - v35;
        if ((unint64_t)(v36 + 1) >> 61) {
          goto LABEL_296;
        }
        unint64_t v37 = v34 - (void)v35;
        unint64_t v38 = (uint64_t)(v34 - (void)v35) >> 2;
        if (v38 <= v36 + 1) {
          unint64_t v38 = v36 + 1;
        }
        if (v37 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v39 = v38;
        }
        if (v39)
        {
          uint64_t v40 = (char *)sub_5714((uint64_t)(v31 + 162), v39);
          int v33 = (uint64_t *)v31[161];
          uint64_t v35 = (uint64_t *)v31[160];
        }
        else
        {
          uint64_t v40 = 0;
        }
        unint64_t v48 = (uint64_t *)&v40[8 * v36];
        uint64_t v49 = &v40[8 * v39];
        *unint64_t v48 = v32;
        uint64_t v42 = v48 + 1;
        while (v33 != v35)
        {
          uint64_t v50 = *--v33;
          *--unint64_t v48 = v50;
        }
LABEL_67:
        v31[160] = v48;
        v31[161] = v42;
        v31[162] = v49;
        if (v35) {
          operator delete(v35);
        }
        goto LABEL_69;
      }
    }
    uint64_t *v33 = v32;
    uint64_t v42 = v33 + 1;
LABEL_69:
    v31[161] = v42;
LABEL_70:
    int v52 = 1 << *(_DWORD *)(v3 + 48);
    if (v52 == 2)
    {
      unint64_t v53 = *(void **)a1[1];
      unint64_t v54 = ((unint64_t)*(unsigned int *)(a1[2] + 20) >> 1) & 0x3FFFF;
      unint64_t v55 = (unint64_t *)v53[164];
      unint64_t v63 = v53[165];
      if ((unint64_t)v55 >= v63)
      {
        uint64_t v57 = (unint64_t *)v53[163];
        uint64_t v65 = v55 - v57;
        if ((unint64_t)(v65 + 1) >> 61) {
          goto LABEL_296;
        }
        unint64_t v66 = v63 - (void)v57;
        unint64_t v67 = (uint64_t)(v63 - (void)v57) >> 2;
        if (v67 <= v65 + 1) {
          unint64_t v67 = v65 + 1;
        }
        if (v66 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v68 = v67;
        }
        if (v68)
        {
          unint64_t v69 = (char *)sub_5714((uint64_t)(v53 + 165), v68);
          unint64_t v55 = (unint64_t *)v53[164];
          uint64_t v57 = (unint64_t *)v53[163];
        }
        else
        {
          unint64_t v69 = 0;
        }
        uint64_t v70 = (unint64_t *)&v69[8 * v65];
        int v71 = &v69[8 * v68];
        unint64_t *v70 = v54;
        unint64_t v64 = v70 + 1;
        while (v55 != v57)
        {
          unint64_t v73 = *--v55;
          *--uint64_t v70 = v73;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v52 != 1) {
        goto LABEL_102;
      }
      unint64_t v53 = *(void **)a1[1];
      unint64_t v54 = ((unint64_t)*(unsigned int *)(a1[2] + 20) >> 1) & 0x3FFFF;
      unint64_t v55 = (unint64_t *)v53[164];
      unint64_t v56 = v53[165];
      if ((unint64_t)v55 >= v56)
      {
        uint64_t v57 = (unint64_t *)v53[163];
        uint64_t v58 = v55 - v57;
        if ((unint64_t)(v58 + 1) >> 61) {
          goto LABEL_296;
        }
        unint64_t v59 = v56 - (void)v57;
        unint64_t v60 = (uint64_t)(v56 - (void)v57) >> 2;
        if (v60 <= v58 + 1) {
          unint64_t v60 = v58 + 1;
        }
        if (v59 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v61 = v60;
        }
        if (v61)
        {
          unint64_t v62 = (char *)sub_5714((uint64_t)(v53 + 165), v61);
          unint64_t v55 = (unint64_t *)v53[164];
          uint64_t v57 = (unint64_t *)v53[163];
        }
        else
        {
          unint64_t v62 = 0;
        }
        uint64_t v70 = (unint64_t *)&v62[8 * v58];
        int v71 = &v62[8 * v61];
        unint64_t *v70 = v54;
        unint64_t v64 = v70 + 1;
        while (v55 != v57)
        {
          unint64_t v72 = *--v55;
          *--uint64_t v70 = v72;
        }
LABEL_99:
        v53[163] = v70;
        v53[164] = v64;
        v53[165] = v71;
        if (v57) {
          operator delete(v57);
        }
        goto LABEL_101;
      }
    }
    *unint64_t v55 = v54;
    unint64_t v64 = v55 + 1;
LABEL_101:
    v53[164] = v64;
LABEL_102:
    int v74 = 1 << *(_DWORD *)(v3 + 48);
    if (v74 == 2)
    {
      unint64_t v75 = *(void **)a1[1];
      uint64_t v76 = *(_DWORD *)(a1[2] + 24) & 0x3FFFFLL;
      uint64_t v77 = (uint64_t *)v75[167];
      unint64_t v85 = v75[168];
      if ((unint64_t)v77 >= v85)
      {
        unint64_t v79 = (uint64_t *)v75[166];
        uint64_t v87 = v77 - v79;
        if ((unint64_t)(v87 + 1) >> 61) {
          goto LABEL_296;
        }
        unint64_t v88 = v85 - (void)v79;
        unint64_t v89 = (uint64_t)(v85 - (void)v79) >> 2;
        if (v89 <= v87 + 1) {
          unint64_t v89 = v87 + 1;
        }
        if (v88 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v90 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v90 = v89;
        }
        if (v90)
        {
          uint64_t v91 = (char *)sub_5714((uint64_t)(v75 + 168), v90);
          uint64_t v77 = (uint64_t *)v75[167];
          unint64_t v79 = (uint64_t *)v75[166];
        }
        else
        {
          uint64_t v91 = 0;
        }
        uint64_t v92 = (uint64_t *)&v91[8 * v87];
        int v93 = &v91[8 * v90];
        uint64_t *v92 = v76;
        unint64_t v86 = v92 + 1;
        while (v77 != v79)
        {
          uint64_t v95 = *--v77;
          *--uint64_t v92 = v95;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v74 != 1) {
        goto LABEL_134;
      }
      unint64_t v75 = *(void **)a1[1];
      uint64_t v76 = *(_DWORD *)(a1[2] + 24) & 0x3FFFFLL;
      uint64_t v77 = (uint64_t *)v75[167];
      unint64_t v78 = v75[168];
      if ((unint64_t)v77 >= v78)
      {
        unint64_t v79 = (uint64_t *)v75[166];
        uint64_t v80 = v77 - v79;
        if ((unint64_t)(v80 + 1) >> 61) {
          goto LABEL_296;
        }
        unint64_t v81 = v78 - (void)v79;
        unint64_t v82 = (uint64_t)(v78 - (void)v79) >> 2;
        if (v82 <= v80 + 1) {
          unint64_t v82 = v80 + 1;
        }
        if (v81 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v83 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v83 = v82;
        }
        if (v83)
        {
          uint64_t v84 = (char *)sub_5714((uint64_t)(v75 + 168), v83);
          uint64_t v77 = (uint64_t *)v75[167];
          unint64_t v79 = (uint64_t *)v75[166];
        }
        else
        {
          uint64_t v84 = 0;
        }
        uint64_t v92 = (uint64_t *)&v84[8 * v80];
        int v93 = &v84[8 * v83];
        uint64_t *v92 = v76;
        unint64_t v86 = v92 + 1;
        while (v77 != v79)
        {
          uint64_t v94 = *--v77;
          *--uint64_t v92 = v94;
        }
LABEL_131:
        v75[166] = v92;
        v75[167] = v86;
        v75[168] = v93;
        if (v79) {
          operator delete(v79);
        }
        goto LABEL_133;
      }
    }
    *uint64_t v77 = v76;
    unint64_t v86 = v77 + 1;
LABEL_133:
    v75[167] = v86;
LABEL_134:
    int v96 = 1 << *(_DWORD *)(v3 + 48);
    if (v96 == 2)
    {
      unint64_t v97 = *(void **)a1[1];
      uint64_t v98 = *(_DWORD *)(a1[2] + 52) & 0x3FFFFLL;
      uint64_t v99 = (uint64_t *)v97[170];
      unint64_t v107 = v97[171];
      if ((unint64_t)v99 >= v107)
      {
        unint64_t v101 = (uint64_t *)v97[169];
        uint64_t v109 = v99 - v101;
        if ((unint64_t)(v109 + 1) >> 61) {
          goto LABEL_296;
        }
        unint64_t v110 = v107 - (void)v101;
        unint64_t v111 = (uint64_t)(v107 - (void)v101) >> 2;
        if (v111 <= v109 + 1) {
          unint64_t v111 = v109 + 1;
        }
        if (v110 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v112 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v112 = v111;
        }
        if (v112)
        {
          unint64_t v113 = (char *)sub_5714((uint64_t)(v97 + 171), v112);
          uint64_t v99 = (uint64_t *)v97[170];
          unint64_t v101 = (uint64_t *)v97[169];
        }
        else
        {
          unint64_t v113 = 0;
        }
        unint64_t v114 = (uint64_t *)&v113[8 * v109];
        unint64_t v115 = &v113[8 * v112];
        *unint64_t v114 = v98;
        unint64_t v108 = v114 + 1;
        while (v99 != v101)
        {
          uint64_t v117 = *--v99;
          *--unint64_t v114 = v117;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v96 != 1) {
        goto LABEL_166;
      }
      unint64_t v97 = *(void **)a1[1];
      uint64_t v98 = *(_DWORD *)(a1[2] + 52) & 0x3FFFFLL;
      uint64_t v99 = (uint64_t *)v97[170];
      unint64_t v100 = v97[171];
      if ((unint64_t)v99 >= v100)
      {
        unint64_t v101 = (uint64_t *)v97[169];
        uint64_t v102 = v99 - v101;
        if ((unint64_t)(v102 + 1) >> 61) {
          goto LABEL_296;
        }
        unint64_t v103 = v100 - (void)v101;
        unint64_t v104 = (uint64_t)(v100 - (void)v101) >> 2;
        if (v104 <= v102 + 1) {
          unint64_t v104 = v102 + 1;
        }
        if (v103 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v105 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v105 = v104;
        }
        if (v105)
        {
          uint64_t v106 = (char *)sub_5714((uint64_t)(v97 + 171), v105);
          uint64_t v99 = (uint64_t *)v97[170];
          unint64_t v101 = (uint64_t *)v97[169];
        }
        else
        {
          uint64_t v106 = 0;
        }
        unint64_t v114 = (uint64_t *)&v106[8 * v102];
        unint64_t v115 = &v106[8 * v105];
        *unint64_t v114 = v98;
        unint64_t v108 = v114 + 1;
        while (v99 != v101)
        {
          uint64_t v116 = *--v99;
          *--unint64_t v114 = v116;
        }
LABEL_163:
        v97[169] = v114;
        v97[170] = v108;
        v97[171] = v115;
        if (v101) {
          operator delete(v101);
        }
        goto LABEL_165;
      }
    }
    *uint64_t v99 = v98;
    unint64_t v108 = v99 + 1;
LABEL_165:
    v97[170] = v108;
LABEL_166:
    int v118 = 1 << *(_DWORD *)(v3 + 48);
    if (v118 == 2)
    {
      uint64_t v119 = *(void **)a1[1];
      uint64_t v120 = *(_DWORD *)(a1[2] + 36) & 0x3FFFFLL;
      uint64_t v121 = (uint64_t *)v119[173];
      unint64_t v129 = v119[174];
      if ((unint64_t)v121 >= v129)
      {
        unint64_t v123 = (uint64_t *)v119[172];
        uint64_t v131 = v121 - v123;
        if ((unint64_t)(v131 + 1) >> 61) {
          goto LABEL_296;
        }
        unint64_t v132 = v129 - (void)v123;
        unint64_t v133 = (uint64_t)(v129 - (void)v123) >> 2;
        if (v133 <= v131 + 1) {
          unint64_t v133 = v131 + 1;
        }
        if (v132 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v134 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v134 = v133;
        }
        if (v134)
        {
          uint64_t v135 = (char *)sub_5714((uint64_t)(v119 + 174), v134);
          uint64_t v121 = (uint64_t *)v119[173];
          unint64_t v123 = (uint64_t *)v119[172];
        }
        else
        {
          uint64_t v135 = 0;
        }
        unint64_t v136 = (uint64_t *)&v135[8 * v131];
        unint64_t v137 = &v135[8 * v134];
        uint64_t *v136 = v120;
        uint64_t v130 = v136 + 1;
        while (v121 != v123)
        {
          uint64_t v139 = *--v121;
          *--unint64_t v136 = v139;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v118 != 1) {
        goto LABEL_198;
      }
      uint64_t v119 = *(void **)a1[1];
      uint64_t v120 = *(_DWORD *)(a1[2] + 36) & 0x3FFFFLL;
      uint64_t v121 = (uint64_t *)v119[173];
      unint64_t v122 = v119[174];
      if ((unint64_t)v121 >= v122)
      {
        unint64_t v123 = (uint64_t *)v119[172];
        uint64_t v124 = v121 - v123;
        if ((unint64_t)(v124 + 1) >> 61) {
          goto LABEL_296;
        }
        unint64_t v125 = v122 - (void)v123;
        unint64_t v126 = (uint64_t)(v122 - (void)v123) >> 2;
        if (v126 <= v124 + 1) {
          unint64_t v126 = v124 + 1;
        }
        if (v125 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v127 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v127 = v126;
        }
        if (v127)
        {
          uint64_t v128 = (char *)sub_5714((uint64_t)(v119 + 174), v127);
          uint64_t v121 = (uint64_t *)v119[173];
          unint64_t v123 = (uint64_t *)v119[172];
        }
        else
        {
          uint64_t v128 = 0;
        }
        unint64_t v136 = (uint64_t *)&v128[8 * v124];
        unint64_t v137 = &v128[8 * v127];
        uint64_t *v136 = v120;
        uint64_t v130 = v136 + 1;
        while (v121 != v123)
        {
          uint64_t v138 = *--v121;
          *--unint64_t v136 = v138;
        }
LABEL_195:
        v119[172] = v136;
        v119[173] = v130;
        v119[174] = v137;
        if (v123) {
          operator delete(v123);
        }
        goto LABEL_197;
      }
    }
    uint64_t *v121 = v120;
    uint64_t v130 = v121 + 1;
LABEL_197:
    v119[173] = v130;
LABEL_198:
    int v140 = 1 << *(_DWORD *)(v3 + 48);
    if (v140 == 2)
    {
      uint64_t v141 = *(void **)a1[1];
      uint64_t v142 = *(_DWORD *)(a1[2] + 44) & 0x3FFFFLL;
      int v143 = (uint64_t *)v141[176];
      unint64_t v151 = v141[177];
      if ((unint64_t)v143 >= v151)
      {
        unint64_t v145 = (uint64_t *)v141[175];
        uint64_t v153 = v143 - v145;
        if ((unint64_t)(v153 + 1) >> 61) {
          goto LABEL_296;
        }
        unint64_t v154 = v151 - (void)v145;
        unint64_t v155 = (uint64_t)(v151 - (void)v145) >> 2;
        if (v155 <= v153 + 1) {
          unint64_t v155 = v153 + 1;
        }
        if (v154 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v156 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v156 = v155;
        }
        if (v156)
        {
          unint64_t v157 = (char *)sub_5714((uint64_t)(v141 + 177), v156);
          int v143 = (uint64_t *)v141[176];
          unint64_t v145 = (uint64_t *)v141[175];
        }
        else
        {
          unint64_t v157 = 0;
        }
        uint64_t v158 = (uint64_t *)&v157[8 * v153];
        unint64_t v159 = &v157[8 * v156];
        *uint64_t v158 = v142;
        unint64_t v152 = v158 + 1;
        while (v143 != v145)
        {
          uint64_t v161 = *--v143;
          *--uint64_t v158 = v161;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v140 != 1) {
        goto LABEL_230;
      }
      uint64_t v141 = *(void **)a1[1];
      uint64_t v142 = *(_DWORD *)(a1[2] + 44) & 0x3FFFFLL;
      int v143 = (uint64_t *)v141[176];
      unint64_t v144 = v141[177];
      if ((unint64_t)v143 >= v144)
      {
        unint64_t v145 = (uint64_t *)v141[175];
        uint64_t v146 = v143 - v145;
        if ((unint64_t)(v146 + 1) >> 61) {
          goto LABEL_296;
        }
        unint64_t v147 = v144 - (void)v145;
        unint64_t v148 = (uint64_t)(v144 - (void)v145) >> 2;
        if (v148 <= v146 + 1) {
          unint64_t v148 = v146 + 1;
        }
        if (v147 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v149 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v149 = v148;
        }
        if (v149)
        {
          uint64_t v150 = (char *)sub_5714((uint64_t)(v141 + 177), v149);
          int v143 = (uint64_t *)v141[176];
          unint64_t v145 = (uint64_t *)v141[175];
        }
        else
        {
          uint64_t v150 = 0;
        }
        uint64_t v158 = (uint64_t *)&v150[8 * v146];
        unint64_t v159 = &v150[8 * v149];
        *uint64_t v158 = v142;
        unint64_t v152 = v158 + 1;
        while (v143 != v145)
        {
          uint64_t v160 = *--v143;
          *--uint64_t v158 = v160;
        }
LABEL_227:
        v141[175] = v158;
        v141[176] = v152;
        v141[177] = v159;
        if (v145) {
          operator delete(v145);
        }
        goto LABEL_229;
      }
    }
    *int v143 = v142;
    unint64_t v152 = v143 + 1;
LABEL_229:
    v141[176] = v152;
LABEL_230:
    int v162 = 1 << *(_DWORD *)(v3 + 48);
    if (v162 == 2)
    {
      uint64_t v163 = *(void **)a1[1];
      uint64_t v164 = *(_DWORD *)(a1[2] + 40) & 0x3FFFFLL;
      uint64_t v165 = (uint64_t *)v163[179];
      unint64_t v173 = v163[180];
      if ((unint64_t)v165 >= v173)
      {
        int v167 = (uint64_t *)v163[178];
        uint64_t v175 = v165 - v167;
        if ((unint64_t)(v175 + 1) >> 61) {
          goto LABEL_296;
        }
        unint64_t v176 = v173 - (void)v167;
        unint64_t v177 = (uint64_t)(v173 - (void)v167) >> 2;
        if (v177 <= v175 + 1) {
          unint64_t v177 = v175 + 1;
        }
        if (v176 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v178 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v178 = v177;
        }
        if (v178)
        {
          unint64_t v179 = (char *)sub_5714((uint64_t)(v163 + 180), v178);
          uint64_t v165 = (uint64_t *)v163[179];
          int v167 = (uint64_t *)v163[178];
        }
        else
        {
          unint64_t v179 = 0;
        }
        uint64_t v180 = (uint64_t *)&v179[8 * v175];
        unint64_t v181 = &v179[8 * v178];
        uint64_t *v180 = v164;
        unint64_t v174 = v180 + 1;
        while (v165 != v167)
        {
          uint64_t v183 = *--v165;
          *--uint64_t v180 = v183;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v162 != 1) {
        goto LABEL_262;
      }
      uint64_t v163 = *(void **)a1[1];
      uint64_t v164 = *(_DWORD *)(a1[2] + 40) & 0x3FFFFLL;
      uint64_t v165 = (uint64_t *)v163[179];
      unint64_t v166 = v163[180];
      if ((unint64_t)v165 >= v166)
      {
        int v167 = (uint64_t *)v163[178];
        uint64_t v168 = v165 - v167;
        if ((unint64_t)(v168 + 1) >> 61) {
          goto LABEL_296;
        }
        unint64_t v169 = v166 - (void)v167;
        unint64_t v170 = (uint64_t)(v166 - (void)v167) >> 2;
        if (v170 <= v168 + 1) {
          unint64_t v170 = v168 + 1;
        }
        if (v169 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v171 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v171 = v170;
        }
        if (v171)
        {
          unint64_t v172 = (char *)sub_5714((uint64_t)(v163 + 180), v171);
          uint64_t v165 = (uint64_t *)v163[179];
          int v167 = (uint64_t *)v163[178];
        }
        else
        {
          unint64_t v172 = 0;
        }
        uint64_t v180 = (uint64_t *)&v172[8 * v168];
        unint64_t v181 = &v172[8 * v171];
        uint64_t *v180 = v164;
        unint64_t v174 = v180 + 1;
        while (v165 != v167)
        {
          uint64_t v182 = *--v165;
          *--uint64_t v180 = v182;
        }
LABEL_259:
        v163[178] = v180;
        v163[179] = v174;
        v163[180] = v181;
        if (v167) {
          operator delete(v167);
        }
        goto LABEL_261;
      }
    }
    *uint64_t v165 = v164;
    unint64_t v174 = v165 + 1;
LABEL_261:
    v163[179] = v174;
LABEL_262:
    int v184 = 1 << *(_DWORD *)(v3 + 48);
    if (v184 == 2)
    {
      uint64_t v196 = a1[2];
      unint64_t v186 = *(void **)a1[1];
      uint64_t v187 = *(_DWORD *)(v196 + 48) & 0x3FFFFLL;
      uint64_t v188 = (uint64_t *)v186[182];
      unint64_t v197 = v186[183];
      if ((unint64_t)v188 >= v197)
      {
        unint64_t v190 = (uint64_t *)v186[181];
        uint64_t v199 = v188 - v190;
        if (!((unint64_t)(v199 + 1) >> 61))
        {
          unint64_t v200 = v197 - (void)v190;
          unint64_t v201 = (uint64_t)(v197 - (void)v190) >> 2;
          if (v201 <= v199 + 1) {
            unint64_t v201 = v199 + 1;
          }
          if (v200 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v202 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v202 = v201;
          }
          if (v202)
          {
            unint64_t v203 = (char *)sub_5714((uint64_t)(v186 + 183), v202);
            uint64_t v188 = (uint64_t *)v186[182];
            unint64_t v190 = (uint64_t *)v186[181];
          }
          else
          {
            unint64_t v203 = 0;
          }
          unint64_t v204 = (uint64_t *)&v203[8 * v199];
          unint64_t v205 = &v203[8 * v202];
          *unint64_t v204 = v187;
          unint64_t v198 = v204 + 1;
          while (v188 != v190)
          {
            uint64_t v207 = *--v188;
            *--unint64_t v204 = v207;
          }
          goto LABEL_291;
        }
LABEL_296:
        sub_566C();
      }
    }
    else
    {
      if (v184 != 1)
      {
LABEL_294:
        *a2 = 1;
        return;
      }
      uint64_t v185 = a1[2];
      unint64_t v186 = *(void **)a1[1];
      uint64_t v187 = *(_DWORD *)(v185 + 48) & 0x3FFFFLL;
      uint64_t v188 = (uint64_t *)v186[182];
      unint64_t v189 = v186[183];
      if ((unint64_t)v188 >= v189)
      {
        unint64_t v190 = (uint64_t *)v186[181];
        uint64_t v191 = v188 - v190;
        if (!((unint64_t)(v191 + 1) >> 61))
        {
          unint64_t v192 = v189 - (void)v190;
          unint64_t v193 = (uint64_t)(v189 - (void)v190) >> 2;
          if (v193 <= v191 + 1) {
            unint64_t v193 = v191 + 1;
          }
          if (v192 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v194 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v194 = v193;
          }
          if (v194)
          {
            uint64_t v195 = (char *)sub_5714((uint64_t)(v186 + 183), v194);
            uint64_t v188 = (uint64_t *)v186[182];
            unint64_t v190 = (uint64_t *)v186[181];
          }
          else
          {
            uint64_t v195 = 0;
          }
          unint64_t v204 = (uint64_t *)&v195[8 * v191];
          unint64_t v205 = &v195[8 * v194];
          *unint64_t v204 = v187;
          unint64_t v198 = v204 + 1;
          while (v188 != v190)
          {
            uint64_t v206 = *--v188;
            *--unint64_t v204 = v206;
          }
LABEL_291:
          v186[181] = v204;
          v186[182] = v198;
          v186[183] = v205;
          if (v190) {
            operator delete(v190);
          }
          goto LABEL_293;
        }
        goto LABEL_296;
      }
    }
    *uint64_t v188 = v187;
    unint64_t v198 = v188 + 1;
LABEL_293:
    v186[182] = v198;
    goto LABEL_294;
  }
  int v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    unsigned int v17 = (unsigned int *)a1[2];
    uint64_t v18 = *(void **)a1[1];
    *(void *)(v18[158] - 8) += v17[7] & 0x3FFFF;
    *(void *)(v18[161] - 8) += v17[8] & 0x3FFFF;
    *(void *)(v18[164] - 8) += ((unint64_t)v17[5] >> 1) & 0x3FFFF;
    *(void *)(v18[167] - 8) += v17[6] & 0x3FFFF;
    *(void *)(v18[170] - 8) += v17[13] & 0x3FFFF;
    *(void *)(v18[173] - 8) += v17[9] & 0x3FFFF;
    *(void *)(v18[176] - 8) += v17[11] & 0x3FFFF;
    *(void *)(v18[179] - 8) += v17[10] & 0x3FFFF;
    *(void *)(v18[182] - 8) += v17[12] & 0x3FFFF;
  }
}

void sub_CDA9C(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    int v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_DWORD *)(a1[2] + 44) & 0x1FFFFFLL;
      uint64_t v8 = (uint64_t *)v6[962];
      unint64_t v19 = v6[963];
      if ((unint64_t)v8 >= v19)
      {
        unint64_t v10 = (uint64_t *)v6[961];
        uint64_t v21 = v8 - v10;
        if ((unint64_t)(v21 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v22 = v19 - (void)v10;
        unint64_t v23 = (uint64_t)(v19 - (void)v10) >> 2;
        if (v23 <= v21 + 1) {
          unint64_t v23 = v21 + 1;
        }
        if (v22 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v23;
        }
        if (v24)
        {
          unint64_t v25 = (char *)sub_5714((uint64_t)(v6 + 963), v24);
          uint64_t v8 = (uint64_t *)v6[962];
          unint64_t v10 = (uint64_t *)v6[961];
        }
        else
        {
          unint64_t v25 = 0;
        }
        unint64_t v26 = (uint64_t *)&v25[8 * v21];
        uint64_t v27 = &v25[8 * v24];
        *unint64_t v26 = v7;
        uint64_t v20 = v26 + 1;
        while (v8 != v10)
        {
          uint64_t v29 = *--v8;
          *--unint64_t v26 = v29;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1) {
        goto LABEL_38;
      }
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_DWORD *)(a1[2] + 44) & 0x1FFFFFLL;
      uint64_t v8 = (uint64_t *)v6[962];
      unint64_t v9 = v6[963];
      if ((unint64_t)v8 >= v9)
      {
        unint64_t v10 = (uint64_t *)v6[961];
        uint64_t v11 = v8 - v10;
        if ((unint64_t)(v11 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v12 = v9 - (void)v10;
        unint64_t v13 = (uint64_t)(v9 - (void)v10) >> 2;
        if (v13 <= v11 + 1) {
          unint64_t v13 = v11 + 1;
        }
        if (v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14)
        {
          unint64_t v15 = (char *)sub_5714((uint64_t)(v6 + 963), v14);
          uint64_t v8 = (uint64_t *)v6[962];
          unint64_t v10 = (uint64_t *)v6[961];
        }
        else
        {
          unint64_t v15 = 0;
        }
        unint64_t v26 = (uint64_t *)&v15[8 * v11];
        uint64_t v27 = &v15[8 * v14];
        *unint64_t v26 = v7;
        uint64_t v20 = v26 + 1;
        while (v8 != v10)
        {
          uint64_t v28 = *--v8;
          *--unint64_t v26 = v28;
        }
LABEL_35:
        v6[961] = v26;
        v6[962] = v20;
        v6[963] = v27;
        if (v10) {
          operator delete(v10);
        }
        goto LABEL_37;
      }
    }
    *uint64_t v8 = v7;
    uint64_t v20 = v8 + 1;
LABEL_37:
    v6[962] = v20;
LABEL_38:
    int v30 = 1 << *(_DWORD *)(v3 + 48);
    if (v30 == 2)
    {
      unint64_t v31 = *(void **)a1[1];
      uint64_t v32 = *(_DWORD *)(a1[2] + 48) & 0x1FFFFFLL;
      int v33 = (uint64_t *)v31[965];
      unint64_t v41 = v31[966];
      if ((unint64_t)v33 >= v41)
      {
        uint64_t v35 = (uint64_t *)v31[964];
        uint64_t v43 = v33 - v35;
        if ((unint64_t)(v43 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v44 = v41 - (void)v35;
        unint64_t v45 = (uint64_t)(v41 - (void)v35) >> 2;
        if (v45 <= v43 + 1) {
          unint64_t v45 = v43 + 1;
        }
        if (v44 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v46 = v45;
        }
        if (v46)
        {
          unint64_t v47 = (char *)sub_5714((uint64_t)(v31 + 966), v46);
          int v33 = (uint64_t *)v31[965];
          uint64_t v35 = (uint64_t *)v31[964];
        }
        else
        {
          unint64_t v47 = 0;
        }
        unint64_t v48 = (uint64_t *)&v47[8 * v43];
        uint64_t v49 = &v47[8 * v46];
        *unint64_t v48 = v32;
        uint64_t v42 = v48 + 1;
        while (v33 != v35)
        {
          uint64_t v51 = *--v33;
          *--unint64_t v48 = v51;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v30 != 1) {
        goto LABEL_70;
      }
      unint64_t v31 = *(void **)a1[1];
      uint64_t v32 = *(_DWORD *)(a1[2] + 48) & 0x1FFFFFLL;
      int v33 = (uint64_t *)v31[965];
      unint64_t v34 = v31[966];
      if ((unint64_t)v33 >= v34)
      {
        uint64_t v35 = (uint64_t *)v31[964];
        uint64_t v36 = v33 - v35;
        if ((unint64_t)(v36 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v37 = v34 - (void)v35;
        unint64_t v38 = (uint64_t)(v34 - (void)v35) >> 2;
        if (v38 <= v36 + 1) {
          unint64_t v38 = v36 + 1;
        }
        if (v37 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v39 = v38;
        }
        if (v39)
        {
          uint64_t v40 = (char *)sub_5714((uint64_t)(v31 + 966), v39);
          int v33 = (uint64_t *)v31[965];
          uint64_t v35 = (uint64_t *)v31[964];
        }
        else
        {
          uint64_t v40 = 0;
        }
        unint64_t v48 = (uint64_t *)&v40[8 * v36];
        uint64_t v49 = &v40[8 * v39];
        *unint64_t v48 = v32;
        uint64_t v42 = v48 + 1;
        while (v33 != v35)
        {
          uint64_t v50 = *--v33;
          *--unint64_t v48 = v50;
        }
LABEL_67:
        v31[964] = v48;
        v31[965] = v42;
        v31[966] = v49;
        if (v35) {
          operator delete(v35);
        }
        goto LABEL_69;
      }
    }
    uint64_t *v33 = v32;
    uint64_t v42 = v33 + 1;
LABEL_69:
    v31[965] = v42;
LABEL_70:
    int v52 = 1 << *(_DWORD *)(v3 + 48);
    if (v52 == 2)
    {
      unint64_t v53 = *(void **)a1[1];
      uint64_t v54 = *(_WORD *)(a1[2] + 56) & 0x7FFF;
      unint64_t v55 = (char *)v53[968];
      unint64_t v63 = v53[969];
      if ((unint64_t)v55 >= v63)
      {
        uint64_t v57 = (char *)v53[967];
        uint64_t v65 = (v55 - v57) >> 3;
        if ((unint64_t)(v65 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v66 = v63 - (void)v57;
        unint64_t v67 = (uint64_t)(v63 - (void)v57) >> 2;
        if (v67 <= v65 + 1) {
          unint64_t v67 = v65 + 1;
        }
        if (v66 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v68 = v67;
        }
        if (v68)
        {
          unint64_t v69 = (char *)sub_5714((uint64_t)(v53 + 969), v68);
          unint64_t v55 = (char *)v53[968];
          uint64_t v57 = (char *)v53[967];
        }
        else
        {
          unint64_t v69 = 0;
        }
        uint64_t v70 = &v69[8 * v65];
        int v71 = &v69[8 * v68];
        *(void *)uint64_t v70 = v54;
        unint64_t v64 = v70 + 8;
        while (v55 != v57)
        {
          uint64_t v73 = *((void *)v55 - 1);
          v55 -= 8;
          *((void *)v70 - 1) = v73;
          v70 -= 8;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v52 != 1) {
        goto LABEL_102;
      }
      unint64_t v53 = *(void **)a1[1];
      uint64_t v54 = *(_WORD *)(a1[2] + 56) & 0x7FFF;
      unint64_t v55 = (char *)v53[968];
      unint64_t v56 = v53[969];
      if ((unint64_t)v55 >= v56)
      {
        uint64_t v57 = (char *)v53[967];
        uint64_t v58 = (v55 - v57) >> 3;
        if ((unint64_t)(v58 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v59 = v56 - (void)v57;
        unint64_t v60 = (uint64_t)(v56 - (void)v57) >> 2;
        if (v60 <= v58 + 1) {
          unint64_t v60 = v58 + 1;
        }
        if (v59 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v61 = v60;
        }
        if (v61)
        {
          unint64_t v62 = (char *)sub_5714((uint64_t)(v53 + 969), v61);
          unint64_t v55 = (char *)v53[968];
          uint64_t v57 = (char *)v53[967];
        }
        else
        {
          unint64_t v62 = 0;
        }
        uint64_t v70 = &v62[8 * v58];
        int v71 = &v62[8 * v61];
        *(void *)uint64_t v70 = v54;
        unint64_t v64 = v70 + 8;
        while (v55 != v57)
        {
          uint64_t v72 = *((void *)v55 - 1);
          v55 -= 8;
          *((void *)v70 - 1) = v72;
          v70 -= 8;
        }
LABEL_99:
        v53[967] = v70;
        v53[968] = v64;
        v53[969] = v71;
        if (v57) {
          operator delete(v57);
        }
        goto LABEL_101;
      }
    }
    *(void *)unint64_t v55 = v54;
    unint64_t v64 = v55 + 8;
LABEL_101:
    v53[968] = v64;
LABEL_102:
    int v74 = 1 << *(_DWORD *)(v3 + 48);
    if (v74 == 2)
    {
      unint64_t v75 = *(void **)a1[1];
      uint64_t v76 = *(_DWORD *)(a1[2] + 52) & 0x1FFFFFLL;
      uint64_t v77 = (uint64_t *)v75[971];
      unint64_t v85 = v75[972];
      if ((unint64_t)v77 >= v85)
      {
        unint64_t v79 = (uint64_t *)v75[970];
        uint64_t v87 = v77 - v79;
        if ((unint64_t)(v87 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v88 = v85 - (void)v79;
        unint64_t v89 = (uint64_t)(v85 - (void)v79) >> 2;
        if (v89 <= v87 + 1) {
          unint64_t v89 = v87 + 1;
        }
        if (v88 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v90 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v90 = v89;
        }
        if (v90)
        {
          uint64_t v91 = (char *)sub_5714((uint64_t)(v75 + 972), v90);
          uint64_t v77 = (uint64_t *)v75[971];
          unint64_t v79 = (uint64_t *)v75[970];
        }
        else
        {
          uint64_t v91 = 0;
        }
        uint64_t v92 = (uint64_t *)&v91[8 * v87];
        int v93 = &v91[8 * v90];
        uint64_t *v92 = v76;
        unint64_t v86 = v92 + 1;
        while (v77 != v79)
        {
          uint64_t v95 = *--v77;
          *--uint64_t v92 = v95;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v74 != 1) {
        goto LABEL_134;
      }
      unint64_t v75 = *(void **)a1[1];
      uint64_t v76 = *(_DWORD *)(a1[2] + 52) & 0x1FFFFFLL;
      uint64_t v77 = (uint64_t *)v75[971];
      unint64_t v78 = v75[972];
      if ((unint64_t)v77 >= v78)
      {
        unint64_t v79 = (uint64_t *)v75[970];
        uint64_t v80 = v77 - v79;
        if ((unint64_t)(v80 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v81 = v78 - (void)v79;
        unint64_t v82 = (uint64_t)(v78 - (void)v79) >> 2;
        if (v82 <= v80 + 1) {
          unint64_t v82 = v80 + 1;
        }
        if (v81 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v83 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v83 = v82;
        }
        if (v83)
        {
          uint64_t v84 = (char *)sub_5714((uint64_t)(v75 + 972), v83);
          uint64_t v77 = (uint64_t *)v75[971];
          unint64_t v79 = (uint64_t *)v75[970];
        }
        else
        {
          uint64_t v84 = 0;
        }
        uint64_t v92 = (uint64_t *)&v84[8 * v80];
        int v93 = &v84[8 * v83];
        uint64_t *v92 = v76;
        unint64_t v86 = v92 + 1;
        while (v77 != v79)
        {
          uint64_t v94 = *--v77;
          *--uint64_t v92 = v94;
        }
LABEL_131:
        v75[970] = v92;
        v75[971] = v86;
        v75[972] = v93;
        if (v79) {
          operator delete(v79);
        }
        goto LABEL_133;
      }
    }
    *uint64_t v77 = v76;
    unint64_t v86 = v77 + 1;
LABEL_133:
    v75[971] = v86;
LABEL_134:
    int v96 = 1 << *(_DWORD *)(v3 + 48);
    if (v96 == 2)
    {
      unint64_t v97 = *(void **)a1[1];
      uint64_t v98 = *(_DWORD *)(a1[2] + 32) & 0x7FFFFLL;
      uint64_t v99 = (uint64_t *)v97[974];
      unint64_t v107 = v97[975];
      if ((unint64_t)v99 >= v107)
      {
        unint64_t v101 = (uint64_t *)v97[973];
        uint64_t v109 = v99 - v101;
        if ((unint64_t)(v109 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v110 = v107 - (void)v101;
        unint64_t v111 = (uint64_t)(v107 - (void)v101) >> 2;
        if (v111 <= v109 + 1) {
          unint64_t v111 = v109 + 1;
        }
        if (v110 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v112 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v112 = v111;
        }
        if (v112)
        {
          unint64_t v113 = (char *)sub_5714((uint64_t)(v97 + 975), v112);
          uint64_t v99 = (uint64_t *)v97[974];
          unint64_t v101 = (uint64_t *)v97[973];
        }
        else
        {
          unint64_t v113 = 0;
        }
        unint64_t v114 = (uint64_t *)&v113[8 * v109];
        unint64_t v115 = &v113[8 * v112];
        *unint64_t v114 = v98;
        unint64_t v108 = v114 + 1;
        while (v99 != v101)
        {
          uint64_t v117 = *--v99;
          *--unint64_t v114 = v117;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v96 != 1) {
        goto LABEL_166;
      }
      unint64_t v97 = *(void **)a1[1];
      uint64_t v98 = *(_DWORD *)(a1[2] + 32) & 0x7FFFFLL;
      uint64_t v99 = (uint64_t *)v97[974];
      unint64_t v100 = v97[975];
      if ((unint64_t)v99 >= v100)
      {
        unint64_t v101 = (uint64_t *)v97[973];
        uint64_t v102 = v99 - v101;
        if ((unint64_t)(v102 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v103 = v100 - (void)v101;
        unint64_t v104 = (uint64_t)(v100 - (void)v101) >> 2;
        if (v104 <= v102 + 1) {
          unint64_t v104 = v102 + 1;
        }
        if (v103 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v105 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v105 = v104;
        }
        if (v105)
        {
          uint64_t v106 = (char *)sub_5714((uint64_t)(v97 + 975), v105);
          uint64_t v99 = (uint64_t *)v97[974];
          unint64_t v101 = (uint64_t *)v97[973];
        }
        else
        {
          uint64_t v106 = 0;
        }
        unint64_t v114 = (uint64_t *)&v106[8 * v102];
        unint64_t v115 = &v106[8 * v105];
        *unint64_t v114 = v98;
        unint64_t v108 = v114 + 1;
        while (v99 != v101)
        {
          uint64_t v116 = *--v99;
          *--unint64_t v114 = v116;
        }
LABEL_163:
        v97[973] = v114;
        v97[974] = v108;
        v97[975] = v115;
        if (v101) {
          operator delete(v101);
        }
        goto LABEL_165;
      }
    }
    *uint64_t v99 = v98;
    unint64_t v108 = v99 + 1;
LABEL_165:
    v97[974] = v108;
LABEL_166:
    int v118 = 1 << *(_DWORD *)(v3 + 48);
    if (v118 == 2)
    {
      uint64_t v119 = *(void **)a1[1];
      uint64_t v120 = *(_DWORD *)(a1[2] + 24) & 0x7FFFFLL;
      uint64_t v121 = (uint64_t *)v119[977];
      unint64_t v129 = v119[978];
      if ((unint64_t)v121 >= v129)
      {
        unint64_t v123 = (uint64_t *)v119[976];
        uint64_t v131 = v121 - v123;
        if ((unint64_t)(v131 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v132 = v129 - (void)v123;
        unint64_t v133 = (uint64_t)(v129 - (void)v123) >> 2;
        if (v133 <= v131 + 1) {
          unint64_t v133 = v131 + 1;
        }
        if (v132 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v134 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v134 = v133;
        }
        if (v134)
        {
          uint64_t v135 = (char *)sub_5714((uint64_t)(v119 + 978), v134);
          uint64_t v121 = (uint64_t *)v119[977];
          unint64_t v123 = (uint64_t *)v119[976];
        }
        else
        {
          uint64_t v135 = 0;
        }
        unint64_t v136 = (uint64_t *)&v135[8 * v131];
        unint64_t v137 = &v135[8 * v134];
        uint64_t *v136 = v120;
        uint64_t v130 = v136 + 1;
        while (v121 != v123)
        {
          uint64_t v139 = *--v121;
          *--unint64_t v136 = v139;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v118 != 1) {
        goto LABEL_198;
      }
      uint64_t v119 = *(void **)a1[1];
      uint64_t v120 = *(_DWORD *)(a1[2] + 24) & 0x7FFFFLL;
      uint64_t v121 = (uint64_t *)v119[977];
      unint64_t v122 = v119[978];
      if ((unint64_t)v121 >= v122)
      {
        unint64_t v123 = (uint64_t *)v119[976];
        uint64_t v124 = v121 - v123;
        if ((unint64_t)(v124 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v125 = v122 - (void)v123;
        unint64_t v126 = (uint64_t)(v122 - (void)v123) >> 2;
        if (v126 <= v124 + 1) {
          unint64_t v126 = v124 + 1;
        }
        if (v125 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v127 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v127 = v126;
        }
        if (v127)
        {
          uint64_t v128 = (char *)sub_5714((uint64_t)(v119 + 978), v127);
          uint64_t v121 = (uint64_t *)v119[977];
          unint64_t v123 = (uint64_t *)v119[976];
        }
        else
        {
          uint64_t v128 = 0;
        }
        unint64_t v136 = (uint64_t *)&v128[8 * v124];
        unint64_t v137 = &v128[8 * v127];
        uint64_t *v136 = v120;
        uint64_t v130 = v136 + 1;
        while (v121 != v123)
        {
          uint64_t v138 = *--v121;
          *--unint64_t v136 = v138;
        }
LABEL_195:
        v119[976] = v136;
        v119[977] = v130;
        v119[978] = v137;
        if (v123) {
          operator delete(v123);
        }
        goto LABEL_197;
      }
    }
    uint64_t *v121 = v120;
    uint64_t v130 = v121 + 1;
LABEL_197:
    v119[977] = v130;
LABEL_198:
    int v140 = 1 << *(_DWORD *)(v3 + 48);
    if (v140 == 2)
    {
      uint64_t v141 = *(void **)a1[1];
      uint64_t v142 = *(_DWORD *)(a1[2] + 28) & 0x7FFFFLL;
      int v143 = (uint64_t *)v141[980];
      unint64_t v151 = v141[981];
      if ((unint64_t)v143 >= v151)
      {
        unint64_t v145 = (uint64_t *)v141[979];
        uint64_t v153 = v143 - v145;
        if ((unint64_t)(v153 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v154 = v151 - (void)v145;
        unint64_t v155 = (uint64_t)(v151 - (void)v145) >> 2;
        if (v155 <= v153 + 1) {
          unint64_t v155 = v153 + 1;
        }
        if (v154 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v156 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v156 = v155;
        }
        if (v156)
        {
          unint64_t v157 = (char *)sub_5714((uint64_t)(v141 + 981), v156);
          int v143 = (uint64_t *)v141[980];
          unint64_t v145 = (uint64_t *)v141[979];
        }
        else
        {
          unint64_t v157 = 0;
        }
        uint64_t v158 = (uint64_t *)&v157[8 * v153];
        unint64_t v159 = &v157[8 * v156];
        *uint64_t v158 = v142;
        unint64_t v152 = v158 + 1;
        while (v143 != v145)
        {
          uint64_t v161 = *--v143;
          *--uint64_t v158 = v161;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v140 != 1) {
        goto LABEL_230;
      }
      uint64_t v141 = *(void **)a1[1];
      uint64_t v142 = *(_DWORD *)(a1[2] + 28) & 0x7FFFFLL;
      int v143 = (uint64_t *)v141[980];
      unint64_t v144 = v141[981];
      if ((unint64_t)v143 >= v144)
      {
        unint64_t v145 = (uint64_t *)v141[979];
        uint64_t v146 = v143 - v145;
        if ((unint64_t)(v146 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v147 = v144 - (void)v145;
        unint64_t v148 = (uint64_t)(v144 - (void)v145) >> 2;
        if (v148 <= v146 + 1) {
          unint64_t v148 = v146 + 1;
        }
        if (v147 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v149 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v149 = v148;
        }
        if (v149)
        {
          uint64_t v150 = (char *)sub_5714((uint64_t)(v141 + 981), v149);
          int v143 = (uint64_t *)v141[980];
          unint64_t v145 = (uint64_t *)v141[979];
        }
        else
        {
          uint64_t v150 = 0;
        }
        uint64_t v158 = (uint64_t *)&v150[8 * v146];
        unint64_t v159 = &v150[8 * v149];
        *uint64_t v158 = v142;
        unint64_t v152 = v158 + 1;
        while (v143 != v145)
        {
          uint64_t v160 = *--v143;
          *--uint64_t v158 = v160;
        }
LABEL_227:
        v141[979] = v158;
        v141[980] = v152;
        v141[981] = v159;
        if (v145) {
          operator delete(v145);
        }
        goto LABEL_229;
      }
    }
    *int v143 = v142;
    unint64_t v152 = v143 + 1;
LABEL_229:
    v141[980] = v152;
LABEL_230:
    int v162 = 1 << *(_DWORD *)(v3 + 48);
    if (v162 == 2)
    {
      uint64_t v163 = *(void **)a1[1];
      uint64_t v164 = *(_DWORD *)(a1[2] + 20) & 0x7FFFFLL;
      uint64_t v165 = (uint64_t *)v163[983];
      unint64_t v173 = v163[984];
      if ((unint64_t)v165 >= v173)
      {
        int v167 = (uint64_t *)v163[982];
        uint64_t v175 = v165 - v167;
        if ((unint64_t)(v175 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v176 = v173 - (void)v167;
        unint64_t v177 = (uint64_t)(v173 - (void)v167) >> 2;
        if (v177 <= v175 + 1) {
          unint64_t v177 = v175 + 1;
        }
        if (v176 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v178 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v178 = v177;
        }
        if (v178)
        {
          unint64_t v179 = (char *)sub_5714((uint64_t)(v163 + 984), v178);
          uint64_t v165 = (uint64_t *)v163[983];
          int v167 = (uint64_t *)v163[982];
        }
        else
        {
          unint64_t v179 = 0;
        }
        uint64_t v180 = (uint64_t *)&v179[8 * v175];
        unint64_t v181 = &v179[8 * v178];
        uint64_t *v180 = v164;
        unint64_t v174 = v180 + 1;
        while (v165 != v167)
        {
          uint64_t v183 = *--v165;
          *--uint64_t v180 = v183;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v162 != 1) {
        goto LABEL_262;
      }
      uint64_t v163 = *(void **)a1[1];
      uint64_t v164 = *(_DWORD *)(a1[2] + 20) & 0x7FFFFLL;
      uint64_t v165 = (uint64_t *)v163[983];
      unint64_t v166 = v163[984];
      if ((unint64_t)v165 >= v166)
      {
        int v167 = (uint64_t *)v163[982];
        uint64_t v168 = v165 - v167;
        if ((unint64_t)(v168 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v169 = v166 - (void)v167;
        unint64_t v170 = (uint64_t)(v166 - (void)v167) >> 2;
        if (v170 <= v168 + 1) {
          unint64_t v170 = v168 + 1;
        }
        if (v169 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v171 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v171 = v170;
        }
        if (v171)
        {
          unint64_t v172 = (char *)sub_5714((uint64_t)(v163 + 984), v171);
          uint64_t v165 = (uint64_t *)v163[983];
          int v167 = (uint64_t *)v163[982];
        }
        else
        {
          unint64_t v172 = 0;
        }
        uint64_t v180 = (uint64_t *)&v172[8 * v168];
        unint64_t v181 = &v172[8 * v171];
        uint64_t *v180 = v164;
        unint64_t v174 = v180 + 1;
        while (v165 != v167)
        {
          uint64_t v182 = *--v165;
          *--uint64_t v180 = v182;
        }
LABEL_259:
        v163[982] = v180;
        v163[983] = v174;
        v163[984] = v181;
        if (v167) {
          operator delete(v167);
        }
        goto LABEL_261;
      }
    }
    *uint64_t v165 = v164;
    unint64_t v174 = v165 + 1;
LABEL_261:
    v163[983] = v174;
LABEL_262:
    int v184 = 1 << *(_DWORD *)(v3 + 48);
    if (v184 == 2)
    {
      uint64_t v185 = *(void **)a1[1];
      uint64_t v186 = *(_DWORD *)(a1[2] + 40) & 0x1FFFFFLL;
      uint64_t v187 = (uint64_t *)v185[986];
      unint64_t v195 = v185[987];
      if ((unint64_t)v187 >= v195)
      {
        unint64_t v189 = (uint64_t *)v185[985];
        uint64_t v197 = v187 - v189;
        if ((unint64_t)(v197 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v198 = v195 - (void)v189;
        unint64_t v199 = (uint64_t)(v195 - (void)v189) >> 2;
        if (v199 <= v197 + 1) {
          unint64_t v199 = v197 + 1;
        }
        if (v198 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v200 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v200 = v199;
        }
        if (v200)
        {
          unint64_t v201 = (char *)sub_5714((uint64_t)(v185 + 987), v200);
          uint64_t v187 = (uint64_t *)v185[986];
          unint64_t v189 = (uint64_t *)v185[985];
        }
        else
        {
          unint64_t v201 = 0;
        }
        unint64_t v202 = (uint64_t *)&v201[8 * v197];
        unint64_t v203 = &v201[8 * v200];
        *unint64_t v202 = v186;
        uint64_t v196 = v202 + 1;
        while (v187 != v189)
        {
          uint64_t v205 = *--v187;
          *--unint64_t v202 = v205;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v184 != 1) {
        goto LABEL_294;
      }
      uint64_t v185 = *(void **)a1[1];
      uint64_t v186 = *(_DWORD *)(a1[2] + 40) & 0x1FFFFFLL;
      uint64_t v187 = (uint64_t *)v185[986];
      unint64_t v188 = v185[987];
      if ((unint64_t)v187 >= v188)
      {
        unint64_t v189 = (uint64_t *)v185[985];
        uint64_t v190 = v187 - v189;
        if ((unint64_t)(v190 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v191 = v188 - (void)v189;
        unint64_t v192 = (uint64_t)(v188 - (void)v189) >> 2;
        if (v192 <= v190 + 1) {
          unint64_t v192 = v190 + 1;
        }
        if (v191 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v193 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v193 = v192;
        }
        if (v193)
        {
          unint64_t v194 = (char *)sub_5714((uint64_t)(v185 + 987), v193);
          uint64_t v187 = (uint64_t *)v185[986];
          unint64_t v189 = (uint64_t *)v185[985];
        }
        else
        {
          unint64_t v194 = 0;
        }
        unint64_t v202 = (uint64_t *)&v194[8 * v190];
        unint64_t v203 = &v194[8 * v193];
        *unint64_t v202 = v186;
        uint64_t v196 = v202 + 1;
        while (v187 != v189)
        {
          uint64_t v204 = *--v187;
          *--unint64_t v202 = v204;
        }
LABEL_291:
        v185[985] = v202;
        v185[986] = v196;
        v185[987] = v203;
        if (v189) {
          operator delete(v189);
        }
        goto LABEL_293;
      }
    }
    uint64_t *v187 = v186;
    uint64_t v196 = v187 + 1;
LABEL_293:
    v185[986] = v196;
LABEL_294:
    int v206 = 1 << *(_DWORD *)(v3 + 48);
    if (v206 == 2)
    {
      uint64_t v218 = a1[2];
      unint64_t v208 = *(void **)a1[1];
      uint64_t v209 = *(_DWORD *)(v218 + 36) & 0x1FFFFFLL;
      uint64_t v210 = (uint64_t *)v208[989];
      unint64_t v219 = v208[990];
      if ((unint64_t)v210 >= v219)
      {
        unint64_t v212 = (uint64_t *)v208[988];
        uint64_t v221 = v210 - v212;
        if (!((unint64_t)(v221 + 1) >> 61))
        {
          unint64_t v222 = v219 - (void)v212;
          unint64_t v223 = (uint64_t)(v219 - (void)v212) >> 2;
          if (v223 <= v221 + 1) {
            unint64_t v223 = v221 + 1;
          }
          if (v222 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v224 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v224 = v223;
          }
          if (v224)
          {
            unint64_t v225 = (char *)sub_5714((uint64_t)(v208 + 990), v224);
            uint64_t v210 = (uint64_t *)v208[989];
            unint64_t v212 = (uint64_t *)v208[988];
          }
          else
          {
            unint64_t v225 = 0;
          }
          unint64_t v226 = (uint64_t *)&v225[8 * v221];
          unint64_t v227 = &v225[8 * v224];
          *unint64_t v226 = v209;
          unint64_t v220 = v226 + 1;
          while (v210 != v212)
          {
            uint64_t v229 = *--v210;
            *--unint64_t v226 = v229;
          }
          goto LABEL_323;
        }
LABEL_328:
        sub_566C();
      }
    }
    else
    {
      if (v206 != 1)
      {
LABEL_326:
        *a2 = 1;
        return;
      }
      uint64_t v207 = a1[2];
      unint64_t v208 = *(void **)a1[1];
      uint64_t v209 = *(_DWORD *)(v207 + 36) & 0x1FFFFFLL;
      uint64_t v210 = (uint64_t *)v208[989];
      unint64_t v211 = v208[990];
      if ((unint64_t)v210 >= v211)
      {
        unint64_t v212 = (uint64_t *)v208[988];
        uint64_t v213 = v210 - v212;
        if (!((unint64_t)(v213 + 1) >> 61))
        {
          unint64_t v214 = v211 - (void)v212;
          unint64_t v215 = (uint64_t)(v211 - (void)v212) >> 2;
          if (v215 <= v213 + 1) {
            unint64_t v215 = v213 + 1;
          }
          if (v214 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v216 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v216 = v215;
          }
          if (v216)
          {
            uint64_t v217 = (char *)sub_5714((uint64_t)(v208 + 990), v216);
            uint64_t v210 = (uint64_t *)v208[989];
            unint64_t v212 = (uint64_t *)v208[988];
          }
          else
          {
            uint64_t v217 = 0;
          }
          unint64_t v226 = (uint64_t *)&v217[8 * v213];
          unint64_t v227 = &v217[8 * v216];
          *unint64_t v226 = v209;
          unint64_t v220 = v226 + 1;
          while (v210 != v212)
          {
            uint64_t v228 = *--v210;
            *--unint64_t v226 = v228;
          }
LABEL_323:
          v208[988] = v226;
          v208[989] = v220;
          v208[990] = v227;
          if (v212) {
            operator delete(v212);
          }
          goto LABEL_325;
        }
        goto LABEL_328;
      }
    }
    *uint64_t v210 = v209;
    unint64_t v220 = v210 + 1;
LABEL_325:
    v208[989] = v220;
    goto LABEL_326;
  }
  int v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    uint64_t v17 = a1[2];
    uint64_t v18 = *(void **)a1[1];
    *(void *)(v18[962] - 8) += *(_DWORD *)(v17 + 44) & 0x1FFFFF;
    *(void *)(v18[965] - 8) += *(_DWORD *)(v17 + 48) & 0x1FFFFF;
    *(void *)(v18[968] - 8) += *(_WORD *)(v17 + 56) & 0x7FFF;
    *(void *)(v18[971] - 8) += *(_DWORD *)(v17 + 52) & 0x1FFFFF;
    *(void *)(v18[974] - 8) += *(_DWORD *)(v17 + 32) & 0x7FFFF;
    *(void *)(v18[977] - 8) += *(_DWORD *)(v17 + 24) & 0x7FFFF;
    *(void *)(v18[980] - 8) += *(_DWORD *)(v17 + 28) & 0x7FFFF;
    *(void *)(v18[983] - 8) += *(_DWORD *)(v17 + 20) & 0x7FFFF;
    *(void *)(v18[986] - 8) += *(_DWORD *)(v17 + 40) & 0x1FFFFF;
    *(void *)(v18[989] - 8) += *(_DWORD *)(v17 + 36) & 0x1FFFFF;
  }
}

void sub_CEBAC(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    int v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_DWORD *)(a1[2] + 36) & 0x3FFFFFLL;
      uint64_t v8 = (uint64_t *)v6[869];
      unint64_t v22 = v6[870];
      if ((unint64_t)v8 >= v22)
      {
        unint64_t v10 = (uint64_t *)v6[868];
        uint64_t v24 = v8 - v10;
        if ((unint64_t)(v24 + 1) >> 61) {
          goto LABEL_520;
        }
        unint64_t v25 = v22 - (void)v10;
        unint64_t v26 = (uint64_t)(v22 - (void)v10) >> 2;
        if (v26 <= v24 + 1) {
          unint64_t v26 = v24 + 1;
        }
        if (v25 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v26;
        }
        if (v27)
        {
          uint64_t v28 = (char *)sub_5714((uint64_t)(v6 + 870), v27);
          uint64_t v8 = (uint64_t *)v6[869];
          unint64_t v10 = (uint64_t *)v6[868];
        }
        else
        {
          uint64_t v28 = 0;
        }
        uint64_t v29 = (uint64_t *)&v28[8 * v24];
        int v30 = &v28[8 * v27];
        uint64_t *v29 = v7;
        unint64_t v23 = v29 + 1;
        while (v8 != v10)
        {
          uint64_t v32 = *--v8;
          *--uint64_t v29 = v32;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1) {
        goto LABEL_38;
      }
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_DWORD *)(a1[2] + 36) & 0x3FFFFFLL;
      uint64_t v8 = (uint64_t *)v6[869];
      unint64_t v9 = v6[870];
      if ((unint64_t)v8 >= v9)
      {
        unint64_t v10 = (uint64_t *)v6[868];
        uint64_t v11 = v8 - v10;
        if ((unint64_t)(v11 + 1) >> 61) {
          goto LABEL_520;
        }
        unint64_t v12 = v9 - (void)v10;
        unint64_t v13 = (uint64_t)(v9 - (void)v10) >> 2;
        if (v13 <= v11 + 1) {
          unint64_t v13 = v11 + 1;
        }
        if (v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14)
        {
          unint64_t v15 = (char *)sub_5714((uint64_t)(v6 + 870), v14);
          uint64_t v8 = (uint64_t *)v6[869];
          unint64_t v10 = (uint64_t *)v6[868];
        }
        else
        {
          unint64_t v15 = 0;
        }
        uint64_t v29 = (uint64_t *)&v15[8 * v11];
        int v30 = &v15[8 * v14];
        uint64_t *v29 = v7;
        unint64_t v23 = v29 + 1;
        while (v8 != v10)
        {
          uint64_t v31 = *--v8;
          *--uint64_t v29 = v31;
        }
LABEL_35:
        v6[868] = v29;
        v6[869] = v23;
        v6[870] = v30;
        if (v10) {
          operator delete(v10);
        }
        goto LABEL_37;
      }
    }
    *uint64_t v8 = v7;
    unint64_t v23 = v8 + 1;
LABEL_37:
    v6[869] = v23;
LABEL_38:
    int v33 = 1 << *(_DWORD *)(v3 + 48);
    if (v33 == 2)
    {
      unint64_t v34 = *(void **)a1[1];
      uint64_t v35 = *(_DWORD *)(a1[2] + 68) & 0x3FFFFFLL;
      uint64_t v36 = (uint64_t *)v34[872];
      unint64_t v44 = v34[873];
      if ((unint64_t)v36 >= v44)
      {
        unint64_t v38 = (uint64_t *)v34[871];
        uint64_t v46 = v36 - v38;
        if ((unint64_t)(v46 + 1) >> 61) {
          goto LABEL_520;
        }
        unint64_t v47 = v44 - (void)v38;
        unint64_t v48 = (uint64_t)(v44 - (void)v38) >> 2;
        if (v48 <= v46 + 1) {
          unint64_t v48 = v46 + 1;
        }
        if (v47 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v49 = v48;
        }
        if (v49)
        {
          uint64_t v50 = (char *)sub_5714((uint64_t)(v34 + 873), v49);
          uint64_t v36 = (uint64_t *)v34[872];
          unint64_t v38 = (uint64_t *)v34[871];
        }
        else
        {
          uint64_t v50 = 0;
        }
        uint64_t v51 = (uint64_t *)&v50[8 * v46];
        int v52 = &v50[8 * v49];
        *uint64_t v51 = v35;
        unint64_t v45 = v51 + 1;
        while (v36 != v38)
        {
          uint64_t v54 = *--v36;
          *--uint64_t v51 = v54;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v33 != 1) {
        goto LABEL_70;
      }
      unint64_t v34 = *(void **)a1[1];
      uint64_t v35 = *(_DWORD *)(a1[2] + 68) & 0x3FFFFFLL;
      uint64_t v36 = (uint64_t *)v34[872];
      unint64_t v37 = v34[873];
      if ((unint64_t)v36 >= v37)
      {
        unint64_t v38 = (uint64_t *)v34[871];
        uint64_t v39 = v36 - v38;
        if ((unint64_t)(v39 + 1) >> 61) {
          goto LABEL_520;
        }
        unint64_t v40 = v37 - (void)v38;
        unint64_t v41 = (uint64_t)(v37 - (void)v38) >> 2;
        if (v41 <= v39 + 1) {
          unint64_t v41 = v39 + 1;
        }
        if (v40 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v42 = v41;
        }
        if (v42)
        {
          uint64_t v43 = (char *)sub_5714((uint64_t)(v34 + 873), v42);
          uint64_t v36 = (uint64_t *)v34[872];
          unint64_t v38 = (uint64_t *)v34[871];
        }
        else
        {
          uint64_t v43 = 0;
        }
        uint64_t v51 = (uint64_t *)&v43[8 * v39];
        int v52 = &v43[8 * v42];
        *uint64_t v51 = v35;
        unint64_t v45 = v51 + 1;
        while (v36 != v38)
        {
          uint64_t v53 = *--v36;
          *--uint64_t v51 = v53;
        }
LABEL_67:
        v34[871] = v51;
        v34[872] = v45;
        v34[873] = v52;
        if (v38) {
          operator delete(v38);
        }
        goto LABEL_69;
      }
    }
    uint64_t *v36 = v35;
    unint64_t v45 = v36 + 1;
LABEL_69:
    v34[872] = v45;
LABEL_70:
    int v55 = 1 << *(_DWORD *)(v3 + 48);
    if (v55 == 2)
    {
      unint64_t v56 = *(void **)a1[1];
      uint64_t v57 = *(_DWORD *)(a1[2] + 32) & 0x3FFFFFLL;
      uint64_t v58 = (uint64_t *)v56[875];
      unint64_t v66 = v56[876];
      if ((unint64_t)v58 >= v66)
      {
        unint64_t v60 = (uint64_t *)v56[874];
        uint64_t v68 = v58 - v60;
        if ((unint64_t)(v68 + 1) >> 61) {
          goto LABEL_520;
        }
        unint64_t v69 = v66 - (void)v60;
        unint64_t v70 = (uint64_t)(v66 - (void)v60) >> 2;
        if (v70 <= v68 + 1) {
          unint64_t v70 = v68 + 1;
        }
        if (v69 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v71 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v71 = v70;
        }
        if (v71)
        {
          uint64_t v72 = (char *)sub_5714((uint64_t)(v56 + 876), v71);
          uint64_t v58 = (uint64_t *)v56[875];
          unint64_t v60 = (uint64_t *)v56[874];
        }
        else
        {
          uint64_t v72 = 0;
        }
        uint64_t v73 = (uint64_t *)&v72[8 * v68];
        int v74 = &v72[8 * v71];
        *uint64_t v73 = v57;
        unint64_t v67 = v73 + 1;
        while (v58 != v60)
        {
          uint64_t v76 = *--v58;
          *--uint64_t v73 = v76;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v55 != 1) {
        goto LABEL_102;
      }
      unint64_t v56 = *(void **)a1[1];
      uint64_t v57 = *(_DWORD *)(a1[2] + 32) & 0x3FFFFFLL;
      uint64_t v58 = (uint64_t *)v56[875];
      unint64_t v59 = v56[876];
      if ((unint64_t)v58 >= v59)
      {
        unint64_t v60 = (uint64_t *)v56[874];
        uint64_t v61 = v58 - v60;
        if ((unint64_t)(v61 + 1) >> 61) {
          goto LABEL_520;
        }
        unint64_t v62 = v59 - (void)v60;
        unint64_t v63 = (uint64_t)(v59 - (void)v60) >> 2;
        if (v63 <= v61 + 1) {
          unint64_t v63 = v61 + 1;
        }
        if (v62 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v64 = v63;
        }
        if (v64)
        {
          uint64_t v65 = (char *)sub_5714((uint64_t)(v56 + 876), v64);
          uint64_t v58 = (uint64_t *)v56[875];
          unint64_t v60 = (uint64_t *)v56[874];
        }
        else
        {
          uint64_t v65 = 0;
        }
        uint64_t v73 = (uint64_t *)&v65[8 * v61];
        int v74 = &v65[8 * v64];
        *uint64_t v73 = v57;
        unint64_t v67 = v73 + 1;
        while (v58 != v60)
        {
          uint64_t v75 = *--v58;
          *--uint64_t v73 = v75;
        }
LABEL_99:
        v56[874] = v73;
        v56[875] = v67;
        v56[876] = v74;
        if (v60) {
          operator delete(v60);
        }
        goto LABEL_101;
      }
    }
    *uint64_t v58 = v57;
    unint64_t v67 = v58 + 1;
LABEL_101:
    v56[875] = v67;
LABEL_102:
    int v77 = 1 << *(_DWORD *)(v3 + 48);
    if (v77 == 2)
    {
      unint64_t v78 = *(void **)a1[1];
      uint64_t v79 = *(_DWORD *)(a1[2] + 64) & 0x3FFFFFLL;
      uint64_t v80 = (uint64_t *)v78[878];
      unint64_t v88 = v78[879];
      if ((unint64_t)v80 >= v88)
      {
        unint64_t v82 = (uint64_t *)v78[877];
        uint64_t v90 = v80 - v82;
        if ((unint64_t)(v90 + 1) >> 61) {
          goto LABEL_520;
        }
        unint64_t v91 = v88 - (void)v82;
        unint64_t v92 = (uint64_t)(v88 - (void)v82) >> 2;
        if (v92 <= v90 + 1) {
          unint64_t v92 = v90 + 1;
        }
        if (v91 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v93 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v93 = v92;
        }
        if (v93)
        {
          uint64_t v94 = (char *)sub_5714((uint64_t)(v78 + 879), v93);
          uint64_t v80 = (uint64_t *)v78[878];
          unint64_t v82 = (uint64_t *)v78[877];
        }
        else
        {
          uint64_t v94 = 0;
        }
        uint64_t v95 = (uint64_t *)&v94[8 * v90];
        int v96 = &v94[8 * v93];
        *uint64_t v95 = v79;
        unint64_t v89 = v95 + 1;
        while (v80 != v82)
        {
          uint64_t v98 = *--v80;
          *--uint64_t v95 = v98;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v77 != 1) {
        goto LABEL_134;
      }
      unint64_t v78 = *(void **)a1[1];
      uint64_t v79 = *(_DWORD *)(a1[2] + 64) & 0x3FFFFFLL;
      uint64_t v80 = (uint64_t *)v78[878];
      unint64_t v81 = v78[879];
      if ((unint64_t)v80 >= v81)
      {
        unint64_t v82 = (uint64_t *)v78[877];
        uint64_t v83 = v80 - v82;
        if ((unint64_t)(v83 + 1) >> 61) {
          goto LABEL_520;
        }
        unint64_t v84 = v81 - (void)v82;
        unint64_t v85 = (uint64_t)(v81 - (void)v82) >> 2;
        if (v85 <= v83 + 1) {
          unint64_t v85 = v83 + 1;
        }
        if (v84 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v86 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v86 = v85;
        }
        if (v86)
        {
          uint64_t v87 = (char *)sub_5714((uint64_t)(v78 + 879), v86);
          uint64_t v80 = (uint64_t *)v78[878];
          unint64_t v82 = (uint64_t *)v78[877];
        }
        else
        {
          uint64_t v87 = 0;
        }
        uint64_t v95 = (uint64_t *)&v87[8 * v83];
        int v96 = &v87[8 * v86];
        *uint64_t v95 = v79;
        unint64_t v89 = v95 + 1;
        while (v80 != v82)
        {
          uint64_t v97 = *--v80;
          *--uint64_t v95 = v97;
        }
LABEL_131:
        v78[877] = v95;
        v78[878] = v89;
        v78[879] = v96;
        if (v82) {
          operator delete(v82);
        }
        goto LABEL_133;
      }
    }
    *uint64_t v80 = v79;
    unint64_t v89 = v80 + 1;
LABEL_133:
    v78[878] = v89;
LABEL_134:
    int v99 = 1 << *(_DWORD *)(v3 + 48);
    if (v99 == 2)
    {
      unint64_t v100 = *(void **)a1[1];
      uint64_t v101 = *(_DWORD *)(a1[2] + 28) & 0x3FFFFFLL;
      uint64_t v102 = (uint64_t *)v100[881];
      unint64_t v110 = v100[882];
      if ((unint64_t)v102 >= v110)
      {
        unint64_t v104 = (uint64_t *)v100[880];
        uint64_t v112 = v102 - v104;
        if ((unint64_t)(v112 + 1) >> 61) {
          goto LABEL_520;
        }
        unint64_t v113 = v110 - (void)v104;
        unint64_t v114 = (uint64_t)(v110 - (void)v104) >> 2;
        if (v114 <= v112 + 1) {
          unint64_t v114 = v112 + 1;
        }
        if (v113 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v115 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v115 = v114;
        }
        if (v115)
        {
          uint64_t v116 = (char *)sub_5714((uint64_t)(v100 + 882), v115);
          uint64_t v102 = (uint64_t *)v100[881];
          unint64_t v104 = (uint64_t *)v100[880];
        }
        else
        {
          uint64_t v116 = 0;
        }
        uint64_t v117 = (uint64_t *)&v116[8 * v112];
        int v118 = &v116[8 * v115];
        *uint64_t v117 = v101;
        unint64_t v111 = v117 + 1;
        while (v102 != v104)
        {
          uint64_t v120 = *--v102;
          *--uint64_t v117 = v120;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v99 != 1) {
        goto LABEL_166;
      }
      unint64_t v100 = *(void **)a1[1];
      uint64_t v101 = *(_DWORD *)(a1[2] + 28) & 0x3FFFFFLL;
      uint64_t v102 = (uint64_t *)v100[881];
      unint64_t v103 = v100[882];
      if ((unint64_t)v102 >= v103)
      {
        unint64_t v104 = (uint64_t *)v100[880];
        uint64_t v105 = v102 - v104;
        if ((unint64_t)(v105 + 1) >> 61) {
          goto LABEL_520;
        }
        unint64_t v106 = v103 - (void)v104;
        unint64_t v107 = (uint64_t)(v103 - (void)v104) >> 2;
        if (v107 <= v105 + 1) {
          unint64_t v107 = v105 + 1;
        }
        if (v106 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v108 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v108 = v107;
        }
        if (v108)
        {
          uint64_t v109 = (char *)sub_5714((uint64_t)(v100 + 882), v108);
          uint64_t v102 = (uint64_t *)v100[881];
          unint64_t v104 = (uint64_t *)v100[880];
        }
        else
        {
          uint64_t v109 = 0;
        }
        uint64_t v117 = (uint64_t *)&v109[8 * v105];
        int v118 = &v109[8 * v108];
        *uint64_t v117 = v101;
        unint64_t v111 = v117 + 1;
        while (v102 != v104)
        {
          uint64_t v119 = *--v102;
          *--uint64_t v117 = v119;
        }
LABEL_163:
        v100[880] = v117;
        v100[881] = v111;
        v100[882] = v118;
        if (v104) {
          operator delete(v104);
        }
        goto LABEL_165;
      }
    }
    uint64_t *v102 = v101;
    unint64_t v111 = v102 + 1;
LABEL_165:
    v100[881] = v111;
LABEL_166:
    int v121 = 1 << *(_DWORD *)(v3 + 48);
    if (v121 == 2)
    {
      unint64_t v122 = *(void **)a1[1];
      uint64_t v123 = *(_DWORD *)(a1[2] + 60) & 0x3FFFFFLL;
      uint64_t v124 = (uint64_t *)v122[884];
      unint64_t v132 = v122[885];
      if ((unint64_t)v124 >= v132)
      {
        unint64_t v126 = (uint64_t *)v122[883];
        uint64_t v134 = v124 - v126;
        if ((unint64_t)(v134 + 1) >> 61) {
          goto LABEL_520;
        }
        unint64_t v135 = v132 - (void)v126;
        unint64_t v136 = (uint64_t)(v132 - (void)v126) >> 2;
        if (v136 <= v134 + 1) {
          unint64_t v136 = v134 + 1;
        }
        if (v135 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v137 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v137 = v136;
        }
        if (v137)
        {
          uint64_t v138 = (char *)sub_5714((uint64_t)(v122 + 885), v137);
          uint64_t v124 = (uint64_t *)v122[884];
          unint64_t v126 = (uint64_t *)v122[883];
        }
        else
        {
          uint64_t v138 = 0;
        }
        uint64_t v139 = (uint64_t *)&v138[8 * v134];
        int v140 = &v138[8 * v137];
        *uint64_t v139 = v123;
        unint64_t v133 = v139 + 1;
        while (v124 != v126)
        {
          uint64_t v142 = *--v124;
          *--uint64_t v139 = v142;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v121 != 1) {
        goto LABEL_198;
      }
      unint64_t v122 = *(void **)a1[1];
      uint64_t v123 = *(_DWORD *)(a1[2] + 60) & 0x3FFFFFLL;
      uint64_t v124 = (uint64_t *)v122[884];
      unint64_t v125 = v122[885];
      if ((unint64_t)v124 >= v125)
      {
        unint64_t v126 = (uint64_t *)v122[883];
        uint64_t v127 = v124 - v126;
        if ((unint64_t)(v127 + 1) >> 61) {
          goto LABEL_520;
        }
        unint64_t v128 = v125 - (void)v126;
        unint64_t v129 = (uint64_t)(v125 - (void)v126) >> 2;
        if (v129 <= v127 + 1) {
          unint64_t v129 = v127 + 1;
        }
        if (v128 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v130 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v130 = v129;
        }
        if (v130)
        {
          uint64_t v131 = (char *)sub_5714((uint64_t)(v122 + 885), v130);
          uint64_t v124 = (uint64_t *)v122[884];
          unint64_t v126 = (uint64_t *)v122[883];
        }
        else
        {
          uint64_t v131 = 0;
        }
        uint64_t v139 = (uint64_t *)&v131[8 * v127];
        int v140 = &v131[8 * v130];
        *uint64_t v139 = v123;
        unint64_t v133 = v139 + 1;
        while (v124 != v126)
        {
          uint64_t v141 = *--v124;
          *--uint64_t v139 = v141;
        }
LABEL_195:
        v122[883] = v139;
        v122[884] = v133;
        v122[885] = v140;
        if (v126) {
          operator delete(v126);
        }
        goto LABEL_197;
      }
    }
    uint64_t *v124 = v123;
    unint64_t v133 = v124 + 1;
LABEL_197:
    v122[884] = v133;
LABEL_198:
    int v143 = 1 << *(_DWORD *)(v3 + 48);
    if (v143 == 2)
    {
      unint64_t v144 = *(void **)a1[1];
      uint64_t v145 = *(_DWORD *)(a1[2] + 44) & 0x3FFFFFLL;
      uint64_t v146 = (uint64_t *)v144[887];
      unint64_t v154 = v144[888];
      if ((unint64_t)v146 >= v154)
      {
        unint64_t v148 = (uint64_t *)v144[886];
        uint64_t v156 = v146 - v148;
        if ((unint64_t)(v156 + 1) >> 61) {
          goto LABEL_520;
        }
        unint64_t v157 = v154 - (void)v148;
        unint64_t v158 = (uint64_t)(v154 - (void)v148) >> 2;
        if (v158 <= v156 + 1) {
          unint64_t v158 = v156 + 1;
        }
        if (v157 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v159 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v159 = v158;
        }
        if (v159)
        {
          uint64_t v160 = (char *)sub_5714((uint64_t)(v144 + 888), v159);
          uint64_t v146 = (uint64_t *)v144[887];
          unint64_t v148 = (uint64_t *)v144[886];
        }
        else
        {
          uint64_t v160 = 0;
        }
        uint64_t v161 = (uint64_t *)&v160[8 * v156];
        int v162 = &v160[8 * v159];
        uint64_t *v161 = v145;
        unint64_t v155 = v161 + 1;
        while (v146 != v148)
        {
          uint64_t v164 = *--v146;
          *--uint64_t v161 = v164;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v143 != 1) {
        goto LABEL_230;
      }
      unint64_t v144 = *(void **)a1[1];
      uint64_t v145 = *(_DWORD *)(a1[2] + 44) & 0x3FFFFFLL;
      uint64_t v146 = (uint64_t *)v144[887];
      unint64_t v147 = v144[888];
      if ((unint64_t)v146 >= v147)
      {
        unint64_t v148 = (uint64_t *)v144[886];
        uint64_t v149 = v146 - v148;
        if ((unint64_t)(v149 + 1) >> 61) {
          goto LABEL_520;
        }
        unint64_t v150 = v147 - (void)v148;
        unint64_t v151 = (uint64_t)(v147 - (void)v148) >> 2;
        if (v151 <= v149 + 1) {
          unint64_t v151 = v149 + 1;
        }
        if (v150 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v152 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v152 = v151;
        }
        if (v152)
        {
          uint64_t v153 = (char *)sub_5714((uint64_t)(v144 + 888), v152);
          uint64_t v146 = (uint64_t *)v144[887];
          unint64_t v148 = (uint64_t *)v144[886];
        }
        else
        {
          uint64_t v153 = 0;
        }
        uint64_t v161 = (uint64_t *)&v153[8 * v149];
        int v162 = &v153[8 * v152];
        uint64_t *v161 = v145;
        unint64_t v155 = v161 + 1;
        while (v146 != v148)
        {
          uint64_t v163 = *--v146;
          *--uint64_t v161 = v163;
        }
LABEL_227:
        v144[886] = v161;
        v144[887] = v155;
        v144[888] = v162;
        if (v148) {
          operator delete(v148);
        }
        goto LABEL_229;
      }
    }
    *uint64_t v146 = v145;
    unint64_t v155 = v146 + 1;
LABEL_229:
    v144[887] = v155;
LABEL_230:
    int v165 = 1 << *(_DWORD *)(v3 + 48);
    if (v165 == 2)
    {
      unint64_t v166 = *(void **)a1[1];
      uint64_t v167 = *(_DWORD *)(a1[2] + 76) & 0x3FFFFFLL;
      uint64_t v168 = (uint64_t *)v166[890];
      unint64_t v176 = v166[891];
      if ((unint64_t)v168 >= v176)
      {
        unint64_t v170 = (uint64_t *)v166[889];
        uint64_t v178 = v168 - v170;
        if ((unint64_t)(v178 + 1) >> 61) {
          goto LABEL_520;
        }
        unint64_t v179 = v176 - (void)v170;
        unint64_t v180 = (uint64_t)(v176 - (void)v170) >> 2;
        if (v180 <= v178 + 1) {
          unint64_t v180 = v178 + 1;
        }
        if (v179 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v181 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v181 = v180;
        }
        if (v181)
        {
          uint64_t v182 = (char *)sub_5714((uint64_t)(v166 + 891), v181);
          uint64_t v168 = (uint64_t *)v166[890];
          unint64_t v170 = (uint64_t *)v166[889];
        }
        else
        {
          uint64_t v182 = 0;
        }
        uint64_t v183 = (uint64_t *)&v182[8 * v178];
        int v184 = &v182[8 * v181];
        *uint64_t v183 = v167;
        unint64_t v177 = v183 + 1;
        while (v168 != v170)
        {
          uint64_t v186 = *--v168;
          *--uint64_t v183 = v186;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v165 != 1) {
        goto LABEL_262;
      }
      unint64_t v166 = *(void **)a1[1];
      uint64_t v167 = *(_DWORD *)(a1[2] + 76) & 0x3FFFFFLL;
      uint64_t v168 = (uint64_t *)v166[890];
      unint64_t v169 = v166[891];
      if ((unint64_t)v168 >= v169)
      {
        unint64_t v170 = (uint64_t *)v166[889];
        uint64_t v171 = v168 - v170;
        if ((unint64_t)(v171 + 1) >> 61) {
          goto LABEL_520;
        }
        unint64_t v172 = v169 - (void)v170;
        unint64_t v173 = (uint64_t)(v169 - (void)v170) >> 2;
        if (v173 <= v171 + 1) {
          unint64_t v173 = v171 + 1;
        }
        if (v172 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v174 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v174 = v173;
        }
        if (v174)
        {
          uint64_t v175 = (char *)sub_5714((uint64_t)(v166 + 891), v174);
          uint64_t v168 = (uint64_t *)v166[890];
          unint64_t v170 = (uint64_t *)v166[889];
        }
        else
        {
          uint64_t v175 = 0;
        }
        uint64_t v183 = (uint64_t *)&v175[8 * v171];
        int v184 = &v175[8 * v174];
        *uint64_t v183 = v167;
        unint64_t v177 = v183 + 1;
        while (v168 != v170)
        {
          uint64_t v185 = *--v168;
          *--uint64_t v183 = v185;
        }
LABEL_259:
        v166[889] = v183;
        v166[890] = v177;
        v166[891] = v184;
        if (v170) {
          operator delete(v170);
        }
        goto LABEL_261;
      }
    }
    *uint64_t v168 = v167;
    unint64_t v177 = v168 + 1;
LABEL_261:
    v166[890] = v177;
LABEL_262:
    int v187 = 1 << *(_DWORD *)(v3 + 48);
    if (v187 == 2)
    {
      unint64_t v188 = *(void **)a1[1];
      uint64_t v189 = *(_DWORD *)(a1[2] + 48) & 0x7FFFFLL;
      uint64_t v190 = (uint64_t *)v188[893];
      unint64_t v198 = v188[894];
      if ((unint64_t)v190 >= v198)
      {
        unint64_t v192 = (uint64_t *)v188[892];
        uint64_t v200 = v190 - v192;
        if ((unint64_t)(v200 + 1) >> 61) {
          goto LABEL_520;
        }
        unint64_t v201 = v198 - (void)v192;
        unint64_t v202 = (uint64_t)(v198 - (void)v192) >> 2;
        if (v202 <= v200 + 1) {
          unint64_t v202 = v200 + 1;
        }
        if (v201 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v203 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v203 = v202;
        }
        if (v203)
        {
          uint64_t v204 = (char *)sub_5714((uint64_t)(v188 + 894), v203);
          uint64_t v190 = (uint64_t *)v188[893];
          unint64_t v192 = (uint64_t *)v188[892];
        }
        else
        {
          uint64_t v204 = 0;
        }
        uint64_t v205 = (uint64_t *)&v204[8 * v200];
        int v206 = &v204[8 * v203];
        uint64_t *v205 = v189;
        unint64_t v199 = v205 + 1;
        while (v190 != v192)
        {
          uint64_t v208 = *--v190;
          *--uint64_t v205 = v208;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v187 != 1) {
        goto LABEL_294;
      }
      unint64_t v188 = *(void **)a1[1];
      uint64_t v189 = *(_DWORD *)(a1[2] + 48) & 0x7FFFFLL;
      uint64_t v190 = (uint64_t *)v188[893];
      unint64_t v191 = v188[894];
      if ((unint64_t)v190 >= v191)
      {
        unint64_t v192 = (uint64_t *)v188[892];
        uint64_t v193 = v190 - v192;
        if ((unint64_t)(v193 + 1) >> 61) {
          goto LABEL_520;
        }
        unint64_t v194 = v191 - (void)v192;
        unint64_t v195 = (uint64_t)(v191 - (void)v192) >> 2;
        if (v195 <= v193 + 1) {
          unint64_t v195 = v193 + 1;
        }
        if (v194 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v196 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v196 = v195;
        }
        if (v196)
        {
          uint64_t v197 = (char *)sub_5714((uint64_t)(v188 + 894), v196);
          uint64_t v190 = (uint64_t *)v188[893];
          unint64_t v192 = (uint64_t *)v188[892];
        }
        else
        {
          uint64_t v197 = 0;
        }
        uint64_t v205 = (uint64_t *)&v197[8 * v193];
        int v206 = &v197[8 * v196];
        uint64_t *v205 = v189;
        unint64_t v199 = v205 + 1;
        while (v190 != v192)
        {
          uint64_t v207 = *--v190;
          *--uint64_t v205 = v207;
        }
LABEL_291:
        v188[892] = v205;
        v188[893] = v199;
        v188[894] = v206;
        if (v192) {
          operator delete(v192);
        }
        goto LABEL_293;
      }
    }
    uint64_t *v190 = v189;
    unint64_t v199 = v190 + 1;
LABEL_293:
    v188[893] = v199;
LABEL_294:
    int v209 = 1 << *(_DWORD *)(v3 + 48);
    if (v209 == 2)
    {
      uint64_t v210 = *(void **)a1[1];
      uint64_t v211 = *(_DWORD *)(a1[2] + 40) & 0x3FFFFFLL;
      unint64_t v212 = (uint64_t *)v210[896];
      unint64_t v220 = v210[897];
      if ((unint64_t)v212 >= v220)
      {
        unint64_t v214 = (uint64_t *)v210[895];
        uint64_t v222 = v212 - v214;
        if ((unint64_t)(v222 + 1) >> 61) {
          goto LABEL_520;
        }
        unint64_t v223 = v220 - (void)v214;
        unint64_t v224 = (uint64_t)(v220 - (void)v214) >> 2;
        if (v224 <= v222 + 1) {
          unint64_t v224 = v222 + 1;
        }
        if (v223 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v225 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v225 = v224;
        }
        if (v225)
        {
          unint64_t v226 = (char *)sub_5714((uint64_t)(v210 + 897), v225);
          unint64_t v212 = (uint64_t *)v210[896];
          unint64_t v214 = (uint64_t *)v210[895];
        }
        else
        {
          unint64_t v226 = 0;
        }
        unint64_t v227 = (uint64_t *)&v226[8 * v222];
        uint64_t v228 = &v226[8 * v225];
        uint64_t *v227 = v211;
        uint64_t v221 = v227 + 1;
        while (v212 != v214)
        {
          uint64_t v230 = *--v212;
          *--unint64_t v227 = v230;
        }
        goto LABEL_323;
      }
    }
    else
    {
      if (v209 != 1) {
        goto LABEL_326;
      }
      uint64_t v210 = *(void **)a1[1];
      uint64_t v211 = *(_DWORD *)(a1[2] + 40) & 0x3FFFFFLL;
      unint64_t v212 = (uint64_t *)v210[896];
      unint64_t v213 = v210[897];
      if ((unint64_t)v212 >= v213)
      {
        unint64_t v214 = (uint64_t *)v210[895];
        uint64_t v215 = v212 - v214;
        if ((unint64_t)(v215 + 1) >> 61) {
          goto LABEL_520;
        }
        unint64_t v216 = v213 - (void)v214;
        unint64_t v217 = (uint64_t)(v213 - (void)v214) >> 2;
        if (v217 <= v215 + 1) {
          unint64_t v217 = v215 + 1;
        }
        if (v216 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v218 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v218 = v217;
        }
        if (v218)
        {
          unint64_t v219 = (char *)sub_5714((uint64_t)(v210 + 897), v218);
          unint64_t v212 = (uint64_t *)v210[896];
          unint64_t v214 = (uint64_t *)v210[895];
        }
        else
        {
          unint64_t v219 = 0;
        }
        unint64_t v227 = (uint64_t *)&v219[8 * v215];
        uint64_t v228 = &v219[8 * v218];
        uint64_t *v227 = v211;
        uint64_t v221 = v227 + 1;
        while (v212 != v214)
        {
          uint64_t v229 = *--v212;
          *--unint64_t v227 = v229;
        }
LABEL_323:
        v210[895] = v227;
        v210[896] = v221;
        v210[897] = v228;
        if (v214) {
          operator delete(v214);
        }
        goto LABEL_325;
      }
    }
    *unint64_t v212 = v211;
    uint64_t v221 = v212 + 1;
LABEL_325:
    v210[896] = v221;
LABEL_326:
    int v231 = 1 << *(_DWORD *)(v3 + 48);
    if (v231 == 2)
    {
      uint64_t v232 = *(void **)a1[1];
      uint64_t v233 = *(_DWORD *)(a1[2] + 72) & 0x3FFFFFLL;
      unint64_t v234 = (uint64_t *)v232[899];
      unint64_t v242 = v232[900];
      if ((unint64_t)v234 >= v242)
      {
        unint64_t v236 = (uint64_t *)v232[898];
        uint64_t v244 = v234 - v236;
        if ((unint64_t)(v244 + 1) >> 61) {
          goto LABEL_520;
        }
        unint64_t v245 = v242 - (void)v236;
        unint64_t v246 = (uint64_t)(v242 - (void)v236) >> 2;
        if (v246 <= v244 + 1) {
          unint64_t v246 = v244 + 1;
        }
        if (v245 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v247 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v247 = v246;
        }
        if (v247)
        {
          unint64_t v248 = (char *)sub_5714((uint64_t)(v232 + 900), v247);
          unint64_t v234 = (uint64_t *)v232[899];
          unint64_t v236 = (uint64_t *)v232[898];
        }
        else
        {
          unint64_t v248 = 0;
        }
        unint64_t v249 = (uint64_t *)&v248[8 * v244];
        unint64_t v250 = &v248[8 * v247];
        *unint64_t v249 = v233;
        unint64_t v243 = v249 + 1;
        while (v234 != v236)
        {
          uint64_t v252 = *--v234;
          *--unint64_t v249 = v252;
        }
        goto LABEL_355;
      }
    }
    else
    {
      if (v231 != 1) {
        goto LABEL_358;
      }
      uint64_t v232 = *(void **)a1[1];
      uint64_t v233 = *(_DWORD *)(a1[2] + 72) & 0x3FFFFFLL;
      unint64_t v234 = (uint64_t *)v232[899];
      unint64_t v235 = v232[900];
      if ((unint64_t)v234 >= v235)
      {
        unint64_t v236 = (uint64_t *)v232[898];
        uint64_t v237 = v234 - v236;
        if ((unint64_t)(v237 + 1) >> 61) {
          goto LABEL_520;
        }
        unint64_t v238 = v235 - (void)v236;
        unint64_t v239 = (uint64_t)(v235 - (void)v236) >> 2;
        if (v239 <= v237 + 1) {
          unint64_t v239 = v237 + 1;
        }
        if (v238 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v240 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v240 = v239;
        }
        if (v240)
        {
          unint64_t v241 = (char *)sub_5714((uint64_t)(v232 + 900), v240);
          unint64_t v234 = (uint64_t *)v232[899];
          unint64_t v236 = (uint64_t *)v232[898];
        }
        else
        {
          unint64_t v241 = 0;
        }
        unint64_t v249 = (uint64_t *)&v241[8 * v237];
        unint64_t v250 = &v241[8 * v240];
        *unint64_t v249 = v233;
        unint64_t v243 = v249 + 1;
        while (v234 != v236)
        {
          uint64_t v251 = *--v234;
          *--unint64_t v249 = v251;
        }
LABEL_355:
        v232[898] = v249;
        v232[899] = v243;
        v232[900] = v250;
        if (v236) {
          operator delete(v236);
        }
        goto LABEL_357;
      }
    }
    *unint64_t v234 = v233;
    unint64_t v243 = v234 + 1;
LABEL_357:
    v232[899] = v243;
LABEL_358:
    int v253 = 1 << *(_DWORD *)(v3 + 48);
    if (v253 == 2)
    {
      uint64_t v254 = *(void **)a1[1];
      uint64_t v255 = *(_DWORD *)(a1[2] + 20) & 0x3FFFFFLL;
      uint64_t v256 = (uint64_t *)v254[902];
      unint64_t v264 = v254[903];
      if ((unint64_t)v256 >= v264)
      {
        unint64_t v258 = (uint64_t *)v254[901];
        uint64_t v266 = v256 - v258;
        if ((unint64_t)(v266 + 1) >> 61) {
          goto LABEL_520;
        }
        unint64_t v267 = v264 - (void)v258;
        unint64_t v268 = (uint64_t)(v264 - (void)v258) >> 2;
        if (v268 <= v266 + 1) {
          unint64_t v268 = v266 + 1;
        }
        if (v267 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v269 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v269 = v268;
        }
        if (v269)
        {
          unint64_t v270 = (char *)sub_5714((uint64_t)(v254 + 903), v269);
          uint64_t v256 = (uint64_t *)v254[902];
          unint64_t v258 = (uint64_t *)v254[901];
        }
        else
        {
          unint64_t v270 = 0;
        }
        unint64_t v271 = (uint64_t *)&v270[8 * v266];
        uint64_t v272 = &v270[8 * v269];
        uint64_t *v271 = v255;
        int v265 = v271 + 1;
        while (v256 != v258)
        {
          uint64_t v274 = *--v256;
          *--unint64_t v271 = v274;
        }
        goto LABEL_387;
      }
    }
    else
    {
      if (v253 != 1) {
        goto LABEL_390;
      }
      uint64_t v254 = *(void **)a1[1];
      uint64_t v255 = *(_DWORD *)(a1[2] + 20) & 0x3FFFFFLL;
      uint64_t v256 = (uint64_t *)v254[902];
      unint64_t v257 = v254[903];
      if ((unint64_t)v256 >= v257)
      {
        unint64_t v258 = (uint64_t *)v254[901];
        uint64_t v259 = v256 - v258;
        if ((unint64_t)(v259 + 1) >> 61) {
          goto LABEL_520;
        }
        unint64_t v260 = v257 - (void)v258;
        unint64_t v261 = (uint64_t)(v257 - (void)v258) >> 2;
        if (v261 <= v259 + 1) {
          unint64_t v261 = v259 + 1;
        }
        if (v260 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v262 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v262 = v261;
        }
        if (v262)
        {
          unint64_t v263 = (char *)sub_5714((uint64_t)(v254 + 903), v262);
          uint64_t v256 = (uint64_t *)v254[902];
          unint64_t v258 = (uint64_t *)v254[901];
        }
        else
        {
          unint64_t v263 = 0;
        }
        unint64_t v271 = (uint64_t *)&v263[8 * v259];
        uint64_t v272 = &v263[8 * v262];
        uint64_t *v271 = v255;
        int v265 = v271 + 1;
        while (v256 != v258)
        {
          uint64_t v273 = *--v256;
          *--unint64_t v271 = v273;
        }
LABEL_387:
        v254[901] = v271;
        v254[902] = v265;
        v254[903] = v272;
        if (v258) {
          operator delete(v258);
        }
        goto LABEL_389;
      }
    }
    uint64_t *v256 = v255;
    int v265 = v256 + 1;
LABEL_389:
    v254[902] = v265;
LABEL_390:
    int v275 = 1 << *(_DWORD *)(v3 + 48);
    if (v275 == 2)
    {
      uint64_t v276 = *(void **)a1[1];
      uint64_t v277 = *(_DWORD *)(a1[2] + 52) & 0x3FFFFFLL;
      unint64_t v278 = (uint64_t *)v276[905];
      unint64_t v286 = v276[906];
      if ((unint64_t)v278 >= v286)
      {
        uint64_t v280 = (uint64_t *)v276[904];
        uint64_t v288 = v278 - v280;
        if ((unint64_t)(v288 + 1) >> 61) {
          goto LABEL_520;
        }
        unint64_t v289 = v286 - (void)v280;
        unint64_t v290 = (uint64_t)(v286 - (void)v280) >> 2;
        if (v290 <= v288 + 1) {
          unint64_t v290 = v288 + 1;
        }
        if (v289 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v291 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v291 = v290;
        }
        if (v291)
        {
          unint64_t v292 = (char *)sub_5714((uint64_t)(v276 + 906), v291);
          unint64_t v278 = (uint64_t *)v276[905];
          uint64_t v280 = (uint64_t *)v276[904];
        }
        else
        {
          unint64_t v292 = 0;
        }
        unint64_t v293 = (uint64_t *)&v292[8 * v288];
        unint64_t v294 = &v292[8 * v291];
        *unint64_t v293 = v277;
        uint64_t v287 = v293 + 1;
        while (v278 != v280)
        {
          uint64_t v296 = *--v278;
          *--unint64_t v293 = v296;
        }
        goto LABEL_419;
      }
    }
    else
    {
      if (v275 != 1) {
        goto LABEL_422;
      }
      uint64_t v276 = *(void **)a1[1];
      uint64_t v277 = *(_DWORD *)(a1[2] + 52) & 0x3FFFFFLL;
      unint64_t v278 = (uint64_t *)v276[905];
      unint64_t v279 = v276[906];
      if ((unint64_t)v278 >= v279)
      {
        uint64_t v280 = (uint64_t *)v276[904];
        uint64_t v281 = v278 - v280;
        if ((unint64_t)(v281 + 1) >> 61) {
          goto LABEL_520;
        }
        unint64_t v282 = v279 - (void)v280;
        unint64_t v283 = (uint64_t)(v279 - (void)v280) >> 2;
        if (v283 <= v281 + 1) {
          unint64_t v283 = v281 + 1;
        }
        if (v282 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v284 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v284 = v283;
        }
        if (v284)
        {
          unint64_t v285 = (char *)sub_5714((uint64_t)(v276 + 906), v284);
          unint64_t v278 = (uint64_t *)v276[905];
          uint64_t v280 = (uint64_t *)v276[904];
        }
        else
        {
          unint64_t v285 = 0;
        }
        unint64_t v293 = (uint64_t *)&v285[8 * v281];
        unint64_t v294 = &v285[8 * v284];
        *unint64_t v293 = v277;
        uint64_t v287 = v293 + 1;
        while (v278 != v280)
        {
          uint64_t v295 = *--v278;
          *--unint64_t v293 = v295;
        }
LABEL_419:
        v276[904] = v293;
        v276[905] = v287;
        v276[906] = v294;
        if (v280) {
          operator delete(v280);
        }
        goto LABEL_421;
      }
    }
    *unint64_t v278 = v277;
    uint64_t v287 = v278 + 1;
LABEL_421:
    v276[905] = v287;
LABEL_422:
    int v297 = 1 << *(_DWORD *)(v3 + 48);
    if (v297 == 2)
    {
      uint64_t v298 = *(void **)a1[1];
      uint64_t v299 = *(_DWORD *)(a1[2] + 24) & 0x3FFFFFLL;
      uint64_t v300 = (uint64_t *)v298[908];
      unint64_t v308 = v298[909];
      if ((unint64_t)v300 >= v308)
      {
        unint64_t v302 = (uint64_t *)v298[907];
        uint64_t v310 = v300 - v302;
        if ((unint64_t)(v310 + 1) >> 61) {
          goto LABEL_520;
        }
        unint64_t v311 = v308 - (void)v302;
        unint64_t v312 = (uint64_t)(v308 - (void)v302) >> 2;
        if (v312 <= v310 + 1) {
          unint64_t v312 = v310 + 1;
        }
        if (v311 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v313 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v313 = v312;
        }
        if (v313)
        {
          unint64_t v314 = (char *)sub_5714((uint64_t)(v298 + 909), v313);
          uint64_t v300 = (uint64_t *)v298[908];
          unint64_t v302 = (uint64_t *)v298[907];
        }
        else
        {
          unint64_t v314 = 0;
        }
        unint64_t v315 = (uint64_t *)&v314[8 * v310];
        uint64_t v316 = &v314[8 * v313];
        uint64_t *v315 = v299;
        unint64_t v309 = v315 + 1;
        while (v300 != v302)
        {
          uint64_t v318 = *--v300;
          *--unint64_t v315 = v318;
        }
        goto LABEL_451;
      }
    }
    else
    {
      if (v297 != 1) {
        goto LABEL_454;
      }
      uint64_t v298 = *(void **)a1[1];
      uint64_t v299 = *(_DWORD *)(a1[2] + 24) & 0x3FFFFFLL;
      uint64_t v300 = (uint64_t *)v298[908];
      unint64_t v301 = v298[909];
      if ((unint64_t)v300 >= v301)
      {
        unint64_t v302 = (uint64_t *)v298[907];
        uint64_t v303 = v300 - v302;
        if ((unint64_t)(v303 + 1) >> 61) {
          goto LABEL_520;
        }
        unint64_t v304 = v301 - (void)v302;
        unint64_t v305 = (uint64_t)(v301 - (void)v302) >> 2;
        if (v305 <= v303 + 1) {
          unint64_t v305 = v303 + 1;
        }
        if (v304 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v306 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v306 = v305;
        }
        if (v306)
        {
          unint64_t v307 = (char *)sub_5714((uint64_t)(v298 + 909), v306);
          uint64_t v300 = (uint64_t *)v298[908];
          unint64_t v302 = (uint64_t *)v298[907];
        }
        else
        {
          unint64_t v307 = 0;
        }
        unint64_t v315 = (uint64_t *)&v307[8 * v303];
        uint64_t v316 = &v307[8 * v306];
        uint64_t *v315 = v299;
        unint64_t v309 = v315 + 1;
        while (v300 != v302)
        {
          uint64_t v317 = *--v300;
          *--unint64_t v315 = v317;
        }
LABEL_451:
        v298[907] = v315;
        v298[908] = v309;
        v298[909] = v316;
        if (v302) {
          operator delete(v302);
        }
        goto LABEL_453;
      }
    }
    uint64_t *v300 = v299;
    unint64_t v309 = v300 + 1;
LABEL_453:
    v298[908] = v309;
LABEL_454:
    int v319 = 1 << *(_DWORD *)(v3 + 48);
    if (v319 == 2)
    {
      uint64_t v320 = *(void **)a1[1];
      uint64_t v321 = *(_DWORD *)(a1[2] + 56) & 0x3FFFFFLL;
      unint64_t v322 = (uint64_t *)v320[911];
      unint64_t v330 = v320[912];
      if ((unint64_t)v322 >= v330)
      {
        unint64_t v324 = (uint64_t *)v320[910];
        uint64_t v332 = v322 - v324;
        if ((unint64_t)(v332 + 1) >> 61) {
          goto LABEL_520;
        }
        unint64_t v333 = v330 - (void)v324;
        unint64_t v334 = (uint64_t)(v330 - (void)v324) >> 2;
        if (v334 <= v332 + 1) {
          unint64_t v334 = v332 + 1;
        }
        if (v333 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v335 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v335 = v334;
        }
        if (v335)
        {
          unint64_t v336 = (char *)sub_5714((uint64_t)(v320 + 912), v335);
          unint64_t v322 = (uint64_t *)v320[911];
          unint64_t v324 = (uint64_t *)v320[910];
        }
        else
        {
          unint64_t v336 = 0;
        }
        unint64_t v337 = (uint64_t *)&v336[8 * v332];
        uint64_t v338 = &v336[8 * v335];
        *unint64_t v337 = v321;
        unint64_t v331 = v337 + 1;
        while (v322 != v324)
        {
          uint64_t v340 = *--v322;
          *--unint64_t v337 = v340;
        }
        goto LABEL_483;
      }
    }
    else
    {
      if (v319 != 1) {
        goto LABEL_486;
      }
      uint64_t v320 = *(void **)a1[1];
      uint64_t v321 = *(_DWORD *)(a1[2] + 56) & 0x3FFFFFLL;
      unint64_t v322 = (uint64_t *)v320[911];
      unint64_t v323 = v320[912];
      if ((unint64_t)v322 >= v323)
      {
        unint64_t v324 = (uint64_t *)v320[910];
        uint64_t v325 = v322 - v324;
        if ((unint64_t)(v325 + 1) >> 61) {
          goto LABEL_520;
        }
        unint64_t v326 = v323 - (void)v324;
        unint64_t v327 = (uint64_t)(v323 - (void)v324) >> 2;
        if (v327 <= v325 + 1) {
          unint64_t v327 = v325 + 1;
        }
        if (v326 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v328 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v328 = v327;
        }
        if (v328)
        {
          unint64_t v329 = (char *)sub_5714((uint64_t)(v320 + 912), v328);
          unint64_t v322 = (uint64_t *)v320[911];
          unint64_t v324 = (uint64_t *)v320[910];
        }
        else
        {
          unint64_t v329 = 0;
        }
        unint64_t v337 = (uint64_t *)&v329[8 * v325];
        uint64_t v338 = &v329[8 * v328];
        *unint64_t v337 = v321;
        unint64_t v331 = v337 + 1;
        while (v322 != v324)
        {
          uint64_t v339 = *--v322;
          *--unint64_t v337 = v339;
        }
LABEL_483:
        v320[910] = v337;
        v320[911] = v331;
        v320[912] = v338;
        if (v324) {
          operator delete(v324);
        }
        goto LABEL_485;
      }
    }
    *unint64_t v322 = v321;
    unint64_t v331 = v322 + 1;
LABEL_485:
    v320[911] = v331;
LABEL_486:
    int v341 = 1 << *(_DWORD *)(v3 + 48);
    if (v341 == 2)
    {
      uint64_t v353 = a1[2];
      int v343 = *(void **)a1[1];
      uint64_t v344 = *(_DWORD *)(v353 + 80) & 0x7FFFFLL;
      uint64_t v345 = (uint64_t *)v343[914];
      unint64_t v354 = v343[915];
      if ((unint64_t)v345 >= v354)
      {
        unint64_t v347 = (uint64_t *)v343[913];
        uint64_t v356 = v345 - v347;
        if (!((unint64_t)(v356 + 1) >> 61))
        {
          unint64_t v357 = v354 - (void)v347;
          unint64_t v358 = (uint64_t)(v354 - (void)v347) >> 2;
          if (v358 <= v356 + 1) {
            unint64_t v358 = v356 + 1;
          }
          if (v357 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v359 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v359 = v358;
          }
          if (v359)
          {
            unint64_t v360 = (char *)sub_5714((uint64_t)(v343 + 915), v359);
            uint64_t v345 = (uint64_t *)v343[914];
            unint64_t v347 = (uint64_t *)v343[913];
          }
          else
          {
            unint64_t v360 = 0;
          }
          uint64_t v361 = (uint64_t *)&v360[8 * v356];
          uint64_t v362 = &v360[8 * v359];
          uint64_t *v361 = v344;
          unint64_t v355 = v361 + 1;
          while (v345 != v347)
          {
            uint64_t v364 = *--v345;
            *--uint64_t v361 = v364;
          }
          goto LABEL_515;
        }
LABEL_520:
        sub_566C();
      }
    }
    else
    {
      if (v341 != 1)
      {
LABEL_518:
        *a2 = 1;
        return;
      }
      uint64_t v342 = a1[2];
      int v343 = *(void **)a1[1];
      uint64_t v344 = *(_DWORD *)(v342 + 80) & 0x7FFFFLL;
      uint64_t v345 = (uint64_t *)v343[914];
      unint64_t v346 = v343[915];
      if ((unint64_t)v345 >= v346)
      {
        unint64_t v347 = (uint64_t *)v343[913];
        uint64_t v348 = v345 - v347;
        if (!((unint64_t)(v348 + 1) >> 61))
        {
          unint64_t v349 = v346 - (void)v347;
          unint64_t v350 = (uint64_t)(v346 - (void)v347) >> 2;
          if (v350 <= v348 + 1) {
            unint64_t v350 = v348 + 1;
          }
          if (v349 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v351 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v351 = v350;
          }
          if (v351)
          {
            unint64_t v352 = (char *)sub_5714((uint64_t)(v343 + 915), v351);
            uint64_t v345 = (uint64_t *)v343[914];
            unint64_t v347 = (uint64_t *)v343[913];
          }
          else
          {
            unint64_t v352 = 0;
          }
          uint64_t v361 = (uint64_t *)&v352[8 * v348];
          uint64_t v362 = &v352[8 * v351];
          uint64_t *v361 = v344;
          unint64_t v355 = v361 + 1;
          while (v345 != v347)
          {
            uint64_t v363 = *--v345;
            *--uint64_t v361 = v363;
          }
LABEL_515:
          v343[913] = v361;
          v343[914] = v355;
          v343[915] = v362;
          if (v347) {
            operator delete(v347);
          }
          goto LABEL_517;
        }
        goto LABEL_520;
      }
    }
    uint64_t *v345 = v344;
    unint64_t v355 = v345 + 1;
LABEL_517:
    v343[914] = v355;
    goto LABEL_518;
  }
  int v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    uint64_t v18 = (void *)a1[1];
    uint64_t v17 = (_DWORD *)a1[2];
    unint64_t v19 = (void *)*v18;
    *(void *)(v19[869] - 8) += v17[9] & 0x3FFFFF;
    *(void *)(v19[872] - 8) += v17[17] & 0x3FFFFF;
    *(void *)(v19[875] - 8) += v17[8] & 0x3FFFFF;
    *(void *)(v19[878] - 8) += v17[16] & 0x3FFFFF;
    *(void *)(v19[881] - 8) += v17[7] & 0x3FFFFF;
    *(void *)(v19[884] - 8) += v17[15] & 0x3FFFFF;
    *(void *)(v19[887] - 8) += v17[11] & 0x3FFFFF;
    *(void *)(v19[890] - 8) += v17[19] & 0x3FFFFF;
    *(void *)(v19[893] - 8) += v17[12] & 0x7FFFF;
    *(void *)(v19[896] - 8) += v17[10] & 0x3FFFFF;
    uint64_t v20 = (_DWORD *)a1[2];
    uint64_t v21 = (void *)*v18;
    *(void *)(v21[899] - 8) += v20[18] & 0x3FFFFF;
    *(void *)(v21[902] - 8) += v20[5] & 0x3FFFFF;
    *(void *)(v21[905] - 8) += v20[13] & 0x3FFFFF;
    *(void *)(v21[908] - 8) += v20[6] & 0x3FFFFF;
    *(void *)(v21[911] - 8) += v20[14] & 0x3FFFFF;
    *(void *)(v21[914] - 8) += v20[20] & 0x7FFFF;
  }
}

void sub_D06B8(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    int v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_DWORD *)(a1[2] + 36) & 0x7FFFFLL;
      uint64_t v8 = (uint64_t *)v6[917];
      unint64_t v22 = v6[918];
      if ((unint64_t)v8 >= v22)
      {
        unint64_t v10 = (uint64_t *)v6[916];
        uint64_t v24 = v8 - v10;
        if ((unint64_t)(v24 + 1) >> 61) {
          goto LABEL_488;
        }
        unint64_t v25 = v22 - (void)v10;
        unint64_t v26 = (uint64_t)(v22 - (void)v10) >> 2;
        if (v26 <= v24 + 1) {
          unint64_t v26 = v24 + 1;
        }
        if (v25 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v26;
        }
        if (v27)
        {
          uint64_t v28 = (char *)sub_5714((uint64_t)(v6 + 918), v27);
          uint64_t v8 = (uint64_t *)v6[917];
          unint64_t v10 = (uint64_t *)v6[916];
        }
        else
        {
          uint64_t v28 = 0;
        }
        uint64_t v29 = (uint64_t *)&v28[8 * v24];
        int v30 = &v28[8 * v27];
        uint64_t *v29 = v7;
        unint64_t v23 = v29 + 1;
        while (v8 != v10)
        {
          uint64_t v32 = *--v8;
          *--uint64_t v29 = v32;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1) {
        goto LABEL_38;
      }
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_DWORD *)(a1[2] + 36) & 0x7FFFFLL;
      uint64_t v8 = (uint64_t *)v6[917];
      unint64_t v9 = v6[918];
      if ((unint64_t)v8 >= v9)
      {
        unint64_t v10 = (uint64_t *)v6[916];
        uint64_t v11 = v8 - v10;
        if ((unint64_t)(v11 + 1) >> 61) {
          goto LABEL_488;
        }
        unint64_t v12 = v9 - (void)v10;
        unint64_t v13 = (uint64_t)(v9 - (void)v10) >> 2;
        if (v13 <= v11 + 1) {
          unint64_t v13 = v11 + 1;
        }
        if (v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14)
        {
          unint64_t v15 = (char *)sub_5714((uint64_t)(v6 + 918), v14);
          uint64_t v8 = (uint64_t *)v6[917];
          unint64_t v10 = (uint64_t *)v6[916];
        }
        else
        {
          unint64_t v15 = 0;
        }
        uint64_t v29 = (uint64_t *)&v15[8 * v11];
        int v30 = &v15[8 * v14];
        uint64_t *v29 = v7;
        unint64_t v23 = v29 + 1;
        while (v8 != v10)
        {
          uint64_t v31 = *--v8;
          *--uint64_t v29 = v31;
        }
LABEL_35:
        v6[916] = v29;
        v6[917] = v23;
        v6[918] = v30;
        if (v10) {
          operator delete(v10);
        }
        goto LABEL_37;
      }
    }
    *uint64_t v8 = v7;
    unint64_t v23 = v8 + 1;
LABEL_37:
    v6[917] = v23;
LABEL_38:
    int v33 = 1 << *(_DWORD *)(v3 + 48);
    if (v33 == 2)
    {
      unint64_t v34 = *(void **)a1[1];
      uint64_t v35 = *(_DWORD *)(a1[2] + 68) & 0xFFFFFLL;
      uint64_t v36 = (uint64_t *)v34[920];
      unint64_t v44 = v34[921];
      if ((unint64_t)v36 >= v44)
      {
        unint64_t v38 = (uint64_t *)v34[919];
        uint64_t v46 = v36 - v38;
        if ((unint64_t)(v46 + 1) >> 61) {
          goto LABEL_488;
        }
        unint64_t v47 = v44 - (void)v38;
        unint64_t v48 = (uint64_t)(v44 - (void)v38) >> 2;
        if (v48 <= v46 + 1) {
          unint64_t v48 = v46 + 1;
        }
        if (v47 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v49 = v48;
        }
        if (v49)
        {
          uint64_t v50 = (char *)sub_5714((uint64_t)(v34 + 921), v49);
          uint64_t v36 = (uint64_t *)v34[920];
          unint64_t v38 = (uint64_t *)v34[919];
        }
        else
        {
          uint64_t v50 = 0;
        }
        uint64_t v51 = (uint64_t *)&v50[8 * v46];
        int v52 = &v50[8 * v49];
        *uint64_t v51 = v35;
        unint64_t v45 = v51 + 1;
        while (v36 != v38)
        {
          uint64_t v54 = *--v36;
          *--uint64_t v51 = v54;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v33 != 1) {
        goto LABEL_70;
      }
      unint64_t v34 = *(void **)a1[1];
      uint64_t v35 = *(_DWORD *)(a1[2] + 68) & 0xFFFFFLL;
      uint64_t v36 = (uint64_t *)v34[920];
      unint64_t v37 = v34[921];
      if ((unint64_t)v36 >= v37)
      {
        unint64_t v38 = (uint64_t *)v34[919];
        uint64_t v39 = v36 - v38;
        if ((unint64_t)(v39 + 1) >> 61) {
          goto LABEL_488;
        }
        unint64_t v40 = v37 - (void)v38;
        unint64_t v41 = (uint64_t)(v37 - (void)v38) >> 2;
        if (v41 <= v39 + 1) {
          unint64_t v41 = v39 + 1;
        }
        if (v40 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v42 = v41;
        }
        if (v42)
        {
          uint64_t v43 = (char *)sub_5714((uint64_t)(v34 + 921), v42);
          uint64_t v36 = (uint64_t *)v34[920];
          unint64_t v38 = (uint64_t *)v34[919];
        }
        else
        {
          uint64_t v43 = 0;
        }
        uint64_t v51 = (uint64_t *)&v43[8 * v39];
        int v52 = &v43[8 * v42];
        *uint64_t v51 = v35;
        unint64_t v45 = v51 + 1;
        while (v36 != v38)
        {
          uint64_t v53 = *--v36;
          *--uint64_t v51 = v53;
        }
LABEL_67:
        v34[919] = v51;
        v34[920] = v45;
        v34[921] = v52;
        if (v38) {
          operator delete(v38);
        }
        goto LABEL_69;
      }
    }
    uint64_t *v36 = v35;
    unint64_t v45 = v36 + 1;
LABEL_69:
    v34[920] = v45;
LABEL_70:
    int v55 = 1 << *(_DWORD *)(v3 + 48);
    if (v55 == 2)
    {
      unint64_t v56 = *(void **)a1[1];
      uint64_t v57 = *(_WORD *)(a1[2] + 48) & 0x7FFF;
      uint64_t v58 = (char *)v56[923];
      unint64_t v66 = v56[924];
      if ((unint64_t)v58 >= v66)
      {
        unint64_t v60 = (char *)v56[922];
        uint64_t v68 = (v58 - v60) >> 3;
        if ((unint64_t)(v68 + 1) >> 61) {
          goto LABEL_488;
        }
        unint64_t v69 = v66 - (void)v60;
        unint64_t v70 = (uint64_t)(v66 - (void)v60) >> 2;
        if (v70 <= v68 + 1) {
          unint64_t v70 = v68 + 1;
        }
        if (v69 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v71 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v71 = v70;
        }
        if (v71)
        {
          uint64_t v72 = (char *)sub_5714((uint64_t)(v56 + 924), v71);
          uint64_t v58 = (char *)v56[923];
          unint64_t v60 = (char *)v56[922];
        }
        else
        {
          uint64_t v72 = 0;
        }
        uint64_t v73 = &v72[8 * v68];
        int v74 = &v72[8 * v71];
        *(void *)uint64_t v73 = v57;
        unint64_t v67 = v73 + 8;
        while (v58 != v60)
        {
          uint64_t v76 = *((void *)v58 - 1);
          v58 -= 8;
          *((void *)v73 - 1) = v76;
          v73 -= 8;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v55 != 1) {
        goto LABEL_102;
      }
      unint64_t v56 = *(void **)a1[1];
      uint64_t v57 = *(_WORD *)(a1[2] + 48) & 0x7FFF;
      uint64_t v58 = (char *)v56[923];
      unint64_t v59 = v56[924];
      if ((unint64_t)v58 >= v59)
      {
        unint64_t v60 = (char *)v56[922];
        uint64_t v61 = (v58 - v60) >> 3;
        if ((unint64_t)(v61 + 1) >> 61) {
          goto LABEL_488;
        }
        unint64_t v62 = v59 - (void)v60;
        unint64_t v63 = (uint64_t)(v59 - (void)v60) >> 2;
        if (v63 <= v61 + 1) {
          unint64_t v63 = v61 + 1;
        }
        if (v62 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v64 = v63;
        }
        if (v64)
        {
          uint64_t v65 = (char *)sub_5714((uint64_t)(v56 + 924), v64);
          uint64_t v58 = (char *)v56[923];
          unint64_t v60 = (char *)v56[922];
        }
        else
        {
          uint64_t v65 = 0;
        }
        uint64_t v73 = &v65[8 * v61];
        int v74 = &v65[8 * v64];
        *(void *)uint64_t v73 = v57;
        unint64_t v67 = v73 + 8;
        while (v58 != v60)
        {
          uint64_t v75 = *((void *)v58 - 1);
          v58 -= 8;
          *((void *)v73 - 1) = v75;
          v73 -= 8;
        }
LABEL_99:
        v56[922] = v73;
        v56[923] = v67;
        v56[924] = v74;
        if (v60) {
          operator delete(v60);
        }
        goto LABEL_101;
      }
    }
    *(void *)uint64_t v58 = v57;
    unint64_t v67 = v58 + 8;
LABEL_101:
    v56[923] = v67;
LABEL_102:
    int v77 = 1 << *(_DWORD *)(v3 + 48);
    if (v77 == 2)
    {
      unint64_t v78 = *(void **)a1[1];
      uint64_t v79 = *(_DWORD *)(a1[2] + 32) & 0x7FFFFLL;
      uint64_t v80 = (uint64_t *)v78[926];
      unint64_t v88 = v78[927];
      if ((unint64_t)v80 >= v88)
      {
        unint64_t v82 = (uint64_t *)v78[925];
        uint64_t v90 = v80 - v82;
        if ((unint64_t)(v90 + 1) >> 61) {
          goto LABEL_488;
        }
        unint64_t v91 = v88 - (void)v82;
        unint64_t v92 = (uint64_t)(v88 - (void)v82) >> 2;
        if (v92 <= v90 + 1) {
          unint64_t v92 = v90 + 1;
        }
        if (v91 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v93 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v93 = v92;
        }
        if (v93)
        {
          uint64_t v94 = (char *)sub_5714((uint64_t)(v78 + 927), v93);
          uint64_t v80 = (uint64_t *)v78[926];
          unint64_t v82 = (uint64_t *)v78[925];
        }
        else
        {
          uint64_t v94 = 0;
        }
        uint64_t v95 = (uint64_t *)&v94[8 * v90];
        int v96 = &v94[8 * v93];
        *uint64_t v95 = v79;
        unint64_t v89 = v95 + 1;
        while (v80 != v82)
        {
          uint64_t v98 = *--v80;
          *--uint64_t v95 = v98;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v77 != 1) {
        goto LABEL_134;
      }
      unint64_t v78 = *(void **)a1[1];
      uint64_t v79 = *(_DWORD *)(a1[2] + 32) & 0x7FFFFLL;
      uint64_t v80 = (uint64_t *)v78[926];
      unint64_t v81 = v78[927];
      if ((unint64_t)v80 >= v81)
      {
        unint64_t v82 = (uint64_t *)v78[925];
        uint64_t v83 = v80 - v82;
        if ((unint64_t)(v83 + 1) >> 61) {
          goto LABEL_488;
        }
        unint64_t v84 = v81 - (void)v82;
        unint64_t v85 = (uint64_t)(v81 - (void)v82) >> 2;
        if (v85 <= v83 + 1) {
          unint64_t v85 = v83 + 1;
        }
        if (v84 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v86 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v86 = v85;
        }
        if (v86)
        {
          uint64_t v87 = (char *)sub_5714((uint64_t)(v78 + 927), v86);
          uint64_t v80 = (uint64_t *)v78[926];
          unint64_t v82 = (uint64_t *)v78[925];
        }
        else
        {
          uint64_t v87 = 0;
        }
        uint64_t v95 = (uint64_t *)&v87[8 * v83];
        int v96 = &v87[8 * v86];
        *uint64_t v95 = v79;
        unint64_t v89 = v95 + 1;
        while (v80 != v82)
        {
          uint64_t v97 = *--v80;
          *--uint64_t v95 = v97;
        }
LABEL_131:
        v78[925] = v95;
        v78[926] = v89;
        v78[927] = v96;
        if (v82) {
          operator delete(v82);
        }
        goto LABEL_133;
      }
    }
    *uint64_t v80 = v79;
    unint64_t v89 = v80 + 1;
LABEL_133:
    v78[926] = v89;
LABEL_134:
    int v99 = 1 << *(_DWORD *)(v3 + 48);
    if (v99 == 2)
    {
      unint64_t v100 = *(void **)a1[1];
      uint64_t v101 = *(_DWORD *)(a1[2] + 64) & 0xFFFFFLL;
      uint64_t v102 = (uint64_t *)v100[929];
      unint64_t v110 = v100[930];
      if ((unint64_t)v102 >= v110)
      {
        unint64_t v104 = (uint64_t *)v100[928];
        uint64_t v112 = v102 - v104;
        if ((unint64_t)(v112 + 1) >> 61) {
          goto LABEL_488;
        }
        unint64_t v113 = v110 - (void)v104;
        unint64_t v114 = (uint64_t)(v110 - (void)v104) >> 2;
        if (v114 <= v112 + 1) {
          unint64_t v114 = v112 + 1;
        }
        if (v113 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v115 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v115 = v114;
        }
        if (v115)
        {
          uint64_t v116 = (char *)sub_5714((uint64_t)(v100 + 930), v115);
          uint64_t v102 = (uint64_t *)v100[929];
          unint64_t v104 = (uint64_t *)v100[928];
        }
        else
        {
          uint64_t v116 = 0;
        }
        uint64_t v117 = (uint64_t *)&v116[8 * v112];
        int v118 = &v116[8 * v115];
        *uint64_t v117 = v101;
        unint64_t v111 = v117 + 1;
        while (v102 != v104)
        {
          uint64_t v120 = *--v102;
          *--uint64_t v117 = v120;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v99 != 1) {
        goto LABEL_166;
      }
      unint64_t v100 = *(void **)a1[1];
      uint64_t v101 = *(_DWORD *)(a1[2] + 64) & 0xFFFFFLL;
      uint64_t v102 = (uint64_t *)v100[929];
      unint64_t v103 = v100[930];
      if ((unint64_t)v102 >= v103)
      {
        unint64_t v104 = (uint64_t *)v100[928];
        uint64_t v105 = v102 - v104;
        if ((unint64_t)(v105 + 1) >> 61) {
          goto LABEL_488;
        }
        unint64_t v106 = v103 - (void)v104;
        unint64_t v107 = (uint64_t)(v103 - (void)v104) >> 2;
        if (v107 <= v105 + 1) {
          unint64_t v107 = v105 + 1;
        }
        if (v106 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v108 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v108 = v107;
        }
        if (v108)
        {
          uint64_t v109 = (char *)sub_5714((uint64_t)(v100 + 930), v108);
          uint64_t v102 = (uint64_t *)v100[929];
          unint64_t v104 = (uint64_t *)v100[928];
        }
        else
        {
          uint64_t v109 = 0;
        }
        uint64_t v117 = (uint64_t *)&v109[8 * v105];
        int v118 = &v109[8 * v108];
        *uint64_t v117 = v101;
        unint64_t v111 = v117 + 1;
        while (v102 != v104)
        {
          uint64_t v119 = *--v102;
          *--uint64_t v117 = v119;
        }
LABEL_163:
        v100[928] = v117;
        v100[929] = v111;
        v100[930] = v118;
        if (v104) {
          operator delete(v104);
        }
        goto LABEL_165;
      }
    }
    uint64_t *v102 = v101;
    unint64_t v111 = v102 + 1;
LABEL_165:
    v100[929] = v111;
LABEL_166:
    int v121 = 1 << *(_DWORD *)(v3 + 48);
    if (v121 == 2)
    {
      unint64_t v122 = *(void **)a1[1];
      uint64_t v123 = *(_DWORD *)(a1[2] + 28) & 0x7FFFFLL;
      uint64_t v124 = (uint64_t *)v122[932];
      unint64_t v132 = v122[933];
      if ((unint64_t)v124 >= v132)
      {
        unint64_t v126 = (uint64_t *)v122[931];
        uint64_t v134 = v124 - v126;
        if ((unint64_t)(v134 + 1) >> 61) {
          goto LABEL_488;
        }
        unint64_t v135 = v132 - (void)v126;
        unint64_t v136 = (uint64_t)(v132 - (void)v126) >> 2;
        if (v136 <= v134 + 1) {
          unint64_t v136 = v134 + 1;
        }
        if (v135 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v137 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v137 = v136;
        }
        if (v137)
        {
          uint64_t v138 = (char *)sub_5714((uint64_t)(v122 + 933), v137);
          uint64_t v124 = (uint64_t *)v122[932];
          unint64_t v126 = (uint64_t *)v122[931];
        }
        else
        {
          uint64_t v138 = 0;
        }
        uint64_t v139 = (uint64_t *)&v138[8 * v134];
        int v140 = &v138[8 * v137];
        *uint64_t v139 = v123;
        unint64_t v133 = v139 + 1;
        while (v124 != v126)
        {
          uint64_t v142 = *--v124;
          *--uint64_t v139 = v142;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v121 != 1) {
        goto LABEL_198;
      }
      unint64_t v122 = *(void **)a1[1];
      uint64_t v123 = *(_DWORD *)(a1[2] + 28) & 0x7FFFFLL;
      uint64_t v124 = (uint64_t *)v122[932];
      unint64_t v125 = v122[933];
      if ((unint64_t)v124 >= v125)
      {
        unint64_t v126 = (uint64_t *)v122[931];
        uint64_t v127 = v124 - v126;
        if ((unint64_t)(v127 + 1) >> 61) {
          goto LABEL_488;
        }
        unint64_t v128 = v125 - (void)v126;
        unint64_t v129 = (uint64_t)(v125 - (void)v126) >> 2;
        if (v129 <= v127 + 1) {
          unint64_t v129 = v127 + 1;
        }
        if (v128 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v130 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v130 = v129;
        }
        if (v130)
        {
          uint64_t v131 = (char *)sub_5714((uint64_t)(v122 + 933), v130);
          uint64_t v124 = (uint64_t *)v122[932];
          unint64_t v126 = (uint64_t *)v122[931];
        }
        else
        {
          uint64_t v131 = 0;
        }
        uint64_t v139 = (uint64_t *)&v131[8 * v127];
        int v140 = &v131[8 * v130];
        *uint64_t v139 = v123;
        unint64_t v133 = v139 + 1;
        while (v124 != v126)
        {
          uint64_t v141 = *--v124;
          *--uint64_t v139 = v141;
        }
LABEL_195:
        v122[931] = v139;
        v122[932] = v133;
        v122[933] = v140;
        if (v126) {
          operator delete(v126);
        }
        goto LABEL_197;
      }
    }
    uint64_t *v124 = v123;
    unint64_t v133 = v124 + 1;
LABEL_197:
    v122[932] = v133;
LABEL_198:
    int v143 = 1 << *(_DWORD *)(v3 + 48);
    if (v143 == 2)
    {
      unint64_t v144 = *(void **)a1[1];
      uint64_t v145 = *(_DWORD *)(a1[2] + 60) & 0xFFFFFLL;
      uint64_t v146 = (uint64_t *)v144[935];
      unint64_t v154 = v144[936];
      if ((unint64_t)v146 >= v154)
      {
        unint64_t v148 = (uint64_t *)v144[934];
        uint64_t v156 = v146 - v148;
        if ((unint64_t)(v156 + 1) >> 61) {
          goto LABEL_488;
        }
        unint64_t v157 = v154 - (void)v148;
        unint64_t v158 = (uint64_t)(v154 - (void)v148) >> 2;
        if (v158 <= v156 + 1) {
          unint64_t v158 = v156 + 1;
        }
        if (v157 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v159 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v159 = v158;
        }
        if (v159)
        {
          uint64_t v160 = (char *)sub_5714((uint64_t)(v144 + 936), v159);
          uint64_t v146 = (uint64_t *)v144[935];
          unint64_t v148 = (uint64_t *)v144[934];
        }
        else
        {
          uint64_t v160 = 0;
        }
        uint64_t v161 = (uint64_t *)&v160[8 * v156];
        int v162 = &v160[8 * v159];
        uint64_t *v161 = v145;
        unint64_t v155 = v161 + 1;
        while (v146 != v148)
        {
          uint64_t v164 = *--v146;
          *--uint64_t v161 = v164;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v143 != 1) {
        goto LABEL_230;
      }
      unint64_t v144 = *(void **)a1[1];
      uint64_t v145 = *(_DWORD *)(a1[2] + 60) & 0xFFFFFLL;
      uint64_t v146 = (uint64_t *)v144[935];
      unint64_t v147 = v144[936];
      if ((unint64_t)v146 >= v147)
      {
        unint64_t v148 = (uint64_t *)v144[934];
        uint64_t v149 = v146 - v148;
        if ((unint64_t)(v149 + 1) >> 61) {
          goto LABEL_488;
        }
        unint64_t v150 = v147 - (void)v148;
        unint64_t v151 = (uint64_t)(v147 - (void)v148) >> 2;
        if (v151 <= v149 + 1) {
          unint64_t v151 = v149 + 1;
        }
        if (v150 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v152 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v152 = v151;
        }
        if (v152)
        {
          uint64_t v153 = (char *)sub_5714((uint64_t)(v144 + 936), v152);
          uint64_t v146 = (uint64_t *)v144[935];
          unint64_t v148 = (uint64_t *)v144[934];
        }
        else
        {
          uint64_t v153 = 0;
        }
        uint64_t v161 = (uint64_t *)&v153[8 * v149];
        int v162 = &v153[8 * v152];
        uint64_t *v161 = v145;
        unint64_t v155 = v161 + 1;
        while (v146 != v148)
        {
          uint64_t v163 = *--v146;
          *--uint64_t v161 = v163;
        }
LABEL_227:
        v144[934] = v161;
        v144[935] = v155;
        v144[936] = v162;
        if (v148) {
          operator delete(v148);
        }
        goto LABEL_229;
      }
    }
    *uint64_t v146 = v145;
    unint64_t v155 = v146 + 1;
LABEL_229:
    v144[935] = v155;
LABEL_230:
    int v165 = 1 << *(_DWORD *)(v3 + 48);
    if (v165 == 2)
    {
      unint64_t v166 = *(void **)a1[1];
      uint64_t v167 = *(_DWORD *)(a1[2] + 44) & 0x7FFFFLL;
      uint64_t v168 = (uint64_t *)v166[938];
      unint64_t v176 = v166[939];
      if ((unint64_t)v168 >= v176)
      {
        unint64_t v170 = (uint64_t *)v166[937];
        uint64_t v178 = v168 - v170;
        if ((unint64_t)(v178 + 1) >> 61) {
          goto LABEL_488;
        }
        unint64_t v179 = v176 - (void)v170;
        unint64_t v180 = (uint64_t)(v176 - (void)v170) >> 2;
        if (v180 <= v178 + 1) {
          unint64_t v180 = v178 + 1;
        }
        if (v179 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v181 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v181 = v180;
        }
        if (v181)
        {
          uint64_t v182 = (char *)sub_5714((uint64_t)(v166 + 939), v181);
          uint64_t v168 = (uint64_t *)v166[938];
          unint64_t v170 = (uint64_t *)v166[937];
        }
        else
        {
          uint64_t v182 = 0;
        }
        uint64_t v183 = (uint64_t *)&v182[8 * v178];
        int v184 = &v182[8 * v181];
        *uint64_t v183 = v167;
        unint64_t v177 = v183 + 1;
        while (v168 != v170)
        {
          uint64_t v186 = *--v168;
          *--uint64_t v183 = v186;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v165 != 1) {
        goto LABEL_262;
      }
      unint64_t v166 = *(void **)a1[1];
      uint64_t v167 = *(_DWORD *)(a1[2] + 44) & 0x7FFFFLL;
      uint64_t v168 = (uint64_t *)v166[938];
      unint64_t v169 = v166[939];
      if ((unint64_t)v168 >= v169)
      {
        unint64_t v170 = (uint64_t *)v166[937];
        uint64_t v171 = v168 - v170;
        if ((unint64_t)(v171 + 1) >> 61) {
          goto LABEL_488;
        }
        unint64_t v172 = v169 - (void)v170;
        unint64_t v173 = (uint64_t)(v169 - (void)v170) >> 2;
        if (v173 <= v171 + 1) {
          unint64_t v173 = v171 + 1;
        }
        if (v172 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v174 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v174 = v173;
        }
        if (v174)
        {
          uint64_t v175 = (char *)sub_5714((uint64_t)(v166 + 939), v174);
          uint64_t v168 = (uint64_t *)v166[938];
          unint64_t v170 = (uint64_t *)v166[937];
        }
        else
        {
          uint64_t v175 = 0;
        }
        uint64_t v183 = (uint64_t *)&v175[8 * v171];
        int v184 = &v175[8 * v174];
        *uint64_t v183 = v167;
        unint64_t v177 = v183 + 1;
        while (v168 != v170)
        {
          uint64_t v185 = *--v168;
          *--uint64_t v183 = v185;
        }
LABEL_259:
        v166[937] = v183;
        v166[938] = v177;
        v166[939] = v184;
        if (v170) {
          operator delete(v170);
        }
        goto LABEL_261;
      }
    }
    *uint64_t v168 = v167;
    unint64_t v177 = v168 + 1;
LABEL_261:
    v166[938] = v177;
LABEL_262:
    int v187 = 1 << *(_DWORD *)(v3 + 48);
    if (v187 == 2)
    {
      unint64_t v188 = *(void **)a1[1];
      uint64_t v189 = *(_DWORD *)(a1[2] + 76) & 0xFFFFFLL;
      uint64_t v190 = (uint64_t *)v188[941];
      unint64_t v198 = v188[942];
      if ((unint64_t)v190 >= v198)
      {
        unint64_t v192 = (uint64_t *)v188[940];
        uint64_t v200 = v190 - v192;
        if ((unint64_t)(v200 + 1) >> 61) {
          goto LABEL_488;
        }
        unint64_t v201 = v198 - (void)v192;
        unint64_t v202 = (uint64_t)(v198 - (void)v192) >> 2;
        if (v202 <= v200 + 1) {
          unint64_t v202 = v200 + 1;
        }
        if (v201 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v203 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v203 = v202;
        }
        if (v203)
        {
          uint64_t v204 = (char *)sub_5714((uint64_t)(v188 + 942), v203);
          uint64_t v190 = (uint64_t *)v188[941];
          unint64_t v192 = (uint64_t *)v188[940];
        }
        else
        {
          uint64_t v204 = 0;
        }
        uint64_t v205 = (uint64_t *)&v204[8 * v200];
        int v206 = &v204[8 * v203];
        uint64_t *v205 = v189;
        unint64_t v199 = v205 + 1;
        while (v190 != v192)
        {
          uint64_t v208 = *--v190;
          *--uint64_t v205 = v208;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v187 != 1) {
        goto LABEL_294;
      }
      unint64_t v188 = *(void **)a1[1];
      uint64_t v189 = *(_DWORD *)(a1[2] + 76) & 0xFFFFFLL;
      uint64_t v190 = (uint64_t *)v188[941];
      unint64_t v191 = v188[942];
      if ((unint64_t)v190 >= v191)
      {
        unint64_t v192 = (uint64_t *)v188[940];
        uint64_t v193 = v190 - v192;
        if ((unint64_t)(v193 + 1) >> 61) {
          goto LABEL_488;
        }
        unint64_t v194 = v191 - (void)v192;
        unint64_t v195 = (uint64_t)(v191 - (void)v192) >> 2;
        if (v195 <= v193 + 1) {
          unint64_t v195 = v193 + 1;
        }
        if (v194 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v196 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v196 = v195;
        }
        if (v196)
        {
          uint64_t v197 = (char *)sub_5714((uint64_t)(v188 + 942), v196);
          uint64_t v190 = (uint64_t *)v188[941];
          unint64_t v192 = (uint64_t *)v188[940];
        }
        else
        {
          uint64_t v197 = 0;
        }
        uint64_t v205 = (uint64_t *)&v197[8 * v193];
        int v206 = &v197[8 * v196];
        uint64_t *v205 = v189;
        unint64_t v199 = v205 + 1;
        while (v190 != v192)
        {
          uint64_t v207 = *--v190;
          *--uint64_t v205 = v207;
        }
LABEL_291:
        v188[940] = v205;
        v188[941] = v199;
        v188[942] = v206;
        if (v192) {
          operator delete(v192);
        }
        goto LABEL_293;
      }
    }
    uint64_t *v190 = v189;
    unint64_t v199 = v190 + 1;
LABEL_293:
    v188[941] = v199;
LABEL_294:
    int v209 = 1 << *(_DWORD *)(v3 + 48);
    if (v209 == 2)
    {
      uint64_t v210 = *(void **)a1[1];
      uint64_t v211 = *(_DWORD *)(a1[2] + 40) & 0x7FFFFLL;
      unint64_t v212 = (uint64_t *)v210[944];
      unint64_t v220 = v210[945];
      if ((unint64_t)v212 >= v220)
      {
        unint64_t v214 = (uint64_t *)v210[943];
        uint64_t v222 = v212 - v214;
        if ((unint64_t)(v222 + 1) >> 61) {
          goto LABEL_488;
        }
        unint64_t v223 = v220 - (void)v214;
        unint64_t v224 = (uint64_t)(v220 - (void)v214) >> 2;
        if (v224 <= v222 + 1) {
          unint64_t v224 = v222 + 1;
        }
        if (v223 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v225 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v225 = v224;
        }
        if (v225)
        {
          unint64_t v226 = (char *)sub_5714((uint64_t)(v210 + 945), v225);
          unint64_t v212 = (uint64_t *)v210[944];
          unint64_t v214 = (uint64_t *)v210[943];
        }
        else
        {
          unint64_t v226 = 0;
        }
        unint64_t v227 = (uint64_t *)&v226[8 * v222];
        uint64_t v228 = &v226[8 * v225];
        uint64_t *v227 = v211;
        uint64_t v221 = v227 + 1;
        while (v212 != v214)
        {
          uint64_t v230 = *--v212;
          *--unint64_t v227 = v230;
        }
        goto LABEL_323;
      }
    }
    else
    {
      if (v209 != 1) {
        goto LABEL_326;
      }
      uint64_t v210 = *(void **)a1[1];
      uint64_t v211 = *(_DWORD *)(a1[2] + 40) & 0x7FFFFLL;
      unint64_t v212 = (uint64_t *)v210[944];
      unint64_t v213 = v210[945];
      if ((unint64_t)v212 >= v213)
      {
        unint64_t v214 = (uint64_t *)v210[943];
        uint64_t v215 = v212 - v214;
        if ((unint64_t)(v215 + 1) >> 61) {
          goto LABEL_488;
        }
        unint64_t v216 = v213 - (void)v214;
        unint64_t v217 = (uint64_t)(v213 - (void)v214) >> 2;
        if (v217 <= v215 + 1) {
          unint64_t v217 = v215 + 1;
        }
        if (v216 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v218 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v218 = v217;
        }
        if (v218)
        {
          unint64_t v219 = (char *)sub_5714((uint64_t)(v210 + 945), v218);
          unint64_t v212 = (uint64_t *)v210[944];
          unint64_t v214 = (uint64_t *)v210[943];
        }
        else
        {
          unint64_t v219 = 0;
        }
        unint64_t v227 = (uint64_t *)&v219[8 * v215];
        uint64_t v228 = &v219[8 * v218];
        uint64_t *v227 = v211;
        uint64_t v221 = v227 + 1;
        while (v212 != v214)
        {
          uint64_t v229 = *--v212;
          *--unint64_t v227 = v229;
        }
LABEL_323:
        v210[943] = v227;
        v210[944] = v221;
        v210[945] = v228;
        if (v214) {
          operator delete(v214);
        }
        goto LABEL_325;
      }
    }
    *unint64_t v212 = v211;
    uint64_t v221 = v212 + 1;
LABEL_325:
    v210[944] = v221;
LABEL_326:
    int v231 = 1 << *(_DWORD *)(v3 + 48);
    if (v231 == 2)
    {
      uint64_t v232 = *(void **)a1[1];
      uint64_t v233 = *(_DWORD *)(a1[2] + 72) & 0xFFFFFLL;
      unint64_t v234 = (uint64_t *)v232[947];
      unint64_t v242 = v232[948];
      if ((unint64_t)v234 >= v242)
      {
        unint64_t v236 = (uint64_t *)v232[946];
        uint64_t v244 = v234 - v236;
        if ((unint64_t)(v244 + 1) >> 61) {
          goto LABEL_488;
        }
        unint64_t v245 = v242 - (void)v236;
        unint64_t v246 = (uint64_t)(v242 - (void)v236) >> 2;
        if (v246 <= v244 + 1) {
          unint64_t v246 = v244 + 1;
        }
        if (v245 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v247 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v247 = v246;
        }
        if (v247)
        {
          unint64_t v248 = (char *)sub_5714((uint64_t)(v232 + 948), v247);
          unint64_t v234 = (uint64_t *)v232[947];
          unint64_t v236 = (uint64_t *)v232[946];
        }
        else
        {
          unint64_t v248 = 0;
        }
        unint64_t v249 = (uint64_t *)&v248[8 * v244];
        unint64_t v250 = &v248[8 * v247];
        *unint64_t v249 = v233;
        unint64_t v243 = v249 + 1;
        while (v234 != v236)
        {
          uint64_t v252 = *--v234;
          *--unint64_t v249 = v252;
        }
        goto LABEL_355;
      }
    }
    else
    {
      if (v231 != 1) {
        goto LABEL_358;
      }
      uint64_t v232 = *(void **)a1[1];
      uint64_t v233 = *(_DWORD *)(a1[2] + 72) & 0xFFFFFLL;
      unint64_t v234 = (uint64_t *)v232[947];
      unint64_t v235 = v232[948];
      if ((unint64_t)v234 >= v235)
      {
        unint64_t v236 = (uint64_t *)v232[946];
        uint64_t v237 = v234 - v236;
        if ((unint64_t)(v237 + 1) >> 61) {
          goto LABEL_488;
        }
        unint64_t v238 = v235 - (void)v236;
        unint64_t v239 = (uint64_t)(v235 - (void)v236) >> 2;
        if (v239 <= v237 + 1) {
          unint64_t v239 = v237 + 1;
        }
        if (v238 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v240 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v240 = v239;
        }
        if (v240)
        {
          unint64_t v241 = (char *)sub_5714((uint64_t)(v232 + 948), v240);
          unint64_t v234 = (uint64_t *)v232[947];
          unint64_t v236 = (uint64_t *)v232[946];
        }
        else
        {
          unint64_t v241 = 0;
        }
        unint64_t v249 = (uint64_t *)&v241[8 * v237];
        unint64_t v250 = &v241[8 * v240];
        *unint64_t v249 = v233;
        unint64_t v243 = v249 + 1;
        while (v234 != v236)
        {
          uint64_t v251 = *--v234;
          *--unint64_t v249 = v251;
        }
LABEL_355:
        v232[946] = v249;
        v232[947] = v243;
        v232[948] = v250;
        if (v236) {
          operator delete(v236);
        }
        goto LABEL_357;
      }
    }
    *unint64_t v234 = v233;
    unint64_t v243 = v234 + 1;
LABEL_357:
    v232[947] = v243;
LABEL_358:
    int v253 = 1 << *(_DWORD *)(v3 + 48);
    if (v253 == 2)
    {
      uint64_t v254 = *(void **)a1[1];
      uint64_t v255 = *(_DWORD *)(a1[2] + 20) & 0x7FFFFLL;
      uint64_t v256 = (uint64_t *)v254[950];
      unint64_t v264 = v254[951];
      if ((unint64_t)v256 >= v264)
      {
        unint64_t v258 = (uint64_t *)v254[949];
        uint64_t v266 = v256 - v258;
        if ((unint64_t)(v266 + 1) >> 61) {
          goto LABEL_488;
        }
        unint64_t v267 = v264 - (void)v258;
        unint64_t v268 = (uint64_t)(v264 - (void)v258) >> 2;
        if (v268 <= v266 + 1) {
          unint64_t v268 = v266 + 1;
        }
        if (v267 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v269 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v269 = v268;
        }
        if (v269)
        {
          unint64_t v270 = (char *)sub_5714((uint64_t)(v254 + 951), v269);
          uint64_t v256 = (uint64_t *)v254[950];
          unint64_t v258 = (uint64_t *)v254[949];
        }
        else
        {
          unint64_t v270 = 0;
        }
        unint64_t v271 = (uint64_t *)&v270[8 * v266];
        uint64_t v272 = &v270[8 * v269];
        uint64_t *v271 = v255;
        int v265 = v271 + 1;
        while (v256 != v258)
        {
          uint64_t v274 = *--v256;
          *--unint64_t v271 = v274;
        }
        goto LABEL_387;
      }
    }
    else
    {
      if (v253 != 1) {
        goto LABEL_390;
      }
      uint64_t v254 = *(void **)a1[1];
      uint64_t v255 = *(_DWORD *)(a1[2] + 20) & 0x7FFFFLL;
      uint64_t v256 = (uint64_t *)v254[950];
      unint64_t v257 = v254[951];
      if ((unint64_t)v256 >= v257)
      {
        unint64_t v258 = (uint64_t *)v254[949];
        uint64_t v259 = v256 - v258;
        if ((unint64_t)(v259 + 1) >> 61) {
          goto LABEL_488;
        }
        unint64_t v260 = v257 - (void)v258;
        unint64_t v261 = (uint64_t)(v257 - (void)v258) >> 2;
        if (v261 <= v259 + 1) {
          unint64_t v261 = v259 + 1;
        }
        if (v260 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v262 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v262 = v261;
        }
        if (v262)
        {
          unint64_t v263 = (char *)sub_5714((uint64_t)(v254 + 951), v262);
          uint64_t v256 = (uint64_t *)v254[950];
          unint64_t v258 = (uint64_t *)v254[949];
        }
        else
        {
          unint64_t v263 = 0;
        }
        unint64_t v271 = (uint64_t *)&v263[8 * v259];
        uint64_t v272 = &v263[8 * v262];
        uint64_t *v271 = v255;
        int v265 = v271 + 1;
        while (v256 != v258)
        {
          uint64_t v273 = *--v256;
          *--unint64_t v271 = v273;
        }
LABEL_387:
        v254[949] = v271;
        v254[950] = v265;
        v254[951] = v272;
        if (v258) {
          operator delete(v258);
        }
        goto LABEL_389;
      }
    }
    uint64_t *v256 = v255;
    int v265 = v256 + 1;
LABEL_389:
    v254[950] = v265;
LABEL_390:
    int v275 = 1 << *(_DWORD *)(v3 + 48);
    if (v275 == 2)
    {
      uint64_t v276 = *(void **)a1[1];
      uint64_t v277 = *(_DWORD *)(a1[2] + 52) & 0xFFFFFLL;
      unint64_t v278 = (uint64_t *)v276[953];
      unint64_t v286 = v276[954];
      if ((unint64_t)v278 >= v286)
      {
        uint64_t v280 = (uint64_t *)v276[952];
        uint64_t v288 = v278 - v280;
        if ((unint64_t)(v288 + 1) >> 61) {
          goto LABEL_488;
        }
        unint64_t v289 = v286 - (void)v280;
        unint64_t v290 = (uint64_t)(v286 - (void)v280) >> 2;
        if (v290 <= v288 + 1) {
          unint64_t v290 = v288 + 1;
        }
        if (v289 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v291 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v291 = v290;
        }
        if (v291)
        {
          unint64_t v292 = (char *)sub_5714((uint64_t)(v276 + 954), v291);
          unint64_t v278 = (uint64_t *)v276[953];
          uint64_t v280 = (uint64_t *)v276[952];
        }
        else
        {
          unint64_t v292 = 0;
        }
        unint64_t v293 = (uint64_t *)&v292[8 * v288];
        unint64_t v294 = &v292[8 * v291];
        *unint64_t v293 = v277;
        uint64_t v287 = v293 + 1;
        while (v278 != v280)
        {
          uint64_t v296 = *--v278;
          *--unint64_t v293 = v296;
        }
        goto LABEL_419;
      }
    }
    else
    {
      if (v275 != 1) {
        goto LABEL_422;
      }
      uint64_t v276 = *(void **)a1[1];
      uint64_t v277 = *(_DWORD *)(a1[2] + 52) & 0xFFFFFLL;
      unint64_t v278 = (uint64_t *)v276[953];
      unint64_t v279 = v276[954];
      if ((unint64_t)v278 >= v279)
      {
        uint64_t v280 = (uint64_t *)v276[952];
        uint64_t v281 = v278 - v280;
        if ((unint64_t)(v281 + 1) >> 61) {
          goto LABEL_488;
        }
        unint64_t v282 = v279 - (void)v280;
        unint64_t v283 = (uint64_t)(v279 - (void)v280) >> 2;
        if (v283 <= v281 + 1) {
          unint64_t v283 = v281 + 1;
        }
        if (v282 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v284 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v284 = v283;
        }
        if (v284)
        {
          unint64_t v285 = (char *)sub_5714((uint64_t)(v276 + 954), v284);
          unint64_t v278 = (uint64_t *)v276[953];
          uint64_t v280 = (uint64_t *)v276[952];
        }
        else
        {
          unint64_t v285 = 0;
        }
        unint64_t v293 = (uint64_t *)&v285[8 * v281];
        unint64_t v294 = &v285[8 * v284];
        *unint64_t v293 = v277;
        uint64_t v287 = v293 + 1;
        while (v278 != v280)
        {
          uint64_t v295 = *--v278;
          *--unint64_t v293 = v295;
        }
LABEL_419:
        v276[952] = v293;
        v276[953] = v287;
        v276[954] = v294;
        if (v280) {
          operator delete(v280);
        }
        goto LABEL_421;
      }
    }
    *unint64_t v278 = v277;
    uint64_t v287 = v278 + 1;
LABEL_421:
    v276[953] = v287;
LABEL_422:
    int v297 = 1 << *(_DWORD *)(v3 + 48);
    if (v297 == 2)
    {
      uint64_t v298 = *(void **)a1[1];
      uint64_t v299 = *(_DWORD *)(a1[2] + 24) & 0x7FFFFLL;
      uint64_t v300 = (uint64_t *)v298[956];
      unint64_t v308 = v298[957];
      if ((unint64_t)v300 >= v308)
      {
        unint64_t v302 = (uint64_t *)v298[955];
        uint64_t v310 = v300 - v302;
        if ((unint64_t)(v310 + 1) >> 61) {
          goto LABEL_488;
        }
        unint64_t v311 = v308 - (void)v302;
        unint64_t v312 = (uint64_t)(v308 - (void)v302) >> 2;
        if (v312 <= v310 + 1) {
          unint64_t v312 = v310 + 1;
        }
        if (v311 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v313 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v313 = v312;
        }
        if (v313)
        {
          unint64_t v314 = (char *)sub_5714((uint64_t)(v298 + 957), v313);
          uint64_t v300 = (uint64_t *)v298[956];
          unint64_t v302 = (uint64_t *)v298[955];
        }
        else
        {
          unint64_t v314 = 0;
        }
        unint64_t v315 = (uint64_t *)&v314[8 * v310];
        uint64_t v316 = &v314[8 * v313];
        uint64_t *v315 = v299;
        unint64_t v309 = v315 + 1;
        while (v300 != v302)
        {
          uint64_t v318 = *--v300;
          *--unint64_t v315 = v318;
        }
        goto LABEL_451;
      }
    }
    else
    {
      if (v297 != 1) {
        goto LABEL_454;
      }
      uint64_t v298 = *(void **)a1[1];
      uint64_t v299 = *(_DWORD *)(a1[2] + 24) & 0x7FFFFLL;
      uint64_t v300 = (uint64_t *)v298[956];
      unint64_t v301 = v298[957];
      if ((unint64_t)v300 >= v301)
      {
        unint64_t v302 = (uint64_t *)v298[955];
        uint64_t v303 = v300 - v302;
        if ((unint64_t)(v303 + 1) >> 61) {
          goto LABEL_488;
        }
        unint64_t v304 = v301 - (void)v302;
        unint64_t v305 = (uint64_t)(v301 - (void)v302) >> 2;
        if (v305 <= v303 + 1) {
          unint64_t v305 = v303 + 1;
        }
        if (v304 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v306 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v306 = v305;
        }
        if (v306)
        {
          unint64_t v307 = (char *)sub_5714((uint64_t)(v298 + 957), v306);
          uint64_t v300 = (uint64_t *)v298[956];
          unint64_t v302 = (uint64_t *)v298[955];
        }
        else
        {
          unint64_t v307 = 0;
        }
        unint64_t v315 = (uint64_t *)&v307[8 * v303];
        uint64_t v316 = &v307[8 * v306];
        uint64_t *v315 = v299;
        unint64_t v309 = v315 + 1;
        while (v300 != v302)
        {
          uint64_t v317 = *--v300;
          *--unint64_t v315 = v317;
        }
LABEL_451:
        v298[955] = v315;
        v298[956] = v309;
        v298[957] = v316;
        if (v302) {
          operator delete(v302);
        }
        goto LABEL_453;
      }
    }
    uint64_t *v300 = v299;
    unint64_t v309 = v300 + 1;
LABEL_453:
    v298[956] = v309;
LABEL_454:
    int v319 = 1 << *(_DWORD *)(v3 + 48);
    if (v319 == 2)
    {
      uint64_t v331 = a1[2];
      uint64_t v321 = *(void **)a1[1];
      uint64_t v322 = *(_DWORD *)(v331 + 56) & 0xFFFFFLL;
      unint64_t v323 = (uint64_t *)v321[959];
      unint64_t v332 = v321[960];
      if ((unint64_t)v323 >= v332)
      {
        uint64_t v325 = (uint64_t *)v321[958];
        uint64_t v334 = v323 - v325;
        if (!((unint64_t)(v334 + 1) >> 61))
        {
          unint64_t v335 = v332 - (void)v325;
          unint64_t v336 = (uint64_t)(v332 - (void)v325) >> 2;
          if (v336 <= v334 + 1) {
            unint64_t v336 = v334 + 1;
          }
          if (v335 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v337 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v337 = v336;
          }
          if (v337)
          {
            uint64_t v338 = (char *)sub_5714((uint64_t)(v321 + 960), v337);
            unint64_t v323 = (uint64_t *)v321[959];
            uint64_t v325 = (uint64_t *)v321[958];
          }
          else
          {
            uint64_t v338 = 0;
          }
          uint64_t v339 = (uint64_t *)&v338[8 * v334];
          uint64_t v340 = &v338[8 * v337];
          uint64_t *v339 = v322;
          unint64_t v333 = v339 + 1;
          while (v323 != v325)
          {
            uint64_t v342 = *--v323;
            *--uint64_t v339 = v342;
          }
          goto LABEL_483;
        }
LABEL_488:
        sub_566C();
      }
    }
    else
    {
      if (v319 != 1)
      {
LABEL_486:
        *a2 = 1;
        return;
      }
      uint64_t v320 = a1[2];
      uint64_t v321 = *(void **)a1[1];
      uint64_t v322 = *(_DWORD *)(v320 + 56) & 0xFFFFFLL;
      unint64_t v323 = (uint64_t *)v321[959];
      unint64_t v324 = v321[960];
      if ((unint64_t)v323 >= v324)
      {
        uint64_t v325 = (uint64_t *)v321[958];
        uint64_t v326 = v323 - v325;
        if (!((unint64_t)(v326 + 1) >> 61))
        {
          unint64_t v327 = v324 - (void)v325;
          unint64_t v328 = (uint64_t)(v324 - (void)v325) >> 2;
          if (v328 <= v326 + 1) {
            unint64_t v328 = v326 + 1;
          }
          if (v327 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v329 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v329 = v328;
          }
          if (v329)
          {
            unint64_t v330 = (char *)sub_5714((uint64_t)(v321 + 960), v329);
            unint64_t v323 = (uint64_t *)v321[959];
            uint64_t v325 = (uint64_t *)v321[958];
          }
          else
          {
            unint64_t v330 = 0;
          }
          uint64_t v339 = (uint64_t *)&v330[8 * v326];
          uint64_t v340 = &v330[8 * v329];
          uint64_t *v339 = v322;
          unint64_t v333 = v339 + 1;
          while (v323 != v325)
          {
            uint64_t v341 = *--v323;
            *--uint64_t v339 = v341;
          }
LABEL_483:
          v321[958] = v339;
          v321[959] = v333;
          v321[960] = v340;
          if (v325) {
            operator delete(v325);
          }
          goto LABEL_485;
        }
        goto LABEL_488;
      }
    }
    *unint64_t v323 = v322;
    unint64_t v333 = v323 + 1;
LABEL_485:
    v321[959] = v333;
    goto LABEL_486;
  }
  int v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    uint64_t v18 = (void *)a1[1];
    uint64_t v17 = a1[2];
    unint64_t v19 = (void *)*v18;
    *(void *)(v19[917] - 8) += *(_DWORD *)(v17 + 36) & 0x7FFFF;
    *(void *)(v19[920] - 8) += *(_DWORD *)(v17 + 68) & 0xFFFFF;
    *(void *)(v19[923] - 8) += *(_WORD *)(v17 + 48) & 0x7FFF;
    *(void *)(v19[926] - 8) += *(_DWORD *)(v17 + 32) & 0x7FFFF;
    *(void *)(v19[929] - 8) += *(_DWORD *)(v17 + 64) & 0xFFFFF;
    *(void *)(v19[932] - 8) += *(_DWORD *)(v17 + 28) & 0x7FFFF;
    *(void *)(v19[935] - 8) += *(_DWORD *)(v17 + 60) & 0xFFFFF;
    *(void *)(v19[938] - 8) += *(_DWORD *)(v17 + 44) & 0x7FFFF;
    *(void *)(v19[941] - 8) += *(_DWORD *)(v17 + 76) & 0xFFFFF;
    *(void *)(v19[944] - 8) += *(_DWORD *)(v17 + 40) & 0x7FFFF;
    uint64_t v20 = (_DWORD *)a1[2];
    uint64_t v21 = (void *)*v18;
    *(void *)(v21[947] - 8) += v20[18] & 0xFFFFF;
    *(void *)(v21[950] - 8) += v20[5] & 0x7FFFF;
    *(void *)(v21[953] - 8) += v20[13] & 0xFFFFF;
    *(void *)(v21[956] - 8) += v20[6] & 0x7FFFF;
    *(void *)(v21[959] - 8) += v20[14] & 0xFFFFF;
  }
}

void sub_D201C(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    int v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_DWORD *)(a1[2] + 32) & 0x1FFFFLL;
      uint64_t v8 = (uint64_t *)v6[314];
      unint64_t v19 = v6[315];
      if ((unint64_t)v8 >= v19)
      {
        unint64_t v10 = (uint64_t *)v6[313];
        uint64_t v21 = v8 - v10;
        if ((unint64_t)(v21 + 1) >> 61) {
          goto LABEL_200;
        }
        unint64_t v22 = v19 - (void)v10;
        unint64_t v23 = (uint64_t)(v19 - (void)v10) >> 2;
        if (v23 <= v21 + 1) {
          unint64_t v23 = v21 + 1;
        }
        if (v22 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v23;
        }
        if (v24)
        {
          unint64_t v25 = (char *)sub_5714((uint64_t)(v6 + 315), v24);
          uint64_t v8 = (uint64_t *)v6[314];
          unint64_t v10 = (uint64_t *)v6[313];
        }
        else
        {
          unint64_t v25 = 0;
        }
        unint64_t v26 = (uint64_t *)&v25[8 * v21];
        unint64_t v27 = &v25[8 * v24];
        *unint64_t v26 = v7;
        uint64_t v20 = v26 + 1;
        while (v8 != v10)
        {
          uint64_t v29 = *--v8;
          *--unint64_t v26 = v29;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1) {
        goto LABEL_38;
      }
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_DWORD *)(a1[2] + 32) & 0x1FFFFLL;
      uint64_t v8 = (uint64_t *)v6[314];
      unint64_t v9 = v6[315];
      if ((unint64_t)v8 >= v9)
      {
        unint64_t v10 = (uint64_t *)v6[313];
        uint64_t v11 = v8 - v10;
        if ((unint64_t)(v11 + 1) >> 61) {
          goto LABEL_200;
        }
        unint64_t v12 = v9 - (void)v10;
        unint64_t v13 = (uint64_t)(v9 - (void)v10) >> 2;
        if (v13 <= v11 + 1) {
          unint64_t v13 = v11 + 1;
        }
        if (v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14)
        {
          unint64_t v15 = (char *)sub_5714((uint64_t)(v6 + 315), v14);
          uint64_t v8 = (uint64_t *)v6[314];
          unint64_t v10 = (uint64_t *)v6[313];
        }
        else
        {
          unint64_t v15 = 0;
        }
        unint64_t v26 = (uint64_t *)&v15[8 * v11];
        unint64_t v27 = &v15[8 * v14];
        *unint64_t v26 = v7;
        uint64_t v20 = v26 + 1;
        while (v8 != v10)
        {
          uint64_t v28 = *--v8;
          *--unint64_t v26 = v28;
        }
LABEL_35:
        v6[313] = v26;
        v6[314] = v20;
        v6[315] = v27;
        if (v10) {
          operator delete(v10);
        }
        goto LABEL_37;
      }
    }
    *uint64_t v8 = v7;
    uint64_t v20 = v8 + 1;
LABEL_37:
    v6[314] = v20;
LABEL_38:
    int v30 = 1 << *(_DWORD *)(v3 + 48);
    if (v30 == 2)
    {
      uint64_t v31 = *(void **)a1[1];
      uint64_t v32 = *(_DWORD *)(a1[2] + 28) & 0x1FFFFLL;
      int v33 = (uint64_t *)v31[317];
      unint64_t v41 = v31[318];
      if ((unint64_t)v33 >= v41)
      {
        uint64_t v35 = (uint64_t *)v31[316];
        uint64_t v43 = v33 - v35;
        if ((unint64_t)(v43 + 1) >> 61) {
          goto LABEL_200;
        }
        unint64_t v44 = v41 - (void)v35;
        unint64_t v45 = (uint64_t)(v41 - (void)v35) >> 2;
        if (v45 <= v43 + 1) {
          unint64_t v45 = v43 + 1;
        }
        if (v44 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v46 = v45;
        }
        if (v46)
        {
          unint64_t v47 = (char *)sub_5714((uint64_t)(v31 + 318), v46);
          int v33 = (uint64_t *)v31[317];
          uint64_t v35 = (uint64_t *)v31[316];
        }
        else
        {
          unint64_t v47 = 0;
        }
        unint64_t v48 = (uint64_t *)&v47[8 * v43];
        unint64_t v49 = &v47[8 * v46];
        *unint64_t v48 = v32;
        unint64_t v42 = v48 + 1;
        while (v33 != v35)
        {
          uint64_t v51 = *--v33;
          *--unint64_t v48 = v51;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v30 != 1) {
        goto LABEL_70;
      }
      uint64_t v31 = *(void **)a1[1];
      uint64_t v32 = *(_DWORD *)(a1[2] + 28) & 0x1FFFFLL;
      int v33 = (uint64_t *)v31[317];
      unint64_t v34 = v31[318];
      if ((unint64_t)v33 >= v34)
      {
        uint64_t v35 = (uint64_t *)v31[316];
        uint64_t v36 = v33 - v35;
        if ((unint64_t)(v36 + 1) >> 61) {
          goto LABEL_200;
        }
        unint64_t v37 = v34 - (void)v35;
        unint64_t v38 = (uint64_t)(v34 - (void)v35) >> 2;
        if (v38 <= v36 + 1) {
          unint64_t v38 = v36 + 1;
        }
        if (v37 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v39 = v38;
        }
        if (v39)
        {
          unint64_t v40 = (char *)sub_5714((uint64_t)(v31 + 318), v39);
          int v33 = (uint64_t *)v31[317];
          uint64_t v35 = (uint64_t *)v31[316];
        }
        else
        {
          unint64_t v40 = 0;
        }
        unint64_t v48 = (uint64_t *)&v40[8 * v36];
        unint64_t v49 = &v40[8 * v39];
        *unint64_t v48 = v32;
        unint64_t v42 = v48 + 1;
        while (v33 != v35)
        {
          uint64_t v50 = *--v33;
          *--unint64_t v48 = v50;
        }
LABEL_67:
        v31[316] = v48;
        v31[317] = v42;
        v31[318] = v49;
        if (v35) {
          operator delete(v35);
        }
        goto LABEL_69;
      }
    }
    uint64_t *v33 = v32;
    unint64_t v42 = v33 + 1;
LABEL_69:
    v31[317] = v42;
LABEL_70:
    int v52 = 1 << *(_DWORD *)(v3 + 48);
    if (v52 == 2)
    {
      uint64_t v53 = *(void **)a1[1];
      uint64_t v54 = *(_DWORD *)(a1[2] + 24) & 0x1FFFFLL;
      int v55 = (uint64_t *)v53[320];
      unint64_t v63 = v53[321];
      if ((unint64_t)v55 >= v63)
      {
        uint64_t v57 = (uint64_t *)v53[319];
        uint64_t v65 = v55 - v57;
        if ((unint64_t)(v65 + 1) >> 61) {
          goto LABEL_200;
        }
        unint64_t v66 = v63 - (void)v57;
        unint64_t v67 = (uint64_t)(v63 - (void)v57) >> 2;
        if (v67 <= v65 + 1) {
          unint64_t v67 = v65 + 1;
        }
        if (v66 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v68 = v67;
        }
        if (v68)
        {
          unint64_t v69 = (char *)sub_5714((uint64_t)(v53 + 321), v68);
          int v55 = (uint64_t *)v53[320];
          uint64_t v57 = (uint64_t *)v53[319];
        }
        else
        {
          unint64_t v69 = 0;
        }
        unint64_t v70 = (uint64_t *)&v69[8 * v65];
        unint64_t v71 = &v69[8 * v68];
        uint64_t *v70 = v54;
        unint64_t v64 = v70 + 1;
        while (v55 != v57)
        {
          uint64_t v73 = *--v55;
          *--unint64_t v70 = v73;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v52 != 1) {
        goto LABEL_102;
      }
      uint64_t v53 = *(void **)a1[1];
      uint64_t v54 = *(_DWORD *)(a1[2] + 24) & 0x1FFFFLL;
      int v55 = (uint64_t *)v53[320];
      unint64_t v56 = v53[321];
      if ((unint64_t)v55 >= v56)
      {
        uint64_t v57 = (uint64_t *)v53[319];
        uint64_t v58 = v55 - v57;
        if ((unint64_t)(v58 + 1) >> 61) {
          goto LABEL_200;
        }
        unint64_t v59 = v56 - (void)v57;
        unint64_t v60 = (uint64_t)(v56 - (void)v57) >> 2;
        if (v60 <= v58 + 1) {
          unint64_t v60 = v58 + 1;
        }
        if (v59 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v61 = v60;
        }
        if (v61)
        {
          unint64_t v62 = (char *)sub_5714((uint64_t)(v53 + 321), v61);
          int v55 = (uint64_t *)v53[320];
          uint64_t v57 = (uint64_t *)v53[319];
        }
        else
        {
          unint64_t v62 = 0;
        }
        unint64_t v70 = (uint64_t *)&v62[8 * v58];
        unint64_t v71 = &v62[8 * v61];
        uint64_t *v70 = v54;
        unint64_t v64 = v70 + 1;
        while (v55 != v57)
        {
          uint64_t v72 = *--v55;
          *--unint64_t v70 = v72;
        }
LABEL_99:
        v53[319] = v70;
        v53[320] = v64;
        v53[321] = v71;
        if (v57) {
          operator delete(v57);
        }
        goto LABEL_101;
      }
    }
    *int v55 = v54;
    unint64_t v64 = v55 + 1;
LABEL_101:
    v53[320] = v64;
LABEL_102:
    int v74 = 1 << *(_DWORD *)(v3 + 48);
    if (v74 == 2)
    {
      uint64_t v75 = *(void **)a1[1];
      uint64_t v76 = *(_DWORD *)(a1[2] + 36) & 0x1FFFFFLL;
      int v77 = (uint64_t *)v75[323];
      unint64_t v85 = v75[324];
      if ((unint64_t)v77 >= v85)
      {
        uint64_t v79 = (uint64_t *)v75[322];
        uint64_t v87 = v77 - v79;
        if ((unint64_t)(v87 + 1) >> 61) {
          goto LABEL_200;
        }
        unint64_t v88 = v85 - (void)v79;
        unint64_t v89 = (uint64_t)(v85 - (void)v79) >> 2;
        if (v89 <= v87 + 1) {
          unint64_t v89 = v87 + 1;
        }
        if (v88 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v90 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v90 = v89;
        }
        if (v90)
        {
          unint64_t v91 = (char *)sub_5714((uint64_t)(v75 + 324), v90);
          int v77 = (uint64_t *)v75[323];
          uint64_t v79 = (uint64_t *)v75[322];
        }
        else
        {
          unint64_t v91 = 0;
        }
        unint64_t v92 = (uint64_t *)&v91[8 * v87];
        unint64_t v93 = &v91[8 * v90];
        uint64_t *v92 = v76;
        unint64_t v86 = v92 + 1;
        while (v77 != v79)
        {
          uint64_t v95 = *--v77;
          *--unint64_t v92 = v95;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v74 != 1) {
        goto LABEL_134;
      }
      uint64_t v75 = *(void **)a1[1];
      uint64_t v76 = *(_DWORD *)(a1[2] + 36) & 0x1FFFFFLL;
      int v77 = (uint64_t *)v75[323];
      unint64_t v78 = v75[324];
      if ((unint64_t)v77 >= v78)
      {
        uint64_t v79 = (uint64_t *)v75[322];
        uint64_t v80 = v77 - v79;
        if ((unint64_t)(v80 + 1) >> 61) {
          goto LABEL_200;
        }
        unint64_t v81 = v78 - (void)v79;
        unint64_t v82 = (uint64_t)(v78 - (void)v79) >> 2;
        if (v82 <= v80 + 1) {
          unint64_t v82 = v80 + 1;
        }
        if (v81 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v83 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v83 = v82;
        }
        if (v83)
        {
          unint64_t v84 = (char *)sub_5714((uint64_t)(v75 + 324), v83);
          int v77 = (uint64_t *)v75[323];
          uint64_t v79 = (uint64_t *)v75[322];
        }
        else
        {
          unint64_t v84 = 0;
        }
        unint64_t v92 = (uint64_t *)&v84[8 * v80];
        unint64_t v93 = &v84[8 * v83];
        uint64_t *v92 = v76;
        unint64_t v86 = v92 + 1;
        while (v77 != v79)
        {
          uint64_t v94 = *--v77;
          *--unint64_t v92 = v94;
        }
LABEL_131:
        v75[322] = v92;
        v75[323] = v86;
        v75[324] = v93;
        if (v79) {
          operator delete(v79);
        }
        goto LABEL_133;
      }
    }
    *int v77 = v76;
    unint64_t v86 = v77 + 1;
LABEL_133:
    v75[323] = v86;
LABEL_134:
    int v96 = 1 << *(_DWORD *)(v3 + 48);
    if (v96 == 2)
    {
      uint64_t v108 = a1[1];
      uint64_t v98 = *(void **)v108;
      uint64_t v99 = *(unsigned __int16 *)(a1[2] + 22);
      unint64_t v100 = *(char **)(*(void *)v108 + 2608);
      unint64_t v109 = *(void *)(*(void *)v108 + 2616);
      if ((unint64_t)v100 >= v109)
      {
        uint64_t v102 = (char *)v98[325];
        uint64_t v111 = (v100 - v102) >> 3;
        if ((unint64_t)(v111 + 1) >> 61) {
          goto LABEL_200;
        }
        unint64_t v112 = v109 - (void)v102;
        unint64_t v113 = (uint64_t)(v109 - (void)v102) >> 2;
        if (v113 <= v111 + 1) {
          unint64_t v113 = v111 + 1;
        }
        if (v112 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v114 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v114 = v113;
        }
        if (v114)
        {
          unint64_t v115 = (char *)sub_5714((uint64_t)(v98 + 327), v114);
          unint64_t v100 = (char *)v98[326];
          uint64_t v102 = (char *)v98[325];
        }
        else
        {
          unint64_t v115 = 0;
        }
        uint64_t v116 = &v115[8 * v111];
        uint64_t v117 = &v115[8 * v114];
        *(void *)uint64_t v116 = v99;
        unint64_t v110 = v116 + 8;
        while (v100 != v102)
        {
          uint64_t v119 = *((void *)v100 - 1);
          v100 -= 8;
          *((void *)v116 - 1) = v119;
          v116 -= 8;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v96 != 1) {
        goto LABEL_166;
      }
      uint64_t v97 = a1[1];
      uint64_t v98 = *(void **)v97;
      uint64_t v99 = *(unsigned __int16 *)(a1[2] + 22);
      unint64_t v100 = *(char **)(*(void *)v97 + 2608);
      unint64_t v101 = *(void *)(*(void *)v97 + 2616);
      if ((unint64_t)v100 >= v101)
      {
        uint64_t v102 = (char *)v98[325];
        uint64_t v103 = (v100 - v102) >> 3;
        if ((unint64_t)(v103 + 1) >> 61) {
          goto LABEL_200;
        }
        unint64_t v104 = v101 - (void)v102;
        unint64_t v105 = (uint64_t)(v101 - (void)v102) >> 2;
        if (v105 <= v103 + 1) {
          unint64_t v105 = v103 + 1;
        }
        if (v104 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v106 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v106 = v105;
        }
        if (v106)
        {
          unint64_t v107 = (char *)sub_5714((uint64_t)(v98 + 327), v106);
          unint64_t v100 = (char *)v98[326];
          uint64_t v102 = (char *)v98[325];
        }
        else
        {
          unint64_t v107 = 0;
        }
        uint64_t v116 = &v107[8 * v103];
        uint64_t v117 = &v107[8 * v106];
        *(void *)uint64_t v116 = v99;
        unint64_t v110 = v116 + 8;
        while (v100 != v102)
        {
          uint64_t v118 = *((void *)v100 - 1);
          v100 -= 8;
          *((void *)v116 - 1) = v118;
          v116 -= 8;
        }
LABEL_163:
        v98[325] = v116;
        v98[326] = v110;
        v98[327] = v117;
        if (v102) {
          operator delete(v102);
        }
        goto LABEL_165;
      }
    }
    *(void *)unint64_t v100 = v99;
    unint64_t v110 = v100 + 8;
LABEL_165:
    v98[326] = v110;
LABEL_166:
    int v120 = 1 << *(_DWORD *)(v3 + 48);
    if (v120 == 2)
    {
      uint64_t v133 = a1[1];
      uint64_t v134 = a1[2];
      uint64_t v123 = *(void **)v133;
      uint64_t v124 = *(unsigned __int16 *)(v134 + 20);
      unint64_t v125 = *(char **)(*(void *)v133 + 2632);
      unint64_t v135 = *(void *)(*(void *)v133 + 2640);
      if ((unint64_t)v125 >= v135)
      {
        uint64_t v127 = (char *)v123[328];
        uint64_t v137 = (v125 - v127) >> 3;
        if (!((unint64_t)(v137 + 1) >> 61))
        {
          unint64_t v138 = v135 - (void)v127;
          unint64_t v139 = (uint64_t)(v135 - (void)v127) >> 2;
          if (v139 <= v137 + 1) {
            unint64_t v139 = v137 + 1;
          }
          if (v138 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v140 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v140 = v139;
          }
          if (v140)
          {
            uint64_t v141 = (char *)sub_5714((uint64_t)(v123 + 330), v140);
            unint64_t v125 = (char *)v123[329];
            uint64_t v127 = (char *)v123[328];
          }
          else
          {
            uint64_t v141 = 0;
          }
          uint64_t v142 = &v141[8 * v137];
          int v143 = &v141[8 * v140];
          *(void *)uint64_t v142 = v124;
          unint64_t v136 = v142 + 8;
          while (v125 != v127)
          {
            uint64_t v145 = *((void *)v125 - 1);
            v125 -= 8;
            *((void *)v142 - 1) = v145;
            v142 -= 8;
          }
          goto LABEL_195;
        }
LABEL_200:
        sub_566C();
      }
    }
    else
    {
      if (v120 != 1)
      {
LABEL_198:
        *a2 = 1;
        return;
      }
      uint64_t v121 = a1[1];
      uint64_t v122 = a1[2];
      uint64_t v123 = *(void **)v121;
      uint64_t v124 = *(unsigned __int16 *)(v122 + 20);
      unint64_t v125 = *(char **)(*(void *)v121 + 2632);
      unint64_t v126 = *(void *)(*(void *)v121 + 2640);
      if ((unint64_t)v125 >= v126)
      {
        uint64_t v127 = (char *)v123[328];
        uint64_t v128 = (v125 - v127) >> 3;
        if (!((unint64_t)(v128 + 1) >> 61))
        {
          unint64_t v129 = v126 - (void)v127;
          unint64_t v130 = (uint64_t)(v126 - (void)v127) >> 2;
          if (v130 <= v128 + 1) {
            unint64_t v130 = v128 + 1;
          }
          if (v129 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v131 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v131 = v130;
          }
          if (v131)
          {
            unint64_t v132 = (char *)sub_5714((uint64_t)(v123 + 330), v131);
            unint64_t v125 = (char *)v123[329];
            uint64_t v127 = (char *)v123[328];
          }
          else
          {
            unint64_t v132 = 0;
          }
          uint64_t v142 = &v132[8 * v128];
          int v143 = &v132[8 * v131];
          *(void *)uint64_t v142 = v124;
          unint64_t v136 = v142 + 8;
          while (v125 != v127)
          {
            uint64_t v144 = *((void *)v125 - 1);
            v125 -= 8;
            *((void *)v142 - 1) = v144;
            v142 -= 8;
          }
LABEL_195:
          v123[328] = v142;
          v123[329] = v136;
          v123[330] = v143;
          if (v127) {
            operator delete(v127);
          }
          goto LABEL_197;
        }
        goto LABEL_200;
      }
    }
    *(void *)unint64_t v125 = v124;
    unint64_t v136 = v125 + 8;
LABEL_197:
    v123[329] = v136;
    goto LABEL_198;
  }
  int v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    uint64_t v17 = a1[2];
    uint64_t v18 = *(void **)a1[1];
    *(void *)(v18[314] - 8) += *(_DWORD *)(v17 + 32) & 0x1FFFF;
    *(void *)(v18[317] - 8) += *(_DWORD *)(v17 + 28) & 0x1FFFF;
    *(void *)(v18[320] - 8) += *(_DWORD *)(v17 + 24) & 0x1FFFF;
    *(void *)(v18[323] - 8) += *(_DWORD *)(v17 + 36) & 0x1FFFFF;
    *(void *)(v18[326] - 8) += *(unsigned __int16 *)(v17 + 22);
    *(void *)(v18[329] - 8) += *(unsigned __int16 *)(v17 + 20);
  }
}

void sub_D2A14(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    int v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_WORD *)(a1[2] + 78) & 0x1FFF;
      uint64_t v8 = (char *)v6[497];
      unint64_t v26 = v6[498];
      if ((unint64_t)v8 >= v26)
      {
        unint64_t v10 = (char *)v6[496];
        uint64_t v28 = (v8 - v10) >> 3;
        if ((unint64_t)(v28 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v29 = v26 - (void)v10;
        unint64_t v30 = (uint64_t)(v26 - (void)v10) >> 2;
        if (v30 <= v28 + 1) {
          unint64_t v30 = v28 + 1;
        }
        if (v29 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v31 = v30;
        }
        if (v31)
        {
          uint64_t v32 = (char *)sub_5714((uint64_t)(v6 + 498), v31);
          uint64_t v8 = (char *)v6[497];
          unint64_t v10 = (char *)v6[496];
        }
        else
        {
          uint64_t v32 = 0;
        }
        int v33 = &v32[8 * v28];
        unint64_t v34 = &v32[8 * v31];
        *(void *)int v33 = v7;
        unint64_t v27 = v33 + 8;
        while (v8 != v10)
        {
          uint64_t v36 = *((void *)v8 - 1);
          v8 -= 8;
          *((void *)v33 - 1) = v36;
          v33 -= 8;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1) {
        goto LABEL_38;
      }
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_WORD *)(a1[2] + 78) & 0x1FFF;
      uint64_t v8 = (char *)v6[497];
      unint64_t v9 = v6[498];
      if ((unint64_t)v8 >= v9)
      {
        unint64_t v10 = (char *)v6[496];
        uint64_t v11 = (v8 - v10) >> 3;
        if ((unint64_t)(v11 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v12 = v9 - (void)v10;
        unint64_t v13 = (uint64_t)(v9 - (void)v10) >> 2;
        if (v13 <= v11 + 1) {
          unint64_t v13 = v11 + 1;
        }
        if (v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14)
        {
          unint64_t v15 = (char *)sub_5714((uint64_t)(v6 + 498), v14);
          uint64_t v8 = (char *)v6[497];
          unint64_t v10 = (char *)v6[496];
        }
        else
        {
          unint64_t v15 = 0;
        }
        int v33 = &v15[8 * v11];
        unint64_t v34 = &v15[8 * v14];
        *(void *)int v33 = v7;
        unint64_t v27 = v33 + 8;
        while (v8 != v10)
        {
          uint64_t v35 = *((void *)v8 - 1);
          v8 -= 8;
          *((void *)v33 - 1) = v35;
          v33 -= 8;
        }
LABEL_35:
        v6[496] = v33;
        v6[497] = v27;
        v6[498] = v34;
        if (v10) {
          operator delete(v10);
        }
        goto LABEL_37;
      }
    }
    *(void *)uint64_t v8 = v7;
    unint64_t v27 = v8 + 8;
LABEL_37:
    v6[497] = v27;
LABEL_38:
    int v37 = 1 << *(_DWORD *)(v3 + 48);
    if (v37 == 2)
    {
      unint64_t v38 = *(void **)a1[1];
      uint64_t v39 = *(_WORD *)(a1[2] + 62) & 0x3FFF;
      unint64_t v40 = (char *)v38[500];
      unint64_t v48 = v38[501];
      if ((unint64_t)v40 >= v48)
      {
        unint64_t v42 = (char *)v38[499];
        uint64_t v50 = (v40 - v42) >> 3;
        if ((unint64_t)(v50 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v51 = v48 - (void)v42;
        unint64_t v52 = (uint64_t)(v48 - (void)v42) >> 2;
        if (v52 <= v50 + 1) {
          unint64_t v52 = v50 + 1;
        }
        if (v51 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v53 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v53 = v52;
        }
        if (v53)
        {
          uint64_t v54 = (char *)sub_5714((uint64_t)(v38 + 501), v53);
          unint64_t v40 = (char *)v38[500];
          unint64_t v42 = (char *)v38[499];
        }
        else
        {
          uint64_t v54 = 0;
        }
        int v55 = &v54[8 * v50];
        unint64_t v56 = &v54[8 * v53];
        *(void *)int v55 = v39;
        unint64_t v49 = v55 + 8;
        while (v40 != v42)
        {
          uint64_t v58 = *((void *)v40 - 1);
          v40 -= 8;
          *((void *)v55 - 1) = v58;
          v55 -= 8;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v37 != 1) {
        goto LABEL_70;
      }
      unint64_t v38 = *(void **)a1[1];
      uint64_t v39 = *(_WORD *)(a1[2] + 62) & 0x3FFF;
      unint64_t v40 = (char *)v38[500];
      unint64_t v41 = v38[501];
      if ((unint64_t)v40 >= v41)
      {
        unint64_t v42 = (char *)v38[499];
        uint64_t v43 = (v40 - v42) >> 3;
        if ((unint64_t)(v43 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v44 = v41 - (void)v42;
        unint64_t v45 = (uint64_t)(v41 - (void)v42) >> 2;
        if (v45 <= v43 + 1) {
          unint64_t v45 = v43 + 1;
        }
        if (v44 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v46 = v45;
        }
        if (v46)
        {
          unint64_t v47 = (char *)sub_5714((uint64_t)(v38 + 501), v46);
          unint64_t v40 = (char *)v38[500];
          unint64_t v42 = (char *)v38[499];
        }
        else
        {
          unint64_t v47 = 0;
        }
        int v55 = &v47[8 * v43];
        unint64_t v56 = &v47[8 * v46];
        *(void *)int v55 = v39;
        unint64_t v49 = v55 + 8;
        while (v40 != v42)
        {
          uint64_t v57 = *((void *)v40 - 1);
          v40 -= 8;
          *((void *)v55 - 1) = v57;
          v55 -= 8;
        }
LABEL_67:
        v38[499] = v55;
        v38[500] = v49;
        v38[501] = v56;
        if (v42) {
          operator delete(v42);
        }
        goto LABEL_69;
      }
    }
    *(void *)unint64_t v40 = v39;
    unint64_t v49 = v40 + 8;
LABEL_69:
    v38[500] = v49;
LABEL_70:
    int v59 = 1 << *(_DWORD *)(v3 + 48);
    if (v59 == 2)
    {
      unint64_t v60 = *(void **)a1[1];
      uint64_t v61 = *(_WORD *)(a1[2] + 46) & 0x3FFF;
      unint64_t v62 = (char *)v60[503];
      unint64_t v70 = v60[504];
      if ((unint64_t)v62 >= v70)
      {
        unint64_t v64 = (char *)v60[502];
        uint64_t v72 = (v62 - v64) >> 3;
        if ((unint64_t)(v72 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v73 = v70 - (void)v64;
        unint64_t v74 = (uint64_t)(v70 - (void)v64) >> 2;
        if (v74 <= v72 + 1) {
          unint64_t v74 = v72 + 1;
        }
        if (v73 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v75 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v75 = v74;
        }
        if (v75)
        {
          uint64_t v76 = (char *)sub_5714((uint64_t)(v60 + 504), v75);
          unint64_t v62 = (char *)v60[503];
          unint64_t v64 = (char *)v60[502];
        }
        else
        {
          uint64_t v76 = 0;
        }
        int v77 = &v76[8 * v72];
        unint64_t v78 = &v76[8 * v75];
        *(void *)int v77 = v61;
        unint64_t v71 = v77 + 8;
        while (v62 != v64)
        {
          uint64_t v80 = *((void *)v62 - 1);
          v62 -= 8;
          *((void *)v77 - 1) = v80;
          v77 -= 8;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v59 != 1) {
        goto LABEL_102;
      }
      unint64_t v60 = *(void **)a1[1];
      uint64_t v61 = *(_WORD *)(a1[2] + 46) & 0x3FFF;
      unint64_t v62 = (char *)v60[503];
      unint64_t v63 = v60[504];
      if ((unint64_t)v62 >= v63)
      {
        unint64_t v64 = (char *)v60[502];
        uint64_t v65 = (v62 - v64) >> 3;
        if ((unint64_t)(v65 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v66 = v63 - (void)v64;
        unint64_t v67 = (uint64_t)(v63 - (void)v64) >> 2;
        if (v67 <= v65 + 1) {
          unint64_t v67 = v65 + 1;
        }
        if (v66 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v68 = v67;
        }
        if (v68)
        {
          unint64_t v69 = (char *)sub_5714((uint64_t)(v60 + 504), v68);
          unint64_t v62 = (char *)v60[503];
          unint64_t v64 = (char *)v60[502];
        }
        else
        {
          unint64_t v69 = 0;
        }
        int v77 = &v69[8 * v65];
        unint64_t v78 = &v69[8 * v68];
        *(void *)int v77 = v61;
        unint64_t v71 = v77 + 8;
        while (v62 != v64)
        {
          uint64_t v79 = *((void *)v62 - 1);
          v62 -= 8;
          *((void *)v77 - 1) = v79;
          v77 -= 8;
        }
LABEL_99:
        v60[502] = v77;
        v60[503] = v71;
        v60[504] = v78;
        if (v64) {
          operator delete(v64);
        }
        goto LABEL_101;
      }
    }
    *(void *)unint64_t v62 = v61;
    unint64_t v71 = v62 + 8;
LABEL_101:
    v60[503] = v71;
LABEL_102:
    int v81 = 1 << *(_DWORD *)(v3 + 48);
    if (v81 == 2)
    {
      unint64_t v82 = *(void **)a1[1];
      uint64_t v83 = *(_WORD *)(a1[2] + 30) & 0x7FFF;
      unint64_t v84 = (char *)v82[506];
      unint64_t v92 = v82[507];
      if ((unint64_t)v84 >= v92)
      {
        unint64_t v86 = (char *)v82[505];
        uint64_t v94 = (v84 - v86) >> 3;
        if ((unint64_t)(v94 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v95 = v92 - (void)v86;
        unint64_t v96 = (uint64_t)(v92 - (void)v86) >> 2;
        if (v96 <= v94 + 1) {
          unint64_t v96 = v94 + 1;
        }
        if (v95 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v97 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v97 = v96;
        }
        if (v97)
        {
          uint64_t v98 = (char *)sub_5714((uint64_t)(v82 + 507), v97);
          unint64_t v84 = (char *)v82[506];
          unint64_t v86 = (char *)v82[505];
        }
        else
        {
          uint64_t v98 = 0;
        }
        uint64_t v99 = &v98[8 * v94];
        unint64_t v100 = &v98[8 * v97];
        *(void *)uint64_t v99 = v83;
        unint64_t v93 = v99 + 8;
        while (v84 != v86)
        {
          uint64_t v102 = *((void *)v84 - 1);
          v84 -= 8;
          *((void *)v99 - 1) = v102;
          v99 -= 8;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v81 != 1) {
        goto LABEL_134;
      }
      unint64_t v82 = *(void **)a1[1];
      uint64_t v83 = *(_WORD *)(a1[2] + 30) & 0x7FFF;
      unint64_t v84 = (char *)v82[506];
      unint64_t v85 = v82[507];
      if ((unint64_t)v84 >= v85)
      {
        unint64_t v86 = (char *)v82[505];
        uint64_t v87 = (v84 - v86) >> 3;
        if ((unint64_t)(v87 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v88 = v85 - (void)v86;
        unint64_t v89 = (uint64_t)(v85 - (void)v86) >> 2;
        if (v89 <= v87 + 1) {
          unint64_t v89 = v87 + 1;
        }
        if (v88 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v90 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v90 = v89;
        }
        if (v90)
        {
          unint64_t v91 = (char *)sub_5714((uint64_t)(v82 + 507), v90);
          unint64_t v84 = (char *)v82[506];
          unint64_t v86 = (char *)v82[505];
        }
        else
        {
          unint64_t v91 = 0;
        }
        uint64_t v99 = &v91[8 * v87];
        unint64_t v100 = &v91[8 * v90];
        *(void *)uint64_t v99 = v83;
        unint64_t v93 = v99 + 8;
        while (v84 != v86)
        {
          uint64_t v101 = *((void *)v84 - 1);
          v84 -= 8;
          *((void *)v99 - 1) = v101;
          v99 -= 8;
        }
LABEL_131:
        v82[505] = v99;
        v82[506] = v93;
        v82[507] = v100;
        if (v86) {
          operator delete(v86);
        }
        goto LABEL_133;
      }
    }
    *(void *)unint64_t v84 = v83;
    unint64_t v93 = v84 + 8;
LABEL_133:
    v82[506] = v93;
LABEL_134:
    int v103 = 1 << *(_DWORD *)(v3 + 48);
    if (v103 == 2)
    {
      unint64_t v104 = *(void **)a1[1];
      uint64_t v105 = *(_WORD *)(a1[2] + 80) & 0x1FFF;
      unint64_t v106 = (char *)v104[509];
      unint64_t v114 = v104[510];
      if ((unint64_t)v106 >= v114)
      {
        uint64_t v108 = (char *)v104[508];
        uint64_t v116 = (v106 - v108) >> 3;
        if ((unint64_t)(v116 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v117 = v114 - (void)v108;
        unint64_t v118 = (uint64_t)(v114 - (void)v108) >> 2;
        if (v118 <= v116 + 1) {
          unint64_t v118 = v116 + 1;
        }
        if (v117 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v119 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v119 = v118;
        }
        if (v119)
        {
          int v120 = (char *)sub_5714((uint64_t)(v104 + 510), v119);
          unint64_t v106 = (char *)v104[509];
          uint64_t v108 = (char *)v104[508];
        }
        else
        {
          int v120 = 0;
        }
        uint64_t v121 = &v120[8 * v116];
        uint64_t v122 = &v120[8 * v119];
        *(void *)uint64_t v121 = v105;
        unint64_t v115 = v121 + 8;
        while (v106 != v108)
        {
          uint64_t v124 = *((void *)v106 - 1);
          v106 -= 8;
          *((void *)v121 - 1) = v124;
          v121 -= 8;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v103 != 1) {
        goto LABEL_166;
      }
      unint64_t v104 = *(void **)a1[1];
      uint64_t v105 = *(_WORD *)(a1[2] + 80) & 0x1FFF;
      unint64_t v106 = (char *)v104[509];
      unint64_t v107 = v104[510];
      if ((unint64_t)v106 >= v107)
      {
        uint64_t v108 = (char *)v104[508];
        uint64_t v109 = (v106 - v108) >> 3;
        if ((unint64_t)(v109 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v110 = v107 - (void)v108;
        unint64_t v111 = (uint64_t)(v107 - (void)v108) >> 2;
        if (v111 <= v109 + 1) {
          unint64_t v111 = v109 + 1;
        }
        if (v110 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v112 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v112 = v111;
        }
        if (v112)
        {
          unint64_t v113 = (char *)sub_5714((uint64_t)(v104 + 510), v112);
          unint64_t v106 = (char *)v104[509];
          uint64_t v108 = (char *)v104[508];
        }
        else
        {
          unint64_t v113 = 0;
        }
        uint64_t v121 = &v113[8 * v109];
        uint64_t v122 = &v113[8 * v112];
        *(void *)uint64_t v121 = v105;
        unint64_t v115 = v121 + 8;
        while (v106 != v108)
        {
          uint64_t v123 = *((void *)v106 - 1);
          v106 -= 8;
          *((void *)v121 - 1) = v123;
          v121 -= 8;
        }
LABEL_163:
        v104[508] = v121;
        v104[509] = v115;
        v104[510] = v122;
        if (v108) {
          operator delete(v108);
        }
        goto LABEL_165;
      }
    }
    *(void *)unint64_t v106 = v105;
    unint64_t v115 = v106 + 8;
LABEL_165:
    v104[509] = v115;
LABEL_166:
    int v125 = 1 << *(_DWORD *)(v3 + 48);
    if (v125 == 2)
    {
      unint64_t v126 = *(void **)a1[1];
      uint64_t v127 = *(_WORD *)(a1[2] + 64) & 0x3FFF;
      uint64_t v128 = (char *)v126[512];
      unint64_t v136 = v126[513];
      if ((unint64_t)v128 >= v136)
      {
        unint64_t v130 = (char *)v126[511];
        uint64_t v138 = (v128 - v130) >> 3;
        if ((unint64_t)(v138 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v139 = v136 - (void)v130;
        unint64_t v140 = (uint64_t)(v136 - (void)v130) >> 2;
        if (v140 <= v138 + 1) {
          unint64_t v140 = v138 + 1;
        }
        if (v139 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v141 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v141 = v140;
        }
        if (v141)
        {
          uint64_t v142 = (char *)sub_5714((uint64_t)(v126 + 513), v141);
          uint64_t v128 = (char *)v126[512];
          unint64_t v130 = (char *)v126[511];
        }
        else
        {
          uint64_t v142 = 0;
        }
        int v143 = &v142[8 * v138];
        uint64_t v144 = &v142[8 * v141];
        *(void *)int v143 = v127;
        uint64_t v137 = v143 + 8;
        while (v128 != v130)
        {
          uint64_t v146 = *((void *)v128 - 1);
          v128 -= 8;
          *((void *)v143 - 1) = v146;
          v143 -= 8;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v125 != 1) {
        goto LABEL_198;
      }
      unint64_t v126 = *(void **)a1[1];
      uint64_t v127 = *(_WORD *)(a1[2] + 64) & 0x3FFF;
      uint64_t v128 = (char *)v126[512];
      unint64_t v129 = v126[513];
      if ((unint64_t)v128 >= v129)
      {
        unint64_t v130 = (char *)v126[511];
        uint64_t v131 = (v128 - v130) >> 3;
        if ((unint64_t)(v131 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v132 = v129 - (void)v130;
        unint64_t v133 = (uint64_t)(v129 - (void)v130) >> 2;
        if (v133 <= v131 + 1) {
          unint64_t v133 = v131 + 1;
        }
        if (v132 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v134 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v134 = v133;
        }
        if (v134)
        {
          unint64_t v135 = (char *)sub_5714((uint64_t)(v126 + 513), v134);
          uint64_t v128 = (char *)v126[512];
          unint64_t v130 = (char *)v126[511];
        }
        else
        {
          unint64_t v135 = 0;
        }
        int v143 = &v135[8 * v131];
        uint64_t v144 = &v135[8 * v134];
        *(void *)int v143 = v127;
        uint64_t v137 = v143 + 8;
        while (v128 != v130)
        {
          uint64_t v145 = *((void *)v128 - 1);
          v128 -= 8;
          *((void *)v143 - 1) = v145;
          v143 -= 8;
        }
LABEL_195:
        v126[511] = v143;
        v126[512] = v137;
        v126[513] = v144;
        if (v130) {
          operator delete(v130);
        }
        goto LABEL_197;
      }
    }
    *(void *)uint64_t v128 = v127;
    uint64_t v137 = v128 + 8;
LABEL_197:
    v126[512] = v137;
LABEL_198:
    int v147 = 1 << *(_DWORD *)(v3 + 48);
    if (v147 == 2)
    {
      unint64_t v148 = *(void **)a1[1];
      uint64_t v149 = *(_WORD *)(a1[2] + 48) & 0x3FFF;
      unint64_t v150 = (char *)v148[515];
      unint64_t v158 = v148[516];
      if ((unint64_t)v150 >= v158)
      {
        unint64_t v152 = (char *)v148[514];
        uint64_t v160 = (v150 - v152) >> 3;
        if ((unint64_t)(v160 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v161 = v158 - (void)v152;
        unint64_t v162 = (uint64_t)(v158 - (void)v152) >> 2;
        if (v162 <= v160 + 1) {
          unint64_t v162 = v160 + 1;
        }
        if (v161 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v163 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v163 = v162;
        }
        if (v163)
        {
          uint64_t v164 = (char *)sub_5714((uint64_t)(v148 + 516), v163);
          unint64_t v150 = (char *)v148[515];
          unint64_t v152 = (char *)v148[514];
        }
        else
        {
          uint64_t v164 = 0;
        }
        int v165 = &v164[8 * v160];
        unint64_t v166 = &v164[8 * v163];
        *(void *)int v165 = v149;
        unint64_t v159 = v165 + 8;
        while (v150 != v152)
        {
          uint64_t v168 = *((void *)v150 - 1);
          v150 -= 8;
          *((void *)v165 - 1) = v168;
          v165 -= 8;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v147 != 1) {
        goto LABEL_230;
      }
      unint64_t v148 = *(void **)a1[1];
      uint64_t v149 = *(_WORD *)(a1[2] + 48) & 0x3FFF;
      unint64_t v150 = (char *)v148[515];
      unint64_t v151 = v148[516];
      if ((unint64_t)v150 >= v151)
      {
        unint64_t v152 = (char *)v148[514];
        uint64_t v153 = (v150 - v152) >> 3;
        if ((unint64_t)(v153 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v154 = v151 - (void)v152;
        unint64_t v155 = (uint64_t)(v151 - (void)v152) >> 2;
        if (v155 <= v153 + 1) {
          unint64_t v155 = v153 + 1;
        }
        if (v154 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v156 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v156 = v155;
        }
        if (v156)
        {
          unint64_t v157 = (char *)sub_5714((uint64_t)(v148 + 516), v156);
          unint64_t v150 = (char *)v148[515];
          unint64_t v152 = (char *)v148[514];
        }
        else
        {
          unint64_t v157 = 0;
        }
        int v165 = &v157[8 * v153];
        unint64_t v166 = &v157[8 * v156];
        *(void *)int v165 = v149;
        unint64_t v159 = v165 + 8;
        while (v150 != v152)
        {
          uint64_t v167 = *((void *)v150 - 1);
          v150 -= 8;
          *((void *)v165 - 1) = v167;
          v165 -= 8;
        }
LABEL_227:
        v148[514] = v165;
        v148[515] = v159;
        v148[516] = v166;
        if (v152) {
          operator delete(v152);
        }
        goto LABEL_229;
      }
    }
    *(void *)unint64_t v150 = v149;
    unint64_t v159 = v150 + 8;
LABEL_229:
    v148[515] = v159;
LABEL_230:
    int v169 = 1 << *(_DWORD *)(v3 + 48);
    if (v169 == 2)
    {
      unint64_t v170 = *(void **)a1[1];
      uint64_t v171 = *(_WORD *)(a1[2] + 32) & 0x7FFF;
      unint64_t v172 = (char *)v170[518];
      unint64_t v180 = v170[519];
      if ((unint64_t)v172 >= v180)
      {
        unint64_t v174 = (char *)v170[517];
        uint64_t v182 = (v172 - v174) >> 3;
        if ((unint64_t)(v182 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v183 = v180 - (void)v174;
        unint64_t v184 = (uint64_t)(v180 - (void)v174) >> 2;
        if (v184 <= v182 + 1) {
          unint64_t v184 = v182 + 1;
        }
        if (v183 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v185 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v185 = v184;
        }
        if (v185)
        {
          uint64_t v186 = (char *)sub_5714((uint64_t)(v170 + 519), v185);
          unint64_t v172 = (char *)v170[518];
          unint64_t v174 = (char *)v170[517];
        }
        else
        {
          uint64_t v186 = 0;
        }
        int v187 = &v186[8 * v182];
        unint64_t v188 = &v186[8 * v185];
        *(void *)int v187 = v171;
        unint64_t v181 = v187 + 8;
        while (v172 != v174)
        {
          uint64_t v190 = *((void *)v172 - 1);
          v172 -= 8;
          *((void *)v187 - 1) = v190;
          v187 -= 8;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v169 != 1) {
        goto LABEL_262;
      }
      unint64_t v170 = *(void **)a1[1];
      uint64_t v171 = *(_WORD *)(a1[2] + 32) & 0x7FFF;
      unint64_t v172 = (char *)v170[518];
      unint64_t v173 = v170[519];
      if ((unint64_t)v172 >= v173)
      {
        unint64_t v174 = (char *)v170[517];
        uint64_t v175 = (v172 - v174) >> 3;
        if ((unint64_t)(v175 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v176 = v173 - (void)v174;
        unint64_t v177 = (uint64_t)(v173 - (void)v174) >> 2;
        if (v177 <= v175 + 1) {
          unint64_t v177 = v175 + 1;
        }
        if (v176 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v178 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v178 = v177;
        }
        if (v178)
        {
          unint64_t v179 = (char *)sub_5714((uint64_t)(v170 + 519), v178);
          unint64_t v172 = (char *)v170[518];
          unint64_t v174 = (char *)v170[517];
        }
        else
        {
          unint64_t v179 = 0;
        }
        int v187 = &v179[8 * v175];
        unint64_t v188 = &v179[8 * v178];
        *(void *)int v187 = v171;
        unint64_t v181 = v187 + 8;
        while (v172 != v174)
        {
          uint64_t v189 = *((void *)v172 - 1);
          v172 -= 8;
          *((void *)v187 - 1) = v189;
          v187 -= 8;
        }
LABEL_259:
        v170[517] = v187;
        v170[518] = v181;
        v170[519] = v188;
        if (v174) {
          operator delete(v174);
        }
        goto LABEL_261;
      }
    }
    *(void *)unint64_t v172 = v171;
    unint64_t v181 = v172 + 8;
LABEL_261:
    v170[518] = v181;
LABEL_262:
    int v191 = 1 << *(_DWORD *)(v3 + 48);
    if (v191 == 2)
    {
      unint64_t v192 = *(void **)a1[1];
      uint64_t v193 = *(_WORD *)(a1[2] + 82) & 0x1FFF;
      unint64_t v194 = (char *)v192[521];
      unint64_t v202 = v192[522];
      if ((unint64_t)v194 >= v202)
      {
        unint64_t v196 = (char *)v192[520];
        uint64_t v204 = (v194 - v196) >> 3;
        if ((unint64_t)(v204 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v205 = v202 - (void)v196;
        unint64_t v206 = (uint64_t)(v202 - (void)v196) >> 2;
        if (v206 <= v204 + 1) {
          unint64_t v206 = v204 + 1;
        }
        if (v205 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v207 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v207 = v206;
        }
        if (v207)
        {
          uint64_t v208 = (char *)sub_5714((uint64_t)(v192 + 522), v207);
          unint64_t v194 = (char *)v192[521];
          unint64_t v196 = (char *)v192[520];
        }
        else
        {
          uint64_t v208 = 0;
        }
        int v209 = &v208[8 * v204];
        uint64_t v210 = &v208[8 * v207];
        *(void *)int v209 = v193;
        unint64_t v203 = v209 + 8;
        while (v194 != v196)
        {
          uint64_t v212 = *((void *)v194 - 1);
          v194 -= 8;
          *((void *)v209 - 1) = v212;
          v209 -= 8;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v191 != 1) {
        goto LABEL_294;
      }
      unint64_t v192 = *(void **)a1[1];
      uint64_t v193 = *(_WORD *)(a1[2] + 82) & 0x1FFF;
      unint64_t v194 = (char *)v192[521];
      unint64_t v195 = v192[522];
      if ((unint64_t)v194 >= v195)
      {
        unint64_t v196 = (char *)v192[520];
        uint64_t v197 = (v194 - v196) >> 3;
        if ((unint64_t)(v197 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v198 = v195 - (void)v196;
        unint64_t v199 = (uint64_t)(v195 - (void)v196) >> 2;
        if (v199 <= v197 + 1) {
          unint64_t v199 = v197 + 1;
        }
        if (v198 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v200 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v200 = v199;
        }
        if (v200)
        {
          unint64_t v201 = (char *)sub_5714((uint64_t)(v192 + 522), v200);
          unint64_t v194 = (char *)v192[521];
          unint64_t v196 = (char *)v192[520];
        }
        else
        {
          unint64_t v201 = 0;
        }
        int v209 = &v201[8 * v197];
        uint64_t v210 = &v201[8 * v200];
        *(void *)int v209 = v193;
        unint64_t v203 = v209 + 8;
        while (v194 != v196)
        {
          uint64_t v211 = *((void *)v194 - 1);
          v194 -= 8;
          *((void *)v209 - 1) = v211;
          v209 -= 8;
        }
LABEL_291:
        v192[520] = v209;
        v192[521] = v203;
        v192[522] = v210;
        if (v196) {
          operator delete(v196);
        }
        goto LABEL_293;
      }
    }
    *(void *)unint64_t v194 = v193;
    unint64_t v203 = v194 + 8;
LABEL_293:
    v192[521] = v203;
LABEL_294:
    int v213 = 1 << *(_DWORD *)(v3 + 48);
    if (v213 == 2)
    {
      unint64_t v214 = *(void **)a1[1];
      uint64_t v215 = *(_WORD *)(a1[2] + 66) & 0x3FFF;
      unint64_t v216 = (char *)v214[524];
      unint64_t v224 = v214[525];
      if ((unint64_t)v216 >= v224)
      {
        unint64_t v218 = (char *)v214[523];
        uint64_t v226 = (v216 - v218) >> 3;
        if ((unint64_t)(v226 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v227 = v224 - (void)v218;
        unint64_t v228 = (uint64_t)(v224 - (void)v218) >> 2;
        if (v228 <= v226 + 1) {
          unint64_t v228 = v226 + 1;
        }
        if (v227 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v229 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v229 = v228;
        }
        if (v229)
        {
          uint64_t v230 = (char *)sub_5714((uint64_t)(v214 + 525), v229);
          unint64_t v216 = (char *)v214[524];
          unint64_t v218 = (char *)v214[523];
        }
        else
        {
          uint64_t v230 = 0;
        }
        int v231 = &v230[8 * v226];
        uint64_t v232 = &v230[8 * v229];
        *(void *)int v231 = v215;
        unint64_t v225 = v231 + 8;
        while (v216 != v218)
        {
          uint64_t v234 = *((void *)v216 - 1);
          v216 -= 8;
          *((void *)v231 - 1) = v234;
          v231 -= 8;
        }
        goto LABEL_323;
      }
    }
    else
    {
      if (v213 != 1) {
        goto LABEL_326;
      }
      unint64_t v214 = *(void **)a1[1];
      uint64_t v215 = *(_WORD *)(a1[2] + 66) & 0x3FFF;
      unint64_t v216 = (char *)v214[524];
      unint64_t v217 = v214[525];
      if ((unint64_t)v216 >= v217)
      {
        unint64_t v218 = (char *)v214[523];
        uint64_t v219 = (v216 - v218) >> 3;
        if ((unint64_t)(v219 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v220 = v217 - (void)v218;
        unint64_t v221 = (uint64_t)(v217 - (void)v218) >> 2;
        if (v221 <= v219 + 1) {
          unint64_t v221 = v219 + 1;
        }
        if (v220 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v222 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v222 = v221;
        }
        if (v222)
        {
          unint64_t v223 = (char *)sub_5714((uint64_t)(v214 + 525), v222);
          unint64_t v216 = (char *)v214[524];
          unint64_t v218 = (char *)v214[523];
        }
        else
        {
          unint64_t v223 = 0;
        }
        int v231 = &v223[8 * v219];
        uint64_t v232 = &v223[8 * v222];
        *(void *)int v231 = v215;
        unint64_t v225 = v231 + 8;
        while (v216 != v218)
        {
          uint64_t v233 = *((void *)v216 - 1);
          v216 -= 8;
          *((void *)v231 - 1) = v233;
          v231 -= 8;
        }
LABEL_323:
        v214[523] = v231;
        v214[524] = v225;
        v214[525] = v232;
        if (v218) {
          operator delete(v218);
        }
        goto LABEL_325;
      }
    }
    *(void *)unint64_t v216 = v215;
    unint64_t v225 = v216 + 8;
LABEL_325:
    v214[524] = v225;
LABEL_326:
    int v235 = 1 << *(_DWORD *)(v3 + 48);
    if (v235 == 2)
    {
      unint64_t v236 = *(void **)a1[1];
      uint64_t v237 = *(_WORD *)(a1[2] + 50) & 0x3FFF;
      unint64_t v238 = (char *)v236[527];
      unint64_t v246 = v236[528];
      if ((unint64_t)v238 >= v246)
      {
        unint64_t v240 = (char *)v236[526];
        uint64_t v248 = (v238 - v240) >> 3;
        if ((unint64_t)(v248 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v249 = v246 - (void)v240;
        unint64_t v250 = (uint64_t)(v246 - (void)v240) >> 2;
        if (v250 <= v248 + 1) {
          unint64_t v250 = v248 + 1;
        }
        if (v249 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v251 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v251 = v250;
        }
        if (v251)
        {
          uint64_t v252 = (char *)sub_5714((uint64_t)(v236 + 528), v251);
          unint64_t v238 = (char *)v236[527];
          unint64_t v240 = (char *)v236[526];
        }
        else
        {
          uint64_t v252 = 0;
        }
        int v253 = &v252[8 * v248];
        uint64_t v254 = &v252[8 * v251];
        *(void *)int v253 = v237;
        unint64_t v247 = v253 + 8;
        while (v238 != v240)
        {
          uint64_t v256 = *((void *)v238 - 1);
          v238 -= 8;
          *((void *)v253 - 1) = v256;
          v253 -= 8;
        }
        goto LABEL_355;
      }
    }
    else
    {
      if (v235 != 1) {
        goto LABEL_358;
      }
      unint64_t v236 = *(void **)a1[1];
      uint64_t v237 = *(_WORD *)(a1[2] + 50) & 0x3FFF;
      unint64_t v238 = (char *)v236[527];
      unint64_t v239 = v236[528];
      if ((unint64_t)v238 >= v239)
      {
        unint64_t v240 = (char *)v236[526];
        uint64_t v241 = (v238 - v240) >> 3;
        if ((unint64_t)(v241 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v242 = v239 - (void)v240;
        unint64_t v243 = (uint64_t)(v239 - (void)v240) >> 2;
        if (v243 <= v241 + 1) {
          unint64_t v243 = v241 + 1;
        }
        if (v242 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v244 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v244 = v243;
        }
        if (v244)
        {
          unint64_t v245 = (char *)sub_5714((uint64_t)(v236 + 528), v244);
          unint64_t v238 = (char *)v236[527];
          unint64_t v240 = (char *)v236[526];
        }
        else
        {
          unint64_t v245 = 0;
        }
        int v253 = &v245[8 * v241];
        uint64_t v254 = &v245[8 * v244];
        *(void *)int v253 = v237;
        unint64_t v247 = v253 + 8;
        while (v238 != v240)
        {
          uint64_t v255 = *((void *)v238 - 1);
          v238 -= 8;
          *((void *)v253 - 1) = v255;
          v253 -= 8;
        }
LABEL_355:
        v236[526] = v253;
        v236[527] = v247;
        v236[528] = v254;
        if (v240) {
          operator delete(v240);
        }
        goto LABEL_357;
      }
    }
    *(void *)unint64_t v238 = v237;
    unint64_t v247 = v238 + 8;
LABEL_357:
    v236[527] = v247;
LABEL_358:
    int v257 = 1 << *(_DWORD *)(v3 + 48);
    if (v257 == 2)
    {
      unint64_t v258 = *(void **)a1[1];
      uint64_t v259 = *(_WORD *)(a1[2] + 34) & 0x7FFF;
      unint64_t v260 = (char *)v258[530];
      unint64_t v268 = v258[531];
      if ((unint64_t)v260 >= v268)
      {
        unint64_t v262 = (char *)v258[529];
        uint64_t v270 = (v260 - v262) >> 3;
        if ((unint64_t)(v270 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v271 = v268 - (void)v262;
        unint64_t v272 = (uint64_t)(v268 - (void)v262) >> 2;
        if (v272 <= v270 + 1) {
          unint64_t v272 = v270 + 1;
        }
        if (v271 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v273 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v273 = v272;
        }
        if (v273)
        {
          uint64_t v274 = (char *)sub_5714((uint64_t)(v258 + 531), v273);
          unint64_t v260 = (char *)v258[530];
          unint64_t v262 = (char *)v258[529];
        }
        else
        {
          uint64_t v274 = 0;
        }
        int v275 = &v274[8 * v270];
        uint64_t v276 = &v274[8 * v273];
        *(void *)int v275 = v259;
        unint64_t v269 = v275 + 8;
        while (v260 != v262)
        {
          uint64_t v278 = *((void *)v260 - 1);
          v260 -= 8;
          *((void *)v275 - 1) = v278;
          v275 -= 8;
        }
        goto LABEL_387;
      }
    }
    else
    {
      if (v257 != 1) {
        goto LABEL_390;
      }
      unint64_t v258 = *(void **)a1[1];
      uint64_t v259 = *(_WORD *)(a1[2] + 34) & 0x7FFF;
      unint64_t v260 = (char *)v258[530];
      unint64_t v261 = v258[531];
      if ((unint64_t)v260 >= v261)
      {
        unint64_t v262 = (char *)v258[529];
        uint64_t v263 = (v260 - v262) >> 3;
        if ((unint64_t)(v263 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v264 = v261 - (void)v262;
        unint64_t v265 = (uint64_t)(v261 - (void)v262) >> 2;
        if (v265 <= v263 + 1) {
          unint64_t v265 = v263 + 1;
        }
        if (v264 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v266 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v266 = v265;
        }
        if (v266)
        {
          unint64_t v267 = (char *)sub_5714((uint64_t)(v258 + 531), v266);
          unint64_t v260 = (char *)v258[530];
          unint64_t v262 = (char *)v258[529];
        }
        else
        {
          unint64_t v267 = 0;
        }
        int v275 = &v267[8 * v263];
        uint64_t v276 = &v267[8 * v266];
        *(void *)int v275 = v259;
        unint64_t v269 = v275 + 8;
        while (v260 != v262)
        {
          uint64_t v277 = *((void *)v260 - 1);
          v260 -= 8;
          *((void *)v275 - 1) = v277;
          v275 -= 8;
        }
LABEL_387:
        v258[529] = v275;
        v258[530] = v269;
        v258[531] = v276;
        if (v262) {
          operator delete(v262);
        }
        goto LABEL_389;
      }
    }
    *(void *)unint64_t v260 = v259;
    unint64_t v269 = v260 + 8;
LABEL_389:
    v258[530] = v269;
LABEL_390:
    int v279 = 1 << *(_DWORD *)(v3 + 48);
    if (v279 == 2)
    {
      uint64_t v280 = *(void **)a1[1];
      uint64_t v281 = *(_WORD *)(a1[2] + 72) & 0x1FFF;
      unint64_t v282 = (char *)v280[533];
      unint64_t v290 = v280[534];
      if ((unint64_t)v282 >= v290)
      {
        unint64_t v284 = (char *)v280[532];
        uint64_t v292 = (v282 - v284) >> 3;
        if ((unint64_t)(v292 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v293 = v290 - (void)v284;
        unint64_t v294 = (uint64_t)(v290 - (void)v284) >> 2;
        if (v294 <= v292 + 1) {
          unint64_t v294 = v292 + 1;
        }
        if (v293 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v295 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v295 = v294;
        }
        if (v295)
        {
          uint64_t v296 = (char *)sub_5714((uint64_t)(v280 + 534), v295);
          unint64_t v282 = (char *)v280[533];
          unint64_t v284 = (char *)v280[532];
        }
        else
        {
          uint64_t v296 = 0;
        }
        int v297 = &v296[8 * v292];
        uint64_t v298 = &v296[8 * v295];
        *(void *)int v297 = v281;
        unint64_t v291 = v297 + 8;
        while (v282 != v284)
        {
          uint64_t v300 = *((void *)v282 - 1);
          v282 -= 8;
          *((void *)v297 - 1) = v300;
          v297 -= 8;
        }
        goto LABEL_419;
      }
    }
    else
    {
      if (v279 != 1) {
        goto LABEL_422;
      }
      uint64_t v280 = *(void **)a1[1];
      uint64_t v281 = *(_WORD *)(a1[2] + 72) & 0x1FFF;
      unint64_t v282 = (char *)v280[533];
      unint64_t v283 = v280[534];
      if ((unint64_t)v282 >= v283)
      {
        unint64_t v284 = (char *)v280[532];
        uint64_t v285 = (v282 - v284) >> 3;
        if ((unint64_t)(v285 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v286 = v283 - (void)v284;
        unint64_t v287 = (uint64_t)(v283 - (void)v284) >> 2;
        if (v287 <= v285 + 1) {
          unint64_t v287 = v285 + 1;
        }
        if (v286 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v288 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v288 = v287;
        }
        if (v288)
        {
          unint64_t v289 = (char *)sub_5714((uint64_t)(v280 + 534), v288);
          unint64_t v282 = (char *)v280[533];
          unint64_t v284 = (char *)v280[532];
        }
        else
        {
          unint64_t v289 = 0;
        }
        int v297 = &v289[8 * v285];
        uint64_t v298 = &v289[8 * v288];
        *(void *)int v297 = v281;
        unint64_t v291 = v297 + 8;
        while (v282 != v284)
        {
          uint64_t v299 = *((void *)v282 - 1);
          v282 -= 8;
          *((void *)v297 - 1) = v299;
          v297 -= 8;
        }
LABEL_419:
        v280[532] = v297;
        v280[533] = v291;
        v280[534] = v298;
        if (v284) {
          operator delete(v284);
        }
        goto LABEL_421;
      }
    }
    *(void *)unint64_t v282 = v281;
    unint64_t v291 = v282 + 8;
LABEL_421:
    v280[533] = v291;
LABEL_422:
    int v301 = 1 << *(_DWORD *)(v3 + 48);
    if (v301 == 2)
    {
      unint64_t v302 = *(void **)a1[1];
      uint64_t v303 = *(_WORD *)(a1[2] + 56) & 0x1FFF;
      unint64_t v304 = (char *)v302[536];
      unint64_t v312 = v302[537];
      if ((unint64_t)v304 >= v312)
      {
        unint64_t v306 = (char *)v302[535];
        uint64_t v314 = (v304 - v306) >> 3;
        if ((unint64_t)(v314 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v315 = v312 - (void)v306;
        unint64_t v316 = (uint64_t)(v312 - (void)v306) >> 2;
        if (v316 <= v314 + 1) {
          unint64_t v316 = v314 + 1;
        }
        if (v315 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v317 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v317 = v316;
        }
        if (v317)
        {
          uint64_t v318 = (char *)sub_5714((uint64_t)(v302 + 537), v317);
          unint64_t v304 = (char *)v302[536];
          unint64_t v306 = (char *)v302[535];
        }
        else
        {
          uint64_t v318 = 0;
        }
        int v319 = &v318[8 * v314];
        uint64_t v320 = &v318[8 * v317];
        *(void *)int v319 = v303;
        unint64_t v313 = v319 + 8;
        while (v304 != v306)
        {
          uint64_t v322 = *((void *)v304 - 1);
          v304 -= 8;
          *((void *)v319 - 1) = v322;
          v319 -= 8;
        }
        goto LABEL_451;
      }
    }
    else
    {
      if (v301 != 1) {
        goto LABEL_454;
      }
      unint64_t v302 = *(void **)a1[1];
      uint64_t v303 = *(_WORD *)(a1[2] + 56) & 0x1FFF;
      unint64_t v304 = (char *)v302[536];
      unint64_t v305 = v302[537];
      if ((unint64_t)v304 >= v305)
      {
        unint64_t v306 = (char *)v302[535];
        uint64_t v307 = (v304 - v306) >> 3;
        if ((unint64_t)(v307 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v308 = v305 - (void)v306;
        unint64_t v309 = (uint64_t)(v305 - (void)v306) >> 2;
        if (v309 <= v307 + 1) {
          unint64_t v309 = v307 + 1;
        }
        if (v308 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v310 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v310 = v309;
        }
        if (v310)
        {
          unint64_t v311 = (char *)sub_5714((uint64_t)(v302 + 537), v310);
          unint64_t v304 = (char *)v302[536];
          unint64_t v306 = (char *)v302[535];
        }
        else
        {
          unint64_t v311 = 0;
        }
        int v319 = &v311[8 * v307];
        uint64_t v320 = &v311[8 * v310];
        *(void *)int v319 = v303;
        unint64_t v313 = v319 + 8;
        while (v304 != v306)
        {
          uint64_t v321 = *((void *)v304 - 1);
          v304 -= 8;
          *((void *)v319 - 1) = v321;
          v319 -= 8;
        }
LABEL_451:
        v302[535] = v319;
        v302[536] = v313;
        v302[537] = v320;
        if (v306) {
          operator delete(v306);
        }
        goto LABEL_453;
      }
    }
    *(void *)unint64_t v304 = v303;
    unint64_t v313 = v304 + 8;
LABEL_453:
    v302[536] = v313;
LABEL_454:
    int v323 = 1 << *(_DWORD *)(v3 + 48);
    if (v323 == 2)
    {
      unint64_t v324 = *(void **)a1[1];
      uint64_t v325 = *(_WORD *)(a1[2] + 40) & 0x3FFF;
      uint64_t v326 = (char *)v324[539];
      unint64_t v334 = v324[540];
      if ((unint64_t)v326 >= v334)
      {
        unint64_t v328 = (char *)v324[538];
        uint64_t v336 = (v326 - v328) >> 3;
        if ((unint64_t)(v336 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v337 = v334 - (void)v328;
        unint64_t v338 = (uint64_t)(v334 - (void)v328) >> 2;
        if (v338 <= v336 + 1) {
          unint64_t v338 = v336 + 1;
        }
        if (v337 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v339 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v339 = v338;
        }
        if (v339)
        {
          uint64_t v340 = (char *)sub_5714((uint64_t)(v324 + 540), v339);
          uint64_t v326 = (char *)v324[539];
          unint64_t v328 = (char *)v324[538];
        }
        else
        {
          uint64_t v340 = 0;
        }
        uint64_t v341 = &v340[8 * v336];
        uint64_t v342 = &v340[8 * v339];
        *(void *)uint64_t v341 = v325;
        unint64_t v335 = v341 + 8;
        while (v326 != v328)
        {
          uint64_t v344 = *((void *)v326 - 1);
          v326 -= 8;
          *((void *)v341 - 1) = v344;
          v341 -= 8;
        }
        goto LABEL_483;
      }
    }
    else
    {
      if (v323 != 1) {
        goto LABEL_486;
      }
      unint64_t v324 = *(void **)a1[1];
      uint64_t v325 = *(_WORD *)(a1[2] + 40) & 0x3FFF;
      uint64_t v326 = (char *)v324[539];
      unint64_t v327 = v324[540];
      if ((unint64_t)v326 >= v327)
      {
        unint64_t v328 = (char *)v324[538];
        uint64_t v329 = (v326 - v328) >> 3;
        if ((unint64_t)(v329 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v330 = v327 - (void)v328;
        unint64_t v331 = (uint64_t)(v327 - (void)v328) >> 2;
        if (v331 <= v329 + 1) {
          unint64_t v331 = v329 + 1;
        }
        if (v330 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v332 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v332 = v331;
        }
        if (v332)
        {
          unint64_t v333 = (char *)sub_5714((uint64_t)(v324 + 540), v332);
          uint64_t v326 = (char *)v324[539];
          unint64_t v328 = (char *)v324[538];
        }
        else
        {
          unint64_t v333 = 0;
        }
        uint64_t v341 = &v333[8 * v329];
        uint64_t v342 = &v333[8 * v332];
        *(void *)uint64_t v341 = v325;
        unint64_t v335 = v341 + 8;
        while (v326 != v328)
        {
          uint64_t v343 = *((void *)v326 - 1);
          v326 -= 8;
          *((void *)v341 - 1) = v343;
          v341 -= 8;
        }
LABEL_483:
        v324[538] = v341;
        v324[539] = v335;
        v324[540] = v342;
        if (v328) {
          operator delete(v328);
        }
        goto LABEL_485;
      }
    }
    *(void *)uint64_t v326 = v325;
    unint64_t v335 = v326 + 8;
LABEL_485:
    v324[539] = v335;
LABEL_486:
    int v345 = 1 << *(_DWORD *)(v3 + 48);
    if (v345 == 2)
    {
      unint64_t v346 = *(void **)a1[1];
      uint64_t v347 = *(_WORD *)(a1[2] + 24) & 0x7FFF;
      uint64_t v348 = (char *)v346[542];
      unint64_t v356 = v346[543];
      if ((unint64_t)v348 >= v356)
      {
        unint64_t v350 = (char *)v346[541];
        uint64_t v358 = (v348 - v350) >> 3;
        if ((unint64_t)(v358 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v359 = v356 - (void)v350;
        unint64_t v360 = (uint64_t)(v356 - (void)v350) >> 2;
        if (v360 <= v358 + 1) {
          unint64_t v360 = v358 + 1;
        }
        if (v359 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v361 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v361 = v360;
        }
        if (v361)
        {
          uint64_t v362 = (char *)sub_5714((uint64_t)(v346 + 543), v361);
          uint64_t v348 = (char *)v346[542];
          unint64_t v350 = (char *)v346[541];
        }
        else
        {
          uint64_t v362 = 0;
        }
        uint64_t v363 = &v362[8 * v358];
        uint64_t v364 = &v362[8 * v361];
        *(void *)uint64_t v363 = v347;
        unint64_t v357 = v363 + 8;
        while (v348 != v350)
        {
          uint64_t v366 = *((void *)v348 - 1);
          v348 -= 8;
          *((void *)v363 - 1) = v366;
          v363 -= 8;
        }
        goto LABEL_515;
      }
    }
    else
    {
      if (v345 != 1) {
        goto LABEL_518;
      }
      unint64_t v346 = *(void **)a1[1];
      uint64_t v347 = *(_WORD *)(a1[2] + 24) & 0x7FFF;
      uint64_t v348 = (char *)v346[542];
      unint64_t v349 = v346[543];
      if ((unint64_t)v348 >= v349)
      {
        unint64_t v350 = (char *)v346[541];
        uint64_t v351 = (v348 - v350) >> 3;
        if ((unint64_t)(v351 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v352 = v349 - (void)v350;
        unint64_t v353 = (uint64_t)(v349 - (void)v350) >> 2;
        if (v353 <= v351 + 1) {
          unint64_t v353 = v351 + 1;
        }
        if (v352 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v354 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v354 = v353;
        }
        if (v354)
        {
          unint64_t v355 = (char *)sub_5714((uint64_t)(v346 + 543), v354);
          uint64_t v348 = (char *)v346[542];
          unint64_t v350 = (char *)v346[541];
        }
        else
        {
          unint64_t v355 = 0;
        }
        uint64_t v363 = &v355[8 * v351];
        uint64_t v364 = &v355[8 * v354];
        *(void *)uint64_t v363 = v347;
        unint64_t v357 = v363 + 8;
        while (v348 != v350)
        {
          uint64_t v365 = *((void *)v348 - 1);
          v348 -= 8;
          *((void *)v363 - 1) = v365;
          v363 -= 8;
        }
LABEL_515:
        v346[541] = v363;
        v346[542] = v357;
        v346[543] = v364;
        if (v350) {
          operator delete(v350);
        }
        goto LABEL_517;
      }
    }
    *(void *)uint64_t v348 = v347;
    unint64_t v357 = v348 + 8;
LABEL_517:
    v346[542] = v357;
LABEL_518:
    int v367 = 1 << *(_DWORD *)(v3 + 48);
    if (v367 == 2)
    {
      unint64_t v368 = *(void **)a1[1];
      uint64_t v369 = *(_WORD *)(a1[2] + 74) & 0x1FFF;
      unint64_t v370 = (char *)v368[545];
      unint64_t v378 = v368[546];
      if ((unint64_t)v370 >= v378)
      {
        unint64_t v372 = (char *)v368[544];
        uint64_t v380 = (v370 - v372) >> 3;
        if ((unint64_t)(v380 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v381 = v378 - (void)v372;
        unint64_t v382 = (uint64_t)(v378 - (void)v372) >> 2;
        if (v382 <= v380 + 1) {
          unint64_t v382 = v380 + 1;
        }
        if (v381 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v383 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v383 = v382;
        }
        if (v383)
        {
          uint64_t v384 = (char *)sub_5714((uint64_t)(v368 + 546), v383);
          unint64_t v370 = (char *)v368[545];
          unint64_t v372 = (char *)v368[544];
        }
        else
        {
          uint64_t v384 = 0;
        }
        uint64_t v385 = &v384[8 * v380];
        uint64_t v386 = &v384[8 * v383];
        *(void *)uint64_t v385 = v369;
        unint64_t v379 = v385 + 8;
        while (v370 != v372)
        {
          uint64_t v388 = *((void *)v370 - 1);
          v370 -= 8;
          *((void *)v385 - 1) = v388;
          v385 -= 8;
        }
        goto LABEL_547;
      }
    }
    else
    {
      if (v367 != 1) {
        goto LABEL_550;
      }
      unint64_t v368 = *(void **)a1[1];
      uint64_t v369 = *(_WORD *)(a1[2] + 74) & 0x1FFF;
      unint64_t v370 = (char *)v368[545];
      unint64_t v371 = v368[546];
      if ((unint64_t)v370 >= v371)
      {
        unint64_t v372 = (char *)v368[544];
        uint64_t v373 = (v370 - v372) >> 3;
        if ((unint64_t)(v373 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v374 = v371 - (void)v372;
        unint64_t v375 = (uint64_t)(v371 - (void)v372) >> 2;
        if (v375 <= v373 + 1) {
          unint64_t v375 = v373 + 1;
        }
        if (v374 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v376 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v376 = v375;
        }
        if (v376)
        {
          unint64_t v377 = (char *)sub_5714((uint64_t)(v368 + 546), v376);
          unint64_t v370 = (char *)v368[545];
          unint64_t v372 = (char *)v368[544];
        }
        else
        {
          unint64_t v377 = 0;
        }
        uint64_t v385 = &v377[8 * v373];
        uint64_t v386 = &v377[8 * v376];
        *(void *)uint64_t v385 = v369;
        unint64_t v379 = v385 + 8;
        while (v370 != v372)
        {
          uint64_t v387 = *((void *)v370 - 1);
          v370 -= 8;
          *((void *)v385 - 1) = v387;
          v385 -= 8;
        }
LABEL_547:
        v368[544] = v385;
        v368[545] = v379;
        v368[546] = v386;
        if (v372) {
          operator delete(v372);
        }
        goto LABEL_549;
      }
    }
    *(void *)unint64_t v370 = v369;
    unint64_t v379 = v370 + 8;
LABEL_549:
    v368[545] = v379;
LABEL_550:
    int v389 = 1 << *(_DWORD *)(v3 + 48);
    if (v389 == 2)
    {
      uint64_t v390 = *(void **)a1[1];
      uint64_t v391 = *(_WORD *)(a1[2] + 58) & 0x1FFF;
      unint64_t v392 = (char *)v390[548];
      unint64_t v400 = v390[549];
      if ((unint64_t)v392 >= v400)
      {
        uint64_t v394 = (char *)v390[547];
        uint64_t v402 = (v392 - v394) >> 3;
        if ((unint64_t)(v402 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v403 = v400 - (void)v394;
        unint64_t v404 = (uint64_t)(v400 - (void)v394) >> 2;
        if (v404 <= v402 + 1) {
          unint64_t v404 = v402 + 1;
        }
        if (v403 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v405 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v405 = v404;
        }
        if (v405)
        {
          uint64_t v406 = (char *)sub_5714((uint64_t)(v390 + 549), v405);
          unint64_t v392 = (char *)v390[548];
          uint64_t v394 = (char *)v390[547];
        }
        else
        {
          uint64_t v406 = 0;
        }
        int v407 = &v406[8 * v402];
        uint64_t v408 = &v406[8 * v405];
        *(void *)int v407 = v391;
        unint64_t v401 = v407 + 8;
        while (v392 != v394)
        {
          uint64_t v410 = *((void *)v392 - 1);
          v392 -= 8;
          *((void *)v407 - 1) = v410;
          v407 -= 8;
        }
        goto LABEL_579;
      }
    }
    else
    {
      if (v389 != 1) {
        goto LABEL_582;
      }
      uint64_t v390 = *(void **)a1[1];
      uint64_t v391 = *(_WORD *)(a1[2] + 58) & 0x1FFF;
      unint64_t v392 = (char *)v390[548];
      unint64_t v393 = v390[549];
      if ((unint64_t)v392 >= v393)
      {
        uint64_t v394 = (char *)v390[547];
        uint64_t v395 = (v392 - v394) >> 3;
        if ((unint64_t)(v395 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v396 = v393 - (void)v394;
        unint64_t v397 = (uint64_t)(v393 - (void)v394) >> 2;
        if (v397 <= v395 + 1) {
          unint64_t v397 = v395 + 1;
        }
        if (v396 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v398 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v398 = v397;
        }
        if (v398)
        {
          uint64_t v399 = (char *)sub_5714((uint64_t)(v390 + 549), v398);
          unint64_t v392 = (char *)v390[548];
          uint64_t v394 = (char *)v390[547];
        }
        else
        {
          uint64_t v399 = 0;
        }
        int v407 = &v399[8 * v395];
        uint64_t v408 = &v399[8 * v398];
        *(void *)int v407 = v391;
        unint64_t v401 = v407 + 8;
        while (v392 != v394)
        {
          uint64_t v409 = *((void *)v392 - 1);
          v392 -= 8;
          *((void *)v407 - 1) = v409;
          v407 -= 8;
        }
LABEL_579:
        v390[547] = v407;
        v390[548] = v401;
        v390[549] = v408;
        if (v394) {
          operator delete(v394);
        }
        goto LABEL_581;
      }
    }
    *(void *)unint64_t v392 = v391;
    unint64_t v401 = v392 + 8;
LABEL_581:
    v390[548] = v401;
LABEL_582:
    int v411 = 1 << *(_DWORD *)(v3 + 48);
    if (v411 == 2)
    {
      uint64_t v412 = *(void **)a1[1];
      uint64_t v413 = *(_WORD *)(a1[2] + 42) & 0x3FFF;
      unint64_t v414 = (char *)v412[551];
      unint64_t v422 = v412[552];
      if ((unint64_t)v414 >= v422)
      {
        unint64_t v416 = (char *)v412[550];
        uint64_t v424 = (v414 - v416) >> 3;
        if ((unint64_t)(v424 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v425 = v422 - (void)v416;
        unint64_t v426 = (uint64_t)(v422 - (void)v416) >> 2;
        if (v426 <= v424 + 1) {
          unint64_t v426 = v424 + 1;
        }
        if (v425 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v427 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v427 = v426;
        }
        if (v427)
        {
          uint64_t v428 = (char *)sub_5714((uint64_t)(v412 + 552), v427);
          unint64_t v414 = (char *)v412[551];
          unint64_t v416 = (char *)v412[550];
        }
        else
        {
          uint64_t v428 = 0;
        }
        int v429 = &v428[8 * v424];
        uint64_t v430 = &v428[8 * v427];
        *(void *)int v429 = v413;
        unint64_t v423 = v429 + 8;
        while (v414 != v416)
        {
          uint64_t v432 = *((void *)v414 - 1);
          v414 -= 8;
          *((void *)v429 - 1) = v432;
          v429 -= 8;
        }
        goto LABEL_611;
      }
    }
    else
    {
      if (v411 != 1) {
        goto LABEL_614;
      }
      uint64_t v412 = *(void **)a1[1];
      uint64_t v413 = *(_WORD *)(a1[2] + 42) & 0x3FFF;
      unint64_t v414 = (char *)v412[551];
      unint64_t v415 = v412[552];
      if ((unint64_t)v414 >= v415)
      {
        unint64_t v416 = (char *)v412[550];
        uint64_t v417 = (v414 - v416) >> 3;
        if ((unint64_t)(v417 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v418 = v415 - (void)v416;
        unint64_t v419 = (uint64_t)(v415 - (void)v416) >> 2;
        if (v419 <= v417 + 1) {
          unint64_t v419 = v417 + 1;
        }
        if (v418 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v420 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v420 = v419;
        }
        if (v420)
        {
          unint64_t v421 = (char *)sub_5714((uint64_t)(v412 + 552), v420);
          unint64_t v414 = (char *)v412[551];
          unint64_t v416 = (char *)v412[550];
        }
        else
        {
          unint64_t v421 = 0;
        }
        int v429 = &v421[8 * v417];
        uint64_t v430 = &v421[8 * v420];
        *(void *)int v429 = v413;
        unint64_t v423 = v429 + 8;
        while (v414 != v416)
        {
          uint64_t v431 = *((void *)v414 - 1);
          v414 -= 8;
          *((void *)v429 - 1) = v431;
          v429 -= 8;
        }
LABEL_611:
        v412[550] = v429;
        v412[551] = v423;
        v412[552] = v430;
        if (v416) {
          operator delete(v416);
        }
        goto LABEL_613;
      }
    }
    *(void *)unint64_t v414 = v413;
    unint64_t v423 = v414 + 8;
LABEL_613:
    v412[551] = v423;
LABEL_614:
    int v433 = 1 << *(_DWORD *)(v3 + 48);
    if (v433 == 2)
    {
      unint64_t v434 = *(void **)a1[1];
      uint64_t v435 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      uint64_t v436 = (char *)v434[554];
      unint64_t v444 = v434[555];
      if ((unint64_t)v436 >= v444)
      {
        unint64_t v438 = (char *)v434[553];
        uint64_t v446 = (v436 - v438) >> 3;
        if ((unint64_t)(v446 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v447 = v444 - (void)v438;
        unint64_t v448 = (uint64_t)(v444 - (void)v438) >> 2;
        if (v448 <= v446 + 1) {
          unint64_t v448 = v446 + 1;
        }
        if (v447 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v449 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v449 = v448;
        }
        if (v449)
        {
          unsigned int v450 = (char *)sub_5714((uint64_t)(v434 + 555), v449);
          uint64_t v436 = (char *)v434[554];
          unint64_t v438 = (char *)v434[553];
        }
        else
        {
          unsigned int v450 = 0;
        }
        uint64_t v451 = &v450[8 * v446];
        uint64_t v452 = &v450[8 * v449];
        *(void *)uint64_t v451 = v435;
        unint64_t v445 = v451 + 8;
        while (v436 != v438)
        {
          uint64_t v454 = *((void *)v436 - 1);
          v436 -= 8;
          *((void *)v451 - 1) = v454;
          v451 -= 8;
        }
        goto LABEL_643;
      }
    }
    else
    {
      if (v433 != 1) {
        goto LABEL_646;
      }
      unint64_t v434 = *(void **)a1[1];
      uint64_t v435 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      uint64_t v436 = (char *)v434[554];
      unint64_t v437 = v434[555];
      if ((unint64_t)v436 >= v437)
      {
        unint64_t v438 = (char *)v434[553];
        uint64_t v439 = (v436 - v438) >> 3;
        if ((unint64_t)(v439 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v440 = v437 - (void)v438;
        unint64_t v441 = (uint64_t)(v437 - (void)v438) >> 2;
        if (v441 <= v439 + 1) {
          unint64_t v441 = v439 + 1;
        }
        if (v440 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v442 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v442 = v441;
        }
        if (v442)
        {
          unsigned int v443 = (char *)sub_5714((uint64_t)(v434 + 555), v442);
          uint64_t v436 = (char *)v434[554];
          unint64_t v438 = (char *)v434[553];
        }
        else
        {
          unsigned int v443 = 0;
        }
        uint64_t v451 = &v443[8 * v439];
        uint64_t v452 = &v443[8 * v442];
        *(void *)uint64_t v451 = v435;
        unint64_t v445 = v451 + 8;
        while (v436 != v438)
        {
          uint64_t v453 = *((void *)v436 - 1);
          v436 -= 8;
          *((void *)v451 - 1) = v453;
          v451 -= 8;
        }
LABEL_643:
        v434[553] = v451;
        v434[554] = v445;
        v434[555] = v452;
        if (v438) {
          operator delete(v438);
        }
        goto LABEL_645;
      }
    }
    *(void *)uint64_t v436 = v435;
    unint64_t v445 = v436 + 8;
LABEL_645:
    v434[554] = v445;
LABEL_646:
    int v455 = 1 << *(_DWORD *)(v3 + 48);
    if (v455 == 2)
    {
      uint64_t v456 = *(void **)a1[1];
      uint64_t v457 = *(_WORD *)(a1[2] + 76) & 0x1FFF;
      unint64_t v458 = (char *)v456[557];
      unint64_t v466 = v456[558];
      if ((unint64_t)v458 >= v466)
      {
        uint64_t v460 = (char *)v456[556];
        uint64_t v468 = (v458 - v460) >> 3;
        if ((unint64_t)(v468 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v469 = v466 - (void)v460;
        unint64_t v470 = (uint64_t)(v466 - (void)v460) >> 2;
        if (v470 <= v468 + 1) {
          unint64_t v470 = v468 + 1;
        }
        if (v469 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v471 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v471 = v470;
        }
        if (v471)
        {
          unint64_t v472 = (char *)sub_5714((uint64_t)(v456 + 558), v471);
          unint64_t v458 = (char *)v456[557];
          uint64_t v460 = (char *)v456[556];
        }
        else
        {
          unint64_t v472 = 0;
        }
        uint64_t v473 = &v472[8 * v468];
        uint64_t v474 = &v472[8 * v471];
        *(void *)uint64_t v473 = v457;
        unint64_t v467 = v473 + 8;
        while (v458 != v460)
        {
          uint64_t v476 = *((void *)v458 - 1);
          v458 -= 8;
          *((void *)v473 - 1) = v476;
          v473 -= 8;
        }
        goto LABEL_675;
      }
    }
    else
    {
      if (v455 != 1) {
        goto LABEL_678;
      }
      uint64_t v456 = *(void **)a1[1];
      uint64_t v457 = *(_WORD *)(a1[2] + 76) & 0x1FFF;
      unint64_t v458 = (char *)v456[557];
      unint64_t v459 = v456[558];
      if ((unint64_t)v458 >= v459)
      {
        uint64_t v460 = (char *)v456[556];
        uint64_t v461 = (v458 - v460) >> 3;
        if ((unint64_t)(v461 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v462 = v459 - (void)v460;
        unint64_t v463 = (uint64_t)(v459 - (void)v460) >> 2;
        if (v463 <= v461 + 1) {
          unint64_t v463 = v461 + 1;
        }
        if (v462 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v464 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v464 = v463;
        }
        if (v464)
        {
          uint64_t v465 = (char *)sub_5714((uint64_t)(v456 + 558), v464);
          unint64_t v458 = (char *)v456[557];
          uint64_t v460 = (char *)v456[556];
        }
        else
        {
          uint64_t v465 = 0;
        }
        uint64_t v473 = &v465[8 * v461];
        uint64_t v474 = &v465[8 * v464];
        *(void *)uint64_t v473 = v457;
        unint64_t v467 = v473 + 8;
        while (v458 != v460)
        {
          uint64_t v475 = *((void *)v458 - 1);
          v458 -= 8;
          *((void *)v473 - 1) = v475;
          v473 -= 8;
        }
LABEL_675:
        v456[556] = v473;
        v456[557] = v467;
        v456[558] = v474;
        if (v460) {
          operator delete(v460);
        }
        goto LABEL_677;
      }
    }
    *(void *)unint64_t v458 = v457;
    unint64_t v467 = v458 + 8;
LABEL_677:
    v456[557] = v467;
LABEL_678:
    int v477 = 1 << *(_DWORD *)(v3 + 48);
    if (v477 == 2)
    {
      uint64_t v478 = *(void **)a1[1];
      uint64_t v479 = *(_WORD *)(a1[2] + 60) & 0x1FFF;
      unint64_t v480 = (char *)v478[560];
      unint64_t v488 = v478[561];
      if ((unint64_t)v480 >= v488)
      {
        uint64_t v482 = (char *)v478[559];
        uint64_t v490 = (v480 - v482) >> 3;
        if ((unint64_t)(v490 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v491 = v488 - (void)v482;
        unint64_t v492 = (uint64_t)(v488 - (void)v482) >> 2;
        if (v492 <= v490 + 1) {
          unint64_t v492 = v490 + 1;
        }
        if (v491 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v493 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v493 = v492;
        }
        if (v493)
        {
          unint64_t v494 = (char *)sub_5714((uint64_t)(v478 + 561), v493);
          unint64_t v480 = (char *)v478[560];
          uint64_t v482 = (char *)v478[559];
        }
        else
        {
          unint64_t v494 = 0;
        }
        unsigned int v495 = &v494[8 * v490];
        unint64_t v496 = &v494[8 * v493];
        *(void *)unsigned int v495 = v479;
        unint64_t v489 = v495 + 8;
        while (v480 != v482)
        {
          uint64_t v498 = *((void *)v480 - 1);
          v480 -= 8;
          *((void *)v495 - 1) = v498;
          v495 -= 8;
        }
        goto LABEL_707;
      }
    }
    else
    {
      if (v477 != 1) {
        goto LABEL_710;
      }
      uint64_t v478 = *(void **)a1[1];
      uint64_t v479 = *(_WORD *)(a1[2] + 60) & 0x1FFF;
      unint64_t v480 = (char *)v478[560];
      unint64_t v481 = v478[561];
      if ((unint64_t)v480 >= v481)
      {
        uint64_t v482 = (char *)v478[559];
        uint64_t v483 = (v480 - v482) >> 3;
        if ((unint64_t)(v483 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v484 = v481 - (void)v482;
        unint64_t v485 = (uint64_t)(v481 - (void)v482) >> 2;
        if (v485 <= v483 + 1) {
          unint64_t v485 = v483 + 1;
        }
        if (v484 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v486 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v486 = v485;
        }
        if (v486)
        {
          uint64_t v487 = (char *)sub_5714((uint64_t)(v478 + 561), v486);
          unint64_t v480 = (char *)v478[560];
          uint64_t v482 = (char *)v478[559];
        }
        else
        {
          uint64_t v487 = 0;
        }
        unsigned int v495 = &v487[8 * v483];
        unint64_t v496 = &v487[8 * v486];
        *(void *)unsigned int v495 = v479;
        unint64_t v489 = v495 + 8;
        while (v480 != v482)
        {
          uint64_t v497 = *((void *)v480 - 1);
          v480 -= 8;
          *((void *)v495 - 1) = v497;
          v495 -= 8;
        }
LABEL_707:
        v478[559] = v495;
        v478[560] = v489;
        v478[561] = v496;
        if (v482) {
          operator delete(v482);
        }
        goto LABEL_709;
      }
    }
    *(void *)unint64_t v480 = v479;
    unint64_t v489 = v480 + 8;
LABEL_709:
    v478[560] = v489;
LABEL_710:
    int v499 = 1 << *(_DWORD *)(v3 + 48);
    if (v499 == 2)
    {
      unint64_t v500 = *(void **)a1[1];
      uint64_t v501 = *(_WORD *)(a1[2] + 44) & 0x3FFF;
      unint64_t v502 = (char *)v500[563];
      unint64_t v510 = v500[564];
      if ((unint64_t)v502 >= v510)
      {
        unint64_t v504 = (char *)v500[562];
        uint64_t v512 = (v502 - v504) >> 3;
        if ((unint64_t)(v512 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v513 = v510 - (void)v504;
        unint64_t v514 = (uint64_t)(v510 - (void)v504) >> 2;
        if (v514 <= v512 + 1) {
          unint64_t v514 = v512 + 1;
        }
        if (v513 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v515 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v515 = v514;
        }
        if (v515)
        {
          unint64_t v516 = (char *)sub_5714((uint64_t)(v500 + 564), v515);
          unint64_t v502 = (char *)v500[563];
          unint64_t v504 = (char *)v500[562];
        }
        else
        {
          unint64_t v516 = 0;
        }
        unint64_t v517 = &v516[8 * v512];
        unsigned int v518 = &v516[8 * v515];
        *(void *)unint64_t v517 = v501;
        unint64_t v511 = v517 + 8;
        while (v502 != v504)
        {
          uint64_t v520 = *((void *)v502 - 1);
          v502 -= 8;
          *((void *)v517 - 1) = v520;
          v517 -= 8;
        }
        goto LABEL_739;
      }
    }
    else
    {
      if (v499 != 1) {
        goto LABEL_742;
      }
      unint64_t v500 = *(void **)a1[1];
      uint64_t v501 = *(_WORD *)(a1[2] + 44) & 0x3FFF;
      unint64_t v502 = (char *)v500[563];
      unint64_t v503 = v500[564];
      if ((unint64_t)v502 >= v503)
      {
        unint64_t v504 = (char *)v500[562];
        uint64_t v505 = (v502 - v504) >> 3;
        if ((unint64_t)(v505 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v506 = v503 - (void)v504;
        unint64_t v507 = (uint64_t)(v503 - (void)v504) >> 2;
        if (v507 <= v505 + 1) {
          unint64_t v507 = v505 + 1;
        }
        if (v506 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v508 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v508 = v507;
        }
        if (v508)
        {
          unint64_t v509 = (char *)sub_5714((uint64_t)(v500 + 564), v508);
          unint64_t v502 = (char *)v500[563];
          unint64_t v504 = (char *)v500[562];
        }
        else
        {
          unint64_t v509 = 0;
        }
        unint64_t v517 = &v509[8 * v505];
        unsigned int v518 = &v509[8 * v508];
        *(void *)unint64_t v517 = v501;
        unint64_t v511 = v517 + 8;
        while (v502 != v504)
        {
          uint64_t v519 = *((void *)v502 - 1);
          v502 -= 8;
          *((void *)v517 - 1) = v519;
          v517 -= 8;
        }
LABEL_739:
        v500[562] = v517;
        v500[563] = v511;
        v500[564] = v518;
        if (v504) {
          operator delete(v504);
        }
        goto LABEL_741;
      }
    }
    *(void *)unint64_t v502 = v501;
    unint64_t v511 = v502 + 8;
LABEL_741:
    v500[563] = v511;
LABEL_742:
    int v521 = 1 << *(_DWORD *)(v3 + 48);
    if (v521 == 2)
    {
      unsigned int v522 = *(void **)a1[1];
      uint64_t v523 = *(_WORD *)(a1[2] + 28) & 0x7FFF;
      unint64_t v524 = (char *)v522[566];
      unint64_t v532 = v522[567];
      if ((unint64_t)v524 >= v532)
      {
        unint64_t v526 = (char *)v522[565];
        uint64_t v534 = (v524 - v526) >> 3;
        if ((unint64_t)(v534 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v535 = v532 - (void)v526;
        unint64_t v536 = (uint64_t)(v532 - (void)v526) >> 2;
        if (v536 <= v534 + 1) {
          unint64_t v536 = v534 + 1;
        }
        if (v535 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v537 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v537 = v536;
        }
        if (v537)
        {
          unint64_t v538 = (char *)sub_5714((uint64_t)(v522 + 567), v537);
          unint64_t v524 = (char *)v522[566];
          unint64_t v526 = (char *)v522[565];
        }
        else
        {
          unint64_t v538 = 0;
        }
        int v539 = &v538[8 * v534];
        int v540 = &v538[8 * v537];
        *(void *)int v539 = v523;
        unsigned int v533 = v539 + 8;
        while (v524 != v526)
        {
          uint64_t v542 = *((void *)v524 - 1);
          v524 -= 8;
          *((void *)v539 - 1) = v542;
          v539 -= 8;
        }
        goto LABEL_771;
      }
    }
    else
    {
      if (v521 != 1) {
        goto LABEL_774;
      }
      unsigned int v522 = *(void **)a1[1];
      uint64_t v523 = *(_WORD *)(a1[2] + 28) & 0x7FFF;
      unint64_t v524 = (char *)v522[566];
      unint64_t v525 = v522[567];
      if ((unint64_t)v524 >= v525)
      {
        unint64_t v526 = (char *)v522[565];
        uint64_t v527 = (v524 - v526) >> 3;
        if ((unint64_t)(v527 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v528 = v525 - (void)v526;
        unint64_t v529 = (uint64_t)(v525 - (void)v526) >> 2;
        if (v529 <= v527 + 1) {
          unint64_t v529 = v527 + 1;
        }
        if (v528 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v530 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v530 = v529;
        }
        if (v530)
        {
          unint64_t v531 = (char *)sub_5714((uint64_t)(v522 + 567), v530);
          unint64_t v524 = (char *)v522[566];
          unint64_t v526 = (char *)v522[565];
        }
        else
        {
          unint64_t v531 = 0;
        }
        int v539 = &v531[8 * v527];
        int v540 = &v531[8 * v530];
        *(void *)int v539 = v523;
        unsigned int v533 = v539 + 8;
        while (v524 != v526)
        {
          uint64_t v541 = *((void *)v524 - 1);
          v524 -= 8;
          *((void *)v539 - 1) = v541;
          v539 -= 8;
        }
LABEL_771:
        v522[565] = v539;
        v522[566] = v533;
        v522[567] = v540;
        if (v526) {
          operator delete(v526);
        }
        goto LABEL_773;
      }
    }
    *(void *)unint64_t v524 = v523;
    unsigned int v533 = v524 + 8;
LABEL_773:
    v522[566] = v533;
LABEL_774:
    int v543 = 1 << *(_DWORD *)(v3 + 48);
    if (v543 == 2)
    {
      uint64_t v544 = *(void **)a1[1];
      uint64_t v545 = *(_WORD *)(a1[2] + 68) & 0x1FFF;
      uint64_t v546 = (char *)v544[569];
      unint64_t v554 = v544[570];
      if ((unint64_t)v546 >= v554)
      {
        unint64_t v548 = (char *)v544[568];
        uint64_t v556 = (v546 - v548) >> 3;
        if ((unint64_t)(v556 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v557 = v554 - (void)v548;
        unint64_t v558 = (uint64_t)(v554 - (void)v548) >> 2;
        if (v558 <= v556 + 1) {
          unint64_t v558 = v556 + 1;
        }
        if (v557 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v559 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v559 = v558;
        }
        if (v559)
        {
          unint64_t v560 = (char *)sub_5714((uint64_t)(v544 + 570), v559);
          uint64_t v546 = (char *)v544[569];
          unint64_t v548 = (char *)v544[568];
        }
        else
        {
          unint64_t v560 = 0;
        }
        unint64_t v561 = &v560[8 * v556];
        int v562 = &v560[8 * v559];
        *(void *)unint64_t v561 = v545;
        uint64_t v555 = v561 + 8;
        while (v546 != v548)
        {
          uint64_t v564 = *((void *)v546 - 1);
          v546 -= 8;
          *((void *)v561 - 1) = v564;
          v561 -= 8;
        }
        goto LABEL_803;
      }
    }
    else
    {
      if (v543 != 1) {
        goto LABEL_806;
      }
      uint64_t v544 = *(void **)a1[1];
      uint64_t v545 = *(_WORD *)(a1[2] + 68) & 0x1FFF;
      uint64_t v546 = (char *)v544[569];
      unint64_t v547 = v544[570];
      if ((unint64_t)v546 >= v547)
      {
        unint64_t v548 = (char *)v544[568];
        uint64_t v549 = (v546 - v548) >> 3;
        if ((unint64_t)(v549 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v550 = v547 - (void)v548;
        unint64_t v551 = (uint64_t)(v547 - (void)v548) >> 2;
        if (v551 <= v549 + 1) {
          unint64_t v551 = v549 + 1;
        }
        if (v550 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v552 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v552 = v551;
        }
        if (v552)
        {
          unint64_t v553 = (char *)sub_5714((uint64_t)(v544 + 570), v552);
          uint64_t v546 = (char *)v544[569];
          unint64_t v548 = (char *)v544[568];
        }
        else
        {
          unint64_t v553 = 0;
        }
        unint64_t v561 = &v553[8 * v549];
        int v562 = &v553[8 * v552];
        *(void *)unint64_t v561 = v545;
        uint64_t v555 = v561 + 8;
        while (v546 != v548)
        {
          uint64_t v563 = *((void *)v546 - 1);
          v546 -= 8;
          *((void *)v561 - 1) = v563;
          v561 -= 8;
        }
LABEL_803:
        v544[568] = v561;
        v544[569] = v555;
        v544[570] = v562;
        if (v548) {
          operator delete(v548);
        }
        goto LABEL_805;
      }
    }
    *(void *)uint64_t v546 = v545;
    uint64_t v555 = v546 + 8;
LABEL_805:
    v544[569] = v555;
LABEL_806:
    int v565 = 1 << *(_DWORD *)(v3 + 48);
    if (v565 == 2)
    {
      uint64_t v566 = *(void **)a1[1];
      uint64_t v567 = *(_WORD *)(a1[2] + 52) & 0x3FFF;
      int v568 = (char *)v566[572];
      unint64_t v576 = v566[573];
      if ((unint64_t)v568 >= v576)
      {
        unint64_t v570 = (char *)v566[571];
        uint64_t v578 = (v568 - v570) >> 3;
        if ((unint64_t)(v578 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v579 = v576 - (void)v570;
        unint64_t v580 = (uint64_t)(v576 - (void)v570) >> 2;
        if (v580 <= v578 + 1) {
          unint64_t v580 = v578 + 1;
        }
        if (v579 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v581 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v581 = v580;
        }
        if (v581)
        {
          unint64_t v582 = (char *)sub_5714((uint64_t)(v566 + 573), v581);
          int v568 = (char *)v566[572];
          unint64_t v570 = (char *)v566[571];
        }
        else
        {
          unint64_t v582 = 0;
        }
        unint64_t v583 = &v582[8 * v578];
        unint64_t v584 = &v582[8 * v581];
        *(void *)unint64_t v583 = v567;
        unint64_t v577 = v583 + 8;
        while (v568 != v570)
        {
          uint64_t v586 = *((void *)v568 - 1);
          v568 -= 8;
          *((void *)v583 - 1) = v586;
          v583 -= 8;
        }
        goto LABEL_835;
      }
    }
    else
    {
      if (v565 != 1) {
        goto LABEL_838;
      }
      uint64_t v566 = *(void **)a1[1];
      uint64_t v567 = *(_WORD *)(a1[2] + 52) & 0x3FFF;
      int v568 = (char *)v566[572];
      unint64_t v569 = v566[573];
      if ((unint64_t)v568 >= v569)
      {
        unint64_t v570 = (char *)v566[571];
        uint64_t v571 = (v568 - v570) >> 3;
        if ((unint64_t)(v571 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v572 = v569 - (void)v570;
        unint64_t v573 = (uint64_t)(v569 - (void)v570) >> 2;
        if (v573 <= v571 + 1) {
          unint64_t v573 = v571 + 1;
        }
        if (v572 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v574 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v574 = v573;
        }
        if (v574)
        {
          unsigned int v575 = (char *)sub_5714((uint64_t)(v566 + 573), v574);
          int v568 = (char *)v566[572];
          unint64_t v570 = (char *)v566[571];
        }
        else
        {
          unsigned int v575 = 0;
        }
        unint64_t v583 = &v575[8 * v571];
        unint64_t v584 = &v575[8 * v574];
        *(void *)unint64_t v583 = v567;
        unint64_t v577 = v583 + 8;
        while (v568 != v570)
        {
          uint64_t v585 = *((void *)v568 - 1);
          v568 -= 8;
          *((void *)v583 - 1) = v585;
          v583 -= 8;
        }
LABEL_835:
        v566[571] = v583;
        v566[572] = v577;
        v566[573] = v584;
        if (v570) {
          operator delete(v570);
        }
        goto LABEL_837;
      }
    }
    *(void *)int v568 = v567;
    unint64_t v577 = v568 + 8;
LABEL_837:
    v566[572] = v577;
LABEL_838:
    int v587 = 1 << *(_DWORD *)(v3 + 48);
    if (v587 == 2)
    {
      unint64_t v588 = *(void **)a1[1];
      uint64_t v589 = *(_WORD *)(a1[2] + 36) & 0x3FFF;
      unint64_t v590 = (char *)v588[575];
      unint64_t v598 = v588[576];
      if ((unint64_t)v590 >= v598)
      {
        unsigned int v592 = (char *)v588[574];
        uint64_t v600 = (v590 - v592) >> 3;
        if ((unint64_t)(v600 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v601 = v598 - (void)v592;
        unint64_t v602 = (uint64_t)(v598 - (void)v592) >> 2;
        if (v602 <= v600 + 1) {
          unint64_t v602 = v600 + 1;
        }
        if (v601 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v603 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v603 = v602;
        }
        if (v603)
        {
          int v604 = (char *)sub_5714((uint64_t)(v588 + 576), v603);
          unint64_t v590 = (char *)v588[575];
          unsigned int v592 = (char *)v588[574];
        }
        else
        {
          int v604 = 0;
        }
        int v605 = &v604[8 * v600];
        unint64_t v606 = &v604[8 * v603];
        *(void *)int v605 = v589;
        unint64_t v599 = v605 + 8;
        while (v590 != v592)
        {
          uint64_t v608 = *((void *)v590 - 1);
          v590 -= 8;
          *((void *)v605 - 1) = v608;
          v605 -= 8;
        }
        goto LABEL_867;
      }
    }
    else
    {
      if (v587 != 1) {
        goto LABEL_870;
      }
      unint64_t v588 = *(void **)a1[1];
      uint64_t v589 = *(_WORD *)(a1[2] + 36) & 0x3FFF;
      unint64_t v590 = (char *)v588[575];
      unint64_t v591 = v588[576];
      if ((unint64_t)v590 >= v591)
      {
        unsigned int v592 = (char *)v588[574];
        uint64_t v593 = (v590 - v592) >> 3;
        if ((unint64_t)(v593 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v594 = v591 - (void)v592;
        unint64_t v595 = (uint64_t)(v591 - (void)v592) >> 2;
        if (v595 <= v593 + 1) {
          unint64_t v595 = v593 + 1;
        }
        if (v594 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v596 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v596 = v595;
        }
        if (v596)
        {
          unint64_t v597 = (char *)sub_5714((uint64_t)(v588 + 576), v596);
          unint64_t v590 = (char *)v588[575];
          unsigned int v592 = (char *)v588[574];
        }
        else
        {
          unint64_t v597 = 0;
        }
        int v605 = &v597[8 * v593];
        unint64_t v606 = &v597[8 * v596];
        *(void *)int v605 = v589;
        unint64_t v599 = v605 + 8;
        while (v590 != v592)
        {
          uint64_t v607 = *((void *)v590 - 1);
          v590 -= 8;
          *((void *)v605 - 1) = v607;
          v605 -= 8;
        }
LABEL_867:
        v588[574] = v605;
        v588[575] = v599;
        v588[576] = v606;
        if (v592) {
          operator delete(v592);
        }
        goto LABEL_869;
      }
    }
    *(void *)unint64_t v590 = v589;
    unint64_t v599 = v590 + 8;
LABEL_869:
    v588[575] = v599;
LABEL_870:
    int v609 = 1 << *(_DWORD *)(v3 + 48);
    if (v609 == 2)
    {
      unint64_t v610 = *(void **)a1[1];
      uint64_t v611 = (unsigned __int16)*(_DWORD *)(a1[2] + 20) >> 1;
      unint64_t v612 = (char *)v610[578];
      unint64_t v620 = v610[579];
      if ((unint64_t)v612 >= v620)
      {
        unint64_t v614 = (char *)v610[577];
        uint64_t v622 = (v612 - v614) >> 3;
        if ((unint64_t)(v622 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v623 = v620 - (void)v614;
        unint64_t v624 = (uint64_t)(v620 - (void)v614) >> 2;
        if (v624 <= v622 + 1) {
          unint64_t v624 = v622 + 1;
        }
        if (v623 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v625 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v625 = v624;
        }
        if (v625)
        {
          unint64_t v626 = (char *)sub_5714((uint64_t)(v610 + 579), v625);
          unint64_t v612 = (char *)v610[578];
          unint64_t v614 = (char *)v610[577];
        }
        else
        {
          unint64_t v626 = 0;
        }
        int v627 = &v626[8 * v622];
        int v628 = &v626[8 * v625];
        *(void *)int v627 = v611;
        unint64_t v621 = v627 + 8;
        while (v612 != v614)
        {
          uint64_t v630 = *((void *)v612 - 1);
          v612 -= 8;
          *((void *)v627 - 1) = v630;
          v627 -= 8;
        }
        goto LABEL_899;
      }
    }
    else
    {
      if (v609 != 1) {
        goto LABEL_902;
      }
      unint64_t v610 = *(void **)a1[1];
      uint64_t v611 = (unsigned __int16)*(_DWORD *)(a1[2] + 20) >> 1;
      unint64_t v612 = (char *)v610[578];
      unint64_t v613 = v610[579];
      if ((unint64_t)v612 >= v613)
      {
        unint64_t v614 = (char *)v610[577];
        uint64_t v615 = (v612 - v614) >> 3;
        if ((unint64_t)(v615 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v616 = v613 - (void)v614;
        unint64_t v617 = (uint64_t)(v613 - (void)v614) >> 2;
        if (v617 <= v615 + 1) {
          unint64_t v617 = v615 + 1;
        }
        if (v616 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v618 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v618 = v617;
        }
        if (v618)
        {
          unint64_t v619 = (char *)sub_5714((uint64_t)(v610 + 579), v618);
          unint64_t v612 = (char *)v610[578];
          unint64_t v614 = (char *)v610[577];
        }
        else
        {
          unint64_t v619 = 0;
        }
        int v627 = &v619[8 * v615];
        int v628 = &v619[8 * v618];
        *(void *)int v627 = v611;
        unint64_t v621 = v627 + 8;
        while (v612 != v614)
        {
          uint64_t v629 = *((void *)v612 - 1);
          v612 -= 8;
          *((void *)v627 - 1) = v629;
          v627 -= 8;
        }
LABEL_899:
        v610[577] = v627;
        v610[578] = v621;
        v610[579] = v628;
        if (v614) {
          operator delete(v614);
        }
        goto LABEL_901;
      }
    }
    *(void *)unint64_t v612 = v611;
    unint64_t v621 = v612 + 8;
LABEL_901:
    v610[578] = v621;
LABEL_902:
    int v631 = 1 << *(_DWORD *)(v3 + 48);
    if (v631 == 2)
    {
      unint64_t v632 = *(void **)a1[1];
      uint64_t v633 = *(_WORD *)(a1[2] + 70) & 0x1FFF;
      unint64_t v634 = (char *)v632[581];
      unint64_t v642 = v632[582];
      if ((unint64_t)v634 >= v642)
      {
        unint64_t v636 = (char *)v632[580];
        uint64_t v644 = (v634 - v636) >> 3;
        if ((unint64_t)(v644 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v645 = v642 - (void)v636;
        unint64_t v646 = (uint64_t)(v642 - (void)v636) >> 2;
        if (v646 <= v644 + 1) {
          unint64_t v646 = v644 + 1;
        }
        if (v645 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v647 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v647 = v646;
        }
        if (v647)
        {
          int v648 = (char *)sub_5714((uint64_t)(v632 + 582), v647);
          unint64_t v634 = (char *)v632[581];
          unint64_t v636 = (char *)v632[580];
        }
        else
        {
          int v648 = 0;
        }
        unint64_t v649 = &v648[8 * v644];
        unint64_t v650 = &v648[8 * v647];
        *(void *)unint64_t v649 = v633;
        unsigned int v643 = v649 + 8;
        while (v634 != v636)
        {
          uint64_t v652 = *((void *)v634 - 1);
          v634 -= 8;
          *((void *)v649 - 1) = v652;
          v649 -= 8;
        }
        goto LABEL_931;
      }
    }
    else
    {
      if (v631 != 1) {
        goto LABEL_934;
      }
      unint64_t v632 = *(void **)a1[1];
      uint64_t v633 = *(_WORD *)(a1[2] + 70) & 0x1FFF;
      unint64_t v634 = (char *)v632[581];
      unint64_t v635 = v632[582];
      if ((unint64_t)v634 >= v635)
      {
        unint64_t v636 = (char *)v632[580];
        uint64_t v637 = (v634 - v636) >> 3;
        if ((unint64_t)(v637 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v638 = v635 - (void)v636;
        unint64_t v639 = (uint64_t)(v635 - (void)v636) >> 2;
        if (v639 <= v637 + 1) {
          unint64_t v639 = v637 + 1;
        }
        if (v638 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v640 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v640 = v639;
        }
        if (v640)
        {
          unint64_t v641 = (char *)sub_5714((uint64_t)(v632 + 582), v640);
          unint64_t v634 = (char *)v632[581];
          unint64_t v636 = (char *)v632[580];
        }
        else
        {
          unint64_t v641 = 0;
        }
        unint64_t v649 = &v641[8 * v637];
        unint64_t v650 = &v641[8 * v640];
        *(void *)unint64_t v649 = v633;
        unsigned int v643 = v649 + 8;
        while (v634 != v636)
        {
          uint64_t v651 = *((void *)v634 - 1);
          v634 -= 8;
          *((void *)v649 - 1) = v651;
          v649 -= 8;
        }
LABEL_931:
        v632[580] = v649;
        v632[581] = v643;
        v632[582] = v650;
        if (v636) {
          operator delete(v636);
        }
        goto LABEL_933;
      }
    }
    *(void *)unint64_t v634 = v633;
    unsigned int v643 = v634 + 8;
LABEL_933:
    v632[581] = v643;
LABEL_934:
    int v653 = 1 << *(_DWORD *)(v3 + 48);
    if (v653 == 2)
    {
      unint64_t v654 = *(void **)a1[1];
      uint64_t v655 = *(_WORD *)(a1[2] + 54) & 0x3FFF;
      unsigned int v656 = (char *)v654[584];
      unint64_t v664 = v654[585];
      if ((unint64_t)v656 >= v664)
      {
        unint64_t v658 = (char *)v654[583];
        uint64_t v666 = (v656 - v658) >> 3;
        if ((unint64_t)(v666 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v667 = v664 - (void)v658;
        unint64_t v668 = (uint64_t)(v664 - (void)v658) >> 2;
        if (v668 <= v666 + 1) {
          unint64_t v668 = v666 + 1;
        }
        if (v667 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v669 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v669 = v668;
        }
        if (v669)
        {
          int v670 = (char *)sub_5714((uint64_t)(v654 + 585), v669);
          unsigned int v656 = (char *)v654[584];
          unint64_t v658 = (char *)v654[583];
        }
        else
        {
          int v670 = 0;
        }
        unint64_t v671 = &v670[8 * v666];
        unint64_t v672 = &v670[8 * v669];
        *(void *)unint64_t v671 = v655;
        int v665 = v671 + 8;
        while (v656 != v658)
        {
          uint64_t v674 = *((void *)v656 - 1);
          v656 -= 8;
          *((void *)v671 - 1) = v674;
          v671 -= 8;
        }
        goto LABEL_963;
      }
    }
    else
    {
      if (v653 != 1) {
        goto LABEL_966;
      }
      unint64_t v654 = *(void **)a1[1];
      uint64_t v655 = *(_WORD *)(a1[2] + 54) & 0x3FFF;
      unsigned int v656 = (char *)v654[584];
      unint64_t v657 = v654[585];
      if ((unint64_t)v656 >= v657)
      {
        unint64_t v658 = (char *)v654[583];
        uint64_t v659 = (v656 - v658) >> 3;
        if ((unint64_t)(v659 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v660 = v657 - (void)v658;
        unint64_t v661 = (uint64_t)(v657 - (void)v658) >> 2;
        if (v661 <= v659 + 1) {
          unint64_t v661 = v659 + 1;
        }
        if (v660 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v662 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v662 = v661;
        }
        if (v662)
        {
          unint64_t v663 = (char *)sub_5714((uint64_t)(v654 + 585), v662);
          unsigned int v656 = (char *)v654[584];
          unint64_t v658 = (char *)v654[583];
        }
        else
        {
          unint64_t v663 = 0;
        }
        unint64_t v671 = &v663[8 * v659];
        unint64_t v672 = &v663[8 * v662];
        *(void *)unint64_t v671 = v655;
        int v665 = v671 + 8;
        while (v656 != v658)
        {
          uint64_t v673 = *((void *)v656 - 1);
          v656 -= 8;
          *((void *)v671 - 1) = v673;
          v671 -= 8;
        }
LABEL_963:
        v654[583] = v671;
        v654[584] = v665;
        v654[585] = v672;
        if (v658) {
          operator delete(v658);
        }
        goto LABEL_965;
      }
    }
    *(void *)unsigned int v656 = v655;
    int v665 = v656 + 8;
LABEL_965:
    v654[584] = v665;
LABEL_966:
    int v675 = 1 << *(_DWORD *)(v3 + 48);
    if (v675 == 2)
    {
      unint64_t v676 = *(void **)a1[1];
      uint64_t v677 = *(_WORD *)(a1[2] + 38) & 0x3FFF;
      unint64_t v678 = (char *)v676[587];
      unint64_t v686 = v676[588];
      if ((unint64_t)v678 >= v686)
      {
        unint64_t v680 = (char *)v676[586];
        uint64_t v688 = (v678 - v680) >> 3;
        if ((unint64_t)(v688 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v689 = v686 - (void)v680;
        unint64_t v690 = (uint64_t)(v686 - (void)v680) >> 2;
        if (v690 <= v688 + 1) {
          unint64_t v690 = v688 + 1;
        }
        if (v689 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v691 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v691 = v690;
        }
        if (v691)
        {
          int v692 = (char *)sub_5714((uint64_t)(v676 + 588), v691);
          unint64_t v678 = (char *)v676[587];
          unint64_t v680 = (char *)v676[586];
        }
        else
        {
          int v692 = 0;
        }
        unint64_t v693 = &v692[8 * v688];
        unint64_t v694 = &v692[8 * v691];
        *(void *)unint64_t v693 = v677;
        int v687 = v693 + 8;
        while (v678 != v680)
        {
          uint64_t v696 = *((void *)v678 - 1);
          v678 -= 8;
          *((void *)v693 - 1) = v696;
          v693 -= 8;
        }
        goto LABEL_995;
      }
    }
    else
    {
      if (v675 != 1) {
        goto LABEL_998;
      }
      unint64_t v676 = *(void **)a1[1];
      uint64_t v677 = *(_WORD *)(a1[2] + 38) & 0x3FFF;
      unint64_t v678 = (char *)v676[587];
      unint64_t v679 = v676[588];
      if ((unint64_t)v678 >= v679)
      {
        unint64_t v680 = (char *)v676[586];
        uint64_t v681 = (v678 - v680) >> 3;
        if ((unint64_t)(v681 + 1) >> 61) {
          goto LABEL_1032;
        }
        unint64_t v682 = v679 - (void)v680;
        unint64_t v683 = (uint64_t)(v679 - (void)v680) >> 2;
        if (v683 <= v681 + 1) {
          unint64_t v683 = v681 + 1;
        }
        if (v682 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v684 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v684 = v683;
        }
        if (v684)
        {
          unint64_t v685 = (char *)sub_5714((uint64_t)(v676 + 588), v684);
          unint64_t v678 = (char *)v676[587];
          unint64_t v680 = (char *)v676[586];
        }
        else
        {
          unint64_t v685 = 0;
        }
        unint64_t v693 = &v685[8 * v681];
        unint64_t v694 = &v685[8 * v684];
        *(void *)unint64_t v693 = v677;
        int v687 = v693 + 8;
        while (v678 != v680)
        {
          uint64_t v695 = *((void *)v678 - 1);
          v678 -= 8;
          *((void *)v693 - 1) = v695;
          v693 -= 8;
        }
LABEL_995:
        v676[586] = v693;
        v676[587] = v687;
        v676[588] = v694;
        if (v680) {
          operator delete(v680);
        }
        goto LABEL_997;
      }
    }
    *(void *)unint64_t v678 = v677;
    int v687 = v678 + 8;
LABEL_997:
    v676[587] = v687;
LABEL_998:
    int v697 = 1 << *(_DWORD *)(v3 + 48);
    if (v697 == 2)
    {
      uint64_t v709 = a1[2];
      unint64_t v699 = *(void **)a1[1];
      uint64_t v700 = *(_WORD *)(v709 + 22) & 0x7FFF;
      unint64_t v701 = (char *)v699[590];
      unint64_t v710 = v699[591];
      if ((unint64_t)v701 >= v710)
      {
        unint64_t v703 = (char *)v699[589];
        uint64_t v712 = (v701 - v703) >> 3;
        if (!((unint64_t)(v712 + 1) >> 61))
        {
          unint64_t v713 = v710 - (void)v703;
          unint64_t v714 = (uint64_t)(v710 - (void)v703) >> 2;
          if (v714 <= v712 + 1) {
            unint64_t v714 = v712 + 1;
          }
          if (v713 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v715 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v715 = v714;
          }
          if (v715)
          {
            unsigned int v716 = (char *)sub_5714((uint64_t)(v699 + 591), v715);
            unint64_t v701 = (char *)v699[590];
            unint64_t v703 = (char *)v699[589];
          }
          else
          {
            unsigned int v716 = 0;
          }
          uint64_t v717 = &v716[8 * v712];
          unint64_t v718 = &v716[8 * v715];
          *(void *)uint64_t v717 = v700;
          unint64_t v711 = v717 + 8;
          while (v701 != v703)
          {
            uint64_t v720 = *((void *)v701 - 1);
            v701 -= 8;
            *((void *)v717 - 1) = v720;
            v717 -= 8;
          }
          goto LABEL_1027;
        }
LABEL_1032:
        sub_566C();
      }
    }
    else
    {
      if (v697 != 1)
      {
LABEL_1030:
        *a2 = 1;
        return;
      }
      uint64_t v698 = a1[2];
      unint64_t v699 = *(void **)a1[1];
      uint64_t v700 = *(_WORD *)(v698 + 22) & 0x7FFF;
      unint64_t v701 = (char *)v699[590];
      unint64_t v702 = v699[591];
      if ((unint64_t)v701 >= v702)
      {
        unint64_t v703 = (char *)v699[589];
        uint64_t v704 = (v701 - v703) >> 3;
        if (!((unint64_t)(v704 + 1) >> 61))
        {
          unint64_t v705 = v702 - (void)v703;
          unint64_t v706 = (uint64_t)(v702 - (void)v703) >> 2;
          if (v706 <= v704 + 1) {
            unint64_t v706 = v704 + 1;
          }
          if (v705 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v707 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v707 = v706;
          }
          if (v707)
          {
            unsigned int v708 = (char *)sub_5714((uint64_t)(v699 + 591), v707);
            unint64_t v701 = (char *)v699[590];
            unint64_t v703 = (char *)v699[589];
          }
          else
          {
            unsigned int v708 = 0;
          }
          uint64_t v717 = &v708[8 * v704];
          unint64_t v718 = &v708[8 * v707];
          *(void *)uint64_t v717 = v700;
          unint64_t v711 = v717 + 8;
          while (v701 != v703)
          {
            uint64_t v719 = *((void *)v701 - 1);
            v701 -= 8;
            *((void *)v717 - 1) = v719;
            v717 -= 8;
          }
LABEL_1027:
          v699[589] = v717;
          v699[590] = v711;
          v699[591] = v718;
          if (v703) {
            operator delete(v703);
          }
          goto LABEL_1029;
        }
        goto LABEL_1032;
      }
    }
    *(void *)unint64_t v701 = v700;
    unint64_t v711 = v701 + 8;
LABEL_1029:
    v699[590] = v711;
    goto LABEL_1030;
  }
  int v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    uint64_t v18 = (void *)a1[1];
    uint64_t v17 = (_WORD *)a1[2];
    unint64_t v19 = (void *)*v18;
    *(void *)(v19[497] - 8) += v17[39] & 0x1FFF;
    *(void *)(v19[500] - 8) += v17[31] & 0x3FFF;
    *(void *)(v19[503] - 8) += v17[23] & 0x3FFF;
    *(void *)(v19[506] - 8) += v17[15] & 0x7FFF;
    *(void *)(v19[509] - 8) += v17[40] & 0x1FFF;
    *(void *)(v19[512] - 8) += v17[32] & 0x3FFF;
    *(void *)(v19[515] - 8) += v17[24] & 0x3FFF;
    *(void *)(v19[518] - 8) += v17[16] & 0x7FFF;
    *(void *)(v19[521] - 8) += v17[41] & 0x1FFF;
    *(void *)(v19[524] - 8) += v17[33] & 0x3FFF;
    uint64_t v20 = (_WORD *)a1[2];
    uint64_t v21 = *(void **)a1[1];
    *(void *)(v21[527] - 8) += v20[25] & 0x3FFF;
    *(void *)(v21[530] - 8) += v20[17] & 0x7FFF;
    *(void *)(v21[533] - 8) += v20[36] & 0x1FFF;
    *(void *)(v21[536] - 8) += v20[28] & 0x1FFF;
    *(void *)(v21[539] - 8) += v20[20] & 0x3FFF;
    *(void *)(v21[542] - 8) += v20[12] & 0x7FFF;
    *(void *)(v21[545] - 8) += v20[37] & 0x1FFF;
    *(void *)(v21[548] - 8) += v20[29] & 0x1FFF;
    *(void *)(v21[551] - 8) += v20[21] & 0x3FFF;
    *(void *)(v21[554] - 8) += v20[13] & 0x7FFF;
    uint64_t v22 = a1[2];
    unint64_t v23 = *(void **)a1[1];
    *(void *)(v23[557] - 8) += *(_WORD *)(v22 + 76) & 0x1FFF;
    *(void *)(v23[560] - 8) += *(_WORD *)(v22 + 60) & 0x1FFF;
    *(void *)(v23[563] - 8) += *(_WORD *)(v22 + 44) & 0x3FFF;
    *(void *)(v23[566] - 8) += *(_WORD *)(v22 + 28) & 0x7FFF;
    *(void *)(v23[569] - 8) += *(_WORD *)(v22 + 68) & 0x1FFF;
    *(void *)(v23[572] - 8) += *(_WORD *)(v22 + 52) & 0x3FFF;
    *(void *)(v23[575] - 8) += *(_WORD *)(v22 + 36) & 0x3FFF;
    *(void *)(v23[578] - 8) += (unsigned __int16)*(_DWORD *)(v22 + 20) >> 1;
    *(void *)(v23[581] - 8) += *(_WORD *)(v22 + 70) & 0x1FFF;
    *(void *)(v23[584] - 8) += *(_WORD *)(v22 + 54) & 0x3FFF;
    uint64_t v24 = a1[2];
    unint64_t v25 = (void *)*v18;
    *(void *)(v25[587] - 8) += *(_WORD *)(v24 + 38) & 0x3FFF;
    *(void *)(v25[590] - 8) += *(_WORD *)(v24 + 22) & 0x7FFF;
  }
}

void sub_D5F58(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    int v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_WORD *)(a1[2] + 34) & 0x7FFF;
      uint64_t v8 = (char *)v6[476];
      unint64_t v19 = v6[477];
      if ((unint64_t)v8 >= v19)
      {
        unint64_t v10 = (char *)v6[475];
        uint64_t v21 = (v8 - v10) >> 3;
        if ((unint64_t)(v21 + 1) >> 61) {
          goto LABEL_232;
        }
        unint64_t v22 = v19 - (void)v10;
        unint64_t v23 = (uint64_t)(v19 - (void)v10) >> 2;
        if (v23 <= v21 + 1) {
          unint64_t v23 = v21 + 1;
        }
        if (v22 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v23;
        }
        if (v24)
        {
          unint64_t v25 = (char *)sub_5714((uint64_t)(v6 + 477), v24);
          uint64_t v8 = (char *)v6[476];
          unint64_t v10 = (char *)v6[475];
        }
        else
        {
          unint64_t v25 = 0;
        }
        unint64_t v26 = &v25[8 * v21];
        unint64_t v27 = &v25[8 * v24];
        *(void *)unint64_t v26 = v7;
        uint64_t v20 = v26 + 8;
        while (v8 != v10)
        {
          uint64_t v29 = *((void *)v8 - 1);
          v8 -= 8;
          *((void *)v26 - 1) = v29;
          v26 -= 8;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1) {
        goto LABEL_38;
      }
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_WORD *)(a1[2] + 34) & 0x7FFF;
      uint64_t v8 = (char *)v6[476];
      unint64_t v9 = v6[477];
      if ((unint64_t)v8 >= v9)
      {
        unint64_t v10 = (char *)v6[475];
        uint64_t v11 = (v8 - v10) >> 3;
        if ((unint64_t)(v11 + 1) >> 61) {
          goto LABEL_232;
        }
        unint64_t v12 = v9 - (void)v10;
        unint64_t v13 = (uint64_t)(v9 - (void)v10) >> 2;
        if (v13 <= v11 + 1) {
          unint64_t v13 = v11 + 1;
        }
        if (v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14)
        {
          unint64_t v15 = (char *)sub_5714((uint64_t)(v6 + 477), v14);
          uint64_t v8 = (char *)v6[476];
          unint64_t v10 = (char *)v6[475];
        }
        else
        {
          unint64_t v15 = 0;
        }
        unint64_t v26 = &v15[8 * v11];
        unint64_t v27 = &v15[8 * v14];
        *(void *)unint64_t v26 = v7;
        uint64_t v20 = v26 + 8;
        while (v8 != v10)
        {
          uint64_t v28 = *((void *)v8 - 1);
          v8 -= 8;
          *((void *)v26 - 1) = v28;
          v26 -= 8;
        }
LABEL_35:
        v6[475] = v26;
        v6[476] = v20;
        v6[477] = v27;
        if (v10) {
          operator delete(v10);
        }
        goto LABEL_37;
      }
    }
    *(void *)uint64_t v8 = v7;
    uint64_t v20 = v8 + 8;
LABEL_37:
    v6[476] = v20;
LABEL_38:
    int v30 = 1 << *(_DWORD *)(v3 + 48);
    if (v30 == 2)
    {
      unint64_t v31 = *(void **)a1[1];
      uint64_t v32 = *(_WORD *)(a1[2] + 32) & 0x7FFF;
      int v33 = (char *)v31[479];
      unint64_t v41 = v31[480];
      if ((unint64_t)v33 >= v41)
      {
        uint64_t v35 = (char *)v31[478];
        uint64_t v43 = (v33 - v35) >> 3;
        if ((unint64_t)(v43 + 1) >> 61) {
          goto LABEL_232;
        }
        unint64_t v44 = v41 - (void)v35;
        unint64_t v45 = (uint64_t)(v41 - (void)v35) >> 2;
        if (v45 <= v43 + 1) {
          unint64_t v45 = v43 + 1;
        }
        if (v44 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v46 = v45;
        }
        if (v46)
        {
          unint64_t v47 = (char *)sub_5714((uint64_t)(v31 + 480), v46);
          int v33 = (char *)v31[479];
          uint64_t v35 = (char *)v31[478];
        }
        else
        {
          unint64_t v47 = 0;
        }
        unint64_t v48 = &v47[8 * v43];
        unint64_t v49 = &v47[8 * v46];
        *(void *)unint64_t v48 = v32;
        unint64_t v42 = v48 + 8;
        while (v33 != v35)
        {
          uint64_t v51 = *((void *)v33 - 1);
          v33 -= 8;
          *((void *)v48 - 1) = v51;
          v48 -= 8;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v30 != 1) {
        goto LABEL_70;
      }
      unint64_t v31 = *(void **)a1[1];
      uint64_t v32 = *(_WORD *)(a1[2] + 32) & 0x7FFF;
      int v33 = (char *)v31[479];
      unint64_t v34 = v31[480];
      if ((unint64_t)v33 >= v34)
      {
        uint64_t v35 = (char *)v31[478];
        uint64_t v36 = (v33 - v35) >> 3;
        if ((unint64_t)(v36 + 1) >> 61) {
          goto LABEL_232;
        }
        unint64_t v37 = v34 - (void)v35;
        unint64_t v38 = (uint64_t)(v34 - (void)v35) >> 2;
        if (v38 <= v36 + 1) {
          unint64_t v38 = v36 + 1;
        }
        if (v37 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v39 = v38;
        }
        if (v39)
        {
          unint64_t v40 = (char *)sub_5714((uint64_t)(v31 + 480), v39);
          int v33 = (char *)v31[479];
          uint64_t v35 = (char *)v31[478];
        }
        else
        {
          unint64_t v40 = 0;
        }
        unint64_t v48 = &v40[8 * v36];
        unint64_t v49 = &v40[8 * v39];
        *(void *)unint64_t v48 = v32;
        unint64_t v42 = v48 + 8;
        while (v33 != v35)
        {
          uint64_t v50 = *((void *)v33 - 1);
          v33 -= 8;
          *((void *)v48 - 1) = v50;
          v48 -= 8;
        }
LABEL_67:
        v31[478] = v48;
        v31[479] = v42;
        v31[480] = v49;
        if (v35) {
          operator delete(v35);
        }
        goto LABEL_69;
      }
    }
    *(void *)int v33 = v32;
    unint64_t v42 = v33 + 8;
LABEL_69:
    v31[479] = v42;
LABEL_70:
    int v52 = 1 << *(_DWORD *)(v3 + 48);
    if (v52 == 2)
    {
      unint64_t v53 = *(void **)a1[1];
      uint64_t v54 = *(_WORD *)(a1[2] + 30) & 0x7FFF;
      int v55 = (char *)v53[482];
      unint64_t v63 = v53[483];
      if ((unint64_t)v55 >= v63)
      {
        uint64_t v57 = (char *)v53[481];
        uint64_t v65 = (v55 - v57) >> 3;
        if ((unint64_t)(v65 + 1) >> 61) {
          goto LABEL_232;
        }
        unint64_t v66 = v63 - (void)v57;
        unint64_t v67 = (uint64_t)(v63 - (void)v57) >> 2;
        if (v67 <= v65 + 1) {
          unint64_t v67 = v65 + 1;
        }
        if (v66 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v68 = v67;
        }
        if (v68)
        {
          unint64_t v69 = (char *)sub_5714((uint64_t)(v53 + 483), v68);
          int v55 = (char *)v53[482];
          uint64_t v57 = (char *)v53[481];
        }
        else
        {
          unint64_t v69 = 0;
        }
        unint64_t v70 = &v69[8 * v65];
        unint64_t v71 = &v69[8 * v68];
        *(void *)unint64_t v70 = v54;
        unint64_t v64 = v70 + 8;
        while (v55 != v57)
        {
          uint64_t v73 = *((void *)v55 - 1);
          v55 -= 8;
          *((void *)v70 - 1) = v73;
          v70 -= 8;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v52 != 1) {
        goto LABEL_102;
      }
      unint64_t v53 = *(void **)a1[1];
      uint64_t v54 = *(_WORD *)(a1[2] + 30) & 0x7FFF;
      int v55 = (char *)v53[482];
      unint64_t v56 = v53[483];
      if ((unint64_t)v55 >= v56)
      {
        uint64_t v57 = (char *)v53[481];
        uint64_t v58 = (v55 - v57) >> 3;
        if ((unint64_t)(v58 + 1) >> 61) {
          goto LABEL_232;
        }
        unint64_t v59 = v56 - (void)v57;
        unint64_t v60 = (uint64_t)(v56 - (void)v57) >> 2;
        if (v60 <= v58 + 1) {
          unint64_t v60 = v58 + 1;
        }
        if (v59 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v61 = v60;
        }
        if (v61)
        {
          unint64_t v62 = (char *)sub_5714((uint64_t)(v53 + 483), v61);
          int v55 = (char *)v53[482];
          uint64_t v57 = (char *)v53[481];
        }
        else
        {
          unint64_t v62 = 0;
        }
        unint64_t v70 = &v62[8 * v58];
        unint64_t v71 = &v62[8 * v61];
        *(void *)unint64_t v70 = v54;
        unint64_t v64 = v70 + 8;
        while (v55 != v57)
        {
          uint64_t v72 = *((void *)v55 - 1);
          v55 -= 8;
          *((void *)v70 - 1) = v72;
          v70 -= 8;
        }
LABEL_99:
        v53[481] = v70;
        v53[482] = v64;
        v53[483] = v71;
        if (v57) {
          operator delete(v57);
        }
        goto LABEL_101;
      }
    }
    *(void *)int v55 = v54;
    unint64_t v64 = v55 + 8;
LABEL_101:
    v53[482] = v64;
LABEL_102:
    int v74 = 1 << *(_DWORD *)(v3 + 48);
    if (v74 == 2)
    {
      unint64_t v75 = *(void **)a1[1];
      uint64_t v76 = *(_WORD *)(a1[2] + 28) & 0x7FFF;
      int v77 = (char *)v75[485];
      unint64_t v85 = v75[486];
      if ((unint64_t)v77 >= v85)
      {
        uint64_t v79 = (char *)v75[484];
        uint64_t v87 = (v77 - v79) >> 3;
        if ((unint64_t)(v87 + 1) >> 61) {
          goto LABEL_232;
        }
        unint64_t v88 = v85 - (void)v79;
        unint64_t v89 = (uint64_t)(v85 - (void)v79) >> 2;
        if (v89 <= v87 + 1) {
          unint64_t v89 = v87 + 1;
        }
        if (v88 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v90 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v90 = v89;
        }
        if (v90)
        {
          unint64_t v91 = (char *)sub_5714((uint64_t)(v75 + 486), v90);
          int v77 = (char *)v75[485];
          uint64_t v79 = (char *)v75[484];
        }
        else
        {
          unint64_t v91 = 0;
        }
        unint64_t v92 = &v91[8 * v87];
        unint64_t v93 = &v91[8 * v90];
        *(void *)unint64_t v92 = v76;
        unint64_t v86 = v92 + 8;
        while (v77 != v79)
        {
          uint64_t v95 = *((void *)v77 - 1);
          v77 -= 8;
          *((void *)v92 - 1) = v95;
          v92 -= 8;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v74 != 1) {
        goto LABEL_134;
      }
      unint64_t v75 = *(void **)a1[1];
      uint64_t v76 = *(_WORD *)(a1[2] + 28) & 0x7FFF;
      int v77 = (char *)v75[485];
      unint64_t v78 = v75[486];
      if ((unint64_t)v77 >= v78)
      {
        uint64_t v79 = (char *)v75[484];
        uint64_t v80 = (v77 - v79) >> 3;
        if ((unint64_t)(v80 + 1) >> 61) {
          goto LABEL_232;
        }
        unint64_t v81 = v78 - (void)v79;
        unint64_t v82 = (uint64_t)(v78 - (void)v79) >> 2;
        if (v82 <= v80 + 1) {
          unint64_t v82 = v80 + 1;
        }
        if (v81 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v83 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v83 = v82;
        }
        if (v83)
        {
          unint64_t v84 = (char *)sub_5714((uint64_t)(v75 + 486), v83);
          int v77 = (char *)v75[485];
          uint64_t v79 = (char *)v75[484];
        }
        else
        {
          unint64_t v84 = 0;
        }
        unint64_t v92 = &v84[8 * v80];
        unint64_t v93 = &v84[8 * v83];
        *(void *)unint64_t v92 = v76;
        unint64_t v86 = v92 + 8;
        while (v77 != v79)
        {
          uint64_t v94 = *((void *)v77 - 1);
          v77 -= 8;
          *((void *)v92 - 1) = v94;
          v92 -= 8;
        }
LABEL_131:
        v75[484] = v92;
        v75[485] = v86;
        v75[486] = v93;
        if (v79) {
          operator delete(v79);
        }
        goto LABEL_133;
      }
    }
    *(void *)int v77 = v76;
    unint64_t v86 = v77 + 8;
LABEL_133:
    v75[485] = v86;
LABEL_134:
    int v96 = 1 << *(_DWORD *)(v3 + 48);
    if (v96 == 2)
    {
      uint64_t v108 = a1[1];
      uint64_t v98 = *(void **)v108;
      uint64_t v99 = *(unsigned int *)(a1[2] + 24);
      unint64_t v100 = *(char **)(*(void *)v108 + 3904);
      unint64_t v109 = *(void *)(*(void *)v108 + 3912);
      if ((unint64_t)v100 >= v109)
      {
        uint64_t v102 = (char *)v98[487];
        uint64_t v111 = (v100 - v102) >> 3;
        if ((unint64_t)(v111 + 1) >> 61) {
          goto LABEL_232;
        }
        unint64_t v112 = v109 - (void)v102;
        unint64_t v113 = (uint64_t)(v109 - (void)v102) >> 2;
        if (v113 <= v111 + 1) {
          unint64_t v113 = v111 + 1;
        }
        if (v112 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v114 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v114 = v113;
        }
        if (v114)
        {
          unint64_t v115 = (char *)sub_5714((uint64_t)(v98 + 489), v114);
          unint64_t v100 = (char *)v98[488];
          uint64_t v102 = (char *)v98[487];
        }
        else
        {
          unint64_t v115 = 0;
        }
        uint64_t v116 = &v115[8 * v111];
        unint64_t v117 = &v115[8 * v114];
        *(void *)uint64_t v116 = v99;
        unint64_t v110 = v116 + 8;
        while (v100 != v102)
        {
          uint64_t v119 = *((void *)v100 - 1);
          v100 -= 8;
          *((void *)v116 - 1) = v119;
          v116 -= 8;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v96 != 1) {
        goto LABEL_166;
      }
      uint64_t v97 = a1[1];
      uint64_t v98 = *(void **)v97;
      uint64_t v99 = *(unsigned int *)(a1[2] + 24);
      unint64_t v100 = *(char **)(*(void *)v97 + 3904);
      unint64_t v101 = *(void *)(*(void *)v97 + 3912);
      if ((unint64_t)v100 >= v101)
      {
        uint64_t v102 = (char *)v98[487];
        uint64_t v103 = (v100 - v102) >> 3;
        if ((unint64_t)(v103 + 1) >> 61) {
          goto LABEL_232;
        }
        unint64_t v104 = v101 - (void)v102;
        unint64_t v105 = (uint64_t)(v101 - (void)v102) >> 2;
        if (v105 <= v103 + 1) {
          unint64_t v105 = v103 + 1;
        }
        if (v104 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v106 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v106 = v105;
        }
        if (v106)
        {
          unint64_t v107 = (char *)sub_5714((uint64_t)(v98 + 489), v106);
          unint64_t v100 = (char *)v98[488];
          uint64_t v102 = (char *)v98[487];
        }
        else
        {
          unint64_t v107 = 0;
        }
        uint64_t v116 = &v107[8 * v103];
        unint64_t v117 = &v107[8 * v106];
        *(void *)uint64_t v116 = v99;
        unint64_t v110 = v116 + 8;
        while (v100 != v102)
        {
          uint64_t v118 = *((void *)v100 - 1);
          v100 -= 8;
          *((void *)v116 - 1) = v118;
          v116 -= 8;
        }
LABEL_163:
        v98[487] = v116;
        v98[488] = v110;
        v98[489] = v117;
        if (v102) {
          operator delete(v102);
        }
        goto LABEL_165;
      }
    }
    *(void *)unint64_t v100 = v99;
    unint64_t v110 = v100 + 8;
LABEL_165:
    v98[488] = v110;
LABEL_166:
    int v120 = 1 << *(_DWORD *)(v3 + 48);
    if (v120 == 2)
    {
      uint64_t v132 = a1[1];
      uint64_t v122 = *(void **)v132;
      uint64_t v123 = *(unsigned __int16 *)(a1[2] + 36);
      uint64_t v124 = *(char **)(*(void *)v132 + 3928);
      unint64_t v133 = *(void *)(*(void *)v132 + 3936);
      if ((unint64_t)v124 >= v133)
      {
        unint64_t v126 = (char *)v122[490];
        uint64_t v135 = (v124 - v126) >> 3;
        if ((unint64_t)(v135 + 1) >> 61) {
          goto LABEL_232;
        }
        unint64_t v136 = v133 - (void)v126;
        unint64_t v137 = (uint64_t)(v133 - (void)v126) >> 2;
        if (v137 <= v135 + 1) {
          unint64_t v137 = v135 + 1;
        }
        if (v136 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v138 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v138 = v137;
        }
        if (v138)
        {
          unint64_t v139 = (char *)sub_5714((uint64_t)(v122 + 492), v138);
          uint64_t v124 = (char *)v122[491];
          unint64_t v126 = (char *)v122[490];
        }
        else
        {
          unint64_t v139 = 0;
        }
        unint64_t v140 = &v139[8 * v135];
        unint64_t v141 = &v139[8 * v138];
        *(void *)unint64_t v140 = v123;
        unint64_t v134 = v140 + 8;
        while (v124 != v126)
        {
          uint64_t v143 = *((void *)v124 - 1);
          v124 -= 8;
          *((void *)v140 - 1) = v143;
          v140 -= 8;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v120 != 1) {
        goto LABEL_198;
      }
      uint64_t v121 = a1[1];
      uint64_t v122 = *(void **)v121;
      uint64_t v123 = *(unsigned __int16 *)(a1[2] + 36);
      uint64_t v124 = *(char **)(*(void *)v121 + 3928);
      unint64_t v125 = *(void *)(*(void *)v121 + 3936);
      if ((unint64_t)v124 >= v125)
      {
        unint64_t v126 = (char *)v122[490];
        uint64_t v127 = (v124 - v126) >> 3;
        if ((unint64_t)(v127 + 1) >> 61) {
          goto LABEL_232;
        }
        unint64_t v128 = v125 - (void)v126;
        unint64_t v129 = (uint64_t)(v125 - (void)v126) >> 2;
        if (v129 <= v127 + 1) {
          unint64_t v129 = v127 + 1;
        }
        if (v128 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v130 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v130 = v129;
        }
        if (v130)
        {
          uint64_t v131 = (char *)sub_5714((uint64_t)(v122 + 492), v130);
          uint64_t v124 = (char *)v122[491];
          unint64_t v126 = (char *)v122[490];
        }
        else
        {
          uint64_t v131 = 0;
        }
        unint64_t v140 = &v131[8 * v127];
        unint64_t v141 = &v131[8 * v130];
        *(void *)unint64_t v140 = v123;
        unint64_t v134 = v140 + 8;
        while (v124 != v126)
        {
          uint64_t v142 = *((void *)v124 - 1);
          v124 -= 8;
          *((void *)v140 - 1) = v142;
          v140 -= 8;
        }
LABEL_195:
        v122[490] = v140;
        v122[491] = v134;
        v122[492] = v141;
        if (v126) {
          operator delete(v126);
        }
        goto LABEL_197;
      }
    }
    *(void *)uint64_t v124 = v123;
    unint64_t v134 = v124 + 8;
LABEL_197:
    v122[491] = v134;
LABEL_198:
    int v144 = 1 << *(_DWORD *)(v3 + 48);
    if (v144 == 2)
    {
      uint64_t v157 = a1[1];
      uint64_t v158 = a1[2];
      int v147 = *(void **)v157;
      uint64_t v148 = *(unsigned int *)(v158 + 20);
      uint64_t v149 = *(char **)(*(void *)v157 + 3952);
      unint64_t v159 = *(void *)(*(void *)v157 + 3960);
      if ((unint64_t)v149 >= v159)
      {
        unint64_t v151 = (char *)v147[493];
        uint64_t v161 = (v149 - v151) >> 3;
        if (!((unint64_t)(v161 + 1) >> 61))
        {
          unint64_t v162 = v159 - (void)v151;
          unint64_t v163 = (uint64_t)(v159 - (void)v151) >> 2;
          if (v163 <= v161 + 1) {
            unint64_t v163 = v161 + 1;
          }
          if (v162 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v164 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v164 = v163;
          }
          if (v164)
          {
            int v165 = (char *)sub_5714((uint64_t)(v147 + 495), v164);
            uint64_t v149 = (char *)v147[494];
            unint64_t v151 = (char *)v147[493];
          }
          else
          {
            int v165 = 0;
          }
          unint64_t v166 = &v165[8 * v161];
          uint64_t v167 = &v165[8 * v164];
          *(void *)unint64_t v166 = v148;
          uint64_t v160 = v166 + 8;
          while (v149 != v151)
          {
            uint64_t v169 = *((void *)v149 - 1);
            v149 -= 8;
            *((void *)v166 - 1) = v169;
            v166 -= 8;
          }
          goto LABEL_227;
        }
LABEL_232:
        sub_566C();
      }
    }
    else
    {
      if (v144 != 1)
      {
LABEL_230:
        *a2 = 1;
        return;
      }
      uint64_t v145 = a1[1];
      uint64_t v146 = a1[2];
      int v147 = *(void **)v145;
      uint64_t v148 = *(unsigned int *)(v146 + 20);
      uint64_t v149 = *(char **)(*(void *)v145 + 3952);
      unint64_t v150 = *(void *)(*(void *)v145 + 3960);
      if ((unint64_t)v149 >= v150)
      {
        unint64_t v151 = (char *)v147[493];
        uint64_t v152 = (v149 - v151) >> 3;
        if (!((unint64_t)(v152 + 1) >> 61))
        {
          unint64_t v153 = v150 - (void)v151;
          unint64_t v154 = (uint64_t)(v150 - (void)v151) >> 2;
          if (v154 <= v152 + 1) {
            unint64_t v154 = v152 + 1;
          }
          if (v153 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v155 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v155 = v154;
          }
          if (v155)
          {
            unint64_t v156 = (char *)sub_5714((uint64_t)(v147 + 495), v155);
            uint64_t v149 = (char *)v147[494];
            unint64_t v151 = (char *)v147[493];
          }
          else
          {
            unint64_t v156 = 0;
          }
          unint64_t v166 = &v156[8 * v152];
          uint64_t v167 = &v156[8 * v155];
          *(void *)unint64_t v166 = v148;
          uint64_t v160 = v166 + 8;
          while (v149 != v151)
          {
            uint64_t v168 = *((void *)v149 - 1);
            v149 -= 8;
            *((void *)v166 - 1) = v168;
            v166 -= 8;
          }
LABEL_227:
          v147[493] = v166;
          v147[494] = v160;
          v147[495] = v167;
          if (v151) {
            operator delete(v151);
          }
          goto LABEL_229;
        }
        goto LABEL_232;
      }
    }
    *(void *)uint64_t v149 = v148;
    uint64_t v160 = v149 + 8;
LABEL_229:
    v147[494] = v160;
    goto LABEL_230;
  }
  int v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    uint64_t v17 = a1[2];
    uint64_t v18 = *(void **)a1[1];
    *(void *)(v18[476] - 8) += *(_WORD *)(v17 + 34) & 0x7FFF;
    *(void *)(v18[479] - 8) += *(_WORD *)(v17 + 32) & 0x7FFF;
    *(void *)(v18[482] - 8) += *(_WORD *)(v17 + 30) & 0x7FFF;
    *(void *)(v18[485] - 8) += *(_WORD *)(v17 + 28) & 0x7FFF;
    *(void *)(v18[488] - 8) += *(unsigned int *)(v17 + 24);
    *(void *)(v18[491] - 8) += *(unsigned __int16 *)(v17 + 36);
    *(void *)(v18[494] - 8) += *(unsigned int *)(v17 + 20);
  }
}

void sub_D6ADC(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    int v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      uint64_t v8 = (char *)v6[443];
      unint64_t v20 = v6[444];
      if ((unint64_t)v8 >= v20)
      {
        unint64_t v10 = (char *)v6[442];
        uint64_t v22 = (v8 - v10) >> 3;
        if ((unint64_t)(v22 + 1) >> 61) {
          goto LABEL_360;
        }
        unint64_t v23 = v20 - (void)v10;
        unint64_t v24 = (uint64_t)(v20 - (void)v10) >> 2;
        if (v24 <= v22 + 1) {
          unint64_t v24 = v22 + 1;
        }
        if (v23 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v25 = v24;
        }
        if (v25)
        {
          unint64_t v26 = (char *)sub_5714((uint64_t)(v6 + 444), v25);
          uint64_t v8 = (char *)v6[443];
          unint64_t v10 = (char *)v6[442];
        }
        else
        {
          unint64_t v26 = 0;
        }
        unint64_t v27 = &v26[8 * v22];
        uint64_t v28 = &v26[8 * v25];
        *(void *)unint64_t v27 = v7;
        uint64_t v21 = v27 + 8;
        while (v8 != v10)
        {
          uint64_t v30 = *((void *)v8 - 1);
          v8 -= 8;
          *((void *)v27 - 1) = v30;
          v27 -= 8;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1) {
        goto LABEL_38;
      }
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      uint64_t v8 = (char *)v6[443];
      unint64_t v9 = v6[444];
      if ((unint64_t)v8 >= v9)
      {
        unint64_t v10 = (char *)v6[442];
        uint64_t v11 = (v8 - v10) >> 3;
        if ((unint64_t)(v11 + 1) >> 61) {
          goto LABEL_360;
        }
        unint64_t v12 = v9 - (void)v10;
        unint64_t v13 = (uint64_t)(v9 - (void)v10) >> 2;
        if (v13 <= v11 + 1) {
          unint64_t v13 = v11 + 1;
        }
        if (v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14)
        {
          unint64_t v15 = (char *)sub_5714((uint64_t)(v6 + 444), v14);
          uint64_t v8 = (char *)v6[443];
          unint64_t v10 = (char *)v6[442];
        }
        else
        {
          unint64_t v15 = 0;
        }
        unint64_t v27 = &v15[8 * v11];
        uint64_t v28 = &v15[8 * v14];
        *(void *)unint64_t v27 = v7;
        uint64_t v21 = v27 + 8;
        while (v8 != v10)
        {
          uint64_t v29 = *((void *)v8 - 1);
          v8 -= 8;
          *((void *)v27 - 1) = v29;
          v27 -= 8;
        }
LABEL_35:
        v6[442] = v27;
        v6[443] = v21;
        v6[444] = v28;
        if (v10) {
          operator delete(v10);
        }
        goto LABEL_37;
      }
    }
    *(void *)uint64_t v8 = v7;
    uint64_t v21 = v8 + 8;
LABEL_37:
    v6[443] = v21;
LABEL_38:
    int v31 = 1 << *(_DWORD *)(v3 + 48);
    if (v31 == 2)
    {
      uint64_t v32 = *(void **)a1[1];
      uint64_t v33 = *(_WORD *)(a1[2] + 24) & 0x7FFF;
      unint64_t v34 = (char *)v32[446];
      unint64_t v42 = v32[447];
      if ((unint64_t)v34 >= v42)
      {
        uint64_t v36 = (char *)v32[445];
        uint64_t v44 = (v34 - v36) >> 3;
        if ((unint64_t)(v44 + 1) >> 61) {
          goto LABEL_360;
        }
        unint64_t v45 = v42 - (void)v36;
        unint64_t v46 = (uint64_t)(v42 - (void)v36) >> 2;
        if (v46 <= v44 + 1) {
          unint64_t v46 = v44 + 1;
        }
        if (v45 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v47 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v47 = v46;
        }
        if (v47)
        {
          unint64_t v48 = (char *)sub_5714((uint64_t)(v32 + 447), v47);
          unint64_t v34 = (char *)v32[446];
          uint64_t v36 = (char *)v32[445];
        }
        else
        {
          unint64_t v48 = 0;
        }
        unint64_t v49 = &v48[8 * v44];
        uint64_t v50 = &v48[8 * v47];
        *(void *)unint64_t v49 = v33;
        uint64_t v43 = v49 + 8;
        while (v34 != v36)
        {
          uint64_t v52 = *((void *)v34 - 1);
          v34 -= 8;
          *((void *)v49 - 1) = v52;
          v49 -= 8;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v31 != 1) {
        goto LABEL_70;
      }
      uint64_t v32 = *(void **)a1[1];
      uint64_t v33 = *(_WORD *)(a1[2] + 24) & 0x7FFF;
      unint64_t v34 = (char *)v32[446];
      unint64_t v35 = v32[447];
      if ((unint64_t)v34 >= v35)
      {
        uint64_t v36 = (char *)v32[445];
        uint64_t v37 = (v34 - v36) >> 3;
        if ((unint64_t)(v37 + 1) >> 61) {
          goto LABEL_360;
        }
        unint64_t v38 = v35 - (void)v36;
        unint64_t v39 = (uint64_t)(v35 - (void)v36) >> 2;
        if (v39 <= v37 + 1) {
          unint64_t v39 = v37 + 1;
        }
        if (v38 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v40 = v39;
        }
        if (v40)
        {
          unint64_t v41 = (char *)sub_5714((uint64_t)(v32 + 447), v40);
          unint64_t v34 = (char *)v32[446];
          uint64_t v36 = (char *)v32[445];
        }
        else
        {
          unint64_t v41 = 0;
        }
        unint64_t v49 = &v41[8 * v37];
        uint64_t v50 = &v41[8 * v40];
        *(void *)unint64_t v49 = v33;
        uint64_t v43 = v49 + 8;
        while (v34 != v36)
        {
          uint64_t v51 = *((void *)v34 - 1);
          v34 -= 8;
          *((void *)v49 - 1) = v51;
          v49 -= 8;
        }
LABEL_67:
        v32[445] = v49;
        v32[446] = v43;
        v32[447] = v50;
        if (v36) {
          operator delete(v36);
        }
        goto LABEL_69;
      }
    }
    *(void *)unint64_t v34 = v33;
    uint64_t v43 = v34 + 8;
LABEL_69:
    v32[446] = v43;
LABEL_70:
    int v53 = 1 << *(_DWORD *)(v3 + 48);
    if (v53 == 2)
    {
      uint64_t v65 = a1[1];
      int v55 = *(void **)v65;
      uint64_t v56 = *(unsigned __int8 *)(a1[2] + 46);
      uint64_t v57 = *(char **)(*(void *)v65 + 3592);
      unint64_t v66 = *(void *)(*(void *)v65 + 3600);
      if ((unint64_t)v57 >= v66)
      {
        unint64_t v59 = (char *)v55[448];
        uint64_t v68 = (v57 - v59) >> 3;
        if ((unint64_t)(v68 + 1) >> 61) {
          goto LABEL_360;
        }
        unint64_t v69 = v66 - (void)v59;
        unint64_t v70 = (uint64_t)(v66 - (void)v59) >> 2;
        if (v70 <= v68 + 1) {
          unint64_t v70 = v68 + 1;
        }
        if (v69 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v71 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v71 = v70;
        }
        if (v71)
        {
          uint64_t v72 = (char *)sub_5714((uint64_t)(v55 + 450), v71);
          uint64_t v57 = (char *)v55[449];
          unint64_t v59 = (char *)v55[448];
        }
        else
        {
          uint64_t v72 = 0;
        }
        uint64_t v73 = &v72[8 * v68];
        int v74 = &v72[8 * v71];
        *(void *)uint64_t v73 = v56;
        unint64_t v67 = v73 + 8;
        while (v57 != v59)
        {
          uint64_t v76 = *((void *)v57 - 1);
          v57 -= 8;
          *((void *)v73 - 1) = v76;
          v73 -= 8;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v53 != 1) {
        goto LABEL_102;
      }
      uint64_t v54 = a1[1];
      int v55 = *(void **)v54;
      uint64_t v56 = *(unsigned __int8 *)(a1[2] + 46);
      uint64_t v57 = *(char **)(*(void *)v54 + 3592);
      unint64_t v58 = *(void *)(*(void *)v54 + 3600);
      if ((unint64_t)v57 >= v58)
      {
        unint64_t v59 = (char *)v55[448];
        uint64_t v60 = (v57 - v59) >> 3;
        if ((unint64_t)(v60 + 1) >> 61) {
          goto LABEL_360;
        }
        unint64_t v61 = v58 - (void)v59;
        unint64_t v62 = (uint64_t)(v58 - (void)v59) >> 2;
        if (v62 <= v60 + 1) {
          unint64_t v62 = v60 + 1;
        }
        if (v61 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v63 = v62;
        }
        if (v63)
        {
          unint64_t v64 = (char *)sub_5714((uint64_t)(v55 + 450), v63);
          uint64_t v57 = (char *)v55[449];
          unint64_t v59 = (char *)v55[448];
        }
        else
        {
          unint64_t v64 = 0;
        }
        uint64_t v73 = &v64[8 * v60];
        int v74 = &v64[8 * v63];
        *(void *)uint64_t v73 = v56;
        unint64_t v67 = v73 + 8;
        while (v57 != v59)
        {
          uint64_t v75 = *((void *)v57 - 1);
          v57 -= 8;
          *((void *)v73 - 1) = v75;
          v73 -= 8;
        }
LABEL_99:
        v55[448] = v73;
        v55[449] = v67;
        v55[450] = v74;
        if (v59) {
          operator delete(v59);
        }
        goto LABEL_101;
      }
    }
    *(void *)uint64_t v57 = v56;
    unint64_t v67 = v57 + 8;
LABEL_101:
    v55[449] = v67;
LABEL_102:
    int v77 = 1 << *(_DWORD *)(v3 + 48);
    if (v77 == 2)
    {
      unint64_t v78 = *(void **)a1[1];
      uint64_t v79 = *(_DWORD *)(a1[2] + 32) & 0x3FFFFLL;
      uint64_t v80 = (uint64_t *)v78[452];
      unint64_t v88 = v78[453];
      if ((unint64_t)v80 >= v88)
      {
        unint64_t v82 = (uint64_t *)v78[451];
        uint64_t v90 = v80 - v82;
        if ((unint64_t)(v90 + 1) >> 61) {
          goto LABEL_360;
        }
        unint64_t v91 = v88 - (void)v82;
        unint64_t v92 = (uint64_t)(v88 - (void)v82) >> 2;
        if (v92 <= v90 + 1) {
          unint64_t v92 = v90 + 1;
        }
        if (v91 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v93 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v93 = v92;
        }
        if (v93)
        {
          uint64_t v94 = (char *)sub_5714((uint64_t)(v78 + 453), v93);
          uint64_t v80 = (uint64_t *)v78[452];
          unint64_t v82 = (uint64_t *)v78[451];
        }
        else
        {
          uint64_t v94 = 0;
        }
        uint64_t v95 = (uint64_t *)&v94[8 * v90];
        int v96 = &v94[8 * v93];
        *uint64_t v95 = v79;
        unint64_t v89 = v95 + 1;
        while (v80 != v82)
        {
          uint64_t v98 = *--v80;
          *--uint64_t v95 = v98;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v77 != 1) {
        goto LABEL_134;
      }
      unint64_t v78 = *(void **)a1[1];
      uint64_t v79 = *(_DWORD *)(a1[2] + 32) & 0x3FFFFLL;
      uint64_t v80 = (uint64_t *)v78[452];
      unint64_t v81 = v78[453];
      if ((unint64_t)v80 >= v81)
      {
        unint64_t v82 = (uint64_t *)v78[451];
        uint64_t v83 = v80 - v82;
        if ((unint64_t)(v83 + 1) >> 61) {
          goto LABEL_360;
        }
        unint64_t v84 = v81 - (void)v82;
        unint64_t v85 = (uint64_t)(v81 - (void)v82) >> 2;
        if (v85 <= v83 + 1) {
          unint64_t v85 = v83 + 1;
        }
        if (v84 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v86 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v86 = v85;
        }
        if (v86)
        {
          uint64_t v87 = (char *)sub_5714((uint64_t)(v78 + 453), v86);
          uint64_t v80 = (uint64_t *)v78[452];
          unint64_t v82 = (uint64_t *)v78[451];
        }
        else
        {
          uint64_t v87 = 0;
        }
        uint64_t v95 = (uint64_t *)&v87[8 * v83];
        int v96 = &v87[8 * v86];
        *uint64_t v95 = v79;
        unint64_t v89 = v95 + 1;
        while (v80 != v82)
        {
          uint64_t v97 = *--v80;
          *--uint64_t v95 = v97;
        }
LABEL_131:
        v78[451] = v95;
        v78[452] = v89;
        v78[453] = v96;
        if (v82) {
          operator delete(v82);
        }
        goto LABEL_133;
      }
    }
    *uint64_t v80 = v79;
    unint64_t v89 = v80 + 1;
LABEL_133:
    v78[452] = v89;
LABEL_134:
    int v99 = 1 << *(_DWORD *)(v3 + 48);
    if (v99 == 2)
    {
      unint64_t v100 = *(void **)a1[1];
      uint64_t v101 = *(_DWORD *)(a1[2] + 36) & 0x3FFFFLL;
      uint64_t v102 = (uint64_t *)v100[455];
      unint64_t v110 = v100[456];
      if ((unint64_t)v102 >= v110)
      {
        unint64_t v104 = (uint64_t *)v100[454];
        uint64_t v112 = v102 - v104;
        if ((unint64_t)(v112 + 1) >> 61) {
          goto LABEL_360;
        }
        unint64_t v113 = v110 - (void)v104;
        unint64_t v114 = (uint64_t)(v110 - (void)v104) >> 2;
        if (v114 <= v112 + 1) {
          unint64_t v114 = v112 + 1;
        }
        if (v113 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v115 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v115 = v114;
        }
        if (v115)
        {
          uint64_t v116 = (char *)sub_5714((uint64_t)(v100 + 456), v115);
          uint64_t v102 = (uint64_t *)v100[455];
          unint64_t v104 = (uint64_t *)v100[454];
        }
        else
        {
          uint64_t v116 = 0;
        }
        unint64_t v117 = (uint64_t *)&v116[8 * v112];
        uint64_t v118 = &v116[8 * v115];
        *unint64_t v117 = v101;
        uint64_t v111 = v117 + 1;
        while (v102 != v104)
        {
          uint64_t v120 = *--v102;
          *--unint64_t v117 = v120;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v99 != 1) {
        goto LABEL_166;
      }
      unint64_t v100 = *(void **)a1[1];
      uint64_t v101 = *(_DWORD *)(a1[2] + 36) & 0x3FFFFLL;
      uint64_t v102 = (uint64_t *)v100[455];
      unint64_t v103 = v100[456];
      if ((unint64_t)v102 >= v103)
      {
        unint64_t v104 = (uint64_t *)v100[454];
        uint64_t v105 = v102 - v104;
        if ((unint64_t)(v105 + 1) >> 61) {
          goto LABEL_360;
        }
        unint64_t v106 = v103 - (void)v104;
        unint64_t v107 = (uint64_t)(v103 - (void)v104) >> 2;
        if (v107 <= v105 + 1) {
          unint64_t v107 = v105 + 1;
        }
        if (v106 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v108 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v108 = v107;
        }
        if (v108)
        {
          unint64_t v109 = (char *)sub_5714((uint64_t)(v100 + 456), v108);
          uint64_t v102 = (uint64_t *)v100[455];
          unint64_t v104 = (uint64_t *)v100[454];
        }
        else
        {
          unint64_t v109 = 0;
        }
        unint64_t v117 = (uint64_t *)&v109[8 * v105];
        uint64_t v118 = &v109[8 * v108];
        *unint64_t v117 = v101;
        uint64_t v111 = v117 + 1;
        while (v102 != v104)
        {
          uint64_t v119 = *--v102;
          *--unint64_t v117 = v119;
        }
LABEL_163:
        v100[454] = v117;
        v100[455] = v111;
        v100[456] = v118;
        if (v104) {
          operator delete(v104);
        }
        goto LABEL_165;
      }
    }
    uint64_t *v102 = v101;
    uint64_t v111 = v102 + 1;
LABEL_165:
    v100[455] = v111;
LABEL_166:
    int v121 = 1 << *(_DWORD *)(v3 + 48);
    if (v121 == 2)
    {
      uint64_t v122 = *(void **)a1[1];
      uint64_t v123 = *(_WORD *)(a1[2] + 42) & 0x3FFF;
      uint64_t v124 = (char *)v122[458];
      unint64_t v132 = v122[459];
      if ((unint64_t)v124 >= v132)
      {
        unint64_t v126 = (char *)v122[457];
        uint64_t v134 = (v124 - v126) >> 3;
        if ((unint64_t)(v134 + 1) >> 61) {
          goto LABEL_360;
        }
        unint64_t v135 = v132 - (void)v126;
        unint64_t v136 = (uint64_t)(v132 - (void)v126) >> 2;
        if (v136 <= v134 + 1) {
          unint64_t v136 = v134 + 1;
        }
        if (v135 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v137 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v137 = v136;
        }
        if (v137)
        {
          unint64_t v138 = (char *)sub_5714((uint64_t)(v122 + 459), v137);
          uint64_t v124 = (char *)v122[458];
          unint64_t v126 = (char *)v122[457];
        }
        else
        {
          unint64_t v138 = 0;
        }
        unint64_t v139 = &v138[8 * v134];
        unint64_t v140 = &v138[8 * v137];
        *(void *)unint64_t v139 = v123;
        unint64_t v133 = v139 + 8;
        while (v124 != v126)
        {
          uint64_t v142 = *((void *)v124 - 1);
          v124 -= 8;
          *((void *)v139 - 1) = v142;
          v139 -= 8;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v121 != 1) {
        goto LABEL_198;
      }
      uint64_t v122 = *(void **)a1[1];
      uint64_t v123 = *(_WORD *)(a1[2] + 42) & 0x3FFF;
      uint64_t v124 = (char *)v122[458];
      unint64_t v125 = v122[459];
      if ((unint64_t)v124 >= v125)
      {
        unint64_t v126 = (char *)v122[457];
        uint64_t v127 = (v124 - v126) >> 3;
        if ((unint64_t)(v127 + 1) >> 61) {
          goto LABEL_360;
        }
        unint64_t v128 = v125 - (void)v126;
        unint64_t v129 = (uint64_t)(v125 - (void)v126) >> 2;
        if (v129 <= v127 + 1) {
          unint64_t v129 = v127 + 1;
        }
        if (v128 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v130 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v130 = v129;
        }
        if (v130)
        {
          uint64_t v131 = (char *)sub_5714((uint64_t)(v122 + 459), v130);
          uint64_t v124 = (char *)v122[458];
          unint64_t v126 = (char *)v122[457];
        }
        else
        {
          uint64_t v131 = 0;
        }
        unint64_t v139 = &v131[8 * v127];
        unint64_t v140 = &v131[8 * v130];
        *(void *)unint64_t v139 = v123;
        unint64_t v133 = v139 + 8;
        while (v124 != v126)
        {
          uint64_t v141 = *((void *)v124 - 1);
          v124 -= 8;
          *((void *)v139 - 1) = v141;
          v139 -= 8;
        }
LABEL_195:
        v122[457] = v139;
        v122[458] = v133;
        v122[459] = v140;
        if (v126) {
          operator delete(v126);
        }
        goto LABEL_197;
      }
    }
    *(void *)uint64_t v124 = v123;
    unint64_t v133 = v124 + 8;
LABEL_197:
    v122[458] = v133;
LABEL_198:
    int v143 = 1 << *(_DWORD *)(v3 + 48);
    if (v143 == 2)
    {
      int v144 = *(void **)a1[1];
      uint64_t v145 = *(_WORD *)(a1[2] + 44) & 0x1FFF;
      uint64_t v146 = (char *)v144[461];
      unint64_t v154 = v144[462];
      if ((unint64_t)v146 >= v154)
      {
        uint64_t v148 = (char *)v144[460];
        uint64_t v156 = (v146 - v148) >> 3;
        if ((unint64_t)(v156 + 1) >> 61) {
          goto LABEL_360;
        }
        unint64_t v157 = v154 - (void)v148;
        unint64_t v158 = (uint64_t)(v154 - (void)v148) >> 2;
        if (v158 <= v156 + 1) {
          unint64_t v158 = v156 + 1;
        }
        if (v157 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v159 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v159 = v158;
        }
        if (v159)
        {
          uint64_t v160 = (char *)sub_5714((uint64_t)(v144 + 462), v159);
          uint64_t v146 = (char *)v144[461];
          uint64_t v148 = (char *)v144[460];
        }
        else
        {
          uint64_t v160 = 0;
        }
        uint64_t v161 = &v160[8 * v156];
        unint64_t v162 = &v160[8 * v159];
        *(void *)uint64_t v161 = v145;
        unint64_t v155 = v161 + 8;
        while (v146 != v148)
        {
          uint64_t v164 = *((void *)v146 - 1);
          v146 -= 8;
          *((void *)v161 - 1) = v164;
          v161 -= 8;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v143 != 1) {
        goto LABEL_230;
      }
      int v144 = *(void **)a1[1];
      uint64_t v145 = *(_WORD *)(a1[2] + 44) & 0x1FFF;
      uint64_t v146 = (char *)v144[461];
      unint64_t v147 = v144[462];
      if ((unint64_t)v146 >= v147)
      {
        uint64_t v148 = (char *)v144[460];
        uint64_t v149 = (v146 - v148) >> 3;
        if ((unint64_t)(v149 + 1) >> 61) {
          goto LABEL_360;
        }
        unint64_t v150 = v147 - (void)v148;
        unint64_t v151 = (uint64_t)(v147 - (void)v148) >> 2;
        if (v151 <= v149 + 1) {
          unint64_t v151 = v149 + 1;
        }
        if (v150 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v152 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v152 = v151;
        }
        if (v152)
        {
          unint64_t v153 = (char *)sub_5714((uint64_t)(v144 + 462), v152);
          uint64_t v146 = (char *)v144[461];
          uint64_t v148 = (char *)v144[460];
        }
        else
        {
          unint64_t v153 = 0;
        }
        uint64_t v161 = &v153[8 * v149];
        unint64_t v162 = &v153[8 * v152];
        *(void *)uint64_t v161 = v145;
        unint64_t v155 = v161 + 8;
        while (v146 != v148)
        {
          uint64_t v163 = *((void *)v146 - 1);
          v146 -= 8;
          *((void *)v161 - 1) = v163;
          v161 -= 8;
        }
LABEL_227:
        v144[460] = v161;
        v144[461] = v155;
        v144[462] = v162;
        if (v148) {
          operator delete(v148);
        }
        goto LABEL_229;
      }
    }
    *(void *)uint64_t v146 = v145;
    unint64_t v155 = v146 + 8;
LABEL_229:
    v144[461] = v155;
LABEL_230:
    int v165 = 1 << *(_DWORD *)(v3 + 48);
    if (v165 == 2)
    {
      unint64_t v166 = *(void **)a1[1];
      uint64_t v167 = *(_WORD *)(a1[2] + 40) & 0x7FFF;
      uint64_t v168 = (char *)v166[464];
      unint64_t v176 = v166[465];
      if ((unint64_t)v168 >= v176)
      {
        unint64_t v170 = (char *)v166[463];
        uint64_t v178 = (v168 - v170) >> 3;
        if ((unint64_t)(v178 + 1) >> 61) {
          goto LABEL_360;
        }
        unint64_t v179 = v176 - (void)v170;
        unint64_t v180 = (uint64_t)(v176 - (void)v170) >> 2;
        if (v180 <= v178 + 1) {
          unint64_t v180 = v178 + 1;
        }
        if (v179 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v181 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v181 = v180;
        }
        if (v181)
        {
          uint64_t v182 = (char *)sub_5714((uint64_t)(v166 + 465), v181);
          uint64_t v168 = (char *)v166[464];
          unint64_t v170 = (char *)v166[463];
        }
        else
        {
          uint64_t v182 = 0;
        }
        unint64_t v183 = &v182[8 * v178];
        unint64_t v184 = &v182[8 * v181];
        *(void *)unint64_t v183 = v167;
        unint64_t v177 = v183 + 8;
        while (v168 != v170)
        {
          uint64_t v186 = *((void *)v168 - 1);
          v168 -= 8;
          *((void *)v183 - 1) = v186;
          v183 -= 8;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v165 != 1) {
        goto LABEL_262;
      }
      unint64_t v166 = *(void **)a1[1];
      uint64_t v167 = *(_WORD *)(a1[2] + 40) & 0x7FFF;
      uint64_t v168 = (char *)v166[464];
      unint64_t v169 = v166[465];
      if ((unint64_t)v168 >= v169)
      {
        unint64_t v170 = (char *)v166[463];
        uint64_t v171 = (v168 - v170) >> 3;
        if ((unint64_t)(v171 + 1) >> 61) {
          goto LABEL_360;
        }
        unint64_t v172 = v169 - (void)v170;
        unint64_t v173 = (uint64_t)(v169 - (void)v170) >> 2;
        if (v173 <= v171 + 1) {
          unint64_t v173 = v171 + 1;
        }
        if (v172 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v174 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v174 = v173;
        }
        if (v174)
        {
          uint64_t v175 = (char *)sub_5714((uint64_t)(v166 + 465), v174);
          uint64_t v168 = (char *)v166[464];
          unint64_t v170 = (char *)v166[463];
        }
        else
        {
          uint64_t v175 = 0;
        }
        unint64_t v183 = &v175[8 * v171];
        unint64_t v184 = &v175[8 * v174];
        *(void *)unint64_t v183 = v167;
        unint64_t v177 = v183 + 8;
        while (v168 != v170)
        {
          uint64_t v185 = *((void *)v168 - 1);
          v168 -= 8;
          *((void *)v183 - 1) = v185;
          v183 -= 8;
        }
LABEL_259:
        v166[463] = v183;
        v166[464] = v177;
        v166[465] = v184;
        if (v170) {
          operator delete(v170);
        }
        goto LABEL_261;
      }
    }
    *(void *)uint64_t v168 = v167;
    unint64_t v177 = v168 + 8;
LABEL_261:
    v166[464] = v177;
LABEL_262:
    int v187 = 1 << *(_DWORD *)(v3 + 48);
    if (v187 == 2)
    {
      unint64_t v188 = *(void **)a1[1];
      uint64_t v189 = *(_WORD *)(a1[2] + 22) & 0x7FFF;
      uint64_t v190 = (char *)v188[467];
      unint64_t v198 = v188[468];
      if ((unint64_t)v190 >= v198)
      {
        unint64_t v192 = (char *)v188[466];
        uint64_t v200 = (v190 - v192) >> 3;
        if ((unint64_t)(v200 + 1) >> 61) {
          goto LABEL_360;
        }
        unint64_t v201 = v198 - (void)v192;
        unint64_t v202 = (uint64_t)(v198 - (void)v192) >> 2;
        if (v202 <= v200 + 1) {
          unint64_t v202 = v200 + 1;
        }
        if (v201 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v203 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v203 = v202;
        }
        if (v203)
        {
          uint64_t v204 = (char *)sub_5714((uint64_t)(v188 + 468), v203);
          uint64_t v190 = (char *)v188[467];
          unint64_t v192 = (char *)v188[466];
        }
        else
        {
          uint64_t v204 = 0;
        }
        unint64_t v205 = &v204[8 * v200];
        unint64_t v206 = &v204[8 * v203];
        *(void *)unint64_t v205 = v189;
        unint64_t v199 = v205 + 8;
        while (v190 != v192)
        {
          uint64_t v208 = *((void *)v190 - 1);
          v190 -= 8;
          *((void *)v205 - 1) = v208;
          v205 -= 8;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v187 != 1) {
        goto LABEL_294;
      }
      unint64_t v188 = *(void **)a1[1];
      uint64_t v189 = *(_WORD *)(a1[2] + 22) & 0x7FFF;
      uint64_t v190 = (char *)v188[467];
      unint64_t v191 = v188[468];
      if ((unint64_t)v190 >= v191)
      {
        unint64_t v192 = (char *)v188[466];
        uint64_t v193 = (v190 - v192) >> 3;
        if ((unint64_t)(v193 + 1) >> 61) {
          goto LABEL_360;
        }
        unint64_t v194 = v191 - (void)v192;
        unint64_t v195 = (uint64_t)(v191 - (void)v192) >> 2;
        if (v195 <= v193 + 1) {
          unint64_t v195 = v193 + 1;
        }
        if (v194 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v196 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v196 = v195;
        }
        if (v196)
        {
          uint64_t v197 = (char *)sub_5714((uint64_t)(v188 + 468), v196);
          uint64_t v190 = (char *)v188[467];
          unint64_t v192 = (char *)v188[466];
        }
        else
        {
          uint64_t v197 = 0;
        }
        unint64_t v205 = &v197[8 * v193];
        unint64_t v206 = &v197[8 * v196];
        *(void *)unint64_t v205 = v189;
        unint64_t v199 = v205 + 8;
        while (v190 != v192)
        {
          uint64_t v207 = *((void *)v190 - 1);
          v190 -= 8;
          *((void *)v205 - 1) = v207;
          v205 -= 8;
        }
LABEL_291:
        v188[466] = v205;
        v188[467] = v199;
        v188[468] = v206;
        if (v192) {
          operator delete(v192);
        }
        goto LABEL_293;
      }
    }
    *(void *)uint64_t v190 = v189;
    unint64_t v199 = v190 + 8;
LABEL_293:
    v188[467] = v199;
LABEL_294:
    int v209 = 1 << *(_DWORD *)(v3 + 48);
    if (v209 == 2)
    {
      uint64_t v210 = *(void **)a1[1];
      uint64_t v211 = *(_DWORD *)(a1[2] + 28) & 0x1FFFFLL;
      uint64_t v212 = (uint64_t *)v210[470];
      unint64_t v220 = v210[471];
      if ((unint64_t)v212 >= v220)
      {
        unint64_t v214 = (uint64_t *)v210[469];
        uint64_t v222 = v212 - v214;
        if ((unint64_t)(v222 + 1) >> 61) {
          goto LABEL_360;
        }
        unint64_t v223 = v220 - (void)v214;
        unint64_t v224 = (uint64_t)(v220 - (void)v214) >> 2;
        if (v224 <= v222 + 1) {
          unint64_t v224 = v222 + 1;
        }
        if (v223 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v225 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v225 = v224;
        }
        if (v225)
        {
          uint64_t v226 = (char *)sub_5714((uint64_t)(v210 + 471), v225);
          uint64_t v212 = (uint64_t *)v210[470];
          unint64_t v214 = (uint64_t *)v210[469];
        }
        else
        {
          uint64_t v226 = 0;
        }
        unint64_t v227 = (uint64_t *)&v226[8 * v222];
        unint64_t v228 = &v226[8 * v225];
        uint64_t *v227 = v211;
        unint64_t v221 = v227 + 1;
        while (v212 != v214)
        {
          uint64_t v230 = *--v212;
          *--unint64_t v227 = v230;
        }
        goto LABEL_323;
      }
    }
    else
    {
      if (v209 != 1) {
        goto LABEL_326;
      }
      uint64_t v210 = *(void **)a1[1];
      uint64_t v211 = *(_DWORD *)(a1[2] + 28) & 0x1FFFFLL;
      uint64_t v212 = (uint64_t *)v210[470];
      unint64_t v213 = v210[471];
      if ((unint64_t)v212 >= v213)
      {
        unint64_t v214 = (uint64_t *)v210[469];
        uint64_t v215 = v212 - v214;
        if ((unint64_t)(v215 + 1) >> 61) {
          goto LABEL_360;
        }
        unint64_t v216 = v213 - (void)v214;
        unint64_t v217 = (uint64_t)(v213 - (void)v214) >> 2;
        if (v217 <= v215 + 1) {
          unint64_t v217 = v215 + 1;
        }
        if (v216 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v218 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v218 = v217;
        }
        if (v218)
        {
          uint64_t v219 = (char *)sub_5714((uint64_t)(v210 + 471), v218);
          uint64_t v212 = (uint64_t *)v210[470];
          unint64_t v214 = (uint64_t *)v210[469];
        }
        else
        {
          uint64_t v219 = 0;
        }
        unint64_t v227 = (uint64_t *)&v219[8 * v215];
        unint64_t v228 = &v219[8 * v218];
        uint64_t *v227 = v211;
        unint64_t v221 = v227 + 1;
        while (v212 != v214)
        {
          uint64_t v229 = *--v212;
          *--unint64_t v227 = v229;
        }
LABEL_323:
        v210[469] = v227;
        v210[470] = v221;
        v210[471] = v228;
        if (v214) {
          operator delete(v214);
        }
        goto LABEL_325;
      }
    }
    *uint64_t v212 = v211;
    unint64_t v221 = v212 + 1;
LABEL_325:
    v210[470] = v221;
LABEL_326:
    int v231 = 1 << *(_DWORD *)(v3 + 48);
    if (v231 == 2)
    {
      uint64_t v243 = a1[2];
      uint64_t v233 = *(void **)a1[1];
      uint64_t v234 = *(_WORD *)(v243 + 20) & 0x7FFF;
      int v235 = (char *)v233[473];
      unint64_t v244 = v233[474];
      if ((unint64_t)v235 >= v244)
      {
        uint64_t v237 = (char *)v233[472];
        uint64_t v246 = (v235 - v237) >> 3;
        if (!((unint64_t)(v246 + 1) >> 61))
        {
          unint64_t v247 = v244 - (void)v237;
          unint64_t v248 = (uint64_t)(v244 - (void)v237) >> 2;
          if (v248 <= v246 + 1) {
            unint64_t v248 = v246 + 1;
          }
          if (v247 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v249 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v249 = v248;
          }
          if (v249)
          {
            unint64_t v250 = (char *)sub_5714((uint64_t)(v233 + 474), v249);
            int v235 = (char *)v233[473];
            uint64_t v237 = (char *)v233[472];
          }
          else
          {
            unint64_t v250 = 0;
          }
          unint64_t v251 = &v250[8 * v246];
          uint64_t v252 = &v250[8 * v249];
          *(void *)unint64_t v251 = v234;
          unint64_t v245 = v251 + 8;
          while (v235 != v237)
          {
            uint64_t v254 = *((void *)v235 - 1);
            v235 -= 8;
            *((void *)v251 - 1) = v254;
            v251 -= 8;
          }
          goto LABEL_355;
        }
LABEL_360:
        sub_566C();
      }
    }
    else
    {
      if (v231 != 1)
      {
LABEL_358:
        *a2 = 1;
        return;
      }
      uint64_t v232 = a1[2];
      uint64_t v233 = *(void **)a1[1];
      uint64_t v234 = *(_WORD *)(v232 + 20) & 0x7FFF;
      int v235 = (char *)v233[473];
      unint64_t v236 = v233[474];
      if ((unint64_t)v235 >= v236)
      {
        uint64_t v237 = (char *)v233[472];
        uint64_t v238 = (v235 - v237) >> 3;
        if (!((unint64_t)(v238 + 1) >> 61))
        {
          unint64_t v239 = v236 - (void)v237;
          unint64_t v240 = (uint64_t)(v236 - (void)v237) >> 2;
          if (v240 <= v238 + 1) {
            unint64_t v240 = v238 + 1;
          }
          if (v239 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v241 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v241 = v240;
          }
          if (v241)
          {
            unint64_t v242 = (char *)sub_5714((uint64_t)(v233 + 474), v241);
            int v235 = (char *)v233[473];
            uint64_t v237 = (char *)v233[472];
          }
          else
          {
            unint64_t v242 = 0;
          }
          unint64_t v251 = &v242[8 * v238];
          uint64_t v252 = &v242[8 * v241];
          *(void *)unint64_t v251 = v234;
          unint64_t v245 = v251 + 8;
          while (v235 != v237)
          {
            uint64_t v253 = *((void *)v235 - 1);
            v235 -= 8;
            *((void *)v251 - 1) = v253;
            v251 -= 8;
          }
LABEL_355:
          v233[472] = v251;
          v233[473] = v245;
          v233[474] = v252;
          if (v237) {
            operator delete(v237);
          }
          goto LABEL_357;
        }
        goto LABEL_360;
      }
    }
    *(void *)int v235 = v234;
    unint64_t v245 = v235 + 8;
LABEL_357:
    v233[473] = v245;
    goto LABEL_358;
  }
  int v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    uint64_t v18 = a1[1];
    uint64_t v17 = a1[2];
    unint64_t v19 = *(void **)v18;
    *(void *)(v19[443] - 8) += *(_WORD *)(v17 + 26) & 0x7FFF;
    *(void *)(v19[446] - 8) += *(_WORD *)(v17 + 24) & 0x7FFF;
    *(void *)(v19[449] - 8) += *(unsigned __int8 *)(v17 + 46);
    *(void *)(v19[452] - 8) += *(_DWORD *)(v17 + 32) & 0x3FFFF;
    *(void *)(v19[455] - 8) += *(_DWORD *)(v17 + 36) & 0x3FFFF;
    *(void *)(v19[458] - 8) += *(_WORD *)(v17 + 42) & 0x3FFF;
    *(void *)(v19[461] - 8) += *(_WORD *)(v17 + 44) & 0x1FFF;
    *(void *)(v19[464] - 8) += *(_WORD *)(v17 + 40) & 0x7FFF;
    *(void *)(v19[467] - 8) += *(_WORD *)(v17 + 22) & 0x7FFF;
    *(void *)(v19[470] - 8) += *(_DWORD *)(v17 + 28) & 0x1FFFF;
    *(void *)(*(void *)(*(void *)v18 + 3784) - 8) += *(_WORD *)(a1[2] + 20) & 0x7FFF;
  }
}

void sub_D7CE4(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    int v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_WORD *)(a1[2] + 20) & 0x7FFF;
      uint64_t v8 = (char *)v6[692];
      unint64_t v22 = v6[693];
      if ((unint64_t)v8 >= v22)
      {
        unint64_t v10 = (char *)v6[691];
        uint64_t v24 = (v8 - v10) >> 3;
        if ((unint64_t)(v24 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v25 = v22 - (void)v10;
        unint64_t v26 = (uint64_t)(v22 - (void)v10) >> 2;
        if (v26 <= v24 + 1) {
          unint64_t v26 = v24 + 1;
        }
        if (v25 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v26;
        }
        if (v27)
        {
          uint64_t v28 = (char *)sub_5714((uint64_t)(v6 + 693), v27);
          uint64_t v8 = (char *)v6[692];
          unint64_t v10 = (char *)v6[691];
        }
        else
        {
          uint64_t v28 = 0;
        }
        uint64_t v29 = &v28[8 * v24];
        uint64_t v30 = &v28[8 * v27];
        *(void *)uint64_t v29 = v7;
        unint64_t v23 = v29 + 8;
        while (v8 != v10)
        {
          uint64_t v32 = *((void *)v8 - 1);
          v8 -= 8;
          *((void *)v29 - 1) = v32;
          v29 -= 8;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1) {
        goto LABEL_38;
      }
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_WORD *)(a1[2] + 20) & 0x7FFF;
      uint64_t v8 = (char *)v6[692];
      unint64_t v9 = v6[693];
      if ((unint64_t)v8 >= v9)
      {
        unint64_t v10 = (char *)v6[691];
        uint64_t v11 = (v8 - v10) >> 3;
        if ((unint64_t)(v11 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v12 = v9 - (void)v10;
        unint64_t v13 = (uint64_t)(v9 - (void)v10) >> 2;
        if (v13 <= v11 + 1) {
          unint64_t v13 = v11 + 1;
        }
        if (v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14)
        {
          unint64_t v15 = (char *)sub_5714((uint64_t)(v6 + 693), v14);
          uint64_t v8 = (char *)v6[692];
          unint64_t v10 = (char *)v6[691];
        }
        else
        {
          unint64_t v15 = 0;
        }
        uint64_t v29 = &v15[8 * v11];
        uint64_t v30 = &v15[8 * v14];
        *(void *)uint64_t v29 = v7;
        unint64_t v23 = v29 + 8;
        while (v8 != v10)
        {
          uint64_t v31 = *((void *)v8 - 1);
          v8 -= 8;
          *((void *)v29 - 1) = v31;
          v29 -= 8;
        }
LABEL_35:
        v6[691] = v29;
        v6[692] = v23;
        v6[693] = v30;
        if (v10) {
          operator delete(v10);
        }
        goto LABEL_37;
      }
    }
    *(void *)uint64_t v8 = v7;
    unint64_t v23 = v8 + 8;
LABEL_37:
    v6[692] = v23;
LABEL_38:
    int v33 = 1 << *(_DWORD *)(v3 + 48);
    if (v33 == 2)
    {
      unint64_t v34 = *(void **)a1[1];
      uint64_t v35 = *(_WORD *)(a1[2] + 22) & 0x7FFF;
      uint64_t v36 = (char *)v34[695];
      unint64_t v44 = v34[696];
      if ((unint64_t)v36 >= v44)
      {
        unint64_t v38 = (char *)v34[694];
        uint64_t v46 = (v36 - v38) >> 3;
        if ((unint64_t)(v46 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v47 = v44 - (void)v38;
        unint64_t v48 = (uint64_t)(v44 - (void)v38) >> 2;
        if (v48 <= v46 + 1) {
          unint64_t v48 = v46 + 1;
        }
        if (v47 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v49 = v48;
        }
        if (v49)
        {
          uint64_t v50 = (char *)sub_5714((uint64_t)(v34 + 696), v49);
          uint64_t v36 = (char *)v34[695];
          unint64_t v38 = (char *)v34[694];
        }
        else
        {
          uint64_t v50 = 0;
        }
        uint64_t v51 = &v50[8 * v46];
        uint64_t v52 = &v50[8 * v49];
        *(void *)uint64_t v51 = v35;
        unint64_t v45 = v51 + 8;
        while (v36 != v38)
        {
          uint64_t v54 = *((void *)v36 - 1);
          v36 -= 8;
          *((void *)v51 - 1) = v54;
          v51 -= 8;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v33 != 1) {
        goto LABEL_70;
      }
      unint64_t v34 = *(void **)a1[1];
      uint64_t v35 = *(_WORD *)(a1[2] + 22) & 0x7FFF;
      uint64_t v36 = (char *)v34[695];
      unint64_t v37 = v34[696];
      if ((unint64_t)v36 >= v37)
      {
        unint64_t v38 = (char *)v34[694];
        uint64_t v39 = (v36 - v38) >> 3;
        if ((unint64_t)(v39 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v40 = v37 - (void)v38;
        unint64_t v41 = (uint64_t)(v37 - (void)v38) >> 2;
        if (v41 <= v39 + 1) {
          unint64_t v41 = v39 + 1;
        }
        if (v40 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v42 = v41;
        }
        if (v42)
        {
          uint64_t v43 = (char *)sub_5714((uint64_t)(v34 + 696), v42);
          uint64_t v36 = (char *)v34[695];
          unint64_t v38 = (char *)v34[694];
        }
        else
        {
          uint64_t v43 = 0;
        }
        uint64_t v51 = &v43[8 * v39];
        uint64_t v52 = &v43[8 * v42];
        *(void *)uint64_t v51 = v35;
        unint64_t v45 = v51 + 8;
        while (v36 != v38)
        {
          uint64_t v53 = *((void *)v36 - 1);
          v36 -= 8;
          *((void *)v51 - 1) = v53;
          v51 -= 8;
        }
LABEL_67:
        v34[694] = v51;
        v34[695] = v45;
        v34[696] = v52;
        if (v38) {
          operator delete(v38);
        }
        goto LABEL_69;
      }
    }
    *(void *)uint64_t v36 = v35;
    unint64_t v45 = v36 + 8;
LABEL_69:
    v34[695] = v45;
LABEL_70:
    int v55 = 1 << *(_DWORD *)(v3 + 48);
    if (v55 == 2)
    {
      uint64_t v56 = *(void **)a1[1];
      unint64_t v57 = (unint64_t)*(unsigned int *)(a1[2] + 56) >> 17;
      unint64_t v58 = (unint64_t *)v56[698];
      unint64_t v66 = v56[699];
      if ((unint64_t)v58 >= v66)
      {
        uint64_t v60 = (unint64_t *)v56[697];
        uint64_t v68 = v58 - v60;
        if ((unint64_t)(v68 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v69 = v66 - (void)v60;
        unint64_t v70 = (uint64_t)(v66 - (void)v60) >> 2;
        if (v70 <= v68 + 1) {
          unint64_t v70 = v68 + 1;
        }
        if (v69 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v71 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v71 = v70;
        }
        if (v71)
        {
          uint64_t v72 = (char *)sub_5714((uint64_t)(v56 + 699), v71);
          unint64_t v58 = (unint64_t *)v56[698];
          uint64_t v60 = (unint64_t *)v56[697];
        }
        else
        {
          uint64_t v72 = 0;
        }
        uint64_t v73 = (unint64_t *)&v72[8 * v68];
        int v74 = &v72[8 * v71];
        *uint64_t v73 = v57;
        unint64_t v67 = v73 + 1;
        while (v58 != v60)
        {
          unint64_t v76 = *--v58;
          *--uint64_t v73 = v76;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v55 != 1) {
        goto LABEL_102;
      }
      uint64_t v56 = *(void **)a1[1];
      unint64_t v57 = (unint64_t)*(unsigned int *)(a1[2] + 56) >> 17;
      unint64_t v58 = (unint64_t *)v56[698];
      unint64_t v59 = v56[699];
      if ((unint64_t)v58 >= v59)
      {
        uint64_t v60 = (unint64_t *)v56[697];
        uint64_t v61 = v58 - v60;
        if ((unint64_t)(v61 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v62 = v59 - (void)v60;
        unint64_t v63 = (uint64_t)(v59 - (void)v60) >> 2;
        if (v63 <= v61 + 1) {
          unint64_t v63 = v61 + 1;
        }
        if (v62 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v64 = v63;
        }
        if (v64)
        {
          uint64_t v65 = (char *)sub_5714((uint64_t)(v56 + 699), v64);
          unint64_t v58 = (unint64_t *)v56[698];
          uint64_t v60 = (unint64_t *)v56[697];
        }
        else
        {
          uint64_t v65 = 0;
        }
        uint64_t v73 = (unint64_t *)&v65[8 * v61];
        int v74 = &v65[8 * v64];
        *uint64_t v73 = v57;
        unint64_t v67 = v73 + 1;
        while (v58 != v60)
        {
          unint64_t v75 = *--v58;
          *--uint64_t v73 = v75;
        }
LABEL_99:
        v56[697] = v73;
        v56[698] = v67;
        v56[699] = v74;
        if (v60) {
          operator delete(v60);
        }
        goto LABEL_101;
      }
    }
    *unint64_t v58 = v57;
    unint64_t v67 = v58 + 1;
LABEL_101:
    v56[698] = v67;
LABEL_102:
    int v77 = 1 << *(_DWORD *)(v3 + 48);
    if (v77 == 2)
    {
      unint64_t v78 = *(void **)a1[1];
      uint64_t v79 = *(_DWORD *)(a1[2] + 36) & 0x1FFFFLL;
      uint64_t v80 = (uint64_t *)v78[701];
      unint64_t v88 = v78[702];
      if ((unint64_t)v80 >= v88)
      {
        unint64_t v82 = (uint64_t *)v78[700];
        uint64_t v90 = v80 - v82;
        if ((unint64_t)(v90 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v91 = v88 - (void)v82;
        unint64_t v92 = (uint64_t)(v88 - (void)v82) >> 2;
        if (v92 <= v90 + 1) {
          unint64_t v92 = v90 + 1;
        }
        if (v91 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v93 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v93 = v92;
        }
        if (v93)
        {
          uint64_t v94 = (char *)sub_5714((uint64_t)(v78 + 702), v93);
          uint64_t v80 = (uint64_t *)v78[701];
          unint64_t v82 = (uint64_t *)v78[700];
        }
        else
        {
          uint64_t v94 = 0;
        }
        uint64_t v95 = (uint64_t *)&v94[8 * v90];
        int v96 = &v94[8 * v93];
        *uint64_t v95 = v79;
        unint64_t v89 = v95 + 1;
        while (v80 != v82)
        {
          uint64_t v98 = *--v80;
          *--uint64_t v95 = v98;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v77 != 1) {
        goto LABEL_134;
      }
      unint64_t v78 = *(void **)a1[1];
      uint64_t v79 = *(_DWORD *)(a1[2] + 36) & 0x1FFFFLL;
      uint64_t v80 = (uint64_t *)v78[701];
      unint64_t v81 = v78[702];
      if ((unint64_t)v80 >= v81)
      {
        unint64_t v82 = (uint64_t *)v78[700];
        uint64_t v83 = v80 - v82;
        if ((unint64_t)(v83 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v84 = v81 - (void)v82;
        unint64_t v85 = (uint64_t)(v81 - (void)v82) >> 2;
        if (v85 <= v83 + 1) {
          unint64_t v85 = v83 + 1;
        }
        if (v84 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v86 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v86 = v85;
        }
        if (v86)
        {
          uint64_t v87 = (char *)sub_5714((uint64_t)(v78 + 702), v86);
          uint64_t v80 = (uint64_t *)v78[701];
          unint64_t v82 = (uint64_t *)v78[700];
        }
        else
        {
          uint64_t v87 = 0;
        }
        uint64_t v95 = (uint64_t *)&v87[8 * v83];
        int v96 = &v87[8 * v86];
        *uint64_t v95 = v79;
        unint64_t v89 = v95 + 1;
        while (v80 != v82)
        {
          uint64_t v97 = *--v80;
          *--uint64_t v95 = v97;
        }
LABEL_131:
        v78[700] = v95;
        v78[701] = v89;
        v78[702] = v96;
        if (v82) {
          operator delete(v82);
        }
        goto LABEL_133;
      }
    }
    *uint64_t v80 = v79;
    unint64_t v89 = v80 + 1;
LABEL_133:
    v78[701] = v89;
LABEL_134:
    int v99 = 1 << *(_DWORD *)(v3 + 48);
    if (v99 == 2)
    {
      unint64_t v100 = *(void **)a1[1];
      uint64_t v101 = *(_DWORD *)(a1[2] + 32) & 0x3FFFFLL;
      uint64_t v102 = (uint64_t *)v100[704];
      unint64_t v110 = v100[705];
      if ((unint64_t)v102 >= v110)
      {
        unint64_t v104 = (uint64_t *)v100[703];
        uint64_t v112 = v102 - v104;
        if ((unint64_t)(v112 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v113 = v110 - (void)v104;
        unint64_t v114 = (uint64_t)(v110 - (void)v104) >> 2;
        if (v114 <= v112 + 1) {
          unint64_t v114 = v112 + 1;
        }
        if (v113 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v115 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v115 = v114;
        }
        if (v115)
        {
          uint64_t v116 = (char *)sub_5714((uint64_t)(v100 + 705), v115);
          uint64_t v102 = (uint64_t *)v100[704];
          unint64_t v104 = (uint64_t *)v100[703];
        }
        else
        {
          uint64_t v116 = 0;
        }
        unint64_t v117 = (uint64_t *)&v116[8 * v112];
        uint64_t v118 = &v116[8 * v115];
        *unint64_t v117 = v101;
        uint64_t v111 = v117 + 1;
        while (v102 != v104)
        {
          uint64_t v120 = *--v102;
          *--unint64_t v117 = v120;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v99 != 1) {
        goto LABEL_166;
      }
      unint64_t v100 = *(void **)a1[1];
      uint64_t v101 = *(_DWORD *)(a1[2] + 32) & 0x3FFFFLL;
      uint64_t v102 = (uint64_t *)v100[704];
      unint64_t v103 = v100[705];
      if ((unint64_t)v102 >= v103)
      {
        unint64_t v104 = (uint64_t *)v100[703];
        uint64_t v105 = v102 - v104;
        if ((unint64_t)(v105 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v106 = v103 - (void)v104;
        unint64_t v107 = (uint64_t)(v103 - (void)v104) >> 2;
        if (v107 <= v105 + 1) {
          unint64_t v107 = v105 + 1;
        }
        if (v106 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v108 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v108 = v107;
        }
        if (v108)
        {
          unint64_t v109 = (char *)sub_5714((uint64_t)(v100 + 705), v108);
          uint64_t v102 = (uint64_t *)v100[704];
          unint64_t v104 = (uint64_t *)v100[703];
        }
        else
        {
          unint64_t v109 = 0;
        }
        unint64_t v117 = (uint64_t *)&v109[8 * v105];
        uint64_t v118 = &v109[8 * v108];
        *unint64_t v117 = v101;
        uint64_t v111 = v117 + 1;
        while (v102 != v104)
        {
          uint64_t v119 = *--v102;
          *--unint64_t v117 = v119;
        }
LABEL_163:
        v100[703] = v117;
        v100[704] = v111;
        v100[705] = v118;
        if (v104) {
          operator delete(v104);
        }
        goto LABEL_165;
      }
    }
    uint64_t *v102 = v101;
    uint64_t v111 = v102 + 1;
LABEL_165:
    v100[704] = v111;
LABEL_166:
    int v121 = 1 << *(_DWORD *)(v3 + 48);
    if (v121 == 2)
    {
      uint64_t v122 = *(void **)a1[1];
      uint64_t v123 = *(_DWORD *)(a1[2] + 28) & 0x3FFFFLL;
      uint64_t v124 = (uint64_t *)v122[707];
      unint64_t v132 = v122[708];
      if ((unint64_t)v124 >= v132)
      {
        unint64_t v126 = (uint64_t *)v122[706];
        uint64_t v134 = v124 - v126;
        if ((unint64_t)(v134 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v135 = v132 - (void)v126;
        unint64_t v136 = (uint64_t)(v132 - (void)v126) >> 2;
        if (v136 <= v134 + 1) {
          unint64_t v136 = v134 + 1;
        }
        if (v135 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v137 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v137 = v136;
        }
        if (v137)
        {
          unint64_t v138 = (char *)sub_5714((uint64_t)(v122 + 708), v137);
          uint64_t v124 = (uint64_t *)v122[707];
          unint64_t v126 = (uint64_t *)v122[706];
        }
        else
        {
          unint64_t v138 = 0;
        }
        unint64_t v139 = (uint64_t *)&v138[8 * v134];
        unint64_t v140 = &v138[8 * v137];
        *unint64_t v139 = v123;
        unint64_t v133 = v139 + 1;
        while (v124 != v126)
        {
          uint64_t v142 = *--v124;
          *--unint64_t v139 = v142;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v121 != 1) {
        goto LABEL_198;
      }
      uint64_t v122 = *(void **)a1[1];
      uint64_t v123 = *(_DWORD *)(a1[2] + 28) & 0x3FFFFLL;
      uint64_t v124 = (uint64_t *)v122[707];
      unint64_t v125 = v122[708];
      if ((unint64_t)v124 >= v125)
      {
        unint64_t v126 = (uint64_t *)v122[706];
        uint64_t v127 = v124 - v126;
        if ((unint64_t)(v127 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v128 = v125 - (void)v126;
        unint64_t v129 = (uint64_t)(v125 - (void)v126) >> 2;
        if (v129 <= v127 + 1) {
          unint64_t v129 = v127 + 1;
        }
        if (v128 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v130 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v130 = v129;
        }
        if (v130)
        {
          uint64_t v131 = (char *)sub_5714((uint64_t)(v122 + 708), v130);
          uint64_t v124 = (uint64_t *)v122[707];
          unint64_t v126 = (uint64_t *)v122[706];
        }
        else
        {
          uint64_t v131 = 0;
        }
        unint64_t v139 = (uint64_t *)&v131[8 * v127];
        unint64_t v140 = &v131[8 * v130];
        *unint64_t v139 = v123;
        unint64_t v133 = v139 + 1;
        while (v124 != v126)
        {
          uint64_t v141 = *--v124;
          *--unint64_t v139 = v141;
        }
LABEL_195:
        v122[706] = v139;
        v122[707] = v133;
        v122[708] = v140;
        if (v126) {
          operator delete(v126);
        }
        goto LABEL_197;
      }
    }
    uint64_t *v124 = v123;
    unint64_t v133 = v124 + 1;
LABEL_197:
    v122[707] = v133;
LABEL_198:
    int v143 = 1 << *(_DWORD *)(v3 + 48);
    if (v143 == 2)
    {
      uint64_t v155 = a1[1];
      uint64_t v145 = *(void **)v155;
      uint64_t v146 = *(unsigned __int16 *)(a1[2] + 42);
      unint64_t v147 = *(char **)(*(void *)v155 + 5680);
      unint64_t v156 = *(void *)(*(void *)v155 + 5688);
      if ((unint64_t)v147 >= v156)
      {
        uint64_t v149 = (char *)v145[709];
        uint64_t v158 = (v147 - v149) >> 3;
        if ((unint64_t)(v158 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v159 = v156 - (void)v149;
        unint64_t v160 = (uint64_t)(v156 - (void)v149) >> 2;
        if (v160 <= v158 + 1) {
          unint64_t v160 = v158 + 1;
        }
        if (v159 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v161 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v161 = v160;
        }
        if (v161)
        {
          unint64_t v162 = (char *)sub_5714((uint64_t)(v145 + 711), v161);
          unint64_t v147 = (char *)v145[710];
          uint64_t v149 = (char *)v145[709];
        }
        else
        {
          unint64_t v162 = 0;
        }
        uint64_t v163 = &v162[8 * v158];
        uint64_t v164 = &v162[8 * v161];
        *(void *)uint64_t v163 = v146;
        unint64_t v157 = v163 + 8;
        while (v147 != v149)
        {
          uint64_t v166 = *((void *)v147 - 1);
          v147 -= 8;
          *((void *)v163 - 1) = v166;
          v163 -= 8;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v143 != 1) {
        goto LABEL_230;
      }
      uint64_t v144 = a1[1];
      uint64_t v145 = *(void **)v144;
      uint64_t v146 = *(unsigned __int16 *)(a1[2] + 42);
      unint64_t v147 = *(char **)(*(void *)v144 + 5680);
      unint64_t v148 = *(void *)(*(void *)v144 + 5688);
      if ((unint64_t)v147 >= v148)
      {
        uint64_t v149 = (char *)v145[709];
        uint64_t v150 = (v147 - v149) >> 3;
        if ((unint64_t)(v150 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v151 = v148 - (void)v149;
        unint64_t v152 = (uint64_t)(v148 - (void)v149) >> 2;
        if (v152 <= v150 + 1) {
          unint64_t v152 = v150 + 1;
        }
        if (v151 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v153 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v153 = v152;
        }
        if (v153)
        {
          unint64_t v154 = (char *)sub_5714((uint64_t)(v145 + 711), v153);
          unint64_t v147 = (char *)v145[710];
          uint64_t v149 = (char *)v145[709];
        }
        else
        {
          unint64_t v154 = 0;
        }
        uint64_t v163 = &v154[8 * v150];
        uint64_t v164 = &v154[8 * v153];
        *(void *)uint64_t v163 = v146;
        unint64_t v157 = v163 + 8;
        while (v147 != v149)
        {
          uint64_t v165 = *((void *)v147 - 1);
          v147 -= 8;
          *((void *)v163 - 1) = v165;
          v163 -= 8;
        }
LABEL_227:
        v145[709] = v163;
        v145[710] = v157;
        v145[711] = v164;
        if (v149) {
          operator delete(v149);
        }
        goto LABEL_229;
      }
    }
    *(void *)unint64_t v147 = v146;
    unint64_t v157 = v147 + 8;
LABEL_229:
    v145[710] = v157;
LABEL_230:
    int v167 = 1 << *(_DWORD *)(v3 + 48);
    if (v167 == 2)
    {
      uint64_t v179 = a1[1];
      unint64_t v169 = *(void **)v179;
      uint64_t v170 = *(unsigned __int16 *)(a1[2] + 40);
      uint64_t v171 = *(char **)(*(void *)v179 + 5704);
      unint64_t v180 = *(void *)(*(void *)v179 + 5712);
      if ((unint64_t)v171 >= v180)
      {
        unint64_t v173 = (char *)v169[712];
        uint64_t v182 = (v171 - v173) >> 3;
        if ((unint64_t)(v182 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v183 = v180 - (void)v173;
        unint64_t v184 = (uint64_t)(v180 - (void)v173) >> 2;
        if (v184 <= v182 + 1) {
          unint64_t v184 = v182 + 1;
        }
        if (v183 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v185 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v185 = v184;
        }
        if (v185)
        {
          uint64_t v186 = (char *)sub_5714((uint64_t)(v169 + 714), v185);
          uint64_t v171 = (char *)v169[713];
          unint64_t v173 = (char *)v169[712];
        }
        else
        {
          uint64_t v186 = 0;
        }
        int v187 = &v186[8 * v182];
        unint64_t v188 = &v186[8 * v185];
        *(void *)int v187 = v170;
        unint64_t v181 = v187 + 8;
        while (v171 != v173)
        {
          uint64_t v190 = *((void *)v171 - 1);
          v171 -= 8;
          *((void *)v187 - 1) = v190;
          v187 -= 8;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v167 != 1) {
        goto LABEL_262;
      }
      uint64_t v168 = a1[1];
      unint64_t v169 = *(void **)v168;
      uint64_t v170 = *(unsigned __int16 *)(a1[2] + 40);
      uint64_t v171 = *(char **)(*(void *)v168 + 5704);
      unint64_t v172 = *(void *)(*(void *)v168 + 5712);
      if ((unint64_t)v171 >= v172)
      {
        unint64_t v173 = (char *)v169[712];
        uint64_t v174 = (v171 - v173) >> 3;
        if ((unint64_t)(v174 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v175 = v172 - (void)v173;
        unint64_t v176 = (uint64_t)(v172 - (void)v173) >> 2;
        if (v176 <= v174 + 1) {
          unint64_t v176 = v174 + 1;
        }
        if (v175 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v177 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v177 = v176;
        }
        if (v177)
        {
          uint64_t v178 = (char *)sub_5714((uint64_t)(v169 + 714), v177);
          uint64_t v171 = (char *)v169[713];
          unint64_t v173 = (char *)v169[712];
        }
        else
        {
          uint64_t v178 = 0;
        }
        int v187 = &v178[8 * v174];
        unint64_t v188 = &v178[8 * v177];
        *(void *)int v187 = v170;
        unint64_t v181 = v187 + 8;
        while (v171 != v173)
        {
          uint64_t v189 = *((void *)v171 - 1);
          v171 -= 8;
          *((void *)v187 - 1) = v189;
          v187 -= 8;
        }
LABEL_259:
        v169[712] = v187;
        v169[713] = v181;
        v169[714] = v188;
        if (v173) {
          operator delete(v173);
        }
        goto LABEL_261;
      }
    }
    *(void *)uint64_t v171 = v170;
    unint64_t v181 = v171 + 8;
LABEL_261:
    v169[713] = v181;
LABEL_262:
    int v191 = 1 << *(_DWORD *)(v3 + 48);
    if (v191 == 2)
    {
      unint64_t v192 = *(void **)a1[1];
      uint64_t v193 = *(_WORD *)(a1[2] + 24) & 0x7FFF;
      unint64_t v194 = (char *)v192[716];
      unint64_t v202 = v192[717];
      if ((unint64_t)v194 >= v202)
      {
        unint64_t v196 = (char *)v192[715];
        uint64_t v204 = (v194 - v196) >> 3;
        if ((unint64_t)(v204 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v205 = v202 - (void)v196;
        unint64_t v206 = (uint64_t)(v202 - (void)v196) >> 2;
        if (v206 <= v204 + 1) {
          unint64_t v206 = v204 + 1;
        }
        if (v205 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v207 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v207 = v206;
        }
        if (v207)
        {
          uint64_t v208 = (char *)sub_5714((uint64_t)(v192 + 717), v207);
          unint64_t v194 = (char *)v192[716];
          unint64_t v196 = (char *)v192[715];
        }
        else
        {
          uint64_t v208 = 0;
        }
        int v209 = &v208[8 * v204];
        uint64_t v210 = &v208[8 * v207];
        *(void *)int v209 = v193;
        unint64_t v203 = v209 + 8;
        while (v194 != v196)
        {
          uint64_t v212 = *((void *)v194 - 1);
          v194 -= 8;
          *((void *)v209 - 1) = v212;
          v209 -= 8;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v191 != 1) {
        goto LABEL_294;
      }
      unint64_t v192 = *(void **)a1[1];
      uint64_t v193 = *(_WORD *)(a1[2] + 24) & 0x7FFF;
      unint64_t v194 = (char *)v192[716];
      unint64_t v195 = v192[717];
      if ((unint64_t)v194 >= v195)
      {
        unint64_t v196 = (char *)v192[715];
        uint64_t v197 = (v194 - v196) >> 3;
        if ((unint64_t)(v197 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v198 = v195 - (void)v196;
        unint64_t v199 = (uint64_t)(v195 - (void)v196) >> 2;
        if (v199 <= v197 + 1) {
          unint64_t v199 = v197 + 1;
        }
        if (v198 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v200 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v200 = v199;
        }
        if (v200)
        {
          unint64_t v201 = (char *)sub_5714((uint64_t)(v192 + 717), v200);
          unint64_t v194 = (char *)v192[716];
          unint64_t v196 = (char *)v192[715];
        }
        else
        {
          unint64_t v201 = 0;
        }
        int v209 = &v201[8 * v197];
        uint64_t v210 = &v201[8 * v200];
        *(void *)int v209 = v193;
        unint64_t v203 = v209 + 8;
        while (v194 != v196)
        {
          uint64_t v211 = *((void *)v194 - 1);
          v194 -= 8;
          *((void *)v209 - 1) = v211;
          v209 -= 8;
        }
LABEL_291:
        v192[715] = v209;
        v192[716] = v203;
        v192[717] = v210;
        if (v196) {
          operator delete(v196);
        }
        goto LABEL_293;
      }
    }
    *(void *)unint64_t v194 = v193;
    unint64_t v203 = v194 + 8;
LABEL_293:
    v192[716] = v203;
LABEL_294:
    int v213 = 1 << *(_DWORD *)(v3 + 48);
    if (v213 == 2)
    {
      unint64_t v214 = *(void **)a1[1];
      uint64_t v215 = *(_DWORD *)(a1[2] + 44) & 0x1FFFFLL;
      unint64_t v216 = (uint64_t *)v214[719];
      unint64_t v224 = v214[720];
      if ((unint64_t)v216 >= v224)
      {
        unint64_t v218 = (uint64_t *)v214[718];
        uint64_t v226 = v216 - v218;
        if ((unint64_t)(v226 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v227 = v224 - (void)v218;
        unint64_t v228 = (uint64_t)(v224 - (void)v218) >> 2;
        if (v228 <= v226 + 1) {
          unint64_t v228 = v226 + 1;
        }
        if (v227 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v229 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v229 = v228;
        }
        if (v229)
        {
          uint64_t v230 = (char *)sub_5714((uint64_t)(v214 + 720), v229);
          unint64_t v216 = (uint64_t *)v214[719];
          unint64_t v218 = (uint64_t *)v214[718];
        }
        else
        {
          uint64_t v230 = 0;
        }
        int v231 = (uint64_t *)&v230[8 * v226];
        uint64_t v232 = &v230[8 * v229];
        *int v231 = v215;
        unint64_t v225 = v231 + 1;
        while (v216 != v218)
        {
          uint64_t v234 = *--v216;
          *--int v231 = v234;
        }
        goto LABEL_323;
      }
    }
    else
    {
      if (v213 != 1) {
        goto LABEL_326;
      }
      unint64_t v214 = *(void **)a1[1];
      uint64_t v215 = *(_DWORD *)(a1[2] + 44) & 0x1FFFFLL;
      unint64_t v216 = (uint64_t *)v214[719];
      unint64_t v217 = v214[720];
      if ((unint64_t)v216 >= v217)
      {
        unint64_t v218 = (uint64_t *)v214[718];
        uint64_t v219 = v216 - v218;
        if ((unint64_t)(v219 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v220 = v217 - (void)v218;
        unint64_t v221 = (uint64_t)(v217 - (void)v218) >> 2;
        if (v221 <= v219 + 1) {
          unint64_t v221 = v219 + 1;
        }
        if (v220 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v222 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v222 = v221;
        }
        if (v222)
        {
          unint64_t v223 = (char *)sub_5714((uint64_t)(v214 + 720), v222);
          unint64_t v216 = (uint64_t *)v214[719];
          unint64_t v218 = (uint64_t *)v214[718];
        }
        else
        {
          unint64_t v223 = 0;
        }
        int v231 = (uint64_t *)&v223[8 * v219];
        uint64_t v232 = &v223[8 * v222];
        *int v231 = v215;
        unint64_t v225 = v231 + 1;
        while (v216 != v218)
        {
          uint64_t v233 = *--v216;
          *--int v231 = v233;
        }
LABEL_323:
        v214[718] = v231;
        v214[719] = v225;
        v214[720] = v232;
        if (v218) {
          operator delete(v218);
        }
        goto LABEL_325;
      }
    }
    *unint64_t v216 = v215;
    unint64_t v225 = v216 + 1;
LABEL_325:
    v214[719] = v225;
LABEL_326:
    int v235 = 1 << *(_DWORD *)(v3 + 48);
    if (v235 == 2)
    {
      unint64_t v236 = *(void **)a1[1];
      uint64_t v237 = *(_DWORD *)(a1[2] + 56) & 0x1FFFFLL;
      uint64_t v238 = (uint64_t *)v236[722];
      unint64_t v246 = v236[723];
      if ((unint64_t)v238 >= v246)
      {
        unint64_t v240 = (uint64_t *)v236[721];
        uint64_t v248 = v238 - v240;
        if ((unint64_t)(v248 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v249 = v246 - (void)v240;
        unint64_t v250 = (uint64_t)(v246 - (void)v240) >> 2;
        if (v250 <= v248 + 1) {
          unint64_t v250 = v248 + 1;
        }
        if (v249 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v251 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v251 = v250;
        }
        if (v251)
        {
          uint64_t v252 = (char *)sub_5714((uint64_t)(v236 + 723), v251);
          uint64_t v238 = (uint64_t *)v236[722];
          unint64_t v240 = (uint64_t *)v236[721];
        }
        else
        {
          uint64_t v252 = 0;
        }
        uint64_t v253 = (uint64_t *)&v252[8 * v248];
        uint64_t v254 = &v252[8 * v251];
        uint64_t *v253 = v237;
        unint64_t v247 = v253 + 1;
        while (v238 != v240)
        {
          uint64_t v256 = *--v238;
          *--uint64_t v253 = v256;
        }
        goto LABEL_355;
      }
    }
    else
    {
      if (v235 != 1) {
        goto LABEL_358;
      }
      unint64_t v236 = *(void **)a1[1];
      uint64_t v237 = *(_DWORD *)(a1[2] + 56) & 0x1FFFFLL;
      uint64_t v238 = (uint64_t *)v236[722];
      unint64_t v239 = v236[723];
      if ((unint64_t)v238 >= v239)
      {
        unint64_t v240 = (uint64_t *)v236[721];
        uint64_t v241 = v238 - v240;
        if ((unint64_t)(v241 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v242 = v239 - (void)v240;
        unint64_t v243 = (uint64_t)(v239 - (void)v240) >> 2;
        if (v243 <= v241 + 1) {
          unint64_t v243 = v241 + 1;
        }
        if (v242 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v244 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v244 = v243;
        }
        if (v244)
        {
          unint64_t v245 = (char *)sub_5714((uint64_t)(v236 + 723), v244);
          uint64_t v238 = (uint64_t *)v236[722];
          unint64_t v240 = (uint64_t *)v236[721];
        }
        else
        {
          unint64_t v245 = 0;
        }
        uint64_t v253 = (uint64_t *)&v245[8 * v241];
        uint64_t v254 = &v245[8 * v244];
        uint64_t *v253 = v237;
        unint64_t v247 = v253 + 1;
        while (v238 != v240)
        {
          uint64_t v255 = *--v238;
          *--uint64_t v253 = v255;
        }
LABEL_355:
        v236[721] = v253;
        v236[722] = v247;
        v236[723] = v254;
        if (v240) {
          operator delete(v240);
        }
        goto LABEL_357;
      }
    }
    uint64_t *v238 = v237;
    unint64_t v247 = v238 + 1;
LABEL_357:
    v236[722] = v247;
LABEL_358:
    int v257 = 1 << *(_DWORD *)(v3 + 48);
    if (v257 == 2)
    {
      unint64_t v258 = *(void **)a1[1];
      uint64_t v259 = *(_DWORD *)(a1[2] + 52) & 0x1FFFFLL;
      unint64_t v260 = (uint64_t *)v258[725];
      unint64_t v268 = v258[726];
      if ((unint64_t)v260 >= v268)
      {
        unint64_t v262 = (uint64_t *)v258[724];
        uint64_t v270 = v260 - v262;
        if ((unint64_t)(v270 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v271 = v268 - (void)v262;
        unint64_t v272 = (uint64_t)(v268 - (void)v262) >> 2;
        if (v272 <= v270 + 1) {
          unint64_t v272 = v270 + 1;
        }
        if (v271 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v273 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v273 = v272;
        }
        if (v273)
        {
          uint64_t v274 = (char *)sub_5714((uint64_t)(v258 + 726), v273);
          unint64_t v260 = (uint64_t *)v258[725];
          unint64_t v262 = (uint64_t *)v258[724];
        }
        else
        {
          uint64_t v274 = 0;
        }
        int v275 = (uint64_t *)&v274[8 * v270];
        uint64_t v276 = &v274[8 * v273];
        *int v275 = v259;
        unint64_t v269 = v275 + 1;
        while (v260 != v262)
        {
          uint64_t v278 = *--v260;
          *--int v275 = v278;
        }
        goto LABEL_387;
      }
    }
    else
    {
      if (v257 != 1) {
        goto LABEL_390;
      }
      unint64_t v258 = *(void **)a1[1];
      uint64_t v259 = *(_DWORD *)(a1[2] + 52) & 0x1FFFFLL;
      unint64_t v260 = (uint64_t *)v258[725];
      unint64_t v261 = v258[726];
      if ((unint64_t)v260 >= v261)
      {
        unint64_t v262 = (uint64_t *)v258[724];
        uint64_t v263 = v260 - v262;
        if ((unint64_t)(v263 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v264 = v261 - (void)v262;
        unint64_t v265 = (uint64_t)(v261 - (void)v262) >> 2;
        if (v265 <= v263 + 1) {
          unint64_t v265 = v263 + 1;
        }
        if (v264 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v266 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v266 = v265;
        }
        if (v266)
        {
          unint64_t v267 = (char *)sub_5714((uint64_t)(v258 + 726), v266);
          unint64_t v260 = (uint64_t *)v258[725];
          unint64_t v262 = (uint64_t *)v258[724];
        }
        else
        {
          unint64_t v267 = 0;
        }
        int v275 = (uint64_t *)&v267[8 * v263];
        uint64_t v276 = &v267[8 * v266];
        *int v275 = v259;
        unint64_t v269 = v275 + 1;
        while (v260 != v262)
        {
          uint64_t v277 = *--v260;
          *--int v275 = v277;
        }
LABEL_387:
        v258[724] = v275;
        v258[725] = v269;
        v258[726] = v276;
        if (v262) {
          operator delete(v262);
        }
        goto LABEL_389;
      }
    }
    uint64_t *v260 = v259;
    unint64_t v269 = v260 + 1;
LABEL_389:
    v258[725] = v269;
LABEL_390:
    int v279 = 1 << *(_DWORD *)(v3 + 48);
    if (v279 == 2)
    {
      uint64_t v291 = a1[2];
      uint64_t v281 = *(void **)a1[1];
      uint64_t v282 = *(_DWORD *)(v291 + 48) & 0x1FFFFLL;
      unint64_t v283 = (uint64_t *)v281[728];
      unint64_t v292 = v281[729];
      if ((unint64_t)v283 >= v292)
      {
        uint64_t v285 = (uint64_t *)v281[727];
        uint64_t v294 = v283 - v285;
        if (!((unint64_t)(v294 + 1) >> 61))
        {
          unint64_t v295 = v292 - (void)v285;
          unint64_t v296 = (uint64_t)(v292 - (void)v285) >> 2;
          if (v296 <= v294 + 1) {
            unint64_t v296 = v294 + 1;
          }
          if (v295 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v297 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v297 = v296;
          }
          if (v297)
          {
            uint64_t v298 = (char *)sub_5714((uint64_t)(v281 + 729), v297);
            unint64_t v283 = (uint64_t *)v281[728];
            uint64_t v285 = (uint64_t *)v281[727];
          }
          else
          {
            uint64_t v298 = 0;
          }
          uint64_t v299 = (uint64_t *)&v298[8 * v294];
          uint64_t v300 = &v298[8 * v297];
          *uint64_t v299 = v282;
          unint64_t v293 = v299 + 1;
          while (v283 != v285)
          {
            uint64_t v302 = *--v283;
            *--uint64_t v299 = v302;
          }
          goto LABEL_419;
        }
LABEL_424:
        sub_566C();
      }
    }
    else
    {
      if (v279 != 1)
      {
LABEL_422:
        *a2 = 1;
        return;
      }
      uint64_t v280 = a1[2];
      uint64_t v281 = *(void **)a1[1];
      uint64_t v282 = *(_DWORD *)(v280 + 48) & 0x1FFFFLL;
      unint64_t v283 = (uint64_t *)v281[728];
      unint64_t v284 = v281[729];
      if ((unint64_t)v283 >= v284)
      {
        uint64_t v285 = (uint64_t *)v281[727];
        uint64_t v286 = v283 - v285;
        if (!((unint64_t)(v286 + 1) >> 61))
        {
          unint64_t v287 = v284 - (void)v285;
          unint64_t v288 = (uint64_t)(v284 - (void)v285) >> 2;
          if (v288 <= v286 + 1) {
            unint64_t v288 = v286 + 1;
          }
          if (v287 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v289 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v289 = v288;
          }
          if (v289)
          {
            unint64_t v290 = (char *)sub_5714((uint64_t)(v281 + 729), v289);
            unint64_t v283 = (uint64_t *)v281[728];
            uint64_t v285 = (uint64_t *)v281[727];
          }
          else
          {
            unint64_t v290 = 0;
          }
          uint64_t v299 = (uint64_t *)&v290[8 * v286];
          uint64_t v300 = &v290[8 * v289];
          *uint64_t v299 = v282;
          unint64_t v293 = v299 + 1;
          while (v283 != v285)
          {
            uint64_t v301 = *--v283;
            *--uint64_t v299 = v301;
          }
LABEL_419:
          v281[727] = v299;
          v281[728] = v293;
          v281[729] = v300;
          if (v285) {
            operator delete(v285);
          }
          goto LABEL_421;
        }
        goto LABEL_424;
      }
    }
    uint64_t *v283 = v282;
    unint64_t v293 = v283 + 1;
LABEL_421:
    v281[728] = v293;
    goto LABEL_422;
  }
  int v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    uint64_t v18 = (void *)a1[1];
    uint64_t v17 = a1[2];
    unint64_t v19 = (void *)*v18;
    *(void *)(v19[692] - 8) += *(_WORD *)(v17 + 20) & 0x7FFF;
    *(void *)(v19[695] - 8) += *(_WORD *)(v17 + 22) & 0x7FFF;
    *(void *)(v19[698] - 8) += (unint64_t)*(unsigned int *)(v17 + 56) >> 17;
    *(void *)(v19[701] - 8) += *(_DWORD *)(v17 + 36) & 0x1FFFF;
    *(void *)(v19[704] - 8) += *(_DWORD *)(v17 + 32) & 0x3FFFF;
    *(void *)(v19[707] - 8) += *(_DWORD *)(v17 + 28) & 0x3FFFF;
    *(void *)(v19[710] - 8) += *(unsigned __int16 *)(v17 + 42);
    *(void *)(v19[713] - 8) += *(unsigned __int16 *)(v17 + 40);
    *(void *)(v19[716] - 8) += *(_WORD *)(v17 + 24) & 0x7FFF;
    *(void *)(v19[719] - 8) += *(_DWORD *)(v17 + 44) & 0x1FFFF;
    unint64_t v20 = (_DWORD *)a1[2];
    uint64_t v21 = (void *)*v18;
    *(void *)(v21[722] - 8) += v20[14] & 0x1FFFF;
    *(void *)(v21[725] - 8) += v20[13] & 0x1FFFF;
    *(void *)(v21[728] - 8) += v20[12] & 0x1FFFF;
  }
}

void sub_D92DC(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    int v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      uint64_t v6 = *(void **)a1[1];
      unint64_t v7 = (unint64_t)*(unsigned int *)(a1[2] + 36) >> 17;
      uint64_t v8 = (unint64_t *)v6[593];
      unint64_t v25 = v6[594];
      if ((unint64_t)v8 >= v25)
      {
        unint64_t v10 = (unint64_t *)v6[592];
        uint64_t v27 = v8 - v10;
        if ((unint64_t)(v27 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v28 = v25 - (void)v10;
        unint64_t v29 = (uint64_t)(v25 - (void)v10) >> 2;
        if (v29 <= v27 + 1) {
          unint64_t v29 = v27 + 1;
        }
        if (v28 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v29;
        }
        if (v30)
        {
          uint64_t v31 = (char *)sub_5714((uint64_t)(v6 + 594), v30);
          uint64_t v8 = (unint64_t *)v6[593];
          unint64_t v10 = (unint64_t *)v6[592];
        }
        else
        {
          uint64_t v31 = 0;
        }
        uint64_t v32 = (unint64_t *)&v31[8 * v27];
        int v33 = &v31[8 * v30];
        *uint64_t v32 = v7;
        unint64_t v26 = v32 + 1;
        while (v8 != v10)
        {
          unint64_t v35 = *--v8;
          *--uint64_t v32 = v35;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1) {
        goto LABEL_38;
      }
      uint64_t v6 = *(void **)a1[1];
      unint64_t v7 = (unint64_t)*(unsigned int *)(a1[2] + 36) >> 17;
      uint64_t v8 = (unint64_t *)v6[593];
      unint64_t v9 = v6[594];
      if ((unint64_t)v8 >= v9)
      {
        unint64_t v10 = (unint64_t *)v6[592];
        uint64_t v11 = v8 - v10;
        if ((unint64_t)(v11 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v12 = v9 - (void)v10;
        unint64_t v13 = (uint64_t)(v9 - (void)v10) >> 2;
        if (v13 <= v11 + 1) {
          unint64_t v13 = v11 + 1;
        }
        if (v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14)
        {
          unint64_t v15 = (char *)sub_5714((uint64_t)(v6 + 594), v14);
          uint64_t v8 = (unint64_t *)v6[593];
          unint64_t v10 = (unint64_t *)v6[592];
        }
        else
        {
          unint64_t v15 = 0;
        }
        uint64_t v32 = (unint64_t *)&v15[8 * v11];
        int v33 = &v15[8 * v14];
        *uint64_t v32 = v7;
        unint64_t v26 = v32 + 1;
        while (v8 != v10)
        {
          unint64_t v34 = *--v8;
          *--uint64_t v32 = v34;
        }
LABEL_35:
        v6[592] = v32;
        v6[593] = v26;
        v6[594] = v33;
        if (v10) {
          operator delete(v10);
        }
        goto LABEL_37;
      }
    }
    *uint64_t v8 = v7;
    unint64_t v26 = v8 + 1;
LABEL_37:
    v6[593] = v26;
LABEL_38:
    int v36 = 1 << *(_DWORD *)(v3 + 48);
    if (v36 == 2)
    {
      unint64_t v37 = *(void **)a1[1];
      uint64_t v38 = *(_DWORD *)(a1[2] + 36) & 0x1FFFFLL;
      uint64_t v39 = (uint64_t *)v37[596];
      unint64_t v47 = v37[597];
      if ((unint64_t)v39 >= v47)
      {
        unint64_t v41 = (uint64_t *)v37[595];
        uint64_t v49 = v39 - v41;
        if ((unint64_t)(v49 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v50 = v47 - (void)v41;
        unint64_t v51 = (uint64_t)(v47 - (void)v41) >> 2;
        if (v51 <= v49 + 1) {
          unint64_t v51 = v49 + 1;
        }
        if (v50 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v52 = v51;
        }
        if (v52)
        {
          uint64_t v53 = (char *)sub_5714((uint64_t)(v37 + 597), v52);
          uint64_t v39 = (uint64_t *)v37[596];
          unint64_t v41 = (uint64_t *)v37[595];
        }
        else
        {
          uint64_t v53 = 0;
        }
        uint64_t v54 = (uint64_t *)&v53[8 * v49];
        int v55 = &v53[8 * v52];
        uint64_t *v54 = v38;
        unint64_t v48 = v54 + 1;
        while (v39 != v41)
        {
          uint64_t v57 = *--v39;
          *--uint64_t v54 = v57;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v36 != 1) {
        goto LABEL_70;
      }
      unint64_t v37 = *(void **)a1[1];
      uint64_t v38 = *(_DWORD *)(a1[2] + 36) & 0x1FFFFLL;
      uint64_t v39 = (uint64_t *)v37[596];
      unint64_t v40 = v37[597];
      if ((unint64_t)v39 >= v40)
      {
        unint64_t v41 = (uint64_t *)v37[595];
        uint64_t v42 = v39 - v41;
        if ((unint64_t)(v42 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v43 = v40 - (void)v41;
        unint64_t v44 = (uint64_t)(v40 - (void)v41) >> 2;
        if (v44 <= v42 + 1) {
          unint64_t v44 = v42 + 1;
        }
        if (v43 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v45 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v45 = v44;
        }
        if (v45)
        {
          uint64_t v46 = (char *)sub_5714((uint64_t)(v37 + 597), v45);
          uint64_t v39 = (uint64_t *)v37[596];
          unint64_t v41 = (uint64_t *)v37[595];
        }
        else
        {
          uint64_t v46 = 0;
        }
        uint64_t v54 = (uint64_t *)&v46[8 * v42];
        int v55 = &v46[8 * v45];
        uint64_t *v54 = v38;
        unint64_t v48 = v54 + 1;
        while (v39 != v41)
        {
          uint64_t v56 = *--v39;
          *--uint64_t v54 = v56;
        }
LABEL_67:
        v37[595] = v54;
        v37[596] = v48;
        v37[597] = v55;
        if (v41) {
          operator delete(v41);
        }
        goto LABEL_69;
      }
    }
    *uint64_t v39 = v38;
    unint64_t v48 = v39 + 1;
LABEL_69:
    v37[596] = v48;
LABEL_70:
    int v58 = 1 << *(_DWORD *)(v3 + 48);
    if (v58 == 2)
    {
      unint64_t v59 = *(void **)a1[1];
      uint64_t v60 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      uint64_t v61 = (char *)v59[599];
      unint64_t v69 = v59[600];
      if ((unint64_t)v61 >= v69)
      {
        unint64_t v63 = (char *)v59[598];
        uint64_t v71 = (v61 - v63) >> 3;
        if ((unint64_t)(v71 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v72 = v69 - (void)v63;
        unint64_t v73 = (uint64_t)(v69 - (void)v63) >> 2;
        if (v73 <= v71 + 1) {
          unint64_t v73 = v71 + 1;
        }
        if (v72 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v74 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v74 = v73;
        }
        if (v74)
        {
          unint64_t v75 = (char *)sub_5714((uint64_t)(v59 + 600), v74);
          uint64_t v61 = (char *)v59[599];
          unint64_t v63 = (char *)v59[598];
        }
        else
        {
          unint64_t v75 = 0;
        }
        unint64_t v76 = &v75[8 * v71];
        int v77 = &v75[8 * v74];
        *(void *)unint64_t v76 = v60;
        unint64_t v70 = v76 + 8;
        while (v61 != v63)
        {
          uint64_t v79 = *((void *)v61 - 1);
          v61 -= 8;
          *((void *)v76 - 1) = v79;
          v76 -= 8;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v58 != 1) {
        goto LABEL_102;
      }
      unint64_t v59 = *(void **)a1[1];
      uint64_t v60 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      uint64_t v61 = (char *)v59[599];
      unint64_t v62 = v59[600];
      if ((unint64_t)v61 >= v62)
      {
        unint64_t v63 = (char *)v59[598];
        uint64_t v64 = (v61 - v63) >> 3;
        if ((unint64_t)(v64 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v65 = v62 - (void)v63;
        unint64_t v66 = (uint64_t)(v62 - (void)v63) >> 2;
        if (v66 <= v64 + 1) {
          unint64_t v66 = v64 + 1;
        }
        if (v65 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v67 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v67 = v66;
        }
        if (v67)
        {
          uint64_t v68 = (char *)sub_5714((uint64_t)(v59 + 600), v67);
          uint64_t v61 = (char *)v59[599];
          unint64_t v63 = (char *)v59[598];
        }
        else
        {
          uint64_t v68 = 0;
        }
        unint64_t v76 = &v68[8 * v64];
        int v77 = &v68[8 * v67];
        *(void *)unint64_t v76 = v60;
        unint64_t v70 = v76 + 8;
        while (v61 != v63)
        {
          uint64_t v78 = *((void *)v61 - 1);
          v61 -= 8;
          *((void *)v76 - 1) = v78;
          v76 -= 8;
        }
LABEL_99:
        v59[598] = v76;
        v59[599] = v70;
        v59[600] = v77;
        if (v63) {
          operator delete(v63);
        }
        goto LABEL_101;
      }
    }
    *(void *)uint64_t v61 = v60;
    unint64_t v70 = v61 + 8;
LABEL_101:
    v59[599] = v70;
LABEL_102:
    int v80 = 1 << *(_DWORD *)(v3 + 48);
    if (v80 == 2)
    {
      unint64_t v81 = *(void **)a1[1];
      uint64_t v82 = *(void *)(a1[2] + 76) >> 49;
      uint64_t v83 = (char *)v81[602];
      unint64_t v91 = v81[603];
      if ((unint64_t)v83 >= v91)
      {
        unint64_t v85 = (char *)v81[601];
        uint64_t v93 = (v83 - v85) >> 3;
        if ((unint64_t)(v93 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v94 = v91 - (void)v85;
        unint64_t v95 = (uint64_t)(v91 - (void)v85) >> 2;
        if (v95 <= v93 + 1) {
          unint64_t v95 = v93 + 1;
        }
        if (v94 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v96 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v96 = v95;
        }
        if (v96)
        {
          uint64_t v97 = (char *)sub_5714((uint64_t)(v81 + 603), v96);
          uint64_t v83 = (char *)v81[602];
          unint64_t v85 = (char *)v81[601];
        }
        else
        {
          uint64_t v97 = 0;
        }
        uint64_t v98 = &v97[8 * v93];
        int v99 = &v97[8 * v96];
        *(void *)uint64_t v98 = v82;
        unint64_t v92 = v98 + 8;
        while (v83 != v85)
        {
          uint64_t v101 = *((void *)v83 - 1);
          v83 -= 8;
          *((void *)v98 - 1) = v101;
          v98 -= 8;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v80 != 1) {
        goto LABEL_134;
      }
      unint64_t v81 = *(void **)a1[1];
      uint64_t v82 = *(void *)(a1[2] + 76) >> 49;
      uint64_t v83 = (char *)v81[602];
      unint64_t v84 = v81[603];
      if ((unint64_t)v83 >= v84)
      {
        unint64_t v85 = (char *)v81[601];
        uint64_t v86 = (v83 - v85) >> 3;
        if ((unint64_t)(v86 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v87 = v84 - (void)v85;
        unint64_t v88 = (uint64_t)(v84 - (void)v85) >> 2;
        if (v88 <= v86 + 1) {
          unint64_t v88 = v86 + 1;
        }
        if (v87 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v89 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v89 = v88;
        }
        if (v89)
        {
          uint64_t v90 = (char *)sub_5714((uint64_t)(v81 + 603), v89);
          uint64_t v83 = (char *)v81[602];
          unint64_t v85 = (char *)v81[601];
        }
        else
        {
          uint64_t v90 = 0;
        }
        uint64_t v98 = &v90[8 * v86];
        int v99 = &v90[8 * v89];
        *(void *)uint64_t v98 = v82;
        unint64_t v92 = v98 + 8;
        while (v83 != v85)
        {
          uint64_t v100 = *((void *)v83 - 1);
          v83 -= 8;
          *((void *)v98 - 1) = v100;
          v98 -= 8;
        }
LABEL_131:
        v81[601] = v98;
        v81[602] = v92;
        v81[603] = v99;
        if (v85) {
          operator delete(v85);
        }
        goto LABEL_133;
      }
    }
    *(void *)uint64_t v83 = v82;
    unint64_t v92 = v83 + 8;
LABEL_133:
    v81[602] = v92;
LABEL_134:
    int v102 = 1 << *(_DWORD *)(v3 + 48);
    if (v102 == 2)
    {
      unint64_t v103 = *(void **)a1[1];
      uint64_t v104 = *(_WORD *)(a1[2] + 92) & 0x7FFF;
      uint64_t v105 = (char *)v103[605];
      unint64_t v113 = v103[606];
      if ((unint64_t)v105 >= v113)
      {
        unint64_t v107 = (char *)v103[604];
        uint64_t v115 = (v105 - v107) >> 3;
        if ((unint64_t)(v115 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v116 = v113 - (void)v107;
        unint64_t v117 = (uint64_t)(v113 - (void)v107) >> 2;
        if (v117 <= v115 + 1) {
          unint64_t v117 = v115 + 1;
        }
        if (v116 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v118 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v118 = v117;
        }
        if (v118)
        {
          uint64_t v119 = (char *)sub_5714((uint64_t)(v103 + 606), v118);
          uint64_t v105 = (char *)v103[605];
          unint64_t v107 = (char *)v103[604];
        }
        else
        {
          uint64_t v119 = 0;
        }
        uint64_t v120 = &v119[8 * v115];
        int v121 = &v119[8 * v118];
        *(void *)uint64_t v120 = v104;
        unint64_t v114 = v120 + 8;
        while (v105 != v107)
        {
          uint64_t v123 = *((void *)v105 - 1);
          v105 -= 8;
          *((void *)v120 - 1) = v123;
          v120 -= 8;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v102 != 1) {
        goto LABEL_166;
      }
      unint64_t v103 = *(void **)a1[1];
      uint64_t v104 = *(_WORD *)(a1[2] + 92) & 0x7FFF;
      uint64_t v105 = (char *)v103[605];
      unint64_t v106 = v103[606];
      if ((unint64_t)v105 >= v106)
      {
        unint64_t v107 = (char *)v103[604];
        uint64_t v108 = (v105 - v107) >> 3;
        if ((unint64_t)(v108 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v109 = v106 - (void)v107;
        unint64_t v110 = (uint64_t)(v106 - (void)v107) >> 2;
        if (v110 <= v108 + 1) {
          unint64_t v110 = v108 + 1;
        }
        if (v109 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v111 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v111 = v110;
        }
        if (v111)
        {
          uint64_t v112 = (char *)sub_5714((uint64_t)(v103 + 606), v111);
          uint64_t v105 = (char *)v103[605];
          unint64_t v107 = (char *)v103[604];
        }
        else
        {
          uint64_t v112 = 0;
        }
        uint64_t v120 = &v112[8 * v108];
        int v121 = &v112[8 * v111];
        *(void *)uint64_t v120 = v104;
        unint64_t v114 = v120 + 8;
        while (v105 != v107)
        {
          uint64_t v122 = *((void *)v105 - 1);
          v105 -= 8;
          *((void *)v120 - 1) = v122;
          v120 -= 8;
        }
LABEL_163:
        v103[604] = v120;
        v103[605] = v114;
        v103[606] = v121;
        if (v107) {
          operator delete(v107);
        }
        goto LABEL_165;
      }
    }
    *(void *)uint64_t v105 = v104;
    unint64_t v114 = v105 + 8;
LABEL_165:
    v103[605] = v114;
LABEL_166:
    int v124 = 1 << *(_DWORD *)(v3 + 48);
    if (v124 == 2)
    {
      unint64_t v125 = *(void **)a1[1];
      uint64_t v126 = *(_WORD *)(a1[2] + 94) & 0x7FFF;
      uint64_t v127 = (char *)v125[608];
      unint64_t v135 = v125[609];
      if ((unint64_t)v127 >= v135)
      {
        unint64_t v129 = (char *)v125[607];
        uint64_t v137 = (v127 - v129) >> 3;
        if ((unint64_t)(v137 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v138 = v135 - (void)v129;
        unint64_t v139 = (uint64_t)(v135 - (void)v129) >> 2;
        if (v139 <= v137 + 1) {
          unint64_t v139 = v137 + 1;
        }
        if (v138 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v140 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v140 = v139;
        }
        if (v140)
        {
          uint64_t v141 = (char *)sub_5714((uint64_t)(v125 + 609), v140);
          uint64_t v127 = (char *)v125[608];
          unint64_t v129 = (char *)v125[607];
        }
        else
        {
          uint64_t v141 = 0;
        }
        uint64_t v142 = &v141[8 * v137];
        int v143 = &v141[8 * v140];
        *(void *)uint64_t v142 = v126;
        unint64_t v136 = v142 + 8;
        while (v127 != v129)
        {
          uint64_t v145 = *((void *)v127 - 1);
          v127 -= 8;
          *((void *)v142 - 1) = v145;
          v142 -= 8;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v124 != 1) {
        goto LABEL_198;
      }
      unint64_t v125 = *(void **)a1[1];
      uint64_t v126 = *(_WORD *)(a1[2] + 94) & 0x7FFF;
      uint64_t v127 = (char *)v125[608];
      unint64_t v128 = v125[609];
      if ((unint64_t)v127 >= v128)
      {
        unint64_t v129 = (char *)v125[607];
        uint64_t v130 = (v127 - v129) >> 3;
        if ((unint64_t)(v130 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v131 = v128 - (void)v129;
        unint64_t v132 = (uint64_t)(v128 - (void)v129) >> 2;
        if (v132 <= v130 + 1) {
          unint64_t v132 = v130 + 1;
        }
        if (v131 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v133 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v133 = v132;
        }
        if (v133)
        {
          uint64_t v134 = (char *)sub_5714((uint64_t)(v125 + 609), v133);
          uint64_t v127 = (char *)v125[608];
          unint64_t v129 = (char *)v125[607];
        }
        else
        {
          uint64_t v134 = 0;
        }
        uint64_t v142 = &v134[8 * v130];
        int v143 = &v134[8 * v133];
        *(void *)uint64_t v142 = v126;
        unint64_t v136 = v142 + 8;
        while (v127 != v129)
        {
          uint64_t v144 = *((void *)v127 - 1);
          v127 -= 8;
          *((void *)v142 - 1) = v144;
          v142 -= 8;
        }
LABEL_195:
        v125[607] = v142;
        v125[608] = v136;
        v125[609] = v143;
        if (v129) {
          operator delete(v129);
        }
        goto LABEL_197;
      }
    }
    *(void *)uint64_t v127 = v126;
    unint64_t v136 = v127 + 8;
LABEL_197:
    v125[608] = v136;
LABEL_198:
    int v146 = 1 << *(_DWORD *)(v3 + 48);
    if (v146 == 2)
    {
      unint64_t v147 = *(void **)a1[1];
      uint64_t v148 = *(_WORD *)(a1[2] + 22) & 0x7FFF;
      uint64_t v149 = (char *)v147[611];
      unint64_t v157 = v147[612];
      if ((unint64_t)v149 >= v157)
      {
        unint64_t v151 = (char *)v147[610];
        uint64_t v159 = (v149 - v151) >> 3;
        if ((unint64_t)(v159 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v160 = v157 - (void)v151;
        unint64_t v161 = (uint64_t)(v157 - (void)v151) >> 2;
        if (v161 <= v159 + 1) {
          unint64_t v161 = v159 + 1;
        }
        if (v160 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v162 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v162 = v161;
        }
        if (v162)
        {
          uint64_t v163 = (char *)sub_5714((uint64_t)(v147 + 612), v162);
          uint64_t v149 = (char *)v147[611];
          unint64_t v151 = (char *)v147[610];
        }
        else
        {
          uint64_t v163 = 0;
        }
        uint64_t v164 = &v163[8 * v159];
        uint64_t v165 = &v163[8 * v162];
        *(void *)uint64_t v164 = v148;
        uint64_t v158 = v164 + 8;
        while (v149 != v151)
        {
          uint64_t v167 = *((void *)v149 - 1);
          v149 -= 8;
          *((void *)v164 - 1) = v167;
          v164 -= 8;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v146 != 1) {
        goto LABEL_230;
      }
      unint64_t v147 = *(void **)a1[1];
      uint64_t v148 = *(_WORD *)(a1[2] + 22) & 0x7FFF;
      uint64_t v149 = (char *)v147[611];
      unint64_t v150 = v147[612];
      if ((unint64_t)v149 >= v150)
      {
        unint64_t v151 = (char *)v147[610];
        uint64_t v152 = (v149 - v151) >> 3;
        if ((unint64_t)(v152 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v153 = v150 - (void)v151;
        unint64_t v154 = (uint64_t)(v150 - (void)v151) >> 2;
        if (v154 <= v152 + 1) {
          unint64_t v154 = v152 + 1;
        }
        if (v153 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v155 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v155 = v154;
        }
        if (v155)
        {
          unint64_t v156 = (char *)sub_5714((uint64_t)(v147 + 612), v155);
          uint64_t v149 = (char *)v147[611];
          unint64_t v151 = (char *)v147[610];
        }
        else
        {
          unint64_t v156 = 0;
        }
        uint64_t v164 = &v156[8 * v152];
        uint64_t v165 = &v156[8 * v155];
        *(void *)uint64_t v164 = v148;
        uint64_t v158 = v164 + 8;
        while (v149 != v151)
        {
          uint64_t v166 = *((void *)v149 - 1);
          v149 -= 8;
          *((void *)v164 - 1) = v166;
          v164 -= 8;
        }
LABEL_227:
        v147[610] = v164;
        v147[611] = v158;
        v147[612] = v165;
        if (v151) {
          operator delete(v151);
        }
        goto LABEL_229;
      }
    }
    *(void *)uint64_t v149 = v148;
    uint64_t v158 = v149 + 8;
LABEL_229:
    v147[611] = v158;
LABEL_230:
    int v168 = 1 << *(_DWORD *)(v3 + 48);
    if (v168 == 2)
    {
      unint64_t v169 = *(void **)a1[1];
      unint64_t v170 = (unint64_t)*(unsigned int *)(a1[2] + 48) >> 17;
      uint64_t v171 = (unint64_t *)v169[614];
      unint64_t v179 = v169[615];
      if ((unint64_t)v171 >= v179)
      {
        unint64_t v173 = (unint64_t *)v169[613];
        uint64_t v181 = v171 - v173;
        if ((unint64_t)(v181 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v182 = v179 - (void)v173;
        unint64_t v183 = (uint64_t)(v179 - (void)v173) >> 2;
        if (v183 <= v181 + 1) {
          unint64_t v183 = v181 + 1;
        }
        if (v182 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v184 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v184 = v183;
        }
        if (v184)
        {
          unint64_t v185 = (char *)sub_5714((uint64_t)(v169 + 615), v184);
          uint64_t v171 = (unint64_t *)v169[614];
          unint64_t v173 = (unint64_t *)v169[613];
        }
        else
        {
          unint64_t v185 = 0;
        }
        uint64_t v186 = (unint64_t *)&v185[8 * v181];
        int v187 = &v185[8 * v184];
        *uint64_t v186 = v170;
        unint64_t v180 = v186 + 1;
        while (v171 != v173)
        {
          unint64_t v189 = *--v171;
          *--uint64_t v186 = v189;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v168 != 1) {
        goto LABEL_262;
      }
      unint64_t v169 = *(void **)a1[1];
      unint64_t v170 = (unint64_t)*(unsigned int *)(a1[2] + 48) >> 17;
      uint64_t v171 = (unint64_t *)v169[614];
      unint64_t v172 = v169[615];
      if ((unint64_t)v171 >= v172)
      {
        unint64_t v173 = (unint64_t *)v169[613];
        uint64_t v174 = v171 - v173;
        if ((unint64_t)(v174 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v175 = v172 - (void)v173;
        unint64_t v176 = (uint64_t)(v172 - (void)v173) >> 2;
        if (v176 <= v174 + 1) {
          unint64_t v176 = v174 + 1;
        }
        if (v175 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v177 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v177 = v176;
        }
        if (v177)
        {
          uint64_t v178 = (char *)sub_5714((uint64_t)(v169 + 615), v177);
          uint64_t v171 = (unint64_t *)v169[614];
          unint64_t v173 = (unint64_t *)v169[613];
        }
        else
        {
          uint64_t v178 = 0;
        }
        uint64_t v186 = (unint64_t *)&v178[8 * v174];
        int v187 = &v178[8 * v177];
        *uint64_t v186 = v170;
        unint64_t v180 = v186 + 1;
        while (v171 != v173)
        {
          unint64_t v188 = *--v171;
          *--uint64_t v186 = v188;
        }
LABEL_259:
        v169[613] = v186;
        v169[614] = v180;
        v169[615] = v187;
        if (v173) {
          operator delete(v173);
        }
        goto LABEL_261;
      }
    }
    unint64_t *v171 = v170;
    unint64_t v180 = v171 + 1;
LABEL_261:
    v169[614] = v180;
LABEL_262:
    int v190 = 1 << *(_DWORD *)(v3 + 48);
    if (v190 == 2)
    {
      int v191 = *(void **)a1[1];
      uint64_t v192 = *(_DWORD *)(a1[2] + 44) & 0x1FFFFLL;
      uint64_t v193 = (uint64_t *)v191[617];
      unint64_t v201 = v191[618];
      if ((unint64_t)v193 >= v201)
      {
        unint64_t v195 = (uint64_t *)v191[616];
        uint64_t v203 = v193 - v195;
        if ((unint64_t)(v203 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v204 = v201 - (void)v195;
        unint64_t v205 = (uint64_t)(v201 - (void)v195) >> 2;
        if (v205 <= v203 + 1) {
          unint64_t v205 = v203 + 1;
        }
        if (v204 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v206 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v206 = v205;
        }
        if (v206)
        {
          unint64_t v207 = (char *)sub_5714((uint64_t)(v191 + 618), v206);
          uint64_t v193 = (uint64_t *)v191[617];
          unint64_t v195 = (uint64_t *)v191[616];
        }
        else
        {
          unint64_t v207 = 0;
        }
        uint64_t v208 = (uint64_t *)&v207[8 * v203];
        int v209 = &v207[8 * v206];
        *uint64_t v208 = v192;
        unint64_t v202 = v208 + 1;
        while (v193 != v195)
        {
          uint64_t v211 = *--v193;
          *--uint64_t v208 = v211;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v190 != 1) {
        goto LABEL_294;
      }
      int v191 = *(void **)a1[1];
      uint64_t v192 = *(_DWORD *)(a1[2] + 44) & 0x1FFFFLL;
      uint64_t v193 = (uint64_t *)v191[617];
      unint64_t v194 = v191[618];
      if ((unint64_t)v193 >= v194)
      {
        unint64_t v195 = (uint64_t *)v191[616];
        uint64_t v196 = v193 - v195;
        if ((unint64_t)(v196 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v197 = v194 - (void)v195;
        unint64_t v198 = (uint64_t)(v194 - (void)v195) >> 2;
        if (v198 <= v196 + 1) {
          unint64_t v198 = v196 + 1;
        }
        if (v197 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v199 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v199 = v198;
        }
        if (v199)
        {
          unint64_t v200 = (char *)sub_5714((uint64_t)(v191 + 618), v199);
          uint64_t v193 = (uint64_t *)v191[617];
          unint64_t v195 = (uint64_t *)v191[616];
        }
        else
        {
          unint64_t v200 = 0;
        }
        uint64_t v208 = (uint64_t *)&v200[8 * v196];
        int v209 = &v200[8 * v199];
        *uint64_t v208 = v192;
        unint64_t v202 = v208 + 1;
        while (v193 != v195)
        {
          uint64_t v210 = *--v193;
          *--uint64_t v208 = v210;
        }
LABEL_291:
        v191[616] = v208;
        v191[617] = v202;
        v191[618] = v209;
        if (v195) {
          operator delete(v195);
        }
        goto LABEL_293;
      }
    }
    uint64_t *v193 = v192;
    unint64_t v202 = v193 + 1;
LABEL_293:
    v191[617] = v202;
LABEL_294:
    int v212 = 1 << *(_DWORD *)(v3 + 48);
    if (v212 == 2)
    {
      int v213 = *(void **)a1[1];
      uint64_t v214 = *(_DWORD *)(a1[2] + 80) & 0x1FFFFLL;
      uint64_t v215 = (uint64_t *)v213[620];
      unint64_t v223 = v213[621];
      if ((unint64_t)v215 >= v223)
      {
        unint64_t v217 = (uint64_t *)v213[619];
        uint64_t v225 = v215 - v217;
        if ((unint64_t)(v225 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v226 = v223 - (void)v217;
        unint64_t v227 = (uint64_t)(v223 - (void)v217) >> 2;
        if (v227 <= v225 + 1) {
          unint64_t v227 = v225 + 1;
        }
        if (v226 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v228 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v228 = v227;
        }
        if (v228)
        {
          unint64_t v229 = (char *)sub_5714((uint64_t)(v213 + 621), v228);
          uint64_t v215 = (uint64_t *)v213[620];
          unint64_t v217 = (uint64_t *)v213[619];
        }
        else
        {
          unint64_t v229 = 0;
        }
        uint64_t v230 = (uint64_t *)&v229[8 * v225];
        int v231 = &v229[8 * v228];
        uint64_t *v230 = v214;
        unint64_t v224 = v230 + 1;
        while (v215 != v217)
        {
          uint64_t v233 = *--v215;
          *--uint64_t v230 = v233;
        }
        goto LABEL_323;
      }
    }
    else
    {
      if (v212 != 1) {
        goto LABEL_326;
      }
      int v213 = *(void **)a1[1];
      uint64_t v214 = *(_DWORD *)(a1[2] + 80) & 0x1FFFFLL;
      uint64_t v215 = (uint64_t *)v213[620];
      unint64_t v216 = v213[621];
      if ((unint64_t)v215 >= v216)
      {
        unint64_t v217 = (uint64_t *)v213[619];
        uint64_t v218 = v215 - v217;
        if ((unint64_t)(v218 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v219 = v216 - (void)v217;
        unint64_t v220 = (uint64_t)(v216 - (void)v217) >> 2;
        if (v220 <= v218 + 1) {
          unint64_t v220 = v218 + 1;
        }
        if (v219 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v221 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v221 = v220;
        }
        if (v221)
        {
          unint64_t v222 = (char *)sub_5714((uint64_t)(v213 + 621), v221);
          uint64_t v215 = (uint64_t *)v213[620];
          unint64_t v217 = (uint64_t *)v213[619];
        }
        else
        {
          unint64_t v222 = 0;
        }
        uint64_t v230 = (uint64_t *)&v222[8 * v218];
        int v231 = &v222[8 * v221];
        uint64_t *v230 = v214;
        unint64_t v224 = v230 + 1;
        while (v215 != v217)
        {
          uint64_t v232 = *--v215;
          *--uint64_t v230 = v232;
        }
LABEL_323:
        v213[619] = v230;
        v213[620] = v224;
        v213[621] = v231;
        if (v217) {
          operator delete(v217);
        }
        goto LABEL_325;
      }
    }
    *uint64_t v215 = v214;
    unint64_t v224 = v215 + 1;
LABEL_325:
    v213[620] = v224;
LABEL_326:
    int v234 = 1 << *(_DWORD *)(v3 + 48);
    if (v234 == 2)
    {
      int v235 = *(void **)a1[1];
      uint64_t v236 = *(_WORD *)(a1[2] + 24) & 0x7FFF;
      uint64_t v237 = (char *)v235[623];
      unint64_t v245 = v235[624];
      if ((unint64_t)v237 >= v245)
      {
        unint64_t v239 = (char *)v235[622];
        uint64_t v247 = (v237 - v239) >> 3;
        if ((unint64_t)(v247 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v248 = v245 - (void)v239;
        unint64_t v249 = (uint64_t)(v245 - (void)v239) >> 2;
        if (v249 <= v247 + 1) {
          unint64_t v249 = v247 + 1;
        }
        if (v248 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v250 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v250 = v249;
        }
        if (v250)
        {
          unint64_t v251 = (char *)sub_5714((uint64_t)(v235 + 624), v250);
          uint64_t v237 = (char *)v235[623];
          unint64_t v239 = (char *)v235[622];
        }
        else
        {
          unint64_t v251 = 0;
        }
        uint64_t v252 = &v251[8 * v247];
        uint64_t v253 = &v251[8 * v250];
        *(void *)uint64_t v252 = v236;
        unint64_t v246 = v252 + 8;
        while (v237 != v239)
        {
          uint64_t v255 = *((void *)v237 - 1);
          v237 -= 8;
          *((void *)v252 - 1) = v255;
          v252 -= 8;
        }
        goto LABEL_355;
      }
    }
    else
    {
      if (v234 != 1) {
        goto LABEL_358;
      }
      int v235 = *(void **)a1[1];
      uint64_t v236 = *(_WORD *)(a1[2] + 24) & 0x7FFF;
      uint64_t v237 = (char *)v235[623];
      unint64_t v238 = v235[624];
      if ((unint64_t)v237 >= v238)
      {
        unint64_t v239 = (char *)v235[622];
        uint64_t v240 = (v237 - v239) >> 3;
        if ((unint64_t)(v240 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v241 = v238 - (void)v239;
        unint64_t v242 = (uint64_t)(v238 - (void)v239) >> 2;
        if (v242 <= v240 + 1) {
          unint64_t v242 = v240 + 1;
        }
        if (v241 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v243 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v243 = v242;
        }
        if (v243)
        {
          unint64_t v244 = (char *)sub_5714((uint64_t)(v235 + 624), v243);
          uint64_t v237 = (char *)v235[623];
          unint64_t v239 = (char *)v235[622];
        }
        else
        {
          unint64_t v244 = 0;
        }
        uint64_t v252 = &v244[8 * v240];
        uint64_t v253 = &v244[8 * v243];
        *(void *)uint64_t v252 = v236;
        unint64_t v246 = v252 + 8;
        while (v237 != v239)
        {
          uint64_t v254 = *((void *)v237 - 1);
          v237 -= 8;
          *((void *)v252 - 1) = v254;
          v252 -= 8;
        }
LABEL_355:
        v235[622] = v252;
        v235[623] = v246;
        v235[624] = v253;
        if (v239) {
          operator delete(v239);
        }
        goto LABEL_357;
      }
    }
    *(void *)uint64_t v237 = v236;
    unint64_t v246 = v237 + 8;
LABEL_357:
    v235[623] = v246;
LABEL_358:
    int v256 = 1 << *(_DWORD *)(v3 + 48);
    if (v256 == 2)
    {
      int v257 = *(void **)a1[1];
      uint64_t v258 = *(_WORD *)(a1[2] + 20) & 0x7FFF;
      uint64_t v259 = (char *)v257[626];
      unint64_t v267 = v257[627];
      if ((unint64_t)v259 >= v267)
      {
        unint64_t v261 = (char *)v257[625];
        uint64_t v269 = (v259 - v261) >> 3;
        if ((unint64_t)(v269 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v270 = v267 - (void)v261;
        unint64_t v271 = (uint64_t)(v267 - (void)v261) >> 2;
        if (v271 <= v269 + 1) {
          unint64_t v271 = v269 + 1;
        }
        if (v270 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v272 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v272 = v271;
        }
        if (v272)
        {
          unint64_t v273 = (char *)sub_5714((uint64_t)(v257 + 627), v272);
          uint64_t v259 = (char *)v257[626];
          unint64_t v261 = (char *)v257[625];
        }
        else
        {
          unint64_t v273 = 0;
        }
        uint64_t v274 = &v273[8 * v269];
        int v275 = &v273[8 * v272];
        *(void *)uint64_t v274 = v258;
        unint64_t v268 = v274 + 8;
        while (v259 != v261)
        {
          uint64_t v277 = *((void *)v259 - 1);
          v259 -= 8;
          *((void *)v274 - 1) = v277;
          v274 -= 8;
        }
        goto LABEL_387;
      }
    }
    else
    {
      if (v256 != 1) {
        goto LABEL_390;
      }
      int v257 = *(void **)a1[1];
      uint64_t v258 = *(_WORD *)(a1[2] + 20) & 0x7FFF;
      uint64_t v259 = (char *)v257[626];
      unint64_t v260 = v257[627];
      if ((unint64_t)v259 >= v260)
      {
        unint64_t v261 = (char *)v257[625];
        uint64_t v262 = (v259 - v261) >> 3;
        if ((unint64_t)(v262 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v263 = v260 - (void)v261;
        unint64_t v264 = (uint64_t)(v260 - (void)v261) >> 2;
        if (v264 <= v262 + 1) {
          unint64_t v264 = v262 + 1;
        }
        if (v263 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v265 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v265 = v264;
        }
        if (v265)
        {
          unint64_t v266 = (char *)sub_5714((uint64_t)(v257 + 627), v265);
          uint64_t v259 = (char *)v257[626];
          unint64_t v261 = (char *)v257[625];
        }
        else
        {
          unint64_t v266 = 0;
        }
        uint64_t v274 = &v266[8 * v262];
        int v275 = &v266[8 * v265];
        *(void *)uint64_t v274 = v258;
        unint64_t v268 = v274 + 8;
        while (v259 != v261)
        {
          uint64_t v276 = *((void *)v259 - 1);
          v259 -= 8;
          *((void *)v274 - 1) = v276;
          v274 -= 8;
        }
LABEL_387:
        v257[625] = v274;
        v257[626] = v268;
        v257[627] = v275;
        if (v261) {
          operator delete(v261);
        }
        goto LABEL_389;
      }
    }
    *(void *)uint64_t v259 = v258;
    unint64_t v268 = v259 + 8;
LABEL_389:
    v257[626] = v268;
LABEL_390:
    int v278 = 1 << *(_DWORD *)(v3 + 48);
    if (v278 == 2)
    {
      int v279 = *(void **)a1[1];
      uint64_t v280 = *(_DWORD *)(a1[2] + 72) & 0xFFFFFLL;
      uint64_t v281 = (uint64_t *)v279[629];
      unint64_t v289 = v279[630];
      if ((unint64_t)v281 >= v289)
      {
        unint64_t v283 = (uint64_t *)v279[628];
        uint64_t v291 = v281 - v283;
        if ((unint64_t)(v291 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v292 = v289 - (void)v283;
        unint64_t v293 = (uint64_t)(v289 - (void)v283) >> 2;
        if (v293 <= v291 + 1) {
          unint64_t v293 = v291 + 1;
        }
        if (v292 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v294 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v294 = v293;
        }
        if (v294)
        {
          unint64_t v295 = (char *)sub_5714((uint64_t)(v279 + 630), v294);
          uint64_t v281 = (uint64_t *)v279[629];
          unint64_t v283 = (uint64_t *)v279[628];
        }
        else
        {
          unint64_t v295 = 0;
        }
        unint64_t v296 = (uint64_t *)&v295[8 * v291];
        unint64_t v297 = &v295[8 * v294];
        *unint64_t v296 = v280;
        unint64_t v290 = v296 + 1;
        while (v281 != v283)
        {
          uint64_t v299 = *--v281;
          *--unint64_t v296 = v299;
        }
        goto LABEL_419;
      }
    }
    else
    {
      if (v278 != 1) {
        goto LABEL_422;
      }
      int v279 = *(void **)a1[1];
      uint64_t v280 = *(_DWORD *)(a1[2] + 72) & 0xFFFFFLL;
      uint64_t v281 = (uint64_t *)v279[629];
      unint64_t v282 = v279[630];
      if ((unint64_t)v281 >= v282)
      {
        unint64_t v283 = (uint64_t *)v279[628];
        uint64_t v284 = v281 - v283;
        if ((unint64_t)(v284 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v285 = v282 - (void)v283;
        unint64_t v286 = (uint64_t)(v282 - (void)v283) >> 2;
        if (v286 <= v284 + 1) {
          unint64_t v286 = v284 + 1;
        }
        if (v285 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v287 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v287 = v286;
        }
        if (v287)
        {
          unint64_t v288 = (char *)sub_5714((uint64_t)(v279 + 630), v287);
          uint64_t v281 = (uint64_t *)v279[629];
          unint64_t v283 = (uint64_t *)v279[628];
        }
        else
        {
          unint64_t v288 = 0;
        }
        unint64_t v296 = (uint64_t *)&v288[8 * v284];
        unint64_t v297 = &v288[8 * v287];
        *unint64_t v296 = v280;
        unint64_t v290 = v296 + 1;
        while (v281 != v283)
        {
          uint64_t v298 = *--v281;
          *--unint64_t v296 = v298;
        }
LABEL_419:
        v279[628] = v296;
        v279[629] = v290;
        v279[630] = v297;
        if (v283) {
          operator delete(v283);
        }
        goto LABEL_421;
      }
    }
    uint64_t *v281 = v280;
    unint64_t v290 = v281 + 1;
LABEL_421:
    v279[629] = v290;
LABEL_422:
    int v300 = 1 << *(_DWORD *)(v3 + 48);
    if (v300 == 2)
    {
      uint64_t v301 = *(void **)a1[1];
      uint64_t v302 = *(_DWORD *)(a1[2] + 64) & 0x1FFFFLL;
      uint64_t v303 = (uint64_t *)v301[632];
      unint64_t v311 = v301[633];
      if ((unint64_t)v303 >= v311)
      {
        unint64_t v305 = (uint64_t *)v301[631];
        uint64_t v313 = v303 - v305;
        if ((unint64_t)(v313 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v314 = v311 - (void)v305;
        unint64_t v315 = (uint64_t)(v311 - (void)v305) >> 2;
        if (v315 <= v313 + 1) {
          unint64_t v315 = v313 + 1;
        }
        if (v314 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v316 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v316 = v315;
        }
        if (v316)
        {
          unint64_t v317 = (char *)sub_5714((uint64_t)(v301 + 633), v316);
          uint64_t v303 = (uint64_t *)v301[632];
          unint64_t v305 = (uint64_t *)v301[631];
        }
        else
        {
          unint64_t v317 = 0;
        }
        uint64_t v318 = (uint64_t *)&v317[8 * v313];
        int v319 = &v317[8 * v316];
        *uint64_t v318 = v302;
        unint64_t v312 = v318 + 1;
        while (v303 != v305)
        {
          uint64_t v321 = *--v303;
          *--uint64_t v318 = v321;
        }
        goto LABEL_451;
      }
    }
    else
    {
      if (v300 != 1) {
        goto LABEL_454;
      }
      uint64_t v301 = *(void **)a1[1];
      uint64_t v302 = *(_DWORD *)(a1[2] + 64) & 0x1FFFFLL;
      uint64_t v303 = (uint64_t *)v301[632];
      unint64_t v304 = v301[633];
      if ((unint64_t)v303 >= v304)
      {
        unint64_t v305 = (uint64_t *)v301[631];
        uint64_t v306 = v303 - v305;
        if ((unint64_t)(v306 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v307 = v304 - (void)v305;
        unint64_t v308 = (uint64_t)(v304 - (void)v305) >> 2;
        if (v308 <= v306 + 1) {
          unint64_t v308 = v306 + 1;
        }
        if (v307 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v309 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v309 = v308;
        }
        if (v309)
        {
          unint64_t v310 = (char *)sub_5714((uint64_t)(v301 + 633), v309);
          uint64_t v303 = (uint64_t *)v301[632];
          unint64_t v305 = (uint64_t *)v301[631];
        }
        else
        {
          unint64_t v310 = 0;
        }
        uint64_t v318 = (uint64_t *)&v310[8 * v306];
        int v319 = &v310[8 * v309];
        *uint64_t v318 = v302;
        unint64_t v312 = v318 + 1;
        while (v303 != v305)
        {
          uint64_t v320 = *--v303;
          *--uint64_t v318 = v320;
        }
LABEL_451:
        v301[631] = v318;
        v301[632] = v312;
        v301[633] = v319;
        if (v305) {
          operator delete(v305);
        }
        goto LABEL_453;
      }
    }
    uint64_t *v303 = v302;
    unint64_t v312 = v303 + 1;
LABEL_453:
    v301[632] = v312;
LABEL_454:
    int v322 = 1 << *(_DWORD *)(v3 + 48);
    if (v322 == 2)
    {
      int v323 = *(void **)a1[1];
      uint64_t v324 = *(_DWORD *)(a1[2] + 68) & 0x1FFFFLL;
      uint64_t v325 = (uint64_t *)v323[635];
      unint64_t v333 = v323[636];
      if ((unint64_t)v325 >= v333)
      {
        unint64_t v327 = (uint64_t *)v323[634];
        uint64_t v335 = v325 - v327;
        if ((unint64_t)(v335 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v336 = v333 - (void)v327;
        unint64_t v337 = (uint64_t)(v333 - (void)v327) >> 2;
        if (v337 <= v335 + 1) {
          unint64_t v337 = v335 + 1;
        }
        if (v336 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v338 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v338 = v337;
        }
        if (v338)
        {
          unint64_t v339 = (char *)sub_5714((uint64_t)(v323 + 636), v338);
          uint64_t v325 = (uint64_t *)v323[635];
          unint64_t v327 = (uint64_t *)v323[634];
        }
        else
        {
          unint64_t v339 = 0;
        }
        uint64_t v340 = (uint64_t *)&v339[8 * v335];
        uint64_t v341 = &v339[8 * v338];
        uint64_t *v340 = v324;
        unint64_t v334 = v340 + 1;
        while (v325 != v327)
        {
          uint64_t v343 = *--v325;
          *--uint64_t v340 = v343;
        }
        goto LABEL_483;
      }
    }
    else
    {
      if (v322 != 1) {
        goto LABEL_486;
      }
      int v323 = *(void **)a1[1];
      uint64_t v324 = *(_DWORD *)(a1[2] + 68) & 0x1FFFFLL;
      uint64_t v325 = (uint64_t *)v323[635];
      unint64_t v326 = v323[636];
      if ((unint64_t)v325 >= v326)
      {
        unint64_t v327 = (uint64_t *)v323[634];
        uint64_t v328 = v325 - v327;
        if ((unint64_t)(v328 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v329 = v326 - (void)v327;
        unint64_t v330 = (uint64_t)(v326 - (void)v327) >> 2;
        if (v330 <= v328 + 1) {
          unint64_t v330 = v328 + 1;
        }
        if (v329 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v331 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v331 = v330;
        }
        if (v331)
        {
          unint64_t v332 = (char *)sub_5714((uint64_t)(v323 + 636), v331);
          uint64_t v325 = (uint64_t *)v323[635];
          unint64_t v327 = (uint64_t *)v323[634];
        }
        else
        {
          unint64_t v332 = 0;
        }
        uint64_t v340 = (uint64_t *)&v332[8 * v328];
        uint64_t v341 = &v332[8 * v331];
        uint64_t *v340 = v324;
        unint64_t v334 = v340 + 1;
        while (v325 != v327)
        {
          uint64_t v342 = *--v325;
          *--uint64_t v340 = v342;
        }
LABEL_483:
        v323[634] = v340;
        v323[635] = v334;
        v323[636] = v341;
        if (v327) {
          operator delete(v327);
        }
        goto LABEL_485;
      }
    }
    uint64_t *v325 = v324;
    unint64_t v334 = v325 + 1;
LABEL_485:
    v323[635] = v334;
LABEL_486:
    int v344 = 1 << *(_DWORD *)(v3 + 48);
    if (v344 == 2)
    {
      uint64_t v356 = a1[1];
      unint64_t v346 = *(void **)v356;
      uint64_t v347 = *(unsigned __int16 *)(a1[2] + 54);
      uint64_t v348 = *(char **)(*(void *)v356 + 5104);
      unint64_t v357 = *(void *)(*(void *)v356 + 5112);
      if ((unint64_t)v348 >= v357)
      {
        unint64_t v350 = (char *)v346[637];
        uint64_t v359 = (v348 - v350) >> 3;
        if ((unint64_t)(v359 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v360 = v357 - (void)v350;
        unint64_t v361 = (uint64_t)(v357 - (void)v350) >> 2;
        if (v361 <= v359 + 1) {
          unint64_t v361 = v359 + 1;
        }
        if (v360 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v362 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v362 = v361;
        }
        if (v362)
        {
          uint64_t v363 = (char *)sub_5714((uint64_t)(v346 + 639), v362);
          uint64_t v348 = (char *)v346[638];
          unint64_t v350 = (char *)v346[637];
        }
        else
        {
          uint64_t v363 = 0;
        }
        uint64_t v364 = &v363[8 * v359];
        uint64_t v365 = &v363[8 * v362];
        *(void *)uint64_t v364 = v347;
        uint64_t v358 = v364 + 8;
        while (v348 != v350)
        {
          uint64_t v367 = *((void *)v348 - 1);
          v348 -= 8;
          *((void *)v364 - 1) = v367;
          v364 -= 8;
        }
        goto LABEL_515;
      }
    }
    else
    {
      if (v344 != 1) {
        goto LABEL_518;
      }
      uint64_t v345 = a1[1];
      unint64_t v346 = *(void **)v345;
      uint64_t v347 = *(unsigned __int16 *)(a1[2] + 54);
      uint64_t v348 = *(char **)(*(void *)v345 + 5104);
      unint64_t v349 = *(void *)(*(void *)v345 + 5112);
      if ((unint64_t)v348 >= v349)
      {
        unint64_t v350 = (char *)v346[637];
        uint64_t v351 = (v348 - v350) >> 3;
        if ((unint64_t)(v351 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v352 = v349 - (void)v350;
        unint64_t v353 = (uint64_t)(v349 - (void)v350) >> 2;
        if (v353 <= v351 + 1) {
          unint64_t v353 = v351 + 1;
        }
        if (v352 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v354 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v354 = v353;
        }
        if (v354)
        {
          unint64_t v355 = (char *)sub_5714((uint64_t)(v346 + 639), v354);
          uint64_t v348 = (char *)v346[638];
          unint64_t v350 = (char *)v346[637];
        }
        else
        {
          unint64_t v355 = 0;
        }
        uint64_t v364 = &v355[8 * v351];
        uint64_t v365 = &v355[8 * v354];
        *(void *)uint64_t v364 = v347;
        uint64_t v358 = v364 + 8;
        while (v348 != v350)
        {
          uint64_t v366 = *((void *)v348 - 1);
          v348 -= 8;
          *((void *)v364 - 1) = v366;
          v364 -= 8;
        }
LABEL_515:
        v346[637] = v364;
        v346[638] = v358;
        v346[639] = v365;
        if (v350) {
          operator delete(v350);
        }
        goto LABEL_517;
      }
    }
    *(void *)uint64_t v348 = v347;
    uint64_t v358 = v348 + 8;
LABEL_517:
    v346[638] = v358;
LABEL_518:
    int v368 = 1 << *(_DWORD *)(v3 + 48);
    if (v368 == 2)
    {
      uint64_t v380 = a1[1];
      unint64_t v370 = *(void **)v380;
      uint64_t v371 = *(unsigned __int16 *)(a1[2] + 56);
      unint64_t v372 = *(char **)(*(void *)v380 + 5128);
      unint64_t v381 = *(void *)(*(void *)v380 + 5136);
      if ((unint64_t)v372 >= v381)
      {
        unint64_t v374 = (char *)v370[640];
        uint64_t v383 = (v372 - v374) >> 3;
        if ((unint64_t)(v383 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v384 = v381 - (void)v374;
        unint64_t v385 = (uint64_t)(v381 - (void)v374) >> 2;
        if (v385 <= v383 + 1) {
          unint64_t v385 = v383 + 1;
        }
        if (v384 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v386 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v386 = v385;
        }
        if (v386)
        {
          uint64_t v387 = (char *)sub_5714((uint64_t)(v370 + 642), v386);
          unint64_t v372 = (char *)v370[641];
          unint64_t v374 = (char *)v370[640];
        }
        else
        {
          uint64_t v387 = 0;
        }
        uint64_t v388 = &v387[8 * v383];
        int v389 = &v387[8 * v386];
        *(void *)uint64_t v388 = v371;
        unint64_t v382 = v388 + 8;
        while (v372 != v374)
        {
          uint64_t v391 = *((void *)v372 - 1);
          v372 -= 8;
          *((void *)v388 - 1) = v391;
          v388 -= 8;
        }
        goto LABEL_547;
      }
    }
    else
    {
      if (v368 != 1) {
        goto LABEL_550;
      }
      uint64_t v369 = a1[1];
      unint64_t v370 = *(void **)v369;
      uint64_t v371 = *(unsigned __int16 *)(a1[2] + 56);
      unint64_t v372 = *(char **)(*(void *)v369 + 5128);
      unint64_t v373 = *(void *)(*(void *)v369 + 5136);
      if ((unint64_t)v372 >= v373)
      {
        unint64_t v374 = (char *)v370[640];
        uint64_t v375 = (v372 - v374) >> 3;
        if ((unint64_t)(v375 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v376 = v373 - (void)v374;
        unint64_t v377 = (uint64_t)(v373 - (void)v374) >> 2;
        if (v377 <= v375 + 1) {
          unint64_t v377 = v375 + 1;
        }
        if (v376 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v378 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v378 = v377;
        }
        if (v378)
        {
          unint64_t v379 = (char *)sub_5714((uint64_t)(v370 + 642), v378);
          unint64_t v372 = (char *)v370[641];
          unint64_t v374 = (char *)v370[640];
        }
        else
        {
          unint64_t v379 = 0;
        }
        uint64_t v388 = &v379[8 * v375];
        int v389 = &v379[8 * v378];
        *(void *)uint64_t v388 = v371;
        unint64_t v382 = v388 + 8;
        while (v372 != v374)
        {
          uint64_t v390 = *((void *)v372 - 1);
          v372 -= 8;
          *((void *)v388 - 1) = v390;
          v388 -= 8;
        }
LABEL_547:
        v370[640] = v388;
        v370[641] = v382;
        v370[642] = v389;
        if (v374) {
          operator delete(v374);
        }
        goto LABEL_549;
      }
    }
    *(void *)unint64_t v372 = v371;
    unint64_t v382 = v372 + 8;
LABEL_549:
    v370[641] = v382;
LABEL_550:
    int v392 = 1 << *(_DWORD *)(v3 + 48);
    if (v392 == 2)
    {
      uint64_t v404 = a1[1];
      uint64_t v394 = *(void **)v404;
      uint64_t v395 = *(unsigned __int16 *)(a1[2] + 76);
      unint64_t v396 = *(char **)(*(void *)v404 + 5152);
      unint64_t v405 = *(void *)(*(void *)v404 + 5160);
      if ((unint64_t)v396 >= v405)
      {
        unint64_t v398 = (char *)v394[643];
        uint64_t v407 = (v396 - v398) >> 3;
        if ((unint64_t)(v407 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v408 = v405 - (void)v398;
        unint64_t v409 = (uint64_t)(v405 - (void)v398) >> 2;
        if (v409 <= v407 + 1) {
          unint64_t v409 = v407 + 1;
        }
        if (v408 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v410 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v410 = v409;
        }
        if (v410)
        {
          int v411 = (char *)sub_5714((uint64_t)(v394 + 645), v410);
          unint64_t v396 = (char *)v394[644];
          unint64_t v398 = (char *)v394[643];
        }
        else
        {
          int v411 = 0;
        }
        uint64_t v412 = &v411[8 * v407];
        uint64_t v413 = &v411[8 * v410];
        *(void *)uint64_t v412 = v395;
        uint64_t v406 = v412 + 8;
        while (v396 != v398)
        {
          uint64_t v415 = *((void *)v396 - 1);
          v396 -= 8;
          *((void *)v412 - 1) = v415;
          v412 -= 8;
        }
        goto LABEL_579;
      }
    }
    else
    {
      if (v392 != 1) {
        goto LABEL_582;
      }
      uint64_t v393 = a1[1];
      uint64_t v394 = *(void **)v393;
      uint64_t v395 = *(unsigned __int16 *)(a1[2] + 76);
      unint64_t v396 = *(char **)(*(void *)v393 + 5152);
      unint64_t v397 = *(void *)(*(void *)v393 + 5160);
      if ((unint64_t)v396 >= v397)
      {
        unint64_t v398 = (char *)v394[643];
        uint64_t v399 = (v396 - v398) >> 3;
        if ((unint64_t)(v399 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v400 = v397 - (void)v398;
        unint64_t v401 = (uint64_t)(v397 - (void)v398) >> 2;
        if (v401 <= v399 + 1) {
          unint64_t v401 = v399 + 1;
        }
        if (v400 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v402 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v402 = v401;
        }
        if (v402)
        {
          unint64_t v403 = (char *)sub_5714((uint64_t)(v394 + 645), v402);
          unint64_t v396 = (char *)v394[644];
          unint64_t v398 = (char *)v394[643];
        }
        else
        {
          unint64_t v403 = 0;
        }
        uint64_t v412 = &v403[8 * v399];
        uint64_t v413 = &v403[8 * v402];
        *(void *)uint64_t v412 = v395;
        uint64_t v406 = v412 + 8;
        while (v396 != v398)
        {
          uint64_t v414 = *((void *)v396 - 1);
          v396 -= 8;
          *((void *)v412 - 1) = v414;
          v412 -= 8;
        }
LABEL_579:
        v394[643] = v412;
        v394[644] = v406;
        v394[645] = v413;
        if (v398) {
          operator delete(v398);
        }
        goto LABEL_581;
      }
    }
    *(void *)unint64_t v396 = v395;
    uint64_t v406 = v396 + 8;
LABEL_581:
    v394[644] = v406;
LABEL_582:
    int v416 = 1 << *(_DWORD *)(v3 + 48);
    if (v416 == 2)
    {
      uint64_t v428 = a1[1];
      unint64_t v418 = *(void **)v428;
      uint64_t v419 = *(unsigned __int16 *)(a1[2] + 86);
      unint64_t v420 = *(char **)(*(void *)v428 + 5176);
      unint64_t v429 = *(void *)(*(void *)v428 + 5184);
      if ((unint64_t)v420 >= v429)
      {
        unint64_t v422 = (char *)v418[646];
        uint64_t v431 = (v420 - v422) >> 3;
        if ((unint64_t)(v431 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v432 = v429 - (void)v422;
        unint64_t v433 = (uint64_t)(v429 - (void)v422) >> 2;
        if (v433 <= v431 + 1) {
          unint64_t v433 = v431 + 1;
        }
        if (v432 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v434 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v434 = v433;
        }
        if (v434)
        {
          uint64_t v435 = (char *)sub_5714((uint64_t)(v418 + 648), v434);
          unint64_t v420 = (char *)v418[647];
          unint64_t v422 = (char *)v418[646];
        }
        else
        {
          uint64_t v435 = 0;
        }
        uint64_t v436 = &v435[8 * v431];
        unint64_t v437 = &v435[8 * v434];
        *(void *)uint64_t v436 = v419;
        uint64_t v430 = v436 + 8;
        while (v420 != v422)
        {
          uint64_t v439 = *((void *)v420 - 1);
          v420 -= 8;
          *((void *)v436 - 1) = v439;
          v436 -= 8;
        }
        goto LABEL_611;
      }
    }
    else
    {
      if (v416 != 1) {
        goto LABEL_614;
      }
      uint64_t v417 = a1[1];
      unint64_t v418 = *(void **)v417;
      uint64_t v419 = *(unsigned __int16 *)(a1[2] + 86);
      unint64_t v420 = *(char **)(*(void *)v417 + 5176);
      unint64_t v421 = *(void *)(*(void *)v417 + 5184);
      if ((unint64_t)v420 >= v421)
      {
        unint64_t v422 = (char *)v418[646];
        uint64_t v423 = (v420 - v422) >> 3;
        if ((unint64_t)(v423 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v424 = v421 - (void)v422;
        unint64_t v425 = (uint64_t)(v421 - (void)v422) >> 2;
        if (v425 <= v423 + 1) {
          unint64_t v425 = v423 + 1;
        }
        if (v424 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v426 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v426 = v425;
        }
        if (v426)
        {
          unint64_t v427 = (char *)sub_5714((uint64_t)(v418 + 648), v426);
          unint64_t v420 = (char *)v418[647];
          unint64_t v422 = (char *)v418[646];
        }
        else
        {
          unint64_t v427 = 0;
        }
        uint64_t v436 = &v427[8 * v423];
        unint64_t v437 = &v427[8 * v426];
        *(void *)uint64_t v436 = v419;
        uint64_t v430 = v436 + 8;
        while (v420 != v422)
        {
          uint64_t v438 = *((void *)v420 - 1);
          v420 -= 8;
          *((void *)v436 - 1) = v438;
          v436 -= 8;
        }
LABEL_611:
        v418[646] = v436;
        v418[647] = v430;
        v418[648] = v437;
        if (v422) {
          operator delete(v422);
        }
        goto LABEL_613;
      }
    }
    *(void *)unint64_t v420 = v419;
    uint64_t v430 = v420 + 8;
LABEL_613:
    v418[647] = v430;
LABEL_614:
    int v440 = 1 << *(_DWORD *)(v3 + 48);
    if (v440 == 2)
    {
      uint64_t v452 = a1[1];
      unint64_t v442 = *(void **)v452;
      uint64_t v443 = *(unsigned __int16 *)(a1[2] + 78);
      unint64_t v444 = *(char **)(*(void *)v452 + 5200);
      unint64_t v453 = *(void *)(*(void *)v452 + 5208);
      if ((unint64_t)v444 >= v453)
      {
        uint64_t v446 = (char *)v442[649];
        uint64_t v455 = (v444 - v446) >> 3;
        if ((unint64_t)(v455 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v456 = v453 - (void)v446;
        unint64_t v457 = (uint64_t)(v453 - (void)v446) >> 2;
        if (v457 <= v455 + 1) {
          unint64_t v457 = v455 + 1;
        }
        if (v456 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v458 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v458 = v457;
        }
        if (v458)
        {
          unint64_t v459 = (char *)sub_5714((uint64_t)(v442 + 651), v458);
          unint64_t v444 = (char *)v442[650];
          uint64_t v446 = (char *)v442[649];
        }
        else
        {
          unint64_t v459 = 0;
        }
        uint64_t v460 = &v459[8 * v455];
        uint64_t v461 = &v459[8 * v458];
        *(void *)uint64_t v460 = v443;
        uint64_t v454 = v460 + 8;
        while (v444 != v446)
        {
          uint64_t v463 = *((void *)v444 - 1);
          v444 -= 8;
          *((void *)v460 - 1) = v463;
          v460 -= 8;
        }
        goto LABEL_643;
      }
    }
    else
    {
      if (v440 != 1) {
        goto LABEL_646;
      }
      uint64_t v441 = a1[1];
      unint64_t v442 = *(void **)v441;
      uint64_t v443 = *(unsigned __int16 *)(a1[2] + 78);
      unint64_t v444 = *(char **)(*(void *)v441 + 5200);
      unint64_t v445 = *(void *)(*(void *)v441 + 5208);
      if ((unint64_t)v444 >= v445)
      {
        uint64_t v446 = (char *)v442[649];
        uint64_t v447 = (v444 - v446) >> 3;
        if ((unint64_t)(v447 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v448 = v445 - (void)v446;
        unint64_t v449 = (uint64_t)(v445 - (void)v446) >> 2;
        if (v449 <= v447 + 1) {
          unint64_t v449 = v447 + 1;
        }
        if (v448 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v450 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v450 = v449;
        }
        if (v450)
        {
          uint64_t v451 = (char *)sub_5714((uint64_t)(v442 + 651), v450);
          unint64_t v444 = (char *)v442[650];
          uint64_t v446 = (char *)v442[649];
        }
        else
        {
          uint64_t v451 = 0;
        }
        uint64_t v460 = &v451[8 * v447];
        uint64_t v461 = &v451[8 * v450];
        *(void *)uint64_t v460 = v443;
        uint64_t v454 = v460 + 8;
        while (v444 != v446)
        {
          uint64_t v462 = *((void *)v444 - 1);
          v444 -= 8;
          *((void *)v460 - 1) = v462;
          v460 -= 8;
        }
LABEL_643:
        v442[649] = v460;
        v442[650] = v454;
        v442[651] = v461;
        if (v446) {
          operator delete(v446);
        }
        goto LABEL_645;
      }
    }
    *(void *)unint64_t v444 = v443;
    uint64_t v454 = v444 + 8;
LABEL_645:
    v442[650] = v454;
LABEL_646:
    int v464 = 1 << *(_DWORD *)(v3 + 48);
    if (v464 == 2)
    {
      uint64_t v465 = *(void **)a1[1];
      uint64_t v466 = *(_DWORD *)(a1[2] + 48) & 0x1FFFFLL;
      unint64_t v467 = (uint64_t *)v465[653];
      unint64_t v475 = v465[654];
      if ((unint64_t)v467 >= v475)
      {
        unint64_t v469 = (uint64_t *)v465[652];
        uint64_t v477 = v467 - v469;
        if ((unint64_t)(v477 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v478 = v475 - (void)v469;
        unint64_t v479 = (uint64_t)(v475 - (void)v469) >> 2;
        if (v479 <= v477 + 1) {
          unint64_t v479 = v477 + 1;
        }
        if (v478 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v480 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v480 = v479;
        }
        if (v480)
        {
          unint64_t v481 = (char *)sub_5714((uint64_t)(v465 + 654), v480);
          unint64_t v467 = (uint64_t *)v465[653];
          unint64_t v469 = (uint64_t *)v465[652];
        }
        else
        {
          unint64_t v481 = 0;
        }
        uint64_t v482 = (uint64_t *)&v481[8 * v477];
        uint64_t v483 = &v481[8 * v480];
        uint64_t *v482 = v466;
        uint64_t v476 = v482 + 1;
        while (v467 != v469)
        {
          uint64_t v485 = *--v467;
          *--uint64_t v482 = v485;
        }
        goto LABEL_675;
      }
    }
    else
    {
      if (v464 != 1) {
        goto LABEL_678;
      }
      uint64_t v465 = *(void **)a1[1];
      uint64_t v466 = *(_DWORD *)(a1[2] + 48) & 0x1FFFFLL;
      unint64_t v467 = (uint64_t *)v465[653];
      unint64_t v468 = v465[654];
      if ((unint64_t)v467 >= v468)
      {
        unint64_t v469 = (uint64_t *)v465[652];
        uint64_t v470 = v467 - v469;
        if ((unint64_t)(v470 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v471 = v468 - (void)v469;
        unint64_t v472 = (uint64_t)(v468 - (void)v469) >> 2;
        if (v472 <= v470 + 1) {
          unint64_t v472 = v470 + 1;
        }
        if (v471 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v473 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v473 = v472;
        }
        if (v473)
        {
          uint64_t v474 = (char *)sub_5714((uint64_t)(v465 + 654), v473);
          unint64_t v467 = (uint64_t *)v465[653];
          unint64_t v469 = (uint64_t *)v465[652];
        }
        else
        {
          uint64_t v474 = 0;
        }
        uint64_t v482 = (uint64_t *)&v474[8 * v470];
        uint64_t v483 = &v474[8 * v473];
        uint64_t *v482 = v466;
        uint64_t v476 = v482 + 1;
        while (v467 != v469)
        {
          uint64_t v484 = *--v467;
          *--uint64_t v482 = v484;
        }
LABEL_675:
        v465[652] = v482;
        v465[653] = v476;
        v465[654] = v483;
        if (v469) {
          operator delete(v469);
        }
        goto LABEL_677;
      }
    }
    uint64_t *v467 = v466;
    uint64_t v476 = v467 + 1;
LABEL_677:
    v465[653] = v476;
LABEL_678:
    int v486 = 1 << *(_DWORD *)(v3 + 48);
    if (v486 == 2)
    {
      uint64_t v487 = *(void **)a1[1];
      uint64_t v488 = *(_WORD *)(a1[2] + 84) & 0x7FFF;
      unint64_t v489 = (char *)v487[656];
      unint64_t v497 = v487[657];
      if ((unint64_t)v489 >= v497)
      {
        unint64_t v491 = (char *)v487[655];
        uint64_t v499 = (v489 - v491) >> 3;
        if ((unint64_t)(v499 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v500 = v497 - (void)v491;
        unint64_t v501 = (uint64_t)(v497 - (void)v491) >> 2;
        if (v501 <= v499 + 1) {
          unint64_t v501 = v499 + 1;
        }
        if (v500 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v502 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v502 = v501;
        }
        if (v502)
        {
          unint64_t v503 = (char *)sub_5714((uint64_t)(v487 + 657), v502);
          unint64_t v489 = (char *)v487[656];
          unint64_t v491 = (char *)v487[655];
        }
        else
        {
          unint64_t v503 = 0;
        }
        unint64_t v504 = &v503[8 * v499];
        uint64_t v505 = &v503[8 * v502];
        *(void *)unint64_t v504 = v488;
        uint64_t v498 = v504 + 8;
        while (v489 != v491)
        {
          uint64_t v507 = *((void *)v489 - 1);
          v489 -= 8;
          *((void *)v504 - 1) = v507;
          v504 -= 8;
        }
        goto LABEL_707;
      }
    }
    else
    {
      if (v486 != 1) {
        goto LABEL_710;
      }
      uint64_t v487 = *(void **)a1[1];
      uint64_t v488 = *(_WORD *)(a1[2] + 84) & 0x7FFF;
      unint64_t v489 = (char *)v487[656];
      unint64_t v490 = v487[657];
      if ((unint64_t)v489 >= v490)
      {
        unint64_t v491 = (char *)v487[655];
        uint64_t v492 = (v489 - v491) >> 3;
        if ((unint64_t)(v492 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v493 = v490 - (void)v491;
        unint64_t v494 = (uint64_t)(v490 - (void)v491) >> 2;
        if (v494 <= v492 + 1) {
          unint64_t v494 = v492 + 1;
        }
        if (v493 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v495 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v495 = v494;
        }
        if (v495)
        {
          unint64_t v496 = (char *)sub_5714((uint64_t)(v487 + 657), v495);
          unint64_t v489 = (char *)v487[656];
          unint64_t v491 = (char *)v487[655];
        }
        else
        {
          unint64_t v496 = 0;
        }
        unint64_t v504 = &v496[8 * v492];
        uint64_t v505 = &v496[8 * v495];
        *(void *)unint64_t v504 = v488;
        uint64_t v498 = v504 + 8;
        while (v489 != v491)
        {
          uint64_t v506 = *((void *)v489 - 1);
          v489 -= 8;
          *((void *)v504 - 1) = v506;
          v504 -= 8;
        }
LABEL_707:
        v487[655] = v504;
        v487[656] = v498;
        v487[657] = v505;
        if (v491) {
          operator delete(v491);
        }
        goto LABEL_709;
      }
    }
    *(void *)unint64_t v489 = v488;
    uint64_t v498 = v489 + 8;
LABEL_709:
    v487[656] = v498;
LABEL_710:
    int v508 = 1 << *(_DWORD *)(v3 + 48);
    if (v508 == 2)
    {
      unint64_t v509 = *(void **)a1[1];
      uint64_t v510 = *(_WORD *)(a1[2] + 42) & 0x7FFF;
      unint64_t v511 = (char *)v509[659];
      unint64_t v519 = v509[660];
      if ((unint64_t)v511 >= v519)
      {
        unint64_t v513 = (char *)v509[658];
        uint64_t v521 = (v511 - v513) >> 3;
        if ((unint64_t)(v521 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v522 = v519 - (void)v513;
        unint64_t v523 = (uint64_t)(v519 - (void)v513) >> 2;
        if (v523 <= v521 + 1) {
          unint64_t v523 = v521 + 1;
        }
        if (v522 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v524 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v524 = v523;
        }
        if (v524)
        {
          unint64_t v525 = (char *)sub_5714((uint64_t)(v509 + 660), v524);
          unint64_t v511 = (char *)v509[659];
          unint64_t v513 = (char *)v509[658];
        }
        else
        {
          unint64_t v525 = 0;
        }
        unint64_t v526 = &v525[8 * v521];
        uint64_t v527 = &v525[8 * v524];
        *(void *)unint64_t v526 = v510;
        uint64_t v520 = v526 + 8;
        while (v511 != v513)
        {
          uint64_t v529 = *((void *)v511 - 1);
          v511 -= 8;
          *((void *)v526 - 1) = v529;
          v526 -= 8;
        }
        goto LABEL_739;
      }
    }
    else
    {
      if (v508 != 1) {
        goto LABEL_742;
      }
      unint64_t v509 = *(void **)a1[1];
      uint64_t v510 = *(_WORD *)(a1[2] + 42) & 0x7FFF;
      unint64_t v511 = (char *)v509[659];
      unint64_t v512 = v509[660];
      if ((unint64_t)v511 >= v512)
      {
        unint64_t v513 = (char *)v509[658];
        uint64_t v514 = (v511 - v513) >> 3;
        if ((unint64_t)(v514 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v515 = v512 - (void)v513;
        unint64_t v516 = (uint64_t)(v512 - (void)v513) >> 2;
        if (v516 <= v514 + 1) {
          unint64_t v516 = v514 + 1;
        }
        if (v515 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v517 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v517 = v516;
        }
        if (v517)
        {
          unsigned int v518 = (char *)sub_5714((uint64_t)(v509 + 660), v517);
          unint64_t v511 = (char *)v509[659];
          unint64_t v513 = (char *)v509[658];
        }
        else
        {
          unsigned int v518 = 0;
        }
        unint64_t v526 = &v518[8 * v514];
        uint64_t v527 = &v518[8 * v517];
        *(void *)unint64_t v526 = v510;
        uint64_t v520 = v526 + 8;
        while (v511 != v513)
        {
          uint64_t v528 = *((void *)v511 - 1);
          v511 -= 8;
          *((void *)v526 - 1) = v528;
          v526 -= 8;
        }
LABEL_739:
        v509[658] = v526;
        v509[659] = v520;
        v509[660] = v527;
        if (v513) {
          operator delete(v513);
        }
        goto LABEL_741;
      }
    }
    *(void *)unint64_t v511 = v510;
    uint64_t v520 = v511 + 8;
LABEL_741:
    v509[659] = v520;
LABEL_742:
    int v530 = 1 << *(_DWORD *)(v3 + 48);
    if (v530 == 2)
    {
      unint64_t v531 = *(void **)a1[1];
      uint64_t v532 = *(_WORD *)(a1[2] + 40) & 0x7FFF;
      unsigned int v533 = (char *)v531[662];
      unint64_t v541 = v531[663];
      if ((unint64_t)v533 >= v541)
      {
        unint64_t v535 = (char *)v531[661];
        uint64_t v543 = (v533 - v535) >> 3;
        if ((unint64_t)(v543 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v544 = v541 - (void)v535;
        unint64_t v545 = (uint64_t)(v541 - (void)v535) >> 2;
        if (v545 <= v543 + 1) {
          unint64_t v545 = v543 + 1;
        }
        if (v544 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v546 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v546 = v545;
        }
        if (v546)
        {
          unint64_t v547 = (char *)sub_5714((uint64_t)(v531 + 663), v546);
          unsigned int v533 = (char *)v531[662];
          unint64_t v535 = (char *)v531[661];
        }
        else
        {
          unint64_t v547 = 0;
        }
        unint64_t v548 = &v547[8 * v543];
        uint64_t v549 = &v547[8 * v546];
        *(void *)unint64_t v548 = v532;
        uint64_t v542 = v548 + 8;
        while (v533 != v535)
        {
          uint64_t v551 = *((void *)v533 - 1);
          v533 -= 8;
          *((void *)v548 - 1) = v551;
          v548 -= 8;
        }
        goto LABEL_771;
      }
    }
    else
    {
      if (v530 != 1) {
        goto LABEL_774;
      }
      unint64_t v531 = *(void **)a1[1];
      uint64_t v532 = *(_WORD *)(a1[2] + 40) & 0x7FFF;
      unsigned int v533 = (char *)v531[662];
      unint64_t v534 = v531[663];
      if ((unint64_t)v533 >= v534)
      {
        unint64_t v535 = (char *)v531[661];
        uint64_t v536 = (v533 - v535) >> 3;
        if ((unint64_t)(v536 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v537 = v534 - (void)v535;
        unint64_t v538 = (uint64_t)(v534 - (void)v535) >> 2;
        if (v538 <= v536 + 1) {
          unint64_t v538 = v536 + 1;
        }
        if (v537 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v539 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v539 = v538;
        }
        if (v539)
        {
          int v540 = (char *)sub_5714((uint64_t)(v531 + 663), v539);
          unsigned int v533 = (char *)v531[662];
          unint64_t v535 = (char *)v531[661];
        }
        else
        {
          int v540 = 0;
        }
        unint64_t v548 = &v540[8 * v536];
        uint64_t v549 = &v540[8 * v539];
        *(void *)unint64_t v548 = v532;
        uint64_t v542 = v548 + 8;
        while (v533 != v535)
        {
          uint64_t v550 = *((void *)v533 - 1);
          v533 -= 8;
          *((void *)v548 - 1) = v550;
          v548 -= 8;
        }
LABEL_771:
        v531[661] = v548;
        v531[662] = v542;
        v531[663] = v549;
        if (v535) {
          operator delete(v535);
        }
        goto LABEL_773;
      }
    }
    *(void *)unsigned int v533 = v532;
    uint64_t v542 = v533 + 8;
LABEL_773:
    v531[662] = v542;
LABEL_774:
    int v552 = 1 << *(_DWORD *)(v3 + 48);
    if (v552 == 2)
    {
      unint64_t v553 = *(void **)a1[1];
      uint64_t v554 = *(_WORD *)(a1[2] + 52) & 0x7FFF;
      uint64_t v555 = (char *)v553[665];
      unint64_t v563 = v553[666];
      if ((unint64_t)v555 >= v563)
      {
        unint64_t v557 = (char *)v553[664];
        uint64_t v565 = (v555 - v557) >> 3;
        if ((unint64_t)(v565 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v566 = v563 - (void)v557;
        unint64_t v567 = (uint64_t)(v563 - (void)v557) >> 2;
        if (v567 <= v565 + 1) {
          unint64_t v567 = v565 + 1;
        }
        if (v566 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v568 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v568 = v567;
        }
        if (v568)
        {
          unint64_t v569 = (char *)sub_5714((uint64_t)(v553 + 666), v568);
          uint64_t v555 = (char *)v553[665];
          unint64_t v557 = (char *)v553[664];
        }
        else
        {
          unint64_t v569 = 0;
        }
        unint64_t v570 = &v569[8 * v565];
        uint64_t v571 = &v569[8 * v568];
        *(void *)unint64_t v570 = v554;
        uint64_t v564 = v570 + 8;
        while (v555 != v557)
        {
          uint64_t v573 = *((void *)v555 - 1);
          v555 -= 8;
          *((void *)v570 - 1) = v573;
          v570 -= 8;
        }
        goto LABEL_803;
      }
    }
    else
    {
      if (v552 != 1) {
        goto LABEL_806;
      }
      unint64_t v553 = *(void **)a1[1];
      uint64_t v554 = *(_WORD *)(a1[2] + 52) & 0x7FFF;
      uint64_t v555 = (char *)v553[665];
      unint64_t v556 = v553[666];
      if ((unint64_t)v555 >= v556)
      {
        unint64_t v557 = (char *)v553[664];
        uint64_t v558 = (v555 - v557) >> 3;
        if ((unint64_t)(v558 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v559 = v556 - (void)v557;
        unint64_t v560 = (uint64_t)(v556 - (void)v557) >> 2;
        if (v560 <= v558 + 1) {
          unint64_t v560 = v558 + 1;
        }
        if (v559 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v561 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v561 = v560;
        }
        if (v561)
        {
          int v562 = (char *)sub_5714((uint64_t)(v553 + 666), v561);
          uint64_t v555 = (char *)v553[665];
          unint64_t v557 = (char *)v553[664];
        }
        else
        {
          int v562 = 0;
        }
        unint64_t v570 = &v562[8 * v558];
        uint64_t v571 = &v562[8 * v561];
        *(void *)unint64_t v570 = v554;
        uint64_t v564 = v570 + 8;
        while (v555 != v557)
        {
          uint64_t v572 = *((void *)v555 - 1);
          v555 -= 8;
          *((void *)v570 - 1) = v572;
          v570 -= 8;
        }
LABEL_803:
        v553[664] = v570;
        v553[665] = v564;
        v553[666] = v571;
        if (v557) {
          operator delete(v557);
        }
        goto LABEL_805;
      }
    }
    *(void *)uint64_t v555 = v554;
    uint64_t v564 = v555 + 8;
LABEL_805:
    v553[665] = v564;
LABEL_806:
    int v574 = 1 << *(_DWORD *)(v3 + 48);
    if (v574 == 2)
    {
      unsigned int v575 = *(void **)a1[1];
      uint64_t v576 = *(_DWORD *)(a1[2] + 60) & 0x1FFFFLL;
      unint64_t v577 = (uint64_t *)v575[668];
      unint64_t v585 = v575[669];
      if ((unint64_t)v577 >= v585)
      {
        unint64_t v579 = (uint64_t *)v575[667];
        uint64_t v587 = v577 - v579;
        if ((unint64_t)(v587 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v588 = v585 - (void)v579;
        unint64_t v589 = (uint64_t)(v585 - (void)v579) >> 2;
        if (v589 <= v587 + 1) {
          unint64_t v589 = v587 + 1;
        }
        if (v588 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v590 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v590 = v589;
        }
        if (v590)
        {
          unint64_t v591 = (char *)sub_5714((uint64_t)(v575 + 669), v590);
          unint64_t v577 = (uint64_t *)v575[668];
          unint64_t v579 = (uint64_t *)v575[667];
        }
        else
        {
          unint64_t v591 = 0;
        }
        unsigned int v592 = (uint64_t *)&v591[8 * v587];
        uint64_t v593 = &v591[8 * v590];
        *unsigned int v592 = v576;
        uint64_t v586 = v592 + 1;
        while (v577 != v579)
        {
          uint64_t v595 = *--v577;
          *--unsigned int v592 = v595;
        }
        goto LABEL_835;
      }
    }
    else
    {
      if (v574 != 1) {
        goto LABEL_838;
      }
      unsigned int v575 = *(void **)a1[1];
      uint64_t v576 = *(_DWORD *)(a1[2] + 60) & 0x1FFFFLL;
      unint64_t v577 = (uint64_t *)v575[668];
      unint64_t v578 = v575[669];
      if ((unint64_t)v577 >= v578)
      {
        unint64_t v579 = (uint64_t *)v575[667];
        uint64_t v580 = v577 - v579;
        if ((unint64_t)(v580 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v581 = v578 - (void)v579;
        unint64_t v582 = (uint64_t)(v578 - (void)v579) >> 2;
        if (v582 <= v580 + 1) {
          unint64_t v582 = v580 + 1;
        }
        if (v581 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v583 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v583 = v582;
        }
        if (v583)
        {
          unint64_t v584 = (char *)sub_5714((uint64_t)(v575 + 669), v583);
          unint64_t v577 = (uint64_t *)v575[668];
          unint64_t v579 = (uint64_t *)v575[667];
        }
        else
        {
          unint64_t v584 = 0;
        }
        unsigned int v592 = (uint64_t *)&v584[8 * v580];
        uint64_t v593 = &v584[8 * v583];
        *unsigned int v592 = v576;
        uint64_t v586 = v592 + 1;
        while (v577 != v579)
        {
          uint64_t v594 = *--v577;
          *--unsigned int v592 = v594;
        }
LABEL_835:
        v575[667] = v592;
        v575[668] = v586;
        v575[669] = v593;
        if (v579) {
          operator delete(v579);
        }
        goto LABEL_837;
      }
    }
    *unint64_t v577 = v576;
    uint64_t v586 = v577 + 1;
LABEL_837:
    v575[668] = v586;
LABEL_838:
    int v596 = 1 << *(_DWORD *)(v3 + 48);
    if (v596 == 2)
    {
      unint64_t v597 = *(void **)a1[1];
      uint64_t v598 = (*(void *)(a1[2] + 86) >> 16) & 0x1FFFFLL;
      unint64_t v599 = (uint64_t *)v597[671];
      unint64_t v607 = v597[672];
      if ((unint64_t)v599 >= v607)
      {
        unint64_t v601 = (uint64_t *)v597[670];
        uint64_t v609 = v599 - v601;
        if ((unint64_t)(v609 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v610 = v607 - (void)v601;
        unint64_t v611 = (uint64_t)(v607 - (void)v601) >> 2;
        if (v611 <= v609 + 1) {
          unint64_t v611 = v609 + 1;
        }
        if (v610 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v612 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v612 = v611;
        }
        if (v612)
        {
          unint64_t v613 = (char *)sub_5714((uint64_t)(v597 + 672), v612);
          unint64_t v599 = (uint64_t *)v597[671];
          unint64_t v601 = (uint64_t *)v597[670];
        }
        else
        {
          unint64_t v613 = 0;
        }
        unint64_t v614 = (uint64_t *)&v613[8 * v609];
        uint64_t v615 = &v613[8 * v612];
        *unint64_t v614 = v598;
        uint64_t v608 = v614 + 1;
        while (v599 != v601)
        {
          uint64_t v617 = *--v599;
          *--unint64_t v614 = v617;
        }
        goto LABEL_867;
      }
    }
    else
    {
      if (v596 != 1) {
        goto LABEL_870;
      }
      unint64_t v597 = *(void **)a1[1];
      uint64_t v598 = (*(void *)(a1[2] + 86) >> 16) & 0x1FFFFLL;
      unint64_t v599 = (uint64_t *)v597[671];
      unint64_t v600 = v597[672];
      if ((unint64_t)v599 >= v600)
      {
        unint64_t v601 = (uint64_t *)v597[670];
        uint64_t v602 = v599 - v601;
        if ((unint64_t)(v602 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v603 = v600 - (void)v601;
        unint64_t v604 = (uint64_t)(v600 - (void)v601) >> 2;
        if (v604 <= v602 + 1) {
          unint64_t v604 = v602 + 1;
        }
        if (v603 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v605 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v605 = v604;
        }
        if (v605)
        {
          unint64_t v606 = (char *)sub_5714((uint64_t)(v597 + 672), v605);
          unint64_t v599 = (uint64_t *)v597[671];
          unint64_t v601 = (uint64_t *)v597[670];
        }
        else
        {
          unint64_t v606 = 0;
        }
        unint64_t v614 = (uint64_t *)&v606[8 * v602];
        uint64_t v615 = &v606[8 * v605];
        *unint64_t v614 = v598;
        uint64_t v608 = v614 + 1;
        while (v599 != v601)
        {
          uint64_t v616 = *--v599;
          *--unint64_t v614 = v616;
        }
LABEL_867:
        v597[670] = v614;
        v597[671] = v608;
        v597[672] = v615;
        if (v601) {
          operator delete(v601);
        }
        goto LABEL_869;
      }
    }
    *unint64_t v599 = v598;
    uint64_t v608 = v599 + 1;
LABEL_869:
    v597[671] = v608;
LABEL_870:
    int v618 = 1 << *(_DWORD *)(v3 + 48);
    if (v618 == 2)
    {
      unint64_t v619 = *(void **)a1[1];
      uint64_t v620 = *(_DWORD *)(a1[2] + 28) & 0x1FFFFLL;
      unint64_t v621 = (uint64_t *)v619[674];
      unint64_t v629 = v619[675];
      if ((unint64_t)v621 >= v629)
      {
        unint64_t v623 = (uint64_t *)v619[673];
        uint64_t v631 = v621 - v623;
        if ((unint64_t)(v631 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v632 = v629 - (void)v623;
        unint64_t v633 = (uint64_t)(v629 - (void)v623) >> 2;
        if (v633 <= v631 + 1) {
          unint64_t v633 = v631 + 1;
        }
        if (v632 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v634 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v634 = v633;
        }
        if (v634)
        {
          unint64_t v635 = (char *)sub_5714((uint64_t)(v619 + 675), v634);
          unint64_t v621 = (uint64_t *)v619[674];
          unint64_t v623 = (uint64_t *)v619[673];
        }
        else
        {
          unint64_t v635 = 0;
        }
        unint64_t v636 = (uint64_t *)&v635[8 * v631];
        uint64_t v637 = &v635[8 * v634];
        *unint64_t v636 = v620;
        uint64_t v630 = v636 + 1;
        while (v621 != v623)
        {
          uint64_t v639 = *--v621;
          *--unint64_t v636 = v639;
        }
        goto LABEL_899;
      }
    }
    else
    {
      if (v618 != 1) {
        goto LABEL_902;
      }
      unint64_t v619 = *(void **)a1[1];
      uint64_t v620 = *(_DWORD *)(a1[2] + 28) & 0x1FFFFLL;
      unint64_t v621 = (uint64_t *)v619[674];
      unint64_t v622 = v619[675];
      if ((unint64_t)v621 >= v622)
      {
        unint64_t v623 = (uint64_t *)v619[673];
        uint64_t v624 = v621 - v623;
        if ((unint64_t)(v624 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v625 = v622 - (void)v623;
        unint64_t v626 = (uint64_t)(v622 - (void)v623) >> 2;
        if (v626 <= v624 + 1) {
          unint64_t v626 = v624 + 1;
        }
        if (v625 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v627 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v627 = v626;
        }
        if (v627)
        {
          int v628 = (char *)sub_5714((uint64_t)(v619 + 675), v627);
          unint64_t v621 = (uint64_t *)v619[674];
          unint64_t v623 = (uint64_t *)v619[673];
        }
        else
        {
          int v628 = 0;
        }
        unint64_t v636 = (uint64_t *)&v628[8 * v624];
        uint64_t v637 = &v628[8 * v627];
        *unint64_t v636 = v620;
        uint64_t v630 = v636 + 1;
        while (v621 != v623)
        {
          uint64_t v638 = *--v621;
          *--unint64_t v636 = v638;
        }
LABEL_899:
        v619[673] = v636;
        v619[674] = v630;
        v619[675] = v637;
        if (v623) {
          operator delete(v623);
        }
        goto LABEL_901;
      }
    }
    *unint64_t v621 = v620;
    uint64_t v630 = v621 + 1;
LABEL_901:
    v619[674] = v630;
LABEL_902:
    int v640 = 1 << *(_DWORD *)(v3 + 48);
    if (v640 == 2)
    {
      unint64_t v641 = *(void **)a1[1];
      uint64_t v642 = *(_DWORD *)(a1[2] + 32) & 0x1FFFFLL;
      unsigned int v643 = (uint64_t *)v641[677];
      unint64_t v651 = v641[678];
      if ((unint64_t)v643 >= v651)
      {
        unint64_t v645 = (uint64_t *)v641[676];
        uint64_t v653 = v643 - v645;
        if ((unint64_t)(v653 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v654 = v651 - (void)v645;
        unint64_t v655 = (uint64_t)(v651 - (void)v645) >> 2;
        if (v655 <= v653 + 1) {
          unint64_t v655 = v653 + 1;
        }
        if (v654 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v656 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v656 = v655;
        }
        if (v656)
        {
          unint64_t v657 = (char *)sub_5714((uint64_t)(v641 + 678), v656);
          unsigned int v643 = (uint64_t *)v641[677];
          unint64_t v645 = (uint64_t *)v641[676];
        }
        else
        {
          unint64_t v657 = 0;
        }
        unint64_t v658 = (uint64_t *)&v657[8 * v653];
        uint64_t v659 = &v657[8 * v656];
        *unint64_t v658 = v642;
        uint64_t v652 = v658 + 1;
        while (v643 != v645)
        {
          uint64_t v661 = *--v643;
          *--unint64_t v658 = v661;
        }
        goto LABEL_931;
      }
    }
    else
    {
      if (v640 != 1) {
        goto LABEL_934;
      }
      unint64_t v641 = *(void **)a1[1];
      uint64_t v642 = *(_DWORD *)(a1[2] + 32) & 0x1FFFFLL;
      unsigned int v643 = (uint64_t *)v641[677];
      unint64_t v644 = v641[678];
      if ((unint64_t)v643 >= v644)
      {
        unint64_t v645 = (uint64_t *)v641[676];
        uint64_t v646 = v643 - v645;
        if ((unint64_t)(v646 + 1) >> 61) {
          goto LABEL_968;
        }
        unint64_t v647 = v644 - (void)v645;
        unint64_t v648 = (uint64_t)(v644 - (void)v645) >> 2;
        if (v648 <= v646 + 1) {
          unint64_t v648 = v646 + 1;
        }
        if (v647 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v649 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v649 = v648;
        }
        if (v649)
        {
          unint64_t v650 = (char *)sub_5714((uint64_t)(v641 + 678), v649);
          unsigned int v643 = (uint64_t *)v641[677];
          unint64_t v645 = (uint64_t *)v641[676];
        }
        else
        {
          unint64_t v650 = 0;
        }
        unint64_t v658 = (uint64_t *)&v650[8 * v646];
        uint64_t v659 = &v650[8 * v649];
        *unint64_t v658 = v642;
        uint64_t v652 = v658 + 1;
        while (v643 != v645)
        {
          uint64_t v660 = *--v643;
          *--unint64_t v658 = v660;
        }
LABEL_931:
        v641[676] = v658;
        v641[677] = v652;
        v641[678] = v659;
        if (v645) {
          operator delete(v645);
        }
        goto LABEL_933;
      }
    }
    *unsigned int v643 = v642;
    uint64_t v652 = v643 + 1;
LABEL_933:
    v641[677] = v652;
LABEL_934:
    int v662 = 1 << *(_DWORD *)(v3 + 48);
    if (v662 == 2)
    {
      uint64_t v674 = a1[2];
      unint64_t v664 = *(void **)a1[1];
      uint64_t v665 = (*(void *)(v674 + 86) >> 33) & 0x7FFFLL;
      uint64_t v666 = (uint64_t *)v664[680];
      unint64_t v675 = v664[681];
      if ((unint64_t)v666 >= v675)
      {
        unint64_t v668 = (uint64_t *)v664[679];
        uint64_t v677 = v666 - v668;
        if (!((unint64_t)(v677 + 1) >> 61))
        {
          unint64_t v678 = v675 - (void)v668;
          unint64_t v679 = (uint64_t)(v675 - (void)v668) >> 2;
          if (v679 <= v677 + 1) {
            unint64_t v679 = v677 + 1;
          }
          if (v678 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v680 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v680 = v679;
          }
          if (v680)
          {
            uint64_t v681 = (char *)sub_5714((uint64_t)(v664 + 681), v680);
            uint64_t v666 = (uint64_t *)v664[680];
            unint64_t v668 = (uint64_t *)v664[679];
          }
          else
          {
            uint64_t v681 = 0;
          }
          unint64_t v682 = (uint64_t *)&v681[8 * v677];
          unint64_t v683 = &v681[8 * v680];
          *unint64_t v682 = v665;
          unint64_t v676 = v682 + 1;
          while (v666 != v668)
          {
            uint64_t v685 = *--v666;
            *--unint64_t v682 = v685;
          }
          goto LABEL_963;
        }
LABEL_968:
        sub_566C();
      }
    }
    else
    {
      if (v662 != 1)
      {
LABEL_966:
        *a2 = 1;
        return;
      }
      uint64_t v663 = a1[2];
      unint64_t v664 = *(void **)a1[1];
      uint64_t v665 = (*(void *)(v663 + 86) >> 33) & 0x7FFFLL;
      uint64_t v666 = (uint64_t *)v664[680];
      unint64_t v667 = v664[681];
      if ((unint64_t)v666 >= v667)
      {
        unint64_t v668 = (uint64_t *)v664[679];
        uint64_t v669 = v666 - v668;
        if (!((unint64_t)(v669 + 1) >> 61))
        {
          unint64_t v670 = v667 - (void)v668;
          unint64_t v671 = (uint64_t)(v667 - (void)v668) >> 2;
          if (v671 <= v669 + 1) {
            unint64_t v671 = v669 + 1;
          }
          if (v670 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v672 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v672 = v671;
          }
          if (v672)
          {
            uint64_t v673 = (char *)sub_5714((uint64_t)(v664 + 681), v672);
            uint64_t v666 = (uint64_t *)v664[680];
            unint64_t v668 = (uint64_t *)v664[679];
          }
          else
          {
            uint64_t v673 = 0;
          }
          unint64_t v682 = (uint64_t *)&v673[8 * v669];
          unint64_t v683 = &v673[8 * v672];
          *unint64_t v682 = v665;
          unint64_t v676 = v682 + 1;
          while (v666 != v668)
          {
            uint64_t v684 = *--v666;
            *--unint64_t v682 = v684;
          }
LABEL_963:
          v664[679] = v682;
          v664[680] = v676;
          v664[681] = v683;
          if (v668) {
            operator delete(v668);
          }
          goto LABEL_965;
        }
        goto LABEL_968;
      }
    }
    *uint64_t v666 = v665;
    unint64_t v676 = v666 + 1;
LABEL_965:
    v664[680] = v676;
    goto LABEL_966;
  }
  int v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    uint64_t v18 = (void *)a1[1];
    uint64_t v17 = a1[2];
    unsigned int v19 = *(_DWORD *)(v17 + 36);
    v17 += 36;
    unint64_t v20 = (void *)*v18;
    *(void *)(v20[593] - 8) += (unint64_t)v19 >> 17;
    *(void *)(v20[596] - 8) += *(_DWORD *)v17 & 0x1FFFF;
    *(void *)(v20[599] - 8) += *(_WORD *)(v17 - 10) & 0x7FFF;
    *(void *)(v20[602] - 8) += *(void *)(v17 + 40) >> 49;
    *(void *)(v20[605] - 8) += *(_WORD *)(v17 + 56) & 0x7FFF;
    *(void *)(v20[608] - 8) += *(_WORD *)(v17 + 58) & 0x7FFF;
    *(void *)(v20[611] - 8) += *(_WORD *)(v17 - 14) & 0x7FFF;
    *(void *)(v20[614] - 8) += (unint64_t)*(unsigned int *)(v17 + 12) >> 17;
    *(void *)(v20[617] - 8) += *(_DWORD *)(v17 + 8) & 0x1FFFF;
    *(void *)(v20[620] - 8) += *(_DWORD *)(v17 + 44) & 0x1FFFF;
    uint64_t v21 = a1[2];
    unint64_t v22 = *(void **)a1[1];
    *(void *)(v22[623] - 8) += *(_WORD *)(v21 + 24) & 0x7FFF;
    *(void *)(v22[626] - 8) += *(_WORD *)(v21 + 20) & 0x7FFF;
    *(void *)(v22[629] - 8) += *(_DWORD *)(v21 + 72) & 0xFFFFF;
    *(void *)(v22[632] - 8) += *(_DWORD *)(v21 + 64) & 0x1FFFF;
    *(void *)(v22[635] - 8) += *(_DWORD *)(v21 + 68) & 0x1FFFF;
    *(void *)(v22[638] - 8) += *(unsigned __int16 *)(v21 + 54);
    *(void *)(v22[641] - 8) += *(unsigned __int16 *)(v21 + 56);
    *(void *)(v22[644] - 8) += *(unsigned __int16 *)(v21 + 76);
    *(void *)(v22[647] - 8) += *(unsigned __int16 *)(v21 + 86);
    *(void *)(v22[650] - 8) += *(unsigned __int16 *)(v21 + 78);
    uint64_t v23 = a1[2];
    uint64_t v24 = (void *)*v18;
    *(void *)(v24[653] - 8) += *(_DWORD *)(v23 + 48) & 0x1FFFF;
    *(void *)(v24[656] - 8) += *(_WORD *)(v23 + 84) & 0x7FFF;
    *(void *)(v24[659] - 8) += *(_WORD *)(v23 + 42) & 0x7FFF;
    *(void *)(v24[662] - 8) += *(_WORD *)(v23 + 40) & 0x7FFF;
    *(void *)(v24[665] - 8) += *(_WORD *)(v23 + 52) & 0x7FFF;
    *(void *)(v24[668] - 8) += *(_DWORD *)(v23 + 60) & 0x1FFFF;
    *(void *)(v24[671] - 8) += (*(void *)(v23 + 86) >> 16) & 0x1FFFFLL;
    *(void *)(v24[674] - 8) += *(_DWORD *)(v23 + 28) & 0x1FFFF;
    *(void *)(v24[677] - 8) += *(_DWORD *)(v23 + 32) & 0x1FFFF;
    *(void *)(v24[680] - 8) += (*(void *)(v23 + 86) >> 33) & 0x7FFFLL;
  }
}

void sub_DC4D8(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    int v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_DWORD *)(a1[2] + 24) & 0x1FFFFFLL;
      uint64_t v8 = (uint64_t *)v6[683];
      unint64_t v19 = v6[684];
      if ((unint64_t)v8 >= v19)
      {
        unint64_t v10 = (uint64_t *)v6[682];
        uint64_t v21 = v8 - v10;
        if ((unint64_t)(v21 + 1) >> 61) {
          goto LABEL_104;
        }
        unint64_t v22 = v19 - (void)v10;
        unint64_t v23 = (uint64_t)(v19 - (void)v10) >> 2;
        if (v23 <= v21 + 1) {
          unint64_t v23 = v21 + 1;
        }
        if (v22 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v23;
        }
        if (v24)
        {
          unint64_t v25 = (char *)sub_5714((uint64_t)(v6 + 684), v24);
          uint64_t v8 = (uint64_t *)v6[683];
          unint64_t v10 = (uint64_t *)v6[682];
        }
        else
        {
          unint64_t v25 = 0;
        }
        unint64_t v26 = (uint64_t *)&v25[8 * v21];
        uint64_t v27 = &v25[8 * v24];
        *unint64_t v26 = v7;
        unint64_t v20 = v26 + 1;
        while (v8 != v10)
        {
          uint64_t v29 = *--v8;
          *--unint64_t v26 = v29;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1) {
        goto LABEL_38;
      }
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_DWORD *)(a1[2] + 24) & 0x1FFFFFLL;
      uint64_t v8 = (uint64_t *)v6[683];
      unint64_t v9 = v6[684];
      if ((unint64_t)v8 >= v9)
      {
        unint64_t v10 = (uint64_t *)v6[682];
        uint64_t v11 = v8 - v10;
        if ((unint64_t)(v11 + 1) >> 61) {
          goto LABEL_104;
        }
        unint64_t v12 = v9 - (void)v10;
        unint64_t v13 = (uint64_t)(v9 - (void)v10) >> 2;
        if (v13 <= v11 + 1) {
          unint64_t v13 = v11 + 1;
        }
        if (v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14)
        {
          unint64_t v15 = (char *)sub_5714((uint64_t)(v6 + 684), v14);
          uint64_t v8 = (uint64_t *)v6[683];
          unint64_t v10 = (uint64_t *)v6[682];
        }
        else
        {
          unint64_t v15 = 0;
        }
        unint64_t v26 = (uint64_t *)&v15[8 * v11];
        uint64_t v27 = &v15[8 * v14];
        *unint64_t v26 = v7;
        unint64_t v20 = v26 + 1;
        while (v8 != v10)
        {
          uint64_t v28 = *--v8;
          *--unint64_t v26 = v28;
        }
LABEL_35:
        v6[682] = v26;
        v6[683] = v20;
        v6[684] = v27;
        if (v10) {
          operator delete(v10);
        }
        goto LABEL_37;
      }
    }
    *uint64_t v8 = v7;
    unint64_t v20 = v8 + 1;
LABEL_37:
    v6[683] = v20;
LABEL_38:
    int v30 = 1 << *(_DWORD *)(v3 + 48);
    if (v30 == 2)
    {
      uint64_t v31 = *(void **)a1[1];
      uint64_t v32 = *(_DWORD *)(a1[2] + 28) & 0x3FFFFFLL;
      int v33 = (uint64_t *)v31[686];
      unint64_t v41 = v31[687];
      if ((unint64_t)v33 >= v41)
      {
        unint64_t v35 = (uint64_t *)v31[685];
        uint64_t v43 = v33 - v35;
        if ((unint64_t)(v43 + 1) >> 61) {
          goto LABEL_104;
        }
        unint64_t v44 = v41 - (void)v35;
        unint64_t v45 = (uint64_t)(v41 - (void)v35) >> 2;
        if (v45 <= v43 + 1) {
          unint64_t v45 = v43 + 1;
        }
        if (v44 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v46 = v45;
        }
        if (v46)
        {
          unint64_t v47 = (char *)sub_5714((uint64_t)(v31 + 687), v46);
          int v33 = (uint64_t *)v31[686];
          unint64_t v35 = (uint64_t *)v31[685];
        }
        else
        {
          unint64_t v47 = 0;
        }
        unint64_t v48 = (uint64_t *)&v47[8 * v43];
        uint64_t v49 = &v47[8 * v46];
        *unint64_t v48 = v32;
        uint64_t v42 = v48 + 1;
        while (v33 != v35)
        {
          uint64_t v51 = *--v33;
          *--unint64_t v48 = v51;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v30 != 1) {
        goto LABEL_70;
      }
      uint64_t v31 = *(void **)a1[1];
      uint64_t v32 = *(_DWORD *)(a1[2] + 28) & 0x3FFFFFLL;
      int v33 = (uint64_t *)v31[686];
      unint64_t v34 = v31[687];
      if ((unint64_t)v33 >= v34)
      {
        unint64_t v35 = (uint64_t *)v31[685];
        uint64_t v36 = v33 - v35;
        if ((unint64_t)(v36 + 1) >> 61) {
          goto LABEL_104;
        }
        unint64_t v37 = v34 - (void)v35;
        unint64_t v38 = (uint64_t)(v34 - (void)v35) >> 2;
        if (v38 <= v36 + 1) {
          unint64_t v38 = v36 + 1;
        }
        if (v37 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v39 = v38;
        }
        if (v39)
        {
          unint64_t v40 = (char *)sub_5714((uint64_t)(v31 + 687), v39);
          int v33 = (uint64_t *)v31[686];
          unint64_t v35 = (uint64_t *)v31[685];
        }
        else
        {
          unint64_t v40 = 0;
        }
        unint64_t v48 = (uint64_t *)&v40[8 * v36];
        uint64_t v49 = &v40[8 * v39];
        *unint64_t v48 = v32;
        uint64_t v42 = v48 + 1;
        while (v33 != v35)
        {
          uint64_t v50 = *--v33;
          *--unint64_t v48 = v50;
        }
LABEL_67:
        v31[685] = v48;
        v31[686] = v42;
        v31[687] = v49;
        if (v35) {
          operator delete(v35);
        }
        goto LABEL_69;
      }
    }
    uint64_t *v33 = v32;
    uint64_t v42 = v33 + 1;
LABEL_69:
    v31[686] = v42;
LABEL_70:
    int v52 = 1 << *(_DWORD *)(v3 + 48);
    if (v52 == 2)
    {
      uint64_t v64 = a1[2];
      uint64_t v54 = *(void **)a1[1];
      uint64_t v55 = *(_DWORD *)(v64 + 20) & 0x3FFFFFLL;
      uint64_t v56 = (uint64_t *)v54[689];
      unint64_t v65 = v54[690];
      if ((unint64_t)v56 >= v65)
      {
        int v58 = (uint64_t *)v54[688];
        uint64_t v67 = v56 - v58;
        if (!((unint64_t)(v67 + 1) >> 61))
        {
          unint64_t v68 = v65 - (void)v58;
          unint64_t v69 = (uint64_t)(v65 - (void)v58) >> 2;
          if (v69 <= v67 + 1) {
            unint64_t v69 = v67 + 1;
          }
          if (v68 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v70 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v70 = v69;
          }
          if (v70)
          {
            uint64_t v71 = (char *)sub_5714((uint64_t)(v54 + 690), v70);
            uint64_t v56 = (uint64_t *)v54[689];
            int v58 = (uint64_t *)v54[688];
          }
          else
          {
            uint64_t v71 = 0;
          }
          unint64_t v72 = (uint64_t *)&v71[8 * v67];
          unint64_t v73 = &v71[8 * v70];
          uint64_t *v72 = v55;
          unint64_t v66 = v72 + 1;
          while (v56 != v58)
          {
            uint64_t v75 = *--v56;
            *--unint64_t v72 = v75;
          }
          goto LABEL_99;
        }
LABEL_104:
        sub_566C();
      }
    }
    else
    {
      if (v52 != 1)
      {
LABEL_102:
        *a2 = 1;
        return;
      }
      uint64_t v53 = a1[2];
      uint64_t v54 = *(void **)a1[1];
      uint64_t v55 = *(_DWORD *)(v53 + 20) & 0x3FFFFFLL;
      uint64_t v56 = (uint64_t *)v54[689];
      unint64_t v57 = v54[690];
      if ((unint64_t)v56 >= v57)
      {
        int v58 = (uint64_t *)v54[688];
        uint64_t v59 = v56 - v58;
        if (!((unint64_t)(v59 + 1) >> 61))
        {
          unint64_t v60 = v57 - (void)v58;
          unint64_t v61 = (uint64_t)(v57 - (void)v58) >> 2;
          if (v61 <= v59 + 1) {
            unint64_t v61 = v59 + 1;
          }
          if (v60 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v62 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v62 = v61;
          }
          if (v62)
          {
            unint64_t v63 = (char *)sub_5714((uint64_t)(v54 + 690), v62);
            uint64_t v56 = (uint64_t *)v54[689];
            int v58 = (uint64_t *)v54[688];
          }
          else
          {
            unint64_t v63 = 0;
          }
          unint64_t v72 = (uint64_t *)&v63[8 * v59];
          unint64_t v73 = &v63[8 * v62];
          uint64_t *v72 = v55;
          unint64_t v66 = v72 + 1;
          while (v56 != v58)
          {
            uint64_t v74 = *--v56;
            *--unint64_t v72 = v74;
          }
LABEL_99:
          v54[688] = v72;
          v54[689] = v66;
          v54[690] = v73;
          if (v58) {
            operator delete(v58);
          }
          goto LABEL_101;
        }
        goto LABEL_104;
      }
    }
    *uint64_t v56 = v55;
    unint64_t v66 = v56 + 1;
LABEL_101:
    v54[689] = v66;
    goto LABEL_102;
  }
  int v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    uint64_t v17 = (_DWORD *)a1[2];
    uint64_t v18 = *(void **)a1[1];
    *(void *)(v18[683] - 8) += v17[6] & 0x1FFFFF;
    *(void *)(v18[686] - 8) += v17[7] & 0x3FFFFF;
    *(void *)(v18[689] - 8) += v17[5] & 0x3FFFFF;
  }
}

void sub_DCA50(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    int v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_WORD *)(a1[2] + 30) & 0x1FFF;
      uint64_t v8 = (char *)v6[797];
      unint64_t v19 = v6[798];
      if ((unint64_t)v8 >= v19)
      {
        unint64_t v10 = (char *)v6[796];
        uint64_t v21 = (v8 - v10) >> 3;
        if ((unint64_t)(v21 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v22 = v19 - (void)v10;
        unint64_t v23 = (uint64_t)(v19 - (void)v10) >> 2;
        if (v23 <= v21 + 1) {
          unint64_t v23 = v21 + 1;
        }
        if (v22 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v23;
        }
        if (v24)
        {
          unint64_t v25 = (char *)sub_5714((uint64_t)(v6 + 798), v24);
          uint64_t v8 = (char *)v6[797];
          unint64_t v10 = (char *)v6[796];
        }
        else
        {
          unint64_t v25 = 0;
        }
        unint64_t v26 = &v25[8 * v21];
        uint64_t v27 = &v25[8 * v24];
        *(void *)unint64_t v26 = v7;
        unint64_t v20 = v26 + 8;
        while (v8 != v10)
        {
          uint64_t v29 = *((void *)v8 - 1);
          v8 -= 8;
          *((void *)v26 - 1) = v29;
          v26 -= 8;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1) {
        goto LABEL_38;
      }
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_WORD *)(a1[2] + 30) & 0x1FFF;
      uint64_t v8 = (char *)v6[797];
      unint64_t v9 = v6[798];
      if ((unint64_t)v8 >= v9)
      {
        unint64_t v10 = (char *)v6[796];
        uint64_t v11 = (v8 - v10) >> 3;
        if ((unint64_t)(v11 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v12 = v9 - (void)v10;
        unint64_t v13 = (uint64_t)(v9 - (void)v10) >> 2;
        if (v13 <= v11 + 1) {
          unint64_t v13 = v11 + 1;
        }
        if (v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14)
        {
          unint64_t v15 = (char *)sub_5714((uint64_t)(v6 + 798), v14);
          uint64_t v8 = (char *)v6[797];
          unint64_t v10 = (char *)v6[796];
        }
        else
        {
          unint64_t v15 = 0;
        }
        unint64_t v26 = &v15[8 * v11];
        uint64_t v27 = &v15[8 * v14];
        *(void *)unint64_t v26 = v7;
        unint64_t v20 = v26 + 8;
        while (v8 != v10)
        {
          uint64_t v28 = *((void *)v8 - 1);
          v8 -= 8;
          *((void *)v26 - 1) = v28;
          v26 -= 8;
        }
LABEL_35:
        v6[796] = v26;
        v6[797] = v20;
        v6[798] = v27;
        if (v10) {
          operator delete(v10);
        }
        goto LABEL_37;
      }
    }
    *(void *)uint64_t v8 = v7;
    unint64_t v20 = v8 + 8;
LABEL_37:
    v6[797] = v20;
LABEL_38:
    int v30 = 1 << *(_DWORD *)(v3 + 48);
    if (v30 == 2)
    {
      uint64_t v31 = *(void **)a1[1];
      uint64_t v32 = *(_DWORD *)(a1[2] + 36) & 0x3FFFFLL;
      int v33 = (uint64_t *)v31[800];
      unint64_t v41 = v31[801];
      if ((unint64_t)v33 >= v41)
      {
        unint64_t v35 = (uint64_t *)v31[799];
        uint64_t v43 = v33 - v35;
        if ((unint64_t)(v43 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v44 = v41 - (void)v35;
        unint64_t v45 = (uint64_t)(v41 - (void)v35) >> 2;
        if (v45 <= v43 + 1) {
          unint64_t v45 = v43 + 1;
        }
        if (v44 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v46 = v45;
        }
        if (v46)
        {
          unint64_t v47 = (char *)sub_5714((uint64_t)(v31 + 801), v46);
          int v33 = (uint64_t *)v31[800];
          unint64_t v35 = (uint64_t *)v31[799];
        }
        else
        {
          unint64_t v47 = 0;
        }
        unint64_t v48 = (uint64_t *)&v47[8 * v43];
        uint64_t v49 = &v47[8 * v46];
        *unint64_t v48 = v32;
        uint64_t v42 = v48 + 1;
        while (v33 != v35)
        {
          uint64_t v51 = *--v33;
          *--unint64_t v48 = v51;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v30 != 1) {
        goto LABEL_70;
      }
      uint64_t v31 = *(void **)a1[1];
      uint64_t v32 = *(_DWORD *)(a1[2] + 36) & 0x3FFFFLL;
      int v33 = (uint64_t *)v31[800];
      unint64_t v34 = v31[801];
      if ((unint64_t)v33 >= v34)
      {
        unint64_t v35 = (uint64_t *)v31[799];
        uint64_t v36 = v33 - v35;
        if ((unint64_t)(v36 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v37 = v34 - (void)v35;
        unint64_t v38 = (uint64_t)(v34 - (void)v35) >> 2;
        if (v38 <= v36 + 1) {
          unint64_t v38 = v36 + 1;
        }
        if (v37 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v39 = v38;
        }
        if (v39)
        {
          unint64_t v40 = (char *)sub_5714((uint64_t)(v31 + 801), v39);
          int v33 = (uint64_t *)v31[800];
          unint64_t v35 = (uint64_t *)v31[799];
        }
        else
        {
          unint64_t v40 = 0;
        }
        unint64_t v48 = (uint64_t *)&v40[8 * v36];
        uint64_t v49 = &v40[8 * v39];
        *unint64_t v48 = v32;
        uint64_t v42 = v48 + 1;
        while (v33 != v35)
        {
          uint64_t v50 = *--v33;
          *--unint64_t v48 = v50;
        }
LABEL_67:
        v31[799] = v48;
        v31[800] = v42;
        v31[801] = v49;
        if (v35) {
          operator delete(v35);
        }
        goto LABEL_69;
      }
    }
    uint64_t *v33 = v32;
    uint64_t v42 = v33 + 1;
LABEL_69:
    v31[800] = v42;
LABEL_70:
    int v52 = 1 << *(_DWORD *)(v3 + 48);
    if (v52 == 2)
    {
      uint64_t v53 = *(void **)a1[1];
      uint64_t v54 = *(_WORD *)(a1[2] + 28) & 0x1FFF;
      uint64_t v55 = (char *)v53[803];
      unint64_t v63 = v53[804];
      if ((unint64_t)v55 >= v63)
      {
        unint64_t v57 = (char *)v53[802];
        uint64_t v65 = (v55 - v57) >> 3;
        if ((unint64_t)(v65 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v66 = v63 - (void)v57;
        unint64_t v67 = (uint64_t)(v63 - (void)v57) >> 2;
        if (v67 <= v65 + 1) {
          unint64_t v67 = v65 + 1;
        }
        if (v66 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v68 = v67;
        }
        if (v68)
        {
          unint64_t v69 = (char *)sub_5714((uint64_t)(v53 + 804), v68);
          uint64_t v55 = (char *)v53[803];
          unint64_t v57 = (char *)v53[802];
        }
        else
        {
          unint64_t v69 = 0;
        }
        unint64_t v70 = &v69[8 * v65];
        uint64_t v71 = &v69[8 * v68];
        *(void *)unint64_t v70 = v54;
        uint64_t v64 = v70 + 8;
        while (v55 != v57)
        {
          uint64_t v73 = *((void *)v55 - 1);
          v55 -= 8;
          *((void *)v70 - 1) = v73;
          v70 -= 8;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v52 != 1) {
        goto LABEL_102;
      }
      uint64_t v53 = *(void **)a1[1];
      uint64_t v54 = *(_WORD *)(a1[2] + 28) & 0x1FFF;
      uint64_t v55 = (char *)v53[803];
      unint64_t v56 = v53[804];
      if ((unint64_t)v55 >= v56)
      {
        unint64_t v57 = (char *)v53[802];
        uint64_t v58 = (v55 - v57) >> 3;
        if ((unint64_t)(v58 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v59 = v56 - (void)v57;
        unint64_t v60 = (uint64_t)(v56 - (void)v57) >> 2;
        if (v60 <= v58 + 1) {
          unint64_t v60 = v58 + 1;
        }
        if (v59 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v61 = v60;
        }
        if (v61)
        {
          unint64_t v62 = (char *)sub_5714((uint64_t)(v53 + 804), v61);
          uint64_t v55 = (char *)v53[803];
          unint64_t v57 = (char *)v53[802];
        }
        else
        {
          unint64_t v62 = 0;
        }
        unint64_t v70 = &v62[8 * v58];
        uint64_t v71 = &v62[8 * v61];
        *(void *)unint64_t v70 = v54;
        uint64_t v64 = v70 + 8;
        while (v55 != v57)
        {
          uint64_t v72 = *((void *)v55 - 1);
          v55 -= 8;
          *((void *)v70 - 1) = v72;
          v70 -= 8;
        }
LABEL_99:
        v53[802] = v70;
        v53[803] = v64;
        v53[804] = v71;
        if (v57) {
          operator delete(v57);
        }
        goto LABEL_101;
      }
    }
    *(void *)uint64_t v55 = v54;
    uint64_t v64 = v55 + 8;
LABEL_101:
    v53[803] = v64;
LABEL_102:
    int v74 = 1 << *(_DWORD *)(v3 + 48);
    if (v74 == 2)
    {
      uint64_t v75 = *(void **)a1[1];
      unint64_t v76 = ((unint64_t)*(unsigned int *)(a1[2] + 32) >> 13) & 0x3FFFF;
      int v77 = (unint64_t *)v75[806];
      unint64_t v85 = v75[807];
      if ((unint64_t)v77 >= v85)
      {
        uint64_t v79 = (unint64_t *)v75[805];
        uint64_t v87 = v77 - v79;
        if ((unint64_t)(v87 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v88 = v85 - (void)v79;
        unint64_t v89 = (uint64_t)(v85 - (void)v79) >> 2;
        if (v89 <= v87 + 1) {
          unint64_t v89 = v87 + 1;
        }
        if (v88 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v90 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v90 = v89;
        }
        if (v90)
        {
          unint64_t v91 = (char *)sub_5714((uint64_t)(v75 + 807), v90);
          int v77 = (unint64_t *)v75[806];
          uint64_t v79 = (unint64_t *)v75[805];
        }
        else
        {
          unint64_t v91 = 0;
        }
        unint64_t v92 = (unint64_t *)&v91[8 * v87];
        uint64_t v93 = &v91[8 * v90];
        unint64_t *v92 = v76;
        uint64_t v86 = v92 + 1;
        while (v77 != v79)
        {
          unint64_t v95 = *--v77;
          *--unint64_t v92 = v95;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v74 != 1) {
        goto LABEL_134;
      }
      uint64_t v75 = *(void **)a1[1];
      unint64_t v76 = ((unint64_t)*(unsigned int *)(a1[2] + 32) >> 13) & 0x3FFFF;
      int v77 = (unint64_t *)v75[806];
      unint64_t v78 = v75[807];
      if ((unint64_t)v77 >= v78)
      {
        uint64_t v79 = (unint64_t *)v75[805];
        uint64_t v80 = v77 - v79;
        if ((unint64_t)(v80 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v81 = v78 - (void)v79;
        unint64_t v82 = (uint64_t)(v78 - (void)v79) >> 2;
        if (v82 <= v80 + 1) {
          unint64_t v82 = v80 + 1;
        }
        if (v81 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v83 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v83 = v82;
        }
        if (v83)
        {
          unint64_t v84 = (char *)sub_5714((uint64_t)(v75 + 807), v83);
          int v77 = (unint64_t *)v75[806];
          uint64_t v79 = (unint64_t *)v75[805];
        }
        else
        {
          unint64_t v84 = 0;
        }
        unint64_t v92 = (unint64_t *)&v84[8 * v80];
        uint64_t v93 = &v84[8 * v83];
        unint64_t *v92 = v76;
        uint64_t v86 = v92 + 1;
        while (v77 != v79)
        {
          unint64_t v94 = *--v77;
          *--unint64_t v92 = v94;
        }
LABEL_131:
        v75[805] = v92;
        v75[806] = v86;
        v75[807] = v93;
        if (v79) {
          operator delete(v79);
        }
        goto LABEL_133;
      }
    }
    *int v77 = v76;
    uint64_t v86 = v77 + 1;
LABEL_133:
    v75[806] = v86;
LABEL_134:
    int v96 = 1 << *(_DWORD *)(v3 + 48);
    if (v96 == 2)
    {
      uint64_t v97 = *(void **)a1[1];
      uint64_t v98 = *(_DWORD *)(a1[2] + 32) & 0x1FFFLL;
      int v99 = (uint64_t *)v97[809];
      unint64_t v107 = v97[810];
      if ((unint64_t)v99 >= v107)
      {
        uint64_t v101 = (uint64_t *)v97[808];
        uint64_t v109 = v99 - v101;
        if ((unint64_t)(v109 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v110 = v107 - (void)v101;
        unint64_t v111 = (uint64_t)(v107 - (void)v101) >> 2;
        if (v111 <= v109 + 1) {
          unint64_t v111 = v109 + 1;
        }
        if (v110 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v112 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v112 = v111;
        }
        if (v112)
        {
          unint64_t v113 = (char *)sub_5714((uint64_t)(v97 + 810), v112);
          int v99 = (uint64_t *)v97[809];
          uint64_t v101 = (uint64_t *)v97[808];
        }
        else
        {
          unint64_t v113 = 0;
        }
        unint64_t v114 = (uint64_t *)&v113[8 * v109];
        uint64_t v115 = &v113[8 * v112];
        *unint64_t v114 = v98;
        uint64_t v108 = v114 + 1;
        while (v99 != v101)
        {
          uint64_t v117 = *--v99;
          *--unint64_t v114 = v117;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v96 != 1) {
        goto LABEL_166;
      }
      uint64_t v97 = *(void **)a1[1];
      uint64_t v98 = *(_DWORD *)(a1[2] + 32) & 0x1FFFLL;
      int v99 = (uint64_t *)v97[809];
      unint64_t v100 = v97[810];
      if ((unint64_t)v99 >= v100)
      {
        uint64_t v101 = (uint64_t *)v97[808];
        uint64_t v102 = v99 - v101;
        if ((unint64_t)(v102 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v103 = v100 - (void)v101;
        unint64_t v104 = (uint64_t)(v100 - (void)v101) >> 2;
        if (v104 <= v102 + 1) {
          unint64_t v104 = v102 + 1;
        }
        if (v103 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v105 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v105 = v104;
        }
        if (v105)
        {
          unint64_t v106 = (char *)sub_5714((uint64_t)(v97 + 810), v105);
          int v99 = (uint64_t *)v97[809];
          uint64_t v101 = (uint64_t *)v97[808];
        }
        else
        {
          unint64_t v106 = 0;
        }
        unint64_t v114 = (uint64_t *)&v106[8 * v102];
        uint64_t v115 = &v106[8 * v105];
        *unint64_t v114 = v98;
        uint64_t v108 = v114 + 1;
        while (v99 != v101)
        {
          uint64_t v116 = *--v99;
          *--unint64_t v114 = v116;
        }
LABEL_163:
        v97[808] = v114;
        v97[809] = v108;
        v97[810] = v115;
        if (v101) {
          operator delete(v101);
        }
        goto LABEL_165;
      }
    }
    *int v99 = v98;
    uint64_t v108 = v99 + 1;
LABEL_165:
    v97[809] = v108;
LABEL_166:
    int v118 = 1 << *(_DWORD *)(v3 + 48);
    if (v118 == 2)
    {
      uint64_t v119 = *(void **)a1[1];
      uint64_t v120 = *(_DWORD *)(a1[2] + 40) & 0x3FFFFLL;
      int v121 = (uint64_t *)v119[812];
      unint64_t v129 = v119[813];
      if ((unint64_t)v121 >= v129)
      {
        uint64_t v123 = (uint64_t *)v119[811];
        uint64_t v131 = v121 - v123;
        if ((unint64_t)(v131 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v132 = v129 - (void)v123;
        unint64_t v133 = (uint64_t)(v129 - (void)v123) >> 2;
        if (v133 <= v131 + 1) {
          unint64_t v133 = v131 + 1;
        }
        if (v132 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v134 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v134 = v133;
        }
        if (v134)
        {
          unint64_t v135 = (char *)sub_5714((uint64_t)(v119 + 813), v134);
          int v121 = (uint64_t *)v119[812];
          uint64_t v123 = (uint64_t *)v119[811];
        }
        else
        {
          unint64_t v135 = 0;
        }
        unint64_t v136 = (uint64_t *)&v135[8 * v131];
        uint64_t v137 = &v135[8 * v134];
        uint64_t *v136 = v120;
        uint64_t v130 = v136 + 1;
        while (v121 != v123)
        {
          uint64_t v139 = *--v121;
          *--unint64_t v136 = v139;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v118 != 1) {
        goto LABEL_198;
      }
      uint64_t v119 = *(void **)a1[1];
      uint64_t v120 = *(_DWORD *)(a1[2] + 40) & 0x3FFFFLL;
      int v121 = (uint64_t *)v119[812];
      unint64_t v122 = v119[813];
      if ((unint64_t)v121 >= v122)
      {
        uint64_t v123 = (uint64_t *)v119[811];
        uint64_t v124 = v121 - v123;
        if ((unint64_t)(v124 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v125 = v122 - (void)v123;
        unint64_t v126 = (uint64_t)(v122 - (void)v123) >> 2;
        if (v126 <= v124 + 1) {
          unint64_t v126 = v124 + 1;
        }
        if (v125 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v127 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v127 = v126;
        }
        if (v127)
        {
          unint64_t v128 = (char *)sub_5714((uint64_t)(v119 + 813), v127);
          int v121 = (uint64_t *)v119[812];
          uint64_t v123 = (uint64_t *)v119[811];
        }
        else
        {
          unint64_t v128 = 0;
        }
        unint64_t v136 = (uint64_t *)&v128[8 * v124];
        uint64_t v137 = &v128[8 * v127];
        uint64_t *v136 = v120;
        uint64_t v130 = v136 + 1;
        while (v121 != v123)
        {
          uint64_t v138 = *--v121;
          *--unint64_t v136 = v138;
        }
LABEL_195:
        v119[811] = v136;
        v119[812] = v130;
        v119[813] = v137;
        if (v123) {
          operator delete(v123);
        }
        goto LABEL_197;
      }
    }
    uint64_t *v121 = v120;
    uint64_t v130 = v121 + 1;
LABEL_197:
    v119[812] = v130;
LABEL_198:
    int v140 = 1 << *(_DWORD *)(v3 + 48);
    if (v140 == 2)
    {
      uint64_t v141 = *(void **)a1[1];
      uint64_t v142 = *(_WORD *)(a1[2] + 24) & 0x3FFF;
      int v143 = (char *)v141[815];
      unint64_t v151 = v141[816];
      if ((unint64_t)v143 >= v151)
      {
        uint64_t v145 = (char *)v141[814];
        uint64_t v153 = (v143 - v145) >> 3;
        if ((unint64_t)(v153 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v154 = v151 - (void)v145;
        unint64_t v155 = (uint64_t)(v151 - (void)v145) >> 2;
        if (v155 <= v153 + 1) {
          unint64_t v155 = v153 + 1;
        }
        if (v154 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v156 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v156 = v155;
        }
        if (v156)
        {
          unint64_t v157 = (char *)sub_5714((uint64_t)(v141 + 816), v156);
          int v143 = (char *)v141[815];
          uint64_t v145 = (char *)v141[814];
        }
        else
        {
          unint64_t v157 = 0;
        }
        uint64_t v158 = &v157[8 * v153];
        uint64_t v159 = &v157[8 * v156];
        *(void *)uint64_t v158 = v142;
        uint64_t v152 = v158 + 8;
        while (v143 != v145)
        {
          uint64_t v161 = *((void *)v143 - 1);
          v143 -= 8;
          *((void *)v158 - 1) = v161;
          v158 -= 8;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v140 != 1) {
        goto LABEL_230;
      }
      uint64_t v141 = *(void **)a1[1];
      uint64_t v142 = *(_WORD *)(a1[2] + 24) & 0x3FFF;
      int v143 = (char *)v141[815];
      unint64_t v144 = v141[816];
      if ((unint64_t)v143 >= v144)
      {
        uint64_t v145 = (char *)v141[814];
        uint64_t v146 = (v143 - v145) >> 3;
        if ((unint64_t)(v146 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v147 = v144 - (void)v145;
        unint64_t v148 = (uint64_t)(v144 - (void)v145) >> 2;
        if (v148 <= v146 + 1) {
          unint64_t v148 = v146 + 1;
        }
        if (v147 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v149 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v149 = v148;
        }
        if (v149)
        {
          unint64_t v150 = (char *)sub_5714((uint64_t)(v141 + 816), v149);
          int v143 = (char *)v141[815];
          uint64_t v145 = (char *)v141[814];
        }
        else
        {
          unint64_t v150 = 0;
        }
        uint64_t v158 = &v150[8 * v146];
        uint64_t v159 = &v150[8 * v149];
        *(void *)uint64_t v158 = v142;
        uint64_t v152 = v158 + 8;
        while (v143 != v145)
        {
          uint64_t v160 = *((void *)v143 - 1);
          v143 -= 8;
          *((void *)v158 - 1) = v160;
          v158 -= 8;
        }
LABEL_227:
        v141[814] = v158;
        v141[815] = v152;
        v141[816] = v159;
        if (v145) {
          operator delete(v145);
        }
        goto LABEL_229;
      }
    }
    *(void *)int v143 = v142;
    uint64_t v152 = v143 + 8;
LABEL_229:
    v141[815] = v152;
LABEL_230:
    int v162 = 1 << *(_DWORD *)(v3 + 48);
    if (v162 == 2)
    {
      uint64_t v163 = *(void **)a1[1];
      uint64_t v164 = *(_WORD *)(a1[2] + 20) & 0x7FFF;
      uint64_t v165 = (char *)v163[818];
      unint64_t v173 = v163[819];
      if ((unint64_t)v165 >= v173)
      {
        uint64_t v167 = (char *)v163[817];
        uint64_t v175 = (v165 - v167) >> 3;
        if ((unint64_t)(v175 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v176 = v173 - (void)v167;
        unint64_t v177 = (uint64_t)(v173 - (void)v167) >> 2;
        if (v177 <= v175 + 1) {
          unint64_t v177 = v175 + 1;
        }
        if (v176 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v178 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v178 = v177;
        }
        if (v178)
        {
          unint64_t v179 = (char *)sub_5714((uint64_t)(v163 + 819), v178);
          uint64_t v165 = (char *)v163[818];
          uint64_t v167 = (char *)v163[817];
        }
        else
        {
          unint64_t v179 = 0;
        }
        unint64_t v180 = &v179[8 * v175];
        uint64_t v181 = &v179[8 * v178];
        *(void *)unint64_t v180 = v164;
        uint64_t v174 = v180 + 8;
        while (v165 != v167)
        {
          uint64_t v183 = *((void *)v165 - 1);
          v165 -= 8;
          *((void *)v180 - 1) = v183;
          v180 -= 8;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v162 != 1) {
        goto LABEL_262;
      }
      uint64_t v163 = *(void **)a1[1];
      uint64_t v164 = *(_WORD *)(a1[2] + 20) & 0x7FFF;
      uint64_t v165 = (char *)v163[818];
      unint64_t v166 = v163[819];
      if ((unint64_t)v165 >= v166)
      {
        uint64_t v167 = (char *)v163[817];
        uint64_t v168 = (v165 - v167) >> 3;
        if ((unint64_t)(v168 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v169 = v166 - (void)v167;
        unint64_t v170 = (uint64_t)(v166 - (void)v167) >> 2;
        if (v170 <= v168 + 1) {
          unint64_t v170 = v168 + 1;
        }
        if (v169 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v171 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v171 = v170;
        }
        if (v171)
        {
          unint64_t v172 = (char *)sub_5714((uint64_t)(v163 + 819), v171);
          uint64_t v165 = (char *)v163[818];
          uint64_t v167 = (char *)v163[817];
        }
        else
        {
          unint64_t v172 = 0;
        }
        unint64_t v180 = &v172[8 * v168];
        uint64_t v181 = &v172[8 * v171];
        *(void *)unint64_t v180 = v164;
        uint64_t v174 = v180 + 8;
        while (v165 != v167)
        {
          uint64_t v182 = *((void *)v165 - 1);
          v165 -= 8;
          *((void *)v180 - 1) = v182;
          v180 -= 8;
        }
LABEL_259:
        v163[817] = v180;
        v163[818] = v174;
        v163[819] = v181;
        if (v167) {
          operator delete(v167);
        }
        goto LABEL_261;
      }
    }
    *(void *)uint64_t v165 = v164;
    uint64_t v174 = v165 + 8;
LABEL_261:
    v163[818] = v174;
LABEL_262:
    int v184 = 1 << *(_DWORD *)(v3 + 48);
    if (v184 == 2)
    {
      unint64_t v185 = *(void **)a1[1];
      uint64_t v186 = *(_WORD *)(a1[2] + 26) & 0x3FFF;
      int v187 = (char *)v185[821];
      unint64_t v195 = v185[822];
      if ((unint64_t)v187 >= v195)
      {
        unint64_t v189 = (char *)v185[820];
        uint64_t v197 = (v187 - v189) >> 3;
        if ((unint64_t)(v197 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v198 = v195 - (void)v189;
        unint64_t v199 = (uint64_t)(v195 - (void)v189) >> 2;
        if (v199 <= v197 + 1) {
          unint64_t v199 = v197 + 1;
        }
        if (v198 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v200 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v200 = v199;
        }
        if (v200)
        {
          unint64_t v201 = (char *)sub_5714((uint64_t)(v185 + 822), v200);
          int v187 = (char *)v185[821];
          unint64_t v189 = (char *)v185[820];
        }
        else
        {
          unint64_t v201 = 0;
        }
        unint64_t v202 = &v201[8 * v197];
        uint64_t v203 = &v201[8 * v200];
        *(void *)unint64_t v202 = v186;
        uint64_t v196 = v202 + 8;
        while (v187 != v189)
        {
          uint64_t v205 = *((void *)v187 - 1);
          v187 -= 8;
          *((void *)v202 - 1) = v205;
          v202 -= 8;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v184 != 1) {
        goto LABEL_294;
      }
      unint64_t v185 = *(void **)a1[1];
      uint64_t v186 = *(_WORD *)(a1[2] + 26) & 0x3FFF;
      int v187 = (char *)v185[821];
      unint64_t v188 = v185[822];
      if ((unint64_t)v187 >= v188)
      {
        unint64_t v189 = (char *)v185[820];
        uint64_t v190 = (v187 - v189) >> 3;
        if ((unint64_t)(v190 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v191 = v188 - (void)v189;
        unint64_t v192 = (uint64_t)(v188 - (void)v189) >> 2;
        if (v192 <= v190 + 1) {
          unint64_t v192 = v190 + 1;
        }
        if (v191 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v193 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v193 = v192;
        }
        if (v193)
        {
          unint64_t v194 = (char *)sub_5714((uint64_t)(v185 + 822), v193);
          int v187 = (char *)v185[821];
          unint64_t v189 = (char *)v185[820];
        }
        else
        {
          unint64_t v194 = 0;
        }
        unint64_t v202 = &v194[8 * v190];
        uint64_t v203 = &v194[8 * v193];
        *(void *)unint64_t v202 = v186;
        uint64_t v196 = v202 + 8;
        while (v187 != v189)
        {
          uint64_t v204 = *((void *)v187 - 1);
          v187 -= 8;
          *((void *)v202 - 1) = v204;
          v202 -= 8;
        }
LABEL_291:
        v185[820] = v202;
        v185[821] = v196;
        v185[822] = v203;
        if (v189) {
          operator delete(v189);
        }
        goto LABEL_293;
      }
    }
    *(void *)int v187 = v186;
    uint64_t v196 = v187 + 8;
LABEL_293:
    v185[821] = v196;
LABEL_294:
    int v206 = 1 << *(_DWORD *)(v3 + 48);
    if (v206 == 2)
    {
      uint64_t v218 = a1[2];
      uint64_t v208 = *(void **)a1[1];
      uint64_t v209 = *(_WORD *)(v218 + 22) & 0x7FFF;
      uint64_t v210 = (char *)v208[824];
      unint64_t v219 = v208[825];
      if ((unint64_t)v210 >= v219)
      {
        int v212 = (char *)v208[823];
        uint64_t v221 = (v210 - v212) >> 3;
        if (!((unint64_t)(v221 + 1) >> 61))
        {
          unint64_t v222 = v219 - (void)v212;
          unint64_t v223 = (uint64_t)(v219 - (void)v212) >> 2;
          if (v223 <= v221 + 1) {
            unint64_t v223 = v221 + 1;
          }
          if (v222 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v224 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v224 = v223;
          }
          if (v224)
          {
            uint64_t v225 = (char *)sub_5714((uint64_t)(v208 + 825), v224);
            uint64_t v210 = (char *)v208[824];
            int v212 = (char *)v208[823];
          }
          else
          {
            uint64_t v225 = 0;
          }
          unint64_t v226 = &v225[8 * v221];
          unint64_t v227 = &v225[8 * v224];
          *(void *)unint64_t v226 = v209;
          unint64_t v220 = v226 + 8;
          while (v210 != v212)
          {
            uint64_t v229 = *((void *)v210 - 1);
            v210 -= 8;
            *((void *)v226 - 1) = v229;
            v226 -= 8;
          }
          goto LABEL_323;
        }
LABEL_328:
        sub_566C();
      }
    }
    else
    {
      if (v206 != 1)
      {
LABEL_326:
        *a2 = 1;
        return;
      }
      uint64_t v207 = a1[2];
      uint64_t v208 = *(void **)a1[1];
      uint64_t v209 = *(_WORD *)(v207 + 22) & 0x7FFF;
      uint64_t v210 = (char *)v208[824];
      unint64_t v211 = v208[825];
      if ((unint64_t)v210 >= v211)
      {
        int v212 = (char *)v208[823];
        uint64_t v213 = (v210 - v212) >> 3;
        if (!((unint64_t)(v213 + 1) >> 61))
        {
          unint64_t v214 = v211 - (void)v212;
          unint64_t v215 = (uint64_t)(v211 - (void)v212) >> 2;
          if (v215 <= v213 + 1) {
            unint64_t v215 = v213 + 1;
          }
          if (v214 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v216 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v216 = v215;
          }
          if (v216)
          {
            unint64_t v217 = (char *)sub_5714((uint64_t)(v208 + 825), v216);
            uint64_t v210 = (char *)v208[824];
            int v212 = (char *)v208[823];
          }
          else
          {
            unint64_t v217 = 0;
          }
          unint64_t v226 = &v217[8 * v213];
          unint64_t v227 = &v217[8 * v216];
          *(void *)unint64_t v226 = v209;
          unint64_t v220 = v226 + 8;
          while (v210 != v212)
          {
            uint64_t v228 = *((void *)v210 - 1);
            v210 -= 8;
            *((void *)v226 - 1) = v228;
            v226 -= 8;
          }
LABEL_323:
          v208[823] = v226;
          v208[824] = v220;
          v208[825] = v227;
          if (v212) {
            operator delete(v212);
          }
          goto LABEL_325;
        }
        goto LABEL_328;
      }
    }
    *(void *)uint64_t v210 = v209;
    unint64_t v220 = v210 + 8;
LABEL_325:
    v208[824] = v220;
    goto LABEL_326;
  }
  int v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    uint64_t v17 = a1[2];
    uint64_t v18 = *(void **)a1[1];
    *(void *)(v18[797] - 8) += *(_WORD *)(v17 + 30) & 0x1FFF;
    *(void *)(v18[800] - 8) += *(_DWORD *)(v17 + 36) & 0x3FFFF;
    *(void *)(v18[803] - 8) += *(_WORD *)(v17 + 28) & 0x1FFF;
    *(void *)(v18[806] - 8) += ((unint64_t)*(unsigned int *)(v17 + 32) >> 13) & 0x3FFFF;
    *(void *)(v18[809] - 8) += *(_DWORD *)(v17 + 32) & 0x1FFF;
    *(void *)(v18[812] - 8) += *(_DWORD *)(v17 + 40) & 0x3FFFF;
    *(void *)(v18[815] - 8) += *(_WORD *)(v17 + 24) & 0x3FFF;
    *(void *)(v18[818] - 8) += *(_WORD *)(v17 + 20) & 0x7FFF;
    *(void *)(v18[821] - 8) += *(_WORD *)(v17 + 26) & 0x3FFF;
    *(void *)(v18[824] - 8) += *(_WORD *)(v17 + 22) & 0x7FFF;
  }
}

void sub_DDB60(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    int v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      uint64_t v20 = a1[1];
      uint64_t v7 = *(void **)v20;
      uint64_t v8 = *(unsigned __int16 *)(a1[2] + 34);
      unint64_t v9 = *(char **)(*(void *)v20 + 2656);
      unint64_t v21 = *(void *)(*(void *)v20 + 2664);
      if ((unint64_t)v9 >= v21)
      {
        uint64_t v11 = (char *)v7[331];
        uint64_t v23 = (v9 - v11) >> 3;
        if ((unint64_t)(v23 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v24 = v21 - (void)v11;
        unint64_t v25 = (uint64_t)(v21 - (void)v11) >> 2;
        if (v25 <= v23 + 1) {
          unint64_t v25 = v23 + 1;
        }
        if (v24 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v26 = v25;
        }
        if (v26)
        {
          uint64_t v27 = (char *)sub_5714((uint64_t)(v7 + 333), v26);
          unint64_t v9 = (char *)v7[332];
          uint64_t v11 = (char *)v7[331];
        }
        else
        {
          uint64_t v27 = 0;
        }
        uint64_t v28 = &v27[8 * v23];
        uint64_t v29 = &v27[8 * v26];
        *(void *)uint64_t v28 = v8;
        unint64_t v22 = v28 + 8;
        while (v9 != v11)
        {
          uint64_t v31 = *((void *)v9 - 1);
          v9 -= 8;
          *((void *)v28 - 1) = v31;
          v28 -= 8;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1) {
        goto LABEL_38;
      }
      uint64_t v6 = a1[1];
      uint64_t v7 = *(void **)v6;
      uint64_t v8 = *(unsigned __int16 *)(a1[2] + 34);
      unint64_t v9 = *(char **)(*(void *)v6 + 2656);
      unint64_t v10 = *(void *)(*(void *)v6 + 2664);
      if ((unint64_t)v9 >= v10)
      {
        uint64_t v11 = (char *)v7[331];
        uint64_t v12 = (v9 - v11) >> 3;
        if ((unint64_t)(v12 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v13 = v10 - (void)v11;
        unint64_t v14 = (uint64_t)(v10 - (void)v11) >> 2;
        if (v14 <= v12 + 1) {
          unint64_t v14 = v12 + 1;
        }
        if (v13 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        if (v15)
        {
          int v16 = (char *)sub_5714((uint64_t)(v7 + 333), v15);
          unint64_t v9 = (char *)v7[332];
          uint64_t v11 = (char *)v7[331];
        }
        else
        {
          int v16 = 0;
        }
        uint64_t v28 = &v16[8 * v12];
        uint64_t v29 = &v16[8 * v15];
        *(void *)uint64_t v28 = v8;
        unint64_t v22 = v28 + 8;
        while (v9 != v11)
        {
          uint64_t v30 = *((void *)v9 - 1);
          v9 -= 8;
          *((void *)v28 - 1) = v30;
          v28 -= 8;
        }
LABEL_35:
        v7[331] = v28;
        v7[332] = v22;
        v7[333] = v29;
        if (v11) {
          operator delete(v11);
        }
        goto LABEL_37;
      }
    }
    *(void *)unint64_t v9 = v8;
    unint64_t v22 = v9 + 8;
LABEL_37:
    v7[332] = v22;
LABEL_38:
    int v32 = 1 << *(_DWORD *)(v3 + 48);
    if (v32 == 2)
    {
      uint64_t v44 = a1[1];
      unint64_t v34 = *(void **)v44;
      uint64_t v35 = *(unsigned __int16 *)(a1[2] + 30);
      uint64_t v36 = *(char **)(*(void *)v44 + 2680);
      unint64_t v45 = *(void *)(*(void *)v44 + 2688);
      if ((unint64_t)v36 >= v45)
      {
        unint64_t v38 = (char *)v34[334];
        uint64_t v47 = (v36 - v38) >> 3;
        if ((unint64_t)(v47 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v48 = v45 - (void)v38;
        unint64_t v49 = (uint64_t)(v45 - (void)v38) >> 2;
        if (v49 <= v47 + 1) {
          unint64_t v49 = v47 + 1;
        }
        if (v48 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v50 = v49;
        }
        if (v50)
        {
          uint64_t v51 = (char *)sub_5714((uint64_t)(v34 + 336), v50);
          uint64_t v36 = (char *)v34[335];
          unint64_t v38 = (char *)v34[334];
        }
        else
        {
          uint64_t v51 = 0;
        }
        int v52 = &v51[8 * v47];
        uint64_t v53 = &v51[8 * v50];
        *(void *)int v52 = v35;
        unint64_t v46 = v52 + 8;
        while (v36 != v38)
        {
          uint64_t v55 = *((void *)v36 - 1);
          v36 -= 8;
          *((void *)v52 - 1) = v55;
          v52 -= 8;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v32 != 1) {
        goto LABEL_70;
      }
      uint64_t v33 = a1[1];
      unint64_t v34 = *(void **)v33;
      uint64_t v35 = *(unsigned __int16 *)(a1[2] + 30);
      uint64_t v36 = *(char **)(*(void *)v33 + 2680);
      unint64_t v37 = *(void *)(*(void *)v33 + 2688);
      if ((unint64_t)v36 >= v37)
      {
        unint64_t v38 = (char *)v34[334];
        uint64_t v39 = (v36 - v38) >> 3;
        if ((unint64_t)(v39 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v40 = v37 - (void)v38;
        unint64_t v41 = (uint64_t)(v37 - (void)v38) >> 2;
        if (v41 <= v39 + 1) {
          unint64_t v41 = v39 + 1;
        }
        if (v40 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v42 = v41;
        }
        if (v42)
        {
          uint64_t v43 = (char *)sub_5714((uint64_t)(v34 + 336), v42);
          uint64_t v36 = (char *)v34[335];
          unint64_t v38 = (char *)v34[334];
        }
        else
        {
          uint64_t v43 = 0;
        }
        int v52 = &v43[8 * v39];
        uint64_t v53 = &v43[8 * v42];
        *(void *)int v52 = v35;
        unint64_t v46 = v52 + 8;
        while (v36 != v38)
        {
          uint64_t v54 = *((void *)v36 - 1);
          v36 -= 8;
          *((void *)v52 - 1) = v54;
          v52 -= 8;
        }
LABEL_67:
        v34[334] = v52;
        v34[335] = v46;
        v34[336] = v53;
        if (v38) {
          operator delete(v38);
        }
        goto LABEL_69;
      }
    }
    *(void *)uint64_t v36 = v35;
    unint64_t v46 = v36 + 8;
LABEL_69:
    v34[335] = v46;
LABEL_70:
    int v56 = 1 << *(_DWORD *)(v3 + 48);
    if (v56 == 2)
    {
      unint64_t v57 = *(void **)a1[1];
      uint64_t v58 = *(_DWORD *)(a1[2] + 40) & 0x1FFFFLL;
      unint64_t v59 = (uint64_t *)v57[338];
      unint64_t v67 = v57[339];
      if ((unint64_t)v59 >= v67)
      {
        unint64_t v61 = (uint64_t *)v57[337];
        uint64_t v69 = v59 - v61;
        if ((unint64_t)(v69 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v70 = v67 - (void)v61;
        unint64_t v71 = (uint64_t)(v67 - (void)v61) >> 2;
        if (v71 <= v69 + 1) {
          unint64_t v71 = v69 + 1;
        }
        if (v70 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v72 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v72 = v71;
        }
        if (v72)
        {
          uint64_t v73 = (char *)sub_5714((uint64_t)(v57 + 339), v72);
          unint64_t v59 = (uint64_t *)v57[338];
          unint64_t v61 = (uint64_t *)v57[337];
        }
        else
        {
          uint64_t v73 = 0;
        }
        int v74 = (uint64_t *)&v73[8 * v69];
        uint64_t v75 = &v73[8 * v72];
        *int v74 = v58;
        unint64_t v68 = v74 + 1;
        while (v59 != v61)
        {
          uint64_t v77 = *--v59;
          *--int v74 = v77;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v56 != 1) {
        goto LABEL_102;
      }
      unint64_t v57 = *(void **)a1[1];
      uint64_t v58 = *(_DWORD *)(a1[2] + 40) & 0x1FFFFLL;
      unint64_t v59 = (uint64_t *)v57[338];
      unint64_t v60 = v57[339];
      if ((unint64_t)v59 >= v60)
      {
        unint64_t v61 = (uint64_t *)v57[337];
        uint64_t v62 = v59 - v61;
        if ((unint64_t)(v62 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v63 = v60 - (void)v61;
        unint64_t v64 = (uint64_t)(v60 - (void)v61) >> 2;
        if (v64 <= v62 + 1) {
          unint64_t v64 = v62 + 1;
        }
        if (v63 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v65 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v65 = v64;
        }
        if (v65)
        {
          unint64_t v66 = (char *)sub_5714((uint64_t)(v57 + 339), v65);
          unint64_t v59 = (uint64_t *)v57[338];
          unint64_t v61 = (uint64_t *)v57[337];
        }
        else
        {
          unint64_t v66 = 0;
        }
        int v74 = (uint64_t *)&v66[8 * v62];
        uint64_t v75 = &v66[8 * v65];
        *int v74 = v58;
        unint64_t v68 = v74 + 1;
        while (v59 != v61)
        {
          uint64_t v76 = *--v59;
          *--int v74 = v76;
        }
LABEL_99:
        v57[337] = v74;
        v57[338] = v68;
        v57[339] = v75;
        if (v61) {
          operator delete(v61);
        }
        goto LABEL_101;
      }
    }
    *unint64_t v59 = v58;
    unint64_t v68 = v59 + 1;
LABEL_101:
    v57[338] = v68;
LABEL_102:
    int v78 = 1 << *(_DWORD *)(v3 + 48);
    if (v78 == 2)
    {
      uint64_t v90 = a1[1];
      uint64_t v80 = *(void **)v90;
      uint64_t v81 = *(unsigned __int16 *)(a1[2] + 36);
      unint64_t v82 = *(char **)(*(void *)v90 + 2728);
      unint64_t v91 = *(void *)(*(void *)v90 + 2736);
      if ((unint64_t)v82 >= v91)
      {
        unint64_t v84 = (char *)v80[340];
        uint64_t v93 = (v82 - v84) >> 3;
        if ((unint64_t)(v93 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v94 = v91 - (void)v84;
        unint64_t v95 = (uint64_t)(v91 - (void)v84) >> 2;
        if (v95 <= v93 + 1) {
          unint64_t v95 = v93 + 1;
        }
        if (v94 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v96 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v96 = v95;
        }
        if (v96)
        {
          uint64_t v97 = (char *)sub_5714((uint64_t)(v80 + 342), v96);
          unint64_t v82 = (char *)v80[341];
          unint64_t v84 = (char *)v80[340];
        }
        else
        {
          uint64_t v97 = 0;
        }
        uint64_t v98 = &v97[8 * v93];
        int v99 = &v97[8 * v96];
        *(void *)uint64_t v98 = v81;
        unint64_t v92 = v98 + 8;
        while (v82 != v84)
        {
          uint64_t v101 = *((void *)v82 - 1);
          v82 -= 8;
          *((void *)v98 - 1) = v101;
          v98 -= 8;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v78 != 1) {
        goto LABEL_134;
      }
      uint64_t v79 = a1[1];
      uint64_t v80 = *(void **)v79;
      uint64_t v81 = *(unsigned __int16 *)(a1[2] + 36);
      unint64_t v82 = *(char **)(*(void *)v79 + 2728);
      unint64_t v83 = *(void *)(*(void *)v79 + 2736);
      if ((unint64_t)v82 >= v83)
      {
        unint64_t v84 = (char *)v80[340];
        uint64_t v85 = (v82 - v84) >> 3;
        if ((unint64_t)(v85 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v86 = v83 - (void)v84;
        unint64_t v87 = (uint64_t)(v83 - (void)v84) >> 2;
        if (v87 <= v85 + 1) {
          unint64_t v87 = v85 + 1;
        }
        if (v86 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v88 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v88 = v87;
        }
        if (v88)
        {
          unint64_t v89 = (char *)sub_5714((uint64_t)(v80 + 342), v88);
          unint64_t v82 = (char *)v80[341];
          unint64_t v84 = (char *)v80[340];
        }
        else
        {
          unint64_t v89 = 0;
        }
        uint64_t v98 = &v89[8 * v85];
        int v99 = &v89[8 * v88];
        *(void *)uint64_t v98 = v81;
        unint64_t v92 = v98 + 8;
        while (v82 != v84)
        {
          uint64_t v100 = *((void *)v82 - 1);
          v82 -= 8;
          *((void *)v98 - 1) = v100;
          v98 -= 8;
        }
LABEL_131:
        v80[340] = v98;
        v80[341] = v92;
        v80[342] = v99;
        if (v84) {
          operator delete(v84);
        }
        goto LABEL_133;
      }
    }
    *(void *)unint64_t v82 = v81;
    unint64_t v92 = v82 + 8;
LABEL_133:
    v80[341] = v92;
LABEL_134:
    int v102 = 1 << *(_DWORD *)(v3 + 48);
    if (v102 == 2)
    {
      uint64_t v114 = a1[1];
      unint64_t v104 = *(void **)v114;
      uint64_t v105 = *(unsigned __int16 *)(a1[2] + 32);
      unint64_t v106 = *(char **)(*(void *)v114 + 2752);
      unint64_t v115 = *(void *)(*(void *)v114 + 2760);
      if ((unint64_t)v106 >= v115)
      {
        uint64_t v108 = (char *)v104[343];
        uint64_t v117 = (v106 - v108) >> 3;
        if ((unint64_t)(v117 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v118 = v115 - (void)v108;
        unint64_t v119 = (uint64_t)(v115 - (void)v108) >> 2;
        if (v119 <= v117 + 1) {
          unint64_t v119 = v117 + 1;
        }
        if (v118 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v120 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v120 = v119;
        }
        if (v120)
        {
          int v121 = (char *)sub_5714((uint64_t)(v104 + 345), v120);
          unint64_t v106 = (char *)v104[344];
          uint64_t v108 = (char *)v104[343];
        }
        else
        {
          int v121 = 0;
        }
        unint64_t v122 = &v121[8 * v117];
        uint64_t v123 = &v121[8 * v120];
        *(void *)unint64_t v122 = v105;
        uint64_t v116 = v122 + 8;
        while (v106 != v108)
        {
          uint64_t v125 = *((void *)v106 - 1);
          v106 -= 8;
          *((void *)v122 - 1) = v125;
          v122 -= 8;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v102 != 1) {
        goto LABEL_166;
      }
      uint64_t v103 = a1[1];
      unint64_t v104 = *(void **)v103;
      uint64_t v105 = *(unsigned __int16 *)(a1[2] + 32);
      unint64_t v106 = *(char **)(*(void *)v103 + 2752);
      unint64_t v107 = *(void *)(*(void *)v103 + 2760);
      if ((unint64_t)v106 >= v107)
      {
        uint64_t v108 = (char *)v104[343];
        uint64_t v109 = (v106 - v108) >> 3;
        if ((unint64_t)(v109 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v110 = v107 - (void)v108;
        unint64_t v111 = (uint64_t)(v107 - (void)v108) >> 2;
        if (v111 <= v109 + 1) {
          unint64_t v111 = v109 + 1;
        }
        if (v110 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v112 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v112 = v111;
        }
        if (v112)
        {
          unint64_t v113 = (char *)sub_5714((uint64_t)(v104 + 345), v112);
          unint64_t v106 = (char *)v104[344];
          uint64_t v108 = (char *)v104[343];
        }
        else
        {
          unint64_t v113 = 0;
        }
        unint64_t v122 = &v113[8 * v109];
        uint64_t v123 = &v113[8 * v112];
        *(void *)unint64_t v122 = v105;
        uint64_t v116 = v122 + 8;
        while (v106 != v108)
        {
          uint64_t v124 = *((void *)v106 - 1);
          v106 -= 8;
          *((void *)v122 - 1) = v124;
          v122 -= 8;
        }
LABEL_163:
        v104[343] = v122;
        v104[344] = v116;
        v104[345] = v123;
        if (v108) {
          operator delete(v108);
        }
        goto LABEL_165;
      }
    }
    *(void *)unint64_t v106 = v105;
    uint64_t v116 = v106 + 8;
LABEL_165:
    v104[344] = v116;
LABEL_166:
    int v126 = 1 << *(_DWORD *)(v3 + 48);
    if (v126 == 2)
    {
      unint64_t v127 = *(void **)a1[1];
      uint64_t v128 = *(_DWORD *)(a1[2] + 44) & 0x1FFFFLL;
      unint64_t v129 = (uint64_t *)v127[347];
      unint64_t v137 = v127[348];
      if ((unint64_t)v129 >= v137)
      {
        uint64_t v131 = (uint64_t *)v127[346];
        uint64_t v139 = v129 - v131;
        if ((unint64_t)(v139 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v140 = v137 - (void)v131;
        unint64_t v141 = (uint64_t)(v137 - (void)v131) >> 2;
        if (v141 <= v139 + 1) {
          unint64_t v141 = v139 + 1;
        }
        if (v140 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v142 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v142 = v141;
        }
        if (v142)
        {
          int v143 = (char *)sub_5714((uint64_t)(v127 + 348), v142);
          unint64_t v129 = (uint64_t *)v127[347];
          uint64_t v131 = (uint64_t *)v127[346];
        }
        else
        {
          int v143 = 0;
        }
        unint64_t v144 = (uint64_t *)&v143[8 * v139];
        uint64_t v145 = &v143[8 * v142];
        *unint64_t v144 = v128;
        uint64_t v138 = v144 + 1;
        while (v129 != v131)
        {
          uint64_t v147 = *--v129;
          *--unint64_t v144 = v147;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v126 != 1) {
        goto LABEL_198;
      }
      unint64_t v127 = *(void **)a1[1];
      uint64_t v128 = *(_DWORD *)(a1[2] + 44) & 0x1FFFFLL;
      unint64_t v129 = (uint64_t *)v127[347];
      unint64_t v130 = v127[348];
      if ((unint64_t)v129 >= v130)
      {
        uint64_t v131 = (uint64_t *)v127[346];
        uint64_t v132 = v129 - v131;
        if ((unint64_t)(v132 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v133 = v130 - (void)v131;
        unint64_t v134 = (uint64_t)(v130 - (void)v131) >> 2;
        if (v134 <= v132 + 1) {
          unint64_t v134 = v132 + 1;
        }
        if (v133 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v135 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v135 = v134;
        }
        if (v135)
        {
          unint64_t v136 = (char *)sub_5714((uint64_t)(v127 + 348), v135);
          unint64_t v129 = (uint64_t *)v127[347];
          uint64_t v131 = (uint64_t *)v127[346];
        }
        else
        {
          unint64_t v136 = 0;
        }
        unint64_t v144 = (uint64_t *)&v136[8 * v132];
        uint64_t v145 = &v136[8 * v135];
        *unint64_t v144 = v128;
        uint64_t v138 = v144 + 1;
        while (v129 != v131)
        {
          uint64_t v146 = *--v129;
          *--unint64_t v144 = v146;
        }
LABEL_195:
        v127[346] = v144;
        v127[347] = v138;
        v127[348] = v145;
        if (v131) {
          operator delete(v131);
        }
        goto LABEL_197;
      }
    }
    *unint64_t v129 = v128;
    uint64_t v138 = v129 + 1;
LABEL_197:
    v127[347] = v138;
LABEL_198:
    int v148 = 1 << *(_DWORD *)(v3 + 48);
    if (v148 == 2)
    {
      unint64_t v149 = *(void **)a1[1];
      uint64_t v150 = *(_WORD *)(a1[2] + 28) & 0x7FFF;
      unint64_t v151 = (char *)v149[350];
      unint64_t v159 = v149[351];
      if ((unint64_t)v151 >= v159)
      {
        uint64_t v153 = (char *)v149[349];
        uint64_t v161 = (v151 - v153) >> 3;
        if ((unint64_t)(v161 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v162 = v159 - (void)v153;
        unint64_t v163 = (uint64_t)(v159 - (void)v153) >> 2;
        if (v163 <= v161 + 1) {
          unint64_t v163 = v161 + 1;
        }
        if (v162 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v164 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v164 = v163;
        }
        if (v164)
        {
          uint64_t v165 = (char *)sub_5714((uint64_t)(v149 + 351), v164);
          unint64_t v151 = (char *)v149[350];
          uint64_t v153 = (char *)v149[349];
        }
        else
        {
          uint64_t v165 = 0;
        }
        unint64_t v166 = &v165[8 * v161];
        uint64_t v167 = &v165[8 * v164];
        *(void *)unint64_t v166 = v150;
        uint64_t v160 = v166 + 8;
        while (v151 != v153)
        {
          uint64_t v169 = *((void *)v151 - 1);
          v151 -= 8;
          *((void *)v166 - 1) = v169;
          v166 -= 8;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v148 != 1) {
        goto LABEL_230;
      }
      unint64_t v149 = *(void **)a1[1];
      uint64_t v150 = *(_WORD *)(a1[2] + 28) & 0x7FFF;
      unint64_t v151 = (char *)v149[350];
      unint64_t v152 = v149[351];
      if ((unint64_t)v151 >= v152)
      {
        uint64_t v153 = (char *)v149[349];
        uint64_t v154 = (v151 - v153) >> 3;
        if ((unint64_t)(v154 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v155 = v152 - (void)v153;
        unint64_t v156 = (uint64_t)(v152 - (void)v153) >> 2;
        if (v156 <= v154 + 1) {
          unint64_t v156 = v154 + 1;
        }
        if (v155 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v157 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v157 = v156;
        }
        if (v157)
        {
          uint64_t v158 = (char *)sub_5714((uint64_t)(v149 + 351), v157);
          unint64_t v151 = (char *)v149[350];
          uint64_t v153 = (char *)v149[349];
        }
        else
        {
          uint64_t v158 = 0;
        }
        unint64_t v166 = &v158[8 * v154];
        uint64_t v167 = &v158[8 * v157];
        *(void *)unint64_t v166 = v150;
        uint64_t v160 = v166 + 8;
        while (v151 != v153)
        {
          uint64_t v168 = *((void *)v151 - 1);
          v151 -= 8;
          *((void *)v166 - 1) = v168;
          v166 -= 8;
        }
LABEL_227:
        v149[349] = v166;
        v149[350] = v160;
        v149[351] = v167;
        if (v153) {
          operator delete(v153);
        }
        goto LABEL_229;
      }
    }
    *(void *)unint64_t v151 = v150;
    uint64_t v160 = v151 + 8;
LABEL_229:
    v149[350] = v160;
LABEL_230:
    int v170 = 1 << *(_DWORD *)(v3 + 48);
    if (v170 == 2)
    {
      unint64_t v171 = *(void **)a1[1];
      uint64_t v172 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      unint64_t v173 = (char *)v171[353];
      unint64_t v181 = v171[354];
      if ((unint64_t)v173 >= v181)
      {
        uint64_t v175 = (char *)v171[352];
        uint64_t v183 = (v173 - v175) >> 3;
        if ((unint64_t)(v183 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v184 = v181 - (void)v175;
        unint64_t v185 = (uint64_t)(v181 - (void)v175) >> 2;
        if (v185 <= v183 + 1) {
          unint64_t v185 = v183 + 1;
        }
        if (v184 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v186 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v186 = v185;
        }
        if (v186)
        {
          int v187 = (char *)sub_5714((uint64_t)(v171 + 354), v186);
          unint64_t v173 = (char *)v171[353];
          uint64_t v175 = (char *)v171[352];
        }
        else
        {
          int v187 = 0;
        }
        unint64_t v188 = &v187[8 * v183];
        unint64_t v189 = &v187[8 * v186];
        *(void *)unint64_t v188 = v172;
        uint64_t v182 = v188 + 8;
        while (v173 != v175)
        {
          uint64_t v191 = *((void *)v173 - 1);
          v173 -= 8;
          *((void *)v188 - 1) = v191;
          v188 -= 8;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v170 != 1) {
        goto LABEL_262;
      }
      unint64_t v171 = *(void **)a1[1];
      uint64_t v172 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      unint64_t v173 = (char *)v171[353];
      unint64_t v174 = v171[354];
      if ((unint64_t)v173 >= v174)
      {
        uint64_t v175 = (char *)v171[352];
        uint64_t v176 = (v173 - v175) >> 3;
        if ((unint64_t)(v176 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v177 = v174 - (void)v175;
        unint64_t v178 = (uint64_t)(v174 - (void)v175) >> 2;
        if (v178 <= v176 + 1) {
          unint64_t v178 = v176 + 1;
        }
        if (v177 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v179 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v179 = v178;
        }
        if (v179)
        {
          unint64_t v180 = (char *)sub_5714((uint64_t)(v171 + 354), v179);
          unint64_t v173 = (char *)v171[353];
          uint64_t v175 = (char *)v171[352];
        }
        else
        {
          unint64_t v180 = 0;
        }
        unint64_t v188 = &v180[8 * v176];
        unint64_t v189 = &v180[8 * v179];
        *(void *)unint64_t v188 = v172;
        uint64_t v182 = v188 + 8;
        while (v173 != v175)
        {
          uint64_t v190 = *((void *)v173 - 1);
          v173 -= 8;
          *((void *)v188 - 1) = v190;
          v188 -= 8;
        }
LABEL_259:
        v171[352] = v188;
        v171[353] = v182;
        v171[354] = v189;
        if (v175) {
          operator delete(v175);
        }
        goto LABEL_261;
      }
    }
    *(void *)unint64_t v173 = v172;
    uint64_t v182 = v173 + 8;
LABEL_261:
    v171[353] = v182;
LABEL_262:
    int v192 = 1 << *(_DWORD *)(v3 + 48);
    if (v192 == 2)
    {
      uint64_t v204 = a1[1];
      unint64_t v194 = *(void **)v204;
      uint64_t v195 = *(unsigned __int16 *)(a1[2] + 24);
      uint64_t v196 = *(char **)(*(void *)v204 + 2848);
      unint64_t v205 = *(void *)(*(void *)v204 + 2856);
      if ((unint64_t)v196 >= v205)
      {
        unint64_t v198 = (char *)v194[355];
        uint64_t v207 = (v196 - v198) >> 3;
        if ((unint64_t)(v207 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v208 = v205 - (void)v198;
        unint64_t v209 = (uint64_t)(v205 - (void)v198) >> 2;
        if (v209 <= v207 + 1) {
          unint64_t v209 = v207 + 1;
        }
        if (v208 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v210 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v210 = v209;
        }
        if (v210)
        {
          unint64_t v211 = (char *)sub_5714((uint64_t)(v194 + 357), v210);
          uint64_t v196 = (char *)v194[356];
          unint64_t v198 = (char *)v194[355];
        }
        else
        {
          unint64_t v211 = 0;
        }
        int v212 = &v211[8 * v207];
        uint64_t v213 = &v211[8 * v210];
        *(void *)int v212 = v195;
        int v206 = v212 + 8;
        while (v196 != v198)
        {
          uint64_t v215 = *((void *)v196 - 1);
          v196 -= 8;
          *((void *)v212 - 1) = v215;
          v212 -= 8;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v192 != 1) {
        goto LABEL_294;
      }
      uint64_t v193 = a1[1];
      unint64_t v194 = *(void **)v193;
      uint64_t v195 = *(unsigned __int16 *)(a1[2] + 24);
      uint64_t v196 = *(char **)(*(void *)v193 + 2848);
      unint64_t v197 = *(void *)(*(void *)v193 + 2856);
      if ((unint64_t)v196 >= v197)
      {
        unint64_t v198 = (char *)v194[355];
        uint64_t v199 = (v196 - v198) >> 3;
        if ((unint64_t)(v199 + 1) >> 61) {
          goto LABEL_328;
        }
        unint64_t v200 = v197 - (void)v198;
        unint64_t v201 = (uint64_t)(v197 - (void)v198) >> 2;
        if (v201 <= v199 + 1) {
          unint64_t v201 = v199 + 1;
        }
        if (v200 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v202 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v202 = v201;
        }
        if (v202)
        {
          uint64_t v203 = (char *)sub_5714((uint64_t)(v194 + 357), v202);
          uint64_t v196 = (char *)v194[356];
          unint64_t v198 = (char *)v194[355];
        }
        else
        {
          uint64_t v203 = 0;
        }
        int v212 = &v203[8 * v199];
        uint64_t v213 = &v203[8 * v202];
        *(void *)int v212 = v195;
        int v206 = v212 + 8;
        while (v196 != v198)
        {
          uint64_t v214 = *((void *)v196 - 1);
          v196 -= 8;
          *((void *)v212 - 1) = v214;
          v212 -= 8;
        }
LABEL_291:
        v194[355] = v212;
        v194[356] = v206;
        v194[357] = v213;
        if (v198) {
          operator delete(v198);
        }
        goto LABEL_293;
      }
    }
    *(void *)uint64_t v196 = v195;
    int v206 = v196 + 8;
LABEL_293:
    v194[356] = v206;
LABEL_294:
    int v216 = 1 << *(_DWORD *)(v3 + 48);
    if (v216 == 2)
    {
      uint64_t v229 = a1[1];
      uint64_t v230 = a1[2];
      unint64_t v219 = *(void **)v229;
      uint64_t v220 = *(unsigned __int16 *)(v230 + 22);
      uint64_t v221 = *(char **)(*(void *)v229 + 2872);
      unint64_t v231 = *(void *)(*(void *)v229 + 2880);
      if ((unint64_t)v221 >= v231)
      {
        unint64_t v223 = (char *)v219[358];
        uint64_t v233 = (v221 - v223) >> 3;
        if (!((unint64_t)(v233 + 1) >> 61))
        {
          unint64_t v234 = v231 - (void)v223;
          unint64_t v235 = (uint64_t)(v231 - (void)v223) >> 2;
          if (v235 <= v233 + 1) {
            unint64_t v235 = v233 + 1;
          }
          if (v234 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v236 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v236 = v235;
          }
          if (v236)
          {
            uint64_t v237 = (char *)sub_5714((uint64_t)(v219 + 360), v236);
            uint64_t v221 = (char *)v219[359];
            unint64_t v223 = (char *)v219[358];
          }
          else
          {
            uint64_t v237 = 0;
          }
          unint64_t v238 = &v237[8 * v233];
          unint64_t v239 = &v237[8 * v236];
          *(void *)unint64_t v238 = v220;
          uint64_t v232 = v238 + 8;
          while (v221 != v223)
          {
            uint64_t v241 = *((void *)v221 - 1);
            v221 -= 8;
            *((void *)v238 - 1) = v241;
            v238 -= 8;
          }
          goto LABEL_323;
        }
LABEL_328:
        sub_566C();
      }
    }
    else
    {
      if (v216 != 1)
      {
LABEL_326:
        *a2 = 1;
        return;
      }
      uint64_t v217 = a1[1];
      uint64_t v218 = a1[2];
      unint64_t v219 = *(void **)v217;
      uint64_t v220 = *(unsigned __int16 *)(v218 + 22);
      uint64_t v221 = *(char **)(*(void *)v217 + 2872);
      unint64_t v222 = *(void *)(*(void *)v217 + 2880);
      if ((unint64_t)v221 >= v222)
      {
        unint64_t v223 = (char *)v219[358];
        uint64_t v224 = (v221 - v223) >> 3;
        if (!((unint64_t)(v224 + 1) >> 61))
        {
          unint64_t v225 = v222 - (void)v223;
          unint64_t v226 = (uint64_t)(v222 - (void)v223) >> 2;
          if (v226 <= v224 + 1) {
            unint64_t v226 = v224 + 1;
          }
          if (v225 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v227 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v227 = v226;
          }
          if (v227)
          {
            uint64_t v228 = (char *)sub_5714((uint64_t)(v219 + 360), v227);
            uint64_t v221 = (char *)v219[359];
            unint64_t v223 = (char *)v219[358];
          }
          else
          {
            uint64_t v228 = 0;
          }
          unint64_t v238 = &v228[8 * v224];
          unint64_t v239 = &v228[8 * v227];
          *(void *)unint64_t v238 = v220;
          uint64_t v232 = v238 + 8;
          while (v221 != v223)
          {
            uint64_t v240 = *((void *)v221 - 1);
            v221 -= 8;
            *((void *)v238 - 1) = v240;
            v238 -= 8;
          }
LABEL_323:
          v219[358] = v238;
          v219[359] = v232;
          v219[360] = v239;
          if (v223) {
            operator delete(v223);
          }
          goto LABEL_325;
        }
        goto LABEL_328;
      }
    }
    *(void *)uint64_t v221 = v220;
    uint64_t v232 = v221 + 8;
LABEL_325:
    v219[359] = v232;
    goto LABEL_326;
  }
  int v17 = 1 << *(_DWORD *)(v3 + 48);
  if (v17 == 2 || v17 == 1)
  {
    uint64_t v18 = a1[2];
    unint64_t v19 = *(void **)a1[1];
    *(void *)(v19[332] - 8) += *(unsigned __int16 *)(v18 + 34);
    *(void *)(v19[335] - 8) += *(unsigned __int16 *)(v18 + 30);
    *(void *)(v19[338] - 8) += *(_DWORD *)(v18 + 40) & 0x1FFFF;
    *(void *)(v19[341] - 8) += *(unsigned __int16 *)(v18 + 36);
    *(void *)(v19[344] - 8) += *(unsigned __int16 *)(v18 + 32);
    *(void *)(v19[347] - 8) += *(_DWORD *)(v18 + 44) & 0x1FFFF;
    *(void *)(v19[350] - 8) += *(_WORD *)(v18 + 28) & 0x7FFF;
    *(void *)(v19[353] - 8) += *(_WORD *)(v18 + 26) & 0x7FFF;
    *(void *)(v19[356] - 8) += *(unsigned __int16 *)(v18 + 24);
    *(void *)(v19[359] - 8) += *(unsigned __int16 *)(v18 + 22);
  }
}

void sub_DEB88(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    int v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_WORD *)(a1[2] + 44) & 0x7FFF;
      uint64_t v8 = (char *)v6[401];
      unint64_t v22 = v6[402];
      if ((unint64_t)v8 >= v22)
      {
        unint64_t v10 = (char *)v6[400];
        uint64_t v24 = (v8 - v10) >> 3;
        if ((unint64_t)(v24 + 1) >> 61) {
          goto LABEL_456;
        }
        unint64_t v25 = v22 - (void)v10;
        unint64_t v26 = (uint64_t)(v22 - (void)v10) >> 2;
        if (v26 <= v24 + 1) {
          unint64_t v26 = v24 + 1;
        }
        if (v25 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v26;
        }
        if (v27)
        {
          uint64_t v28 = (char *)sub_5714((uint64_t)(v6 + 402), v27);
          uint64_t v8 = (char *)v6[401];
          unint64_t v10 = (char *)v6[400];
        }
        else
        {
          uint64_t v28 = 0;
        }
        uint64_t v29 = &v28[8 * v24];
        uint64_t v30 = &v28[8 * v27];
        *(void *)uint64_t v29 = v7;
        uint64_t v23 = v29 + 8;
        while (v8 != v10)
        {
          uint64_t v32 = *((void *)v8 - 1);
          v8 -= 8;
          *((void *)v29 - 1) = v32;
          v29 -= 8;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1) {
        goto LABEL_38;
      }
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_WORD *)(a1[2] + 44) & 0x7FFF;
      uint64_t v8 = (char *)v6[401];
      unint64_t v9 = v6[402];
      if ((unint64_t)v8 >= v9)
      {
        unint64_t v10 = (char *)v6[400];
        uint64_t v11 = (v8 - v10) >> 3;
        if ((unint64_t)(v11 + 1) >> 61) {
          goto LABEL_456;
        }
        unint64_t v12 = v9 - (void)v10;
        unint64_t v13 = (uint64_t)(v9 - (void)v10) >> 2;
        if (v13 <= v11 + 1) {
          unint64_t v13 = v11 + 1;
        }
        if (v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14)
        {
          unint64_t v15 = (char *)sub_5714((uint64_t)(v6 + 402), v14);
          uint64_t v8 = (char *)v6[401];
          unint64_t v10 = (char *)v6[400];
        }
        else
        {
          unint64_t v15 = 0;
        }
        uint64_t v29 = &v15[8 * v11];
        uint64_t v30 = &v15[8 * v14];
        *(void *)uint64_t v29 = v7;
        uint64_t v23 = v29 + 8;
        while (v8 != v10)
        {
          uint64_t v31 = *((void *)v8 - 1);
          v8 -= 8;
          *((void *)v29 - 1) = v31;
          v29 -= 8;
        }
LABEL_35:
        v6[400] = v29;
        v6[401] = v23;
        v6[402] = v30;
        if (v10) {
          operator delete(v10);
        }
        goto LABEL_37;
      }
    }
    *(void *)uint64_t v8 = v7;
    uint64_t v23 = v8 + 8;
LABEL_37:
    v6[401] = v23;
LABEL_38:
    int v33 = 1 << *(_DWORD *)(v3 + 48);
    if (v33 == 2)
    {
      unint64_t v34 = *(void **)a1[1];
      uint64_t v35 = *(_WORD *)(a1[2] + 42) & 0x7FFF;
      uint64_t v36 = (char *)v34[404];
      unint64_t v44 = v34[405];
      if ((unint64_t)v36 >= v44)
      {
        unint64_t v38 = (char *)v34[403];
        uint64_t v46 = (v36 - v38) >> 3;
        if ((unint64_t)(v46 + 1) >> 61) {
          goto LABEL_456;
        }
        unint64_t v47 = v44 - (void)v38;
        unint64_t v48 = (uint64_t)(v44 - (void)v38) >> 2;
        if (v48 <= v46 + 1) {
          unint64_t v48 = v46 + 1;
        }
        if (v47 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v49 = v48;
        }
        if (v49)
        {
          unint64_t v50 = (char *)sub_5714((uint64_t)(v34 + 405), v49);
          uint64_t v36 = (char *)v34[404];
          unint64_t v38 = (char *)v34[403];
        }
        else
        {
          unint64_t v50 = 0;
        }
        uint64_t v51 = &v50[8 * v46];
        int v52 = &v50[8 * v49];
        *(void *)uint64_t v51 = v35;
        unint64_t v45 = v51 + 8;
        while (v36 != v38)
        {
          uint64_t v54 = *((void *)v36 - 1);
          v36 -= 8;
          *((void *)v51 - 1) = v54;
          v51 -= 8;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v33 != 1) {
        goto LABEL_70;
      }
      unint64_t v34 = *(void **)a1[1];
      uint64_t v35 = *(_WORD *)(a1[2] + 42) & 0x7FFF;
      uint64_t v36 = (char *)v34[404];
      unint64_t v37 = v34[405];
      if ((unint64_t)v36 >= v37)
      {
        unint64_t v38 = (char *)v34[403];
        uint64_t v39 = (v36 - v38) >> 3;
        if ((unint64_t)(v39 + 1) >> 61) {
          goto LABEL_456;
        }
        unint64_t v40 = v37 - (void)v38;
        unint64_t v41 = (uint64_t)(v37 - (void)v38) >> 2;
        if (v41 <= v39 + 1) {
          unint64_t v41 = v39 + 1;
        }
        if (v40 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v42 = v41;
        }
        if (v42)
        {
          uint64_t v43 = (char *)sub_5714((uint64_t)(v34 + 405), v42);
          uint64_t v36 = (char *)v34[404];
          unint64_t v38 = (char *)v34[403];
        }
        else
        {
          uint64_t v43 = 0;
        }
        uint64_t v51 = &v43[8 * v39];
        int v52 = &v43[8 * v42];
        *(void *)uint64_t v51 = v35;
        unint64_t v45 = v51 + 8;
        while (v36 != v38)
        {
          uint64_t v53 = *((void *)v36 - 1);
          v36 -= 8;
          *((void *)v51 - 1) = v53;
          v51 -= 8;
        }
LABEL_67:
        v34[403] = v51;
        v34[404] = v45;
        v34[405] = v52;
        if (v38) {
          operator delete(v38);
        }
        goto LABEL_69;
      }
    }
    *(void *)uint64_t v36 = v35;
    unint64_t v45 = v36 + 8;
LABEL_69:
    v34[404] = v45;
LABEL_70:
    int v55 = 1 << *(_DWORD *)(v3 + 48);
    if (v55 == 2)
    {
      int v56 = *(void **)a1[1];
      uint64_t v57 = *(_WORD *)(a1[2] + 22) & 0x7FFF;
      uint64_t v58 = (char *)v56[407];
      unint64_t v66 = v56[408];
      if ((unint64_t)v58 >= v66)
      {
        unint64_t v60 = (char *)v56[406];
        uint64_t v68 = (v58 - v60) >> 3;
        if ((unint64_t)(v68 + 1) >> 61) {
          goto LABEL_456;
        }
        unint64_t v69 = v66 - (void)v60;
        unint64_t v70 = (uint64_t)(v66 - (void)v60) >> 2;
        if (v70 <= v68 + 1) {
          unint64_t v70 = v68 + 1;
        }
        if (v69 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v71 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v71 = v70;
        }
        if (v71)
        {
          unint64_t v72 = (char *)sub_5714((uint64_t)(v56 + 408), v71);
          uint64_t v58 = (char *)v56[407];
          unint64_t v60 = (char *)v56[406];
        }
        else
        {
          unint64_t v72 = 0;
        }
        uint64_t v73 = &v72[8 * v68];
        int v74 = &v72[8 * v71];
        *(void *)uint64_t v73 = v57;
        unint64_t v67 = v73 + 8;
        while (v58 != v60)
        {
          uint64_t v76 = *((void *)v58 - 1);
          v58 -= 8;
          *((void *)v73 - 1) = v76;
          v73 -= 8;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v55 != 1) {
        goto LABEL_102;
      }
      int v56 = *(void **)a1[1];
      uint64_t v57 = *(_WORD *)(a1[2] + 22) & 0x7FFF;
      uint64_t v58 = (char *)v56[407];
      unint64_t v59 = v56[408];
      if ((unint64_t)v58 >= v59)
      {
        unint64_t v60 = (char *)v56[406];
        uint64_t v61 = (v58 - v60) >> 3;
        if ((unint64_t)(v61 + 1) >> 61) {
          goto LABEL_456;
        }
        unint64_t v62 = v59 - (void)v60;
        unint64_t v63 = (uint64_t)(v59 - (void)v60) >> 2;
        if (v63 <= v61 + 1) {
          unint64_t v63 = v61 + 1;
        }
        if (v62 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v64 = v63;
        }
        if (v64)
        {
          unint64_t v65 = (char *)sub_5714((uint64_t)(v56 + 408), v64);
          uint64_t v58 = (char *)v56[407];
          unint64_t v60 = (char *)v56[406];
        }
        else
        {
          unint64_t v65 = 0;
        }
        uint64_t v73 = &v65[8 * v61];
        int v74 = &v65[8 * v64];
        *(void *)uint64_t v73 = v57;
        unint64_t v67 = v73 + 8;
        while (v58 != v60)
        {
          uint64_t v75 = *((void *)v58 - 1);
          v58 -= 8;
          *((void *)v73 - 1) = v75;
          v73 -= 8;
        }
LABEL_99:
        v56[406] = v73;
        v56[407] = v67;
        v56[408] = v74;
        if (v60) {
          operator delete(v60);
        }
        goto LABEL_101;
      }
    }
    *(void *)uint64_t v58 = v57;
    unint64_t v67 = v58 + 8;
LABEL_101:
    v56[407] = v67;
LABEL_102:
    int v77 = 1 << *(_DWORD *)(v3 + 48);
    if (v77 == 2)
    {
      int v78 = *(void **)a1[1];
      uint64_t v79 = *(_WORD *)(a1[2] + 30) & 0x7FFF;
      uint64_t v80 = (char *)v78[410];
      unint64_t v88 = v78[411];
      if ((unint64_t)v80 >= v88)
      {
        unint64_t v82 = (char *)v78[409];
        uint64_t v90 = (v80 - v82) >> 3;
        if ((unint64_t)(v90 + 1) >> 61) {
          goto LABEL_456;
        }
        unint64_t v91 = v88 - (void)v82;
        unint64_t v92 = (uint64_t)(v88 - (void)v82) >> 2;
        if (v92 <= v90 + 1) {
          unint64_t v92 = v90 + 1;
        }
        if (v91 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v93 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v93 = v92;
        }
        if (v93)
        {
          unint64_t v94 = (char *)sub_5714((uint64_t)(v78 + 411), v93);
          uint64_t v80 = (char *)v78[410];
          unint64_t v82 = (char *)v78[409];
        }
        else
        {
          unint64_t v94 = 0;
        }
        unint64_t v95 = &v94[8 * v90];
        unint64_t v96 = &v94[8 * v93];
        *(void *)unint64_t v95 = v79;
        unint64_t v89 = v95 + 8;
        while (v80 != v82)
        {
          uint64_t v98 = *((void *)v80 - 1);
          v80 -= 8;
          *((void *)v95 - 1) = v98;
          v95 -= 8;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v77 != 1) {
        goto LABEL_134;
      }
      int v78 = *(void **)a1[1];
      uint64_t v79 = *(_WORD *)(a1[2] + 30) & 0x7FFF;
      uint64_t v80 = (char *)v78[410];
      unint64_t v81 = v78[411];
      if ((unint64_t)v80 >= v81)
      {
        unint64_t v82 = (char *)v78[409];
        uint64_t v83 = (v80 - v82) >> 3;
        if ((unint64_t)(v83 + 1) >> 61) {
          goto LABEL_456;
        }
        unint64_t v84 = v81 - (void)v82;
        unint64_t v85 = (uint64_t)(v81 - (void)v82) >> 2;
        if (v85 <= v83 + 1) {
          unint64_t v85 = v83 + 1;
        }
        if (v84 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v86 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v86 = v85;
        }
        if (v86)
        {
          unint64_t v87 = (char *)sub_5714((uint64_t)(v78 + 411), v86);
          uint64_t v80 = (char *)v78[410];
          unint64_t v82 = (char *)v78[409];
        }
        else
        {
          unint64_t v87 = 0;
        }
        unint64_t v95 = &v87[8 * v83];
        unint64_t v96 = &v87[8 * v86];
        *(void *)unint64_t v95 = v79;
        unint64_t v89 = v95 + 8;
        while (v80 != v82)
        {
          uint64_t v97 = *((void *)v80 - 1);
          v80 -= 8;
          *((void *)v95 - 1) = v97;
          v95 -= 8;
        }
LABEL_131:
        v78[409] = v95;
        v78[410] = v89;
        v78[411] = v96;
        if (v82) {
          operator delete(v82);
        }
        goto LABEL_133;
      }
    }
    *(void *)uint64_t v80 = v79;
    unint64_t v89 = v80 + 8;
LABEL_133:
    v78[410] = v89;
LABEL_134:
    int v99 = 1 << *(_DWORD *)(v3 + 48);
    if (v99 == 2)
    {
      uint64_t v100 = *(void **)a1[1];
      uint64_t v101 = *(_WORD *)(a1[2] + 24) & 0x7FFF;
      int v102 = (char *)v100[413];
      unint64_t v110 = v100[414];
      if ((unint64_t)v102 >= v110)
      {
        unint64_t v104 = (char *)v100[412];
        uint64_t v112 = (v102 - v104) >> 3;
        if ((unint64_t)(v112 + 1) >> 61) {
          goto LABEL_456;
        }
        unint64_t v113 = v110 - (void)v104;
        unint64_t v114 = (uint64_t)(v110 - (void)v104) >> 2;
        if (v114 <= v112 + 1) {
          unint64_t v114 = v112 + 1;
        }
        if (v113 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v115 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v115 = v114;
        }
        if (v115)
        {
          uint64_t v116 = (char *)sub_5714((uint64_t)(v100 + 414), v115);
          int v102 = (char *)v100[413];
          unint64_t v104 = (char *)v100[412];
        }
        else
        {
          uint64_t v116 = 0;
        }
        uint64_t v117 = &v116[8 * v112];
        unint64_t v118 = &v116[8 * v115];
        *(void *)uint64_t v117 = v101;
        unint64_t v111 = v117 + 8;
        while (v102 != v104)
        {
          uint64_t v120 = *((void *)v102 - 1);
          v102 -= 8;
          *((void *)v117 - 1) = v120;
          v117 -= 8;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v99 != 1) {
        goto LABEL_166;
      }
      uint64_t v100 = *(void **)a1[1];
      uint64_t v101 = *(_WORD *)(a1[2] + 24) & 0x7FFF;
      int v102 = (char *)v100[413];
      unint64_t v103 = v100[414];
      if ((unint64_t)v102 >= v103)
      {
        unint64_t v104 = (char *)v100[412];
        uint64_t v105 = (v102 - v104) >> 3;
        if ((unint64_t)(v105 + 1) >> 61) {
          goto LABEL_456;
        }
        unint64_t v106 = v103 - (void)v104;
        unint64_t v107 = (uint64_t)(v103 - (void)v104) >> 2;
        if (v107 <= v105 + 1) {
          unint64_t v107 = v105 + 1;
        }
        if (v106 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v108 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v108 = v107;
        }
        if (v108)
        {
          uint64_t v109 = (char *)sub_5714((uint64_t)(v100 + 414), v108);
          int v102 = (char *)v100[413];
          unint64_t v104 = (char *)v100[412];
        }
        else
        {
          uint64_t v109 = 0;
        }
        uint64_t v117 = &v109[8 * v105];
        unint64_t v118 = &v109[8 * v108];
        *(void *)uint64_t v117 = v101;
        unint64_t v111 = v117 + 8;
        while (v102 != v104)
        {
          uint64_t v119 = *((void *)v102 - 1);
          v102 -= 8;
          *((void *)v117 - 1) = v119;
          v117 -= 8;
        }
LABEL_163:
        v100[412] = v117;
        v100[413] = v111;
        v100[414] = v118;
        if (v104) {
          operator delete(v104);
        }
        goto LABEL_165;
      }
    }
    *(void *)int v102 = v101;
    unint64_t v111 = v102 + 8;
LABEL_165:
    v100[413] = v111;
LABEL_166:
    int v121 = 1 << *(_DWORD *)(v3 + 48);
    if (v121 == 2)
    {
      unint64_t v122 = *(void **)a1[1];
      uint64_t v123 = *(_WORD *)(a1[2] + 32) & 0x7FFF;
      uint64_t v124 = (char *)v122[416];
      unint64_t v132 = v122[417];
      if ((unint64_t)v124 >= v132)
      {
        int v126 = (char *)v122[415];
        uint64_t v134 = (v124 - v126) >> 3;
        if ((unint64_t)(v134 + 1) >> 61) {
          goto LABEL_456;
        }
        unint64_t v135 = v132 - (void)v126;
        unint64_t v136 = (uint64_t)(v132 - (void)v126) >> 2;
        if (v136 <= v134 + 1) {
          unint64_t v136 = v134 + 1;
        }
        if (v135 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v137 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v137 = v136;
        }
        if (v137)
        {
          uint64_t v138 = (char *)sub_5714((uint64_t)(v122 + 417), v137);
          uint64_t v124 = (char *)v122[416];
          int v126 = (char *)v122[415];
        }
        else
        {
          uint64_t v138 = 0;
        }
        uint64_t v139 = &v138[8 * v134];
        unint64_t v140 = &v138[8 * v137];
        *(void *)uint64_t v139 = v123;
        unint64_t v133 = v139 + 8;
        while (v124 != v126)
        {
          uint64_t v142 = *((void *)v124 - 1);
          v124 -= 8;
          *((void *)v139 - 1) = v142;
          v139 -= 8;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v121 != 1) {
        goto LABEL_198;
      }
      unint64_t v122 = *(void **)a1[1];
      uint64_t v123 = *(_WORD *)(a1[2] + 32) & 0x7FFF;
      uint64_t v124 = (char *)v122[416];
      unint64_t v125 = v122[417];
      if ((unint64_t)v124 >= v125)
      {
        int v126 = (char *)v122[415];
        uint64_t v127 = (v124 - v126) >> 3;
        if ((unint64_t)(v127 + 1) >> 61) {
          goto LABEL_456;
        }
        unint64_t v128 = v125 - (void)v126;
        unint64_t v129 = (uint64_t)(v125 - (void)v126) >> 2;
        if (v129 <= v127 + 1) {
          unint64_t v129 = v127 + 1;
        }
        if (v128 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v130 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v130 = v129;
        }
        if (v130)
        {
          uint64_t v131 = (char *)sub_5714((uint64_t)(v122 + 417), v130);
          uint64_t v124 = (char *)v122[416];
          int v126 = (char *)v122[415];
        }
        else
        {
          uint64_t v131 = 0;
        }
        uint64_t v139 = &v131[8 * v127];
        unint64_t v140 = &v131[8 * v130];
        *(void *)uint64_t v139 = v123;
        unint64_t v133 = v139 + 8;
        while (v124 != v126)
        {
          uint64_t v141 = *((void *)v124 - 1);
          v124 -= 8;
          *((void *)v139 - 1) = v141;
          v139 -= 8;
        }
LABEL_195:
        v122[415] = v139;
        v122[416] = v133;
        v122[417] = v140;
        if (v126) {
          operator delete(v126);
        }
        goto LABEL_197;
      }
    }
    *(void *)uint64_t v124 = v123;
    unint64_t v133 = v124 + 8;
LABEL_197:
    v122[416] = v133;
LABEL_198:
    int v143 = 1 << *(_DWORD *)(v3 + 48);
    if (v143 == 2)
    {
      unint64_t v144 = *(void **)a1[1];
      uint64_t v145 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      uint64_t v146 = (char *)v144[419];
      unint64_t v154 = v144[420];
      if ((unint64_t)v146 >= v154)
      {
        int v148 = (char *)v144[418];
        uint64_t v156 = (v146 - v148) >> 3;
        if ((unint64_t)(v156 + 1) >> 61) {
          goto LABEL_456;
        }
        unint64_t v157 = v154 - (void)v148;
        unint64_t v158 = (uint64_t)(v154 - (void)v148) >> 2;
        if (v158 <= v156 + 1) {
          unint64_t v158 = v156 + 1;
        }
        if (v157 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v159 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v159 = v158;
        }
        if (v159)
        {
          uint64_t v160 = (char *)sub_5714((uint64_t)(v144 + 420), v159);
          uint64_t v146 = (char *)v144[419];
          int v148 = (char *)v144[418];
        }
        else
        {
          uint64_t v160 = 0;
        }
        uint64_t v161 = &v160[8 * v156];
        unint64_t v162 = &v160[8 * v159];
        *(void *)uint64_t v161 = v145;
        unint64_t v155 = v161 + 8;
        while (v146 != v148)
        {
          uint64_t v164 = *((void *)v146 - 1);
          v146 -= 8;
          *((void *)v161 - 1) = v164;
          v161 -= 8;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v143 != 1) {
        goto LABEL_230;
      }
      unint64_t v144 = *(void **)a1[1];
      uint64_t v145 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      uint64_t v146 = (char *)v144[419];
      unint64_t v147 = v144[420];
      if ((unint64_t)v146 >= v147)
      {
        int v148 = (char *)v144[418];
        uint64_t v149 = (v146 - v148) >> 3;
        if ((unint64_t)(v149 + 1) >> 61) {
          goto LABEL_456;
        }
        unint64_t v150 = v147 - (void)v148;
        unint64_t v151 = (uint64_t)(v147 - (void)v148) >> 2;
        if (v151 <= v149 + 1) {
          unint64_t v151 = v149 + 1;
        }
        if (v150 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v152 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v152 = v151;
        }
        if (v152)
        {
          uint64_t v153 = (char *)sub_5714((uint64_t)(v144 + 420), v152);
          uint64_t v146 = (char *)v144[419];
          int v148 = (char *)v144[418];
        }
        else
        {
          uint64_t v153 = 0;
        }
        uint64_t v161 = &v153[8 * v149];
        unint64_t v162 = &v153[8 * v152];
        *(void *)uint64_t v161 = v145;
        unint64_t v155 = v161 + 8;
        while (v146 != v148)
        {
          uint64_t v163 = *((void *)v146 - 1);
          v146 -= 8;
          *((void *)v161 - 1) = v163;
          v161 -= 8;
        }
LABEL_227:
        v144[418] = v161;
        v144[419] = v155;
        v144[420] = v162;
        if (v148) {
          operator delete(v148);
        }
        goto LABEL_229;
      }
    }
    *(void *)uint64_t v146 = v145;
    unint64_t v155 = v146 + 8;
LABEL_229:
    v144[419] = v155;
LABEL_230:
    int v165 = 1 << *(_DWORD *)(v3 + 48);
    if (v165 == 2)
    {
      unint64_t v166 = *(void **)a1[1];
      uint64_t v167 = *(_WORD *)(a1[2] + 38) & 0x7FFF;
      uint64_t v168 = (char *)v166[422];
      unint64_t v176 = v166[423];
      if ((unint64_t)v168 >= v176)
      {
        int v170 = (char *)v166[421];
        uint64_t v178 = (v168 - v170) >> 3;
        if ((unint64_t)(v178 + 1) >> 61) {
          goto LABEL_456;
        }
        unint64_t v179 = v176 - (void)v170;
        unint64_t v180 = (uint64_t)(v176 - (void)v170) >> 2;
        if (v180 <= v178 + 1) {
          unint64_t v180 = v178 + 1;
        }
        if (v179 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v181 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v181 = v180;
        }
        if (v181)
        {
          uint64_t v182 = (char *)sub_5714((uint64_t)(v166 + 423), v181);
          uint64_t v168 = (char *)v166[422];
          int v170 = (char *)v166[421];
        }
        else
        {
          uint64_t v182 = 0;
        }
        uint64_t v183 = &v182[8 * v178];
        unint64_t v184 = &v182[8 * v181];
        *(void *)uint64_t v183 = v167;
        unint64_t v177 = v183 + 8;
        while (v168 != v170)
        {
          uint64_t v186 = *((void *)v168 - 1);
          v168 -= 8;
          *((void *)v183 - 1) = v186;
          v183 -= 8;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v165 != 1) {
        goto LABEL_262;
      }
      unint64_t v166 = *(void **)a1[1];
      uint64_t v167 = *(_WORD *)(a1[2] + 38) & 0x7FFF;
      uint64_t v168 = (char *)v166[422];
      unint64_t v169 = v166[423];
      if ((unint64_t)v168 >= v169)
      {
        int v170 = (char *)v166[421];
        uint64_t v171 = (v168 - v170) >> 3;
        if ((unint64_t)(v171 + 1) >> 61) {
          goto LABEL_456;
        }
        unint64_t v172 = v169 - (void)v170;
        unint64_t v173 = (uint64_t)(v169 - (void)v170) >> 2;
        if (v173 <= v171 + 1) {
          unint64_t v173 = v171 + 1;
        }
        if (v172 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v174 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v174 = v173;
        }
        if (v174)
        {
          uint64_t v175 = (char *)sub_5714((uint64_t)(v166 + 423), v174);
          uint64_t v168 = (char *)v166[422];
          int v170 = (char *)v166[421];
        }
        else
        {
          uint64_t v175 = 0;
        }
        uint64_t v183 = &v175[8 * v171];
        unint64_t v184 = &v175[8 * v174];
        *(void *)uint64_t v183 = v167;
        unint64_t v177 = v183 + 8;
        while (v168 != v170)
        {
          uint64_t v185 = *((void *)v168 - 1);
          v168 -= 8;
          *((void *)v183 - 1) = v185;
          v183 -= 8;
        }
LABEL_259:
        v166[421] = v183;
        v166[422] = v177;
        v166[423] = v184;
        if (v170) {
          operator delete(v170);
        }
        goto LABEL_261;
      }
    }
    *(void *)uint64_t v168 = v167;
    unint64_t v177 = v168 + 8;
LABEL_261:
    v166[422] = v177;
LABEL_262:
    int v187 = 1 << *(_DWORD *)(v3 + 48);
    if (v187 == 2)
    {
      unint64_t v188 = *(void **)a1[1];
      uint64_t v189 = *(_WORD *)(a1[2] + 34) & 0x7FFF;
      uint64_t v190 = (char *)v188[425];
      unint64_t v198 = v188[426];
      if ((unint64_t)v190 >= v198)
      {
        int v192 = (char *)v188[424];
        uint64_t v200 = (v190 - v192) >> 3;
        if ((unint64_t)(v200 + 1) >> 61) {
          goto LABEL_456;
        }
        unint64_t v201 = v198 - (void)v192;
        unint64_t v202 = (uint64_t)(v198 - (void)v192) >> 2;
        if (v202 <= v200 + 1) {
          unint64_t v202 = v200 + 1;
        }
        if (v201 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v203 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v203 = v202;
        }
        if (v203)
        {
          uint64_t v204 = (char *)sub_5714((uint64_t)(v188 + 426), v203);
          uint64_t v190 = (char *)v188[425];
          int v192 = (char *)v188[424];
        }
        else
        {
          uint64_t v204 = 0;
        }
        unint64_t v205 = &v204[8 * v200];
        int v206 = &v204[8 * v203];
        *(void *)unint64_t v205 = v189;
        uint64_t v199 = v205 + 8;
        while (v190 != v192)
        {
          uint64_t v208 = *((void *)v190 - 1);
          v190 -= 8;
          *((void *)v205 - 1) = v208;
          v205 -= 8;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v187 != 1) {
        goto LABEL_294;
      }
      unint64_t v188 = *(void **)a1[1];
      uint64_t v189 = *(_WORD *)(a1[2] + 34) & 0x7FFF;
      uint64_t v190 = (char *)v188[425];
      unint64_t v191 = v188[426];
      if ((unint64_t)v190 >= v191)
      {
        int v192 = (char *)v188[424];
        uint64_t v193 = (v190 - v192) >> 3;
        if ((unint64_t)(v193 + 1) >> 61) {
          goto LABEL_456;
        }
        unint64_t v194 = v191 - (void)v192;
        unint64_t v195 = (uint64_t)(v191 - (void)v192) >> 2;
        if (v195 <= v193 + 1) {
          unint64_t v195 = v193 + 1;
        }
        if (v194 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v196 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v196 = v195;
        }
        if (v196)
        {
          unint64_t v197 = (char *)sub_5714((uint64_t)(v188 + 426), v196);
          uint64_t v190 = (char *)v188[425];
          int v192 = (char *)v188[424];
        }
        else
        {
          unint64_t v197 = 0;
        }
        unint64_t v205 = &v197[8 * v193];
        int v206 = &v197[8 * v196];
        *(void *)unint64_t v205 = v189;
        uint64_t v199 = v205 + 8;
        while (v190 != v192)
        {
          uint64_t v207 = *((void *)v190 - 1);
          v190 -= 8;
          *((void *)v205 - 1) = v207;
          v205 -= 8;
        }
LABEL_291:
        v188[424] = v205;
        v188[425] = v199;
        v188[426] = v206;
        if (v192) {
          operator delete(v192);
        }
        goto LABEL_293;
      }
    }
    *(void *)uint64_t v190 = v189;
    uint64_t v199 = v190 + 8;
LABEL_293:
    v188[425] = v199;
LABEL_294:
    int v209 = 1 << *(_DWORD *)(v3 + 48);
    if (v209 == 2)
    {
      unint64_t v210 = *(void **)a1[1];
      uint64_t v211 = *(_WORD *)(a1[2] + 28) & 0x7FFF;
      int v212 = (char *)v210[428];
      unint64_t v220 = v210[429];
      if ((unint64_t)v212 >= v220)
      {
        uint64_t v214 = (char *)v210[427];
        uint64_t v222 = (v212 - v214) >> 3;
        if ((unint64_t)(v222 + 1) >> 61) {
          goto LABEL_456;
        }
        unint64_t v223 = v220 - (void)v214;
        unint64_t v224 = (uint64_t)(v220 - (void)v214) >> 2;
        if (v224 <= v222 + 1) {
          unint64_t v224 = v222 + 1;
        }
        if (v223 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v225 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v225 = v224;
        }
        if (v225)
        {
          unint64_t v226 = (char *)sub_5714((uint64_t)(v210 + 429), v225);
          int v212 = (char *)v210[428];
          uint64_t v214 = (char *)v210[427];
        }
        else
        {
          unint64_t v226 = 0;
        }
        unint64_t v227 = &v226[8 * v222];
        uint64_t v228 = &v226[8 * v225];
        *(void *)unint64_t v227 = v211;
        uint64_t v221 = v227 + 8;
        while (v212 != v214)
        {
          uint64_t v230 = *((void *)v212 - 1);
          v212 -= 8;
          *((void *)v227 - 1) = v230;
          v227 -= 8;
        }
        goto LABEL_323;
      }
    }
    else
    {
      if (v209 != 1) {
        goto LABEL_326;
      }
      unint64_t v210 = *(void **)a1[1];
      uint64_t v211 = *(_WORD *)(a1[2] + 28) & 0x7FFF;
      int v212 = (char *)v210[428];
      unint64_t v213 = v210[429];
      if ((unint64_t)v212 >= v213)
      {
        uint64_t v214 = (char *)v210[427];
        uint64_t v215 = (v212 - v214) >> 3;
        if ((unint64_t)(v215 + 1) >> 61) {
          goto LABEL_456;
        }
        unint64_t v216 = v213 - (void)v214;
        unint64_t v217 = (uint64_t)(v213 - (void)v214) >> 2;
        if (v217 <= v215 + 1) {
          unint64_t v217 = v215 + 1;
        }
        if (v216 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v218 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v218 = v217;
        }
        if (v218)
        {
          unint64_t v219 = (char *)sub_5714((uint64_t)(v210 + 429), v218);
          int v212 = (char *)v210[428];
          uint64_t v214 = (char *)v210[427];
        }
        else
        {
          unint64_t v219 = 0;
        }
        unint64_t v227 = &v219[8 * v215];
        uint64_t v228 = &v219[8 * v218];
        *(void *)unint64_t v227 = v211;
        uint64_t v221 = v227 + 8;
        while (v212 != v214)
        {
          uint64_t v229 = *((void *)v212 - 1);
          v212 -= 8;
          *((void *)v227 - 1) = v229;
          v227 -= 8;
        }
LABEL_323:
        v210[427] = v227;
        v210[428] = v221;
        v210[429] = v228;
        if (v214) {
          operator delete(v214);
        }
        goto LABEL_325;
      }
    }
    *(void *)int v212 = v211;
    uint64_t v221 = v212 + 8;
LABEL_325:
    v210[428] = v221;
LABEL_326:
    int v231 = 1 << *(_DWORD *)(v3 + 48);
    if (v231 == 2)
    {
      uint64_t v232 = *(void **)a1[1];
      uint64_t v233 = *(_WORD *)(a1[2] + 40) & 0x7FFF;
      unint64_t v234 = (char *)v232[431];
      unint64_t v242 = v232[432];
      if ((unint64_t)v234 >= v242)
      {
        unint64_t v236 = (char *)v232[430];
        uint64_t v244 = (v234 - v236) >> 3;
        if ((unint64_t)(v244 + 1) >> 61) {
          goto LABEL_456;
        }
        unint64_t v245 = v242 - (void)v236;
        unint64_t v246 = (uint64_t)(v242 - (void)v236) >> 2;
        if (v246 <= v244 + 1) {
          unint64_t v246 = v244 + 1;
        }
        if (v245 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v247 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v247 = v246;
        }
        if (v247)
        {
          unint64_t v248 = (char *)sub_5714((uint64_t)(v232 + 432), v247);
          unint64_t v234 = (char *)v232[431];
          unint64_t v236 = (char *)v232[430];
        }
        else
        {
          unint64_t v248 = 0;
        }
        unint64_t v249 = &v248[8 * v244];
        unint64_t v250 = &v248[8 * v247];
        *(void *)unint64_t v249 = v233;
        unint64_t v243 = v249 + 8;
        while (v234 != v236)
        {
          uint64_t v252 = *((void *)v234 - 1);
          v234 -= 8;
          *((void *)v249 - 1) = v252;
          v249 -= 8;
        }
        goto LABEL_355;
      }
    }
    else
    {
      if (v231 != 1) {
        goto LABEL_358;
      }
      uint64_t v232 = *(void **)a1[1];
      uint64_t v233 = *(_WORD *)(a1[2] + 40) & 0x7FFF;
      unint64_t v234 = (char *)v232[431];
      unint64_t v235 = v232[432];
      if ((unint64_t)v234 >= v235)
      {
        unint64_t v236 = (char *)v232[430];
        uint64_t v237 = (v234 - v236) >> 3;
        if ((unint64_t)(v237 + 1) >> 61) {
          goto LABEL_456;
        }
        unint64_t v238 = v235 - (void)v236;
        unint64_t v239 = (uint64_t)(v235 - (void)v236) >> 2;
        if (v239 <= v237 + 1) {
          unint64_t v239 = v237 + 1;
        }
        if (v238 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v240 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v240 = v239;
        }
        if (v240)
        {
          uint64_t v241 = (char *)sub_5714((uint64_t)(v232 + 432), v240);
          unint64_t v234 = (char *)v232[431];
          unint64_t v236 = (char *)v232[430];
        }
        else
        {
          uint64_t v241 = 0;
        }
        unint64_t v249 = &v241[8 * v237];
        unint64_t v250 = &v241[8 * v240];
        *(void *)unint64_t v249 = v233;
        unint64_t v243 = v249 + 8;
        while (v234 != v236)
        {
          uint64_t v251 = *((void *)v234 - 1);
          v234 -= 8;
          *((void *)v249 - 1) = v251;
          v249 -= 8;
        }
LABEL_355:
        v232[430] = v249;
        v232[431] = v243;
        v232[432] = v250;
        if (v236) {
          operator delete(v236);
        }
        goto LABEL_357;
      }
    }
    *(void *)unint64_t v234 = v233;
    unint64_t v243 = v234 + 8;
LABEL_357:
    v232[431] = v243;
LABEL_358:
    int v253 = 1 << *(_DWORD *)(v3 + 48);
    if (v253 == 2)
    {
      uint64_t v254 = *(void **)a1[1];
      uint64_t v255 = *(_WORD *)(a1[2] + 36) & 0x7FFF;
      int v256 = (char *)v254[434];
      unint64_t v264 = v254[435];
      if ((unint64_t)v256 >= v264)
      {
        uint64_t v258 = (char *)v254[433];
        uint64_t v266 = (v256 - v258) >> 3;
        if ((unint64_t)(v266 + 1) >> 61) {
          goto LABEL_456;
        }
        unint64_t v267 = v264 - (void)v258;
        unint64_t v268 = (uint64_t)(v264 - (void)v258) >> 2;
        if (v268 <= v266 + 1) {
          unint64_t v268 = v266 + 1;
        }
        if (v267 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v269 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v269 = v268;
        }
        if (v269)
        {
          unint64_t v270 = (char *)sub_5714((uint64_t)(v254 + 435), v269);
          int v256 = (char *)v254[434];
          uint64_t v258 = (char *)v254[433];
        }
        else
        {
          unint64_t v270 = 0;
        }
        unint64_t v271 = &v270[8 * v266];
        unint64_t v272 = &v270[8 * v269];
        *(void *)unint64_t v271 = v255;
        unint64_t v265 = v271 + 8;
        while (v256 != v258)
        {
          uint64_t v274 = *((void *)v256 - 1);
          v256 -= 8;
          *((void *)v271 - 1) = v274;
          v271 -= 8;
        }
        goto LABEL_387;
      }
    }
    else
    {
      if (v253 != 1) {
        goto LABEL_390;
      }
      uint64_t v254 = *(void **)a1[1];
      uint64_t v255 = *(_WORD *)(a1[2] + 36) & 0x7FFF;
      int v256 = (char *)v254[434];
      unint64_t v257 = v254[435];
      if ((unint64_t)v256 >= v257)
      {
        uint64_t v258 = (char *)v254[433];
        uint64_t v259 = (v256 - v258) >> 3;
        if ((unint64_t)(v259 + 1) >> 61) {
          goto LABEL_456;
        }
        unint64_t v260 = v257 - (void)v258;
        unint64_t v261 = (uint64_t)(v257 - (void)v258) >> 2;
        if (v261 <= v259 + 1) {
          unint64_t v261 = v259 + 1;
        }
        if (v260 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v262 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v262 = v261;
        }
        if (v262)
        {
          unint64_t v263 = (char *)sub_5714((uint64_t)(v254 + 435), v262);
          int v256 = (char *)v254[434];
          uint64_t v258 = (char *)v254[433];
        }
        else
        {
          unint64_t v263 = 0;
        }
        unint64_t v271 = &v263[8 * v259];
        unint64_t v272 = &v263[8 * v262];
        *(void *)unint64_t v271 = v255;
        unint64_t v265 = v271 + 8;
        while (v256 != v258)
        {
          uint64_t v273 = *((void *)v256 - 1);
          v256 -= 8;
          *((void *)v271 - 1) = v273;
          v271 -= 8;
        }
LABEL_387:
        v254[433] = v271;
        v254[434] = v265;
        v254[435] = v272;
        if (v258) {
          operator delete(v258);
        }
        goto LABEL_389;
      }
    }
    *(void *)int v256 = v255;
    unint64_t v265 = v256 + 8;
LABEL_389:
    v254[434] = v265;
LABEL_390:
    int v275 = 1 << *(_DWORD *)(v3 + 48);
    if (v275 == 2)
    {
      uint64_t v276 = *(void **)a1[1];
      unint64_t v277 = ((unint64_t)*(unsigned __int16 *)(a1[2] + 20) >> 1) & 0x3FFF;
      int v278 = (unint64_t *)v276[437];
      unint64_t v286 = v276[438];
      if ((unint64_t)v278 >= v286)
      {
        uint64_t v280 = (unint64_t *)v276[436];
        uint64_t v288 = v278 - v280;
        if ((unint64_t)(v288 + 1) >> 61) {
          goto LABEL_456;
        }
        unint64_t v289 = v286 - (void)v280;
        unint64_t v290 = (uint64_t)(v286 - (void)v280) >> 2;
        if (v290 <= v288 + 1) {
          unint64_t v290 = v288 + 1;
        }
        if (v289 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v291 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v291 = v290;
        }
        if (v291)
        {
          unint64_t v292 = (char *)sub_5714((uint64_t)(v276 + 438), v291);
          int v278 = (unint64_t *)v276[437];
          uint64_t v280 = (unint64_t *)v276[436];
        }
        else
        {
          unint64_t v292 = 0;
        }
        unint64_t v293 = (unint64_t *)&v292[8 * v288];
        unint64_t v294 = &v292[8 * v291];
        *unint64_t v293 = v277;
        unint64_t v287 = v293 + 1;
        while (v278 != v280)
        {
          unint64_t v296 = *--v278;
          *--unint64_t v293 = v296;
        }
        goto LABEL_419;
      }
    }
    else
    {
      if (v275 != 1) {
        goto LABEL_422;
      }
      uint64_t v276 = *(void **)a1[1];
      unint64_t v277 = ((unint64_t)*(unsigned __int16 *)(a1[2] + 20) >> 1) & 0x3FFF;
      int v278 = (unint64_t *)v276[437];
      unint64_t v279 = v276[438];
      if ((unint64_t)v278 >= v279)
      {
        uint64_t v280 = (unint64_t *)v276[436];
        uint64_t v281 = v278 - v280;
        if ((unint64_t)(v281 + 1) >> 61) {
          goto LABEL_456;
        }
        unint64_t v282 = v279 - (void)v280;
        unint64_t v283 = (uint64_t)(v279 - (void)v280) >> 2;
        if (v283 <= v281 + 1) {
          unint64_t v283 = v281 + 1;
        }
        if (v282 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v284 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v284 = v283;
        }
        if (v284)
        {
          unint64_t v285 = (char *)sub_5714((uint64_t)(v276 + 438), v284);
          int v278 = (unint64_t *)v276[437];
          uint64_t v280 = (unint64_t *)v276[436];
        }
        else
        {
          unint64_t v285 = 0;
        }
        unint64_t v293 = (unint64_t *)&v285[8 * v281];
        unint64_t v294 = &v285[8 * v284];
        *unint64_t v293 = v277;
        unint64_t v287 = v293 + 1;
        while (v278 != v280)
        {
          unint64_t v295 = *--v278;
          *--unint64_t v293 = v295;
        }
LABEL_419:
        v276[436] = v293;
        v276[437] = v287;
        v276[438] = v294;
        if (v280) {
          operator delete(v280);
        }
        goto LABEL_421;
      }
    }
    *int v278 = v277;
    unint64_t v287 = v278 + 1;
LABEL_421:
    v276[437] = v287;
LABEL_422:
    int v297 = 1 << *(_DWORD *)(v3 + 48);
    if (v297 == 2)
    {
      uint64_t v309 = a1[2];
      uint64_t v299 = *(void **)a1[1];
      uint64_t v300 = *(_WORD *)(v309 + 46) & 0x7FFF;
      uint64_t v301 = (char *)v299[440];
      unint64_t v310 = v299[441];
      if ((unint64_t)v301 >= v310)
      {
        uint64_t v303 = (char *)v299[439];
        uint64_t v312 = (v301 - v303) >> 3;
        if (!((unint64_t)(v312 + 1) >> 61))
        {
          unint64_t v313 = v310 - (void)v303;
          unint64_t v314 = (uint64_t)(v310 - (void)v303) >> 2;
          if (v314 <= v312 + 1) {
            unint64_t v314 = v312 + 1;
          }
          if (v313 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v315 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v315 = v314;
          }
          if (v315)
          {
            unint64_t v316 = (char *)sub_5714((uint64_t)(v299 + 441), v315);
            uint64_t v301 = (char *)v299[440];
            uint64_t v303 = (char *)v299[439];
          }
          else
          {
            unint64_t v316 = 0;
          }
          unint64_t v317 = &v316[8 * v312];
          uint64_t v318 = &v316[8 * v315];
          *(void *)unint64_t v317 = v300;
          unint64_t v311 = v317 + 8;
          while (v301 != v303)
          {
            uint64_t v320 = *((void *)v301 - 1);
            v301 -= 8;
            *((void *)v317 - 1) = v320;
            v317 -= 8;
          }
          goto LABEL_451;
        }
LABEL_456:
        sub_566C();
      }
    }
    else
    {
      if (v297 != 1)
      {
LABEL_454:
        *a2 = 1;
        return;
      }
      uint64_t v298 = a1[2];
      uint64_t v299 = *(void **)a1[1];
      uint64_t v300 = *(_WORD *)(v298 + 46) & 0x7FFF;
      uint64_t v301 = (char *)v299[440];
      unint64_t v302 = v299[441];
      if ((unint64_t)v301 >= v302)
      {
        uint64_t v303 = (char *)v299[439];
        uint64_t v304 = (v301 - v303) >> 3;
        if (!((unint64_t)(v304 + 1) >> 61))
        {
          unint64_t v305 = v302 - (void)v303;
          unint64_t v306 = (uint64_t)(v302 - (void)v303) >> 2;
          if (v306 <= v304 + 1) {
            unint64_t v306 = v304 + 1;
          }
          if (v305 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v307 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v307 = v306;
          }
          if (v307)
          {
            unint64_t v308 = (char *)sub_5714((uint64_t)(v299 + 441), v307);
            uint64_t v301 = (char *)v299[440];
            uint64_t v303 = (char *)v299[439];
          }
          else
          {
            unint64_t v308 = 0;
          }
          unint64_t v317 = &v308[8 * v304];
          uint64_t v318 = &v308[8 * v307];
          *(void *)unint64_t v317 = v300;
          unint64_t v311 = v317 + 8;
          while (v301 != v303)
          {
            uint64_t v319 = *((void *)v301 - 1);
            v301 -= 8;
            *((void *)v317 - 1) = v319;
            v317 -= 8;
          }
LABEL_451:
          v299[439] = v317;
          v299[440] = v311;
          v299[441] = v318;
          if (v303) {
            operator delete(v303);
          }
          goto LABEL_453;
        }
        goto LABEL_456;
      }
    }
    *(void *)uint64_t v301 = v300;
    unint64_t v311 = v301 + 8;
LABEL_453:
    v299[440] = v311;
    goto LABEL_454;
  }
  int v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    uint64_t v18 = (void *)a1[1];
    int v17 = (_WORD *)a1[2];
    unint64_t v19 = (void *)*v18;
    *(void *)(v19[401] - 8) += v17[22] & 0x7FFF;
    *(void *)(v19[404] - 8) += v17[21] & 0x7FFF;
    *(void *)(v19[407] - 8) += v17[11] & 0x7FFF;
    *(void *)(v19[410] - 8) += v17[15] & 0x7FFF;
    *(void *)(v19[413] - 8) += v17[12] & 0x7FFF;
    *(void *)(v19[416] - 8) += v17[16] & 0x7FFF;
    *(void *)(v19[419] - 8) += v17[13] & 0x7FFF;
    *(void *)(v19[422] - 8) += v17[19] & 0x7FFF;
    *(void *)(v19[425] - 8) += v17[17] & 0x7FFF;
    *(void *)(v19[428] - 8) += v17[14] & 0x7FFF;
    uint64_t v20 = (unsigned __int16 *)a1[2];
    unint64_t v21 = (void *)*v18;
    *(void *)(v21[431] - 8) += v20[20] & 0x7FFF;
    *(void *)(v21[434] - 8) += v20[18] & 0x7FFF;
    *(void *)(v21[437] - 8) += ((unint64_t)v20[10] >> 1) & 0x3FFF;
    *(void *)(v21[440] - 8) += v20[23] & 0x7FFF;
  }
}

void sub_E0264(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    int v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_DWORD *)(a1[2] + 48) & 0x7FFFFLL;
      uint64_t v8 = (uint64_t *)v6[362];
      unint64_t v23 = v6[363];
      if ((unint64_t)v8 >= v23)
      {
        unint64_t v10 = (uint64_t *)v6[361];
        uint64_t v25 = v8 - v10;
        if ((unint64_t)(v25 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v26 = v23 - (void)v10;
        unint64_t v27 = (uint64_t)(v23 - (void)v10) >> 2;
        if (v27 <= v25 + 1) {
          unint64_t v27 = v25 + 1;
        }
        if (v26 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v28 = v27;
        }
        if (v28)
        {
          uint64_t v29 = (char *)sub_5714((uint64_t)(v6 + 363), v28);
          uint64_t v8 = (uint64_t *)v6[362];
          unint64_t v10 = (uint64_t *)v6[361];
        }
        else
        {
          uint64_t v29 = 0;
        }
        uint64_t v30 = (uint64_t *)&v29[8 * v25];
        uint64_t v31 = &v29[8 * v28];
        *uint64_t v30 = v7;
        uint64_t v24 = v30 + 1;
        while (v8 != v10)
        {
          uint64_t v33 = *--v8;
          *--uint64_t v30 = v33;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1) {
        goto LABEL_38;
      }
      uint64_t v6 = *(void **)a1[1];
      uint64_t v7 = *(_DWORD *)(a1[2] + 48) & 0x7FFFFLL;
      uint64_t v8 = (uint64_t *)v6[362];
      unint64_t v9 = v6[363];
      if ((unint64_t)v8 >= v9)
      {
        unint64_t v10 = (uint64_t *)v6[361];
        uint64_t v11 = v8 - v10;
        if ((unint64_t)(v11 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v12 = v9 - (void)v10;
        unint64_t v13 = (uint64_t)(v9 - (void)v10) >> 2;
        if (v13 <= v11 + 1) {
          unint64_t v13 = v11 + 1;
        }
        if (v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14)
        {
          unint64_t v15 = (char *)sub_5714((uint64_t)(v6 + 363), v14);
          uint64_t v8 = (uint64_t *)v6[362];
          unint64_t v10 = (uint64_t *)v6[361];
        }
        else
        {
          unint64_t v15 = 0;
        }
        uint64_t v30 = (uint64_t *)&v15[8 * v11];
        uint64_t v31 = &v15[8 * v14];
        *uint64_t v30 = v7;
        uint64_t v24 = v30 + 1;
        while (v8 != v10)
        {
          uint64_t v32 = *--v8;
          *--uint64_t v30 = v32;
        }
LABEL_35:
        v6[361] = v30;
        v6[362] = v24;
        v6[363] = v31;
        if (v10) {
          operator delete(v10);
        }
        goto LABEL_37;
      }
    }
    *uint64_t v8 = v7;
    uint64_t v24 = v8 + 1;
LABEL_37:
    v6[362] = v24;
LABEL_38:
    int v34 = 1 << *(_DWORD *)(v3 + 48);
    if (v34 == 2)
    {
      uint64_t v46 = a1[1];
      uint64_t v36 = *(void **)v46;
      uint64_t v37 = *(unsigned __int16 *)(a1[2] + 22);
      unint64_t v38 = *(char **)(*(void *)v46 + 2920);
      unint64_t v47 = *(void *)(*(void *)v46 + 2928);
      if ((unint64_t)v38 >= v47)
      {
        unint64_t v40 = (char *)v36[364];
        uint64_t v49 = (v38 - v40) >> 3;
        if ((unint64_t)(v49 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v50 = v47 - (void)v40;
        unint64_t v51 = (uint64_t)(v47 - (void)v40) >> 2;
        if (v51 <= v49 + 1) {
          unint64_t v51 = v49 + 1;
        }
        if (v50 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v52 = v51;
        }
        if (v52)
        {
          uint64_t v53 = (char *)sub_5714((uint64_t)(v36 + 366), v52);
          unint64_t v38 = (char *)v36[365];
          unint64_t v40 = (char *)v36[364];
        }
        else
        {
          uint64_t v53 = 0;
        }
        uint64_t v54 = &v53[8 * v49];
        int v55 = &v53[8 * v52];
        *(void *)uint64_t v54 = v37;
        unint64_t v48 = v54 + 8;
        while (v38 != v40)
        {
          uint64_t v57 = *((void *)v38 - 1);
          v38 -= 8;
          *((void *)v54 - 1) = v57;
          v54 -= 8;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v34 != 1) {
        goto LABEL_70;
      }
      uint64_t v35 = a1[1];
      uint64_t v36 = *(void **)v35;
      uint64_t v37 = *(unsigned __int16 *)(a1[2] + 22);
      unint64_t v38 = *(char **)(*(void *)v35 + 2920);
      unint64_t v39 = *(void *)(*(void *)v35 + 2928);
      if ((unint64_t)v38 >= v39)
      {
        unint64_t v40 = (char *)v36[364];
        uint64_t v41 = (v38 - v40) >> 3;
        if ((unint64_t)(v41 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v42 = v39 - (void)v40;
        unint64_t v43 = (uint64_t)(v39 - (void)v40) >> 2;
        if (v43 <= v41 + 1) {
          unint64_t v43 = v41 + 1;
        }
        if (v42 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v44 = v43;
        }
        if (v44)
        {
          unint64_t v45 = (char *)sub_5714((uint64_t)(v36 + 366), v44);
          unint64_t v38 = (char *)v36[365];
          unint64_t v40 = (char *)v36[364];
        }
        else
        {
          unint64_t v45 = 0;
        }
        uint64_t v54 = &v45[8 * v41];
        int v55 = &v45[8 * v44];
        *(void *)uint64_t v54 = v37;
        unint64_t v48 = v54 + 8;
        while (v38 != v40)
        {
          uint64_t v56 = *((void *)v38 - 1);
          v38 -= 8;
          *((void *)v54 - 1) = v56;
          v54 -= 8;
        }
LABEL_67:
        v36[364] = v54;
        v36[365] = v48;
        v36[366] = v55;
        if (v40) {
          operator delete(v40);
        }
        goto LABEL_69;
      }
    }
    *(void *)unint64_t v38 = v37;
    unint64_t v48 = v38 + 8;
LABEL_69:
    v36[365] = v48;
LABEL_70:
    int v58 = 1 << *(_DWORD *)(v3 + 48);
    if (v58 == 2)
    {
      uint64_t v70 = a1[1];
      unint64_t v60 = *(void **)v70;
      uint64_t v61 = *(unsigned __int16 *)(a1[2] + 32);
      unint64_t v62 = *(char **)(*(void *)v70 + 2944);
      unint64_t v71 = *(void *)(*(void *)v70 + 2952);
      if ((unint64_t)v62 >= v71)
      {
        unint64_t v64 = (char *)v60[367];
        uint64_t v73 = (v62 - v64) >> 3;
        if ((unint64_t)(v73 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v74 = v71 - (void)v64;
        unint64_t v75 = (uint64_t)(v71 - (void)v64) >> 2;
        if (v75 <= v73 + 1) {
          unint64_t v75 = v73 + 1;
        }
        if (v74 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v76 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v76 = v75;
        }
        if (v76)
        {
          int v77 = (char *)sub_5714((uint64_t)(v60 + 369), v76);
          unint64_t v62 = (char *)v60[368];
          unint64_t v64 = (char *)v60[367];
        }
        else
        {
          int v77 = 0;
        }
        int v78 = &v77[8 * v73];
        uint64_t v79 = &v77[8 * v76];
        *(void *)int v78 = v61;
        unint64_t v72 = v78 + 8;
        while (v62 != v64)
        {
          uint64_t v81 = *((void *)v62 - 1);
          v62 -= 8;
          *((void *)v78 - 1) = v81;
          v78 -= 8;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v58 != 1) {
        goto LABEL_102;
      }
      uint64_t v59 = a1[1];
      unint64_t v60 = *(void **)v59;
      uint64_t v61 = *(unsigned __int16 *)(a1[2] + 32);
      unint64_t v62 = *(char **)(*(void *)v59 + 2944);
      unint64_t v63 = *(void *)(*(void *)v59 + 2952);
      if ((unint64_t)v62 >= v63)
      {
        unint64_t v64 = (char *)v60[367];
        uint64_t v65 = (v62 - v64) >> 3;
        if ((unint64_t)(v65 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v66 = v63 - (void)v64;
        unint64_t v67 = (uint64_t)(v63 - (void)v64) >> 2;
        if (v67 <= v65 + 1) {
          unint64_t v67 = v65 + 1;
        }
        if (v66 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v68 = v67;
        }
        if (v68)
        {
          unint64_t v69 = (char *)sub_5714((uint64_t)(v60 + 369), v68);
          unint64_t v62 = (char *)v60[368];
          unint64_t v64 = (char *)v60[367];
        }
        else
        {
          unint64_t v69 = 0;
        }
        int v78 = &v69[8 * v65];
        uint64_t v79 = &v69[8 * v68];
        *(void *)int v78 = v61;
        unint64_t v72 = v78 + 8;
        while (v62 != v64)
        {
          uint64_t v80 = *((void *)v62 - 1);
          v62 -= 8;
          *((void *)v78 - 1) = v80;
          v78 -= 8;
        }
LABEL_99:
        v60[367] = v78;
        v60[368] = v72;
        v60[369] = v79;
        if (v64) {
          operator delete(v64);
        }
        goto LABEL_101;
      }
    }
    *(void *)unint64_t v62 = v61;
    unint64_t v72 = v62 + 8;
LABEL_101:
    v60[368] = v72;
LABEL_102:
    int v82 = 1 << *(_DWORD *)(v3 + 48);
    if (v82 == 2)
    {
      uint64_t v94 = a1[1];
      unint64_t v84 = *(void **)v94;
      uint64_t v85 = *(unsigned __int16 *)(a1[2] + 24);
      unint64_t v86 = *(char **)(*(void *)v94 + 2968);
      unint64_t v95 = *(void *)(*(void *)v94 + 2976);
      if ((unint64_t)v86 >= v95)
      {
        unint64_t v88 = (char *)v84[370];
        uint64_t v97 = (v86 - v88) >> 3;
        if ((unint64_t)(v97 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v98 = v95 - (void)v88;
        unint64_t v99 = (uint64_t)(v95 - (void)v88) >> 2;
        if (v99 <= v97 + 1) {
          unint64_t v99 = v97 + 1;
        }
        if (v98 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v100 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v100 = v99;
        }
        if (v100)
        {
          uint64_t v101 = (char *)sub_5714((uint64_t)(v84 + 372), v100);
          unint64_t v86 = (char *)v84[371];
          unint64_t v88 = (char *)v84[370];
        }
        else
        {
          uint64_t v101 = 0;
        }
        int v102 = &v101[8 * v97];
        unint64_t v103 = &v101[8 * v100];
        *(void *)int v102 = v85;
        unint64_t v96 = v102 + 8;
        while (v86 != v88)
        {
          uint64_t v105 = *((void *)v86 - 1);
          v86 -= 8;
          *((void *)v102 - 1) = v105;
          v102 -= 8;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v82 != 1) {
        goto LABEL_134;
      }
      uint64_t v83 = a1[1];
      unint64_t v84 = *(void **)v83;
      uint64_t v85 = *(unsigned __int16 *)(a1[2] + 24);
      unint64_t v86 = *(char **)(*(void *)v83 + 2968);
      unint64_t v87 = *(void *)(*(void *)v83 + 2976);
      if ((unint64_t)v86 >= v87)
      {
        unint64_t v88 = (char *)v84[370];
        uint64_t v89 = (v86 - v88) >> 3;
        if ((unint64_t)(v89 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v90 = v87 - (void)v88;
        unint64_t v91 = (uint64_t)(v87 - (void)v88) >> 2;
        if (v91 <= v89 + 1) {
          unint64_t v91 = v89 + 1;
        }
        if (v90 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v92 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v92 = v91;
        }
        if (v92)
        {
          unint64_t v93 = (char *)sub_5714((uint64_t)(v84 + 372), v92);
          unint64_t v86 = (char *)v84[371];
          unint64_t v88 = (char *)v84[370];
        }
        else
        {
          unint64_t v93 = 0;
        }
        int v102 = &v93[8 * v89];
        unint64_t v103 = &v93[8 * v92];
        *(void *)int v102 = v85;
        unint64_t v96 = v102 + 8;
        while (v86 != v88)
        {
          uint64_t v104 = *((void *)v86 - 1);
          v86 -= 8;
          *((void *)v102 - 1) = v104;
          v102 -= 8;
        }
LABEL_131:
        v84[370] = v102;
        v84[371] = v96;
        v84[372] = v103;
        if (v88) {
          operator delete(v88);
        }
        goto LABEL_133;
      }
    }
    *(void *)unint64_t v86 = v85;
    unint64_t v96 = v86 + 8;
LABEL_133:
    v84[371] = v96;
LABEL_134:
    int v106 = 1 << *(_DWORD *)(v3 + 48);
    if (v106 == 2)
    {
      uint64_t v118 = a1[1];
      unint64_t v108 = *(void **)v118;
      uint64_t v109 = *(unsigned __int16 *)(a1[2] + 34);
      unint64_t v110 = *(char **)(*(void *)v118 + 2992);
      unint64_t v119 = *(void *)(*(void *)v118 + 3000);
      if ((unint64_t)v110 >= v119)
      {
        uint64_t v112 = (char *)v108[373];
        uint64_t v121 = (v110 - v112) >> 3;
        if ((unint64_t)(v121 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v122 = v119 - (void)v112;
        unint64_t v123 = (uint64_t)(v119 - (void)v112) >> 2;
        if (v123 <= v121 + 1) {
          unint64_t v123 = v121 + 1;
        }
        if (v122 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v124 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v124 = v123;
        }
        if (v124)
        {
          unint64_t v125 = (char *)sub_5714((uint64_t)(v108 + 375), v124);
          unint64_t v110 = (char *)v108[374];
          uint64_t v112 = (char *)v108[373];
        }
        else
        {
          unint64_t v125 = 0;
        }
        int v126 = &v125[8 * v121];
        uint64_t v127 = &v125[8 * v124];
        *(void *)int v126 = v109;
        uint64_t v120 = v126 + 8;
        while (v110 != v112)
        {
          uint64_t v129 = *((void *)v110 - 1);
          v110 -= 8;
          *((void *)v126 - 1) = v129;
          v126 -= 8;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v106 != 1) {
        goto LABEL_166;
      }
      uint64_t v107 = a1[1];
      unint64_t v108 = *(void **)v107;
      uint64_t v109 = *(unsigned __int16 *)(a1[2] + 34);
      unint64_t v110 = *(char **)(*(void *)v107 + 2992);
      unint64_t v111 = *(void *)(*(void *)v107 + 3000);
      if ((unint64_t)v110 >= v111)
      {
        uint64_t v112 = (char *)v108[373];
        uint64_t v113 = (v110 - v112) >> 3;
        if ((unint64_t)(v113 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v114 = v111 - (void)v112;
        unint64_t v115 = (uint64_t)(v111 - (void)v112) >> 2;
        if (v115 <= v113 + 1) {
          unint64_t v115 = v113 + 1;
        }
        if (v114 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v116 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v116 = v115;
        }
        if (v116)
        {
          uint64_t v117 = (char *)sub_5714((uint64_t)(v108 + 375), v116);
          unint64_t v110 = (char *)v108[374];
          uint64_t v112 = (char *)v108[373];
        }
        else
        {
          uint64_t v117 = 0;
        }
        int v126 = &v117[8 * v113];
        uint64_t v127 = &v117[8 * v116];
        *(void *)int v126 = v109;
        uint64_t v120 = v126 + 8;
        while (v110 != v112)
        {
          uint64_t v128 = *((void *)v110 - 1);
          v110 -= 8;
          *((void *)v126 - 1) = v128;
          v126 -= 8;
        }
LABEL_163:
        v108[373] = v126;
        v108[374] = v120;
        v108[375] = v127;
        if (v112) {
          operator delete(v112);
        }
        goto LABEL_165;
      }
    }
    *(void *)unint64_t v110 = v109;
    uint64_t v120 = v110 + 8;
LABEL_165:
    v108[374] = v120;
LABEL_166:
    int v130 = 1 << *(_DWORD *)(v3 + 48);
    if (v130 == 2)
    {
      uint64_t v142 = a1[1];
      unint64_t v132 = *(void **)v142;
      uint64_t v133 = *(unsigned __int16 *)(a1[2] + 26);
      uint64_t v134 = *(char **)(*(void *)v142 + 3016);
      unint64_t v143 = *(void *)(*(void *)v142 + 3024);
      if ((unint64_t)v134 >= v143)
      {
        unint64_t v136 = (char *)v132[376];
        uint64_t v145 = (v134 - v136) >> 3;
        if ((unint64_t)(v145 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v146 = v143 - (void)v136;
        unint64_t v147 = (uint64_t)(v143 - (void)v136) >> 2;
        if (v147 <= v145 + 1) {
          unint64_t v147 = v145 + 1;
        }
        if (v146 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v148 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v148 = v147;
        }
        if (v148)
        {
          uint64_t v149 = (char *)sub_5714((uint64_t)(v132 + 378), v148);
          uint64_t v134 = (char *)v132[377];
          unint64_t v136 = (char *)v132[376];
        }
        else
        {
          uint64_t v149 = 0;
        }
        unint64_t v150 = &v149[8 * v145];
        unint64_t v151 = &v149[8 * v148];
        *(void *)unint64_t v150 = v133;
        unint64_t v144 = v150 + 8;
        while (v134 != v136)
        {
          uint64_t v153 = *((void *)v134 - 1);
          v134 -= 8;
          *((void *)v150 - 1) = v153;
          v150 -= 8;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v130 != 1) {
        goto LABEL_198;
      }
      uint64_t v131 = a1[1];
      unint64_t v132 = *(void **)v131;
      uint64_t v133 = *(unsigned __int16 *)(a1[2] + 26);
      uint64_t v134 = *(char **)(*(void *)v131 + 3016);
      unint64_t v135 = *(void *)(*(void *)v131 + 3024);
      if ((unint64_t)v134 >= v135)
      {
        unint64_t v136 = (char *)v132[376];
        uint64_t v137 = (v134 - v136) >> 3;
        if ((unint64_t)(v137 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v138 = v135 - (void)v136;
        unint64_t v139 = (uint64_t)(v135 - (void)v136) >> 2;
        if (v139 <= v137 + 1) {
          unint64_t v139 = v137 + 1;
        }
        if (v138 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v140 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v140 = v139;
        }
        if (v140)
        {
          uint64_t v141 = (char *)sub_5714((uint64_t)(v132 + 378), v140);
          uint64_t v134 = (char *)v132[377];
          unint64_t v136 = (char *)v132[376];
        }
        else
        {
          uint64_t v141 = 0;
        }
        unint64_t v150 = &v141[8 * v137];
        unint64_t v151 = &v141[8 * v140];
        *(void *)unint64_t v150 = v133;
        unint64_t v144 = v150 + 8;
        while (v134 != v136)
        {
          uint64_t v152 = *((void *)v134 - 1);
          v134 -= 8;
          *((void *)v150 - 1) = v152;
          v150 -= 8;
        }
LABEL_195:
        v132[376] = v150;
        v132[377] = v144;
        v132[378] = v151;
        if (v136) {
          operator delete(v136);
        }
        goto LABEL_197;
      }
    }
    *(void *)uint64_t v134 = v133;
    unint64_t v144 = v134 + 8;
LABEL_197:
    v132[377] = v144;
LABEL_198:
    int v154 = 1 << *(_DWORD *)(v3 + 48);
    if (v154 == 2)
    {
      unint64_t v155 = *(void **)a1[1];
      uint64_t v156 = (unsigned __int16)WORD2(*(void *)(a1[2] + 38));
      unint64_t v157 = (char *)v155[380];
      unint64_t v165 = v155[381];
      if ((unint64_t)v157 >= v165)
      {
        unint64_t v159 = (char *)v155[379];
        uint64_t v167 = (v157 - v159) >> 3;
        if ((unint64_t)(v167 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v168 = v165 - (void)v159;
        unint64_t v169 = (uint64_t)(v165 - (void)v159) >> 2;
        if (v169 <= v167 + 1) {
          unint64_t v169 = v167 + 1;
        }
        if (v168 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v170 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v170 = v169;
        }
        if (v170)
        {
          uint64_t v171 = (char *)sub_5714((uint64_t)(v155 + 381), v170);
          unint64_t v157 = (char *)v155[380];
          unint64_t v159 = (char *)v155[379];
        }
        else
        {
          uint64_t v171 = 0;
        }
        unint64_t v172 = &v171[8 * v167];
        unint64_t v173 = &v171[8 * v170];
        *(void *)unint64_t v172 = v156;
        unint64_t v166 = v172 + 8;
        while (v157 != v159)
        {
          uint64_t v175 = *((void *)v157 - 1);
          v157 -= 8;
          *((void *)v172 - 1) = v175;
          v172 -= 8;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v154 != 1) {
        goto LABEL_230;
      }
      unint64_t v155 = *(void **)a1[1];
      uint64_t v156 = (unsigned __int16)WORD2(*(void *)(a1[2] + 38));
      unint64_t v157 = (char *)v155[380];
      unint64_t v158 = v155[381];
      if ((unint64_t)v157 >= v158)
      {
        unint64_t v159 = (char *)v155[379];
        uint64_t v160 = (v157 - v159) >> 3;
        if ((unint64_t)(v160 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v161 = v158 - (void)v159;
        unint64_t v162 = (uint64_t)(v158 - (void)v159) >> 2;
        if (v162 <= v160 + 1) {
          unint64_t v162 = v160 + 1;
        }
        if (v161 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v163 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v163 = v162;
        }
        if (v163)
        {
          uint64_t v164 = (char *)sub_5714((uint64_t)(v155 + 381), v163);
          unint64_t v157 = (char *)v155[380];
          unint64_t v159 = (char *)v155[379];
        }
        else
        {
          uint64_t v164 = 0;
        }
        unint64_t v172 = &v164[8 * v160];
        unint64_t v173 = &v164[8 * v163];
        *(void *)unint64_t v172 = v156;
        unint64_t v166 = v172 + 8;
        while (v157 != v159)
        {
          uint64_t v174 = *((void *)v157 - 1);
          v157 -= 8;
          *((void *)v172 - 1) = v174;
          v172 -= 8;
        }
LABEL_227:
        v155[379] = v172;
        v155[380] = v166;
        v155[381] = v173;
        if (v159) {
          operator delete(v159);
        }
        goto LABEL_229;
      }
    }
    *(void *)unint64_t v157 = v156;
    unint64_t v166 = v157 + 8;
LABEL_229:
    v155[380] = v166;
LABEL_230:
    int v176 = 1 << *(_DWORD *)(v3 + 48);
    if (v176 == 2)
    {
      unint64_t v177 = *(void **)a1[1];
      uint64_t v178 = WORD1(*(void *)(a1[2] + 38));
      unint64_t v179 = (char *)v177[383];
      unint64_t v187 = v177[384];
      if ((unint64_t)v179 >= v187)
      {
        unint64_t v181 = (char *)v177[382];
        uint64_t v189 = (v179 - v181) >> 3;
        if ((unint64_t)(v189 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v190 = v187 - (void)v181;
        unint64_t v191 = (uint64_t)(v187 - (void)v181) >> 2;
        if (v191 <= v189 + 1) {
          unint64_t v191 = v189 + 1;
        }
        if (v190 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v192 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v192 = v191;
        }
        if (v192)
        {
          uint64_t v193 = (char *)sub_5714((uint64_t)(v177 + 384), v192);
          unint64_t v179 = (char *)v177[383];
          unint64_t v181 = (char *)v177[382];
        }
        else
        {
          uint64_t v193 = 0;
        }
        unint64_t v194 = &v193[8 * v189];
        unint64_t v195 = &v193[8 * v192];
        *(void *)unint64_t v194 = v178;
        unint64_t v188 = v194 + 8;
        while (v179 != v181)
        {
          uint64_t v197 = *((void *)v179 - 1);
          v179 -= 8;
          *((void *)v194 - 1) = v197;
          v194 -= 8;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v176 != 1) {
        goto LABEL_262;
      }
      unint64_t v177 = *(void **)a1[1];
      uint64_t v178 = WORD1(*(void *)(a1[2] + 38));
      unint64_t v179 = (char *)v177[383];
      unint64_t v180 = v177[384];
      if ((unint64_t)v179 >= v180)
      {
        unint64_t v181 = (char *)v177[382];
        uint64_t v182 = (v179 - v181) >> 3;
        if ((unint64_t)(v182 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v183 = v180 - (void)v181;
        unint64_t v184 = (uint64_t)(v180 - (void)v181) >> 2;
        if (v184 <= v182 + 1) {
          unint64_t v184 = v182 + 1;
        }
        if (v183 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v185 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v185 = v184;
        }
        if (v185)
        {
          uint64_t v186 = (char *)sub_5714((uint64_t)(v177 + 384), v185);
          unint64_t v179 = (char *)v177[383];
          unint64_t v181 = (char *)v177[382];
        }
        else
        {
          uint64_t v186 = 0;
        }
        unint64_t v194 = &v186[8 * v182];
        unint64_t v195 = &v186[8 * v185];
        *(void *)unint64_t v194 = v178;
        unint64_t v188 = v194 + 8;
        while (v179 != v181)
        {
          uint64_t v196 = *((void *)v179 - 1);
          v179 -= 8;
          *((void *)v194 - 1) = v196;
          v194 -= 8;
        }
LABEL_259:
        v177[382] = v194;
        v177[383] = v188;
        v177[384] = v195;
        if (v181) {
          operator delete(v181);
        }
        goto LABEL_261;
      }
    }
    *(void *)unint64_t v179 = v178;
    unint64_t v188 = v179 + 8;
LABEL_261:
    v177[383] = v188;
LABEL_262:
    int v198 = 1 << *(_DWORD *)(v3 + 48);
    if (v198 == 2)
    {
      uint64_t v210 = a1[1];
      uint64_t v200 = *(void **)v210;
      uint64_t v201 = *(unsigned __int16 *)(a1[2] + 36);
      unint64_t v202 = *(char **)(*(void *)v210 + 3088);
      unint64_t v211 = *(void *)(*(void *)v210 + 3096);
      if ((unint64_t)v202 >= v211)
      {
        uint64_t v204 = (char *)v200[385];
        uint64_t v213 = (v202 - v204) >> 3;
        if ((unint64_t)(v213 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v214 = v211 - (void)v204;
        unint64_t v215 = (uint64_t)(v211 - (void)v204) >> 2;
        if (v215 <= v213 + 1) {
          unint64_t v215 = v213 + 1;
        }
        if (v214 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v216 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v216 = v215;
        }
        if (v216)
        {
          unint64_t v217 = (char *)sub_5714((uint64_t)(v200 + 387), v216);
          unint64_t v202 = (char *)v200[386];
          uint64_t v204 = (char *)v200[385];
        }
        else
        {
          unint64_t v217 = 0;
        }
        unint64_t v218 = &v217[8 * v213];
        unint64_t v219 = &v217[8 * v216];
        *(void *)unint64_t v218 = v201;
        int v212 = v218 + 8;
        while (v202 != v204)
        {
          uint64_t v221 = *((void *)v202 - 1);
          v202 -= 8;
          *((void *)v218 - 1) = v221;
          v218 -= 8;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v198 != 1) {
        goto LABEL_294;
      }
      uint64_t v199 = a1[1];
      uint64_t v200 = *(void **)v199;
      uint64_t v201 = *(unsigned __int16 *)(a1[2] + 36);
      unint64_t v202 = *(char **)(*(void *)v199 + 3088);
      unint64_t v203 = *(void *)(*(void *)v199 + 3096);
      if ((unint64_t)v202 >= v203)
      {
        uint64_t v204 = (char *)v200[385];
        uint64_t v205 = (v202 - v204) >> 3;
        if ((unint64_t)(v205 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v206 = v203 - (void)v204;
        unint64_t v207 = (uint64_t)(v203 - (void)v204) >> 2;
        if (v207 <= v205 + 1) {
          unint64_t v207 = v205 + 1;
        }
        if (v206 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v208 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v208 = v207;
        }
        if (v208)
        {
          int v209 = (char *)sub_5714((uint64_t)(v200 + 387), v208);
          unint64_t v202 = (char *)v200[386];
          uint64_t v204 = (char *)v200[385];
        }
        else
        {
          int v209 = 0;
        }
        unint64_t v218 = &v209[8 * v205];
        unint64_t v219 = &v209[8 * v208];
        *(void *)unint64_t v218 = v201;
        int v212 = v218 + 8;
        while (v202 != v204)
        {
          uint64_t v220 = *((void *)v202 - 1);
          v202 -= 8;
          *((void *)v218 - 1) = v220;
          v218 -= 8;
        }
LABEL_291:
        v200[385] = v218;
        v200[386] = v212;
        v200[387] = v219;
        if (v204) {
          operator delete(v204);
        }
        goto LABEL_293;
      }
    }
    *(void *)unint64_t v202 = v201;
    int v212 = v202 + 8;
LABEL_293:
    v200[386] = v212;
LABEL_294:
    int v222 = 1 << *(_DWORD *)(v3 + 48);
    if (v222 == 2)
    {
      uint64_t v234 = a1[1];
      unint64_t v224 = *(void **)v234;
      uint64_t v225 = *(unsigned __int16 *)(a1[2] + 28);
      unint64_t v226 = *(char **)(*(void *)v234 + 3112);
      unint64_t v235 = *(void *)(*(void *)v234 + 3120);
      if ((unint64_t)v226 >= v235)
      {
        uint64_t v228 = (char *)v224[388];
        uint64_t v237 = (v226 - v228) >> 3;
        if ((unint64_t)(v237 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v238 = v235 - (void)v228;
        unint64_t v239 = (uint64_t)(v235 - (void)v228) >> 2;
        if (v239 <= v237 + 1) {
          unint64_t v239 = v237 + 1;
        }
        if (v238 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v240 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v240 = v239;
        }
        if (v240)
        {
          uint64_t v241 = (char *)sub_5714((uint64_t)(v224 + 390), v240);
          unint64_t v226 = (char *)v224[389];
          uint64_t v228 = (char *)v224[388];
        }
        else
        {
          uint64_t v241 = 0;
        }
        unint64_t v242 = &v241[8 * v237];
        unint64_t v243 = &v241[8 * v240];
        *(void *)unint64_t v242 = v225;
        unint64_t v236 = v242 + 8;
        while (v226 != v228)
        {
          uint64_t v245 = *((void *)v226 - 1);
          v226 -= 8;
          *((void *)v242 - 1) = v245;
          v242 -= 8;
        }
        goto LABEL_323;
      }
    }
    else
    {
      if (v222 != 1) {
        goto LABEL_326;
      }
      uint64_t v223 = a1[1];
      unint64_t v224 = *(void **)v223;
      uint64_t v225 = *(unsigned __int16 *)(a1[2] + 28);
      unint64_t v226 = *(char **)(*(void *)v223 + 3112);
      unint64_t v227 = *(void *)(*(void *)v223 + 3120);
      if ((unint64_t)v226 >= v227)
      {
        uint64_t v228 = (char *)v224[388];
        uint64_t v229 = (v226 - v228) >> 3;
        if ((unint64_t)(v229 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v230 = v227 - (void)v228;
        unint64_t v231 = (uint64_t)(v227 - (void)v228) >> 2;
        if (v231 <= v229 + 1) {
          unint64_t v231 = v229 + 1;
        }
        if (v230 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v232 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v232 = v231;
        }
        if (v232)
        {
          uint64_t v233 = (char *)sub_5714((uint64_t)(v224 + 390), v232);
          unint64_t v226 = (char *)v224[389];
          uint64_t v228 = (char *)v224[388];
        }
        else
        {
          uint64_t v233 = 0;
        }
        unint64_t v242 = &v233[8 * v229];
        unint64_t v243 = &v233[8 * v232];
        *(void *)unint64_t v242 = v225;
        unint64_t v236 = v242 + 8;
        while (v226 != v228)
        {
          uint64_t v244 = *((void *)v226 - 1);
          v226 -= 8;
          *((void *)v242 - 1) = v244;
          v242 -= 8;
        }
LABEL_323:
        v224[388] = v242;
        v224[389] = v236;
        v224[390] = v243;
        if (v228) {
          operator delete(v228);
        }
        goto LABEL_325;
      }
    }
    *(void *)unint64_t v226 = v225;
    unint64_t v236 = v226 + 8;
LABEL_325:
    v224[389] = v236;
LABEL_326:
    int v246 = 1 << *(_DWORD *)(v3 + 48);
    if (v246 == 2)
    {
      uint64_t v258 = a1[1];
      unint64_t v248 = *(void **)v258;
      uint64_t v249 = *(unsigned __int16 *)(a1[2] + 38);
      unint64_t v250 = *(char **)(*(void *)v258 + 3136);
      unint64_t v259 = *(void *)(*(void *)v258 + 3144);
      if ((unint64_t)v250 >= v259)
      {
        uint64_t v252 = (char *)v248[391];
        uint64_t v261 = (v250 - v252) >> 3;
        if ((unint64_t)(v261 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v262 = v259 - (void)v252;
        unint64_t v263 = (uint64_t)(v259 - (void)v252) >> 2;
        if (v263 <= v261 + 1) {
          unint64_t v263 = v261 + 1;
        }
        if (v262 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v264 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v264 = v263;
        }
        if (v264)
        {
          unint64_t v265 = (char *)sub_5714((uint64_t)(v248 + 393), v264);
          unint64_t v250 = (char *)v248[392];
          uint64_t v252 = (char *)v248[391];
        }
        else
        {
          unint64_t v265 = 0;
        }
        uint64_t v266 = &v265[8 * v261];
        unint64_t v267 = &v265[8 * v264];
        *(void *)uint64_t v266 = v249;
        unint64_t v260 = v266 + 8;
        while (v250 != v252)
        {
          uint64_t v269 = *((void *)v250 - 1);
          v250 -= 8;
          *((void *)v266 - 1) = v269;
          v266 -= 8;
        }
        goto LABEL_355;
      }
    }
    else
    {
      if (v246 != 1) {
        goto LABEL_358;
      }
      uint64_t v247 = a1[1];
      unint64_t v248 = *(void **)v247;
      uint64_t v249 = *(unsigned __int16 *)(a1[2] + 38);
      unint64_t v250 = *(char **)(*(void *)v247 + 3136);
      unint64_t v251 = *(void *)(*(void *)v247 + 3144);
      if ((unint64_t)v250 >= v251)
      {
        uint64_t v252 = (char *)v248[391];
        uint64_t v253 = (v250 - v252) >> 3;
        if ((unint64_t)(v253 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v254 = v251 - (void)v252;
        unint64_t v255 = (uint64_t)(v251 - (void)v252) >> 2;
        if (v255 <= v253 + 1) {
          unint64_t v255 = v253 + 1;
        }
        if (v254 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v256 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v256 = v255;
        }
        if (v256)
        {
          unint64_t v257 = (char *)sub_5714((uint64_t)(v248 + 393), v256);
          unint64_t v250 = (char *)v248[392];
          uint64_t v252 = (char *)v248[391];
        }
        else
        {
          unint64_t v257 = 0;
        }
        uint64_t v266 = &v257[8 * v253];
        unint64_t v267 = &v257[8 * v256];
        *(void *)uint64_t v266 = v249;
        unint64_t v260 = v266 + 8;
        while (v250 != v252)
        {
          uint64_t v268 = *((void *)v250 - 1);
          v250 -= 8;
          *((void *)v266 - 1) = v268;
          v266 -= 8;
        }
LABEL_355:
        v248[391] = v266;
        v248[392] = v260;
        v248[393] = v267;
        if (v252) {
          operator delete(v252);
        }
        goto LABEL_357;
      }
    }
    *(void *)unint64_t v250 = v249;
    unint64_t v260 = v250 + 8;
LABEL_357:
    v248[392] = v260;
LABEL_358:
    int v270 = 1 << *(_DWORD *)(v3 + 48);
    if (v270 == 2)
    {
      uint64_t v282 = a1[1];
      unint64_t v272 = *(void **)v282;
      uint64_t v273 = *(unsigned __int16 *)(a1[2] + 30);
      uint64_t v274 = *(char **)(*(void *)v282 + 3160);
      unint64_t v283 = *(void *)(*(void *)v282 + 3168);
      if ((unint64_t)v274 >= v283)
      {
        uint64_t v276 = (char *)v272[394];
        uint64_t v285 = (v274 - v276) >> 3;
        if ((unint64_t)(v285 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v286 = v283 - (void)v276;
        unint64_t v287 = (uint64_t)(v283 - (void)v276) >> 2;
        if (v287 <= v285 + 1) {
          unint64_t v287 = v285 + 1;
        }
        if (v286 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v288 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v288 = v287;
        }
        if (v288)
        {
          unint64_t v289 = (char *)sub_5714((uint64_t)(v272 + 396), v288);
          uint64_t v274 = (char *)v272[395];
          uint64_t v276 = (char *)v272[394];
        }
        else
        {
          unint64_t v289 = 0;
        }
        unint64_t v290 = &v289[8 * v285];
        unint64_t v291 = &v289[8 * v288];
        *(void *)unint64_t v290 = v273;
        unint64_t v284 = v290 + 8;
        while (v274 != v276)
        {
          uint64_t v293 = *((void *)v274 - 1);
          v274 -= 8;
          *((void *)v290 - 1) = v293;
          v290 -= 8;
        }
        goto LABEL_387;
      }
    }
    else
    {
      if (v270 != 1) {
        goto LABEL_390;
      }
      uint64_t v271 = a1[1];
      unint64_t v272 = *(void **)v271;
      uint64_t v273 = *(unsigned __int16 *)(a1[2] + 30);
      uint64_t v274 = *(char **)(*(void *)v271 + 3160);
      unint64_t v275 = *(void *)(*(void *)v271 + 3168);
      if ((unint64_t)v274 >= v275)
      {
        uint64_t v276 = (char *)v272[394];
        uint64_t v277 = (v274 - v276) >> 3;
        if ((unint64_t)(v277 + 1) >> 61) {
          goto LABEL_424;
        }
        unint64_t v278 = v275 - (void)v276;
        unint64_t v279 = (uint64_t)(v275 - (void)v276) >> 2;
        if (v279 <= v277 + 1) {
          unint64_t v279 = v277 + 1;
        }
        if (v278 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v280 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v280 = v279;
        }
        if (v280)
        {
          uint64_t v281 = (char *)sub_5714((uint64_t)(v272 + 396), v280);
          uint64_t v274 = (char *)v272[395];
          uint64_t v276 = (char *)v272[394];
        }
        else
        {
          uint64_t v281 = 0;
        }
        unint64_t v290 = &v281[8 * v277];
        unint64_t v291 = &v281[8 * v280];
        *(void *)unint64_t v290 = v273;
        unint64_t v284 = v290 + 8;
        while (v274 != v276)
        {
          uint64_t v292 = *((void *)v274 - 1);
          v274 -= 8;
          *((void *)v290 - 1) = v292;
          v290 -= 8;
        }
LABEL_387:
        v272[394] = v290;
        v272[395] = v284;
        v272[396] = v291;
        if (v276) {
          operator delete(v276);
        }
        goto LABEL_389;
      }
    }
    *(void *)uint64_t v274 = v273;
    unint64_t v284 = v274 + 8;
LABEL_389:
    v272[395] = v284;
LABEL_390:
    int v294 = 1 << *(_DWORD *)(v3 + 48);
    if (v294 == 2)
    {
      uint64_t v307 = a1[2];
      unint64_t v296 = *(void **)a1[1];
      *((void *)&v308 + 1) = *(unsigned __int8 *)(v307 + 46);
      *(void *)&long long v308 = *(void *)(v307 + 38);
      uint64_t v298 = (v308 >> 48) & 0xFFFFF;
      uint64_t v299 = (char *)v296[398];
      unint64_t v309 = v296[399];
      if ((unint64_t)v299 >= v309)
      {
        uint64_t v301 = (char *)v296[397];
        uint64_t v311 = (v299 - v301) >> 3;
        if (!((unint64_t)(v311 + 1) >> 61))
        {
          unint64_t v312 = v309 - (void)v301;
          unint64_t v313 = (uint64_t)(v309 - (void)v301) >> 2;
          if (v313 <= v311 + 1) {
            unint64_t v313 = v311 + 1;
          }
          if (v312 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v314 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v314 = v313;
          }
          if (v314)
          {
            unint64_t v315 = (char *)sub_5714((uint64_t)(v296 + 399), v314);
            uint64_t v299 = (char *)v296[398];
            uint64_t v301 = (char *)v296[397];
          }
          else
          {
            unint64_t v315 = 0;
          }
          unint64_t v316 = &v315[8 * v311];
          unint64_t v317 = &v315[8 * v314];
          *(void *)unint64_t v316 = v298;
          unint64_t v310 = v316 + 8;
          while (v299 != v301)
          {
            uint64_t v319 = *((void *)v299 - 1);
            v299 -= 8;
            *((void *)v316 - 1) = v319;
            v316 -= 8;
          }
          goto LABEL_419;
        }
LABEL_424:
        sub_566C();
      }
    }
    else
    {
      if (v294 != 1)
      {
LABEL_422:
        *a2 = 1;
        return;
      }
      uint64_t v295 = a1[2];
      unint64_t v296 = *(void **)a1[1];
      *((void *)&v297 + 1) = *(unsigned __int8 *)(v295 + 46);
      *(void *)&long long v297 = *(void *)(v295 + 38);
      uint64_t v298 = (v297 >> 48) & 0xFFFFF;
      uint64_t v299 = (char *)v296[398];
      unint64_t v300 = v296[399];
      if ((unint64_t)v299 >= v300)
      {
        uint64_t v301 = (char *)v296[397];
        uint64_t v302 = (v299 - v301) >> 3;
        if (!((unint64_t)(v302 + 1) >> 61))
        {
          unint64_t v303 = v300 - (void)v301;
          unint64_t v304 = (uint64_t)(v300 - (void)v301) >> 2;
          if (v304 <= v302 + 1) {
            unint64_t v304 = v302 + 1;
          }
          if (v303 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v305 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v305 = v304;
          }
          if (v305)
          {
            unint64_t v306 = (char *)sub_5714((uint64_t)(v296 + 399), v305);
            uint64_t v299 = (char *)v296[398];
            uint64_t v301 = (char *)v296[397];
          }
          else
          {
            unint64_t v306 = 0;
          }
          unint64_t v316 = &v306[8 * v302];
          unint64_t v317 = &v306[8 * v305];
          *(void *)unint64_t v316 = v298;
          unint64_t v310 = v316 + 8;
          while (v299 != v301)
          {
            uint64_t v318 = *((void *)v299 - 1);
            v299 -= 8;
            *((void *)v316 - 1) = v318;
            v316 -= 8;
          }
LABEL_419:
          v296[397] = v316;
          v296[398] = v310;
          v296[399] = v317;
          if (v301) {
            operator delete(v301);
          }
          goto LABEL_421;
        }
        goto LABEL_424;
      }
    }
    *(void *)uint64_t v299 = v298;
    unint64_t v310 = v299 + 8;
LABEL_421:
    v296[398] = v310;
    goto LABEL_422;
  }
  int v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    uint64_t v18 = (void *)a1[1];
    uint64_t v17 = a1[2];
    unint64_t v19 = (void *)*v18;
    *(void *)(v19[362] - 8) += *(_DWORD *)(v17 + 48) & 0x7FFFF;
    *(void *)(v19[365] - 8) += *(unsigned __int16 *)(v17 + 22);
    *(void *)(v19[368] - 8) += *(unsigned __int16 *)(v17 + 32);
    *(void *)(v19[371] - 8) += *(unsigned __int16 *)(v17 + 24);
    *(void *)(v19[374] - 8) += *(unsigned __int16 *)(v17 + 34);
    *(void *)(v19[377] - 8) += *(unsigned __int16 *)(v17 + 26);
    *(void *)(v19[380] - 8) += (unsigned __int16)WORD2(*(void *)(v17 + 38));
    *(void *)(v19[383] - 8) += WORD1(*(void *)(v17 + 38));
    *(void *)(v19[386] - 8) += *(unsigned __int16 *)(v17 + 36);
    *(void *)(v19[389] - 8) += *(unsigned __int16 *)(v17 + 28);
    uint64_t v20 = a1[2];
    unint64_t v21 = (void *)*v18;
    *(void *)(v21[392] - 8) += *(unsigned __int16 *)(v20 + 38);
    *(void *)(v21[395] - 8) += *(unsigned __int16 *)(v20 + 30);
    *((void *)&v22 + 1) = *(unsigned __int8 *)(v20 + 46);
    *(void *)&long long v22 = *(void *)(v20 + 38);
    *(void *)(v21[398] - 8) += (v22 >> 48) & 0xFFFFF;
  }
}

void sub_E177C(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    long long v297 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    unint64_t v296 = *v297;
    uint64_t v298 = (char *)v297[1] - (char *)*v297;
    if (v298)
    {
      unint64_t v299 = v298 >> 2;
      if (v299 <= 1) {
        unint64_t v299 = 1;
      }
      do
      {
        int v300 = *v296++;
        switch(v300)
        {
          case 211:
            unint64_t v301 = *(_WORD *)(a1[3] + 58) & 0x3FFF;
            uint64_t v302 = (void *)(*(void *)a1[2] + 5848);
            goto LABEL_410;
          case 212:
            unint64_t v301 = *(_WORD *)(a1[3] + 40) & 0x7FFF;
            uint64_t v302 = (void *)(*(void *)a1[2] + 5872);
            goto LABEL_410;
          case 213:
            unint64_t v301 = *(_WORD *)(a1[3] + 60) & 0x3FFF;
            uint64_t v302 = (void *)(*(void *)a1[2] + 5896);
            goto LABEL_410;
          case 214:
            unint64_t v301 = *(_WORD *)(a1[3] + 42) & 0x7FFF;
            uint64_t v302 = (void *)(*(void *)a1[2] + 5920);
            goto LABEL_410;
          case 215:
            unint64_t v301 = *(_WORD *)(a1[3] + 62) & 0x3FFF;
            uint64_t v302 = (void *)(*(void *)a1[2] + 5944);
            goto LABEL_410;
          case 216:
            unint64_t v301 = *(_WORD *)(a1[3] + 44) & 0x7FFF;
            uint64_t v302 = (void *)(*(void *)a1[2] + 5968);
            goto LABEL_410;
          case 217:
            unint64_t v301 = *(_DWORD *)(a1[3] + 24) & 0x3FFFF;
            uint64_t v302 = (void *)(*(void *)a1[2] + 5992);
            goto LABEL_410;
          case 218:
            unint64_t v301 = *(_WORD *)(a1[3] + 52) & 0x7FFF;
            uint64_t v302 = (void *)(*(void *)a1[2] + 6016);
            goto LABEL_410;
          case 219:
            unint64_t v301 = *(_WORD *)(a1[3] + 34) & 0x3FFF;
            uint64_t v302 = (void *)(*(void *)a1[2] + 6040);
            goto LABEL_410;
          case 220:
            unint64_t v301 = *(_WORD *)(a1[3] + 54) & 0x7FFF;
            uint64_t v302 = (void *)(*(void *)a1[2] + 6064);
            goto LABEL_410;
          case 221:
            unint64_t v301 = *(_WORD *)(a1[3] + 36) & 0x3FFF;
            uint64_t v302 = (void *)(*(void *)a1[2] + 6088);
            goto LABEL_410;
          case 222:
            unint64_t v301 = *(_WORD *)(a1[3] + 56) & 0x7FFF;
            uint64_t v302 = (void *)(*(void *)a1[2] + 6112);
            goto LABEL_410;
          case 223:
            unint64_t v301 = *(_WORD *)(a1[3] + 38) & 0x3FFF;
            uint64_t v302 = (void *)(*(void *)a1[2] + 6136);
            goto LABEL_410;
          case 224:
            unint64_t v301 = ((unint64_t)*(unsigned int *)(a1[3] + 20) >> 2) & 0xFFFFF;
            uint64_t v302 = (void *)(*(void *)a1[2] + 6160);
            goto LABEL_410;
          case 225:
            unint64_t v301 = *(_WORD *)(a1[3] + 68) & 0x7FF;
            uint64_t v302 = (void *)(*(void *)a1[2] + 6184);
            goto LABEL_410;
          case 226:
            unint64_t v301 = *(_WORD *)(a1[3] + 50) & 0xFFF;
            uint64_t v302 = (void *)(*(void *)a1[2] + 6208);
            goto LABEL_410;
          case 227:
            unint64_t v301 = *(_WORD *)(a1[3] + 32) & 0x7FFF;
            uint64_t v302 = (void *)(*(void *)a1[2] + 6232);
            goto LABEL_410;
          case 228:
            unint64_t v301 = *(_WORD *)(a1[3] + 64) & 0x3FF;
            uint64_t v302 = (void *)(*(void *)a1[2] + 6256);
            goto LABEL_410;
          case 229:
            unint64_t v301 = *(_WORD *)(a1[3] + 46) & 0x3FF;
            uint64_t v302 = (void *)(*(void *)a1[2] + 6280);
            goto LABEL_410;
          case 230:
            unint64_t v301 = *(_WORD *)(a1[3] + 66) & 0x3FF;
            uint64_t v302 = (void *)(*(void *)a1[2] + 6304);
            goto LABEL_410;
          case 231:
            unint64_t v301 = *(_WORD *)(a1[3] + 48) & 0x3FF;
            uint64_t v302 = (void *)(*(void *)a1[2] + 6328);
            goto LABEL_410;
          case 232:
            unint64_t v301 = *(_DWORD *)(a1[3] + 28) & 0x7FFFF;
            uint64_t v302 = (void *)(*(void *)a1[2] + 6352);
LABEL_410:
            *(void *)(*v302 - 8) += v301;
            break;
          default:
            break;
        }
        --v299;
      }
      while (v299);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    int v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0xD3:
            unint64_t v10 = *(void **)a1[2];
            uint64_t v11 = *(_WORD *)(a1[3] + 58) & 0x3FFF;
            unint64_t v12 = (char *)v10[731];
            unint64_t v13 = v10[732];
            if ((unint64_t)v12 >= v13)
            {
              uint64_t v120 = (char *)v10[730];
              uint64_t v121 = (v12 - v120) >> 3;
              if ((unint64_t)(v121 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v122 = v13 - (void)v120;
              unint64_t v123 = (uint64_t)(v13 - (void)v120) >> 2;
              if (v123 <= v121 + 1) {
                unint64_t v123 = v121 + 1;
              }
              if (v122 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v124 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v124 = v123;
              }
              if (v124)
              {
                unint64_t v125 = (char *)sub_5714((uint64_t)(v10 + 732), v124);
                unint64_t v12 = (char *)v10[731];
                uint64_t v120 = (char *)v10[730];
              }
              else
              {
                unint64_t v125 = 0;
              }
              uint64_t v252 = &v125[8 * v121];
              *(void *)uint64_t v252 = v11;
              unint64_t v14 = v252 + 8;
              while (v12 != v120)
              {
                uint64_t v253 = *((void *)v12 - 1);
                v12 -= 8;
                *((void *)v252 - 1) = v253;
                v252 -= 8;
              }
              v10[730] = v252;
              v10[731] = v14;
              v10[732] = &v125[8 * v124];
              if (v120) {
                operator delete(v120);
              }
            }
            else
            {
              *(void *)unint64_t v12 = v11;
              unint64_t v14 = v12 + 8;
            }
            v10[731] = v14;
            break;
          case 0xD4:
            unint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_WORD *)(a1[3] + 40) & 0x7FFF;
            uint64_t v17 = (char *)v15[734];
            unint64_t v18 = v15[735];
            if ((unint64_t)v17 >= v18)
            {
              int v126 = (char *)v15[733];
              uint64_t v127 = (v17 - v126) >> 3;
              if ((unint64_t)(v127 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v128 = v18 - (void)v126;
              unint64_t v129 = (uint64_t)(v18 - (void)v126) >> 2;
              if (v129 <= v127 + 1) {
                unint64_t v129 = v127 + 1;
              }
              if (v128 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v130 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v130 = v129;
              }
              if (v130)
              {
                uint64_t v131 = (char *)sub_5714((uint64_t)(v15 + 735), v130);
                uint64_t v17 = (char *)v15[734];
                int v126 = (char *)v15[733];
              }
              else
              {
                uint64_t v131 = 0;
              }
              unint64_t v254 = &v131[8 * v127];
              *(void *)unint64_t v254 = v16;
              unint64_t v19 = v254 + 8;
              while (v17 != v126)
              {
                uint64_t v255 = *((void *)v17 - 1);
                v17 -= 8;
                *((void *)v254 - 1) = v255;
                v254 -= 8;
              }
              v15[733] = v254;
              v15[734] = v19;
              v15[735] = &v131[8 * v130];
              if (v126) {
                operator delete(v126);
              }
            }
            else
            {
              *(void *)uint64_t v17 = v16;
              unint64_t v19 = v17 + 8;
            }
            v15[734] = v19;
            break;
          case 0xD5:
            uint64_t v20 = *(void **)a1[2];
            uint64_t v21 = *(_WORD *)(a1[3] + 60) & 0x3FFF;
            long long v22 = (char *)v20[737];
            unint64_t v23 = v20[738];
            if ((unint64_t)v22 >= v23)
            {
              unint64_t v132 = (char *)v20[736];
              uint64_t v133 = (v22 - v132) >> 3;
              if ((unint64_t)(v133 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v134 = v23 - (void)v132;
              unint64_t v135 = (uint64_t)(v23 - (void)v132) >> 2;
              if (v135 <= v133 + 1) {
                unint64_t v135 = v133 + 1;
              }
              if (v134 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v136 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v136 = v135;
              }
              if (v136)
              {
                uint64_t v137 = (char *)sub_5714((uint64_t)(v20 + 738), v136);
                long long v22 = (char *)v20[737];
                unint64_t v132 = (char *)v20[736];
              }
              else
              {
                uint64_t v137 = 0;
              }
              unint64_t v256 = &v137[8 * v133];
              *(void *)unint64_t v256 = v21;
              uint64_t v24 = v256 + 8;
              while (v22 != v132)
              {
                uint64_t v257 = *((void *)v22 - 1);
                v22 -= 8;
                *((void *)v256 - 1) = v257;
                v256 -= 8;
              }
              v20[736] = v256;
              v20[737] = v24;
              v20[738] = &v137[8 * v136];
              if (v132) {
                operator delete(v132);
              }
            }
            else
            {
              *(void *)long long v22 = v21;
              uint64_t v24 = v22 + 8;
            }
            v20[737] = v24;
            break;
          case 0xD6:
            uint64_t v25 = *(void **)a1[2];
            uint64_t v26 = *(_WORD *)(a1[3] + 42) & 0x7FFF;
            unint64_t v27 = (char *)v25[740];
            unint64_t v28 = v25[741];
            if ((unint64_t)v27 >= v28)
            {
              unint64_t v138 = (char *)v25[739];
              uint64_t v139 = (v27 - v138) >> 3;
              if ((unint64_t)(v139 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v140 = v28 - (void)v138;
              unint64_t v141 = (uint64_t)(v28 - (void)v138) >> 2;
              if (v141 <= v139 + 1) {
                unint64_t v141 = v139 + 1;
              }
              if (v140 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v142 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v142 = v141;
              }
              if (v142)
              {
                unint64_t v143 = (char *)sub_5714((uint64_t)(v25 + 741), v142);
                unint64_t v27 = (char *)v25[740];
                unint64_t v138 = (char *)v25[739];
              }
              else
              {
                unint64_t v143 = 0;
              }
              uint64_t v258 = &v143[8 * v139];
              *(void *)uint64_t v258 = v26;
              uint64_t v29 = v258 + 8;
              while (v27 != v138)
              {
                uint64_t v259 = *((void *)v27 - 1);
                v27 -= 8;
                *((void *)v258 - 1) = v259;
                v258 -= 8;
              }
              v25[739] = v258;
              v25[740] = v29;
              v25[741] = &v143[8 * v142];
              if (v138) {
                operator delete(v138);
              }
            }
            else
            {
              *(void *)unint64_t v27 = v26;
              uint64_t v29 = v27 + 8;
            }
            v25[740] = v29;
            break;
          case 0xD7:
            uint64_t v30 = *(void **)a1[2];
            uint64_t v31 = *(_WORD *)(a1[3] + 62) & 0x3FFF;
            uint64_t v32 = (char *)v30[743];
            unint64_t v33 = v30[744];
            if ((unint64_t)v32 >= v33)
            {
              unint64_t v144 = (char *)v30[742];
              uint64_t v145 = (v32 - v144) >> 3;
              if ((unint64_t)(v145 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v146 = v33 - (void)v144;
              unint64_t v147 = (uint64_t)(v33 - (void)v144) >> 2;
              if (v147 <= v145 + 1) {
                unint64_t v147 = v145 + 1;
              }
              if (v146 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v148 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v148 = v147;
              }
              if (v148)
              {
                uint64_t v149 = (char *)sub_5714((uint64_t)(v30 + 744), v148);
                uint64_t v32 = (char *)v30[743];
                unint64_t v144 = (char *)v30[742];
              }
              else
              {
                uint64_t v149 = 0;
              }
              unint64_t v260 = &v149[8 * v145];
              *(void *)unint64_t v260 = v31;
              int v34 = v260 + 8;
              while (v32 != v144)
              {
                uint64_t v261 = *((void *)v32 - 1);
                v32 -= 8;
                *((void *)v260 - 1) = v261;
                v260 -= 8;
              }
              v30[742] = v260;
              v30[743] = v34;
              v30[744] = &v149[8 * v148];
              if (v144) {
                operator delete(v144);
              }
            }
            else
            {
              *(void *)uint64_t v32 = v31;
              int v34 = v32 + 8;
            }
            v30[743] = v34;
            break;
          case 0xD8:
            uint64_t v35 = *(void **)a1[2];
            uint64_t v36 = *(_WORD *)(a1[3] + 44) & 0x7FFF;
            uint64_t v37 = (char *)v35[746];
            unint64_t v38 = v35[747];
            if ((unint64_t)v37 >= v38)
            {
              unint64_t v150 = (char *)v35[745];
              uint64_t v151 = (v37 - v150) >> 3;
              if ((unint64_t)(v151 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v152 = v38 - (void)v150;
              unint64_t v153 = (uint64_t)(v38 - (void)v150) >> 2;
              if (v153 <= v151 + 1) {
                unint64_t v153 = v151 + 1;
              }
              if (v152 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v154 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v154 = v153;
              }
              if (v154)
              {
                unint64_t v155 = (char *)sub_5714((uint64_t)(v35 + 747), v154);
                uint64_t v37 = (char *)v35[746];
                unint64_t v150 = (char *)v35[745];
              }
              else
              {
                unint64_t v155 = 0;
              }
              unint64_t v262 = &v155[8 * v151];
              *(void *)unint64_t v262 = v36;
              unint64_t v39 = v262 + 8;
              while (v37 != v150)
              {
                uint64_t v263 = *((void *)v37 - 1);
                v37 -= 8;
                *((void *)v262 - 1) = v263;
                v262 -= 8;
              }
              v35[745] = v262;
              v35[746] = v39;
              v35[747] = &v155[8 * v154];
              if (v150) {
                operator delete(v150);
              }
            }
            else
            {
              *(void *)uint64_t v37 = v36;
              unint64_t v39 = v37 + 8;
            }
            v35[746] = v39;
            break;
          case 0xD9:
            unint64_t v40 = *(void **)a1[2];
            uint64_t v41 = *(_DWORD *)(a1[3] + 24) & 0x3FFFFLL;
            unint64_t v42 = (uint64_t *)v40[749];
            unint64_t v43 = v40[750];
            if ((unint64_t)v42 >= v43)
            {
              uint64_t v156 = (uint64_t *)v40[748];
              uint64_t v157 = v42 - v156;
              if ((unint64_t)(v157 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v158 = v43 - (void)v156;
              unint64_t v159 = (uint64_t)(v43 - (void)v156) >> 2;
              if (v159 <= v157 + 1) {
                unint64_t v159 = v157 + 1;
              }
              if (v158 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v160 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v160 = v159;
              }
              if (v160)
              {
                unint64_t v161 = (char *)sub_5714((uint64_t)(v40 + 750), v160);
                unint64_t v42 = (uint64_t *)v40[749];
                uint64_t v156 = (uint64_t *)v40[748];
              }
              else
              {
                unint64_t v161 = 0;
              }
              unint64_t v264 = (uint64_t *)&v161[8 * v157];
              *unint64_t v264 = v41;
              unint64_t v44 = v264 + 1;
              while (v42 != v156)
              {
                uint64_t v265 = *--v42;
                *--unint64_t v264 = v265;
              }
              v40[748] = v264;
              v40[749] = v44;
              v40[750] = &v161[8 * v160];
              if (v156) {
                operator delete(v156);
              }
            }
            else
            {
              uint64_t *v42 = v41;
              unint64_t v44 = v42 + 1;
            }
            v40[749] = v44;
            break;
          case 0xDA:
            unint64_t v45 = *(void **)a1[2];
            uint64_t v46 = *(_WORD *)(a1[3] + 52) & 0x7FFF;
            unint64_t v47 = (char *)v45[752];
            unint64_t v48 = v45[753];
            if ((unint64_t)v47 >= v48)
            {
              unint64_t v162 = (char *)v45[751];
              uint64_t v163 = (v47 - v162) >> 3;
              if ((unint64_t)(v163 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v164 = v48 - (void)v162;
              unint64_t v165 = (uint64_t)(v48 - (void)v162) >> 2;
              if (v165 <= v163 + 1) {
                unint64_t v165 = v163 + 1;
              }
              if (v164 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v166 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v166 = v165;
              }
              if (v166)
              {
                uint64_t v167 = (char *)sub_5714((uint64_t)(v45 + 753), v166);
                unint64_t v47 = (char *)v45[752];
                unint64_t v162 = (char *)v45[751];
              }
              else
              {
                uint64_t v167 = 0;
              }
              uint64_t v266 = &v167[8 * v163];
              *(void *)uint64_t v266 = v46;
              uint64_t v49 = v266 + 8;
              while (v47 != v162)
              {
                uint64_t v267 = *((void *)v47 - 1);
                v47 -= 8;
                *((void *)v266 - 1) = v267;
                v266 -= 8;
              }
              v45[751] = v266;
              v45[752] = v49;
              v45[753] = &v167[8 * v166];
              if (v162) {
                operator delete(v162);
              }
            }
            else
            {
              *(void *)unint64_t v47 = v46;
              uint64_t v49 = v47 + 8;
            }
            v45[752] = v49;
            break;
          case 0xDB:
            unint64_t v50 = *(void **)a1[2];
            uint64_t v51 = *(_WORD *)(a1[3] + 34) & 0x3FFF;
            unint64_t v52 = (char *)v50[755];
            unint64_t v53 = v50[756];
            if ((unint64_t)v52 >= v53)
            {
              unint64_t v168 = (char *)v50[754];
              uint64_t v169 = (v52 - v168) >> 3;
              if ((unint64_t)(v169 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v170 = v53 - (void)v168;
              unint64_t v171 = (uint64_t)(v53 - (void)v168) >> 2;
              if (v171 <= v169 + 1) {
                unint64_t v171 = v169 + 1;
              }
              if (v170 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v172 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v172 = v171;
              }
              if (v172)
              {
                unint64_t v173 = (char *)sub_5714((uint64_t)(v50 + 756), v172);
                unint64_t v52 = (char *)v50[755];
                unint64_t v168 = (char *)v50[754];
              }
              else
              {
                unint64_t v173 = 0;
              }
              uint64_t v268 = &v173[8 * v169];
              *(void *)uint64_t v268 = v51;
              uint64_t v54 = v268 + 8;
              while (v52 != v168)
              {
                uint64_t v269 = *((void *)v52 - 1);
                v52 -= 8;
                *((void *)v268 - 1) = v269;
                v268 -= 8;
              }
              v50[754] = v268;
              v50[755] = v54;
              v50[756] = &v173[8 * v172];
              if (v168) {
                operator delete(v168);
              }
            }
            else
            {
              *(void *)unint64_t v52 = v51;
              uint64_t v54 = v52 + 8;
            }
            v50[755] = v54;
            break;
          case 0xDC:
            int v55 = *(void **)a1[2];
            uint64_t v56 = *(_WORD *)(a1[3] + 54) & 0x7FFF;
            uint64_t v57 = (char *)v55[758];
            unint64_t v58 = v55[759];
            if ((unint64_t)v57 >= v58)
            {
              uint64_t v174 = (char *)v55[757];
              uint64_t v175 = (v57 - v174) >> 3;
              if ((unint64_t)(v175 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v176 = v58 - (void)v174;
              unint64_t v177 = (uint64_t)(v58 - (void)v174) >> 2;
              if (v177 <= v175 + 1) {
                unint64_t v177 = v175 + 1;
              }
              if (v176 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v178 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v178 = v177;
              }
              if (v178)
              {
                unint64_t v179 = (char *)sub_5714((uint64_t)(v55 + 759), v178);
                uint64_t v57 = (char *)v55[758];
                uint64_t v174 = (char *)v55[757];
              }
              else
              {
                unint64_t v179 = 0;
              }
              int v270 = &v179[8 * v175];
              *(void *)int v270 = v56;
              uint64_t v59 = v270 + 8;
              while (v57 != v174)
              {
                uint64_t v271 = *((void *)v57 - 1);
                v57 -= 8;
                *((void *)v270 - 1) = v271;
                v270 -= 8;
              }
              v55[757] = v270;
              v55[758] = v59;
              v55[759] = &v179[8 * v178];
              if (v174) {
                operator delete(v174);
              }
            }
            else
            {
              *(void *)uint64_t v57 = v56;
              uint64_t v59 = v57 + 8;
            }
            v55[758] = v59;
            break;
          case 0xDD:
            unint64_t v60 = *(void **)a1[2];
            uint64_t v61 = *(_WORD *)(a1[3] + 36) & 0x3FFF;
            unint64_t v62 = (char *)v60[761];
            unint64_t v63 = v60[762];
            if ((unint64_t)v62 >= v63)
            {
              unint64_t v180 = (char *)v60[760];
              uint64_t v181 = (v62 - v180) >> 3;
              if ((unint64_t)(v181 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v182 = v63 - (void)v180;
              unint64_t v183 = (uint64_t)(v63 - (void)v180) >> 2;
              if (v183 <= v181 + 1) {
                unint64_t v183 = v181 + 1;
              }
              if (v182 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v184 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v184 = v183;
              }
              if (v184)
              {
                unint64_t v185 = (char *)sub_5714((uint64_t)(v60 + 762), v184);
                unint64_t v62 = (char *)v60[761];
                unint64_t v180 = (char *)v60[760];
              }
              else
              {
                unint64_t v185 = 0;
              }
              unint64_t v272 = &v185[8 * v181];
              *(void *)unint64_t v272 = v61;
              unint64_t v64 = v272 + 8;
              while (v62 != v180)
              {
                uint64_t v273 = *((void *)v62 - 1);
                v62 -= 8;
                *((void *)v272 - 1) = v273;
                v272 -= 8;
              }
              v60[760] = v272;
              v60[761] = v64;
              v60[762] = &v185[8 * v184];
              if (v180) {
                operator delete(v180);
              }
            }
            else
            {
              *(void *)unint64_t v62 = v61;
              unint64_t v64 = v62 + 8;
            }
            v60[761] = v64;
            break;
          case 0xDE:
            uint64_t v65 = *(void **)a1[2];
            uint64_t v66 = *(_WORD *)(a1[3] + 56) & 0x7FFF;
            unint64_t v67 = (char *)v65[764];
            unint64_t v68 = v65[765];
            if ((unint64_t)v67 >= v68)
            {
              uint64_t v186 = (char *)v65[763];
              uint64_t v187 = (v67 - v186) >> 3;
              if ((unint64_t)(v187 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v188 = v68 - (void)v186;
              unint64_t v189 = (uint64_t)(v68 - (void)v186) >> 2;
              if (v189 <= v187 + 1) {
                unint64_t v189 = v187 + 1;
              }
              if (v188 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v190 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v190 = v189;
              }
              if (v190)
              {
                unint64_t v191 = (char *)sub_5714((uint64_t)(v65 + 765), v190);
                unint64_t v67 = (char *)v65[764];
                uint64_t v186 = (char *)v65[763];
              }
              else
              {
                unint64_t v191 = 0;
              }
              uint64_t v274 = &v191[8 * v187];
              *(void *)uint64_t v274 = v66;
              unint64_t v69 = v274 + 8;
              while (v67 != v186)
              {
                uint64_t v275 = *((void *)v67 - 1);
                v67 -= 8;
                *((void *)v274 - 1) = v275;
                v274 -= 8;
              }
              v65[763] = v274;
              v65[764] = v69;
              v65[765] = &v191[8 * v190];
              if (v186) {
                operator delete(v186);
              }
            }
            else
            {
              *(void *)unint64_t v67 = v66;
              unint64_t v69 = v67 + 8;
            }
            v65[764] = v69;
            break;
          case 0xDF:
            uint64_t v70 = *(void **)a1[2];
            uint64_t v71 = *(_WORD *)(a1[3] + 38) & 0x3FFF;
            unint64_t v72 = (char *)v70[767];
            unint64_t v73 = v70[768];
            if ((unint64_t)v72 >= v73)
            {
              unint64_t v192 = (char *)v70[766];
              uint64_t v193 = (v72 - v192) >> 3;
              if ((unint64_t)(v193 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v194 = v73 - (void)v192;
              unint64_t v195 = (uint64_t)(v73 - (void)v192) >> 2;
              if (v195 <= v193 + 1) {
                unint64_t v195 = v193 + 1;
              }
              if (v194 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v196 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v196 = v195;
              }
              if (v196)
              {
                uint64_t v197 = (char *)sub_5714((uint64_t)(v70 + 768), v196);
                unint64_t v72 = (char *)v70[767];
                unint64_t v192 = (char *)v70[766];
              }
              else
              {
                uint64_t v197 = 0;
              }
              uint64_t v276 = &v197[8 * v193];
              *(void *)uint64_t v276 = v71;
              unint64_t v74 = v276 + 8;
              while (v72 != v192)
              {
                uint64_t v277 = *((void *)v72 - 1);
                v72 -= 8;
                *((void *)v276 - 1) = v277;
                v276 -= 8;
              }
              v70[766] = v276;
              v70[767] = v74;
              v70[768] = &v197[8 * v196];
              if (v192) {
                operator delete(v192);
              }
            }
            else
            {
              *(void *)unint64_t v72 = v71;
              unint64_t v74 = v72 + 8;
            }
            v70[767] = v74;
            break;
          case 0xE0:
            unint64_t v75 = *(void **)a1[2];
            unint64_t v76 = ((unint64_t)*(unsigned int *)(a1[3] + 20) >> 2) & 0xFFFFF;
            int v77 = (unint64_t *)v75[770];
            unint64_t v78 = v75[771];
            if ((unint64_t)v77 >= v78)
            {
              int v198 = (unint64_t *)v75[769];
              uint64_t v199 = v77 - v198;
              if ((unint64_t)(v199 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v200 = v78 - (void)v198;
              unint64_t v201 = (uint64_t)(v78 - (void)v198) >> 2;
              if (v201 <= v199 + 1) {
                unint64_t v201 = v199 + 1;
              }
              if (v200 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v202 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v202 = v201;
              }
              if (v202)
              {
                unint64_t v203 = (char *)sub_5714((uint64_t)(v75 + 771), v202);
                int v77 = (unint64_t *)v75[770];
                int v198 = (unint64_t *)v75[769];
              }
              else
              {
                unint64_t v203 = 0;
              }
              unint64_t v278 = (unint64_t *)&v203[8 * v199];
              *unint64_t v278 = v76;
              uint64_t v79 = v278 + 1;
              while (v77 != v198)
              {
                unint64_t v279 = *--v77;
                *--unint64_t v278 = v279;
              }
              v75[769] = v278;
              v75[770] = v79;
              v75[771] = &v203[8 * v202];
              if (v198) {
                operator delete(v198);
              }
            }
            else
            {
              *int v77 = v76;
              uint64_t v79 = v77 + 1;
            }
            v75[770] = v79;
            break;
          case 0xE1:
            uint64_t v80 = *(void **)a1[2];
            uint64_t v81 = *(_WORD *)(a1[3] + 68) & 0x7FF;
            int v82 = (char *)v80[773];
            unint64_t v83 = v80[774];
            if ((unint64_t)v82 >= v83)
            {
              uint64_t v204 = (char *)v80[772];
              uint64_t v205 = (v82 - v204) >> 3;
              if ((unint64_t)(v205 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v206 = v83 - (void)v204;
              unint64_t v207 = (uint64_t)(v83 - (void)v204) >> 2;
              if (v207 <= v205 + 1) {
                unint64_t v207 = v205 + 1;
              }
              if (v206 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v208 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v208 = v207;
              }
              if (v208)
              {
                int v209 = (char *)sub_5714((uint64_t)(v80 + 774), v208);
                int v82 = (char *)v80[773];
                uint64_t v204 = (char *)v80[772];
              }
              else
              {
                int v209 = 0;
              }
              unint64_t v280 = &v209[8 * v205];
              *(void *)unint64_t v280 = v81;
              unint64_t v84 = v280 + 8;
              while (v82 != v204)
              {
                uint64_t v281 = *((void *)v82 - 1);
                v82 -= 8;
                *((void *)v280 - 1) = v281;
                v280 -= 8;
              }
              v80[772] = v280;
              v80[773] = v84;
              v80[774] = &v209[8 * v208];
              if (v204) {
                operator delete(v204);
              }
            }
            else
            {
              *(void *)int v82 = v81;
              unint64_t v84 = v82 + 8;
            }
            v80[773] = v84;
            break;
          case 0xE2:
            uint64_t v85 = *(void **)a1[2];
            uint64_t v86 = *(_WORD *)(a1[3] + 50) & 0xFFF;
            unint64_t v87 = (char *)v85[776];
            unint64_t v88 = v85[777];
            if ((unint64_t)v87 >= v88)
            {
              uint64_t v210 = (char *)v85[775];
              uint64_t v211 = (v87 - v210) >> 3;
              if ((unint64_t)(v211 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v212 = v88 - (void)v210;
              unint64_t v213 = (uint64_t)(v88 - (void)v210) >> 2;
              if (v213 <= v211 + 1) {
                unint64_t v213 = v211 + 1;
              }
              if (v212 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v214 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v214 = v213;
              }
              if (v214)
              {
                unint64_t v215 = (char *)sub_5714((uint64_t)(v85 + 777), v214);
                unint64_t v87 = (char *)v85[776];
                uint64_t v210 = (char *)v85[775];
              }
              else
              {
                unint64_t v215 = 0;
              }
              uint64_t v282 = &v215[8 * v211];
              *(void *)uint64_t v282 = v86;
              uint64_t v89 = v282 + 8;
              while (v87 != v210)
              {
                uint64_t v283 = *((void *)v87 - 1);
                v87 -= 8;
                *((void *)v282 - 1) = v283;
                v282 -= 8;
              }
              v85[775] = v282;
              v85[776] = v89;
              v85[777] = &v215[8 * v214];
              if (v210) {
                operator delete(v210);
              }
            }
            else
            {
              *(void *)unint64_t v87 = v86;
              uint64_t v89 = v87 + 8;
            }
            v85[776] = v89;
            break;
          case 0xE3:
            unint64_t v90 = *(void **)a1[2];
            uint64_t v91 = *(_WORD *)(a1[3] + 32) & 0x7FFF;
            unint64_t v92 = (char *)v90[779];
            unint64_t v93 = v90[780];
            if ((unint64_t)v92 >= v93)
            {
              unint64_t v216 = (char *)v90[778];
              uint64_t v217 = (v92 - v216) >> 3;
              if ((unint64_t)(v217 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v218 = v93 - (void)v216;
              unint64_t v219 = (uint64_t)(v93 - (void)v216) >> 2;
              if (v219 <= v217 + 1) {
                unint64_t v219 = v217 + 1;
              }
              if (v218 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v220 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v220 = v219;
              }
              if (v220)
              {
                uint64_t v221 = (char *)sub_5714((uint64_t)(v90 + 780), v220);
                unint64_t v92 = (char *)v90[779];
                unint64_t v216 = (char *)v90[778];
              }
              else
              {
                uint64_t v221 = 0;
              }
              unint64_t v284 = &v221[8 * v217];
              *(void *)unint64_t v284 = v91;
              uint64_t v94 = v284 + 8;
              while (v92 != v216)
              {
                uint64_t v285 = *((void *)v92 - 1);
                v92 -= 8;
                *((void *)v284 - 1) = v285;
                v284 -= 8;
              }
              v90[778] = v284;
              v90[779] = v94;
              v90[780] = &v221[8 * v220];
              if (v216) {
                operator delete(v216);
              }
            }
            else
            {
              *(void *)unint64_t v92 = v91;
              uint64_t v94 = v92 + 8;
            }
            v90[779] = v94;
            break;
          case 0xE4:
            unint64_t v95 = *(void **)a1[2];
            uint64_t v96 = *(_WORD *)(a1[3] + 64) & 0x3FF;
            uint64_t v97 = (char *)v95[782];
            unint64_t v98 = v95[783];
            if ((unint64_t)v97 >= v98)
            {
              int v222 = (char *)v95[781];
              uint64_t v223 = (v97 - v222) >> 3;
              if ((unint64_t)(v223 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v224 = v98 - (void)v222;
              unint64_t v225 = (uint64_t)(v98 - (void)v222) >> 2;
              if (v225 <= v223 + 1) {
                unint64_t v225 = v223 + 1;
              }
              if (v224 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v226 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v226 = v225;
              }
              if (v226)
              {
                unint64_t v227 = (char *)sub_5714((uint64_t)(v95 + 783), v226);
                uint64_t v97 = (char *)v95[782];
                int v222 = (char *)v95[781];
              }
              else
              {
                unint64_t v227 = 0;
              }
              unint64_t v286 = &v227[8 * v223];
              *(void *)unint64_t v286 = v96;
              unint64_t v99 = v286 + 8;
              while (v97 != v222)
              {
                uint64_t v287 = *((void *)v97 - 1);
                v97 -= 8;
                *((void *)v286 - 1) = v287;
                v286 -= 8;
              }
              v95[781] = v286;
              v95[782] = v99;
              v95[783] = &v227[8 * v226];
              if (v222) {
                operator delete(v222);
              }
            }
            else
            {
              *(void *)uint64_t v97 = v96;
              unint64_t v99 = v97 + 8;
            }
            v95[782] = v99;
            break;
          case 0xE5:
            unint64_t v100 = *(void **)a1[2];
            uint64_t v101 = *(_WORD *)(a1[3] + 46) & 0x3FF;
            int v102 = (char *)v100[785];
            unint64_t v103 = v100[786];
            if ((unint64_t)v102 >= v103)
            {
              uint64_t v228 = (char *)v100[784];
              uint64_t v229 = (v102 - v228) >> 3;
              if ((unint64_t)(v229 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v230 = v103 - (void)v228;
              unint64_t v231 = (uint64_t)(v103 - (void)v228) >> 2;
              if (v231 <= v229 + 1) {
                unint64_t v231 = v229 + 1;
              }
              if (v230 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v232 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v232 = v231;
              }
              if (v232)
              {
                uint64_t v233 = (char *)sub_5714((uint64_t)(v100 + 786), v232);
                int v102 = (char *)v100[785];
                uint64_t v228 = (char *)v100[784];
              }
              else
              {
                uint64_t v233 = 0;
              }
              unint64_t v288 = &v233[8 * v229];
              *(void *)unint64_t v288 = v101;
              uint64_t v104 = v288 + 8;
              while (v102 != v228)
              {
                uint64_t v289 = *((void *)v102 - 1);
                v102 -= 8;
                *((void *)v288 - 1) = v289;
                v288 -= 8;
              }
              v100[784] = v288;
              v100[785] = v104;
              v100[786] = &v233[8 * v232];
              if (v228) {
                operator delete(v228);
              }
            }
            else
            {
              *(void *)int v102 = v101;
              uint64_t v104 = v102 + 8;
            }
            v100[785] = v104;
            break;
          case 0xE6:
            uint64_t v105 = *(void **)a1[2];
            uint64_t v106 = *(_WORD *)(a1[3] + 66) & 0x3FF;
            uint64_t v107 = (char *)v105[788];
            unint64_t v108 = v105[789];
            if ((unint64_t)v107 >= v108)
            {
              uint64_t v234 = (char *)v105[787];
              uint64_t v235 = (v107 - v234) >> 3;
              if ((unint64_t)(v235 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v236 = v108 - (void)v234;
              unint64_t v237 = (uint64_t)(v108 - (void)v234) >> 2;
              if (v237 <= v235 + 1) {
                unint64_t v237 = v235 + 1;
              }
              if (v236 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v238 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v238 = v237;
              }
              if (v238)
              {
                unint64_t v239 = (char *)sub_5714((uint64_t)(v105 + 789), v238);
                uint64_t v107 = (char *)v105[788];
                uint64_t v234 = (char *)v105[787];
              }
              else
              {
                unint64_t v239 = 0;
              }
              unint64_t v290 = &v239[8 * v235];
              *(void *)unint64_t v290 = v106;
              uint64_t v109 = v290 + 8;
              while (v107 != v234)
              {
                uint64_t v291 = *((void *)v107 - 1);
                v107 -= 8;
                *((void *)v290 - 1) = v291;
                v290 -= 8;
              }
              v105[787] = v290;
              v105[788] = v109;
              v105[789] = &v239[8 * v238];
              if (v234) {
                operator delete(v234);
              }
            }
            else
            {
              *(void *)uint64_t v107 = v106;
              uint64_t v109 = v107 + 8;
            }
            v105[788] = v109;
            break;
          case 0xE7:
            unint64_t v110 = *(void **)a1[2];
            uint64_t v111 = *(_WORD *)(a1[3] + 48) & 0x3FF;
            uint64_t v112 = (char *)v110[791];
            unint64_t v113 = v110[792];
            if ((unint64_t)v112 >= v113)
            {
              unint64_t v240 = (char *)v110[790];
              uint64_t v241 = (v112 - v240) >> 3;
              if ((unint64_t)(v241 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v242 = v113 - (void)v240;
              unint64_t v243 = (uint64_t)(v113 - (void)v240) >> 2;
              if (v243 <= v241 + 1) {
                unint64_t v243 = v241 + 1;
              }
              if (v242 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v244 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v244 = v243;
              }
              if (v244)
              {
                uint64_t v245 = (char *)sub_5714((uint64_t)(v110 + 792), v244);
                uint64_t v112 = (char *)v110[791];
                unint64_t v240 = (char *)v110[790];
              }
              else
              {
                uint64_t v245 = 0;
              }
              uint64_t v292 = &v245[8 * v241];
              *(void *)uint64_t v292 = v111;
              unint64_t v114 = v292 + 8;
              while (v112 != v240)
              {
                uint64_t v293 = *((void *)v112 - 1);
                v112 -= 8;
                *((void *)v292 - 1) = v293;
                v292 -= 8;
              }
              v110[790] = v292;
              v110[791] = v114;
              v110[792] = &v245[8 * v244];
              if (v240) {
                operator delete(v240);
              }
            }
            else
            {
              *(void *)uint64_t v112 = v111;
              unint64_t v114 = v112 + 8;
            }
            v110[791] = v114;
            break;
          case 0xE8:
            unint64_t v115 = *(void **)a1[2];
            uint64_t v116 = *(_DWORD *)(a1[3] + 28) & 0x7FFFFLL;
            uint64_t v117 = (uint64_t *)v115[794];
            unint64_t v118 = v115[795];
            if ((unint64_t)v117 >= v118)
            {
              int v246 = (uint64_t *)v115[793];
              uint64_t v247 = v117 - v246;
              if ((unint64_t)(v247 + 1) >> 61) {
LABEL_414:
              }
                sub_566C();
              unint64_t v248 = v118 - (void)v246;
              unint64_t v249 = (uint64_t)(v118 - (void)v246) >> 2;
              if (v249 <= v247 + 1) {
                unint64_t v249 = v247 + 1;
              }
              if (v248 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v250 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v250 = v249;
              }
              if (v250)
              {
                unint64_t v251 = (char *)sub_5714((uint64_t)(v115 + 795), v250);
                uint64_t v117 = (uint64_t *)v115[794];
                int v246 = (uint64_t *)v115[793];
              }
              else
              {
                unint64_t v251 = 0;
              }
              int v294 = (uint64_t *)&v251[8 * v247];
              *int v294 = v116;
              unint64_t v119 = v294 + 1;
              while (v117 != v246)
              {
                uint64_t v295 = *--v117;
                *--int v294 = v295;
              }
              v115[793] = v294;
              v115[794] = v119;
              v115[795] = &v251[8 * v250];
              if (v246) {
                operator delete(v246);
              }
            }
            else
            {
              *uint64_t v117 = v116;
              unint64_t v119 = v117 + 1;
            }
            v115[794] = v119;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_E2D14(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    unint64_t v195 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    unint64_t v194 = *v195;
    uint64_t v196 = (char *)v195[1] - (char *)*v195;
    if (v196)
    {
      unint64_t v197 = v196 >> 2;
      if (v197 <= 1) {
        unint64_t v197 = 1;
      }
      do
      {
        int v198 = *v194++;
        switch(v198)
        {
          case 243:
            uint64_t v199 = *(_DWORD *)(a1[3] + 40) & 0xFFFFF;
            unint64_t v200 = (void *)(*(void *)a1[2] + 6616);
            goto LABEL_266;
          case 244:
            uint64_t v199 = *(_DWORD *)(a1[3] + 44) & 0xFFFFF;
            unint64_t v200 = (void *)(*(void *)a1[2] + 6640);
            goto LABEL_266;
          case 245:
            uint64_t v199 = *(_DWORD *)(a1[3] + 48) & 0xFFFFF;
            unint64_t v200 = (void *)(*(void *)a1[2] + 6664);
            goto LABEL_266;
          case 246:
            uint64_t v199 = *(unsigned __int16 *)(a1[3] + 56);
            unint64_t v200 = (void *)(*(void *)a1[2] + 6688);
            goto LABEL_266;
          case 247:
            uint64_t v199 = *(unsigned __int16 *)(a1[3] + 52);
            unint64_t v200 = (void *)(*(void *)a1[2] + 6712);
            goto LABEL_266;
          case 248:
            uint64_t v199 = *(_WORD *)(a1[3] + 58) & 0x7FFF;
            unint64_t v200 = (void *)(*(void *)a1[2] + 6736);
            goto LABEL_266;
          case 249:
            uint64_t v199 = *(_WORD *)(a1[3] + 54) & 0x7FFF;
            unint64_t v200 = (void *)(*(void *)a1[2] + 6760);
            goto LABEL_266;
          case 250:
            uint64_t v199 = *(_WORD *)(a1[3] + 60) & 0x7FFF;
            unint64_t v200 = (void *)(*(void *)a1[2] + 6784);
            goto LABEL_266;
          case 251:
            uint64_t v199 = *(_WORD *)(a1[3] + 62) & 0x7FFF;
            unint64_t v200 = (void *)(*(void *)a1[2] + 6808);
            goto LABEL_266;
          case 252:
            uint64_t v199 = *(_DWORD *)(a1[3] + 28) & 0xFFFFF;
            unint64_t v200 = (void *)(*(void *)a1[2] + 6832);
            goto LABEL_266;
          case 253:
            uint64_t v199 = *(_DWORD *)(a1[3] + 32) & 0xFFFFF;
            unint64_t v200 = (void *)(*(void *)a1[2] + 6856);
            goto LABEL_266;
          case 254:
            uint64_t v199 = *(_DWORD *)(a1[3] + 36) & 0xFFFFF;
            unint64_t v200 = (void *)(*(void *)a1[2] + 6880);
            goto LABEL_266;
          case 255:
            uint64_t v199 = *(_DWORD *)(a1[3] + 20) & 0xFFFFF;
            unint64_t v200 = (void *)(*(void *)a1[2] + 6904);
            goto LABEL_266;
          case 256:
            uint64_t v199 = *(_DWORD *)(a1[3] + 24) & 0xFFFFF;
            unint64_t v200 = (void *)(*(void *)a1[2] + 6928);
LABEL_266:
            *(void *)(*v200 - 8) += v199;
            break;
          default:
            break;
        }
        --v197;
      }
      while (v197);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    int v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0xF3:
            unint64_t v10 = *(void **)a1[2];
            uint64_t v11 = *(_DWORD *)(a1[3] + 40) & 0xFFFFFLL;
            unint64_t v12 = (uint64_t *)v10[827];
            unint64_t v13 = v10[828];
            if ((unint64_t)v12 >= v13)
            {
              int v82 = (uint64_t *)v10[826];
              uint64_t v83 = v12 - v82;
              if ((unint64_t)(v83 + 1) >> 61) {
                goto LABEL_270;
              }
              unint64_t v84 = v13 - (void)v82;
              unint64_t v85 = (uint64_t)(v13 - (void)v82) >> 2;
              if (v85 <= v83 + 1) {
                unint64_t v85 = v83 + 1;
              }
              if (v84 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v86 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v86 = v85;
              }
              if (v86)
              {
                unint64_t v87 = (char *)sub_5714((uint64_t)(v10 + 828), v86);
                unint64_t v12 = (uint64_t *)v10[827];
                int v82 = (uint64_t *)v10[826];
              }
              else
              {
                unint64_t v87 = 0;
              }
              unint64_t v166 = (uint64_t *)&v87[8 * v83];
              *unint64_t v166 = v11;
              unint64_t v14 = v166 + 1;
              while (v12 != v82)
              {
                uint64_t v167 = *--v12;
                *--unint64_t v166 = v167;
              }
              v10[826] = v166;
              v10[827] = v14;
              v10[828] = &v87[8 * v86];
              if (v82) {
                operator delete(v82);
              }
            }
            else
            {
              *unint64_t v12 = v11;
              unint64_t v14 = v12 + 1;
            }
            v10[827] = v14;
            break;
          case 0xF4:
            unint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_DWORD *)(a1[3] + 44) & 0xFFFFFLL;
            uint64_t v17 = (uint64_t *)v15[830];
            unint64_t v18 = v15[831];
            if ((unint64_t)v17 >= v18)
            {
              unint64_t v88 = (uint64_t *)v15[829];
              uint64_t v89 = v17 - v88;
              if ((unint64_t)(v89 + 1) >> 61) {
                goto LABEL_270;
              }
              unint64_t v90 = v18 - (void)v88;
              unint64_t v91 = (uint64_t)(v18 - (void)v88) >> 2;
              if (v91 <= v89 + 1) {
                unint64_t v91 = v89 + 1;
              }
              if (v90 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v92 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v92 = v91;
              }
              if (v92)
              {
                unint64_t v93 = (char *)sub_5714((uint64_t)(v15 + 831), v92);
                uint64_t v17 = (uint64_t *)v15[830];
                unint64_t v88 = (uint64_t *)v15[829];
              }
              else
              {
                unint64_t v93 = 0;
              }
              unint64_t v168 = (uint64_t *)&v93[8 * v89];
              *unint64_t v168 = v16;
              unint64_t v19 = v168 + 1;
              while (v17 != v88)
              {
                uint64_t v169 = *--v17;
                *--unint64_t v168 = v169;
              }
              v15[829] = v168;
              v15[830] = v19;
              v15[831] = &v93[8 * v92];
              if (v88) {
                operator delete(v88);
              }
            }
            else
            {
              uint64_t *v17 = v16;
              unint64_t v19 = v17 + 1;
            }
            v15[830] = v19;
            break;
          case 0xF5:
            uint64_t v20 = *(void **)a1[2];
            uint64_t v21 = *(_DWORD *)(a1[3] + 48) & 0xFFFFFLL;
            long long v22 = (uint64_t *)v20[833];
            unint64_t v23 = v20[834];
            if ((unint64_t)v22 >= v23)
            {
              uint64_t v94 = (uint64_t *)v20[832];
              uint64_t v95 = v22 - v94;
              if ((unint64_t)(v95 + 1) >> 61) {
                goto LABEL_270;
              }
              unint64_t v96 = v23 - (void)v94;
              unint64_t v97 = (uint64_t)(v23 - (void)v94) >> 2;
              if (v97 <= v95 + 1) {
                unint64_t v97 = v95 + 1;
              }
              if (v96 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v98 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v98 = v97;
              }
              if (v98)
              {
                unint64_t v99 = (char *)sub_5714((uint64_t)(v20 + 834), v98);
                long long v22 = (uint64_t *)v20[833];
                uint64_t v94 = (uint64_t *)v20[832];
              }
              else
              {
                unint64_t v99 = 0;
              }
              unint64_t v170 = (uint64_t *)&v99[8 * v95];
              uint64_t *v170 = v21;
              uint64_t v24 = v170 + 1;
              while (v22 != v94)
              {
                uint64_t v171 = *--v22;
                *--unint64_t v170 = v171;
              }
              v20[832] = v170;
              v20[833] = v24;
              v20[834] = &v99[8 * v98];
              if (v94) {
                operator delete(v94);
              }
            }
            else
            {
              *long long v22 = v21;
              uint64_t v24 = v22 + 1;
            }
            v20[833] = v24;
            break;
          case 0xF6:
            uint64_t v25 = a1[2];
            uint64_t v26 = *(void **)v25;
            uint64_t v27 = *(unsigned __int16 *)(a1[3] + 56);
            unint64_t v28 = *(char **)(*(void *)v25 + 6688);
            unint64_t v29 = *(void *)(*(void *)v25 + 6696);
            if ((unint64_t)v28 >= v29)
            {
              unint64_t v100 = (char *)v26[835];
              uint64_t v101 = (v28 - v100) >> 3;
              if ((unint64_t)(v101 + 1) >> 61) {
                goto LABEL_270;
              }
              unint64_t v102 = v29 - (void)v100;
              unint64_t v103 = (uint64_t)(v29 - (void)v100) >> 2;
              if (v103 <= v101 + 1) {
                unint64_t v103 = v101 + 1;
              }
              if (v102 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v104 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v104 = v103;
              }
              if (v104)
              {
                uint64_t v105 = (char *)sub_5714((uint64_t)(v26 + 837), v104);
                unint64_t v28 = (char *)v26[836];
                unint64_t v100 = (char *)v26[835];
              }
              else
              {
                uint64_t v105 = 0;
              }
              unint64_t v172 = &v105[8 * v101];
              *(void *)unint64_t v172 = v27;
              uint64_t v30 = v172 + 8;
              while (v28 != v100)
              {
                uint64_t v173 = *((void *)v28 - 1);
                v28 -= 8;
                *((void *)v172 - 1) = v173;
                v172 -= 8;
              }
              v26[835] = v172;
              v26[836] = v30;
              v26[837] = &v105[8 * v104];
              if (v100) {
                operator delete(v100);
              }
            }
            else
            {
              *(void *)unint64_t v28 = v27;
              uint64_t v30 = v28 + 8;
            }
            v26[836] = v30;
            break;
          case 0xF7:
            uint64_t v31 = a1[2];
            uint64_t v32 = *(void **)v31;
            uint64_t v33 = *(unsigned __int16 *)(a1[3] + 52);
            int v34 = *(char **)(*(void *)v31 + 6712);
            unint64_t v35 = *(void *)(*(void *)v31 + 6720);
            if ((unint64_t)v34 >= v35)
            {
              uint64_t v106 = (char *)v32[838];
              uint64_t v107 = (v34 - v106) >> 3;
              if ((unint64_t)(v107 + 1) >> 61) {
                goto LABEL_270;
              }
              unint64_t v108 = v35 - (void)v106;
              unint64_t v109 = (uint64_t)(v35 - (void)v106) >> 2;
              if (v109 <= v107 + 1) {
                unint64_t v109 = v107 + 1;
              }
              if (v108 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v110 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v110 = v109;
              }
              if (v110)
              {
                uint64_t v111 = (char *)sub_5714((uint64_t)(v32 + 840), v110);
                int v34 = (char *)v32[839];
                uint64_t v106 = (char *)v32[838];
              }
              else
              {
                uint64_t v111 = 0;
              }
              uint64_t v174 = &v111[8 * v107];
              *(void *)uint64_t v174 = v33;
              uint64_t v36 = v174 + 8;
              while (v34 != v106)
              {
                uint64_t v175 = *((void *)v34 - 1);
                v34 -= 8;
                *((void *)v174 - 1) = v175;
                v174 -= 8;
              }
              v32[838] = v174;
              v32[839] = v36;
              v32[840] = &v111[8 * v110];
              if (v106) {
                operator delete(v106);
              }
            }
            else
            {
              *(void *)int v34 = v33;
              uint64_t v36 = v34 + 8;
            }
            v32[839] = v36;
            break;
          case 0xF8:
            uint64_t v37 = *(void **)a1[2];
            uint64_t v38 = *(_WORD *)(a1[3] + 58) & 0x7FFF;
            unint64_t v39 = (char *)v37[842];
            unint64_t v40 = v37[843];
            if ((unint64_t)v39 >= v40)
            {
              uint64_t v112 = (char *)v37[841];
              uint64_t v113 = (v39 - v112) >> 3;
              if ((unint64_t)(v113 + 1) >> 61) {
                goto LABEL_270;
              }
              unint64_t v114 = v40 - (void)v112;
              unint64_t v115 = (uint64_t)(v40 - (void)v112) >> 2;
              if (v115 <= v113 + 1) {
                unint64_t v115 = v113 + 1;
              }
              if (v114 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v116 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v116 = v115;
              }
              if (v116)
              {
                uint64_t v117 = (char *)sub_5714((uint64_t)(v37 + 843), v116);
                unint64_t v39 = (char *)v37[842];
                uint64_t v112 = (char *)v37[841];
              }
              else
              {
                uint64_t v117 = 0;
              }
              unint64_t v176 = &v117[8 * v113];
              *(void *)unint64_t v176 = v38;
              uint64_t v41 = v176 + 8;
              while (v39 != v112)
              {
                uint64_t v177 = *((void *)v39 - 1);
                v39 -= 8;
                *((void *)v176 - 1) = v177;
                v176 -= 8;
              }
              v37[841] = v176;
              v37[842] = v41;
              v37[843] = &v117[8 * v116];
              if (v112) {
                operator delete(v112);
              }
            }
            else
            {
              *(void *)unint64_t v39 = v38;
              uint64_t v41 = v39 + 8;
            }
            v37[842] = v41;
            break;
          case 0xF9:
            unint64_t v42 = *(void **)a1[2];
            uint64_t v43 = *(_WORD *)(a1[3] + 54) & 0x7FFF;
            unint64_t v44 = (char *)v42[845];
            unint64_t v45 = v42[846];
            if ((unint64_t)v44 >= v45)
            {
              unint64_t v118 = (char *)v42[844];
              uint64_t v119 = (v44 - v118) >> 3;
              if ((unint64_t)(v119 + 1) >> 61) {
                goto LABEL_270;
              }
              unint64_t v120 = v45 - (void)v118;
              unint64_t v121 = (uint64_t)(v45 - (void)v118) >> 2;
              if (v121 <= v119 + 1) {
                unint64_t v121 = v119 + 1;
              }
              if (v120 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v122 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v122 = v121;
              }
              if (v122)
              {
                unint64_t v123 = (char *)sub_5714((uint64_t)(v42 + 846), v122);
                unint64_t v44 = (char *)v42[845];
                unint64_t v118 = (char *)v42[844];
              }
              else
              {
                unint64_t v123 = 0;
              }
              unint64_t v178 = &v123[8 * v119];
              *(void *)unint64_t v178 = v43;
              uint64_t v46 = v178 + 8;
              while (v44 != v118)
              {
                uint64_t v179 = *((void *)v44 - 1);
                v44 -= 8;
                *((void *)v178 - 1) = v179;
                v178 -= 8;
              }
              v42[844] = v178;
              v42[845] = v46;
              v42[846] = &v123[8 * v122];
              if (v118) {
                operator delete(v118);
              }
            }
            else
            {
              *(void *)unint64_t v44 = v43;
              uint64_t v46 = v44 + 8;
            }
            v42[845] = v46;
            break;
          case 0xFA:
            unint64_t v47 = *(void **)a1[2];
            uint64_t v48 = *(_WORD *)(a1[3] + 60) & 0x7FFF;
            uint64_t v49 = (char *)v47[848];
            unint64_t v50 = v47[849];
            if ((unint64_t)v49 >= v50)
            {
              unint64_t v124 = (char *)v47[847];
              uint64_t v125 = (v49 - v124) >> 3;
              if ((unint64_t)(v125 + 1) >> 61) {
                goto LABEL_270;
              }
              unint64_t v126 = v50 - (void)v124;
              unint64_t v127 = (uint64_t)(v50 - (void)v124) >> 2;
              if (v127 <= v125 + 1) {
                unint64_t v127 = v125 + 1;
              }
              if (v126 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v128 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v128 = v127;
              }
              if (v128)
              {
                unint64_t v129 = (char *)sub_5714((uint64_t)(v47 + 849), v128);
                uint64_t v49 = (char *)v47[848];
                unint64_t v124 = (char *)v47[847];
              }
              else
              {
                unint64_t v129 = 0;
              }
              unint64_t v180 = &v129[8 * v125];
              *(void *)unint64_t v180 = v48;
              uint64_t v51 = v180 + 8;
              while (v49 != v124)
              {
                uint64_t v181 = *((void *)v49 - 1);
                v49 -= 8;
                *((void *)v180 - 1) = v181;
                v180 -= 8;
              }
              v47[847] = v180;
              v47[848] = v51;
              v47[849] = &v129[8 * v128];
              if (v124) {
                operator delete(v124);
              }
            }
            else
            {
              *(void *)uint64_t v49 = v48;
              uint64_t v51 = v49 + 8;
            }
            v47[848] = v51;
            break;
          case 0xFB:
            unint64_t v52 = *(void **)a1[2];
            uint64_t v53 = *(_WORD *)(a1[3] + 62) & 0x7FFF;
            uint64_t v54 = (char *)v52[851];
            unint64_t v55 = v52[852];
            if ((unint64_t)v54 >= v55)
            {
              unint64_t v130 = (char *)v52[850];
              uint64_t v131 = (v54 - v130) >> 3;
              if ((unint64_t)(v131 + 1) >> 61) {
                goto LABEL_270;
              }
              unint64_t v132 = v55 - (void)v130;
              unint64_t v133 = (uint64_t)(v55 - (void)v130) >> 2;
              if (v133 <= v131 + 1) {
                unint64_t v133 = v131 + 1;
              }
              if (v132 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v134 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v134 = v133;
              }
              if (v134)
              {
                unint64_t v135 = (char *)sub_5714((uint64_t)(v52 + 852), v134);
                uint64_t v54 = (char *)v52[851];
                unint64_t v130 = (char *)v52[850];
              }
              else
              {
                unint64_t v135 = 0;
              }
              unint64_t v182 = &v135[8 * v131];
              *(void *)unint64_t v182 = v53;
              uint64_t v56 = v182 + 8;
              while (v54 != v130)
              {
                uint64_t v183 = *((void *)v54 - 1);
                v54 -= 8;
                *((void *)v182 - 1) = v183;
                v182 -= 8;
              }
              v52[850] = v182;
              v52[851] = v56;
              v52[852] = &v135[8 * v134];
              if (v130) {
                operator delete(v130);
              }
            }
            else
            {
              *(void *)uint64_t v54 = v53;
              uint64_t v56 = v54 + 8;
            }
            v52[851] = v56;
            break;
          case 0xFC:
            uint64_t v57 = *(void **)a1[2];
            uint64_t v58 = *(_DWORD *)(a1[3] + 28) & 0xFFFFFLL;
            uint64_t v59 = (uint64_t *)v57[854];
            unint64_t v60 = v57[855];
            if ((unint64_t)v59 >= v60)
            {
              unint64_t v136 = (uint64_t *)v57[853];
              uint64_t v137 = v59 - v136;
              if ((unint64_t)(v137 + 1) >> 61) {
                goto LABEL_270;
              }
              unint64_t v138 = v60 - (void)v136;
              unint64_t v139 = (uint64_t)(v60 - (void)v136) >> 2;
              if (v139 <= v137 + 1) {
                unint64_t v139 = v137 + 1;
              }
              if (v138 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v140 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v140 = v139;
              }
              if (v140)
              {
                unint64_t v141 = (char *)sub_5714((uint64_t)(v57 + 855), v140);
                uint64_t v59 = (uint64_t *)v57[854];
                unint64_t v136 = (uint64_t *)v57[853];
              }
              else
              {
                unint64_t v141 = 0;
              }
              unint64_t v184 = (uint64_t *)&v141[8 * v137];
              *unint64_t v184 = v58;
              uint64_t v61 = v184 + 1;
              while (v59 != v136)
              {
                uint64_t v185 = *--v59;
                *--unint64_t v184 = v185;
              }
              v57[853] = v184;
              v57[854] = v61;
              v57[855] = &v141[8 * v140];
              if (v136) {
                operator delete(v136);
              }
            }
            else
            {
              *uint64_t v59 = v58;
              uint64_t v61 = v59 + 1;
            }
            v57[854] = v61;
            break;
          case 0xFD:
            unint64_t v62 = *(void **)a1[2];
            uint64_t v63 = *(_DWORD *)(a1[3] + 32) & 0xFFFFFLL;
            unint64_t v64 = (uint64_t *)v62[857];
            unint64_t v65 = v62[858];
            if ((unint64_t)v64 >= v65)
            {
              unint64_t v142 = (uint64_t *)v62[856];
              uint64_t v143 = v64 - v142;
              if ((unint64_t)(v143 + 1) >> 61) {
                goto LABEL_270;
              }
              unint64_t v144 = v65 - (void)v142;
              unint64_t v145 = (uint64_t)(v65 - (void)v142) >> 2;
              if (v145 <= v143 + 1) {
                unint64_t v145 = v143 + 1;
              }
              if (v144 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v146 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v146 = v145;
              }
              if (v146)
              {
                unint64_t v147 = (char *)sub_5714((uint64_t)(v62 + 858), v146);
                unint64_t v64 = (uint64_t *)v62[857];
                unint64_t v142 = (uint64_t *)v62[856];
              }
              else
              {
                unint64_t v147 = 0;
              }
              uint64_t v186 = (uint64_t *)&v147[8 * v143];
              *uint64_t v186 = v63;
              uint64_t v66 = v186 + 1;
              while (v64 != v142)
              {
                uint64_t v187 = *--v64;
                *--uint64_t v186 = v187;
              }
              v62[856] = v186;
              v62[857] = v66;
              v62[858] = &v147[8 * v146];
              if (v142) {
                operator delete(v142);
              }
            }
            else
            {
              *unint64_t v64 = v63;
              uint64_t v66 = v64 + 1;
            }
            v62[857] = v66;
            break;
          case 0xFE:
            unint64_t v67 = *(void **)a1[2];
            uint64_t v68 = *(_DWORD *)(a1[3] + 36) & 0xFFFFFLL;
            unint64_t v69 = (uint64_t *)v67[860];
            unint64_t v70 = v67[861];
            if ((unint64_t)v69 >= v70)
            {
              unint64_t v148 = (uint64_t *)v67[859];
              uint64_t v149 = v69 - v148;
              if ((unint64_t)(v149 + 1) >> 61) {
                goto LABEL_270;
              }
              unint64_t v150 = v70 - (void)v148;
              unint64_t v151 = (uint64_t)(v70 - (void)v148) >> 2;
              if (v151 <= v149 + 1) {
                unint64_t v151 = v149 + 1;
              }
              if (v150 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v152 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v152 = v151;
              }
              if (v152)
              {
                unint64_t v153 = (char *)sub_5714((uint64_t)(v67 + 861), v152);
                unint64_t v69 = (uint64_t *)v67[860];
                unint64_t v148 = (uint64_t *)v67[859];
              }
              else
              {
                unint64_t v153 = 0;
              }
              unint64_t v188 = (uint64_t *)&v153[8 * v149];
              *unint64_t v188 = v68;
              uint64_t v71 = v188 + 1;
              while (v69 != v148)
              {
                uint64_t v189 = *--v69;
                *--unint64_t v188 = v189;
              }
              v67[859] = v188;
              v67[860] = v71;
              v67[861] = &v153[8 * v152];
              if (v148) {
                operator delete(v148);
              }
            }
            else
            {
              *unint64_t v69 = v68;
              uint64_t v71 = v69 + 1;
            }
            v67[860] = v71;
            break;
          case 0xFF:
            unint64_t v72 = *(void **)a1[2];
            uint64_t v73 = *(_DWORD *)(a1[3] + 20) & 0xFFFFFLL;
            unint64_t v74 = (uint64_t *)v72[863];
            unint64_t v75 = v72[864];
            if ((unint64_t)v74 >= v75)
            {
              unint64_t v154 = (uint64_t *)v72[862];
              uint64_t v155 = v74 - v154;
              if ((unint64_t)(v155 + 1) >> 61) {
                goto LABEL_270;
              }
              unint64_t v156 = v75 - (void)v154;
              unint64_t v157 = (uint64_t)(v75 - (void)v154) >> 2;
              if (v157 <= v155 + 1) {
                unint64_t v157 = v155 + 1;
              }
              if (v156 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v158 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v158 = v157;
              }
              if (v158)
              {
                unint64_t v159 = (char *)sub_5714((uint64_t)(v72 + 864), v158);
                unint64_t v74 = (uint64_t *)v72[863];
                unint64_t v154 = (uint64_t *)v72[862];
              }
              else
              {
                unint64_t v159 = 0;
              }
              unint64_t v190 = (uint64_t *)&v159[8 * v155];
              uint64_t *v190 = v73;
              unint64_t v76 = v190 + 1;
              while (v74 != v154)
              {
                uint64_t v191 = *--v74;
                *--unint64_t v190 = v191;
              }
              v72[862] = v190;
              v72[863] = v76;
              v72[864] = &v159[8 * v158];
              if (v154) {
                operator delete(v154);
              }
            }
            else
            {
              *unint64_t v74 = v73;
              unint64_t v76 = v74 + 1;
            }
            v72[863] = v76;
            break;
          case 0x100:
            int v77 = *(void **)a1[2];
            uint64_t v78 = *(_DWORD *)(a1[3] + 24) & 0xFFFFFLL;
            uint64_t v79 = (uint64_t *)v77[866];
            unint64_t v80 = v77[867];
            if ((unint64_t)v79 >= v80)
            {
              unint64_t v160 = (uint64_t *)v77[865];
              uint64_t v161 = v79 - v160;
              if ((unint64_t)(v161 + 1) >> 61) {
LABEL_270:
              }
                sub_566C();
              unint64_t v162 = v80 - (void)v160;
              unint64_t v163 = (uint64_t)(v80 - (void)v160) >> 2;
              if (v163 <= v161 + 1) {
                unint64_t v163 = v161 + 1;
              }
              if (v162 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v164 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v164 = v163;
              }
              if (v164)
              {
                unint64_t v165 = (char *)sub_5714((uint64_t)(v77 + 867), v164);
                uint64_t v79 = (uint64_t *)v77[866];
                unint64_t v160 = (uint64_t *)v77[865];
              }
              else
              {
                unint64_t v165 = 0;
              }
              unint64_t v192 = (uint64_t *)&v165[8 * v161];
              uint64_t *v192 = v78;
              uint64_t v81 = v192 + 1;
              while (v79 != v160)
              {
                uint64_t v193 = *--v79;
                *--unint64_t v192 = v193;
              }
              v77[865] = v192;
              v77[866] = v81;
              v77[867] = &v165[8 * v164];
              if (v160) {
                operator delete(v160);
              }
            }
            else
            {
              uint64_t *v79 = v78;
              uint64_t v81 = v79 + 1;
            }
            v77[866] = v81;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_E3B3C(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    uint64_t v271 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    int v270 = *v271;
    uint64_t v272 = (char *)v271[1] - (char *)*v271;
    if (v272)
    {
      unint64_t v273 = v272 >> 2;
      if (v273 <= 1) {
        unint64_t v273 = 1;
      }
      do
      {
        int v274 = *v270++;
        switch(v274)
        {
          case 0:
            uint64_t v275 = (_WORD *)(a1[3] + 56);
            uint64_t v276 = (void *)(*(void *)a1[2] + 784);
            goto LABEL_374;
          case 1:
            uint64_t v275 = (_WORD *)(a1[3] + 52);
            uint64_t v276 = (void *)(*(void *)a1[2] + 808);
            goto LABEL_374;
          case 2:
            uint64_t v275 = (_WORD *)(a1[3] + 58);
            uint64_t v276 = (void *)(*(void *)a1[2] + 832);
            goto LABEL_374;
          case 3:
            uint64_t v275 = (_WORD *)(a1[3] + 54);
            uint64_t v276 = (void *)(*(void *)a1[2] + 856);
            goto LABEL_374;
          case 4:
            uint64_t v275 = (_WORD *)(a1[3] + 36);
            uint64_t v276 = (void *)(*(void *)a1[2] + 880);
            goto LABEL_374;
          case 5:
            uint64_t v275 = (_WORD *)(a1[3] + 20);
            uint64_t v276 = (void *)(*(void *)a1[2] + 904);
            goto LABEL_374;
          case 6:
            uint64_t v275 = (_WORD *)(a1[3] + 38);
            uint64_t v276 = (void *)(*(void *)a1[2] + 928);
            goto LABEL_374;
          case 7:
            uint64_t v275 = (_WORD *)(a1[3] + 22);
            uint64_t v276 = (void *)(*(void *)a1[2] + 952);
            goto LABEL_374;
          case 8:
            uint64_t v275 = (_WORD *)(a1[3] + 40);
            uint64_t v276 = (void *)(*(void *)a1[2] + 976);
            goto LABEL_374;
          case 9:
            uint64_t v275 = (_WORD *)(a1[3] + 24);
            uint64_t v276 = (void *)(*(void *)a1[2] + 1000);
            goto LABEL_374;
          case 10:
            uint64_t v275 = (_WORD *)(a1[3] + 42);
            uint64_t v276 = (void *)(*(void *)a1[2] + 1024);
            goto LABEL_374;
          case 11:
            uint64_t v275 = (_WORD *)(a1[3] + 26);
            uint64_t v276 = (void *)(*(void *)a1[2] + 1048);
            goto LABEL_374;
          case 12:
            uint64_t v275 = (_WORD *)(a1[3] + 44);
            uint64_t v276 = (void *)(*(void *)a1[2] + 1072);
            goto LABEL_374;
          case 13:
            uint64_t v275 = (_WORD *)(a1[3] + 28);
            uint64_t v276 = (void *)(*(void *)a1[2] + 1096);
            goto LABEL_374;
          case 14:
            uint64_t v275 = (_WORD *)(a1[3] + 46);
            uint64_t v276 = (void *)(*(void *)a1[2] + 1120);
            goto LABEL_374;
          case 15:
            uint64_t v275 = (_WORD *)(a1[3] + 30);
            uint64_t v276 = (void *)(*(void *)a1[2] + 1144);
            goto LABEL_374;
          case 16:
            uint64_t v275 = (_WORD *)(a1[3] + 48);
            uint64_t v276 = (void *)(*(void *)a1[2] + 1168);
            goto LABEL_374;
          case 17:
            uint64_t v275 = (_WORD *)(a1[3] + 32);
            uint64_t v276 = (void *)(*(void *)a1[2] + 1192);
            goto LABEL_374;
          case 18:
            uint64_t v275 = (_WORD *)(a1[3] + 50);
            uint64_t v276 = (void *)(*(void *)a1[2] + 1216);
            goto LABEL_374;
          case 19:
            uint64_t v275 = (_WORD *)(a1[3] + 34);
            uint64_t v276 = (void *)(*(void *)a1[2] + 1240);
LABEL_374:
            *(void *)(*v276 - 8) += *v275 & 0x7FFF;
            break;
          default:
            break;
        }
        --v273;
      }
      while (v273);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    int v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0:
            unint64_t v10 = *(void **)a1[2];
            uint64_t v11 = *(_WORD *)(a1[3] + 56) & 0x7FFF;
            unint64_t v12 = (char *)v10[98];
            unint64_t v13 = v10[99];
            if ((unint64_t)v12 >= v13)
            {
              unint64_t v110 = (char *)v10[97];
              uint64_t v111 = (v12 - v110) >> 3;
              if ((unint64_t)(v111 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v112 = v13 - (void)v110;
              unint64_t v113 = (uint64_t)(v13 - (void)v110) >> 2;
              if (v113 <= v111 + 1) {
                unint64_t v113 = v111 + 1;
              }
              if (v112 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v114 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v114 = v113;
              }
              if (v114)
              {
                unint64_t v115 = (char *)sub_5714((uint64_t)(v10 + 99), v114);
                unint64_t v12 = (char *)v10[98];
                unint64_t v110 = (char *)v10[97];
              }
              else
              {
                unint64_t v115 = 0;
              }
              unint64_t v230 = &v115[8 * v111];
              *(void *)unint64_t v230 = v11;
              unint64_t v14 = v230 + 8;
              while (v12 != v110)
              {
                uint64_t v231 = *((void *)v12 - 1);
                v12 -= 8;
                *((void *)v230 - 1) = v231;
                v230 -= 8;
              }
              v10[97] = v230;
              v10[98] = v14;
              v10[99] = &v115[8 * v114];
              if (v110) {
                operator delete(v110);
              }
            }
            else
            {
              *(void *)unint64_t v12 = v11;
              unint64_t v14 = v12 + 8;
            }
            v10[98] = v14;
            break;
          case 1:
            unint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_WORD *)(a1[3] + 52) & 0x7FFF;
            uint64_t v17 = (char *)v15[101];
            unint64_t v18 = v15[102];
            if ((unint64_t)v17 >= v18)
            {
              unint64_t v116 = (char *)v15[100];
              uint64_t v117 = (v17 - v116) >> 3;
              if ((unint64_t)(v117 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v118 = v18 - (void)v116;
              unint64_t v119 = (uint64_t)(v18 - (void)v116) >> 2;
              if (v119 <= v117 + 1) {
                unint64_t v119 = v117 + 1;
              }
              if (v118 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v120 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v120 = v119;
              }
              if (v120)
              {
                unint64_t v121 = (char *)sub_5714((uint64_t)(v15 + 102), v120);
                uint64_t v17 = (char *)v15[101];
                unint64_t v116 = (char *)v15[100];
              }
              else
              {
                unint64_t v121 = 0;
              }
              unint64_t v232 = &v121[8 * v117];
              *(void *)unint64_t v232 = v16;
              unint64_t v19 = v232 + 8;
              while (v17 != v116)
              {
                uint64_t v233 = *((void *)v17 - 1);
                v17 -= 8;
                *((void *)v232 - 1) = v233;
                v232 -= 8;
              }
              v15[100] = v232;
              v15[101] = v19;
              v15[102] = &v121[8 * v120];
              if (v116) {
                operator delete(v116);
              }
            }
            else
            {
              *(void *)uint64_t v17 = v16;
              unint64_t v19 = v17 + 8;
            }
            v15[101] = v19;
            break;
          case 2:
            uint64_t v20 = *(void **)a1[2];
            uint64_t v21 = *(_WORD *)(a1[3] + 58) & 0x7FFF;
            long long v22 = (char *)v20[104];
            unint64_t v23 = v20[105];
            if ((unint64_t)v22 >= v23)
            {
              unint64_t v122 = (char *)v20[103];
              uint64_t v123 = (v22 - v122) >> 3;
              if ((unint64_t)(v123 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v124 = v23 - (void)v122;
              unint64_t v125 = (uint64_t)(v23 - (void)v122) >> 2;
              if (v125 <= v123 + 1) {
                unint64_t v125 = v123 + 1;
              }
              if (v124 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v126 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v126 = v125;
              }
              if (v126)
              {
                unint64_t v127 = (char *)sub_5714((uint64_t)(v20 + 105), v126);
                long long v22 = (char *)v20[104];
                unint64_t v122 = (char *)v20[103];
              }
              else
              {
                unint64_t v127 = 0;
              }
              uint64_t v234 = &v127[8 * v123];
              *(void *)uint64_t v234 = v21;
              uint64_t v24 = v234 + 8;
              while (v22 != v122)
              {
                uint64_t v235 = *((void *)v22 - 1);
                v22 -= 8;
                *((void *)v234 - 1) = v235;
                v234 -= 8;
              }
              v20[103] = v234;
              v20[104] = v24;
              v20[105] = &v127[8 * v126];
              if (v122) {
                operator delete(v122);
              }
            }
            else
            {
              *(void *)long long v22 = v21;
              uint64_t v24 = v22 + 8;
            }
            v20[104] = v24;
            break;
          case 3:
            uint64_t v25 = *(void **)a1[2];
            uint64_t v26 = *(_WORD *)(a1[3] + 54) & 0x7FFF;
            uint64_t v27 = (char *)v25[107];
            unint64_t v28 = v25[108];
            if ((unint64_t)v27 >= v28)
            {
              unint64_t v128 = (char *)v25[106];
              uint64_t v129 = (v27 - v128) >> 3;
              if ((unint64_t)(v129 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v130 = v28 - (void)v128;
              unint64_t v131 = (uint64_t)(v28 - (void)v128) >> 2;
              if (v131 <= v129 + 1) {
                unint64_t v131 = v129 + 1;
              }
              if (v130 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v132 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v132 = v131;
              }
              if (v132)
              {
                unint64_t v133 = (char *)sub_5714((uint64_t)(v25 + 108), v132);
                uint64_t v27 = (char *)v25[107];
                unint64_t v128 = (char *)v25[106];
              }
              else
              {
                unint64_t v133 = 0;
              }
              unint64_t v236 = &v133[8 * v129];
              *(void *)unint64_t v236 = v26;
              unint64_t v29 = v236 + 8;
              while (v27 != v128)
              {
                uint64_t v237 = *((void *)v27 - 1);
                v27 -= 8;
                *((void *)v236 - 1) = v237;
                v236 -= 8;
              }
              v25[106] = v236;
              v25[107] = v29;
              v25[108] = &v133[8 * v132];
              if (v128) {
                operator delete(v128);
              }
            }
            else
            {
              *(void *)uint64_t v27 = v26;
              unint64_t v29 = v27 + 8;
            }
            v25[107] = v29;
            break;
          case 4:
            uint64_t v30 = *(void **)a1[2];
            uint64_t v31 = *(_WORD *)(a1[3] + 36) & 0x7FFF;
            uint64_t v32 = (char *)v30[110];
            unint64_t v33 = v30[111];
            if ((unint64_t)v32 >= v33)
            {
              unint64_t v134 = (char *)v30[109];
              uint64_t v135 = (v32 - v134) >> 3;
              if ((unint64_t)(v135 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v136 = v33 - (void)v134;
              unint64_t v137 = (uint64_t)(v33 - (void)v134) >> 2;
              if (v137 <= v135 + 1) {
                unint64_t v137 = v135 + 1;
              }
              if (v136 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v138 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v138 = v137;
              }
              if (v138)
              {
                unint64_t v139 = (char *)sub_5714((uint64_t)(v30 + 111), v138);
                uint64_t v32 = (char *)v30[110];
                unint64_t v134 = (char *)v30[109];
              }
              else
              {
                unint64_t v139 = 0;
              }
              unint64_t v238 = &v139[8 * v135];
              *(void *)unint64_t v238 = v31;
              int v34 = v238 + 8;
              while (v32 != v134)
              {
                uint64_t v239 = *((void *)v32 - 1);
                v32 -= 8;
                *((void *)v238 - 1) = v239;
                v238 -= 8;
              }
              v30[109] = v238;
              v30[110] = v34;
              v30[111] = &v139[8 * v138];
              if (v134) {
                operator delete(v134);
              }
            }
            else
            {
              *(void *)uint64_t v32 = v31;
              int v34 = v32 + 8;
            }
            v30[110] = v34;
            break;
          case 5:
            unint64_t v35 = *(void **)a1[2];
            uint64_t v36 = *(_WORD *)(a1[3] + 20) & 0x7FFF;
            uint64_t v37 = (char *)v35[113];
            unint64_t v38 = v35[114];
            if ((unint64_t)v37 >= v38)
            {
              unint64_t v140 = (char *)v35[112];
              uint64_t v141 = (v37 - v140) >> 3;
              if ((unint64_t)(v141 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v142 = v38 - (void)v140;
              unint64_t v143 = (uint64_t)(v38 - (void)v140) >> 2;
              if (v143 <= v141 + 1) {
                unint64_t v143 = v141 + 1;
              }
              if (v142 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v144 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v144 = v143;
              }
              if (v144)
              {
                unint64_t v145 = (char *)sub_5714((uint64_t)(v35 + 114), v144);
                uint64_t v37 = (char *)v35[113];
                unint64_t v140 = (char *)v35[112];
              }
              else
              {
                unint64_t v145 = 0;
              }
              unint64_t v240 = &v145[8 * v141];
              *(void *)unint64_t v240 = v36;
              unint64_t v39 = v240 + 8;
              while (v37 != v140)
              {
                uint64_t v241 = *((void *)v37 - 1);
                v37 -= 8;
                *((void *)v240 - 1) = v241;
                v240 -= 8;
              }
              v35[112] = v240;
              v35[113] = v39;
              v35[114] = &v145[8 * v144];
              if (v140) {
                operator delete(v140);
              }
            }
            else
            {
              *(void *)uint64_t v37 = v36;
              unint64_t v39 = v37 + 8;
            }
            v35[113] = v39;
            break;
          case 6:
            unint64_t v40 = *(void **)a1[2];
            uint64_t v41 = *(_WORD *)(a1[3] + 38) & 0x7FFF;
            unint64_t v42 = (char *)v40[116];
            unint64_t v43 = v40[117];
            if ((unint64_t)v42 >= v43)
            {
              unint64_t v146 = (char *)v40[115];
              uint64_t v147 = (v42 - v146) >> 3;
              if ((unint64_t)(v147 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v148 = v43 - (void)v146;
              unint64_t v149 = (uint64_t)(v43 - (void)v146) >> 2;
              if (v149 <= v147 + 1) {
                unint64_t v149 = v147 + 1;
              }
              if (v148 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v150 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v150 = v149;
              }
              if (v150)
              {
                unint64_t v151 = (char *)sub_5714((uint64_t)(v40 + 117), v150);
                unint64_t v42 = (char *)v40[116];
                unint64_t v146 = (char *)v40[115];
              }
              else
              {
                unint64_t v151 = 0;
              }
              unint64_t v242 = &v151[8 * v147];
              *(void *)unint64_t v242 = v41;
              unint64_t v44 = v242 + 8;
              while (v42 != v146)
              {
                uint64_t v243 = *((void *)v42 - 1);
                v42 -= 8;
                *((void *)v242 - 1) = v243;
                v242 -= 8;
              }
              v40[115] = v242;
              v40[116] = v44;
              v40[117] = &v151[8 * v150];
              if (v146) {
                operator delete(v146);
              }
            }
            else
            {
              *(void *)unint64_t v42 = v41;
              unint64_t v44 = v42 + 8;
            }
            v40[116] = v44;
            break;
          case 7:
            unint64_t v45 = *(void **)a1[2];
            uint64_t v46 = *(_WORD *)(a1[3] + 22) & 0x7FFF;
            unint64_t v47 = (char *)v45[119];
            unint64_t v48 = v45[120];
            if ((unint64_t)v47 >= v48)
            {
              unint64_t v152 = (char *)v45[118];
              uint64_t v153 = (v47 - v152) >> 3;
              if ((unint64_t)(v153 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v154 = v48 - (void)v152;
              unint64_t v155 = (uint64_t)(v48 - (void)v152) >> 2;
              if (v155 <= v153 + 1) {
                unint64_t v155 = v153 + 1;
              }
              if (v154 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v156 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v156 = v155;
              }
              if (v156)
              {
                unint64_t v157 = (char *)sub_5714((uint64_t)(v45 + 120), v156);
                unint64_t v47 = (char *)v45[119];
                unint64_t v152 = (char *)v45[118];
              }
              else
              {
                unint64_t v157 = 0;
              }
              unint64_t v244 = &v157[8 * v153];
              *(void *)unint64_t v244 = v46;
              uint64_t v49 = v244 + 8;
              while (v47 != v152)
              {
                uint64_t v245 = *((void *)v47 - 1);
                v47 -= 8;
                *((void *)v244 - 1) = v245;
                v244 -= 8;
              }
              v45[118] = v244;
              v45[119] = v49;
              v45[120] = &v157[8 * v156];
              if (v152) {
                operator delete(v152);
              }
            }
            else
            {
              *(void *)unint64_t v47 = v46;
              uint64_t v49 = v47 + 8;
            }
            v45[119] = v49;
            break;
          case 8:
            unint64_t v50 = *(void **)a1[2];
            uint64_t v51 = *(_WORD *)(a1[3] + 40) & 0x7FFF;
            unint64_t v52 = (char *)v50[122];
            unint64_t v53 = v50[123];
            if ((unint64_t)v52 >= v53)
            {
              unint64_t v158 = (char *)v50[121];
              uint64_t v159 = (v52 - v158) >> 3;
              if ((unint64_t)(v159 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v160 = v53 - (void)v158;
              unint64_t v161 = (uint64_t)(v53 - (void)v158) >> 2;
              if (v161 <= v159 + 1) {
                unint64_t v161 = v159 + 1;
              }
              if (v160 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v162 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v162 = v161;
              }
              if (v162)
              {
                unint64_t v163 = (char *)sub_5714((uint64_t)(v50 + 123), v162);
                unint64_t v52 = (char *)v50[122];
                unint64_t v158 = (char *)v50[121];
              }
              else
              {
                unint64_t v163 = 0;
              }
              int v246 = &v163[8 * v159];
              *(void *)int v246 = v51;
              uint64_t v54 = v246 + 8;
              while (v52 != v158)
              {
                uint64_t v247 = *((void *)v52 - 1);
                v52 -= 8;
                *((void *)v246 - 1) = v247;
                v246 -= 8;
              }
              v50[121] = v246;
              v50[122] = v54;
              v50[123] = &v163[8 * v162];
              if (v158) {
                operator delete(v158);
              }
            }
            else
            {
              *(void *)unint64_t v52 = v51;
              uint64_t v54 = v52 + 8;
            }
            v50[122] = v54;
            break;
          case 9:
            unint64_t v55 = *(void **)a1[2];
            uint64_t v56 = *(_WORD *)(a1[3] + 24) & 0x7FFF;
            uint64_t v57 = (char *)v55[125];
            unint64_t v58 = v55[126];
            if ((unint64_t)v57 >= v58)
            {
              unint64_t v164 = (char *)v55[124];
              uint64_t v165 = (v57 - v164) >> 3;
              if ((unint64_t)(v165 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v166 = v58 - (void)v164;
              unint64_t v167 = (uint64_t)(v58 - (void)v164) >> 2;
              if (v167 <= v165 + 1) {
                unint64_t v167 = v165 + 1;
              }
              if (v166 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v168 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v168 = v167;
              }
              if (v168)
              {
                uint64_t v169 = (char *)sub_5714((uint64_t)(v55 + 126), v168);
                uint64_t v57 = (char *)v55[125];
                unint64_t v164 = (char *)v55[124];
              }
              else
              {
                uint64_t v169 = 0;
              }
              unint64_t v248 = &v169[8 * v165];
              *(void *)unint64_t v248 = v56;
              uint64_t v59 = v248 + 8;
              while (v57 != v164)
              {
                uint64_t v249 = *((void *)v57 - 1);
                v57 -= 8;
                *((void *)v248 - 1) = v249;
                v248 -= 8;
              }
              v55[124] = v248;
              v55[125] = v59;
              v55[126] = &v169[8 * v168];
              if (v164) {
                operator delete(v164);
              }
            }
            else
            {
              *(void *)uint64_t v57 = v56;
              uint64_t v59 = v57 + 8;
            }
            v55[125] = v59;
            break;
          case 0xA:
            unint64_t v60 = *(void **)a1[2];
            uint64_t v61 = *(_WORD *)(a1[3] + 42) & 0x7FFF;
            unint64_t v62 = (char *)v60[128];
            unint64_t v63 = v60[129];
            if ((unint64_t)v62 >= v63)
            {
              unint64_t v170 = (char *)v60[127];
              uint64_t v171 = (v62 - v170) >> 3;
              if ((unint64_t)(v171 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v172 = v63 - (void)v170;
              unint64_t v173 = (uint64_t)(v63 - (void)v170) >> 2;
              if (v173 <= v171 + 1) {
                unint64_t v173 = v171 + 1;
              }
              if (v172 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v174 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v174 = v173;
              }
              if (v174)
              {
                uint64_t v175 = (char *)sub_5714((uint64_t)(v60 + 129), v174);
                unint64_t v62 = (char *)v60[128];
                unint64_t v170 = (char *)v60[127];
              }
              else
              {
                uint64_t v175 = 0;
              }
              unint64_t v250 = &v175[8 * v171];
              *(void *)unint64_t v250 = v61;
              unint64_t v64 = v250 + 8;
              while (v62 != v170)
              {
                uint64_t v251 = *((void *)v62 - 1);
                v62 -= 8;
                *((void *)v250 - 1) = v251;
                v250 -= 8;
              }
              v60[127] = v250;
              v60[128] = v64;
              v60[129] = &v175[8 * v174];
              if (v170) {
                operator delete(v170);
              }
            }
            else
            {
              *(void *)unint64_t v62 = v61;
              unint64_t v64 = v62 + 8;
            }
            v60[128] = v64;
            break;
          case 0xB:
            unint64_t v65 = *(void **)a1[2];
            uint64_t v66 = *(_WORD *)(a1[3] + 26) & 0x7FFF;
            unint64_t v67 = (char *)v65[131];
            unint64_t v68 = v65[132];
            if ((unint64_t)v67 >= v68)
            {
              unint64_t v176 = (char *)v65[130];
              uint64_t v177 = (v67 - v176) >> 3;
              if ((unint64_t)(v177 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v178 = v68 - (void)v176;
              unint64_t v179 = (uint64_t)(v68 - (void)v176) >> 2;
              if (v179 <= v177 + 1) {
                unint64_t v179 = v177 + 1;
              }
              if (v178 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v180 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v180 = v179;
              }
              if (v180)
              {
                uint64_t v181 = (char *)sub_5714((uint64_t)(v65 + 132), v180);
                unint64_t v67 = (char *)v65[131];
                unint64_t v176 = (char *)v65[130];
              }
              else
              {
                uint64_t v181 = 0;
              }
              uint64_t v252 = &v181[8 * v177];
              *(void *)uint64_t v252 = v66;
              unint64_t v69 = v252 + 8;
              while (v67 != v176)
              {
                uint64_t v253 = *((void *)v67 - 1);
                v67 -= 8;
                *((void *)v252 - 1) = v253;
                v252 -= 8;
              }
              v65[130] = v252;
              v65[131] = v69;
              v65[132] = &v181[8 * v180];
              if (v176) {
                operator delete(v176);
              }
            }
            else
            {
              *(void *)unint64_t v67 = v66;
              unint64_t v69 = v67 + 8;
            }
            v65[131] = v69;
            break;
          case 0xC:
            unint64_t v70 = *(void **)a1[2];
            uint64_t v71 = *(_WORD *)(a1[3] + 44) & 0x7FFF;
            unint64_t v72 = (char *)v70[134];
            unint64_t v73 = v70[135];
            if ((unint64_t)v72 >= v73)
            {
              unint64_t v182 = (char *)v70[133];
              uint64_t v183 = (v72 - v182) >> 3;
              if ((unint64_t)(v183 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v184 = v73 - (void)v182;
              unint64_t v185 = (uint64_t)(v73 - (void)v182) >> 2;
              if (v185 <= v183 + 1) {
                unint64_t v185 = v183 + 1;
              }
              if (v184 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v186 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v186 = v185;
              }
              if (v186)
              {
                uint64_t v187 = (char *)sub_5714((uint64_t)(v70 + 135), v186);
                unint64_t v72 = (char *)v70[134];
                unint64_t v182 = (char *)v70[133];
              }
              else
              {
                uint64_t v187 = 0;
              }
              unint64_t v254 = &v187[8 * v183];
              *(void *)unint64_t v254 = v71;
              unint64_t v74 = v254 + 8;
              while (v72 != v182)
              {
                uint64_t v255 = *((void *)v72 - 1);
                v72 -= 8;
                *((void *)v254 - 1) = v255;
                v254 -= 8;
              }
              v70[133] = v254;
              v70[134] = v74;
              v70[135] = &v187[8 * v186];
              if (v182) {
                operator delete(v182);
              }
            }
            else
            {
              *(void *)unint64_t v72 = v71;
              unint64_t v74 = v72 + 8;
            }
            v70[134] = v74;
            break;
          case 0xD:
            unint64_t v75 = *(void **)a1[2];
            uint64_t v76 = *(_WORD *)(a1[3] + 28) & 0x7FFF;
            int v77 = (char *)v75[137];
            unint64_t v78 = v75[138];
            if ((unint64_t)v77 >= v78)
            {
              unint64_t v188 = (char *)v75[136];
              uint64_t v189 = (v77 - v188) >> 3;
              if ((unint64_t)(v189 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v190 = v78 - (void)v188;
              unint64_t v191 = (uint64_t)(v78 - (void)v188) >> 2;
              if (v191 <= v189 + 1) {
                unint64_t v191 = v189 + 1;
              }
              if (v190 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v192 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v192 = v191;
              }
              if (v192)
              {
                uint64_t v193 = (char *)sub_5714((uint64_t)(v75 + 138), v192);
                int v77 = (char *)v75[137];
                unint64_t v188 = (char *)v75[136];
              }
              else
              {
                uint64_t v193 = 0;
              }
              unint64_t v256 = &v193[8 * v189];
              *(void *)unint64_t v256 = v76;
              uint64_t v79 = v256 + 8;
              while (v77 != v188)
              {
                uint64_t v257 = *((void *)v77 - 1);
                v77 -= 8;
                *((void *)v256 - 1) = v257;
                v256 -= 8;
              }
              v75[136] = v256;
              v75[137] = v79;
              v75[138] = &v193[8 * v192];
              if (v188) {
                operator delete(v188);
              }
            }
            else
            {
              *(void *)int v77 = v76;
              uint64_t v79 = v77 + 8;
            }
            v75[137] = v79;
            break;
          case 0xE:
            unint64_t v80 = *(void **)a1[2];
            uint64_t v81 = *(_WORD *)(a1[3] + 46) & 0x7FFF;
            int v82 = (char *)v80[140];
            unint64_t v83 = v80[141];
            if ((unint64_t)v82 >= v83)
            {
              unint64_t v194 = (char *)v80[139];
              uint64_t v195 = (v82 - v194) >> 3;
              if ((unint64_t)(v195 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v196 = v83 - (void)v194;
              unint64_t v197 = (uint64_t)(v83 - (void)v194) >> 2;
              if (v197 <= v195 + 1) {
                unint64_t v197 = v195 + 1;
              }
              if (v196 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v198 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v198 = v197;
              }
              if (v198)
              {
                uint64_t v199 = (char *)sub_5714((uint64_t)(v80 + 141), v198);
                int v82 = (char *)v80[140];
                unint64_t v194 = (char *)v80[139];
              }
              else
              {
                uint64_t v199 = 0;
              }
              uint64_t v258 = &v199[8 * v195];
              *(void *)uint64_t v258 = v81;
              unint64_t v84 = v258 + 8;
              while (v82 != v194)
              {
                uint64_t v259 = *((void *)v82 - 1);
                v82 -= 8;
                *((void *)v258 - 1) = v259;
                v258 -= 8;
              }
              v80[139] = v258;
              v80[140] = v84;
              v80[141] = &v199[8 * v198];
              if (v194) {
                operator delete(v194);
              }
            }
            else
            {
              *(void *)int v82 = v81;
              unint64_t v84 = v82 + 8;
            }
            v80[140] = v84;
            break;
          case 0xF:
            unint64_t v85 = *(void **)a1[2];
            uint64_t v86 = *(_WORD *)(a1[3] + 30) & 0x7FFF;
            unint64_t v87 = (char *)v85[143];
            unint64_t v88 = v85[144];
            if ((unint64_t)v87 >= v88)
            {
              unint64_t v200 = (char *)v85[142];
              uint64_t v201 = (v87 - v200) >> 3;
              if ((unint64_t)(v201 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v202 = v88 - (void)v200;
              unint64_t v203 = (uint64_t)(v88 - (void)v200) >> 2;
              if (v203 <= v201 + 1) {
                unint64_t v203 = v201 + 1;
              }
              if (v202 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v204 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v204 = v203;
              }
              if (v204)
              {
                uint64_t v205 = (char *)sub_5714((uint64_t)(v85 + 144), v204);
                unint64_t v87 = (char *)v85[143];
                unint64_t v200 = (char *)v85[142];
              }
              else
              {
                uint64_t v205 = 0;
              }
              unint64_t v260 = &v205[8 * v201];
              *(void *)unint64_t v260 = v86;
              uint64_t v89 = v260 + 8;
              while (v87 != v200)
              {
                uint64_t v261 = *((void *)v87 - 1);
                v87 -= 8;
                *((void *)v260 - 1) = v261;
                v260 -= 8;
              }
              v85[142] = v260;
              v85[143] = v89;
              v85[144] = &v205[8 * v204];
              if (v200) {
                operator delete(v200);
              }
            }
            else
            {
              *(void *)unint64_t v87 = v86;
              uint64_t v89 = v87 + 8;
            }
            v85[143] = v89;
            break;
          case 0x10:
            unint64_t v90 = *(void **)a1[2];
            uint64_t v91 = *(_WORD *)(a1[3] + 48) & 0x7FFF;
            unint64_t v92 = (char *)v90[146];
            unint64_t v93 = v90[147];
            if ((unint64_t)v92 >= v93)
            {
              unint64_t v206 = (char *)v90[145];
              uint64_t v207 = (v92 - v206) >> 3;
              if ((unint64_t)(v207 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v208 = v93 - (void)v206;
              unint64_t v209 = (uint64_t)(v93 - (void)v206) >> 2;
              if (v209 <= v207 + 1) {
                unint64_t v209 = v207 + 1;
              }
              if (v208 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v210 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v210 = v209;
              }
              if (v210)
              {
                uint64_t v211 = (char *)sub_5714((uint64_t)(v90 + 147), v210);
                unint64_t v92 = (char *)v90[146];
                unint64_t v206 = (char *)v90[145];
              }
              else
              {
                uint64_t v211 = 0;
              }
              unint64_t v262 = &v211[8 * v207];
              *(void *)unint64_t v262 = v91;
              uint64_t v94 = v262 + 8;
              while (v92 != v206)
              {
                uint64_t v263 = *((void *)v92 - 1);
                v92 -= 8;
                *((void *)v262 - 1) = v263;
                v262 -= 8;
              }
              v90[145] = v262;
              v90[146] = v94;
              v90[147] = &v211[8 * v210];
              if (v206) {
                operator delete(v206);
              }
            }
            else
            {
              *(void *)unint64_t v92 = v91;
              uint64_t v94 = v92 + 8;
            }
            v90[146] = v94;
            break;
          case 0x11:
            uint64_t v95 = *(void **)a1[2];
            uint64_t v96 = *(_WORD *)(a1[3] + 32) & 0x7FFF;
            unint64_t v97 = (char *)v95[149];
            unint64_t v98 = v95[150];
            if ((unint64_t)v97 >= v98)
            {
              unint64_t v212 = (char *)v95[148];
              uint64_t v213 = (v97 - v212) >> 3;
              if ((unint64_t)(v213 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v214 = v98 - (void)v212;
              unint64_t v215 = (uint64_t)(v98 - (void)v212) >> 2;
              if (v215 <= v213 + 1) {
                unint64_t v215 = v213 + 1;
              }
              if (v214 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v216 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v216 = v215;
              }
              if (v216)
              {
                uint64_t v217 = (char *)sub_5714((uint64_t)(v95 + 150), v216);
                unint64_t v97 = (char *)v95[149];
                unint64_t v212 = (char *)v95[148];
              }
              else
              {
                uint64_t v217 = 0;
              }
              unint64_t v264 = &v217[8 * v213];
              *(void *)unint64_t v264 = v96;
              unint64_t v99 = v264 + 8;
              while (v97 != v212)
              {
                uint64_t v265 = *((void *)v97 - 1);
                v97 -= 8;
                *((void *)v264 - 1) = v265;
                v264 -= 8;
              }
              v95[148] = v264;
              v95[149] = v99;
              v95[150] = &v217[8 * v216];
              if (v212) {
                operator delete(v212);
              }
            }
            else
            {
              *(void *)unint64_t v97 = v96;
              unint64_t v99 = v97 + 8;
            }
            v95[149] = v99;
            break;
          case 0x12:
            unint64_t v100 = *(void **)a1[2];
            uint64_t v101 = *(_WORD *)(a1[3] + 50) & 0x7FFF;
            unint64_t v102 = (char *)v100[152];
            unint64_t v103 = v100[153];
            if ((unint64_t)v102 >= v103)
            {
              unint64_t v218 = (char *)v100[151];
              uint64_t v219 = (v102 - v218) >> 3;
              if ((unint64_t)(v219 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v220 = v103 - (void)v218;
              unint64_t v221 = (uint64_t)(v103 - (void)v218) >> 2;
              if (v221 <= v219 + 1) {
                unint64_t v221 = v219 + 1;
              }
              if (v220 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v222 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v222 = v221;
              }
              if (v222)
              {
                uint64_t v223 = (char *)sub_5714((uint64_t)(v100 + 153), v222);
                unint64_t v102 = (char *)v100[152];
                unint64_t v218 = (char *)v100[151];
              }
              else
              {
                uint64_t v223 = 0;
              }
              uint64_t v266 = &v223[8 * v219];
              *(void *)uint64_t v266 = v101;
              unint64_t v104 = v266 + 8;
              while (v102 != v218)
              {
                uint64_t v267 = *((void *)v102 - 1);
                v102 -= 8;
                *((void *)v266 - 1) = v267;
                v266 -= 8;
              }
              v100[151] = v266;
              v100[152] = v104;
              v100[153] = &v223[8 * v222];
              if (v218) {
                operator delete(v218);
              }
            }
            else
            {
              *(void *)unint64_t v102 = v101;
              unint64_t v104 = v102 + 8;
            }
            v100[152] = v104;
            break;
          case 0x13:
            uint64_t v105 = *(void **)a1[2];
            uint64_t v106 = *(_WORD *)(a1[3] + 34) & 0x7FFF;
            uint64_t v107 = (char *)v105[155];
            unint64_t v108 = v105[156];
            if ((unint64_t)v107 >= v108)
            {
              unint64_t v224 = (char *)v105[154];
              uint64_t v225 = (v107 - v224) >> 3;
              if ((unint64_t)(v225 + 1) >> 61) {
LABEL_378:
              }
                sub_566C();
              unint64_t v226 = v108 - (void)v224;
              unint64_t v227 = (uint64_t)(v108 - (void)v224) >> 2;
              if (v227 <= v225 + 1) {
                unint64_t v227 = v225 + 1;
              }
              if (v226 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v228 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v228 = v227;
              }
              if (v228)
              {
                uint64_t v229 = (char *)sub_5714((uint64_t)(v105 + 156), v228);
                uint64_t v107 = (char *)v105[155];
                unint64_t v224 = (char *)v105[154];
              }
              else
              {
                uint64_t v229 = 0;
              }
              uint64_t v268 = &v229[8 * v225];
              *(void *)uint64_t v268 = v106;
              unint64_t v109 = v268 + 8;
              while (v107 != v224)
              {
                uint64_t v269 = *((void *)v107 - 1);
                v107 -= 8;
                *((void *)v268 - 1) = v269;
                v268 -= 8;
              }
              v105[154] = v268;
              v105[155] = v109;
              v105[156] = &v229[8 * v228];
              if (v224) {
                operator delete(v224);
              }
            }
            else
            {
              *(void *)uint64_t v107 = v106;
              unint64_t v109 = v107 + 8;
            }
            v105[155] = v109;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_E4DBC(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    uint64_t v335 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    unint64_t v334 = *v335;
    uint64_t v336 = (char *)v335[1] - (char *)*v335;
    if (v336)
    {
      unint64_t v337 = v336 >> 2;
      if (v337 <= 1) {
        unint64_t v337 = 1;
      }
      do
      {
        int v338 = *v334++;
        switch(v338)
        {
          case '0':
            unint64_t v339 = *(unsigned __int16 *)(a1[3] + 60);
            uint64_t v340 = (void *)(*(void *)a1[2] + 1936);
            goto LABEL_446;
          case '1':
            unint64_t v339 = *(unsigned __int16 *)(a1[3] + 22);
            uint64_t v340 = (void *)(*(void *)a1[2] + 1960);
            goto LABEL_446;
          case '2':
            unint64_t v339 = *(_DWORD *)(a1[3] + 88) & 0x7FFF;
            uint64_t v340 = (void *)(*(void *)a1[2] + 1984);
            goto LABEL_446;
          case '3':
            unint64_t v339 = *(void *)(a1[3] + 56) >> 17;
            uint64_t v340 = (void *)(*(void *)a1[2] + 2008);
            goto LABEL_446;
          case '4':
            unint64_t v339 = *(unsigned __int16 *)(a1[3] + 80);
            uint64_t v340 = (void *)(*(void *)a1[2] + 2032);
            goto LABEL_446;
          case '5':
            unint64_t v339 = *(unsigned __int16 *)(a1[3] + 40);
            uint64_t v340 = (void *)(*(void *)a1[2] + 2056);
            goto LABEL_446;
          case '6':
            unint64_t v339 = *(_DWORD *)(a1[3] + 48) & 0x1FFFF;
            uint64_t v340 = (void *)(*(void *)a1[2] + 2080);
            goto LABEL_446;
          case '7':
            unint64_t v339 = *(void *)(a1[3] + 56) & 0x1FFFFLL;
            uint64_t v340 = (void *)(*(void *)a1[2] + 2104);
            goto LABEL_446;
          case '8':
            unint64_t v339 = *(_DWORD *)(a1[3] + 72) & 0x1FFFF;
            uint64_t v340 = (void *)(*(void *)a1[2] + 2128);
            goto LABEL_446;
          case '9':
            unint64_t v339 = *(_DWORD *)(a1[3] + 32) & 0x1FFFF;
            uint64_t v340 = (void *)(*(void *)a1[2] + 2152);
            goto LABEL_446;
          case ':':
            unint64_t v339 = *(unsigned __int16 *)(a1[3] + 76);
            uint64_t v340 = (void *)(*(void *)a1[2] + 2176);
            goto LABEL_446;
          case ';':
            unint64_t v339 = *(unsigned __int16 *)(a1[3] + 36);
            uint64_t v340 = (void *)(*(void *)a1[2] + 2200);
            goto LABEL_446;
          case '<':
            unint64_t v339 = *(unsigned __int16 *)(a1[3] + 84);
            uint64_t v340 = (void *)(*(void *)a1[2] + 2224);
            goto LABEL_446;
          case '=':
            unint64_t v339 = (*(unsigned __int16 *)(a1[3] + 44) | (*(unsigned __int8 *)(a1[3] + 46) << 16)) & 0x1FFFF;
            uint64_t v340 = (void *)(*(void *)a1[2] + 2248);
            goto LABEL_446;
          case '>':
            unint64_t v339 = *(unsigned __int16 *)(a1[3] + 86);
            uint64_t v340 = (void *)(*(void *)a1[2] + 2272);
            goto LABEL_446;
          case '?':
            unint64_t v339 = *(_DWORD *)(a1[3] + 52) & 0x1FFFF;
            uint64_t v340 = (void *)(*(void *)a1[2] + 2296);
            goto LABEL_446;
          case '@':
            unint64_t v339 = *(unsigned __int16 *)(a1[3] + 82);
            uint64_t v340 = (void *)(*(void *)a1[2] + 2320);
            goto LABEL_446;
          case 'A':
            unint64_t v339 = *(unsigned __int16 *)(a1[3] + 42);
            uint64_t v340 = (void *)(*(void *)a1[2] + 2344);
            goto LABEL_446;
          case 'B':
            unint64_t v339 = *(unsigned __int16 *)(a1[3] + 78);
            uint64_t v340 = (void *)(*(void *)a1[2] + 2368);
            goto LABEL_446;
          case 'C':
            unint64_t v339 = *(unsigned __int16 *)(a1[3] + 38);
            uint64_t v340 = (void *)(*(void *)a1[2] + 2392);
            goto LABEL_446;
          case 'D':
            unint64_t v339 = *(_DWORD *)(a1[3] + 64) & 0x3FFFF;
            uint64_t v340 = (void *)(*(void *)a1[2] + 2416);
            goto LABEL_446;
          case 'E':
            unint64_t v339 = ((*(unsigned int *)(a1[3] + 22) | ((unint64_t)*(unsigned __int8 *)(a1[3] + 26) << 32)) >> 16) & 0x3FFFF;
            uint64_t v340 = (void *)(*(void *)a1[2] + 2440);
            goto LABEL_446;
          case 'F':
            unint64_t v339 = *(_DWORD *)(a1[3] + 68) & 0x3FFFF;
            uint64_t v340 = (void *)(*(void *)a1[2] + 2464);
            goto LABEL_446;
          case 'G':
            unint64_t v339 = *(_DWORD *)(a1[3] + 28) & 0x3FFFF;
            uint64_t v340 = (void *)(*(void *)a1[2] + 2488);
LABEL_446:
            *(void *)(*v340 - 8) += v339;
            break;
          default:
            break;
        }
        --v337;
      }
      while (v337);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    int v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case '0':
            uint64_t v10 = a1[2];
            uint64_t v11 = *(void **)v10;
            uint64_t v12 = *(unsigned __int16 *)(a1[3] + 60);
            unint64_t v13 = *(char **)(*(void *)v10 + 1936);
            unint64_t v14 = *(void *)(*(void *)v10 + 1944);
            if ((unint64_t)v13 >= v14)
            {
              unint64_t v142 = (char *)v11[241];
              uint64_t v143 = (v13 - v142) >> 3;
              if ((unint64_t)(v143 + 1) >> 61) {
                goto LABEL_450;
              }
              unint64_t v144 = v14 - (void)v142;
              unint64_t v145 = (uint64_t)(v14 - (void)v142) >> 2;
              if (v145 <= v143 + 1) {
                unint64_t v145 = v143 + 1;
              }
              if (v144 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v146 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v146 = v145;
              }
              if (v146)
              {
                uint64_t v147 = (char *)sub_5714((uint64_t)(v11 + 243), v146);
                unint64_t v13 = (char *)v11[242];
                unint64_t v142 = (char *)v11[241];
              }
              else
              {
                uint64_t v147 = 0;
              }
              unint64_t v286 = &v147[8 * v143];
              *(void *)unint64_t v286 = v12;
              unint64_t v15 = v286 + 8;
              while (v13 != v142)
              {
                uint64_t v287 = *((void *)v13 - 1);
                v13 -= 8;
                *((void *)v286 - 1) = v287;
                v286 -= 8;
              }
              v11[241] = v286;
              v11[242] = v15;
              v11[243] = &v147[8 * v146];
              if (v142) {
                operator delete(v142);
              }
            }
            else
            {
              *(void *)unint64_t v13 = v12;
              unint64_t v15 = v13 + 8;
            }
            v11[242] = v15;
            break;
          case '1':
            uint64_t v16 = a1[2];
            uint64_t v17 = *(void **)v16;
            uint64_t v18 = *(unsigned __int16 *)(a1[3] + 22);
            unint64_t v19 = *(char **)(*(void *)v16 + 1960);
            unint64_t v20 = *(void *)(*(void *)v16 + 1968);
            if ((unint64_t)v19 >= v20)
            {
              unint64_t v148 = (char *)v17[244];
              uint64_t v149 = (v19 - v148) >> 3;
              if ((unint64_t)(v149 + 1) >> 61) {
                goto LABEL_450;
              }
              unint64_t v150 = v20 - (void)v148;
              unint64_t v151 = (uint64_t)(v20 - (void)v148) >> 2;
              if (v151 <= v149 + 1) {
                unint64_t v151 = v149 + 1;
              }
              if (v150 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v152 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v152 = v151;
              }
              if (v152)
              {
                uint64_t v153 = (char *)sub_5714((uint64_t)(v17 + 246), v152);
                unint64_t v19 = (char *)v17[245];
                unint64_t v148 = (char *)v17[244];
              }
              else
              {
                uint64_t v153 = 0;
              }
              unint64_t v288 = &v153[8 * v149];
              *(void *)unint64_t v288 = v18;
              uint64_t v21 = v288 + 8;
              while (v19 != v148)
              {
                uint64_t v289 = *((void *)v19 - 1);
                v19 -= 8;
                *((void *)v288 - 1) = v289;
                v288 -= 8;
              }
              v17[244] = v288;
              v17[245] = v21;
              v17[246] = &v153[8 * v152];
              if (v148) {
                operator delete(v148);
              }
            }
            else
            {
              *(void *)unint64_t v19 = v18;
              uint64_t v21 = v19 + 8;
            }
            v17[245] = v21;
            break;
          case '2':
            long long v22 = *(void **)a1[2];
            uint64_t v23 = *(_DWORD *)(a1[3] + 88) & 0x7FFFLL;
            uint64_t v24 = (uint64_t *)v22[248];
            unint64_t v25 = v22[249];
            if ((unint64_t)v24 >= v25)
            {
              unint64_t v154 = (uint64_t *)v22[247];
              uint64_t v155 = v24 - v154;
              if ((unint64_t)(v155 + 1) >> 61) {
                goto LABEL_450;
              }
              unint64_t v156 = v25 - (void)v154;
              unint64_t v157 = (uint64_t)(v25 - (void)v154) >> 2;
              if (v157 <= v155 + 1) {
                unint64_t v157 = v155 + 1;
              }
              if (v156 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v158 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v158 = v157;
              }
              if (v158)
              {
                uint64_t v159 = (char *)sub_5714((uint64_t)(v22 + 249), v158);
                uint64_t v24 = (uint64_t *)v22[248];
                unint64_t v154 = (uint64_t *)v22[247];
              }
              else
              {
                uint64_t v159 = 0;
              }
              unint64_t v290 = (uint64_t *)&v159[8 * v155];
              uint64_t *v290 = v23;
              uint64_t v26 = v290 + 1;
              while (v24 != v154)
              {
                uint64_t v291 = *--v24;
                *--unint64_t v290 = v291;
              }
              v22[247] = v290;
              v22[248] = v26;
              v22[249] = &v159[8 * v158];
              if (v154) {
                operator delete(v154);
              }
            }
            else
            {
              uint64_t *v24 = v23;
              uint64_t v26 = v24 + 1;
            }
            v22[248] = v26;
            break;
          case '3':
            uint64_t v27 = *(void **)a1[2];
            uint64_t v28 = *(void *)(a1[3] + 56) >> 17;
            unint64_t v29 = (char *)v27[251];
            unint64_t v30 = v27[252];
            if ((unint64_t)v29 >= v30)
            {
              unint64_t v160 = (char *)v27[250];
              uint64_t v161 = (v29 - v160) >> 3;
              if ((unint64_t)(v161 + 1) >> 61) {
                goto LABEL_450;
              }
              unint64_t v162 = v30 - (void)v160;
              unint64_t v163 = (uint64_t)(v30 - (void)v160) >> 2;
              if (v163 <= v161 + 1) {
                unint64_t v163 = v161 + 1;
              }
              if (v162 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v164 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v164 = v163;
              }
              if (v164)
              {
                uint64_t v165 = (char *)sub_5714((uint64_t)(v27 + 252), v164);
                unint64_t v29 = (char *)v27[251];
                unint64_t v160 = (char *)v27[250];
              }
              else
              {
                uint64_t v165 = 0;
              }
              uint64_t v292 = &v165[8 * v161];
              *(void *)uint64_t v292 = v28;
              uint64_t v31 = v292 + 8;
              while (v29 != v160)
              {
                uint64_t v293 = *((void *)v29 - 1);
                v29 -= 8;
                *((void *)v292 - 1) = v293;
                v292 -= 8;
              }
              v27[250] = v292;
              v27[251] = v31;
              v27[252] = &v165[8 * v164];
              if (v160) {
                operator delete(v160);
              }
            }
            else
            {
              *(void *)unint64_t v29 = v28;
              uint64_t v31 = v29 + 8;
            }
            v27[251] = v31;
            break;
          case '4':
            uint64_t v32 = a1[2];
            unint64_t v33 = *(void **)v32;
            uint64_t v34 = *(unsigned __int16 *)(a1[3] + 80);
            unint64_t v35 = *(char **)(*(void *)v32 + 2032);
            unint64_t v36 = *(void *)(*(void *)v32 + 2040);
            if ((unint64_t)v35 >= v36)
            {
              unint64_t v166 = (char *)v33[253];
              uint64_t v167 = (v35 - v166) >> 3;
              if ((unint64_t)(v167 + 1) >> 61) {
                goto LABEL_450;
              }
              unint64_t v168 = v36 - (void)v166;
              unint64_t v169 = (uint64_t)(v36 - (void)v166) >> 2;
              if (v169 <= v167 + 1) {
                unint64_t v169 = v167 + 1;
              }
              if (v168 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v170 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v170 = v169;
              }
              if (v170)
              {
                uint64_t v171 = (char *)sub_5714((uint64_t)(v33 + 255), v170);
                unint64_t v35 = (char *)v33[254];
                unint64_t v166 = (char *)v33[253];
              }
              else
              {
                uint64_t v171 = 0;
              }
              int v294 = &v171[8 * v167];
              *(void *)int v294 = v34;
              uint64_t v37 = v294 + 8;
              while (v35 != v166)
              {
                uint64_t v295 = *((void *)v35 - 1);
                v35 -= 8;
                *((void *)v294 - 1) = v295;
                v294 -= 8;
              }
              v33[253] = v294;
              v33[254] = v37;
              v33[255] = &v171[8 * v170];
              if (v166) {
                operator delete(v166);
              }
            }
            else
            {
              *(void *)unint64_t v35 = v34;
              uint64_t v37 = v35 + 8;
            }
            v33[254] = v37;
            break;
          case '5':
            uint64_t v38 = a1[2];
            unint64_t v39 = *(void **)v38;
            uint64_t v40 = *(unsigned __int16 *)(a1[3] + 40);
            uint64_t v41 = *(char **)(*(void *)v38 + 2056);
            unint64_t v42 = *(void *)(*(void *)v38 + 2064);
            if ((unint64_t)v41 >= v42)
            {
              unint64_t v172 = (char *)v39[256];
              uint64_t v173 = (v41 - v172) >> 3;
              if ((unint64_t)(v173 + 1) >> 61) {
                goto LABEL_450;
              }
              unint64_t v174 = v42 - (void)v172;
              unint64_t v175 = (uint64_t)(v42 - (void)v172) >> 2;
              if (v175 <= v173 + 1) {
                unint64_t v175 = v173 + 1;
              }
              if (v174 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v176 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v176 = v175;
              }
              if (v176)
              {
                uint64_t v177 = (char *)sub_5714((uint64_t)(v39 + 258), v176);
                uint64_t v41 = (char *)v39[257];
                unint64_t v172 = (char *)v39[256];
              }
              else
              {
                uint64_t v177 = 0;
              }
              unint64_t v296 = &v177[8 * v173];
              *(void *)unint64_t v296 = v40;
              unint64_t v43 = v296 + 8;
              while (v41 != v172)
              {
                uint64_t v297 = *((void *)v41 - 1);
                v41 -= 8;
                *((void *)v296 - 1) = v297;
                v296 -= 8;
              }
              v39[256] = v296;
              v39[257] = v43;
              v39[258] = &v177[8 * v176];
              if (v172) {
                operator delete(v172);
              }
            }
            else
            {
              *(void *)uint64_t v41 = v40;
              unint64_t v43 = v41 + 8;
            }
            v39[257] = v43;
            break;
          case '6':
            unint64_t v44 = *(void **)a1[2];
            uint64_t v45 = *(_DWORD *)(a1[3] + 48) & 0x1FFFFLL;
            uint64_t v46 = (uint64_t *)v44[260];
            unint64_t v47 = v44[261];
            if ((unint64_t)v46 >= v47)
            {
              unint64_t v178 = (uint64_t *)v44[259];
              uint64_t v179 = v46 - v178;
              if ((unint64_t)(v179 + 1) >> 61) {
                goto LABEL_450;
              }
              unint64_t v180 = v47 - (void)v178;
              unint64_t v181 = (uint64_t)(v47 - (void)v178) >> 2;
              if (v181 <= v179 + 1) {
                unint64_t v181 = v179 + 1;
              }
              if (v180 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v182 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v182 = v181;
              }
              if (v182)
              {
                uint64_t v183 = (char *)sub_5714((uint64_t)(v44 + 261), v182);
                uint64_t v46 = (uint64_t *)v44[260];
                unint64_t v178 = (uint64_t *)v44[259];
              }
              else
              {
                uint64_t v183 = 0;
              }
              uint64_t v298 = (uint64_t *)&v183[8 * v179];
              uint64_t *v298 = v45;
              unint64_t v48 = v298 + 1;
              while (v46 != v178)
              {
                uint64_t v299 = *--v46;
                *--uint64_t v298 = v299;
              }
              v44[259] = v298;
              v44[260] = v48;
              v44[261] = &v183[8 * v182];
              if (v178) {
                operator delete(v178);
              }
            }
            else
            {
              *uint64_t v46 = v45;
              unint64_t v48 = v46 + 1;
            }
            v44[260] = v48;
            break;
          case '7':
            uint64_t v49 = *(void **)a1[2];
            uint64_t v50 = *(void *)(a1[3] + 56) & 0x1FFFFLL;
            uint64_t v51 = (uint64_t *)v49[263];
            unint64_t v52 = v49[264];
            if ((unint64_t)v51 >= v52)
            {
              unint64_t v184 = (uint64_t *)v49[262];
              uint64_t v185 = v51 - v184;
              if ((unint64_t)(v185 + 1) >> 61) {
                goto LABEL_450;
              }
              unint64_t v186 = v52 - (void)v184;
              unint64_t v187 = (uint64_t)(v52 - (void)v184) >> 2;
              if (v187 <= v185 + 1) {
                unint64_t v187 = v185 + 1;
              }
              if (v186 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v188 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v188 = v187;
              }
              if (v188)
              {
                uint64_t v189 = (char *)sub_5714((uint64_t)(v49 + 264), v188);
                uint64_t v51 = (uint64_t *)v49[263];
                unint64_t v184 = (uint64_t *)v49[262];
              }
              else
              {
                uint64_t v189 = 0;
              }
              int v300 = (uint64_t *)&v189[8 * v185];
              uint64_t *v300 = v50;
              unint64_t v53 = v300 + 1;
              while (v51 != v184)
              {
                uint64_t v301 = *--v51;
                *--int v300 = v301;
              }
              v49[262] = v300;
              v49[263] = v53;
              v49[264] = &v189[8 * v188];
              if (v184) {
                operator delete(v184);
              }
            }
            else
            {
              *uint64_t v51 = v50;
              unint64_t v53 = v51 + 1;
            }
            v49[263] = v53;
            break;
          case '8':
            uint64_t v54 = *(void **)a1[2];
            uint64_t v55 = *(_DWORD *)(a1[3] + 72) & 0x1FFFFLL;
            uint64_t v56 = (uint64_t *)v54[266];
            unint64_t v57 = v54[267];
            if ((unint64_t)v56 >= v57)
            {
              unint64_t v190 = (uint64_t *)v54[265];
              uint64_t v191 = v56 - v190;
              if ((unint64_t)(v191 + 1) >> 61) {
                goto LABEL_450;
              }
              unint64_t v192 = v57 - (void)v190;
              unint64_t v193 = (uint64_t)(v57 - (void)v190) >> 2;
              if (v193 <= v191 + 1) {
                unint64_t v193 = v191 + 1;
              }
              if (v192 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v194 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v194 = v193;
              }
              if (v194)
              {
                uint64_t v195 = (char *)sub_5714((uint64_t)(v54 + 267), v194);
                uint64_t v56 = (uint64_t *)v54[266];
                unint64_t v190 = (uint64_t *)v54[265];
              }
              else
              {
                uint64_t v195 = 0;
              }
              uint64_t v302 = (uint64_t *)&v195[8 * v191];
              *uint64_t v302 = v55;
              unint64_t v58 = v302 + 1;
              while (v56 != v190)
              {
                uint64_t v303 = *--v56;
                *--uint64_t v302 = v303;
              }
              v54[265] = v302;
              v54[266] = v58;
              v54[267] = &v195[8 * v194];
              if (v190) {
                operator delete(v190);
              }
            }
            else
            {
              *uint64_t v56 = v55;
              unint64_t v58 = v56 + 1;
            }
            v54[266] = v58;
            break;
          case '9':
            uint64_t v59 = *(void **)a1[2];
            uint64_t v60 = *(_DWORD *)(a1[3] + 32) & 0x1FFFFLL;
            uint64_t v61 = (uint64_t *)v59[269];
            unint64_t v62 = v59[270];
            if ((unint64_t)v61 >= v62)
            {
              unint64_t v196 = (uint64_t *)v59[268];
              uint64_t v197 = v61 - v196;
              if ((unint64_t)(v197 + 1) >> 61) {
                goto LABEL_450;
              }
              unint64_t v198 = v62 - (void)v196;
              unint64_t v199 = (uint64_t)(v62 - (void)v196) >> 2;
              if (v199 <= v197 + 1) {
                unint64_t v199 = v197 + 1;
              }
              if (v198 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v200 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v200 = v199;
              }
              if (v200)
              {
                uint64_t v201 = (char *)sub_5714((uint64_t)(v59 + 270), v200);
                uint64_t v61 = (uint64_t *)v59[269];
                unint64_t v196 = (uint64_t *)v59[268];
              }
              else
              {
                uint64_t v201 = 0;
              }
              unint64_t v304 = (uint64_t *)&v201[8 * v197];
              *unint64_t v304 = v60;
              unint64_t v63 = v304 + 1;
              while (v61 != v196)
              {
                uint64_t v305 = *--v61;
                *--unint64_t v304 = v305;
              }
              v59[268] = v304;
              v59[269] = v63;
              v59[270] = &v201[8 * v200];
              if (v196) {
                operator delete(v196);
              }
            }
            else
            {
              *uint64_t v61 = v60;
              unint64_t v63 = v61 + 1;
            }
            v59[269] = v63;
            break;
          case ':':
            uint64_t v64 = a1[2];
            unint64_t v65 = *(void **)v64;
            uint64_t v66 = *(unsigned __int16 *)(a1[3] + 76);
            unint64_t v67 = *(char **)(*(void *)v64 + 2176);
            unint64_t v68 = *(void *)(*(void *)v64 + 2184);
            if ((unint64_t)v67 >= v68)
            {
              unint64_t v202 = (char *)v65[271];
              uint64_t v203 = (v67 - v202) >> 3;
              if ((unint64_t)(v203 + 1) >> 61) {
                goto LABEL_450;
              }
              unint64_t v204 = v68 - (void)v202;
              unint64_t v205 = (uint64_t)(v68 - (void)v202) >> 2;
              if (v205 <= v203 + 1) {
                unint64_t v205 = v203 + 1;
              }
              if (v204 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v206 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v206 = v205;
              }
              if (v206)
              {
                uint64_t v207 = (char *)sub_5714((uint64_t)(v65 + 273), v206);
                unint64_t v67 = (char *)v65[272];
                unint64_t v202 = (char *)v65[271];
              }
              else
              {
                uint64_t v207 = 0;
              }
              unint64_t v306 = &v207[8 * v203];
              *(void *)unint64_t v306 = v66;
              unint64_t v69 = v306 + 8;
              while (v67 != v202)
              {
                uint64_t v307 = *((void *)v67 - 1);
                v67 -= 8;
                *((void *)v306 - 1) = v307;
                v306 -= 8;
              }
              v65[271] = v306;
              v65[272] = v69;
              v65[273] = &v207[8 * v206];
              if (v202) {
                operator delete(v202);
              }
            }
            else
            {
              *(void *)unint64_t v67 = v66;
              unint64_t v69 = v67 + 8;
            }
            v65[272] = v69;
            break;
          case ';':
            uint64_t v70 = a1[2];
            uint64_t v71 = *(void **)v70;
            uint64_t v72 = *(unsigned __int16 *)(a1[3] + 36);
            unint64_t v73 = *(char **)(*(void *)v70 + 2200);
            unint64_t v74 = *(void *)(*(void *)v70 + 2208);
            if ((unint64_t)v73 >= v74)
            {
              unint64_t v208 = (char *)v71[274];
              uint64_t v209 = (v73 - v208) >> 3;
              if ((unint64_t)(v209 + 1) >> 61) {
                goto LABEL_450;
              }
              unint64_t v210 = v74 - (void)v208;
              unint64_t v211 = (uint64_t)(v74 - (void)v208) >> 2;
              if (v211 <= v209 + 1) {
                unint64_t v211 = v209 + 1;
              }
              if (v210 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v212 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v212 = v211;
              }
              if (v212)
              {
                uint64_t v213 = (char *)sub_5714((uint64_t)(v71 + 276), v212);
                unint64_t v73 = (char *)v71[275];
                unint64_t v208 = (char *)v71[274];
              }
              else
              {
                uint64_t v213 = 0;
              }
              long long v308 = &v213[8 * v209];
              *(void *)long long v308 = v72;
              unint64_t v75 = v308 + 8;
              while (v73 != v208)
              {
                uint64_t v309 = *((void *)v73 - 1);
                v73 -= 8;
                *((void *)v308 - 1) = v309;
                v308 -= 8;
              }
              v71[274] = v308;
              v71[275] = v75;
              v71[276] = &v213[8 * v212];
              if (v208) {
                operator delete(v208);
              }
            }
            else
            {
              *(void *)unint64_t v73 = v72;
              unint64_t v75 = v73 + 8;
            }
            v71[275] = v75;
            break;
          case '<':
            uint64_t v76 = a1[2];
            int v77 = *(void **)v76;
            uint64_t v78 = *(unsigned __int16 *)(a1[3] + 84);
            uint64_t v79 = *(char **)(*(void *)v76 + 2224);
            unint64_t v80 = *(void *)(*(void *)v76 + 2232);
            if ((unint64_t)v79 >= v80)
            {
              unint64_t v214 = (char *)v77[277];
              uint64_t v215 = (v79 - v214) >> 3;
              if ((unint64_t)(v215 + 1) >> 61) {
                goto LABEL_450;
              }
              unint64_t v216 = v80 - (void)v214;
              unint64_t v217 = (uint64_t)(v80 - (void)v214) >> 2;
              if (v217 <= v215 + 1) {
                unint64_t v217 = v215 + 1;
              }
              if (v216 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v218 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v218 = v217;
              }
              if (v218)
              {
                uint64_t v219 = (char *)sub_5714((uint64_t)(v77 + 279), v218);
                uint64_t v79 = (char *)v77[278];
                unint64_t v214 = (char *)v77[277];
              }
              else
              {
                uint64_t v219 = 0;
              }
              unint64_t v310 = &v219[8 * v215];
              *(void *)unint64_t v310 = v78;
              uint64_t v81 = v310 + 8;
              while (v79 != v214)
              {
                uint64_t v311 = *((void *)v79 - 1);
                v79 -= 8;
                *((void *)v310 - 1) = v311;
                v310 -= 8;
              }
              v77[277] = v310;
              v77[278] = v81;
              v77[279] = &v219[8 * v218];
              if (v214) {
                operator delete(v214);
              }
            }
            else
            {
              *(void *)uint64_t v79 = v78;
              uint64_t v81 = v79 + 8;
            }
            v77[278] = v81;
            break;
          case '=':
            int v82 = *(void **)a1[2];
            uint64_t v83 = (*(unsigned __int16 *)(a1[3] + 44) | (*(unsigned __int8 *)(a1[3] + 46) << 16)) & 0x1FFFFLL;
            unint64_t v84 = (uint64_t *)v82[281];
            unint64_t v85 = v82[282];
            if ((unint64_t)v84 >= v85)
            {
              unint64_t v220 = (uint64_t *)v82[280];
              uint64_t v221 = v84 - v220;
              if ((unint64_t)(v221 + 1) >> 61) {
                goto LABEL_450;
              }
              unint64_t v222 = v85 - (void)v220;
              unint64_t v223 = (uint64_t)(v85 - (void)v220) >> 2;
              if (v223 <= v221 + 1) {
                unint64_t v223 = v221 + 1;
              }
              if (v222 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v224 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v224 = v223;
              }
              if (v224)
              {
                uint64_t v225 = (char *)sub_5714((uint64_t)(v82 + 282), v224);
                unint64_t v84 = (uint64_t *)v82[281];
                unint64_t v220 = (uint64_t *)v82[280];
              }
              else
              {
                uint64_t v225 = 0;
              }
              unint64_t v312 = (uint64_t *)&v225[8 * v221];
              *unint64_t v312 = v83;
              uint64_t v86 = v312 + 1;
              while (v84 != v220)
              {
                uint64_t v313 = *--v84;
                *--unint64_t v312 = v313;
              }
              v82[280] = v312;
              v82[281] = v86;
              v82[282] = &v225[8 * v224];
              if (v220) {
                operator delete(v220);
              }
            }
            else
            {
              *unint64_t v84 = v83;
              uint64_t v86 = v84 + 1;
            }
            v82[281] = v86;
            break;
          case '>':
            uint64_t v87 = a1[2];
            unint64_t v88 = *(void **)v87;
            uint64_t v89 = *(unsigned __int16 *)(a1[3] + 86);
            unint64_t v90 = *(char **)(*(void *)v87 + 2272);
            unint64_t v91 = *(void *)(*(void *)v87 + 2280);
            if ((unint64_t)v90 >= v91)
            {
              unint64_t v226 = (char *)v88[283];
              uint64_t v227 = (v90 - v226) >> 3;
              if ((unint64_t)(v227 + 1) >> 61) {
                goto LABEL_450;
              }
              unint64_t v228 = v91 - (void)v226;
              unint64_t v229 = (uint64_t)(v91 - (void)v226) >> 2;
              if (v229 <= v227 + 1) {
                unint64_t v229 = v227 + 1;
              }
              if (v228 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v230 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v230 = v229;
              }
              if (v230)
              {
                uint64_t v231 = (char *)sub_5714((uint64_t)(v88 + 285), v230);
                unint64_t v90 = (char *)v88[284];
                unint64_t v226 = (char *)v88[283];
              }
              else
              {
                uint64_t v231 = 0;
              }
              unint64_t v314 = &v231[8 * v227];
              *(void *)unint64_t v314 = v89;
              unint64_t v92 = v314 + 8;
              while (v90 != v226)
              {
                uint64_t v315 = *((void *)v90 - 1);
                v90 -= 8;
                *((void *)v314 - 1) = v315;
                v314 -= 8;
              }
              v88[283] = v314;
              v88[284] = v92;
              v88[285] = &v231[8 * v230];
              if (v226) {
                operator delete(v226);
              }
            }
            else
            {
              *(void *)unint64_t v90 = v89;
              unint64_t v92 = v90 + 8;
            }
            v88[284] = v92;
            break;
          case '?':
            unint64_t v93 = *(void **)a1[2];
            uint64_t v94 = *(_DWORD *)(a1[3] + 52) & 0x1FFFFLL;
            uint64_t v95 = (uint64_t *)v93[287];
            unint64_t v96 = v93[288];
            if ((unint64_t)v95 >= v96)
            {
              unint64_t v232 = (uint64_t *)v93[286];
              uint64_t v233 = v95 - v232;
              if ((unint64_t)(v233 + 1) >> 61) {
                goto LABEL_450;
              }
              unint64_t v234 = v96 - (void)v232;
              unint64_t v235 = (uint64_t)(v96 - (void)v232) >> 2;
              if (v235 <= v233 + 1) {
                unint64_t v235 = v233 + 1;
              }
              if (v234 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v236 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v236 = v235;
              }
              if (v236)
              {
                uint64_t v237 = (char *)sub_5714((uint64_t)(v93 + 288), v236);
                uint64_t v95 = (uint64_t *)v93[287];
                unint64_t v232 = (uint64_t *)v93[286];
              }
              else
              {
                uint64_t v237 = 0;
              }
              unint64_t v316 = (uint64_t *)&v237[8 * v233];
              *unint64_t v316 = v94;
              unint64_t v97 = v316 + 1;
              while (v95 != v232)
              {
                uint64_t v317 = *--v95;
                *--unint64_t v316 = v317;
              }
              v93[286] = v316;
              v93[287] = v97;
              v93[288] = &v237[8 * v236];
              if (v232) {
                operator delete(v232);
              }
            }
            else
            {
              *uint64_t v95 = v94;
              unint64_t v97 = v95 + 1;
            }
            v93[287] = v97;
            break;
          case '@':
            uint64_t v98 = a1[2];
            unint64_t v99 = *(void **)v98;
            uint64_t v100 = *(unsigned __int16 *)(a1[3] + 82);
            uint64_t v101 = *(char **)(*(void *)v98 + 2320);
            unint64_t v102 = *(void *)(*(void *)v98 + 2328);
            if ((unint64_t)v101 >= v102)
            {
              unint64_t v238 = (char *)v99[289];
              uint64_t v239 = (v101 - v238) >> 3;
              if ((unint64_t)(v239 + 1) >> 61) {
                goto LABEL_450;
              }
              unint64_t v240 = v102 - (void)v238;
              unint64_t v241 = (uint64_t)(v102 - (void)v238) >> 2;
              if (v241 <= v239 + 1) {
                unint64_t v241 = v239 + 1;
              }
              if (v240 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v242 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v242 = v241;
              }
              if (v242)
              {
                uint64_t v243 = (char *)sub_5714((uint64_t)(v99 + 291), v242);
                uint64_t v101 = (char *)v99[290];
                unint64_t v238 = (char *)v99[289];
              }
              else
              {
                uint64_t v243 = 0;
              }
              uint64_t v318 = &v243[8 * v239];
              *(void *)uint64_t v318 = v100;
              unint64_t v103 = v318 + 8;
              while (v101 != v238)
              {
                uint64_t v319 = *((void *)v101 - 1);
                v101 -= 8;
                *((void *)v318 - 1) = v319;
                v318 -= 8;
              }
              v99[289] = v318;
              v99[290] = v103;
              v99[291] = &v243[8 * v242];
              if (v238) {
                operator delete(v238);
              }
            }
            else
            {
              *(void *)uint64_t v101 = v100;
              unint64_t v103 = v101 + 8;
            }
            v99[290] = v103;
            break;
          case 'A':
            uint64_t v104 = a1[2];
            uint64_t v105 = *(void **)v104;
            uint64_t v106 = *(unsigned __int16 *)(a1[3] + 42);
            uint64_t v107 = *(char **)(*(void *)v104 + 2344);
            unint64_t v108 = *(void *)(*(void *)v104 + 2352);
            if ((unint64_t)v107 >= v108)
            {
              unint64_t v244 = (char *)v105[292];
              uint64_t v245 = (v107 - v244) >> 3;
              if ((unint64_t)(v245 + 1) >> 61) {
                goto LABEL_450;
              }
              unint64_t v246 = v108 - (void)v244;
              unint64_t v247 = (uint64_t)(v108 - (void)v244) >> 2;
              if (v247 <= v245 + 1) {
                unint64_t v247 = v245 + 1;
              }
              if (v246 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v248 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v248 = v247;
              }
              if (v248)
              {
                uint64_t v249 = (char *)sub_5714((uint64_t)(v105 + 294), v248);
                uint64_t v107 = (char *)v105[293];
                unint64_t v244 = (char *)v105[292];
              }
              else
              {
                uint64_t v249 = 0;
              }
              uint64_t v320 = &v249[8 * v245];
              *(void *)uint64_t v320 = v106;
              unint64_t v109 = v320 + 8;
              while (v107 != v244)
              {
                uint64_t v321 = *((void *)v107 - 1);
                v107 -= 8;
                *((void *)v320 - 1) = v321;
                v320 -= 8;
              }
              v105[292] = v320;
              v105[293] = v109;
              v105[294] = &v249[8 * v248];
              if (v244) {
                operator delete(v244);
              }
            }
            else
            {
              *(void *)uint64_t v107 = v106;
              unint64_t v109 = v107 + 8;
            }
            v105[293] = v109;
            break;
          case 'B':
            uint64_t v110 = a1[2];
            uint64_t v111 = *(void **)v110;
            uint64_t v112 = *(unsigned __int16 *)(a1[3] + 78);
            unint64_t v113 = *(char **)(*(void *)v110 + 2368);
            unint64_t v114 = *(void *)(*(void *)v110 + 2376);
            if ((unint64_t)v113 >= v114)
            {
              unint64_t v250 = (char *)v111[295];
              uint64_t v251 = (v113 - v250) >> 3;
              if ((unint64_t)(v251 + 1) >> 61) {
                goto LABEL_450;
              }
              unint64_t v252 = v114 - (void)v250;
              unint64_t v253 = (uint64_t)(v114 - (void)v250) >> 2;
              if (v253 <= v251 + 1) {
                unint64_t v253 = v251 + 1;
              }
              if (v252 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v254 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v254 = v253;
              }
              if (v254)
              {
                uint64_t v255 = (char *)sub_5714((uint64_t)(v111 + 297), v254);
                unint64_t v113 = (char *)v111[296];
                unint64_t v250 = (char *)v111[295];
              }
              else
              {
                uint64_t v255 = 0;
              }
              int v322 = &v255[8 * v251];
              *(void *)int v322 = v112;
              unint64_t v115 = v322 + 8;
              while (v113 != v250)
              {
                uint64_t v323 = *((void *)v113 - 1);
                v113 -= 8;
                *((void *)v322 - 1) = v323;
                v322 -= 8;
              }
              v111[295] = v322;
              v111[296] = v115;
              v111[297] = &v255[8 * v254];
              if (v250) {
                operator delete(v250);
              }
            }
            else
            {
              *(void *)unint64_t v113 = v112;
              unint64_t v115 = v113 + 8;
            }
            v111[296] = v115;
            break;
          case 'C':
            uint64_t v116 = a1[2];
            uint64_t v117 = *(void **)v116;
            uint64_t v118 = *(unsigned __int16 *)(a1[3] + 38);
            unint64_t v119 = *(char **)(*(void *)v116 + 2392);
            unint64_t v120 = *(void *)(*(void *)v116 + 2400);
            if ((unint64_t)v119 >= v120)
            {
              unint64_t v256 = (char *)v117[298];
              uint64_t v257 = (v119 - v256) >> 3;
              if ((unint64_t)(v257 + 1) >> 61) {
                goto LABEL_450;
              }
              unint64_t v258 = v120 - (void)v256;
              unint64_t v259 = (uint64_t)(v120 - (void)v256) >> 2;
              if (v259 <= v257 + 1) {
                unint64_t v259 = v257 + 1;
              }
              if (v258 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v260 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v260 = v259;
              }
              if (v260)
              {
                uint64_t v261 = (char *)sub_5714((uint64_t)(v117 + 300), v260);
                unint64_t v119 = (char *)v117[299];
                unint64_t v256 = (char *)v117[298];
              }
              else
              {
                uint64_t v261 = 0;
              }
              uint64_t v324 = &v261[8 * v257];
              *(void *)uint64_t v324 = v118;
              unint64_t v121 = v324 + 8;
              while (v119 != v256)
              {
                uint64_t v325 = *((void *)v119 - 1);
                v119 -= 8;
                *((void *)v324 - 1) = v325;
                v324 -= 8;
              }
              v117[298] = v324;
              v117[299] = v121;
              v117[300] = &v261[8 * v260];
              if (v256) {
                operator delete(v256);
              }
            }
            else
            {
              *(void *)unint64_t v119 = v118;
              unint64_t v121 = v119 + 8;
            }
            v117[299] = v121;
            break;
          case 'D':
            unint64_t v122 = *(void **)a1[2];
            uint64_t v123 = *(_DWORD *)(a1[3] + 64) & 0x3FFFFLL;
            unint64_t v124 = (uint64_t *)v122[302];
            unint64_t v125 = v122[303];
            if ((unint64_t)v124 >= v125)
            {
              unint64_t v262 = (uint64_t *)v122[301];
              uint64_t v263 = v124 - v262;
              if ((unint64_t)(v263 + 1) >> 61) {
                goto LABEL_450;
              }
              unint64_t v264 = v125 - (void)v262;
              unint64_t v265 = (uint64_t)(v125 - (void)v262) >> 2;
              if (v265 <= v263 + 1) {
                unint64_t v265 = v263 + 1;
              }
              if (v264 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v266 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v266 = v265;
              }
              if (v266)
              {
                uint64_t v267 = (char *)sub_5714((uint64_t)(v122 + 303), v266);
                unint64_t v124 = (uint64_t *)v122[302];
                unint64_t v262 = (uint64_t *)v122[301];
              }
              else
              {
                uint64_t v267 = 0;
              }
              unint64_t v326 = (uint64_t *)&v267[8 * v263];
              uint64_t *v326 = v123;
              unint64_t v126 = v326 + 1;
              while (v124 != v262)
              {
                uint64_t v327 = *--v124;
                *--unint64_t v326 = v327;
              }
              v122[301] = v326;
              v122[302] = v126;
              v122[303] = &v267[8 * v266];
              if (v262) {
                operator delete(v262);
              }
            }
            else
            {
              uint64_t *v124 = v123;
              unint64_t v126 = v124 + 1;
            }
            v122[302] = v126;
            break;
          case 'E':
            unint64_t v127 = *(void **)a1[2];
            unint64_t v128 = ((*(unsigned int *)(a1[3] + 22) | ((unint64_t)*(unsigned __int8 *)(a1[3] + 26) << 32)) >> 16) & 0x3FFFF;
            uint64_t v129 = (unint64_t *)v127[305];
            unint64_t v130 = v127[306];
            if ((unint64_t)v129 >= v130)
            {
              uint64_t v268 = (unint64_t *)v127[304];
              uint64_t v269 = v129 - v268;
              if ((unint64_t)(v269 + 1) >> 61) {
                goto LABEL_450;
              }
              unint64_t v270 = v130 - (void)v268;
              unint64_t v271 = (uint64_t)(v130 - (void)v268) >> 2;
              if (v271 <= v269 + 1) {
                unint64_t v271 = v269 + 1;
              }
              if (v270 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v272 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v272 = v271;
              }
              if (v272)
              {
                unint64_t v273 = (char *)sub_5714((uint64_t)(v127 + 306), v272);
                uint64_t v129 = (unint64_t *)v127[305];
                uint64_t v268 = (unint64_t *)v127[304];
              }
              else
              {
                unint64_t v273 = 0;
              }
              uint64_t v328 = (unint64_t *)&v273[8 * v269];
              *uint64_t v328 = v128;
              unint64_t v131 = v328 + 1;
              while (v129 != v268)
              {
                unint64_t v329 = *--v129;
                *--uint64_t v328 = v329;
              }
              v127[304] = v328;
              v127[305] = v131;
              v127[306] = &v273[8 * v272];
              if (v268) {
                operator delete(v268);
              }
            }
            else
            {
              *uint64_t v129 = v128;
              unint64_t v131 = v129 + 1;
            }
            v127[305] = v131;
            break;
          case 'F':
            unint64_t v132 = *(void **)a1[2];
            uint64_t v133 = *(_DWORD *)(a1[3] + 68) & 0x3FFFFLL;
            unint64_t v134 = (uint64_t *)v132[308];
            unint64_t v135 = v132[309];
            if ((unint64_t)v134 >= v135)
            {
              int v274 = (uint64_t *)v132[307];
              uint64_t v275 = v134 - v274;
              if ((unint64_t)(v275 + 1) >> 61) {
                goto LABEL_450;
              }
              unint64_t v276 = v135 - (void)v274;
              unint64_t v277 = (uint64_t)(v135 - (void)v274) >> 2;
              if (v277 <= v275 + 1) {
                unint64_t v277 = v275 + 1;
              }
              if (v276 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v278 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v278 = v277;
              }
              if (v278)
              {
                unint64_t v279 = (char *)sub_5714((uint64_t)(v132 + 309), v278);
                unint64_t v134 = (uint64_t *)v132[308];
                int v274 = (uint64_t *)v132[307];
              }
              else
              {
                unint64_t v279 = 0;
              }
              unint64_t v330 = (uint64_t *)&v279[8 * v275];
              *unint64_t v330 = v133;
              unint64_t v136 = v330 + 1;
              while (v134 != v274)
              {
                uint64_t v331 = *--v134;
                *--unint64_t v330 = v331;
              }
              v132[307] = v330;
              v132[308] = v136;
              v132[309] = &v279[8 * v278];
              if (v274) {
                operator delete(v274);
              }
            }
            else
            {
              *unint64_t v134 = v133;
              unint64_t v136 = v134 + 1;
            }
            v132[308] = v136;
            break;
          case 'G':
            unint64_t v137 = *(void **)a1[2];
            uint64_t v138 = *(_DWORD *)(a1[3] + 28) & 0x3FFFFLL;
            unint64_t v139 = (uint64_t *)v137[311];
            unint64_t v140 = v137[312];
            if ((unint64_t)v139 >= v140)
            {
              unint64_t v280 = (uint64_t *)v137[310];
              uint64_t v281 = v139 - v280;
              if ((unint64_t)(v281 + 1) >> 61) {
LABEL_450:
              }
                sub_566C();
              unint64_t v282 = v140 - (void)v280;
              unint64_t v283 = (uint64_t)(v140 - (void)v280) >> 2;
              if (v283 <= v281 + 1) {
                unint64_t v283 = v281 + 1;
              }
              if (v282 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v284 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v284 = v283;
              }
              if (v284)
              {
                uint64_t v285 = (char *)sub_5714((uint64_t)(v137 + 312), v284);
                unint64_t v139 = (uint64_t *)v137[311];
                unint64_t v280 = (uint64_t *)v137[310];
              }
              else
              {
                uint64_t v285 = 0;
              }
              unint64_t v332 = (uint64_t *)&v285[8 * v281];
              *unint64_t v332 = v138;
              uint64_t v141 = v332 + 1;
              while (v139 != v280)
              {
                uint64_t v333 = *--v139;
                *--unint64_t v332 = v333;
              }
              v137[310] = v332;
              v137[311] = v141;
              v137[312] = &v285[8 * v284];
              if (v280) {
                operator delete(v280);
              }
            }
            else
            {
              *unint64_t v139 = v138;
              uint64_t v141 = v139 + 1;
            }
            v137[311] = v141;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_E63CC(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    unint64_t v260 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    unint64_t v259 = *v260;
    uint64_t v261 = (char *)v260[1] - (char *)*v260;
    if (v261)
    {
      unint64_t v262 = v261 >> 2;
      if (v262 <= 1) {
        unint64_t v262 = 1;
      }
      do
      {
        int v263 = *v259++;
        switch(v263)
        {
          case 29:
            unint64_t v264 = *(unsigned __int16 *)(a1[3] + 64);
            unint64_t v265 = (void *)(*(void *)a1[2] + 1480);
            goto LABEL_356;
          case 30:
            unint64_t v264 = *(_DWORD *)(a1[3] + 32) & 0x3FFFF;
            unint64_t v265 = (void *)(*(void *)a1[2] + 1504);
            goto LABEL_356;
          case 31:
            unint64_t v264 = *(_DWORD *)(a1[3] + 28) & 0x3FFFF;
            unint64_t v265 = (void *)(*(void *)a1[2] + 1528);
            goto LABEL_356;
          case 32:
            unint64_t v264 = *(_DWORD *)(a1[3] + 24) & 0x3FFFF;
            unint64_t v265 = (void *)(*(void *)a1[2] + 1552);
            goto LABEL_356;
          case 33:
            unint64_t v264 = ((unint64_t)*(unsigned int *)(a1[3] + 20) >> 1) & 0x3FFFF;
            unint64_t v265 = (void *)(*(void *)a1[2] + 1576);
            goto LABEL_356;
          case 34:
            unint64_t v264 = *(_DWORD *)(a1[3] + 40) & 0x3FFFF;
            unint64_t v265 = (void *)(*(void *)a1[2] + 1600);
            goto LABEL_356;
          case 35:
            unint64_t v264 = *(_DWORD *)(a1[3] + 36) & 0x3FFFF;
            unint64_t v265 = (void *)(*(void *)a1[2] + 1624);
            goto LABEL_356;
          case 36:
            unint64_t v264 = *(unsigned __int16 *)(a1[3] + 66);
            unint64_t v265 = (void *)(*(void *)a1[2] + 1648);
            goto LABEL_356;
          case 37:
            unint64_t v264 = *(_WORD *)(a1[3] + 48) & 0x7FFF;
            unint64_t v265 = (void *)(*(void *)a1[2] + 1672);
            goto LABEL_356;
          case 38:
            unint64_t v264 = *(_WORD *)(a1[3] + 44) & 0x7FFF;
            unint64_t v265 = (void *)(*(void *)a1[2] + 1696);
            goto LABEL_356;
          case 39:
            unint64_t v264 = *(_WORD *)(a1[3] + 50) & 0x7FFF;
            unint64_t v265 = (void *)(*(void *)a1[2] + 1720);
            goto LABEL_356;
          case 40:
            unint64_t v264 = *(_WORD *)(a1[3] + 46) & 0x7FFF;
            unint64_t v265 = (void *)(*(void *)a1[2] + 1744);
            goto LABEL_356;
          case 41:
            unint64_t v264 = *(_DWORD *)(a1[3] + 40) & 0x3FFFF;
            unint64_t v265 = (void *)(*(void *)a1[2] + 1768);
            goto LABEL_356;
          case 42:
            unint64_t v264 = *(_DWORD *)(a1[3] + 36) & 0x3FFFF;
            unint64_t v265 = (void *)(*(void *)a1[2] + 1792);
            goto LABEL_356;
          case 43:
            unint64_t v264 = *(_DWORD *)(a1[3] + 32) & 0x3FFFF;
            unint64_t v265 = (void *)(*(void *)a1[2] + 1816);
            goto LABEL_356;
          case 44:
            unint64_t v264 = *(_DWORD *)(a1[3] + 28) & 0x3FFFF;
            unint64_t v265 = (void *)(*(void *)a1[2] + 1840);
            goto LABEL_356;
          case 45:
            unint64_t v264 = *(_DWORD *)(a1[3] + 52) & 0xFFFFF;
            unint64_t v265 = (void *)(*(void *)a1[2] + 1864);
            goto LABEL_356;
          case 46:
            unint64_t v264 = *(_DWORD *)(a1[3] + 60) & 0x3FFFF;
            unint64_t v265 = (void *)(*(void *)a1[2] + 1888);
            goto LABEL_356;
          case 47:
            unint64_t v264 = *(_DWORD *)(a1[3] + 56) & 0xFFFFF;
            unint64_t v265 = (void *)(*(void *)a1[2] + 1912);
LABEL_356:
            *(void *)(*v265 - 8) += v264;
            break;
          default:
            break;
        }
        --v262;
      }
      while (v262);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    int v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0x1D:
            uint64_t v10 = a1[2];
            uint64_t v11 = *(void **)v10;
            uint64_t v12 = *(unsigned __int16 *)(a1[3] + 64);
            unint64_t v13 = *(char **)(*(void *)v10 + 1480);
            unint64_t v14 = *(void *)(*(void *)v10 + 1488);
            if ((unint64_t)v13 >= v14)
            {
              uint64_t v107 = (char *)v11[184];
              uint64_t v108 = (v13 - v107) >> 3;
              if ((unint64_t)(v108 + 1) >> 61) {
                goto LABEL_360;
              }
              unint64_t v109 = v14 - (void)v107;
              unint64_t v110 = (uint64_t)(v14 - (void)v107) >> 2;
              if (v110 <= v108 + 1) {
                unint64_t v110 = v108 + 1;
              }
              if (v109 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v111 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v111 = v110;
              }
              if (v111)
              {
                uint64_t v112 = (char *)sub_5714((uint64_t)(v11 + 186), v111);
                unint64_t v13 = (char *)v11[185];
                uint64_t v107 = (char *)v11[184];
              }
              else
              {
                uint64_t v112 = 0;
              }
              uint64_t v221 = &v112[8 * v108];
              *(void *)uint64_t v221 = v12;
              unint64_t v15 = v221 + 8;
              while (v13 != v107)
              {
                uint64_t v222 = *((void *)v13 - 1);
                v13 -= 8;
                *((void *)v221 - 1) = v222;
                v221 -= 8;
              }
              v11[184] = v221;
              v11[185] = v15;
              v11[186] = &v112[8 * v111];
              if (v107) {
                operator delete(v107);
              }
            }
            else
            {
              *(void *)unint64_t v13 = v12;
              unint64_t v15 = v13 + 8;
            }
            v11[185] = v15;
            break;
          case 0x1E:
            uint64_t v16 = *(void **)a1[2];
            uint64_t v17 = *(_DWORD *)(a1[3] + 32) & 0x3FFFFLL;
            uint64_t v18 = (uint64_t *)v16[188];
            unint64_t v19 = v16[189];
            if ((unint64_t)v18 >= v19)
            {
              unint64_t v113 = (uint64_t *)v16[187];
              uint64_t v114 = v18 - v113;
              if ((unint64_t)(v114 + 1) >> 61) {
                goto LABEL_360;
              }
              unint64_t v115 = v19 - (void)v113;
              unint64_t v116 = (uint64_t)(v19 - (void)v113) >> 2;
              if (v116 <= v114 + 1) {
                unint64_t v116 = v114 + 1;
              }
              if (v115 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v117 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v117 = v116;
              }
              if (v117)
              {
                uint64_t v118 = (char *)sub_5714((uint64_t)(v16 + 189), v117);
                uint64_t v18 = (uint64_t *)v16[188];
                unint64_t v113 = (uint64_t *)v16[187];
              }
              else
              {
                uint64_t v118 = 0;
              }
              unint64_t v223 = (uint64_t *)&v118[8 * v114];
              *unint64_t v223 = v17;
              unint64_t v20 = v223 + 1;
              while (v18 != v113)
              {
                uint64_t v224 = *--v18;
                *--unint64_t v223 = v224;
              }
              v16[187] = v223;
              v16[188] = v20;
              v16[189] = &v118[8 * v117];
              if (v113) {
                operator delete(v113);
              }
            }
            else
            {
              *uint64_t v18 = v17;
              unint64_t v20 = v18 + 1;
            }
            v16[188] = v20;
            break;
          case 0x1F:
            uint64_t v21 = *(void **)a1[2];
            uint64_t v22 = *(_DWORD *)(a1[3] + 28) & 0x3FFFFLL;
            uint64_t v23 = (uint64_t *)v21[191];
            unint64_t v24 = v21[192];
            if ((unint64_t)v23 >= v24)
            {
              unint64_t v119 = (uint64_t *)v21[190];
              uint64_t v120 = v23 - v119;
              if ((unint64_t)(v120 + 1) >> 61) {
                goto LABEL_360;
              }
              unint64_t v121 = v24 - (void)v119;
              unint64_t v122 = (uint64_t)(v24 - (void)v119) >> 2;
              if (v122 <= v120 + 1) {
                unint64_t v122 = v120 + 1;
              }
              if (v121 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v123 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v123 = v122;
              }
              if (v123)
              {
                unint64_t v124 = (char *)sub_5714((uint64_t)(v21 + 192), v123);
                uint64_t v23 = (uint64_t *)v21[191];
                unint64_t v119 = (uint64_t *)v21[190];
              }
              else
              {
                unint64_t v124 = 0;
              }
              uint64_t v225 = (uint64_t *)&v124[8 * v120];
              *uint64_t v225 = v22;
              unint64_t v25 = v225 + 1;
              while (v23 != v119)
              {
                uint64_t v226 = *--v23;
                *--uint64_t v225 = v226;
              }
              v21[190] = v225;
              v21[191] = v25;
              v21[192] = &v124[8 * v123];
              if (v119) {
                operator delete(v119);
              }
            }
            else
            {
              *uint64_t v23 = v22;
              unint64_t v25 = v23 + 1;
            }
            v21[191] = v25;
            break;
          case 0x20:
            uint64_t v26 = *(void **)a1[2];
            uint64_t v27 = *(_DWORD *)(a1[3] + 24) & 0x3FFFFLL;
            uint64_t v28 = (uint64_t *)v26[194];
            unint64_t v29 = v26[195];
            if ((unint64_t)v28 >= v29)
            {
              unint64_t v125 = (uint64_t *)v26[193];
              uint64_t v126 = v28 - v125;
              if ((unint64_t)(v126 + 1) >> 61) {
                goto LABEL_360;
              }
              unint64_t v127 = v29 - (void)v125;
              unint64_t v128 = (uint64_t)(v29 - (void)v125) >> 2;
              if (v128 <= v126 + 1) {
                unint64_t v128 = v126 + 1;
              }
              if (v127 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v129 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v129 = v128;
              }
              if (v129)
              {
                unint64_t v130 = (char *)sub_5714((uint64_t)(v26 + 195), v129);
                uint64_t v28 = (uint64_t *)v26[194];
                unint64_t v125 = (uint64_t *)v26[193];
              }
              else
              {
                unint64_t v130 = 0;
              }
              uint64_t v227 = (uint64_t *)&v130[8 * v126];
              uint64_t *v227 = v27;
              unint64_t v30 = v227 + 1;
              while (v28 != v125)
              {
                uint64_t v228 = *--v28;
                *--uint64_t v227 = v228;
              }
              v26[193] = v227;
              v26[194] = v30;
              v26[195] = &v130[8 * v129];
              if (v125) {
                operator delete(v125);
              }
            }
            else
            {
              *uint64_t v28 = v27;
              unint64_t v30 = v28 + 1;
            }
            v26[194] = v30;
            break;
          case 0x21:
            uint64_t v31 = *(void **)a1[2];
            unint64_t v32 = ((unint64_t)*(unsigned int *)(a1[3] + 20) >> 1) & 0x3FFFF;
            unint64_t v33 = (unint64_t *)v31[197];
            unint64_t v34 = v31[198];
            if ((unint64_t)v33 >= v34)
            {
              unint64_t v131 = (unint64_t *)v31[196];
              uint64_t v132 = v33 - v131;
              if ((unint64_t)(v132 + 1) >> 61) {
                goto LABEL_360;
              }
              unint64_t v133 = v34 - (void)v131;
              unint64_t v134 = (uint64_t)(v34 - (void)v131) >> 2;
              if (v134 <= v132 + 1) {
                unint64_t v134 = v132 + 1;
              }
              if (v133 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v135 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v135 = v134;
              }
              if (v135)
              {
                unint64_t v136 = (char *)sub_5714((uint64_t)(v31 + 198), v135);
                unint64_t v33 = (unint64_t *)v31[197];
                unint64_t v131 = (unint64_t *)v31[196];
              }
              else
              {
                unint64_t v136 = 0;
              }
              unint64_t v229 = (unint64_t *)&v136[8 * v132];
              unint64_t *v229 = v32;
              unint64_t v35 = v229 + 1;
              while (v33 != v131)
              {
                unint64_t v230 = *--v33;
                *--unint64_t v229 = v230;
              }
              v31[196] = v229;
              v31[197] = v35;
              v31[198] = &v136[8 * v135];
              if (v131) {
                operator delete(v131);
              }
            }
            else
            {
              unint64_t *v33 = v32;
              unint64_t v35 = v33 + 1;
            }
            v31[197] = v35;
            break;
          case 0x22:
            unint64_t v36 = *(void **)a1[2];
            uint64_t v37 = *(_DWORD *)(a1[3] + 40) & 0x3FFFFLL;
            uint64_t v38 = (uint64_t *)v36[200];
            unint64_t v39 = v36[201];
            if ((unint64_t)v38 >= v39)
            {
              unint64_t v137 = (uint64_t *)v36[199];
              uint64_t v138 = v38 - v137;
              if ((unint64_t)(v138 + 1) >> 61) {
                goto LABEL_360;
              }
              unint64_t v139 = v39 - (void)v137;
              unint64_t v140 = (uint64_t)(v39 - (void)v137) >> 2;
              if (v140 <= v138 + 1) {
                unint64_t v140 = v138 + 1;
              }
              if (v139 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v141 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v141 = v140;
              }
              if (v141)
              {
                unint64_t v142 = (char *)sub_5714((uint64_t)(v36 + 201), v141);
                uint64_t v38 = (uint64_t *)v36[200];
                unint64_t v137 = (uint64_t *)v36[199];
              }
              else
              {
                unint64_t v142 = 0;
              }
              uint64_t v231 = (uint64_t *)&v142[8 * v138];
              *uint64_t v231 = v37;
              uint64_t v40 = v231 + 1;
              while (v38 != v137)
              {
                uint64_t v232 = *--v38;
                *--uint64_t v231 = v232;
              }
              v36[199] = v231;
              v36[200] = v40;
              v36[201] = &v142[8 * v141];
              if (v137) {
                operator delete(v137);
              }
            }
            else
            {
              uint64_t *v38 = v37;
              uint64_t v40 = v38 + 1;
            }
            v36[200] = v40;
            break;
          case 0x23:
            uint64_t v41 = *(void **)a1[2];
            uint64_t v42 = *(_DWORD *)(a1[3] + 36) & 0x3FFFFLL;
            unint64_t v43 = (uint64_t *)v41[203];
            unint64_t v44 = v41[204];
            if ((unint64_t)v43 >= v44)
            {
              uint64_t v143 = (uint64_t *)v41[202];
              uint64_t v144 = v43 - v143;
              if ((unint64_t)(v144 + 1) >> 61) {
                goto LABEL_360;
              }
              unint64_t v145 = v44 - (void)v143;
              unint64_t v146 = (uint64_t)(v44 - (void)v143) >> 2;
              if (v146 <= v144 + 1) {
                unint64_t v146 = v144 + 1;
              }
              if (v145 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v147 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v147 = v146;
              }
              if (v147)
              {
                unint64_t v148 = (char *)sub_5714((uint64_t)(v41 + 204), v147);
                unint64_t v43 = (uint64_t *)v41[203];
                uint64_t v143 = (uint64_t *)v41[202];
              }
              else
              {
                unint64_t v148 = 0;
              }
              uint64_t v233 = (uint64_t *)&v148[8 * v144];
              *uint64_t v233 = v42;
              uint64_t v45 = v233 + 1;
              while (v43 != v143)
              {
                uint64_t v234 = *--v43;
                *--uint64_t v233 = v234;
              }
              v41[202] = v233;
              v41[203] = v45;
              v41[204] = &v148[8 * v147];
              if (v143) {
                operator delete(v143);
              }
            }
            else
            {
              *unint64_t v43 = v42;
              uint64_t v45 = v43 + 1;
            }
            v41[203] = v45;
            break;
          case 0x24:
            uint64_t v46 = a1[2];
            unint64_t v47 = *(void **)v46;
            uint64_t v48 = *(unsigned __int16 *)(a1[3] + 66);
            uint64_t v49 = *(char **)(*(void *)v46 + 1648);
            unint64_t v50 = *(void *)(*(void *)v46 + 1656);
            if ((unint64_t)v49 >= v50)
            {
              uint64_t v149 = (char *)v47[205];
              uint64_t v150 = (v49 - v149) >> 3;
              if ((unint64_t)(v150 + 1) >> 61) {
                goto LABEL_360;
              }
              unint64_t v151 = v50 - (void)v149;
              unint64_t v152 = (uint64_t)(v50 - (void)v149) >> 2;
              if (v152 <= v150 + 1) {
                unint64_t v152 = v150 + 1;
              }
              if (v151 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v153 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v153 = v152;
              }
              if (v153)
              {
                unint64_t v154 = (char *)sub_5714((uint64_t)(v47 + 207), v153);
                uint64_t v49 = (char *)v47[206];
                uint64_t v149 = (char *)v47[205];
              }
              else
              {
                unint64_t v154 = 0;
              }
              unint64_t v235 = &v154[8 * v150];
              *(void *)unint64_t v235 = v48;
              uint64_t v51 = v235 + 8;
              while (v49 != v149)
              {
                uint64_t v236 = *((void *)v49 - 1);
                v49 -= 8;
                *((void *)v235 - 1) = v236;
                v235 -= 8;
              }
              v47[205] = v235;
              v47[206] = v51;
              v47[207] = &v154[8 * v153];
              if (v149) {
                operator delete(v149);
              }
            }
            else
            {
              *(void *)uint64_t v49 = v48;
              uint64_t v51 = v49 + 8;
            }
            v47[206] = v51;
            break;
          case 0x25:
            unint64_t v52 = *(void **)a1[2];
            uint64_t v53 = *(_WORD *)(a1[3] + 48) & 0x7FFF;
            uint64_t v54 = (char *)v52[209];
            unint64_t v55 = v52[210];
            if ((unint64_t)v54 >= v55)
            {
              uint64_t v155 = (char *)v52[208];
              uint64_t v156 = (v54 - v155) >> 3;
              if ((unint64_t)(v156 + 1) >> 61) {
                goto LABEL_360;
              }
              unint64_t v157 = v55 - (void)v155;
              unint64_t v158 = (uint64_t)(v55 - (void)v155) >> 2;
              if (v158 <= v156 + 1) {
                unint64_t v158 = v156 + 1;
              }
              if (v157 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v159 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v159 = v158;
              }
              if (v159)
              {
                unint64_t v160 = (char *)sub_5714((uint64_t)(v52 + 210), v159);
                uint64_t v54 = (char *)v52[209];
                uint64_t v155 = (char *)v52[208];
              }
              else
              {
                unint64_t v160 = 0;
              }
              uint64_t v237 = &v160[8 * v156];
              *(void *)uint64_t v237 = v53;
              uint64_t v56 = v237 + 8;
              while (v54 != v155)
              {
                uint64_t v238 = *((void *)v54 - 1);
                v54 -= 8;
                *((void *)v237 - 1) = v238;
                v237 -= 8;
              }
              v52[208] = v237;
              v52[209] = v56;
              v52[210] = &v160[8 * v159];
              if (v155) {
                operator delete(v155);
              }
            }
            else
            {
              *(void *)uint64_t v54 = v53;
              uint64_t v56 = v54 + 8;
            }
            v52[209] = v56;
            break;
          case 0x26:
            unint64_t v57 = *(void **)a1[2];
            uint64_t v58 = *(_WORD *)(a1[3] + 44) & 0x7FFF;
            uint64_t v59 = (char *)v57[212];
            unint64_t v60 = v57[213];
            if ((unint64_t)v59 >= v60)
            {
              uint64_t v161 = (char *)v57[211];
              uint64_t v162 = (v59 - v161) >> 3;
              if ((unint64_t)(v162 + 1) >> 61) {
                goto LABEL_360;
              }
              unint64_t v163 = v60 - (void)v161;
              unint64_t v164 = (uint64_t)(v60 - (void)v161) >> 2;
              if (v164 <= v162 + 1) {
                unint64_t v164 = v162 + 1;
              }
              if (v163 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v165 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v165 = v164;
              }
              if (v165)
              {
                unint64_t v166 = (char *)sub_5714((uint64_t)(v57 + 213), v165);
                uint64_t v59 = (char *)v57[212];
                uint64_t v161 = (char *)v57[211];
              }
              else
              {
                unint64_t v166 = 0;
              }
              uint64_t v239 = &v166[8 * v162];
              *(void *)uint64_t v239 = v58;
              uint64_t v61 = v239 + 8;
              while (v59 != v161)
              {
                uint64_t v240 = *((void *)v59 - 1);
                v59 -= 8;
                *((void *)v239 - 1) = v240;
                v239 -= 8;
              }
              v57[211] = v239;
              v57[212] = v61;
              v57[213] = &v166[8 * v165];
              if (v161) {
                operator delete(v161);
              }
            }
            else
            {
              *(void *)uint64_t v59 = v58;
              uint64_t v61 = v59 + 8;
            }
            v57[212] = v61;
            break;
          case 0x27:
            unint64_t v62 = *(void **)a1[2];
            uint64_t v63 = *(_WORD *)(a1[3] + 50) & 0x7FFF;
            uint64_t v64 = (char *)v62[215];
            unint64_t v65 = v62[216];
            if ((unint64_t)v64 >= v65)
            {
              uint64_t v167 = (char *)v62[214];
              uint64_t v168 = (v64 - v167) >> 3;
              if ((unint64_t)(v168 + 1) >> 61) {
                goto LABEL_360;
              }
              unint64_t v169 = v65 - (void)v167;
              unint64_t v170 = (uint64_t)(v65 - (void)v167) >> 2;
              if (v170 <= v168 + 1) {
                unint64_t v170 = v168 + 1;
              }
              if (v169 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v171 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v171 = v170;
              }
              if (v171)
              {
                unint64_t v172 = (char *)sub_5714((uint64_t)(v62 + 216), v171);
                uint64_t v64 = (char *)v62[215];
                uint64_t v167 = (char *)v62[214];
              }
              else
              {
                unint64_t v172 = 0;
              }
              unint64_t v241 = &v172[8 * v168];
              *(void *)unint64_t v241 = v63;
              uint64_t v66 = v241 + 8;
              while (v64 != v167)
              {
                uint64_t v242 = *((void *)v64 - 1);
                v64 -= 8;
                *((void *)v241 - 1) = v242;
                v241 -= 8;
              }
              v62[214] = v241;
              v62[215] = v66;
              v62[216] = &v172[8 * v171];
              if (v167) {
                operator delete(v167);
              }
            }
            else
            {
              *(void *)uint64_t v64 = v63;
              uint64_t v66 = v64 + 8;
            }
            v62[215] = v66;
            break;
          case 0x28:
            unint64_t v67 = *(void **)a1[2];
            uint64_t v68 = *(_WORD *)(a1[3] + 46) & 0x7FFF;
            unint64_t v69 = (char *)v67[218];
            unint64_t v70 = v67[219];
            if ((unint64_t)v69 >= v70)
            {
              uint64_t v173 = (char *)v67[217];
              uint64_t v174 = (v69 - v173) >> 3;
              if ((unint64_t)(v174 + 1) >> 61) {
                goto LABEL_360;
              }
              unint64_t v175 = v70 - (void)v173;
              unint64_t v176 = (uint64_t)(v70 - (void)v173) >> 2;
              if (v176 <= v174 + 1) {
                unint64_t v176 = v174 + 1;
              }
              if (v175 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v177 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v177 = v176;
              }
              if (v177)
              {
                unint64_t v178 = (char *)sub_5714((uint64_t)(v67 + 219), v177);
                unint64_t v69 = (char *)v67[218];
                uint64_t v173 = (char *)v67[217];
              }
              else
              {
                unint64_t v178 = 0;
              }
              uint64_t v243 = &v178[8 * v174];
              *(void *)uint64_t v243 = v68;
              uint64_t v71 = v243 + 8;
              while (v69 != v173)
              {
                uint64_t v244 = *((void *)v69 - 1);
                v69 -= 8;
                *((void *)v243 - 1) = v244;
                v243 -= 8;
              }
              v67[217] = v243;
              v67[218] = v71;
              v67[219] = &v178[8 * v177];
              if (v173) {
                operator delete(v173);
              }
            }
            else
            {
              *(void *)unint64_t v69 = v68;
              uint64_t v71 = v69 + 8;
            }
            v67[218] = v71;
            break;
          case 0x29:
            uint64_t v72 = *(void **)a1[2];
            uint64_t v73 = *(_DWORD *)(a1[3] + 40) & 0x3FFFFLL;
            unint64_t v74 = (uint64_t *)v72[221];
            unint64_t v75 = v72[222];
            if ((unint64_t)v74 >= v75)
            {
              uint64_t v179 = (uint64_t *)v72[220];
              uint64_t v180 = v74 - v179;
              if ((unint64_t)(v180 + 1) >> 61) {
                goto LABEL_360;
              }
              unint64_t v181 = v75 - (void)v179;
              unint64_t v182 = (uint64_t)(v75 - (void)v179) >> 2;
              if (v182 <= v180 + 1) {
                unint64_t v182 = v180 + 1;
              }
              if (v181 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v183 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v183 = v182;
              }
              if (v183)
              {
                unint64_t v184 = (char *)sub_5714((uint64_t)(v72 + 222), v183);
                unint64_t v74 = (uint64_t *)v72[221];
                uint64_t v179 = (uint64_t *)v72[220];
              }
              else
              {
                unint64_t v184 = 0;
              }
              uint64_t v245 = (uint64_t *)&v184[8 * v180];
              *uint64_t v245 = v73;
              uint64_t v76 = v245 + 1;
              while (v74 != v179)
              {
                uint64_t v246 = *--v74;
                *--uint64_t v245 = v246;
              }
              v72[220] = v245;
              v72[221] = v76;
              v72[222] = &v184[8 * v183];
              if (v179) {
                operator delete(v179);
              }
            }
            else
            {
              *unint64_t v74 = v73;
              uint64_t v76 = v74 + 1;
            }
            v72[221] = v76;
            break;
          case 0x2A:
            int v77 = *(void **)a1[2];
            uint64_t v78 = *(_DWORD *)(a1[3] + 36) & 0x3FFFFLL;
            uint64_t v79 = (uint64_t *)v77[224];
            unint64_t v80 = v77[225];
            if ((unint64_t)v79 >= v80)
            {
              uint64_t v185 = (uint64_t *)v77[223];
              uint64_t v186 = v79 - v185;
              if ((unint64_t)(v186 + 1) >> 61) {
                goto LABEL_360;
              }
              unint64_t v187 = v80 - (void)v185;
              unint64_t v188 = (uint64_t)(v80 - (void)v185) >> 2;
              if (v188 <= v186 + 1) {
                unint64_t v188 = v186 + 1;
              }
              if (v187 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v189 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v189 = v188;
              }
              if (v189)
              {
                unint64_t v190 = (char *)sub_5714((uint64_t)(v77 + 225), v189);
                uint64_t v79 = (uint64_t *)v77[224];
                uint64_t v185 = (uint64_t *)v77[223];
              }
              else
              {
                unint64_t v190 = 0;
              }
              unint64_t v247 = (uint64_t *)&v190[8 * v186];
              *unint64_t v247 = v78;
              uint64_t v81 = v247 + 1;
              while (v79 != v185)
              {
                uint64_t v248 = *--v79;
                *--unint64_t v247 = v248;
              }
              v77[223] = v247;
              v77[224] = v81;
              v77[225] = &v190[8 * v189];
              if (v185) {
                operator delete(v185);
              }
            }
            else
            {
              uint64_t *v79 = v78;
              uint64_t v81 = v79 + 1;
            }
            v77[224] = v81;
            break;
          case 0x2B:
            int v82 = *(void **)a1[2];
            uint64_t v83 = *(_DWORD *)(a1[3] + 32) & 0x3FFFFLL;
            unint64_t v84 = (uint64_t *)v82[227];
            unint64_t v85 = v82[228];
            if ((unint64_t)v84 >= v85)
            {
              uint64_t v191 = (uint64_t *)v82[226];
              uint64_t v192 = v84 - v191;
              if ((unint64_t)(v192 + 1) >> 61) {
                goto LABEL_360;
              }
              unint64_t v193 = v85 - (void)v191;
              unint64_t v194 = (uint64_t)(v85 - (void)v191) >> 2;
              if (v194 <= v192 + 1) {
                unint64_t v194 = v192 + 1;
              }
              if (v193 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v195 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v195 = v194;
              }
              if (v195)
              {
                unint64_t v196 = (char *)sub_5714((uint64_t)(v82 + 228), v195);
                unint64_t v84 = (uint64_t *)v82[227];
                uint64_t v191 = (uint64_t *)v82[226];
              }
              else
              {
                unint64_t v196 = 0;
              }
              uint64_t v249 = (uint64_t *)&v196[8 * v192];
              *uint64_t v249 = v83;
              uint64_t v86 = v249 + 1;
              while (v84 != v191)
              {
                uint64_t v250 = *--v84;
                *--uint64_t v249 = v250;
              }
              v82[226] = v249;
              v82[227] = v86;
              v82[228] = &v196[8 * v195];
              if (v191) {
                operator delete(v191);
              }
            }
            else
            {
              *unint64_t v84 = v83;
              uint64_t v86 = v84 + 1;
            }
            v82[227] = v86;
            break;
          case 0x2C:
            uint64_t v87 = *(void **)a1[2];
            uint64_t v88 = *(_DWORD *)(a1[3] + 28) & 0x3FFFFLL;
            uint64_t v89 = (uint64_t *)v87[230];
            unint64_t v90 = v87[231];
            if ((unint64_t)v89 >= v90)
            {
              uint64_t v197 = (uint64_t *)v87[229];
              uint64_t v198 = v89 - v197;
              if ((unint64_t)(v198 + 1) >> 61) {
                goto LABEL_360;
              }
              unint64_t v199 = v90 - (void)v197;
              unint64_t v200 = (uint64_t)(v90 - (void)v197) >> 2;
              if (v200 <= v198 + 1) {
                unint64_t v200 = v198 + 1;
              }
              if (v199 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v201 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v201 = v200;
              }
              if (v201)
              {
                unint64_t v202 = (char *)sub_5714((uint64_t)(v87 + 231), v201);
                uint64_t v89 = (uint64_t *)v87[230];
                uint64_t v197 = (uint64_t *)v87[229];
              }
              else
              {
                unint64_t v202 = 0;
              }
              uint64_t v251 = (uint64_t *)&v202[8 * v198];
              uint64_t *v251 = v88;
              unint64_t v91 = v251 + 1;
              while (v89 != v197)
              {
                uint64_t v252 = *--v89;
                *--uint64_t v251 = v252;
              }
              v87[229] = v251;
              v87[230] = v91;
              v87[231] = &v202[8 * v201];
              if (v197) {
                operator delete(v197);
              }
            }
            else
            {
              *uint64_t v89 = v88;
              unint64_t v91 = v89 + 1;
            }
            v87[230] = v91;
            break;
          case 0x2D:
            unint64_t v92 = *(void **)a1[2];
            uint64_t v93 = *(_DWORD *)(a1[3] + 52) & 0xFFFFFLL;
            uint64_t v94 = (uint64_t *)v92[233];
            unint64_t v95 = v92[234];
            if ((unint64_t)v94 >= v95)
            {
              uint64_t v203 = (uint64_t *)v92[232];
              uint64_t v204 = v94 - v203;
              if ((unint64_t)(v204 + 1) >> 61) {
                goto LABEL_360;
              }
              unint64_t v205 = v95 - (void)v203;
              unint64_t v206 = (uint64_t)(v95 - (void)v203) >> 2;
              if (v206 <= v204 + 1) {
                unint64_t v206 = v204 + 1;
              }
              if (v205 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v207 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v207 = v206;
              }
              if (v207)
              {
                unint64_t v208 = (char *)sub_5714((uint64_t)(v92 + 234), v207);
                uint64_t v94 = (uint64_t *)v92[233];
                uint64_t v203 = (uint64_t *)v92[232];
              }
              else
              {
                unint64_t v208 = 0;
              }
              unint64_t v253 = (uint64_t *)&v208[8 * v204];
              uint64_t *v253 = v93;
              unint64_t v96 = v253 + 1;
              while (v94 != v203)
              {
                uint64_t v254 = *--v94;
                *--unint64_t v253 = v254;
              }
              v92[232] = v253;
              v92[233] = v96;
              v92[234] = &v208[8 * v207];
              if (v203) {
                operator delete(v203);
              }
            }
            else
            {
              *uint64_t v94 = v93;
              unint64_t v96 = v94 + 1;
            }
            v92[233] = v96;
            break;
          case 0x2E:
            unint64_t v97 = *(void **)a1[2];
            uint64_t v98 = *(_DWORD *)(a1[3] + 60) & 0x3FFFFLL;
            unint64_t v99 = (uint64_t *)v97[236];
            unint64_t v100 = v97[237];
            if ((unint64_t)v99 >= v100)
            {
              uint64_t v209 = (uint64_t *)v97[235];
              uint64_t v210 = v99 - v209;
              if ((unint64_t)(v210 + 1) >> 61) {
                goto LABEL_360;
              }
              unint64_t v211 = v100 - (void)v209;
              unint64_t v212 = (uint64_t)(v100 - (void)v209) >> 2;
              if (v212 <= v210 + 1) {
                unint64_t v212 = v210 + 1;
              }
              if (v211 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v213 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v213 = v212;
              }
              if (v213)
              {
                unint64_t v214 = (char *)sub_5714((uint64_t)(v97 + 237), v213);
                unint64_t v99 = (uint64_t *)v97[236];
                uint64_t v209 = (uint64_t *)v97[235];
              }
              else
              {
                unint64_t v214 = 0;
              }
              uint64_t v255 = (uint64_t *)&v214[8 * v210];
              *uint64_t v255 = v98;
              uint64_t v101 = v255 + 1;
              while (v99 != v209)
              {
                uint64_t v256 = *--v99;
                *--uint64_t v255 = v256;
              }
              v97[235] = v255;
              v97[236] = v101;
              v97[237] = &v214[8 * v213];
              if (v209) {
                operator delete(v209);
              }
            }
            else
            {
              *unint64_t v99 = v98;
              uint64_t v101 = v99 + 1;
            }
            v97[236] = v101;
            break;
          case 0x2F:
            unint64_t v102 = *(void **)a1[2];
            uint64_t v103 = *(_DWORD *)(a1[3] + 56) & 0xFFFFFLL;
            uint64_t v104 = (uint64_t *)v102[239];
            unint64_t v105 = v102[240];
            if ((unint64_t)v104 >= v105)
            {
              uint64_t v215 = (uint64_t *)v102[238];
              uint64_t v216 = v104 - v215;
              if ((unint64_t)(v216 + 1) >> 61) {
LABEL_360:
              }
                sub_566C();
              unint64_t v217 = v105 - (void)v215;
              unint64_t v218 = (uint64_t)(v105 - (void)v215) >> 2;
              if (v218 <= v216 + 1) {
                unint64_t v218 = v216 + 1;
              }
              if (v217 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v219 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v219 = v218;
              }
              if (v219)
              {
                unint64_t v220 = (char *)sub_5714((uint64_t)(v102 + 240), v219);
                uint64_t v104 = (uint64_t *)v102[239];
                uint64_t v215 = (uint64_t *)v102[238];
              }
              else
              {
                unint64_t v220 = 0;
              }
              uint64_t v257 = (uint64_t *)&v220[8 * v216];
              uint64_t *v257 = v103;
              uint64_t v106 = v257 + 1;
              while (v104 != v215)
              {
                uint64_t v258 = *--v104;
                *--uint64_t v257 = v258;
              }
              v102[238] = v257;
              v102[239] = v106;
              v102[240] = &v220[8 * v219];
              if (v215) {
                operator delete(v215);
              }
            }
            else
            {
              *uint64_t v104 = v103;
              uint64_t v106 = v104 + 1;
            }
            v102[239] = v106;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_E75AC(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    unint64_t v128 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    unint64_t v127 = *v128;
    uint64_t v129 = (char *)v128[1] - (char *)*v128;
    if (v129)
    {
      unint64_t v130 = v129 >> 2;
      if (v130 <= 1) {
        unint64_t v130 = 1;
      }
      do
      {
        int v131 = *v127++;
        switch(v131)
        {
          case 20:
            int v132 = *(_DWORD *)(a1[3] + 28);
            unint64_t v133 = (void *)(*(void *)a1[2] + 1264);
            goto LABEL_176;
          case 21:
            int v132 = *(_DWORD *)(a1[3] + 32);
            unint64_t v133 = (void *)(*(void *)a1[2] + 1288);
            goto LABEL_176;
          case 22:
            int v132 = *(_DWORD *)(a1[3] + 20) >> 1;
            unint64_t v133 = (void *)(*(void *)a1[2] + 1312);
            goto LABEL_176;
          case 23:
            int v132 = *(_DWORD *)(a1[3] + 24);
            unint64_t v133 = (void *)(*(void *)a1[2] + 1336);
            goto LABEL_176;
          case 24:
            int v132 = *(_DWORD *)(a1[3] + 52);
            unint64_t v133 = (void *)(*(void *)a1[2] + 1360);
            goto LABEL_176;
          case 25:
            int v132 = *(_DWORD *)(a1[3] + 36);
            unint64_t v133 = (void *)(*(void *)a1[2] + 1384);
            goto LABEL_176;
          case 26:
            int v132 = *(_DWORD *)(a1[3] + 44);
            unint64_t v133 = (void *)(*(void *)a1[2] + 1408);
            goto LABEL_176;
          case 27:
            int v132 = *(_DWORD *)(a1[3] + 40);
            unint64_t v133 = (void *)(*(void *)a1[2] + 1432);
            goto LABEL_176;
          case 28:
            int v132 = *(_DWORD *)(a1[3] + 48);
            unint64_t v133 = (void *)(*(void *)a1[2] + 1456);
LABEL_176:
            *(void *)(*v133 - 8) += v132 & 0x3FFFF;
            break;
          default:
            break;
        }
        --v130;
      }
      while (v130);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    int v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0x14:
            uint64_t v10 = *(void **)a1[2];
            uint64_t v11 = *(_DWORD *)(a1[3] + 28) & 0x3FFFFLL;
            uint64_t v12 = (uint64_t *)v10[158];
            unint64_t v13 = v10[159];
            if ((unint64_t)v12 >= v13)
            {
              unint64_t v55 = (uint64_t *)v10[157];
              uint64_t v56 = v12 - v55;
              if ((unint64_t)(v56 + 1) >> 61) {
                goto LABEL_180;
              }
              unint64_t v57 = v13 - (void)v55;
              unint64_t v58 = (uint64_t)(v13 - (void)v55) >> 2;
              if (v58 <= v56 + 1) {
                unint64_t v58 = v56 + 1;
              }
              if (v57 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v59 = v58;
              }
              if (v59)
              {
                unint64_t v60 = (char *)sub_5714((uint64_t)(v10 + 159), v59);
                uint64_t v12 = (uint64_t *)v10[158];
                unint64_t v55 = (uint64_t *)v10[157];
              }
              else
              {
                unint64_t v60 = 0;
              }
              unint64_t v109 = (uint64_t *)&v60[8 * v56];
              uint64_t *v109 = v11;
              unint64_t v14 = v109 + 1;
              while (v12 != v55)
              {
                uint64_t v110 = *--v12;
                *--unint64_t v109 = v110;
              }
              v10[157] = v109;
              v10[158] = v14;
              v10[159] = &v60[8 * v59];
              if (v55) {
                operator delete(v55);
              }
            }
            else
            {
              *uint64_t v12 = v11;
              unint64_t v14 = v12 + 1;
            }
            v10[158] = v14;
            break;
          case 0x15:
            unint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_DWORD *)(a1[3] + 32) & 0x3FFFFLL;
            uint64_t v17 = (uint64_t *)v15[161];
            unint64_t v18 = v15[162];
            if ((unint64_t)v17 >= v18)
            {
              uint64_t v61 = (uint64_t *)v15[160];
              uint64_t v62 = v17 - v61;
              if ((unint64_t)(v62 + 1) >> 61) {
                goto LABEL_180;
              }
              unint64_t v63 = v18 - (void)v61;
              unint64_t v64 = (uint64_t)(v18 - (void)v61) >> 2;
              if (v64 <= v62 + 1) {
                unint64_t v64 = v62 + 1;
              }
              if (v63 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v65 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v65 = v64;
              }
              if (v65)
              {
                uint64_t v66 = (char *)sub_5714((uint64_t)(v15 + 162), v65);
                uint64_t v17 = (uint64_t *)v15[161];
                uint64_t v61 = (uint64_t *)v15[160];
              }
              else
              {
                uint64_t v66 = 0;
              }
              unint64_t v111 = (uint64_t *)&v66[8 * v62];
              uint64_t *v111 = v16;
              unint64_t v19 = v111 + 1;
              while (v17 != v61)
              {
                uint64_t v112 = *--v17;
                *--unint64_t v111 = v112;
              }
              v15[160] = v111;
              v15[161] = v19;
              v15[162] = &v66[8 * v65];
              if (v61) {
                operator delete(v61);
              }
            }
            else
            {
              uint64_t *v17 = v16;
              unint64_t v19 = v17 + 1;
            }
            v15[161] = v19;
            break;
          case 0x16:
            unint64_t v20 = *(void **)a1[2];
            unint64_t v21 = ((unint64_t)*(unsigned int *)(a1[3] + 20) >> 1) & 0x3FFFF;
            uint64_t v22 = (unint64_t *)v20[164];
            unint64_t v23 = v20[165];
            if ((unint64_t)v22 >= v23)
            {
              unint64_t v67 = (unint64_t *)v20[163];
              uint64_t v68 = v22 - v67;
              if ((unint64_t)(v68 + 1) >> 61) {
                goto LABEL_180;
              }
              unint64_t v69 = v23 - (void)v67;
              unint64_t v70 = (uint64_t)(v23 - (void)v67) >> 2;
              if (v70 <= v68 + 1) {
                unint64_t v70 = v68 + 1;
              }
              if (v69 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v71 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v71 = v70;
              }
              if (v71)
              {
                uint64_t v72 = (char *)sub_5714((uint64_t)(v20 + 165), v71);
                uint64_t v22 = (unint64_t *)v20[164];
                unint64_t v67 = (unint64_t *)v20[163];
              }
              else
              {
                uint64_t v72 = 0;
              }
              unint64_t v113 = (unint64_t *)&v72[8 * v68];
              *unint64_t v113 = v21;
              unint64_t v24 = v113 + 1;
              while (v22 != v67)
              {
                unint64_t v114 = *--v22;
                *--unint64_t v113 = v114;
              }
              v20[163] = v113;
              v20[164] = v24;
              v20[165] = &v72[8 * v71];
              if (v67) {
                operator delete(v67);
              }
            }
            else
            {
              *uint64_t v22 = v21;
              unint64_t v24 = v22 + 1;
            }
            v20[164] = v24;
            break;
          case 0x17:
            unint64_t v25 = *(void **)a1[2];
            uint64_t v26 = *(_DWORD *)(a1[3] + 24) & 0x3FFFFLL;
            uint64_t v27 = (uint64_t *)v25[167];
            unint64_t v28 = v25[168];
            if ((unint64_t)v27 >= v28)
            {
              uint64_t v73 = (uint64_t *)v25[166];
              uint64_t v74 = v27 - v73;
              if ((unint64_t)(v74 + 1) >> 61) {
                goto LABEL_180;
              }
              unint64_t v75 = v28 - (void)v73;
              unint64_t v76 = (uint64_t)(v28 - (void)v73) >> 2;
              if (v76 <= v74 + 1) {
                unint64_t v76 = v74 + 1;
              }
              if (v75 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v77 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v77 = v76;
              }
              if (v77)
              {
                uint64_t v78 = (char *)sub_5714((uint64_t)(v25 + 168), v77);
                uint64_t v27 = (uint64_t *)v25[167];
                uint64_t v73 = (uint64_t *)v25[166];
              }
              else
              {
                uint64_t v78 = 0;
              }
              unint64_t v115 = (uint64_t *)&v78[8 * v74];
              *unint64_t v115 = v26;
              unint64_t v29 = v115 + 1;
              while (v27 != v73)
              {
                uint64_t v116 = *--v27;
                *--unint64_t v115 = v116;
              }
              v25[166] = v115;
              v25[167] = v29;
              v25[168] = &v78[8 * v77];
              if (v73) {
                operator delete(v73);
              }
            }
            else
            {
              *uint64_t v27 = v26;
              unint64_t v29 = v27 + 1;
            }
            v25[167] = v29;
            break;
          case 0x18:
            unint64_t v30 = *(void **)a1[2];
            uint64_t v31 = *(_DWORD *)(a1[3] + 52) & 0x3FFFFLL;
            unint64_t v32 = (uint64_t *)v30[170];
            unint64_t v33 = v30[171];
            if ((unint64_t)v32 >= v33)
            {
              uint64_t v79 = (uint64_t *)v30[169];
              uint64_t v80 = v32 - v79;
              if ((unint64_t)(v80 + 1) >> 61) {
                goto LABEL_180;
              }
              unint64_t v81 = v33 - (void)v79;
              unint64_t v82 = (uint64_t)(v33 - (void)v79) >> 2;
              if (v82 <= v80 + 1) {
                unint64_t v82 = v80 + 1;
              }
              if (v81 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v83 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v83 = v82;
              }
              if (v83)
              {
                unint64_t v84 = (char *)sub_5714((uint64_t)(v30 + 171), v83);
                unint64_t v32 = (uint64_t *)v30[170];
                uint64_t v79 = (uint64_t *)v30[169];
              }
              else
              {
                unint64_t v84 = 0;
              }
              unint64_t v117 = (uint64_t *)&v84[8 * v80];
              *unint64_t v117 = v31;
              unint64_t v34 = v117 + 1;
              while (v32 != v79)
              {
                uint64_t v118 = *--v32;
                *--unint64_t v117 = v118;
              }
              v30[169] = v117;
              v30[170] = v34;
              v30[171] = &v84[8 * v83];
              if (v79) {
                operator delete(v79);
              }
            }
            else
            {
              *unint64_t v32 = v31;
              unint64_t v34 = v32 + 1;
            }
            v30[170] = v34;
            break;
          case 0x19:
            unint64_t v35 = *(void **)a1[2];
            uint64_t v36 = *(_DWORD *)(a1[3] + 36) & 0x3FFFFLL;
            uint64_t v37 = (uint64_t *)v35[173];
            unint64_t v38 = v35[174];
            if ((unint64_t)v37 >= v38)
            {
              unint64_t v85 = (uint64_t *)v35[172];
              uint64_t v86 = v37 - v85;
              if ((unint64_t)(v86 + 1) >> 61) {
                goto LABEL_180;
              }
              unint64_t v87 = v38 - (void)v85;
              unint64_t v88 = (uint64_t)(v38 - (void)v85) >> 2;
              if (v88 <= v86 + 1) {
                unint64_t v88 = v86 + 1;
              }
              if (v87 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v89 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v89 = v88;
              }
              if (v89)
              {
                unint64_t v90 = (char *)sub_5714((uint64_t)(v35 + 174), v89);
                uint64_t v37 = (uint64_t *)v35[173];
                unint64_t v85 = (uint64_t *)v35[172];
              }
              else
              {
                unint64_t v90 = 0;
              }
              unint64_t v119 = (uint64_t *)&v90[8 * v86];
              *unint64_t v119 = v36;
              unint64_t v39 = v119 + 1;
              while (v37 != v85)
              {
                uint64_t v120 = *--v37;
                *--unint64_t v119 = v120;
              }
              v35[172] = v119;
              v35[173] = v39;
              v35[174] = &v90[8 * v89];
              if (v85) {
                operator delete(v85);
              }
            }
            else
            {
              uint64_t *v37 = v36;
              unint64_t v39 = v37 + 1;
            }
            v35[173] = v39;
            break;
          case 0x1A:
            uint64_t v40 = *(void **)a1[2];
            uint64_t v41 = *(_DWORD *)(a1[3] + 44) & 0x3FFFFLL;
            uint64_t v42 = (uint64_t *)v40[176];
            unint64_t v43 = v40[177];
            if ((unint64_t)v42 >= v43)
            {
              unint64_t v91 = (uint64_t *)v40[175];
              uint64_t v92 = v42 - v91;
              if ((unint64_t)(v92 + 1) >> 61) {
                goto LABEL_180;
              }
              unint64_t v93 = v43 - (void)v91;
              unint64_t v94 = (uint64_t)(v43 - (void)v91) >> 2;
              if (v94 <= v92 + 1) {
                unint64_t v94 = v92 + 1;
              }
              if (v93 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v95 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v95 = v94;
              }
              if (v95)
              {
                unint64_t v96 = (char *)sub_5714((uint64_t)(v40 + 177), v95);
                uint64_t v42 = (uint64_t *)v40[176];
                unint64_t v91 = (uint64_t *)v40[175];
              }
              else
              {
                unint64_t v96 = 0;
              }
              unint64_t v121 = (uint64_t *)&v96[8 * v92];
              uint64_t *v121 = v41;
              unint64_t v44 = v121 + 1;
              while (v42 != v91)
              {
                uint64_t v122 = *--v42;
                *--unint64_t v121 = v122;
              }
              v40[175] = v121;
              v40[176] = v44;
              v40[177] = &v96[8 * v95];
              if (v91) {
                operator delete(v91);
              }
            }
            else
            {
              uint64_t *v42 = v41;
              unint64_t v44 = v42 + 1;
            }
            v40[176] = v44;
            break;
          case 0x1B:
            uint64_t v45 = *(void **)a1[2];
            uint64_t v46 = *(_DWORD *)(a1[3] + 40) & 0x3FFFFLL;
            unint64_t v47 = (uint64_t *)v45[179];
            unint64_t v48 = v45[180];
            if ((unint64_t)v47 >= v48)
            {
              unint64_t v97 = (uint64_t *)v45[178];
              uint64_t v98 = v47 - v97;
              if ((unint64_t)(v98 + 1) >> 61) {
                goto LABEL_180;
              }
              unint64_t v99 = v48 - (void)v97;
              unint64_t v100 = (uint64_t)(v48 - (void)v97) >> 2;
              if (v100 <= v98 + 1) {
                unint64_t v100 = v98 + 1;
              }
              if (v99 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v101 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v101 = v100;
              }
              if (v101)
              {
                unint64_t v102 = (char *)sub_5714((uint64_t)(v45 + 180), v101);
                unint64_t v47 = (uint64_t *)v45[179];
                unint64_t v97 = (uint64_t *)v45[178];
              }
              else
              {
                unint64_t v102 = 0;
              }
              unint64_t v123 = (uint64_t *)&v102[8 * v98];
              *unint64_t v123 = v46;
              uint64_t v49 = v123 + 1;
              while (v47 != v97)
              {
                uint64_t v124 = *--v47;
                *--unint64_t v123 = v124;
              }
              v45[178] = v123;
              v45[179] = v49;
              v45[180] = &v102[8 * v101];
              if (v97) {
                operator delete(v97);
              }
            }
            else
            {
              *unint64_t v47 = v46;
              uint64_t v49 = v47 + 1;
            }
            v45[179] = v49;
            break;
          case 0x1C:
            unint64_t v50 = *(void **)a1[2];
            uint64_t v51 = *(_DWORD *)(a1[3] + 48) & 0x3FFFFLL;
            unint64_t v52 = (uint64_t *)v50[182];
            unint64_t v53 = v50[183];
            if ((unint64_t)v52 >= v53)
            {
              uint64_t v103 = (uint64_t *)v50[181];
              uint64_t v104 = v52 - v103;
              if ((unint64_t)(v104 + 1) >> 61) {
LABEL_180:
              }
                sub_566C();
              unint64_t v105 = v53 - (void)v103;
              unint64_t v106 = (uint64_t)(v53 - (void)v103) >> 2;
              if (v106 <= v104 + 1) {
                unint64_t v106 = v104 + 1;
              }
              if (v105 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v107 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v107 = v106;
              }
              if (v107)
              {
                uint64_t v108 = (char *)sub_5714((uint64_t)(v50 + 183), v107);
                unint64_t v52 = (uint64_t *)v50[182];
                uint64_t v103 = (uint64_t *)v50[181];
              }
              else
              {
                uint64_t v108 = 0;
              }
              unint64_t v125 = (uint64_t *)&v108[8 * v104];
              *unint64_t v125 = v51;
              uint64_t v54 = v125 + 1;
              while (v52 != v103)
              {
                uint64_t v126 = *--v52;
                *--unint64_t v125 = v126;
              }
              v50[181] = v125;
              v50[182] = v54;
              v50[183] = &v108[8 * v107];
              if (v103) {
                operator delete(v103);
              }
            }
            else
            {
              uint64_t *v52 = v51;
              uint64_t v54 = v52 + 1;
            }
            v50[182] = v54;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_E7EC0(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    unint64_t v141 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    unint64_t v140 = *v141;
    uint64_t v142 = (char *)v141[1] - (char *)*v141;
    if (v142)
    {
      unint64_t v143 = v142 >> 2;
      if (v143 <= 1) {
        unint64_t v143 = 1;
      }
      do
      {
        int v144 = *v140++;
        switch(v144)
        {
          case 288:
            uint64_t v145 = *(_DWORD *)(a1[3] + 44) & 0x1FFFFF;
            unint64_t v146 = (void *)(*(void *)a1[2] + 7696);
            goto LABEL_194;
          case 289:
            uint64_t v145 = *(_DWORD *)(a1[3] + 48) & 0x1FFFFF;
            unint64_t v146 = (void *)(*(void *)a1[2] + 7720);
            goto LABEL_194;
          case 290:
            uint64_t v145 = *(_WORD *)(a1[3] + 56) & 0x7FFF;
            unint64_t v146 = (void *)(*(void *)a1[2] + 7744);
            goto LABEL_194;
          case 291:
            uint64_t v145 = *(_DWORD *)(a1[3] + 52) & 0x1FFFFF;
            unint64_t v146 = (void *)(*(void *)a1[2] + 7768);
            goto LABEL_194;
          case 292:
            uint64_t v145 = *(_DWORD *)(a1[3] + 32) & 0x7FFFF;
            unint64_t v146 = (void *)(*(void *)a1[2] + 7792);
            goto LABEL_194;
          case 293:
            uint64_t v145 = *(_DWORD *)(a1[3] + 24) & 0x7FFFF;
            unint64_t v146 = (void *)(*(void *)a1[2] + 7816);
            goto LABEL_194;
          case 294:
            uint64_t v145 = *(_DWORD *)(a1[3] + 28) & 0x7FFFF;
            unint64_t v146 = (void *)(*(void *)a1[2] + 7840);
            goto LABEL_194;
          case 295:
            uint64_t v145 = *(_DWORD *)(a1[3] + 20) & 0x7FFFF;
            unint64_t v146 = (void *)(*(void *)a1[2] + 7864);
            goto LABEL_194;
          case 296:
            uint64_t v145 = *(_DWORD *)(a1[3] + 40) & 0x1FFFFF;
            unint64_t v146 = (void *)(*(void *)a1[2] + 7888);
            goto LABEL_194;
          case 297:
            uint64_t v145 = *(_DWORD *)(a1[3] + 36) & 0x1FFFFF;
            unint64_t v146 = (void *)(*(void *)a1[2] + 7912);
LABEL_194:
            *(void *)(*v146 - 8) += v145;
            break;
          default:
            break;
        }
        --v143;
      }
      while (v143);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    int v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0x120:
            uint64_t v10 = *(void **)a1[2];
            uint64_t v11 = *(_DWORD *)(a1[3] + 44) & 0x1FFFFFLL;
            uint64_t v12 = (uint64_t *)v10[962];
            unint64_t v13 = v10[963];
            if ((unint64_t)v12 >= v13)
            {
              unint64_t v60 = (uint64_t *)v10[961];
              uint64_t v61 = v12 - v60;
              if ((unint64_t)(v61 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v62 = v13 - (void)v60;
              unint64_t v63 = (uint64_t)(v13 - (void)v60) >> 2;
              if (v63 <= v61 + 1) {
                unint64_t v63 = v61 + 1;
              }
              if (v62 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v64 = v63;
              }
              if (v64)
              {
                unint64_t v65 = (char *)sub_5714((uint64_t)(v10 + 963), v64);
                uint64_t v12 = (uint64_t *)v10[962];
                unint64_t v60 = (uint64_t *)v10[961];
              }
              else
              {
                unint64_t v65 = 0;
              }
              uint64_t v120 = (uint64_t *)&v65[8 * v61];
              *uint64_t v120 = v11;
              unint64_t v14 = v120 + 1;
              while (v12 != v60)
              {
                uint64_t v121 = *--v12;
                *--uint64_t v120 = v121;
              }
              v10[961] = v120;
              v10[962] = v14;
              v10[963] = &v65[8 * v64];
              if (v60) {
                operator delete(v60);
              }
            }
            else
            {
              *uint64_t v12 = v11;
              unint64_t v14 = v12 + 1;
            }
            v10[962] = v14;
            break;
          case 0x121:
            unint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_DWORD *)(a1[3] + 48) & 0x1FFFFFLL;
            uint64_t v17 = (uint64_t *)v15[965];
            unint64_t v18 = v15[966];
            if ((unint64_t)v17 >= v18)
            {
              uint64_t v66 = (uint64_t *)v15[964];
              uint64_t v67 = v17 - v66;
              if ((unint64_t)(v67 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v68 = v18 - (void)v66;
              unint64_t v69 = (uint64_t)(v18 - (void)v66) >> 2;
              if (v69 <= v67 + 1) {
                unint64_t v69 = v67 + 1;
              }
              if (v68 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v70 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v70 = v69;
              }
              if (v70)
              {
                unint64_t v71 = (char *)sub_5714((uint64_t)(v15 + 966), v70);
                uint64_t v17 = (uint64_t *)v15[965];
                uint64_t v66 = (uint64_t *)v15[964];
              }
              else
              {
                unint64_t v71 = 0;
              }
              uint64_t v122 = (uint64_t *)&v71[8 * v67];
              *uint64_t v122 = v16;
              unint64_t v19 = v122 + 1;
              while (v17 != v66)
              {
                uint64_t v123 = *--v17;
                *--uint64_t v122 = v123;
              }
              v15[964] = v122;
              v15[965] = v19;
              v15[966] = &v71[8 * v70];
              if (v66) {
                operator delete(v66);
              }
            }
            else
            {
              uint64_t *v17 = v16;
              unint64_t v19 = v17 + 1;
            }
            v15[965] = v19;
            break;
          case 0x122:
            unint64_t v20 = *(void **)a1[2];
            uint64_t v21 = *(_WORD *)(a1[3] + 56) & 0x7FFF;
            uint64_t v22 = (char *)v20[968];
            unint64_t v23 = v20[969];
            if ((unint64_t)v22 >= v23)
            {
              uint64_t v72 = (char *)v20[967];
              uint64_t v73 = (v22 - v72) >> 3;
              if ((unint64_t)(v73 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v74 = v23 - (void)v72;
              unint64_t v75 = (uint64_t)(v23 - (void)v72) >> 2;
              if (v75 <= v73 + 1) {
                unint64_t v75 = v73 + 1;
              }
              if (v74 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v76 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v76 = v75;
              }
              if (v76)
              {
                unint64_t v77 = (char *)sub_5714((uint64_t)(v20 + 969), v76);
                uint64_t v22 = (char *)v20[968];
                uint64_t v72 = (char *)v20[967];
              }
              else
              {
                unint64_t v77 = 0;
              }
              uint64_t v124 = &v77[8 * v73];
              *(void *)uint64_t v124 = v21;
              unint64_t v24 = v124 + 8;
              while (v22 != v72)
              {
                uint64_t v125 = *((void *)v22 - 1);
                v22 -= 8;
                *((void *)v124 - 1) = v125;
                v124 -= 8;
              }
              v20[967] = v124;
              v20[968] = v24;
              v20[969] = &v77[8 * v76];
              if (v72) {
                operator delete(v72);
              }
            }
            else
            {
              *(void *)uint64_t v22 = v21;
              unint64_t v24 = v22 + 8;
            }
            v20[968] = v24;
            break;
          case 0x123:
            unint64_t v25 = *(void **)a1[2];
            uint64_t v26 = *(_DWORD *)(a1[3] + 52) & 0x1FFFFFLL;
            uint64_t v27 = (uint64_t *)v25[971];
            unint64_t v28 = v25[972];
            if ((unint64_t)v27 >= v28)
            {
              uint64_t v78 = (uint64_t *)v25[970];
              uint64_t v79 = v27 - v78;
              if ((unint64_t)(v79 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v80 = v28 - (void)v78;
              unint64_t v81 = (uint64_t)(v28 - (void)v78) >> 2;
              if (v81 <= v79 + 1) {
                unint64_t v81 = v79 + 1;
              }
              if (v80 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v82 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v82 = v81;
              }
              if (v82)
              {
                unint64_t v83 = (char *)sub_5714((uint64_t)(v25 + 972), v82);
                uint64_t v27 = (uint64_t *)v25[971];
                uint64_t v78 = (uint64_t *)v25[970];
              }
              else
              {
                unint64_t v83 = 0;
              }
              uint64_t v126 = (uint64_t *)&v83[8 * v79];
              uint64_t *v126 = v26;
              unint64_t v29 = v126 + 1;
              while (v27 != v78)
              {
                uint64_t v127 = *--v27;
                *--uint64_t v126 = v127;
              }
              v25[970] = v126;
              v25[971] = v29;
              v25[972] = &v83[8 * v82];
              if (v78) {
                operator delete(v78);
              }
            }
            else
            {
              *uint64_t v27 = v26;
              unint64_t v29 = v27 + 1;
            }
            v25[971] = v29;
            break;
          case 0x124:
            unint64_t v30 = *(void **)a1[2];
            uint64_t v31 = *(_DWORD *)(a1[3] + 32) & 0x7FFFFLL;
            unint64_t v32 = (uint64_t *)v30[974];
            unint64_t v33 = v30[975];
            if ((unint64_t)v32 >= v33)
            {
              unint64_t v84 = (uint64_t *)v30[973];
              uint64_t v85 = v32 - v84;
              if ((unint64_t)(v85 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v86 = v33 - (void)v84;
              unint64_t v87 = (uint64_t)(v33 - (void)v84) >> 2;
              if (v87 <= v85 + 1) {
                unint64_t v87 = v85 + 1;
              }
              if (v86 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v88 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v88 = v87;
              }
              if (v88)
              {
                unint64_t v89 = (char *)sub_5714((uint64_t)(v30 + 975), v88);
                unint64_t v32 = (uint64_t *)v30[974];
                unint64_t v84 = (uint64_t *)v30[973];
              }
              else
              {
                unint64_t v89 = 0;
              }
              unint64_t v128 = (uint64_t *)&v89[8 * v85];
              *unint64_t v128 = v31;
              unint64_t v34 = v128 + 1;
              while (v32 != v84)
              {
                uint64_t v129 = *--v32;
                *--unint64_t v128 = v129;
              }
              v30[973] = v128;
              v30[974] = v34;
              v30[975] = &v89[8 * v88];
              if (v84) {
                operator delete(v84);
              }
            }
            else
            {
              *unint64_t v32 = v31;
              unint64_t v34 = v32 + 1;
            }
            v30[974] = v34;
            break;
          case 0x125:
            unint64_t v35 = *(void **)a1[2];
            uint64_t v36 = *(_DWORD *)(a1[3] + 24) & 0x7FFFFLL;
            uint64_t v37 = (uint64_t *)v35[977];
            unint64_t v38 = v35[978];
            if ((unint64_t)v37 >= v38)
            {
              unint64_t v90 = (uint64_t *)v35[976];
              uint64_t v91 = v37 - v90;
              if ((unint64_t)(v91 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v92 = v38 - (void)v90;
              unint64_t v93 = (uint64_t)(v38 - (void)v90) >> 2;
              if (v93 <= v91 + 1) {
                unint64_t v93 = v91 + 1;
              }
              if (v92 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v94 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v94 = v93;
              }
              if (v94)
              {
                unint64_t v95 = (char *)sub_5714((uint64_t)(v35 + 978), v94);
                uint64_t v37 = (uint64_t *)v35[977];
                unint64_t v90 = (uint64_t *)v35[976];
              }
              else
              {
                unint64_t v95 = 0;
              }
              unint64_t v130 = (uint64_t *)&v95[8 * v91];
              *unint64_t v130 = v36;
              unint64_t v39 = v130 + 1;
              while (v37 != v90)
              {
                uint64_t v131 = *--v37;
                *--unint64_t v130 = v131;
              }
              v35[976] = v130;
              v35[977] = v39;
              v35[978] = &v95[8 * v94];
              if (v90) {
                operator delete(v90);
              }
            }
            else
            {
              uint64_t *v37 = v36;
              unint64_t v39 = v37 + 1;
            }
            v35[977] = v39;
            break;
          case 0x126:
            uint64_t v40 = *(void **)a1[2];
            uint64_t v41 = *(_DWORD *)(a1[3] + 28) & 0x7FFFFLL;
            uint64_t v42 = (uint64_t *)v40[980];
            unint64_t v43 = v40[981];
            if ((unint64_t)v42 >= v43)
            {
              unint64_t v96 = (uint64_t *)v40[979];
              uint64_t v97 = v42 - v96;
              if ((unint64_t)(v97 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v98 = v43 - (void)v96;
              unint64_t v99 = (uint64_t)(v43 - (void)v96) >> 2;
              if (v99 <= v97 + 1) {
                unint64_t v99 = v97 + 1;
              }
              if (v98 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v100 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v100 = v99;
              }
              if (v100)
              {
                unint64_t v101 = (char *)sub_5714((uint64_t)(v40 + 981), v100);
                uint64_t v42 = (uint64_t *)v40[980];
                unint64_t v96 = (uint64_t *)v40[979];
              }
              else
              {
                unint64_t v101 = 0;
              }
              int v132 = (uint64_t *)&v101[8 * v97];
              *int v132 = v41;
              unint64_t v44 = v132 + 1;
              while (v42 != v96)
              {
                uint64_t v133 = *--v42;
                *--int v132 = v133;
              }
              v40[979] = v132;
              v40[980] = v44;
              v40[981] = &v101[8 * v100];
              if (v96) {
                operator delete(v96);
              }
            }
            else
            {
              uint64_t *v42 = v41;
              unint64_t v44 = v42 + 1;
            }
            v40[980] = v44;
            break;
          case 0x127:
            uint64_t v45 = *(void **)a1[2];
            uint64_t v46 = *(_DWORD *)(a1[3] + 20) & 0x7FFFFLL;
            unint64_t v47 = (uint64_t *)v45[983];
            unint64_t v48 = v45[984];
            if ((unint64_t)v47 >= v48)
            {
              unint64_t v102 = (uint64_t *)v45[982];
              uint64_t v103 = v47 - v102;
              if ((unint64_t)(v103 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v104 = v48 - (void)v102;
              unint64_t v105 = (uint64_t)(v48 - (void)v102) >> 2;
              if (v105 <= v103 + 1) {
                unint64_t v105 = v103 + 1;
              }
              if (v104 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v106 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v106 = v105;
              }
              if (v106)
              {
                unint64_t v107 = (char *)sub_5714((uint64_t)(v45 + 984), v106);
                unint64_t v47 = (uint64_t *)v45[983];
                unint64_t v102 = (uint64_t *)v45[982];
              }
              else
              {
                unint64_t v107 = 0;
              }
              unint64_t v134 = (uint64_t *)&v107[8 * v103];
              *unint64_t v134 = v46;
              uint64_t v49 = v134 + 1;
              while (v47 != v102)
              {
                uint64_t v135 = *--v47;
                *--unint64_t v134 = v135;
              }
              v45[982] = v134;
              v45[983] = v49;
              v45[984] = &v107[8 * v106];
              if (v102) {
                operator delete(v102);
              }
            }
            else
            {
              *unint64_t v47 = v46;
              uint64_t v49 = v47 + 1;
            }
            v45[983] = v49;
            break;
          case 0x128:
            unint64_t v50 = *(void **)a1[2];
            uint64_t v51 = *(_DWORD *)(a1[3] + 40) & 0x1FFFFFLL;
            unint64_t v52 = (uint64_t *)v50[986];
            unint64_t v53 = v50[987];
            if ((unint64_t)v52 >= v53)
            {
              uint64_t v108 = (uint64_t *)v50[985];
              uint64_t v109 = v52 - v108;
              if ((unint64_t)(v109 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v110 = v53 - (void)v108;
              unint64_t v111 = (uint64_t)(v53 - (void)v108) >> 2;
              if (v111 <= v109 + 1) {
                unint64_t v111 = v109 + 1;
              }
              if (v110 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v112 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v112 = v111;
              }
              if (v112)
              {
                unint64_t v113 = (char *)sub_5714((uint64_t)(v50 + 987), v112);
                unint64_t v52 = (uint64_t *)v50[986];
                uint64_t v108 = (uint64_t *)v50[985];
              }
              else
              {
                unint64_t v113 = 0;
              }
              unint64_t v136 = (uint64_t *)&v113[8 * v109];
              uint64_t *v136 = v51;
              uint64_t v54 = v136 + 1;
              while (v52 != v108)
              {
                uint64_t v137 = *--v52;
                *--unint64_t v136 = v137;
              }
              v50[985] = v136;
              v50[986] = v54;
              v50[987] = &v113[8 * v112];
              if (v108) {
                operator delete(v108);
              }
            }
            else
            {
              uint64_t *v52 = v51;
              uint64_t v54 = v52 + 1;
            }
            v50[986] = v54;
            break;
          case 0x129:
            unint64_t v55 = *(void **)a1[2];
            uint64_t v56 = *(_DWORD *)(a1[3] + 36) & 0x1FFFFFLL;
            unint64_t v57 = (uint64_t *)v55[989];
            unint64_t v58 = v55[990];
            if ((unint64_t)v57 >= v58)
            {
              unint64_t v114 = (uint64_t *)v55[988];
              uint64_t v115 = v57 - v114;
              if ((unint64_t)(v115 + 1) >> 61) {
LABEL_198:
              }
                sub_566C();
              unint64_t v116 = v58 - (void)v114;
              unint64_t v117 = (uint64_t)(v58 - (void)v114) >> 2;
              if (v117 <= v115 + 1) {
                unint64_t v117 = v115 + 1;
              }
              if (v116 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v118 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v118 = v117;
              }
              if (v118)
              {
                unint64_t v119 = (char *)sub_5714((uint64_t)(v55 + 990), v118);
                unint64_t v57 = (uint64_t *)v55[989];
                unint64_t v114 = (uint64_t *)v55[988];
              }
              else
              {
                unint64_t v119 = 0;
              }
              uint64_t v138 = (uint64_t *)&v119[8 * v115];
              *uint64_t v138 = v56;
              unint64_t v59 = v138 + 1;
              while (v57 != v114)
              {
                uint64_t v139 = *--v57;
                *--uint64_t v138 = v139;
              }
              v55[988] = v138;
              v55[989] = v59;
              v55[990] = &v119[8 * v118];
              if (v114) {
                operator delete(v114);
              }
            }
            else
            {
              *unint64_t v57 = v56;
              unint64_t v59 = v57 + 1;
            }
            v55[989] = v59;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_E8948(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    unint64_t v219 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    unint64_t v218 = *v219;
    uint64_t v220 = (char *)v219[1] - (char *)*v219;
    if (v220)
    {
      unint64_t v221 = v220 >> 2;
      if (v221 <= 1) {
        unint64_t v221 = 1;
      }
      do
      {
        int v222 = *v218++;
        switch(v222)
        {
          case 257:
            uint64_t v223 = *(_DWORD *)(a1[3] + 36) & 0x3FFFFF;
            uint64_t v224 = (void *)(*(void *)a1[2] + 6952);
            goto LABEL_302;
          case 258:
            uint64_t v223 = *(_DWORD *)(a1[3] + 68) & 0x3FFFFF;
            uint64_t v224 = (void *)(*(void *)a1[2] + 6976);
            goto LABEL_302;
          case 259:
            uint64_t v223 = *(_DWORD *)(a1[3] + 32) & 0x3FFFFF;
            uint64_t v224 = (void *)(*(void *)a1[2] + 7000);
            goto LABEL_302;
          case 260:
            uint64_t v223 = *(_DWORD *)(a1[3] + 64) & 0x3FFFFF;
            uint64_t v224 = (void *)(*(void *)a1[2] + 7024);
            goto LABEL_302;
          case 261:
            uint64_t v223 = *(_DWORD *)(a1[3] + 28) & 0x3FFFFF;
            uint64_t v224 = (void *)(*(void *)a1[2] + 7048);
            goto LABEL_302;
          case 262:
            uint64_t v223 = *(_DWORD *)(a1[3] + 60) & 0x3FFFFF;
            uint64_t v224 = (void *)(*(void *)a1[2] + 7072);
            goto LABEL_302;
          case 263:
            uint64_t v223 = *(_DWORD *)(a1[3] + 44) & 0x3FFFFF;
            uint64_t v224 = (void *)(*(void *)a1[2] + 7096);
            goto LABEL_302;
          case 264:
            uint64_t v223 = *(_DWORD *)(a1[3] + 76) & 0x3FFFFF;
            uint64_t v224 = (void *)(*(void *)a1[2] + 7120);
            goto LABEL_302;
          case 265:
            uint64_t v223 = *(_DWORD *)(a1[3] + 48) & 0x7FFFF;
            uint64_t v224 = (void *)(*(void *)a1[2] + 7144);
            goto LABEL_302;
          case 266:
            uint64_t v223 = *(_DWORD *)(a1[3] + 40) & 0x3FFFFF;
            uint64_t v224 = (void *)(*(void *)a1[2] + 7168);
            goto LABEL_302;
          case 267:
            uint64_t v223 = *(_DWORD *)(a1[3] + 72) & 0x3FFFFF;
            uint64_t v224 = (void *)(*(void *)a1[2] + 7192);
            goto LABEL_302;
          case 268:
            uint64_t v223 = *(_DWORD *)(a1[3] + 20) & 0x3FFFFF;
            uint64_t v224 = (void *)(*(void *)a1[2] + 7216);
            goto LABEL_302;
          case 269:
            uint64_t v223 = *(_DWORD *)(a1[3] + 52) & 0x3FFFFF;
            uint64_t v224 = (void *)(*(void *)a1[2] + 7240);
            goto LABEL_302;
          case 270:
            uint64_t v223 = *(_DWORD *)(a1[3] + 24) & 0x3FFFFF;
            uint64_t v224 = (void *)(*(void *)a1[2] + 7264);
            goto LABEL_302;
          case 271:
            uint64_t v223 = *(_DWORD *)(a1[3] + 56) & 0x3FFFFF;
            uint64_t v224 = (void *)(*(void *)a1[2] + 7288);
            goto LABEL_302;
          case 272:
            uint64_t v223 = *(_DWORD *)(a1[3] + 80) & 0x7FFFF;
            uint64_t v224 = (void *)(*(void *)a1[2] + 7312);
LABEL_302:
            *(void *)(*v224 - 8) += v223;
            break;
          default:
            break;
        }
        --v221;
      }
      while (v221);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    int v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0x101:
            uint64_t v10 = *(void **)a1[2];
            uint64_t v11 = *(_DWORD *)(a1[3] + 36) & 0x3FFFFFLL;
            uint64_t v12 = (uint64_t *)v10[869];
            unint64_t v13 = v10[870];
            if ((unint64_t)v12 >= v13)
            {
              unint64_t v90 = (uint64_t *)v10[868];
              uint64_t v91 = v12 - v90;
              if ((unint64_t)(v91 + 1) >> 61) {
                goto LABEL_306;
              }
              unint64_t v92 = v13 - (void)v90;
              unint64_t v93 = (uint64_t)(v13 - (void)v90) >> 2;
              if (v93 <= v91 + 1) {
                unint64_t v93 = v91 + 1;
              }
              if (v92 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v94 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v94 = v93;
              }
              if (v94)
              {
                unint64_t v95 = (char *)sub_5714((uint64_t)(v10 + 870), v94);
                uint64_t v12 = (uint64_t *)v10[869];
                unint64_t v90 = (uint64_t *)v10[868];
              }
              else
              {
                unint64_t v95 = 0;
              }
              uint64_t v186 = (uint64_t *)&v95[8 * v91];
              *uint64_t v186 = v11;
              unint64_t v14 = v186 + 1;
              while (v12 != v90)
              {
                uint64_t v187 = *--v12;
                *--uint64_t v186 = v187;
              }
              v10[868] = v186;
              v10[869] = v14;
              v10[870] = &v95[8 * v94];
              if (v90) {
                operator delete(v90);
              }
            }
            else
            {
              *uint64_t v12 = v11;
              unint64_t v14 = v12 + 1;
            }
            v10[869] = v14;
            break;
          case 0x102:
            unint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_DWORD *)(a1[3] + 68) & 0x3FFFFFLL;
            uint64_t v17 = (uint64_t *)v15[872];
            unint64_t v18 = v15[873];
            if ((unint64_t)v17 >= v18)
            {
              unint64_t v96 = (uint64_t *)v15[871];
              uint64_t v97 = v17 - v96;
              if ((unint64_t)(v97 + 1) >> 61) {
                goto LABEL_306;
              }
              unint64_t v98 = v18 - (void)v96;
              unint64_t v99 = (uint64_t)(v18 - (void)v96) >> 2;
              if (v99 <= v97 + 1) {
                unint64_t v99 = v97 + 1;
              }
              if (v98 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v100 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v100 = v99;
              }
              if (v100)
              {
                unint64_t v101 = (char *)sub_5714((uint64_t)(v15 + 873), v100);
                uint64_t v17 = (uint64_t *)v15[872];
                unint64_t v96 = (uint64_t *)v15[871];
              }
              else
              {
                unint64_t v101 = 0;
              }
              unint64_t v188 = (uint64_t *)&v101[8 * v97];
              *unint64_t v188 = v16;
              unint64_t v19 = v188 + 1;
              while (v17 != v96)
              {
                uint64_t v189 = *--v17;
                *--unint64_t v188 = v189;
              }
              v15[871] = v188;
              v15[872] = v19;
              v15[873] = &v101[8 * v100];
              if (v96) {
                operator delete(v96);
              }
            }
            else
            {
              uint64_t *v17 = v16;
              unint64_t v19 = v17 + 1;
            }
            v15[872] = v19;
            break;
          case 0x103:
            unint64_t v20 = *(void **)a1[2];
            uint64_t v21 = *(_DWORD *)(a1[3] + 32) & 0x3FFFFFLL;
            uint64_t v22 = (uint64_t *)v20[875];
            unint64_t v23 = v20[876];
            if ((unint64_t)v22 >= v23)
            {
              unint64_t v102 = (uint64_t *)v20[874];
              uint64_t v103 = v22 - v102;
              if ((unint64_t)(v103 + 1) >> 61) {
                goto LABEL_306;
              }
              unint64_t v104 = v23 - (void)v102;
              unint64_t v105 = (uint64_t)(v23 - (void)v102) >> 2;
              if (v105 <= v103 + 1) {
                unint64_t v105 = v103 + 1;
              }
              if (v104 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v106 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v106 = v105;
              }
              if (v106)
              {
                unint64_t v107 = (char *)sub_5714((uint64_t)(v20 + 876), v106);
                uint64_t v22 = (uint64_t *)v20[875];
                unint64_t v102 = (uint64_t *)v20[874];
              }
              else
              {
                unint64_t v107 = 0;
              }
              unint64_t v190 = (uint64_t *)&v107[8 * v103];
              uint64_t *v190 = v21;
              unint64_t v24 = v190 + 1;
              while (v22 != v102)
              {
                uint64_t v191 = *--v22;
                *--unint64_t v190 = v191;
              }
              v20[874] = v190;
              v20[875] = v24;
              v20[876] = &v107[8 * v106];
              if (v102) {
                operator delete(v102);
              }
            }
            else
            {
              *uint64_t v22 = v21;
              unint64_t v24 = v22 + 1;
            }
            v20[875] = v24;
            break;
          case 0x104:
            unint64_t v25 = *(void **)a1[2];
            uint64_t v26 = *(_DWORD *)(a1[3] + 64) & 0x3FFFFFLL;
            uint64_t v27 = (uint64_t *)v25[878];
            unint64_t v28 = v25[879];
            if ((unint64_t)v27 >= v28)
            {
              uint64_t v108 = (uint64_t *)v25[877];
              uint64_t v109 = v27 - v108;
              if ((unint64_t)(v109 + 1) >> 61) {
                goto LABEL_306;
              }
              unint64_t v110 = v28 - (void)v108;
              unint64_t v111 = (uint64_t)(v28 - (void)v108) >> 2;
              if (v111 <= v109 + 1) {
                unint64_t v111 = v109 + 1;
              }
              if (v110 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v112 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v112 = v111;
              }
              if (v112)
              {
                unint64_t v113 = (char *)sub_5714((uint64_t)(v25 + 879), v112);
                uint64_t v27 = (uint64_t *)v25[878];
                uint64_t v108 = (uint64_t *)v25[877];
              }
              else
              {
                unint64_t v113 = 0;
              }
              uint64_t v192 = (uint64_t *)&v113[8 * v109];
              uint64_t *v192 = v26;
              unint64_t v29 = v192 + 1;
              while (v27 != v108)
              {
                uint64_t v193 = *--v27;
                *--uint64_t v192 = v193;
              }
              v25[877] = v192;
              v25[878] = v29;
              v25[879] = &v113[8 * v112];
              if (v108) {
                operator delete(v108);
              }
            }
            else
            {
              *uint64_t v27 = v26;
              unint64_t v29 = v27 + 1;
            }
            v25[878] = v29;
            break;
          case 0x105:
            unint64_t v30 = *(void **)a1[2];
            uint64_t v31 = *(_DWORD *)(a1[3] + 28) & 0x3FFFFFLL;
            unint64_t v32 = (uint64_t *)v30[881];
            unint64_t v33 = v30[882];
            if ((unint64_t)v32 >= v33)
            {
              unint64_t v114 = (uint64_t *)v30[880];
              uint64_t v115 = v32 - v114;
              if ((unint64_t)(v115 + 1) >> 61) {
                goto LABEL_306;
              }
              unint64_t v116 = v33 - (void)v114;
              unint64_t v117 = (uint64_t)(v33 - (void)v114) >> 2;
              if (v117 <= v115 + 1) {
                unint64_t v117 = v115 + 1;
              }
              if (v116 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v118 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v118 = v117;
              }
              if (v118)
              {
                unint64_t v119 = (char *)sub_5714((uint64_t)(v30 + 882), v118);
                unint64_t v32 = (uint64_t *)v30[881];
                unint64_t v114 = (uint64_t *)v30[880];
              }
              else
              {
                unint64_t v119 = 0;
              }
              unint64_t v194 = (uint64_t *)&v119[8 * v115];
              *unint64_t v194 = v31;
              unint64_t v34 = v194 + 1;
              while (v32 != v114)
              {
                uint64_t v195 = *--v32;
                *--unint64_t v194 = v195;
              }
              v30[880] = v194;
              v30[881] = v34;
              v30[882] = &v119[8 * v118];
              if (v114) {
                operator delete(v114);
              }
            }
            else
            {
              *unint64_t v32 = v31;
              unint64_t v34 = v32 + 1;
            }
            v30[881] = v34;
            break;
          case 0x106:
            unint64_t v35 = *(void **)a1[2];
            uint64_t v36 = *(_DWORD *)(a1[3] + 60) & 0x3FFFFFLL;
            uint64_t v37 = (uint64_t *)v35[884];
            unint64_t v38 = v35[885];
            if ((unint64_t)v37 >= v38)
            {
              uint64_t v120 = (uint64_t *)v35[883];
              uint64_t v121 = v37 - v120;
              if ((unint64_t)(v121 + 1) >> 61) {
                goto LABEL_306;
              }
              unint64_t v122 = v38 - (void)v120;
              unint64_t v123 = (uint64_t)(v38 - (void)v120) >> 2;
              if (v123 <= v121 + 1) {
                unint64_t v123 = v121 + 1;
              }
              if (v122 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v124 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v124 = v123;
              }
              if (v124)
              {
                uint64_t v125 = (char *)sub_5714((uint64_t)(v35 + 885), v124);
                uint64_t v37 = (uint64_t *)v35[884];
                uint64_t v120 = (uint64_t *)v35[883];
              }
              else
              {
                uint64_t v125 = 0;
              }
              unint64_t v196 = (uint64_t *)&v125[8 * v121];
              *unint64_t v196 = v36;
              unint64_t v39 = v196 + 1;
              while (v37 != v120)
              {
                uint64_t v197 = *--v37;
                *--unint64_t v196 = v197;
              }
              v35[883] = v196;
              v35[884] = v39;
              v35[885] = &v125[8 * v124];
              if (v120) {
                operator delete(v120);
              }
            }
            else
            {
              uint64_t *v37 = v36;
              unint64_t v39 = v37 + 1;
            }
            v35[884] = v39;
            break;
          case 0x107:
            uint64_t v40 = *(void **)a1[2];
            uint64_t v41 = *(_DWORD *)(a1[3] + 44) & 0x3FFFFFLL;
            uint64_t v42 = (uint64_t *)v40[887];
            unint64_t v43 = v40[888];
            if ((unint64_t)v42 >= v43)
            {
              uint64_t v126 = (uint64_t *)v40[886];
              uint64_t v127 = v42 - v126;
              if ((unint64_t)(v127 + 1) >> 61) {
                goto LABEL_306;
              }
              unint64_t v128 = v43 - (void)v126;
              unint64_t v129 = (uint64_t)(v43 - (void)v126) >> 2;
              if (v129 <= v127 + 1) {
                unint64_t v129 = v127 + 1;
              }
              if (v128 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v130 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v130 = v129;
              }
              if (v130)
              {
                uint64_t v131 = (char *)sub_5714((uint64_t)(v40 + 888), v130);
                uint64_t v42 = (uint64_t *)v40[887];
                uint64_t v126 = (uint64_t *)v40[886];
              }
              else
              {
                uint64_t v131 = 0;
              }
              uint64_t v198 = (uint64_t *)&v131[8 * v127];
              *uint64_t v198 = v41;
              unint64_t v44 = v198 + 1;
              while (v42 != v126)
              {
                uint64_t v199 = *--v42;
                *--uint64_t v198 = v199;
              }
              v40[886] = v198;
              v40[887] = v44;
              v40[888] = &v131[8 * v130];
              if (v126) {
                operator delete(v126);
              }
            }
            else
            {
              uint64_t *v42 = v41;
              unint64_t v44 = v42 + 1;
            }
            v40[887] = v44;
            break;
          case 0x108:
            uint64_t v45 = *(void **)a1[2];
            uint64_t v46 = *(_DWORD *)(a1[3] + 76) & 0x3FFFFFLL;
            unint64_t v47 = (uint64_t *)v45[890];
            unint64_t v48 = v45[891];
            if ((unint64_t)v47 >= v48)
            {
              int v132 = (uint64_t *)v45[889];
              uint64_t v133 = v47 - v132;
              if ((unint64_t)(v133 + 1) >> 61) {
                goto LABEL_306;
              }
              unint64_t v134 = v48 - (void)v132;
              unint64_t v135 = (uint64_t)(v48 - (void)v132) >> 2;
              if (v135 <= v133 + 1) {
                unint64_t v135 = v133 + 1;
              }
              if (v134 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v136 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v136 = v135;
              }
              if (v136)
              {
                uint64_t v137 = (char *)sub_5714((uint64_t)(v45 + 891), v136);
                unint64_t v47 = (uint64_t *)v45[890];
                int v132 = (uint64_t *)v45[889];
              }
              else
              {
                uint64_t v137 = 0;
              }
              unint64_t v200 = (uint64_t *)&v137[8 * v133];
              uint64_t *v200 = v46;
              uint64_t v49 = v200 + 1;
              while (v47 != v132)
              {
                uint64_t v201 = *--v47;
                *--unint64_t v200 = v201;
              }
              v45[889] = v200;
              v45[890] = v49;
              v45[891] = &v137[8 * v136];
              if (v132) {
                operator delete(v132);
              }
            }
            else
            {
              *unint64_t v47 = v46;
              uint64_t v49 = v47 + 1;
            }
            v45[890] = v49;
            break;
          case 0x109:
            unint64_t v50 = *(void **)a1[2];
            uint64_t v51 = *(_DWORD *)(a1[3] + 48) & 0x7FFFFLL;
            unint64_t v52 = (uint64_t *)v50[893];
            unint64_t v53 = v50[894];
            if ((unint64_t)v52 >= v53)
            {
              uint64_t v138 = (uint64_t *)v50[892];
              uint64_t v139 = v52 - v138;
              if ((unint64_t)(v139 + 1) >> 61) {
                goto LABEL_306;
              }
              unint64_t v140 = v53 - (void)v138;
              unint64_t v141 = (uint64_t)(v53 - (void)v138) >> 2;
              if (v141 <= v139 + 1) {
                unint64_t v141 = v139 + 1;
              }
              if (v140 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v142 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v142 = v141;
              }
              if (v142)
              {
                unint64_t v143 = (char *)sub_5714((uint64_t)(v50 + 894), v142);
                unint64_t v52 = (uint64_t *)v50[893];
                uint64_t v138 = (uint64_t *)v50[892];
              }
              else
              {
                unint64_t v143 = 0;
              }
              unint64_t v202 = (uint64_t *)&v143[8 * v139];
              *unint64_t v202 = v51;
              uint64_t v54 = v202 + 1;
              while (v52 != v138)
              {
                uint64_t v203 = *--v52;
                *--unint64_t v202 = v203;
              }
              v50[892] = v202;
              v50[893] = v54;
              v50[894] = &v143[8 * v142];
              if (v138) {
                operator delete(v138);
              }
            }
            else
            {
              uint64_t *v52 = v51;
              uint64_t v54 = v52 + 1;
            }
            v50[893] = v54;
            break;
          case 0x10A:
            unint64_t v55 = *(void **)a1[2];
            uint64_t v56 = *(_DWORD *)(a1[3] + 40) & 0x3FFFFFLL;
            unint64_t v57 = (uint64_t *)v55[896];
            unint64_t v58 = v55[897];
            if ((unint64_t)v57 >= v58)
            {
              int v144 = (uint64_t *)v55[895];
              uint64_t v145 = v57 - v144;
              if ((unint64_t)(v145 + 1) >> 61) {
                goto LABEL_306;
              }
              unint64_t v146 = v58 - (void)v144;
              unint64_t v147 = (uint64_t)(v58 - (void)v144) >> 2;
              if (v147 <= v145 + 1) {
                unint64_t v147 = v145 + 1;
              }
              if (v146 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v148 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v148 = v147;
              }
              if (v148)
              {
                uint64_t v149 = (char *)sub_5714((uint64_t)(v55 + 897), v148);
                unint64_t v57 = (uint64_t *)v55[896];
                int v144 = (uint64_t *)v55[895];
              }
              else
              {
                uint64_t v149 = 0;
              }
              uint64_t v204 = (uint64_t *)&v149[8 * v145];
              *uint64_t v204 = v56;
              unint64_t v59 = v204 + 1;
              while (v57 != v144)
              {
                uint64_t v205 = *--v57;
                *--uint64_t v204 = v205;
              }
              v55[895] = v204;
              v55[896] = v59;
              v55[897] = &v149[8 * v148];
              if (v144) {
                operator delete(v144);
              }
            }
            else
            {
              *unint64_t v57 = v56;
              unint64_t v59 = v57 + 1;
            }
            v55[896] = v59;
            break;
          case 0x10B:
            unint64_t v60 = *(void **)a1[2];
            uint64_t v61 = *(_DWORD *)(a1[3] + 72) & 0x3FFFFFLL;
            unint64_t v62 = (uint64_t *)v60[899];
            unint64_t v63 = v60[900];
            if ((unint64_t)v62 >= v63)
            {
              uint64_t v150 = (uint64_t *)v60[898];
              uint64_t v151 = v62 - v150;
              if ((unint64_t)(v151 + 1) >> 61) {
                goto LABEL_306;
              }
              unint64_t v152 = v63 - (void)v150;
              unint64_t v153 = (uint64_t)(v63 - (void)v150) >> 2;
              if (v153 <= v151 + 1) {
                unint64_t v153 = v151 + 1;
              }
              if (v152 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v154 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v154 = v153;
              }
              if (v154)
              {
                uint64_t v155 = (char *)sub_5714((uint64_t)(v60 + 900), v154);
                unint64_t v62 = (uint64_t *)v60[899];
                uint64_t v150 = (uint64_t *)v60[898];
              }
              else
              {
                uint64_t v155 = 0;
              }
              unint64_t v206 = (uint64_t *)&v155[8 * v151];
              *unint64_t v206 = v61;
              unint64_t v64 = v206 + 1;
              while (v62 != v150)
              {
                uint64_t v207 = *--v62;
                *--unint64_t v206 = v207;
              }
              v60[898] = v206;
              v60[899] = v64;
              v60[900] = &v155[8 * v154];
              if (v150) {
                operator delete(v150);
              }
            }
            else
            {
              *unint64_t v62 = v61;
              unint64_t v64 = v62 + 1;
            }
            v60[899] = v64;
            break;
          case 0x10C:
            unint64_t v65 = *(void **)a1[2];
            uint64_t v66 = *(_DWORD *)(a1[3] + 20) & 0x3FFFFFLL;
            uint64_t v67 = (uint64_t *)v65[902];
            unint64_t v68 = v65[903];
            if ((unint64_t)v67 >= v68)
            {
              uint64_t v156 = (uint64_t *)v65[901];
              uint64_t v157 = v67 - v156;
              if ((unint64_t)(v157 + 1) >> 61) {
                goto LABEL_306;
              }
              unint64_t v158 = v68 - (void)v156;
              unint64_t v159 = (uint64_t)(v68 - (void)v156) >> 2;
              if (v159 <= v157 + 1) {
                unint64_t v159 = v157 + 1;
              }
              if (v158 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v160 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v160 = v159;
              }
              if (v160)
              {
                uint64_t v161 = (char *)sub_5714((uint64_t)(v65 + 903), v160);
                uint64_t v67 = (uint64_t *)v65[902];
                uint64_t v156 = (uint64_t *)v65[901];
              }
              else
              {
                uint64_t v161 = 0;
              }
              unint64_t v208 = (uint64_t *)&v161[8 * v157];
              *unint64_t v208 = v66;
              unint64_t v69 = v208 + 1;
              while (v67 != v156)
              {
                uint64_t v209 = *--v67;
                *--unint64_t v208 = v209;
              }
              v65[901] = v208;
              v65[902] = v69;
              v65[903] = &v161[8 * v160];
              if (v156) {
                operator delete(v156);
              }
            }
            else
            {
              uint64_t *v67 = v66;
              unint64_t v69 = v67 + 1;
            }
            v65[902] = v69;
            break;
          case 0x10D:
            unint64_t v70 = *(void **)a1[2];
            uint64_t v71 = *(_DWORD *)(a1[3] + 52) & 0x3FFFFFLL;
            uint64_t v72 = (uint64_t *)v70[905];
            unint64_t v73 = v70[906];
            if ((unint64_t)v72 >= v73)
            {
              uint64_t v162 = (uint64_t *)v70[904];
              uint64_t v163 = v72 - v162;
              if ((unint64_t)(v163 + 1) >> 61) {
                goto LABEL_306;
              }
              unint64_t v164 = v73 - (void)v162;
              unint64_t v165 = (uint64_t)(v73 - (void)v162) >> 2;
              if (v165 <= v163 + 1) {
                unint64_t v165 = v163 + 1;
              }
              if (v164 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v166 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v166 = v165;
              }
              if (v166)
              {
                uint64_t v167 = (char *)sub_5714((uint64_t)(v70 + 906), v166);
                uint64_t v72 = (uint64_t *)v70[905];
                uint64_t v162 = (uint64_t *)v70[904];
              }
              else
              {
                uint64_t v167 = 0;
              }
              uint64_t v210 = (uint64_t *)&v167[8 * v163];
              *uint64_t v210 = v71;
              unint64_t v74 = v210 + 1;
              while (v72 != v162)
              {
                uint64_t v211 = *--v72;
                *--uint64_t v210 = v211;
              }
              v70[904] = v210;
              v70[905] = v74;
              v70[906] = &v167[8 * v166];
              if (v162) {
                operator delete(v162);
              }
            }
            else
            {
              uint64_t *v72 = v71;
              unint64_t v74 = v72 + 1;
            }
            v70[905] = v74;
            break;
          case 0x10E:
            unint64_t v75 = *(void **)a1[2];
            uint64_t v76 = *(_DWORD *)(a1[3] + 24) & 0x3FFFFFLL;
            unint64_t v77 = (uint64_t *)v75[908];
            unint64_t v78 = v75[909];
            if ((unint64_t)v77 >= v78)
            {
              uint64_t v168 = (uint64_t *)v75[907];
              uint64_t v169 = v77 - v168;
              if ((unint64_t)(v169 + 1) >> 61) {
                goto LABEL_306;
              }
              unint64_t v170 = v78 - (void)v168;
              unint64_t v171 = (uint64_t)(v78 - (void)v168) >> 2;
              if (v171 <= v169 + 1) {
                unint64_t v171 = v169 + 1;
              }
              if (v170 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v172 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v172 = v171;
              }
              if (v172)
              {
                uint64_t v173 = (char *)sub_5714((uint64_t)(v75 + 909), v172);
                unint64_t v77 = (uint64_t *)v75[908];
                uint64_t v168 = (uint64_t *)v75[907];
              }
              else
              {
                uint64_t v173 = 0;
              }
              unint64_t v212 = (uint64_t *)&v173[8 * v169];
              *unint64_t v212 = v76;
              uint64_t v79 = v212 + 1;
              while (v77 != v168)
              {
                uint64_t v213 = *--v77;
                *--unint64_t v212 = v213;
              }
              v75[907] = v212;
              v75[908] = v79;
              v75[909] = &v173[8 * v172];
              if (v168) {
                operator delete(v168);
              }
            }
            else
            {
              *unint64_t v77 = v76;
              uint64_t v79 = v77 + 1;
            }
            v75[908] = v79;
            break;
          case 0x10F:
            unint64_t v80 = *(void **)a1[2];
            uint64_t v81 = *(_DWORD *)(a1[3] + 56) & 0x3FFFFFLL;
            unint64_t v82 = (uint64_t *)v80[911];
            unint64_t v83 = v80[912];
            if ((unint64_t)v82 >= v83)
            {
              uint64_t v174 = (uint64_t *)v80[910];
              uint64_t v175 = v82 - v174;
              if ((unint64_t)(v175 + 1) >> 61) {
                goto LABEL_306;
              }
              unint64_t v176 = v83 - (void)v174;
              unint64_t v177 = (uint64_t)(v83 - (void)v174) >> 2;
              if (v177 <= v175 + 1) {
                unint64_t v177 = v175 + 1;
              }
              if (v176 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v178 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v178 = v177;
              }
              if (v178)
              {
                uint64_t v179 = (char *)sub_5714((uint64_t)(v80 + 912), v178);
                unint64_t v82 = (uint64_t *)v80[911];
                uint64_t v174 = (uint64_t *)v80[910];
              }
              else
              {
                uint64_t v179 = 0;
              }
              unint64_t v214 = (uint64_t *)&v179[8 * v175];
              uint64_t *v214 = v81;
              unint64_t v84 = v214 + 1;
              while (v82 != v174)
              {
                uint64_t v215 = *--v82;
                *--unint64_t v214 = v215;
              }
              v80[910] = v214;
              v80[911] = v84;
              v80[912] = &v179[8 * v178];
              if (v174) {
                operator delete(v174);
              }
            }
            else
            {
              *unint64_t v82 = v81;
              unint64_t v84 = v82 + 1;
            }
            v80[911] = v84;
            break;
          case 0x110:
            uint64_t v85 = *(void **)a1[2];
            uint64_t v86 = *(_DWORD *)(a1[3] + 80) & 0x7FFFFLL;
            unint64_t v87 = (uint64_t *)v85[914];
            unint64_t v88 = v85[915];
            if ((unint64_t)v87 >= v88)
            {
              uint64_t v180 = (uint64_t *)v85[913];
              uint64_t v181 = v87 - v180;
              if ((unint64_t)(v181 + 1) >> 61) {
LABEL_306:
              }
                sub_566C();
              unint64_t v182 = v88 - (void)v180;
              unint64_t v183 = (uint64_t)(v88 - (void)v180) >> 2;
              if (v183 <= v181 + 1) {
                unint64_t v183 = v181 + 1;
              }
              if (v182 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v184 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v184 = v183;
              }
              if (v184)
              {
                uint64_t v185 = (char *)sub_5714((uint64_t)(v85 + 915), v184);
                unint64_t v87 = (uint64_t *)v85[914];
                uint64_t v180 = (uint64_t *)v85[913];
              }
              else
              {
                uint64_t v185 = 0;
              }
              uint64_t v216 = (uint64_t *)&v185[8 * v181];
              *uint64_t v216 = v86;
              unint64_t v89 = v216 + 1;
              while (v87 != v180)
              {
                uint64_t v217 = *--v87;
                *--uint64_t v216 = v217;
              }
              v85[913] = v216;
              v85[914] = v89;
              v85[915] = &v185[8 * v184];
              if (v180) {
                operator delete(v180);
              }
            }
            else
            {
              *unint64_t v87 = v86;
              unint64_t v89 = v87 + 1;
            }
            v85[914] = v89;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_E9958(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    unint64_t v206 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v205 = *v206;
    uint64_t v207 = (char *)v206[1] - (char *)*v206;
    if (v207)
    {
      unint64_t v208 = v207 >> 2;
      if (v208 <= 1) {
        unint64_t v208 = 1;
      }
      do
      {
        int v209 = *v205++;
        switch(v209)
        {
          case 273:
            uint64_t v210 = *(_DWORD *)(a1[3] + 36) & 0x7FFFF;
            uint64_t v211 = (void *)(*(void *)a1[2] + 7336);
            goto LABEL_284;
          case 274:
            uint64_t v210 = *(_DWORD *)(a1[3] + 68) & 0xFFFFF;
            uint64_t v211 = (void *)(*(void *)a1[2] + 7360);
            goto LABEL_284;
          case 275:
            uint64_t v210 = *(_WORD *)(a1[3] + 48) & 0x7FFF;
            uint64_t v211 = (void *)(*(void *)a1[2] + 7384);
            goto LABEL_284;
          case 276:
            uint64_t v210 = *(_DWORD *)(a1[3] + 32) & 0x7FFFF;
            uint64_t v211 = (void *)(*(void *)a1[2] + 7408);
            goto LABEL_284;
          case 277:
            uint64_t v210 = *(_DWORD *)(a1[3] + 64) & 0xFFFFF;
            uint64_t v211 = (void *)(*(void *)a1[2] + 7432);
            goto LABEL_284;
          case 278:
            uint64_t v210 = *(_DWORD *)(a1[3] + 28) & 0x7FFFF;
            uint64_t v211 = (void *)(*(void *)a1[2] + 7456);
            goto LABEL_284;
          case 279:
            uint64_t v210 = *(_DWORD *)(a1[3] + 60) & 0xFFFFF;
            uint64_t v211 = (void *)(*(void *)a1[2] + 7480);
            goto LABEL_284;
          case 280:
            uint64_t v210 = *(_DWORD *)(a1[3] + 44) & 0x7FFFF;
            uint64_t v211 = (void *)(*(void *)a1[2] + 7504);
            goto LABEL_284;
          case 281:
            uint64_t v210 = *(_DWORD *)(a1[3] + 76) & 0xFFFFF;
            uint64_t v211 = (void *)(*(void *)a1[2] + 7528);
            goto LABEL_284;
          case 282:
            uint64_t v210 = *(_DWORD *)(a1[3] + 40) & 0x7FFFF;
            uint64_t v211 = (void *)(*(void *)a1[2] + 7552);
            goto LABEL_284;
          case 283:
            uint64_t v210 = *(_DWORD *)(a1[3] + 72) & 0xFFFFF;
            uint64_t v211 = (void *)(*(void *)a1[2] + 7576);
            goto LABEL_284;
          case 284:
            uint64_t v210 = *(_DWORD *)(a1[3] + 20) & 0x7FFFF;
            uint64_t v211 = (void *)(*(void *)a1[2] + 7600);
            goto LABEL_284;
          case 285:
            uint64_t v210 = *(_DWORD *)(a1[3] + 52) & 0xFFFFF;
            uint64_t v211 = (void *)(*(void *)a1[2] + 7624);
            goto LABEL_284;
          case 286:
            uint64_t v210 = *(_DWORD *)(a1[3] + 24) & 0x7FFFF;
            uint64_t v211 = (void *)(*(void *)a1[2] + 7648);
            goto LABEL_284;
          case 287:
            uint64_t v210 = *(_DWORD *)(a1[3] + 56) & 0xFFFFF;
            uint64_t v211 = (void *)(*(void *)a1[2] + 7672);
LABEL_284:
            *(void *)(*v211 - 8) += v210;
            break;
          default:
            break;
        }
        --v208;
      }
      while (v208);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    int v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0x111:
            uint64_t v10 = *(void **)a1[2];
            uint64_t v11 = *(_DWORD *)(a1[3] + 36) & 0x7FFFFLL;
            uint64_t v12 = (uint64_t *)v10[917];
            unint64_t v13 = v10[918];
            if ((unint64_t)v12 >= v13)
            {
              uint64_t v85 = (uint64_t *)v10[916];
              uint64_t v86 = v12 - v85;
              if ((unint64_t)(v86 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v87 = v13 - (void)v85;
              unint64_t v88 = (uint64_t)(v13 - (void)v85) >> 2;
              if (v88 <= v86 + 1) {
                unint64_t v88 = v86 + 1;
              }
              if (v87 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v89 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v89 = v88;
              }
              if (v89)
              {
                unint64_t v90 = (char *)sub_5714((uint64_t)(v10 + 918), v89);
                uint64_t v12 = (uint64_t *)v10[917];
                uint64_t v85 = (uint64_t *)v10[916];
              }
              else
              {
                unint64_t v90 = 0;
              }
              uint64_t v175 = (uint64_t *)&v90[8 * v86];
              *uint64_t v175 = v11;
              unint64_t v14 = v175 + 1;
              while (v12 != v85)
              {
                uint64_t v176 = *--v12;
                *--uint64_t v175 = v176;
              }
              v10[916] = v175;
              v10[917] = v14;
              v10[918] = &v90[8 * v89];
              if (v85) {
                operator delete(v85);
              }
            }
            else
            {
              *uint64_t v12 = v11;
              unint64_t v14 = v12 + 1;
            }
            v10[917] = v14;
            break;
          case 0x112:
            unint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_DWORD *)(a1[3] + 68) & 0xFFFFFLL;
            uint64_t v17 = (uint64_t *)v15[920];
            unint64_t v18 = v15[921];
            if ((unint64_t)v17 >= v18)
            {
              uint64_t v91 = (uint64_t *)v15[919];
              uint64_t v92 = v17 - v91;
              if ((unint64_t)(v92 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v93 = v18 - (void)v91;
              unint64_t v94 = (uint64_t)(v18 - (void)v91) >> 2;
              if (v94 <= v92 + 1) {
                unint64_t v94 = v92 + 1;
              }
              if (v93 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v95 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v95 = v94;
              }
              if (v95)
              {
                unint64_t v96 = (char *)sub_5714((uint64_t)(v15 + 921), v95);
                uint64_t v17 = (uint64_t *)v15[920];
                uint64_t v91 = (uint64_t *)v15[919];
              }
              else
              {
                unint64_t v96 = 0;
              }
              unint64_t v177 = (uint64_t *)&v96[8 * v92];
              *unint64_t v177 = v16;
              unint64_t v19 = v177 + 1;
              while (v17 != v91)
              {
                uint64_t v178 = *--v17;
                *--unint64_t v177 = v178;
              }
              v15[919] = v177;
              v15[920] = v19;
              v15[921] = &v96[8 * v95];
              if (v91) {
                operator delete(v91);
              }
            }
            else
            {
              uint64_t *v17 = v16;
              unint64_t v19 = v17 + 1;
            }
            v15[920] = v19;
            break;
          case 0x113:
            unint64_t v20 = *(void **)a1[2];
            uint64_t v21 = *(_WORD *)(a1[3] + 48) & 0x7FFF;
            uint64_t v22 = (char *)v20[923];
            unint64_t v23 = v20[924];
            if ((unint64_t)v22 >= v23)
            {
              uint64_t v97 = (char *)v20[922];
              uint64_t v98 = (v22 - v97) >> 3;
              if ((unint64_t)(v98 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v99 = v23 - (void)v97;
              unint64_t v100 = (uint64_t)(v23 - (void)v97) >> 2;
              if (v100 <= v98 + 1) {
                unint64_t v100 = v98 + 1;
              }
              if (v99 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v101 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v101 = v100;
              }
              if (v101)
              {
                unint64_t v102 = (char *)sub_5714((uint64_t)(v20 + 924), v101);
                uint64_t v22 = (char *)v20[923];
                uint64_t v97 = (char *)v20[922];
              }
              else
              {
                unint64_t v102 = 0;
              }
              uint64_t v179 = &v102[8 * v98];
              *(void *)uint64_t v179 = v21;
              unint64_t v24 = v179 + 8;
              while (v22 != v97)
              {
                uint64_t v180 = *((void *)v22 - 1);
                v22 -= 8;
                *((void *)v179 - 1) = v180;
                v179 -= 8;
              }
              v20[922] = v179;
              v20[923] = v24;
              v20[924] = &v102[8 * v101];
              if (v97) {
                operator delete(v97);
              }
            }
            else
            {
              *(void *)uint64_t v22 = v21;
              unint64_t v24 = v22 + 8;
            }
            v20[923] = v24;
            break;
          case 0x114:
            unint64_t v25 = *(void **)a1[2];
            uint64_t v26 = *(_DWORD *)(a1[3] + 32) & 0x7FFFFLL;
            uint64_t v27 = (uint64_t *)v25[926];
            unint64_t v28 = v25[927];
            if ((unint64_t)v27 >= v28)
            {
              uint64_t v103 = (uint64_t *)v25[925];
              uint64_t v104 = v27 - v103;
              if ((unint64_t)(v104 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v105 = v28 - (void)v103;
              unint64_t v106 = (uint64_t)(v28 - (void)v103) >> 2;
              if (v106 <= v104 + 1) {
                unint64_t v106 = v104 + 1;
              }
              if (v105 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v107 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v107 = v106;
              }
              if (v107)
              {
                uint64_t v108 = (char *)sub_5714((uint64_t)(v25 + 927), v107);
                uint64_t v27 = (uint64_t *)v25[926];
                uint64_t v103 = (uint64_t *)v25[925];
              }
              else
              {
                uint64_t v108 = 0;
              }
              uint64_t v181 = (uint64_t *)&v108[8 * v104];
              *uint64_t v181 = v26;
              unint64_t v29 = v181 + 1;
              while (v27 != v103)
              {
                uint64_t v182 = *--v27;
                *--uint64_t v181 = v182;
              }
              v25[925] = v181;
              v25[926] = v29;
              v25[927] = &v108[8 * v107];
              if (v103) {
                operator delete(v103);
              }
            }
            else
            {
              *uint64_t v27 = v26;
              unint64_t v29 = v27 + 1;
            }
            v25[926] = v29;
            break;
          case 0x115:
            unint64_t v30 = *(void **)a1[2];
            uint64_t v31 = *(_DWORD *)(a1[3] + 64) & 0xFFFFFLL;
            unint64_t v32 = (uint64_t *)v30[929];
            unint64_t v33 = v30[930];
            if ((unint64_t)v32 >= v33)
            {
              uint64_t v109 = (uint64_t *)v30[928];
              uint64_t v110 = v32 - v109;
              if ((unint64_t)(v110 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v111 = v33 - (void)v109;
              unint64_t v112 = (uint64_t)(v33 - (void)v109) >> 2;
              if (v112 <= v110 + 1) {
                unint64_t v112 = v110 + 1;
              }
              if (v111 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v113 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v113 = v112;
              }
              if (v113)
              {
                unint64_t v114 = (char *)sub_5714((uint64_t)(v30 + 930), v113);
                unint64_t v32 = (uint64_t *)v30[929];
                uint64_t v109 = (uint64_t *)v30[928];
              }
              else
              {
                unint64_t v114 = 0;
              }
              unint64_t v183 = (uint64_t *)&v114[8 * v110];
              *unint64_t v183 = v31;
              unint64_t v34 = v183 + 1;
              while (v32 != v109)
              {
                uint64_t v184 = *--v32;
                *--unint64_t v183 = v184;
              }
              v30[928] = v183;
              v30[929] = v34;
              v30[930] = &v114[8 * v113];
              if (v109) {
                operator delete(v109);
              }
            }
            else
            {
              *unint64_t v32 = v31;
              unint64_t v34 = v32 + 1;
            }
            v30[929] = v34;
            break;
          case 0x116:
            unint64_t v35 = *(void **)a1[2];
            uint64_t v36 = *(_DWORD *)(a1[3] + 28) & 0x7FFFFLL;
            uint64_t v37 = (uint64_t *)v35[932];
            unint64_t v38 = v35[933];
            if ((unint64_t)v37 >= v38)
            {
              uint64_t v115 = (uint64_t *)v35[931];
              uint64_t v116 = v37 - v115;
              if ((unint64_t)(v116 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v117 = v38 - (void)v115;
              unint64_t v118 = (uint64_t)(v38 - (void)v115) >> 2;
              if (v118 <= v116 + 1) {
                unint64_t v118 = v116 + 1;
              }
              if (v117 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v119 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v119 = v118;
              }
              if (v119)
              {
                uint64_t v120 = (char *)sub_5714((uint64_t)(v35 + 933), v119);
                uint64_t v37 = (uint64_t *)v35[932];
                uint64_t v115 = (uint64_t *)v35[931];
              }
              else
              {
                uint64_t v120 = 0;
              }
              uint64_t v185 = (uint64_t *)&v120[8 * v116];
              *uint64_t v185 = v36;
              unint64_t v39 = v185 + 1;
              while (v37 != v115)
              {
                uint64_t v186 = *--v37;
                *--uint64_t v185 = v186;
              }
              v35[931] = v185;
              v35[932] = v39;
              v35[933] = &v120[8 * v119];
              if (v115) {
                operator delete(v115);
              }
            }
            else
            {
              uint64_t *v37 = v36;
              unint64_t v39 = v37 + 1;
            }
            v35[932] = v39;
            break;
          case 0x117:
            uint64_t v40 = *(void **)a1[2];
            uint64_t v41 = *(_DWORD *)(a1[3] + 60) & 0xFFFFFLL;
            uint64_t v42 = (uint64_t *)v40[935];
            unint64_t v43 = v40[936];
            if ((unint64_t)v42 >= v43)
            {
              uint64_t v121 = (uint64_t *)v40[934];
              uint64_t v122 = v42 - v121;
              if ((unint64_t)(v122 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v123 = v43 - (void)v121;
              unint64_t v124 = (uint64_t)(v43 - (void)v121) >> 2;
              if (v124 <= v122 + 1) {
                unint64_t v124 = v122 + 1;
              }
              if (v123 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v125 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v125 = v124;
              }
              if (v125)
              {
                uint64_t v126 = (char *)sub_5714((uint64_t)(v40 + 936), v125);
                uint64_t v42 = (uint64_t *)v40[935];
                uint64_t v121 = (uint64_t *)v40[934];
              }
              else
              {
                uint64_t v126 = 0;
              }
              uint64_t v187 = (uint64_t *)&v126[8 * v122];
              uint64_t *v187 = v41;
              unint64_t v44 = v187 + 1;
              while (v42 != v121)
              {
                uint64_t v188 = *--v42;
                *--uint64_t v187 = v188;
              }
              v40[934] = v187;
              v40[935] = v44;
              v40[936] = &v126[8 * v125];
              if (v121) {
                operator delete(v121);
              }
            }
            else
            {
              uint64_t *v42 = v41;
              unint64_t v44 = v42 + 1;
            }
            v40[935] = v44;
            break;
          case 0x118:
            uint64_t v45 = *(void **)a1[2];
            uint64_t v46 = *(_DWORD *)(a1[3] + 44) & 0x7FFFFLL;
            unint64_t v47 = (uint64_t *)v45[938];
            unint64_t v48 = v45[939];
            if ((unint64_t)v47 >= v48)
            {
              uint64_t v127 = (uint64_t *)v45[937];
              uint64_t v128 = v47 - v127;
              if ((unint64_t)(v128 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v129 = v48 - (void)v127;
              unint64_t v130 = (uint64_t)(v48 - (void)v127) >> 2;
              if (v130 <= v128 + 1) {
                unint64_t v130 = v128 + 1;
              }
              if (v129 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v131 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v131 = v130;
              }
              if (v131)
              {
                int v132 = (char *)sub_5714((uint64_t)(v45 + 939), v131);
                unint64_t v47 = (uint64_t *)v45[938];
                uint64_t v127 = (uint64_t *)v45[937];
              }
              else
              {
                int v132 = 0;
              }
              uint64_t v189 = (uint64_t *)&v132[8 * v128];
              uint64_t *v189 = v46;
              uint64_t v49 = v189 + 1;
              while (v47 != v127)
              {
                uint64_t v190 = *--v47;
                *--uint64_t v189 = v190;
              }
              v45[937] = v189;
              v45[938] = v49;
              v45[939] = &v132[8 * v131];
              if (v127) {
                operator delete(v127);
              }
            }
            else
            {
              *unint64_t v47 = v46;
              uint64_t v49 = v47 + 1;
            }
            v45[938] = v49;
            break;
          case 0x119:
            unint64_t v50 = *(void **)a1[2];
            uint64_t v51 = *(_DWORD *)(a1[3] + 76) & 0xFFFFFLL;
            unint64_t v52 = (uint64_t *)v50[941];
            unint64_t v53 = v50[942];
            if ((unint64_t)v52 >= v53)
            {
              uint64_t v133 = (uint64_t *)v50[940];
              uint64_t v134 = v52 - v133;
              if ((unint64_t)(v134 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v135 = v53 - (void)v133;
              unint64_t v136 = (uint64_t)(v53 - (void)v133) >> 2;
              if (v136 <= v134 + 1) {
                unint64_t v136 = v134 + 1;
              }
              if (v135 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v137 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v137 = v136;
              }
              if (v137)
              {
                uint64_t v138 = (char *)sub_5714((uint64_t)(v50 + 942), v137);
                unint64_t v52 = (uint64_t *)v50[941];
                uint64_t v133 = (uint64_t *)v50[940];
              }
              else
              {
                uint64_t v138 = 0;
              }
              uint64_t v191 = (uint64_t *)&v138[8 * v134];
              *uint64_t v191 = v51;
              uint64_t v54 = v191 + 1;
              while (v52 != v133)
              {
                uint64_t v192 = *--v52;
                *--uint64_t v191 = v192;
              }
              v50[940] = v191;
              v50[941] = v54;
              v50[942] = &v138[8 * v137];
              if (v133) {
                operator delete(v133);
              }
            }
            else
            {
              uint64_t *v52 = v51;
              uint64_t v54 = v52 + 1;
            }
            v50[941] = v54;
            break;
          case 0x11A:
            unint64_t v55 = *(void **)a1[2];
            uint64_t v56 = *(_DWORD *)(a1[3] + 40) & 0x7FFFFLL;
            unint64_t v57 = (uint64_t *)v55[944];
            unint64_t v58 = v55[945];
            if ((unint64_t)v57 >= v58)
            {
              uint64_t v139 = (uint64_t *)v55[943];
              uint64_t v140 = v57 - v139;
              if ((unint64_t)(v140 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v141 = v58 - (void)v139;
              unint64_t v142 = (uint64_t)(v58 - (void)v139) >> 2;
              if (v142 <= v140 + 1) {
                unint64_t v142 = v140 + 1;
              }
              if (v141 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v143 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v143 = v142;
              }
              if (v143)
              {
                int v144 = (char *)sub_5714((uint64_t)(v55 + 945), v143);
                unint64_t v57 = (uint64_t *)v55[944];
                uint64_t v139 = (uint64_t *)v55[943];
              }
              else
              {
                int v144 = 0;
              }
              uint64_t v193 = (uint64_t *)&v144[8 * v140];
              uint64_t *v193 = v56;
              unint64_t v59 = v193 + 1;
              while (v57 != v139)
              {
                uint64_t v194 = *--v57;
                *--uint64_t v193 = v194;
              }
              v55[943] = v193;
              v55[944] = v59;
              v55[945] = &v144[8 * v143];
              if (v139) {
                operator delete(v139);
              }
            }
            else
            {
              *unint64_t v57 = v56;
              unint64_t v59 = v57 + 1;
            }
            v55[944] = v59;
            break;
          case 0x11B:
            unint64_t v60 = *(void **)a1[2];
            uint64_t v61 = *(_DWORD *)(a1[3] + 72) & 0xFFFFFLL;
            unint64_t v62 = (uint64_t *)v60[947];
            unint64_t v63 = v60[948];
            if ((unint64_t)v62 >= v63)
            {
              uint64_t v145 = (uint64_t *)v60[946];
              uint64_t v146 = v62 - v145;
              if ((unint64_t)(v146 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v147 = v63 - (void)v145;
              unint64_t v148 = (uint64_t)(v63 - (void)v145) >> 2;
              if (v148 <= v146 + 1) {
                unint64_t v148 = v146 + 1;
              }
              if (v147 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v149 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v149 = v148;
              }
              if (v149)
              {
                uint64_t v150 = (char *)sub_5714((uint64_t)(v60 + 948), v149);
                unint64_t v62 = (uint64_t *)v60[947];
                uint64_t v145 = (uint64_t *)v60[946];
              }
              else
              {
                uint64_t v150 = 0;
              }
              uint64_t v195 = (uint64_t *)&v150[8 * v146];
              uint64_t *v195 = v61;
              unint64_t v64 = v195 + 1;
              while (v62 != v145)
              {
                uint64_t v196 = *--v62;
                *--uint64_t v195 = v196;
              }
              v60[946] = v195;
              v60[947] = v64;
              v60[948] = &v150[8 * v149];
              if (v145) {
                operator delete(v145);
              }
            }
            else
            {
              *unint64_t v62 = v61;
              unint64_t v64 = v62 + 1;
            }
            v60[947] = v64;
            break;
          case 0x11C:
            unint64_t v65 = *(void **)a1[2];
            uint64_t v66 = *(_DWORD *)(a1[3] + 20) & 0x7FFFFLL;
            uint64_t v67 = (uint64_t *)v65[950];
            unint64_t v68 = v65[951];
            if ((unint64_t)v67 >= v68)
            {
              uint64_t v151 = (uint64_t *)v65[949];
              uint64_t v152 = v67 - v151;
              if ((unint64_t)(v152 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v153 = v68 - (void)v151;
              unint64_t v154 = (uint64_t)(v68 - (void)v151) >> 2;
              if (v154 <= v152 + 1) {
                unint64_t v154 = v152 + 1;
              }
              if (v153 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v155 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v155 = v154;
              }
              if (v155)
              {
                uint64_t v156 = (char *)sub_5714((uint64_t)(v65 + 951), v155);
                uint64_t v67 = (uint64_t *)v65[950];
                uint64_t v151 = (uint64_t *)v65[949];
              }
              else
              {
                uint64_t v156 = 0;
              }
              uint64_t v197 = (uint64_t *)&v156[8 * v152];
              *uint64_t v197 = v66;
              unint64_t v69 = v197 + 1;
              while (v67 != v151)
              {
                uint64_t v198 = *--v67;
                *--uint64_t v197 = v198;
              }
              v65[949] = v197;
              v65[950] = v69;
              v65[951] = &v156[8 * v155];
              if (v151) {
                operator delete(v151);
              }
            }
            else
            {
              uint64_t *v67 = v66;
              unint64_t v69 = v67 + 1;
            }
            v65[950] = v69;
            break;
          case 0x11D:
            unint64_t v70 = *(void **)a1[2];
            uint64_t v71 = *(_DWORD *)(a1[3] + 52) & 0xFFFFFLL;
            uint64_t v72 = (uint64_t *)v70[953];
            unint64_t v73 = v70[954];
            if ((unint64_t)v72 >= v73)
            {
              uint64_t v157 = (uint64_t *)v70[952];
              uint64_t v158 = v72 - v157;
              if ((unint64_t)(v158 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v159 = v73 - (void)v157;
              unint64_t v160 = (uint64_t)(v73 - (void)v157) >> 2;
              if (v160 <= v158 + 1) {
                unint64_t v160 = v158 + 1;
              }
              if (v159 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v161 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v161 = v160;
              }
              if (v161)
              {
                uint64_t v162 = (char *)sub_5714((uint64_t)(v70 + 954), v161);
                uint64_t v72 = (uint64_t *)v70[953];
                uint64_t v157 = (uint64_t *)v70[952];
              }
              else
              {
                uint64_t v162 = 0;
              }
              uint64_t v199 = (uint64_t *)&v162[8 * v158];
              *uint64_t v199 = v71;
              unint64_t v74 = v199 + 1;
              while (v72 != v157)
              {
                uint64_t v200 = *--v72;
                *--uint64_t v199 = v200;
              }
              v70[952] = v199;
              v70[953] = v74;
              v70[954] = &v162[8 * v161];
              if (v157) {
                operator delete(v157);
              }
            }
            else
            {
              uint64_t *v72 = v71;
              unint64_t v74 = v72 + 1;
            }
            v70[953] = v74;
            break;
          case 0x11E:
            unint64_t v75 = *(void **)a1[2];
            uint64_t v76 = *(_DWORD *)(a1[3] + 24) & 0x7FFFFLL;
            unint64_t v77 = (uint64_t *)v75[956];
            unint64_t v78 = v75[957];
            if ((unint64_t)v77 >= v78)
            {
              uint64_t v163 = (uint64_t *)v75[955];
              uint64_t v164 = v77 - v163;
              if ((unint64_t)(v164 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v165 = v78 - (void)v163;
              unint64_t v166 = (uint64_t)(v78 - (void)v163) >> 2;
              if (v166 <= v164 + 1) {
                unint64_t v166 = v164 + 1;
              }
              if (v165 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v167 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v167 = v166;
              }
              if (v167)
              {
                uint64_t v168 = (char *)sub_5714((uint64_t)(v75 + 957), v167);
                unint64_t v77 = (uint64_t *)v75[956];
                uint64_t v163 = (uint64_t *)v75[955];
              }
              else
              {
                uint64_t v168 = 0;
              }
              uint64_t v201 = (uint64_t *)&v168[8 * v164];
              uint64_t *v201 = v76;
              uint64_t v79 = v201 + 1;
              while (v77 != v163)
              {
                uint64_t v202 = *--v77;
                *--uint64_t v201 = v202;
              }
              v75[955] = v201;
              v75[956] = v79;
              v75[957] = &v168[8 * v167];
              if (v163) {
                operator delete(v163);
              }
            }
            else
            {
              *unint64_t v77 = v76;
              uint64_t v79 = v77 + 1;
            }
            v75[956] = v79;
            break;
          case 0x11F:
            unint64_t v80 = *(void **)a1[2];
            uint64_t v81 = *(_DWORD *)(a1[3] + 56) & 0xFFFFFLL;
            unint64_t v82 = (uint64_t *)v80[959];
            unint64_t v83 = v80[960];
            if ((unint64_t)v82 >= v83)
            {
              uint64_t v169 = (uint64_t *)v80[958];
              uint64_t v170 = v82 - v169;
              if ((unint64_t)(v170 + 1) >> 61) {
LABEL_288:
              }
                sub_566C();
              unint64_t v171 = v83 - (void)v169;
              unint64_t v172 = (uint64_t)(v83 - (void)v169) >> 2;
              if (v172 <= v170 + 1) {
                unint64_t v172 = v170 + 1;
              }
              if (v171 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v173 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v173 = v172;
              }
              if (v173)
              {
                uint64_t v174 = (char *)sub_5714((uint64_t)(v80 + 960), v173);
                unint64_t v82 = (uint64_t *)v80[959];
                uint64_t v169 = (uint64_t *)v80[958];
              }
              else
              {
                uint64_t v174 = 0;
              }
              uint64_t v203 = (uint64_t *)&v174[8 * v170];
              uint64_t *v203 = v81;
              unint64_t v84 = v203 + 1;
              while (v82 != v169)
              {
                uint64_t v204 = *--v82;
                *--uint64_t v203 = v204;
              }
              v80[958] = v203;
              v80[959] = v84;
              v80[960] = &v174[8 * v173];
              if (v169) {
                operator delete(v169);
              }
            }
            else
            {
              *unint64_t v82 = v81;
              unint64_t v84 = v82 + 1;
            }
            v80[959] = v84;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_EA87C(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    uint64_t v91 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    unint64_t v90 = *v91;
    uint64_t v92 = (char *)v91[1] - (char *)*v91;
    if (v92)
    {
      unint64_t v93 = v92 >> 2;
      if (v93 <= 1) {
        unint64_t v93 = 1;
      }
      do
      {
        int v94 = *v90++;
        switch(v94)
        {
          case 'H':
            uint64_t v95 = *(_DWORD *)(a1[3] + 32) & 0x1FFFF;
            unint64_t v96 = (void *)(*(void *)a1[2] + 2512);
            goto LABEL_122;
          case 'I':
            uint64_t v95 = *(_DWORD *)(a1[3] + 28) & 0x1FFFF;
            unint64_t v96 = (void *)(*(void *)a1[2] + 2536);
            goto LABEL_122;
          case 'J':
            uint64_t v95 = *(_DWORD *)(a1[3] + 24) & 0x1FFFF;
            unint64_t v96 = (void *)(*(void *)a1[2] + 2560);
            goto LABEL_122;
          case 'K':
            uint64_t v95 = *(_DWORD *)(a1[3] + 36) & 0x1FFFFF;
            unint64_t v96 = (void *)(*(void *)a1[2] + 2584);
            goto LABEL_122;
          case 'L':
            uint64_t v95 = *(unsigned __int16 *)(a1[3] + 22);
            unint64_t v96 = (void *)(*(void *)a1[2] + 2608);
            goto LABEL_122;
          case 'M':
            uint64_t v95 = *(unsigned __int16 *)(a1[3] + 20);
            unint64_t v96 = (void *)(*(void *)a1[2] + 2632);
LABEL_122:
            *(void *)(*v96 - 8) += v95;
            break;
          default:
            break;
        }
        --v93;
      }
      while (v93);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    int v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 'H':
            uint64_t v10 = *(void **)a1[2];
            uint64_t v11 = *(_DWORD *)(a1[3] + 32) & 0x1FFFFLL;
            uint64_t v12 = (uint64_t *)v10[314];
            unint64_t v13 = v10[315];
            if ((unint64_t)v12 >= v13)
            {
              uint64_t v42 = (uint64_t *)v10[313];
              uint64_t v43 = v12 - v42;
              if ((unint64_t)(v43 + 1) >> 61) {
                goto LABEL_126;
              }
              unint64_t v44 = v13 - (void)v42;
              unint64_t v45 = (uint64_t)(v13 - (void)v42) >> 2;
              if (v45 <= v43 + 1) {
                unint64_t v45 = v43 + 1;
              }
              if (v44 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v46 = v45;
              }
              if (v46)
              {
                unint64_t v47 = (char *)sub_5714((uint64_t)(v10 + 315), v46);
                uint64_t v12 = (uint64_t *)v10[314];
                uint64_t v42 = (uint64_t *)v10[313];
              }
              else
              {
                unint64_t v47 = 0;
              }
              unint64_t v78 = (uint64_t *)&v47[8 * v43];
              uint64_t *v78 = v11;
              unint64_t v14 = v78 + 1;
              while (v12 != v42)
              {
                uint64_t v79 = *--v12;
                *--unint64_t v78 = v79;
              }
              v10[313] = v78;
              v10[314] = v14;
              v10[315] = &v47[8 * v46];
              if (v42) {
                operator delete(v42);
              }
            }
            else
            {
              *uint64_t v12 = v11;
              unint64_t v14 = v12 + 1;
            }
            v10[314] = v14;
            break;
          case 'I':
            unint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_DWORD *)(a1[3] + 28) & 0x1FFFFLL;
            uint64_t v17 = (uint64_t *)v15[317];
            unint64_t v18 = v15[318];
            if ((unint64_t)v17 >= v18)
            {
              unint64_t v48 = (uint64_t *)v15[316];
              uint64_t v49 = v17 - v48;
              if ((unint64_t)(v49 + 1) >> 61) {
                goto LABEL_126;
              }
              unint64_t v50 = v18 - (void)v48;
              unint64_t v51 = (uint64_t)(v18 - (void)v48) >> 2;
              if (v51 <= v49 + 1) {
                unint64_t v51 = v49 + 1;
              }
              if (v50 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v52 = v51;
              }
              if (v52)
              {
                unint64_t v53 = (char *)sub_5714((uint64_t)(v15 + 318), v52);
                uint64_t v17 = (uint64_t *)v15[317];
                unint64_t v48 = (uint64_t *)v15[316];
              }
              else
              {
                unint64_t v53 = 0;
              }
              unint64_t v80 = (uint64_t *)&v53[8 * v49];
              *unint64_t v80 = v16;
              unint64_t v19 = v80 + 1;
              while (v17 != v48)
              {
                uint64_t v81 = *--v17;
                *--unint64_t v80 = v81;
              }
              v15[316] = v80;
              v15[317] = v19;
              v15[318] = &v53[8 * v52];
              if (v48) {
                operator delete(v48);
              }
            }
            else
            {
              uint64_t *v17 = v16;
              unint64_t v19 = v17 + 1;
            }
            v15[317] = v19;
            break;
          case 'J':
            unint64_t v20 = *(void **)a1[2];
            uint64_t v21 = *(_DWORD *)(a1[3] + 24) & 0x1FFFFLL;
            uint64_t v22 = (uint64_t *)v20[320];
            unint64_t v23 = v20[321];
            if ((unint64_t)v22 >= v23)
            {
              uint64_t v54 = (uint64_t *)v20[319];
              uint64_t v55 = v22 - v54;
              if ((unint64_t)(v55 + 1) >> 61) {
                goto LABEL_126;
              }
              unint64_t v56 = v23 - (void)v54;
              unint64_t v57 = (uint64_t)(v23 - (void)v54) >> 2;
              if (v57 <= v55 + 1) {
                unint64_t v57 = v55 + 1;
              }
              if (v56 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v58 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v58 = v57;
              }
              if (v58)
              {
                unint64_t v59 = (char *)sub_5714((uint64_t)(v20 + 321), v58);
                uint64_t v22 = (uint64_t *)v20[320];
                uint64_t v54 = (uint64_t *)v20[319];
              }
              else
              {
                unint64_t v59 = 0;
              }
              unint64_t v82 = (uint64_t *)&v59[8 * v55];
              *unint64_t v82 = v21;
              unint64_t v24 = v82 + 1;
              while (v22 != v54)
              {
                uint64_t v83 = *--v22;
                *--unint64_t v82 = v83;
              }
              v20[319] = v82;
              v20[320] = v24;
              v20[321] = &v59[8 * v58];
              if (v54) {
                operator delete(v54);
              }
            }
            else
            {
              *uint64_t v22 = v21;
              unint64_t v24 = v22 + 1;
            }
            v20[320] = v24;
            break;
          case 'K':
            unint64_t v25 = *(void **)a1[2];
            uint64_t v26 = *(_DWORD *)(a1[3] + 36) & 0x1FFFFFLL;
            uint64_t v27 = (uint64_t *)v25[323];
            unint64_t v28 = v25[324];
            if ((unint64_t)v27 >= v28)
            {
              unint64_t v60 = (uint64_t *)v25[322];
              uint64_t v61 = v27 - v60;
              if ((unint64_t)(v61 + 1) >> 61) {
                goto LABEL_126;
              }
              unint64_t v62 = v28 - (void)v60;
              unint64_t v63 = (uint64_t)(v28 - (void)v60) >> 2;
              if (v63 <= v61 + 1) {
                unint64_t v63 = v61 + 1;
              }
              if (v62 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v64 = v63;
              }
              if (v64)
              {
                unint64_t v65 = (char *)sub_5714((uint64_t)(v25 + 324), v64);
                uint64_t v27 = (uint64_t *)v25[323];
                unint64_t v60 = (uint64_t *)v25[322];
              }
              else
              {
                unint64_t v65 = 0;
              }
              unint64_t v84 = (uint64_t *)&v65[8 * v61];
              *unint64_t v84 = v26;
              unint64_t v29 = v84 + 1;
              while (v27 != v60)
              {
                uint64_t v85 = *--v27;
                *--unint64_t v84 = v85;
              }
              v25[322] = v84;
              v25[323] = v29;
              v25[324] = &v65[8 * v64];
              if (v60) {
                operator delete(v60);
              }
            }
            else
            {
              *uint64_t v27 = v26;
              unint64_t v29 = v27 + 1;
            }
            v25[323] = v29;
            break;
          case 'L':
            uint64_t v30 = a1[2];
            uint64_t v31 = *(void **)v30;
            uint64_t v32 = *(unsigned __int16 *)(a1[3] + 22);
            unint64_t v33 = *(char **)(*(void *)v30 + 2608);
            unint64_t v34 = *(void *)(*(void *)v30 + 2616);
            if ((unint64_t)v33 >= v34)
            {
              uint64_t v66 = (char *)v31[325];
              uint64_t v67 = (v33 - v66) >> 3;
              if ((unint64_t)(v67 + 1) >> 61) {
                goto LABEL_126;
              }
              unint64_t v68 = v34 - (void)v66;
              unint64_t v69 = (uint64_t)(v34 - (void)v66) >> 2;
              if (v69 <= v67 + 1) {
                unint64_t v69 = v67 + 1;
              }
              if (v68 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v70 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v70 = v69;
              }
              if (v70)
              {
                uint64_t v71 = (char *)sub_5714((uint64_t)(v31 + 327), v70);
                unint64_t v33 = (char *)v31[326];
                uint64_t v66 = (char *)v31[325];
              }
              else
              {
                uint64_t v71 = 0;
              }
              uint64_t v86 = &v71[8 * v67];
              *(void *)uint64_t v86 = v32;
              unint64_t v35 = v86 + 8;
              while (v33 != v66)
              {
                uint64_t v87 = *((void *)v33 - 1);
                v33 -= 8;
                *((void *)v86 - 1) = v87;
                v86 -= 8;
              }
              v31[325] = v86;
              v31[326] = v35;
              v31[327] = &v71[8 * v70];
              if (v66) {
                operator delete(v66);
              }
            }
            else
            {
              *(void *)unint64_t v33 = v32;
              unint64_t v35 = v33 + 8;
            }
            v31[326] = v35;
            break;
          case 'M':
            uint64_t v36 = a1[2];
            uint64_t v37 = *(void **)v36;
            uint64_t v38 = *(unsigned __int16 *)(a1[3] + 20);
            unint64_t v39 = *(char **)(*(void *)v36 + 2632);
            unint64_t v40 = *(void *)(*(void *)v36 + 2640);
            if ((unint64_t)v39 >= v40)
            {
              uint64_t v72 = (char *)v37[328];
              uint64_t v73 = (v39 - v72) >> 3;
              if ((unint64_t)(v73 + 1) >> 61) {
LABEL_126:
              }
                sub_566C();
              unint64_t v74 = v40 - (void)v72;
              unint64_t v75 = (uint64_t)(v40 - (void)v72) >> 2;
              if (v75 <= v73 + 1) {
                unint64_t v75 = v73 + 1;
              }
              if (v74 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v76 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v76 = v75;
              }
              if (v76)
              {
                unint64_t v77 = (char *)sub_5714((uint64_t)(v37 + 330), v76);
                unint64_t v39 = (char *)v37[329];
                uint64_t v72 = (char *)v37[328];
              }
              else
              {
                unint64_t v77 = 0;
              }
              unint64_t v88 = &v77[8 * v73];
              *(void *)unint64_t v88 = v38;
              uint64_t v41 = v88 + 8;
              while (v39 != v72)
              {
                uint64_t v89 = *((void *)v39 - 1);
                v39 -= 8;
                *((void *)v88 - 1) = v89;
                v88 -= 8;
              }
              v37[328] = v88;
              v37[329] = v41;
              v37[330] = &v77[8 * v76];
              if (v72) {
                operator delete(v72);
              }
            }
            else
            {
              *(void *)unint64_t v39 = v38;
              uint64_t v41 = v39 + 8;
            }
            v37[329] = v41;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_EAEFC(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    unint64_t v427 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    unint64_t v426 = *v427;
    uint64_t v428 = (char *)v427[1] - (char *)*v427;
    if (v428)
    {
      unint64_t v429 = v428 >> 2;
      if (v429 <= 1) {
        unint64_t v429 = 1;
      }
      do
      {
        int v430 = *v426++;
        switch(v430)
        {
          case 133:
            uint64_t v431 = *(_WORD *)(a1[3] + 78) & 0x1FFF;
            unint64_t v432 = (void *)(*(void *)a1[2] + 3976);
            goto LABEL_591;
          case 134:
            uint64_t v431 = *(_WORD *)(a1[3] + 62) & 0x3FFF;
            unint64_t v432 = (void *)(*(void *)a1[2] + 4000);
            goto LABEL_591;
          case 135:
            uint64_t v431 = *(_WORD *)(a1[3] + 46) & 0x3FFF;
            unint64_t v432 = (void *)(*(void *)a1[2] + 4024);
            goto LABEL_591;
          case 136:
            uint64_t v431 = *(_WORD *)(a1[3] + 30) & 0x7FFF;
            unint64_t v432 = (void *)(*(void *)a1[2] + 4048);
            goto LABEL_591;
          case 137:
            uint64_t v431 = *(_WORD *)(a1[3] + 80) & 0x1FFF;
            unint64_t v432 = (void *)(*(void *)a1[2] + 4072);
            goto LABEL_591;
          case 138:
            uint64_t v431 = *(_WORD *)(a1[3] + 64) & 0x3FFF;
            unint64_t v432 = (void *)(*(void *)a1[2] + 4096);
            goto LABEL_591;
          case 139:
            uint64_t v431 = *(_WORD *)(a1[3] + 48) & 0x3FFF;
            uint64_t v433 = *(void *)a1[2];
            uint64_t v434 = 4120;
            goto LABEL_590;
          case 140:
            uint64_t v431 = *(_WORD *)(a1[3] + 32) & 0x7FFF;
            uint64_t v433 = *(void *)a1[2];
            uint64_t v434 = 4144;
            goto LABEL_590;
          case 141:
            uint64_t v431 = *(_WORD *)(a1[3] + 82) & 0x1FFF;
            uint64_t v433 = *(void *)a1[2];
            uint64_t v434 = 4168;
            goto LABEL_590;
          case 142:
            uint64_t v431 = *(_WORD *)(a1[3] + 66) & 0x3FFF;
            uint64_t v433 = *(void *)a1[2];
            uint64_t v434 = 4192;
            goto LABEL_590;
          case 143:
            uint64_t v431 = *(_WORD *)(a1[3] + 50) & 0x3FFF;
            uint64_t v433 = *(void *)a1[2];
            uint64_t v434 = 4216;
            goto LABEL_590;
          case 144:
            uint64_t v431 = *(_WORD *)(a1[3] + 34) & 0x7FFF;
            uint64_t v433 = *(void *)a1[2];
            uint64_t v434 = 4240;
            goto LABEL_590;
          case 145:
            uint64_t v431 = *(_WORD *)(a1[3] + 72) & 0x1FFF;
            uint64_t v433 = *(void *)a1[2];
            uint64_t v434 = 4264;
            goto LABEL_590;
          case 146:
            uint64_t v431 = *(_WORD *)(a1[3] + 56) & 0x1FFF;
            uint64_t v433 = *(void *)a1[2];
            uint64_t v434 = 4288;
            goto LABEL_590;
          case 147:
            uint64_t v431 = *(_WORD *)(a1[3] + 40) & 0x3FFF;
            uint64_t v433 = *(void *)a1[2];
            uint64_t v434 = 4312;
            goto LABEL_590;
          case 148:
            uint64_t v431 = *(_WORD *)(a1[3] + 24) & 0x7FFF;
            uint64_t v433 = *(void *)a1[2];
            uint64_t v434 = 4336;
            goto LABEL_590;
          case 149:
            uint64_t v431 = *(_WORD *)(a1[3] + 74) & 0x1FFF;
            uint64_t v433 = *(void *)a1[2];
            uint64_t v434 = 4360;
            goto LABEL_590;
          case 150:
            uint64_t v431 = *(_WORD *)(a1[3] + 58) & 0x1FFF;
            uint64_t v433 = *(void *)a1[2];
            uint64_t v434 = 4384;
            goto LABEL_590;
          case 151:
            uint64_t v431 = *(_WORD *)(a1[3] + 42) & 0x3FFF;
            uint64_t v433 = *(void *)a1[2];
            uint64_t v434 = 4408;
            goto LABEL_590;
          case 152:
            uint64_t v431 = *(_WORD *)(a1[3] + 26) & 0x7FFF;
            uint64_t v433 = *(void *)a1[2];
            uint64_t v434 = 4432;
            goto LABEL_590;
          case 153:
            uint64_t v431 = *(_WORD *)(a1[3] + 76) & 0x1FFF;
            uint64_t v433 = *(void *)a1[2];
            uint64_t v434 = 4456;
            goto LABEL_590;
          case 154:
            uint64_t v431 = *(_WORD *)(a1[3] + 60) & 0x1FFF;
            uint64_t v433 = *(void *)a1[2];
            uint64_t v434 = 4480;
            goto LABEL_590;
          case 155:
            uint64_t v431 = *(_WORD *)(a1[3] + 44) & 0x3FFF;
            uint64_t v433 = *(void *)a1[2];
            uint64_t v434 = 4504;
            goto LABEL_590;
          case 156:
            uint64_t v431 = *(_WORD *)(a1[3] + 28) & 0x7FFF;
            uint64_t v433 = *(void *)a1[2];
            uint64_t v434 = 4528;
            goto LABEL_590;
          case 157:
            uint64_t v431 = *(_WORD *)(a1[3] + 68) & 0x1FFF;
            uint64_t v433 = *(void *)a1[2];
            uint64_t v434 = 4552;
            goto LABEL_590;
          case 158:
            uint64_t v431 = *(_WORD *)(a1[3] + 52) & 0x3FFF;
            uint64_t v433 = *(void *)a1[2];
            uint64_t v434 = 4576;
            goto LABEL_590;
          case 159:
            uint64_t v431 = *(_WORD *)(a1[3] + 36) & 0x3FFF;
            uint64_t v433 = *(void *)a1[2];
            uint64_t v434 = 4600;
            goto LABEL_590;
          case 160:
            uint64_t v431 = (unsigned __int16)*(_DWORD *)(a1[3] + 20) >> 1;
            uint64_t v433 = *(void *)a1[2];
            uint64_t v434 = 4624;
            goto LABEL_590;
          case 161:
            uint64_t v431 = *(_WORD *)(a1[3] + 70) & 0x1FFF;
            uint64_t v433 = *(void *)a1[2];
            uint64_t v434 = 4648;
            goto LABEL_590;
          case 162:
            uint64_t v431 = *(_WORD *)(a1[3] + 54) & 0x3FFF;
            uint64_t v433 = *(void *)a1[2];
            uint64_t v434 = 4672;
            goto LABEL_590;
          case 163:
            uint64_t v431 = *(_WORD *)(a1[3] + 38) & 0x3FFF;
            uint64_t v433 = *(void *)a1[2];
            uint64_t v434 = 4696;
            goto LABEL_590;
          case 164:
            uint64_t v431 = *(_WORD *)(a1[3] + 22) & 0x7FFF;
            uint64_t v433 = *(void *)a1[2];
            uint64_t v434 = 4720;
LABEL_590:
            unint64_t v432 = (void *)(v433 + v434);
LABEL_591:
            *(void *)(*v432 - 8) += v431;
            break;
          default:
            break;
        }
        --v429;
      }
      while (v429);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    int v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0x85:
            uint64_t v10 = *(void **)a1[2];
            uint64_t v11 = *(_WORD *)(a1[3] + 78) & 0x1FFF;
            uint64_t v12 = (char *)v10[497];
            unint64_t v13 = v10[498];
            if ((unint64_t)v12 >= v13)
            {
              uint64_t v170 = (char *)v10[496];
              uint64_t v171 = (v12 - v170) >> 3;
              if ((unint64_t)(v171 + 1) >> 61) {
                goto LABEL_595;
              }
              unint64_t v172 = v13 - (void)v170;
              unint64_t v173 = (uint64_t)(v13 - (void)v170) >> 2;
              if (v173 <= v171 + 1) {
                unint64_t v173 = v171 + 1;
              }
              if (v172 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v174 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v174 = v173;
              }
              if (v174)
              {
                uint64_t v175 = (char *)sub_5714((uint64_t)(v10 + 498), v174);
                uint64_t v12 = (char *)v10[497];
                uint64_t v170 = (char *)v10[496];
              }
              else
              {
                uint64_t v175 = 0;
              }
              unint64_t v362 = &v175[8 * v171];
              *(void *)unint64_t v362 = v11;
              unint64_t v14 = v362 + 8;
              while (v12 != v170)
              {
                uint64_t v363 = *((void *)v12 - 1);
                v12 -= 8;
                *((void *)v362 - 1) = v363;
                v362 -= 8;
              }
              v10[496] = v362;
              v10[497] = v14;
              v10[498] = &v175[8 * v174];
              if (v170) {
                operator delete(v170);
              }
            }
            else
            {
              *(void *)uint64_t v12 = v11;
              unint64_t v14 = v12 + 8;
            }
            v10[497] = v14;
            break;
          case 0x86:
            unint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_WORD *)(a1[3] + 62) & 0x3FFF;
            uint64_t v17 = (char *)v15[500];
            unint64_t v18 = v15[501];
            if ((unint64_t)v17 >= v18)
            {
              uint64_t v176 = (char *)v15[499];
              uint64_t v177 = (v17 - v176) >> 3;
              if ((unint64_t)(v177 + 1) >> 61) {
                goto LABEL_595;
              }
              unint64_t v178 = v18 - (void)v176;
              unint64_t v179 = (uint64_t)(v18 - (void)v176) >> 2;
              if (v179 <= v177 + 1) {
                unint64_t v179 = v177 + 1;
              }
              if (v178 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v180 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v180 = v179;
              }
              if (v180)
              {
                uint64_t v181 = (char *)sub_5714((uint64_t)(v15 + 501), v180);
                uint64_t v17 = (char *)v15[500];
                uint64_t v176 = (char *)v15[499];
              }
              else
              {
                uint64_t v181 = 0;
              }
              uint64_t v364 = &v181[8 * v177];
              *(void *)uint64_t v364 = v16;
              unint64_t v19 = v364 + 8;
              while (v17 != v176)
              {
                uint64_t v365 = *((void *)v17 - 1);
                v17 -= 8;
                *((void *)v364 - 1) = v365;
                v364 -= 8;
              }
              v15[499] = v364;
              v15[500] = v19;
              v15[501] = &v181[8 * v180];
              if (v176) {
                operator delete(v176);
              }
            }
            else
            {
              *(void *)uint64_t v17 = v16;
              unint64_t v19 = v17 + 8;
            }
            v15[500] = v19;
            break;
          case 0x87:
            unint64_t v20 = *(void **)a1[2];
            uint64_t v21 = *(_WORD *)(a1[3] + 46) & 0x3FFF;
            uint64_t v22 = (char *)v20[503];
            unint64_t v23 = v20[504];
            if ((unint64_t)v22 >= v23)
            {
              uint64_t v182 = (char *)v20[502];
              uint64_t v183 = (v22 - v182) >> 3;
              if ((unint64_t)(v183 + 1) >> 61) {
                goto LABEL_595;
              }
              unint64_t v184 = v23 - (void)v182;
              unint64_t v185 = (uint64_t)(v23 - (void)v182) >> 2;
              if (v185 <= v183 + 1) {
                unint64_t v185 = v183 + 1;
              }
              if (v184 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v186 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v186 = v185;
              }
              if (v186)
              {
                uint64_t v187 = (char *)sub_5714((uint64_t)(v20 + 504), v186);
                uint64_t v22 = (char *)v20[503];
                uint64_t v182 = (char *)v20[502];
              }
              else
              {
                uint64_t v187 = 0;
              }
              uint64_t v366 = &v187[8 * v183];
              *(void *)uint64_t v366 = v21;
              unint64_t v24 = v366 + 8;
              while (v22 != v182)
              {
                uint64_t v367 = *((void *)v22 - 1);
                v22 -= 8;
                *((void *)v366 - 1) = v367;
                v366 -= 8;
              }
              v20[502] = v366;
              v20[503] = v24;
              v20[504] = &v187[8 * v186];
              if (v182) {
                operator delete(v182);
              }
            }
            else
            {
              *(void *)uint64_t v22 = v21;
              unint64_t v24 = v22 + 8;
            }
            v20[503] = v24;
            break;
          case 0x88:
            unint64_t v25 = *(void **)a1[2];
            uint64_t v26 = *(_WORD *)(a1[3] + 30) & 0x7FFF;
            uint64_t v27 = (char *)v25[506];
            unint64_t v28 = v25[507];
            if ((unint64_t)v27 >= v28)
            {
              uint64_t v188 = (char *)v25[505];
              uint64_t v189 = (v27 - v188) >> 3;
              if ((unint64_t)(v189 + 1) >> 61) {
                goto LABEL_595;
              }
              unint64_t v190 = v28 - (void)v188;
              unint64_t v191 = (uint64_t)(v28 - (void)v188) >> 2;
              if (v191 <= v189 + 1) {
                unint64_t v191 = v189 + 1;
              }
              if (v190 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v192 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v192 = v191;
              }
              if (v192)
              {
                uint64_t v193 = (char *)sub_5714((uint64_t)(v25 + 507), v192);
                uint64_t v27 = (char *)v25[506];
                uint64_t v188 = (char *)v25[505];
              }
              else
              {
                uint64_t v193 = 0;
              }
              int v368 = &v193[8 * v189];
              *(void *)int v368 = v26;
              unint64_t v29 = v368 + 8;
              while (v27 != v188)
              {
                uint64_t v369 = *((void *)v27 - 1);
                v27 -= 8;
                *((void *)v368 - 1) = v369;
                v368 -= 8;
              }
              v25[505] = v368;
              v25[506] = v29;
              v25[507] = &v193[8 * v192];
              if (v188) {
                operator delete(v188);
              }
            }
            else
            {
              *(void *)uint64_t v27 = v26;
              unint64_t v29 = v27 + 8;
            }
            v25[506] = v29;
            break;
          case 0x89:
            uint64_t v30 = *(void **)a1[2];
            uint64_t v31 = *(_WORD *)(a1[3] + 80) & 0x1FFF;
            uint64_t v32 = (char *)v30[509];
            unint64_t v33 = v30[510];
            if ((unint64_t)v32 >= v33)
            {
              uint64_t v194 = (char *)v30[508];
              uint64_t v195 = (v32 - v194) >> 3;
              if ((unint64_t)(v195 + 1) >> 61) {
                goto LABEL_595;
              }
              unint64_t v196 = v33 - (void)v194;
              unint64_t v197 = (uint64_t)(v33 - (void)v194) >> 2;
              if (v197 <= v195 + 1) {
                unint64_t v197 = v195 + 1;
              }
              if (v196 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v198 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v198 = v197;
              }
              if (v198)
              {
                uint64_t v199 = (char *)sub_5714((uint64_t)(v30 + 510), v198);
                uint64_t v32 = (char *)v30[509];
                uint64_t v194 = (char *)v30[508];
              }
              else
              {
                uint64_t v199 = 0;
              }
              unint64_t v370 = &v199[8 * v195];
              *(void *)unint64_t v370 = v31;
              unint64_t v34 = v370 + 8;
              while (v32 != v194)
              {
                uint64_t v371 = *((void *)v32 - 1);
                v32 -= 8;
                *((void *)v370 - 1) = v371;
                v370 -= 8;
              }
              v30[508] = v370;
              v30[509] = v34;
              v30[510] = &v199[8 * v198];
              if (v194) {
                operator delete(v194);
              }
            }
            else
            {
              *(void *)uint64_t v32 = v31;
              unint64_t v34 = v32 + 8;
            }
            v30[509] = v34;
            break;
          case 0x8A:
            unint64_t v35 = *(void **)a1[2];
            uint64_t v36 = *(_WORD *)(a1[3] + 64) & 0x3FFF;
            uint64_t v37 = (char *)v35[512];
            unint64_t v38 = v35[513];
            if ((unint64_t)v37 >= v38)
            {
              uint64_t v200 = (char *)v35[511];
              uint64_t v201 = (v37 - v200) >> 3;
              if ((unint64_t)(v201 + 1) >> 61) {
                goto LABEL_595;
              }
              unint64_t v202 = v38 - (void)v200;
              unint64_t v203 = (uint64_t)(v38 - (void)v200) >> 2;
              if (v203 <= v201 + 1) {
                unint64_t v203 = v201 + 1;
              }
              if (v202 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v204 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v204 = v203;
              }
              if (v204)
              {
                uint64_t v205 = (char *)sub_5714((uint64_t)(v35 + 513), v204);
                uint64_t v37 = (char *)v35[512];
                uint64_t v200 = (char *)v35[511];
              }
              else
              {
                uint64_t v205 = 0;
              }
              unint64_t v372 = &v205[8 * v201];
              *(void *)unint64_t v372 = v36;
              unint64_t v39 = v372 + 8;
              while (v37 != v200)
              {
                uint64_t v373 = *((void *)v37 - 1);
                v37 -= 8;
                *((void *)v372 - 1) = v373;
                v372 -= 8;
              }
              v35[511] = v372;
              v35[512] = v39;
              v35[513] = &v205[8 * v204];
              if (v200) {
                operator delete(v200);
              }
            }
            else
            {
              *(void *)uint64_t v37 = v36;
              unint64_t v39 = v37 + 8;
            }
            v35[512] = v39;
            break;
          case 0x8B:
            unint64_t v40 = *(void **)a1[2];
            uint64_t v41 = *(_WORD *)(a1[3] + 48) & 0x3FFF;
            uint64_t v42 = (char *)v40[515];
            unint64_t v43 = v40[516];
            if ((unint64_t)v42 >= v43)
            {
              unint64_t v206 = (char *)v40[514];
              uint64_t v207 = (v42 - v206) >> 3;
              if ((unint64_t)(v207 + 1) >> 61) {
                goto LABEL_595;
              }
              unint64_t v208 = v43 - (void)v206;
              unint64_t v209 = (uint64_t)(v43 - (void)v206) >> 2;
              if (v209 <= v207 + 1) {
                unint64_t v209 = v207 + 1;
              }
              if (v208 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v210 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v210 = v209;
              }
              if (v210)
              {
                uint64_t v211 = (char *)sub_5714((uint64_t)(v40 + 516), v210);
                uint64_t v42 = (char *)v40[515];
                unint64_t v206 = (char *)v40[514];
              }
              else
              {
                uint64_t v211 = 0;
              }
              unint64_t v374 = &v211[8 * v207];
              *(void *)unint64_t v374 = v41;
              unint64_t v44 = v374 + 8;
              while (v42 != v206)
              {
                uint64_t v375 = *((void *)v42 - 1);
                v42 -= 8;
                *((void *)v374 - 1) = v375;
                v374 -= 8;
              }
              v40[514] = v374;
              v40[515] = v44;
              v40[516] = &v211[8 * v210];
              if (v206) {
                operator delete(v206);
              }
            }
            else
            {
              *(void *)uint64_t v42 = v41;
              unint64_t v44 = v42 + 8;
            }
            v40[515] = v44;
            break;
          case 0x8C:
            unint64_t v45 = *(void **)a1[2];
            uint64_t v46 = *(_WORD *)(a1[3] + 32) & 0x7FFF;
            unint64_t v47 = (char *)v45[518];
            unint64_t v48 = v45[519];
            if ((unint64_t)v47 >= v48)
            {
              unint64_t v212 = (char *)v45[517];
              uint64_t v213 = (v47 - v212) >> 3;
              if ((unint64_t)(v213 + 1) >> 61) {
                goto LABEL_595;
              }
              unint64_t v214 = v48 - (void)v212;
              unint64_t v215 = (uint64_t)(v48 - (void)v212) >> 2;
              if (v215 <= v213 + 1) {
                unint64_t v215 = v213 + 1;
              }
              if (v214 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v216 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v216 = v215;
              }
              if (v216)
              {
                uint64_t v217 = (char *)sub_5714((uint64_t)(v45 + 519), v216);
                unint64_t v47 = (char *)v45[518];
                unint64_t v212 = (char *)v45[517];
              }
              else
              {
                uint64_t v217 = 0;
              }
              unint64_t v376 = &v217[8 * v213];
              *(void *)unint64_t v376 = v46;
              uint64_t v49 = v376 + 8;
              while (v47 != v212)
              {
                uint64_t v377 = *((void *)v47 - 1);
                v47 -= 8;
                *((void *)v376 - 1) = v377;
                v376 -= 8;
              }
              v45[517] = v376;
              v45[518] = v49;
              v45[519] = &v217[8 * v216];
              if (v212) {
                operator delete(v212);
              }
            }
            else
            {
              *(void *)unint64_t v47 = v46;
              uint64_t v49 = v47 + 8;
            }
            v45[518] = v49;
            break;
          case 0x8D:
            unint64_t v50 = *(void **)a1[2];
            uint64_t v51 = *(_WORD *)(a1[3] + 82) & 0x1FFF;
            unint64_t v52 = (char *)v50[521];
            unint64_t v53 = v50[522];
            if ((unint64_t)v52 >= v53)
            {
              unint64_t v218 = (char *)v50[520];
              uint64_t v219 = (v52 - v218) >> 3;
              if ((unint64_t)(v219 + 1) >> 61) {
                goto LABEL_595;
              }
              unint64_t v220 = v53 - (void)v218;
              unint64_t v221 = (uint64_t)(v53 - (void)v218) >> 2;
              if (v221 <= v219 + 1) {
                unint64_t v221 = v219 + 1;
              }
              if (v220 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v222 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v222 = v221;
              }
              if (v222)
              {
                uint64_t v223 = (char *)sub_5714((uint64_t)(v50 + 522), v222);
                unint64_t v52 = (char *)v50[521];
                unint64_t v218 = (char *)v50[520];
              }
              else
              {
                uint64_t v223 = 0;
              }
              unint64_t v378 = &v223[8 * v219];
              *(void *)unint64_t v378 = v51;
              uint64_t v54 = v378 + 8;
              while (v52 != v218)
              {
                uint64_t v379 = *((void *)v52 - 1);
                v52 -= 8;
                *((void *)v378 - 1) = v379;
                v378 -= 8;
              }
              v50[520] = v378;
              v50[521] = v54;
              v50[522] = &v223[8 * v222];
              if (v218) {
                operator delete(v218);
              }
            }
            else
            {
              *(void *)unint64_t v52 = v51;
              uint64_t v54 = v52 + 8;
            }
            v50[521] = v54;
            break;
          case 0x8E:
            uint64_t v55 = *(void **)a1[2];
            uint64_t v56 = *(_WORD *)(a1[3] + 66) & 0x3FFF;
            unint64_t v57 = (char *)v55[524];
            unint64_t v58 = v55[525];
            if ((unint64_t)v57 >= v58)
            {
              uint64_t v224 = (char *)v55[523];
              uint64_t v225 = (v57 - v224) >> 3;
              if ((unint64_t)(v225 + 1) >> 61) {
                goto LABEL_595;
              }
              unint64_t v226 = v58 - (void)v224;
              unint64_t v227 = (uint64_t)(v58 - (void)v224) >> 2;
              if (v227 <= v225 + 1) {
                unint64_t v227 = v225 + 1;
              }
              if (v226 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v228 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v228 = v227;
              }
              if (v228)
              {
                unint64_t v229 = (char *)sub_5714((uint64_t)(v55 + 525), v228);
                unint64_t v57 = (char *)v55[524];
                uint64_t v224 = (char *)v55[523];
              }
              else
              {
                unint64_t v229 = 0;
              }
              uint64_t v380 = &v229[8 * v225];
              *(void *)uint64_t v380 = v56;
              unint64_t v59 = v380 + 8;
              while (v57 != v224)
              {
                uint64_t v381 = *((void *)v57 - 1);
                v57 -= 8;
                *((void *)v380 - 1) = v381;
                v380 -= 8;
              }
              v55[523] = v380;
              v55[524] = v59;
              v55[525] = &v229[8 * v228];
              if (v224) {
                operator delete(v224);
              }
            }
            else
            {
              *(void *)unint64_t v57 = v56;
              unint64_t v59 = v57 + 8;
            }
            v55[524] = v59;
            break;
          case 0x8F:
            unint64_t v60 = *(void **)a1[2];
            uint64_t v61 = *(_WORD *)(a1[3] + 50) & 0x3FFF;
            unint64_t v62 = (char *)v60[527];
            unint64_t v63 = v60[528];
            if ((unint64_t)v62 >= v63)
            {
              unint64_t v230 = (char *)v60[526];
              uint64_t v231 = (v62 - v230) >> 3;
              if ((unint64_t)(v231 + 1) >> 61) {
                goto LABEL_595;
              }
              unint64_t v232 = v63 - (void)v230;
              unint64_t v233 = (uint64_t)(v63 - (void)v230) >> 2;
              if (v233 <= v231 + 1) {
                unint64_t v233 = v231 + 1;
              }
              if (v232 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v234 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v234 = v233;
              }
              if (v234)
              {
                unint64_t v235 = (char *)sub_5714((uint64_t)(v60 + 528), v234);
                unint64_t v62 = (char *)v60[527];
                unint64_t v230 = (char *)v60[526];
              }
              else
              {
                unint64_t v235 = 0;
              }
              unint64_t v382 = &v235[8 * v231];
              *(void *)unint64_t v382 = v61;
              unint64_t v64 = v382 + 8;
              while (v62 != v230)
              {
                uint64_t v383 = *((void *)v62 - 1);
                v62 -= 8;
                *((void *)v382 - 1) = v383;
                v382 -= 8;
              }
              v60[526] = v382;
              v60[527] = v64;
              v60[528] = &v235[8 * v234];
              if (v230) {
                operator delete(v230);
              }
            }
            else
            {
              *(void *)unint64_t v62 = v61;
              unint64_t v64 = v62 + 8;
            }
            v60[527] = v64;
            break;
          case 0x90:
            unint64_t v65 = *(void **)a1[2];
            uint64_t v66 = *(_WORD *)(a1[3] + 34) & 0x7FFF;
            uint64_t v67 = (char *)v65[530];
            unint64_t v68 = v65[531];
            if ((unint64_t)v67 >= v68)
            {
              uint64_t v236 = (char *)v65[529];
              uint64_t v237 = (v67 - v236) >> 3;
              if ((unint64_t)(v237 + 1) >> 61) {
                goto LABEL_595;
              }
              unint64_t v238 = v68 - (void)v236;
              unint64_t v239 = (uint64_t)(v68 - (void)v236) >> 2;
              if (v239 <= v237 + 1) {
                unint64_t v239 = v237 + 1;
              }
              if (v238 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v240 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v240 = v239;
              }
              if (v240)
              {
                unint64_t v241 = (char *)sub_5714((uint64_t)(v65 + 531), v240);
                uint64_t v67 = (char *)v65[530];
                uint64_t v236 = (char *)v65[529];
              }
              else
              {
                unint64_t v241 = 0;
              }
              unint64_t v384 = &v241[8 * v237];
              *(void *)unint64_t v384 = v66;
              unint64_t v69 = v384 + 8;
              while (v67 != v236)
              {
                uint64_t v385 = *((void *)v67 - 1);
                v67 -= 8;
                *((void *)v384 - 1) = v385;
                v384 -= 8;
              }
              v65[529] = v384;
              v65[530] = v69;
              v65[531] = &v241[8 * v240];
              if (v236) {
                operator delete(v236);
              }
            }
            else
            {
              *(void *)uint64_t v67 = v66;
              unint64_t v69 = v67 + 8;
            }
            v65[530] = v69;
            break;
          case 0x91:
            unint64_t v70 = *(void **)a1[2];
            uint64_t v71 = *(_WORD *)(a1[3] + 72) & 0x1FFF;
            uint64_t v72 = (char *)v70[533];
            unint64_t v73 = v70[534];
            if ((unint64_t)v72 >= v73)
            {
              uint64_t v242 = (char *)v70[532];
              uint64_t v243 = (v72 - v242) >> 3;
              if ((unint64_t)(v243 + 1) >> 61) {
                goto LABEL_595;
              }
              unint64_t v244 = v73 - (void)v242;
              unint64_t v245 = (uint64_t)(v73 - (void)v242) >> 2;
              if (v245 <= v243 + 1) {
                unint64_t v245 = v243 + 1;
              }
              if (v244 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v246 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v246 = v245;
              }
              if (v246)
              {
                unint64_t v247 = (char *)sub_5714((uint64_t)(v70 + 534), v246);
                uint64_t v72 = (char *)v70[533];
                uint64_t v242 = (char *)v70[532];
              }
              else
              {
                unint64_t v247 = 0;
              }
              unint64_t v386 = &v247[8 * v243];
              *(void *)unint64_t v386 = v71;
              unint64_t v74 = v386 + 8;
              while (v72 != v242)
              {
                uint64_t v387 = *((void *)v72 - 1);
                v72 -= 8;
                *((void *)v386 - 1) = v387;
                v386 -= 8;
              }
              v70[532] = v386;
              v70[533] = v74;
              v70[534] = &v247[8 * v246];
              if (v242) {
                operator delete(v242);
              }
            }
            else
            {
              *(void *)uint64_t v72 = v71;
              unint64_t v74 = v72 + 8;
            }
            v70[533] = v74;
            break;
          case 0x92:
            unint64_t v75 = *(void **)a1[2];
            uint64_t v76 = *(_WORD *)(a1[3] + 56) & 0x1FFF;
            unint64_t v77 = (char *)v75[536];
            unint64_t v78 = v75[537];
            if ((unint64_t)v77 >= v78)
            {
              uint64_t v248 = (char *)v75[535];
              uint64_t v249 = (v77 - v248) >> 3;
              if ((unint64_t)(v249 + 1) >> 61) {
                goto LABEL_595;
              }
              unint64_t v250 = v78 - (void)v248;
              unint64_t v251 = (uint64_t)(v78 - (void)v248) >> 2;
              if (v251 <= v249 + 1) {
                unint64_t v251 = v249 + 1;
              }
              if (v250 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v252 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v252 = v251;
              }
              if (v252)
              {
                unint64_t v253 = (char *)sub_5714((uint64_t)(v75 + 537), v252);
                unint64_t v77 = (char *)v75[536];
                uint64_t v248 = (char *)v75[535];
              }
              else
              {
                unint64_t v253 = 0;
              }
              uint64_t v388 = &v253[8 * v249];
              *(void *)uint64_t v388 = v76;
              uint64_t v79 = v388 + 8;
              while (v77 != v248)
              {
                uint64_t v389 = *((void *)v77 - 1);
                v77 -= 8;
                *((void *)v388 - 1) = v389;
                v388 -= 8;
              }
              v75[535] = v388;
              v75[536] = v79;
              v75[537] = &v253[8 * v252];
              if (v248) {
                operator delete(v248);
              }
            }
            else
            {
              *(void *)unint64_t v77 = v76;
              uint64_t v79 = v77 + 8;
            }
            v75[536] = v79;
            break;
          case 0x93:
            unint64_t v80 = *(void **)a1[2];
            uint64_t v81 = *(_WORD *)(a1[3] + 40) & 0x3FFF;
            unint64_t v82 = (char *)v80[539];
            unint64_t v83 = v80[540];
            if ((unint64_t)v82 >= v83)
            {
              uint64_t v254 = (char *)v80[538];
              uint64_t v255 = (v82 - v254) >> 3;
              if ((unint64_t)(v255 + 1) >> 61) {
                goto LABEL_595;
              }
              unint64_t v256 = v83 - (void)v254;
              unint64_t v257 = (uint64_t)(v83 - (void)v254) >> 2;
              if (v257 <= v255 + 1) {
                unint64_t v257 = v255 + 1;
              }
              if (v256 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v258 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v258 = v257;
              }
              if (v258)
              {
                unint64_t v259 = (char *)sub_5714((uint64_t)(v80 + 540), v258);
                unint64_t v82 = (char *)v80[539];
                uint64_t v254 = (char *)v80[538];
              }
              else
              {
                unint64_t v259 = 0;
              }
              uint64_t v390 = &v259[8 * v255];
              *(void *)uint64_t v390 = v81;
              unint64_t v84 = v390 + 8;
              while (v82 != v254)
              {
                uint64_t v391 = *((void *)v82 - 1);
                v82 -= 8;
                *((void *)v390 - 1) = v391;
                v390 -= 8;
              }
              v80[538] = v390;
              v80[539] = v84;
              v80[540] = &v259[8 * v258];
              if (v254) {
                operator delete(v254);
              }
            }
            else
            {
              *(void *)unint64_t v82 = v81;
              unint64_t v84 = v82 + 8;
            }
            v80[539] = v84;
            break;
          case 0x94:
            uint64_t v85 = *(void **)a1[2];
            uint64_t v86 = *(_WORD *)(a1[3] + 24) & 0x7FFF;
            uint64_t v87 = (char *)v85[542];
            unint64_t v88 = v85[543];
            if ((unint64_t)v87 >= v88)
            {
              unint64_t v260 = (char *)v85[541];
              uint64_t v261 = (v87 - v260) >> 3;
              if ((unint64_t)(v261 + 1) >> 61) {
                goto LABEL_595;
              }
              unint64_t v262 = v88 - (void)v260;
              unint64_t v263 = (uint64_t)(v88 - (void)v260) >> 2;
              if (v263 <= v261 + 1) {
                unint64_t v263 = v261 + 1;
              }
              if (v262 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v264 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v264 = v263;
              }
              if (v264)
              {
                unint64_t v265 = (char *)sub_5714((uint64_t)(v85 + 543), v264);
                uint64_t v87 = (char *)v85[542];
                unint64_t v260 = (char *)v85[541];
              }
              else
              {
                unint64_t v265 = 0;
              }
              int v392 = &v265[8 * v261];
              *(void *)int v392 = v86;
              uint64_t v89 = v392 + 8;
              while (v87 != v260)
              {
                uint64_t v393 = *((void *)v87 - 1);
                v87 -= 8;
                *((void *)v392 - 1) = v393;
                v392 -= 8;
              }
              v85[541] = v392;
              v85[542] = v89;
              v85[543] = &v265[8 * v264];
              if (v260) {
                operator delete(v260);
              }
            }
            else
            {
              *(void *)uint64_t v87 = v86;
              uint64_t v89 = v87 + 8;
            }
            v85[542] = v89;
            break;
          case 0x95:
            unint64_t v90 = *(void **)a1[2];
            uint64_t v91 = *(_WORD *)(a1[3] + 74) & 0x1FFF;
            uint64_t v92 = (char *)v90[545];
            unint64_t v93 = v90[546];
            if ((unint64_t)v92 >= v93)
            {
              unint64_t v266 = (char *)v90[544];
              uint64_t v267 = (v92 - v266) >> 3;
              if ((unint64_t)(v267 + 1) >> 61) {
                goto LABEL_595;
              }
              unint64_t v268 = v93 - (void)v266;
              unint64_t v269 = (uint64_t)(v93 - (void)v266) >> 2;
              if (v269 <= v267 + 1) {
                unint64_t v269 = v267 + 1;
              }
              if (v268 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v270 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v270 = v269;
              }
              if (v270)
              {
                unint64_t v271 = (char *)sub_5714((uint64_t)(v90 + 546), v270);
                uint64_t v92 = (char *)v90[545];
                unint64_t v266 = (char *)v90[544];
              }
              else
              {
                unint64_t v271 = 0;
              }
              uint64_t v394 = &v271[8 * v267];
              *(void *)uint64_t v394 = v91;
              int v94 = v394 + 8;
              while (v92 != v266)
              {
                uint64_t v395 = *((void *)v92 - 1);
                v92 -= 8;
                *((void *)v394 - 1) = v395;
                v394 -= 8;
              }
              v90[544] = v394;
              v90[545] = v94;
              v90[546] = &v271[8 * v270];
              if (v266) {
                operator delete(v266);
              }
            }
            else
            {
              *(void *)uint64_t v92 = v91;
              int v94 = v92 + 8;
            }
            v90[545] = v94;
            break;
          case 0x96:
            uint64_t v95 = *(void **)a1[2];
            uint64_t v96 = *(_WORD *)(a1[3] + 58) & 0x1FFF;
            uint64_t v97 = (char *)v95[548];
            unint64_t v98 = v95[549];
            if ((unint64_t)v97 >= v98)
            {
              unint64_t v272 = (char *)v95[547];
              uint64_t v273 = (v97 - v272) >> 3;
              if ((unint64_t)(v273 + 1) >> 61) {
                goto LABEL_595;
              }
              unint64_t v274 = v98 - (void)v272;
              unint64_t v275 = (uint64_t)(v98 - (void)v272) >> 2;
              if (v275 <= v273 + 1) {
                unint64_t v275 = v273 + 1;
              }
              if (v274 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v276 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v276 = v275;
              }
              if (v276)
              {
                unint64_t v277 = (char *)sub_5714((uint64_t)(v95 + 549), v276);
                uint64_t v97 = (char *)v95[548];
                unint64_t v272 = (char *)v95[547];
              }
              else
              {
                unint64_t v277 = 0;
              }
              unint64_t v396 = &v277[8 * v273];
              *(void *)unint64_t v396 = v96;
              unint64_t v99 = v396 + 8;
              while (v97 != v272)
              {
                uint64_t v397 = *((void *)v97 - 1);
                v97 -= 8;
                *((void *)v396 - 1) = v397;
                v396 -= 8;
              }
              v95[547] = v396;
              v95[548] = v99;
              v95[549] = &v277[8 * v276];
              if (v272) {
                operator delete(v272);
              }
            }
            else
            {
              *(void *)uint64_t v97 = v96;
              unint64_t v99 = v97 + 8;
            }
            v95[548] = v99;
            break;
          case 0x97:
            unint64_t v100 = *(void **)a1[2];
            uint64_t v101 = *(_WORD *)(a1[3] + 42) & 0x3FFF;
            unint64_t v102 = (char *)v100[551];
            unint64_t v103 = v100[552];
            if ((unint64_t)v102 >= v103)
            {
              unint64_t v278 = (char *)v100[550];
              uint64_t v279 = (v102 - v278) >> 3;
              if ((unint64_t)(v279 + 1) >> 61) {
                goto LABEL_595;
              }
              unint64_t v280 = v103 - (void)v278;
              unint64_t v281 = (uint64_t)(v103 - (void)v278) >> 2;
              if (v281 <= v279 + 1) {
                unint64_t v281 = v279 + 1;
              }
              if (v280 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v282 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v282 = v281;
              }
              if (v282)
              {
                unint64_t v283 = (char *)sub_5714((uint64_t)(v100 + 552), v282);
                unint64_t v102 = (char *)v100[551];
                unint64_t v278 = (char *)v100[550];
              }
              else
              {
                unint64_t v283 = 0;
              }
              unint64_t v398 = &v283[8 * v279];
              *(void *)unint64_t v398 = v101;
              uint64_t v104 = v398 + 8;
              while (v102 != v278)
              {
                uint64_t v399 = *((void *)v102 - 1);
                v102 -= 8;
                *((void *)v398 - 1) = v399;
                v398 -= 8;
              }
              v100[550] = v398;
              v100[551] = v104;
              v100[552] = &v283[8 * v282];
              if (v278) {
                operator delete(v278);
              }
            }
            else
            {
              *(void *)unint64_t v102 = v101;
              uint64_t v104 = v102 + 8;
            }
            v100[551] = v104;
            break;
          case 0x98:
            unint64_t v105 = *(void **)a1[2];
            uint64_t v106 = *(_WORD *)(a1[3] + 26) & 0x7FFF;
            unint64_t v107 = (char *)v105[554];
            unint64_t v108 = v105[555];
            if ((unint64_t)v107 >= v108)
            {
              unint64_t v284 = (char *)v105[553];
              uint64_t v285 = (v107 - v284) >> 3;
              if ((unint64_t)(v285 + 1) >> 61) {
                goto LABEL_595;
              }
              unint64_t v286 = v108 - (void)v284;
              unint64_t v287 = (uint64_t)(v108 - (void)v284) >> 2;
              if (v287 <= v285 + 1) {
                unint64_t v287 = v285 + 1;
              }
              if (v286 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v288 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v288 = v287;
              }
              if (v288)
              {
                uint64_t v289 = (char *)sub_5714((uint64_t)(v105 + 555), v288);
                unint64_t v107 = (char *)v105[554];
                unint64_t v284 = (char *)v105[553];
              }
              else
              {
                uint64_t v289 = 0;
              }
              unint64_t v400 = &v289[8 * v285];
              *(void *)unint64_t v400 = v106;
              uint64_t v109 = v400 + 8;
              while (v107 != v284)
              {
                uint64_t v401 = *((void *)v107 - 1);
                v107 -= 8;
                *((void *)v400 - 1) = v401;
                v400 -= 8;
              }
              v105[553] = v400;
              v105[554] = v109;
              v105[555] = &v289[8 * v288];
              if (v284) {
                operator delete(v284);
              }
            }
            else
            {
              *(void *)unint64_t v107 = v106;
              uint64_t v109 = v107 + 8;
            }
            v105[554] = v109;
            break;
          case 0x99:
            uint64_t v110 = *(void **)a1[2];
            uint64_t v111 = *(_WORD *)(a1[3] + 76) & 0x1FFF;
            unint64_t v112 = (char *)v110[557];
            unint64_t v113 = v110[558];
            if ((unint64_t)v112 >= v113)
            {
              unint64_t v290 = (char *)v110[556];
              uint64_t v291 = (v112 - v290) >> 3;
              if ((unint64_t)(v291 + 1) >> 61) {
                goto LABEL_595;
              }
              unint64_t v292 = v113 - (void)v290;
              unint64_t v293 = (uint64_t)(v113 - (void)v290) >> 2;
              if (v293 <= v291 + 1) {
                unint64_t v293 = v291 + 1;
              }
              if (v292 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v294 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v294 = v293;
              }
              if (v294)
              {
                uint64_t v295 = (char *)sub_5714((uint64_t)(v110 + 558), v294);
                unint64_t v112 = (char *)v110[557];
                unint64_t v290 = (char *)v110[556];
              }
              else
              {
                uint64_t v295 = 0;
              }
              unint64_t v402 = &v295[8 * v291];
              *(void *)unint64_t v402 = v111;
              unint64_t v114 = v402 + 8;
              while (v112 != v290)
              {
                uint64_t v403 = *((void *)v112 - 1);
                v112 -= 8;
                *((void *)v402 - 1) = v403;
                v402 -= 8;
              }
              v110[556] = v402;
              v110[557] = v114;
              v110[558] = &v295[8 * v294];
              if (v290) {
                operator delete(v290);
              }
            }
            else
            {
              *(void *)unint64_t v112 = v111;
              unint64_t v114 = v112 + 8;
            }
            v110[557] = v114;
            break;
          case 0x9A:
            uint64_t v115 = *(void **)a1[2];
            uint64_t v116 = *(_WORD *)(a1[3] + 60) & 0x1FFF;
            unint64_t v117 = (char *)v115[560];
            unint64_t v118 = v115[561];
            if ((unint64_t)v117 >= v118)
            {
              unint64_t v296 = (char *)v115[559];
              uint64_t v297 = (v117 - v296) >> 3;
              if ((unint64_t)(v297 + 1) >> 61) {
                goto LABEL_595;
              }
              unint64_t v298 = v118 - (void)v296;
              unint64_t v299 = (uint64_t)(v118 - (void)v296) >> 2;
              if (v299 <= v297 + 1) {
                unint64_t v299 = v297 + 1;
              }
              if (v298 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v300 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v300 = v299;
              }
              if (v300)
              {
                uint64_t v301 = (char *)sub_5714((uint64_t)(v115 + 561), v300);
                unint64_t v117 = (char *)v115[560];
                unint64_t v296 = (char *)v115[559];
              }
              else
              {
                uint64_t v301 = 0;
              }
              uint64_t v404 = &v301[8 * v297];
              *(void *)uint64_t v404 = v116;
              unint64_t v119 = v404 + 8;
              while (v117 != v296)
              {
                uint64_t v405 = *((void *)v117 - 1);
                v117 -= 8;
                *((void *)v404 - 1) = v405;
                v404 -= 8;
              }
              v115[559] = v404;
              v115[560] = v119;
              v115[561] = &v301[8 * v300];
              if (v296) {
                operator delete(v296);
              }
            }
            else
            {
              *(void *)unint64_t v117 = v116;
              unint64_t v119 = v117 + 8;
            }
            v115[560] = v119;
            break;
          case 0x9B:
            uint64_t v120 = *(void **)a1[2];
            uint64_t v121 = *(_WORD *)(a1[3] + 44) & 0x3FFF;
            uint64_t v122 = (char *)v120[563];
            unint64_t v123 = v120[564];
            if ((unint64_t)v122 >= v123)
            {
              uint64_t v302 = (char *)v120[562];
              uint64_t v303 = (v122 - v302) >> 3;
              if ((unint64_t)(v303 + 1) >> 61) {
                goto LABEL_595;
              }
              unint64_t v304 = v123 - (void)v302;
              unint64_t v305 = (uint64_t)(v123 - (void)v302) >> 2;
              if (v305 <= v303 + 1) {
                unint64_t v305 = v303 + 1;
              }
              if (v304 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v306 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v306 = v305;
              }
              if (v306)
              {
                uint64_t v307 = (char *)sub_5714((uint64_t)(v120 + 564), v306);
                uint64_t v122 = (char *)v120[563];
                uint64_t v302 = (char *)v120[562];
              }
              else
              {
                uint64_t v307 = 0;
              }
              uint64_t v406 = &v307[8 * v303];
              *(void *)uint64_t v406 = v121;
              unint64_t v124 = v406 + 8;
              while (v122 != v302)
              {
                uint64_t v407 = *((void *)v122 - 1);
                v122 -= 8;
                *((void *)v406 - 1) = v407;
                v406 -= 8;
              }
              v120[562] = v406;
              v120[563] = v124;
              v120[564] = &v307[8 * v306];
              if (v302) {
                operator delete(v302);
              }
            }
            else
            {
              *(void *)uint64_t v122 = v121;
              unint64_t v124 = v122 + 8;
            }
            v120[563] = v124;
            break;
          case 0x9C:
            unint64_t v125 = *(void **)a1[2];
            uint64_t v126 = *(_WORD *)(a1[3] + 28) & 0x7FFF;
            uint64_t v127 = (char *)v125[566];
            unint64_t v128 = v125[567];
            if ((unint64_t)v127 >= v128)
            {
              long long v308 = (char *)v125[565];
              uint64_t v309 = (v127 - v308) >> 3;
              if ((unint64_t)(v309 + 1) >> 61) {
                goto LABEL_595;
              }
              unint64_t v310 = v128 - (void)v308;
              unint64_t v311 = (uint64_t)(v128 - (void)v308) >> 2;
              if (v311 <= v309 + 1) {
                unint64_t v311 = v309 + 1;
              }
              if (v310 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v312 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v312 = v311;
              }
              if (v312)
              {
                uint64_t v313 = (char *)sub_5714((uint64_t)(v125 + 567), v312);
                uint64_t v127 = (char *)v125[566];
                long long v308 = (char *)v125[565];
              }
              else
              {
                uint64_t v313 = 0;
              }
              unint64_t v408 = &v313[8 * v309];
              *(void *)unint64_t v408 = v126;
              unint64_t v129 = v408 + 8;
              while (v127 != v308)
              {
                uint64_t v409 = *((void *)v127 - 1);
                v127 -= 8;
                *((void *)v408 - 1) = v409;
                v408 -= 8;
              }
              v125[565] = v408;
              v125[566] = v129;
              v125[567] = &v313[8 * v312];
              if (v308) {
                operator delete(v308);
              }
            }
            else
            {
              *(void *)uint64_t v127 = v126;
              unint64_t v129 = v127 + 8;
            }
            v125[566] = v129;
            break;
          case 0x9D:
            unint64_t v130 = *(void **)a1[2];
            uint64_t v131 = *(_WORD *)(a1[3] + 68) & 0x1FFF;
            int v132 = (char *)v130[569];
            unint64_t v133 = v130[570];
            if ((unint64_t)v132 >= v133)
            {
              unint64_t v314 = (char *)v130[568];
              uint64_t v315 = (v132 - v314) >> 3;
              if ((unint64_t)(v315 + 1) >> 61) {
                goto LABEL_595;
              }
              unint64_t v316 = v133 - (void)v314;
              unint64_t v317 = (uint64_t)(v133 - (void)v314) >> 2;
              if (v317 <= v315 + 1) {
                unint64_t v317 = v315 + 1;
              }
              if (v316 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v318 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v318 = v317;
              }
              if (v318)
              {
                uint64_t v319 = (char *)sub_5714((uint64_t)(v130 + 570), v318);
                int v132 = (char *)v130[569];
                unint64_t v314 = (char *)v130[568];
              }
              else
              {
                uint64_t v319 = 0;
              }
              unint64_t v410 = &v319[8 * v315];
              *(void *)unint64_t v410 = v131;
              uint64_t v134 = v410 + 8;
              while (v132 != v314)
              {
                uint64_t v411 = *((void *)v132 - 1);
                v132 -= 8;
                *((void *)v410 - 1) = v411;
                v410 -= 8;
              }
              v130[568] = v410;
              v130[569] = v134;
              v130[570] = &v319[8 * v318];
              if (v314) {
                operator delete(v314);
              }
            }
            else
            {
              *(void *)int v132 = v131;
              uint64_t v134 = v132 + 8;
            }
            v130[569] = v134;
            break;
          case 0x9E:
            unint64_t v135 = *(void **)a1[2];
            uint64_t v136 = *(_WORD *)(a1[3] + 52) & 0x3FFF;
            unint64_t v137 = (char *)v135[572];
            unint64_t v138 = v135[573];
            if ((unint64_t)v137 >= v138)
            {
              uint64_t v320 = (char *)v135[571];
              uint64_t v321 = (v137 - v320) >> 3;
              if ((unint64_t)(v321 + 1) >> 61) {
                goto LABEL_595;
              }
              unint64_t v322 = v138 - (void)v320;
              unint64_t v323 = (uint64_t)(v138 - (void)v320) >> 2;
              if (v323 <= v321 + 1) {
                unint64_t v323 = v321 + 1;
              }
              if (v322 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v324 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v324 = v323;
              }
              if (v324)
              {
                uint64_t v325 = (char *)sub_5714((uint64_t)(v135 + 573), v324);
                unint64_t v137 = (char *)v135[572];
                uint64_t v320 = (char *)v135[571];
              }
              else
              {
                uint64_t v325 = 0;
              }
              uint64_t v412 = &v325[8 * v321];
              *(void *)uint64_t v412 = v136;
              uint64_t v139 = v412 + 8;
              while (v137 != v320)
              {
                uint64_t v413 = *((void *)v137 - 1);
                v137 -= 8;
                *((void *)v412 - 1) = v413;
                v412 -= 8;
              }
              v135[571] = v412;
              v135[572] = v139;
              v135[573] = &v325[8 * v324];
              if (v320) {
                operator delete(v320);
              }
            }
            else
            {
              *(void *)unint64_t v137 = v136;
              uint64_t v139 = v137 + 8;
            }
            v135[572] = v139;
            break;
          case 0x9F:
            uint64_t v140 = *(void **)a1[2];
            uint64_t v141 = *(_WORD *)(a1[3] + 36) & 0x3FFF;
            unint64_t v142 = (char *)v140[575];
            unint64_t v143 = v140[576];
            if ((unint64_t)v142 >= v143)
            {
              unint64_t v326 = (char *)v140[574];
              uint64_t v327 = (v142 - v326) >> 3;
              if ((unint64_t)(v327 + 1) >> 61) {
                goto LABEL_595;
              }
              unint64_t v328 = v143 - (void)v326;
              unint64_t v329 = (uint64_t)(v143 - (void)v326) >> 2;
              if (v329 <= v327 + 1) {
                unint64_t v329 = v327 + 1;
              }
              if (v328 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v330 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v330 = v329;
              }
              if (v330)
              {
                uint64_t v331 = (char *)sub_5714((uint64_t)(v140 + 576), v330);
                unint64_t v142 = (char *)v140[575];
                unint64_t v326 = (char *)v140[574];
              }
              else
              {
                uint64_t v331 = 0;
              }
              uint64_t v414 = &v331[8 * v327];
              *(void *)uint64_t v414 = v141;
              int v144 = v414 + 8;
              while (v142 != v326)
              {
                uint64_t v415 = *((void *)v142 - 1);
                v142 -= 8;
                *((void *)v414 - 1) = v415;
                v414 -= 8;
              }
              v140[574] = v414;
              v140[575] = v144;
              v140[576] = &v331[8 * v330];
              if (v326) {
                operator delete(v326);
              }
            }
            else
            {
              *(void *)unint64_t v142 = v141;
              int v144 = v142 + 8;
            }
            v140[575] = v144;
            break;
          case 0xA0:
            uint64_t v145 = *(void **)a1[2];
            uint64_t v146 = (unsigned __int16)*(_DWORD *)(a1[3] + 20) >> 1;
            unint64_t v147 = (char *)v145[578];
            unint64_t v148 = v145[579];
            if ((unint64_t)v147 >= v148)
            {
              unint64_t v332 = (char *)v145[577];
              uint64_t v333 = (v147 - v332) >> 3;
              if ((unint64_t)(v333 + 1) >> 61) {
                goto LABEL_595;
              }
              unint64_t v334 = v148 - (void)v332;
              unint64_t v335 = (uint64_t)(v148 - (void)v332) >> 2;
              if (v335 <= v333 + 1) {
                unint64_t v335 = v333 + 1;
              }
              if (v334 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v336 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v336 = v335;
              }
              if (v336)
              {
                unint64_t v337 = (char *)sub_5714((uint64_t)(v145 + 579), v336);
                unint64_t v147 = (char *)v145[578];
                unint64_t v332 = (char *)v145[577];
              }
              else
              {
                unint64_t v337 = 0;
              }
              int v416 = &v337[8 * v333];
              *(void *)int v416 = v146;
              unint64_t v149 = v416 + 8;
              while (v147 != v332)
              {
                uint64_t v417 = *((void *)v147 - 1);
                v147 -= 8;
                *((void *)v416 - 1) = v417;
                v416 -= 8;
              }
              v145[577] = v416;
              v145[578] = v149;
              v145[579] = &v337[8 * v336];
              if (v332) {
                operator delete(v332);
              }
            }
            else
            {
              *(void *)unint64_t v147 = v146;
              unint64_t v149 = v147 + 8;
            }
            v145[578] = v149;
            break;
          case 0xA1:
            uint64_t v150 = *(void **)a1[2];
            uint64_t v151 = *(_WORD *)(a1[3] + 70) & 0x1FFF;
            uint64_t v152 = (char *)v150[581];
            unint64_t v153 = v150[582];
            if ((unint64_t)v152 >= v153)
            {
              int v338 = (char *)v150[580];
              uint64_t v339 = (v152 - v338) >> 3;
              if ((unint64_t)(v339 + 1) >> 61) {
                goto LABEL_595;
              }
              unint64_t v340 = v153 - (void)v338;
              unint64_t v341 = (uint64_t)(v153 - (void)v338) >> 2;
              if (v341 <= v339 + 1) {
                unint64_t v341 = v339 + 1;
              }
              if (v340 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v342 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v342 = v341;
              }
              if (v342)
              {
                uint64_t v343 = (char *)sub_5714((uint64_t)(v150 + 582), v342);
                uint64_t v152 = (char *)v150[581];
                int v338 = (char *)v150[580];
              }
              else
              {
                uint64_t v343 = 0;
              }
              unint64_t v418 = &v343[8 * v339];
              *(void *)unint64_t v418 = v151;
              unint64_t v154 = v418 + 8;
              while (v152 != v338)
              {
                uint64_t v419 = *((void *)v152 - 1);
                v152 -= 8;
                *((void *)v418 - 1) = v419;
                v418 -= 8;
              }
              v150[580] = v418;
              v150[581] = v154;
              v150[582] = &v343[8 * v342];
              if (v338) {
                operator delete(v338);
              }
            }
            else
            {
              *(void *)uint64_t v152 = v151;
              unint64_t v154 = v152 + 8;
            }
            v150[581] = v154;
            break;
          case 0xA2:
            unint64_t v155 = *(void **)a1[2];
            uint64_t v156 = *(_WORD *)(a1[3] + 54) & 0x3FFF;
            uint64_t v157 = (char *)v155[584];
            unint64_t v158 = v155[585];
            if ((unint64_t)v157 >= v158)
            {
              int v344 = (char *)v155[583];
              uint64_t v345 = (v157 - v344) >> 3;
              if ((unint64_t)(v345 + 1) >> 61) {
                goto LABEL_595;
              }
              unint64_t v346 = v158 - (void)v344;
              unint64_t v347 = (uint64_t)(v158 - (void)v344) >> 2;
              if (v347 <= v345 + 1) {
                unint64_t v347 = v345 + 1;
              }
              if (v346 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v348 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v348 = v347;
              }
              if (v348)
              {
                unint64_t v349 = (char *)sub_5714((uint64_t)(v155 + 585), v348);
                uint64_t v157 = (char *)v155[584];
                int v344 = (char *)v155[583];
              }
              else
              {
                unint64_t v349 = 0;
              }
              unint64_t v420 = &v349[8 * v345];
              *(void *)unint64_t v420 = v156;
              unint64_t v159 = v420 + 8;
              while (v157 != v344)
              {
                uint64_t v421 = *((void *)v157 - 1);
                v157 -= 8;
                *((void *)v420 - 1) = v421;
                v420 -= 8;
              }
              v155[583] = v420;
              v155[584] = v159;
              v155[585] = &v349[8 * v348];
              if (v344) {
                operator delete(v344);
              }
            }
            else
            {
              *(void *)uint64_t v157 = v156;
              unint64_t v159 = v157 + 8;
            }
            v155[584] = v159;
            break;
          case 0xA3:
            unint64_t v160 = *(void **)a1[2];
            uint64_t v161 = *(_WORD *)(a1[3] + 38) & 0x3FFF;
            uint64_t v162 = (char *)v160[587];
            unint64_t v163 = v160[588];
            if ((unint64_t)v162 >= v163)
            {
              unint64_t v350 = (char *)v160[586];
              uint64_t v351 = (v162 - v350) >> 3;
              if ((unint64_t)(v351 + 1) >> 61) {
                goto LABEL_595;
              }
              unint64_t v352 = v163 - (void)v350;
              unint64_t v353 = (uint64_t)(v163 - (void)v350) >> 2;
              if (v353 <= v351 + 1) {
                unint64_t v353 = v351 + 1;
              }
              if (v352 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v354 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v354 = v353;
              }
              if (v354)
              {
                unint64_t v355 = (char *)sub_5714((uint64_t)(v160 + 588), v354);
                uint64_t v162 = (char *)v160[587];
                unint64_t v350 = (char *)v160[586];
              }
              else
              {
                unint64_t v355 = 0;
              }
              unint64_t v422 = &v355[8 * v351];
              *(void *)unint64_t v422 = v161;
              uint64_t v164 = v422 + 8;
              while (v162 != v350)
              {
                uint64_t v423 = *((void *)v162 - 1);
                v162 -= 8;
                *((void *)v422 - 1) = v423;
                v422 -= 8;
              }
              v160[586] = v422;
              v160[587] = v164;
              v160[588] = &v355[8 * v354];
              if (v350) {
                operator delete(v350);
              }
            }
            else
            {
              *(void *)uint64_t v162 = v161;
              uint64_t v164 = v162 + 8;
            }
            v160[587] = v164;
            break;
          case 0xA4:
            unint64_t v165 = *(void **)a1[2];
            uint64_t v166 = *(_WORD *)(a1[3] + 22) & 0x7FFF;
            unint64_t v167 = (char *)v165[590];
            unint64_t v168 = v165[591];
            if ((unint64_t)v167 >= v168)
            {
              uint64_t v356 = (char *)v165[589];
              uint64_t v357 = (v167 - v356) >> 3;
              if ((unint64_t)(v357 + 1) >> 61) {
LABEL_595:
              }
                sub_566C();
              unint64_t v358 = v168 - (void)v356;
              unint64_t v359 = (uint64_t)(v168 - (void)v356) >> 2;
              if (v359 <= v357 + 1) {
                unint64_t v359 = v357 + 1;
              }
              if (v358 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v360 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v360 = v359;
              }
              if (v360)
              {
                unint64_t v361 = (char *)sub_5714((uint64_t)(v165 + 591), v360);
                unint64_t v167 = (char *)v165[590];
                uint64_t v356 = (char *)v165[589];
              }
              else
              {
                unint64_t v361 = 0;
              }
              unint64_t v424 = &v361[8 * v357];
              *(void *)unint64_t v424 = v166;
              uint64_t v169 = v424 + 8;
              while (v167 != v356)
              {
                uint64_t v425 = *((void *)v167 - 1);
                v167 -= 8;
                *((void *)v424 - 1) = v425;
                v424 -= 8;
              }
              v165[589] = v424;
              v165[590] = v169;
              v165[591] = &v361[8 * v360];
              if (v356) {
                operator delete(v356);
              }
            }
            else
            {
              *(void *)unint64_t v167 = v166;
              uint64_t v169 = v167 + 8;
            }
            v165[590] = v169;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_ECE14(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    unint64_t v105 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v104 = *v105;
    uint64_t v106 = (char *)v105[1] - (char *)*v105;
    if (v106)
    {
      unint64_t v107 = v106 >> 2;
      if (v107 <= 1) {
        unint64_t v107 = 1;
      }
      do
      {
        int v108 = *v104++;
        switch(v108)
        {
          case 126:
            uint64_t v109 = *(_WORD *)(a1[3] + 34) & 0x7FFF;
            uint64_t v110 = (void *)(*(void *)a1[2] + 3808);
            goto LABEL_140;
          case 127:
            uint64_t v109 = *(_WORD *)(a1[3] + 32) & 0x7FFF;
            uint64_t v110 = (void *)(*(void *)a1[2] + 3832);
            goto LABEL_140;
          case 128:
            uint64_t v109 = *(_WORD *)(a1[3] + 30) & 0x7FFF;
            uint64_t v110 = (void *)(*(void *)a1[2] + 3856);
            goto LABEL_140;
          case 129:
            uint64_t v109 = *(_WORD *)(a1[3] + 28) & 0x7FFF;
            uint64_t v110 = (void *)(*(void *)a1[2] + 3880);
            goto LABEL_140;
          case 130:
            uint64_t v109 = *(unsigned int *)(a1[3] + 24);
            uint64_t v110 = (void *)(*(void *)a1[2] + 3904);
            goto LABEL_140;
          case 131:
            uint64_t v109 = *(unsigned __int16 *)(a1[3] + 36);
            uint64_t v110 = (void *)(*(void *)a1[2] + 3928);
            goto LABEL_140;
          case 132:
            uint64_t v109 = *(unsigned int *)(a1[3] + 20);
            uint64_t v110 = (void *)(*(void *)a1[2] + 3952);
LABEL_140:
            *(void *)(*v110 - 8) += v109;
            break;
          default:
            break;
        }
        --v107;
      }
      while (v107);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    int v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0x7E:
            uint64_t v10 = *(void **)a1[2];
            uint64_t v11 = *(_WORD *)(a1[3] + 34) & 0x7FFF;
            uint64_t v12 = (char *)v10[476];
            unint64_t v13 = v10[477];
            if ((unint64_t)v12 >= v13)
            {
              unint64_t v48 = (char *)v10[475];
              uint64_t v49 = (v12 - v48) >> 3;
              if ((unint64_t)(v49 + 1) >> 61) {
                goto LABEL_144;
              }
              unint64_t v50 = v13 - (void)v48;
              unint64_t v51 = (uint64_t)(v13 - (void)v48) >> 2;
              if (v51 <= v49 + 1) {
                unint64_t v51 = v49 + 1;
              }
              if (v50 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v52 = v51;
              }
              if (v52)
              {
                unint64_t v53 = (char *)sub_5714((uint64_t)(v10 + 477), v52);
                uint64_t v12 = (char *)v10[476];
                unint64_t v48 = (char *)v10[475];
              }
              else
              {
                unint64_t v53 = 0;
              }
              unint64_t v90 = &v53[8 * v49];
              *(void *)unint64_t v90 = v11;
              unint64_t v14 = v90 + 8;
              while (v12 != v48)
              {
                uint64_t v91 = *((void *)v12 - 1);
                v12 -= 8;
                *((void *)v90 - 1) = v91;
                v90 -= 8;
              }
              v10[475] = v90;
              v10[476] = v14;
              v10[477] = &v53[8 * v52];
              if (v48) {
                operator delete(v48);
              }
            }
            else
            {
              *(void *)uint64_t v12 = v11;
              unint64_t v14 = v12 + 8;
            }
            v10[476] = v14;
            break;
          case 0x7F:
            unint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_WORD *)(a1[3] + 32) & 0x7FFF;
            uint64_t v17 = (char *)v15[479];
            unint64_t v18 = v15[480];
            if ((unint64_t)v17 >= v18)
            {
              uint64_t v54 = (char *)v15[478];
              uint64_t v55 = (v17 - v54) >> 3;
              if ((unint64_t)(v55 + 1) >> 61) {
                goto LABEL_144;
              }
              unint64_t v56 = v18 - (void)v54;
              unint64_t v57 = (uint64_t)(v18 - (void)v54) >> 2;
              if (v57 <= v55 + 1) {
                unint64_t v57 = v55 + 1;
              }
              if (v56 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v58 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v58 = v57;
              }
              if (v58)
              {
                unint64_t v59 = (char *)sub_5714((uint64_t)(v15 + 480), v58);
                uint64_t v17 = (char *)v15[479];
                uint64_t v54 = (char *)v15[478];
              }
              else
              {
                unint64_t v59 = 0;
              }
              uint64_t v92 = &v59[8 * v55];
              *(void *)uint64_t v92 = v16;
              unint64_t v19 = v92 + 8;
              while (v17 != v54)
              {
                uint64_t v93 = *((void *)v17 - 1);
                v17 -= 8;
                *((void *)v92 - 1) = v93;
                v92 -= 8;
              }
              v15[478] = v92;
              v15[479] = v19;
              v15[480] = &v59[8 * v58];
              if (v54) {
                operator delete(v54);
              }
            }
            else
            {
              *(void *)uint64_t v17 = v16;
              unint64_t v19 = v17 + 8;
            }
            v15[479] = v19;
            break;
          case 0x80:
            unint64_t v20 = *(void **)a1[2];
            uint64_t v21 = *(_WORD *)(a1[3] + 30) & 0x7FFF;
            uint64_t v22 = (char *)v20[482];
            unint64_t v23 = v20[483];
            if ((unint64_t)v22 >= v23)
            {
              unint64_t v60 = (char *)v20[481];
              uint64_t v61 = (v22 - v60) >> 3;
              if ((unint64_t)(v61 + 1) >> 61) {
                goto LABEL_144;
              }
              unint64_t v62 = v23 - (void)v60;
              unint64_t v63 = (uint64_t)(v23 - (void)v60) >> 2;
              if (v63 <= v61 + 1) {
                unint64_t v63 = v61 + 1;
              }
              if (v62 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v64 = v63;
              }
              if (v64)
              {
                unint64_t v65 = (char *)sub_5714((uint64_t)(v20 + 483), v64);
                uint64_t v22 = (char *)v20[482];
                unint64_t v60 = (char *)v20[481];
              }
              else
              {
                unint64_t v65 = 0;
              }
              int v94 = &v65[8 * v61];
              *(void *)int v94 = v21;
              unint64_t v24 = v94 + 8;
              while (v22 != v60)
              {
                uint64_t v95 = *((void *)v22 - 1);
                v22 -= 8;
                *((void *)v94 - 1) = v95;
                v94 -= 8;
              }
              v20[481] = v94;
              v20[482] = v24;
              v20[483] = &v65[8 * v64];
              if (v60) {
                operator delete(v60);
              }
            }
            else
            {
              *(void *)uint64_t v22 = v21;
              unint64_t v24 = v22 + 8;
            }
            v20[482] = v24;
            break;
          case 0x81:
            unint64_t v25 = *(void **)a1[2];
            uint64_t v26 = *(_WORD *)(a1[3] + 28) & 0x7FFF;
            uint64_t v27 = (char *)v25[485];
            unint64_t v28 = v25[486];
            if ((unint64_t)v27 >= v28)
            {
              uint64_t v66 = (char *)v25[484];
              uint64_t v67 = (v27 - v66) >> 3;
              if ((unint64_t)(v67 + 1) >> 61) {
                goto LABEL_144;
              }
              unint64_t v68 = v28 - (void)v66;
              unint64_t v69 = (uint64_t)(v28 - (void)v66) >> 2;
              if (v69 <= v67 + 1) {
                unint64_t v69 = v67 + 1;
              }
              if (v68 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v70 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v70 = v69;
              }
              if (v70)
              {
                uint64_t v71 = (char *)sub_5714((uint64_t)(v25 + 486), v70);
                uint64_t v27 = (char *)v25[485];
                uint64_t v66 = (char *)v25[484];
              }
              else
              {
                uint64_t v71 = 0;
              }
              uint64_t v96 = &v71[8 * v67];
              *(void *)uint64_t v96 = v26;
              unint64_t v29 = v96 + 8;
              while (v27 != v66)
              {
                uint64_t v97 = *((void *)v27 - 1);
                v27 -= 8;
                *((void *)v96 - 1) = v97;
                v96 -= 8;
              }
              v25[484] = v96;
              v25[485] = v29;
              v25[486] = &v71[8 * v70];
              if (v66) {
                operator delete(v66);
              }
            }
            else
            {
              *(void *)uint64_t v27 = v26;
              unint64_t v29 = v27 + 8;
            }
            v25[485] = v29;
            break;
          case 0x82:
            uint64_t v30 = a1[2];
            uint64_t v31 = *(void **)v30;
            uint64_t v32 = *(unsigned int *)(a1[3] + 24);
            unint64_t v33 = *(char **)(*(void *)v30 + 3904);
            unint64_t v34 = *(void *)(*(void *)v30 + 3912);
            if ((unint64_t)v33 >= v34)
            {
              uint64_t v72 = (char *)v31[487];
              uint64_t v73 = (v33 - v72) >> 3;
              if ((unint64_t)(v73 + 1) >> 61) {
                goto LABEL_144;
              }
              unint64_t v74 = v34 - (void)v72;
              unint64_t v75 = (uint64_t)(v34 - (void)v72) >> 2;
              if (v75 <= v73 + 1) {
                unint64_t v75 = v73 + 1;
              }
              if (v74 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v76 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v76 = v75;
              }
              if (v76)
              {
                unint64_t v77 = (char *)sub_5714((uint64_t)(v31 + 489), v76);
                unint64_t v33 = (char *)v31[488];
                uint64_t v72 = (char *)v31[487];
              }
              else
              {
                unint64_t v77 = 0;
              }
              unint64_t v98 = &v77[8 * v73];
              *(void *)unint64_t v98 = v32;
              unint64_t v35 = v98 + 8;
              while (v33 != v72)
              {
                uint64_t v99 = *((void *)v33 - 1);
                v33 -= 8;
                *((void *)v98 - 1) = v99;
                v98 -= 8;
              }
              v31[487] = v98;
              v31[488] = v35;
              v31[489] = &v77[8 * v76];
              if (v72) {
                operator delete(v72);
              }
            }
            else
            {
              *(void *)unint64_t v33 = v32;
              unint64_t v35 = v33 + 8;
            }
            v31[488] = v35;
            break;
          case 0x83:
            uint64_t v36 = a1[2];
            uint64_t v37 = *(void **)v36;
            uint64_t v38 = *(unsigned __int16 *)(a1[3] + 36);
            unint64_t v39 = *(char **)(*(void *)v36 + 3928);
            unint64_t v40 = *(void *)(*(void *)v36 + 3936);
            if ((unint64_t)v39 >= v40)
            {
              unint64_t v78 = (char *)v37[490];
              uint64_t v79 = (v39 - v78) >> 3;
              if ((unint64_t)(v79 + 1) >> 61) {
                goto LABEL_144;
              }
              unint64_t v80 = v40 - (void)v78;
              unint64_t v81 = (uint64_t)(v40 - (void)v78) >> 2;
              if (v81 <= v79 + 1) {
                unint64_t v81 = v79 + 1;
              }
              if (v80 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v82 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v82 = v81;
              }
              if (v82)
              {
                unint64_t v83 = (char *)sub_5714((uint64_t)(v37 + 492), v82);
                unint64_t v39 = (char *)v37[491];
                unint64_t v78 = (char *)v37[490];
              }
              else
              {
                unint64_t v83 = 0;
              }
              unint64_t v100 = &v83[8 * v79];
              *(void *)unint64_t v100 = v38;
              uint64_t v41 = v100 + 8;
              while (v39 != v78)
              {
                uint64_t v101 = *((void *)v39 - 1);
                v39 -= 8;
                *((void *)v100 - 1) = v101;
                v100 -= 8;
              }
              v37[490] = v100;
              v37[491] = v41;
              v37[492] = &v83[8 * v82];
              if (v78) {
                operator delete(v78);
              }
            }
            else
            {
              *(void *)unint64_t v39 = v38;
              uint64_t v41 = v39 + 8;
            }
            v37[491] = v41;
            break;
          case 0x84:
            uint64_t v42 = a1[2];
            unint64_t v43 = *(void **)v42;
            uint64_t v44 = *(unsigned int *)(a1[3] + 20);
            unint64_t v45 = *(char **)(*(void *)v42 + 3952);
            unint64_t v46 = *(void *)(*(void *)v42 + 3960);
            if ((unint64_t)v45 >= v46)
            {
              unint64_t v84 = (char *)v43[493];
              uint64_t v85 = (v45 - v84) >> 3;
              if ((unint64_t)(v85 + 1) >> 61) {
LABEL_144:
              }
                sub_566C();
              unint64_t v86 = v46 - (void)v84;
              unint64_t v87 = (uint64_t)(v46 - (void)v84) >> 2;
              if (v87 <= v85 + 1) {
                unint64_t v87 = v85 + 1;
              }
              if (v86 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v88 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v88 = v87;
              }
              if (v88)
              {
                uint64_t v89 = (char *)sub_5714((uint64_t)(v43 + 495), v88);
                unint64_t v45 = (char *)v43[494];
                unint64_t v84 = (char *)v43[493];
              }
              else
              {
                uint64_t v89 = 0;
              }
              unint64_t v102 = &v89[8 * v85];
              *(void *)unint64_t v102 = v44;
              unint64_t v47 = v102 + 8;
              while (v45 != v84)
              {
                uint64_t v103 = *((void *)v45 - 1);
                v45 -= 8;
                *((void *)v102 - 1) = v103;
                v102 -= 8;
              }
              v43[493] = v102;
              v43[494] = v47;
              v43[495] = &v89[8 * v88];
              if (v84) {
                operator delete(v84);
              }
            }
            else
            {
              *(void *)unint64_t v45 = v44;
              unint64_t v47 = v45 + 8;
            }
            v43[494] = v47;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_ED56C(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    unint64_t v155 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    unint64_t v154 = *v155;
    uint64_t v156 = (char *)v155[1] - (char *)*v155;
    if (v156)
    {
      unint64_t v157 = v156 >> 2;
      if (v157 <= 1) {
        unint64_t v157 = 1;
      }
      do
      {
        int v158 = *v154++;
        switch(v158)
        {
          case 's':
            uint64_t v159 = *(_WORD *)(a1[3] + 26) & 0x7FFF;
            unint64_t v160 = (void *)(*(void *)a1[2] + 3544);
            goto LABEL_212;
          case 't':
            uint64_t v159 = *(_WORD *)(a1[3] + 24) & 0x7FFF;
            unint64_t v160 = (void *)(*(void *)a1[2] + 3568);
            goto LABEL_212;
          case 'u':
            uint64_t v159 = *(unsigned __int8 *)(a1[3] + 46);
            unint64_t v160 = (void *)(*(void *)a1[2] + 3592);
            goto LABEL_212;
          case 'v':
            uint64_t v159 = *(_DWORD *)(a1[3] + 32) & 0x3FFFF;
            unint64_t v160 = (void *)(*(void *)a1[2] + 3616);
            goto LABEL_212;
          case 'w':
            uint64_t v159 = *(_DWORD *)(a1[3] + 36) & 0x3FFFF;
            unint64_t v160 = (void *)(*(void *)a1[2] + 3640);
            goto LABEL_212;
          case 'x':
            uint64_t v159 = *(_WORD *)(a1[3] + 42) & 0x3FFF;
            unint64_t v160 = (void *)(*(void *)a1[2] + 3664);
            goto LABEL_212;
          case 'y':
            uint64_t v159 = *(_WORD *)(a1[3] + 44) & 0x1FFF;
            unint64_t v160 = (void *)(*(void *)a1[2] + 3688);
            goto LABEL_212;
          case 'z':
            uint64_t v159 = *(_WORD *)(a1[3] + 40) & 0x7FFF;
            unint64_t v160 = (void *)(*(void *)a1[2] + 3712);
            goto LABEL_212;
          case '{':
            uint64_t v159 = *(_WORD *)(a1[3] + 22) & 0x7FFF;
            unint64_t v160 = (void *)(*(void *)a1[2] + 3736);
            goto LABEL_212;
          case '|':
            uint64_t v159 = *(_DWORD *)(a1[3] + 28) & 0x1FFFF;
            unint64_t v160 = (void *)(*(void *)a1[2] + 3760);
            goto LABEL_212;
          case '}':
            uint64_t v159 = *(_WORD *)(a1[3] + 20) & 0x7FFF;
            unint64_t v160 = (void *)(*(void *)a1[2] + 3784);
LABEL_212:
            *(void *)(*v160 - 8) += v159;
            break;
          default:
            break;
        }
        --v157;
      }
      while (v157);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    int v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 's':
            uint64_t v10 = *(void **)a1[2];
            uint64_t v11 = *(_WORD *)(a1[3] + 26) & 0x7FFF;
            uint64_t v12 = (char *)v10[443];
            unint64_t v13 = v10[444];
            if ((unint64_t)v12 >= v13)
            {
              uint64_t v66 = (char *)v10[442];
              uint64_t v67 = (v12 - v66) >> 3;
              if ((unint64_t)(v67 + 1) >> 61) {
                goto LABEL_216;
              }
              unint64_t v68 = v13 - (void)v66;
              unint64_t v69 = (uint64_t)(v13 - (void)v66) >> 2;
              if (v69 <= v67 + 1) {
                unint64_t v69 = v67 + 1;
              }
              if (v68 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v70 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v70 = v69;
              }
              if (v70)
              {
                uint64_t v71 = (char *)sub_5714((uint64_t)(v10 + 444), v70);
                uint64_t v12 = (char *)v10[443];
                uint64_t v66 = (char *)v10[442];
              }
              else
              {
                uint64_t v71 = 0;
              }
              int v132 = &v71[8 * v67];
              *(void *)int v132 = v11;
              unint64_t v14 = v132 + 8;
              while (v12 != v66)
              {
                uint64_t v133 = *((void *)v12 - 1);
                v12 -= 8;
                *((void *)v132 - 1) = v133;
                v132 -= 8;
              }
              v10[442] = v132;
              v10[443] = v14;
              v10[444] = &v71[8 * v70];
              if (v66) {
                operator delete(v66);
              }
            }
            else
            {
              *(void *)uint64_t v12 = v11;
              unint64_t v14 = v12 + 8;
            }
            v10[443] = v14;
            break;
          case 't':
            unint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_WORD *)(a1[3] + 24) & 0x7FFF;
            uint64_t v17 = (char *)v15[446];
            unint64_t v18 = v15[447];
            if ((unint64_t)v17 >= v18)
            {
              uint64_t v72 = (char *)v15[445];
              uint64_t v73 = (v17 - v72) >> 3;
              if ((unint64_t)(v73 + 1) >> 61) {
                goto LABEL_216;
              }
              unint64_t v74 = v18 - (void)v72;
              unint64_t v75 = (uint64_t)(v18 - (void)v72) >> 2;
              if (v75 <= v73 + 1) {
                unint64_t v75 = v73 + 1;
              }
              if (v74 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v76 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v76 = v75;
              }
              if (v76)
              {
                unint64_t v77 = (char *)sub_5714((uint64_t)(v15 + 447), v76);
                uint64_t v17 = (char *)v15[446];
                uint64_t v72 = (char *)v15[445];
              }
              else
              {
                unint64_t v77 = 0;
              }
              uint64_t v134 = &v77[8 * v73];
              *(void *)uint64_t v134 = v16;
              unint64_t v19 = v134 + 8;
              while (v17 != v72)
              {
                uint64_t v135 = *((void *)v17 - 1);
                v17 -= 8;
                *((void *)v134 - 1) = v135;
                v134 -= 8;
              }
              v15[445] = v134;
              v15[446] = v19;
              v15[447] = &v77[8 * v76];
              if (v72) {
                operator delete(v72);
              }
            }
            else
            {
              *(void *)uint64_t v17 = v16;
              unint64_t v19 = v17 + 8;
            }
            v15[446] = v19;
            break;
          case 'u':
            uint64_t v20 = a1[2];
            uint64_t v21 = *(void **)v20;
            uint64_t v22 = *(unsigned __int8 *)(a1[3] + 46);
            unint64_t v23 = *(char **)(*(void *)v20 + 3592);
            unint64_t v24 = *(void *)(*(void *)v20 + 3600);
            if ((unint64_t)v23 >= v24)
            {
              unint64_t v78 = (char *)v21[448];
              uint64_t v79 = (v23 - v78) >> 3;
              if ((unint64_t)(v79 + 1) >> 61) {
                goto LABEL_216;
              }
              unint64_t v80 = v24 - (void)v78;
              unint64_t v81 = (uint64_t)(v24 - (void)v78) >> 2;
              if (v81 <= v79 + 1) {
                unint64_t v81 = v79 + 1;
              }
              if (v80 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v82 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v82 = v81;
              }
              if (v82)
              {
                unint64_t v83 = (char *)sub_5714((uint64_t)(v21 + 450), v82);
                unint64_t v23 = (char *)v21[449];
                unint64_t v78 = (char *)v21[448];
              }
              else
              {
                unint64_t v83 = 0;
              }
              uint64_t v136 = &v83[8 * v79];
              *(void *)uint64_t v136 = v22;
              unint64_t v25 = v136 + 8;
              while (v23 != v78)
              {
                uint64_t v137 = *((void *)v23 - 1);
                v23 -= 8;
                *((void *)v136 - 1) = v137;
                v136 -= 8;
              }
              v21[448] = v136;
              v21[449] = v25;
              v21[450] = &v83[8 * v82];
              if (v78) {
                operator delete(v78);
              }
            }
            else
            {
              *(void *)unint64_t v23 = v22;
              unint64_t v25 = v23 + 8;
            }
            v21[449] = v25;
            break;
          case 'v':
            uint64_t v26 = *(void **)a1[2];
            uint64_t v27 = *(_DWORD *)(a1[3] + 32) & 0x3FFFFLL;
            unint64_t v28 = (uint64_t *)v26[452];
            unint64_t v29 = v26[453];
            if ((unint64_t)v28 >= v29)
            {
              unint64_t v84 = (uint64_t *)v26[451];
              uint64_t v85 = v28 - v84;
              if ((unint64_t)(v85 + 1) >> 61) {
                goto LABEL_216;
              }
              unint64_t v86 = v29 - (void)v84;
              unint64_t v87 = (uint64_t)(v29 - (void)v84) >> 2;
              if (v87 <= v85 + 1) {
                unint64_t v87 = v85 + 1;
              }
              if (v86 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v88 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v88 = v87;
              }
              if (v88)
              {
                uint64_t v89 = (char *)sub_5714((uint64_t)(v26 + 453), v88);
                unint64_t v28 = (uint64_t *)v26[452];
                unint64_t v84 = (uint64_t *)v26[451];
              }
              else
              {
                uint64_t v89 = 0;
              }
              unint64_t v138 = (uint64_t *)&v89[8 * v85];
              *unint64_t v138 = v27;
              uint64_t v30 = v138 + 1;
              while (v28 != v84)
              {
                uint64_t v139 = *--v28;
                *--unint64_t v138 = v139;
              }
              v26[451] = v138;
              v26[452] = v30;
              v26[453] = &v89[8 * v88];
              if (v84) {
                operator delete(v84);
              }
            }
            else
            {
              *unint64_t v28 = v27;
              uint64_t v30 = v28 + 1;
            }
            v26[452] = v30;
            break;
          case 'w':
            uint64_t v31 = *(void **)a1[2];
            uint64_t v32 = *(_DWORD *)(a1[3] + 36) & 0x3FFFFLL;
            unint64_t v33 = (uint64_t *)v31[455];
            unint64_t v34 = v31[456];
            if ((unint64_t)v33 >= v34)
            {
              unint64_t v90 = (uint64_t *)v31[454];
              uint64_t v91 = v33 - v90;
              if ((unint64_t)(v91 + 1) >> 61) {
                goto LABEL_216;
              }
              unint64_t v92 = v34 - (void)v90;
              unint64_t v93 = (uint64_t)(v34 - (void)v90) >> 2;
              if (v93 <= v91 + 1) {
                unint64_t v93 = v91 + 1;
              }
              if (v92 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v94 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v94 = v93;
              }
              if (v94)
              {
                uint64_t v95 = (char *)sub_5714((uint64_t)(v31 + 456), v94);
                unint64_t v33 = (uint64_t *)v31[455];
                unint64_t v90 = (uint64_t *)v31[454];
              }
              else
              {
                uint64_t v95 = 0;
              }
              uint64_t v140 = (uint64_t *)&v95[8 * v91];
              *uint64_t v140 = v32;
              unint64_t v35 = v140 + 1;
              while (v33 != v90)
              {
                uint64_t v141 = *--v33;
                *--uint64_t v140 = v141;
              }
              v31[454] = v140;
              v31[455] = v35;
              v31[456] = &v95[8 * v94];
              if (v90) {
                operator delete(v90);
              }
            }
            else
            {
              uint64_t *v33 = v32;
              unint64_t v35 = v33 + 1;
            }
            v31[455] = v35;
            break;
          case 'x':
            uint64_t v36 = *(void **)a1[2];
            uint64_t v37 = *(_WORD *)(a1[3] + 42) & 0x3FFF;
            uint64_t v38 = (char *)v36[458];
            unint64_t v39 = v36[459];
            if ((unint64_t)v38 >= v39)
            {
              uint64_t v96 = (char *)v36[457];
              uint64_t v97 = (v38 - v96) >> 3;
              if ((unint64_t)(v97 + 1) >> 61) {
                goto LABEL_216;
              }
              unint64_t v98 = v39 - (void)v96;
              unint64_t v99 = (uint64_t)(v39 - (void)v96) >> 2;
              if (v99 <= v97 + 1) {
                unint64_t v99 = v97 + 1;
              }
              if (v98 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v100 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v100 = v99;
              }
              if (v100)
              {
                uint64_t v101 = (char *)sub_5714((uint64_t)(v36 + 459), v100);
                uint64_t v38 = (char *)v36[458];
                uint64_t v96 = (char *)v36[457];
              }
              else
              {
                uint64_t v101 = 0;
              }
              unint64_t v142 = &v101[8 * v97];
              *(void *)unint64_t v142 = v37;
              unint64_t v40 = v142 + 8;
              while (v38 != v96)
              {
                uint64_t v143 = *((void *)v38 - 1);
                v38 -= 8;
                *((void *)v142 - 1) = v143;
                v142 -= 8;
              }
              v36[457] = v142;
              v36[458] = v40;
              v36[459] = &v101[8 * v100];
              if (v96) {
                operator delete(v96);
              }
            }
            else
            {
              *(void *)uint64_t v38 = v37;
              unint64_t v40 = v38 + 8;
            }
            v36[458] = v40;
            break;
          case 'y':
            uint64_t v41 = *(void **)a1[2];
            uint64_t v42 = *(_WORD *)(a1[3] + 44) & 0x1FFF;
            unint64_t v43 = (char *)v41[461];
            unint64_t v44 = v41[462];
            if ((unint64_t)v43 >= v44)
            {
              unint64_t v102 = (char *)v41[460];
              uint64_t v103 = (v43 - v102) >> 3;
              if ((unint64_t)(v103 + 1) >> 61) {
                goto LABEL_216;
              }
              unint64_t v104 = v44 - (void)v102;
              unint64_t v105 = (uint64_t)(v44 - (void)v102) >> 2;
              if (v105 <= v103 + 1) {
                unint64_t v105 = v103 + 1;
              }
              if (v104 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v106 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v106 = v105;
              }
              if (v106)
              {
                unint64_t v107 = (char *)sub_5714((uint64_t)(v41 + 462), v106);
                unint64_t v43 = (char *)v41[461];
                unint64_t v102 = (char *)v41[460];
              }
              else
              {
                unint64_t v107 = 0;
              }
              int v144 = &v107[8 * v103];
              *(void *)int v144 = v42;
              unint64_t v45 = v144 + 8;
              while (v43 != v102)
              {
                uint64_t v145 = *((void *)v43 - 1);
                v43 -= 8;
                *((void *)v144 - 1) = v145;
                v144 -= 8;
              }
              v41[460] = v144;
              v41[461] = v45;
              v41[462] = &v107[8 * v106];
              if (v102) {
                operator delete(v102);
              }
            }
            else
            {
              *(void *)unint64_t v43 = v42;
              unint64_t v45 = v43 + 8;
            }
            v41[461] = v45;
            break;
          case 'z':
            unint64_t v46 = *(void **)a1[2];
            uint64_t v47 = *(_WORD *)(a1[3] + 40) & 0x7FFF;
            unint64_t v48 = (char *)v46[464];
            unint64_t v49 = v46[465];
            if ((unint64_t)v48 >= v49)
            {
              int v108 = (char *)v46[463];
              uint64_t v109 = (v48 - v108) >> 3;
              if ((unint64_t)(v109 + 1) >> 61) {
                goto LABEL_216;
              }
              unint64_t v110 = v49 - (void)v108;
              unint64_t v111 = (uint64_t)(v49 - (void)v108) >> 2;
              if (v111 <= v109 + 1) {
                unint64_t v111 = v109 + 1;
              }
              if (v110 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v112 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v112 = v111;
              }
              if (v112)
              {
                unint64_t v113 = (char *)sub_5714((uint64_t)(v46 + 465), v112);
                unint64_t v48 = (char *)v46[464];
                int v108 = (char *)v46[463];
              }
              else
              {
                unint64_t v113 = 0;
              }
              uint64_t v146 = &v113[8 * v109];
              *(void *)uint64_t v146 = v47;
              unint64_t v50 = v146 + 8;
              while (v48 != v108)
              {
                uint64_t v147 = *((void *)v48 - 1);
                v48 -= 8;
                *((void *)v146 - 1) = v147;
                v146 -= 8;
              }
              v46[463] = v146;
              v46[464] = v50;
              v46[465] = &v113[8 * v112];
              if (v108) {
                operator delete(v108);
              }
            }
            else
            {
              *(void *)unint64_t v48 = v47;
              unint64_t v50 = v48 + 8;
            }
            v46[464] = v50;
            break;
          case '{':
            unint64_t v51 = *(void **)a1[2];
            uint64_t v52 = *(_WORD *)(a1[3] + 22) & 0x7FFF;
            unint64_t v53 = (char *)v51[467];
            unint64_t v54 = v51[468];
            if ((unint64_t)v53 >= v54)
            {
              unint64_t v114 = (char *)v51[466];
              uint64_t v115 = (v53 - v114) >> 3;
              if ((unint64_t)(v115 + 1) >> 61) {
                goto LABEL_216;
              }
              unint64_t v116 = v54 - (void)v114;
              unint64_t v117 = (uint64_t)(v54 - (void)v114) >> 2;
              if (v117 <= v115 + 1) {
                unint64_t v117 = v115 + 1;
              }
              if (v116 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v118 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v118 = v117;
              }
              if (v118)
              {
                unint64_t v119 = (char *)sub_5714((uint64_t)(v51 + 468), v118);
                unint64_t v53 = (char *)v51[467];
                unint64_t v114 = (char *)v51[466];
              }
              else
              {
                unint64_t v119 = 0;
              }
              unint64_t v148 = &v119[8 * v115];
              *(void *)unint64_t v148 = v52;
              uint64_t v55 = v148 + 8;
              while (v53 != v114)
              {
                uint64_t v149 = *((void *)v53 - 1);
                v53 -= 8;
                *((void *)v148 - 1) = v149;
                v148 -= 8;
              }
              v51[466] = v148;
              v51[467] = v55;
              v51[468] = &v119[8 * v118];
              if (v114) {
                operator delete(v114);
              }
            }
            else
            {
              *(void *)unint64_t v53 = v52;
              uint64_t v55 = v53 + 8;
            }
            v51[467] = v55;
            break;
          case '|':
            unint64_t v56 = *(void **)a1[2];
            uint64_t v57 = *(_DWORD *)(a1[3] + 28) & 0x1FFFFLL;
            unint64_t v58 = (uint64_t *)v56[470];
            unint64_t v59 = v56[471];
            if ((unint64_t)v58 >= v59)
            {
              uint64_t v120 = (uint64_t *)v56[469];
              uint64_t v121 = v58 - v120;
              if ((unint64_t)(v121 + 1) >> 61) {
                goto LABEL_216;
              }
              unint64_t v122 = v59 - (void)v120;
              unint64_t v123 = (uint64_t)(v59 - (void)v120) >> 2;
              if (v123 <= v121 + 1) {
                unint64_t v123 = v121 + 1;
              }
              if (v122 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v124 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v124 = v123;
              }
              if (v124)
              {
                unint64_t v125 = (char *)sub_5714((uint64_t)(v56 + 471), v124);
                unint64_t v58 = (uint64_t *)v56[470];
                uint64_t v120 = (uint64_t *)v56[469];
              }
              else
              {
                unint64_t v125 = 0;
              }
              uint64_t v150 = (uint64_t *)&v125[8 * v121];
              *uint64_t v150 = v57;
              unint64_t v60 = v150 + 1;
              while (v58 != v120)
              {
                uint64_t v151 = *--v58;
                *--uint64_t v150 = v151;
              }
              v56[469] = v150;
              v56[470] = v60;
              v56[471] = &v125[8 * v124];
              if (v120) {
                operator delete(v120);
              }
            }
            else
            {
              *unint64_t v58 = v57;
              unint64_t v60 = v58 + 1;
            }
            v56[470] = v60;
            break;
          case '}':
            uint64_t v61 = *(void **)a1[2];
            uint64_t v62 = *(_WORD *)(a1[3] + 20) & 0x7FFF;
            unint64_t v63 = (char *)v61[473];
            unint64_t v64 = v61[474];
            if ((unint64_t)v63 >= v64)
            {
              uint64_t v126 = (char *)v61[472];
              uint64_t v127 = (v63 - v126) >> 3;
              if ((unint64_t)(v127 + 1) >> 61) {
LABEL_216:
              }
                sub_566C();
              unint64_t v128 = v64 - (void)v126;
              unint64_t v129 = (uint64_t)(v64 - (void)v126) >> 2;
              if (v129 <= v127 + 1) {
                unint64_t v129 = v127 + 1;
              }
              if (v128 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v130 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v130 = v129;
              }
              if (v130)
              {
                uint64_t v131 = (char *)sub_5714((uint64_t)(v61 + 474), v130);
                unint64_t v63 = (char *)v61[473];
                uint64_t v126 = (char *)v61[472];
              }
              else
              {
                uint64_t v131 = 0;
              }
              uint64_t v152 = &v131[8 * v127];
              *(void *)uint64_t v152 = v62;
              unint64_t v65 = v152 + 8;
              while (v63 != v126)
              {
                uint64_t v153 = *((void *)v63 - 1);
                v63 -= 8;
                *((void *)v152 - 1) = v153;
                v152 -= 8;
              }
              v61[472] = v152;
              v61[473] = v65;
              v61[474] = &v131[8 * v130];
              if (v126) {
                operator delete(v126);
              }
            }
            else
            {
              *(void *)unint64_t v63 = v62;
              unint64_t v65 = v63 + 8;
            }
            v61[473] = v65;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_EE054(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    uint64_t v182 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v181 = *v182;
    uint64_t v183 = (char *)v182[1] - (char *)*v182;
    if (v183)
    {
      unint64_t v184 = v183 >> 2;
      if (v184 <= 1) {
        unint64_t v184 = 1;
      }
      do
      {
        int v185 = *v181++;
        switch(v185)
        {
          case 198:
            unint64_t v186 = *(_WORD *)(a1[3] + 20) & 0x7FFF;
            uint64_t v187 = (void *)(*(void *)a1[2] + 5536);
            goto LABEL_248;
          case 199:
            unint64_t v186 = *(_WORD *)(a1[3] + 22) & 0x7FFF;
            uint64_t v187 = (void *)(*(void *)a1[2] + 5560);
            goto LABEL_248;
          case 200:
            unint64_t v186 = (unint64_t)*(unsigned int *)(a1[3] + 56) >> 17;
            uint64_t v187 = (void *)(*(void *)a1[2] + 5584);
            goto LABEL_248;
          case 201:
            unint64_t v186 = *(_DWORD *)(a1[3] + 36) & 0x1FFFF;
            uint64_t v187 = (void *)(*(void *)a1[2] + 5608);
            goto LABEL_248;
          case 202:
            unint64_t v186 = *(_DWORD *)(a1[3] + 32) & 0x3FFFF;
            uint64_t v187 = (void *)(*(void *)a1[2] + 5632);
            goto LABEL_248;
          case 203:
            unint64_t v186 = *(_DWORD *)(a1[3] + 28) & 0x3FFFF;
            uint64_t v187 = (void *)(*(void *)a1[2] + 5656);
            goto LABEL_248;
          case 204:
            unint64_t v186 = *(unsigned __int16 *)(a1[3] + 42);
            uint64_t v187 = (void *)(*(void *)a1[2] + 5680);
            goto LABEL_248;
          case 205:
            unint64_t v186 = *(unsigned __int16 *)(a1[3] + 40);
            uint64_t v187 = (void *)(*(void *)a1[2] + 5704);
            goto LABEL_248;
          case 206:
            unint64_t v186 = *(_WORD *)(a1[3] + 24) & 0x7FFF;
            uint64_t v187 = (void *)(*(void *)a1[2] + 5728);
            goto LABEL_248;
          case 207:
            unint64_t v186 = *(_DWORD *)(a1[3] + 44) & 0x1FFFF;
            uint64_t v187 = (void *)(*(void *)a1[2] + 5752);
            goto LABEL_248;
          case 208:
            unint64_t v186 = *(_DWORD *)(a1[3] + 56) & 0x1FFFF;
            uint64_t v187 = (void *)(*(void *)a1[2] + 5776);
            goto LABEL_248;
          case 209:
            unint64_t v186 = *(_DWORD *)(a1[3] + 52) & 0x1FFFF;
            uint64_t v187 = (void *)(*(void *)a1[2] + 5800);
            goto LABEL_248;
          case 210:
            unint64_t v186 = *(_DWORD *)(a1[3] + 48) & 0x1FFFF;
            uint64_t v187 = (void *)(*(void *)a1[2] + 5824);
LABEL_248:
            *(void *)(*v187 - 8) += v186;
            break;
          default:
            break;
        }
        --v184;
      }
      while (v184);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    int v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0xC6:
            uint64_t v10 = *(void **)a1[2];
            uint64_t v11 = *(_WORD *)(a1[3] + 20) & 0x7FFF;
            uint64_t v12 = (char *)v10[692];
            unint64_t v13 = v10[693];
            if ((unint64_t)v12 >= v13)
            {
              unint64_t v77 = (char *)v10[691];
              uint64_t v78 = (v12 - v77) >> 3;
              if ((unint64_t)(v78 + 1) >> 61) {
                goto LABEL_252;
              }
              unint64_t v79 = v13 - (void)v77;
              unint64_t v80 = (uint64_t)(v13 - (void)v77) >> 2;
              if (v80 <= v78 + 1) {
                unint64_t v80 = v78 + 1;
              }
              if (v79 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v81 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v81 = v80;
              }
              if (v81)
              {
                unint64_t v82 = (char *)sub_5714((uint64_t)(v10 + 693), v81);
                uint64_t v12 = (char *)v10[692];
                unint64_t v77 = (char *)v10[691];
              }
              else
              {
                unint64_t v82 = 0;
              }
              unint64_t v155 = &v82[8 * v78];
              *(void *)unint64_t v155 = v11;
              unint64_t v14 = v155 + 8;
              while (v12 != v77)
              {
                uint64_t v156 = *((void *)v12 - 1);
                v12 -= 8;
                *((void *)v155 - 1) = v156;
                v155 -= 8;
              }
              v10[691] = v155;
              v10[692] = v14;
              v10[693] = &v82[8 * v81];
              if (v77) {
                operator delete(v77);
              }
            }
            else
            {
              *(void *)uint64_t v12 = v11;
              unint64_t v14 = v12 + 8;
            }
            v10[692] = v14;
            break;
          case 0xC7:
            unint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_WORD *)(a1[3] + 22) & 0x7FFF;
            uint64_t v17 = (char *)v15[695];
            unint64_t v18 = v15[696];
            if ((unint64_t)v17 >= v18)
            {
              unint64_t v83 = (char *)v15[694];
              uint64_t v84 = (v17 - v83) >> 3;
              if ((unint64_t)(v84 + 1) >> 61) {
                goto LABEL_252;
              }
              unint64_t v85 = v18 - (void)v83;
              unint64_t v86 = (uint64_t)(v18 - (void)v83) >> 2;
              if (v86 <= v84 + 1) {
                unint64_t v86 = v84 + 1;
              }
              if (v85 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v87 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v87 = v86;
              }
              if (v87)
              {
                unint64_t v88 = (char *)sub_5714((uint64_t)(v15 + 696), v87);
                uint64_t v17 = (char *)v15[695];
                unint64_t v83 = (char *)v15[694];
              }
              else
              {
                unint64_t v88 = 0;
              }
              unint64_t v157 = &v88[8 * v84];
              *(void *)unint64_t v157 = v16;
              unint64_t v19 = v157 + 8;
              while (v17 != v83)
              {
                uint64_t v158 = *((void *)v17 - 1);
                v17 -= 8;
                *((void *)v157 - 1) = v158;
                v157 -= 8;
              }
              v15[694] = v157;
              v15[695] = v19;
              v15[696] = &v88[8 * v87];
              if (v83) {
                operator delete(v83);
              }
            }
            else
            {
              *(void *)uint64_t v17 = v16;
              unint64_t v19 = v17 + 8;
            }
            v15[695] = v19;
            break;
          case 0xC8:
            uint64_t v20 = *(void **)a1[2];
            unint64_t v21 = (unint64_t)*(unsigned int *)(a1[3] + 56) >> 17;
            uint64_t v22 = (unint64_t *)v20[698];
            unint64_t v23 = v20[699];
            if ((unint64_t)v22 >= v23)
            {
              uint64_t v89 = (unint64_t *)v20[697];
              uint64_t v90 = v22 - v89;
              if ((unint64_t)(v90 + 1) >> 61) {
                goto LABEL_252;
              }
              unint64_t v91 = v23 - (void)v89;
              unint64_t v92 = (uint64_t)(v23 - (void)v89) >> 2;
              if (v92 <= v90 + 1) {
                unint64_t v92 = v90 + 1;
              }
              if (v91 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v93 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v93 = v92;
              }
              if (v93)
              {
                unint64_t v94 = (char *)sub_5714((uint64_t)(v20 + 699), v93);
                uint64_t v22 = (unint64_t *)v20[698];
                uint64_t v89 = (unint64_t *)v20[697];
              }
              else
              {
                unint64_t v94 = 0;
              }
              uint64_t v159 = (unint64_t *)&v94[8 * v90];
              *uint64_t v159 = v21;
              unint64_t v24 = v159 + 1;
              while (v22 != v89)
              {
                unint64_t v160 = *--v22;
                *--uint64_t v159 = v160;
              }
              v20[697] = v159;
              v20[698] = v24;
              v20[699] = &v94[8 * v93];
              if (v89) {
                operator delete(v89);
              }
            }
            else
            {
              *uint64_t v22 = v21;
              unint64_t v24 = v22 + 1;
            }
            v20[698] = v24;
            break;
          case 0xC9:
            unint64_t v25 = *(void **)a1[2];
            uint64_t v26 = *(_DWORD *)(a1[3] + 36) & 0x1FFFFLL;
            uint64_t v27 = (uint64_t *)v25[701];
            unint64_t v28 = v25[702];
            if ((unint64_t)v27 >= v28)
            {
              uint64_t v95 = (uint64_t *)v25[700];
              uint64_t v96 = v27 - v95;
              if ((unint64_t)(v96 + 1) >> 61) {
                goto LABEL_252;
              }
              unint64_t v97 = v28 - (void)v95;
              unint64_t v98 = (uint64_t)(v28 - (void)v95) >> 2;
              if (v98 <= v96 + 1) {
                unint64_t v98 = v96 + 1;
              }
              if (v97 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v99 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v99 = v98;
              }
              if (v99)
              {
                unint64_t v100 = (char *)sub_5714((uint64_t)(v25 + 702), v99);
                uint64_t v27 = (uint64_t *)v25[701];
                uint64_t v95 = (uint64_t *)v25[700];
              }
              else
              {
                unint64_t v100 = 0;
              }
              uint64_t v161 = (uint64_t *)&v100[8 * v96];
              uint64_t *v161 = v26;
              unint64_t v29 = v161 + 1;
              while (v27 != v95)
              {
                uint64_t v162 = *--v27;
                *--uint64_t v161 = v162;
              }
              v25[700] = v161;
              v25[701] = v29;
              v25[702] = &v100[8 * v99];
              if (v95) {
                operator delete(v95);
              }
            }
            else
            {
              *uint64_t v27 = v26;
              unint64_t v29 = v27 + 1;
            }
            v25[701] = v29;
            break;
          case 0xCA:
            uint64_t v30 = *(void **)a1[2];
            uint64_t v31 = *(_DWORD *)(a1[3] + 32) & 0x3FFFFLL;
            uint64_t v32 = (uint64_t *)v30[704];
            unint64_t v33 = v30[705];
            if ((unint64_t)v32 >= v33)
            {
              uint64_t v101 = (uint64_t *)v30[703];
              uint64_t v102 = v32 - v101;
              if ((unint64_t)(v102 + 1) >> 61) {
                goto LABEL_252;
              }
              unint64_t v103 = v33 - (void)v101;
              unint64_t v104 = (uint64_t)(v33 - (void)v101) >> 2;
              if (v104 <= v102 + 1) {
                unint64_t v104 = v102 + 1;
              }
              if (v103 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v105 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v105 = v104;
              }
              if (v105)
              {
                unint64_t v106 = (char *)sub_5714((uint64_t)(v30 + 705), v105);
                uint64_t v32 = (uint64_t *)v30[704];
                uint64_t v101 = (uint64_t *)v30[703];
              }
              else
              {
                unint64_t v106 = 0;
              }
              unint64_t v163 = (uint64_t *)&v106[8 * v102];
              uint64_t *v163 = v31;
              unint64_t v34 = v163 + 1;
              while (v32 != v101)
              {
                uint64_t v164 = *--v32;
                *--unint64_t v163 = v164;
              }
              v30[703] = v163;
              v30[704] = v34;
              v30[705] = &v106[8 * v105];
              if (v101) {
                operator delete(v101);
              }
            }
            else
            {
              *uint64_t v32 = v31;
              unint64_t v34 = v32 + 1;
            }
            v30[704] = v34;
            break;
          case 0xCB:
            unint64_t v35 = *(void **)a1[2];
            uint64_t v36 = *(_DWORD *)(a1[3] + 28) & 0x3FFFFLL;
            uint64_t v37 = (uint64_t *)v35[707];
            unint64_t v38 = v35[708];
            if ((unint64_t)v37 >= v38)
            {
              unint64_t v107 = (uint64_t *)v35[706];
              uint64_t v108 = v37 - v107;
              if ((unint64_t)(v108 + 1) >> 61) {
                goto LABEL_252;
              }
              unint64_t v109 = v38 - (void)v107;
              unint64_t v110 = (uint64_t)(v38 - (void)v107) >> 2;
              if (v110 <= v108 + 1) {
                unint64_t v110 = v108 + 1;
              }
              if (v109 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v111 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v111 = v110;
              }
              if (v111)
              {
                unint64_t v112 = (char *)sub_5714((uint64_t)(v35 + 708), v111);
                uint64_t v37 = (uint64_t *)v35[707];
                unint64_t v107 = (uint64_t *)v35[706];
              }
              else
              {
                unint64_t v112 = 0;
              }
              unint64_t v165 = (uint64_t *)&v112[8 * v108];
              *unint64_t v165 = v36;
              unint64_t v39 = v165 + 1;
              while (v37 != v107)
              {
                uint64_t v166 = *--v37;
                *--unint64_t v165 = v166;
              }
              v35[706] = v165;
              v35[707] = v39;
              v35[708] = &v112[8 * v111];
              if (v107) {
                operator delete(v107);
              }
            }
            else
            {
              uint64_t *v37 = v36;
              unint64_t v39 = v37 + 1;
            }
            v35[707] = v39;
            break;
          case 0xCC:
            uint64_t v40 = a1[2];
            uint64_t v41 = *(void **)v40;
            uint64_t v42 = *(unsigned __int16 *)(a1[3] + 42);
            unint64_t v43 = *(char **)(*(void *)v40 + 5680);
            unint64_t v44 = *(void *)(*(void *)v40 + 5688);
            if ((unint64_t)v43 >= v44)
            {
              unint64_t v113 = (char *)v41[709];
              uint64_t v114 = (v43 - v113) >> 3;
              if ((unint64_t)(v114 + 1) >> 61) {
                goto LABEL_252;
              }
              unint64_t v115 = v44 - (void)v113;
              unint64_t v116 = (uint64_t)(v44 - (void)v113) >> 2;
              if (v116 <= v114 + 1) {
                unint64_t v116 = v114 + 1;
              }
              if (v115 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v117 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v117 = v116;
              }
              if (v117)
              {
                unint64_t v118 = (char *)sub_5714((uint64_t)(v41 + 711), v117);
                unint64_t v43 = (char *)v41[710];
                unint64_t v113 = (char *)v41[709];
              }
              else
              {
                unint64_t v118 = 0;
              }
              unint64_t v167 = &v118[8 * v114];
              *(void *)unint64_t v167 = v42;
              unint64_t v45 = v167 + 8;
              while (v43 != v113)
              {
                uint64_t v168 = *((void *)v43 - 1);
                v43 -= 8;
                *((void *)v167 - 1) = v168;
                v167 -= 8;
              }
              v41[709] = v167;
              v41[710] = v45;
              v41[711] = &v118[8 * v117];
              if (v113) {
                operator delete(v113);
              }
            }
            else
            {
              *(void *)unint64_t v43 = v42;
              unint64_t v45 = v43 + 8;
            }
            v41[710] = v45;
            break;
          case 0xCD:
            uint64_t v46 = a1[2];
            uint64_t v47 = *(void **)v46;
            uint64_t v48 = *(unsigned __int16 *)(a1[3] + 40);
            unint64_t v49 = *(char **)(*(void *)v46 + 5704);
            unint64_t v50 = *(void *)(*(void *)v46 + 5712);
            if ((unint64_t)v49 >= v50)
            {
              unint64_t v119 = (char *)v47[712];
              uint64_t v120 = (v49 - v119) >> 3;
              if ((unint64_t)(v120 + 1) >> 61) {
                goto LABEL_252;
              }
              unint64_t v121 = v50 - (void)v119;
              unint64_t v122 = (uint64_t)(v50 - (void)v119) >> 2;
              if (v122 <= v120 + 1) {
                unint64_t v122 = v120 + 1;
              }
              if (v121 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v123 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v123 = v122;
              }
              if (v123)
              {
                unint64_t v124 = (char *)sub_5714((uint64_t)(v47 + 714), v123);
                unint64_t v49 = (char *)v47[713];
                unint64_t v119 = (char *)v47[712];
              }
              else
              {
                unint64_t v124 = 0;
              }
              uint64_t v169 = &v124[8 * v120];
              *(void *)uint64_t v169 = v48;
              unint64_t v51 = v169 + 8;
              while (v49 != v119)
              {
                uint64_t v170 = *((void *)v49 - 1);
                v49 -= 8;
                *((void *)v169 - 1) = v170;
                v169 -= 8;
              }
              v47[712] = v169;
              v47[713] = v51;
              v47[714] = &v124[8 * v123];
              if (v119) {
                operator delete(v119);
              }
            }
            else
            {
              *(void *)unint64_t v49 = v48;
              unint64_t v51 = v49 + 8;
            }
            v47[713] = v51;
            break;
          case 0xCE:
            uint64_t v52 = *(void **)a1[2];
            uint64_t v53 = *(_WORD *)(a1[3] + 24) & 0x7FFF;
            unint64_t v54 = (char *)v52[716];
            unint64_t v55 = v52[717];
            if ((unint64_t)v54 >= v55)
            {
              unint64_t v125 = (char *)v52[715];
              uint64_t v126 = (v54 - v125) >> 3;
              if ((unint64_t)(v126 + 1) >> 61) {
                goto LABEL_252;
              }
              unint64_t v127 = v55 - (void)v125;
              unint64_t v128 = (uint64_t)(v55 - (void)v125) >> 2;
              if (v128 <= v126 + 1) {
                unint64_t v128 = v126 + 1;
              }
              if (v127 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v129 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v129 = v128;
              }
              if (v129)
              {
                unint64_t v130 = (char *)sub_5714((uint64_t)(v52 + 717), v129);
                unint64_t v54 = (char *)v52[716];
                unint64_t v125 = (char *)v52[715];
              }
              else
              {
                unint64_t v130 = 0;
              }
              uint64_t v171 = &v130[8 * v126];
              *(void *)uint64_t v171 = v53;
              unint64_t v56 = v171 + 8;
              while (v54 != v125)
              {
                uint64_t v172 = *((void *)v54 - 1);
                v54 -= 8;
                *((void *)v171 - 1) = v172;
                v171 -= 8;
              }
              v52[715] = v171;
              v52[716] = v56;
              v52[717] = &v130[8 * v129];
              if (v125) {
                operator delete(v125);
              }
            }
            else
            {
              *(void *)unint64_t v54 = v53;
              unint64_t v56 = v54 + 8;
            }
            v52[716] = v56;
            break;
          case 0xCF:
            uint64_t v57 = *(void **)a1[2];
            uint64_t v58 = *(_DWORD *)(a1[3] + 44) & 0x1FFFFLL;
            unint64_t v59 = (uint64_t *)v57[719];
            unint64_t v60 = v57[720];
            if ((unint64_t)v59 >= v60)
            {
              uint64_t v131 = (uint64_t *)v57[718];
              uint64_t v132 = v59 - v131;
              if ((unint64_t)(v132 + 1) >> 61) {
                goto LABEL_252;
              }
              unint64_t v133 = v60 - (void)v131;
              unint64_t v134 = (uint64_t)(v60 - (void)v131) >> 2;
              if (v134 <= v132 + 1) {
                unint64_t v134 = v132 + 1;
              }
              if (v133 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v135 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v135 = v134;
              }
              if (v135)
              {
                uint64_t v136 = (char *)sub_5714((uint64_t)(v57 + 720), v135);
                unint64_t v59 = (uint64_t *)v57[719];
                uint64_t v131 = (uint64_t *)v57[718];
              }
              else
              {
                uint64_t v136 = 0;
              }
              unint64_t v173 = (uint64_t *)&v136[8 * v132];
              uint64_t *v173 = v58;
              uint64_t v61 = v173 + 1;
              while (v59 != v131)
              {
                uint64_t v174 = *--v59;
                *--unint64_t v173 = v174;
              }
              v57[718] = v173;
              v57[719] = v61;
              v57[720] = &v136[8 * v135];
              if (v131) {
                operator delete(v131);
              }
            }
            else
            {
              *unint64_t v59 = v58;
              uint64_t v61 = v59 + 1;
            }
            v57[719] = v61;
            break;
          case 0xD0:
            uint64_t v62 = *(void **)a1[2];
            uint64_t v63 = *(_DWORD *)(a1[3] + 56) & 0x1FFFFLL;
            unint64_t v64 = (uint64_t *)v62[722];
            unint64_t v65 = v62[723];
            if ((unint64_t)v64 >= v65)
            {
              uint64_t v137 = (uint64_t *)v62[721];
              uint64_t v138 = v64 - v137;
              if ((unint64_t)(v138 + 1) >> 61) {
                goto LABEL_252;
              }
              unint64_t v139 = v65 - (void)v137;
              unint64_t v140 = (uint64_t)(v65 - (void)v137) >> 2;
              if (v140 <= v138 + 1) {
                unint64_t v140 = v138 + 1;
              }
              if (v139 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v141 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v141 = v140;
              }
              if (v141)
              {
                unint64_t v142 = (char *)sub_5714((uint64_t)(v62 + 723), v141);
                unint64_t v64 = (uint64_t *)v62[722];
                uint64_t v137 = (uint64_t *)v62[721];
              }
              else
              {
                unint64_t v142 = 0;
              }
              uint64_t v175 = (uint64_t *)&v142[8 * v138];
              *uint64_t v175 = v63;
              uint64_t v66 = v175 + 1;
              while (v64 != v137)
              {
                uint64_t v176 = *--v64;
                *--uint64_t v175 = v176;
              }
              v62[721] = v175;
              v62[722] = v66;
              v62[723] = &v142[8 * v141];
              if (v137) {
                operator delete(v137);
              }
            }
            else
            {
              *unint64_t v64 = v63;
              uint64_t v66 = v64 + 1;
            }
            v62[722] = v66;
            break;
          case 0xD1:
            uint64_t v67 = *(void **)a1[2];
            uint64_t v68 = *(_DWORD *)(a1[3] + 52) & 0x1FFFFLL;
            unint64_t v69 = (uint64_t *)v67[725];
            unint64_t v70 = v67[726];
            if ((unint64_t)v69 >= v70)
            {
              uint64_t v143 = (uint64_t *)v67[724];
              uint64_t v144 = v69 - v143;
              if ((unint64_t)(v144 + 1) >> 61) {
                goto LABEL_252;
              }
              unint64_t v145 = v70 - (void)v143;
              unint64_t v146 = (uint64_t)(v70 - (void)v143) >> 2;
              if (v146 <= v144 + 1) {
                unint64_t v146 = v144 + 1;
              }
              if (v145 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v147 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v147 = v146;
              }
              if (v147)
              {
                unint64_t v148 = (char *)sub_5714((uint64_t)(v67 + 726), v147);
                unint64_t v69 = (uint64_t *)v67[725];
                uint64_t v143 = (uint64_t *)v67[724];
              }
              else
              {
                unint64_t v148 = 0;
              }
              uint64_t v177 = (uint64_t *)&v148[8 * v144];
              *uint64_t v177 = v68;
              uint64_t v71 = v177 + 1;
              while (v69 != v143)
              {
                uint64_t v178 = *--v69;
                *--uint64_t v177 = v178;
              }
              v67[724] = v177;
              v67[725] = v71;
              v67[726] = &v148[8 * v147];
              if (v143) {
                operator delete(v143);
              }
            }
            else
            {
              *unint64_t v69 = v68;
              uint64_t v71 = v69 + 1;
            }
            v67[725] = v71;
            break;
          case 0xD2:
            uint64_t v72 = *(void **)a1[2];
            uint64_t v73 = *(_DWORD *)(a1[3] + 48) & 0x1FFFFLL;
            unint64_t v74 = (uint64_t *)v72[728];
            unint64_t v75 = v72[729];
            if ((unint64_t)v74 >= v75)
            {
              uint64_t v149 = (uint64_t *)v72[727];
              uint64_t v150 = v74 - v149;
              if ((unint64_t)(v150 + 1) >> 61) {
LABEL_252:
              }
                sub_566C();
              unint64_t v151 = v75 - (void)v149;
              unint64_t v152 = (uint64_t)(v75 - (void)v149) >> 2;
              if (v152 <= v150 + 1) {
                unint64_t v152 = v150 + 1;
              }
              if (v151 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v153 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v153 = v152;
              }
              if (v153)
              {
                unint64_t v154 = (char *)sub_5714((uint64_t)(v72 + 729), v153);
                unint64_t v74 = (uint64_t *)v72[728];
                uint64_t v149 = (uint64_t *)v72[727];
              }
              else
              {
                unint64_t v154 = 0;
              }
              unint64_t v179 = (uint64_t *)&v154[8 * v150];
              *unint64_t v179 = v73;
              unint64_t v76 = v179 + 1;
              while (v74 != v149)
              {
                uint64_t v180 = *--v74;
                *--unint64_t v179 = v180;
              }
              v72[727] = v179;
              v72[728] = v76;
              v72[729] = &v154[8 * v153];
              if (v149) {
                operator delete(v149);
              }
            }
            else
            {
              *unint64_t v74 = v73;
              unint64_t v76 = v74 + 1;
            }
            v72[728] = v76;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_EED90(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    uint64_t v406 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v405 = *v406;
    uint64_t v407 = (char *)v406[1] - (char *)*v406;
    if (v407)
    {
      unint64_t v408 = v407 >> 2;
      if (v408 <= 1) {
        unint64_t v408 = 1;
      }
      do
      {
        int v409 = *v405++;
        switch(v409)
        {
          case 165:
            unint64_t v410 = (unint64_t)*(unsigned int *)(a1[3] + 36) >> 17;
            uint64_t v411 = *(void *)a1[2];
            uint64_t v412 = (unsigned char *)(&stru_1278 + 16);
            goto LABEL_554;
          case 166:
            unint64_t v410 = *(_DWORD *)(a1[3] + 36) & 0x1FFFF;
            uint64_t v411 = *(void *)a1[2];
            uint64_t v412 = "/System/Library/Frameworks/Metal.framework/Metal" + 16;
            goto LABEL_554;
          case 167:
            unint64_t v410 = *(_WORD *)(a1[3] + 26) & 0x7FFF;
            uint64_t v411 = *(void *)a1[2];
            uint64_t v412 = "/System/Library/Frameworks/Metal.framework/Metal" + 40;
            goto LABEL_554;
          case 168:
            unint64_t v410 = *(void *)(a1[3] + 76) >> 49;
            uint64_t v411 = *(void *)a1[2];
            uint64_t v412 = (unsigned char *)(&stru_12C8 + 8);
            goto LABEL_554;
          case 169:
            unint64_t v410 = *(_WORD *)(a1[3] + 92) & 0x7FFF;
            uint64_t v411 = *(void *)a1[2];
            uint64_t v412 = "/System/Library/Frameworks/MetalPerformanceShaders.framework/MetalPerformanceShaders" + 8;
            goto LABEL_554;
          case 170:
            unint64_t v410 = *(_WORD *)(a1[3] + 94) & 0x7FFF;
            uint64_t v411 = *(void *)a1[2];
            uint64_t v412 = "/System/Library/Frameworks/MetalPerformanceShaders.framework/MetalPerformanceShaders" + 32;
            goto LABEL_554;
          case 171:
            unint64_t v410 = *(_WORD *)(a1[3] + 22) & 0x7FFF;
            uint64_t v411 = *(void *)a1[2];
            uint64_t v412 = "/System/Library/Frameworks/MetalPerformanceShaders.framework/MetalPerformanceShaders" + 56;
            goto LABEL_554;
          case 172:
            unint64_t v410 = (unint64_t)*(unsigned int *)(a1[3] + 48) >> 17;
            uint64_t v411 = *(void *)a1[2];
            uint64_t v412 = "/System/Library/Frameworks/MetalPerformanceShaders.framework/MetalPerformanceShaders" + 80;
            goto LABEL_554;
          case 173:
            unint64_t v410 = *(_DWORD *)(a1[3] + 44) & 0x1FFFF;
            uint64_t v411 = *(void *)a1[2];
            uint64_t v412 = (unsigned char *)(&stru_1338 + 16);
            goto LABEL_554;
          case 174:
            unint64_t v410 = *(_DWORD *)(a1[3] + 80) & 0x1FFFF;
            uint64_t v411 = *(void *)a1[2];
            uint64_t v412 = "/System/Library/Frameworks/QuartzCore.framework/QuartzCore" + 16;
            goto LABEL_554;
          case 175:
            unint64_t v410 = *(_WORD *)(a1[3] + 24) & 0x7FFF;
            uint64_t v411 = *(void *)a1[2];
            uint64_t v412 = "/System/Library/Frameworks/QuartzCore.framework/QuartzCore" + 40;
            goto LABEL_554;
          case 176:
            unint64_t v410 = *(_WORD *)(a1[3] + 20) & 0x7FFF;
            uint64_t v411 = *(void *)a1[2];
            uint64_t v412 = (unsigned char *)&stru_1390;
            goto LABEL_554;
          case 177:
            unint64_t v410 = *(_DWORD *)(a1[3] + 72) & 0xFFFFF;
            uint64_t v411 = *(void *)a1[2];
            uint64_t v412 = "/System/Library/Frameworks/Foundation.framework/Foundation";
            goto LABEL_554;
          case 178:
            unint64_t v410 = *(_DWORD *)(a1[3] + 64) & 0x1FFFF;
            uint64_t v411 = *(void *)a1[2];
            uint64_t v412 = "/System/Library/Frameworks/Foundation.framework/Foundation" + 24;
            goto LABEL_554;
          case 179:
            unint64_t v410 = *(_DWORD *)(a1[3] + 68) & 0x1FFFF;
            uint64_t v411 = *(void *)a1[2];
            uint64_t v412 = "/System/Library/Frameworks/Foundation.framework/Foundation" + 48;
            goto LABEL_554;
          case 180:
            unint64_t v410 = *(unsigned __int16 *)(a1[3] + 54);
            uint64_t v411 = *(void *)a1[2];
            uint64_t v412 = (unsigned char *)(&stru_13E8 + 8);
            goto LABEL_554;
          case 181:
            unint64_t v410 = *(unsigned __int16 *)(a1[3] + 56);
            uint64_t v411 = *(void *)a1[2];
            uint64_t v412 = "/usr/lib/libobjc.A.dylib" + 8;
            goto LABEL_554;
          case 182:
            unint64_t v410 = *(unsigned __int16 *)(a1[3] + 76);
            uint64_t v411 = *(void *)a1[2];
            uint64_t v412 = (unsigned char *)&stru_1420;
            goto LABEL_554;
          case 183:
            unint64_t v410 = *(unsigned __int16 *)(a1[3] + 86);
            uint64_t v411 = *(void *)a1[2];
            uint64_t v412 = "/usr/lib/libc++.1.dylib";
            goto LABEL_554;
          case 184:
            unint64_t v410 = *(unsigned __int16 *)(a1[3] + 78);
            uint64_t v411 = *(void *)a1[2];
            uint64_t v412 = (unsigned char *)&stru_1450;
            goto LABEL_554;
          case 185:
            unint64_t v410 = *(_DWORD *)(a1[3] + 48) & 0x1FFFF;
            uint64_t v411 = *(void *)a1[2];
            uint64_t v412 = "/usr/lib/libSystem.B.dylib";
            goto LABEL_554;
          case 186:
            unint64_t v410 = *(_WORD *)(a1[3] + 84) & 0x7FFF;
            uint64_t v411 = *(void *)a1[2];
            uint64_t v412 = "/usr/lib/libSystem.B.dylib" + 24;
            goto LABEL_554;
          case 187:
            unint64_t v410 = *(_WORD *)(a1[3] + 42) & 0x7FFF;
            uint64_t v411 = *(void *)a1[2];
            uint64_t v412 = (unsigned char *)(&stru_1488 + 16);
            goto LABEL_554;
          case 188:
            unint64_t v410 = *(_WORD *)(a1[3] + 40) & 0x7FFF;
            uint64_t v411 = *(void *)a1[2];
            uint64_t v412 = "/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation" + 16;
            goto LABEL_554;
          case 189:
            unint64_t v410 = *(_WORD *)(a1[3] + 52) & 0x7FFF;
            uint64_t v411 = *(void *)a1[2];
            uint64_t v412 = "/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation" + 40;
            goto LABEL_554;
          case 190:
            unint64_t v410 = *(_DWORD *)(a1[3] + 60) & 0x1FFFF;
            uint64_t v411 = *(void *)a1[2];
            uint64_t v412 = "/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation" + 64;
            goto LABEL_554;
          case 191:
            unint64_t v410 = (*(void *)(a1[3] + 86) >> 16) & 0x1FFFFLL;
            uint64_t v411 = *(void *)a1[2];
            uint64_t v412 = (unsigned char *)&stru_14F8;
            goto LABEL_554;
          case 192:
            unint64_t v410 = *(_DWORD *)(a1[3] + 28) & 0x1FFFF;
            uint64_t v411 = *(void *)a1[2];
            uint64_t v412 = (unsigned char *)(&stru_1508 + 8);
            goto LABEL_554;
          case 193:
            unint64_t v410 = *(_DWORD *)(a1[3] + 32) & 0x1FFFF;
            uint64_t v411 = *(void *)a1[2];
            uint64_t v412 = (unsigned char *)&unk_1528;
            goto LABEL_554;
          case 194:
            unint64_t v410 = (*(void *)(a1[3] + 86) >> 33) & 0x7FFFLL;
            uint64_t v411 = *(void *)a1[2];
            uint64_t v412 = (unsigned char *)&unk_1540;
LABEL_554:
            *(void *)(*(void *)&v412[v411] - 8) += v410;
            break;
          default:
            break;
        }
        --v408;
      }
      while (v408);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    int v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0xA5:
            uint64_t v10 = *(void **)a1[2];
            unint64_t v11 = (unint64_t)*(unsigned int *)(a1[3] + 36) >> 17;
            uint64_t v12 = (unint64_t *)v10[593];
            unint64_t v13 = v10[594];
            if ((unint64_t)v12 >= v13)
            {
              unint64_t v165 = (unint64_t *)v10[592];
              uint64_t v166 = v12 - v165;
              if ((unint64_t)(v166 + 1) >> 61) {
                goto LABEL_558;
              }
              unint64_t v167 = v13 - (void)v165;
              unint64_t v168 = (uint64_t)(v13 - (void)v165) >> 2;
              if (v168 <= v166 + 1) {
                unint64_t v168 = v166 + 1;
              }
              if (v167 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v169 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v169 = v168;
              }
              if (v169)
              {
                uint64_t v170 = (char *)sub_5714((uint64_t)(v10 + 594), v169);
                uint64_t v12 = (unint64_t *)v10[593];
                unint64_t v165 = (unint64_t *)v10[592];
              }
              else
              {
                uint64_t v170 = 0;
              }
              uint64_t v345 = (unint64_t *)&v170[8 * v166];
              unint64_t *v345 = v11;
              unint64_t v14 = v345 + 1;
              while (v12 != v165)
              {
                unint64_t v346 = *--v12;
                *--uint64_t v345 = v346;
              }
              v10[592] = v345;
              v10[593] = v14;
              v10[594] = &v170[8 * v169];
              if (v165) {
                operator delete(v165);
              }
            }
            else
            {
              *uint64_t v12 = v11;
              unint64_t v14 = v12 + 1;
            }
            v10[593] = v14;
            break;
          case 0xA6:
            unint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_DWORD *)(a1[3] + 36) & 0x1FFFFLL;
            uint64_t v17 = (uint64_t *)v15[596];
            unint64_t v18 = v15[597];
            if ((unint64_t)v17 >= v18)
            {
              uint64_t v171 = (uint64_t *)v15[595];
              uint64_t v172 = v17 - v171;
              if ((unint64_t)(v172 + 1) >> 61) {
                goto LABEL_558;
              }
              unint64_t v173 = v18 - (void)v171;
              unint64_t v174 = (uint64_t)(v18 - (void)v171) >> 2;
              if (v174 <= v172 + 1) {
                unint64_t v174 = v172 + 1;
              }
              if (v173 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v175 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v175 = v174;
              }
              if (v175)
              {
                uint64_t v176 = (char *)sub_5714((uint64_t)(v15 + 597), v175);
                uint64_t v17 = (uint64_t *)v15[596];
                uint64_t v171 = (uint64_t *)v15[595];
              }
              else
              {
                uint64_t v176 = 0;
              }
              unint64_t v347 = (uint64_t *)&v176[8 * v172];
              uint64_t *v347 = v16;
              unint64_t v19 = v347 + 1;
              while (v17 != v171)
              {
                uint64_t v348 = *--v17;
                *--unint64_t v347 = v348;
              }
              v15[595] = v347;
              v15[596] = v19;
              v15[597] = &v176[8 * v175];
              if (v171) {
                operator delete(v171);
              }
            }
            else
            {
              uint64_t *v17 = v16;
              unint64_t v19 = v17 + 1;
            }
            v15[596] = v19;
            break;
          case 0xA7:
            uint64_t v20 = *(void **)a1[2];
            uint64_t v21 = *(_WORD *)(a1[3] + 26) & 0x7FFF;
            uint64_t v22 = (char *)v20[599];
            unint64_t v23 = v20[600];
            if ((unint64_t)v22 >= v23)
            {
              uint64_t v177 = (char *)v20[598];
              uint64_t v178 = (v22 - v177) >> 3;
              if ((unint64_t)(v178 + 1) >> 61) {
                goto LABEL_558;
              }
              unint64_t v179 = v23 - (void)v177;
              unint64_t v180 = (uint64_t)(v23 - (void)v177) >> 2;
              if (v180 <= v178 + 1) {
                unint64_t v180 = v178 + 1;
              }
              if (v179 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v181 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v181 = v180;
              }
              if (v181)
              {
                uint64_t v182 = (char *)sub_5714((uint64_t)(v20 + 600), v181);
                uint64_t v22 = (char *)v20[599];
                uint64_t v177 = (char *)v20[598];
              }
              else
              {
                uint64_t v182 = 0;
              }
              unint64_t v349 = &v182[8 * v178];
              *(void *)unint64_t v349 = v21;
              unint64_t v24 = v349 + 8;
              while (v22 != v177)
              {
                uint64_t v350 = *((void *)v22 - 1);
                v22 -= 8;
                *((void *)v349 - 1) = v350;
                v349 -= 8;
              }
              v20[598] = v349;
              v20[599] = v24;
              v20[600] = &v182[8 * v181];
              if (v177) {
                operator delete(v177);
              }
            }
            else
            {
              *(void *)uint64_t v22 = v21;
              unint64_t v24 = v22 + 8;
            }
            v20[599] = v24;
            break;
          case 0xA8:
            unint64_t v25 = *(void **)a1[2];
            uint64_t v26 = *(void *)(a1[3] + 76) >> 49;
            uint64_t v27 = (char *)v25[602];
            unint64_t v28 = v25[603];
            if ((unint64_t)v27 >= v28)
            {
              uint64_t v183 = (char *)v25[601];
              uint64_t v184 = (v27 - v183) >> 3;
              if ((unint64_t)(v184 + 1) >> 61) {
                goto LABEL_558;
              }
              unint64_t v185 = v28 - (void)v183;
              unint64_t v186 = (uint64_t)(v28 - (void)v183) >> 2;
              if (v186 <= v184 + 1) {
                unint64_t v186 = v184 + 1;
              }
              if (v185 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v187 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v187 = v186;
              }
              if (v187)
              {
                uint64_t v188 = (char *)sub_5714((uint64_t)(v25 + 603), v187);
                uint64_t v27 = (char *)v25[602];
                uint64_t v183 = (char *)v25[601];
              }
              else
              {
                uint64_t v188 = 0;
              }
              uint64_t v351 = &v188[8 * v184];
              *(void *)uint64_t v351 = v26;
              unint64_t v29 = v351 + 8;
              while (v27 != v183)
              {
                uint64_t v352 = *((void *)v27 - 1);
                v27 -= 8;
                *((void *)v351 - 1) = v352;
                v351 -= 8;
              }
              v25[601] = v351;
              v25[602] = v29;
              v25[603] = &v188[8 * v187];
              if (v183) {
                operator delete(v183);
              }
            }
            else
            {
              *(void *)uint64_t v27 = v26;
              unint64_t v29 = v27 + 8;
            }
            v25[602] = v29;
            break;
          case 0xA9:
            uint64_t v30 = *(void **)a1[2];
            uint64_t v31 = *(_WORD *)(a1[3] + 92) & 0x7FFF;
            uint64_t v32 = (char *)v30[605];
            unint64_t v33 = v30[606];
            if ((unint64_t)v32 >= v33)
            {
              uint64_t v189 = (char *)v30[604];
              uint64_t v190 = (v32 - v189) >> 3;
              if ((unint64_t)(v190 + 1) >> 61) {
                goto LABEL_558;
              }
              unint64_t v191 = v33 - (void)v189;
              unint64_t v192 = (uint64_t)(v33 - (void)v189) >> 2;
              if (v192 <= v190 + 1) {
                unint64_t v192 = v190 + 1;
              }
              if (v191 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v193 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v193 = v192;
              }
              if (v193)
              {
                uint64_t v194 = (char *)sub_5714((uint64_t)(v30 + 606), v193);
                uint64_t v32 = (char *)v30[605];
                uint64_t v189 = (char *)v30[604];
              }
              else
              {
                uint64_t v194 = 0;
              }
              unint64_t v353 = &v194[8 * v190];
              *(void *)unint64_t v353 = v31;
              unint64_t v34 = v353 + 8;
              while (v32 != v189)
              {
                uint64_t v354 = *((void *)v32 - 1);
                v32 -= 8;
                *((void *)v353 - 1) = v354;
                v353 -= 8;
              }
              v30[604] = v353;
              v30[605] = v34;
              v30[606] = &v194[8 * v193];
              if (v189) {
                operator delete(v189);
              }
            }
            else
            {
              *(void *)uint64_t v32 = v31;
              unint64_t v34 = v32 + 8;
            }
            v30[605] = v34;
            break;
          case 0xAA:
            unint64_t v35 = *(void **)a1[2];
            uint64_t v36 = *(_WORD *)(a1[3] + 94) & 0x7FFF;
            uint64_t v37 = (char *)v35[608];
            unint64_t v38 = v35[609];
            if ((unint64_t)v37 >= v38)
            {
              uint64_t v195 = (char *)v35[607];
              uint64_t v196 = (v37 - v195) >> 3;
              if ((unint64_t)(v196 + 1) >> 61) {
                goto LABEL_558;
              }
              unint64_t v197 = v38 - (void)v195;
              unint64_t v198 = (uint64_t)(v38 - (void)v195) >> 2;
              if (v198 <= v196 + 1) {
                unint64_t v198 = v196 + 1;
              }
              if (v197 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v199 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v199 = v198;
              }
              if (v199)
              {
                uint64_t v200 = (char *)sub_5714((uint64_t)(v35 + 609), v199);
                uint64_t v37 = (char *)v35[608];
                uint64_t v195 = (char *)v35[607];
              }
              else
              {
                uint64_t v200 = 0;
              }
              unint64_t v355 = &v200[8 * v196];
              *(void *)unint64_t v355 = v36;
              unint64_t v39 = v355 + 8;
              while (v37 != v195)
              {
                uint64_t v356 = *((void *)v37 - 1);
                v37 -= 8;
                *((void *)v355 - 1) = v356;
                v355 -= 8;
              }
              v35[607] = v355;
              v35[608] = v39;
              v35[609] = &v200[8 * v199];
              if (v195) {
                operator delete(v195);
              }
            }
            else
            {
              *(void *)uint64_t v37 = v36;
              unint64_t v39 = v37 + 8;
            }
            v35[608] = v39;
            break;
          case 0xAB:
            uint64_t v40 = *(void **)a1[2];
            uint64_t v41 = *(_WORD *)(a1[3] + 22) & 0x7FFF;
            uint64_t v42 = (char *)v40[611];
            unint64_t v43 = v40[612];
            if ((unint64_t)v42 >= v43)
            {
              uint64_t v201 = (char *)v40[610];
              uint64_t v202 = (v42 - v201) >> 3;
              if ((unint64_t)(v202 + 1) >> 61) {
                goto LABEL_558;
              }
              unint64_t v203 = v43 - (void)v201;
              unint64_t v204 = (uint64_t)(v43 - (void)v201) >> 2;
              if (v204 <= v202 + 1) {
                unint64_t v204 = v202 + 1;
              }
              if (v203 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v205 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v205 = v204;
              }
              if (v205)
              {
                unint64_t v206 = (char *)sub_5714((uint64_t)(v40 + 612), v205);
                uint64_t v42 = (char *)v40[611];
                uint64_t v201 = (char *)v40[610];
              }
              else
              {
                unint64_t v206 = 0;
              }
              uint64_t v357 = &v206[8 * v202];
              *(void *)uint64_t v357 = v41;
              unint64_t v44 = v357 + 8;
              while (v42 != v201)
              {
                uint64_t v358 = *((void *)v42 - 1);
                v42 -= 8;
                *((void *)v357 - 1) = v358;
                v357 -= 8;
              }
              v40[610] = v357;
              v40[611] = v44;
              v40[612] = &v206[8 * v205];
              if (v201) {
                operator delete(v201);
              }
            }
            else
            {
              *(void *)uint64_t v42 = v41;
              unint64_t v44 = v42 + 8;
            }
            v40[611] = v44;
            break;
          case 0xAC:
            unint64_t v45 = *(void **)a1[2];
            unint64_t v46 = (unint64_t)*(unsigned int *)(a1[3] + 48) >> 17;
            uint64_t v47 = (unint64_t *)v45[614];
            unint64_t v48 = v45[615];
            if ((unint64_t)v47 >= v48)
            {
              uint64_t v207 = (unint64_t *)v45[613];
              uint64_t v208 = v47 - v207;
              if ((unint64_t)(v208 + 1) >> 61) {
                goto LABEL_558;
              }
              unint64_t v209 = v48 - (void)v207;
              unint64_t v210 = (uint64_t)(v48 - (void)v207) >> 2;
              if (v210 <= v208 + 1) {
                unint64_t v210 = v208 + 1;
              }
              if (v209 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v211 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v211 = v210;
              }
              if (v211)
              {
                unint64_t v212 = (char *)sub_5714((uint64_t)(v45 + 615), v211);
                uint64_t v47 = (unint64_t *)v45[614];
                uint64_t v207 = (unint64_t *)v45[613];
              }
              else
              {
                unint64_t v212 = 0;
              }
              unint64_t v359 = (unint64_t *)&v212[8 * v208];
              *unint64_t v359 = v46;
              unint64_t v49 = v359 + 1;
              while (v47 != v207)
              {
                unint64_t v360 = *--v47;
                *--unint64_t v359 = v360;
              }
              v45[613] = v359;
              v45[614] = v49;
              v45[615] = &v212[8 * v211];
              if (v207) {
                operator delete(v207);
              }
            }
            else
            {
              *uint64_t v47 = v46;
              unint64_t v49 = v47 + 1;
            }
            v45[614] = v49;
            break;
          case 0xAD:
            unint64_t v50 = *(void **)a1[2];
            uint64_t v51 = *(_DWORD *)(a1[3] + 44) & 0x1FFFFLL;
            uint64_t v52 = (uint64_t *)v50[617];
            unint64_t v53 = v50[618];
            if ((unint64_t)v52 >= v53)
            {
              uint64_t v213 = (uint64_t *)v50[616];
              uint64_t v214 = v52 - v213;
              if ((unint64_t)(v214 + 1) >> 61) {
                goto LABEL_558;
              }
              unint64_t v215 = v53 - (void)v213;
              unint64_t v216 = (uint64_t)(v53 - (void)v213) >> 2;
              if (v216 <= v214 + 1) {
                unint64_t v216 = v214 + 1;
              }
              if (v215 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v217 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v217 = v216;
              }
              if (v217)
              {
                unint64_t v218 = (char *)sub_5714((uint64_t)(v50 + 618), v217);
                uint64_t v52 = (uint64_t *)v50[617];
                uint64_t v213 = (uint64_t *)v50[616];
              }
              else
              {
                unint64_t v218 = 0;
              }
              unint64_t v361 = (uint64_t *)&v218[8 * v214];
              uint64_t *v361 = v51;
              unint64_t v54 = v361 + 1;
              while (v52 != v213)
              {
                uint64_t v362 = *--v52;
                *--unint64_t v361 = v362;
              }
              v50[616] = v361;
              v50[617] = v54;
              v50[618] = &v218[8 * v217];
              if (v213) {
                operator delete(v213);
              }
            }
            else
            {
              uint64_t *v52 = v51;
              unint64_t v54 = v52 + 1;
            }
            v50[617] = v54;
            break;
          case 0xAE:
            unint64_t v55 = *(void **)a1[2];
            uint64_t v56 = *(_DWORD *)(a1[3] + 80) & 0x1FFFFLL;
            uint64_t v57 = (uint64_t *)v55[620];
            unint64_t v58 = v55[621];
            if ((unint64_t)v57 >= v58)
            {
              uint64_t v219 = (uint64_t *)v55[619];
              uint64_t v220 = v57 - v219;
              if ((unint64_t)(v220 + 1) >> 61) {
                goto LABEL_558;
              }
              unint64_t v221 = v58 - (void)v219;
              unint64_t v222 = (uint64_t)(v58 - (void)v219) >> 2;
              if (v222 <= v220 + 1) {
                unint64_t v222 = v220 + 1;
              }
              if (v221 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v223 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v223 = v222;
              }
              if (v223)
              {
                uint64_t v224 = (char *)sub_5714((uint64_t)(v55 + 621), v223);
                uint64_t v57 = (uint64_t *)v55[620];
                uint64_t v219 = (uint64_t *)v55[619];
              }
              else
              {
                uint64_t v224 = 0;
              }
              uint64_t v363 = (uint64_t *)&v224[8 * v220];
              uint64_t *v363 = v56;
              unint64_t v59 = v363 + 1;
              while (v57 != v219)
              {
                uint64_t v364 = *--v57;
                *--uint64_t v363 = v364;
              }
              v55[619] = v363;
              v55[620] = v59;
              v55[621] = &v224[8 * v223];
              if (v219) {
                operator delete(v219);
              }
            }
            else
            {
              *uint64_t v57 = v56;
              unint64_t v59 = v57 + 1;
            }
            v55[620] = v59;
            break;
          case 0xAF:
            unint64_t v60 = *(void **)a1[2];
            uint64_t v61 = *(_WORD *)(a1[3] + 24) & 0x7FFF;
            uint64_t v62 = (char *)v60[623];
            unint64_t v63 = v60[624];
            if ((unint64_t)v62 >= v63)
            {
              uint64_t v225 = (char *)v60[622];
              uint64_t v226 = (v62 - v225) >> 3;
              if ((unint64_t)(v226 + 1) >> 61) {
                goto LABEL_558;
              }
              unint64_t v227 = v63 - (void)v225;
              unint64_t v228 = (uint64_t)(v63 - (void)v225) >> 2;
              if (v228 <= v226 + 1) {
                unint64_t v228 = v226 + 1;
              }
              if (v227 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v229 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v229 = v228;
              }
              if (v229)
              {
                unint64_t v230 = (char *)sub_5714((uint64_t)(v60 + 624), v229);
                uint64_t v62 = (char *)v60[623];
                uint64_t v225 = (char *)v60[622];
              }
              else
              {
                unint64_t v230 = 0;
              }
              uint64_t v365 = &v230[8 * v226];
              *(void *)uint64_t v365 = v61;
              unint64_t v64 = v365 + 8;
              while (v62 != v225)
              {
                uint64_t v366 = *((void *)v62 - 1);
                v62 -= 8;
                *((void *)v365 - 1) = v366;
                v365 -= 8;
              }
              v60[622] = v365;
              v60[623] = v64;
              v60[624] = &v230[8 * v229];
              if (v225) {
                operator delete(v225);
              }
            }
            else
            {
              *(void *)uint64_t v62 = v61;
              unint64_t v64 = v62 + 8;
            }
            v60[623] = v64;
            break;
          case 0xB0:
            unint64_t v65 = *(void **)a1[2];
            uint64_t v66 = *(_WORD *)(a1[3] + 20) & 0x7FFF;
            uint64_t v67 = (char *)v65[626];
            unint64_t v68 = v65[627];
            if ((unint64_t)v67 >= v68)
            {
              uint64_t v231 = (char *)v65[625];
              uint64_t v232 = (v67 - v231) >> 3;
              if ((unint64_t)(v232 + 1) >> 61) {
                goto LABEL_558;
              }
              unint64_t v233 = v68 - (void)v231;
              unint64_t v234 = (uint64_t)(v68 - (void)v231) >> 2;
              if (v234 <= v232 + 1) {
                unint64_t v234 = v232 + 1;
              }
              if (v233 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v235 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v235 = v234;
              }
              if (v235)
              {
                uint64_t v236 = (char *)sub_5714((uint64_t)(v65 + 627), v235);
                uint64_t v67 = (char *)v65[626];
                uint64_t v231 = (char *)v65[625];
              }
              else
              {
                uint64_t v236 = 0;
              }
              uint64_t v367 = &v236[8 * v232];
              *(void *)uint64_t v367 = v66;
              unint64_t v69 = v367 + 8;
              while (v67 != v231)
              {
                uint64_t v368 = *((void *)v67 - 1);
                v67 -= 8;
                *((void *)v367 - 1) = v368;
                v367 -= 8;
              }
              v65[625] = v367;
              v65[626] = v69;
              v65[627] = &v236[8 * v235];
              if (v231) {
                operator delete(v231);
              }
            }
            else
            {
              *(void *)uint64_t v67 = v66;
              unint64_t v69 = v67 + 8;
            }
            v65[626] = v69;
            break;
          case 0xB1:
            unint64_t v70 = *(void **)a1[2];
            uint64_t v71 = *(_DWORD *)(a1[3] + 72) & 0xFFFFFLL;
            uint64_t v72 = (uint64_t *)v70[629];
            unint64_t v73 = v70[630];
            if ((unint64_t)v72 >= v73)
            {
              uint64_t v237 = (uint64_t *)v70[628];
              uint64_t v238 = v72 - v237;
              if ((unint64_t)(v238 + 1) >> 61) {
                goto LABEL_558;
              }
              unint64_t v239 = v73 - (void)v237;
              unint64_t v240 = (uint64_t)(v73 - (void)v237) >> 2;
              if (v240 <= v238 + 1) {
                unint64_t v240 = v238 + 1;
              }
              if (v239 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v241 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v241 = v240;
              }
              if (v241)
              {
                uint64_t v242 = (char *)sub_5714((uint64_t)(v70 + 630), v241);
                uint64_t v72 = (uint64_t *)v70[629];
                uint64_t v237 = (uint64_t *)v70[628];
              }
              else
              {
                uint64_t v242 = 0;
              }
              uint64_t v369 = (uint64_t *)&v242[8 * v238];
              *uint64_t v369 = v71;
              unint64_t v74 = v369 + 1;
              while (v72 != v237)
              {
                uint64_t v370 = *--v72;
                *--uint64_t v369 = v370;
              }
              v70[628] = v369;
              v70[629] = v74;
              v70[630] = &v242[8 * v241];
              if (v237) {
                operator delete(v237);
              }
            }
            else
            {
              uint64_t *v72 = v71;
              unint64_t v74 = v72 + 1;
            }
            v70[629] = v74;
            break;
          case 0xB2:
            unint64_t v75 = *(void **)a1[2];
            uint64_t v76 = *(_DWORD *)(a1[3] + 64) & 0x1FFFFLL;
            unint64_t v77 = (uint64_t *)v75[632];
            unint64_t v78 = v75[633];
            if ((unint64_t)v77 >= v78)
            {
              uint64_t v243 = (uint64_t *)v75[631];
              uint64_t v244 = v77 - v243;
              if ((unint64_t)(v244 + 1) >> 61) {
                goto LABEL_558;
              }
              unint64_t v245 = v78 - (void)v243;
              unint64_t v246 = (uint64_t)(v78 - (void)v243) >> 2;
              if (v246 <= v244 + 1) {
                unint64_t v246 = v244 + 1;
              }
              if (v245 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v247 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v247 = v246;
              }
              if (v247)
              {
                uint64_t v248 = (char *)sub_5714((uint64_t)(v75 + 633), v247);
                unint64_t v77 = (uint64_t *)v75[632];
                uint64_t v243 = (uint64_t *)v75[631];
              }
              else
              {
                uint64_t v248 = 0;
              }
              uint64_t v371 = (uint64_t *)&v248[8 * v244];
              *uint64_t v371 = v76;
              unint64_t v79 = v371 + 1;
              while (v77 != v243)
              {
                uint64_t v372 = *--v77;
                *--uint64_t v371 = v372;
              }
              v75[631] = v371;
              v75[632] = v79;
              v75[633] = &v248[8 * v247];
              if (v243) {
                operator delete(v243);
              }
            }
            else
            {
              *unint64_t v77 = v76;
              unint64_t v79 = v77 + 1;
            }
            v75[632] = v79;
            break;
          case 0xB3:
            unint64_t v80 = *(void **)a1[2];
            uint64_t v81 = *(_DWORD *)(a1[3] + 68) & 0x1FFFFLL;
            unint64_t v82 = (uint64_t *)v80[635];
            unint64_t v83 = v80[636];
            if ((unint64_t)v82 >= v83)
            {
              uint64_t v249 = (uint64_t *)v80[634];
              uint64_t v250 = v82 - v249;
              if ((unint64_t)(v250 + 1) >> 61) {
                goto LABEL_558;
              }
              unint64_t v251 = v83 - (void)v249;
              unint64_t v252 = (uint64_t)(v83 - (void)v249) >> 2;
              if (v252 <= v250 + 1) {
                unint64_t v252 = v250 + 1;
              }
              if (v251 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v253 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v253 = v252;
              }
              if (v253)
              {
                uint64_t v254 = (char *)sub_5714((uint64_t)(v80 + 636), v253);
                unint64_t v82 = (uint64_t *)v80[635];
                uint64_t v249 = (uint64_t *)v80[634];
              }
              else
              {
                uint64_t v254 = 0;
              }
              uint64_t v373 = (uint64_t *)&v254[8 * v250];
              uint64_t *v373 = v81;
              uint64_t v84 = v373 + 1;
              while (v82 != v249)
              {
                uint64_t v374 = *--v82;
                *--uint64_t v373 = v374;
              }
              v80[634] = v373;
              v80[635] = v84;
              v80[636] = &v254[8 * v253];
              if (v249) {
                operator delete(v249);
              }
            }
            else
            {
              *unint64_t v82 = v81;
              uint64_t v84 = v82 + 1;
            }
            v80[635] = v84;
            break;
          case 0xB4:
            uint64_t v85 = a1[2];
            unint64_t v86 = *(void **)v85;
            uint64_t v87 = *(unsigned __int16 *)(a1[3] + 54);
            unint64_t v88 = *(char **)(*(void *)v85 + 5104);
            unint64_t v89 = *(void *)(*(void *)v85 + 5112);
            if ((unint64_t)v88 >= v89)
            {
              uint64_t v255 = (char *)v86[637];
              uint64_t v256 = (v88 - v255) >> 3;
              if ((unint64_t)(v256 + 1) >> 61) {
                goto LABEL_558;
              }
              unint64_t v257 = v89 - (void)v255;
              unint64_t v258 = (uint64_t)(v89 - (void)v255) >> 2;
              if (v258 <= v256 + 1) {
                unint64_t v258 = v256 + 1;
              }
              if (v257 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v259 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v259 = v258;
              }
              if (v259)
              {
                unint64_t v260 = (char *)sub_5714((uint64_t)(v86 + 639), v259);
                unint64_t v88 = (char *)v86[638];
                uint64_t v255 = (char *)v86[637];
              }
              else
              {
                unint64_t v260 = 0;
              }
              uint64_t v375 = &v260[8 * v256];
              *(void *)uint64_t v375 = v87;
              uint64_t v90 = v375 + 8;
              while (v88 != v255)
              {
                uint64_t v376 = *((void *)v88 - 1);
                v88 -= 8;
                *((void *)v375 - 1) = v376;
                v375 -= 8;
              }
              v86[637] = v375;
              v86[638] = v90;
              v86[639] = &v260[8 * v259];
              if (v255) {
                operator delete(v255);
              }
            }
            else
            {
              *(void *)unint64_t v88 = v87;
              uint64_t v90 = v88 + 8;
            }
            v86[638] = v90;
            break;
          case 0xB5:
            uint64_t v91 = a1[2];
            unint64_t v92 = *(void **)v91;
            uint64_t v93 = *(unsigned __int16 *)(a1[3] + 56);
            unint64_t v94 = *(char **)(*(void *)v91 + 5128);
            unint64_t v95 = *(void *)(*(void *)v91 + 5136);
            if ((unint64_t)v94 >= v95)
            {
              uint64_t v261 = (char *)v92[640];
              uint64_t v262 = (v94 - v261) >> 3;
              if ((unint64_t)(v262 + 1) >> 61) {
                goto LABEL_558;
              }
              unint64_t v263 = v95 - (void)v261;
              unint64_t v264 = (uint64_t)(v95 - (void)v261) >> 2;
              if (v264 <= v262 + 1) {
                unint64_t v264 = v262 + 1;
              }
              if (v263 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v265 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v265 = v264;
              }
              if (v265)
              {
                unint64_t v266 = (char *)sub_5714((uint64_t)(v92 + 642), v265);
                unint64_t v94 = (char *)v92[641];
                uint64_t v261 = (char *)v92[640];
              }
              else
              {
                unint64_t v266 = 0;
              }
              uint64_t v377 = &v266[8 * v262];
              *(void *)uint64_t v377 = v93;
              uint64_t v96 = v377 + 8;
              while (v94 != v261)
              {
                uint64_t v378 = *((void *)v94 - 1);
                v94 -= 8;
                *((void *)v377 - 1) = v378;
                v377 -= 8;
              }
              v92[640] = v377;
              v92[641] = v96;
              v92[642] = &v266[8 * v265];
              if (v261) {
                operator delete(v261);
              }
            }
            else
            {
              *(void *)unint64_t v94 = v93;
              uint64_t v96 = v94 + 8;
            }
            v92[641] = v96;
            break;
          case 0xB6:
            uint64_t v97 = a1[2];
            unint64_t v98 = *(void **)v97;
            uint64_t v99 = *(unsigned __int16 *)(a1[3] + 76);
            unint64_t v100 = *(char **)(*(void *)v97 + 5152);
            unint64_t v101 = *(void *)(*(void *)v97 + 5160);
            if ((unint64_t)v100 >= v101)
            {
              uint64_t v267 = (char *)v98[643];
              uint64_t v268 = (v100 - v267) >> 3;
              if ((unint64_t)(v268 + 1) >> 61) {
                goto LABEL_558;
              }
              unint64_t v269 = v101 - (void)v267;
              unint64_t v270 = (uint64_t)(v101 - (void)v267) >> 2;
              if (v270 <= v268 + 1) {
                unint64_t v270 = v268 + 1;
              }
              if (v269 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v271 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v271 = v270;
              }
              if (v271)
              {
                unint64_t v272 = (char *)sub_5714((uint64_t)(v98 + 645), v271);
                unint64_t v100 = (char *)v98[644];
                uint64_t v267 = (char *)v98[643];
              }
              else
              {
                unint64_t v272 = 0;
              }
              uint64_t v379 = &v272[8 * v268];
              *(void *)uint64_t v379 = v99;
              uint64_t v102 = v379 + 8;
              while (v100 != v267)
              {
                uint64_t v380 = *((void *)v100 - 1);
                v100 -= 8;
                *((void *)v379 - 1) = v380;
                v379 -= 8;
              }
              v98[643] = v379;
              v98[644] = v102;
              v98[645] = &v272[8 * v271];
              if (v267) {
                operator delete(v267);
              }
            }
            else
            {
              *(void *)unint64_t v100 = v99;
              uint64_t v102 = v100 + 8;
            }
            v98[644] = v102;
            break;
          case 0xB7:
            uint64_t v103 = a1[2];
            unint64_t v104 = *(void **)v103;
            uint64_t v105 = *(unsigned __int16 *)(a1[3] + 86);
            unint64_t v106 = *(char **)(*(void *)v103 + 5176);
            unint64_t v107 = *(void *)(*(void *)v103 + 5184);
            if ((unint64_t)v106 >= v107)
            {
              uint64_t v273 = (char *)v104[646];
              uint64_t v274 = (v106 - v273) >> 3;
              if ((unint64_t)(v274 + 1) >> 61) {
                goto LABEL_558;
              }
              unint64_t v275 = v107 - (void)v273;
              unint64_t v276 = (uint64_t)(v107 - (void)v273) >> 2;
              if (v276 <= v274 + 1) {
                unint64_t v276 = v274 + 1;
              }
              if (v275 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v277 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v277 = v276;
              }
              if (v277)
              {
                unint64_t v278 = (char *)sub_5714((uint64_t)(v104 + 648), v277);
                unint64_t v106 = (char *)v104[647];
                uint64_t v273 = (char *)v104[646];
              }
              else
              {
                unint64_t v278 = 0;
              }
              uint64_t v381 = &v278[8 * v274];
              *(void *)uint64_t v381 = v105;
              uint64_t v108 = v381 + 8;
              while (v106 != v273)
              {
                uint64_t v382 = *((void *)v106 - 1);
                v106 -= 8;
                *((void *)v381 - 1) = v382;
                v381 -= 8;
              }
              v104[646] = v381;
              v104[647] = v108;
              v104[648] = &v278[8 * v277];
              if (v273) {
                operator delete(v273);
              }
            }
            else
            {
              *(void *)unint64_t v106 = v105;
              uint64_t v108 = v106 + 8;
            }
            v104[647] = v108;
            break;
          case 0xB8:
            uint64_t v109 = a1[2];
            unint64_t v110 = *(void **)v109;
            uint64_t v111 = *(unsigned __int16 *)(a1[3] + 78);
            unint64_t v112 = *(char **)(*(void *)v109 + 5200);
            unint64_t v113 = *(void *)(*(void *)v109 + 5208);
            if ((unint64_t)v112 >= v113)
            {
              uint64_t v279 = (char *)v110[649];
              uint64_t v280 = (v112 - v279) >> 3;
              if ((unint64_t)(v280 + 1) >> 61) {
                goto LABEL_558;
              }
              unint64_t v281 = v113 - (void)v279;
              unint64_t v282 = (uint64_t)(v113 - (void)v279) >> 2;
              if (v282 <= v280 + 1) {
                unint64_t v282 = v280 + 1;
              }
              if (v281 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v283 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v283 = v282;
              }
              if (v283)
              {
                unint64_t v284 = (char *)sub_5714((uint64_t)(v110 + 651), v283);
                unint64_t v112 = (char *)v110[650];
                uint64_t v279 = (char *)v110[649];
              }
              else
              {
                unint64_t v284 = 0;
              }
              uint64_t v383 = &v284[8 * v280];
              *(void *)uint64_t v383 = v111;
              uint64_t v114 = v383 + 8;
              while (v112 != v279)
              {
                uint64_t v384 = *((void *)v112 - 1);
                v112 -= 8;
                *((void *)v383 - 1) = v384;
                v383 -= 8;
              }
              v110[649] = v383;
              v110[650] = v114;
              v110[651] = &v284[8 * v283];
              if (v279) {
                operator delete(v279);
              }
            }
            else
            {
              *(void *)unint64_t v112 = v111;
              uint64_t v114 = v112 + 8;
            }
            v110[650] = v114;
            break;
          case 0xB9:
            unint64_t v115 = *(void **)a1[2];
            uint64_t v116 = *(_DWORD *)(a1[3] + 48) & 0x1FFFFLL;
            unint64_t v117 = (uint64_t *)v115[653];
            unint64_t v118 = v115[654];
            if ((unint64_t)v117 >= v118)
            {
              uint64_t v285 = (uint64_t *)v115[652];
              uint64_t v286 = v117 - v285;
              if ((unint64_t)(v286 + 1) >> 61) {
                goto LABEL_558;
              }
              unint64_t v287 = v118 - (void)v285;
              unint64_t v288 = (uint64_t)(v118 - (void)v285) >> 2;
              if (v288 <= v286 + 1) {
                unint64_t v288 = v286 + 1;
              }
              if (v287 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v289 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v289 = v288;
              }
              if (v289)
              {
                unint64_t v290 = (char *)sub_5714((uint64_t)(v115 + 654), v289);
                unint64_t v117 = (uint64_t *)v115[653];
                uint64_t v285 = (uint64_t *)v115[652];
              }
              else
              {
                unint64_t v290 = 0;
              }
              uint64_t v385 = (uint64_t *)&v290[8 * v286];
              uint64_t *v385 = v116;
              unint64_t v119 = v385 + 1;
              while (v117 != v285)
              {
                uint64_t v386 = *--v117;
                *--uint64_t v385 = v386;
              }
              v115[652] = v385;
              v115[653] = v119;
              v115[654] = &v290[8 * v289];
              if (v285) {
                operator delete(v285);
              }
            }
            else
            {
              *unint64_t v117 = v116;
              unint64_t v119 = v117 + 1;
            }
            v115[653] = v119;
            break;
          case 0xBA:
            uint64_t v120 = *(void **)a1[2];
            uint64_t v121 = *(_WORD *)(a1[3] + 84) & 0x7FFF;
            unint64_t v122 = (char *)v120[656];
            unint64_t v123 = v120[657];
            if ((unint64_t)v122 >= v123)
            {
              uint64_t v291 = (char *)v120[655];
              uint64_t v292 = (v122 - v291) >> 3;
              if ((unint64_t)(v292 + 1) >> 61) {
                goto LABEL_558;
              }
              unint64_t v293 = v123 - (void)v291;
              unint64_t v294 = (uint64_t)(v123 - (void)v291) >> 2;
              if (v294 <= v292 + 1) {
                unint64_t v294 = v292 + 1;
              }
              if (v293 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v295 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v295 = v294;
              }
              if (v295)
              {
                unint64_t v296 = (char *)sub_5714((uint64_t)(v120 + 657), v295);
                unint64_t v122 = (char *)v120[656];
                uint64_t v291 = (char *)v120[655];
              }
              else
              {
                unint64_t v296 = 0;
              }
              uint64_t v387 = &v296[8 * v292];
              *(void *)uint64_t v387 = v121;
              unint64_t v124 = v387 + 8;
              while (v122 != v291)
              {
                uint64_t v388 = *((void *)v122 - 1);
                v122 -= 8;
                *((void *)v387 - 1) = v388;
                v387 -= 8;
              }
              v120[655] = v387;
              v120[656] = v124;
              v120[657] = &v296[8 * v295];
              if (v291) {
                operator delete(v291);
              }
            }
            else
            {
              *(void *)unint64_t v122 = v121;
              unint64_t v124 = v122 + 8;
            }
            v120[656] = v124;
            break;
          case 0xBB:
            unint64_t v125 = *(void **)a1[2];
            uint64_t v126 = *(_WORD *)(a1[3] + 42) & 0x7FFF;
            unint64_t v127 = (char *)v125[659];
            unint64_t v128 = v125[660];
            if ((unint64_t)v127 >= v128)
            {
              uint64_t v297 = (char *)v125[658];
              uint64_t v298 = (v127 - v297) >> 3;
              if ((unint64_t)(v298 + 1) >> 61) {
                goto LABEL_558;
              }
              unint64_t v299 = v128 - (void)v297;
              unint64_t v300 = (uint64_t)(v128 - (void)v297) >> 2;
              if (v300 <= v298 + 1) {
                unint64_t v300 = v298 + 1;
              }
              if (v299 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v301 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v301 = v300;
              }
              if (v301)
              {
                uint64_t v302 = (char *)sub_5714((uint64_t)(v125 + 660), v301);
                unint64_t v127 = (char *)v125[659];
                uint64_t v297 = (char *)v125[658];
              }
              else
              {
                uint64_t v302 = 0;
              }
              uint64_t v389 = &v302[8 * v298];
              *(void *)uint64_t v389 = v126;
              unint64_t v129 = v389 + 8;
              while (v127 != v297)
              {
                uint64_t v390 = *((void *)v127 - 1);
                v127 -= 8;
                *((void *)v389 - 1) = v390;
                v389 -= 8;
              }
              v125[658] = v389;
              v125[659] = v129;
              v125[660] = &v302[8 * v301];
              if (v297) {
                operator delete(v297);
              }
            }
            else
            {
              *(void *)unint64_t v127 = v126;
              unint64_t v129 = v127 + 8;
            }
            v125[659] = v129;
            break;
          case 0xBC:
            unint64_t v130 = *(void **)a1[2];
            uint64_t v131 = *(_WORD *)(a1[3] + 40) & 0x7FFF;
            uint64_t v132 = (char *)v130[662];
            unint64_t v133 = v130[663];
            if ((unint64_t)v132 >= v133)
            {
              uint64_t v303 = (char *)v130[661];
              uint64_t v304 = (v132 - v303) >> 3;
              if ((unint64_t)(v304 + 1) >> 61) {
                goto LABEL_558;
              }
              unint64_t v305 = v133 - (void)v303;
              unint64_t v306 = (uint64_t)(v133 - (void)v303) >> 2;
              if (v306 <= v304 + 1) {
                unint64_t v306 = v304 + 1;
              }
              if (v305 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v307 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v307 = v306;
              }
              if (v307)
              {
                long long v308 = (char *)sub_5714((uint64_t)(v130 + 663), v307);
                uint64_t v132 = (char *)v130[662];
                uint64_t v303 = (char *)v130[661];
              }
              else
              {
                long long v308 = 0;
              }
              uint64_t v391 = &v308[8 * v304];
              *(void *)uint64_t v391 = v131;
              unint64_t v134 = v391 + 8;
              while (v132 != v303)
              {
                uint64_t v392 = *((void *)v132 - 1);
                v132 -= 8;
                *((void *)v391 - 1) = v392;
                v391 -= 8;
              }
              v130[661] = v391;
              v130[662] = v134;
              v130[663] = &v308[8 * v307];
              if (v303) {
                operator delete(v303);
              }
            }
            else
            {
              *(void *)uint64_t v132 = v131;
              unint64_t v134 = v132 + 8;
            }
            v130[662] = v134;
            break;
          case 0xBD:
            unint64_t v135 = *(void **)a1[2];
            uint64_t v136 = *(_WORD *)(a1[3] + 52) & 0x7FFF;
            uint64_t v137 = (char *)v135[665];
            unint64_t v138 = v135[666];
            if ((unint64_t)v137 >= v138)
            {
              uint64_t v309 = (char *)v135[664];
              uint64_t v310 = (v137 - v309) >> 3;
              if ((unint64_t)(v310 + 1) >> 61) {
                goto LABEL_558;
              }
              unint64_t v311 = v138 - (void)v309;
              unint64_t v312 = (uint64_t)(v138 - (void)v309) >> 2;
              if (v312 <= v310 + 1) {
                unint64_t v312 = v310 + 1;
              }
              if (v311 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v313 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v313 = v312;
              }
              if (v313)
              {
                unint64_t v314 = (char *)sub_5714((uint64_t)(v135 + 666), v313);
                uint64_t v137 = (char *)v135[665];
                uint64_t v309 = (char *)v135[664];
              }
              else
              {
                unint64_t v314 = 0;
              }
              uint64_t v393 = &v314[8 * v310];
              *(void *)uint64_t v393 = v136;
              unint64_t v139 = v393 + 8;
              while (v137 != v309)
              {
                uint64_t v394 = *((void *)v137 - 1);
                v137 -= 8;
                *((void *)v393 - 1) = v394;
                v393 -= 8;
              }
              v135[664] = v393;
              v135[665] = v139;
              v135[666] = &v314[8 * v313];
              if (v309) {
                operator delete(v309);
              }
            }
            else
            {
              *(void *)uint64_t v137 = v136;
              unint64_t v139 = v137 + 8;
            }
            v135[665] = v139;
            break;
          case 0xBE:
            unint64_t v140 = *(void **)a1[2];
            uint64_t v141 = *(_DWORD *)(a1[3] + 60) & 0x1FFFFLL;
            unint64_t v142 = (uint64_t *)v140[668];
            unint64_t v143 = v140[669];
            if ((unint64_t)v142 >= v143)
            {
              uint64_t v315 = (uint64_t *)v140[667];
              uint64_t v316 = v142 - v315;
              if ((unint64_t)(v316 + 1) >> 61) {
                goto LABEL_558;
              }
              unint64_t v317 = v143 - (void)v315;
              unint64_t v318 = (uint64_t)(v143 - (void)v315) >> 2;
              if (v318 <= v316 + 1) {
                unint64_t v318 = v316 + 1;
              }
              if (v317 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v319 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v319 = v318;
              }
              if (v319)
              {
                uint64_t v320 = (char *)sub_5714((uint64_t)(v140 + 669), v319);
                unint64_t v142 = (uint64_t *)v140[668];
                uint64_t v315 = (uint64_t *)v140[667];
              }
              else
              {
                uint64_t v320 = 0;
              }
              uint64_t v395 = (uint64_t *)&v320[8 * v316];
              *uint64_t v395 = v141;
              uint64_t v144 = v395 + 1;
              while (v142 != v315)
              {
                uint64_t v396 = *--v142;
                *--uint64_t v395 = v396;
              }
              v140[667] = v395;
              v140[668] = v144;
              v140[669] = &v320[8 * v319];
              if (v315) {
                operator delete(v315);
              }
            }
            else
            {
              uint64_t *v142 = v141;
              uint64_t v144 = v142 + 1;
            }
            v140[668] = v144;
            break;
          case 0xBF:
            unint64_t v145 = *(void **)a1[2];
            uint64_t v146 = (*(void *)(a1[3] + 86) >> 16) & 0x1FFFFLL;
            unint64_t v147 = (uint64_t *)v145[671];
            unint64_t v148 = v145[672];
            if ((unint64_t)v147 >= v148)
            {
              uint64_t v321 = (uint64_t *)v145[670];
              uint64_t v322 = v147 - v321;
              if ((unint64_t)(v322 + 1) >> 61) {
                goto LABEL_558;
              }
              unint64_t v323 = v148 - (void)v321;
              unint64_t v324 = (uint64_t)(v148 - (void)v321) >> 2;
              if (v324 <= v322 + 1) {
                unint64_t v324 = v322 + 1;
              }
              if (v323 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v325 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v325 = v324;
              }
              if (v325)
              {
                unint64_t v326 = (char *)sub_5714((uint64_t)(v145 + 672), v325);
                unint64_t v147 = (uint64_t *)v145[671];
                uint64_t v321 = (uint64_t *)v145[670];
              }
              else
              {
                unint64_t v326 = 0;
              }
              uint64_t v397 = (uint64_t *)&v326[8 * v322];
              uint64_t *v397 = v146;
              uint64_t v149 = v397 + 1;
              while (v147 != v321)
              {
                uint64_t v398 = *--v147;
                *--uint64_t v397 = v398;
              }
              v145[670] = v397;
              v145[671] = v149;
              v145[672] = &v326[8 * v325];
              if (v321) {
                operator delete(v321);
              }
            }
            else
            {
              uint64_t *v147 = v146;
              uint64_t v149 = v147 + 1;
            }
            v145[671] = v149;
            break;
          case 0xC0:
            uint64_t v150 = *(void **)a1[2];
            uint64_t v151 = *(_DWORD *)(a1[3] + 28) & 0x1FFFFLL;
            unint64_t v152 = (uint64_t *)v150[674];
            unint64_t v153 = v150[675];
            if ((unint64_t)v152 >= v153)
            {
              uint64_t v327 = (uint64_t *)v150[673];
              uint64_t v328 = v152 - v327;
              if ((unint64_t)(v328 + 1) >> 61) {
                goto LABEL_558;
              }
              unint64_t v329 = v153 - (void)v327;
              unint64_t v330 = (uint64_t)(v153 - (void)v327) >> 2;
              if (v330 <= v328 + 1) {
                unint64_t v330 = v328 + 1;
              }
              if (v329 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v331 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v331 = v330;
              }
              if (v331)
              {
                unint64_t v332 = (char *)sub_5714((uint64_t)(v150 + 675), v331);
                unint64_t v152 = (uint64_t *)v150[674];
                uint64_t v327 = (uint64_t *)v150[673];
              }
              else
              {
                unint64_t v332 = 0;
              }
              uint64_t v399 = (uint64_t *)&v332[8 * v328];
              uint64_t *v399 = v151;
              unint64_t v154 = v399 + 1;
              while (v152 != v327)
              {
                uint64_t v400 = *--v152;
                *--uint64_t v399 = v400;
              }
              v150[673] = v399;
              v150[674] = v154;
              v150[675] = &v332[8 * v331];
              if (v327) {
                operator delete(v327);
              }
            }
            else
            {
              uint64_t *v152 = v151;
              unint64_t v154 = v152 + 1;
            }
            v150[674] = v154;
            break;
          case 0xC1:
            unint64_t v155 = *(void **)a1[2];
            uint64_t v156 = *(_DWORD *)(a1[3] + 32) & 0x1FFFFLL;
            unint64_t v157 = (uint64_t *)v155[677];
            unint64_t v158 = v155[678];
            if ((unint64_t)v157 >= v158)
            {
              uint64_t v333 = (uint64_t *)v155[676];
              uint64_t v334 = v157 - v333;
              if ((unint64_t)(v334 + 1) >> 61) {
                goto LABEL_558;
              }
              unint64_t v335 = v158 - (void)v333;
              unint64_t v336 = (uint64_t)(v158 - (void)v333) >> 2;
              if (v336 <= v334 + 1) {
                unint64_t v336 = v334 + 1;
              }
              if (v335 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v337 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v337 = v336;
              }
              if (v337)
              {
                int v338 = (char *)sub_5714((uint64_t)(v155 + 678), v337);
                unint64_t v157 = (uint64_t *)v155[677];
                uint64_t v333 = (uint64_t *)v155[676];
              }
              else
              {
                int v338 = 0;
              }
              uint64_t v401 = (uint64_t *)&v338[8 * v334];
              *uint64_t v401 = v156;
              uint64_t v159 = v401 + 1;
              while (v157 != v333)
              {
                uint64_t v402 = *--v157;
                *--uint64_t v401 = v402;
              }
              v155[676] = v401;
              v155[677] = v159;
              v155[678] = &v338[8 * v337];
              if (v333) {
                operator delete(v333);
              }
            }
            else
            {
              *unint64_t v157 = v156;
              uint64_t v159 = v157 + 1;
            }
            v155[677] = v159;
            break;
          case 0xC2:
            unint64_t v160 = *(void **)a1[2];
            uint64_t v161 = (*(void *)(a1[3] + 86) >> 33) & 0x7FFFLL;
            uint64_t v162 = (uint64_t *)v160[680];
            unint64_t v163 = v160[681];
            if ((unint64_t)v162 >= v163)
            {
              uint64_t v339 = (uint64_t *)v160[679];
              uint64_t v340 = v162 - v339;
              if ((unint64_t)(v340 + 1) >> 61) {
LABEL_558:
              }
                sub_566C();
              unint64_t v341 = v163 - (void)v339;
              unint64_t v342 = (uint64_t)(v163 - (void)v339) >> 2;
              if (v342 <= v340 + 1) {
                unint64_t v342 = v340 + 1;
              }
              if (v341 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v343 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v343 = v342;
              }
              if (v343)
              {
                int v344 = (char *)sub_5714((uint64_t)(v160 + 681), v343);
                uint64_t v162 = (uint64_t *)v160[680];
                uint64_t v339 = (uint64_t *)v160[679];
              }
              else
              {
                int v344 = 0;
              }
              uint64_t v403 = (uint64_t *)&v344[8 * v340];
              *uint64_t v403 = v161;
              uint64_t v164 = v403 + 1;
              while (v162 != v339)
              {
                uint64_t v404 = *--v162;
                *--uint64_t v403 = v404;
              }
              v160[679] = v403;
              v160[680] = v164;
              v160[681] = &v344[8 * v343];
              if (v339) {
                operator delete(v339);
              }
            }
            else
            {
              *uint64_t v162 = v161;
              uint64_t v164 = v162 + 1;
            }
            v160[680] = v164;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_F0ACC(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    uint64_t v51 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    unint64_t v50 = *v51;
    uint64_t v52 = (char *)v51[1] - (char *)*v51;
    if (!v52) {
      goto LABEL_74;
    }
    unint64_t v53 = v52 >> 2;
    if (v53 <= 1) {
      unint64_t v53 = 1;
    }
    while (1)
    {
      int v55 = *v50++;
      int v54 = v55;
      if (v55 == 197) {
        break;
      }
      if (v54 == 196)
      {
        uint64_t v56 = *(_DWORD *)(a1[3] + 28) & 0x3FFFFF;
        uint64_t v57 = (void *)(*(void *)a1[2] + 5488);
        goto LABEL_72;
      }
      if (v54 == 195)
      {
        uint64_t v56 = *(_DWORD *)(a1[3] + 24) & 0x1FFFFF;
        uint64_t v57 = (void *)(*(void *)a1[2] + 5464);
LABEL_72:
        *(void *)(*v57 - 8) += v56;
      }
      if (!--v53) {
        goto LABEL_74;
      }
    }
    uint64_t v56 = *(_DWORD *)(a1[3] + 20) & 0x3FFFFF;
    uint64_t v57 = (void *)(*(void *)a1[2] + 5512);
    goto LABEL_72;
  }
  if (*a2) {
    return;
  }
  int v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
  uint64_t v6 = v5[1] - *v5;
  if (v6)
  {
    uint64_t v7 = 0;
    unint64_t v8 = v6 >> 2;
    if (v8 <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = v8;
    }
    do
    {
      int v10 = *(_DWORD *)(*v5 + 4 * v7);
      switch(v10)
      {
        case 197:
          uint64_t v16 = *(void **)a1[2];
          uint64_t v17 = *(_DWORD *)(a1[3] + 20) & 0x3FFFFFLL;
          unint64_t v18 = (uint64_t *)v16[689];
          unint64_t v19 = v16[690];
          if ((unint64_t)v18 >= v19)
          {
            uint64_t v32 = (uint64_t *)v16[688];
            uint64_t v33 = v18 - v32;
            if ((unint64_t)(v33 + 1) >> 61) {
              goto LABEL_76;
            }
            unint64_t v34 = v19 - (void)v32;
            unint64_t v35 = (uint64_t)(v19 - (void)v32) >> 2;
            if (v35 <= v33 + 1) {
              unint64_t v35 = v33 + 1;
            }
            if (v34 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v36 = v35;
            }
            if (v36)
            {
              uint64_t v37 = (char *)sub_5714((uint64_t)(v16 + 690), v36);
              unint64_t v18 = (uint64_t *)v16[689];
              uint64_t v32 = (uint64_t *)v16[688];
            }
            else
            {
              uint64_t v37 = 0;
            }
            unint64_t v46 = (uint64_t *)&v37[8 * v33];
            *unint64_t v46 = v17;
            uint64_t v20 = v46 + 1;
            while (v18 != v32)
            {
              uint64_t v47 = *--v18;
              *--unint64_t v46 = v47;
            }
            v16[688] = v46;
            v16[689] = v20;
            v16[690] = &v37[8 * v36];
            if (v32) {
              operator delete(v32);
            }
          }
          else
          {
            *unint64_t v18 = v17;
            uint64_t v20 = v18 + 1;
          }
          v16[689] = v20;
          break;
        case 196:
          uint64_t v21 = *(void **)a1[2];
          uint64_t v22 = *(_DWORD *)(a1[3] + 28) & 0x3FFFFFLL;
          unint64_t v23 = (uint64_t *)v21[686];
          unint64_t v24 = v21[687];
          if ((unint64_t)v23 >= v24)
          {
            unint64_t v38 = (uint64_t *)v21[685];
            uint64_t v39 = v23 - v38;
            if ((unint64_t)(v39 + 1) >> 61) {
LABEL_76:
            }
              sub_566C();
            unint64_t v40 = v24 - (void)v38;
            unint64_t v41 = (uint64_t)(v24 - (void)v38) >> 2;
            if (v41 <= v39 + 1) {
              unint64_t v41 = v39 + 1;
            }
            if (v40 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v42 = v41;
            }
            if (v42)
            {
              unint64_t v43 = (char *)sub_5714((uint64_t)(v21 + 687), v42);
              unint64_t v23 = (uint64_t *)v21[686];
              unint64_t v38 = (uint64_t *)v21[685];
            }
            else
            {
              unint64_t v43 = 0;
            }
            unint64_t v48 = (uint64_t *)&v43[8 * v39];
            *unint64_t v48 = v22;
            unint64_t v25 = v48 + 1;
            while (v23 != v38)
            {
              uint64_t v49 = *--v23;
              *--unint64_t v48 = v49;
            }
            v21[685] = v48;
            v21[686] = v25;
            v21[687] = &v43[8 * v42];
            if (v38) {
              operator delete(v38);
            }
          }
          else
          {
            *unint64_t v23 = v22;
            unint64_t v25 = v23 + 1;
          }
          v21[686] = v25;
          break;
        case 195:
          unint64_t v11 = *(void **)a1[2];
          uint64_t v12 = *(_DWORD *)(a1[3] + 24) & 0x1FFFFFLL;
          unint64_t v13 = (uint64_t *)v11[683];
          unint64_t v14 = v11[684];
          if ((unint64_t)v13 >= v14)
          {
            uint64_t v26 = (uint64_t *)v11[682];
            uint64_t v27 = v13 - v26;
            if ((unint64_t)(v27 + 1) >> 61) {
              goto LABEL_76;
            }
            unint64_t v28 = v14 - (void)v26;
            unint64_t v29 = (uint64_t)(v14 - (void)v26) >> 2;
            if (v29 <= v27 + 1) {
              unint64_t v29 = v27 + 1;
            }
            if (v28 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v30 = v29;
            }
            if (v30)
            {
              uint64_t v31 = (char *)sub_5714((uint64_t)(v11 + 684), v30);
              unint64_t v13 = (uint64_t *)v11[683];
              uint64_t v26 = (uint64_t *)v11[682];
            }
            else
            {
              uint64_t v31 = 0;
            }
            unint64_t v44 = (uint64_t *)&v31[8 * v27];
            uint64_t *v44 = v12;
            unint64_t v15 = v44 + 1;
            while (v13 != v26)
            {
              uint64_t v45 = *--v13;
              *--unint64_t v44 = v45;
            }
            v11[682] = v44;
            v11[683] = v15;
            v11[684] = &v31[8 * v30];
            if (v26) {
              operator delete(v26);
            }
          }
          else
          {
            *unint64_t v13 = v12;
            unint64_t v15 = v13 + 1;
          }
          v11[683] = v15;
          break;
      }
      ++v7;
    }
    while (v7 != v9);
  }
LABEL_74:
  *a2 = 1;
}

void sub_F0EA0(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    uint64_t v141 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    unint64_t v140 = *v141;
    uint64_t v142 = (char *)v141[1] - (char *)*v141;
    if (v142)
    {
      unint64_t v143 = v142 >> 2;
      if (v143 <= 1) {
        unint64_t v143 = 1;
      }
      do
      {
        int v144 = *v140++;
        switch(v144)
        {
          case 233:
            unint64_t v145 = *(_WORD *)(a1[3] + 30) & 0x1FFF;
            uint64_t v146 = (void *)(*(void *)a1[2] + 6376);
            goto LABEL_194;
          case 234:
            unint64_t v145 = *(_DWORD *)(a1[3] + 36) & 0x3FFFF;
            uint64_t v146 = (void *)(*(void *)a1[2] + 6400);
            goto LABEL_194;
          case 235:
            unint64_t v145 = *(_WORD *)(a1[3] + 28) & 0x1FFF;
            uint64_t v146 = (void *)(*(void *)a1[2] + 6424);
            goto LABEL_194;
          case 236:
            unint64_t v145 = ((unint64_t)*(unsigned int *)(a1[3] + 32) >> 13) & 0x3FFFF;
            uint64_t v146 = (void *)(*(void *)a1[2] + 6448);
            goto LABEL_194;
          case 237:
            unint64_t v145 = *(_DWORD *)(a1[3] + 32) & 0x1FFF;
            uint64_t v146 = (void *)(*(void *)a1[2] + 6472);
            goto LABEL_194;
          case 238:
            unint64_t v145 = *(_DWORD *)(a1[3] + 40) & 0x3FFFF;
            uint64_t v146 = (void *)(*(void *)a1[2] + 6496);
            goto LABEL_194;
          case 239:
            unint64_t v145 = *(_WORD *)(a1[3] + 24) & 0x3FFF;
            uint64_t v146 = (void *)(*(void *)a1[2] + 6520);
            goto LABEL_194;
          case 240:
            unint64_t v145 = *(_WORD *)(a1[3] + 20) & 0x7FFF;
            uint64_t v146 = (void *)(*(void *)a1[2] + 6544);
            goto LABEL_194;
          case 241:
            unint64_t v145 = *(_WORD *)(a1[3] + 26) & 0x3FFF;
            uint64_t v146 = (void *)(*(void *)a1[2] + 6568);
            goto LABEL_194;
          case 242:
            unint64_t v145 = *(_WORD *)(a1[3] + 22) & 0x7FFF;
            uint64_t v146 = (void *)(*(void *)a1[2] + 6592);
LABEL_194:
            *(void *)(*v146 - 8) += v145;
            break;
          default:
            break;
        }
        --v143;
      }
      while (v143);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    int v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0xE9:
            int v10 = *(void **)a1[2];
            uint64_t v11 = *(_WORD *)(a1[3] + 30) & 0x1FFF;
            uint64_t v12 = (char *)v10[797];
            unint64_t v13 = v10[798];
            if ((unint64_t)v12 >= v13)
            {
              unint64_t v60 = (char *)v10[796];
              uint64_t v61 = (v12 - v60) >> 3;
              if ((unint64_t)(v61 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v62 = v13 - (void)v60;
              unint64_t v63 = (uint64_t)(v13 - (void)v60) >> 2;
              if (v63 <= v61 + 1) {
                unint64_t v63 = v61 + 1;
              }
              if (v62 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v64 = v63;
              }
              if (v64)
              {
                unint64_t v65 = (char *)sub_5714((uint64_t)(v10 + 798), v64);
                uint64_t v12 = (char *)v10[797];
                unint64_t v60 = (char *)v10[796];
              }
              else
              {
                unint64_t v65 = 0;
              }
              uint64_t v120 = &v65[8 * v61];
              *(void *)uint64_t v120 = v11;
              unint64_t v14 = v120 + 8;
              while (v12 != v60)
              {
                uint64_t v121 = *((void *)v12 - 1);
                v12 -= 8;
                *((void *)v120 - 1) = v121;
                v120 -= 8;
              }
              v10[796] = v120;
              v10[797] = v14;
              v10[798] = &v65[8 * v64];
              if (v60) {
                operator delete(v60);
              }
            }
            else
            {
              *(void *)uint64_t v12 = v11;
              unint64_t v14 = v12 + 8;
            }
            v10[797] = v14;
            break;
          case 0xEA:
            unint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_DWORD *)(a1[3] + 36) & 0x3FFFFLL;
            uint64_t v17 = (uint64_t *)v15[800];
            unint64_t v18 = v15[801];
            if ((unint64_t)v17 >= v18)
            {
              uint64_t v66 = (uint64_t *)v15[799];
              uint64_t v67 = v17 - v66;
              if ((unint64_t)(v67 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v68 = v18 - (void)v66;
              unint64_t v69 = (uint64_t)(v18 - (void)v66) >> 2;
              if (v69 <= v67 + 1) {
                unint64_t v69 = v67 + 1;
              }
              if (v68 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v70 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v70 = v69;
              }
              if (v70)
              {
                uint64_t v71 = (char *)sub_5714((uint64_t)(v15 + 801), v70);
                uint64_t v17 = (uint64_t *)v15[800];
                uint64_t v66 = (uint64_t *)v15[799];
              }
              else
              {
                uint64_t v71 = 0;
              }
              unint64_t v122 = (uint64_t *)&v71[8 * v67];
              *unint64_t v122 = v16;
              unint64_t v19 = v122 + 1;
              while (v17 != v66)
              {
                uint64_t v123 = *--v17;
                *--unint64_t v122 = v123;
              }
              v15[799] = v122;
              v15[800] = v19;
              v15[801] = &v71[8 * v70];
              if (v66) {
                operator delete(v66);
              }
            }
            else
            {
              uint64_t *v17 = v16;
              unint64_t v19 = v17 + 1;
            }
            v15[800] = v19;
            break;
          case 0xEB:
            uint64_t v20 = *(void **)a1[2];
            uint64_t v21 = *(_WORD *)(a1[3] + 28) & 0x1FFF;
            uint64_t v22 = (char *)v20[803];
            unint64_t v23 = v20[804];
            if ((unint64_t)v22 >= v23)
            {
              uint64_t v72 = (char *)v20[802];
              uint64_t v73 = (v22 - v72) >> 3;
              if ((unint64_t)(v73 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v74 = v23 - (void)v72;
              unint64_t v75 = (uint64_t)(v23 - (void)v72) >> 2;
              if (v75 <= v73 + 1) {
                unint64_t v75 = v73 + 1;
              }
              if (v74 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v76 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v76 = v75;
              }
              if (v76)
              {
                unint64_t v77 = (char *)sub_5714((uint64_t)(v20 + 804), v76);
                uint64_t v22 = (char *)v20[803];
                uint64_t v72 = (char *)v20[802];
              }
              else
              {
                unint64_t v77 = 0;
              }
              unint64_t v124 = &v77[8 * v73];
              *(void *)unint64_t v124 = v21;
              unint64_t v24 = v124 + 8;
              while (v22 != v72)
              {
                uint64_t v125 = *((void *)v22 - 1);
                v22 -= 8;
                *((void *)v124 - 1) = v125;
                v124 -= 8;
              }
              v20[802] = v124;
              v20[803] = v24;
              v20[804] = &v77[8 * v76];
              if (v72) {
                operator delete(v72);
              }
            }
            else
            {
              *(void *)uint64_t v22 = v21;
              unint64_t v24 = v22 + 8;
            }
            v20[803] = v24;
            break;
          case 0xEC:
            unint64_t v25 = *(void **)a1[2];
            unint64_t v26 = ((unint64_t)*(unsigned int *)(a1[3] + 32) >> 13) & 0x3FFFF;
            uint64_t v27 = (unint64_t *)v25[806];
            unint64_t v28 = v25[807];
            if ((unint64_t)v27 >= v28)
            {
              unint64_t v78 = (unint64_t *)v25[805];
              uint64_t v79 = v27 - v78;
              if ((unint64_t)(v79 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v80 = v28 - (void)v78;
              unint64_t v81 = (uint64_t)(v28 - (void)v78) >> 2;
              if (v81 <= v79 + 1) {
                unint64_t v81 = v79 + 1;
              }
              if (v80 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v82 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v82 = v81;
              }
              if (v82)
              {
                unint64_t v83 = (char *)sub_5714((uint64_t)(v25 + 807), v82);
                uint64_t v27 = (unint64_t *)v25[806];
                unint64_t v78 = (unint64_t *)v25[805];
              }
              else
              {
                unint64_t v83 = 0;
              }
              uint64_t v126 = (unint64_t *)&v83[8 * v79];
              unint64_t *v126 = v26;
              unint64_t v29 = v126 + 1;
              while (v27 != v78)
              {
                unint64_t v127 = *--v27;
                *--uint64_t v126 = v127;
              }
              v25[805] = v126;
              v25[806] = v29;
              v25[807] = &v83[8 * v82];
              if (v78) {
                operator delete(v78);
              }
            }
            else
            {
              *uint64_t v27 = v26;
              unint64_t v29 = v27 + 1;
            }
            v25[806] = v29;
            break;
          case 0xED:
            unint64_t v30 = *(void **)a1[2];
            uint64_t v31 = *(_DWORD *)(a1[3] + 32) & 0x1FFFLL;
            uint64_t v32 = (uint64_t *)v30[809];
            unint64_t v33 = v30[810];
            if ((unint64_t)v32 >= v33)
            {
              uint64_t v84 = (uint64_t *)v30[808];
              uint64_t v85 = v32 - v84;
              if ((unint64_t)(v85 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v86 = v33 - (void)v84;
              unint64_t v87 = (uint64_t)(v33 - (void)v84) >> 2;
              if (v87 <= v85 + 1) {
                unint64_t v87 = v85 + 1;
              }
              if (v86 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v88 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v88 = v87;
              }
              if (v88)
              {
                unint64_t v89 = (char *)sub_5714((uint64_t)(v30 + 810), v88);
                uint64_t v32 = (uint64_t *)v30[809];
                uint64_t v84 = (uint64_t *)v30[808];
              }
              else
              {
                unint64_t v89 = 0;
              }
              unint64_t v128 = (uint64_t *)&v89[8 * v85];
              *unint64_t v128 = v31;
              unint64_t v34 = v128 + 1;
              while (v32 != v84)
              {
                uint64_t v129 = *--v32;
                *--unint64_t v128 = v129;
              }
              v30[808] = v128;
              v30[809] = v34;
              v30[810] = &v89[8 * v88];
              if (v84) {
                operator delete(v84);
              }
            }
            else
            {
              *uint64_t v32 = v31;
              unint64_t v34 = v32 + 1;
            }
            v30[809] = v34;
            break;
          case 0xEE:
            unint64_t v35 = *(void **)a1[2];
            uint64_t v36 = *(_DWORD *)(a1[3] + 40) & 0x3FFFFLL;
            uint64_t v37 = (uint64_t *)v35[812];
            unint64_t v38 = v35[813];
            if ((unint64_t)v37 >= v38)
            {
              uint64_t v90 = (uint64_t *)v35[811];
              uint64_t v91 = v37 - v90;
              if ((unint64_t)(v91 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v92 = v38 - (void)v90;
              unint64_t v93 = (uint64_t)(v38 - (void)v90) >> 2;
              if (v93 <= v91 + 1) {
                unint64_t v93 = v91 + 1;
              }
              if (v92 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v94 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v94 = v93;
              }
              if (v94)
              {
                unint64_t v95 = (char *)sub_5714((uint64_t)(v35 + 813), v94);
                uint64_t v37 = (uint64_t *)v35[812];
                uint64_t v90 = (uint64_t *)v35[811];
              }
              else
              {
                unint64_t v95 = 0;
              }
              unint64_t v130 = (uint64_t *)&v95[8 * v91];
              *unint64_t v130 = v36;
              uint64_t v39 = v130 + 1;
              while (v37 != v90)
              {
                uint64_t v131 = *--v37;
                *--unint64_t v130 = v131;
              }
              v35[811] = v130;
              v35[812] = v39;
              v35[813] = &v95[8 * v94];
              if (v90) {
                operator delete(v90);
              }
            }
            else
            {
              uint64_t *v37 = v36;
              uint64_t v39 = v37 + 1;
            }
            v35[812] = v39;
            break;
          case 0xEF:
            unint64_t v40 = *(void **)a1[2];
            uint64_t v41 = *(_WORD *)(a1[3] + 24) & 0x3FFF;
            unint64_t v42 = (char *)v40[815];
            unint64_t v43 = v40[816];
            if ((unint64_t)v42 >= v43)
            {
              uint64_t v96 = (char *)v40[814];
              uint64_t v97 = (v42 - v96) >> 3;
              if ((unint64_t)(v97 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v98 = v43 - (void)v96;
              unint64_t v99 = (uint64_t)(v43 - (void)v96) >> 2;
              if (v99 <= v97 + 1) {
                unint64_t v99 = v97 + 1;
              }
              if (v98 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v100 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v100 = v99;
              }
              if (v100)
              {
                unint64_t v101 = (char *)sub_5714((uint64_t)(v40 + 816), v100);
                unint64_t v42 = (char *)v40[815];
                uint64_t v96 = (char *)v40[814];
              }
              else
              {
                unint64_t v101 = 0;
              }
              uint64_t v132 = &v101[8 * v97];
              *(void *)uint64_t v132 = v41;
              unint64_t v44 = v132 + 8;
              while (v42 != v96)
              {
                uint64_t v133 = *((void *)v42 - 1);
                v42 -= 8;
                *((void *)v132 - 1) = v133;
                v132 -= 8;
              }
              v40[814] = v132;
              v40[815] = v44;
              v40[816] = &v101[8 * v100];
              if (v96) {
                operator delete(v96);
              }
            }
            else
            {
              *(void *)unint64_t v42 = v41;
              unint64_t v44 = v42 + 8;
            }
            v40[815] = v44;
            break;
          case 0xF0:
            uint64_t v45 = *(void **)a1[2];
            uint64_t v46 = *(_WORD *)(a1[3] + 20) & 0x7FFF;
            uint64_t v47 = (char *)v45[818];
            unint64_t v48 = v45[819];
            if ((unint64_t)v47 >= v48)
            {
              uint64_t v102 = (char *)v45[817];
              uint64_t v103 = (v47 - v102) >> 3;
              if ((unint64_t)(v103 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v104 = v48 - (void)v102;
              unint64_t v105 = (uint64_t)(v48 - (void)v102) >> 2;
              if (v105 <= v103 + 1) {
                unint64_t v105 = v103 + 1;
              }
              if (v104 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v106 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v106 = v105;
              }
              if (v106)
              {
                unint64_t v107 = (char *)sub_5714((uint64_t)(v45 + 819), v106);
                uint64_t v47 = (char *)v45[818];
                uint64_t v102 = (char *)v45[817];
              }
              else
              {
                unint64_t v107 = 0;
              }
              unint64_t v134 = &v107[8 * v103];
              *(void *)unint64_t v134 = v46;
              uint64_t v49 = v134 + 8;
              while (v47 != v102)
              {
                uint64_t v135 = *((void *)v47 - 1);
                v47 -= 8;
                *((void *)v134 - 1) = v135;
                v134 -= 8;
              }
              v45[817] = v134;
              v45[818] = v49;
              v45[819] = &v107[8 * v106];
              if (v102) {
                operator delete(v102);
              }
            }
            else
            {
              *(void *)uint64_t v47 = v46;
              uint64_t v49 = v47 + 8;
            }
            v45[818] = v49;
            break;
          case 0xF1:
            unint64_t v50 = *(void **)a1[2];
            uint64_t v51 = *(_WORD *)(a1[3] + 26) & 0x3FFF;
            uint64_t v52 = (char *)v50[821];
            unint64_t v53 = v50[822];
            if ((unint64_t)v52 >= v53)
            {
              uint64_t v108 = (char *)v50[820];
              uint64_t v109 = (v52 - v108) >> 3;
              if ((unint64_t)(v109 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v110 = v53 - (void)v108;
              unint64_t v111 = (uint64_t)(v53 - (void)v108) >> 2;
              if (v111 <= v109 + 1) {
                unint64_t v111 = v109 + 1;
              }
              if (v110 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v112 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v112 = v111;
              }
              if (v112)
              {
                unint64_t v113 = (char *)sub_5714((uint64_t)(v50 + 822), v112);
                uint64_t v52 = (char *)v50[821];
                uint64_t v108 = (char *)v50[820];
              }
              else
              {
                unint64_t v113 = 0;
              }
              uint64_t v136 = &v113[8 * v109];
              *(void *)uint64_t v136 = v51;
              int v54 = v136 + 8;
              while (v52 != v108)
              {
                uint64_t v137 = *((void *)v52 - 1);
                v52 -= 8;
                *((void *)v136 - 1) = v137;
                v136 -= 8;
              }
              v50[820] = v136;
              v50[821] = v54;
              v50[822] = &v113[8 * v112];
              if (v108) {
                operator delete(v108);
              }
            }
            else
            {
              *(void *)uint64_t v52 = v51;
              int v54 = v52 + 8;
            }
            v50[821] = v54;
            break;
          case 0xF2:
            int v55 = *(void **)a1[2];
            uint64_t v56 = *(_WORD *)(a1[3] + 22) & 0x7FFF;
            uint64_t v57 = (char *)v55[824];
            unint64_t v58 = v55[825];
            if ((unint64_t)v57 >= v58)
            {
              uint64_t v114 = (char *)v55[823];
              uint64_t v115 = (v57 - v114) >> 3;
              if ((unint64_t)(v115 + 1) >> 61) {
LABEL_198:
              }
                sub_566C();
              unint64_t v116 = v58 - (void)v114;
              unint64_t v117 = (uint64_t)(v58 - (void)v114) >> 2;
              if (v117 <= v115 + 1) {
                unint64_t v117 = v115 + 1;
              }
              if (v116 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v118 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v118 = v117;
              }
              if (v118)
              {
                unint64_t v119 = (char *)sub_5714((uint64_t)(v55 + 825), v118);
                uint64_t v57 = (char *)v55[824];
                uint64_t v114 = (char *)v55[823];
              }
              else
              {
                unint64_t v119 = 0;
              }
              unint64_t v138 = &v119[8 * v115];
              *(void *)unint64_t v138 = v56;
              unint64_t v59 = v138 + 8;
              while (v57 != v114)
              {
                uint64_t v139 = *((void *)v57 - 1);
                v57 -= 8;
                *((void *)v138 - 1) = v139;
                v138 -= 8;
              }
              v55[823] = v138;
              v55[824] = v59;
              v55[825] = &v119[8 * v118];
              if (v114) {
                operator delete(v114);
              }
            }
            else
            {
              *(void *)uint64_t v57 = v56;
              unint64_t v59 = v57 + 8;
            }
            v55[824] = v59;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_F1928(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    unint64_t v147 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v146 = *v147;
    uint64_t v148 = (char *)v147[1] - (char *)*v147;
    if (v148)
    {
      unint64_t v149 = v148 >> 2;
      if (v149 <= 1) {
        unint64_t v149 = 1;
      }
      do
      {
        int v150 = *v146++;
        switch(v150)
        {
          case 'N':
            uint64_t v151 = *(unsigned __int16 *)(a1[3] + 34);
            unint64_t v152 = (void *)(*(void *)a1[2] + 2656);
            goto LABEL_194;
          case 'O':
            uint64_t v151 = *(unsigned __int16 *)(a1[3] + 30);
            unint64_t v152 = (void *)(*(void *)a1[2] + 2680);
            goto LABEL_194;
          case 'P':
            uint64_t v151 = *(_DWORD *)(a1[3] + 40) & 0x1FFFF;
            unint64_t v152 = (void *)(*(void *)a1[2] + 2704);
            goto LABEL_194;
          case 'Q':
            uint64_t v151 = *(unsigned __int16 *)(a1[3] + 36);
            unint64_t v152 = (void *)(*(void *)a1[2] + 2728);
            goto LABEL_194;
          case 'R':
            uint64_t v151 = *(unsigned __int16 *)(a1[3] + 32);
            unint64_t v152 = (void *)(*(void *)a1[2] + 2752);
            goto LABEL_194;
          case 'S':
            uint64_t v151 = *(_DWORD *)(a1[3] + 44) & 0x1FFFF;
            unint64_t v152 = (void *)(*(void *)a1[2] + 2776);
            goto LABEL_194;
          case 'T':
            uint64_t v151 = *(_WORD *)(a1[3] + 28) & 0x7FFF;
            unint64_t v152 = (void *)(*(void *)a1[2] + 2800);
            goto LABEL_194;
          case 'U':
            uint64_t v151 = *(_WORD *)(a1[3] + 26) & 0x7FFF;
            unint64_t v152 = (void *)(*(void *)a1[2] + 2824);
            goto LABEL_194;
          case 'V':
            uint64_t v151 = *(unsigned __int16 *)(a1[3] + 24);
            unint64_t v152 = (void *)(*(void *)a1[2] + 2848);
            goto LABEL_194;
          case 'W':
            uint64_t v151 = *(unsigned __int16 *)(a1[3] + 22);
            unint64_t v152 = (void *)(*(void *)a1[2] + 2872);
LABEL_194:
            *(void *)(*v152 - 8) += v151;
            break;
          default:
            break;
        }
        --v149;
      }
      while (v149);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    int v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 'N':
            uint64_t v10 = a1[2];
            uint64_t v11 = *(void **)v10;
            uint64_t v12 = *(unsigned __int16 *)(a1[3] + 34);
            unint64_t v13 = *(char **)(*(void *)v10 + 2656);
            unint64_t v14 = *(void *)(*(void *)v10 + 2664);
            if ((unint64_t)v13 >= v14)
            {
              uint64_t v66 = (char *)v11[331];
              uint64_t v67 = (v13 - v66) >> 3;
              if ((unint64_t)(v67 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v68 = v14 - (void)v66;
              unint64_t v69 = (uint64_t)(v14 - (void)v66) >> 2;
              if (v69 <= v67 + 1) {
                unint64_t v69 = v67 + 1;
              }
              if (v68 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v70 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v70 = v69;
              }
              if (v70)
              {
                uint64_t v71 = (char *)sub_5714((uint64_t)(v11 + 333), v70);
                unint64_t v13 = (char *)v11[332];
                uint64_t v66 = (char *)v11[331];
              }
              else
              {
                uint64_t v71 = 0;
              }
              uint64_t v126 = &v71[8 * v67];
              *(void *)uint64_t v126 = v12;
              unint64_t v15 = v126 + 8;
              while (v13 != v66)
              {
                uint64_t v127 = *((void *)v13 - 1);
                v13 -= 8;
                *((void *)v126 - 1) = v127;
                v126 -= 8;
              }
              v11[331] = v126;
              v11[332] = v15;
              v11[333] = &v71[8 * v70];
              if (v66) {
                operator delete(v66);
              }
            }
            else
            {
              *(void *)unint64_t v13 = v12;
              unint64_t v15 = v13 + 8;
            }
            v11[332] = v15;
            break;
          case 'O':
            uint64_t v16 = a1[2];
            uint64_t v17 = *(void **)v16;
            uint64_t v18 = *(unsigned __int16 *)(a1[3] + 30);
            unint64_t v19 = *(char **)(*(void *)v16 + 2680);
            unint64_t v20 = *(void *)(*(void *)v16 + 2688);
            if ((unint64_t)v19 >= v20)
            {
              uint64_t v72 = (char *)v17[334];
              uint64_t v73 = (v19 - v72) >> 3;
              if ((unint64_t)(v73 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v74 = v20 - (void)v72;
              unint64_t v75 = (uint64_t)(v20 - (void)v72) >> 2;
              if (v75 <= v73 + 1) {
                unint64_t v75 = v73 + 1;
              }
              if (v74 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v76 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v76 = v75;
              }
              if (v76)
              {
                unint64_t v77 = (char *)sub_5714((uint64_t)(v17 + 336), v76);
                unint64_t v19 = (char *)v17[335];
                uint64_t v72 = (char *)v17[334];
              }
              else
              {
                unint64_t v77 = 0;
              }
              unint64_t v128 = &v77[8 * v73];
              *(void *)unint64_t v128 = v18;
              uint64_t v21 = v128 + 8;
              while (v19 != v72)
              {
                uint64_t v129 = *((void *)v19 - 1);
                v19 -= 8;
                *((void *)v128 - 1) = v129;
                v128 -= 8;
              }
              v17[334] = v128;
              v17[335] = v21;
              v17[336] = &v77[8 * v76];
              if (v72) {
                operator delete(v72);
              }
            }
            else
            {
              *(void *)unint64_t v19 = v18;
              uint64_t v21 = v19 + 8;
            }
            v17[335] = v21;
            break;
          case 'P':
            uint64_t v22 = *(void **)a1[2];
            uint64_t v23 = *(_DWORD *)(a1[3] + 40) & 0x1FFFFLL;
            unint64_t v24 = (uint64_t *)v22[338];
            unint64_t v25 = v22[339];
            if ((unint64_t)v24 >= v25)
            {
              unint64_t v78 = (uint64_t *)v22[337];
              uint64_t v79 = v24 - v78;
              if ((unint64_t)(v79 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v80 = v25 - (void)v78;
              unint64_t v81 = (uint64_t)(v25 - (void)v78) >> 2;
              if (v81 <= v79 + 1) {
                unint64_t v81 = v79 + 1;
              }
              if (v80 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v82 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v82 = v81;
              }
              if (v82)
              {
                unint64_t v83 = (char *)sub_5714((uint64_t)(v22 + 339), v82);
                unint64_t v24 = (uint64_t *)v22[338];
                unint64_t v78 = (uint64_t *)v22[337];
              }
              else
              {
                unint64_t v83 = 0;
              }
              unint64_t v130 = (uint64_t *)&v83[8 * v79];
              *unint64_t v130 = v23;
              unint64_t v26 = v130 + 1;
              while (v24 != v78)
              {
                uint64_t v131 = *--v24;
                *--unint64_t v130 = v131;
              }
              v22[337] = v130;
              v22[338] = v26;
              v22[339] = &v83[8 * v82];
              if (v78) {
                operator delete(v78);
              }
            }
            else
            {
              uint64_t *v24 = v23;
              unint64_t v26 = v24 + 1;
            }
            v22[338] = v26;
            break;
          case 'Q':
            uint64_t v27 = a1[2];
            unint64_t v28 = *(void **)v27;
            uint64_t v29 = *(unsigned __int16 *)(a1[3] + 36);
            unint64_t v30 = *(char **)(*(void *)v27 + 2728);
            unint64_t v31 = *(void *)(*(void *)v27 + 2736);
            if ((unint64_t)v30 >= v31)
            {
              uint64_t v84 = (char *)v28[340];
              uint64_t v85 = (v30 - v84) >> 3;
              if ((unint64_t)(v85 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v86 = v31 - (void)v84;
              unint64_t v87 = (uint64_t)(v31 - (void)v84) >> 2;
              if (v87 <= v85 + 1) {
                unint64_t v87 = v85 + 1;
              }
              if (v86 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v88 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v88 = v87;
              }
              if (v88)
              {
                unint64_t v89 = (char *)sub_5714((uint64_t)(v28 + 342), v88);
                unint64_t v30 = (char *)v28[341];
                uint64_t v84 = (char *)v28[340];
              }
              else
              {
                unint64_t v89 = 0;
              }
              uint64_t v132 = &v89[8 * v85];
              *(void *)uint64_t v132 = v29;
              uint64_t v32 = v132 + 8;
              while (v30 != v84)
              {
                uint64_t v133 = *((void *)v30 - 1);
                v30 -= 8;
                *((void *)v132 - 1) = v133;
                v132 -= 8;
              }
              v28[340] = v132;
              v28[341] = v32;
              v28[342] = &v89[8 * v88];
              if (v84) {
                operator delete(v84);
              }
            }
            else
            {
              *(void *)unint64_t v30 = v29;
              uint64_t v32 = v30 + 8;
            }
            v28[341] = v32;
            break;
          case 'R':
            uint64_t v33 = a1[2];
            unint64_t v34 = *(void **)v33;
            uint64_t v35 = *(unsigned __int16 *)(a1[3] + 32);
            uint64_t v36 = *(char **)(*(void *)v33 + 2752);
            unint64_t v37 = *(void *)(*(void *)v33 + 2760);
            if ((unint64_t)v36 >= v37)
            {
              uint64_t v90 = (char *)v34[343];
              uint64_t v91 = (v36 - v90) >> 3;
              if ((unint64_t)(v91 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v92 = v37 - (void)v90;
              unint64_t v93 = (uint64_t)(v37 - (void)v90) >> 2;
              if (v93 <= v91 + 1) {
                unint64_t v93 = v91 + 1;
              }
              if (v92 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v94 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v94 = v93;
              }
              if (v94)
              {
                unint64_t v95 = (char *)sub_5714((uint64_t)(v34 + 345), v94);
                uint64_t v36 = (char *)v34[344];
                uint64_t v90 = (char *)v34[343];
              }
              else
              {
                unint64_t v95 = 0;
              }
              unint64_t v134 = &v95[8 * v91];
              *(void *)unint64_t v134 = v35;
              unint64_t v38 = v134 + 8;
              while (v36 != v90)
              {
                uint64_t v135 = *((void *)v36 - 1);
                v36 -= 8;
                *((void *)v134 - 1) = v135;
                v134 -= 8;
              }
              v34[343] = v134;
              v34[344] = v38;
              v34[345] = &v95[8 * v94];
              if (v90) {
                operator delete(v90);
              }
            }
            else
            {
              *(void *)uint64_t v36 = v35;
              unint64_t v38 = v36 + 8;
            }
            v34[344] = v38;
            break;
          case 'S':
            uint64_t v39 = *(void **)a1[2];
            uint64_t v40 = *(_DWORD *)(a1[3] + 44) & 0x1FFFFLL;
            uint64_t v41 = (uint64_t *)v39[347];
            unint64_t v42 = v39[348];
            if ((unint64_t)v41 >= v42)
            {
              uint64_t v96 = (uint64_t *)v39[346];
              uint64_t v97 = v41 - v96;
              if ((unint64_t)(v97 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v98 = v42 - (void)v96;
              unint64_t v99 = (uint64_t)(v42 - (void)v96) >> 2;
              if (v99 <= v97 + 1) {
                unint64_t v99 = v97 + 1;
              }
              if (v98 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v100 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v100 = v99;
              }
              if (v100)
              {
                unint64_t v101 = (char *)sub_5714((uint64_t)(v39 + 348), v100);
                uint64_t v41 = (uint64_t *)v39[347];
                uint64_t v96 = (uint64_t *)v39[346];
              }
              else
              {
                unint64_t v101 = 0;
              }
              uint64_t v136 = (uint64_t *)&v101[8 * v97];
              uint64_t *v136 = v40;
              unint64_t v43 = v136 + 1;
              while (v41 != v96)
              {
                uint64_t v137 = *--v41;
                *--uint64_t v136 = v137;
              }
              v39[346] = v136;
              v39[347] = v43;
              v39[348] = &v101[8 * v100];
              if (v96) {
                operator delete(v96);
              }
            }
            else
            {
              *uint64_t v41 = v40;
              unint64_t v43 = v41 + 1;
            }
            v39[347] = v43;
            break;
          case 'T':
            unint64_t v44 = *(void **)a1[2];
            uint64_t v45 = *(_WORD *)(a1[3] + 28) & 0x7FFF;
            uint64_t v46 = (char *)v44[350];
            unint64_t v47 = v44[351];
            if ((unint64_t)v46 >= v47)
            {
              uint64_t v102 = (char *)v44[349];
              uint64_t v103 = (v46 - v102) >> 3;
              if ((unint64_t)(v103 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v104 = v47 - (void)v102;
              unint64_t v105 = (uint64_t)(v47 - (void)v102) >> 2;
              if (v105 <= v103 + 1) {
                unint64_t v105 = v103 + 1;
              }
              if (v104 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v106 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v106 = v105;
              }
              if (v106)
              {
                unint64_t v107 = (char *)sub_5714((uint64_t)(v44 + 351), v106);
                uint64_t v46 = (char *)v44[350];
                uint64_t v102 = (char *)v44[349];
              }
              else
              {
                unint64_t v107 = 0;
              }
              unint64_t v138 = &v107[8 * v103];
              *(void *)unint64_t v138 = v45;
              unint64_t v48 = v138 + 8;
              while (v46 != v102)
              {
                uint64_t v139 = *((void *)v46 - 1);
                v46 -= 8;
                *((void *)v138 - 1) = v139;
                v138 -= 8;
              }
              v44[349] = v138;
              v44[350] = v48;
              v44[351] = &v107[8 * v106];
              if (v102) {
                operator delete(v102);
              }
            }
            else
            {
              *(void *)uint64_t v46 = v45;
              unint64_t v48 = v46 + 8;
            }
            v44[350] = v48;
            break;
          case 'U':
            uint64_t v49 = *(void **)a1[2];
            uint64_t v50 = *(_WORD *)(a1[3] + 26) & 0x7FFF;
            uint64_t v51 = (char *)v49[353];
            unint64_t v52 = v49[354];
            if ((unint64_t)v51 >= v52)
            {
              uint64_t v108 = (char *)v49[352];
              uint64_t v109 = (v51 - v108) >> 3;
              if ((unint64_t)(v109 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v110 = v52 - (void)v108;
              unint64_t v111 = (uint64_t)(v52 - (void)v108) >> 2;
              if (v111 <= v109 + 1) {
                unint64_t v111 = v109 + 1;
              }
              if (v110 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v112 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v112 = v111;
              }
              if (v112)
              {
                unint64_t v113 = (char *)sub_5714((uint64_t)(v49 + 354), v112);
                uint64_t v51 = (char *)v49[353];
                uint64_t v108 = (char *)v49[352];
              }
              else
              {
                unint64_t v113 = 0;
              }
              unint64_t v140 = &v113[8 * v109];
              *(void *)unint64_t v140 = v50;
              unint64_t v53 = v140 + 8;
              while (v51 != v108)
              {
                uint64_t v141 = *((void *)v51 - 1);
                v51 -= 8;
                *((void *)v140 - 1) = v141;
                v140 -= 8;
              }
              v49[352] = v140;
              v49[353] = v53;
              v49[354] = &v113[8 * v112];
              if (v108) {
                operator delete(v108);
              }
            }
            else
            {
              *(void *)uint64_t v51 = v50;
              unint64_t v53 = v51 + 8;
            }
            v49[353] = v53;
            break;
          case 'V':
            uint64_t v54 = a1[2];
            int v55 = *(void **)v54;
            uint64_t v56 = *(unsigned __int16 *)(a1[3] + 24);
            uint64_t v57 = *(char **)(*(void *)v54 + 2848);
            unint64_t v58 = *(void *)(*(void *)v54 + 2856);
            if ((unint64_t)v57 >= v58)
            {
              uint64_t v114 = (char *)v55[355];
              uint64_t v115 = (v57 - v114) >> 3;
              if ((unint64_t)(v115 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v116 = v58 - (void)v114;
              unint64_t v117 = (uint64_t)(v58 - (void)v114) >> 2;
              if (v117 <= v115 + 1) {
                unint64_t v117 = v115 + 1;
              }
              if (v116 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v118 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v118 = v117;
              }
              if (v118)
              {
                unint64_t v119 = (char *)sub_5714((uint64_t)(v55 + 357), v118);
                uint64_t v57 = (char *)v55[356];
                uint64_t v114 = (char *)v55[355];
              }
              else
              {
                unint64_t v119 = 0;
              }
              uint64_t v142 = &v119[8 * v115];
              *(void *)uint64_t v142 = v56;
              unint64_t v59 = v142 + 8;
              while (v57 != v114)
              {
                uint64_t v143 = *((void *)v57 - 1);
                v57 -= 8;
                *((void *)v142 - 1) = v143;
                v142 -= 8;
              }
              v55[355] = v142;
              v55[356] = v59;
              v55[357] = &v119[8 * v118];
              if (v114) {
                operator delete(v114);
              }
            }
            else
            {
              *(void *)uint64_t v57 = v56;
              unint64_t v59 = v57 + 8;
            }
            v55[356] = v59;
            break;
          case 'W':
            uint64_t v60 = a1[2];
            uint64_t v61 = *(void **)v60;
            uint64_t v62 = *(unsigned __int16 *)(a1[3] + 22);
            unint64_t v63 = *(char **)(*(void *)v60 + 2872);
            unint64_t v64 = *(void *)(*(void *)v60 + 2880);
            if ((unint64_t)v63 >= v64)
            {
              uint64_t v120 = (char *)v61[358];
              uint64_t v121 = (v63 - v120) >> 3;
              if ((unint64_t)(v121 + 1) >> 61) {
LABEL_198:
              }
                sub_566C();
              unint64_t v122 = v64 - (void)v120;
              unint64_t v123 = (uint64_t)(v64 - (void)v120) >> 2;
              if (v123 <= v121 + 1) {
                unint64_t v123 = v121 + 1;
              }
              if (v122 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v124 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v124 = v123;
              }
              if (v124)
              {
                uint64_t v125 = (char *)sub_5714((uint64_t)(v61 + 360), v124);
                unint64_t v63 = (char *)v61[359];
                uint64_t v120 = (char *)v61[358];
              }
              else
              {
                uint64_t v125 = 0;
              }
              int v144 = &v125[8 * v121];
              *(void *)int v144 = v62;
              unint64_t v65 = v144 + 8;
              while (v63 != v120)
              {
                uint64_t v145 = *((void *)v63 - 1);
                v63 -= 8;
                *((void *)v144 - 1) = v145;
                v144 -= 8;
              }
              v61[358] = v144;
              v61[359] = v65;
              v61[360] = &v125[8 * v124];
              if (v120) {
                operator delete(v120);
              }
            }
            else
            {
              *(void *)unint64_t v63 = v62;
              unint64_t v65 = v63 + 8;
            }
            v61[359] = v65;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_F2308(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    unint64_t v193 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    unint64_t v192 = *v193;
    uint64_t v194 = (char *)v193[1] - (char *)*v193;
    if (v194)
    {
      unint64_t v195 = v194 >> 2;
      if (v195 <= 1) {
        unint64_t v195 = 1;
      }
      do
      {
        int v196 = *v192++;
        switch(v196)
        {
          case 'e':
            unint64_t v197 = *(_WORD *)(a1[3] + 44) & 0x7FFF;
            unint64_t v198 = (void *)(*(void *)a1[2] + 3208);
            goto LABEL_266;
          case 'f':
            unint64_t v197 = *(_WORD *)(a1[3] + 42) & 0x7FFF;
            unint64_t v198 = (void *)(*(void *)a1[2] + 3232);
            goto LABEL_266;
          case 'g':
            unint64_t v197 = *(_WORD *)(a1[3] + 22) & 0x7FFF;
            unint64_t v198 = (void *)(*(void *)a1[2] + 3256);
            goto LABEL_266;
          case 'h':
            unint64_t v197 = *(_WORD *)(a1[3] + 30) & 0x7FFF;
            unint64_t v198 = (void *)(*(void *)a1[2] + 3280);
            goto LABEL_266;
          case 'i':
            unint64_t v197 = *(_WORD *)(a1[3] + 24) & 0x7FFF;
            unint64_t v198 = (void *)(*(void *)a1[2] + 3304);
            goto LABEL_266;
          case 'j':
            unint64_t v197 = *(_WORD *)(a1[3] + 32) & 0x7FFF;
            unint64_t v198 = (void *)(*(void *)a1[2] + 3328);
            goto LABEL_266;
          case 'k':
            unint64_t v197 = *(_WORD *)(a1[3] + 26) & 0x7FFF;
            unint64_t v198 = (void *)(*(void *)a1[2] + 3352);
            goto LABEL_266;
          case 'l':
            unint64_t v197 = *(_WORD *)(a1[3] + 38) & 0x7FFF;
            unint64_t v198 = (void *)(*(void *)a1[2] + 3376);
            goto LABEL_266;
          case 'm':
            unint64_t v197 = *(_WORD *)(a1[3] + 34) & 0x7FFF;
            unint64_t v198 = (void *)(*(void *)a1[2] + 3400);
            goto LABEL_266;
          case 'n':
            unint64_t v197 = *(_WORD *)(a1[3] + 28) & 0x7FFF;
            unint64_t v198 = (void *)(*(void *)a1[2] + 3424);
            goto LABEL_266;
          case 'o':
            unint64_t v197 = *(_WORD *)(a1[3] + 40) & 0x7FFF;
            unint64_t v198 = (void *)(*(void *)a1[2] + 3448);
            goto LABEL_266;
          case 'p':
            unint64_t v197 = *(_WORD *)(a1[3] + 36) & 0x7FFF;
            unint64_t v198 = (void *)(*(void *)a1[2] + 3472);
            goto LABEL_266;
          case 'q':
            unint64_t v197 = ((unint64_t)*(unsigned __int16 *)(a1[3] + 20) >> 1) & 0x3FFF;
            unint64_t v198 = (void *)(*(void *)a1[2] + 3496);
            goto LABEL_266;
          case 'r':
            unint64_t v197 = *(_WORD *)(a1[3] + 46) & 0x7FFF;
            unint64_t v198 = (void *)(*(void *)a1[2] + 3520);
LABEL_266:
            *(void *)(*v198 - 8) += v197;
            break;
          default:
            break;
        }
        --v195;
      }
      while (v195);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    int v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 'e':
            uint64_t v10 = *(void **)a1[2];
            uint64_t v11 = *(_WORD *)(a1[3] + 44) & 0x7FFF;
            uint64_t v12 = (char *)v10[401];
            unint64_t v13 = v10[402];
            if ((unint64_t)v12 >= v13)
            {
              unint64_t v80 = (char *)v10[400];
              uint64_t v81 = (v12 - v80) >> 3;
              if ((unint64_t)(v81 + 1) >> 61) {
                goto LABEL_270;
              }
              unint64_t v82 = v13 - (void)v80;
              unint64_t v83 = (uint64_t)(v13 - (void)v80) >> 2;
              if (v83 <= v81 + 1) {
                unint64_t v83 = v81 + 1;
              }
              if (v82 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v84 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v84 = v83;
              }
              if (v84)
              {
                uint64_t v85 = (char *)sub_5714((uint64_t)(v10 + 402), v84);
                uint64_t v12 = (char *)v10[401];
                unint64_t v80 = (char *)v10[400];
              }
              else
              {
                uint64_t v85 = 0;
              }
              uint64_t v164 = &v85[8 * v81];
              *(void *)uint64_t v164 = v11;
              unint64_t v14 = v164 + 8;
              while (v12 != v80)
              {
                uint64_t v165 = *((void *)v12 - 1);
                v12 -= 8;
                *((void *)v164 - 1) = v165;
                v164 -= 8;
              }
              v10[400] = v164;
              v10[401] = v14;
              v10[402] = &v85[8 * v84];
              if (v80) {
                operator delete(v80);
              }
            }
            else
            {
              *(void *)uint64_t v12 = v11;
              unint64_t v14 = v12 + 8;
            }
            v10[401] = v14;
            break;
          case 'f':
            unint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_WORD *)(a1[3] + 42) & 0x7FFF;
            uint64_t v17 = (char *)v15[404];
            unint64_t v18 = v15[405];
            if ((unint64_t)v17 >= v18)
            {
              unint64_t v86 = (char *)v15[403];
              uint64_t v87 = (v17 - v86) >> 3;
              if ((unint64_t)(v87 + 1) >> 61) {
                goto LABEL_270;
              }
              unint64_t v88 = v18 - (void)v86;
              unint64_t v89 = (uint64_t)(v18 - (void)v86) >> 2;
              if (v89 <= v87 + 1) {
                unint64_t v89 = v87 + 1;
              }
              if (v88 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v90 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v90 = v89;
              }
              if (v90)
              {
                uint64_t v91 = (char *)sub_5714((uint64_t)(v15 + 405), v90);
                uint64_t v17 = (char *)v15[404];
                unint64_t v86 = (char *)v15[403];
              }
              else
              {
                uint64_t v91 = 0;
              }
              uint64_t v166 = &v91[8 * v87];
              *(void *)uint64_t v166 = v16;
              unint64_t v19 = v166 + 8;
              while (v17 != v86)
              {
                uint64_t v167 = *((void *)v17 - 1);
                v17 -= 8;
                *((void *)v166 - 1) = v167;
                v166 -= 8;
              }
              v15[403] = v166;
              v15[404] = v19;
              v15[405] = &v91[8 * v90];
              if (v86) {
                operator delete(v86);
              }
            }
            else
            {
              *(void *)uint64_t v17 = v16;
              unint64_t v19 = v17 + 8;
            }
            v15[404] = v19;
            break;
          case 'g':
            unint64_t v20 = *(void **)a1[2];
            uint64_t v21 = *(_WORD *)(a1[3] + 22) & 0x7FFF;
            uint64_t v22 = (char *)v20[407];
            unint64_t v23 = v20[408];
            if ((unint64_t)v22 >= v23)
            {
              unint64_t v92 = (char *)v20[406];
              uint64_t v93 = (v22 - v92) >> 3;
              if ((unint64_t)(v93 + 1) >> 61) {
                goto LABEL_270;
              }
              unint64_t v94 = v23 - (void)v92;
              unint64_t v95 = (uint64_t)(v23 - (void)v92) >> 2;
              if (v95 <= v93 + 1) {
                unint64_t v95 = v93 + 1;
              }
              if (v94 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v96 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v96 = v95;
              }
              if (v96)
              {
                uint64_t v97 = (char *)sub_5714((uint64_t)(v20 + 408), v96);
                uint64_t v22 = (char *)v20[407];
                unint64_t v92 = (char *)v20[406];
              }
              else
              {
                uint64_t v97 = 0;
              }
              unint64_t v168 = &v97[8 * v93];
              *(void *)unint64_t v168 = v21;
              unint64_t v24 = v168 + 8;
              while (v22 != v92)
              {
                uint64_t v169 = *((void *)v22 - 1);
                v22 -= 8;
                *((void *)v168 - 1) = v169;
                v168 -= 8;
              }
              v20[406] = v168;
              v20[407] = v24;
              v20[408] = &v97[8 * v96];
              if (v92) {
                operator delete(v92);
              }
            }
            else
            {
              *(void *)uint64_t v22 = v21;
              unint64_t v24 = v22 + 8;
            }
            v20[407] = v24;
            break;
          case 'h':
            unint64_t v25 = *(void **)a1[2];
            uint64_t v26 = *(_WORD *)(a1[3] + 30) & 0x7FFF;
            uint64_t v27 = (char *)v25[410];
            unint64_t v28 = v25[411];
            if ((unint64_t)v27 >= v28)
            {
              unint64_t v98 = (char *)v25[409];
              uint64_t v99 = (v27 - v98) >> 3;
              if ((unint64_t)(v99 + 1) >> 61) {
                goto LABEL_270;
              }
              unint64_t v100 = v28 - (void)v98;
              unint64_t v101 = (uint64_t)(v28 - (void)v98) >> 2;
              if (v101 <= v99 + 1) {
                unint64_t v101 = v99 + 1;
              }
              if (v100 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v102 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v102 = v101;
              }
              if (v102)
              {
                uint64_t v103 = (char *)sub_5714((uint64_t)(v25 + 411), v102);
                uint64_t v27 = (char *)v25[410];
                unint64_t v98 = (char *)v25[409];
              }
              else
              {
                uint64_t v103 = 0;
              }
              uint64_t v170 = &v103[8 * v99];
              *(void *)uint64_t v170 = v26;
              uint64_t v29 = v170 + 8;
              while (v27 != v98)
              {
                uint64_t v171 = *((void *)v27 - 1);
                v27 -= 8;
                *((void *)v170 - 1) = v171;
                v170 -= 8;
              }
              v25[409] = v170;
              v25[410] = v29;
              v25[411] = &v103[8 * v102];
              if (v98) {
                operator delete(v98);
              }
            }
            else
            {
              *(void *)uint64_t v27 = v26;
              uint64_t v29 = v27 + 8;
            }
            v25[410] = v29;
            break;
          case 'i':
            unint64_t v30 = *(void **)a1[2];
            uint64_t v31 = *(_WORD *)(a1[3] + 24) & 0x7FFF;
            uint64_t v32 = (char *)v30[413];
            unint64_t v33 = v30[414];
            if ((unint64_t)v32 >= v33)
            {
              unint64_t v104 = (char *)v30[412];
              uint64_t v105 = (v32 - v104) >> 3;
              if ((unint64_t)(v105 + 1) >> 61) {
                goto LABEL_270;
              }
              unint64_t v106 = v33 - (void)v104;
              unint64_t v107 = (uint64_t)(v33 - (void)v104) >> 2;
              if (v107 <= v105 + 1) {
                unint64_t v107 = v105 + 1;
              }
              if (v106 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v108 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v108 = v107;
              }
              if (v108)
              {
                uint64_t v109 = (char *)sub_5714((uint64_t)(v30 + 414), v108);
                uint64_t v32 = (char *)v30[413];
                unint64_t v104 = (char *)v30[412];
              }
              else
              {
                uint64_t v109 = 0;
              }
              uint64_t v172 = &v109[8 * v105];
              *(void *)uint64_t v172 = v31;
              unint64_t v34 = v172 + 8;
              while (v32 != v104)
              {
                uint64_t v173 = *((void *)v32 - 1);
                v32 -= 8;
                *((void *)v172 - 1) = v173;
                v172 -= 8;
              }
              v30[412] = v172;
              v30[413] = v34;
              v30[414] = &v109[8 * v108];
              if (v104) {
                operator delete(v104);
              }
            }
            else
            {
              *(void *)uint64_t v32 = v31;
              unint64_t v34 = v32 + 8;
            }
            v30[413] = v34;
            break;
          case 'j':
            uint64_t v35 = *(void **)a1[2];
            uint64_t v36 = *(_WORD *)(a1[3] + 32) & 0x7FFF;
            unint64_t v37 = (char *)v35[416];
            unint64_t v38 = v35[417];
            if ((unint64_t)v37 >= v38)
            {
              unint64_t v110 = (char *)v35[415];
              uint64_t v111 = (v37 - v110) >> 3;
              if ((unint64_t)(v111 + 1) >> 61) {
                goto LABEL_270;
              }
              unint64_t v112 = v38 - (void)v110;
              unint64_t v113 = (uint64_t)(v38 - (void)v110) >> 2;
              if (v113 <= v111 + 1) {
                unint64_t v113 = v111 + 1;
              }
              if (v112 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v114 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v114 = v113;
              }
              if (v114)
              {
                uint64_t v115 = (char *)sub_5714((uint64_t)(v35 + 417), v114);
                unint64_t v37 = (char *)v35[416];
                unint64_t v110 = (char *)v35[415];
              }
              else
              {
                uint64_t v115 = 0;
              }
              unint64_t v174 = &v115[8 * v111];
              *(void *)unint64_t v174 = v36;
              uint64_t v39 = v174 + 8;
              while (v37 != v110)
              {
                uint64_t v175 = *((void *)v37 - 1);
                v37 -= 8;
                *((void *)v174 - 1) = v175;
                v174 -= 8;
              }
              v35[415] = v174;
              v35[416] = v39;
              v35[417] = &v115[8 * v114];
              if (v110) {
                operator delete(v110);
              }
            }
            else
            {
              *(void *)unint64_t v37 = v36;
              uint64_t v39 = v37 + 8;
            }
            v35[416] = v39;
            break;
          case 'k':
            uint64_t v40 = *(void **)a1[2];
            uint64_t v41 = *(_WORD *)(a1[3] + 26) & 0x7FFF;
            unint64_t v42 = (char *)v40[419];
            unint64_t v43 = v40[420];
            if ((unint64_t)v42 >= v43)
            {
              unint64_t v116 = (char *)v40[418];
              uint64_t v117 = (v42 - v116) >> 3;
              if ((unint64_t)(v117 + 1) >> 61) {
                goto LABEL_270;
              }
              unint64_t v118 = v43 - (void)v116;
              unint64_t v119 = (uint64_t)(v43 - (void)v116) >> 2;
              if (v119 <= v117 + 1) {
                unint64_t v119 = v117 + 1;
              }
              if (v118 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v120 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v120 = v119;
              }
              if (v120)
              {
                uint64_t v121 = (char *)sub_5714((uint64_t)(v40 + 420), v120);
                unint64_t v42 = (char *)v40[419];
                unint64_t v116 = (char *)v40[418];
              }
              else
              {
                uint64_t v121 = 0;
              }
              uint64_t v176 = &v121[8 * v117];
              *(void *)uint64_t v176 = v41;
              unint64_t v44 = v176 + 8;
              while (v42 != v116)
              {
                uint64_t v177 = *((void *)v42 - 1);
                v42 -= 8;
                *((void *)v176 - 1) = v177;
                v176 -= 8;
              }
              v40[418] = v176;
              v40[419] = v44;
              v40[420] = &v121[8 * v120];
              if (v116) {
                operator delete(v116);
              }
            }
            else
            {
              *(void *)unint64_t v42 = v41;
              unint64_t v44 = v42 + 8;
            }
            v40[419] = v44;
            break;
          case 'l':
            uint64_t v45 = *(void **)a1[2];
            uint64_t v46 = *(_WORD *)(a1[3] + 38) & 0x7FFF;
            unint64_t v47 = (char *)v45[422];
            unint64_t v48 = v45[423];
            if ((unint64_t)v47 >= v48)
            {
              unint64_t v122 = (char *)v45[421];
              uint64_t v123 = (v47 - v122) >> 3;
              if ((unint64_t)(v123 + 1) >> 61) {
                goto LABEL_270;
              }
              unint64_t v124 = v48 - (void)v122;
              unint64_t v125 = (uint64_t)(v48 - (void)v122) >> 2;
              if (v125 <= v123 + 1) {
                unint64_t v125 = v123 + 1;
              }
              if (v124 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v126 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v126 = v125;
              }
              if (v126)
              {
                uint64_t v127 = (char *)sub_5714((uint64_t)(v45 + 423), v126);
                unint64_t v47 = (char *)v45[422];
                unint64_t v122 = (char *)v45[421];
              }
              else
              {
                uint64_t v127 = 0;
              }
              uint64_t v178 = &v127[8 * v123];
              *(void *)uint64_t v178 = v46;
              uint64_t v49 = v178 + 8;
              while (v47 != v122)
              {
                uint64_t v179 = *((void *)v47 - 1);
                v47 -= 8;
                *((void *)v178 - 1) = v179;
                v178 -= 8;
              }
              v45[421] = v178;
              v45[422] = v49;
              v45[423] = &v127[8 * v126];
              if (v122) {
                operator delete(v122);
              }
            }
            else
            {
              *(void *)unint64_t v47 = v46;
              uint64_t v49 = v47 + 8;
            }
            v45[422] = v49;
            break;
          case 'm':
            uint64_t v50 = *(void **)a1[2];
            uint64_t v51 = *(_WORD *)(a1[3] + 34) & 0x7FFF;
            unint64_t v52 = (char *)v50[425];
            unint64_t v53 = v50[426];
            if ((unint64_t)v52 >= v53)
            {
              unint64_t v128 = (char *)v50[424];
              uint64_t v129 = (v52 - v128) >> 3;
              if ((unint64_t)(v129 + 1) >> 61) {
                goto LABEL_270;
              }
              unint64_t v130 = v53 - (void)v128;
              unint64_t v131 = (uint64_t)(v53 - (void)v128) >> 2;
              if (v131 <= v129 + 1) {
                unint64_t v131 = v129 + 1;
              }
              if (v130 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v132 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v132 = v131;
              }
              if (v132)
              {
                uint64_t v133 = (char *)sub_5714((uint64_t)(v50 + 426), v132);
                unint64_t v52 = (char *)v50[425];
                unint64_t v128 = (char *)v50[424];
              }
              else
              {
                uint64_t v133 = 0;
              }
              unint64_t v180 = &v133[8 * v129];
              *(void *)unint64_t v180 = v51;
              uint64_t v54 = v180 + 8;
              while (v52 != v128)
              {
                uint64_t v181 = *((void *)v52 - 1);
                v52 -= 8;
                *((void *)v180 - 1) = v181;
                v180 -= 8;
              }
              v50[424] = v180;
              v50[425] = v54;
              v50[426] = &v133[8 * v132];
              if (v128) {
                operator delete(v128);
              }
            }
            else
            {
              *(void *)unint64_t v52 = v51;
              uint64_t v54 = v52 + 8;
            }
            v50[425] = v54;
            break;
          case 'n':
            int v55 = *(void **)a1[2];
            uint64_t v56 = *(_WORD *)(a1[3] + 28) & 0x7FFF;
            uint64_t v57 = (char *)v55[428];
            unint64_t v58 = v55[429];
            if ((unint64_t)v57 >= v58)
            {
              unint64_t v134 = (char *)v55[427];
              uint64_t v135 = (v57 - v134) >> 3;
              if ((unint64_t)(v135 + 1) >> 61) {
                goto LABEL_270;
              }
              unint64_t v136 = v58 - (void)v134;
              unint64_t v137 = (uint64_t)(v58 - (void)v134) >> 2;
              if (v137 <= v135 + 1) {
                unint64_t v137 = v135 + 1;
              }
              if (v136 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v138 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v138 = v137;
              }
              if (v138)
              {
                uint64_t v139 = (char *)sub_5714((uint64_t)(v55 + 429), v138);
                uint64_t v57 = (char *)v55[428];
                unint64_t v134 = (char *)v55[427];
              }
              else
              {
                uint64_t v139 = 0;
              }
              uint64_t v182 = &v139[8 * v135];
              *(void *)uint64_t v182 = v56;
              unint64_t v59 = v182 + 8;
              while (v57 != v134)
              {
                uint64_t v183 = *((void *)v57 - 1);
                v57 -= 8;
                *((void *)v182 - 1) = v183;
                v182 -= 8;
              }
              v55[427] = v182;
              v55[428] = v59;
              v55[429] = &v139[8 * v138];
              if (v134) {
                operator delete(v134);
              }
            }
            else
            {
              *(void *)uint64_t v57 = v56;
              unint64_t v59 = v57 + 8;
            }
            v55[428] = v59;
            break;
          case 'o':
            uint64_t v60 = *(void **)a1[2];
            uint64_t v61 = *(_WORD *)(a1[3] + 40) & 0x7FFF;
            uint64_t v62 = (char *)v60[431];
            unint64_t v63 = v60[432];
            if ((unint64_t)v62 >= v63)
            {
              unint64_t v140 = (char *)v60[430];
              uint64_t v141 = (v62 - v140) >> 3;
              if ((unint64_t)(v141 + 1) >> 61) {
                goto LABEL_270;
              }
              unint64_t v142 = v63 - (void)v140;
              unint64_t v143 = (uint64_t)(v63 - (void)v140) >> 2;
              if (v143 <= v141 + 1) {
                unint64_t v143 = v141 + 1;
              }
              if (v142 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v144 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v144 = v143;
              }
              if (v144)
              {
                uint64_t v145 = (char *)sub_5714((uint64_t)(v60 + 432), v144);
                uint64_t v62 = (char *)v60[431];
                unint64_t v140 = (char *)v60[430];
              }
              else
              {
                uint64_t v145 = 0;
              }
              uint64_t v184 = &v145[8 * v141];
              *(void *)uint64_t v184 = v61;
              unint64_t v64 = v184 + 8;
              while (v62 != v140)
              {
                uint64_t v185 = *((void *)v62 - 1);
                v62 -= 8;
                *((void *)v184 - 1) = v185;
                v184 -= 8;
              }
              v60[430] = v184;
              v60[431] = v64;
              v60[432] = &v145[8 * v144];
              if (v140) {
                operator delete(v140);
              }
            }
            else
            {
              *(void *)uint64_t v62 = v61;
              unint64_t v64 = v62 + 8;
            }
            v60[431] = v64;
            break;
          case 'p':
            unint64_t v65 = *(void **)a1[2];
            uint64_t v66 = *(_WORD *)(a1[3] + 36) & 0x7FFF;
            uint64_t v67 = (char *)v65[434];
            unint64_t v68 = v65[435];
            if ((unint64_t)v67 >= v68)
            {
              uint64_t v146 = (char *)v65[433];
              uint64_t v147 = (v67 - v146) >> 3;
              if ((unint64_t)(v147 + 1) >> 61) {
                goto LABEL_270;
              }
              unint64_t v148 = v68 - (void)v146;
              unint64_t v149 = (uint64_t)(v68 - (void)v146) >> 2;
              if (v149 <= v147 + 1) {
                unint64_t v149 = v147 + 1;
              }
              if (v148 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v150 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v150 = v149;
              }
              if (v150)
              {
                uint64_t v151 = (char *)sub_5714((uint64_t)(v65 + 435), v150);
                uint64_t v67 = (char *)v65[434];
                uint64_t v146 = (char *)v65[433];
              }
              else
              {
                uint64_t v151 = 0;
              }
              unint64_t v186 = &v151[8 * v147];
              *(void *)unint64_t v186 = v66;
              unint64_t v69 = v186 + 8;
              while (v67 != v146)
              {
                uint64_t v187 = *((void *)v67 - 1);
                v67 -= 8;
                *((void *)v186 - 1) = v187;
                v186 -= 8;
              }
              v65[433] = v186;
              v65[434] = v69;
              v65[435] = &v151[8 * v150];
              if (v146) {
                operator delete(v146);
              }
            }
            else
            {
              *(void *)uint64_t v67 = v66;
              unint64_t v69 = v67 + 8;
            }
            v65[434] = v69;
            break;
          case 'q':
            unint64_t v70 = *(void **)a1[2];
            unint64_t v71 = ((unint64_t)*(unsigned __int16 *)(a1[3] + 20) >> 1) & 0x3FFF;
            uint64_t v72 = (unint64_t *)v70[437];
            unint64_t v73 = v70[438];
            if ((unint64_t)v72 >= v73)
            {
              unint64_t v152 = (unint64_t *)v70[436];
              uint64_t v153 = v72 - v152;
              if ((unint64_t)(v153 + 1) >> 61) {
                goto LABEL_270;
              }
              unint64_t v154 = v73 - (void)v152;
              unint64_t v155 = (uint64_t)(v73 - (void)v152) >> 2;
              if (v155 <= v153 + 1) {
                unint64_t v155 = v153 + 1;
              }
              if (v154 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v156 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v156 = v155;
              }
              if (v156)
              {
                unint64_t v157 = (char *)sub_5714((uint64_t)(v70 + 438), v156);
                uint64_t v72 = (unint64_t *)v70[437];
                unint64_t v152 = (unint64_t *)v70[436];
              }
              else
              {
                unint64_t v157 = 0;
              }
              uint64_t v188 = (unint64_t *)&v157[8 * v153];
              *uint64_t v188 = v71;
              unint64_t v74 = v188 + 1;
              while (v72 != v152)
              {
                unint64_t v189 = *--v72;
                *--uint64_t v188 = v189;
              }
              v70[436] = v188;
              v70[437] = v74;
              v70[438] = &v157[8 * v156];
              if (v152) {
                operator delete(v152);
              }
            }
            else
            {
              unint64_t *v72 = v71;
              unint64_t v74 = v72 + 1;
            }
            v70[437] = v74;
            break;
          case 'r':
            unint64_t v75 = *(void **)a1[2];
            uint64_t v76 = *(_WORD *)(a1[3] + 46) & 0x7FFF;
            unint64_t v77 = (char *)v75[440];
            unint64_t v78 = v75[441];
            if ((unint64_t)v77 >= v78)
            {
              unint64_t v158 = (char *)v75[439];
              uint64_t v159 = (v77 - v158) >> 3;
              if ((unint64_t)(v159 + 1) >> 61) {
LABEL_270:
              }
                sub_566C();
              unint64_t v160 = v78 - (void)v158;
              unint64_t v161 = (uint64_t)(v78 - (void)v158) >> 2;
              if (v161 <= v159 + 1) {
                unint64_t v161 = v159 + 1;
              }
              if (v160 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v162 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v162 = v161;
              }
              if (v162)
              {
                unint64_t v163 = (char *)sub_5714((uint64_t)(v75 + 441), v162);
                unint64_t v77 = (char *)v75[440];
                unint64_t v158 = (char *)v75[439];
              }
              else
              {
                unint64_t v163 = 0;
              }
              uint64_t v190 = &v163[8 * v159];
              *(void *)uint64_t v190 = v76;
              uint64_t v79 = v190 + 8;
              while (v77 != v158)
              {
                uint64_t v191 = *((void *)v77 - 1);
                v77 -= 8;
                *((void *)v190 - 1) = v191;
                v190 -= 8;
              }
              v75[439] = v190;
              v75[440] = v79;
              v75[441] = &v163[8 * v162];
              if (v158) {
                operator delete(v158);
              }
            }
            else
            {
              *(void *)unint64_t v77 = v76;
              uint64_t v79 = v77 + 8;
            }
            v75[440] = v79;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_F3098(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    uint64_t v191 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v190 = *v191;
    uint64_t v192 = (char *)v191[1] - (char *)*v191;
    if (v192)
    {
      unint64_t v193 = v192 >> 2;
      if (v193 <= 1) {
        unint64_t v193 = 1;
      }
      do
      {
        int v194 = *v190++;
        switch(v194)
        {
          case 'X':
            uint64_t v195 = *(_DWORD *)(a1[3] + 48) & 0x7FFFF;
            int v196 = (void *)(*(void *)a1[2] + 2896);
            goto LABEL_248;
          case 'Y':
            uint64_t v195 = *(unsigned __int16 *)(a1[3] + 22);
            int v196 = (void *)(*(void *)a1[2] + 2920);
            goto LABEL_248;
          case 'Z':
            uint64_t v195 = *(unsigned __int16 *)(a1[3] + 32);
            int v196 = (void *)(*(void *)a1[2] + 2944);
            goto LABEL_248;
          case '[':
            uint64_t v195 = *(unsigned __int16 *)(a1[3] + 24);
            int v196 = (void *)(*(void *)a1[2] + 2968);
            goto LABEL_248;
          case '\\':
            uint64_t v195 = *(unsigned __int16 *)(a1[3] + 34);
            int v196 = (void *)(*(void *)a1[2] + 2992);
            goto LABEL_248;
          case ']':
            uint64_t v195 = *(unsigned __int16 *)(a1[3] + 26);
            int v196 = (void *)(*(void *)a1[2] + 3016);
            goto LABEL_248;
          case '^':
            uint64_t v195 = (unsigned __int16)WORD2(*(void *)(a1[3] + 38));
            int v196 = (void *)(*(void *)a1[2] + 3040);
            goto LABEL_248;
          case '_':
            uint64_t v195 = WORD1(*(void *)(a1[3] + 38));
            int v196 = (void *)(*(void *)a1[2] + 3064);
            goto LABEL_248;
            uint64_t v195 = *(unsigned __int16 *)(a1[3] + 36);
            int v196 = (void *)(*(void *)a1[2] + 3088);
            goto LABEL_248;
          case 'a':
            uint64_t v195 = *(unsigned __int16 *)(a1[3] + 28);
            int v196 = (void *)(*(void *)a1[2] + 3112);
            goto LABEL_248;
          case 'b':
            uint64_t v195 = *(unsigned __int16 *)(a1[3] + 38);
            int v196 = (void *)(*(void *)a1[2] + 3136);
            goto LABEL_248;
          case 'c':
            uint64_t v195 = *(unsigned __int16 *)(a1[3] + 30);
            int v196 = (void *)(*(void *)a1[2] + 3160);
            goto LABEL_248;
          case 'd':
            uint64_t v197 = a1[3];
            *((void *)&v198 + 1) = *(unsigned __int8 *)(v197 + 46);
            *(void *)&long long v198 = *(void *)(v197 + 38);
            uint64_t v195 = (v198 >> 48) & 0xFFFFF;
            int v196 = (void *)(*(void *)a1[2] + 3184);
LABEL_248:
            *(void *)(*v196 - 8) += v195;
            break;
          default:
            break;
        }
        --v193;
      }
      while (v193);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    int v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 'X':
            uint64_t v10 = *(void **)a1[2];
            uint64_t v11 = *(_DWORD *)(a1[3] + 48) & 0x7FFFFLL;
            uint64_t v12 = (uint64_t *)v10[362];
            unint64_t v13 = v10[363];
            if ((unint64_t)v12 >= v13)
            {
              unint64_t v86 = (uint64_t *)v10[361];
              uint64_t v87 = v12 - v86;
              if ((unint64_t)(v87 + 1) >> 61) {
                goto LABEL_252;
              }
              unint64_t v88 = v13 - (void)v86;
              unint64_t v89 = (uint64_t)(v13 - (void)v86) >> 2;
              if (v89 <= v87 + 1) {
                unint64_t v89 = v87 + 1;
              }
              if (v88 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v90 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v90 = v89;
              }
              if (v90)
              {
                uint64_t v91 = (char *)sub_5714((uint64_t)(v10 + 363), v90);
                uint64_t v12 = (uint64_t *)v10[362];
                unint64_t v86 = (uint64_t *)v10[361];
              }
              else
              {
                uint64_t v91 = 0;
              }
              uint64_t v164 = (uint64_t *)&v91[8 * v87];
              uint64_t *v164 = v11;
              unint64_t v14 = v164 + 1;
              while (v12 != v86)
              {
                uint64_t v165 = *--v12;
                *--uint64_t v164 = v165;
              }
              v10[361] = v164;
              v10[362] = v14;
              v10[363] = &v91[8 * v90];
              if (v86) {
                operator delete(v86);
              }
            }
            else
            {
              *uint64_t v12 = v11;
              unint64_t v14 = v12 + 1;
            }
            v10[362] = v14;
            break;
          case 'Y':
            uint64_t v15 = a1[2];
            uint64_t v16 = *(void **)v15;
            uint64_t v17 = *(unsigned __int16 *)(a1[3] + 22);
            unint64_t v18 = *(char **)(*(void *)v15 + 2920);
            unint64_t v19 = *(void *)(*(void *)v15 + 2928);
            if ((unint64_t)v18 >= v19)
            {
              unint64_t v92 = (char *)v16[364];
              uint64_t v93 = (v18 - v92) >> 3;
              if ((unint64_t)(v93 + 1) >> 61) {
                goto LABEL_252;
              }
              unint64_t v94 = v19 - (void)v92;
              unint64_t v95 = (uint64_t)(v19 - (void)v92) >> 2;
              if (v95 <= v93 + 1) {
                unint64_t v95 = v93 + 1;
              }
              if (v94 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v96 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v96 = v95;
              }
              if (v96)
              {
                uint64_t v97 = (char *)sub_5714((uint64_t)(v16 + 366), v96);
                unint64_t v18 = (char *)v16[365];
                unint64_t v92 = (char *)v16[364];
              }
              else
              {
                uint64_t v97 = 0;
              }
              uint64_t v166 = &v97[8 * v93];
              *(void *)uint64_t v166 = v17;
              unint64_t v20 = v166 + 8;
              while (v18 != v92)
              {
                uint64_t v167 = *((void *)v18 - 1);
                v18 -= 8;
                *((void *)v166 - 1) = v167;
                v166 -= 8;
              }
              v16[364] = v166;
              v16[365] = v20;
              v16[366] = &v97[8 * v96];
              if (v92) {
                operator delete(v92);
              }
            }
            else
            {
              *(void *)unint64_t v18 = v17;
              unint64_t v20 = v18 + 8;
            }
            v16[365] = v20;
            break;
          case 'Z':
            uint64_t v21 = a1[2];
            uint64_t v22 = *(void **)v21;
            uint64_t v23 = *(unsigned __int16 *)(a1[3] + 32);
            unint64_t v24 = *(char **)(*(void *)v21 + 2944);
            unint64_t v25 = *(void *)(*(void *)v21 + 2952);
            if ((unint64_t)v24 >= v25)
            {
              unint64_t v98 = (char *)v22[367];
              uint64_t v99 = (v24 - v98) >> 3;
              if ((unint64_t)(v99 + 1) >> 61) {
                goto LABEL_252;
              }
              unint64_t v100 = v25 - (void)v98;
              unint64_t v101 = (uint64_t)(v25 - (void)v98) >> 2;
              if (v101 <= v99 + 1) {
                unint64_t v101 = v99 + 1;
              }
              if (v100 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v102 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v102 = v101;
              }
              if (v102)
              {
                uint64_t v103 = (char *)sub_5714((uint64_t)(v22 + 369), v102);
                unint64_t v24 = (char *)v22[368];
                unint64_t v98 = (char *)v22[367];
              }
              else
              {
                uint64_t v103 = 0;
              }
              unint64_t v168 = &v103[8 * v99];
              *(void *)unint64_t v168 = v23;
              uint64_t v26 = v168 + 8;
              while (v24 != v98)
              {
                uint64_t v169 = *((void *)v24 - 1);
                v24 -= 8;
                *((void *)v168 - 1) = v169;
                v168 -= 8;
              }
              v22[367] = v168;
              v22[368] = v26;
              v22[369] = &v103[8 * v102];
              if (v98) {
                operator delete(v98);
              }
            }
            else
            {
              *(void *)unint64_t v24 = v23;
              uint64_t v26 = v24 + 8;
            }
            v22[368] = v26;
            break;
          case '[':
            uint64_t v27 = a1[2];
            unint64_t v28 = *(void **)v27;
            uint64_t v29 = *(unsigned __int16 *)(a1[3] + 24);
            unint64_t v30 = *(char **)(*(void *)v27 + 2968);
            unint64_t v31 = *(void *)(*(void *)v27 + 2976);
            if ((unint64_t)v30 >= v31)
            {
              unint64_t v104 = (char *)v28[370];
              uint64_t v105 = (v30 - v104) >> 3;
              if ((unint64_t)(v105 + 1) >> 61) {
                goto LABEL_252;
              }
              unint64_t v106 = v31 - (void)v104;
              unint64_t v107 = (uint64_t)(v31 - (void)v104) >> 2;
              if (v107 <= v105 + 1) {
                unint64_t v107 = v105 + 1;
              }
              if (v106 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v108 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v108 = v107;
              }
              if (v108)
              {
                uint64_t v109 = (char *)sub_5714((uint64_t)(v28 + 372), v108);
                unint64_t v30 = (char *)v28[371];
                unint64_t v104 = (char *)v28[370];
              }
              else
              {
                uint64_t v109 = 0;
              }
              uint64_t v170 = &v109[8 * v105];
              *(void *)uint64_t v170 = v29;
              uint64_t v32 = v170 + 8;
              while (v30 != v104)
              {
                uint64_t v171 = *((void *)v30 - 1);
                v30 -= 8;
                *((void *)v170 - 1) = v171;
                v170 -= 8;
              }
              v28[370] = v170;
              v28[371] = v32;
              v28[372] = &v109[8 * v108];
              if (v104) {
                operator delete(v104);
              }
            }
            else
            {
              *(void *)unint64_t v30 = v29;
              uint64_t v32 = v30 + 8;
            }
            v28[371] = v32;
            break;
          case '\\':
            uint64_t v33 = a1[2];
            unint64_t v34 = *(void **)v33;
            uint64_t v35 = *(unsigned __int16 *)(a1[3] + 34);
            uint64_t v36 = *(char **)(*(void *)v33 + 2992);
            unint64_t v37 = *(void *)(*(void *)v33 + 3000);
            if ((unint64_t)v36 >= v37)
            {
              unint64_t v110 = (char *)v34[373];
              uint64_t v111 = (v36 - v110) >> 3;
              if ((unint64_t)(v111 + 1) >> 61) {
                goto LABEL_252;
              }
              unint64_t v112 = v37 - (void)v110;
              unint64_t v113 = (uint64_t)(v37 - (void)v110) >> 2;
              if (v113 <= v111 + 1) {
                unint64_t v113 = v111 + 1;
              }
              if (v112 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v114 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v114 = v113;
              }
              if (v114)
              {
                uint64_t v115 = (char *)sub_5714((uint64_t)(v34 + 375), v114);
                uint64_t v36 = (char *)v34[374];
                unint64_t v110 = (char *)v34[373];
              }
              else
              {
                uint64_t v115 = 0;
              }
              uint64_t v172 = &v115[8 * v111];
              *(void *)uint64_t v172 = v35;
              unint64_t v38 = v172 + 8;
              while (v36 != v110)
              {
                uint64_t v173 = *((void *)v36 - 1);
                v36 -= 8;
                *((void *)v172 - 1) = v173;
                v172 -= 8;
              }
              v34[373] = v172;
              v34[374] = v38;
              v34[375] = &v115[8 * v114];
              if (v110) {
                operator delete(v110);
              }
            }
            else
            {
              *(void *)uint64_t v36 = v35;
              unint64_t v38 = v36 + 8;
            }
            v34[374] = v38;
            break;
          case ']':
            uint64_t v39 = a1[2];
            uint64_t v40 = *(void **)v39;
            uint64_t v41 = *(unsigned __int16 *)(a1[3] + 26);
            unint64_t v42 = *(char **)(*(void *)v39 + 3016);
            unint64_t v43 = *(void *)(*(void *)v39 + 3024);
            if ((unint64_t)v42 >= v43)
            {
              unint64_t v116 = (char *)v40[376];
              uint64_t v117 = (v42 - v116) >> 3;
              if ((unint64_t)(v117 + 1) >> 61) {
                goto LABEL_252;
              }
              unint64_t v118 = v43 - (void)v116;
              unint64_t v119 = (uint64_t)(v43 - (void)v116) >> 2;
              if (v119 <= v117 + 1) {
                unint64_t v119 = v117 + 1;
              }
              if (v118 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v120 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v120 = v119;
              }
              if (v120)
              {
                uint64_t v121 = (char *)sub_5714((uint64_t)(v40 + 378), v120);
                unint64_t v42 = (char *)v40[377];
                unint64_t v116 = (char *)v40[376];
              }
              else
              {
                uint64_t v121 = 0;
              }
              unint64_t v174 = &v121[8 * v117];
              *(void *)unint64_t v174 = v41;
              unint64_t v44 = v174 + 8;
              while (v42 != v116)
              {
                uint64_t v175 = *((void *)v42 - 1);
                v42 -= 8;
                *((void *)v174 - 1) = v175;
                v174 -= 8;
              }
              v40[376] = v174;
              v40[377] = v44;
              v40[378] = &v121[8 * v120];
              if (v116) {
                operator delete(v116);
              }
            }
            else
            {
              *(void *)unint64_t v42 = v41;
              unint64_t v44 = v42 + 8;
            }
            v40[377] = v44;
            break;
          case '^':
            uint64_t v45 = *(void **)a1[2];
            uint64_t v46 = (unsigned __int16)WORD2(*(void *)(a1[3] + 38));
            unint64_t v47 = (char *)v45[380];
            unint64_t v48 = v45[381];
            if ((unint64_t)v47 >= v48)
            {
              unint64_t v122 = (char *)v45[379];
              uint64_t v123 = (v47 - v122) >> 3;
              if ((unint64_t)(v123 + 1) >> 61) {
                goto LABEL_252;
              }
              unint64_t v124 = v48 - (void)v122;
              unint64_t v125 = (uint64_t)(v48 - (void)v122) >> 2;
              if (v125 <= v123 + 1) {
                unint64_t v125 = v123 + 1;
              }
              if (v124 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v126 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v126 = v125;
              }
              if (v126)
              {
                uint64_t v127 = (char *)sub_5714((uint64_t)(v45 + 381), v126);
                unint64_t v47 = (char *)v45[380];
                unint64_t v122 = (char *)v45[379];
              }
              else
              {
                uint64_t v127 = 0;
              }
              uint64_t v176 = &v127[8 * v123];
              *(void *)uint64_t v176 = v46;
              uint64_t v49 = v176 + 8;
              while (v47 != v122)
              {
                uint64_t v177 = *((void *)v47 - 1);
                v47 -= 8;
                *((void *)v176 - 1) = v177;
                v176 -= 8;
              }
              v45[379] = v176;
              v45[380] = v49;
              v45[381] = &v127[8 * v126];
              if (v122) {
                operator delete(v122);
              }
            }
            else
            {
              *(void *)unint64_t v47 = v46;
              uint64_t v49 = v47 + 8;
            }
            v45[380] = v49;
            break;
          case '_':
            uint64_t v50 = *(void **)a1[2];
            uint64_t v51 = WORD1(*(void *)(a1[3] + 38));
            unint64_t v52 = (char *)v50[383];
            unint64_t v53 = v50[384];
            if ((unint64_t)v52 >= v53)
            {
              unint64_t v128 = (char *)v50[382];
              uint64_t v129 = (v52 - v128) >> 3;
              if ((unint64_t)(v129 + 1) >> 61) {
                goto LABEL_252;
              }
              unint64_t v130 = v53 - (void)v128;
              unint64_t v131 = (uint64_t)(v53 - (void)v128) >> 2;
              if (v131 <= v129 + 1) {
                unint64_t v131 = v129 + 1;
              }
              if (v130 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v132 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v132 = v131;
              }
              if (v132)
              {
                uint64_t v133 = (char *)sub_5714((uint64_t)(v50 + 384), v132);
                unint64_t v52 = (char *)v50[383];
                unint64_t v128 = (char *)v50[382];
              }
              else
              {
                uint64_t v133 = 0;
              }
              uint64_t v178 = &v133[8 * v129];
              *(void *)uint64_t v178 = v51;
              uint64_t v54 = v178 + 8;
              while (v52 != v128)
              {
                uint64_t v179 = *((void *)v52 - 1);
                v52 -= 8;
                *((void *)v178 - 1) = v179;
                v178 -= 8;
              }
              v50[382] = v178;
              v50[383] = v54;
              v50[384] = &v133[8 * v132];
              if (v128) {
                operator delete(v128);
              }
            }
            else
            {
              *(void *)unint64_t v52 = v51;
              uint64_t v54 = v52 + 8;
            }
            v50[383] = v54;
            break;
            uint64_t v55 = a1[2];
            uint64_t v56 = *(void **)v55;
            uint64_t v57 = *(unsigned __int16 *)(a1[3] + 36);
            unint64_t v58 = *(char **)(*(void *)v55 + 3088);
            unint64_t v59 = *(void *)(*(void *)v55 + 3096);
            if ((unint64_t)v58 >= v59)
            {
              unint64_t v134 = (char *)v56[385];
              uint64_t v135 = (v58 - v134) >> 3;
              if ((unint64_t)(v135 + 1) >> 61) {
                goto LABEL_252;
              }
              unint64_t v136 = v59 - (void)v134;
              unint64_t v137 = (uint64_t)(v59 - (void)v134) >> 2;
              if (v137 <= v135 + 1) {
                unint64_t v137 = v135 + 1;
              }
              if (v136 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v138 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v138 = v137;
              }
              if (v138)
              {
                uint64_t v139 = (char *)sub_5714((uint64_t)(v56 + 387), v138);
                unint64_t v58 = (char *)v56[386];
                unint64_t v134 = (char *)v56[385];
              }
              else
              {
                uint64_t v139 = 0;
              }
              unint64_t v180 = &v139[8 * v135];
              *(void *)unint64_t v180 = v57;
              uint64_t v60 = v180 + 8;
              while (v58 != v134)
              {
                uint64_t v181 = *((void *)v58 - 1);
                v58 -= 8;
                *((void *)v180 - 1) = v181;
                v180 -= 8;
              }
              v56[385] = v180;
              v56[386] = v60;
              v56[387] = &v139[8 * v138];
              if (v134) {
                operator delete(v134);
              }
            }
            else
            {
              *(void *)unint64_t v58 = v57;
              uint64_t v60 = v58 + 8;
            }
            v56[386] = v60;
            break;
          case 'a':
            uint64_t v61 = a1[2];
            uint64_t v62 = *(void **)v61;
            uint64_t v63 = *(unsigned __int16 *)(a1[3] + 28);
            unint64_t v64 = *(char **)(*(void *)v61 + 3112);
            unint64_t v65 = *(void *)(*(void *)v61 + 3120);
            if ((unint64_t)v64 >= v65)
            {
              unint64_t v140 = (char *)v62[388];
              uint64_t v141 = (v64 - v140) >> 3;
              if ((unint64_t)(v141 + 1) >> 61) {
                goto LABEL_252;
              }
              unint64_t v142 = v65 - (void)v140;
              unint64_t v143 = (uint64_t)(v65 - (void)v140) >> 2;
              if (v143 <= v141 + 1) {
                unint64_t v143 = v141 + 1;
              }
              if (v142 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v144 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v144 = v143;
              }
              if (v144)
              {
                uint64_t v145 = (char *)sub_5714((uint64_t)(v62 + 390), v144);
                unint64_t v64 = (char *)v62[389];
                unint64_t v140 = (char *)v62[388];
              }
              else
              {
                uint64_t v145 = 0;
              }
              uint64_t v182 = &v145[8 * v141];
              *(void *)uint64_t v182 = v63;
              uint64_t v66 = v182 + 8;
              while (v64 != v140)
              {
                uint64_t v183 = *((void *)v64 - 1);
                v64 -= 8;
                *((void *)v182 - 1) = v183;
                v182 -= 8;
              }
              v62[388] = v182;
              v62[389] = v66;
              v62[390] = &v145[8 * v144];
              if (v140) {
                operator delete(v140);
              }
            }
            else
            {
              *(void *)unint64_t v64 = v63;
              uint64_t v66 = v64 + 8;
            }
            v62[389] = v66;
            break;
          case 'b':
            uint64_t v67 = a1[2];
            unint64_t v68 = *(void **)v67;
            uint64_t v69 = *(unsigned __int16 *)(a1[3] + 38);
            unint64_t v70 = *(char **)(*(void *)v67 + 3136);
            unint64_t v71 = *(void *)(*(void *)v67 + 3144);
            if ((unint64_t)v70 >= v71)
            {
              uint64_t v146 = (char *)v68[391];
              uint64_t v147 = (v70 - v146) >> 3;
              if ((unint64_t)(v147 + 1) >> 61) {
                goto LABEL_252;
              }
              unint64_t v148 = v71 - (void)v146;
              unint64_t v149 = (uint64_t)(v71 - (void)v146) >> 2;
              if (v149 <= v147 + 1) {
                unint64_t v149 = v147 + 1;
              }
              if (v148 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v150 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v150 = v149;
              }
              if (v150)
              {
                uint64_t v151 = (char *)sub_5714((uint64_t)(v68 + 393), v150);
                unint64_t v70 = (char *)v68[392];
                uint64_t v146 = (char *)v68[391];
              }
              else
              {
                uint64_t v151 = 0;
              }
              uint64_t v184 = &v151[8 * v147];
              *(void *)uint64_t v184 = v69;
              uint64_t v72 = v184 + 8;
              while (v70 != v146)
              {
                uint64_t v185 = *((void *)v70 - 1);
                v70 -= 8;
                *((void *)v184 - 1) = v185;
                v184 -= 8;
              }
              v68[391] = v184;
              v68[392] = v72;
              v68[393] = &v151[8 * v150];
              if (v146) {
                operator delete(v146);
              }
            }
            else
            {
              *(void *)unint64_t v70 = v69;
              uint64_t v72 = v70 + 8;
            }
            v68[392] = v72;
            break;
          case 'c':
            uint64_t v73 = a1[2];
            unint64_t v74 = *(void **)v73;
            uint64_t v75 = *(unsigned __int16 *)(a1[3] + 30);
            uint64_t v76 = *(char **)(*(void *)v73 + 3160);
            unint64_t v77 = *(void *)(*(void *)v73 + 3168);
            if ((unint64_t)v76 >= v77)
            {
              unint64_t v152 = (char *)v74[394];
              uint64_t v153 = (v76 - v152) >> 3;
              if ((unint64_t)(v153 + 1) >> 61) {
                goto LABEL_252;
              }
              unint64_t v154 = v77 - (void)v152;
              unint64_t v155 = (uint64_t)(v77 - (void)v152) >> 2;
              if (v155 <= v153 + 1) {
                unint64_t v155 = v153 + 1;
              }
              if (v154 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v156 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v156 = v155;
              }
              if (v156)
              {
                unint64_t v157 = (char *)sub_5714((uint64_t)(v74 + 396), v156);
                uint64_t v76 = (char *)v74[395];
                unint64_t v152 = (char *)v74[394];
              }
              else
              {
                unint64_t v157 = 0;
              }
              unint64_t v186 = &v157[8 * v153];
              *(void *)unint64_t v186 = v75;
              unint64_t v78 = v186 + 8;
              while (v76 != v152)
              {
                uint64_t v187 = *((void *)v76 - 1);
                v76 -= 8;
                *((void *)v186 - 1) = v187;
                v186 -= 8;
              }
              v74[394] = v186;
              v74[395] = v78;
              v74[396] = &v157[8 * v156];
              if (v152) {
                operator delete(v152);
              }
            }
            else
            {
              *(void *)uint64_t v76 = v75;
              unint64_t v78 = v76 + 8;
            }
            v74[395] = v78;
            break;
          case 'd':
            uint64_t v79 = a1[3];
            unint64_t v80 = *(void **)a1[2];
            *((void *)&v81 + 1) = *(unsigned __int8 *)(v79 + 46);
            *(void *)&long long v81 = *(void *)(v79 + 38);
            uint64_t v82 = (v81 >> 48) & 0xFFFFF;
            unint64_t v83 = (char *)v80[398];
            unint64_t v84 = v80[399];
            if ((unint64_t)v83 >= v84)
            {
              unint64_t v158 = (char *)v80[397];
              uint64_t v159 = (v83 - v158) >> 3;
              if ((unint64_t)(v159 + 1) >> 61) {
LABEL_252:
              }
                sub_566C();
              unint64_t v160 = v84 - (void)v158;
              unint64_t v161 = (uint64_t)(v84 - (void)v158) >> 2;
              if (v161 <= v159 + 1) {
                unint64_t v161 = v159 + 1;
              }
              if (v160 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v162 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v162 = v161;
              }
              if (v162)
              {
                unint64_t v163 = (char *)sub_5714((uint64_t)(v80 + 399), v162);
                unint64_t v83 = (char *)v80[398];
                unint64_t v158 = (char *)v80[397];
              }
              else
              {
                unint64_t v163 = 0;
              }
              uint64_t v188 = &v163[8 * v159];
              *(void *)uint64_t v188 = v82;
              uint64_t v85 = v188 + 8;
              while (v83 != v158)
              {
                uint64_t v189 = *((void *)v83 - 1);
                v83 -= 8;
                *((void *)v188 - 1) = v189;
                v188 -= 8;
              }
              v80[397] = v188;
              v80[398] = v85;
              v80[399] = &v163[8 * v162];
              if (v158) {
                operator delete(v158);
              }
            }
            else
            {
              *(void *)unint64_t v83 = v82;
              uint64_t v85 = v83 + 8;
            }
            v80[398] = v85;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_F3D30()
{
}

uint64_t sub_F3D44(int a1, char *__s1)
{
  if (!__s1) {
    return 298;
  }
  uint64_t result = strcmp(__s1, "F95DFFE3A1BA6540BA6B0C8C3B3B08C3D4C0BCCC082A0874526304B7CF0313EF");
  if (result)
  {
    if (!strcmp(__s1, "55CEE38A63D2BFA2E2E0C34CCA91302C92577CB2B3213282D9DABC41F03D0D21"))
    {
      return 1;
    }
    else if (!strcmp(__s1, "8C878172DC559994374EED2CC5251FCD50A25BB771DEBC5FD9EE64B4665AD14D"))
    {
      return 2;
    }
    else if (!strcmp(__s1, "D56B7E7432EDA7633C4AFD6FFE777A29E7AACB6AB05EABE4DE90F2936E5B2623"))
    {
      return 3;
    }
    else if (!strcmp(__s1, "C51A7FA32CB56141CC2697BD50AA465B125331846CF486D1A23C56491C063BCA"))
    {
      return 4;
    }
    else if (!strcmp(__s1, "06233651FBD08F0066125C1134383BAF4791BCC2DFBBF905ACA71F5466ADED9B"))
    {
      return 5;
    }
    else if (!strcmp(__s1, "85F2A20F2D46E2D369470A5B664F4163FB619D3513AB222F4222C880D59B383A"))
    {
      return 6;
    }
    else if (!strcmp(__s1, "5B5DC5D95D1F90AD39F549F24C70BAC5928129DDCBB79BAB2158AA85317B2099"))
    {
      return 7;
    }
    else if (!strcmp(__s1, "1E68C8A4555F978F7EBB48C7CDE72B0B669D4FCF524878C1B09753DC85FA51C6"))
    {
      return 8;
    }
    else if (!strcmp(__s1, "C521760ABB46B43088E9E6E286368E5464F20AE90F1D698DF07C00A6FBB3D115"))
    {
      return 9;
    }
    else if (!strcmp(__s1, "D2BAB1CC9060EBB2601E0D9594280A394EF3A978788A7F144337BDE41C25A9D3"))
    {
      return 10;
    }
    else if (!strcmp(__s1, "360081D8A192D9EAB8DC6F6EAC25370B5B838CEB9F334BAC919F4CC2E7CD4ED6"))
    {
      return 11;
    }
    else if (!strcmp(__s1, "8D544DD9E94EA7D05E520E44F9BD5E58A12EACF9440D3323E8A9EBD681E1B22E"))
    {
      return 12;
    }
    else if (!strcmp(__s1, "ED33A3CBB8630DAFA661B6977D341D62361A584B83C50CE4AA9F20C77278610B"))
    {
      return 13;
    }
    else if (!strcmp(__s1, "68955CD4DD2B024A2C3B1347FAA2EE1C0FEAC9A54B834FFD798DB5B40F86EF99"))
    {
      return 14;
    }
    else if (!strcmp(__s1, "4978C08E9D3AB613EE1B8B0BDCCE4046D596D77E4B3285FD26DE51CBED95C706"))
    {
      return 15;
    }
    else if (!strcmp(__s1, "7CA95EAA0720DCB83F7592E7A95207136D0365E3259721FA97A5F2E3B189472C"))
    {
      return 16;
    }
    else if (!strcmp(__s1, "4D997B4599AD37918CEE1A51347AE6F6595A4B4F6BDB5A626BC00348DC070B38"))
    {
      return 17;
    }
    else if (!strcmp(__s1, "30CF25A160D15BDFBD79EE3DEFAF8D8673918FA6239A815D00E6989DA599205A"))
    {
      return 18;
    }
    else if (!strcmp(__s1, "A1F762436C046FC59046061C0CB7BD0DE45C222A5E57C1C47F87948850234594"))
    {
      return 19;
    }
    else if (!strcmp(__s1, "41919D0D7426716623EB2B8CEC8FEC7C0185029A4F970CA7905BA42388A97673"))
    {
      return 20;
    }
    else if (!strcmp(__s1, "4F15DAD92E0A785D745021F7B94F51521E898720D5169990597E128646A6955D"))
    {
      return 21;
    }
    else if (!strcmp(__s1, "171BC401E17487FA4D07865739044B318EEDC79CADD0317DD27D70E2BD0E5F5E"))
    {
      return 22;
    }
    else if (!strcmp(__s1, "F87F5FA1ACBE57E6A8D239141A2AEB89660AA820F4752500BE993B80E3AE6AD0"))
    {
      return 23;
    }
    else if (!strcmp(__s1, "DC2161FB676079EFF4C6F12BF10A5EE9711C91E511F1FD4709AEDD025D8A940D"))
    {
      return 24;
    }
    else if (!strcmp(__s1, "08AB4C79C0BDC9E53461A58B27E6D0E7EB2C43FF4B5F7E4DAD07415A5E112741"))
    {
      return 25;
    }
    else if (!strcmp(__s1, "6CF80B1A4946AE0C475E5E4AC168052F3850D07EBCA0C1CD0369D2D3C2C64D04"))
    {
      return 26;
    }
    else if (!strcmp(__s1, "C5491B58BB279B039FAC8C9736C09E9A33E7EC5399E387F4D13BBAE612BCA350"))
    {
      return 27;
    }
    else if (!strcmp(__s1, "D754A0D8A25FC01887EF6D4864286FB54EE1AD4C88BE01CFF4EA45226ED884B3"))
    {
      return 28;
    }
    else if (!strcmp(__s1, "EE1C44BA654C2C10C7DB0434A851DBB3103BDD9D9306720B99A54BAC5F81779F"))
    {
      return 29;
    }
    else if (!strcmp(__s1, "D7642F4CD8A1F1052D8874FFCB84623EEB5AD8DB476AAA36BB13F44E0122717D"))
    {
      return 30;
    }
    else if (!strcmp(__s1, "ECCE75AB7F80F9519A3E08E3A0EE71610AE67E3B82829786B02D98C09276F560"))
    {
      return 31;
    }
    else if (!strcmp(__s1, "0D43CB377576A411251DB7D5579117D02FC1BB178830D97B5332A806AC122B37"))
    {
      return 32;
    }
    else if (!strcmp(__s1, "9E7E7B3180DA596EBA2925972639C8DC058E97904ADA86E8FA31E691D63CA97B"))
    {
      return 33;
    }
    else if (!strcmp(__s1, "FE4E8A2782700A8DEC84E195627096B91A904FF6F486B78EF381501FB9667E0F"))
    {
      return 34;
    }
    else if (!strcmp(__s1, "35E9B0A78729DBBE416E11951D26DDC657D957CE37E23B41A2915BB6CC8CF792"))
    {
      return 35;
    }
    else if (!strcmp(__s1, "30E723A308ED187FBA1B1767CFC4B4194C6A5B389089F21A3C0995763C0B223C"))
    {
      return 36;
    }
    else if (!strcmp(__s1, "51189DA6335464233B7B06C10962008F93292B56018C07FED32661289705C6ED"))
    {
      return 37;
    }
    else if (!strcmp(__s1, "8CF1E386EE3A3B138617A8BCFBEB4D376D2B696364330A1BFD8711185D4729B3"))
    {
      return 38;
    }
    else if (!strcmp(__s1, "5C54374704E9720290CC29DD546EB2792D9D700BE3F0A1F6CCAFA3D19D8F9832"))
    {
      return 39;
    }
    else if (!strcmp(__s1, "300AF657F991E64A7D1C840E67C80384F989A47CEDCCA986B57DBE26768A2730"))
    {
      return 40;
    }
    else if (!strcmp(__s1, "3EBB72814821E8E8DB302E61197BC3AC6B0A02119FCD0C86BCFA54EB1B511AD2"))
    {
      return 41;
    }
    else if (!strcmp(__s1, "F89408CC4F2E499CED47E61E0AFD929E01C44D079ADF0B440EF845B984DE4956"))
    {
      return 42;
    }
    else if (!strcmp(__s1, "0DAB6425F1EAC005798A5E8220F97E433817AADFE2490BD4F4B762C38F20E22B"))
    {
      return 43;
    }
    else if (!strcmp(__s1, "7FD8B674D9FE018B3D64EA31CB94787780CD12317B2764B9BAFB60C975CDC8EB"))
    {
      return 44;
    }
    else if (!strcmp(__s1, "C04589D08BD1AA2481137A423CC2E81C537B75011557AB0EA579F58E489D9981"))
    {
      return 45;
    }
    else if (!strcmp(__s1, "7C3CD59A80673DD0787DF037FB1FB45E0EB635BFDB2554E10CBF5D056FEDAB78"))
    {
      return 46;
    }
    else if (!strcmp(__s1, "A1CD5E72A4CAD33DD4C2190F293103B9FD8B40FFE76B1A99A195768465964F91"))
    {
      return 47;
    }
    else if (!strcmp(__s1, "8213F897439E4E662B08D104E6437CECDC7C228913AABC2518D8AF9E0E92A4E6"))
    {
      return 48;
    }
    else if (!strcmp(__s1, "20067B98EF95585EF99A8343EF911E18D2C235A3AD20103589A20D84933F8EB0"))
    {
      return 49;
    }
    else if (!strcmp(__s1, "1FFBA951E06F1A7810DC823264210F0C13273E454D699383F3D6265630FEDD53"))
    {
      return 50;
    }
    else if (!strcmp(__s1, "3856FBD8576C0AA988700D7EF5787AAAE94A3BBFBB393B0426FA9D379DA69C91"))
    {
      return 51;
    }
    else if (!strcmp(__s1, "76F5A23AACC27615C980BE3E58B52994192195866836855BCA7C3F885796297B"))
    {
      return 52;
    }
    else if (!strcmp(__s1, "4BF63E209F7D92B4E8341476C80013664D3299327C72E7A7F0D16E1CBD4904FC"))
    {
      return 53;
    }
    else if (!strcmp(__s1, "9382104F02B29DB357F4F725145F7C1FB09501D2B49FEE4E19072E37FC7BD72A"))
    {
      return 54;
    }
    else if (!strcmp(__s1, "7A1AA2B358C4A67EB5370BDD2302AF92968558ABF28AC078D6FA40D578116978"))
    {
      return 55;
    }
    else if (!strcmp(__s1, "260130B343BA0695AB911D986B3870FA0CCD0EC58E6F55895A856F37201CE9F8"))
    {
      return 56;
    }
    else if (!strcmp(__s1, "79E88035C9BC883D403F17831B8C9264E643C6B76E9B3C1451B49B0F672C32BF"))
    {
      return 57;
    }
    else if (!strcmp(__s1, "100299043F027ADADB62685130C7FBE549E29F08B58C365844FF8EC25BAEEAB0"))
    {
      return 58;
    }
    else if (!strcmp(__s1, "AA1E812506867A5F2C54D3BA3268DB5C4BB2C6B0E4F500340DD23C4E1E637D9D"))
    {
      return 59;
    }
    else if (!strcmp(__s1, "6E9FC9ADDBC6FDE3F223F4689164CD676FE137A81548507A1D0C44EEA6492399"))
    {
      return 60;
    }
    else if (!strcmp(__s1, "6E4B985D58D9922328978C1195CE700B9D0ADEA8B6F32EE2B50F86C993F53566"))
    {
      return 61;
    }
    else if (!strcmp(__s1, "E0A8B6C5B8F699697896183E1FAFABD9541AA90136D44C9E11F2D135A32D37D7"))
    {
      return 62;
    }
    else if (!strcmp(__s1, "904CBFF8576D1B845F2199FC58EB496E6C12A8412850799564035215C2EE4EA6"))
    {
      return 63;
    }
    else if (!strcmp(__s1, "02FFFEEC34CB4F9BB2B7187D31D98A830068967AB21581BD376B54C226438E89"))
    {
      return 64;
    }
    else if (!strcmp(__s1, "9C4011AA6D96FA382174AFD86D59DF18369E28D27CF17B9BB9ACA4FF95E40B54"))
    {
      return 65;
    }
    else if (!strcmp(__s1, "547021D0E82D62B7841769A23FC7FE04F7A63B8A0528A3F6E4C67E8B9420360E"))
    {
      return 66;
    }
    else if (!strcmp(__s1, "295D65BB175E4E4EEF9003E008E093043C9B8CE43190BE0A2D8F1771F9837033"))
    {
      return 67;
    }
    else if (!strcmp(__s1, "97C8674BCC5158E92BF4C5A05149D966851A4049E662F540F6B03D6AD581EAE3"))
    {
      return 68;
    }
    else if (!strcmp(__s1, "0EE126743B64823629A81C2920FAA6966E0E52263862EF2A9F3DFF35C2AC8A9C"))
    {
      return 69;
    }
    else if (!strcmp(__s1, "D45640E968D6D66E66F8457BBE4543C7AD52C659AAC83DA1F84538E5A3422E7F"))
    {
      return 70;
    }
    else if (!strcmp(__s1, "44154E71B9E814B41C5ECA21680AC1383FF6126ED3EB45B479A9D67BA843AFB2"))
    {
      return 71;
    }
    else if (!strcmp(__s1, "37C7DEA7C7AC62E48672D62B73746ED032AC86A05AA223DB4F373D44F106CD6A"))
    {
      return 72;
    }
    else if (!strcmp(__s1, "42EA38C66C2CC54A764D5E204FF38F3402542A5F05B7731D549F22D745429051"))
    {
      return 73;
    }
    else if (!strcmp(__s1, "F6D454657EA6A999B3D168C1A68D6592B2F348BA088B279DBF0A992754767224"))
    {
      return 74;
    }
    else if (!strcmp(__s1, "C437CC379874665252F935CA927505B4C191927511AC72B4669F58BE3576516D"))
    {
      return 75;
    }
    else if (!strcmp(__s1, "63CA0F7A21417297C42CDF8868259FBCECF5C6A5C1C994C3A1CA5F608179B458"))
    {
      return 76;
    }
    else if (!strcmp(__s1, "75D1CF68BBA66F3E658B115EF614F1449D832863CAF5F46D092488791378897F"))
    {
      return 77;
    }
    else if (!strcmp(__s1, "058DEB9413998E950FC4226E0E272AFAF7557DF5129D7C7374655EB1CFDA77C5"))
    {
      return 78;
    }
    else if (!strcmp(__s1, "CFA032F2D29A5A051C9E0050D1DFA42F3E8112A934B9A17AC7C973D207993235"))
    {
      return 79;
    }
    else if (!strcmp(__s1, "B738AA29E795A9CAFDA6B743FE4B68F905E623302A5DE71A6B38401852D81CB4"))
    {
      return 80;
    }
    else if (!strcmp(__s1, "D73A9F216596E70D19B1F74DE41EEFB1A75CAB3823F2E0D1239E5F1FB9B6D40D"))
    {
      return 81;
    }
    else if (!strcmp(__s1, "ABB726B88EE52902918D7A6085403CE4DCA71804DD26B0CD6AF7B65F3E7500CF"))
    {
      return 82;
    }
    else if (!strcmp(__s1, "284BE43EB4908DBAA8A2B74BCB666EA0230514C2DD3AF9C77D20623852CB0D92"))
    {
      return 83;
    }
    else if (!strcmp(__s1, "0C763E061C178833BD52885B68343D76CDFCED5D51206DFC1A3DDE3BD4FA39D7"))
    {
      return 84;
    }
    else if (!strcmp(__s1, "B6F798954446EE61B4B6F9E14234CF2BB9558D9BCFEBFBAF3134CF51BDB370B3"))
    {
      return 85;
    }
    else if (!strcmp(__s1, "6154A03B5F85252391A19A31A8A44D2E5DFE993D77B3C3A50DA3990009A0E625"))
    {
      return 86;
    }
    else if (!strcmp(__s1, "EA836EBA2C0A7B3BED5ABDB96D9B623391DF35AC6186D459C8D3062213C1D8E2"))
    {
      return 87;
    }
    else if (!strcmp(__s1, "C02C23697E66132B8FFFAC249DBF633A97CFA692CDCE8AE3A840182863AB6EE8"))
    {
      return 88;
    }
    else if (!strcmp(__s1, "ECCA69648E94F50D0440D785106461FB6DEE6D369D319A9CA7CD9CF7C2A4EA61"))
    {
      return 89;
    }
    else if (!strcmp(__s1, "30C511991A56C9FE9B30FACC17BF86AE650C1DB1B66D9B19107F9CC769097340"))
    {
      return 90;
    }
    else if (!strcmp(__s1, "C27650C105DB677612F1E9F8232F2AA9D30A54B9223A181963447DD34D6AE9DE"))
    {
      return 91;
    }
    else if (!strcmp(__s1, "23756AABD0EA1A60AAA6F3289C152C912C9D461304216E43F65836C05E27ED67"))
    {
      return 92;
    }
    else if (!strcmp(__s1, "B6DCB4CCB503695CDDA1B5747ADBE4125D7F82EAFAA0E937A98724113EB1D727"))
    {
      return 93;
    }
    else if (!strcmp(__s1, "045052878913BCFB4518F5BF626951DB057E6BD2AC4BED3FAD09B84AD03A1DBD"))
    {
      return 94;
    }
    else if (!strcmp(__s1, "0AC3DEB7B7857ABC7031C0EB5FDDDEAE98F8A14C4F0B08255DC001F7DE977D5C"))
    {
      return 95;
    }
    else if (!strcmp(__s1, "0F46655CBD9E1B682631F1BEFAE3E0E81F9193AF0F1EAD29656ABDB3632DE244"))
    {
      return 96;
    }
    else if (!strcmp(__s1, "5D33B1B65FCFEAEB9146D7AAE9F282B0D99B1537E5B9D3079C85F88A599EBC07"))
    {
      return 97;
    }
    else if (!strcmp(__s1, "61C68100BE242001078E0A0FC57CC3D9EA793D0D5CACE34A32AD5603FB6936FA"))
    {
      return 98;
    }
    else if (!strcmp(__s1, "A705828E5FB8C152DCE53B6F6A5492B7514C11FF5CB01B85149DF5994A18B21D"))
    {
      return 99;
    }
    else if (!strcmp(__s1, "066723C9107184DA081F4D97E0290FCF8B7B75CB9631BDDD6D1E15186A341B6E"))
    {
      return 100;
    }
    else if (!strcmp(__s1, "DCE3F220104420D5EDC132F677A8C6A1257EF93B970E7DE664F8EE793CF1532A"))
    {
      return 101;
    }
    else if (!strcmp(__s1, "DCCC6EE977ED263F50E3DDE456DD372F0F537B4BFC8F164170391AFA99D96854"))
    {
      return 102;
    }
    else if (!strcmp(__s1, "6861705822904D595ABAA778F3DF9D975025CBD7C7674705BA752C7891BBC307"))
    {
      return 103;
    }
    else if (!strcmp(__s1, "F1C68883F5F9ED928E6A5BF31A6525992D8B07ABA1F8977BC437BD8286A63DD2"))
    {
      return 104;
    }
    else if (!strcmp(__s1, "0214ED3C57EB33DB2A5D42EE66D29ABF9D2D23258AE2BC458FBC6C3ACF7A0CBF"))
    {
      return 105;
    }
    else if (!strcmp(__s1, "C346BCA67550C99A599946885EDDF9B14D9B079D36A2DEC76BB68FC0ACBCA31F"))
    {
      return 106;
    }
    else if (!strcmp(__s1, "C525B796661267471CC4B306B845D23A9F4ED9F4D097BBC132C0E9A4F86183A9"))
    {
      return 107;
    }
    else if (!strcmp(__s1, "167624C4E0D84FF1B7DB7AF3A2D43D2BFC4EC9BBD1E18E616D0F00275FF15B32"))
    {
      return 108;
    }
    else if (!strcmp(__s1, "59D424C509360155E8355827007DA8E77475B13EC2D54CD5983573729A2B4942"))
    {
      return 109;
    }
    else if (!strcmp(__s1, "88ECEFCD1A9ACA3B39E3029D2EB12B722121FA0DA35ACE594F624FE4D83464D0"))
    {
      return 110;
    }
    else if (!strcmp(__s1, "5C375A462DB50DE2CCABAD8D1F37C06074032D3EC4196BD15CC09AC7C985383B"))
    {
      return 111;
    }
    else if (!strcmp(__s1, "C198C7A918CDFB2827306C31549DA06545879E8CFC1441823118729D8457BEB1"))
    {
      return 112;
    }
    else if (!strcmp(__s1, "3DCEDD6EF45622D3F5652B8EC88EFEF37CB00FE4FC16B84E577E6981B291FDD9"))
    {
      return 113;
    }
    else if (!strcmp(__s1, "D1ED7C08E70C720C20054F501D7EEEF6DCBE980A5D268FE88BAB3587F2838E52"))
    {
      return 114;
    }
    else if (!strcmp(__s1, "4713C70EDB33363B2C09D578EAF1776DAF492F1CF7FC8D5BA3CC2B74B6BCB97C"))
    {
      return 115;
    }
    else if (!strcmp(__s1, "E60420C1A25456D560E8CD9611A939376974BEBAFA619C12639380F0B31FD8B8"))
    {
      return 116;
    }
    else if (!strcmp(__s1, "526C20712356D4CB263465D867971F7887BB1970662A18C1A9E038A9A64F5905"))
    {
      return 117;
    }
    else if (!strcmp(__s1, "7401310D7AC47EE7D18793C9381D0E7B211C27413EED891054A50674A3A43D55"))
    {
      return 118;
    }
    else if (!strcmp(__s1, "E37B71F0829DCC5E49BFA2EC41E5995C98E0C6F9D6A50126D6813647621C31A9"))
    {
      return 119;
    }
    else if (!strcmp(__s1, "A60D3215F4F6222E067084EC53C4CB6D6F0C90C9CE2340806435D4D7B71CDE8D"))
    {
      return 120;
    }
    else if (!strcmp(__s1, "F01E4AED4622CF10C11CE6A7F898827E4AFD081185296BF76777B2207981E836"))
    {
      return 121;
    }
    else if (!strcmp(__s1, "164EEDE66D74F9279F17F86F1CDCA94299BF6213C2BA64E50786F8D0ABBCCAB9"))
    {
      return 122;
    }
    else if (!strcmp(__s1, "152B31D6CDC80AD2A7F1593F1E81074F9FEB957043B213E8537F5C9098DFD449"))
    {
      return 123;
    }
    else if (!strcmp(__s1, "C5B8AC3EFD6D9E22434A119330212D0B0CD6D432EDF6E86FCCEF7CCF823802C4"))
    {
      return 124;
    }
    else if (!strcmp(__s1, "0E8C0AF79B626C37D4BD04D61ACC6B1841B7F784FEF6692E84A2B1971C771CF6"))
    {
      return 125;
    }
    else if (!strcmp(__s1, "12038A812C239440324EDCEB54DA13B6B7D0C4D89F61582F9A4628C4409FAAE6"))
    {
      return 126;
    }
    else if (!strcmp(__s1, "12ADE1668F06776E2CE9CC2CC563E0BD45A5346C6D883D748FD3C132E7EB8A2F"))
    {
      return 127;
    }
    else if (!strcmp(__s1, "D5D2B254E0B808929711EBFC999F2E0F884DB9876C90B056E230E4DD6D3261CE"))
    {
      return 128;
    }
    else if (!strcmp(__s1, "CA5FDEAD1B2DEC16F5B525E9AE3CA7C4EDC163EEE950D7A77A7C5284A607369F"))
    {
      return 129;
    }
    else if (!strcmp(__s1, "28B92DE785184753FAF5508E080CB8FE784D6A5214E5E6382751D52534A72FCE"))
    {
      return 130;
    }
    else if (!strcmp(__s1, "316635C054256728753D20516A98550DBF581EBA16691321F7BBCE3A9177E09D"))
    {
      return 131;
    }
    else if (!strcmp(__s1, "D2D14661D9692EBD5065F06CB4C2AC7DD14339CAEA538D5AFA4A2B5813E87D5D"))
    {
      return 132;
    }
    else if (!strcmp(__s1, "96775CCE99E1AD0C194329938D933579304BAD868B3720C34D20D27536E7AEE7"))
    {
      return 133;
    }
    else if (!strcmp(__s1, "615761368EF9DB43D1A8DF2EF1CC087B17906454F025A1E1C5BB95B022582B9B"))
    {
      return 134;
    }
    else if (!strcmp(__s1, "2A5A81F290FDE6D31DB132DD493737A7252C441023286294F3C77CE48DD4E2F0"))
    {
      return 135;
    }
    else if (!strcmp(__s1, "7262FC4EB2434704063840AB716EF14B50F3A0E5E3457E8EBF9E014325CAE94F"))
    {
      return 136;
    }
    else if (!strcmp(__s1, "A2B9B85B3AADE88EBF43D3DB522C31E6A781700C0112047F72FA920A638A69BE"))
    {
      return 137;
    }
    else if (!strcmp(__s1, "D97205C2B224673AE923C3A7A003D96258A1A774E1C9E3CD513B0706C6657D48"))
    {
      return 138;
    }
    else if (!strcmp(__s1, "0C60DB8A2A73C9B343C4B279EDF24580976BD74BD0294B1AAC17B0A4273D8C28"))
    {
      return 139;
    }
    else if (!strcmp(__s1, "27A93DA3DF54447DCB9F371C54907BEFA8F17B7FA905EDAC2B523C7A0D93A918"))
    {
      return 140;
    }
    else if (!strcmp(__s1, "F98BB9D35C454CA00A884F6B9621A30F2C78A880A96D81B5E661391D74E8455A"))
    {
      return 141;
    }
    else if (!strcmp(__s1, "AC00030F77E6F4E41BF49DC8D7A42C68813DB0C3B652C340B340C01873EB0AB7"))
    {
      return 142;
    }
    else if (!strcmp(__s1, "BA7A33DF7A125E9EE5C1036DD6DADB3B74CC4B9BA9C5C1B235C131E70B7B4E41"))
    {
      return 143;
    }
    else if (!strcmp(__s1, "038FA673BF47F15B7C5236E4863A96C910C3993AB31529A041DE199F3EEB66CB"))
    {
      return 144;
    }
    else if (!strcmp(__s1, "E44B08E42854960D4B0277D46D6181F8B07FAC3C3CCF5A6B31AA9DC9FA4057D6"))
    {
      return 145;
    }
    else if (!strcmp(__s1, "B80C09BAE4062CCC534F6E6EF6EA6E0ABEFF12048A342EB3138E7B76890D8D3B"))
    {
      return 146;
    }
    else if (!strcmp(__s1, "00EB2F035A98609505AB8DAB9B98D1FECEAA766F368932F7FE6316AE8BAEFBE0"))
    {
      return 147;
    }
    else if (!strcmp(__s1, "6368DD78E9738AAB3001F4C17EBE26BFB0414CDCC1399D092A48AB5A57536454"))
    {
      return 148;
    }
    else if (!strcmp(__s1, "C0909793BE0330B378C0CD09F0D9B9F09F599EC8C6B94C37ABA9011E83596F90"))
    {
      return 149;
    }
    else if (!strcmp(__s1, "11221127E966E92C6C18F64D312E8C9AF73DB3A9DB792E4442FCECE644A8E7B1"))
    {
      return 150;
    }
    else if (!strcmp(__s1, "FED7B076A3D7DE52B6D9A21D14FB1A49BABF975B73BE74181C4EA26976162724"))
    {
      return 151;
    }
    else if (!strcmp(__s1, "26456E27CBF6165D84C883AC666AF50E5EAAA39D07887C37BD3A9BD26A74B2FE"))
    {
      return 152;
    }
    else if (!strcmp(__s1, "F365A0CC0EEB38797FCD82D5E4AC3B2ACF44EB34D333D4AB1AD8D8891B7F8892"))
    {
      return 153;
    }
    else if (!strcmp(__s1, "A5F302F870E09D718474CBCADD4E0B3589351A5007777F1B805169B54226B875"))
    {
      return 154;
    }
    else if (!strcmp(__s1, "903B8B51F5368A75F9777D9155C6A2664116770701ED241A6D1662131A802333"))
    {
      return 155;
    }
    else if (!strcmp(__s1, "DD96D75C3E233EE9B4528803691C00E98D5F49F2B4B3B83676332ABFBB65DE07"))
    {
      return 156;
    }
    else if (!strcmp(__s1, "F2F4280636DC1065AEFE537517EE6B816C8133EF2E5C106D92DDD2B0E0DFC69D"))
    {
      return 157;
    }
    else if (!strcmp(__s1, "EA4B7DF630D01A5FC30F51DEEC420CB0F667CC57639F1C1D8E67D97B12524E0C"))
    {
      return 158;
    }
    else if (!strcmp(__s1, "89DBD24AAAD1D4D50F3F74A7040B52C5B06B4768F1E09DC89D4067D243744882"))
    {
      return 159;
    }
    else if (!strcmp(__s1, "F942A7256C77ACD182AE0B767F21133B11937660A61610A18CD14087D1F2F71C"))
    {
      return 160;
    }
    else if (!strcmp(__s1, "A739EE6D2886FEBC60795D1D8803BF19A1A3463541AB6024A90DBB8E4650F589"))
    {
      return 161;
    }
    else if (!strcmp(__s1, "7B872939683DD4D93E917C20089932C93AACDE7E7C0738CB78026B6FC178B1D9"))
    {
      return 162;
    }
    else if (!strcmp(__s1, "9EB2D21E75D0AA677C8D110763485DB3A78262C89D05CA0C3AF7EBD2D6AB99DD"))
    {
      return 163;
    }
    else if (!strcmp(__s1, "AC7E4629ABFA704A6369754CB199383D2901F0916E230FB75D765420550E8244"))
    {
      return 164;
    }
    else if (!strcmp(__s1, "FF9225FC7116F7583194D2D2F948E6CFD131F9020C7B7C9D61A8DE2F46571C5F"))
    {
      return 165;
    }
    else if (!strcmp(__s1, "3216E3D0006FC749B832DD3C33FF4B7CAE3CE455B3FE030A3EB061DC0356D829"))
    {
      return 166;
    }
    else if (!strcmp(__s1, "2F5E861CD13CBCECC15CB691FCC7DCE54FC0755F96F1289D26AFB056BD6788D5"))
    {
      return 167;
    }
    else if (!strcmp(__s1, "83CF792CEDB646E6CAFF1BCC76E8DFB7FF51A50875049FEF596900D59D6A5063"))
    {
      return 168;
    }
    else if (!strcmp(__s1, "BA803B54C15A39AF7A61D86AA72C0960C2B897521015CDEF204CA5CECBB91072"))
    {
      return 169;
    }
    else if (!strcmp(__s1, "402C26288D835CFCE4962372266741D147E53F41D456B73D02938C3C1D4BD839"))
    {
      return 170;
    }
    else if (!strcmp(__s1, "6634D05466F515CAD98B1548EE7DCC52386712E059BE4C1A3FBB157892D9D61E"))
    {
      return 171;
    }
    else if (!strcmp(__s1, "C1F228965CE72DCBDF0563CA9125430BFC5215644CF7426375AAE844D9C393CF"))
    {
      return 172;
    }
    else if (!strcmp(__s1, "860E5D173A5DA8DE4C5A88EDDF57BFB0D9E7D010DFD109852AF3D1C8480DE485"))
    {
      return 173;
    }
    else if (!strcmp(__s1, "1E95F2EC42D9C8BCDDA799372B28B445C5807F73AC0A88117EE9819CECB7B2C2"))
    {
      return 174;
    }
    else if (!strcmp(__s1, "FBF25B757E387E5538EE893DFCD803EF74AC4FDE7BD9AC9064121A84F2E26715"))
    {
      return 175;
    }
    else if (!strcmp(__s1, "E9DD4EFE9ABCE80DF05B97D5043161FCF2371855DF6715BE46971FCE7EBE2B32"))
    {
      return 176;
    }
    else if (!strcmp(__s1, "20FE67CA0BC6365A5F2E83A71443FCD1FF79D0FB655A2B26EF0293D935F451AD"))
    {
      return 177;
    }
    else if (!strcmp(__s1, "DFAD6694DAD2CF309685D73CC39C1523D4D92A94D9CBD4B16F3468EB89D1A732"))
    {
      return 178;
    }
    else if (!strcmp(__s1, "137C754E9BEA98B17962D83B8E9EBF70D33891C8B32A876D13CD776C2EB805CD"))
    {
      return 179;
    }
    else if (!strcmp(__s1, "97448FE09776C5C51AE32BFC9D1EE9728156924E321AAA8318E2F2A1C2A62C31"))
    {
      return 180;
    }
    else if (!strcmp(__s1, "BECA30E32A8DD8B418D4AC9150B23FC3F4AAAAFCA128274C1DE87621A54FF840"))
    {
      return 181;
    }
    else if (!strcmp(__s1, "D74797F7B8D690624B1F756C30E55986965EB05837E721FA720A2DE0B8E56C30"))
    {
      return 182;
    }
    else if (!strcmp(__s1, "C0B7EF990ADBF3FF96B6F2BE59AAD1B6B9F4FE088B93B70A5FA1F0B63BA86F4C"))
    {
      return 183;
    }
    else if (!strcmp(__s1, "5B4446A6E3D13E950BC7F482E0A1C6555A187EE5321E7294F0E604F3BA96322F"))
    {
      return 184;
    }
    else if (!strcmp(__s1, "A2AEBDCCCD11BCF937DC0DE23C78762A9FD1425DA34EE911F615F041D947D3CE"))
    {
      return 185;
    }
    else if (!strcmp(__s1, "168D9C154D599835B3232AA4F8CDA23177190B54D01FFF59C94A9BD7332F0761"))
    {
      return 186;
    }
    else if (!strcmp(__s1, "C517BA395C2A64392D1C11AE86475E6F476E22867252458FCC5152B58A43603D"))
    {
      return 187;
    }
    else if (!strcmp(__s1, "E5FA747F28EBFE3E4BBD4BE279044F914B09502E3EB62035341300536242F90B"))
    {
      return 188;
    }
    else if (!strcmp(__s1, "7973408EAAC4FAF261DDB68AD698E34EFC1018CD38876DB49DA34E1C044F2CFC"))
    {
      return 189;
    }
    else if (!strcmp(__s1, "18974CEA3A33281B8436277C48EB0BB5EEA5111C4544565257A2EA24EEA75CDA"))
    {
      return 190;
    }
    else if (!strcmp(__s1, "AED7BFB3A042F79BC64BB54CC5BDBA86C0D8C2786730E5C6C09252A4BB9F5CBC"))
    {
      return 191;
    }
    else if (!strcmp(__s1, "7EFBE7B468F2C8FF4C34E67EDC7E8F80DB3E295C6221F8408D4440A78430C64F"))
    {
      return 192;
    }
    else if (!strcmp(__s1, "D67C31C99E39309E5E09E11F7A5E7B3576972C57135463976A5539814860D051"))
    {
      return 193;
    }
    else if (!strcmp(__s1, "140886F02BB994604FFA8022CFFAB05A4BE1590A6805FAF9162497C81F05BBFE"))
    {
      return 194;
    }
    else if (!strcmp(__s1, "3473F3E1E2A85DAEEB664F0C421CDF84D3B27258796FFBB2881208B73DEFC007"))
    {
      return 195;
    }
    else if (!strcmp(__s1, "CBB7FC5C90F6950C90B30709E38AC295085E9F9A5D82EB5DF56E89752A1E0252"))
    {
      return 196;
    }
    else if (!strcmp(__s1, "F5B97BA71877E7014D8BB80B1B5750123154A26D4FD86B41AE0525EDEF44A41B"))
    {
      return 197;
    }
    else if (!strcmp(__s1, "E2175386E8858E1E5273EB120A19C734896FE34E529B7720E38F90C3E66633CC"))
    {
      return 198;
    }
    else if (!strcmp(__s1, "1513162A9F37F71138014E6B4184BAD2DA941D4140D9F8F006E771B77F5BC38B"))
    {
      return 199;
    }
    else if (!strcmp(__s1, "C648A066B5DF92C6610FB4DD77453469B226FC0B0B2903FDA7E76C7AD03011AC"))
    {
      return 200;
    }
    else if (!strcmp(__s1, "A5AD2AAF51022A15627C4C6C3F18D612BFF2CA7F01F65EC1C26965ED6DDC6563"))
    {
      return 201;
    }
    else if (!strcmp(__s1, "BEE28431C5E817DF3C9C265B3672660D03A6C89EE5236507323554958AE59578"))
    {
      return 202;
    }
    else if (!strcmp(__s1, "1F6D45D5DEB05AFFD7C7C1DAC38D882FA9A9D616990FBB135621C1F0D30CA596"))
    {
      return 203;
    }
    else if (!strcmp(__s1, "24B2EDEBE37A35C073BBC2B83505D52B7FDB9C121406C6308CF528457883D4BE"))
    {
      return 204;
    }
    else if (!strcmp(__s1, "D51129E2277ED8B7AE37E82DA9F8FEB9C3FDB71EC4E4B5548B4D3763A89AF1C2"))
    {
      return 205;
    }
    else if (!strcmp(__s1, "CFEE285EA42317F1E8CE16B6BAED451F1D8029F8C057963B2486EA9093B3CD28"))
    {
      return 206;
    }
    else if (!strcmp(__s1, "C46314BBA0AA01362E06989DA928CE0AED5C5A628892598193CCE37C495FE865"))
    {
      return 207;
    }
    else if (!strcmp(__s1, "74B8506E0293EF192597C6C641B6C4C6A59F95177448E44017C4210467A625AC"))
    {
      return 208;
    }
    else if (!strcmp(__s1, "380FDF6575F27B17985711ECE0E551113641F9F9447B55D386C6BBDE95DBA9DE"))
    {
      return 209;
    }
    else if (!strcmp(__s1, "DC615E09F661E340E6495BF8406FDB597D2C6B7CD5AB0CA1E1155D715C73C434"))
    {
      return 210;
    }
    else if (!strcmp(__s1, "AEB4C02667999241FFC01E220B4443963E1B34D3ACD2C5545F5BBE1143870378"))
    {
      return 211;
    }
    else if (!strcmp(__s1, "98A511FEF2F07DAECD3383521C19383B6DCA2C733FA4611CDFA49CC62B7B5181"))
    {
      return 212;
    }
    else if (!strcmp(__s1, "40A9788933E5BA39796E86A50864B263BC0F2291A4B895C7EA6BBB144E5DACA5"))
    {
      return 213;
    }
    else if (!strcmp(__s1, "51A34CA49D64B984F464BC878382CDD07EEF0B001EBE4F2E95026F21673969A7"))
    {
      return 214;
    }
    else if (!strcmp(__s1, "D469DF7536BAE8E1DE2CB8B3C1E14B4133343771592D97C7BCEC1D03BF0EE40A"))
    {
      return 215;
    }
    else if (!strcmp(__s1, "83B2F8BA9316B9EFB16E84445A86F4306028A166E21E7B350C8D908E696445FC"))
    {
      return 216;
    }
    else if (!strcmp(__s1, "ECE8C77FAA463F6CD7C69976F66D170E06AABA1F8EAADE7E5C2EF059C7FD1BC6"))
    {
      return 217;
    }
    else if (!strcmp(__s1, "06E83674FEE3BAEADDA04BCE4F798E64EAF9562959486A334178EFE9614AFE02"))
    {
      return 218;
    }
    else if (!strcmp(__s1, "92CB5205D6DC7B8CF67306FCBBF4D2E22C50A82E14C323C9869A8154961E1379"))
    {
      return 219;
    }
    else if (!strcmp(__s1, "CFC88028D48CFFC122779E410D958A0644A7B3219492B8F56805460AE11D3317"))
    {
      return 220;
    }
    else if (!strcmp(__s1, "87BA80BEA278BCBDE11D4ADFEA6B3C8BEF365D8260CDE3591D5B76B2C36DD853"))
    {
      return 221;
    }
    else if (!strcmp(__s1, "C38EE6AA610415ACB3D10D68E346EE868CDB70CFC2F46D887E5E152FD4A256B2"))
    {
      return 222;
    }
    else if (!strcmp(__s1, "D2D6A9827703DC8826305F130123DE83C3648F82DCB4F96DFCD7E33EA799BD62"))
    {
      return 223;
    }
    else if (!strcmp(__s1, "9B37F49C310110FE3C1D0349A0DBD1F4165E5E1873418FE3D8E02DBD2C42360F"))
    {
      return 224;
    }
    else if (!strcmp(__s1, "3E6CC5C197ACBED66DB18F36FE33CAF7D744175ADB2FE6C6FAE97B0CBB5B21CD"))
    {
      return 225;
    }
    else if (!strcmp(__s1, "250DFDD8D5BC61F9B0D9CD91F4DDCE0E4799ED7B1264EEF03FAD66612BCA288D"))
    {
      return 226;
    }
    else if (!strcmp(__s1, "6EA38ABD760FE83DDB724F359C9F761841C5BD69E5DCCC1C211D42F98751EF80"))
    {
      return 227;
    }
    else if (!strcmp(__s1, "F9F04A751DF32AED42FF9EFB131D3CD40E499AA0A99A68D0DD6778167E42BF26"))
    {
      return 228;
    }
    else if (!strcmp(__s1, "5BA476059E7B48575673F80A8DC1251E26C5B23F5DCF5BCB3AB1251D0D3424E8"))
    {
      return 229;
    }
    else if (!strcmp(__s1, "357D351342C59B72F21BD4580AD1B2F1C4C47D0006AB615A4760BC3BEBD99E48"))
    {
      return 230;
    }
    else if (!strcmp(__s1, "D613D0441777617363D2EF9031155D28A493ED4CF2B714C61332BEB8E694A21C"))
    {
      return 231;
    }
    else if (!strcmp(__s1, "8751E932723FAB8324B1EFAB05DE911953F94AB079963EC9D4882EC0F853207E"))
    {
      return 232;
    }
    else if (!strcmp(__s1, "EA870EDD0C8AD026DB44FB5C6AC53D8875D62255F794C489EAB9F8222F0616CB"))
    {
      return 233;
    }
    else if (!strcmp(__s1, "B0D00D3E15F0D45E0DAD2FE819496F3837110BDADE01AC3A17862CDDACDEE5AB"))
    {
      return 234;
    }
    else if (!strcmp(__s1, "7B4CF9B631F81D78F2CEA2F4869D0137BE4CA667AE9B13DB22A617C2BA15C075"))
    {
      return 235;
    }
    else if (!strcmp(__s1, "CA1DD5B830AB9668FC5EBD5904EB9B0113C766FCE57EF59AEC58982AE744413A"))
    {
      return 236;
    }
    else if (!strcmp(__s1, "2D29DA77B4EF8E7B1D2F3F764587274747D1C2AB05C053B4CE38AE701116BF6A"))
    {
      return 237;
    }
    else if (!strcmp(__s1, "83156D57355E76E46E7319E18EA9D6A8D20E78958733028FD3F74C3FD9B0BCC5"))
    {
      return 238;
    }
    else if (!strcmp(__s1, "95DD082534B76465BAA6B38551429C11CD11A77CB351740B05F3D18D2CD2B990"))
    {
      return 239;
    }
    else if (!strcmp(__s1, "996E91405229B0F31165936664CCE9F7D3145963C1A14FA9DD57A320E349F123"))
    {
      return 240;
    }
    else if (!strcmp(__s1, "294111BEC0EE4CFDDCE430D197B75A1CB09E21EB1C822E16CD1CBCC982D46A3F"))
    {
      return 241;
    }
    else if (!strcmp(__s1, "727820125C45F365E03E3C14E8202CFF1E0049F24543B5D589F3956E11F5C581"))
    {
      return 242;
    }
    else if (!strcmp(__s1, "33634F0DC72BA827D588E38DC75C388CF4976E4671D85148780CFAFD262B07FB"))
    {
      return 243;
    }
    else if (!strcmp(__s1, "FD6F91B4C067953424B95F0B332F0FB4A64F7E43DC4D6E8CDE26B1D5D7C07A42"))
    {
      return 244;
    }
    else if (!strcmp(__s1, "50E7E1AAC46F3CF79A6B3BB2DDC0BCDCF0ACD9011439415E47AEA7B6579F3EA8"))
    {
      return 245;
    }
    else if (!strcmp(__s1, "25C93B5B4A76FFE8A20CA68271CF612F43D0B5504B6680945F3BB046DA47213A"))
    {
      return 246;
    }
    else if (!strcmp(__s1, "B6B78FABA9FD12B688986DC5EA4D4B8B731265EDEC1E5AE52B0CAA6FC31801F2"))
    {
      return 247;
    }
    else if (!strcmp(__s1, "7F94E8CDDF759E47648859D758AC1D2F3A203FDADD7EBE71974F98670262F0E1"))
    {
      return 248;
    }
    else if (!strcmp(__s1, "EE8BC6D1FFF4A5A917BB00BF2D4D1731C21189C48D1E9BC5D3ADA75BBEFB1B21"))
    {
      return 249;
    }
    else if (!strcmp(__s1, "B4FDED34CDC40097AF8781159958E328E97F9506A54251304F3044F35734BA1F"))
    {
      return 250;
    }
    else if (!strcmp(__s1, "8DE3EB67F4A5DDDF3DF41FF1DCEC7946DE4C0AC8C6E18A46B9A3E61C6C497F69"))
    {
      return 251;
    }
    else if (!strcmp(__s1, "55DDF08ED5B641C5048444150A2D58A930D81F86EEA506CD8B4073F64FC0F1C2"))
    {
      return 252;
    }
    else if (!strcmp(__s1, "C4B3D90E89BC6B96BEB336D1A17757038334C2A490EDF56428037F1BC405BF70"))
    {
      return 253;
    }
    else if (!strcmp(__s1, "E0822A12A8DD1B222198A771537F2CE4899EB45BC94D7854E0E6FA983E6EBC89"))
    {
      return 254;
    }
    else if (!strcmp(__s1, "FB75B1EE028F765D95134B65BAFD26602EE879B247F31514268AFE1DF00830D4"))
    {
      return 255;
    }
    else if (!strcmp(__s1, "C8CAD3DF32303A6876151218FAAA63CA0642964F0528B51E0F3BBA792A0FA006"))
    {
      return 256;
    }
    else if (!strcmp(__s1, "EED11884758646FD70438F8D2661EC13F25DF1E40EC651E073736D2EFDAB9F0D"))
    {
      return 257;
    }
    else if (!strcmp(__s1, "E01BD71065BD9CE02CFEEC935E09F6DE3C3B9EFAED8F187A533C6321069B4D85"))
    {
      return 258;
    }
    else if (!strcmp(__s1, "D1922B4CF1F4DC1E2062378D34EE4E6EAB398BD0417BC95E5EF60C5C1F53E035"))
    {
      return 259;
    }
    else if (!strcmp(__s1, "7D8633F6EB10ABA43002BB46D28FA26BFFA1093AB39728908221CE3FD922C72D"))
    {
      return 260;
    }
    else if (!strcmp(__s1, "DFF91EC9DAE4F9D14485F569D87B6AC75F93DD47C850ACF09E9DD7A3D0EFCE8A"))
    {
      return 261;
    }
    else if (!strcmp(__s1, "8F37B8C186E20EAB68B65FA965112E8C106205370CA0829C3EBD548C49C99A46"))
    {
      return 262;
    }
    else if (!strcmp(__s1, "3FAA4DE8275531852B39C91E52291523AEA993A6114D2CF7645F7C8AC1EF27CE"))
    {
      return 263;
    }
    else if (!strcmp(__s1, "6FFBFD65F64B0F892C812D9952748E8632E02C4DF155F5E233927E6D0DC88D38"))
    {
      return 264;
    }
    else if (!strcmp(__s1, "2660D91E9E44E8375C647F1F4FDD89923B3BFA26A3AF29D5937BAF8EF1E10CFE"))
    {
      return 265;
    }
    else if (!strcmp(__s1, "3CCBBD2DBDE74F294638B5661472C6041FD802D082125437CB926C2F4E201182"))
    {
      return 266;
    }
    else if (!strcmp(__s1, "0597494BBDA7FA995805FB01DD8AD6D81CC143C09F8EFB86702288F745E3F791"))
    {
      return 267;
    }
    else if (!strcmp(__s1, "0AF6A9208DBB7C0C06A19C4C9090BF87CF00BBEE2BDFD9E0C49423DD641C1174"))
    {
      return 268;
    }
    else if (!strcmp(__s1, "6CFA2D1125EAFC658FDF0E2F1A1B4F8D315296A1AFB116D0A8ECF669C026FF69"))
    {
      return 269;
    }
    else if (!strcmp(__s1, "0D32627A10C5DB983D8E5DF466E154001CBB4E945D22A4E280A08C8D0F1701A7"))
    {
      return 270;
    }
    else if (!strcmp(__s1, "B6C42286FD0AB628E79B9D4F5F10DC31C2DFD460570800BEB5C9E53651363C7D"))
    {
      return 271;
    }
    else if (!strcmp(__s1, "5DCA18DF36F9FA665E30157E71359C15F04492B59DA944CC2B10D7A925843DA7"))
    {
      return 272;
    }
    else if (!strcmp(__s1, "5851D9888A5EE313F6D80CC60F6BB6ADFC20BB0BA8D9BED753F04382DF6BED1A"))
    {
      return 273;
    }
    else if (!strcmp(__s1, "FD406D36CD5763CFC9F0DD6C37C7BDC528ADF3990CF9725229F4258C1758C94D"))
    {
      return 274;
    }
    else if (!strcmp(__s1, "EC02EE62A95DE2B0B2BC9C65A400E1318CFD7FFA894EECC7B23F8FB164A10C08"))
    {
      return 275;
    }
    else if (!strcmp(__s1, "54D70702DEC6F85C65B8D1E26F089610058B0CDC6B23440F6FD07F26E6E23315"))
    {
      return 276;
    }
    else if (!strcmp(__s1, "244B94B5F2129A5A0083F3661EAC9C6B9EB5FB62A499E6ED236452F5BE6828F5"))
    {
      return 277;
    }
    else if (!strcmp(__s1, "2C9ACA342CA7C8F4A29CA1C798155F709AC8B8D95F0D20C549DBC00F1C42184D"))
    {
      return 278;
    }
    else if (!strcmp(__s1, "972B60C198C39199A11F25454037CADA381BB118BE18D850A36534F88A82B7F1"))
    {
      return 279;
    }
    else if (!strcmp(__s1, "0AAC94B02176D8B144479EAFEE546A608C8B5E61D7A27481868626A7820E0CB1"))
    {
      return 280;
    }
    else if (!strcmp(__s1, "5537928133BBD235A03487186F42FBFF9D0FC45873C83FD5219EB5EBF500ED10"))
    {
      return 281;
    }
    else if (!strcmp(__s1, "1ADDCB1D74CE36E8E4C6007CDB14DD6A053A9C2FBDB707345B3C5E7BB07299AA"))
    {
      return 282;
    }
    else if (!strcmp(__s1, "353FBA19946FC52BCED9C06F6EE4844496369F4985110F6E78E467505E48C88F"))
    {
      return 283;
    }
    else if (!strcmp(__s1, "E2D94E3051875514422124C186B05CDA6F417AF1FC67511A17055B65BED227AA"))
    {
      return 284;
    }
    else if (!strcmp(__s1, "E9FDDF0E4E3D3ABB4D40C135F207C0310E5BE4CCF2EC1099CB89594DD756B745"))
    {
      return 285;
    }
    else if (!strcmp(__s1, "A6DE7D11FD45FD0B0F5541862F786FAAA17E530F3CBAC5CE63EFD6C7B7B8EC27"))
    {
      return 286;
    }
    else if (!strcmp(__s1, "53E08B2D38CDBBC0D198B95302BCC632B50E773651E9BA4C57373B002114CBBC"))
    {
      return 287;
    }
    else if (!strcmp(__s1, "000DAB9E75390C26D045E00DFBE36CBC2FFBD42E8B0530540C4DCD8981FB52C9"))
    {
      return 288;
    }
    else if (!strcmp(__s1, "20704FA8349FC82949E901F75BCF6DA19690A9A2FE0383950F4A47E8056DB114"))
    {
      return 289;
    }
    else if (!strcmp(__s1, "768E15468DD7366F4763C6D1E172AFF1731073A8C04B89CE1D9C2920364B4386"))
    {
      return 290;
    }
    else if (!strcmp(__s1, "33B334FD12A6201DB49E4003CB6BB2666575C9DF119DB5CF714FF5C4CF8B9156"))
    {
      return 291;
    }
    else if (!strcmp(__s1, "E21086636B17AA11D0ECA0545AB90C82D396EB03C6D33A9DE49DEEC71BFEC9A3"))
    {
      return 292;
    }
    else if (!strcmp(__s1, "18487C9D7CEF0D61908387ACBCC7316000F44757B4F9C98EA18217C35C6ECF85"))
    {
      return 293;
    }
    else if (!strcmp(__s1, "274A1E04D620A2A93E0AAFC7DB5F0BC3A6322D745709FD3011852A7608D0DC59"))
    {
      return 294;
    }
    else if (!strcmp(__s1, "A6C2B5EE1745CD5EB5C81F2B31F5E946A0C1BDC93B226BB05571EFA08555EF8F"))
    {
      return 295;
    }
    else if (!strcmp(__s1, "2E0EE94947E219E4D34F16A40C302DB5FA44C7B9EA4630D8C0F56ED4D1ACE48E"))
    {
      return 296;
    }
    else if (!strcmp(__s1, "04277177F6AEF2AE45F19B0C9C9E5A0BD94A52E04CBC3126862B455BE12A4396"))
    {
      return 297;
    }
    else
    {
      return 298;
    }
  }
  return result;
}

uint64_t sub_F5E04(uint64_t a1, unsigned int a2)
{
  unsigned int v2 = a2 - 128;
  if (a2 < 0x80)
  {
    uint64_t v3 = (char *)&unk_4C7040 + 4 * (int)a2;
    return *(unsigned int *)v3;
  }
  if (v2 < 0x40)
  {
    uint64_t v4 = (char *)&unk_4C7240;
LABEL_9:
    uint64_t v3 = &v4[4 * v2];
    return *(unsigned int *)v3;
  }
  unsigned int v2 = a2 - 192;
  if (a2 - 192 < 0x40)
  {
    uint64_t v4 = (char *)&unk_4C7340;
    goto LABEL_9;
  }
  unsigned int v2 = a2 - 256;
  if (a2 - 256 < 0x2A)
  {
    uint64_t v4 = (char *)&unk_4C7440;
    goto LABEL_9;
  }
  return 20;
}

void sub_F5E70(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *a2;
  *a2 = 0;
  *(void *)a1 = v11;
  bzero((void *)(a1 + 8), 0x6598uLL);
  *(void *)(a1 + 26016) = a6;
  *(void *)(a1 + 26032) = a3;
  uint64_t v12 = (void **)(a1 + 26064);
  *(_OWORD *)(a1 + 26040) = 0u;
  *(_OWORD *)(a1 + 26072) = 0u;
  *(_OWORD *)(a1 + 26088) = 0u;
  *(_OWORD *)(a1 + 26104) = 0u;
  *(_OWORD *)(a1 + 26056) = 0u;
  unint64_t v13 = sub_5714(a1 + 26056, 1uLL);
  unint64_t v14 = *(char **)(a1 + 26048);
  uint64_t v15 = *(char **)(a1 + 26040);
  uint64_t v17 = &v13[v16];
  *unint64_t v13 = a4;
  unint64_t v18 = v13 + 1;
  while (v14 != v15)
  {
    uint64_t v19 = *((void *)v14 - 1);
    v14 -= 8;
    *--unint64_t v13 = v19;
  }
  *(void *)(a1 + 26040) = v13;
  *(void *)(a1 + 26048) = v18;
  *(void *)(a1 + 26056) = v17;
  if (v15) {
    operator delete(v15);
  }
  *(void *)(a1 + 26048) = v18;
  unint64_t v20 = *(char **)(a1 + 26072);
  unint64_t v21 = *(void *)(a1 + 26080);
  if ((unint64_t)v20 >= v21)
  {
    uint64_t v23 = (char *)*v12;
    uint64_t v24 = (v20 - (unsigned char *)*v12) >> 3;
    unint64_t v25 = v24 + 1;
    if ((unint64_t)(v24 + 1) >> 61) {
      sub_566C();
    }
    uint64_t v26 = v21 - (void)v23;
    if (v26 >> 2 > v25) {
      unint64_t v25 = v26 >> 2;
    }
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v27 = v25;
    }
    if (v27)
    {
      unint64_t v28 = (char *)sub_5714(a1 + 26080, v27);
      unint64_t v20 = *(char **)(a1 + 26072);
      uint64_t v23 = *(char **)(a1 + 26064);
    }
    else
    {
      unint64_t v28 = 0;
    }
    uint64_t v29 = &v28[8 * v24];
    unint64_t v30 = &v28[8 * v27];
    *(void *)uint64_t v29 = a5;
    uint64_t v22 = v29 + 8;
    while (v20 != v23)
    {
      uint64_t v31 = *((void *)v20 - 1);
      v20 -= 8;
      *((void *)v29 - 1) = v31;
      v29 -= 8;
    }
    *(void *)(a1 + 26064) = v29;
    *(void *)(a1 + 26072) = v22;
    *(void *)(a1 + 26080) = v30;
    if (v23) {
      operator delete(v23);
    }
  }
  else
  {
    *(void *)unint64_t v20 = a5;
    uint64_t v22 = v20 + 8;
  }
  *(void *)(a1 + 26072) = v22;
  operator new[]();
}

void sub_F6064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v17 = (void *)v10[3261];
  if (v17)
  {
    v10[3262] = (uint64_t)v17;
    operator delete(v17);
  }
  unint64_t v18 = *v14;
  if (*v14)
  {
    v10[3259] = (uint64_t)v18;
    operator delete(v18);
  }
  uint64_t v19 = *v15;
  if (*v15)
  {
    v10[3256] = (uint64_t)v19;
    operator delete(v19);
  }
  unint64_t v20 = (void *)v10[3247];
  if (v20)
  {
    v10[3248] = (uint64_t)v20;
    operator delete(v20);
  }
  uint64_t v21 = 0;
  while (1)
  {
    uint64_t v22 = (void *)v10[v21 + 3244];
    if (v22)
    {
      v10[v21 + 3245] = (uint64_t)v22;
      operator delete(v22);
    }
    v21 -= 3;
    if (v21 == -150)
    {
      uint64_t v23 = 3000;
      while (1)
      {
        uint64_t v24 = (void *)v10[v23 + 94];
        if (v24)
        {
          v10[v23 + 95] = (uint64_t)v24;
          operator delete(v24);
        }
        v23 -= 3;
        if (!(v23 * 8))
        {
          sub_F6144(v13);
          sub_F6B4C(v12);
          sub_F61C0(a10);
          sub_F6DBC(v11);
          uint64_t v25 = *v10;
          *uint64_t v10 = 0;
          if (v25) {
            (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
          }
          _Unwind_Resume(a1);
        }
      }
    }
  }
}

uint64_t sub_F6144(uint64_t a1)
{
  uint64_t v7 = (void **)(a1 + 96);
  sub_F6AB4(&v7);
  unsigned int v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(void *)(a1 + 56) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 24);
  if (v4)
  {
    *(void *)(a1 + 32) = v4;
    operator delete(v4);
  }
  int v5 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v5;
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_F61C0(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(void *)(a1 + 56) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 24);
  if (v4)
  {
    *(void *)(a1 + 32) = v4;
    operator delete(v4);
  }
  int v5 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v5;
    operator delete(v5);
  }
  return a1;
}

uint64_t *sub_F6228(uint64_t *a1)
{
  if (a1[3253]) {
    operator delete[]();
  }
  unsigned int v2 = (void *)a1[3261];
  if (v2)
  {
    a1[3262] = (uint64_t)v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[3258];
  if (v3)
  {
    a1[3259] = (uint64_t)v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[3255];
  if (v4)
  {
    a1[3256] = (uint64_t)v4;
    operator delete(v4);
  }
  int v5 = (void *)a1[3247];
  if (v5)
  {
    a1[3248] = (uint64_t)v5;
    operator delete(v5);
  }
  for (uint64_t i = 0; i != -150; i -= 3)
  {
    uint64_t v7 = (void *)a1[i + 3244];
    if (v7)
    {
      a1[i + 3245] = (uint64_t)v7;
      operator delete(v7);
    }
  }
  uint64_t v8 = 3000;
  do
  {
    uint64_t v9 = (void *)a1[v8 + 94];
    if (v9)
    {
      a1[v8 + 95] = (uint64_t)v9;
      operator delete(v9);
    }
    v8 -= 3;
  }
  while (v8 * 8);
  unint64_t v20 = (void **)(a1 + 94);
  sub_F6AB4(&v20);
  uint64_t v10 = (void *)a1[91];
  if (v10)
  {
    a1[92] = (uint64_t)v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)a1[88];
  if (v11)
  {
    a1[89] = (uint64_t)v11;
    operator delete(v11);
  }
  uint64_t v12 = (void *)a1[85];
  if (v12)
  {
    a1[86] = (uint64_t)v12;
    operator delete(v12);
  }
  uint64_t v13 = (void *)a1[82];
  if (v13)
  {
    a1[83] = (uint64_t)v13;
    operator delete(v13);
  }
  sub_F6B4C(a1 + 34);
  unint64_t v14 = (void *)a1[31];
  if (v14)
  {
    a1[32] = (uint64_t)v14;
    operator delete(v14);
  }
  uint64_t v15 = (void *)a1[28];
  if (v15)
  {
    a1[29] = (uint64_t)v15;
    operator delete(v15);
  }
  uint64_t v16 = (void *)a1[25];
  if (v16)
  {
    a1[26] = (uint64_t)v16;
    operator delete(v16);
  }
  uint64_t v17 = (void *)a1[22];
  if (v17)
  {
    a1[23] = (uint64_t)v17;
    operator delete(v17);
  }
  sub_F6DBC((uint64_t)(a1 + 1));
  uint64_t v18 = *a1;
  *a1 = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  return a1;
}

void sub_F63C8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a1 + 26048) = *(void *)(a1 + 26040);
  *(void *)(a1 + 26072) = *(void *)(a1 + 26064);
  *(void *)(a1 + 16) = *(void *)(a1 + 8);
  *(void *)(a1 + 40) = *(void *)(a1 + 32);
  *(void *)(a1 + 64) = *(void *)(a1 + 56);
  *(void *)(a1 + 88) = *(void *)(a1 + 80);
  *(void *)(a1 + 112) = *(void *)(a1 + 104);
  *(void *)(a1 + 136) = *(void *)(a1 + 128);
  *(void *)(a1 + 160) = *(void *)(a1 + 152);
  *(void *)(a1 + 184) = *(void *)(a1 + 176);
  *(void *)(a1 + 208) = *(void *)(a1 + 200);
  *(void *)(a1 + 232) = *(void *)(a1 + 224);
  *(void *)(a1 + 256) = *(void *)(a1 + 248);
  uint64_t v10 = *(void ***)(a1 + 280);
  unint64_t v11 = *(void *)(a1 + 288) - (void)v10;
  *(void *)(a1 + 312) = 0;
  if (v11 >= 0x11)
  {
    do
    {
      operator delete(*v10);
      uint64_t v12 = *(void *)(a1 + 288);
      uint64_t v10 = (void **)(*(void *)(a1 + 280) + 8);
      *(void *)(a1 + 280) = v10;
      unint64_t v11 = v12 - (void)v10;
    }
    while (v11 > 0x10);
  }
  if (v11 >> 3 == 1)
  {
    uint64_t v13 = 256;
  }
  else
  {
    if (v11 >> 3 != 2) {
      goto LABEL_8;
    }
    uint64_t v13 = 512;
  }
  *(void *)(a1 + 304) = v13;
LABEL_8:
  unint64_t v14 = *(void ***)(a1 + 328);
  uint64_t v15 = *(void *)(a1 + 336);
  *(void *)(a1 + 360) = 0;
  unint64_t v16 = v15 - (void)v14;
  if (v16 >= 0x11)
  {
    do
    {
      operator delete(*v14);
      uint64_t v17 = *(void *)(a1 + 336);
      unint64_t v14 = (void **)(*(void *)(a1 + 328) + 8);
      *(void *)(a1 + 328) = v14;
      unint64_t v16 = v17 - (void)v14;
    }
    while (v16 > 0x10);
  }
  if (v16 >> 3 == 1)
  {
    uint64_t v18 = 256;
  }
  else
  {
    if (v16 >> 3 != 2) {
      goto LABEL_15;
    }
    uint64_t v18 = 512;
  }
  *(void *)(a1 + 352) = v18;
LABEL_15:
  uint64_t v19 = *(void ***)(a1 + 376);
  uint64_t v20 = *(void *)(a1 + 384);
  *(void *)(a1 + 408) = 0;
  unint64_t v21 = v20 - (void)v19;
  if (v21 >= 0x11)
  {
    do
    {
      operator delete(*v19);
      uint64_t v22 = *(void *)(a1 + 384);
      uint64_t v19 = (void **)(*(void *)(a1 + 376) + 8);
      *(void *)(a1 + 376) = v19;
      unint64_t v21 = v22 - (void)v19;
    }
    while (v21 > 0x10);
  }
  if (v21 >> 3 == 1)
  {
    uint64_t v23 = 256;
  }
  else
  {
    if (v21 >> 3 != 2) {
      goto LABEL_22;
    }
    uint64_t v23 = 512;
  }
  *(void *)(a1 + 400) = v23;
LABEL_22:
  uint64_t v24 = *(void ***)(a1 + 424);
  uint64_t v25 = *(void *)(a1 + 432);
  *(void *)(a1 + 456) = 0;
  unint64_t v26 = v25 - (void)v24;
  if (v26 >= 0x11)
  {
    do
    {
      operator delete(*v24);
      uint64_t v27 = *(void *)(a1 + 432);
      uint64_t v24 = (void **)(*(void *)(a1 + 424) + 8);
      *(void *)(a1 + 424) = v24;
      unint64_t v26 = v27 - (void)v24;
    }
    while (v26 > 0x10);
  }
  if (v26 >> 3 == 1)
  {
    uint64_t v28 = 256;
  }
  else
  {
    if (v26 >> 3 != 2) {
      goto LABEL_29;
    }
    uint64_t v28 = 512;
  }
  *(void *)(a1 + 448) = v28;
LABEL_29:
  *(void *)(a1 + 472) = *(void *)(a1 + 464);
  *(void *)(a1 + 496) = *(void *)(a1 + 488);
  *(void *)(a1 + 520) = 0;
  uint64_t v29 = *(void ***)(a1 + 544);
  uint64_t v30 = *(void *)(a1 + 552);
  *(void *)(a1 + 576) = 0;
  unint64_t v31 = v30 - (void)v29;
  if (v31 >= 0x11)
  {
    do
    {
      operator delete(*v29);
      uint64_t v29 = (void **)(*(void *)(a1 + 544) + 8);
      *(void *)(a1 + 544) = v29;
      unint64_t v31 = *(void *)(a1 + 552) - (void)v29;
    }
    while (v31 > 0x10);
  }
  if (v31 >> 3 == 1)
  {
    uint64_t v32 = 56;
  }
  else
  {
    if (v31 >> 3 != 2) {
      goto LABEL_36;
    }
    uint64_t v32 = 113;
  }
  *(void *)(a1 + 568) = v32;
LABEL_36:
  *(void *)(a1 + 592) = 0;
  uint64_t v33 = *(void ***)(a1 + 616);
  unint64_t v34 = *(void ***)(a1 + 624);
  if (v34 == v33)
  {
    unint64_t v34 = *(void ***)(a1 + 616);
  }
  else
  {
    unint64_t v35 = *(void *)(a1 + 640);
    uint64_t v36 = &v33[v35 >> 5];
    uint64_t v37 = (uint64_t)*v36 + 128 * (v35 & 0x1F);
    uint64_t v38 = *(uint64_t *)((char *)v33 + (((*(void *)(a1 + 648) + v35) >> 2) & 0x3FFFFFFFFFFFFFF8))
        + 128 * ((*(void *)(a1 + 648) + v35) & 0x1F);
    if (v37 != v38)
    {
      do
      {
        sub_46DF8(a1 + 648, v37);
        v37 += 128;
        if (v37 - (void)*v36 == 4096)
        {
          uint64_t v39 = (uint64_t)v36[1];
          ++v36;
          uint64_t v37 = v39;
        }
      }
      while (v37 != v38);
      unint64_t v34 = *(void ***)(a1 + 624);
      uint64_t v33 = *(void ***)(a1 + 616);
    }
  }
  *(void *)(a1 + 648) = 0;
  unint64_t v40 = (char *)v34 - (char *)v33;
  if (v40 >= 0x11)
  {
    do
    {
      operator delete(*v33);
      uint64_t v33 = (void **)(*(void *)(a1 + 616) + 8);
      *(void *)(a1 + 616) = v33;
      unint64_t v40 = *(void *)(a1 + 624) - (void)v33;
    }
    while (v40 > 0x10);
  }
  if (v40 >> 3 == 1)
  {
    uint64_t v41 = 16;
  }
  else
  {
    if (v40 >> 3 != 2) {
      goto LABEL_50;
    }
    uint64_t v41 = 32;
  }
  *(void *)(a1 + 640) = v41;
LABEL_50:
  *(void *)(a1 + 664) = *(void *)(a1 + 656);
  *(void *)(a1 + 688) = *(void *)(a1 + 680);
  *(void *)(a1 + 712) = *(void *)(a1 + 704);
  *(void *)(a1 + 736) = *(void *)(a1 + 728);
  uint64_t v42 = *(void *)(a1 + 760);
  uint64_t v43 = *(void *)(a1 + 752);
  while (v42 != v43)
  {
    v42 -= 128;
    sub_46DF8(a1 + 768, v42);
  }
  *(void *)(a1 + 760) = v43;
  uint64_t v44 = *a2;
  uint64_t v45 = a2[1];
  if (*a2 == v45)
  {
    uint64_t v54 = *(unsigned int *)(*(void *)a1 + 8);
    if (v54)
    {
      uint64_t v55 = (void *)(a1 + 784);
      do
      {
        *uint64_t v55 = *(v55 - 1);
        v55 += 3;
        --v54;
      }
      while (v54);
    }
    uint64_t v56 = -1200;
    do
    {
      *(void *)(a1 + v56 + 25984) = *(void *)(a1 + v56 + 25976);
      v56 += 24;
    }
    while (v56);
  }
  else
  {
    uint64_t v46 = 0;
    uint64_t v47 = (unsigned __int128)((v45 - v44) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
    unint64_t v48 = (v47 >> 2) + ((unint64_t)v47 >> 63);
    if (v48 <= 1) {
      unint64_t v48 = 1;
    }
    do
    {
      uint64_t v49 = (unsigned int **)(v44 + 24 * v46);
      uint64_t v50 = *v49;
      uint64_t v51 = v49[1];
      if (v50 != v51)
      {
        *(void *)(a1 + 24 * v46 + 24784) = *(void *)(a1 + 24 * v46 + 24776);
        unint64_t v52 = v51 - v50;
        if (v52 <= 1) {
          unint64_t v52 = 1;
        }
        do
        {
          unsigned int v53 = *v50++;
          *(void *)(a1 + 24 * v53 + 784) = *(void *)(a1 + 24 * v53 + 776);
          --v52;
        }
        while (v52);
      }
      ++v46;
    }
    while (v46 != v48);
  }
  *(void *)(a1 + 25984) = *(void *)(a1 + 25976);
  *(void *)(a1 + 26112) = 0;
  *(_OWORD *)(a1 + 26000) = 0u;
  *(void *)(a1 + 26032) = a3;
  uint64_t v57 = *(char **)(a1 + 26048);
  unint64_t v58 = *(void *)(a1 + 26056);
  if ((unint64_t)v57 >= v58)
  {
    uint64_t v60 = *(char **)(a1 + 26040);
    uint64_t v61 = (v57 - v60) >> 3;
    if ((unint64_t)(v61 + 1) >> 61) {
      goto LABEL_101;
    }
    unint64_t v62 = v58 - (void)v60;
    unint64_t v63 = (uint64_t)(v58 - (void)v60) >> 2;
    if (v63 <= v61 + 1) {
      unint64_t v63 = v61 + 1;
    }
    if (v62 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v64 = v63;
    }
    if (v64)
    {
      unint64_t v65 = (char *)sub_5714(a1 + 26056, v64);
      uint64_t v57 = *(char **)(a1 + 26048);
      uint64_t v60 = *(char **)(a1 + 26040);
    }
    else
    {
      unint64_t v65 = 0;
    }
    uint64_t v66 = &v65[8 * v61];
    uint64_t v67 = &v65[8 * v64];
    *(void *)uint64_t v66 = a4;
    unint64_t v59 = v66 + 8;
    while (v57 != v60)
    {
      uint64_t v68 = *((void *)v57 - 1);
      v57 -= 8;
      *((void *)v66 - 1) = v68;
      v66 -= 8;
    }
    *(void *)(a1 + 26040) = v66;
    *(void *)(a1 + 26048) = v59;
    *(void *)(a1 + 26056) = v67;
    if (v60) {
      operator delete(v60);
    }
  }
  else
  {
    *(void *)uint64_t v57 = a4;
    unint64_t v59 = v57 + 8;
  }
  *(void *)(a1 + 26048) = v59;
  uint64_t v69 = *(char **)(a1 + 26072);
  unint64_t v70 = *(void *)(a1 + 26080);
  if ((unint64_t)v69 < v70)
  {
    *(void *)uint64_t v69 = a5;
    unint64_t v71 = v69 + 8;
    goto LABEL_98;
  }
  uint64_t v72 = *(char **)(a1 + 26064);
  uint64_t v73 = (v69 - v72) >> 3;
  if ((unint64_t)(v73 + 1) >> 61) {
LABEL_101:
  }
    sub_566C();
  unint64_t v74 = v70 - (void)v72;
  unint64_t v75 = (uint64_t)(v70 - (void)v72) >> 2;
  if (v75 <= v73 + 1) {
    unint64_t v75 = v73 + 1;
  }
  if (v74 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v76 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v76 = v75;
  }
  if (v76)
  {
    unint64_t v77 = (char *)sub_5714(a1 + 26080, v76);
    uint64_t v69 = *(char **)(a1 + 26072);
    uint64_t v72 = *(char **)(a1 + 26064);
  }
  else
  {
    unint64_t v77 = 0;
  }
  unint64_t v78 = &v77[8 * v73];
  uint64_t v79 = &v77[8 * v76];
  *(void *)unint64_t v78 = a5;
  unint64_t v71 = v78 + 8;
  while (v69 != v72)
  {
    uint64_t v80 = *((void *)v69 - 1);
    v69 -= 8;
    *((void *)v78 - 1) = v80;
    v78 -= 8;
  }
  *(void *)(a1 + 26064) = v78;
  *(void *)(a1 + 26072) = v71;
  *(void *)(a1 + 26080) = v79;
  if (v72) {
    operator delete(v72);
  }
LABEL_98:
  *(void *)(a1 + 26072) = v71;
  long long v81 = *(void **)(a1 + 26024);
  size_t v82 = 16 * *(void *)(a1 + 26016);

  bzero(v81, v82);
}

uint64_t sub_F6A04(uint64_t result, unsigned char *a2, unint64_t a3, void *a4, unint64_t a5)
{
  if (!*a2)
  {
    uint64_t v5 = *(void *)(result + 26048);
    uint64_t v6 = *(void *)(result + 26040);
    if (v5 - v6 >= 1)
    {
      unint64_t v7 = (unint64_t)(v5 - v6) >> 3;
      do
      {
        if (a5 >= a3) {
          a5 -= a3;
        }
        else {
          a5 = 0;
        }
        *(void *)(v6 - 8 + 8 * v7) = a5;
      }
      while (v7-- > 1);
    }
    if (v6 != v5) {
      *a4 = *(void *)(v5 - 8);
    }
    *a2 = 1;
  }
  return result;
}

uint64_t sub_F6A5C(uint64_t result, unsigned char *a2, unint64_t a3, void *a4, unint64_t a5)
{
  if (!*a2)
  {
    uint64_t v5 = *(void *)(result + 26072);
    uint64_t v6 = *(void *)(result + 26064);
    if (v5 - v6 >= 1)
    {
      unint64_t v7 = (unint64_t)(v5 - v6) >> 3;
      do
      {
        if (a5 >= a3) {
          a5 -= a3;
        }
        else {
          a5 = 0;
        }
        *(void *)(v6 - 8 + 8 * v7) = a5;
      }
      while (v7-- > 1);
    }
    if (v6 != v5) {
      *a4 = *(void *)(v5 - 8);
    }
    *a2 = 1;
  }
  return result;
}

void sub_F6AB4(void ***a1)
{
  v1 = *a1;
  unsigned int v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 128;
        sub_46DF8((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_F6B4C(void *a1)
{
  sub_F6BE0(a1 + 42);
  unsigned int v2 = (void *)a1[39];
  if (v2) {
    operator delete(v2);
  }
  sub_F6D14(a1 + 33);
  uint64_t v3 = (void *)a1[30];
  if (v3) {
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[27];
  if (v4)
  {
    a1[28] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[24];
  if (v5)
  {
    a1[25] = v5;
    operator delete(v5);
  }
  std::deque<ProfileEvent>::~deque[abi:nn180100](a1 + 18);
  std::deque<ProfileEvent>::~deque[abi:nn180100](a1 + 12);
  std::deque<ProfileEvent>::~deque[abi:nn180100](a1 + 6);

  return std::deque<ProfileEvent>::~deque[abi:nn180100](a1);
}

uint64_t sub_F6BE0(void *a1)
{
  unsigned int v2 = a1 + 5;
  uint64_t v3 = (void **)a1[1];
  uint64_t v4 = (void **)a1[2];
  if (v4 == v3)
  {
    uint64_t v4 = (void **)a1[1];
  }
  else
  {
    unint64_t v5 = a1[4];
    uint64_t v6 = &v3[v5 >> 5];
    uint64_t v7 = (uint64_t)*v6 + 128 * (v5 & 0x1F);
    uint64_t v8 = *(uint64_t *)((char *)v3 + (((a1[5] + v5) >> 2) & 0x3FFFFFFFFFFFFFF8)) + 128 * ((a1[5] + v5) & 0x1F);
    if (v7 != v8)
    {
      do
      {
        sub_46DF8((uint64_t)v2, v7);
        v7 += 128;
        if (v7 - (void)*v6 == 4096)
        {
          uint64_t v9 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v9;
        }
      }
      while (v7 != v8);
      uint64_t v3 = (void **)a1[1];
      uint64_t v4 = (void **)a1[2];
    }
  }
  *unsigned int v2 = 0;
  unint64_t v10 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      uint64_t v4 = (void **)a1[2];
      uint64_t v3 = (void **)(a1[1] + 8);
      a1[1] = v3;
      unint64_t v10 = (char *)v4 - (char *)v3;
    }
    while ((unint64_t)((char *)v4 - (char *)v3) > 0x10);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 16;
  }
  else
  {
    if (v11 != 2) {
      goto LABEL_16;
    }
    uint64_t v12 = 32;
  }
  a1[4] = v12;
LABEL_16:
  while (v3 != v4)
  {
    uint64_t v13 = *v3++;
    operator delete(v13);
  }

  return std::__split_buffer<ProfileEvent *>::~__split_buffer((uint64_t)a1);
}

uint64_t sub_F6D14(void *a1)
{
  unsigned int v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      unsigned int v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 56;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 113;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return std::__split_buffer<ProfileEvent *>::~__split_buffer((uint64_t)a1);
}

uint64_t sub_F6DBC(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 144);
  if (v2)
  {
    *(void *)(a1 + 152) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 120);
  if (v3)
  {
    *(void *)(a1 + 128) = v3;
    operator delete(v3);
  }
  unint64_t v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(void *)(a1 + 104) = v4;
    operator delete(v4);
  }
  unint64_t v5 = *(void **)(a1 + 72);
  if (v5)
  {
    *(void *)(a1 + 80) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 48);
  if (v6)
  {
    *(void *)(a1 + 56) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)(a1 + 24);
  if (v7)
  {
    *(void *)(a1 + 32) = v7;
    operator delete(v7);
  }
  uint64_t v8 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v8;
    operator delete(v8);
  }
  return a1;
}

uint64_t sub_F6E50(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "DeltaSeconds");
  agxps_timeseries_get_length(v2);
  return v2;
}

uint64_t sub_F6EA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_d10d40e0cc19cf68a523b252faa985cd5777f1eab3cbe768098ca805cc7216ef");
  agxps_timeseries_get_length(v2);
  return v2;
}

int *sub_F6F00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_0c33d520d54b5d5f84a71398d6ae71152426874088128bd3c18ad78df5f6d8b7");
  agxps_timeseries_get_length((uint64_t)v7);
  uint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_d10d40e0cc19cf68a523b252faa985cd5777f1eab3cbe768098ca805cc7216ef");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v10 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_add_tt(v7, v8, v10, 1);
  return v10;
}

uint64_t sub_F6FC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_da2d5f5fd43e7edda6d5635752a29f09d285cf47c2ecd0a1b83b1ba3eddcef55");
  agxps_timeseries_get_length(v2);
  return v2;
}

int *sub_F7020(uint64_t a1, uint64_t a2, uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  int v7 = (**a3)(a3, "NUM_THREADS_PER_CLIQUE");
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_448897b2730c90c177c3e468d3780d048b4ef0c6feb09887550eb9e5e71373c0");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v10);
  uint64_t v12 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  return v12;
}

int *sub_F70EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_e319ade855d6fde34a28ecc2a2266f86d6d99b5e413e08b4884629844476c571");
  agxps_timeseries_get_length((uint64_t)v7);
  unint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_83b4492da25346ffc6c1820a633ef533874dda8e2939056928ffd92384775e38");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v10 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_add_tt(v7, v8, v10, 1);
  unint64_t v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_a3104b8f0a1ab0931761cf851c8ac5ce3212eff30deff24a1f9a5ef67453adca");
  uint64_t v12 = agxps_timeseries_get_length((uint64_t)v11);
  uint64_t v13 = (int *)sub_176E24(a5, 0, v12);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  unint64_t v14 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_bd9f890bd3bdbe08af5851fb3dfa228a36a5e54b72c7d74d5985af75bafa6217");
  uint64_t v15 = agxps_timeseries_get_length((uint64_t)v14);
  unint64_t v16 = (int *)sub_176E24(a5, 0, v15);
  agxps_timeseries_add_tt(v13, v14, v16, 1);
  return v16;
}

int *sub_F727C(uint64_t a1, uint64_t a2, uint64_t (***a3)(void, const char *))
{
  uint64_t v5 = (**a3)(a3, "NSEC_PER_SEC");
  unint64_t v7 = v6;
  unint64_t v8 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "PrimitivesSubmitted");
  unint64_t v9 = sub_11210(v5, v7, v8);
  unint64_t v10 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_792173079ffc5aacc2cea817d8812166e71ea17309e294d24ee2cc88d2fb1e8e");
  uint64_t v11 = (**a3)(a3, "TIME_SCALE");
  uint64_t v13 = sub_11D84(v10, v11, v12);

  return sub_128EC((unsigned int *)v9, (unsigned int *)v13);
}

int *sub_F73CC(uint64_t a1, uint64_t a2, uint64_t (***a3)(void, const char *))
{
  uint64_t v5 = (**a3)(a3, "NSEC_PER_SEC");
  unint64_t v7 = v6;
  unint64_t v8 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "PSInvocation");
  unint64_t v9 = sub_11210(v5, v7, v8);
  unint64_t v10 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_792173079ffc5aacc2cea817d8812166e71ea17309e294d24ee2cc88d2fb1e8e");
  uint64_t v11 = (**a3)(a3, "TIME_SCALE");
  uint64_t v13 = sub_11D84(v10, v11, v12);

  return sub_128EC((unsigned int *)v9, (unsigned int *)v13);
}

int *sub_F751C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "PSInvocation");
  agxps_timeseries_get_length((uint64_t)v7);
  unint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "VSInvocation");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v10 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_div_tt(v7, v8, v10, 1);
  return v10;
}

int *sub_F75E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "PSInvocation");
  agxps_timeseries_get_length((uint64_t)v7);
  unint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "PrimitivesSubmitted");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v10 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_div_tt(v7, v8, v10, 1);
  return v10;
}

int *sub_F76AC(uint64_t a1, uint64_t a2, uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_f6c3f9b835930ff834f081ab2dfaacbdfbe451f6f2100abcdecec1c3c7999e0b");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v7);
  LODWORD(a3) = (**a3)(a3, "NUM_GPS");
  unint64_t v10 = v9;
  uint64_t v11 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_div_ts(v7, (int)a3, v10, v11, 1);
  return v11;
}

uint64_t sub_F7798(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_427543bc9ae51e5f3520629f8bbe54e3a18d14de616f0c418cf7190a55cd7d9c");
  agxps_timeseries_get_length(v2);
  return v2;
}

uint64_t sub_F77F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "VerticesSubmitted");
  agxps_timeseries_get_length((uint64_t)v7);
  unint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "VSInvocation");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v10 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_sub_tt(v7, v8, v10, 1);
  uint64_t v11 = sub_D5D4();
  unint64_t v13 = v12;
  uint64_t v14 = sub_176E24(a5, 0, length);
  uint64_t v15 = sub_176E24(a5, 0, length);
  agxps_timeseries_compare_ts(3, v10, v11, v13, v14, 1);
  agxps_timeseries_select_tts(v14, (uint64_t)v10, v11, v13, v15);
  return v15;
}

uint64_t sub_F7934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "VerticesSubmitted");
  agxps_timeseries_get_length((uint64_t)v7);
  unint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "VSInvocation");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v10 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_sub_tt(v7, v8, v10, 1);
  LODWORD(v7) = sub_D5D4();
  unint64_t v12 = v11;
  unint64_t v13 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_ts(v10, (int)v7, v12, v13, 1);
  uint64_t v14 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "VerticesSubmitted");
  uint64_t v15 = agxps_timeseries_get_length((uint64_t)v14);
  unint64_t v16 = (int *)sub_176E24(a5, 0, v15);
  agxps_timeseries_div_tt(v13, v14, v16, 1);
  uint64_t v17 = sub_D5D4();
  unint64_t v19 = v18;
  uint64_t v20 = sub_176E24(a5, 0, v15);
  uint64_t v21 = sub_176E24(a5, 0, v15);
  agxps_timeseries_compare_ts(3, v16, v17, v19, v20, 1);
  agxps_timeseries_select_tts(v20, (uint64_t)v16, v17, v19, v21);
  return v21;
}

uint64_t sub_F7B24(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_2d3c257f33af88b8488658fb5b6a86f64cb02169b680e1250d3f37d373a4197f");
  agxps_timeseries_get_length(v2);
  return v2;
}

int *sub_F7B7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "PrimitivesRasterized");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v7);
  int v9 = sub_D5D4();
  unint64_t v11 = v10;
  unint64_t v12 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_ts(v7, v9, v11, v12, 1);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "InputPrimitivesPostClipping");
  uint64_t v14 = agxps_timeseries_get_length(v13);
  uint64_t v15 = sub_D5D4();
  unint64_t v17 = v16;
  uint64_t v18 = sub_176E24(a5, 0, v14);
  unint64_t v19 = (int *)sub_176E24(a5, 0, v14);
  agxps_timeseries_compare_ts(3, v13, v15, v17, v18, 1);
  agxps_timeseries_select_tts(v18, v13, v15, v17, (uint64_t)v19);
  uint64_t v20 = (int *)sub_176E24(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v19, v20, 1);
  return v20;
}

int *sub_F7D0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_29091329a1ff8f86d51ab9b84da709de18ba8aa1d94003a519a0663db7add4a1");
  agxps_timeseries_get_length((uint64_t)v7);
  unint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_6169af48fcc4f2c5d036243de6acd153bd0308c644bd7e4afc67499ad1aef2c7");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v10 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_add_tt(v7, v8, v10, 1);
  return v10;
}

int *sub_F7DD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "ClippedPrimitives");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v7);
  int v9 = sub_D5D4();
  unint64_t v11 = v10;
  unint64_t v12 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_ts(v7, v9, v11, v12, 1);
  uint64_t v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "PreCullPrimitiveCount");
  uint64_t v14 = agxps_timeseries_get_length((uint64_t)v13);
  uint64_t v15 = (int *)sub_176E24(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v13, v15, 1);
  return v15;
}

uint64_t sub_F7EE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_b466c606c4b7e98fcde3adad24a292c946f1f1130670918262ebf9f660e0173c");
  agxps_timeseries_get_length(v2);
  return v2;
}

uint64_t sub_F7F40(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_9f4066c82340989d0ea535230ddae2a44d311837c37d0eb67d122b2c592e661f");
  agxps_timeseries_get_length(v2);
  return v2;
}

uint64_t sub_F7F98(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_01038280d9d6c505432733b12946359b7c301c69b32369f4b921b6fa206c2211");
  agxps_timeseries_get_length(v2);
  return v2;
}

uint64_t sub_F7FF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_1b4a415305c5e09fd037b34e5c34c099f08044e780d5c06d813ce80cf354dafd");
  agxps_timeseries_get_length(v2);
  return v2;
}

uint64_t sub_F8048(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_d1bc81f56d6b804a852adb705f1ef63549265bdfc317d5a3af98aaee0d8f8ef9");
  agxps_timeseries_get_length(v2);
  return v2;
}

int *sub_F80A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "PreCullPrimitiveCount");
  agxps_timeseries_get_length((uint64_t)v7);
  unint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "ClippedPrimitives");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v10 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_sub_tt(v7, v8, v10, 1);
  uint64_t v11 = sub_D5D4();
  unint64_t v13 = v12;
  uint64_t v14 = sub_176E24(a5, 0, length);
  uint64_t v15 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_compare_ts(3, v10, v11, v13, v14, 1);
  agxps_timeseries_select_tts(v14, (uint64_t)v10, v11, v13, (uint64_t)v15);
  unint64_t v16 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "TrianglesCreatedByClipper");
  uint64_t v17 = agxps_timeseries_get_length((uint64_t)v16);
  uint64_t v18 = (int *)sub_176E24(a5, 0, v17);
  agxps_timeseries_add_tt(v15, v16, v18, 1);
  return v18;
}

uint64_t sub_F824C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "CulledPrimitives");
  agxps_timeseries_get_length((uint64_t)v7);
  unint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "GuardBandCullPrims");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v10 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_sub_tt(v7, v8, v10, 1);
  uint64_t v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "BackFaceCullPrims");
  uint64_t v12 = agxps_timeseries_get_length((uint64_t)v11);
  unint64_t v13 = (int *)sub_176E24(a5, 0, v12);
  agxps_timeseries_sub_tt(v10, v11, v13, 1);
  uint64_t v14 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "OffscreenCullPrims");
  uint64_t v15 = agxps_timeseries_get_length((uint64_t)v14);
  unint64_t v16 = (int *)sub_176E24(a5, 0, v15);
  agxps_timeseries_sub_tt(v13, v14, v16, 1);
  uint64_t v17 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "SmallTriangleClippedPrims");
  uint64_t v18 = agxps_timeseries_get_length((uint64_t)v17);
  unint64_t v19 = (int *)sub_176E24(a5, 0, v18);
  agxps_timeseries_sub_tt(v16, v17, v19, 1);
  uint64_t v20 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "BackFaceClippedPrims");
  uint64_t v21 = agxps_timeseries_get_length((uint64_t)v20);
  uint64_t v22 = (int *)sub_176E24(a5, 0, v21);
  agxps_timeseries_sub_tt(v19, v20, v22, 1);
  uint64_t v23 = sub_D5D4();
  unint64_t v25 = v24;
  uint64_t v26 = sub_176E24(a5, 0, v21);
  uint64_t v27 = sub_176E24(a5, 0, v21);
  agxps_timeseries_compare_ts(3, v22, v23, v25, v26, 1);
  agxps_timeseries_select_tts(v26, (uint64_t)v22, v23, v25, v27);
  return v27;
}

int *sub_F8510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "BackFaceCullPrims");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v7);
  int v9 = sub_D5D4();
  unint64_t v11 = v10;
  uint64_t v12 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_ts(v7, v9, v11, v12, 1);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "InputPrimitivesPostClipping");
  uint64_t v14 = agxps_timeseries_get_length(v13);
  uint64_t v15 = sub_D5D4();
  unint64_t v17 = v16;
  uint64_t v18 = sub_176E24(a5, 0, v14);
  unint64_t v19 = (int *)sub_176E24(a5, 0, v14);
  agxps_timeseries_compare_ts(3, v13, v15, v17, v18, 1);
  agxps_timeseries_select_tts(v18, v13, v15, v17, (uint64_t)v19);
  uint64_t v20 = (int *)sub_176E24(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v19, v20, 1);
  return v20;
}

int *sub_F86A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "SmallTriangleCullPrims");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v7);
  int v9 = sub_D5D4();
  unint64_t v11 = v10;
  uint64_t v12 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_ts(v7, v9, v11, v12, 1);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "InputPrimitivesPostClipping");
  uint64_t v14 = agxps_timeseries_get_length(v13);
  uint64_t v15 = sub_D5D4();
  unint64_t v17 = v16;
  uint64_t v18 = sub_176E24(a5, 0, v14);
  unint64_t v19 = (int *)sub_176E24(a5, 0, v14);
  agxps_timeseries_compare_ts(3, v13, v15, v17, v18, 1);
  agxps_timeseries_select_tts(v18, v13, v15, v17, (uint64_t)v19);
  uint64_t v20 = (int *)sub_176E24(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v19, v20, 1);
  return v20;
}

int *sub_F8830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_4b1f5c87264cd5cd23bb5eb652d21194fb7f49f9b1d70433f180b31a7a22dcab");
  agxps_timeseries_get_length((uint64_t)v7);
  unint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_4bb4ab3f3e64c565175f4fbe0f75df41b12c3bc2b4242b99cd4a330773d475d4");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v10 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_add_tt(v7, v8, v10, 1);
  unint64_t v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_d7b92925765e8d20627989863f1b950ec5d6dffbd815c4c100730b3a7e7801fd");
  uint64_t v12 = agxps_timeseries_get_length((uint64_t)v11);
  uint64_t v13 = (int *)sub_176E24(a5, 0, v12);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  return v13;
}

int *sub_F8960(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "GuardBandCullPrims");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v7);
  int v9 = sub_D5D4();
  unint64_t v11 = v10;
  uint64_t v12 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_ts(v7, v9, v11, v12, 1);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "InputPrimitivesPostClipping");
  uint64_t v14 = agxps_timeseries_get_length(v13);
  uint64_t v15 = sub_D5D4();
  unint64_t v17 = v16;
  uint64_t v18 = sub_176E24(a5, 0, v14);
  unint64_t v19 = (int *)sub_176E24(a5, 0, v14);
  agxps_timeseries_compare_ts(3, v13, v15, v17, v18, 1);
  agxps_timeseries_select_tts(v18, v13, v15, v17, (uint64_t)v19);
  uint64_t v20 = (int *)sub_176E24(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v19, v20, 1);
  return v20;
}

int *sub_F8AF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_0f9aab25f0863ace3de6f9832139250c806045a7ac0d6f8cf06c682c282005f1");
  agxps_timeseries_get_length((uint64_t)v7);
  unint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_dbe3d527893309548e6eebdee711a622433c869e148727cf18e31ae63cf116d3");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v10 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_add_tt(v7, v8, v10, 1);
  unint64_t v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_3bd7a95222e8315bf62e84ba01a511e64bd7aa7487bed322a8ac96e4c4e628e1");
  uint64_t v12 = agxps_timeseries_get_length((uint64_t)v11);
  uint64_t v13 = (int *)sub_176E24(a5, 0, v12);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  return v13;
}

int *sub_F8C20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "OffscreenCullPrims");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v7);
  int v9 = sub_D5D4();
  unint64_t v11 = v10;
  uint64_t v12 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_ts(v7, v9, v11, v12, 1);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "InputPrimitivesPostClipping");
  uint64_t v14 = agxps_timeseries_get_length(v13);
  uint64_t v15 = sub_D5D4();
  unint64_t v17 = v16;
  uint64_t v18 = sub_176E24(a5, 0, v14);
  unint64_t v19 = (int *)sub_176E24(a5, 0, v14);
  agxps_timeseries_compare_ts(3, v13, v15, v17, v18, 1);
  agxps_timeseries_select_tts(v18, v13, v15, v17, (uint64_t)v19);
  uint64_t v20 = (int *)sub_176E24(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v19, v20, 1);
  return v20;
}

uint64_t sub_F8DB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "InputPrimitivesPostClipping");
  agxps_timeseries_get_length((uint64_t)v7);
  unint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "PrimitivesRasterized");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v10 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_sub_tt(v7, v8, v10, 1);
  uint64_t v11 = sub_D5D4();
  unint64_t v13 = v12;
  uint64_t v14 = sub_176E24(a5, 0, length);
  uint64_t v15 = sub_176E24(a5, 0, length);
  agxps_timeseries_compare_ts(3, v10, v11, v13, v14, 1);
  agxps_timeseries_select_tts(v14, (uint64_t)v10, v11, v13, v15);
  return v15;
}

int *sub_F8EF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "CulledPrimitives");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v7);
  int v9 = sub_D5D4();
  unint64_t v11 = v10;
  unint64_t v12 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_ts(v7, v9, v11, v12, 1);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "InputPrimitivesPostClipping");
  uint64_t v14 = agxps_timeseries_get_length(v13);
  uint64_t v15 = sub_D5D4();
  unint64_t v17 = v16;
  uint64_t v18 = sub_176E24(a5, 0, v14);
  unint64_t v19 = (int *)sub_176E24(a5, 0, v14);
  agxps_timeseries_compare_ts(3, v13, v15, v17, v18, 1);
  agxps_timeseries_select_tts(v18, v13, v15, v17, (uint64_t)v19);
  uint64_t v20 = (int *)sub_176E24(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v19, v20, 1);
  return v20;
}

int *sub_F9084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_7cef4e481233623472ea3e1f6b4131fabb20f247f7e5eae173dfd693aa60d0ff");
  agxps_timeseries_get_length((uint64_t)v7);
  unint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_9177fce9b3d9e2a64a816854b3084588e4673c25a1c069c53b5909a77fb853eb");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v10 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_sub_tt(v7, v8, v10, 1);
  uint64_t v11 = sub_D5D4();
  unint64_t v13 = v12;
  uint64_t v14 = sub_176E24(a5, 0, length);
  uint64_t v15 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_compare_ts(3, v10, v11, v13, v14, 1);
  agxps_timeseries_select_tts(v14, (uint64_t)v10, v11, v13, (uint64_t)v15);
  LODWORD(v11) = sub_D5D4();
  unint64_t v17 = v16;
  uint64_t v18 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_ts(v15, v11, v17, v18, 1);
  unint64_t v19 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "CA64702D3D4494B38F08BCB24ABD879988FB0FFE1D929F859EC9AED1C1C160E1");
  uint64_t v20 = agxps_timeseries_get_length((uint64_t)v19);
  uint64_t v21 = (int *)sub_176E24(a5, 0, v20);
  agxps_timeseries_mul_tt(v8, v19, v21, 1);
  uint64_t v22 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "2EAC2CEBA509E12A31090A56155DDCE41EAEE148F6832947CA8A512BDCFA0DF9");
  uint64_t v23 = agxps_timeseries_get_length((uint64_t)v22);
  unint64_t v24 = (int *)sub_176E24(a5, 0, v23);
  agxps_timeseries_mul_tt(v21, v22, v24, 1);
  unint64_t v25 = (int *)sub_176E24(a5, 0, v23);
  agxps_timeseries_add_tt(v18, v24, v25, 1);
  return v25;
}

int *sub_F9304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_24be79c8d8f70844505a88372d5027b6f8afd064ccbab97ac3ffe36dd5a0ef2b");
  agxps_timeseries_get_length((uint64_t)v7);
  unint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_9177fce9b3d9e2a64a816854b3084588e4673c25a1c069c53b5909a77fb853eb");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v10 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_sub_tt(v7, v8, v10, 1);
  uint64_t v11 = sub_D5D4();
  unint64_t v13 = v12;
  uint64_t v14 = sub_176E24(a5, 0, length);
  uint64_t v15 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_compare_ts(3, v10, v11, v13, v14, 1);
  agxps_timeseries_select_tts(v14, (uint64_t)v10, v11, v13, (uint64_t)v15);
  LODWORD(v11) = sub_D5D4();
  unint64_t v17 = v16;
  uint64_t v18 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_ts(v15, v11, v17, v18, 1);
  unint64_t v19 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "CA64702D3D4494B38F08BCB24ABD879988FB0FFE1D929F859EC9AED1C1C160E1");
  uint64_t v20 = agxps_timeseries_get_length((uint64_t)v19);
  uint64_t v21 = (int *)sub_176E24(a5, 0, v20);
  agxps_timeseries_mul_tt(v8, v19, v21, 1);
  uint64_t v22 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "2EAC2CEBA509E12A31090A56155DDCE41EAEE148F6832947CA8A512BDCFA0DF9");
  uint64_t v23 = agxps_timeseries_get_length((uint64_t)v22);
  unint64_t v24 = (int *)sub_176E24(a5, 0, v23);
  agxps_timeseries_mul_tt(v21, v22, v24, 1);
  unint64_t v25 = (int *)sub_176E24(a5, 0, v23);
  agxps_timeseries_add_tt(v18, v24, v25, 1);
  return v25;
}

uint64_t sub_F9584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "FragmentsRasterized");
  agxps_timeseries_get_length((uint64_t)v7);
  unint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "PreZPassCount");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v10 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_sub_tt(v7, v8, v10, 1);
  uint64_t v11 = sub_D5D4();
  unint64_t v13 = v12;
  uint64_t v14 = sub_176E24(a5, 0, length);
  uint64_t v15 = sub_176E24(a5, 0, length);
  agxps_timeseries_compare_ts(3, v10, v11, v13, v14, 1);
  agxps_timeseries_select_tts(v14, (uint64_t)v10, v11, v13, v15);
  return v15;
}

int *sub_F96C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "PreZFailCount");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v7);
  int v9 = sub_D5D4();
  unint64_t v11 = v10;
  unint64_t v12 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_ts(v7, v9, v11, v12, 1);
  unint64_t v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "FragmentsRasterized");
  uint64_t v14 = agxps_timeseries_get_length((uint64_t)v13);
  uint64_t v15 = (int *)sub_176E24(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v13, v15, 1);
  return v15;
}

int *sub_F97DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "PreZPassCount");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v7);
  int v9 = sub_D5D4();
  unint64_t v11 = v10;
  unint64_t v12 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_ts(v7, v9, v11, v12, 1);
  unint64_t v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "FragmentsRasterized");
  uint64_t v14 = agxps_timeseries_get_length((uint64_t)v13);
  uint64_t v15 = (int *)sub_176E24(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v13, v15, 1);
  return v15;
}

int *sub_F98F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "PSInvocation");
  agxps_timeseries_get_length((uint64_t)v7);
  unint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_eda5bce70befa39e7c6029505c0269211092c220048a502fd8fa2fe30895465b");
  agxps_timeseries_get_length((uint64_t)v8);
  int v9 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "CA64702D3D4494B38F08BCB24ABD879988FB0FFE1D929F859EC9AED1C1C160E1");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v9);
  unint64_t v11 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_tt(v8, v9, v11, 1);
  unint64_t v12 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "2EAC2CEBA509E12A31090A56155DDCE41EAEE148F6832947CA8A512BDCFA0DF9");
  uint64_t v13 = agxps_timeseries_get_length((uint64_t)v12);
  uint64_t v14 = (int *)sub_176E24(a5, 0, v13);
  agxps_timeseries_mul_tt(v11, v12, v14, 1);
  uint64_t v15 = (int *)sub_176E24(a5, 0, v13);
  agxps_timeseries_div_tt(v7, v14, v15, 1);
  return v15;
}

int *sub_F9A84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "CA64702D3D4494B38F08BCB24ABD879988FB0FFE1D929F859EC9AED1C1C160E1");
  agxps_timeseries_get_length((uint64_t)v7);
  unint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "2EAC2CEBA509E12A31090A56155DDCE41EAEE148F6832947CA8A512BDCFA0DF9");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v10 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_tt(v7, v8, v10, 1);
  return v10;
}

uint64_t sub_F9B4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_ae304fc8bce5708ffef30935687e442d6bea78f814055a5fe6e3380013d7e507");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v7);
  int v9 = sub_D5D4();
  unint64_t v11 = v10;
  unint64_t v12 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_ts(v7, v9, v11, v12, 1);
  uint64_t v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_f46268d72ed52af703d1b490e193d71605d5c756930dfe9385a5433c9b4f264f");
  uint64_t v14 = agxps_timeseries_get_length((uint64_t)v13);
  int v15 = sub_D5D4();
  unint64_t v17 = v16;
  uint64_t v18 = (int *)sub_176E24(a5, 0, v14);
  agxps_timeseries_mul_ts(v13, v15, v17, v18, 1);
  unint64_t v19 = (int *)sub_176E24(a5, 0, v14);
  agxps_timeseries_sub_tt(v12, v18, v19, 1);
  uint64_t v20 = sub_D5D4();
  unint64_t v22 = v21;
  uint64_t v23 = sub_176E24(a5, 0, v14);
  uint64_t v24 = sub_176E24(a5, 0, v14);
  agxps_timeseries_compare_ts(3, v19, v20, v22, v23, 1);
  agxps_timeseries_select_tts(v23, (uint64_t)v19, v20, v22, v24);
  return v24;
}

int *sub_F9D18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "TextureSamples");
  agxps_timeseries_get_length((uint64_t)v7);
  unint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "VSInvocation");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v10 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_div_tt(v7, v8, v10, 1);
  return v10;
}

int *sub_F9DE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "TextureSamples");
  agxps_timeseries_get_length((uint64_t)v7);
  unint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "PSInvocation");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v10 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_div_tt(v7, v8, v10, 1);
  return v10;
}

int *sub_F9EA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "TextureSamples");
  agxps_timeseries_get_length((uint64_t)v7);
  unint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "CSInvocation");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v10 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_div_tt(v7, v8, v10, 1);
  return v10;
}

int *sub_F9F70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_a7e72038471917bb4125254ae57103538d43fd9d4a233b06a1f248ca3bfc11ac");
  agxps_timeseries_get_length((uint64_t)v7);
  int v8 = sub_D5D4();
  unint64_t v10 = v9;
  unint64_t v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_f76e110e78dbd810843354c733691fcfcd8a5624a46d34e887797178f903ab95");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v11);
  uint64_t v13 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v8, v10, v11, v13, 1);
  uint64_t v14 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_add_tt(v7, v13, v14, 1);
  LODWORD(v7) = sub_D5D4();
  unint64_t v16 = v15;
  unint64_t v17 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_ce8d2278e7b086459bd4cccfe0b5c79b13ff287bf60e12cb62113d7478856b46");
  uint64_t v18 = agxps_timeseries_get_length((uint64_t)v17);
  unint64_t v19 = (int *)sub_176E24(a5, 0, v18);
  agxps_timeseries_mul_st((int)v7, v16, v17, v19, 1);
  uint64_t v20 = (int *)sub_176E24(a5, 0, v18);
  agxps_timeseries_add_tt(v14, v19, v20, 1);
  LODWORD(v14) = sub_D5D4();
  unint64_t v22 = v21;
  uint64_t v23 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_88a70ef450a839c73c44e1ebf268aa13bf92a5179d6ff3ab45ac0006fa8544cd");
  uint64_t v24 = agxps_timeseries_get_length((uint64_t)v23);
  unint64_t v25 = (int *)sub_176E24(a5, 0, v24);
  agxps_timeseries_mul_st((int)v14, v22, v23, v25, 1);
  uint64_t v26 = (int *)sub_176E24(a5, 0, v24);
  agxps_timeseries_add_tt(v20, v25, v26, 1);
  LODWORD(v20) = sub_D5D4();
  unint64_t v28 = v27;
  uint64_t v29 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_851e2825825612ac09e7b26350dc1b5b05998c3aab3198f4a2921768a84dfbbb");
  uint64_t v30 = agxps_timeseries_get_length((uint64_t)v29);
  unint64_t v31 = (int *)sub_176E24(a5, 0, v30);
  agxps_timeseries_mul_st((int)v20, v28, v29, v31, 1);
  uint64_t v32 = (int *)sub_176E24(a5, 0, v30);
  agxps_timeseries_add_tt(v26, v31, v32, 1);
  LODWORD(v26) = sub_D5D4();
  unint64_t v34 = v33;
  unint64_t v35 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_b48ed13a188e430f6a5bd26a74642ceabd518b8d290fe8322ebc00a7671bef9d");
  uint64_t v36 = agxps_timeseries_get_length((uint64_t)v35);
  uint64_t v37 = (int *)sub_176E24(a5, 0, v36);
  agxps_timeseries_mul_st((int)v26, v34, v35, v37, 1);
  uint64_t v38 = (int *)sub_176E24(a5, 0, v36);
  agxps_timeseries_add_tt(v32, v37, v38, 1);
  LODWORD(v32) = sub_D5D4();
  unint64_t v40 = v39;
  uint64_t v41 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_3b22188697e2c64b322decfb2df85c2cd7a7f264312a00737b10231811737d35");
  uint64_t v42 = agxps_timeseries_get_length((uint64_t)v41);
  uint64_t v43 = (int *)sub_176E24(a5, 0, v42);
  agxps_timeseries_mul_st((int)v32, v40, v41, v43, 1);
  uint64_t v44 = (int *)sub_176E24(a5, 0, v42);
  agxps_timeseries_add_tt(v38, v43, v44, 1);
  LODWORD(v38) = sub_D5D4();
  unint64_t v46 = v45;
  uint64_t v47 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_14a170fde3d2efeda34d72f062b69852d6b927feb012e65ae602e9c41c3565ba");
  uint64_t v48 = agxps_timeseries_get_length((uint64_t)v47);
  uint64_t v49 = (int *)sub_176E24(a5, 0, v48);
  agxps_timeseries_mul_st((int)v38, v46, v47, v49, 1);
  uint64_t v50 = (int *)sub_176E24(a5, 0, v48);
  agxps_timeseries_add_tt(v44, v49, v50, 1);
  LODWORD(v44) = sub_D5D4();
  unint64_t v52 = v51;
  unsigned int v53 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_57bf025a3b6e220efeee5fb9ecd97ad51c6adcccb96ca62426cc096e38eb9aa0");
  uint64_t v54 = agxps_timeseries_get_length((uint64_t)v53);
  uint64_t v55 = (int *)sub_176E24(a5, 0, v54);
  agxps_timeseries_mul_st((int)v44, v52, v53, v55, 1);
  uint64_t v56 = (int *)sub_176E24(a5, 0, v54);
  agxps_timeseries_add_tt(v50, v55, v56, 1);
  LODWORD(v50) = sub_D5D4();
  unint64_t v58 = v57;
  unint64_t v59 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_d86114b5bc1b6abf8638dd305669a55d8b394e5709b8e33e585d73c184d18943");
  uint64_t v60 = agxps_timeseries_get_length((uint64_t)v59);
  uint64_t v61 = (int *)sub_176E24(a5, 0, v60);
  agxps_timeseries_mul_st((int)v50, v58, v59, v61, 1);
  unint64_t v62 = (int *)sub_176E24(a5, 0, v60);
  agxps_timeseries_add_tt(v56, v61, v62, 1);
  unint64_t v63 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_838e506beb7a1376c2242cd5738a6016661bdfccb78c105f3ce081c89735bc9d");
  uint64_t v64 = agxps_timeseries_get_length((uint64_t)v63);
  unint64_t v65 = (int *)sub_176E24(a5, 0, v64);
  agxps_timeseries_div_tt(v62, v63, v65, 1);
  return v65;
}

int *sub_FA5E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_ae304fc8bce5708ffef30935687e442d6bea78f814055a5fe6e3380013d7e507");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v6);
  int v8 = sub_D5D4();
  unint64_t v10 = v9;
  unint64_t v11 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_ts(v6, v8, v10, v11, 1);
  return v11;
}

int *sub_FA698(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_0927651557827fd5468721c2ee04ff7924ebb553f9e0acc6b504a791aefdf935");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v6);
  int v8 = sub_D5D4();
  unint64_t v10 = v9;
  unint64_t v11 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_ts(v6, v8, v10, v11, 1);
  return v11;
}

int *sub_FA748(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_D5D4();
  unint64_t v5 = v4;
  unint64_t v6 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_0927651557827fd5468721c2ee04ff7924ebb553f9e0acc6b504a791aefdf935");
  unint64_t v7 = sub_11210(v3, v5, v6);
  int v8 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_d856a24dfeb33f1dad922753efc16618fdf12ef3544115f2f5fffd93affab8d5");
  unint64_t v9 = sub_EC28((unsigned int *)v7, v8);
  unint64_t v10 = sub_128EC((unsigned int *)v7, (unsigned int *)v9);
  uint64_t v12 = sub_D5D4();

  return sub_17AF0((unsigned int *)v10, v12, v11);
}

int *sub_FA840(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_f46268d72ed52af703d1b490e193d71605d5c756930dfe9385a5433c9b4f264f");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v6);
  int v8 = sub_D5D4();
  unint64_t v10 = v9;
  unint64_t v11 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_ts(v6, v8, v10, v11, 1);
  return v11;
}

int *sub_FA8EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_838e506beb7a1376c2242cd5738a6016661bdfccb78c105f3ce081c89735bc9d");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v6);
  int v8 = sub_D5D4();
  unint64_t v10 = v9;
  unint64_t v11 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_ts(v6, v8, v10, v11, 1);
  return v11;
}

int *sub_FA998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_838e506beb7a1376c2242cd5738a6016661bdfccb78c105f3ce081c89735bc9d");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v7);
  int v9 = sub_D5D4();
  unint64_t v11 = v10;
  uint64_t v12 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_ts(v7, v9, v11, v12, 1);
  uint64_t v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "TextureQuads");
  uint64_t v14 = agxps_timeseries_get_length((uint64_t)v13);
  unint64_t v15 = (int *)sub_176E24(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v13, v15, 1);
  return v15;
}

int *sub_FAAAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_b7afe579643b48d1495eb528fa5a78db4c0a065f75636f39f24f9cf4578912cf");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v6);
  int v8 = sub_D5D4();
  unint64_t v10 = v9;
  unint64_t v11 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_ts(v6, v8, v10, v11, 1);
  return v11;
}

int *sub_FAB58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_b7afe579643b48d1495eb528fa5a78db4c0a065f75636f39f24f9cf4578912cf");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v7);
  int v9 = sub_D5D4();
  unint64_t v11 = v10;
  uint64_t v12 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_ts(v7, v9, v11, v12, 1);
  uint64_t v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "TextureQuads");
  uint64_t v14 = agxps_timeseries_get_length((uint64_t)v13);
  unint64_t v15 = (int *)sub_176E24(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v13, v15, 1);
  return v15;
}

int *sub_FAC6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_443fdcc2095b4dca2f7e327fb6af5914523d670164b66d05316044de82474149");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v6);
  int v8 = sub_D5D4();
  unint64_t v10 = v9;
  unint64_t v11 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_ts(v6, v8, v10, v11, 1);
  return v11;
}

int *sub_FAD18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_443fdcc2095b4dca2f7e327fb6af5914523d670164b66d05316044de82474149");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v7);
  int v9 = sub_D5D4();
  unint64_t v11 = v10;
  uint64_t v12 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_ts(v7, v9, v11, v12, 1);
  uint64_t v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "TextureQuads");
  uint64_t v14 = agxps_timeseries_get_length((uint64_t)v13);
  unint64_t v15 = (int *)sub_176E24(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v13, v15, 1);
  return v15;
}

int *sub_FAE2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_cd1ed48f521bc3dff5675e8c48183da96f416902d6a6a198f8c83a2a6f8d0d11");
  agxps_timeseries_get_length((uint64_t)v7);
  int v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_bd02d5aeed8b2a086512b59511b59d2675b598b2801965ba46b391cd64096154");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v10 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_add_tt(v7, v8, v10, 1);
  unint64_t v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_3bcb3dea436f55c613020a7937271b8cbb6acaf6a14172ba5175c91c9ab5567e");
  uint64_t v12 = agxps_timeseries_get_length((uint64_t)v11);
  uint64_t v13 = (int *)sub_176E24(a5, 0, v12);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  uint64_t v14 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_865162aa257660a732d84c9c100db8137273b0f5909e5210071fdd0e89742d21");
  uint64_t v15 = agxps_timeseries_get_length((uint64_t)v14);
  unint64_t v16 = (int *)sub_176E24(a5, 0, v15);
  agxps_timeseries_add_tt(v13, v14, v16, 1);
  unint64_t v17 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_c11db3f19bb1da1294fb244d920ecbf0b1b99d56ff50e75c19bcb9e5bb1f57b3");
  uint64_t v18 = agxps_timeseries_get_length((uint64_t)v17);
  unint64_t v19 = (int *)sub_176E24(a5, 0, v18);
  agxps_timeseries_add_tt(v16, v17, v19, 1);
  uint64_t v20 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_04594fddf571ddbd959568fdd6bb83d8daff2e345e898fb624563a1c3c9d0a4c");
  uint64_t v21 = agxps_timeseries_get_length((uint64_t)v20);
  unint64_t v22 = (int *)sub_176E24(a5, 0, v21);
  agxps_timeseries_add_tt(v19, v20, v22, 1);
  uint64_t v23 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_711e0179cf22b718fc893a151a0933029ea2007379bfce51a69fdf0184a5485b");
  uint64_t v24 = agxps_timeseries_get_length((uint64_t)v23);
  unint64_t v25 = (int *)sub_176E24(a5, 0, v24);
  agxps_timeseries_add_tt(v22, v23, v25, 1);
  uint64_t v26 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_4cb7b2192985d1bd9a9cb239446047edd976fbe2ff69438a86f59e6b813558a8");
  uint64_t v27 = agxps_timeseries_get_length((uint64_t)v26);
  unint64_t v28 = (int *)sub_176E24(a5, 0, v27);
  agxps_timeseries_add_tt(v25, v26, v28, 1);
  uint64_t v29 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_4724ff18a7e7c06ae181692b6cadbed734b1c843a05c05daa26071f1af4c6a87");
  uint64_t v30 = agxps_timeseries_get_length((uint64_t)v29);
  unint64_t v31 = (int *)sub_176E24(a5, 0, v30);
  agxps_timeseries_add_tt(v28, v29, v31, 1);
  uint64_t v32 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_f8d2effb45f8b4aacaf1029c53b986b48c36db82b2d599c587ab6c8617309cf8");
  uint64_t v33 = agxps_timeseries_get_length((uint64_t)v32);
  unint64_t v34 = (int *)sub_176E24(a5, 0, v33);
  agxps_timeseries_add_tt(v31, v32, v34, 1);
  unint64_t v35 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_eac71bc8f3eb0ca60d7616bcb6c0f838417f6ab5859c211564897b1ff7c4199c");
  uint64_t v36 = agxps_timeseries_get_length((uint64_t)v35);
  uint64_t v37 = (int *)sub_176E24(a5, 0, v36);
  agxps_timeseries_add_tt(v34, v35, v37, 1);
  uint64_t v38 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_51775add461074af32e489ceb1be9957e57adffb8c08954e7cbc8b97503f57aa");
  uint64_t v39 = agxps_timeseries_get_length((uint64_t)v38);
  unint64_t v40 = (int *)sub_176E24(a5, 0, v39);
  agxps_timeseries_add_tt(v37, v38, v40, 1);
  uint64_t v41 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_611e8d6895be97ec85f10254d0a182eba64be144b3828d81e58296d054c806f4");
  uint64_t v42 = agxps_timeseries_get_length((uint64_t)v41);
  uint64_t v43 = (int *)sub_176E24(a5, 0, v42);
  agxps_timeseries_add_tt(v40, v41, v43, 1);
  uint64_t v44 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_29b22d9d81e5faf744ffe7f2ef578e3373cddcc7920cbcc40a2adbe852681fc9");
  uint64_t v45 = agxps_timeseries_get_length((uint64_t)v44);
  unint64_t v46 = (int *)sub_176E24(a5, 0, v45);
  agxps_timeseries_add_tt(v43, v44, v46, 1);
  uint64_t v47 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_5a7e43ba4541824bbaa881559bdcdd5ef8408e3ba5e9a4a5b8c8263cf2154427");
  uint64_t v48 = agxps_timeseries_get_length((uint64_t)v47);
  uint64_t v49 = (int *)sub_176E24(a5, 0, v48);
  agxps_timeseries_add_tt(v46, v47, v49, 1);
  uint64_t v50 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_0596eeb85056cf898443332ee6ea8bb881ee935a2e48e123c1bea937d7628835");
  uint64_t v51 = agxps_timeseries_get_length((uint64_t)v50);
  unint64_t v52 = (int *)sub_176E24(a5, 0, v51);
  agxps_timeseries_add_tt(v49, v50, v52, 1);
  unsigned int v53 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_99a23e5520fca1ce9e447dcb8f465fb3421277f600bd4619d437c73762113efb");
  uint64_t v54 = agxps_timeseries_get_length((uint64_t)v53);
  uint64_t v55 = (int *)sub_176E24(a5, 0, v54);
  agxps_timeseries_add_tt(v52, v53, v55, 1);
  uint64_t v56 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_f20734f8b1c3edc9cd0770ab4136f9c10a91972eb00a5b6d09d709ec96e491fa");
  uint64_t v57 = agxps_timeseries_get_length((uint64_t)v56);
  unint64_t v58 = (int *)sub_176E24(a5, 0, v57);
  agxps_timeseries_add_tt(v55, v56, v58, 1);
  unint64_t v59 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_1368d41a242c0d8551e43e68e72de446f5393d47c57e5e80d30a559200ed596c");
  uint64_t v60 = agxps_timeseries_get_length((uint64_t)v59);
  uint64_t v61 = (int *)sub_176E24(a5, 0, v60);
  agxps_timeseries_add_tt(v58, v59, v61, 1);
  unint64_t v62 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_c5fcc1133689a4133a1de53ded83dc65a5521aa193be40ab64c4189f3a9ae9cf");
  uint64_t v63 = agxps_timeseries_get_length((uint64_t)v62);
  uint64_t v64 = (int *)sub_176E24(a5, 0, v63);
  agxps_timeseries_add_tt(v61, v62, v64, 1);
  unint64_t v65 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_e1ad3266ba1f3521d10f57bd0d29721449ef2ac9bbaaafd3d3ae59b1627126db");
  uint64_t v66 = agxps_timeseries_get_length((uint64_t)v65);
  uint64_t v67 = (int *)sub_176E24(a5, 0, v66);
  agxps_timeseries_add_tt(v64, v65, v67, 1);
  uint64_t v68 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_3ebb8c7a6a99602c5cd417ea8af19176f3ceb108288c6f00f490ae550ac5c2c6");
  uint64_t v69 = agxps_timeseries_get_length((uint64_t)v68);
  unint64_t v70 = (int *)sub_176E24(a5, 0, v69);
  agxps_timeseries_add_tt(v67, v68, v70, 1);
  unint64_t v71 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_459564729d0b5db736b153577373a56625347fe30183800281802f300feee3ba");
  uint64_t v72 = agxps_timeseries_get_length((uint64_t)v71);
  uint64_t v73 = (int *)sub_176E24(a5, 0, v72);
  agxps_timeseries_add_tt(v70, v71, v73, 1);
  unint64_t v74 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_c077cee4bb409aecdf1974aadf9abcb056681bc42c4fc15f30170bf80d1f6e4c");
  uint64_t v75 = agxps_timeseries_get_length((uint64_t)v74);
  unint64_t v76 = (int *)sub_176E24(a5, 0, v75);
  agxps_timeseries_add_tt(v73, v74, v76, 1);
  unint64_t v77 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_fa01d5329f611805a99f4699e796d485f8f993df07816be0c8b15ac5e39951ea");
  uint64_t v78 = agxps_timeseries_get_length((uint64_t)v77);
  uint64_t v79 = (int *)sub_176E24(a5, 0, v78);
  agxps_timeseries_add_tt(v76, v77, v79, 1);
  uint64_t v80 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_0b4c966855c4b581f07ec85a1491cb234d31a838aaf82adc9427d3b2497bd31c");
  uint64_t v81 = agxps_timeseries_get_length((uint64_t)v80);
  size_t v82 = (int *)sub_176E24(a5, 0, v81);
  agxps_timeseries_add_tt(v79, v80, v82, 1);
  unint64_t v83 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_3a4bf2592dcfa5bd877f621933e8c97461f8774aaf1561c64cc4e90f0cafeb4e");
  uint64_t v84 = agxps_timeseries_get_length((uint64_t)v83);
  uint64_t v85 = (int *)sub_176E24(a5, 0, v84);
  agxps_timeseries_add_tt(v82, v83, v85, 1);
  unint64_t v86 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_89051b6760c2a53381edfd5c68aef41e769dba64437b5fc30417a810f55e9296");
  uint64_t v87 = agxps_timeseries_get_length((uint64_t)v86);
  unint64_t v88 = (int *)sub_176E24(a5, 0, v87);
  agxps_timeseries_add_tt(v85, v86, v88, 1);
  unint64_t v89 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_4e088158f4d8adbbe88420686b1cb8700f71b4a42277c8b25c3f00bb97008361");
  uint64_t v90 = agxps_timeseries_get_length((uint64_t)v89);
  uint64_t v91 = (int *)sub_176E24(a5, 0, v90);
  agxps_timeseries_add_tt(v88, v89, v91, 1);
  unint64_t v92 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_0427b329a9bf6f3b297e589bdebcd2e8a222101e677f95061e2fbe6fbe4ffa6f");
  uint64_t v93 = agxps_timeseries_get_length((uint64_t)v92);
  unint64_t v94 = (int *)sub_176E24(a5, 0, v93);
  agxps_timeseries_add_tt(v91, v92, v94, 1);
  unint64_t v95 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_da358d8f72edfef7369baa73d3f5e11cfbd49f69949f6c79da120cd408287c04");
  uint64_t v96 = agxps_timeseries_get_length((uint64_t)v95);
  uint64_t v97 = (int *)sub_176E24(a5, 0, v96);
  agxps_timeseries_add_tt(v94, v95, v97, 1);
  LODWORD(v95) = sub_D5D4();
  unint64_t v99 = v98;
  unint64_t v100 = (int *)sub_176E24(a5, 0, v96);
  agxps_timeseries_mul_ts(v97, (int)v95, v99, v100, 1);
  return v100;
}

uint64_t sub_FBA1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "CompressedSamples");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v7);
  int v9 = sub_D5D4();
  unint64_t v11 = v10;
  uint64_t v12 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_ts(v7, v9, v11, v12, 1);
  uint64_t v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "TextureQuads");
  uint64_t v14 = agxps_timeseries_get_length((uint64_t)v13);
  int v15 = sub_D5D4();
  unint64_t v17 = v16;
  uint64_t v18 = (int *)sub_176E24(a5, 0, v14);
  agxps_timeseries_mul_ts(v13, v15, v17, v18, 1);
  uint64_t v19 = sub_D5D4();
  unint64_t v21 = v20;
  uint64_t v22 = sub_176E24(a5, 0, v14);
  uint64_t v23 = (int *)sub_176E24(a5, 0, v14);
  agxps_timeseries_compare_ts(3, v18, v19, v21, v22, 1);
  agxps_timeseries_select_tts(v22, (uint64_t)v18, v19, v21, (uint64_t)v23);
  uint64_t v24 = (int *)sub_176E24(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v23, v24, 1);
  uint64_t v25 = sub_D5D4();
  unint64_t v27 = v26;
  uint64_t v28 = sub_176E24(a5, 0, v14);
  uint64_t v29 = sub_176E24(a5, 0, v14);
  agxps_timeseries_compare_ts(2, v24, v25, v27, v28, 1);
  agxps_timeseries_select_tts(v28, (uint64_t)v24, v25, v27, v29);
  return v29;
}

int *sub_FBC64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_7cdc2c85e61923202c5936567bb447b8929b55e3fadd72277ff0796a99a7bdb4");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v6);
  int v8 = sub_D5D4();
  unint64_t v10 = v9;
  unint64_t v11 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_ts(v6, v8, v10, v11, 1);
  return v11;
}

int *sub_FBD10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "LosslessCompressedSamples");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v7);
  int v9 = sub_D5D4();
  unint64_t v11 = v10;
  uint64_t v12 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_ts(v7, v9, v11, v12, 1);
  uint64_t v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "TextureQuads");
  uint64_t v14 = agxps_timeseries_get_length((uint64_t)v13);
  int v15 = sub_D5D4();
  unint64_t v17 = v16;
  uint64_t v18 = (int *)sub_176E24(a5, 0, v14);
  agxps_timeseries_mul_ts(v13, v15, v17, v18, 1);
  uint64_t v19 = sub_D5D4();
  unint64_t v21 = v20;
  uint64_t v22 = sub_176E24(a5, 0, v14);
  uint64_t v23 = (int *)sub_176E24(a5, 0, v14);
  agxps_timeseries_compare_ts(3, v18, v19, v21, v22, 1);
  agxps_timeseries_select_tts(v22, (uint64_t)v18, v19, v21, (uint64_t)v23);
  uint64_t v24 = (int *)sub_176E24(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v23, v24, 1);
  return v24;
}

int *sub_FBEDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_4e06778c6dbd312e12fd320be6a28037bd94e2cc19c8687aba8981ec52f7d19e");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v6);
  int v8 = sub_D5D4();
  unint64_t v10 = v9;
  unint64_t v11 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_ts(v6, v8, v10, v11, 1);
  return v11;
}

int *sub_FBF88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "LossyCompressedSamples");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v7);
  int v9 = sub_D5D4();
  unint64_t v11 = v10;
  uint64_t v12 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_ts(v7, v9, v11, v12, 1);
  uint64_t v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "TextureQuads");
  uint64_t v14 = agxps_timeseries_get_length((uint64_t)v13);
  int v15 = sub_D5D4();
  unint64_t v17 = v16;
  uint64_t v18 = (int *)sub_176E24(a5, 0, v14);
  agxps_timeseries_mul_ts(v13, v15, v17, v18, 1);
  uint64_t v19 = sub_D5D4();
  unint64_t v21 = v20;
  uint64_t v22 = sub_176E24(a5, 0, v14);
  uint64_t v23 = (int *)sub_176E24(a5, 0, v14);
  agxps_timeseries_compare_ts(3, v18, v19, v21, v22, 1);
  agxps_timeseries_select_tts(v22, (uint64_t)v18, v19, v21, (uint64_t)v23);
  uint64_t v24 = (int *)sub_176E24(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v23, v24, 1);
  return v24;
}

uint64_t sub_FC154(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "TextureSamples");
  agxps_timeseries_get_length((uint64_t)v7);
  int v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "CompressedSamples");
  agxps_timeseries_get_length((uint64_t)v8);
  int v9 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "LosslessCompressedSamples");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v9);
  unint64_t v11 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_add_tt(v8, v9, v11, 1);
  uint64_t v12 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "LossyCompressedSamples");
  uint64_t v13 = agxps_timeseries_get_length((uint64_t)v12);
  uint64_t v14 = (int *)sub_176E24(a5, 0, v13);
  agxps_timeseries_add_tt(v11, v12, v14, 1);
  int v15 = (int *)sub_176E24(a5, 0, v13);
  agxps_timeseries_sub_tt(v7, v14, v15, 1);
  uint64_t v16 = sub_D5D4();
  unint64_t v18 = v17;
  uint64_t v19 = sub_176E24(a5, 0, v13);
  uint64_t v20 = sub_176E24(a5, 0, v13);
  agxps_timeseries_compare_ts(3, v15, v16, v18, v19, 1);
  agxps_timeseries_select_tts(v19, (uint64_t)v15, v16, v18, v20);
  return v20;
}

uint64_t sub_FC358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_D5D4();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "UncompressedSamples");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v10);
  uint64_t v12 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  uint64_t v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "TextureQuads");
  uint64_t v14 = agxps_timeseries_get_length((uint64_t)v13);
  LODWORD(v9) = sub_D5D4();
  unint64_t v16 = v15;
  unint64_t v17 = (int *)sub_176E24(a5, 0, v14);
  agxps_timeseries_mul_ts(v13, v9, v16, v17, 1);
  uint64_t v18 = sub_D5D4();
  unint64_t v20 = v19;
  uint64_t v21 = sub_176E24(a5, 0, v14);
  uint64_t v22 = (int *)sub_176E24(a5, 0, v14);
  agxps_timeseries_compare_ts(3, v17, v18, v20, v21, 1);
  agxps_timeseries_select_tts(v21, (uint64_t)v17, v18, v20, (uint64_t)v22);
  uint64_t v23 = (int *)sub_176E24(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v22, v23, 1);
  uint64_t v24 = sub_D5D4();
  unint64_t v26 = v25;
  uint64_t v27 = sub_176E24(a5, 0, v14);
  uint64_t v28 = sub_176E24(a5, 0, v14);
  agxps_timeseries_compare_ts(2, v23, v24, v26, v27, 1);
  agxps_timeseries_select_tts(v27, (uint64_t)v23, v24, v26, v28);
  return v28;
}

int *sub_FC59C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_f406f88bdd312ec0455d0943c388de77e53b86cf0109624b028c3aa596ec3bf4");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v6);
  int v8 = sub_D5D4();
  unint64_t v10 = v9;
  unint64_t v11 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_ts(v6, v8, v10, v11, 1);
  return v11;
}

int *sub_FC648(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_170b3221860fc0fbaa56212aaec28265bbcde52553eab4dcc253c612393c0d02");
  agxps_timeseries_get_length((uint64_t)v7);
  int v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_b1c17891cd73c9759b561e8166a6d51c7a422df70de3a45524ee1d8edf3d8edc");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v10 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_sub_tt(v7, v8, v10, 1);
  LODWORD(v8) = sub_D5D4();
  unint64_t v12 = v11;
  uint64_t v13 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_ts(v10, (int)v8, v12, v13, 1);
  return v13;
}

uint64_t sub_FC758(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "PixelsUnbiasedWrittenToMemory");
  agxps_timeseries_get_length(v7);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "TexturePixelsWrittenToMemory");
  uint64_t length = agxps_timeseries_get_length(v8);
  uint64_t v10 = sub_176E24(a5, 0, length);
  uint64_t v11 = sub_176E24(a5, 0, length);
  double v12 = agxps_timeseries_compare_tt(3, v7, v8, v10, 1);
  agxps_timeseries_select_ttt(v10, v7, v8, v11, v12);
  return v11;
}

uint64_t sub_FC85C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "PixelsUnbiasedWrittenToMemory");
  agxps_timeseries_get_length((uint64_t)v7);
  uint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "TexturePixelsWrittenToMemory");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  uint64_t v10 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_sub_tt(v7, v8, v10, 1);
  uint64_t v11 = sub_D5D4();
  unint64_t v13 = v12;
  uint64_t v14 = sub_176E24(a5, 0, length);
  uint64_t v15 = sub_176E24(a5, 0, length);
  agxps_timeseries_compare_ts(3, v10, v11, v13, v14, 1);
  agxps_timeseries_select_tts(v14, (uint64_t)v10, v11, v13, v15);
  return v15;
}

int *sub_FC9A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_17ce0d5869b1ca5ede98d597eab698bc9a77c1ce783528f1a91438acb0c9fd08");
  agxps_timeseries_get_length((uint64_t)v7);
  uint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_71974a1faa4bcd23016a415a1cc6479308dab6778adbf2bab1cc0b8bf7de9982");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  uint64_t v10 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_add_tt(v7, v8, v10, 1);
  LODWORD(v8) = sub_D5D4();
  unint64_t v12 = v11;
  unint64_t v13 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_ts(v10, (int)v8, v12, v13, 1);
  return v13;
}

int *sub_FCAB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_84bc1f813b908b1a82a17fdf171643fd8ce9017f20844aa9fd9dd7f157bfeb00");
  agxps_timeseries_get_length((uint64_t)v7);
  uint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_766330b34b32220fe711ebf12a170751a84406ef29a5cd982cef665be1b22d5d");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  uint64_t v10 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_add_tt(v7, v8, v10, 1);
  unint64_t v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_f68e35eeb2bee048cb6bf9642f11773f9a1cac3f48f8bd73dac5c2f707b94e9c");
  uint64_t v12 = agxps_timeseries_get_length((uint64_t)v11);
  unint64_t v13 = (int *)sub_176E24(a5, 0, v12);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  uint64_t v14 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_4d4fe81719dc0200f2d42c34feddce82198b6d23f8bbe3ec0bd4187bf4a30249");
  agxps_timeseries_get_length((uint64_t)v14);
  uint64_t v15 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_0f5ce867725c9affb1528c58134532b18ac7e8860047f7e3b81c9f367bf50f04");
  uint64_t v16 = agxps_timeseries_get_length((uint64_t)v15);
  unint64_t v17 = (int *)sub_176E24(a5, 0, v16);
  agxps_timeseries_add_tt(v14, v15, v17, 1);
  uint64_t v18 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_5f3f0a1e85f83b10e10c873cae3db6a0be598f56f0c208e4d8bf3a4ea9cf40fa");
  uint64_t v19 = agxps_timeseries_get_length((uint64_t)v18);
  unint64_t v20 = (int *)sub_176E24(a5, 0, v19);
  agxps_timeseries_add_tt(v17, v18, v20, 1);
  uint64_t v21 = (int *)sub_176E24(a5, 0, v19);
  agxps_timeseries_add_tt(v13, v20, v21, 1);
  LODWORD(v13) = sub_D5D4();
  unint64_t v23 = v22;
  uint64_t v24 = (int *)sub_176E24(a5, 0, v19);
  agxps_timeseries_mul_ts(v21, (int)v13, v23, v24, 1);
  return v24;
}

int *sub_FCD40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_5139262f4aa51a2a266c84eae7b1d2a0524e10ec154ddf35e1e1bc529071258a");
  agxps_timeseries_get_length((uint64_t)v7);
  uint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_a126f888ccf5d17092b398420351fb81f0c5462f5e15a2bf22f6914208f68de2");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  uint64_t v10 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_add_tt(v7, v8, v10, 1);
  unint64_t v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_b2f6334df9fdac01bda9fa44b127edadeb640750d6824c0b27a248d10aba3638");
  uint64_t v12 = agxps_timeseries_get_length((uint64_t)v11);
  unint64_t v13 = (int *)sub_176E24(a5, 0, v12);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  uint64_t v14 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_346c9e2c1dd65c22e4dcdd48f80c681551c075280b02796f700601c4530e6f4f");
  uint64_t v15 = agxps_timeseries_get_length((uint64_t)v14);
  uint64_t v16 = (int *)sub_176E24(a5, 0, v15);
  agxps_timeseries_add_tt(v13, v14, v16, 1);
  unint64_t v17 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_ba686a2bead0a853932fbb1feeb87f6b3cabbfa17f2e647b7d6f92105f398c4d");
  uint64_t v18 = agxps_timeseries_get_length((uint64_t)v17);
  uint64_t v19 = (int *)sub_176E24(a5, 0, v18);
  agxps_timeseries_add_tt(v16, v17, v19, 1);
  unint64_t v20 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_5d5cf41f6d7d32235e797b13857ad1e9dfa3b04d83470ee5997d55d83e8107aa");
  uint64_t v21 = agxps_timeseries_get_length((uint64_t)v20);
  unint64_t v22 = (int *)sub_176E24(a5, 0, v21);
  agxps_timeseries_add_tt(v19, v20, v22, 1);
  return v22;
}

int *sub_FCF90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_D5D4();
  unint64_t v9 = v8;
  uint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_5139262f4aa51a2a266c84eae7b1d2a0524e10ec154ddf35e1e1bc529071258a");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v10);
  uint64_t v12 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "TotalSBUsedInLossyCompression");
  uint64_t v14 = agxps_timeseries_get_length(v13);
  uint64_t v15 = sub_D5D4();
  unint64_t v17 = v16;
  uint64_t v18 = sub_176E24(a5, 0, v14);
  uint64_t v19 = (int *)sub_176E24(a5, 0, v14);
  agxps_timeseries_compare_ts(3, v13, v15, v17, v18, 1);
  agxps_timeseries_select_tts(v18, v13, v15, v17, (uint64_t)v19);
  unint64_t v20 = (int *)sub_176E24(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v19, v20, 1);
  return v20;
}

int *sub_FD11C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_D5D4();
  unint64_t v9 = v8;
  uint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_a126f888ccf5d17092b398420351fb81f0c5462f5e15a2bf22f6914208f68de2");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v10);
  uint64_t v12 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "TotalSBUsedInLossyCompression");
  uint64_t v14 = agxps_timeseries_get_length(v13);
  uint64_t v15 = sub_D5D4();
  unint64_t v17 = v16;
  uint64_t v18 = sub_176E24(a5, 0, v14);
  uint64_t v19 = (int *)sub_176E24(a5, 0, v14);
  agxps_timeseries_compare_ts(3, v13, v15, v17, v18, 1);
  agxps_timeseries_select_tts(v18, v13, v15, v17, (uint64_t)v19);
  unint64_t v20 = (int *)sub_176E24(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v19, v20, 1);
  return v20;
}

int *sub_FD2A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_D5D4();
  unint64_t v9 = v8;
  uint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_b2f6334df9fdac01bda9fa44b127edadeb640750d6824c0b27a248d10aba3638");
  agxps_timeseries_get_length((uint64_t)v10);
  unint64_t v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_346c9e2c1dd65c22e4dcdd48f80c681551c075280b02796f700601c4530e6f4f");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v11);
  uint64_t v13 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  uint64_t v14 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_ba686a2bead0a853932fbb1feeb87f6b3cabbfa17f2e647b7d6f92105f398c4d");
  uint64_t v15 = agxps_timeseries_get_length((uint64_t)v14);
  unint64_t v16 = (int *)sub_176E24(a5, 0, v15);
  agxps_timeseries_add_tt(v13, v14, v16, 1);
  unint64_t v17 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_5d5cf41f6d7d32235e797b13857ad1e9dfa3b04d83470ee5997d55d83e8107aa");
  uint64_t v18 = agxps_timeseries_get_length((uint64_t)v17);
  uint64_t v19 = (int *)sub_176E24(a5, 0, v18);
  agxps_timeseries_add_tt(v16, v17, v19, 1);
  unint64_t v20 = (int *)sub_176E24(a5, 0, v18);
  agxps_timeseries_mul_st(v7, v9, v19, v20, 1);
  uint64_t v21 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "TotalSBUsedInLossyCompression");
  uint64_t v22 = agxps_timeseries_get_length(v21);
  uint64_t v23 = sub_D5D4();
  unint64_t v25 = v24;
  uint64_t v26 = sub_176E24(a5, 0, v22);
  uint64_t v27 = (int *)sub_176E24(a5, 0, v22);
  agxps_timeseries_compare_ts(3, v21, v23, v25, v26, 1);
  agxps_timeseries_select_tts(v26, v21, v23, v25, (uint64_t)v27);
  uint64_t v28 = (int *)sub_176E24(a5, 0, v22);
  agxps_timeseries_div_tt(v20, v27, v28, 1);
  return v28;
}

int *sub_FD558(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v39 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_b2f6334df9fdac01bda9fa44b127edadeb640750d6824c0b27a248d10aba3638");
  agxps_timeseries_get_length((uint64_t)v39);
  int v7 = sub_D5D4();
  unint64_t v9 = v8;
  uint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_346c9e2c1dd65c22e4dcdd48f80c681551c075280b02796f700601c4530e6f4f");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v10);
  uint64_t v12 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  uint64_t v13 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_add_tt(v39, v12, v13, 1);
  LODWORD(length) = sub_D5D4();
  unint64_t v15 = v14;
  unint64_t v16 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_ba686a2bead0a853932fbb1feeb87f6b3cabbfa17f2e647b7d6f92105f398c4d");
  uint64_t v17 = agxps_timeseries_get_length((uint64_t)v16);
  uint64_t v18 = (int *)sub_176E24(a5, 0, v17);
  agxps_timeseries_mul_st(length, v15, v16, v18, 1);
  uint64_t v19 = (int *)sub_176E24(a5, 0, v17);
  agxps_timeseries_add_tt(v13, v18, v19, 1);
  LODWORD(v13) = sub_D5D4();
  unint64_t v21 = v20;
  uint64_t v22 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_5d5cf41f6d7d32235e797b13857ad1e9dfa3b04d83470ee5997d55d83e8107aa");
  uint64_t v23 = agxps_timeseries_get_length((uint64_t)v22);
  unint64_t v24 = (int *)sub_176E24(a5, 0, v23);
  agxps_timeseries_mul_st((int)v13, v21, v22, v24, 1);
  unint64_t v25 = (int *)sub_176E24(a5, 0, v23);
  agxps_timeseries_add_tt(v19, v24, v25, 1);
  uint64_t v26 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_a126f888ccf5d17092b398420351fb81f0c5462f5e15a2bf22f6914208f68de2");
  uint64_t v27 = agxps_timeseries_get_length((uint64_t)v26);
  uint64_t v28 = (int *)sub_176E24(a5, 0, v27);
  agxps_timeseries_add_tt(v26, v39, v28, 1);
  uint64_t v29 = (int *)sub_176E24(a5, 0, v27);
  agxps_timeseries_add_tt(v28, v10, v29, 1);
  uint64_t v30 = (int *)sub_176E24(a5, 0, v27);
  agxps_timeseries_add_tt(v29, v16, v30, 1);
  unint64_t v31 = (int *)sub_176E24(a5, 0, v27);
  agxps_timeseries_add_tt(v30, v22, v31, 1);
  uint64_t v32 = sub_D5D4();
  unint64_t v34 = v33;
  uint64_t v35 = sub_176E24(a5, 0, v27);
  uint64_t v36 = (int *)sub_176E24(a5, 0, v27);
  agxps_timeseries_compare_ts(3, v31, v32, v34, v35, 1);
  agxps_timeseries_select_tts(v35, (uint64_t)v31, v32, v34, (uint64_t)v36);
  uint64_t v37 = (int *)sub_176E24(a5, 0, v27);
  agxps_timeseries_div_tt(v25, v36, v37, 1);
  return v37;
}

int *sub_FD938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_D5D4();
  unint64_t v9 = v8;
  uint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "TexturePixelsWrittenToMemory");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v10);
  uint64_t v12 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "PixelsWrittenToMemory");
  uint64_t v14 = agxps_timeseries_get_length(v13);
  uint64_t v15 = sub_D5D4();
  unint64_t v17 = v16;
  uint64_t v18 = sub_176E24(a5, 0, v14);
  uint64_t v19 = (int *)sub_176E24(a5, 0, v14);
  agxps_timeseries_compare_ts(3, v13, v15, v17, v18, 1);
  agxps_timeseries_select_tts(v18, v13, v15, v17, (uint64_t)v19);
  unint64_t v20 = (int *)sub_176E24(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v19, v20, 1);
  return v20;
}

int *sub_FDAC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_D5D4();
  unint64_t v9 = v8;
  uint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "AttachmentPixelsWrittenToMemory");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v10);
  uint64_t v12 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "PixelsWrittenToMemory");
  uint64_t v14 = agxps_timeseries_get_length(v13);
  uint64_t v15 = sub_D5D4();
  unint64_t v17 = v16;
  uint64_t v18 = sub_176E24(a5, 0, v14);
  uint64_t v19 = (int *)sub_176E24(a5, 0, v14);
  agxps_timeseries_compare_ts(3, v13, v15, v17, v18, 1);
  agxps_timeseries_select_tts(v18, v13, v15, v17, (uint64_t)v19);
  unint64_t v20 = (int *)sub_176E24(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v19, v20, 1);
  return v20;
}

int *sub_FDC50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_D5D4();
  unint64_t v9 = v8;
  uint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "CompressedPixelsWrittenToMemory");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v10);
  uint64_t v12 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "PixelsWrittenToMemory");
  uint64_t v14 = agxps_timeseries_get_length(v13);
  uint64_t v15 = sub_D5D4();
  unint64_t v17 = v16;
  uint64_t v18 = sub_176E24(a5, 0, v14);
  uint64_t v19 = (int *)sub_176E24(a5, 0, v14);
  agxps_timeseries_compare_ts(3, v13, v15, v17, v18, 1);
  agxps_timeseries_select_tts(v18, v13, v15, v17, (uint64_t)v19);
  unint64_t v20 = (int *)sub_176E24(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v19, v20, 1);
  return v20;
}

int *sub_FDDDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_D5D4();
  unint64_t v9 = v8;
  uint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "LossyCompressedPixelsWrittenToMemory");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v10);
  uint64_t v12 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "PixelsWrittenToMemory");
  uint64_t v14 = agxps_timeseries_get_length(v13);
  uint64_t v15 = sub_D5D4();
  unint64_t v17 = v16;
  uint64_t v18 = sub_176E24(a5, 0, v14);
  uint64_t v19 = (int *)sub_176E24(a5, 0, v14);
  agxps_timeseries_compare_ts(3, v13, v15, v17, v18, 1);
  agxps_timeseries_select_tts(v18, v13, v15, v17, (uint64_t)v19);
  unint64_t v20 = (int *)sub_176E24(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v19, v20, 1);
  return v20;
}

int *sub_FDF68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_66eafb3ddb63687a1eef3817f25c70385aeb51f41d76b5cbdc5aa69a556bb76c");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v6);
  int v8 = sub_D5D4();
  unint64_t v10 = v9;
  unint64_t v11 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_ts(v6, v8, v10, v11, 1);
  return v11;
}

int *sub_FE014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_788f9865b6b4897849bedfd577403fe30b882c1c6c2afcdbf2a9f8a0d41e741b");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v6);
  int v8 = sub_D5D4();
  unint64_t v10 = v9;
  unint64_t v11 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_ts(v6, v8, v10, v11, 1);
  return v11;
}

int *sub_FE0C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_D5D4();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "MSAA2XResolvedPixels");
  agxps_timeseries_get_length((uint64_t)v10);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "PixelsWrittenToMemory");
  uint64_t length = agxps_timeseries_get_length(v11);
  uint64_t v13 = sub_D5D4();
  unint64_t v15 = v14;
  uint64_t v16 = sub_176E24(a5, 0, length);
  unint64_t v17 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_compare_ts(3, v11, v13, v15, v16, 1);
  agxps_timeseries_select_tts(v16, v11, v13, v15, (uint64_t)v17);
  uint64_t v18 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_div_tt(v10, v17, v18, 1);
  uint64_t v19 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v18, v19, 1);
  return v19;
}

int *sub_FE254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_D5D4();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "MSAA4XResolvedPixels");
  agxps_timeseries_get_length((uint64_t)v10);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "PixelsWrittenToMemory");
  uint64_t length = agxps_timeseries_get_length(v11);
  uint64_t v13 = sub_D5D4();
  unint64_t v15 = v14;
  uint64_t v16 = sub_176E24(a5, 0, length);
  unint64_t v17 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_compare_ts(3, v11, v13, v15, v16, 1);
  agxps_timeseries_select_tts(v16, v11, v13, v15, (uint64_t)v17);
  uint64_t v18 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_div_tt(v10, v17, v18, 1);
  uint64_t v19 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v18, v19, 1);
  return v19;
}

int *sub_FE3E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_92e4033c73762edd1ce117ae25bceecf0ae126712bf861ca430c8049f845b9ff");
  agxps_timeseries_get_length((uint64_t)v7);
  unint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_37b62c762d1c23168d0c25f1bc6033c6ee17922f5e31eab8d0cd946eb40ff5f3");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v10 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_add_tt(v7, v8, v10, 1);
  uint64_t v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_984b0993354750161fe0018879ef125f6e3d98a5cbd800796dba5fb611df1651");
  uint64_t v12 = agxps_timeseries_get_length((uint64_t)v11);
  uint64_t v13 = (int *)sub_176E24(a5, 0, v12);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  unint64_t v14 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_6bb7d08e271a527bc1e586380563ec0de8de7e58c81e7b417ac1ecb39790c288");
  uint64_t v15 = agxps_timeseries_get_length((uint64_t)v14);
  uint64_t v16 = (int *)sub_176E24(a5, 0, v15);
  agxps_timeseries_add_tt(v13, v14, v16, 1);
  LODWORD(v14) = sub_D5D4();
  unint64_t v18 = v17;
  uint64_t v19 = (int *)sub_176E24(a5, 0, v15);
  agxps_timeseries_mul_ts(v16, (int)v14, v18, v19, 1);
  return v19;
}

int *sub_FE5B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_D5D4();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_92e4033c73762edd1ce117ae25bceecf0ae126712bf861ca430c8049f845b9ff");
  agxps_timeseries_get_length((uint64_t)v10);
  int v11 = sub_D5D4();
  unint64_t v13 = v12;
  unint64_t v14 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_37b62c762d1c23168d0c25f1bc6033c6ee17922f5e31eab8d0cd946eb40ff5f3");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v14);
  uint64_t v16 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v11, v13, v14, v16, 1);
  unint64_t v17 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_add_tt(v10, v16, v17, 1);
  LODWORD(v10) = sub_D5D4();
  unint64_t v19 = v18;
  unint64_t v20 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_984b0993354750161fe0018879ef125f6e3d98a5cbd800796dba5fb611df1651");
  uint64_t v21 = agxps_timeseries_get_length((uint64_t)v20);
  uint64_t v22 = (int *)sub_176E24(a5, 0, v21);
  agxps_timeseries_mul_st((int)v10, v19, v20, v22, 1);
  uint64_t v23 = (int *)sub_176E24(a5, 0, v21);
  agxps_timeseries_add_tt(v17, v22, v23, 1);
  LODWORD(v17) = sub_D5D4();
  unint64_t v25 = v24;
  uint64_t v26 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_6bb7d08e271a527bc1e586380563ec0de8de7e58c81e7b417ac1ecb39790c288");
  uint64_t v27 = agxps_timeseries_get_length((uint64_t)v26);
  uint64_t v28 = (int *)sub_176E24(a5, 0, v27);
  agxps_timeseries_mul_st((int)v17, v25, v26, v28, 1);
  uint64_t v29 = (int *)sub_176E24(a5, 0, v27);
  agxps_timeseries_add_tt(v23, v28, v29, 1);
  uint64_t v30 = (int *)sub_176E24(a5, 0, v27);
  agxps_timeseries_mul_st(v7, v9, v29, v30, 1);
  uint64_t v31 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "TotalResolvedPixels");
  uint64_t v32 = agxps_timeseries_get_length(v31);
  uint64_t v33 = sub_D5D4();
  unint64_t v35 = v34;
  uint64_t v36 = sub_176E24(a5, 0, v32);
  uint64_t v37 = (int *)sub_176E24(a5, 0, v32);
  agxps_timeseries_compare_ts(3, v31, v33, v35, v36, 1);
  agxps_timeseries_select_tts(v36, v31, v33, v35, (uint64_t)v37);
  uint64_t v38 = (int *)sub_176E24(a5, 0, v32);
  agxps_timeseries_div_tt(v30, v37, v38, 1);
  return v38;
}

int *sub_FE928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_867226b78b975653eb9f9d171ce53bedbf3edbc1ee1af8aa960cb9db4ec6490f");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v7);
  int v9 = sub_D5D4();
  unint64_t v11 = v10;
  unint64_t v12 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_ts(v7, v9, v11, v12, 1);
  unint64_t v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_df20e560276a18cd9b97f03f47abf0d8bf719014920913d325c6ad5d4ab98453");
  uint64_t v14 = agxps_timeseries_get_length((uint64_t)v13);
  uint64_t v15 = (int *)sub_176E24(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v13, v15, 1);
  return v15;
}

int *sub_FEA3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_f430991e42f778aeda210861eca9b8cef241898007339644eff469d83e5a6c9d");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v7);
  int v9 = sub_D5D4();
  unint64_t v11 = v10;
  unint64_t v12 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_ts(v7, v9, v11, v12, 1);
  unint64_t v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_3459b3e3f2f8a441719d05aae2161786eded99c72d7215bb6797f836d46a3426");
  uint64_t v14 = agxps_timeseries_get_length((uint64_t)v13);
  uint64_t v15 = (int *)sub_176E24(a5, 0, v14);
  agxps_timeseries_add_tt(v7, v13, v15, 1);
  uint64_t v16 = (int *)sub_176E24(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v15, v16, 1);
  return v16;
}

int *sub_FEB7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_D5D4();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_f539a056fbd45e39d61b9d34af0ea1a305dd8af6f005b5aa29488f2c966e7f21");
  agxps_timeseries_get_length((uint64_t)v10);
  unint64_t v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_c420303ee3c2ea941491fa0a071ec1553251898524fce318c3635bc711160395");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v11);
  unint64_t v13 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  uint64_t v14 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v13, v14, 1);
  return v14;
}

int *sub_FEC98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_D5D4();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_c89f25b2a31116ea6540fc6b89b623da7d4cbc9b2349ce7dbe4423a1395da60a");
  agxps_timeseries_get_length((uint64_t)v10);
  unint64_t v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_7eba0657c66c2437c8d6952fb82117b9399d920ea84fa32c5bdc9d1dee49e290");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v11);
  unint64_t v13 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  uint64_t v14 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v13, v14, 1);
  return v14;
}

int *sub_FEDB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_D5D4();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_3c6dba64fd85b35b8b8339f1d322943087d45cbb9b6689c587fd76259587a9d8");
  agxps_timeseries_get_length((uint64_t)v10);
  unint64_t v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_ac73411a986e90adcd0a1181ace1f2684e4a900be931343385b93f58de650db4");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v11);
  unint64_t v13 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_sub_tt(v10, v11, v13, 1);
  uint64_t v14 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_9153a820a764c5c32c10432035db3a4194ee169ef665e8fc7297bd5592b39e62");
  uint64_t v15 = agxps_timeseries_get_length((uint64_t)v14);
  uint64_t v16 = (int *)sub_176E24(a5, 0, v15);
  agxps_timeseries_add_tt(v13, v14, v16, 1);
  unint64_t v17 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_2fc529a9d4ee232bf862a8eb577d573bb5b4a0b9bd581d966832ceb22e3be4cf");
  uint64_t v18 = agxps_timeseries_get_length((uint64_t)v17);
  unint64_t v19 = (int *)sub_176E24(a5, 0, v18);
  agxps_timeseries_sub_tt(v16, v17, v19, 1);
  uint64_t v20 = sub_D5D4();
  unint64_t v22 = v21;
  uint64_t v23 = sub_176E24(a5, 0, v18);
  unint64_t v24 = (int *)sub_176E24(a5, 0, v18);
  agxps_timeseries_compare_ts(3, v19, v20, v22, v23, 1);
  agxps_timeseries_select_tts(v23, (uint64_t)v19, v20, v22, (uint64_t)v24);
  unint64_t v25 = (int *)sub_176E24(a5, 0, v18);
  agxps_timeseries_mul_st(v7, v9, v24, v25, 1);
  return v25;
}

int *sub_FF008(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_D5D4();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_3c6dba64fd85b35b8b8339f1d322943087d45cbb9b6689c587fd76259587a9d8");
  agxps_timeseries_get_length((uint64_t)v10);
  unint64_t v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_9153a820a764c5c32c10432035db3a4194ee169ef665e8fc7297bd5592b39e62");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v11);
  unint64_t v13 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  uint64_t v14 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v13, v14, 1);
  return v14;
}

int *sub_FF124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_D5D4();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_ef52925e500884ba6b276e576ae78b97fd8448dfadeba596c2202b5202e246c3");
  agxps_timeseries_get_length((uint64_t)v10);
  unint64_t v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_43fe12d20dfe3a9ea7b303773d624405e026e20b2c550822f2587997d2557f13");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v11);
  unint64_t v13 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  uint64_t v14 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_0d5290b07753d1bbf223d0700438322c356bc6d3f028bf47df09e81f21da75c6");
  uint64_t v15 = agxps_timeseries_get_length((uint64_t)v14);
  uint64_t v16 = (int *)sub_176E24(a5, 0, v15);
  agxps_timeseries_add_tt(v13, v14, v16, 1);
  unint64_t v17 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_3329a7bf90f5b81c24f86beffadfc66daefb2b2f45b08cdb822f931dac7370d6");
  uint64_t v18 = agxps_timeseries_get_length((uint64_t)v17);
  unint64_t v19 = (int *)sub_176E24(a5, 0, v18);
  agxps_timeseries_add_tt(v16, v17, v19, 1);
  uint64_t v20 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_3c6dba64fd85b35b8b8339f1d322943087d45cbb9b6689c587fd76259587a9d8");
  agxps_timeseries_get_length((uint64_t)v20);
  unint64_t v21 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_ac73411a986e90adcd0a1181ace1f2684e4a900be931343385b93f58de650db4");
  uint64_t v22 = agxps_timeseries_get_length((uint64_t)v21);
  uint64_t v23 = (int *)sub_176E24(a5, 0, v22);
  agxps_timeseries_sub_tt(v20, v21, v23, 1);
  unint64_t v24 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_9153a820a764c5c32c10432035db3a4194ee169ef665e8fc7297bd5592b39e62");
  uint64_t v25 = agxps_timeseries_get_length((uint64_t)v24);
  uint64_t v26 = (int *)sub_176E24(a5, 0, v25);
  agxps_timeseries_add_tt(v23, v24, v26, 1);
  uint64_t v27 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_2fc529a9d4ee232bf862a8eb577d573bb5b4a0b9bd581d966832ceb22e3be4cf");
  uint64_t v28 = agxps_timeseries_get_length((uint64_t)v27);
  uint64_t v29 = (int *)sub_176E24(a5, 0, v28);
  agxps_timeseries_sub_tt(v26, v27, v29, 1);
  uint64_t v30 = sub_D5D4();
  unint64_t v32 = v31;
  uint64_t v33 = sub_176E24(a5, 0, v28);
  unint64_t v34 = (int *)sub_176E24(a5, 0, v28);
  agxps_timeseries_compare_ts(3, v29, v30, v32, v33, 1);
  agxps_timeseries_select_tts(v33, (uint64_t)v29, v30, v32, (uint64_t)v34);
  unint64_t v35 = (int *)sub_176E24(a5, 0, v28);
  agxps_timeseries_add_tt(v19, v34, v35, 1);
  uint64_t v36 = (int *)sub_176E24(a5, 0, v28);
  agxps_timeseries_mul_st(v7, v9, v35, v36, 1);
  return v36;
}

int *sub_FF4F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_D5D4();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_d7a23701e11432625d46f02ff35668e60e55a7706704976facfe5fbeea3b1936");
  agxps_timeseries_get_length((uint64_t)v10);
  unint64_t v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_88723e1253a5c3264f69b1fbf3a6b7f3ab67bbd9fe97afeedb649146b3b8b043");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v11);
  unint64_t v13 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  uint64_t v14 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_56a63abf333e0f9f06f1a00635d4125c3910b3c00286e4fb3652687402916c8a");
  uint64_t v15 = agxps_timeseries_get_length((uint64_t)v14);
  uint64_t v16 = (int *)sub_176E24(a5, 0, v15);
  agxps_timeseries_add_tt(v13, v14, v16, 1);
  unint64_t v17 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_3c6dba64fd85b35b8b8339f1d322943087d45cbb9b6689c587fd76259587a9d8");
  uint64_t v18 = agxps_timeseries_get_length((uint64_t)v17);
  unint64_t v19 = (int *)sub_176E24(a5, 0, v18);
  agxps_timeseries_add_tt(v16, v17, v19, 1);
  uint64_t v20 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_9153a820a764c5c32c10432035db3a4194ee169ef665e8fc7297bd5592b39e62");
  uint64_t v21 = agxps_timeseries_get_length((uint64_t)v20);
  uint64_t v22 = (int *)sub_176E24(a5, 0, v21);
  agxps_timeseries_add_tt(v19, v20, v22, 1);
  uint64_t v23 = (int *)sub_176E24(a5, 0, v21);
  agxps_timeseries_mul_st(v7, v9, v22, v23, 1);
  return v23;
}

int *sub_FF734(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_df20e560276a18cd9b97f03f47abf0d8bf719014920913d325c6ad5d4ab98453");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v6);
  int v8 = sub_D5D4();
  unint64_t v10 = v9;
  unint64_t v11 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_ts(v6, v8, v10, v11, 1);
  return v11;
}

uint64_t sub_FF7E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_D5D4();
  unint64_t v29 = v8;
  int v30 = v7;
  int v9 = sub_D5D4();
  unint64_t v11 = v10;
  unint64_t v12 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_f406f88bdd312ec0455d0943c388de77e53b86cf0109624b028c3aa596ec3bf4");
  agxps_timeseries_get_length((uint64_t)v12);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_9da983fb76d81017bb17c1307769e9cdaa3547cc33eadcf7f389043343c66b31");
  uint64_t length = agxps_timeseries_get_length(v13);
  uint64_t v15 = sub_D5D4();
  unint64_t v17 = v16;
  uint64_t v18 = sub_176E24(a5, 0, length);
  unint64_t v19 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_compare_ts(3, v13, v15, v17, v18, 1);
  agxps_timeseries_select_tts(v18, v13, v15, v17, (uint64_t)v19);
  uint64_t v20 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_div_tt(v12, v19, v20, 1);
  uint64_t v21 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_sub_st(v9, v11, v20, v21, 1);
  uint64_t v22 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v30, v29, v21, v22, 1);
  uint64_t v23 = sub_D5D4();
  unint64_t v25 = v24;
  uint64_t v26 = sub_176E24(a5, 0, length);
  uint64_t v27 = sub_176E24(a5, 0, length);
  agxps_timeseries_compare_ts(3, v22, v23, v25, v26, 1);
  agxps_timeseries_select_tts(v26, (uint64_t)v22, v23, v25, v27);
  return v27;
}

uint64_t sub_FFA24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_D5D4();
  unint64_t v33 = v8;
  int v34 = v7;
  int v9 = sub_D5D4();
  unint64_t v11 = v10;
  unint64_t v12 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "TextureAccesses");
  agxps_timeseries_get_length((uint64_t)v12);
  int v13 = sub_D5D4();
  unint64_t v15 = v14;
  unint64_t v16 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "TextureQuads");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v16);
  uint64_t v18 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v13, v15, v16, v18, 1);
  uint64_t v19 = sub_D5D4();
  unint64_t v21 = v20;
  uint64_t v22 = sub_176E24(a5, 0, length);
  uint64_t v23 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_compare_ts(3, v18, v19, v21, v22, 1);
  agxps_timeseries_select_tts(v22, (uint64_t)v18, v19, v21, (uint64_t)v23);
  unint64_t v24 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_div_tt(v12, v23, v24, 1);
  unint64_t v25 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_sub_st(v9, v11, v24, v25, 1);
  uint64_t v26 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v34, v33, v25, v26, 1);
  uint64_t v27 = sub_D5D4();
  unint64_t v29 = v28;
  uint64_t v30 = sub_176E24(a5, 0, length);
  uint64_t v31 = sub_176E24(a5, 0, length);
  agxps_timeseries_compare_ts(3, v26, v27, v29, v30, 1);
  agxps_timeseries_select_tts(v30, (uint64_t)v26, v27, v29, v31);
  return v31;
}

int *sub_FFCA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_D5D4();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_416b2a4855c3ad10e45eaab8493e7651ad66f8e3d44ad880fa8111c87ccd090a");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v10);
  unint64_t v12 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  int v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_eda5bce70befa39e7c6029505c0269211092c220048a502fd8fa2fe30895465b");
  uint64_t v14 = agxps_timeseries_get_length((uint64_t)v13);
  unint64_t v15 = (int *)sub_176E24(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v13, v15, 1);
  return v15;
}

int *sub_FFDB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_D5D4();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_416b2a4855c3ad10e45eaab8493e7651ad66f8e3d44ad880fa8111c87ccd090a");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v10);
  unint64_t v12 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  int v13 = sub_D5D4();
  unint64_t v15 = v14;
  unint64_t v16 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_ca0d54323c1777d994357aaacdb7beac572bea11cd16afed4c756f3dc9496a18");
  uint64_t v17 = agxps_timeseries_get_length((uint64_t)v16);
  uint64_t v18 = (int *)sub_176E24(a5, 0, v17);
  agxps_timeseries_mul_st(v13, v15, v16, v18, 1);
  uint64_t v19 = sub_D5D4();
  unint64_t v21 = v20;
  uint64_t v22 = sub_176E24(a5, 0, v17);
  uint64_t v23 = (int *)sub_176E24(a5, 0, v17);
  agxps_timeseries_compare_ts(3, v18, v19, v21, v22, 1);
  agxps_timeseries_select_tts(v22, (uint64_t)v18, v19, v21, (uint64_t)v23);
  unint64_t v24 = (int *)sub_176E24(a5, 0, v17);
  agxps_timeseries_div_tt(v12, v23, v24, 1);
  return v24;
}

int *sub_FFF78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_b4a97f86133bb31ea8cf25afb427cb7dc1fe52552105fcd8bc3c4aa7ad099a78");
  agxps_timeseries_get_length((uint64_t)v7);
  unint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_9969883349fe2838e0be35dff1762942e9491b337c7b0ba46661003a330996ac");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v10 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_add_tt(v7, v8, v10, 1);
  unint64_t v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_868dda8bb614bc2256251603b58ea88fa9ebfde94214a32cac586b56bc8a0fdc");
  uint64_t v12 = agxps_timeseries_get_length((uint64_t)v11);
  int v13 = (int *)sub_176E24(a5, 0, v12);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  unint64_t v14 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_001df138804c389a08dc6f67112cad9b15228d51415c964e384102355b0ff784");
  uint64_t v15 = agxps_timeseries_get_length((uint64_t)v14);
  unint64_t v16 = (int *)sub_176E24(a5, 0, v15);
  agxps_timeseries_add_tt(v13, v14, v16, 1);
  uint64_t v17 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_f8d12ed1fd4a2c10df5bc36ac39f6108a81c23c312389616fd2fa2fbf882c94a");
  agxps_timeseries_get_length((uint64_t)v17);
  uint64_t v18 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_c9b7b4db80ce4f449662cc8a655a128294ce8cb63a963492682ad9c02a338a46");
  uint64_t v19 = agxps_timeseries_get_length((uint64_t)v18);
  unint64_t v20 = (int *)sub_176E24(a5, 0, v19);
  agxps_timeseries_add_tt(v17, v18, v20, 1);
  LODWORD(v17) = sub_D5D4();
  unint64_t v22 = v21;
  uint64_t v23 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_4167773bd45e5e4d7f626a716b9775f840b172225798dd96b00c6f7f0290d75e");
  uint64_t v24 = agxps_timeseries_get_length((uint64_t)v23);
  unint64_t v25 = (int *)sub_176E24(a5, 0, v24);
  agxps_timeseries_mul_st((int)v17, v22, v23, v25, 1);
  uint64_t v26 = (int *)sub_176E24(a5, 0, v24);
  agxps_timeseries_add_tt(v20, v25, v26, 1);
  uint64_t v27 = sub_D5D4();
  unint64_t v29 = v28;
  uint64_t v30 = sub_176E24(a5, 0, v24);
  uint64_t v31 = (int *)sub_176E24(a5, 0, v24);
  agxps_timeseries_compare_ts(3, v26, v27, v29, v30, 1);
  agxps_timeseries_select_tts(v30, (uint64_t)v26, v27, v29, (uint64_t)v31);
  unint64_t v32 = (int *)sub_176E24(a5, 0, v24);
  agxps_timeseries_div_tt(v16, v31, v32, 1);
  return v32;
}

int *sub_1002E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_1827ca25b7318e2df60eb0fe4f0c290b43054021ec3233e1fcdcf7b622fe4589");
  agxps_timeseries_get_length((uint64_t)v7);
  unint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_04d4411374e68233627aa77e33b97414d97097b7d3599dc0555f05e8ba0c27ad");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v10 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_add_tt(v7, v8, v10, 1);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_127d5295001f8af60ca5165221e36d79521a187e9c43940c9ea618e0d2d7c316");
  uint64_t v12 = agxps_timeseries_get_length(v11);
  uint64_t v13 = sub_D5D4();
  unint64_t v15 = v14;
  uint64_t v16 = sub_176E24(a5, 0, v12);
  uint64_t v17 = (int *)sub_176E24(a5, 0, v12);
  agxps_timeseries_compare_ts(3, v11, v13, v15, v16, 1);
  agxps_timeseries_select_tts(v16, v11, v13, v15, (uint64_t)v17);
  uint64_t v18 = (int *)sub_176E24(a5, 0, v12);
  agxps_timeseries_div_tt(v10, v17, v18, 1);
  return v18;
}

int *sub_10048C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_3a25f8b9b9a3bb6fee419881039de7947be1fc155061f0ed642d5957df2c9221");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v6);
  int v8 = sub_D5D4();
  unint64_t v10 = v9;
  uint64_t v11 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_ts(v6, v8, v10, v11, 1);
  return v11;
}

int *sub_10053C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_732f9ae18abcb107b504911ba9abe0422500b581734d0a11f801be57da3a56b5");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v6);
  int v8 = sub_D5D4();
  unint64_t v10 = v9;
  uint64_t v11 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_ts(v6, v8, v10, v11, 1);
  return v11;
}

int *sub_1005EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_ba0f7bef8431f94f98ea8587e522d4c8468e2bab9bc0be87d3b8b9ac97981db3");
  agxps_timeseries_get_length((uint64_t)v7);
  int v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_48d6a3135170e202f4c373f10c7fe2f4f35ae24a0feecef8accedc4f75fb7af4");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v10 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_add_tt(v7, v8, v10, 1);
  uint64_t v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_01d049a728cff3c54b425c2839925c3f72de7d5110d2cd0b6823d0360fd8b0d4");
  uint64_t v12 = agxps_timeseries_get_length((uint64_t)v11);
  uint64_t v13 = (int *)sub_176E24(a5, 0, v12);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  LODWORD(v11) = sub_D5D4();
  unint64_t v15 = v14;
  uint64_t v16 = (int *)sub_176E24(a5, 0, v12);
  agxps_timeseries_mul_ts(v13, (int)v11, v15, v16, 1);
  return v16;
}

uint64_t sub_100760(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "AF Bandwidth");
}

int *sub_100790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_D5D4();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_fa7f16c60620d451db8d71e3b82cab7253d2dbf1457c7966dbf002da9af010c0");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v10);
  uint64_t v12 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  return v12;
}

int *sub_100838(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_D5D4();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_e06b821bba710b56a3eaf194be742a6d964b111bb761426f6b1ebd16e227010e");
  agxps_timeseries_get_length((uint64_t)v10);
  uint64_t v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_becc55001438de226fddc3e26ffa180fce103d635eb0f85ffbb6c01dbde954fd");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v11);
  uint64_t v13 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  unint64_t v14 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v13, v14, 1);
  return v14;
}

int *sub_100954(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_D5D4();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_c788b8bd5d3e1ef8ad9501833f3b01bba5e1046e3e16d1a2aa837b76a60f19f4");
  agxps_timeseries_get_length((uint64_t)v10);
  uint64_t v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_4167773bd45e5e4d7f626a716b9775f840b172225798dd96b00c6f7f0290d75e");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v11);
  uint64_t v13 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  unint64_t v14 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v13, v14, 1);
  int v15 = sub_D5D4();
  unint64_t v17 = v16;
  uint64_t v18 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_67d62b746943a02f8d4dc07a8183667897d2a5b27b2bb6fbb52cc1f27f1c53f7");
  uint64_t v19 = agxps_timeseries_get_length((uint64_t)v18);
  unint64_t v20 = (int *)sub_176E24(a5, 0, v19);
  agxps_timeseries_mul_st(v15, v17, v18, v20, 1);
  unint64_t v21 = (int *)sub_176E24(a5, 0, v19);
  agxps_timeseries_add_tt(v14, v20, v21, 1);
  return v21;
}

int *sub_100B14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_D5D4();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_b89bac942f8b36ffc2ca66b71168fcbc6ce13aaf07ffbb371c8176139128528d");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v10);
  uint64_t v12 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  return v12;
}

int *sub_100BBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_D5D4();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_44e2790fe56248cd45e2248d0f69699da605c77fab749daf6c865f1ab5f16563");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v10);
  uint64_t v12 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_5c5c55d05fb355aa5be61ac63c88eb4a2a521a47dd8f79c18b5c1df163d5cb55");
  uint64_t v14 = agxps_timeseries_get_length(v13);
  uint64_t v15 = sub_D5D4();
  unint64_t v17 = v16;
  uint64_t v18 = sub_176E24(a5, 0, v14);
  uint64_t v19 = (int *)sub_176E24(a5, 0, v14);
  agxps_timeseries_compare_ts(3, v13, v15, v17, v18, 1);
  agxps_timeseries_select_tts(v18, v13, v15, v17, (uint64_t)v19);
  unint64_t v20 = (int *)sub_176E24(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v19, v20, 1);
  return v20;
}

uint64_t sub_100D48(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_899b43f77bed0cc43134b61fcccca0925a0e62110b4bb7fae2c765efa3f9bbdc");
  agxps_timeseries_get_length(v2);
  return v2;
}

int *sub_100DA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_257ec906bdb46e45679882d962be91fe1c161cb79df17ea71a7427b234a0b812");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v6);
  int v8 = sub_D5D4();
  unint64_t v10 = v9;
  uint64_t v11 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_ts(v6, v8, v10, v11, 1);
  LODWORD(v6) = sub_D5D4();
  unint64_t v13 = v12;
  uint64_t v14 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_ts(v11, (int)v6, v13, v14, 1);
  return v14;
}

int *sub_100E90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_23628149970030e181bfc592d170355b20bf26530773c5dc9481760b2c4158ea");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v6);
  int v8 = sub_D5D4();
  unint64_t v10 = v9;
  uint64_t v11 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_ts(v6, v8, v10, v11, 1);
  LODWORD(v6) = sub_D5D4();
  unint64_t v13 = v12;
  uint64_t v14 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_ts(v11, (int)v6, v13, v14, 1);
  return v14;
}

int *sub_100F80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "ParameterBufferTilerAlloc");
  agxps_timeseries_get_length((uint64_t)v7);
  int v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "ParameterBufferPrimitiveBlockAlloc");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v10 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_add_tt(v7, v8, v10, 1);
  return v10;
}

uint64_t sub_101048(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_06f73dd77cc4f21054a372b34a28a1d5d054ff7241ee73be67f927d897211048");
  agxps_timeseries_get_length(v2);
  return v2;
}

uint64_t sub_1010A0(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  int v8 = sub_D5D4();
  unint64_t v10 = v9;
  uint64_t v11 = (int *)(*a2)[2](a2, (int *)"_ad6b7a66022bb8efc6c01d6f3db0be8594408168905585015d8f7ab8e7efe672");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v11);
  unint64_t v13 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v8, v10, v11, v13, 1);
  unsigned int v14 = sub_D5D4();
  uint64_t v16 = v15;
  unsigned int v17 = (**a3)(a3, "NUM_CORES");
  LODWORD(a3) = sub_D634(v14, v16, v17);
  unint64_t v19 = v18;
  unint64_t v20 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_div_ts(v13, (int)a3, v19, v20, 1);
  unint64_t v21 = **a2;

  return v21(a2, v20);
}

uint64_t sub_101244(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  int v8 = sub_D5D4();
  unint64_t v10 = v9;
  uint64_t v11 = (int *)(*a2)[2](a2, (int *)"_2fab6f6232fd4f1349620047490c7562c852746134f1a6e53ca0510462394598");
  agxps_timeseries_get_length((uint64_t)v11);
  unint64_t v12 = (int *)(*a2)[2](a2, (int *)"_f4035ec10b022c926c9e5a14e4e2c08c16049d0e9474bf8b383ed109db7360d7");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v12);
  unsigned int v14 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_add_tt(v11, v12, v14, 1);
  uint64_t v15 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v8, v10, v14, v15, 1);
  LODWORD(a3) = (**a3)(a3, "NUM_CORES");
  unint64_t v17 = v16;
  unint64_t v18 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_div_ts(v15, (int)a3, v17, v18, 1);
  unint64_t v19 = **a2;

  return v19(a2, v18);
}

uint64_t sub_10142C(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  int v8 = sub_D5D4();
  unint64_t v10 = v9;
  uint64_t v11 = (int *)(*a2)[2](a2, (int *)"_1308feee43a7aae19c3764eb8928e79f464f3a2b9d1291b01c1bae25565fa93c");
  agxps_timeseries_get_length((uint64_t)v11);
  unint64_t v12 = (int *)(*a2)[2](a2, (int *)"_ee24ab3d92c84359c20d00d2061a37fcec736e1c550577f0529a9c9441a265dc");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v12);
  unsigned int v14 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_add_tt(v11, v12, v14, 1);
  uint64_t v15 = (int *)(*a2)[2](a2, (int *)"_adcaa1bfdaea7d31b4a776ffd13089ba401d5c9c533c77378b5f378062215fdb");
  agxps_timeseries_get_length((uint64_t)v15);
  unint64_t v16 = (int *)(*a2)[2](a2, (int *)"_883c062d224c59ccd4c4303a7caeacbd0aa87cd6fffd5347dfedb52a23f4a6e5");
  uint64_t v17 = agxps_timeseries_get_length((uint64_t)v16);
  unint64_t v18 = (int *)sub_176E24(a5, 0, v17);
  agxps_timeseries_add_tt(v15, v16, v18, 1);
  uint64_t v19 = sub_176E24(a5, 0, v17);
  unint64_t v20 = (int *)sub_176E24(a5, 0, v17);
  double v21 = agxps_timeseries_compare_tt(3, v14, v18, v19, 1);
  agxps_timeseries_select_ttt(v19, (uint64_t)v14, (uint64_t)v18, (uint64_t)v20, v21);
  unint64_t v22 = (int *)sub_176E24(a5, 0, v17);
  agxps_timeseries_mul_st(v8, v10, v20, v22, 1);
  LODWORD(a3) = (**a3)(a3, "NUM_CORES");
  unint64_t v24 = v23;
  unint64_t v25 = (int *)sub_176E24(a5, 0, v17);
  agxps_timeseries_div_ts(v22, (int)a3, v24, v25, 1);
  uint64_t v26 = **a2;

  return v26(a2, v25);
}

int *sub_101704(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_d2acb8217628c8c28df030d3f819e3831a16760dc5af79722487d789d9cbe02d");
  agxps_timeseries_get_length((uint64_t)v7);
  int v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_847829852334f2b320f2b2890d9a9c3dd7022b760b29a94540ba4fe13d1dd91a");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v10 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_add_tt(v7, v8, v10, 1);
  uint64_t v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_a7dd90063ddd29bf1b2d1259297cca0904b949cc92e9dee2e929fec2294f0422");
  uint64_t v12 = agxps_timeseries_get_length((uint64_t)v11);
  unint64_t v13 = (int *)sub_176E24(a5, 0, v12);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  return v13;
}

int *sub_101834(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_D5D4();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_d2acb8217628c8c28df030d3f819e3831a16760dc5af79722487d789d9cbe02d");
  agxps_timeseries_get_length((uint64_t)v10);
  int v11 = sub_D5D4();
  unint64_t v13 = v12;
  unsigned int v14 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_847829852334f2b320f2b2890d9a9c3dd7022b760b29a94540ba4fe13d1dd91a");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v14);
  unint64_t v16 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v11, v13, v14, v16, 1);
  uint64_t v17 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_add_tt(v10, v16, v17, 1);
  LODWORD(v10) = sub_D5D4();
  unint64_t v19 = v18;
  unint64_t v20 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_a7dd90063ddd29bf1b2d1259297cca0904b949cc92e9dee2e929fec2294f0422");
  uint64_t v21 = agxps_timeseries_get_length((uint64_t)v20);
  unint64_t v22 = (int *)sub_176E24(a5, 0, v21);
  agxps_timeseries_mul_st((int)v10, v19, v20, v22, 1);
  unint64_t v23 = (int *)sub_176E24(a5, 0, v21);
  agxps_timeseries_add_tt(v17, v22, v23, 1);
  unint64_t v24 = (int *)sub_176E24(a5, 0, v21);
  agxps_timeseries_mul_st(v7, v9, v23, v24, 1);
  uint64_t v25 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "SparseTextureRequests");
  uint64_t v26 = agxps_timeseries_get_length(v25);
  uint64_t v27 = sub_D5D4();
  unint64_t v29 = v28;
  uint64_t v30 = sub_176E24(a5, 0, v26);
  uint64_t v31 = (int *)sub_176E24(a5, 0, v26);
  agxps_timeseries_compare_ts(3, v25, v27, v29, v30, 1);
  agxps_timeseries_select_tts(v30, v25, v27, v29, (uint64_t)v31);
  unint64_t v32 = (int *)sub_176E24(a5, 0, v26);
  agxps_timeseries_div_tt(v24, v31, v32, 1);
  return v32;
}

uint64_t sub_101B04(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  int v8 = sub_D5D4();
  unint64_t v10 = v9;
  int v11 = (int *)(*a2)[2](a2, (int *)"_64a10cb112e74a4ec02f177b245e3f83edd61c0f78bc5bc7ae4978ce28f07f83");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v11);
  unint64_t v13 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v8, v10, v11, v13, 1);
  unsigned int v14 = sub_D5D4();
  uint64_t v16 = v15;
  unsigned int v17 = (**a3)(a3, "NUM_CORES");
  LODWORD(a3) = sub_D634(v14, v16, v17);
  unint64_t v19 = v18;
  unint64_t v20 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_div_ts(v13, (int)a3, v19, v20, 1);
  uint64_t v21 = **a2;

  return v21(a2, v20);
}

uint64_t sub_101CA8(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  unsigned int v8 = sub_D5D4();
  uint64_t v10 = v9;
  unsigned int v11 = sub_D5D4();
  int v12 = sub_D634(v8, v10, v11);
  unint64_t v14 = v13;
  uint64_t v15 = (int *)(*a2)[2](a2, (int *)"_aabc9758d4e52fd36dfb1a0e38171798aa7bf2ec665135dc298c1aa1a7c10760");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v15);
  unsigned int v17 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v12, v14, v15, v17, 1);
  LODWORD(a3) = (**a3)(a3, "NUM_CORES");
  unint64_t v19 = v18;
  unint64_t v20 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_div_ts(v17, (int)a3, v19, v20, 1);
  uint64_t v21 = **a2;

  return v21(a2, v20);
}

uint64_t sub_101E4C(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  unsigned int v8 = sub_D5D4();
  uint64_t v10 = v9;
  unsigned int v11 = sub_D5D4();
  int v12 = sub_D634(v8, v10, v11);
  unint64_t v14 = v13;
  uint64_t v15 = (int *)(*a2)[2](a2, (int *)"_ca0d54323c1777d994357aaacdb7beac572bea11cd16afed4c756f3dc9496a18");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v15);
  unsigned int v17 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v12, v14, v15, v17, 1);
  unsigned int v18 = sub_D5D4();
  uint64_t v20 = v19;
  unsigned int v21 = (**a3)(a3, "NUM_CORES");
  LODWORD(a3) = sub_D634(v18, v20, v21);
  unint64_t v23 = v22;
  unint64_t v24 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_div_ts(v17, (int)a3, v23, v24, 1);
  uint64_t v25 = **a2;

  return v25(a2, v24);
}

uint64_t sub_102014(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  int v8 = sub_D5D4();
  unint64_t v10 = v9;
  unsigned int v11 = (int *)(*a2)[2](a2, (int *)"_46210435e8bd691719dc45391f51ef552bf7e745c1401ee9943aa6f85086336e");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v11);
  unint64_t v13 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v8, v10, v11, v13, 1);
  unsigned int v14 = sub_D5D4();
  uint64_t v16 = v15;
  unsigned int v17 = (**a3)(a3, "NUM_GPS");
  LODWORD(a3) = sub_D634(v14, v16, v17);
  unint64_t v19 = v18;
  uint64_t v20 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_div_ts(v13, (int)a3, v19, v20, 1);
  unsigned int v21 = **a2;

  return v21(a2, v20);
}

uint64_t sub_1021B8(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  int v8 = sub_D5D4();
  unint64_t v10 = v9;
  unsigned int v11 = (int *)(*a2)[2](a2, (int *)"_2d3c257f33af88b8488658fb5b6a86f64cb02169b680e1250d3f37d373a4197f");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v11);
  unint64_t v13 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v8, v10, v11, v13, 1);
  LODWORD(a3) = (**a3)(a3, "NUM_GPS");
  unint64_t v15 = v14;
  uint64_t v16 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_div_ts(v13, (int)a3, v15, v16, 1);
  unsigned int v17 = **a2;

  return v17(a2, v16);
}

uint64_t sub_102338(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  int v8 = sub_D5D4();
  unint64_t v10 = v9;
  unsigned int v11 = (int *)(*a2)[2](a2, (int *)"_149b69750a3c80a27d163a4ca69ec03e3b39b3c0afe9c90c8cd37a128832cb13");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v11);
  unint64_t v13 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v8, v10, v11, v13, 1);
  LODWORD(a3) = (**a3)(a3, "NUM_GPS");
  unint64_t v15 = v14;
  uint64_t v16 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_div_ts(v13, (int)a3, v15, v16, 1);
  unsigned int v17 = **a2;

  return v17(a2, v16);
}

uint64_t sub_1024B8(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  int v8 = sub_D5D4();
  unint64_t v10 = v9;
  unsigned int v11 = (int *)(*a2)[2](a2, (int *)"_da824fe9269c1efd80cb71a6e5415be160b6f43b41e858cb83976c4140b052a5");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v11);
  unint64_t v13 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v8, v10, v11, v13, 1);
  LODWORD(a3) = (**a3)(a3, "NUM_GPS");
  unint64_t v15 = v14;
  uint64_t v16 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_div_ts(v13, (int)a3, v15, v16, 1);
  unsigned int v17 = **a2;

  return v17(a2, v16);
}

uint64_t sub_102638(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  int v8 = sub_D5D4();
  unint64_t v10 = v9;
  unsigned int v11 = (int *)(*a2)[2](a2, (int *)"_6d6a7c8efb15986fa71f8bf4a6a06f8942199b36680e516766e92490607c958d");
  agxps_timeseries_get_length((uint64_t)v11);
  int v12 = (int *)(*a2)[2](a2, (int *)"_fdc48a2370f6885da6ac169661812057de2cf71fbbbcb5df8348a78f112992dc");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v12);
  unint64_t v14 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_add_tt(v11, v12, v14, 1);
  unint64_t v15 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v8, v10, v14, v15, 1);
  LODWORD(a3) = (**a3)(a3, "NUM_L2_BANKS");
  unint64_t v17 = v16;
  unint64_t v18 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_div_ts(v15, (int)a3, v17, v18, 1);
  unint64_t v19 = **a2;

  return v19(a2, v18);
}

int *sub_102820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_D5D4();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_6d6a7c8efb15986fa71f8bf4a6a06f8942199b36680e516766e92490607c958d");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v10);
  int v12 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  return v12;
}

uint64_t sub_1028C8(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  int v8 = sub_D5D4();
  unint64_t v10 = v9;
  unsigned int v11 = (int *)(*a2)[2](a2, (int *)"_da2d5f5fd43e7edda6d5635752a29f09d285cf47c2ecd0a1b83b1ba3eddcef55");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v11);
  unint64_t v13 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v8, v10, v11, v13, 1);
  unsigned int v14 = sub_D5D4();
  uint64_t v16 = v15;
  unsigned int v17 = (**a3)(a3, "NUM_GPS");
  LODWORD(a3) = sub_D634(v14, v16, v17);
  unint64_t v19 = v18;
  uint64_t v20 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_div_ts(v13, (int)a3, v19, v20, 1);
  unsigned int v21 = **a2;

  return v21(a2, v20);
}

uint64_t sub_102A6C(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  int v8 = sub_D5D4();
  unint64_t v10 = v9;
  unsigned int v11 = (int *)(*a2)[2](a2, (int *)"_63b721bdb7ff9f45f3835f7e6a8a4595b1fed0038ae9a76cb853fc36756386c9");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v11);
  unint64_t v13 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v8, v10, v11, v13, 1);
  LODWORD(a3) = (**a3)(a3, "NUM_CORES");
  unint64_t v15 = v14;
  uint64_t v16 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_div_ts(v13, (int)a3, v15, v16, 1);
  unsigned int v17 = **a2;

  return v17(a2, v16);
}

int *sub_102BEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_63b721bdb7ff9f45f3835f7e6a8a4595b1fed0038ae9a76cb853fc36756386c9");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v6);
  int v8 = sub_D5D4();
  unint64_t v10 = v9;
  unsigned int v11 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_ts(v6, v8, v10, v11, 1);
  return v11;
}

int *sub_102C9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_D5D4();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_95457b9a60a638f3c652d16526373338287f19e3cb86adaea8a30e8255a7aa34");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v10);
  int v12 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  int v13 = sub_D5D4();
  unint64_t v15 = v14;
  uint64_t v16 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_2b086decbf8af5fc652f38631028061547de9b4eab238b05cc6e26e20ba26444");
  uint64_t v17 = agxps_timeseries_get_length((uint64_t)v16);
  unint64_t v18 = (int *)sub_176E24(a5, 0, v17);
  agxps_timeseries_mul_st(v13, v15, v16, v18, 1);
  unint64_t v19 = (int *)sub_176E24(a5, 0, v17);
  agxps_timeseries_add_tt(v12, v18, v19, 1);
  return v19;
}

int *sub_102DF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "FragmentZStoreBytes");
  agxps_timeseries_get_length((uint64_t)v7);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "ZBytesWrittenToMainMemory");
  uint64_t length = agxps_timeseries_get_length(v8);
  uint64_t v10 = sub_D5D4();
  unint64_t v12 = v11;
  uint64_t v13 = sub_176E24(a5, 0, length);
  unint64_t v14 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_compare_ts(3, v8, v10, v12, v13, 1);
  agxps_timeseries_select_tts(v13, v8, v10, v12, (uint64_t)v14);
  unint64_t v15 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_div_tt(v7, v14, v15, 1);
  return v15;
}

uint64_t sub_102F44(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_64a10cb112e74a4ec02f177b245e3f83edd61c0f78bc5bc7ae4978ce28f07f83");
  agxps_timeseries_get_length(v2);
  return v2;
}

int *sub_102F9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_D5D4();
  unint64_t v9 = v8;
  uint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_ca0d54323c1777d994357aaacdb7beac572bea11cd16afed4c756f3dc9496a18");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v10);
  unint64_t v12 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  return v12;
}

int *sub_103040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_D5D4();
  unint64_t v9 = v8;
  int v10 = sub_D5D4();
  unint64_t v12 = v11;
  uint64_t v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_e88003194e52f7912577c1de30615d17adeaeb189988c5f7b3dd3994c4bf01c3");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v13);
  unint64_t v15 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v10, v12, v13, v15, 1);
  int v16 = sub_D5D4();
  unint64_t v18 = v17;
  unint64_t v19 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_0517252655ede3af8df3294d0dd1936ef2e6b738323e5502da4b683aea057ba3");
  uint64_t v20 = agxps_timeseries_get_length((uint64_t)v19);
  unsigned int v21 = (int *)sub_176E24(a5, 0, v20);
  agxps_timeseries_mul_st(v16, v18, v19, v21, 1);
  unint64_t v22 = (int *)sub_176E24(a5, 0, v20);
  agxps_timeseries_add_tt(v15, v21, v22, 1);
  LODWORD(v18) = sub_D5D4();
  unint64_t v24 = v23;
  uint64_t v25 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_b07f7948ecee8df33172343235e9df76503200554b4ccf95b2c7622c0380772c");
  uint64_t v26 = agxps_timeseries_get_length((uint64_t)v25);
  uint64_t v27 = (int *)sub_176E24(a5, 0, v26);
  agxps_timeseries_mul_st(v18, v24, v25, v27, 1);
  unint64_t v28 = (int *)sub_176E24(a5, 0, v26);
  agxps_timeseries_add_tt(v22, v27, v28, 1);
  unint64_t v29 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_2545b5f3d7fb631492e04dfa0b70c6a57307db64c735d42b00f373627eb0fa08");
  uint64_t v30 = agxps_timeseries_get_length((uint64_t)v29);
  uint64_t v31 = (int *)sub_176E24(a5, 0, v30);
  agxps_timeseries_add_tt(v28, v29, v31, 1);
  unint64_t v32 = (int *)sub_176E24(a5, 0, v30);
  agxps_timeseries_mul_st(v7, v9, v31, v32, 1);
  return v32;
}

uint64_t sub_1032E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_46210435e8bd691719dc45391f51ef552bf7e745c1401ee9943aa6f85086336e");
  agxps_timeseries_get_length(v2);
  return v2;
}

uint64_t sub_103338(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_149b69750a3c80a27d163a4ca69ec03e3b39b3c0afe9c90c8cd37a128832cb13");
  agxps_timeseries_get_length(v2);
  return v2;
}

uint64_t sub_103390(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_da824fe9269c1efd80cb71a6e5415be160b6f43b41e858cb83976c4140b052a5");
  agxps_timeseries_get_length(v2);
  return v2;
}

uint64_t sub_1033E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_eda5bce70befa39e7c6029505c0269211092c220048a502fd8fa2fe30895465b");
  agxps_timeseries_get_length(v2);
  return v2;
}

uint64_t sub_103440(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_2fab6f6232fd4f1349620047490c7562c852746134f1a6e53ca0510462394598");
  agxps_timeseries_get_length(v2);
  return v2;
}

int *sub_103498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_D5D4();
  unint64_t v9 = v8;
  int v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_0f67618fe6dd59b9cc951584dc80dd9f5dd9c428402dbe2e8a03c7df4100020e");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v10);
  unint64_t v12 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  return v12;
}

int *sub_103540(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_40680272e25f5a98ef1fdae57c0be82cc7fb940000907f1a4d46547de8525db0");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v6);
  int v8 = sub_D5D4();
  unint64_t v10 = v9;
  unint64_t v11 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_ts(v6, v8, v10, v11, 1);
  return v11;
}

int *sub_1035F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "FragmentGeneratorPrimitiveProcessed");
  agxps_timeseries_get_length((uint64_t)v7);
  int v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "FragmentGeneratorTilesProcessed");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v10 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_div_tt(v7, v8, v10, 1);
  return v10;
}

int *sub_1036B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v7 = sub_D5D4();
  uint64_t v9 = v8;
  unsigned int v10 = sub_D5D4();
  LODWORD(v9) = sub_D634(v7, v9, v10);
  unint64_t v12 = v11;
  uint64_t v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_719a713b390f2b37bbbe8ca62f3053819539a3fc60d05b02f21b2c8435fb73a6");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v13);
  unint64_t v15 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v9, v12, v13, v15, 1);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "FragmentQuadsProcessed");
  uint64_t v17 = agxps_timeseries_get_length(v16);
  uint64_t v18 = sub_D5D4();
  unint64_t v20 = v19;
  uint64_t v21 = sub_176E24(a5, 0, v17);
  unint64_t v22 = (int *)sub_176E24(a5, 0, v17);
  agxps_timeseries_compare_ts(3, v16, v18, v20, v21, 1);
  agxps_timeseries_select_tts(v21, v16, v18, v20, (uint64_t)v22);
  unint64_t v23 = (int *)sub_176E24(a5, 0, v17);
  agxps_timeseries_div_tt(v15, v22, v23, 1);
  return v23;
}

int *sub_103868(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v7 = sub_D5D4();
  uint64_t v9 = v8;
  unsigned int v10 = sub_D5D4();
  LODWORD(v9) = sub_D634(v7, v9, v10);
  unint64_t v12 = v11;
  uint64_t v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_fade8eea03e1fbf9a3d3cd6ab6bfd82b70bc1595ffb23f1b638746baa6c672e0");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v13);
  unint64_t v15 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v9, v12, v13, v15, 1);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "FragmentQuadsProcessed");
  uint64_t v17 = agxps_timeseries_get_length(v16);
  uint64_t v18 = sub_D5D4();
  unint64_t v20 = v19;
  uint64_t v21 = sub_176E24(a5, 0, v17);
  unint64_t v22 = (int *)sub_176E24(a5, 0, v17);
  agxps_timeseries_compare_ts(3, v16, v18, v20, v21, 1);
  agxps_timeseries_select_tts(v21, v16, v18, v20, (uint64_t)v22);
  unint64_t v23 = (int *)sub_176E24(a5, 0, v17);
  agxps_timeseries_div_tt(v15, v22, v23, 1);
  return v23;
}

int *sub_103A18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v7 = sub_D5D4();
  uint64_t v9 = v8;
  unsigned int v10 = sub_D5D4();
  LODWORD(v9) = sub_D634(v7, v9, v10);
  unint64_t v12 = v11;
  uint64_t v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_db1f507c85a72a4148283a69481d823edb23fbfb999acf18fb2d155eb7edc768");
  agxps_timeseries_get_length((uint64_t)v13);
  unint64_t v14 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_879d7622b5c9023712d7cc6c70f432757ab72505afba79be4dcb023459f9658a");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v14);
  uint64_t v16 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_add_tt(v13, v14, v16, 1);
  uint64_t v17 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v9, v12, v16, v17, 1);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "FragmentQuadsProcessed");
  uint64_t v19 = agxps_timeseries_get_length(v18);
  uint64_t v20 = sub_D5D4();
  unint64_t v22 = v21;
  uint64_t v23 = sub_176E24(a5, 0, v19);
  unint64_t v24 = (int *)sub_176E24(a5, 0, v19);
  agxps_timeseries_compare_ts(3, v18, v20, v22, v23, 1);
  agxps_timeseries_select_tts(v23, v18, v20, v22, (uint64_t)v24);
  uint64_t v25 = (int *)sub_176E24(a5, 0, v19);
  agxps_timeseries_div_tt(v17, v24, v25, 1);
  return v25;
}

uint64_t sub_103C2C(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  int v8 = sub_D5D4();
  unint64_t v10 = v9;
  unint64_t v11 = (int *)(*a2)[2](a2, (int *)"_7c42e99464b33ee51de11bdd9f8cf11a14473f7061e75f7589a3578a7757abfd");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v11);
  uint64_t v13 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v8, v10, v11, v13, 1);
  unsigned int v14 = sub_D5D4();
  uint64_t v16 = v15;
  unsigned int v17 = (**a3)(a3, "NUM_CORES");
  LODWORD(a3) = sub_D634(v14, v16, v17);
  unint64_t v19 = v18;
  uint64_t v20 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_div_ts(v13, (int)a3, v19, v20, 1);
  unint64_t v21 = **a2;

  return v21(a2, v20);
}

uint64_t sub_103DD0(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  int v8 = sub_D5D4();
  unint64_t v10 = v9;
  unint64_t v11 = (int *)(*a2)[2](a2, (int *)"_d11d0ca656849a8048dbe7d1d6761d3cbcf463d9196a20b3da7e6a554fd0652f");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v11);
  uint64_t v13 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v8, v10, v11, v13, 1);
  unsigned int v14 = sub_D5D4();
  uint64_t v16 = v15;
  unsigned int v17 = (**a3)(a3, "NUM_CORES");
  LODWORD(a3) = sub_D634(v14, v16, v17);
  unint64_t v19 = v18;
  uint64_t v20 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_div_ts(v13, (int)a3, v19, v20, 1);
  unint64_t v21 = **a2;

  return v21(a2, v20);
}

uint64_t sub_103F74(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  int v8 = sub_D5D4();
  unint64_t v10 = v9;
  unint64_t v11 = (int *)(*a2)[2](a2, (int *)"_d54a22a6f6eb41ec901489f9e47263886645d322e2546360a6622d2c6bdeddb9");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v11);
  uint64_t v13 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v8, v10, v11, v13, 1);
  unsigned int v14 = sub_D5D4();
  uint64_t v16 = v15;
  unsigned int v17 = (**a3)(a3, "NUM_CORES");
  LODWORD(a3) = sub_D634(v14, v16, v17);
  unint64_t v19 = v18;
  uint64_t v20 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_div_ts(v13, (int)a3, v19, v20, 1);
  unint64_t v21 = **a2;

  return v21(a2, v20);
}

int *sub_104118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_D5D4();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_20c8b2b1747ee9c33baf87dc32e8f5d07b9eb25ca5829ad056d92eb0d040c76a");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v10);
  unint64_t v12 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_e247689f0b49c692ba39d348957d19faa7587b07d3025f3b283a165cfc35f5b8");
  uint64_t v14 = agxps_timeseries_get_length(v13);
  uint64_t v15 = sub_D5D4();
  unint64_t v17 = v16;
  uint64_t v18 = sub_176E24(a5, 0, v14);
  unint64_t v19 = (int *)sub_176E24(a5, 0, v14);
  agxps_timeseries_compare_ts(3, v13, v15, v17, v18, 1);
  agxps_timeseries_select_tts(v18, v13, v15, v17, (uint64_t)v19);
  uint64_t v20 = (int *)sub_176E24(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v19, v20, 1);
  return v20;
}

uint64_t sub_1042A4(uint64_t a1, uint64_t (***a2)(void, uint64_t), uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  unint64_t v8 = (int *)(*a2)[2](a2, (uint64_t)"_f883d72b08be21c3348078baaa2362bec3884949a1726642308e7dd5cb69fe07");
  agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v9 = (int *)(*a2)[2](a2, (uint64_t)"_a15872ac9b60de1aa5b2f8738fe49df926f782ead2f5f010124e3c141c961be3");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v9);
  unint64_t v11 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_add_tt(v8, v9, v11, 1);
  LODWORD(a3) = (**a3)(a3, "NUM_GPS");
  unint64_t v13 = v12;
  uint64_t v14 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_div_ts(v11, (int)a3, v13, v14, 1);
  uint64_t v15 = sub_D5D4();
  unint64_t v17 = v16;
  uint64_t v18 = sub_176E24(a5, 0, length);
  uint64_t v19 = sub_176E24(a5, 0, length);
  agxps_timeseries_compare_ts(2, v14, v15, v17, v18, 1);
  agxps_timeseries_select_tts(v18, (uint64_t)v14, v15, v17, v19);
  uint64_t v20 = **a2;

  return v20(a2, v19);
}

uint64_t sub_1044B8(uint64_t a1, uint64_t (***a2)(void, uint64_t), uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  unint64_t v8 = (int *)(*a2)[2](a2, (uint64_t)"_2413cbfc3cf49db0f8a6cbaddb7f99118134a04d0a7bbfcf3e5c192276c68644");
  agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v9 = (int *)(*a2)[2](a2, (uint64_t)"_27cde4b049e15693c767899196a213dcd807878d655e33dde43ddff8910df32e");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v9);
  unint64_t v11 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_add_tt(v8, v9, v11, 1);
  LODWORD(a3) = (**a3)(a3, "NUM_GPS");
  unint64_t v13 = v12;
  uint64_t v14 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_div_ts(v11, (int)a3, v13, v14, 1);
  uint64_t v15 = sub_D5D4();
  unint64_t v17 = v16;
  uint64_t v18 = sub_176E24(a5, 0, length);
  uint64_t v19 = sub_176E24(a5, 0, length);
  agxps_timeseries_compare_ts(2, v14, v15, v17, v18, 1);
  agxps_timeseries_select_tts(v18, (uint64_t)v14, v15, v17, v19);
  uint64_t v20 = **a2;

  return v20(a2, v19);
}

uint64_t sub_1046CC(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, const char *))
{
  uint64_t v5 = sub_D5D4();
  unint64_t v7 = v6;
  unint64_t v8 = (unsigned int *)(*a2)[2](a2, (int *)"_ffb81bec9c1a43cfe9f952f38103d1887bef653181bcb3c1362308492368933d");
  unint64_t v9 = (unsigned int *)(*a2)[2](a2, (int *)"_50c5ccf70ef1ec17254253a456f052e1130edd339eee1dafe34fc8254d36b52a");
  unint64_t v10 = sub_DCCC(v8, v9);
  unint64_t v11 = sub_11210(v5, v7, (unsigned int *)v10);
  uint64_t v12 = (**a3)(a3, "NUM_GPS");
  uint64_t v14 = sub_13828((unsigned int *)v11, v12, v13);
  uint64_t v15 = **a2;

  return v15(a2, v14);
}

uint64_t sub_104840(uint64_t a1, uint64_t (***a2)(void, uint64_t), uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  unint64_t v8 = (int *)(*a2)[2](a2, (uint64_t)"_c3bf601f0a951d8e293718574d5f9ce5ddcb27d830ef81f6b018a3b933194ce1");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  LODWORD(a3) = (**a3)(a3, "NUM_GPS");
  unint64_t v11 = v10;
  uint64_t v12 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_div_ts(v8, (int)a3, v11, v12, 1);
  uint64_t v13 = sub_D5D4();
  unint64_t v15 = v14;
  uint64_t v16 = sub_176E24(a5, 0, length);
  uint64_t v17 = sub_176E24(a5, 0, length);
  agxps_timeseries_compare_ts(2, v12, v13, v15, v16, 1);
  agxps_timeseries_select_tts(v16, (uint64_t)v12, v13, v15, v17);
  uint64_t v18 = **a2;

  return v18(a2, v17);
}

uint64_t sub_1049F4(uint64_t a1, uint64_t (***a2)(void, uint64_t), uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  unint64_t v8 = (int *)(*a2)[2](a2, (uint64_t)"_ba42c3f46d52663d076f226bfb30be092b4b536d27d161d16869c10288811903");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v8);
  LODWORD(a3) = (**a3)(a3, "NUM_GPS");
  unint64_t v11 = v10;
  uint64_t v12 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_div_ts(v8, (int)a3, v11, v12, 1);
  uint64_t v13 = sub_D5D4();
  unint64_t v15 = v14;
  uint64_t v16 = sub_176E24(a5, 0, length);
  uint64_t v17 = sub_176E24(a5, 0, length);
  agxps_timeseries_compare_ts(2, v12, v13, v15, v16, 1);
  agxps_timeseries_select_tts(v16, (uint64_t)v12, v13, v15, v17);
  uint64_t v18 = **a2;

  return v18(a2, v17);
}

uint64_t sub_104BA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_e247689f0b49c692ba39d348957d19faa7587b07d3025f3b283a165cfc35f5b8");
  agxps_timeseries_get_length(v2);
  return v2;
}

uint64_t sub_104C00(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_e263044475c736413734a34bbc76c45c46960ed823cfa5696235ee862ce5b6ea");
  agxps_timeseries_get_length(v2);
  return v2;
}

uint64_t sub_104C58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_D5D4();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "MMUTLBRequests");
  agxps_timeseries_get_length((uint64_t)v10);
  unint64_t v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "MMUTLBHits");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v11);
  uint64_t v13 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_sub_tt(v10, v11, v13, 1);
  unint64_t v14 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v13, v14, 1);
  uint64_t v15 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "MMUTLBRequests");
  uint64_t v16 = agxps_timeseries_get_length(v15);
  uint64_t v17 = sub_D5D4();
  unint64_t v19 = v18;
  uint64_t v20 = sub_176E24(a5, 0, v16);
  unint64_t v21 = (int *)sub_176E24(a5, 0, v16);
  agxps_timeseries_compare_ts(3, v15, v17, v19, v20, 1);
  agxps_timeseries_select_tts(v20, v15, v17, v19, (uint64_t)v21);
  unint64_t v22 = (int *)sub_176E24(a5, 0, v16);
  agxps_timeseries_div_tt(v14, v21, v22, 1);
  uint64_t v23 = sub_D5D4();
  unint64_t v25 = v24;
  uint64_t v26 = sub_176E24(a5, 0, v16);
  uint64_t v27 = sub_176E24(a5, 0, v16);
  agxps_timeseries_compare_ts(2, v22, v23, v25, v26, 1);
  agxps_timeseries_select_tts(v26, (uint64_t)v22, v23, v25, v27);
  return v27;
}

int *sub_104ECC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_e6362c1fcf78a3882ad4f3bbd5a66cfb0a6feeae2d8e84b4b161234e0b3aa335");
  agxps_timeseries_get_length((uint64_t)v7);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "_fdc48a2370f6885da6ac169661812057de2cf71fbbbcb5df8348a78f112992dc");
  uint64_t length = agxps_timeseries_get_length(v8);
  uint64_t v10 = sub_D5D4();
  unint64_t v12 = v11;
  uint64_t v13 = sub_176E24(a5, 0, length);
  unint64_t v14 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_compare_ts(3, v8, v10, v12, v13, 1);
  agxps_timeseries_select_tts(v13, v8, v10, v12, (uint64_t)v14);
  uint64_t v15 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_div_tt(v7, v14, v15, 1);
  return v15;
}

int *sub_105018(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "FragmentsRasterized");
  agxps_timeseries_get_length((uint64_t)v7);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "PrimitivesSubmitted");
  uint64_t length = agxps_timeseries_get_length(v8);
  uint64_t v10 = sub_D5D4();
  unint64_t v12 = v11;
  uint64_t v13 = sub_176E24(a5, 0, length);
  unint64_t v14 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_compare_ts(3, v8, v10, v12, v13, 1);
  agxps_timeseries_select_tts(v13, v8, v10, v12, (uint64_t)v14);
  uint64_t v15 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_div_tt(v7, v14, v15, 1);
  return v15;
}

int *sub_105164(uint64_t a1, uint64_t a2, uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  int v7 = (**a3)(a3, "NUM_THREADS_PER_CLIQUE");
  unint64_t v9 = v8;
  uint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "79E88035C9BC883D403F17831B8C9264E643C6B76E9B3C1451B49B0F672C32BF");
  agxps_timeseries_get_length((uint64_t)v10);
  unint64_t v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "AA1E812506867A5F2C54D3BA3268DB5C4BB2C6B0E4F500340DD23C4E1E637D9D");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v11);
  uint64_t v13 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  unint64_t v14 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "3476066F46CC277DE7616AAAD8FCDF2C28DA42293B231F74A62159EB6EDAC78C");
  uint64_t v15 = agxps_timeseries_get_length((uint64_t)v14);
  int v16 = sub_D5D4();
  unint64_t v18 = v17;
  unint64_t v19 = (int *)sub_176E24(a5, 0, v15);
  agxps_timeseries_mul_ts(v14, v16, v18, v19, 1);
  uint64_t v20 = (int *)sub_176E24(a5, 0, v15);
  agxps_timeseries_add_tt(v13, v19, v20, 1);
  unint64_t v21 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "295D65BB175E4E4EEF9003E008E093043C9B8CE43190BE0A2D8F1771F9837033");
  uint64_t v22 = agxps_timeseries_get_length((uint64_t)v21);
  uint64_t v23 = (int *)sub_176E24(a5, 0, v22);
  agxps_timeseries_add_tt(v20, v21, v23, 1);
  unint64_t v24 = (int *)sub_176E24(a5, 0, v22);
  agxps_timeseries_mul_st(v7, v9, v23, v24, 1);
  return v24;
}

int *sub_1053AC(uint64_t a1, uint64_t a2, uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  unint64_t v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "VSInvocation");
  agxps_timeseries_get_length((uint64_t)v8);
  unint64_t v9 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "DeltaSeconds");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v9);
  LODWORD(a3) = (**a3)(a3, "NSEC_PER_SEC");
  unint64_t v12 = v11;
  uint64_t v13 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_ts(v9, (int)a3, v12, v13, 1);
  unint64_t v14 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_div_tt(v8, v13, v14, 1);
  return v14;
}

uint64_t sub_105504(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_D5D4();
  unint64_t v9 = v8;
  int v10 = sub_D5D4();
  unint64_t v12 = v11;
  uint64_t v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "1EE37CF6B772CC32CDCB4FC2CFE693EF7D7C80950325049285C3D49A4A88FD1C");
  agxps_timeseries_get_length((uint64_t)v13);
  unint64_t v14 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "C950D7F7AD90A2158FFC69617C9E89613825A41B0F38F9F0FCE55D75FC5532A3");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v14);
  int v16 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_add_tt(v13, v14, v16, 1);
  unint64_t v17 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "C0D7A26A9BD1F09964BA54D31CBA3CBA8957E46C0129A0BED9DDD908890206C1");
  uint64_t v18 = agxps_timeseries_get_length((uint64_t)v17);
  unint64_t v19 = (int *)sub_176E24(a5, 0, v18);
  agxps_timeseries_add_tt(v16, v17, v19, 1);
  uint64_t v20 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "18AA14F767F6966C6A9135ADD34A19B911559D7B7DD52BA1E092BA6613D26AF0");
  uint64_t v21 = agxps_timeseries_get_length((uint64_t)v20);
  uint64_t v22 = (int *)sub_176E24(a5, 0, v21);
  agxps_timeseries_add_tt(v19, v20, v22, 1);
  uint64_t v23 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "ALUInstructions");
  uint64_t v24 = agxps_timeseries_get_length((uint64_t)v23);
  unint64_t v25 = (int *)sub_176E24(a5, 0, v24);
  agxps_timeseries_div_tt(v22, v23, v25, 1);
  uint64_t v26 = (int *)sub_176E24(a5, 0, v24);
  agxps_timeseries_sub_st(v10, v12, v25, v26, 1);
  uint64_t v27 = (int *)sub_176E24(a5, 0, v24);
  agxps_timeseries_mul_st(v7, v9, v26, v27, 1);
  uint64_t v28 = sub_D5D4();
  unint64_t v30 = v29;
  uint64_t v31 = sub_176E24(a5, 0, v24);
  uint64_t v32 = sub_176E24(a5, 0, v24);
  agxps_timeseries_compare_ts(3, v27, v28, v30, v31, 1);
  agxps_timeseries_select_tts(v31, (uint64_t)v27, v28, v30, v32);
  return v32;
}

uint64_t sub_1057F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "1EE37CF6B772CC32CDCB4FC2CFE693EF7D7C80950325049285C3D49A4A88FD1C");
  agxps_timeseries_get_length(v2);
  return v2;
}

uint64_t sub_10584C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "C950D7F7AD90A2158FFC69617C9E89613825A41B0F38F9F0FCE55D75FC5532A3");
  agxps_timeseries_get_length(v2);
  return v2;
}

uint64_t sub_1058A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "C0D7A26A9BD1F09964BA54D31CBA3CBA8957E46C0129A0BED9DDD908890206C1");
  agxps_timeseries_get_length(v2);
  return v2;
}

uint64_t sub_1058FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "18AA14F767F6966C6A9135ADD34A19B911559D7B7DD52BA1E092BA6613D26AF0");
  agxps_timeseries_get_length(v2);
  return v2;
}

int *sub_105954(uint64_t a1, uint64_t a2, uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  int v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "AA1E812506867A5F2C54D3BA3268DB5C4BB2C6B0E4F500340DD23C4E1E637D9D");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v7);
  LODWORD(a3) = (**a3)(a3, "NUM_THREADS_PER_CLIQUE");
  unint64_t v10 = v9;
  unint64_t v11 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_ts(v7, (int)a3, v10, v11, 1);
  return v11;
}

int *sub_105A40(uint64_t a1, uint64_t a2, uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  int v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "79E88035C9BC883D403F17831B8C9264E643C6B76E9B3C1451B49B0F672C32BF");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v7);
  LODWORD(a3) = (**a3)(a3, "NUM_THREADS_PER_CLIQUE");
  unint64_t v10 = v9;
  unint64_t v11 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_ts(v7, (int)a3, v10, v11, 1);
  return v11;
}

int *sub_105B2C(uint64_t a1, uint64_t a2, uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  int v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "295D65BB175E4E4EEF9003E008E093043C9B8CE43190BE0A2D8F1771F9837033");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v7);
  LODWORD(a3) = (**a3)(a3, "NUM_THREADS_PER_CLIQUE");
  unint64_t v10 = v9;
  unint64_t v11 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_ts(v7, (int)a3, v10, v11, 1);
  return v11;
}

int *sub_105C18(uint64_t a1, uint64_t a2, uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  int v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "3476066F46CC277DE7616AAAD8FCDF2C28DA42293B231F74A62159EB6EDAC78C");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v7);
  LODWORD(a3) = (**a3)(a3, "NUM_THREADS_PER_CLIQUE");
  unint64_t v10 = v9;
  unint64_t v11 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_ts(v7, (int)a3, v10, v11, 1);
  LODWORD(a3) = sub_D5D4();
  unint64_t v13 = v12;
  unint64_t v14 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_ts(v11, (int)a3, v13, v14, 1);
  return v14;
}

int *sub_105D40(uint64_t a1, uint64_t a2, uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  int v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "4BF63E209F7D92B4E8341476C80013664D3299327C72E7A7F0D16E1CBD4904FC");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v7);
  LODWORD(a3) = (**a3)(a3, "NUM_THREADS_PER_CLIQUE");
  unint64_t v10 = v9;
  unint64_t v11 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_ts(v7, (int)a3, v10, v11, 1);
  return v11;
}

int *sub_105E2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "ALUInstructions");
  agxps_timeseries_get_length((uint64_t)v7);
  uint64_t v8 = sub_D5D4();
  unint64_t v10 = v9;
  uint64_t v11 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "DeltaSeconds");
  uint64_t length = agxps_timeseries_get_length(v11);
  uint64_t v13 = sub_176E24(a5, 0, length);
  unint64_t v14 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_compare_st(3, v8, v10, v11, v13, 1);
  agxps_timeseries_select_tst(v13, v8, v10, v11, (uint64_t)v14);
  uint64_t v15 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_div_tt(v7, v14, v15, 1);
  return v15;
}

int *sub_105F78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_D5D4();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "ALUF32Issued");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v10);
  unint64_t v12 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  uint64_t v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "ALUInstructions");
  uint64_t v14 = agxps_timeseries_get_length((uint64_t)v13);
  uint64_t v15 = (int *)sub_176E24(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v13, v15, 1);
  return v15;
}

int *sub_106088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_D5D4();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "ALUF16Issued");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v10);
  unint64_t v12 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  uint64_t v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "ALUInstructions");
  uint64_t v14 = agxps_timeseries_get_length((uint64_t)v13);
  uint64_t v15 = (int *)sub_176E24(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v13, v15, 1);
  return v15;
}

int *sub_106198(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_D5D4();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "ALUInt32AndCondIssued");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v10);
  unint64_t v12 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  uint64_t v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "ALUInstructions");
  uint64_t v14 = agxps_timeseries_get_length((uint64_t)v13);
  uint64_t v15 = (int *)sub_176E24(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v13, v15, 1);
  return v15;
}

int *sub_1062A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = sub_D5D4();
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "ALUIntAndComplexIssued");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v10);
  unint64_t v12 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  int v13 = sub_D5D4();
  unint64_t v15 = v14;
  int v16 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_ts(v12, v13, v15, v16, 1);
  unint64_t v17 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "ALUInstructions");
  uint64_t v18 = agxps_timeseries_get_length((uint64_t)v17);
  unint64_t v19 = (int *)sub_176E24(a5, 0, v18);
  agxps_timeseries_div_tt(v16, v17, v19, 1);
  return v19;
}

int *sub_106400(uint64_t a1, uint64_t a2, uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  int v7 = (**a3)(a3, "NUM_THREADS_PER_CLIQUE");
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "4BF63E209F7D92B4E8341476C80013664D3299327C72E7A7F0D16E1CBD4904FC");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v10);
  unint64_t v12 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  return v12;
}

int *sub_1064CC(uint64_t a1, uint64_t a2, uint64_t (***a3)(void, const char *), uint64_t a4, uint64_t a5)
{
  int v7 = (**a3)(a3, "NUM_THREADS_PER_CLIQUE");
  unint64_t v9 = v8;
  unint64_t v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "3856FBD8576C0AA988700D7EF5787AAAE94A3BBFBB393B0426FA9D379DA69C91");
  uint64_t length = agxps_timeseries_get_length((uint64_t)v10);
  unint64_t v12 = (int *)sub_176E24(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  return v12;
}

uint64_t sub_106598()
{
  __chkstk_darwin();
  v1 = v0;
  sub_599C((int)v720, "GPUTime");
  uint64_t v2 = (uint64_t *)sub_5A9C((uint64_t)v720, 0xFu, 3, (uint64_t)sub_F6E50);
  uint64_t v3 = sub_5C60(v2, "Xcode Derived Counters");
  long long v4 = *(_OWORD *)v3;
  int v723 = *((_DWORD *)v3 + 4);
  long long v722 = v4;
  sub_110F60((uint64_t)&v724, (uint64_t)(v3 + 3));
  memset(v725, 0, sizeof(v725));
  sub_A448((char *)v725, (long long *)v3[8], (long long *)v3[9], 0xAAAAAAAAAAAAAAABLL * ((v3[9] - v3[8]) >> 3));
  sub_599C((int)v719, "MeshPrimitivesSubmitted");
  uint64_t v5 = (uint64_t *)sub_5A9C((uint64_t)v719, 0xFu, 3, (uint64_t)sub_F6EA8);
  unint64_t v6 = sub_5C60(v5, "Xcode Derived Counters");
  long long v7 = *(_OWORD *)v6;
  int v727 = *((_DWORD *)v6 + 4);
  long long v726 = v7;
  sub_110F60((uint64_t)&v728, (uint64_t)(v6 + 3));
  memset(v729, 0, sizeof(v729));
  sub_A448((char *)v729, (long long *)v6[8], (long long *)v6[9], 0xAAAAAAAAAAAAAAABLL * ((v6[9] - v6[8]) >> 3));
  sub_599C((int)v718, "PrimitivesSubmitted");
  unint64_t v8 = (uint64_t *)sub_5A9C((uint64_t)v718, 0xFu, 3, (uint64_t)sub_F6F00);
  unint64_t v9 = sub_5C60(v8, "Xcode Derived Counters");
  long long v10 = *(_OWORD *)v9;
  int v731 = *((_DWORD *)v9 + 4);
  long long v730 = v10;
  sub_110F60((uint64_t)&v732, (uint64_t)(v9 + 3));
  memset(v733, 0, sizeof(v733));
  sub_A448((char *)v733, (long long *)v9[8], (long long *)v9[9], 0xAAAAAAAAAAAAAAABLL * ((v9[9] - v9[8]) >> 3));
  sub_599C((int)v717, "VSInvocation");
  uint64_t v11 = (uint64_t *)sub_5A9C((uint64_t)v717, 0xFu, 3, (uint64_t)sub_F6FC8);
  unint64_t v12 = sub_5C60(v11, "Xcode Derived Counters");
  long long v13 = *(_OWORD *)v12;
  int v735 = *((_DWORD *)v12 + 4);
  long long v734 = v13;
  sub_110F60((uint64_t)&v736, (uint64_t)(v12 + 3));
  memset(v737, 0, sizeof(v737));
  sub_A448((char *)v737, (long long *)v12[8], (long long *)v12[9], 0xAAAAAAAAAAAAAAABLL * ((v12[9] - v12[8]) >> 3));
  sub_599C((int)v716, "PSInvocation");
  unint64_t v14 = (uint64_t *)sub_5A9C((uint64_t)v716, 0xFu, 3, (uint64_t)sub_F7020);
  unint64_t v15 = sub_5C60(v14, "Xcode Derived Counters");
  long long v16 = *(_OWORD *)v15;
  int v739 = *((_DWORD *)v15 + 4);
  long long v738 = v16;
  sub_110F60((uint64_t)&v740, (uint64_t)(v15 + 3));
  memset(v741, 0, sizeof(v741));
  sub_A448((char *)v741, (long long *)v15[8], (long long *)v15[9], 0xAAAAAAAAAAAAAAABLL * ((v15[9] - v15[8]) >> 3));
  sub_599C((int)v715, "CSInvocation");
  unint64_t v17 = (uint64_t *)sub_5A9C((uint64_t)v715, 0xFu, 3, (uint64_t)sub_F70EC);
  uint64_t v18 = sub_5C60(v17, "Xcode Derived Counters");
  long long v19 = *(_OWORD *)v18;
  int v743 = *((_DWORD *)v18 + 4);
  long long v742 = v19;
  sub_110F60((uint64_t)&v744, (uint64_t)(v18 + 3));
  memset(v745, 0, sizeof(v745));
  sub_A448((char *)v745, (long long *)v18[8], (long long *)v18[9], 0xAAAAAAAAAAAAAAABLL * ((v18[9] - v18[8]) >> 3));
  sub_599C((int)v714, "PrimitivesPerSec");
  uint64_t v20 = (uint64_t *)sub_5A9C((uint64_t)v714, 0xFu, 3, (uint64_t)sub_F727C);
  uint64_t v21 = sub_5C60(v20, "Xcode Derived Counters");
  long long v22 = *(_OWORD *)v21;
  int v747 = *((_DWORD *)v21 + 4);
  long long v746 = v22;
  sub_110F60((uint64_t)&v748, (uint64_t)(v21 + 3));
  memset(v749, 0, sizeof(v749));
  sub_A448((char *)v749, (long long *)v21[8], (long long *)v21[9], 0xAAAAAAAAAAAAAAABLL * ((v21[9] - v21[8]) >> 3));
  sub_599C((int)v713, "PixelsPerSec");
  uint64_t v23 = (uint64_t *)sub_5A9C((uint64_t)v713, 0xFu, 3, (uint64_t)sub_F73CC);
  uint64_t v24 = sub_5C60(v23, "Xcode Derived Counters");
  long long v25 = *(_OWORD *)v24;
  int v751 = *((_DWORD *)v24 + 4);
  long long v750 = v25;
  sub_110F60((uint64_t)&v752, (uint64_t)(v24 + 3));
  memset(v753, 0, sizeof(v753));
  sub_A448((char *)v753, (long long *)v24[8], (long long *)v24[9], 0xAAAAAAAAAAAAAAABLL * ((v24[9] - v24[8]) >> 3));
  sub_599C((int)v712, "PixelToVertexRatio");
  uint64_t v26 = (uint64_t *)sub_5A9C((uint64_t)v712, 0xFu, 3, (uint64_t)sub_F751C);
  uint64_t v27 = sub_5C60(v26, "Xcode Derived Counters");
  long long v28 = *(_OWORD *)v27;
  int v755 = *((_DWORD *)v27 + 4);
  long long v754 = v28;
  sub_110F60((uint64_t)&v756, (uint64_t)(v27 + 3));
  memset(v757, 0, sizeof(v757));
  sub_A448((char *)v757, (long long *)v27[8], (long long *)v27[9], 0xAAAAAAAAAAAAAAABLL * ((v27[9] - v27[8]) >> 3));
  sub_599C((int)v711, "PixelPerTriangle");
  unint64_t v29 = (uint64_t *)sub_5A9C((uint64_t)v711, 0xFu, 3, (uint64_t)sub_F75E4);
  unint64_t v30 = sub_5C60(v29, "Xcode Derived Counters");
  long long v31 = *(_OWORD *)v30;
  int v759 = *((_DWORD *)v30 + 4);
  long long v758 = v31;
  sub_110F60((uint64_t)&v760, (uint64_t)(v30 + 3));
  memset(v761, 0, sizeof(v761));
  sub_A448((char *)v761, (long long *)v30[8], (long long *)v30[9], 0xAAAAAAAAAAAAAAABLL * ((v30[9] - v30[8]) >> 3));
  sub_599C((int)v710, "DrawCalls");
  uint64_t v32 = (uint64_t *)sub_5A9C((uint64_t)v710, 0xFu, 3, (uint64_t)sub_F76AC);
  unint64_t v33 = sub_5C60(v32, "Xcode Derived Counters");
  long long v34 = *(_OWORD *)v33;
  int v763 = *((_DWORD *)v33 + 4);
  long long v762 = v34;
  sub_110F60((uint64_t)&v764, (uint64_t)(v33 + 3));
  memset(v765, 0, sizeof(v765));
  sub_A448((char *)v765, (long long *)v33[8], (long long *)v33[9], 0xAAAAAAAAAAAAAAABLL * ((v33[9] - v33[8]) >> 3));
  sub_599C((int)v709, "VerticesSubmitted");
  unint64_t v35 = (uint64_t *)sub_5A9C((uint64_t)v709, 0xFu, 3, (uint64_t)sub_F7798);
  uint64_t v36 = sub_5C60(v35, "Xcode Derived Counters");
  long long v37 = *(_OWORD *)v36;
  int v767 = *((_DWORD *)v36 + 4);
  long long v766 = v37;
  sub_110F60((uint64_t)&v768, (uint64_t)(v36 + 3));
  memset(v769, 0, sizeof(v769));
  sub_A448((char *)v769, (long long *)v36[8], (long long *)v36[9], 0xAAAAAAAAAAAAAAABLL * ((v36[9] - v36[8]) >> 3));
  sub_599C((int)v708, "VerticesReused");
  uint64_t v38 = (uint64_t *)sub_5A9C((uint64_t)v708, 0xFu, 3, (uint64_t)sub_F77F0);
  uint64_t v39 = sub_5C60(v38, "Xcode Derived Counters");
  long long v40 = *(_OWORD *)v39;
  int v771 = *((_DWORD *)v39 + 4);
  long long v770 = v40;
  sub_110F60((uint64_t)&v772, (uint64_t)(v39 + 3));
  memset(v773, 0, sizeof(v773));
  sub_A448((char *)v773, (long long *)v39[8], (long long *)v39[9], 0xAAAAAAAAAAAAAAABLL * ((v39[9] - v39[8]) >> 3));
  sub_599C((int)v707, "VerticesReusedPercent");
  uint64_t v41 = (uint64_t *)sub_5A9C((uint64_t)v707, 0xFu, 3, (uint64_t)sub_F7934);
  uint64_t v42 = sub_5C60(v41, "Xcode Derived Counters");
  long long v43 = *(_OWORD *)v42;
  int v775 = *((_DWORD *)v42 + 4);
  long long v774 = v43;
  sub_110F60((uint64_t)&v776, (uint64_t)(v42 + 3));
  memset(v777, 0, sizeof(v777));
  sub_A448((char *)v777, (long long *)v42[8], (long long *)v42[9], 0xAAAAAAAAAAAAAAABLL * ((v42[9] - v42[8]) >> 3));
  sub_599C((int)v706, "PrimitivesRasterized");
  uint64_t v44 = (uint64_t *)sub_5A9C((uint64_t)v706, 0xFu, 3, (uint64_t)sub_F7B24);
  uint64_t v45 = sub_5C60(v44, "Xcode Derived Counters");
  long long v46 = *(_OWORD *)v45;
  int v779 = *((_DWORD *)v45 + 4);
  long long v778 = v46;
  sub_110F60((uint64_t)&v780, (uint64_t)(v45 + 3));
  memset(v781, 0, sizeof(v781));
  sub_A448((char *)v781, (long long *)v45[8], (long long *)v45[9], 0xAAAAAAAAAAAAAAABLL * ((v45[9] - v45[8]) >> 3));
  sub_599C((int)v705, "PrimitivesRasterizedPercent");
  uint64_t v47 = (uint64_t *)sub_5A9C((uint64_t)v705, 0xFu, 3, (uint64_t)sub_F7B7C);
  uint64_t v48 = sub_5C60(v47, "Xcode Derived Counters");
  long long v49 = *(_OWORD *)v48;
  int v783 = *((_DWORD *)v48 + 4);
  long long v782 = v49;
  sub_110F60((uint64_t)&v784, (uint64_t)(v48 + 3));
  memset(v785, 0, sizeof(v785));
  sub_A448((char *)v785, (long long *)v48[8], (long long *)v48[9], 0xAAAAAAAAAAAAAAABLL * ((v48[9] - v48[8]) >> 3));
  sub_599C((int)v704, "ClippedPrimitives");
  uint64_t v50 = (uint64_t *)sub_5A9C((uint64_t)v704, 0xFu, 3, (uint64_t)sub_F7D0C);
  uint64_t v51 = sub_5C60(v50, "Xcode Derived Counters");
  long long v52 = *(_OWORD *)v51;
  int v787 = *((_DWORD *)v51 + 4);
  long long v786 = v52;
  sub_110F60((uint64_t)&v788, (uint64_t)(v51 + 3));
  memset(v789, 0, sizeof(v789));
  sub_A448((char *)v789, (long long *)v51[8], (long long *)v51[9], 0xAAAAAAAAAAAAAAABLL * ((v51[9] - v51[8]) >> 3));
  sub_599C((int)v703, "ClippedPrimitivesPercent");
  unsigned int v53 = (uint64_t *)sub_5A9C((uint64_t)v703, 0xFu, 3, (uint64_t)sub_F7DD4);
  uint64_t v54 = sub_5C60(v53, "Xcode Derived Counters");
  long long v55 = *(_OWORD *)v54;
  int v791 = *((_DWORD *)v54 + 4);
  long long v790 = v55;
  sub_110F60((uint64_t)&v792, (uint64_t)(v54 + 3));
  memset(v793, 0, sizeof(v793));
  sub_A448((char *)v793, (long long *)v54[8], (long long *)v54[9], 0xAAAAAAAAAAAAAAABLL * ((v54[9] - v54[8]) >> 3));
  sub_599C((int)v702, "BackFaceCullPrims");
  uint64_t v56 = (uint64_t *)sub_5A9C((uint64_t)v702, 0xFu, 3, (uint64_t)sub_F7EE8);
  uint64_t v57 = sub_5C60(v56, "Xcode Derived Counters");
  long long v58 = *(_OWORD *)v57;
  int v795 = *((_DWORD *)v57 + 4);
  long long v794 = v58;
  sub_110F60((uint64_t)&v796, (uint64_t)(v57 + 3));
  memset(v797, 0, sizeof(v797));
  sub_A448((char *)v797, (long long *)v57[8], (long long *)v57[9], 0xAAAAAAAAAAAAAAABLL * ((v57[9] - v57[8]) >> 3));
  sub_599C((int)v701, "BackFaceClippedPrims");
  unint64_t v59 = (uint64_t *)sub_5A9C((uint64_t)v701, 0xFu, 3, (uint64_t)sub_F7F40);
  uint64_t v60 = sub_5C60(v59, "Xcode Derived Counters");
  long long v61 = *(_OWORD *)v60;
  int v799 = *((_DWORD *)v60 + 4);
  long long v798 = v61;
  sub_110F60((uint64_t)&v800, (uint64_t)(v60 + 3));
  memset(v801, 0, sizeof(v801));
  sub_A448((char *)v801, (long long *)v60[8], (long long *)v60[9], 0xAAAAAAAAAAAAAAABLL * ((v60[9] - v60[8]) >> 3));
  sub_599C((int)v700, "SmallTriangleClippedPrims");
  unint64_t v62 = (uint64_t *)sub_5A9C((uint64_t)v700, 0xFu, 3, (uint64_t)sub_F7F98);
  uint64_t v63 = sub_5C60(v62, "Xcode Derived Counters");
  long long v64 = *(_OWORD *)v63;
  int v803 = *((_DWORD *)v63 + 4);
  long long v802 = v64;
  sub_110F60((uint64_t)&v804, (uint64_t)(v63 + 3));
  memset(v805, 0, sizeof(v805));
  sub_A448((char *)v805, (long long *)v63[8], (long long *)v63[9], 0xAAAAAAAAAAAAAAABLL * ((v63[9] - v63[8]) >> 3));
  sub_599C((int)v699, "TrianglesCreatedByClipper");
  unint64_t v65 = (uint64_t *)sub_5A9C((uint64_t)v699, 0xFu, 3, (uint64_t)sub_F7FF0);
  uint64_t v66 = sub_5C60(v65, "Xcode Derived Counters");
  long long v67 = *(_OWORD *)v66;
  int v807 = *((_DWORD *)v66 + 4);
  long long v806 = v67;
  sub_110F60((uint64_t)&v808, (uint64_t)(v66 + 3));
  memset(v809, 0, sizeof(v809));
  sub_A448((char *)v809, (long long *)v66[8], (long long *)v66[9], 0xAAAAAAAAAAAAAAABLL * ((v66[9] - v66[8]) >> 3));
  sub_599C((int)v698, "VerticesCreatedByClipper");
  uint64_t v68 = (uint64_t *)sub_5A9C((uint64_t)v698, 0xFu, 3, (uint64_t)sub_F8048);
  uint64_t v69 = sub_5C60(v68, "Xcode Derived Counters");
  long long v70 = *(_OWORD *)v69;
  int v811 = *((_DWORD *)v69 + 4);
  long long v810 = v70;
  sub_110F60((uint64_t)&v812, (uint64_t)(v69 + 3));
  memset(v813, 0, sizeof(v813));
  sub_A448((char *)v813, (long long *)v69[8], (long long *)v69[9], 0xAAAAAAAAAAAAAAABLL * ((v69[9] - v69[8]) >> 3));
  sub_599C((int)v697, "InputPrimitivesPostClipping");
  unint64_t v71 = (uint64_t *)sub_5A9C((uint64_t)v697, 0xFu, 3, (uint64_t)sub_F80A0);
  uint64_t v72 = sub_5C60(v71, "Xcode Derived Counters");
  long long v73 = *(_OWORD *)v72;
  int v815 = *((_DWORD *)v72 + 4);
  long long v814 = v73;
  sub_110F60((uint64_t)&v816, (uint64_t)(v72 + 3));
  memset(v817, 0, sizeof(v817));
  sub_A448((char *)v817, (long long *)v72[8], (long long *)v72[9], 0xAAAAAAAAAAAAAAABLL * ((v72[9] - v72[8]) >> 3));
  sub_599C((int)v696, "SmallTriangleCullPrims");
  unint64_t v74 = (uint64_t *)sub_5A9C((uint64_t)v696, 0xFu, 3, (uint64_t)sub_F824C);
  uint64_t v75 = sub_5C60(v74, "Xcode Derived Counters");
  long long v76 = *(_OWORD *)v75;
  int v819 = *((_DWORD *)v75 + 4);
  long long v818 = v76;
  sub_110F60((uint64_t)&v820, (uint64_t)(v75 + 3));
  memset(v821, 0, sizeof(v821));
  sub_A448((char *)v821, (long long *)v75[8], (long long *)v75[9], 0xAAAAAAAAAAAAAAABLL * ((v75[9] - v75[8]) >> 3));
  sub_599C((int)v695, "BackFaceCullPrimsPercent");
  unint64_t v77 = (uint64_t *)sub_5A9C((uint64_t)v695, 0xFu, 3, (uint64_t)sub_F8510);
  uint64_t v78 = sub_5C60(v77, "Xcode Derived Counters");
  long long v79 = *(_OWORD *)v78;
  int v823 = *((_DWORD *)v78 + 4);
  long long v822 = v79;
  sub_110F60((uint64_t)&v824, (uint64_t)(v78 + 3));
  memset(v825, 0, sizeof(v825));
  sub_A448((char *)v825, (long long *)v78[8], (long long *)v78[9], 0xAAAAAAAAAAAAAAABLL * ((v78[9] - v78[8]) >> 3));
  sub_599C((int)v694, "SmallTriangleCullPrimsPercent");
  uint64_t v80 = (uint64_t *)sub_5A9C((uint64_t)v694, 0xFu, 3, (uint64_t)sub_F86A0);
  uint64_t v81 = sub_5C60(v80, "Xcode Derived Counters");
  long long v82 = *(_OWORD *)v81;
  int v827 = *((_DWORD *)v81 + 4);
  long long v826 = v82;
  sub_110F60((uint64_t)&v828, (uint64_t)(v81 + 3));
  memset(v829, 0, sizeof(v829));
  sub_A448((char *)v829, (long long *)v81[8], (long long *)v81[9], 0xAAAAAAAAAAAAAAABLL * ((v81[9] - v81[8]) >> 3));
  sub_599C((int)v693, "GuardBandCullPrims");
  unint64_t v83 = (uint64_t *)sub_5A9C((uint64_t)v693, 0xFu, 3, (uint64_t)sub_F8830);
  uint64_t v84 = sub_5C60(v83, "Xcode Derived Counters");
  long long v85 = *(_OWORD *)v84;
  int v831 = *((_DWORD *)v84 + 4);
  long long v830 = v85;
  sub_110F60((uint64_t)&v832, (uint64_t)(v84 + 3));
  memset(v833, 0, sizeof(v833));
  sub_A448((char *)v833, (long long *)v84[8], (long long *)v84[9], 0xAAAAAAAAAAAAAAABLL * ((v84[9] - v84[8]) >> 3));
  sub_599C((int)v692, "GuardBandCullPrimsPercent");
  unint64_t v86 = (uint64_t *)sub_5A9C((uint64_t)v692, 0xFu, 3, (uint64_t)sub_F8960);
  uint64_t v87 = sub_5C60(v86, "Xcode Derived Counters");
  long long v88 = *(_OWORD *)v87;
  int v835 = *((_DWORD *)v87 + 4);
  long long v834 = v88;
  sub_110F60((uint64_t)&v836, (uint64_t)(v87 + 3));
  memset(v837, 0, sizeof(v837));
  sub_A448((char *)v837, (long long *)v87[8], (long long *)v87[9], 0xAAAAAAAAAAAAAAABLL * ((v87[9] - v87[8]) >> 3));
  sub_599C((int)v691, "OffscreenCullPrims");
  unint64_t v89 = (uint64_t *)sub_5A9C((uint64_t)v691, 0xFu, 3, (uint64_t)sub_F8AF0);
  uint64_t v90 = sub_5C60(v89, "Xcode Derived Counters");
  long long v91 = *(_OWORD *)v90;
  int v839 = *((_DWORD *)v90 + 4);
  long long v838 = v91;
  sub_110F60((uint64_t)&v840, (uint64_t)(v90 + 3));
  memset(v841, 0, sizeof(v841));
  sub_A448((char *)v841, (long long *)v90[8], (long long *)v90[9], 0xAAAAAAAAAAAAAAABLL * ((v90[9] - v90[8]) >> 3));
  sub_599C((int)v690, "OffscreenCullPrimsPercent");
  unint64_t v92 = (uint64_t *)sub_5A9C((uint64_t)v690, 0xFu, 3, (uint64_t)sub_F8C20);
  uint64_t v93 = sub_5C60(v92, "Xcode Derived Counters");
  long long v94 = *(_OWORD *)v93;
  int v843 = *((_DWORD *)v93 + 4);
  long long v842 = v94;
  sub_110F60((uint64_t)&v844, (uint64_t)(v93 + 3));
  memset(v845, 0, sizeof(v845));
  sub_A448((char *)v845, (long long *)v93[8], (long long *)v93[9], 0xAAAAAAAAAAAAAAABLL * ((v93[9] - v93[8]) >> 3));
  sub_599C((int)v689, "CulledPrimitives");
  unint64_t v95 = (uint64_t *)sub_5A9C((uint64_t)v689, 0xFu, 3, (uint64_t)sub_F8DB0);
  uint64_t v96 = sub_5C60(v95, "Xcode Derived Counters");
  long long v97 = *(_OWORD *)v96;
  int v847 = *((_DWORD *)v96 + 4);
  long long v846 = v97;
  sub_110F60((uint64_t)&v848, (uint64_t)(v96 + 3));
  memset(v849, 0, sizeof(v849));
  sub_A448((char *)v849, (long long *)v96[8], (long long *)v96[9], 0xAAAAAAAAAAAAAAABLL * ((v96[9] - v96[8]) >> 3));
  sub_599C((int)v688, "CulledPrimitivesPercent");
  unint64_t v98 = (uint64_t *)sub_5A9C((uint64_t)v688, 0xFu, 3, (uint64_t)sub_F8EF4);
  unint64_t v99 = sub_5C60(v98, "Xcode Derived Counters");
  long long v100 = *(_OWORD *)v99;
  int v851 = *((_DWORD *)v99 + 4);
  long long v850 = v100;
  sub_110F60((uint64_t)&v852, (uint64_t)(v99 + 3));
  memset(v853, 0, sizeof(v853));
  sub_A448((char *)v853, (long long *)v99[8], (long long *)v99[9], 0xAAAAAAAAAAAAAAABLL * ((v99[9] - v99[8]) >> 3));
  sub_599C((int)v687, "FragmentsRasterized");
  unint64_t v101 = (uint64_t *)sub_5A9C((uint64_t)v687, 0xFu, 3, (uint64_t)sub_F9084);
  unint64_t v102 = sub_5C60(v101, "Xcode Derived Counters");
  long long v103 = *(_OWORD *)v102;
  int v855 = *((_DWORD *)v102 + 4);
  long long v854 = v103;
  sub_110F60((uint64_t)&v856, (uint64_t)(v102 + 3));
  memset(v857, 0, sizeof(v857));
  sub_A448((char *)v857, (long long *)v102[8], (long long *)v102[9], 0xAAAAAAAAAAAAAAABLL * ((v102[9] - v102[8]) >> 3));
  sub_599C((int)v686, "PreZPassCount");
  unint64_t v104 = (uint64_t *)sub_5A9C((uint64_t)v686, 0xFu, 3, (uint64_t)sub_F9304);
  uint64_t v105 = sub_5C60(v104, "Xcode Derived Counters");
  long long v106 = *(_OWORD *)v105;
  int v859 = *((_DWORD *)v105 + 4);
  long long v858 = v106;
  sub_110F60((uint64_t)&v860, (uint64_t)(v105 + 3));
  memset(v861, 0, sizeof(v861));
  sub_A448((char *)v861, (long long *)v105[8], (long long *)v105[9], 0xAAAAAAAAAAAAAAABLL * ((v105[9] - v105[8]) >> 3));
  sub_599C((int)v685, "PreZFailCount");
  unint64_t v107 = (uint64_t *)sub_5A9C((uint64_t)v685, 0xFu, 3, (uint64_t)sub_F9584);
  unint64_t v108 = sub_5C60(v107, "Xcode Derived Counters");
  long long v109 = *(_OWORD *)v108;
  int v863 = *((_DWORD *)v108 + 4);
  long long v862 = v109;
  sub_110F60((uint64_t)&v864, (uint64_t)(v108 + 3));
  memset(v865, 0, sizeof(v865));
  sub_A448((char *)v865, (long long *)v108[8], (long long *)v108[9], 0xAAAAAAAAAAAAAAABLL * ((v108[9] - v108[8]) >> 3));
  sub_599C((int)v684, "PreZFailCountPercent");
  unint64_t v110 = (uint64_t *)sub_5A9C((uint64_t)v684, 0xFu, 3, (uint64_t)sub_F96C8);
  uint64_t v111 = sub_5C60(v110, "Xcode Derived Counters");
  long long v112 = *(_OWORD *)v111;
  int v867 = *((_DWORD *)v111 + 4);
  long long v866 = v112;
  sub_110F60((uint64_t)&v868, (uint64_t)(v111 + 3));
  memset(v869, 0, sizeof(v869));
  sub_A448((char *)v869, (long long *)v111[8], (long long *)v111[9], 0xAAAAAAAAAAAAAAABLL * ((v111[9] - v111[8]) >> 3));
  sub_599C((int)v683, "PreZPassCountPercent");
  unint64_t v113 = (uint64_t *)sub_5A9C((uint64_t)v683, 0xFu, 3, (uint64_t)sub_F97DC);
  unint64_t v114 = sub_5C60(v113, "Xcode Derived Counters");
  long long v115 = *(_OWORD *)v114;
  int v871 = *((_DWORD *)v114 + 4);
  long long v870 = v115;
  sub_110F60((uint64_t)&v872, (uint64_t)(v114 + 3));
  memset(v873, 0, sizeof(v873));
  sub_A448((char *)v873, (long long *)v114[8], (long long *)v114[9], 0xAAAAAAAAAAAAAAABLL * ((v114[9] - v114[8]) >> 3));
  sub_599C((int)v682, "AverageOverdraw");
  unint64_t v116 = (uint64_t *)sub_5A9C((uint64_t)v682, 0xFu, 3, (uint64_t)sub_F98F0);
  uint64_t v117 = sub_5C60(v116, "Xcode Derived Counters");
  long long v118 = *(_OWORD *)v117;
  int v875 = *((_DWORD *)v117 + 4);
  long long v874 = v118;
  sub_110F60((uint64_t)&v876, (uint64_t)(v117 + 3));
  memset(v877, 0, sizeof(v877));
  sub_A448((char *)v877, (long long *)v117[8], (long long *)v117[9], 0xAAAAAAAAAAAAAAABLL * ((v117[9] - v117[8]) >> 3));
  sub_599C((int)v681, "PixelsPerTile");
  unint64_t v119 = (uint64_t *)sub_5A9C((uint64_t)v681, 0xFu, 3, (uint64_t)sub_F9A84);
  unint64_t v120 = sub_5C60(v119, "Xcode Derived Counters");
  long long v121 = *(_OWORD *)v120;
  int v879 = *((_DWORD *)v120 + 4);
  long long v878 = v121;
  sub_110F60((uint64_t)&v880, (uint64_t)(v120 + 3));
  memset(v881, 0, sizeof(v881));
  sub_A448((char *)v881, (long long *)v120[8], (long long *)v120[9], 0xAAAAAAAAAAAAAAABLL * ((v120[9] - v120[8]) >> 3));
  sub_599C((int)v680, "TextureSamples");
  unint64_t v122 = (uint64_t *)sub_5A9C((uint64_t)v680, 0xFu, 3, (uint64_t)sub_F9B4C);
  uint64_t v123 = sub_5C60(v122, "Xcode Derived Counters");
  long long v124 = *(_OWORD *)v123;
  int v883 = *((_DWORD *)v123 + 4);
  long long v882 = v124;
  sub_110F60((uint64_t)&v884, (uint64_t)(v123 + 3));
  memset(v885, 0, sizeof(v885));
  sub_A448((char *)v885, (long long *)v123[8], (long long *)v123[9], 0xAAAAAAAAAAAAAAABLL * ((v123[9] - v123[8]) >> 3));
  sub_599C((int)v679, "VSTextureSamplesPerInvocation");
  unint64_t v125 = (uint64_t *)sub_5A9C((uint64_t)v679, 0xFu, 3, (uint64_t)sub_F9D18);
  unint64_t v126 = sub_5C60(v125, "Xcode Derived Counters");
  long long v127 = *(_OWORD *)v126;
  int v887 = *((_DWORD *)v126 + 4);
  long long v886 = v127;
  sub_110F60((uint64_t)&v888, (uint64_t)(v126 + 3));
  memset(v889, 0, sizeof(v889));
  sub_A448((char *)v889, (long long *)v126[8], (long long *)v126[9], 0xAAAAAAAAAAAAAAABLL * ((v126[9] - v126[8]) >> 3));
  sub_599C((int)v678, "FSTextureSamplesPerInvocation");
  unint64_t v128 = (uint64_t *)sub_5A9C((uint64_t)v678, 0xFu, 3, (uint64_t)sub_F9DE0);
  uint64_t v129 = sub_5C60(v128, "Xcode Derived Counters");
  long long v130 = *(_OWORD *)v129;
  int v891 = *((_DWORD *)v129 + 4);
  long long v890 = v130;
  sub_110F60((uint64_t)&v892, (uint64_t)(v129 + 3));
  memset(v893, 0, sizeof(v893));
  sub_A448((char *)v893, (long long *)v129[8], (long long *)v129[9], 0xAAAAAAAAAAAAAAABLL * ((v129[9] - v129[8]) >> 3));
  sub_599C((int)v677, "CSTextureSamplesPerInvocation");
  unint64_t v131 = (uint64_t *)sub_5A9C((uint64_t)v677, 0xFu, 3, (uint64_t)sub_F9EA8);
  unint64_t v132 = sub_5C60(v131, "Xcode Derived Counters");
  long long v133 = *(_OWORD *)v132;
  int v895 = *((_DWORD *)v132 + 4);
  long long v894 = v133;
  sub_110F60((uint64_t)&v896, (uint64_t)(v132 + 3));
  memset(v897, 0, sizeof(v897));
  sub_A448((char *)v897, (long long *)v132[8], (long long *)v132[9], 0xAAAAAAAAAAAAAAABLL * ((v132[9] - v132[8]) >> 3));
  sub_599C((int)v676, "AverageAnisotropicRatio");
  unint64_t v134 = (uint64_t *)sub_5A9C((uint64_t)v676, 0xFu, 3, (uint64_t)sub_F9F70);
  uint64_t v135 = sub_5C60(v134, "Xcode Derived Counters");
  long long v136 = *(_OWORD *)v135;
  int v899 = *((_DWORD *)v135 + 4);
  long long v898 = v136;
  sub_110F60((uint64_t)&v900, (uint64_t)(v135 + 3));
  memset(v901, 0, sizeof(v901));
  sub_A448((char *)v901, (long long *)v135[8], (long long *)v135[9], 0xAAAAAAAAAAAAAAABLL * ((v135[9] - v135[8]) >> 3));
  sub_599C((int)v675, "TextureAccesses");
  unint64_t v137 = (uint64_t *)sub_5A9C((uint64_t)v675, 0xFu, 3, (uint64_t)sub_FA5E8);
  unint64_t v138 = sub_5C60(v137, "Xcode Derived Counters");
  long long v139 = *(_OWORD *)v138;
  int v903 = *((_DWORD *)v138 + 4);
  long long v902 = v139;
  sub_110F60((uint64_t)&v904, (uint64_t)(v138 + 3));
  memset(v905, 0, sizeof(v905));
  sub_A448((char *)v905, (long long *)v138[8], (long long *)v138[9], 0xAAAAAAAAAAAAAAABLL * ((v138[9] - v138[8]) >> 3));
  sub_599C((int)v674, "TextureQuads");
  unint64_t v140 = (uint64_t *)sub_5A9C((uint64_t)v674, 0xFu, 3, (uint64_t)sub_FA698);
  uint64_t v141 = sub_5C60(v140, "Xcode Derived Counters");
  long long v142 = *(_OWORD *)v141;
  int v907 = *((_DWORD *)v141 + 4);
  long long v906 = v142;
  sub_110F60((uint64_t)&v908, (uint64_t)(v141 + 3));
  memset(v909, 0, sizeof(v909));
  sub_A448((char *)v909, (long long *)v141[8], (long long *)v141[9], 0xAAAAAAAAAAAAAAABLL * ((v141[9] - v141[8]) >> 3));
  sub_599C((int)v673, "FPSSpeedupFactor");
  unint64_t v143 = (uint64_t *)sub_5A9C((uint64_t)v673, 0xFu, 3, (uint64_t)sub_FA748);
  unint64_t v144 = sub_5C60(v143, "Xcode Derived Counters");
  long long v145 = *(_OWORD *)v144;
  int v911 = *((_DWORD *)v144 + 4);
  long long v910 = v145;
  sub_110F60((uint64_t)&v912, (uint64_t)(v144 + 3));
  memset(v913, 0, sizeof(v913));
  sub_A448((char *)v913, (long long *)v144[8], (long long *)v144[9], 0xAAAAAAAAAAAAAAABLL * ((v144[9] - v144[8]) >> 3));
  sub_599C((int)v672, "TextureQuadsGathered");
  uint64_t v146 = (uint64_t *)sub_5A9C((uint64_t)v672, 0xFu, 3, (uint64_t)sub_FA840);
  uint64_t v147 = sub_5C60(v146, "Xcode Derived Counters");
  long long v148 = *(_OWORD *)v147;
  int v915 = *((_DWORD *)v147 + 4);
  long long v914 = v148;
  sub_110F60((uint64_t)&v916, (uint64_t)(v147 + 3));
  memset(v917, 0, sizeof(v917));
  sub_A448((char *)v917, (long long *)v147[8], (long long *)v147[9], 0xAAAAAAAAAAAAAAABLL * ((v147[9] - v147[8]) >> 3));
  sub_599C((int)v671, "AnisotropicSamples");
  unint64_t v149 = (uint64_t *)sub_5A9C((uint64_t)v671, 0xFu, 3, (uint64_t)sub_FA8EC);
  unint64_t v150 = sub_5C60(v149, "Xcode Derived Counters");
  long long v151 = *(_OWORD *)v150;
  int v919 = *((_DWORD *)v150 + 4);
  long long v918 = v151;
  sub_110F60((uint64_t)&v920, (uint64_t)(v150 + 3));
  memset(v921, 0, sizeof(v921));
  sub_A448((char *)v921, (long long *)v150[8], (long long *)v150[9], 0xAAAAAAAAAAAAAAABLL * ((v150[9] - v150[8]) >> 3));
  sub_599C((int)v670, "AnisotropicSamplesPercent");
  unint64_t v152 = (uint64_t *)sub_5A9C((uint64_t)v670, 0xFu, 3, (uint64_t)sub_FA998);
  uint64_t v153 = sub_5C60(v152, "Xcode Derived Counters");
  long long v154 = *(_OWORD *)v153;
  int v923 = *((_DWORD *)v153 + 4);
  long long v922 = v154;
  sub_110F60((uint64_t)&v924, (uint64_t)(v153 + 3));
  memset(v925, 0, sizeof(v925));
  sub_A448((char *)v925, (long long *)v153[8], (long long *)v153[9], 0xAAAAAAAAAAAAAAABLL * ((v153[9] - v153[8]) >> 3));
  sub_599C((int)v669, "MipmapLinearSamples");
  unint64_t v155 = (uint64_t *)sub_5A9C((uint64_t)v669, 0xFu, 3, (uint64_t)sub_FAAAC);
  unint64_t v156 = sub_5C60(v155, "Xcode Derived Counters");
  long long v157 = *(_OWORD *)v156;
  int v927 = *((_DWORD *)v156 + 4);
  long long v926 = v157;
  sub_110F60((uint64_t)&v928, (uint64_t)(v156 + 3));
  memset(v929, 0, sizeof(v929));
  sub_A448((char *)v929, (long long *)v156[8], (long long *)v156[9], 0xAAAAAAAAAAAAAAABLL * ((v156[9] - v156[8]) >> 3));
  sub_599C((int)v668, "MipmapLinearSamplesPercent");
  unint64_t v158 = (uint64_t *)sub_5A9C((uint64_t)v668, 0xFu, 3, (uint64_t)sub_FAB58);
  uint64_t v159 = sub_5C60(v158, "Xcode Derived Counters");
  long long v160 = *(_OWORD *)v159;
  int v931 = *((_DWORD *)v159 + 4);
  long long v930 = v160;
  sub_110F60((uint64_t)&v932, (uint64_t)(v159 + 3));
  memset(v933, 0, sizeof(v933));
  sub_A448((char *)v933, (long long *)v159[8], (long long *)v159[9], 0xAAAAAAAAAAAAAAABLL * ((v159[9] - v159[8]) >> 3));
  sub_599C((int)v667, "MipmapNearestSamples");
  unint64_t v161 = (uint64_t *)sub_5A9C((uint64_t)v667, 0xFu, 3, (uint64_t)sub_FAC6C);
  unint64_t v162 = sub_5C60(v161, "Xcode Derived Counters");
  long long v163 = *(_OWORD *)v162;
  int v935 = *((_DWORD *)v162 + 4);
  long long v934 = v163;
  sub_110F60((uint64_t)&v936, (uint64_t)(v162 + 3));
  memset(v937, 0, sizeof(v937));
  sub_A448((char *)v937, (long long *)v162[8], (long long *)v162[9], 0xAAAAAAAAAAAAAAABLL * ((v162[9] - v162[8]) >> 3));
  sub_599C((int)v666, "MipmapNearestSamplesPercent");
  uint64_t v164 = (uint64_t *)sub_5A9C((uint64_t)v666, 0xFu, 3, (uint64_t)sub_FAD18);
  uint64_t v165 = sub_5C60(v164, "Xcode Derived Counters");
  long long v166 = *(_OWORD *)v165;
  int v939 = *((_DWORD *)v165 + 4);
  long long v938 = v166;
  sub_110F60((uint64_t)&v940, (uint64_t)(v165 + 3));
  memset(v941, 0, sizeof(v941));
  sub_A448((char *)v941, (long long *)v165[8], (long long *)v165[9], 0xAAAAAAAAAAAAAAABLL * ((v165[9] - v165[8]) >> 3));
  sub_599C((int)v665, "CompressedSamples");
  uint64_t v167 = (uint64_t *)sub_5A9C((uint64_t)v665, 0xFu, 3, (uint64_t)sub_FAE2C);
  unint64_t v168 = sub_5C60(v167, "Xcode Derived Counters");
  long long v169 = *(_OWORD *)v168;
  int v943 = *((_DWORD *)v168 + 4);
  long long v942 = v169;
  sub_110F60((uint64_t)&v944, (uint64_t)(v168 + 3));
  memset(v945, 0, sizeof(v945));
  sub_A448((char *)v945, (long long *)v168[8], (long long *)v168[9], 0xAAAAAAAAAAAAAAABLL * ((v168[9] - v168[8]) >> 3));
  sub_599C((int)v664, "CompressedSamplesPercent");
  uint64_t v170 = (uint64_t *)sub_5A9C((uint64_t)v664, 0xFu, 3, (uint64_t)sub_FBA1C);
  uint64_t v171 = sub_5C60(v170, "Xcode Derived Counters");
  long long v172 = *(_OWORD *)v171;
  int v947 = *((_DWORD *)v171 + 4);
  long long v946 = v172;
  sub_110F60((uint64_t)&v948, (uint64_t)(v171 + 3));
  memset(v949, 0, sizeof(v949));
  sub_A448((char *)v949, (long long *)v171[8], (long long *)v171[9], 0xAAAAAAAAAAAAAAABLL * ((v171[9] - v171[8]) >> 3));
  sub_599C((int)v663, "LosslessCompressedSamples");
  uint64_t v173 = (uint64_t *)sub_5A9C((uint64_t)v663, 0xFu, 3, (uint64_t)sub_FBC64);
  unint64_t v174 = sub_5C60(v173, "Xcode Derived Counters");
  long long v175 = *(_OWORD *)v174;
  int v951 = *((_DWORD *)v174 + 4);
  long long v950 = v175;
  sub_110F60((uint64_t)&v952, (uint64_t)(v174 + 3));
  memset(v953, 0, sizeof(v953));
  sub_A448((char *)v953, (long long *)v174[8], (long long *)v174[9], 0xAAAAAAAAAAAAAAABLL * ((v174[9] - v174[8]) >> 3));
  sub_599C((int)v662, "LosslessCompressedSamplesPercent");
  uint64_t v176 = (uint64_t *)sub_5A9C((uint64_t)v662, 0xFu, 3, (uint64_t)sub_FBD10);
  uint64_t v177 = sub_5C60(v176, "Xcode Derived Counters");
  long long v178 = *(_OWORD *)v177;
  int v955 = *((_DWORD *)v177 + 4);
  long long v954 = v178;
  sub_110F60((uint64_t)&v956, (uint64_t)(v177 + 3));
  memset(v957, 0, sizeof(v957));
  sub_A448((char *)v957, (long long *)v177[8], (long long *)v177[9], 0xAAAAAAAAAAAAAAABLL * ((v177[9] - v177[8]) >> 3));
  sub_599C((int)v661, "LossyCompressedSamples");
  uint64_t v179 = (uint64_t *)sub_5A9C((uint64_t)v661, 0xFu, 3, (uint64_t)sub_FBEDC);
  unint64_t v180 = sub_5C60(v179, "Xcode Derived Counters");
  long long v181 = *(_OWORD *)v180;
  int v959 = *((_DWORD *)v180 + 4);
  long long v958 = v181;
  sub_110F60((uint64_t)&v960, (uint64_t)(v180 + 3));
  memset(v961, 0, sizeof(v961));
  sub_A448((char *)v961, (long long *)v180[8], (long long *)v180[9], 0xAAAAAAAAAAAAAAABLL * ((v180[9] - v180[8]) >> 3));
  sub_599C((int)v660, "LossyCompressedSamplesPercent");
  uint64_t v182 = (uint64_t *)sub_5A9C((uint64_t)v660, 0xFu, 3, (uint64_t)sub_FBF88);
  uint64_t v183 = sub_5C60(v182, "Xcode Derived Counters");
  long long v184 = *(_OWORD *)v183;
  int v963 = *((_DWORD *)v183 + 4);
  long long v962 = v184;
  sub_110F60((uint64_t)&v964, (uint64_t)(v183 + 3));
  memset(v965, 0, sizeof(v965));
  sub_A448((char *)v965, (long long *)v183[8], (long long *)v183[9], 0xAAAAAAAAAAAAAAABLL * ((v183[9] - v183[8]) >> 3));
  sub_599C((int)v659, "UncompressedSamples");
  uint64_t v185 = (uint64_t *)sub_5A9C((uint64_t)v659, 0xFu, 3, (uint64_t)sub_FC154);
  unint64_t v186 = sub_5C60(v185, "Xcode Derived Counters");
  long long v187 = *(_OWORD *)v186;
  int v967 = *((_DWORD *)v186 + 4);
  long long v966 = v187;
  sub_110F60((uint64_t)&v968, (uint64_t)(v186 + 3));
  memset(v969, 0, sizeof(v969));
  sub_A448((char *)v969, (long long *)v186[8], (long long *)v186[9], 0xAAAAAAAAAAAAAAABLL * ((v186[9] - v186[8]) >> 3));
  sub_599C((int)v658, "UnCompressedSamplesPercent");
  uint64_t v188 = (uint64_t *)sub_5A9C((uint64_t)v658, 0xFu, 3, (uint64_t)sub_FC358);
  uint64_t v189 = sub_5C60(v188, "Xcode Derived Counters");
  long long v190 = *(_OWORD *)v189;
  int v971 = *((_DWORD *)v189 + 4);
  long long v970 = v190;
  sub_110F60((uint64_t)&v972, (uint64_t)(v189 + 3));
  memset(v973, 0, sizeof(v973));
  sub_A448((char *)v973, (long long *)v189[8], (long long *)v189[9], 0xAAAAAAAAAAAAAAABLL * ((v189[9] - v189[8]) >> 3));
  sub_599C((int)v657, "PixelsUnbiasedWrittenToMemory");
  uint64_t v191 = (uint64_t *)sub_5A9C((uint64_t)v657, 0xFu, 3, (uint64_t)sub_FC59C);
  uint64_t v192 = sub_5C60(v191, "Xcode Derived Counters");
  long long v193 = *(_OWORD *)v192;
  int v975 = *((_DWORD *)v192 + 4);
  long long v974 = v193;
  sub_110F60((uint64_t)&v976, (uint64_t)(v192 + 3));
  memset(v977, 0, sizeof(v977));
  sub_A448((char *)v977, (long long *)v192[8], (long long *)v192[9], 0xAAAAAAAAAAAAAAABLL * ((v192[9] - v192[8]) >> 3));
  sub_599C((int)v656, "TexturePixelsWrittenToMemory");
  int v194 = (uint64_t *)sub_5A9C((uint64_t)v656, 0xFu, 3, (uint64_t)sub_FC648);
  uint64_t v195 = sub_5C60(v194, "Xcode Derived Counters");
  long long v196 = *(_OWORD *)v195;
  int v979 = *((_DWORD *)v195 + 4);
  long long v978 = v196;
  sub_110F60((uint64_t)&v980, (uint64_t)(v195 + 3));
  memset(v981, 0, sizeof(v981));
  sub_A448((char *)v981, (long long *)v195[8], (long long *)v195[9], 0xAAAAAAAAAAAAAAABLL * ((v195[9] - v195[8]) >> 3));
  sub_599C((int)v655, "PixelsWrittenToMemory");
  uint64_t v197 = (uint64_t *)sub_5A9C((uint64_t)v655, 0xFu, 3, (uint64_t)sub_FC758);
  long long v198 = sub_5C60(v197, "Xcode Derived Counters");
  long long v199 = *(_OWORD *)v198;
  int v983 = *((_DWORD *)v198 + 4);
  long long v982 = v199;
  sub_110F60((uint64_t)&v984, (uint64_t)(v198 + 3));
  memset(v985, 0, sizeof(v985));
  sub_A448((char *)v985, (long long *)v198[8], (long long *)v198[9], 0xAAAAAAAAAAAAAAABLL * ((v198[9] - v198[8]) >> 3));
  sub_599C((int)v654, "AttachmentPixelsWrittenToMemory");
  uint64_t v200 = (uint64_t *)sub_5A9C((uint64_t)v654, 0xFu, 3, (uint64_t)sub_FC85C);
  uint64_t v201 = sub_5C60(v200, "Xcode Derived Counters");
  long long v202 = *(_OWORD *)v201;
  int v987 = *((_DWORD *)v201 + 4);
  long long v986 = v202;
  sub_110F60((uint64_t)&v988, (uint64_t)(v201 + 3));
  memset(v989, 0, sizeof(v989));
  sub_A448((char *)v989, (long long *)v201[8], (long long *)v201[9], 0xAAAAAAAAAAAAAAABLL * ((v201[9] - v201[8]) >> 3));
  sub_599C((int)v653, "CompressedPixelsWrittenToMemory");
  unint64_t v203 = (uint64_t *)sub_5A9C((uint64_t)v653, 0xFu, 3, (uint64_t)sub_FC9A0);
  unint64_t v204 = sub_5C60(v203, "Xcode Derived Counters");
  long long v205 = *(_OWORD *)v204;
  int v991 = *((_DWORD *)v204 + 4);
  long long v990 = v205;
  sub_110F60((uint64_t)&v992, (uint64_t)(v204 + 3));
  memset(v993, 0, sizeof(v993));
  sub_A448((char *)v993, (long long *)v204[8], (long long *)v204[9], 0xAAAAAAAAAAAAAAABLL * ((v204[9] - v204[8]) >> 3));
  sub_599C((int)v652, "LossyCompressedPixelsWrittenToMemory");
  unint64_t v206 = (uint64_t *)sub_5A9C((uint64_t)v652, 0xFu, 3, (uint64_t)sub_FCAB0);
  uint64_t v207 = sub_5C60(v206, "Xcode Derived Counters");
  long long v208 = *(_OWORD *)v207;
  int v995 = *((_DWORD *)v207 + 4);
  long long v994 = v208;
  sub_110F60((uint64_t)&v996, (uint64_t)(v207 + 3));
  memset(v997, 0, sizeof(v997));
  sub_A448((char *)v997, (long long *)v207[8], (long long *)v207[9], 0xAAAAAAAAAAAAAAABLL * ((v207[9] - v207[8]) >> 3));
  sub_599C((int)v651, "TotalSBUsedInLossyCompression");
  unint64_t v209 = (uint64_t *)sub_5A9C((uint64_t)v651, 0xFu, 3, (uint64_t)sub_FCD40);
  unint64_t v210 = sub_5C60(v209, "Xcode Derived Counters");
  long long v211 = *(_OWORD *)v210;
  int v999 = *((_DWORD *)v210 + 4);
  long long v998 = v211;
  sub_110F60((uint64_t)&v1000, (uint64_t)(v210 + 3));
  memset(v1001, 0, sizeof(v1001));
  sub_A448((char *)v1001, (long long *)v210[8], (long long *)v210[9], 0xAAAAAAAAAAAAAAABLL * ((v210[9] - v210[8]) >> 3));
  sub_599C((int)v650, "PercentageLosslessCompressedSB");
  unint64_t v212 = (uint64_t *)sub_5A9C((uint64_t)v650, 0xFu, 3, (uint64_t)sub_FCF90);
  uint64_t v213 = sub_5C60(v212, "Xcode Derived Counters");
  long long v214 = *(_OWORD *)v213;
  int v1003 = *((_DWORD *)v213 + 4);
  long long v1002 = v214;
  sub_110F60((uint64_t)&v1004, (uint64_t)(v213 + 3));
  memset(v1005, 0, sizeof(v1005));
  sub_A448((char *)v1005, (long long *)v213[8], (long long *)v213[9], 0xAAAAAAAAAAAAAAABLL * ((v213[9] - v213[8]) >> 3));
  sub_599C((int)v649, "PercentageLossyCompressedSBNoFB");
  unint64_t v215 = (uint64_t *)sub_5A9C((uint64_t)v649, 0xFu, 3, (uint64_t)sub_FD11C);
  unint64_t v216 = sub_5C60(v215, "Xcode Derived Counters");
  long long v217 = *(_OWORD *)v216;
  int v1007 = *((_DWORD *)v216 + 4);
  long long v1006 = v217;
  sub_110F60((uint64_t)&v1008, (uint64_t)(v216 + 3));
  memset(v1009, 0, sizeof(v1009));
  sub_A448((char *)v1009, (long long *)v216[8], (long long *)v216[9], 0xAAAAAAAAAAAAAAABLL * ((v216[9] - v216[8]) >> 3));
  sub_599C((int)v648, "PercentageLossyCompressedSBWithFB");
  unint64_t v218 = (uint64_t *)sub_5A9C((uint64_t)v648, 0xFu, 3, (uint64_t)sub_FD2A8);
  uint64_t v219 = sub_5C60(v218, "Xcode Derived Counters");
  long long v220 = *(_OWORD *)v219;
  int v1011 = *((_DWORD *)v219 + 4);
  long long v1010 = v220;
  sub_110F60((uint64_t)&v1012, (uint64_t)(v219 + 3));
  memset(v1013, 0, sizeof(v1013));
  sub_A448((char *)v1013, (long long *)v219[8], (long long *)v219[9], 0xAAAAAAAAAAAAAAABLL * ((v219[9] - v219[8]) >> 3));
  sub_599C((int)v647, "AverageFBRegionsLossyCompressedSBs");
  unint64_t v221 = (uint64_t *)sub_5A9C((uint64_t)v647, 0xFu, 3, (uint64_t)sub_FD558);
  unint64_t v222 = sub_5C60(v221, "Xcode Derived Counters");
  long long v223 = *(_OWORD *)v222;
  int v1015 = *((_DWORD *)v222 + 4);
  long long v1014 = v223;
  sub_110F60((uint64_t)&v1016, (uint64_t)(v222 + 3));
  memset(v1017, 0, sizeof(v1017));
  sub_A448((char *)v1017, (long long *)v222[8], (long long *)v222[9], 0xAAAAAAAAAAAAAAABLL * ((v222[9] - v222[8]) >> 3));
  sub_599C((int)v646, "TexturePixelsWrittenToMemoryPercent");
  uint64_t v224 = (uint64_t *)sub_5A9C((uint64_t)v646, 0xFu, 3, (uint64_t)sub_FD938);
  uint64_t v225 = sub_5C60(v224, "Xcode Derived Counters");
  long long v226 = *(_OWORD *)v225;
  int v1019 = *((_DWORD *)v225 + 4);
  long long v1018 = v226;
  sub_110F60((uint64_t)&v1020, (uint64_t)(v225 + 3));
  memset(v1021, 0, sizeof(v1021));
  sub_A448((char *)v1021, (long long *)v225[8], (long long *)v225[9], 0xAAAAAAAAAAAAAAABLL * ((v225[9] - v225[8]) >> 3));
  sub_599C((int)v645, "AttachmentPixelsWrittenToMemoryPercent");
  unint64_t v227 = (uint64_t *)sub_5A9C((uint64_t)v645, 0xFu, 3, (uint64_t)sub_FDAC4);
  unint64_t v228 = sub_5C60(v227, "Xcode Derived Counters");
  long long v229 = *(_OWORD *)v228;
  int v1023 = *((_DWORD *)v228 + 4);
  long long v1022 = v229;
  sub_110F60((uint64_t)&v1024, (uint64_t)(v228 + 3));
  memset(v1025, 0, sizeof(v1025));
  sub_A448((char *)v1025, (long long *)v228[8], (long long *)v228[9], 0xAAAAAAAAAAAAAAABLL * ((v228[9] - v228[8]) >> 3));
  sub_599C((int)v644, "CompressedPixelsWrittenToMemoryPercent");
  unint64_t v230 = (uint64_t *)sub_5A9C((uint64_t)v644, 0xFu, 3, (uint64_t)sub_FDC50);
  uint64_t v231 = sub_5C60(v230, "Xcode Derived Counters");
  long long v232 = *(_OWORD *)v231;
  int v1027 = *((_DWORD *)v231 + 4);
  long long v1026 = v232;
  sub_110F60((uint64_t)&v1028, (uint64_t)(v231 + 3));
  memset(v1029, 0, sizeof(v1029));
  sub_A448((char *)v1029, (long long *)v231[8], (long long *)v231[9], 0xAAAAAAAAAAAAAAABLL * ((v231[9] - v231[8]) >> 3));
  sub_599C((int)v643, "LossyCompressedPixelsWrittenToMemoryPercent");
  unint64_t v233 = (uint64_t *)sub_5A9C((uint64_t)v643, 0xFu, 3, (uint64_t)sub_FDDDC);
  unint64_t v234 = sub_5C60(v233, "Xcode Derived Counters");
  long long v235 = *(_OWORD *)v234;
  int v1031 = *((_DWORD *)v234 + 4);
  long long v1030 = v235;
  sub_110F60((uint64_t)&v1032, (uint64_t)(v234 + 3));
  memset(v1033, 0, sizeof(v1033));
  sub_A448((char *)v1033, (long long *)v234[8], (long long *)v234[9], 0xAAAAAAAAAAAAAAABLL * ((v234[9] - v234[8]) >> 3));
  sub_599C((int)v642, "MSAA2XResolvedPixels");
  uint64_t v236 = (uint64_t *)sub_5A9C((uint64_t)v642, 0xFu, 3, (uint64_t)sub_FDF68);
  uint64_t v237 = sub_5C60(v236, "Xcode Derived Counters");
  long long v238 = *(_OWORD *)v237;
  int v1035 = *((_DWORD *)v237 + 4);
  long long v1034 = v238;
  sub_110F60((uint64_t)&v1036, (uint64_t)(v237 + 3));
  memset(v1037, 0, sizeof(v1037));
  sub_A448((char *)v1037, (long long *)v237[8], (long long *)v237[9], 0xAAAAAAAAAAAAAAABLL * ((v237[9] - v237[8]) >> 3));
  sub_599C((int)v641, "MSAA4XResolvedPixels");
  unint64_t v239 = (uint64_t *)sub_5A9C((uint64_t)v641, 0xFu, 3, (uint64_t)sub_FE014);
  unint64_t v240 = sub_5C60(v239, "Xcode Derived Counters");
  long long v241 = *(_OWORD *)v240;
  int v1039 = *((_DWORD *)v240 + 4);
  long long v1038 = v241;
  sub_110F60((uint64_t)&v1040, (uint64_t)(v240 + 3));
  memset(v1041, 0, sizeof(v1041));
  sub_A448((char *)v1041, (long long *)v240[8], (long long *)v240[9], 0xAAAAAAAAAAAAAAABLL * ((v240[9] - v240[8]) >> 3));
  sub_599C((int)v640, "MSAA2XResolvedPixelsPercent");
  uint64_t v242 = (uint64_t *)sub_5A9C((uint64_t)v640, 0xFu, 3, (uint64_t)sub_FE0C0);
  uint64_t v243 = sub_5C60(v242, "Xcode Derived Counters");
  long long v244 = *(_OWORD *)v243;
  int v1043 = *((_DWORD *)v243 + 4);
  long long v1042 = v244;
  sub_110F60((uint64_t)&v1044, (uint64_t)(v243 + 3));
  memset(v1045, 0, sizeof(v1045));
  sub_A448((char *)v1045, (long long *)v243[8], (long long *)v243[9], 0xAAAAAAAAAAAAAAABLL * ((v243[9] - v243[8]) >> 3));
  sub_599C((int)v639, "MSAA4XResolvedPixelsPercent");
  unint64_t v245 = (uint64_t *)sub_5A9C((uint64_t)v639, 0xFu, 3, (uint64_t)sub_FE254);
  unint64_t v246 = sub_5C60(v245, "Xcode Derived Counters");
  long long v247 = *(_OWORD *)v246;
  int v1047 = *((_DWORD *)v246 + 4);
  long long v1046 = v247;
  sub_110F60((uint64_t)&v1048, (uint64_t)(v246 + 3));
  memset(v1049, 0, sizeof(v1049));
  sub_A448((char *)v1049, (long long *)v246[8], (long long *)v246[9], 0xAAAAAAAAAAAAAAABLL * ((v246[9] - v246[8]) >> 3));
  sub_599C((int)v638, "TotalResolvedPixels");
  uint64_t v248 = (uint64_t *)sub_5A9C((uint64_t)v638, 0xFu, 3, (uint64_t)sub_FE3E8);
  uint64_t v249 = sub_5C60(v248, "Xcode Derived Counters");
  long long v250 = *(_OWORD *)v249;
  int v1051 = *((_DWORD *)v249 + 4);
  long long v1050 = v250;
  sub_110F60((uint64_t)&v1052, (uint64_t)(v249 + 3));
  memset(v1053, 0, sizeof(v1053));
  sub_A448((char *)v1053, (long long *)v249[8], (long long *)v249[9], 0xAAAAAAAAAAAAAAABLL * ((v249[9] - v249[8]) >> 3));
  sub_599C((int)v637, "AverageUniqueColorsPerResolvedPixels");
  unint64_t v251 = (uint64_t *)sub_5A9C((uint64_t)v637, 0xFu, 3, (uint64_t)sub_FE5B8);
  unint64_t v252 = sub_5C60(v251, "Xcode Derived Counters");
  long long v253 = *(_OWORD *)v252;
  int v1055 = *((_DWORD *)v252 + 4);
  long long v1054 = v253;
  sub_110F60((uint64_t)&v1056, (uint64_t)(v252 + 3));
  memset(v1057, 0, sizeof(v1057));
  sub_A448((char *)v1057, (long long *)v252[8], (long long *)v252[9], 0xAAAAAAAAAAAAAAABLL * ((v252[9] - v252[8]) >> 3));
  sub_599C((int)v636, "TextureCacheMissRate");
  uint64_t v254 = (uint64_t *)sub_5A9C((uint64_t)v636, 0xFu, 3, (uint64_t)sub_FE928);
  uint64_t v255 = sub_5C60(v254, "Xcode Derived Counters");
  long long v256 = *(_OWORD *)v255;
  int v1059 = *((_DWORD *)v255 + 4);
  long long v1058 = v256;
  sub_110F60((uint64_t)&v1060, (uint64_t)(v255 + 3));
  memset(v1061, 0, sizeof(v1061));
  sub_A448((char *)v1061, (long long *)v255[8], (long long *)v255[9], 0xAAAAAAAAAAAAAAABLL * ((v255[9] - v255[8]) >> 3));
  sub_599C((int)v635, "TextureCacheWriteMissRate");
  unint64_t v257 = (uint64_t *)sub_5A9C((uint64_t)v635, 0xFu, 3, (uint64_t)sub_FEA3C);
  unint64_t v258 = sub_5C60(v257, "Xcode Derived Counters");
  long long v259 = *(_OWORD *)v258;
  int v1063 = *((_DWORD *)v258 + 4);
  long long v1062 = v259;
  sub_110F60((uint64_t)&v1064, (uint64_t)(v258 + 3));
  memset(v1065, 0, sizeof(v1065));
  sub_A448((char *)v1065, (long long *)v258[8], (long long *)v258[9], 0xAAAAAAAAAAAAAAABLL * ((v258[9] - v258[8]) >> 3));
  sub_599C((int)v634, "BytesReadFromMainMemory");
  unint64_t v260 = (uint64_t *)sub_5A9C((uint64_t)v634, 0xFu, 3, (uint64_t)sub_FEB7C);
  uint64_t v261 = sub_5C60(v260, "Xcode Derived Counters");
  long long v262 = *(_OWORD *)v261;
  int v1067 = *((_DWORD *)v261 + 4);
  long long v1066 = v262;
  sub_110F60((uint64_t)&v1068, (uint64_t)(v261 + 3));
  memset(v1069, 0, sizeof(v1069));
  sub_A448((char *)v1069, (long long *)v261[8], (long long *)v261[9], 0xAAAAAAAAAAAAAAABLL * ((v261[9] - v261[8]) >> 3));
  sub_599C((int)v633, "BytesWrittenToMainMemory");
  unint64_t v263 = (uint64_t *)sub_5A9C((uint64_t)v633, 0xFu, 3, (uint64_t)sub_FEC98);
  unint64_t v264 = sub_5C60(v263, "Xcode Derived Counters");
  long long v265 = *(_OWORD *)v264;
  int v1071 = *((_DWORD *)v264 + 4);
  long long v1070 = v265;
  sub_110F60((uint64_t)&v1072, (uint64_t)(v264 + 3));
  memset(v1073, 0, sizeof(v1073));
  sub_A448((char *)v1073, (long long *)v264[8], (long long *)v264[9], 0xAAAAAAAAAAAAAAABLL * ((v264[9] - v264[8]) >> 3));
  sub_599C((int)v632, "TotalGlobalAABytesRead");
  unint64_t v266 = (uint64_t *)sub_5A9C((uint64_t)v632, 0xFu, 3, (uint64_t)sub_FEDB4);
  uint64_t v267 = sub_5C60(v266, "Xcode Derived Counters");
  long long v268 = *(_OWORD *)v267;
  int v1075 = *((_DWORD *)v267 + 4);
  long long v1074 = v268;
  sub_110F60((uint64_t)&v1076, (uint64_t)(v267 + 3));
  memset(v1077, 0, sizeof(v1077));
  sub_A448((char *)v1077, (long long *)v267[8], (long long *)v267[9], 0xAAAAAAAAAAAAAAABLL * ((v267[9] - v267[8]) >> 3));
  sub_599C((int)v631, "TotalGlobalAABytesWritten");
  unint64_t v269 = (uint64_t *)sub_5A9C((uint64_t)v631, 0xFu, 3, (uint64_t)sub_FF008);
  unint64_t v270 = sub_5C60(v269, "Xcode Derived Counters");
  long long v271 = *(_OWORD *)v270;
  int v1079 = *((_DWORD *)v270 + 4);
  long long v1078 = v271;
  sub_110F60((uint64_t)&v1080, (uint64_t)(v270 + 3));
  memset(v1081, 0, sizeof(v1081));
  sub_A448((char *)v1081, (long long *)v270[8], (long long *)v270[9], 0xAAAAAAAAAAAAAAABLL * ((v270[9] - v270[8]) >> 3));
  sub_599C((int)v630, "TotalL2BytesRead");
  unint64_t v272 = (uint64_t *)sub_5A9C((uint64_t)v630, 0xFu, 3, (uint64_t)sub_FF124);
  uint64_t v273 = sub_5C60(v272, "Xcode Derived Counters");
  long long v274 = *(_OWORD *)v273;
  int v1083 = *((_DWORD *)v273 + 4);
  long long v1082 = v274;
  sub_110F60((uint64_t)&v1084, (uint64_t)(v273 + 3));
  memset(v1085, 0, sizeof(v1085));
  sub_A448((char *)v1085, (long long *)v273[8], (long long *)v273[9], 0xAAAAAAAAAAAAAAABLL * ((v273[9] - v273[8]) >> 3));
  sub_599C((int)v629, "TotalL2BytesWritten");
  unint64_t v275 = (uint64_t *)sub_5A9C((uint64_t)v629, 0xFu, 3, (uint64_t)sub_FF4F8);
  unint64_t v276 = sub_5C60(v275, "Xcode Derived Counters");
  long long v277 = *(_OWORD *)v276;
  int v1087 = *((_DWORD *)v276 + 4);
  long long v1086 = v277;
  sub_110F60((uint64_t)&v1088, (uint64_t)(v276 + 3));
  memset(v1089, 0, sizeof(v1089));
  sub_A448((char *)v1089, (long long *)v276[8], (long long *)v276[9], 0xAAAAAAAAAAAAAAABLL * ((v276[9] - v276[8]) >> 3));
  sub_599C((int)v628, "TotalBytesReadFromTextureL1Cache");
  unint64_t v278 = (uint64_t *)sub_5A9C((uint64_t)v628, 0xFu, 3, (uint64_t)sub_FF734);
  uint64_t v279 = sub_5C60(v278, "Xcode Derived Counters");
  long long v280 = *(_OWORD *)v279;
  int v1091 = *((_DWORD *)v279 + 4);
  long long v1090 = v280;
  sub_110F60((uint64_t)&v1092, (uint64_t)(v279 + 3));
  memset(v1093, 0, sizeof(v1093));
  sub_A448((char *)v1093, (long long *)v279[8], (long long *)v279[9], 0xAAAAAAAAAAAAAAABLL * ((v279[9] - v279[8]) >> 3));
  sub_599C((int)v627, "PredicatedTextureWritePercentage");
  unint64_t v281 = (uint64_t *)sub_5A9C((uint64_t)v627, 0xFu, 3, (uint64_t)sub_FF7E4);
  unint64_t v282 = sub_5C60(v281, "Xcode Derived Counters");
  long long v283 = *(_OWORD *)v282;
  int v1095 = *((_DWORD *)v282 + 4);
  long long v1094 = v283;
  sub_110F60((uint64_t)&v1096, (uint64_t)(v282 + 3));
  memset(v1097, 0, sizeof(v1097));
  sub_A448((char *)v1097, (long long *)v282[8], (long long *)v282[9], 0xAAAAAAAAAAAAAAABLL * ((v282[9] - v282[8]) >> 3));
  sub_599C((int)v626, "PredicatedTextureReadPercentage");
  unint64_t v284 = (uint64_t *)sub_5A9C((uint64_t)v626, 0xFu, 3, (uint64_t)sub_FFA24);
  uint64_t v285 = sub_5C60(v284, "Xcode Derived Counters");
  long long v286 = *(_OWORD *)v285;
  int v1099 = *((_DWORD *)v285 + 4);
  long long v1098 = v286;
  sub_110F60((uint64_t)&v1100, (uint64_t)(v285 + 3));
  memset(v1101, 0, sizeof(v1101));
  sub_A448((char *)v1101, (long long *)v285[8], (long long *)v285[9], 0xAAAAAAAAAAAAAAABLL * ((v285[9] - v285[8]) >> 3));
  sub_599C((int)v625, "SamplesShadedPerTile");
  unint64_t v287 = (uint64_t *)sub_5A9C((uint64_t)v625, 0xFu, 3, (uint64_t)sub_FFCA0);
  unint64_t v288 = sub_5C60(v287, "Xcode Derived Counters");
  long long v289 = *(_OWORD *)v288;
  int v1103 = *((_DWORD *)v288 + 4);
  long long v1102 = v289;
  sub_110F60((uint64_t)&v1104, (uint64_t)(v288 + 3));
  memset(v1105, 0, sizeof(v1105));
  sub_A448((char *)v1105, (long long *)v288[8], (long long *)v288[9], 0xAAAAAAAAAAAAAAABLL * ((v288[9] - v288[8]) >> 3));
  sub_599C((int)v624, "SamplesShadedPerQuad");
  unint64_t v290 = (uint64_t *)sub_5A9C((uint64_t)v624, 0xFu, 3, (uint64_t)sub_FFDB0);
  uint64_t v291 = sub_5C60(v290, "Xcode Derived Counters");
  long long v292 = *(_OWORD *)v291;
  int v1107 = *((_DWORD *)v291 + 4);
  long long v1106 = v292;
  sub_110F60((uint64_t)&v1108, (uint64_t)(v291 + 3));
  memset(v1109, 0, sizeof(v1109));
  sub_A448((char *)v1109, (long long *)v291[8], (long long *)v291[9], 0xAAAAAAAAAAAAAAABLL * ((v291[9] - v291[8]) >> 3));
  sub_599C((int)v623, "CompressionRatioTextureMemoryWritten");
  unint64_t v293 = (uint64_t *)sub_5A9C((uint64_t)v623, 0xFu, 3, (uint64_t)sub_FFF78);
  unint64_t v294 = sub_5C60(v293, "Xcode Derived Counters");
  long long v295 = *(_OWORD *)v294;
  int v1111 = *((_DWORD *)v294 + 4);
  long long v1110 = v295;
  sub_110F60((uint64_t)&v1112, (uint64_t)(v294 + 3));
  memset(v1113, 0, sizeof(v1113));
  sub_A448((char *)v1113, (long long *)v294[8], (long long *)v294[9], 0xAAAAAAAAAAAAAAABLL * ((v294[9] - v294[8]) >> 3));
  sub_599C((int)v622, "CompressionRatioTextureMemoryRead");
  unint64_t v296 = (uint64_t *)sub_5A9C((uint64_t)v622, 0xFu, 3, (uint64_t)sub_1002E0);
  uint64_t v297 = sub_5C60(v296, "Xcode Derived Counters");
  long long v298 = *(_OWORD *)v297;
  int v1115 = *((_DWORD *)v297 + 4);
  long long v1114 = v298;
  sub_110F60((uint64_t)&v1116, (uint64_t)(v297 + 3));
  memset(v1117, 0, sizeof(v1117));
  sub_A448((char *)v1117, (long long *)v297[8], (long long *)v297[9], 0xAAAAAAAAAAAAAAABLL * ((v297[9] - v297[8]) >> 3));
  sub_599C((int)v621, "LosslessCompressedBytesFromTC");
  unint64_t v299 = (uint64_t *)sub_5A9C((uint64_t)v621, 0xFu, 3, (uint64_t)sub_10048C);
  unint64_t v300 = sub_5C60(v299, "Xcode Derived Counters");
  long long v301 = *(_OWORD *)v300;
  int v1119 = *((_DWORD *)v300 + 4);
  long long v1118 = v301;
  sub_110F60((uint64_t)&v1120, (uint64_t)(v300 + 3));
  memset(v1121, 0, sizeof(v1121));
  sub_A448((char *)v1121, (long long *)v300[8], (long long *)v300[9], 0xAAAAAAAAAAAAAAABLL * ((v300[9] - v300[8]) >> 3));
  sub_599C((int)v620, "UncompressedBytesFromTC");
  uint64_t v302 = (uint64_t *)sub_5A9C((uint64_t)v620, 0xFu, 3, (uint64_t)sub_10053C);
  uint64_t v303 = sub_5C60(v302, "Xcode Derived Counters");
  long long v304 = *(_OWORD *)v303;
  int v1123 = *((_DWORD *)v303 + 4);
  long long v1122 = v304;
  sub_110F60((uint64_t)&v1124, (uint64_t)(v303 + 3));
  memset(v1125, 0, sizeof(v1125));
  sub_A448((char *)v1125, (long long *)v303[8], (long long *)v303[9], 0xAAAAAAAAAAAAAAABLL * ((v303[9] - v303[8]) >> 3));
  sub_599C((int)v619, "LossyCompressedBytesFromTC");
  unint64_t v305 = (uint64_t *)sub_5A9C((uint64_t)v619, 0xFu, 3, (uint64_t)sub_1005EC);
  unint64_t v306 = sub_5C60(v305, "Xcode Derived Counters");
  long long v307 = *(_OWORD *)v306;
  int v1127 = *((_DWORD *)v306 + 4);
  long long v1126 = v307;
  sub_110F60((uint64_t)&v1128, (uint64_t)(v306 + 3));
  memset(v1129, 0, sizeof(v1129));
  sub_A448((char *)v1129, (long long *)v306[8], (long long *)v306[9], 0xAAAAAAAAAAAAAAABLL * ((v306[9] - v306[8]) >> 3));
  sub_599C((int)v618, "MainMemoryThroughput");
  long long v308 = (uint64_t *)sub_5A9C((uint64_t)v618, 0xFu, 3, (uint64_t)sub_100760);
  uint64_t v309 = sub_5C60(v308, "Xcode Derived Counters");
  long long v310 = *(_OWORD *)v309;
  int v1131 = *((_DWORD *)v309 + 4);
  long long v1130 = v310;
  sub_110F60((uint64_t)&v1132, (uint64_t)(v309 + 3));
  memset(v1133, 0, sizeof(v1133));
  sub_A448((char *)v1133, (long long *)v309[8], (long long *)v309[9], 0xAAAAAAAAAAAAAAABLL * ((v309[9] - v309[8]) >> 3));
  sub_599C((int)v617, "BytesReadForBuffersFromMainMemory");
  unint64_t v311 = (uint64_t *)sub_5A9C((uint64_t)v617, 0xFu, 3, (uint64_t)sub_100790);
  unint64_t v312 = sub_5C60(v311, "Xcode Derived Counters");
  long long v313 = *(_OWORD *)v312;
  int v1135 = *((_DWORD *)v312 + 4);
  long long v1134 = v313;
  sub_110F60((uint64_t)&v1136, (uint64_t)(v312 + 3));
  memset(v1137, 0, sizeof(v1137));
  sub_A448((char *)v1137, (long long *)v312[8], (long long *)v312[9], 0xAAAAAAAAAAAAAAABLL * ((v312[9] - v312[8]) >> 3));
  sub_599C((int)v616, "BytesWrittenForBuffersFromMainMemory");
  unint64_t v314 = (uint64_t *)sub_5A9C((uint64_t)v616, 0xFu, 3, (uint64_t)sub_100838);
  uint64_t v315 = sub_5C60(v314, "Xcode Derived Counters");
  long long v316 = *(_OWORD *)v315;
  int v1139 = *((_DWORD *)v315 + 4);
  long long v1138 = v316;
  sub_110F60((uint64_t)&v1140, (uint64_t)(v315 + 3));
  memset(v1141, 0, sizeof(v1141));
  sub_A448((char *)v1141, (long long *)v315[8], (long long *)v315[9], 0xAAAAAAAAAAAAAAABLL * ((v315[9] - v315[8]) >> 3));
  sub_599C((int)v615, "TextureBytesWrittenToMainMemory");
  unint64_t v317 = (uint64_t *)sub_5A9C((uint64_t)v615, 0xFu, 3, (uint64_t)sub_100954);
  unint64_t v318 = sub_5C60(v317, "Xcode Derived Counters");
  long long v319 = *(_OWORD *)v318;
  int v1143 = *((_DWORD *)v318 + 4);
  long long v1142 = v319;
  sub_110F60((uint64_t)&v1144, (uint64_t)(v318 + 3));
  memset(v1145, 0, sizeof(v1145));
  sub_A448((char *)v1145, (long long *)v318[8], (long long *)v318[9], 0xAAAAAAAAAAAAAAABLL * ((v318[9] - v318[8]) >> 3));
  sub_599C((int)v614, "TextureBytesReadFromMainMemory");
  uint64_t v320 = (uint64_t *)sub_5A9C((uint64_t)v614, 0xFu, 3, (uint64_t)sub_100B14);
  uint64_t v321 = sub_5C60(v320, "Xcode Derived Counters");
  long long v322 = *(_OWORD *)v321;
  int v1147 = *((_DWORD *)v321 + 4);
  long long v1146 = v322;
  sub_110F60((uint64_t)&v1148, (uint64_t)(v321 + 3));
  memset(v1149, 0, sizeof(v1149));
  sub_A448((char *)v1149, (long long *)v321[8], (long long *)v321[9], 0xAAAAAAAAAAAAAAABLL * ((v321[9] - v321[8]) >> 3));
  sub_599C((int)v613, "L2CacheMissRate");
  unint64_t v323 = (uint64_t *)sub_5A9C((uint64_t)v613, 0xFu, 3, (uint64_t)sub_100BBC);
  unint64_t v324 = sub_5C60(v323, "Xcode Derived Counters");
  long long v325 = *(_OWORD *)v324;
  int v1151 = *((_DWORD *)v324 + 4);
  long long v1150 = v325;
  sub_110F60((uint64_t)&v1152, (uint64_t)(v324 + 3));
  memset(v1153, 0, sizeof(v1153));
  sub_A448((char *)v1153, (long long *)v324[8], (long long *)v324[9], 0xAAAAAAAAAAAAAAABLL * ((v324[9] - v324[8]) >> 3));
  sub_599C((int)v612, "PartialRenders");
  unint64_t v326 = (uint64_t *)sub_5A9C((uint64_t)v612, 0xFu, 3, (uint64_t)sub_100D48);
  uint64_t v327 = sub_5C60(v326, "Xcode Derived Counters");
  long long v328 = *(_OWORD *)v327;
  int v1155 = *((_DWORD *)v327 + 4);
  long long v1154 = v328;
  sub_110F60((uint64_t)&v1156, (uint64_t)(v327 + 3));
  memset(v1157, 0, sizeof(v1157));
  sub_A448((char *)v1157, (long long *)v327[8], (long long *)v327[9], 0xAAAAAAAAAAAAAAABLL * ((v327[9] - v327[8]) >> 3));
  sub_599C((int)v611, "ParameterBufferTilerAlloc");
  unint64_t v329 = (uint64_t *)sub_5A9C((uint64_t)v611, 0xFu, 3, (uint64_t)sub_100DA0);
  unint64_t v330 = sub_5C60(v329, "Xcode Derived Counters");
  long long v331 = *(_OWORD *)v330;
  int v1159 = *((_DWORD *)v330 + 4);
  long long v1158 = v331;
  sub_110F60((uint64_t)&v1160, (uint64_t)(v330 + 3));
  memset(v1161, 0, sizeof(v1161));
  sub_A448((char *)v1161, (long long *)v330[8], (long long *)v330[9], 0xAAAAAAAAAAAAAAABLL * ((v330[9] - v330[8]) >> 3));
  sub_599C((int)v610, "ParameterBufferPrimitiveBlockAlloc");
  unint64_t v332 = (uint64_t *)sub_5A9C((uint64_t)v610, 0xFu, 3, (uint64_t)sub_100E90);
  uint64_t v333 = sub_5C60(v332, "Xcode Derived Counters");
  long long v334 = *(_OWORD *)v333;
  int v1163 = *((_DWORD *)v333 + 4);
  long long v1162 = v334;
  sub_110F60((uint64_t)&v1164, (uint64_t)(v333 + 3));
  memset(v1165, 0, sizeof(v1165));
  sub_A448((char *)v1165, (long long *)v333[8], (long long *)v333[9], 0xAAAAAAAAAAAAAAABLL * ((v333[9] - v333[8]) >> 3));
  sub_599C((int)v609, "ParameterBufferBytesUsed");
  unint64_t v335 = (uint64_t *)sub_5A9C((uint64_t)v609, 0xFu, 3, (uint64_t)sub_100F80);
  unint64_t v336 = sub_5C60(v335, "Xcode Derived Counters");
  long long v337 = *(_OWORD *)v336;
  int v1167 = *((_DWORD *)v336 + 4);
  long long v1166 = v337;
  sub_110F60((uint64_t)&v1168, (uint64_t)(v336 + 3));
  memset(v1169, 0, sizeof(v1169));
  sub_A448((char *)v1169, (long long *)v336[8], (long long *)v336[9], 0xAAAAAAAAAAAAAAABLL * ((v336[9] - v336[8]) >> 3));
  sub_599C((int)v608, "FRGTicks");
  int v338 = (uint64_t *)sub_5A9C((uint64_t)v608, 0xFu, 3, (uint64_t)sub_101048);
  uint64_t v339 = sub_5C60(v338, "Xcode Derived Counters");
  long long v340 = *(_OWORD *)v339;
  int v1171 = *((_DWORD *)v339 + 4);
  long long v1170 = v340;
  sub_110F60((uint64_t)&v1172, (uint64_t)(v339 + 3));
  memset(v1173, 0, sizeof(v1173));
  sub_A448((char *)v1173, (long long *)v339[8], (long long *)v339[9], 0xAAAAAAAAAAAAAAABLL * ((v339[9] - v339[8]) >> 3));
  sub_599C((int)v607, "TextureCacheLimiter");
  unint64_t v341 = (uint64_t *)sub_5A9C((uint64_t)v607, 0xFu, 3, (uint64_t)sub_1010A0);
  unint64_t v342 = sub_5C60(v341, "Xcode Derived Counters");
  long long v343 = *(_OWORD *)v342;
  int v1175 = *((_DWORD *)v342 + 4);
  long long v1174 = v343;
  sub_110F60((uint64_t)&v1176, (uint64_t)(v342 + 3));
  memset(v1177, 0, sizeof(v1177));
  sub_A448((char *)v1177, (long long *)v342[8], (long long *)v342[9], 0xAAAAAAAAAAAAAAABLL * ((v342[9] - v342[8]) >> 3));
  sub_599C((int)v606, "TextureCacheMissLimiter");
  int v344 = (uint64_t *)sub_5A9C((uint64_t)v606, 0xFu, 3, (uint64_t)sub_101244);
  uint64_t v345 = sub_5C60(v344, "Xcode Derived Counters");
  long long v346 = *(_OWORD *)v345;
  int v1179 = *((_DWORD *)v345 + 4);
  long long v1178 = v346;
  sub_110F60((uint64_t)&v1180, (uint64_t)(v345 + 3));
  memset(v1181, 0, sizeof(v1181));
  sub_A448((char *)v1181, (long long *)v345[8], (long long *)v345[9], 0xAAAAAAAAAAAAAAABLL * ((v345[9] - v345[8]) >> 3));
  sub_599C((int)v605, "SparseTextureTranslationLimiter");
  unint64_t v347 = (uint64_t *)sub_5A9C((uint64_t)v605, 0xFu, 3, (uint64_t)sub_10142C);
  uint64_t v348 = sub_5C60(v347, "Xcode Derived Counters");
  long long v349 = *(_OWORD *)v348;
  int v1183 = *((_DWORD *)v348 + 4);
  long long v1182 = v349;
  sub_110F60((uint64_t)&v1184, (uint64_t)(v348 + 3));
  memset(v1185, 0, sizeof(v1185));
  sub_A448((char *)v1185, (long long *)v348[8], (long long *)v348[9], 0xAAAAAAAAAAAAAAABLL * ((v348[9] - v348[8]) >> 3));
  sub_599C((int)v604, "SparseTextureRequests");
  uint64_t v350 = (uint64_t *)sub_5A9C((uint64_t)v604, 0xFu, 3, (uint64_t)sub_101704);
  uint64_t v351 = sub_5C60(v350, "Xcode Derived Counters");
  long long v352 = *(_OWORD *)v351;
  int v1187 = *((_DWORD *)v351 + 4);
  long long v1186 = v352;
  sub_110F60((uint64_t)&v1188, (uint64_t)(v351 + 3));
  memset(v1189, 0, sizeof(v1189));
  sub_A448((char *)v1189, (long long *)v351[8], (long long *)v351[9], 0xAAAAAAAAAAAAAAABLL * ((v351[9] - v351[8]) >> 3));
  sub_599C((int)v603, "AverageSparseTextureRequestSize");
  unint64_t v353 = (uint64_t *)sub_5A9C((uint64_t)v603, 0xFu, 3, (uint64_t)sub_101834);
  uint64_t v354 = sub_5C60(v353, "Xcode Derived Counters");
  long long v355 = *(_OWORD *)v354;
  int v1191 = *((_DWORD *)v354 + 4);
  long long v1190 = v355;
  sub_110F60((uint64_t)&v1192, (uint64_t)(v354 + 3));
  memset(v1193, 0, sizeof(v1193));
  sub_A448((char *)v1193, (long long *)v354[8], (long long *)v354[9], 0xAAAAAAAAAAAAAAABLL * ((v354[9] - v354[8]) >> 3));
  sub_599C((int)v602, "FragmentGeneratorPrimitiveUtilization");
  uint64_t v356 = (uint64_t *)sub_5A9C((uint64_t)v602, 0xFu, 3, (uint64_t)sub_101B04);
  uint64_t v357 = sub_5C60(v356, "Xcode Derived Counters");
  long long v358 = *(_OWORD *)v357;
  int v1195 = *((_DWORD *)v357 + 4);
  long long v1194 = v358;
  sub_110F60((uint64_t)&v1196, (uint64_t)(v357 + 3));
  memset(v1197, 0, sizeof(v1197));
  sub_A448((char *)v1197, (long long *)v357[8], (long long *)v357[9], 0xAAAAAAAAAAAAAAABLL * ((v357[9] - v357[8]) >> 3));
  sub_599C((int)v601, "FragmentRasterizerUtilization");
  unint64_t v359 = (uint64_t *)sub_5A9C((uint64_t)v601, 0xFu, 3, (uint64_t)sub_101CA8);
  unint64_t v360 = sub_5C60(v359, "Xcode Derived Counters");
  long long v361 = *(_OWORD *)v360;
  int v1199 = *((_DWORD *)v360 + 4);
  long long v1198 = v361;
  sub_110F60((uint64_t)&v1200, (uint64_t)(v360 + 3));
  memset(v1201, 0, sizeof(v1201));
  sub_A448((char *)v1201, (long long *)v360[8], (long long *)v360[9], 0xAAAAAAAAAAAAAAABLL * ((v360[9] - v360[8]) >> 3));
  sub_599C((int)v600, "FragmentQuadProcessingUtilization");
  uint64_t v362 = (uint64_t *)sub_5A9C((uint64_t)v600, 0xFu, 3, (uint64_t)sub_101E4C);
  uint64_t v363 = sub_5C60(v362, "Xcode Derived Counters");
  long long v364 = *(_OWORD *)v363;
  int v1203 = *((_DWORD *)v363 + 4);
  long long v1202 = v364;
  sub_110F60((uint64_t)&v1204, (uint64_t)(v363 + 3));
  memset(v1205, 0, sizeof(v1205));
  sub_A448((char *)v1205, (long long *)v363[8], (long long *)v363[9], 0xAAAAAAAAAAAAAAABLL * ((v363[9] - v363[8]) >> 3));
  sub_599C((int)v599, "PreCullPrimitiveBlockUtilization");
  uint64_t v365 = (uint64_t *)sub_5A9C((uint64_t)v599, 0xFu, 3, (uint64_t)sub_102014);
  uint64_t v366 = sub_5C60(v365, "Xcode Derived Counters");
  long long v367 = *(_OWORD *)v366;
  int v1207 = *((_DWORD *)v366 + 4);
  long long v1206 = v367;
  sub_110F60((uint64_t)&v1208, (uint64_t)(v366 + 3));
  memset(v1209, 0, sizeof(v1209));
  sub_A448((char *)v1209, (long long *)v366[8], (long long *)v366[9], 0xAAAAAAAAAAAAAAABLL * ((v366[9] - v366[8]) >> 3));
  sub_599C((int)v598, "PostClipCullPrimitiveBlockUtilization");
  uint64_t v368 = (uint64_t *)sub_5A9C((uint64_t)v598, 0xFu, 3, (uint64_t)sub_1021B8);
  uint64_t v369 = sub_5C60(v368, "Xcode Derived Counters");
  long long v370 = *(_OWORD *)v369;
  int v1211 = *((_DWORD *)v369 + 4);
  long long v1210 = v370;
  sub_110F60((uint64_t)&v1212, (uint64_t)(v369 + 3));
  memset(v1213, 0, sizeof(v1213));
  sub_A448((char *)v1213, (long long *)v369[8], (long long *)v369[9], 0xAAAAAAAAAAAAAAABLL * ((v369[9] - v369[8]) >> 3));
  sub_599C((int)v597, "PrimitiveTileIntersectionUtilization");
  uint64_t v371 = (uint64_t *)sub_5A9C((uint64_t)v597, 0xFu, 3, (uint64_t)sub_102338);
  uint64_t v372 = sub_5C60(v371, "Xcode Derived Counters");
  long long v373 = *(_OWORD *)v372;
  int v1215 = *((_DWORD *)v372 + 4);
  long long v1214 = v373;
  sub_110F60((uint64_t)&v1216, (uint64_t)(v372 + 3));
  memset(v1217, 0, sizeof(v1217));
  sub_A448((char *)v1217, (long long *)v372[8], (long long *)v372[9], 0xAAAAAAAAAAAAAAABLL * ((v372[9] - v372[8]) >> 3));
  sub_599C((int)v596, "TilerUtilization");
  uint64_t v374 = (uint64_t *)sub_5A9C((uint64_t)v596, 0xFu, 3, (uint64_t)sub_1024B8);
  uint64_t v375 = sub_5C60(v374, "Xcode Derived Counters");
  long long v376 = *(_OWORD *)v375;
  int v1219 = *((_DWORD *)v375 + 4);
  long long v1218 = v376;
  sub_110F60((uint64_t)&v1220, (uint64_t)(v375 + 3));
  memset(v1221, 0, sizeof(v1221));
  sub_A448((char *)v1221, (long long *)v375[8], (long long *)v375[9], 0xAAAAAAAAAAAAAAABLL * ((v375[9] - v375[8]) >> 3));
  sub_599C((int)v595, "MMULimiter");
  uint64_t v377 = (uint64_t *)sub_5A9C((uint64_t)v595, 0xFu, 3, (uint64_t)sub_102638);
  uint64_t v378 = sub_5C60(v377, "Xcode Derived Counters");
  long long v379 = *(_OWORD *)v378;
  int v1223 = *((_DWORD *)v378 + 4);
  long long v1222 = v379;
  sub_110F60((uint64_t)&v1224, (uint64_t)(v378 + 3));
  memset(v1225, 0, sizeof(v1225));
  sub_A448((char *)v1225, (long long *)v378[8], (long long *)v378[9], 0xAAAAAAAAAAAAAAABLL * ((v378[9] - v378[8]) >> 3));
  sub_599C((int)v594, "MainMemoryTraffic");
  uint64_t v380 = (uint64_t *)sub_5A9C((uint64_t)v594, 0xFu, 3, (uint64_t)sub_102820);
  uint64_t v381 = sub_5C60(v380, "Xcode Derived Counters");
  long long v382 = *(_OWORD *)v381;
  int v1227 = *((_DWORD *)v381 + 4);
  long long v1226 = v382;
  sub_110F60((uint64_t)&v1228, (uint64_t)(v381 + 3));
  memset(v1229, 0, sizeof(v1229));
  sub_A448((char *)v1229, (long long *)v381[8], (long long *)v381[9], 0xAAAAAAAAAAAAAAABLL * ((v381[9] - v381[8]) >> 3));
  sub_599C((int)v593, "VSInvocationUtilization");
  uint64_t v383 = (uint64_t *)sub_5A9C((uint64_t)v593, 0xFu, 3, (uint64_t)sub_1028C8);
  uint64_t v384 = sub_5C60(v383, "Xcode Derived Counters");
  long long v385 = *(_OWORD *)v384;
  int v1231 = *((_DWORD *)v384 + 4);
  long long v1230 = v385;
  sub_110F60((uint64_t)&v1232, (uint64_t)(v384 + 3));
  memset(v1233, 0, sizeof(v1233));
  sub_A448((char *)v1233, (long long *)v384[8], (long long *)v384[9], 0xAAAAAAAAAAAAAAABLL * ((v384[9] - v384[8]) >> 3));
  sub_599C((int)v592, "FragmentZStoreUtilization");
  uint64_t v386 = (uint64_t *)sub_5A9C((uint64_t)v592, 0xFu, 3, (uint64_t)sub_102A6C);
  uint64_t v387 = sub_5C60(v386, "Xcode Derived Counters");
  long long v388 = *(_OWORD *)v387;
  int v1235 = *((_DWORD *)v387 + 4);
  long long v1234 = v388;
  sub_110F60((uint64_t)&v1236, (uint64_t)(v387 + 3));
  memset(v1237, 0, sizeof(v1237));
  sub_A448((char *)v1237, (long long *)v387[8], (long long *)v387[9], 0xAAAAAAAAAAAAAAABLL * ((v387[9] - v387[8]) >> 3));
  sub_599C((int)v591, "FragmentZStoreBytes");
  uint64_t v389 = (uint64_t *)sub_5A9C((uint64_t)v591, 0xFu, 3, (uint64_t)sub_102BEC);
  uint64_t v390 = sub_5C60(v389, "Xcode Derived Counters");
  long long v391 = *(_OWORD *)v390;
  int v1239 = *((_DWORD *)v390 + 4);
  long long v1238 = v391;
  sub_110F60((uint64_t)&v1240, (uint64_t)(v390 + 3));
  memset(v1241, 0, sizeof(v1241));
  sub_A448((char *)v1241, (long long *)v390[8], (long long *)v390[9], 0xAAAAAAAAAAAAAAABLL * ((v390[9] - v390[8]) >> 3));
  sub_599C((int)v590, "ZBytesWrittenToMainMemory");
  uint64_t v392 = (uint64_t *)sub_5A9C((uint64_t)v590, 0xFu, 3, (uint64_t)sub_102C9C);
  uint64_t v393 = sub_5C60(v392, "Xcode Derived Counters");
  long long v394 = *(_OWORD *)v393;
  int v1243 = *((_DWORD *)v393 + 4);
  long long v1242 = v394;
  sub_110F60((uint64_t)&v1244, (uint64_t)(v393 + 3));
  memset(v1245, 0, sizeof(v1245));
  sub_A448((char *)v1245, (long long *)v393[8], (long long *)v393[9], 0xAAAAAAAAAAAAAAABLL * ((v393[9] - v393[8]) >> 3));
  sub_599C((int)v589, "CompressionRatioZTextureMemoryWritten");
  uint64_t v395 = (uint64_t *)sub_5A9C((uint64_t)v589, 0xFu, 3, (uint64_t)sub_102DF8);
  uint64_t v396 = sub_5C60(v395, "Xcode Derived Counters");
  long long v397 = *(_OWORD *)v396;
  int v1247 = *((_DWORD *)v396 + 4);
  long long v1246 = v397;
  sub_110F60((uint64_t)&v1248, (uint64_t)(v396 + 3));
  memset(v1249, 0, sizeof(v1249));
  sub_A448((char *)v1249, (long long *)v396[8], (long long *)v396[9], 0xAAAAAAAAAAAAAAABLL * ((v396[9] - v396[8]) >> 3));
  sub_599C((int)v588, "FragmentGeneratorPrimitiveProcessed");
  uint64_t v398 = (uint64_t *)sub_5A9C((uint64_t)v588, 0xFu, 3, (uint64_t)sub_102F44);
  uint64_t v399 = sub_5C60(v398, "Xcode Derived Counters");
  long long v400 = *(_OWORD *)v399;
  int v1251 = *((_DWORD *)v399 + 4);
  long long v1250 = v400;
  sub_110F60((uint64_t)&v1252, (uint64_t)(v399 + 3));
  memset(v1253, 0, sizeof(v1253));
  sub_A448((char *)v1253, (long long *)v399[8], (long long *)v399[9], 0xAAAAAAAAAAAAAAABLL * ((v399[9] - v399[8]) >> 3));
  sub_599C((int)v587, "FragmentQuadsProcessed");
  uint64_t v401 = (uint64_t *)sub_5A9C((uint64_t)v587, 0xFu, 3, (uint64_t)sub_102F9C);
  uint64_t v402 = sub_5C60(v401, "Xcode Derived Counters");
  long long v403 = *(_OWORD *)v402;
  int v1255 = *((_DWORD *)v402 + 4);
  long long v1254 = v403;
  sub_110F60((uint64_t)&v1256, (uint64_t)(v402 + 3));
  memset(v1257, 0, sizeof(v1257));
  sub_A448((char *)v1257, (long long *)v402[8], (long long *)v402[9], 0xAAAAAAAAAAAAAAABLL * ((v402[9] - v402[8]) >> 3));
  sub_599C((int)v586, "FragmentStoreBytes");
  uint64_t v404 = (uint64_t *)sub_5A9C((uint64_t)v586, 0xFu, 3, (uint64_t)sub_103040);
  uint64_t v405 = sub_5C60(v404, "Xcode Derived Counters");
  long long v406 = *(_OWORD *)v405;
  int v1259 = *((_DWORD *)v405 + 4);
  long long v1258 = v406;
  sub_110F60((uint64_t)&v1260, (uint64_t)(v405 + 3));
  memset(v1261, 0, sizeof(v1261));
  sub_A448((char *)v1261, (long long *)v405[8], (long long *)v405[9], 0xAAAAAAAAAAAAAAABLL * ((v405[9] - v405[8]) >> 3));
  sub_599C((int)v585, "PreCullPrimitiveCount");
  uint64_t v407 = (uint64_t *)sub_5A9C((uint64_t)v585, 0xFu, 3, (uint64_t)sub_1032E0);
  unint64_t v408 = sub_5C60(v407, "Xcode Derived Counters");
  long long v409 = *(_OWORD *)v408;
  int v1263 = *((_DWORD *)v408 + 4);
  long long v1262 = v409;
  sub_110F60((uint64_t)&v1264, (uint64_t)(v408 + 3));
  memset(v1265, 0, sizeof(v1265));
  sub_A448((char *)v1265, (long long *)v408[8], (long long *)v408[9], 0xAAAAAAAAAAAAAAABLL * ((v408[9] - v408[8]) >> 3));
  sub_599C((int)v584, "PrimitiveTileIntersections");
  unint64_t v410 = (uint64_t *)sub_5A9C((uint64_t)v584, 0xFu, 3, (uint64_t)sub_103338);
  uint64_t v411 = sub_5C60(v410, "Xcode Derived Counters");
  long long v412 = *(_OWORD *)v411;
  int v1267 = *((_DWORD *)v411 + 4);
  long long v1266 = v412;
  sub_110F60((uint64_t)&v1268, (uint64_t)(v411 + 3));
  memset(v1269, 0, sizeof(v1269));
  sub_A448((char *)v1269, (long long *)v411[8], (long long *)v411[9], 0xAAAAAAAAAAAAAAABLL * ((v411[9] - v411[8]) >> 3));
  sub_599C((int)v583, "TilerTilesProcessed");
  uint64_t v413 = (uint64_t *)sub_5A9C((uint64_t)v583, 0xFu, 3, (uint64_t)sub_103390);
  uint64_t v414 = sub_5C60(v413, "Xcode Derived Counters");
  long long v415 = *(_OWORD *)v414;
  int v1271 = *((_DWORD *)v414 + 4);
  long long v1270 = v415;
  sub_110F60((uint64_t)&v1272, (uint64_t)(v414 + 3));
  memset(v1273, 0, sizeof(v1273));
  sub_A448((char *)v1273, (long long *)v414[8], (long long *)v414[9], 0xAAAAAAAAAAAAAAABLL * ((v414[9] - v414[8]) >> 3));
  sub_599C((int)v582, "FragmentGeneratorTilesProcessed");
  int v416 = (uint64_t *)sub_5A9C((uint64_t)v582, 0xFu, 3, (uint64_t)sub_1033E8);
  uint64_t v417 = sub_5C60(v416, "Xcode Derived Counters");
  long long v418 = *(_OWORD *)v417;
  int v1275 = *((_DWORD *)v417 + 4);
  long long v1274 = v418;
  sub_110F60((uint64_t)&v1276, (uint64_t)(v417 + 3));
  memset(v1277, 0, sizeof(v1277));
  sub_A448((char *)v1277, (long long *)v417[8], (long long *)v417[9], 0xAAAAAAAAAAAAAAABLL * ((v417[9] - v417[8]) >> 3));
  sub_599C((int)v581, "TextureCacheMissCount");
  uint64_t v419 = (uint64_t *)sub_5A9C((uint64_t)v581, 0xFu, 3, (uint64_t)sub_103440);
  unint64_t v420 = sub_5C60(v419, "Xcode Derived Counters");
  long long v421 = *(_OWORD *)v420;
  int v1279 = *((_DWORD *)v420 + 4);
  long long v1278 = v421;
  sub_110F60((uint64_t)&v1280, (uint64_t)(v420 + 3));
  memset(v1281, 0, sizeof(v1281));
  sub_A448((char *)v1281, (long long *)v420[8], (long long *)v420[9], 0xAAAAAAAAAAAAAAABLL * ((v420[9] - v420[8]) >> 3));
  sub_599C((int)v580, "ZTextureBytesReadFromMainMemory");
  unint64_t v422 = (uint64_t *)sub_5A9C((uint64_t)v580, 0xFu, 3, (uint64_t)sub_103498);
  uint64_t v423 = sub_5C60(v422, "Xcode Derived Counters");
  long long v424 = *(_OWORD *)v423;
  int v1283 = *((_DWORD *)v423 + 4);
  long long v1282 = v424;
  sub_110F60((uint64_t)&v1284, (uint64_t)(v423 + 3));
  memset(v1285, 0, sizeof(v1285));
  sub_A448((char *)v1285, (long long *)v423[8], (long long *)v423[9], 0xAAAAAAAAAAAAAAABLL * ((v423[9] - v423[8]) >> 3));
  sub_599C((int)v579, "FragmentZLoadBytes");
  uint64_t v425 = (uint64_t *)sub_5A9C((uint64_t)v579, 0xFu, 3, (uint64_t)sub_103540);
  unint64_t v426 = sub_5C60(v425, "Xcode Derived Counters");
  long long v427 = *(_OWORD *)v426;
  int v1287 = *((_DWORD *)v426 + 4);
  long long v1286 = v427;
  sub_110F60((uint64_t)&v1288, (uint64_t)(v426 + 3));
  memset(v1289, 0, sizeof(v1289));
  sub_A448((char *)v1289, (long long *)v426[8], (long long *)v426[9], 0xAAAAAAAAAAAAAAABLL * ((v426[9] - v426[8]) >> 3));
  sub_599C((int)v578, "AveragePrimitiveProcessedPerTile");
  uint64_t v428 = (uint64_t *)sub_5A9C((uint64_t)v578, 0xFu, 3, (uint64_t)sub_1035F0);
  unint64_t v429 = sub_5C60(v428, "Xcode Derived Counters");
  long long v430 = *(_OWORD *)v429;
  int v1291 = *((_DWORD *)v429 + 4);
  long long v1290 = v430;
  sub_110F60((uint64_t)&v1292, (uint64_t)(v429 + 3));
  memset(v1293, 0, sizeof(v1293));
  sub_A448((char *)v1293, (long long *)v429[8], (long long *)v429[9], 0xAAAAAAAAAAAAAAABLL * ((v429[9] - v429[8]) >> 3));
  sub_599C((int)v577, "OpaqueFragmentQuadsProcessed");
  uint64_t v431 = (uint64_t *)sub_5A9C((uint64_t)v577, 0xFu, 3, (uint64_t)sub_1036B8);
  unint64_t v432 = sub_5C60(v431, "Xcode Derived Counters");
  long long v433 = *(_OWORD *)v432;
  int v1295 = *((_DWORD *)v432 + 4);
  long long v1294 = v433;
  sub_110F60((uint64_t)&v1296, (uint64_t)(v432 + 3));
  memset(v1297, 0, sizeof(v1297));
  sub_A448((char *)v1297, (long long *)v432[8], (long long *)v432[9], 0xAAAAAAAAAAAAAAABLL * ((v432[9] - v432[8]) >> 3));
  sub_599C((int)v576, "TranslucentFragmentQuadsProcessed");
  uint64_t v434 = (uint64_t *)sub_5A9C((uint64_t)v576, 0xFu, 3, (uint64_t)sub_103868);
  uint64_t v435 = sub_5C60(v434, "Xcode Derived Counters");
  long long v436 = *(_OWORD *)v435;
  int v1299 = *((_DWORD *)v435 + 4);
  long long v1298 = v436;
  sub_110F60((uint64_t)&v1300, (uint64_t)(v435 + 3));
  memset(v1301, 0, sizeof(v1301));
  sub_A448((char *)v1301, (long long *)v435[8], (long long *)v435[9], 0xAAAAAAAAAAAAAAABLL * ((v435[9] - v435[8]) >> 3));
  sub_599C((int)v575, "FeedBackFragmentQuadsProcessed");
  unint64_t v437 = (uint64_t *)sub_5A9C((uint64_t)v575, 0xFu, 3, (uint64_t)sub_103A18);
  uint64_t v438 = sub_5C60(v437, "Xcode Derived Counters");
  long long v439 = *(_OWORD *)v438;
  int v1303 = *((_DWORD *)v438 + 4);
  long long v1302 = v439;
  sub_110F60((uint64_t)&v1304, (uint64_t)(v438 + 3));
  memset(v1305, 0, sizeof(v1305));
  sub_A448((char *)v1305, (long long *)v438[8], (long long *)v438[9], 0xAAAAAAAAAAAAAAABLL * ((v438[9] - v438[8]) >> 3));
  sub_599C((int)v574, "TextureFilteringLimiter");
  int v440 = (uint64_t *)sub_5A9C((uint64_t)v574, 0xFu, 3, (uint64_t)sub_103C2C);
  uint64_t v441 = sub_5C60(v440, "Xcode Derived Counters");
  long long v442 = *(_OWORD *)v441;
  int v1307 = *((_DWORD *)v441 + 4);
  long long v1306 = v442;
  sub_110F60((uint64_t)&v1308, (uint64_t)(v441 + 3));
  memset(v1309, 0, sizeof(v1309));
  sub_A448((char *)v1309, (long long *)v441[8], (long long *)v441[9], 0xAAAAAAAAAAAAAAABLL * ((v441[9] - v441[8]) >> 3));
  sub_599C((int)v573, "TextureFilteringUtilization");
  uint64_t v443 = (uint64_t *)sub_5A9C((uint64_t)v573, 0xFu, 3, (uint64_t)sub_103DD0);
  unint64_t v444 = sub_5C60(v443, "Xcode Derived Counters");
  long long v445 = *(_OWORD *)v444;
  int v1311 = *((_DWORD *)v444 + 4);
  long long v1310 = v445;
  sub_110F60((uint64_t)&v1312, (uint64_t)(v444 + 3));
  memset(v1313, 0, sizeof(v1313));
  sub_A448((char *)v1313, (long long *)v444[8], (long long *)v444[9], 0xAAAAAAAAAAAAAAABLL * ((v444[9] - v444[8]) >> 3));
  sub_599C((int)v572, "TextureCacheUtilization");
  uint64_t v446 = (uint64_t *)sub_5A9C((uint64_t)v572, 0xFu, 3, (uint64_t)sub_103F74);
  uint64_t v447 = sub_5C60(v446, "Xcode Derived Counters");
  long long v448 = *(_OWORD *)v447;
  int v1315 = *((_DWORD *)v447 + 4);
  long long v1314 = v448;
  sub_110F60((uint64_t)&v1316, (uint64_t)(v447 + 3));
  memset(v1317, 0, sizeof(v1317));
  sub_A448((char *)v1317, (long long *)v447[8], (long long *)v447[9], 0xAAAAAAAAAAAAAAABLL * ((v447[9] - v447[8]) >> 3));
  sub_599C((int)v571, "TLBMissRate");
  unint64_t v449 = (uint64_t *)sub_5A9C((uint64_t)v571, 0xFu, 3, (uint64_t)sub_104118);
  unint64_t v450 = sub_5C60(v449, "Xcode Derived Counters");
  long long v451 = *(_OWORD *)v450;
  int v1319 = *((_DWORD *)v450 + 4);
  long long v1318 = v451;
  sub_110F60((uint64_t)&v1320, (uint64_t)(v450 + 3));
  memset(v1321, 0, sizeof(v1321));
  sub_A448((char *)v1321, (long long *)v450[8], (long long *)v450[9], 0xAAAAAAAAAAAAAAABLL * ((v450[9] - v450[8]) >> 3));
  sub_599C((int)v570, "TilingBlockLimiter");
  uint64_t v452 = (uint64_t *)sub_5A9C((uint64_t)v570, 0xFu, 3, (uint64_t)sub_1042A4);
  unint64_t v453 = sub_5C60(v452, "Xcode Derived Counters");
  long long v454 = *(_OWORD *)v453;
  int v1323 = *((_DWORD *)v453 + 4);
  long long v1322 = v454;
  sub_110F60((uint64_t)&v1324, (uint64_t)(v453 + 3));
  memset(v1325, 0, sizeof(v1325));
  sub_A448((char *)v1325, (long long *)v453[8], (long long *)v453[9], 0xAAAAAAAAAAAAAAABLL * ((v453[9] - v453[8]) >> 3));
  sub_599C((int)v569, "PrimitiveBlocksWriteLimiter");
  uint64_t v455 = (uint64_t *)sub_5A9C((uint64_t)v569, 0xFu, 3, (uint64_t)sub_1044B8);
  unint64_t v456 = sub_5C60(v455, "Xcode Derived Counters");
  long long v457 = *(_OWORD *)v456;
  int v1327 = *((_DWORD *)v456 + 4);
  long long v1326 = v457;
  sub_110F60((uint64_t)&v1328, (uint64_t)(v456 + 3));
  memset(v1329, 0, sizeof(v1329));
  sub_A448((char *)v1329, (long long *)v456[8], (long long *)v456[9], 0xAAAAAAAAAAAAAAABLL * ((v456[9] - v456[8]) >> 3));
  sub_599C((int)v568, "ShadedVertexReadLimiter");
  unint64_t v458 = (uint64_t *)sub_5A9C((uint64_t)v568, 0xFu, 3, (uint64_t)sub_1046CC);
  unint64_t v459 = sub_5C60(v458, "Xcode Derived Counters");
  long long v460 = *(_OWORD *)v459;
  int v1331 = *((_DWORD *)v459 + 4);
  long long v1330 = v460;
  sub_110F60((uint64_t)&v1332, (uint64_t)(v459 + 3));
  memset(v1333, 0, sizeof(v1333));
  sub_A448((char *)v1333, (long long *)v459[8], (long long *)v459[9], 0xAAAAAAAAAAAAAAABLL * ((v459[9] - v459[8]) >> 3));
  sub_599C((int)v567, "PrimitiveCullLimiter");
  uint64_t v461 = (uint64_t *)sub_5A9C((uint64_t)v567, 0xFu, 3, (uint64_t)sub_104840);
  uint64_t v462 = sub_5C60(v461, "Xcode Derived Counters");
  long long v463 = *(_OWORD *)v462;
  int v1335 = *((_DWORD *)v462 + 4);
  long long v1334 = v463;
  sub_110F60((uint64_t)&v1336, (uint64_t)(v462 + 3));
  memset(v1337, 0, sizeof(v1337));
  sub_A448((char *)v1337, (long long *)v462[8], (long long *)v462[9], 0xAAAAAAAAAAAAAAABLL * ((v462[9] - v462[8]) >> 3));
  sub_599C((int)v566, "PrimitiveClipLimiter");
  int v464 = (uint64_t *)sub_5A9C((uint64_t)v566, 0xFu, 3, (uint64_t)sub_1049F4);
  uint64_t v465 = sub_5C60(v464, "Xcode Derived Counters");
  long long v466 = *(_OWORD *)v465;
  int v1339 = *((_DWORD *)v465 + 4);
  long long v1338 = v466;
  sub_110F60((uint64_t)&v1340, (uint64_t)(v465 + 3));
  memset(v1341, 0, sizeof(v1341));
  sub_A448((char *)v1341, (long long *)v465[8], (long long *)v465[9], 0xAAAAAAAAAAAAAAABLL * ((v465[9] - v465[8]) >> 3));
  sub_599C((int)v565, "MMUTLBRequests");
  unint64_t v467 = (uint64_t *)sub_5A9C((uint64_t)v565, 0xFu, 3, (uint64_t)sub_104BA8);
  unint64_t v468 = sub_5C60(v467, "Xcode Derived Counters");
  long long v469 = *(_OWORD *)v468;
  int v1343 = *((_DWORD *)v468 + 4);
  long long v1342 = v469;
  sub_110F60((uint64_t)&v1344, (uint64_t)(v468 + 3));
  memset(v1345, 0, sizeof(v1345));
  sub_A448((char *)v1345, (long long *)v468[8], (long long *)v468[9], 0xAAAAAAAAAAAAAAABLL * ((v468[9] - v468[8]) >> 3));
  sub_599C((int)v564, "MMUTLBHits");
  uint64_t v470 = (uint64_t *)sub_5A9C((uint64_t)v564, 0xFu, 3, (uint64_t)sub_104C00);
  unint64_t v471 = sub_5C60(v470, "Xcode Derived Counters");
  long long v472 = *(_OWORD *)v471;
  int v1347 = *((_DWORD *)v471 + 4);
  long long v1346 = v472;
  sub_110F60((uint64_t)&v1348, (uint64_t)(v471 + 3));
  memset(v1349, 0, sizeof(v1349));
  sub_A448((char *)v1349, (long long *)v471[8], (long long *)v471[9], 0xAAAAAAAAAAAAAAABLL * ((v471[9] - v471[8]) >> 3));
  sub_599C((int)v563, "MMUTLBMissRate");
  unint64_t v473 = (uint64_t *)sub_5A9C((uint64_t)v563, 0xFu, 3, (uint64_t)sub_104C58);
  uint64_t v474 = sub_5C60(v473, "Xcode Derived Counters");
  long long v475 = *(_OWORD *)v474;
  int v1351 = *((_DWORD *)v474 + 4);
  long long v1350 = v475;
  sub_110F60((uint64_t)&v1352, (uint64_t)(v474 + 3));
  memset(v1353, 0, sizeof(v1353));
  sub_A448((char *)v1353, (long long *)v474[8], (long long *)v474[9], 0xAAAAAAAAAAAAAAABLL * ((v474[9] - v474[8]) >> 3));
  sub_599C((int)v562, "MissBufferFullStallRatio");
  uint64_t v476 = (uint64_t *)sub_5A9C((uint64_t)v562, 0xFu, 3, (uint64_t)sub_104ECC);
  uint64_t v477 = sub_5C60(v476, "Xcode Derived Counters");
  long long v478 = *(_OWORD *)v477;
  int v1355 = *((_DWORD *)v477 + 4);
  long long v1354 = v478;
  sub_110F60((uint64_t)&v1356, (uint64_t)(v477 + 3));
  memset(v1357, 0, sizeof(v1357));
  sub_A448((char *)v1357, (long long *)v477[8], (long long *)v477[9], 0xAAAAAAAAAAAAAAABLL * ((v477[9] - v477[8]) >> 3));
  sub_599C((int)v561, "RasterizedFragmentsPerTriangle");
  unint64_t v479 = (uint64_t *)sub_5A9C((uint64_t)v561, 0xFu, 3, (uint64_t)sub_105018);
  unint64_t v480 = sub_5C60(v479, "Xcode Derived Counters");
  long long v481 = *(_OWORD *)v480;
  int v1359 = *((_DWORD *)v480 + 4);
  long long v1358 = v481;
  sub_110F60((uint64_t)&v1360, (uint64_t)(v480 + 3));
  memset(v1361, 0, sizeof(v1361));
  sub_A448((char *)v1361, (long long *)v480[8], (long long *)v480[9], 0xAAAAAAAAAAAAAAABLL * ((v480[9] - v480[8]) >> 3));
  sub_599C((int)v560, "ALUInstructions");
  uint64_t v482 = (uint64_t *)sub_5A9C((uint64_t)v560, 0xFu, 3, (uint64_t)sub_105164);
  uint64_t v483 = sub_5C60(v482, "Xcode Derived Counters");
  long long v484 = *(_OWORD *)v483;
  int v1363 = *((_DWORD *)v483 + 4);
  long long v1362 = v484;
  sub_110F60((uint64_t)&v1364, (uint64_t)(v483 + 3));
  memset(v1365, 0, sizeof(v1365));
  sub_A448((char *)v1365, (long long *)v483[8], (long long *)v483[9], 0xAAAAAAAAAAAAAAABLL * ((v483[9] - v483[8]) >> 3));
  sub_599C((int)v559, "VerticesPerNSec");
  uint64_t v485 = (uint64_t *)sub_5A9C((uint64_t)v559, 0xFu, 3, (uint64_t)sub_1053AC);
  int v486 = sub_5C60(v485, "Xcode Derived Counters");
  long long v487 = *(_OWORD *)v486;
  int v1367 = *((_DWORD *)v486 + 4);
  long long v1366 = v487;
  sub_110F60((uint64_t)&v1368, (uint64_t)(v486 + 3));
  memset(v1369, 0, sizeof(v1369));
  sub_A448((char *)v1369, (long long *)v486[8], (long long *)v486[9], 0xAAAAAAAAAAAAAAABLL * ((v486[9] - v486[8]) >> 3));
  sub_599C((int)v558, "PredicatedALUPercentage");
  uint64_t v488 = (uint64_t *)sub_5A9C((uint64_t)v558, 0xFu, 3, (uint64_t)sub_105504);
  unint64_t v489 = sub_5C60(v488, "Xcode Derived Counters");
  long long v490 = *(_OWORD *)v489;
  int v1371 = *((_DWORD *)v489 + 4);
  long long v1370 = v490;
  sub_110F60((uint64_t)&v1372, (uint64_t)(v489 + 3));
  memset(v1373, 0, sizeof(v1373));
  sub_A448((char *)v1373, (long long *)v489[8], (long long *)v489[9], 0xAAAAAAAAAAAAAAABLL * ((v489[9] - v489[8]) >> 3));
  sub_599C((int)v557, "ALUF32");
  unint64_t v491 = (uint64_t *)sub_5A9C((uint64_t)v557, 0xFu, 3, (uint64_t)sub_1057F4);
  uint64_t v492 = sub_5C60(v491, "Xcode Derived Counters");
  long long v493 = *(_OWORD *)v492;
  int v1375 = *((_DWORD *)v492 + 4);
  long long v1374 = v493;
  sub_110F60((uint64_t)&v1376, (uint64_t)(v492 + 3));
  memset(v1377, 0, sizeof(v1377));
  sub_A448((char *)v1377, (long long *)v492[8], (long long *)v492[9], 0xAAAAAAAAAAAAAAABLL * ((v492[9] - v492[8]) >> 3));
  sub_599C((int)v556, "ALUF16");
  unint64_t v494 = (uint64_t *)sub_5A9C((uint64_t)v556, 0xFu, 3, (uint64_t)sub_10584C);
  unint64_t v495 = sub_5C60(v494, "Xcode Derived Counters");
  long long v496 = *(_OWORD *)v495;
  int v1379 = *((_DWORD *)v495 + 4);
  long long v1378 = v496;
  sub_110F60((uint64_t)&v1380, (uint64_t)(v495 + 3));
  memset(v1381, 0, sizeof(v1381));
  sub_A448((char *)v1381, (long long *)v495[8], (long long *)v495[9], 0xAAAAAAAAAAAAAAABLL * ((v495[9] - v495[8]) >> 3));
  sub_599C((int)v555, "ALUInt32AndCond");
  unint64_t v497 = (uint64_t *)sub_5A9C((uint64_t)v555, 0xFu, 3, (uint64_t)sub_1058A4);
  uint64_t v498 = sub_5C60(v497, "Xcode Derived Counters");
  long long v499 = *(_OWORD *)v498;
  int v1383 = *((_DWORD *)v498 + 4);
  long long v1382 = v499;
  sub_110F60((uint64_t)&v1384, (uint64_t)(v498 + 3));
  memset(v1385, 0, sizeof(v1385));
  sub_A448((char *)v1385, (long long *)v498[8], (long long *)v498[9], 0xAAAAAAAAAAAAAAABLL * ((v498[9] - v498[8]) >> 3));
  sub_599C((int)v554, "ALUIntAndComplex");
  unint64_t v500 = (uint64_t *)sub_5A9C((uint64_t)v554, 0xFu, 3, (uint64_t)sub_1058FC);
  unint64_t v501 = sub_5C60(v500, "Xcode Derived Counters");
  long long v502 = *(_OWORD *)v501;
  int v1387 = *((_DWORD *)v501 + 4);
  long long v1386 = v502;
  sub_110F60((uint64_t)&v1388, (uint64_t)(v501 + 3));
  memset(v1389, 0, sizeof(v1389));
  sub_A448((char *)v1389, (long long *)v501[8], (long long *)v501[9], 0xAAAAAAAAAAAAAAABLL * ((v501[9] - v501[8]) >> 3));
  sub_599C((int)v553, "ALUF32Issued");
  unint64_t v503 = (uint64_t *)sub_5A9C((uint64_t)v553, 0xFu, 3, (uint64_t)sub_105954);
  unint64_t v504 = sub_5C60(v503, "Xcode Derived Counters");
  long long v505 = *(_OWORD *)v504;
  int v1391 = *((_DWORD *)v504 + 4);
  long long v1390 = v505;
  sub_110F60((uint64_t)&v1392, (uint64_t)(v504 + 3));
  memset(v1393, 0, sizeof(v1393));
  sub_A448((char *)v1393, (long long *)v504[8], (long long *)v504[9], 0xAAAAAAAAAAAAAAABLL * ((v504[9] - v504[8]) >> 3));
  sub_599C((int)v552, "ALUF16Issued");
  uint64_t v506 = (uint64_t *)sub_5A9C((uint64_t)v552, 0xFu, 3, (uint64_t)sub_105A40);
  uint64_t v507 = sub_5C60(v506, "Xcode Derived Counters");
  long long v508 = *(_OWORD *)v507;
  int v1395 = *((_DWORD *)v507 + 4);
  long long v1394 = v508;
  sub_110F60((uint64_t)&v1396, (uint64_t)(v507 + 3));
  memset(v1397, 0, sizeof(v1397));
  sub_A448((char *)v1397, (long long *)v507[8], (long long *)v507[9], 0xAAAAAAAAAAAAAAABLL * ((v507[9] - v507[8]) >> 3));
  sub_599C((int)v551, "ALUInt32AndCondIssued");
  unint64_t v509 = (uint64_t *)sub_5A9C((uint64_t)v551, 0xFu, 3, (uint64_t)sub_105B2C);
  uint64_t v510 = sub_5C60(v509, "Xcode Derived Counters");
  long long v511 = *(_OWORD *)v510;
  int v1399 = *((_DWORD *)v510 + 4);
  long long v1398 = v511;
  sub_110F60((uint64_t)&v1400, (uint64_t)(v510 + 3));
  memset(v1401, 0, sizeof(v1401));
  sub_A448((char *)v1401, (long long *)v510[8], (long long *)v510[9], 0xAAAAAAAAAAAAAAABLL * ((v510[9] - v510[8]) >> 3));
  sub_599C((int)v550, "ALUIntAndComplexIssued");
  unint64_t v512 = (uint64_t *)sub_5A9C((uint64_t)v550, 0xFu, 3, (uint64_t)sub_105C18);
  unint64_t v513 = sub_5C60(v512, "Xcode Derived Counters");
  long long v514 = *(_OWORD *)v513;
  int v1403 = *((_DWORD *)v513 + 4);
  long long v1402 = v514;
  sub_110F60((uint64_t)&v1404, (uint64_t)(v513 + 3));
  memset(v1405, 0, sizeof(v1405));
  sub_A448((char *)v1405, (long long *)v513[8], (long long *)v513[9], 0xAAAAAAAAAAAAAAABLL * ((v513[9] - v513[8]) >> 3));
  sub_599C((int)v549, "CFIssued");
  unint64_t v515 = (uint64_t *)sub_5A9C((uint64_t)v549, 0xFu, 3, (uint64_t)sub_105D40);
  unint64_t v516 = sub_5C60(v515, "Xcode Derived Counters");
  long long v517 = *(_OWORD *)v516;
  int v1407 = *((_DWORD *)v516 + 4);
  long long v1406 = v517;
  sub_110F60((uint64_t)&v1408, (uint64_t)(v516 + 3));
  memset(v1409, 0, sizeof(v1409));
  sub_A448((char *)v1409, (long long *)v516[8], (long long *)v516[9], 0xAAAAAAAAAAAAAAABLL * ((v516[9] - v516[8]) >> 3));
  sub_599C((int)v548, "ALUPerformance");
  unsigned int v518 = (uint64_t *)sub_5A9C((uint64_t)v548, 0xFu, 3, (uint64_t)sub_105E2C);
  unint64_t v519 = sub_5C60(v518, "Xcode Derived Counters");
  long long v520 = *(_OWORD *)v519;
  int v1411 = *((_DWORD *)v519 + 4);
  long long v1410 = v520;
  sub_110F60((uint64_t)&v1412, (uint64_t)(v519 + 3));
  memset(v1413, 0, sizeof(v1413));
  sub_A448((char *)v1413, (long long *)v519[8], (long long *)v519[9], 0xAAAAAAAAAAAAAAABLL * ((v519[9] - v519[8]) >> 3));
  sub_599C((int)v547, "ALUF32Percent");
  uint64_t v521 = (uint64_t *)sub_5A9C((uint64_t)v547, 0xFu, 3, (uint64_t)sub_105F78);
  unint64_t v522 = sub_5C60(v521, "Xcode Derived Counters");
  long long v523 = *(_OWORD *)v522;
  int v1415 = *((_DWORD *)v522 + 4);
  long long v1414 = v523;
  sub_110F60((uint64_t)&v1416, (uint64_t)(v522 + 3));
  memset(v1417, 0, sizeof(v1417));
  sub_A448((char *)v1417, (long long *)v522[8], (long long *)v522[9], 0xAAAAAAAAAAAAAAABLL * ((v522[9] - v522[8]) >> 3));
  sub_599C((int)v546, "ALUF16Percent");
  unint64_t v524 = (uint64_t *)sub_5A9C((uint64_t)v546, 0xFu, 3, (uint64_t)sub_106088);
  unint64_t v525 = sub_5C60(v524, "Xcode Derived Counters");
  long long v526 = *(_OWORD *)v525;
  int v1419 = *((_DWORD *)v525 + 4);
  long long v1418 = v526;
  sub_110F60((uint64_t)&v1420, (uint64_t)(v525 + 3));
  memset(v1421, 0, sizeof(v1421));
  sub_A448((char *)v1421, (long long *)v525[8], (long long *)v525[9], 0xAAAAAAAAAAAAAAABLL * ((v525[9] - v525[8]) >> 3));
  sub_599C((int)v545, "ALUSCIBPercent");
  uint64_t v527 = (uint64_t *)sub_5A9C((uint64_t)v545, 0xFu, 3, (uint64_t)sub_106198);
  uint64_t v528 = sub_5C60(v527, "Xcode Derived Counters");
  long long v529 = *(_OWORD *)v528;
  int v1423 = *((_DWORD *)v528 + 4);
  long long v1422 = v529;
  sub_110F60((uint64_t)&v1424, (uint64_t)(v528 + 3));
  memset(v1425, 0, sizeof(v1425));
  sub_A448((char *)v1425, (long long *)v528[8], (long long *)v528[9], 0xAAAAAAAAAAAAAAABLL * ((v528[9] - v528[8]) >> 3));
  sub_599C((int)v544, "ALUICPercent");
  int v530 = (uint64_t *)sub_5A9C((uint64_t)v544, 0xFu, 3, (uint64_t)sub_1062A8);
  unint64_t v531 = sub_5C60(v530, "Xcode Derived Counters");
  long long v532 = *(_OWORD *)v531;
  int v1427 = *((_DWORD *)v531 + 4);
  long long v1426 = v532;
  sub_110F60((uint64_t)&v1428, (uint64_t)(v531 + 3));
  memset(v1429, 0, sizeof(v1429));
  sub_A448((char *)v1429, (long long *)v531[8], (long long *)v531[9], 0xAAAAAAAAAAAAAAABLL * ((v531[9] - v531[8]) >> 3));
  sub_599C((int)v543, "CFInstructions");
  unsigned int v533 = (uint64_t *)sub_5A9C((uint64_t)v543, 0xFu, 3, (uint64_t)sub_106400);
  unint64_t v534 = sub_5C60(v533, "Xcode Derived Counters");
  long long v535 = *(_OWORD *)v534;
  int v1431 = *((_DWORD *)v534 + 4);
  long long v1430 = v535;
  sub_110F60((uint64_t)&v1432, (uint64_t)(v534 + 3));
  memset(v1433, 0, sizeof(v1433));
  sub_A448((char *)v1433, (long long *)v534[8], (long long *)v534[9], 0xAAAAAAAAAAAAAAABLL * ((v534[9] - v534[8]) >> 3));
  sub_599C((int)v542, "AGenInstructions");
  uint64_t v536 = (uint64_t *)sub_5A9C((uint64_t)v542, 0xFu, 3, (uint64_t)sub_1064CC);
  unint64_t v537 = sub_5C60(v536, "Xcode Derived Counters");
  long long v538 = *(_OWORD *)v537;
  int v1435 = *((_DWORD *)v537 + 4);
  long long v1434 = v538;
  sub_110F60((uint64_t)&v1436, (uint64_t)(v537 + 3));
  memset(v1437, 0, sizeof(v1437));
  sub_A448((char *)v1437, (long long *)v537[8], (long long *)v537[9], 0xAAAAAAAAAAAAAAABLL * ((v537[9] - v537[8]) >> 3));
  void *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  v720[11] = v1;
  char v721 = 0;
  unint64_t v539 = (char *)operator new(0x3D88uLL);
  void *v1 = v539;
  v1[1] = v539;
  v1[2] = v539 + 15752;
  uint64_t v540 = 0;
  v1[1] = sub_111200((uint64_t)(v1 + 2), (uint64_t)&v722, (uint64_t)&v1438, (uint64_t)v539);
  do
  {
    sub_5A38((uint64_t)&v1434 + v540);
    v540 -= 88;
  }
  while (v540 != -15752);
  sub_5A38((uint64_t)v542);
  sub_5A38((uint64_t)v543);
  sub_5A38((uint64_t)v544);
  sub_5A38((uint64_t)v545);
  sub_5A38((uint64_t)v546);
  sub_5A38((uint64_t)v547);
  sub_5A38((uint64_t)v548);
  sub_5A38((uint64_t)v549);
  sub_5A38((uint64_t)v550);
  sub_5A38((uint64_t)v551);
  sub_5A38((uint64_t)v552);
  sub_5A38((uint64_t)v553);
  sub_5A38((uint64_t)v554);
  sub_5A38((uint64_t)v555);
  sub_5A38((uint64_t)v556);
  sub_5A38((uint64_t)v557);
  sub_5A38((uint64_t)v558);
  sub_5A38((uint64_t)v559);
  sub_5A38((uint64_t)v560);
  sub_5A38((uint64_t)v561);
  sub_5A38((uint64_t)v562);
  sub_5A38((uint64_t)v563);
  sub_5A38((uint64_t)v564);
  sub_5A38((uint64_t)v565);
  sub_5A38((uint64_t)v566);
  sub_5A38((uint64_t)v567);
  sub_5A38((uint64_t)v568);
  sub_5A38((uint64_t)v569);
  sub_5A38((uint64_t)v570);
  sub_5A38((uint64_t)v571);
  sub_5A38((uint64_t)v572);
  sub_5A38((uint64_t)v573);
  sub_5A38((uint64_t)v574);
  sub_5A38((uint64_t)v575);
  sub_5A38((uint64_t)v576);
  sub_5A38((uint64_t)v577);
  sub_5A38((uint64_t)v578);
  sub_5A38((uint64_t)v579);
  sub_5A38((uint64_t)v580);
  sub_5A38((uint64_t)v581);
  sub_5A38((uint64_t)v582);
  sub_5A38((uint64_t)v583);
  sub_5A38((uint64_t)v584);
  sub_5A38((uint64_t)v585);
  sub_5A38((uint64_t)v586);
  sub_5A38((uint64_t)v587);
  sub_5A38((uint64_t)v588);
  sub_5A38((uint64_t)v589);
  sub_5A38((uint64_t)v590);
  sub_5A38((uint64_t)v591);
  sub_5A38((uint64_t)v592);
  sub_5A38((uint64_t)v593);
  sub_5A38((uint64_t)v594);
  sub_5A38((uint64_t)v595);
  sub_5A38((uint64_t)v596);
  sub_5A38((uint64_t)v597);
  sub_5A38((uint64_t)v598);
  sub_5A38((uint64_t)v599);
  sub_5A38((uint64_t)v600);
  sub_5A38((uint64_t)v601);
  sub_5A38((uint64_t)v602);
  sub_5A38((uint64_t)v603);
  sub_5A38((uint64_t)v604);
  sub_5A38((uint64_t)v605);
  sub_5A38((uint64_t)v606);
  sub_5A38((uint64_t)v607);
  sub_5A38((uint64_t)v608);
  sub_5A38((uint64_t)v609);
  sub_5A38((uint64_t)v610);
  sub_5A38((uint64_t)v611);
  sub_5A38((uint64_t)v612);
  sub_5A38((uint64_t)v613);
  sub_5A38((uint64_t)v614);
  sub_5A38((uint64_t)v615);
  sub_5A38((uint64_t)v616);
  sub_5A38((uint64_t)v617);
  sub_5A38((uint64_t)v618);
  sub_5A38((uint64_t)v619);
  sub_5A38((uint64_t)v620);
  sub_5A38((uint64_t)v621);
  sub_5A38((uint64_t)v622);
  sub_5A38((uint64_t)v623);
  sub_5A38((uint64_t)v624);
  sub_5A38((uint64_t)v625);
  sub_5A38((uint64_t)v626);
  sub_5A38((uint64_t)v627);
  sub_5A38((uint64_t)v628);
  sub_5A38((uint64_t)v629);
  sub_5A38((uint64_t)v630);
  sub_5A38((uint64_t)v631);
  sub_5A38((uint64_t)v632);
  sub_5A38((uint64_t)v633);
  sub_5A38((uint64_t)v634);
  sub_5A38((uint64_t)v635);
  sub_5A38((uint64_t)v636);
  sub_5A38((uint64_t)v637);
  sub_5A38((uint64_t)v638);
  sub_5A38((uint64_t)v639);
  sub_5A38((uint64_t)v640);
  sub_5A38((uint64_t)v641);
  sub_5A38((uint64_t)v642);
  sub_5A38((uint64_t)v643);
  sub_5A38((uint64_t)v644);
  sub_5A38((uint64_t)v645);
  sub_5A38((uint64_t)v646);
  sub_5A38((uint64_t)v647);
  sub_5A38((uint64_t)v648);
  sub_5A38((uint64_t)v649);
  sub_5A38((uint64_t)v650);
  sub_5A38((uint64_t)v651);
  sub_5A38((uint64_t)v652);
  sub_5A38((uint64_t)v653);
  sub_5A38((uint64_t)v654);
  sub_5A38((uint64_t)v655);
  sub_5A38((uint64_t)v656);
  sub_5A38((uint64_t)v657);
  sub_5A38((uint64_t)v658);
  sub_5A38((uint64_t)v659);
  sub_5A38((uint64_t)v660);
  sub_5A38((uint64_t)v661);
  sub_5A38((uint64_t)v662);
  sub_5A38((uint64_t)v663);
  sub_5A38((uint64_t)v664);
  sub_5A38((uint64_t)v665);
  sub_5A38((uint64_t)v666);
  sub_5A38((uint64_t)v667);
  sub_5A38((uint64_t)v668);
  sub_5A38((uint64_t)v669);
  sub_5A38((uint64_t)v670);
  sub_5A38((uint64_t)v671);
  sub_5A38((uint64_t)v672);
  sub_5A38((uint64_t)v673);
  sub_5A38((uint64_t)v674);
  sub_5A38((uint64_t)v675);
  sub_5A38((uint64_t)v676);
  sub_5A38((uint64_t)v677);
  sub_5A38((uint64_t)v678);
  sub_5A38((uint64_t)v679);
  sub_5A38((uint64_t)v680);
  sub_5A38((uint64_t)v681);
  sub_5A38((uint64_t)v682);
  sub_5A38((uint64_t)v683);
  sub_5A38((uint64_t)v684);
  sub_5A38((uint64_t)v685);
  sub_5A38((uint64_t)v686);
  sub_5A38((uint64_t)v687);
  sub_5A38((uint64_t)v688);
  sub_5A38((uint64_t)v689);
  sub_5A38((uint64_t)v690);
  sub_5A38((uint64_t)v691);
  sub_5A38((uint64_t)v692);
  sub_5A38((uint64_t)v693);
  sub_5A38((uint64_t)v694);
  sub_5A38((uint64_t)v695);
  sub_5A38((uint64_t)v696);
  sub_5A38((uint64_t)v697);
  sub_5A38((uint64_t)v698);
  sub_5A38((uint64_t)v699);
  sub_5A38((uint64_t)v700);
  sub_5A38((uint64_t)v701);
  sub_5A38((uint64_t)v702);
  sub_5A38((uint64_t)v703);
  sub_5A38((uint64_t)v704);
  sub_5A38((uint64_t)v705);
  sub_5A38((uint64_t)v706);
  sub_5A38((uint64_t)v707);
  sub_5A38((uint64_t)v708);
  sub_5A38((uint64_t)v709);
  sub_5A38((uint64_t)v710);
  sub_5A38((uint64_t)v711);
  sub_5A38((uint64_t)v712);
  sub_5A38((uint64_t)v713);
  sub_5A38((uint64_t)v714);
  sub_5A38((uint64_t)v715);
  sub_5A38((uint64_t)v716);
  sub_5A38((uint64_t)v717);
  sub_5A38((uint64_t)v718);
  sub_5A38((uint64_t)v719);
  return sub_5A38((uint64_t)v720);
}

void sub_10F0C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  *(void *)(v65 + 8) = v66;
  sub_D2A4((void ***)&STACK[0x3D90]);
  uint64_t v69 = -15752;
  uint64_t v70 = v67;
  do
  {
    uint64_t v70 = sub_5A38(v70) - 88;
    v69 += 88;
  }
  while (v69);
  sub_5A38((uint64_t)&a10);
  sub_5A38((uint64_t)&a21);
  sub_5A38((uint64_t)&a32);
  sub_5A38((uint64_t)&a43);
  sub_5A38((uint64_t)&a54);
  sub_5A38((uint64_t)&a65);
  sub_5A38((uint64_t)&STACK[0x218]);
  sub_5A38((uint64_t)&STACK[0x270]);
  sub_5A38((uint64_t)&STACK[0x2C8]);
  sub_5A38((uint64_t)&STACK[0x320]);
  sub_5A38((uint64_t)&STACK[0x378]);
  sub_5A38((uint64_t)&STACK[0x3D0]);
  sub_5A38((uint64_t)&STACK[0x428]);
  sub_5A38((uint64_t)&STACK[0x480]);
  sub_5A38((uint64_t)&STACK[0x4D8]);
  sub_5A38((uint64_t)&STACK[0x530]);
  sub_5A38((uint64_t)&STACK[0x588]);
  sub_5A38((uint64_t)&STACK[0x5E0]);
  sub_5A38((uint64_t)&STACK[0x638]);
  sub_5A38((uint64_t)&STACK[0x690]);
  sub_5A38((uint64_t)&STACK[0x6E8]);
  sub_5A38((uint64_t)&STACK[0x740]);
  sub_5A38((uint64_t)&STACK[0x798]);
  sub_5A38((uint64_t)&STACK[0x7F0]);
  sub_5A38((uint64_t)&STACK[0x848]);
  sub_5A38((uint64_t)&STACK[0x8A0]);
  sub_5A38((uint64_t)&STACK[0x8F8]);
  sub_5A38((uint64_t)&STACK[0x950]);
  sub_5A38((uint64_t)&STACK[0x9A8]);
  sub_5A38((uint64_t)&STACK[0xA00]);
  sub_5A38((uint64_t)&STACK[0xA58]);
  sub_5A38((uint64_t)&STACK[0xAB0]);
  sub_5A38((uint64_t)&STACK[0xB08]);
  sub_5A38((uint64_t)&STACK[0xB60]);
  sub_5A38((uint64_t)&STACK[0xBB8]);
  sub_5A38((uint64_t)&STACK[0xC10]);
  sub_5A38((uint64_t)&STACK[0xC68]);
  sub_5A38((uint64_t)&STACK[0xCC0]);
  sub_5A38((uint64_t)&STACK[0xD18]);
  sub_5A38((uint64_t)&STACK[0xD70]);
  sub_5A38((uint64_t)&STACK[0xDC8]);
  sub_5A38((uint64_t)&STACK[0xE20]);
  sub_5A38((uint64_t)&STACK[0xE78]);
  sub_5A38((uint64_t)&STACK[0xED0]);
  sub_5A38((uint64_t)&STACK[0xF28]);
  sub_5A38((uint64_t)&STACK[0xF80]);
  sub_5A38((uint64_t)&STACK[0xFD8]);
  sub_5A38((uint64_t)&STACK[0x1030]);
  sub_5A38((uint64_t)&STACK[0x1088]);
  sub_5A38((uint64_t)&STACK[0x10E0]);
  sub_5A38((uint64_t)&STACK[0x1138]);
  sub_5A38((uint64_t)&STACK[0x1190]);
  sub_5A38((uint64_t)&STACK[0x11E8]);
  sub_5A38((uint64_t)&STACK[0x1240]);
  sub_5A38((uint64_t)&STACK[0x1298]);
  sub_5A38((uint64_t)&STACK[0x12F0]);
  sub_5A38((uint64_t)&STACK[0x1348]);
  sub_5A38((uint64_t)&STACK[0x13A0]);
  sub_5A38((uint64_t)&STACK[0x13F8]);
  sub_5A38((uint64_t)&STACK[0x1450]);
  sub_5A38((uint64_t)&STACK[0x14A8]);
  sub_5A38((uint64_t)&STACK[0x1500]);
  sub_5A38((uint64_t)&STACK[0x1558]);
  sub_5A38((uint64_t)&STACK[0x15B0]);
  sub_5A38((uint64_t)&STACK[0x1608]);
  sub_5A38((uint64_t)&STACK[0x1660]);
  sub_5A38((uint64_t)&STACK[0x16B8]);
  sub_5A38((uint64_t)&STACK[0x1710]);
  sub_5A38((uint64_t)&STACK[0x1768]);
  sub_5A38((uint64_t)&STACK[0x17C0]);
  sub_5A38((uint64_t)&STACK[0x1818]);
  sub_5A38((uint64_t)&STACK[0x1870]);
  sub_5A38((uint64_t)&STACK[0x18C8]);
  sub_5A38((uint64_t)&STACK[0x1920]);
  sub_5A38((uint64_t)&STACK[0x1978]);
  sub_5A38((uint64_t)&STACK[0x19D0]);
  sub_5A38((uint64_t)&STACK[0x1A28]);
  sub_5A38((uint64_t)&STACK[0x1A80]);
  sub_5A38((uint64_t)&STACK[0x1AD8]);
  sub_5A38((uint64_t)&STACK[0x1B30]);
  sub_5A38((uint64_t)&STACK[0x1B88]);
  sub_5A38((uint64_t)&STACK[0x1BE0]);
  sub_5A38((uint64_t)&STACK[0x1C38]);
  sub_5A38((uint64_t)&STACK[0x1C90]);
  sub_5A38((uint64_t)&STACK[0x1CE8]);
  sub_5A38((uint64_t)&STACK[0x1D40]);
  sub_5A38((uint64_t)&STACK[0x1D98]);
  sub_5A38((uint64_t)&STACK[0x1DF0]);
  sub_5A38((uint64_t)&STACK[0x1E48]);
  sub_5A38((uint64_t)&STACK[0x1EA0]);
  sub_5A38((uint64_t)&STACK[0x1EF8]);
  sub_5A38((uint64_t)&STACK[0x1F50]);
  sub_5A38((uint64_t)&STACK[0x1FA8]);
  sub_5A38((uint64_t)&STACK[0x2000]);
  sub_5A38((uint64_t)&STACK[0x2058]);
  sub_5A38((uint64_t)&STACK[0x20B0]);
  sub_5A38((uint64_t)&STACK[0x2108]);
  sub_5A38((uint64_t)&STACK[0x2160]);
  sub_5A38((uint64_t)&STACK[0x21B8]);
  sub_5A38((uint64_t)&STACK[0x2210]);
  sub_5A38((uint64_t)&STACK[0x2268]);
  sub_5A38((uint64_t)&STACK[0x22C0]);
  sub_5A38((uint64_t)&STACK[0x2318]);
  sub_5A38((uint64_t)&STACK[0x2370]);
  sub_5A38((uint64_t)&STACK[0x23C8]);
  sub_5A38((uint64_t)&STACK[0x2420]);
  sub_5A38((uint64_t)&STACK[0x2478]);
  sub_5A38((uint64_t)&STACK[0x24D0]);
  sub_5A38((uint64_t)&STACK[0x2528]);
  sub_5A38((uint64_t)&STACK[0x2580]);
  sub_5A38((uint64_t)&STACK[0x25D8]);
  sub_5A38((uint64_t)&STACK[0x2630]);
  sub_5A38((uint64_t)&STACK[0x2688]);
  sub_5A38((uint64_t)&STACK[0x26E0]);
  sub_5A38((uint64_t)&STACK[0x2738]);
  sub_5A38((uint64_t)&STACK[0x2790]);
  sub_5A38((uint64_t)&STACK[0x27E8]);
  sub_5A38((uint64_t)&STACK[0x2840]);
  sub_5A38((uint64_t)&STACK[0x2898]);
  sub_5A38((uint64_t)&STACK[0x28F0]);
  sub_5A38((uint64_t)&STACK[0x2948]);
  sub_5A38((uint64_t)&STACK[0x29A0]);
  sub_5A38((uint64_t)&STACK[0x29F8]);
  sub_5A38((uint64_t)&STACK[0x2A50]);
  sub_5A38((uint64_t)&STACK[0x2AA8]);
  sub_5A38((uint64_t)&STACK[0x2B00]);
  sub_5A38((uint64_t)&STACK[0x2B58]);
  sub_5A38((uint64_t)&STACK[0x2BB0]);
  sub_5A38((uint64_t)&STACK[0x2C08]);
  sub_5A38((uint64_t)&STACK[0x2C60]);
  sub_5A38((uint64_t)&STACK[0x2CB8]);
  sub_5A38((uint64_t)&STACK[0x2D10]);
  sub_5A38((uint64_t)&STACK[0x2D68]);
  sub_5A38((uint64_t)&STACK[0x2DC0]);
  sub_5A38((uint64_t)&STACK[0x2E18]);
  sub_5A38((uint64_t)&STACK[0x2E70]);
  sub_5A38((uint64_t)&STACK[0x2EC8]);
  sub_5A38((uint64_t)&STACK[0x2F20]);
  sub_5A38((uint64_t)&STACK[0x2F78]);
  sub_5A38((uint64_t)&STACK[0x2FD0]);
  sub_5A38((uint64_t)&STACK[0x3028]);
  sub_5A38((uint64_t)&STACK[0x3080]);
  sub_5A38((uint64_t)&STACK[0x30D8]);
  sub_5A38((uint64_t)&STACK[0x3130]);
  sub_5A38((uint64_t)&STACK[0x3188]);
  sub_5A38((uint64_t)&STACK[0x31E0]);
  sub_5A38((uint64_t)&STACK[0x3238]);
  sub_5A38((uint64_t)&STACK[0x3290]);
  sub_5A38((uint64_t)&STACK[0x32E8]);
  sub_5A38((uint64_t)&STACK[0x3340]);
  sub_5A38((uint64_t)&STACK[0x3398]);
  sub_5A38((uint64_t)&STACK[0x33F0]);
  sub_5A38((uint64_t)&STACK[0x3448]);
  sub_5A38((uint64_t)&STACK[0x34A0]);
  sub_5A38((uint64_t)&STACK[0x34F8]);
  sub_5A38((uint64_t)&STACK[0x3550]);
  sub_5A38((uint64_t)&STACK[0x35A8]);
  sub_5A38((uint64_t)&STACK[0x3600]);
  sub_5A38((uint64_t)&STACK[0x3658]);
  sub_5A38((uint64_t)&STACK[0x36B0]);
  sub_5A38((uint64_t)&STACK[0x3708]);
  sub_5A38((uint64_t)&STACK[0x3760]);
  sub_5A38((uint64_t)&STACK[0x37B8]);
  sub_5A38((uint64_t)&STACK[0x3810]);
  sub_5A38((uint64_t)&STACK[0x3868]);
  sub_5A38((uint64_t)&STACK[0x38C0]);
  sub_5A38((uint64_t)&STACK[0x3918]);
  sub_5A38((uint64_t)&STACK[0x3970]);
  sub_5A38((uint64_t)&STACK[0x39C8]);
  sub_5A38((uint64_t)&STACK[0x3A20]);
  sub_5A38((uint64_t)&STACK[0x3A78]);
  sub_5A38((uint64_t)&STACK[0x3AD0]);
  sub_5A38((uint64_t)&STACK[0x3B28]);
  sub_5A38((uint64_t)&STACK[0x3B80]);
  sub_5A38((uint64_t)&STACK[0x3BD8]);
  sub_5A38((uint64_t)&STACK[0x3C30]);
  sub_5A38((uint64_t)&STACK[0x3C88]);
  sub_5A38((uint64_t)&STACK[0x3CE0]);
  sub_5A38((uint64_t)&STACK[0x3D38]);
  _Unwind_Resume(a1);
}

uint64_t sub_110F60(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_8F90(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned int **)(a2 + 16); i; uint64_t i = *(unsigned int **)i)
    sub_110FD8(a1, i + 4, (uint64_t)(i + 4));
  return a1;
}

void sub_110FC0(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *sub_110FD8(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      long long v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          long long v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  long long v10 = operator new(0x28uLL);
  *long long v10 = 0;
  v10[1] = v6;
  *((_OWORD *)v10 + 1) = *(_OWORD *)a3;
  v10[4] = *(void *)(a3 + 16);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_8F90(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  long long v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *long long v10 = *v19;
LABEL_38:
    *long long v19 = v10;
    goto LABEL_39;
  }
  *long long v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    long long v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_1111EC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_111200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v8 = 0;
    do
    {
      sub_111294(a1, a4 + v8, (long long *)(a2 + v8));
      v8 += 88;
    }
    while (a2 + v8 != a3);
    a4 += v8;
  }
  return a4;
}

void sub_111270(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 88;
    do
    {
      sub_5A38(v4 + v2);
      v2 -= 88;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

char *sub_111294(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v4 = a2;
  long long v5 = *a3;
  *(_DWORD *)(a2 + 16) = *((_DWORD *)a3 + 4);
  *(_OWORD *)a2 = v5;
  sub_110F60(a2 + 24, (uint64_t)a3 + 24);
  *(void *)(v4 + 64) = 0;
  *(void *)(v4 + 72) = 0;
  v4 += 64;
  *(void *)(v4 + 16) = 0;
  return sub_A448((char *)v4, *((long long **)a3 + 8), *((long long **)a3 + 9), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a3 + 9) - *((void *)a3 + 8)) >> 3));
}

void sub_111308(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_11131C()
{
  __chkstk_darwin();
  uint64_t v1 = v0;
  sub_599C((int)v661, "L1 GPR Bytes Occupancy");
  uint64_t v2 = (uint64_t *)sub_5A9C((uint64_t)v661, 0xFu, 3, (uint64_t)sub_119338);
  unint64_t v3 = sub_5C60(v2, "One Pass");
  long long v4 = *(_OWORD *)v3;
  int v664 = *((_DWORD *)v3 + 4);
  long long v663 = v4;
  sub_110F60((uint64_t)&v665, (uint64_t)(v3 + 3));
  memset(v666, 0, sizeof(v666));
  sub_A448((char *)v666, (long long *)v3[8], (long long *)v3[9], 0xAAAAAAAAAAAAAAABLL * ((v3[9] - v3[8]) >> 3));
  sub_599C((int)v660, "L1 GPR Occupancy");
  long long v5 = (uint64_t *)sub_5A9C((uint64_t)v660, 0xFu, 3, (uint64_t)sub_119510);
  unint64_t v6 = sub_5C60(v5, "L1 Occupancy");
  unint64_t v7 = sub_5C60(v6, "One Pass");
  long long v8 = *(_OWORD *)v7;
  int v668 = *((_DWORD *)v7 + 4);
  long long v667 = v8;
  sub_110F60((uint64_t)&v669, (uint64_t)(v7 + 3));
  memset(v670, 0, sizeof(v670));
  sub_A448((char *)v670, (long long *)v7[8], (long long *)v7[9], 0xAAAAAAAAAAAAAAABLL * ((v7[9] - v7[8]) >> 3));
  sub_599C((int)v659, "L1 Buffer Bytes Occupancy");
  unint64_t v9 = (uint64_t *)sub_5A9C((uint64_t)v659, 0xFu, 3, (uint64_t)sub_1195CC);
  long long v10 = sub_5C60(v9, "One Pass");
  long long v11 = *(_OWORD *)v10;
  int v672 = *((_DWORD *)v10 + 4);
  long long v671 = v11;
  sub_110F60((uint64_t)&v673, (uint64_t)(v10 + 3));
  memset(v674, 0, sizeof(v674));
  sub_A448((char *)v674, (long long *)v10[8], (long long *)v10[9], 0xAAAAAAAAAAAAAAABLL * ((v10[9] - v10[8]) >> 3));
  sub_599C((int)v658, "L1 Buffer Occupancy");
  float v12 = (uint64_t *)sub_5A9C((uint64_t)v658, 0xFu, 3, (uint64_t)sub_1197A4);
  float v13 = sub_5C60(v12, "L1 Occupancy");
  BOOL v14 = sub_5C60(v13, "One Pass");
  long long v15 = *(_OWORD *)v14;
  int v676 = *((_DWORD *)v14 + 4);
  long long v675 = v15;
  sub_110F60((uint64_t)&v677, (uint64_t)(v14 + 3));
  memset(v678, 0, sizeof(v678));
  sub_A448((char *)v678, (long long *)v14[8], (long long *)v14[9], 0xAAAAAAAAAAAAAAABLL * ((v14[9] - v14[8]) >> 3));
  sub_599C((int)v657, "L1 Raytracing Scratch Bytes Occupancy");
  unint64_t v16 = (uint64_t *)sub_5A9C((uint64_t)v657, 0xFu, 3, (uint64_t)sub_119860);
  size_t v17 = sub_5C60(v16, "One Pass");
  long long v18 = *(_OWORD *)v17;
  int v680 = *((_DWORD *)v17 + 4);
  long long v679 = v18;
  sub_110F60((uint64_t)&v681, (uint64_t)(v17 + 3));
  memset(v682, 0, sizeof(v682));
  sub_A448((char *)v682, (long long *)v17[8], (long long *)v17[9], 0xAAAAAAAAAAAAAAABLL * ((v17[9] - v17[8]) >> 3));
  sub_599C((int)v656, "L1 Raytracing Scratch Occupancy");
  long long v19 = (uint64_t *)sub_5A9C((uint64_t)v656, 0xFu, 3, (uint64_t)sub_119A38);
  unint64_t v20 = sub_5C60(v19, "L1 Occupancy");
  uint64_t v21 = sub_5C60(v20, "One Pass");
  long long v22 = *(_OWORD *)v21;
  int v684 = *((_DWORD *)v21 + 4);
  long long v683 = v22;
  sub_110F60((uint64_t)&v685, (uint64_t)(v21 + 3));
  memset(v686, 0, sizeof(v686));
  sub_A448((char *)v686, (long long *)v21[8], (long long *)v21[9], 0xAAAAAAAAAAAAAAABLL * ((v21[9] - v21[8]) >> 3));
  sub_599C((int)v655, "L1 Stack Bytes Occupancy");
  uint64_t v23 = (uint64_t *)sub_5A9C((uint64_t)v655, 0xFu, 3, (uint64_t)sub_119AF4);
  uint64_t v24 = sub_5C60(v23, "One Pass");
  long long v25 = *(_OWORD *)v24;
  int v688 = *((_DWORD *)v24 + 4);
  long long v687 = v25;
  sub_110F60((uint64_t)&v689, (uint64_t)(v24 + 3));
  memset(v690, 0, sizeof(v690));
  sub_A448((char *)v690, (long long *)v24[8], (long long *)v24[9], 0xAAAAAAAAAAAAAAABLL * ((v24[9] - v24[8]) >> 3));
  sub_599C((int)v654, "L1 Stack Occupancy");
  uint64_t v26 = (uint64_t *)sub_5A9C((uint64_t)v654, 0xFu, 3, (uint64_t)sub_119CCC);
  uint64_t v27 = sub_5C60(v26, "L1 Occupancy");
  long long v28 = sub_5C60(v27, "One Pass");
  long long v29 = *(_OWORD *)v28;
  int v692 = *((_DWORD *)v28 + 4);
  long long v691 = v29;
  sub_110F60((uint64_t)&v693, (uint64_t)(v28 + 3));
  memset(v694, 0, sizeof(v694));
  sub_A448((char *)v694, (long long *)v28[8], (long long *)v28[9], 0xAAAAAAAAAAAAAAABLL * ((v28[9] - v28[8]) >> 3));
  sub_599C((int)v653, "L1 Threadgroup Bytes Occupancy");
  unint64_t v30 = (uint64_t *)sub_5A9C((uint64_t)v653, 0xFu, 3, (uint64_t)sub_119D88);
  long long v31 = sub_5C60(v30, "One Pass");
  long long v32 = *(_OWORD *)v31;
  int v696 = *((_DWORD *)v31 + 4);
  long long v695 = v32;
  sub_110F60((uint64_t)&v697, (uint64_t)(v31 + 3));
  memset(v698, 0, sizeof(v698));
  sub_A448((char *)v698, (long long *)v31[8], (long long *)v31[9], 0xAAAAAAAAAAAAAAABLL * ((v31[9] - v31[8]) >> 3));
  sub_599C((int)v652, "L1 Threadgroup Occupancy");
  unint64_t v33 = (uint64_t *)sub_5A9C((uint64_t)v652, 0xFu, 3, (uint64_t)sub_119F60);
  long long v34 = sub_5C60(v33, "L1 Occupancy");
  unint64_t v35 = sub_5C60(v34, "One Pass");
  long long v36 = *(_OWORD *)v35;
  int v700 = *((_DWORD *)v35 + 4);
  long long v699 = v36;
  sub_110F60((uint64_t)&v701, (uint64_t)(v35 + 3));
  memset(v702, 0, sizeof(v702));
  sub_A448((char *)v702, (long long *)v35[8], (long long *)v35[9], 0xAAAAAAAAAAAAAAABLL * ((v35[9] - v35[8]) >> 3));
  sub_599C((int)v651, "L1 Imageblock Bytes Occupancy");
  long long v37 = (uint64_t *)sub_5A9C((uint64_t)v651, 0xFu, 3, (uint64_t)sub_11A01C);
  uint64_t v38 = sub_5C60(v37, "One Pass");
  long long v39 = *(_OWORD *)v38;
  int v704 = *((_DWORD *)v38 + 4);
  long long v703 = v39;
  sub_110F60((uint64_t)&v705, (uint64_t)(v38 + 3));
  memset(v706, 0, sizeof(v706));
  sub_A448((char *)v706, (long long *)v38[8], (long long *)v38[9], 0xAAAAAAAAAAAAAAABLL * ((v38[9] - v38[8]) >> 3));
  sub_599C((int)v650, "L1 Imageblock Occupancy");
  long long v40 = (uint64_t *)sub_5A9C((uint64_t)v650, 0xFu, 3, (uint64_t)sub_11A234);
  uint64_t v41 = sub_5C60(v40, "L1 Occupancy");
  uint64_t v42 = sub_5C60(v41, "One Pass");
  long long v43 = *(_OWORD *)v42;
  int v708 = *((_DWORD *)v42 + 4);
  long long v707 = v43;
  sub_110F60((uint64_t)&v709, (uint64_t)(v42 + 3));
  memset(v710, 0, sizeof(v710));
  sub_A448((char *)v710, (long long *)v42[8], (long long *)v42[9], 0xAAAAAAAAAAAAAAABLL * ((v42[9] - v42[8]) >> 3));
  sub_599C((int)v649, "L1 Other Bytes Occupancy");
  uint64_t v44 = (uint64_t *)sub_5A9C((uint64_t)v649, 0xFu, 3, (uint64_t)sub_11A2F0);
  uint64_t v45 = sub_5C60(v44, "One Pass");
  long long v46 = *(_OWORD *)v45;
  int v712 = *((_DWORD *)v45 + 4);
  long long v711 = v46;
  sub_110F60((uint64_t)&v713, (uint64_t)(v45 + 3));
  memset(v714, 0, sizeof(v714));
  sub_A448((char *)v714, (long long *)v45[8], (long long *)v45[9], 0xAAAAAAAAAAAAAAABLL * ((v45[9] - v45[8]) >> 3));
  sub_599C((int)v648, "L1 Other Occupancy");
  uint64_t v47 = (uint64_t *)sub_5A9C((uint64_t)v648, 0xFu, 3, (uint64_t)sub_11A508);
  uint64_t v48 = sub_5C60(v47, "L1 Occupancy");
  long long v49 = sub_5C60(v48, "One Pass");
  long long v50 = *(_OWORD *)v49;
  int v716 = *((_DWORD *)v49 + 4);
  long long v715 = v50;
  sub_110F60((uint64_t)&v717, (uint64_t)(v49 + 3));
  memset(v718, 0, sizeof(v718));
  sub_A448((char *)v718, (long long *)v49[8], (long long *)v49[9], 0xAAAAAAAAAAAAAAABLL * ((v49[9] - v49[8]) >> 3));
  sub_599C((int)v647, "L1 Total Bytes Occupancy");
  uint64_t v51 = (uint64_t *)sub_5A9C((uint64_t)v647, 0xFu, 3, (uint64_t)sub_11A5C4);
  long long v52 = sub_5C60(v51, "One Pass");
  long long v53 = *(_OWORD *)v52;
  int v720 = *((_DWORD *)v52 + 4);
  long long v719 = v53;
  sub_110F60((uint64_t)&v721, (uint64_t)(v52 + 3));
  memset(v722, 0, sizeof(v722));
  sub_A448((char *)v722, (long long *)v52[8], (long long *)v52[9], 0xAAAAAAAAAAAAAAABLL * ((v52[9] - v52[8]) >> 3));
  sub_599C((int)v646, "L1 Total Occupancy");
  uint64_t v54 = (uint64_t *)sub_5A9C((uint64_t)v646, 0xFu, 3, (uint64_t)sub_11A7A0);
  long long v55 = sub_5C60(v54, "L1 Occupancy");
  uint64_t v56 = sub_5C60(v55, "One Pass");
  long long v57 = *(_OWORD *)v56;
  int v724 = *((_DWORD *)v56 + 4);
  long long v723 = v57;
  sub_110F60((uint64_t)&v725, (uint64_t)(v56 + 3));
  memset(v726, 0, sizeof(v726));
  sub_A448((char *)v726, (long long *)v56[8], (long long *)v56[9], 0xAAAAAAAAAAAAAAABLL * ((v56[9] - v56[8]) >> 3));
  sub_599C((int)v645, "Occupancy Management L1 Eviction Rate");
  long long v58 = (uint64_t *)sub_5A9C((uint64_t)v645, 0xFu, 3, (uint64_t)sub_11A85C);
  unint64_t v59 = sub_5C60(v58, "Thread Occupancy");
  uint64_t v60 = sub_5C60(v59, "One Pass");
  long long v61 = *(_OWORD *)v60;
  int v728 = *((_DWORD *)v60 + 4);
  long long v727 = v61;
  sub_110F60((uint64_t)&v729, (uint64_t)(v60 + 3));
  memset(v730, 0, sizeof(v730));
  sub_A448((char *)v730, (long long *)v60[8], (long long *)v60[9], 0xAAAAAAAAAAAAAAABLL * ((v60[9] - v60[8]) >> 3));
  sub_599C((int)v644, "Buffer L1 Miss Rate");
  unint64_t v62 = (uint64_t *)sub_5A9C((uint64_t)v644, 0xFu, 3, (uint64_t)sub_11AA3C);
  uint64_t v63 = sub_5C60(v62, "One Pass");
  long long v64 = sub_5C60(v63, "Cache Misses");
  long long v65 = *(_OWORD *)v64;
  int v732 = *((_DWORD *)v64 + 4);
  long long v731 = v65;
  sub_110F60((uint64_t)&v733, (uint64_t)(v64 + 3));
  memset(v734, 0, sizeof(v734));
  sub_A448((char *)v734, (long long *)v64[8], (long long *)v64[9], 0xAAAAAAAAAAAAAAABLL * ((v64[9] - v64[8]) >> 3));
  sub_599C((int)v643, "Vertex Shader Launch Utilization");
  uint64_t v66 = (uint64_t *)sub_5A9C((uint64_t)v643, 0xFu, 3, (uint64_t)sub_11AAD8);
  uint64_t v67 = sub_5C60(v66, "One Pass");
  uint64_t v68 = sub_5C60(v67, "Utilizations");
  long long v69 = *(_OWORD *)v68;
  int v736 = *((_DWORD *)v68 + 4);
  long long v735 = v69;
  sub_110F60((uint64_t)&v737, (uint64_t)(v68 + 3));
  memset(v738, 0, sizeof(v738));
  sub_A448((char *)v738, (long long *)v68[8], (long long *)v68[9], 0xAAAAAAAAAAAAAAABLL * ((v68[9] - v68[8]) >> 3));
  sub_599C((int)v642, "Vertex Shader Launch Limiter");
  uint64_t v70 = (uint64_t *)sub_5A9C((uint64_t)v642, 0xFu, 3, (uint64_t)sub_11ACD8);
  unint64_t v71 = sub_5C60(v70, "One Pass");
  uint64_t v72 = sub_5C60(v71, "Thread Occupancy");
  long long v73 = *(_OWORD *)v72;
  int v740 = *((_DWORD *)v72 + 4);
  long long v739 = v73;
  sub_110F60((uint64_t)&v741, (uint64_t)(v72 + 3));
  memset(v742, 0, sizeof(v742));
  sub_A448((char *)v742, (long long *)v72[8], (long long *)v72[9], 0xAAAAAAAAAAAAAAABLL * ((v72[9] - v72[8]) >> 3));
  sub_599C((int)v641, "Fragment Shader Launch Utilization");
  unint64_t v74 = (uint64_t *)sub_5A9C((uint64_t)v641, 0xFu, 3, (uint64_t)sub_11B254);
  uint64_t v75 = sub_5C60(v74, "One Pass");
  long long v76 = sub_5C60(v75, "Utilizations");
  long long v77 = *(_OWORD *)v76;
  int v744 = *((_DWORD *)v76 + 4);
  long long v743 = v77;
  sub_110F60((uint64_t)&v745, (uint64_t)(v76 + 3));
  memset(v746, 0, sizeof(v746));
  sub_A448((char *)v746, (long long *)v76[8], (long long *)v76[9], 0xAAAAAAAAAAAAAAABLL * ((v76[9] - v76[8]) >> 3));
  sub_599C((int)v640, "Fragment Shader Launch Limiter");
  uint64_t v78 = (uint64_t *)sub_5A9C((uint64_t)v640, 0xFu, 3, (uint64_t)sub_11B44C);
  long long v79 = sub_5C60(v78, "One Pass");
  uint64_t v80 = sub_5C60(v79, "Thread Occupancy");
  long long v81 = *(_OWORD *)v80;
  int v748 = *((_DWORD *)v80 + 4);
  long long v747 = v81;
  sub_110F60((uint64_t)&v749, (uint64_t)(v80 + 3));
  memset(v750, 0, sizeof(v750));
  sub_A448((char *)v750, (long long *)v80[8], (long long *)v80[9], 0xAAAAAAAAAAAAAAABLL * ((v80[9] - v80[8]) >> 3));
  sub_599C((int)v639, "Compute Shader Launch Utilization");
  long long v82 = (uint64_t *)sub_5A9C((uint64_t)v639, 0xFu, 3, (uint64_t)sub_11B6A8);
  unint64_t v83 = sub_5C60(v82, "One Pass");
  uint64_t v84 = sub_5C60(v83, "Utilizations");
  long long v85 = *(_OWORD *)v84;
  int v752 = *((_DWORD *)v84 + 4);
  long long v751 = v85;
  sub_110F60((uint64_t)&v753, (uint64_t)(v84 + 3));
  memset(v754, 0, sizeof(v754));
  sub_A448((char *)v754, (long long *)v84[8], (long long *)v84[9], 0xAAAAAAAAAAAAAAABLL * ((v84[9] - v84[8]) >> 3));
  sub_599C((int)v638, "Compute Shader Launch Limiter");
  unint64_t v86 = (uint64_t *)sub_5A9C((uint64_t)v638, 0xFu, 3, (uint64_t)sub_11B8A0);
  uint64_t v87 = sub_5C60(v86, "One Pass");
  long long v88 = sub_5C60(v87, "Thread Occupancy");
  long long v89 = *(_OWORD *)v88;
  int v756 = *((_DWORD *)v88 + 4);
  long long v755 = v89;
  sub_110F60((uint64_t)&v757, (uint64_t)(v88 + 3));
  memset(v758, 0, sizeof(v758));
  sub_A448((char *)v758, (long long *)v88[8], (long long *)v88[9], 0xAAAAAAAAAAAAAAABLL * ((v88[9] - v88[8]) >> 3));
  sub_599C((int)v637, "Vertex Threads Launched");
  uint64_t v90 = (uint64_t *)sub_5A9C((uint64_t)v637, 0xFu, 3, (uint64_t)sub_11BD80);
  long long v91 = sub_5C60(v90, "Absolute Statistics");
  long long v92 = *(_OWORD *)v91;
  int v760 = *((_DWORD *)v91 + 4);
  long long v759 = v92;
  sub_110F60((uint64_t)&v761, (uint64_t)(v91 + 3));
  memset(v762, 0, sizeof(v762));
  sub_A448((char *)v762, (long long *)v91[8], (long long *)v91[9], 0xAAAAAAAAAAAAAAABLL * ((v91[9] - v91[8]) >> 3));
  sub_599C((int)v636, "Fragment Threads Launched");
  uint64_t v93 = (uint64_t *)sub_5A9C((uint64_t)v636, 0xFu, 3, (uint64_t)sub_11BDB0);
  long long v94 = sub_5C60(v93, "Absolute Statistics");
  long long v95 = *(_OWORD *)v94;
  int v764 = *((_DWORD *)v94 + 4);
  long long v763 = v95;
  sub_110F60((uint64_t)&v765, (uint64_t)(v94 + 3));
  memset(v766, 0, sizeof(v766));
  sub_A448((char *)v766, (long long *)v94[8], (long long *)v94[9], 0xAAAAAAAAAAAAAAABLL * ((v94[9] - v94[8]) >> 3));
  sub_599C((int)v635, "Compute Threads Launched");
  uint64_t v96 = (uint64_t *)sub_5A9C((uint64_t)v635, 0xFu, 3, (uint64_t)sub_11BDE0);
  long long v97 = sub_5C60(v96, "Absolute Statistics");
  long long v98 = *(_OWORD *)v97;
  int v768 = *((_DWORD *)v97 + 4);
  long long v767 = v98;
  sub_110F60((uint64_t)&v769, (uint64_t)(v97 + 3));
  memset(v770, 0, sizeof(v770));
  sub_A448((char *)v770, (long long *)v97[8], (long long *)v97[9], 0xAAAAAAAAAAAAAAABLL * ((v97[9] - v97[8]) >> 3));
  sub_599C((int)v634, "Threads Launched");
  unint64_t v99 = (uint64_t *)sub_5A9C((uint64_t)v634, 0xFu, 3, (uint64_t)sub_11BE10);
  long long v100 = sub_5C60(v99, "Absolute Statistics");
  long long v101 = *(_OWORD *)v100;
  int v772 = *((_DWORD *)v100 + 4);
  long long v771 = v101;
  sub_110F60((uint64_t)&v773, (uint64_t)(v100 + 3));
  memset(v774, 0, sizeof(v774));
  sub_A448((char *)v774, (long long *)v100[8], (long long *)v100[9], 0xAAAAAAAAAAAAAAABLL * ((v100[9] - v100[8]) >> 3));
  sub_599C((int)v633, "Simdgroups Launched");
  unint64_t v102 = (uint64_t *)sub_5A9C((uint64_t)v633, 0xFu, 3, (uint64_t)sub_11BEEC);
  long long v103 = sub_5C60(v102, "Absolute Statistics");
  long long v104 = *(_OWORD *)v103;
  int v776 = *((_DWORD *)v103 + 4);
  long long v775 = v104;
  sub_110F60((uint64_t)&v777, (uint64_t)(v103 + 3));
  memset(v778, 0, sizeof(v778));
  sub_A448((char *)v778, (long long *)v103[8], (long long *)v103[9], 0xAAAAAAAAAAAAAAABLL * ((v103[9] - v103[8]) >> 3));
  sub_599C((int)v632, "Fragment Interpolation Limiter");
  uint64_t v105 = sub_5A3C((uint64_t)v632, 11, 2, (uint64_t)sub_11BF1C);
  uint64_t v106 = sub_5A3C(v105, 11, 3, (uint64_t)sub_11BF1C);
  unint64_t v107 = (uint64_t *)sub_5A3C(v106, 12, 2, (uint64_t)sub_11BF1C);
  unint64_t v108 = sub_5C60(v107, "Limiters");
  long long v109 = sub_5C60(v108, "One Pass");
  long long v110 = *(_OWORD *)v109;
  int v780 = *((_DWORD *)v109 + 4);
  long long v779 = v110;
  sub_110F60((uint64_t)&v781, (uint64_t)(v109 + 3));
  memset(v782, 0, sizeof(v782));
  sub_A448((char *)v782, (long long *)v109[8], (long long *)v109[9], 0xAAAAAAAAAAAAAAABLL * ((v109[9] - v109[8]) >> 3));
  sub_599C((int)v631, "MMU Limiter");
  uint64_t v111 = (uint64_t *)sub_5A9C((uint64_t)v631, 0xBu, 2, (uint64_t)sub_11C094);
  long long v112 = sub_5C60(v111, "Limiters");
  unint64_t v113 = sub_5C60(v112, "One Pass");
  long long v114 = *(_OWORD *)v113;
  int v784 = *((_DWORD *)v113 + 4);
  long long v783 = v114;
  sub_110F60((uint64_t)&v785, (uint64_t)(v113 + 3));
  memset(v786, 0, sizeof(v786));
  sub_A448((char *)v786, (long long *)v113[8], (long long *)v113[9], 0xAAAAAAAAAAAAAAABLL * ((v113[9] - v113[8]) >> 3));
  sub_599C((int)v630, "MMU Utilization");
  long long v115 = (uint64_t *)sub_5A9C((uint64_t)v630, 0xBu, 2, (uint64_t)sub_11C24C);
  unint64_t v116 = sub_5C60(v115, "Utilizations");
  uint64_t v117 = sub_5C60(v116, "One Pass");
  long long v118 = *(_OWORD *)v117;
  int v788 = *((_DWORD *)v117 + 4);
  long long v787 = v118;
  sub_110F60((uint64_t)&v789, (uint64_t)(v117 + 3));
  memset(v790, 0, sizeof(v790));
  sub_A448((char *)v790, (long long *)v117[8], (long long *)v117[9], 0xAAAAAAAAAAAAAAABLL * ((v117[9] - v117[8]) >> 3));
  sub_599C((int)v629, "L2 Cache Limiter");
  unint64_t v119 = (uint64_t *)sub_5A9C((uint64_t)v629, 0xBu, 2, (uint64_t)sub_11C3C4);
  unint64_t v120 = sub_5C60(v119, "Limiters");
  long long v121 = sub_5C60(v120, "One Pass");
  long long v122 = *(_OWORD *)v121;
  int v792 = *((_DWORD *)v121 + 4);
  long long v791 = v122;
  sub_110F60((uint64_t)&v793, (uint64_t)(v121 + 3));
  memset(v794, 0, sizeof(v794));
  sub_A448((char *)v794, (long long *)v121[8], (long long *)v121[9], 0xAAAAAAAAAAAAAAABLL * ((v121[9] - v121[8]) >> 3));
  sub_599C((int)v628, "L2 Cache Utilization");
  uint64_t v123 = (uint64_t *)sub_5A9C((uint64_t)v628, 0xBu, 2, (uint64_t)sub_11C57C);
  long long v124 = sub_5C60(v123, "Utilizations");
  unint64_t v125 = sub_5C60(v124, "One Pass");
  long long v126 = *(_OWORD *)v125;
  int v796 = *((_DWORD *)v125 + 4);
  long long v795 = v126;
  sub_110F60((uint64_t)&v797, (uint64_t)(v125 + 3));
  memset(v798, 0, sizeof(v798));
  sub_A448((char *)v798, (long long *)v125[8], (long long *)v125[9], 0xAAAAAAAAAAAAAAABLL * ((v125[9] - v125[8]) >> 3));
  sub_599C((int)v627, "L1 Cache Limiter");
  long long v127 = (uint64_t *)sub_5A9C((uint64_t)v627, 0xFu, 3, (uint64_t)sub_11C6F4);
  unint64_t v128 = sub_5C60(v127, "Limiters");
  uint64_t v129 = sub_5C60(v128, "One Pass");
  long long v130 = *(_OWORD *)v129;
  int v800 = *((_DWORD *)v129 + 4);
  long long v799 = v130;
  sub_110F60((uint64_t)&v801, (uint64_t)(v129 + 3));
  memset(v802, 0, sizeof(v802));
  sub_A448((char *)v802, (long long *)v129[8], (long long *)v129[9], 0xAAAAAAAAAAAAAAABLL * ((v129[9] - v129[8]) >> 3));
  sub_599C((int)v626, "L1 Cache Utilization");
  unint64_t v131 = (uint64_t *)sub_5A9C((uint64_t)v626, 0xFu, 3, (uint64_t)sub_11C918);
  unint64_t v132 = sub_5C60(v131, "Utilizations");
  long long v133 = sub_5C60(v132, "One Pass");
  long long v134 = *(_OWORD *)v133;
  int v804 = *((_DWORD *)v133 + 4);
  long long v803 = v134;
  sub_110F60((uint64_t)&v805, (uint64_t)(v133 + 3));
  memset(v806, 0, sizeof(v806));
  sub_A448((char *)v806, (long long *)v133[8], (long long *)v133[9], 0xAAAAAAAAAAAAAAABLL * ((v133[9] - v133[8]) >> 3));
  sub_599C((int)v625, "Buffer Load Limiter");
  uint64_t v135 = sub_5B90((uint64_t)v625, 0xBu, 2, 0xCuLL, 2, (uint64_t)sub_11CAF8);
  long long v136 = (uint64_t *)sub_5B90(v135, 0xDu, 2, 0xFuLL, 2, (uint64_t)sub_11CC94);
  unint64_t v137 = sub_5C60(v136, "Limiters");
  unint64_t v138 = sub_5C60(v137, "One Pass");
  long long v139 = *(_OWORD *)v138;
  int v808 = *((_DWORD *)v138 + 4);
  long long v807 = v139;
  sub_110F60((uint64_t)&v809, (uint64_t)(v138 + 3));
  memset(v810, 0, sizeof(v810));
  sub_A448((char *)v810, (long long *)v138[8], (long long *)v138[9], 0xAAAAAAAAAAAAAAABLL * ((v138[9] - v138[8]) >> 3));
  sub_599C((int)v624, "Buffer Load Utilization");
  unint64_t v140 = (uint64_t *)sub_5B90((uint64_t)v624, 0xBu, 2, 0xFuLL, 2, (uint64_t)sub_11CE70);
  uint64_t v141 = sub_5C60(v140, "Utilizations");
  long long v142 = sub_5C60(v141, "One Pass");
  long long v143 = *(_OWORD *)v142;
  int v812 = *((_DWORD *)v142 + 4);
  long long v811 = v143;
  sub_110F60((uint64_t)&v813, (uint64_t)(v142 + 3));
  memset(v814, 0, sizeof(v814));
  sub_A448((char *)v814, (long long *)v142[8], (long long *)v142[9], 0xAAAAAAAAAAAAAAABLL * ((v142[9] - v142[8]) >> 3));
  sub_599C((int)v623, "Buffer L1 Load %");
  unint64_t v144 = (uint64_t *)sub_5A9C((uint64_t)v623, 0xFu, 3, (uint64_t)sub_11CFE8);
  long long v145 = sub_5C60(v144, "L1 Access Breakdown");
  uint64_t v146 = sub_5C60(v145, "One Pass");
  long long v147 = *(_OWORD *)v146;
  int v816 = *((_DWORD *)v146 + 4);
  long long v815 = v147;
  sub_110F60((uint64_t)&v817, (uint64_t)(v146 + 3));
  memset(v818, 0, sizeof(v818));
  sub_A448((char *)v818, (long long *)v146[8], (long long *)v146[9], 0xAAAAAAAAAAAAAAABLL * ((v146[9] - v146[8]) >> 3));
  sub_599C((int)v622, "Buffer Store Limiter");
  uint64_t v148 = sub_5B90((uint64_t)v622, 0xBu, 2, 0xCuLL, 2, (uint64_t)sub_11D094);
  unint64_t v149 = (uint64_t *)sub_5B90(v148, 0xDu, 2, 0xFuLL, 2, (uint64_t)sub_11D230);
  unint64_t v150 = sub_5C60(v149, "Limiters");
  long long v151 = sub_5C60(v150, "One Pass");
  long long v152 = *(_OWORD *)v151;
  int v820 = *((_DWORD *)v151 + 4);
  long long v819 = v152;
  sub_110F60((uint64_t)&v821, (uint64_t)(v151 + 3));
  memset(v822, 0, sizeof(v822));
  sub_A448((char *)v822, (long long *)v151[8], (long long *)v151[9], 0xAAAAAAAAAAAAAAABLL * ((v151[9] - v151[8]) >> 3));
  sub_599C((int)v621, "Buffer Store Utilization");
  uint64_t v153 = (uint64_t *)sub_5B90((uint64_t)v621, 0xBu, 2, 0xFuLL, 2, (uint64_t)sub_11D40C);
  long long v154 = sub_5C60(v153, "Utilizations");
  unint64_t v155 = sub_5C60(v154, "One Pass");
  long long v156 = *(_OWORD *)v155;
  int v824 = *((_DWORD *)v155 + 4);
  long long v823 = v156;
  sub_110F60((uint64_t)&v825, (uint64_t)(v155 + 3));
  memset(v826, 0, sizeof(v826));
  sub_A448((char *)v826, (long long *)v155[8], (long long *)v155[9], 0xAAAAAAAAAAAAAAABLL * ((v155[9] - v155[8]) >> 3));
  sub_599C((int)v620, "Buffer L1 Store %");
  long long v157 = (uint64_t *)sub_5A9C((uint64_t)v620, 0xFu, 3, (uint64_t)sub_11D584);
  unint64_t v158 = sub_5C60(v157, "L1 Access Breakdown");
  uint64_t v159 = sub_5C60(v158, "One Pass");
  long long v160 = *(_OWORD *)v159;
  int v828 = *((_DWORD *)v159 + 4);
  long long v827 = v160;
  sub_110F60((uint64_t)&v829, (uint64_t)(v159 + 3));
  memset(v830, 0, sizeof(v830));
  sub_A448((char *)v830, (long long *)v159[8], (long long *)v159[9], 0xAAAAAAAAAAAAAAABLL * ((v159[9] - v159[8]) >> 3));
  sub_599C((int)v619, "Threadgroup Load Limiter");
  uint64_t v161 = sub_5B90((uint64_t)v619, 0xBu, 2, 0xCuLL, 2, (uint64_t)sub_11D630);
  unint64_t v162 = (uint64_t *)sub_5B90(v161, 0xDu, 2, 0xFuLL, 2, (uint64_t)sub_11D7A8);
  long long v163 = sub_5C60(v162, "Limiters");
  uint64_t v164 = sub_5C60(v163, "One Pass");
  long long v165 = *(_OWORD *)v164;
  int v832 = *((_DWORD *)v164 + 4);
  long long v831 = v165;
  sub_110F60((uint64_t)&v833, (uint64_t)(v164 + 3));
  memset(v834, 0, sizeof(v834));
  sub_A448((char *)v834, (long long *)v164[8], (long long *)v164[9], 0xAAAAAAAAAAAAAAABLL * ((v164[9] - v164[8]) >> 3));
  sub_599C((int)v618, "Threadgroup Load Utilization");
  long long v166 = (uint64_t *)sub_5B90((uint64_t)v618, 0xBu, 2, 0xFuLL, 2, (uint64_t)sub_11D960);
  uint64_t v167 = sub_5C60(v166, "Utilizations");
  unint64_t v168 = sub_5C60(v167, "One Pass");
  long long v169 = *(_OWORD *)v168;
  int v836 = *((_DWORD *)v168 + 4);
  long long v835 = v169;
  sub_110F60((uint64_t)&v837, (uint64_t)(v168 + 3));
  memset(v838, 0, sizeof(v838));
  sub_A448((char *)v838, (long long *)v168[8], (long long *)v168[9], 0xAAAAAAAAAAAAAAABLL * ((v168[9] - v168[8]) >> 3));
  sub_599C((int)v617, "Threadgroup L1 Load %");
  uint64_t v170 = (uint64_t *)sub_5A9C((uint64_t)v617, 0xFu, 3, (uint64_t)sub_11DAD8);
  uint64_t v171 = sub_5C60(v170, "L1 Access Breakdown");
  long long v172 = sub_5C60(v171, "One Pass");
  long long v173 = *(_OWORD *)v172;
  int v840 = *((_DWORD *)v172 + 4);
  long long v839 = v173;
  sub_110F60((uint64_t)&v841, (uint64_t)(v172 + 3));
  memset(v842, 0, sizeof(v842));
  sub_A448((char *)v842, (long long *)v172[8], (long long *)v172[9], 0xAAAAAAAAAAAAAAABLL * ((v172[9] - v172[8]) >> 3));
  sub_599C((int)v616, "Threadgroup Store Limiter");
  uint64_t v174 = sub_5B90((uint64_t)v616, 0xBu, 2, 0xCuLL, 2, (uint64_t)sub_11DB84);
  long long v175 = (uint64_t *)sub_5B90(v174, 0xDu, 2, 0xFuLL, 2, (uint64_t)sub_11DCFC);
  uint64_t v176 = sub_5C60(v175, "Limiters");
  uint64_t v177 = sub_5C60(v176, "One Pass");
  long long v178 = *(_OWORD *)v177;
  int v844 = *((_DWORD *)v177 + 4);
  long long v843 = v178;
  sub_110F60((uint64_t)&v845, (uint64_t)(v177 + 3));
  memset(v846, 0, sizeof(v846));
  sub_A448((char *)v846, (long long *)v177[8], (long long *)v177[9], 0xAAAAAAAAAAAAAAABLL * ((v177[9] - v177[8]) >> 3));
  sub_599C((int)v615, "Threadgroup Store Utilization");
  uint64_t v179 = (uint64_t *)sub_5B90((uint64_t)v615, 0xBu, 2, 0xFuLL, 2, (uint64_t)sub_11DEB4);
  unint64_t v180 = sub_5C60(v179, "Utilizations");
  long long v181 = sub_5C60(v180, "One Pass");
  long long v182 = *(_OWORD *)v181;
  int v848 = *((_DWORD *)v181 + 4);
  long long v847 = v182;
  sub_110F60((uint64_t)&v849, (uint64_t)(v181 + 3));
  memset(v850, 0, sizeof(v850));
  sub_A448((char *)v850, (long long *)v181[8], (long long *)v181[9], 0xAAAAAAAAAAAAAAABLL * ((v181[9] - v181[8]) >> 3));
  sub_599C((int)v614, "Threadgroup L1 Store %");
  uint64_t v183 = (uint64_t *)sub_5A9C((uint64_t)v614, 0xFu, 3, (uint64_t)sub_11E02C);
  long long v184 = sub_5C60(v183, "L1 Access Breakdown");
  uint64_t v185 = sub_5C60(v184, "One Pass");
  long long v186 = *(_OWORD *)v185;
  int v852 = *((_DWORD *)v185 + 4);
  long long v851 = v186;
  sub_110F60((uint64_t)&v853, (uint64_t)(v185 + 3));
  memset(v854, 0, sizeof(v854));
  sub_A448((char *)v854, (long long *)v185[8], (long long *)v185[9], 0xAAAAAAAAAAAAAAABLL * ((v185[9] - v185[8]) >> 3));
  sub_599C((int)v613, "Threadgroup Atomic Limiter");
  long long v187 = (uint64_t *)sub_5B90((uint64_t)v613, 0xDu, 2, 0xFuLL, 2, (uint64_t)sub_11E0D8);
  uint64_t v188 = sub_5C60(v187, "Limiters");
  uint64_t v189 = sub_5C60(v188, "One Pass");
  long long v190 = *(_OWORD *)v189;
  int v856 = *((_DWORD *)v189 + 4);
  long long v855 = v190;
  sub_110F60((uint64_t)&v857, (uint64_t)(v189 + 3));
  memset(v858, 0, sizeof(v858));
  sub_A448((char *)v858, (long long *)v189[8], (long long *)v189[9], 0xAAAAAAAAAAAAAAABLL * ((v189[9] - v189[8]) >> 3));
  sub_599C((int)v612, "Threadgroup Atomic Utilization");
  uint64_t v191 = (uint64_t *)sub_5B90((uint64_t)v612, 0xDu, 2, 0xFuLL, 2, (uint64_t)sub_11E224);
  uint64_t v192 = sub_5C60(v191, "Utilizations");
  long long v193 = sub_5C60(v192, "One Pass");
  long long v194 = *(_OWORD *)v193;
  int v860 = *((_DWORD *)v193 + 4);
  long long v859 = v194;
  sub_110F60((uint64_t)&v861, (uint64_t)(v193 + 3));
  memset(v862, 0, sizeof(v862));
  sub_A448((char *)v862, (long long *)v193[8], (long long *)v193[9], 0xAAAAAAAAAAAAAAABLL * ((v193[9] - v193[8]) >> 3));
  sub_599C((int)v611, "GPR L1 Read %");
  uint64_t v195 = (uint64_t *)sub_5B90((uint64_t)v611, 0xFu, 3, 0x11uLL, 2, (uint64_t)sub_11E330);
  long long v196 = sub_5C60(v195, "L1 Access Breakdown");
  uint64_t v197 = sub_5C60(v196, "One Pass");
  long long v198 = *(_OWORD *)v197;
  int v864 = *((_DWORD *)v197 + 4);
  long long v863 = v198;
  sub_110F60((uint64_t)&v865, (uint64_t)(v197 + 3));
  memset(v866, 0, sizeof(v866));
  sub_A448((char *)v866, (long long *)v197[8], (long long *)v197[9], 0xAAAAAAAAAAAAAAABLL * ((v197[9] - v197[8]) >> 3));
  sub_599C((int)v610, "GPR L1 Write %");
  long long v199 = (uint64_t *)sub_5B90((uint64_t)v610, 0xFu, 3, 0x11uLL, 2, (uint64_t)sub_11E3DC);
  uint64_t v200 = sub_5C60(v199, "L1 Access Breakdown");
  uint64_t v201 = sub_5C60(v200, "One Pass");
  long long v202 = *(_OWORD *)v201;
  int v868 = *((_DWORD *)v201 + 4);
  long long v867 = v202;
  sub_110F60((uint64_t)&v869, (uint64_t)(v201 + 3));
  memset(v870, 0, sizeof(v870));
  sub_A448((char *)v870, (long long *)v201[8], (long long *)v201[9], 0xAAAAAAAAAAAAAAABLL * ((v201[9] - v201[8]) >> 3));
  sub_599C((int)v609, "Stack L1 Load %");
  unint64_t v203 = (uint64_t *)sub_5A9C((uint64_t)v609, 0xFu, 3, (uint64_t)sub_11E488);
  unint64_t v204 = sub_5C60(v203, "L1 Access Breakdown");
  long long v205 = sub_5C60(v204, "One Pass");
  long long v206 = *(_OWORD *)v205;
  int v872 = *((_DWORD *)v205 + 4);
  long long v871 = v206;
  sub_110F60((uint64_t)&v873, (uint64_t)(v205 + 3));
  memset(v874, 0, sizeof(v874));
  sub_A448((char *)v874, (long long *)v205[8], (long long *)v205[9], 0xAAAAAAAAAAAAAAABLL * ((v205[9] - v205[8]) >> 3));
  sub_599C((int)v608, "Stack L1 Store %");
  uint64_t v207 = (uint64_t *)sub_5A9C((uint64_t)v608, 0xFu, 3, (uint64_t)sub_11E534);
  long long v208 = sub_5C60(v207, "L1 Access Breakdown");
  unint64_t v209 = sub_5C60(v208, "One Pass");
  long long v210 = *(_OWORD *)v209;
  int v876 = *((_DWORD *)v209 + 4);
  long long v875 = v210;
  sub_110F60((uint64_t)&v877, (uint64_t)(v209 + 3));
  memset(v878, 0, sizeof(v878));
  sub_A448((char *)v878, (long long *)v209[8], (long long *)v209[9], 0xAAAAAAAAAAAAAAABLL * ((v209[9] - v209[8]) >> 3));
  sub_599C((int)v607, "Imageblock L1 Load %");
  long long v211 = (uint64_t *)sub_5A9C((uint64_t)v607, 0xFu, 3, (uint64_t)sub_11E5E0);
  unint64_t v212 = sub_5C60(v211, "L1 Access Breakdown");
  uint64_t v213 = sub_5C60(v212, "One Pass");
  long long v214 = *(_OWORD *)v213;
  int v880 = *((_DWORD *)v213 + 4);
  long long v879 = v214;
  sub_110F60((uint64_t)&v881, (uint64_t)(v213 + 3));
  memset(v882, 0, sizeof(v882));
  sub_A448((char *)v882, (long long *)v213[8], (long long *)v213[9], 0xAAAAAAAAAAAAAAABLL * ((v213[9] - v213[8]) >> 3));
  sub_599C((int)v606, "Imageblock L1 Store %");
  unint64_t v215 = (uint64_t *)sub_5A9C((uint64_t)v606, 0xFu, 3, (uint64_t)sub_11E6CC);
  unint64_t v216 = sub_5C60(v215, "L1 Access Breakdown");
  long long v217 = sub_5C60(v216, "One Pass");
  long long v218 = *(_OWORD *)v217;
  int v884 = *((_DWORD *)v217 + 4);
  long long v883 = v218;
  sub_110F60((uint64_t)&v885, (uint64_t)(v217 + 3));
  memset(v886, 0, sizeof(v886));
  sub_A448((char *)v886, (long long *)v217[8], (long long *)v217[9], 0xAAAAAAAAAAAAAAABLL * ((v217[9] - v217[8]) >> 3));
  sub_599C((int)v605, "Raytracing Scratch L1 Load %");
  uint64_t v219 = (uint64_t *)sub_5A9C((uint64_t)v605, 0xFu, 3, (uint64_t)sub_11E7B8);
  long long v220 = sub_5C60(v219, "L1 Access Breakdown");
  unint64_t v221 = sub_5C60(v220, "One Pass");
  long long v222 = *(_OWORD *)v221;
  int v888 = *((_DWORD *)v221 + 4);
  long long v887 = v222;
  sub_110F60((uint64_t)&v889, (uint64_t)(v221 + 3));
  memset(v890, 0, sizeof(v890));
  sub_A448((char *)v890, (long long *)v221[8], (long long *)v221[9], 0xAAAAAAAAAAAAAAABLL * ((v221[9] - v221[8]) >> 3));
  sub_599C((int)v604, "Raytracing Scratch L1 Store %");
  long long v223 = (uint64_t *)sub_5A9C((uint64_t)v604, 0xFu, 3, (uint64_t)sub_11E864);
  uint64_t v224 = sub_5C60(v223, "L1 Access Breakdown");
  uint64_t v225 = sub_5C60(v224, "One Pass");
  long long v226 = *(_OWORD *)v225;
  int v892 = *((_DWORD *)v225 + 4);
  long long v891 = v226;
  sub_110F60((uint64_t)&v893, (uint64_t)(v225 + 3));
  memset(v894, 0, sizeof(v894));
  sub_A448((char *)v894, (long long *)v225[8], (long long *)v225[9], 0xAAAAAAAAAAAAAAABLL * ((v225[9] - v225[8]) >> 3));
  sub_599C((int)v603, "Other L1 Loads %");
  unint64_t v227 = (uint64_t *)sub_5A9C((uint64_t)v603, 0xFu, 3, (uint64_t)sub_11E910);
  unint64_t v228 = sub_5C60(v227, "L1 Access Breakdown");
  long long v229 = sub_5C60(v228, "One Pass");
  long long v230 = *(_OWORD *)v229;
  int v896 = *((_DWORD *)v229 + 4);
  long long v895 = v230;
  sub_110F60((uint64_t)&v897, (uint64_t)(v229 + 3));
  memset(v898, 0, sizeof(v898));
  sub_A448((char *)v898, (long long *)v229[8], (long long *)v229[9], 0xAAAAAAAAAAAAAAABLL * ((v229[9] - v229[8]) >> 3));
  sub_599C((int)v602, "Other L1 Stores %");
  uint64_t v231 = (uint64_t *)sub_5A9C((uint64_t)v602, 0xFu, 3, (uint64_t)sub_11E9FC);
  long long v232 = sub_5C60(v231, "L1 Access Breakdown");
  unint64_t v233 = sub_5C60(v232, "One Pass");
  long long v234 = *(_OWORD *)v233;
  int v900 = *((_DWORD *)v233 + 4);
  long long v899 = v234;
  sub_110F60((uint64_t)&v901, (uint64_t)(v233 + 3));
  memset(v902, 0, sizeof(v902));
  sub_A448((char *)v902, (long long *)v233[8], (long long *)v233[9], 0xAAAAAAAAAAAAAAABLL * ((v233[9] - v233[8]) >> 3));
  sub_599C((int)v601, "ALU Limiter");
  uint64_t v235 = sub_5B90((uint64_t)v601, 0xBu, 2, 0xFuLL, 2, (uint64_t)sub_11EAE8);
  uint64_t v236 = (uint64_t *)sub_5A9C(v235, 0xFu, 3, (uint64_t)sub_11ECA0);
  uint64_t v237 = sub_5C60(v236, "Limiters");
  long long v238 = sub_5C60(v237, "One Pass");
  long long v239 = *(_OWORD *)v238;
  int v904 = *((_DWORD *)v238 + 4);
  long long v903 = v239;
  sub_110F60((uint64_t)&v905, (uint64_t)(v238 + 3));
  memset(v906, 0, sizeof(v906));
  sub_A448((char *)v906, (long long *)v238[8], (long long *)v238[9], 0xAAAAAAAAAAAAAAABLL * ((v238[9] - v238[8]) >> 3));
  sub_599C((int)v600, "ALU Utilization");
  uint64_t v240 = sub_5B90((uint64_t)v600, 0xBu, 2, 0xFuLL, 2, (uint64_t)sub_11F038);
  long long v241 = (uint64_t *)sub_5A9C(v240, 0xFu, 3, (uint64_t)sub_11F1B0);
  uint64_t v242 = sub_5C60(v241, "Utilizations");
  uint64_t v243 = sub_5C60(v242, "One Pass");
  long long v244 = *(_OWORD *)v243;
  int v908 = *((_DWORD *)v243 + 4);
  long long v907 = v244;
  sub_110F60((uint64_t)&v909, (uint64_t)(v243 + 3));
  memset(v910, 0, sizeof(v910));
  sub_A448((char *)v910, (long long *)v243[8], (long long *)v243[9], 0xAAAAAAAAAAAAAAABLL * ((v243[9] - v243[8]) >> 3));
  sub_599C((int)v599, "Shader Core Limiter");
  unint64_t v245 = (uint64_t *)sub_5A9C((uint64_t)v599, 0xFu, 3, (uint64_t)sub_11F448);
  unint64_t v246 = sub_5C60(v245, "Limiters");
  long long v247 = sub_5C60(v246, "One Pass");
  long long v248 = *(_OWORD *)v247;
  int v912 = *((_DWORD *)v247 + 4);
  long long v911 = v248;
  sub_110F60((uint64_t)&v913, (uint64_t)(v247 + 3));
  memset(v914, 0, sizeof(v914));
  sub_A448((char *)v914, (long long *)v247[8], (long long *)v247[9], 0xAAAAAAAAAAAAAAABLL * ((v247[9] - v247[8]) >> 3));
  sub_599C((int)v598, "Shader Core Utilization");
  uint64_t v249 = (uint64_t *)sub_5A9C((uint64_t)v598, 0xFu, 3, (uint64_t)sub_11F808);
  long long v250 = sub_5C60(v249, "Utilizations");
  unint64_t v251 = sub_5C60(v250, "One Pass");
  long long v252 = *(_OWORD *)v251;
  int v916 = *((_DWORD *)v251 + 4);
  long long v915 = v252;
  sub_110F60((uint64_t)&v917, (uint64_t)(v251 + 3));
  memset(v918, 0, sizeof(v918));
  sub_A448((char *)v918, (long long *)v251[8], (long long *)v251[9], 0xAAAAAAAAAAAAAAABLL * ((v251[9] - v251[8]) >> 3));
  sub_599C((int)v597, "Instructions Executed");
  long long v253 = (uint64_t *)sub_5A9C((uint64_t)v597, 0xFu, 3, (uint64_t)sub_11F948);
  uint64_t v254 = sub_5C60(v253, "Absolute Statistics");
  long long v255 = *(_OWORD *)v254;
  int v920 = *((_DWORD *)v254 + 4);
  long long v919 = v255;
  sub_110F60((uint64_t)&v921, (uint64_t)(v254 + 3));
  memset(v922, 0, sizeof(v922));
  sub_A448((char *)v922, (long long *)v254[8], (long long *)v254[9], 0xAAAAAAAAAAAAAAABLL * ((v254[9] - v254[8]) >> 3));
  sub_599C((int)v596, "Instructions Per Clock");
  long long v256 = (uint64_t *)sub_5A9C((uint64_t)v596, 0xFu, 3, (uint64_t)sub_11FA18);
  unint64_t v257 = sub_5C60(v256, "Instructions Per Clock");
  unint64_t v258 = sub_5C60(v257, "One Pass");
  long long v259 = *(_OWORD *)v258;
  int v924 = *((_DWORD *)v258 + 4);
  long long v923 = v259;
  sub_110F60((uint64_t)&v925, (uint64_t)(v258 + 3));
  memset(v926, 0, sizeof(v926));
  sub_A448((char *)v926, (long long *)v258[8], (long long *)v258[9], 0xAAAAAAAAAAAAAAABLL * ((v258[9] - v258[8]) >> 3));
  sub_599C((int)v595, "F16 Limiter");
  unint64_t v260 = (uint64_t *)sub_5A9C((uint64_t)v595, 0xFu, 3, (uint64_t)sub_11FB24);
  uint64_t v261 = sub_5C60(v260, "Limiters");
  long long v262 = sub_5C60(v261, "One Pass");
  long long v263 = *(_OWORD *)v262;
  int v928 = *((_DWORD *)v262 + 4);
  long long v927 = v263;
  sub_110F60((uint64_t)&v929, (uint64_t)(v262 + 3));
  memset(v930, 0, sizeof(v930));
  sub_A448((char *)v930, (long long *)v262[8], (long long *)v262[9], 0xAAAAAAAAAAAAAAABLL * ((v262[9] - v262[8]) >> 3));
  sub_599C((int)v594, "F16 Utilization");
  unint64_t v264 = (uint64_t *)sub_5A9C((uint64_t)v594, 0xFu, 3, (uint64_t)sub_11FCDC);
  long long v265 = sub_5C60(v264, "Utilizations");
  unint64_t v266 = sub_5C60(v265, "One Pass");
  long long v267 = *(_OWORD *)v266;
  int v932 = *((_DWORD *)v266 + 4);
  long long v931 = v267;
  sub_110F60((uint64_t)&v933, (uint64_t)(v266 + 3));
  memset(v934, 0, sizeof(v934));
  sub_A448((char *)v934, (long long *)v266[8], (long long *)v266[9], 0xAAAAAAAAAAAAAAABLL * ((v266[9] - v266[8]) >> 3));
  sub_599C((int)v593, "F32 Limiter");
  long long v268 = (uint64_t *)sub_5A9C((uint64_t)v593, 0xFu, 3, (uint64_t)sub_11FE54);
  unint64_t v269 = sub_5C60(v268, "Limiters");
  unint64_t v270 = sub_5C60(v269, "One Pass");
  long long v271 = *(_OWORD *)v270;
  int v936 = *((_DWORD *)v270 + 4);
  long long v935 = v271;
  sub_110F60((uint64_t)&v937, (uint64_t)(v270 + 3));
  memset(v938, 0, sizeof(v938));
  sub_A448((char *)v938, (long long *)v270[8], (long long *)v270[9], 0xAAAAAAAAAAAAAAABLL * ((v270[9] - v270[8]) >> 3));
  sub_599C((int)v592, "F32 Utilization");
  unint64_t v272 = (uint64_t *)sub_5A9C((uint64_t)v592, 0xFu, 3, (uint64_t)sub_12000C);
  uint64_t v273 = sub_5C60(v272, "Utilizations");
  long long v274 = sub_5C60(v273, "One Pass");
  long long v275 = *(_OWORD *)v274;
  int v940 = *((_DWORD *)v274 + 4);
  long long v939 = v275;
  sub_110F60((uint64_t)&v941, (uint64_t)(v274 + 3));
  memset(v942, 0, sizeof(v942));
  sub_A448((char *)v942, (long long *)v274[8], (long long *)v274[9], 0xAAAAAAAAAAAAAAABLL * ((v274[9] - v274[8]) >> 3));
  sub_599C((int)v591, "IC Limiter");
  unint64_t v276 = (uint64_t *)sub_5A9C((uint64_t)v591, 0xFu, 3, (uint64_t)sub_120184);
  long long v277 = sub_5C60(v276, "Limiters");
  unint64_t v278 = sub_5C60(v277, "One Pass");
  long long v279 = *(_OWORD *)v278;
  int v944 = *((_DWORD *)v278 + 4);
  long long v943 = v279;
  sub_110F60((uint64_t)&v945, (uint64_t)(v278 + 3));
  memset(v946, 0, sizeof(v946));
  sub_A448((char *)v946, (long long *)v278[8], (long long *)v278[9], 0xAAAAAAAAAAAAAAABLL * ((v278[9] - v278[8]) >> 3));
  sub_599C((int)v590, "IC Utilization");
  long long v280 = (uint64_t *)sub_5A9C((uint64_t)v590, 0xFu, 3, (uint64_t)sub_120334);
  unint64_t v281 = sub_5C60(v280, "Utilizations");
  unint64_t v282 = sub_5C60(v281, "One Pass");
  long long v283 = *(_OWORD *)v282;
  int v948 = *((_DWORD *)v282 + 4);
  long long v947 = v283;
  sub_110F60((uint64_t)&v949, (uint64_t)(v282 + 3));
  memset(v950, 0, sizeof(v950));
  sub_A448((char *)v950, (long long *)v282[8], (long long *)v282[9], 0xAAAAAAAAAAAAAAABLL * ((v282[9] - v282[8]) >> 3));
  sub_599C((int)v589, "SCIB Limiter");
  unint64_t v284 = (uint64_t *)sub_5A9C((uint64_t)v589, 0xFu, 3, (uint64_t)sub_1204AC);
  uint64_t v285 = sub_5C60(v284, "Limiters");
  long long v286 = sub_5C60(v285, "One Pass");
  long long v287 = *(_OWORD *)v286;
  int v952 = *((_DWORD *)v286 + 4);
  long long v951 = v287;
  sub_110F60((uint64_t)&v953, (uint64_t)(v286 + 3));
  memset(v954, 0, sizeof(v954));
  sub_A448((char *)v954, (long long *)v286[8], (long long *)v286[9], 0xAAAAAAAAAAAAAAABLL * ((v286[9] - v286[8]) >> 3));
  sub_599C((int)v588, "SCIB Utilization");
  unint64_t v288 = (uint64_t *)sub_5A9C((uint64_t)v588, 0xFu, 3, (uint64_t)sub_120664);
  long long v289 = sub_5C60(v288, "Utilizations");
  unint64_t v290 = sub_5C60(v289, "One Pass");
  long long v291 = *(_OWORD *)v290;
  int v956 = *((_DWORD *)v290 + 4);
  long long v955 = v291;
  sub_110F60((uint64_t)&v957, (uint64_t)(v290 + 3));
  memset(v958, 0, sizeof(v958));
  sub_A448((char *)v958, (long long *)v290[8], (long long *)v290[9], 0xAAAAAAAAAAAAAAABLL * ((v290[9] - v290[8]) >> 3));
  sub_599C((int)v587, "Control Flow Limiter");
  long long v292 = (uint64_t *)sub_5A9C((uint64_t)v587, 0xFu, 3, (uint64_t)sub_1207DC);
  unint64_t v293 = sub_5C60(v292, "Limiters");
  unint64_t v294 = sub_5C60(v293, "One Pass");
  long long v295 = *(_OWORD *)v294;
  int v960 = *((_DWORD *)v294 + 4);
  long long v959 = v295;
  sub_110F60((uint64_t)&v961, (uint64_t)(v294 + 3));
  memset(v962, 0, sizeof(v962));
  sub_A448((char *)v962, (long long *)v294[8], (long long *)v294[9], 0xAAAAAAAAAAAAAAABLL * ((v294[9] - v294[8]) >> 3));
  sub_599C((int)v586, "Control Flow Utilization");
  unint64_t v296 = (uint64_t *)sub_5A9C((uint64_t)v586, 0xFu, 3, (uint64_t)sub_120994);
  uint64_t v297 = sub_5C60(v296, "Utilizations");
  long long v298 = sub_5C60(v297, "One Pass");
  long long v299 = *(_OWORD *)v298;
  int v964 = *((_DWORD *)v298 + 4);
  long long v963 = v299;
  sub_110F60((uint64_t)&v965, (uint64_t)(v298 + 3));
  memset(v966, 0, sizeof(v966));
  sub_A448((char *)v966, (long long *)v298[8], (long long *)v298[9], 0xAAAAAAAAAAAAAAABLL * ((v298[9] - v298[8]) >> 3));
  sub_599C((int)v585, "Address Generation Limiter");
  unint64_t v300 = (uint64_t *)sub_5A9C((uint64_t)v585, 0xFu, 3, (uint64_t)sub_120B0C);
  long long v301 = sub_5C60(v300, "Limiters");
  uint64_t v302 = sub_5C60(v301, "One Pass");
  long long v303 = *(_OWORD *)v302;
  int v968 = *((_DWORD *)v302 + 4);
  long long v967 = v303;
  sub_110F60((uint64_t)&v969, (uint64_t)(v302 + 3));
  memset(v970, 0, sizeof(v970));
  sub_A448((char *)v970, (long long *)v302[8], (long long *)v302[9], 0xAAAAAAAAAAAAAAABLL * ((v302[9] - v302[8]) >> 3));
  sub_599C((int)v584, "Address Generation Utilization");
  long long v304 = (uint64_t *)sub_5A9C((uint64_t)v584, 0xFu, 3, (uint64_t)sub_120CC4);
  unint64_t v305 = sub_5C60(v304, "Utilizations");
  unint64_t v306 = sub_5C60(v305, "One Pass");
  long long v307 = *(_OWORD *)v306;
  int v972 = *((_DWORD *)v306 + 4);
  long long v971 = v307;
  sub_110F60((uint64_t)&v973, (uint64_t)(v306 + 3));
  memset(v974, 0, sizeof(v974));
  sub_A448((char *)v974, (long long *)v306[8], (long long *)v306[9], 0xAAAAAAAAAAAAAAABLL * ((v306[9] - v306[8]) >> 3));
  sub_599C((int)v583, "Texture Cache Limiter");
  long long v308 = (uint64_t *)sub_5A9C((uint64_t)v583, 0xFu, 3, (uint64_t)sub_120E3C);
  uint64_t v309 = sub_5C60(v308, "Limiters");
  long long v310 = sub_5C60(v309, "One Pass");
  long long v311 = *(_OWORD *)v310;
  int v976 = *((_DWORD *)v310 + 4);
  long long v975 = v311;
  sub_110F60((uint64_t)&v977, (uint64_t)(v310 + 3));
  memset(v978, 0, sizeof(v978));
  sub_A448((char *)v978, (long long *)v310[8], (long long *)v310[9], 0xAAAAAAAAAAAAAAABLL * ((v310[9] - v310[8]) >> 3));
  sub_599C((int)v582, "Texture Cache Limiter");
  uint64_t v312 = sub_5B90((uint64_t)v582, 0xBu, 2, 0xFuLL, 2, (uint64_t)sub_120E3C);
  long long v313 = (uint64_t *)sub_5A9C(v312, 0xFu, 3, (uint64_t)sub_120FF4);
  unint64_t v314 = sub_5C60(v313, "Limiters");
  uint64_t v315 = sub_5C60(v314, "One Pass");
  long long v316 = *(_OWORD *)v315;
  int v980 = *((_DWORD *)v315 + 4);
  long long v979 = v316;
  sub_110F60((uint64_t)&v981, (uint64_t)(v315 + 3));
  memset(v982, 0, sizeof(v982));
  sub_A448((char *)v982, (long long *)v315[8], (long long *)v315[9], 0xAAAAAAAAAAAAAAABLL * ((v315[9] - v315[8]) >> 3));
  sub_599C((int)v581, "Texture Cache Utilization");
  unint64_t v317 = (uint64_t *)sub_5A9C((uint64_t)v581, 0xFu, 3, (uint64_t)sub_121140);
  unint64_t v318 = sub_5C60(v317, "Utilizations");
  long long v319 = sub_5C60(v318, "One Pass");
  long long v320 = *(_OWORD *)v319;
  int v984 = *((_DWORD *)v319 + 4);
  long long v983 = v320;
  sub_110F60((uint64_t)&v985, (uint64_t)(v319 + 3));
  memset(v986, 0, sizeof(v986));
  sub_A448((char *)v986, (long long *)v319[8], (long long *)v319[9], 0xAAAAAAAAAAAAAAABLL * ((v319[9] - v319[8]) >> 3));
  sub_599C((int)v580, "Texture Cache Utilization");
  uint64_t v321 = sub_5B90((uint64_t)v580, 0xBu, 2, 0xFuLL, 2, (uint64_t)sub_121140);
  long long v322 = (uint64_t *)sub_5A9C(v321, 0xFu, 3, (uint64_t)sub_1212B8);
  unint64_t v323 = sub_5C60(v322, "Utilizations");
  unint64_t v324 = sub_5C60(v323, "One Pass");
  long long v325 = *(_OWORD *)v324;
  int v988 = *((_DWORD *)v324 + 4);
  long long v987 = v325;
  sub_110F60((uint64_t)&v989, (uint64_t)(v324 + 3));
  memset(v990, 0, sizeof(v990));
  sub_A448((char *)v990, (long long *)v324[8], (long long *)v324[9], 0xAAAAAAAAAAAAAAABLL * ((v324[9] - v324[8]) >> 3));
  sub_599C((int)v579, "Texture Read Limiter");
  unint64_t v326 = (uint64_t *)sub_5A9C((uint64_t)v579, 0xFu, 3, (uint64_t)sub_121430);
  uint64_t v327 = sub_5C60(v326, "Limiters");
  long long v328 = sub_5C60(v327, "One Pass");
  long long v329 = *(_OWORD *)v328;
  int v992 = *((_DWORD *)v328 + 4);
  long long v991 = v329;
  sub_110F60((uint64_t)&v993, (uint64_t)(v328 + 3));
  memset(v994, 0, sizeof(v994));
  sub_A448((char *)v994, (long long *)v328[8], (long long *)v328[9], 0xAAAAAAAAAAAAAAABLL * ((v328[9] - v328[8]) >> 3));
  sub_599C((int)v578, "Texture Read Limiter");
  uint64_t v330 = sub_5B90((uint64_t)v578, 0xBu, 2, 0xCuLL, 2, (uint64_t)sub_1215E8);
  uint64_t v331 = sub_5B90(v330, 0xDu, 2, 0xFuLL, 2, (uint64_t)sub_121430);
  unint64_t v332 = (uint64_t *)sub_5A9C(v331, 0xFu, 3, (uint64_t)sub_121760);
  uint64_t v333 = sub_5C60(v332, "Limiters");
  long long v334 = sub_5C60(v333, "One Pass");
  long long v335 = *(_OWORD *)v334;
  int v996 = *((_DWORD *)v334 + 4);
  long long v995 = v335;
  sub_110F60((uint64_t)&v997, (uint64_t)(v334 + 3));
  memset(v998, 0, sizeof(v998));
  sub_A448((char *)v998, (long long *)v334[8], (long long *)v334[9], 0xAAAAAAAAAAAAAAABLL * ((v334[9] - v334[8]) >> 3));
  sub_599C((int)v577, "Texture Read Utilization");
  unint64_t v336 = (uint64_t *)sub_5A9C((uint64_t)v577, 0xFu, 3, (uint64_t)sub_121764);
  long long v337 = sub_5C60(v336, "Utilizations");
  int v338 = sub_5C60(v337, "One Pass");
  long long v339 = *(_OWORD *)v338;
  int v1000 = *((_DWORD *)v338 + 4);
  long long v999 = v339;
  sub_110F60((uint64_t)&v1001, (uint64_t)(v338 + 3));
  memset(v1002, 0, sizeof(v1002));
  sub_A448((char *)v1002, (long long *)v338[8], (long long *)v338[9], 0xAAAAAAAAAAAAAAABLL * ((v338[9] - v338[8]) >> 3));
  sub_599C((int)v576, "Texture Read Utilization");
  uint64_t v340 = sub_5B90((uint64_t)v576, 0xBu, 2, 0xFuLL, 2, (uint64_t)sub_121764);
  unint64_t v341 = (uint64_t *)sub_5A9C(v340, 0xFu, 3, (uint64_t)sub_1218DC);
  unint64_t v342 = sub_5C60(v341, "Utilizations");
  long long v343 = sub_5C60(v342, "One Pass");
  long long v344 = *(_OWORD *)v343;
  int v1004 = *((_DWORD *)v343 + 4);
  long long v1003 = v344;
  sub_110F60((uint64_t)&v1005, (uint64_t)(v343 + 3));
  memset(v1006, 0, sizeof(v1006));
  sub_A448((char *)v1006, (long long *)v343[8], (long long *)v343[9], 0xAAAAAAAAAAAAAAABLL * ((v343[9] - v343[8]) >> 3));
  sub_599C((int)v575, "Texture Write Limiter");
  uint64_t v345 = (uint64_t *)sub_5A9C((uint64_t)v575, 0xBu, 2, (uint64_t)sub_121BC0);
  long long v346 = sub_5C60(v345, "Limiters");
  unint64_t v347 = sub_5C60(v346, "One Pass");
  long long v348 = *(_OWORD *)v347;
  int v1008 = *((_DWORD *)v347 + 4);
  long long v1007 = v348;
  sub_110F60((uint64_t)&v1009, (uint64_t)(v347 + 3));
  memset(v1010, 0, sizeof(v1010));
  sub_A448((char *)v1010, (long long *)v347[8], (long long *)v347[9], 0xAAAAAAAAAAAAAAABLL * ((v347[9] - v347[8]) >> 3));
  sub_599C((int)v574, "Texture Write Utilization");
  long long v349 = (uint64_t *)sub_5A9C((uint64_t)v574, 0xBu, 2, (uint64_t)sub_121D78);
  uint64_t v350 = sub_5C60(v349, "Utilizations");
  uint64_t v351 = sub_5C60(v350, "One Pass");
  long long v352 = *(_OWORD *)v351;
  int v1012 = *((_DWORD *)v351 + 4);
  long long v1011 = v352;
  sub_110F60((uint64_t)&v1013, (uint64_t)(v351 + 3));
  memset(v1014, 0, sizeof(v1014));
  sub_A448((char *)v1014, (long long *)v351[8], (long long *)v351[9], 0xAAAAAAAAAAAAAAABLL * ((v351[9] - v351[8]) >> 3));
  sub_599C((int)v573, "Total Occupancy");
  unint64_t v353 = (uint64_t *)sub_5A9C((uint64_t)v573, 0xBu, 2, (uint64_t)sub_121EF0);
  uint64_t v354 = sub_5C60(v353, "Thread Occupancy");
  long long v355 = sub_5C60(v354, "One Pass");
  long long v356 = *(_OWORD *)v355;
  int v1016 = *((_DWORD *)v355 + 4);
  long long v1015 = v356;
  sub_110F60((uint64_t)&v1017, (uint64_t)(v355 + 3));
  memset(v1018, 0, sizeof(v1018));
  sub_A448((char *)v1018, (long long *)v355[8], (long long *)v355[9], 0xAAAAAAAAAAAAAAABLL * ((v355[9] - v355[8]) >> 3));
  sub_599C((int)v572, "Total Simdgroups Inflight Per Shader Core");
  uint64_t v357 = (uint64_t *)sub_5A9C((uint64_t)v572, 0xBu, 2, (uint64_t)sub_121FF0);
  long long v358 = sub_5C60(v357, "One Pass");
  long long v359 = *(_OWORD *)v358;
  int v1020 = *((_DWORD *)v358 + 4);
  long long v1019 = v359;
  sub_110F60((uint64_t)&v1021, (uint64_t)(v358 + 3));
  memset(v1022, 0, sizeof(v1022));
  sub_A448((char *)v1022, (long long *)v358[8], (long long *)v358[9], 0xAAAAAAAAAAAAAAABLL * ((v358[9] - v358[8]) >> 3));
  sub_599C((int)v571, "Vertex Occupancy");
  unint64_t v360 = (uint64_t *)sub_5A9C((uint64_t)v571, 0xBu, 2, (uint64_t)sub_1220CC);
  long long v361 = sub_5C60(v360, "Thread Occupancy");
  uint64_t v362 = sub_5C60(v361, "One Pass");
  long long v363 = *(_OWORD *)v362;
  int v1024 = *((_DWORD *)v362 + 4);
  long long v1023 = v363;
  sub_110F60((uint64_t)&v1025, (uint64_t)(v362 + 3));
  memset(v1026, 0, sizeof(v1026));
  sub_A448((char *)v1026, (long long *)v362[8], (long long *)v362[9], 0xAAAAAAAAAAAAAAABLL * ((v362[9] - v362[8]) >> 3));
  sub_599C((int)v570, "Vertex Simdgroups Inflight Per Shader Core");
  uint64_t v364 = sub_5B90((uint64_t)v570, 0xBu, 2, 0xFuLL, 2, (uint64_t)sub_122188);
  uint64_t v365 = (uint64_t *)sub_5A9C(v364, 0xFu, 3, (uint64_t)sub_1222A4);
  uint64_t v366 = sub_5C60(v365, "One Pass");
  long long v367 = *(_OWORD *)v366;
  int v1028 = *((_DWORD *)v366 + 4);
  long long v1027 = v367;
  sub_110F60((uint64_t)&v1029, (uint64_t)(v366 + 3));
  memset(v1030, 0, sizeof(v1030));
  sub_A448((char *)v1030, (long long *)v366[8], (long long *)v366[9], 0xAAAAAAAAAAAAAAABLL * ((v366[9] - v366[8]) >> 3));
  sub_599C((int)v569, "Fragment Occupancy");
  uint64_t v368 = (uint64_t *)sub_5A9C((uint64_t)v569, 0xBu, 2, (uint64_t)sub_1224BC);
  uint64_t v369 = sub_5C60(v368, "Thread Occupancy");
  long long v370 = sub_5C60(v369, "One Pass");
  long long v371 = *(_OWORD *)v370;
  int v1032 = *((_DWORD *)v370 + 4);
  long long v1031 = v371;
  sub_110F60((uint64_t)&v1033, (uint64_t)(v370 + 3));
  memset(v1034, 0, sizeof(v1034));
  sub_A448((char *)v1034, (long long *)v370[8], (long long *)v370[9], 0xAAAAAAAAAAAAAAABLL * ((v370[9] - v370[8]) >> 3));
  sub_599C((int)v568, "Fragment Simdgroups Inflight Per Shader Core");
  uint64_t v372 = sub_5B90((uint64_t)v568, 0xBu, 2, 0xFuLL, 2, (uint64_t)sub_122578);
  long long v373 = (uint64_t *)sub_5A9C(v372, 0xFu, 3, (uint64_t)sub_122694);
  uint64_t v374 = sub_5C60(v373, "One Pass");
  long long v375 = *(_OWORD *)v374;
  int v1036 = *((_DWORD *)v374 + 4);
  long long v1035 = v375;
  sub_110F60((uint64_t)&v1037, (uint64_t)(v374 + 3));
  memset(v1038, 0, sizeof(v1038));
  sub_A448((char *)v1038, (long long *)v374[8], (long long *)v374[9], 0xAAAAAAAAAAAAAAABLL * ((v374[9] - v374[8]) >> 3));
  sub_599C((int)v567, "Compute Occupancy");
  long long v376 = (uint64_t *)sub_5A9C((uint64_t)v567, 0xBu, 2, (uint64_t)sub_1228EC);
  uint64_t v377 = sub_5C60(v376, "Thread Occupancy");
  uint64_t v378 = sub_5C60(v377, "One Pass");
  long long v379 = *(_OWORD *)v378;
  int v1040 = *((_DWORD *)v378 + 4);
  long long v1039 = v379;
  sub_110F60((uint64_t)&v1041, (uint64_t)(v378 + 3));
  memset(v1042, 0, sizeof(v1042));
  sub_A448((char *)v1042, (long long *)v378[8], (long long *)v378[9], 0xAAAAAAAAAAAAAAABLL * ((v378[9] - v378[8]) >> 3));
  sub_599C((int)v566, "Compute Simdgroups Inflight Per Shader Core");
  uint64_t v380 = sub_5B90((uint64_t)v566, 0xBu, 2, 0xFuLL, 2, (uint64_t)sub_1229A8);
  uint64_t v381 = (uint64_t *)sub_5A9C(v380, 0xFu, 3, (uint64_t)sub_122AC4);
  long long v382 = sub_5C60(v381, "One Pass");
  long long v383 = *(_OWORD *)v382;
  int v1044 = *((_DWORD *)v382 + 4);
  long long v1043 = v383;
  sub_110F60((uint64_t)&v1045, (uint64_t)(v382 + 3));
  memset(v1046, 0, sizeof(v1046));
  sub_A448((char *)v1046, (long long *)v382[8], (long long *)v382[9], 0xAAAAAAAAAAAAAAABLL * ((v382[9] - v382[8]) >> 3));
  sub_599C((int)v565, "Occupancy Manager Target");
  uint64_t v384 = (uint64_t *)sub_5A9C((uint64_t)v565, 0xFu, 3, (uint64_t)sub_122D1C);
  long long v385 = sub_5C60(v384, "Thread Occupancy");
  uint64_t v386 = sub_5C60(v385, "One Pass");
  long long v387 = *(_OWORD *)v386;
  int v1048 = *((_DWORD *)v386 + 4);
  long long v1047 = v387;
  sub_110F60((uint64_t)&v1049, (uint64_t)(v386 + 3));
  memset(v1050, 0, sizeof(v1050));
  sub_A448((char *)v1050, (long long *)v386[8], (long long *)v386[9], 0xAAAAAAAAAAAAAAABLL * ((v386[9] - v386[8]) >> 3));
  sub_599C((int)v564, "AF Bandwidth");
  uint64_t v388 = sub_5B90((uint64_t)v564, 0xBu, 2, 0xBuLL, 3, (uint64_t)sub_122F20);
  uint64_t v389 = sub_5B90(v388, 0xCu, 2, 0xEuLL, 3, (uint64_t)sub_122FB0);
  uint64_t v390 = sub_5A9C(v389, 0xEu, 4, (uint64_t)sub_1230C0);
  long long v391 = (uint64_t *)sub_5A3C(v390, 15, 2, (uint64_t)sub_122FB0);
  uint64_t v392 = sub_5C60(v391, "Memory Bandwidth");
  uint64_t v393 = sub_5C60(v392, "System Memory Bandwidth");
  long long v394 = sub_5C60(v393, "One Pass");
  long long v395 = *(_OWORD *)v394;
  int v1052 = *((_DWORD *)v394 + 4);
  long long v1051 = v395;
  sub_110F60((uint64_t)&v1053, (uint64_t)(v394 + 3));
  memset(v1054, 0, sizeof(v1054));
  sub_A448((char *)v1054, (long long *)v394[8], (long long *)v394[9], 0xAAAAAAAAAAAAAAABLL * ((v394[9] - v394[8]) >> 3));
  sub_599C((int)v563, "AF Read Bandwidth");
  uint64_t v396 = sub_5B90((uint64_t)v563, 0xBu, 2, 0xBuLL, 3, (uint64_t)sub_123210);
  uint64_t v397 = sub_5B90(v396, 0xCu, 2, 0xEuLL, 3, (uint64_t)sub_1232A0);
  uint64_t v398 = sub_5A9C(v397, 0xEu, 4, (uint64_t)sub_123370);
  uint64_t v399 = (uint64_t *)sub_5A3C(v398, 15, 2, (uint64_t)sub_1232A0);
  long long v400 = sub_5C60(v399, "Memory Bandwidth");
  uint64_t v401 = sub_5C60(v400, "System Memory Bandwidth");
  uint64_t v402 = sub_5C60(v401, "One Pass");
  long long v403 = *(_OWORD *)v402;
  int v1056 = *((_DWORD *)v402 + 4);
  long long v1055 = v403;
  sub_110F60((uint64_t)&v1057, (uint64_t)(v402 + 3));
  memset(v1058, 0, sizeof(v1058));
  sub_A448((char *)v1058, (long long *)v402[8], (long long *)v402[9], 0xAAAAAAAAAAAAAAABLL * ((v402[9] - v402[8]) >> 3));
  sub_599C((int)v562, "AF Write Bandwidth");
  uint64_t v404 = (uint64_t *)sub_5A9C((uint64_t)v562, 0xBu, 2, (uint64_t)sub_123440);
  uint64_t v405 = sub_5C60(v404, "Memory Bandwidth");
  long long v406 = sub_5C60(v405, "System Memory Bandwidth");
  uint64_t v407 = sub_5C60(v406, "One Pass");
  long long v408 = *(_OWORD *)v407;
  int v1060 = *((_DWORD *)v407 + 4);
  long long v1059 = v408;
  sub_110F60((uint64_t)&v1061, (uint64_t)(v407 + 3));
  memset(v1062, 0, sizeof(v1062));
  sub_A448((char *)v1062, (long long *)v407[8], (long long *)v407[9], 0xAAAAAAAAAAAAAAABLL * ((v407[9] - v407[8]) >> 3));
  sub_599C((int)v561, "L2 Bandwidth");
  long long v409 = (uint64_t *)sub_5A9C((uint64_t)v561, 0xBu, 2, (uint64_t)sub_1234DC);
  unint64_t v410 = sub_5C60(v409, "Memory Bandwidth");
  uint64_t v411 = sub_5C60(v410, "Internal Memory Bandwidth");
  long long v412 = sub_5C60(v411, "One Pass");
  long long v413 = *(_OWORD *)v412;
  int v1064 = *((_DWORD *)v412 + 4);
  long long v1063 = v413;
  sub_110F60((uint64_t)&v1065, (uint64_t)(v412 + 3));
  memset(v1066, 0, sizeof(v1066));
  sub_A448((char *)v1066, (long long *)v412[8], (long long *)v412[9], 0xAAAAAAAAAAAAAAABLL * ((v412[9] - v412[8]) >> 3));
  sub_599C((int)v560, "L1 Load Bandwidth");
  uint64_t v414 = sub_5B90((uint64_t)v560, 0xDu, 2, 0xFuLL, 2, (uint64_t)sub_12356C);
  long long v415 = (uint64_t *)sub_5A9C(v414, 0xFu, 3, (uint64_t)sub_1235FC);
  int v416 = sub_5C60(v415, "Memory Bandwidth");
  uint64_t v417 = sub_5C60(v416, "Internal Memory Bandwidth");
  long long v418 = sub_5C60(v417, "One Pass");
  long long v419 = *(_OWORD *)v418;
  int v1068 = *((_DWORD *)v418 + 4);
  long long v1067 = v419;
  sub_110F60((uint64_t)&v1069, (uint64_t)(v418 + 3));
  memset(v1070, 0, sizeof(v1070));
  sub_A448((char *)v1070, (long long *)v418[8], (long long *)v418[9], 0xAAAAAAAAAAAAAAABLL * ((v418[9] - v418[8]) >> 3));
  sub_599C((int)v559, "L1 Store Bandwidth");
  uint64_t v420 = sub_5B90((uint64_t)v559, 0xDu, 2, 0xFuLL, 2, (uint64_t)sub_12365C);
  long long v421 = (uint64_t *)sub_5A9C(v420, 0xFu, 3, (uint64_t)sub_1236EC);
  unint64_t v422 = sub_5C60(v421, "Memory Bandwidth");
  uint64_t v423 = sub_5C60(v422, "Internal Memory Bandwidth");
  long long v424 = sub_5C60(v423, "One Pass");
  long long v425 = *(_OWORD *)v424;
  int v1072 = *((_DWORD *)v424 + 4);
  long long v1071 = v425;
  sub_110F60((uint64_t)&v1073, (uint64_t)(v424 + 3));
  memset(v1074, 0, sizeof(v1074));
  sub_A448((char *)v1074, (long long *)v424[8], (long long *)v424[9], 0xAAAAAAAAAAAAAAABLL * ((v424[9] - v424[8]) >> 3));
  sub_599C((int)v558, "Threadgroup Memory Load Bandwidth");
  unint64_t v426 = (uint64_t *)sub_5B90((uint64_t)v558, 0xDu, 2, 0xFuLL, 2, (uint64_t)sub_12374C);
  long long v427 = sub_5C60(v426, "Memory Bandwidth");
  uint64_t v428 = sub_5C60(v427, "Internal Memory Bandwidth");
  unint64_t v429 = sub_5C60(v428, "One Pass");
  long long v430 = *(_OWORD *)v429;
  int v1076 = *((_DWORD *)v429 + 4);
  long long v1075 = v430;
  sub_110F60((uint64_t)&v1077, (uint64_t)(v429 + 3));
  memset(v1078, 0, sizeof(v1078));
  sub_A448((char *)v1078, (long long *)v429[8], (long long *)v429[9], 0xAAAAAAAAAAAAAAABLL * ((v429[9] - v429[8]) >> 3));
  sub_599C((int)v557, "Threadgroup Memory Store Bandwidth");
  uint64_t v431 = (uint64_t *)sub_5B90((uint64_t)v557, 0xDu, 2, 0xFuLL, 2, (uint64_t)sub_123820);
  unint64_t v432 = sub_5C60(v431, "Memory Bandwidth");
  long long v433 = sub_5C60(v432, "Internal Memory Bandwidth");
  uint64_t v434 = sub_5C60(v433, "One Pass");
  long long v435 = *(_OWORD *)v434;
  int v1080 = *((_DWORD *)v434 + 4);
  long long v1079 = v435;
  sub_110F60((uint64_t)&v1081, (uint64_t)(v434 + 3));
  memset(v1082, 0, sizeof(v1082));
  sub_A448((char *)v1082, (long long *)v434[8], (long long *)v434[9], 0xAAAAAAAAAAAAAAABLL * ((v434[9] - v434[8]) >> 3));
  sub_599C((int)v556, "Threadgroup Memory L1 Load Bandwidth");
  long long v436 = (uint64_t *)sub_5A9C((uint64_t)v556, 0xFu, 3, (uint64_t)sub_12374C);
  unint64_t v437 = sub_5C60(v436, "Memory Bandwidth");
  uint64_t v438 = sub_5C60(v437, "Internal Memory Bandwidth");
  long long v439 = sub_5C60(v438, "One Pass");
  long long v440 = *(_OWORD *)v439;
  int v1084 = *((_DWORD *)v439 + 4);
  long long v1083 = v440;
  sub_110F60((uint64_t)&v1085, (uint64_t)(v439 + 3));
  memset(v1086, 0, sizeof(v1086));
  sub_A448((char *)v1086, (long long *)v439[8], (long long *)v439[9], 0xAAAAAAAAAAAAAAABLL * ((v439[9] - v439[8]) >> 3));
  sub_599C((int)v555, "Threadgroup Memory L1 Store Bandwidth");
  uint64_t v441 = (uint64_t *)sub_5A9C((uint64_t)v555, 0xFu, 3, (uint64_t)sub_123820);
  long long v442 = sub_5C60(v441, "Memory Bandwidth");
  uint64_t v443 = sub_5C60(v442, "Internal Memory Bandwidth");
  unint64_t v444 = sub_5C60(v443, "One Pass");
  long long v445 = *(_OWORD *)v444;
  int v1088 = *((_DWORD *)v444 + 4);
  long long v1087 = v445;
  sub_110F60((uint64_t)&v1089, (uint64_t)(v444 + 3));
  memset(v1090, 0, sizeof(v1090));
  sub_A448((char *)v1090, (long long *)v444[8], (long long *)v444[9], 0xAAAAAAAAAAAAAAABLL * ((v444[9] - v444[8]) >> 3));
  sub_599C((int)v554, "Imageblock L1 Load Bandwidth");
  uint64_t v446 = (uint64_t *)sub_5A9C((uint64_t)v554, 0xFu, 3, (uint64_t)sub_1238F4);
  uint64_t v447 = sub_5C60(v446, "Memory Bandwidth");
  long long v448 = sub_5C60(v447, "Internal Memory Bandwidth");
  unint64_t v449 = sub_5C60(v448, "One Pass");
  long long v450 = *(_OWORD *)v449;
  int v1092 = *((_DWORD *)v449 + 4);
  long long v1091 = v450;
  sub_110F60((uint64_t)&v1093, (uint64_t)(v449 + 3));
  memset(v1094, 0, sizeof(v1094));
  sub_A448((char *)v1094, (long long *)v449[8], (long long *)v449[9], 0xAAAAAAAAAAAAAAABLL * ((v449[9] - v449[8]) >> 3));
  sub_599C((int)v553, "Imageblock L1 Store Bandwidth");
  long long v451 = (uint64_t *)sub_5A9C((uint64_t)v553, 0xFu, 3, (uint64_t)sub_123A08);
  uint64_t v452 = sub_5C60(v451, "Memory Bandwidth");
  unint64_t v453 = sub_5C60(v452, "Internal Memory Bandwidth");
  long long v454 = sub_5C60(v453, "One Pass");
  long long v455 = *(_OWORD *)v454;
  int v1096 = *((_DWORD *)v454 + 4);
  long long v1095 = v455;
  sub_110F60((uint64_t)&v1097, (uint64_t)(v454 + 3));
  memset(v1098, 0, sizeof(v1098));
  sub_A448((char *)v1098, (long long *)v454[8], (long long *)v454[9], 0xAAAAAAAAAAAAAAABLL * ((v454[9] - v454[8]) >> 3));
  sub_599C((int)v552, "Raytracing Scratch L1 Load Bandwidth");
  unint64_t v456 = (uint64_t *)sub_5A9C((uint64_t)v552, 0xFu, 3, (uint64_t)sub_123B1C);
  long long v457 = sub_5C60(v456, "Memory Bandwidth");
  unint64_t v458 = sub_5C60(v457, "Internal Memory Bandwidth");
  unint64_t v459 = sub_5C60(v458, "One Pass");
  long long v460 = *(_OWORD *)v459;
  int v1100 = *((_DWORD *)v459 + 4);
  long long v1099 = v460;
  sub_110F60((uint64_t)&v1101, (uint64_t)(v459 + 3));
  memset(v1102, 0, sizeof(v1102));
  sub_A448((char *)v1102, (long long *)v459[8], (long long *)v459[9], 0xAAAAAAAAAAAAAAABLL * ((v459[9] - v459[8]) >> 3));
  sub_599C((int)v551, "Raytracing Scratch L1 Store Bandwidth");
  uint64_t v461 = (uint64_t *)sub_5A9C((uint64_t)v551, 0xFu, 3, (uint64_t)sub_123BF0);
  uint64_t v462 = sub_5C60(v461, "Memory Bandwidth");
  long long v463 = sub_5C60(v462, "Internal Memory Bandwidth");
  int v464 = sub_5C60(v463, "One Pass");
  long long v465 = *(_OWORD *)v464;
  int v1104 = *((_DWORD *)v464 + 4);
  long long v1103 = v465;
  sub_110F60((uint64_t)&v1105, (uint64_t)(v464 + 3));
  memset(v1106, 0, sizeof(v1106));
  sub_A448((char *)v1106, (long long *)v464[8], (long long *)v464[9], 0xAAAAAAAAAAAAAAABLL * ((v464[9] - v464[8]) >> 3));
  sub_599C((int)v550, "Other L1 Load Bandwidth");
  long long v466 = (uint64_t *)sub_5A9C((uint64_t)v550, 0xFu, 3, (uint64_t)sub_123CC4);
  unint64_t v467 = sub_5C60(v466, "Memory Bandwidth");
  unint64_t v468 = sub_5C60(v467, "Internal Memory Bandwidth");
  long long v469 = sub_5C60(v468, "One Pass");
  long long v470 = *(_OWORD *)v469;
  int v1108 = *((_DWORD *)v469 + 4);
  long long v1107 = v470;
  sub_110F60((uint64_t)&v1109, (uint64_t)(v469 + 3));
  memset(v1110, 0, sizeof(v1110));
  sub_A448((char *)v1110, (long long *)v469[8], (long long *)v469[9], 0xAAAAAAAAAAAAAAABLL * ((v469[9] - v469[8]) >> 3));
  sub_599C((int)v549, "Other L1 Store Bandwidth");
  unint64_t v471 = (uint64_t *)sub_5A9C((uint64_t)v549, 0xFu, 3, (uint64_t)sub_123DD8);
  long long v472 = sub_5C60(v471, "Memory Bandwidth");
  unint64_t v473 = sub_5C60(v472, "Internal Memory Bandwidth");
  uint64_t v474 = sub_5C60(v473, "One Pass");
  long long v475 = *(_OWORD *)v474;
  int v1112 = *((_DWORD *)v474 + 4);
  long long v1111 = v475;
  sub_110F60((uint64_t)&v1113, (uint64_t)(v474 + 3));
  memset(v1114, 0, sizeof(v1114));
  sub_A448((char *)v1114, (long long *)v474[8], (long long *)v474[9], 0xAAAAAAAAAAAAAAABLL * ((v474[9] - v474[8]) >> 3));
  sub_599C((int)v548, "GPR L1 Load Bandwidth");
  uint64_t v476 = (uint64_t *)sub_5A9C((uint64_t)v548, 0xFu, 3, (uint64_t)sub_123EEC);
  uint64_t v477 = sub_5C60(v476, "Memory Bandwidth");
  long long v478 = sub_5C60(v477, "Internal Memory Bandwidth");
  unint64_t v479 = sub_5C60(v478, "One Pass");
  long long v480 = *(_OWORD *)v479;
  int v1116 = *((_DWORD *)v479 + 4);
  long long v1115 = v480;
  sub_110F60((uint64_t)&v1117, (uint64_t)(v479 + 3));
  memset(v1118, 0, sizeof(v1118));
  sub_A448((char *)v1118, (long long *)v479[8], (long long *)v479[9], 0xAAAAAAAAAAAAAAABLL * ((v479[9] - v479[8]) >> 3));
  sub_599C((int)v547, "GPR L1 Store Bandwidth");
  long long v481 = (uint64_t *)sub_5A9C((uint64_t)v547, 0xFu, 3, (uint64_t)sub_123FC0);
  uint64_t v482 = sub_5C60(v481, "Memory Bandwidth");
  uint64_t v483 = sub_5C60(v482, "Internal Memory Bandwidth");
  long long v484 = sub_5C60(v483, "One Pass");
  long long v485 = *(_OWORD *)v484;
  int v1120 = *((_DWORD *)v484 + 4);
  long long v1119 = v485;
  sub_110F60((uint64_t)&v1121, (uint64_t)(v484 + 3));
  memset(v1122, 0, sizeof(v1122));
  sub_A448((char *)v1122, (long long *)v484[8], (long long *)v484[9], 0xAAAAAAAAAAAAAAABLL * ((v484[9] - v484[8]) >> 3));
  sub_599C((int)v546, "Stack L1 Load Bandwidth");
  int v486 = (uint64_t *)sub_5A9C((uint64_t)v546, 0xFu, 3, (uint64_t)sub_124094);
  long long v487 = sub_5C60(v486, "Memory Bandwidth");
  uint64_t v488 = sub_5C60(v487, "Internal Memory Bandwidth");
  unint64_t v489 = sub_5C60(v488, "One Pass");
  long long v490 = *(_OWORD *)v489;
  int v1124 = *((_DWORD *)v489 + 4);
  long long v1123 = v490;
  sub_110F60((uint64_t)&v1125, (uint64_t)(v489 + 3));
  memset(v1126, 0, sizeof(v1126));
  sub_A448((char *)v1126, (long long *)v489[8], (long long *)v489[9], 0xAAAAAAAAAAAAAAABLL * ((v489[9] - v489[8]) >> 3));
  sub_599C((int)v545, "Stack L1 Store Bandwidth");
  unint64_t v491 = (uint64_t *)sub_5A9C((uint64_t)v545, 0xFu, 3, (uint64_t)sub_124168);
  uint64_t v492 = sub_5C60(v491, "Memory Bandwidth");
  long long v493 = sub_5C60(v492, "Internal Memory Bandwidth");
  unint64_t v494 = sub_5C60(v493, "One Pass");
  long long v495 = *(_OWORD *)v494;
  int v1128 = *((_DWORD *)v494 + 4);
  long long v1127 = v495;
  sub_110F60((uint64_t)&v1129, (uint64_t)(v494 + 3));
  memset(v1130, 0, sizeof(v1130));
  sub_A448((char *)v1130, (long long *)v494[8], (long long *)v494[9], 0xAAAAAAAAAAAAAAABLL * ((v494[9] - v494[8]) >> 3));
  sub_599C((int)v544, "Buffer L1 Load Bandwidth");
  long long v496 = (uint64_t *)sub_5A9C((uint64_t)v544, 0xFu, 3, (uint64_t)sub_12423C);
  unint64_t v497 = sub_5C60(v496, "Memory Bandwidth");
  uint64_t v498 = sub_5C60(v497, "Internal Memory Bandwidth");
  long long v499 = sub_5C60(v498, "One Pass");
  long long v500 = *(_OWORD *)v499;
  int v1132 = *((_DWORD *)v499 + 4);
  long long v1131 = v500;
  sub_110F60((uint64_t)&v1133, (uint64_t)(v499 + 3));
  memset(v1134, 0, sizeof(v1134));
  sub_A448((char *)v1134, (long long *)v499[8], (long long *)v499[9], 0xAAAAAAAAAAAAAAABLL * ((v499[9] - v499[8]) >> 3));
  sub_599C((int)v543, "Buffer L1 Store Bandwidth");
  unint64_t v501 = (uint64_t *)sub_5A9C((uint64_t)v543, 0xFu, 3, (uint64_t)sub_124310);
  long long v502 = sub_5C60(v501, "Memory Bandwidth");
  unint64_t v503 = sub_5C60(v502, "Internal Memory Bandwidth");
  unint64_t v504 = sub_5C60(v503, "One Pass");
  long long v505 = *(_OWORD *)v504;
  int v1136 = *((_DWORD *)v504 + 4);
  long long v1135 = v505;
  sub_110F60((uint64_t)&v1137, (uint64_t)(v504 + 3));
  memset(v1138, 0, sizeof(v1138));
  sub_A448((char *)v1138, (long long *)v504[8], (long long *)v504[9], 0xAAAAAAAAAAAAAAABLL * ((v504[9] - v504[8]) >> 3));
  sub_599C((int)v542, "Raytracing Active");
  uint64_t v506 = (uint64_t *)sub_5A9C((uint64_t)v542, 0xFu, 3, (uint64_t)sub_1243E4);
  uint64_t v507 = sub_5C60(v506, "Raytracing Limiters");
  long long v508 = sub_5C60(v507, "One Pass");
  long long v509 = *(_OWORD *)v508;
  int v1140 = *((_DWORD *)v508 + 4);
  long long v1139 = v509;
  sub_110F60((uint64_t)&v1141, (uint64_t)(v508 + 3));
  memset(v1142, 0, sizeof(v1142));
  sub_A448((char *)v1142, (long long *)v508[8], (long long *)v508[9], 0xAAAAAAAAAAAAAAABLL * ((v508[9] - v508[8]) >> 3));
  sub_599C((int)v541, "Raytracing Active GT");
  uint64_t v510 = (uint64_t *)sub_5A9C((uint64_t)v541, 0xFu, 3, (uint64_t)sub_124460);
  long long v511 = sub_5C60(v510, "One Pass GT");
  long long v512 = *(_OWORD *)v511;
  int v1144 = *((_DWORD *)v511 + 4);
  long long v1143 = v512;
  sub_110F60((uint64_t)&v1145, (uint64_t)(v511 + 3));
  memset(v1146, 0, sizeof(v1146));
  sub_A448((char *)v1146, (long long *)v511[8], (long long *)v511[9], 0xAAAAAAAAAAAAAAABLL * ((v511[9] - v511[8]) >> 3));
  sub_599C((int)v540, "Ray Occupancy");
  unint64_t v513 = (uint64_t *)sub_5A9C((uint64_t)v540, 0xFu, 3, (uint64_t)sub_1245B4);
  long long v514 = sub_5C60(v513, "Raytracing Limiters");
  unint64_t v515 = sub_5C60(v514, "One Pass");
  long long v516 = *(_OWORD *)v515;
  int v1148 = *((_DWORD *)v515 + 4);
  long long v1147 = v516;
  sub_110F60((uint64_t)&v1149, (uint64_t)(v515 + 3));
  memset(v1150, 0, sizeof(v1150));
  sub_A448((char *)v1150, (long long *)v515[8], (long long *)v515[9], 0xAAAAAAAAAAAAAAABLL * ((v515[9] - v515[8]) >> 3));
  sub_599C((int)v539, "Leaf Test Occupancy");
  long long v517 = (uint64_t *)sub_5A9C((uint64_t)v539, 0xFu, 3, (uint64_t)sub_12478C);
  unsigned int v518 = sub_5C60(v517, "Raytracing Limiters");
  unint64_t v519 = sub_5C60(v518, "One Pass");
  long long v520 = *(_OWORD *)v519;
  int v1152 = *((_DWORD *)v519 + 4);
  long long v1151 = v520;
  sub_110F60((uint64_t)&v1153, (uint64_t)(v519 + 3));
  memset(v1154, 0, sizeof(v1154));
  sub_A448((char *)v1154, (long long *)v519[8], (long long *)v519[9], 0xAAAAAAAAAAAAAAABLL * ((v519[9] - v519[8]) >> 3));
  sub_599C((int)v538, "Raytracing Node Test");
  uint64_t v521 = (uint64_t *)sub_5A9C((uint64_t)v538, 0xFu, 3, (uint64_t)sub_124964);
  unint64_t v522 = sub_5C60(v521, "Raytracing");
  long long v523 = sub_5C60(v522, "One Pass");
  long long v524 = *(_OWORD *)v523;
  int v1156 = *((_DWORD *)v523 + 4);
  long long v1155 = v524;
  sub_110F60((uint64_t)&v1157, (uint64_t)(v523 + 3));
  memset(v1158, 0, sizeof(v1158));
  sub_A448((char *)v1158, (long long *)v523[8], (long long *)v523[9], 0xAAAAAAAAAAAAAAABLL * ((v523[9] - v523[8]) >> 3));
  sub_599C((int)v537, "Ray T Leaf Test");
  unint64_t v525 = (uint64_t *)sub_5A9C((uint64_t)v537, 0xFu, 3, (uint64_t)sub_1249B8);
  long long v526 = sub_5C60(v525, "Raytracing");
  uint64_t v527 = sub_5C60(v526, "One Pass");
  long long v528 = *(_OWORD *)v527;
  int v1160 = *((_DWORD *)v527 + 4);
  long long v1159 = v528;
  sub_110F60((uint64_t)&v1161, (uint64_t)(v527 + 3));
  memset(v1162, 0, sizeof(v1162));
  sub_A448((char *)v1162, (long long *)v527[8], (long long *)v527[9], 0xAAAAAAAAAAAAAAABLL * ((v527[9] - v527[8]) >> 3));
  sub_599C((int)&v536, "Intersect Ray Threads");
  long long v529 = (uint64_t *)sub_5A9C((uint64_t)&v536, 0xFu, 3, (uint64_t)sub_124A0C);
  int v530 = sub_5C60(v529, "Raytracing");
  unint64_t v531 = sub_5C60(v530, "One Pass");
  long long v532 = *(_OWORD *)v531;
  int v1164 = *((_DWORD *)v531 + 4);
  long long v1163 = v532;
  sub_110F60((uint64_t)&v1165, (uint64_t)(v531 + 3));
  memset(v1166, 0, sizeof(v1166));
  sub_A448((char *)v1166, (long long *)v531[8], (long long *)v531[9], 0xAAAAAAAAAAAAAAABLL * ((v531[9] - v531[8]) >> 3));
  void *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  v661[11] = v1;
  char v662 = 0;
  unsigned int v533 = (char *)operator new(0x2B50uLL);
  void *v1 = v533;
  v1[1] = v533;
  v1[2] = v533 + 11088;
  uint64_t v534 = 0;
  v1[1] = sub_111200((uint64_t)(v1 + 2), (uint64_t)&v663, (uint64_t)&v1167, (uint64_t)v533);
  do
  {
    sub_5A38((uint64_t)&v1163 + v534);
    v534 -= 88;
  }
  while (v534 != -11088);
  sub_5A38((uint64_t)&v536);
  sub_5A38((uint64_t)v537);
  sub_5A38((uint64_t)v538);
  sub_5A38((uint64_t)v539);
  sub_5A38((uint64_t)v540);
  sub_5A38((uint64_t)v541);
  sub_5A38((uint64_t)v542);
  sub_5A38((uint64_t)v543);
  sub_5A38((uint64_t)v544);
  sub_5A38((uint64_t)v545);
  sub_5A38((uint64_t)v546);
  sub_5A38((uint64_t)v547);
  sub_5A38((uint64_t)v548);
  sub_5A38((uint64_t)v549);
  sub_5A38((uint64_t)v550);
  sub_5A38((uint64_t)v551);
  sub_5A38((uint64_t)v552);
  sub_5A38((uint64_t)v553);
  sub_5A38((uint64_t)v554);
  sub_5A38((uint64_t)v555);
  sub_5A38((uint64_t)v556);
  sub_5A38((uint64_t)v557);
  sub_5A38((uint64_t)v558);
  sub_5A38((uint64_t)v559);
  sub_5A38((uint64_t)v560);
  sub_5A38((uint64_t)v561);
  sub_5A38((uint64_t)v562);
  sub_5A38((uint64_t)v563);
  sub_5A38((uint64_t)v564);
  sub_5A38((uint64_t)v565);
  sub_5A38((uint64_t)v566);
  sub_5A38((uint64_t)v567);
  sub_5A38((uint64_t)v568);
  sub_5A38((uint64_t)v569);
  sub_5A38((uint64_t)v570);
  sub_5A38((uint64_t)v571);
  sub_5A38((uint64_t)v572);
  sub_5A38((uint64_t)v573);
  sub_5A38((uint64_t)v574);
  sub_5A38((uint64_t)v575);
  sub_5A38((uint64_t)v576);
  sub_5A38((uint64_t)v577);
  sub_5A38((uint64_t)v578);
  sub_5A38((uint64_t)v579);
  sub_5A38((uint64_t)v580);
  sub_5A38((uint64_t)v581);
  sub_5A38((uint64_t)v582);
  sub_5A38((uint64_t)v583);
  sub_5A38((uint64_t)v584);
  sub_5A38((uint64_t)v585);
  sub_5A38((uint64_t)v586);
  sub_5A38((uint64_t)v587);
  sub_5A38((uint64_t)v588);
  sub_5A38((uint64_t)v589);
  sub_5A38((uint64_t)v590);
  sub_5A38((uint64_t)v591);
  sub_5A38((uint64_t)v592);
  sub_5A38((uint64_t)v593);
  sub_5A38((uint64_t)v594);
  sub_5A38((uint64_t)v595);
  sub_5A38((uint64_t)v596);
  sub_5A38((uint64_t)v597);
  sub_5A38((uint64_t)v598);
  sub_5A38((uint64_t)v599);
  sub_5A38((uint64_t)v600);
  sub_5A38((uint64_t)v601);
  sub_5A38((uint64_t)v602);
  sub_5A38((uint64_t)v603);
  sub_5A38((uint64_t)v604);
  sub_5A38((uint64_t)v605);
  sub_5A38((uint64_t)v606);
  sub_5A38((uint64_t)v607);
  sub_5A38((uint64_t)v608);
  sub_5A38((uint64_t)v609);
  sub_5A38((uint64_t)v610);
  sub_5A38((uint64_t)v611);
  sub_5A38((uint64_t)v612);
  sub_5A38((uint64_t)v613);
  sub_5A38((uint64_t)v614);
  sub_5A38((uint64_t)v615);
  sub_5A38((uint64_t)v616);
  sub_5A38((uint64_t)v617);
  sub_5A38((uint64_t)v618);
  sub_5A38((uint64_t)v619);
  sub_5A38((uint64_t)v620);
  sub_5A38((uint64_t)v621);
  sub_5A38((uint64_t)v622);
  sub_5A38((uint64_t)v623);
  sub_5A38((uint64_t)v624);
  sub_5A38((uint64_t)v625);
  sub_5A38((uint64_t)v626);
  sub_5A38((uint64_t)v627);
  sub_5A38((uint64_t)v628);
  sub_5A38((uint64_t)v629);
  sub_5A38((uint64_t)v630);
  sub_5A38((uint64_t)v631);
  sub_5A38((uint64_t)v632);
  sub_5A38((uint64_t)v633);
  sub_5A38((uint64_t)v634);
  sub_5A38((uint64_t)v635);
  sub_5A38((uint64_t)v636);
  sub_5A38((uint64_t)v637);
  sub_5A38((uint64_t)v638);
  sub_5A38((uint64_t)v639);
  sub_5A38((uint64_t)v640);
  sub_5A38((uint64_t)v641);
  sub_5A38((uint64_t)v642);
  sub_5A38((uint64_t)v643);
  sub_5A38((uint64_t)v644);
  sub_5A38((uint64_t)v645);
  sub_5A38((uint64_t)v646);
  sub_5A38((uint64_t)v647);
  sub_5A38((uint64_t)v648);
  sub_5A38((uint64_t)v649);
  sub_5A38((uint64_t)v650);
  sub_5A38((uint64_t)v651);
  sub_5A38((uint64_t)v652);
  sub_5A38((uint64_t)v653);
  sub_5A38((uint64_t)v654);
  sub_5A38((uint64_t)v655);
  sub_5A38((uint64_t)v656);
  sub_5A38((uint64_t)v657);
  sub_5A38((uint64_t)v658);
  sub_5A38((uint64_t)v659);
  sub_5A38((uint64_t)v660);
  return sub_5A38((uint64_t)v661);
}

void sub_117DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  *(void *)(v65 + 8) = v66;
  sub_D2A4((void ***)&STACK[0x2B50]);
  uint64_t v68 = -11088;
  uint64_t v69 = v64;
  do
  {
    uint64_t v69 = sub_5A38(v69) - 88;
    v68 += 88;
  }
  while (v68);
  sub_5A38((uint64_t)&a9);
  sub_5A38((uint64_t)&a20);
  sub_5A38((uint64_t)&a31);
  sub_5A38((uint64_t)&a42);
  sub_5A38((uint64_t)&a53);
  sub_5A38((uint64_t)&a64);
  sub_5A38((uint64_t)&STACK[0x210]);
  sub_5A38((uint64_t)&STACK[0x268]);
  sub_5A38((uint64_t)&STACK[0x2C0]);
  sub_5A38((uint64_t)&STACK[0x318]);
  sub_5A38((uint64_t)&STACK[0x370]);
  sub_5A38((uint64_t)&STACK[0x3C8]);
  sub_5A38((uint64_t)&STACK[0x420]);
  sub_5A38((uint64_t)&STACK[0x478]);
  sub_5A38((uint64_t)&STACK[0x4D0]);
  sub_5A38((uint64_t)&STACK[0x528]);
  sub_5A38((uint64_t)&STACK[0x580]);
  sub_5A38((uint64_t)&STACK[0x5D8]);
  sub_5A38((uint64_t)&STACK[0x630]);
  sub_5A38((uint64_t)&STACK[0x688]);
  sub_5A38((uint64_t)&STACK[0x6E0]);
  sub_5A38((uint64_t)&STACK[0x738]);
  sub_5A38((uint64_t)&STACK[0x790]);
  sub_5A38((uint64_t)&STACK[0x7E8]);
  sub_5A38((uint64_t)&STACK[0x840]);
  sub_5A38((uint64_t)&STACK[0x898]);
  sub_5A38((uint64_t)&STACK[0x8F0]);
  sub_5A38((uint64_t)&STACK[0x948]);
  sub_5A38((uint64_t)&STACK[0x9A0]);
  sub_5A38((uint64_t)&STACK[0x9F8]);
  sub_5A38((uint64_t)&STACK[0xA50]);
  sub_5A38((uint64_t)&STACK[0xAA8]);
  sub_5A38((uint64_t)&STACK[0xB00]);
  sub_5A38((uint64_t)&STACK[0xB58]);
  sub_5A38((uint64_t)&STACK[0xBB0]);
  sub_5A38((uint64_t)&STACK[0xC08]);
  sub_5A38((uint64_t)&STACK[0xC60]);
  sub_5A38((uint64_t)&STACK[0xCB8]);
  sub_5A38((uint64_t)&STACK[0xD10]);
  sub_5A38((uint64_t)&STACK[0xD68]);
  sub_5A38((uint64_t)&STACK[0xDC0]);
  sub_5A38((uint64_t)&STACK[0xE18]);
  sub_5A38((uint64_t)&STACK[0xE70]);
  sub_5A38((uint64_t)&STACK[0xEC8]);
  sub_5A38((uint64_t)&STACK[0xF20]);
  sub_5A38((uint64_t)&STACK[0xF78]);
  sub_5A38((uint64_t)&STACK[0xFD0]);
  sub_5A38((uint64_t)&STACK[0x1028]);
  sub_5A38((uint64_t)&STACK[0x1080]);
  sub_5A38((uint64_t)&STACK[0x10D8]);
  sub_5A38((uint64_t)&STACK[0x1130]);
  sub_5A38((uint64_t)&STACK[0x1188]);
  sub_5A38((uint64_t)&STACK[0x11E0]);
  sub_5A38((uint64_t)&STACK[0x1238]);
  sub_5A38((uint64_t)&STACK[0x1290]);
  sub_5A38((uint64_t)&STACK[0x12E8]);
  sub_5A38((uint64_t)&STACK[0x1340]);
  sub_5A38((uint64_t)&STACK[0x1398]);
  sub_5A38((uint64_t)&STACK[0x13F0]);
  sub_5A38((uint64_t)&STACK[0x1448]);
  sub_5A38((uint64_t)&STACK[0x14A0]);
  sub_5A38((uint64_t)&STACK[0x14F8]);
  sub_5A38((uint64_t)&STACK[0x1550]);
  sub_5A38((uint64_t)&STACK[0x15A8]);
  sub_5A38((uint64_t)&STACK[0x1600]);
  sub_5A38((uint64_t)&STACK[0x1658]);
  sub_5A38((uint64_t)&STACK[0x16B0]);
  sub_5A38((uint64_t)&STACK[0x1708]);
  sub_5A38((uint64_t)&STACK[0x1760]);
  sub_5A38((uint64_t)&STACK[0x17B8]);
  sub_5A38((uint64_t)&STACK[0x1810]);
  sub_5A38((uint64_t)&STACK[0x1868]);
  sub_5A38((uint64_t)&STACK[0x18C0]);
  sub_5A38((uint64_t)&STACK[0x1918]);
  sub_5A38((uint64_t)&STACK[0x1970]);
  sub_5A38((uint64_t)&STACK[0x19C8]);
  sub_5A38((uint64_t)&STACK[0x1A20]);
  sub_5A38((uint64_t)&STACK[0x1A78]);
  sub_5A38((uint64_t)&STACK[0x1AD0]);
  sub_5A38((uint64_t)&STACK[0x1B28]);
  sub_5A38((uint64_t)&STACK[0x1B80]);
  sub_5A38((uint64_t)&STACK[0x1BD8]);
  sub_5A38((uint64_t)&STACK[0x1C30]);
  sub_5A38((uint64_t)&STACK[0x1C88]);
  sub_5A38((uint64_t)&STACK[0x1CE0]);
  sub_5A38((uint64_t)&STACK[0x1D38]);
  sub_5A38((uint64_t)&STACK[0x1D90]);
  sub_5A38((uint64_t)&STACK[0x1DE8]);
  sub_5A38((uint64_t)&STACK[0x1E40]);
  sub_5A38((uint64_t)&STACK[0x1E98]);
  sub_5A38((uint64_t)&STACK[0x1EF0]);
  sub_5A38((uint64_t)&STACK[0x1F48]);
  sub_5A38((uint64_t)&STACK[0x1FA0]);
  sub_5A38((uint64_t)&STACK[0x1FF8]);
  sub_5A38((uint64_t)&STACK[0x2050]);
  sub_5A38((uint64_t)&STACK[0x20A8]);
  sub_5A38((uint64_t)&STACK[0x2100]);
  sub_5A38((uint64_t)&STACK[0x2158]);
  sub_5A38((uint64_t)&STACK[0x21B0]);
  sub_5A38((uint64_t)&STACK[0x2208]);
  sub_5A38((uint64_t)&STACK[0x2260]);
  sub_5A38((uint64_t)&STACK[0x22B8]);
  sub_5A38((uint64_t)&STACK[0x2310]);
  sub_5A38((uint64_t)&STACK[0x2368]);
  sub_5A38((uint64_t)&STACK[0x23C0]);
  sub_5A38((uint64_t)&STACK[0x2418]);
  sub_5A38((uint64_t)&STACK[0x2470]);
  sub_5A38((uint64_t)&STACK[0x24C8]);
  sub_5A38((uint64_t)&STACK[0x2520]);
  sub_5A38((uint64_t)&STACK[0x2578]);
  sub_5A38((uint64_t)&STACK[0x25D0]);
  sub_5A38((uint64_t)&STACK[0x2628]);
  sub_5A38((uint64_t)&STACK[0x2680]);
  sub_5A38((uint64_t)&STACK[0x26D8]);
  sub_5A38((uint64_t)&STACK[0x2730]);
  sub_5A38((uint64_t)&STACK[0x2788]);
  sub_5A38((uint64_t)&STACK[0x27E0]);
  sub_5A38((uint64_t)&STACK[0x2838]);
  sub_5A38((uint64_t)&STACK[0x2890]);
  sub_5A38((uint64_t)&STACK[0x28E8]);
  sub_5A38((uint64_t)&STACK[0x2940]);
  sub_5A38((uint64_t)&STACK[0x2998]);
  sub_5A38((uint64_t)&STACK[0x29F0]);
  sub_5A38((uint64_t)&STACK[0x2A48]);
  sub_5A38((uint64_t)&STACK[0x2AA0]);
  sub_5A38((uint64_t)&STACK[0x2AF8]);
  _Unwind_Resume(a1);
}

uint64_t sub_119338(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  unint64_t v7 = (unsigned int *)(*a2)[2](a2, (int *)"D36BDC945E9A3C2158D269457AE35CC5AD63543965D991AB68A2CC0556E31D50");
  unsigned int v8 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_129_99");
  uint64_t v10 = v9;
  unsigned int v11 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_131_101");
  LODWORD(a4) = sub_D634(v8, v10, v11);
  uint64_t v13 = v12;
  unsigned int v14 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v15 = sub_D8B4(a4, v13, v14);
  size_t v17 = sub_11D84(v7, v15, v16);
  long long v18 = **a2;

  return v18(a2, v17);
}

int *sub_119510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(void, const char *))
{
  long long v5 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "L1 GPR Bytes Occupancy");
  uint64_t v7 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_130_100");

  return sub_13828(v5, v7, v6);
}

uint64_t sub_1195CC(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  uint64_t v7 = (unsigned int *)(*a2)[2](a2, (int *)"FD406D36CD5763CFC9F0DD6C37C7BDC528ADF3990CF9725229F4258C1758C94D");
  unsigned int v8 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_129_99");
  uint64_t v10 = v9;
  unsigned int v11 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_131_101");
  LODWORD(a4) = sub_D634(v8, v10, v11);
  uint64_t v13 = v12;
  unsigned int v14 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v15 = sub_D8B4(a4, v13, v14);
  size_t v17 = sub_11D84(v7, v15, v16);
  long long v18 = **a2;

  return v18(a2, v17);
}

int *sub_1197A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(void, const char *))
{
  long long v5 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "L1 Buffer Bytes Occupancy");
  uint64_t v7 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_130_100");

  return sub_13828(v5, v7, v6);
}

uint64_t sub_119860(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  uint64_t v7 = (unsigned int *)(*a2)[2](a2, (int *)"353FBA19946FC52BCED9C06F6EE4844496369F4985110F6E78E467505E48C88F");
  unsigned int v8 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_129_99");
  uint64_t v10 = v9;
  unsigned int v11 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_131_101");
  LODWORD(a4) = sub_D634(v8, v10, v11);
  uint64_t v13 = v12;
  unsigned int v14 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v15 = sub_D8B4(a4, v13, v14);
  size_t v17 = sub_11D84(v7, v15, v16);
  long long v18 = **a2;

  return v18(a2, v17);
}

int *sub_119A38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(void, const char *))
{
  long long v5 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "L1 Raytracing Scratch Bytes Occupancy");
  uint64_t v7 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_130_100");

  return sub_13828(v5, v7, v6);
}

uint64_t sub_119AF4(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  uint64_t v7 = (unsigned int *)(*a2)[2](a2, (int *)"E9FDDF0E4E3D3ABB4D40C135F207C0310E5BE4CCF2EC1099CB89594DD756B745");
  unsigned int v8 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_129_99");
  uint64_t v10 = v9;
  unsigned int v11 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_131_101");
  LODWORD(a4) = sub_D634(v8, v10, v11);
  uint64_t v13 = v12;
  unsigned int v14 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v15 = sub_D8B4(a4, v13, v14);
  size_t v17 = sub_11D84(v7, v15, v16);
  long long v18 = **a2;

  return v18(a2, v17);
}

int *sub_119CCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(void, const char *))
{
  long long v5 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "L1 Stack Bytes Occupancy");
  uint64_t v7 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_130_100");

  return sub_13828(v5, v7, v6);
}

uint64_t sub_119D88(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  uint64_t v7 = (unsigned int *)(*a2)[2](a2, (int *)"53E08B2D38CDBBC0D198B95302BCC632B50E773651E9BA4C57373B002114CBBC");
  unsigned int v8 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_129_99");
  uint64_t v10 = v9;
  unsigned int v11 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_131_101");
  LODWORD(a4) = sub_D634(v8, v10, v11);
  uint64_t v13 = v12;
  unsigned int v14 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v15 = sub_D8B4(a4, v13, v14);
  size_t v17 = sub_11D84(v7, v15, v16);
  long long v18 = **a2;

  return v18(a2, v17);
}

int *sub_119F60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(void, const char *))
{
  long long v5 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "L1 Threadgroup Bytes Occupancy");
  uint64_t v7 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_130_100");

  return sub_13828(v5, v7, v6);
}

uint64_t sub_11A01C(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  uint64_t v7 = (unsigned int *)(*a2)[2](a2, (int *)"244B94B5F2129A5A0083F3661EAC9C6B9EB5FB62A499E6ED236452F5BE6828F5");
  unsigned int v8 = (unsigned int *)(*a2)[2](a2, (int *)"972B60C198C39199A11F25454037CADA381BB118BE18D850A36534F88A82B7F1");
  uint64_t v9 = sub_DCCC(v7, v8);
  unsigned int v10 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_129_99");
  uint64_t v12 = v11;
  unsigned int v13 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_131_101");
  LODWORD(a4) = sub_D634(v10, v12, v13);
  uint64_t v15 = v14;
  unsigned int v16 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v17 = sub_D8B4(a4, v15, v16);
  long long v19 = sub_11D84((unsigned int *)v9, v17, v18);
  unint64_t v20 = **a2;

  return v20(a2, v19);
}

int *sub_11A234(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(void, const char *))
{
  long long v5 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "L1 Imageblock Bytes Occupancy");
  uint64_t v7 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_130_100");

  return sub_13828(v5, v7, v6);
}

uint64_t sub_11A2F0(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  uint64_t v7 = (unsigned int *)(*a2)[2](a2, (int *)"5537928133BBD235A03487186F42FBFF9D0FC45873C83FD5219EB5EBF500ED10");
  unsigned int v8 = (unsigned int *)(*a2)[2](a2, (int *)"19FCC75261554C74A79C9151422F265347FC6282808C4BB8E9627195837B3682");
  uint64_t v9 = sub_DCCC(v7, v8);
  unsigned int v10 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_129_99");
  uint64_t v12 = v11;
  unsigned int v13 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_131_101");
  LODWORD(a4) = sub_D634(v10, v12, v13);
  uint64_t v15 = v14;
  unsigned int v16 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v17 = sub_D8B4(a4, v15, v16);
  long long v19 = sub_11D84((unsigned int *)v9, v17, v18);
  unint64_t v20 = **a2;

  return v20(a2, v19);
}

int *sub_11A508(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(void, const char *))
{
  long long v5 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "L1 Other Bytes Occupancy");
  uint64_t v7 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_130_100");

  return sub_13828(v5, v7, v6);
}

int *sub_11A5C4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "L1 GPR Bytes Occupancy");
  long long v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "L1 Buffer Bytes Occupancy");
  long long v5 = sub_DCCC(v3, v4);
  unint64_t v6 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "L1 Raytracing Scratch Bytes Occupancy");
  uint64_t v7 = sub_DCCC((unsigned int *)v5, v6);
  unsigned int v8 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "L1 Stack Bytes Occupancy");
  uint64_t v9 = sub_DCCC((unsigned int *)v7, v8);
  unsigned int v10 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "L1 Threadgroup Bytes Occupancy");
  uint64_t v11 = sub_DCCC((unsigned int *)v9, v10);
  uint64_t v12 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "L1 Imageblock Bytes Occupancy");
  unsigned int v13 = sub_DCCC((unsigned int *)v11, v12);
  uint64_t v14 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "L1 Other Bytes Occupancy");

  return sub_DCCC((unsigned int *)v13, v14);
}

int *sub_11A7A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(void, const char *))
{
  long long v5 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "L1 Total Bytes Occupancy");
  uint64_t v7 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_130_100");

  return sub_13828(v5, v7, v6);
}

int *sub_11A85C(uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  uint64_t v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, char *))(*(void *)a2 + 16))(a2, kAGXPSCounterGPUCycles);
  uint64_t v8 = (**a3)(a3, kAGXPSCounterConstantOccupancyManagerEvalWindow);
  unsigned int v10 = sub_13828(v7, v8, v9);
  uint64_t v11 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "EC02EE62A95DE2B0B2BC9C65A400E1318CFD7FFA894EECC7B23F8FB164A10C08");
  uint64_t v12 = sub_128EC(v11, (unsigned int *)v10);
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_137_107");
  uint64_t v14 = v13;
  unsigned int v15 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v16 = sub_D634(a4, v14, v15);
  unint64_t v18 = v17;
  long long v19 = sub_15444((unsigned int *)v12, v16, v17);

  return sub_13828((unsigned int *)v19, v16, v18);
}

int *sub_11AA3C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "5851D9888A5EE313F6D80CC60F6BB6ADFC20BB0BA8D9BED753F04382DF6BED1A");
  long long v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "18487C9D7CEF0D61908387ACBCC7316000F44757B4F9C98EA18217C35C6ECF85");

  return sub_128EC(v3, v4);
}

int *sub_11AAD8(uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  uint64_t v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "5BA476059E7B48575673F80A8DC1251E26C5B23F5DCF5BCB3AB1251D0D3424E8");
  uint64_t v8 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "D613D0441777617363D2EF9031155D28A493ED4CF2B714C61332BEB8E694A21C");
  unint64_t v9 = sub_DCCC(v7, v8);
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_133_103");
  uint64_t v11 = v10;
  unsigned int v12 = sub_D5D4();
  LODWORD(a4) = sub_D634(a4, v11, v12);
  uint64_t v14 = v13;
  unsigned int v15 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v16 = sub_D8B4(a4, v14, v15);
  unint64_t v18 = sub_11D84((unsigned int *)v9, v16, v17);
  long long v19 = (unsigned int *)(**(uint64_t (***)(uint64_t, int *))a2)(a2, v18);
  uint64_t v21 = sub_D5D4();

  return sub_15444(v19, v21, v20);
}

int *sub_11ACD8(uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  int variant = agxps_gpu_get_variant(a1);
  uint64_t v8 = *(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16);
  if ((variant - 4) > 2)
  {
    long long v40 = (unsigned int *)v8(a2, "F9F04A751DF32AED42FF9EFB131D3CD40E499AA0A99A68D0DD6778167E42BF26");
    uint64_t v41 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "357D351342C59B72F21BD4580AD1B2F1C4C47D0006AB615A4760BC3BEBD99E48");
    uint64_t v42 = sub_DCCC(v40, v41);
    unsigned int v43 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_133_103");
    uint64_t v45 = v44;
    unsigned int v46 = sub_D5D4();
    unsigned int v47 = sub_D634(v43, v45, v46);
    uint64_t v49 = v48;
    unsigned int v50 = (**a3)(a3, kAGXPSCounterConstantNumCores);
    uint64_t v51 = sub_D8B4(v47, v49, v50);
    long long v53 = sub_11D84((unsigned int *)v42, v51, v52);
    uint64_t v54 = (unsigned int *)(**(uint64_t (***)(uint64_t, int *))a2)(a2, v53);
    long long v55 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "Vertex Shader Launch Utilization");
    long long v39 = sub_DCCC(v54, v55);
  }
  else
  {
    unint64_t v9 = (unsigned int *)v8(a2, "5BA476059E7B48575673F80A8DC1251E26C5B23F5DCF5BCB3AB1251D0D3424E8");
    uint64_t v10 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "F9F04A751DF32AED42FF9EFB131D3CD40E499AA0A99A68D0DD6778167E42BF26");
    uint64_t v11 = sub_DCCC(v9, v10);
    unsigned int v12 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_133_103");
    uint64_t v14 = v13;
    unsigned int v15 = sub_D5D4();
    unsigned int v16 = sub_D634(v12, v14, v15);
    uint64_t v18 = v17;
    unsigned int v19 = (**a3)(a3, kAGXPSCounterConstantNumCores);
    uint64_t v20 = sub_D8B4(v16, v18, v19);
    long long v22 = sub_11D84((unsigned int *)v11, v20, v21);
    uint64_t v23 = (unsigned int *)(**(uint64_t (***)(uint64_t, int *))a2)(a2, v22);
    uint64_t v24 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "D613D0441777617363D2EF9031155D28A493ED4CF2B714C61332BEB8E694A21C");
    long long v25 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "357D351342C59B72F21BD4580AD1B2F1C4C47D0006AB615A4760BC3BEBD99E48");
    uint64_t v26 = sub_DCCC(v24, v25);
    unsigned int v27 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_133_103");
    uint64_t v29 = v28;
    unsigned int v30 = sub_D5D4();
    unsigned int v31 = sub_D634(v27, v29, v30);
    uint64_t v33 = v32;
    unsigned int v34 = (**a3)(a3, kAGXPSCounterConstantNumCores);
    uint64_t v35 = sub_D8B4(v31, v33, v34);
    long long v37 = sub_11D84((unsigned int *)v26, v35, v36);
    uint64_t v38 = (unsigned int *)(**(uint64_t (***)(uint64_t, int *))a2)(a2, v37);
    long long v39 = sub_160B4(v23, v38);
  }
  uint64_t v56 = (unsigned int *)v39;
  uint64_t v58 = sub_D5D4();

  return sub_15444(v56, v58, v57);
}

uint64_t sub_11B254(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  uint64_t v7 = (unsigned int *)(*a2)[2](a2, (int *)"92CB5205D6DC7B8CF67306FCBBF4D2E22C50A82E14C323C9869A8154961E1379");
  uint64_t v8 = (unsigned int *)(*a2)[2](a2, (int *)"87BA80BEA278BCBDE11D4ADFEA6B3C8BEF365D8260CDE3591D5B76B2C36DD853");
  unint64_t v9 = sub_DCCC(v7, v8);
  uint64_t v10 = (unsigned int *)(*a2)[2](a2, (int *)"D2D6A9827703DC8826305F130123DE83C3648F82DCB4F96DFCD7E33EA799BD62");
  uint64_t v11 = sub_DCCC((unsigned int *)v9, v10);
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_134_104");
  uint64_t v13 = v12;
  unsigned int v14 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v15 = sub_D8B4(a4, v13, v14);
  uint64_t v17 = sub_11D84((unsigned int *)v11, v15, v16);
  uint64_t v18 = **a2;

  return v18(a2, v17);
}

int *sub_11B44C(uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  uint64_t v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "06E83674FEE3BAEADDA04BCE4F798E64EAF9562959486A334178EFE9614AFE02");
  uint64_t v8 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "CFC88028D48CFFC122779E410D958A0644A7B3219492B8F56805460AE11D3317");
  unint64_t v9 = sub_DCCC(v7, v8);
  uint64_t v10 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "C38EE6AA610415ACB3D10D68E346EE868CDB70CFC2F46D887E5E152FD4A256B2");
  uint64_t v11 = sub_DCCC((unsigned int *)v9, v10);
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_135_105");
  uint64_t v13 = v12;
  unsigned int v14 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v15 = sub_D8B4(a4, v13, v14);
  uint64_t v17 = sub_11D84((unsigned int *)v11, v15, v16);
  uint64_t v18 = (unsigned int *)(**(uint64_t (***)(uint64_t, int *))a2)(a2, v17);
  unsigned int v19 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "Fragment Shader Launch Utilization");
  uint64_t v20 = sub_DCCC(v18, v19);
  uint64_t v22 = sub_D5D4();

  return sub_15444((unsigned int *)v20, v22, v21);
}

uint64_t sub_11B6A8(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  uint64_t v7 = (unsigned int *)(*a2)[2](a2, (int *)"98A511FEF2F07DAECD3383521C19383B6DCA2C733FA4611CDFA49CC62B7B5181");
  uint64_t v8 = (unsigned int *)(*a2)[2](a2, (int *)"51A34CA49D64B984F464BC878382CDD07EEF0B001EBE4F2E95026F21673969A7");
  unint64_t v9 = sub_DCCC(v7, v8);
  uint64_t v10 = (unsigned int *)(*a2)[2](a2, (int *)"83B2F8BA9316B9EFB16E84445A86F4306028A166E21E7B350C8D908E696445FC");
  uint64_t v11 = sub_DCCC((unsigned int *)v9, v10);
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_136_106");
  uint64_t v13 = v12;
  unsigned int v14 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v15 = sub_D8B4(a4, v13, v14);
  uint64_t v17 = sub_11D84((unsigned int *)v11, v15, v16);
  uint64_t v18 = **a2;

  return v18(a2, v17);
}

int *sub_11B8A0(uint64_t a1, uint64_t a2, uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  uint64_t v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "98A511FEF2F07DAECD3383521C19383B6DCA2C733FA4611CDFA49CC62B7B5181");
  uint64_t v8 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "AEB4C02667999241FFC01E220B4443963E1B34D3ACD2C5545F5BBE1143870378");
  unint64_t v9 = sub_DCCC(v7, v8);
  unsigned int v10 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_136_106");
  uint64_t v12 = v11;
  unsigned int v13 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v14 = sub_D8B4(v10, v12, v13);
  unint64_t v16 = sub_11D84((unsigned int *)v9, v14, v15);
  uint64_t v17 = (unsigned int *)(**(uint64_t (***)(uint64_t, int *))a2)(a2, v16);
  uint64_t v18 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "51A34CA49D64B984F464BC878382CDD07EEF0B001EBE4F2E95026F21673969A7");
  unsigned int v19 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "40A9788933E5BA39796E86A50864B263BC0F2291A4B895C7EA6BBB144E5DACA5");
  uint64_t v20 = sub_DCCC(v18, v19);
  LODWORD(v12) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_136_106");
  uint64_t v22 = v21;
  unsigned int v23 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v24 = sub_D8B4(v12, v22, v23);
  uint64_t v26 = sub_11D84((unsigned int *)v20, v24, v25);
  unsigned int v27 = (unsigned int *)(**(uint64_t (***)(uint64_t, int *))a2)(a2, v26);
  uint64_t v28 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "83B2F8BA9316B9EFB16E84445A86F4306028A166E21E7B350C8D908E696445FC");
  uint64_t v29 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "D469DF7536BAE8E1DE2CB8B3C1E14B4133343771592D97C7BCEC1D03BF0EE40A");
  unsigned int v30 = sub_DCCC(v28, v29);
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_136_106");
  uint64_t v32 = v31;
  unsigned int v33 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v34 = sub_D8B4(a4, v32, v33);
  unint64_t v36 = sub_11D84((unsigned int *)v30, v34, v35);
  long long v37 = (unsigned int *)(**(uint64_t (***)(uint64_t, int *))a2)(a2, v36);
  uint64_t v38 = sub_160B4(v27, v37);
  long long v39 = sub_160B4(v17, (unsigned int *)v38);
  uint64_t v41 = sub_D5D4();

  return sub_15444((unsigned int *)v39, v41, v40);
}

uint64_t sub_11BD80(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "8751E932723FAB8324B1EFAB05DE911953F94AB079963EC9D4882EC0F853207E");
}

uint64_t sub_11BDB0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "9B37F49C310110FE3C1D0349A0DBD1F4165E5E1873418FE3D8E02DBD2C42360F");
}

uint64_t sub_11BDE0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "ECE8C77FAA463F6CD7C69976F66D170E06AABA1F8EAADE7E5C2EF059C7FD1BC6");
}

int *sub_11BE10(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "Vertex Threads Launched");
  long long v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "Fragment Threads Launched");
  long long v5 = sub_DCCC(v3, v4);
  unint64_t v6 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "Compute Threads Launched");

  return sub_DCCC((unsigned int *)v5, v6);
}

uint64_t sub_11BEEC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16))(a2, "6EA38ABD760FE83DDB724F359C9F761841C5BD69E5DCCC1C211D42F98751EF80");
}

uint64_t sub_11BF1C(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *), uint64_t (***a4)(void, const char *))
{
  uint64_t v7 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_28_0");
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_86_56");
  uint64_t v9 = v8;
  unsigned int v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  uint64_t v11 = sub_D8B4(a4, v9, v10);
  unsigned int v13 = sub_11D84(v7, v11, v12);
  uint64_t v14 = **a2;

  return v14(a2, v13);
}

uint64_t sub_11C094(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *))
{
  long long v5 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_29_1");
  unint64_t v6 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_30_2");
  uint64_t v7 = sub_DCCC(v5, v6);
  unsigned int v8 = (**a3)(a3, kAGXPSCounterConstantNumBanksPerL2);
  uint64_t v10 = v9;
  unsigned int v11 = (**a3)(a3, kAGXPSCounterConstantNumAGCs);
  uint64_t v12 = sub_D634(v8, v10, v11);
  uint64_t v14 = sub_13828((unsigned int *)v7, v12, v13);
  unint64_t v15 = **a2;

  return v15(a2, v14);
}

uint64_t sub_11C24C(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *))
{
  long long v5 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_29_1");
  unsigned int v6 = (**a3)(a3, kAGXPSCounterConstantNumBanksPerL2);
  uint64_t v8 = v7;
  unsigned int v9 = (**a3)(a3, kAGXPSCounterConstantNumAGCs);
  uint64_t v10 = sub_D634(v6, v8, v9);
  uint64_t v12 = sub_13828(v5, v10, v11);
  unint64_t v13 = **a2;

  return v13(a2, v12);
}

uint64_t sub_11C3C4(uint64_t a1, uint64_t (***a2)(void, int *), uint64_t (***a3)(void, char *))
{
  long long v5 = (unsigned int *)(*a2)[2](a2, (int *)"_5c5c55d05fb355aa5be61ac63c88eb4a2a521a47dd8f79c18b5c1df163d5cb55");
  unsigned int v6 = (unsigned int *)(*a2)[2](a2, (int *)"_c9bcd5df6397dc8477a12ddf9358bccbbb3d8e52fc3dadab320be9bbb14fe157");
  uint64_t v7 = sub_DCCC(v5, v6);
  unsigned int v8 = (**a3)(a3, kAGXPSCounterConstantNumBanksPerL2);
  uint64_t v10 = v9;
  unsigned int v11 = (**a3)(a3, kAGXPSCounterConstantNumAGCs);
  uint64_t v12 = sub_D634(v8, v10, v11);
  uint64_t v14 = sub_13828((unsigned int *)v7, v12, v13);
  unint64_t v15 = **a2;

  return v15(a2, v14);
}