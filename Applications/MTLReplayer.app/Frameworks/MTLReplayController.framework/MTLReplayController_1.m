void sub_49DD4(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  void *v9;
  _WORD *v10;
  void *v11;
  void *v12;
  _WORD *v13;
  void *v14;
  _WORD *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  void *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  void *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  char *v58;
  unint64_t v59;
  void *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  char *v72;
  unint64_t v73;
  void *v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  char *v86;
  unint64_t v87;
  void *v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  void *v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  char *v114;
  unint64_t v115;
  void *v116;
  char *v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  char *v122;
  char *v123;
  char *v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  char *v128;
  unint64_t v129;
  void *v130;
  char *v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  char *v136;
  char *v137;
  char *v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  char *v142;
  unint64_t v143;
  void *v144;
  char *v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  char *v150;
  char *v151;
  char *v152;
  uint64_t v153;
  void *v154;
  uint64_t v155;
  char *v156;
  unint64_t v157;
  void *v158;
  char *v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  char *v164;
  char *v165;
  char *v166;
  uint64_t v167;
  void *v168;
  uint64_t v169;
  char *v170;
  unint64_t v171;
  void *v172;
  char *v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  char *v178;
  char *v179;
  char *v180;
  uint64_t v181;
  void *v182;
  uint64_t v183;
  char *v184;
  unint64_t v185;
  void *v186;
  char *v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  char *v192;
  char *v193;
  char *v194;
  uint64_t v195;
  void *v196;
  uint64_t v197;
  char *v198;
  unint64_t v199;
  void *v200;
  char *v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  char *v206;
  char *v207;
  char *v208;
  uint64_t v209;
  void *v210;
  uint64_t v211;
  char *v212;
  unint64_t v213;
  void *v214;
  char *v215;
  uint64_t v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  char *v220;
  char *v221;
  char *v222;
  uint64_t v223;
  void *v224;
  uint64_t v225;
  char *v226;
  unint64_t v227;
  void *v228;
  char *v229;
  uint64_t v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  char *v234;
  char *v235;
  char *v236;
  uint64_t v237;
  void *v238;
  uint64_t v239;
  char *v240;
  unint64_t v241;
  void *v242;
  char *v243;
  uint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  char *v248;
  char *v249;
  char *v250;
  uint64_t v251;
  void *v252;
  uint64_t v253;
  char *v254;
  unint64_t v255;
  void *v256;
  char *v257;
  uint64_t v258;
  unint64_t v259;
  unint64_t v260;
  unint64_t v261;
  char *v262;
  char *v263;
  char *v264;
  uint64_t v265;
  void *v266;
  uint64_t v267;
  char *v268;
  unint64_t v269;
  void *v270;
  char *v271;
  uint64_t v272;
  unint64_t v273;
  unint64_t v274;
  unint64_t v275;
  char *v276;
  char *v277;
  char *v278;
  uint64_t v279;
  void *v280;
  uint64_t v281;
  char *v282;
  unint64_t v283;
  void *v284;
  char *v285;
  uint64_t v286;
  unint64_t v287;
  unint64_t v288;
  unint64_t v289;
  char *v290;
  char *v291;
  char *v292;
  uint64_t v293;
  void *v294;
  uint64_t v295;
  char *v296;
  unint64_t v297;
  void *v298;
  char *v299;
  uint64_t v300;
  unint64_t v301;
  unint64_t v302;
  unint64_t v303;
  char *v304;
  char *v305;
  char *v306;
  uint64_t v307;
  void *v308;
  uint64_t v309;
  char *v310;
  unint64_t v311;
  void *v312;
  char *v313;
  uint64_t v314;
  unint64_t v315;
  unint64_t v316;
  unint64_t v317;
  char *v318;
  char *v319;
  char *v320;
  uint64_t v321;
  void *v322;
  uint64_t v323;
  char *v324;
  unint64_t v325;
  void *v326;
  char *v327;
  uint64_t v328;
  unint64_t v329;
  unint64_t v330;
  unint64_t v331;
  char *v332;
  char *v333;
  char *v334;
  uint64_t v335;
  void *v336;
  uint64_t v337;
  char *v338;
  unint64_t v339;
  void *v340;
  char *v341;
  uint64_t v342;
  unint64_t v343;
  unint64_t v344;
  unint64_t v345;
  char *v346;
  char *v347;
  char *v348;
  uint64_t v349;
  void *v350;
  uint64_t v351;
  char *v352;
  unint64_t v353;
  void *v354;
  char *v355;
  uint64_t v356;
  unint64_t v357;
  unint64_t v358;
  unint64_t v359;
  char *v360;
  char *v361;
  char *v362;
  uint64_t v363;
  void *v364;
  uint64_t v365;
  char *v366;
  unint64_t v367;
  void *v368;
  char *v369;
  uint64_t v370;
  unint64_t v371;
  unint64_t v372;
  unint64_t v373;
  char *v374;
  char *v375;
  char *v376;
  uint64_t v377;
  void *v378;
  uint64_t v379;
  char *v380;
  unint64_t v381;
  void *v382;
  char *v383;
  uint64_t v384;
  unint64_t v385;
  unint64_t v386;
  unint64_t v387;
  char *v388;
  char *v389;
  char *v390;
  uint64_t v391;
  void *v392;
  uint64_t v393;
  char *v394;
  unint64_t v395;
  void *v396;
  char *v397;
  uint64_t v398;
  unint64_t v399;
  unint64_t v400;
  unint64_t v401;
  char *v402;
  char *v403;
  char *v404;
  uint64_t v405;
  void *v406;
  uint64_t v407;
  char *v408;
  unint64_t v409;
  void *v410;
  char *v411;
  uint64_t v412;
  unint64_t v413;
  unint64_t v414;
  unint64_t v415;
  char *v416;
  char *v417;
  char *v418;
  uint64_t v419;
  void *v420;
  uint64_t v421;
  char *v422;
  unint64_t v423;
  void *v424;
  char *v425;
  uint64_t v426;
  unint64_t v427;
  unint64_t v428;
  unint64_t v429;
  char *v430;
  char *v431;
  char *v432;
  uint64_t v433;
  void *v434;
  uint64_t v435;
  char *v436;
  unint64_t v437;
  void *v438;
  char *v439;
  uint64_t v440;
  unint64_t v441;
  unint64_t v442;
  unint64_t v443;
  char *v444;
  char *v445;
  char *v446;
  uint64_t v447;
  uint64_t v448;
  void *v449;
  uint64_t v450;
  char *v451;
  unint64_t v452;
  void *v453;
  char *v454;
  uint64_t v455;
  unint64_t v456;
  unint64_t v457;
  unint64_t v458;
  char *v459;
  char *v460;
  char *v461;
  uint64_t v462;

  v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    if (*(_DWORD *)(v3 + 48)) {
      goto LABEL_551;
    }
    v5 = *(void **)a1[1];
    v6 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
    v7 = (char *)v5[182];
    v8 = v5[183];
    if ((unint64_t)v7 >= v8)
    {
      v19 = (char *)v5[181];
      v20 = (v7 - v19) >> 3;
      if ((unint64_t)(v20 + 1) >> 61) {
        goto LABEL_543;
      }
      v21 = v8 - (void)v19;
      v22 = (uint64_t)(v8 - (void)v19) >> 2;
      if (v22 <= v20 + 1) {
        v22 = v20 + 1;
      }
      if (v21 >= 0x7FFFFFFFFFFFFFF8) {
        v23 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        v23 = v22;
      }
      if (v23)
      {
        v24 = (char *)sub_5714((uint64_t)(v5 + 183), v23);
        v7 = (char *)v5[182];
        v19 = (char *)v5[181];
      }
      else
      {
        v24 = 0;
      }
      v25 = &v24[8 * v20];
      v26 = &v24[8 * v23];
      *(void *)v25 = v6;
      v9 = v25 + 8;
      while (v7 != v19)
      {
        v27 = *((void *)v7 - 1);
        v7 -= 8;
        *((void *)v25 - 1) = v27;
        v25 -= 8;
      }
      v5[181] = v25;
      v5[182] = v9;
      v5[183] = v26;
      if (v19) {
        operator delete(v19);
      }
    }
    else
    {
      *(void *)v7 = v6;
      v9 = v7 + 8;
    }
    v5[182] = v9;
    if (!*(_DWORD *)(v3 + 48))
    {
      v28 = *(void **)a1[1];
      v29 = *(_WORD *)(a1[2] + 18) & 0x7FFF;
      v30 = (char *)v28[185];
      v31 = v28[186];
      if ((unint64_t)v30 >= v31)
      {
        v33 = (char *)v28[184];
        v34 = (v30 - v33) >> 3;
        if ((unint64_t)(v34 + 1) >> 61) {
          goto LABEL_543;
        }
        v35 = v31 - (void)v33;
        v36 = (uint64_t)(v31 - (void)v33) >> 2;
        if (v36 <= v34 + 1) {
          v36 = v34 + 1;
        }
        if (v35 >= 0x7FFFFFFFFFFFFFF8) {
          v37 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          v37 = v36;
        }
        if (v37)
        {
          v38 = (char *)sub_5714((uint64_t)(v28 + 186), v37);
          v30 = (char *)v28[185];
          v33 = (char *)v28[184];
        }
        else
        {
          v38 = 0;
        }
        v39 = &v38[8 * v34];
        v40 = &v38[8 * v37];
        *(void *)v39 = v29;
        v32 = v39 + 8;
        while (v30 != v33)
        {
          v41 = *((void *)v30 - 1);
          v30 -= 8;
          *((void *)v39 - 1) = v41;
          v39 -= 8;
        }
        v28[184] = v39;
        v28[185] = v32;
        v28[186] = v40;
        if (v33) {
          operator delete(v33);
        }
      }
      else
      {
        *(void *)v30 = v29;
        v32 = v30 + 8;
      }
      v28[185] = v32;
      if (!*(_DWORD *)(v3 + 48))
      {
        v42 = *(void **)a1[1];
        v43 = *(_WORD *)(a1[2] + 28) & 0x7FFF;
        v44 = (char *)v42[188];
        v45 = v42[189];
        if ((unint64_t)v44 >= v45)
        {
          v47 = (char *)v42[187];
          v48 = (v44 - v47) >> 3;
          if ((unint64_t)(v48 + 1) >> 61) {
            goto LABEL_543;
          }
          v49 = v45 - (void)v47;
          v50 = (uint64_t)(v45 - (void)v47) >> 2;
          if (v50 <= v48 + 1) {
            v50 = v48 + 1;
          }
          if (v49 >= 0x7FFFFFFFFFFFFFF8) {
            v51 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            v51 = v50;
          }
          if (v51)
          {
            v52 = (char *)sub_5714((uint64_t)(v42 + 189), v51);
            v44 = (char *)v42[188];
            v47 = (char *)v42[187];
          }
          else
          {
            v52 = 0;
          }
          v53 = &v52[8 * v48];
          v54 = &v52[8 * v51];
          *(void *)v53 = v43;
          v46 = v53 + 8;
          while (v44 != v47)
          {
            v55 = *((void *)v44 - 1);
            v44 -= 8;
            *((void *)v53 - 1) = v55;
            v53 -= 8;
          }
          v42[187] = v53;
          v42[188] = v46;
          v42[189] = v54;
          if (v47) {
            operator delete(v47);
          }
        }
        else
        {
          *(void *)v44 = v43;
          v46 = v44 + 8;
        }
        v42[188] = v46;
        if (!*(_DWORD *)(v3 + 48))
        {
          v56 = *(void **)a1[1];
          v57 = *(_WORD *)(a1[2] + 20) & 0x7FFF;
          v58 = (char *)v56[191];
          v59 = v56[192];
          if ((unint64_t)v58 >= v59)
          {
            v61 = (char *)v56[190];
            v62 = (v58 - v61) >> 3;
            if ((unint64_t)(v62 + 1) >> 61) {
              goto LABEL_543;
            }
            v63 = v59 - (void)v61;
            v64 = (uint64_t)(v59 - (void)v61) >> 2;
            if (v64 <= v62 + 1) {
              v64 = v62 + 1;
            }
            if (v63 >= 0x7FFFFFFFFFFFFFF8) {
              v65 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              v65 = v64;
            }
            if (v65)
            {
              v66 = (char *)sub_5714((uint64_t)(v56 + 192), v65);
              v58 = (char *)v56[191];
              v61 = (char *)v56[190];
            }
            else
            {
              v66 = 0;
            }
            v67 = &v66[8 * v62];
            v68 = &v66[8 * v65];
            *(void *)v67 = v57;
            v60 = v67 + 8;
            while (v58 != v61)
            {
              v69 = *((void *)v58 - 1);
              v58 -= 8;
              *((void *)v67 - 1) = v69;
              v67 -= 8;
            }
            v56[190] = v67;
            v56[191] = v60;
            v56[192] = v68;
            if (v61) {
              operator delete(v61);
            }
          }
          else
          {
            *(void *)v58 = v57;
            v60 = v58 + 8;
          }
          v56[191] = v60;
          if (!*(_DWORD *)(v3 + 48))
          {
            v70 = *(void **)a1[1];
            v71 = *(_WORD *)(a1[2] + 30) & 0x7FFF;
            v72 = (char *)v70[194];
            v73 = v70[195];
            if ((unint64_t)v72 >= v73)
            {
              v75 = (char *)v70[193];
              v76 = (v72 - v75) >> 3;
              if ((unint64_t)(v76 + 1) >> 61) {
                goto LABEL_543;
              }
              v77 = v73 - (void)v75;
              v78 = (uint64_t)(v73 - (void)v75) >> 2;
              if (v78 <= v76 + 1) {
                v78 = v76 + 1;
              }
              if (v77 >= 0x7FFFFFFFFFFFFFF8) {
                v79 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                v79 = v78;
              }
              if (v79)
              {
                v80 = (char *)sub_5714((uint64_t)(v70 + 195), v79);
                v72 = (char *)v70[194];
                v75 = (char *)v70[193];
              }
              else
              {
                v80 = 0;
              }
              v81 = &v80[8 * v76];
              v82 = &v80[8 * v79];
              *(void *)v81 = v71;
              v74 = v81 + 8;
              while (v72 != v75)
              {
                v83 = *((void *)v72 - 1);
                v72 -= 8;
                *((void *)v81 - 1) = v83;
                v81 -= 8;
              }
              v70[193] = v81;
              v70[194] = v74;
              v70[195] = v82;
              if (v75) {
                operator delete(v75);
              }
            }
            else
            {
              *(void *)v72 = v71;
              v74 = v72 + 8;
            }
            v70[194] = v74;
            if (!*(_DWORD *)(v3 + 48))
            {
              v84 = *(void **)a1[1];
              v85 = *(_WORD *)(a1[2] + 22) & 0x7FFF;
              v86 = (char *)v84[197];
              v87 = v84[198];
              if ((unint64_t)v86 >= v87)
              {
                v89 = (char *)v84[196];
                v90 = (v86 - v89) >> 3;
                if ((unint64_t)(v90 + 1) >> 61) {
                  goto LABEL_543;
                }
                v91 = v87 - (void)v89;
                v92 = (uint64_t)(v87 - (void)v89) >> 2;
                if (v92 <= v90 + 1) {
                  v92 = v90 + 1;
                }
                if (v91 >= 0x7FFFFFFFFFFFFFF8) {
                  v93 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  v93 = v92;
                }
                if (v93)
                {
                  v94 = (char *)sub_5714((uint64_t)(v84 + 198), v93);
                  v86 = (char *)v84[197];
                  v89 = (char *)v84[196];
                }
                else
                {
                  v94 = 0;
                }
                v95 = &v94[8 * v90];
                v96 = &v94[8 * v93];
                *(void *)v95 = v85;
                v88 = v95 + 8;
                while (v86 != v89)
                {
                  v97 = *((void *)v86 - 1);
                  v86 -= 8;
                  *((void *)v95 - 1) = v97;
                  v95 -= 8;
                }
                v84[196] = v95;
                v84[197] = v88;
                v84[198] = v96;
                if (v89) {
                  operator delete(v89);
                }
              }
              else
              {
                *(void *)v86 = v85;
                v88 = v86 + 8;
              }
              v84[197] = v88;
              if (!*(_DWORD *)(v3 + 48))
              {
                v98 = *(void **)a1[1];
                v99 = *(_WORD *)(a1[2] + 32) & 0x7FFF;
                v100 = (char *)v98[200];
                v101 = v98[201];
                if ((unint64_t)v100 >= v101)
                {
                  v103 = (char *)v98[199];
                  v104 = (v100 - v103) >> 3;
                  if ((unint64_t)(v104 + 1) >> 61) {
                    goto LABEL_543;
                  }
                  v105 = v101 - (void)v103;
                  v106 = (uint64_t)(v101 - (void)v103) >> 2;
                  if (v106 <= v104 + 1) {
                    v106 = v104 + 1;
                  }
                  if (v105 >= 0x7FFFFFFFFFFFFFF8) {
                    v107 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    v107 = v106;
                  }
                  if (v107)
                  {
                    v108 = (char *)sub_5714((uint64_t)(v98 + 201), v107);
                    v100 = (char *)v98[200];
                    v103 = (char *)v98[199];
                  }
                  else
                  {
                    v108 = 0;
                  }
                  v109 = &v108[8 * v104];
                  v110 = &v108[8 * v107];
                  *(void *)v109 = v99;
                  v102 = v109 + 8;
                  while (v100 != v103)
                  {
                    v111 = *((void *)v100 - 1);
                    v100 -= 8;
                    *((void *)v109 - 1) = v111;
                    v109 -= 8;
                  }
                  v98[199] = v109;
                  v98[200] = v102;
                  v98[201] = v110;
                  if (v103) {
                    operator delete(v103);
                  }
                }
                else
                {
                  *(void *)v100 = v99;
                  v102 = v100 + 8;
                }
                v98[200] = v102;
                if (!*(_DWORD *)(v3 + 48))
                {
                  v112 = *(void **)a1[1];
                  v113 = *(_WORD *)(a1[2] + 24) & 0x7FFF;
                  v114 = (char *)v112[203];
                  v115 = v112[204];
                  if ((unint64_t)v114 >= v115)
                  {
                    v117 = (char *)v112[202];
                    v118 = (v114 - v117) >> 3;
                    if ((unint64_t)(v118 + 1) >> 61) {
                      goto LABEL_543;
                    }
                    v119 = v115 - (void)v117;
                    v120 = (uint64_t)(v115 - (void)v117) >> 2;
                    if (v120 <= v118 + 1) {
                      v120 = v118 + 1;
                    }
                    if (v119 >= 0x7FFFFFFFFFFFFFF8) {
                      v121 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      v121 = v120;
                    }
                    if (v121)
                    {
                      v122 = (char *)sub_5714((uint64_t)(v112 + 204), v121);
                      v114 = (char *)v112[203];
                      v117 = (char *)v112[202];
                    }
                    else
                    {
                      v122 = 0;
                    }
                    v123 = &v122[8 * v118];
                    v124 = &v122[8 * v121];
                    *(void *)v123 = v113;
                    v116 = v123 + 8;
                    while (v114 != v117)
                    {
                      v125 = *((void *)v114 - 1);
                      v114 -= 8;
                      *((void *)v123 - 1) = v125;
                      v123 -= 8;
                    }
                    v112[202] = v123;
                    v112[203] = v116;
                    v112[204] = v124;
                    if (v117) {
                      operator delete(v117);
                    }
                  }
                  else
                  {
                    *(void *)v114 = v113;
                    v116 = v114 + 8;
                  }
                  v112[203] = v116;
                  if (!*(_DWORD *)(v3 + 48))
                  {
                    v126 = *(void **)a1[1];
                    v127 = *(_WORD *)(a1[2] + 42) & 0x7FFF;
                    v128 = (char *)v126[206];
                    v129 = v126[207];
                    if ((unint64_t)v128 >= v129)
                    {
                      v131 = (char *)v126[205];
                      v132 = (v128 - v131) >> 3;
                      if ((unint64_t)(v132 + 1) >> 61) {
                        goto LABEL_543;
                      }
                      v133 = v129 - (void)v131;
                      v134 = (uint64_t)(v129 - (void)v131) >> 2;
                      if (v134 <= v132 + 1) {
                        v134 = v132 + 1;
                      }
                      if (v133 >= 0x7FFFFFFFFFFFFFF8) {
                        v135 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        v135 = v134;
                      }
                      if (v135)
                      {
                        v136 = (char *)sub_5714((uint64_t)(v126 + 207), v135);
                        v128 = (char *)v126[206];
                        v131 = (char *)v126[205];
                      }
                      else
                      {
                        v136 = 0;
                      }
                      v137 = &v136[8 * v132];
                      v138 = &v136[8 * v135];
                      *(void *)v137 = v127;
                      v130 = v137 + 8;
                      while (v128 != v131)
                      {
                        v139 = *((void *)v128 - 1);
                        v128 -= 8;
                        *((void *)v137 - 1) = v139;
                        v137 -= 8;
                      }
                      v126[205] = v137;
                      v126[206] = v130;
                      v126[207] = v138;
                      if (v131) {
                        operator delete(v131);
                      }
                    }
                    else
                    {
                      *(void *)v128 = v127;
                      v130 = v128 + 8;
                    }
                    v126[206] = v130;
                    if (!*(_DWORD *)(v3 + 48))
                    {
                      v140 = *(void **)a1[1];
                      v141 = *(_WORD *)(a1[2] + 34) & 0x7FFF;
                      v142 = (char *)v140[209];
                      v143 = v140[210];
                      if ((unint64_t)v142 >= v143)
                      {
                        v145 = (char *)v140[208];
                        v146 = (v142 - v145) >> 3;
                        if ((unint64_t)(v146 + 1) >> 61) {
                          goto LABEL_543;
                        }
                        v147 = v143 - (void)v145;
                        v148 = (uint64_t)(v143 - (void)v145) >> 2;
                        if (v148 <= v146 + 1) {
                          v148 = v146 + 1;
                        }
                        if (v147 >= 0x7FFFFFFFFFFFFFF8) {
                          v149 = 0x1FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          v149 = v148;
                        }
                        if (v149)
                        {
                          v150 = (char *)sub_5714((uint64_t)(v140 + 210), v149);
                          v142 = (char *)v140[209];
                          v145 = (char *)v140[208];
                        }
                        else
                        {
                          v150 = 0;
                        }
                        v151 = &v150[8 * v146];
                        v152 = &v150[8 * v149];
                        *(void *)v151 = v141;
                        v144 = v151 + 8;
                        while (v142 != v145)
                        {
                          v153 = *((void *)v142 - 1);
                          v142 -= 8;
                          *((void *)v151 - 1) = v153;
                          v151 -= 8;
                        }
                        v140[208] = v151;
                        v140[209] = v144;
                        v140[210] = v152;
                        if (v145) {
                          operator delete(v145);
                        }
                      }
                      else
                      {
                        *(void *)v142 = v141;
                        v144 = v142 + 8;
                      }
                      v140[209] = v144;
                      if (!*(_DWORD *)(v3 + 48))
                      {
                        v154 = *(void **)a1[1];
                        v155 = *(_WORD *)(a1[2] + 44) & 0x7FFF;
                        v156 = (char *)v154[212];
                        v157 = v154[213];
                        if ((unint64_t)v156 >= v157)
                        {
                          v159 = (char *)v154[211];
                          v160 = (v156 - v159) >> 3;
                          if ((unint64_t)(v160 + 1) >> 61) {
                            goto LABEL_543;
                          }
                          v161 = v157 - (void)v159;
                          v162 = (uint64_t)(v157 - (void)v159) >> 2;
                          if (v162 <= v160 + 1) {
                            v162 = v160 + 1;
                          }
                          if (v161 >= 0x7FFFFFFFFFFFFFF8) {
                            v163 = 0x1FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            v163 = v162;
                          }
                          if (v163)
                          {
                            v164 = (char *)sub_5714((uint64_t)(v154 + 213), v163);
                            v156 = (char *)v154[212];
                            v159 = (char *)v154[211];
                          }
                          else
                          {
                            v164 = 0;
                          }
                          v165 = &v164[8 * v160];
                          v166 = &v164[8 * v163];
                          *(void *)v165 = v155;
                          v158 = v165 + 8;
                          while (v156 != v159)
                          {
                            v167 = *((void *)v156 - 1);
                            v156 -= 8;
                            *((void *)v165 - 1) = v167;
                            v165 -= 8;
                          }
                          v154[211] = v165;
                          v154[212] = v158;
                          v154[213] = v166;
                          if (v159) {
                            operator delete(v159);
                          }
                        }
                        else
                        {
                          *(void *)v156 = v155;
                          v158 = v156 + 8;
                        }
                        v154[212] = v158;
                        if (!*(_DWORD *)(v3 + 48))
                        {
                          v168 = *(void **)a1[1];
                          v169 = *(_WORD *)(a1[2] + 36) & 0x7FFF;
                          v170 = (char *)v168[215];
                          v171 = v168[216];
                          if ((unint64_t)v170 >= v171)
                          {
                            v173 = (char *)v168[214];
                            v174 = (v170 - v173) >> 3;
                            if ((unint64_t)(v174 + 1) >> 61) {
                              goto LABEL_543;
                            }
                            v175 = v171 - (void)v173;
                            v176 = (uint64_t)(v171 - (void)v173) >> 2;
                            if (v176 <= v174 + 1) {
                              v176 = v174 + 1;
                            }
                            if (v175 >= 0x7FFFFFFFFFFFFFF8) {
                              v177 = 0x1FFFFFFFFFFFFFFFLL;
                            }
                            else {
                              v177 = v176;
                            }
                            if (v177)
                            {
                              v178 = (char *)sub_5714((uint64_t)(v168 + 216), v177);
                              v170 = (char *)v168[215];
                              v173 = (char *)v168[214];
                            }
                            else
                            {
                              v178 = 0;
                            }
                            v179 = &v178[8 * v174];
                            v180 = &v178[8 * v177];
                            *(void *)v179 = v169;
                            v172 = v179 + 8;
                            while (v170 != v173)
                            {
                              v181 = *((void *)v170 - 1);
                              v170 -= 8;
                              *((void *)v179 - 1) = v181;
                              v179 -= 8;
                            }
                            v168[214] = v179;
                            v168[215] = v172;
                            v168[216] = v180;
                            if (v173) {
                              operator delete(v173);
                            }
                          }
                          else
                          {
                            *(void *)v170 = v169;
                            v172 = v170 + 8;
                          }
                          v168[215] = v172;
                          if (!*(_DWORD *)(v3 + 48))
                          {
                            v182 = *(void **)a1[1];
                            v183 = *(_WORD *)(a1[2] + 46) & 0x7FFF;
                            v184 = (char *)v182[218];
                            v185 = v182[219];
                            if ((unint64_t)v184 >= v185)
                            {
                              v187 = (char *)v182[217];
                              v188 = (v184 - v187) >> 3;
                              if ((unint64_t)(v188 + 1) >> 61) {
                                goto LABEL_543;
                              }
                              v189 = v185 - (void)v187;
                              v190 = (uint64_t)(v185 - (void)v187) >> 2;
                              if (v190 <= v188 + 1) {
                                v190 = v188 + 1;
                              }
                              if (v189 >= 0x7FFFFFFFFFFFFFF8) {
                                v191 = 0x1FFFFFFFFFFFFFFFLL;
                              }
                              else {
                                v191 = v190;
                              }
                              if (v191)
                              {
                                v192 = (char *)sub_5714((uint64_t)(v182 + 219), v191);
                                v184 = (char *)v182[218];
                                v187 = (char *)v182[217];
                              }
                              else
                              {
                                v192 = 0;
                              }
                              v193 = &v192[8 * v188];
                              v194 = &v192[8 * v191];
                              *(void *)v193 = v183;
                              v186 = v193 + 8;
                              while (v184 != v187)
                              {
                                v195 = *((void *)v184 - 1);
                                v184 -= 8;
                                *((void *)v193 - 1) = v195;
                                v193 -= 8;
                              }
                              v182[217] = v193;
                              v182[218] = v186;
                              v182[219] = v194;
                              if (v187) {
                                operator delete(v187);
                              }
                            }
                            else
                            {
                              *(void *)v184 = v183;
                              v186 = v184 + 8;
                            }
                            v182[218] = v186;
                            if (!*(_DWORD *)(v3 + 48))
                            {
                              v196 = *(void **)a1[1];
                              v197 = *(_WORD *)(a1[2] + 38) & 0x7FFF;
                              v198 = (char *)v196[221];
                              v199 = v196[222];
                              if ((unint64_t)v198 >= v199)
                              {
                                v201 = (char *)v196[220];
                                v202 = (v198 - v201) >> 3;
                                if ((unint64_t)(v202 + 1) >> 61) {
                                  goto LABEL_543;
                                }
                                v203 = v199 - (void)v201;
                                v204 = (uint64_t)(v199 - (void)v201) >> 2;
                                if (v204 <= v202 + 1) {
                                  v204 = v202 + 1;
                                }
                                if (v203 >= 0x7FFFFFFFFFFFFFF8) {
                                  v205 = 0x1FFFFFFFFFFFFFFFLL;
                                }
                                else {
                                  v205 = v204;
                                }
                                if (v205)
                                {
                                  v206 = (char *)sub_5714((uint64_t)(v196 + 222), v205);
                                  v198 = (char *)v196[221];
                                  v201 = (char *)v196[220];
                                }
                                else
                                {
                                  v206 = 0;
                                }
                                v207 = &v206[8 * v202];
                                v208 = &v206[8 * v205];
                                *(void *)v207 = v197;
                                v200 = v207 + 8;
                                while (v198 != v201)
                                {
                                  v209 = *((void *)v198 - 1);
                                  v198 -= 8;
                                  *((void *)v207 - 1) = v209;
                                  v207 -= 8;
                                }
                                v196[220] = v207;
                                v196[221] = v200;
                                v196[222] = v208;
                                if (v201) {
                                  operator delete(v201);
                                }
                              }
                              else
                              {
                                *(void *)v198 = v197;
                                v200 = v198 + 8;
                              }
                              v196[221] = v200;
                              if (!*(_DWORD *)(v3 + 48))
                              {
                                v210 = *(void **)a1[1];
                                v211 = *(_WORD *)(a1[2] + 48) & 0x7FFF;
                                v212 = (char *)v210[224];
                                v213 = v210[225];
                                if ((unint64_t)v212 >= v213)
                                {
                                  v215 = (char *)v210[223];
                                  v216 = (v212 - v215) >> 3;
                                  if ((unint64_t)(v216 + 1) >> 61) {
                                    goto LABEL_543;
                                  }
                                  v217 = v213 - (void)v215;
                                  v218 = (uint64_t)(v213 - (void)v215) >> 2;
                                  if (v218 <= v216 + 1) {
                                    v218 = v216 + 1;
                                  }
                                  if (v217 >= 0x7FFFFFFFFFFFFFF8) {
                                    v219 = 0x1FFFFFFFFFFFFFFFLL;
                                  }
                                  else {
                                    v219 = v218;
                                  }
                                  if (v219)
                                  {
                                    v220 = (char *)sub_5714((uint64_t)(v210 + 225), v219);
                                    v212 = (char *)v210[224];
                                    v215 = (char *)v210[223];
                                  }
                                  else
                                  {
                                    v220 = 0;
                                  }
                                  v221 = &v220[8 * v216];
                                  v222 = &v220[8 * v219];
                                  *(void *)v221 = v211;
                                  v214 = v221 + 8;
                                  while (v212 != v215)
                                  {
                                    v223 = *((void *)v212 - 1);
                                    v212 -= 8;
                                    *((void *)v221 - 1) = v223;
                                    v221 -= 8;
                                  }
                                  v210[223] = v221;
                                  v210[224] = v214;
                                  v210[225] = v222;
                                  if (v215) {
                                    operator delete(v215);
                                  }
                                }
                                else
                                {
                                  *(void *)v212 = v211;
                                  v214 = v212 + 8;
                                }
                                v210[224] = v214;
                                if (!*(_DWORD *)(v3 + 48))
                                {
                                  v224 = *(void **)a1[1];
                                  v225 = *(_WORD *)(a1[2] + 40) & 0x7FFF;
                                  v226 = (char *)v224[227];
                                  v227 = v224[228];
                                  if ((unint64_t)v226 >= v227)
                                  {
                                    v229 = (char *)v224[226];
                                    v230 = (v226 - v229) >> 3;
                                    if ((unint64_t)(v230 + 1) >> 61) {
                                      goto LABEL_543;
                                    }
                                    v231 = v227 - (void)v229;
                                    v232 = (uint64_t)(v227 - (void)v229) >> 2;
                                    if (v232 <= v230 + 1) {
                                      v232 = v230 + 1;
                                    }
                                    if (v231 >= 0x7FFFFFFFFFFFFFF8) {
                                      v233 = 0x1FFFFFFFFFFFFFFFLL;
                                    }
                                    else {
                                      v233 = v232;
                                    }
                                    if (v233)
                                    {
                                      v234 = (char *)sub_5714((uint64_t)(v224 + 228), v233);
                                      v226 = (char *)v224[227];
                                      v229 = (char *)v224[226];
                                    }
                                    else
                                    {
                                      v234 = 0;
                                    }
                                    v235 = &v234[8 * v230];
                                    v236 = &v234[8 * v233];
                                    *(void *)v235 = v225;
                                    v228 = v235 + 8;
                                    while (v226 != v229)
                                    {
                                      v237 = *((void *)v226 - 1);
                                      v226 -= 8;
                                      *((void *)v235 - 1) = v237;
                                      v235 -= 8;
                                    }
                                    v224[226] = v235;
                                    v224[227] = v228;
                                    v224[228] = v236;
                                    if (v229) {
                                      operator delete(v229);
                                    }
                                  }
                                  else
                                  {
                                    *(void *)v226 = v225;
                                    v228 = v226 + 8;
                                  }
                                  v224[227] = v228;
                                  if (!*(_DWORD *)(v3 + 48))
                                  {
                                    v238 = *(void **)a1[1];
                                    v239 = *(_WORD *)(a1[2] + 58) & 0x7FFF;
                                    v240 = (char *)v238[230];
                                    v241 = v238[231];
                                    if ((unint64_t)v240 >= v241)
                                    {
                                      v243 = (char *)v238[229];
                                      v244 = (v240 - v243) >> 3;
                                      if ((unint64_t)(v244 + 1) >> 61) {
                                        goto LABEL_543;
                                      }
                                      v245 = v241 - (void)v243;
                                      v246 = (uint64_t)(v241 - (void)v243) >> 2;
                                      if (v246 <= v244 + 1) {
                                        v246 = v244 + 1;
                                      }
                                      if (v245 >= 0x7FFFFFFFFFFFFFF8) {
                                        v247 = 0x1FFFFFFFFFFFFFFFLL;
                                      }
                                      else {
                                        v247 = v246;
                                      }
                                      if (v247)
                                      {
                                        v248 = (char *)sub_5714((uint64_t)(v238 + 231), v247);
                                        v240 = (char *)v238[230];
                                        v243 = (char *)v238[229];
                                      }
                                      else
                                      {
                                        v248 = 0;
                                      }
                                      v249 = &v248[8 * v244];
                                      v250 = &v248[8 * v247];
                                      *(void *)v249 = v239;
                                      v242 = v249 + 8;
                                      while (v240 != v243)
                                      {
                                        v251 = *((void *)v240 - 1);
                                        v240 -= 8;
                                        *((void *)v249 - 1) = v251;
                                        v249 -= 8;
                                      }
                                      v238[229] = v249;
                                      v238[230] = v242;
                                      v238[231] = v250;
                                      if (v243) {
                                        operator delete(v243);
                                      }
                                    }
                                    else
                                    {
                                      *(void *)v240 = v239;
                                      v242 = v240 + 8;
                                    }
                                    v238[230] = v242;
                                    if (!*(_DWORD *)(v3 + 48))
                                    {
                                      v252 = *(void **)a1[1];
                                      v253 = *(_WORD *)(a1[2] + 50) & 0x7FFF;
                                      v254 = (char *)v252[233];
                                      v255 = v252[234];
                                      if ((unint64_t)v254 >= v255)
                                      {
                                        v257 = (char *)v252[232];
                                        v258 = (v254 - v257) >> 3;
                                        if ((unint64_t)(v258 + 1) >> 61) {
                                          goto LABEL_543;
                                        }
                                        v259 = v255 - (void)v257;
                                        v260 = (uint64_t)(v255 - (void)v257) >> 2;
                                        if (v260 <= v258 + 1) {
                                          v260 = v258 + 1;
                                        }
                                        if (v259 >= 0x7FFFFFFFFFFFFFF8) {
                                          v261 = 0x1FFFFFFFFFFFFFFFLL;
                                        }
                                        else {
                                          v261 = v260;
                                        }
                                        if (v261)
                                        {
                                          v262 = (char *)sub_5714((uint64_t)(v252 + 234), v261);
                                          v254 = (char *)v252[233];
                                          v257 = (char *)v252[232];
                                        }
                                        else
                                        {
                                          v262 = 0;
                                        }
                                        v263 = &v262[8 * v258];
                                        v264 = &v262[8 * v261];
                                        *(void *)v263 = v253;
                                        v256 = v263 + 8;
                                        while (v254 != v257)
                                        {
                                          v265 = *((void *)v254 - 1);
                                          v254 -= 8;
                                          *((void *)v263 - 1) = v265;
                                          v263 -= 8;
                                        }
                                        v252[232] = v263;
                                        v252[233] = v256;
                                        v252[234] = v264;
                                        if (v257) {
                                          operator delete(v257);
                                        }
                                      }
                                      else
                                      {
                                        *(void *)v254 = v253;
                                        v256 = v254 + 8;
                                      }
                                      v252[233] = v256;
                                      if (!*(_DWORD *)(v3 + 48))
                                      {
                                        v266 = *(void **)a1[1];
                                        v267 = *(_WORD *)(a1[2] + 60) & 0x7FFF;
                                        v268 = (char *)v266[236];
                                        v269 = v266[237];
                                        if ((unint64_t)v268 >= v269)
                                        {
                                          v271 = (char *)v266[235];
                                          v272 = (v268 - v271) >> 3;
                                          if ((unint64_t)(v272 + 1) >> 61) {
                                            goto LABEL_543;
                                          }
                                          v273 = v269 - (void)v271;
                                          v274 = (uint64_t)(v269 - (void)v271) >> 2;
                                          if (v274 <= v272 + 1) {
                                            v274 = v272 + 1;
                                          }
                                          if (v273 >= 0x7FFFFFFFFFFFFFF8) {
                                            v275 = 0x1FFFFFFFFFFFFFFFLL;
                                          }
                                          else {
                                            v275 = v274;
                                          }
                                          if (v275)
                                          {
                                            v276 = (char *)sub_5714((uint64_t)(v266 + 237), v275);
                                            v268 = (char *)v266[236];
                                            v271 = (char *)v266[235];
                                          }
                                          else
                                          {
                                            v276 = 0;
                                          }
                                          v277 = &v276[8 * v272];
                                          v278 = &v276[8 * v275];
                                          *(void *)v277 = v267;
                                          v270 = v277 + 8;
                                          while (v268 != v271)
                                          {
                                            v279 = *((void *)v268 - 1);
                                            v268 -= 8;
                                            *((void *)v277 - 1) = v279;
                                            v277 -= 8;
                                          }
                                          v266[235] = v277;
                                          v266[236] = v270;
                                          v266[237] = v278;
                                          if (v271) {
                                            operator delete(v271);
                                          }
                                        }
                                        else
                                        {
                                          *(void *)v268 = v267;
                                          v270 = v268 + 8;
                                        }
                                        v266[236] = v270;
                                        if (!*(_DWORD *)(v3 + 48))
                                        {
                                          v280 = *(void **)a1[1];
                                          v281 = *(_WORD *)(a1[2] + 52) & 0x7FFF;
                                          v282 = (char *)v280[239];
                                          v283 = v280[240];
                                          if ((unint64_t)v282 >= v283)
                                          {
                                            v285 = (char *)v280[238];
                                            v286 = (v282 - v285) >> 3;
                                            if ((unint64_t)(v286 + 1) >> 61) {
                                              goto LABEL_543;
                                            }
                                            v287 = v283 - (void)v285;
                                            v288 = (uint64_t)(v283 - (void)v285) >> 2;
                                            if (v288 <= v286 + 1) {
                                              v288 = v286 + 1;
                                            }
                                            if (v287 >= 0x7FFFFFFFFFFFFFF8) {
                                              v289 = 0x1FFFFFFFFFFFFFFFLL;
                                            }
                                            else {
                                              v289 = v288;
                                            }
                                            if (v289)
                                            {
                                              v290 = (char *)sub_5714((uint64_t)(v280 + 240), v289);
                                              v282 = (char *)v280[239];
                                              v285 = (char *)v280[238];
                                            }
                                            else
                                            {
                                              v290 = 0;
                                            }
                                            v291 = &v290[8 * v286];
                                            v292 = &v290[8 * v289];
                                            *(void *)v291 = v281;
                                            v284 = v291 + 8;
                                            while (v282 != v285)
                                            {
                                              v293 = *((void *)v282 - 1);
                                              v282 -= 8;
                                              *((void *)v291 - 1) = v293;
                                              v291 -= 8;
                                            }
                                            v280[238] = v291;
                                            v280[239] = v284;
                                            v280[240] = v292;
                                            if (v285) {
                                              operator delete(v285);
                                            }
                                          }
                                          else
                                          {
                                            *(void *)v282 = v281;
                                            v284 = v282 + 8;
                                          }
                                          v280[239] = v284;
                                          if (!*(_DWORD *)(v3 + 48))
                                          {
                                            v294 = *(void **)a1[1];
                                            v295 = *(_WORD *)(a1[2] + 62) & 0x7FFF;
                                            v296 = (char *)v294[242];
                                            v297 = v294[243];
                                            if ((unint64_t)v296 >= v297)
                                            {
                                              v299 = (char *)v294[241];
                                              v300 = (v296 - v299) >> 3;
                                              if ((unint64_t)(v300 + 1) >> 61) {
                                                goto LABEL_543;
                                              }
                                              v301 = v297 - (void)v299;
                                              v302 = (uint64_t)(v297 - (void)v299) >> 2;
                                              if (v302 <= v300 + 1) {
                                                v302 = v300 + 1;
                                              }
                                              if (v301 >= 0x7FFFFFFFFFFFFFF8) {
                                                v303 = 0x1FFFFFFFFFFFFFFFLL;
                                              }
                                              else {
                                                v303 = v302;
                                              }
                                              if (v303)
                                              {
                                                v304 = (char *)sub_5714((uint64_t)(v294 + 243), v303);
                                                v296 = (char *)v294[242];
                                                v299 = (char *)v294[241];
                                              }
                                              else
                                              {
                                                v304 = 0;
                                              }
                                              v305 = &v304[8 * v300];
                                              v306 = &v304[8 * v303];
                                              *(void *)v305 = v295;
                                              v298 = v305 + 8;
                                              while (v296 != v299)
                                              {
                                                v307 = *((void *)v296 - 1);
                                                v296 -= 8;
                                                *((void *)v305 - 1) = v307;
                                                v305 -= 8;
                                              }
                                              v294[241] = v305;
                                              v294[242] = v298;
                                              v294[243] = v306;
                                              if (v299) {
                                                operator delete(v299);
                                              }
                                            }
                                            else
                                            {
                                              *(void *)v296 = v295;
                                              v298 = v296 + 8;
                                            }
                                            v294[242] = v298;
                                            if (!*(_DWORD *)(v3 + 48))
                                            {
                                              v308 = *(void **)a1[1];
                                              v309 = *(_WORD *)(a1[2] + 54) & 0x7FFF;
                                              v310 = (char *)v308[245];
                                              v311 = v308[246];
                                              if ((unint64_t)v310 >= v311)
                                              {
                                                v313 = (char *)v308[244];
                                                v314 = (v310 - v313) >> 3;
                                                if ((unint64_t)(v314 + 1) >> 61) {
                                                  goto LABEL_543;
                                                }
                                                v315 = v311 - (void)v313;
                                                v316 = (uint64_t)(v311 - (void)v313) >> 2;
                                                if (v316 <= v314 + 1) {
                                                  v316 = v314 + 1;
                                                }
                                                if (v315 >= 0x7FFFFFFFFFFFFFF8) {
                                                  v317 = 0x1FFFFFFFFFFFFFFFLL;
                                                }
                                                else {
                                                  v317 = v316;
                                                }
                                                if (v317)
                                                {
                                                  v318 = (char *)sub_5714((uint64_t)(v308 + 246), v317);
                                                  v310 = (char *)v308[245];
                                                  v313 = (char *)v308[244];
                                                }
                                                else
                                                {
                                                  v318 = 0;
                                                }
                                                v319 = &v318[8 * v314];
                                                v320 = &v318[8 * v317];
                                                *(void *)v319 = v309;
                                                v312 = v319 + 8;
                                                while (v310 != v313)
                                                {
                                                  v321 = *((void *)v310 - 1);
                                                  v310 -= 8;
                                                  *((void *)v319 - 1) = v321;
                                                  v319 -= 8;
                                                }
                                                v308[244] = v319;
                                                v308[245] = v312;
                                                v308[246] = v320;
                                                if (v313) {
                                                  operator delete(v313);
                                                }
                                              }
                                              else
                                              {
                                                *(void *)v310 = v309;
                                                v312 = v310 + 8;
                                              }
                                              v308[245] = v312;
                                              if (!*(_DWORD *)(v3 + 48))
                                              {
                                                v322 = *(void **)a1[1];
                                                v323 = *(_WORD *)(a1[2] + 64) & 0x7FFF;
                                                v324 = (char *)v322[248];
                                                v325 = v322[249];
                                                if ((unint64_t)v324 >= v325)
                                                {
                                                  v327 = (char *)v322[247];
                                                  v328 = (v324 - v327) >> 3;
                                                  if ((unint64_t)(v328 + 1) >> 61) {
                                                    goto LABEL_543;
                                                  }
                                                  v329 = v325 - (void)v327;
                                                  v330 = (uint64_t)(v325 - (void)v327) >> 2;
                                                  if (v330 <= v328 + 1) {
                                                    v330 = v328 + 1;
                                                  }
                                                  if (v329 >= 0x7FFFFFFFFFFFFFF8) {
                                                    v331 = 0x1FFFFFFFFFFFFFFFLL;
                                                  }
                                                  else {
                                                    v331 = v330;
                                                  }
                                                  if (v331)
                                                  {
                                                    v332 = (char *)sub_5714((uint64_t)(v322 + 249), v331);
                                                    v324 = (char *)v322[248];
                                                    v327 = (char *)v322[247];
                                                  }
                                                  else
                                                  {
                                                    v332 = 0;
                                                  }
                                                  v333 = &v332[8 * v328];
                                                  v334 = &v332[8 * v331];
                                                  *(void *)v333 = v323;
                                                  v326 = v333 + 8;
                                                  while (v324 != v327)
                                                  {
                                                    v335 = *((void *)v324 - 1);
                                                    v324 -= 8;
                                                    *((void *)v333 - 1) = v335;
                                                    v333 -= 8;
                                                  }
                                                  v322[247] = v333;
                                                  v322[248] = v326;
                                                  v322[249] = v334;
                                                  if (v327) {
                                                    operator delete(v327);
                                                  }
                                                }
                                                else
                                                {
                                                  *(void *)v324 = v323;
                                                  v326 = v324 + 8;
                                                }
                                                v322[248] = v326;
                                                if (!*(_DWORD *)(v3 + 48))
                                                {
                                                  v336 = *(void **)a1[1];
                                                  v337 = *(_WORD *)(a1[2] + 56) & 0x7FFF;
                                                  v338 = (char *)v336[251];
                                                  v339 = v336[252];
                                                  if ((unint64_t)v338 >= v339)
                                                  {
                                                    v341 = (char *)v336[250];
                                                    v342 = (v338 - v341) >> 3;
                                                    if ((unint64_t)(v342 + 1) >> 61) {
                                                      goto LABEL_543;
                                                    }
                                                    v343 = v339 - (void)v341;
                                                    v344 = (uint64_t)(v339 - (void)v341) >> 2;
                                                    if (v344 <= v342 + 1) {
                                                      v344 = v342 + 1;
                                                    }
                                                    if (v343 >= 0x7FFFFFFFFFFFFFF8) {
                                                      v345 = 0x1FFFFFFFFFFFFFFFLL;
                                                    }
                                                    else {
                                                      v345 = v344;
                                                    }
                                                    if (v345)
                                                    {
                                                      v346 = (char *)sub_5714((uint64_t)(v336 + 252), v345);
                                                      v338 = (char *)v336[251];
                                                      v341 = (char *)v336[250];
                                                    }
                                                    else
                                                    {
                                                      v346 = 0;
                                                    }
                                                    v347 = &v346[8 * v342];
                                                    v348 = &v346[8 * v345];
                                                    *(void *)v347 = v337;
                                                    v340 = v347 + 8;
                                                    while (v338 != v341)
                                                    {
                                                      v349 = *((void *)v338 - 1);
                                                      v338 -= 8;
                                                      *((void *)v347 - 1) = v349;
                                                      v347 -= 8;
                                                    }
                                                    v336[250] = v347;
                                                    v336[251] = v340;
                                                    v336[252] = v348;
                                                    if (v341) {
                                                      operator delete(v341);
                                                    }
                                                  }
                                                  else
                                                  {
                                                    *(void *)v338 = v337;
                                                    v340 = v338 + 8;
                                                  }
                                                  v336[251] = v340;
                                                  if (!*(_DWORD *)(v3 + 48))
                                                  {
                                                    v350 = *(void **)a1[1];
                                                    v351 = *(_WORD *)(a1[2] + 74) & 0x7FFF;
                                                    v352 = (char *)v350[254];
                                                    v353 = v350[255];
                                                    if ((unint64_t)v352 >= v353)
                                                    {
                                                      v355 = (char *)v350[253];
                                                      v356 = (v352 - v355) >> 3;
                                                      if ((unint64_t)(v356 + 1) >> 61) {
                                                        goto LABEL_543;
                                                      }
                                                      v357 = v353 - (void)v355;
                                                      v358 = (uint64_t)(v353 - (void)v355) >> 2;
                                                      if (v358 <= v356 + 1) {
                                                        v358 = v356 + 1;
                                                      }
                                                      if (v357 >= 0x7FFFFFFFFFFFFFF8) {
                                                        v359 = 0x1FFFFFFFFFFFFFFFLL;
                                                      }
                                                      else {
                                                        v359 = v358;
                                                      }
                                                      if (v359)
                                                      {
                                                        v360 = (char *)sub_5714((uint64_t)(v350 + 255), v359);
                                                        v352 = (char *)v350[254];
                                                        v355 = (char *)v350[253];
                                                      }
                                                      else
                                                      {
                                                        v360 = 0;
                                                      }
                                                      v361 = &v360[8 * v356];
                                                      v362 = &v360[8 * v359];
                                                      *(void *)v361 = v351;
                                                      v354 = v361 + 8;
                                                      while (v352 != v355)
                                                      {
                                                        v363 = *((void *)v352 - 1);
                                                        v352 -= 8;
                                                        *((void *)v361 - 1) = v363;
                                                        v361 -= 8;
                                                      }
                                                      v350[253] = v361;
                                                      v350[254] = v354;
                                                      v350[255] = v362;
                                                      if (v355) {
                                                        operator delete(v355);
                                                      }
                                                    }
                                                    else
                                                    {
                                                      *(void *)v352 = v351;
                                                      v354 = v352 + 8;
                                                    }
                                                    v350[254] = v354;
                                                    if (!*(_DWORD *)(v3 + 48))
                                                    {
                                                      v364 = *(void **)a1[1];
                                                      v365 = *(_WORD *)(a1[2] + 66) & 0x7FFF;
                                                      v366 = (char *)v364[257];
                                                      v367 = v364[258];
                                                      if ((unint64_t)v366 >= v367)
                                                      {
                                                        v369 = (char *)v364[256];
                                                        v370 = (v366 - v369) >> 3;
                                                        if ((unint64_t)(v370 + 1) >> 61) {
                                                          goto LABEL_543;
                                                        }
                                                        v371 = v367 - (void)v369;
                                                        v372 = (uint64_t)(v367 - (void)v369) >> 2;
                                                        if (v372 <= v370 + 1) {
                                                          v372 = v370 + 1;
                                                        }
                                                        if (v371 >= 0x7FFFFFFFFFFFFFF8) {
                                                          v373 = 0x1FFFFFFFFFFFFFFFLL;
                                                        }
                                                        else {
                                                          v373 = v372;
                                                        }
                                                        if (v373)
                                                        {
                                                          v374 = (char *)sub_5714((uint64_t)(v364 + 258), v373);
                                                          v366 = (char *)v364[257];
                                                          v369 = (char *)v364[256];
                                                        }
                                                        else
                                                        {
                                                          v374 = 0;
                                                        }
                                                        v375 = &v374[8 * v370];
                                                        v376 = &v374[8 * v373];
                                                        *(void *)v375 = v365;
                                                        v368 = v375 + 8;
                                                        while (v366 != v369)
                                                        {
                                                          v377 = *((void *)v366 - 1);
                                                          v366 -= 8;
                                                          *((void *)v375 - 1) = v377;
                                                          v375 -= 8;
                                                        }
                                                        v364[256] = v375;
                                                        v364[257] = v368;
                                                        v364[258] = v376;
                                                        if (v369) {
                                                          operator delete(v369);
                                                        }
                                                      }
                                                      else
                                                      {
                                                        *(void *)v366 = v365;
                                                        v368 = v366 + 8;
                                                      }
                                                      v364[257] = v368;
                                                      if (!*(_DWORD *)(v3 + 48))
                                                      {
                                                        v378 = *(void **)a1[1];
                                                        v379 = *(_WORD *)(a1[2] + 76) & 0x7FFF;
                                                        v380 = (char *)v378[260];
                                                        v381 = v378[261];
                                                        if ((unint64_t)v380 >= v381)
                                                        {
                                                          v383 = (char *)v378[259];
                                                          v384 = (v380 - v383) >> 3;
                                                          if ((unint64_t)(v384 + 1) >> 61) {
                                                            goto LABEL_543;
                                                          }
                                                          v385 = v381 - (void)v383;
                                                          v386 = (uint64_t)(v381 - (void)v383) >> 2;
                                                          if (v386 <= v384 + 1) {
                                                            v386 = v384 + 1;
                                                          }
                                                          if (v385 >= 0x7FFFFFFFFFFFFFF8) {
                                                            v387 = 0x1FFFFFFFFFFFFFFFLL;
                                                          }
                                                          else {
                                                            v387 = v386;
                                                          }
                                                          if (v387)
                                                          {
                                                            v388 = (char *)sub_5714((uint64_t)(v378 + 261), v387);
                                                            v380 = (char *)v378[260];
                                                            v383 = (char *)v378[259];
                                                          }
                                                          else
                                                          {
                                                            v388 = 0;
                                                          }
                                                          v389 = &v388[8 * v384];
                                                          v390 = &v388[8 * v387];
                                                          *(void *)v389 = v379;
                                                          v382 = v389 + 8;
                                                          while (v380 != v383)
                                                          {
                                                            v391 = *((void *)v380 - 1);
                                                            v380 -= 8;
                                                            *((void *)v389 - 1) = v391;
                                                            v389 -= 8;
                                                          }
                                                          v378[259] = v389;
                                                          v378[260] = v382;
                                                          v378[261] = v390;
                                                          if (v383) {
                                                            operator delete(v383);
                                                          }
                                                        }
                                                        else
                                                        {
                                                          *(void *)v380 = v379;
                                                          v382 = v380 + 8;
                                                        }
                                                        v378[260] = v382;
                                                        if (!*(_DWORD *)(v3 + 48))
                                                        {
                                                          v392 = *(void **)a1[1];
                                                          v393 = *(_WORD *)(a1[2] + 68) & 0x7FFF;
                                                          v394 = (char *)v392[263];
                                                          v395 = v392[264];
                                                          if ((unint64_t)v394 >= v395)
                                                          {
                                                            v397 = (char *)v392[262];
                                                            v398 = (v394 - v397) >> 3;
                                                            if ((unint64_t)(v398 + 1) >> 61) {
                                                              goto LABEL_543;
                                                            }
                                                            v399 = v395 - (void)v397;
                                                            v400 = (uint64_t)(v395 - (void)v397) >> 2;
                                                            if (v400 <= v398 + 1) {
                                                              v400 = v398 + 1;
                                                            }
                                                            if (v399 >= 0x7FFFFFFFFFFFFFF8) {
                                                              v401 = 0x1FFFFFFFFFFFFFFFLL;
                                                            }
                                                            else {
                                                              v401 = v400;
                                                            }
                                                            if (v401)
                                                            {
                                                              v402 = (char *)sub_5714((uint64_t)(v392 + 264), v401);
                                                              v394 = (char *)v392[263];
                                                              v397 = (char *)v392[262];
                                                            }
                                                            else
                                                            {
                                                              v402 = 0;
                                                            }
                                                            v403 = &v402[8 * v398];
                                                            v404 = &v402[8 * v401];
                                                            *(void *)v403 = v393;
                                                            v396 = v403 + 8;
                                                            while (v394 != v397)
                                                            {
                                                              v405 = *((void *)v394 - 1);
                                                              v394 -= 8;
                                                              *((void *)v403 - 1) = v405;
                                                              v403 -= 8;
                                                            }
                                                            v392[262] = v403;
                                                            v392[263] = v396;
                                                            v392[264] = v404;
                                                            if (v397) {
                                                              operator delete(v397);
                                                            }
                                                          }
                                                          else
                                                          {
                                                            *(void *)v394 = v393;
                                                            v396 = v394 + 8;
                                                          }
                                                          v392[263] = v396;
                                                          if (!*(_DWORD *)(v3 + 48))
                                                          {
                                                            v406 = *(void **)a1[1];
                                                            v407 = *(_WORD *)(a1[2] + 78) & 0x7FFF;
                                                            v408 = (char *)v406[266];
                                                            v409 = v406[267];
                                                            if ((unint64_t)v408 >= v409)
                                                            {
                                                              v411 = (char *)v406[265];
                                                              v412 = (v408 - v411) >> 3;
                                                              if ((unint64_t)(v412 + 1) >> 61) {
                                                                goto LABEL_543;
                                                              }
                                                              v413 = v409 - (void)v411;
                                                              v414 = (uint64_t)(v409 - (void)v411) >> 2;
                                                              if (v414 <= v412 + 1) {
                                                                v414 = v412 + 1;
                                                              }
                                                              if (v413 >= 0x7FFFFFFFFFFFFFF8) {
                                                                v415 = 0x1FFFFFFFFFFFFFFFLL;
                                                              }
                                                              else {
                                                                v415 = v414;
                                                              }
                                                              if (v415)
                                                              {
                                                                v416 = (char *)sub_5714((uint64_t)(v406 + 267), v415);
                                                                v408 = (char *)v406[266];
                                                                v411 = (char *)v406[265];
                                                              }
                                                              else
                                                              {
                                                                v416 = 0;
                                                              }
                                                              v417 = &v416[8 * v412];
                                                              v418 = &v416[8 * v415];
                                                              *(void *)v417 = v407;
                                                              v410 = v417 + 8;
                                                              while (v408 != v411)
                                                              {
                                                                v419 = *((void *)v408 - 1);
                                                                v408 -= 8;
                                                                *((void *)v417 - 1) = v419;
                                                                v417 -= 8;
                                                              }
                                                              v406[265] = v417;
                                                              v406[266] = v410;
                                                              v406[267] = v418;
                                                              if (v411) {
                                                                operator delete(v411);
                                                              }
                                                            }
                                                            else
                                                            {
                                                              *(void *)v408 = v407;
                                                              v410 = v408 + 8;
                                                            }
                                                            v406[266] = v410;
                                                            if (!*(_DWORD *)(v3 + 48))
                                                            {
                                                              v420 = *(void **)a1[1];
                                                              v421 = *(_WORD *)(a1[2] + 70) & 0x7FFF;
                                                              v422 = (char *)v420[269];
                                                              v423 = v420[270];
                                                              if ((unint64_t)v422 >= v423)
                                                              {
                                                                v425 = (char *)v420[268];
                                                                v426 = (v422 - v425) >> 3;
                                                                if ((unint64_t)(v426 + 1) >> 61) {
                                                                  goto LABEL_543;
                                                                }
                                                                v427 = v423 - (void)v425;
                                                                v428 = (uint64_t)(v423 - (void)v425) >> 2;
                                                                if (v428 <= v426 + 1) {
                                                                  v428 = v426 + 1;
                                                                }
                                                                if (v427 >= 0x7FFFFFFFFFFFFFF8) {
                                                                  v429 = 0x1FFFFFFFFFFFFFFFLL;
                                                                }
                                                                else {
                                                                  v429 = v428;
                                                                }
                                                                if (v429)
                                                                {
                                                                  v430 = (char *)sub_5714((uint64_t)(v420 + 270), v429);
                                                                  v422 = (char *)v420[269];
                                                                  v425 = (char *)v420[268];
                                                                }
                                                                else
                                                                {
                                                                  v430 = 0;
                                                                }
                                                                v431 = &v430[8 * v426];
                                                                v432 = &v430[8 * v429];
                                                                *(void *)v431 = v421;
                                                                v424 = v431 + 8;
                                                                while (v422 != v425)
                                                                {
                                                                  v433 = *((void *)v422 - 1);
                                                                  v422 -= 8;
                                                                  *((void *)v431 - 1) = v433;
                                                                  v431 -= 8;
                                                                }
                                                                v420[268] = v431;
                                                                v420[269] = v424;
                                                                v420[270] = v432;
                                                                if (v425) {
                                                                  operator delete(v425);
                                                                }
                                                              }
                                                              else
                                                              {
                                                                *(void *)v422 = v421;
                                                                v424 = v422 + 8;
                                                              }
                                                              v420[269] = v424;
                                                              if (!*(_DWORD *)(v3 + 48))
                                                              {
                                                                v434 = *(void **)a1[1];
                                                                v435 = *(_WORD *)(a1[2] + 80) & 0x7FFF;
                                                                v436 = (char *)v434[272];
                                                                v437 = v434[273];
                                                                if ((unint64_t)v436 >= v437)
                                                                {
                                                                  v439 = (char *)v434[271];
                                                                  v440 = (v436 - v439) >> 3;
                                                                  if ((unint64_t)(v440 + 1) >> 61) {
                                                                    goto LABEL_543;
                                                                  }
                                                                  v441 = v437 - (void)v439;
                                                                  v442 = (uint64_t)(v437 - (void)v439) >> 2;
                                                                  if (v442 <= v440 + 1) {
                                                                    v442 = v440 + 1;
                                                                  }
                                                                  if (v441 >= 0x7FFFFFFFFFFFFFF8) {
                                                                    v443 = 0x1FFFFFFFFFFFFFFFLL;
                                                                  }
                                                                  else {
                                                                    v443 = v442;
                                                                  }
                                                                  if (v443)
                                                                  {
                                                                    v444 = (char *)sub_5714((uint64_t)(v434 + 273), v443);
                                                                    v436 = (char *)v434[272];
                                                                    v439 = (char *)v434[271];
                                                                  }
                                                                  else
                                                                  {
                                                                    v444 = 0;
                                                                  }
                                                                  v445 = &v444[8 * v440];
                                                                  v446 = &v444[8 * v443];
                                                                  *(void *)v445 = v435;
                                                                  v438 = v445 + 8;
                                                                  while (v436 != v439)
                                                                  {
                                                                    v447 = *((void *)v436 - 1);
                                                                    v436 -= 8;
                                                                    *((void *)v445 - 1) = v447;
                                                                    v445 -= 8;
                                                                  }
                                                                  v434[271] = v445;
                                                                  v434[272] = v438;
                                                                  v434[273] = v446;
                                                                  if (v439) {
                                                                    operator delete(v439);
                                                                  }
                                                                }
                                                                else
                                                                {
                                                                  *(void *)v436 = v435;
                                                                  v438 = v436 + 8;
                                                                }
                                                                v434[272] = v438;
                                                                if (!*(_DWORD *)(v3 + 48))
                                                                {
                                                                  v448 = a1[2];
                                                                  v449 = *(void **)a1[1];
                                                                  v450 = *(_WORD *)(v448 + 72) & 0x7FFF;
                                                                  v451 = (char *)v449[275];
                                                                  v452 = v449[276];
                                                                  if ((unint64_t)v451 < v452)
                                                                  {
                                                                    *(void *)v451 = v450;
                                                                    v453 = v451 + 8;
LABEL_550:
                                                                    v449[275] = v453;
                                                                    goto LABEL_551;
                                                                  }
                                                                  v454 = (char *)v449[274];
                                                                  v455 = (v451 - v454) >> 3;
                                                                  if (!((unint64_t)(v455 + 1) >> 61))
                                                                  {
                                                                    v456 = v452 - (void)v454;
                                                                    v457 = (uint64_t)(v452 - (void)v454) >> 2;
                                                                    if (v457 <= v455 + 1) {
                                                                      v457 = v455 + 1;
                                                                    }
                                                                    if (v456 >= 0x7FFFFFFFFFFFFFF8) {
                                                                      v458 = 0x1FFFFFFFFFFFFFFFLL;
                                                                    }
                                                                    else {
                                                                      v458 = v457;
                                                                    }
                                                                    if (v458)
                                                                    {
                                                                      v459 = (char *)sub_5714((uint64_t)(v449 + 276), v458);
                                                                      v451 = (char *)v449[275];
                                                                      v454 = (char *)v449[274];
                                                                    }
                                                                    else
                                                                    {
                                                                      v459 = 0;
                                                                    }
                                                                    v460 = &v459[8 * v455];
                                                                    v461 = &v459[8 * v458];
                                                                    *(void *)v460 = v450;
                                                                    v453 = v460 + 8;
                                                                    while (v451 != v454)
                                                                    {
                                                                      v462 = *((void *)v451 - 1);
                                                                      v451 -= 8;
                                                                      *((void *)v460 - 1) = v462;
                                                                      v460 -= 8;
                                                                    }
                                                                    v449[274] = v460;
                                                                    v449[275] = v453;
                                                                    v449[276] = v461;
                                                                    if (v454) {
                                                                      operator delete(v454);
                                                                    }
                                                                    goto LABEL_550;
                                                                  }
LABEL_543:
                                                                  sub_566C();
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_551:
    *a2 = 1;
    return;
  }
  if (!*(_DWORD *)(v3 + 48))
  {
    v11 = (void *)a1[1];
    v10 = (_WORD *)a1[2];
    v12 = (void *)*v11;
    *(void *)(v12[182] - 8) += v10[13] & 0x7FFF;
    *(void *)(v12[185] - 8) += v10[9] & 0x7FFF;
    *(void *)(v12[188] - 8) += v10[14] & 0x7FFF;
    *(void *)(v12[191] - 8) += v10[10] & 0x7FFF;
    *(void *)(v12[194] - 8) += v10[15] & 0x7FFF;
    *(void *)(v12[197] - 8) += v10[11] & 0x7FFF;
    *(void *)(v12[200] - 8) += v10[16] & 0x7FFF;
    *(void *)(v12[203] - 8) += v10[12] & 0x7FFF;
    *(void *)(v12[206] - 8) += v10[21] & 0x7FFF;
    *(void *)(v12[209] - 8) += v10[17] & 0x7FFF;
    v13 = (_WORD *)a1[2];
    v14 = *(void **)a1[1];
    *(void *)(v14[212] - 8) += v13[22] & 0x7FFF;
    *(void *)(v14[215] - 8) += v13[18] & 0x7FFF;
    *(void *)(v14[218] - 8) += v13[23] & 0x7FFF;
    *(void *)(v14[221] - 8) += v13[19] & 0x7FFF;
    *(void *)(v14[224] - 8) += v13[24] & 0x7FFF;
    *(void *)(v14[227] - 8) += v13[20] & 0x7FFF;
    *(void *)(v14[230] - 8) += v13[29] & 0x7FFF;
    *(void *)(v14[233] - 8) += v13[25] & 0x7FFF;
    *(void *)(v14[236] - 8) += v13[30] & 0x7FFF;
    *(void *)(v14[239] - 8) += v13[26] & 0x7FFF;
    v15 = (_WORD *)a1[2];
    v16 = *(void **)a1[1];
    *(void *)(v16[242] - 8) += v15[31] & 0x7FFF;
    *(void *)(v16[245] - 8) += v15[27] & 0x7FFF;
    *(void *)(v16[248] - 8) += v15[32] & 0x7FFF;
    *(void *)(v16[251] - 8) += v15[28] & 0x7FFF;
    *(void *)(v16[254] - 8) += v15[37] & 0x7FFF;
    *(void *)(v16[257] - 8) += v15[33] & 0x7FFF;
    *(void *)(v16[260] - 8) += v15[38] & 0x7FFF;
    *(void *)(v16[263] - 8) += v15[34] & 0x7FFF;
    *(void *)(v16[266] - 8) += v15[39] & 0x7FFF;
    *(void *)(v16[269] - 8) += v15[35] & 0x7FFF;
    v17 = a1[2];
    v18 = (void *)*v11;
    *(void *)(v18[272] - 8) += *(_WORD *)(v17 + 80) & 0x7FFF;
    *(void *)(v18[275] - 8) += *(_WORD *)(v17 + 72) & 0x7FFF;
  }
}

void sub_4BADC(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    if (*(_DWORD *)(v3 + 48)) {
      goto LABEL_210;
    }
    v5 = *(void **)a1[1];
    uint64_t v6 = *(_WORD *)(a1[2] + 40) & 0x7FFF;
    v7 = (char *)v5[131];
    unint64_t v8 = v5[132];
    if ((unint64_t)v7 >= v8)
    {
      v15 = (char *)v5[130];
      uint64_t v16 = (v7 - v15) >> 3;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_212;
      }
      unint64_t v17 = v8 - (void)v15;
      unint64_t v18 = (uint64_t)(v8 - (void)v15) >> 2;
      if (v18 <= v16 + 1) {
        unint64_t v18 = v16 + 1;
      }
      if (v17 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v18;
      }
      if (v19)
      {
        v20 = (char *)sub_5714((uint64_t)(v5 + 132), v19);
        v7 = (char *)v5[131];
        v15 = (char *)v5[130];
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *(void *)v21 = v6;
      v9 = v21 + 8;
      while (v7 != v15)
      {
        uint64_t v23 = *((void *)v7 - 1);
        v7 -= 8;
        *((void *)v21 - 1) = v23;
        v21 -= 8;
      }
      v5[130] = v21;
      v5[131] = v9;
      v5[132] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)v7 = v6;
      v9 = v7 + 8;
    }
    v5[131] = v9;
    if (!*(_DWORD *)(v3 + 48))
    {
      v24 = *(void **)a1[1];
      uint64_t v25 = *(_WORD *)(a1[2] + 28) & 0x7FFF;
      v26 = (char *)v24[134];
      unint64_t v27 = v24[135];
      if ((unint64_t)v26 >= v27)
      {
        v29 = (char *)v24[133];
        uint64_t v30 = (v26 - v29) >> 3;
        if ((unint64_t)(v30 + 1) >> 61) {
          goto LABEL_212;
        }
        unint64_t v31 = v27 - (void)v29;
        unint64_t v32 = (uint64_t)(v27 - (void)v29) >> 2;
        if (v32 <= v30 + 1) {
          unint64_t v32 = v30 + 1;
        }
        if (v31 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v33 = v32;
        }
        if (v33)
        {
          v34 = (char *)sub_5714((uint64_t)(v24 + 135), v33);
          v26 = (char *)v24[134];
          v29 = (char *)v24[133];
        }
        else
        {
          v34 = 0;
        }
        v35 = &v34[8 * v30];
        v36 = &v34[8 * v33];
        *(void *)v35 = v25;
        v28 = v35 + 8;
        while (v26 != v29)
        {
          uint64_t v37 = *((void *)v26 - 1);
          v26 -= 8;
          *((void *)v35 - 1) = v37;
          v35 -= 8;
        }
        v24[133] = v35;
        v24[134] = v28;
        v24[135] = v36;
        if (v29) {
          operator delete(v29);
        }
      }
      else
      {
        *(void *)v26 = v25;
        v28 = v26 + 8;
      }
      v24[134] = v28;
      if (!*(_DWORD *)(v3 + 48))
      {
        uint64_t v38 = a1[1];
        v39 = *(void **)v38;
        uint64_t v40 = *(unsigned __int16 *)(a1[2] + 36);
        v41 = *(char **)(*(void *)v38 + 1096);
        unint64_t v42 = *(void *)(*(void *)v38 + 1104);
        if ((unint64_t)v41 >= v42)
        {
          v44 = (char *)v39[136];
          uint64_t v45 = (v41 - v44) >> 3;
          if ((unint64_t)(v45 + 1) >> 61) {
            goto LABEL_212;
          }
          unint64_t v46 = v42 - (void)v44;
          unint64_t v47 = (uint64_t)(v42 - (void)v44) >> 2;
          if (v47 <= v45 + 1) {
            unint64_t v47 = v45 + 1;
          }
          if (v46 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v48 = v47;
          }
          if (v48)
          {
            v49 = (char *)sub_5714((uint64_t)(v39 + 138), v48);
            v41 = (char *)v39[137];
            v44 = (char *)v39[136];
          }
          else
          {
            v49 = 0;
          }
          v50 = &v49[8 * v45];
          v51 = &v49[8 * v48];
          *(void *)v50 = v40;
          v43 = v50 + 8;
          while (v41 != v44)
          {
            uint64_t v52 = *((void *)v41 - 1);
            v41 -= 8;
            *((void *)v50 - 1) = v52;
            v50 -= 8;
          }
          v39[136] = v50;
          v39[137] = v43;
          v39[138] = v51;
          if (v44) {
            operator delete(v44);
          }
        }
        else
        {
          *(void *)v41 = v40;
          v43 = v41 + 8;
        }
        v39[137] = v43;
        if (!*(_DWORD *)(v3 + 48))
        {
          uint64_t v53 = a1[1];
          v54 = *(void **)v53;
          uint64_t v55 = *(unsigned __int16 *)(a1[2] + 24);
          v56 = *(char **)(*(void *)v53 + 1120);
          unint64_t v57 = *(void *)(*(void *)v53 + 1128);
          if ((unint64_t)v56 >= v57)
          {
            v59 = (char *)v54[139];
            uint64_t v60 = (v56 - v59) >> 3;
            if ((unint64_t)(v60 + 1) >> 61) {
              goto LABEL_212;
            }
            unint64_t v61 = v57 - (void)v59;
            unint64_t v62 = (uint64_t)(v57 - (void)v59) >> 2;
            if (v62 <= v60 + 1) {
              unint64_t v62 = v60 + 1;
            }
            if (v61 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v63 = v62;
            }
            if (v63)
            {
              v64 = (char *)sub_5714((uint64_t)(v54 + 141), v63);
              v56 = (char *)v54[140];
              v59 = (char *)v54[139];
            }
            else
            {
              v64 = 0;
            }
            v65 = &v64[8 * v60];
            v66 = &v64[8 * v63];
            *(void *)v65 = v55;
            v58 = v65 + 8;
            while (v56 != v59)
            {
              uint64_t v67 = *((void *)v56 - 1);
              v56 -= 8;
              *((void *)v65 - 1) = v67;
              v65 -= 8;
            }
            v54[139] = v65;
            v54[140] = v58;
            v54[141] = v66;
            if (v59) {
              operator delete(v59);
            }
          }
          else
          {
            *(void *)v56 = v55;
            v58 = v56 + 8;
          }
          v54[140] = v58;
          if (!*(_DWORD *)(v3 + 48))
          {
            uint64_t v68 = a1[1];
            v69 = *(void **)v68;
            uint64_t v70 = *(unsigned __int16 *)(a1[2] + 30);
            v71 = *(char **)(*(void *)v68 + 1144);
            unint64_t v72 = *(void *)(*(void *)v68 + 1152);
            if ((unint64_t)v71 >= v72)
            {
              v74 = (char *)v69[142];
              uint64_t v75 = (v71 - v74) >> 3;
              if ((unint64_t)(v75 + 1) >> 61) {
                goto LABEL_212;
              }
              unint64_t v76 = v72 - (void)v74;
              unint64_t v77 = (uint64_t)(v72 - (void)v74) >> 2;
              if (v77 <= v75 + 1) {
                unint64_t v77 = v75 + 1;
              }
              if (v76 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v78 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v78 = v77;
              }
              if (v78)
              {
                v79 = (char *)sub_5714((uint64_t)(v69 + 144), v78);
                v71 = (char *)v69[143];
                v74 = (char *)v69[142];
              }
              else
              {
                v79 = 0;
              }
              v80 = &v79[8 * v75];
              v81 = &v79[8 * v78];
              *(void *)v80 = v70;
              v73 = v80 + 8;
              while (v71 != v74)
              {
                uint64_t v82 = *((void *)v71 - 1);
                v71 -= 8;
                *((void *)v80 - 1) = v82;
                v80 -= 8;
              }
              v69[142] = v80;
              v69[143] = v73;
              v69[144] = v81;
              if (v74) {
                operator delete(v74);
              }
            }
            else
            {
              *(void *)v71 = v70;
              v73 = v71 + 8;
            }
            v69[143] = v73;
            if (!*(_DWORD *)(v3 + 48))
            {
              uint64_t v83 = a1[1];
              v84 = *(void **)v83;
              uint64_t v85 = *(unsigned __int16 *)(a1[2] + 18);
              v86 = *(char **)(*(void *)v83 + 1168);
              unint64_t v87 = *(void *)(*(void *)v83 + 1176);
              if ((unint64_t)v86 >= v87)
              {
                v89 = (char *)v84[145];
                uint64_t v90 = (v86 - v89) >> 3;
                if ((unint64_t)(v90 + 1) >> 61) {
                  goto LABEL_212;
                }
                unint64_t v91 = v87 - (void)v89;
                unint64_t v92 = (uint64_t)(v87 - (void)v89) >> 2;
                if (v92 <= v90 + 1) {
                  unint64_t v92 = v90 + 1;
                }
                if (v91 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v93 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v93 = v92;
                }
                if (v93)
                {
                  v94 = (char *)sub_5714((uint64_t)(v84 + 147), v93);
                  v86 = (char *)v84[146];
                  v89 = (char *)v84[145];
                }
                else
                {
                  v94 = 0;
                }
                v95 = &v94[8 * v90];
                v96 = &v94[8 * v93];
                *(void *)v95 = v85;
                v88 = v95 + 8;
                while (v86 != v89)
                {
                  uint64_t v97 = *((void *)v86 - 1);
                  v86 -= 8;
                  *((void *)v95 - 1) = v97;
                  v95 -= 8;
                }
                v84[145] = v95;
                v84[146] = v88;
                v84[147] = v96;
                if (v89) {
                  operator delete(v89);
                }
              }
              else
              {
                *(void *)v86 = v85;
                v88 = v86 + 8;
              }
              v84[146] = v88;
              if (!*(_DWORD *)(v3 + 48))
              {
                uint64_t v98 = a1[1];
                v99 = *(void **)v98;
                uint64_t v100 = *(unsigned __int16 *)(a1[2] + 32);
                v101 = *(char **)(*(void *)v98 + 1192);
                unint64_t v102 = *(void *)(*(void *)v98 + 1200);
                if ((unint64_t)v101 >= v102)
                {
                  v104 = (char *)v99[148];
                  uint64_t v105 = (v101 - v104) >> 3;
                  if ((unint64_t)(v105 + 1) >> 61) {
                    goto LABEL_212;
                  }
                  unint64_t v106 = v102 - (void)v104;
                  unint64_t v107 = (uint64_t)(v102 - (void)v104) >> 2;
                  if (v107 <= v105 + 1) {
                    unint64_t v107 = v105 + 1;
                  }
                  if (v106 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v108 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v108 = v107;
                  }
                  if (v108)
                  {
                    v109 = (char *)sub_5714((uint64_t)(v99 + 150), v108);
                    v101 = (char *)v99[149];
                    v104 = (char *)v99[148];
                  }
                  else
                  {
                    v109 = 0;
                  }
                  v110 = &v109[8 * v105];
                  v111 = &v109[8 * v108];
                  *(void *)v110 = v100;
                  v103 = v110 + 8;
                  while (v101 != v104)
                  {
                    uint64_t v112 = *((void *)v101 - 1);
                    v101 -= 8;
                    *((void *)v110 - 1) = v112;
                    v110 -= 8;
                  }
                  v99[148] = v110;
                  v99[149] = v103;
                  v99[150] = v111;
                  if (v104) {
                    operator delete(v104);
                  }
                }
                else
                {
                  *(void *)v101 = v100;
                  v103 = v101 + 8;
                }
                v99[149] = v103;
                if (!*(_DWORD *)(v3 + 48))
                {
                  uint64_t v113 = a1[1];
                  v114 = *(void **)v113;
                  uint64_t v115 = *(unsigned __int16 *)(a1[2] + 20);
                  v116 = *(char **)(*(void *)v113 + 1216);
                  unint64_t v117 = *(void *)(*(void *)v113 + 1224);
                  if ((unint64_t)v116 >= v117)
                  {
                    v119 = (char *)v114[151];
                    uint64_t v120 = (v116 - v119) >> 3;
                    if ((unint64_t)(v120 + 1) >> 61) {
                      goto LABEL_212;
                    }
                    unint64_t v121 = v117 - (void)v119;
                    unint64_t v122 = (uint64_t)(v117 - (void)v119) >> 2;
                    if (v122 <= v120 + 1) {
                      unint64_t v122 = v120 + 1;
                    }
                    if (v121 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v123 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v123 = v122;
                    }
                    if (v123)
                    {
                      v124 = (char *)sub_5714((uint64_t)(v114 + 153), v123);
                      v116 = (char *)v114[152];
                      v119 = (char *)v114[151];
                    }
                    else
                    {
                      v124 = 0;
                    }
                    v125 = &v124[8 * v120];
                    v126 = &v124[8 * v123];
                    *(void *)v125 = v115;
                    v118 = v125 + 8;
                    while (v116 != v119)
                    {
                      uint64_t v127 = *((void *)v116 - 1);
                      v116 -= 8;
                      *((void *)v125 - 1) = v127;
                      v125 -= 8;
                    }
                    v114[151] = v125;
                    v114[152] = v118;
                    v114[153] = v126;
                    if (v119) {
                      operator delete(v119);
                    }
                  }
                  else
                  {
                    *(void *)v116 = v115;
                    v118 = v116 + 8;
                  }
                  v114[152] = v118;
                  if (!*(_DWORD *)(v3 + 48))
                  {
                    uint64_t v128 = a1[1];
                    v129 = *(void **)v128;
                    uint64_t v130 = *(unsigned __int16 *)(a1[2] + 38);
                    v131 = *(char **)(*(void *)v128 + 1240);
                    unint64_t v132 = *(void *)(*(void *)v128 + 1248);
                    if ((unint64_t)v131 >= v132)
                    {
                      v134 = (char *)v129[154];
                      uint64_t v135 = (v131 - v134) >> 3;
                      if ((unint64_t)(v135 + 1) >> 61) {
                        goto LABEL_212;
                      }
                      unint64_t v136 = v132 - (void)v134;
                      unint64_t v137 = (uint64_t)(v132 - (void)v134) >> 2;
                      if (v137 <= v135 + 1) {
                        unint64_t v137 = v135 + 1;
                      }
                      if (v136 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v138 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v138 = v137;
                      }
                      if (v138)
                      {
                        v139 = (char *)sub_5714((uint64_t)(v129 + 156), v138);
                        v131 = (char *)v129[155];
                        v134 = (char *)v129[154];
                      }
                      else
                      {
                        v139 = 0;
                      }
                      v140 = &v139[8 * v135];
                      v141 = &v139[8 * v138];
                      *(void *)v140 = v130;
                      v133 = v140 + 8;
                      while (v131 != v134)
                      {
                        uint64_t v142 = *((void *)v131 - 1);
                        v131 -= 8;
                        *((void *)v140 - 1) = v142;
                        v140 -= 8;
                      }
                      v129[154] = v140;
                      v129[155] = v133;
                      v129[156] = v141;
                      if (v134) {
                        operator delete(v134);
                      }
                    }
                    else
                    {
                      *(void *)v131 = v130;
                      v133 = v131 + 8;
                    }
                    v129[155] = v133;
                    if (!*(_DWORD *)(v3 + 48))
                    {
                      uint64_t v143 = a1[1];
                      v144 = *(void **)v143;
                      uint64_t v145 = *(unsigned __int16 *)(a1[2] + 26);
                      v146 = *(char **)(*(void *)v143 + 1264);
                      unint64_t v147 = *(void *)(*(void *)v143 + 1272);
                      if ((unint64_t)v146 >= v147)
                      {
                        v149 = (char *)v144[157];
                        uint64_t v150 = (v146 - v149) >> 3;
                        if ((unint64_t)(v150 + 1) >> 61) {
                          goto LABEL_212;
                        }
                        unint64_t v151 = v147 - (void)v149;
                        unint64_t v152 = (uint64_t)(v147 - (void)v149) >> 2;
                        if (v152 <= v150 + 1) {
                          unint64_t v152 = v150 + 1;
                        }
                        if (v151 >= 0x7FFFFFFFFFFFFFF8) {
                          unint64_t v153 = 0x1FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v153 = v152;
                        }
                        if (v153)
                        {
                          v154 = (char *)sub_5714((uint64_t)(v144 + 159), v153);
                          v146 = (char *)v144[158];
                          v149 = (char *)v144[157];
                        }
                        else
                        {
                          v154 = 0;
                        }
                        v155 = &v154[8 * v150];
                        v156 = &v154[8 * v153];
                        *(void *)v155 = v145;
                        v148 = v155 + 8;
                        while (v146 != v149)
                        {
                          uint64_t v157 = *((void *)v146 - 1);
                          v146 -= 8;
                          *((void *)v155 - 1) = v157;
                          v155 -= 8;
                        }
                        v144[157] = v155;
                        v144[158] = v148;
                        v144[159] = v156;
                        if (v149) {
                          operator delete(v149);
                        }
                      }
                      else
                      {
                        *(void *)v146 = v145;
                        v148 = v146 + 8;
                      }
                      v144[158] = v148;
                      if (!*(_DWORD *)(v3 + 48))
                      {
                        uint64_t v158 = a1[1];
                        v159 = *(void **)v158;
                        uint64_t v160 = *(unsigned __int16 *)(a1[2] + 34);
                        v161 = *(char **)(*(void *)v158 + 1288);
                        unint64_t v162 = *(void *)(*(void *)v158 + 1296);
                        if ((unint64_t)v161 >= v162)
                        {
                          v164 = (char *)v159[160];
                          uint64_t v165 = (v161 - v164) >> 3;
                          if ((unint64_t)(v165 + 1) >> 61) {
                            goto LABEL_212;
                          }
                          unint64_t v166 = v162 - (void)v164;
                          unint64_t v167 = (uint64_t)(v162 - (void)v164) >> 2;
                          if (v167 <= v165 + 1) {
                            unint64_t v167 = v165 + 1;
                          }
                          if (v166 >= 0x7FFFFFFFFFFFFFF8) {
                            unint64_t v168 = 0x1FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v168 = v167;
                          }
                          if (v168)
                          {
                            v169 = (char *)sub_5714((uint64_t)(v159 + 162), v168);
                            v161 = (char *)v159[161];
                            v164 = (char *)v159[160];
                          }
                          else
                          {
                            v169 = 0;
                          }
                          v170 = &v169[8 * v165];
                          v171 = &v169[8 * v168];
                          *(void *)v170 = v160;
                          v163 = v170 + 8;
                          while (v161 != v164)
                          {
                            uint64_t v172 = *((void *)v161 - 1);
                            v161 -= 8;
                            *((void *)v170 - 1) = v172;
                            v170 -= 8;
                          }
                          v159[160] = v170;
                          v159[161] = v163;
                          v159[162] = v171;
                          if (v164) {
                            operator delete(v164);
                          }
                        }
                        else
                        {
                          *(void *)v161 = v160;
                          v163 = v161 + 8;
                        }
                        v159[161] = v163;
                        if (!*(_DWORD *)(v3 + 48))
                        {
                          uint64_t v173 = a1[1];
                          uint64_t v174 = a1[2];
                          v175 = *(void **)v173;
                          uint64_t v176 = *(unsigned __int16 *)(v174 + 22);
                          v177 = *(char **)(*(void *)v173 + 1312);
                          unint64_t v178 = *(void *)(*(void *)v173 + 1320);
                          if ((unint64_t)v177 < v178)
                          {
                            *(void *)v177 = v176;
                            v179 = v177 + 8;
LABEL_209:
                            v175[164] = v179;
                            goto LABEL_210;
                          }
                          v180 = (char *)v175[163];
                          uint64_t v181 = (v177 - v180) >> 3;
                          if (!((unint64_t)(v181 + 1) >> 61))
                          {
                            unint64_t v182 = v178 - (void)v180;
                            unint64_t v183 = (uint64_t)(v178 - (void)v180) >> 2;
                            if (v183 <= v181 + 1) {
                              unint64_t v183 = v181 + 1;
                            }
                            if (v182 >= 0x7FFFFFFFFFFFFFF8) {
                              unint64_t v184 = 0x1FFFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v184 = v183;
                            }
                            if (v184)
                            {
                              v185 = (char *)sub_5714((uint64_t)(v175 + 165), v184);
                              v177 = (char *)v175[164];
                              v180 = (char *)v175[163];
                            }
                            else
                            {
                              v185 = 0;
                            }
                            v186 = &v185[8 * v181];
                            v187 = &v185[8 * v184];
                            *(void *)v186 = v176;
                            v179 = v186 + 8;
                            while (v177 != v180)
                            {
                              uint64_t v188 = *((void *)v177 - 1);
                              v177 -= 8;
                              *((void *)v186 - 1) = v188;
                              v186 -= 8;
                            }
                            v175[163] = v186;
                            v175[164] = v179;
                            v175[165] = v187;
                            if (v180) {
                              operator delete(v180);
                            }
                            goto LABEL_209;
                          }
LABEL_212:
                          sub_566C();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_210:
    *a2 = 1;
    return;
  }
  if (!*(_DWORD *)(v3 + 48))
  {
    v11 = (void *)a1[1];
    v10 = (unsigned __int16 *)a1[2];
    v12 = (void *)*v11;
    *(void *)(v12[131] - 8) += v10[20] & 0x7FFF;
    *(void *)(v12[134] - 8) += v10[14] & 0x7FFF;
    *(void *)(v12[137] - 8) += v10[18];
    *(void *)(v12[140] - 8) += v10[12];
    *(void *)(v12[143] - 8) += v10[15];
    *(void *)(v12[146] - 8) += v10[9];
    *(void *)(v12[149] - 8) += v10[16];
    *(void *)(v12[152] - 8) += v10[10];
    *(void *)(v12[155] - 8) += v10[19];
    *(void *)(v12[158] - 8) += v10[13];
    uint64_t v13 = a1[2];
    v14 = (void *)*v11;
    *(void *)(v14[161] - 8) += *(unsigned __int16 *)(v13 + 34);
    *(void *)(v14[164] - 8) += *(unsigned __int16 *)(v13 + 22);
  }
}

void sub_4C5B4(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    if (*(_DWORD *)(v3 + 48)) {
      goto LABEL_193;
    }
    v5 = *(void **)a1[1];
    uint64_t v6 = *(_DWORD *)(a1[2] + 28) & 0x3FFFFLL;
    v7 = (uint64_t *)v5[98];
    unint64_t v8 = v5[99];
    if ((unint64_t)v7 >= v8)
    {
      uint64_t v13 = (uint64_t *)v5[97];
      uint64_t v14 = v7 - v13;
      if ((unint64_t)(v14 + 1) >> 61) {
        goto LABEL_195;
      }
      unint64_t v15 = v8 - (void)v13;
      unint64_t v16 = (uint64_t)(v8 - (void)v13) >> 2;
      if (v16 <= v14 + 1) {
        unint64_t v16 = v14 + 1;
      }
      if (v15 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v16;
      }
      if (v17)
      {
        unint64_t v18 = (char *)sub_5714((uint64_t)(v5 + 99), v17);
        v7 = (uint64_t *)v5[98];
        uint64_t v13 = (uint64_t *)v5[97];
      }
      else
      {
        unint64_t v18 = 0;
      }
      unint64_t v19 = (uint64_t *)&v18[8 * v14];
      v20 = &v18[8 * v17];
      *unint64_t v19 = v6;
      v9 = v19 + 1;
      while (v7 != v13)
      {
        uint64_t v21 = *--v7;
        *--unint64_t v19 = v21;
      }
      v5[97] = v19;
      v5[98] = v9;
      v5[99] = v20;
      if (v13) {
        operator delete(v13);
      }
    }
    else
    {
      uint64_t *v7 = v6;
      v9 = v7 + 1;
    }
    v5[98] = v9;
    if (!*(_DWORD *)(v3 + 48))
    {
      v22 = *(void **)a1[1];
      uint64_t v23 = *(_DWORD *)(a1[2] + 24) & 0x3FFFFLL;
      v24 = (uint64_t *)v22[101];
      unint64_t v25 = v22[102];
      if ((unint64_t)v24 >= v25)
      {
        unint64_t v27 = (uint64_t *)v22[100];
        uint64_t v28 = v24 - v27;
        if ((unint64_t)(v28 + 1) >> 61) {
          goto LABEL_195;
        }
        unint64_t v29 = v25 - (void)v27;
        unint64_t v30 = (uint64_t)(v25 - (void)v27) >> 2;
        if (v30 <= v28 + 1) {
          unint64_t v30 = v28 + 1;
        }
        if (v29 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v31 = v30;
        }
        if (v31)
        {
          unint64_t v32 = (char *)sub_5714((uint64_t)(v22 + 102), v31);
          v24 = (uint64_t *)v22[101];
          unint64_t v27 = (uint64_t *)v22[100];
        }
        else
        {
          unint64_t v32 = 0;
        }
        unint64_t v33 = (uint64_t *)&v32[8 * v28];
        v34 = &v32[8 * v31];
        *unint64_t v33 = v23;
        v26 = v33 + 1;
        while (v24 != v27)
        {
          uint64_t v35 = *--v24;
          *--unint64_t v33 = v35;
        }
        v22[100] = v33;
        v22[101] = v26;
        v22[102] = v34;
        if (v27) {
          operator delete(v27);
        }
      }
      else
      {
        uint64_t *v24 = v23;
        v26 = v24 + 1;
      }
      v22[101] = v26;
      if (!*(_DWORD *)(v3 + 48))
      {
        v36 = *(void **)a1[1];
        uint64_t v37 = *(_DWORD *)(a1[2] + 20) & 0x3FFFFLL;
        uint64_t v38 = (uint64_t *)v36[104];
        unint64_t v39 = v36[105];
        if ((unint64_t)v38 >= v39)
        {
          v41 = (uint64_t *)v36[103];
          uint64_t v42 = v38 - v41;
          if ((unint64_t)(v42 + 1) >> 61) {
            goto LABEL_195;
          }
          unint64_t v43 = v39 - (void)v41;
          unint64_t v44 = (uint64_t)(v39 - (void)v41) >> 2;
          if (v44 <= v42 + 1) {
            unint64_t v44 = v42 + 1;
          }
          if (v43 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v45 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v45 = v44;
          }
          if (v45)
          {
            unint64_t v46 = (char *)sub_5714((uint64_t)(v36 + 105), v45);
            uint64_t v38 = (uint64_t *)v36[104];
            v41 = (uint64_t *)v36[103];
          }
          else
          {
            unint64_t v46 = 0;
          }
          unint64_t v47 = (uint64_t *)&v46[8 * v42];
          unint64_t v48 = &v46[8 * v45];
          *unint64_t v47 = v37;
          uint64_t v40 = v47 + 1;
          while (v38 != v41)
          {
            uint64_t v49 = *--v38;
            *--unint64_t v47 = v49;
          }
          v36[103] = v47;
          v36[104] = v40;
          v36[105] = v48;
          if (v41) {
            operator delete(v41);
          }
        }
        else
        {
          *uint64_t v38 = v37;
          uint64_t v40 = v38 + 1;
        }
        v36[104] = v40;
        if (!*(_DWORD *)(v3 + 48))
        {
          v50 = *(void **)a1[1];
          unint64_t v51 = ((unint64_t)*(unsigned int *)(a1[2] + 16) >> 1) & 0x3FFFF;
          uint64_t v52 = (unint64_t *)v50[107];
          unint64_t v53 = v50[108];
          if ((unint64_t)v52 >= v53)
          {
            uint64_t v55 = (unint64_t *)v50[106];
            uint64_t v56 = v52 - v55;
            if ((unint64_t)(v56 + 1) >> 61) {
              goto LABEL_195;
            }
            unint64_t v57 = v53 - (void)v55;
            unint64_t v58 = (uint64_t)(v53 - (void)v55) >> 2;
            if (v58 <= v56 + 1) {
              unint64_t v58 = v56 + 1;
            }
            if (v57 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v59 = v58;
            }
            if (v59)
            {
              uint64_t v60 = (char *)sub_5714((uint64_t)(v50 + 108), v59);
              uint64_t v52 = (unint64_t *)v50[107];
              uint64_t v55 = (unint64_t *)v50[106];
            }
            else
            {
              uint64_t v60 = 0;
            }
            unint64_t v61 = (unint64_t *)&v60[8 * v56];
            unint64_t v62 = &v60[8 * v59];
            *unint64_t v61 = v51;
            v54 = v61 + 1;
            while (v52 != v55)
            {
              unint64_t v63 = *--v52;
              *--unint64_t v61 = v63;
            }
            v50[106] = v61;
            v50[107] = v54;
            v50[108] = v62;
            if (v55) {
              operator delete(v55);
            }
          }
          else
          {
            *uint64_t v52 = v51;
            v54 = v52 + 1;
          }
          v50[107] = v54;
          if (!*(_DWORD *)(v3 + 48))
          {
            v64 = *(void **)a1[1];
            uint64_t v65 = *(_DWORD *)(a1[2] + 36) & 0x3FFFFLL;
            v66 = (uint64_t *)v64[110];
            unint64_t v67 = v64[111];
            if ((unint64_t)v66 >= v67)
            {
              v69 = (uint64_t *)v64[109];
              uint64_t v70 = v66 - v69;
              if ((unint64_t)(v70 + 1) >> 61) {
                goto LABEL_195;
              }
              unint64_t v71 = v67 - (void)v69;
              unint64_t v72 = (uint64_t)(v67 - (void)v69) >> 2;
              if (v72 <= v70 + 1) {
                unint64_t v72 = v70 + 1;
              }
              if (v71 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v73 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v73 = v72;
              }
              if (v73)
              {
                v74 = (char *)sub_5714((uint64_t)(v64 + 111), v73);
                v66 = (uint64_t *)v64[110];
                v69 = (uint64_t *)v64[109];
              }
              else
              {
                v74 = 0;
              }
              uint64_t v75 = (uint64_t *)&v74[8 * v70];
              unint64_t v76 = &v74[8 * v73];
              *uint64_t v75 = v65;
              uint64_t v68 = v75 + 1;
              while (v66 != v69)
              {
                uint64_t v77 = *--v66;
                *--uint64_t v75 = v77;
              }
              v64[109] = v75;
              v64[110] = v68;
              v64[111] = v76;
              if (v69) {
                operator delete(v69);
              }
            }
            else
            {
              uint64_t *v66 = v65;
              uint64_t v68 = v66 + 1;
            }
            v64[110] = v68;
            if (!*(_DWORD *)(v3 + 48))
            {
              unint64_t v78 = *(void **)a1[1];
              uint64_t v79 = *(_DWORD *)(a1[2] + 32) & 0x3FFFFLL;
              v80 = (uint64_t *)v78[113];
              unint64_t v81 = v78[114];
              if ((unint64_t)v80 >= v81)
              {
                uint64_t v83 = (uint64_t *)v78[112];
                uint64_t v84 = v80 - v83;
                if ((unint64_t)(v84 + 1) >> 61) {
                  goto LABEL_195;
                }
                unint64_t v85 = v81 - (void)v83;
                unint64_t v86 = (uint64_t)(v81 - (void)v83) >> 2;
                if (v86 <= v84 + 1) {
                  unint64_t v86 = v84 + 1;
                }
                if (v85 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v87 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v87 = v86;
                }
                if (v87)
                {
                  v88 = (char *)sub_5714((uint64_t)(v78 + 114), v87);
                  v80 = (uint64_t *)v78[113];
                  uint64_t v83 = (uint64_t *)v78[112];
                }
                else
                {
                  v88 = 0;
                }
                v89 = (uint64_t *)&v88[8 * v84];
                uint64_t v90 = &v88[8 * v87];
                uint64_t *v89 = v79;
                uint64_t v82 = v89 + 1;
                while (v80 != v83)
                {
                  uint64_t v91 = *--v80;
                  *--v89 = v91;
                }
                v78[112] = v89;
                v78[113] = v82;
                v78[114] = v90;
                if (v83) {
                  operator delete(v83);
                }
              }
              else
              {
                uint64_t *v80 = v79;
                uint64_t v82 = v80 + 1;
              }
              v78[113] = v82;
              if (!*(_DWORD *)(v3 + 48))
              {
                uint64_t v92 = a1[1];
                unint64_t v93 = *(void **)v92;
                uint64_t v94 = *(unsigned __int16 *)(a1[2] + 54);
                v95 = *(char **)(*(void *)v92 + 928);
                unint64_t v96 = *(void *)(*(void *)v92 + 936);
                if ((unint64_t)v95 >= v96)
                {
                  uint64_t v98 = (char *)v93[115];
                  uint64_t v99 = (v95 - v98) >> 3;
                  if ((unint64_t)(v99 + 1) >> 61) {
                    goto LABEL_195;
                  }
                  unint64_t v100 = v96 - (void)v98;
                  unint64_t v101 = (uint64_t)(v96 - (void)v98) >> 2;
                  if (v101 <= v99 + 1) {
                    unint64_t v101 = v99 + 1;
                  }
                  if (v100 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v102 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v102 = v101;
                  }
                  if (v102)
                  {
                    v103 = (char *)sub_5714((uint64_t)(v93 + 117), v102);
                    v95 = (char *)v93[116];
                    uint64_t v98 = (char *)v93[115];
                  }
                  else
                  {
                    v103 = 0;
                  }
                  v104 = &v103[8 * v99];
                  uint64_t v105 = &v103[8 * v102];
                  *(void *)v104 = v94;
                  uint64_t v97 = v104 + 8;
                  while (v95 != v98)
                  {
                    uint64_t v106 = *((void *)v95 - 1);
                    v95 -= 8;
                    *((void *)v104 - 1) = v106;
                    v104 -= 8;
                  }
                  v93[115] = v104;
                  v93[116] = v97;
                  v93[117] = v105;
                  if (v98) {
                    operator delete(v98);
                  }
                }
                else
                {
                  *(void *)v95 = v94;
                  uint64_t v97 = v95 + 8;
                }
                v93[116] = v97;
                if (!*(_DWORD *)(v3 + 48))
                {
                  unint64_t v107 = *(void **)a1[1];
                  uint64_t v108 = *(_DWORD *)(a1[2] + 40) & 0xFFFFFLL;
                  v109 = (uint64_t *)v107[119];
                  unint64_t v110 = v107[120];
                  if ((unint64_t)v109 >= v110)
                  {
                    uint64_t v112 = (uint64_t *)v107[118];
                    uint64_t v113 = v109 - v112;
                    if ((unint64_t)(v113 + 1) >> 61) {
                      goto LABEL_195;
                    }
                    unint64_t v114 = v110 - (void)v112;
                    unint64_t v115 = (uint64_t)(v110 - (void)v112) >> 2;
                    if (v115 <= v113 + 1) {
                      unint64_t v115 = v113 + 1;
                    }
                    if (v114 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v116 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v116 = v115;
                    }
                    if (v116)
                    {
                      unint64_t v117 = (char *)sub_5714((uint64_t)(v107 + 120), v116);
                      v109 = (uint64_t *)v107[119];
                      uint64_t v112 = (uint64_t *)v107[118];
                    }
                    else
                    {
                      unint64_t v117 = 0;
                    }
                    v118 = (uint64_t *)&v117[8 * v113];
                    v119 = &v117[8 * v116];
                    uint64_t *v118 = v108;
                    v111 = v118 + 1;
                    while (v109 != v112)
                    {
                      uint64_t v120 = *--v109;
                      *--v118 = v120;
                    }
                    v107[118] = v118;
                    v107[119] = v111;
                    v107[120] = v119;
                    if (v112) {
                      operator delete(v112);
                    }
                  }
                  else
                  {
                    uint64_t *v109 = v108;
                    v111 = v109 + 1;
                  }
                  v107[119] = v111;
                  if (!*(_DWORD *)(v3 + 48))
                  {
                    unint64_t v121 = *(void **)a1[1];
                    uint64_t v122 = *(_DWORD *)(a1[2] + 48) & 0xFFFFFLL;
                    unint64_t v123 = (uint64_t *)v121[122];
                    unint64_t v124 = v121[123];
                    if ((unint64_t)v123 >= v124)
                    {
                      v126 = (uint64_t *)v121[121];
                      uint64_t v127 = v123 - v126;
                      if ((unint64_t)(v127 + 1) >> 61) {
                        goto LABEL_195;
                      }
                      unint64_t v128 = v124 - (void)v126;
                      unint64_t v129 = (uint64_t)(v124 - (void)v126) >> 2;
                      if (v129 <= v127 + 1) {
                        unint64_t v129 = v127 + 1;
                      }
                      if (v128 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v130 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v130 = v129;
                      }
                      if (v130)
                      {
                        v131 = (char *)sub_5714((uint64_t)(v121 + 123), v130);
                        unint64_t v123 = (uint64_t *)v121[122];
                        v126 = (uint64_t *)v121[121];
                      }
                      else
                      {
                        v131 = 0;
                      }
                      unint64_t v132 = (uint64_t *)&v131[8 * v127];
                      v133 = &v131[8 * v130];
                      *unint64_t v132 = v122;
                      v125 = v132 + 1;
                      while (v123 != v126)
                      {
                        uint64_t v134 = *--v123;
                        *--unint64_t v132 = v134;
                      }
                      v121[121] = v132;
                      v121[122] = v125;
                      v121[123] = v133;
                      if (v126) {
                        operator delete(v126);
                      }
                    }
                    else
                    {
                      *unint64_t v123 = v122;
                      v125 = v123 + 1;
                    }
                    v121[122] = v125;
                    if (!*(_DWORD *)(v3 + 48))
                    {
                      uint64_t v135 = a1[1];
                      unint64_t v136 = *(void **)v135;
                      uint64_t v137 = *(unsigned __int16 *)(a1[2] + 52);
                      unint64_t v138 = *(char **)(*(void *)v135 + 1000);
                      unint64_t v139 = *(void *)(*(void *)v135 + 1008);
                      if ((unint64_t)v138 >= v139)
                      {
                        v141 = (char *)v136[124];
                        uint64_t v142 = (v138 - v141) >> 3;
                        if ((unint64_t)(v142 + 1) >> 61) {
                          goto LABEL_195;
                        }
                        unint64_t v143 = v139 - (void)v141;
                        unint64_t v144 = (uint64_t)(v139 - (void)v141) >> 2;
                        if (v144 <= v142 + 1) {
                          unint64_t v144 = v142 + 1;
                        }
                        if (v143 >= 0x7FFFFFFFFFFFFFF8) {
                          unint64_t v145 = 0x1FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v145 = v144;
                        }
                        if (v145)
                        {
                          v146 = (char *)sub_5714((uint64_t)(v136 + 126), v145);
                          unint64_t v138 = (char *)v136[125];
                          v141 = (char *)v136[124];
                        }
                        else
                        {
                          v146 = 0;
                        }
                        unint64_t v147 = &v146[8 * v142];
                        v148 = &v146[8 * v145];
                        *(void *)unint64_t v147 = v137;
                        v140 = v147 + 8;
                        while (v138 != v141)
                        {
                          uint64_t v149 = *((void *)v138 - 1);
                          v138 -= 8;
                          *((void *)v147 - 1) = v149;
                          v147 -= 8;
                        }
                        v136[124] = v147;
                        v136[125] = v140;
                        v136[126] = v148;
                        if (v141) {
                          operator delete(v141);
                        }
                      }
                      else
                      {
                        *(void *)unint64_t v138 = v137;
                        v140 = v138 + 8;
                      }
                      v136[125] = v140;
                      if (!*(_DWORD *)(v3 + 48))
                      {
                        uint64_t v150 = a1[2];
                        unint64_t v151 = *(void **)a1[1];
                        uint64_t v152 = *(_DWORD *)(v150 + 44) & 0xFFFFFLL;
                        unint64_t v153 = (uint64_t *)v151[128];
                        unint64_t v154 = v151[129];
                        if ((unint64_t)v153 < v154)
                        {
                          *unint64_t v153 = v152;
                          v155 = v153 + 1;
LABEL_192:
                          v151[128] = v155;
                          goto LABEL_193;
                        }
                        v156 = (uint64_t *)v151[127];
                        uint64_t v157 = v153 - v156;
                        if (!((unint64_t)(v157 + 1) >> 61))
                        {
                          unint64_t v158 = v154 - (void)v156;
                          unint64_t v159 = (uint64_t)(v154 - (void)v156) >> 2;
                          if (v159 <= v157 + 1) {
                            unint64_t v159 = v157 + 1;
                          }
                          if (v158 >= 0x7FFFFFFFFFFFFFF8) {
                            unint64_t v160 = 0x1FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v160 = v159;
                          }
                          if (v160)
                          {
                            v161 = (char *)sub_5714((uint64_t)(v151 + 129), v160);
                            unint64_t v153 = (uint64_t *)v151[128];
                            v156 = (uint64_t *)v151[127];
                          }
                          else
                          {
                            v161 = 0;
                          }
                          unint64_t v162 = (uint64_t *)&v161[8 * v157];
                          v163 = &v161[8 * v160];
                          *unint64_t v162 = v152;
                          v155 = v162 + 1;
                          while (v153 != v156)
                          {
                            uint64_t v164 = *--v153;
                            *--unint64_t v162 = v164;
                          }
                          v151[127] = v162;
                          v151[128] = v155;
                          v151[129] = v163;
                          if (v156) {
                            operator delete(v156);
                          }
                          goto LABEL_192;
                        }
LABEL_195:
                        sub_566C();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_193:
    *a2 = 1;
    return;
  }
  if (!*(_DWORD *)(v3 + 48))
  {
    uint64_t v11 = a1[1];
    uint64_t v10 = a1[2];
    v12 = *(void **)v11;
    *(void *)(v12[98] - 8) += *(_DWORD *)(v10 + 28) & 0x3FFFF;
    *(void *)(v12[101] - 8) += *(_DWORD *)(v10 + 24) & 0x3FFFF;
    *(void *)(v12[104] - 8) += *(_DWORD *)(v10 + 20) & 0x3FFFF;
    *(void *)(v12[107] - 8) += ((unint64_t)*(unsigned int *)(v10 + 16) >> 1) & 0x3FFFF;
    *(void *)(v12[110] - 8) += *(_DWORD *)(v10 + 36) & 0x3FFFF;
    *(void *)(v12[113] - 8) += *(_DWORD *)(v10 + 32) & 0x3FFFF;
    *(void *)(v12[116] - 8) += *(unsigned __int16 *)(v10 + 54);
    *(void *)(v12[119] - 8) += *(_DWORD *)(v10 + 40) & 0xFFFFF;
    *(void *)(v12[122] - 8) += *(_DWORD *)(v10 + 48) & 0xFFFFF;
    *(void *)(v12[125] - 8) += *(unsigned __int16 *)(v10 + 52);
    *(void *)(*(void *)(*(void *)v11 + 1024) - 8) += *(_DWORD *)(a1[2] + 44) & 0xFFFFF;
  }
}

void sub_4CFE8(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    if (*(_DWORD *)(v3 + 48)) {
      goto LABEL_74;
    }
    v5 = *(void **)a1[1];
    uint64_t v6 = *(_DWORD *)(a1[2] + 28) & 0xFFFFFLL;
    v7 = (uint64_t *)v5[707];
    unint64_t v8 = v5[708];
    if ((unint64_t)v7 >= v8)
    {
      v12 = (uint64_t *)v5[706];
      uint64_t v13 = v7 - v12;
      if ((unint64_t)(v13 + 1) >> 61) {
        goto LABEL_76;
      }
      unint64_t v14 = v8 - (void)v12;
      unint64_t v15 = (uint64_t)(v8 - (void)v12) >> 2;
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      if (v14 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v15;
      }
      if (v16)
      {
        unint64_t v17 = (char *)sub_5714((uint64_t)(v5 + 708), v16);
        v7 = (uint64_t *)v5[707];
        v12 = (uint64_t *)v5[706];
      }
      else
      {
        unint64_t v17 = 0;
      }
      unint64_t v18 = (uint64_t *)&v17[8 * v13];
      unint64_t v19 = &v17[8 * v16];
      *unint64_t v18 = v6;
      v9 = v18 + 1;
      while (v7 != v12)
      {
        uint64_t v20 = *--v7;
        *--unint64_t v18 = v20;
      }
      v5[706] = v18;
      v5[707] = v9;
      v5[708] = v19;
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      uint64_t *v7 = v6;
      v9 = v7 + 1;
    }
    v5[707] = v9;
    if (!*(_DWORD *)(v3 + 48))
    {
      uint64_t v21 = *(void **)a1[1];
      uint64_t v22 = *(_DWORD *)(a1[2] + 20) & 0x1FFFFLL;
      uint64_t v23 = (uint64_t *)v21[710];
      unint64_t v24 = v21[711];
      if ((unint64_t)v23 >= v24)
      {
        v26 = (uint64_t *)v21[709];
        uint64_t v27 = v23 - v26;
        if ((unint64_t)(v27 + 1) >> 61) {
          goto LABEL_76;
        }
        unint64_t v28 = v24 - (void)v26;
        unint64_t v29 = (uint64_t)(v24 - (void)v26) >> 2;
        if (v29 <= v27 + 1) {
          unint64_t v29 = v27 + 1;
        }
        if (v28 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v29;
        }
        if (v30)
        {
          unint64_t v31 = (char *)sub_5714((uint64_t)(v21 + 711), v30);
          uint64_t v23 = (uint64_t *)v21[710];
          v26 = (uint64_t *)v21[709];
        }
        else
        {
          unint64_t v31 = 0;
        }
        unint64_t v32 = (uint64_t *)&v31[8 * v27];
        unint64_t v33 = &v31[8 * v30];
        *unint64_t v32 = v22;
        unint64_t v25 = v32 + 1;
        while (v23 != v26)
        {
          uint64_t v34 = *--v23;
          *--unint64_t v32 = v34;
        }
        v21[709] = v32;
        v21[710] = v25;
        v21[711] = v33;
        if (v26) {
          operator delete(v26);
        }
      }
      else
      {
        *uint64_t v23 = v22;
        unint64_t v25 = v23 + 1;
      }
      v21[710] = v25;
      if (!*(_DWORD *)(v3 + 48))
      {
        uint64_t v35 = *(void **)a1[1];
        uint64_t v36 = *(_DWORD *)(a1[2] + 24) & 0xFFFFFLL;
        uint64_t v37 = (uint64_t *)v35[713];
        unint64_t v38 = v35[714];
        if ((unint64_t)v37 >= v38)
        {
          uint64_t v40 = (uint64_t *)v35[712];
          uint64_t v41 = v37 - v40;
          if ((unint64_t)(v41 + 1) >> 61) {
            goto LABEL_76;
          }
          unint64_t v42 = v38 - (void)v40;
          unint64_t v43 = (uint64_t)(v38 - (void)v40) >> 2;
          if (v43 <= v41 + 1) {
            unint64_t v43 = v41 + 1;
          }
          if (v42 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v44 = v43;
          }
          if (v44)
          {
            unint64_t v45 = (char *)sub_5714((uint64_t)(v35 + 714), v44);
            uint64_t v37 = (uint64_t *)v35[713];
            uint64_t v40 = (uint64_t *)v35[712];
          }
          else
          {
            unint64_t v45 = 0;
          }
          unint64_t v46 = (uint64_t *)&v45[8 * v41];
          unint64_t v47 = &v45[8 * v44];
          *unint64_t v46 = v36;
          unint64_t v39 = v46 + 1;
          while (v37 != v40)
          {
            uint64_t v48 = *--v37;
            *--unint64_t v46 = v48;
          }
          v35[712] = v46;
          v35[713] = v39;
          v35[714] = v47;
          if (v40) {
            operator delete(v40);
          }
        }
        else
        {
          *uint64_t v37 = v36;
          unint64_t v39 = v37 + 1;
        }
        v35[713] = v39;
        if (!*(_DWORD *)(v3 + 48))
        {
          uint64_t v49 = a1[2];
          v50 = *(void **)a1[1];
          unint64_t v51 = ((unint64_t)*(unsigned int *)(v49 + 16) >> 1) & 0x7FFFF;
          uint64_t v52 = (unint64_t *)v50[716];
          unint64_t v53 = v50[717];
          if ((unint64_t)v52 < v53)
          {
            *uint64_t v52 = v51;
            v54 = v52 + 1;
LABEL_73:
            v50[716] = v54;
            goto LABEL_74;
          }
          uint64_t v55 = (unint64_t *)v50[715];
          uint64_t v56 = v52 - v55;
          if (!((unint64_t)(v56 + 1) >> 61))
          {
            unint64_t v57 = v53 - (void)v55;
            unint64_t v58 = (uint64_t)(v53 - (void)v55) >> 2;
            if (v58 <= v56 + 1) {
              unint64_t v58 = v56 + 1;
            }
            if (v57 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v59 = v58;
            }
            if (v59)
            {
              uint64_t v60 = (char *)sub_5714((uint64_t)(v50 + 717), v59);
              uint64_t v52 = (unint64_t *)v50[716];
              uint64_t v55 = (unint64_t *)v50[715];
            }
            else
            {
              uint64_t v60 = 0;
            }
            unint64_t v61 = (unint64_t *)&v60[8 * v56];
            unint64_t v62 = &v60[8 * v59];
            *unint64_t v61 = v51;
            v54 = v61 + 1;
            while (v52 != v55)
            {
              unint64_t v63 = *--v52;
              *--unint64_t v61 = v63;
            }
            v50[715] = v61;
            v50[716] = v54;
            v50[717] = v62;
            if (v55) {
              operator delete(v55);
            }
            goto LABEL_73;
          }
LABEL_76:
          sub_566C();
        }
      }
    }
LABEL_74:
    *a2 = 1;
    return;
  }
  if (!*(_DWORD *)(v3 + 48))
  {
    uint64_t v10 = (unsigned int *)a1[2];
    uint64_t v11 = *(void **)a1[1];
    *(void *)(v11[707] - 8) += v10[7] & 0xFFFFF;
    *(void *)(v11[710] - 8) += v10[5] & 0x1FFFF;
    *(void *)(v11[713] - 8) += v10[6] & 0xFFFFF;
    *(void *)(v11[716] - 8) += ((unint64_t)v10[4] >> 1) & 0x7FFFF;
  }
}

void sub_4D404(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    if (*(_DWORD *)(v3 + 48)) {
      goto LABEL_313;
    }
    v5 = *(void **)a1[1];
    uint64_t v6 = *(_DWORD *)(a1[2] + 40) & 0x7FFFFLL;
    v7 = (uint64_t *)v5[602];
    unint64_t v8 = v5[603];
    if ((unint64_t)v7 >= v8)
    {
      unint64_t v15 = (uint64_t *)v5[601];
      uint64_t v16 = v7 - v15;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_305;
      }
      unint64_t v17 = v8 - (void)v15;
      unint64_t v18 = (uint64_t)(v8 - (void)v15) >> 2;
      if (v18 <= v16 + 1) {
        unint64_t v18 = v16 + 1;
      }
      if (v17 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v18;
      }
      if (v19)
      {
        uint64_t v20 = (char *)sub_5714((uint64_t)(v5 + 603), v19);
        v7 = (uint64_t *)v5[602];
        unint64_t v15 = (uint64_t *)v5[601];
      }
      else
      {
        uint64_t v20 = 0;
      }
      uint64_t v21 = (uint64_t *)&v20[8 * v16];
      uint64_t v22 = &v20[8 * v19];
      uint64_t *v21 = v6;
      v9 = v21 + 1;
      while (v7 != v15)
      {
        uint64_t v23 = *--v7;
        *--uint64_t v21 = v23;
      }
      v5[601] = v21;
      v5[602] = v9;
      v5[603] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      uint64_t *v7 = v6;
      v9 = v7 + 1;
    }
    v5[602] = v9;
    if (!*(_DWORD *)(v3 + 48))
    {
      unint64_t v24 = *(void **)a1[1];
      uint64_t v25 = *(_DWORD *)(a1[2] + 76) & 0x7FFFFLL;
      v26 = (uint64_t *)v24[605];
      unint64_t v27 = v24[606];
      if ((unint64_t)v26 >= v27)
      {
        unint64_t v29 = (uint64_t *)v24[604];
        uint64_t v30 = v26 - v29;
        if ((unint64_t)(v30 + 1) >> 61) {
          goto LABEL_305;
        }
        unint64_t v31 = v27 - (void)v29;
        unint64_t v32 = (uint64_t)(v27 - (void)v29) >> 2;
        if (v32 <= v30 + 1) {
          unint64_t v32 = v30 + 1;
        }
        if (v31 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v33 = v32;
        }
        if (v33)
        {
          uint64_t v34 = (char *)sub_5714((uint64_t)(v24 + 606), v33);
          v26 = (uint64_t *)v24[605];
          unint64_t v29 = (uint64_t *)v24[604];
        }
        else
        {
          uint64_t v34 = 0;
        }
        uint64_t v35 = (uint64_t *)&v34[8 * v30];
        uint64_t v36 = &v34[8 * v33];
        uint64_t *v35 = v25;
        unint64_t v28 = v35 + 1;
        while (v26 != v29)
        {
          uint64_t v37 = *--v26;
          *--uint64_t v35 = v37;
        }
        v24[604] = v35;
        v24[605] = v28;
        v24[606] = v36;
        if (v29) {
          operator delete(v29);
        }
      }
      else
      {
        uint64_t *v26 = v25;
        unint64_t v28 = v26 + 1;
      }
      v24[605] = v28;
      if (!*(_DWORD *)(v3 + 48))
      {
        unint64_t v38 = *(void **)a1[1];
        unint64_t v39 = ((unint64_t)*(unsigned int *)(a1[2] + 16) >> 1) & 0x7FFFF;
        uint64_t v40 = (unint64_t *)v38[608];
        unint64_t v41 = v38[609];
        if ((unint64_t)v40 >= v41)
        {
          unint64_t v43 = (unint64_t *)v38[607];
          uint64_t v44 = v40 - v43;
          if ((unint64_t)(v44 + 1) >> 61) {
            goto LABEL_305;
          }
          unint64_t v45 = v41 - (void)v43;
          unint64_t v46 = (uint64_t)(v41 - (void)v43) >> 2;
          if (v46 <= v44 + 1) {
            unint64_t v46 = v44 + 1;
          }
          if (v45 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v47 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v47 = v46;
          }
          if (v47)
          {
            uint64_t v48 = (char *)sub_5714((uint64_t)(v38 + 609), v47);
            uint64_t v40 = (unint64_t *)v38[608];
            unint64_t v43 = (unint64_t *)v38[607];
          }
          else
          {
            uint64_t v48 = 0;
          }
          uint64_t v49 = (unint64_t *)&v48[8 * v44];
          v50 = &v48[8 * v47];
          unint64_t *v49 = v39;
          unint64_t v42 = v49 + 1;
          while (v40 != v43)
          {
            unint64_t v51 = *--v40;
            *--uint64_t v49 = v51;
          }
          v38[607] = v49;
          v38[608] = v42;
          v38[609] = v50;
          if (v43) {
            operator delete(v43);
          }
        }
        else
        {
          *uint64_t v40 = v39;
          unint64_t v42 = v40 + 1;
        }
        v38[608] = v42;
        if (!*(_DWORD *)(v3 + 48))
        {
          uint64_t v52 = *(void **)a1[1];
          uint64_t v53 = *(_DWORD *)(a1[2] + 52) & 0x7FFFFLL;
          v54 = (uint64_t *)v52[611];
          unint64_t v55 = v52[612];
          if ((unint64_t)v54 >= v55)
          {
            unint64_t v57 = (uint64_t *)v52[610];
            uint64_t v58 = v54 - v57;
            if ((unint64_t)(v58 + 1) >> 61) {
              goto LABEL_305;
            }
            unint64_t v59 = v55 - (void)v57;
            unint64_t v60 = (uint64_t)(v55 - (void)v57) >> 2;
            if (v60 <= v58 + 1) {
              unint64_t v60 = v58 + 1;
            }
            if (v59 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v61 = v60;
            }
            if (v61)
            {
              unint64_t v62 = (char *)sub_5714((uint64_t)(v52 + 612), v61);
              v54 = (uint64_t *)v52[611];
              unint64_t v57 = (uint64_t *)v52[610];
            }
            else
            {
              unint64_t v62 = 0;
            }
            unint64_t v63 = (uint64_t *)&v62[8 * v58];
            v64 = &v62[8 * v61];
            *unint64_t v63 = v53;
            uint64_t v56 = v63 + 1;
            while (v54 != v57)
            {
              uint64_t v65 = *--v54;
              *--unint64_t v63 = v65;
            }
            v52[610] = v63;
            v52[611] = v56;
            v52[612] = v64;
            if (v57) {
              operator delete(v57);
            }
          }
          else
          {
            uint64_t *v54 = v53;
            uint64_t v56 = v54 + 1;
          }
          v52[611] = v56;
          if (!*(_DWORD *)(v3 + 48))
          {
            v66 = *(void **)a1[1];
            uint64_t v67 = *(_DWORD *)(a1[2] + 24) & 0x7FFFFLL;
            uint64_t v68 = (uint64_t *)v66[614];
            unint64_t v69 = v66[615];
            if ((unint64_t)v68 >= v69)
            {
              unint64_t v71 = (uint64_t *)v66[613];
              uint64_t v72 = v68 - v71;
              if ((unint64_t)(v72 + 1) >> 61) {
                goto LABEL_305;
              }
              unint64_t v73 = v69 - (void)v71;
              unint64_t v74 = (uint64_t)(v69 - (void)v71) >> 2;
              if (v74 <= v72 + 1) {
                unint64_t v74 = v72 + 1;
              }
              if (v73 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v75 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v75 = v74;
              }
              if (v75)
              {
                unint64_t v76 = (char *)sub_5714((uint64_t)(v66 + 615), v75);
                uint64_t v68 = (uint64_t *)v66[614];
                unint64_t v71 = (uint64_t *)v66[613];
              }
              else
              {
                unint64_t v76 = 0;
              }
              uint64_t v77 = (uint64_t *)&v76[8 * v72];
              unint64_t v78 = &v76[8 * v75];
              *uint64_t v77 = v67;
              uint64_t v70 = v77 + 1;
              while (v68 != v71)
              {
                uint64_t v79 = *--v68;
                *--uint64_t v77 = v79;
              }
              v66[613] = v77;
              v66[614] = v70;
              v66[615] = v78;
              if (v71) {
                operator delete(v71);
              }
            }
            else
            {
              *uint64_t v68 = v67;
              uint64_t v70 = v68 + 1;
            }
            v66[614] = v70;
            if (!*(_DWORD *)(v3 + 48))
            {
              v80 = *(void **)a1[1];
              uint64_t v81 = *(_DWORD *)(a1[2] + 60) & 0x7FFFFLL;
              uint64_t v82 = (uint64_t *)v80[617];
              unint64_t v83 = v80[618];
              if ((unint64_t)v82 >= v83)
              {
                unint64_t v85 = (uint64_t *)v80[616];
                uint64_t v86 = v82 - v85;
                if ((unint64_t)(v86 + 1) >> 61) {
                  goto LABEL_305;
                }
                unint64_t v87 = v83 - (void)v85;
                unint64_t v88 = (uint64_t)(v83 - (void)v85) >> 2;
                if (v88 <= v86 + 1) {
                  unint64_t v88 = v86 + 1;
                }
                if (v87 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v89 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v89 = v88;
                }
                if (v89)
                {
                  uint64_t v90 = (char *)sub_5714((uint64_t)(v80 + 618), v89);
                  uint64_t v82 = (uint64_t *)v80[617];
                  unint64_t v85 = (uint64_t *)v80[616];
                }
                else
                {
                  uint64_t v90 = 0;
                }
                uint64_t v91 = (uint64_t *)&v90[8 * v86];
                uint64_t v92 = &v90[8 * v89];
                *uint64_t v91 = v81;
                uint64_t v84 = v91 + 1;
                while (v82 != v85)
                {
                  uint64_t v93 = *--v82;
                  *--uint64_t v91 = v93;
                }
                v80[616] = v91;
                v80[617] = v84;
                v80[618] = v92;
                if (v85) {
                  operator delete(v85);
                }
              }
              else
              {
                *uint64_t v82 = v81;
                uint64_t v84 = v82 + 1;
              }
              v80[617] = v84;
              if (!*(_DWORD *)(v3 + 48))
              {
                uint64_t v94 = *(void **)a1[1];
                uint64_t v95 = *(_DWORD *)(a1[2] + 36) & 0x7FFFFLL;
                unint64_t v96 = (uint64_t *)v94[620];
                unint64_t v97 = v94[621];
                if ((unint64_t)v96 >= v97)
                {
                  uint64_t v99 = (uint64_t *)v94[619];
                  uint64_t v100 = v96 - v99;
                  if ((unint64_t)(v100 + 1) >> 61) {
                    goto LABEL_305;
                  }
                  unint64_t v101 = v97 - (void)v99;
                  unint64_t v102 = (uint64_t)(v97 - (void)v99) >> 2;
                  if (v102 <= v100 + 1) {
                    unint64_t v102 = v100 + 1;
                  }
                  if (v101 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v103 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v103 = v102;
                  }
                  if (v103)
                  {
                    v104 = (char *)sub_5714((uint64_t)(v94 + 621), v103);
                    unint64_t v96 = (uint64_t *)v94[620];
                    uint64_t v99 = (uint64_t *)v94[619];
                  }
                  else
                  {
                    v104 = 0;
                  }
                  uint64_t v105 = (uint64_t *)&v104[8 * v100];
                  uint64_t v106 = &v104[8 * v103];
                  *uint64_t v105 = v95;
                  uint64_t v98 = v105 + 1;
                  while (v96 != v99)
                  {
                    uint64_t v107 = *--v96;
                    *--uint64_t v105 = v107;
                  }
                  v94[619] = v105;
                  v94[620] = v98;
                  v94[621] = v106;
                  if (v99) {
                    operator delete(v99);
                  }
                }
                else
                {
                  uint64_t *v96 = v95;
                  uint64_t v98 = v96 + 1;
                }
                v94[620] = v98;
                if (!*(_DWORD *)(v3 + 48))
                {
                  uint64_t v108 = *(void **)a1[1];
                  uint64_t v109 = *(_DWORD *)(a1[2] + 72) & 0x7FFFFLL;
                  unint64_t v110 = (uint64_t *)v108[623];
                  unint64_t v111 = v108[624];
                  if ((unint64_t)v110 >= v111)
                  {
                    uint64_t v113 = (uint64_t *)v108[622];
                    uint64_t v114 = v110 - v113;
                    if ((unint64_t)(v114 + 1) >> 61) {
                      goto LABEL_305;
                    }
                    unint64_t v115 = v111 - (void)v113;
                    unint64_t v116 = (uint64_t)(v111 - (void)v113) >> 2;
                    if (v116 <= v114 + 1) {
                      unint64_t v116 = v114 + 1;
                    }
                    if (v115 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v117 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v117 = v116;
                    }
                    if (v117)
                    {
                      v118 = (char *)sub_5714((uint64_t)(v108 + 624), v117);
                      unint64_t v110 = (uint64_t *)v108[623];
                      uint64_t v113 = (uint64_t *)v108[622];
                    }
                    else
                    {
                      v118 = 0;
                    }
                    v119 = (uint64_t *)&v118[8 * v114];
                    uint64_t v120 = &v118[8 * v117];
                    uint64_t *v119 = v109;
                    uint64_t v112 = v119 + 1;
                    while (v110 != v113)
                    {
                      uint64_t v121 = *--v110;
                      *--v119 = v121;
                    }
                    v108[622] = v119;
                    v108[623] = v112;
                    v108[624] = v120;
                    if (v113) {
                      operator delete(v113);
                    }
                  }
                  else
                  {
                    uint64_t *v110 = v109;
                    uint64_t v112 = v110 + 1;
                  }
                  v108[623] = v112;
                  if (!*(_DWORD *)(v3 + 48))
                  {
                    uint64_t v122 = *(void **)a1[1];
                    uint64_t v123 = *(_DWORD *)(a1[2] + 32) & 0x7FFFFLL;
                    unint64_t v124 = (uint64_t *)v122[626];
                    unint64_t v125 = v122[627];
                    if ((unint64_t)v124 >= v125)
                    {
                      uint64_t v127 = (uint64_t *)v122[625];
                      uint64_t v128 = v124 - v127;
                      if ((unint64_t)(v128 + 1) >> 61) {
                        goto LABEL_305;
                      }
                      unint64_t v129 = v125 - (void)v127;
                      unint64_t v130 = (uint64_t)(v125 - (void)v127) >> 2;
                      if (v130 <= v128 + 1) {
                        unint64_t v130 = v128 + 1;
                      }
                      if (v129 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v131 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v131 = v130;
                      }
                      if (v131)
                      {
                        unint64_t v132 = (char *)sub_5714((uint64_t)(v122 + 627), v131);
                        unint64_t v124 = (uint64_t *)v122[626];
                        uint64_t v127 = (uint64_t *)v122[625];
                      }
                      else
                      {
                        unint64_t v132 = 0;
                      }
                      v133 = (uint64_t *)&v132[8 * v128];
                      uint64_t v134 = &v132[8 * v131];
                      uint64_t *v133 = v123;
                      v126 = v133 + 1;
                      while (v124 != v127)
                      {
                        uint64_t v135 = *--v124;
                        *--v133 = v135;
                      }
                      v122[625] = v133;
                      v122[626] = v126;
                      v122[627] = v134;
                      if (v127) {
                        operator delete(v127);
                      }
                    }
                    else
                    {
                      uint64_t *v124 = v123;
                      v126 = v124 + 1;
                    }
                    v122[626] = v126;
                    if (!*(_DWORD *)(v3 + 48))
                    {
                      unint64_t v136 = *(void **)a1[1];
                      uint64_t v137 = *(_DWORD *)(a1[2] + 68) & 0x7FFFFLL;
                      unint64_t v138 = (uint64_t *)v136[629];
                      unint64_t v139 = v136[630];
                      if ((unint64_t)v138 >= v139)
                      {
                        v141 = (uint64_t *)v136[628];
                        uint64_t v142 = v138 - v141;
                        if ((unint64_t)(v142 + 1) >> 61) {
                          goto LABEL_305;
                        }
                        unint64_t v143 = v139 - (void)v141;
                        unint64_t v144 = (uint64_t)(v139 - (void)v141) >> 2;
                        if (v144 <= v142 + 1) {
                          unint64_t v144 = v142 + 1;
                        }
                        if (v143 >= 0x7FFFFFFFFFFFFFF8) {
                          unint64_t v145 = 0x1FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v145 = v144;
                        }
                        if (v145)
                        {
                          v146 = (char *)sub_5714((uint64_t)(v136 + 630), v145);
                          unint64_t v138 = (uint64_t *)v136[629];
                          v141 = (uint64_t *)v136[628];
                        }
                        else
                        {
                          v146 = 0;
                        }
                        unint64_t v147 = (uint64_t *)&v146[8 * v142];
                        v148 = &v146[8 * v145];
                        *unint64_t v147 = v137;
                        v140 = v147 + 1;
                        while (v138 != v141)
                        {
                          uint64_t v149 = *--v138;
                          *--unint64_t v147 = v149;
                        }
                        v136[628] = v147;
                        v136[629] = v140;
                        v136[630] = v148;
                        if (v141) {
                          operator delete(v141);
                        }
                      }
                      else
                      {
                        *unint64_t v138 = v137;
                        v140 = v138 + 1;
                      }
                      v136[629] = v140;
                      if (!*(_DWORD *)(v3 + 48))
                      {
                        uint64_t v150 = *(void **)a1[1];
                        uint64_t v151 = *(_DWORD *)(a1[2] + 44) & 0x7FFFFLL;
                        uint64_t v152 = (uint64_t *)v150[632];
                        unint64_t v153 = v150[633];
                        if ((unint64_t)v152 >= v153)
                        {
                          v155 = (uint64_t *)v150[631];
                          uint64_t v156 = v152 - v155;
                          if ((unint64_t)(v156 + 1) >> 61) {
                            goto LABEL_305;
                          }
                          unint64_t v157 = v153 - (void)v155;
                          unint64_t v158 = (uint64_t)(v153 - (void)v155) >> 2;
                          if (v158 <= v156 + 1) {
                            unint64_t v158 = v156 + 1;
                          }
                          if (v157 >= 0x7FFFFFFFFFFFFFF8) {
                            unint64_t v159 = 0x1FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v159 = v158;
                          }
                          if (v159)
                          {
                            unint64_t v160 = (char *)sub_5714((uint64_t)(v150 + 633), v159);
                            uint64_t v152 = (uint64_t *)v150[632];
                            v155 = (uint64_t *)v150[631];
                          }
                          else
                          {
                            unint64_t v160 = 0;
                          }
                          v161 = (uint64_t *)&v160[8 * v156];
                          unint64_t v162 = &v160[8 * v159];
                          uint64_t *v161 = v151;
                          unint64_t v154 = v161 + 1;
                          while (v152 != v155)
                          {
                            uint64_t v163 = *--v152;
                            *--v161 = v163;
                          }
                          v150[631] = v161;
                          v150[632] = v154;
                          v150[633] = v162;
                          if (v155) {
                            operator delete(v155);
                          }
                        }
                        else
                        {
                          *uint64_t v152 = v151;
                          unint64_t v154 = v152 + 1;
                        }
                        v150[632] = v154;
                        if (!*(_DWORD *)(v3 + 48))
                        {
                          uint64_t v164 = *(void **)a1[1];
                          uint64_t v165 = *(_DWORD *)(a1[2] + 80) & 0x7FFFFLL;
                          unint64_t v166 = (uint64_t *)v164[635];
                          unint64_t v167 = v164[636];
                          if ((unint64_t)v166 >= v167)
                          {
                            v169 = (uint64_t *)v164[634];
                            uint64_t v170 = v166 - v169;
                            if ((unint64_t)(v170 + 1) >> 61) {
                              goto LABEL_305;
                            }
                            unint64_t v171 = v167 - (void)v169;
                            unint64_t v172 = (uint64_t)(v167 - (void)v169) >> 2;
                            if (v172 <= v170 + 1) {
                              unint64_t v172 = v170 + 1;
                            }
                            if (v171 >= 0x7FFFFFFFFFFFFFF8) {
                              unint64_t v173 = 0x1FFFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v173 = v172;
                            }
                            if (v173)
                            {
                              uint64_t v174 = (char *)sub_5714((uint64_t)(v164 + 636), v173);
                              unint64_t v166 = (uint64_t *)v164[635];
                              v169 = (uint64_t *)v164[634];
                            }
                            else
                            {
                              uint64_t v174 = 0;
                            }
                            v175 = (uint64_t *)&v174[8 * v170];
                            uint64_t v176 = &v174[8 * v173];
                            uint64_t *v175 = v165;
                            unint64_t v168 = v175 + 1;
                            while (v166 != v169)
                            {
                              uint64_t v177 = *--v166;
                              *--v175 = v177;
                            }
                            v164[634] = v175;
                            v164[635] = v168;
                            v164[636] = v176;
                            if (v169) {
                              operator delete(v169);
                            }
                          }
                          else
                          {
                            *unint64_t v166 = v165;
                            unint64_t v168 = v166 + 1;
                          }
                          v164[635] = v168;
                          if (!*(_DWORD *)(v3 + 48))
                          {
                            unint64_t v178 = *(void **)a1[1];
                            uint64_t v179 = *(_DWORD *)(a1[2] + 48) & 0x7FFFFLL;
                            v180 = (uint64_t *)v178[638];
                            unint64_t v181 = v178[639];
                            if ((unint64_t)v180 >= v181)
                            {
                              unint64_t v183 = (uint64_t *)v178[637];
                              uint64_t v184 = v180 - v183;
                              if ((unint64_t)(v184 + 1) >> 61) {
                                goto LABEL_305;
                              }
                              unint64_t v185 = v181 - (void)v183;
                              unint64_t v186 = (uint64_t)(v181 - (void)v183) >> 2;
                              if (v186 <= v184 + 1) {
                                unint64_t v186 = v184 + 1;
                              }
                              if (v185 >= 0x7FFFFFFFFFFFFFF8) {
                                unint64_t v187 = 0x1FFFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v187 = v186;
                              }
                              if (v187)
                              {
                                uint64_t v188 = (char *)sub_5714((uint64_t)(v178 + 639), v187);
                                v180 = (uint64_t *)v178[638];
                                unint64_t v183 = (uint64_t *)v178[637];
                              }
                              else
                              {
                                uint64_t v188 = 0;
                              }
                              v189 = (uint64_t *)&v188[8 * v184];
                              v190 = &v188[8 * v187];
                              uint64_t *v189 = v179;
                              unint64_t v182 = v189 + 1;
                              while (v180 != v183)
                              {
                                uint64_t v191 = *--v180;
                                *--v189 = v191;
                              }
                              v178[637] = v189;
                              v178[638] = v182;
                              v178[639] = v190;
                              if (v183) {
                                operator delete(v183);
                              }
                            }
                            else
                            {
                              uint64_t *v180 = v179;
                              unint64_t v182 = v180 + 1;
                            }
                            v178[638] = v182;
                            if (!*(_DWORD *)(v3 + 48))
                            {
                              v192 = *(void **)a1[1];
                              uint64_t v193 = *(_DWORD *)(a1[2] + 20) & 0x7FFFFLL;
                              v194 = (uint64_t *)v192[641];
                              unint64_t v195 = v192[642];
                              if ((unint64_t)v194 >= v195)
                              {
                                v197 = (uint64_t *)v192[640];
                                uint64_t v198 = v194 - v197;
                                if ((unint64_t)(v198 + 1) >> 61) {
                                  goto LABEL_305;
                                }
                                unint64_t v199 = v195 - (void)v197;
                                unint64_t v200 = (uint64_t)(v195 - (void)v197) >> 2;
                                if (v200 <= v198 + 1) {
                                  unint64_t v200 = v198 + 1;
                                }
                                if (v199 >= 0x7FFFFFFFFFFFFFF8) {
                                  unint64_t v201 = 0x1FFFFFFFFFFFFFFFLL;
                                }
                                else {
                                  unint64_t v201 = v200;
                                }
                                if (v201)
                                {
                                  v202 = (char *)sub_5714((uint64_t)(v192 + 642), v201);
                                  v194 = (uint64_t *)v192[641];
                                  v197 = (uint64_t *)v192[640];
                                }
                                else
                                {
                                  v202 = 0;
                                }
                                v203 = (uint64_t *)&v202[8 * v198];
                                v204 = &v202[8 * v201];
                                uint64_t *v203 = v193;
                                v196 = v203 + 1;
                                while (v194 != v197)
                                {
                                  uint64_t v205 = *--v194;
                                  *--v203 = v205;
                                }
                                v192[640] = v203;
                                v192[641] = v196;
                                v192[642] = v204;
                                if (v197) {
                                  operator delete(v197);
                                }
                              }
                              else
                              {
                                uint64_t *v194 = v193;
                                v196 = v194 + 1;
                              }
                              v192[641] = v196;
                              if (!*(_DWORD *)(v3 + 48))
                              {
                                v206 = *(void **)a1[1];
                                uint64_t v207 = *(_DWORD *)(a1[2] + 56) & 0x7FFFFLL;
                                v208 = (uint64_t *)v206[644];
                                unint64_t v209 = v206[645];
                                if ((unint64_t)v208 >= v209)
                                {
                                  v211 = (uint64_t *)v206[643];
                                  uint64_t v212 = v208 - v211;
                                  if ((unint64_t)(v212 + 1) >> 61) {
                                    goto LABEL_305;
                                  }
                                  unint64_t v213 = v209 - (void)v211;
                                  unint64_t v214 = (uint64_t)(v209 - (void)v211) >> 2;
                                  if (v214 <= v212 + 1) {
                                    unint64_t v214 = v212 + 1;
                                  }
                                  if (v213 >= 0x7FFFFFFFFFFFFFF8) {
                                    unint64_t v215 = 0x1FFFFFFFFFFFFFFFLL;
                                  }
                                  else {
                                    unint64_t v215 = v214;
                                  }
                                  if (v215)
                                  {
                                    v216 = (char *)sub_5714((uint64_t)(v206 + 645), v215);
                                    v208 = (uint64_t *)v206[644];
                                    v211 = (uint64_t *)v206[643];
                                  }
                                  else
                                  {
                                    v216 = 0;
                                  }
                                  v217 = (uint64_t *)&v216[8 * v212];
                                  v218 = &v216[8 * v215];
                                  uint64_t *v217 = v207;
                                  v210 = v217 + 1;
                                  while (v208 != v211)
                                  {
                                    uint64_t v219 = *--v208;
                                    *--v217 = v219;
                                  }
                                  v206[643] = v217;
                                  v206[644] = v210;
                                  v206[645] = v218;
                                  if (v211) {
                                    operator delete(v211);
                                  }
                                }
                                else
                                {
                                  uint64_t *v208 = v207;
                                  v210 = v208 + 1;
                                }
                                v206[644] = v210;
                                if (!*(_DWORD *)(v3 + 48))
                                {
                                  v220 = *(void **)a1[1];
                                  uint64_t v221 = *(_DWORD *)(a1[2] + 28) & 0x7FFFFLL;
                                  v222 = (uint64_t *)v220[647];
                                  unint64_t v223 = v220[648];
                                  if ((unint64_t)v222 >= v223)
                                  {
                                    v225 = (uint64_t *)v220[646];
                                    uint64_t v226 = v222 - v225;
                                    if ((unint64_t)(v226 + 1) >> 61) {
                                      goto LABEL_305;
                                    }
                                    unint64_t v227 = v223 - (void)v225;
                                    unint64_t v228 = (uint64_t)(v223 - (void)v225) >> 2;
                                    if (v228 <= v226 + 1) {
                                      unint64_t v228 = v226 + 1;
                                    }
                                    if (v227 >= 0x7FFFFFFFFFFFFFF8) {
                                      unint64_t v229 = 0x1FFFFFFFFFFFFFFFLL;
                                    }
                                    else {
                                      unint64_t v229 = v228;
                                    }
                                    if (v229)
                                    {
                                      v230 = (char *)sub_5714((uint64_t)(v220 + 648), v229);
                                      v222 = (uint64_t *)v220[647];
                                      v225 = (uint64_t *)v220[646];
                                    }
                                    else
                                    {
                                      v230 = 0;
                                    }
                                    v231 = (uint64_t *)&v230[8 * v226];
                                    v232 = &v230[8 * v229];
                                    uint64_t *v231 = v221;
                                    v224 = v231 + 1;
                                    while (v222 != v225)
                                    {
                                      uint64_t v233 = *--v222;
                                      *--v231 = v233;
                                    }
                                    v220[646] = v231;
                                    v220[647] = v224;
                                    v220[648] = v232;
                                    if (v225) {
                                      operator delete(v225);
                                    }
                                  }
                                  else
                                  {
                                    uint64_t *v222 = v221;
                                    v224 = v222 + 1;
                                  }
                                  v220[647] = v224;
                                  if (!*(_DWORD *)(v3 + 48))
                                  {
                                    v234 = *(void **)a1[1];
                                    uint64_t v235 = *(_DWORD *)(a1[2] + 64) & 0x7FFFFLL;
                                    v236 = (uint64_t *)v234[650];
                                    unint64_t v237 = v234[651];
                                    if ((unint64_t)v236 >= v237)
                                    {
                                      v239 = (uint64_t *)v234[649];
                                      uint64_t v240 = v236 - v239;
                                      if ((unint64_t)(v240 + 1) >> 61) {
                                        goto LABEL_305;
                                      }
                                      unint64_t v241 = v237 - (void)v239;
                                      unint64_t v242 = (uint64_t)(v237 - (void)v239) >> 2;
                                      if (v242 <= v240 + 1) {
                                        unint64_t v242 = v240 + 1;
                                      }
                                      if (v241 >= 0x7FFFFFFFFFFFFFF8) {
                                        unint64_t v243 = 0x1FFFFFFFFFFFFFFFLL;
                                      }
                                      else {
                                        unint64_t v243 = v242;
                                      }
                                      if (v243)
                                      {
                                        v244 = (char *)sub_5714((uint64_t)(v234 + 651), v243);
                                        v236 = (uint64_t *)v234[650];
                                        v239 = (uint64_t *)v234[649];
                                      }
                                      else
                                      {
                                        v244 = 0;
                                      }
                                      v245 = (uint64_t *)&v244[8 * v240];
                                      v246 = &v244[8 * v243];
                                      uint64_t *v245 = v235;
                                      v238 = v245 + 1;
                                      while (v236 != v239)
                                      {
                                        uint64_t v247 = *--v236;
                                        *--v245 = v247;
                                      }
                                      v234[649] = v245;
                                      v234[650] = v238;
                                      v234[651] = v246;
                                      if (v239) {
                                        operator delete(v239);
                                      }
                                    }
                                    else
                                    {
                                      uint64_t *v236 = v235;
                                      v238 = v236 + 1;
                                    }
                                    v234[650] = v238;
                                    if (!*(_DWORD *)(v3 + 48))
                                    {
                                      uint64_t v248 = a1[2];
                                      v249 = *(void **)a1[1];
                                      uint64_t v250 = *(_DWORD *)(v248 + 84) & 0x7FFFFLL;
                                      v251 = (uint64_t *)v249[653];
                                      unint64_t v252 = v249[654];
                                      if ((unint64_t)v251 < v252)
                                      {
                                        uint64_t *v251 = v250;
                                        v253 = v251 + 1;
LABEL_312:
                                        v249[653] = v253;
                                        goto LABEL_313;
                                      }
                                      v254 = (uint64_t *)v249[652];
                                      uint64_t v255 = v251 - v254;
                                      if (!((unint64_t)(v255 + 1) >> 61))
                                      {
                                        unint64_t v256 = v252 - (void)v254;
                                        unint64_t v257 = (uint64_t)(v252 - (void)v254) >> 2;
                                        if (v257 <= v255 + 1) {
                                          unint64_t v257 = v255 + 1;
                                        }
                                        if (v256 >= 0x7FFFFFFFFFFFFFF8) {
                                          unint64_t v258 = 0x1FFFFFFFFFFFFFFFLL;
                                        }
                                        else {
                                          unint64_t v258 = v257;
                                        }
                                        if (v258)
                                        {
                                          v259 = (char *)sub_5714((uint64_t)(v249 + 654), v258);
                                          v251 = (uint64_t *)v249[653];
                                          v254 = (uint64_t *)v249[652];
                                        }
                                        else
                                        {
                                          v259 = 0;
                                        }
                                        v260 = (uint64_t *)&v259[8 * v255];
                                        v261 = &v259[8 * v258];
                                        uint64_t *v260 = v250;
                                        v253 = v260 + 1;
                                        while (v251 != v254)
                                        {
                                          uint64_t v262 = *--v251;
                                          *--v260 = v262;
                                        }
                                        v249[652] = v260;
                                        v249[653] = v253;
                                        v249[654] = v261;
                                        if (v254) {
                                          operator delete(v254);
                                        }
                                        goto LABEL_312;
                                      }
LABEL_305:
                                      sub_566C();
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_313:
    *a2 = 1;
    return;
  }
  if (!*(_DWORD *)(v3 + 48))
  {
    uint64_t v11 = (void *)a1[1];
    uint64_t v10 = (unsigned int *)a1[2];
    v12 = (void *)*v11;
    *(void *)(v12[602] - 8) += v10[10] & 0x7FFFF;
    *(void *)(v12[605] - 8) += v10[19] & 0x7FFFF;
    *(void *)(v12[608] - 8) += ((unint64_t)v10[4] >> 1) & 0x7FFFF;
    *(void *)(v12[611] - 8) += v10[13] & 0x7FFFF;
    *(void *)(v12[614] - 8) += v10[6] & 0x7FFFF;
    *(void *)(v12[617] - 8) += v10[15] & 0x7FFFF;
    *(void *)(v12[620] - 8) += v10[9] & 0x7FFFF;
    *(void *)(v12[623] - 8) += v10[18] & 0x7FFFF;
    *(void *)(v12[626] - 8) += v10[8] & 0x7FFFF;
    *(void *)(v12[629] - 8) += v10[17] & 0x7FFFF;
    uint64_t v13 = (_DWORD *)a1[2];
    unint64_t v14 = (void *)*v11;
    *(void *)(v14[632] - 8) += v13[11] & 0x7FFFF;
    *(void *)(v14[635] - 8) += v13[20] & 0x7FFFF;
    *(void *)(v14[638] - 8) += v13[12] & 0x7FFFF;
    *(void *)(v14[641] - 8) += v13[5] & 0x7FFFF;
    *(void *)(v14[644] - 8) += v13[14] & 0x7FFFF;
    *(void *)(v14[647] - 8) += v13[7] & 0x7FFFF;
    *(void *)(v14[650] - 8) += v13[16] & 0x7FFFF;
    *(void *)(v14[653] - 8) += v13[21] & 0x7FFFF;
  }
}

void sub_4E514(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    if (*(_DWORD *)(v3 + 48)) {
      goto LABEL_296;
    }
    v5 = *(void **)a1[1];
    uint64_t v6 = *(_WORD *)(a1[2] + 28) & 0x7FFF;
    v7 = (char *)v5[656];
    unint64_t v8 = v5[657];
    if ((unint64_t)v7 >= v8)
    {
      unint64_t v15 = (char *)v5[655];
      uint64_t v16 = (v7 - v15) >> 3;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_288;
      }
      unint64_t v17 = v8 - (void)v15;
      unint64_t v18 = (uint64_t)(v8 - (void)v15) >> 2;
      if (v18 <= v16 + 1) {
        unint64_t v18 = v16 + 1;
      }
      if (v17 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v18;
      }
      if (v19)
      {
        uint64_t v20 = (char *)sub_5714((uint64_t)(v5 + 657), v19);
        v7 = (char *)v5[656];
        unint64_t v15 = (char *)v5[655];
      }
      else
      {
        uint64_t v20 = 0;
      }
      uint64_t v21 = &v20[8 * v16];
      uint64_t v22 = &v20[8 * v19];
      *(void *)uint64_t v21 = v6;
      v9 = v21 + 8;
      while (v7 != v15)
      {
        uint64_t v23 = *((void *)v7 - 1);
        v7 -= 8;
        *((void *)v21 - 1) = v23;
        v21 -= 8;
      }
      v5[655] = v21;
      v5[656] = v9;
      v5[657] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)v7 = v6;
      v9 = v7 + 8;
    }
    v5[656] = v9;
    if (!*(_DWORD *)(v3 + 48))
    {
      unint64_t v24 = *(void **)a1[1];
      uint64_t v25 = *(_DWORD *)(a1[2] + 60) & 0x7FFFFLL;
      v26 = (uint64_t *)v24[659];
      unint64_t v27 = v24[660];
      if ((unint64_t)v26 >= v27)
      {
        unint64_t v29 = (uint64_t *)v24[658];
        uint64_t v30 = v26 - v29;
        if ((unint64_t)(v30 + 1) >> 61) {
          goto LABEL_288;
        }
        unint64_t v31 = v27 - (void)v29;
        unint64_t v32 = (uint64_t)(v27 - (void)v29) >> 2;
        if (v32 <= v30 + 1) {
          unint64_t v32 = v30 + 1;
        }
        if (v31 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v33 = v32;
        }
        if (v33)
        {
          uint64_t v34 = (char *)sub_5714((uint64_t)(v24 + 660), v33);
          v26 = (uint64_t *)v24[659];
          unint64_t v29 = (uint64_t *)v24[658];
        }
        else
        {
          uint64_t v34 = 0;
        }
        uint64_t v35 = (uint64_t *)&v34[8 * v30];
        uint64_t v36 = &v34[8 * v33];
        uint64_t *v35 = v25;
        unint64_t v28 = v35 + 1;
        while (v26 != v29)
        {
          uint64_t v37 = *--v26;
          *--uint64_t v35 = v37;
        }
        v24[658] = v35;
        v24[659] = v28;
        v24[660] = v36;
        if (v29) {
          operator delete(v29);
        }
      }
      else
      {
        uint64_t *v26 = v25;
        unint64_t v28 = v26 + 1;
      }
      v24[659] = v28;
      if (!*(_DWORD *)(v3 + 48))
      {
        unint64_t v38 = *(void **)a1[1];
        uint64_t v39 = *(_WORD *)(a1[2] + 32) & 0x7FFF;
        uint64_t v40 = (char *)v38[662];
        unint64_t v41 = v38[663];
        if ((unint64_t)v40 >= v41)
        {
          unint64_t v43 = (char *)v38[661];
          uint64_t v44 = (v40 - v43) >> 3;
          if ((unint64_t)(v44 + 1) >> 61) {
            goto LABEL_288;
          }
          unint64_t v45 = v41 - (void)v43;
          unint64_t v46 = (uint64_t)(v41 - (void)v43) >> 2;
          if (v46 <= v44 + 1) {
            unint64_t v46 = v44 + 1;
          }
          if (v45 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v47 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v47 = v46;
          }
          if (v47)
          {
            uint64_t v48 = (char *)sub_5714((uint64_t)(v38 + 663), v47);
            uint64_t v40 = (char *)v38[662];
            unint64_t v43 = (char *)v38[661];
          }
          else
          {
            uint64_t v48 = 0;
          }
          uint64_t v49 = &v48[8 * v44];
          v50 = &v48[8 * v47];
          *(void *)uint64_t v49 = v39;
          unint64_t v42 = v49 + 8;
          while (v40 != v43)
          {
            uint64_t v51 = *((void *)v40 - 1);
            v40 -= 8;
            *((void *)v49 - 1) = v51;
            v49 -= 8;
          }
          v38[661] = v49;
          v38[662] = v42;
          v38[663] = v50;
          if (v43) {
            operator delete(v43);
          }
        }
        else
        {
          *(void *)uint64_t v40 = v39;
          unint64_t v42 = v40 + 8;
        }
        v38[662] = v42;
        if (!*(_DWORD *)(v3 + 48))
        {
          uint64_t v52 = *(void **)a1[1];
          uint64_t v53 = (unsigned __int16)*(_DWORD *)(a1[2] + 16) >> 1;
          v54 = (char *)v52[665];
          unint64_t v55 = v52[666];
          if ((unint64_t)v54 >= v55)
          {
            unint64_t v57 = (char *)v52[664];
            uint64_t v58 = (v54 - v57) >> 3;
            if ((unint64_t)(v58 + 1) >> 61) {
              goto LABEL_288;
            }
            unint64_t v59 = v55 - (void)v57;
            unint64_t v60 = (uint64_t)(v55 - (void)v57) >> 2;
            if (v60 <= v58 + 1) {
              unint64_t v60 = v58 + 1;
            }
            if (v59 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v61 = v60;
            }
            if (v61)
            {
              unint64_t v62 = (char *)sub_5714((uint64_t)(v52 + 666), v61);
              v54 = (char *)v52[665];
              unint64_t v57 = (char *)v52[664];
            }
            else
            {
              unint64_t v62 = 0;
            }
            unint64_t v63 = &v62[8 * v58];
            v64 = &v62[8 * v61];
            *(void *)unint64_t v63 = v53;
            uint64_t v56 = v63 + 8;
            while (v54 != v57)
            {
              uint64_t v65 = *((void *)v54 - 1);
              v54 -= 8;
              *((void *)v63 - 1) = v65;
              v63 -= 8;
            }
            v52[664] = v63;
            v52[665] = v56;
            v52[666] = v64;
            if (v57) {
              operator delete(v57);
            }
          }
          else
          {
            *(void *)v54 = v53;
            uint64_t v56 = v54 + 8;
          }
          v52[665] = v56;
          if (!*(_DWORD *)(v3 + 48))
          {
            v66 = *(void **)a1[1];
            uint64_t v67 = *(_DWORD *)(a1[2] + 36) & 0x7FFFFLL;
            uint64_t v68 = (uint64_t *)v66[668];
            unint64_t v69 = v66[669];
            if ((unint64_t)v68 >= v69)
            {
              unint64_t v71 = (uint64_t *)v66[667];
              uint64_t v72 = v68 - v71;
              if ((unint64_t)(v72 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v73 = v69 - (void)v71;
              unint64_t v74 = (uint64_t)(v69 - (void)v71) >> 2;
              if (v74 <= v72 + 1) {
                unint64_t v74 = v72 + 1;
              }
              if (v73 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v75 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v75 = v74;
              }
              if (v75)
              {
                unint64_t v76 = (char *)sub_5714((uint64_t)(v66 + 669), v75);
                uint64_t v68 = (uint64_t *)v66[668];
                unint64_t v71 = (uint64_t *)v66[667];
              }
              else
              {
                unint64_t v76 = 0;
              }
              uint64_t v77 = (uint64_t *)&v76[8 * v72];
              unint64_t v78 = &v76[8 * v75];
              *uint64_t v77 = v67;
              uint64_t v70 = v77 + 1;
              while (v68 != v71)
              {
                uint64_t v79 = *--v68;
                *--uint64_t v77 = v79;
              }
              v66[667] = v77;
              v66[668] = v70;
              v66[669] = v78;
              if (v71) {
                operator delete(v71);
              }
            }
            else
            {
              *uint64_t v68 = v67;
              uint64_t v70 = v68 + 1;
            }
            v66[668] = v70;
            if (!*(_DWORD *)(v3 + 48))
            {
              v80 = *(void **)a1[1];
              uint64_t v81 = *(_WORD *)(a1[2] + 20) & 0x7FFF;
              uint64_t v82 = (char *)v80[671];
              unint64_t v83 = v80[672];
              if ((unint64_t)v82 >= v83)
              {
                unint64_t v85 = (char *)v80[670];
                uint64_t v86 = (v82 - v85) >> 3;
                if ((unint64_t)(v86 + 1) >> 61) {
                  goto LABEL_288;
                }
                unint64_t v87 = v83 - (void)v85;
                unint64_t v88 = (uint64_t)(v83 - (void)v85) >> 2;
                if (v88 <= v86 + 1) {
                  unint64_t v88 = v86 + 1;
                }
                if (v87 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v89 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v89 = v88;
                }
                if (v89)
                {
                  uint64_t v90 = (char *)sub_5714((uint64_t)(v80 + 672), v89);
                  uint64_t v82 = (char *)v80[671];
                  unint64_t v85 = (char *)v80[670];
                }
                else
                {
                  uint64_t v90 = 0;
                }
                uint64_t v91 = &v90[8 * v86];
                uint64_t v92 = &v90[8 * v89];
                *(void *)uint64_t v91 = v81;
                uint64_t v84 = v91 + 8;
                while (v82 != v85)
                {
                  uint64_t v93 = *((void *)v82 - 1);
                  v82 -= 8;
                  *((void *)v91 - 1) = v93;
                  v91 -= 8;
                }
                v80[670] = v91;
                v80[671] = v84;
                v80[672] = v92;
                if (v85) {
                  operator delete(v85);
                }
              }
              else
              {
                *(void *)uint64_t v82 = v81;
                uint64_t v84 = v82 + 8;
              }
              v80[671] = v84;
              if (!*(_DWORD *)(v3 + 48))
              {
                uint64_t v94 = *(void **)a1[1];
                uint64_t v95 = *(_DWORD *)(a1[2] + 44) & 0x7FFFFLL;
                unint64_t v96 = (uint64_t *)v94[674];
                unint64_t v97 = v94[675];
                if ((unint64_t)v96 >= v97)
                {
                  uint64_t v99 = (uint64_t *)v94[673];
                  uint64_t v100 = v96 - v99;
                  if ((unint64_t)(v100 + 1) >> 61) {
                    goto LABEL_288;
                  }
                  unint64_t v101 = v97 - (void)v99;
                  unint64_t v102 = (uint64_t)(v97 - (void)v99) >> 2;
                  if (v102 <= v100 + 1) {
                    unint64_t v102 = v100 + 1;
                  }
                  if (v101 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v103 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v103 = v102;
                  }
                  if (v103)
                  {
                    v104 = (char *)sub_5714((uint64_t)(v94 + 675), v103);
                    unint64_t v96 = (uint64_t *)v94[674];
                    uint64_t v99 = (uint64_t *)v94[673];
                  }
                  else
                  {
                    v104 = 0;
                  }
                  uint64_t v105 = (uint64_t *)&v104[8 * v100];
                  uint64_t v106 = &v104[8 * v103];
                  *uint64_t v105 = v95;
                  uint64_t v98 = v105 + 1;
                  while (v96 != v99)
                  {
                    uint64_t v107 = *--v96;
                    *--uint64_t v105 = v107;
                  }
                  v94[673] = v105;
                  v94[674] = v98;
                  v94[675] = v106;
                  if (v99) {
                    operator delete(v99);
                  }
                }
                else
                {
                  uint64_t *v96 = v95;
                  uint64_t v98 = v96 + 1;
                }
                v94[674] = v98;
                if (!*(_DWORD *)(v3 + 48))
                {
                  uint64_t v108 = *(void **)a1[1];
                  uint64_t v109 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
                  unint64_t v110 = (char *)v108[677];
                  unint64_t v111 = v108[678];
                  if ((unint64_t)v110 >= v111)
                  {
                    uint64_t v113 = (char *)v108[676];
                    uint64_t v114 = (v110 - v113) >> 3;
                    if ((unint64_t)(v114 + 1) >> 61) {
                      goto LABEL_288;
                    }
                    unint64_t v115 = v111 - (void)v113;
                    unint64_t v116 = (uint64_t)(v111 - (void)v113) >> 2;
                    if (v116 <= v114 + 1) {
                      unint64_t v116 = v114 + 1;
                    }
                    if (v115 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v117 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v117 = v116;
                    }
                    if (v117)
                    {
                      v118 = (char *)sub_5714((uint64_t)(v108 + 678), v117);
                      unint64_t v110 = (char *)v108[677];
                      uint64_t v113 = (char *)v108[676];
                    }
                    else
                    {
                      v118 = 0;
                    }
                    v119 = &v118[8 * v114];
                    uint64_t v120 = &v118[8 * v117];
                    *(void *)v119 = v109;
                    uint64_t v112 = v119 + 8;
                    while (v110 != v113)
                    {
                      uint64_t v121 = *((void *)v110 - 1);
                      v110 -= 8;
                      *((void *)v119 - 1) = v121;
                      v119 -= 8;
                    }
                    v108[676] = v119;
                    v108[677] = v112;
                    v108[678] = v120;
                    if (v113) {
                      operator delete(v113);
                    }
                  }
                  else
                  {
                    *(void *)unint64_t v110 = v109;
                    uint64_t v112 = v110 + 8;
                  }
                  v108[677] = v112;
                  if (!*(_DWORD *)(v3 + 48))
                  {
                    uint64_t v122 = *(void **)a1[1];
                    uint64_t v123 = *(_DWORD *)(a1[2] + 56) & 0x7FFFFLL;
                    unint64_t v124 = (uint64_t *)v122[680];
                    unint64_t v125 = v122[681];
                    if ((unint64_t)v124 >= v125)
                    {
                      uint64_t v127 = (uint64_t *)v122[679];
                      uint64_t v128 = v124 - v127;
                      if ((unint64_t)(v128 + 1) >> 61) {
                        goto LABEL_288;
                      }
                      unint64_t v129 = v125 - (void)v127;
                      unint64_t v130 = (uint64_t)(v125 - (void)v127) >> 2;
                      if (v130 <= v128 + 1) {
                        unint64_t v130 = v128 + 1;
                      }
                      if (v129 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v131 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v131 = v130;
                      }
                      if (v131)
                      {
                        unint64_t v132 = (char *)sub_5714((uint64_t)(v122 + 681), v131);
                        unint64_t v124 = (uint64_t *)v122[680];
                        uint64_t v127 = (uint64_t *)v122[679];
                      }
                      else
                      {
                        unint64_t v132 = 0;
                      }
                      v133 = (uint64_t *)&v132[8 * v128];
                      uint64_t v134 = &v132[8 * v131];
                      uint64_t *v133 = v123;
                      v126 = v133 + 1;
                      while (v124 != v127)
                      {
                        uint64_t v135 = *--v124;
                        *--v133 = v135;
                      }
                      v122[679] = v133;
                      v122[680] = v126;
                      v122[681] = v134;
                      if (v127) {
                        operator delete(v127);
                      }
                    }
                    else
                    {
                      uint64_t *v124 = v123;
                      v126 = v124 + 1;
                    }
                    v122[680] = v126;
                    if (!*(_DWORD *)(v3 + 48))
                    {
                      unint64_t v136 = *(void **)a1[1];
                      uint64_t v137 = *(_WORD *)(a1[2] + 24) & 0x7FFF;
                      unint64_t v138 = (char *)v136[683];
                      unint64_t v139 = v136[684];
                      if ((unint64_t)v138 >= v139)
                      {
                        v141 = (char *)v136[682];
                        uint64_t v142 = (v138 - v141) >> 3;
                        if ((unint64_t)(v142 + 1) >> 61) {
                          goto LABEL_288;
                        }
                        unint64_t v143 = v139 - (void)v141;
                        unint64_t v144 = (uint64_t)(v139 - (void)v141) >> 2;
                        if (v144 <= v142 + 1) {
                          unint64_t v144 = v142 + 1;
                        }
                        if (v143 >= 0x7FFFFFFFFFFFFFF8) {
                          unint64_t v145 = 0x1FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v145 = v144;
                        }
                        if (v145)
                        {
                          v146 = (char *)sub_5714((uint64_t)(v136 + 684), v145);
                          unint64_t v138 = (char *)v136[683];
                          v141 = (char *)v136[682];
                        }
                        else
                        {
                          v146 = 0;
                        }
                        unint64_t v147 = &v146[8 * v142];
                        v148 = &v146[8 * v145];
                        *(void *)unint64_t v147 = v137;
                        v140 = v147 + 8;
                        while (v138 != v141)
                        {
                          uint64_t v149 = *((void *)v138 - 1);
                          v138 -= 8;
                          *((void *)v147 - 1) = v149;
                          v147 -= 8;
                        }
                        v136[682] = v147;
                        v136[683] = v140;
                        v136[684] = v148;
                        if (v141) {
                          operator delete(v141);
                        }
                      }
                      else
                      {
                        *(void *)unint64_t v138 = v137;
                        v140 = v138 + 8;
                      }
                      v136[683] = v140;
                      if (!*(_DWORD *)(v3 + 48))
                      {
                        uint64_t v150 = *(void **)a1[1];
                        uint64_t v151 = *(_DWORD *)(a1[2] + 52) & 0x7FFFFLL;
                        uint64_t v152 = (uint64_t *)v150[686];
                        unint64_t v153 = v150[687];
                        if ((unint64_t)v152 >= v153)
                        {
                          v155 = (uint64_t *)v150[685];
                          uint64_t v156 = v152 - v155;
                          if ((unint64_t)(v156 + 1) >> 61) {
                            goto LABEL_288;
                          }
                          unint64_t v157 = v153 - (void)v155;
                          unint64_t v158 = (uint64_t)(v153 - (void)v155) >> 2;
                          if (v158 <= v156 + 1) {
                            unint64_t v158 = v156 + 1;
                          }
                          if (v157 >= 0x7FFFFFFFFFFFFFF8) {
                            unint64_t v159 = 0x1FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v159 = v158;
                          }
                          if (v159)
                          {
                            unint64_t v160 = (char *)sub_5714((uint64_t)(v150 + 687), v159);
                            uint64_t v152 = (uint64_t *)v150[686];
                            v155 = (uint64_t *)v150[685];
                          }
                          else
                          {
                            unint64_t v160 = 0;
                          }
                          v161 = (uint64_t *)&v160[8 * v156];
                          unint64_t v162 = &v160[8 * v159];
                          uint64_t *v161 = v151;
                          unint64_t v154 = v161 + 1;
                          while (v152 != v155)
                          {
                            uint64_t v163 = *--v152;
                            *--v161 = v163;
                          }
                          v150[685] = v161;
                          v150[686] = v154;
                          v150[687] = v162;
                          if (v155) {
                            operator delete(v155);
                          }
                        }
                        else
                        {
                          *uint64_t v152 = v151;
                          unint64_t v154 = v152 + 1;
                        }
                        v150[686] = v154;
                        if (!*(_DWORD *)(v3 + 48))
                        {
                          uint64_t v164 = *(void **)a1[1];
                          uint64_t v165 = *(_WORD *)(a1[2] + 30) & 0x7FFF;
                          unint64_t v166 = (char *)v164[689];
                          unint64_t v167 = v164[690];
                          if ((unint64_t)v166 >= v167)
                          {
                            v169 = (char *)v164[688];
                            uint64_t v170 = (v166 - v169) >> 3;
                            if ((unint64_t)(v170 + 1) >> 61) {
                              goto LABEL_288;
                            }
                            unint64_t v171 = v167 - (void)v169;
                            unint64_t v172 = (uint64_t)(v167 - (void)v169) >> 2;
                            if (v172 <= v170 + 1) {
                              unint64_t v172 = v170 + 1;
                            }
                            if (v171 >= 0x7FFFFFFFFFFFFFF8) {
                              unint64_t v173 = 0x1FFFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v173 = v172;
                            }
                            if (v173)
                            {
                              uint64_t v174 = (char *)sub_5714((uint64_t)(v164 + 690), v173);
                              unint64_t v166 = (char *)v164[689];
                              v169 = (char *)v164[688];
                            }
                            else
                            {
                              uint64_t v174 = 0;
                            }
                            v175 = &v174[8 * v170];
                            uint64_t v176 = &v174[8 * v173];
                            *(void *)v175 = v165;
                            unint64_t v168 = v175 + 8;
                            while (v166 != v169)
                            {
                              uint64_t v177 = *((void *)v166 - 1);
                              v166 -= 8;
                              *((void *)v175 - 1) = v177;
                              v175 -= 8;
                            }
                            v164[688] = v175;
                            v164[689] = v168;
                            v164[690] = v176;
                            if (v169) {
                              operator delete(v169);
                            }
                          }
                          else
                          {
                            *(void *)unint64_t v166 = v165;
                            unint64_t v168 = v166 + 8;
                          }
                          v164[689] = v168;
                          if (!*(_DWORD *)(v3 + 48))
                          {
                            unint64_t v178 = *(void **)a1[1];
                            uint64_t v179 = *(_DWORD *)(a1[2] + 64) & 0x7FFFFLL;
                            v180 = (uint64_t *)v178[692];
                            unint64_t v181 = v178[693];
                            if ((unint64_t)v180 >= v181)
                            {
                              unint64_t v183 = (uint64_t *)v178[691];
                              uint64_t v184 = v180 - v183;
                              if ((unint64_t)(v184 + 1) >> 61) {
                                goto LABEL_288;
                              }
                              unint64_t v185 = v181 - (void)v183;
                              unint64_t v186 = (uint64_t)(v181 - (void)v183) >> 2;
                              if (v186 <= v184 + 1) {
                                unint64_t v186 = v184 + 1;
                              }
                              if (v185 >= 0x7FFFFFFFFFFFFFF8) {
                                unint64_t v187 = 0x1FFFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v187 = v186;
                              }
                              if (v187)
                              {
                                uint64_t v188 = (char *)sub_5714((uint64_t)(v178 + 693), v187);
                                v180 = (uint64_t *)v178[692];
                                unint64_t v183 = (uint64_t *)v178[691];
                              }
                              else
                              {
                                uint64_t v188 = 0;
                              }
                              v189 = (uint64_t *)&v188[8 * v184];
                              v190 = &v188[8 * v187];
                              uint64_t *v189 = v179;
                              unint64_t v182 = v189 + 1;
                              while (v180 != v183)
                              {
                                uint64_t v191 = *--v180;
                                *--v189 = v191;
                              }
                              v178[691] = v189;
                              v178[692] = v182;
                              v178[693] = v190;
                              if (v183) {
                                operator delete(v183);
                              }
                            }
                            else
                            {
                              uint64_t *v180 = v179;
                              unint64_t v182 = v180 + 1;
                            }
                            v178[692] = v182;
                            if (!*(_DWORD *)(v3 + 48))
                            {
                              v192 = *(void **)a1[1];
                              uint64_t v193 = *(_WORD *)(a1[2] + 18) & 0x7FFF;
                              v194 = (char *)v192[695];
                              unint64_t v195 = v192[696];
                              if ((unint64_t)v194 >= v195)
                              {
                                v197 = (char *)v192[694];
                                uint64_t v198 = (v194 - v197) >> 3;
                                if ((unint64_t)(v198 + 1) >> 61) {
                                  goto LABEL_288;
                                }
                                unint64_t v199 = v195 - (void)v197;
                                unint64_t v200 = (uint64_t)(v195 - (void)v197) >> 2;
                                if (v200 <= v198 + 1) {
                                  unint64_t v200 = v198 + 1;
                                }
                                if (v199 >= 0x7FFFFFFFFFFFFFF8) {
                                  unint64_t v201 = 0x1FFFFFFFFFFFFFFFLL;
                                }
                                else {
                                  unint64_t v201 = v200;
                                }
                                if (v201)
                                {
                                  v202 = (char *)sub_5714((uint64_t)(v192 + 696), v201);
                                  v194 = (char *)v192[695];
                                  v197 = (char *)v192[694];
                                }
                                else
                                {
                                  v202 = 0;
                                }
                                v203 = &v202[8 * v198];
                                v204 = &v202[8 * v201];
                                *(void *)v203 = v193;
                                v196 = v203 + 8;
                                while (v194 != v197)
                                {
                                  uint64_t v205 = *((void *)v194 - 1);
                                  v194 -= 8;
                                  *((void *)v203 - 1) = v205;
                                  v203 -= 8;
                                }
                                v192[694] = v203;
                                v192[695] = v196;
                                v192[696] = v204;
                                if (v197) {
                                  operator delete(v197);
                                }
                              }
                              else
                              {
                                *(void *)v194 = v193;
                                v196 = v194 + 8;
                              }
                              v192[695] = v196;
                              if (!*(_DWORD *)(v3 + 48))
                              {
                                v206 = *(void **)a1[1];
                                uint64_t v207 = *(_DWORD *)(a1[2] + 40) & 0x7FFFFLL;
                                v208 = (uint64_t *)v206[698];
                                unint64_t v209 = v206[699];
                                if ((unint64_t)v208 >= v209)
                                {
                                  v211 = (uint64_t *)v206[697];
                                  uint64_t v212 = v208 - v211;
                                  if ((unint64_t)(v212 + 1) >> 61) {
                                    goto LABEL_288;
                                  }
                                  unint64_t v213 = v209 - (void)v211;
                                  unint64_t v214 = (uint64_t)(v209 - (void)v211) >> 2;
                                  if (v214 <= v212 + 1) {
                                    unint64_t v214 = v212 + 1;
                                  }
                                  if (v213 >= 0x7FFFFFFFFFFFFFF8) {
                                    unint64_t v215 = 0x1FFFFFFFFFFFFFFFLL;
                                  }
                                  else {
                                    unint64_t v215 = v214;
                                  }
                                  if (v215)
                                  {
                                    v216 = (char *)sub_5714((uint64_t)(v206 + 699), v215);
                                    v208 = (uint64_t *)v206[698];
                                    v211 = (uint64_t *)v206[697];
                                  }
                                  else
                                  {
                                    v216 = 0;
                                  }
                                  v217 = (uint64_t *)&v216[8 * v212];
                                  v218 = &v216[8 * v215];
                                  uint64_t *v217 = v207;
                                  v210 = v217 + 1;
                                  while (v208 != v211)
                                  {
                                    uint64_t v219 = *--v208;
                                    *--v217 = v219;
                                  }
                                  v206[697] = v217;
                                  v206[698] = v210;
                                  v206[699] = v218;
                                  if (v211) {
                                    operator delete(v211);
                                  }
                                }
                                else
                                {
                                  uint64_t *v208 = v207;
                                  v210 = v208 + 1;
                                }
                                v206[698] = v210;
                                if (!*(_DWORD *)(v3 + 48))
                                {
                                  v220 = *(void **)a1[1];
                                  uint64_t v221 = *(_WORD *)(a1[2] + 22) & 0x7FFF;
                                  v222 = (char *)v220[701];
                                  unint64_t v223 = v220[702];
                                  if ((unint64_t)v222 >= v223)
                                  {
                                    v225 = (char *)v220[700];
                                    uint64_t v226 = (v222 - v225) >> 3;
                                    if ((unint64_t)(v226 + 1) >> 61) {
                                      goto LABEL_288;
                                    }
                                    unint64_t v227 = v223 - (void)v225;
                                    unint64_t v228 = (uint64_t)(v223 - (void)v225) >> 2;
                                    if (v228 <= v226 + 1) {
                                      unint64_t v228 = v226 + 1;
                                    }
                                    if (v227 >= 0x7FFFFFFFFFFFFFF8) {
                                      unint64_t v229 = 0x1FFFFFFFFFFFFFFFLL;
                                    }
                                    else {
                                      unint64_t v229 = v228;
                                    }
                                    if (v229)
                                    {
                                      v230 = (char *)sub_5714((uint64_t)(v220 + 702), v229);
                                      v222 = (char *)v220[701];
                                      v225 = (char *)v220[700];
                                    }
                                    else
                                    {
                                      v230 = 0;
                                    }
                                    v231 = &v230[8 * v226];
                                    v232 = &v230[8 * v229];
                                    *(void *)v231 = v221;
                                    v224 = v231 + 8;
                                    while (v222 != v225)
                                    {
                                      uint64_t v233 = *((void *)v222 - 1);
                                      v222 -= 8;
                                      *((void *)v231 - 1) = v233;
                                      v231 -= 8;
                                    }
                                    v220[700] = v231;
                                    v220[701] = v224;
                                    v220[702] = v232;
                                    if (v225) {
                                      operator delete(v225);
                                    }
                                  }
                                  else
                                  {
                                    *(void *)v222 = v221;
                                    v224 = v222 + 8;
                                  }
                                  v220[701] = v224;
                                  if (!*(_DWORD *)(v3 + 48))
                                  {
                                    uint64_t v234 = a1[2];
                                    uint64_t v235 = *(void **)a1[1];
                                    uint64_t v236 = *(_DWORD *)(v234 + 48) & 0x7FFFFLL;
                                    unint64_t v237 = (uint64_t *)v235[704];
                                    unint64_t v238 = v235[705];
                                    if ((unint64_t)v237 < v238)
                                    {
                                      *unint64_t v237 = v236;
                                      v239 = v237 + 1;
LABEL_295:
                                      v235[704] = v239;
                                      goto LABEL_296;
                                    }
                                    uint64_t v240 = (uint64_t *)v235[703];
                                    uint64_t v241 = v237 - v240;
                                    if (!((unint64_t)(v241 + 1) >> 61))
                                    {
                                      unint64_t v242 = v238 - (void)v240;
                                      unint64_t v243 = (uint64_t)(v238 - (void)v240) >> 2;
                                      if (v243 <= v241 + 1) {
                                        unint64_t v243 = v241 + 1;
                                      }
                                      if (v242 >= 0x7FFFFFFFFFFFFFF8) {
                                        unint64_t v244 = 0x1FFFFFFFFFFFFFFFLL;
                                      }
                                      else {
                                        unint64_t v244 = v243;
                                      }
                                      if (v244)
                                      {
                                        v245 = (char *)sub_5714((uint64_t)(v235 + 705), v244);
                                        unint64_t v237 = (uint64_t *)v235[704];
                                        uint64_t v240 = (uint64_t *)v235[703];
                                      }
                                      else
                                      {
                                        v245 = 0;
                                      }
                                      v246 = (uint64_t *)&v245[8 * v241];
                                      uint64_t v247 = &v245[8 * v244];
                                      uint64_t *v246 = v236;
                                      v239 = v246 + 1;
                                      while (v237 != v240)
                                      {
                                        uint64_t v248 = *--v237;
                                        *--v246 = v248;
                                      }
                                      v235[703] = v246;
                                      v235[704] = v239;
                                      v235[705] = v247;
                                      if (v240) {
                                        operator delete(v240);
                                      }
                                      goto LABEL_295;
                                    }
LABEL_288:
                                    sub_566C();
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_296:
    *a2 = 1;
    return;
  }
  if (!*(_DWORD *)(v3 + 48))
  {
    uint64_t v11 = (void *)a1[1];
    uint64_t v10 = a1[2];
    v12 = (void *)*v11;
    *(void *)(v12[656] - 8) += *(_WORD *)(v10 + 28) & 0x7FFF;
    *(void *)(v12[659] - 8) += *(_DWORD *)(v10 + 60) & 0x7FFFF;
    *(void *)(v12[662] - 8) += *(_WORD *)(v10 + 32) & 0x7FFF;
    *(void *)(v12[665] - 8) += (unsigned __int16)*(_DWORD *)(v10 + 16) >> 1;
    *(void *)(v12[668] - 8) += *(_DWORD *)(v10 + 36) & 0x7FFFF;
    *(void *)(v12[671] - 8) += *(_WORD *)(v10 + 20) & 0x7FFF;
    *(void *)(v12[674] - 8) += *(_DWORD *)(v10 + 44) & 0x7FFFF;
    *(void *)(v12[677] - 8) += *(_WORD *)(v10 + 26) & 0x7FFF;
    *(void *)(v12[680] - 8) += *(_DWORD *)(v10 + 56) & 0x7FFFF;
    *(void *)(v12[683] - 8) += *(_WORD *)(v10 + 24) & 0x7FFF;
    uint64_t v13 = a1[2];
    unint64_t v14 = (void *)*v11;
    *(void *)(v14[686] - 8) += *(_DWORD *)(v13 + 52) & 0x7FFFF;
    *(void *)(v14[689] - 8) += *(_WORD *)(v13 + 30) & 0x7FFF;
    *(void *)(v14[692] - 8) += *(_DWORD *)(v13 + 64) & 0x7FFFF;
    *(void *)(v14[695] - 8) += *(_WORD *)(v13 + 18) & 0x7FFF;
    *(void *)(v14[698] - 8) += *(_DWORD *)(v13 + 40) & 0x7FFFF;
    *(void *)(v14[701] - 8) += *(_WORD *)(v13 + 22) & 0x7FFF;
    *(void *)(v14[704] - 8) += *(_DWORD *)(v13 + 48) & 0x7FFFF;
  }
}

void sub_4F538(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    if (*(_DWORD *)(v3 + 48)) {
      goto LABEL_91;
    }
    v5 = *(void **)a1[1];
    unint64_t v6 = (unint64_t)*(unsigned int *)(a1[2] + 24) >> 17;
    v7 = (unint64_t *)v5[167];
    unint64_t v8 = v5[168];
    if ((unint64_t)v7 >= v8)
    {
      v12 = (unint64_t *)v5[166];
      uint64_t v13 = v7 - v12;
      if ((unint64_t)(v13 + 1) >> 61) {
        goto LABEL_93;
      }
      unint64_t v14 = v8 - (void)v12;
      unint64_t v15 = (uint64_t)(v8 - (void)v12) >> 2;
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      if (v14 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v15;
      }
      if (v16)
      {
        unint64_t v17 = (char *)sub_5714((uint64_t)(v5 + 168), v16);
        v7 = (unint64_t *)v5[167];
        v12 = (unint64_t *)v5[166];
      }
      else
      {
        unint64_t v17 = 0;
      }
      unint64_t v18 = (unint64_t *)&v17[8 * v13];
      unint64_t v19 = &v17[8 * v16];
      *unint64_t v18 = v6;
      v9 = v18 + 1;
      while (v7 != v12)
      {
        unint64_t v20 = *--v7;
        *--unint64_t v18 = v20;
      }
      v5[166] = v18;
      v5[167] = v9;
      v5[168] = v19;
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      unint64_t *v7 = v6;
      v9 = v7 + 1;
    }
    v5[167] = v9;
    if (!*(_DWORD *)(v3 + 48))
    {
      uint64_t v21 = *(void **)a1[1];
      uint64_t v22 = *(_DWORD *)(a1[2] + 24) & 0x1FFFFLL;
      uint64_t v23 = (uint64_t *)v21[170];
      unint64_t v24 = v21[171];
      if ((unint64_t)v23 >= v24)
      {
        v26 = (uint64_t *)v21[169];
        uint64_t v27 = v23 - v26;
        if ((unint64_t)(v27 + 1) >> 61) {
          goto LABEL_93;
        }
        unint64_t v28 = v24 - (void)v26;
        unint64_t v29 = (uint64_t)(v24 - (void)v26) >> 2;
        if (v29 <= v27 + 1) {
          unint64_t v29 = v27 + 1;
        }
        if (v28 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v29;
        }
        if (v30)
        {
          unint64_t v31 = (char *)sub_5714((uint64_t)(v21 + 171), v30);
          uint64_t v23 = (uint64_t *)v21[170];
          v26 = (uint64_t *)v21[169];
        }
        else
        {
          unint64_t v31 = 0;
        }
        unint64_t v32 = (uint64_t *)&v31[8 * v27];
        unint64_t v33 = &v31[8 * v30];
        *unint64_t v32 = v22;
        uint64_t v25 = v32 + 1;
        while (v23 != v26)
        {
          uint64_t v34 = *--v23;
          *--unint64_t v32 = v34;
        }
        v21[169] = v32;
        v21[170] = v25;
        v21[171] = v33;
        if (v26) {
          operator delete(v26);
        }
      }
      else
      {
        *uint64_t v23 = v22;
        uint64_t v25 = v23 + 1;
      }
      v21[170] = v25;
      if (!*(_DWORD *)(v3 + 48))
      {
        uint64_t v35 = *(void **)a1[1];
        uint64_t v36 = *(_DWORD *)(a1[2] + 20) & 0x1FFFFLL;
        uint64_t v37 = (uint64_t *)v35[173];
        unint64_t v38 = v35[174];
        if ((unint64_t)v37 >= v38)
        {
          uint64_t v40 = (uint64_t *)v35[172];
          uint64_t v41 = v37 - v40;
          if ((unint64_t)(v41 + 1) >> 61) {
            goto LABEL_93;
          }
          unint64_t v42 = v38 - (void)v40;
          unint64_t v43 = (uint64_t)(v38 - (void)v40) >> 2;
          if (v43 <= v41 + 1) {
            unint64_t v43 = v41 + 1;
          }
          if (v42 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v44 = v43;
          }
          if (v44)
          {
            unint64_t v45 = (char *)sub_5714((uint64_t)(v35 + 174), v44);
            uint64_t v37 = (uint64_t *)v35[173];
            uint64_t v40 = (uint64_t *)v35[172];
          }
          else
          {
            unint64_t v45 = 0;
          }
          unint64_t v46 = (uint64_t *)&v45[8 * v41];
          unint64_t v47 = &v45[8 * v44];
          *unint64_t v46 = v36;
          uint64_t v39 = v46 + 1;
          while (v37 != v40)
          {
            uint64_t v48 = *--v37;
            *--unint64_t v46 = v48;
          }
          v35[172] = v46;
          v35[173] = v39;
          v35[174] = v47;
          if (v40) {
            operator delete(v40);
          }
        }
        else
        {
          *uint64_t v37 = v36;
          uint64_t v39 = v37 + 1;
        }
        v35[173] = v39;
        if (!*(_DWORD *)(v3 + 48))
        {
          uint64_t v49 = a1[1];
          v50 = *(void **)v49;
          uint64_t v51 = *(unsigned __int16 *)(a1[2] + 18);
          uint64_t v52 = *(char **)(*(void *)v49 + 1408);
          unint64_t v53 = *(void *)(*(void *)v49 + 1416);
          if ((unint64_t)v52 >= v53)
          {
            unint64_t v55 = (char *)v50[175];
            uint64_t v56 = (v52 - v55) >> 3;
            if ((unint64_t)(v56 + 1) >> 61) {
              goto LABEL_93;
            }
            unint64_t v57 = v53 - (void)v55;
            unint64_t v58 = (uint64_t)(v53 - (void)v55) >> 2;
            if (v58 <= v56 + 1) {
              unint64_t v58 = v56 + 1;
            }
            if (v57 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v59 = v58;
            }
            if (v59)
            {
              unint64_t v60 = (char *)sub_5714((uint64_t)(v50 + 177), v59);
              uint64_t v52 = (char *)v50[176];
              unint64_t v55 = (char *)v50[175];
            }
            else
            {
              unint64_t v60 = 0;
            }
            unint64_t v61 = &v60[8 * v56];
            unint64_t v62 = &v60[8 * v59];
            *(void *)unint64_t v61 = v51;
            v54 = v61 + 8;
            while (v52 != v55)
            {
              uint64_t v63 = *((void *)v52 - 1);
              v52 -= 8;
              *((void *)v61 - 1) = v63;
              v61 -= 8;
            }
            v50[175] = v61;
            v50[176] = v54;
            v50[177] = v62;
            if (v55) {
              operator delete(v55);
            }
          }
          else
          {
            *(void *)uint64_t v52 = v51;
            v54 = v52 + 8;
          }
          v50[176] = v54;
          if (!*(_DWORD *)(v3 + 48))
          {
            uint64_t v64 = a1[1];
            uint64_t v65 = a1[2];
            v66 = *(void **)v64;
            uint64_t v67 = *(unsigned __int16 *)(v65 + 16);
            uint64_t v68 = *(char **)(*(void *)v64 + 1432);
            unint64_t v69 = *(void *)(*(void *)v64 + 1440);
            if ((unint64_t)v68 < v69)
            {
              *(void *)uint64_t v68 = v67;
              uint64_t v70 = v68 + 8;
LABEL_90:
              v66[179] = v70;
              goto LABEL_91;
            }
            unint64_t v71 = (char *)v66[178];
            uint64_t v72 = (v68 - v71) >> 3;
            if (!((unint64_t)(v72 + 1) >> 61))
            {
              unint64_t v73 = v69 - (void)v71;
              unint64_t v74 = (uint64_t)(v69 - (void)v71) >> 2;
              if (v74 <= v72 + 1) {
                unint64_t v74 = v72 + 1;
              }
              if (v73 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v75 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v75 = v74;
              }
              if (v75)
              {
                unint64_t v76 = (char *)sub_5714((uint64_t)(v66 + 180), v75);
                uint64_t v68 = (char *)v66[179];
                unint64_t v71 = (char *)v66[178];
              }
              else
              {
                unint64_t v76 = 0;
              }
              uint64_t v77 = &v76[8 * v72];
              unint64_t v78 = &v76[8 * v75];
              *(void *)uint64_t v77 = v67;
              uint64_t v70 = v77 + 8;
              while (v68 != v71)
              {
                uint64_t v79 = *((void *)v68 - 1);
                v68 -= 8;
                *((void *)v77 - 1) = v79;
                v77 -= 8;
              }
              v66[178] = v77;
              v66[179] = v70;
              v66[180] = v78;
              if (v71) {
                operator delete(v71);
              }
              goto LABEL_90;
            }
LABEL_93:
            sub_566C();
          }
        }
      }
    }
LABEL_91:
    *a2 = 1;
    return;
  }
  if (!*(_DWORD *)(v3 + 48))
  {
    uint64_t v10 = a1[2];
    uint64_t v11 = *(void **)a1[1];
    *(void *)(v11[167] - 8) += (unint64_t)*(unsigned int *)(v10 + 24) >> 17;
    *(void *)(v11[170] - 8) += *(_DWORD *)(v10 + 24) & 0x1FFFF;
    *(void *)(v11[173] - 8) += *(_DWORD *)(v10 + 20) & 0x1FFFF;
    *(void *)(v11[176] - 8) += *(unsigned __int16 *)(v10 + 18);
    *(void *)(v11[179] - 8) += *(unsigned __int16 *)(v10 + 16);
  }
}

void sub_4FA04(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    if (*(_DWORD *)(v3 + 48)) {
      goto LABEL_551;
    }
    v5 = *(void **)a1[1];
    uint64_t v6 = *(_WORD *)(a1[2] + 74) & 0x1FFF;
    v7 = (char *)v5[305];
    unint64_t v8 = v5[306];
    if ((unint64_t)v7 >= v8)
    {
      unint64_t v19 = (char *)v5[304];
      uint64_t v20 = (v7 - v19) >> 3;
      if ((unint64_t)(v20 + 1) >> 61) {
        goto LABEL_543;
      }
      unint64_t v21 = v8 - (void)v19;
      unint64_t v22 = (uint64_t)(v8 - (void)v19) >> 2;
      if (v22 <= v20 + 1) {
        unint64_t v22 = v20 + 1;
      }
      if (v21 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v23 = v22;
      }
      if (v23)
      {
        unint64_t v24 = (char *)sub_5714((uint64_t)(v5 + 306), v23);
        v7 = (char *)v5[305];
        unint64_t v19 = (char *)v5[304];
      }
      else
      {
        unint64_t v24 = 0;
      }
      uint64_t v25 = &v24[8 * v20];
      v26 = &v24[8 * v23];
      *(void *)uint64_t v25 = v6;
      v9 = v25 + 8;
      while (v7 != v19)
      {
        uint64_t v27 = *((void *)v7 - 1);
        v7 -= 8;
        *((void *)v25 - 1) = v27;
        v25 -= 8;
      }
      v5[304] = v25;
      v5[305] = v9;
      v5[306] = v26;
      if (v19) {
        operator delete(v19);
      }
    }
    else
    {
      *(void *)v7 = v6;
      v9 = v7 + 8;
    }
    v5[305] = v9;
    if (!*(_DWORD *)(v3 + 48))
    {
      unint64_t v28 = *(void **)a1[1];
      uint64_t v29 = *(_WORD *)(a1[2] + 58) & 0x1FFF;
      unint64_t v30 = (char *)v28[308];
      unint64_t v31 = v28[309];
      if ((unint64_t)v30 >= v31)
      {
        unint64_t v33 = (char *)v28[307];
        uint64_t v34 = (v30 - v33) >> 3;
        if ((unint64_t)(v34 + 1) >> 61) {
          goto LABEL_543;
        }
        unint64_t v35 = v31 - (void)v33;
        unint64_t v36 = (uint64_t)(v31 - (void)v33) >> 2;
        if (v36 <= v34 + 1) {
          unint64_t v36 = v34 + 1;
        }
        if (v35 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v37 = v36;
        }
        if (v37)
        {
          unint64_t v38 = (char *)sub_5714((uint64_t)(v28 + 309), v37);
          unint64_t v30 = (char *)v28[308];
          unint64_t v33 = (char *)v28[307];
        }
        else
        {
          unint64_t v38 = 0;
        }
        uint64_t v39 = &v38[8 * v34];
        uint64_t v40 = &v38[8 * v37];
        *(void *)uint64_t v39 = v29;
        unint64_t v32 = v39 + 8;
        while (v30 != v33)
        {
          uint64_t v41 = *((void *)v30 - 1);
          v30 -= 8;
          *((void *)v39 - 1) = v41;
          v39 -= 8;
        }
        v28[307] = v39;
        v28[308] = v32;
        v28[309] = v40;
        if (v33) {
          operator delete(v33);
        }
      }
      else
      {
        *(void *)unint64_t v30 = v29;
        unint64_t v32 = v30 + 8;
      }
      v28[308] = v32;
      if (!*(_DWORD *)(v3 + 48))
      {
        unint64_t v42 = *(void **)a1[1];
        uint64_t v43 = *(_WORD *)(a1[2] + 42) & 0x1FFF;
        unint64_t v44 = (char *)v42[311];
        unint64_t v45 = v42[312];
        if ((unint64_t)v44 >= v45)
        {
          unint64_t v47 = (char *)v42[310];
          uint64_t v48 = (v44 - v47) >> 3;
          if ((unint64_t)(v48 + 1) >> 61) {
            goto LABEL_543;
          }
          unint64_t v49 = v45 - (void)v47;
          unint64_t v50 = (uint64_t)(v45 - (void)v47) >> 2;
          if (v50 <= v48 + 1) {
            unint64_t v50 = v48 + 1;
          }
          if (v49 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v51 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v51 = v50;
          }
          if (v51)
          {
            uint64_t v52 = (char *)sub_5714((uint64_t)(v42 + 312), v51);
            unint64_t v44 = (char *)v42[311];
            unint64_t v47 = (char *)v42[310];
          }
          else
          {
            uint64_t v52 = 0;
          }
          unint64_t v53 = &v52[8 * v48];
          v54 = &v52[8 * v51];
          *(void *)unint64_t v53 = v43;
          unint64_t v46 = v53 + 8;
          while (v44 != v47)
          {
            uint64_t v55 = *((void *)v44 - 1);
            v44 -= 8;
            *((void *)v53 - 1) = v55;
            v53 -= 8;
          }
          v42[310] = v53;
          v42[311] = v46;
          v42[312] = v54;
          if (v47) {
            operator delete(v47);
          }
        }
        else
        {
          *(void *)unint64_t v44 = v43;
          unint64_t v46 = v44 + 8;
        }
        v42[311] = v46;
        if (!*(_DWORD *)(v3 + 48))
        {
          uint64_t v56 = *(void **)a1[1];
          uint64_t v57 = *(_WORD *)(a1[2] + 26) & 0x1FFF;
          unint64_t v58 = (char *)v56[314];
          unint64_t v59 = v56[315];
          if ((unint64_t)v58 >= v59)
          {
            unint64_t v61 = (char *)v56[313];
            uint64_t v62 = (v58 - v61) >> 3;
            if ((unint64_t)(v62 + 1) >> 61) {
              goto LABEL_543;
            }
            unint64_t v63 = v59 - (void)v61;
            unint64_t v64 = (uint64_t)(v59 - (void)v61) >> 2;
            if (v64 <= v62 + 1) {
              unint64_t v64 = v62 + 1;
            }
            if (v63 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v65 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v65 = v64;
            }
            if (v65)
            {
              v66 = (char *)sub_5714((uint64_t)(v56 + 315), v65);
              unint64_t v58 = (char *)v56[314];
              unint64_t v61 = (char *)v56[313];
            }
            else
            {
              v66 = 0;
            }
            uint64_t v67 = &v66[8 * v62];
            uint64_t v68 = &v66[8 * v65];
            *(void *)uint64_t v67 = v57;
            unint64_t v60 = v67 + 8;
            while (v58 != v61)
            {
              uint64_t v69 = *((void *)v58 - 1);
              v58 -= 8;
              *((void *)v67 - 1) = v69;
              v67 -= 8;
            }
            v56[313] = v67;
            v56[314] = v60;
            v56[315] = v68;
            if (v61) {
              operator delete(v61);
            }
          }
          else
          {
            *(void *)unint64_t v58 = v57;
            unint64_t v60 = v58 + 8;
          }
          v56[314] = v60;
          if (!*(_DWORD *)(v3 + 48))
          {
            uint64_t v70 = *(void **)a1[1];
            uint64_t v71 = *(_WORD *)(a1[2] + 76) & 0x1FFF;
            uint64_t v72 = (char *)v70[317];
            unint64_t v73 = v70[318];
            if ((unint64_t)v72 >= v73)
            {
              unint64_t v75 = (char *)v70[316];
              uint64_t v76 = (v72 - v75) >> 3;
              if ((unint64_t)(v76 + 1) >> 61) {
                goto LABEL_543;
              }
              unint64_t v77 = v73 - (void)v75;
              unint64_t v78 = (uint64_t)(v73 - (void)v75) >> 2;
              if (v78 <= v76 + 1) {
                unint64_t v78 = v76 + 1;
              }
              if (v77 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v79 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v79 = v78;
              }
              if (v79)
              {
                v80 = (char *)sub_5714((uint64_t)(v70 + 318), v79);
                uint64_t v72 = (char *)v70[317];
                unint64_t v75 = (char *)v70[316];
              }
              else
              {
                v80 = 0;
              }
              uint64_t v81 = &v80[8 * v76];
              uint64_t v82 = &v80[8 * v79];
              *(void *)uint64_t v81 = v71;
              unint64_t v74 = v81 + 8;
              while (v72 != v75)
              {
                uint64_t v83 = *((void *)v72 - 1);
                v72 -= 8;
                *((void *)v81 - 1) = v83;
                v81 -= 8;
              }
              v70[316] = v81;
              v70[317] = v74;
              v70[318] = v82;
              if (v75) {
                operator delete(v75);
              }
            }
            else
            {
              *(void *)uint64_t v72 = v71;
              unint64_t v74 = v72 + 8;
            }
            v70[317] = v74;
            if (!*(_DWORD *)(v3 + 48))
            {
              uint64_t v84 = *(void **)a1[1];
              uint64_t v85 = *(_WORD *)(a1[2] + 60) & 0x1FFF;
              uint64_t v86 = (char *)v84[320];
              unint64_t v87 = v84[321];
              if ((unint64_t)v86 >= v87)
              {
                unint64_t v89 = (char *)v84[319];
                uint64_t v90 = (v86 - v89) >> 3;
                if ((unint64_t)(v90 + 1) >> 61) {
                  goto LABEL_543;
                }
                unint64_t v91 = v87 - (void)v89;
                unint64_t v92 = (uint64_t)(v87 - (void)v89) >> 2;
                if (v92 <= v90 + 1) {
                  unint64_t v92 = v90 + 1;
                }
                if (v91 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v93 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v93 = v92;
                }
                if (v93)
                {
                  uint64_t v94 = (char *)sub_5714((uint64_t)(v84 + 321), v93);
                  uint64_t v86 = (char *)v84[320];
                  unint64_t v89 = (char *)v84[319];
                }
                else
                {
                  uint64_t v94 = 0;
                }
                uint64_t v95 = &v94[8 * v90];
                unint64_t v96 = &v94[8 * v93];
                *(void *)uint64_t v95 = v85;
                unint64_t v88 = v95 + 8;
                while (v86 != v89)
                {
                  uint64_t v97 = *((void *)v86 - 1);
                  v86 -= 8;
                  *((void *)v95 - 1) = v97;
                  v95 -= 8;
                }
                v84[319] = v95;
                v84[320] = v88;
                v84[321] = v96;
                if (v89) {
                  operator delete(v89);
                }
              }
              else
              {
                *(void *)uint64_t v86 = v85;
                unint64_t v88 = v86 + 8;
              }
              v84[320] = v88;
              if (!*(_DWORD *)(v3 + 48))
              {
                uint64_t v98 = *(void **)a1[1];
                uint64_t v99 = *(_WORD *)(a1[2] + 44) & 0x1FFF;
                uint64_t v100 = (char *)v98[323];
                unint64_t v101 = v98[324];
                if ((unint64_t)v100 >= v101)
                {
                  unint64_t v103 = (char *)v98[322];
                  uint64_t v104 = (v100 - v103) >> 3;
                  if ((unint64_t)(v104 + 1) >> 61) {
                    goto LABEL_543;
                  }
                  unint64_t v105 = v101 - (void)v103;
                  unint64_t v106 = (uint64_t)(v101 - (void)v103) >> 2;
                  if (v106 <= v104 + 1) {
                    unint64_t v106 = v104 + 1;
                  }
                  if (v105 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v107 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v107 = v106;
                  }
                  if (v107)
                  {
                    uint64_t v108 = (char *)sub_5714((uint64_t)(v98 + 324), v107);
                    uint64_t v100 = (char *)v98[323];
                    unint64_t v103 = (char *)v98[322];
                  }
                  else
                  {
                    uint64_t v108 = 0;
                  }
                  uint64_t v109 = &v108[8 * v104];
                  unint64_t v110 = &v108[8 * v107];
                  *(void *)uint64_t v109 = v99;
                  unint64_t v102 = v109 + 8;
                  while (v100 != v103)
                  {
                    uint64_t v111 = *((void *)v100 - 1);
                    v100 -= 8;
                    *((void *)v109 - 1) = v111;
                    v109 -= 8;
                  }
                  v98[322] = v109;
                  v98[323] = v102;
                  v98[324] = v110;
                  if (v103) {
                    operator delete(v103);
                  }
                }
                else
                {
                  *(void *)uint64_t v100 = v99;
                  unint64_t v102 = v100 + 8;
                }
                v98[323] = v102;
                if (!*(_DWORD *)(v3 + 48))
                {
                  uint64_t v112 = *(void **)a1[1];
                  uint64_t v113 = *(_WORD *)(a1[2] + 28) & 0x1FFF;
                  uint64_t v114 = (char *)v112[326];
                  unint64_t v115 = v112[327];
                  if ((unint64_t)v114 >= v115)
                  {
                    unint64_t v117 = (char *)v112[325];
                    uint64_t v118 = (v114 - v117) >> 3;
                    if ((unint64_t)(v118 + 1) >> 61) {
                      goto LABEL_543;
                    }
                    unint64_t v119 = v115 - (void)v117;
                    unint64_t v120 = (uint64_t)(v115 - (void)v117) >> 2;
                    if (v120 <= v118 + 1) {
                      unint64_t v120 = v118 + 1;
                    }
                    if (v119 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v121 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v121 = v120;
                    }
                    if (v121)
                    {
                      uint64_t v122 = (char *)sub_5714((uint64_t)(v112 + 327), v121);
                      uint64_t v114 = (char *)v112[326];
                      unint64_t v117 = (char *)v112[325];
                    }
                    else
                    {
                      uint64_t v122 = 0;
                    }
                    uint64_t v123 = &v122[8 * v118];
                    unint64_t v124 = &v122[8 * v121];
                    *(void *)uint64_t v123 = v113;
                    unint64_t v116 = v123 + 8;
                    while (v114 != v117)
                    {
                      uint64_t v125 = *((void *)v114 - 1);
                      v114 -= 8;
                      *((void *)v123 - 1) = v125;
                      v123 -= 8;
                    }
                    v112[325] = v123;
                    v112[326] = v116;
                    v112[327] = v124;
                    if (v117) {
                      operator delete(v117);
                    }
                  }
                  else
                  {
                    *(void *)uint64_t v114 = v113;
                    unint64_t v116 = v114 + 8;
                  }
                  v112[326] = v116;
                  if (!*(_DWORD *)(v3 + 48))
                  {
                    v126 = *(void **)a1[1];
                    uint64_t v127 = *(_WORD *)(a1[2] + 78) & 0x1FFF;
                    uint64_t v128 = (char *)v126[329];
                    unint64_t v129 = v126[330];
                    if ((unint64_t)v128 >= v129)
                    {
                      unint64_t v131 = (char *)v126[328];
                      uint64_t v132 = (v128 - v131) >> 3;
                      if ((unint64_t)(v132 + 1) >> 61) {
                        goto LABEL_543;
                      }
                      unint64_t v133 = v129 - (void)v131;
                      unint64_t v134 = (uint64_t)(v129 - (void)v131) >> 2;
                      if (v134 <= v132 + 1) {
                        unint64_t v134 = v132 + 1;
                      }
                      if (v133 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v135 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v135 = v134;
                      }
                      if (v135)
                      {
                        unint64_t v136 = (char *)sub_5714((uint64_t)(v126 + 330), v135);
                        uint64_t v128 = (char *)v126[329];
                        unint64_t v131 = (char *)v126[328];
                      }
                      else
                      {
                        unint64_t v136 = 0;
                      }
                      uint64_t v137 = &v136[8 * v132];
                      unint64_t v138 = &v136[8 * v135];
                      *(void *)uint64_t v137 = v127;
                      unint64_t v130 = v137 + 8;
                      while (v128 != v131)
                      {
                        uint64_t v139 = *((void *)v128 - 1);
                        v128 -= 8;
                        *((void *)v137 - 1) = v139;
                        v137 -= 8;
                      }
                      v126[328] = v137;
                      v126[329] = v130;
                      v126[330] = v138;
                      if (v131) {
                        operator delete(v131);
                      }
                    }
                    else
                    {
                      *(void *)uint64_t v128 = v127;
                      unint64_t v130 = v128 + 8;
                    }
                    v126[329] = v130;
                    if (!*(_DWORD *)(v3 + 48))
                    {
                      v140 = *(void **)a1[1];
                      uint64_t v141 = *(_WORD *)(a1[2] + 62) & 0x1FFF;
                      uint64_t v142 = (char *)v140[332];
                      unint64_t v143 = v140[333];
                      if ((unint64_t)v142 >= v143)
                      {
                        unint64_t v145 = (char *)v140[331];
                        uint64_t v146 = (v142 - v145) >> 3;
                        if ((unint64_t)(v146 + 1) >> 61) {
                          goto LABEL_543;
                        }
                        unint64_t v147 = v143 - (void)v145;
                        unint64_t v148 = (uint64_t)(v143 - (void)v145) >> 2;
                        if (v148 <= v146 + 1) {
                          unint64_t v148 = v146 + 1;
                        }
                        if (v147 >= 0x7FFFFFFFFFFFFFF8) {
                          unint64_t v149 = 0x1FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v149 = v148;
                        }
                        if (v149)
                        {
                          uint64_t v150 = (char *)sub_5714((uint64_t)(v140 + 333), v149);
                          uint64_t v142 = (char *)v140[332];
                          unint64_t v145 = (char *)v140[331];
                        }
                        else
                        {
                          uint64_t v150 = 0;
                        }
                        uint64_t v151 = &v150[8 * v146];
                        uint64_t v152 = &v150[8 * v149];
                        *(void *)uint64_t v151 = v141;
                        unint64_t v144 = v151 + 8;
                        while (v142 != v145)
                        {
                          uint64_t v153 = *((void *)v142 - 1);
                          v142 -= 8;
                          *((void *)v151 - 1) = v153;
                          v151 -= 8;
                        }
                        v140[331] = v151;
                        v140[332] = v144;
                        v140[333] = v152;
                        if (v145) {
                          operator delete(v145);
                        }
                      }
                      else
                      {
                        *(void *)uint64_t v142 = v141;
                        unint64_t v144 = v142 + 8;
                      }
                      v140[332] = v144;
                      if (!*(_DWORD *)(v3 + 48))
                      {
                        unint64_t v154 = *(void **)a1[1];
                        uint64_t v155 = *(_WORD *)(a1[2] + 46) & 0x1FFF;
                        uint64_t v156 = (char *)v154[335];
                        unint64_t v157 = v154[336];
                        if ((unint64_t)v156 >= v157)
                        {
                          unint64_t v159 = (char *)v154[334];
                          uint64_t v160 = (v156 - v159) >> 3;
                          if ((unint64_t)(v160 + 1) >> 61) {
                            goto LABEL_543;
                          }
                          unint64_t v161 = v157 - (void)v159;
                          unint64_t v162 = (uint64_t)(v157 - (void)v159) >> 2;
                          if (v162 <= v160 + 1) {
                            unint64_t v162 = v160 + 1;
                          }
                          if (v161 >= 0x7FFFFFFFFFFFFFF8) {
                            unint64_t v163 = 0x1FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v163 = v162;
                          }
                          if (v163)
                          {
                            uint64_t v164 = (char *)sub_5714((uint64_t)(v154 + 336), v163);
                            uint64_t v156 = (char *)v154[335];
                            unint64_t v159 = (char *)v154[334];
                          }
                          else
                          {
                            uint64_t v164 = 0;
                          }
                          uint64_t v165 = &v164[8 * v160];
                          unint64_t v166 = &v164[8 * v163];
                          *(void *)uint64_t v165 = v155;
                          unint64_t v158 = v165 + 8;
                          while (v156 != v159)
                          {
                            uint64_t v167 = *((void *)v156 - 1);
                            v156 -= 8;
                            *((void *)v165 - 1) = v167;
                            v165 -= 8;
                          }
                          v154[334] = v165;
                          v154[335] = v158;
                          v154[336] = v166;
                          if (v159) {
                            operator delete(v159);
                          }
                        }
                        else
                        {
                          *(void *)uint64_t v156 = v155;
                          unint64_t v158 = v156 + 8;
                        }
                        v154[335] = v158;
                        if (!*(_DWORD *)(v3 + 48))
                        {
                          unint64_t v168 = *(void **)a1[1];
                          uint64_t v169 = *(_WORD *)(a1[2] + 30) & 0x1FFF;
                          uint64_t v170 = (char *)v168[338];
                          unint64_t v171 = v168[339];
                          if ((unint64_t)v170 >= v171)
                          {
                            unint64_t v173 = (char *)v168[337];
                            uint64_t v174 = (v170 - v173) >> 3;
                            if ((unint64_t)(v174 + 1) >> 61) {
                              goto LABEL_543;
                            }
                            unint64_t v175 = v171 - (void)v173;
                            unint64_t v176 = (uint64_t)(v171 - (void)v173) >> 2;
                            if (v176 <= v174 + 1) {
                              unint64_t v176 = v174 + 1;
                            }
                            if (v175 >= 0x7FFFFFFFFFFFFFF8) {
                              unint64_t v177 = 0x1FFFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v177 = v176;
                            }
                            if (v177)
                            {
                              unint64_t v178 = (char *)sub_5714((uint64_t)(v168 + 339), v177);
                              uint64_t v170 = (char *)v168[338];
                              unint64_t v173 = (char *)v168[337];
                            }
                            else
                            {
                              unint64_t v178 = 0;
                            }
                            uint64_t v179 = &v178[8 * v174];
                            v180 = &v178[8 * v177];
                            *(void *)uint64_t v179 = v169;
                            unint64_t v172 = v179 + 8;
                            while (v170 != v173)
                            {
                              uint64_t v181 = *((void *)v170 - 1);
                              v170 -= 8;
                              *((void *)v179 - 1) = v181;
                              v179 -= 8;
                            }
                            v168[337] = v179;
                            v168[338] = v172;
                            v168[339] = v180;
                            if (v173) {
                              operator delete(v173);
                            }
                          }
                          else
                          {
                            *(void *)uint64_t v170 = v169;
                            unint64_t v172 = v170 + 8;
                          }
                          v168[338] = v172;
                          if (!*(_DWORD *)(v3 + 48))
                          {
                            unint64_t v182 = *(void **)a1[1];
                            uint64_t v183 = *(_WORD *)(a1[2] + 68) & 0x1FFF;
                            uint64_t v184 = (char *)v182[341];
                            unint64_t v185 = v182[342];
                            if ((unint64_t)v184 >= v185)
                            {
                              unint64_t v187 = (char *)v182[340];
                              uint64_t v188 = (v184 - v187) >> 3;
                              if ((unint64_t)(v188 + 1) >> 61) {
                                goto LABEL_543;
                              }
                              unint64_t v189 = v185 - (void)v187;
                              unint64_t v190 = (uint64_t)(v185 - (void)v187) >> 2;
                              if (v190 <= v188 + 1) {
                                unint64_t v190 = v188 + 1;
                              }
                              if (v189 >= 0x7FFFFFFFFFFFFFF8) {
                                unint64_t v191 = 0x1FFFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v191 = v190;
                              }
                              if (v191)
                              {
                                v192 = (char *)sub_5714((uint64_t)(v182 + 342), v191);
                                uint64_t v184 = (char *)v182[341];
                                unint64_t v187 = (char *)v182[340];
                              }
                              else
                              {
                                v192 = 0;
                              }
                              uint64_t v193 = &v192[8 * v188];
                              v194 = &v192[8 * v191];
                              *(void *)uint64_t v193 = v183;
                              unint64_t v186 = v193 + 8;
                              while (v184 != v187)
                              {
                                uint64_t v195 = *((void *)v184 - 1);
                                v184 -= 8;
                                *((void *)v193 - 1) = v195;
                                v193 -= 8;
                              }
                              v182[340] = v193;
                              v182[341] = v186;
                              v182[342] = v194;
                              if (v187) {
                                operator delete(v187);
                              }
                            }
                            else
                            {
                              *(void *)uint64_t v184 = v183;
                              unint64_t v186 = v184 + 8;
                            }
                            v182[341] = v186;
                            if (!*(_DWORD *)(v3 + 48))
                            {
                              v196 = *(void **)a1[1];
                              uint64_t v197 = *(_WORD *)(a1[2] + 52) & 0x1FFF;
                              uint64_t v198 = (char *)v196[344];
                              unint64_t v199 = v196[345];
                              if ((unint64_t)v198 >= v199)
                              {
                                unint64_t v201 = (char *)v196[343];
                                uint64_t v202 = (v198 - v201) >> 3;
                                if ((unint64_t)(v202 + 1) >> 61) {
                                  goto LABEL_543;
                                }
                                unint64_t v203 = v199 - (void)v201;
                                unint64_t v204 = (uint64_t)(v199 - (void)v201) >> 2;
                                if (v204 <= v202 + 1) {
                                  unint64_t v204 = v202 + 1;
                                }
                                if (v203 >= 0x7FFFFFFFFFFFFFF8) {
                                  unint64_t v205 = 0x1FFFFFFFFFFFFFFFLL;
                                }
                                else {
                                  unint64_t v205 = v204;
                                }
                                if (v205)
                                {
                                  v206 = (char *)sub_5714((uint64_t)(v196 + 345), v205);
                                  uint64_t v198 = (char *)v196[344];
                                  unint64_t v201 = (char *)v196[343];
                                }
                                else
                                {
                                  v206 = 0;
                                }
                                uint64_t v207 = &v206[8 * v202];
                                v208 = &v206[8 * v205];
                                *(void *)uint64_t v207 = v197;
                                unint64_t v200 = v207 + 8;
                                while (v198 != v201)
                                {
                                  uint64_t v209 = *((void *)v198 - 1);
                                  v198 -= 8;
                                  *((void *)v207 - 1) = v209;
                                  v207 -= 8;
                                }
                                v196[343] = v207;
                                v196[344] = v200;
                                v196[345] = v208;
                                if (v201) {
                                  operator delete(v201);
                                }
                              }
                              else
                              {
                                *(void *)uint64_t v198 = v197;
                                unint64_t v200 = v198 + 8;
                              }
                              v196[344] = v200;
                              if (!*(_DWORD *)(v3 + 48))
                              {
                                v210 = *(void **)a1[1];
                                uint64_t v211 = *(_WORD *)(a1[2] + 36) & 0x1FFF;
                                uint64_t v212 = (char *)v210[347];
                                unint64_t v213 = v210[348];
                                if ((unint64_t)v212 >= v213)
                                {
                                  unint64_t v215 = (char *)v210[346];
                                  uint64_t v216 = (v212 - v215) >> 3;
                                  if ((unint64_t)(v216 + 1) >> 61) {
                                    goto LABEL_543;
                                  }
                                  unint64_t v217 = v213 - (void)v215;
                                  unint64_t v218 = (uint64_t)(v213 - (void)v215) >> 2;
                                  if (v218 <= v216 + 1) {
                                    unint64_t v218 = v216 + 1;
                                  }
                                  if (v217 >= 0x7FFFFFFFFFFFFFF8) {
                                    unint64_t v219 = 0x1FFFFFFFFFFFFFFFLL;
                                  }
                                  else {
                                    unint64_t v219 = v218;
                                  }
                                  if (v219)
                                  {
                                    v220 = (char *)sub_5714((uint64_t)(v210 + 348), v219);
                                    uint64_t v212 = (char *)v210[347];
                                    unint64_t v215 = (char *)v210[346];
                                  }
                                  else
                                  {
                                    v220 = 0;
                                  }
                                  uint64_t v221 = &v220[8 * v216];
                                  v222 = &v220[8 * v219];
                                  *(void *)uint64_t v221 = v211;
                                  unint64_t v214 = v221 + 8;
                                  while (v212 != v215)
                                  {
                                    uint64_t v223 = *((void *)v212 - 1);
                                    v212 -= 8;
                                    *((void *)v221 - 1) = v223;
                                    v221 -= 8;
                                  }
                                  v210[346] = v221;
                                  v210[347] = v214;
                                  v210[348] = v222;
                                  if (v215) {
                                    operator delete(v215);
                                  }
                                }
                                else
                                {
                                  *(void *)uint64_t v212 = v211;
                                  unint64_t v214 = v212 + 8;
                                }
                                v210[347] = v214;
                                if (!*(_DWORD *)(v3 + 48))
                                {
                                  v224 = *(void **)a1[1];
                                  uint64_t v225 = *(_WORD *)(a1[2] + 20) & 0x1FFF;
                                  uint64_t v226 = (char *)v224[350];
                                  unint64_t v227 = v224[351];
                                  if ((unint64_t)v226 >= v227)
                                  {
                                    unint64_t v229 = (char *)v224[349];
                                    uint64_t v230 = (v226 - v229) >> 3;
                                    if ((unint64_t)(v230 + 1) >> 61) {
                                      goto LABEL_543;
                                    }
                                    unint64_t v231 = v227 - (void)v229;
                                    unint64_t v232 = (uint64_t)(v227 - (void)v229) >> 2;
                                    if (v232 <= v230 + 1) {
                                      unint64_t v232 = v230 + 1;
                                    }
                                    if (v231 >= 0x7FFFFFFFFFFFFFF8) {
                                      unint64_t v233 = 0x1FFFFFFFFFFFFFFFLL;
                                    }
                                    else {
                                      unint64_t v233 = v232;
                                    }
                                    if (v233)
                                    {
                                      uint64_t v234 = (char *)sub_5714((uint64_t)(v224 + 351), v233);
                                      uint64_t v226 = (char *)v224[350];
                                      unint64_t v229 = (char *)v224[349];
                                    }
                                    else
                                    {
                                      uint64_t v234 = 0;
                                    }
                                    uint64_t v235 = &v234[8 * v230];
                                    uint64_t v236 = &v234[8 * v233];
                                    *(void *)uint64_t v235 = v225;
                                    unint64_t v228 = v235 + 8;
                                    while (v226 != v229)
                                    {
                                      uint64_t v237 = *((void *)v226 - 1);
                                      v226 -= 8;
                                      *((void *)v235 - 1) = v237;
                                      v235 -= 8;
                                    }
                                    v224[349] = v235;
                                    v224[350] = v228;
                                    v224[351] = v236;
                                    if (v229) {
                                      operator delete(v229);
                                    }
                                  }
                                  else
                                  {
                                    *(void *)uint64_t v226 = v225;
                                    unint64_t v228 = v226 + 8;
                                  }
                                  v224[350] = v228;
                                  if (!*(_DWORD *)(v3 + 48))
                                  {
                                    unint64_t v238 = *(void **)a1[1];
                                    uint64_t v239 = *(_WORD *)(a1[2] + 70) & 0x1FFF;
                                    uint64_t v240 = (char *)v238[353];
                                    unint64_t v241 = v238[354];
                                    if ((unint64_t)v240 >= v241)
                                    {
                                      unint64_t v243 = (char *)v238[352];
                                      uint64_t v244 = (v240 - v243) >> 3;
                                      if ((unint64_t)(v244 + 1) >> 61) {
                                        goto LABEL_543;
                                      }
                                      unint64_t v245 = v241 - (void)v243;
                                      unint64_t v246 = (uint64_t)(v241 - (void)v243) >> 2;
                                      if (v246 <= v244 + 1) {
                                        unint64_t v246 = v244 + 1;
                                      }
                                      if (v245 >= 0x7FFFFFFFFFFFFFF8) {
                                        unint64_t v247 = 0x1FFFFFFFFFFFFFFFLL;
                                      }
                                      else {
                                        unint64_t v247 = v246;
                                      }
                                      if (v247)
                                      {
                                        uint64_t v248 = (char *)sub_5714((uint64_t)(v238 + 354), v247);
                                        uint64_t v240 = (char *)v238[353];
                                        unint64_t v243 = (char *)v238[352];
                                      }
                                      else
                                      {
                                        uint64_t v248 = 0;
                                      }
                                      v249 = &v248[8 * v244];
                                      uint64_t v250 = &v248[8 * v247];
                                      *(void *)v249 = v239;
                                      unint64_t v242 = v249 + 8;
                                      while (v240 != v243)
                                      {
                                        uint64_t v251 = *((void *)v240 - 1);
                                        v240 -= 8;
                                        *((void *)v249 - 1) = v251;
                                        v249 -= 8;
                                      }
                                      v238[352] = v249;
                                      v238[353] = v242;
                                      v238[354] = v250;
                                      if (v243) {
                                        operator delete(v243);
                                      }
                                    }
                                    else
                                    {
                                      *(void *)uint64_t v240 = v239;
                                      unint64_t v242 = v240 + 8;
                                    }
                                    v238[353] = v242;
                                    if (!*(_DWORD *)(v3 + 48))
                                    {
                                      unint64_t v252 = *(void **)a1[1];
                                      uint64_t v253 = *(_WORD *)(a1[2] + 54) & 0x1FFF;
                                      v254 = (char *)v252[356];
                                      unint64_t v255 = v252[357];
                                      if ((unint64_t)v254 >= v255)
                                      {
                                        unint64_t v257 = (char *)v252[355];
                                        uint64_t v258 = (v254 - v257) >> 3;
                                        if ((unint64_t)(v258 + 1) >> 61) {
                                          goto LABEL_543;
                                        }
                                        unint64_t v259 = v255 - (void)v257;
                                        unint64_t v260 = (uint64_t)(v255 - (void)v257) >> 2;
                                        if (v260 <= v258 + 1) {
                                          unint64_t v260 = v258 + 1;
                                        }
                                        if (v259 >= 0x7FFFFFFFFFFFFFF8) {
                                          unint64_t v261 = 0x1FFFFFFFFFFFFFFFLL;
                                        }
                                        else {
                                          unint64_t v261 = v260;
                                        }
                                        if (v261)
                                        {
                                          uint64_t v262 = (char *)sub_5714((uint64_t)(v252 + 357), v261);
                                          v254 = (char *)v252[356];
                                          unint64_t v257 = (char *)v252[355];
                                        }
                                        else
                                        {
                                          uint64_t v262 = 0;
                                        }
                                        v263 = &v262[8 * v258];
                                        v264 = &v262[8 * v261];
                                        *(void *)v263 = v253;
                                        unint64_t v256 = v263 + 8;
                                        while (v254 != v257)
                                        {
                                          uint64_t v265 = *((void *)v254 - 1);
                                          v254 -= 8;
                                          *((void *)v263 - 1) = v265;
                                          v263 -= 8;
                                        }
                                        v252[355] = v263;
                                        v252[356] = v256;
                                        v252[357] = v264;
                                        if (v257) {
                                          operator delete(v257);
                                        }
                                      }
                                      else
                                      {
                                        *(void *)v254 = v253;
                                        unint64_t v256 = v254 + 8;
                                      }
                                      v252[356] = v256;
                                      if (!*(_DWORD *)(v3 + 48))
                                      {
                                        v266 = *(void **)a1[1];
                                        uint64_t v267 = *(_WORD *)(a1[2] + 38) & 0x1FFF;
                                        v268 = (char *)v266[359];
                                        unint64_t v269 = v266[360];
                                        if ((unint64_t)v268 >= v269)
                                        {
                                          v271 = (char *)v266[358];
                                          uint64_t v272 = (v268 - v271) >> 3;
                                          if ((unint64_t)(v272 + 1) >> 61) {
                                            goto LABEL_543;
                                          }
                                          unint64_t v273 = v269 - (void)v271;
                                          unint64_t v274 = (uint64_t)(v269 - (void)v271) >> 2;
                                          if (v274 <= v272 + 1) {
                                            unint64_t v274 = v272 + 1;
                                          }
                                          if (v273 >= 0x7FFFFFFFFFFFFFF8) {
                                            unint64_t v275 = 0x1FFFFFFFFFFFFFFFLL;
                                          }
                                          else {
                                            unint64_t v275 = v274;
                                          }
                                          if (v275)
                                          {
                                            v276 = (char *)sub_5714((uint64_t)(v266 + 360), v275);
                                            v268 = (char *)v266[359];
                                            v271 = (char *)v266[358];
                                          }
                                          else
                                          {
                                            v276 = 0;
                                          }
                                          v277 = &v276[8 * v272];
                                          v278 = &v276[8 * v275];
                                          *(void *)v277 = v267;
                                          v270 = v277 + 8;
                                          while (v268 != v271)
                                          {
                                            uint64_t v279 = *((void *)v268 - 1);
                                            v268 -= 8;
                                            *((void *)v277 - 1) = v279;
                                            v277 -= 8;
                                          }
                                          v266[358] = v277;
                                          v266[359] = v270;
                                          v266[360] = v278;
                                          if (v271) {
                                            operator delete(v271);
                                          }
                                        }
                                        else
                                        {
                                          *(void *)v268 = v267;
                                          v270 = v268 + 8;
                                        }
                                        v266[359] = v270;
                                        if (!*(_DWORD *)(v3 + 48))
                                        {
                                          v280 = *(void **)a1[1];
                                          uint64_t v281 = *(_WORD *)(a1[2] + 22) & 0x1FFF;
                                          v282 = (char *)v280[362];
                                          unint64_t v283 = v280[363];
                                          if ((unint64_t)v282 >= v283)
                                          {
                                            v285 = (char *)v280[361];
                                            uint64_t v286 = (v282 - v285) >> 3;
                                            if ((unint64_t)(v286 + 1) >> 61) {
                                              goto LABEL_543;
                                            }
                                            unint64_t v287 = v283 - (void)v285;
                                            unint64_t v288 = (uint64_t)(v283 - (void)v285) >> 2;
                                            if (v288 <= v286 + 1) {
                                              unint64_t v288 = v286 + 1;
                                            }
                                            if (v287 >= 0x7FFFFFFFFFFFFFF8) {
                                              unint64_t v289 = 0x1FFFFFFFFFFFFFFFLL;
                                            }
                                            else {
                                              unint64_t v289 = v288;
                                            }
                                            if (v289)
                                            {
                                              v290 = (char *)sub_5714((uint64_t)(v280 + 363), v289);
                                              v282 = (char *)v280[362];
                                              v285 = (char *)v280[361];
                                            }
                                            else
                                            {
                                              v290 = 0;
                                            }
                                            v291 = &v290[8 * v286];
                                            v292 = &v290[8 * v289];
                                            *(void *)v291 = v281;
                                            v284 = v291 + 8;
                                            while (v282 != v285)
                                            {
                                              uint64_t v293 = *((void *)v282 - 1);
                                              v282 -= 8;
                                              *((void *)v291 - 1) = v293;
                                              v291 -= 8;
                                            }
                                            v280[361] = v291;
                                            v280[362] = v284;
                                            v280[363] = v292;
                                            if (v285) {
                                              operator delete(v285);
                                            }
                                          }
                                          else
                                          {
                                            *(void *)v282 = v281;
                                            v284 = v282 + 8;
                                          }
                                          v280[362] = v284;
                                          if (!*(_DWORD *)(v3 + 48))
                                          {
                                            v294 = *(void **)a1[1];
                                            uint64_t v295 = *(_WORD *)(a1[2] + 72) & 0x1FFF;
                                            v296 = (char *)v294[365];
                                            unint64_t v297 = v294[366];
                                            if ((unint64_t)v296 >= v297)
                                            {
                                              v299 = (char *)v294[364];
                                              uint64_t v300 = (v296 - v299) >> 3;
                                              if ((unint64_t)(v300 + 1) >> 61) {
                                                goto LABEL_543;
                                              }
                                              unint64_t v301 = v297 - (void)v299;
                                              unint64_t v302 = (uint64_t)(v297 - (void)v299) >> 2;
                                              if (v302 <= v300 + 1) {
                                                unint64_t v302 = v300 + 1;
                                              }
                                              if (v301 >= 0x7FFFFFFFFFFFFFF8) {
                                                unint64_t v303 = 0x1FFFFFFFFFFFFFFFLL;
                                              }
                                              else {
                                                unint64_t v303 = v302;
                                              }
                                              if (v303)
                                              {
                                                v304 = (char *)sub_5714((uint64_t)(v294 + 366), v303);
                                                v296 = (char *)v294[365];
                                                v299 = (char *)v294[364];
                                              }
                                              else
                                              {
                                                v304 = 0;
                                              }
                                              v305 = &v304[8 * v300];
                                              v306 = &v304[8 * v303];
                                              *(void *)v305 = v295;
                                              v298 = v305 + 8;
                                              while (v296 != v299)
                                              {
                                                uint64_t v307 = *((void *)v296 - 1);
                                                v296 -= 8;
                                                *((void *)v305 - 1) = v307;
                                                v305 -= 8;
                                              }
                                              v294[364] = v305;
                                              v294[365] = v298;
                                              v294[366] = v306;
                                              if (v299) {
                                                operator delete(v299);
                                              }
                                            }
                                            else
                                            {
                                              *(void *)v296 = v295;
                                              v298 = v296 + 8;
                                            }
                                            v294[365] = v298;
                                            if (!*(_DWORD *)(v3 + 48))
                                            {
                                              v308 = *(void **)a1[1];
                                              uint64_t v309 = *(_WORD *)(a1[2] + 56) & 0x1FFF;
                                              v310 = (char *)v308[368];
                                              unint64_t v311 = v308[369];
                                              if ((unint64_t)v310 >= v311)
                                              {
                                                v313 = (char *)v308[367];
                                                uint64_t v314 = (v310 - v313) >> 3;
                                                if ((unint64_t)(v314 + 1) >> 61) {
                                                  goto LABEL_543;
                                                }
                                                unint64_t v315 = v311 - (void)v313;
                                                unint64_t v316 = (uint64_t)(v311 - (void)v313) >> 2;
                                                if (v316 <= v314 + 1) {
                                                  unint64_t v316 = v314 + 1;
                                                }
                                                if (v315 >= 0x7FFFFFFFFFFFFFF8) {
                                                  unint64_t v317 = 0x1FFFFFFFFFFFFFFFLL;
                                                }
                                                else {
                                                  unint64_t v317 = v316;
                                                }
                                                if (v317)
                                                {
                                                  v318 = (char *)sub_5714((uint64_t)(v308 + 369), v317);
                                                  v310 = (char *)v308[368];
                                                  v313 = (char *)v308[367];
                                                }
                                                else
                                                {
                                                  v318 = 0;
                                                }
                                                v319 = &v318[8 * v314];
                                                v320 = &v318[8 * v317];
                                                *(void *)v319 = v309;
                                                v312 = v319 + 8;
                                                while (v310 != v313)
                                                {
                                                  uint64_t v321 = *((void *)v310 - 1);
                                                  v310 -= 8;
                                                  *((void *)v319 - 1) = v321;
                                                  v319 -= 8;
                                                }
                                                v308[367] = v319;
                                                v308[368] = v312;
                                                v308[369] = v320;
                                                if (v313) {
                                                  operator delete(v313);
                                                }
                                              }
                                              else
                                              {
                                                *(void *)v310 = v309;
                                                v312 = v310 + 8;
                                              }
                                              v308[368] = v312;
                                              if (!*(_DWORD *)(v3 + 48))
                                              {
                                                v322 = *(void **)a1[1];
                                                uint64_t v323 = *(_WORD *)(a1[2] + 40) & 0x1FFF;
                                                v324 = (char *)v322[371];
                                                unint64_t v325 = v322[372];
                                                if ((unint64_t)v324 >= v325)
                                                {
                                                  v327 = (char *)v322[370];
                                                  uint64_t v328 = (v324 - v327) >> 3;
                                                  if ((unint64_t)(v328 + 1) >> 61) {
                                                    goto LABEL_543;
                                                  }
                                                  unint64_t v329 = v325 - (void)v327;
                                                  unint64_t v330 = (uint64_t)(v325 - (void)v327) >> 2;
                                                  if (v330 <= v328 + 1) {
                                                    unint64_t v330 = v328 + 1;
                                                  }
                                                  if (v329 >= 0x7FFFFFFFFFFFFFF8) {
                                                    unint64_t v331 = 0x1FFFFFFFFFFFFFFFLL;
                                                  }
                                                  else {
                                                    unint64_t v331 = v330;
                                                  }
                                                  if (v331)
                                                  {
                                                    v332 = (char *)sub_5714((uint64_t)(v322 + 372), v331);
                                                    v324 = (char *)v322[371];
                                                    v327 = (char *)v322[370];
                                                  }
                                                  else
                                                  {
                                                    v332 = 0;
                                                  }
                                                  v333 = &v332[8 * v328];
                                                  v334 = &v332[8 * v331];
                                                  *(void *)v333 = v323;
                                                  v326 = v333 + 8;
                                                  while (v324 != v327)
                                                  {
                                                    uint64_t v335 = *((void *)v324 - 1);
                                                    v324 -= 8;
                                                    *((void *)v333 - 1) = v335;
                                                    v333 -= 8;
                                                  }
                                                  v322[370] = v333;
                                                  v322[371] = v326;
                                                  v322[372] = v334;
                                                  if (v327) {
                                                    operator delete(v327);
                                                  }
                                                }
                                                else
                                                {
                                                  *(void *)v324 = v323;
                                                  v326 = v324 + 8;
                                                }
                                                v322[371] = v326;
                                                if (!*(_DWORD *)(v3 + 48))
                                                {
                                                  v336 = *(void **)a1[1];
                                                  uint64_t v337 = *(_WORD *)(a1[2] + 24) & 0x1FFF;
                                                  v338 = (char *)v336[374];
                                                  unint64_t v339 = v336[375];
                                                  if ((unint64_t)v338 >= v339)
                                                  {
                                                    v341 = (char *)v336[373];
                                                    uint64_t v342 = (v338 - v341) >> 3;
                                                    if ((unint64_t)(v342 + 1) >> 61) {
                                                      goto LABEL_543;
                                                    }
                                                    unint64_t v343 = v339 - (void)v341;
                                                    unint64_t v344 = (uint64_t)(v339 - (void)v341) >> 2;
                                                    if (v344 <= v342 + 1) {
                                                      unint64_t v344 = v342 + 1;
                                                    }
                                                    if (v343 >= 0x7FFFFFFFFFFFFFF8) {
                                                      unint64_t v345 = 0x1FFFFFFFFFFFFFFFLL;
                                                    }
                                                    else {
                                                      unint64_t v345 = v344;
                                                    }
                                                    if (v345)
                                                    {
                                                      v346 = (char *)sub_5714((uint64_t)(v336 + 375), v345);
                                                      v338 = (char *)v336[374];
                                                      v341 = (char *)v336[373];
                                                    }
                                                    else
                                                    {
                                                      v346 = 0;
                                                    }
                                                    v347 = &v346[8 * v342];
                                                    v348 = &v346[8 * v345];
                                                    *(void *)v347 = v337;
                                                    v340 = v347 + 8;
                                                    while (v338 != v341)
                                                    {
                                                      uint64_t v349 = *((void *)v338 - 1);
                                                      v338 -= 8;
                                                      *((void *)v347 - 1) = v349;
                                                      v347 -= 8;
                                                    }
                                                    v336[373] = v347;
                                                    v336[374] = v340;
                                                    v336[375] = v348;
                                                    if (v341) {
                                                      operator delete(v341);
                                                    }
                                                  }
                                                  else
                                                  {
                                                    *(void *)v338 = v337;
                                                    v340 = v338 + 8;
                                                  }
                                                  v336[374] = v340;
                                                  if (!*(_DWORD *)(v3 + 48))
                                                  {
                                                    v350 = *(void **)a1[1];
                                                    uint64_t v351 = *(_WORD *)(a1[2] + 64) & 0x1FFF;
                                                    v352 = (char *)v350[377];
                                                    unint64_t v353 = v350[378];
                                                    if ((unint64_t)v352 >= v353)
                                                    {
                                                      v355 = (char *)v350[376];
                                                      uint64_t v356 = (v352 - v355) >> 3;
                                                      if ((unint64_t)(v356 + 1) >> 61) {
                                                        goto LABEL_543;
                                                      }
                                                      unint64_t v357 = v353 - (void)v355;
                                                      unint64_t v358 = (uint64_t)(v353 - (void)v355) >> 2;
                                                      if (v358 <= v356 + 1) {
                                                        unint64_t v358 = v356 + 1;
                                                      }
                                                      if (v357 >= 0x7FFFFFFFFFFFFFF8) {
                                                        unint64_t v359 = 0x1FFFFFFFFFFFFFFFLL;
                                                      }
                                                      else {
                                                        unint64_t v359 = v358;
                                                      }
                                                      if (v359)
                                                      {
                                                        v360 = (char *)sub_5714((uint64_t)(v350 + 378), v359);
                                                        v352 = (char *)v350[377];
                                                        v355 = (char *)v350[376];
                                                      }
                                                      else
                                                      {
                                                        v360 = 0;
                                                      }
                                                      v361 = &v360[8 * v356];
                                                      v362 = &v360[8 * v359];
                                                      *(void *)v361 = v351;
                                                      v354 = v361 + 8;
                                                      while (v352 != v355)
                                                      {
                                                        uint64_t v363 = *((void *)v352 - 1);
                                                        v352 -= 8;
                                                        *((void *)v361 - 1) = v363;
                                                        v361 -= 8;
                                                      }
                                                      v350[376] = v361;
                                                      v350[377] = v354;
                                                      v350[378] = v362;
                                                      if (v355) {
                                                        operator delete(v355);
                                                      }
                                                    }
                                                    else
                                                    {
                                                      *(void *)v352 = v351;
                                                      v354 = v352 + 8;
                                                    }
                                                    v350[377] = v354;
                                                    if (!*(_DWORD *)(v3 + 48))
                                                    {
                                                      v364 = *(void **)a1[1];
                                                      uint64_t v365 = *(_WORD *)(a1[2] + 48) & 0x1FFF;
                                                      v366 = (char *)v364[380];
                                                      unint64_t v367 = v364[381];
                                                      if ((unint64_t)v366 >= v367)
                                                      {
                                                        v369 = (char *)v364[379];
                                                        uint64_t v370 = (v366 - v369) >> 3;
                                                        if ((unint64_t)(v370 + 1) >> 61) {
                                                          goto LABEL_543;
                                                        }
                                                        unint64_t v371 = v367 - (void)v369;
                                                        unint64_t v372 = (uint64_t)(v367 - (void)v369) >> 2;
                                                        if (v372 <= v370 + 1) {
                                                          unint64_t v372 = v370 + 1;
                                                        }
                                                        if (v371 >= 0x7FFFFFFFFFFFFFF8) {
                                                          unint64_t v373 = 0x1FFFFFFFFFFFFFFFLL;
                                                        }
                                                        else {
                                                          unint64_t v373 = v372;
                                                        }
                                                        if (v373)
                                                        {
                                                          v374 = (char *)sub_5714((uint64_t)(v364 + 381), v373);
                                                          v366 = (char *)v364[380];
                                                          v369 = (char *)v364[379];
                                                        }
                                                        else
                                                        {
                                                          v374 = 0;
                                                        }
                                                        v375 = &v374[8 * v370];
                                                        v376 = &v374[8 * v373];
                                                        *(void *)v375 = v365;
                                                        v368 = v375 + 8;
                                                        while (v366 != v369)
                                                        {
                                                          uint64_t v377 = *((void *)v366 - 1);
                                                          v366 -= 8;
                                                          *((void *)v375 - 1) = v377;
                                                          v375 -= 8;
                                                        }
                                                        v364[379] = v375;
                                                        v364[380] = v368;
                                                        v364[381] = v376;
                                                        if (v369) {
                                                          operator delete(v369);
                                                        }
                                                      }
                                                      else
                                                      {
                                                        *(void *)v366 = v365;
                                                        v368 = v366 + 8;
                                                      }
                                                      v364[380] = v368;
                                                      if (!*(_DWORD *)(v3 + 48))
                                                      {
                                                        v378 = *(void **)a1[1];
                                                        uint64_t v379 = *(_WORD *)(a1[2] + 32) & 0x1FFF;
                                                        v380 = (char *)v378[383];
                                                        unint64_t v381 = v378[384];
                                                        if ((unint64_t)v380 >= v381)
                                                        {
                                                          v383 = (char *)v378[382];
                                                          uint64_t v384 = (v380 - v383) >> 3;
                                                          if ((unint64_t)(v384 + 1) >> 61) {
                                                            goto LABEL_543;
                                                          }
                                                          unint64_t v385 = v381 - (void)v383;
                                                          unint64_t v386 = (uint64_t)(v381 - (void)v383) >> 2;
                                                          if (v386 <= v384 + 1) {
                                                            unint64_t v386 = v384 + 1;
                                                          }
                                                          if (v385 >= 0x7FFFFFFFFFFFFFF8) {
                                                            unint64_t v387 = 0x1FFFFFFFFFFFFFFFLL;
                                                          }
                                                          else {
                                                            unint64_t v387 = v386;
                                                          }
                                                          if (v387)
                                                          {
                                                            v388 = (char *)sub_5714((uint64_t)(v378 + 384), v387);
                                                            v380 = (char *)v378[383];
                                                            v383 = (char *)v378[382];
                                                          }
                                                          else
                                                          {
                                                            v388 = 0;
                                                          }
                                                          v389 = &v388[8 * v384];
                                                          v390 = &v388[8 * v387];
                                                          *(void *)v389 = v379;
                                                          v382 = v389 + 8;
                                                          while (v380 != v383)
                                                          {
                                                            uint64_t v391 = *((void *)v380 - 1);
                                                            v380 -= 8;
                                                            *((void *)v389 - 1) = v391;
                                                            v389 -= 8;
                                                          }
                                                          v378[382] = v389;
                                                          v378[383] = v382;
                                                          v378[384] = v390;
                                                          if (v383) {
                                                            operator delete(v383);
                                                          }
                                                        }
                                                        else
                                                        {
                                                          *(void *)v380 = v379;
                                                          v382 = v380 + 8;
                                                        }
                                                        v378[383] = v382;
                                                        if (!*(_DWORD *)(v3 + 48))
                                                        {
                                                          v392 = *(void **)a1[1];
                                                          unint64_t v393 = ((unint64_t)*(unsigned __int16 *)(a1[2] + 16) >> 1) & 0x1FFF;
                                                          v394 = (unint64_t *)v392[386];
                                                          unint64_t v395 = v392[387];
                                                          if ((unint64_t)v394 >= v395)
                                                          {
                                                            v397 = (unint64_t *)v392[385];
                                                            uint64_t v398 = v394 - v397;
                                                            if ((unint64_t)(v398 + 1) >> 61) {
                                                              goto LABEL_543;
                                                            }
                                                            unint64_t v399 = v395 - (void)v397;
                                                            unint64_t v400 = (uint64_t)(v395 - (void)v397) >> 2;
                                                            if (v400 <= v398 + 1) {
                                                              unint64_t v400 = v398 + 1;
                                                            }
                                                            if (v399 >= 0x7FFFFFFFFFFFFFF8) {
                                                              unint64_t v401 = 0x1FFFFFFFFFFFFFFFLL;
                                                            }
                                                            else {
                                                              unint64_t v401 = v400;
                                                            }
                                                            if (v401)
                                                            {
                                                              v402 = (char *)sub_5714((uint64_t)(v392 + 387), v401);
                                                              v394 = (unint64_t *)v392[386];
                                                              v397 = (unint64_t *)v392[385];
                                                            }
                                                            else
                                                            {
                                                              v402 = 0;
                                                            }
                                                            v403 = (unint64_t *)&v402[8 * v398];
                                                            v404 = &v402[8 * v401];
                                                            unint64_t *v403 = v393;
                                                            v396 = v403 + 1;
                                                            while (v394 != v397)
                                                            {
                                                              unint64_t v405 = *--v394;
                                                              *--v403 = v405;
                                                            }
                                                            v392[385] = v403;
                                                            v392[386] = v396;
                                                            v392[387] = v404;
                                                            if (v397) {
                                                              operator delete(v397);
                                                            }
                                                          }
                                                          else
                                                          {
                                                            unint64_t *v394 = v393;
                                                            v396 = v394 + 1;
                                                          }
                                                          v392[386] = v396;
                                                          if (!*(_DWORD *)(v3 + 48))
                                                          {
                                                            v406 = *(void **)a1[1];
                                                            uint64_t v407 = *(_WORD *)(a1[2] + 66) & 0x1FFF;
                                                            v408 = (char *)v406[389];
                                                            unint64_t v409 = v406[390];
                                                            if ((unint64_t)v408 >= v409)
                                                            {
                                                              v411 = (char *)v406[388];
                                                              uint64_t v412 = (v408 - v411) >> 3;
                                                              if ((unint64_t)(v412 + 1) >> 61) {
                                                                goto LABEL_543;
                                                              }
                                                              unint64_t v413 = v409 - (void)v411;
                                                              unint64_t v414 = (uint64_t)(v409 - (void)v411) >> 2;
                                                              if (v414 <= v412 + 1) {
                                                                unint64_t v414 = v412 + 1;
                                                              }
                                                              if (v413 >= 0x7FFFFFFFFFFFFFF8) {
                                                                unint64_t v415 = 0x1FFFFFFFFFFFFFFFLL;
                                                              }
                                                              else {
                                                                unint64_t v415 = v414;
                                                              }
                                                              if (v415)
                                                              {
                                                                v416 = (char *)sub_5714((uint64_t)(v406 + 390), v415);
                                                                v408 = (char *)v406[389];
                                                                v411 = (char *)v406[388];
                                                              }
                                                              else
                                                              {
                                                                v416 = 0;
                                                              }
                                                              v417 = &v416[8 * v412];
                                                              v418 = &v416[8 * v415];
                                                              *(void *)v417 = v407;
                                                              v410 = v417 + 8;
                                                              while (v408 != v411)
                                                              {
                                                                uint64_t v419 = *((void *)v408 - 1);
                                                                v408 -= 8;
                                                                *((void *)v417 - 1) = v419;
                                                                v417 -= 8;
                                                              }
                                                              v406[388] = v417;
                                                              v406[389] = v410;
                                                              v406[390] = v418;
                                                              if (v411) {
                                                                operator delete(v411);
                                                              }
                                                            }
                                                            else
                                                            {
                                                              *(void *)v408 = v407;
                                                              v410 = v408 + 8;
                                                            }
                                                            v406[389] = v410;
                                                            if (!*(_DWORD *)(v3 + 48))
                                                            {
                                                              v420 = *(void **)a1[1];
                                                              uint64_t v421 = *(_WORD *)(a1[2] + 50) & 0x1FFF;
                                                              v422 = (char *)v420[392];
                                                              unint64_t v423 = v420[393];
                                                              if ((unint64_t)v422 >= v423)
                                                              {
                                                                v425 = (char *)v420[391];
                                                                uint64_t v426 = (v422 - v425) >> 3;
                                                                if ((unint64_t)(v426 + 1) >> 61) {
                                                                  goto LABEL_543;
                                                                }
                                                                unint64_t v427 = v423 - (void)v425;
                                                                unint64_t v428 = (uint64_t)(v423 - (void)v425) >> 2;
                                                                if (v428 <= v426 + 1) {
                                                                  unint64_t v428 = v426 + 1;
                                                                }
                                                                if (v427 >= 0x7FFFFFFFFFFFFFF8) {
                                                                  unint64_t v429 = 0x1FFFFFFFFFFFFFFFLL;
                                                                }
                                                                else {
                                                                  unint64_t v429 = v428;
                                                                }
                                                                if (v429)
                                                                {
                                                                  v430 = (char *)sub_5714((uint64_t)(v420 + 393), v429);
                                                                  v422 = (char *)v420[392];
                                                                  v425 = (char *)v420[391];
                                                                }
                                                                else
                                                                {
                                                                  v430 = 0;
                                                                }
                                                                v431 = &v430[8 * v426];
                                                                v432 = &v430[8 * v429];
                                                                *(void *)v431 = v421;
                                                                v424 = v431 + 8;
                                                                while (v422 != v425)
                                                                {
                                                                  uint64_t v433 = *((void *)v422 - 1);
                                                                  v422 -= 8;
                                                                  *((void *)v431 - 1) = v433;
                                                                  v431 -= 8;
                                                                }
                                                                v420[391] = v431;
                                                                v420[392] = v424;
                                                                v420[393] = v432;
                                                                if (v425) {
                                                                  operator delete(v425);
                                                                }
                                                              }
                                                              else
                                                              {
                                                                *(void *)v422 = v421;
                                                                v424 = v422 + 8;
                                                              }
                                                              v420[392] = v424;
                                                              if (!*(_DWORD *)(v3 + 48))
                                                              {
                                                                v434 = *(void **)a1[1];
                                                                uint64_t v435 = *(_WORD *)(a1[2] + 34) & 0x1FFF;
                                                                v436 = (char *)v434[395];
                                                                unint64_t v437 = v434[396];
                                                                if ((unint64_t)v436 >= v437)
                                                                {
                                                                  v439 = (char *)v434[394];
                                                                  uint64_t v440 = (v436 - v439) >> 3;
                                                                  if ((unint64_t)(v440 + 1) >> 61) {
                                                                    goto LABEL_543;
                                                                  }
                                                                  unint64_t v441 = v437 - (void)v439;
                                                                  unint64_t v442 = (uint64_t)(v437 - (void)v439) >> 2;
                                                                  if (v442 <= v440 + 1) {
                                                                    unint64_t v442 = v440 + 1;
                                                                  }
                                                                  if (v441 >= 0x7FFFFFFFFFFFFFF8) {
                                                                    unint64_t v443 = 0x1FFFFFFFFFFFFFFFLL;
                                                                  }
                                                                  else {
                                                                    unint64_t v443 = v442;
                                                                  }
                                                                  if (v443)
                                                                  {
                                                                    v444 = (char *)sub_5714((uint64_t)(v434 + 396), v443);
                                                                    v436 = (char *)v434[395];
                                                                    v439 = (char *)v434[394];
                                                                  }
                                                                  else
                                                                  {
                                                                    v444 = 0;
                                                                  }
                                                                  v445 = &v444[8 * v440];
                                                                  v446 = &v444[8 * v443];
                                                                  *(void *)v445 = v435;
                                                                  v438 = v445 + 8;
                                                                  while (v436 != v439)
                                                                  {
                                                                    uint64_t v447 = *((void *)v436 - 1);
                                                                    v436 -= 8;
                                                                    *((void *)v445 - 1) = v447;
                                                                    v445 -= 8;
                                                                  }
                                                                  v434[394] = v445;
                                                                  v434[395] = v438;
                                                                  v434[396] = v446;
                                                                  if (v439) {
                                                                    operator delete(v439);
                                                                  }
                                                                }
                                                                else
                                                                {
                                                                  *(void *)v436 = v435;
                                                                  v438 = v436 + 8;
                                                                }
                                                                v434[395] = v438;
                                                                if (!*(_DWORD *)(v3 + 48))
                                                                {
                                                                  uint64_t v448 = a1[2];
                                                                  v449 = *(void **)a1[1];
                                                                  uint64_t v450 = *(_WORD *)(v448 + 18) & 0x1FFF;
                                                                  v451 = (char *)v449[398];
                                                                  unint64_t v452 = v449[399];
                                                                  if ((unint64_t)v451 < v452)
                                                                  {
                                                                    *(void *)v451 = v450;
                                                                    v453 = v451 + 8;
LABEL_550:
                                                                    v449[398] = v453;
                                                                    goto LABEL_551;
                                                                  }
                                                                  v454 = (char *)v449[397];
                                                                  uint64_t v455 = (v451 - v454) >> 3;
                                                                  if (!((unint64_t)(v455 + 1) >> 61))
                                                                  {
                                                                    unint64_t v456 = v452 - (void)v454;
                                                                    unint64_t v457 = (uint64_t)(v452 - (void)v454) >> 2;
                                                                    if (v457 <= v455 + 1) {
                                                                      unint64_t v457 = v455 + 1;
                                                                    }
                                                                    if (v456 >= 0x7FFFFFFFFFFFFFF8) {
                                                                      unint64_t v458 = 0x1FFFFFFFFFFFFFFFLL;
                                                                    }
                                                                    else {
                                                                      unint64_t v458 = v457;
                                                                    }
                                                                    if (v458)
                                                                    {
                                                                      v459 = (char *)sub_5714((uint64_t)(v449 + 399), v458);
                                                                      v451 = (char *)v449[398];
                                                                      v454 = (char *)v449[397];
                                                                    }
                                                                    else
                                                                    {
                                                                      v459 = 0;
                                                                    }
                                                                    v460 = &v459[8 * v455];
                                                                    v461 = &v459[8 * v458];
                                                                    *(void *)v460 = v450;
                                                                    v453 = v460 + 8;
                                                                    while (v451 != v454)
                                                                    {
                                                                      uint64_t v462 = *((void *)v451 - 1);
                                                                      v451 -= 8;
                                                                      *((void *)v460 - 1) = v462;
                                                                      v460 -= 8;
                                                                    }
                                                                    v449[397] = v460;
                                                                    v449[398] = v453;
                                                                    v449[399] = v461;
                                                                    if (v454) {
                                                                      operator delete(v454);
                                                                    }
                                                                    goto LABEL_550;
                                                                  }
LABEL_543:
                                                                  sub_566C();
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_551:
    *a2 = 1;
    return;
  }
  if (!*(_DWORD *)(v3 + 48))
  {
    uint64_t v11 = (void *)a1[1];
    uint64_t v10 = (_WORD *)a1[2];
    v12 = (void *)*v11;
    *(void *)(v12[305] - 8) += v10[37] & 0x1FFF;
    *(void *)(v12[308] - 8) += v10[29] & 0x1FFF;
    *(void *)(v12[311] - 8) += v10[21] & 0x1FFF;
    *(void *)(v12[314] - 8) += v10[13] & 0x1FFF;
    *(void *)(v12[317] - 8) += v10[38] & 0x1FFF;
    *(void *)(v12[320] - 8) += v10[30] & 0x1FFF;
    *(void *)(v12[323] - 8) += v10[22] & 0x1FFF;
    *(void *)(v12[326] - 8) += v10[14] & 0x1FFF;
    *(void *)(v12[329] - 8) += v10[39] & 0x1FFF;
    *(void *)(v12[332] - 8) += v10[31] & 0x1FFF;
    uint64_t v13 = (_WORD *)a1[2];
    unint64_t v14 = *(void **)a1[1];
    *(void *)(v14[335] - 8) += v13[23] & 0x1FFF;
    *(void *)(v14[338] - 8) += v13[15] & 0x1FFF;
    *(void *)(v14[341] - 8) += v13[34] & 0x1FFF;
    *(void *)(v14[344] - 8) += v13[26] & 0x1FFF;
    *(void *)(v14[347] - 8) += v13[18] & 0x1FFF;
    *(void *)(v14[350] - 8) += v13[10] & 0x1FFF;
    *(void *)(v14[353] - 8) += v13[35] & 0x1FFF;
    *(void *)(v14[356] - 8) += v13[27] & 0x1FFF;
    *(void *)(v14[359] - 8) += v13[19] & 0x1FFF;
    *(void *)(v14[362] - 8) += v13[11] & 0x1FFF;
    unint64_t v15 = (unsigned __int16 *)a1[2];
    unint64_t v16 = *(void **)a1[1];
    *(void *)(v16[365] - 8) += v15[36] & 0x1FFF;
    *(void *)(v16[368] - 8) += v15[28] & 0x1FFF;
    *(void *)(v16[371] - 8) += v15[20] & 0x1FFF;
    *(void *)(v16[374] - 8) += v15[12] & 0x1FFF;
    *(void *)(v16[377] - 8) += v15[32] & 0x1FFF;
    *(void *)(v16[380] - 8) += v15[24] & 0x1FFF;
    *(void *)(v16[383] - 8) += v15[16] & 0x1FFF;
    *(void *)(v16[386] - 8) += ((unint64_t)v15[8] >> 1) & 0x1FFF;
    *(void *)(v16[389] - 8) += v15[33] & 0x1FFF;
    *(void *)(v16[392] - 8) += v15[25] & 0x1FFF;
    uint64_t v17 = a1[2];
    unint64_t v18 = (void *)*v11;
    *(void *)(v18[395] - 8) += *(_WORD *)(v17 + 34) & 0x1FFF;
    *(void *)(v18[398] - 8) += *(_WORD *)(v17 + 18) & 0x1FFF;
  }
}

void sub_5170C(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    if (*(_DWORD *)(v3 + 48)) {
      goto LABEL_125;
    }
    v5 = *(void **)a1[1];
    uint64_t v6 = *(_WORD *)(a1[2] + 34) & 0x7FFF;
    v7 = (char *)v5[284];
    unint64_t v8 = v5[285];
    if ((unint64_t)v7 >= v8)
    {
      v12 = (char *)v5[283];
      uint64_t v13 = (v7 - v12) >> 3;
      if ((unint64_t)(v13 + 1) >> 61) {
        goto LABEL_127;
      }
      unint64_t v14 = v8 - (void)v12;
      unint64_t v15 = (uint64_t)(v8 - (void)v12) >> 2;
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      if (v14 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v15;
      }
      if (v16)
      {
        uint64_t v17 = (char *)sub_5714((uint64_t)(v5 + 285), v16);
        v7 = (char *)v5[284];
        v12 = (char *)v5[283];
      }
      else
      {
        uint64_t v17 = 0;
      }
      unint64_t v18 = &v17[8 * v13];
      unint64_t v19 = &v17[8 * v16];
      *(void *)unint64_t v18 = v6;
      v9 = v18 + 8;
      while (v7 != v12)
      {
        uint64_t v20 = *((void *)v7 - 1);
        v7 -= 8;
        *((void *)v18 - 1) = v20;
        v18 -= 8;
      }
      v5[283] = v18;
      v5[284] = v9;
      v5[285] = v19;
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      *(void *)v7 = v6;
      v9 = v7 + 8;
    }
    v5[284] = v9;
    if (!*(_DWORD *)(v3 + 48))
    {
      unint64_t v21 = *(void **)a1[1];
      uint64_t v22 = *(_WORD *)(a1[2] + 32) & 0x7FFF;
      unint64_t v23 = (char *)v21[287];
      unint64_t v24 = v21[288];
      if ((unint64_t)v23 >= v24)
      {
        v26 = (char *)v21[286];
        uint64_t v27 = (v23 - v26) >> 3;
        if ((unint64_t)(v27 + 1) >> 61) {
          goto LABEL_127;
        }
        unint64_t v28 = v24 - (void)v26;
        unint64_t v29 = (uint64_t)(v24 - (void)v26) >> 2;
        if (v29 <= v27 + 1) {
          unint64_t v29 = v27 + 1;
        }
        if (v28 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v29;
        }
        if (v30)
        {
          unint64_t v31 = (char *)sub_5714((uint64_t)(v21 + 288), v30);
          unint64_t v23 = (char *)v21[287];
          v26 = (char *)v21[286];
        }
        else
        {
          unint64_t v31 = 0;
        }
        unint64_t v32 = &v31[8 * v27];
        unint64_t v33 = &v31[8 * v30];
        *(void *)unint64_t v32 = v22;
        uint64_t v25 = v32 + 8;
        while (v23 != v26)
        {
          uint64_t v34 = *((void *)v23 - 1);
          v23 -= 8;
          *((void *)v32 - 1) = v34;
          v32 -= 8;
        }
        v21[286] = v32;
        v21[287] = v25;
        v21[288] = v33;
        if (v26) {
          operator delete(v26);
        }
      }
      else
      {
        *(void *)unint64_t v23 = v22;
        uint64_t v25 = v23 + 8;
      }
      v21[287] = v25;
      if (!*(_DWORD *)(v3 + 48))
      {
        unint64_t v35 = *(void **)a1[1];
        uint64_t v36 = *(_WORD *)(a1[2] + 30) & 0x7FFF;
        unint64_t v37 = (char *)v35[290];
        unint64_t v38 = v35[291];
        if ((unint64_t)v37 >= v38)
        {
          uint64_t v40 = (char *)v35[289];
          uint64_t v41 = (v37 - v40) >> 3;
          if ((unint64_t)(v41 + 1) >> 61) {
            goto LABEL_127;
          }
          unint64_t v42 = v38 - (void)v40;
          unint64_t v43 = (uint64_t)(v38 - (void)v40) >> 2;
          if (v43 <= v41 + 1) {
            unint64_t v43 = v41 + 1;
          }
          if (v42 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v44 = v43;
          }
          if (v44)
          {
            unint64_t v45 = (char *)sub_5714((uint64_t)(v35 + 291), v44);
            unint64_t v37 = (char *)v35[290];
            uint64_t v40 = (char *)v35[289];
          }
          else
          {
            unint64_t v45 = 0;
          }
          unint64_t v46 = &v45[8 * v41];
          unint64_t v47 = &v45[8 * v44];
          *(void *)unint64_t v46 = v36;
          uint64_t v39 = v46 + 8;
          while (v37 != v40)
          {
            uint64_t v48 = *((void *)v37 - 1);
            v37 -= 8;
            *((void *)v46 - 1) = v48;
            v46 -= 8;
          }
          v35[289] = v46;
          v35[290] = v39;
          v35[291] = v47;
          if (v40) {
            operator delete(v40);
          }
        }
        else
        {
          *(void *)unint64_t v37 = v36;
          uint64_t v39 = v37 + 8;
        }
        v35[290] = v39;
        if (!*(_DWORD *)(v3 + 48))
        {
          unint64_t v49 = *(void **)a1[1];
          uint64_t v50 = (*(void *)(a1[2] + 24) >> 33) & 0x7FFFLL;
          unint64_t v51 = (uint64_t *)v49[293];
          unint64_t v52 = v49[294];
          if ((unint64_t)v51 >= v52)
          {
            v54 = (uint64_t *)v49[292];
            uint64_t v55 = v51 - v54;
            if ((unint64_t)(v55 + 1) >> 61) {
              goto LABEL_127;
            }
            unint64_t v56 = v52 - (void)v54;
            unint64_t v57 = (uint64_t)(v52 - (void)v54) >> 2;
            if (v57 <= v55 + 1) {
              unint64_t v57 = v55 + 1;
            }
            if (v56 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v58 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v58 = v57;
            }
            if (v58)
            {
              unint64_t v59 = (char *)sub_5714((uint64_t)(v49 + 294), v58);
              unint64_t v51 = (uint64_t *)v49[293];
              v54 = (uint64_t *)v49[292];
            }
            else
            {
              unint64_t v59 = 0;
            }
            unint64_t v60 = (uint64_t *)&v59[8 * v55];
            unint64_t v61 = &v59[8 * v58];
            *unint64_t v60 = v50;
            unint64_t v53 = v60 + 1;
            while (v51 != v54)
            {
              uint64_t v62 = *--v51;
              *--unint64_t v60 = v62;
            }
            v49[292] = v60;
            v49[293] = v53;
            v49[294] = v61;
            if (v54) {
              operator delete(v54);
            }
          }
          else
          {
            uint64_t *v51 = v50;
            unint64_t v53 = v51 + 1;
          }
          v49[293] = v53;
          if (!*(_DWORD *)(v3 + 48))
          {
            unint64_t v63 = *(void **)a1[1];
            uint64_t v64 = *(void *)(a1[2] + 24) & 0x1FFFFFFFFLL;
            unint64_t v65 = (uint64_t *)v63[296];
            unint64_t v66 = v63[297];
            if ((unint64_t)v65 >= v66)
            {
              uint64_t v68 = (uint64_t *)v63[295];
              uint64_t v69 = v65 - v68;
              if ((unint64_t)(v69 + 1) >> 61) {
                goto LABEL_127;
              }
              unint64_t v70 = v66 - (void)v68;
              unint64_t v71 = (uint64_t)(v66 - (void)v68) >> 2;
              if (v71 <= v69 + 1) {
                unint64_t v71 = v69 + 1;
              }
              if (v70 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v72 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v72 = v71;
              }
              if (v72)
              {
                unint64_t v73 = (char *)sub_5714((uint64_t)(v63 + 297), v72);
                unint64_t v65 = (uint64_t *)v63[296];
                uint64_t v68 = (uint64_t *)v63[295];
              }
              else
              {
                unint64_t v73 = 0;
              }
              unint64_t v74 = (uint64_t *)&v73[8 * v69];
              unint64_t v75 = &v73[8 * v72];
              uint64_t *v74 = v64;
              uint64_t v67 = v74 + 1;
              while (v65 != v68)
              {
                uint64_t v76 = *--v65;
                *--unint64_t v74 = v76;
              }
              v63[295] = v74;
              v63[296] = v67;
              v63[297] = v75;
              if (v68) {
                operator delete(v68);
              }
            }
            else
            {
              uint64_t *v65 = v64;
              uint64_t v67 = v65 + 1;
            }
            v63[296] = v67;
            if (!*(_DWORD *)(v3 + 48))
            {
              unint64_t v77 = *(void **)a1[1];
              uint64_t v78 = *(_WORD *)(a1[2] + 36) & 0x7FFF;
              unint64_t v79 = (char *)v77[299];
              unint64_t v80 = v77[300];
              if ((unint64_t)v79 >= v80)
              {
                uint64_t v82 = (char *)v77[298];
                uint64_t v83 = (v79 - v82) >> 3;
                if ((unint64_t)(v83 + 1) >> 61) {
                  goto LABEL_127;
                }
                unint64_t v84 = v80 - (void)v82;
                unint64_t v85 = (uint64_t)(v80 - (void)v82) >> 2;
                if (v85 <= v83 + 1) {
                  unint64_t v85 = v83 + 1;
                }
                if (v84 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v86 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v86 = v85;
                }
                if (v86)
                {
                  unint64_t v87 = (char *)sub_5714((uint64_t)(v77 + 300), v86);
                  unint64_t v79 = (char *)v77[299];
                  uint64_t v82 = (char *)v77[298];
                }
                else
                {
                  unint64_t v87 = 0;
                }
                unint64_t v88 = &v87[8 * v83];
                unint64_t v89 = &v87[8 * v86];
                *(void *)unint64_t v88 = v78;
                uint64_t v81 = v88 + 8;
                while (v79 != v82)
                {
                  uint64_t v90 = *((void *)v79 - 1);
                  v79 -= 8;
                  *((void *)v88 - 1) = v90;
                  v88 -= 8;
                }
                v77[298] = v88;
                v77[299] = v81;
                v77[300] = v89;
                if (v82) {
                  operator delete(v82);
                }
              }
              else
              {
                *(void *)unint64_t v79 = v78;
                uint64_t v81 = v79 + 8;
              }
              v77[299] = v81;
              if (!*(_DWORD *)(v3 + 48))
              {
                uint64_t v91 = a1[1];
                uint64_t v92 = a1[2];
                unint64_t v93 = *(void **)v91;
                uint64_t v94 = *(unsigned int *)(v92 + 16);
                uint64_t v95 = *(char **)(*(void *)v91 + 2416);
                unint64_t v96 = *(void *)(*(void *)v91 + 2424);
                if ((unint64_t)v95 < v96)
                {
                  *(void *)uint64_t v95 = v94;
                  uint64_t v97 = v95 + 8;
LABEL_124:
                  v93[302] = v97;
                  goto LABEL_125;
                }
                uint64_t v98 = (char *)v93[301];
                uint64_t v99 = (v95 - v98) >> 3;
                if (!((unint64_t)(v99 + 1) >> 61))
                {
                  unint64_t v100 = v96 - (void)v98;
                  unint64_t v101 = (uint64_t)(v96 - (void)v98) >> 2;
                  if (v101 <= v99 + 1) {
                    unint64_t v101 = v99 + 1;
                  }
                  if (v100 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v102 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v102 = v101;
                  }
                  if (v102)
                  {
                    unint64_t v103 = (char *)sub_5714((uint64_t)(v93 + 303), v102);
                    uint64_t v95 = (char *)v93[302];
                    uint64_t v98 = (char *)v93[301];
                  }
                  else
                  {
                    unint64_t v103 = 0;
                  }
                  uint64_t v104 = &v103[8 * v99];
                  unint64_t v105 = &v103[8 * v102];
                  *(void *)uint64_t v104 = v94;
                  uint64_t v97 = v104 + 8;
                  while (v95 != v98)
                  {
                    uint64_t v106 = *((void *)v95 - 1);
                    v95 -= 8;
                    *((void *)v104 - 1) = v106;
                    v104 -= 8;
                  }
                  v93[301] = v104;
                  v93[302] = v97;
                  v93[303] = v105;
                  if (v98) {
                    operator delete(v98);
                  }
                  goto LABEL_124;
                }
LABEL_127:
                sub_566C();
              }
            }
          }
        }
      }
    }
LABEL_125:
    *a2 = 1;
    return;
  }
  if (!*(_DWORD *)(v3 + 48))
  {
    uint64_t v10 = a1[2];
    uint64_t v11 = *(void **)a1[1];
    *(void *)(v11[284] - 8) += *(_WORD *)(v10 + 34) & 0x7FFF;
    *(void *)(v11[287] - 8) += *(_WORD *)(v10 + 32) & 0x7FFF;
    *(void *)(v11[290] - 8) += *(_WORD *)(v10 + 30) & 0x7FFF;
    *(void *)(v11[293] - 8) += (*(void *)(v10 + 24) >> 33) & 0x7FFFLL;
    *(void *)(v11[296] - 8) += *(void *)(v10 + 24) & 0x1FFFFFFFFLL;
    *(void *)(v11[299] - 8) += *(_WORD *)(v10 + 36) & 0x7FFF;
    *(void *)(v11[302] - 8) += *(unsigned int *)(v10 + 16);
  }
}

void sub_51DAC(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    if (*(_DWORD *)(v3 + 48)) {
      goto LABEL_40;
    }
    v5 = *(void **)a1[1];
    uint64_t v6 = *(_WORD *)(a1[2] + 18) & 0x7FFF;
    v7 = (char *)v5[278];
    unint64_t v8 = v5[279];
    if ((unint64_t)v7 >= v8)
    {
      v12 = (char *)v5[277];
      uint64_t v13 = (v7 - v12) >> 3;
      if ((unint64_t)(v13 + 1) >> 61) {
        goto LABEL_42;
      }
      unint64_t v14 = v8 - (void)v12;
      unint64_t v15 = (uint64_t)(v8 - (void)v12) >> 2;
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      if (v14 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v15;
      }
      if (v16)
      {
        uint64_t v17 = (char *)sub_5714((uint64_t)(v5 + 279), v16);
        v7 = (char *)v5[278];
        v12 = (char *)v5[277];
      }
      else
      {
        uint64_t v17 = 0;
      }
      unint64_t v18 = &v17[8 * v13];
      unint64_t v19 = &v17[8 * v16];
      *(void *)unint64_t v18 = v6;
      v9 = v18 + 8;
      while (v7 != v12)
      {
        uint64_t v20 = *((void *)v7 - 1);
        v7 -= 8;
        *((void *)v18 - 1) = v20;
        v18 -= 8;
      }
      v5[277] = v18;
      v5[278] = v9;
      v5[279] = v19;
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      *(void *)v7 = v6;
      v9 = v7 + 8;
    }
    v5[278] = v9;
    if (*(_DWORD *)(v3 + 48))
    {
LABEL_40:
      *a2 = 1;
      return;
    }
    uint64_t v21 = a1[2];
    uint64_t v22 = *(void **)a1[1];
    uint64_t v23 = *(_WORD *)(v21 + 16) & 0x7FFF;
    unint64_t v24 = (char *)v22[281];
    unint64_t v25 = v22[282];
    if ((unint64_t)v24 < v25)
    {
      *(void *)unint64_t v24 = v23;
      v26 = v24 + 8;
LABEL_39:
      v22[281] = v26;
      goto LABEL_40;
    }
    uint64_t v27 = (char *)v22[280];
    uint64_t v28 = (v24 - v27) >> 3;
    if (!((unint64_t)(v28 + 1) >> 61))
    {
      unint64_t v29 = v25 - (void)v27;
      unint64_t v30 = (uint64_t)(v25 - (void)v27) >> 2;
      if (v30 <= v28 + 1) {
        unint64_t v30 = v28 + 1;
      }
      if (v29 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v31 = v30;
      }
      if (v31)
      {
        unint64_t v32 = (char *)sub_5714((uint64_t)(v22 + 282), v31);
        unint64_t v24 = (char *)v22[281];
        uint64_t v27 = (char *)v22[280];
      }
      else
      {
        unint64_t v32 = 0;
      }
      unint64_t v33 = &v32[8 * v28];
      uint64_t v34 = &v32[8 * v31];
      *(void *)unint64_t v33 = v23;
      v26 = v33 + 8;
      while (v24 != v27)
      {
        uint64_t v35 = *((void *)v24 - 1);
        v24 -= 8;
        *((void *)v33 - 1) = v35;
        v33 -= 8;
      }
      v22[280] = v33;
      v22[281] = v26;
      v22[282] = v34;
      if (v27) {
        operator delete(v27);
      }
      goto LABEL_39;
    }
LABEL_42:
    sub_566C();
  }
  if (!*(_DWORD *)(v3 + 48))
  {
    uint64_t v10 = a1[2];
    uint64_t v11 = *(void *)a1[1];
    *(void *)(*(void *)(v11 + 2224) - 8) += *(_WORD *)(v10 + 18) & 0x7FFF;
    *(void *)(*(void *)(v11 + 2248) - 8) += *(_WORD *)(v10 + 16) & 0x7FFF;
  }
}

void sub_51FE0(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    if (*(_DWORD *)(v3 + 48)) {
      goto LABEL_142;
    }
    v5 = *(void **)a1[1];
    uint64_t v6 = *(_WORD *)(a1[2] + 16) & 0x7FFF;
    v7 = (char *)v5[458];
    unint64_t v8 = v5[459];
    if ((unint64_t)v7 >= v8)
    {
      v12 = (char *)v5[457];
      uint64_t v13 = (v7 - v12) >> 3;
      if ((unint64_t)(v13 + 1) >> 61) {
        goto LABEL_144;
      }
      unint64_t v14 = v8 - (void)v12;
      unint64_t v15 = (uint64_t)(v8 - (void)v12) >> 2;
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      if (v14 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v15;
      }
      if (v16)
      {
        uint64_t v17 = (char *)sub_5714((uint64_t)(v5 + 459), v16);
        v7 = (char *)v5[458];
        v12 = (char *)v5[457];
      }
      else
      {
        uint64_t v17 = 0;
      }
      unint64_t v18 = &v17[8 * v13];
      unint64_t v19 = &v17[8 * v16];
      *(void *)unint64_t v18 = v6;
      v9 = v18 + 8;
      while (v7 != v12)
      {
        uint64_t v20 = *((void *)v7 - 1);
        v7 -= 8;
        *((void *)v18 - 1) = v20;
        v18 -= 8;
      }
      v5[457] = v18;
      v5[458] = v9;
      v5[459] = v19;
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      *(void *)v7 = v6;
      v9 = v7 + 8;
    }
    v5[458] = v9;
    if (!*(_DWORD *)(v3 + 48))
    {
      uint64_t v21 = *(void **)a1[1];
      uint64_t v22 = *(_DWORD *)(a1[2] + 32) & 0x1FFFFLL;
      uint64_t v23 = (uint64_t *)v21[461];
      unint64_t v24 = v21[462];
      if ((unint64_t)v23 >= v24)
      {
        v26 = (uint64_t *)v21[460];
        uint64_t v27 = v23 - v26;
        if ((unint64_t)(v27 + 1) >> 61) {
          goto LABEL_144;
        }
        unint64_t v28 = v24 - (void)v26;
        unint64_t v29 = (uint64_t)(v24 - (void)v26) >> 2;
        if (v29 <= v27 + 1) {
          unint64_t v29 = v27 + 1;
        }
        if (v28 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v29;
        }
        if (v30)
        {
          unint64_t v31 = (char *)sub_5714((uint64_t)(v21 + 462), v30);
          uint64_t v23 = (uint64_t *)v21[461];
          v26 = (uint64_t *)v21[460];
        }
        else
        {
          unint64_t v31 = 0;
        }
        unint64_t v32 = (uint64_t *)&v31[8 * v27];
        unint64_t v33 = &v31[8 * v30];
        *unint64_t v32 = v22;
        unint64_t v25 = v32 + 1;
        while (v23 != v26)
        {
          uint64_t v34 = *--v23;
          *--unint64_t v32 = v34;
        }
        v21[460] = v32;
        v21[461] = v25;
        v21[462] = v33;
        if (v26) {
          operator delete(v26);
        }
      }
      else
      {
        *uint64_t v23 = v22;
        unint64_t v25 = v23 + 1;
      }
      v21[461] = v25;
      if (!*(_DWORD *)(v3 + 48))
      {
        uint64_t v35 = *(void **)a1[1];
        uint64_t v36 = *(_WORD *)(a1[2] + 18) & 0x7FFF;
        unint64_t v37 = (char *)v35[464];
        unint64_t v38 = v35[465];
        if ((unint64_t)v37 >= v38)
        {
          uint64_t v40 = (char *)v35[463];
          uint64_t v41 = (v37 - v40) >> 3;
          if ((unint64_t)(v41 + 1) >> 61) {
            goto LABEL_144;
          }
          unint64_t v42 = v38 - (void)v40;
          unint64_t v43 = (uint64_t)(v38 - (void)v40) >> 2;
          if (v43 <= v41 + 1) {
            unint64_t v43 = v41 + 1;
          }
          if (v42 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v44 = v43;
          }
          if (v44)
          {
            unint64_t v45 = (char *)sub_5714((uint64_t)(v35 + 465), v44);
            unint64_t v37 = (char *)v35[464];
            uint64_t v40 = (char *)v35[463];
          }
          else
          {
            unint64_t v45 = 0;
          }
          unint64_t v46 = &v45[8 * v41];
          unint64_t v47 = &v45[8 * v44];
          *(void *)unint64_t v46 = v36;
          uint64_t v39 = v46 + 8;
          while (v37 != v40)
          {
            uint64_t v48 = *((void *)v37 - 1);
            v37 -= 8;
            *((void *)v46 - 1) = v48;
            v46 -= 8;
          }
          v35[463] = v46;
          v35[464] = v39;
          v35[465] = v47;
          if (v40) {
            operator delete(v40);
          }
        }
        else
        {
          *(void *)unint64_t v37 = v36;
          uint64_t v39 = v37 + 8;
        }
        v35[464] = v39;
        if (!*(_DWORD *)(v3 + 48))
        {
          unint64_t v49 = *(void **)a1[1];
          uint64_t v50 = *(_DWORD *)(a1[2] + 28) & 0x3FFFFLL;
          unint64_t v51 = (uint64_t *)v49[467];
          unint64_t v52 = v49[468];
          if ((unint64_t)v51 >= v52)
          {
            v54 = (uint64_t *)v49[466];
            uint64_t v55 = v51 - v54;
            if ((unint64_t)(v55 + 1) >> 61) {
              goto LABEL_144;
            }
            unint64_t v56 = v52 - (void)v54;
            unint64_t v57 = (uint64_t)(v52 - (void)v54) >> 2;
            if (v57 <= v55 + 1) {
              unint64_t v57 = v55 + 1;
            }
            if (v56 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v58 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v58 = v57;
            }
            if (v58)
            {
              unint64_t v59 = (char *)sub_5714((uint64_t)(v49 + 468), v58);
              unint64_t v51 = (uint64_t *)v49[467];
              v54 = (uint64_t *)v49[466];
            }
            else
            {
              unint64_t v59 = 0;
            }
            unint64_t v60 = (uint64_t *)&v59[8 * v55];
            unint64_t v61 = &v59[8 * v58];
            *unint64_t v60 = v50;
            unint64_t v53 = v60 + 1;
            while (v51 != v54)
            {
              uint64_t v62 = *--v51;
              *--unint64_t v60 = v62;
            }
            v49[466] = v60;
            v49[467] = v53;
            v49[468] = v61;
            if (v54) {
              operator delete(v54);
            }
          }
          else
          {
            uint64_t *v51 = v50;
            unint64_t v53 = v51 + 1;
          }
          v49[467] = v53;
          if (!*(_DWORD *)(v3 + 48))
          {
            unint64_t v63 = *(void **)a1[1];
            uint64_t v64 = *(_DWORD *)(a1[2] + 24) & 0x3FFFFLL;
            unint64_t v65 = (uint64_t *)v63[470];
            unint64_t v66 = v63[471];
            if ((unint64_t)v65 >= v66)
            {
              uint64_t v68 = (uint64_t *)v63[469];
              uint64_t v69 = v65 - v68;
              if ((unint64_t)(v69 + 1) >> 61) {
                goto LABEL_144;
              }
              unint64_t v70 = v66 - (void)v68;
              unint64_t v71 = (uint64_t)(v66 - (void)v68) >> 2;
              if (v71 <= v69 + 1) {
                unint64_t v71 = v69 + 1;
              }
              if (v70 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v72 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v72 = v71;
              }
              if (v72)
              {
                unint64_t v73 = (char *)sub_5714((uint64_t)(v63 + 471), v72);
                unint64_t v65 = (uint64_t *)v63[470];
                uint64_t v68 = (uint64_t *)v63[469];
              }
              else
              {
                unint64_t v73 = 0;
              }
              unint64_t v74 = (uint64_t *)&v73[8 * v69];
              unint64_t v75 = &v73[8 * v72];
              uint64_t *v74 = v64;
              uint64_t v67 = v74 + 1;
              while (v65 != v68)
              {
                uint64_t v76 = *--v65;
                *--unint64_t v74 = v76;
              }
              v63[469] = v74;
              v63[470] = v67;
              v63[471] = v75;
              if (v68) {
                operator delete(v68);
              }
            }
            else
            {
              uint64_t *v65 = v64;
              uint64_t v67 = v65 + 1;
            }
            v63[470] = v67;
            if (!*(_DWORD *)(v3 + 48))
            {
              uint64_t v77 = a1[1];
              uint64_t v78 = *(void **)v77;
              uint64_t v79 = *(unsigned __int16 *)(a1[2] + 38);
              unint64_t v80 = *(char **)(*(void *)v77 + 3784);
              unint64_t v81 = *(void *)(*(void *)v77 + 3792);
              if ((unint64_t)v80 >= v81)
              {
                uint64_t v83 = (char *)v78[472];
                uint64_t v84 = (v80 - v83) >> 3;
                if ((unint64_t)(v84 + 1) >> 61) {
                  goto LABEL_144;
                }
                unint64_t v85 = v81 - (void)v83;
                unint64_t v86 = (uint64_t)(v81 - (void)v83) >> 2;
                if (v86 <= v84 + 1) {
                  unint64_t v86 = v84 + 1;
                }
                if (v85 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v87 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v87 = v86;
                }
                if (v87)
                {
                  unint64_t v88 = (char *)sub_5714((uint64_t)(v78 + 474), v87);
                  unint64_t v80 = (char *)v78[473];
                  uint64_t v83 = (char *)v78[472];
                }
                else
                {
                  unint64_t v88 = 0;
                }
                unint64_t v89 = &v88[8 * v84];
                uint64_t v90 = &v88[8 * v87];
                *(void *)unint64_t v89 = v79;
                uint64_t v82 = v89 + 8;
                while (v80 != v83)
                {
                  uint64_t v91 = *((void *)v80 - 1);
                  v80 -= 8;
                  *((void *)v89 - 1) = v91;
                  v89 -= 8;
                }
                v78[472] = v89;
                v78[473] = v82;
                v78[474] = v90;
                if (v83) {
                  operator delete(v83);
                }
              }
              else
              {
                *(void *)unint64_t v80 = v79;
                uint64_t v82 = v80 + 8;
              }
              v78[473] = v82;
              if (!*(_DWORD *)(v3 + 48))
              {
                uint64_t v92 = a1[1];
                unint64_t v93 = *(void **)v92;
                uint64_t v94 = *(unsigned __int16 *)(a1[2] + 36);
                uint64_t v95 = *(char **)(*(void *)v92 + 3808);
                unint64_t v96 = *(void *)(*(void *)v92 + 3816);
                if ((unint64_t)v95 >= v96)
                {
                  uint64_t v98 = (char *)v93[475];
                  uint64_t v99 = (v95 - v98) >> 3;
                  if ((unint64_t)(v99 + 1) >> 61) {
                    goto LABEL_144;
                  }
                  unint64_t v100 = v96 - (void)v98;
                  unint64_t v101 = (uint64_t)(v96 - (void)v98) >> 2;
                  if (v101 <= v99 + 1) {
                    unint64_t v101 = v99 + 1;
                  }
                  if (v100 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v102 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v102 = v101;
                  }
                  if (v102)
                  {
                    unint64_t v103 = (char *)sub_5714((uint64_t)(v93 + 477), v102);
                    uint64_t v95 = (char *)v93[476];
                    uint64_t v98 = (char *)v93[475];
                  }
                  else
                  {
                    unint64_t v103 = 0;
                  }
                  uint64_t v104 = &v103[8 * v99];
                  unint64_t v105 = &v103[8 * v102];
                  *(void *)uint64_t v104 = v94;
                  uint64_t v97 = v104 + 8;
                  while (v95 != v98)
                  {
                    uint64_t v106 = *((void *)v95 - 1);
                    v95 -= 8;
                    *((void *)v104 - 1) = v106;
                    v104 -= 8;
                  }
                  v93[475] = v104;
                  v93[476] = v97;
                  v93[477] = v105;
                  if (v98) {
                    operator delete(v98);
                  }
                }
                else
                {
                  *(void *)uint64_t v95 = v94;
                  uint64_t v97 = v95 + 8;
                }
                v93[476] = v97;
                if (!*(_DWORD *)(v3 + 48))
                {
                  uint64_t v107 = a1[1];
                  uint64_t v108 = a1[2];
                  uint64_t v109 = *(void **)v107;
                  uint64_t v110 = *(unsigned __int16 *)(v108 + 20);
                  uint64_t v111 = *(char **)(*(void *)v107 + 3832);
                  unint64_t v112 = *(void *)(*(void *)v107 + 3840);
                  if ((unint64_t)v111 < v112)
                  {
                    *(void *)uint64_t v111 = v110;
                    uint64_t v113 = v111 + 8;
LABEL_141:
                    v109[479] = v113;
                    goto LABEL_142;
                  }
                  uint64_t v114 = (char *)v109[478];
                  uint64_t v115 = (v111 - v114) >> 3;
                  if (!((unint64_t)(v115 + 1) >> 61))
                  {
                    unint64_t v116 = v112 - (void)v114;
                    unint64_t v117 = (uint64_t)(v112 - (void)v114) >> 2;
                    if (v117 <= v115 + 1) {
                      unint64_t v117 = v115 + 1;
                    }
                    if (v116 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v118 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v118 = v117;
                    }
                    if (v118)
                    {
                      unint64_t v119 = (char *)sub_5714((uint64_t)(v109 + 480), v118);
                      uint64_t v111 = (char *)v109[479];
                      uint64_t v114 = (char *)v109[478];
                    }
                    else
                    {
                      unint64_t v119 = 0;
                    }
                    unint64_t v120 = &v119[8 * v115];
                    unint64_t v121 = &v119[8 * v118];
                    *(void *)unint64_t v120 = v110;
                    uint64_t v113 = v120 + 8;
                    while (v111 != v114)
                    {
                      uint64_t v122 = *((void *)v111 - 1);
                      v111 -= 8;
                      *((void *)v120 - 1) = v122;
                      v120 -= 8;
                    }
                    v109[478] = v120;
                    v109[479] = v113;
                    v109[480] = v121;
                    if (v114) {
                      operator delete(v114);
                    }
                    goto LABEL_141;
                  }
LABEL_144:
                  sub_566C();
                }
              }
            }
          }
        }
      }
    }
LABEL_142:
    *a2 = 1;
    return;
  }
  if (!*(_DWORD *)(v3 + 48))
  {
    uint64_t v10 = a1[2];
    uint64_t v11 = *(void **)a1[1];
    *(void *)(v11[458] - 8) += *(_WORD *)(v10 + 16) & 0x7FFF;
    *(void *)(v11[461] - 8) += *(_DWORD *)(v10 + 32) & 0x1FFFF;
    *(void *)(v11[464] - 8) += *(_WORD *)(v10 + 18) & 0x7FFF;
    *(void *)(v11[467] - 8) += *(_DWORD *)(v10 + 28) & 0x3FFFF;
    *(void *)(v11[470] - 8) += *(_DWORD *)(v10 + 24) & 0x3FFFF;
    *(void *)(v11[473] - 8) += *(unsigned __int16 *)(v10 + 38);
    *(void *)(v11[476] - 8) += *(unsigned __int16 *)(v10 + 36);
    *(void *)(v11[479] - 8) += *(unsigned __int16 *)(v10 + 20);
  }
}

void sub_52754(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    if (*(_DWORD *)(v3 + 48)) {
      goto LABEL_262;
    }
    v5 = *(void **)a1[1];
    unint64_t v6 = (unint64_t)*(unsigned int *)(a1[2] + 32) >> 17;
    v7 = (unint64_t *)v5[401];
    unint64_t v8 = v5[402];
    if ((unint64_t)v7 >= v8)
    {
      unint64_t v16 = (unint64_t *)v5[400];
      uint64_t v17 = v7 - v16;
      if ((unint64_t)(v17 + 1) >> 61) {
        goto LABEL_254;
      }
      unint64_t v18 = v8 - (void)v16;
      unint64_t v19 = (uint64_t)(v8 - (void)v16) >> 2;
      if (v19 <= v17 + 1) {
        unint64_t v19 = v17 + 1;
      }
      if (v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v20 = v19;
      }
      if (v20)
      {
        uint64_t v21 = (char *)sub_5714((uint64_t)(v5 + 402), v20);
        v7 = (unint64_t *)v5[401];
        unint64_t v16 = (unint64_t *)v5[400];
      }
      else
      {
        uint64_t v21 = 0;
      }
      uint64_t v22 = (unint64_t *)&v21[8 * v17];
      uint64_t v23 = &v21[8 * v20];
      unint64_t *v22 = v6;
      v9 = v22 + 1;
      while (v7 != v16)
      {
        unint64_t v24 = *--v7;
        *--uint64_t v22 = v24;
      }
      v5[400] = v22;
      v5[401] = v9;
      v5[402] = v23;
      if (v16) {
        operator delete(v16);
      }
    }
    else
    {
      unint64_t *v7 = v6;
      v9 = v7 + 1;
    }
    v5[401] = v9;
    if (!*(_DWORD *)(v3 + 48))
    {
      unint64_t v25 = *(void **)a1[1];
      uint64_t v26 = *(_DWORD *)(a1[2] + 32) & 0x1FFFFLL;
      uint64_t v27 = (uint64_t *)v25[404];
      unint64_t v28 = v25[405];
      if ((unint64_t)v27 >= v28)
      {
        unint64_t v30 = (uint64_t *)v25[403];
        uint64_t v31 = v27 - v30;
        if ((unint64_t)(v31 + 1) >> 61) {
          goto LABEL_254;
        }
        unint64_t v32 = v28 - (void)v30;
        unint64_t v33 = (uint64_t)(v28 - (void)v30) >> 2;
        if (v33 <= v31 + 1) {
          unint64_t v33 = v31 + 1;
        }
        if (v32 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v34 = v33;
        }
        if (v34)
        {
          uint64_t v35 = (char *)sub_5714((uint64_t)(v25 + 405), v34);
          uint64_t v27 = (uint64_t *)v25[404];
          unint64_t v30 = (uint64_t *)v25[403];
        }
        else
        {
          uint64_t v35 = 0;
        }
        uint64_t v36 = (uint64_t *)&v35[8 * v31];
        unint64_t v37 = &v35[8 * v34];
        uint64_t *v36 = v26;
        unint64_t v29 = v36 + 1;
        while (v27 != v30)
        {
          uint64_t v38 = *--v27;
          *--uint64_t v36 = v38;
        }
        v25[403] = v36;
        v25[404] = v29;
        v25[405] = v37;
        if (v30) {
          operator delete(v30);
        }
      }
      else
      {
        *uint64_t v27 = v26;
        unint64_t v29 = v27 + 1;
      }
      v25[404] = v29;
      if (!*(_DWORD *)(v3 + 48))
      {
        uint64_t v39 = *(void **)a1[1];
        uint64_t v40 = *(_WORD *)(a1[2] + 20) & 0x7FFF;
        uint64_t v41 = (char *)v39[407];
        unint64_t v42 = v39[408];
        if ((unint64_t)v41 >= v42)
        {
          unint64_t v44 = (char *)v39[406];
          uint64_t v45 = (v41 - v44) >> 3;
          if ((unint64_t)(v45 + 1) >> 61) {
            goto LABEL_254;
          }
          unint64_t v46 = v42 - (void)v44;
          unint64_t v47 = (uint64_t)(v42 - (void)v44) >> 2;
          if (v47 <= v45 + 1) {
            unint64_t v47 = v45 + 1;
          }
          if (v46 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v48 = v47;
          }
          if (v48)
          {
            unint64_t v49 = (char *)sub_5714((uint64_t)(v39 + 408), v48);
            uint64_t v41 = (char *)v39[407];
            unint64_t v44 = (char *)v39[406];
          }
          else
          {
            unint64_t v49 = 0;
          }
          uint64_t v50 = &v49[8 * v45];
          unint64_t v51 = &v49[8 * v48];
          *(void *)uint64_t v50 = v40;
          unint64_t v43 = v50 + 8;
          while (v41 != v44)
          {
            uint64_t v52 = *((void *)v41 - 1);
            v41 -= 8;
            *((void *)v50 - 1) = v52;
            v50 -= 8;
          }
          v39[406] = v50;
          v39[407] = v43;
          v39[408] = v51;
          if (v44) {
            operator delete(v44);
          }
        }
        else
        {
          *(void *)uint64_t v41 = v40;
          unint64_t v43 = v41 + 8;
        }
        v39[407] = v43;
        if (!*(_DWORD *)(v3 + 48))
        {
          unint64_t v53 = *(void **)a1[1];
          uint64_t v54 = *(_WORD *)(a1[2] + 22) & 0x7FFF;
          uint64_t v55 = (char *)v53[410];
          unint64_t v56 = v53[411];
          if ((unint64_t)v55 >= v56)
          {
            unint64_t v58 = (char *)v53[409];
            uint64_t v59 = (v55 - v58) >> 3;
            if ((unint64_t)(v59 + 1) >> 61) {
              goto LABEL_254;
            }
            unint64_t v60 = v56 - (void)v58;
            unint64_t v61 = (uint64_t)(v56 - (void)v58) >> 2;
            if (v61 <= v59 + 1) {
              unint64_t v61 = v59 + 1;
            }
            if (v60 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v62 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v62 = v61;
            }
            if (v62)
            {
              unint64_t v63 = (char *)sub_5714((uint64_t)(v53 + 411), v62);
              uint64_t v55 = (char *)v53[410];
              unint64_t v58 = (char *)v53[409];
            }
            else
            {
              unint64_t v63 = 0;
            }
            uint64_t v64 = &v63[8 * v59];
            unint64_t v65 = &v63[8 * v62];
            *(void *)uint64_t v64 = v54;
            unint64_t v57 = v64 + 8;
            while (v55 != v58)
            {
              uint64_t v66 = *((void *)v55 - 1);
              v55 -= 8;
              *((void *)v64 - 1) = v66;
              v64 -= 8;
            }
            v53[409] = v64;
            v53[410] = v57;
            v53[411] = v65;
            if (v58) {
              operator delete(v58);
            }
          }
          else
          {
            *(void *)uint64_t v55 = v54;
            unint64_t v57 = v55 + 8;
          }
          v53[410] = v57;
          if (!*(_DWORD *)(v3 + 48))
          {
            uint64_t v67 = *(void **)a1[1];
            uint64_t v68 = *(_WORD *)(a1[2] + 16) & 0x7FFF;
            uint64_t v69 = (char *)v67[413];
            unint64_t v70 = v67[414];
            if ((unint64_t)v69 >= v70)
            {
              unint64_t v72 = (char *)v67[412];
              uint64_t v73 = (v69 - v72) >> 3;
              if ((unint64_t)(v73 + 1) >> 61) {
                goto LABEL_254;
              }
              unint64_t v74 = v70 - (void)v72;
              unint64_t v75 = (uint64_t)(v70 - (void)v72) >> 2;
              if (v75 <= v73 + 1) {
                unint64_t v75 = v73 + 1;
              }
              if (v74 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v76 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v76 = v75;
              }
              if (v76)
              {
                uint64_t v77 = (char *)sub_5714((uint64_t)(v67 + 414), v76);
                uint64_t v69 = (char *)v67[413];
                unint64_t v72 = (char *)v67[412];
              }
              else
              {
                uint64_t v77 = 0;
              }
              uint64_t v78 = &v77[8 * v73];
              uint64_t v79 = &v77[8 * v76];
              *(void *)uint64_t v78 = v68;
              unint64_t v71 = v78 + 8;
              while (v69 != v72)
              {
                uint64_t v80 = *((void *)v69 - 1);
                v69 -= 8;
                *((void *)v78 - 1) = v80;
                v78 -= 8;
              }
              v67[412] = v78;
              v67[413] = v71;
              v67[414] = v79;
              if (v72) {
                operator delete(v72);
              }
            }
            else
            {
              *(void *)uint64_t v69 = v68;
              unint64_t v71 = v69 + 8;
            }
            v67[413] = v71;
            if (!*(_DWORD *)(v3 + 48))
            {
              unint64_t v81 = *(void **)a1[1];
              uint64_t v82 = *(_WORD *)(a1[2] + 18) & 0x7FFF;
              uint64_t v83 = (char *)v81[416];
              unint64_t v84 = v81[417];
              if ((unint64_t)v83 >= v84)
              {
                unint64_t v86 = (char *)v81[415];
                uint64_t v87 = (v83 - v86) >> 3;
                if ((unint64_t)(v87 + 1) >> 61) {
                  goto LABEL_254;
                }
                unint64_t v88 = v84 - (void)v86;
                unint64_t v89 = (uint64_t)(v84 - (void)v86) >> 2;
                if (v89 <= v87 + 1) {
                  unint64_t v89 = v87 + 1;
                }
                if (v88 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v90 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v90 = v89;
                }
                if (v90)
                {
                  uint64_t v91 = (char *)sub_5714((uint64_t)(v81 + 417), v90);
                  uint64_t v83 = (char *)v81[416];
                  unint64_t v86 = (char *)v81[415];
                }
                else
                {
                  uint64_t v91 = 0;
                }
                uint64_t v92 = &v91[8 * v87];
                unint64_t v93 = &v91[8 * v90];
                *(void *)uint64_t v92 = v82;
                unint64_t v85 = v92 + 8;
                while (v83 != v86)
                {
                  uint64_t v94 = *((void *)v83 - 1);
                  v83 -= 8;
                  *((void *)v92 - 1) = v94;
                  v92 -= 8;
                }
                v81[415] = v92;
                v81[416] = v85;
                v81[417] = v93;
                if (v86) {
                  operator delete(v86);
                }
              }
              else
              {
                *(void *)uint64_t v83 = v82;
                unint64_t v85 = v83 + 8;
              }
              v81[416] = v85;
              if (!*(_DWORD *)(v3 + 48))
              {
                uint64_t v95 = a1[1];
                unint64_t v96 = *(void **)v95;
                uint64_t v97 = *(unsigned __int16 *)(a1[2] + 52);
                uint64_t v98 = *(char **)(*(void *)v95 + 3352);
                unint64_t v99 = *(void *)(*(void *)v95 + 3360);
                if ((unint64_t)v98 >= v99)
                {
                  unint64_t v101 = (char *)v96[418];
                  uint64_t v102 = (v98 - v101) >> 3;
                  if ((unint64_t)(v102 + 1) >> 61) {
                    goto LABEL_254;
                  }
                  unint64_t v103 = v99 - (void)v101;
                  unint64_t v104 = (uint64_t)(v99 - (void)v101) >> 2;
                  if (v104 <= v102 + 1) {
                    unint64_t v104 = v102 + 1;
                  }
                  if (v103 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v105 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v105 = v104;
                  }
                  if (v105)
                  {
                    uint64_t v106 = (char *)sub_5714((uint64_t)(v96 + 420), v105);
                    uint64_t v98 = (char *)v96[419];
                    unint64_t v101 = (char *)v96[418];
                  }
                  else
                  {
                    uint64_t v106 = 0;
                  }
                  uint64_t v107 = &v106[8 * v102];
                  uint64_t v108 = &v106[8 * v105];
                  *(void *)uint64_t v107 = v97;
                  unint64_t v100 = v107 + 8;
                  while (v98 != v101)
                  {
                    uint64_t v109 = *((void *)v98 - 1);
                    v98 -= 8;
                    *((void *)v107 - 1) = v109;
                    v107 -= 8;
                  }
                  v96[418] = v107;
                  v96[419] = v100;
                  v96[420] = v108;
                  if (v101) {
                    operator delete(v101);
                  }
                }
                else
                {
                  *(void *)uint64_t v98 = v97;
                  unint64_t v100 = v98 + 8;
                }
                v96[419] = v100;
                if (!*(_DWORD *)(v3 + 48))
                {
                  uint64_t v110 = *(void **)a1[1];
                  uint64_t v111 = *(_DWORD *)(a1[2] + 44) & 0x1FFFFLL;
                  unint64_t v112 = (uint64_t *)v110[422];
                  unint64_t v113 = v110[423];
                  if ((unint64_t)v112 >= v113)
                  {
                    uint64_t v115 = (uint64_t *)v110[421];
                    uint64_t v116 = v112 - v115;
                    if ((unint64_t)(v116 + 1) >> 61) {
                      goto LABEL_254;
                    }
                    unint64_t v117 = v113 - (void)v115;
                    unint64_t v118 = (uint64_t)(v113 - (void)v115) >> 2;
                    if (v118 <= v116 + 1) {
                      unint64_t v118 = v116 + 1;
                    }
                    if (v117 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v119 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v119 = v118;
                    }
                    if (v119)
                    {
                      unint64_t v120 = (char *)sub_5714((uint64_t)(v110 + 423), v119);
                      unint64_t v112 = (uint64_t *)v110[422];
                      uint64_t v115 = (uint64_t *)v110[421];
                    }
                    else
                    {
                      unint64_t v120 = 0;
                    }
                    unint64_t v121 = (uint64_t *)&v120[8 * v116];
                    uint64_t v122 = &v120[8 * v119];
                    *unint64_t v121 = v111;
                    uint64_t v114 = v121 + 1;
                    while (v112 != v115)
                    {
                      uint64_t v123 = *--v112;
                      *--unint64_t v121 = v123;
                    }
                    v110[421] = v121;
                    v110[422] = v114;
                    v110[423] = v122;
                    if (v115) {
                      operator delete(v115);
                    }
                  }
                  else
                  {
                    *unint64_t v112 = v111;
                    uint64_t v114 = v112 + 1;
                  }
                  v110[422] = v114;
                  if (!*(_DWORD *)(v3 + 48))
                  {
                    unint64_t v124 = *(void **)a1[1];
                    uint64_t v125 = *(_DWORD *)(a1[2] + 40) & 0x1FFFFLL;
                    v126 = (uint64_t *)v124[425];
                    unint64_t v127 = v124[426];
                    if ((unint64_t)v126 >= v127)
                    {
                      unint64_t v129 = (uint64_t *)v124[424];
                      uint64_t v130 = v126 - v129;
                      if ((unint64_t)(v130 + 1) >> 61) {
                        goto LABEL_254;
                      }
                      unint64_t v131 = v127 - (void)v129;
                      unint64_t v132 = (uint64_t)(v127 - (void)v129) >> 2;
                      if (v132 <= v130 + 1) {
                        unint64_t v132 = v130 + 1;
                      }
                      if (v131 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v133 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v133 = v132;
                      }
                      if (v133)
                      {
                        unint64_t v134 = (char *)sub_5714((uint64_t)(v124 + 426), v133);
                        v126 = (uint64_t *)v124[425];
                        unint64_t v129 = (uint64_t *)v124[424];
                      }
                      else
                      {
                        unint64_t v134 = 0;
                      }
                      unint64_t v135 = (uint64_t *)&v134[8 * v130];
                      unint64_t v136 = &v134[8 * v133];
                      *unint64_t v135 = v125;
                      uint64_t v128 = v135 + 1;
                      while (v126 != v129)
                      {
                        uint64_t v137 = *--v126;
                        *--unint64_t v135 = v137;
                      }
                      v124[424] = v135;
                      v124[425] = v128;
                      v124[426] = v136;
                      if (v129) {
                        operator delete(v129);
                      }
                    }
                    else
                    {
                      uint64_t *v126 = v125;
                      uint64_t v128 = v126 + 1;
                    }
                    v124[425] = v128;
                    if (!*(_DWORD *)(v3 + 48))
                    {
                      unint64_t v138 = *(void **)a1[1];
                      uint64_t v139 = *(_DWORD *)(a1[2] + 48) & 0x1FFFFLL;
                      v140 = (uint64_t *)v138[428];
                      unint64_t v141 = v138[429];
                      if ((unint64_t)v140 >= v141)
                      {
                        unint64_t v143 = (uint64_t *)v138[427];
                        uint64_t v144 = v140 - v143;
                        if ((unint64_t)(v144 + 1) >> 61) {
                          goto LABEL_254;
                        }
                        unint64_t v145 = v141 - (void)v143;
                        unint64_t v146 = (uint64_t)(v141 - (void)v143) >> 2;
                        if (v146 <= v144 + 1) {
                          unint64_t v146 = v144 + 1;
                        }
                        if (v145 >= 0x7FFFFFFFFFFFFFF8) {
                          unint64_t v147 = 0x1FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v147 = v146;
                        }
                        if (v147)
                        {
                          unint64_t v148 = (char *)sub_5714((uint64_t)(v138 + 429), v147);
                          v140 = (uint64_t *)v138[428];
                          unint64_t v143 = (uint64_t *)v138[427];
                        }
                        else
                        {
                          unint64_t v148 = 0;
                        }
                        unint64_t v149 = (uint64_t *)&v148[8 * v144];
                        uint64_t v150 = &v148[8 * v147];
                        uint64_t *v149 = v139;
                        uint64_t v142 = v149 + 1;
                        while (v140 != v143)
                        {
                          uint64_t v151 = *--v140;
                          *--unint64_t v149 = v151;
                        }
                        v138[427] = v149;
                        v138[428] = v142;
                        v138[429] = v150;
                        if (v143) {
                          operator delete(v143);
                        }
                      }
                      else
                      {
                        uint64_t *v140 = v139;
                        uint64_t v142 = v140 + 1;
                      }
                      v138[428] = v142;
                      if (!*(_DWORD *)(v3 + 48))
                      {
                        uint64_t v152 = *(void **)a1[1];
                        uint64_t v153 = *(_WORD *)(a1[2] + 38) & 0x3FFF;
                        unint64_t v154 = (char *)v152[431];
                        unint64_t v155 = v152[432];
                        if ((unint64_t)v154 >= v155)
                        {
                          unint64_t v157 = (char *)v152[430];
                          uint64_t v158 = (v154 - v157) >> 3;
                          if ((unint64_t)(v158 + 1) >> 61) {
                            goto LABEL_254;
                          }
                          unint64_t v159 = v155 - (void)v157;
                          unint64_t v160 = (uint64_t)(v155 - (void)v157) >> 2;
                          if (v160 <= v158 + 1) {
                            unint64_t v160 = v158 + 1;
                          }
                          if (v159 >= 0x7FFFFFFFFFFFFFF8) {
                            unint64_t v161 = 0x1FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v161 = v160;
                          }
                          if (v161)
                          {
                            unint64_t v162 = (char *)sub_5714((uint64_t)(v152 + 432), v161);
                            unint64_t v154 = (char *)v152[431];
                            unint64_t v157 = (char *)v152[430];
                          }
                          else
                          {
                            unint64_t v162 = 0;
                          }
                          unint64_t v163 = &v162[8 * v158];
                          uint64_t v164 = &v162[8 * v161];
                          *(void *)unint64_t v163 = v153;
                          uint64_t v156 = v163 + 8;
                          while (v154 != v157)
                          {
                            uint64_t v165 = *((void *)v154 - 1);
                            v154 -= 8;
                            *((void *)v163 - 1) = v165;
                            v163 -= 8;
                          }
                          v152[430] = v163;
                          v152[431] = v156;
                          v152[432] = v164;
                          if (v157) {
                            operator delete(v157);
                          }
                        }
                        else
                        {
                          *(void *)unint64_t v154 = v153;
                          uint64_t v156 = v154 + 8;
                        }
                        v152[431] = v156;
                        if (!*(_DWORD *)(v3 + 48))
                        {
                          unint64_t v166 = *(void **)a1[1];
                          uint64_t v167 = *(_WORD *)(a1[2] + 36) & 0x3FFF;
                          unint64_t v168 = (char *)v166[434];
                          unint64_t v169 = v166[435];
                          if ((unint64_t)v168 >= v169)
                          {
                            unint64_t v171 = (char *)v166[433];
                            uint64_t v172 = (v168 - v171) >> 3;
                            if ((unint64_t)(v172 + 1) >> 61) {
                              goto LABEL_254;
                            }
                            unint64_t v173 = v169 - (void)v171;
                            unint64_t v174 = (uint64_t)(v169 - (void)v171) >> 2;
                            if (v174 <= v172 + 1) {
                              unint64_t v174 = v172 + 1;
                            }
                            if (v173 >= 0x7FFFFFFFFFFFFFF8) {
                              unint64_t v175 = 0x1FFFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v175 = v174;
                            }
                            if (v175)
                            {
                              unint64_t v176 = (char *)sub_5714((uint64_t)(v166 + 435), v175);
                              unint64_t v168 = (char *)v166[434];
                              unint64_t v171 = (char *)v166[433];
                            }
                            else
                            {
                              unint64_t v176 = 0;
                            }
                            unint64_t v177 = &v176[8 * v172];
                            unint64_t v178 = &v176[8 * v175];
                            *(void *)unint64_t v177 = v167;
                            uint64_t v170 = v177 + 8;
                            while (v168 != v171)
                            {
                              uint64_t v179 = *((void *)v168 - 1);
                              v168 -= 8;
                              *((void *)v177 - 1) = v179;
                              v177 -= 8;
                            }
                            v166[433] = v177;
                            v166[434] = v170;
                            v166[435] = v178;
                            if (v171) {
                              operator delete(v171);
                            }
                          }
                          else
                          {
                            *(void *)unint64_t v168 = v167;
                            uint64_t v170 = v168 + 8;
                          }
                          v166[434] = v170;
                          if (!*(_DWORD *)(v3 + 48))
                          {
                            uint64_t v180 = a1[1];
                            uint64_t v181 = *(void **)v180;
                            uint64_t v182 = *(unsigned __int16 *)(a1[2] + 54);
                            uint64_t v183 = *(char **)(*(void *)v180 + 3496);
                            unint64_t v184 = *(void *)(*(void *)v180 + 3504);
                            if ((unint64_t)v183 >= v184)
                            {
                              unint64_t v186 = (char *)v181[436];
                              uint64_t v187 = (v183 - v186) >> 3;
                              if ((unint64_t)(v187 + 1) >> 61) {
                                goto LABEL_254;
                              }
                              unint64_t v188 = v184 - (void)v186;
                              unint64_t v189 = (uint64_t)(v184 - (void)v186) >> 2;
                              if (v189 <= v187 + 1) {
                                unint64_t v189 = v187 + 1;
                              }
                              if (v188 >= 0x7FFFFFFFFFFFFFF8) {
                                unint64_t v190 = 0x1FFFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v190 = v189;
                              }
                              if (v190)
                              {
                                unint64_t v191 = (char *)sub_5714((uint64_t)(v181 + 438), v190);
                                uint64_t v183 = (char *)v181[437];
                                unint64_t v186 = (char *)v181[436];
                              }
                              else
                              {
                                unint64_t v191 = 0;
                              }
                              v192 = &v191[8 * v187];
                              uint64_t v193 = &v191[8 * v190];
                              *(void *)v192 = v182;
                              unint64_t v185 = v192 + 8;
                              while (v183 != v186)
                              {
                                uint64_t v194 = *((void *)v183 - 1);
                                v183 -= 8;
                                *((void *)v192 - 1) = v194;
                                v192 -= 8;
                              }
                              v181[436] = v192;
                              v181[437] = v185;
                              v181[438] = v193;
                              if (v186) {
                                operator delete(v186);
                              }
                            }
                            else
                            {
                              *(void *)uint64_t v183 = v182;
                              unint64_t v185 = v183 + 8;
                            }
                            v181[437] = v185;
                            if (!*(_DWORD *)(v3 + 48))
                            {
                              uint64_t v195 = *(void **)a1[1];
                              uint64_t v196 = *(_DWORD *)(a1[2] + 24) & 0x1FFFFLL;
                              uint64_t v197 = (uint64_t *)v195[440];
                              unint64_t v198 = v195[441];
                              if ((unint64_t)v197 >= v198)
                              {
                                unint64_t v200 = (uint64_t *)v195[439];
                                uint64_t v201 = v197 - v200;
                                if ((unint64_t)(v201 + 1) >> 61) {
                                  goto LABEL_254;
                                }
                                unint64_t v202 = v198 - (void)v200;
                                unint64_t v203 = (uint64_t)(v198 - (void)v200) >> 2;
                                if (v203 <= v201 + 1) {
                                  unint64_t v203 = v201 + 1;
                                }
                                if (v202 >= 0x7FFFFFFFFFFFFFF8) {
                                  unint64_t v204 = 0x1FFFFFFFFFFFFFFFLL;
                                }
                                else {
                                  unint64_t v204 = v203;
                                }
                                if (v204)
                                {
                                  unint64_t v205 = (char *)sub_5714((uint64_t)(v195 + 441), v204);
                                  uint64_t v197 = (uint64_t *)v195[440];
                                  unint64_t v200 = (uint64_t *)v195[439];
                                }
                                else
                                {
                                  unint64_t v205 = 0;
                                }
                                v206 = (uint64_t *)&v205[8 * v201];
                                uint64_t v207 = &v205[8 * v204];
                                uint64_t *v206 = v196;
                                unint64_t v199 = v206 + 1;
                                while (v197 != v200)
                                {
                                  uint64_t v208 = *--v197;
                                  *--v206 = v208;
                                }
                                v195[439] = v206;
                                v195[440] = v199;
                                v195[441] = v207;
                                if (v200) {
                                  operator delete(v200);
                                }
                              }
                              else
                              {
                                uint64_t *v197 = v196;
                                unint64_t v199 = v197 + 1;
                              }
                              v195[440] = v199;
                              if (!*(_DWORD *)(v3 + 48))
                              {
                                uint64_t v209 = a1[2];
                                v210 = *(void **)a1[1];
                                uint64_t v211 = *(_DWORD *)(v209 + 28) & 0x1FFFFLL;
                                uint64_t v212 = (uint64_t *)v210[443];
                                unint64_t v213 = v210[444];
                                if ((unint64_t)v212 < v213)
                                {
                                  *uint64_t v212 = v211;
                                  unint64_t v214 = v212 + 1;
LABEL_261:
                                  v210[443] = v214;
                                  goto LABEL_262;
                                }
                                unint64_t v215 = (uint64_t *)v210[442];
                                uint64_t v216 = v212 - v215;
                                if (!((unint64_t)(v216 + 1) >> 61))
                                {
                                  unint64_t v217 = v213 - (void)v215;
                                  unint64_t v218 = (uint64_t)(v213 - (void)v215) >> 2;
                                  if (v218 <= v216 + 1) {
                                    unint64_t v218 = v216 + 1;
                                  }
                                  if (v217 >= 0x7FFFFFFFFFFFFFF8) {
                                    unint64_t v219 = 0x1FFFFFFFFFFFFFFFLL;
                                  }
                                  else {
                                    unint64_t v219 = v218;
                                  }
                                  if (v219)
                                  {
                                    v220 = (char *)sub_5714((uint64_t)(v210 + 444), v219);
                                    uint64_t v212 = (uint64_t *)v210[443];
                                    unint64_t v215 = (uint64_t *)v210[442];
                                  }
                                  else
                                  {
                                    v220 = 0;
                                  }
                                  uint64_t v221 = (uint64_t *)&v220[8 * v216];
                                  v222 = &v220[8 * v219];
                                  *uint64_t v221 = v211;
                                  unint64_t v214 = v221 + 1;
                                  while (v212 != v215)
                                  {
                                    uint64_t v223 = *--v212;
                                    *--uint64_t v221 = v223;
                                  }
                                  v210[442] = v221;
                                  v210[443] = v214;
                                  v210[444] = v222;
                                  if (v215) {
                                    operator delete(v215);
                                  }
                                  goto LABEL_261;
                                }
LABEL_254:
                                sub_566C();
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_262:
    *a2 = 1;
    return;
  }
  if (!*(_DWORD *)(v3 + 48))
  {
    uint64_t v11 = (void *)a1[1];
    uint64_t v10 = a1[2];
    unsigned int v12 = *(_DWORD *)(v10 + 32);
    v10 += 32;
    uint64_t v13 = (void *)*v11;
    *(void *)(v13[401] - 8) += (unint64_t)v12 >> 17;
    *(void *)(v13[404] - 8) += *(_DWORD *)v10 & 0x1FFFF;
    *(void *)(v13[407] - 8) += *(_WORD *)(v10 - 12) & 0x7FFF;
    *(void *)(v13[410] - 8) += *(_WORD *)(v10 - 10) & 0x7FFF;
    *(void *)(v13[413] - 8) += *(_WORD *)(v10 - 16) & 0x7FFF;
    *(void *)(v13[416] - 8) += *(_WORD *)(v10 - 14) & 0x7FFF;
    *(void *)(v13[419] - 8) += *(unsigned __int16 *)(v10 + 20);
    *(void *)(v13[422] - 8) += *(_DWORD *)(v10 + 12) & 0x1FFFF;
    *(void *)(v13[425] - 8) += *(_DWORD *)(v10 + 8) & 0x1FFFF;
    *(void *)(v13[428] - 8) += *(_DWORD *)(v10 + 16) & 0x1FFFF;
    uint64_t v14 = a1[2];
    unint64_t v15 = (void *)*v11;
    *(void *)(v15[431] - 8) += *(_WORD *)(v14 + 38) & 0x3FFF;
    *(void *)(v15[434] - 8) += *(_WORD *)(v14 + 36) & 0x3FFF;
    *(void *)(v15[437] - 8) += *(unsigned __int16 *)(v14 + 54);
    *(void *)(v15[440] - 8) += *(_DWORD *)(v14 + 24) & 0x1FFFF;
    *(void *)(v15[443] - 8) += *(_DWORD *)(v14 + 28) & 0x1FFFF;
  }
}

void sub_53514(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    if (*(_DWORD *)(v3 + 48)) {
      goto LABEL_74;
    }
    v5 = *(void **)a1[1];
    uint64_t v6 = *(_DWORD *)(a1[2] + 24) & 0x7FFFFLL;
    v7 = (uint64_t *)v5[446];
    unint64_t v8 = v5[447];
    if ((unint64_t)v7 >= v8)
    {
      unsigned int v12 = (uint64_t *)v5[445];
      uint64_t v13 = v7 - v12;
      if ((unint64_t)(v13 + 1) >> 61) {
        goto LABEL_76;
      }
      unint64_t v14 = v8 - (void)v12;
      unint64_t v15 = (uint64_t)(v8 - (void)v12) >> 2;
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      if (v14 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v15;
      }
      if (v16)
      {
        uint64_t v17 = (char *)sub_5714((uint64_t)(v5 + 447), v16);
        v7 = (uint64_t *)v5[446];
        unsigned int v12 = (uint64_t *)v5[445];
      }
      else
      {
        uint64_t v17 = 0;
      }
      unint64_t v18 = (uint64_t *)&v17[8 * v13];
      unint64_t v19 = &v17[8 * v16];
      *unint64_t v18 = v6;
      v9 = v18 + 1;
      while (v7 != v12)
      {
        uint64_t v20 = *--v7;
        *--unint64_t v18 = v20;
      }
      v5[445] = v18;
      v5[446] = v9;
      v5[447] = v19;
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      uint64_t *v7 = v6;
      v9 = v7 + 1;
    }
    v5[446] = v9;
    if (!*(_DWORD *)(v3 + 48))
    {
      uint64_t v21 = *(void **)a1[1];
      uint64_t v22 = *(_DWORD *)(a1[2] + 28) & 0x3FFFFFLL;
      uint64_t v23 = (uint64_t *)v21[449];
      unint64_t v24 = v21[450];
      if ((unint64_t)v23 >= v24)
      {
        uint64_t v26 = (uint64_t *)v21[448];
        uint64_t v27 = v23 - v26;
        if ((unint64_t)(v27 + 1) >> 61) {
          goto LABEL_76;
        }
        unint64_t v28 = v24 - (void)v26;
        unint64_t v29 = (uint64_t)(v24 - (void)v26) >> 2;
        if (v29 <= v27 + 1) {
          unint64_t v29 = v27 + 1;
        }
        if (v28 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v29;
        }
        if (v30)
        {
          uint64_t v31 = (char *)sub_5714((uint64_t)(v21 + 450), v30);
          uint64_t v23 = (uint64_t *)v21[449];
          uint64_t v26 = (uint64_t *)v21[448];
        }
        else
        {
          uint64_t v31 = 0;
        }
        unint64_t v32 = (uint64_t *)&v31[8 * v27];
        unint64_t v33 = &v31[8 * v30];
        *unint64_t v32 = v22;
        unint64_t v25 = v32 + 1;
        while (v23 != v26)
        {
          uint64_t v34 = *--v23;
          *--unint64_t v32 = v34;
        }
        v21[448] = v32;
        v21[449] = v25;
        v21[450] = v33;
        if (v26) {
          operator delete(v26);
        }
      }
      else
      {
        *uint64_t v23 = v22;
        unint64_t v25 = v23 + 1;
      }
      v21[449] = v25;
      if (!*(_DWORD *)(v3 + 48))
      {
        uint64_t v35 = *(void **)a1[1];
        uint64_t v36 = *(_DWORD *)(a1[2] + 20) & 0x3FFFFFLL;
        unint64_t v37 = (uint64_t *)v35[452];
        unint64_t v38 = v35[453];
        if ((unint64_t)v37 >= v38)
        {
          uint64_t v40 = (uint64_t *)v35[451];
          uint64_t v41 = v37 - v40;
          if ((unint64_t)(v41 + 1) >> 61) {
            goto LABEL_76;
          }
          unint64_t v42 = v38 - (void)v40;
          unint64_t v43 = (uint64_t)(v38 - (void)v40) >> 2;
          if (v43 <= v41 + 1) {
            unint64_t v43 = v41 + 1;
          }
          if (v42 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v44 = v43;
          }
          if (v44)
          {
            uint64_t v45 = (char *)sub_5714((uint64_t)(v35 + 453), v44);
            unint64_t v37 = (uint64_t *)v35[452];
            uint64_t v40 = (uint64_t *)v35[451];
          }
          else
          {
            uint64_t v45 = 0;
          }
          unint64_t v46 = (uint64_t *)&v45[8 * v41];
          unint64_t v47 = &v45[8 * v44];
          *unint64_t v46 = v36;
          uint64_t v39 = v46 + 1;
          while (v37 != v40)
          {
            uint64_t v48 = *--v37;
            *--unint64_t v46 = v48;
          }
          v35[451] = v46;
          v35[452] = v39;
          v35[453] = v47;
          if (v40) {
            operator delete(v40);
          }
        }
        else
        {
          *unint64_t v37 = v36;
          uint64_t v39 = v37 + 1;
        }
        v35[452] = v39;
        if (!*(_DWORD *)(v3 + 48))
        {
          uint64_t v49 = a1[2];
          uint64_t v50 = *(void **)a1[1];
          uint64_t v51 = *(_DWORD *)(v49 + 16) & 0x3FFFFFLL;
          uint64_t v52 = (uint64_t *)v50[455];
          unint64_t v53 = v50[456];
          if ((unint64_t)v52 < v53)
          {
            *uint64_t v52 = v51;
            uint64_t v54 = v52 + 1;
LABEL_73:
            v50[455] = v54;
            goto LABEL_74;
          }
          uint64_t v55 = (uint64_t *)v50[454];
          uint64_t v56 = v52 - v55;
          if (!((unint64_t)(v56 + 1) >> 61))
          {
            unint64_t v57 = v53 - (void)v55;
            unint64_t v58 = (uint64_t)(v53 - (void)v55) >> 2;
            if (v58 <= v56 + 1) {
              unint64_t v58 = v56 + 1;
            }
            if (v57 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v59 = v58;
            }
            if (v59)
            {
              unint64_t v60 = (char *)sub_5714((uint64_t)(v50 + 456), v59);
              uint64_t v52 = (uint64_t *)v50[455];
              uint64_t v55 = (uint64_t *)v50[454];
            }
            else
            {
              unint64_t v60 = 0;
            }
            unint64_t v61 = (uint64_t *)&v60[8 * v56];
            unint64_t v62 = &v60[8 * v59];
            *unint64_t v61 = v51;
            uint64_t v54 = v61 + 1;
            while (v52 != v55)
            {
              uint64_t v63 = *--v52;
              *--unint64_t v61 = v63;
            }
            v50[454] = v61;
            v50[455] = v54;
            v50[456] = v62;
            if (v55) {
              operator delete(v55);
            }
            goto LABEL_73;
          }
LABEL_76:
          sub_566C();
        }
      }
    }
LABEL_74:
    *a2 = 1;
    return;
  }
  if (!*(_DWORD *)(v3 + 48))
  {
    uint64_t v10 = (_DWORD *)a1[2];
    uint64_t v11 = *(void **)a1[1];
    *(void *)(v11[446] - 8) += v10[6] & 0x7FFFF;
    *(void *)(v11[449] - 8) += v10[7] & 0x3FFFFF;
    *(void *)(v11[452] - 8) += v10[5] & 0x3FFFFF;
    *(void *)(v11[455] - 8) += v10[4] & 0x3FFFFF;
  }
}

void sub_53910(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    if (*(_DWORD *)(v3 + 48)) {
      goto LABEL_176;
    }
    v5 = *(void **)a1[1];
    uint64_t v6 = *(_WORD *)(a1[2] + 26) & 0x1FFF;
    v7 = (char *)v5[542];
    unint64_t v8 = v5[543];
    if ((unint64_t)v7 >= v8)
    {
      unsigned int v12 = (char *)v5[541];
      uint64_t v13 = (v7 - v12) >> 3;
      if ((unint64_t)(v13 + 1) >> 61) {
        goto LABEL_178;
      }
      unint64_t v14 = v8 - (void)v12;
      unint64_t v15 = (uint64_t)(v8 - (void)v12) >> 2;
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      if (v14 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v15;
      }
      if (v16)
      {
        uint64_t v17 = (char *)sub_5714((uint64_t)(v5 + 543), v16);
        v7 = (char *)v5[542];
        unsigned int v12 = (char *)v5[541];
      }
      else
      {
        uint64_t v17 = 0;
      }
      unint64_t v18 = &v17[8 * v13];
      unint64_t v19 = &v17[8 * v16];
      *(void *)unint64_t v18 = v6;
      v9 = v18 + 8;
      while (v7 != v12)
      {
        uint64_t v20 = *((void *)v7 - 1);
        v7 -= 8;
        *((void *)v18 - 1) = v20;
        v18 -= 8;
      }
      v5[541] = v18;
      v5[542] = v9;
      v5[543] = v19;
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      *(void *)v7 = v6;
      v9 = v7 + 8;
    }
    v5[542] = v9;
    if (!*(_DWORD *)(v3 + 48))
    {
      uint64_t v21 = *(void **)a1[1];
      uint64_t v22 = *(_DWORD *)(a1[2] + 32) & 0x3FFFFLL;
      uint64_t v23 = (uint64_t *)v21[545];
      unint64_t v24 = v21[546];
      if ((unint64_t)v23 >= v24)
      {
        uint64_t v26 = (uint64_t *)v21[544];
        uint64_t v27 = v23 - v26;
        if ((unint64_t)(v27 + 1) >> 61) {
          goto LABEL_178;
        }
        unint64_t v28 = v24 - (void)v26;
        unint64_t v29 = (uint64_t)(v24 - (void)v26) >> 2;
        if (v29 <= v27 + 1) {
          unint64_t v29 = v27 + 1;
        }
        if (v28 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v29;
        }
        if (v30)
        {
          uint64_t v31 = (char *)sub_5714((uint64_t)(v21 + 546), v30);
          uint64_t v23 = (uint64_t *)v21[545];
          uint64_t v26 = (uint64_t *)v21[544];
        }
        else
        {
          uint64_t v31 = 0;
        }
        unint64_t v32 = (uint64_t *)&v31[8 * v27];
        unint64_t v33 = &v31[8 * v30];
        *unint64_t v32 = v22;
        unint64_t v25 = v32 + 1;
        while (v23 != v26)
        {
          uint64_t v34 = *--v23;
          *--unint64_t v32 = v34;
        }
        v21[544] = v32;
        v21[545] = v25;
        v21[546] = v33;
        if (v26) {
          operator delete(v26);
        }
      }
      else
      {
        *uint64_t v23 = v22;
        unint64_t v25 = v23 + 1;
      }
      v21[545] = v25;
      if (!*(_DWORD *)(v3 + 48))
      {
        uint64_t v35 = *(void **)a1[1];
        uint64_t v36 = *(_WORD *)(a1[2] + 24) & 0x1FFF;
        unint64_t v37 = (char *)v35[548];
        unint64_t v38 = v35[549];
        if ((unint64_t)v37 >= v38)
        {
          uint64_t v40 = (char *)v35[547];
          uint64_t v41 = (v37 - v40) >> 3;
          if ((unint64_t)(v41 + 1) >> 61) {
            goto LABEL_178;
          }
          unint64_t v42 = v38 - (void)v40;
          unint64_t v43 = (uint64_t)(v38 - (void)v40) >> 2;
          if (v43 <= v41 + 1) {
            unint64_t v43 = v41 + 1;
          }
          if (v42 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v44 = v43;
          }
          if (v44)
          {
            uint64_t v45 = (char *)sub_5714((uint64_t)(v35 + 549), v44);
            unint64_t v37 = (char *)v35[548];
            uint64_t v40 = (char *)v35[547];
          }
          else
          {
            uint64_t v45 = 0;
          }
          unint64_t v46 = &v45[8 * v41];
          unint64_t v47 = &v45[8 * v44];
          *(void *)unint64_t v46 = v36;
          uint64_t v39 = v46 + 8;
          while (v37 != v40)
          {
            uint64_t v48 = *((void *)v37 - 1);
            v37 -= 8;
            *((void *)v46 - 1) = v48;
            v46 -= 8;
          }
          v35[547] = v46;
          v35[548] = v39;
          v35[549] = v47;
          if (v40) {
            operator delete(v40);
          }
        }
        else
        {
          *(void *)unint64_t v37 = v36;
          uint64_t v39 = v37 + 8;
        }
        v35[548] = v39;
        if (!*(_DWORD *)(v3 + 48))
        {
          uint64_t v49 = *(void **)a1[1];
          unint64_t v50 = ((unint64_t)*(unsigned int *)(a1[2] + 28) >> 13) & 0x3FFFF;
          uint64_t v51 = (unint64_t *)v49[551];
          unint64_t v52 = v49[552];
          if ((unint64_t)v51 >= v52)
          {
            uint64_t v54 = (unint64_t *)v49[550];
            uint64_t v55 = v51 - v54;
            if ((unint64_t)(v55 + 1) >> 61) {
              goto LABEL_178;
            }
            unint64_t v56 = v52 - (void)v54;
            unint64_t v57 = (uint64_t)(v52 - (void)v54) >> 2;
            if (v57 <= v55 + 1) {
              unint64_t v57 = v55 + 1;
            }
            if (v56 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v58 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v58 = v57;
            }
            if (v58)
            {
              unint64_t v59 = (char *)sub_5714((uint64_t)(v49 + 552), v58);
              uint64_t v51 = (unint64_t *)v49[551];
              uint64_t v54 = (unint64_t *)v49[550];
            }
            else
            {
              unint64_t v59 = 0;
            }
            unint64_t v60 = (unint64_t *)&v59[8 * v55];
            unint64_t v61 = &v59[8 * v58];
            *unint64_t v60 = v50;
            unint64_t v53 = v60 + 1;
            while (v51 != v54)
            {
              unint64_t v62 = *--v51;
              *--unint64_t v60 = v62;
            }
            v49[550] = v60;
            v49[551] = v53;
            v49[552] = v61;
            if (v54) {
              operator delete(v54);
            }
          }
          else
          {
            unint64_t *v51 = v50;
            unint64_t v53 = v51 + 1;
          }
          v49[551] = v53;
          if (!*(_DWORD *)(v3 + 48))
          {
            uint64_t v63 = *(void **)a1[1];
            uint64_t v64 = *(_DWORD *)(a1[2] + 28) & 0x1FFFLL;
            unint64_t v65 = (uint64_t *)v63[554];
            unint64_t v66 = v63[555];
            if ((unint64_t)v65 >= v66)
            {
              uint64_t v68 = (uint64_t *)v63[553];
              uint64_t v69 = v65 - v68;
              if ((unint64_t)(v69 + 1) >> 61) {
                goto LABEL_178;
              }
              unint64_t v70 = v66 - (void)v68;
              unint64_t v71 = (uint64_t)(v66 - (void)v68) >> 2;
              if (v71 <= v69 + 1) {
                unint64_t v71 = v69 + 1;
              }
              if (v70 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v72 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v72 = v71;
              }
              if (v72)
              {
                uint64_t v73 = (char *)sub_5714((uint64_t)(v63 + 555), v72);
                unint64_t v65 = (uint64_t *)v63[554];
                uint64_t v68 = (uint64_t *)v63[553];
              }
              else
              {
                uint64_t v73 = 0;
              }
              unint64_t v74 = (uint64_t *)&v73[8 * v69];
              unint64_t v75 = &v73[8 * v72];
              uint64_t *v74 = v64;
              uint64_t v67 = v74 + 1;
              while (v65 != v68)
              {
                uint64_t v76 = *--v65;
                *--unint64_t v74 = v76;
              }
              v63[553] = v74;
              v63[554] = v67;
              v63[555] = v75;
              if (v68) {
                operator delete(v68);
              }
            }
            else
            {
              uint64_t *v65 = v64;
              uint64_t v67 = v65 + 1;
            }
            v63[554] = v67;
            if (!*(_DWORD *)(v3 + 48))
            {
              uint64_t v77 = *(void **)a1[1];
              uint64_t v78 = *(_DWORD *)(a1[2] + 36) & 0x3FFFFLL;
              uint64_t v79 = (uint64_t *)v77[557];
              unint64_t v80 = v77[558];
              if ((unint64_t)v79 >= v80)
              {
                uint64_t v82 = (uint64_t *)v77[556];
                uint64_t v83 = v79 - v82;
                if ((unint64_t)(v83 + 1) >> 61) {
                  goto LABEL_178;
                }
                unint64_t v84 = v80 - (void)v82;
                unint64_t v85 = (uint64_t)(v80 - (void)v82) >> 2;
                if (v85 <= v83 + 1) {
                  unint64_t v85 = v83 + 1;
                }
                if (v84 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v86 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v86 = v85;
                }
                if (v86)
                {
                  uint64_t v87 = (char *)sub_5714((uint64_t)(v77 + 558), v86);
                  uint64_t v79 = (uint64_t *)v77[557];
                  uint64_t v82 = (uint64_t *)v77[556];
                }
                else
                {
                  uint64_t v87 = 0;
                }
                unint64_t v88 = (uint64_t *)&v87[8 * v83];
                unint64_t v89 = &v87[8 * v86];
                uint64_t *v88 = v78;
                unint64_t v81 = v88 + 1;
                while (v79 != v82)
                {
                  uint64_t v90 = *--v79;
                  *--unint64_t v88 = v90;
                }
                v77[556] = v88;
                v77[557] = v81;
                v77[558] = v89;
                if (v82) {
                  operator delete(v82);
                }
              }
              else
              {
                uint64_t *v79 = v78;
                unint64_t v81 = v79 + 1;
              }
              v77[557] = v81;
              if (!*(_DWORD *)(v3 + 48))
              {
                uint64_t v91 = *(void **)a1[1];
                uint64_t v92 = *(_WORD *)(a1[2] + 20) & 0x3FFF;
                unint64_t v93 = (char *)v91[560];
                unint64_t v94 = v91[561];
                if ((unint64_t)v93 >= v94)
                {
                  unint64_t v96 = (char *)v91[559];
                  uint64_t v97 = (v93 - v96) >> 3;
                  if ((unint64_t)(v97 + 1) >> 61) {
                    goto LABEL_178;
                  }
                  unint64_t v98 = v94 - (void)v96;
                  unint64_t v99 = (uint64_t)(v94 - (void)v96) >> 2;
                  if (v99 <= v97 + 1) {
                    unint64_t v99 = v97 + 1;
                  }
                  if (v98 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v100 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v100 = v99;
                  }
                  if (v100)
                  {
                    unint64_t v101 = (char *)sub_5714((uint64_t)(v91 + 561), v100);
                    unint64_t v93 = (char *)v91[560];
                    unint64_t v96 = (char *)v91[559];
                  }
                  else
                  {
                    unint64_t v101 = 0;
                  }
                  uint64_t v102 = &v101[8 * v97];
                  unint64_t v103 = &v101[8 * v100];
                  *(void *)uint64_t v102 = v92;
                  uint64_t v95 = v102 + 8;
                  while (v93 != v96)
                  {
                    uint64_t v104 = *((void *)v93 - 1);
                    v93 -= 8;
                    *((void *)v102 - 1) = v104;
                    v102 -= 8;
                  }
                  v91[559] = v102;
                  v91[560] = v95;
                  v91[561] = v103;
                  if (v96) {
                    operator delete(v96);
                  }
                }
                else
                {
                  *(void *)unint64_t v93 = v92;
                  uint64_t v95 = v93 + 8;
                }
                v91[560] = v95;
                if (!*(_DWORD *)(v3 + 48))
                {
                  unint64_t v105 = *(void **)a1[1];
                  uint64_t v106 = *(_WORD *)(a1[2] + 16) & 0x3FFF;
                  uint64_t v107 = (char *)v105[563];
                  unint64_t v108 = v105[564];
                  if ((unint64_t)v107 >= v108)
                  {
                    uint64_t v110 = (char *)v105[562];
                    uint64_t v111 = (v107 - v110) >> 3;
                    if ((unint64_t)(v111 + 1) >> 61) {
                      goto LABEL_178;
                    }
                    unint64_t v112 = v108 - (void)v110;
                    unint64_t v113 = (uint64_t)(v108 - (void)v110) >> 2;
                    if (v113 <= v111 + 1) {
                      unint64_t v113 = v111 + 1;
                    }
                    if (v112 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v114 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v114 = v113;
                    }
                    if (v114)
                    {
                      uint64_t v115 = (char *)sub_5714((uint64_t)(v105 + 564), v114);
                      uint64_t v107 = (char *)v105[563];
                      uint64_t v110 = (char *)v105[562];
                    }
                    else
                    {
                      uint64_t v115 = 0;
                    }
                    uint64_t v116 = &v115[8 * v111];
                    unint64_t v117 = &v115[8 * v114];
                    *(void *)uint64_t v116 = v106;
                    uint64_t v109 = v116 + 8;
                    while (v107 != v110)
                    {
                      uint64_t v118 = *((void *)v107 - 1);
                      v107 -= 8;
                      *((void *)v116 - 1) = v118;
                      v116 -= 8;
                    }
                    v105[562] = v116;
                    v105[563] = v109;
                    v105[564] = v117;
                    if (v110) {
                      operator delete(v110);
                    }
                  }
                  else
                  {
                    *(void *)uint64_t v107 = v106;
                    uint64_t v109 = v107 + 8;
                  }
                  v105[563] = v109;
                  if (!*(_DWORD *)(v3 + 48))
                  {
                    unint64_t v119 = *(void **)a1[1];
                    uint64_t v120 = *(_WORD *)(a1[2] + 22) & 0x3FFF;
                    unint64_t v121 = (char *)v119[566];
                    unint64_t v122 = v119[567];
                    if ((unint64_t)v121 >= v122)
                    {
                      unint64_t v124 = (char *)v119[565];
                      uint64_t v125 = (v121 - v124) >> 3;
                      if ((unint64_t)(v125 + 1) >> 61) {
                        goto LABEL_178;
                      }
                      unint64_t v126 = v122 - (void)v124;
                      unint64_t v127 = (uint64_t)(v122 - (void)v124) >> 2;
                      if (v127 <= v125 + 1) {
                        unint64_t v127 = v125 + 1;
                      }
                      if (v126 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v128 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v128 = v127;
                      }
                      if (v128)
                      {
                        unint64_t v129 = (char *)sub_5714((uint64_t)(v119 + 567), v128);
                        unint64_t v121 = (char *)v119[566];
                        unint64_t v124 = (char *)v119[565];
                      }
                      else
                      {
                        unint64_t v129 = 0;
                      }
                      uint64_t v130 = &v129[8 * v125];
                      unint64_t v131 = &v129[8 * v128];
                      *(void *)uint64_t v130 = v120;
                      uint64_t v123 = v130 + 8;
                      while (v121 != v124)
                      {
                        uint64_t v132 = *((void *)v121 - 1);
                        v121 -= 8;
                        *((void *)v130 - 1) = v132;
                        v130 -= 8;
                      }
                      v119[565] = v130;
                      v119[566] = v123;
                      v119[567] = v131;
                      if (v124) {
                        operator delete(v124);
                      }
                    }
                    else
                    {
                      *(void *)unint64_t v121 = v120;
                      uint64_t v123 = v121 + 8;
                    }
                    v119[566] = v123;
                    if (!*(_DWORD *)(v3 + 48))
                    {
                      uint64_t v133 = a1[2];
                      unint64_t v134 = *(void **)a1[1];
                      uint64_t v135 = *(_WORD *)(v133 + 18) & 0x3FFF;
                      unint64_t v136 = (char *)v134[569];
                      unint64_t v137 = v134[570];
                      if ((unint64_t)v136 < v137)
                      {
                        *(void *)unint64_t v136 = v135;
                        unint64_t v138 = v136 + 8;
LABEL_175:
                        v134[569] = v138;
                        goto LABEL_176;
                      }
                      uint64_t v139 = (char *)v134[568];
                      uint64_t v140 = (v136 - v139) >> 3;
                      if (!((unint64_t)(v140 + 1) >> 61))
                      {
                        unint64_t v141 = v137 - (void)v139;
                        unint64_t v142 = (uint64_t)(v137 - (void)v139) >> 2;
                        if (v142 <= v140 + 1) {
                          unint64_t v142 = v140 + 1;
                        }
                        if (v141 >= 0x7FFFFFFFFFFFFFF8) {
                          unint64_t v143 = 0x1FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v143 = v142;
                        }
                        if (v143)
                        {
                          uint64_t v144 = (char *)sub_5714((uint64_t)(v134 + 570), v143);
                          unint64_t v136 = (char *)v134[569];
                          uint64_t v139 = (char *)v134[568];
                        }
                        else
                        {
                          uint64_t v144 = 0;
                        }
                        unint64_t v145 = &v144[8 * v140];
                        unint64_t v146 = &v144[8 * v143];
                        *(void *)unint64_t v145 = v135;
                        unint64_t v138 = v145 + 8;
                        while (v136 != v139)
                        {
                          uint64_t v147 = *((void *)v136 - 1);
                          v136 -= 8;
                          *((void *)v145 - 1) = v147;
                          v145 -= 8;
                        }
                        v134[568] = v145;
                        v134[569] = v138;
                        v134[570] = v146;
                        if (v139) {
                          operator delete(v139);
                        }
                        goto LABEL_175;
                      }
LABEL_178:
                      sub_566C();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_176:
    *a2 = 1;
    return;
  }
  if (!*(_DWORD *)(v3 + 48))
  {
    uint64_t v10 = a1[2];
    uint64_t v11 = *(void **)a1[1];
    *(void *)(v11[542] - 8) += *(_WORD *)(v10 + 26) & 0x1FFF;
    *(void *)(v11[545] - 8) += *(_DWORD *)(v10 + 32) & 0x3FFFF;
    *(void *)(v11[548] - 8) += *(_WORD *)(v10 + 24) & 0x1FFF;
    *(void *)(v11[551] - 8) += ((unint64_t)*(unsigned int *)(v10 + 28) >> 13) & 0x3FFFF;
    *(void *)(v11[554] - 8) += *(_DWORD *)(v10 + 28) & 0x1FFF;
    *(void *)(v11[557] - 8) += *(_DWORD *)(v10 + 36) & 0x3FFFF;
    *(void *)(v11[560] - 8) += *(_WORD *)(v10 + 20) & 0x3FFF;
    *(void *)(v11[563] - 8) += *(_WORD *)(v10 + 16) & 0x3FFF;
    *(void *)(v11[566] - 8) += *(_WORD *)(v10 + 22) & 0x3FFF;
    *(void *)(v11[569] - 8) += *(_WORD *)(v10 + 18) & 0x3FFF;
  }
}

void sub_542B4(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    v271 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v270 = *v271;
    uint64_t v272 = (char *)v271[1] - (char *)*v271;
    if (v272)
    {
      unint64_t v273 = v272 >> 2;
      if (v273 <= 1) {
        unint64_t v273 = 1;
      }
      do
      {
        int v274 = *v270++;
        switch(v274)
        {
          case 128:
            unint64_t v275 = *(_WORD *)(a1[3] + 48) & 0x3FFF;
            v276 = (void *)(*(void *)a1[2] + 3856);
            goto LABEL_374;
          case 129:
            unint64_t v275 = *(_WORD *)(a1[3] + 32) & 0x3FFF;
            v276 = (void *)(*(void *)a1[2] + 3880);
            goto LABEL_374;
          case 130:
            unint64_t v275 = *(_WORD *)(a1[3] + 50) & 0x3FFF;
            v276 = (void *)(*(void *)a1[2] + 3904);
            goto LABEL_374;
          case 131:
            unint64_t v275 = *(_WORD *)(a1[3] + 34) & 0x3FFF;
            v276 = (void *)(*(void *)a1[2] + 3928);
            goto LABEL_374;
          case 132:
            unint64_t v275 = *(_WORD *)(a1[3] + 52) & 0x3FFF;
            v276 = (void *)(*(void *)a1[2] + 3952);
            goto LABEL_374;
          case 133:
            unint64_t v275 = *(_WORD *)(a1[3] + 36) & 0x3FFF;
            v276 = (void *)(*(void *)a1[2] + 3976);
            goto LABEL_374;
          case 134:
            unint64_t v275 = *(_DWORD *)(a1[3] + 20) & 0x3FFFF;
            v276 = (void *)(*(void *)a1[2] + 4000);
            goto LABEL_374;
          case 135:
            unint64_t v275 = *(_WORD *)(a1[3] + 42) & 0x3FFF;
            v276 = (void *)(*(void *)a1[2] + 4024);
            goto LABEL_374;
          case 136:
            unint64_t v275 = *(_WORD *)(a1[3] + 26) & 0x3FFF;
            v276 = (void *)(*(void *)a1[2] + 4048);
            goto LABEL_374;
          case 137:
            unint64_t v275 = *(_WORD *)(a1[3] + 44) & 0x3FFF;
            v276 = (void *)(*(void *)a1[2] + 4072);
            goto LABEL_374;
          case 138:
            unint64_t v275 = *(_WORD *)(a1[3] + 28) & 0x3FFF;
            v276 = (void *)(*(void *)a1[2] + 4096);
            goto LABEL_374;
          case 139:
            unint64_t v275 = *(_WORD *)(a1[3] + 46) & 0x3FFF;
            v276 = (void *)(*(void *)a1[2] + 4120);
            goto LABEL_374;
          case 140:
            unint64_t v275 = *(_WORD *)(a1[3] + 30) & 0x3FFF;
            v276 = (void *)(*(void *)a1[2] + 4144);
            goto LABEL_374;
          case 141:
            unint64_t v275 = *(_DWORD *)(a1[3] + 16) & 0x3FFFF;
            v276 = (void *)(*(void *)a1[2] + 4168);
            goto LABEL_374;
          case 142:
            unint64_t v275 = *(_WORD *)(a1[3] + 24) & 0x1FFF;
            v276 = (void *)(*(void *)a1[2] + 4192);
            goto LABEL_374;
          case 143:
            unint64_t v275 = *(_WORD *)(a1[3] + 54) & 0x1FF;
            v276 = (void *)(*(void *)a1[2] + 4216);
            goto LABEL_374;
          case 144:
            unint64_t v275 = *(_WORD *)(a1[3] + 38) & 0x1FF;
            v276 = (void *)(*(void *)a1[2] + 4240);
            goto LABEL_374;
          case 145:
            unint64_t v275 = *(_WORD *)(a1[3] + 56) & 0x1FF;
            v276 = (void *)(*(void *)a1[2] + 4264);
            goto LABEL_374;
          case 146:
            unint64_t v275 = *(_WORD *)(a1[3] + 40) & 0x1FF;
            v276 = (void *)(*(void *)a1[2] + 4288);
            goto LABEL_374;
          case 147:
            unint64_t v275 = (unint64_t)*(unsigned int *)(a1[3] + 20) >> 18;
            v276 = (void *)(*(void *)a1[2] + 4312);
LABEL_374:
            *(void *)(*v276 - 8) += v275;
            break;
          default:
            break;
        }
        --v273;
      }
      while (v273);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0x80:
            uint64_t v10 = *(void **)a1[2];
            uint64_t v11 = *(_WORD *)(a1[3] + 48) & 0x3FFF;
            unsigned int v12 = (char *)v10[482];
            unint64_t v13 = v10[483];
            if ((unint64_t)v12 >= v13)
            {
              uint64_t v110 = (char *)v10[481];
              uint64_t v111 = (v12 - v110) >> 3;
              if ((unint64_t)(v111 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v112 = v13 - (void)v110;
              unint64_t v113 = (uint64_t)(v13 - (void)v110) >> 2;
              if (v113 <= v111 + 1) {
                unint64_t v113 = v111 + 1;
              }
              if (v112 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v114 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v114 = v113;
              }
              if (v114)
              {
                uint64_t v115 = (char *)sub_5714((uint64_t)(v10 + 483), v114);
                unsigned int v12 = (char *)v10[482];
                uint64_t v110 = (char *)v10[481];
              }
              else
              {
                uint64_t v115 = 0;
              }
              uint64_t v230 = &v115[8 * v111];
              *(void *)uint64_t v230 = v11;
              unint64_t v14 = v230 + 8;
              while (v12 != v110)
              {
                uint64_t v231 = *((void *)v12 - 1);
                v12 -= 8;
                *((void *)v230 - 1) = v231;
                v230 -= 8;
              }
              v10[481] = v230;
              v10[482] = v14;
              v10[483] = &v115[8 * v114];
              if (v110) {
                operator delete(v110);
              }
            }
            else
            {
              *(void *)unsigned int v12 = v11;
              unint64_t v14 = v12 + 8;
            }
            v10[482] = v14;
            break;
          case 0x81:
            unint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_WORD *)(a1[3] + 32) & 0x3FFF;
            uint64_t v17 = (char *)v15[485];
            unint64_t v18 = v15[486];
            if ((unint64_t)v17 >= v18)
            {
              uint64_t v116 = (char *)v15[484];
              uint64_t v117 = (v17 - v116) >> 3;
              if ((unint64_t)(v117 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v118 = v18 - (void)v116;
              unint64_t v119 = (uint64_t)(v18 - (void)v116) >> 2;
              if (v119 <= v117 + 1) {
                unint64_t v119 = v117 + 1;
              }
              if (v118 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v120 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v120 = v119;
              }
              if (v120)
              {
                unint64_t v121 = (char *)sub_5714((uint64_t)(v15 + 486), v120);
                uint64_t v17 = (char *)v15[485];
                uint64_t v116 = (char *)v15[484];
              }
              else
              {
                unint64_t v121 = 0;
              }
              unint64_t v232 = &v121[8 * v117];
              *(void *)unint64_t v232 = v16;
              unint64_t v19 = v232 + 8;
              while (v17 != v116)
              {
                uint64_t v233 = *((void *)v17 - 1);
                v17 -= 8;
                *((void *)v232 - 1) = v233;
                v232 -= 8;
              }
              v15[484] = v232;
              v15[485] = v19;
              v15[486] = &v121[8 * v120];
              if (v116) {
                operator delete(v116);
              }
            }
            else
            {
              *(void *)uint64_t v17 = v16;
              unint64_t v19 = v17 + 8;
            }
            v15[485] = v19;
            break;
          case 0x82:
            uint64_t v20 = *(void **)a1[2];
            uint64_t v21 = *(_WORD *)(a1[3] + 50) & 0x3FFF;
            uint64_t v22 = (char *)v20[488];
            unint64_t v23 = v20[489];
            if ((unint64_t)v22 >= v23)
            {
              unint64_t v122 = (char *)v20[487];
              uint64_t v123 = (v22 - v122) >> 3;
              if ((unint64_t)(v123 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v124 = v23 - (void)v122;
              unint64_t v125 = (uint64_t)(v23 - (void)v122) >> 2;
              if (v125 <= v123 + 1) {
                unint64_t v125 = v123 + 1;
              }
              if (v124 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v126 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v126 = v125;
              }
              if (v126)
              {
                unint64_t v127 = (char *)sub_5714((uint64_t)(v20 + 489), v126);
                uint64_t v22 = (char *)v20[488];
                unint64_t v122 = (char *)v20[487];
              }
              else
              {
                unint64_t v127 = 0;
              }
              uint64_t v234 = &v127[8 * v123];
              *(void *)uint64_t v234 = v21;
              unint64_t v24 = v234 + 8;
              while (v22 != v122)
              {
                uint64_t v235 = *((void *)v22 - 1);
                v22 -= 8;
                *((void *)v234 - 1) = v235;
                v234 -= 8;
              }
              v20[487] = v234;
              v20[488] = v24;
              v20[489] = &v127[8 * v126];
              if (v122) {
                operator delete(v122);
              }
            }
            else
            {
              *(void *)uint64_t v22 = v21;
              unint64_t v24 = v22 + 8;
            }
            v20[488] = v24;
            break;
          case 0x83:
            unint64_t v25 = *(void **)a1[2];
            uint64_t v26 = *(_WORD *)(a1[3] + 34) & 0x3FFF;
            uint64_t v27 = (char *)v25[491];
            unint64_t v28 = v25[492];
            if ((unint64_t)v27 >= v28)
            {
              unint64_t v128 = (char *)v25[490];
              uint64_t v129 = (v27 - v128) >> 3;
              if ((unint64_t)(v129 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v130 = v28 - (void)v128;
              unint64_t v131 = (uint64_t)(v28 - (void)v128) >> 2;
              if (v131 <= v129 + 1) {
                unint64_t v131 = v129 + 1;
              }
              if (v130 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v132 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v132 = v131;
              }
              if (v132)
              {
                uint64_t v133 = (char *)sub_5714((uint64_t)(v25 + 492), v132);
                uint64_t v27 = (char *)v25[491];
                unint64_t v128 = (char *)v25[490];
              }
              else
              {
                uint64_t v133 = 0;
              }
              uint64_t v236 = &v133[8 * v129];
              *(void *)uint64_t v236 = v26;
              unint64_t v29 = v236 + 8;
              while (v27 != v128)
              {
                uint64_t v237 = *((void *)v27 - 1);
                v27 -= 8;
                *((void *)v236 - 1) = v237;
                v236 -= 8;
              }
              v25[490] = v236;
              v25[491] = v29;
              v25[492] = &v133[8 * v132];
              if (v128) {
                operator delete(v128);
              }
            }
            else
            {
              *(void *)uint64_t v27 = v26;
              unint64_t v29 = v27 + 8;
            }
            v25[491] = v29;
            break;
          case 0x84:
            unint64_t v30 = *(void **)a1[2];
            uint64_t v31 = *(_WORD *)(a1[3] + 52) & 0x3FFF;
            unint64_t v32 = (char *)v30[494];
            unint64_t v33 = v30[495];
            if ((unint64_t)v32 >= v33)
            {
              unint64_t v134 = (char *)v30[493];
              uint64_t v135 = (v32 - v134) >> 3;
              if ((unint64_t)(v135 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v136 = v33 - (void)v134;
              unint64_t v137 = (uint64_t)(v33 - (void)v134) >> 2;
              if (v137 <= v135 + 1) {
                unint64_t v137 = v135 + 1;
              }
              if (v136 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v138 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v138 = v137;
              }
              if (v138)
              {
                uint64_t v139 = (char *)sub_5714((uint64_t)(v30 + 495), v138);
                unint64_t v32 = (char *)v30[494];
                unint64_t v134 = (char *)v30[493];
              }
              else
              {
                uint64_t v139 = 0;
              }
              unint64_t v238 = &v139[8 * v135];
              *(void *)unint64_t v238 = v31;
              uint64_t v34 = v238 + 8;
              while (v32 != v134)
              {
                uint64_t v239 = *((void *)v32 - 1);
                v32 -= 8;
                *((void *)v238 - 1) = v239;
                v238 -= 8;
              }
              v30[493] = v238;
              v30[494] = v34;
              v30[495] = &v139[8 * v138];
              if (v134) {
                operator delete(v134);
              }
            }
            else
            {
              *(void *)unint64_t v32 = v31;
              uint64_t v34 = v32 + 8;
            }
            v30[494] = v34;
            break;
          case 0x85:
            uint64_t v35 = *(void **)a1[2];
            uint64_t v36 = *(_WORD *)(a1[3] + 36) & 0x3FFF;
            unint64_t v37 = (char *)v35[497];
            unint64_t v38 = v35[498];
            if ((unint64_t)v37 >= v38)
            {
              uint64_t v140 = (char *)v35[496];
              uint64_t v141 = (v37 - v140) >> 3;
              if ((unint64_t)(v141 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v142 = v38 - (void)v140;
              unint64_t v143 = (uint64_t)(v38 - (void)v140) >> 2;
              if (v143 <= v141 + 1) {
                unint64_t v143 = v141 + 1;
              }
              if (v142 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v144 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v144 = v143;
              }
              if (v144)
              {
                unint64_t v145 = (char *)sub_5714((uint64_t)(v35 + 498), v144);
                unint64_t v37 = (char *)v35[497];
                uint64_t v140 = (char *)v35[496];
              }
              else
              {
                unint64_t v145 = 0;
              }
              uint64_t v240 = &v145[8 * v141];
              *(void *)uint64_t v240 = v36;
              uint64_t v39 = v240 + 8;
              while (v37 != v140)
              {
                uint64_t v241 = *((void *)v37 - 1);
                v37 -= 8;
                *((void *)v240 - 1) = v241;
                v240 -= 8;
              }
              v35[496] = v240;
              v35[497] = v39;
              v35[498] = &v145[8 * v144];
              if (v140) {
                operator delete(v140);
              }
            }
            else
            {
              *(void *)unint64_t v37 = v36;
              uint64_t v39 = v37 + 8;
            }
            v35[497] = v39;
            break;
          case 0x86:
            uint64_t v40 = *(void **)a1[2];
            uint64_t v41 = *(_DWORD *)(a1[3] + 20) & 0x3FFFFLL;
            unint64_t v42 = (uint64_t *)v40[500];
            unint64_t v43 = v40[501];
            if ((unint64_t)v42 >= v43)
            {
              unint64_t v146 = (uint64_t *)v40[499];
              uint64_t v147 = v42 - v146;
              if ((unint64_t)(v147 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v148 = v43 - (void)v146;
              unint64_t v149 = (uint64_t)(v43 - (void)v146) >> 2;
              if (v149 <= v147 + 1) {
                unint64_t v149 = v147 + 1;
              }
              if (v148 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v150 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v150 = v149;
              }
              if (v150)
              {
                uint64_t v151 = (char *)sub_5714((uint64_t)(v40 + 501), v150);
                unint64_t v42 = (uint64_t *)v40[500];
                unint64_t v146 = (uint64_t *)v40[499];
              }
              else
              {
                uint64_t v151 = 0;
              }
              unint64_t v242 = (uint64_t *)&v151[8 * v147];
              *unint64_t v242 = v41;
              unint64_t v44 = v242 + 1;
              while (v42 != v146)
              {
                uint64_t v243 = *--v42;
                *--unint64_t v242 = v243;
              }
              v40[499] = v242;
              v40[500] = v44;
              v40[501] = &v151[8 * v150];
              if (v146) {
                operator delete(v146);
              }
            }
            else
            {
              *unint64_t v42 = v41;
              unint64_t v44 = v42 + 1;
            }
            v40[500] = v44;
            break;
          case 0x87:
            uint64_t v45 = *(void **)a1[2];
            uint64_t v46 = *(_WORD *)(a1[3] + 42) & 0x3FFF;
            unint64_t v47 = (char *)v45[503];
            unint64_t v48 = v45[504];
            if ((unint64_t)v47 >= v48)
            {
              uint64_t v152 = (char *)v45[502];
              uint64_t v153 = (v47 - v152) >> 3;
              if ((unint64_t)(v153 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v154 = v48 - (void)v152;
              unint64_t v155 = (uint64_t)(v48 - (void)v152) >> 2;
              if (v155 <= v153 + 1) {
                unint64_t v155 = v153 + 1;
              }
              if (v154 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v156 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v156 = v155;
              }
              if (v156)
              {
                unint64_t v157 = (char *)sub_5714((uint64_t)(v45 + 504), v156);
                unint64_t v47 = (char *)v45[503];
                uint64_t v152 = (char *)v45[502];
              }
              else
              {
                unint64_t v157 = 0;
              }
              uint64_t v244 = &v157[8 * v153];
              *(void *)uint64_t v244 = v46;
              uint64_t v49 = v244 + 8;
              while (v47 != v152)
              {
                uint64_t v245 = *((void *)v47 - 1);
                v47 -= 8;
                *((void *)v244 - 1) = v245;
                v244 -= 8;
              }
              v45[502] = v244;
              v45[503] = v49;
              v45[504] = &v157[8 * v156];
              if (v152) {
                operator delete(v152);
              }
            }
            else
            {
              *(void *)unint64_t v47 = v46;
              uint64_t v49 = v47 + 8;
            }
            v45[503] = v49;
            break;
          case 0x88:
            unint64_t v50 = *(void **)a1[2];
            uint64_t v51 = *(_WORD *)(a1[3] + 26) & 0x3FFF;
            unint64_t v52 = (char *)v50[506];
            unint64_t v53 = v50[507];
            if ((unint64_t)v52 >= v53)
            {
              uint64_t v158 = (char *)v50[505];
              uint64_t v159 = (v52 - v158) >> 3;
              if ((unint64_t)(v159 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v160 = v53 - (void)v158;
              unint64_t v161 = (uint64_t)(v53 - (void)v158) >> 2;
              if (v161 <= v159 + 1) {
                unint64_t v161 = v159 + 1;
              }
              if (v160 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v162 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v162 = v161;
              }
              if (v162)
              {
                unint64_t v163 = (char *)sub_5714((uint64_t)(v50 + 507), v162);
                unint64_t v52 = (char *)v50[506];
                uint64_t v158 = (char *)v50[505];
              }
              else
              {
                unint64_t v163 = 0;
              }
              unint64_t v246 = &v163[8 * v159];
              *(void *)unint64_t v246 = v51;
              uint64_t v54 = v246 + 8;
              while (v52 != v158)
              {
                uint64_t v247 = *((void *)v52 - 1);
                v52 -= 8;
                *((void *)v246 - 1) = v247;
                v246 -= 8;
              }
              v50[505] = v246;
              v50[506] = v54;
              v50[507] = &v163[8 * v162];
              if (v158) {
                operator delete(v158);
              }
            }
            else
            {
              *(void *)unint64_t v52 = v51;
              uint64_t v54 = v52 + 8;
            }
            v50[506] = v54;
            break;
          case 0x89:
            uint64_t v55 = *(void **)a1[2];
            uint64_t v56 = *(_WORD *)(a1[3] + 44) & 0x3FFF;
            unint64_t v57 = (char *)v55[509];
            unint64_t v58 = v55[510];
            if ((unint64_t)v57 >= v58)
            {
              uint64_t v164 = (char *)v55[508];
              uint64_t v165 = (v57 - v164) >> 3;
              if ((unint64_t)(v165 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v166 = v58 - (void)v164;
              unint64_t v167 = (uint64_t)(v58 - (void)v164) >> 2;
              if (v167 <= v165 + 1) {
                unint64_t v167 = v165 + 1;
              }
              if (v166 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v168 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v168 = v167;
              }
              if (v168)
              {
                unint64_t v169 = (char *)sub_5714((uint64_t)(v55 + 510), v168);
                unint64_t v57 = (char *)v55[509];
                uint64_t v164 = (char *)v55[508];
              }
              else
              {
                unint64_t v169 = 0;
              }
              uint64_t v248 = &v169[8 * v165];
              *(void *)uint64_t v248 = v56;
              unint64_t v59 = v248 + 8;
              while (v57 != v164)
              {
                uint64_t v249 = *((void *)v57 - 1);
                v57 -= 8;
                *((void *)v248 - 1) = v249;
                v248 -= 8;
              }
              v55[508] = v248;
              v55[509] = v59;
              v55[510] = &v169[8 * v168];
              if (v164) {
                operator delete(v164);
              }
            }
            else
            {
              *(void *)unint64_t v57 = v56;
              unint64_t v59 = v57 + 8;
            }
            v55[509] = v59;
            break;
          case 0x8A:
            unint64_t v60 = *(void **)a1[2];
            uint64_t v61 = *(_WORD *)(a1[3] + 28) & 0x3FFF;
            unint64_t v62 = (char *)v60[512];
            unint64_t v63 = v60[513];
            if ((unint64_t)v62 >= v63)
            {
              uint64_t v170 = (char *)v60[511];
              uint64_t v171 = (v62 - v170) >> 3;
              if ((unint64_t)(v171 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v172 = v63 - (void)v170;
              unint64_t v173 = (uint64_t)(v63 - (void)v170) >> 2;
              if (v173 <= v171 + 1) {
                unint64_t v173 = v171 + 1;
              }
              if (v172 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v174 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v174 = v173;
              }
              if (v174)
              {
                unint64_t v175 = (char *)sub_5714((uint64_t)(v60 + 513), v174);
                unint64_t v62 = (char *)v60[512];
                uint64_t v170 = (char *)v60[511];
              }
              else
              {
                unint64_t v175 = 0;
              }
              uint64_t v250 = &v175[8 * v171];
              *(void *)uint64_t v250 = v61;
              uint64_t v64 = v250 + 8;
              while (v62 != v170)
              {
                uint64_t v251 = *((void *)v62 - 1);
                v62 -= 8;
                *((void *)v250 - 1) = v251;
                v250 -= 8;
              }
              v60[511] = v250;
              v60[512] = v64;
              v60[513] = &v175[8 * v174];
              if (v170) {
                operator delete(v170);
              }
            }
            else
            {
              *(void *)unint64_t v62 = v61;
              uint64_t v64 = v62 + 8;
            }
            v60[512] = v64;
            break;
          case 0x8B:
            unint64_t v65 = *(void **)a1[2];
            uint64_t v66 = *(_WORD *)(a1[3] + 46) & 0x3FFF;
            uint64_t v67 = (char *)v65[515];
            unint64_t v68 = v65[516];
            if ((unint64_t)v67 >= v68)
            {
              unint64_t v176 = (char *)v65[514];
              uint64_t v177 = (v67 - v176) >> 3;
              if ((unint64_t)(v177 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v178 = v68 - (void)v176;
              unint64_t v179 = (uint64_t)(v68 - (void)v176) >> 2;
              if (v179 <= v177 + 1) {
                unint64_t v179 = v177 + 1;
              }
              if (v178 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v180 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v180 = v179;
              }
              if (v180)
              {
                uint64_t v181 = (char *)sub_5714((uint64_t)(v65 + 516), v180);
                uint64_t v67 = (char *)v65[515];
                unint64_t v176 = (char *)v65[514];
              }
              else
              {
                uint64_t v181 = 0;
              }
              unint64_t v252 = &v181[8 * v177];
              *(void *)unint64_t v252 = v66;
              uint64_t v69 = v252 + 8;
              while (v67 != v176)
              {
                uint64_t v253 = *((void *)v67 - 1);
                v67 -= 8;
                *((void *)v252 - 1) = v253;
                v252 -= 8;
              }
              v65[514] = v252;
              v65[515] = v69;
              v65[516] = &v181[8 * v180];
              if (v176) {
                operator delete(v176);
              }
            }
            else
            {
              *(void *)uint64_t v67 = v66;
              uint64_t v69 = v67 + 8;
            }
            v65[515] = v69;
            break;
          case 0x8C:
            unint64_t v70 = *(void **)a1[2];
            uint64_t v71 = *(_WORD *)(a1[3] + 30) & 0x3FFF;
            unint64_t v72 = (char *)v70[518];
            unint64_t v73 = v70[519];
            if ((unint64_t)v72 >= v73)
            {
              uint64_t v182 = (char *)v70[517];
              uint64_t v183 = (v72 - v182) >> 3;
              if ((unint64_t)(v183 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v184 = v73 - (void)v182;
              unint64_t v185 = (uint64_t)(v73 - (void)v182) >> 2;
              if (v185 <= v183 + 1) {
                unint64_t v185 = v183 + 1;
              }
              if (v184 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v186 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v186 = v185;
              }
              if (v186)
              {
                uint64_t v187 = (char *)sub_5714((uint64_t)(v70 + 519), v186);
                unint64_t v72 = (char *)v70[518];
                uint64_t v182 = (char *)v70[517];
              }
              else
              {
                uint64_t v187 = 0;
              }
              v254 = &v187[8 * v183];
              *(void *)v254 = v71;
              unint64_t v74 = v254 + 8;
              while (v72 != v182)
              {
                uint64_t v255 = *((void *)v72 - 1);
                v72 -= 8;
                *((void *)v254 - 1) = v255;
                v254 -= 8;
              }
              v70[517] = v254;
              v70[518] = v74;
              v70[519] = &v187[8 * v186];
              if (v182) {
                operator delete(v182);
              }
            }
            else
            {
              *(void *)unint64_t v72 = v71;
              unint64_t v74 = v72 + 8;
            }
            v70[518] = v74;
            break;
          case 0x8D:
            unint64_t v75 = *(void **)a1[2];
            uint64_t v76 = *(_DWORD *)(a1[3] + 16) & 0x3FFFFLL;
            uint64_t v77 = (uint64_t *)v75[521];
            unint64_t v78 = v75[522];
            if ((unint64_t)v77 >= v78)
            {
              unint64_t v188 = (uint64_t *)v75[520];
              uint64_t v189 = v77 - v188;
              if ((unint64_t)(v189 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v190 = v78 - (void)v188;
              unint64_t v191 = (uint64_t)(v78 - (void)v188) >> 2;
              if (v191 <= v189 + 1) {
                unint64_t v191 = v189 + 1;
              }
              if (v190 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v192 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v192 = v191;
              }
              if (v192)
              {
                uint64_t v193 = (char *)sub_5714((uint64_t)(v75 + 522), v192);
                uint64_t v77 = (uint64_t *)v75[521];
                unint64_t v188 = (uint64_t *)v75[520];
              }
              else
              {
                uint64_t v193 = 0;
              }
              unint64_t v256 = (uint64_t *)&v193[8 * v189];
              *unint64_t v256 = v76;
              uint64_t v79 = v256 + 1;
              while (v77 != v188)
              {
                uint64_t v257 = *--v77;
                *--unint64_t v256 = v257;
              }
              v75[520] = v256;
              v75[521] = v79;
              v75[522] = &v193[8 * v192];
              if (v188) {
                operator delete(v188);
              }
            }
            else
            {
              *uint64_t v77 = v76;
              uint64_t v79 = v77 + 1;
            }
            v75[521] = v79;
            break;
          case 0x8E:
            unint64_t v80 = *(void **)a1[2];
            uint64_t v81 = *(_WORD *)(a1[3] + 24) & 0x1FFF;
            uint64_t v82 = (char *)v80[524];
            unint64_t v83 = v80[525];
            if ((unint64_t)v82 >= v83)
            {
              uint64_t v194 = (char *)v80[523];
              uint64_t v195 = (v82 - v194) >> 3;
              if ((unint64_t)(v195 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v196 = v83 - (void)v194;
              unint64_t v197 = (uint64_t)(v83 - (void)v194) >> 2;
              if (v197 <= v195 + 1) {
                unint64_t v197 = v195 + 1;
              }
              if (v196 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v198 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v198 = v197;
              }
              if (v198)
              {
                unint64_t v199 = (char *)sub_5714((uint64_t)(v80 + 525), v198);
                uint64_t v82 = (char *)v80[524];
                uint64_t v194 = (char *)v80[523];
              }
              else
              {
                unint64_t v199 = 0;
              }
              uint64_t v258 = &v199[8 * v195];
              *(void *)uint64_t v258 = v81;
              unint64_t v84 = v258 + 8;
              while (v82 != v194)
              {
                uint64_t v259 = *((void *)v82 - 1);
                v82 -= 8;
                *((void *)v258 - 1) = v259;
                v258 -= 8;
              }
              v80[523] = v258;
              v80[524] = v84;
              v80[525] = &v199[8 * v198];
              if (v194) {
                operator delete(v194);
              }
            }
            else
            {
              *(void *)uint64_t v82 = v81;
              unint64_t v84 = v82 + 8;
            }
            v80[524] = v84;
            break;
          case 0x8F:
            unint64_t v85 = *(void **)a1[2];
            uint64_t v86 = *(_WORD *)(a1[3] + 54) & 0x1FF;
            uint64_t v87 = (char *)v85[527];
            unint64_t v88 = v85[528];
            if ((unint64_t)v87 >= v88)
            {
              unint64_t v200 = (char *)v85[526];
              uint64_t v201 = (v87 - v200) >> 3;
              if ((unint64_t)(v201 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v202 = v88 - (void)v200;
              unint64_t v203 = (uint64_t)(v88 - (void)v200) >> 2;
              if (v203 <= v201 + 1) {
                unint64_t v203 = v201 + 1;
              }
              if (v202 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v204 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v204 = v203;
              }
              if (v204)
              {
                unint64_t v205 = (char *)sub_5714((uint64_t)(v85 + 528), v204);
                uint64_t v87 = (char *)v85[527];
                unint64_t v200 = (char *)v85[526];
              }
              else
              {
                unint64_t v205 = 0;
              }
              unint64_t v260 = &v205[8 * v201];
              *(void *)unint64_t v260 = v86;
              unint64_t v89 = v260 + 8;
              while (v87 != v200)
              {
                uint64_t v261 = *((void *)v87 - 1);
                v87 -= 8;
                *((void *)v260 - 1) = v261;
                v260 -= 8;
              }
              v85[526] = v260;
              v85[527] = v89;
              v85[528] = &v205[8 * v204];
              if (v200) {
                operator delete(v200);
              }
            }
            else
            {
              *(void *)uint64_t v87 = v86;
              unint64_t v89 = v87 + 8;
            }
            v85[527] = v89;
            break;
          case 0x90:
            uint64_t v90 = *(void **)a1[2];
            uint64_t v91 = *(_WORD *)(a1[3] + 38) & 0x1FF;
            uint64_t v92 = (char *)v90[530];
            unint64_t v93 = v90[531];
            if ((unint64_t)v92 >= v93)
            {
              v206 = (char *)v90[529];
              uint64_t v207 = (v92 - v206) >> 3;
              if ((unint64_t)(v207 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v208 = v93 - (void)v206;
              unint64_t v209 = (uint64_t)(v93 - (void)v206) >> 2;
              if (v209 <= v207 + 1) {
                unint64_t v209 = v207 + 1;
              }
              if (v208 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v210 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v210 = v209;
              }
              if (v210)
              {
                uint64_t v211 = (char *)sub_5714((uint64_t)(v90 + 531), v210);
                uint64_t v92 = (char *)v90[530];
                v206 = (char *)v90[529];
              }
              else
              {
                uint64_t v211 = 0;
              }
              uint64_t v262 = &v211[8 * v207];
              *(void *)uint64_t v262 = v91;
              unint64_t v94 = v262 + 8;
              while (v92 != v206)
              {
                uint64_t v263 = *((void *)v92 - 1);
                v92 -= 8;
                *((void *)v262 - 1) = v263;
                v262 -= 8;
              }
              v90[529] = v262;
              v90[530] = v94;
              v90[531] = &v211[8 * v210];
              if (v206) {
                operator delete(v206);
              }
            }
            else
            {
              *(void *)uint64_t v92 = v91;
              unint64_t v94 = v92 + 8;
            }
            v90[530] = v94;
            break;
          case 0x91:
            uint64_t v95 = *(void **)a1[2];
            uint64_t v96 = *(_WORD *)(a1[3] + 56) & 0x1FF;
            uint64_t v97 = (char *)v95[533];
            unint64_t v98 = v95[534];
            if ((unint64_t)v97 >= v98)
            {
              uint64_t v212 = (char *)v95[532];
              uint64_t v213 = (v97 - v212) >> 3;
              if ((unint64_t)(v213 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v214 = v98 - (void)v212;
              unint64_t v215 = (uint64_t)(v98 - (void)v212) >> 2;
              if (v215 <= v213 + 1) {
                unint64_t v215 = v213 + 1;
              }
              if (v214 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v216 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v216 = v215;
              }
              if (v216)
              {
                unint64_t v217 = (char *)sub_5714((uint64_t)(v95 + 534), v216);
                uint64_t v97 = (char *)v95[533];
                uint64_t v212 = (char *)v95[532];
              }
              else
              {
                unint64_t v217 = 0;
              }
              v264 = &v217[8 * v213];
              *(void *)v264 = v96;
              unint64_t v99 = v264 + 8;
              while (v97 != v212)
              {
                uint64_t v265 = *((void *)v97 - 1);
                v97 -= 8;
                *((void *)v264 - 1) = v265;
                v264 -= 8;
              }
              v95[532] = v264;
              v95[533] = v99;
              v95[534] = &v217[8 * v216];
              if (v212) {
                operator delete(v212);
              }
            }
            else
            {
              *(void *)uint64_t v97 = v96;
              unint64_t v99 = v97 + 8;
            }
            v95[533] = v99;
            break;
          case 0x92:
            unint64_t v100 = *(void **)a1[2];
            uint64_t v101 = *(_WORD *)(a1[3] + 40) & 0x1FF;
            uint64_t v102 = (char *)v100[536];
            unint64_t v103 = v100[537];
            if ((unint64_t)v102 >= v103)
            {
              unint64_t v218 = (char *)v100[535];
              uint64_t v219 = (v102 - v218) >> 3;
              if ((unint64_t)(v219 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v220 = v103 - (void)v218;
              unint64_t v221 = (uint64_t)(v103 - (void)v218) >> 2;
              if (v221 <= v219 + 1) {
                unint64_t v221 = v219 + 1;
              }
              if (v220 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v222 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v222 = v221;
              }
              if (v222)
              {
                uint64_t v223 = (char *)sub_5714((uint64_t)(v100 + 537), v222);
                uint64_t v102 = (char *)v100[536];
                unint64_t v218 = (char *)v100[535];
              }
              else
              {
                uint64_t v223 = 0;
              }
              v266 = &v223[8 * v219];
              *(void *)v266 = v101;
              uint64_t v104 = v266 + 8;
              while (v102 != v218)
              {
                uint64_t v267 = *((void *)v102 - 1);
                v102 -= 8;
                *((void *)v266 - 1) = v267;
                v266 -= 8;
              }
              v100[535] = v266;
              v100[536] = v104;
              v100[537] = &v223[8 * v222];
              if (v218) {
                operator delete(v218);
              }
            }
            else
            {
              *(void *)uint64_t v102 = v101;
              uint64_t v104 = v102 + 8;
            }
            v100[536] = v104;
            break;
          case 0x93:
            unint64_t v105 = *(void **)a1[2];
            unint64_t v106 = (unint64_t)*(unsigned int *)(a1[3] + 20) >> 18;
            uint64_t v107 = (unint64_t *)v105[539];
            unint64_t v108 = v105[540];
            if ((unint64_t)v107 >= v108)
            {
              v224 = (unint64_t *)v105[538];
              uint64_t v225 = v107 - v224;
              if ((unint64_t)(v225 + 1) >> 61) {
LABEL_378:
              }
                sub_566C();
              unint64_t v226 = v108 - (void)v224;
              unint64_t v227 = (uint64_t)(v108 - (void)v224) >> 2;
              if (v227 <= v225 + 1) {
                unint64_t v227 = v225 + 1;
              }
              if (v226 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v228 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v228 = v227;
              }
              if (v228)
              {
                unint64_t v229 = (char *)sub_5714((uint64_t)(v105 + 540), v228);
                uint64_t v107 = (unint64_t *)v105[539];
                v224 = (unint64_t *)v105[538];
              }
              else
              {
                unint64_t v229 = 0;
              }
              v268 = (unint64_t *)&v229[8 * v225];
              unint64_t *v268 = v106;
              uint64_t v109 = v268 + 1;
              while (v107 != v224)
              {
                unint64_t v269 = *--v107;
                *--v268 = v269;
              }
              v105[538] = v268;
              v105[539] = v109;
              v105[540] = &v229[8 * v228];
              if (v224) {
                operator delete(v224);
              }
            }
            else
            {
              *uint64_t v107 = v106;
              uint64_t v109 = v107 + 1;
            }
            v105[539] = v109;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_555F4(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    unint64_t v143 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    unint64_t v142 = *v143;
    uint64_t v144 = (char *)v143[1] - (char *)*v143;
    if (v144)
    {
      unint64_t v145 = v144 >> 2;
      if (v145 <= 1) {
        unint64_t v145 = 1;
      }
      do
      {
        int v146 = *v142++;
        switch(v146)
        {
          case 158:
            uint64_t v147 = *(_DWORD *)(a1[3] + 36) & 0xFFFFF;
            unint64_t v148 = (void *)(*(void *)a1[2] + 4576);
            goto LABEL_194;
          case 159:
            uint64_t v147 = *(_DWORD *)(a1[3] + 40) & 0xFFFFF;
            unint64_t v148 = (void *)(*(void *)a1[2] + 4600);
            goto LABEL_194;
          case 160:
            uint64_t v147 = *(_DWORD *)(a1[3] + 44) & 0xFFFFF;
            unint64_t v148 = (void *)(*(void *)a1[2] + 4624);
            goto LABEL_194;
          case 161:
            uint64_t v147 = *(unsigned __int16 *)(a1[3] + 50);
            unint64_t v148 = (void *)(*(void *)a1[2] + 4648);
            goto LABEL_194;
          case 162:
            uint64_t v147 = *(unsigned __int16 *)(a1[3] + 48);
            unint64_t v148 = (void *)(*(void *)a1[2] + 4672);
            goto LABEL_194;
          case 163:
            uint64_t v147 = *(_DWORD *)(a1[3] + 24) & 0xFFFFF;
            unint64_t v148 = (void *)(*(void *)a1[2] + 4696);
            goto LABEL_194;
          case 164:
            uint64_t v147 = *(_DWORD *)(a1[3] + 28) & 0xFFFFF;
            unint64_t v148 = (void *)(*(void *)a1[2] + 4720);
            goto LABEL_194;
          case 165:
            uint64_t v147 = *(_DWORD *)(a1[3] + 32) & 0xFFFFF;
            unint64_t v148 = (void *)(*(void *)a1[2] + 4744);
            goto LABEL_194;
          case 166:
            uint64_t v147 = *(_DWORD *)(a1[3] + 16) & 0xFFFFF;
            unint64_t v148 = (void *)(*(void *)a1[2] + 4768);
            goto LABEL_194;
          case 167:
            uint64_t v147 = *(_DWORD *)(a1[3] + 20) & 0xFFFFF;
            unint64_t v148 = (void *)(*(void *)a1[2] + 4792);
LABEL_194:
            *(void *)(*v148 - 8) += v147;
            break;
          default:
            break;
        }
        --v145;
      }
      while (v145);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0x9E:
            uint64_t v10 = *(void **)a1[2];
            uint64_t v11 = *(_DWORD *)(a1[3] + 36) & 0xFFFFFLL;
            unsigned int v12 = (uint64_t *)v10[572];
            unint64_t v13 = v10[573];
            if ((unint64_t)v12 >= v13)
            {
              unint64_t v62 = (uint64_t *)v10[571];
              uint64_t v63 = v12 - v62;
              if ((unint64_t)(v63 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v64 = v13 - (void)v62;
              unint64_t v65 = (uint64_t)(v13 - (void)v62) >> 2;
              if (v65 <= v63 + 1) {
                unint64_t v65 = v63 + 1;
              }
              if (v64 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v66 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v66 = v65;
              }
              if (v66)
              {
                uint64_t v67 = (char *)sub_5714((uint64_t)(v10 + 573), v66);
                unsigned int v12 = (uint64_t *)v10[572];
                unint64_t v62 = (uint64_t *)v10[571];
              }
              else
              {
                uint64_t v67 = 0;
              }
              unint64_t v122 = (uint64_t *)&v67[8 * v63];
              *unint64_t v122 = v11;
              unint64_t v14 = v122 + 1;
              while (v12 != v62)
              {
                uint64_t v123 = *--v12;
                *--unint64_t v122 = v123;
              }
              v10[571] = v122;
              v10[572] = v14;
              v10[573] = &v67[8 * v66];
              if (v62) {
                operator delete(v62);
              }
            }
            else
            {
              uint64_t *v12 = v11;
              unint64_t v14 = v12 + 1;
            }
            v10[572] = v14;
            break;
          case 0x9F:
            unint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_DWORD *)(a1[3] + 40) & 0xFFFFFLL;
            uint64_t v17 = (uint64_t *)v15[575];
            unint64_t v18 = v15[576];
            if ((unint64_t)v17 >= v18)
            {
              unint64_t v68 = (uint64_t *)v15[574];
              uint64_t v69 = v17 - v68;
              if ((unint64_t)(v69 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v70 = v18 - (void)v68;
              unint64_t v71 = (uint64_t)(v18 - (void)v68) >> 2;
              if (v71 <= v69 + 1) {
                unint64_t v71 = v69 + 1;
              }
              if (v70 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v72 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v72 = v71;
              }
              if (v72)
              {
                unint64_t v73 = (char *)sub_5714((uint64_t)(v15 + 576), v72);
                uint64_t v17 = (uint64_t *)v15[575];
                unint64_t v68 = (uint64_t *)v15[574];
              }
              else
              {
                unint64_t v73 = 0;
              }
              unint64_t v124 = (uint64_t *)&v73[8 * v69];
              uint64_t *v124 = v16;
              unint64_t v19 = v124 + 1;
              while (v17 != v68)
              {
                uint64_t v125 = *--v17;
                *--unint64_t v124 = v125;
              }
              v15[574] = v124;
              v15[575] = v19;
              v15[576] = &v73[8 * v72];
              if (v68) {
                operator delete(v68);
              }
            }
            else
            {
              *uint64_t v17 = v16;
              unint64_t v19 = v17 + 1;
            }
            v15[575] = v19;
            break;
          case 0xA0:
            uint64_t v20 = *(void **)a1[2];
            uint64_t v21 = *(_DWORD *)(a1[3] + 44) & 0xFFFFFLL;
            uint64_t v22 = (uint64_t *)v20[578];
            unint64_t v23 = v20[579];
            if ((unint64_t)v22 >= v23)
            {
              unint64_t v74 = (uint64_t *)v20[577];
              uint64_t v75 = v22 - v74;
              if ((unint64_t)(v75 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v76 = v23 - (void)v74;
              unint64_t v77 = (uint64_t)(v23 - (void)v74) >> 2;
              if (v77 <= v75 + 1) {
                unint64_t v77 = v75 + 1;
              }
              if (v76 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v78 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v78 = v77;
              }
              if (v78)
              {
                uint64_t v79 = (char *)sub_5714((uint64_t)(v20 + 579), v78);
                uint64_t v22 = (uint64_t *)v20[578];
                unint64_t v74 = (uint64_t *)v20[577];
              }
              else
              {
                uint64_t v79 = 0;
              }
              unint64_t v126 = (uint64_t *)&v79[8 * v75];
              uint64_t *v126 = v21;
              unint64_t v24 = v126 + 1;
              while (v22 != v74)
              {
                uint64_t v127 = *--v22;
                *--unint64_t v126 = v127;
              }
              v20[577] = v126;
              v20[578] = v24;
              v20[579] = &v79[8 * v78];
              if (v74) {
                operator delete(v74);
              }
            }
            else
            {
              uint64_t *v22 = v21;
              unint64_t v24 = v22 + 1;
            }
            v20[578] = v24;
            break;
          case 0xA1:
            uint64_t v25 = a1[2];
            uint64_t v26 = *(void **)v25;
            uint64_t v27 = *(unsigned __int16 *)(a1[3] + 50);
            unint64_t v28 = *(char **)(*(void *)v25 + 4648);
            unint64_t v29 = *(void *)(*(void *)v25 + 4656);
            if ((unint64_t)v28 >= v29)
            {
              unint64_t v80 = (char *)v26[580];
              uint64_t v81 = (v28 - v80) >> 3;
              if ((unint64_t)(v81 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v82 = v29 - (void)v80;
              unint64_t v83 = (uint64_t)(v29 - (void)v80) >> 2;
              if (v83 <= v81 + 1) {
                unint64_t v83 = v81 + 1;
              }
              if (v82 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v84 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v84 = v83;
              }
              if (v84)
              {
                unint64_t v85 = (char *)sub_5714((uint64_t)(v26 + 582), v84);
                unint64_t v28 = (char *)v26[581];
                unint64_t v80 = (char *)v26[580];
              }
              else
              {
                unint64_t v85 = 0;
              }
              unint64_t v128 = &v85[8 * v81];
              *(void *)unint64_t v128 = v27;
              unint64_t v30 = v128 + 8;
              while (v28 != v80)
              {
                uint64_t v129 = *((void *)v28 - 1);
                v28 -= 8;
                *((void *)v128 - 1) = v129;
                v128 -= 8;
              }
              v26[580] = v128;
              v26[581] = v30;
              v26[582] = &v85[8 * v84];
              if (v80) {
                operator delete(v80);
              }
            }
            else
            {
              *(void *)unint64_t v28 = v27;
              unint64_t v30 = v28 + 8;
            }
            v26[581] = v30;
            break;
          case 0xA2:
            uint64_t v31 = a1[2];
            unint64_t v32 = *(void **)v31;
            uint64_t v33 = *(unsigned __int16 *)(a1[3] + 48);
            uint64_t v34 = *(char **)(*(void *)v31 + 4672);
            unint64_t v35 = *(void *)(*(void *)v31 + 4680);
            if ((unint64_t)v34 >= v35)
            {
              uint64_t v86 = (char *)v32[583];
              uint64_t v87 = (v34 - v86) >> 3;
              if ((unint64_t)(v87 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v88 = v35 - (void)v86;
              unint64_t v89 = (uint64_t)(v35 - (void)v86) >> 2;
              if (v89 <= v87 + 1) {
                unint64_t v89 = v87 + 1;
              }
              if (v88 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v90 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v90 = v89;
              }
              if (v90)
              {
                uint64_t v91 = (char *)sub_5714((uint64_t)(v32 + 585), v90);
                uint64_t v34 = (char *)v32[584];
                uint64_t v86 = (char *)v32[583];
              }
              else
              {
                uint64_t v91 = 0;
              }
              unint64_t v130 = &v91[8 * v87];
              *(void *)unint64_t v130 = v33;
              uint64_t v36 = v130 + 8;
              while (v34 != v86)
              {
                uint64_t v131 = *((void *)v34 - 1);
                v34 -= 8;
                *((void *)v130 - 1) = v131;
                v130 -= 8;
              }
              v32[583] = v130;
              v32[584] = v36;
              v32[585] = &v91[8 * v90];
              if (v86) {
                operator delete(v86);
              }
            }
            else
            {
              *(void *)uint64_t v34 = v33;
              uint64_t v36 = v34 + 8;
            }
            v32[584] = v36;
            break;
          case 0xA3:
            unint64_t v37 = *(void **)a1[2];
            uint64_t v38 = *(_DWORD *)(a1[3] + 24) & 0xFFFFFLL;
            uint64_t v39 = (uint64_t *)v37[587];
            unint64_t v40 = v37[588];
            if ((unint64_t)v39 >= v40)
            {
              uint64_t v92 = (uint64_t *)v37[586];
              uint64_t v93 = v39 - v92;
              if ((unint64_t)(v93 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v94 = v40 - (void)v92;
              unint64_t v95 = (uint64_t)(v40 - (void)v92) >> 2;
              if (v95 <= v93 + 1) {
                unint64_t v95 = v93 + 1;
              }
              if (v94 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v96 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v96 = v95;
              }
              if (v96)
              {
                uint64_t v97 = (char *)sub_5714((uint64_t)(v37 + 588), v96);
                uint64_t v39 = (uint64_t *)v37[587];
                uint64_t v92 = (uint64_t *)v37[586];
              }
              else
              {
                uint64_t v97 = 0;
              }
              unint64_t v132 = (uint64_t *)&v97[8 * v93];
              *unint64_t v132 = v38;
              uint64_t v41 = v132 + 1;
              while (v39 != v92)
              {
                uint64_t v133 = *--v39;
                *--unint64_t v132 = v133;
              }
              v37[586] = v132;
              v37[587] = v41;
              v37[588] = &v97[8 * v96];
              if (v92) {
                operator delete(v92);
              }
            }
            else
            {
              uint64_t *v39 = v38;
              uint64_t v41 = v39 + 1;
            }
            v37[587] = v41;
            break;
          case 0xA4:
            unint64_t v42 = *(void **)a1[2];
            uint64_t v43 = *(_DWORD *)(a1[3] + 28) & 0xFFFFFLL;
            unint64_t v44 = (uint64_t *)v42[590];
            unint64_t v45 = v42[591];
            if ((unint64_t)v44 >= v45)
            {
              unint64_t v98 = (uint64_t *)v42[589];
              uint64_t v99 = v44 - v98;
              if ((unint64_t)(v99 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v100 = v45 - (void)v98;
              unint64_t v101 = (uint64_t)(v45 - (void)v98) >> 2;
              if (v101 <= v99 + 1) {
                unint64_t v101 = v99 + 1;
              }
              if (v100 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v102 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v102 = v101;
              }
              if (v102)
              {
                unint64_t v103 = (char *)sub_5714((uint64_t)(v42 + 591), v102);
                unint64_t v44 = (uint64_t *)v42[590];
                unint64_t v98 = (uint64_t *)v42[589];
              }
              else
              {
                unint64_t v103 = 0;
              }
              unint64_t v134 = (uint64_t *)&v103[8 * v99];
              uint64_t *v134 = v43;
              uint64_t v46 = v134 + 1;
              while (v44 != v98)
              {
                uint64_t v135 = *--v44;
                *--unint64_t v134 = v135;
              }
              v42[589] = v134;
              v42[590] = v46;
              v42[591] = &v103[8 * v102];
              if (v98) {
                operator delete(v98);
              }
            }
            else
            {
              uint64_t *v44 = v43;
              uint64_t v46 = v44 + 1;
            }
            v42[590] = v46;
            break;
          case 0xA5:
            unint64_t v47 = *(void **)a1[2];
            uint64_t v48 = *(_DWORD *)(a1[3] + 32) & 0xFFFFFLL;
            uint64_t v49 = (uint64_t *)v47[593];
            unint64_t v50 = v47[594];
            if ((unint64_t)v49 >= v50)
            {
              uint64_t v104 = (uint64_t *)v47[592];
              uint64_t v105 = v49 - v104;
              if ((unint64_t)(v105 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v106 = v50 - (void)v104;
              unint64_t v107 = (uint64_t)(v50 - (void)v104) >> 2;
              if (v107 <= v105 + 1) {
                unint64_t v107 = v105 + 1;
              }
              if (v106 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v108 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v108 = v107;
              }
              if (v108)
              {
                uint64_t v109 = (char *)sub_5714((uint64_t)(v47 + 594), v108);
                uint64_t v49 = (uint64_t *)v47[593];
                uint64_t v104 = (uint64_t *)v47[592];
              }
              else
              {
                uint64_t v109 = 0;
              }
              unint64_t v136 = (uint64_t *)&v109[8 * v105];
              *unint64_t v136 = v48;
              uint64_t v51 = v136 + 1;
              while (v49 != v104)
              {
                uint64_t v137 = *--v49;
                *--unint64_t v136 = v137;
              }
              v47[592] = v136;
              v47[593] = v51;
              v47[594] = &v109[8 * v108];
              if (v104) {
                operator delete(v104);
              }
            }
            else
            {
              uint64_t *v49 = v48;
              uint64_t v51 = v49 + 1;
            }
            v47[593] = v51;
            break;
          case 0xA6:
            unint64_t v52 = *(void **)a1[2];
            uint64_t v53 = *(_DWORD *)(a1[3] + 16) & 0xFFFFFLL;
            uint64_t v54 = (uint64_t *)v52[596];
            unint64_t v55 = v52[597];
            if ((unint64_t)v54 >= v55)
            {
              uint64_t v110 = (uint64_t *)v52[595];
              uint64_t v111 = v54 - v110;
              if ((unint64_t)(v111 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v112 = v55 - (void)v110;
              unint64_t v113 = (uint64_t)(v55 - (void)v110) >> 2;
              if (v113 <= v111 + 1) {
                unint64_t v113 = v111 + 1;
              }
              if (v112 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v114 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v114 = v113;
              }
              if (v114)
              {
                uint64_t v115 = (char *)sub_5714((uint64_t)(v52 + 597), v114);
                uint64_t v54 = (uint64_t *)v52[596];
                uint64_t v110 = (uint64_t *)v52[595];
              }
              else
              {
                uint64_t v115 = 0;
              }
              unint64_t v138 = (uint64_t *)&v115[8 * v111];
              *unint64_t v138 = v53;
              uint64_t v56 = v138 + 1;
              while (v54 != v110)
              {
                uint64_t v139 = *--v54;
                *--unint64_t v138 = v139;
              }
              v52[595] = v138;
              v52[596] = v56;
              v52[597] = &v115[8 * v114];
              if (v110) {
                operator delete(v110);
              }
            }
            else
            {
              uint64_t *v54 = v53;
              uint64_t v56 = v54 + 1;
            }
            v52[596] = v56;
            break;
          case 0xA7:
            unint64_t v57 = *(void **)a1[2];
            uint64_t v58 = *(_DWORD *)(a1[3] + 20) & 0xFFFFFLL;
            unint64_t v59 = (uint64_t *)v57[599];
            unint64_t v60 = v57[600];
            if ((unint64_t)v59 >= v60)
            {
              uint64_t v116 = (uint64_t *)v57[598];
              uint64_t v117 = v59 - v116;
              if ((unint64_t)(v117 + 1) >> 61) {
LABEL_198:
              }
                sub_566C();
              unint64_t v118 = v60 - (void)v116;
              unint64_t v119 = (uint64_t)(v60 - (void)v116) >> 2;
              if (v119 <= v117 + 1) {
                unint64_t v119 = v117 + 1;
              }
              if (v118 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v120 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v120 = v119;
              }
              if (v120)
              {
                unint64_t v121 = (char *)sub_5714((uint64_t)(v57 + 600), v120);
                unint64_t v59 = (uint64_t *)v57[599];
                uint64_t v116 = (uint64_t *)v57[598];
              }
              else
              {
                unint64_t v121 = 0;
              }
              uint64_t v140 = (uint64_t *)&v121[8 * v117];
              uint64_t *v140 = v58;
              uint64_t v61 = v140 + 1;
              while (v59 != v116)
              {
                uint64_t v141 = *--v59;
                *--uint64_t v140 = v141;
              }
              v57[598] = v140;
              v57[599] = v61;
              v57[600] = &v121[8 * v120];
              if (v116) {
                operator delete(v116);
              }
            }
            else
            {
              uint64_t *v59 = v58;
              uint64_t v61 = v59 + 1;
            }
            v57[599] = v61;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_5606C(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    unint64_t v427 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v426 = *v427;
    uint64_t v428 = (char *)v427[1] - (char *)*v427;
    if (v428)
    {
      unint64_t v429 = v428 >> 2;
      if (v429 <= 1) {
        unint64_t v429 = 1;
      }
      do
      {
        int v430 = *v426++;
        switch(v430)
        {
          case 28:
            v431 = (_WORD *)(a1[3] + 26);
            v432 = (void *)(*(void *)a1[2] + 1456);
            goto LABEL_590;
          case 29:
            v431 = (_WORD *)(a1[3] + 18);
            v432 = (void *)(*(void *)a1[2] + 1480);
            goto LABEL_590;
          case 30:
            v431 = (_WORD *)(a1[3] + 28);
            v432 = (void *)(*(void *)a1[2] + 1504);
            goto LABEL_590;
          case 31:
            v431 = (_WORD *)(a1[3] + 20);
            v432 = (void *)(*(void *)a1[2] + 1528);
            goto LABEL_590;
          case 32:
            v431 = (_WORD *)(a1[3] + 30);
            v432 = (void *)(*(void *)a1[2] + 1552);
            goto LABEL_590;
          case 33:
            v431 = (_WORD *)(a1[3] + 22);
            v432 = (void *)(*(void *)a1[2] + 1576);
            goto LABEL_590;
          case 34:
            v431 = (_WORD *)(a1[3] + 32);
            v432 = (void *)(*(void *)a1[2] + 1600);
            goto LABEL_590;
          case 35:
            v431 = (_WORD *)(a1[3] + 24);
            v432 = (void *)(*(void *)a1[2] + 1624);
            goto LABEL_590;
          case 36:
            v431 = (_WORD *)(a1[3] + 42);
            v432 = (void *)(*(void *)a1[2] + 1648);
            goto LABEL_590;
          case 37:
            v431 = (_WORD *)(a1[3] + 34);
            v432 = (void *)(*(void *)a1[2] + 1672);
            goto LABEL_590;
          case 38:
            v431 = (_WORD *)(a1[3] + 44);
            v432 = (void *)(*(void *)a1[2] + 1696);
            goto LABEL_590;
          case 39:
            v431 = (_WORD *)(a1[3] + 36);
            v432 = (void *)(*(void *)a1[2] + 1720);
            goto LABEL_590;
          case 40:
            v431 = (_WORD *)(a1[3] + 46);
            v432 = (void *)(*(void *)a1[2] + 1744);
            goto LABEL_590;
          case 41:
            v431 = (_WORD *)(a1[3] + 38);
            v432 = (void *)(*(void *)a1[2] + 1768);
            goto LABEL_590;
          case 42:
            v431 = (_WORD *)(a1[3] + 48);
            v432 = (void *)(*(void *)a1[2] + 1792);
            goto LABEL_590;
          case 43:
            v431 = (_WORD *)(a1[3] + 40);
            v432 = (void *)(*(void *)a1[2] + 1816);
            goto LABEL_590;
          case 44:
            v431 = (_WORD *)(a1[3] + 58);
            v432 = (void *)(*(void *)a1[2] + 1840);
            goto LABEL_590;
          case 45:
            v431 = (_WORD *)(a1[3] + 50);
            v432 = (void *)(*(void *)a1[2] + 1864);
            goto LABEL_590;
          case 46:
            v431 = (_WORD *)(a1[3] + 60);
            v432 = (void *)(*(void *)a1[2] + 1888);
            goto LABEL_590;
          case 47:
            v431 = (_WORD *)(a1[3] + 52);
            v432 = (void *)(*(void *)a1[2] + 1912);
            goto LABEL_590;
          case 48:
            v431 = (_WORD *)(a1[3] + 62);
            v432 = (void *)(*(void *)a1[2] + 1936);
            goto LABEL_590;
          case 49:
            v431 = (_WORD *)(a1[3] + 54);
            v432 = (void *)(*(void *)a1[2] + 1960);
            goto LABEL_590;
          case 50:
            v431 = (_WORD *)(a1[3] + 64);
            v432 = (void *)(*(void *)a1[2] + 1984);
            goto LABEL_590;
          case 51:
            v431 = (_WORD *)(a1[3] + 56);
            v432 = (void *)(*(void *)a1[2] + 2008);
            goto LABEL_590;
          case 52:
            v431 = (_WORD *)(a1[3] + 74);
            v432 = (void *)(*(void *)a1[2] + 2032);
            goto LABEL_590;
          case 53:
            v431 = (_WORD *)(a1[3] + 66);
            v432 = (void *)(*(void *)a1[2] + 2056);
            goto LABEL_590;
          case 54:
            v431 = (_WORD *)(a1[3] + 76);
            v432 = (void *)(*(void *)a1[2] + 2080);
            goto LABEL_590;
          case 55:
            v431 = (_WORD *)(a1[3] + 68);
            v432 = (void *)(*(void *)a1[2] + 2104);
            goto LABEL_590;
          case 56:
            v431 = (_WORD *)(a1[3] + 78);
            v432 = (void *)(*(void *)a1[2] + 2128);
            goto LABEL_590;
          case 57:
            v431 = (_WORD *)(a1[3] + 70);
            v432 = (void *)(*(void *)a1[2] + 2152);
            goto LABEL_590;
          case 58:
            v431 = (_WORD *)(a1[3] + 80);
            v432 = (void *)(*(void *)a1[2] + 2176);
            goto LABEL_590;
          case 59:
            v431 = (_WORD *)(a1[3] + 72);
            v432 = (void *)(*(void *)a1[2] + 2200);
LABEL_590:
            *(void *)(*v432 - 8) += *v431 & 0x7FFF;
            break;
          default:
            break;
        }
        --v429;
      }
      while (v429);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0x1C:
            uint64_t v10 = *(void **)a1[2];
            uint64_t v11 = *(_WORD *)(a1[3] + 26) & 0x7FFF;
            unsigned int v12 = (char *)v10[182];
            unint64_t v13 = v10[183];
            if ((unint64_t)v12 >= v13)
            {
              uint64_t v170 = (char *)v10[181];
              uint64_t v171 = (v12 - v170) >> 3;
              if ((unint64_t)(v171 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v172 = v13 - (void)v170;
              unint64_t v173 = (uint64_t)(v13 - (void)v170) >> 2;
              if (v173 <= v171 + 1) {
                unint64_t v173 = v171 + 1;
              }
              if (v172 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v174 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v174 = v173;
              }
              if (v174)
              {
                unint64_t v175 = (char *)sub_5714((uint64_t)(v10 + 183), v174);
                unsigned int v12 = (char *)v10[182];
                uint64_t v170 = (char *)v10[181];
              }
              else
              {
                unint64_t v175 = 0;
              }
              v362 = &v175[8 * v171];
              *(void *)v362 = v11;
              unint64_t v14 = v362 + 8;
              while (v12 != v170)
              {
                uint64_t v363 = *((void *)v12 - 1);
                v12 -= 8;
                *((void *)v362 - 1) = v363;
                v362 -= 8;
              }
              v10[181] = v362;
              v10[182] = v14;
              v10[183] = &v175[8 * v174];
              if (v170) {
                operator delete(v170);
              }
            }
            else
            {
              *(void *)unsigned int v12 = v11;
              unint64_t v14 = v12 + 8;
            }
            v10[182] = v14;
            break;
          case 0x1D:
            unint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_WORD *)(a1[3] + 18) & 0x7FFF;
            uint64_t v17 = (char *)v15[185];
            unint64_t v18 = v15[186];
            if ((unint64_t)v17 >= v18)
            {
              unint64_t v176 = (char *)v15[184];
              uint64_t v177 = (v17 - v176) >> 3;
              if ((unint64_t)(v177 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v178 = v18 - (void)v176;
              unint64_t v179 = (uint64_t)(v18 - (void)v176) >> 2;
              if (v179 <= v177 + 1) {
                unint64_t v179 = v177 + 1;
              }
              if (v178 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v180 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v180 = v179;
              }
              if (v180)
              {
                uint64_t v181 = (char *)sub_5714((uint64_t)(v15 + 186), v180);
                uint64_t v17 = (char *)v15[185];
                unint64_t v176 = (char *)v15[184];
              }
              else
              {
                uint64_t v181 = 0;
              }
              v364 = &v181[8 * v177];
              *(void *)v364 = v16;
              unint64_t v19 = v364 + 8;
              while (v17 != v176)
              {
                uint64_t v365 = *((void *)v17 - 1);
                v17 -= 8;
                *((void *)v364 - 1) = v365;
                v364 -= 8;
              }
              v15[184] = v364;
              v15[185] = v19;
              v15[186] = &v181[8 * v180];
              if (v176) {
                operator delete(v176);
              }
            }
            else
            {
              *(void *)uint64_t v17 = v16;
              unint64_t v19 = v17 + 8;
            }
            v15[185] = v19;
            break;
          case 0x1E:
            uint64_t v20 = *(void **)a1[2];
            uint64_t v21 = *(_WORD *)(a1[3] + 28) & 0x7FFF;
            uint64_t v22 = (char *)v20[188];
            unint64_t v23 = v20[189];
            if ((unint64_t)v22 >= v23)
            {
              uint64_t v182 = (char *)v20[187];
              uint64_t v183 = (v22 - v182) >> 3;
              if ((unint64_t)(v183 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v184 = v23 - (void)v182;
              unint64_t v185 = (uint64_t)(v23 - (void)v182) >> 2;
              if (v185 <= v183 + 1) {
                unint64_t v185 = v183 + 1;
              }
              if (v184 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v186 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v186 = v185;
              }
              if (v186)
              {
                uint64_t v187 = (char *)sub_5714((uint64_t)(v20 + 189), v186);
                uint64_t v22 = (char *)v20[188];
                uint64_t v182 = (char *)v20[187];
              }
              else
              {
                uint64_t v187 = 0;
              }
              v366 = &v187[8 * v183];
              *(void *)v366 = v21;
              unint64_t v24 = v366 + 8;
              while (v22 != v182)
              {
                uint64_t v367 = *((void *)v22 - 1);
                v22 -= 8;
                *((void *)v366 - 1) = v367;
                v366 -= 8;
              }
              v20[187] = v366;
              v20[188] = v24;
              v20[189] = &v187[8 * v186];
              if (v182) {
                operator delete(v182);
              }
            }
            else
            {
              *(void *)uint64_t v22 = v21;
              unint64_t v24 = v22 + 8;
            }
            v20[188] = v24;
            break;
          case 0x1F:
            uint64_t v25 = *(void **)a1[2];
            uint64_t v26 = *(_WORD *)(a1[3] + 20) & 0x7FFF;
            uint64_t v27 = (char *)v25[191];
            unint64_t v28 = v25[192];
            if ((unint64_t)v27 >= v28)
            {
              unint64_t v188 = (char *)v25[190];
              uint64_t v189 = (v27 - v188) >> 3;
              if ((unint64_t)(v189 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v190 = v28 - (void)v188;
              unint64_t v191 = (uint64_t)(v28 - (void)v188) >> 2;
              if (v191 <= v189 + 1) {
                unint64_t v191 = v189 + 1;
              }
              if (v190 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v192 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v192 = v191;
              }
              if (v192)
              {
                uint64_t v193 = (char *)sub_5714((uint64_t)(v25 + 192), v192);
                uint64_t v27 = (char *)v25[191];
                unint64_t v188 = (char *)v25[190];
              }
              else
              {
                uint64_t v193 = 0;
              }
              v368 = &v193[8 * v189];
              *(void *)v368 = v26;
              unint64_t v29 = v368 + 8;
              while (v27 != v188)
              {
                uint64_t v369 = *((void *)v27 - 1);
                v27 -= 8;
                *((void *)v368 - 1) = v369;
                v368 -= 8;
              }
              v25[190] = v368;
              v25[191] = v29;
              v25[192] = &v193[8 * v192];
              if (v188) {
                operator delete(v188);
              }
            }
            else
            {
              *(void *)uint64_t v27 = v26;
              unint64_t v29 = v27 + 8;
            }
            v25[191] = v29;
            break;
          case 0x20:
            unint64_t v30 = *(void **)a1[2];
            uint64_t v31 = *(_WORD *)(a1[3] + 30) & 0x7FFF;
            unint64_t v32 = (char *)v30[194];
            unint64_t v33 = v30[195];
            if ((unint64_t)v32 >= v33)
            {
              uint64_t v194 = (char *)v30[193];
              uint64_t v195 = (v32 - v194) >> 3;
              if ((unint64_t)(v195 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v196 = v33 - (void)v194;
              unint64_t v197 = (uint64_t)(v33 - (void)v194) >> 2;
              if (v197 <= v195 + 1) {
                unint64_t v197 = v195 + 1;
              }
              if (v196 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v198 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v198 = v197;
              }
              if (v198)
              {
                unint64_t v199 = (char *)sub_5714((uint64_t)(v30 + 195), v198);
                unint64_t v32 = (char *)v30[194];
                uint64_t v194 = (char *)v30[193];
              }
              else
              {
                unint64_t v199 = 0;
              }
              uint64_t v370 = &v199[8 * v195];
              *(void *)uint64_t v370 = v31;
              uint64_t v34 = v370 + 8;
              while (v32 != v194)
              {
                uint64_t v371 = *((void *)v32 - 1);
                v32 -= 8;
                *((void *)v370 - 1) = v371;
                v370 -= 8;
              }
              v30[193] = v370;
              v30[194] = v34;
              v30[195] = &v199[8 * v198];
              if (v194) {
                operator delete(v194);
              }
            }
            else
            {
              *(void *)unint64_t v32 = v31;
              uint64_t v34 = v32 + 8;
            }
            v30[194] = v34;
            break;
          case 0x21:
            unint64_t v35 = *(void **)a1[2];
            uint64_t v36 = *(_WORD *)(a1[3] + 22) & 0x7FFF;
            unint64_t v37 = (char *)v35[197];
            unint64_t v38 = v35[198];
            if ((unint64_t)v37 >= v38)
            {
              unint64_t v200 = (char *)v35[196];
              uint64_t v201 = (v37 - v200) >> 3;
              if ((unint64_t)(v201 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v202 = v38 - (void)v200;
              unint64_t v203 = (uint64_t)(v38 - (void)v200) >> 2;
              if (v203 <= v201 + 1) {
                unint64_t v203 = v201 + 1;
              }
              if (v202 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v204 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v204 = v203;
              }
              if (v204)
              {
                unint64_t v205 = (char *)sub_5714((uint64_t)(v35 + 198), v204);
                unint64_t v37 = (char *)v35[197];
                unint64_t v200 = (char *)v35[196];
              }
              else
              {
                unint64_t v205 = 0;
              }
              unint64_t v372 = &v205[8 * v201];
              *(void *)unint64_t v372 = v36;
              uint64_t v39 = v372 + 8;
              while (v37 != v200)
              {
                uint64_t v373 = *((void *)v37 - 1);
                v37 -= 8;
                *((void *)v372 - 1) = v373;
                v372 -= 8;
              }
              v35[196] = v372;
              v35[197] = v39;
              v35[198] = &v205[8 * v204];
              if (v200) {
                operator delete(v200);
              }
            }
            else
            {
              *(void *)unint64_t v37 = v36;
              uint64_t v39 = v37 + 8;
            }
            v35[197] = v39;
            break;
          case 0x22:
            unint64_t v40 = *(void **)a1[2];
            uint64_t v41 = *(_WORD *)(a1[3] + 32) & 0x7FFF;
            unint64_t v42 = (char *)v40[200];
            unint64_t v43 = v40[201];
            if ((unint64_t)v42 >= v43)
            {
              v206 = (char *)v40[199];
              uint64_t v207 = (v42 - v206) >> 3;
              if ((unint64_t)(v207 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v208 = v43 - (void)v206;
              unint64_t v209 = (uint64_t)(v43 - (void)v206) >> 2;
              if (v209 <= v207 + 1) {
                unint64_t v209 = v207 + 1;
              }
              if (v208 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v210 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v210 = v209;
              }
              if (v210)
              {
                uint64_t v211 = (char *)sub_5714((uint64_t)(v40 + 201), v210);
                unint64_t v42 = (char *)v40[200];
                v206 = (char *)v40[199];
              }
              else
              {
                uint64_t v211 = 0;
              }
              v374 = &v211[8 * v207];
              *(void *)v374 = v41;
              unint64_t v44 = v374 + 8;
              while (v42 != v206)
              {
                uint64_t v375 = *((void *)v42 - 1);
                v42 -= 8;
                *((void *)v374 - 1) = v375;
                v374 -= 8;
              }
              v40[199] = v374;
              v40[200] = v44;
              v40[201] = &v211[8 * v210];
              if (v206) {
                operator delete(v206);
              }
            }
            else
            {
              *(void *)unint64_t v42 = v41;
              unint64_t v44 = v42 + 8;
            }
            v40[200] = v44;
            break;
          case 0x23:
            unint64_t v45 = *(void **)a1[2];
            uint64_t v46 = *(_WORD *)(a1[3] + 24) & 0x7FFF;
            unint64_t v47 = (char *)v45[203];
            unint64_t v48 = v45[204];
            if ((unint64_t)v47 >= v48)
            {
              uint64_t v212 = (char *)v45[202];
              uint64_t v213 = (v47 - v212) >> 3;
              if ((unint64_t)(v213 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v214 = v48 - (void)v212;
              unint64_t v215 = (uint64_t)(v48 - (void)v212) >> 2;
              if (v215 <= v213 + 1) {
                unint64_t v215 = v213 + 1;
              }
              if (v214 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v216 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v216 = v215;
              }
              if (v216)
              {
                unint64_t v217 = (char *)sub_5714((uint64_t)(v45 + 204), v216);
                unint64_t v47 = (char *)v45[203];
                uint64_t v212 = (char *)v45[202];
              }
              else
              {
                unint64_t v217 = 0;
              }
              v376 = &v217[8 * v213];
              *(void *)v376 = v46;
              uint64_t v49 = v376 + 8;
              while (v47 != v212)
              {
                uint64_t v377 = *((void *)v47 - 1);
                v47 -= 8;
                *((void *)v376 - 1) = v377;
                v376 -= 8;
              }
              v45[202] = v376;
              v45[203] = v49;
              v45[204] = &v217[8 * v216];
              if (v212) {
                operator delete(v212);
              }
            }
            else
            {
              *(void *)unint64_t v47 = v46;
              uint64_t v49 = v47 + 8;
            }
            v45[203] = v49;
            break;
          case 0x24:
            unint64_t v50 = *(void **)a1[2];
            uint64_t v51 = *(_WORD *)(a1[3] + 42) & 0x7FFF;
            unint64_t v52 = (char *)v50[206];
            unint64_t v53 = v50[207];
            if ((unint64_t)v52 >= v53)
            {
              unint64_t v218 = (char *)v50[205];
              uint64_t v219 = (v52 - v218) >> 3;
              if ((unint64_t)(v219 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v220 = v53 - (void)v218;
              unint64_t v221 = (uint64_t)(v53 - (void)v218) >> 2;
              if (v221 <= v219 + 1) {
                unint64_t v221 = v219 + 1;
              }
              if (v220 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v222 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v222 = v221;
              }
              if (v222)
              {
                uint64_t v223 = (char *)sub_5714((uint64_t)(v50 + 207), v222);
                unint64_t v52 = (char *)v50[206];
                unint64_t v218 = (char *)v50[205];
              }
              else
              {
                uint64_t v223 = 0;
              }
              v378 = &v223[8 * v219];
              *(void *)v378 = v51;
              uint64_t v54 = v378 + 8;
              while (v52 != v218)
              {
                uint64_t v379 = *((void *)v52 - 1);
                v52 -= 8;
                *((void *)v378 - 1) = v379;
                v378 -= 8;
              }
              v50[205] = v378;
              v50[206] = v54;
              v50[207] = &v223[8 * v222];
              if (v218) {
                operator delete(v218);
              }
            }
            else
            {
              *(void *)unint64_t v52 = v51;
              uint64_t v54 = v52 + 8;
            }
            v50[206] = v54;
            break;
          case 0x25:
            unint64_t v55 = *(void **)a1[2];
            uint64_t v56 = *(_WORD *)(a1[3] + 34) & 0x7FFF;
            unint64_t v57 = (char *)v55[209];
            unint64_t v58 = v55[210];
            if ((unint64_t)v57 >= v58)
            {
              v224 = (char *)v55[208];
              uint64_t v225 = (v57 - v224) >> 3;
              if ((unint64_t)(v225 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v226 = v58 - (void)v224;
              unint64_t v227 = (uint64_t)(v58 - (void)v224) >> 2;
              if (v227 <= v225 + 1) {
                unint64_t v227 = v225 + 1;
              }
              if (v226 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v228 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v228 = v227;
              }
              if (v228)
              {
                unint64_t v229 = (char *)sub_5714((uint64_t)(v55 + 210), v228);
                unint64_t v57 = (char *)v55[209];
                v224 = (char *)v55[208];
              }
              else
              {
                unint64_t v229 = 0;
              }
              v380 = &v229[8 * v225];
              *(void *)v380 = v56;
              unint64_t v59 = v380 + 8;
              while (v57 != v224)
              {
                uint64_t v381 = *((void *)v57 - 1);
                v57 -= 8;
                *((void *)v380 - 1) = v381;
                v380 -= 8;
              }
              v55[208] = v380;
              v55[209] = v59;
              v55[210] = &v229[8 * v228];
              if (v224) {
                operator delete(v224);
              }
            }
            else
            {
              *(void *)unint64_t v57 = v56;
              unint64_t v59 = v57 + 8;
            }
            v55[209] = v59;
            break;
          case 0x26:
            unint64_t v60 = *(void **)a1[2];
            uint64_t v61 = *(_WORD *)(a1[3] + 44) & 0x7FFF;
            unint64_t v62 = (char *)v60[212];
            unint64_t v63 = v60[213];
            if ((unint64_t)v62 >= v63)
            {
              uint64_t v230 = (char *)v60[211];
              uint64_t v231 = (v62 - v230) >> 3;
              if ((unint64_t)(v231 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v232 = v63 - (void)v230;
              unint64_t v233 = (uint64_t)(v63 - (void)v230) >> 2;
              if (v233 <= v231 + 1) {
                unint64_t v233 = v231 + 1;
              }
              if (v232 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v234 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v234 = v233;
              }
              if (v234)
              {
                uint64_t v235 = (char *)sub_5714((uint64_t)(v60 + 213), v234);
                unint64_t v62 = (char *)v60[212];
                uint64_t v230 = (char *)v60[211];
              }
              else
              {
                uint64_t v235 = 0;
              }
              v382 = &v235[8 * v231];
              *(void *)v382 = v61;
              unint64_t v64 = v382 + 8;
              while (v62 != v230)
              {
                uint64_t v383 = *((void *)v62 - 1);
                v62 -= 8;
                *((void *)v382 - 1) = v383;
                v382 -= 8;
              }
              v60[211] = v382;
              v60[212] = v64;
              v60[213] = &v235[8 * v234];
              if (v230) {
                operator delete(v230);
              }
            }
            else
            {
              *(void *)unint64_t v62 = v61;
              unint64_t v64 = v62 + 8;
            }
            v60[212] = v64;
            break;
          case 0x27:
            unint64_t v65 = *(void **)a1[2];
            uint64_t v66 = *(_WORD *)(a1[3] + 36) & 0x7FFF;
            uint64_t v67 = (char *)v65[215];
            unint64_t v68 = v65[216];
            if ((unint64_t)v67 >= v68)
            {
              uint64_t v236 = (char *)v65[214];
              uint64_t v237 = (v67 - v236) >> 3;
              if ((unint64_t)(v237 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v238 = v68 - (void)v236;
              unint64_t v239 = (uint64_t)(v68 - (void)v236) >> 2;
              if (v239 <= v237 + 1) {
                unint64_t v239 = v237 + 1;
              }
              if (v238 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v240 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v240 = v239;
              }
              if (v240)
              {
                uint64_t v241 = (char *)sub_5714((uint64_t)(v65 + 216), v240);
                uint64_t v67 = (char *)v65[215];
                uint64_t v236 = (char *)v65[214];
              }
              else
              {
                uint64_t v241 = 0;
              }
              uint64_t v384 = &v241[8 * v237];
              *(void *)uint64_t v384 = v66;
              uint64_t v69 = v384 + 8;
              while (v67 != v236)
              {
                uint64_t v385 = *((void *)v67 - 1);
                v67 -= 8;
                *((void *)v384 - 1) = v385;
                v384 -= 8;
              }
              v65[214] = v384;
              v65[215] = v69;
              v65[216] = &v241[8 * v240];
              if (v236) {
                operator delete(v236);
              }
            }
            else
            {
              *(void *)uint64_t v67 = v66;
              uint64_t v69 = v67 + 8;
            }
            v65[215] = v69;
            break;
          case 0x28:
            unint64_t v70 = *(void **)a1[2];
            uint64_t v71 = *(_WORD *)(a1[3] + 46) & 0x7FFF;
            unint64_t v72 = (char *)v70[218];
            unint64_t v73 = v70[219];
            if ((unint64_t)v72 >= v73)
            {
              unint64_t v242 = (char *)v70[217];
              uint64_t v243 = (v72 - v242) >> 3;
              if ((unint64_t)(v243 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v244 = v73 - (void)v242;
              unint64_t v245 = (uint64_t)(v73 - (void)v242) >> 2;
              if (v245 <= v243 + 1) {
                unint64_t v245 = v243 + 1;
              }
              if (v244 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v246 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v246 = v245;
              }
              if (v246)
              {
                uint64_t v247 = (char *)sub_5714((uint64_t)(v70 + 219), v246);
                unint64_t v72 = (char *)v70[218];
                unint64_t v242 = (char *)v70[217];
              }
              else
              {
                uint64_t v247 = 0;
              }
              unint64_t v386 = &v247[8 * v243];
              *(void *)unint64_t v386 = v71;
              unint64_t v74 = v386 + 8;
              while (v72 != v242)
              {
                uint64_t v387 = *((void *)v72 - 1);
                v72 -= 8;
                *((void *)v386 - 1) = v387;
                v386 -= 8;
              }
              v70[217] = v386;
              v70[218] = v74;
              v70[219] = &v247[8 * v246];
              if (v242) {
                operator delete(v242);
              }
            }
            else
            {
              *(void *)unint64_t v72 = v71;
              unint64_t v74 = v72 + 8;
            }
            v70[218] = v74;
            break;
          case 0x29:
            uint64_t v75 = *(void **)a1[2];
            uint64_t v76 = *(_WORD *)(a1[3] + 38) & 0x7FFF;
            unint64_t v77 = (char *)v75[221];
            unint64_t v78 = v75[222];
            if ((unint64_t)v77 >= v78)
            {
              uint64_t v248 = (char *)v75[220];
              uint64_t v249 = (v77 - v248) >> 3;
              if ((unint64_t)(v249 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v250 = v78 - (void)v248;
              unint64_t v251 = (uint64_t)(v78 - (void)v248) >> 2;
              if (v251 <= v249 + 1) {
                unint64_t v251 = v249 + 1;
              }
              if (v250 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v252 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v252 = v251;
              }
              if (v252)
              {
                uint64_t v253 = (char *)sub_5714((uint64_t)(v75 + 222), v252);
                unint64_t v77 = (char *)v75[221];
                uint64_t v248 = (char *)v75[220];
              }
              else
              {
                uint64_t v253 = 0;
              }
              v388 = &v253[8 * v249];
              *(void *)v388 = v76;
              uint64_t v79 = v388 + 8;
              while (v77 != v248)
              {
                uint64_t v389 = *((void *)v77 - 1);
                v77 -= 8;
                *((void *)v388 - 1) = v389;
                v388 -= 8;
              }
              v75[220] = v388;
              v75[221] = v79;
              v75[222] = &v253[8 * v252];
              if (v248) {
                operator delete(v248);
              }
            }
            else
            {
              *(void *)unint64_t v77 = v76;
              uint64_t v79 = v77 + 8;
            }
            v75[221] = v79;
            break;
          case 0x2A:
            unint64_t v80 = *(void **)a1[2];
            uint64_t v81 = *(_WORD *)(a1[3] + 48) & 0x7FFF;
            unint64_t v82 = (char *)v80[224];
            unint64_t v83 = v80[225];
            if ((unint64_t)v82 >= v83)
            {
              v254 = (char *)v80[223];
              uint64_t v255 = (v82 - v254) >> 3;
              if ((unint64_t)(v255 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v256 = v83 - (void)v254;
              unint64_t v257 = (uint64_t)(v83 - (void)v254) >> 2;
              if (v257 <= v255 + 1) {
                unint64_t v257 = v255 + 1;
              }
              if (v256 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v258 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v258 = v257;
              }
              if (v258)
              {
                uint64_t v259 = (char *)sub_5714((uint64_t)(v80 + 225), v258);
                unint64_t v82 = (char *)v80[224];
                v254 = (char *)v80[223];
              }
              else
              {
                uint64_t v259 = 0;
              }
              v390 = &v259[8 * v255];
              *(void *)v390 = v81;
              unint64_t v84 = v390 + 8;
              while (v82 != v254)
              {
                uint64_t v391 = *((void *)v82 - 1);
                v82 -= 8;
                *((void *)v390 - 1) = v391;
                v390 -= 8;
              }
              v80[223] = v390;
              v80[224] = v84;
              v80[225] = &v259[8 * v258];
              if (v254) {
                operator delete(v254);
              }
            }
            else
            {
              *(void *)unint64_t v82 = v81;
              unint64_t v84 = v82 + 8;
            }
            v80[224] = v84;
            break;
          case 0x2B:
            unint64_t v85 = *(void **)a1[2];
            uint64_t v86 = *(_WORD *)(a1[3] + 40) & 0x7FFF;
            uint64_t v87 = (char *)v85[227];
            unint64_t v88 = v85[228];
            if ((unint64_t)v87 >= v88)
            {
              unint64_t v260 = (char *)v85[226];
              uint64_t v261 = (v87 - v260) >> 3;
              if ((unint64_t)(v261 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v262 = v88 - (void)v260;
              unint64_t v263 = (uint64_t)(v88 - (void)v260) >> 2;
              if (v263 <= v261 + 1) {
                unint64_t v263 = v261 + 1;
              }
              if (v262 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v264 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v264 = v263;
              }
              if (v264)
              {
                uint64_t v265 = (char *)sub_5714((uint64_t)(v85 + 228), v264);
                uint64_t v87 = (char *)v85[227];
                unint64_t v260 = (char *)v85[226];
              }
              else
              {
                uint64_t v265 = 0;
              }
              v392 = &v265[8 * v261];
              *(void *)v392 = v86;
              unint64_t v89 = v392 + 8;
              while (v87 != v260)
              {
                uint64_t v393 = *((void *)v87 - 1);
                v87 -= 8;
                *((void *)v392 - 1) = v393;
                v392 -= 8;
              }
              v85[226] = v392;
              v85[227] = v89;
              v85[228] = &v265[8 * v264];
              if (v260) {
                operator delete(v260);
              }
            }
            else
            {
              *(void *)uint64_t v87 = v86;
              unint64_t v89 = v87 + 8;
            }
            v85[227] = v89;
            break;
          case 0x2C:
            unint64_t v90 = *(void **)a1[2];
            uint64_t v91 = *(_WORD *)(a1[3] + 58) & 0x7FFF;
            uint64_t v92 = (char *)v90[230];
            unint64_t v93 = v90[231];
            if ((unint64_t)v92 >= v93)
            {
              v266 = (char *)v90[229];
              uint64_t v267 = (v92 - v266) >> 3;
              if ((unint64_t)(v267 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v268 = v93 - (void)v266;
              unint64_t v269 = (uint64_t)(v93 - (void)v266) >> 2;
              if (v269 <= v267 + 1) {
                unint64_t v269 = v267 + 1;
              }
              if (v268 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v270 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v270 = v269;
              }
              if (v270)
              {
                v271 = (char *)sub_5714((uint64_t)(v90 + 231), v270);
                uint64_t v92 = (char *)v90[230];
                v266 = (char *)v90[229];
              }
              else
              {
                v271 = 0;
              }
              v394 = &v271[8 * v267];
              *(void *)v394 = v91;
              unint64_t v94 = v394 + 8;
              while (v92 != v266)
              {
                uint64_t v395 = *((void *)v92 - 1);
                v92 -= 8;
                *((void *)v394 - 1) = v395;
                v394 -= 8;
              }
              v90[229] = v394;
              v90[230] = v94;
              v90[231] = &v271[8 * v270];
              if (v266) {
                operator delete(v266);
              }
            }
            else
            {
              *(void *)uint64_t v92 = v91;
              unint64_t v94 = v92 + 8;
            }
            v90[230] = v94;
            break;
          case 0x2D:
            unint64_t v95 = *(void **)a1[2];
            uint64_t v96 = *(_WORD *)(a1[3] + 50) & 0x7FFF;
            uint64_t v97 = (char *)v95[233];
            unint64_t v98 = v95[234];
            if ((unint64_t)v97 >= v98)
            {
              uint64_t v272 = (char *)v95[232];
              uint64_t v273 = (v97 - v272) >> 3;
              if ((unint64_t)(v273 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v274 = v98 - (void)v272;
              unint64_t v275 = (uint64_t)(v98 - (void)v272) >> 2;
              if (v275 <= v273 + 1) {
                unint64_t v275 = v273 + 1;
              }
              if (v274 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v276 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v276 = v275;
              }
              if (v276)
              {
                v277 = (char *)sub_5714((uint64_t)(v95 + 234), v276);
                uint64_t v97 = (char *)v95[233];
                uint64_t v272 = (char *)v95[232];
              }
              else
              {
                v277 = 0;
              }
              v396 = &v277[8 * v273];
              *(void *)v396 = v96;
              uint64_t v99 = v396 + 8;
              while (v97 != v272)
              {
                uint64_t v397 = *((void *)v97 - 1);
                v97 -= 8;
                *((void *)v396 - 1) = v397;
                v396 -= 8;
              }
              v95[232] = v396;
              v95[233] = v99;
              v95[234] = &v277[8 * v276];
              if (v272) {
                operator delete(v272);
              }
            }
            else
            {
              *(void *)uint64_t v97 = v96;
              uint64_t v99 = v97 + 8;
            }
            v95[233] = v99;
            break;
          case 0x2E:
            unint64_t v100 = *(void **)a1[2];
            uint64_t v101 = *(_WORD *)(a1[3] + 60) & 0x7FFF;
            unint64_t v102 = (char *)v100[236];
            unint64_t v103 = v100[237];
            if ((unint64_t)v102 >= v103)
            {
              v278 = (char *)v100[235];
              uint64_t v279 = (v102 - v278) >> 3;
              if ((unint64_t)(v279 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v280 = v103 - (void)v278;
              unint64_t v281 = (uint64_t)(v103 - (void)v278) >> 2;
              if (v281 <= v279 + 1) {
                unint64_t v281 = v279 + 1;
              }
              if (v280 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v282 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v282 = v281;
              }
              if (v282)
              {
                unint64_t v283 = (char *)sub_5714((uint64_t)(v100 + 237), v282);
                unint64_t v102 = (char *)v100[236];
                v278 = (char *)v100[235];
              }
              else
              {
                unint64_t v283 = 0;
              }
              uint64_t v398 = &v283[8 * v279];
              *(void *)uint64_t v398 = v101;
              uint64_t v104 = v398 + 8;
              while (v102 != v278)
              {
                uint64_t v399 = *((void *)v102 - 1);
                v102 -= 8;
                *((void *)v398 - 1) = v399;
                v398 -= 8;
              }
              v100[235] = v398;
              v100[236] = v104;
              v100[237] = &v283[8 * v282];
              if (v278) {
                operator delete(v278);
              }
            }
            else
            {
              *(void *)unint64_t v102 = v101;
              uint64_t v104 = v102 + 8;
            }
            v100[236] = v104;
            break;
          case 0x2F:
            uint64_t v105 = *(void **)a1[2];
            uint64_t v106 = *(_WORD *)(a1[3] + 52) & 0x7FFF;
            unint64_t v107 = (char *)v105[239];
            unint64_t v108 = v105[240];
            if ((unint64_t)v107 >= v108)
            {
              v284 = (char *)v105[238];
              uint64_t v285 = (v107 - v284) >> 3;
              if ((unint64_t)(v285 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v286 = v108 - (void)v284;
              unint64_t v287 = (uint64_t)(v108 - (void)v284) >> 2;
              if (v287 <= v285 + 1) {
                unint64_t v287 = v285 + 1;
              }
              if (v286 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v288 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v288 = v287;
              }
              if (v288)
              {
                unint64_t v289 = (char *)sub_5714((uint64_t)(v105 + 240), v288);
                unint64_t v107 = (char *)v105[239];
                v284 = (char *)v105[238];
              }
              else
              {
                unint64_t v289 = 0;
              }
              unint64_t v400 = &v289[8 * v285];
              *(void *)unint64_t v400 = v106;
              uint64_t v109 = v400 + 8;
              while (v107 != v284)
              {
                uint64_t v401 = *((void *)v107 - 1);
                v107 -= 8;
                *((void *)v400 - 1) = v401;
                v400 -= 8;
              }
              v105[238] = v400;
              v105[239] = v109;
              v105[240] = &v289[8 * v288];
              if (v284) {
                operator delete(v284);
              }
            }
            else
            {
              *(void *)unint64_t v107 = v106;
              uint64_t v109 = v107 + 8;
            }
            v105[239] = v109;
            break;
          case 0x30:
            uint64_t v110 = *(void **)a1[2];
            uint64_t v111 = *(_WORD *)(a1[3] + 62) & 0x7FFF;
            unint64_t v112 = (char *)v110[242];
            unint64_t v113 = v110[243];
            if ((unint64_t)v112 >= v113)
            {
              v290 = (char *)v110[241];
              uint64_t v291 = (v112 - v290) >> 3;
              if ((unint64_t)(v291 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v292 = v113 - (void)v290;
              unint64_t v293 = (uint64_t)(v113 - (void)v290) >> 2;
              if (v293 <= v291 + 1) {
                unint64_t v293 = v291 + 1;
              }
              if (v292 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v294 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v294 = v293;
              }
              if (v294)
              {
                uint64_t v295 = (char *)sub_5714((uint64_t)(v110 + 243), v294);
                unint64_t v112 = (char *)v110[242];
                v290 = (char *)v110[241];
              }
              else
              {
                uint64_t v295 = 0;
              }
              v402 = &v295[8 * v291];
              *(void *)v402 = v111;
              unint64_t v114 = v402 + 8;
              while (v112 != v290)
              {
                uint64_t v403 = *((void *)v112 - 1);
                v112 -= 8;
                *((void *)v402 - 1) = v403;
                v402 -= 8;
              }
              v110[241] = v402;
              v110[242] = v114;
              v110[243] = &v295[8 * v294];
              if (v290) {
                operator delete(v290);
              }
            }
            else
            {
              *(void *)unint64_t v112 = v111;
              unint64_t v114 = v112 + 8;
            }
            v110[242] = v114;
            break;
          case 0x31:
            uint64_t v115 = *(void **)a1[2];
            uint64_t v116 = *(_WORD *)(a1[3] + 54) & 0x7FFF;
            uint64_t v117 = (char *)v115[245];
            unint64_t v118 = v115[246];
            if ((unint64_t)v117 >= v118)
            {
              v296 = (char *)v115[244];
              uint64_t v297 = (v117 - v296) >> 3;
              if ((unint64_t)(v297 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v298 = v118 - (void)v296;
              unint64_t v299 = (uint64_t)(v118 - (void)v296) >> 2;
              if (v299 <= v297 + 1) {
                unint64_t v299 = v297 + 1;
              }
              if (v298 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v300 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v300 = v299;
              }
              if (v300)
              {
                unint64_t v301 = (char *)sub_5714((uint64_t)(v115 + 246), v300);
                uint64_t v117 = (char *)v115[245];
                v296 = (char *)v115[244];
              }
              else
              {
                unint64_t v301 = 0;
              }
              v404 = &v301[8 * v297];
              *(void *)v404 = v116;
              unint64_t v119 = v404 + 8;
              while (v117 != v296)
              {
                uint64_t v405 = *((void *)v117 - 1);
                v117 -= 8;
                *((void *)v404 - 1) = v405;
                v404 -= 8;
              }
              v115[244] = v404;
              v115[245] = v119;
              v115[246] = &v301[8 * v300];
              if (v296) {
                operator delete(v296);
              }
            }
            else
            {
              *(void *)uint64_t v117 = v116;
              unint64_t v119 = v117 + 8;
            }
            v115[245] = v119;
            break;
          case 0x32:
            unint64_t v120 = *(void **)a1[2];
            uint64_t v121 = *(_WORD *)(a1[3] + 64) & 0x7FFF;
            unint64_t v122 = (char *)v120[248];
            unint64_t v123 = v120[249];
            if ((unint64_t)v122 >= v123)
            {
              unint64_t v302 = (char *)v120[247];
              uint64_t v303 = (v122 - v302) >> 3;
              if ((unint64_t)(v303 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v304 = v123 - (void)v302;
              unint64_t v305 = (uint64_t)(v123 - (void)v302) >> 2;
              if (v305 <= v303 + 1) {
                unint64_t v305 = v303 + 1;
              }
              if (v304 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v306 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v306 = v305;
              }
              if (v306)
              {
                uint64_t v307 = (char *)sub_5714((uint64_t)(v120 + 249), v306);
                unint64_t v122 = (char *)v120[248];
                unint64_t v302 = (char *)v120[247];
              }
              else
              {
                uint64_t v307 = 0;
              }
              v406 = &v307[8 * v303];
              *(void *)v406 = v121;
              unint64_t v124 = v406 + 8;
              while (v122 != v302)
              {
                uint64_t v407 = *((void *)v122 - 1);
                v122 -= 8;
                *((void *)v406 - 1) = v407;
                v406 -= 8;
              }
              v120[247] = v406;
              v120[248] = v124;
              v120[249] = &v307[8 * v306];
              if (v302) {
                operator delete(v302);
              }
            }
            else
            {
              *(void *)unint64_t v122 = v121;
              unint64_t v124 = v122 + 8;
            }
            v120[248] = v124;
            break;
          case 0x33:
            uint64_t v125 = *(void **)a1[2];
            uint64_t v126 = *(_WORD *)(a1[3] + 56) & 0x7FFF;
            uint64_t v127 = (char *)v125[251];
            unint64_t v128 = v125[252];
            if ((unint64_t)v127 >= v128)
            {
              v308 = (char *)v125[250];
              uint64_t v309 = (v127 - v308) >> 3;
              if ((unint64_t)(v309 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v310 = v128 - (void)v308;
              unint64_t v311 = (uint64_t)(v128 - (void)v308) >> 2;
              if (v311 <= v309 + 1) {
                unint64_t v311 = v309 + 1;
              }
              if (v310 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v312 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v312 = v311;
              }
              if (v312)
              {
                v313 = (char *)sub_5714((uint64_t)(v125 + 252), v312);
                uint64_t v127 = (char *)v125[251];
                v308 = (char *)v125[250];
              }
              else
              {
                v313 = 0;
              }
              v408 = &v313[8 * v309];
              *(void *)v408 = v126;
              uint64_t v129 = v408 + 8;
              while (v127 != v308)
              {
                uint64_t v409 = *((void *)v127 - 1);
                v127 -= 8;
                *((void *)v408 - 1) = v409;
                v408 -= 8;
              }
              v125[250] = v408;
              v125[251] = v129;
              v125[252] = &v313[8 * v312];
              if (v308) {
                operator delete(v308);
              }
            }
            else
            {
              *(void *)uint64_t v127 = v126;
              uint64_t v129 = v127 + 8;
            }
            v125[251] = v129;
            break;
          case 0x34:
            unint64_t v130 = *(void **)a1[2];
            uint64_t v131 = *(_WORD *)(a1[3] + 74) & 0x7FFF;
            unint64_t v132 = (char *)v130[254];
            unint64_t v133 = v130[255];
            if ((unint64_t)v132 >= v133)
            {
              uint64_t v314 = (char *)v130[253];
              uint64_t v315 = (v132 - v314) >> 3;
              if ((unint64_t)(v315 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v316 = v133 - (void)v314;
              unint64_t v317 = (uint64_t)(v133 - (void)v314) >> 2;
              if (v317 <= v315 + 1) {
                unint64_t v317 = v315 + 1;
              }
              if (v316 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v318 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v318 = v317;
              }
              if (v318)
              {
                v319 = (char *)sub_5714((uint64_t)(v130 + 255), v318);
                unint64_t v132 = (char *)v130[254];
                uint64_t v314 = (char *)v130[253];
              }
              else
              {
                v319 = 0;
              }
              v410 = &v319[8 * v315];
              *(void *)v410 = v131;
              unint64_t v134 = v410 + 8;
              while (v132 != v314)
              {
                uint64_t v411 = *((void *)v132 - 1);
                v132 -= 8;
                *((void *)v410 - 1) = v411;
                v410 -= 8;
              }
              v130[253] = v410;
              v130[254] = v134;
              v130[255] = &v319[8 * v318];
              if (v314) {
                operator delete(v314);
              }
            }
            else
            {
              *(void *)unint64_t v132 = v131;
              unint64_t v134 = v132 + 8;
            }
            v130[254] = v134;
            break;
          case 0x35:
            uint64_t v135 = *(void **)a1[2];
            uint64_t v136 = *(_WORD *)(a1[3] + 66) & 0x7FFF;
            uint64_t v137 = (char *)v135[257];
            unint64_t v138 = v135[258];
            if ((unint64_t)v137 >= v138)
            {
              v320 = (char *)v135[256];
              uint64_t v321 = (v137 - v320) >> 3;
              if ((unint64_t)(v321 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v322 = v138 - (void)v320;
              unint64_t v323 = (uint64_t)(v138 - (void)v320) >> 2;
              if (v323 <= v321 + 1) {
                unint64_t v323 = v321 + 1;
              }
              if (v322 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v324 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v324 = v323;
              }
              if (v324)
              {
                unint64_t v325 = (char *)sub_5714((uint64_t)(v135 + 258), v324);
                uint64_t v137 = (char *)v135[257];
                v320 = (char *)v135[256];
              }
              else
              {
                unint64_t v325 = 0;
              }
              uint64_t v412 = &v325[8 * v321];
              *(void *)uint64_t v412 = v136;
              uint64_t v139 = v412 + 8;
              while (v137 != v320)
              {
                uint64_t v413 = *((void *)v137 - 1);
                v137 -= 8;
                *((void *)v412 - 1) = v413;
                v412 -= 8;
              }
              v135[256] = v412;
              v135[257] = v139;
              v135[258] = &v325[8 * v324];
              if (v320) {
                operator delete(v320);
              }
            }
            else
            {
              *(void *)uint64_t v137 = v136;
              uint64_t v139 = v137 + 8;
            }
            v135[257] = v139;
            break;
          case 0x36:
            uint64_t v140 = *(void **)a1[2];
            uint64_t v141 = *(_WORD *)(a1[3] + 76) & 0x7FFF;
            unint64_t v142 = (char *)v140[260];
            unint64_t v143 = v140[261];
            if ((unint64_t)v142 >= v143)
            {
              v326 = (char *)v140[259];
              uint64_t v327 = (v142 - v326) >> 3;
              if ((unint64_t)(v327 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v328 = v143 - (void)v326;
              unint64_t v329 = (uint64_t)(v143 - (void)v326) >> 2;
              if (v329 <= v327 + 1) {
                unint64_t v329 = v327 + 1;
              }
              if (v328 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v330 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v330 = v329;
              }
              if (v330)
              {
                unint64_t v331 = (char *)sub_5714((uint64_t)(v140 + 261), v330);
                unint64_t v142 = (char *)v140[260];
                v326 = (char *)v140[259];
              }
              else
              {
                unint64_t v331 = 0;
              }
              unint64_t v414 = &v331[8 * v327];
              *(void *)unint64_t v414 = v141;
              uint64_t v144 = v414 + 8;
              while (v142 != v326)
              {
                uint64_t v415 = *((void *)v142 - 1);
                v142 -= 8;
                *((void *)v414 - 1) = v415;
                v414 -= 8;
              }
              v140[259] = v414;
              v140[260] = v144;
              v140[261] = &v331[8 * v330];
              if (v326) {
                operator delete(v326);
              }
            }
            else
            {
              *(void *)unint64_t v142 = v141;
              uint64_t v144 = v142 + 8;
            }
            v140[260] = v144;
            break;
          case 0x37:
            unint64_t v145 = *(void **)a1[2];
            uint64_t v146 = *(_WORD *)(a1[3] + 68) & 0x7FFF;
            uint64_t v147 = (char *)v145[263];
            unint64_t v148 = v145[264];
            if ((unint64_t)v147 >= v148)
            {
              v332 = (char *)v145[262];
              uint64_t v333 = (v147 - v332) >> 3;
              if ((unint64_t)(v333 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v334 = v148 - (void)v332;
              unint64_t v335 = (uint64_t)(v148 - (void)v332) >> 2;
              if (v335 <= v333 + 1) {
                unint64_t v335 = v333 + 1;
              }
              if (v334 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v336 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v336 = v335;
              }
              if (v336)
              {
                uint64_t v337 = (char *)sub_5714((uint64_t)(v145 + 264), v336);
                uint64_t v147 = (char *)v145[263];
                v332 = (char *)v145[262];
              }
              else
              {
                uint64_t v337 = 0;
              }
              v416 = &v337[8 * v333];
              *(void *)v416 = v146;
              unint64_t v149 = v416 + 8;
              while (v147 != v332)
              {
                uint64_t v417 = *((void *)v147 - 1);
                v147 -= 8;
                *((void *)v416 - 1) = v417;
                v416 -= 8;
              }
              v145[262] = v416;
              v145[263] = v149;
              v145[264] = &v337[8 * v336];
              if (v332) {
                operator delete(v332);
              }
            }
            else
            {
              *(void *)uint64_t v147 = v146;
              unint64_t v149 = v147 + 8;
            }
            v145[263] = v149;
            break;
          case 0x38:
            unint64_t v150 = *(void **)a1[2];
            uint64_t v151 = *(_WORD *)(a1[3] + 78) & 0x7FFF;
            uint64_t v152 = (char *)v150[266];
            unint64_t v153 = v150[267];
            if ((unint64_t)v152 >= v153)
            {
              v338 = (char *)v150[265];
              uint64_t v339 = (v152 - v338) >> 3;
              if ((unint64_t)(v339 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v340 = v153 - (void)v338;
              unint64_t v341 = (uint64_t)(v153 - (void)v338) >> 2;
              if (v341 <= v339 + 1) {
                unint64_t v341 = v339 + 1;
              }
              if (v340 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v342 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v342 = v341;
              }
              if (v342)
              {
                unint64_t v343 = (char *)sub_5714((uint64_t)(v150 + 267), v342);
                uint64_t v152 = (char *)v150[266];
                v338 = (char *)v150[265];
              }
              else
              {
                unint64_t v343 = 0;
              }
              v418 = &v343[8 * v339];
              *(void *)v418 = v151;
              unint64_t v154 = v418 + 8;
              while (v152 != v338)
              {
                uint64_t v419 = *((void *)v152 - 1);
                v152 -= 8;
                *((void *)v418 - 1) = v419;
                v418 -= 8;
              }
              v150[265] = v418;
              v150[266] = v154;
              v150[267] = &v343[8 * v342];
              if (v338) {
                operator delete(v338);
              }
            }
            else
            {
              *(void *)uint64_t v152 = v151;
              unint64_t v154 = v152 + 8;
            }
            v150[266] = v154;
            break;
          case 0x39:
            unint64_t v155 = *(void **)a1[2];
            uint64_t v156 = *(_WORD *)(a1[3] + 70) & 0x7FFF;
            unint64_t v157 = (char *)v155[269];
            unint64_t v158 = v155[270];
            if ((unint64_t)v157 >= v158)
            {
              unint64_t v344 = (char *)v155[268];
              uint64_t v345 = (v157 - v344) >> 3;
              if ((unint64_t)(v345 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v346 = v158 - (void)v344;
              unint64_t v347 = (uint64_t)(v158 - (void)v344) >> 2;
              if (v347 <= v345 + 1) {
                unint64_t v347 = v345 + 1;
              }
              if (v346 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v348 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v348 = v347;
              }
              if (v348)
              {
                uint64_t v349 = (char *)sub_5714((uint64_t)(v155 + 270), v348);
                unint64_t v157 = (char *)v155[269];
                unint64_t v344 = (char *)v155[268];
              }
              else
              {
                uint64_t v349 = 0;
              }
              v420 = &v349[8 * v345];
              *(void *)v420 = v156;
              uint64_t v159 = v420 + 8;
              while (v157 != v344)
              {
                uint64_t v421 = *((void *)v157 - 1);
                v157 -= 8;
                *((void *)v420 - 1) = v421;
                v420 -= 8;
              }
              v155[268] = v420;
              v155[269] = v159;
              v155[270] = &v349[8 * v348];
              if (v344) {
                operator delete(v344);
              }
            }
            else
            {
              *(void *)unint64_t v157 = v156;
              uint64_t v159 = v157 + 8;
            }
            v155[269] = v159;
            break;
          case 0x3A:
            unint64_t v160 = *(void **)a1[2];
            uint64_t v161 = *(_WORD *)(a1[3] + 80) & 0x7FFF;
            unint64_t v162 = (char *)v160[272];
            unint64_t v163 = v160[273];
            if ((unint64_t)v162 >= v163)
            {
              v350 = (char *)v160[271];
              uint64_t v351 = (v162 - v350) >> 3;
              if ((unint64_t)(v351 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v352 = v163 - (void)v350;
              unint64_t v353 = (uint64_t)(v163 - (void)v350) >> 2;
              if (v353 <= v351 + 1) {
                unint64_t v353 = v351 + 1;
              }
              if (v352 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v354 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v354 = v353;
              }
              if (v354)
              {
                v355 = (char *)sub_5714((uint64_t)(v160 + 273), v354);
                unint64_t v162 = (char *)v160[272];
                v350 = (char *)v160[271];
              }
              else
              {
                v355 = 0;
              }
              v422 = &v355[8 * v351];
              *(void *)v422 = v161;
              uint64_t v164 = v422 + 8;
              while (v162 != v350)
              {
                uint64_t v423 = *((void *)v162 - 1);
                v162 -= 8;
                *((void *)v422 - 1) = v423;
                v422 -= 8;
              }
              v160[271] = v422;
              v160[272] = v164;
              v160[273] = &v355[8 * v354];
              if (v350) {
                operator delete(v350);
              }
            }
            else
            {
              *(void *)unint64_t v162 = v161;
              uint64_t v164 = v162 + 8;
            }
            v160[272] = v164;
            break;
          case 0x3B:
            uint64_t v165 = *(void **)a1[2];
            uint64_t v166 = *(_WORD *)(a1[3] + 72) & 0x7FFF;
            unint64_t v167 = (char *)v165[275];
            unint64_t v168 = v165[276];
            if ((unint64_t)v167 >= v168)
            {
              uint64_t v356 = (char *)v165[274];
              uint64_t v357 = (v167 - v356) >> 3;
              if ((unint64_t)(v357 + 1) >> 61) {
LABEL_594:
              }
                sub_566C();
              unint64_t v358 = v168 - (void)v356;
              unint64_t v359 = (uint64_t)(v168 - (void)v356) >> 2;
              if (v359 <= v357 + 1) {
                unint64_t v359 = v357 + 1;
              }
              if (v358 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v360 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v360 = v359;
              }
              if (v360)
              {
                v361 = (char *)sub_5714((uint64_t)(v165 + 276), v360);
                unint64_t v167 = (char *)v165[275];
                uint64_t v356 = (char *)v165[274];
              }
              else
              {
                v361 = 0;
              }
              v424 = &v361[8 * v357];
              *(void *)v424 = v166;
              unint64_t v169 = v424 + 8;
              while (v167 != v356)
              {
                uint64_t v425 = *((void *)v167 - 1);
                v167 -= 8;
                *((void *)v424 - 1) = v425;
                v424 -= 8;
              }
              v165[274] = v424;
              v165[275] = v169;
              v165[276] = &v361[8 * v360];
              if (v356) {
                operator delete(v356);
              }
            }
            else
            {
              *(void *)unint64_t v167 = v166;
              unint64_t v169 = v167 + 8;
            }
            v165[275] = v169;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_57E34(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    uint64_t v177 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    unint64_t v176 = *v177;
    uint64_t v178 = (char *)v177[1] - (char *)*v177;
    if (v178)
    {
      unint64_t v179 = v178 >> 2;
      if (v179 <= 1) {
        unint64_t v179 = 1;
      }
      do
      {
        int v180 = *v176++;
        switch(v180)
        {
          case 11:
            uint64_t v181 = *(_WORD *)(a1[3] + 40) & 0x7FFF;
            uint64_t v182 = (void *)(*(void *)a1[2] + 1048);
            goto LABEL_230;
          case 12:
            uint64_t v181 = *(_WORD *)(a1[3] + 28) & 0x7FFF;
            uint64_t v182 = (void *)(*(void *)a1[2] + 1072);
            goto LABEL_230;
          case 13:
            uint64_t v181 = *(unsigned __int16 *)(a1[3] + 36);
            uint64_t v182 = (void *)(*(void *)a1[2] + 1096);
            goto LABEL_230;
          case 14:
            uint64_t v181 = *(unsigned __int16 *)(a1[3] + 24);
            uint64_t v182 = (void *)(*(void *)a1[2] + 1120);
            goto LABEL_230;
          case 15:
            uint64_t v181 = *(unsigned __int16 *)(a1[3] + 30);
            uint64_t v182 = (void *)(*(void *)a1[2] + 1144);
            goto LABEL_230;
          case 16:
            uint64_t v181 = *(unsigned __int16 *)(a1[3] + 18);
            uint64_t v182 = (void *)(*(void *)a1[2] + 1168);
            goto LABEL_230;
          case 17:
            uint64_t v181 = *(unsigned __int16 *)(a1[3] + 32);
            uint64_t v182 = (void *)(*(void *)a1[2] + 1192);
            goto LABEL_230;
          case 18:
            uint64_t v181 = *(unsigned __int16 *)(a1[3] + 20);
            uint64_t v182 = (void *)(*(void *)a1[2] + 1216);
            goto LABEL_230;
          case 19:
            uint64_t v181 = *(unsigned __int16 *)(a1[3] + 38);
            uint64_t v182 = (void *)(*(void *)a1[2] + 1240);
            goto LABEL_230;
          case 20:
            uint64_t v181 = *(unsigned __int16 *)(a1[3] + 26);
            uint64_t v182 = (void *)(*(void *)a1[2] + 1264);
            goto LABEL_230;
          case 21:
            uint64_t v181 = *(unsigned __int16 *)(a1[3] + 34);
            uint64_t v182 = (void *)(*(void *)a1[2] + 1288);
            goto LABEL_230;
          case 22:
            uint64_t v181 = *(unsigned __int16 *)(a1[3] + 22);
            uint64_t v182 = (void *)(*(void *)a1[2] + 1312);
LABEL_230:
            *(void *)(*v182 - 8) += v181;
            break;
          default:
            break;
        }
        --v179;
      }
      while (v179);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0xB:
            uint64_t v10 = *(void **)a1[2];
            uint64_t v11 = *(_WORD *)(a1[3] + 40) & 0x7FFF;
            unsigned int v12 = (char *)v10[131];
            unint64_t v13 = v10[132];
            if ((unint64_t)v12 >= v13)
            {
              unint64_t v80 = (char *)v10[130];
              uint64_t v81 = (v12 - v80) >> 3;
              if ((unint64_t)(v81 + 1) >> 61) {
                goto LABEL_234;
              }
              unint64_t v82 = v13 - (void)v80;
              unint64_t v83 = (uint64_t)(v13 - (void)v80) >> 2;
              if (v83 <= v81 + 1) {
                unint64_t v83 = v81 + 1;
              }
              if (v82 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v84 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v84 = v83;
              }
              if (v84)
              {
                unint64_t v85 = (char *)sub_5714((uint64_t)(v10 + 132), v84);
                unsigned int v12 = (char *)v10[131];
                unint64_t v80 = (char *)v10[130];
              }
              else
              {
                unint64_t v85 = 0;
              }
              uint64_t v152 = &v85[8 * v81];
              *(void *)uint64_t v152 = v11;
              unint64_t v14 = v152 + 8;
              while (v12 != v80)
              {
                uint64_t v153 = *((void *)v12 - 1);
                v12 -= 8;
                *((void *)v152 - 1) = v153;
                v152 -= 8;
              }
              v10[130] = v152;
              v10[131] = v14;
              v10[132] = &v85[8 * v84];
              if (v80) {
                operator delete(v80);
              }
            }
            else
            {
              *(void *)unsigned int v12 = v11;
              unint64_t v14 = v12 + 8;
            }
            v10[131] = v14;
            break;
          case 0xC:
            unint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_WORD *)(a1[3] + 28) & 0x7FFF;
            uint64_t v17 = (char *)v15[134];
            unint64_t v18 = v15[135];
            if ((unint64_t)v17 >= v18)
            {
              uint64_t v86 = (char *)v15[133];
              uint64_t v87 = (v17 - v86) >> 3;
              if ((unint64_t)(v87 + 1) >> 61) {
                goto LABEL_234;
              }
              unint64_t v88 = v18 - (void)v86;
              unint64_t v89 = (uint64_t)(v18 - (void)v86) >> 2;
              if (v89 <= v87 + 1) {
                unint64_t v89 = v87 + 1;
              }
              if (v88 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v90 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v90 = v89;
              }
              if (v90)
              {
                uint64_t v91 = (char *)sub_5714((uint64_t)(v15 + 135), v90);
                uint64_t v17 = (char *)v15[134];
                uint64_t v86 = (char *)v15[133];
              }
              else
              {
                uint64_t v91 = 0;
              }
              unint64_t v154 = &v91[8 * v87];
              *(void *)unint64_t v154 = v16;
              unint64_t v19 = v154 + 8;
              while (v17 != v86)
              {
                uint64_t v155 = *((void *)v17 - 1);
                v17 -= 8;
                *((void *)v154 - 1) = v155;
                v154 -= 8;
              }
              v15[133] = v154;
              v15[134] = v19;
              v15[135] = &v91[8 * v90];
              if (v86) {
                operator delete(v86);
              }
            }
            else
            {
              *(void *)uint64_t v17 = v16;
              unint64_t v19 = v17 + 8;
            }
            v15[134] = v19;
            break;
          case 0xD:
            uint64_t v20 = a1[2];
            uint64_t v21 = *(void **)v20;
            uint64_t v22 = *(unsigned __int16 *)(a1[3] + 36);
            unint64_t v23 = *(char **)(*(void *)v20 + 1096);
            unint64_t v24 = *(void *)(*(void *)v20 + 1104);
            if ((unint64_t)v23 >= v24)
            {
              uint64_t v92 = (char *)v21[136];
              uint64_t v93 = (v23 - v92) >> 3;
              if ((unint64_t)(v93 + 1) >> 61) {
                goto LABEL_234;
              }
              unint64_t v94 = v24 - (void)v92;
              unint64_t v95 = (uint64_t)(v24 - (void)v92) >> 2;
              if (v95 <= v93 + 1) {
                unint64_t v95 = v93 + 1;
              }
              if (v94 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v96 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v96 = v95;
              }
              if (v96)
              {
                uint64_t v97 = (char *)sub_5714((uint64_t)(v21 + 138), v96);
                unint64_t v23 = (char *)v21[137];
                uint64_t v92 = (char *)v21[136];
              }
              else
              {
                uint64_t v97 = 0;
              }
              uint64_t v156 = &v97[8 * v93];
              *(void *)uint64_t v156 = v22;
              uint64_t v25 = v156 + 8;
              while (v23 != v92)
              {
                uint64_t v157 = *((void *)v23 - 1);
                v23 -= 8;
                *((void *)v156 - 1) = v157;
                v156 -= 8;
              }
              v21[136] = v156;
              v21[137] = v25;
              v21[138] = &v97[8 * v96];
              if (v92) {
                operator delete(v92);
              }
            }
            else
            {
              *(void *)unint64_t v23 = v22;
              uint64_t v25 = v23 + 8;
            }
            v21[137] = v25;
            break;
          case 0xE:
            uint64_t v26 = a1[2];
            uint64_t v27 = *(void **)v26;
            uint64_t v28 = *(unsigned __int16 *)(a1[3] + 24);
            unint64_t v29 = *(char **)(*(void *)v26 + 1120);
            unint64_t v30 = *(void *)(*(void *)v26 + 1128);
            if ((unint64_t)v29 >= v30)
            {
              unint64_t v98 = (char *)v27[139];
              uint64_t v99 = (v29 - v98) >> 3;
              if ((unint64_t)(v99 + 1) >> 61) {
                goto LABEL_234;
              }
              unint64_t v100 = v30 - (void)v98;
              unint64_t v101 = (uint64_t)(v30 - (void)v98) >> 2;
              if (v101 <= v99 + 1) {
                unint64_t v101 = v99 + 1;
              }
              if (v100 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v102 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v102 = v101;
              }
              if (v102)
              {
                unint64_t v103 = (char *)sub_5714((uint64_t)(v27 + 141), v102);
                unint64_t v29 = (char *)v27[140];
                unint64_t v98 = (char *)v27[139];
              }
              else
              {
                unint64_t v103 = 0;
              }
              unint64_t v158 = &v103[8 * v99];
              *(void *)unint64_t v158 = v28;
              uint64_t v31 = v158 + 8;
              while (v29 != v98)
              {
                uint64_t v159 = *((void *)v29 - 1);
                v29 -= 8;
                *((void *)v158 - 1) = v159;
                v158 -= 8;
              }
              v27[139] = v158;
              v27[140] = v31;
              v27[141] = &v103[8 * v102];
              if (v98) {
                operator delete(v98);
              }
            }
            else
            {
              *(void *)unint64_t v29 = v28;
              uint64_t v31 = v29 + 8;
            }
            v27[140] = v31;
            break;
          case 0xF:
            uint64_t v32 = a1[2];
            unint64_t v33 = *(void **)v32;
            uint64_t v34 = *(unsigned __int16 *)(a1[3] + 30);
            unint64_t v35 = *(char **)(*(void *)v32 + 1144);
            unint64_t v36 = *(void *)(*(void *)v32 + 1152);
            if ((unint64_t)v35 >= v36)
            {
              uint64_t v104 = (char *)v33[142];
              uint64_t v105 = (v35 - v104) >> 3;
              if ((unint64_t)(v105 + 1) >> 61) {
                goto LABEL_234;
              }
              unint64_t v106 = v36 - (void)v104;
              unint64_t v107 = (uint64_t)(v36 - (void)v104) >> 2;
              if (v107 <= v105 + 1) {
                unint64_t v107 = v105 + 1;
              }
              if (v106 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v108 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v108 = v107;
              }
              if (v108)
              {
                uint64_t v109 = (char *)sub_5714((uint64_t)(v33 + 144), v108);
                unint64_t v35 = (char *)v33[143];
                uint64_t v104 = (char *)v33[142];
              }
              else
              {
                uint64_t v109 = 0;
              }
              unint64_t v160 = &v109[8 * v105];
              *(void *)unint64_t v160 = v34;
              unint64_t v37 = v160 + 8;
              while (v35 != v104)
              {
                uint64_t v161 = *((void *)v35 - 1);
                v35 -= 8;
                *((void *)v160 - 1) = v161;
                v160 -= 8;
              }
              v33[142] = v160;
              v33[143] = v37;
              v33[144] = &v109[8 * v108];
              if (v104) {
                operator delete(v104);
              }
            }
            else
            {
              *(void *)unint64_t v35 = v34;
              unint64_t v37 = v35 + 8;
            }
            v33[143] = v37;
            break;
          case 0x10:
            uint64_t v38 = a1[2];
            uint64_t v39 = *(void **)v38;
            uint64_t v40 = *(unsigned __int16 *)(a1[3] + 18);
            uint64_t v41 = *(char **)(*(void *)v38 + 1168);
            unint64_t v42 = *(void *)(*(void *)v38 + 1176);
            if ((unint64_t)v41 >= v42)
            {
              uint64_t v110 = (char *)v39[145];
              uint64_t v111 = (v41 - v110) >> 3;
              if ((unint64_t)(v111 + 1) >> 61) {
                goto LABEL_234;
              }
              unint64_t v112 = v42 - (void)v110;
              unint64_t v113 = (uint64_t)(v42 - (void)v110) >> 2;
              if (v113 <= v111 + 1) {
                unint64_t v113 = v111 + 1;
              }
              if (v112 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v114 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v114 = v113;
              }
              if (v114)
              {
                uint64_t v115 = (char *)sub_5714((uint64_t)(v39 + 147), v114);
                uint64_t v41 = (char *)v39[146];
                uint64_t v110 = (char *)v39[145];
              }
              else
              {
                uint64_t v115 = 0;
              }
              unint64_t v162 = &v115[8 * v111];
              *(void *)unint64_t v162 = v40;
              unint64_t v43 = v162 + 8;
              while (v41 != v110)
              {
                uint64_t v163 = *((void *)v41 - 1);
                v41 -= 8;
                *((void *)v162 - 1) = v163;
                v162 -= 8;
              }
              v39[145] = v162;
              v39[146] = v43;
              v39[147] = &v115[8 * v114];
              if (v110) {
                operator delete(v110);
              }
            }
            else
            {
              *(void *)uint64_t v41 = v40;
              unint64_t v43 = v41 + 8;
            }
            v39[146] = v43;
            break;
          case 0x11:
            uint64_t v44 = a1[2];
            unint64_t v45 = *(void **)v44;
            uint64_t v46 = *(unsigned __int16 *)(a1[3] + 32);
            unint64_t v47 = *(char **)(*(void *)v44 + 1192);
            unint64_t v48 = *(void *)(*(void *)v44 + 1200);
            if ((unint64_t)v47 >= v48)
            {
              uint64_t v116 = (char *)v45[148];
              uint64_t v117 = (v47 - v116) >> 3;
              if ((unint64_t)(v117 + 1) >> 61) {
                goto LABEL_234;
              }
              unint64_t v118 = v48 - (void)v116;
              unint64_t v119 = (uint64_t)(v48 - (void)v116) >> 2;
              if (v119 <= v117 + 1) {
                unint64_t v119 = v117 + 1;
              }
              if (v118 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v120 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v120 = v119;
              }
              if (v120)
              {
                uint64_t v121 = (char *)sub_5714((uint64_t)(v45 + 150), v120);
                unint64_t v47 = (char *)v45[149];
                uint64_t v116 = (char *)v45[148];
              }
              else
              {
                uint64_t v121 = 0;
              }
              uint64_t v164 = &v121[8 * v117];
              *(void *)uint64_t v164 = v46;
              uint64_t v49 = v164 + 8;
              while (v47 != v116)
              {
                uint64_t v165 = *((void *)v47 - 1);
                v47 -= 8;
                *((void *)v164 - 1) = v165;
                v164 -= 8;
              }
              v45[148] = v164;
              v45[149] = v49;
              v45[150] = &v121[8 * v120];
              if (v116) {
                operator delete(v116);
              }
            }
            else
            {
              *(void *)unint64_t v47 = v46;
              uint64_t v49 = v47 + 8;
            }
            v45[149] = v49;
            break;
          case 0x12:
            uint64_t v50 = a1[2];
            uint64_t v51 = *(void **)v50;
            uint64_t v52 = *(unsigned __int16 *)(a1[3] + 20);
            unint64_t v53 = *(char **)(*(void *)v50 + 1216);
            unint64_t v54 = *(void *)(*(void *)v50 + 1224);
            if ((unint64_t)v53 >= v54)
            {
              unint64_t v122 = (char *)v51[151];
              uint64_t v123 = (v53 - v122) >> 3;
              if ((unint64_t)(v123 + 1) >> 61) {
                goto LABEL_234;
              }
              unint64_t v124 = v54 - (void)v122;
              unint64_t v125 = (uint64_t)(v54 - (void)v122) >> 2;
              if (v125 <= v123 + 1) {
                unint64_t v125 = v123 + 1;
              }
              if (v124 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v126 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v126 = v125;
              }
              if (v126)
              {
                uint64_t v127 = (char *)sub_5714((uint64_t)(v51 + 153), v126);
                unint64_t v53 = (char *)v51[152];
                unint64_t v122 = (char *)v51[151];
              }
              else
              {
                uint64_t v127 = 0;
              }
              uint64_t v166 = &v127[8 * v123];
              *(void *)uint64_t v166 = v52;
              unint64_t v55 = v166 + 8;
              while (v53 != v122)
              {
                uint64_t v167 = *((void *)v53 - 1);
                v53 -= 8;
                *((void *)v166 - 1) = v167;
                v166 -= 8;
              }
              v51[151] = v166;
              v51[152] = v55;
              v51[153] = &v127[8 * v126];
              if (v122) {
                operator delete(v122);
              }
            }
            else
            {
              *(void *)unint64_t v53 = v52;
              unint64_t v55 = v53 + 8;
            }
            v51[152] = v55;
            break;
          case 0x13:
            uint64_t v56 = a1[2];
            unint64_t v57 = *(void **)v56;
            uint64_t v58 = *(unsigned __int16 *)(a1[3] + 38);
            unint64_t v59 = *(char **)(*(void *)v56 + 1240);
            unint64_t v60 = *(void *)(*(void *)v56 + 1248);
            if ((unint64_t)v59 >= v60)
            {
              unint64_t v128 = (char *)v57[154];
              uint64_t v129 = (v59 - v128) >> 3;
              if ((unint64_t)(v129 + 1) >> 61) {
                goto LABEL_234;
              }
              unint64_t v130 = v60 - (void)v128;
              unint64_t v131 = (uint64_t)(v60 - (void)v128) >> 2;
              if (v131 <= v129 + 1) {
                unint64_t v131 = v129 + 1;
              }
              if (v130 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v132 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v132 = v131;
              }
              if (v132)
              {
                unint64_t v133 = (char *)sub_5714((uint64_t)(v57 + 156), v132);
                unint64_t v59 = (char *)v57[155];
                unint64_t v128 = (char *)v57[154];
              }
              else
              {
                unint64_t v133 = 0;
              }
              unint64_t v168 = &v133[8 * v129];
              *(void *)unint64_t v168 = v58;
              uint64_t v61 = v168 + 8;
              while (v59 != v128)
              {
                uint64_t v169 = *((void *)v59 - 1);
                v59 -= 8;
                *((void *)v168 - 1) = v169;
                v168 -= 8;
              }
              v57[154] = v168;
              v57[155] = v61;
              v57[156] = &v133[8 * v132];
              if (v128) {
                operator delete(v128);
              }
            }
            else
            {
              *(void *)unint64_t v59 = v58;
              uint64_t v61 = v59 + 8;
            }
            v57[155] = v61;
            break;
          case 0x14:
            uint64_t v62 = a1[2];
            unint64_t v63 = *(void **)v62;
            uint64_t v64 = *(unsigned __int16 *)(a1[3] + 26);
            unint64_t v65 = *(char **)(*(void *)v62 + 1264);
            unint64_t v66 = *(void *)(*(void *)v62 + 1272);
            if ((unint64_t)v65 >= v66)
            {
              unint64_t v134 = (char *)v63[157];
              uint64_t v135 = (v65 - v134) >> 3;
              if ((unint64_t)(v135 + 1) >> 61) {
                goto LABEL_234;
              }
              unint64_t v136 = v66 - (void)v134;
              unint64_t v137 = (uint64_t)(v66 - (void)v134) >> 2;
              if (v137 <= v135 + 1) {
                unint64_t v137 = v135 + 1;
              }
              if (v136 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v138 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v138 = v137;
              }
              if (v138)
              {
                uint64_t v139 = (char *)sub_5714((uint64_t)(v63 + 159), v138);
                unint64_t v65 = (char *)v63[158];
                unint64_t v134 = (char *)v63[157];
              }
              else
              {
                uint64_t v139 = 0;
              }
              uint64_t v170 = &v139[8 * v135];
              *(void *)uint64_t v170 = v64;
              uint64_t v67 = v170 + 8;
              while (v65 != v134)
              {
                uint64_t v171 = *((void *)v65 - 1);
                v65 -= 8;
                *((void *)v170 - 1) = v171;
                v170 -= 8;
              }
              v63[157] = v170;
              v63[158] = v67;
              v63[159] = &v139[8 * v138];
              if (v134) {
                operator delete(v134);
              }
            }
            else
            {
              *(void *)unint64_t v65 = v64;
              uint64_t v67 = v65 + 8;
            }
            v63[158] = v67;
            break;
          case 0x15:
            uint64_t v68 = a1[2];
            uint64_t v69 = *(void **)v68;
            uint64_t v70 = *(unsigned __int16 *)(a1[3] + 34);
            uint64_t v71 = *(char **)(*(void *)v68 + 1288);
            unint64_t v72 = *(void *)(*(void *)v68 + 1296);
            if ((unint64_t)v71 >= v72)
            {
              uint64_t v140 = (char *)v69[160];
              uint64_t v141 = (v71 - v140) >> 3;
              if ((unint64_t)(v141 + 1) >> 61) {
                goto LABEL_234;
              }
              unint64_t v142 = v72 - (void)v140;
              unint64_t v143 = (uint64_t)(v72 - (void)v140) >> 2;
              if (v143 <= v141 + 1) {
                unint64_t v143 = v141 + 1;
              }
              if (v142 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v144 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v144 = v143;
              }
              if (v144)
              {
                unint64_t v145 = (char *)sub_5714((uint64_t)(v69 + 162), v144);
                uint64_t v71 = (char *)v69[161];
                uint64_t v140 = (char *)v69[160];
              }
              else
              {
                unint64_t v145 = 0;
              }
              unint64_t v172 = &v145[8 * v141];
              *(void *)unint64_t v172 = v70;
              unint64_t v73 = v172 + 8;
              while (v71 != v140)
              {
                uint64_t v173 = *((void *)v71 - 1);
                v71 -= 8;
                *((void *)v172 - 1) = v173;
                v172 -= 8;
              }
              v69[160] = v172;
              v69[161] = v73;
              v69[162] = &v145[8 * v144];
              if (v140) {
                operator delete(v140);
              }
            }
            else
            {
              *(void *)uint64_t v71 = v70;
              unint64_t v73 = v71 + 8;
            }
            v69[161] = v73;
            break;
          case 0x16:
            uint64_t v74 = a1[2];
            uint64_t v75 = *(void **)v74;
            uint64_t v76 = *(unsigned __int16 *)(a1[3] + 22);
            unint64_t v77 = *(char **)(*(void *)v74 + 1312);
            unint64_t v78 = *(void *)(*(void *)v74 + 1320);
            if ((unint64_t)v77 >= v78)
            {
              uint64_t v146 = (char *)v75[163];
              uint64_t v147 = (v77 - v146) >> 3;
              if ((unint64_t)(v147 + 1) >> 61) {
LABEL_234:
              }
                sub_566C();
              unint64_t v148 = v78 - (void)v146;
              unint64_t v149 = (uint64_t)(v78 - (void)v146) >> 2;
              if (v149 <= v147 + 1) {
                unint64_t v149 = v147 + 1;
              }
              if (v148 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v150 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v150 = v149;
              }
              if (v150)
              {
                uint64_t v151 = (char *)sub_5714((uint64_t)(v75 + 165), v150);
                unint64_t v77 = (char *)v75[164];
                uint64_t v146 = (char *)v75[163];
              }
              else
              {
                uint64_t v151 = 0;
              }
              unint64_t v174 = &v151[8 * v147];
              *(void *)unint64_t v174 = v76;
              uint64_t v79 = v174 + 8;
              while (v77 != v146)
              {
                uint64_t v175 = *((void *)v77 - 1);
                v77 -= 8;
                *((void *)v174 - 1) = v175;
                v174 -= 8;
              }
              v75[163] = v174;
              v75[164] = v79;
              v75[165] = &v151[8 * v150];
              if (v146) {
                operator delete(v146);
              }
            }
            else
            {
              *(void *)unint64_t v77 = v76;
              uint64_t v79 = v77 + 8;
            }
            v75[164] = v79;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_589B4(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    uint64_t v156 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v155 = *v156;
    uint64_t v157 = (char *)v156[1] - (char *)*v156;
    if (v157)
    {
      unint64_t v158 = v157 >> 2;
      if (v158 <= 1) {
        unint64_t v158 = 1;
      }
      do
      {
        int v159 = *v155++;
        switch(v159)
        {
          case 0:
            unint64_t v160 = *(_DWORD *)(a1[3] + 28) & 0x3FFFF;
            uint64_t v161 = (void *)(*(void *)a1[2] + 784);
            goto LABEL_212;
          case 1:
            unint64_t v160 = *(_DWORD *)(a1[3] + 24) & 0x3FFFF;
            uint64_t v161 = (void *)(*(void *)a1[2] + 808);
            goto LABEL_212;
          case 2:
            unint64_t v160 = *(_DWORD *)(a1[3] + 20) & 0x3FFFF;
            uint64_t v161 = (void *)(*(void *)a1[2] + 832);
            goto LABEL_212;
          case 3:
            unint64_t v160 = ((unint64_t)*(unsigned int *)(a1[3] + 16) >> 1) & 0x3FFFF;
            uint64_t v161 = (void *)(*(void *)a1[2] + 856);
            goto LABEL_212;
          case 4:
            unint64_t v160 = *(_DWORD *)(a1[3] + 36) & 0x3FFFF;
            uint64_t v161 = (void *)(*(void *)a1[2] + 880);
            goto LABEL_212;
          case 5:
            unint64_t v160 = *(_DWORD *)(a1[3] + 32) & 0x3FFFF;
            uint64_t v161 = (void *)(*(void *)a1[2] + 904);
            goto LABEL_212;
          case 6:
            unint64_t v160 = *(unsigned __int16 *)(a1[3] + 54);
            uint64_t v161 = (void *)(*(void *)a1[2] + 928);
            goto LABEL_212;
          case 7:
            unint64_t v160 = *(_DWORD *)(a1[3] + 40) & 0xFFFFF;
            uint64_t v161 = (void *)(*(void *)a1[2] + 952);
            goto LABEL_212;
          case 8:
            unint64_t v160 = *(_DWORD *)(a1[3] + 48) & 0xFFFFF;
            uint64_t v161 = (void *)(*(void *)a1[2] + 976);
            goto LABEL_212;
          case 9:
            unint64_t v160 = *(unsigned __int16 *)(a1[3] + 52);
            uint64_t v161 = (void *)(*(void *)a1[2] + 1000);
            goto LABEL_212;
          case 10:
            unint64_t v160 = *(_DWORD *)(a1[3] + 44) & 0xFFFFF;
            uint64_t v161 = (void *)(*(void *)a1[2] + 1024);
LABEL_212:
            *(void *)(*v161 - 8) += v160;
            break;
          default:
            break;
        }
        --v158;
      }
      while (v158);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0:
            uint64_t v10 = *(void **)a1[2];
            uint64_t v11 = *(_DWORD *)(a1[3] + 28) & 0x3FFFFLL;
            unsigned int v12 = (uint64_t *)v10[98];
            unint64_t v13 = v10[99];
            if ((unint64_t)v12 >= v13)
            {
              uint64_t v67 = (uint64_t *)v10[97];
              uint64_t v68 = v12 - v67;
              if ((unint64_t)(v68 + 1) >> 61) {
                goto LABEL_216;
              }
              unint64_t v69 = v13 - (void)v67;
              unint64_t v70 = (uint64_t)(v13 - (void)v67) >> 2;
              if (v70 <= v68 + 1) {
                unint64_t v70 = v68 + 1;
              }
              if (v69 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v71 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v71 = v70;
              }
              if (v71)
              {
                unint64_t v72 = (char *)sub_5714((uint64_t)(v10 + 99), v71);
                unsigned int v12 = (uint64_t *)v10[98];
                uint64_t v67 = (uint64_t *)v10[97];
              }
              else
              {
                unint64_t v72 = 0;
              }
              unint64_t v133 = (uint64_t *)&v72[8 * v68];
              uint64_t *v133 = v11;
              unint64_t v14 = v133 + 1;
              while (v12 != v67)
              {
                uint64_t v134 = *--v12;
                *--unint64_t v133 = v134;
              }
              v10[97] = v133;
              v10[98] = v14;
              v10[99] = &v72[8 * v71];
              if (v67) {
                operator delete(v67);
              }
            }
            else
            {
              uint64_t *v12 = v11;
              unint64_t v14 = v12 + 1;
            }
            v10[98] = v14;
            break;
          case 1:
            unint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_DWORD *)(a1[3] + 24) & 0x3FFFFLL;
            uint64_t v17 = (uint64_t *)v15[101];
            unint64_t v18 = v15[102];
            if ((unint64_t)v17 >= v18)
            {
              unint64_t v73 = (uint64_t *)v15[100];
              uint64_t v74 = v17 - v73;
              if ((unint64_t)(v74 + 1) >> 61) {
                goto LABEL_216;
              }
              unint64_t v75 = v18 - (void)v73;
              unint64_t v76 = (uint64_t)(v18 - (void)v73) >> 2;
              if (v76 <= v74 + 1) {
                unint64_t v76 = v74 + 1;
              }
              if (v75 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v77 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v77 = v76;
              }
              if (v77)
              {
                unint64_t v78 = (char *)sub_5714((uint64_t)(v15 + 102), v77);
                uint64_t v17 = (uint64_t *)v15[101];
                unint64_t v73 = (uint64_t *)v15[100];
              }
              else
              {
                unint64_t v78 = 0;
              }
              uint64_t v135 = (uint64_t *)&v78[8 * v74];
              *uint64_t v135 = v16;
              unint64_t v19 = v135 + 1;
              while (v17 != v73)
              {
                uint64_t v136 = *--v17;
                *--uint64_t v135 = v136;
              }
              v15[100] = v135;
              v15[101] = v19;
              v15[102] = &v78[8 * v77];
              if (v73) {
                operator delete(v73);
              }
            }
            else
            {
              *uint64_t v17 = v16;
              unint64_t v19 = v17 + 1;
            }
            v15[101] = v19;
            break;
          case 2:
            uint64_t v20 = *(void **)a1[2];
            uint64_t v21 = *(_DWORD *)(a1[3] + 20) & 0x3FFFFLL;
            uint64_t v22 = (uint64_t *)v20[104];
            unint64_t v23 = v20[105];
            if ((unint64_t)v22 >= v23)
            {
              uint64_t v79 = (uint64_t *)v20[103];
              uint64_t v80 = v22 - v79;
              if ((unint64_t)(v80 + 1) >> 61) {
                goto LABEL_216;
              }
              unint64_t v81 = v23 - (void)v79;
              unint64_t v82 = (uint64_t)(v23 - (void)v79) >> 2;
              if (v82 <= v80 + 1) {
                unint64_t v82 = v80 + 1;
              }
              if (v81 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v83 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v83 = v82;
              }
              if (v83)
              {
                unint64_t v84 = (char *)sub_5714((uint64_t)(v20 + 105), v83);
                uint64_t v22 = (uint64_t *)v20[104];
                uint64_t v79 = (uint64_t *)v20[103];
              }
              else
              {
                unint64_t v84 = 0;
              }
              unint64_t v137 = (uint64_t *)&v84[8 * v80];
              *unint64_t v137 = v21;
              unint64_t v24 = v137 + 1;
              while (v22 != v79)
              {
                uint64_t v138 = *--v22;
                *--unint64_t v137 = v138;
              }
              v20[103] = v137;
              v20[104] = v24;
              v20[105] = &v84[8 * v83];
              if (v79) {
                operator delete(v79);
              }
            }
            else
            {
              uint64_t *v22 = v21;
              unint64_t v24 = v22 + 1;
            }
            v20[104] = v24;
            break;
          case 3:
            uint64_t v25 = *(void **)a1[2];
            unint64_t v26 = ((unint64_t)*(unsigned int *)(a1[3] + 16) >> 1) & 0x3FFFF;
            uint64_t v27 = (unint64_t *)v25[107];
            unint64_t v28 = v25[108];
            if ((unint64_t)v27 >= v28)
            {
              unint64_t v85 = (unint64_t *)v25[106];
              uint64_t v86 = v27 - v85;
              if ((unint64_t)(v86 + 1) >> 61) {
                goto LABEL_216;
              }
              unint64_t v87 = v28 - (void)v85;
              unint64_t v88 = (uint64_t)(v28 - (void)v85) >> 2;
              if (v88 <= v86 + 1) {
                unint64_t v88 = v86 + 1;
              }
              if (v87 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v89 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v89 = v88;
              }
              if (v89)
              {
                unint64_t v90 = (char *)sub_5714((uint64_t)(v25 + 108), v89);
                uint64_t v27 = (unint64_t *)v25[107];
                unint64_t v85 = (unint64_t *)v25[106];
              }
              else
              {
                unint64_t v90 = 0;
              }
              uint64_t v139 = (unint64_t *)&v90[8 * v86];
              unint64_t *v139 = v26;
              unint64_t v29 = v139 + 1;
              while (v27 != v85)
              {
                unint64_t v140 = *--v27;
                *--uint64_t v139 = v140;
              }
              v25[106] = v139;
              v25[107] = v29;
              v25[108] = &v90[8 * v89];
              if (v85) {
                operator delete(v85);
              }
            }
            else
            {
              *uint64_t v27 = v26;
              unint64_t v29 = v27 + 1;
            }
            v25[107] = v29;
            break;
          case 4:
            unint64_t v30 = *(void **)a1[2];
            uint64_t v31 = *(_DWORD *)(a1[3] + 36) & 0x3FFFFLL;
            uint64_t v32 = (uint64_t *)v30[110];
            unint64_t v33 = v30[111];
            if ((unint64_t)v32 >= v33)
            {
              uint64_t v91 = (uint64_t *)v30[109];
              uint64_t v92 = v32 - v91;
              if ((unint64_t)(v92 + 1) >> 61) {
                goto LABEL_216;
              }
              unint64_t v93 = v33 - (void)v91;
              unint64_t v94 = (uint64_t)(v33 - (void)v91) >> 2;
              if (v94 <= v92 + 1) {
                unint64_t v94 = v92 + 1;
              }
              if (v93 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v95 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v95 = v94;
              }
              if (v95)
              {
                unint64_t v96 = (char *)sub_5714((uint64_t)(v30 + 111), v95);
                uint64_t v32 = (uint64_t *)v30[110];
                uint64_t v91 = (uint64_t *)v30[109];
              }
              else
              {
                unint64_t v96 = 0;
              }
              uint64_t v141 = (uint64_t *)&v96[8 * v92];
              uint64_t *v141 = v31;
              uint64_t v34 = v141 + 1;
              while (v32 != v91)
              {
                uint64_t v142 = *--v32;
                *--uint64_t v141 = v142;
              }
              v30[109] = v141;
              v30[110] = v34;
              v30[111] = &v96[8 * v95];
              if (v91) {
                operator delete(v91);
              }
            }
            else
            {
              *uint64_t v32 = v31;
              uint64_t v34 = v32 + 1;
            }
            v30[110] = v34;
            break;
          case 5:
            unint64_t v35 = *(void **)a1[2];
            uint64_t v36 = *(_DWORD *)(a1[3] + 32) & 0x3FFFFLL;
            unint64_t v37 = (uint64_t *)v35[113];
            unint64_t v38 = v35[114];
            if ((unint64_t)v37 >= v38)
            {
              uint64_t v97 = (uint64_t *)v35[112];
              uint64_t v98 = v37 - v97;
              if ((unint64_t)(v98 + 1) >> 61) {
                goto LABEL_216;
              }
              unint64_t v99 = v38 - (void)v97;
              unint64_t v100 = (uint64_t)(v38 - (void)v97) >> 2;
              if (v100 <= v98 + 1) {
                unint64_t v100 = v98 + 1;
              }
              if (v99 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v101 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v101 = v100;
              }
              if (v101)
              {
                unint64_t v102 = (char *)sub_5714((uint64_t)(v35 + 114), v101);
                unint64_t v37 = (uint64_t *)v35[113];
                uint64_t v97 = (uint64_t *)v35[112];
              }
              else
              {
                unint64_t v102 = 0;
              }
              unint64_t v143 = (uint64_t *)&v102[8 * v98];
              *unint64_t v143 = v36;
              uint64_t v39 = v143 + 1;
              while (v37 != v97)
              {
                uint64_t v144 = *--v37;
                *--unint64_t v143 = v144;
              }
              v35[112] = v143;
              v35[113] = v39;
              v35[114] = &v102[8 * v101];
              if (v97) {
                operator delete(v97);
              }
            }
            else
            {
              *unint64_t v37 = v36;
              uint64_t v39 = v37 + 1;
            }
            v35[113] = v39;
            break;
          case 6:
            uint64_t v40 = a1[2];
            uint64_t v41 = *(void **)v40;
            uint64_t v42 = *(unsigned __int16 *)(a1[3] + 54);
            unint64_t v43 = *(char **)(*(void *)v40 + 928);
            unint64_t v44 = *(void *)(*(void *)v40 + 936);
            if ((unint64_t)v43 >= v44)
            {
              unint64_t v103 = (char *)v41[115];
              uint64_t v104 = (v43 - v103) >> 3;
              if ((unint64_t)(v104 + 1) >> 61) {
                goto LABEL_216;
              }
              unint64_t v105 = v44 - (void)v103;
              unint64_t v106 = (uint64_t)(v44 - (void)v103) >> 2;
              if (v106 <= v104 + 1) {
                unint64_t v106 = v104 + 1;
              }
              if (v105 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v107 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v107 = v106;
              }
              if (v107)
              {
                unint64_t v108 = (char *)sub_5714((uint64_t)(v41 + 117), v107);
                unint64_t v43 = (char *)v41[116];
                unint64_t v103 = (char *)v41[115];
              }
              else
              {
                unint64_t v108 = 0;
              }
              unint64_t v145 = &v108[8 * v104];
              *(void *)unint64_t v145 = v42;
              unint64_t v45 = v145 + 8;
              while (v43 != v103)
              {
                uint64_t v146 = *((void *)v43 - 1);
                v43 -= 8;
                *((void *)v145 - 1) = v146;
                v145 -= 8;
              }
              v41[115] = v145;
              v41[116] = v45;
              v41[117] = &v108[8 * v107];
              if (v103) {
                operator delete(v103);
              }
            }
            else
            {
              *(void *)unint64_t v43 = v42;
              unint64_t v45 = v43 + 8;
            }
            v41[116] = v45;
            break;
          case 7:
            uint64_t v46 = *(void **)a1[2];
            uint64_t v47 = *(_DWORD *)(a1[3] + 40) & 0xFFFFFLL;
            unint64_t v48 = (uint64_t *)v46[119];
            unint64_t v49 = v46[120];
            if ((unint64_t)v48 >= v49)
            {
              uint64_t v109 = (uint64_t *)v46[118];
              uint64_t v110 = v48 - v109;
              if ((unint64_t)(v110 + 1) >> 61) {
                goto LABEL_216;
              }
              unint64_t v111 = v49 - (void)v109;
              unint64_t v112 = (uint64_t)(v49 - (void)v109) >> 2;
              if (v112 <= v110 + 1) {
                unint64_t v112 = v110 + 1;
              }
              if (v111 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v113 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v113 = v112;
              }
              if (v113)
              {
                unint64_t v114 = (char *)sub_5714((uint64_t)(v46 + 120), v113);
                unint64_t v48 = (uint64_t *)v46[119];
                uint64_t v109 = (uint64_t *)v46[118];
              }
              else
              {
                unint64_t v114 = 0;
              }
              uint64_t v147 = (uint64_t *)&v114[8 * v110];
              *uint64_t v147 = v47;
              uint64_t v50 = v147 + 1;
              while (v48 != v109)
              {
                uint64_t v148 = *--v48;
                *--uint64_t v147 = v148;
              }
              v46[118] = v147;
              v46[119] = v50;
              v46[120] = &v114[8 * v113];
              if (v109) {
                operator delete(v109);
              }
            }
            else
            {
              *unint64_t v48 = v47;
              uint64_t v50 = v48 + 1;
            }
            v46[119] = v50;
            break;
          case 8:
            uint64_t v51 = *(void **)a1[2];
            uint64_t v52 = *(_DWORD *)(a1[3] + 48) & 0xFFFFFLL;
            unint64_t v53 = (uint64_t *)v51[122];
            unint64_t v54 = v51[123];
            if ((unint64_t)v53 >= v54)
            {
              uint64_t v115 = (uint64_t *)v51[121];
              uint64_t v116 = v53 - v115;
              if ((unint64_t)(v116 + 1) >> 61) {
                goto LABEL_216;
              }
              unint64_t v117 = v54 - (void)v115;
              unint64_t v118 = (uint64_t)(v54 - (void)v115) >> 2;
              if (v118 <= v116 + 1) {
                unint64_t v118 = v116 + 1;
              }
              if (v117 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v119 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v119 = v118;
              }
              if (v119)
              {
                unint64_t v120 = (char *)sub_5714((uint64_t)(v51 + 123), v119);
                unint64_t v53 = (uint64_t *)v51[122];
                uint64_t v115 = (uint64_t *)v51[121];
              }
              else
              {
                unint64_t v120 = 0;
              }
              unint64_t v149 = (uint64_t *)&v120[8 * v116];
              uint64_t *v149 = v52;
              unint64_t v55 = v149 + 1;
              while (v53 != v115)
              {
                uint64_t v150 = *--v53;
                *--unint64_t v149 = v150;
              }
              v51[121] = v149;
              v51[122] = v55;
              v51[123] = &v120[8 * v119];
              if (v115) {
                operator delete(v115);
              }
            }
            else
            {
              *unint64_t v53 = v52;
              unint64_t v55 = v53 + 1;
            }
            v51[122] = v55;
            break;
          case 9:
            uint64_t v56 = a1[2];
            unint64_t v57 = *(void **)v56;
            uint64_t v58 = *(unsigned __int16 *)(a1[3] + 52);
            unint64_t v59 = *(char **)(*(void *)v56 + 1000);
            unint64_t v60 = *(void *)(*(void *)v56 + 1008);
            if ((unint64_t)v59 >= v60)
            {
              uint64_t v121 = (char *)v57[124];
              uint64_t v122 = (v59 - v121) >> 3;
              if ((unint64_t)(v122 + 1) >> 61) {
                goto LABEL_216;
              }
              unint64_t v123 = v60 - (void)v121;
              unint64_t v124 = (uint64_t)(v60 - (void)v121) >> 2;
              if (v124 <= v122 + 1) {
                unint64_t v124 = v122 + 1;
              }
              if (v123 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v125 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v125 = v124;
              }
              if (v125)
              {
                unint64_t v126 = (char *)sub_5714((uint64_t)(v57 + 126), v125);
                unint64_t v59 = (char *)v57[125];
                uint64_t v121 = (char *)v57[124];
              }
              else
              {
                unint64_t v126 = 0;
              }
              uint64_t v151 = &v126[8 * v122];
              *(void *)uint64_t v151 = v58;
              uint64_t v61 = v151 + 8;
              while (v59 != v121)
              {
                uint64_t v152 = *((void *)v59 - 1);
                v59 -= 8;
                *((void *)v151 - 1) = v152;
                v151 -= 8;
              }
              v57[124] = v151;
              v57[125] = v61;
              v57[126] = &v126[8 * v125];
              if (v121) {
                operator delete(v121);
              }
            }
            else
            {
              *(void *)unint64_t v59 = v58;
              uint64_t v61 = v59 + 8;
            }
            v57[125] = v61;
            break;
          case 0xA:
            uint64_t v62 = *(void **)a1[2];
            uint64_t v63 = *(_DWORD *)(a1[3] + 44) & 0xFFFFFLL;
            uint64_t v64 = (uint64_t *)v62[128];
            unint64_t v65 = v62[129];
            if ((unint64_t)v64 >= v65)
            {
              uint64_t v127 = (uint64_t *)v62[127];
              uint64_t v128 = v64 - v127;
              if ((unint64_t)(v128 + 1) >> 61) {
LABEL_216:
              }
                sub_566C();
              unint64_t v129 = v65 - (void)v127;
              unint64_t v130 = (uint64_t)(v65 - (void)v127) >> 2;
              if (v130 <= v128 + 1) {
                unint64_t v130 = v128 + 1;
              }
              if (v129 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v131 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v131 = v130;
              }
              if (v131)
              {
                unint64_t v132 = (char *)sub_5714((uint64_t)(v62 + 129), v131);
                uint64_t v64 = (uint64_t *)v62[128];
                uint64_t v127 = (uint64_t *)v62[127];
              }
              else
              {
                unint64_t v132 = 0;
              }
              uint64_t v153 = (uint64_t *)&v132[8 * v128];
              *uint64_t v153 = v63;
              unint64_t v66 = v153 + 1;
              while (v64 != v127)
              {
                uint64_t v154 = *--v64;
                *--uint64_t v153 = v154;
              }
              v62[127] = v153;
              v62[128] = v66;
              v62[129] = &v132[8 * v131];
              if (v127) {
                operator delete(v127);
              }
            }
            else
            {
              uint64_t *v64 = v63;
              unint64_t v66 = v64 + 1;
            }
            v62[128] = v66;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_5948C(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    uint64_t v63 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v62 = *v63;
    uint64_t v64 = (char *)v63[1] - (char *)*v63;
    if (v64)
    {
      unint64_t v65 = v64 >> 2;
      if (v65 <= 1) {
        unint64_t v65 = 1;
      }
      do
      {
        int v66 = *v62++;
        switch(v66)
        {
          case 203:
            unint64_t v67 = *(_DWORD *)(a1[3] + 28) & 0xFFFFF;
            uint64_t v68 = (void *)(*(void *)a1[2] + 5656);
            goto LABEL_86;
          case 204:
            unint64_t v67 = *(_DWORD *)(a1[3] + 20) & 0x1FFFF;
            uint64_t v68 = (void *)(*(void *)a1[2] + 5680);
            goto LABEL_86;
          case 205:
            unint64_t v67 = *(_DWORD *)(a1[3] + 24) & 0xFFFFF;
            uint64_t v68 = (void *)(*(void *)a1[2] + 5704);
            goto LABEL_86;
          case 206:
            unint64_t v67 = ((unint64_t)*(unsigned int *)(a1[3] + 16) >> 1) & 0x7FFFF;
            uint64_t v68 = (void *)(*(void *)a1[2] + 5728);
LABEL_86:
            *(void *)(*v68 - 8) += v67;
            break;
          default:
            break;
        }
        --v65;
      }
      while (v65);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0xCB:
            uint64_t v10 = *(void **)a1[2];
            uint64_t v11 = *(_DWORD *)(a1[3] + 28) & 0xFFFFFLL;
            unsigned int v12 = (uint64_t *)v10[707];
            unint64_t v13 = v10[708];
            if ((unint64_t)v12 >= v13)
            {
              unint64_t v30 = (uint64_t *)v10[706];
              uint64_t v31 = v12 - v30;
              if ((unint64_t)(v31 + 1) >> 61) {
                goto LABEL_90;
              }
              unint64_t v32 = v13 - (void)v30;
              unint64_t v33 = (uint64_t)(v13 - (void)v30) >> 2;
              if (v33 <= v31 + 1) {
                unint64_t v33 = v31 + 1;
              }
              if (v32 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v34 = v33;
              }
              if (v34)
              {
                unint64_t v35 = (char *)sub_5714((uint64_t)(v10 + 708), v34);
                unsigned int v12 = (uint64_t *)v10[707];
                unint64_t v30 = (uint64_t *)v10[706];
              }
              else
              {
                unint64_t v35 = 0;
              }
              unint64_t v54 = (uint64_t *)&v35[8 * v31];
              uint64_t *v54 = v11;
              unint64_t v14 = v54 + 1;
              while (v12 != v30)
              {
                uint64_t v55 = *--v12;
                *--unint64_t v54 = v55;
              }
              v10[706] = v54;
              v10[707] = v14;
              v10[708] = &v35[8 * v34];
              if (v30) {
                operator delete(v30);
              }
            }
            else
            {
              uint64_t *v12 = v11;
              unint64_t v14 = v12 + 1;
            }
            v10[707] = v14;
            break;
          case 0xCC:
            unint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_DWORD *)(a1[3] + 20) & 0x1FFFFLL;
            uint64_t v17 = (uint64_t *)v15[710];
            unint64_t v18 = v15[711];
            if ((unint64_t)v17 >= v18)
            {
              uint64_t v36 = (uint64_t *)v15[709];
              uint64_t v37 = v17 - v36;
              if ((unint64_t)(v37 + 1) >> 61) {
                goto LABEL_90;
              }
              unint64_t v38 = v18 - (void)v36;
              unint64_t v39 = (uint64_t)(v18 - (void)v36) >> 2;
              if (v39 <= v37 + 1) {
                unint64_t v39 = v37 + 1;
              }
              if (v38 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v40 = v39;
              }
              if (v40)
              {
                uint64_t v41 = (char *)sub_5714((uint64_t)(v15 + 711), v40);
                uint64_t v17 = (uint64_t *)v15[710];
                uint64_t v36 = (uint64_t *)v15[709];
              }
              else
              {
                uint64_t v41 = 0;
              }
              uint64_t v56 = (uint64_t *)&v41[8 * v37];
              uint64_t *v56 = v16;
              unint64_t v19 = v56 + 1;
              while (v17 != v36)
              {
                uint64_t v57 = *--v17;
                *--uint64_t v56 = v57;
              }
              v15[709] = v56;
              v15[710] = v19;
              v15[711] = &v41[8 * v40];
              if (v36) {
                operator delete(v36);
              }
            }
            else
            {
              *uint64_t v17 = v16;
              unint64_t v19 = v17 + 1;
            }
            v15[710] = v19;
            break;
          case 0xCD:
            uint64_t v20 = *(void **)a1[2];
            uint64_t v21 = *(_DWORD *)(a1[3] + 24) & 0xFFFFFLL;
            uint64_t v22 = (uint64_t *)v20[713];
            unint64_t v23 = v20[714];
            if ((unint64_t)v22 >= v23)
            {
              uint64_t v42 = (uint64_t *)v20[712];
              uint64_t v43 = v22 - v42;
              if ((unint64_t)(v43 + 1) >> 61) {
                goto LABEL_90;
              }
              unint64_t v44 = v23 - (void)v42;
              unint64_t v45 = (uint64_t)(v23 - (void)v42) >> 2;
              if (v45 <= v43 + 1) {
                unint64_t v45 = v43 + 1;
              }
              if (v44 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v46 = v45;
              }
              if (v46)
              {
                uint64_t v47 = (char *)sub_5714((uint64_t)(v20 + 714), v46);
                uint64_t v22 = (uint64_t *)v20[713];
                uint64_t v42 = (uint64_t *)v20[712];
              }
              else
              {
                uint64_t v47 = 0;
              }
              uint64_t v58 = (uint64_t *)&v47[8 * v43];
              uint64_t *v58 = v21;
              unint64_t v24 = v58 + 1;
              while (v22 != v42)
              {
                uint64_t v59 = *--v22;
                *--uint64_t v58 = v59;
              }
              v20[712] = v58;
              v20[713] = v24;
              v20[714] = &v47[8 * v46];
              if (v42) {
                operator delete(v42);
              }
            }
            else
            {
              uint64_t *v22 = v21;
              unint64_t v24 = v22 + 1;
            }
            v20[713] = v24;
            break;
          case 0xCE:
            uint64_t v25 = *(void **)a1[2];
            unint64_t v26 = ((unint64_t)*(unsigned int *)(a1[3] + 16) >> 1) & 0x7FFFF;
            uint64_t v27 = (unint64_t *)v25[716];
            unint64_t v28 = v25[717];
            if ((unint64_t)v27 >= v28)
            {
              unint64_t v48 = (unint64_t *)v25[715];
              uint64_t v49 = v27 - v48;
              if ((unint64_t)(v49 + 1) >> 61) {
LABEL_90:
              }
                sub_566C();
              unint64_t v50 = v28 - (void)v48;
              unint64_t v51 = (uint64_t)(v28 - (void)v48) >> 2;
              if (v51 <= v49 + 1) {
                unint64_t v51 = v49 + 1;
              }
              if (v50 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v52 = v51;
              }
              if (v52)
              {
                unint64_t v53 = (char *)sub_5714((uint64_t)(v25 + 717), v52);
                uint64_t v27 = (unint64_t *)v25[716];
                unint64_t v48 = (unint64_t *)v25[715];
              }
              else
              {
                unint64_t v53 = 0;
              }
              unint64_t v60 = (unint64_t *)&v53[8 * v49];
              *unint64_t v60 = v26;
              unint64_t v29 = v60 + 1;
              while (v27 != v48)
              {
                unint64_t v61 = *--v27;
                *--unint64_t v60 = v61;
              }
              v25[715] = v60;
              v25[716] = v29;
              v25[717] = &v53[8 * v52];
              if (v48) {
                operator delete(v48);
              }
            }
            else
            {
              *uint64_t v27 = v26;
              unint64_t v29 = v27 + 1;
            }
            v25[716] = v29;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_5998C(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    unint64_t v245 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    unint64_t v244 = *v245;
    uint64_t v246 = (char *)v245[1] - (char *)*v245;
    if (v246)
    {
      unint64_t v247 = v246 >> 2;
      if (v247 <= 1) {
        unint64_t v247 = 1;
      }
      do
      {
        int v248 = *v244++;
        switch(v248)
        {
          case 168:
            int v249 = *(_DWORD *)(a1[3] + 40);
            unint64_t v250 = (void *)(*(void *)a1[2] + 4816);
            goto LABEL_338;
          case 169:
            int v249 = *(_DWORD *)(a1[3] + 76);
            unint64_t v250 = (void *)(*(void *)a1[2] + 4840);
            goto LABEL_338;
          case 170:
            int v249 = *(_DWORD *)(a1[3] + 16) >> 1;
            unint64_t v250 = (void *)(*(void *)a1[2] + 4864);
            goto LABEL_338;
          case 171:
            int v249 = *(_DWORD *)(a1[3] + 52);
            unint64_t v250 = (void *)(*(void *)a1[2] + 4888);
            goto LABEL_338;
          case 172:
            int v249 = *(_DWORD *)(a1[3] + 24);
            unint64_t v250 = (void *)(*(void *)a1[2] + 4912);
            goto LABEL_338;
          case 173:
            int v249 = *(_DWORD *)(a1[3] + 60);
            unint64_t v250 = (void *)(*(void *)a1[2] + 4936);
            goto LABEL_338;
          case 174:
            int v249 = *(_DWORD *)(a1[3] + 36);
            unint64_t v250 = (void *)(*(void *)a1[2] + 4960);
            goto LABEL_338;
          case 175:
            int v249 = *(_DWORD *)(a1[3] + 72);
            unint64_t v250 = (void *)(*(void *)a1[2] + 4984);
            goto LABEL_338;
          case 176:
            int v249 = *(_DWORD *)(a1[3] + 32);
            unint64_t v250 = (void *)(*(void *)a1[2] + 5008);
            goto LABEL_338;
          case 177:
            int v249 = *(_DWORD *)(a1[3] + 68);
            unint64_t v250 = (void *)(*(void *)a1[2] + 5032);
            goto LABEL_338;
          case 178:
            int v249 = *(_DWORD *)(a1[3] + 44);
            unint64_t v250 = (void *)(*(void *)a1[2] + 5056);
            goto LABEL_338;
          case 179:
            int v249 = *(_DWORD *)(a1[3] + 80);
            unint64_t v250 = (void *)(*(void *)a1[2] + 5080);
            goto LABEL_338;
          case 180:
            int v249 = *(_DWORD *)(a1[3] + 48);
            unint64_t v250 = (void *)(*(void *)a1[2] + 5104);
            goto LABEL_338;
          case 181:
            int v249 = *(_DWORD *)(a1[3] + 20);
            unint64_t v250 = (void *)(*(void *)a1[2] + 5128);
            goto LABEL_338;
          case 182:
            int v249 = *(_DWORD *)(a1[3] + 56);
            unint64_t v250 = (void *)(*(void *)a1[2] + 5152);
            goto LABEL_338;
          case 183:
            int v249 = *(_DWORD *)(a1[3] + 28);
            unint64_t v250 = (void *)(*(void *)a1[2] + 5176);
            goto LABEL_338;
          case 184:
            int v249 = *(_DWORD *)(a1[3] + 64);
            unint64_t v250 = (void *)(*(void *)a1[2] + 5200);
            goto LABEL_338;
          case 185:
            int v249 = *(_DWORD *)(a1[3] + 84);
            unint64_t v250 = (void *)(*(void *)a1[2] + 5224);
LABEL_338:
            *(void *)(*v250 - 8) += v249 & 0x7FFFF;
            break;
          default:
            break;
        }
        --v247;
      }
      while (v247);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0xA8:
            uint64_t v10 = *(void **)a1[2];
            uint64_t v11 = *(_DWORD *)(a1[3] + 40) & 0x7FFFFLL;
            unsigned int v12 = (uint64_t *)v10[602];
            unint64_t v13 = v10[603];
            if ((unint64_t)v12 >= v13)
            {
              unint64_t v100 = (uint64_t *)v10[601];
              uint64_t v101 = v12 - v100;
              if ((unint64_t)(v101 + 1) >> 61) {
                goto LABEL_342;
              }
              unint64_t v102 = v13 - (void)v100;
              unint64_t v103 = (uint64_t)(v13 - (void)v100) >> 2;
              if (v103 <= v101 + 1) {
                unint64_t v103 = v101 + 1;
              }
              if (v102 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v104 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v104 = v103;
              }
              if (v104)
              {
                unint64_t v105 = (char *)sub_5714((uint64_t)(v10 + 603), v104);
                unsigned int v12 = (uint64_t *)v10[602];
                unint64_t v100 = (uint64_t *)v10[601];
              }
              else
              {
                unint64_t v105 = 0;
              }
              unint64_t v208 = (uint64_t *)&v105[8 * v101];
              uint64_t *v208 = v11;
              unint64_t v14 = v208 + 1;
              while (v12 != v100)
              {
                uint64_t v209 = *--v12;
                *--unint64_t v208 = v209;
              }
              v10[601] = v208;
              v10[602] = v14;
              v10[603] = &v105[8 * v104];
              if (v100) {
                operator delete(v100);
              }
            }
            else
            {
              uint64_t *v12 = v11;
              unint64_t v14 = v12 + 1;
            }
            v10[602] = v14;
            break;
          case 0xA9:
            unint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_DWORD *)(a1[3] + 76) & 0x7FFFFLL;
            uint64_t v17 = (uint64_t *)v15[605];
            unint64_t v18 = v15[606];
            if ((unint64_t)v17 >= v18)
            {
              unint64_t v106 = (uint64_t *)v15[604];
              uint64_t v107 = v17 - v106;
              if ((unint64_t)(v107 + 1) >> 61) {
                goto LABEL_342;
              }
              unint64_t v108 = v18 - (void)v106;
              unint64_t v109 = (uint64_t)(v18 - (void)v106) >> 2;
              if (v109 <= v107 + 1) {
                unint64_t v109 = v107 + 1;
              }
              if (v108 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v110 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v110 = v109;
              }
              if (v110)
              {
                unint64_t v111 = (char *)sub_5714((uint64_t)(v15 + 606), v110);
                uint64_t v17 = (uint64_t *)v15[605];
                unint64_t v106 = (uint64_t *)v15[604];
              }
              else
              {
                unint64_t v111 = 0;
              }
              unint64_t v210 = (uint64_t *)&v111[8 * v107];
              uint64_t *v210 = v16;
              unint64_t v19 = v210 + 1;
              while (v17 != v106)
              {
                uint64_t v211 = *--v17;
                *--unint64_t v210 = v211;
              }
              v15[604] = v210;
              v15[605] = v19;
              v15[606] = &v111[8 * v110];
              if (v106) {
                operator delete(v106);
              }
            }
            else
            {
              *uint64_t v17 = v16;
              unint64_t v19 = v17 + 1;
            }
            v15[605] = v19;
            break;
          case 0xAA:
            uint64_t v20 = *(void **)a1[2];
            unint64_t v21 = ((unint64_t)*(unsigned int *)(a1[3] + 16) >> 1) & 0x7FFFF;
            uint64_t v22 = (unint64_t *)v20[608];
            unint64_t v23 = v20[609];
            if ((unint64_t)v22 >= v23)
            {
              unint64_t v112 = (unint64_t *)v20[607];
              uint64_t v113 = v22 - v112;
              if ((unint64_t)(v113 + 1) >> 61) {
                goto LABEL_342;
              }
              unint64_t v114 = v23 - (void)v112;
              unint64_t v115 = (uint64_t)(v23 - (void)v112) >> 2;
              if (v115 <= v113 + 1) {
                unint64_t v115 = v113 + 1;
              }
              if (v114 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v116 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v116 = v115;
              }
              if (v116)
              {
                unint64_t v117 = (char *)sub_5714((uint64_t)(v20 + 609), v116);
                uint64_t v22 = (unint64_t *)v20[608];
                unint64_t v112 = (unint64_t *)v20[607];
              }
              else
              {
                unint64_t v117 = 0;
              }
              uint64_t v212 = (unint64_t *)&v117[8 * v113];
              *uint64_t v212 = v21;
              unint64_t v24 = v212 + 1;
              while (v22 != v112)
              {
                unint64_t v213 = *--v22;
                *--uint64_t v212 = v213;
              }
              v20[607] = v212;
              v20[608] = v24;
              v20[609] = &v117[8 * v116];
              if (v112) {
                operator delete(v112);
              }
            }
            else
            {
              unint64_t *v22 = v21;
              unint64_t v24 = v22 + 1;
            }
            v20[608] = v24;
            break;
          case 0xAB:
            uint64_t v25 = *(void **)a1[2];
            uint64_t v26 = *(_DWORD *)(a1[3] + 52) & 0x7FFFFLL;
            uint64_t v27 = (uint64_t *)v25[611];
            unint64_t v28 = v25[612];
            if ((unint64_t)v27 >= v28)
            {
              unint64_t v118 = (uint64_t *)v25[610];
              uint64_t v119 = v27 - v118;
              if ((unint64_t)(v119 + 1) >> 61) {
                goto LABEL_342;
              }
              unint64_t v120 = v28 - (void)v118;
              unint64_t v121 = (uint64_t)(v28 - (void)v118) >> 2;
              if (v121 <= v119 + 1) {
                unint64_t v121 = v119 + 1;
              }
              if (v120 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v122 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v122 = v121;
              }
              if (v122)
              {
                unint64_t v123 = (char *)sub_5714((uint64_t)(v25 + 612), v122);
                uint64_t v27 = (uint64_t *)v25[611];
                unint64_t v118 = (uint64_t *)v25[610];
              }
              else
              {
                unint64_t v123 = 0;
              }
              unint64_t v214 = (uint64_t *)&v123[8 * v119];
              *unint64_t v214 = v26;
              unint64_t v29 = v214 + 1;
              while (v27 != v118)
              {
                uint64_t v215 = *--v27;
                *--unint64_t v214 = v215;
              }
              v25[610] = v214;
              v25[611] = v29;
              v25[612] = &v123[8 * v122];
              if (v118) {
                operator delete(v118);
              }
            }
            else
            {
              *uint64_t v27 = v26;
              unint64_t v29 = v27 + 1;
            }
            v25[611] = v29;
            break;
          case 0xAC:
            unint64_t v30 = *(void **)a1[2];
            uint64_t v31 = *(_DWORD *)(a1[3] + 24) & 0x7FFFFLL;
            unint64_t v32 = (uint64_t *)v30[614];
            unint64_t v33 = v30[615];
            if ((unint64_t)v32 >= v33)
            {
              unint64_t v124 = (uint64_t *)v30[613];
              uint64_t v125 = v32 - v124;
              if ((unint64_t)(v125 + 1) >> 61) {
                goto LABEL_342;
              }
              unint64_t v126 = v33 - (void)v124;
              unint64_t v127 = (uint64_t)(v33 - (void)v124) >> 2;
              if (v127 <= v125 + 1) {
                unint64_t v127 = v125 + 1;
              }
              if (v126 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v128 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v128 = v127;
              }
              if (v128)
              {
                unint64_t v129 = (char *)sub_5714((uint64_t)(v30 + 615), v128);
                unint64_t v32 = (uint64_t *)v30[614];
                unint64_t v124 = (uint64_t *)v30[613];
              }
              else
              {
                unint64_t v129 = 0;
              }
              unint64_t v216 = (uint64_t *)&v129[8 * v125];
              uint64_t *v216 = v31;
              unint64_t v34 = v216 + 1;
              while (v32 != v124)
              {
                uint64_t v217 = *--v32;
                *--unint64_t v216 = v217;
              }
              v30[613] = v216;
              v30[614] = v34;
              v30[615] = &v129[8 * v128];
              if (v124) {
                operator delete(v124);
              }
            }
            else
            {
              *unint64_t v32 = v31;
              unint64_t v34 = v32 + 1;
            }
            v30[614] = v34;
            break;
          case 0xAD:
            unint64_t v35 = *(void **)a1[2];
            uint64_t v36 = *(_DWORD *)(a1[3] + 60) & 0x7FFFFLL;
            uint64_t v37 = (uint64_t *)v35[617];
            unint64_t v38 = v35[618];
            if ((unint64_t)v37 >= v38)
            {
              unint64_t v130 = (uint64_t *)v35[616];
              uint64_t v131 = v37 - v130;
              if ((unint64_t)(v131 + 1) >> 61) {
                goto LABEL_342;
              }
              unint64_t v132 = v38 - (void)v130;
              unint64_t v133 = (uint64_t)(v38 - (void)v130) >> 2;
              if (v133 <= v131 + 1) {
                unint64_t v133 = v131 + 1;
              }
              if (v132 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v134 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v134 = v133;
              }
              if (v134)
              {
                uint64_t v135 = (char *)sub_5714((uint64_t)(v35 + 618), v134);
                uint64_t v37 = (uint64_t *)v35[617];
                unint64_t v130 = (uint64_t *)v35[616];
              }
              else
              {
                uint64_t v135 = 0;
              }
              unint64_t v218 = (uint64_t *)&v135[8 * v131];
              uint64_t *v218 = v36;
              unint64_t v39 = v218 + 1;
              while (v37 != v130)
              {
                uint64_t v219 = *--v37;
                *--unint64_t v218 = v219;
              }
              v35[616] = v218;
              v35[617] = v39;
              v35[618] = &v135[8 * v134];
              if (v130) {
                operator delete(v130);
              }
            }
            else
            {
              *uint64_t v37 = v36;
              unint64_t v39 = v37 + 1;
            }
            v35[617] = v39;
            break;
          case 0xAE:
            unint64_t v40 = *(void **)a1[2];
            uint64_t v41 = *(_DWORD *)(a1[3] + 36) & 0x7FFFFLL;
            uint64_t v42 = (uint64_t *)v40[620];
            unint64_t v43 = v40[621];
            if ((unint64_t)v42 >= v43)
            {
              uint64_t v136 = (uint64_t *)v40[619];
              uint64_t v137 = v42 - v136;
              if ((unint64_t)(v137 + 1) >> 61) {
                goto LABEL_342;
              }
              unint64_t v138 = v43 - (void)v136;
              unint64_t v139 = (uint64_t)(v43 - (void)v136) >> 2;
              if (v139 <= v137 + 1) {
                unint64_t v139 = v137 + 1;
              }
              if (v138 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v140 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v140 = v139;
              }
              if (v140)
              {
                uint64_t v141 = (char *)sub_5714((uint64_t)(v40 + 621), v140);
                uint64_t v42 = (uint64_t *)v40[620];
                uint64_t v136 = (uint64_t *)v40[619];
              }
              else
              {
                uint64_t v141 = 0;
              }
              unint64_t v220 = (uint64_t *)&v141[8 * v137];
              uint64_t *v220 = v41;
              unint64_t v44 = v220 + 1;
              while (v42 != v136)
              {
                uint64_t v221 = *--v42;
                *--unint64_t v220 = v221;
              }
              v40[619] = v220;
              v40[620] = v44;
              v40[621] = &v141[8 * v140];
              if (v136) {
                operator delete(v136);
              }
            }
            else
            {
              *uint64_t v42 = v41;
              unint64_t v44 = v42 + 1;
            }
            v40[620] = v44;
            break;
          case 0xAF:
            unint64_t v45 = *(void **)a1[2];
            uint64_t v46 = *(_DWORD *)(a1[3] + 72) & 0x7FFFFLL;
            uint64_t v47 = (uint64_t *)v45[623];
            unint64_t v48 = v45[624];
            if ((unint64_t)v47 >= v48)
            {
              uint64_t v142 = (uint64_t *)v45[622];
              uint64_t v143 = v47 - v142;
              if ((unint64_t)(v143 + 1) >> 61) {
                goto LABEL_342;
              }
              unint64_t v144 = v48 - (void)v142;
              unint64_t v145 = (uint64_t)(v48 - (void)v142) >> 2;
              if (v145 <= v143 + 1) {
                unint64_t v145 = v143 + 1;
              }
              if (v144 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v146 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v146 = v145;
              }
              if (v146)
              {
                uint64_t v147 = (char *)sub_5714((uint64_t)(v45 + 624), v146);
                uint64_t v47 = (uint64_t *)v45[623];
                uint64_t v142 = (uint64_t *)v45[622];
              }
              else
              {
                uint64_t v147 = 0;
              }
              unint64_t v222 = (uint64_t *)&v147[8 * v143];
              uint64_t *v222 = v46;
              uint64_t v49 = v222 + 1;
              while (v47 != v142)
              {
                uint64_t v223 = *--v47;
                *--unint64_t v222 = v223;
              }
              v45[622] = v222;
              v45[623] = v49;
              v45[624] = &v147[8 * v146];
              if (v142) {
                operator delete(v142);
              }
            }
            else
            {
              *uint64_t v47 = v46;
              uint64_t v49 = v47 + 1;
            }
            v45[623] = v49;
            break;
          case 0xB0:
            unint64_t v50 = *(void **)a1[2];
            uint64_t v51 = *(_DWORD *)(a1[3] + 32) & 0x7FFFFLL;
            unint64_t v52 = (uint64_t *)v50[626];
            unint64_t v53 = v50[627];
            if ((unint64_t)v52 >= v53)
            {
              uint64_t v148 = (uint64_t *)v50[625];
              uint64_t v149 = v52 - v148;
              if ((unint64_t)(v149 + 1) >> 61) {
                goto LABEL_342;
              }
              unint64_t v150 = v53 - (void)v148;
              unint64_t v151 = (uint64_t)(v53 - (void)v148) >> 2;
              if (v151 <= v149 + 1) {
                unint64_t v151 = v149 + 1;
              }
              if (v150 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v152 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v152 = v151;
              }
              if (v152)
              {
                uint64_t v153 = (char *)sub_5714((uint64_t)(v50 + 627), v152);
                unint64_t v52 = (uint64_t *)v50[626];
                uint64_t v148 = (uint64_t *)v50[625];
              }
              else
              {
                uint64_t v153 = 0;
              }
              v224 = (uint64_t *)&v153[8 * v149];
              uint64_t *v224 = v51;
              unint64_t v54 = v224 + 1;
              while (v52 != v148)
              {
                uint64_t v225 = *--v52;
                *--v224 = v225;
              }
              v50[625] = v224;
              v50[626] = v54;
              v50[627] = &v153[8 * v152];
              if (v148) {
                operator delete(v148);
              }
            }
            else
            {
              *unint64_t v52 = v51;
              unint64_t v54 = v52 + 1;
            }
            v50[626] = v54;
            break;
          case 0xB1:
            uint64_t v55 = *(void **)a1[2];
            uint64_t v56 = *(_DWORD *)(a1[3] + 68) & 0x7FFFFLL;
            uint64_t v57 = (uint64_t *)v55[629];
            unint64_t v58 = v55[630];
            if ((unint64_t)v57 >= v58)
            {
              uint64_t v154 = (uint64_t *)v55[628];
              uint64_t v155 = v57 - v154;
              if ((unint64_t)(v155 + 1) >> 61) {
                goto LABEL_342;
              }
              unint64_t v156 = v58 - (void)v154;
              unint64_t v157 = (uint64_t)(v58 - (void)v154) >> 2;
              if (v157 <= v155 + 1) {
                unint64_t v157 = v155 + 1;
              }
              if (v156 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v158 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v158 = v157;
              }
              if (v158)
              {
                int v159 = (char *)sub_5714((uint64_t)(v55 + 630), v158);
                uint64_t v57 = (uint64_t *)v55[629];
                uint64_t v154 = (uint64_t *)v55[628];
              }
              else
              {
                int v159 = 0;
              }
              unint64_t v226 = (uint64_t *)&v159[8 * v155];
              *unint64_t v226 = v56;
              uint64_t v59 = v226 + 1;
              while (v57 != v154)
              {
                uint64_t v227 = *--v57;
                *--unint64_t v226 = v227;
              }
              v55[628] = v226;
              v55[629] = v59;
              v55[630] = &v159[8 * v158];
              if (v154) {
                operator delete(v154);
              }
            }
            else
            {
              *uint64_t v57 = v56;
              uint64_t v59 = v57 + 1;
            }
            v55[629] = v59;
            break;
          case 0xB2:
            unint64_t v60 = *(void **)a1[2];
            uint64_t v61 = *(_DWORD *)(a1[3] + 44) & 0x7FFFFLL;
            uint64_t v62 = (uint64_t *)v60[632];
            unint64_t v63 = v60[633];
            if ((unint64_t)v62 >= v63)
            {
              unint64_t v160 = (uint64_t *)v60[631];
              uint64_t v161 = v62 - v160;
              if ((unint64_t)(v161 + 1) >> 61) {
                goto LABEL_342;
              }
              unint64_t v162 = v63 - (void)v160;
              unint64_t v163 = (uint64_t)(v63 - (void)v160) >> 2;
              if (v163 <= v161 + 1) {
                unint64_t v163 = v161 + 1;
              }
              if (v162 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v164 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v164 = v163;
              }
              if (v164)
              {
                uint64_t v165 = (char *)sub_5714((uint64_t)(v60 + 633), v164);
                uint64_t v62 = (uint64_t *)v60[632];
                unint64_t v160 = (uint64_t *)v60[631];
              }
              else
              {
                uint64_t v165 = 0;
              }
              unint64_t v228 = (uint64_t *)&v165[8 * v161];
              *unint64_t v228 = v61;
              uint64_t v64 = v228 + 1;
              while (v62 != v160)
              {
                uint64_t v229 = *--v62;
                *--unint64_t v228 = v229;
              }
              v60[631] = v228;
              v60[632] = v64;
              v60[633] = &v165[8 * v164];
              if (v160) {
                operator delete(v160);
              }
            }
            else
            {
              *uint64_t v62 = v61;
              uint64_t v64 = v62 + 1;
            }
            v60[632] = v64;
            break;
          case 0xB3:
            unint64_t v65 = *(void **)a1[2];
            uint64_t v66 = *(_DWORD *)(a1[3] + 80) & 0x7FFFFLL;
            unint64_t v67 = (uint64_t *)v65[635];
            unint64_t v68 = v65[636];
            if ((unint64_t)v67 >= v68)
            {
              uint64_t v166 = (uint64_t *)v65[634];
              uint64_t v167 = v67 - v166;
              if ((unint64_t)(v167 + 1) >> 61) {
                goto LABEL_342;
              }
              unint64_t v168 = v68 - (void)v166;
              unint64_t v169 = (uint64_t)(v68 - (void)v166) >> 2;
              if (v169 <= v167 + 1) {
                unint64_t v169 = v167 + 1;
              }
              if (v168 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v170 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v170 = v169;
              }
              if (v170)
              {
                uint64_t v171 = (char *)sub_5714((uint64_t)(v65 + 636), v170);
                unint64_t v67 = (uint64_t *)v65[635];
                uint64_t v166 = (uint64_t *)v65[634];
              }
              else
              {
                uint64_t v171 = 0;
              }
              uint64_t v230 = (uint64_t *)&v171[8 * v167];
              uint64_t *v230 = v66;
              unint64_t v69 = v230 + 1;
              while (v67 != v166)
              {
                uint64_t v231 = *--v67;
                *--uint64_t v230 = v231;
              }
              v65[634] = v230;
              v65[635] = v69;
              v65[636] = &v171[8 * v170];
              if (v166) {
                operator delete(v166);
              }
            }
            else
            {
              *unint64_t v67 = v66;
              unint64_t v69 = v67 + 1;
            }
            v65[635] = v69;
            break;
          case 0xB4:
            unint64_t v70 = *(void **)a1[2];
            uint64_t v71 = *(_DWORD *)(a1[3] + 48) & 0x7FFFFLL;
            unint64_t v72 = (uint64_t *)v70[638];
            unint64_t v73 = v70[639];
            if ((unint64_t)v72 >= v73)
            {
              unint64_t v172 = (uint64_t *)v70[637];
              uint64_t v173 = v72 - v172;
              if ((unint64_t)(v173 + 1) >> 61) {
                goto LABEL_342;
              }
              unint64_t v174 = v73 - (void)v172;
              unint64_t v175 = (uint64_t)(v73 - (void)v172) >> 2;
              if (v175 <= v173 + 1) {
                unint64_t v175 = v173 + 1;
              }
              if (v174 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v176 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v176 = v175;
              }
              if (v176)
              {
                uint64_t v177 = (char *)sub_5714((uint64_t)(v70 + 639), v176);
                unint64_t v72 = (uint64_t *)v70[638];
                unint64_t v172 = (uint64_t *)v70[637];
              }
              else
              {
                uint64_t v177 = 0;
              }
              unint64_t v232 = (uint64_t *)&v177[8 * v173];
              uint64_t *v232 = v71;
              uint64_t v74 = v232 + 1;
              while (v72 != v172)
              {
                uint64_t v233 = *--v72;
                *--unint64_t v232 = v233;
              }
              v70[637] = v232;
              v70[638] = v74;
              v70[639] = &v177[8 * v176];
              if (v172) {
                operator delete(v172);
              }
            }
            else
            {
              *unint64_t v72 = v71;
              uint64_t v74 = v72 + 1;
            }
            v70[638] = v74;
            break;
          case 0xB5:
            unint64_t v75 = *(void **)a1[2];
            uint64_t v76 = *(_DWORD *)(a1[3] + 20) & 0x7FFFFLL;
            unint64_t v77 = (uint64_t *)v75[641];
            unint64_t v78 = v75[642];
            if ((unint64_t)v77 >= v78)
            {
              uint64_t v178 = (uint64_t *)v75[640];
              uint64_t v179 = v77 - v178;
              if ((unint64_t)(v179 + 1) >> 61) {
                goto LABEL_342;
              }
              unint64_t v180 = v78 - (void)v178;
              unint64_t v181 = (uint64_t)(v78 - (void)v178) >> 2;
              if (v181 <= v179 + 1) {
                unint64_t v181 = v179 + 1;
              }
              if (v180 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v182 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v182 = v181;
              }
              if (v182)
              {
                uint64_t v183 = (char *)sub_5714((uint64_t)(v75 + 642), v182);
                unint64_t v77 = (uint64_t *)v75[641];
                uint64_t v178 = (uint64_t *)v75[640];
              }
              else
              {
                uint64_t v183 = 0;
              }
              unint64_t v234 = (uint64_t *)&v183[8 * v179];
              uint64_t *v234 = v76;
              uint64_t v79 = v234 + 1;
              while (v77 != v178)
              {
                uint64_t v235 = *--v77;
                *--unint64_t v234 = v235;
              }
              v75[640] = v234;
              v75[641] = v79;
              v75[642] = &v183[8 * v182];
              if (v178) {
                operator delete(v178);
              }
            }
            else
            {
              *unint64_t v77 = v76;
              uint64_t v79 = v77 + 1;
            }
            v75[641] = v79;
            break;
          case 0xB6:
            uint64_t v80 = *(void **)a1[2];
            uint64_t v81 = *(_DWORD *)(a1[3] + 56) & 0x7FFFFLL;
            unint64_t v82 = (uint64_t *)v80[644];
            unint64_t v83 = v80[645];
            if ((unint64_t)v82 >= v83)
            {
              unint64_t v184 = (uint64_t *)v80[643];
              uint64_t v185 = v82 - v184;
              if ((unint64_t)(v185 + 1) >> 61) {
                goto LABEL_342;
              }
              unint64_t v186 = v83 - (void)v184;
              unint64_t v187 = (uint64_t)(v83 - (void)v184) >> 2;
              if (v187 <= v185 + 1) {
                unint64_t v187 = v185 + 1;
              }
              if (v186 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v188 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v188 = v187;
              }
              if (v188)
              {
                uint64_t v189 = (char *)sub_5714((uint64_t)(v80 + 645), v188);
                unint64_t v82 = (uint64_t *)v80[644];
                unint64_t v184 = (uint64_t *)v80[643];
              }
              else
              {
                uint64_t v189 = 0;
              }
              uint64_t v236 = (uint64_t *)&v189[8 * v185];
              uint64_t *v236 = v81;
              unint64_t v84 = v236 + 1;
              while (v82 != v184)
              {
                uint64_t v237 = *--v82;
                *--uint64_t v236 = v237;
              }
              v80[643] = v236;
              v80[644] = v84;
              v80[645] = &v189[8 * v188];
              if (v184) {
                operator delete(v184);
              }
            }
            else
            {
              *unint64_t v82 = v81;
              unint64_t v84 = v82 + 1;
            }
            v80[644] = v84;
            break;
          case 0xB7:
            unint64_t v85 = *(void **)a1[2];
            uint64_t v86 = *(_DWORD *)(a1[3] + 28) & 0x7FFFFLL;
            unint64_t v87 = (uint64_t *)v85[647];
            unint64_t v88 = v85[648];
            if ((unint64_t)v87 >= v88)
            {
              unint64_t v190 = (uint64_t *)v85[646];
              uint64_t v191 = v87 - v190;
              if ((unint64_t)(v191 + 1) >> 61) {
                goto LABEL_342;
              }
              unint64_t v192 = v88 - (void)v190;
              unint64_t v193 = (uint64_t)(v88 - (void)v190) >> 2;
              if (v193 <= v191 + 1) {
                unint64_t v193 = v191 + 1;
              }
              if (v192 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v194 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v194 = v193;
              }
              if (v194)
              {
                uint64_t v195 = (char *)sub_5714((uint64_t)(v85 + 648), v194);
                unint64_t v87 = (uint64_t *)v85[647];
                unint64_t v190 = (uint64_t *)v85[646];
              }
              else
              {
                uint64_t v195 = 0;
              }
              unint64_t v238 = (uint64_t *)&v195[8 * v191];
              uint64_t *v238 = v86;
              unint64_t v89 = v238 + 1;
              while (v87 != v190)
              {
                uint64_t v239 = *--v87;
                *--unint64_t v238 = v239;
              }
              v85[646] = v238;
              v85[647] = v89;
              v85[648] = &v195[8 * v194];
              if (v190) {
                operator delete(v190);
              }
            }
            else
            {
              *unint64_t v87 = v86;
              unint64_t v89 = v87 + 1;
            }
            v85[647] = v89;
            break;
          case 0xB8:
            unint64_t v90 = *(void **)a1[2];
            uint64_t v91 = *(_DWORD *)(a1[3] + 64) & 0x7FFFFLL;
            uint64_t v92 = (uint64_t *)v90[650];
            unint64_t v93 = v90[651];
            if ((unint64_t)v92 >= v93)
            {
              unint64_t v196 = (uint64_t *)v90[649];
              uint64_t v197 = v92 - v196;
              if ((unint64_t)(v197 + 1) >> 61) {
                goto LABEL_342;
              }
              unint64_t v198 = v93 - (void)v196;
              unint64_t v199 = (uint64_t)(v93 - (void)v196) >> 2;
              if (v199 <= v197 + 1) {
                unint64_t v199 = v197 + 1;
              }
              if (v198 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v200 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v200 = v199;
              }
              if (v200)
              {
                uint64_t v201 = (char *)sub_5714((uint64_t)(v90 + 651), v200);
                uint64_t v92 = (uint64_t *)v90[650];
                unint64_t v196 = (uint64_t *)v90[649];
              }
              else
              {
                uint64_t v201 = 0;
              }
              unint64_t v240 = (uint64_t *)&v201[8 * v197];
              *unint64_t v240 = v91;
              unint64_t v94 = v240 + 1;
              while (v92 != v196)
              {
                uint64_t v241 = *--v92;
                *--unint64_t v240 = v241;
              }
              v90[649] = v240;
              v90[650] = v94;
              v90[651] = &v201[8 * v200];
              if (v196) {
                operator delete(v196);
              }
            }
            else
            {
              *uint64_t v92 = v91;
              unint64_t v94 = v92 + 1;
            }
            v90[650] = v94;
            break;
          case 0xB9:
            unint64_t v95 = *(void **)a1[2];
            uint64_t v96 = *(_DWORD *)(a1[3] + 84) & 0x7FFFFLL;
            uint64_t v97 = (uint64_t *)v95[653];
            unint64_t v98 = v95[654];
            if ((unint64_t)v97 >= v98)
            {
              unint64_t v202 = (uint64_t *)v95[652];
              uint64_t v203 = v97 - v202;
              if ((unint64_t)(v203 + 1) >> 61) {
LABEL_342:
              }
                sub_566C();
              unint64_t v204 = v98 - (void)v202;
              unint64_t v205 = (uint64_t)(v98 - (void)v202) >> 2;
              if (v205 <= v203 + 1) {
                unint64_t v205 = v203 + 1;
              }
              if (v204 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v206 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v206 = v205;
              }
              if (v206)
              {
                uint64_t v207 = (char *)sub_5714((uint64_t)(v95 + 654), v206);
                uint64_t v97 = (uint64_t *)v95[653];
                unint64_t v202 = (uint64_t *)v95[652];
              }
              else
              {
                uint64_t v207 = 0;
              }
              unint64_t v242 = (uint64_t *)&v207[8 * v203];
              *unint64_t v242 = v96;
              unint64_t v99 = v242 + 1;
              while (v97 != v202)
              {
                uint64_t v243 = *--v97;
                *--unint64_t v242 = v243;
              }
              v95[652] = v242;
              v95[653] = v99;
              v95[654] = &v207[8 * v206];
              if (v202) {
                operator delete(v202);
              }
            }
            else
            {
              *uint64_t v97 = v96;
              unint64_t v99 = v97 + 1;
            }
            v95[653] = v99;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_5AB34(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    unint64_t v232 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v231 = *v232;
    uint64_t v233 = (char *)v232[1] - (char *)*v232;
    if (v233)
    {
      unint64_t v234 = v233 >> 2;
      if (v234 <= 1) {
        unint64_t v234 = 1;
      }
      do
      {
        int v235 = *v231++;
        switch(v235)
        {
          case 186:
            uint64_t v236 = *(_WORD *)(a1[3] + 28) & 0x7FFF;
            uint64_t v237 = (void *)(*(void *)a1[2] + 5248);
            goto LABEL_320;
          case 187:
            uint64_t v236 = *(_DWORD *)(a1[3] + 60) & 0x7FFFF;
            uint64_t v237 = (void *)(*(void *)a1[2] + 5272);
            goto LABEL_320;
          case 188:
            uint64_t v236 = *(_WORD *)(a1[3] + 32) & 0x7FFF;
            uint64_t v237 = (void *)(*(void *)a1[2] + 5296);
            goto LABEL_320;
          case 189:
            uint64_t v236 = (unsigned __int16)*(_DWORD *)(a1[3] + 16) >> 1;
            uint64_t v237 = (void *)(*(void *)a1[2] + 5320);
            goto LABEL_320;
          case 190:
            uint64_t v236 = *(_DWORD *)(a1[3] + 36) & 0x7FFFF;
            uint64_t v237 = (void *)(*(void *)a1[2] + 5344);
            goto LABEL_320;
          case 191:
            uint64_t v236 = *(_WORD *)(a1[3] + 20) & 0x7FFF;
            uint64_t v237 = (void *)(*(void *)a1[2] + 5368);
            goto LABEL_320;
          case 192:
            uint64_t v236 = *(_DWORD *)(a1[3] + 44) & 0x7FFFF;
            uint64_t v237 = (void *)(*(void *)a1[2] + 5392);
            goto LABEL_320;
          case 193:
            uint64_t v236 = *(_WORD *)(a1[3] + 26) & 0x7FFF;
            uint64_t v237 = (void *)(*(void *)a1[2] + 5416);
            goto LABEL_320;
          case 194:
            uint64_t v236 = *(_DWORD *)(a1[3] + 56) & 0x7FFFF;
            uint64_t v237 = (void *)(*(void *)a1[2] + 5440);
            goto LABEL_320;
          case 195:
            uint64_t v236 = *(_WORD *)(a1[3] + 24) & 0x7FFF;
            uint64_t v237 = (void *)(*(void *)a1[2] + 5464);
            goto LABEL_320;
          case 196:
            uint64_t v236 = *(_DWORD *)(a1[3] + 52) & 0x7FFFF;
            uint64_t v237 = (void *)(*(void *)a1[2] + 5488);
            goto LABEL_320;
          case 197:
            uint64_t v236 = *(_WORD *)(a1[3] + 30) & 0x7FFF;
            uint64_t v237 = (void *)(*(void *)a1[2] + 5512);
            goto LABEL_320;
          case 198:
            uint64_t v236 = *(_DWORD *)(a1[3] + 64) & 0x7FFFF;
            uint64_t v237 = (void *)(*(void *)a1[2] + 5536);
            goto LABEL_320;
          case 199:
            uint64_t v236 = *(_WORD *)(a1[3] + 18) & 0x7FFF;
            uint64_t v237 = (void *)(*(void *)a1[2] + 5560);
            goto LABEL_320;
          case 200:
            uint64_t v236 = *(_DWORD *)(a1[3] + 40) & 0x7FFFF;
            uint64_t v237 = (void *)(*(void *)a1[2] + 5584);
            goto LABEL_320;
          case 201:
            uint64_t v236 = *(_WORD *)(a1[3] + 22) & 0x7FFF;
            uint64_t v237 = (void *)(*(void *)a1[2] + 5608);
            goto LABEL_320;
          case 202:
            uint64_t v236 = *(_DWORD *)(a1[3] + 48) & 0x7FFFF;
            uint64_t v237 = (void *)(*(void *)a1[2] + 5632);
LABEL_320:
            *(void *)(*v237 - 8) += v236;
            break;
          default:
            break;
        }
        --v234;
      }
      while (v234);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0xBA:
            uint64_t v10 = *(void **)a1[2];
            uint64_t v11 = *(_WORD *)(a1[3] + 28) & 0x7FFF;
            unsigned int v12 = (char *)v10[656];
            unint64_t v13 = v10[657];
            if ((unint64_t)v12 >= v13)
            {
              unint64_t v95 = (char *)v10[655];
              uint64_t v96 = (v12 - v95) >> 3;
              if ((unint64_t)(v96 + 1) >> 61) {
                goto LABEL_324;
              }
              unint64_t v97 = v13 - (void)v95;
              unint64_t v98 = (uint64_t)(v13 - (void)v95) >> 2;
              if (v98 <= v96 + 1) {
                unint64_t v98 = v96 + 1;
              }
              if (v97 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v99 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v99 = v98;
              }
              if (v99)
              {
                unint64_t v100 = (char *)sub_5714((uint64_t)(v10 + 657), v99);
                unsigned int v12 = (char *)v10[656];
                unint64_t v95 = (char *)v10[655];
              }
              else
              {
                unint64_t v100 = 0;
              }
              uint64_t v197 = &v100[8 * v96];
              *(void *)uint64_t v197 = v11;
              unint64_t v14 = v197 + 8;
              while (v12 != v95)
              {
                uint64_t v198 = *((void *)v12 - 1);
                v12 -= 8;
                *((void *)v197 - 1) = v198;
                v197 -= 8;
              }
              v10[655] = v197;
              v10[656] = v14;
              v10[657] = &v100[8 * v99];
              if (v95) {
                operator delete(v95);
              }
            }
            else
            {
              *(void *)unsigned int v12 = v11;
              unint64_t v14 = v12 + 8;
            }
            v10[656] = v14;
            break;
          case 0xBB:
            unint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_DWORD *)(a1[3] + 60) & 0x7FFFFLL;
            uint64_t v17 = (uint64_t *)v15[659];
            unint64_t v18 = v15[660];
            if ((unint64_t)v17 >= v18)
            {
              uint64_t v101 = (uint64_t *)v15[658];
              uint64_t v102 = v17 - v101;
              if ((unint64_t)(v102 + 1) >> 61) {
                goto LABEL_324;
              }
              unint64_t v103 = v18 - (void)v101;
              unint64_t v104 = (uint64_t)(v18 - (void)v101) >> 2;
              if (v104 <= v102 + 1) {
                unint64_t v104 = v102 + 1;
              }
              if (v103 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v105 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v105 = v104;
              }
              if (v105)
              {
                unint64_t v106 = (char *)sub_5714((uint64_t)(v15 + 660), v105);
                uint64_t v17 = (uint64_t *)v15[659];
                uint64_t v101 = (uint64_t *)v15[658];
              }
              else
              {
                unint64_t v106 = 0;
              }
              unint64_t v199 = (uint64_t *)&v106[8 * v102];
              *unint64_t v199 = v16;
              unint64_t v19 = v199 + 1;
              while (v17 != v101)
              {
                uint64_t v200 = *--v17;
                *--unint64_t v199 = v200;
              }
              v15[658] = v199;
              v15[659] = v19;
              v15[660] = &v106[8 * v105];
              if (v101) {
                operator delete(v101);
              }
            }
            else
            {
              *uint64_t v17 = v16;
              unint64_t v19 = v17 + 1;
            }
            v15[659] = v19;
            break;
          case 0xBC:
            uint64_t v20 = *(void **)a1[2];
            uint64_t v21 = *(_WORD *)(a1[3] + 32) & 0x7FFF;
            uint64_t v22 = (char *)v20[662];
            unint64_t v23 = v20[663];
            if ((unint64_t)v22 >= v23)
            {
              uint64_t v107 = (char *)v20[661];
              uint64_t v108 = (v22 - v107) >> 3;
              if ((unint64_t)(v108 + 1) >> 61) {
                goto LABEL_324;
              }
              unint64_t v109 = v23 - (void)v107;
              unint64_t v110 = (uint64_t)(v23 - (void)v107) >> 2;
              if (v110 <= v108 + 1) {
                unint64_t v110 = v108 + 1;
              }
              if (v109 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v111 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v111 = v110;
              }
              if (v111)
              {
                unint64_t v112 = (char *)sub_5714((uint64_t)(v20 + 663), v111);
                uint64_t v22 = (char *)v20[662];
                uint64_t v107 = (char *)v20[661];
              }
              else
              {
                unint64_t v112 = 0;
              }
              uint64_t v201 = &v112[8 * v108];
              *(void *)uint64_t v201 = v21;
              unint64_t v24 = v201 + 8;
              while (v22 != v107)
              {
                uint64_t v202 = *((void *)v22 - 1);
                v22 -= 8;
                *((void *)v201 - 1) = v202;
                v201 -= 8;
              }
              v20[661] = v201;
              v20[662] = v24;
              v20[663] = &v112[8 * v111];
              if (v107) {
                operator delete(v107);
              }
            }
            else
            {
              *(void *)uint64_t v22 = v21;
              unint64_t v24 = v22 + 8;
            }
            v20[662] = v24;
            break;
          case 0xBD:
            uint64_t v25 = *(void **)a1[2];
            uint64_t v26 = (unsigned __int16)*(_DWORD *)(a1[3] + 16) >> 1;
            uint64_t v27 = (char *)v25[665];
            unint64_t v28 = v25[666];
            if ((unint64_t)v27 >= v28)
            {
              uint64_t v113 = (char *)v25[664];
              uint64_t v114 = (v27 - v113) >> 3;
              if ((unint64_t)(v114 + 1) >> 61) {
                goto LABEL_324;
              }
              unint64_t v115 = v28 - (void)v113;
              unint64_t v116 = (uint64_t)(v28 - (void)v113) >> 2;
              if (v116 <= v114 + 1) {
                unint64_t v116 = v114 + 1;
              }
              if (v115 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v117 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v117 = v116;
              }
              if (v117)
              {
                unint64_t v118 = (char *)sub_5714((uint64_t)(v25 + 666), v117);
                uint64_t v27 = (char *)v25[665];
                uint64_t v113 = (char *)v25[664];
              }
              else
              {
                unint64_t v118 = 0;
              }
              uint64_t v203 = &v118[8 * v114];
              *(void *)uint64_t v203 = v26;
              unint64_t v29 = v203 + 8;
              while (v27 != v113)
              {
                uint64_t v204 = *((void *)v27 - 1);
                v27 -= 8;
                *((void *)v203 - 1) = v204;
                v203 -= 8;
              }
              v25[664] = v203;
              v25[665] = v29;
              v25[666] = &v118[8 * v117];
              if (v113) {
                operator delete(v113);
              }
            }
            else
            {
              *(void *)uint64_t v27 = v26;
              unint64_t v29 = v27 + 8;
            }
            v25[665] = v29;
            break;
          case 0xBE:
            unint64_t v30 = *(void **)a1[2];
            uint64_t v31 = *(_DWORD *)(a1[3] + 36) & 0x7FFFFLL;
            unint64_t v32 = (uint64_t *)v30[668];
            unint64_t v33 = v30[669];
            if ((unint64_t)v32 >= v33)
            {
              uint64_t v119 = (uint64_t *)v30[667];
              uint64_t v120 = v32 - v119;
              if ((unint64_t)(v120 + 1) >> 61) {
                goto LABEL_324;
              }
              unint64_t v121 = v33 - (void)v119;
              unint64_t v122 = (uint64_t)(v33 - (void)v119) >> 2;
              if (v122 <= v120 + 1) {
                unint64_t v122 = v120 + 1;
              }
              if (v121 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v123 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v123 = v122;
              }
              if (v123)
              {
                unint64_t v124 = (char *)sub_5714((uint64_t)(v30 + 669), v123);
                unint64_t v32 = (uint64_t *)v30[668];
                uint64_t v119 = (uint64_t *)v30[667];
              }
              else
              {
                unint64_t v124 = 0;
              }
              unint64_t v205 = (uint64_t *)&v124[8 * v120];
              *unint64_t v205 = v31;
              unint64_t v34 = v205 + 1;
              while (v32 != v119)
              {
                uint64_t v206 = *--v32;
                *--unint64_t v205 = v206;
              }
              v30[667] = v205;
              v30[668] = v34;
              v30[669] = &v124[8 * v123];
              if (v119) {
                operator delete(v119);
              }
            }
            else
            {
              *unint64_t v32 = v31;
              unint64_t v34 = v32 + 1;
            }
            v30[668] = v34;
            break;
          case 0xBF:
            unint64_t v35 = *(void **)a1[2];
            uint64_t v36 = *(_WORD *)(a1[3] + 20) & 0x7FFF;
            uint64_t v37 = (char *)v35[671];
            unint64_t v38 = v35[672];
            if ((unint64_t)v37 >= v38)
            {
              uint64_t v125 = (char *)v35[670];
              uint64_t v126 = (v37 - v125) >> 3;
              if ((unint64_t)(v126 + 1) >> 61) {
                goto LABEL_324;
              }
              unint64_t v127 = v38 - (void)v125;
              unint64_t v128 = (uint64_t)(v38 - (void)v125) >> 2;
              if (v128 <= v126 + 1) {
                unint64_t v128 = v126 + 1;
              }
              if (v127 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v129 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v129 = v128;
              }
              if (v129)
              {
                unint64_t v130 = (char *)sub_5714((uint64_t)(v35 + 672), v129);
                uint64_t v37 = (char *)v35[671];
                uint64_t v125 = (char *)v35[670];
              }
              else
              {
                unint64_t v130 = 0;
              }
              uint64_t v207 = &v130[8 * v126];
              *(void *)uint64_t v207 = v36;
              unint64_t v39 = v207 + 8;
              while (v37 != v125)
              {
                uint64_t v208 = *((void *)v37 - 1);
                v37 -= 8;
                *((void *)v207 - 1) = v208;
                v207 -= 8;
              }
              v35[670] = v207;
              v35[671] = v39;
              v35[672] = &v130[8 * v129];
              if (v125) {
                operator delete(v125);
              }
            }
            else
            {
              *(void *)uint64_t v37 = v36;
              unint64_t v39 = v37 + 8;
            }
            v35[671] = v39;
            break;
          case 0xC0:
            unint64_t v40 = *(void **)a1[2];
            uint64_t v41 = *(_DWORD *)(a1[3] + 44) & 0x7FFFFLL;
            uint64_t v42 = (uint64_t *)v40[674];
            unint64_t v43 = v40[675];
            if ((unint64_t)v42 >= v43)
            {
              uint64_t v131 = (uint64_t *)v40[673];
              uint64_t v132 = v42 - v131;
              if ((unint64_t)(v132 + 1) >> 61) {
                goto LABEL_324;
              }
              unint64_t v133 = v43 - (void)v131;
              unint64_t v134 = (uint64_t)(v43 - (void)v131) >> 2;
              if (v134 <= v132 + 1) {
                unint64_t v134 = v132 + 1;
              }
              if (v133 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v135 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v135 = v134;
              }
              if (v135)
              {
                uint64_t v136 = (char *)sub_5714((uint64_t)(v40 + 675), v135);
                uint64_t v42 = (uint64_t *)v40[674];
                uint64_t v131 = (uint64_t *)v40[673];
              }
              else
              {
                uint64_t v136 = 0;
              }
              uint64_t v209 = (uint64_t *)&v136[8 * v132];
              *uint64_t v209 = v41;
              unint64_t v44 = v209 + 1;
              while (v42 != v131)
              {
                uint64_t v210 = *--v42;
                *--uint64_t v209 = v210;
              }
              v40[673] = v209;
              v40[674] = v44;
              v40[675] = &v136[8 * v135];
              if (v131) {
                operator delete(v131);
              }
            }
            else
            {
              *uint64_t v42 = v41;
              unint64_t v44 = v42 + 1;
            }
            v40[674] = v44;
            break;
          case 0xC1:
            unint64_t v45 = *(void **)a1[2];
            uint64_t v46 = *(_WORD *)(a1[3] + 26) & 0x7FFF;
            uint64_t v47 = (char *)v45[677];
            unint64_t v48 = v45[678];
            if ((unint64_t)v47 >= v48)
            {
              uint64_t v137 = (char *)v45[676];
              uint64_t v138 = (v47 - v137) >> 3;
              if ((unint64_t)(v138 + 1) >> 61) {
                goto LABEL_324;
              }
              unint64_t v139 = v48 - (void)v137;
              unint64_t v140 = (uint64_t)(v48 - (void)v137) >> 2;
              if (v140 <= v138 + 1) {
                unint64_t v140 = v138 + 1;
              }
              if (v139 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v141 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v141 = v140;
              }
              if (v141)
              {
                uint64_t v142 = (char *)sub_5714((uint64_t)(v45 + 678), v141);
                uint64_t v47 = (char *)v45[677];
                uint64_t v137 = (char *)v45[676];
              }
              else
              {
                uint64_t v142 = 0;
              }
              uint64_t v211 = &v142[8 * v138];
              *(void *)uint64_t v211 = v46;
              uint64_t v49 = v211 + 8;
              while (v47 != v137)
              {
                uint64_t v212 = *((void *)v47 - 1);
                v47 -= 8;
                *((void *)v211 - 1) = v212;
                v211 -= 8;
              }
              v45[676] = v211;
              v45[677] = v49;
              v45[678] = &v142[8 * v141];
              if (v137) {
                operator delete(v137);
              }
            }
            else
            {
              *(void *)uint64_t v47 = v46;
              uint64_t v49 = v47 + 8;
            }
            v45[677] = v49;
            break;
          case 0xC2:
            unint64_t v50 = *(void **)a1[2];
            uint64_t v51 = *(_DWORD *)(a1[3] + 56) & 0x7FFFFLL;
            unint64_t v52 = (uint64_t *)v50[680];
            unint64_t v53 = v50[681];
            if ((unint64_t)v52 >= v53)
            {
              uint64_t v143 = (uint64_t *)v50[679];
              uint64_t v144 = v52 - v143;
              if ((unint64_t)(v144 + 1) >> 61) {
                goto LABEL_324;
              }
              unint64_t v145 = v53 - (void)v143;
              unint64_t v146 = (uint64_t)(v53 - (void)v143) >> 2;
              if (v146 <= v144 + 1) {
                unint64_t v146 = v144 + 1;
              }
              if (v145 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v147 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v147 = v146;
              }
              if (v147)
              {
                uint64_t v148 = (char *)sub_5714((uint64_t)(v50 + 681), v147);
                unint64_t v52 = (uint64_t *)v50[680];
                uint64_t v143 = (uint64_t *)v50[679];
              }
              else
              {
                uint64_t v148 = 0;
              }
              unint64_t v213 = (uint64_t *)&v148[8 * v144];
              *unint64_t v213 = v51;
              unint64_t v54 = v213 + 1;
              while (v52 != v143)
              {
                uint64_t v214 = *--v52;
                *--unint64_t v213 = v214;
              }
              v50[679] = v213;
              v50[680] = v54;
              v50[681] = &v148[8 * v147];
              if (v143) {
                operator delete(v143);
              }
            }
            else
            {
              *unint64_t v52 = v51;
              unint64_t v54 = v52 + 1;
            }
            v50[680] = v54;
            break;
          case 0xC3:
            uint64_t v55 = *(void **)a1[2];
            uint64_t v56 = *(_WORD *)(a1[3] + 24) & 0x7FFF;
            uint64_t v57 = (char *)v55[683];
            unint64_t v58 = v55[684];
            if ((unint64_t)v57 >= v58)
            {
              uint64_t v149 = (char *)v55[682];
              uint64_t v150 = (v57 - v149) >> 3;
              if ((unint64_t)(v150 + 1) >> 61) {
                goto LABEL_324;
              }
              unint64_t v151 = v58 - (void)v149;
              unint64_t v152 = (uint64_t)(v58 - (void)v149) >> 2;
              if (v152 <= v150 + 1) {
                unint64_t v152 = v150 + 1;
              }
              if (v151 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v153 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v153 = v152;
              }
              if (v153)
              {
                uint64_t v154 = (char *)sub_5714((uint64_t)(v55 + 684), v153);
                uint64_t v57 = (char *)v55[683];
                uint64_t v149 = (char *)v55[682];
              }
              else
              {
                uint64_t v154 = 0;
              }
              uint64_t v215 = &v154[8 * v150];
              *(void *)uint64_t v215 = v56;
              uint64_t v59 = v215 + 8;
              while (v57 != v149)
              {
                uint64_t v216 = *((void *)v57 - 1);
                v57 -= 8;
                *((void *)v215 - 1) = v216;
                v215 -= 8;
              }
              v55[682] = v215;
              v55[683] = v59;
              v55[684] = &v154[8 * v153];
              if (v149) {
                operator delete(v149);
              }
            }
            else
            {
              *(void *)uint64_t v57 = v56;
              uint64_t v59 = v57 + 8;
            }
            v55[683] = v59;
            break;
          case 0xC4:
            unint64_t v60 = *(void **)a1[2];
            uint64_t v61 = *(_DWORD *)(a1[3] + 52) & 0x7FFFFLL;
            uint64_t v62 = (uint64_t *)v60[686];
            unint64_t v63 = v60[687];
            if ((unint64_t)v62 >= v63)
            {
              uint64_t v155 = (uint64_t *)v60[685];
              uint64_t v156 = v62 - v155;
              if ((unint64_t)(v156 + 1) >> 61) {
                goto LABEL_324;
              }
              unint64_t v157 = v63 - (void)v155;
              unint64_t v158 = (uint64_t)(v63 - (void)v155) >> 2;
              if (v158 <= v156 + 1) {
                unint64_t v158 = v156 + 1;
              }
              if (v157 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v159 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v159 = v158;
              }
              if (v159)
              {
                unint64_t v160 = (char *)sub_5714((uint64_t)(v60 + 687), v159);
                uint64_t v62 = (uint64_t *)v60[686];
                uint64_t v155 = (uint64_t *)v60[685];
              }
              else
              {
                unint64_t v160 = 0;
              }
              uint64_t v217 = (uint64_t *)&v160[8 * v156];
              uint64_t *v217 = v61;
              uint64_t v64 = v217 + 1;
              while (v62 != v155)
              {
                uint64_t v218 = *--v62;
                *--uint64_t v217 = v218;
              }
              v60[685] = v217;
              v60[686] = v64;
              v60[687] = &v160[8 * v159];
              if (v155) {
                operator delete(v155);
              }
            }
            else
            {
              *uint64_t v62 = v61;
              uint64_t v64 = v62 + 1;
            }
            v60[686] = v64;
            break;
          case 0xC5:
            unint64_t v65 = *(void **)a1[2];
            uint64_t v66 = *(_WORD *)(a1[3] + 30) & 0x7FFF;
            unint64_t v67 = (char *)v65[689];
            unint64_t v68 = v65[690];
            if ((unint64_t)v67 >= v68)
            {
              uint64_t v161 = (char *)v65[688];
              uint64_t v162 = (v67 - v161) >> 3;
              if ((unint64_t)(v162 + 1) >> 61) {
                goto LABEL_324;
              }
              unint64_t v163 = v68 - (void)v161;
              unint64_t v164 = (uint64_t)(v68 - (void)v161) >> 2;
              if (v164 <= v162 + 1) {
                unint64_t v164 = v162 + 1;
              }
              if (v163 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v165 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v165 = v164;
              }
              if (v165)
              {
                uint64_t v166 = (char *)sub_5714((uint64_t)(v65 + 690), v165);
                unint64_t v67 = (char *)v65[689];
                uint64_t v161 = (char *)v65[688];
              }
              else
              {
                uint64_t v166 = 0;
              }
              uint64_t v219 = &v166[8 * v162];
              *(void *)uint64_t v219 = v66;
              unint64_t v69 = v219 + 8;
              while (v67 != v161)
              {
                uint64_t v220 = *((void *)v67 - 1);
                v67 -= 8;
                *((void *)v219 - 1) = v220;
                v219 -= 8;
              }
              v65[688] = v219;
              v65[689] = v69;
              v65[690] = &v166[8 * v165];
              if (v161) {
                operator delete(v161);
              }
            }
            else
            {
              *(void *)unint64_t v67 = v66;
              unint64_t v69 = v67 + 8;
            }
            v65[689] = v69;
            break;
          case 0xC6:
            unint64_t v70 = *(void **)a1[2];
            uint64_t v71 = *(_DWORD *)(a1[3] + 64) & 0x7FFFFLL;
            unint64_t v72 = (uint64_t *)v70[692];
            unint64_t v73 = v70[693];
            if ((unint64_t)v72 >= v73)
            {
              uint64_t v167 = (uint64_t *)v70[691];
              uint64_t v168 = v72 - v167;
              if ((unint64_t)(v168 + 1) >> 61) {
                goto LABEL_324;
              }
              unint64_t v169 = v73 - (void)v167;
              unint64_t v170 = (uint64_t)(v73 - (void)v167) >> 2;
              if (v170 <= v168 + 1) {
                unint64_t v170 = v168 + 1;
              }
              if (v169 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v171 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v171 = v170;
              }
              if (v171)
              {
                unint64_t v172 = (char *)sub_5714((uint64_t)(v70 + 693), v171);
                unint64_t v72 = (uint64_t *)v70[692];
                uint64_t v167 = (uint64_t *)v70[691];
              }
              else
              {
                unint64_t v172 = 0;
              }
              uint64_t v221 = (uint64_t *)&v172[8 * v168];
              *uint64_t v221 = v71;
              uint64_t v74 = v221 + 1;
              while (v72 != v167)
              {
                uint64_t v222 = *--v72;
                *--uint64_t v221 = v222;
              }
              v70[691] = v221;
              v70[692] = v74;
              v70[693] = &v172[8 * v171];
              if (v167) {
                operator delete(v167);
              }
            }
            else
            {
              *unint64_t v72 = v71;
              uint64_t v74 = v72 + 1;
            }
            v70[692] = v74;
            break;
          case 0xC7:
            unint64_t v75 = *(void **)a1[2];
            uint64_t v76 = *(_WORD *)(a1[3] + 18) & 0x7FFF;
            unint64_t v77 = (char *)v75[695];
            unint64_t v78 = v75[696];
            if ((unint64_t)v77 >= v78)
            {
              uint64_t v173 = (char *)v75[694];
              uint64_t v174 = (v77 - v173) >> 3;
              if ((unint64_t)(v174 + 1) >> 61) {
                goto LABEL_324;
              }
              unint64_t v175 = v78 - (void)v173;
              unint64_t v176 = (uint64_t)(v78 - (void)v173) >> 2;
              if (v176 <= v174 + 1) {
                unint64_t v176 = v174 + 1;
              }
              if (v175 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v177 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v177 = v176;
              }
              if (v177)
              {
                uint64_t v178 = (char *)sub_5714((uint64_t)(v75 + 696), v177);
                unint64_t v77 = (char *)v75[695];
                uint64_t v173 = (char *)v75[694];
              }
              else
              {
                uint64_t v178 = 0;
              }
              uint64_t v223 = &v178[8 * v174];
              *(void *)uint64_t v223 = v76;
              uint64_t v79 = v223 + 8;
              while (v77 != v173)
              {
                uint64_t v224 = *((void *)v77 - 1);
                v77 -= 8;
                *((void *)v223 - 1) = v224;
                v223 -= 8;
              }
              v75[694] = v223;
              v75[695] = v79;
              v75[696] = &v178[8 * v177];
              if (v173) {
                operator delete(v173);
              }
            }
            else
            {
              *(void *)unint64_t v77 = v76;
              uint64_t v79 = v77 + 8;
            }
            v75[695] = v79;
            break;
          case 0xC8:
            uint64_t v80 = *(void **)a1[2];
            uint64_t v81 = *(_DWORD *)(a1[3] + 40) & 0x7FFFFLL;
            unint64_t v82 = (uint64_t *)v80[698];
            unint64_t v83 = v80[699];
            if ((unint64_t)v82 >= v83)
            {
              uint64_t v179 = (uint64_t *)v80[697];
              uint64_t v180 = v82 - v179;
              if ((unint64_t)(v180 + 1) >> 61) {
                goto LABEL_324;
              }
              unint64_t v181 = v83 - (void)v179;
              unint64_t v182 = (uint64_t)(v83 - (void)v179) >> 2;
              if (v182 <= v180 + 1) {
                unint64_t v182 = v180 + 1;
              }
              if (v181 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v183 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v183 = v182;
              }
              if (v183)
              {
                unint64_t v184 = (char *)sub_5714((uint64_t)(v80 + 699), v183);
                unint64_t v82 = (uint64_t *)v80[698];
                uint64_t v179 = (uint64_t *)v80[697];
              }
              else
              {
                unint64_t v184 = 0;
              }
              uint64_t v225 = (uint64_t *)&v184[8 * v180];
              uint64_t *v225 = v81;
              unint64_t v84 = v225 + 1;
              while (v82 != v179)
              {
                uint64_t v226 = *--v82;
                *--uint64_t v225 = v226;
              }
              v80[697] = v225;
              v80[698] = v84;
              v80[699] = &v184[8 * v183];
              if (v179) {
                operator delete(v179);
              }
            }
            else
            {
              *unint64_t v82 = v81;
              unint64_t v84 = v82 + 1;
            }
            v80[698] = v84;
            break;
          case 0xC9:
            unint64_t v85 = *(void **)a1[2];
            uint64_t v86 = *(_WORD *)(a1[3] + 22) & 0x7FFF;
            unint64_t v87 = (char *)v85[701];
            unint64_t v88 = v85[702];
            if ((unint64_t)v87 >= v88)
            {
              uint64_t v185 = (char *)v85[700];
              uint64_t v186 = (v87 - v185) >> 3;
              if ((unint64_t)(v186 + 1) >> 61) {
                goto LABEL_324;
              }
              unint64_t v187 = v88 - (void)v185;
              unint64_t v188 = (uint64_t)(v88 - (void)v185) >> 2;
              if (v188 <= v186 + 1) {
                unint64_t v188 = v186 + 1;
              }
              if (v187 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v189 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v189 = v188;
              }
              if (v189)
              {
                unint64_t v190 = (char *)sub_5714((uint64_t)(v85 + 702), v189);
                unint64_t v87 = (char *)v85[701];
                uint64_t v185 = (char *)v85[700];
              }
              else
              {
                unint64_t v190 = 0;
              }
              uint64_t v227 = &v190[8 * v186];
              *(void *)uint64_t v227 = v86;
              unint64_t v89 = v227 + 8;
              while (v87 != v185)
              {
                uint64_t v228 = *((void *)v87 - 1);
                v87 -= 8;
                *((void *)v227 - 1) = v228;
                v227 -= 8;
              }
              v85[700] = v227;
              v85[701] = v89;
              v85[702] = &v190[8 * v189];
              if (v185) {
                operator delete(v185);
              }
            }
            else
            {
              *(void *)unint64_t v87 = v86;
              unint64_t v89 = v87 + 8;
            }
            v85[701] = v89;
            break;
          case 0xCA:
            unint64_t v90 = *(void **)a1[2];
            uint64_t v91 = *(_DWORD *)(a1[3] + 48) & 0x7FFFFLL;
            uint64_t v92 = (uint64_t *)v90[704];
            unint64_t v93 = v90[705];
            if ((unint64_t)v92 >= v93)
            {
              uint64_t v191 = (uint64_t *)v90[703];
              uint64_t v192 = v92 - v191;
              if ((unint64_t)(v192 + 1) >> 61) {
LABEL_324:
              }
                sub_566C();
              unint64_t v193 = v93 - (void)v191;
              unint64_t v194 = (uint64_t)(v93 - (void)v191) >> 2;
              if (v194 <= v192 + 1) {
                unint64_t v194 = v192 + 1;
              }
              if (v193 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v195 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v195 = v194;
              }
              if (v195)
              {
                unint64_t v196 = (char *)sub_5714((uint64_t)(v90 + 705), v195);
                uint64_t v92 = (uint64_t *)v90[704];
                uint64_t v191 = (uint64_t *)v90[703];
              }
              else
              {
                unint64_t v196 = 0;
              }
              uint64_t v229 = (uint64_t *)&v196[8 * v192];
              *uint64_t v229 = v91;
              unint64_t v94 = v229 + 1;
              while (v92 != v191)
              {
                uint64_t v230 = *--v92;
                *--uint64_t v229 = v230;
              }
              v90[703] = v229;
              v90[704] = v94;
              v90[705] = &v196[8 * v195];
              if (v191) {
                operator delete(v191);
              }
            }
            else
            {
              *uint64_t v92 = v91;
              unint64_t v94 = v92 + 1;
            }
            v90[704] = v94;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_5BC30(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    unint64_t v78 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    unint64_t v77 = *v78;
    uint64_t v79 = (char *)v78[1] - (char *)*v78;
    if (v79)
    {
      unint64_t v80 = v79 >> 2;
      if (v80 <= 1) {
        unint64_t v80 = 1;
      }
      do
      {
        int v81 = *v77++;
        switch(v81)
        {
          case 23:
            unint64_t v82 = (unint64_t)*(unsigned int *)(a1[3] + 24) >> 17;
            unint64_t v83 = (void *)(*(void *)a1[2] + 1336);
            goto LABEL_104;
          case 24:
            unint64_t v82 = *(_DWORD *)(a1[3] + 24) & 0x1FFFF;
            unint64_t v83 = (void *)(*(void *)a1[2] + 1360);
            goto LABEL_104;
          case 25:
            unint64_t v82 = *(_DWORD *)(a1[3] + 20) & 0x1FFFF;
            unint64_t v83 = (void *)(*(void *)a1[2] + 1384);
            goto LABEL_104;
          case 26:
            unint64_t v82 = *(unsigned __int16 *)(a1[3] + 18);
            unint64_t v83 = (void *)(*(void *)a1[2] + 1408);
            goto LABEL_104;
          case 27:
            unint64_t v82 = *(unsigned __int16 *)(a1[3] + 16);
            unint64_t v83 = (void *)(*(void *)a1[2] + 1432);
LABEL_104:
            *(void *)(*v83 - 8) += v82;
            break;
          default:
            break;
        }
        --v80;
      }
      while (v80);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0x17:
            uint64_t v10 = *(void **)a1[2];
            unint64_t v11 = (unint64_t)*(unsigned int *)(a1[3] + 24) >> 17;
            unsigned int v12 = (unint64_t *)v10[167];
            unint64_t v13 = v10[168];
            if ((unint64_t)v12 >= v13)
            {
              uint64_t v37 = (unint64_t *)v10[166];
              uint64_t v38 = v12 - v37;
              if ((unint64_t)(v38 + 1) >> 61) {
                goto LABEL_108;
              }
              unint64_t v39 = v13 - (void)v37;
              unint64_t v40 = (uint64_t)(v13 - (void)v37) >> 2;
              if (v40 <= v38 + 1) {
                unint64_t v40 = v38 + 1;
              }
              if (v39 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v41 = v40;
              }
              if (v41)
              {
                uint64_t v42 = (char *)sub_5714((uint64_t)(v10 + 168), v41);
                unsigned int v12 = (unint64_t *)v10[167];
                uint64_t v37 = (unint64_t *)v10[166];
              }
              else
              {
                uint64_t v42 = 0;
              }
              unint64_t v67 = (unint64_t *)&v42[8 * v38];
              *unint64_t v67 = v11;
              unint64_t v14 = v67 + 1;
              while (v12 != v37)
              {
                unint64_t v68 = *--v12;
                *--unint64_t v67 = v68;
              }
              v10[166] = v67;
              v10[167] = v14;
              v10[168] = &v42[8 * v41];
              if (v37) {
                operator delete(v37);
              }
            }
            else
            {
              unint64_t *v12 = v11;
              unint64_t v14 = v12 + 1;
            }
            v10[167] = v14;
            break;
          case 0x18:
            unint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_DWORD *)(a1[3] + 24) & 0x1FFFFLL;
            uint64_t v17 = (uint64_t *)v15[170];
            unint64_t v18 = v15[171];
            if ((unint64_t)v17 >= v18)
            {
              unint64_t v43 = (uint64_t *)v15[169];
              uint64_t v44 = v17 - v43;
              if ((unint64_t)(v44 + 1) >> 61) {
                goto LABEL_108;
              }
              unint64_t v45 = v18 - (void)v43;
              unint64_t v46 = (uint64_t)(v18 - (void)v43) >> 2;
              if (v46 <= v44 + 1) {
                unint64_t v46 = v44 + 1;
              }
              if (v45 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v47 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v47 = v46;
              }
              if (v47)
              {
                unint64_t v48 = (char *)sub_5714((uint64_t)(v15 + 171), v47);
                uint64_t v17 = (uint64_t *)v15[170];
                unint64_t v43 = (uint64_t *)v15[169];
              }
              else
              {
                unint64_t v48 = 0;
              }
              unint64_t v69 = (uint64_t *)&v48[8 * v44];
              uint64_t *v69 = v16;
              unint64_t v19 = v69 + 1;
              while (v17 != v43)
              {
                uint64_t v70 = *--v17;
                *--unint64_t v69 = v70;
              }
              v15[169] = v69;
              v15[170] = v19;
              v15[171] = &v48[8 * v47];
              if (v43) {
                operator delete(v43);
              }
            }
            else
            {
              *uint64_t v17 = v16;
              unint64_t v19 = v17 + 1;
            }
            v15[170] = v19;
            break;
          case 0x19:
            uint64_t v20 = *(void **)a1[2];
            uint64_t v21 = *(_DWORD *)(a1[3] + 20) & 0x1FFFFLL;
            uint64_t v22 = (uint64_t *)v20[173];
            unint64_t v23 = v20[174];
            if ((unint64_t)v22 >= v23)
            {
              uint64_t v49 = (uint64_t *)v20[172];
              uint64_t v50 = v22 - v49;
              if ((unint64_t)(v50 + 1) >> 61) {
                goto LABEL_108;
              }
              unint64_t v51 = v23 - (void)v49;
              unint64_t v52 = (uint64_t)(v23 - (void)v49) >> 2;
              if (v52 <= v50 + 1) {
                unint64_t v52 = v50 + 1;
              }
              if (v51 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v53 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v53 = v52;
              }
              if (v53)
              {
                unint64_t v54 = (char *)sub_5714((uint64_t)(v20 + 174), v53);
                uint64_t v22 = (uint64_t *)v20[173];
                uint64_t v49 = (uint64_t *)v20[172];
              }
              else
              {
                unint64_t v54 = 0;
              }
              uint64_t v71 = (uint64_t *)&v54[8 * v50];
              uint64_t *v71 = v21;
              unint64_t v24 = v71 + 1;
              while (v22 != v49)
              {
                uint64_t v72 = *--v22;
                *--uint64_t v71 = v72;
              }
              v20[172] = v71;
              v20[173] = v24;
              v20[174] = &v54[8 * v53];
              if (v49) {
                operator delete(v49);
              }
            }
            else
            {
              uint64_t *v22 = v21;
              unint64_t v24 = v22 + 1;
            }
            v20[173] = v24;
            break;
          case 0x1A:
            uint64_t v25 = a1[2];
            uint64_t v26 = *(void **)v25;
            uint64_t v27 = *(unsigned __int16 *)(a1[3] + 18);
            unint64_t v28 = *(char **)(*(void *)v25 + 1408);
            unint64_t v29 = *(void *)(*(void *)v25 + 1416);
            if ((unint64_t)v28 >= v29)
            {
              uint64_t v55 = (char *)v26[175];
              uint64_t v56 = (v28 - v55) >> 3;
              if ((unint64_t)(v56 + 1) >> 61) {
                goto LABEL_108;
              }
              unint64_t v57 = v29 - (void)v55;
              unint64_t v58 = (uint64_t)(v29 - (void)v55) >> 2;
              if (v58 <= v56 + 1) {
                unint64_t v58 = v56 + 1;
              }
              if (v57 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v59 = v58;
              }
              if (v59)
              {
                unint64_t v60 = (char *)sub_5714((uint64_t)(v26 + 177), v59);
                unint64_t v28 = (char *)v26[176];
                uint64_t v55 = (char *)v26[175];
              }
              else
              {
                unint64_t v60 = 0;
              }
              unint64_t v73 = &v60[8 * v56];
              *(void *)unint64_t v73 = v27;
              unint64_t v30 = v73 + 8;
              while (v28 != v55)
              {
                uint64_t v74 = *((void *)v28 - 1);
                v28 -= 8;
                *((void *)v73 - 1) = v74;
                v73 -= 8;
              }
              v26[175] = v73;
              v26[176] = v30;
              v26[177] = &v60[8 * v59];
              if (v55) {
                operator delete(v55);
              }
            }
            else
            {
              *(void *)unint64_t v28 = v27;
              unint64_t v30 = v28 + 8;
            }
            v26[176] = v30;
            break;
          case 0x1B:
            uint64_t v31 = a1[2];
            unint64_t v32 = *(void **)v31;
            uint64_t v33 = *(unsigned __int16 *)(a1[3] + 16);
            unint64_t v34 = *(char **)(*(void *)v31 + 1432);
            unint64_t v35 = *(void *)(*(void *)v31 + 1440);
            if ((unint64_t)v34 >= v35)
            {
              uint64_t v61 = (char *)v32[178];
              uint64_t v62 = (v34 - v61) >> 3;
              if ((unint64_t)(v62 + 1) >> 61) {
LABEL_108:
              }
                sub_566C();
              unint64_t v63 = v35 - (void)v61;
              unint64_t v64 = (uint64_t)(v35 - (void)v61) >> 2;
              if (v64 <= v62 + 1) {
                unint64_t v64 = v62 + 1;
              }
              if (v63 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v65 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v65 = v64;
              }
              if (v65)
              {
                uint64_t v66 = (char *)sub_5714((uint64_t)(v32 + 180), v65);
                unint64_t v34 = (char *)v32[179];
                uint64_t v61 = (char *)v32[178];
              }
              else
              {
                uint64_t v66 = 0;
              }
              unint64_t v75 = &v66[8 * v62];
              *(void *)unint64_t v75 = v33;
              uint64_t v36 = v75 + 8;
              while (v34 != v61)
              {
                uint64_t v76 = *((void *)v34 - 1);
                v34 -= 8;
                *((void *)v75 - 1) = v76;
                v75 -= 8;
              }
              v32[178] = v75;
              v32[179] = v36;
              v32[180] = &v66[8 * v65];
              if (v61) {
                operator delete(v61);
              }
            }
            else
            {
              *(void *)unint64_t v34 = v33;
              uint64_t v36 = v34 + 8;
            }
            v32[179] = v36;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_5C1D0(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    unint64_t v427 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v426 = *v427;
    uint64_t v428 = (char *)v427[1] - (char *)*v427;
    if (v428)
    {
      unint64_t v429 = v428 >> 2;
      if (v429 <= 1) {
        unint64_t v429 = 1;
      }
      do
      {
        int v430 = *v426++;
        switch(v430)
        {
          case 'E':
            LOWORD(v431) = *(_WORD *)(a1[3] + 74);
            v432 = (void *)(*(void *)a1[2] + 2440);
            goto LABEL_590;
          case 'F':
            LOWORD(v431) = *(_WORD *)(a1[3] + 58);
            v432 = (void *)(*(void *)a1[2] + 2464);
            goto LABEL_590;
          case 'G':
            LOWORD(v431) = *(_WORD *)(a1[3] + 42);
            v432 = (void *)(*(void *)a1[2] + 2488);
            goto LABEL_590;
          case 'H':
            LOWORD(v431) = *(_WORD *)(a1[3] + 26);
            v432 = (void *)(*(void *)a1[2] + 2512);
            goto LABEL_590;
          case 'I':
            LOWORD(v431) = *(_WORD *)(a1[3] + 76);
            v432 = (void *)(*(void *)a1[2] + 2536);
            goto LABEL_590;
          case 'J':
            LOWORD(v431) = *(_WORD *)(a1[3] + 60);
            v432 = (void *)(*(void *)a1[2] + 2560);
            goto LABEL_590;
          case 'K':
            LOWORD(v431) = *(_WORD *)(a1[3] + 44);
            v432 = (void *)(*(void *)a1[2] + 2584);
            goto LABEL_590;
          case 'L':
            LOWORD(v431) = *(_WORD *)(a1[3] + 28);
            v432 = (void *)(*(void *)a1[2] + 2608);
            goto LABEL_590;
          case 'M':
            LOWORD(v431) = *(_WORD *)(a1[3] + 78);
            v432 = (void *)(*(void *)a1[2] + 2632);
            goto LABEL_590;
          case 'N':
            LOWORD(v431) = *(_WORD *)(a1[3] + 62);
            v432 = (void *)(*(void *)a1[2] + 2656);
            goto LABEL_590;
          case 'O':
            LOWORD(v431) = *(_WORD *)(a1[3] + 46);
            v432 = (void *)(*(void *)a1[2] + 2680);
            goto LABEL_590;
          case 'P':
            LOWORD(v431) = *(_WORD *)(a1[3] + 30);
            v432 = (void *)(*(void *)a1[2] + 2704);
            goto LABEL_590;
          case 'Q':
            LOWORD(v431) = *(_WORD *)(a1[3] + 68);
            v432 = (void *)(*(void *)a1[2] + 2728);
            goto LABEL_590;
          case 'R':
            LOWORD(v431) = *(_WORD *)(a1[3] + 52);
            v432 = (void *)(*(void *)a1[2] + 2752);
            goto LABEL_590;
          case 'S':
            LOWORD(v431) = *(_WORD *)(a1[3] + 36);
            v432 = (void *)(*(void *)a1[2] + 2776);
            goto LABEL_590;
          case 'T':
            LOWORD(v431) = *(_WORD *)(a1[3] + 20);
            v432 = (void *)(*(void *)a1[2] + 2800);
            goto LABEL_590;
          case 'U':
            LOWORD(v431) = *(_WORD *)(a1[3] + 70);
            v432 = (void *)(*(void *)a1[2] + 2824);
            goto LABEL_590;
          case 'V':
            LOWORD(v431) = *(_WORD *)(a1[3] + 54);
            v432 = (void *)(*(void *)a1[2] + 2848);
            goto LABEL_590;
          case 'W':
            LOWORD(v431) = *(_WORD *)(a1[3] + 38);
            v432 = (void *)(*(void *)a1[2] + 2872);
            goto LABEL_590;
          case 'X':
            LOWORD(v431) = *(_WORD *)(a1[3] + 22);
            v432 = (void *)(*(void *)a1[2] + 2896);
            goto LABEL_590;
          case 'Y':
            LOWORD(v431) = *(_WORD *)(a1[3] + 72);
            v432 = (void *)(*(void *)a1[2] + 2920);
            goto LABEL_590;
          case 'Z':
            LOWORD(v431) = *(_WORD *)(a1[3] + 56);
            v432 = (void *)(*(void *)a1[2] + 2944);
            goto LABEL_590;
          case '[':
            LOWORD(v431) = *(_WORD *)(a1[3] + 40);
            v432 = (void *)(*(void *)a1[2] + 2968);
            goto LABEL_590;
          case '\\':
            LOWORD(v431) = *(_WORD *)(a1[3] + 24);
            v432 = (void *)(*(void *)a1[2] + 2992);
            goto LABEL_590;
          case ']':
            LOWORD(v431) = *(_WORD *)(a1[3] + 64);
            v432 = (void *)(*(void *)a1[2] + 3016);
            goto LABEL_590;
          case '^':
            LOWORD(v431) = *(_WORD *)(a1[3] + 48);
            v432 = (void *)(*(void *)a1[2] + 3040);
            goto LABEL_590;
          case '_':
            LOWORD(v431) = *(_WORD *)(a1[3] + 32);
            v432 = (void *)(*(void *)a1[2] + 3064);
            goto LABEL_590;
            int v431 = *(unsigned __int16 *)(a1[3] + 16) >> 1;
            v432 = (void *)(*(void *)a1[2] + 3088);
            goto LABEL_590;
          case 'a':
            LOWORD(v431) = *(_WORD *)(a1[3] + 66);
            v432 = (void *)(*(void *)a1[2] + 3112);
            goto LABEL_590;
          case 'b':
            LOWORD(v431) = *(_WORD *)(a1[3] + 50);
            v432 = (void *)(*(void *)a1[2] + 3136);
            goto LABEL_590;
          case 'c':
            LOWORD(v431) = *(_WORD *)(a1[3] + 34);
            v432 = (void *)(*(void *)a1[2] + 3160);
            goto LABEL_590;
          case 'd':
            LOWORD(v431) = *(_WORD *)(a1[3] + 18);
            v432 = (void *)(*(void *)a1[2] + 3184);
LABEL_590:
            *(void *)(*v432 - 8) += v431 & 0x1FFF;
            break;
          default:
            break;
        }
        --v429;
      }
      while (v429);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 'E':
            uint64_t v10 = *(void **)a1[2];
            uint64_t v11 = *(_WORD *)(a1[3] + 74) & 0x1FFF;
            unsigned int v12 = (char *)v10[305];
            unint64_t v13 = v10[306];
            if ((unint64_t)v12 >= v13)
            {
              unint64_t v170 = (char *)v10[304];
              uint64_t v171 = (v12 - v170) >> 3;
              if ((unint64_t)(v171 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v172 = v13 - (void)v170;
              unint64_t v173 = (uint64_t)(v13 - (void)v170) >> 2;
              if (v173 <= v171 + 1) {
                unint64_t v173 = v171 + 1;
              }
              if (v172 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v174 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v174 = v173;
              }
              if (v174)
              {
                unint64_t v175 = (char *)sub_5714((uint64_t)(v10 + 306), v174);
                unsigned int v12 = (char *)v10[305];
                unint64_t v170 = (char *)v10[304];
              }
              else
              {
                unint64_t v175 = 0;
              }
              v362 = &v175[8 * v171];
              *(void *)v362 = v11;
              unint64_t v14 = v362 + 8;
              while (v12 != v170)
              {
                uint64_t v363 = *((void *)v12 - 1);
                v12 -= 8;
                *((void *)v362 - 1) = v363;
                v362 -= 8;
              }
              v10[304] = v362;
              v10[305] = v14;
              v10[306] = &v175[8 * v174];
              if (v170) {
                operator delete(v170);
              }
            }
            else
            {
              *(void *)unsigned int v12 = v11;
              unint64_t v14 = v12 + 8;
            }
            v10[305] = v14;
            break;
          case 'F':
            unint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_WORD *)(a1[3] + 58) & 0x1FFF;
            uint64_t v17 = (char *)v15[308];
            unint64_t v18 = v15[309];
            if ((unint64_t)v17 >= v18)
            {
              unint64_t v176 = (char *)v15[307];
              uint64_t v177 = (v17 - v176) >> 3;
              if ((unint64_t)(v177 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v178 = v18 - (void)v176;
              unint64_t v179 = (uint64_t)(v18 - (void)v176) >> 2;
              if (v179 <= v177 + 1) {
                unint64_t v179 = v177 + 1;
              }
              if (v178 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v180 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v180 = v179;
              }
              if (v180)
              {
                unint64_t v181 = (char *)sub_5714((uint64_t)(v15 + 309), v180);
                uint64_t v17 = (char *)v15[308];
                unint64_t v176 = (char *)v15[307];
              }
              else
              {
                unint64_t v181 = 0;
              }
              v364 = &v181[8 * v177];
              *(void *)v364 = v16;
              unint64_t v19 = v364 + 8;
              while (v17 != v176)
              {
                uint64_t v365 = *((void *)v17 - 1);
                v17 -= 8;
                *((void *)v364 - 1) = v365;
                v364 -= 8;
              }
              v15[307] = v364;
              v15[308] = v19;
              v15[309] = &v181[8 * v180];
              if (v176) {
                operator delete(v176);
              }
            }
            else
            {
              *(void *)uint64_t v17 = v16;
              unint64_t v19 = v17 + 8;
            }
            v15[308] = v19;
            break;
          case 'G':
            uint64_t v20 = *(void **)a1[2];
            uint64_t v21 = *(_WORD *)(a1[3] + 42) & 0x1FFF;
            uint64_t v22 = (char *)v20[311];
            unint64_t v23 = v20[312];
            if ((unint64_t)v22 >= v23)
            {
              unint64_t v182 = (char *)v20[310];
              uint64_t v183 = (v22 - v182) >> 3;
              if ((unint64_t)(v183 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v184 = v23 - (void)v182;
              unint64_t v185 = (uint64_t)(v23 - (void)v182) >> 2;
              if (v185 <= v183 + 1) {
                unint64_t v185 = v183 + 1;
              }
              if (v184 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v186 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v186 = v185;
              }
              if (v186)
              {
                unint64_t v187 = (char *)sub_5714((uint64_t)(v20 + 312), v186);
                uint64_t v22 = (char *)v20[311];
                unint64_t v182 = (char *)v20[310];
              }
              else
              {
                unint64_t v187 = 0;
              }
              v366 = &v187[8 * v183];
              *(void *)v366 = v21;
              unint64_t v24 = v366 + 8;
              while (v22 != v182)
              {
                uint64_t v367 = *((void *)v22 - 1);
                v22 -= 8;
                *((void *)v366 - 1) = v367;
                v366 -= 8;
              }
              v20[310] = v366;
              v20[311] = v24;
              v20[312] = &v187[8 * v186];
              if (v182) {
                operator delete(v182);
              }
            }
            else
            {
              *(void *)uint64_t v22 = v21;
              unint64_t v24 = v22 + 8;
            }
            v20[311] = v24;
            break;
          case 'H':
            uint64_t v25 = *(void **)a1[2];
            uint64_t v26 = *(_WORD *)(a1[3] + 26) & 0x1FFF;
            uint64_t v27 = (char *)v25[314];
            unint64_t v28 = v25[315];
            if ((unint64_t)v27 >= v28)
            {
              unint64_t v188 = (char *)v25[313];
              uint64_t v189 = (v27 - v188) >> 3;
              if ((unint64_t)(v189 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v190 = v28 - (void)v188;
              unint64_t v191 = (uint64_t)(v28 - (void)v188) >> 2;
              if (v191 <= v189 + 1) {
                unint64_t v191 = v189 + 1;
              }
              if (v190 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v192 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v192 = v191;
              }
              if (v192)
              {
                unint64_t v193 = (char *)sub_5714((uint64_t)(v25 + 315), v192);
                uint64_t v27 = (char *)v25[314];
                unint64_t v188 = (char *)v25[313];
              }
              else
              {
                unint64_t v193 = 0;
              }
              v368 = &v193[8 * v189];
              *(void *)v368 = v26;
              unint64_t v29 = v368 + 8;
              while (v27 != v188)
              {
                uint64_t v369 = *((void *)v27 - 1);
                v27 -= 8;
                *((void *)v368 - 1) = v369;
                v368 -= 8;
              }
              v25[313] = v368;
              v25[314] = v29;
              v25[315] = &v193[8 * v192];
              if (v188) {
                operator delete(v188);
              }
            }
            else
            {
              *(void *)uint64_t v27 = v26;
              unint64_t v29 = v27 + 8;
            }
            v25[314] = v29;
            break;
          case 'I':
            unint64_t v30 = *(void **)a1[2];
            uint64_t v31 = *(_WORD *)(a1[3] + 76) & 0x1FFF;
            unint64_t v32 = (char *)v30[317];
            unint64_t v33 = v30[318];
            if ((unint64_t)v32 >= v33)
            {
              unint64_t v194 = (char *)v30[316];
              uint64_t v195 = (v32 - v194) >> 3;
              if ((unint64_t)(v195 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v196 = v33 - (void)v194;
              unint64_t v197 = (uint64_t)(v33 - (void)v194) >> 2;
              if (v197 <= v195 + 1) {
                unint64_t v197 = v195 + 1;
              }
              if (v196 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v198 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v198 = v197;
              }
              if (v198)
              {
                unint64_t v199 = (char *)sub_5714((uint64_t)(v30 + 318), v198);
                unint64_t v32 = (char *)v30[317];
                unint64_t v194 = (char *)v30[316];
              }
              else
              {
                unint64_t v199 = 0;
              }
              uint64_t v370 = &v199[8 * v195];
              *(void *)uint64_t v370 = v31;
              unint64_t v34 = v370 + 8;
              while (v32 != v194)
              {
                uint64_t v371 = *((void *)v32 - 1);
                v32 -= 8;
                *((void *)v370 - 1) = v371;
                v370 -= 8;
              }
              v30[316] = v370;
              v30[317] = v34;
              v30[318] = &v199[8 * v198];
              if (v194) {
                operator delete(v194);
              }
            }
            else
            {
              *(void *)unint64_t v32 = v31;
              unint64_t v34 = v32 + 8;
            }
            v30[317] = v34;
            break;
          case 'J':
            unint64_t v35 = *(void **)a1[2];
            uint64_t v36 = *(_WORD *)(a1[3] + 60) & 0x1FFF;
            uint64_t v37 = (char *)v35[320];
            unint64_t v38 = v35[321];
            if ((unint64_t)v37 >= v38)
            {
              uint64_t v200 = (char *)v35[319];
              uint64_t v201 = (v37 - v200) >> 3;
              if ((unint64_t)(v201 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v202 = v38 - (void)v200;
              unint64_t v203 = (uint64_t)(v38 - (void)v200) >> 2;
              if (v203 <= v201 + 1) {
                unint64_t v203 = v201 + 1;
              }
              if (v202 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v204 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v204 = v203;
              }
              if (v204)
              {
                unint64_t v205 = (char *)sub_5714((uint64_t)(v35 + 321), v204);
                uint64_t v37 = (char *)v35[320];
                uint64_t v200 = (char *)v35[319];
              }
              else
              {
                unint64_t v205 = 0;
              }
              unint64_t v372 = &v205[8 * v201];
              *(void *)unint64_t v372 = v36;
              unint64_t v39 = v372 + 8;
              while (v37 != v200)
              {
                uint64_t v373 = *((void *)v37 - 1);
                v37 -= 8;
                *((void *)v372 - 1) = v373;
                v372 -= 8;
              }
              v35[319] = v372;
              v35[320] = v39;
              v35[321] = &v205[8 * v204];
              if (v200) {
                operator delete(v200);
              }
            }
            else
            {
              *(void *)uint64_t v37 = v36;
              unint64_t v39 = v37 + 8;
            }
            v35[320] = v39;
            break;
          case 'K':
            unint64_t v40 = *(void **)a1[2];
            uint64_t v41 = *(_WORD *)(a1[3] + 44) & 0x1FFF;
            uint64_t v42 = (char *)v40[323];
            unint64_t v43 = v40[324];
            if ((unint64_t)v42 >= v43)
            {
              uint64_t v206 = (char *)v40[322];
              uint64_t v207 = (v42 - v206) >> 3;
              if ((unint64_t)(v207 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v208 = v43 - (void)v206;
              unint64_t v209 = (uint64_t)(v43 - (void)v206) >> 2;
              if (v209 <= v207 + 1) {
                unint64_t v209 = v207 + 1;
              }
              if (v208 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v210 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v210 = v209;
              }
              if (v210)
              {
                uint64_t v211 = (char *)sub_5714((uint64_t)(v40 + 324), v210);
                uint64_t v42 = (char *)v40[323];
                uint64_t v206 = (char *)v40[322];
              }
              else
              {
                uint64_t v211 = 0;
              }
              v374 = &v211[8 * v207];
              *(void *)v374 = v41;
              uint64_t v44 = v374 + 8;
              while (v42 != v206)
              {
                uint64_t v375 = *((void *)v42 - 1);
                v42 -= 8;
                *((void *)v374 - 1) = v375;
                v374 -= 8;
              }
              v40[322] = v374;
              v40[323] = v44;
              v40[324] = &v211[8 * v210];
              if (v206) {
                operator delete(v206);
              }
            }
            else
            {
              *(void *)uint64_t v42 = v41;
              uint64_t v44 = v42 + 8;
            }
            v40[323] = v44;
            break;
          case 'L':
            unint64_t v45 = *(void **)a1[2];
            uint64_t v46 = *(_WORD *)(a1[3] + 28) & 0x1FFF;
            unint64_t v47 = (char *)v45[326];
            unint64_t v48 = v45[327];
            if ((unint64_t)v47 >= v48)
            {
              uint64_t v212 = (char *)v45[325];
              uint64_t v213 = (v47 - v212) >> 3;
              if ((unint64_t)(v213 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v214 = v48 - (void)v212;
              unint64_t v215 = (uint64_t)(v48 - (void)v212) >> 2;
              if (v215 <= v213 + 1) {
                unint64_t v215 = v213 + 1;
              }
              if (v214 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v216 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v216 = v215;
              }
              if (v216)
              {
                uint64_t v217 = (char *)sub_5714((uint64_t)(v45 + 327), v216);
                unint64_t v47 = (char *)v45[326];
                uint64_t v212 = (char *)v45[325];
              }
              else
              {
                uint64_t v217 = 0;
              }
              v376 = &v217[8 * v213];
              *(void *)v376 = v46;
              uint64_t v49 = v376 + 8;
              while (v47 != v212)
              {
                uint64_t v377 = *((void *)v47 - 1);
                v47 -= 8;
                *((void *)v376 - 1) = v377;
                v376 -= 8;
              }
              v45[325] = v376;
              v45[326] = v49;
              v45[327] = &v217[8 * v216];
              if (v212) {
                operator delete(v212);
              }
            }
            else
            {
              *(void *)unint64_t v47 = v46;
              uint64_t v49 = v47 + 8;
            }
            v45[326] = v49;
            break;
          case 'M':
            uint64_t v50 = *(void **)a1[2];
            uint64_t v51 = *(_WORD *)(a1[3] + 78) & 0x1FFF;
            unint64_t v52 = (char *)v50[329];
            unint64_t v53 = v50[330];
            if ((unint64_t)v52 >= v53)
            {
              uint64_t v218 = (char *)v50[328];
              uint64_t v219 = (v52 - v218) >> 3;
              if ((unint64_t)(v219 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v220 = v53 - (void)v218;
              unint64_t v221 = (uint64_t)(v53 - (void)v218) >> 2;
              if (v221 <= v219 + 1) {
                unint64_t v221 = v219 + 1;
              }
              if (v220 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v222 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v222 = v221;
              }
              if (v222)
              {
                uint64_t v223 = (char *)sub_5714((uint64_t)(v50 + 330), v222);
                unint64_t v52 = (char *)v50[329];
                uint64_t v218 = (char *)v50[328];
              }
              else
              {
                uint64_t v223 = 0;
              }
              v378 = &v223[8 * v219];
              *(void *)v378 = v51;
              unint64_t v54 = v378 + 8;
              while (v52 != v218)
              {
                uint64_t v379 = *((void *)v52 - 1);
                v52 -= 8;
                *((void *)v378 - 1) = v379;
                v378 -= 8;
              }
              v50[328] = v378;
              v50[329] = v54;
              v50[330] = &v223[8 * v222];
              if (v218) {
                operator delete(v218);
              }
            }
            else
            {
              *(void *)unint64_t v52 = v51;
              unint64_t v54 = v52 + 8;
            }
            v50[329] = v54;
            break;
          case 'N':
            uint64_t v55 = *(void **)a1[2];
            uint64_t v56 = *(_WORD *)(a1[3] + 62) & 0x1FFF;
            unint64_t v57 = (char *)v55[332];
            unint64_t v58 = v55[333];
            if ((unint64_t)v57 >= v58)
            {
              uint64_t v224 = (char *)v55[331];
              uint64_t v225 = (v57 - v224) >> 3;
              if ((unint64_t)(v225 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v226 = v58 - (void)v224;
              unint64_t v227 = (uint64_t)(v58 - (void)v224) >> 2;
              if (v227 <= v225 + 1) {
                unint64_t v227 = v225 + 1;
              }
              if (v226 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v228 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v228 = v227;
              }
              if (v228)
              {
                uint64_t v229 = (char *)sub_5714((uint64_t)(v55 + 333), v228);
                unint64_t v57 = (char *)v55[332];
                uint64_t v224 = (char *)v55[331];
              }
              else
              {
                uint64_t v229 = 0;
              }
              v380 = &v229[8 * v225];
              *(void *)v380 = v56;
              unint64_t v59 = v380 + 8;
              while (v57 != v224)
              {
                uint64_t v381 = *((void *)v57 - 1);
                v57 -= 8;
                *((void *)v380 - 1) = v381;
                v380 -= 8;
              }
              v55[331] = v380;
              v55[332] = v59;
              v55[333] = &v229[8 * v228];
              if (v224) {
                operator delete(v224);
              }
            }
            else
            {
              *(void *)unint64_t v57 = v56;
              unint64_t v59 = v57 + 8;
            }
            v55[332] = v59;
            break;
          case 'O':
            unint64_t v60 = *(void **)a1[2];
            uint64_t v61 = *(_WORD *)(a1[3] + 46) & 0x1FFF;
            uint64_t v62 = (char *)v60[335];
            unint64_t v63 = v60[336];
            if ((unint64_t)v62 >= v63)
            {
              uint64_t v230 = (char *)v60[334];
              uint64_t v231 = (v62 - v230) >> 3;
              if ((unint64_t)(v231 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v232 = v63 - (void)v230;
              unint64_t v233 = (uint64_t)(v63 - (void)v230) >> 2;
              if (v233 <= v231 + 1) {
                unint64_t v233 = v231 + 1;
              }
              if (v232 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v234 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v234 = v233;
              }
              if (v234)
              {
                int v235 = (char *)sub_5714((uint64_t)(v60 + 336), v234);
                uint64_t v62 = (char *)v60[335];
                uint64_t v230 = (char *)v60[334];
              }
              else
              {
                int v235 = 0;
              }
              v382 = &v235[8 * v231];
              *(void *)v382 = v61;
              unint64_t v64 = v382 + 8;
              while (v62 != v230)
              {
                uint64_t v383 = *((void *)v62 - 1);
                v62 -= 8;
                *((void *)v382 - 1) = v383;
                v382 -= 8;
              }
              v60[334] = v382;
              v60[335] = v64;
              v60[336] = &v235[8 * v234];
              if (v230) {
                operator delete(v230);
              }
            }
            else
            {
              *(void *)uint64_t v62 = v61;
              unint64_t v64 = v62 + 8;
            }
            v60[335] = v64;
            break;
          case 'P':
            unint64_t v65 = *(void **)a1[2];
            uint64_t v66 = *(_WORD *)(a1[3] + 30) & 0x1FFF;
            unint64_t v67 = (char *)v65[338];
            unint64_t v68 = v65[339];
            if ((unint64_t)v67 >= v68)
            {
              uint64_t v236 = (char *)v65[337];
              uint64_t v237 = (v67 - v236) >> 3;
              if ((unint64_t)(v237 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v238 = v68 - (void)v236;
              unint64_t v239 = (uint64_t)(v68 - (void)v236) >> 2;
              if (v239 <= v237 + 1) {
                unint64_t v239 = v237 + 1;
              }
              if (v238 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v240 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v240 = v239;
              }
              if (v240)
              {
                uint64_t v241 = (char *)sub_5714((uint64_t)(v65 + 339), v240);
                unint64_t v67 = (char *)v65[338];
                uint64_t v236 = (char *)v65[337];
              }
              else
              {
                uint64_t v241 = 0;
              }
              uint64_t v384 = &v241[8 * v237];
              *(void *)uint64_t v384 = v66;
              unint64_t v69 = v384 + 8;
              while (v67 != v236)
              {
                uint64_t v385 = *((void *)v67 - 1);
                v67 -= 8;
                *((void *)v384 - 1) = v385;
                v384 -= 8;
              }
              v65[337] = v384;
              v65[338] = v69;
              v65[339] = &v241[8 * v240];
              if (v236) {
                operator delete(v236);
              }
            }
            else
            {
              *(void *)unint64_t v67 = v66;
              unint64_t v69 = v67 + 8;
            }
            v65[338] = v69;
            break;
          case 'Q':
            uint64_t v70 = *(void **)a1[2];
            uint64_t v71 = *(_WORD *)(a1[3] + 68) & 0x1FFF;
            uint64_t v72 = (char *)v70[341];
            unint64_t v73 = v70[342];
            if ((unint64_t)v72 >= v73)
            {
              unint64_t v242 = (char *)v70[340];
              uint64_t v243 = (v72 - v242) >> 3;
              if ((unint64_t)(v243 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v244 = v73 - (void)v242;
              unint64_t v245 = (uint64_t)(v73 - (void)v242) >> 2;
              if (v245 <= v243 + 1) {
                unint64_t v245 = v243 + 1;
              }
              if (v244 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v246 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v246 = v245;
              }
              if (v246)
              {
                unint64_t v247 = (char *)sub_5714((uint64_t)(v70 + 342), v246);
                uint64_t v72 = (char *)v70[341];
                unint64_t v242 = (char *)v70[340];
              }
              else
              {
                unint64_t v247 = 0;
              }
              unint64_t v386 = &v247[8 * v243];
              *(void *)unint64_t v386 = v71;
              uint64_t v74 = v386 + 8;
              while (v72 != v242)
              {
                uint64_t v387 = *((void *)v72 - 1);
                v72 -= 8;
                *((void *)v386 - 1) = v387;
                v386 -= 8;
              }
              v70[340] = v386;
              v70[341] = v74;
              v70[342] = &v247[8 * v246];
              if (v242) {
                operator delete(v242);
              }
            }
            else
            {
              *(void *)uint64_t v72 = v71;
              uint64_t v74 = v72 + 8;
            }
            v70[341] = v74;
            break;
          case 'R':
            unint64_t v75 = *(void **)a1[2];
            uint64_t v76 = *(_WORD *)(a1[3] + 52) & 0x1FFF;
            unint64_t v77 = (char *)v75[344];
            unint64_t v78 = v75[345];
            if ((unint64_t)v77 >= v78)
            {
              int v248 = (char *)v75[343];
              uint64_t v249 = (v77 - v248) >> 3;
              if ((unint64_t)(v249 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v250 = v78 - (void)v248;
              unint64_t v251 = (uint64_t)(v78 - (void)v248) >> 2;
              if (v251 <= v249 + 1) {
                unint64_t v251 = v249 + 1;
              }
              if (v250 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v252 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v252 = v251;
              }
              if (v252)
              {
                uint64_t v253 = (char *)sub_5714((uint64_t)(v75 + 345), v252);
                unint64_t v77 = (char *)v75[344];
                int v248 = (char *)v75[343];
              }
              else
              {
                uint64_t v253 = 0;
              }
              v388 = &v253[8 * v249];
              *(void *)v388 = v76;
              uint64_t v79 = v388 + 8;
              while (v77 != v248)
              {
                uint64_t v389 = *((void *)v77 - 1);
                v77 -= 8;
                *((void *)v388 - 1) = v389;
                v388 -= 8;
              }
              v75[343] = v388;
              v75[344] = v79;
              v75[345] = &v253[8 * v252];
              if (v248) {
                operator delete(v248);
              }
            }
            else
            {
              *(void *)unint64_t v77 = v76;
              uint64_t v79 = v77 + 8;
            }
            v75[344] = v79;
            break;
          case 'S':
            unint64_t v80 = *(void **)a1[2];
            uint64_t v81 = *(_WORD *)(a1[3] + 36) & 0x1FFF;
            unint64_t v82 = (char *)v80[347];
            unint64_t v83 = v80[348];
            if ((unint64_t)v82 >= v83)
            {
              v254 = (char *)v80[346];
              uint64_t v255 = (v82 - v254) >> 3;
              if ((unint64_t)(v255 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v256 = v83 - (void)v254;
              unint64_t v257 = (uint64_t)(v83 - (void)v254) >> 2;
              if (v257 <= v255 + 1) {
                unint64_t v257 = v255 + 1;
              }
              if (v256 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v258 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v258 = v257;
              }
              if (v258)
              {
                uint64_t v259 = (char *)sub_5714((uint64_t)(v80 + 348), v258);
                unint64_t v82 = (char *)v80[347];
                v254 = (char *)v80[346];
              }
              else
              {
                uint64_t v259 = 0;
              }
              v390 = &v259[8 * v255];
              *(void *)v390 = v81;
              unint64_t v84 = v390 + 8;
              while (v82 != v254)
              {
                uint64_t v391 = *((void *)v82 - 1);
                v82 -= 8;
                *((void *)v390 - 1) = v391;
                v390 -= 8;
              }
              v80[346] = v390;
              v80[347] = v84;
              v80[348] = &v259[8 * v258];
              if (v254) {
                operator delete(v254);
              }
            }
            else
            {
              *(void *)unint64_t v82 = v81;
              unint64_t v84 = v82 + 8;
            }
            v80[347] = v84;
            break;
          case 'T':
            unint64_t v85 = *(void **)a1[2];
            uint64_t v86 = *(_WORD *)(a1[3] + 20) & 0x1FFF;
            unint64_t v87 = (char *)v85[350];
            unint64_t v88 = v85[351];
            if ((unint64_t)v87 >= v88)
            {
              unint64_t v260 = (char *)v85[349];
              uint64_t v261 = (v87 - v260) >> 3;
              if ((unint64_t)(v261 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v262 = v88 - (void)v260;
              unint64_t v263 = (uint64_t)(v88 - (void)v260) >> 2;
              if (v263 <= v261 + 1) {
                unint64_t v263 = v261 + 1;
              }
              if (v262 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v264 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v264 = v263;
              }
              if (v264)
              {
                uint64_t v265 = (char *)sub_5714((uint64_t)(v85 + 351), v264);
                unint64_t v87 = (char *)v85[350];
                unint64_t v260 = (char *)v85[349];
              }
              else
              {
                uint64_t v265 = 0;
              }
              v392 = &v265[8 * v261];
              *(void *)v392 = v86;
              unint64_t v89 = v392 + 8;
              while (v87 != v260)
              {
                uint64_t v393 = *((void *)v87 - 1);
                v87 -= 8;
                *((void *)v392 - 1) = v393;
                v392 -= 8;
              }
              v85[349] = v392;
              v85[350] = v89;
              v85[351] = &v265[8 * v264];
              if (v260) {
                operator delete(v260);
              }
            }
            else
            {
              *(void *)unint64_t v87 = v86;
              unint64_t v89 = v87 + 8;
            }
            v85[350] = v89;
            break;
          case 'U':
            unint64_t v90 = *(void **)a1[2];
            uint64_t v91 = *(_WORD *)(a1[3] + 70) & 0x1FFF;
            uint64_t v92 = (char *)v90[353];
            unint64_t v93 = v90[354];
            if ((unint64_t)v92 >= v93)
            {
              v266 = (char *)v90[352];
              uint64_t v267 = (v92 - v266) >> 3;
              if ((unint64_t)(v267 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v268 = v93 - (void)v266;
              unint64_t v269 = (uint64_t)(v93 - (void)v266) >> 2;
              if (v269 <= v267 + 1) {
                unint64_t v269 = v267 + 1;
              }
              if (v268 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v270 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v270 = v269;
              }
              if (v270)
              {
                v271 = (char *)sub_5714((uint64_t)(v90 + 354), v270);
                uint64_t v92 = (char *)v90[353];
                v266 = (char *)v90[352];
              }
              else
              {
                v271 = 0;
              }
              v394 = &v271[8 * v267];
              *(void *)v394 = v91;
              unint64_t v94 = v394 + 8;
              while (v92 != v266)
              {
                uint64_t v395 = *((void *)v92 - 1);
                v92 -= 8;
                *((void *)v394 - 1) = v395;
                v394 -= 8;
              }
              v90[352] = v394;
              v90[353] = v94;
              v90[354] = &v271[8 * v270];
              if (v266) {
                operator delete(v266);
              }
            }
            else
            {
              *(void *)uint64_t v92 = v91;
              unint64_t v94 = v92 + 8;
            }
            v90[353] = v94;
            break;
          case 'V':
            unint64_t v95 = *(void **)a1[2];
            uint64_t v96 = *(_WORD *)(a1[3] + 54) & 0x1FFF;
            unint64_t v97 = (char *)v95[356];
            unint64_t v98 = v95[357];
            if ((unint64_t)v97 >= v98)
            {
              uint64_t v272 = (char *)v95[355];
              uint64_t v273 = (v97 - v272) >> 3;
              if ((unint64_t)(v273 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v274 = v98 - (void)v272;
              unint64_t v275 = (uint64_t)(v98 - (void)v272) >> 2;
              if (v275 <= v273 + 1) {
                unint64_t v275 = v273 + 1;
              }
              if (v274 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v276 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v276 = v275;
              }
              if (v276)
              {
                v277 = (char *)sub_5714((uint64_t)(v95 + 357), v276);
                unint64_t v97 = (char *)v95[356];
                uint64_t v272 = (char *)v95[355];
              }
              else
              {
                v277 = 0;
              }
              v396 = &v277[8 * v273];
              *(void *)v396 = v96;
              unint64_t v99 = v396 + 8;
              while (v97 != v272)
              {
                uint64_t v397 = *((void *)v97 - 1);
                v97 -= 8;
                *((void *)v396 - 1) = v397;
                v396 -= 8;
              }
              v95[355] = v396;
              v95[356] = v99;
              v95[357] = &v277[8 * v276];
              if (v272) {
                operator delete(v272);
              }
            }
            else
            {
              *(void *)unint64_t v97 = v96;
              unint64_t v99 = v97 + 8;
            }
            v95[356] = v99;
            break;
          case 'W':
            unint64_t v100 = *(void **)a1[2];
            uint64_t v101 = *(_WORD *)(a1[3] + 38) & 0x1FFF;
            uint64_t v102 = (char *)v100[359];
            unint64_t v103 = v100[360];
            if ((unint64_t)v102 >= v103)
            {
              v278 = (char *)v100[358];
              uint64_t v279 = (v102 - v278) >> 3;
              if ((unint64_t)(v279 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v280 = v103 - (void)v278;
              unint64_t v281 = (uint64_t)(v103 - (void)v278) >> 2;
              if (v281 <= v279 + 1) {
                unint64_t v281 = v279 + 1;
              }
              if (v280 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v282 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v282 = v281;
              }
              if (v282)
              {
                unint64_t v283 = (char *)sub_5714((uint64_t)(v100 + 360), v282);
                uint64_t v102 = (char *)v100[359];
                v278 = (char *)v100[358];
              }
              else
              {
                unint64_t v283 = 0;
              }
              uint64_t v398 = &v283[8 * v279];
              *(void *)uint64_t v398 = v101;
              unint64_t v104 = v398 + 8;
              while (v102 != v278)
              {
                uint64_t v399 = *((void *)v102 - 1);
                v102 -= 8;
                *((void *)v398 - 1) = v399;
                v398 -= 8;
              }
              v100[358] = v398;
              v100[359] = v104;
              v100[360] = &v283[8 * v282];
              if (v278) {
                operator delete(v278);
              }
            }
            else
            {
              *(void *)uint64_t v102 = v101;
              unint64_t v104 = v102 + 8;
            }
            v100[359] = v104;
            break;
          case 'X':
            unint64_t v105 = *(void **)a1[2];
            uint64_t v106 = *(_WORD *)(a1[3] + 22) & 0x1FFF;
            uint64_t v107 = (char *)v105[362];
            unint64_t v108 = v105[363];
            if ((unint64_t)v107 >= v108)
            {
              v284 = (char *)v105[361];
              uint64_t v285 = (v107 - v284) >> 3;
              if ((unint64_t)(v285 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v286 = v108 - (void)v284;
              unint64_t v287 = (uint64_t)(v108 - (void)v284) >> 2;
              if (v287 <= v285 + 1) {
                unint64_t v287 = v285 + 1;
              }
              if (v286 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v288 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v288 = v287;
              }
              if (v288)
              {
                unint64_t v289 = (char *)sub_5714((uint64_t)(v105 + 363), v288);
                uint64_t v107 = (char *)v105[362];
                v284 = (char *)v105[361];
              }
              else
              {
                unint64_t v289 = 0;
              }
              unint64_t v400 = &v289[8 * v285];
              *(void *)unint64_t v400 = v106;
              unint64_t v109 = v400 + 8;
              while (v107 != v284)
              {
                uint64_t v401 = *((void *)v107 - 1);
                v107 -= 8;
                *((void *)v400 - 1) = v401;
                v400 -= 8;
              }
              v105[361] = v400;
              v105[362] = v109;
              v105[363] = &v289[8 * v288];
              if (v284) {
                operator delete(v284);
              }
            }
            else
            {
              *(void *)uint64_t v107 = v106;
              unint64_t v109 = v107 + 8;
            }
            v105[362] = v109;
            break;
          case 'Y':
            unint64_t v110 = *(void **)a1[2];
            uint64_t v111 = *(_WORD *)(a1[3] + 72) & 0x1FFF;
            unint64_t v112 = (char *)v110[365];
            unint64_t v113 = v110[366];
            if ((unint64_t)v112 >= v113)
            {
              v290 = (char *)v110[364];
              uint64_t v291 = (v112 - v290) >> 3;
              if ((unint64_t)(v291 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v292 = v113 - (void)v290;
              unint64_t v293 = (uint64_t)(v113 - (void)v290) >> 2;
              if (v293 <= v291 + 1) {
                unint64_t v293 = v291 + 1;
              }
              if (v292 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v294 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v294 = v293;
              }
              if (v294)
              {
                uint64_t v295 = (char *)sub_5714((uint64_t)(v110 + 366), v294);
                unint64_t v112 = (char *)v110[365];
                v290 = (char *)v110[364];
              }
              else
              {
                uint64_t v295 = 0;
              }
              v402 = &v295[8 * v291];
              *(void *)v402 = v111;
              uint64_t v114 = v402 + 8;
              while (v112 != v290)
              {
                uint64_t v403 = *((void *)v112 - 1);
                v112 -= 8;
                *((void *)v402 - 1) = v403;
                v402 -= 8;
              }
              v110[364] = v402;
              v110[365] = v114;
              v110[366] = &v295[8 * v294];
              if (v290) {
                operator delete(v290);
              }
            }
            else
            {
              *(void *)unint64_t v112 = v111;
              uint64_t v114 = v112 + 8;
            }
            v110[365] = v114;
            break;
          case 'Z':
            unint64_t v115 = *(void **)a1[2];
            uint64_t v116 = *(_WORD *)(a1[3] + 56) & 0x1FFF;
            unint64_t v117 = (char *)v115[368];
            unint64_t v118 = v115[369];
            if ((unint64_t)v117 >= v118)
            {
              v296 = (char *)v115[367];
              uint64_t v297 = (v117 - v296) >> 3;
              if ((unint64_t)(v297 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v298 = v118 - (void)v296;
              unint64_t v299 = (uint64_t)(v118 - (void)v296) >> 2;
              if (v299 <= v297 + 1) {
                unint64_t v299 = v297 + 1;
              }
              if (v298 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v300 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v300 = v299;
              }
              if (v300)
              {
                unint64_t v301 = (char *)sub_5714((uint64_t)(v115 + 369), v300);
                unint64_t v117 = (char *)v115[368];
                v296 = (char *)v115[367];
              }
              else
              {
                unint64_t v301 = 0;
              }
              v404 = &v301[8 * v297];
              *(void *)v404 = v116;
              uint64_t v119 = v404 + 8;
              while (v117 != v296)
              {
                uint64_t v405 = *((void *)v117 - 1);
                v117 -= 8;
                *((void *)v404 - 1) = v405;
                v404 -= 8;
              }
              v115[367] = v404;
              v115[368] = v119;
              v115[369] = &v301[8 * v300];
              if (v296) {
                operator delete(v296);
              }
            }
            else
            {
              *(void *)unint64_t v117 = v116;
              uint64_t v119 = v117 + 8;
            }
            v115[368] = v119;
            break;
          case '[':
            uint64_t v120 = *(void **)a1[2];
            uint64_t v121 = *(_WORD *)(a1[3] + 40) & 0x1FFF;
            unint64_t v122 = (char *)v120[371];
            unint64_t v123 = v120[372];
            if ((unint64_t)v122 >= v123)
            {
              unint64_t v302 = (char *)v120[370];
              uint64_t v303 = (v122 - v302) >> 3;
              if ((unint64_t)(v303 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v304 = v123 - (void)v302;
              unint64_t v305 = (uint64_t)(v123 - (void)v302) >> 2;
              if (v305 <= v303 + 1) {
                unint64_t v305 = v303 + 1;
              }
              if (v304 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v306 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v306 = v305;
              }
              if (v306)
              {
                uint64_t v307 = (char *)sub_5714((uint64_t)(v120 + 372), v306);
                unint64_t v122 = (char *)v120[371];
                unint64_t v302 = (char *)v120[370];
              }
              else
              {
                uint64_t v307 = 0;
              }
              v406 = &v307[8 * v303];
              *(void *)v406 = v121;
              unint64_t v124 = v406 + 8;
              while (v122 != v302)
              {
                uint64_t v407 = *((void *)v122 - 1);
                v122 -= 8;
                *((void *)v406 - 1) = v407;
                v406 -= 8;
              }
              v120[370] = v406;
              v120[371] = v124;
              v120[372] = &v307[8 * v306];
              if (v302) {
                operator delete(v302);
              }
            }
            else
            {
              *(void *)unint64_t v122 = v121;
              unint64_t v124 = v122 + 8;
            }
            v120[371] = v124;
            break;
          case '\\':
            uint64_t v125 = *(void **)a1[2];
            uint64_t v126 = *(_WORD *)(a1[3] + 24) & 0x1FFF;
            unint64_t v127 = (char *)v125[374];
            unint64_t v128 = v125[375];
            if ((unint64_t)v127 >= v128)
            {
              v308 = (char *)v125[373];
              uint64_t v309 = (v127 - v308) >> 3;
              if ((unint64_t)(v309 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v310 = v128 - (void)v308;
              unint64_t v311 = (uint64_t)(v128 - (void)v308) >> 2;
              if (v311 <= v309 + 1) {
                unint64_t v311 = v309 + 1;
              }
              if (v310 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v312 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v312 = v311;
              }
              if (v312)
              {
                v313 = (char *)sub_5714((uint64_t)(v125 + 375), v312);
                unint64_t v127 = (char *)v125[374];
                v308 = (char *)v125[373];
              }
              else
              {
                v313 = 0;
              }
              v408 = &v313[8 * v309];
              *(void *)v408 = v126;
              unint64_t v129 = v408 + 8;
              while (v127 != v308)
              {
                uint64_t v409 = *((void *)v127 - 1);
                v127 -= 8;
                *((void *)v408 - 1) = v409;
                v408 -= 8;
              }
              v125[373] = v408;
              v125[374] = v129;
              v125[375] = &v313[8 * v312];
              if (v308) {
                operator delete(v308);
              }
            }
            else
            {
              *(void *)unint64_t v127 = v126;
              unint64_t v129 = v127 + 8;
            }
            v125[374] = v129;
            break;
          case ']':
            unint64_t v130 = *(void **)a1[2];
            uint64_t v131 = *(_WORD *)(a1[3] + 64) & 0x1FFF;
            uint64_t v132 = (char *)v130[377];
            unint64_t v133 = v130[378];
            if ((unint64_t)v132 >= v133)
            {
              uint64_t v314 = (char *)v130[376];
              uint64_t v315 = (v132 - v314) >> 3;
              if ((unint64_t)(v315 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v316 = v133 - (void)v314;
              unint64_t v317 = (uint64_t)(v133 - (void)v314) >> 2;
              if (v317 <= v315 + 1) {
                unint64_t v317 = v315 + 1;
              }
              if (v316 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v318 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v318 = v317;
              }
              if (v318)
              {
                v319 = (char *)sub_5714((uint64_t)(v130 + 378), v318);
                uint64_t v132 = (char *)v130[377];
                uint64_t v314 = (char *)v130[376];
              }
              else
              {
                v319 = 0;
              }
              v410 = &v319[8 * v315];
              *(void *)v410 = v131;
              unint64_t v134 = v410 + 8;
              while (v132 != v314)
              {
                uint64_t v411 = *((void *)v132 - 1);
                v132 -= 8;
                *((void *)v410 - 1) = v411;
                v410 -= 8;
              }
              v130[376] = v410;
              v130[377] = v134;
              v130[378] = &v319[8 * v318];
              if (v314) {
                operator delete(v314);
              }
            }
            else
            {
              *(void *)uint64_t v132 = v131;
              unint64_t v134 = v132 + 8;
            }
            v130[377] = v134;
            break;
          case '^':
            unint64_t v135 = *(void **)a1[2];
            uint64_t v136 = *(_WORD *)(a1[3] + 48) & 0x1FFF;
            uint64_t v137 = (char *)v135[380];
            unint64_t v138 = v135[381];
            if ((unint64_t)v137 >= v138)
            {
              v320 = (char *)v135[379];
              uint64_t v321 = (v137 - v320) >> 3;
              if ((unint64_t)(v321 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v322 = v138 - (void)v320;
              unint64_t v323 = (uint64_t)(v138 - (void)v320) >> 2;
              if (v323 <= v321 + 1) {
                unint64_t v323 = v321 + 1;
              }
              if (v322 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v324 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v324 = v323;
              }
              if (v324)
              {
                unint64_t v325 = (char *)sub_5714((uint64_t)(v135 + 381), v324);
                uint64_t v137 = (char *)v135[380];
                v320 = (char *)v135[379];
              }
              else
              {
                unint64_t v325 = 0;
              }
              uint64_t v412 = &v325[8 * v321];
              *(void *)uint64_t v412 = v136;
              unint64_t v139 = v412 + 8;
              while (v137 != v320)
              {
                uint64_t v413 = *((void *)v137 - 1);
                v137 -= 8;
                *((void *)v412 - 1) = v413;
                v412 -= 8;
              }
              v135[379] = v412;
              v135[380] = v139;
              v135[381] = &v325[8 * v324];
              if (v320) {
                operator delete(v320);
              }
            }
            else
            {
              *(void *)uint64_t v137 = v136;
              unint64_t v139 = v137 + 8;
            }
            v135[380] = v139;
            break;
          case '_':
            unint64_t v140 = *(void **)a1[2];
            uint64_t v141 = *(_WORD *)(a1[3] + 32) & 0x1FFF;
            uint64_t v142 = (char *)v140[383];
            unint64_t v143 = v140[384];
            if ((unint64_t)v142 >= v143)
            {
              v326 = (char *)v140[382];
              uint64_t v327 = (v142 - v326) >> 3;
              if ((unint64_t)(v327 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v328 = v143 - (void)v326;
              unint64_t v329 = (uint64_t)(v143 - (void)v326) >> 2;
              if (v329 <= v327 + 1) {
                unint64_t v329 = v327 + 1;
              }
              if (v328 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v330 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v330 = v329;
              }
              if (v330)
              {
                unint64_t v331 = (char *)sub_5714((uint64_t)(v140 + 384), v330);
                uint64_t v142 = (char *)v140[383];
                v326 = (char *)v140[382];
              }
              else
              {
                unint64_t v331 = 0;
              }
              unint64_t v414 = &v331[8 * v327];
              *(void *)unint64_t v414 = v141;
              uint64_t v144 = v414 + 8;
              while (v142 != v326)
              {
                uint64_t v415 = *((void *)v142 - 1);
                v142 -= 8;
                *((void *)v414 - 1) = v415;
                v414 -= 8;
              }
              v140[382] = v414;
              v140[383] = v144;
              v140[384] = &v331[8 * v330];
              if (v326) {
                operator delete(v326);
              }
            }
            else
            {
              *(void *)uint64_t v142 = v141;
              uint64_t v144 = v142 + 8;
            }
            v140[383] = v144;
            break;
            unint64_t v145 = *(void **)a1[2];
            unint64_t v146 = ((unint64_t)*(unsigned __int16 *)(a1[3] + 16) >> 1) & 0x1FFF;
            unint64_t v147 = (unint64_t *)v145[386];
            unint64_t v148 = v145[387];
            if ((unint64_t)v147 >= v148)
            {
              v332 = (unint64_t *)v145[385];
              uint64_t v333 = v147 - v332;
              if ((unint64_t)(v333 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v334 = v148 - (void)v332;
              unint64_t v335 = (uint64_t)(v148 - (void)v332) >> 2;
              if (v335 <= v333 + 1) {
                unint64_t v335 = v333 + 1;
              }
              if (v334 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v336 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v336 = v335;
              }
              if (v336)
              {
                uint64_t v337 = (char *)sub_5714((uint64_t)(v145 + 387), v336);
                unint64_t v147 = (unint64_t *)v145[386];
                v332 = (unint64_t *)v145[385];
              }
              else
              {
                uint64_t v337 = 0;
              }
              v416 = (unint64_t *)&v337[8 * v333];
              unint64_t *v416 = v146;
              uint64_t v149 = v416 + 1;
              while (v147 != v332)
              {
                unint64_t v417 = *--v147;
                *--v416 = v417;
              }
              v145[385] = v416;
              v145[386] = v149;
              v145[387] = &v337[8 * v336];
              if (v332) {
                operator delete(v332);
              }
            }
            else
            {
              *unint64_t v147 = v146;
              uint64_t v149 = v147 + 1;
            }
            v145[386] = v149;
            break;
          case 'a':
            uint64_t v150 = *(void **)a1[2];
            uint64_t v151 = *(_WORD *)(a1[3] + 66) & 0x1FFF;
            unint64_t v152 = (char *)v150[389];
            unint64_t v153 = v150[390];
            if ((unint64_t)v152 >= v153)
            {
              v338 = (char *)v150[388];
              uint64_t v339 = (v152 - v338) >> 3;
              if ((unint64_t)(v339 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v340 = v153 - (void)v338;
              unint64_t v341 = (uint64_t)(v153 - (void)v338) >> 2;
              if (v341 <= v339 + 1) {
                unint64_t v341 = v339 + 1;
              }
              if (v340 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v342 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v342 = v341;
              }
              if (v342)
              {
                unint64_t v343 = (char *)sub_5714((uint64_t)(v150 + 390), v342);
                unint64_t v152 = (char *)v150[389];
                v338 = (char *)v150[388];
              }
              else
              {
                unint64_t v343 = 0;
              }
              v418 = &v343[8 * v339];
              *(void *)v418 = v151;
              uint64_t v154 = v418 + 8;
              while (v152 != v338)
              {
                uint64_t v419 = *((void *)v152 - 1);
                v152 -= 8;
                *((void *)v418 - 1) = v419;
                v418 -= 8;
              }
              v150[388] = v418;
              v150[389] = v154;
              v150[390] = &v343[8 * v342];
              if (v338) {
                operator delete(v338);
              }
            }
            else
            {
              *(void *)unint64_t v152 = v151;
              uint64_t v154 = v152 + 8;
            }
            v150[389] = v154;
            break;
          case 'b':
            uint64_t v155 = *(void **)a1[2];
            uint64_t v156 = *(_WORD *)(a1[3] + 50) & 0x1FFF;
            unint64_t v157 = (char *)v155[392];
            unint64_t v158 = v155[393];
            if ((unint64_t)v157 >= v158)
            {
              unint64_t v344 = (char *)v155[391];
              uint64_t v345 = (v157 - v344) >> 3;
              if ((unint64_t)(v345 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v346 = v158 - (void)v344;
              unint64_t v347 = (uint64_t)(v158 - (void)v344) >> 2;
              if (v347 <= v345 + 1) {
                unint64_t v347 = v345 + 1;
              }
              if (v346 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v348 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v348 = v347;
              }
              if (v348)
              {
                uint64_t v349 = (char *)sub_5714((uint64_t)(v155 + 393), v348);
                unint64_t v157 = (char *)v155[392];
                unint64_t v344 = (char *)v155[391];
              }
              else
              {
                uint64_t v349 = 0;
              }
              v420 = &v349[8 * v345];
              *(void *)v420 = v156;
              unint64_t v159 = v420 + 8;
              while (v157 != v344)
              {
                uint64_t v421 = *((void *)v157 - 1);
                v157 -= 8;
                *((void *)v420 - 1) = v421;
                v420 -= 8;
              }
              v155[391] = v420;
              v155[392] = v159;
              v155[393] = &v349[8 * v348];
              if (v344) {
                operator delete(v344);
              }
            }
            else
            {
              *(void *)unint64_t v157 = v156;
              unint64_t v159 = v157 + 8;
            }
            v155[392] = v159;
            break;
          case 'c':
            unint64_t v160 = *(void **)a1[2];
            uint64_t v161 = *(_WORD *)(a1[3] + 34) & 0x1FFF;
            uint64_t v162 = (char *)v160[395];
            unint64_t v163 = v160[396];
            if ((unint64_t)v162 >= v163)
            {
              v350 = (char *)v160[394];
              uint64_t v351 = (v162 - v350) >> 3;
              if ((unint64_t)(v351 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v352 = v163 - (void)v350;
              unint64_t v353 = (uint64_t)(v163 - (void)v350) >> 2;
              if (v353 <= v351 + 1) {
                unint64_t v353 = v351 + 1;
              }
              if (v352 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v354 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v354 = v353;
              }
              if (v354)
              {
                v355 = (char *)sub_5714((uint64_t)(v160 + 396), v354);
                uint64_t v162 = (char *)v160[395];
                v350 = (char *)v160[394];
              }
              else
              {
                v355 = 0;
              }
              v422 = &v355[8 * v351];
              *(void *)v422 = v161;
              unint64_t v164 = v422 + 8;
              while (v162 != v350)
              {
                uint64_t v423 = *((void *)v162 - 1);
                v162 -= 8;
                *((void *)v422 - 1) = v423;
                v422 -= 8;
              }
              v160[394] = v422;
              v160[395] = v164;
              v160[396] = &v355[8 * v354];
              if (v350) {
                operator delete(v350);
              }
            }
            else
            {
              *(void *)uint64_t v162 = v161;
              unint64_t v164 = v162 + 8;
            }
            v160[395] = v164;
            break;
          case 'd':
            unint64_t v165 = *(void **)a1[2];
            uint64_t v166 = *(_WORD *)(a1[3] + 18) & 0x1FFF;
            uint64_t v167 = (char *)v165[398];
            unint64_t v168 = v165[399];
            if ((unint64_t)v167 >= v168)
            {
              uint64_t v356 = (char *)v165[397];
              uint64_t v357 = (v167 - v356) >> 3;
              if ((unint64_t)(v357 + 1) >> 61) {
LABEL_594:
              }
                sub_566C();
              unint64_t v358 = v168 - (void)v356;
              unint64_t v359 = (uint64_t)(v168 - (void)v356) >> 2;
              if (v359 <= v357 + 1) {
                unint64_t v359 = v357 + 1;
              }
              if (v358 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v360 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v360 = v359;
              }
              if (v360)
              {
                v361 = (char *)sub_5714((uint64_t)(v165 + 399), v360);
                uint64_t v167 = (char *)v165[398];
                uint64_t v356 = (char *)v165[397];
              }
              else
              {
                v361 = 0;
              }
              v424 = &v361[8 * v357];
              *(void *)v424 = v166;
              unint64_t v169 = v424 + 8;
              while (v167 != v356)
              {
                uint64_t v425 = *((void *)v167 - 1);
                v167 -= 8;
                *((void *)v424 - 1) = v425;
                v424 -= 8;
              }
              v165[397] = v424;
              v165[398] = v169;
              v165[399] = &v361[8 * v360];
              if (v356) {
                operator delete(v356);
              }
            }
            else
            {
              *(void *)uint64_t v167 = v166;
              unint64_t v169 = v167 + 8;
            }
            v165[398] = v169;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_5DF98(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    unint64_t v103 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v102 = *v103;
    uint64_t v104 = (char *)v103[1] - (char *)*v103;
    if (v104)
    {
      unint64_t v105 = v104 >> 2;
      if (v105 <= 1) {
        unint64_t v105 = 1;
      }
      do
      {
        int v106 = *v102++;
        switch(v106)
        {
          case '>':
            uint64_t v107 = *(_WORD *)(a1[3] + 34) & 0x7FFF;
            unint64_t v108 = (void *)(*(void *)a1[2] + 2272);
            goto LABEL_140;
          case '?':
            uint64_t v107 = *(_WORD *)(a1[3] + 32) & 0x7FFF;
            unint64_t v108 = (void *)(*(void *)a1[2] + 2296);
            goto LABEL_140;
          case '@':
            uint64_t v107 = *(_WORD *)(a1[3] + 30) & 0x7FFF;
            unint64_t v108 = (void *)(*(void *)a1[2] + 2320);
            goto LABEL_140;
          case 'A':
            uint64_t v107 = (*(void *)(a1[3] + 24) >> 33) & 0x7FFFLL;
            unint64_t v108 = (void *)(*(void *)a1[2] + 2344);
            goto LABEL_140;
          case 'B':
            uint64_t v107 = *(void *)(a1[3] + 24) & 0x1FFFFFFFFLL;
            unint64_t v108 = (void *)(*(void *)a1[2] + 2368);
            goto LABEL_140;
          case 'C':
            uint64_t v107 = *(_WORD *)(a1[3] + 36) & 0x7FFF;
            unint64_t v108 = (void *)(*(void *)a1[2] + 2392);
            goto LABEL_140;
          case 'D':
            uint64_t v107 = *(unsigned int *)(a1[3] + 16);
            unint64_t v108 = (void *)(*(void *)a1[2] + 2416);
LABEL_140:
            *(void *)(*v108 - 8) += v107;
            break;
          default:
            break;
        }
        --v105;
      }
      while (v105);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case '>':
            uint64_t v10 = *(void **)a1[2];
            uint64_t v11 = *(_WORD *)(a1[3] + 34) & 0x7FFF;
            unsigned int v12 = (char *)v10[284];
            unint64_t v13 = v10[285];
            if ((unint64_t)v12 >= v13)
            {
              uint64_t v46 = (char *)v10[283];
              uint64_t v47 = (v12 - v46) >> 3;
              if ((unint64_t)(v47 + 1) >> 61) {
                goto LABEL_144;
              }
              unint64_t v48 = v13 - (void)v46;
              unint64_t v49 = (uint64_t)(v13 - (void)v46) >> 2;
              if (v49 <= v47 + 1) {
                unint64_t v49 = v47 + 1;
              }
              if (v48 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v50 = v49;
              }
              if (v50)
              {
                uint64_t v51 = (char *)sub_5714((uint64_t)(v10 + 285), v50);
                unsigned int v12 = (char *)v10[284];
                uint64_t v46 = (char *)v10[283];
              }
              else
              {
                uint64_t v51 = 0;
              }
              unint64_t v88 = &v51[8 * v47];
              *(void *)unint64_t v88 = v11;
              unint64_t v14 = v88 + 8;
              while (v12 != v46)
              {
                uint64_t v89 = *((void *)v12 - 1);
                v12 -= 8;
                *((void *)v88 - 1) = v89;
                v88 -= 8;
              }
              v10[283] = v88;
              v10[284] = v14;
              v10[285] = &v51[8 * v50];
              if (v46) {
                operator delete(v46);
              }
            }
            else
            {
              *(void *)unsigned int v12 = v11;
              unint64_t v14 = v12 + 8;
            }
            v10[284] = v14;
            break;
          case '?':
            unint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_WORD *)(a1[3] + 32) & 0x7FFF;
            uint64_t v17 = (char *)v15[287];
            unint64_t v18 = v15[288];
            if ((unint64_t)v17 >= v18)
            {
              unint64_t v52 = (char *)v15[286];
              uint64_t v53 = (v17 - v52) >> 3;
              if ((unint64_t)(v53 + 1) >> 61) {
                goto LABEL_144;
              }
              unint64_t v54 = v18 - (void)v52;
              unint64_t v55 = (uint64_t)(v18 - (void)v52) >> 2;
              if (v55 <= v53 + 1) {
                unint64_t v55 = v53 + 1;
              }
              if (v54 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v56 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v56 = v55;
              }
              if (v56)
              {
                unint64_t v57 = (char *)sub_5714((uint64_t)(v15 + 288), v56);
                uint64_t v17 = (char *)v15[287];
                unint64_t v52 = (char *)v15[286];
              }
              else
              {
                unint64_t v57 = 0;
              }
              unint64_t v90 = &v57[8 * v53];
              *(void *)unint64_t v90 = v16;
              unint64_t v19 = v90 + 8;
              while (v17 != v52)
              {
                uint64_t v91 = *((void *)v17 - 1);
                v17 -= 8;
                *((void *)v90 - 1) = v91;
                v90 -= 8;
              }
              v15[286] = v90;
              v15[287] = v19;
              v15[288] = &v57[8 * v56];
              if (v52) {
                operator delete(v52);
              }
            }
            else
            {
              *(void *)uint64_t v17 = v16;
              unint64_t v19 = v17 + 8;
            }
            v15[287] = v19;
            break;
          case '@':
            uint64_t v20 = *(void **)a1[2];
            uint64_t v21 = *(_WORD *)(a1[3] + 30) & 0x7FFF;
            uint64_t v22 = (char *)v20[290];
            unint64_t v23 = v20[291];
            if ((unint64_t)v22 >= v23)
            {
              unint64_t v58 = (char *)v20[289];
              uint64_t v59 = (v22 - v58) >> 3;
              if ((unint64_t)(v59 + 1) >> 61) {
                goto LABEL_144;
              }
              unint64_t v60 = v23 - (void)v58;
              unint64_t v61 = (uint64_t)(v23 - (void)v58) >> 2;
              if (v61 <= v59 + 1) {
                unint64_t v61 = v59 + 1;
              }
              if (v60 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v62 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v62 = v61;
              }
              if (v62)
              {
                unint64_t v63 = (char *)sub_5714((uint64_t)(v20 + 291), v62);
                uint64_t v22 = (char *)v20[290];
                unint64_t v58 = (char *)v20[289];
              }
              else
              {
                unint64_t v63 = 0;
              }
              uint64_t v92 = &v63[8 * v59];
              *(void *)uint64_t v92 = v21;
              unint64_t v24 = v92 + 8;
              while (v22 != v58)
              {
                uint64_t v93 = *((void *)v22 - 1);
                v22 -= 8;
                *((void *)v92 - 1) = v93;
                v92 -= 8;
              }
              v20[289] = v92;
              v20[290] = v24;
              v20[291] = &v63[8 * v62];
              if (v58) {
                operator delete(v58);
              }
            }
            else
            {
              *(void *)uint64_t v22 = v21;
              unint64_t v24 = v22 + 8;
            }
            v20[290] = v24;
            break;
          case 'A':
            uint64_t v25 = *(void **)a1[2];
            uint64_t v26 = (*(void *)(a1[3] + 24) >> 33) & 0x7FFFLL;
            uint64_t v27 = (uint64_t *)v25[293];
            unint64_t v28 = v25[294];
            if ((unint64_t)v27 >= v28)
            {
              unint64_t v64 = (uint64_t *)v25[292];
              uint64_t v65 = v27 - v64;
              if ((unint64_t)(v65 + 1) >> 61) {
                goto LABEL_144;
              }
              unint64_t v66 = v28 - (void)v64;
              unint64_t v67 = (uint64_t)(v28 - (void)v64) >> 2;
              if (v67 <= v65 + 1) {
                unint64_t v67 = v65 + 1;
              }
              if (v66 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v68 = v67;
              }
              if (v68)
              {
                unint64_t v69 = (char *)sub_5714((uint64_t)(v25 + 294), v68);
                uint64_t v27 = (uint64_t *)v25[293];
                unint64_t v64 = (uint64_t *)v25[292];
              }
              else
              {
                unint64_t v69 = 0;
              }
              unint64_t v94 = (uint64_t *)&v69[8 * v65];
              uint64_t *v94 = v26;
              unint64_t v29 = v94 + 1;
              while (v27 != v64)
              {
                uint64_t v95 = *--v27;
                *--unint64_t v94 = v95;
              }
              v25[292] = v94;
              v25[293] = v29;
              v25[294] = &v69[8 * v68];
              if (v64) {
                operator delete(v64);
              }
            }
            else
            {
              *uint64_t v27 = v26;
              unint64_t v29 = v27 + 1;
            }
            v25[293] = v29;
            break;
          case 'B':
            unint64_t v30 = *(void **)a1[2];
            uint64_t v31 = *(void *)(a1[3] + 24) & 0x1FFFFFFFFLL;
            unint64_t v32 = (uint64_t *)v30[296];
            unint64_t v33 = v30[297];
            if ((unint64_t)v32 >= v33)
            {
              uint64_t v70 = (uint64_t *)v30[295];
              uint64_t v71 = v32 - v70;
              if ((unint64_t)(v71 + 1) >> 61) {
                goto LABEL_144;
              }
              unint64_t v72 = v33 - (void)v70;
              unint64_t v73 = (uint64_t)(v33 - (void)v70) >> 2;
              if (v73 <= v71 + 1) {
                unint64_t v73 = v71 + 1;
              }
              if (v72 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v74 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v74 = v73;
              }
              if (v74)
              {
                unint64_t v75 = (char *)sub_5714((uint64_t)(v30 + 297), v74);
                unint64_t v32 = (uint64_t *)v30[296];
                uint64_t v70 = (uint64_t *)v30[295];
              }
              else
              {
                unint64_t v75 = 0;
              }
              uint64_t v96 = (uint64_t *)&v75[8 * v71];
              uint64_t *v96 = v31;
              unint64_t v34 = v96 + 1;
              while (v32 != v70)
              {
                uint64_t v97 = *--v32;
                *--uint64_t v96 = v97;
              }
              v30[295] = v96;
              v30[296] = v34;
              v30[297] = &v75[8 * v74];
              if (v70) {
                operator delete(v70);
              }
            }
            else
            {
              *unint64_t v32 = v31;
              unint64_t v34 = v32 + 1;
            }
            v30[296] = v34;
            break;
          case 'C':
            unint64_t v35 = *(void **)a1[2];
            uint64_t v36 = *(_WORD *)(a1[3] + 36) & 0x7FFF;
            uint64_t v37 = (char *)v35[299];
            unint64_t v38 = v35[300];
            if ((unint64_t)v37 >= v38)
            {
              uint64_t v76 = (char *)v35[298];
              uint64_t v77 = (v37 - v76) >> 3;
              if ((unint64_t)(v77 + 1) >> 61) {
                goto LABEL_144;
              }
              unint64_t v78 = v38 - (void)v76;
              unint64_t v79 = (uint64_t)(v38 - (void)v76) >> 2;
              if (v79 <= v77 + 1) {
                unint64_t v79 = v77 + 1;
              }
              if (v78 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v80 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v80 = v79;
              }
              if (v80)
              {
                uint64_t v81 = (char *)sub_5714((uint64_t)(v35 + 300), v80);
                uint64_t v37 = (char *)v35[299];
                uint64_t v76 = (char *)v35[298];
              }
              else
              {
                uint64_t v81 = 0;
              }
              unint64_t v98 = &v81[8 * v77];
              *(void *)unint64_t v98 = v36;
              unint64_t v39 = v98 + 8;
              while (v37 != v76)
              {
                uint64_t v99 = *((void *)v37 - 1);
                v37 -= 8;
                *((void *)v98 - 1) = v99;
                v98 -= 8;
              }
              v35[298] = v98;
              v35[299] = v39;
              v35[300] = &v81[8 * v80];
              if (v76) {
                operator delete(v76);
              }
            }
            else
            {
              *(void *)uint64_t v37 = v36;
              unint64_t v39 = v37 + 8;
            }
            v35[299] = v39;
            break;
          case 'D':
            uint64_t v40 = a1[2];
            uint64_t v41 = *(void **)v40;
            uint64_t v42 = *(unsigned int *)(a1[3] + 16);
            unint64_t v43 = *(char **)(*(void *)v40 + 2416);
            unint64_t v44 = *(void *)(*(void *)v40 + 2424);
            if ((unint64_t)v43 >= v44)
            {
              unint64_t v82 = (char *)v41[301];
              uint64_t v83 = (v43 - v82) >> 3;
              if ((unint64_t)(v83 + 1) >> 61) {
LABEL_144:
              }
                sub_566C();
              unint64_t v84 = v44 - (void)v82;
              unint64_t v85 = (uint64_t)(v44 - (void)v82) >> 2;
              if (v85 <= v83 + 1) {
                unint64_t v85 = v83 + 1;
              }
              if (v84 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v86 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v86 = v85;
              }
              if (v86)
              {
                unint64_t v87 = (char *)sub_5714((uint64_t)(v41 + 303), v86);
                unint64_t v43 = (char *)v41[302];
                unint64_t v82 = (char *)v41[301];
              }
              else
              {
                unint64_t v87 = 0;
              }
              unint64_t v100 = &v87[8 * v83];
              *(void *)unint64_t v100 = v42;
              unint64_t v45 = v100 + 8;
              while (v43 != v82)
              {
                uint64_t v101 = *((void *)v43 - 1);
                v43 -= 8;
                *((void *)v100 - 1) = v101;
                v100 -= 8;
              }
              v41[301] = v100;
              v41[302] = v45;
              v41[303] = &v87[8 * v86];
              if (v82) {
                operator delete(v82);
              }
            }
            else
            {
              *(void *)unint64_t v43 = v42;
              unint64_t v45 = v43 + 8;
            }
            v41[302] = v45;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_5E700(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    unint64_t v38 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v37 = *v38;
    uint64_t v39 = (char *)v38[1] - (char *)*v38;
    if (!v39) {
      goto LABEL_54;
    }
    unint64_t v40 = v39 >> 2;
    if (v40 <= 1) {
      unint64_t v40 = 1;
    }
    while (1)
    {
      int v42 = *v37++;
      int v41 = v42;
      if (v42 == 61) {
        break;
      }
      if (v41 == 60)
      {
        unint64_t v43 = (_WORD *)(a1[3] + 18);
        unint64_t v44 = (void *)(*(void *)a1[2] + 2224);
LABEL_52:
        *(void *)(*v44 - 8) += *v43 & 0x7FFF;
      }
      if (!--v40) {
        goto LABEL_54;
      }
    }
    unint64_t v43 = (_WORD *)(a1[3] + 16);
    unint64_t v44 = (void *)(*(void *)a1[2] + 2248);
    goto LABEL_52;
  }
  if (*a2) {
    return;
  }
  v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
  uint64_t v6 = v5[1] - *v5;
  if (v6)
  {
    uint64_t v7 = 0;
    unint64_t v8 = v6 >> 2;
    if (v8 <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = v8;
    }
    do
    {
      int v10 = *(_DWORD *)(*v5 + 4 * v7);
      if (v10 == 61)
      {
        uint64_t v16 = *(void **)a1[2];
        uint64_t v17 = *(_WORD *)(a1[3] + 16) & 0x7FFF;
        unint64_t v18 = (char *)v16[281];
        unint64_t v19 = v16[282];
        if ((unint64_t)v18 >= v19)
        {
          uint64_t v27 = (char *)v16[280];
          uint64_t v28 = (v18 - v27) >> 3;
          if ((unint64_t)(v28 + 1) >> 61) {
LABEL_56:
          }
            sub_566C();
          unint64_t v29 = v19 - (void)v27;
          unint64_t v30 = (uint64_t)(v19 - (void)v27) >> 2;
          if (v30 <= v28 + 1) {
            unint64_t v30 = v28 + 1;
          }
          if (v29 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v31 = v30;
          }
          if (v31)
          {
            unint64_t v32 = (char *)sub_5714((uint64_t)(v16 + 282), v31);
            unint64_t v18 = (char *)v16[281];
            uint64_t v27 = (char *)v16[280];
          }
          else
          {
            unint64_t v32 = 0;
          }
          unint64_t v35 = &v32[8 * v28];
          *(void *)unint64_t v35 = v17;
          uint64_t v20 = v35 + 8;
          while (v18 != v27)
          {
            uint64_t v36 = *((void *)v18 - 1);
            v18 -= 8;
            *((void *)v35 - 1) = v36;
            v35 -= 8;
          }
          v16[280] = v35;
          v16[281] = v20;
          v16[282] = &v32[8 * v31];
          if (v27) {
            operator delete(v27);
          }
        }
        else
        {
          *(void *)unint64_t v18 = v17;
          uint64_t v20 = v18 + 8;
        }
        v16[281] = v20;
      }
      else if (v10 == 60)
      {
        uint64_t v11 = *(void **)a1[2];
        uint64_t v12 = *(_WORD *)(a1[3] + 18) & 0x7FFF;
        unint64_t v13 = (char *)v11[278];
        unint64_t v14 = v11[279];
        if ((unint64_t)v13 >= v14)
        {
          uint64_t v21 = (char *)v11[277];
          uint64_t v22 = (v13 - v21) >> 3;
          if ((unint64_t)(v22 + 1) >> 61) {
            goto LABEL_56;
          }
          unint64_t v23 = v14 - (void)v21;
          unint64_t v24 = (uint64_t)(v14 - (void)v21) >> 2;
          if (v24 <= v22 + 1) {
            unint64_t v24 = v22 + 1;
          }
          if (v23 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v25 = v24;
          }
          if (v25)
          {
            uint64_t v26 = (char *)sub_5714((uint64_t)(v11 + 279), v25);
            unint64_t v13 = (char *)v11[278];
            uint64_t v21 = (char *)v11[277];
          }
          else
          {
            uint64_t v26 = 0;
          }
          unint64_t v33 = &v26[8 * v22];
          *(void *)unint64_t v33 = v12;
          unint64_t v15 = v33 + 8;
          while (v13 != v21)
          {
            uint64_t v34 = *((void *)v13 - 1);
            v13 -= 8;
            *((void *)v33 - 1) = v34;
            v33 -= 8;
          }
          v11[277] = v33;
          v11[278] = v15;
          v11[279] = &v26[8 * v25];
          if (v21) {
            operator delete(v21);
          }
        }
        else
        {
          *(void *)unint64_t v13 = v12;
          unint64_t v15 = v13 + 8;
        }
        v11[278] = v15;
      }
      ++v7;
    }
    while (v7 != v9);
  }
LABEL_54:
  *a2 = 1;
}

void sub_5E9C8(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    unint64_t v118 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    unint64_t v117 = *v118;
    uint64_t v119 = (char *)v118[1] - (char *)*v118;
    if (v119)
    {
      unint64_t v120 = v119 >> 2;
      if (v120 <= 1) {
        unint64_t v120 = 1;
      }
      do
      {
        int v121 = *v117++;
        switch(v121)
        {
          case 'x':
            uint64_t v122 = *(_WORD *)(a1[3] + 16) & 0x7FFF;
            unint64_t v123 = (void *)(*(void *)a1[2] + 3664);
            goto LABEL_158;
          case 'y':
            uint64_t v122 = *(_DWORD *)(a1[3] + 32) & 0x1FFFF;
            unint64_t v123 = (void *)(*(void *)a1[2] + 3688);
            goto LABEL_158;
          case 'z':
            uint64_t v122 = *(_WORD *)(a1[3] + 18) & 0x7FFF;
            unint64_t v123 = (void *)(*(void *)a1[2] + 3712);
            goto LABEL_158;
          case '{':
            uint64_t v122 = *(_DWORD *)(a1[3] + 28) & 0x3FFFF;
            unint64_t v123 = (void *)(*(void *)a1[2] + 3736);
            goto LABEL_158;
          case '|':
            uint64_t v122 = *(_DWORD *)(a1[3] + 24) & 0x3FFFF;
            unint64_t v123 = (void *)(*(void *)a1[2] + 3760);
            goto LABEL_158;
          case '}':
            uint64_t v122 = *(unsigned __int16 *)(a1[3] + 38);
            unint64_t v123 = (void *)(*(void *)a1[2] + 3784);
            goto LABEL_158;
          case '~':
            uint64_t v122 = *(unsigned __int16 *)(a1[3] + 36);
            unint64_t v123 = (void *)(*(void *)a1[2] + 3808);
            goto LABEL_158;
          case '\x7F':
            uint64_t v122 = *(unsigned __int16 *)(a1[3] + 20);
            unint64_t v123 = (void *)(*(void *)a1[2] + 3832);
LABEL_158:
            *(void *)(*v123 - 8) += v122;
            break;
          default:
            break;
        }
        --v120;
      }
      while (v120);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 'x':
            int v10 = *(void **)a1[2];
            uint64_t v11 = *(_WORD *)(a1[3] + 16) & 0x7FFF;
            uint64_t v12 = (char *)v10[458];
            unint64_t v13 = v10[459];
            if ((unint64_t)v12 >= v13)
            {
              uint64_t v53 = (char *)v10[457];
              uint64_t v54 = (v12 - v53) >> 3;
              if ((unint64_t)(v54 + 1) >> 61) {
                goto LABEL_162;
              }
              unint64_t v55 = v13 - (void)v53;
              unint64_t v56 = (uint64_t)(v13 - (void)v53) >> 2;
              if (v56 <= v54 + 1) {
                unint64_t v56 = v54 + 1;
              }
              if (v55 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v57 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v57 = v56;
              }
              if (v57)
              {
                unint64_t v58 = (char *)sub_5714((uint64_t)(v10 + 459), v57);
                uint64_t v12 = (char *)v10[458];
                uint64_t v53 = (char *)v10[457];
              }
              else
              {
                unint64_t v58 = 0;
              }
              uint64_t v101 = &v58[8 * v54];
              *(void *)uint64_t v101 = v11;
              unint64_t v14 = v101 + 8;
              while (v12 != v53)
              {
                uint64_t v102 = *((void *)v12 - 1);
                v12 -= 8;
                *((void *)v101 - 1) = v102;
                v101 -= 8;
              }
              v10[457] = v101;
              v10[458] = v14;
              v10[459] = &v58[8 * v57];
              if (v53) {
                operator delete(v53);
              }
            }
            else
            {
              *(void *)uint64_t v12 = v11;
              unint64_t v14 = v12 + 8;
            }
            v10[458] = v14;
            break;
          case 'y':
            unint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_DWORD *)(a1[3] + 32) & 0x1FFFFLL;
            uint64_t v17 = (uint64_t *)v15[461];
            unint64_t v18 = v15[462];
            if ((unint64_t)v17 >= v18)
            {
              uint64_t v59 = (uint64_t *)v15[460];
              uint64_t v60 = v17 - v59;
              if ((unint64_t)(v60 + 1) >> 61) {
                goto LABEL_162;
              }
              unint64_t v61 = v18 - (void)v59;
              unint64_t v62 = (uint64_t)(v18 - (void)v59) >> 2;
              if (v62 <= v60 + 1) {
                unint64_t v62 = v60 + 1;
              }
              if (v61 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v63 = v62;
              }
              if (v63)
              {
                unint64_t v64 = (char *)sub_5714((uint64_t)(v15 + 462), v63);
                uint64_t v17 = (uint64_t *)v15[461];
                uint64_t v59 = (uint64_t *)v15[460];
              }
              else
              {
                unint64_t v64 = 0;
              }
              unint64_t v103 = (uint64_t *)&v64[8 * v60];
              uint64_t *v103 = v16;
              unint64_t v19 = v103 + 1;
              while (v17 != v59)
              {
                uint64_t v104 = *--v17;
                *--unint64_t v103 = v104;
              }
              v15[460] = v103;
              v15[461] = v19;
              v15[462] = &v64[8 * v63];
              if (v59) {
                operator delete(v59);
              }
            }
            else
            {
              *uint64_t v17 = v16;
              unint64_t v19 = v17 + 1;
            }
            v15[461] = v19;
            break;
          case 'z':
            uint64_t v20 = *(void **)a1[2];
            uint64_t v21 = *(_WORD *)(a1[3] + 18) & 0x7FFF;
            uint64_t v22 = (char *)v20[464];
            unint64_t v23 = v20[465];
            if ((unint64_t)v22 >= v23)
            {
              uint64_t v65 = (char *)v20[463];
              uint64_t v66 = (v22 - v65) >> 3;
              if ((unint64_t)(v66 + 1) >> 61) {
                goto LABEL_162;
              }
              unint64_t v67 = v23 - (void)v65;
              unint64_t v68 = (uint64_t)(v23 - (void)v65) >> 2;
              if (v68 <= v66 + 1) {
                unint64_t v68 = v66 + 1;
              }
              if (v67 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v69 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v69 = v68;
              }
              if (v69)
              {
                uint64_t v70 = (char *)sub_5714((uint64_t)(v20 + 465), v69);
                uint64_t v22 = (char *)v20[464];
                uint64_t v65 = (char *)v20[463];
              }
              else
              {
                uint64_t v70 = 0;
              }
              unint64_t v105 = &v70[8 * v66];
              *(void *)unint64_t v105 = v21;
              unint64_t v24 = v105 + 8;
              while (v22 != v65)
              {
                uint64_t v106 = *((void *)v22 - 1);
                v22 -= 8;
                *((void *)v105 - 1) = v106;
                v105 -= 8;
              }
              v20[463] = v105;
              v20[464] = v24;
              v20[465] = &v70[8 * v69];
              if (v65) {
                operator delete(v65);
              }
            }
            else
            {
              *(void *)uint64_t v22 = v21;
              unint64_t v24 = v22 + 8;
            }
            v20[464] = v24;
            break;
          case '{':
            unint64_t v25 = *(void **)a1[2];
            uint64_t v26 = *(_DWORD *)(a1[3] + 28) & 0x3FFFFLL;
            uint64_t v27 = (uint64_t *)v25[467];
            unint64_t v28 = v25[468];
            if ((unint64_t)v27 >= v28)
            {
              uint64_t v71 = (uint64_t *)v25[466];
              uint64_t v72 = v27 - v71;
              if ((unint64_t)(v72 + 1) >> 61) {
                goto LABEL_162;
              }
              unint64_t v73 = v28 - (void)v71;
              unint64_t v74 = (uint64_t)(v28 - (void)v71) >> 2;
              if (v74 <= v72 + 1) {
                unint64_t v74 = v72 + 1;
              }
              if (v73 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v75 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v75 = v74;
              }
              if (v75)
              {
                uint64_t v76 = (char *)sub_5714((uint64_t)(v25 + 468), v75);
                uint64_t v27 = (uint64_t *)v25[467];
                uint64_t v71 = (uint64_t *)v25[466];
              }
              else
              {
                uint64_t v76 = 0;
              }
              uint64_t v107 = (uint64_t *)&v76[8 * v72];
              *uint64_t v107 = v26;
              unint64_t v29 = v107 + 1;
              while (v27 != v71)
              {
                uint64_t v108 = *--v27;
                *--uint64_t v107 = v108;
              }
              v25[466] = v107;
              v25[467] = v29;
              v25[468] = &v76[8 * v75];
              if (v71) {
                operator delete(v71);
              }
            }
            else
            {
              *uint64_t v27 = v26;
              unint64_t v29 = v27 + 1;
            }
            v25[467] = v29;
            break;
          case '|':
            unint64_t v30 = *(void **)a1[2];
            uint64_t v31 = *(_DWORD *)(a1[3] + 24) & 0x3FFFFLL;
            unint64_t v32 = (uint64_t *)v30[470];
            unint64_t v33 = v30[471];
            if ((unint64_t)v32 >= v33)
            {
              uint64_t v77 = (uint64_t *)v30[469];
              uint64_t v78 = v32 - v77;
              if ((unint64_t)(v78 + 1) >> 61) {
                goto LABEL_162;
              }
              unint64_t v79 = v33 - (void)v77;
              unint64_t v80 = (uint64_t)(v33 - (void)v77) >> 2;
              if (v80 <= v78 + 1) {
                unint64_t v80 = v78 + 1;
              }
              if (v79 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v81 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v81 = v80;
              }
              if (v81)
              {
                unint64_t v82 = (char *)sub_5714((uint64_t)(v30 + 471), v81);
                unint64_t v32 = (uint64_t *)v30[470];
                uint64_t v77 = (uint64_t *)v30[469];
              }
              else
              {
                unint64_t v82 = 0;
              }
              unint64_t v109 = (uint64_t *)&v82[8 * v78];
              uint64_t *v109 = v31;
              uint64_t v34 = v109 + 1;
              while (v32 != v77)
              {
                uint64_t v110 = *--v32;
                *--unint64_t v109 = v110;
              }
              v30[469] = v109;
              v30[470] = v34;
              v30[471] = &v82[8 * v81];
              if (v77) {
                operator delete(v77);
              }
            }
            else
            {
              *unint64_t v32 = v31;
              uint64_t v34 = v32 + 1;
            }
            v30[470] = v34;
            break;
          case '}':
            uint64_t v35 = a1[2];
            uint64_t v36 = *(void **)v35;
            uint64_t v37 = *(unsigned __int16 *)(a1[3] + 38);
            unint64_t v38 = *(char **)(*(void *)v35 + 3784);
            unint64_t v39 = *(void *)(*(void *)v35 + 3792);
            if ((unint64_t)v38 >= v39)
            {
              uint64_t v83 = (char *)v36[472];
              uint64_t v84 = (v38 - v83) >> 3;
              if ((unint64_t)(v84 + 1) >> 61) {
                goto LABEL_162;
              }
              unint64_t v85 = v39 - (void)v83;
              unint64_t v86 = (uint64_t)(v39 - (void)v83) >> 2;
              if (v86 <= v84 + 1) {
                unint64_t v86 = v84 + 1;
              }
              if (v85 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v87 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v87 = v86;
              }
              if (v87)
              {
                unint64_t v88 = (char *)sub_5714((uint64_t)(v36 + 474), v87);
                unint64_t v38 = (char *)v36[473];
                uint64_t v83 = (char *)v36[472];
              }
              else
              {
                unint64_t v88 = 0;
              }
              uint64_t v111 = &v88[8 * v84];
              *(void *)uint64_t v111 = v37;
              unint64_t v40 = v111 + 8;
              while (v38 != v83)
              {
                uint64_t v112 = *((void *)v38 - 1);
                v38 -= 8;
                *((void *)v111 - 1) = v112;
                v111 -= 8;
              }
              v36[472] = v111;
              v36[473] = v40;
              v36[474] = &v88[8 * v87];
              if (v83) {
                operator delete(v83);
              }
            }
            else
            {
              *(void *)unint64_t v38 = v37;
              unint64_t v40 = v38 + 8;
            }
            v36[473] = v40;
            break;
          case '~':
            uint64_t v41 = a1[2];
            int v42 = *(void **)v41;
            uint64_t v43 = *(unsigned __int16 *)(a1[3] + 36);
            unint64_t v44 = *(char **)(*(void *)v41 + 3808);
            unint64_t v45 = *(void *)(*(void *)v41 + 3816);
            if ((unint64_t)v44 >= v45)
            {
              uint64_t v89 = (char *)v42[475];
              uint64_t v90 = (v44 - v89) >> 3;
              if ((unint64_t)(v90 + 1) >> 61) {
                goto LABEL_162;
              }
              unint64_t v91 = v45 - (void)v89;
              unint64_t v92 = (uint64_t)(v45 - (void)v89) >> 2;
              if (v92 <= v90 + 1) {
                unint64_t v92 = v90 + 1;
              }
              if (v91 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v93 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v93 = v92;
              }
              if (v93)
              {
                unint64_t v94 = (char *)sub_5714((uint64_t)(v42 + 477), v93);
                unint64_t v44 = (char *)v42[476];
                uint64_t v89 = (char *)v42[475];
              }
              else
              {
                unint64_t v94 = 0;
              }
              unint64_t v113 = &v94[8 * v90];
              *(void *)unint64_t v113 = v43;
              uint64_t v46 = v113 + 8;
              while (v44 != v89)
              {
                uint64_t v114 = *((void *)v44 - 1);
                v44 -= 8;
                *((void *)v113 - 1) = v114;
                v113 -= 8;
              }
              v42[475] = v113;
              v42[476] = v46;
              v42[477] = &v94[8 * v93];
              if (v89) {
                operator delete(v89);
              }
            }
            else
            {
              *(void *)unint64_t v44 = v43;
              uint64_t v46 = v44 + 8;
            }
            v42[476] = v46;
            break;
          case '\x7F':
            uint64_t v47 = a1[2];
            unint64_t v48 = *(void **)v47;
            uint64_t v49 = *(unsigned __int16 *)(a1[3] + 20);
            unint64_t v50 = *(char **)(*(void *)v47 + 3832);
            unint64_t v51 = *(void *)(*(void *)v47 + 3840);
            if ((unint64_t)v50 >= v51)
            {
              uint64_t v95 = (char *)v48[478];
              uint64_t v96 = (v50 - v95) >> 3;
              if ((unint64_t)(v96 + 1) >> 61) {
LABEL_162:
              }
                sub_566C();
              unint64_t v97 = v51 - (void)v95;
              unint64_t v98 = (uint64_t)(v51 - (void)v95) >> 2;
              if (v98 <= v96 + 1) {
                unint64_t v98 = v96 + 1;
              }
              if (v97 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v99 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v99 = v98;
              }
              if (v99)
              {
                unint64_t v100 = (char *)sub_5714((uint64_t)(v48 + 480), v99);
                unint64_t v50 = (char *)v48[479];
                uint64_t v95 = (char *)v48[478];
              }
              else
              {
                unint64_t v100 = 0;
              }
              unint64_t v115 = &v100[8 * v96];
              *(void *)unint64_t v115 = v49;
              unint64_t v52 = v115 + 8;
              while (v50 != v95)
              {
                uint64_t v116 = *((void *)v50 - 1);
                v50 -= 8;
                *((void *)v115 - 1) = v116;
                v115 -= 8;
              }
              v48[478] = v115;
              v48[479] = v52;
              v48[480] = &v100[8 * v99];
              if (v95) {
                operator delete(v95);
              }
            }
            else
            {
              *(void *)unint64_t v50 = v49;
              unint64_t v52 = v50 + 8;
            }
            v48[479] = v52;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_5F200(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    unint64_t v208 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v207 = *v208;
    uint64_t v209 = (char *)v208[1] - (char *)*v208;
    if (v209)
    {
      unint64_t v210 = v209 >> 2;
      if (v210 <= 1) {
        unint64_t v210 = 1;
      }
      do
      {
        int v211 = *v207++;
        switch(v211)
        {
          case 'e':
            unint64_t v212 = (unint64_t)*(unsigned int *)(a1[3] + 32) >> 17;
            uint64_t v213 = (void *)(*(void *)a1[2] + 3208);
            goto LABEL_284;
          case 'f':
            unint64_t v212 = *(_DWORD *)(a1[3] + 32) & 0x1FFFF;
            uint64_t v213 = (void *)(*(void *)a1[2] + 3232);
            goto LABEL_284;
          case 'g':
            unint64_t v212 = *(_WORD *)(a1[3] + 20) & 0x7FFF;
            uint64_t v213 = (void *)(*(void *)a1[2] + 3256);
            goto LABEL_284;
          case 'h':
            unint64_t v212 = *(_WORD *)(a1[3] + 22) & 0x7FFF;
            uint64_t v213 = (void *)(*(void *)a1[2] + 3280);
            goto LABEL_284;
          case 'i':
            unint64_t v212 = *(_WORD *)(a1[3] + 16) & 0x7FFF;
            uint64_t v213 = (void *)(*(void *)a1[2] + 3304);
            goto LABEL_284;
          case 'j':
            unint64_t v212 = *(_WORD *)(a1[3] + 18) & 0x7FFF;
            uint64_t v213 = (void *)(*(void *)a1[2] + 3328);
            goto LABEL_284;
          case 'k':
            unint64_t v212 = *(unsigned __int16 *)(a1[3] + 52);
            uint64_t v213 = (void *)(*(void *)a1[2] + 3352);
            goto LABEL_284;
          case 'l':
            unint64_t v212 = *(_DWORD *)(a1[3] + 44) & 0x1FFFF;
            uint64_t v213 = (void *)(*(void *)a1[2] + 3376);
            goto LABEL_284;
          case 'm':
            unint64_t v212 = *(_DWORD *)(a1[3] + 40) & 0x1FFFF;
            uint64_t v213 = (void *)(*(void *)a1[2] + 3400);
            goto LABEL_284;
          case 'n':
            unint64_t v212 = *(_DWORD *)(a1[3] + 48) & 0x1FFFF;
            uint64_t v213 = (void *)(*(void *)a1[2] + 3424);
            goto LABEL_284;
          case 'o':
            unint64_t v212 = *(_WORD *)(a1[3] + 38) & 0x3FFF;
            uint64_t v213 = (void *)(*(void *)a1[2] + 3448);
            goto LABEL_284;
          case 'p':
            unint64_t v212 = *(_WORD *)(a1[3] + 36) & 0x3FFF;
            uint64_t v213 = (void *)(*(void *)a1[2] + 3472);
            goto LABEL_284;
          case 'q':
            unint64_t v212 = *(unsigned __int16 *)(a1[3] + 54);
            uint64_t v213 = (void *)(*(void *)a1[2] + 3496);
            goto LABEL_284;
          case 'r':
            unint64_t v212 = *(_DWORD *)(a1[3] + 24) & 0x1FFFF;
            uint64_t v213 = (void *)(*(void *)a1[2] + 3520);
            goto LABEL_284;
          case 's':
            unint64_t v212 = *(_DWORD *)(a1[3] + 28) & 0x1FFFF;
            uint64_t v213 = (void *)(*(void *)a1[2] + 3544);
LABEL_284:
            *(void *)(*v213 - 8) += v212;
            break;
          default:
            break;
        }
        --v210;
      }
      while (v210);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 'e':
            int v10 = *(void **)a1[2];
            unint64_t v11 = (unint64_t)*(unsigned int *)(a1[3] + 32) >> 17;
            uint64_t v12 = (unint64_t *)v10[401];
            unint64_t v13 = v10[402];
            if ((unint64_t)v12 >= v13)
            {
              unint64_t v87 = (unint64_t *)v10[400];
              uint64_t v88 = v12 - v87;
              if ((unint64_t)(v88 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v89 = v13 - (void)v87;
              unint64_t v90 = (uint64_t)(v13 - (void)v87) >> 2;
              if (v90 <= v88 + 1) {
                unint64_t v90 = v88 + 1;
              }
              if (v89 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v91 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v91 = v90;
              }
              if (v91)
              {
                unint64_t v92 = (char *)sub_5714((uint64_t)(v10 + 402), v91);
                uint64_t v12 = (unint64_t *)v10[401];
                unint64_t v87 = (unint64_t *)v10[400];
              }
              else
              {
                unint64_t v92 = 0;
              }
              uint64_t v177 = (unint64_t *)&v92[8 * v88];
              unint64_t *v177 = v11;
              unint64_t v14 = v177 + 1;
              while (v12 != v87)
              {
                unint64_t v178 = *--v12;
                *--uint64_t v177 = v178;
              }
              v10[400] = v177;
              v10[401] = v14;
              v10[402] = &v92[8 * v91];
              if (v87) {
                operator delete(v87);
              }
            }
            else
            {
              unint64_t *v12 = v11;
              unint64_t v14 = v12 + 1;
            }
            v10[401] = v14;
            break;
          case 'f':
            unint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_DWORD *)(a1[3] + 32) & 0x1FFFFLL;
            uint64_t v17 = (uint64_t *)v15[404];
            unint64_t v18 = v15[405];
            if ((unint64_t)v17 >= v18)
            {
              unint64_t v93 = (uint64_t *)v15[403];
              uint64_t v94 = v17 - v93;
              if ((unint64_t)(v94 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v95 = v18 - (void)v93;
              unint64_t v96 = (uint64_t)(v18 - (void)v93) >> 2;
              if (v96 <= v94 + 1) {
                unint64_t v96 = v94 + 1;
              }
              if (v95 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v97 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v97 = v96;
              }
              if (v97)
              {
                unint64_t v98 = (char *)sub_5714((uint64_t)(v15 + 405), v97);
                uint64_t v17 = (uint64_t *)v15[404];
                unint64_t v93 = (uint64_t *)v15[403];
              }
              else
              {
                unint64_t v98 = 0;
              }
              unint64_t v179 = (uint64_t *)&v98[8 * v94];
              uint64_t *v179 = v16;
              unint64_t v19 = v179 + 1;
              while (v17 != v93)
              {
                uint64_t v180 = *--v17;
                *--unint64_t v179 = v180;
              }
              v15[403] = v179;
              v15[404] = v19;
              v15[405] = &v98[8 * v97];
              if (v93) {
                operator delete(v93);
              }
            }
            else
            {
              *uint64_t v17 = v16;
              unint64_t v19 = v17 + 1;
            }
            v15[404] = v19;
            break;
          case 'g':
            uint64_t v20 = *(void **)a1[2];
            uint64_t v21 = *(_WORD *)(a1[3] + 20) & 0x7FFF;
            uint64_t v22 = (char *)v20[407];
            unint64_t v23 = v20[408];
            if ((unint64_t)v22 >= v23)
            {
              unint64_t v99 = (char *)v20[406];
              uint64_t v100 = (v22 - v99) >> 3;
              if ((unint64_t)(v100 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v101 = v23 - (void)v99;
              unint64_t v102 = (uint64_t)(v23 - (void)v99) >> 2;
              if (v102 <= v100 + 1) {
                unint64_t v102 = v100 + 1;
              }
              if (v101 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v103 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v103 = v102;
              }
              if (v103)
              {
                uint64_t v104 = (char *)sub_5714((uint64_t)(v20 + 408), v103);
                uint64_t v22 = (char *)v20[407];
                unint64_t v99 = (char *)v20[406];
              }
              else
              {
                uint64_t v104 = 0;
              }
              unint64_t v181 = &v104[8 * v100];
              *(void *)unint64_t v181 = v21;
              unint64_t v24 = v181 + 8;
              while (v22 != v99)
              {
                uint64_t v182 = *((void *)v22 - 1);
                v22 -= 8;
                *((void *)v181 - 1) = v182;
                v181 -= 8;
              }
              v20[406] = v181;
              v20[407] = v24;
              v20[408] = &v104[8 * v103];
              if (v99) {
                operator delete(v99);
              }
            }
            else
            {
              *(void *)uint64_t v22 = v21;
              unint64_t v24 = v22 + 8;
            }
            v20[407] = v24;
            break;
          case 'h':
            unint64_t v25 = *(void **)a1[2];
            uint64_t v26 = *(_WORD *)(a1[3] + 22) & 0x7FFF;
            uint64_t v27 = (char *)v25[410];
            unint64_t v28 = v25[411];
            if ((unint64_t)v27 >= v28)
            {
              unint64_t v105 = (char *)v25[409];
              uint64_t v106 = (v27 - v105) >> 3;
              if ((unint64_t)(v106 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v107 = v28 - (void)v105;
              unint64_t v108 = (uint64_t)(v28 - (void)v105) >> 2;
              if (v108 <= v106 + 1) {
                unint64_t v108 = v106 + 1;
              }
              if (v107 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v109 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v109 = v108;
              }
              if (v109)
              {
                uint64_t v110 = (char *)sub_5714((uint64_t)(v25 + 411), v109);
                uint64_t v27 = (char *)v25[410];
                unint64_t v105 = (char *)v25[409];
              }
              else
              {
                uint64_t v110 = 0;
              }
              uint64_t v183 = &v110[8 * v106];
              *(void *)uint64_t v183 = v26;
              unint64_t v29 = v183 + 8;
              while (v27 != v105)
              {
                uint64_t v184 = *((void *)v27 - 1);
                v27 -= 8;
                *((void *)v183 - 1) = v184;
                v183 -= 8;
              }
              v25[409] = v183;
              v25[410] = v29;
              v25[411] = &v110[8 * v109];
              if (v105) {
                operator delete(v105);
              }
            }
            else
            {
              *(void *)uint64_t v27 = v26;
              unint64_t v29 = v27 + 8;
            }
            v25[410] = v29;
            break;
          case 'i':
            unint64_t v30 = *(void **)a1[2];
            uint64_t v31 = *(_WORD *)(a1[3] + 16) & 0x7FFF;
            unint64_t v32 = (char *)v30[413];
            unint64_t v33 = v30[414];
            if ((unint64_t)v32 >= v33)
            {
              uint64_t v111 = (char *)v30[412];
              uint64_t v112 = (v32 - v111) >> 3;
              if ((unint64_t)(v112 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v113 = v33 - (void)v111;
              unint64_t v114 = (uint64_t)(v33 - (void)v111) >> 2;
              if (v114 <= v112 + 1) {
                unint64_t v114 = v112 + 1;
              }
              if (v113 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v115 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v115 = v114;
              }
              if (v115)
              {
                uint64_t v116 = (char *)sub_5714((uint64_t)(v30 + 414), v115);
                unint64_t v32 = (char *)v30[413];
                uint64_t v111 = (char *)v30[412];
              }
              else
              {
                uint64_t v116 = 0;
              }
              unint64_t v185 = &v116[8 * v112];
              *(void *)unint64_t v185 = v31;
              uint64_t v34 = v185 + 8;
              while (v32 != v111)
              {
                uint64_t v186 = *((void *)v32 - 1);
                v32 -= 8;
                *((void *)v185 - 1) = v186;
                v185 -= 8;
              }
              v30[412] = v185;
              v30[413] = v34;
              v30[414] = &v116[8 * v115];
              if (v111) {
                operator delete(v111);
              }
            }
            else
            {
              *(void *)unint64_t v32 = v31;
              uint64_t v34 = v32 + 8;
            }
            v30[413] = v34;
            break;
          case 'j':
            uint64_t v35 = *(void **)a1[2];
            uint64_t v36 = *(_WORD *)(a1[3] + 18) & 0x7FFF;
            uint64_t v37 = (char *)v35[416];
            unint64_t v38 = v35[417];
            if ((unint64_t)v37 >= v38)
            {
              unint64_t v117 = (char *)v35[415];
              uint64_t v118 = (v37 - v117) >> 3;
              if ((unint64_t)(v118 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v119 = v38 - (void)v117;
              unint64_t v120 = (uint64_t)(v38 - (void)v117) >> 2;
              if (v120 <= v118 + 1) {
                unint64_t v120 = v118 + 1;
              }
              if (v119 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v121 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v121 = v120;
              }
              if (v121)
              {
                uint64_t v122 = (char *)sub_5714((uint64_t)(v35 + 417), v121);
                uint64_t v37 = (char *)v35[416];
                unint64_t v117 = (char *)v35[415];
              }
              else
              {
                uint64_t v122 = 0;
              }
              unint64_t v187 = &v122[8 * v118];
              *(void *)unint64_t v187 = v36;
              unint64_t v39 = v187 + 8;
              while (v37 != v117)
              {
                uint64_t v188 = *((void *)v37 - 1);
                v37 -= 8;
                *((void *)v187 - 1) = v188;
                v187 -= 8;
              }
              v35[415] = v187;
              v35[416] = v39;
              v35[417] = &v122[8 * v121];
              if (v117) {
                operator delete(v117);
              }
            }
            else
            {
              *(void *)uint64_t v37 = v36;
              unint64_t v39 = v37 + 8;
            }
            v35[416] = v39;
            break;
          case 'k':
            uint64_t v40 = a1[2];
            uint64_t v41 = *(void **)v40;
            uint64_t v42 = *(unsigned __int16 *)(a1[3] + 52);
            uint64_t v43 = *(char **)(*(void *)v40 + 3352);
            unint64_t v44 = *(void *)(*(void *)v40 + 3360);
            if ((unint64_t)v43 >= v44)
            {
              unint64_t v123 = (char *)v41[418];
              uint64_t v124 = (v43 - v123) >> 3;
              if ((unint64_t)(v124 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v125 = v44 - (void)v123;
              unint64_t v126 = (uint64_t)(v44 - (void)v123) >> 2;
              if (v126 <= v124 + 1) {
                unint64_t v126 = v124 + 1;
              }
              if (v125 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v127 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v127 = v126;
              }
              if (v127)
              {
                unint64_t v128 = (char *)sub_5714((uint64_t)(v41 + 420), v127);
                uint64_t v43 = (char *)v41[419];
                unint64_t v123 = (char *)v41[418];
              }
              else
              {
                unint64_t v128 = 0;
              }
              uint64_t v189 = &v128[8 * v124];
              *(void *)uint64_t v189 = v42;
              unint64_t v45 = v189 + 8;
              while (v43 != v123)
              {
                uint64_t v190 = *((void *)v43 - 1);
                v43 -= 8;
                *((void *)v189 - 1) = v190;
                v189 -= 8;
              }
              v41[418] = v189;
              v41[419] = v45;
              v41[420] = &v128[8 * v127];
              if (v123) {
                operator delete(v123);
              }
            }
            else
            {
              *(void *)uint64_t v43 = v42;
              unint64_t v45 = v43 + 8;
            }
            v41[419] = v45;
            break;
          case 'l':
            uint64_t v46 = *(void **)a1[2];
            uint64_t v47 = *(_DWORD *)(a1[3] + 44) & 0x1FFFFLL;
            unint64_t v48 = (uint64_t *)v46[422];
            unint64_t v49 = v46[423];
            if ((unint64_t)v48 >= v49)
            {
              unint64_t v129 = (uint64_t *)v46[421];
              uint64_t v130 = v48 - v129;
              if ((unint64_t)(v130 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v131 = v49 - (void)v129;
              unint64_t v132 = (uint64_t)(v49 - (void)v129) >> 2;
              if (v132 <= v130 + 1) {
                unint64_t v132 = v130 + 1;
              }
              if (v131 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v133 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v133 = v132;
              }
              if (v133)
              {
                unint64_t v134 = (char *)sub_5714((uint64_t)(v46 + 423), v133);
                unint64_t v48 = (uint64_t *)v46[422];
                unint64_t v129 = (uint64_t *)v46[421];
              }
              else
              {
                unint64_t v134 = 0;
              }
              unint64_t v191 = (uint64_t *)&v134[8 * v130];
              *unint64_t v191 = v47;
              unint64_t v50 = v191 + 1;
              while (v48 != v129)
              {
                uint64_t v192 = *--v48;
                *--unint64_t v191 = v192;
              }
              v46[421] = v191;
              v46[422] = v50;
              v46[423] = &v134[8 * v133];
              if (v129) {
                operator delete(v129);
              }
            }
            else
            {
              *unint64_t v48 = v47;
              unint64_t v50 = v48 + 1;
            }
            v46[422] = v50;
            break;
          case 'm':
            unint64_t v51 = *(void **)a1[2];
            uint64_t v52 = *(_DWORD *)(a1[3] + 40) & 0x1FFFFLL;
            uint64_t v53 = (uint64_t *)v51[425];
            unint64_t v54 = v51[426];
            if ((unint64_t)v53 >= v54)
            {
              unint64_t v135 = (uint64_t *)v51[424];
              uint64_t v136 = v53 - v135;
              if ((unint64_t)(v136 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v137 = v54 - (void)v135;
              unint64_t v138 = (uint64_t)(v54 - (void)v135) >> 2;
              if (v138 <= v136 + 1) {
                unint64_t v138 = v136 + 1;
              }
              if (v137 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v139 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v139 = v138;
              }
              if (v139)
              {
                unint64_t v140 = (char *)sub_5714((uint64_t)(v51 + 426), v139);
                uint64_t v53 = (uint64_t *)v51[425];
                unint64_t v135 = (uint64_t *)v51[424];
              }
              else
              {
                unint64_t v140 = 0;
              }
              unint64_t v193 = (uint64_t *)&v140[8 * v136];
              *unint64_t v193 = v52;
              unint64_t v55 = v193 + 1;
              while (v53 != v135)
              {
                uint64_t v194 = *--v53;
                *--unint64_t v193 = v194;
              }
              v51[424] = v193;
              v51[425] = v55;
              v51[426] = &v140[8 * v139];
              if (v135) {
                operator delete(v135);
              }
            }
            else
            {
              *uint64_t v53 = v52;
              unint64_t v55 = v53 + 1;
            }
            v51[425] = v55;
            break;
          case 'n':
            unint64_t v56 = *(void **)a1[2];
            uint64_t v57 = *(_DWORD *)(a1[3] + 48) & 0x1FFFFLL;
            unint64_t v58 = (uint64_t *)v56[428];
            unint64_t v59 = v56[429];
            if ((unint64_t)v58 >= v59)
            {
              uint64_t v141 = (uint64_t *)v56[427];
              uint64_t v142 = v58 - v141;
              if ((unint64_t)(v142 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v143 = v59 - (void)v141;
              unint64_t v144 = (uint64_t)(v59 - (void)v141) >> 2;
              if (v144 <= v142 + 1) {
                unint64_t v144 = v142 + 1;
              }
              if (v143 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v145 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v145 = v144;
              }
              if (v145)
              {
                unint64_t v146 = (char *)sub_5714((uint64_t)(v56 + 429), v145);
                unint64_t v58 = (uint64_t *)v56[428];
                uint64_t v141 = (uint64_t *)v56[427];
              }
              else
              {
                unint64_t v146 = 0;
              }
              uint64_t v195 = (uint64_t *)&v146[8 * v142];
              *uint64_t v195 = v57;
              uint64_t v60 = v195 + 1;
              while (v58 != v141)
              {
                uint64_t v196 = *--v58;
                *--uint64_t v195 = v196;
              }
              v56[427] = v195;
              v56[428] = v60;
              v56[429] = &v146[8 * v145];
              if (v141) {
                operator delete(v141);
              }
            }
            else
            {
              uint64_t *v58 = v57;
              uint64_t v60 = v58 + 1;
            }
            v56[428] = v60;
            break;
          case 'o':
            unint64_t v61 = *(void **)a1[2];
            uint64_t v62 = *(_WORD *)(a1[3] + 38) & 0x3FFF;
            unint64_t v63 = (char *)v61[431];
            unint64_t v64 = v61[432];
            if ((unint64_t)v63 >= v64)
            {
              unint64_t v147 = (char *)v61[430];
              uint64_t v148 = (v63 - v147) >> 3;
              if ((unint64_t)(v148 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v149 = v64 - (void)v147;
              unint64_t v150 = (uint64_t)(v64 - (void)v147) >> 2;
              if (v150 <= v148 + 1) {
                unint64_t v150 = v148 + 1;
              }
              if (v149 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v151 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v151 = v150;
              }
              if (v151)
              {
                unint64_t v152 = (char *)sub_5714((uint64_t)(v61 + 432), v151);
                unint64_t v63 = (char *)v61[431];
                unint64_t v147 = (char *)v61[430];
              }
              else
              {
                unint64_t v152 = 0;
              }
              unint64_t v197 = &v152[8 * v148];
              *(void *)unint64_t v197 = v62;
              uint64_t v65 = v197 + 8;
              while (v63 != v147)
              {
                uint64_t v198 = *((void *)v63 - 1);
                v63 -= 8;
                *((void *)v197 - 1) = v198;
                v197 -= 8;
              }
              v61[430] = v197;
              v61[431] = v65;
              v61[432] = &v152[8 * v151];
              if (v147) {
                operator delete(v147);
              }
            }
            else
            {
              *(void *)unint64_t v63 = v62;
              uint64_t v65 = v63 + 8;
            }
            v61[431] = v65;
            break;
          case 'p':
            uint64_t v66 = *(void **)a1[2];
            uint64_t v67 = *(_WORD *)(a1[3] + 36) & 0x3FFF;
            unint64_t v68 = (char *)v66[434];
            unint64_t v69 = v66[435];
            if ((unint64_t)v68 >= v69)
            {
              unint64_t v153 = (char *)v66[433];
              uint64_t v154 = (v68 - v153) >> 3;
              if ((unint64_t)(v154 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v155 = v69 - (void)v153;
              unint64_t v156 = (uint64_t)(v69 - (void)v153) >> 2;
              if (v156 <= v154 + 1) {
                unint64_t v156 = v154 + 1;
              }
              if (v155 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v157 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v157 = v156;
              }
              if (v157)
              {
                unint64_t v158 = (char *)sub_5714((uint64_t)(v66 + 435), v157);
                unint64_t v68 = (char *)v66[434];
                unint64_t v153 = (char *)v66[433];
              }
              else
              {
                unint64_t v158 = 0;
              }
              unint64_t v199 = &v158[8 * v154];
              *(void *)unint64_t v199 = v67;
              uint64_t v70 = v199 + 8;
              while (v68 != v153)
              {
                uint64_t v200 = *((void *)v68 - 1);
                v68 -= 8;
                *((void *)v199 - 1) = v200;
                v199 -= 8;
              }
              v66[433] = v199;
              v66[434] = v70;
              v66[435] = &v158[8 * v157];
              if (v153) {
                operator delete(v153);
              }
            }
            else
            {
              *(void *)unint64_t v68 = v67;
              uint64_t v70 = v68 + 8;
            }
            v66[434] = v70;
            break;
          case 'q':
            uint64_t v71 = a1[2];
            uint64_t v72 = *(void **)v71;
            uint64_t v73 = *(unsigned __int16 *)(a1[3] + 54);
            unint64_t v74 = *(char **)(*(void *)v71 + 3496);
            unint64_t v75 = *(void *)(*(void *)v71 + 3504);
            if ((unint64_t)v74 >= v75)
            {
              unint64_t v159 = (char *)v72[436];
              uint64_t v160 = (v74 - v159) >> 3;
              if ((unint64_t)(v160 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v161 = v75 - (void)v159;
              unint64_t v162 = (uint64_t)(v75 - (void)v159) >> 2;
              if (v162 <= v160 + 1) {
                unint64_t v162 = v160 + 1;
              }
              if (v161 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v163 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v163 = v162;
              }
              if (v163)
              {
                unint64_t v164 = (char *)sub_5714((uint64_t)(v72 + 438), v163);
                unint64_t v74 = (char *)v72[437];
                unint64_t v159 = (char *)v72[436];
              }
              else
              {
                unint64_t v164 = 0;
              }
              uint64_t v201 = &v164[8 * v160];
              *(void *)uint64_t v201 = v73;
              uint64_t v76 = v201 + 8;
              while (v74 != v159)
              {
                uint64_t v202 = *((void *)v74 - 1);
                v74 -= 8;
                *((void *)v201 - 1) = v202;
                v201 -= 8;
              }
              v72[436] = v201;
              v72[437] = v76;
              v72[438] = &v164[8 * v163];
              if (v159) {
                operator delete(v159);
              }
            }
            else
            {
              *(void *)unint64_t v74 = v73;
              uint64_t v76 = v74 + 8;
            }
            v72[437] = v76;
            break;
          case 'r':
            uint64_t v77 = *(void **)a1[2];
            uint64_t v78 = *(_DWORD *)(a1[3] + 24) & 0x1FFFFLL;
            unint64_t v79 = (uint64_t *)v77[440];
            unint64_t v80 = v77[441];
            if ((unint64_t)v79 >= v80)
            {
              unint64_t v165 = (uint64_t *)v77[439];
              uint64_t v166 = v79 - v165;
              if ((unint64_t)(v166 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v167 = v80 - (void)v165;
              unint64_t v168 = (uint64_t)(v80 - (void)v165) >> 2;
              if (v168 <= v166 + 1) {
                unint64_t v168 = v166 + 1;
              }
              if (v167 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v169 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v169 = v168;
              }
              if (v169)
              {
                unint64_t v170 = (char *)sub_5714((uint64_t)(v77 + 441), v169);
                unint64_t v79 = (uint64_t *)v77[440];
                unint64_t v165 = (uint64_t *)v77[439];
              }
              else
              {
                unint64_t v170 = 0;
              }
              unint64_t v203 = (uint64_t *)&v170[8 * v166];
              uint64_t *v203 = v78;
              unint64_t v81 = v203 + 1;
              while (v79 != v165)
              {
                uint64_t v204 = *--v79;
                *--unint64_t v203 = v204;
              }
              v77[439] = v203;
              v77[440] = v81;
              v77[441] = &v170[8 * v169];
              if (v165) {
                operator delete(v165);
              }
            }
            else
            {
              uint64_t *v79 = v78;
              unint64_t v81 = v79 + 1;
            }
            v77[440] = v81;
            break;
          case 's':
            unint64_t v82 = *(void **)a1[2];
            uint64_t v83 = *(_DWORD *)(a1[3] + 28) & 0x1FFFFLL;
            uint64_t v84 = (uint64_t *)v82[443];
            unint64_t v85 = v82[444];
            if ((unint64_t)v84 >= v85)
            {
              uint64_t v171 = (uint64_t *)v82[442];
              uint64_t v172 = v84 - v171;
              if ((unint64_t)(v172 + 1) >> 61) {
LABEL_288:
              }
                sub_566C();
              unint64_t v173 = v85 - (void)v171;
              unint64_t v174 = (uint64_t)(v85 - (void)v171) >> 2;
              if (v174 <= v172 + 1) {
                unint64_t v174 = v172 + 1;
              }
              if (v173 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v175 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v175 = v174;
              }
              if (v175)
              {
                unint64_t v176 = (char *)sub_5714((uint64_t)(v82 + 444), v175);
                uint64_t v84 = (uint64_t *)v82[443];
                uint64_t v171 = (uint64_t *)v82[442];
              }
              else
              {
                unint64_t v176 = 0;
              }
              unint64_t v205 = (uint64_t *)&v176[8 * v172];
              *unint64_t v205 = v83;
              unint64_t v86 = v205 + 1;
              while (v84 != v171)
              {
                uint64_t v206 = *--v84;
                *--unint64_t v205 = v206;
              }
              v82[442] = v205;
              v82[443] = v86;
              v82[444] = &v176[8 * v175];
              if (v171) {
                operator delete(v171);
              }
            }
            else
            {
              uint64_t *v84 = v83;
              unint64_t v86 = v84 + 1;
            }
            v82[443] = v86;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_60060(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    unint64_t v63 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v62 = *v63;
    uint64_t v64 = (char *)v63[1] - (char *)*v63;
    if (v64)
    {
      unint64_t v65 = v64 >> 2;
      if (v65 <= 1) {
        unint64_t v65 = 1;
      }
      do
      {
        int v66 = *v62++;
        switch(v66)
        {
          case 't':
            uint64_t v67 = *(_DWORD *)(a1[3] + 24) & 0x7FFFF;
            unint64_t v68 = (void *)(*(void *)a1[2] + 3568);
            goto LABEL_86;
          case 'u':
            uint64_t v67 = *(_DWORD *)(a1[3] + 28) & 0x3FFFFF;
            unint64_t v68 = (void *)(*(void *)a1[2] + 3592);
            goto LABEL_86;
          case 'v':
            uint64_t v67 = *(_DWORD *)(a1[3] + 20) & 0x3FFFFF;
            unint64_t v68 = (void *)(*(void *)a1[2] + 3616);
            goto LABEL_86;
          case 'w':
            uint64_t v67 = *(_DWORD *)(a1[3] + 16) & 0x3FFFFF;
            unint64_t v68 = (void *)(*(void *)a1[2] + 3640);
LABEL_86:
            *(void *)(*v68 - 8) += v67;
            break;
          default:
            break;
        }
        --v65;
      }
      while (v65);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 't':
            int v10 = *(void **)a1[2];
            uint64_t v11 = *(_DWORD *)(a1[3] + 24) & 0x7FFFFLL;
            uint64_t v12 = (uint64_t *)v10[446];
            unint64_t v13 = v10[447];
            if ((unint64_t)v12 >= v13)
            {
              unint64_t v30 = (uint64_t *)v10[445];
              uint64_t v31 = v12 - v30;
              if ((unint64_t)(v31 + 1) >> 61) {
                goto LABEL_90;
              }
              unint64_t v32 = v13 - (void)v30;
              unint64_t v33 = (uint64_t)(v13 - (void)v30) >> 2;
              if (v33 <= v31 + 1) {
                unint64_t v33 = v31 + 1;
              }
              if (v32 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v34 = v33;
              }
              if (v34)
              {
                uint64_t v35 = (char *)sub_5714((uint64_t)(v10 + 447), v34);
                uint64_t v12 = (uint64_t *)v10[446];
                unint64_t v30 = (uint64_t *)v10[445];
              }
              else
              {
                uint64_t v35 = 0;
              }
              unint64_t v54 = (uint64_t *)&v35[8 * v31];
              uint64_t *v54 = v11;
              unint64_t v14 = v54 + 1;
              while (v12 != v30)
              {
                uint64_t v55 = *--v12;
                *--unint64_t v54 = v55;
              }
              v10[445] = v54;
              v10[446] = v14;
              v10[447] = &v35[8 * v34];
              if (v30) {
                operator delete(v30);
              }
            }
            else
            {
              uint64_t *v12 = v11;
              unint64_t v14 = v12 + 1;
            }
            v10[446] = v14;
            break;
          case 'u':
            unint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_DWORD *)(a1[3] + 28) & 0x3FFFFFLL;
            uint64_t v17 = (uint64_t *)v15[449];
            unint64_t v18 = v15[450];
            if ((unint64_t)v17 >= v18)
            {
              uint64_t v36 = (uint64_t *)v15[448];
              uint64_t v37 = v17 - v36;
              if ((unint64_t)(v37 + 1) >> 61) {
                goto LABEL_90;
              }
              unint64_t v38 = v18 - (void)v36;
              unint64_t v39 = (uint64_t)(v18 - (void)v36) >> 2;
              if (v39 <= v37 + 1) {
                unint64_t v39 = v37 + 1;
              }
              if (v38 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v40 = v39;
              }
              if (v40)
              {
                uint64_t v41 = (char *)sub_5714((uint64_t)(v15 + 450), v40);
                uint64_t v17 = (uint64_t *)v15[449];
                uint64_t v36 = (uint64_t *)v15[448];
              }
              else
              {
                uint64_t v41 = 0;
              }
              unint64_t v56 = (uint64_t *)&v41[8 * v37];
              uint64_t *v56 = v16;
              unint64_t v19 = v56 + 1;
              while (v17 != v36)
              {
                uint64_t v57 = *--v17;
                *--unint64_t v56 = v57;
              }
              v15[448] = v56;
              v15[449] = v19;
              v15[450] = &v41[8 * v40];
              if (v36) {
                operator delete(v36);
              }
            }
            else
            {
              *uint64_t v17 = v16;
              unint64_t v19 = v17 + 1;
            }
            v15[449] = v19;
            break;
          case 'v':
            uint64_t v20 = *(void **)a1[2];
            uint64_t v21 = *(_DWORD *)(a1[3] + 20) & 0x3FFFFFLL;
            uint64_t v22 = (uint64_t *)v20[452];
            unint64_t v23 = v20[453];
            if ((unint64_t)v22 >= v23)
            {
              uint64_t v42 = (uint64_t *)v20[451];
              uint64_t v43 = v22 - v42;
              if ((unint64_t)(v43 + 1) >> 61) {
                goto LABEL_90;
              }
              unint64_t v44 = v23 - (void)v42;
              unint64_t v45 = (uint64_t)(v23 - (void)v42) >> 2;
              if (v45 <= v43 + 1) {
                unint64_t v45 = v43 + 1;
              }
              if (v44 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v46 = v45;
              }
              if (v46)
              {
                uint64_t v47 = (char *)sub_5714((uint64_t)(v20 + 453), v46);
                uint64_t v22 = (uint64_t *)v20[452];
                uint64_t v42 = (uint64_t *)v20[451];
              }
              else
              {
                uint64_t v47 = 0;
              }
              unint64_t v58 = (uint64_t *)&v47[8 * v43];
              uint64_t *v58 = v21;
              unint64_t v24 = v58 + 1;
              while (v22 != v42)
              {
                uint64_t v59 = *--v22;
                *--unint64_t v58 = v59;
              }
              v20[451] = v58;
              v20[452] = v24;
              v20[453] = &v47[8 * v46];
              if (v42) {
                operator delete(v42);
              }
            }
            else
            {
              uint64_t *v22 = v21;
              unint64_t v24 = v22 + 1;
            }
            v20[452] = v24;
            break;
          case 'w':
            unint64_t v25 = *(void **)a1[2];
            uint64_t v26 = *(_DWORD *)(a1[3] + 16) & 0x3FFFFFLL;
            uint64_t v27 = (uint64_t *)v25[455];
            unint64_t v28 = v25[456];
            if ((unint64_t)v27 >= v28)
            {
              unint64_t v48 = (uint64_t *)v25[454];
              uint64_t v49 = v27 - v48;
              if ((unint64_t)(v49 + 1) >> 61) {
LABEL_90:
              }
                sub_566C();
              unint64_t v50 = v28 - (void)v48;
              unint64_t v51 = (uint64_t)(v28 - (void)v48) >> 2;
              if (v51 <= v49 + 1) {
                unint64_t v51 = v49 + 1;
              }
              if (v50 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v52 = v51;
              }
              if (v52)
              {
                uint64_t v53 = (char *)sub_5714((uint64_t)(v25 + 456), v52);
                uint64_t v27 = (uint64_t *)v25[455];
                unint64_t v48 = (uint64_t *)v25[454];
              }
              else
              {
                uint64_t v53 = 0;
              }
              uint64_t v60 = (uint64_t *)&v53[8 * v49];
              *uint64_t v60 = v26;
              unint64_t v29 = v60 + 1;
              while (v27 != v48)
              {
                uint64_t v61 = *--v27;
                *--uint64_t v60 = v61;
              }
              v25[454] = v60;
              v25[455] = v29;
              v25[456] = &v53[8 * v52];
              if (v48) {
                operator delete(v48);
              }
            }
            else
            {
              *uint64_t v27 = v26;
              unint64_t v29 = v27 + 1;
            }
            v25[455] = v29;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_60530(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    uint64_t v141 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    unint64_t v140 = *v141;
    uint64_t v142 = (char *)v141[1] - (char *)*v141;
    if (v142)
    {
      unint64_t v143 = v142 >> 2;
      if (v143 <= 1) {
        unint64_t v143 = 1;
      }
      do
      {
        int v144 = *v140++;
        switch(v144)
        {
          case 148:
            unint64_t v145 = *(_WORD *)(a1[3] + 26) & 0x1FFF;
            unint64_t v146 = (void *)(*(void *)a1[2] + 4336);
            goto LABEL_194;
          case 149:
            unint64_t v145 = *(_DWORD *)(a1[3] + 32) & 0x3FFFF;
            unint64_t v146 = (void *)(*(void *)a1[2] + 4360);
            goto LABEL_194;
          case 150:
            unint64_t v145 = *(_WORD *)(a1[3] + 24) & 0x1FFF;
            unint64_t v146 = (void *)(*(void *)a1[2] + 4384);
            goto LABEL_194;
          case 151:
            unint64_t v145 = ((unint64_t)*(unsigned int *)(a1[3] + 28) >> 13) & 0x3FFFF;
            unint64_t v146 = (void *)(*(void *)a1[2] + 4408);
            goto LABEL_194;
          case 152:
            unint64_t v145 = *(_DWORD *)(a1[3] + 28) & 0x1FFF;
            unint64_t v146 = (void *)(*(void *)a1[2] + 4432);
            goto LABEL_194;
          case 153:
            unint64_t v145 = *(_DWORD *)(a1[3] + 36) & 0x3FFFF;
            unint64_t v146 = (void *)(*(void *)a1[2] + 4456);
            goto LABEL_194;
          case 154:
            unint64_t v145 = *(_WORD *)(a1[3] + 20) & 0x3FFF;
            unint64_t v146 = (void *)(*(void *)a1[2] + 4480);
            goto LABEL_194;
          case 155:
            unint64_t v145 = *(_WORD *)(a1[3] + 16) & 0x3FFF;
            unint64_t v146 = (void *)(*(void *)a1[2] + 4504);
            goto LABEL_194;
          case 156:
            unint64_t v145 = *(_WORD *)(a1[3] + 22) & 0x3FFF;
            unint64_t v146 = (void *)(*(void *)a1[2] + 4528);
            goto LABEL_194;
          case 157:
            unint64_t v145 = *(_WORD *)(a1[3] + 18) & 0x3FFF;
            unint64_t v146 = (void *)(*(void *)a1[2] + 4552);
LABEL_194:
            *(void *)(*v146 - 8) += v145;
            break;
          default:
            break;
        }
        --v143;
      }
      while (v143);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0x94:
            int v10 = *(void **)a1[2];
            uint64_t v11 = *(_WORD *)(a1[3] + 26) & 0x1FFF;
            uint64_t v12 = (char *)v10[542];
            unint64_t v13 = v10[543];
            if ((unint64_t)v12 >= v13)
            {
              uint64_t v60 = (char *)v10[541];
              uint64_t v61 = (v12 - v60) >> 3;
              if ((unint64_t)(v61 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v62 = v13 - (void)v60;
              unint64_t v63 = (uint64_t)(v13 - (void)v60) >> 2;
              if (v63 <= v61 + 1) {
                unint64_t v63 = v61 + 1;
              }
              if (v62 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v64 = v63;
              }
              if (v64)
              {
                unint64_t v65 = (char *)sub_5714((uint64_t)(v10 + 543), v64);
                uint64_t v12 = (char *)v10[542];
                uint64_t v60 = (char *)v10[541];
              }
              else
              {
                unint64_t v65 = 0;
              }
              unint64_t v120 = &v65[8 * v61];
              *(void *)unint64_t v120 = v11;
              unint64_t v14 = v120 + 8;
              while (v12 != v60)
              {
                uint64_t v121 = *((void *)v12 - 1);
                v12 -= 8;
                *((void *)v120 - 1) = v121;
                v120 -= 8;
              }
              v10[541] = v120;
              v10[542] = v14;
              v10[543] = &v65[8 * v64];
              if (v60) {
                operator delete(v60);
              }
            }
            else
            {
              *(void *)uint64_t v12 = v11;
              unint64_t v14 = v12 + 8;
            }
            v10[542] = v14;
            break;
          case 0x95:
            unint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_DWORD *)(a1[3] + 32) & 0x3FFFFLL;
            uint64_t v17 = (uint64_t *)v15[545];
            unint64_t v18 = v15[546];
            if ((unint64_t)v17 >= v18)
            {
              int v66 = (uint64_t *)v15[544];
              uint64_t v67 = v17 - v66;
              if ((unint64_t)(v67 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v68 = v18 - (void)v66;
              unint64_t v69 = (uint64_t)(v18 - (void)v66) >> 2;
              if (v69 <= v67 + 1) {
                unint64_t v69 = v67 + 1;
              }
              if (v68 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v70 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v70 = v69;
              }
              if (v70)
              {
                uint64_t v71 = (char *)sub_5714((uint64_t)(v15 + 546), v70);
                uint64_t v17 = (uint64_t *)v15[545];
                int v66 = (uint64_t *)v15[544];
              }
              else
              {
                uint64_t v71 = 0;
              }
              uint64_t v122 = (uint64_t *)&v71[8 * v67];
              *uint64_t v122 = v16;
              unint64_t v19 = v122 + 1;
              while (v17 != v66)
              {
                uint64_t v123 = *--v17;
                *--uint64_t v122 = v123;
              }
              v15[544] = v122;
              v15[545] = v19;
              v15[546] = &v71[8 * v70];
              if (v66) {
                operator delete(v66);
              }
            }
            else
            {
              *uint64_t v17 = v16;
              unint64_t v19 = v17 + 1;
            }
            v15[545] = v19;
            break;
          case 0x96:
            uint64_t v20 = *(void **)a1[2];
            uint64_t v21 = *(_WORD *)(a1[3] + 24) & 0x1FFF;
            uint64_t v22 = (char *)v20[548];
            unint64_t v23 = v20[549];
            if ((unint64_t)v22 >= v23)
            {
              uint64_t v72 = (char *)v20[547];
              uint64_t v73 = (v22 - v72) >> 3;
              if ((unint64_t)(v73 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v74 = v23 - (void)v72;
              unint64_t v75 = (uint64_t)(v23 - (void)v72) >> 2;
              if (v75 <= v73 + 1) {
                unint64_t v75 = v73 + 1;
              }
              if (v74 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v76 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v76 = v75;
              }
              if (v76)
              {
                uint64_t v77 = (char *)sub_5714((uint64_t)(v20 + 549), v76);
                uint64_t v22 = (char *)v20[548];
                uint64_t v72 = (char *)v20[547];
              }
              else
              {
                uint64_t v77 = 0;
              }
              uint64_t v124 = &v77[8 * v73];
              *(void *)uint64_t v124 = v21;
              unint64_t v24 = v124 + 8;
              while (v22 != v72)
              {
                uint64_t v125 = *((void *)v22 - 1);
                v22 -= 8;
                *((void *)v124 - 1) = v125;
                v124 -= 8;
              }
              v20[547] = v124;
              v20[548] = v24;
              v20[549] = &v77[8 * v76];
              if (v72) {
                operator delete(v72);
              }
            }
            else
            {
              *(void *)uint64_t v22 = v21;
              unint64_t v24 = v22 + 8;
            }
            v20[548] = v24;
            break;
          case 0x97:
            unint64_t v25 = *(void **)a1[2];
            unint64_t v26 = ((unint64_t)*(unsigned int *)(a1[3] + 28) >> 13) & 0x3FFFF;
            uint64_t v27 = (unint64_t *)v25[551];
            unint64_t v28 = v25[552];
            if ((unint64_t)v27 >= v28)
            {
              uint64_t v78 = (unint64_t *)v25[550];
              uint64_t v79 = v27 - v78;
              if ((unint64_t)(v79 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v80 = v28 - (void)v78;
              unint64_t v81 = (uint64_t)(v28 - (void)v78) >> 2;
              if (v81 <= v79 + 1) {
                unint64_t v81 = v79 + 1;
              }
              if (v80 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v82 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v82 = v81;
              }
              if (v82)
              {
                uint64_t v83 = (char *)sub_5714((uint64_t)(v25 + 552), v82);
                uint64_t v27 = (unint64_t *)v25[551];
                uint64_t v78 = (unint64_t *)v25[550];
              }
              else
              {
                uint64_t v83 = 0;
              }
              unint64_t v126 = (unint64_t *)&v83[8 * v79];
              unint64_t *v126 = v26;
              unint64_t v29 = v126 + 1;
              while (v27 != v78)
              {
                unint64_t v127 = *--v27;
                *--unint64_t v126 = v127;
              }
              v25[550] = v126;
              v25[551] = v29;
              v25[552] = &v83[8 * v82];
              if (v78) {
                operator delete(v78);
              }
            }
            else
            {
              *uint64_t v27 = v26;
              unint64_t v29 = v27 + 1;
            }
            v25[551] = v29;
            break;
          case 0x98:
            unint64_t v30 = *(void **)a1[2];
            uint64_t v31 = *(_DWORD *)(a1[3] + 28) & 0x1FFFLL;
            unint64_t v32 = (uint64_t *)v30[554];
            unint64_t v33 = v30[555];
            if ((unint64_t)v32 >= v33)
            {
              uint64_t v84 = (uint64_t *)v30[553];
              uint64_t v85 = v32 - v84;
              if ((unint64_t)(v85 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v86 = v33 - (void)v84;
              unint64_t v87 = (uint64_t)(v33 - (void)v84) >> 2;
              if (v87 <= v85 + 1) {
                unint64_t v87 = v85 + 1;
              }
              if (v86 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v88 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v88 = v87;
              }
              if (v88)
              {
                unint64_t v89 = (char *)sub_5714((uint64_t)(v30 + 555), v88);
                unint64_t v32 = (uint64_t *)v30[554];
                uint64_t v84 = (uint64_t *)v30[553];
              }
              else
              {
                unint64_t v89 = 0;
              }
              unint64_t v128 = (uint64_t *)&v89[8 * v85];
              *unint64_t v128 = v31;
              unint64_t v34 = v128 + 1;
              while (v32 != v84)
              {
                uint64_t v129 = *--v32;
                *--unint64_t v128 = v129;
              }
              v30[553] = v128;
              v30[554] = v34;
              v30[555] = &v89[8 * v88];
              if (v84) {
                operator delete(v84);
              }
            }
            else
            {
              *unint64_t v32 = v31;
              unint64_t v34 = v32 + 1;
            }
            v30[554] = v34;
            break;
          case 0x99:
            uint64_t v35 = *(void **)a1[2];
            uint64_t v36 = *(_DWORD *)(a1[3] + 36) & 0x3FFFFLL;
            uint64_t v37 = (uint64_t *)v35[557];
            unint64_t v38 = v35[558];
            if ((unint64_t)v37 >= v38)
            {
              unint64_t v90 = (uint64_t *)v35[556];
              uint64_t v91 = v37 - v90;
              if ((unint64_t)(v91 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v92 = v38 - (void)v90;
              unint64_t v93 = (uint64_t)(v38 - (void)v90) >> 2;
              if (v93 <= v91 + 1) {
                unint64_t v93 = v91 + 1;
              }
              if (v92 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v94 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v94 = v93;
              }
              if (v94)
              {
                unint64_t v95 = (char *)sub_5714((uint64_t)(v35 + 558), v94);
                uint64_t v37 = (uint64_t *)v35[557];
                unint64_t v90 = (uint64_t *)v35[556];
              }
              else
              {
                unint64_t v95 = 0;
              }
              uint64_t v130 = (uint64_t *)&v95[8 * v91];
              *uint64_t v130 = v36;
              unint64_t v39 = v130 + 1;
              while (v37 != v90)
              {
                uint64_t v131 = *--v37;
                *--uint64_t v130 = v131;
              }
              v35[556] = v130;
              v35[557] = v39;
              v35[558] = &v95[8 * v94];
              if (v90) {
                operator delete(v90);
              }
            }
            else
            {
              *uint64_t v37 = v36;
              unint64_t v39 = v37 + 1;
            }
            v35[557] = v39;
            break;
          case 0x9A:
            unint64_t v40 = *(void **)a1[2];
            uint64_t v41 = *(_WORD *)(a1[3] + 20) & 0x3FFF;
            uint64_t v42 = (char *)v40[560];
            unint64_t v43 = v40[561];
            if ((unint64_t)v42 >= v43)
            {
              unint64_t v96 = (char *)v40[559];
              uint64_t v97 = (v42 - v96) >> 3;
              if ((unint64_t)(v97 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v98 = v43 - (void)v96;
              unint64_t v99 = (uint64_t)(v43 - (void)v96) >> 2;
              if (v99 <= v97 + 1) {
                unint64_t v99 = v97 + 1;
              }
              if (v98 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v100 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v100 = v99;
              }
              if (v100)
              {
                unint64_t v101 = (char *)sub_5714((uint64_t)(v40 + 561), v100);
                uint64_t v42 = (char *)v40[560];
                unint64_t v96 = (char *)v40[559];
              }
              else
              {
                unint64_t v101 = 0;
              }
              unint64_t v132 = &v101[8 * v97];
              *(void *)unint64_t v132 = v41;
              unint64_t v44 = v132 + 8;
              while (v42 != v96)
              {
                uint64_t v133 = *((void *)v42 - 1);
                v42 -= 8;
                *((void *)v132 - 1) = v133;
                v132 -= 8;
              }
              v40[559] = v132;
              v40[560] = v44;
              v40[561] = &v101[8 * v100];
              if (v96) {
                operator delete(v96);
              }
            }
            else
            {
              *(void *)uint64_t v42 = v41;
              unint64_t v44 = v42 + 8;
            }
            v40[560] = v44;
            break;
          case 0x9B:
            unint64_t v45 = *(void **)a1[2];
            uint64_t v46 = *(_WORD *)(a1[3] + 16) & 0x3FFF;
            uint64_t v47 = (char *)v45[563];
            unint64_t v48 = v45[564];
            if ((unint64_t)v47 >= v48)
            {
              unint64_t v102 = (char *)v45[562];
              uint64_t v103 = (v47 - v102) >> 3;
              if ((unint64_t)(v103 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v104 = v48 - (void)v102;
              unint64_t v105 = (uint64_t)(v48 - (void)v102) >> 2;
              if (v105 <= v103 + 1) {
                unint64_t v105 = v103 + 1;
              }
              if (v104 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v106 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v106 = v105;
              }
              if (v106)
              {
                unint64_t v107 = (char *)sub_5714((uint64_t)(v45 + 564), v106);
                uint64_t v47 = (char *)v45[563];
                unint64_t v102 = (char *)v45[562];
              }
              else
              {
                unint64_t v107 = 0;
              }
              unint64_t v134 = &v107[8 * v103];
              *(void *)unint64_t v134 = v46;
              uint64_t v49 = v134 + 8;
              while (v47 != v102)
              {
                uint64_t v135 = *((void *)v47 - 1);
                v47 -= 8;
                *((void *)v134 - 1) = v135;
                v134 -= 8;
              }
              v45[562] = v134;
              v45[563] = v49;
              v45[564] = &v107[8 * v106];
              if (v102) {
                operator delete(v102);
              }
            }
            else
            {
              *(void *)uint64_t v47 = v46;
              uint64_t v49 = v47 + 8;
            }
            v45[563] = v49;
            break;
          case 0x9C:
            unint64_t v50 = *(void **)a1[2];
            uint64_t v51 = *(_WORD *)(a1[3] + 22) & 0x3FFF;
            unint64_t v52 = (char *)v50[566];
            unint64_t v53 = v50[567];
            if ((unint64_t)v52 >= v53)
            {
              unint64_t v108 = (char *)v50[565];
              uint64_t v109 = (v52 - v108) >> 3;
              if ((unint64_t)(v109 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v110 = v53 - (void)v108;
              unint64_t v111 = (uint64_t)(v53 - (void)v108) >> 2;
              if (v111 <= v109 + 1) {
                unint64_t v111 = v109 + 1;
              }
              if (v110 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v112 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v112 = v111;
              }
              if (v112)
              {
                unint64_t v113 = (char *)sub_5714((uint64_t)(v50 + 567), v112);
                unint64_t v52 = (char *)v50[566];
                unint64_t v108 = (char *)v50[565];
              }
              else
              {
                unint64_t v113 = 0;
              }
              uint64_t v136 = &v113[8 * v109];
              *(void *)uint64_t v136 = v51;
              unint64_t v54 = v136 + 8;
              while (v52 != v108)
              {
                uint64_t v137 = *((void *)v52 - 1);
                v52 -= 8;
                *((void *)v136 - 1) = v137;
                v136 -= 8;
              }
              v50[565] = v136;
              v50[566] = v54;
              v50[567] = &v113[8 * v112];
              if (v108) {
                operator delete(v108);
              }
            }
            else
            {
              *(void *)unint64_t v52 = v51;
              unint64_t v54 = v52 + 8;
            }
            v50[566] = v54;
            break;
          case 0x9D:
            uint64_t v55 = *(void **)a1[2];
            uint64_t v56 = *(_WORD *)(a1[3] + 18) & 0x3FFF;
            uint64_t v57 = (char *)v55[569];
            unint64_t v58 = v55[570];
            if ((unint64_t)v57 >= v58)
            {
              unint64_t v114 = (char *)v55[568];
              uint64_t v115 = (v57 - v114) >> 3;
              if ((unint64_t)(v115 + 1) >> 61) {
LABEL_198:
              }
                sub_566C();
              unint64_t v116 = v58 - (void)v114;
              unint64_t v117 = (uint64_t)(v58 - (void)v114) >> 2;
              if (v117 <= v115 + 1) {
                unint64_t v117 = v115 + 1;
              }
              if (v116 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v118 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v118 = v117;
              }
              if (v118)
              {
                unint64_t v119 = (char *)sub_5714((uint64_t)(v55 + 570), v118);
                uint64_t v57 = (char *)v55[569];
                unint64_t v114 = (char *)v55[568];
              }
              else
              {
                unint64_t v119 = 0;
              }
              unint64_t v138 = &v119[8 * v115];
              *(void *)unint64_t v138 = v56;
              uint64_t v59 = v138 + 8;
              while (v57 != v114)
              {
                uint64_t v139 = *((void *)v57 - 1);
                v57 -= 8;
                *((void *)v138 - 1) = v139;
                v138 -= 8;
              }
              v55[568] = v138;
              v55[569] = v59;
              v55[570] = &v119[8 * v118];
              if (v114) {
                operator delete(v114);
              }
            }
            else
            {
              *(void *)uint64_t v57 = v56;
              uint64_t v59 = v57 + 8;
            }
            v55[569] = v59;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_60FB8()
{
}

uint64_t sub_60FCC(int a1, char *__s1)
{
  if (!__s1) {
    return 207;
  }
  uint64_t result = strcmp(__s1, "D7642F4CD8A1F1052D8874FFCB84623EEB5AD8DB476AAA36BB13F44E0122717D");
  if (result)
  {
    if (!strcmp(__s1, "ECCE75AB7F80F9519A3E08E3A0EE71610AE67E3B82829786B02D98C09276F560"))
    {
      return 1;
    }
    else if (!strcmp(__s1, "0D43CB377576A411251DB7D5579117D02FC1BB178830D97B5332A806AC122B37"))
    {
      return 2;
    }
    else if (!strcmp(__s1, "9E7E7B3180DA596EBA2925972639C8DC058E97904ADA86E8FA31E691D63CA97B"))
    {
      return 3;
    }
    else if (!strcmp(__s1, "FE4E8A2782700A8DEC84E195627096B91A904FF6F486B78EF381501FB9667E0F"))
    {
      return 4;
    }
    else if (!strcmp(__s1, "35E9B0A78729DBBE416E11951D26DDC657D957CE37E23B41A2915BB6CC8CF792"))
    {
      return 5;
    }
    else if (!strcmp(__s1, "992E7CAEB9808CFC06F5E69E0B80D0ABB3328FC59FA76FED7BB9529EBBC6E484"))
    {
      return 6;
    }
    else if (!strcmp(__s1, "C04589D08BD1AA2481137A423CC2E81C537B75011557AB0EA579F58E489D9981"))
    {
      return 7;
    }
    else if (!strcmp(__s1, "7C3CD59A80673DD0787DF037FB1FB45E0EB635BFDB2554E10CBF5D056FEDAB78"))
    {
      return 8;
    }
    else if (!strcmp(__s1, "E484E42F34BF2E406D25EB38451C67D3C3C9CB9DEB9222C4F5E21E7E6729C787"))
    {
      return 9;
    }
    else if (!strcmp(__s1, "A1CD5E72A4CAD33DD4C2190F293103B9FD8B40FFE76B1A99A195768465964F91"))
    {
      return 10;
    }
    else if (!strcmp(__s1, "1FFBA951E06F1A7810DC823264210F0C13273E454D699383F3D6265630FEDD53"))
    {
      return 11;
    }
    else if (!strcmp(__s1, "3856FBD8576C0AA988700D7EF5787AAAE94A3BBFBB393B0426FA9D379DA69C91"))
    {
      return 12;
    }
    else if (!strcmp(__s1, "76F5A23AACC27615C980BE3E58B52994192195866836855BCA7C3F885796297B"))
    {
      return 13;
    }
    else if (!strcmp(__s1, "4BF63E209F7D92B4E8341476C80013664D3299327C72E7A7F0D16E1CBD4904FC"))
    {
      return 14;
    }
    else if (!strcmp(__s1, "260130B343BA0695AB911D986B3870FA0CCD0EC58E6F55895A856F37201CE9F8"))
    {
      return 15;
    }
    else if (!strcmp(__s1, "79E88035C9BC883D403F17831B8C9264E643C6B76E9B3C1451B49B0F672C32BF"))
    {
      return 16;
    }
    else if (!strcmp(__s1, "100299043F027ADADB62685130C7FBE549E29F08B58C365844FF8EC25BAEEAB0"))
    {
      return 17;
    }
    else if (!strcmp(__s1, "AA1E812506867A5F2C54D3BA3268DB5C4BB2C6B0E4F500340DD23C4E1E637D9D"))
    {
      return 18;
    }
    else if (!strcmp(__s1, "5D4640C1160E691CF9E1DA7FE475482756D03567716B9856424469B31049A457"))
    {
      return 19;
    }
    else if (!strcmp(__s1, "3476066F46CC277DE7616AAAD8FCDF2C28DA42293B231F74A62159EB6EDAC78C"))
    {
      return 20;
    }
    else if (!strcmp(__s1, "547021D0E82D62B7841769A23FC7FE04F7A63B8A0528A3F6E4C67E8B9420360E"))
    {
      return 21;
    }
    else if (!strcmp(__s1, "295D65BB175E4E4EEF9003E008E093043C9B8CE43190BE0A2D8F1771F9837033"))
    {
      return 22;
    }
    else if (!strcmp(__s1, "37C7DEA7C7AC62E48672D62B73746ED032AC86A05AA223DB4F373D44F106CD6A"))
    {
      return 23;
    }
    else if (!strcmp(__s1, "42EA38C66C2CC54A764D5E204FF38F3402542A5F05B7731D549F22D745429051"))
    {
      return 24;
    }
    else if (!strcmp(__s1, "F6D454657EA6A999B3D168C1A68D6592B2F348BA088B279DBF0A992754767224"))
    {
      return 25;
    }
    else if (!strcmp(__s1, "63CA0F7A21417297C42CDF8868259FBCECF5C6A5C1C994C3A1CA5F608179B458"))
    {
      return 26;
    }
    else if (!strcmp(__s1, "75D1CF68BBA66F3E658B115EF614F1449D832863CAF5F46D092488791378897F"))
    {
      return 27;
    }
    else if (!strcmp(__s1, "F4B1ED932C463D5EE2A9E1F0BEC7DDE12141635B8C1BC09662243EA36A1E2ECE"))
    {
      return 28;
    }
    else if (!strcmp(__s1, "511B8B14F417FD34A16CC128C14014AD2B4C5A60B3B053D963C78631DD6B3B89"))
    {
      return 29;
    }
    else if (!strcmp(__s1, "932639B5CA9FD3BE98F2787A2CDE095AAE9CE2D64A911486D12757EFBFD85140"))
    {
      return 30;
    }
    else if (!strcmp(__s1, "09ADF2F2D849AAB1B547CE687B45B30560D5965A6EE176E97CBC14EB63728DE2"))
    {
      return 31;
    }
    else if (!strcmp(__s1, "C2DF6BB1B96D7879744E5D54DEB55C12D7A9ECFF52AF539FC1FA63882B058A70"))
    {
      return 32;
    }
    else if (!strcmp(__s1, "8C96A68570A6DF5B4ABA9577C27042A37A60B8FBD6BC9DE3F909EC683406A5CD"))
    {
      return 33;
    }
    else if (!strcmp(__s1, "7B36DACFCE6FC736238A397E5EF2F7E25BE954A649117EE12A916CE79F75B94A"))
    {
      return 34;
    }
    else if (!strcmp(__s1, "80C734FBB111112ADB288D1CA5E1A6D5381987D38F4DFA08EFE8CC3C5F1CF131"))
    {
      return 35;
    }
    else if (!strcmp(__s1, "3A6B5C3F24147C27899AEB7FF2FE3FB579A0D79BE4AB9BE54E7F31F7AED99F24"))
    {
      return 36;
    }
    else if (!strcmp(__s1, "23C55391915968963B369CFA8F5BE79A370ADD2CB37A32A0C9267269406EC6E8"))
    {
      return 37;
    }
    else if (!strcmp(__s1, "1394031F165B7EE472518C80605434939287CE630C3E2BF45774C422646BDB52"))
    {
      return 38;
    }
    else if (!strcmp(__s1, "B664BC44BBFB5AB784B0240FFB637DC636A9B7CEE13D6D556ED1D4ED56E9DEF8"))
    {
      return 39;
    }
    else if (!strcmp(__s1, "2AD526A49877323714C9104CAF0E3F117082A43D0955315AF0F43F7AADFF2586"))
    {
      return 40;
    }
    else if (!strcmp(__s1, "0559E51C335EC81412374E33F830E804DF39F2FF796E95308A25A8A8BFA0475A"))
    {
      return 41;
    }
    else if (!strcmp(__s1, "656B51D5FF08D489CFD54BA967A44D9FBB3DEE2BEF089EADFF59F0176430773E"))
    {
      return 42;
    }
    else if (!strcmp(__s1, "08E5DC7B9F52DFF7963D2715D3927A1356E247326CAF5C76830A7D7227B991B0"))
    {
      return 43;
    }
    else if (!strcmp(__s1, "97566BDFEF237739AC2EFF164112983D98FCFAC0EE4F30C671D4908D02520208"))
    {
      return 44;
    }
    else if (!strcmp(__s1, "5ABE83ED58C646C0795991EFC53EFAF95AD3FA933AFD23A5181FDC1D4DFDFBA0"))
    {
      return 45;
    }
    else if (!strcmp(__s1, "F7FED94B5F000049299482FDF5F0D7700B1A29309A0313344D1B861FDC715239"))
    {
      return 46;
    }
    else if (!strcmp(__s1, "CD2FFA0725298FE71DCD34C05D62ABC16C9F0A5690297DF5376D65198C5D7890"))
    {
      return 47;
    }
    else if (!strcmp(__s1, "DE73E30C620D682FA8317A0FEB5087A2C63811110674D46B9894D955808CBC9E"))
    {
      return 48;
    }
    else if (!strcmp(__s1, "B1981D6FA7779DA1E867116607CFA5B05E44C5C8D8A9E8AD1906FEF7F8BA1874"))
    {
      return 49;
    }
    else if (!strcmp(__s1, "B942A1DFEF5624B827CF986CC919BB4891C1C421645311F2355CE6766AEBEF2E"))
    {
      return 50;
    }
    else if (!strcmp(__s1, "B2D70BAA5FA87BB6C253C5314B6E833D882783F1E906897B196FCC4D6572D5C6"))
    {
      return 51;
    }
    else if (!strcmp(__s1, "AD07330BE6EF87E08C9E5D058B4CBD9F71C39D7C1B916A834F263B5E7B3DFC43"))
    {
      return 52;
    }
    else if (!strcmp(__s1, "9AD2DE6034B18A80CF5573485FEEE0B7EBF72DF6DD292271C9B412FBDF8037C5"))
    {
      return 53;
    }
    else if (!strcmp(__s1, "2BBC664C4BF8238D5FC7A5376438D13CE61B9EBC1FF8EC52F6F5A80543BEACD4"))
    {
      return 54;
    }
    else if (!strcmp(__s1, "B4E21A931309227166902DC5A3E8BACAE69D267A7E733A61139712AC108C6E4E"))
    {
      return 55;
    }
    else if (!strcmp(__s1, "B0FE94C089261C381766B5366AEB1C6ACBF46BC57B4298D568C5EDFCABE30A8A"))
    {
      return 56;
    }
    else if (!strcmp(__s1, "3EFF071A6AD7AF2F6FD8A87059C9CDD5937E87D8B9B4D215C449748133129BDE"))
    {
      return 57;
    }
    else if (!strcmp(__s1, "0B5AF8D437BA25AB6225EADB7A0FC92659AAB2122AC993E00CFA2F83B0E143B3"))
    {
      return 58;
    }
    else if (!strcmp(__s1, "EE48140733BA4D00D8E6CB099101E0BBB6FDB2F71FC05FC0FEAC8A6CF3100B14"))
    {
      return 59;
    }
    else if (!strcmp(__s1, "152B31D6CDC80AD2A7F1593F1E81074F9FEB957043B213E8537F5C9098DFD449"))
    {
      return 60;
    }
    else if (!strcmp(__s1, "0E8C0AF79B626C37D4BD04D61ACC6B1841B7F784FEF6692E84A2B1971C771CF6"))
    {
      return 61;
    }
    else if (!strcmp(__s1, "12038A812C239440324EDCEB54DA13B6B7D0C4D89F61582F9A4628C4409FAAE6"))
    {
      return 62;
    }
    else if (!strcmp(__s1, "12ADE1668F06776E2CE9CC2CC563E0BD45A5346C6D883D748FD3C132E7EB8A2F"))
    {
      return 63;
    }
    else if (!strcmp(__s1, "D5D2B254E0B808929711EBFC999F2E0F884DB9876C90B056E230E4DD6D3261CE"))
    {
      return 64;
    }
    else if (!strcmp(__s1, "CA5FDEAD1B2DEC16F5B525E9AE3CA7C4EDC163EEE950D7A77A7C5284A607369F"))
    {
      return 65;
    }
    else if (!strcmp(__s1, "28B92DE785184753FAF5508E080CB8FE784D6A5214E5E6382751D52534A72FCE"))
    {
      return 66;
    }
    else if (!strcmp(__s1, "316635C054256728753D20516A98550DBF581EBA16691321F7BBCE3A9177E09D"))
    {
      return 67;
    }
    else if (!strcmp(__s1, "D2D14661D9692EBD5065F06CB4C2AC7DD14339CAEA538D5AFA4A2B5813E87D5D"))
    {
      return 68;
    }
    else if (!strcmp(__s1, "96775CCE99E1AD0C194329938D933579304BAD868B3720C34D20D27536E7AEE7"))
    {
      return 69;
    }
    else if (!strcmp(__s1, "615761368EF9DB43D1A8DF2EF1CC087B17906454F025A1E1C5BB95B022582B9B"))
    {
      return 70;
    }
    else if (!strcmp(__s1, "2A5A81F290FDE6D31DB132DD493737A7252C441023286294F3C77CE48DD4E2F0"))
    {
      return 71;
    }
    else if (!strcmp(__s1, "7262FC4EB2434704063840AB716EF14B50F3A0E5E3457E8EBF9E014325CAE94F"))
    {
      return 72;
    }
    else if (!strcmp(__s1, "A2B9B85B3AADE88EBF43D3DB522C31E6A781700C0112047F72FA920A638A69BE"))
    {
      return 73;
    }
    else if (!strcmp(__s1, "D97205C2B224673AE923C3A7A003D96258A1A774E1C9E3CD513B0706C6657D48"))
    {
      return 74;
    }
    else if (!strcmp(__s1, "0C60DB8A2A73C9B343C4B279EDF24580976BD74BD0294B1AAC17B0A4273D8C28"))
    {
      return 75;
    }
    else if (!strcmp(__s1, "27A93DA3DF54447DCB9F371C54907BEFA8F17B7FA905EDAC2B523C7A0D93A918"))
    {
      return 76;
    }
    else if (!strcmp(__s1, "F98BB9D35C454CA00A884F6B9621A30F2C78A880A96D81B5E661391D74E8455A"))
    {
      return 77;
    }
    else if (!strcmp(__s1, "AC00030F77E6F4E41BF49DC8D7A42C68813DB0C3B652C340B340C01873EB0AB7"))
    {
      return 78;
    }
    else if (!strcmp(__s1, "BA7A33DF7A125E9EE5C1036DD6DADB3B74CC4B9BA9C5C1B235C131E70B7B4E41"))
    {
      return 79;
    }
    else if (!strcmp(__s1, "038FA673BF47F15B7C5236E4863A96C910C3993AB31529A041DE199F3EEB66CB"))
    {
      return 80;
    }
    else if (!strcmp(__s1, "E44B08E42854960D4B0277D46D6181F8B07FAC3C3CCF5A6B31AA9DC9FA4057D6"))
    {
      return 81;
    }
    else if (!strcmp(__s1, "B80C09BAE4062CCC534F6E6EF6EA6E0ABEFF12048A342EB3138E7B76890D8D3B"))
    {
      return 82;
    }
    else if (!strcmp(__s1, "00EB2F035A98609505AB8DAB9B98D1FECEAA766F368932F7FE6316AE8BAEFBE0"))
    {
      return 83;
    }
    else if (!strcmp(__s1, "6368DD78E9738AAB3001F4C17EBE26BFB0414CDCC1399D092A48AB5A57536454"))
    {
      return 84;
    }
    else if (!strcmp(__s1, "C0909793BE0330B378C0CD09F0D9B9F09F599EC8C6B94C37ABA9011E83596F90"))
    {
      return 85;
    }
    else if (!strcmp(__s1, "11221127E966E92C6C18F64D312E8C9AF73DB3A9DB792E4442FCECE644A8E7B1"))
    {
      return 86;
    }
    else if (!strcmp(__s1, "FED7B076A3D7DE52B6D9A21D14FB1A49BABF975B73BE74181C4EA26976162724"))
    {
      return 87;
    }
    else if (!strcmp(__s1, "26456E27CBF6165D84C883AC666AF50E5EAAA39D07887C37BD3A9BD26A74B2FE"))
    {
      return 88;
    }
    else if (!strcmp(__s1, "F365A0CC0EEB38797FCD82D5E4AC3B2ACF44EB34D333D4AB1AD8D8891B7F8892"))
    {
      return 89;
    }
    else if (!strcmp(__s1, "A5F302F870E09D718474CBCADD4E0B3589351A5007777F1B805169B54226B875"))
    {
      return 90;
    }
    else if (!strcmp(__s1, "903B8B51F5368A75F9777D9155C6A2664116770701ED241A6D1662131A802333"))
    {
      return 91;
    }
    else if (!strcmp(__s1, "DD96D75C3E233EE9B4528803691C00E98D5F49F2B4B3B83676332ABFBB65DE07"))
    {
      return 92;
    }
    else if (!strcmp(__s1, "F2F4280636DC1065AEFE537517EE6B816C8133EF2E5C106D92DDD2B0E0DFC69D"))
    {
      return 93;
    }
    else if (!strcmp(__s1, "EA4B7DF630D01A5FC30F51DEEC420CB0F667CC57639F1C1D8E67D97B12524E0C"))
    {
      return 94;
    }
    else if (!strcmp(__s1, "89DBD24AAAD1D4D50F3F74A7040B52C5B06B4768F1E09DC89D4067D243744882"))
    {
      return 95;
    }
    else if (!strcmp(__s1, "F942A7256C77ACD182AE0B767F21133B11937660A61610A18CD14087D1F2F71C"))
    {
      return 96;
    }
    else if (!strcmp(__s1, "A739EE6D2886FEBC60795D1D8803BF19A1A3463541AB6024A90DBB8E4650F589"))
    {
      return 97;
    }
    else if (!strcmp(__s1, "7B872939683DD4D93E917C20089932C93AACDE7E7C0738CB78026B6FC178B1D9"))
    {
      return 98;
    }
    else if (!strcmp(__s1, "9EB2D21E75D0AA677C8D110763485DB3A78262C89D05CA0C3AF7EBD2D6AB99DD"))
    {
      return 99;
    }
    else if (!strcmp(__s1, "AC7E4629ABFA704A6369754CB199383D2901F0916E230FB75D765420550E8244"))
    {
      return 100;
    }
    else if (!strcmp(__s1, "FF9225FC7116F7583194D2D2F948E6CFD131F9020C7B7C9D61A8DE2F46571C5F"))
    {
      return 101;
    }
    else if (!strcmp(__s1, "3216E3D0006FC749B832DD3C33FF4B7CAE3CE455B3FE030A3EB061DC0356D829"))
    {
      return 102;
    }
    else if (!strcmp(__s1, "41E40C57A9236569333335DEA9CB52F0058A4BF366335B45406F04F7E0A93CD5"))
    {
      return 103;
    }
    else if (!strcmp(__s1, "2F5E861CD13CBCECC15CB691FCC7DCE54FC0755F96F1289D26AFB056BD6788D5"))
    {
      return 104;
    }
    else if (!strcmp(__s1, "0C7AC4ECF65C2CA6215B602A5C050FB69BFF2BA322B47A6890E2F0EE8CA922C0"))
    {
      return 105;
    }
    else if (!strcmp(__s1, "6634D05466F515CAD98B1548EE7DCC52386712E059BE4C1A3FBB157892D9D61E"))
    {
      return 106;
    }
    else if (!strcmp(__s1, "C1F228965CE72DCBDF0563CA9125430BFC5215644CF7426375AAE844D9C393CF"))
    {
      return 107;
    }
    else if (!strcmp(__s1, "860E5D173A5DA8DE4C5A88EDDF57BFB0D9E7D010DFD109852AF3D1C8480DE485"))
    {
      return 108;
    }
    else if (!strcmp(__s1, "2FAB2C822F900089CD78CBC4AB947F23F8CD8C71D0257BB20870F2437F345683"))
    {
      return 109;
    }
    else if (!strcmp(__s1, "A2AEBDCCCD11BCF937DC0DE23C78762A9FD1425DA34EE911F615F041D947D3CE"))
    {
      return 110;
    }
    else if (!strcmp(__s1, "C517BA395C2A64392D1C11AE86475E6F476E22867252458FCC5152B58A43603D"))
    {
      return 111;
    }
    else if (!strcmp(__s1, "E5FA747F28EBFE3E4BBD4BE279044F914B09502E3EB62035341300536242F90B"))
    {
      return 112;
    }
    else if (!strcmp(__s1, "7973408EAAC4FAF261DDB68AD698E34EFC1018CD38876DB49DA34E1C044F2CFC"))
    {
      return 113;
    }
    else if (!strcmp(__s1, "7EFBE7B468F2C8FF4C34E67EDC7E8F80DB3E295C6221F8408D4440A78430C64F"))
    {
      return 114;
    }
    else if (!strcmp(__s1, "D67C31C99E39309E5E09E11F7A5E7B3576972C57135463976A5539814860D051"))
    {
      return 115;
    }
    else if (!strcmp(__s1, "3473F3E1E2A85DAEEB664F0C421CDF84D3B27258796FFBB2881208B73DEFC007"))
    {
      return 116;
    }
    else if (!strcmp(__s1, "CBB7FC5C90F6950C90B30709E38AC295085E9F9A5D82EB5DF56E89752A1E0252"))
    {
      return 117;
    }
    else if (!strcmp(__s1, "1B57426DF9B957C95C4296A880A1D75B70200B72E8554E7D713D37098154E907"))
    {
      return 118;
    }
    else if (!strcmp(__s1, "F5B97BA71877E7014D8BB80B1B5750123154A26D4FD86B41AE0525EDEF44A41B"))
    {
      return 119;
    }
    else if (!strcmp(__s1, "E2175386E8858E1E5273EB120A19C734896FE34E529B7720E38F90C3E66633CC"))
    {
      return 120;
    }
    else if (!strcmp(__s1, "A5AD2AAF51022A15627C4C6C3F18D612BFF2CA7F01F65EC1C26965ED6DDC6563"))
    {
      return 121;
    }
    else if (!strcmp(__s1, "89FBB3BDB9379AD11D47A5F312EDF73706C589F07B8C14BE99A3D604DA840455"))
    {
      return 122;
    }
    else if (!strcmp(__s1, "BEE28431C5E817DF3C9C265B3672660D03A6C89EE5236507323554958AE59578"))
    {
      return 123;
    }
    else if (!strcmp(__s1, "1F6D45D5DEB05AFFD7C7C1DAC38D882FA9A9D616990FBB135621C1F0D30CA596"))
    {
      return 124;
    }
    else if (!strcmp(__s1, "24B2EDEBE37A35C073BBC2B83505D52B7FDB9C121406C6308CF528457883D4BE"))
    {
      return 125;
    }
    else if (!strcmp(__s1, "D51129E2277ED8B7AE37E82DA9F8FEB9C3FDB71EC4E4B5548B4D3763A89AF1C2"))
    {
      return 126;
    }
    else if (!strcmp(__s1, "CFEE285EA42317F1E8CE16B6BAED451F1D8029F8C057963B2486EA9093B3CD28"))
    {
      return 127;
    }
    else if (!strcmp(__s1, "AEB4C02667999241FFC01E220B4443963E1B34D3ACD2C5545F5BBE1143870378"))
    {
      return 128;
    }
    else if (!strcmp(__s1, "98A511FEF2F07DAECD3383521C19383B6DCA2C733FA4611CDFA49CC62B7B5181"))
    {
      return 129;
    }
    else if (!strcmp(__s1, "40A9788933E5BA39796E86A50864B263BC0F2291A4B895C7EA6BBB144E5DACA5"))
    {
      return 130;
    }
    else if (!strcmp(__s1, "51A34CA49D64B984F464BC878382CDD07EEF0B001EBE4F2E95026F21673969A7"))
    {
      return 131;
    }
    else if (!strcmp(__s1, "D469DF7536BAE8E1DE2CB8B3C1E14B4133343771592D97C7BCEC1D03BF0EE40A"))
    {
      return 132;
    }
    else if (!strcmp(__s1, "83B2F8BA9316B9EFB16E84445A86F4306028A166E21E7B350C8D908E696445FC"))
    {
      return 133;
    }
    else if (!strcmp(__s1, "ECE8C77FAA463F6CD7C69976F66D170E06AABA1F8EAADE7E5C2EF059C7FD1BC6"))
    {
      return 134;
    }
    else if (!strcmp(__s1, "06E83674FEE3BAEADDA04BCE4F798E64EAF9562959486A334178EFE9614AFE02"))
    {
      return 135;
    }
    else if (!strcmp(__s1, "92CB5205D6DC7B8CF67306FCBBF4D2E22C50A82E14C323C9869A8154961E1379"))
    {
      return 136;
    }
    else if (!strcmp(__s1, "CFC88028D48CFFC122779E410D958A0644A7B3219492B8F56805460AE11D3317"))
    {
      return 137;
    }
    else if (!strcmp(__s1, "87BA80BEA278BCBDE11D4ADFEA6B3C8BEF365D8260CDE3591D5B76B2C36DD853"))
    {
      return 138;
    }
    else if (!strcmp(__s1, "C38EE6AA610415ACB3D10D68E346EE868CDB70CFC2F46D887E5E152FD4A256B2"))
    {
      return 139;
    }
    else if (!strcmp(__s1, "D2D6A9827703DC8826305F130123DE83C3648F82DCB4F96DFCD7E33EA799BD62"))
    {
      return 140;
    }
    else if (!strcmp(__s1, "9B37F49C310110FE3C1D0349A0DBD1F4165E5E1873418FE3D8E02DBD2C42360F"))
    {
      return 141;
    }
    else if (!strcmp(__s1, "6EA38ABD760FE83DDB724F359C9F761841C5BD69E5DCCC1C211D42F98751EF80"))
    {
      return 142;
    }
    else if (!strcmp(__s1, "F9F04A751DF32AED42FF9EFB131D3CD40E499AA0A99A68D0DD6778167E42BF26"))
    {
      return 143;
    }
    else if (!strcmp(__s1, "5BA476059E7B48575673F80A8DC1251E26C5B23F5DCF5BCB3AB1251D0D3424E8"))
    {
      return 144;
    }
    else if (!strcmp(__s1, "357D351342C59B72F21BD4580AD1B2F1C4C47D0006AB615A4760BC3BEBD99E48"))
    {
      return 145;
    }
    else if (!strcmp(__s1, "D613D0441777617363D2EF9031155D28A493ED4CF2B714C61332BEB8E694A21C"))
    {
      return 146;
    }
    else if (!strcmp(__s1, "8751E932723FAB8324B1EFAB05DE911953F94AB079963EC9D4882EC0F853207E"))
    {
      return 147;
    }
    else if (!strcmp(__s1, "EA870EDD0C8AD026DB44FB5C6AC53D8875D62255F794C489EAB9F8222F0616CB"))
    {
      return 148;
    }
    else if (!strcmp(__s1, "B0D00D3E15F0D45E0DAD2FE819496F3837110BDADE01AC3A17862CDDACDEE5AB"))
    {
      return 149;
    }
    else if (!strcmp(__s1, "7B4CF9B631F81D78F2CEA2F4869D0137BE4CA667AE9B13DB22A617C2BA15C075"))
    {
      return 150;
    }
    else if (!strcmp(__s1, "CA1DD5B830AB9668FC5EBD5904EB9B0113C766FCE57EF59AEC58982AE744413A"))
    {
      return 151;
    }
    else if (!strcmp(__s1, "2D29DA77B4EF8E7B1D2F3F764587274747D1C2AB05C053B4CE38AE701116BF6A"))
    {
      return 152;
    }
    else if (!strcmp(__s1, "83156D57355E76E46E7319E18EA9D6A8D20E78958733028FD3F74C3FD9B0BCC5"))
    {
      return 153;
    }
    else if (!strcmp(__s1, "95DD082534B76465BAA6B38551429C11CD11A77CB351740B05F3D18D2CD2B990"))
    {
      return 154;
    }
    else if (!strcmp(__s1, "996E91405229B0F31165936664CCE9F7D3145963C1A14FA9DD57A320E349F123"))
    {
      return 155;
    }
    else if (!strcmp(__s1, "294111BEC0EE4CFDDCE430D197B75A1CB09E21EB1C822E16CD1CBCC982D46A3F"))
    {
      return 156;
    }
    else if (!strcmp(__s1, "727820125C45F365E03E3C14E8202CFF1E0049F24543B5D589F3956E11F5C581"))
    {
      return 157;
    }
    else if (!strcmp(__s1, "33634F0DC72BA827D588E38DC75C388CF4976E4671D85148780CFAFD262B07FB"))
    {
      return 158;
    }
    else if (!strcmp(__s1, "FD6F91B4C067953424B95F0B332F0FB4A64F7E43DC4D6E8CDE26B1D5D7C07A42"))
    {
      return 159;
    }
    else if (!strcmp(__s1, "50E7E1AAC46F3CF79A6B3BB2DDC0BCDCF0ACD9011439415E47AEA7B6579F3EA8"))
    {
      return 160;
    }
    else if (!strcmp(__s1, "25C93B5B4A76FFE8A20CA68271CF612F43D0B5504B6680945F3BB046DA47213A"))
    {
      return 161;
    }
    else if (!strcmp(__s1, "B6B78FABA9FD12B688986DC5EA4D4B8B731265EDEC1E5AE52B0CAA6FC31801F2"))
    {
      return 162;
    }
    else if (!strcmp(__s1, "55DDF08ED5B641C5048444150A2D58A930D81F86EEA506CD8B4073F64FC0F1C2"))
    {
      return 163;
    }
    else if (!strcmp(__s1, "C4B3D90E89BC6B96BEB336D1A17757038334C2A490EDF56428037F1BC405BF70"))
    {
      return 164;
    }
    else if (!strcmp(__s1, "E0822A12A8DD1B222198A771537F2CE4899EB45BC94D7854E0E6FA983E6EBC89"))
    {
      return 165;
    }
    else if (!strcmp(__s1, "FB75B1EE028F765D95134B65BAFD26602EE879B247F31514268AFE1DF00830D4"))
    {
      return 166;
    }
    else if (!strcmp(__s1, "C8CAD3DF32303A6876151218FAAA63CA0642964F0528B51E0F3BBA792A0FA006"))
    {
      return 167;
    }
    else if (!strcmp(__s1, "EED11884758646FD70438F8D2661EC13F25DF1E40EC651E073736D2EFDAB9F0D"))
    {
      return 168;
    }
    else if (!strcmp(__s1, "E01BD71065BD9CE02CFEEC935E09F6DE3C3B9EFAED8F187A533C6321069B4D85"))
    {
      return 169;
    }
    else if (!strcmp(__s1, "E4079A9FE3685ED6370986B0373FFC91E49069A610571534C42255467036D7CD"))
    {
      return 170;
    }
    else if (!strcmp(__s1, "6060A012307BC0711368543129DC26F4493F2C5C30CAF9D4F782C065929930B3"))
    {
      return 171;
    }
    else if (!strcmp(__s1, "11F678510139CFDE77DC68F07F633C61D28564C9B207D45849B5E6AB72B41E0A"))
    {
      return 172;
    }
    else if (!strcmp(__s1, "9C397DD48F0AD6AAD1F9B2ABA077E5808FA3D4E452B659013FF3CEC6D1EB1472"))
    {
      return 173;
    }
    else if (!strcmp(__s1, "D1922B4CF1F4DC1E2062378D34EE4E6EAB398BD0417BC95E5EF60C5C1F53E035"))
    {
      return 174;
    }
    else if (!strcmp(__s1, "7D8633F6EB10ABA43002BB46D28FA26BFFA1093AB39728908221CE3FD922C72D"))
    {
      return 175;
    }
    else if (!strcmp(__s1, "DFF91EC9DAE4F9D14485F569D87B6AC75F93DD47C850ACF09E9DD7A3D0EFCE8A"))
    {
      return 176;
    }
    else if (!strcmp(__s1, "8F37B8C186E20EAB68B65FA965112E8C106205370CA0829C3EBD548C49C99A46"))
    {
      return 177;
    }
    else if (!strcmp(__s1, "3FAA4DE8275531852B39C91E52291523AEA993A6114D2CF7645F7C8AC1EF27CE"))
    {
      return 178;
    }
    else if (!strcmp(__s1, "6FFBFD65F64B0F892C812D9952748E8632E02C4DF155F5E233927E6D0DC88D38"))
    {
      return 179;
    }
    else if (!strcmp(__s1, "2660D91E9E44E8375C647F1F4FDD89923B3BFA26A3AF29D5937BAF8EF1E10CFE"))
    {
      return 180;
    }
    else if (!strcmp(__s1, "0AF6A9208DBB7C0C06A19C4C9090BF87CF00BBEE2BDFD9E0C49423DD641C1174"))
    {
      return 181;
    }
    else if (!strcmp(__s1, "6CFA2D1125EAFC658FDF0E2F1A1B4F8D315296A1AFB116D0A8ECF669C026FF69"))
    {
      return 182;
    }
    else if (!strcmp(__s1, "0D32627A10C5DB983D8E5DF466E154001CBB4E945D22A4E280A08C8D0F1701A7"))
    {
      return 183;
    }
    else if (!strcmp(__s1, "B6C42286FD0AB628E79B9D4F5F10DC31C2DFD460570800BEB5C9E53651363C7D"))
    {
      return 184;
    }
    else if (!strcmp(__s1, "5DCA18DF36F9FA665E30157E71359C15F04492B59DA944CC2B10D7A925843DA7"))
    {
      return 185;
    }
    else if (!strcmp(__s1, "5851D9888A5EE313F6D80CC60F6BB6ADFC20BB0BA8D9BED753F04382DF6BED1A"))
    {
      return 186;
    }
    else if (!strcmp(__s1, "FD406D36CD5763CFC9F0DD6C37C7BDC528ADF3990CF9725229F4258C1758C94D"))
    {
      return 187;
    }
    else if (!strcmp(__s1, "EC02EE62A95DE2B0B2BC9C65A400E1318CFD7FFA894EECC7B23F8FB164A10C08"))
    {
      return 188;
    }
    else if (!strcmp(__s1, "81E23B94D526C5353E9E499DE4D53C13BAC39B09D64961C3259B99425E493446"))
    {
      return 189;
    }
    else if (!strcmp(__s1, "D36BDC945E9A3C2158D269457AE35CC5AD63543965D991AB68A2CC0556E31D50"))
    {
      return 190;
    }
    else if (!strcmp(__s1, "EEC15933C85F49CDCD9A4DC75821303FD2E5E1A8E2651667DB103FF51457DF71"))
    {
      return 191;
    }
    else if (!strcmp(__s1, "19FCC75261554C74A79C9151422F265347FC6282808C4BB8E9627195837B3682"))
    {
      return 192;
    }
    else if (!strcmp(__s1, "54D70702DEC6F85C65B8D1E26F089610058B0CDC6B23440F6FD07F26E6E23315"))
    {
      return 193;
    }
    else if (!strcmp(__s1, "244B94B5F2129A5A0083F3661EAC9C6B9EB5FB62A499E6ED236452F5BE6828F5"))
    {
      return 194;
    }
    else if (!strcmp(__s1, "2C9ACA342CA7C8F4A29CA1C798155F709AC8B8D95F0D20C549DBC00F1C42184D"))
    {
      return 195;
    }
    else if (!strcmp(__s1, "972B60C198C39199A11F25454037CADA381BB118BE18D850A36534F88A82B7F1"))
    {
      return 196;
    }
    else if (!strcmp(__s1, "0AAC94B02176D8B144479EAFEE546A608C8B5E61D7A27481868626A7820E0CB1"))
    {
      return 197;
    }
    else if (!strcmp(__s1, "5537928133BBD235A03487186F42FBFF9D0FC45873C83FD5219EB5EBF500ED10"))
    {
      return 198;
    }
    else if (!strcmp(__s1, "E2D94E3051875514422124C186B05CDA6F417AF1FC67511A17055B65BED227AA"))
    {
      return 199;
    }
    else if (!strcmp(__s1, "E9FDDF0E4E3D3ABB4D40C135F207C0310E5BE4CCF2EC1099CB89594DD756B745"))
    {
      return 200;
    }
    else if (!strcmp(__s1, "A6DE7D11FD45FD0B0F5541862F786FAAA17E530F3CBAC5CE63EFD6C7B7B8EC27"))
    {
      return 201;
    }
    else if (!strcmp(__s1, "53E08B2D38CDBBC0D198B95302BCC632B50E773651E9BA4C57373B002114CBBC"))
    {
      return 202;
    }
    else if (!strcmp(__s1, "E21086636B17AA11D0ECA0545AB90C82D396EB03C6D33A9DE49DEEC71BFEC9A3"))
    {
      return 203;
    }
    else if (!strcmp(__s1, "18487C9D7CEF0D61908387ACBCC7316000F44757B4F9C98EA18217C35C6ECF85"))
    {
      return 204;
    }
    else if (!strcmp(__s1, "274A1E04D620A2A93E0AAFC7DB5F0BC3A6322D745709FD3011852A7608D0DC59"))
    {
      return 205;
    }
    else if (!strcmp(__s1, "A6C2B5EE1745CD5EB5C81F2B31F5E946A0C1BDC93B226BB05571EFA08555EF8F"))
    {
      return 206;
    }
    else
    {
      return 207;
    }
  }
  return result;
}

uint64_t sub_62698(uint64_t a1, unsigned int a2)
{
  unsigned int v2 = a2 - 128;
  if (a2 < 0x80)
  {
    uint64_t v3 = (char *)&unk_4C696C + 4 * (int)a2;
    return *(unsigned int *)v3;
  }
  if (v2 < 0x40)
  {
    uint64_t v4 = (char *)&unk_4C6B6C;
LABEL_7:
    uint64_t v3 = &v4[4 * v2];
    return *(unsigned int *)v3;
  }
  unsigned int v2 = a2 - 192;
  if (a2 - 192 < 0xF)
  {
    uint64_t v4 = (char *)&unk_4C6C6C;
    goto LABEL_7;
  }
  return 16;
}

void sub_626EC(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = a2 - v5;
  if (a2 <= v5)
  {
    *(void *)(a1 + 8) = a2;
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 16);
    unint64_t v9 = v8 << 6;
    if (v8 << 6 < v6 || v5 > (v8 << 6) - v6)
    {
      uint64_t v21 = 0;
      long long v22 = 0uLL;
      if ((a2 & 0x8000000000000000) != 0) {
        sub_566C();
      }
      unint64_t v11 = v8 << 7;
      if (v11 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0)) {
        unint64_t v11 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
      }
      if (v9 <= 0x3FFFFFFFFFFFFFFELL) {
        unint64_t v12 = v11;
      }
      else {
        unint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
      }
      sub_4752C(&v21, v12);
      unint64_t v13 = *(unint64_t **)a1;
      unint64_t v14 = *(void *)(a1 + 8);
      *(void *)&long long v22 = v14 + v6;
      unint64_t v23 = v21;
      int v24 = 0;
      sub_62A2C(v13, 0, (uint64_t)&v13[v14 >> 6], v14 & 0x3F, (uint64_t)&v23, (uint64_t)&v19);
      uint64_t v17 = v19;
      LODWORD(v18) = v20;
      unint64_t v15 = *(char **)a1;
      *(void *)a1 = v21;
      uint64_t v21 = v15;
      long long v16 = *(_OWORD *)(a1 + 8);
      *(_OWORD *)(a1 + 8) = v22;
      long long v22 = v16;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      uint64_t v17 = (char *)(*(void *)a1 + 8 * (v5 >> 6));
      uint64_t v18 = *(void *)(a1 + 8) & 0x3FLL;
      *(void *)(a1 + 8) = a2;
    }
    if (a2 != v5)
    {
      if (a3)
      {
        uint64_t v21 = v17;
        LODWORD(v22) = v18;
        std::__fill_n[abi:nn180100]<true,std::vector<BOOL>>(&v21, v6);
      }
      else
      {
        uint64_t v21 = v17;
        LODWORD(v22) = v18;
        std::__fill_n[abi:nn180100]<false,std::vector<BOOL>>((uint64_t)&v21, v6);
      }
    }
  }
}

void sub_62854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_62870(uint64_t a1, unint64_t a2, unsigned char *a3)
{
  *(void *)(a1 + 8) = 0;
  if (a2)
  {
    uint64_t v6 = *(void *)(a1 + 16);
    unint64_t v7 = v6 << 6;
    if (v6 << 6 >= a2)
    {
      *(void *)(a1 + 8) = a2;
    }
    else
    {
      unint64_t v14 = 0;
      long long v15 = 0uLL;
      if ((a2 & 0x8000000000000000) != 0) {
        sub_566C();
      }
      unint64_t v8 = v6 << 7;
      if (v8 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0)) {
        unint64_t v8 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
      }
      if (v7 <= 0x3FFFFFFFFFFFFFFELL) {
        unint64_t v9 = v8;
      }
      else {
        unint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
      }
      sub_4752C(&v14, v9);
      unint64_t v11 = v14;
      uint64_t v12 = *((void *)&v15 + 1);
      unint64_t v14 = *(char **)a1;
      int v10 = v14;
      long long v13 = *(_OWORD *)(a1 + 8);
      *(void *)a1 = v11;
      *(void *)(a1 + 8) = a2;
      *(void *)(a1 + 16) = v12;
      long long v15 = v13;
      if (v10) {
        operator delete(v10);
      }
    }
    if (*a3)
    {
      unint64_t v14 = *(char **)a1;
      LODWORD(v15) = 0;
      std::__fill_n[abi:nn180100]<true,std::vector<BOOL>>(&v14, a2);
    }
    else
    {
      unint64_t v14 = *(char **)a1;
      LODWORD(v15) = 0;
      std::__fill_n[abi:nn180100]<false,std::vector<BOOL>>((uint64_t)&v14, a2);
    }
  }
}

void sub_6296C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_62984(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_62CC4(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        int v10 = *(void **)(v8 - 24);
        v8 -= 24;
        unint64_t v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

unint64_t *sub_62A2C@<X0>(unint64_t *__src@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int64_t v8 = a4 - (unint64_t)a2 + 8 * (a3 - (void)__src);
  if (v8 <= 0)
  {
    long long v16 = *(unint64_t **)a5;
  }
  else
  {
    unint64_t v9 = __src;
    __src = *(unint64_t **)a5;
    if (a2)
    {
      if (v8 >= (unint64_t)(64 - a2)) {
        int64_t v10 = 64 - a2;
      }
      else {
        int64_t v10 = v8;
      }
      v8 -= v10;
      uint64_t v11 = *v9++;
      *__src = *__src & ~((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2)) | v11 & (0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2);
      unint64_t v12 = v10 + *(unsigned int *)(a5 + 8);
      __src = (unint64_t *)((char *)__src + ((v12 >> 3) & 0x3FFFFFF8));
      *(void *)a5 = __src;
      *(_DWORD *)(a5 + 8) = v12 & 0x3F;
    }
    if (v8 >= 0) {
      uint64_t v13 = v8;
    }
    else {
      uint64_t v13 = v8 + 63;
    }
    uint64_t v14 = v13 >> 6;
    if ((unint64_t)(v8 + 63) >= 0x7F)
    {
      memmove(__src, v9, 8 * v14);
      __src = *(unint64_t **)a5;
    }
    uint64_t v15 = v8 - (v14 << 6);
    long long v16 = &__src[v14];
    *(void *)a5 = v16;
    if (v15 >= 1)
    {
      *long long v16 = *v16 & ~(0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8)) | v9[v14] & (0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8));
      *(_DWORD *)(a5 + 8) = v15;
    }
  }
  *(void *)a6 = v16;
  *(_DWORD *)(a6 + 8) = *(_DWORD *)(a5 + 8);
  return __src;
}

void *std::__fill_n[abi:nn180100]<true,std::vector<BOOL>>(void *result, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = result;
  int v4 = *((_DWORD *)result + 2);
  BOOL v5 = (void *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    unint64_t v2 = a2 - v6;
    *uint64_t result = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    uint64_t result = memset(v5, 255, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    int64_t v8 = &v5[v7];
    *uint64_t v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void std::__fill_n[abi:nn180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  int v4 = *(_DWORD *)(a1 + 8);
  BOOL v5 = *(void **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    unint64_t v2 = a2 - v6;
    *(void *)a1 = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    bzero(v5, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    int64_t v8 = &v5[v7];
    *(void *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

void sub_62CC4(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_566C();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      unint64_t v12 = (char *)sub_A524(v4, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    uint64_t v15 = v12;
    long long v16 = &v12[24 * v8];
    uint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    sub_62E2C(a1, &v15);
    sub_62FC8((uint64_t)&v15);
  }
}

void sub_62E18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_62FC8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_62E2C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_62EA4((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_62EA4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_62F48((uint64_t)v11);
  return v9;
}

uint64_t sub_62F48(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_62F80(a1);
  }
  return a1;
}

void sub_62F80(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t sub_62FC8(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_63000(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

unsigned int *sub_6305C(unsigned int *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = 0;
    uint8x8_t v2 = (uint8x8_t)vcnt_s8((int8x8_t)v1[2]);
    v2.i16[0] = vaddlv_u8(v2);
    if (v2.i32[0] == 1 && v1[2] - 2049 >= 0xFFFFF80F)
    {
      uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v1[3]);
      v3.i16[0] = vaddlv_u8(v3);
      if (v3.i32[0] == 1 && v1[3] - 8193 >= 0xFFFFE03F)
      {
        uint8x8_t v5 = (uint8x8_t)vcnt_s8((int8x8_t)v1[4]);
        v5.i16[0] = vaddlv_u8(v5);
        if (v5.i32[0] == 1 && v1[4] - 32769 >= 0xFFFF807F) {
          operator new();
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_63130(uint64_t a1, long long *a2)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = off_741FB0;
  uint8x8_t v3 = (unsigned char *)(a1 + 40716);
  long long v4 = *a2;
  long long v5 = a2[1];
  uint64_t v6 = (unsigned char *)(a1 + 35472);
  *(void *)(a1 + 48) = *((void *)a2 + 4);
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 86) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  uint64_t v7 = (unsigned char *)(a1 + 384);
  uint64_t v8 = 152;
  do
  {
    *(v7 - 224) = 0;
    unsigned char *v7 = 0;
    v7 += 232;
    --v8;
  }
  while (v8);
  uint64_t v9 = 8;
  do
  {
    *(v6 - 48) = 0;
    *uint64_t v6 = 0;
    v6 += 56;
    --v9;
  }
  while (v9);
  unint64_t v10 = (unsigned char *)(a1 + 35904);
  uint64_t v11 = 16;
  do
  {
    *(v10 - 32) = 0;
    unsigned char *v10 = 0;
    v10 += 40;
    --v11;
  }
  while (v11);
  char v12 = (unsigned char *)(a1 + 36616);
  uint64_t v13 = 255;
  do
  {
    *(v12 - 8) = 0;
    unsigned char *v12 = 0;
    v12 += 16;
    --v13;
  }
  while (v13);
  uint64_t v14 = 8;
  do
  {
    *(v3 - 12) = 0;
    *uint8x8_t v3 = 0;
    v3 += 16;
    --v14;
  }
  while (v14);
  uint64_t v15 = -128;
  do
  {
    *(unsigned char *)(a1 + v15 + 40960) = 0;
    *(unsigned char *)(a1 + 40844 + v15 + 128) = 0;
    v15 += 16;
  }
  while (v15);
  for (uint64_t i = 0; i != 128; i += 16)
  {
    *(unsigned char *)(a1 + i + 40960) = 0;
    *(unsigned char *)(a1 + 40972 + i) = 0;
  }
  uint64_t v17 = (unsigned char *)(a1 + 41096);
  do
  {
    *(v17 - 8) = 0;
    *uint64_t v17 = 0;
    v17 += 16;
    --i;
  }
  while (i);
  *(_OWORD *)(a1 + 40688) = 0u;
  bzero((void *)(a1 + 43136), 0x1CB0uLL);
  int v18 = *(_DWORD *)(a1 + 28);
  if (v18 > 1023)
  {
    if (v18 > 4095)
    {
      if (v18 == 4096)
      {
        int v19 = 6;
        goto LABEL_36;
      }
      if (v18 == 0x2000)
      {
        int v19 = 7;
        goto LABEL_36;
      }
    }
    else
    {
      if (v18 == 1024)
      {
        int v19 = 4;
        goto LABEL_36;
      }
      if (v18 == 2048)
      {
        int v19 = 5;
        goto LABEL_36;
      }
    }
  }
  else if (v18 > 255)
  {
    if (v18 == 256)
    {
      int v19 = 2;
      goto LABEL_36;
    }
    if (v18 == 512)
    {
      int v19 = 3;
      goto LABEL_36;
    }
  }
  else
  {
    if (v18 == 64)
    {
      int v19 = 0;
      goto LABEL_36;
    }
    if (v18 == 128)
    {
      int v19 = 1;
LABEL_36:
      *(_DWORD *)(a1 + 100) = v19;
    }
  }
  return a1;
}

void *sub_63344(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _DWORD *a5)
{
  if (a2 && a3)
  {
    v618 = 0;
    uint64_t v8 = *(void *)(a1 + 128);
    if (!v8) {
      operator new();
    }
    v618 = *(void **)(a1 + 128);
    if (*(unsigned char *)(a1 + 92)) {
      uint64_t v9 = *(void *)(a1 + 56);
    }
    else {
      uint64_t v9 = 0;
    }
    if (*(unsigned char *)(a1 + 93)) {
      uint64_t v11 = *(void *)(a1 + 72);
    }
    else {
      uint64_t v11 = 0;
    }
    sub_F63C8(v8, (uint64_t *)(a1 + 136), 1 << (*(_DWORD *)(a1 + 100) + 6), v9, v11);
    uint64_t v580 = *(void *)(v8 + 26024);
    if (a5) {
      *a5 = 0;
    }
    uint64_t v13 = 8 * a3;
    unint64_t v617 = 0;
    if (8 * a3)
    {
      char v574 = a4;
      v567 = a5;
      unint64_t v14 = 0;
      uint64_t v583 = 0;
      v579 = (void **)(a1 + 43136);
      uint64_t v569 = a1 + 43184;
      uint64_t v571 = a1 + 40688;
      uint64_t v570 = a1 + 36608;
      uint64_t v566 = a1 + 41088;
      uint64_t v568 = a1 + 36512;
      uint64_t v572 = a1 + 35424;
      uint64_t v573 = a1 + 35872;
      uint64_t v577 = a1 + 160;
      v578 = (unint64_t *)(a1 + 72);
      v575 = (uint64_t *)(a1 + 56);
      v576 = (unsigned char *)(a1 + 93);
      while (1)
      {
        if (v13 - v14 <= 0x340)
        {
          memset(__s1, 0, sizeof(__s1));
          uint64_t v12 = memcmp(__s1, (const void *)(a2 + (v14 >> 3)), a3 - (v14 >> 3));
          if (!v12) {
            goto LABEL_881;
          }
        }
        char v616 = 0;
        uint64_t v12 = sub_73904((uint64_t)v631, a2, (uint64_t *)&v617, &v616);
        if (!v616) {
          break;
        }
        if (v631[0] >= 0x11u)
        {
          uint64_t v17 = sub_12C18C();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__s1 = 136315650;
            *(void *)&__s1[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/"
                                  "AGXProfilingSupport/APS/AGXPSAPSParserGen1.cpp";
            *(_WORD *)&__s1[12] = 1024;
            *(_DWORD *)&__s1[14] = 994;
            *(_WORD *)&__s1[18] = 2080;
            *(void *)&__s1[20] = "tokenTypeIndex < numTokenTypes";
            _os_log_error_impl(&def_1C1270, v17, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", __s1, 0x1Cu);
          }
          uint64_t v12 = sub_12C17C();
          if (v12) {
            uint64_t v12 = sub_12C184();
          }
        }
        else
        {
          uint64_t v15 = (void *)(v580 + 16 * v631[0]);
          uint64_t v16 = v15[1];
          ++*v15;
          v15[1] = v617 - v14 + v16;
        }
        switch(v631[0])
        {
          case 0:
            unsigned int v18 = (unsigned __int16)v632;
            if (v632 <= 0x97u)
            {
              uint64_t v19 = v577 + 232 * v632;
              int v20 = v618;
              if (!*(unsigned char *)(v19 + 224))
              {
                char v21 = *(unsigned char *)(a1 + 8);
                *(void *)__s1 = (((v618[3259] - v618[3258]) << 29) - 0x100000000) | (((v618[3256] - v618[3255]) >> 3)
                                                                                       - 1);
                memset(&__s1[16], 255, 20);
                __s1[36] = v632;
                char v627 = 0;
                memset(&__s1[40], 0, 64);
                long long v620 = 0u;
                long long v621 = 0u;
                long long __p = 0u;
                long long v623 = 0u;
                char v624 = 0;
                int v628 = 0;
                char v629 = v21;
                sub_45934(v19, (uint64_t)__s1);
                if ((void)__p)
                {
                  *((void *)&__p + 1) = __p;
                  operator delete((void *)__p);
                }
                if (*((void *)&v620 + 1))
                {
                  *(void *)&long long v621 = *((void *)&v620 + 1);
                  operator delete(*((void **)&v620 + 1));
                }
                if (*(void *)&__s1[88])
                {
                  *(void *)&__s1[96] = *(void *)&__s1[88];
                  operator delete(*(void **)&__s1[88]);
                }
                if (*(void *)&__s1[64])
                {
                  *(void *)&__s1[72] = *(void *)&__s1[64];
                  operator delete(*(void **)&__s1[64]);
                }
                if (*(void *)&__s1[40])
                {
                  *(void *)&__s1[48] = *(void *)&__s1[40];
                  operator delete(*(void **)&__s1[40]);
                }
                int v20 = v618;
                unsigned int v18 = (unsigned __int16)v632;
              }
              long long v22 = (char **)(v19 + 40);
              sub_47ECC((void *)(v19 + 40), v20);
              sub_48030((void *)(v19 + 40), 0);
              int v23 = (v18 >> 6) & 0x100 | (v18 >> 8) & 0x3F;
              uint64_t v12 = v19 + 56;
              unint64_t v24 = *(void *)(v19 + 56);
              unint64_t v25 = *(_WORD **)(v19 + 48);
              if ((unint64_t)v25 >= v24)
              {
                uint64_t v174 = (char *)v25 - *v22;
                if (v174 <= -3) {
                  sub_566C();
                }
                uint64_t v175 = v174 >> 1;
                unint64_t v176 = v24 - (void)*v22;
                if (v176 <= (v174 >> 1) + 1) {
                  unint64_t v177 = v175 + 1;
                }
                else {
                  unint64_t v177 = v176;
                }
                if (v176 >= 0x7FFFFFFFFFFFFFFELL) {
                  uint64_t v178 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  uint64_t v178 = v177;
                }
                if (v178) {
                  uint64_t v12 = (uint64_t)sub_45900(v12, v178);
                }
                else {
                  uint64_t v12 = 0;
                }
                uint64_t v285 = (_WORD *)(v12 + 2 * v175);
                _WORD *v285 = v23;
                unint64_t v26 = v285 + 1;
                unint64_t v287 = *(char **)(v19 + 40);
                unint64_t v286 = *(char **)(v19 + 48);
                if (v286 != v287)
                {
                  do
                  {
                    __int16 v288 = *((_WORD *)v286 - 1);
                    v286 -= 2;
                    *--uint64_t v285 = v288;
                  }
                  while (v286 != v287);
                  unint64_t v286 = *v22;
                }
                *(void *)(v19 + 40) = v285;
                *(void *)(v19 + 48) = v26;
                *(void *)(v19 + 56) = v12 + 2 * v178;
                if (v286) {
                  operator delete(v286);
                }
              }
              else
              {
                *unint64_t v25 = v23;
                unint64_t v26 = v25 + 1;
              }
              *(void *)(v19 + 48) = v26;
            }
            goto LABEL_856;
          case 1:
            unint64_t v78 = *(unsigned int *)(a1 + 24);
            unint64_t v79 = *(void *)(a1 + 72);
            if (v79 % v78)
            {
              unint64_t v80 = (v79 + v78 - 1) / v78 * v78;
            }
            else
            {
              if (*(void *)(a1 + 80) == v79 && !*(_DWORD *)(a1 + 96) && *v576) {
                goto LABEL_353;
              }
              unint64_t v80 = v79 + v78;
            }
            unint64_t *v578 = v80;
            uint64_t v148 = v618;
            unint64_t v149 = (unint64_t *)v618[3259];
            unint64_t v150 = v618[3260];
            if ((unint64_t)v149 >= v150)
            {
              uint64_t v12 = v618[3258];
              uint64_t v152 = ((uint64_t)v149 - v12) >> 3;
              if ((unint64_t)(v152 + 1) >> 61) {
                sub_566C();
              }
              unint64_t v153 = v150 - v12;
              unint64_t v154 = (uint64_t)(v150 - v12) >> 2;
              if (v154 <= v152 + 1) {
                unint64_t v154 = v152 + 1;
              }
              if (v153 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v155 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v155 = v154;
              }
              if (v155)
              {
                unint64_t v156 = (char *)sub_5714((uint64_t)(v618 + 3260), v155);
                unint64_t v149 = (unint64_t *)v148[3259];
                uint64_t v12 = v148[3258];
              }
              else
              {
                unint64_t v156 = 0;
              }
              unint64_t v240 = (unint64_t *)&v156[8 * v152];
              *unint64_t v240 = v80;
              unint64_t v151 = v240 + 1;
              while (v149 != (unint64_t *)v12)
              {
                unint64_t v241 = *--v149;
                *--unint64_t v240 = v241;
              }
              v148[3258] = v240;
              v148[3259] = v151;
              v148[3260] = &v156[8 * v155];
              if (v12) {
                operator delete((void *)v12);
              }
            }
            else
            {
              unint64_t *v149 = v80;
              unint64_t v151 = v149 + 1;
            }
            v148[3259] = v151;
            if (!(v80 % v78)) {
              v148[3264] = ((((void)v151 - v148[3258]) << 29) - 0x100000000) | (((v148[3256]
            }
                                                                                                  - v148[3255]) >> 3)
                                                                                  - 1);
LABEL_353:
            ++*(_DWORD *)(a1 + 96);
            goto LABEL_856;
          case 2:
            uint64_t v47 = v618;
            uint64_t v48 = v618[3259];
            uint64_t v49 = v618[3258];
            if (v48 - v49 == 8 && !*(void *)(v48 - 8)) {
              v618[3259] = v49;
            }
            uint64_t v50 = *(void *)(a1 + 56) + (1 << (*(_DWORD *)(a1 + 100) + 6));
            unint64_t v51 = sub_3EFB8(a1, (uint64_t)v47, v632 & 0xFFFFF, v50);
            uint64_t v12 = sub_F6A5C((uint64_t)v47, v576, *(unsigned int *)(a1 + 24), v578, v51);
            if (v51 < *(void *)(a1 + 72))
            {
              unint64_t v52 = sub_12C18C();
              if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)__s1 = 136315650;
                *(void *)&__s1[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupp"
                                      "ort/AGXProfilingSupport/APS/AGXPSAPSParserGen1.cpp";
                *(_WORD *)&__s1[12] = 1024;
                *(_DWORD *)&__s1[14] = 1091;
                *(_WORD *)&__s1[18] = 2080;
                *(void *)&__s1[20] = "uscTimestamp >= parser->lastUSCTimestamp";
                _os_log_error_impl(&def_1C1270, v52, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", __s1, 0x1Cu);
              }
              uint64_t v12 = sub_12C17C();
              if (v12) {
                uint64_t v12 = sub_12C184();
              }
            }
            unint64_t v53 = v618;
            unint64_t v54 = *(unsigned int *)(a1 + 24);
            uint64_t v55 = (unint64_t *)v618[3259];
            unint64_t v56 = v618[3260];
            if ((unint64_t)v55 >= v56)
            {
              uint64_t v12 = v618[3258];
              uint64_t v138 = ((uint64_t)v55 - v12) >> 3;
              if ((unint64_t)(v138 + 1) >> 61) {
                sub_566C();
              }
              unint64_t v139 = v56 - v12;
              unint64_t v140 = (uint64_t)(v56 - v12) >> 2;
              if (v140 <= v138 + 1) {
                unint64_t v140 = v138 + 1;
              }
              if (v139 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v141 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v141 = v140;
              }
              if (v141)
              {
                uint64_t v142 = (char *)sub_5714((uint64_t)(v618 + 3260), v141);
                uint64_t v55 = (unint64_t *)v53[3259];
                uint64_t v12 = v53[3258];
              }
              else
              {
                uint64_t v142 = 0;
              }
              uint64_t v198 = (unint64_t *)&v142[8 * v138];
              *uint64_t v198 = v51;
              uint64_t v57 = v198 + 1;
              while (v55 != (unint64_t *)v12)
              {
                unint64_t v199 = *--v55;
                *--uint64_t v198 = v199;
              }
              v53[3258] = v198;
              v53[3259] = v57;
              v53[3260] = &v142[8 * v141];
              if (v12) {
                operator delete((void *)v12);
              }
            }
            else
            {
              *uint64_t v55 = v51;
              uint64_t v57 = v55 + 1;
            }
            v53[3259] = v57;
            if (!(v51 % v54)) {
              v53[3264] = ((((void)v57 - v53[3258]) << 29) - 0x100000000) | (((v53[3256] - v53[3255]) >> 3)
            }
                                                                               - 1);
            *(void *)(a1 + 72) = v51;
            *(void *)(a1 + 80) = v51;
            *(_DWORD *)(a1 + 88) = v632 & 0xFFFFF;
            *(_DWORD *)(a1 + 96) = 0;
            uint64_t v200 = v618;
            uint64_t v201 = (uint64_t *)v618[3256];
            unint64_t v202 = v618[3257];
            if ((unint64_t)v201 >= v202)
            {
              uint64_t v12 = v618[3255];
              uint64_t v204 = ((uint64_t)v201 - v12) >> 3;
              if ((unint64_t)(v204 + 1) >> 61) {
                sub_566C();
              }
              unint64_t v205 = v202 - v12;
              unint64_t v206 = (uint64_t)(v202 - v12) >> 2;
              if (v206 <= v204 + 1) {
                unint64_t v206 = v204 + 1;
              }
              if (v205 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v207 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v207 = v206;
              }
              if (v207)
              {
                unint64_t v208 = (char *)sub_5714((uint64_t)(v618 + 3257), v207);
                uint64_t v201 = (uint64_t *)v200[3256];
                uint64_t v12 = v200[3255];
              }
              else
              {
                unint64_t v208 = 0;
              }
              uint64_t v209 = (uint64_t *)&v208[8 * v204];
              *uint64_t v209 = v50;
              unint64_t v203 = v209 + 1;
              while (v201 != (uint64_t *)v12)
              {
                uint64_t v210 = *--v201;
                *--uint64_t v209 = v210;
              }
              v200[3255] = v209;
              v200[3256] = v203;
              v200[3257] = &v208[8 * v207];
              if (v12) {
                operator delete((void *)v12);
              }
            }
            else
            {
              *uint64_t v201 = v50;
              unint64_t v203 = v201 + 1;
            }
            v200[3256] = v203;
            uint64_t *v575 = v50;
            int v211 = v618;
            uint64_t v212 = (((v618[3259] - v618[3258]) << 29) - 0x100000000) | (((v618[3256] - v618[3255]) >> 3)
                                                                        - 1);
            uint64_t v213 = (uint64_t *)v618[3262];
            unint64_t v214 = v618[3263];
            if ((unint64_t)v213 >= v214)
            {
              unint64_t v216 = (void **)(v618 + 3261);
              uint64_t v217 = v618[3261];
              uint64_t v218 = ((uint64_t)v213 - v217) >> 3;
              if ((unint64_t)(v218 + 1) >> 61) {
                sub_566C();
              }
              uint64_t v219 = v214 - v217;
              uint64_t v220 = v219 >> 2;
              if (v219 >> 2 <= (unint64_t)(v218 + 1)) {
                uint64_t v220 = v218 + 1;
              }
              if ((unint64_t)v219 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v221 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v221 = v220;
              }
              if (v221) {
                uint64_t v12 = (uint64_t)sub_5714((uint64_t)(v618 + 3263), v221);
              }
              else {
                uint64_t v12 = 0;
              }
              uint64_t v236 = (uint64_t *)(v12 + 8 * v218);
              uint64_t *v236 = v212;
              unint64_t v215 = v236 + 1;
              uint64_t v237 = (char *)v211[3262];
              unint64_t v238 = (char *)v211[3261];
              if (v237 != v238)
              {
                do
                {
                  uint64_t v239 = *((void *)v237 - 1);
                  v237 -= 8;
                  *--uint64_t v236 = v239;
                }
                while (v237 != v238);
                uint64_t v237 = (char *)*v216;
              }
              v211[3261] = v236;
              v211[3262] = v215;
              v211[3263] = v12 + 8 * v221;
              if (v237) {
                operator delete(v237);
              }
            }
            else
            {
              *uint64_t v213 = v212;
              unint64_t v215 = v213 + 1;
            }
            v211[3262] = v215;
            goto LABEL_856;
          case 3:
            unint64_t v63 = v618;
            uint64_t v64 = v618[3256];
            uint64_t v65 = v618[3255];
            if (v64 - v65 == 8 && !*(void *)(v64 - 8)) {
              v618[3256] = v65;
            }
            uint64_t v66 = v63[3259];
            uint64_t v67 = v63[3258];
            if (v66 - v67 == 8 && !*(void *)(v66 - 8)) {
              v63[3259] = v67;
            }
            unint64_t v68 = *((void *)&v632 + 1) & 0x3FFFFFFFFFFFFFLL;
            unint64_t v69 = sub_3EFB8(a1, (uint64_t)v63, v632 & 0xFFFFF, *((void *)&v632 + 1) & 0x3FFFFFFFFFFFFFLL);
            sub_F6A04((uint64_t)v63, (unsigned char *)(a1 + 92), 1 << (*(_DWORD *)(a1 + 100) + 6), v575, v68);
            uint64_t v12 = sub_F6A5C((uint64_t)v618, v576, *(unsigned int *)(a1 + 24), v578, v69);
            if ((*((void *)&v632 + 1) & 0x3FFFFFFFFFFFFFuLL) <= *(void *)(a1 + 56))
            {
              unint64_t v70 = sub_12C18C();
              if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)__s1 = 136315650;
                *(void *)&__s1[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupp"
                                      "ort/AGXProfilingSupport/APS/AGXPSAPSParserGen1.cpp";
                *(_WORD *)&__s1[12] = 1024;
                *(_DWORD *)&__s1[14] = 1035;
                *(_WORD *)&__s1[18] = 2080;
                *(void *)&__s1[20] = "token.bits.tok.timeStamp.systemTime > parser->lastSystemTimestamp";
                _os_log_error_impl(&def_1C1270, v70, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", __s1, 0x1Cu);
              }
              uint64_t v12 = sub_12C17C();
              if (v12) {
                uint64_t v12 = sub_12C184();
              }
            }
            uint64_t v71 = v618;
            uint64_t v72 = *((void *)&v632 + 1) & 0x3FFFFFFFFFFFFFLL;
            uint64_t v73 = (uint64_t *)v618[3256];
            unint64_t v74 = v618[3257];
            if ((unint64_t)v73 >= v74)
            {
              uint64_t v12 = v618[3255];
              uint64_t v143 = ((uint64_t)v73 - v12) >> 3;
              if ((unint64_t)(v143 + 1) >> 61) {
                sub_566C();
              }
              unint64_t v144 = v74 - v12;
              unint64_t v145 = (uint64_t)(v74 - v12) >> 2;
              if (v145 <= v143 + 1) {
                unint64_t v145 = v143 + 1;
              }
              if (v144 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v146 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v146 = v145;
              }
              if (v146)
              {
                unint64_t v147 = (char *)sub_5714((uint64_t)(v618 + 3257), v146);
                uint64_t v73 = (uint64_t *)v71[3256];
                uint64_t v12 = v71[3255];
              }
              else
              {
                unint64_t v147 = 0;
              }
              unint64_t v222 = (uint64_t *)&v147[8 * v143];
              uint64_t *v222 = v72;
              unint64_t v75 = v222 + 1;
              while (v73 != (uint64_t *)v12)
              {
                uint64_t v223 = *--v73;
                *--unint64_t v222 = v223;
              }
              v71[3255] = v222;
              v71[3256] = v75;
              v71[3257] = &v147[8 * v146];
              if (v12) {
                operator delete((void *)v12);
              }
            }
            else
            {
              uint64_t *v73 = v72;
              unint64_t v75 = v73 + 1;
            }
            v71[3256] = v75;
            unint64_t v224 = *v578;
            if (v69 <= *v578)
            {
              if (v69 >= *v578) {
                goto LABEL_484;
              }
              *(void *)(a1 + 80) = v224;
              int v230 = (v632 & 0xFFFFF) + v69 - v224;
            }
            else
            {
              uint64_t v225 = v618;
              unint64_t v226 = *(unsigned int *)(a1 + 24);
              unint64_t v227 = (unint64_t *)v618[3259];
              unint64_t v228 = v618[3260];
              if ((unint64_t)v227 >= v228)
              {
                uint64_t v12 = v618[3258];
                uint64_t v231 = ((uint64_t)v227 - v12) >> 3;
                if ((unint64_t)(v231 + 1) >> 61) {
                  sub_566C();
                }
                unint64_t v232 = v228 - v12;
                unint64_t v233 = (uint64_t)(v228 - v12) >> 2;
                if (v233 <= v231 + 1) {
                  unint64_t v233 = v231 + 1;
                }
                if (v232 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v234 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v234 = v233;
                }
                if (v234)
                {
                  int v235 = (char *)sub_5714((uint64_t)(v618 + 3260), v234);
                  unint64_t v227 = (unint64_t *)v225[3259];
                  uint64_t v12 = v225[3258];
                }
                else
                {
                  int v235 = 0;
                }
                v313 = (unint64_t *)&v235[8 * v231];
                unint64_t *v313 = v69;
                uint64_t v229 = v313 + 1;
                while (v227 != (unint64_t *)v12)
                {
                  unint64_t v314 = *--v227;
                  *--v313 = v314;
                }
                v225[3258] = v313;
                v225[3259] = v229;
                v225[3260] = &v235[8 * v234];
                if (v12) {
                  operator delete((void *)v12);
                }
              }
              else
              {
                *unint64_t v227 = v69;
                uint64_t v229 = v227 + 1;
              }
              v225[3259] = v229;
              if (!(v69 % v226)) {
                v225[3264] = ((((void)v229 - v225[3258]) << 29) - 0x100000000) | (((v225[3256] - v225[3255]) >> 3)
              }
                                                                                    - 1);
              *(void *)(a1 + 72) = v69;
              *(void *)(a1 + 80) = v69;
              int v230 = v632 & 0xFFFFF;
            }
            *(_DWORD *)(a1 + 88) = v230;
LABEL_484:
            *(_DWORD *)(a1 + 96) = 0;
            uint64_t v315 = v618;
            uint64_t v316 = (((v618[3259] - v618[3258]) << 29) - 0x100000000) | (((v618[3256] - v618[3255]) >> 3)
                                                                        - 1);
            unint64_t v317 = (uint64_t *)v618[3262];
            unint64_t v318 = v618[3263];
            if ((unint64_t)v317 >= v318)
            {
              v320 = (void **)(v618 + 3261);
              uint64_t v321 = v618[3261];
              uint64_t v322 = ((uint64_t)v317 - v321) >> 3;
              if ((unint64_t)(v322 + 1) >> 61) {
                sub_566C();
              }
              uint64_t v323 = v318 - v321;
              uint64_t v324 = v323 >> 2;
              if (v323 >> 2 <= (unint64_t)(v322 + 1)) {
                uint64_t v324 = v322 + 1;
              }
              if ((unint64_t)v323 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v325 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v325 = v324;
              }
              if (v325) {
                uint64_t v12 = (uint64_t)sub_5714((uint64_t)(v618 + 3263), v325);
              }
              else {
                uint64_t v12 = 0;
              }
              v326 = (uint64_t *)(v12 + 8 * v322);
              uint64_t *v326 = v316;
              v319 = v326 + 1;
              uint64_t v327 = (char *)v315[3262];
              unint64_t v328 = (char *)v315[3261];
              if (v327 != v328)
              {
                do
                {
                  uint64_t v329 = *((void *)v327 - 1);
                  v327 -= 8;
                  *--v326 = v329;
                }
                while (v327 != v328);
                uint64_t v327 = (char *)*v320;
              }
              v315[3261] = v326;
              v315[3262] = v319;
              v315[3263] = v12 + 8 * v325;
              if (v327) {
                operator delete(v327);
              }
            }
            else
            {
              *unint64_t v317 = v316;
              v319 = v317 + 1;
            }
            v315[3262] = v319;
            uint64_t v330 = *((void *)&v632 + 1) & 0x3FFFFFFFFFFFFFLL;
            *(void *)(a1 + 56) = *((void *)&v632 + 1) & 0x3FFFFFFFFFFFFFLL;
            *(void *)(a1 + 64) = v330;
            *(_DWORD *)(a1 + 100) = v633;
            goto LABEL_856;
          case 4:
            unint64_t v30 = sub_12C18C();
            if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__s1 = 136315650;
              *(void *)&__s1[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSuppor"
                                    "t/AGXProfilingSupport/APS/AGXPSAPSParserGen1.cpp";
              *(_WORD *)&__s1[12] = 1024;
              *(_DWORD *)&__s1[14] = 1153;
              *(_WORD *)&__s1[18] = 2080;
              *(void *)&__s1[20] = "false";
              _os_log_error_impl(&def_1C1270, v30, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", __s1, 0x1Cu);
            }
            uint64_t v12 = sub_12C17C();
            if (v12) {
              uint64_t v12 = sub_12C184();
            }
            goto LABEL_856;
          case 5:
            int v81 = v632;
            unsigned int v82 = BYTE4(v632);
            BOOL v83 = v632 == 1;
            if (v632 == 1) {
              unsigned int v84 = BYTE4(v632) & 7 | 0x60;
            }
            else {
              unsigned int v84 = BYTE4(v632);
            }
            if (v84 > 0x97) {
              goto LABEL_856;
            }
            char v85 = BYTE5(v632);
            unsigned int v86 = DWORD2(v632);
            uint64_t v87 = v577 + 232 * v84;
            if (!*(unsigned char *)(v87 + 224))
            {
              char v88 = *(unsigned char *)(a1 + 8);
              *(void *)__s1 = (((v618[3259] - v618[3258]) << 29) - 0x100000000) | (((v618[3256] - v618[3255]) >> 3)
                                                                                     - 1);
              memset(&__s1[16], 255, 20);
              __s1[36] = v84;
              char v627 = 0;
              memset(&__s1[40], 0, 64);
              long long v620 = 0u;
              long long v621 = 0u;
              long long __p = 0u;
              long long v623 = 0u;
              char v624 = 0;
              int v628 = 0;
              char v629 = v88;
              sub_45934(v87, (uint64_t)__s1);
              if ((void)__p)
              {
                *((void *)&__p + 1) = __p;
                operator delete((void *)__p);
              }
              if (*((void *)&v620 + 1))
              {
                *(void *)&long long v621 = *((void *)&v620 + 1);
                operator delete(*((void **)&v620 + 1));
              }
              if (*(void *)&__s1[88])
              {
                *(void *)&__s1[96] = *(void *)&__s1[88];
                operator delete(*(void **)&__s1[88]);
              }
              if (*(void *)&__s1[64])
              {
                *(void *)&__s1[72] = *(void *)&__s1[64];
                operator delete(*(void **)&__s1[64]);
              }
              uint64_t v12 = *(void *)&__s1[40];
              if (*(void *)&__s1[40])
              {
                *(void *)&__s1[48] = *(void *)&__s1[40];
                operator delete(*(void **)&__s1[40]);
              }
              if (!*(unsigned char *)(v87 + 224)) {
                sub_8894();
              }
            }
            *(unsigned char *)(v87 + 215) = v83;
            *(unsigned char *)(v87 + 214) = 1;
            *(unsigned char *)(v87 + 36) = v84;
            if (v81)
            {
              uint64_t v89 = *(void *)(a1 + 104);
              if (v89 == -1) {
                uint64_t v89 = 0;
              }
              *(void *)(a1 + 104) = v89 + 1;
              *(void *)(v87 + 16) = v89;
              uint64_t v90 = v566 + 16 * (v85 & 0x7F);
              *(void *)uint64_t v90 = v89;
              *(unsigned char *)(v90 + 8) = 1;
              unsigned int v82 = *(unsigned __int8 *)(v87 + 36);
            }
            else
            {
              *(unsigned char *)(v87 + 36) = v82;
              if (v86 <= 7)
              {
                unsigned int v189 = *(_DWORD *)(v568 + 12 * v86);
                *(_DWORD *)(v87 + 208) = v189;
                if (v189 <= 7)
                {
                  uint64_t v190 = v572 + 56 * v189;
                  if (*(unsigned char *)(v190 + 48)) {
                    *(_DWORD *)(v87 + 32) = *(_DWORD *)(v190 + 24);
                  }
                }
                uint64_t v191 = v566 + 16 * (*(unsigned char *)(v568 + 12 * v86 + 8) & 0x7F);
                if (*(unsigned char *)(v191 + 8)) {
                  *(void *)(v87 + 16) = *(void *)v191;
                }
                if (v86 - 4 <= 2)
                {
                  uint64_t v192 = v573 + 40 * (v86 - 4);
                  if (*(unsigned char *)(v192 + 32)) {
                    *(void *)(v87 + 24) = *(void *)(v192 + 16);
                  }
                }
              }
            }
            if (v82 < 0x60) {
              goto LABEL_271;
            }
            if (v82 >= 0x68)
            {
              if (v82 < 0x98) {
                goto LABEL_856;
              }
            }
            else if (*(unsigned char *)(v87 + 215))
            {
              goto LABEL_856;
            }
LABEL_271:
            BOOL v193 = (*(_DWORD *)(v87 + 208) - 5) >= 0xFFFFFFFE && *(unsigned char *)(v87 + 216) == 0;
            if (!v193 && *(void *)(v569 + 48 * v84 + 40))
            {
              uint64_t v194 = v569 + 48 * v84;
              uint64_t v196 = *(void *)(v194 + 8);
              uint64_t v195 = (void *)(v194 + 8);
              if (*(unsigned char *)(*(void *)(*(void *)(v196 + ((v195[3] >> 6) & 0x3FFFFFFFFFFFFF8))
                                        + 8 * (v195[3] & 0x1FFLL))
                            + 32))
              {
                unint64_t v197 = sub_12C18C();
                if (os_log_type_enabled(v197, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)__s1 = 136315650;
                  *(void *)&__s1[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSu"
                                        "pport/AGXProfilingSupport/APS/AGXPSAPSParserGen1.cpp";
                  *(_WORD *)&__s1[12] = 1024;
                  *(_DWORD *)&__s1[14] = 1429;
                  *(_WORD *)&__s1[18] = 2080;
                  *(void *)&__s1[20] = "!pendingPositionsForClique.front()->cliqueStartSeen";
                  _os_log_error_impl(&def_1C1270, v197, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", __s1, 0x1Cu);
                }
                if (sub_12C17C()) {
                  sub_12C184();
                }
              }
              *(unsigned char *)(*(void *)(*(void *)(*v195 + ((v195[3] >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * (v195[3] & 0x1FFLL))
                       + 32) = 1;
              *(unsigned char *)(v87 + 213) = 1;
              sub_79FD0(a1, v618);
            }
            goto LABEL_856;
          case 6:
            sub_736D4(a1, v618, v632, 0);
            goto LABEL_856;
          case 7:
            if (DWORD1(v632) == 1)
            {
              uint64_t v76 = (*((void *)&v632 + 1) >> 5) & 0x7FFFFFFFFFFLL;
              uint64_t v77 = v570 + 16 * (BYTE8(v632) & 0x1F);
              *(void *)uint64_t v77 = v76;
              *(unsigned char *)(v77 + 8) = 1;
            }
            else
            {
              if (BYTE8(v632) == 255) {
                goto LABEL_856;
              }
              uint64_t v132 = v570 + 16 * BYTE8(v632);
              if (!*(unsigned char *)(v132 + 8)) {
                goto LABEL_856;
              }
              uint64_t v76 = *(void *)v132;
            }
            if (v632 <= 0x97uLL)
            {
              uint64_t v133 = v577 + 232 * v632;
              if (!*(unsigned char *)(v133 + 224))
              {
                char v134 = *(unsigned char *)(a1 + 8);
                *(void *)__s1 = (((v618[3259] - v618[3258]) << 29) - 0x100000000) | (((v618[3256] - v618[3255]) >> 3)
                                                                                       - 1);
                memset(&__s1[16], 255, 20);
                __s1[36] = v632;
                char v627 = 0;
                memset(&__s1[40], 0, 64);
                long long v620 = 0u;
                long long v621 = 0u;
                long long __p = 0u;
                long long v623 = 0u;
                char v624 = 0;
                int v628 = 0;
                char v629 = v134;
                sub_45934(v133, (uint64_t)__s1);
                if ((void)__p)
                {
                  *((void *)&__p + 1) = __p;
                  operator delete((void *)__p);
                }
                if (*((void *)&v620 + 1))
                {
                  *(void *)&long long v621 = *((void *)&v620 + 1);
                  operator delete(*((void **)&v620 + 1));
                }
                if (*(void *)&__s1[88])
                {
                  *(void *)&__s1[96] = *(void *)&__s1[88];
                  operator delete(*(void **)&__s1[88]);
                }
                if (*(void *)&__s1[64])
                {
                  *(void *)&__s1[72] = *(void *)&__s1[64];
                  operator delete(*(void **)&__s1[64]);
                }
                uint64_t v12 = *(void *)&__s1[40];
                if (*(void *)&__s1[40])
                {
                  *(void *)&__s1[48] = *(void *)&__s1[40];
                  operator delete(*(void **)&__s1[40]);
                }
              }
              unint64_t v135 = *(void *)(v133 + 80);
              uint64_t v136 = *(uint64_t **)(v133 + 72);
              if ((unint64_t)v136 >= v135)
              {
                uint64_t v12 = *(void *)(v133 + 64);
                uint64_t v242 = ((uint64_t)v136 - v12) >> 3;
                if ((unint64_t)(v242 + 1) >> 61) {
                  sub_566C();
                }
                unint64_t v243 = v135 - v12;
                unint64_t v244 = (uint64_t)(v135 - v12) >> 2;
                if (v244 <= v242 + 1) {
                  unint64_t v244 = v242 + 1;
                }
                if (v243 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v245 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v245 = v244;
                }
                if (v245)
                {
                  unint64_t v246 = (char *)sub_5714(v133 + 80, v245);
                  uint64_t v12 = *(void *)(v133 + 64);
                  uint64_t v136 = *(uint64_t **)(v133 + 72);
                }
                else
                {
                  unint64_t v246 = 0;
                }
                v338 = (uint64_t *)&v246[8 * v242];
                uint64_t *v338 = v76;
                uint64_t v137 = v338 + 1;
                while (v136 != (uint64_t *)v12)
                {
                  uint64_t v339 = *--v136;
                  *--v338 = v339;
                }
                *(void *)(v133 + 64) = v338;
                *(void *)(v133 + 72) = v137;
                *(void *)(v133 + 80) = &v246[8 * v245];
                if (v12) {
                  operator delete((void *)v12);
                }
              }
              else
              {
                *uint64_t v136 = v76;
                uint64_t v137 = v136 + 1;
              }
              *(void *)(v133 + 72) = v137;
            }
            goto LABEL_856;
          case 8:
            unint64_t v108 = (void *)(a1 + 43136);
            uint64_t v109 = *(char **)(a1 + 43152);
            unsigned int v110 = v632;
            unint64_t v111 = *(char **)(a1 + 43144);
            uint64_t v112 = v109 - v111;
            *(_OWORD *)__s1 = v632;
            *(_OWORD *)&__s1[16] = v633;
            __s1[32] = 0;
            __s1[40] = 0;
            unsigned __int8 v630 = 0;
            if (v109 == v111) {
              uint64_t v113 = 0;
            }
            else {
              uint64_t v113 = 2 * (v109 - v111) - 1;
            }
            unint64_t v114 = *(void *)(a1 + 43168);
            if (v113 != *(void *)(a1 + 43176) + v114) {
              goto LABEL_752;
            }
            BOOL v115 = v114 >= 0x10;
            unint64_t v116 = v114 - 16;
            if (v115)
            {
              unint64_t v108 = (void *)(a1 + 43136);
              *(void *)(a1 + 43168) = v116;
              uint64_t v119 = *(void *)v111;
              unint64_t v118 = v111 + 8;
              uint64_t v117 = v119;
              *(void *)(a1 + 43144) = v118;
              if (v109 == *(char **)(a1 + 43160))
              {
                unint64_t v120 = (char *)*v579;
                if (v118 <= *v579)
                {
                  if (v109 == v120) {
                    unint64_t v340 = 1;
                  }
                  else {
                    unint64_t v340 = (v109 - v120) >> 2;
                  }
                  if (v340 >> 61) {
LABEL_921:
                  }
                    sub_574C();
                  unint64_t v341 = (char *)operator new(8 * v340);
                  unint64_t v342 = &v341[8 * (v340 >> 2)];
                  uint64_t v343 = v109 - v118;
                  BOOL v193 = v109 == v118;
                  uint64_t v109 = v342;
                  if (!v193)
                  {
                    uint64_t v109 = &v342[v343 & 0xFFFFFFFFFFFFFFF8];
                    uint64_t v344 = 8 * (v343 >> 3);
                    uint64_t v345 = &v341[8 * (v340 >> 2)];
                    do
                    {
                      uint64_t v346 = *(void *)v118;
                      v118 += 8;
                      *(void *)uint64_t v345 = v346;
                      v345 += 8;
                      v344 -= 8;
                    }
                    while (v344);
                  }
                  unint64_t v108 = (void *)(a1 + 43136);
                  *v579 = v341;
                  *(void *)(a1 + 43144) = v342;
                  *(void *)(a1 + 43152) = v109;
                  *(void *)(a1 + 43160) = &v341[8 * v340];
                  if (v120)
                  {
                    operator delete(v120);
                    uint64_t v109 = *(char **)(a1 + 43152);
                  }
                }
                else
                {
                  uint64_t v121 = (v118 - (unsigned char *)*v579) >> 3;
                  if (v121 >= -1) {
                    uint64_t v122 = v121 + 1;
                  }
                  else {
                    uint64_t v122 = v121 + 2;
                  }
                  uint64_t v123 = &v118[-8 * (v122 >> 1)];
                  int64_t v124 = v109 - v118;
                  unint64_t v108 = (void *)(a1 + 43136);
                  if (v109 != v118)
                  {
                    memmove(&v118[-8 * (v122 >> 1)], v118, v109 - v118);
                    uint64_t v109 = *(char **)(a1 + 43144);
                  }
                  uint64_t v125 = &v109[-8 * (v122 >> 1)];
                  uint64_t v109 = &v123[v124];
                  *(void *)(a1 + 43144) = v125;
                  *(void *)(a1 + 43152) = &v123[v124];
                }
              }
              *(void *)uint64_t v109 = v117;
              goto LABEL_751;
            }
            uint64_t v163 = v112 >> 3;
            unint64_t v164 = *(char **)(a1 + 43160);
            unint64_t v165 = (char *)*v579;
            uint64_t v166 = v164 - (unsigned char *)*v579;
            if (v112 >> 3 < (unint64_t)(v166 >> 3))
            {
              unint64_t v167 = operator new(0x1100uLL);
              unint64_t v168 = v167;
              if (v164 == v109)
              {
                if (v111 == v165)
                {
                  if (v109 == v111) {
                    unint64_t v439 = 1;
                  }
                  else {
                    unint64_t v439 = (v164 - v111) >> 2;
                  }
                  if (v439 >> 61) {
                    goto LABEL_921;
                  }
                  uint64_t v440 = (char *)operator new(8 * v439);
                  unint64_t v347 = &v440[(2 * v439 + 6) & 0xFFFFFFFFFFFFFFF8];
                  unint64_t v441 = v347;
                  if (v109 != v111)
                  {
                    uint64_t v442 = 8 * v163;
                    unint64_t v443 = &v440[(2 * v439 + 6) & 0xFFFFFFFFFFFFFFF8];
                    v444 = v111;
                    unint64_t v441 = &v347[8 * v163];
                    do
                    {
                      uint64_t v445 = *(void *)v444;
                      v444 += 8;
                      *(void *)unint64_t v443 = v445;
                      v443 += 8;
                      v442 -= 8;
                    }
                    while (v442);
                  }
                  unint64_t v348 = (void *)(a1 + 43136);
                  *v579 = v440;
                  *(void *)(a1 + 43144) = v347;
                  *(void *)(a1 + 43152) = v441;
                  *(void *)(a1 + 43160) = &v440[8 * v439];
                  if (v111)
                  {
                    operator delete(v111);
                    unint64_t v347 = *(char **)(a1 + 43144);
                  }
                }
                else
                {
                  unint64_t v347 = v111;
                  unint64_t v348 = (void *)(a1 + 43136);
                }
                *((void *)v347 - 1) = v168;
                uint64_t v447 = (char *)v348[1];
                v446 = (char *)v348[2];
                v348[1] = v447 - 8;
                uint64_t v448 = *((void *)v447 - 1);
                v348[1] = v447;
                if (v446 == (char *)v348[3])
                {
                  v449 = (char *)*v579;
                  if (v447 <= *v579)
                  {
                    if (v446 == v449) {
                      unint64_t v456 = 1;
                    }
                    else {
                      unint64_t v456 = (v446 - v449) >> 2;
                    }
                    if (v456 >> 61) {
                      goto LABEL_921;
                    }
                    unint64_t v457 = (char *)operator new(8 * v456);
                    unint64_t v458 = &v457[8 * (v456 >> 2)];
                    uint64_t v459 = v446 - v447;
                    BOOL v193 = v446 == v447;
                    v446 = v458;
                    if (!v193)
                    {
                      v446 = &v458[v459 & 0xFFFFFFFFFFFFFFF8];
                      uint64_t v460 = 8 * (v459 >> 3);
                      v461 = &v457[8 * (v456 >> 2)];
                      do
                      {
                        uint64_t v462 = *(void *)v447;
                        v447 += 8;
                        *(void *)v461 = v462;
                        v461 += 8;
                        v460 -= 8;
                      }
                      while (v460);
                    }
                    *v579 = v457;
                    *(void *)(a1 + 43144) = v458;
                    *(void *)(a1 + 43152) = v446;
                    *(void *)(a1 + 43160) = &v457[8 * v456];
                    if (v449)
                    {
                      operator delete(v449);
                      v446 = *(char **)(a1 + 43152);
                    }
                  }
                  else
                  {
                    unsigned int v450 = v110;
                    uint64_t v451 = (v447 - (unsigned char *)*v579) >> 3;
                    if (v451 >= -1) {
                      uint64_t v452 = v451 + 1;
                    }
                    else {
                      uint64_t v452 = v451 + 2;
                    }
                    v453 = &v447[-8 * (v452 >> 1)];
                    int64_t v454 = v446 - v447;
                    if (v446 == v447)
                    {
                      uint64_t v455 = a1 + 43136;
                    }
                    else
                    {
                      memmove(&v447[-8 * (v452 >> 1)], v447, v446 - v447);
                      uint64_t v455 = a1 + 43136;
                      uint64_t v447 = *(char **)(a1 + 43144);
                    }
                    v446 = &v453[v454];
                    *(void *)(v455 + 8) = &v447[-8 * (v452 >> 1)];
                    *(void *)(v455 + 16) = &v453[v454];
                    unsigned int v110 = v450;
                  }
                }
                *(void *)v446 = v448;
              }
              else
              {
                *(void *)uint64_t v109 = v167;
              }
              unint64_t v108 = (void *)(a1 + 43136);
LABEL_751:
              v108[2] += 8;
              goto LABEL_752;
            }
            uint64_t v251 = v166 >> 2;
            if (v164 == v165) {
              unint64_t v252 = 1;
            }
            else {
              unint64_t v252 = v251;
            }
            if (v252 >> 61) {
              goto LABEL_921;
            }
            uint64_t v253 = (char *)operator new(8 * v252);
            unsigned int v563 = v110;
            v254 = operator new(0x1100uLL);
            uint64_t v255 = &v253[8 * v163];
            unint64_t v256 = &v253[8 * v252];
            if (v163 == v252)
            {
              if (v112 < 1)
              {
                if (v109 == v111) {
                  unint64_t v423 = 1;
                }
                else {
                  unint64_t v423 = v112 >> 2;
                }
                if (v423 >> 61) {
                  sub_574C();
                }
                v424 = (char *)operator new(8 * v423);
                uint64_t v255 = &v424[8 * (v423 >> 2)];
                unint64_t v256 = &v424[8 * v423];
                operator delete(v253);
                unint64_t v111 = *(char **)(a1 + 43144);
                uint64_t v109 = *(char **)(a1 + 43152);
                uint64_t v253 = v424;
              }
              else
              {
                unint64_t v257 = v163 + 2;
                if (v163 >= -1) {
                  unint64_t v257 = v163 + 1;
                }
                v255 -= 8 * (v257 >> 1);
              }
            }
            *(void *)uint64_t v255 = v254;
            uint64_t v425 = v255 + 8;
            if (v109 != v111)
            {
              do
              {
                if (v255 == v253)
                {
                  if (v425 >= v256)
                  {
                    if (v256 == v255) {
                      unint64_t v430 = 1;
                    }
                    else {
                      unint64_t v430 = (v256 - v255) >> 2;
                    }
                    if (v430 >> 61) {
                      sub_574C();
                    }
                    int v431 = (char *)operator new(8 * v430);
                    uint64_t v253 = v431;
                    uint64_t v426 = &v431[(2 * v430 + 6) & 0xFFFFFFFFFFFFFFF8];
                    unint64_t v427 = v426;
                    uint64_t v432 = v425 - v255;
                    if (v425 != v255)
                    {
                      unint64_t v427 = &v426[v432 & 0xFFFFFFFFFFFFFFF8];
                      uint64_t v433 = 8 * (v432 >> 3);
                      v434 = &v431[(2 * v430 + 6) & 0xFFFFFFFFFFFFFFF8];
                      uint64_t v435 = v255;
                      do
                      {
                        uint64_t v436 = *(void *)v435;
                        v435 += 8;
                        *(void *)v434 = v436;
                        v434 += 8;
                        v433 -= 8;
                      }
                      while (v433);
                    }
                    unint64_t v256 = &v431[8 * v430];
                    operator delete(v255);
                  }
                  else
                  {
                    uint64_t v428 = (v256 - v425) >> 3;
                    if (v428 >= -1) {
                      unint64_t v429 = v428 + 1;
                    }
                    else {
                      unint64_t v429 = v428 + 2;
                    }
                    unint64_t v427 = &v425[8 * (v429 >> 1)];
                    uint64_t v426 = &v255[8 * (v429 >> 1)];
                    if (v425 == v255)
                    {
                      uint64_t v253 = v425;
                    }
                    else
                    {
                      memmove(&v255[8 * (v429 >> 1)], v255, v425 - v255);
                      uint64_t v253 = v255;
                    }
                  }
                }
                else
                {
                  uint64_t v426 = v255;
                  unint64_t v427 = v425;
                }
                uint64_t v437 = *((void *)v109 - 1);
                v109 -= 8;
                *((void *)v426 - 1) = v437;
                uint64_t v255 = v426 - 8;
                uint64_t v425 = v427;
              }
              while (v109 != *(char **)(a1 + 43144));
            }
            unint64_t v108 = (void *)(a1 + 43136);
            v438 = *v579;
            *v579 = v253;
            *(void *)(a1 + 43144) = v255;
            *(void *)(a1 + 43152) = v425;
            *(void *)(a1 + 43160) = v256;
            unsigned int v110 = v563;
            if (v438) {
              operator delete(v438);
            }
LABEL_752:
            unint64_t v463 = v108[5] + v108[4];
            uint64_t v464 = *(void *)(v108[1] + ((v463 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 272 * (v463 & 0xF);
            long long v465 = *(_OWORD *)__s1;
            long long v466 = *(_OWORD *)&__s1[16];
            *(unsigned char *)(v464 + 32) = __s1[32];
            *(_OWORD *)uint64_t v464 = v465;
            *(_OWORD *)(v464 + 16) = v466;
            *(unsigned char *)(v464 + 264) = 0;
            *(unsigned char *)(v464 + 40) = 0;
            uint64_t v12 = v464 + 40;
            if (v630)
            {
              sub_459E8(v12, (long long *)&__s1[40]);
              int v467 = v630;
              ++v108[5];
              if (v467)
              {
                if (v625)
                {
                  v626 = v625;
                  operator delete(v625);
                }
                if ((void)v623) {
                  operator delete((void *)v623);
                }
                if (*((void *)&v621 + 1)) {
                  operator delete(*((void **)&v621 + 1));
                }
                if ((void)v620) {
                  operator delete((void *)v620);
                }
                uint64_t v12 = *(void *)&__s1[80];
                if (*(void *)&__s1[80]) {
                  operator delete(*(void **)&__s1[80]);
                }
              }
            }
            else
            {
              ++v108[5];
            }
            if (v110 > 0x97) {
              goto LABEL_856;
            }
            v468 = (uint64_t *)(v569 + 48 * v110);
            v469 = (char *)v468[2];
            v470 = (char *)v468[1];
            uint64_t v471 = ((v469 - v470) << 6) - 1;
            uint64_t v472 = v469 - v470;
            unint64_t v473 = *(void *)(a1 + 43176) + *(void *)(a1 + 43168) - 1;
            uint64_t v565 = *(void *)(*(void *)(a1 + 43144) + ((v473 >> 1) & 0x7FFFFFFFFFFFFFF8));
            v475 = (unint64_t *)(v468 + 4);
            unint64_t v474 = v468[4];
            if (v469 == v470) {
              uint64_t v471 = 0;
            }
            v476 = v468 + 5;
            if (v471 != v468[5] + v474) {
              goto LABEL_851;
            }
            BOOL v115 = v474 >= 0x200;
            unint64_t v477 = v474 - 512;
            if (v115)
            {
              char v478 = *(unsigned char *)(a1 + 43176) + *(unsigned char *)(a1 + 43168) - 1;
              unint64_t *v475 = v477;
              unint64_t v480 = *(void *)v470;
              v479 = v470 + 8;
              unint64_t v473 = v480;
              v468[1] = (uint64_t)v479;
              if (v469 == (char *)v468[3])
              {
                v481 = (char *)*v468;
                if ((unint64_t)v479 <= *v468)
                {
                  if (v469 == v481) {
                    unint64_t v499 = 1;
                  }
                  else {
                    unint64_t v499 = (v469 - v481) >> 2;
                  }
                  if (v499 >> 61) {
                    sub_574C();
                  }
                  uint64_t v12 = (uint64_t)operator new(8 * v499);
                  unint64_t v500 = v12 + 8 * (v499 >> 2);
                  v501 = (char *)v500;
                  if (v469 != v479)
                  {
                    v501 = (char *)(v500 + ((v469 - v479) & 0xFFFFFFFFFFFFFFF8));
                    uint64_t v502 = 8 * ((v469 - v479) >> 3);
                    v503 = (void *)(v12 + 8 * (v499 >> 2));
                    do
                    {
                      uint64_t v504 = *(void *)v479;
                      v479 += 8;
                      *v503++ = v504;
                      v502 -= 8;
                    }
                    while (v502);
                  }
                  uint64_t *v468 = v12;
                  v468[1] = v500;
                  v468[2] = (uint64_t)v501;
                  v468[3] = v12 + 8 * v499;
                  v469 = v501;
                  v475 = (unint64_t *)(v468 + 4);
                  if (v481)
                  {
                    operator delete(v481);
                    v469 = (char *)v468[2];
                  }
                }
                else
                {
                  uint64_t v482 = (uint64_t)&v479[-*v468] >> 3;
                  if (v482 >= -1) {
                    uint64_t v483 = v482 + 1;
                  }
                  else {
                    uint64_t v483 = v482 + 2;
                  }
                  v484 = &v479[-8 * (v483 >> 1)];
                  int64_t v485 = v469 - v479;
                  if (v469 != v479)
                  {
                    uint64_t v12 = (uint64_t)memmove(&v479[-8 * (v483 >> 1)], v479, v469 - v479);
                    v469 = (char *)v468[1];
                  }
                  v486 = &v469[-8 * (v483 >> 1)];
                  v469 = &v484[v485];
                  v468[1] = (uint64_t)v486;
                  v468[2] = (uint64_t)&v484[v485];
                  v476 = v468 + 5;
                  v475 = (unint64_t *)(v468 + 4);
                }
              }
              *(void *)v469 = v473;
              v468[2] += 8;
              LOBYTE(v473) = v478;
            }
            else
            {
              uint64_t v487 = v472 >> 3;
              v488 = (char *)v468[3];
              v489 = (char *)*v468;
              uint64_t v490 = (uint64_t)&v488[-*v468];
              uint64_t v562 = *(void *)(a1 + 43176) + *(void *)(a1 + 43168) - 1;
              if (v472 >> 3 < (unint64_t)(v490 >> 3))
              {
                unsigned int v491 = v110;
                uint64_t v12 = (uint64_t)operator new(0x1000uLL);
                uint64_t v492 = v12;
                if (v488 != v469)
                {
                  *(void *)v469 = v12;
                  v475 = (unint64_t *)(v468 + 4);
                  LOBYTE(v473) = v562;
LABEL_850:
                  v468[2] += 8;
                  v476 = v468 + 5;
                  goto LABEL_851;
                }
                if (v470 == v489)
                {
                  if (v469 == v470) {
                    unint64_t v521 = 1;
                  }
                  else {
                    unint64_t v521 = (v488 - v470) >> 2;
                  }
                  if (v521 >> 61) {
                    sub_574C();
                  }
                  uint64_t v12 = (uint64_t)operator new(8 * v521);
                  v505 = (char *)(v12 + 8 * ((v521 + 3) >> 2));
                  v522 = v505;
                  if (v469 != v470)
                  {
                    uint64_t v523 = 8 * v487;
                    v524 = (void *)(v12 + 8 * ((v521 + 3) >> 2));
                    v525 = v470;
                    v522 = &v505[8 * v487];
                    do
                    {
                      uint64_t v526 = *(void *)v525;
                      v525 += 8;
                      *v524++ = v526;
                      v523 -= 8;
                    }
                    while (v523);
                  }
                  uint64_t *v468 = v12;
                  v468[1] = (uint64_t)v505;
                  v468[2] = (uint64_t)v522;
                  v468[3] = v12 + 8 * v521;
                  if (v470)
                  {
                    operator delete(v470);
                    v505 = (char *)v468[1];
                  }
                }
                else
                {
                  v505 = v470;
                }
                *((void *)v505 - 1) = v492;
                v528 = (char *)v468[1];
                v527 = (char *)v468[2];
                v468[1] = (uint64_t)(v528 - 8);
                uint64_t v529 = *((void *)v528 - 1);
                v468[1] = (uint64_t)v528;
                v475 = (unint64_t *)(v468 + 4);
                if (v527 == (char *)v468[3])
                {
                  v530 = (char *)*v468;
                  if ((unint64_t)v528 > *v468)
                  {
                    uint64_t v531 = (uint64_t)&v528[-*v468] >> 3;
                    if (v531 >= -1) {
                      uint64_t v532 = v531 + 1;
                    }
                    else {
                      uint64_t v532 = v531 + 2;
                    }
                    v533 = &v528[-8 * (v532 >> 1)];
                    int64_t v534 = v527 - v528;
                    if (v527 != v528)
                    {
                      uint64_t v12 = (uint64_t)memmove(&v528[-8 * (v532 >> 1)], v528, v527 - v528);
                      v528 = (char *)v468[1];
                    }
                    v527 = &v533[v534];
                    v468[1] = (uint64_t)&v528[-8 * (v532 >> 1)];
                    v468[2] = (uint64_t)&v533[v534];
                    unsigned int v110 = v491;
                    goto LABEL_848;
                  }
                  if (v527 == v530) {
                    unint64_t v473 = 1;
                  }
                  else {
                    unint64_t v473 = (v527 - v530) >> 2;
                  }
                  if (v473 >> 61) {
                    sub_574C();
                  }
                  uint64_t v12 = (uint64_t)operator new(8 * v473);
                  unint64_t v541 = v12 + 8 * (v473 >> 2);
                  v542 = (char *)v541;
                  v475 = (unint64_t *)(v468 + 4);
                  if (v527 != v528)
                  {
                    v542 = (char *)(v541 + ((v527 - v528) & 0xFFFFFFFFFFFFFFF8));
                    uint64_t v543 = 8 * ((v527 - v528) >> 3);
                    v544 = (void *)(v12 + 8 * (v473 >> 2));
                    do
                    {
                      uint64_t v545 = *(void *)v528;
                      v528 += 8;
                      *v544++ = v545;
                      v543 -= 8;
                    }
                    while (v543);
                  }
                  uint64_t *v468 = v12;
                  v468[1] = v541;
                  v468[2] = (uint64_t)v542;
                  v468[3] = v12 + 8 * v473;
                  v527 = v542;
                  LOBYTE(v473) = v562;
                  if (v530)
                  {
                    operator delete(v530);
                    v527 = (char *)v468[2];
                  }
                }
                else
                {
LABEL_848:
                  LOBYTE(v473) = v562;
                }
                *(void *)v527 = v529;
                goto LABEL_850;
              }
              unsigned int v564 = v110;
              uint64_t v493 = v490 >> 2;
              if (v488 == v489) {
                unint64_t v494 = 1;
              }
              else {
                unint64_t v494 = v493;
              }
              if (v494 >> 61) {
                sub_574C();
              }
              v495 = (char *)operator new(8 * v494);
              v496 = operator new(0x1000uLL);
              v497 = &v495[8 * v487];
              unint64_t v473 = (unint64_t)&v495[8 * v494];
              if (v487 == v494)
              {
                v561 = v496;
                v475 = (unint64_t *)(v468 + 4);
                if (v472 < 1)
                {
                  if (v469 == v470) {
                    unint64_t v506 = 1;
                  }
                  else {
                    unint64_t v506 = v472 >> 2;
                  }
                  if (v506 >> 61) {
                    sub_574C();
                  }
                  v507 = (char *)operator new(8 * v506);
                  v497 = &v507[8 * (v506 >> 2)];
                  unint64_t v473 = (unint64_t)&v507[8 * v506];
                  operator delete(v495);
                  v470 = (char *)v468[1];
                  v469 = (char *)v468[2];
                  v495 = v507;
                }
                else
                {
                  unint64_t v498 = v487 + 2;
                  if (v487 >= -1) {
                    unint64_t v498 = v487 + 1;
                  }
                  v497 -= 8 * (v498 >> 1);
                }
                v496 = v561;
              }
              else
              {
                v475 = (unint64_t *)(v468 + 4);
              }
              *(void *)v497 = v496;
              v508 = v497 + 8;
              if (v469 != v470)
              {
                do
                {
                  if (v497 == v495)
                  {
                    if ((unint64_t)v508 >= v473)
                    {
                      if ((char *)v473 == v497) {
                        unint64_t v513 = 1;
                      }
                      else {
                        unint64_t v513 = (uint64_t)(v473 - (void)v497) >> 2;
                      }
                      if (v513 >> 61) {
                        sub_574C();
                      }
                      v514 = (char *)operator new(8 * v513);
                      v495 = v514;
                      v509 = &v514[(2 * v513 + 6) & 0xFFFFFFFFFFFFFFF8];
                      v510 = v509;
                      uint64_t v515 = v508 - v497;
                      if (v508 != v497)
                      {
                        v510 = &v509[v515 & 0xFFFFFFFFFFFFFFF8];
                        uint64_t v516 = 8 * (v515 >> 3);
                        v517 = &v514[(2 * v513 + 6) & 0xFFFFFFFFFFFFFFF8];
                        v518 = v497;
                        do
                        {
                          uint64_t v519 = *(void *)v518;
                          v518 += 8;
                          *(void *)v517 = v519;
                          v517 += 8;
                          v516 -= 8;
                        }
                        while (v516);
                      }
                      unint64_t v473 = (unint64_t)&v514[8 * v513];
                      operator delete(v497);
                    }
                    else
                    {
                      uint64_t v511 = (uint64_t)(v473 - (void)v508) >> 3;
                      if (v511 >= -1) {
                        unint64_t v512 = v511 + 1;
                      }
                      else {
                        unint64_t v512 = v511 + 2;
                      }
                      v510 = &v508[8 * (v512 >> 1)];
                      v509 = &v497[8 * (v512 >> 1)];
                      if (v508 == v497)
                      {
                        v495 = v508;
                      }
                      else
                      {
                        memmove(&v497[8 * (v512 >> 1)], v497, v508 - v497);
                        v495 = v497;
                      }
                    }
                  }
                  else
                  {
                    v509 = v497;
                    v510 = v508;
                  }
                  uint64_t v520 = *((void *)v469 - 1);
                  v469 -= 8;
                  *((void *)v509 - 1) = v520;
                  v497 = v509 - 8;
                  v508 = v510;
                }
                while (v469 != (char *)v468[1]);
              }
              uint64_t v12 = *v468;
              uint64_t *v468 = (uint64_t)v495;
              v468[1] = (uint64_t)v497;
              v468[2] = (uint64_t)v508;
              v468[3] = v473;
              unsigned int v110 = v564;
              LOBYTE(v473) = v562;
              v476 = v468 + 5;
              if (v12) {
                operator delete((void *)v12);
              }
            }
LABEL_851:
            uint64_t v535 = *v476;
            *(void *)(*(void *)(v468[1] + (((*v475 + *v476) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((*v475 + *v476) & 0x1FF)) = v565 + 272 * (v473 & 0xF);
            uint64_t *v476 = v535 + 1;
            uint64_t v536 = v577 + 232 * v110;
            if (*(unsigned char *)(v536 + 224)) {
              BOOL v537 = *(unsigned char *)(v536 + 214) == 0;
            }
            else {
              BOOL v537 = 1;
            }
            if (v537 || *(unsigned char *)(v536 + 213)) {
              goto LABEL_856;
            }
            unsigned int v538 = *(unsigned __int8 *)(v536 + 36);
            if (v538 < 0x60) {
              goto LABEL_859;
            }
            if (v538 >= 0x68)
            {
              if (v538 < 0x98) {
                goto LABEL_856;
              }
            }
            else if (*(unsigned char *)(v536 + 215))
            {
              goto LABEL_856;
            }
LABEL_859:
            if ((*(_DWORD *)(v536 + 208) - 5) < 0xFFFFFFFE || *(unsigned char *)(v536 + 216) != 0)
            {
              unint64_t v540 = *(void *)(a1 + 43176) + *(void *)(a1 + 43168) - 1;
              *(unsigned char *)(*(void *)(*(void *)(a1 + 43144) + ((v540 >> 1) & 0x7FFFFFFFFFFFFFF8))
                       + 272 * (v540 & 0xF)
                       + 32) = 1;
              *(unsigned char *)(v536 + 213) = 1;
              sub_79FD0(a1, v618);
            }
LABEL_856:
            ++v583;
            unint64_t v14 = v617;
            uint64_t v13 = 8 * a3;
            if (v617 >= 8 * a3) {
              goto LABEL_881;
            }
            break;
          case 9:
            if (v632 <= 0x97uLL)
            {
              uint64_t v40 = v577 + 232 * v632;
              uint64_t v41 = v618;
              if (!*(unsigned char *)(v40 + 224))
              {
                char v42 = *(unsigned char *)(a1 + 8);
                *(void *)__s1 = (((v618[3259] - v618[3258]) << 29) - 0x100000000) | (((v618[3256] - v618[3255]) >> 3)
                                                                                       - 1);
                memset(&__s1[16], 255, 20);
                __s1[36] = v632;
                char v627 = 0;
                memset(&__s1[40], 0, 64);
                long long v620 = 0u;
                long long v621 = 0u;
                long long __p = 0u;
                long long v623 = 0u;
                char v624 = 0;
                int v628 = 0;
                char v629 = v42;
                sub_45934(v40, (uint64_t)__s1);
                if ((void)__p)
                {
                  *((void *)&__p + 1) = __p;
                  operator delete((void *)__p);
                }
                if (*((void *)&v620 + 1))
                {
                  *(void *)&long long v621 = *((void *)&v620 + 1);
                  operator delete(*((void **)&v620 + 1));
                }
                if (*(void *)&__s1[88])
                {
                  *(void *)&__s1[96] = *(void *)&__s1[88];
                  operator delete(*(void **)&__s1[88]);
                }
                if (*(void *)&__s1[64])
                {
                  *(void *)&__s1[72] = *(void *)&__s1[64];
                  operator delete(*(void **)&__s1[64]);
                }
                if (*(void *)&__s1[40])
                {
                  *(void *)&__s1[48] = *(void *)&__s1[40];
                  operator delete(*(void **)&__s1[40]);
                }
                uint64_t v41 = v618;
              }
              int v43 = DWORD1(v632);
              sub_47ECC((void *)(v40 + 40), v41);
              sub_48030((void *)(v40 + 40), 1);
              unint64_t v44 = *(void *)(v40 + 104);
              unint64_t v45 = *(_DWORD **)(v40 + 96);
              if ((unint64_t)v45 >= v44)
              {
                uint64_t v12 = *(void *)(v40 + 88);
                uint64_t v169 = ((uint64_t)v45 - v12) >> 2;
                if ((unint64_t)(v169 + 1) >> 62) {
                  sub_566C();
                }
                unint64_t v170 = v44 - v12;
                unint64_t v171 = (uint64_t)(v44 - v12) >> 1;
                if (v171 <= v169 + 1) {
                  unint64_t v171 = v169 + 1;
                }
                if (v170 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v172 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v172 = v171;
                }
                if (v172)
                {
                  unint64_t v173 = (char *)sub_458C8(v40 + 104, v172);
                  uint64_t v12 = *(void *)(v40 + 88);
                  unint64_t v45 = *(_DWORD **)(v40 + 96);
                }
                else
                {
                  unint64_t v173 = 0;
                }
                unint64_t v283 = &v173[4 * v169];
                *(_DWORD *)unint64_t v283 = v43;
                uint64_t v46 = v283 + 4;
                while (v45 != (_DWORD *)v12)
                {
                  int v284 = *--v45;
                  *((_DWORD *)v283 - 1) = v284;
                  v283 -= 4;
                }
                *(void *)(v40 + 88) = v283;
                *(void *)(v40 + 96) = v46;
                *(void *)(v40 + 104) = &v173[4 * v172];
                if (v12) {
                  operator delete((void *)v12);
                }
              }
              else
              {
                *unint64_t v45 = v43;
                uint64_t v46 = v45 + 1;
              }
              *(void *)(v40 + 96) = v46;
            }
            goto LABEL_856;
          case 0xA:
            unint64_t v98 = v618[3264];
            uint64_t v99 = v632;
            *(_DWORD *)__s1 = v632;
            unint64_t v100 = &v618[3 * v632];
            unint64_t v101 = (unint64_t *)v100[3097];
            unint64_t v102 = (unint64_t *)v100[3098];
            if (v101 == v102
              || (unint64_t v103 = v632,
                  *(void *)(v618[3258] + ((v98 >> 29) & 0x7FFFFFFF8))
                - *(void *)(v618[3258] + ((*(v102 - 1) >> 29) & 0x7FFFFFFF8)) >= (unint64_t)*(unsigned int *)(a1 + 32)))
            {
              unint64_t v104 = (void **)(v100 + 3098);
              unint64_t v105 = &v618[3 * v632];
              unint64_t v106 = v105[3099];
              if ((unint64_t)v102 >= v106)
              {
                unint64_t v157 = (void **)(v100 + 3097);
                uint64_t v158 = v102 - v101;
                if ((unint64_t)(v158 + 1) >> 61) {
                  sub_566C();
                }
                unint64_t v159 = v105 + 3099;
                uint64_t v160 = v106 - (void)v101;
                uint64_t v161 = v160 >> 2;
                if (v160 >> 2 <= (unint64_t)(v158 + 1)) {
                  uint64_t v161 = v158 + 1;
                }
                if ((unint64_t)v160 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v162 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v162 = v161;
                }
                if (v162) {
                  uint64_t v12 = (uint64_t)sub_5714((uint64_t)v159, v162);
                }
                else {
                  uint64_t v12 = 0;
                }
                unint64_t v247 = (unint64_t *)(v12 + 8 * v158);
                *unint64_t v247 = v98;
                unint64_t v107 = v247 + 1;
                int v248 = (char *)*v104;
                uint64_t v249 = (char *)*v157;
                if (*v104 != *v157)
                {
                  do
                  {
                    unint64_t v250 = *((void *)v248 - 1);
                    v248 -= 8;
                    *--unint64_t v247 = v250;
                  }
                  while (v248 != v249);
                  int v248 = (char *)*v157;
                }
                *unint64_t v157 = v247;
                char *v104 = v107;
                void *v159 = v12 + 8 * v162;
                if (v248) {
                  operator delete(v248);
                }
              }
              else
              {
                *unint64_t v102 = v98;
                unint64_t v107 = v102 + 1;
              }
              char *v104 = v107;
              unint64_t v103 = *(unsigned int *)__s1;
              if (*(_DWORD *)__s1 <= 0xFu) {
                *(unsigned char *)(v571 + *(unsigned int *)__s1) = 0;
              }
            }
            if (*(void *)(a1 + 136) == *(void *)(a1 + 144))
            {
              switch(v99)
              {
                case 0:
                  v615[0] = a1;
                  v615[1] = (uint64_t)&v618;
                  v615[2] = (uint64_t)v631;
                  if (v103 <= 0xF) {
                    sub_7A630(v615, (unsigned char *)(v571 + v103));
                  }
                  break;
                case 1:
                  v614[0] = a1;
                  v614[1] = (uint64_t)&v618;
                  v614[2] = (uint64_t)v631;
                  if (v103 <= 0xF) {
                    sub_7BAA8(v614, (unsigned char *)(v571 + v103));
                  }
                  break;
                case 2:
                  v613[0] = a1;
                  v613[1] = (uint64_t)&v618;
                  v613[2] = (uint64_t)v631;
                  if (v103 <= 0xF) {
                    sub_7C43C(v613, (unsigned char *)(v571 + v103));
                  }
                  break;
                case 3:
                  v612[0] = a1;
                  v612[1] = (uint64_t)&v618;
                  v612[2] = (uint64_t)v631;
                  if (v103 <= 0xF) {
                    sub_7E144(v612, (unsigned char *)(v571 + v103));
                  }
                  break;
                case 4:
                  v611[0] = a1;
                  v611[1] = (uint64_t)&v618;
                  v611[2] = (uint64_t)v631;
                  if (v103 <= 0xF) {
                    sub_7ED00(v611, (unsigned char *)(v571 + v103));
                  }
                  break;
                case 5:
                  v610[0] = a1;
                  v610[1] = (uint64_t)&v618;
                  v610[2] = (uint64_t)v631;
                  if (v103 <= 0xF) {
                    sub_7F734(v610, (unsigned char *)(v571 + v103));
                  }
                  break;
                case 6:
                  v609[0] = a1;
                  v609[1] = (uint64_t)&v618;
                  v609[2] = (uint64_t)v631;
                  if (v103 <= 0xF) {
                    sub_7FB50(v609, (unsigned char *)(v571 + v103));
                  }
                  break;
                case 7:
                  v608[0] = a1;
                  v608[1] = (uint64_t)&v618;
                  v608[2] = (uint64_t)v631;
                  if (v103 <= 0xF) {
                    sub_80E38(v608, (unsigned char *)(v571 + v103));
                  }
                  break;
                case 8:
                  v607[0] = a1;
                  v607[1] = (uint64_t)&v618;
                  v607[2] = (uint64_t)v631;
                  if (v103 <= 0xF) {
                    sub_82034(v607, (unsigned char *)(v571 + v103));
                  }
                  break;
                case 9:
                  v606[0] = a1;
                  v606[1] = (uint64_t)&v618;
                  v606[2] = (uint64_t)v631;
                  if (v103 <= 0xF) {
                    sub_82500(v606, (unsigned char *)(v571 + v103));
                  }
                  break;
                case 10:
                  v605[0] = a1;
                  v605[1] = (uint64_t)&v618;
                  v605[2] = (uint64_t)v631;
                  if (v103 <= 0xF) {
                    sub_84208(v605, (unsigned char *)(v571 + v103));
                  }
                  break;
                case 11:
                  v604[0] = a1;
                  v604[1] = (uint64_t)&v618;
                  v604[2] = (uint64_t)v631;
                  if (v103 <= 0xF) {
                    sub_848A8(v604, (unsigned char *)(v571 + v103));
                  }
                  break;
                case 12:
                  v603[0] = a1;
                  v603[1] = (uint64_t)&v618;
                  v603[2] = (uint64_t)v631;
                  if (v103 <= 0xF) {
                    sub_84ADC(v603, (unsigned char *)(v571 + v103));
                  }
                  break;
                case 13:
                  v602[0] = a1;
                  v602[1] = (uint64_t)&v618;
                  v602[2] = (uint64_t)v631;
                  if (v103 <= 0xF) {
                    sub_85250(v602, (unsigned char *)(v571 + v103));
                  }
                  break;
                case 14:
                  v601[0] = a1;
                  v601[1] = (uint64_t)&v618;
                  v601[2] = (uint64_t)v631;
                  if (v103 <= 0xF) {
                    sub_86010(v601, (unsigned char *)(v571 + v103));
                  }
                  break;
                case 15:
                  v600[0] = a1;
                  v600[1] = (uint64_t)&v618;
                  v600[2] = (uint64_t)v631;
                  if (v103 <= 0xF) {
                    sub_8640C(v600, (unsigned char *)(v571 + v103));
                  }
                  break;
                default:
                  goto LABEL_856;
              }
            }
            else
            {
              switch(v99)
              {
                case 0:
                  v599[0] = a1;
                  v599[1] = (uint64_t)__s1;
                  v599[2] = (uint64_t)&v618;
                  v599[3] = (uint64_t)v631;
                  if (v103 <= 0xF) {
                    sub_86DB0(v599, (unsigned char *)(v571 + v103));
                  }
                  break;
                case 1:
                  v598[0] = a1;
                  v598[1] = (uint64_t)__s1;
                  v598[2] = (uint64_t)&v618;
                  v598[3] = (uint64_t)v631;
                  if (v103 <= 0xF) {
                    sub_882D4(v598, (unsigned char *)(v571 + v103));
                  }
                  break;
                case 2:
                  v597[0] = a1;
                  v597[1] = (uint64_t)__s1;
                  v597[2] = (uint64_t)&v618;
                  v597[3] = (uint64_t)v631;
                  if (v103 <= 0xF) {
                    sub_88D4C(v597, (unsigned char *)(v571 + v103));
                  }
                  break;
                case 3:
                  v596[0] = a1;
                  v596[1] = (uint64_t)__s1;
                  v596[2] = (uint64_t)&v618;
                  v596[3] = (uint64_t)v631;
                  if (v103 <= 0xF) {
                    sub_8AB14(v596, (unsigned char *)(v571 + v103));
                  }
                  break;
                case 4:
                  v595[0] = a1;
                  v595[1] = (uint64_t)__s1;
                  v595[2] = (uint64_t)&v618;
                  v595[3] = (uint64_t)v631;
                  if (v103 <= 0xF) {
                    sub_8B774(v595, (unsigned char *)(v571 + v103));
                  }
                  break;
                case 5:
                  v594[0] = a1;
                  v594[1] = (uint64_t)__s1;
                  v594[2] = (uint64_t)&v618;
                  v594[3] = (uint64_t)v631;
                  if (v103 <= 0xF) {
                    sub_8C24C(v594, (unsigned char *)(v571 + v103));
                  }
                  break;
                case 6:
                  v593[0] = a1;
                  v593[1] = (uint64_t)__s1;
                  v593[2] = (uint64_t)&v618;
                  v593[3] = (uint64_t)v631;
                  if (v103 <= 0xF) {
                    sub_8C74C(v593, (unsigned char *)(v571 + v103));
                  }
                  break;
                case 7:
                  v592[0] = a1;
                  v592[1] = (uint64_t)__s1;
                  v592[2] = (uint64_t)&v618;
                  v592[3] = (uint64_t)v631;
                  if (v103 <= 0xF) {
                    sub_8DAC4(v592, (unsigned char *)(v571 + v103));
                  }
                  break;
                case 8:
                  v591[0] = a1;
                  v591[1] = (uint64_t)__s1;
                  v591[2] = (uint64_t)&v618;
                  v591[3] = (uint64_t)v631;
                  if (v103 <= 0xF) {
                    sub_8ED98(v591, (unsigned char *)(v571 + v103));
                  }
                  break;
                case 9:
                  v590[0] = a1;
                  v590[1] = (uint64_t)__s1;
                  v590[2] = (uint64_t)&v618;
                  v590[3] = (uint64_t)v631;
                  if (v103 <= 0xF) {
                    sub_8F338(v590, (unsigned char *)(v571 + v103));
                  }
                  break;
                case 10:
                  v589[0] = a1;
                  v589[1] = (uint64_t)__s1;
                  v589[2] = (uint64_t)&v618;
                  v589[3] = (uint64_t)v631;
                  if (v103 <= 0xF) {
                    sub_91100(v589, (unsigned char *)(v571 + v103));
                  }
                  break;
                case 11:
                  v588[0] = a1;
                  v588[1] = (uint64_t)__s1;
                  v588[2] = (uint64_t)&v618;
                  v588[3] = (uint64_t)v631;
                  if (v103 <= 0xF) {
                    sub_91868(v588, (unsigned char *)(v571 + v103));
                  }
                  break;
                case 12:
                  v587[0] = a1;
                  v587[1] = (uint64_t)__s1;
                  v587[2] = (uint64_t)&v618;
                  v587[3] = (uint64_t)v631;
                  if (v103 <= 0xF) {
                    sub_91B30(v587, (unsigned char *)(v571 + v103));
                  }
                  break;
                case 13:
                  v586[0] = a1;
                  v586[1] = (uint64_t)__s1;
                  v586[2] = (uint64_t)&v618;
                  v586[3] = (uint64_t)v631;
                  if (v103 <= 0xF) {
                    sub_92368(v586, (unsigned char *)(v571 + v103));
                  }
                  break;
                case 14:
                  v585[0] = a1;
                  v585[1] = (uint64_t)__s1;
                  v585[2] = (uint64_t)&v618;
                  v585[3] = (uint64_t)v631;
                  if (v103 <= 0xF) {
                    sub_931C8(v585, (unsigned char *)(v571 + v103));
                  }
                  break;
                case 15:
                  v584[0] = a1;
                  v584[1] = (uint64_t)__s1;
                  v584[2] = (uint64_t)&v618;
                  v584[3] = (uint64_t)v631;
                  if (v103 <= 0xF) {
                    sub_93698(v584, (unsigned char *)(v571 + v103));
                  }
                  break;
                default:
                  goto LABEL_856;
              }
            }
            goto LABEL_856;
          case 0xB:
            unsigned int v27 = v632;
            if (v632 > 7)
            {
              int v28 = 0;
              __int16 v29 = -1;
            }
            else
            {
              int v28 = dword_4C6CA8[(int)v632];
              __int16 v29 = word_4C7D30[(int)v632];
            }
            uint64_t v126 = (((v618[3259] - v618[3258]) << 29) - 0x100000000) | (((v618[3256] - v618[3255]) >> 3)
                                                                        - 1);
            uint64_t v127 = *((void *)&v632 + 1);
            if (*(_DWORD *)(a1 + 120) == -1) {
              int v128 = 0;
            }
            else {
              int v128 = *(_DWORD *)(a1 + 120);
            }
            *(_DWORD *)(a1 + 120) = v128 + 1;
            if (v27 > 7) {
              goto LABEL_250;
            }
            uint64_t v129 = v572 + 56 * v27;
            if (!*(unsigned char *)(v129 + 48))
            {
              *(void *)uint64_t v129 = v126;
              *(void *)(v129 + 16) = v127;
              *(_DWORD *)(v129 + 24) = v128;
              *(_DWORD *)(v129 + 28) = v28;
              *(_WORD *)(v129 + 32) = v29;
              *(void *)(v129 + 40) = 0;
LABEL_249:
              *(unsigned char *)(v129 + 48) = 1;
              goto LABEL_250;
            }
            uint64_t v130 = sub_12C18C();
            if (os_log_type_enabled(v130, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__s1 = 136315650;
              *(void *)&__s1[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSuppor"
                                    "t/AGXProfilingSupport/APS/AGXPSAPSParserGen1.cpp";
              *(_WORD *)&__s1[12] = 1024;
              *(_DWORD *)&__s1[14] = 1206;
              *(_WORD *)&__s1[18] = 2080;
              *(void *)&__s1[20] = "!currentKick";
              _os_log_error_impl(&def_1C1270, v130, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", __s1, 0x1Cu);
            }
            uint64_t v12 = sub_12C17C();
            if (v12) {
              uint64_t v12 = sub_12C184();
            }
            int v131 = *(unsigned __int8 *)(v129 + 48);
            *(void *)uint64_t v129 = v126;
            *(void *)(v129 + 16) = v127;
            *(_DWORD *)(v129 + 24) = v128;
            *(_DWORD *)(v129 + 28) = v28;
            *(_WORD *)(v129 + 32) = v29;
            *(void *)(v129 + 40) = 0;
            if (!v131) {
              goto LABEL_249;
            }
LABEL_250:
            if ((v574 & 2) != 0)
            {
              unint64_t v179 = v618;
              uint64_t v180 = (uint64_t *)v618[2];
              uint64_t v12 = (uint64_t)(v618 + 3);
              unint64_t v181 = v618[3];
              if ((unint64_t)v180 >= v181)
              {
                uint64_t v183 = (void **)(v618 + 1);
                uint64_t v184 = v618[1];
                uint64_t v185 = ((uint64_t)v180 - v184) >> 3;
                if ((unint64_t)(v185 + 1) >> 61) {
                  sub_566C();
                }
                uint64_t v186 = v181 - v184;
                uint64_t v187 = v186 >> 2;
                if (v186 >> 2 <= (unint64_t)(v185 + 1)) {
                  uint64_t v187 = v185 + 1;
                }
                if ((unint64_t)v186 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v188 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v188 = v187;
                }
                if (v188) {
                  uint64_t v12 = (uint64_t)sub_5714(v12, v188);
                }
                else {
                  uint64_t v12 = 0;
                }
                unint64_t v258 = (uint64_t *)(v12 + 8 * v185);
                *unint64_t v258 = v126;
                uint64_t v182 = v258 + 1;
                unint64_t v260 = (char *)v179[1];
                uint64_t v259 = (char *)v179[2];
                if (v259 != v260)
                {
                  do
                  {
                    uint64_t v261 = *((void *)v259 - 1);
                    v259 -= 8;
                    *--unint64_t v258 = v261;
                  }
                  while (v259 != v260);
                  uint64_t v259 = (char *)*v183;
                }
                v179[1] = v258;
                v179[2] = v182;
                v179[3] = v12 + 8 * v188;
                if (v259) {
                  operator delete(v259);
                }
              }
              else
              {
                uint64_t *v180 = v126;
                uint64_t v182 = v180 + 1;
              }
              v179[2] = v182;
              unint64_t v262 = v618;
              unint64_t v263 = (_DWORD *)v618[14];
              unint64_t v264 = v618[15];
              if ((unint64_t)v263 >= v264)
              {
                uint64_t v12 = v618[13];
                uint64_t v266 = ((uint64_t)v263 - v12) >> 2;
                if ((unint64_t)(v266 + 1) >> 62) {
                  sub_566C();
                }
                unint64_t v267 = v264 - v12;
                unint64_t v268 = (uint64_t)(v264 - v12) >> 1;
                if (v268 <= v266 + 1) {
                  unint64_t v268 = v266 + 1;
                }
                if (v267 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v269 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v269 = v268;
                }
                if (v269)
                {
                  unint64_t v270 = (char *)sub_458C8((uint64_t)(v618 + 15), v269);
                  uint64_t v12 = v262[13];
                  unint64_t v263 = (_DWORD *)v262[14];
                }
                else
                {
                  unint64_t v270 = 0;
                }
                v271 = &v270[4 * v266];
                *(_DWORD *)v271 = v128;
                uint64_t v265 = v271 + 4;
                while (v263 != (_DWORD *)v12)
                {
                  int v272 = *--v263;
                  *((_DWORD *)v271 - 1) = v272;
                  v271 -= 4;
                }
                v262[13] = v271;
                v262[14] = v265;
                v262[15] = &v270[4 * v269];
                if (v12) {
                  operator delete((void *)v12);
                }
              }
              else
              {
                _DWORD *v263 = v128;
                uint64_t v265 = v263 + 1;
              }
              v262[14] = v265;
              uint64_t v273 = v618;
              unint64_t v274 = (__int16 *)v618[20];
              unint64_t v275 = v618[21];
              if ((unint64_t)v274 >= v275)
              {
                uint64_t v12 = v618[19];
                uint64_t v277 = (uint64_t)v274 - v12;
                if ((uint64_t)v274 - v12 <= -3) {
                  sub_566C();
                }
                uint64_t v278 = v277 >> 1;
                unint64_t v279 = v275 - v12;
                if (v279 <= (v277 >> 1) + 1) {
                  unint64_t v280 = v278 + 1;
                }
                else {
                  unint64_t v280 = v279;
                }
                if (v279 >= 0x7FFFFFFFFFFFFFFELL) {
                  uint64_t v281 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  uint64_t v281 = v280;
                }
                if (v281)
                {
                  unint64_t v282 = (char *)sub_45900((uint64_t)(v618 + 21), v281);
                  uint64_t v12 = v273[19];
                  unint64_t v274 = (__int16 *)v273[20];
                }
                else
                {
                  unint64_t v282 = 0;
                }
                unint64_t v289 = (__int16 *)&v282[2 * v278];
                *unint64_t v289 = v29;
                unint64_t v276 = v289 + 1;
                while (v274 != (__int16 *)v12)
                {
                  __int16 v290 = *--v274;
                  *--unint64_t v289 = v290;
                }
                v273[19] = v289;
                v273[20] = v276;
                v273[21] = &v282[2 * v281];
                if (v12) {
                  operator delete((void *)v12);
                }
              }
              else
              {
                *unint64_t v274 = v29;
                unint64_t v276 = v274 + 1;
              }
              v273[20] = v276;
              uint64_t v291 = v618;
              unint64_t v292 = (_DWORD *)v618[17];
              unint64_t v293 = v618[18];
              if ((unint64_t)v292 >= v293)
              {
                uint64_t v12 = v618[16];
                uint64_t v295 = ((uint64_t)v292 - v12) >> 2;
                if ((unint64_t)(v295 + 1) >> 62) {
                  sub_566C();
                }
                unint64_t v296 = v293 - v12;
                unint64_t v297 = (uint64_t)(v293 - v12) >> 1;
                if (v297 <= v295 + 1) {
                  unint64_t v297 = v295 + 1;
                }
                if (v296 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v298 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v298 = v297;
                }
                if (v298)
                {
                  unint64_t v299 = (char *)sub_458C8((uint64_t)(v618 + 18), v298);
                  uint64_t v12 = v291[16];
                  unint64_t v292 = (_DWORD *)v291[17];
                }
                else
                {
                  unint64_t v299 = 0;
                }
                unint64_t v300 = &v299[4 * v295];
                *(_DWORD *)unint64_t v300 = v28;
                unint64_t v294 = v300 + 4;
                while (v292 != (_DWORD *)v12)
                {
                  int v301 = *--v292;
                  *((_DWORD *)v300 - 1) = v301;
                  v300 -= 4;
                }
                v291[16] = v300;
                v291[17] = v294;
                v291[18] = &v299[4 * v298];
                if (v12) {
                  operator delete((void *)v12);
                }
              }
              else
              {
                _DWORD *v292 = v28;
                unint64_t v294 = v292 + 1;
              }
              v291[17] = v294;
              unint64_t v302 = v618;
              uint64_t v303 = (void *)v618[8];
              unint64_t v304 = v618[9];
              if ((unint64_t)v303 >= v304)
              {
                uint64_t v12 = v618[7];
                uint64_t v306 = ((uint64_t)v303 - v12) >> 3;
                if ((unint64_t)(v306 + 1) >> 61) {
                  sub_566C();
                }
                unint64_t v307 = v304 - v12;
                unint64_t v308 = (uint64_t)(v304 - v12) >> 2;
                if (v308 <= v306 + 1) {
                  unint64_t v308 = v306 + 1;
                }
                if (v307 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v309 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v309 = v308;
                }
                if (v309)
                {
                  unint64_t v310 = (char *)sub_5714((uint64_t)(v618 + 9), v309);
                  uint64_t v12 = v302[7];
                  uint64_t v303 = (void *)v302[8];
                }
                else
                {
                  unint64_t v310 = 0;
                }
                unint64_t v311 = &v310[8 * v306];
                *(void *)unint64_t v311 = v127;
                unint64_t v305 = v311 + 8;
                while (v303 != (void *)v12)
                {
                  uint64_t v312 = *--v303;
                  *((void *)v311 - 1) = v312;
                  v311 -= 8;
                }
                v302[7] = v311;
                v302[8] = v305;
                v302[9] = &v310[8 * v309];
                if (v12) {
                  operator delete((void *)v12);
                }
              }
              else
              {
                *uint64_t v303 = v127;
                unint64_t v305 = v303 + 1;
              }
              v302[8] = v305;
            }
            goto LABEL_856;
          case 0xC:
            if (v632 <= 7)
            {
              uint64_t v31 = v572 + 56 * v632;
              if (*(unsigned char *)(v31 + 48))
              {
                uint64_t v32 = 0;
                *(void *)(v31 + 8) = (((v618[3259] - v618[3258]) << 29) - 0x100000000) | (((v618[3256] - v618[3255]) >> 3)
                                                                                            - 1);
                *(void *)(v31 + 40) = 0;
                *(_WORD *)(v31 + 40) = WORD2(v632);
                uint64_t v33 = a1 + 192;
                do
                {
                  if (*(unsigned char *)(v33 + 192) && *(_DWORD *)v33 == *(_DWORD *)(v31 + 24)) {
                    sub_736D4(a1, v618, v32, 1);
                  }
                  ++v32;
                  v33 += 232;
                }
                while (v32 != 152);
                uint64_t v34 = 0;
                uint64_t v35 = (unsigned char *)(a1 + 35904);
                do
                {
                  if (*v35 && *((_DWORD *)v35 - 2) == *(_DWORD *)(v31 + 24)) {
                    sub_73354(a1, v618, v34);
                  }
                  ++v34;
                  v35 += 40;
                }
                while (v34 != 16);
                if ((v574 & 2) == 0)
                {
                  uint64_t v36 = v618;
                  uint64_t v37 = (void *)v618[2];
                  unint64_t v38 = v618[3];
                  if ((unint64_t)v37 >= v38)
                  {
                    unint64_t v331 = (void **)(v618 + 1);
                    uint64_t v332 = v618[1];
                    uint64_t v333 = ((uint64_t)v37 - v332) >> 3;
                    if ((unint64_t)(v333 + 1) >> 61) {
                      sub_566C();
                    }
                    uint64_t v334 = v38 - v332;
                    uint64_t v335 = v334 >> 2;
                    if (v334 >> 2 <= (unint64_t)(v333 + 1)) {
                      uint64_t v335 = v333 + 1;
                    }
                    if ((unint64_t)v334 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v336 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v336 = v335;
                    }
                    if (v336) {
                      uint64_t v337 = (char *)sub_5714((uint64_t)(v618 + 3), v336);
                    }
                    else {
                      uint64_t v337 = 0;
                    }
                    uint64_t v349 = &v337[8 * v333];
                    *(void *)uint64_t v349 = *(void *)v31;
                    unint64_t v39 = v349 + 8;
                    uint64_t v351 = (char *)v36[1];
                    v350 = (char *)v36[2];
                    if (v350 != v351)
                    {
                      do
                      {
                        uint64_t v352 = *((void *)v350 - 1);
                        v350 -= 8;
                        *((void *)v349 - 1) = v352;
                        v349 -= 8;
                      }
                      while (v350 != v351);
                      v350 = (char *)*v331;
                    }
                    v36[1] = v349;
                    v36[2] = v39;
                    v36[3] = &v337[8 * v336];
                    if (v350) {
                      operator delete(v350);
                    }
                  }
                  else
                  {
                    *uint64_t v37 = *(void *)v31;
                    unint64_t v39 = v37 + 1;
                  }
                  v36[2] = v39;
                  unint64_t v353 = v618;
                  unint64_t v354 = (void *)v618[5];
                  uint64_t v12 = (uint64_t)(v618 + 6);
                  unint64_t v355 = v618[6];
                  if ((unint64_t)v354 >= v355)
                  {
                    uint64_t v357 = (void **)(v618 + 4);
                    uint64_t v358 = v618[4];
                    uint64_t v359 = ((uint64_t)v354 - v358) >> 3;
                    if ((unint64_t)(v359 + 1) >> 61) {
                      sub_566C();
                    }
                    uint64_t v360 = v355 - v358;
                    uint64_t v361 = v360 >> 2;
                    if (v360 >> 2 <= (unint64_t)(v359 + 1)) {
                      uint64_t v361 = v359 + 1;
                    }
                    if ((unint64_t)v360 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v362 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v362 = v361;
                    }
                    if (v362) {
                      uint64_t v12 = (uint64_t)sub_5714(v12, v362);
                    }
                    else {
                      uint64_t v12 = 0;
                    }
                    uint64_t v363 = (void *)(v12 + 8 * v359);
                    *uint64_t v363 = *(void *)(v31 + 8);
                    uint64_t v356 = v363 + 1;
                    uint64_t v365 = (char *)v353[4];
                    v364 = (char *)v353[5];
                    if (v364 != v365)
                    {
                      do
                      {
                        uint64_t v366 = *((void *)v364 - 1);
                        v364 -= 8;
                        *--uint64_t v363 = v366;
                      }
                      while (v364 != v365);
                      v364 = (char *)*v357;
                    }
                    v353[4] = v363;
                    v353[5] = v356;
                    v353[6] = v12 + 8 * v362;
                    if (v364) {
                      operator delete(v364);
                    }
                  }
                  else
                  {
                    void *v354 = *(void *)(v31 + 8);
                    uint64_t v356 = v354 + 1;
                  }
                  v353[5] = v356;
                  uint64_t v367 = v618;
                  v368 = (_DWORD *)v618[14];
                  unint64_t v369 = v618[15];
                  if ((unint64_t)v368 >= v369)
                  {
                    uint64_t v12 = v618[13];
                    uint64_t v371 = ((uint64_t)v368 - v12) >> 2;
                    if ((unint64_t)(v371 + 1) >> 62) {
                      sub_566C();
                    }
                    unint64_t v372 = v369 - v12;
                    unint64_t v373 = (uint64_t)(v369 - v12) >> 1;
                    if (v373 <= v371 + 1) {
                      unint64_t v373 = v371 + 1;
                    }
                    if (v372 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v374 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v374 = v373;
                    }
                    if (v374)
                    {
                      uint64_t v375 = (char *)sub_458C8((uint64_t)(v618 + 15), v374);
                      uint64_t v12 = v367[13];
                      v368 = (_DWORD *)v367[14];
                    }
                    else
                    {
                      uint64_t v375 = 0;
                    }
                    v376 = &v375[4 * v371];
                    *(_DWORD *)v376 = *(_DWORD *)(v31 + 24);
                    uint64_t v370 = v376 + 4;
                    while (v368 != (_DWORD *)v12)
                    {
                      int v377 = *--v368;
                      *((_DWORD *)v376 - 1) = v377;
                      v376 -= 4;
                    }
                    v367[13] = v376;
                    v367[14] = v370;
                    v367[15] = &v375[4 * v374];
                    if (v12) {
                      operator delete((void *)v12);
                    }
                  }
                  else
                  {
                    _DWORD *v368 = *(_DWORD *)(v31 + 24);
                    uint64_t v370 = v368 + 1;
                  }
                  v367[14] = v370;
                  v378 = v618;
                  uint64_t v379 = (_WORD *)v618[20];
                  unint64_t v380 = v618[21];
                  if ((unint64_t)v379 >= v380)
                  {
                    uint64_t v12 = v618[19];
                    uint64_t v382 = (uint64_t)v379 - v12;
                    if ((uint64_t)v379 - v12 <= -3) {
                      sub_566C();
                    }
                    uint64_t v383 = v382 >> 1;
                    unint64_t v384 = v380 - v12;
                    if (v384 <= (v382 >> 1) + 1) {
                      unint64_t v385 = v383 + 1;
                    }
                    else {
                      unint64_t v385 = v384;
                    }
                    if (v384 >= 0x7FFFFFFFFFFFFFFELL) {
                      uint64_t v386 = 0x7FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      uint64_t v386 = v385;
                    }
                    if (v386)
                    {
                      uint64_t v387 = (char *)sub_45900((uint64_t)(v618 + 21), v386);
                      uint64_t v12 = v378[19];
                      uint64_t v379 = (_WORD *)v378[20];
                    }
                    else
                    {
                      uint64_t v387 = 0;
                    }
                    v388 = &v387[2 * v383];
                    *(_WORD *)v388 = *(_WORD *)(v31 + 32);
                    uint64_t v381 = v388 + 2;
                    while (v379 != (_WORD *)v12)
                    {
                      __int16 v389 = *--v379;
                      *((_WORD *)v388 - 1) = v389;
                      v388 -= 2;
                    }
                    v378[19] = v388;
                    v378[20] = v381;
                    v378[21] = &v387[2 * v386];
                    if (v12) {
                      operator delete((void *)v12);
                    }
                  }
                  else
                  {
                    *uint64_t v379 = *(_WORD *)(v31 + 32);
                    uint64_t v381 = v379 + 1;
                  }
                  v378[20] = v381;
                  v390 = v618;
                  uint64_t v391 = (_DWORD *)v618[17];
                  unint64_t v392 = v618[18];
                  if ((unint64_t)v391 >= v392)
                  {
                    uint64_t v12 = v618[16];
                    uint64_t v394 = ((uint64_t)v391 - v12) >> 2;
                    if ((unint64_t)(v394 + 1) >> 62) {
                      sub_566C();
                    }
                    unint64_t v395 = v392 - v12;
                    unint64_t v396 = (uint64_t)(v392 - v12) >> 1;
                    if (v396 <= v394 + 1) {
                      unint64_t v396 = v394 + 1;
                    }
                    if (v395 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v397 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v397 = v396;
                    }
                    if (v397)
                    {
                      uint64_t v398 = (char *)sub_458C8((uint64_t)(v618 + 18), v397);
                      uint64_t v12 = v390[16];
                      uint64_t v391 = (_DWORD *)v390[17];
                    }
                    else
                    {
                      uint64_t v398 = 0;
                    }
                    uint64_t v399 = &v398[4 * v394];
                    *(_DWORD *)uint64_t v399 = *(_DWORD *)(v31 + 28);
                    uint64_t v393 = v399 + 4;
                    while (v391 != (_DWORD *)v12)
                    {
                      int v400 = *--v391;
                      *((_DWORD *)v399 - 1) = v400;
                      v399 -= 4;
                    }
                    v390[16] = v399;
                    v390[17] = v393;
                    v390[18] = &v398[4 * v397];
                    if (v12) {
                      operator delete((void *)v12);
                    }
                  }
                  else
                  {
                    *uint64_t v391 = *(_DWORD *)(v31 + 28);
                    uint64_t v393 = v391 + 1;
                  }
                  v390[17] = v393;
                  uint64_t v401 = v618;
                  v402 = (void *)v618[8];
                  unint64_t v403 = v618[9];
                  if ((unint64_t)v402 >= v403)
                  {
                    uint64_t v12 = v618[7];
                    uint64_t v405 = ((uint64_t)v402 - v12) >> 3;
                    if ((unint64_t)(v405 + 1) >> 61) {
                      sub_566C();
                    }
                    unint64_t v406 = v403 - v12;
                    unint64_t v407 = (uint64_t)(v403 - v12) >> 2;
                    if (v407 <= v405 + 1) {
                      unint64_t v407 = v405 + 1;
                    }
                    if (v406 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v408 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v408 = v407;
                    }
                    if (v408)
                    {
                      uint64_t v409 = (char *)sub_5714((uint64_t)(v618 + 9), v408);
                      uint64_t v12 = v401[7];
                      v402 = (void *)v401[8];
                    }
                    else
                    {
                      uint64_t v409 = 0;
                    }
                    v410 = &v409[8 * v405];
                    *(void *)v410 = *(void *)(v31 + 16);
                    v404 = v410 + 8;
                    while (v402 != (void *)v12)
                    {
                      uint64_t v411 = *--v402;
                      *((void *)v410 - 1) = v411;
                      v410 -= 8;
                    }
                    v401[7] = v410;
                    v401[8] = v404;
                    v401[9] = &v409[8 * v408];
                    if (v12) {
                      operator delete((void *)v12);
                    }
                  }
                  else
                  {
                    void *v402 = *(void *)(v31 + 16);
                    v404 = v402 + 1;
                  }
                  v401[8] = v404;
                  uint64_t v412 = v618;
                  uint64_t v413 = (void *)v618[11];
                  unint64_t v414 = v618[12];
                  if ((unint64_t)v413 >= v414)
                  {
                    uint64_t v12 = v618[10];
                    uint64_t v416 = ((uint64_t)v413 - v12) >> 3;
                    if ((unint64_t)(v416 + 1) >> 61) {
                      sub_566C();
                    }
                    unint64_t v417 = v414 - v12;
                    unint64_t v418 = (uint64_t)(v414 - v12) >> 2;
                    if (v418 <= v416 + 1) {
                      unint64_t v418 = v416 + 1;
                    }
                    if (v417 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v419 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v419 = v418;
                    }
                    if (v419)
                    {
                      v420 = (char *)sub_5714((uint64_t)(v618 + 12), v419);
                      uint64_t v12 = v412[10];
                      uint64_t v413 = (void *)v412[11];
                    }
                    else
                    {
                      v420 = 0;
                    }
                    uint64_t v421 = &v420[8 * v416];
                    *(void *)uint64_t v421 = *(void *)(v31 + 40);
                    uint64_t v415 = v421 + 8;
                    while (v413 != (void *)v12)
                    {
                      uint64_t v422 = *--v413;
                      *((void *)v421 - 1) = v422;
                      v421 -= 8;
                    }
                    v412[10] = v421;
                    v412[11] = v415;
                    v412[12] = &v420[8 * v419];
                    if (v12) {
                      operator delete((void *)v12);
                    }
                  }
                  else
                  {
                    *uint64_t v413 = *(void *)(v31 + 40);
                    uint64_t v415 = v413 + 1;
                  }
                  v412[11] = v415;
                }
                if (*(unsigned char *)(v31 + 48)) {
                  *(unsigned char *)(v31 + 48) = 0;
                }
              }
            }
            goto LABEL_856;
          case 0xD:
            uint64_t v91 = v573 + 40 * (v632 & 3);
            if (*(unsigned char *)(v91 + 32))
            {
              unint64_t v92 = sub_12C18C();
              if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)__s1 = 136315650;
                *(void *)&__s1[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupp"
                                      "ort/AGXProfilingSupport/APS/AGXPSAPSParserGen1.cpp";
                *(_WORD *)&__s1[12] = 1024;
                *(_DWORD *)&__s1[14] = 1287;
                *(_WORD *)&__s1[18] = 2080;
                *(void *)&__s1[20] = "!currentTile.has_value()";
                _os_log_error_impl(&def_1C1270, v92, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", __s1, 0x1Cu);
              }
              uint64_t v12 = sub_12C17C();
              if (v12) {
                uint64_t v12 = sub_12C184();
              }
            }
            uint64_t v93 = v618[3256];
            uint64_t v94 = v618[3255];
            uint64_t v95 = v618[3259];
            uint64_t v96 = v618[3258];
            uint64_t v97 = *(void *)(a1 + 112);
            if (v97 == -1) {
              uint64_t v97 = 0;
            }
            *(void *)(a1 + 112) = v97 + 1;
            if (!*(unsigned char *)(v91 + 32)) {
              *(unsigned char *)(v91 + 32) = 1;
            }
            *(void *)uint64_t v91 = (((v95 - v96) << 29) - 0x100000000) | (((unint64_t)(v93 - v94) >> 3)
                                                                    - 1);
            *(void *)(v91 + 16) = v97;
            *(_DWORD *)(v91 + 24) = -1;
            goto LABEL_856;
          case 0xE:
            sub_73354(a1, v618, v632 & 3);
            goto LABEL_856;
          case 0xF:
            int v58 = DWORD1(v632);
            if (DWORD1(v632) <= 7)
            {
              uint64_t v59 = v568 + 12 * DWORD1(v632);
              *(void *)uint64_t v59 = v632;
              *(_DWORD *)(v59 + 8) = DWORD2(v632);
              unsigned int v60 = v58 - 4;
              if (v60 <= 2)
              {
                uint64_t v61 = v573 + 40 * v60;
                if (*(unsigned char *)(v61 + 32))
                {
                  if (v632 <= 7)
                  {
                    uint64_t v62 = v572 + 56 * v632;
                    if (*(unsigned char *)(v62 + 48)) {
                      *(_DWORD *)(v61 + 24) = *(_DWORD *)(v62 + 24);
                    }
                  }
                }
              }
            }
            goto LABEL_856;
          case 0x10:
            unint64_t v617 = (v617 & 0xFFFFFFFFFFFF8000) + 0x8000;
            goto LABEL_856;
          default:
            goto LABEL_856;
        }
      }
      if (v567) {
        _DWORD *v567 = 2;
      }
    }
    else
    {
      uint64_t v583 = 0;
    }
LABEL_881:
    uint64_t v546 = 0;
    *(_DWORD *)&__s1[8] = 214;
    *(void *)__s1 = off_741FE0;
    do
    {
      v547 = v618;
      if (v618[3 * v546 + 97] != v618[3 * v546 + 98])
      {
        uint64_t v12 = (uint64_t)sub_738A8(v12, v546);
        uint64_t v548 = v12;
        v549 = (uint64_t *)v547[3248];
        unint64_t v550 = v547[3249];
        if ((unint64_t)v549 >= v550)
        {
          uint64_t v552 = v547[3247];
          uint64_t v553 = ((uint64_t)v549 - v552) >> 3;
          if ((unint64_t)(v553 + 1) >> 61) {
            sub_566C();
          }
          uint64_t v554 = v550 - v552;
          uint64_t v555 = v554 >> 2;
          if (v554 >> 2 <= (unint64_t)(v553 + 1)) {
            uint64_t v555 = v553 + 1;
          }
          if ((unint64_t)v554 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v556 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v556 = v555;
          }
          if (v556) {
            uint64_t v12 = (uint64_t)sub_5714((uint64_t)(v547 + 3249), v556);
          }
          else {
            uint64_t v12 = 0;
          }
          v557 = (uint64_t *)(v12 + 8 * v553);
          uint64_t *v557 = v548;
          v551 = v557 + 1;
          v558 = (char *)v547[3248];
          v559 = (char *)v547[3247];
          if (v558 != v559)
          {
            do
            {
              uint64_t v560 = *((void *)v558 - 1);
              v558 -= 8;
              *--v557 = v560;
            }
            while (v558 != v559);
            v558 = (char *)v547[3247];
          }
          v547[3247] = v557;
          v547[3248] = v551;
          v547[3249] = v12 + 8 * v556;
          if (v558) {
            operator delete(v558);
          }
        }
        else
        {
          uint64_t *v549 = v12;
          v551 = v549 + 1;
        }
        v547[3248] = v551;
      }
      ++v546;
    }
    while (v546 != 214);
    uint64_t result = v618;
    v618[3250] = v583;
    result[3251] = v617;
  }
  else
  {
    uint64_t result = 0;
    if (a5) {
      *a5 = 1;
    }
  }
  return result;
}

void sub_66DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p)
{
  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_66F4C(uint64_t a1, char ***a2)
{
  int v2894 = 214;
  uint64_t v2892 = 0;
  v2893 = off_741FE0;
  long long __p = 0;
  unint64_t v2891 = 0;
  sub_626EC((uint64_t)&__p, 0xD6uLL, 0);
  char v2889 = 0;
  sub_62870((uint64_t)&__p, v2891, &v2889);
  uint64_t v6 = a2;
  long long v5 = *a2;
  uint64_t v7 = (char *)v6[1] - (char *)v5;
  if (!v7) {
    goto LABEL_11;
  }
  unint64_t v8 = v7 >> 3;
  uint64_t v9 = (char *)__p;
  uint64_t v10 = v8 <= 1 ? 1 : v8;
  char v11 = 1;
  do
  {
    unsigned int v4 = sub_94134(v4, *v5);
    if (v4 == 214) {
      char v11 = 0;
    }
    else {
      *(void *)&v9[((unint64_t)v4 >> 3) & 0x1FFFFFF8] |= 1 << v4;
    }
    ++v5;
    --v10;
  }
  while (v10);
  if ((v11 & 1) == 0)
  {
    std::vector<std::vector<ProfileEvent>>::__clear[abi:nn180100]((uint64_t *)(a1 + 136));
    uint64_t v2887 = 0;
  }
  else
  {
LABEL_11:
    uint64_t v12 = (void *)(a1 + 136);
    std::vector<std::vector<ProfileEvent>>::__clear[abi:nn180100]((uint64_t *)(a1 + 136));
    sub_62984((uint64_t *)(a1 + 136), 0x10uLL);
    uint64_t v13 = 0;
    unint64_t v14 = (_DWORD *)(a1 + 48);
    do
    {
      switch((int)v13)
      {
        case 0:
          if (!*v14)
          {
            if ((*((unsigned char *)__p + 16) & 2) == 0) {
              goto LABEL_378;
            }
            uint64_t v15 = *v12 + 24 * v13;
            uint64_t v17 = (_DWORD **)(v15 + 8);
            uint64_t v16 = *(_DWORD **)(v15 + 8);
            uint64_t v19 = (void *)(v15 + 16);
            unint64_t v18 = *(void *)(v15 + 16);
            if ((unint64_t)v16 >= v18)
            {
              unint64_t v171 = *(_DWORD **)v15;
              uint64_t v172 = ((uint64_t)v16 - *(void *)v15) >> 2;
              unint64_t v173 = v172 + 1;
              if ((unint64_t)(v172 + 1) >> 62) {
                sub_566C();
              }
              uint64_t v174 = v18 - (void)v171;
              if (v174 >> 1 > v173) {
                unint64_t v173 = v174 >> 1;
              }
              if ((unint64_t)v174 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v175 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v175 = v173;
              }
              if (v175)
              {
                unint64_t v176 = (char *)sub_458C8((uint64_t)v19, v175);
                uint64_t v16 = *v17;
                unint64_t v171 = *(_DWORD **)v15;
              }
              else
              {
                unint64_t v176 = 0;
              }
              uint64_t v343 = &v176[4 * v172];
              *(_DWORD *)uint64_t v343 = 129;
              int v20 = v343 + 4;
              while (v16 != v171)
              {
                int v344 = *--v16;
                *((_DWORD *)v343 - 1) = v344;
                v343 -= 4;
              }
              *(void *)uint64_t v15 = v343;
              *uint64_t v17 = v20;
              *uint64_t v19 = &v176[4 * v175];
              if (v171) {
                operator delete(v171);
              }
            }
            else
            {
              *uint64_t v16 = 129;
              int v20 = v16 + 1;
            }
            *uint64_t v17 = v20;
            if (!*v14)
            {
LABEL_378:
              if ((*((unsigned char *)__p + 16) & 4) == 0) {
                goto LABEL_3455;
              }
              uint64_t v345 = *v12 + 24 * v13;
              unint64_t v347 = (_DWORD **)(v345 + 8);
              uint64_t v346 = *(_DWORD **)(v345 + 8);
              uint64_t v349 = (void *)(v345 + 16);
              unint64_t v348 = *(void *)(v345 + 16);
              if ((unint64_t)v346 >= v348)
              {
                uint64_t v351 = *(_DWORD **)v345;
                uint64_t v352 = ((uint64_t)v346 - *(void *)v345) >> 2;
                unint64_t v353 = v352 + 1;
                if ((unint64_t)(v352 + 1) >> 62) {
                  sub_566C();
                }
                uint64_t v354 = v348 - (void)v351;
                if (v354 >> 1 > v353) {
                  unint64_t v353 = v354 >> 1;
                }
                if ((unint64_t)v354 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v355 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v355 = v353;
                }
                if (v355)
                {
                  uint64_t v356 = (char *)sub_458C8((uint64_t)v349, v355);
                  uint64_t v346 = *v347;
                  uint64_t v351 = *(_DWORD **)v345;
                }
                else
                {
                  uint64_t v356 = 0;
                }
                uint64_t v560 = &v356[4 * v352];
                *(_DWORD *)uint64_t v560 = 130;
                v350 = v560 + 4;
                while (v346 != v351)
                {
                  int v561 = *--v346;
                  *((_DWORD *)v560 - 1) = v561;
                  v560 -= 4;
                }
                *(void *)uint64_t v345 = v560;
                char *v347 = v350;
                *uint64_t v349 = &v356[4 * v355];
                if (v351) {
                  operator delete(v351);
                }
              }
              else
              {
                _DWORD *v346 = 130;
                v350 = v346 + 1;
              }
              char *v347 = v350;
              if (!*v14)
              {
LABEL_3455:
                if ((*((unsigned char *)__p + 16) & 8) == 0) {
                  goto LABEL_4066;
                }
                uint64_t v562 = *v12 + 24 * v13;
                unsigned int v564 = (_DWORD **)(v562 + 8);
                unsigned int v563 = *(_DWORD **)(v562 + 8);
                uint64_t v566 = (void *)(v562 + 16);
                unint64_t v565 = *(void *)(v562 + 16);
                if ((unint64_t)v563 >= v565)
                {
                  uint64_t v568 = *(_DWORD **)v562;
                  uint64_t v569 = ((uint64_t)v563 - *(void *)v562) >> 2;
                  unint64_t v570 = v569 + 1;
                  if ((unint64_t)(v569 + 1) >> 62) {
                    sub_566C();
                  }
                  uint64_t v571 = v565 - (void)v568;
                  if (v571 >> 1 > v570) {
                    unint64_t v570 = v571 >> 1;
                  }
                  if ((unint64_t)v571 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v572 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v572 = v570;
                  }
                  if (v572)
                  {
                    uint64_t v573 = (char *)sub_458C8((uint64_t)v566, v572);
                    unsigned int v563 = *v564;
                    uint64_t v568 = *(_DWORD **)v562;
                  }
                  else
                  {
                    uint64_t v573 = 0;
                  }
                  v762 = &v573[4 * v569];
                  *(_DWORD *)v762 = 131;
                  v567 = v762 + 4;
                  while (v563 != v568)
                  {
                    int v763 = *--v563;
                    *((_DWORD *)v762 - 1) = v763;
                    v762 -= 4;
                  }
                  *(void *)uint64_t v562 = v762;
                  *unsigned int v564 = v567;
                  *uint64_t v566 = &v573[4 * v572];
                  if (v568) {
                    operator delete(v568);
                  }
                }
                else
                {
                  *unsigned int v563 = 131;
                  v567 = v563 + 1;
                }
                *unsigned int v564 = v567;
                if (!*v14)
                {
LABEL_4066:
                  if ((*((unsigned char *)__p + 16) & 0x10) == 0) {
                    goto LABEL_4067;
                  }
                  uint64_t v764 = *v12 + 24 * v13;
                  v766 = (_DWORD **)(v764 + 8);
                  v765 = *(_DWORD **)(v764 + 8);
                  v768 = (void *)(v764 + 16);
                  unint64_t v767 = *(void *)(v764 + 16);
                  if ((unint64_t)v765 >= v767)
                  {
                    v770 = *(_DWORD **)v764;
                    uint64_t v771 = ((uint64_t)v765 - *(void *)v764) >> 2;
                    unint64_t v772 = v771 + 1;
                    if ((unint64_t)(v771 + 1) >> 62) {
                      sub_566C();
                    }
                    uint64_t v773 = v767 - (void)v770;
                    if (v773 >> 1 > v772) {
                      unint64_t v772 = v773 >> 1;
                    }
                    if ((unint64_t)v773 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v774 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v774 = v772;
                    }
                    if (v774)
                    {
                      v775 = (char *)sub_458C8((uint64_t)v768, v774);
                      v765 = *v766;
                      v770 = *(_DWORD **)v764;
                    }
                    else
                    {
                      v775 = 0;
                    }
                    v951 = &v775[4 * v771];
                    *(_DWORD *)v951 = 132;
                    v769 = v951 + 4;
                    while (v765 != v770)
                    {
                      int v952 = *--v765;
                      *((_DWORD *)v951 - 1) = v952;
                      v951 -= 4;
                    }
                    *(void *)uint64_t v764 = v951;
                    *v766 = v769;
                    void *v768 = &v775[4 * v774];
                    if (v770) {
                      operator delete(v770);
                    }
                  }
                  else
                  {
                    _DWORD *v765 = 132;
                    v769 = v765 + 1;
                  }
                  *v766 = v769;
                  if (!*v14)
                  {
LABEL_4067:
                    if ((*((unsigned char *)__p + 16) & 0x20) == 0) {
                      goto LABEL_4068;
                    }
                    uint64_t v953 = *v12 + 24 * v13;
                    v955 = (_DWORD **)(v953 + 8);
                    v954 = *(_DWORD **)(v953 + 8);
                    v957 = (void *)(v953 + 16);
                    unint64_t v956 = *(void *)(v953 + 16);
                    if ((unint64_t)v954 >= v956)
                    {
                      v959 = *(_DWORD **)v953;
                      uint64_t v960 = ((uint64_t)v954 - *(void *)v953) >> 2;
                      unint64_t v961 = v960 + 1;
                      if ((unint64_t)(v960 + 1) >> 62) {
                        sub_566C();
                      }
                      uint64_t v962 = v956 - (void)v959;
                      if (v962 >> 1 > v961) {
                        unint64_t v961 = v962 >> 1;
                      }
                      if ((unint64_t)v962 >= 0x7FFFFFFFFFFFFFFCLL) {
                        unint64_t v963 = 0x3FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v963 = v961;
                      }
                      if (v963)
                      {
                        v964 = (char *)sub_458C8((uint64_t)v957, v963);
                        v954 = *v955;
                        v959 = *(_DWORD **)v953;
                      }
                      else
                      {
                        v964 = 0;
                      }
                      v1126 = &v964[4 * v960];
                      *(_DWORD *)v1126 = 133;
                      v958 = v1126 + 4;
                      while (v954 != v959)
                      {
                        int v1127 = *--v954;
                        *((_DWORD *)v1126 - 1) = v1127;
                        v1126 -= 4;
                      }
                      *(void *)uint64_t v953 = v1126;
                      *v955 = v958;
                      void *v957 = &v964[4 * v963];
                      if (v959) {
                        operator delete(v959);
                      }
                    }
                    else
                    {
                      _DWORD *v954 = 133;
                      v958 = v954 + 1;
                    }
                    *v955 = v958;
                    if (!*v14)
                    {
LABEL_4068:
                      if ((*((unsigned char *)__p + 16) & 0x40) == 0) {
                        goto LABEL_4069;
                      }
                      uint64_t v1128 = *v12 + 24 * v13;
                      v1130 = (_DWORD **)(v1128 + 8);
                      v1129 = *(_DWORD **)(v1128 + 8);
                      v1132 = (void *)(v1128 + 16);
                      unint64_t v1131 = *(void *)(v1128 + 16);
                      if ((unint64_t)v1129 >= v1131)
                      {
                        v1134 = *(_DWORD **)v1128;
                        uint64_t v1135 = ((uint64_t)v1129 - *(void *)v1128) >> 2;
                        unint64_t v1136 = v1135 + 1;
                        if ((unint64_t)(v1135 + 1) >> 62) {
                          sub_566C();
                        }
                        uint64_t v1137 = v1131 - (void)v1134;
                        if (v1137 >> 1 > v1136) {
                          unint64_t v1136 = v1137 >> 1;
                        }
                        if ((unint64_t)v1137 >= 0x7FFFFFFFFFFFFFFCLL) {
                          unint64_t v1138 = 0x3FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v1138 = v1136;
                        }
                        if (v1138)
                        {
                          v1139 = (char *)sub_458C8((uint64_t)v1132, v1138);
                          v1129 = *v1130;
                          v1134 = *(_DWORD **)v1128;
                        }
                        else
                        {
                          v1139 = 0;
                        }
                        v1291 = &v1139[4 * v1135];
                        *(_DWORD *)v1291 = 134;
                        v1133 = v1291 + 4;
                        while (v1129 != v1134)
                        {
                          int v1292 = *--v1129;
                          *((_DWORD *)v1291 - 1) = v1292;
                          v1291 -= 4;
                        }
                        *(void *)uint64_t v1128 = v1291;
                        *v1130 = v1133;
                        void *v1132 = &v1139[4 * v1138];
                        if (v1134) {
                          operator delete(v1134);
                        }
                      }
                      else
                      {
                        _DWORD *v1129 = 134;
                        v1133 = v1129 + 1;
                      }
                      *v1130 = v1133;
                      if (!*v14)
                      {
LABEL_4069:
                        if ((*((unsigned char *)__p + 16) & 0x80) == 0) {
                          goto LABEL_4070;
                        }
                        uint64_t v1293 = *v12 + 24 * v13;
                        v1295 = (_DWORD **)(v1293 + 8);
                        v1294 = *(_DWORD **)(v1293 + 8);
                        v1297 = (void *)(v1293 + 16);
                        unint64_t v1296 = *(void *)(v1293 + 16);
                        if ((unint64_t)v1294 >= v1296)
                        {
                          v1299 = *(_DWORD **)v1293;
                          uint64_t v1300 = ((uint64_t)v1294 - *(void *)v1293) >> 2;
                          unint64_t v1301 = v1300 + 1;
                          if ((unint64_t)(v1300 + 1) >> 62) {
                            sub_566C();
                          }
                          uint64_t v1302 = v1296 - (void)v1299;
                          if (v1302 >> 1 > v1301) {
                            unint64_t v1301 = v1302 >> 1;
                          }
                          if ((unint64_t)v1302 >= 0x7FFFFFFFFFFFFFFCLL) {
                            unint64_t v1303 = 0x3FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v1303 = v1301;
                          }
                          if (v1303)
                          {
                            v1304 = (char *)sub_458C8((uint64_t)v1297, v1303);
                            v1294 = *v1295;
                            v1299 = *(_DWORD **)v1293;
                          }
                          else
                          {
                            v1304 = 0;
                          }
                          v1432 = &v1304[4 * v1300];
                          *(_DWORD *)v1432 = 135;
                          v1298 = v1432 + 4;
                          while (v1294 != v1299)
                          {
                            int v1433 = *--v1294;
                            *((_DWORD *)v1432 - 1) = v1433;
                            v1432 -= 4;
                          }
                          *(void *)uint64_t v1293 = v1432;
                          *v1295 = v1298;
                          void *v1297 = &v1304[4 * v1303];
                          if (v1299) {
                            operator delete(v1299);
                          }
                        }
                        else
                        {
                          _DWORD *v1294 = 135;
                          v1298 = v1294 + 1;
                        }
                        *v1295 = v1298;
                        if (!*v14)
                        {
LABEL_4070:
                          if ((*((unsigned char *)__p + 17) & 1) == 0) {
                            goto LABEL_4071;
                          }
                          uint64_t v1434 = *v12 + 24 * v13;
                          v1436 = (_DWORD **)(v1434 + 8);
                          v1435 = *(_DWORD **)(v1434 + 8);
                          v1438 = (void *)(v1434 + 16);
                          unint64_t v1437 = *(void *)(v1434 + 16);
                          if ((unint64_t)v1435 >= v1437)
                          {
                            v1440 = *(_DWORD **)v1434;
                            uint64_t v1441 = ((uint64_t)v1435 - *(void *)v1434) >> 2;
                            unint64_t v1442 = v1441 + 1;
                            if ((unint64_t)(v1441 + 1) >> 62) {
                              sub_566C();
                            }
                            uint64_t v1443 = v1437 - (void)v1440;
                            if (v1443 >> 1 > v1442) {
                              unint64_t v1442 = v1443 >> 1;
                            }
                            if ((unint64_t)v1443 >= 0x7FFFFFFFFFFFFFFCLL) {
                              unint64_t v1444 = 0x3FFFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v1444 = v1442;
                            }
                            if (v1444)
                            {
                              v1445 = (char *)sub_458C8((uint64_t)v1438, v1444);
                              v1435 = *v1436;
                              v1440 = *(_DWORD **)v1434;
                            }
                            else
                            {
                              v1445 = 0;
                            }
                            v1575 = &v1445[4 * v1441];
                            *(_DWORD *)v1575 = 136;
                            v1439 = v1575 + 4;
                            while (v1435 != v1440)
                            {
                              int v1576 = *--v1435;
                              *((_DWORD *)v1575 - 1) = v1576;
                              v1575 -= 4;
                            }
                            *(void *)uint64_t v1434 = v1575;
                            *v1436 = v1439;
                            void *v1438 = &v1445[4 * v1444];
                            if (v1440) {
                              operator delete(v1440);
                            }
                          }
                          else
                          {
                            _DWORD *v1435 = 136;
                            v1439 = v1435 + 1;
                          }
                          *v1436 = v1439;
                          if (!*v14)
                          {
LABEL_4071:
                            if ((*((unsigned char *)__p + 17) & 2) == 0) {
                              goto LABEL_4072;
                            }
                            uint64_t v1577 = *v12 + 24 * v13;
                            v1579 = (_DWORD **)(v1577 + 8);
                            v1578 = *(_DWORD **)(v1577 + 8);
                            v1581 = (void *)(v1577 + 16);
                            unint64_t v1580 = *(void *)(v1577 + 16);
                            if ((unint64_t)v1578 >= v1580)
                            {
                              v1583 = *(_DWORD **)v1577;
                              uint64_t v1584 = ((uint64_t)v1578 - *(void *)v1577) >> 2;
                              unint64_t v1585 = v1584 + 1;
                              if ((unint64_t)(v1584 + 1) >> 62) {
                                sub_566C();
                              }
                              uint64_t v1586 = v1580 - (void)v1583;
                              if (v1586 >> 1 > v1585) {
                                unint64_t v1585 = v1586 >> 1;
                              }
                              if ((unint64_t)v1586 >= 0x7FFFFFFFFFFFFFFCLL) {
                                unint64_t v1587 = 0x3FFFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v1587 = v1585;
                              }
                              if (v1587)
                              {
                                v1588 = (char *)sub_458C8((uint64_t)v1581, v1587);
                                v1578 = *v1579;
                                v1583 = *(_DWORD **)v1577;
                              }
                              else
                              {
                                v1588 = 0;
                              }
                              v1707 = &v1588[4 * v1584];
                              *(_DWORD *)v1707 = 137;
                              v1582 = v1707 + 4;
                              while (v1578 != v1583)
                              {
                                int v1708 = *--v1578;
                                *((_DWORD *)v1707 - 1) = v1708;
                                v1707 -= 4;
                              }
                              *(void *)uint64_t v1577 = v1707;
                              *v1579 = v1582;
                              void *v1581 = &v1588[4 * v1587];
                              if (v1583) {
                                operator delete(v1583);
                              }
                            }
                            else
                            {
                              _DWORD *v1578 = 137;
                              v1582 = v1578 + 1;
                            }
                            *v1579 = v1582;
                            if (!*v14)
                            {
LABEL_4072:
                              if ((*((unsigned char *)__p + 17) & 4) == 0) {
                                goto LABEL_4073;
                              }
                              uint64_t v1709 = *v12 + 24 * v13;
                              v1711 = (_DWORD **)(v1709 + 8);
                              v1710 = *(_DWORD **)(v1709 + 8);
                              v1713 = (void *)(v1709 + 16);
                              unint64_t v1712 = *(void *)(v1709 + 16);
                              if ((unint64_t)v1710 >= v1712)
                              {
                                v1715 = *(_DWORD **)v1709;
                                uint64_t v1716 = ((uint64_t)v1710 - *(void *)v1709) >> 2;
                                unint64_t v1717 = v1716 + 1;
                                if ((unint64_t)(v1716 + 1) >> 62) {
                                  sub_566C();
                                }
                                uint64_t v1718 = v1712 - (void)v1715;
                                if (v1718 >> 1 > v1717) {
                                  unint64_t v1717 = v1718 >> 1;
                                }
                                if ((unint64_t)v1718 >= 0x7FFFFFFFFFFFFFFCLL) {
                                  unint64_t v1719 = 0x3FFFFFFFFFFFFFFFLL;
                                }
                                else {
                                  unint64_t v1719 = v1717;
                                }
                                if (v1719)
                                {
                                  v1720 = (char *)sub_458C8((uint64_t)v1713, v1719);
                                  v1710 = *v1711;
                                  v1715 = *(_DWORD **)v1709;
                                }
                                else
                                {
                                  v1720 = 0;
                                }
                                v1826 = &v1720[4 * v1716];
                                *(_DWORD *)v1826 = 138;
                                v1714 = v1826 + 4;
                                while (v1710 != v1715)
                                {
                                  int v1827 = *--v1710;
                                  *((_DWORD *)v1826 - 1) = v1827;
                                  v1826 -= 4;
                                }
                                *(void *)uint64_t v1709 = v1826;
                                *v1711 = v1714;
                                void *v1713 = &v1720[4 * v1719];
                                if (v1715) {
                                  operator delete(v1715);
                                }
                              }
                              else
                              {
                                _DWORD *v1710 = 138;
                                v1714 = v1710 + 1;
                              }
                              *v1711 = v1714;
                              if (!*v14)
                              {
LABEL_4073:
                                if ((*((unsigned char *)__p + 17) & 8) == 0) {
                                  goto LABEL_4074;
                                }
                                uint64_t v1828 = *v12 + 24 * v13;
                                v1830 = (_DWORD **)(v1828 + 8);
                                v1829 = *(_DWORD **)(v1828 + 8);
                                v1832 = (void *)(v1828 + 16);
                                unint64_t v1831 = *(void *)(v1828 + 16);
                                if ((unint64_t)v1829 >= v1831)
                                {
                                  v1834 = *(_DWORD **)v1828;
                                  uint64_t v1835 = ((uint64_t)v1829 - *(void *)v1828) >> 2;
                                  unint64_t v1836 = v1835 + 1;
                                  if ((unint64_t)(v1835 + 1) >> 62) {
                                    sub_566C();
                                  }
                                  uint64_t v1837 = v1831 - (void)v1834;
                                  if (v1837 >> 1 > v1836) {
                                    unint64_t v1836 = v1837 >> 1;
                                  }
                                  if ((unint64_t)v1837 >= 0x7FFFFFFFFFFFFFFCLL) {
                                    unint64_t v1838 = 0x3FFFFFFFFFFFFFFFLL;
                                  }
                                  else {
                                    unint64_t v1838 = v1836;
                                  }
                                  if (v1838)
                                  {
                                    v1839 = (char *)sub_458C8((uint64_t)v1832, v1838);
                                    v1829 = *v1830;
                                    v1834 = *(_DWORD **)v1828;
                                  }
                                  else
                                  {
                                    v1839 = 0;
                                  }
                                  v1928 = &v1839[4 * v1835];
                                  *(_DWORD *)v1928 = 139;
                                  v1833 = v1928 + 4;
                                  while (v1829 != v1834)
                                  {
                                    int v1929 = *--v1829;
                                    *((_DWORD *)v1928 - 1) = v1929;
                                    v1928 -= 4;
                                  }
                                  *(void *)uint64_t v1828 = v1928;
                                  *v1830 = v1833;
                                  void *v1832 = &v1839[4 * v1838];
                                  if (v1834) {
                                    operator delete(v1834);
                                  }
                                }
                                else
                                {
                                  _DWORD *v1829 = 139;
                                  v1833 = v1829 + 1;
                                }
                                *v1830 = v1833;
                                if (!*v14)
                                {
LABEL_4074:
                                  if ((*((unsigned char *)__p + 17) & 0x10) == 0) {
                                    goto LABEL_4075;
                                  }
                                  uint64_t v1930 = *v12 + 24 * v13;
                                  v1932 = (_DWORD **)(v1930 + 8);
                                  v1931 = *(_DWORD **)(v1930 + 8);
                                  v1934 = (void *)(v1930 + 16);
                                  unint64_t v1933 = *(void *)(v1930 + 16);
                                  if ((unint64_t)v1931 >= v1933)
                                  {
                                    v1936 = *(_DWORD **)v1930;
                                    uint64_t v1937 = ((uint64_t)v1931 - *(void *)v1930) >> 2;
                                    unint64_t v1938 = v1937 + 1;
                                    if ((unint64_t)(v1937 + 1) >> 62) {
                                      sub_566C();
                                    }
                                    uint64_t v1939 = v1933 - (void)v1936;
                                    if (v1939 >> 1 > v1938) {
                                      unint64_t v1938 = v1939 >> 1;
                                    }
                                    if ((unint64_t)v1939 >= 0x7FFFFFFFFFFFFFFCLL) {
                                      unint64_t v1940 = 0x3FFFFFFFFFFFFFFFLL;
                                    }
                                    else {
                                      unint64_t v1940 = v1938;
                                    }
                                    if (v1940)
                                    {
                                      v1941 = (char *)sub_458C8((uint64_t)v1934, v1940);
                                      v1931 = *v1932;
                                      v1936 = *(_DWORD **)v1930;
                                    }
                                    else
                                    {
                                      v1941 = 0;
                                    }
                                    v2018 = &v1941[4 * v1937];
                                    *(_DWORD *)v2018 = 140;
                                    v1935 = v2018 + 4;
                                    while (v1931 != v1936)
                                    {
                                      int v2019 = *--v1931;
                                      *((_DWORD *)v2018 - 1) = v2019;
                                      v2018 -= 4;
                                    }
                                    *(void *)uint64_t v1930 = v2018;
                                    *v1932 = v1935;
                                    void *v1934 = &v1941[4 * v1940];
                                    if (v1936) {
                                      operator delete(v1936);
                                    }
                                  }
                                  else
                                  {
                                    _DWORD *v1931 = 140;
                                    v1935 = v1931 + 1;
                                  }
                                  *v1932 = v1935;
                                  if (!*v14)
                                  {
LABEL_4075:
                                    if ((*((unsigned char *)__p + 17) & 0x20) == 0) {
                                      goto LABEL_4076;
                                    }
                                    uint64_t v2020 = *v12 + 24 * v13;
                                    v2022 = (_DWORD **)(v2020 + 8);
                                    v2021 = *(_DWORD **)(v2020 + 8);
                                    v2024 = (void *)(v2020 + 16);
                                    unint64_t v2023 = *(void *)(v2020 + 16);
                                    if ((unint64_t)v2021 >= v2023)
                                    {
                                      v2026 = *(_DWORD **)v2020;
                                      uint64_t v2027 = ((uint64_t)v2021 - *(void *)v2020) >> 2;
                                      unint64_t v2028 = v2027 + 1;
                                      if ((unint64_t)(v2027 + 1) >> 62) {
                                        sub_566C();
                                      }
                                      uint64_t v2029 = v2023 - (void)v2026;
                                      if (v2029 >> 1 > v2028) {
                                        unint64_t v2028 = v2029 >> 1;
                                      }
                                      if ((unint64_t)v2029 >= 0x7FFFFFFFFFFFFFFCLL) {
                                        unint64_t v2030 = 0x3FFFFFFFFFFFFFFFLL;
                                      }
                                      else {
                                        unint64_t v2030 = v2028;
                                      }
                                      if (v2030)
                                      {
                                        v2031 = (char *)sub_458C8((uint64_t)v2024, v2030);
                                        v2021 = *v2022;
                                        v2026 = *(_DWORD **)v2020;
                                      }
                                      else
                                      {
                                        v2031 = 0;
                                      }
                                      v2103 = &v2031[4 * v2027];
                                      *(_DWORD *)v2103 = 141;
                                      v2025 = v2103 + 4;
                                      while (v2021 != v2026)
                                      {
                                        int v2104 = *--v2021;
                                        *((_DWORD *)v2103 - 1) = v2104;
                                        v2103 -= 4;
                                      }
                                      *(void *)uint64_t v2020 = v2103;
                                      *v2022 = v2025;
                                      void *v2024 = &v2031[4 * v2030];
                                      if (v2026) {
                                        operator delete(v2026);
                                      }
                                    }
                                    else
                                    {
                                      _DWORD *v2021 = 141;
                                      v2025 = v2021 + 1;
                                    }
                                    *v2022 = v2025;
                                    if (!*v14)
                                    {
LABEL_4076:
                                      if ((*((unsigned char *)__p + 17) & 0x40) == 0) {
                                        goto LABEL_4077;
                                      }
                                      uint64_t v2105 = *v12 + 24 * v13;
                                      v2107 = (_DWORD **)(v2105 + 8);
                                      v2106 = *(_DWORD **)(v2105 + 8);
                                      v2109 = (void *)(v2105 + 16);
                                      unint64_t v2108 = *(void *)(v2105 + 16);
                                      if ((unint64_t)v2106 >= v2108)
                                      {
                                        v2111 = *(_DWORD **)v2105;
                                        uint64_t v2112 = ((uint64_t)v2106 - *(void *)v2105) >> 2;
                                        unint64_t v2113 = v2112 + 1;
                                        if ((unint64_t)(v2112 + 1) >> 62) {
                                          sub_566C();
                                        }
                                        uint64_t v2114 = v2108 - (void)v2111;
                                        if (v2114 >> 1 > v2113) {
                                          unint64_t v2113 = v2114 >> 1;
                                        }
                                        if ((unint64_t)v2114 >= 0x7FFFFFFFFFFFFFFCLL) {
                                          unint64_t v2115 = 0x3FFFFFFFFFFFFFFFLL;
                                        }
                                        else {
                                          unint64_t v2115 = v2113;
                                        }
                                        if (v2115)
                                        {
                                          v2116 = (char *)sub_458C8((uint64_t)v2109, v2115);
                                          v2106 = *v2107;
                                          v2111 = *(_DWORD **)v2105;
                                        }
                                        else
                                        {
                                          v2116 = 0;
                                        }
                                        v2187 = &v2116[4 * v2112];
                                        *(_DWORD *)v2187 = 142;
                                        v2110 = v2187 + 4;
                                        while (v2106 != v2111)
                                        {
                                          int v2188 = *--v2106;
                                          *((_DWORD *)v2187 - 1) = v2188;
                                          v2187 -= 4;
                                        }
                                        *(void *)uint64_t v2105 = v2187;
                                        *v2107 = v2110;
                                        void *v2109 = &v2116[4 * v2115];
                                        if (v2111) {
                                          operator delete(v2111);
                                        }
                                      }
                                      else
                                      {
                                        _DWORD *v2106 = 142;
                                        v2110 = v2106 + 1;
                                      }
                                      *v2107 = v2110;
                                      if (!*v14)
                                      {
LABEL_4077:
                                        if ((*((unsigned char *)__p + 17) & 0x80) == 0) {
                                          goto LABEL_4078;
                                        }
                                        uint64_t v2189 = *v12 + 24 * v13;
                                        v2191 = (_DWORD **)(v2189 + 8);
                                        v2190 = *(_DWORD **)(v2189 + 8);
                                        v2193 = (void *)(v2189 + 16);
                                        unint64_t v2192 = *(void *)(v2189 + 16);
                                        if ((unint64_t)v2190 >= v2192)
                                        {
                                          v2195 = *(_DWORD **)v2189;
                                          uint64_t v2196 = ((uint64_t)v2190 - *(void *)v2189) >> 2;
                                          unint64_t v2197 = v2196 + 1;
                                          if ((unint64_t)(v2196 + 1) >> 62) {
                                            sub_566C();
                                          }
                                          uint64_t v2198 = v2192 - (void)v2195;
                                          if (v2198 >> 1 > v2197) {
                                            unint64_t v2197 = v2198 >> 1;
                                          }
                                          if ((unint64_t)v2198 >= 0x7FFFFFFFFFFFFFFCLL) {
                                            unint64_t v2199 = 0x3FFFFFFFFFFFFFFFLL;
                                          }
                                          else {
                                            unint64_t v2199 = v2197;
                                          }
                                          if (v2199)
                                          {
                                            v2200 = (char *)sub_458C8((uint64_t)v2193, v2199);
                                            v2190 = *v2191;
                                            v2195 = *(_DWORD **)v2189;
                                          }
                                          else
                                          {
                                            v2200 = 0;
                                          }
                                          v2263 = &v2200[4 * v2196];
                                          *(_DWORD *)v2263 = 143;
                                          v2194 = v2263 + 4;
                                          while (v2190 != v2195)
                                          {
                                            int v2264 = *--v2190;
                                            *((_DWORD *)v2263 - 1) = v2264;
                                            v2263 -= 4;
                                          }
                                          *(void *)uint64_t v2189 = v2263;
                                          *v2191 = v2194;
                                          void *v2193 = &v2200[4 * v2199];
                                          if (v2195) {
                                            operator delete(v2195);
                                          }
                                        }
                                        else
                                        {
                                          _DWORD *v2190 = 143;
                                          v2194 = v2190 + 1;
                                        }
                                        *v2191 = v2194;
                                        if (!*v14)
                                        {
LABEL_4078:
                                          if ((*((unsigned char *)__p + 18) & 1) == 0) {
                                            goto LABEL_4079;
                                          }
                                          uint64_t v2265 = *v12 + 24 * v13;
                                          v2267 = (_DWORD **)(v2265 + 8);
                                          v2266 = *(_DWORD **)(v2265 + 8);
                                          v2269 = (void *)(v2265 + 16);
                                          unint64_t v2268 = *(void *)(v2265 + 16);
                                          if ((unint64_t)v2266 >= v2268)
                                          {
                                            v2271 = *(_DWORD **)v2265;
                                            uint64_t v2272 = ((uint64_t)v2266 - *(void *)v2265) >> 2;
                                            unint64_t v2273 = v2272 + 1;
                                            if ((unint64_t)(v2272 + 1) >> 62) {
                                              sub_566C();
                                            }
                                            uint64_t v2274 = v2268 - (void)v2271;
                                            if (v2274 >> 1 > v2273) {
                                              unint64_t v2273 = v2274 >> 1;
                                            }
                                            if ((unint64_t)v2274 >= 0x7FFFFFFFFFFFFFFCLL) {
                                              unint64_t v2275 = 0x3FFFFFFFFFFFFFFFLL;
                                            }
                                            else {
                                              unint64_t v2275 = v2273;
                                            }
                                            if (v2275)
                                            {
                                              v2276 = (char *)sub_458C8((uint64_t)v2269, v2275);
                                              v2266 = *v2267;
                                              v2271 = *(_DWORD **)v2265;
                                            }
                                            else
                                            {
                                              v2276 = 0;
                                            }
                                            v2334 = &v2276[4 * v2272];
                                            *(_DWORD *)v2334 = 144;
                                            v2270 = v2334 + 4;
                                            while (v2266 != v2271)
                                            {
                                              int v2335 = *--v2266;
                                              *((_DWORD *)v2334 - 1) = v2335;
                                              v2334 -= 4;
                                            }
                                            *(void *)uint64_t v2265 = v2334;
                                            *v2267 = v2270;
                                            void *v2269 = &v2276[4 * v2275];
                                            if (v2271) {
                                              operator delete(v2271);
                                            }
                                          }
                                          else
                                          {
                                            _DWORD *v2266 = 144;
                                            v2270 = v2266 + 1;
                                          }
                                          *v2267 = v2270;
                                          if (!*v14)
                                          {
LABEL_4079:
                                            if ((*((unsigned char *)__p + 18) & 2) == 0) {
                                              goto LABEL_4080;
                                            }
                                            uint64_t v2336 = *v12 + 24 * v13;
                                            v2338 = (_DWORD **)(v2336 + 8);
                                            v2337 = *(_DWORD **)(v2336 + 8);
                                            v2340 = (void *)(v2336 + 16);
                                            unint64_t v2339 = *(void *)(v2336 + 16);
                                            if ((unint64_t)v2337 >= v2339)
                                            {
                                              v2342 = *(_DWORD **)v2336;
                                              uint64_t v2343 = ((uint64_t)v2337 - *(void *)v2336) >> 2;
                                              unint64_t v2344 = v2343 + 1;
                                              if ((unint64_t)(v2343 + 1) >> 62) {
                                                sub_566C();
                                              }
                                              uint64_t v2345 = v2339 - (void)v2342;
                                              if (v2345 >> 1 > v2344) {
                                                unint64_t v2344 = v2345 >> 1;
                                              }
                                              if ((unint64_t)v2345 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                unint64_t v2346 = 0x3FFFFFFFFFFFFFFFLL;
                                              }
                                              else {
                                                unint64_t v2346 = v2344;
                                              }
                                              if (v2346)
                                              {
                                                v2347 = (char *)sub_458C8((uint64_t)v2340, v2346);
                                                v2337 = *v2338;
                                                v2342 = *(_DWORD **)v2336;
                                              }
                                              else
                                              {
                                                v2347 = 0;
                                              }
                                              v2404 = &v2347[4 * v2343];
                                              *(_DWORD *)v2404 = 145;
                                              v2341 = v2404 + 4;
                                              while (v2337 != v2342)
                                              {
                                                int v2405 = *--v2337;
                                                *((_DWORD *)v2404 - 1) = v2405;
                                                v2404 -= 4;
                                              }
                                              *(void *)uint64_t v2336 = v2404;
                                              *v2338 = v2341;
                                              void *v2340 = &v2347[4 * v2346];
                                              if (v2342) {
                                                operator delete(v2342);
                                              }
                                            }
                                            else
                                            {
                                              _DWORD *v2337 = 145;
                                              v2341 = v2337 + 1;
                                            }
                                            *v2338 = v2341;
                                            if (!*v14)
                                            {
LABEL_4080:
                                              if ((*((unsigned char *)__p + 18) & 4) == 0) {
                                                goto LABEL_4081;
                                              }
                                              uint64_t v2406 = *v12 + 24 * v13;
                                              v2408 = (_DWORD **)(v2406 + 8);
                                              v2407 = *(_DWORD **)(v2406 + 8);
                                              v2410 = (void *)(v2406 + 16);
                                              unint64_t v2409 = *(void *)(v2406 + 16);
                                              if ((unint64_t)v2407 >= v2409)
                                              {
                                                v2412 = *(_DWORD **)v2406;
                                                uint64_t v2413 = ((uint64_t)v2407 - *(void *)v2406) >> 2;
                                                unint64_t v2414 = v2413 + 1;
                                                if ((unint64_t)(v2413 + 1) >> 62) {
                                                  sub_566C();
                                                }
                                                uint64_t v2415 = v2409 - (void)v2412;
                                                if (v2415 >> 1 > v2414) {
                                                  unint64_t v2414 = v2415 >> 1;
                                                }
                                                if ((unint64_t)v2415 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                  unint64_t v2416 = 0x3FFFFFFFFFFFFFFFLL;
                                                }
                                                else {
                                                  unint64_t v2416 = v2414;
                                                }
                                                if (v2416)
                                                {
                                                  v2417 = (char *)sub_458C8((uint64_t)v2410, v2416);
                                                  v2407 = *v2408;
                                                  v2412 = *(_DWORD **)v2406;
                                                }
                                                else
                                                {
                                                  v2417 = 0;
                                                }
                                                v2466 = &v2417[4 * v2413];
                                                *(_DWORD *)v2466 = 146;
                                                v2411 = v2466 + 4;
                                                while (v2407 != v2412)
                                                {
                                                  int v2467 = *--v2407;
                                                  *((_DWORD *)v2466 - 1) = v2467;
                                                  v2466 -= 4;
                                                }
                                                *(void *)uint64_t v2406 = v2466;
                                                *v2408 = v2411;
                                                void *v2410 = &v2417[4 * v2416];
                                                if (v2412) {
                                                  operator delete(v2412);
                                                }
                                              }
                                              else
                                              {
                                                _DWORD *v2407 = 146;
                                                v2411 = v2407 + 1;
                                              }
                                              *v2408 = v2411;
                                              if (!*v14)
                                              {
LABEL_4081:
                                                if ((*((unsigned char *)__p + 18) & 8) == 0) {
                                                  goto LABEL_4082;
                                                }
                                                uint64_t v2468 = *v12 + 24 * v13;
                                                v2470 = (_DWORD **)(v2468 + 8);
                                                v2469 = *(_DWORD **)(v2468 + 8);
                                                v2472 = (void *)(v2468 + 16);
                                                unint64_t v2471 = *(void *)(v2468 + 16);
                                                if ((unint64_t)v2469 >= v2471)
                                                {
                                                  v2474 = *(_DWORD **)v2468;
                                                  uint64_t v2475 = ((uint64_t)v2469 - *(void *)v2468) >> 2;
                                                  unint64_t v2476 = v2475 + 1;
                                                  if ((unint64_t)(v2475 + 1) >> 62) {
                                                    sub_566C();
                                                  }
                                                  uint64_t v2477 = v2471 - (void)v2474;
                                                  if (v2477 >> 1 > v2476) {
                                                    unint64_t v2476 = v2477 >> 1;
                                                  }
                                                  if ((unint64_t)v2477 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                    unint64_t v2478 = 0x3FFFFFFFFFFFFFFFLL;
                                                  }
                                                  else {
                                                    unint64_t v2478 = v2476;
                                                  }
                                                  if (v2478)
                                                  {
                                                    v2479 = (char *)sub_458C8((uint64_t)v2472, v2478);
                                                    v2469 = *v2470;
                                                    v2474 = *(_DWORD **)v2468;
                                                  }
                                                  else
                                                  {
                                                    v2479 = 0;
                                                  }
                                                  v2523 = &v2479[4 * v2475];
                                                  *(_DWORD *)v2523 = 147;
                                                  v2473 = v2523 + 4;
                                                  while (v2469 != v2474)
                                                  {
                                                    int v2524 = *--v2469;
                                                    *((_DWORD *)v2523 - 1) = v2524;
                                                    v2523 -= 4;
                                                  }
                                                  *(void *)uint64_t v2468 = v2523;
                                                  *v2470 = v2473;
                                                  void *v2472 = &v2479[4 * v2478];
                                                  if (v2474) {
                                                    operator delete(v2474);
                                                  }
                                                }
                                                else
                                                {
                                                  _DWORD *v2469 = 147;
                                                  v2473 = v2469 + 1;
                                                }
                                                *v2470 = v2473;
                                                if (!*v14)
                                                {
LABEL_4082:
                                                  if ((*((unsigned char *)__p + 18) & 0x10) == 0) {
                                                    goto LABEL_4083;
                                                  }
                                                  uint64_t v2525 = *v12 + 24 * v13;
                                                  v2527 = (_DWORD **)(v2525 + 8);
                                                  v2526 = *(_DWORD **)(v2525 + 8);
                                                  v2529 = (void *)(v2525 + 16);
                                                  unint64_t v2528 = *(void *)(v2525 + 16);
                                                  if ((unint64_t)v2526 >= v2528)
                                                  {
                                                    v2531 = *(_DWORD **)v2525;
                                                    uint64_t v2532 = ((uint64_t)v2526 - *(void *)v2525) >> 2;
                                                    unint64_t v2533 = v2532 + 1;
                                                    if ((unint64_t)(v2532 + 1) >> 62) {
                                                      sub_566C();
                                                    }
                                                    uint64_t v2534 = v2528 - (void)v2531;
                                                    if (v2534 >> 1 > v2533) {
                                                      unint64_t v2533 = v2534 >> 1;
                                                    }
                                                    if ((unint64_t)v2534 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                      unint64_t v2535 = 0x3FFFFFFFFFFFFFFFLL;
                                                    }
                                                    else {
                                                      unint64_t v2535 = v2533;
                                                    }
                                                    if (v2535)
                                                    {
                                                      v2536 = (char *)sub_458C8((uint64_t)v2529, v2535);
                                                      v2526 = *v2527;
                                                      v2531 = *(_DWORD **)v2525;
                                                    }
                                                    else
                                                    {
                                                      v2536 = 0;
                                                    }
                                                    v2571 = &v2536[4 * v2532];
                                                    *(_DWORD *)v2571 = 148;
                                                    v2530 = v2571 + 4;
                                                    while (v2526 != v2531)
                                                    {
                                                      int v2572 = *--v2526;
                                                      *((_DWORD *)v2571 - 1) = v2572;
                                                      v2571 -= 4;
                                                    }
                                                    *(void *)uint64_t v2525 = v2571;
                                                    *v2527 = v2530;
                                                    void *v2529 = &v2536[4 * v2535];
                                                    if (v2531) {
                                                      operator delete(v2531);
                                                    }
                                                  }
                                                  else
                                                  {
                                                    _DWORD *v2526 = 148;
                                                    v2530 = v2526 + 1;
                                                  }
                                                  *v2527 = v2530;
                                                  if (!*v14)
                                                  {
LABEL_4083:
                                                    if ((*((unsigned char *)__p + 18) & 0x20) == 0) {
                                                      goto LABEL_4084;
                                                    }
                                                    uint64_t v2573 = *v12 + 24 * v13;
                                                    v2575 = (_DWORD **)(v2573 + 8);
                                                    v2574 = *(_DWORD **)(v2573 + 8);
                                                    v2577 = (void *)(v2573 + 16);
                                                    unint64_t v2576 = *(void *)(v2573 + 16);
                                                    if ((unint64_t)v2574 >= v2576)
                                                    {
                                                      v2579 = *(_DWORD **)v2573;
                                                      uint64_t v2580 = ((uint64_t)v2574 - *(void *)v2573) >> 2;
                                                      unint64_t v2581 = v2580 + 1;
                                                      if ((unint64_t)(v2580 + 1) >> 62) {
                                                        sub_566C();
                                                      }
                                                      uint64_t v2582 = v2576 - (void)v2579;
                                                      if (v2582 >> 1 > v2581) {
                                                        unint64_t v2581 = v2582 >> 1;
                                                      }
                                                      if ((unint64_t)v2582 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                        unint64_t v2583 = 0x3FFFFFFFFFFFFFFFLL;
                                                      }
                                                      else {
                                                        unint64_t v2583 = v2581;
                                                      }
                                                      if (v2583)
                                                      {
                                                        v2584 = (char *)sub_458C8((uint64_t)v2577, v2583);
                                                        v2574 = *v2575;
                                                        v2579 = *(_DWORD **)v2573;
                                                      }
                                                      else
                                                      {
                                                        v2584 = 0;
                                                      }
                                                      v2614 = &v2584[4 * v2580];
                                                      *(_DWORD *)v2614 = 149;
                                                      v2578 = v2614 + 4;
                                                      while (v2574 != v2579)
                                                      {
                                                        int v2615 = *--v2574;
                                                        *((_DWORD *)v2614 - 1) = v2615;
                                                        v2614 -= 4;
                                                      }
                                                      *(void *)uint64_t v2573 = v2614;
                                                      *v2575 = v2578;
                                                      void *v2577 = &v2584[4 * v2583];
                                                      if (v2579) {
                                                        operator delete(v2579);
                                                      }
                                                    }
                                                    else
                                                    {
                                                      _DWORD *v2574 = 149;
                                                      v2578 = v2574 + 1;
                                                    }
                                                    *v2575 = v2578;
                                                    if (!*v14)
                                                    {
LABEL_4084:
                                                      if ((*((unsigned char *)__p + 18) & 0x40) != 0)
                                                      {
                                                        uint64_t v1723 = *v12 + 24 * v13;
                                                        v1725 = (int **)(v1723 + 8);
                                                        v1724 = *(int **)(v1723 + 8);
                                                        v1727 = (void *)(v1723 + 16);
                                                        unint64_t v2616 = *(void *)(v1723 + 16);
                                                        if ((unint64_t)v1724 < v2616)
                                                        {
                                                          int v1728 = 150;
                                                          goto LABEL_2631;
                                                        }
                                                        v1729 = *(int **)v1723;
                                                        uint64_t v2617 = ((uint64_t)v1724 - *(void *)v1723) >> 2;
                                                        unint64_t v2618 = v2617 + 1;
                                                        if ((unint64_t)(v2617 + 1) >> 62) {
                                                          sub_566C();
                                                        }
                                                        uint64_t v2619 = v2616 - (void)v1729;
                                                        if (v2619 >> 1 > v2618) {
                                                          unint64_t v2618 = v2619 >> 1;
                                                        }
                                                        if ((unint64_t)v2619 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                          unint64_t v1733 = 0x3FFFFFFFFFFFFFFFLL;
                                                        }
                                                        else {
                                                          unint64_t v1733 = v2618;
                                                        }
                                                        if (v1733)
                                                        {
                                                          v1734 = (char *)sub_458C8((uint64_t)v1727, v1733);
                                                          v1724 = *v1725;
                                                          v1729 = *(int **)v1723;
                                                        }
                                                        else
                                                        {
                                                          v1734 = 0;
                                                        }
                                                        v1840 = &v1734[4 * v2617];
                                                        *(_DWORD *)v1840 = 150;
                                                        v1841 = (int *)(v1840 + 4);
                                                        while (v1724 != v1729)
                                                        {
                                                          int v2648 = *--v1724;
                                                          *((_DWORD *)v1840 - 1) = v2648;
                                                          v1840 -= 4;
                                                        }
                                                        goto LABEL_3843;
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          break;
        case 1:
          if (!*v14)
          {
            if ((*((unsigned char *)__p + 20) & 2) == 0) {
              goto LABEL_396;
            }
            uint64_t v75 = *v12 + 24 * v13;
            uint64_t v77 = (_DWORD **)(v75 + 8);
            uint64_t v76 = *(_DWORD **)(v75 + 8);
            unint64_t v79 = (void *)(v75 + 16);
            unint64_t v78 = *(void *)(v75 + 16);
            if ((unint64_t)v76 >= v78)
            {
              unint64_t v177 = *(_DWORD **)v75;
              uint64_t v178 = ((uint64_t)v76 - *(void *)v75) >> 2;
              unint64_t v179 = v178 + 1;
              if ((unint64_t)(v178 + 1) >> 62) {
                sub_566C();
              }
              uint64_t v180 = v78 - (void)v177;
              if (v180 >> 1 > v179) {
                unint64_t v179 = v180 >> 1;
              }
              if ((unint64_t)v180 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v181 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v181 = v179;
              }
              if (v181)
              {
                uint64_t v182 = (char *)sub_458C8((uint64_t)v79, v181);
                uint64_t v76 = *v77;
                unint64_t v177 = *(_DWORD **)v75;
              }
              else
              {
                uint64_t v182 = 0;
              }
              uint64_t v357 = &v182[4 * v178];
              *(_DWORD *)uint64_t v357 = 161;
              unint64_t v80 = v357 + 4;
              while (v76 != v177)
              {
                int v358 = *--v76;
                *((_DWORD *)v357 - 1) = v358;
                v357 -= 4;
              }
              *(void *)uint64_t v75 = v357;
              *uint64_t v77 = v80;
              void *v79 = &v182[4 * v181];
              if (v177) {
                operator delete(v177);
              }
            }
            else
            {
              *uint64_t v76 = 161;
              unint64_t v80 = v76 + 1;
            }
            *uint64_t v77 = v80;
            if (!*v14)
            {
LABEL_396:
              if ((*((unsigned char *)__p + 20) & 4) == 0) {
                goto LABEL_2238;
              }
              uint64_t v359 = *v12 + 24 * v13;
              uint64_t v361 = (_DWORD **)(v359 + 8);
              uint64_t v360 = *(_DWORD **)(v359 + 8);
              uint64_t v363 = (void *)(v359 + 16);
              unint64_t v362 = *(void *)(v359 + 16);
              if ((unint64_t)v360 >= v362)
              {
                uint64_t v365 = *(_DWORD **)v359;
                uint64_t v366 = ((uint64_t)v360 - *(void *)v359) >> 2;
                unint64_t v367 = v366 + 1;
                if ((unint64_t)(v366 + 1) >> 62) {
                  sub_566C();
                }
                uint64_t v368 = v362 - (void)v365;
                if (v368 >> 1 > v367) {
                  unint64_t v367 = v368 >> 1;
                }
                if ((unint64_t)v368 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v369 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v369 = v367;
                }
                if (v369)
                {
                  uint64_t v370 = (char *)sub_458C8((uint64_t)v363, v369);
                  uint64_t v360 = *v361;
                  uint64_t v365 = *(_DWORD **)v359;
                }
                else
                {
                  uint64_t v370 = 0;
                }
                char v574 = &v370[4 * v366];
                *(_DWORD *)char v574 = 162;
                v364 = v574 + 4;
                while (v360 != v365)
                {
                  int v575 = *--v360;
                  *((_DWORD *)v574 - 1) = v575;
                  v574 -= 4;
                }
                *(void *)uint64_t v359 = v574;
                char *v361 = v364;
                *uint64_t v363 = &v370[4 * v369];
                if (v365) {
                  operator delete(v365);
                }
              }
              else
              {
                _DWORD *v360 = 162;
                v364 = v360 + 1;
              }
              char *v361 = v364;
              if (!*v14)
              {
LABEL_2238:
                if ((*((unsigned char *)__p + 20) & 8) == 0) {
                  goto LABEL_4085;
                }
                uint64_t v576 = *v12 + 24 * v13;
                v578 = (_DWORD **)(v576 + 8);
                uint64_t v577 = *(_DWORD **)(v576 + 8);
                uint64_t v580 = (void *)(v576 + 16);
                unint64_t v579 = *(void *)(v576 + 16);
                if ((unint64_t)v577 >= v579)
                {
                  v582 = *(_DWORD **)v576;
                  uint64_t v583 = ((uint64_t)v577 - *(void *)v576) >> 2;
                  unint64_t v584 = v583 + 1;
                  if ((unint64_t)(v583 + 1) >> 62) {
                    sub_566C();
                  }
                  uint64_t v585 = v579 - (void)v582;
                  if (v585 >> 1 > v584) {
                    unint64_t v584 = v585 >> 1;
                  }
                  if ((unint64_t)v585 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v586 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v586 = v584;
                  }
                  if (v586)
                  {
                    v587 = (char *)sub_458C8((uint64_t)v580, v586);
                    uint64_t v577 = *v578;
                    v582 = *(_DWORD **)v576;
                  }
                  else
                  {
                    v587 = 0;
                  }
                  v776 = &v587[4 * v583];
                  *(_DWORD *)v776 = 163;
                  v581 = v776 + 4;
                  while (v577 != v582)
                  {
                    int v777 = *--v577;
                    *((_DWORD *)v776 - 1) = v777;
                    v776 -= 4;
                  }
                  *(void *)uint64_t v576 = v776;
                  unint64_t *v578 = v581;
                  *uint64_t v580 = &v587[4 * v586];
                  if (v582) {
                    operator delete(v582);
                  }
                }
                else
                {
                  *uint64_t v577 = 163;
                  v581 = v577 + 1;
                }
                unint64_t *v578 = v581;
                if (!*v14)
                {
LABEL_4085:
                  if ((*((unsigned char *)__p + 20) & 0x10) == 0) {
                    goto LABEL_4086;
                  }
                  uint64_t v778 = *v12 + 24 * v13;
                  v780 = (_DWORD **)(v778 + 8);
                  v779 = *(_DWORD **)(v778 + 8);
                  v782 = (void *)(v778 + 16);
                  unint64_t v781 = *(void *)(v778 + 16);
                  if ((unint64_t)v779 >= v781)
                  {
                    v784 = *(_DWORD **)v778;
                    uint64_t v785 = ((uint64_t)v779 - *(void *)v778) >> 2;
                    unint64_t v786 = v785 + 1;
                    if ((unint64_t)(v785 + 1) >> 62) {
                      sub_566C();
                    }
                    uint64_t v787 = v781 - (void)v784;
                    if (v787 >> 1 > v786) {
                      unint64_t v786 = v787 >> 1;
                    }
                    if ((unint64_t)v787 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v788 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v788 = v786;
                    }
                    if (v788)
                    {
                      v789 = (char *)sub_458C8((uint64_t)v782, v788);
                      v779 = *v780;
                      v784 = *(_DWORD **)v778;
                    }
                    else
                    {
                      v789 = 0;
                    }
                    v965 = &v789[4 * v785];
                    *(_DWORD *)v965 = 164;
                    v783 = v965 + 4;
                    while (v779 != v784)
                    {
                      int v966 = *--v779;
                      *((_DWORD *)v965 - 1) = v966;
                      v965 -= 4;
                    }
                    *(void *)uint64_t v778 = v965;
                    *v780 = v783;
                    void *v782 = &v789[4 * v788];
                    if (v784) {
                      operator delete(v784);
                    }
                  }
                  else
                  {
                    _DWORD *v779 = 164;
                    v783 = v779 + 1;
                  }
                  *v780 = v783;
                  if (!*v14)
                  {
LABEL_4086:
                    if ((*((unsigned char *)__p + 20) & 0x20) == 0) {
                      goto LABEL_4087;
                    }
                    uint64_t v967 = *v12 + 24 * v13;
                    v969 = (_DWORD **)(v967 + 8);
                    v968 = *(_DWORD **)(v967 + 8);
                    v971 = (void *)(v967 + 16);
                    unint64_t v970 = *(void *)(v967 + 16);
                    if ((unint64_t)v968 >= v970)
                    {
                      v973 = *(_DWORD **)v967;
                      uint64_t v974 = ((uint64_t)v968 - *(void *)v967) >> 2;
                      unint64_t v975 = v974 + 1;
                      if ((unint64_t)(v974 + 1) >> 62) {
                        sub_566C();
                      }
                      uint64_t v976 = v970 - (void)v973;
                      if (v976 >> 1 > v975) {
                        unint64_t v975 = v976 >> 1;
                      }
                      if ((unint64_t)v976 >= 0x7FFFFFFFFFFFFFFCLL) {
                        unint64_t v977 = 0x3FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v977 = v975;
                      }
                      if (v977)
                      {
                        v978 = (char *)sub_458C8((uint64_t)v971, v977);
                        v968 = *v969;
                        v973 = *(_DWORD **)v967;
                      }
                      else
                      {
                        v978 = 0;
                      }
                      v1140 = &v978[4 * v974];
                      *(_DWORD *)v1140 = 165;
                      v972 = v1140 + 4;
                      while (v968 != v973)
                      {
                        int v1141 = *--v968;
                        *((_DWORD *)v1140 - 1) = v1141;
                        v1140 -= 4;
                      }
                      *(void *)uint64_t v967 = v1140;
                      *v969 = v972;
                      void *v971 = &v978[4 * v977];
                      if (v973) {
                        operator delete(v973);
                      }
                    }
                    else
                    {
                      _DWORD *v968 = 165;
                      v972 = v968 + 1;
                    }
                    *v969 = v972;
                    if (!*v14)
                    {
LABEL_4087:
                      if ((*((unsigned char *)__p + 20) & 0x40) == 0) {
                        goto LABEL_4088;
                      }
                      uint64_t v1142 = *v12 + 24 * v13;
                      v1144 = (_DWORD **)(v1142 + 8);
                      v1143 = *(_DWORD **)(v1142 + 8);
                      v1146 = (void *)(v1142 + 16);
                      unint64_t v1145 = *(void *)(v1142 + 16);
                      if ((unint64_t)v1143 >= v1145)
                      {
                        v1148 = *(_DWORD **)v1142;
                        uint64_t v1149 = ((uint64_t)v1143 - *(void *)v1142) >> 2;
                        unint64_t v1150 = v1149 + 1;
                        if ((unint64_t)(v1149 + 1) >> 62) {
                          sub_566C();
                        }
                        uint64_t v1151 = v1145 - (void)v1148;
                        if (v1151 >> 1 > v1150) {
                          unint64_t v1150 = v1151 >> 1;
                        }
                        if ((unint64_t)v1151 >= 0x7FFFFFFFFFFFFFFCLL) {
                          unint64_t v1152 = 0x3FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v1152 = v1150;
                        }
                        if (v1152)
                        {
                          v1153 = (char *)sub_458C8((uint64_t)v1146, v1152);
                          v1143 = *v1144;
                          v1148 = *(_DWORD **)v1142;
                        }
                        else
                        {
                          v1153 = 0;
                        }
                        v1305 = &v1153[4 * v1149];
                        *(_DWORD *)v1305 = 166;
                        v1147 = v1305 + 4;
                        while (v1143 != v1148)
                        {
                          int v1306 = *--v1143;
                          *((_DWORD *)v1305 - 1) = v1306;
                          v1305 -= 4;
                        }
                        *(void *)uint64_t v1142 = v1305;
                        *v1144 = v1147;
                        void *v1146 = &v1153[4 * v1152];
                        if (v1148) {
                          operator delete(v1148);
                        }
                      }
                      else
                      {
                        _DWORD *v1143 = 166;
                        v1147 = v1143 + 1;
                      }
                      *v1144 = v1147;
                      if (!*v14)
                      {
LABEL_4088:
                        if ((*((unsigned char *)__p + 20) & 0x80) == 0) {
                          goto LABEL_4089;
                        }
                        uint64_t v1307 = *v12 + 24 * v13;
                        v1309 = (_DWORD **)(v1307 + 8);
                        v1308 = *(_DWORD **)(v1307 + 8);
                        v1311 = (void *)(v1307 + 16);
                        unint64_t v1310 = *(void *)(v1307 + 16);
                        if ((unint64_t)v1308 >= v1310)
                        {
                          v1313 = *(_DWORD **)v1307;
                          uint64_t v1314 = ((uint64_t)v1308 - *(void *)v1307) >> 2;
                          unint64_t v1315 = v1314 + 1;
                          if ((unint64_t)(v1314 + 1) >> 62) {
                            sub_566C();
                          }
                          uint64_t v1316 = v1310 - (void)v1313;
                          if (v1316 >> 1 > v1315) {
                            unint64_t v1315 = v1316 >> 1;
                          }
                          if ((unint64_t)v1316 >= 0x7FFFFFFFFFFFFFFCLL) {
                            unint64_t v1317 = 0x3FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v1317 = v1315;
                          }
                          if (v1317)
                          {
                            v1318 = (char *)sub_458C8((uint64_t)v1311, v1317);
                            v1308 = *v1309;
                            v1313 = *(_DWORD **)v1307;
                          }
                          else
                          {
                            v1318 = 0;
                          }
                          v1446 = &v1318[4 * v1314];
                          *(_DWORD *)v1446 = 167;
                          v1312 = v1446 + 4;
                          while (v1308 != v1313)
                          {
                            int v1447 = *--v1308;
                            *((_DWORD *)v1446 - 1) = v1447;
                            v1446 -= 4;
                          }
                          *(void *)uint64_t v1307 = v1446;
                          *v1309 = v1312;
                          void *v1311 = &v1318[4 * v1317];
                          if (v1313) {
                            operator delete(v1313);
                          }
                        }
                        else
                        {
                          _DWORD *v1308 = 167;
                          v1312 = v1308 + 1;
                        }
                        *v1309 = v1312;
                        if (!*v14)
                        {
LABEL_4089:
                          if ((*((unsigned char *)__p + 21) & 1) == 0) {
                            goto LABEL_4090;
                          }
                          uint64_t v1448 = *v12 + 24 * v13;
                          v1450 = (_DWORD **)(v1448 + 8);
                          v1449 = *(_DWORD **)(v1448 + 8);
                          v1452 = (void *)(v1448 + 16);
                          unint64_t v1451 = *(void *)(v1448 + 16);
                          if ((unint64_t)v1449 >= v1451)
                          {
                            v1454 = *(_DWORD **)v1448;
                            uint64_t v1455 = ((uint64_t)v1449 - *(void *)v1448) >> 2;
                            unint64_t v1456 = v1455 + 1;
                            if ((unint64_t)(v1455 + 1) >> 62) {
                              sub_566C();
                            }
                            uint64_t v1457 = v1451 - (void)v1454;
                            if (v1457 >> 1 > v1456) {
                              unint64_t v1456 = v1457 >> 1;
                            }
                            if ((unint64_t)v1457 >= 0x7FFFFFFFFFFFFFFCLL) {
                              unint64_t v1458 = 0x3FFFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v1458 = v1456;
                            }
                            if (v1458)
                            {
                              v1459 = (char *)sub_458C8((uint64_t)v1452, v1458);
                              v1449 = *v1450;
                              v1454 = *(_DWORD **)v1448;
                            }
                            else
                            {
                              v1459 = 0;
                            }
                            v1589 = &v1459[4 * v1455];
                            *(_DWORD *)v1589 = 168;
                            v1453 = v1589 + 4;
                            while (v1449 != v1454)
                            {
                              int v1590 = *--v1449;
                              *((_DWORD *)v1589 - 1) = v1590;
                              v1589 -= 4;
                            }
                            *(void *)uint64_t v1448 = v1589;
                            *v1450 = v1453;
                            void *v1452 = &v1459[4 * v1458];
                            if (v1454) {
                              operator delete(v1454);
                            }
                          }
                          else
                          {
                            _DWORD *v1449 = 168;
                            v1453 = v1449 + 1;
                          }
                          *v1450 = v1453;
                          if (!*v14)
                          {
LABEL_4090:
                            if ((*((unsigned char *)__p + 21) & 2) == 0) {
                              goto LABEL_4091;
                            }
                            uint64_t v1591 = *v12 + 24 * v13;
                            v1593 = (_DWORD **)(v1591 + 8);
                            v1592 = *(_DWORD **)(v1591 + 8);
                            v1595 = (void *)(v1591 + 16);
                            unint64_t v1594 = *(void *)(v1591 + 16);
                            if ((unint64_t)v1592 >= v1594)
                            {
                              v1597 = *(_DWORD **)v1591;
                              uint64_t v1598 = ((uint64_t)v1592 - *(void *)v1591) >> 2;
                              unint64_t v1599 = v1598 + 1;
                              if ((unint64_t)(v1598 + 1) >> 62) {
                                sub_566C();
                              }
                              uint64_t v1600 = v1594 - (void)v1597;
                              if (v1600 >> 1 > v1599) {
                                unint64_t v1599 = v1600 >> 1;
                              }
                              if ((unint64_t)v1600 >= 0x7FFFFFFFFFFFFFFCLL) {
                                unint64_t v1601 = 0x3FFFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v1601 = v1599;
                              }
                              if (v1601)
                              {
                                v1602 = (char *)sub_458C8((uint64_t)v1595, v1601);
                                v1592 = *v1593;
                                v1597 = *(_DWORD **)v1591;
                              }
                              else
                              {
                                v1602 = 0;
                              }
                              v1721 = &v1602[4 * v1598];
                              *(_DWORD *)v1721 = 169;
                              v1596 = v1721 + 4;
                              while (v1592 != v1597)
                              {
                                int v1722 = *--v1592;
                                *((_DWORD *)v1721 - 1) = v1722;
                                v1721 -= 4;
                              }
                              *(void *)uint64_t v1591 = v1721;
                              *v1593 = v1596;
                              void *v1595 = &v1602[4 * v1601];
                              if (v1597) {
                                operator delete(v1597);
                              }
                            }
                            else
                            {
                              _DWORD *v1592 = 169;
                              v1596 = v1592 + 1;
                            }
                            *v1593 = v1596;
                            if (!*v14)
                            {
LABEL_4091:
                              if ((*((unsigned char *)__p + 21) & 4) != 0)
                              {
                                uint64_t v1723 = *v12 + 24 * v13;
                                v1725 = (int **)(v1723 + 8);
                                v1724 = *(int **)(v1723 + 8);
                                v1727 = (void *)(v1723 + 16);
                                unint64_t v1726 = *(void *)(v1723 + 16);
                                if ((unint64_t)v1724 < v1726)
                                {
                                  int v1728 = 170;
                                  goto LABEL_2631;
                                }
                                v1729 = *(int **)v1723;
                                uint64_t v1730 = ((uint64_t)v1724 - *(void *)v1723) >> 2;
                                unint64_t v1731 = v1730 + 1;
                                if ((unint64_t)(v1730 + 1) >> 62) {
                                  sub_566C();
                                }
                                uint64_t v1732 = v1726 - (void)v1729;
                                if (v1732 >> 1 > v1731) {
                                  unint64_t v1731 = v1732 >> 1;
                                }
                                if ((unint64_t)v1732 >= 0x7FFFFFFFFFFFFFFCLL) {
                                  unint64_t v1733 = 0x3FFFFFFFFFFFFFFFLL;
                                }
                                else {
                                  unint64_t v1733 = v1731;
                                }
                                if (v1733)
                                {
                                  v1734 = (char *)sub_458C8((uint64_t)v1727, v1733);
                                  v1724 = *v1725;
                                  v1729 = *(int **)v1723;
                                }
                                else
                                {
                                  v1734 = 0;
                                }
                                v1840 = &v1734[4 * v1730];
                                *(_DWORD *)v1840 = 170;
                                v1841 = (int *)(v1840 + 4);
                                while (v1724 != v1729)
                                {
                                  int v1842 = *--v1724;
                                  *((_DWORD *)v1840 - 1) = v1842;
                                  v1840 -= 4;
                                }
                                goto LABEL_3843;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          break;
        case 2:
          if (!*v14)
          {
            if ((*((unsigned char *)__p + 3) & 0x20) == 0) {
              goto LABEL_324;
            }
            uint64_t v51 = *v12 + 24 * v13;
            unint64_t v53 = (_DWORD **)(v51 + 8);
            unint64_t v52 = *(_DWORD **)(v51 + 8);
            uint64_t v55 = (void *)(v51 + 16);
            unint64_t v54 = *(void *)(v51 + 16);
            if ((unint64_t)v52 >= v54)
            {
              unint64_t v153 = *(_DWORD **)v51;
              uint64_t v154 = ((uint64_t)v52 - *(void *)v51) >> 2;
              unint64_t v155 = v154 + 1;
              if ((unint64_t)(v154 + 1) >> 62) {
                sub_566C();
              }
              uint64_t v156 = v54 - (void)v153;
              if (v156 >> 1 > v155) {
                unint64_t v155 = v156 >> 1;
              }
              if ((unint64_t)v156 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v157 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v157 = v155;
              }
              if (v157)
              {
                uint64_t v158 = (char *)sub_458C8((uint64_t)v55, v157);
                unint64_t v52 = *v53;
                unint64_t v153 = *(_DWORD **)v51;
              }
              else
              {
                uint64_t v158 = 0;
              }
              int v301 = &v158[4 * v154];
              *(_DWORD *)int v301 = 29;
              unint64_t v56 = v301 + 4;
              while (v52 != v153)
              {
                int v302 = *--v52;
                *((_DWORD *)v301 - 1) = v302;
                v301 -= 4;
              }
              *(void *)uint64_t v51 = v301;
              *unint64_t v53 = v56;
              *uint64_t v55 = &v158[4 * v157];
              if (v153) {
                operator delete(v153);
              }
            }
            else
            {
              *unint64_t v52 = 29;
              unint64_t v56 = v52 + 1;
            }
            *unint64_t v53 = v56;
            if (!*v14)
            {
LABEL_324:
              if ((*((unsigned char *)__p + 3) & 0x40) == 0) {
                goto LABEL_3819;
              }
              uint64_t v303 = *v12 + 24 * v13;
              unint64_t v305 = (_DWORD **)(v303 + 8);
              unint64_t v304 = *(_DWORD **)(v303 + 8);
              unint64_t v307 = (void *)(v303 + 16);
              unint64_t v306 = *(void *)(v303 + 16);
              if ((unint64_t)v304 >= v306)
              {
                unint64_t v309 = *(_DWORD **)v303;
                uint64_t v310 = ((uint64_t)v304 - *(void *)v303) >> 2;
                unint64_t v311 = v310 + 1;
                if ((unint64_t)(v310 + 1) >> 62) {
                  sub_566C();
                }
                uint64_t v312 = v306 - (void)v309;
                if (v312 >> 1 > v311) {
                  unint64_t v311 = v312 >> 1;
                }
                if ((unint64_t)v312 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v313 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v313 = v311;
                }
                if (v313)
                {
                  unint64_t v314 = (char *)sub_458C8((uint64_t)v307, v313);
                  unint64_t v304 = *v305;
                  unint64_t v309 = *(_DWORD **)v303;
                }
                else
                {
                  unint64_t v314 = 0;
                }
                v518 = &v314[4 * v310];
                *(_DWORD *)v518 = 30;
                unint64_t v308 = v518 + 4;
                while (v304 != v309)
                {
                  int v519 = *--v304;
                  *((_DWORD *)v518 - 1) = v519;
                  v518 -= 4;
                }
                *(void *)uint64_t v303 = v518;
                void *v305 = v308;
                *unint64_t v307 = &v314[4 * v313];
                if (v309) {
                  operator delete(v309);
                }
              }
              else
              {
                _DWORD *v304 = 30;
                unint64_t v308 = v304 + 1;
              }
              void *v305 = v308;
              if (!*v14)
              {
LABEL_3819:
                if ((*((unsigned char *)__p + 3) & 0x80) == 0) {
                  goto LABEL_4092;
                }
                uint64_t v520 = *v12 + 24 * v13;
                v522 = (_DWORD **)(v520 + 8);
                unint64_t v521 = *(_DWORD **)(v520 + 8);
                v524 = (void *)(v520 + 16);
                unint64_t v523 = *(void *)(v520 + 16);
                if ((unint64_t)v521 >= v523)
                {
                  uint64_t v526 = *(_DWORD **)v520;
                  uint64_t v527 = ((uint64_t)v521 - *(void *)v520) >> 2;
                  unint64_t v528 = v527 + 1;
                  if ((unint64_t)(v527 + 1) >> 62) {
                    sub_566C();
                  }
                  uint64_t v529 = v523 - (void)v526;
                  if (v529 >> 1 > v528) {
                    unint64_t v528 = v529 >> 1;
                  }
                  if ((unint64_t)v529 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v530 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v530 = v528;
                  }
                  if (v530)
                  {
                    uint64_t v531 = (char *)sub_458C8((uint64_t)v524, v530);
                    unint64_t v521 = *v522;
                    uint64_t v526 = *(_DWORD **)v520;
                  }
                  else
                  {
                    uint64_t v531 = 0;
                  }
                  v720 = &v531[4 * v527];
                  *(_DWORD *)v720 = 31;
                  v525 = v720 + 4;
                  while (v521 != v526)
                  {
                    int v721 = *--v521;
                    *((_DWORD *)v720 - 1) = v721;
                    v720 -= 4;
                  }
                  *(void *)uint64_t v520 = v720;
                  char *v522 = v525;
                  void *v524 = &v531[4 * v530];
                  if (v526) {
                    operator delete(v526);
                  }
                }
                else
                {
                  *unint64_t v521 = 31;
                  v525 = v521 + 1;
                }
                char *v522 = v525;
                if (!*v14)
                {
LABEL_4092:
                  if ((*((unsigned char *)__p + 4) & 1) == 0) {
                    goto LABEL_4093;
                  }
                  uint64_t v722 = *v12 + 24 * v13;
                  v724 = (_DWORD **)(v722 + 8);
                  v723 = *(_DWORD **)(v722 + 8);
                  v726 = (void *)(v722 + 16);
                  unint64_t v725 = *(void *)(v722 + 16);
                  if ((unint64_t)v723 >= v725)
                  {
                    v728 = *(_DWORD **)v722;
                    uint64_t v729 = ((uint64_t)v723 - *(void *)v722) >> 2;
                    unint64_t v730 = v729 + 1;
                    if ((unint64_t)(v729 + 1) >> 62) {
                      sub_566C();
                    }
                    uint64_t v731 = v725 - (void)v728;
                    if (v731 >> 1 > v730) {
                      unint64_t v730 = v731 >> 1;
                    }
                    if ((unint64_t)v731 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v732 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v732 = v730;
                    }
                    if (v732)
                    {
                      v733 = (char *)sub_458C8((uint64_t)v726, v732);
                      v723 = *v724;
                      v728 = *(_DWORD **)v722;
                    }
                    else
                    {
                      v733 = 0;
                    }
                    v909 = &v733[4 * v729];
                    *(_DWORD *)v909 = 32;
                    v727 = v909 + 4;
                    while (v723 != v728)
                    {
                      int v910 = *--v723;
                      *((_DWORD *)v909 - 1) = v910;
                      v909 -= 4;
                    }
                    *(void *)uint64_t v722 = v909;
                    *v724 = v727;
                    void *v726 = &v733[4 * v732];
                    if (v728) {
                      operator delete(v728);
                    }
                  }
                  else
                  {
                    _DWORD *v723 = 32;
                    v727 = v723 + 1;
                  }
                  *v724 = v727;
                  if (!*v14)
                  {
LABEL_4093:
                    if ((*((unsigned char *)__p + 4) & 2) == 0) {
                      goto LABEL_4094;
                    }
                    uint64_t v911 = *v12 + 24 * v13;
                    v913 = (_DWORD **)(v911 + 8);
                    v912 = *(_DWORD **)(v911 + 8);
                    v915 = (void *)(v911 + 16);
                    unint64_t v914 = *(void *)(v911 + 16);
                    if ((unint64_t)v912 >= v914)
                    {
                      v917 = *(_DWORD **)v911;
                      uint64_t v918 = ((uint64_t)v912 - *(void *)v911) >> 2;
                      unint64_t v919 = v918 + 1;
                      if ((unint64_t)(v918 + 1) >> 62) {
                        sub_566C();
                      }
                      uint64_t v920 = v914 - (void)v917;
                      if (v920 >> 1 > v919) {
                        unint64_t v919 = v920 >> 1;
                      }
                      if ((unint64_t)v920 >= 0x7FFFFFFFFFFFFFFCLL) {
                        unint64_t v921 = 0x3FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v921 = v919;
                      }
                      if (v921)
                      {
                        v922 = (char *)sub_458C8((uint64_t)v915, v921);
                        v912 = *v913;
                        v917 = *(_DWORD **)v911;
                      }
                      else
                      {
                        v922 = 0;
                      }
                      v1084 = &v922[4 * v918];
                      *(_DWORD *)v1084 = 33;
                      v916 = v1084 + 4;
                      while (v912 != v917)
                      {
                        int v1085 = *--v912;
                        *((_DWORD *)v1084 - 1) = v1085;
                        v1084 -= 4;
                      }
                      *(void *)uint64_t v911 = v1084;
                      *v913 = v916;
                      void *v915 = &v922[4 * v921];
                      if (v917) {
                        operator delete(v917);
                      }
                    }
                    else
                    {
                      _DWORD *v912 = 33;
                      v916 = v912 + 1;
                    }
                    *v913 = v916;
                    if (!*v14)
                    {
LABEL_4094:
                      if ((*((unsigned char *)__p + 4) & 4) == 0) {
                        goto LABEL_4095;
                      }
                      uint64_t v1086 = *v12 + 24 * v13;
                      v1088 = (_DWORD **)(v1086 + 8);
                      v1087 = *(_DWORD **)(v1086 + 8);
                      v1090 = (void *)(v1086 + 16);
                      unint64_t v1089 = *(void *)(v1086 + 16);
                      if ((unint64_t)v1087 >= v1089)
                      {
                        v1092 = *(_DWORD **)v1086;
                        uint64_t v1093 = ((uint64_t)v1087 - *(void *)v1086) >> 2;
                        unint64_t v1094 = v1093 + 1;
                        if ((unint64_t)(v1093 + 1) >> 62) {
                          sub_566C();
                        }
                        uint64_t v1095 = v1089 - (void)v1092;
                        if (v1095 >> 1 > v1094) {
                          unint64_t v1094 = v1095 >> 1;
                        }
                        if ((unint64_t)v1095 >= 0x7FFFFFFFFFFFFFFCLL) {
                          unint64_t v1096 = 0x3FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v1096 = v1094;
                        }
                        if (v1096)
                        {
                          v1097 = (char *)sub_458C8((uint64_t)v1090, v1096);
                          v1087 = *v1088;
                          v1092 = *(_DWORD **)v1086;
                        }
                        else
                        {
                          v1097 = 0;
                        }
                        v1249 = &v1097[4 * v1093];
                        *(_DWORD *)v1249 = 34;
                        v1091 = v1249 + 4;
                        while (v1087 != v1092)
                        {
                          int v1250 = *--v1087;
                          *((_DWORD *)v1249 - 1) = v1250;
                          v1249 -= 4;
                        }
                        *(void *)uint64_t v1086 = v1249;
                        *v1088 = v1091;
                        void *v1090 = &v1097[4 * v1096];
                        if (v1092) {
                          operator delete(v1092);
                        }
                      }
                      else
                      {
                        _DWORD *v1087 = 34;
                        v1091 = v1087 + 1;
                      }
                      *v1088 = v1091;
                      if (!*v14)
                      {
LABEL_4095:
                        if ((*((unsigned char *)__p + 4) & 8) == 0) {
                          goto LABEL_4096;
                        }
                        uint64_t v1251 = *v12 + 24 * v13;
                        v1253 = (_DWORD **)(v1251 + 8);
                        v1252 = *(_DWORD **)(v1251 + 8);
                        v1255 = (void *)(v1251 + 16);
                        unint64_t v1254 = *(void *)(v1251 + 16);
                        if ((unint64_t)v1252 >= v1254)
                        {
                          v1257 = *(_DWORD **)v1251;
                          uint64_t v1258 = ((uint64_t)v1252 - *(void *)v1251) >> 2;
                          unint64_t v1259 = v1258 + 1;
                          if ((unint64_t)(v1258 + 1) >> 62) {
                            sub_566C();
                          }
                          uint64_t v1260 = v1254 - (void)v1257;
                          if (v1260 >> 1 > v1259) {
                            unint64_t v1259 = v1260 >> 1;
                          }
                          if ((unint64_t)v1260 >= 0x7FFFFFFFFFFFFFFCLL) {
                            unint64_t v1261 = 0x3FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v1261 = v1259;
                          }
                          if (v1261)
                          {
                            v1262 = (char *)sub_458C8((uint64_t)v1255, v1261);
                            v1252 = *v1253;
                            v1257 = *(_DWORD **)v1251;
                          }
                          else
                          {
                            v1262 = 0;
                          }
                          v1390 = &v1262[4 * v1258];
                          *(_DWORD *)v1390 = 35;
                          v1256 = v1390 + 4;
                          while (v1252 != v1257)
                          {
                            int v1391 = *--v1252;
                            *((_DWORD *)v1390 - 1) = v1391;
                            v1390 -= 4;
                          }
                          *(void *)uint64_t v1251 = v1390;
                          *v1253 = v1256;
                          void *v1255 = &v1262[4 * v1261];
                          if (v1257) {
                            operator delete(v1257);
                          }
                        }
                        else
                        {
                          _DWORD *v1252 = 35;
                          v1256 = v1252 + 1;
                        }
                        *v1253 = v1256;
                        if (!*v14)
                        {
LABEL_4096:
                          if ((*((unsigned char *)__p + 4) & 0x10) == 0) {
                            goto LABEL_4097;
                          }
                          uint64_t v1392 = *v12 + 24 * v13;
                          v1394 = (_DWORD **)(v1392 + 8);
                          v1393 = *(_DWORD **)(v1392 + 8);
                          v1396 = (void *)(v1392 + 16);
                          unint64_t v1395 = *(void *)(v1392 + 16);
                          if ((unint64_t)v1393 >= v1395)
                          {
                            v1398 = *(_DWORD **)v1392;
                            uint64_t v1399 = ((uint64_t)v1393 - *(void *)v1392) >> 2;
                            unint64_t v1400 = v1399 + 1;
                            if ((unint64_t)(v1399 + 1) >> 62) {
                              sub_566C();
                            }
                            uint64_t v1401 = v1395 - (void)v1398;
                            if (v1401 >> 1 > v1400) {
                              unint64_t v1400 = v1401 >> 1;
                            }
                            if ((unint64_t)v1401 >= 0x7FFFFFFFFFFFFFFCLL) {
                              unint64_t v1402 = 0x3FFFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v1402 = v1400;
                            }
                            if (v1402)
                            {
                              v1403 = (char *)sub_458C8((uint64_t)v1396, v1402);
                              v1393 = *v1394;
                              v1398 = *(_DWORD **)v1392;
                            }
                            else
                            {
                              v1403 = 0;
                            }
                            v1533 = &v1403[4 * v1399];
                            *(_DWORD *)v1533 = 36;
                            v1397 = v1533 + 4;
                            while (v1393 != v1398)
                            {
                              int v1534 = *--v1393;
                              *((_DWORD *)v1533 - 1) = v1534;
                              v1533 -= 4;
                            }
                            *(void *)uint64_t v1392 = v1533;
                            *v1394 = v1397;
                            void *v1396 = &v1403[4 * v1402];
                            if (v1398) {
                              operator delete(v1398);
                            }
                          }
                          else
                          {
                            _DWORD *v1393 = 36;
                            v1397 = v1393 + 1;
                          }
                          *v1394 = v1397;
                          if (!*v14)
                          {
LABEL_4097:
                            if ((*((unsigned char *)__p + 4) & 0x20) == 0) {
                              goto LABEL_4098;
                            }
                            uint64_t v1535 = *v12 + 24 * v13;
                            v1537 = (_DWORD **)(v1535 + 8);
                            v1536 = *(_DWORD **)(v1535 + 8);
                            v1539 = (void *)(v1535 + 16);
                            unint64_t v1538 = *(void *)(v1535 + 16);
                            if ((unint64_t)v1536 >= v1538)
                            {
                              v1541 = *(_DWORD **)v1535;
                              uint64_t v1542 = ((uint64_t)v1536 - *(void *)v1535) >> 2;
                              unint64_t v1543 = v1542 + 1;
                              if ((unint64_t)(v1542 + 1) >> 62) {
                                sub_566C();
                              }
                              uint64_t v1544 = v1538 - (void)v1541;
                              if (v1544 >> 1 > v1543) {
                                unint64_t v1543 = v1544 >> 1;
                              }
                              if ((unint64_t)v1544 >= 0x7FFFFFFFFFFFFFFCLL) {
                                unint64_t v1545 = 0x3FFFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v1545 = v1543;
                              }
                              if (v1545)
                              {
                                v1546 = (char *)sub_458C8((uint64_t)v1539, v1545);
                                v1536 = *v1537;
                                v1541 = *(_DWORD **)v1535;
                              }
                              else
                              {
                                v1546 = 0;
                              }
                              v1673 = &v1546[4 * v1542];
                              *(_DWORD *)v1673 = 37;
                              v1540 = v1673 + 4;
                              while (v1536 != v1541)
                              {
                                int v1674 = *--v1536;
                                *((_DWORD *)v1673 - 1) = v1674;
                                v1673 -= 4;
                              }
                              *(void *)uint64_t v1535 = v1673;
                              *v1537 = v1540;
                              void *v1539 = &v1546[4 * v1545];
                              if (v1541) {
                                operator delete(v1541);
                              }
                            }
                            else
                            {
                              _DWORD *v1536 = 37;
                              v1540 = v1536 + 1;
                            }
                            *v1537 = v1540;
                            if (!*v14)
                            {
LABEL_4098:
                              if ((*((unsigned char *)__p + 4) & 0x40) == 0) {
                                goto LABEL_4099;
                              }
                              uint64_t v1675 = *v12 + 24 * v13;
                              v1677 = (_DWORD **)(v1675 + 8);
                              v1676 = *(_DWORD **)(v1675 + 8);
                              v1679 = (void *)(v1675 + 16);
                              unint64_t v1678 = *(void *)(v1675 + 16);
                              if ((unint64_t)v1676 >= v1678)
                              {
                                v1681 = *(_DWORD **)v1675;
                                uint64_t v1682 = ((uint64_t)v1676 - *(void *)v1675) >> 2;
                                unint64_t v1683 = v1682 + 1;
                                if ((unint64_t)(v1682 + 1) >> 62) {
                                  sub_566C();
                                }
                                uint64_t v1684 = v1678 - (void)v1681;
                                if (v1684 >> 1 > v1683) {
                                  unint64_t v1683 = v1684 >> 1;
                                }
                                if ((unint64_t)v1684 >= 0x7FFFFFFFFFFFFFFCLL) {
                                  unint64_t v1685 = 0x3FFFFFFFFFFFFFFFLL;
                                }
                                else {
                                  unint64_t v1685 = v1683;
                                }
                                if (v1685)
                                {
                                  v1686 = (char *)sub_458C8((uint64_t)v1679, v1685);
                                  v1676 = *v1677;
                                  v1681 = *(_DWORD **)v1675;
                                }
                                else
                                {
                                  v1686 = 0;
                                }
                                v1797 = &v1686[4 * v1682];
                                *(_DWORD *)v1797 = 38;
                                v1680 = v1797 + 4;
                                while (v1676 != v1681)
                                {
                                  int v1798 = *--v1676;
                                  *((_DWORD *)v1797 - 1) = v1798;
                                  v1797 -= 4;
                                }
                                *(void *)uint64_t v1675 = v1797;
                                *v1677 = v1680;
                                void *v1679 = &v1686[4 * v1685];
                                if (v1681) {
                                  operator delete(v1681);
                                }
                              }
                              else
                              {
                                _DWORD *v1676 = 38;
                                v1680 = v1676 + 1;
                              }
                              *v1677 = v1680;
                              if (!*v14)
                              {
LABEL_4099:
                                if ((*((unsigned char *)__p + 4) & 0x80) == 0) {
                                  goto LABEL_4100;
                                }
                                uint64_t v1799 = *v12 + 24 * v13;
                                v1801 = (_DWORD **)(v1799 + 8);
                                v1800 = *(_DWORD **)(v1799 + 8);
                                v1803 = (void *)(v1799 + 16);
                                unint64_t v1802 = *(void *)(v1799 + 16);
                                if ((unint64_t)v1800 >= v1802)
                                {
                                  v1805 = *(_DWORD **)v1799;
                                  uint64_t v1806 = ((uint64_t)v1800 - *(void *)v1799) >> 2;
                                  unint64_t v1807 = v1806 + 1;
                                  if ((unint64_t)(v1806 + 1) >> 62) {
                                    sub_566C();
                                  }
                                  uint64_t v1808 = v1802 - (void)v1805;
                                  if (v1808 >> 1 > v1807) {
                                    unint64_t v1807 = v1808 >> 1;
                                  }
                                  if ((unint64_t)v1808 >= 0x7FFFFFFFFFFFFFFCLL) {
                                    unint64_t v1809 = 0x3FFFFFFFFFFFFFFFLL;
                                  }
                                  else {
                                    unint64_t v1809 = v1807;
                                  }
                                  if (v1809)
                                  {
                                    v1810 = (char *)sub_458C8((uint64_t)v1803, v1809);
                                    v1800 = *v1801;
                                    v1805 = *(_DWORD **)v1799;
                                  }
                                  else
                                  {
                                    v1810 = 0;
                                  }
                                  v1900 = &v1810[4 * v1806];
                                  *(_DWORD *)v1900 = 39;
                                  v1804 = v1900 + 4;
                                  while (v1800 != v1805)
                                  {
                                    int v1901 = *--v1800;
                                    *((_DWORD *)v1900 - 1) = v1901;
                                    v1900 -= 4;
                                  }
                                  *(void *)uint64_t v1799 = v1900;
                                  *v1801 = v1804;
                                  void *v1803 = &v1810[4 * v1809];
                                  if (v1805) {
                                    operator delete(v1805);
                                  }
                                }
                                else
                                {
                                  _DWORD *v1800 = 39;
                                  v1804 = v1800 + 1;
                                }
                                *v1801 = v1804;
                                if (!*v14)
                                {
LABEL_4100:
                                  if ((*((unsigned char *)__p + 5) & 1) == 0) {
                                    goto LABEL_4101;
                                  }
                                  uint64_t v1902 = *v12 + 24 * v13;
                                  v1904 = (_DWORD **)(v1902 + 8);
                                  v1903 = *(_DWORD **)(v1902 + 8);
                                  v1906 = (void *)(v1902 + 16);
                                  unint64_t v1905 = *(void *)(v1902 + 16);
                                  if ((unint64_t)v1903 >= v1905)
                                  {
                                    v1908 = *(_DWORD **)v1902;
                                    uint64_t v1909 = ((uint64_t)v1903 - *(void *)v1902) >> 2;
                                    unint64_t v1910 = v1909 + 1;
                                    if ((unint64_t)(v1909 + 1) >> 62) {
                                      sub_566C();
                                    }
                                    uint64_t v1911 = v1905 - (void)v1908;
                                    if (v1911 >> 1 > v1910) {
                                      unint64_t v1910 = v1911 >> 1;
                                    }
                                    if ((unint64_t)v1911 >= 0x7FFFFFFFFFFFFFFCLL) {
                                      unint64_t v1912 = 0x3FFFFFFFFFFFFFFFLL;
                                    }
                                    else {
                                      unint64_t v1912 = v1910;
                                    }
                                    if (v1912)
                                    {
                                      v1913 = (char *)sub_458C8((uint64_t)v1906, v1912);
                                      v1903 = *v1904;
                                      v1908 = *(_DWORD **)v1902;
                                    }
                                    else
                                    {
                                      v1913 = 0;
                                    }
                                    v1998 = &v1913[4 * v1909];
                                    *(_DWORD *)v1998 = 40;
                                    v1907 = v1998 + 4;
                                    while (v1903 != v1908)
                                    {
                                      int v1999 = *--v1903;
                                      *((_DWORD *)v1998 - 1) = v1999;
                                      v1998 -= 4;
                                    }
                                    *(void *)uint64_t v1902 = v1998;
                                    *v1904 = v1907;
                                    void *v1906 = &v1913[4 * v1912];
                                    if (v1908) {
                                      operator delete(v1908);
                                    }
                                  }
                                  else
                                  {
                                    _DWORD *v1903 = 40;
                                    v1907 = v1903 + 1;
                                  }
                                  *v1904 = v1907;
                                  if (!*v14)
                                  {
LABEL_4101:
                                    if ((*((unsigned char *)__p + 5) & 2) == 0) {
                                      goto LABEL_4102;
                                    }
                                    uint64_t v2000 = *v12 + 24 * v13;
                                    v2002 = (_DWORD **)(v2000 + 8);
                                    v2001 = *(_DWORD **)(v2000 + 8);
                                    v2004 = (void *)(v2000 + 16);
                                    unint64_t v2003 = *(void *)(v2000 + 16);
                                    if ((unint64_t)v2001 >= v2003)
                                    {
                                      v2006 = *(_DWORD **)v2000;
                                      uint64_t v2007 = ((uint64_t)v2001 - *(void *)v2000) >> 2;
                                      unint64_t v2008 = v2007 + 1;
                                      if ((unint64_t)(v2007 + 1) >> 62) {
                                        sub_566C();
                                      }
                                      uint64_t v2009 = v2003 - (void)v2006;
                                      if (v2009 >> 1 > v2008) {
                                        unint64_t v2008 = v2009 >> 1;
                                      }
                                      if ((unint64_t)v2009 >= 0x7FFFFFFFFFFFFFFCLL) {
                                        unint64_t v2010 = 0x3FFFFFFFFFFFFFFFLL;
                                      }
                                      else {
                                        unint64_t v2010 = v2008;
                                      }
                                      if (v2010)
                                      {
                                        v2011 = (char *)sub_458C8((uint64_t)v2004, v2010);
                                        v2001 = *v2002;
                                        v2006 = *(_DWORD **)v2000;
                                      }
                                      else
                                      {
                                        v2011 = 0;
                                      }
                                      v2088 = &v2011[4 * v2007];
                                      *(_DWORD *)v2088 = 41;
                                      v2005 = v2088 + 4;
                                      while (v2001 != v2006)
                                      {
                                        int v2089 = *--v2001;
                                        *((_DWORD *)v2088 - 1) = v2089;
                                        v2088 -= 4;
                                      }
                                      *(void *)uint64_t v2000 = v2088;
                                      *v2002 = v2005;
                                      void *v2004 = &v2011[4 * v2010];
                                      if (v2006) {
                                        operator delete(v2006);
                                      }
                                    }
                                    else
                                    {
                                      _DWORD *v2001 = 41;
                                      v2005 = v2001 + 1;
                                    }
                                    *v2002 = v2005;
                                    if (!*v14)
                                    {
LABEL_4102:
                                      if ((*((unsigned char *)__p + 5) & 4) == 0) {
                                        goto LABEL_4103;
                                      }
                                      uint64_t v2090 = *v12 + 24 * v13;
                                      v2092 = (_DWORD **)(v2090 + 8);
                                      v2091 = *(_DWORD **)(v2090 + 8);
                                      v2094 = (void *)(v2090 + 16);
                                      unint64_t v2093 = *(void *)(v2090 + 16);
                                      if ((unint64_t)v2091 >= v2093)
                                      {
                                        v2096 = *(_DWORD **)v2090;
                                        uint64_t v2097 = ((uint64_t)v2091 - *(void *)v2090) >> 2;
                                        unint64_t v2098 = v2097 + 1;
                                        if ((unint64_t)(v2097 + 1) >> 62) {
                                          sub_566C();
                                        }
                                        uint64_t v2099 = v2093 - (void)v2096;
                                        if (v2099 >> 1 > v2098) {
                                          unint64_t v2098 = v2099 >> 1;
                                        }
                                        if ((unint64_t)v2099 >= 0x7FFFFFFFFFFFFFFCLL) {
                                          unint64_t v2100 = 0x3FFFFFFFFFFFFFFFLL;
                                        }
                                        else {
                                          unint64_t v2100 = v2098;
                                        }
                                        if (v2100)
                                        {
                                          v2101 = (char *)sub_458C8((uint64_t)v2094, v2100);
                                          v2091 = *v2092;
                                          v2096 = *(_DWORD **)v2090;
                                        }
                                        else
                                        {
                                          v2101 = 0;
                                        }
                                        v2173 = &v2101[4 * v2097];
                                        *(_DWORD *)v2173 = 42;
                                        v2095 = v2173 + 4;
                                        while (v2091 != v2096)
                                        {
                                          int v2174 = *--v2091;
                                          *((_DWORD *)v2173 - 1) = v2174;
                                          v2173 -= 4;
                                        }
                                        *(void *)uint64_t v2090 = v2173;
                                        *v2092 = v2095;
                                        void *v2094 = &v2101[4 * v2100];
                                        if (v2096) {
                                          operator delete(v2096);
                                        }
                                      }
                                      else
                                      {
                                        _DWORD *v2091 = 42;
                                        v2095 = v2091 + 1;
                                      }
                                      *v2092 = v2095;
                                      if (!*v14)
                                      {
LABEL_4103:
                                        if ((*((unsigned char *)__p + 5) & 8) == 0) {
                                          goto LABEL_4104;
                                        }
                                        uint64_t v2175 = *v12 + 24 * v13;
                                        v2177 = (_DWORD **)(v2175 + 8);
                                        v2176 = *(_DWORD **)(v2175 + 8);
                                        v2179 = (void *)(v2175 + 16);
                                        unint64_t v2178 = *(void *)(v2175 + 16);
                                        if ((unint64_t)v2176 >= v2178)
                                        {
                                          v2181 = *(_DWORD **)v2175;
                                          uint64_t v2182 = ((uint64_t)v2176 - *(void *)v2175) >> 2;
                                          unint64_t v2183 = v2182 + 1;
                                          if ((unint64_t)(v2182 + 1) >> 62) {
                                            sub_566C();
                                          }
                                          uint64_t v2184 = v2178 - (void)v2181;
                                          if (v2184 >> 1 > v2183) {
                                            unint64_t v2183 = v2184 >> 1;
                                          }
                                          if ((unint64_t)v2184 >= 0x7FFFFFFFFFFFFFFCLL) {
                                            unint64_t v2185 = 0x3FFFFFFFFFFFFFFFLL;
                                          }
                                          else {
                                            unint64_t v2185 = v2183;
                                          }
                                          if (v2185)
                                          {
                                            v2186 = (char *)sub_458C8((uint64_t)v2179, v2185);
                                            v2176 = *v2177;
                                            v2181 = *(_DWORD **)v2175;
                                          }
                                          else
                                          {
                                            v2186 = 0;
                                          }
                                          v2249 = &v2186[4 * v2182];
                                          *(_DWORD *)v2249 = 43;
                                          v2180 = v2249 + 4;
                                          while (v2176 != v2181)
                                          {
                                            int v2250 = *--v2176;
                                            *((_DWORD *)v2249 - 1) = v2250;
                                            v2249 -= 4;
                                          }
                                          *(void *)uint64_t v2175 = v2249;
                                          *v2177 = v2180;
                                          void *v2179 = &v2186[4 * v2185];
                                          if (v2181) {
                                            operator delete(v2181);
                                          }
                                        }
                                        else
                                        {
                                          _DWORD *v2176 = 43;
                                          v2180 = v2176 + 1;
                                        }
                                        *v2177 = v2180;
                                        if (!*v14)
                                        {
LABEL_4104:
                                          if ((*((unsigned char *)__p + 5) & 0x10) == 0) {
                                            goto LABEL_4105;
                                          }
                                          uint64_t v2251 = *v12 + 24 * v13;
                                          v2253 = (_DWORD **)(v2251 + 8);
                                          v2252 = *(_DWORD **)(v2251 + 8);
                                          v2255 = (void *)(v2251 + 16);
                                          unint64_t v2254 = *(void *)(v2251 + 16);
                                          if ((unint64_t)v2252 >= v2254)
                                          {
                                            v2257 = *(_DWORD **)v2251;
                                            uint64_t v2258 = ((uint64_t)v2252 - *(void *)v2251) >> 2;
                                            unint64_t v2259 = v2258 + 1;
                                            if ((unint64_t)(v2258 + 1) >> 62) {
                                              sub_566C();
                                            }
                                            uint64_t v2260 = v2254 - (void)v2257;
                                            if (v2260 >> 1 > v2259) {
                                              unint64_t v2259 = v2260 >> 1;
                                            }
                                            if ((unint64_t)v2260 >= 0x7FFFFFFFFFFFFFFCLL) {
                                              unint64_t v2261 = 0x3FFFFFFFFFFFFFFFLL;
                                            }
                                            else {
                                              unint64_t v2261 = v2259;
                                            }
                                            if (v2261)
                                            {
                                              v2262 = (char *)sub_458C8((uint64_t)v2255, v2261);
                                              v2252 = *v2253;
                                              v2257 = *(_DWORD **)v2251;
                                            }
                                            else
                                            {
                                              v2262 = 0;
                                            }
                                            v2320 = &v2262[4 * v2258];
                                            *(_DWORD *)v2320 = 44;
                                            v2256 = v2320 + 4;
                                            while (v2252 != v2257)
                                            {
                                              int v2321 = *--v2252;
                                              *((_DWORD *)v2320 - 1) = v2321;
                                              v2320 -= 4;
                                            }
                                            *(void *)uint64_t v2251 = v2320;
                                            *v2253 = v2256;
                                            void *v2255 = &v2262[4 * v2261];
                                            if (v2257) {
                                              operator delete(v2257);
                                            }
                                          }
                                          else
                                          {
                                            _DWORD *v2252 = 44;
                                            v2256 = v2252 + 1;
                                          }
                                          *v2253 = v2256;
                                          if (!*v14)
                                          {
LABEL_4105:
                                            if ((*((unsigned char *)__p + 5) & 0x20) == 0) {
                                              goto LABEL_4106;
                                            }
                                            uint64_t v2322 = *v12 + 24 * v13;
                                            v2324 = (_DWORD **)(v2322 + 8);
                                            v2323 = *(_DWORD **)(v2322 + 8);
                                            v2326 = (void *)(v2322 + 16);
                                            unint64_t v2325 = *(void *)(v2322 + 16);
                                            if ((unint64_t)v2323 >= v2325)
                                            {
                                              v2328 = *(_DWORD **)v2322;
                                              uint64_t v2329 = ((uint64_t)v2323 - *(void *)v2322) >> 2;
                                              unint64_t v2330 = v2329 + 1;
                                              if ((unint64_t)(v2329 + 1) >> 62) {
                                                sub_566C();
                                              }
                                              uint64_t v2331 = v2325 - (void)v2328;
                                              if (v2331 >> 1 > v2330) {
                                                unint64_t v2330 = v2331 >> 1;
                                              }
                                              if ((unint64_t)v2331 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                unint64_t v2332 = 0x3FFFFFFFFFFFFFFFLL;
                                              }
                                              else {
                                                unint64_t v2332 = v2330;
                                              }
                                              if (v2332)
                                              {
                                                v2333 = (char *)sub_458C8((uint64_t)v2326, v2332);
                                                v2323 = *v2324;
                                                v2328 = *(_DWORD **)v2322;
                                              }
                                              else
                                              {
                                                v2333 = 0;
                                              }
                                              v2390 = &v2333[4 * v2329];
                                              *(_DWORD *)v2390 = 45;
                                              v2327 = v2390 + 4;
                                              while (v2323 != v2328)
                                              {
                                                int v2391 = *--v2323;
                                                *((_DWORD *)v2390 - 1) = v2391;
                                                v2390 -= 4;
                                              }
                                              *(void *)uint64_t v2322 = v2390;
                                              *v2324 = v2327;
                                              void *v2326 = &v2333[4 * v2332];
                                              if (v2328) {
                                                operator delete(v2328);
                                              }
                                            }
                                            else
                                            {
                                              _DWORD *v2323 = 45;
                                              v2327 = v2323 + 1;
                                            }
                                            *v2324 = v2327;
                                            if (!*v14)
                                            {
LABEL_4106:
                                              if ((*((unsigned char *)__p + 5) & 0x40) == 0) {
                                                goto LABEL_4107;
                                              }
                                              uint64_t v2392 = *v12 + 24 * v13;
                                              v2394 = (_DWORD **)(v2392 + 8);
                                              v2393 = *(_DWORD **)(v2392 + 8);
                                              v2396 = (void *)(v2392 + 16);
                                              unint64_t v2395 = *(void *)(v2392 + 16);
                                              if ((unint64_t)v2393 >= v2395)
                                              {
                                                v2398 = *(_DWORD **)v2392;
                                                uint64_t v2399 = ((uint64_t)v2393 - *(void *)v2392) >> 2;
                                                unint64_t v2400 = v2399 + 1;
                                                if ((unint64_t)(v2399 + 1) >> 62) {
                                                  sub_566C();
                                                }
                                                uint64_t v2401 = v2395 - (void)v2398;
                                                if (v2401 >> 1 > v2400) {
                                                  unint64_t v2400 = v2401 >> 1;
                                                }
                                                if ((unint64_t)v2401 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                  unint64_t v2402 = 0x3FFFFFFFFFFFFFFFLL;
                                                }
                                                else {
                                                  unint64_t v2402 = v2400;
                                                }
                                                if (v2402)
                                                {
                                                  v2403 = (char *)sub_458C8((uint64_t)v2396, v2402);
                                                  v2393 = *v2394;
                                                  v2398 = *(_DWORD **)v2392;
                                                }
                                                else
                                                {
                                                  v2403 = 0;
                                                }
                                                v2452 = &v2403[4 * v2399];
                                                *(_DWORD *)v2452 = 46;
                                                v2397 = v2452 + 4;
                                                while (v2393 != v2398)
                                                {
                                                  int v2453 = *--v2393;
                                                  *((_DWORD *)v2452 - 1) = v2453;
                                                  v2452 -= 4;
                                                }
                                                *(void *)uint64_t v2392 = v2452;
                                                *v2394 = v2397;
                                                void *v2396 = &v2403[4 * v2402];
                                                if (v2398) {
                                                  operator delete(v2398);
                                                }
                                              }
                                              else
                                              {
                                                _DWORD *v2393 = 46;
                                                v2397 = v2393 + 1;
                                              }
                                              *v2394 = v2397;
                                              if (!*v14)
                                              {
LABEL_4107:
                                                if ((*((unsigned char *)__p + 5) & 0x80) == 0) {
                                                  goto LABEL_4108;
                                                }
                                                uint64_t v2454 = *v12 + 24 * v13;
                                                v2456 = (_DWORD **)(v2454 + 8);
                                                v2455 = *(_DWORD **)(v2454 + 8);
                                                v2458 = (void *)(v2454 + 16);
                                                unint64_t v2457 = *(void *)(v2454 + 16);
                                                if ((unint64_t)v2455 >= v2457)
                                                {
                                                  v2460 = *(_DWORD **)v2454;
                                                  uint64_t v2461 = ((uint64_t)v2455 - *(void *)v2454) >> 2;
                                                  unint64_t v2462 = v2461 + 1;
                                                  if ((unint64_t)(v2461 + 1) >> 62) {
                                                    sub_566C();
                                                  }
                                                  uint64_t v2463 = v2457 - (void)v2460;
                                                  if (v2463 >> 1 > v2462) {
                                                    unint64_t v2462 = v2463 >> 1;
                                                  }
                                                  if ((unint64_t)v2463 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                    unint64_t v2464 = 0x3FFFFFFFFFFFFFFFLL;
                                                  }
                                                  else {
                                                    unint64_t v2464 = v2462;
                                                  }
                                                  if (v2464)
                                                  {
                                                    v2465 = (char *)sub_458C8((uint64_t)v2458, v2464);
                                                    v2455 = *v2456;
                                                    v2460 = *(_DWORD **)v2454;
                                                  }
                                                  else
                                                  {
                                                    v2465 = 0;
                                                  }
                                                  v2509 = &v2465[4 * v2461];
                                                  *(_DWORD *)v2509 = 47;
                                                  v2459 = v2509 + 4;
                                                  while (v2455 != v2460)
                                                  {
                                                    int v2510 = *--v2455;
                                                    *((_DWORD *)v2509 - 1) = v2510;
                                                    v2509 -= 4;
                                                  }
                                                  *(void *)uint64_t v2454 = v2509;
                                                  *v2456 = v2459;
                                                  void *v2458 = &v2465[4 * v2464];
                                                  if (v2460) {
                                                    operator delete(v2460);
                                                  }
                                                }
                                                else
                                                {
                                                  _DWORD *v2455 = 47;
                                                  v2459 = v2455 + 1;
                                                }
                                                *v2456 = v2459;
                                                if (!*v14)
                                                {
LABEL_4108:
                                                  if ((*((unsigned char *)__p + 6) & 1) == 0) {
                                                    goto LABEL_4109;
                                                  }
                                                  uint64_t v2511 = *v12 + 24 * v13;
                                                  v2513 = (_DWORD **)(v2511 + 8);
                                                  v2512 = *(_DWORD **)(v2511 + 8);
                                                  v2515 = (void *)(v2511 + 16);
                                                  unint64_t v2514 = *(void *)(v2511 + 16);
                                                  if ((unint64_t)v2512 >= v2514)
                                                  {
                                                    v2517 = *(_DWORD **)v2511;
                                                    uint64_t v2518 = ((uint64_t)v2512 - *(void *)v2511) >> 2;
                                                    unint64_t v2519 = v2518 + 1;
                                                    if ((unint64_t)(v2518 + 1) >> 62) {
                                                      sub_566C();
                                                    }
                                                    uint64_t v2520 = v2514 - (void)v2517;
                                                    if (v2520 >> 1 > v2519) {
                                                      unint64_t v2519 = v2520 >> 1;
                                                    }
                                                    if ((unint64_t)v2520 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                      unint64_t v2521 = 0x3FFFFFFFFFFFFFFFLL;
                                                    }
                                                    else {
                                                      unint64_t v2521 = v2519;
                                                    }
                                                    if (v2521)
                                                    {
                                                      v2522 = (char *)sub_458C8((uint64_t)v2515, v2521);
                                                      v2512 = *v2513;
                                                      v2517 = *(_DWORD **)v2511;
                                                    }
                                                    else
                                                    {
                                                      v2522 = 0;
                                                    }
                                                    v2557 = &v2522[4 * v2518];
                                                    *(_DWORD *)v2557 = 48;
                                                    v2516 = v2557 + 4;
                                                    while (v2512 != v2517)
                                                    {
                                                      int v2558 = *--v2512;
                                                      *((_DWORD *)v2557 - 1) = v2558;
                                                      v2557 -= 4;
                                                    }
                                                    *(void *)uint64_t v2511 = v2557;
                                                    *v2513 = v2516;
                                                    void *v2515 = &v2522[4 * v2521];
                                                    if (v2517) {
                                                      operator delete(v2517);
                                                    }
                                                  }
                                                  else
                                                  {
                                                    _DWORD *v2512 = 48;
                                                    v2516 = v2512 + 1;
                                                  }
                                                  *v2513 = v2516;
                                                  if (!*v14)
                                                  {
LABEL_4109:
                                                    if ((*((unsigned char *)__p + 6) & 2) == 0) {
                                                      goto LABEL_4110;
                                                    }
                                                    uint64_t v2559 = *v12 + 24 * v13;
                                                    v2561 = (_DWORD **)(v2559 + 8);
                                                    v2560 = *(_DWORD **)(v2559 + 8);
                                                    v2563 = (void *)(v2559 + 16);
                                                    unint64_t v2562 = *(void *)(v2559 + 16);
                                                    if ((unint64_t)v2560 >= v2562)
                                                    {
                                                      v2565 = *(_DWORD **)v2559;
                                                      uint64_t v2566 = ((uint64_t)v2560 - *(void *)v2559) >> 2;
                                                      unint64_t v2567 = v2566 + 1;
                                                      if ((unint64_t)(v2566 + 1) >> 62) {
                                                        sub_566C();
                                                      }
                                                      uint64_t v2568 = v2562 - (void)v2565;
                                                      if (v2568 >> 1 > v2567) {
                                                        unint64_t v2567 = v2568 >> 1;
                                                      }
                                                      if ((unint64_t)v2568 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                        unint64_t v2569 = 0x3FFFFFFFFFFFFFFFLL;
                                                      }
                                                      else {
                                                        unint64_t v2569 = v2567;
                                                      }
                                                      if (v2569)
                                                      {
                                                        v2570 = (char *)sub_458C8((uint64_t)v2563, v2569);
                                                        v2560 = *v2561;
                                                        v2565 = *(_DWORD **)v2559;
                                                      }
                                                      else
                                                      {
                                                        v2570 = 0;
                                                      }
                                                      v2600 = &v2570[4 * v2566];
                                                      *(_DWORD *)v2600 = 49;
                                                      v2564 = v2600 + 4;
                                                      while (v2560 != v2565)
                                                      {
                                                        int v2601 = *--v2560;
                                                        *((_DWORD *)v2600 - 1) = v2601;
                                                        v2600 -= 4;
                                                      }
                                                      *(void *)uint64_t v2559 = v2600;
                                                      *v2561 = v2564;
                                                      void *v2563 = &v2570[4 * v2569];
                                                      if (v2565) {
                                                        operator delete(v2565);
                                                      }
                                                    }
                                                    else
                                                    {
                                                      _DWORD *v2560 = 49;
                                                      v2564 = v2560 + 1;
                                                    }
                                                    *v2561 = v2564;
                                                    if (!*v14)
                                                    {
LABEL_4110:
                                                      if ((*((unsigned char *)__p + 6) & 4) == 0) {
                                                        goto LABEL_4111;
                                                      }
                                                      uint64_t v2602 = *v12 + 24 * v13;
                                                      v2604 = (_DWORD **)(v2602 + 8);
                                                      v2603 = *(_DWORD **)(v2602 + 8);
                                                      v2606 = (void *)(v2602 + 16);
                                                      unint64_t v2605 = *(void *)(v2602 + 16);
                                                      if ((unint64_t)v2603 >= v2605)
                                                      {
                                                        v2608 = *(_DWORD **)v2602;
                                                        uint64_t v2609 = ((uint64_t)v2603 - *(void *)v2602) >> 2;
                                                        unint64_t v2610 = v2609 + 1;
                                                        if ((unint64_t)(v2609 + 1) >> 62) {
                                                          sub_566C();
                                                        }
                                                        uint64_t v2611 = v2605 - (void)v2608;
                                                        if (v2611 >> 1 > v2610) {
                                                          unint64_t v2610 = v2611 >> 1;
                                                        }
                                                        if ((unint64_t)v2611 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                          unint64_t v2612 = 0x3FFFFFFFFFFFFFFFLL;
                                                        }
                                                        else {
                                                          unint64_t v2612 = v2610;
                                                        }
                                                        if (v2612)
                                                        {
                                                          v2613 = (char *)sub_458C8((uint64_t)v2606, v2612);
                                                          v2603 = *v2604;
                                                          v2608 = *(_DWORD **)v2602;
                                                        }
                                                        else
                                                        {
                                                          v2613 = 0;
                                                        }
                                                        v2634 = &v2613[4 * v2609];
                                                        *(_DWORD *)v2634 = 50;
                                                        v2607 = v2634 + 4;
                                                        while (v2603 != v2608)
                                                        {
                                                          int v2635 = *--v2603;
                                                          *((_DWORD *)v2634 - 1) = v2635;
                                                          v2634 -= 4;
                                                        }
                                                        *(void *)uint64_t v2602 = v2634;
                                                        *v2604 = v2607;
                                                        void *v2606 = &v2613[4 * v2612];
                                                        if (v2608) {
                                                          operator delete(v2608);
                                                        }
                                                      }
                                                      else
                                                      {
                                                        _DWORD *v2603 = 50;
                                                        v2607 = v2603 + 1;
                                                      }
                                                      *v2604 = v2607;
                                                      if (!*v14)
                                                      {
LABEL_4111:
                                                        if ((*((unsigned char *)__p + 6) & 8) == 0) {
                                                          goto LABEL_4112;
                                                        }
                                                        uint64_t v2636 = *v12 + 24 * v13;
                                                        v2638 = (_DWORD **)(v2636 + 8);
                                                        v2637 = *(_DWORD **)(v2636 + 8);
                                                        v2640 = (void *)(v2636 + 16);
                                                        unint64_t v2639 = *(void *)(v2636 + 16);
                                                        if ((unint64_t)v2637 >= v2639)
                                                        {
                                                          v2642 = *(_DWORD **)v2636;
                                                          uint64_t v2643 = ((uint64_t)v2637 - *(void *)v2636) >> 2;
                                                          unint64_t v2644 = v2643 + 1;
                                                          if ((unint64_t)(v2643 + 1) >> 62) {
                                                            sub_566C();
                                                          }
                                                          uint64_t v2645 = v2639 - (void)v2642;
                                                          if (v2645 >> 1 > v2644) {
                                                            unint64_t v2644 = v2645 >> 1;
                                                          }
                                                          if ((unint64_t)v2645 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                            unint64_t v2646 = 0x3FFFFFFFFFFFFFFFLL;
                                                          }
                                                          else {
                                                            unint64_t v2646 = v2644;
                                                          }
                                                          if (v2646)
                                                          {
                                                            v2647 = (char *)sub_458C8((uint64_t)v2640, v2646);
                                                            v2637 = *v2638;
                                                            v2642 = *(_DWORD **)v2636;
                                                          }
                                                          else
                                                          {
                                                            v2647 = 0;
                                                          }
                                                          v2663 = &v2647[4 * v2643];
                                                          *(_DWORD *)v2663 = 51;
                                                          v2641 = v2663 + 4;
                                                          while (v2637 != v2642)
                                                          {
                                                            int v2664 = *--v2637;
                                                            *((_DWORD *)v2663 - 1) = v2664;
                                                            v2663 -= 4;
                                                          }
                                                          *(void *)uint64_t v2636 = v2663;
                                                          *v2638 = v2641;
                                                          void *v2640 = &v2647[4 * v2646];
                                                          if (v2642) {
                                                            operator delete(v2642);
                                                          }
                                                        }
                                                        else
                                                        {
                                                          _DWORD *v2637 = 51;
                                                          v2641 = v2637 + 1;
                                                        }
                                                        *v2638 = v2641;
                                                        if (!*v14)
                                                        {
LABEL_4112:
                                                          if ((*((unsigned char *)__p + 6) & 0x10) == 0) {
                                                            goto LABEL_4113;
                                                          }
                                                          uint64_t v2665 = *v12 + 24 * v13;
                                                          v2667 = (_DWORD **)(v2665 + 8);
                                                          v2666 = *(_DWORD **)(v2665 + 8);
                                                          v2669 = (void *)(v2665 + 16);
                                                          unint64_t v2668 = *(void *)(v2665 + 16);
                                                          if ((unint64_t)v2666 >= v2668)
                                                          {
                                                            v2671 = *(_DWORD **)v2665;
                                                            uint64_t v2672 = ((uint64_t)v2666 - *(void *)v2665) >> 2;
                                                            unint64_t v2673 = v2672 + 1;
                                                            if ((unint64_t)(v2672 + 1) >> 62) {
                                                              sub_566C();
                                                            }
                                                            uint64_t v2674 = v2668 - (void)v2671;
                                                            if (v2674 >> 1 > v2673) {
                                                              unint64_t v2673 = v2674 >> 1;
                                                            }
                                                            if ((unint64_t)v2674 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                              unint64_t v2675 = 0x3FFFFFFFFFFFFFFFLL;
                                                            }
                                                            else {
                                                              unint64_t v2675 = v2673;
                                                            }
                                                            if (v2675)
                                                            {
                                                              v2676 = (char *)sub_458C8((uint64_t)v2669, v2675);
                                                              v2666 = *v2667;
                                                              v2671 = *(_DWORD **)v2665;
                                                            }
                                                            else
                                                            {
                                                              v2676 = 0;
                                                            }
                                                            v2691 = &v2676[4 * v2672];
                                                            *(_DWORD *)v2691 = 52;
                                                            v2670 = v2691 + 4;
                                                            while (v2666 != v2671)
                                                            {
                                                              int v2692 = *--v2666;
                                                              *((_DWORD *)v2691 - 1) = v2692;
                                                              v2691 -= 4;
                                                            }
                                                            *(void *)uint64_t v2665 = v2691;
                                                            *v2667 = v2670;
                                                            void *v2669 = &v2676[4 * v2675];
                                                            if (v2671) {
                                                              operator delete(v2671);
                                                            }
                                                          }
                                                          else
                                                          {
                                                            _DWORD *v2666 = 52;
                                                            v2670 = v2666 + 1;
                                                          }
                                                          *v2667 = v2670;
                                                          if (!*v14)
                                                          {
LABEL_4113:
                                                            if ((*((unsigned char *)__p + 6) & 0x20) == 0) {
                                                              goto LABEL_4114;
                                                            }
                                                            uint64_t v2693 = *v12 + 24 * v13;
                                                            v2695 = (_DWORD **)(v2693 + 8);
                                                            v2694 = *(_DWORD **)(v2693 + 8);
                                                            v2697 = (void *)(v2693 + 16);
                                                            unint64_t v2696 = *(void *)(v2693 + 16);
                                                            if ((unint64_t)v2694 >= v2696)
                                                            {
                                                              v2699 = *(_DWORD **)v2693;
                                                              uint64_t v2700 = ((uint64_t)v2694 - *(void *)v2693) >> 2;
                                                              unint64_t v2701 = v2700 + 1;
                                                              if ((unint64_t)(v2700 + 1) >> 62) {
                                                                sub_566C();
                                                              }
                                                              uint64_t v2702 = v2696 - (void)v2699;
                                                              if (v2702 >> 1 > v2701) {
                                                                unint64_t v2701 = v2702 >> 1;
                                                              }
                                                              if ((unint64_t)v2702 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                                unint64_t v2703 = 0x3FFFFFFFFFFFFFFFLL;
                                                              }
                                                              else {
                                                                unint64_t v2703 = v2701;
                                                              }
                                                              if (v2703)
                                                              {
                                                                v2704 = (char *)sub_458C8((uint64_t)v2697, v2703);
                                                                v2694 = *v2695;
                                                                v2699 = *(_DWORD **)v2693;
                                                              }
                                                              else
                                                              {
                                                                v2704 = 0;
                                                              }
                                                              v2719 = &v2704[4 * v2700];
                                                              *(_DWORD *)v2719 = 53;
                                                              v2698 = v2719 + 4;
                                                              while (v2694 != v2699)
                                                              {
                                                                int v2720 = *--v2694;
                                                                *((_DWORD *)v2719 - 1) = v2720;
                                                                v2719 -= 4;
                                                              }
                                                              *(void *)uint64_t v2693 = v2719;
                                                              *v2695 = v2698;
                                                              void *v2697 = &v2704[4 * v2703];
                                                              if (v2699) {
                                                                operator delete(v2699);
                                                              }
                                                            }
                                                            else
                                                            {
                                                              _DWORD *v2694 = 53;
                                                              v2698 = v2694 + 1;
                                                            }
                                                            *v2695 = v2698;
                                                            if (!*v14)
                                                            {
LABEL_4114:
                                                              if ((*((unsigned char *)__p + 6) & 0x40) == 0) {
                                                                goto LABEL_4115;
                                                              }
                                                              uint64_t v2721 = *v12 + 24 * v13;
                                                              v2723 = (_DWORD **)(v2721 + 8);
                                                              v2722 = *(_DWORD **)(v2721 + 8);
                                                              v2725 = (void *)(v2721 + 16);
                                                              unint64_t v2724 = *(void *)(v2721 + 16);
                                                              if ((unint64_t)v2722 >= v2724)
                                                              {
                                                                v2727 = *(_DWORD **)v2721;
                                                                uint64_t v2728 = ((uint64_t)v2722 - *(void *)v2721) >> 2;
                                                                unint64_t v2729 = v2728 + 1;
                                                                if ((unint64_t)(v2728 + 1) >> 62) {
                                                                  sub_566C();
                                                                }
                                                                uint64_t v2730 = v2724 - (void)v2727;
                                                                if (v2730 >> 1 > v2729) {
                                                                  unint64_t v2729 = v2730 >> 1;
                                                                }
                                                                if ((unint64_t)v2730 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                                  unint64_t v2731 = 0x3FFFFFFFFFFFFFFFLL;
                                                                }
                                                                else {
                                                                  unint64_t v2731 = v2729;
                                                                }
                                                                if (v2731)
                                                                {
                                                                  v2732 = (char *)sub_458C8((uint64_t)v2725, v2731);
                                                                  v2722 = *v2723;
                                                                  v2727 = *(_DWORD **)v2721;
                                                                }
                                                                else
                                                                {
                                                                  v2732 = 0;
                                                                }
                                                                v2747 = &v2732[4 * v2728];
                                                                *(_DWORD *)v2747 = 54;
                                                                v2726 = v2747 + 4;
                                                                while (v2722 != v2727)
                                                                {
                                                                  int v2748 = *--v2722;
                                                                  *((_DWORD *)v2747 - 1) = v2748;
                                                                  v2747 -= 4;
                                                                }
                                                                *(void *)uint64_t v2721 = v2747;
                                                                *v2723 = v2726;
                                                                void *v2725 = &v2732[4 * v2731];
                                                                if (v2727) {
                                                                  operator delete(v2727);
                                                                }
                                                              }
                                                              else
                                                              {
                                                                _DWORD *v2722 = 54;
                                                                v2726 = v2722 + 1;
                                                              }
                                                              *v2723 = v2726;
                                                              if (!*v14)
                                                              {
LABEL_4115:
                                                                if ((*((unsigned char *)__p + 6) & 0x80) == 0) {
                                                                  goto LABEL_4116;
                                                                }
                                                                uint64_t v2749 = *v12 + 24 * v13;
                                                                v2751 = (_DWORD **)(v2749 + 8);
                                                                v2750 = *(_DWORD **)(v2749 + 8);
                                                                v2753 = (void *)(v2749 + 16);
                                                                unint64_t v2752 = *(void *)(v2749 + 16);
                                                                if ((unint64_t)v2750 >= v2752)
                                                                {
                                                                  v2755 = *(_DWORD **)v2749;
                                                                  uint64_t v2756 = ((uint64_t)v2750 - *(void *)v2749) >> 2;
                                                                  unint64_t v2757 = v2756 + 1;
                                                                  if ((unint64_t)(v2756 + 1) >> 62) {
                                                                    sub_566C();
                                                                  }
                                                                  uint64_t v2758 = v2752 - (void)v2755;
                                                                  if (v2758 >> 1 > v2757) {
                                                                    unint64_t v2757 = v2758 >> 1;
                                                                  }
                                                                  if ((unint64_t)v2758 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                                    unint64_t v2759 = 0x3FFFFFFFFFFFFFFFLL;
                                                                  }
                                                                  else {
                                                                    unint64_t v2759 = v2757;
                                                                  }
                                                                  if (v2759)
                                                                  {
                                                                    v2760 = (char *)sub_458C8((uint64_t)v2753, v2759);
                                                                    v2750 = *v2751;
                                                                    v2755 = *(_DWORD **)v2749;
                                                                  }
                                                                  else
                                                                  {
                                                                    v2760 = 0;
                                                                  }
                                                                  v2775 = &v2760[4 * v2756];
                                                                  *(_DWORD *)v2775 = 55;
                                                                  v2754 = v2775 + 4;
                                                                  while (v2750 != v2755)
                                                                  {
                                                                    int v2776 = *--v2750;
                                                                    *((_DWORD *)v2775 - 1) = v2776;
                                                                    v2775 -= 4;
                                                                  }
                                                                  *(void *)uint64_t v2749 = v2775;
                                                                  *v2751 = v2754;
                                                                  void *v2753 = &v2760[4 * v2759];
                                                                  if (v2755) {
                                                                    operator delete(v2755);
                                                                  }
                                                                }
                                                                else
                                                                {
                                                                  _DWORD *v2750 = 55;
                                                                  v2754 = v2750 + 1;
                                                                }
                                                                *v2751 = v2754;
                                                                if (!*v14)
                                                                {
LABEL_4116:
                                                                  if ((*((unsigned char *)__p + 7) & 1) == 0) {
                                                                    goto LABEL_4117;
                                                                  }
                                                                  uint64_t v2777 = *v12 + 24 * v13;
                                                                  v2779 = (_DWORD **)(v2777 + 8);
                                                                  v2778 = *(_DWORD **)(v2777 + 8);
                                                                  v2781 = (void *)(v2777 + 16);
                                                                  unint64_t v2780 = *(void *)(v2777 + 16);
                                                                  if ((unint64_t)v2778 >= v2780)
                                                                  {
                                                                    v2783 = *(_DWORD **)v2777;
                                                                    uint64_t v2784 = ((uint64_t)v2778 - *(void *)v2777) >> 2;
                                                                    unint64_t v2785 = v2784 + 1;
                                                                    if ((unint64_t)(v2784 + 1) >> 62) {
                                                                      sub_566C();
                                                                    }
                                                                    uint64_t v2786 = v2780 - (void)v2783;
                                                                    if (v2786 >> 1 > v2785) {
                                                                      unint64_t v2785 = v2786 >> 1;
                                                                    }
                                                                    if ((unint64_t)v2786 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                                      unint64_t v2787 = 0x3FFFFFFFFFFFFFFFLL;
                                                                    }
                                                                    else {
                                                                      unint64_t v2787 = v2785;
                                                                    }
                                                                    if (v2787)
                                                                    {
                                                                      v2788 = (char *)sub_458C8((uint64_t)v2781, v2787);
                                                                      v2778 = *v2779;
                                                                      v2783 = *(_DWORD **)v2777;
                                                                    }
                                                                    else
                                                                    {
                                                                      v2788 = 0;
                                                                    }
                                                                    v2803 = &v2788[4 * v2784];
                                                                    *(_DWORD *)v2803 = 56;
                                                                    v2782 = v2803 + 4;
                                                                    while (v2778 != v2783)
                                                                    {
                                                                      int v2804 = *--v2778;
                                                                      *((_DWORD *)v2803 - 1) = v2804;
                                                                      v2803 -= 4;
                                                                    }
                                                                    *(void *)uint64_t v2777 = v2803;
                                                                    *v2779 = v2782;
                                                                    void *v2781 = &v2788[4 * v2787];
                                                                    if (v2783) {
                                                                      operator delete(v2783);
                                                                    }
                                                                  }
                                                                  else
                                                                  {
                                                                    _DWORD *v2778 = 56;
                                                                    v2782 = v2778 + 1;
                                                                  }
                                                                  *v2779 = v2782;
                                                                  if (!*v14)
                                                                  {
LABEL_4117:
                                                                    if ((*((unsigned char *)__p + 7) & 2) == 0) {
                                                                      goto LABEL_4118;
                                                                    }
                                                                    uint64_t v2805 = *v12 + 24 * v13;
                                                                    v2807 = (_DWORD **)(v2805 + 8);
                                                                    v2806 = *(_DWORD **)(v2805 + 8);
                                                                    v2809 = (void *)(v2805 + 16);
                                                                    unint64_t v2808 = *(void *)(v2805 + 16);
                                                                    if ((unint64_t)v2806 >= v2808)
                                                                    {
                                                                      v2811 = *(_DWORD **)v2805;
                                                                      uint64_t v2812 = ((uint64_t)v2806 - *(void *)v2805) >> 2;
                                                                      unint64_t v2813 = v2812 + 1;
                                                                      if ((unint64_t)(v2812 + 1) >> 62) {
                                                                        sub_566C();
                                                                      }
                                                                      uint64_t v2814 = v2808 - (void)v2811;
                                                                      if (v2814 >> 1 > v2813) {
                                                                        unint64_t v2813 = v2814 >> 1;
                                                                      }
                                                                      if ((unint64_t)v2814 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                                        unint64_t v2815 = 0x3FFFFFFFFFFFFFFFLL;
                                                                      }
                                                                      else {
                                                                        unint64_t v2815 = v2813;
                                                                      }
                                                                      if (v2815)
                                                                      {
                                                                        v2816 = (char *)sub_458C8((uint64_t)v2809, v2815);
                                                                        v2806 = *v2807;
                                                                        v2811 = *(_DWORD **)v2805;
                                                                      }
                                                                      else
                                                                      {
                                                                        v2816 = 0;
                                                                      }
                                                                      v2831 = &v2816[4 * v2812];
                                                                      *(_DWORD *)v2831 = 57;
                                                                      v2810 = v2831 + 4;
                                                                      while (v2806 != v2811)
                                                                      {
                                                                        int v2832 = *--v2806;
                                                                        *((_DWORD *)v2831 - 1) = v2832;
                                                                        v2831 -= 4;
                                                                      }
                                                                      *(void *)uint64_t v2805 = v2831;
                                                                      *v2807 = v2810;
                                                                      void *v2809 = &v2816[4 * v2815];
                                                                      if (v2811) {
                                                                        operator delete(v2811);
                                                                      }
                                                                    }
                                                                    else
                                                                    {
                                                                      _DWORD *v2806 = 57;
                                                                      v2810 = v2806 + 1;
                                                                    }
                                                                    *v2807 = v2810;
                                                                    if (!*v14)
                                                                    {
LABEL_4118:
                                                                      if ((*((unsigned char *)__p + 7) & 4) == 0) {
                                                                        goto LABEL_4119;
                                                                      }
                                                                      uint64_t v2833 = *v12 + 24 * v13;
                                                                      v2835 = (_DWORD **)(v2833 + 8);
                                                                      v2834 = *(_DWORD **)(v2833 + 8);
                                                                      v2837 = (void *)(v2833 + 16);
                                                                      unint64_t v2836 = *(void *)(v2833 + 16);
                                                                      if ((unint64_t)v2834 >= v2836)
                                                                      {
                                                                        v2839 = *(_DWORD **)v2833;
                                                                        uint64_t v2840 = ((uint64_t)v2834 - *(void *)v2833) >> 2;
                                                                        unint64_t v2841 = v2840 + 1;
                                                                        if ((unint64_t)(v2840 + 1) >> 62) {
                                                                          sub_566C();
                                                                        }
                                                                        uint64_t v2842 = v2836 - (void)v2839;
                                                                        if (v2842 >> 1 > v2841) {
                                                                          unint64_t v2841 = v2842 >> 1;
                                                                        }
                                                                        if ((unint64_t)v2842 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                                          unint64_t v2843 = 0x3FFFFFFFFFFFFFFFLL;
                                                                        }
                                                                        else {
                                                                          unint64_t v2843 = v2841;
                                                                        }
                                                                        if (v2843)
                                                                        {
                                                                          v2844 = (char *)sub_458C8((uint64_t)v2837, v2843);
                                                                          v2834 = *v2835;
                                                                          v2839 = *(_DWORD **)v2833;
                                                                        }
                                                                        else
                                                                        {
                                                                          v2844 = 0;
                                                                        }
                                                                        v2859 = &v2844[4 * v2840];
                                                                        *(_DWORD *)v2859 = 58;
                                                                        v2838 = v2859 + 4;
                                                                        while (v2834 != v2839)
                                                                        {
                                                                          int v2860 = *--v2834;
                                                                          *((_DWORD *)v2859 - 1) = v2860;
                                                                          v2859 -= 4;
                                                                        }
                                                                        *(void *)uint64_t v2833 = v2859;
                                                                        *v2835 = v2838;
                                                                        void *v2837 = &v2844[4 * v2843];
                                                                        if (v2839) {
                                                                          operator delete(v2839);
                                                                        }
                                                                      }
                                                                      else
                                                                      {
                                                                        _DWORD *v2834 = 58;
                                                                        v2838 = v2834 + 1;
                                                                      }
                                                                      *v2835 = v2838;
                                                                      if (!*v14)
                                                                      {
LABEL_4119:
                                                                        if ((*((unsigned char *)__p + 7) & 8) == 0) {
                                                                          goto LABEL_4120;
                                                                        }
                                                                        uint64_t v2861 = *v12 + 24 * v13;
                                                                        v2863 = (_DWORD **)(v2861 + 8);
                                                                        v2862 = *(_DWORD **)(v2861 + 8);
                                                                        v2865 = (void *)(v2861 + 16);
                                                                        unint64_t v2864 = *(void *)(v2861 + 16);
                                                                        if ((unint64_t)v2862 >= v2864)
                                                                        {
                                                                          v2867 = *(_DWORD **)v2861;
                                                                          uint64_t v2868 = ((uint64_t)v2862 - *(void *)v2861) >> 2;
                                                                          unint64_t v2869 = v2868 + 1;
                                                                          if ((unint64_t)(v2868 + 1) >> 62) {
                                                                            sub_566C();
                                                                          }
                                                                          uint64_t v2870 = v2864 - (void)v2867;
                                                                          if (v2870 >> 1 > v2869) {
                                                                            unint64_t v2869 = v2870 >> 1;
                                                                          }
                                                                          if ((unint64_t)v2870 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                                            unint64_t v2871 = 0x3FFFFFFFFFFFFFFFLL;
                                                                          }
                                                                          else {
                                                                            unint64_t v2871 = v2869;
                                                                          }
                                                                          if (v2871)
                                                                          {
                                                                            v2872 = (char *)sub_458C8((uint64_t)v2865, v2871);
                                                                            v2862 = *v2863;
                                                                            v2867 = *(_DWORD **)v2861;
                                                                          }
                                                                          else
                                                                          {
                                                                            v2872 = 0;
                                                                          }
                                                                          v2879 = &v2872[4 * v2868];
                                                                          *(_DWORD *)v2879 = 59;
                                                                          v2866 = v2879 + 4;
                                                                          while (v2862 != v2867)
                                                                          {
                                                                            int v2880 = *--v2862;
                                                                            *((_DWORD *)v2879 - 1) = v2880;
                                                                            v2879 -= 4;
                                                                          }
                                                                          *(void *)uint64_t v2861 = v2879;
                                                                          *v2863 = v2866;
                                                                          void *v2865 = &v2872[4 * v2871];
                                                                          if (v2867) {
                                                                            operator delete(v2867);
                                                                          }
                                                                        }
                                                                        else
                                                                        {
                                                                          _DWORD *v2862 = 59;
                                                                          v2866 = v2862 + 1;
                                                                        }
                                                                        *v2863 = v2866;
                                                                        if (!*v14)
                                                                        {
LABEL_4120:
                                                                          if ((*((unsigned char *)__p + 7) & 0x10) != 0)
                                                                          {
                                                                            uint64_t v1723 = *v12 + 24 * v13;
                                                                            v1725 = (int **)(v1723 + 8);
                                                                            v1724 = *(int **)(v1723 + 8);
                                                                            v1727 = (void *)(v1723 + 16);
                                                                            unint64_t v2881 = *(void *)(v1723 + 16);
                                                                            if ((unint64_t)v1724 < v2881)
                                                                            {
                                                                              int v1728 = 60;
                                                                              goto LABEL_2631;
                                                                            }
                                                                            v1729 = *(int **)v1723;
                                                                            uint64_t v2882 = ((uint64_t)v1724 - *(void *)v1723) >> 2;
                                                                            unint64_t v2883 = v2882 + 1;
                                                                            if ((unint64_t)(v2882 + 1) >> 62) {
                                                                              sub_566C();
                                                                            }
                                                                            uint64_t v2884 = v2881 - (void)v1729;
                                                                            if (v2884 >> 1 > v2883) {
                                                                              unint64_t v2883 = v2884 >> 1;
                                                                            }
                                                                            if ((unint64_t)v2884 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                                              unint64_t v1733 = 0x3FFFFFFFFFFFFFFFLL;
                                                                            }
                                                                            else {
                                                                              unint64_t v1733 = v2883;
                                                                            }
                                                                            if (v1733)
                                                                            {
                                                                              v1734 = (char *)sub_458C8((uint64_t)v1727, v1733);
                                                                              v1724 = *v1725;
                                                                              v1729 = *(int **)v1723;
                                                                            }
                                                                            else
                                                                            {
                                                                              v1734 = 0;
                                                                            }
                                                                            v1840 = &v1734[4 * v2882];
                                                                            *(_DWORD *)v1840 = 60;
                                                                            v1841 = (int *)(v1840 + 4);
                                                                            while (v1724 != v1729)
                                                                            {
                                                                              int v2886 = *--v1724;
                                                                              *((_DWORD *)v1840 - 1) = v2886;
                                                                              v1840 -= 4;
                                                                            }
                                                                            goto LABEL_3843;
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          break;
        case 3:
          if (!*v14)
          {
            if ((*((unsigned char *)__p + 1) & 8) == 0) {
              goto LABEL_360;
            }
            uint64_t v63 = *v12 + 24 * v13;
            uint64_t v65 = (_DWORD **)(v63 + 8);
            uint64_t v64 = *(_DWORD **)(v63 + 8);
            uint64_t v67 = (void *)(v63 + 16);
            unint64_t v66 = *(void *)(v63 + 16);
            if ((unint64_t)v64 >= v66)
            {
              unint64_t v165 = *(_DWORD **)v63;
              uint64_t v166 = ((uint64_t)v64 - *(void *)v63) >> 2;
              unint64_t v167 = v166 + 1;
              if ((unint64_t)(v166 + 1) >> 62) {
                sub_566C();
              }
              uint64_t v168 = v66 - (void)v165;
              if (v168 >> 1 > v167) {
                unint64_t v167 = v168 >> 1;
              }
              if ((unint64_t)v168 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v169 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v169 = v167;
              }
              if (v169)
              {
                unint64_t v170 = (char *)sub_458C8((uint64_t)v67, v169);
                uint64_t v64 = *v65;
                unint64_t v165 = *(_DWORD **)v63;
              }
              else
              {
                unint64_t v170 = 0;
              }
              uint64_t v329 = &v170[4 * v166];
              *(_DWORD *)uint64_t v329 = 11;
              unint64_t v68 = v329 + 4;
              while (v64 != v165)
              {
                int v330 = *--v64;
                *((_DWORD *)v329 - 1) = v330;
                v329 -= 4;
              }
              *(void *)uint64_t v63 = v329;
              char *v65 = v68;
              *uint64_t v67 = &v170[4 * v169];
              if (v165) {
                operator delete(v165);
              }
            }
            else
            {
              _DWORD *v64 = 11;
              unint64_t v68 = v64 + 1;
            }
            char *v65 = v68;
            if (!*v14)
            {
LABEL_360:
              if ((*((unsigned char *)__p + 1) & 0x10) == 0) {
                goto LABEL_2628;
              }
              uint64_t v331 = *v12 + 24 * v13;
              uint64_t v333 = (_DWORD **)(v331 + 8);
              uint64_t v332 = *(_DWORD **)(v331 + 8);
              uint64_t v335 = (void *)(v331 + 16);
              unint64_t v334 = *(void *)(v331 + 16);
              if ((unint64_t)v332 >= v334)
              {
                uint64_t v337 = *(_DWORD **)v331;
                uint64_t v338 = ((uint64_t)v332 - *(void *)v331) >> 2;
                unint64_t v339 = v338 + 1;
                if ((unint64_t)(v338 + 1) >> 62) {
                  sub_566C();
                }
                uint64_t v340 = v334 - (void)v337;
                if (v340 >> 1 > v339) {
                  unint64_t v339 = v340 >> 1;
                }
                if ((unint64_t)v340 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v341 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v341 = v339;
                }
                if (v341)
                {
                  unint64_t v342 = (char *)sub_458C8((uint64_t)v335, v341);
                  uint64_t v332 = *v333;
                  uint64_t v337 = *(_DWORD **)v331;
                }
                else
                {
                  unint64_t v342 = 0;
                }
                uint64_t v546 = &v342[4 * v338];
                *(_DWORD *)uint64_t v546 = 12;
                unint64_t v336 = v546 + 4;
                while (v332 != v337)
                {
                  int v547 = *--v332;
                  *((_DWORD *)v546 - 1) = v547;
                  v546 -= 4;
                }
                *(void *)uint64_t v331 = v546;
                char *v333 = v336;
                *uint64_t v335 = &v342[4 * v341];
                if (v337) {
                  operator delete(v337);
                }
              }
              else
              {
                _DWORD *v332 = 12;
                unint64_t v336 = v332 + 1;
              }
              char *v333 = v336;
              if (!*v14)
              {
LABEL_2628:
                if ((*((unsigned char *)__p + 1) & 0x20) == 0) {
                  goto LABEL_4121;
                }
                uint64_t v548 = *v12 + 24 * v13;
                unint64_t v550 = (_DWORD **)(v548 + 8);
                v549 = *(_DWORD **)(v548 + 8);
                uint64_t v552 = (void *)(v548 + 16);
                unint64_t v551 = *(void *)(v548 + 16);
                if ((unint64_t)v549 >= v551)
                {
                  uint64_t v554 = *(_DWORD **)v548;
                  uint64_t v555 = ((uint64_t)v549 - *(void *)v548) >> 2;
                  unint64_t v556 = v555 + 1;
                  if ((unint64_t)(v555 + 1) >> 62) {
                    sub_566C();
                  }
                  uint64_t v557 = v551 - (void)v554;
                  if (v557 >> 1 > v556) {
                    unint64_t v556 = v557 >> 1;
                  }
                  if ((unint64_t)v557 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v558 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v558 = v556;
                  }
                  if (v558)
                  {
                    v559 = (char *)sub_458C8((uint64_t)v552, v558);
                    v549 = *v550;
                    uint64_t v554 = *(_DWORD **)v548;
                  }
                  else
                  {
                    v559 = 0;
                  }
                  v748 = &v559[4 * v555];
                  *(_DWORD *)v748 = 13;
                  uint64_t v553 = v748 + 4;
                  while (v549 != v554)
                  {
                    int v749 = *--v549;
                    *((_DWORD *)v748 - 1) = v749;
                    v748 -= 4;
                  }
                  *(void *)uint64_t v548 = v748;
                  *unint64_t v550 = v553;
                  *uint64_t v552 = &v559[4 * v558];
                  if (v554) {
                    operator delete(v554);
                  }
                }
                else
                {
                  _DWORD *v549 = 13;
                  uint64_t v553 = v549 + 1;
                }
                *unint64_t v550 = v553;
                if (!*v14)
                {
LABEL_4121:
                  if ((*((unsigned char *)__p + 1) & 0x40) == 0) {
                    goto LABEL_4122;
                  }
                  uint64_t v750 = *v12 + 24 * v13;
                  v752 = (_DWORD **)(v750 + 8);
                  v751 = *(_DWORD **)(v750 + 8);
                  v754 = (void *)(v750 + 16);
                  unint64_t v753 = *(void *)(v750 + 16);
                  if ((unint64_t)v751 >= v753)
                  {
                    v756 = *(_DWORD **)v750;
                    uint64_t v757 = ((uint64_t)v751 - *(void *)v750) >> 2;
                    unint64_t v758 = v757 + 1;
                    if ((unint64_t)(v757 + 1) >> 62) {
                      sub_566C();
                    }
                    uint64_t v759 = v753 - (void)v756;
                    if (v759 >> 1 > v758) {
                      unint64_t v758 = v759 >> 1;
                    }
                    if ((unint64_t)v759 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v760 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v760 = v758;
                    }
                    if (v760)
                    {
                      v761 = (char *)sub_458C8((uint64_t)v754, v760);
                      v751 = *v752;
                      v756 = *(_DWORD **)v750;
                    }
                    else
                    {
                      v761 = 0;
                    }
                    v937 = &v761[4 * v757];
                    *(_DWORD *)v937 = 14;
                    v755 = v937 + 4;
                    while (v751 != v756)
                    {
                      int v938 = *--v751;
                      *((_DWORD *)v937 - 1) = v938;
                      v937 -= 4;
                    }
                    *(void *)uint64_t v750 = v937;
                    *v752 = v755;
                    void *v754 = &v761[4 * v760];
                    if (v756) {
                      operator delete(v756);
                    }
                  }
                  else
                  {
                    _DWORD *v751 = 14;
                    v755 = v751 + 1;
                  }
                  *v752 = v755;
                  if (!*v14)
                  {
LABEL_4122:
                    if ((*((unsigned char *)__p + 1) & 0x80) == 0) {
                      goto LABEL_4123;
                    }
                    uint64_t v939 = *v12 + 24 * v13;
                    v941 = (_DWORD **)(v939 + 8);
                    v940 = *(_DWORD **)(v939 + 8);
                    v943 = (void *)(v939 + 16);
                    unint64_t v942 = *(void *)(v939 + 16);
                    if ((unint64_t)v940 >= v942)
                    {
                      v945 = *(_DWORD **)v939;
                      uint64_t v946 = ((uint64_t)v940 - *(void *)v939) >> 2;
                      unint64_t v947 = v946 + 1;
                      if ((unint64_t)(v946 + 1) >> 62) {
                        sub_566C();
                      }
                      uint64_t v948 = v942 - (void)v945;
                      if (v948 >> 1 > v947) {
                        unint64_t v947 = v948 >> 1;
                      }
                      if ((unint64_t)v948 >= 0x7FFFFFFFFFFFFFFCLL) {
                        unint64_t v949 = 0x3FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v949 = v947;
                      }
                      if (v949)
                      {
                        v950 = (char *)sub_458C8((uint64_t)v943, v949);
                        v940 = *v941;
                        v945 = *(_DWORD **)v939;
                      }
                      else
                      {
                        v950 = 0;
                      }
                      v1112 = &v950[4 * v946];
                      *(_DWORD *)v1112 = 15;
                      v944 = v1112 + 4;
                      while (v940 != v945)
                      {
                        int v1113 = *--v940;
                        *((_DWORD *)v1112 - 1) = v1113;
                        v1112 -= 4;
                      }
                      *(void *)uint64_t v939 = v1112;
                      *v941 = v944;
                      void *v943 = &v950[4 * v949];
                      if (v945) {
                        operator delete(v945);
                      }
                    }
                    else
                    {
                      _DWORD *v940 = 15;
                      v944 = v940 + 1;
                    }
                    *v941 = v944;
                    if (!*v14)
                    {
LABEL_4123:
                      if ((*((unsigned char *)__p + 2) & 1) == 0) {
                        goto LABEL_4124;
                      }
                      uint64_t v1114 = *v12 + 24 * v13;
                      v1116 = (_DWORD **)(v1114 + 8);
                      v1115 = *(_DWORD **)(v1114 + 8);
                      v1118 = (void *)(v1114 + 16);
                      unint64_t v1117 = *(void *)(v1114 + 16);
                      if ((unint64_t)v1115 >= v1117)
                      {
                        v1120 = *(_DWORD **)v1114;
                        uint64_t v1121 = ((uint64_t)v1115 - *(void *)v1114) >> 2;
                        unint64_t v1122 = v1121 + 1;
                        if ((unint64_t)(v1121 + 1) >> 62) {
                          sub_566C();
                        }
                        uint64_t v1123 = v1117 - (void)v1120;
                        if (v1123 >> 1 > v1122) {
                          unint64_t v1122 = v1123 >> 1;
                        }
                        if ((unint64_t)v1123 >= 0x7FFFFFFFFFFFFFFCLL) {
                          unint64_t v1124 = 0x3FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v1124 = v1122;
                        }
                        if (v1124)
                        {
                          v1125 = (char *)sub_458C8((uint64_t)v1118, v1124);
                          v1115 = *v1116;
                          v1120 = *(_DWORD **)v1114;
                        }
                        else
                        {
                          v1125 = 0;
                        }
                        v1277 = &v1125[4 * v1121];
                        *(_DWORD *)v1277 = 16;
                        v1119 = v1277 + 4;
                        while (v1115 != v1120)
                        {
                          int v1278 = *--v1115;
                          *((_DWORD *)v1277 - 1) = v1278;
                          v1277 -= 4;
                        }
                        *(void *)uint64_t v1114 = v1277;
                        *v1116 = v1119;
                        void *v1118 = &v1125[4 * v1124];
                        if (v1120) {
                          operator delete(v1120);
                        }
                      }
                      else
                      {
                        _DWORD *v1115 = 16;
                        v1119 = v1115 + 1;
                      }
                      *v1116 = v1119;
                      if (!*v14)
                      {
LABEL_4124:
                        if ((*((unsigned char *)__p + 2) & 2) == 0) {
                          goto LABEL_4125;
                        }
                        uint64_t v1279 = *v12 + 24 * v13;
                        v1281 = (_DWORD **)(v1279 + 8);
                        v1280 = *(_DWORD **)(v1279 + 8);
                        v1283 = (void *)(v1279 + 16);
                        unint64_t v1282 = *(void *)(v1279 + 16);
                        if ((unint64_t)v1280 >= v1282)
                        {
                          v1285 = *(_DWORD **)v1279;
                          uint64_t v1286 = ((uint64_t)v1280 - *(void *)v1279) >> 2;
                          unint64_t v1287 = v1286 + 1;
                          if ((unint64_t)(v1286 + 1) >> 62) {
                            sub_566C();
                          }
                          uint64_t v1288 = v1282 - (void)v1285;
                          if (v1288 >> 1 > v1287) {
                            unint64_t v1287 = v1288 >> 1;
                          }
                          if ((unint64_t)v1288 >= 0x7FFFFFFFFFFFFFFCLL) {
                            unint64_t v1289 = 0x3FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v1289 = v1287;
                          }
                          if (v1289)
                          {
                            v1290 = (char *)sub_458C8((uint64_t)v1283, v1289);
                            v1280 = *v1281;
                            v1285 = *(_DWORD **)v1279;
                          }
                          else
                          {
                            v1290 = 0;
                          }
                          v1418 = &v1290[4 * v1286];
                          *(_DWORD *)v1418 = 17;
                          v1284 = v1418 + 4;
                          while (v1280 != v1285)
                          {
                            int v1419 = *--v1280;
                            *((_DWORD *)v1418 - 1) = v1419;
                            v1418 -= 4;
                          }
                          *(void *)uint64_t v1279 = v1418;
                          *v1281 = v1284;
                          void *v1283 = &v1290[4 * v1289];
                          if (v1285) {
                            operator delete(v1285);
                          }
                        }
                        else
                        {
                          _DWORD *v1280 = 17;
                          v1284 = v1280 + 1;
                        }
                        *v1281 = v1284;
                        if (!*v14)
                        {
LABEL_4125:
                          if ((*((unsigned char *)__p + 2) & 4) == 0) {
                            goto LABEL_4126;
                          }
                          uint64_t v1420 = *v12 + 24 * v13;
                          v1422 = (_DWORD **)(v1420 + 8);
                          v1421 = *(_DWORD **)(v1420 + 8);
                          v1424 = (void *)(v1420 + 16);
                          unint64_t v1423 = *(void *)(v1420 + 16);
                          if ((unint64_t)v1421 >= v1423)
                          {
                            v1426 = *(_DWORD **)v1420;
                            uint64_t v1427 = ((uint64_t)v1421 - *(void *)v1420) >> 2;
                            unint64_t v1428 = v1427 + 1;
                            if ((unint64_t)(v1427 + 1) >> 62) {
                              sub_566C();
                            }
                            uint64_t v1429 = v1423 - (void)v1426;
                            if (v1429 >> 1 > v1428) {
                              unint64_t v1428 = v1429 >> 1;
                            }
                            if ((unint64_t)v1429 >= 0x7FFFFFFFFFFFFFFCLL) {
                              unint64_t v1430 = 0x3FFFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v1430 = v1428;
                            }
                            if (v1430)
                            {
                              v1431 = (char *)sub_458C8((uint64_t)v1424, v1430);
                              v1421 = *v1422;
                              v1426 = *(_DWORD **)v1420;
                            }
                            else
                            {
                              v1431 = 0;
                            }
                            v1561 = &v1431[4 * v1427];
                            *(_DWORD *)v1561 = 18;
                            v1425 = v1561 + 4;
                            while (v1421 != v1426)
                            {
                              int v1562 = *--v1421;
                              *((_DWORD *)v1561 - 1) = v1562;
                              v1561 -= 4;
                            }
                            *(void *)uint64_t v1420 = v1561;
                            *v1422 = v1425;
                            void *v1424 = &v1431[4 * v1430];
                            if (v1426) {
                              operator delete(v1426);
                            }
                          }
                          else
                          {
                            _DWORD *v1421 = 18;
                            v1425 = v1421 + 1;
                          }
                          *v1422 = v1425;
                          if (!*v14)
                          {
LABEL_4126:
                            if ((*((unsigned char *)__p + 2) & 8) == 0) {
                              goto LABEL_4127;
                            }
                            uint64_t v1563 = *v12 + 24 * v13;
                            v1565 = (_DWORD **)(v1563 + 8);
                            v1564 = *(_DWORD **)(v1563 + 8);
                            v1567 = (void *)(v1563 + 16);
                            unint64_t v1566 = *(void *)(v1563 + 16);
                            if ((unint64_t)v1564 >= v1566)
                            {
                              v1569 = *(_DWORD **)v1563;
                              uint64_t v1570 = ((uint64_t)v1564 - *(void *)v1563) >> 2;
                              unint64_t v1571 = v1570 + 1;
                              if ((unint64_t)(v1570 + 1) >> 62) {
                                sub_566C();
                              }
                              uint64_t v1572 = v1566 - (void)v1569;
                              if (v1572 >> 1 > v1571) {
                                unint64_t v1571 = v1572 >> 1;
                              }
                              if ((unint64_t)v1572 >= 0x7FFFFFFFFFFFFFFCLL) {
                                unint64_t v1573 = 0x3FFFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v1573 = v1571;
                              }
                              if (v1573)
                              {
                                v1574 = (char *)sub_458C8((uint64_t)v1567, v1573);
                                v1564 = *v1565;
                                v1569 = *(_DWORD **)v1563;
                              }
                              else
                              {
                                v1574 = 0;
                              }
                              v1693 = &v1574[4 * v1570];
                              *(_DWORD *)v1693 = 19;
                              v1568 = v1693 + 4;
                              while (v1564 != v1569)
                              {
                                int v1694 = *--v1564;
                                *((_DWORD *)v1693 - 1) = v1694;
                                v1693 -= 4;
                              }
                              *(void *)uint64_t v1563 = v1693;
                              *v1565 = v1568;
                              void *v1567 = &v1574[4 * v1573];
                              if (v1569) {
                                operator delete(v1569);
                              }
                            }
                            else
                            {
                              _DWORD *v1564 = 19;
                              v1568 = v1564 + 1;
                            }
                            *v1565 = v1568;
                            if (!*v14)
                            {
LABEL_4127:
                              if ((*((unsigned char *)__p + 2) & 0x10) == 0) {
                                goto LABEL_4128;
                              }
                              uint64_t v1695 = *v12 + 24 * v13;
                              v1697 = (_DWORD **)(v1695 + 8);
                              v1696 = *(_DWORD **)(v1695 + 8);
                              v1699 = (void *)(v1695 + 16);
                              unint64_t v1698 = *(void *)(v1695 + 16);
                              if ((unint64_t)v1696 >= v1698)
                              {
                                v1701 = *(_DWORD **)v1695;
                                uint64_t v1702 = ((uint64_t)v1696 - *(void *)v1695) >> 2;
                                unint64_t v1703 = v1702 + 1;
                                if ((unint64_t)(v1702 + 1) >> 62) {
                                  sub_566C();
                                }
                                uint64_t v1704 = v1698 - (void)v1701;
                                if (v1704 >> 1 > v1703) {
                                  unint64_t v1703 = v1704 >> 1;
                                }
                                if ((unint64_t)v1704 >= 0x7FFFFFFFFFFFFFFCLL) {
                                  unint64_t v1705 = 0x3FFFFFFFFFFFFFFFLL;
                                }
                                else {
                                  unint64_t v1705 = v1703;
                                }
                                if (v1705)
                                {
                                  v1706 = (char *)sub_458C8((uint64_t)v1699, v1705);
                                  v1696 = *v1697;
                                  v1701 = *(_DWORD **)v1695;
                                }
                                else
                                {
                                  v1706 = 0;
                                }
                                v1812 = &v1706[4 * v1702];
                                *(_DWORD *)v1812 = 20;
                                v1700 = v1812 + 4;
                                while (v1696 != v1701)
                                {
                                  int v1813 = *--v1696;
                                  *((_DWORD *)v1812 - 1) = v1813;
                                  v1812 -= 4;
                                }
                                *(void *)uint64_t v1695 = v1812;
                                *v1697 = v1700;
                                void *v1699 = &v1706[4 * v1705];
                                if (v1701) {
                                  operator delete(v1701);
                                }
                              }
                              else
                              {
                                _DWORD *v1696 = 20;
                                v1700 = v1696 + 1;
                              }
                              *v1697 = v1700;
                              if (!*v14)
                              {
LABEL_4128:
                                if ((*((unsigned char *)__p + 2) & 0x20) == 0) {
                                  goto LABEL_4129;
                                }
                                uint64_t v1814 = *v12 + 24 * v13;
                                v1816 = (_DWORD **)(v1814 + 8);
                                v1815 = *(_DWORD **)(v1814 + 8);
                                v1818 = (void *)(v1814 + 16);
                                unint64_t v1817 = *(void *)(v1814 + 16);
                                if ((unint64_t)v1815 >= v1817)
                                {
                                  v1820 = *(_DWORD **)v1814;
                                  uint64_t v1821 = ((uint64_t)v1815 - *(void *)v1814) >> 2;
                                  unint64_t v1822 = v1821 + 1;
                                  if ((unint64_t)(v1821 + 1) >> 62) {
                                    sub_566C();
                                  }
                                  uint64_t v1823 = v1817 - (void)v1820;
                                  if (v1823 >> 1 > v1822) {
                                    unint64_t v1822 = v1823 >> 1;
                                  }
                                  if ((unint64_t)v1823 >= 0x7FFFFFFFFFFFFFFCLL) {
                                    unint64_t v1824 = 0x3FFFFFFFFFFFFFFFLL;
                                  }
                                  else {
                                    unint64_t v1824 = v1822;
                                  }
                                  if (v1824)
                                  {
                                    v1825 = (char *)sub_458C8((uint64_t)v1818, v1824);
                                    v1815 = *v1816;
                                    v1820 = *(_DWORD **)v1814;
                                  }
                                  else
                                  {
                                    v1825 = 0;
                                  }
                                  v1914 = &v1825[4 * v1821];
                                  *(_DWORD *)v1914 = 21;
                                  v1819 = v1914 + 4;
                                  while (v1815 != v1820)
                                  {
                                    int v1915 = *--v1815;
                                    *((_DWORD *)v1914 - 1) = v1915;
                                    v1914 -= 4;
                                  }
                                  *(void *)uint64_t v1814 = v1914;
                                  *v1816 = v1819;
                                  void *v1818 = &v1825[4 * v1824];
                                  if (v1820) {
                                    operator delete(v1820);
                                  }
                                }
                                else
                                {
                                  _DWORD *v1815 = 21;
                                  v1819 = v1815 + 1;
                                }
                                *v1816 = v1819;
                                if (!*v14)
                                {
LABEL_4129:
                                  if ((*((unsigned char *)__p + 2) & 0x40) == 0) {
                                    goto LABEL_4130;
                                  }
                                  uint64_t v1916 = *v12 + 24 * v13;
                                  v1918 = (_DWORD **)(v1916 + 8);
                                  v1917 = *(_DWORD **)(v1916 + 8);
                                  v1920 = (void *)(v1916 + 16);
                                  unint64_t v1919 = *(void *)(v1916 + 16);
                                  if ((unint64_t)v1917 >= v1919)
                                  {
                                    v1922 = *(_DWORD **)v1916;
                                    uint64_t v1923 = ((uint64_t)v1917 - *(void *)v1916) >> 2;
                                    unint64_t v1924 = v1923 + 1;
                                    if ((unint64_t)(v1923 + 1) >> 62) {
                                      sub_566C();
                                    }
                                    uint64_t v1925 = v1919 - (void)v1922;
                                    if (v1925 >> 1 > v1924) {
                                      unint64_t v1924 = v1925 >> 1;
                                    }
                                    if ((unint64_t)v1925 >= 0x7FFFFFFFFFFFFFFCLL) {
                                      unint64_t v1926 = 0x3FFFFFFFFFFFFFFFLL;
                                    }
                                    else {
                                      unint64_t v1926 = v1924;
                                    }
                                    if (v1926)
                                    {
                                      v1927 = (char *)sub_458C8((uint64_t)v1920, v1926);
                                      v1917 = *v1918;
                                      v1922 = *(_DWORD **)v1916;
                                    }
                                    else
                                    {
                                      v1927 = 0;
                                    }
                                    v2012 = &v1927[4 * v1923];
                                    *(_DWORD *)v2012 = 22;
                                    v1921 = v2012 + 4;
                                    while (v1917 != v1922)
                                    {
                                      int v2013 = *--v1917;
                                      *((_DWORD *)v2012 - 1) = v2013;
                                      v2012 -= 4;
                                    }
                                    *(void *)uint64_t v1916 = v2012;
                                    *v1918 = v1921;
                                    void *v1920 = &v1927[4 * v1926];
                                    if (v1922) {
                                      operator delete(v1922);
                                    }
                                  }
                                  else
                                  {
                                    _DWORD *v1917 = 22;
                                    v1921 = v1917 + 1;
                                  }
                                  *v1918 = v1921;
                                  if (!*v14)
                                  {
LABEL_4130:
                                    if ((*((unsigned char *)__p + 2) & 0x80) != 0)
                                    {
                                      uint64_t v1723 = *v12 + 24 * v13;
                                      v1725 = (int **)(v1723 + 8);
                                      v1724 = *(int **)(v1723 + 8);
                                      v1727 = (void *)(v1723 + 16);
                                      unint64_t v2014 = *(void *)(v1723 + 16);
                                      if ((unint64_t)v1724 < v2014)
                                      {
                                        int v1728 = 23;
                                        goto LABEL_2631;
                                      }
                                      v1729 = *(int **)v1723;
                                      uint64_t v2015 = ((uint64_t)v1724 - *(void *)v1723) >> 2;
                                      unint64_t v2016 = v2015 + 1;
                                      if ((unint64_t)(v2015 + 1) >> 62) {
                                        sub_566C();
                                      }
                                      uint64_t v2017 = v2014 - (void)v1729;
                                      if (v2017 >> 1 > v2016) {
                                        unint64_t v2016 = v2017 >> 1;
                                      }
                                      if ((unint64_t)v2017 >= 0x7FFFFFFFFFFFFFFCLL) {
                                        unint64_t v1733 = 0x3FFFFFFFFFFFFFFFLL;
                                      }
                                      else {
                                        unint64_t v1733 = v2016;
                                      }
                                      if (v1733)
                                      {
                                        v1734 = (char *)sub_458C8((uint64_t)v1727, v1733);
                                        v1724 = *v1725;
                                        v1729 = *(int **)v1723;
                                      }
                                      else
                                      {
                                        v1734 = 0;
                                      }
                                      v1840 = &v1734[4 * v2015];
                                      *(_DWORD *)v1840 = 23;
                                      v1841 = (int *)(v1840 + 4);
                                      while (v1724 != v1729)
                                      {
                                        int v2102 = *--v1724;
                                        *((_DWORD *)v1840 - 1) = v2102;
                                        v1840 -= 4;
                                      }
                                      goto LABEL_3843;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          break;
        case 4:
          if (!*v14)
          {
            if ((*(unsigned char *)__p & 1) == 0) {
              goto LABEL_270;
            }
            uint64_t v33 = *v12 + 24 * v13;
            uint64_t v35 = (_DWORD **)(v33 + 8);
            uint64_t v34 = *(_DWORD **)(v33 + 8);
            uint64_t v37 = (void *)(v33 + 16);
            unint64_t v36 = *(void *)(v33 + 16);
            if ((unint64_t)v34 >= v36)
            {
              unint64_t v135 = *(_DWORD **)v33;
              uint64_t v136 = ((uint64_t)v34 - *(void *)v33) >> 2;
              unint64_t v137 = v136 + 1;
              if ((unint64_t)(v136 + 1) >> 62) {
                sub_566C();
              }
              uint64_t v138 = v36 - (void)v135;
              if (v138 >> 1 > v137) {
                unint64_t v137 = v138 >> 1;
              }
              if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v139 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v139 = v137;
              }
              if (v139)
              {
                unint64_t v140 = (char *)sub_458C8((uint64_t)v37, v139);
                uint64_t v34 = *v35;
                unint64_t v135 = *(_DWORD **)v33;
              }
              else
              {
                unint64_t v140 = 0;
              }
              uint64_t v259 = &v140[4 * v136];
              *(_DWORD *)uint64_t v259 = 0;
              unint64_t v38 = v259 + 4;
              while (v34 != v135)
              {
                int v260 = *--v34;
                *((_DWORD *)v259 - 1) = v260;
                v259 -= 4;
              }
              *(void *)uint64_t v33 = v259;
              unsigned char *v35 = v38;
              *uint64_t v37 = &v140[4 * v139];
              if (v135) {
                operator delete(v135);
              }
            }
            else
            {
              _DWORD *v34 = 0;
              unint64_t v38 = v34 + 1;
            }
            unsigned char *v35 = v38;
            if (!*v14)
            {
LABEL_270:
              if ((*(unsigned char *)__p & 2) == 0) {
                goto LABEL_2310;
              }
              uint64_t v261 = *v12 + 24 * v13;
              unint64_t v263 = (_DWORD **)(v261 + 8);
              unint64_t v262 = *(_DWORD **)(v261 + 8);
              uint64_t v265 = (void *)(v261 + 16);
              unint64_t v264 = *(void *)(v261 + 16);
              if ((unint64_t)v262 >= v264)
              {
                unint64_t v267 = *(_DWORD **)v261;
                uint64_t v268 = ((uint64_t)v262 - *(void *)v261) >> 2;
                unint64_t v269 = v268 + 1;
                if ((unint64_t)(v268 + 1) >> 62) {
                  sub_566C();
                }
                uint64_t v270 = v264 - (void)v267;
                if (v270 >> 1 > v269) {
                  unint64_t v269 = v270 >> 1;
                }
                if ((unint64_t)v270 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v271 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v271 = v269;
                }
                if (v271)
                {
                  int v272 = (char *)sub_458C8((uint64_t)v265, v271);
                  unint64_t v262 = *v263;
                  unint64_t v267 = *(_DWORD **)v261;
                }
                else
                {
                  int v272 = 0;
                }
                v476 = &v272[4 * v268];
                *(_DWORD *)v476 = 1;
                uint64_t v266 = v476 + 4;
                while (v262 != v267)
                {
                  int v477 = *--v262;
                  *((_DWORD *)v476 - 1) = v477;
                  v476 -= 4;
                }
                *(void *)uint64_t v261 = v476;
                _DWORD *v263 = v266;
                *uint64_t v265 = &v272[4 * v271];
                if (v267) {
                  operator delete(v267);
                }
              }
              else
              {
                *unint64_t v262 = 1;
                uint64_t v266 = v262 + 1;
              }
              _DWORD *v263 = v266;
              if (!*v14)
              {
LABEL_2310:
                if ((*(unsigned char *)__p & 4) == 0) {
                  goto LABEL_4131;
                }
                uint64_t v478 = *v12 + 24 * v13;
                unint64_t v480 = (_DWORD **)(v478 + 8);
                v479 = *(_DWORD **)(v478 + 8);
                uint64_t v482 = (void *)(v478 + 16);
                unint64_t v481 = *(void *)(v478 + 16);
                if ((unint64_t)v479 >= v481)
                {
                  v484 = *(_DWORD **)v478;
                  uint64_t v485 = ((uint64_t)v479 - *(void *)v478) >> 2;
                  unint64_t v486 = v485 + 1;
                  if ((unint64_t)(v485 + 1) >> 62) {
                    sub_566C();
                  }
                  uint64_t v487 = v481 - (void)v484;
                  if (v487 >> 1 > v486) {
                    unint64_t v486 = v487 >> 1;
                  }
                  if ((unint64_t)v487 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v488 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v488 = v486;
                  }
                  if (v488)
                  {
                    v489 = (char *)sub_458C8((uint64_t)v482, v488);
                    v479 = *v480;
                    v484 = *(_DWORD **)v478;
                  }
                  else
                  {
                    v489 = 0;
                  }
                  v678 = &v489[4 * v485];
                  *(_DWORD *)v678 = 2;
                  uint64_t v483 = v678 + 4;
                  while (v479 != v484)
                  {
                    int v679 = *--v479;
                    *((_DWORD *)v678 - 1) = v679;
                    v678 -= 4;
                  }
                  *(void *)uint64_t v478 = v678;
                  *unint64_t v480 = v483;
                  *uint64_t v482 = &v489[4 * v488];
                  if (v484) {
                    operator delete(v484);
                  }
                }
                else
                {
                  _DWORD *v479 = 2;
                  uint64_t v483 = v479 + 1;
                }
                *unint64_t v480 = v483;
                if (!*v14)
                {
LABEL_4131:
                  if ((*(unsigned char *)__p & 8) == 0) {
                    goto LABEL_4132;
                  }
                  uint64_t v680 = *v12 + 24 * v13;
                  v682 = (_DWORD **)(v680 + 8);
                  v681 = *(_DWORD **)(v680 + 8);
                  v684 = (void *)(v680 + 16);
                  unint64_t v683 = *(void *)(v680 + 16);
                  if ((unint64_t)v681 >= v683)
                  {
                    v686 = *(_DWORD **)v680;
                    uint64_t v687 = ((uint64_t)v681 - *(void *)v680) >> 2;
                    unint64_t v688 = v687 + 1;
                    if ((unint64_t)(v687 + 1) >> 62) {
                      sub_566C();
                    }
                    uint64_t v689 = v683 - (void)v686;
                    if (v689 >> 1 > v688) {
                      unint64_t v688 = v689 >> 1;
                    }
                    if ((unint64_t)v689 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v690 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v690 = v688;
                    }
                    if (v690)
                    {
                      v691 = (char *)sub_458C8((uint64_t)v684, v690);
                      v681 = *v682;
                      v686 = *(_DWORD **)v680;
                    }
                    else
                    {
                      v691 = 0;
                    }
                    v867 = &v691[4 * v687];
                    *(_DWORD *)v867 = 3;
                    v685 = v867 + 4;
                    while (v681 != v686)
                    {
                      int v868 = *--v681;
                      *((_DWORD *)v867 - 1) = v868;
                      v867 -= 4;
                    }
                    *(void *)uint64_t v680 = v867;
                    *v682 = v685;
                    void *v684 = &v691[4 * v690];
                    if (v686) {
                      operator delete(v686);
                    }
                  }
                  else
                  {
                    _DWORD *v681 = 3;
                    v685 = v681 + 1;
                  }
                  *v682 = v685;
                  if (!*v14)
                  {
LABEL_4132:
                    if ((*(unsigned char *)__p & 0x10) == 0) {
                      goto LABEL_4133;
                    }
                    uint64_t v869 = *v12 + 24 * v13;
                    v871 = (_DWORD **)(v869 + 8);
                    v870 = *(_DWORD **)(v869 + 8);
                    v873 = (void *)(v869 + 16);
                    unint64_t v872 = *(void *)(v869 + 16);
                    if ((unint64_t)v870 >= v872)
                    {
                      v875 = *(_DWORD **)v869;
                      uint64_t v876 = ((uint64_t)v870 - *(void *)v869) >> 2;
                      unint64_t v877 = v876 + 1;
                      if ((unint64_t)(v876 + 1) >> 62) {
                        sub_566C();
                      }
                      uint64_t v878 = v872 - (void)v875;
                      if (v878 >> 1 > v877) {
                        unint64_t v877 = v878 >> 1;
                      }
                      if ((unint64_t)v878 >= 0x7FFFFFFFFFFFFFFCLL) {
                        unint64_t v879 = 0x3FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v879 = v877;
                      }
                      if (v879)
                      {
                        v880 = (char *)sub_458C8((uint64_t)v873, v879);
                        v870 = *v871;
                        v875 = *(_DWORD **)v869;
                      }
                      else
                      {
                        v880 = 0;
                      }
                      v1042 = &v880[4 * v876];
                      *(_DWORD *)v1042 = 4;
                      v874 = v1042 + 4;
                      while (v870 != v875)
                      {
                        int v1043 = *--v870;
                        *((_DWORD *)v1042 - 1) = v1043;
                        v1042 -= 4;
                      }
                      *(void *)uint64_t v869 = v1042;
                      *v871 = v874;
                      void *v873 = &v880[4 * v879];
                      if (v875) {
                        operator delete(v875);
                      }
                    }
                    else
                    {
                      _DWORD *v870 = 4;
                      v874 = v870 + 1;
                    }
                    *v871 = v874;
                    if (!*v14)
                    {
LABEL_4133:
                      if ((*(unsigned char *)__p & 0x20) == 0) {
                        goto LABEL_4134;
                      }
                      uint64_t v1044 = *v12 + 24 * v13;
                      v1046 = (_DWORD **)(v1044 + 8);
                      v1045 = *(_DWORD **)(v1044 + 8);
                      v1048 = (void *)(v1044 + 16);
                      unint64_t v1047 = *(void *)(v1044 + 16);
                      if ((unint64_t)v1045 >= v1047)
                      {
                        v1050 = *(_DWORD **)v1044;
                        uint64_t v1051 = ((uint64_t)v1045 - *(void *)v1044) >> 2;
                        unint64_t v1052 = v1051 + 1;
                        if ((unint64_t)(v1051 + 1) >> 62) {
                          sub_566C();
                        }
                        uint64_t v1053 = v1047 - (void)v1050;
                        if (v1053 >> 1 > v1052) {
                          unint64_t v1052 = v1053 >> 1;
                        }
                        if ((unint64_t)v1053 >= 0x7FFFFFFFFFFFFFFCLL) {
                          unint64_t v1054 = 0x3FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v1054 = v1052;
                        }
                        if (v1054)
                        {
                          v1055 = (char *)sub_458C8((uint64_t)v1048, v1054);
                          v1045 = *v1046;
                          v1050 = *(_DWORD **)v1044;
                        }
                        else
                        {
                          v1055 = 0;
                        }
                        v1203 = &v1055[4 * v1051];
                        *(_DWORD *)v1203 = 5;
                        v1049 = v1203 + 4;
                        while (v1045 != v1050)
                        {
                          int v1204 = *--v1045;
                          *((_DWORD *)v1203 - 1) = v1204;
                          v1203 -= 4;
                        }
                        *(void *)uint64_t v1044 = v1203;
                        *v1046 = v1049;
                        void *v1048 = &v1055[4 * v1054];
                        if (v1050) {
                          operator delete(v1050);
                        }
                      }
                      else
                      {
                        _DWORD *v1045 = 5;
                        v1049 = v1045 + 1;
                      }
                      *v1046 = v1049;
                      if (!*v14)
                      {
LABEL_4134:
                        if ((*(unsigned char *)__p & 0x40) == 0) {
                          goto LABEL_4135;
                        }
                        uint64_t v1205 = *v12 + 24 * v13;
                        v1207 = (_DWORD **)(v1205 + 8);
                        v1206 = *(_DWORD **)(v1205 + 8);
                        v1209 = (void *)(v1205 + 16);
                        unint64_t v1208 = *(void *)(v1205 + 16);
                        if ((unint64_t)v1206 >= v1208)
                        {
                          v1211 = *(_DWORD **)v1205;
                          uint64_t v1212 = ((uint64_t)v1206 - *(void *)v1205) >> 2;
                          unint64_t v1213 = v1212 + 1;
                          if ((unint64_t)(v1212 + 1) >> 62) {
                            sub_566C();
                          }
                          uint64_t v1214 = v1208 - (void)v1211;
                          if (v1214 >> 1 > v1213) {
                            unint64_t v1213 = v1214 >> 1;
                          }
                          if ((unint64_t)v1214 >= 0x7FFFFFFFFFFFFFFCLL) {
                            unint64_t v1215 = 0x3FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v1215 = v1213;
                          }
                          if (v1215)
                          {
                            v1216 = (char *)sub_458C8((uint64_t)v1209, v1215);
                            v1206 = *v1207;
                            v1211 = *(_DWORD **)v1205;
                          }
                          else
                          {
                            v1216 = 0;
                          }
                          v1362 = &v1216[4 * v1212];
                          *(_DWORD *)v1362 = 6;
                          v1210 = v1362 + 4;
                          while (v1206 != v1211)
                          {
                            int v1363 = *--v1206;
                            *((_DWORD *)v1362 - 1) = v1363;
                            v1362 -= 4;
                          }
                          *(void *)uint64_t v1205 = v1362;
                          *v1207 = v1210;
                          void *v1209 = &v1216[4 * v1215];
                          if (v1211) {
                            operator delete(v1211);
                          }
                        }
                        else
                        {
                          _DWORD *v1206 = 6;
                          v1210 = v1206 + 1;
                        }
                        *v1207 = v1210;
                        if (!*v14)
                        {
LABEL_4135:
                          if ((*(unsigned char *)__p & 0x80) == 0) {
                            goto LABEL_4136;
                          }
                          uint64_t v1364 = *v12 + 24 * v13;
                          v1366 = (_DWORD **)(v1364 + 8);
                          v1365 = *(_DWORD **)(v1364 + 8);
                          v1368 = (void *)(v1364 + 16);
                          unint64_t v1367 = *(void *)(v1364 + 16);
                          if ((unint64_t)v1365 >= v1367)
                          {
                            v1370 = *(_DWORD **)v1364;
                            uint64_t v1371 = ((uint64_t)v1365 - *(void *)v1364) >> 2;
                            unint64_t v1372 = v1371 + 1;
                            if ((unint64_t)(v1371 + 1) >> 62) {
                              sub_566C();
                            }
                            uint64_t v1373 = v1367 - (void)v1370;
                            if (v1373 >> 1 > v1372) {
                              unint64_t v1372 = v1373 >> 1;
                            }
                            if ((unint64_t)v1373 >= 0x7FFFFFFFFFFFFFFCLL) {
                              unint64_t v1374 = 0x3FFFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v1374 = v1372;
                            }
                            if (v1374)
                            {
                              v1375 = (char *)sub_458C8((uint64_t)v1368, v1374);
                              v1365 = *v1366;
                              v1370 = *(_DWORD **)v1364;
                            }
                            else
                            {
                              v1375 = 0;
                            }
                            v1505 = &v1375[4 * v1371];
                            *(_DWORD *)v1505 = 7;
                            v1369 = v1505 + 4;
                            while (v1365 != v1370)
                            {
                              int v1506 = *--v1365;
                              *((_DWORD *)v1505 - 1) = v1506;
                              v1505 -= 4;
                            }
                            *(void *)uint64_t v1364 = v1505;
                            *v1366 = v1369;
                            void *v1368 = &v1375[4 * v1374];
                            if (v1370) {
                              operator delete(v1370);
                            }
                          }
                          else
                          {
                            _DWORD *v1365 = 7;
                            v1369 = v1365 + 1;
                          }
                          *v1366 = v1369;
                          if (!*v14)
                          {
LABEL_4136:
                            if ((*((unsigned char *)__p + 1) & 1) == 0) {
                              goto LABEL_4137;
                            }
                            uint64_t v1507 = *v12 + 24 * v13;
                            v1509 = (_DWORD **)(v1507 + 8);
                            v1508 = *(_DWORD **)(v1507 + 8);
                            v1511 = (void *)(v1507 + 16);
                            unint64_t v1510 = *(void *)(v1507 + 16);
                            if ((unint64_t)v1508 >= v1510)
                            {
                              v1513 = *(_DWORD **)v1507;
                              uint64_t v1514 = ((uint64_t)v1508 - *(void *)v1507) >> 2;
                              unint64_t v1515 = v1514 + 1;
                              if ((unint64_t)(v1514 + 1) >> 62) {
                                sub_566C();
                              }
                              uint64_t v1516 = v1510 - (void)v1513;
                              if (v1516 >> 1 > v1515) {
                                unint64_t v1515 = v1516 >> 1;
                              }
                              if ((unint64_t)v1516 >= 0x7FFFFFFFFFFFFFFCLL) {
                                unint64_t v1517 = 0x3FFFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v1517 = v1515;
                              }
                              if (v1517)
                              {
                                v1518 = (char *)sub_458C8((uint64_t)v1511, v1517);
                                v1508 = *v1509;
                                v1513 = *(_DWORD **)v1507;
                              }
                              else
                              {
                                v1518 = 0;
                              }
                              v1645 = &v1518[4 * v1514];
                              *(_DWORD *)v1645 = 8;
                              v1512 = v1645 + 4;
                              while (v1508 != v1513)
                              {
                                int v1646 = *--v1508;
                                *((_DWORD *)v1645 - 1) = v1646;
                                v1645 -= 4;
                              }
                              *(void *)uint64_t v1507 = v1645;
                              *v1509 = v1512;
                              void *v1511 = &v1518[4 * v1517];
                              if (v1513) {
                                operator delete(v1513);
                              }
                            }
                            else
                            {
                              _DWORD *v1508 = 8;
                              v1512 = v1508 + 1;
                            }
                            *v1509 = v1512;
                            if (!*v14)
                            {
LABEL_4137:
                              if ((*((unsigned char *)__p + 1) & 2) == 0) {
                                goto LABEL_4138;
                              }
                              uint64_t v1647 = *v12 + 24 * v13;
                              v1649 = (_DWORD **)(v1647 + 8);
                              v1648 = *(_DWORD **)(v1647 + 8);
                              v1651 = (void *)(v1647 + 16);
                              unint64_t v1650 = *(void *)(v1647 + 16);
                              if ((unint64_t)v1648 >= v1650)
                              {
                                v1653 = *(_DWORD **)v1647;
                                uint64_t v1654 = ((uint64_t)v1648 - *(void *)v1647) >> 2;
                                unint64_t v1655 = v1654 + 1;
                                if ((unint64_t)(v1654 + 1) >> 62) {
                                  sub_566C();
                                }
                                uint64_t v1656 = v1650 - (void)v1653;
                                if (v1656 >> 1 > v1655) {
                                  unint64_t v1655 = v1656 >> 1;
                                }
                                if ((unint64_t)v1656 >= 0x7FFFFFFFFFFFFFFCLL) {
                                  unint64_t v1657 = 0x3FFFFFFFFFFFFFFFLL;
                                }
                                else {
                                  unint64_t v1657 = v1655;
                                }
                                if (v1657)
                                {
                                  v1658 = (char *)sub_458C8((uint64_t)v1651, v1657);
                                  v1648 = *v1649;
                                  v1653 = *(_DWORD **)v1647;
                                }
                                else
                                {
                                  v1658 = 0;
                                }
                                v1777 = &v1658[4 * v1654];
                                *(_DWORD *)v1777 = 9;
                                v1652 = v1777 + 4;
                                while (v1648 != v1653)
                                {
                                  int v1778 = *--v1648;
                                  *((_DWORD *)v1777 - 1) = v1778;
                                  v1777 -= 4;
                                }
                                *(void *)uint64_t v1647 = v1777;
                                *v1649 = v1652;
                                void *v1651 = &v1658[4 * v1657];
                                if (v1653) {
                                  operator delete(v1653);
                                }
                              }
                              else
                              {
                                _DWORD *v1648 = 9;
                                v1652 = v1648 + 1;
                              }
                              *v1649 = v1652;
                              if (!*v14)
                              {
LABEL_4138:
                                if ((*((unsigned char *)__p + 1) & 4) != 0)
                                {
                                  uint64_t v1723 = *v12 + 24 * v13;
                                  v1725 = (int **)(v1723 + 8);
                                  v1724 = *(int **)(v1723 + 8);
                                  v1727 = (void *)(v1723 + 16);
                                  unint64_t v1779 = *(void *)(v1723 + 16);
                                  if ((unint64_t)v1724 >= v1779)
                                  {
                                    v1729 = *(int **)v1723;
                                    uint64_t v1780 = ((uint64_t)v1724 - *(void *)v1723) >> 2;
                                    unint64_t v1781 = v1780 + 1;
                                    if ((unint64_t)(v1780 + 1) >> 62) {
                                      sub_566C();
                                    }
                                    uint64_t v1782 = v1779 - (void)v1729;
                                    if (v1782 >> 1 > v1781) {
                                      unint64_t v1781 = v1782 >> 1;
                                    }
                                    if ((unint64_t)v1782 >= 0x7FFFFFFFFFFFFFFCLL) {
                                      unint64_t v1733 = 0x3FFFFFFFFFFFFFFFLL;
                                    }
                                    else {
                                      unint64_t v1733 = v1781;
                                    }
                                    if (v1733)
                                    {
                                      v1734 = (char *)sub_458C8((uint64_t)v1727, v1733);
                                      v1724 = *v1725;
                                      v1729 = *(int **)v1723;
                                    }
                                    else
                                    {
                                      v1734 = 0;
                                    }
                                    v1840 = &v1734[4 * v1780];
                                    *(_DWORD *)v1840 = 10;
                                    v1841 = (int *)(v1840 + 4);
                                    while (v1724 != v1729)
                                    {
                                      int v1885 = *--v1724;
                                      *((_DWORD *)v1840 - 1) = v1885;
                                      v1840 -= 4;
                                    }
LABEL_3843:
                                    *(void *)uint64_t v1723 = v1840;
                                    *v1725 = v1841;
                                    void *v1727 = &v1734[4 * v1733];
                                    if (v1729) {
                                      operator delete(v1729);
                                    }
                                  }
                                  else
                                  {
                                    int v1728 = 10;
LABEL_2631:
                                    int *v1724 = v1728;
                                    v1841 = v1724 + 1;
                                  }
                                  *v1725 = v1841;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          break;
        case 5:
          if (!*v14)
          {
            if ((*((unsigned char *)__p + 26) & 4) == 0) {
              goto LABEL_414;
            }
            uint64_t v81 = *v12 + 24 * v13;
            BOOL v83 = (_DWORD **)(v81 + 8);
            unsigned int v82 = *(_DWORD **)(v81 + 8);
            char v85 = (void *)(v81 + 16);
            unint64_t v84 = *(void *)(v81 + 16);
            if ((unint64_t)v82 >= v84)
            {
              uint64_t v183 = *(_DWORD **)v81;
              uint64_t v184 = ((uint64_t)v82 - *(void *)v81) >> 2;
              unint64_t v185 = v184 + 1;
              if ((unint64_t)(v184 + 1) >> 62) {
                sub_566C();
              }
              uint64_t v186 = v84 - (void)v183;
              if (v186 >> 1 > v185) {
                unint64_t v185 = v186 >> 1;
              }
              if ((unint64_t)v186 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v187 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v187 = v185;
              }
              if (v187)
              {
                unint64_t v188 = (char *)sub_458C8((uint64_t)v85, v187);
                unsigned int v82 = *v83;
                uint64_t v183 = *(_DWORD **)v81;
              }
              else
              {
                unint64_t v188 = 0;
              }
              uint64_t v371 = &v188[4 * v184];
              *(_DWORD *)uint64_t v371 = 210;
              unsigned int v86 = v371 + 4;
              while (v82 != v183)
              {
                int v372 = *--v82;
                *((_DWORD *)v371 - 1) = v372;
                v371 -= 4;
              }
              *(void *)uint64_t v81 = v371;
              *BOOL v83 = v86;
              *char v85 = &v188[4 * v187];
              if (v183) {
                operator delete(v183);
              }
            }
            else
            {
              *unsigned int v82 = 210;
              unsigned int v86 = v82 + 1;
            }
            *BOOL v83 = v86;
            if (!*v14)
            {
LABEL_414:
              if ((*((unsigned char *)__p + 26) & 8) == 0) {
                goto LABEL_974;
              }
              uint64_t v373 = *v12 + 24 * v13;
              uint64_t v375 = (_DWORD **)(v373 + 8);
              unint64_t v374 = *(_DWORD **)(v373 + 8);
              int v377 = (void *)(v373 + 16);
              unint64_t v376 = *(void *)(v373 + 16);
              if ((unint64_t)v374 >= v376)
              {
                uint64_t v379 = *(_DWORD **)v373;
                uint64_t v380 = ((uint64_t)v374 - *(void *)v373) >> 2;
                unint64_t v381 = v380 + 1;
                if ((unint64_t)(v380 + 1) >> 62) {
                  sub_566C();
                }
                uint64_t v382 = v376 - (void)v379;
                if (v382 >> 1 > v381) {
                  unint64_t v381 = v382 >> 1;
                }
                if ((unint64_t)v382 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v383 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v383 = v381;
                }
                if (v383)
                {
                  unint64_t v384 = (char *)sub_458C8((uint64_t)v377, v383);
                  unint64_t v374 = *v375;
                  uint64_t v379 = *(_DWORD **)v373;
                }
                else
                {
                  unint64_t v384 = 0;
                }
                v588 = &v384[4 * v380];
                *(_DWORD *)v588 = 211;
                v378 = v588 + 4;
                while (v374 != v379)
                {
                  int v589 = *--v374;
                  *((_DWORD *)v588 - 1) = v589;
                  v588 -= 4;
                }
                *(void *)uint64_t v373 = v588;
                char *v375 = v378;
                *int v377 = &v384[4 * v383];
                if (v379) {
                  operator delete(v379);
                }
              }
              else
              {
                _DWORD *v374 = 211;
                v378 = v374 + 1;
              }
              char *v375 = v378;
              if (!*v14)
              {
LABEL_974:
                if ((*((unsigned char *)__p + 26) & 0x10) == 0) {
                  goto LABEL_4139;
                }
                uint64_t v590 = *v12 + 24 * v13;
                v592 = (_DWORD **)(v590 + 8);
                v591 = *(_DWORD **)(v590 + 8);
                v594 = (void *)(v590 + 16);
                unint64_t v593 = *(void *)(v590 + 16);
                if ((unint64_t)v591 >= v593)
                {
                  v596 = *(_DWORD **)v590;
                  uint64_t v597 = ((uint64_t)v591 - *(void *)v590) >> 2;
                  unint64_t v598 = v597 + 1;
                  if ((unint64_t)(v597 + 1) >> 62) {
                    sub_566C();
                  }
                  uint64_t v599 = v593 - (void)v596;
                  if (v599 >> 1 > v598) {
                    unint64_t v598 = v599 >> 1;
                  }
                  if ((unint64_t)v599 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v600 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v600 = v598;
                  }
                  if (v600)
                  {
                    v601 = (char *)sub_458C8((uint64_t)v594, v600);
                    v591 = *v592;
                    v596 = *(_DWORD **)v590;
                  }
                  else
                  {
                    v601 = 0;
                  }
                  v790 = &v601[4 * v597];
                  *(_DWORD *)v790 = 212;
                  v595 = v790 + 4;
                  while (v591 != v596)
                  {
                    int v791 = *--v591;
                    *((_DWORD *)v790 - 1) = v791;
                    v790 -= 4;
                  }
                  *(void *)uint64_t v590 = v790;
                  *v592 = v595;
                  void *v594 = &v601[4 * v600];
                  if (v596) {
                    operator delete(v596);
                  }
                }
                else
                {
                  _DWORD *v591 = 212;
                  v595 = v591 + 1;
                }
                *v592 = v595;
                if (!*v14)
                {
LABEL_4139:
                  if ((*((unsigned char *)__p + 26) & 0x20) != 0)
                  {
                    uint64_t v247 = *v12 + 24 * v13;
                    uint64_t v249 = (int **)(v247 + 8);
                    int v248 = *(int **)(v247 + 8);
                    uint64_t v251 = (void *)(v247 + 16);
                    unint64_t v792 = *(void *)(v247 + 16);
                    if ((unint64_t)v248 < v792)
                    {
                      int v252 = 213;
                      goto LABEL_2186;
                    }
                    uint64_t v253 = *(int **)v247;
                    uint64_t v793 = ((uint64_t)v248 - *(void *)v247) >> 2;
                    unint64_t v794 = v793 + 1;
                    if ((unint64_t)(v793 + 1) >> 62) {
                      sub_566C();
                    }
                    uint64_t v795 = v792 - (void)v253;
                    if (v795 >> 1 > v794) {
                      unint64_t v794 = v795 >> 1;
                    }
                    if ((unint64_t)v795 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v257 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v257 = v794;
                    }
                    if (v257)
                    {
                      unint64_t v258 = (char *)sub_458C8((uint64_t)v251, v257);
                      int v248 = *v249;
                      uint64_t v253 = *(int **)v247;
                    }
                    else
                    {
                      unint64_t v258 = 0;
                    }
                    unint64_t v473 = &v258[4 * v793];
                    *(_DWORD *)unint64_t v473 = 213;
                    unint64_t v474 = (int *)(v473 + 4);
                    while (v248 != v253)
                    {
                      int v979 = *--v248;
                      *((_DWORD *)v473 - 1) = v979;
                      v473 -= 4;
                    }
                    goto LABEL_3834;
                  }
                }
              }
            }
          }
          break;
        case 6:
          if (!*v14)
          {
            if ((*((unsigned char *)__p + 21) & 8) == 0) {
              goto LABEL_450;
            }
            uint64_t v93 = *v12 + 24 * v13;
            uint64_t v95 = (_DWORD **)(v93 + 8);
            uint64_t v94 = *(_DWORD **)(v93 + 8);
            uint64_t v97 = (void *)(v93 + 16);
            unint64_t v96 = *(void *)(v93 + 16);
            if ((unint64_t)v94 >= v96)
            {
              uint64_t v195 = *(_DWORD **)v93;
              uint64_t v196 = ((uint64_t)v94 - *(void *)v93) >> 2;
              unint64_t v197 = v196 + 1;
              if ((unint64_t)(v196 + 1) >> 62) {
                sub_566C();
              }
              uint64_t v198 = v96 - (void)v195;
              if (v198 >> 1 > v197) {
                unint64_t v197 = v198 >> 1;
              }
              if ((unint64_t)v198 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v199 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v199 = v197;
              }
              if (v199)
              {
                uint64_t v200 = (char *)sub_458C8((uint64_t)v97, v199);
                uint64_t v94 = *v95;
                uint64_t v195 = *(_DWORD **)v93;
              }
              else
              {
                uint64_t v200 = 0;
              }
              uint64_t v399 = &v200[4 * v196];
              *(_DWORD *)uint64_t v399 = 171;
              unint64_t v98 = v399 + 4;
              while (v94 != v195)
              {
                int v400 = *--v94;
                *((_DWORD *)v399 - 1) = v400;
                v399 -= 4;
              }
              *(void *)uint64_t v93 = v399;
              char *v95 = v98;
              *uint64_t v97 = &v200[4 * v199];
              if (v195) {
                operator delete(v195);
              }
            }
            else
            {
              _DWORD *v94 = 171;
              unint64_t v98 = v94 + 1;
            }
            char *v95 = v98;
            if (!*v14)
            {
LABEL_450:
              if ((*((unsigned char *)__p + 21) & 0x10) == 0) {
                goto LABEL_3343;
              }
              uint64_t v401 = *v12 + 24 * v13;
              unint64_t v403 = (_DWORD **)(v401 + 8);
              v402 = *(_DWORD **)(v401 + 8);
              uint64_t v405 = (void *)(v401 + 16);
              unint64_t v404 = *(void *)(v401 + 16);
              if ((unint64_t)v402 >= v404)
              {
                unint64_t v407 = *(_DWORD **)v401;
                uint64_t v408 = ((uint64_t)v402 - *(void *)v401) >> 2;
                unint64_t v409 = v408 + 1;
                if ((unint64_t)(v408 + 1) >> 62) {
                  sub_566C();
                }
                uint64_t v410 = v404 - (void)v407;
                if (v410 >> 1 > v409) {
                  unint64_t v409 = v410 >> 1;
                }
                if ((unint64_t)v410 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v411 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v411 = v409;
                }
                if (v411)
                {
                  uint64_t v412 = (char *)sub_458C8((uint64_t)v405, v411);
                  v402 = *v403;
                  unint64_t v407 = *(_DWORD **)v401;
                }
                else
                {
                  uint64_t v412 = 0;
                }
                char v616 = &v412[4 * v408];
                *(_DWORD *)char v616 = 172;
                unint64_t v406 = v616 + 4;
                while (v402 != v407)
                {
                  int v617 = *--v402;
                  *((_DWORD *)v616 - 1) = v617;
                  v616 -= 4;
                }
                *(void *)uint64_t v401 = v616;
                unint64_t *v403 = v406;
                *uint64_t v405 = &v412[4 * v411];
                if (v407) {
                  operator delete(v407);
                }
              }
              else
              {
                _DWORD *v402 = 172;
                unint64_t v406 = v402 + 1;
              }
              unint64_t *v403 = v406;
              if (!*v14)
              {
LABEL_3343:
                if ((*((unsigned char *)__p + 21) & 0x20) == 0) {
                  goto LABEL_4140;
                }
                uint64_t v618 = *v12 + 24 * v13;
                long long v620 = (_DWORD **)(v618 + 8);
                v619 = *(_DWORD **)(v618 + 8);
                v622 = (void *)(v618 + 16);
                unint64_t v621 = *(void *)(v618 + 16);
                if ((unint64_t)v619 >= v621)
                {
                  char v624 = *(_DWORD **)v618;
                  uint64_t v625 = ((uint64_t)v619 - *(void *)v618) >> 2;
                  unint64_t v626 = v625 + 1;
                  if ((unint64_t)(v625 + 1) >> 62) {
                    sub_566C();
                  }
                  uint64_t v627 = v621 - (void)v624;
                  if (v627 >> 1 > v626) {
                    unint64_t v626 = v627 >> 1;
                  }
                  if ((unint64_t)v627 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v628 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v628 = v626;
                  }
                  if (v628)
                  {
                    char v629 = (char *)sub_458C8((uint64_t)v622, v628);
                    v619 = *v620;
                    char v624 = *(_DWORD **)v618;
                  }
                  else
                  {
                    char v629 = 0;
                  }
                  v810 = &v629[4 * v625];
                  *(_DWORD *)v810 = 173;
                  long long v623 = v810 + 4;
                  while (v619 != v624)
                  {
                    int v811 = *--v619;
                    *((_DWORD *)v810 - 1) = v811;
                    v810 -= 4;
                  }
                  *(void *)uint64_t v618 = v810;
                  *long long v620 = v623;
                  void *v622 = &v629[4 * v628];
                  if (v624) {
                    operator delete(v624);
                  }
                }
                else
                {
                  _DWORD *v619 = 173;
                  long long v623 = v619 + 1;
                }
                *long long v620 = v623;
                if (!*v14)
                {
LABEL_4140:
                  if ((*((unsigned char *)__p + 21) & 0x40) == 0) {
                    goto LABEL_4141;
                  }
                  uint64_t v812 = *v12 + 24 * v13;
                  v814 = (_DWORD **)(v812 + 8);
                  v813 = *(_DWORD **)(v812 + 8);
                  v816 = (void *)(v812 + 16);
                  unint64_t v815 = *(void *)(v812 + 16);
                  if ((unint64_t)v813 >= v815)
                  {
                    v818 = *(_DWORD **)v812;
                    uint64_t v819 = ((uint64_t)v813 - *(void *)v812) >> 2;
                    unint64_t v820 = v819 + 1;
                    if ((unint64_t)(v819 + 1) >> 62) {
                      sub_566C();
                    }
                    uint64_t v821 = v815 - (void)v818;
                    if (v821 >> 1 > v820) {
                      unint64_t v820 = v821 >> 1;
                    }
                    if ((unint64_t)v821 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v822 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v822 = v820;
                    }
                    if (v822)
                    {
                      v823 = (char *)sub_458C8((uint64_t)v816, v822);
                      v813 = *v814;
                      v818 = *(_DWORD **)v812;
                    }
                    else
                    {
                      v823 = 0;
                    }
                    v994 = &v823[4 * v819];
                    *(_DWORD *)v994 = 174;
                    v817 = v994 + 4;
                    while (v813 != v818)
                    {
                      int v995 = *--v813;
                      *((_DWORD *)v994 - 1) = v995;
                      v994 -= 4;
                    }
                    *(void *)uint64_t v812 = v994;
                    *v814 = v817;
                    void *v816 = &v823[4 * v822];
                    if (v818) {
                      operator delete(v818);
                    }
                  }
                  else
                  {
                    _DWORD *v813 = 174;
                    v817 = v813 + 1;
                  }
                  *v814 = v817;
                  if (!*v14)
                  {
LABEL_4141:
                    if ((*((unsigned char *)__p + 21) & 0x80) == 0) {
                      goto LABEL_4142;
                    }
                    uint64_t v996 = *v12 + 24 * v13;
                    v998 = (_DWORD **)(v996 + 8);
                    v997 = *(_DWORD **)(v996 + 8);
                    v1000 = (void *)(v996 + 16);
                    unint64_t v999 = *(void *)(v996 + 16);
                    if ((unint64_t)v997 >= v999)
                    {
                      v1002 = *(_DWORD **)v996;
                      uint64_t v1003 = ((uint64_t)v997 - *(void *)v996) >> 2;
                      unint64_t v1004 = v1003 + 1;
                      if ((unint64_t)(v1003 + 1) >> 62) {
                        sub_566C();
                      }
                      uint64_t v1005 = v999 - (void)v1002;
                      if (v1005 >> 1 > v1004) {
                        unint64_t v1004 = v1005 >> 1;
                      }
                      if ((unint64_t)v1005 >= 0x7FFFFFFFFFFFFFFCLL) {
                        unint64_t v1006 = 0x3FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v1006 = v1004;
                      }
                      if (v1006)
                      {
                        v1007 = (char *)sub_458C8((uint64_t)v1000, v1006);
                        v997 = *v998;
                        v1002 = *(_DWORD **)v996;
                      }
                      else
                      {
                        v1007 = 0;
                      }
                      v1168 = &v1007[4 * v1003];
                      *(_DWORD *)v1168 = 175;
                      v1001 = v1168 + 4;
                      while (v997 != v1002)
                      {
                        int v1169 = *--v997;
                        *((_DWORD *)v1168 - 1) = v1169;
                        v1168 -= 4;
                      }
                      *(void *)uint64_t v996 = v1168;
                      *v998 = v1001;
                      void *v1000 = &v1007[4 * v1006];
                      if (v1002) {
                        operator delete(v1002);
                      }
                    }
                    else
                    {
                      _DWORD *v997 = 175;
                      v1001 = v997 + 1;
                    }
                    *v998 = v1001;
                    if (!*v14)
                    {
LABEL_4142:
                      if ((*((unsigned char *)__p + 22) & 1) == 0) {
                        goto LABEL_4143;
                      }
                      uint64_t v1170 = *v12 + 24 * v13;
                      v1172 = (_DWORD **)(v1170 + 8);
                      v1171 = *(_DWORD **)(v1170 + 8);
                      v1174 = (void *)(v1170 + 16);
                      unint64_t v1173 = *(void *)(v1170 + 16);
                      if ((unint64_t)v1171 >= v1173)
                      {
                        v1176 = *(_DWORD **)v1170;
                        uint64_t v1177 = ((uint64_t)v1171 - *(void *)v1170) >> 2;
                        unint64_t v1178 = v1177 + 1;
                        if ((unint64_t)(v1177 + 1) >> 62) {
                          sub_566C();
                        }
                        uint64_t v1179 = v1173 - (void)v1176;
                        if (v1179 >> 1 > v1178) {
                          unint64_t v1178 = v1179 >> 1;
                        }
                        if ((unint64_t)v1179 >= 0x7FFFFFFFFFFFFFFCLL) {
                          unint64_t v1180 = 0x3FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v1180 = v1178;
                        }
                        if (v1180)
                        {
                          v1181 = (char *)sub_458C8((uint64_t)v1174, v1180);
                          v1171 = *v1172;
                          v1176 = *(_DWORD **)v1170;
                        }
                        else
                        {
                          v1181 = 0;
                        }
                        v1333 = &v1181[4 * v1177];
                        *(_DWORD *)v1333 = 176;
                        v1175 = v1333 + 4;
                        while (v1171 != v1176)
                        {
                          int v1334 = *--v1171;
                          *((_DWORD *)v1333 - 1) = v1334;
                          v1333 -= 4;
                        }
                        *(void *)uint64_t v1170 = v1333;
                        *v1172 = v1175;
                        void *v1174 = &v1181[4 * v1180];
                        if (v1176) {
                          operator delete(v1176);
                        }
                      }
                      else
                      {
                        _DWORD *v1171 = 176;
                        v1175 = v1171 + 1;
                      }
                      *v1172 = v1175;
                      if (!*v14)
                      {
LABEL_4143:
                        if ((*((unsigned char *)__p + 22) & 2) == 0) {
                          goto LABEL_4144;
                        }
                        uint64_t v1335 = *v12 + 24 * v13;
                        v1337 = (_DWORD **)(v1335 + 8);
                        v1336 = *(_DWORD **)(v1335 + 8);
                        v1339 = (void *)(v1335 + 16);
                        unint64_t v1338 = *(void *)(v1335 + 16);
                        if ((unint64_t)v1336 >= v1338)
                        {
                          v1341 = *(_DWORD **)v1335;
                          uint64_t v1342 = ((uint64_t)v1336 - *(void *)v1335) >> 2;
                          unint64_t v1343 = v1342 + 1;
                          if ((unint64_t)(v1342 + 1) >> 62) {
                            sub_566C();
                          }
                          uint64_t v1344 = v1338 - (void)v1341;
                          if (v1344 >> 1 > v1343) {
                            unint64_t v1343 = v1344 >> 1;
                          }
                          if ((unint64_t)v1344 >= 0x7FFFFFFFFFFFFFFCLL) {
                            unint64_t v1345 = 0x3FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v1345 = v1343;
                          }
                          if (v1345)
                          {
                            v1346 = (char *)sub_458C8((uint64_t)v1339, v1345);
                            v1336 = *v1337;
                            v1341 = *(_DWORD **)v1335;
                          }
                          else
                          {
                            v1346 = 0;
                          }
                          v1474 = &v1346[4 * v1342];
                          *(_DWORD *)v1474 = 177;
                          v1340 = v1474 + 4;
                          while (v1336 != v1341)
                          {
                            int v1475 = *--v1336;
                            *((_DWORD *)v1474 - 1) = v1475;
                            v1474 -= 4;
                          }
                          *(void *)uint64_t v1335 = v1474;
                          *v1337 = v1340;
                          void *v1339 = &v1346[4 * v1345];
                          if (v1341) {
                            operator delete(v1341);
                          }
                        }
                        else
                        {
                          _DWORD *v1336 = 177;
                          v1340 = v1336 + 1;
                        }
                        *v1337 = v1340;
                        if (!*v14)
                        {
LABEL_4144:
                          if ((*((unsigned char *)__p + 22) & 4) == 0) {
                            goto LABEL_4145;
                          }
                          uint64_t v1476 = *v12 + 24 * v13;
                          v1478 = (_DWORD **)(v1476 + 8);
                          v1477 = *(_DWORD **)(v1476 + 8);
                          v1480 = (void *)(v1476 + 16);
                          unint64_t v1479 = *(void *)(v1476 + 16);
                          if ((unint64_t)v1477 >= v1479)
                          {
                            v1482 = *(_DWORD **)v1476;
                            uint64_t v1483 = ((uint64_t)v1477 - *(void *)v1476) >> 2;
                            unint64_t v1484 = v1483 + 1;
                            if ((unint64_t)(v1483 + 1) >> 62) {
                              sub_566C();
                            }
                            uint64_t v1485 = v1479 - (void)v1482;
                            if (v1485 >> 1 > v1484) {
                              unint64_t v1484 = v1485 >> 1;
                            }
                            if ((unint64_t)v1485 >= 0x7FFFFFFFFFFFFFFCLL) {
                              unint64_t v1486 = 0x3FFFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v1486 = v1484;
                            }
                            if (v1486)
                            {
                              v1487 = (char *)sub_458C8((uint64_t)v1480, v1486);
                              v1477 = *v1478;
                              v1482 = *(_DWORD **)v1476;
                            }
                            else
                            {
                              v1487 = 0;
                            }
                            v1617 = &v1487[4 * v1483];
                            *(_DWORD *)v1617 = 178;
                            v1481 = v1617 + 4;
                            while (v1477 != v1482)
                            {
                              int v1618 = *--v1477;
                              *((_DWORD *)v1617 - 1) = v1618;
                              v1617 -= 4;
                            }
                            *(void *)uint64_t v1476 = v1617;
                            *v1478 = v1481;
                            void *v1480 = &v1487[4 * v1486];
                            if (v1482) {
                              operator delete(v1482);
                            }
                          }
                          else
                          {
                            _DWORD *v1477 = 178;
                            v1481 = v1477 + 1;
                          }
                          *v1478 = v1481;
                          if (!*v14)
                          {
LABEL_4145:
                            if ((*((unsigned char *)__p + 22) & 8) == 0) {
                              goto LABEL_4146;
                            }
                            uint64_t v1619 = *v12 + 24 * v13;
                            v1621 = (_DWORD **)(v1619 + 8);
                            v1620 = *(_DWORD **)(v1619 + 8);
                            v1623 = (void *)(v1619 + 16);
                            unint64_t v1622 = *(void *)(v1619 + 16);
                            if ((unint64_t)v1620 >= v1622)
                            {
                              v1625 = *(_DWORD **)v1619;
                              uint64_t v1626 = ((uint64_t)v1620 - *(void *)v1619) >> 2;
                              unint64_t v1627 = v1626 + 1;
                              if ((unint64_t)(v1626 + 1) >> 62) {
                                sub_566C();
                              }
                              uint64_t v1628 = v1622 - (void)v1625;
                              if (v1628 >> 1 > v1627) {
                                unint64_t v1627 = v1628 >> 1;
                              }
                              if ((unint64_t)v1628 >= 0x7FFFFFFFFFFFFFFCLL) {
                                unint64_t v1629 = 0x3FFFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v1629 = v1627;
                              }
                              if (v1629)
                              {
                                v1630 = (char *)sub_458C8((uint64_t)v1623, v1629);
                                v1620 = *v1621;
                                v1625 = *(_DWORD **)v1619;
                              }
                              else
                              {
                                v1630 = 0;
                              }
                              v1749 = &v1630[4 * v1626];
                              *(_DWORD *)v1749 = 179;
                              v1624 = v1749 + 4;
                              while (v1620 != v1625)
                              {
                                int v1750 = *--v1620;
                                *((_DWORD *)v1749 - 1) = v1750;
                                v1749 -= 4;
                              }
                              *(void *)uint64_t v1619 = v1749;
                              *v1621 = v1624;
                              void *v1623 = &v1630[4 * v1629];
                              if (v1625) {
                                operator delete(v1625);
                              }
                            }
                            else
                            {
                              _DWORD *v1620 = 179;
                              v1624 = v1620 + 1;
                            }
                            *v1621 = v1624;
                            if (!*v14)
                            {
LABEL_4146:
                              if ((*((unsigned char *)__p + 22) & 0x10) == 0) {
                                goto LABEL_4147;
                              }
                              uint64_t v1751 = *v12 + 24 * v13;
                              v1753 = (_DWORD **)(v1751 + 8);
                              v1752 = *(_DWORD **)(v1751 + 8);
                              v1755 = (void *)(v1751 + 16);
                              unint64_t v1754 = *(void *)(v1751 + 16);
                              if ((unint64_t)v1752 >= v1754)
                              {
                                v1757 = *(_DWORD **)v1751;
                                uint64_t v1758 = ((uint64_t)v1752 - *(void *)v1751) >> 2;
                                unint64_t v1759 = v1758 + 1;
                                if ((unint64_t)(v1758 + 1) >> 62) {
                                  sub_566C();
                                }
                                uint64_t v1760 = v1754 - (void)v1757;
                                if (v1760 >> 1 > v1759) {
                                  unint64_t v1759 = v1760 >> 1;
                                }
                                if ((unint64_t)v1760 >= 0x7FFFFFFFFFFFFFFCLL) {
                                  unint64_t v1761 = 0x3FFFFFFFFFFFFFFFLL;
                                }
                                else {
                                  unint64_t v1761 = v1759;
                                }
                                if (v1761)
                                {
                                  v1762 = (char *)sub_458C8((uint64_t)v1755, v1761);
                                  v1752 = *v1753;
                                  v1757 = *(_DWORD **)v1751;
                                }
                                else
                                {
                                  v1762 = 0;
                                }
                                v1857 = &v1762[4 * v1758];
                                *(_DWORD *)v1857 = 180;
                                v1756 = v1857 + 4;
                                while (v1752 != v1757)
                                {
                                  int v1858 = *--v1752;
                                  *((_DWORD *)v1857 - 1) = v1858;
                                  v1857 -= 4;
                                }
                                *(void *)uint64_t v1751 = v1857;
                                *v1753 = v1756;
                                void *v1755 = &v1762[4 * v1761];
                                if (v1757) {
                                  operator delete(v1757);
                                }
                              }
                              else
                              {
                                _DWORD *v1752 = 180;
                                v1756 = v1752 + 1;
                              }
                              *v1753 = v1756;
                              if (!*v14)
                              {
LABEL_4147:
                                if ((*((unsigned char *)__p + 22) & 0x20) == 0) {
                                  goto LABEL_4148;
                                }
                                uint64_t v1859 = *v12 + 24 * v13;
                                v1861 = (_DWORD **)(v1859 + 8);
                                v1860 = *(_DWORD **)(v1859 + 8);
                                v1863 = (void *)(v1859 + 16);
                                unint64_t v1862 = *(void *)(v1859 + 16);
                                if ((unint64_t)v1860 >= v1862)
                                {
                                  v1865 = *(_DWORD **)v1859;
                                  uint64_t v1866 = ((uint64_t)v1860 - *(void *)v1859) >> 2;
                                  unint64_t v1867 = v1866 + 1;
                                  if ((unint64_t)(v1866 + 1) >> 62) {
                                    sub_566C();
                                  }
                                  uint64_t v1868 = v1862 - (void)v1865;
                                  if (v1868 >> 1 > v1867) {
                                    unint64_t v1867 = v1868 >> 1;
                                  }
                                  if ((unint64_t)v1868 >= 0x7FFFFFFFFFFFFFFCLL) {
                                    unint64_t v1869 = 0x3FFFFFFFFFFFFFFFLL;
                                  }
                                  else {
                                    unint64_t v1869 = v1867;
                                  }
                                  if (v1869)
                                  {
                                    v1870 = (char *)sub_458C8((uint64_t)v1863, v1869);
                                    v1860 = *v1861;
                                    v1865 = *(_DWORD **)v1859;
                                  }
                                  else
                                  {
                                    v1870 = 0;
                                  }
                                  v1956 = &v1870[4 * v1866];
                                  *(_DWORD *)v1956 = 181;
                                  v1864 = v1956 + 4;
                                  while (v1860 != v1865)
                                  {
                                    int v1957 = *--v1860;
                                    *((_DWORD *)v1956 - 1) = v1957;
                                    v1956 -= 4;
                                  }
                                  *(void *)uint64_t v1859 = v1956;
                                  *v1861 = v1864;
                                  void *v1863 = &v1870[4 * v1869];
                                  if (v1865) {
                                    operator delete(v1865);
                                  }
                                }
                                else
                                {
                                  _DWORD *v1860 = 181;
                                  v1864 = v1860 + 1;
                                }
                                *v1861 = v1864;
                                if (!*v14)
                                {
LABEL_4148:
                                  if ((*((unsigned char *)__p + 22) & 0x40) == 0) {
                                    goto LABEL_4149;
                                  }
                                  uint64_t v1958 = *v12 + 24 * v13;
                                  v1960 = (_DWORD **)(v1958 + 8);
                                  v1959 = *(_DWORD **)(v1958 + 8);
                                  v1962 = (void *)(v1958 + 16);
                                  unint64_t v1961 = *(void *)(v1958 + 16);
                                  if ((unint64_t)v1959 >= v1961)
                                  {
                                    v1964 = *(_DWORD **)v1958;
                                    uint64_t v1965 = ((uint64_t)v1959 - *(void *)v1958) >> 2;
                                    unint64_t v1966 = v1965 + 1;
                                    if ((unint64_t)(v1965 + 1) >> 62) {
                                      sub_566C();
                                    }
                                    uint64_t v1967 = v1961 - (void)v1964;
                                    if (v1967 >> 1 > v1966) {
                                      unint64_t v1966 = v1967 >> 1;
                                    }
                                    if ((unint64_t)v1967 >= 0x7FFFFFFFFFFFFFFCLL) {
                                      unint64_t v1968 = 0x3FFFFFFFFFFFFFFFLL;
                                    }
                                    else {
                                      unint64_t v1968 = v1966;
                                    }
                                    if (v1968)
                                    {
                                      v1969 = (char *)sub_458C8((uint64_t)v1962, v1968);
                                      v1959 = *v1960;
                                      v1964 = *(_DWORD **)v1958;
                                    }
                                    else
                                    {
                                      v1969 = 0;
                                    }
                                    v2046 = &v1969[4 * v1965];
                                    *(_DWORD *)v2046 = 182;
                                    v1963 = v2046 + 4;
                                    while (v1959 != v1964)
                                    {
                                      int v2047 = *--v1959;
                                      *((_DWORD *)v2046 - 1) = v2047;
                                      v2046 -= 4;
                                    }
                                    *(void *)uint64_t v1958 = v2046;
                                    *v1960 = v1963;
                                    void *v1962 = &v1969[4 * v1968];
                                    if (v1964) {
                                      operator delete(v1964);
                                    }
                                  }
                                  else
                                  {
                                    _DWORD *v1959 = 182;
                                    v1963 = v1959 + 1;
                                  }
                                  *v1960 = v1963;
                                  if (!*v14)
                                  {
LABEL_4149:
                                    if ((*((unsigned char *)__p + 22) & 0x80) == 0) {
                                      goto LABEL_4150;
                                    }
                                    uint64_t v2048 = *v12 + 24 * v13;
                                    v2050 = (_DWORD **)(v2048 + 8);
                                    v2049 = *(_DWORD **)(v2048 + 8);
                                    v2052 = (void *)(v2048 + 16);
                                    unint64_t v2051 = *(void *)(v2048 + 16);
                                    if ((unint64_t)v2049 >= v2051)
                                    {
                                      v2054 = *(_DWORD **)v2048;
                                      uint64_t v2055 = ((uint64_t)v2049 - *(void *)v2048) >> 2;
                                      unint64_t v2056 = v2055 + 1;
                                      if ((unint64_t)(v2055 + 1) >> 62) {
                                        sub_566C();
                                      }
                                      uint64_t v2057 = v2051 - (void)v2054;
                                      if (v2057 >> 1 > v2056) {
                                        unint64_t v2056 = v2057 >> 1;
                                      }
                                      if ((unint64_t)v2057 >= 0x7FFFFFFFFFFFFFFCLL) {
                                        unint64_t v2058 = 0x3FFFFFFFFFFFFFFFLL;
                                      }
                                      else {
                                        unint64_t v2058 = v2056;
                                      }
                                      if (v2058)
                                      {
                                        v2059 = (char *)sub_458C8((uint64_t)v2052, v2058);
                                        v2049 = *v2050;
                                        v2054 = *(_DWORD **)v2048;
                                      }
                                      else
                                      {
                                        v2059 = 0;
                                      }
                                      v2131 = &v2059[4 * v2055];
                                      *(_DWORD *)v2131 = 183;
                                      v2053 = v2131 + 4;
                                      while (v2049 != v2054)
                                      {
                                        int v2132 = *--v2049;
                                        *((_DWORD *)v2131 - 1) = v2132;
                                        v2131 -= 4;
                                      }
                                      *(void *)uint64_t v2048 = v2131;
                                      *v2050 = v2053;
                                      void *v2052 = &v2059[4 * v2058];
                                      if (v2054) {
                                        operator delete(v2054);
                                      }
                                    }
                                    else
                                    {
                                      _DWORD *v2049 = 183;
                                      v2053 = v2049 + 1;
                                    }
                                    *v2050 = v2053;
                                    if (!*v14)
                                    {
LABEL_4150:
                                      if ((*((unsigned char *)__p + 23) & 1) == 0) {
                                        goto LABEL_4151;
                                      }
                                      uint64_t v2133 = *v12 + 24 * v13;
                                      v2135 = (_DWORD **)(v2133 + 8);
                                      v2134 = *(_DWORD **)(v2133 + 8);
                                      v2137 = (void *)(v2133 + 16);
                                      unint64_t v2136 = *(void *)(v2133 + 16);
                                      if ((unint64_t)v2134 >= v2136)
                                      {
                                        v2139 = *(_DWORD **)v2133;
                                        uint64_t v2140 = ((uint64_t)v2134 - *(void *)v2133) >> 2;
                                        unint64_t v2141 = v2140 + 1;
                                        if ((unint64_t)(v2140 + 1) >> 62) {
                                          sub_566C();
                                        }
                                        uint64_t v2142 = v2136 - (void)v2139;
                                        if (v2142 >> 1 > v2141) {
                                          unint64_t v2141 = v2142 >> 1;
                                        }
                                        if ((unint64_t)v2142 >= 0x7FFFFFFFFFFFFFFCLL) {
                                          unint64_t v2143 = 0x3FFFFFFFFFFFFFFFLL;
                                        }
                                        else {
                                          unint64_t v2143 = v2141;
                                        }
                                        if (v2143)
                                        {
                                          v2144 = (char *)sub_458C8((uint64_t)v2137, v2143);
                                          v2134 = *v2135;
                                          v2139 = *(_DWORD **)v2133;
                                        }
                                        else
                                        {
                                          v2144 = 0;
                                        }
                                        v2207 = &v2144[4 * v2140];
                                        *(_DWORD *)v2207 = 184;
                                        v2138 = v2207 + 4;
                                        while (v2134 != v2139)
                                        {
                                          int v2208 = *--v2134;
                                          *((_DWORD *)v2207 - 1) = v2208;
                                          v2207 -= 4;
                                        }
                                        *(void *)uint64_t v2133 = v2207;
                                        *v2135 = v2138;
                                        void *v2137 = &v2144[4 * v2143];
                                        if (v2139) {
                                          operator delete(v2139);
                                        }
                                      }
                                      else
                                      {
                                        _DWORD *v2134 = 184;
                                        v2138 = v2134 + 1;
                                      }
                                      *v2135 = v2138;
                                      if (!*v14)
                                      {
LABEL_4151:
                                        if ((*((unsigned char *)__p + 23) & 2) == 0) {
                                          goto LABEL_4152;
                                        }
                                        uint64_t v2209 = *v12 + 24 * v13;
                                        v2211 = (_DWORD **)(v2209 + 8);
                                        v2210 = *(_DWORD **)(v2209 + 8);
                                        v2213 = (void *)(v2209 + 16);
                                        unint64_t v2212 = *(void *)(v2209 + 16);
                                        if ((unint64_t)v2210 >= v2212)
                                        {
                                          v2215 = *(_DWORD **)v2209;
                                          uint64_t v2216 = ((uint64_t)v2210 - *(void *)v2209) >> 2;
                                          unint64_t v2217 = v2216 + 1;
                                          if ((unint64_t)(v2216 + 1) >> 62) {
                                            sub_566C();
                                          }
                                          uint64_t v2218 = v2212 - (void)v2215;
                                          if (v2218 >> 1 > v2217) {
                                            unint64_t v2217 = v2218 >> 1;
                                          }
                                          if ((unint64_t)v2218 >= 0x7FFFFFFFFFFFFFFCLL) {
                                            unint64_t v2219 = 0x3FFFFFFFFFFFFFFFLL;
                                          }
                                          else {
                                            unint64_t v2219 = v2217;
                                          }
                                          if (v2219)
                                          {
                                            v2220 = (char *)sub_458C8((uint64_t)v2213, v2219);
                                            v2210 = *v2211;
                                            v2215 = *(_DWORD **)v2209;
                                          }
                                          else
                                          {
                                            v2220 = 0;
                                          }
                                          v2278 = &v2220[4 * v2216];
                                          *(_DWORD *)v2278 = 185;
                                          v2214 = v2278 + 4;
                                          while (v2210 != v2215)
                                          {
                                            int v2279 = *--v2210;
                                            *((_DWORD *)v2278 - 1) = v2279;
                                            v2278 -= 4;
                                          }
                                          *(void *)uint64_t v2209 = v2278;
                                          *v2211 = v2214;
                                          void *v2213 = &v2220[4 * v2219];
                                          if (v2215) {
                                            operator delete(v2215);
                                          }
                                        }
                                        else
                                        {
                                          _DWORD *v2210 = 185;
                                          v2214 = v2210 + 1;
                                        }
                                        *v2211 = v2214;
                                        if (!*v14)
                                        {
LABEL_4152:
                                          if ((*((unsigned char *)__p + 23) & 4) == 0) {
                                            goto LABEL_4153;
                                          }
                                          uint64_t v2280 = *v12 + 24 * v13;
                                          v2282 = (_DWORD **)(v2280 + 8);
                                          v2281 = *(_DWORD **)(v2280 + 8);
                                          v2284 = (void *)(v2280 + 16);
                                          unint64_t v2283 = *(void *)(v2280 + 16);
                                          if ((unint64_t)v2281 >= v2283)
                                          {
                                            v2286 = *(_DWORD **)v2280;
                                            uint64_t v2287 = ((uint64_t)v2281 - *(void *)v2280) >> 2;
                                            unint64_t v2288 = v2287 + 1;
                                            if ((unint64_t)(v2287 + 1) >> 62) {
                                              sub_566C();
                                            }
                                            uint64_t v2289 = v2283 - (void)v2286;
                                            if (v2289 >> 1 > v2288) {
                                              unint64_t v2288 = v2289 >> 1;
                                            }
                                            if ((unint64_t)v2289 >= 0x7FFFFFFFFFFFFFFCLL) {
                                              unint64_t v2290 = 0x3FFFFFFFFFFFFFFFLL;
                                            }
                                            else {
                                              unint64_t v2290 = v2288;
                                            }
                                            if (v2290)
                                            {
                                              v2291 = (char *)sub_458C8((uint64_t)v2284, v2290);
                                              v2281 = *v2282;
                                              v2286 = *(_DWORD **)v2280;
                                            }
                                            else
                                            {
                                              v2291 = 0;
                                            }
                                            v2348 = &v2291[4 * v2287];
                                            *(_DWORD *)v2348 = 186;
                                            v2285 = v2348 + 4;
                                            while (v2281 != v2286)
                                            {
                                              int v2349 = *--v2281;
                                              *((_DWORD *)v2348 - 1) = v2349;
                                              v2348 -= 4;
                                            }
                                            *(void *)uint64_t v2280 = v2348;
                                            *v2282 = v2285;
                                            void *v2284 = &v2291[4 * v2290];
                                            if (v2286) {
                                              operator delete(v2286);
                                            }
                                          }
                                          else
                                          {
                                            _DWORD *v2281 = 186;
                                            v2285 = v2281 + 1;
                                          }
                                          *v2282 = v2285;
                                          if (!*v14)
                                          {
LABEL_4153:
                                            if ((*((unsigned char *)__p + 23) & 8) == 0) {
                                              goto LABEL_4154;
                                            }
                                            uint64_t v2350 = *v12 + 24 * v13;
                                            v2352 = (_DWORD **)(v2350 + 8);
                                            v2351 = *(_DWORD **)(v2350 + 8);
                                            v2354 = (void *)(v2350 + 16);
                                            unint64_t v2353 = *(void *)(v2350 + 16);
                                            if ((unint64_t)v2351 >= v2353)
                                            {
                                              v2356 = *(_DWORD **)v2350;
                                              uint64_t v2357 = ((uint64_t)v2351 - *(void *)v2350) >> 2;
                                              unint64_t v2358 = v2357 + 1;
                                              if ((unint64_t)(v2357 + 1) >> 62) {
                                                sub_566C();
                                              }
                                              uint64_t v2359 = v2353 - (void)v2356;
                                              if (v2359 >> 1 > v2358) {
                                                unint64_t v2358 = v2359 >> 1;
                                              }
                                              if ((unint64_t)v2359 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                unint64_t v2360 = 0x3FFFFFFFFFFFFFFFLL;
                                              }
                                              else {
                                                unint64_t v2360 = v2358;
                                              }
                                              if (v2360)
                                              {
                                                v2361 = (char *)sub_458C8((uint64_t)v2354, v2360);
                                                v2351 = *v2352;
                                                v2356 = *(_DWORD **)v2350;
                                              }
                                              else
                                              {
                                                v2361 = 0;
                                              }
                                              v2418 = &v2361[4 * v2357];
                                              *(_DWORD *)v2418 = 187;
                                              v2355 = v2418 + 4;
                                              while (v2351 != v2356)
                                              {
                                                int v2419 = *--v2351;
                                                *((_DWORD *)v2418 - 1) = v2419;
                                                v2418 -= 4;
                                              }
                                              *(void *)uint64_t v2350 = v2418;
                                              *v2352 = v2355;
                                              void *v2354 = &v2361[4 * v2360];
                                              if (v2356) {
                                                operator delete(v2356);
                                              }
                                            }
                                            else
                                            {
                                              _DWORD *v2351 = 187;
                                              v2355 = v2351 + 1;
                                            }
                                            *v2352 = v2355;
                                            if (!*v14)
                                            {
LABEL_4154:
                                              if ((*((unsigned char *)__p + 23) & 0x10) == 0) {
                                                goto LABEL_4155;
                                              }
                                              uint64_t v2420 = *v12 + 24 * v13;
                                              v2422 = (_DWORD **)(v2420 + 8);
                                              v2421 = *(_DWORD **)(v2420 + 8);
                                              v2424 = (void *)(v2420 + 16);
                                              unint64_t v2423 = *(void *)(v2420 + 16);
                                              if ((unint64_t)v2421 >= v2423)
                                              {
                                                v2426 = *(_DWORD **)v2420;
                                                uint64_t v2427 = ((uint64_t)v2421 - *(void *)v2420) >> 2;
                                                unint64_t v2428 = v2427 + 1;
                                                if ((unint64_t)(v2427 + 1) >> 62) {
                                                  sub_566C();
                                                }
                                                uint64_t v2429 = v2423 - (void)v2426;
                                                if (v2429 >> 1 > v2428) {
                                                  unint64_t v2428 = v2429 >> 1;
                                                }
                                                if ((unint64_t)v2429 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                  unint64_t v2430 = 0x3FFFFFFFFFFFFFFFLL;
                                                }
                                                else {
                                                  unint64_t v2430 = v2428;
                                                }
                                                if (v2430)
                                                {
                                                  v2431 = (char *)sub_458C8((uint64_t)v2424, v2430);
                                                  v2421 = *v2422;
                                                  v2426 = *(_DWORD **)v2420;
                                                }
                                                else
                                                {
                                                  v2431 = 0;
                                                }
                                                v2480 = &v2431[4 * v2427];
                                                *(_DWORD *)v2480 = 188;
                                                v2425 = v2480 + 4;
                                                while (v2421 != v2426)
                                                {
                                                  int v2481 = *--v2421;
                                                  *((_DWORD *)v2480 - 1) = v2481;
                                                  v2480 -= 4;
                                                }
                                                *(void *)uint64_t v2420 = v2480;
                                                *v2422 = v2425;
                                                void *v2424 = &v2431[4 * v2430];
                                                if (v2426) {
                                                  operator delete(v2426);
                                                }
                                              }
                                              else
                                              {
                                                _DWORD *v2421 = 188;
                                                v2425 = v2421 + 1;
                                              }
                                              *v2422 = v2425;
                                              if (!*v14)
                                              {
LABEL_4155:
                                                if ((*((unsigned char *)__p + 23) & 0x20) == 0) {
                                                  goto LABEL_4156;
                                                }
                                                uint64_t v2482 = *v12 + 24 * v13;
                                                v2484 = (_DWORD **)(v2482 + 8);
                                                v2483 = *(_DWORD **)(v2482 + 8);
                                                v2486 = (void *)(v2482 + 16);
                                                unint64_t v2485 = *(void *)(v2482 + 16);
                                                if ((unint64_t)v2483 >= v2485)
                                                {
                                                  v2488 = *(_DWORD **)v2482;
                                                  uint64_t v2489 = ((uint64_t)v2483 - *(void *)v2482) >> 2;
                                                  unint64_t v2490 = v2489 + 1;
                                                  if ((unint64_t)(v2489 + 1) >> 62) {
                                                    sub_566C();
                                                  }
                                                  uint64_t v2491 = v2485 - (void)v2488;
                                                  if (v2491 >> 1 > v2490) {
                                                    unint64_t v2490 = v2491 >> 1;
                                                  }
                                                  if ((unint64_t)v2491 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                    unint64_t v2492 = 0x3FFFFFFFFFFFFFFFLL;
                                                  }
                                                  else {
                                                    unint64_t v2492 = v2490;
                                                  }
                                                  if (v2492)
                                                  {
                                                    v2493 = (char *)sub_458C8((uint64_t)v2486, v2492);
                                                    v2483 = *v2484;
                                                    v2488 = *(_DWORD **)v2482;
                                                  }
                                                  else
                                                  {
                                                    v2493 = 0;
                                                  }
                                                  v2537 = &v2493[4 * v2489];
                                                  *(_DWORD *)v2537 = 189;
                                                  v2487 = v2537 + 4;
                                                  while (v2483 != v2488)
                                                  {
                                                    int v2538 = *--v2483;
                                                    *((_DWORD *)v2537 - 1) = v2538;
                                                    v2537 -= 4;
                                                  }
                                                  *(void *)uint64_t v2482 = v2537;
                                                  *v2484 = v2487;
                                                  void *v2486 = &v2493[4 * v2492];
                                                  if (v2488) {
                                                    operator delete(v2488);
                                                  }
                                                }
                                                else
                                                {
                                                  _DWORD *v2483 = 189;
                                                  v2487 = v2483 + 1;
                                                }
                                                *v2484 = v2487;
                                                if (!*v14)
                                                {
LABEL_4156:
                                                  if ((*((unsigned char *)__p + 23) & 0x40) != 0)
                                                  {
                                                    uint64_t v247 = *v12 + 24 * v13;
                                                    uint64_t v249 = (int **)(v247 + 8);
                                                    int v248 = *(int **)(v247 + 8);
                                                    uint64_t v251 = (void *)(v247 + 16);
                                                    unint64_t v2539 = *(void *)(v247 + 16);
                                                    if ((unint64_t)v248 < v2539)
                                                    {
                                                      int v252 = 190;
                                                      goto LABEL_2186;
                                                    }
                                                    uint64_t v253 = *(int **)v247;
                                                    uint64_t v2540 = ((uint64_t)v248 - *(void *)v247) >> 2;
                                                    unint64_t v2541 = v2540 + 1;
                                                    if ((unint64_t)(v2540 + 1) >> 62) {
                                                      sub_566C();
                                                    }
                                                    uint64_t v2542 = v2539 - (void)v253;
                                                    if (v2542 >> 1 > v2541) {
                                                      unint64_t v2541 = v2542 >> 1;
                                                    }
                                                    if ((unint64_t)v2542 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                      unint64_t v257 = 0x3FFFFFFFFFFFFFFFLL;
                                                    }
                                                    else {
                                                      unint64_t v257 = v2541;
                                                    }
                                                    if (v257)
                                                    {
                                                      unint64_t v258 = (char *)sub_458C8((uint64_t)v251, v257);
                                                      int v248 = *v249;
                                                      uint64_t v253 = *(int **)v247;
                                                    }
                                                    else
                                                    {
                                                      unint64_t v258 = 0;
                                                    }
                                                    unint64_t v473 = &v258[4 * v2540];
                                                    *(_DWORD *)unint64_t v473 = 190;
                                                    unint64_t v474 = (int *)(v473 + 4);
                                                    while (v248 != v253)
                                                    {
                                                      int v2585 = *--v248;
                                                      *((_DWORD *)v473 - 1) = v2585;
                                                      v473 -= 4;
                                                    }
                                                    goto LABEL_3834;
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          break;
        case 7:
          if (!*v14)
          {
            if ((*((void *)__p + 2) & 0x8000000000000000) == 0) {
              goto LABEL_51;
            }
            uint64_t v111 = *v12 + 24 * v13;
            uint64_t v113 = (_DWORD **)(v111 + 8);
            uint64_t v112 = *(_DWORD **)(v111 + 8);
            BOOL v115 = (void *)(v111 + 16);
            unint64_t v114 = *(void *)(v111 + 16);
            if ((unint64_t)v112 >= v114)
            {
              uint64_t v219 = *(_DWORD **)v111;
              uint64_t v220 = ((uint64_t)v112 - *(void *)v111) >> 2;
              unint64_t v221 = v220 + 1;
              if ((unint64_t)(v220 + 1) >> 62) {
                sub_566C();
              }
              uint64_t v222 = v114 - (void)v219;
              if (v222 >> 1 > v221) {
                unint64_t v221 = v222 >> 1;
              }
              if ((unint64_t)v222 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v223 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v223 = v221;
              }
              if (v223)
              {
                unint64_t v224 = (char *)sub_458C8((uint64_t)v115, v223);
                uint64_t v112 = *v113;
                uint64_t v219 = *(_DWORD **)v111;
              }
              else
              {
                unint64_t v224 = 0;
              }
              uint64_t v455 = &v224[4 * v220];
              *(_DWORD *)uint64_t v455 = 191;
              unint64_t v116 = v455 + 4;
              while (v112 != v219)
              {
                int v456 = *--v112;
                *((_DWORD *)v455 - 1) = v456;
                v455 -= 4;
              }
              *(void *)uint64_t v111 = v455;
              *uint64_t v113 = v116;
              *BOOL v115 = &v224[4 * v223];
              if (v219) {
                operator delete(v219);
              }
            }
            else
            {
              *uint64_t v112 = 191;
              unint64_t v116 = v112 + 1;
            }
            *uint64_t v113 = v116;
            if (!*v14)
            {
LABEL_51:
              if ((*((unsigned char *)__p + 24) & 1) == 0) {
                goto LABEL_3195;
              }
              uint64_t v69 = *v12 + 24 * v13;
              uint64_t v71 = (_DWORD **)(v69 + 8);
              unint64_t v70 = *(_DWORD **)(v69 + 8);
              uint64_t v73 = (void *)(v69 + 16);
              unint64_t v72 = *(void *)(v69 + 16);
              if ((unint64_t)v70 >= v72)
              {
                unint64_t v207 = *(_DWORD **)v69;
                uint64_t v208 = ((uint64_t)v70 - *(void *)v69) >> 2;
                unint64_t v209 = v208 + 1;
                if ((unint64_t)(v208 + 1) >> 62) {
                  sub_566C();
                }
                uint64_t v210 = v72 - (void)v207;
                if (v210 >> 1 > v209) {
                  unint64_t v209 = v210 >> 1;
                }
                if ((unint64_t)v210 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v211 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v211 = v209;
                }
                if (v211)
                {
                  uint64_t v212 = (char *)sub_458C8((uint64_t)v73, v211);
                  unint64_t v70 = *v71;
                  unint64_t v207 = *(_DWORD **)v69;
                }
                else
                {
                  uint64_t v212 = 0;
                }
                unint64_t v427 = &v212[4 * v208];
                *(_DWORD *)unint64_t v427 = 192;
                unint64_t v74 = v427 + 4;
                while (v70 != v207)
                {
                  int v428 = *--v70;
                  *((_DWORD *)v427 - 1) = v428;
                  v427 -= 4;
                }
                *(void *)uint64_t v69 = v427;
                void *v71 = v74;
                void *v73 = &v212[4 * v211];
                if (v207) {
                  operator delete(v207);
                }
              }
              else
              {
                *unint64_t v70 = 192;
                unint64_t v74 = v70 + 1;
              }
              void *v71 = v74;
              if (!*v14)
              {
LABEL_3195:
                if ((*((unsigned char *)__p + 24) & 2) == 0) {
                  goto LABEL_4157;
                }
                uint64_t v429 = *v12 + 24 * v13;
                int v431 = (_DWORD **)(v429 + 8);
                unint64_t v430 = *(_DWORD **)(v429 + 8);
                uint64_t v433 = (void *)(v429 + 16);
                unint64_t v432 = *(void *)(v429 + 16);
                if ((unint64_t)v430 >= v432)
                {
                  uint64_t v435 = *(_DWORD **)v429;
                  uint64_t v436 = ((uint64_t)v430 - *(void *)v429) >> 2;
                  unint64_t v437 = v436 + 1;
                  if ((unint64_t)(v436 + 1) >> 62) {
                    sub_566C();
                  }
                  uint64_t v438 = v432 - (void)v435;
                  if (v438 >> 1 > v437) {
                    unint64_t v437 = v438 >> 1;
                  }
                  if ((unint64_t)v438 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v439 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v439 = v437;
                  }
                  if (v439)
                  {
                    uint64_t v440 = (char *)sub_458C8((uint64_t)v433, v439);
                    unint64_t v430 = *v431;
                    uint64_t v435 = *(_DWORD **)v429;
                  }
                  else
                  {
                    uint64_t v440 = 0;
                  }
                  v644 = &v440[4 * v436];
                  *(_DWORD *)v644 = 193;
                  v434 = v644 + 4;
                  while (v430 != v435)
                  {
                    int v645 = *--v430;
                    *((_DWORD *)v644 - 1) = v645;
                    v644 -= 4;
                  }
                  *(void *)uint64_t v429 = v644;
                  char *v431 = v434;
                  *uint64_t v433 = &v440[4 * v439];
                  if (v435) {
                    operator delete(v435);
                  }
                }
                else
                {
                  _DWORD *v430 = 193;
                  v434 = v430 + 1;
                }
                char *v431 = v434;
                if (!*v14)
                {
LABEL_4157:
                  if ((*((unsigned char *)__p + 24) & 4) == 0) {
                    goto LABEL_4158;
                  }
                  uint64_t v646 = *v12 + 24 * v13;
                  v648 = (_DWORD **)(v646 + 8);
                  v647 = *(_DWORD **)(v646 + 8);
                  v650 = (void *)(v646 + 16);
                  unint64_t v649 = *(void *)(v646 + 16);
                  if ((unint64_t)v647 >= v649)
                  {
                    v652 = *(_DWORD **)v646;
                    uint64_t v653 = ((uint64_t)v647 - *(void *)v646) >> 2;
                    unint64_t v654 = v653 + 1;
                    if ((unint64_t)(v653 + 1) >> 62) {
                      sub_566C();
                    }
                    uint64_t v655 = v649 - (void)v652;
                    if (v655 >> 1 > v654) {
                      unint64_t v654 = v655 >> 1;
                    }
                    if ((unint64_t)v655 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v656 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v656 = v654;
                    }
                    if (v656)
                    {
                      v657 = (char *)sub_458C8((uint64_t)v650, v656);
                      v647 = *v648;
                      v652 = *(_DWORD **)v646;
                    }
                    else
                    {
                      v657 = 0;
                    }
                    v838 = &v657[4 * v653];
                    *(_DWORD *)v838 = 194;
                    v651 = v838 + 4;
                    while (v647 != v652)
                    {
                      int v839 = *--v647;
                      *((_DWORD *)v838 - 1) = v839;
                      v838 -= 4;
                    }
                    *(void *)uint64_t v646 = v838;
                    *v648 = v651;
                    void *v650 = &v657[4 * v656];
                    if (v652) {
                      operator delete(v652);
                    }
                  }
                  else
                  {
                    _DWORD *v647 = 194;
                    v651 = v647 + 1;
                  }
                  *v648 = v651;
                  if (!*v14)
                  {
LABEL_4158:
                    if ((*((unsigned char *)__p + 24) & 8) == 0) {
                      goto LABEL_4159;
                    }
                    uint64_t v840 = *v12 + 24 * v13;
                    v842 = (_DWORD **)(v840 + 8);
                    v841 = *(_DWORD **)(v840 + 8);
                    v844 = (void *)(v840 + 16);
                    unint64_t v843 = *(void *)(v840 + 16);
                    if ((unint64_t)v841 >= v843)
                    {
                      v846 = *(_DWORD **)v840;
                      uint64_t v847 = ((uint64_t)v841 - *(void *)v840) >> 2;
                      unint64_t v848 = v847 + 1;
                      if ((unint64_t)(v847 + 1) >> 62) {
                        sub_566C();
                      }
                      uint64_t v849 = v843 - (void)v846;
                      if (v849 >> 1 > v848) {
                        unint64_t v848 = v849 >> 1;
                      }
                      if ((unint64_t)v849 >= 0x7FFFFFFFFFFFFFFCLL) {
                        unint64_t v850 = 0x3FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v850 = v848;
                      }
                      if (v850)
                      {
                        v851 = (char *)sub_458C8((uint64_t)v844, v850);
                        v841 = *v842;
                        v846 = *(_DWORD **)v840;
                      }
                      else
                      {
                        v851 = 0;
                      }
                      v1014 = &v851[4 * v847];
                      *(_DWORD *)v1014 = 195;
                      v845 = v1014 + 4;
                      while (v841 != v846)
                      {
                        int v1015 = *--v841;
                        *((_DWORD *)v1014 - 1) = v1015;
                        v1014 -= 4;
                      }
                      *(void *)uint64_t v840 = v1014;
                      *v842 = v845;
                      void *v844 = &v851[4 * v850];
                      if (v846) {
                        operator delete(v846);
                      }
                    }
                    else
                    {
                      _DWORD *v841 = 195;
                      v845 = v841 + 1;
                    }
                    *v842 = v845;
                    if (!*v14)
                    {
LABEL_4159:
                      if ((*((unsigned char *)__p + 24) & 0x10) == 0) {
                        goto LABEL_4160;
                      }
                      uint64_t v1016 = *v12 + 24 * v13;
                      v1018 = (_DWORD **)(v1016 + 8);
                      v1017 = *(_DWORD **)(v1016 + 8);
                      v1020 = (void *)(v1016 + 16);
                      unint64_t v1019 = *(void *)(v1016 + 16);
                      if ((unint64_t)v1017 >= v1019)
                      {
                        v1022 = *(_DWORD **)v1016;
                        uint64_t v1023 = ((uint64_t)v1017 - *(void *)v1016) >> 2;
                        unint64_t v1024 = v1023 + 1;
                        if ((unint64_t)(v1023 + 1) >> 62) {
                          sub_566C();
                        }
                        uint64_t v1025 = v1019 - (void)v1022;
                        if (v1025 >> 1 > v1024) {
                          unint64_t v1024 = v1025 >> 1;
                        }
                        if ((unint64_t)v1025 >= 0x7FFFFFFFFFFFFFFCLL) {
                          unint64_t v1026 = 0x3FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v1026 = v1024;
                        }
                        if (v1026)
                        {
                          v1027 = (char *)sub_458C8((uint64_t)v1020, v1026);
                          v1017 = *v1018;
                          v1022 = *(_DWORD **)v1016;
                        }
                        else
                        {
                          v1027 = 0;
                        }
                        v1183 = &v1027[4 * v1023];
                        *(_DWORD *)v1183 = 196;
                        v1021 = v1183 + 4;
                        while (v1017 != v1022)
                        {
                          int v1184 = *--v1017;
                          *((_DWORD *)v1183 - 1) = v1184;
                          v1183 -= 4;
                        }
                        *(void *)uint64_t v1016 = v1183;
                        *v1018 = v1021;
                        void *v1020 = &v1027[4 * v1026];
                        if (v1022) {
                          operator delete(v1022);
                        }
                      }
                      else
                      {
                        _DWORD *v1017 = 196;
                        v1021 = v1017 + 1;
                      }
                      *v1018 = v1021;
                      if (!*v14)
                      {
LABEL_4160:
                        if ((*((unsigned char *)__p + 24) & 0x20) == 0) {
                          goto LABEL_4161;
                        }
                        uint64_t v1185 = *v12 + 24 * v13;
                        v1187 = (_DWORD **)(v1185 + 8);
                        v1186 = *(_DWORD **)(v1185 + 8);
                        v1189 = (void *)(v1185 + 16);
                        unint64_t v1188 = *(void *)(v1185 + 16);
                        if ((unint64_t)v1186 >= v1188)
                        {
                          v1191 = *(_DWORD **)v1185;
                          uint64_t v1192 = ((uint64_t)v1186 - *(void *)v1185) >> 2;
                          unint64_t v1193 = v1192 + 1;
                          if ((unint64_t)(v1192 + 1) >> 62) {
                            sub_566C();
                          }
                          uint64_t v1194 = v1188 - (void)v1191;
                          if (v1194 >> 1 > v1193) {
                            unint64_t v1193 = v1194 >> 1;
                          }
                          if ((unint64_t)v1194 >= 0x7FFFFFFFFFFFFFFCLL) {
                            unint64_t v1195 = 0x3FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v1195 = v1193;
                          }
                          if (v1195)
                          {
                            v1196 = (char *)sub_458C8((uint64_t)v1189, v1195);
                            v1186 = *v1187;
                            v1191 = *(_DWORD **)v1185;
                          }
                          else
                          {
                            v1196 = 0;
                          }
                          v1347 = &v1196[4 * v1192];
                          *(_DWORD *)v1347 = 197;
                          v1190 = v1347 + 4;
                          while (v1186 != v1191)
                          {
                            int v1348 = *--v1186;
                            *((_DWORD *)v1347 - 1) = v1348;
                            v1347 -= 4;
                          }
                          *(void *)uint64_t v1185 = v1347;
                          *v1187 = v1190;
                          void *v1189 = &v1196[4 * v1195];
                          if (v1191) {
                            operator delete(v1191);
                          }
                        }
                        else
                        {
                          _DWORD *v1186 = 197;
                          v1190 = v1186 + 1;
                        }
                        *v1187 = v1190;
                        if (!*v14)
                        {
LABEL_4161:
                          if ((*((unsigned char *)__p + 24) & 0x40) == 0) {
                            goto LABEL_4162;
                          }
                          uint64_t v1349 = *v12 + 24 * v13;
                          v1351 = (_DWORD **)(v1349 + 8);
                          v1350 = *(_DWORD **)(v1349 + 8);
                          v1353 = (void *)(v1349 + 16);
                          unint64_t v1352 = *(void *)(v1349 + 16);
                          if ((unint64_t)v1350 >= v1352)
                          {
                            v1355 = *(_DWORD **)v1349;
                            uint64_t v1356 = ((uint64_t)v1350 - *(void *)v1349) >> 2;
                            unint64_t v1357 = v1356 + 1;
                            if ((unint64_t)(v1356 + 1) >> 62) {
                              sub_566C();
                            }
                            uint64_t v1358 = v1352 - (void)v1355;
                            if (v1358 >> 1 > v1357) {
                              unint64_t v1357 = v1358 >> 1;
                            }
                            if ((unint64_t)v1358 >= 0x7FFFFFFFFFFFFFFCLL) {
                              unint64_t v1359 = 0x3FFFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v1359 = v1357;
                            }
                            if (v1359)
                            {
                              v1360 = (char *)sub_458C8((uint64_t)v1353, v1359);
                              v1350 = *v1351;
                              v1355 = *(_DWORD **)v1349;
                            }
                            else
                            {
                              v1360 = 0;
                            }
                            v1489 = &v1360[4 * v1356];
                            *(_DWORD *)v1489 = 198;
                            v1354 = v1489 + 4;
                            while (v1350 != v1355)
                            {
                              int v1490 = *--v1350;
                              *((_DWORD *)v1489 - 1) = v1490;
                              v1489 -= 4;
                            }
                            *(void *)uint64_t v1349 = v1489;
                            *v1351 = v1354;
                            void *v1353 = &v1360[4 * v1359];
                            if (v1355) {
                              operator delete(v1355);
                            }
                          }
                          else
                          {
                            _DWORD *v1350 = 198;
                            v1354 = v1350 + 1;
                          }
                          *v1351 = v1354;
                          if (!*v14)
                          {
LABEL_4162:
                            if ((*((unsigned char *)__p + 24) & 0x80) == 0) {
                              goto LABEL_4163;
                            }
                            uint64_t v1491 = *v12 + 24 * v13;
                            v1493 = (_DWORD **)(v1491 + 8);
                            v1492 = *(_DWORD **)(v1491 + 8);
                            v1495 = (void *)(v1491 + 16);
                            unint64_t v1494 = *(void *)(v1491 + 16);
                            if ((unint64_t)v1492 >= v1494)
                            {
                              v1497 = *(_DWORD **)v1491;
                              uint64_t v1498 = ((uint64_t)v1492 - *(void *)v1491) >> 2;
                              unint64_t v1499 = v1498 + 1;
                              if ((unint64_t)(v1498 + 1) >> 62) {
                                sub_566C();
                              }
                              uint64_t v1500 = v1494 - (void)v1497;
                              if (v1500 >> 1 > v1499) {
                                unint64_t v1499 = v1500 >> 1;
                              }
                              if ((unint64_t)v1500 >= 0x7FFFFFFFFFFFFFFCLL) {
                                unint64_t v1501 = 0x3FFFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v1501 = v1499;
                              }
                              if (v1501)
                              {
                                v1502 = (char *)sub_458C8((uint64_t)v1495, v1501);
                                v1492 = *v1493;
                                v1497 = *(_DWORD **)v1491;
                              }
                              else
                              {
                                v1502 = 0;
                              }
                              v1631 = &v1502[4 * v1498];
                              *(_DWORD *)v1631 = 199;
                              v1496 = v1631 + 4;
                              while (v1492 != v1497)
                              {
                                int v1632 = *--v1492;
                                *((_DWORD *)v1631 - 1) = v1632;
                                v1631 -= 4;
                              }
                              *(void *)uint64_t v1491 = v1631;
                              *v1493 = v1496;
                              void *v1495 = &v1502[4 * v1501];
                              if (v1497) {
                                operator delete(v1497);
                              }
                            }
                            else
                            {
                              _DWORD *v1492 = 199;
                              v1496 = v1492 + 1;
                            }
                            *v1493 = v1496;
                            if (!*v14)
                            {
LABEL_4163:
                              if ((*((unsigned char *)__p + 25) & 1) == 0) {
                                goto LABEL_4164;
                              }
                              uint64_t v1633 = *v12 + 24 * v13;
                              v1635 = (_DWORD **)(v1633 + 8);
                              v1634 = *(_DWORD **)(v1633 + 8);
                              v1637 = (void *)(v1633 + 16);
                              unint64_t v1636 = *(void *)(v1633 + 16);
                              if ((unint64_t)v1634 >= v1636)
                              {
                                v1639 = *(_DWORD **)v1633;
                                uint64_t v1640 = ((uint64_t)v1634 - *(void *)v1633) >> 2;
                                unint64_t v1641 = v1640 + 1;
                                if ((unint64_t)(v1640 + 1) >> 62) {
                                  sub_566C();
                                }
                                uint64_t v1642 = v1636 - (void)v1639;
                                if (v1642 >> 1 > v1641) {
                                  unint64_t v1641 = v1642 >> 1;
                                }
                                if ((unint64_t)v1642 >= 0x7FFFFFFFFFFFFFFCLL) {
                                  unint64_t v1643 = 0x3FFFFFFFFFFFFFFFLL;
                                }
                                else {
                                  unint64_t v1643 = v1641;
                                }
                                if (v1643)
                                {
                                  v1644 = (char *)sub_458C8((uint64_t)v1637, v1643);
                                  v1634 = *v1635;
                                  v1639 = *(_DWORD **)v1633;
                                }
                                else
                                {
                                  v1644 = 0;
                                }
                                v1763 = &v1644[4 * v1640];
                                *(_DWORD *)v1763 = 200;
                                v1638 = v1763 + 4;
                                while (v1634 != v1639)
                                {
                                  int v1764 = *--v1634;
                                  *((_DWORD *)v1763 - 1) = v1764;
                                  v1763 -= 4;
                                }
                                *(void *)uint64_t v1633 = v1763;
                                *v1635 = v1638;
                                void *v1637 = &v1644[4 * v1643];
                                if (v1639) {
                                  operator delete(v1639);
                                }
                              }
                              else
                              {
                                _DWORD *v1634 = 200;
                                v1638 = v1634 + 1;
                              }
                              *v1635 = v1638;
                              if (!*v14)
                              {
LABEL_4164:
                                if ((*((unsigned char *)__p + 25) & 2) == 0) {
                                  goto LABEL_4165;
                                }
                                uint64_t v1765 = *v12 + 24 * v13;
                                v1767 = (_DWORD **)(v1765 + 8);
                                v1766 = *(_DWORD **)(v1765 + 8);
                                v1769 = (void *)(v1765 + 16);
                                unint64_t v1768 = *(void *)(v1765 + 16);
                                if ((unint64_t)v1766 >= v1768)
                                {
                                  v1771 = *(_DWORD **)v1765;
                                  uint64_t v1772 = ((uint64_t)v1766 - *(void *)v1765) >> 2;
                                  unint64_t v1773 = v1772 + 1;
                                  if ((unint64_t)(v1772 + 1) >> 62) {
                                    sub_566C();
                                  }
                                  uint64_t v1774 = v1768 - (void)v1771;
                                  if (v1774 >> 1 > v1773) {
                                    unint64_t v1773 = v1774 >> 1;
                                  }
                                  if ((unint64_t)v1774 >= 0x7FFFFFFFFFFFFFFCLL) {
                                    unint64_t v1775 = 0x3FFFFFFFFFFFFFFFLL;
                                  }
                                  else {
                                    unint64_t v1775 = v1773;
                                  }
                                  if (v1775)
                                  {
                                    v1776 = (char *)sub_458C8((uint64_t)v1769, v1775);
                                    v1766 = *v1767;
                                    v1771 = *(_DWORD **)v1765;
                                  }
                                  else
                                  {
                                    v1776 = 0;
                                  }
                                  v1871 = &v1776[4 * v1772];
                                  *(_DWORD *)v1871 = 201;
                                  v1770 = v1871 + 4;
                                  while (v1766 != v1771)
                                  {
                                    int v1872 = *--v1766;
                                    *((_DWORD *)v1871 - 1) = v1872;
                                    v1871 -= 4;
                                  }
                                  *(void *)uint64_t v1765 = v1871;
                                  *v1767 = v1770;
                                  void *v1769 = &v1776[4 * v1775];
                                  if (v1771) {
                                    operator delete(v1771);
                                  }
                                }
                                else
                                {
                                  _DWORD *v1766 = 201;
                                  v1770 = v1766 + 1;
                                }
                                *v1767 = v1770;
                                if (!*v14)
                                {
LABEL_4165:
                                  if ((*((unsigned char *)__p + 25) & 4) == 0) {
                                    goto LABEL_4166;
                                  }
                                  uint64_t v1873 = *v12 + 24 * v13;
                                  v1875 = (_DWORD **)(v1873 + 8);
                                  v1874 = *(_DWORD **)(v1873 + 8);
                                  v1877 = (void *)(v1873 + 16);
                                  unint64_t v1876 = *(void *)(v1873 + 16);
                                  if ((unint64_t)v1874 >= v1876)
                                  {
                                    v1879 = *(_DWORD **)v1873;
                                    uint64_t v1880 = ((uint64_t)v1874 - *(void *)v1873) >> 2;
                                    unint64_t v1881 = v1880 + 1;
                                    if ((unint64_t)(v1880 + 1) >> 62) {
                                      sub_566C();
                                    }
                                    uint64_t v1882 = v1876 - (void)v1879;
                                    if (v1882 >> 1 > v1881) {
                                      unint64_t v1881 = v1882 >> 1;
                                    }
                                    if ((unint64_t)v1882 >= 0x7FFFFFFFFFFFFFFCLL) {
                                      unint64_t v1883 = 0x3FFFFFFFFFFFFFFFLL;
                                    }
                                    else {
                                      unint64_t v1883 = v1881;
                                    }
                                    if (v1883)
                                    {
                                      v1884 = (char *)sub_458C8((uint64_t)v1877, v1883);
                                      v1874 = *v1875;
                                      v1879 = *(_DWORD **)v1873;
                                    }
                                    else
                                    {
                                      v1884 = 0;
                                    }
                                    v1970 = &v1884[4 * v1880];
                                    *(_DWORD *)v1970 = 202;
                                    v1878 = v1970 + 4;
                                    while (v1874 != v1879)
                                    {
                                      int v1971 = *--v1874;
                                      *((_DWORD *)v1970 - 1) = v1971;
                                      v1970 -= 4;
                                    }
                                    *(void *)uint64_t v1873 = v1970;
                                    *v1875 = v1878;
                                    void *v1877 = &v1884[4 * v1883];
                                    if (v1879) {
                                      operator delete(v1879);
                                    }
                                  }
                                  else
                                  {
                                    _DWORD *v1874 = 202;
                                    v1878 = v1874 + 1;
                                  }
                                  *v1875 = v1878;
                                  if (!*v14)
                                  {
LABEL_4166:
                                    if ((*((unsigned char *)__p + 25) & 8) == 0) {
                                      goto LABEL_4167;
                                    }
                                    uint64_t v1972 = *v12 + 24 * v13;
                                    v1974 = (_DWORD **)(v1972 + 8);
                                    v1973 = *(_DWORD **)(v1972 + 8);
                                    v1976 = (void *)(v1972 + 16);
                                    unint64_t v1975 = *(void *)(v1972 + 16);
                                    if ((unint64_t)v1973 >= v1975)
                                    {
                                      v1978 = *(_DWORD **)v1972;
                                      uint64_t v1979 = ((uint64_t)v1973 - *(void *)v1972) >> 2;
                                      unint64_t v1980 = v1979 + 1;
                                      if ((unint64_t)(v1979 + 1) >> 62) {
                                        sub_566C();
                                      }
                                      uint64_t v1981 = v1975 - (void)v1978;
                                      if (v1981 >> 1 > v1980) {
                                        unint64_t v1980 = v1981 >> 1;
                                      }
                                      if ((unint64_t)v1981 >= 0x7FFFFFFFFFFFFFFCLL) {
                                        unint64_t v1982 = 0x3FFFFFFFFFFFFFFFLL;
                                      }
                                      else {
                                        unint64_t v1982 = v1980;
                                      }
                                      if (v1982)
                                      {
                                        v1983 = (char *)sub_458C8((uint64_t)v1976, v1982);
                                        v1973 = *v1974;
                                        v1978 = *(_DWORD **)v1972;
                                      }
                                      else
                                      {
                                        v1983 = 0;
                                      }
                                      v2060 = &v1983[4 * v1979];
                                      *(_DWORD *)v2060 = 203;
                                      v1977 = v2060 + 4;
                                      while (v1973 != v1978)
                                      {
                                        int v2061 = *--v1973;
                                        *((_DWORD *)v2060 - 1) = v2061;
                                        v2060 -= 4;
                                      }
                                      *(void *)uint64_t v1972 = v2060;
                                      *v1974 = v1977;
                                      void *v1976 = &v1983[4 * v1982];
                                      if (v1978) {
                                        operator delete(v1978);
                                      }
                                    }
                                    else
                                    {
                                      _DWORD *v1973 = 203;
                                      v1977 = v1973 + 1;
                                    }
                                    *v1974 = v1977;
                                    if (!*v14)
                                    {
LABEL_4167:
                                      if ((*((unsigned char *)__p + 25) & 0x10) == 0) {
                                        goto LABEL_4168;
                                      }
                                      uint64_t v2062 = *v12 + 24 * v13;
                                      v2064 = (_DWORD **)(v2062 + 8);
                                      v2063 = *(_DWORD **)(v2062 + 8);
                                      v2066 = (void *)(v2062 + 16);
                                      unint64_t v2065 = *(void *)(v2062 + 16);
                                      if ((unint64_t)v2063 >= v2065)
                                      {
                                        v2068 = *(_DWORD **)v2062;
                                        uint64_t v2069 = ((uint64_t)v2063 - *(void *)v2062) >> 2;
                                        unint64_t v2070 = v2069 + 1;
                                        if ((unint64_t)(v2069 + 1) >> 62) {
                                          sub_566C();
                                        }
                                        uint64_t v2071 = v2065 - (void)v2068;
                                        if (v2071 >> 1 > v2070) {
                                          unint64_t v2070 = v2071 >> 1;
                                        }
                                        if ((unint64_t)v2071 >= 0x7FFFFFFFFFFFFFFCLL) {
                                          unint64_t v2072 = 0x3FFFFFFFFFFFFFFFLL;
                                        }
                                        else {
                                          unint64_t v2072 = v2070;
                                        }
                                        if (v2072)
                                        {
                                          v2073 = (char *)sub_458C8((uint64_t)v2066, v2072);
                                          v2063 = *v2064;
                                          v2068 = *(_DWORD **)v2062;
                                        }
                                        else
                                        {
                                          v2073 = 0;
                                        }
                                        v2145 = &v2073[4 * v2069];
                                        *(_DWORD *)v2145 = 204;
                                        v2067 = v2145 + 4;
                                        while (v2063 != v2068)
                                        {
                                          int v2146 = *--v2063;
                                          *((_DWORD *)v2145 - 1) = v2146;
                                          v2145 -= 4;
                                        }
                                        *(void *)uint64_t v2062 = v2145;
                                        *v2064 = v2067;
                                        void *v2066 = &v2073[4 * v2072];
                                        if (v2068) {
                                          operator delete(v2068);
                                        }
                                      }
                                      else
                                      {
                                        _DWORD *v2063 = 204;
                                        v2067 = v2063 + 1;
                                      }
                                      *v2064 = v2067;
                                      if (!*v14)
                                      {
LABEL_4168:
                                        if ((*((unsigned char *)__p + 25) & 0x20) == 0) {
                                          goto LABEL_4169;
                                        }
                                        uint64_t v2147 = *v12 + 24 * v13;
                                        v2149 = (_DWORD **)(v2147 + 8);
                                        v2148 = *(_DWORD **)(v2147 + 8);
                                        v2151 = (void *)(v2147 + 16);
                                        unint64_t v2150 = *(void *)(v2147 + 16);
                                        if ((unint64_t)v2148 >= v2150)
                                        {
                                          v2153 = *(_DWORD **)v2147;
                                          uint64_t v2154 = ((uint64_t)v2148 - *(void *)v2147) >> 2;
                                          unint64_t v2155 = v2154 + 1;
                                          if ((unint64_t)(v2154 + 1) >> 62) {
                                            sub_566C();
                                          }
                                          uint64_t v2156 = v2150 - (void)v2153;
                                          if (v2156 >> 1 > v2155) {
                                            unint64_t v2155 = v2156 >> 1;
                                          }
                                          if ((unint64_t)v2156 >= 0x7FFFFFFFFFFFFFFCLL) {
                                            unint64_t v2157 = 0x3FFFFFFFFFFFFFFFLL;
                                          }
                                          else {
                                            unint64_t v2157 = v2155;
                                          }
                                          if (v2157)
                                          {
                                            v2158 = (char *)sub_458C8((uint64_t)v2151, v2157);
                                            v2148 = *v2149;
                                            v2153 = *(_DWORD **)v2147;
                                          }
                                          else
                                          {
                                            v2158 = 0;
                                          }
                                          v2221 = &v2158[4 * v2154];
                                          *(_DWORD *)v2221 = 205;
                                          v2152 = v2221 + 4;
                                          while (v2148 != v2153)
                                          {
                                            int v2222 = *--v2148;
                                            *((_DWORD *)v2221 - 1) = v2222;
                                            v2221 -= 4;
                                          }
                                          *(void *)uint64_t v2147 = v2221;
                                          *v2149 = v2152;
                                          void *v2151 = &v2158[4 * v2157];
                                          if (v2153) {
                                            operator delete(v2153);
                                          }
                                        }
                                        else
                                        {
                                          _DWORD *v2148 = 205;
                                          v2152 = v2148 + 1;
                                        }
                                        *v2149 = v2152;
                                        if (!*v14)
                                        {
LABEL_4169:
                                          if ((*((unsigned char *)__p + 25) & 0x40) == 0) {
                                            goto LABEL_4170;
                                          }
                                          uint64_t v2223 = *v12 + 24 * v13;
                                          v2225 = (_DWORD **)(v2223 + 8);
                                          v2224 = *(_DWORD **)(v2223 + 8);
                                          v2227 = (void *)(v2223 + 16);
                                          unint64_t v2226 = *(void *)(v2223 + 16);
                                          if ((unint64_t)v2224 >= v2226)
                                          {
                                            v2229 = *(_DWORD **)v2223;
                                            uint64_t v2230 = ((uint64_t)v2224 - *(void *)v2223) >> 2;
                                            unint64_t v2231 = v2230 + 1;
                                            if ((unint64_t)(v2230 + 1) >> 62) {
                                              sub_566C();
                                            }
                                            uint64_t v2232 = v2226 - (void)v2229;
                                            if (v2232 >> 1 > v2231) {
                                              unint64_t v2231 = v2232 >> 1;
                                            }
                                            if ((unint64_t)v2232 >= 0x7FFFFFFFFFFFFFFCLL) {
                                              unint64_t v2233 = 0x3FFFFFFFFFFFFFFFLL;
                                            }
                                            else {
                                              unint64_t v2233 = v2231;
                                            }
                                            if (v2233)
                                            {
                                              v2234 = (char *)sub_458C8((uint64_t)v2227, v2233);
                                              v2224 = *v2225;
                                              v2229 = *(_DWORD **)v2223;
                                            }
                                            else
                                            {
                                              v2234 = 0;
                                            }
                                            v2292 = &v2234[4 * v2230];
                                            *(_DWORD *)v2292 = 206;
                                            v2228 = v2292 + 4;
                                            while (v2224 != v2229)
                                            {
                                              int v2293 = *--v2224;
                                              *((_DWORD *)v2292 - 1) = v2293;
                                              v2292 -= 4;
                                            }
                                            *(void *)uint64_t v2223 = v2292;
                                            *v2225 = v2228;
                                            void *v2227 = &v2234[4 * v2233];
                                            if (v2229) {
                                              operator delete(v2229);
                                            }
                                          }
                                          else
                                          {
                                            _DWORD *v2224 = 206;
                                            v2228 = v2224 + 1;
                                          }
                                          *v2225 = v2228;
                                          if (!*v14)
                                          {
LABEL_4170:
                                            if ((*((unsigned char *)__p + 25) & 0x80) == 0) {
                                              goto LABEL_4171;
                                            }
                                            uint64_t v2294 = *v12 + 24 * v13;
                                            v2296 = (_DWORD **)(v2294 + 8);
                                            v2295 = *(_DWORD **)(v2294 + 8);
                                            v2298 = (void *)(v2294 + 16);
                                            unint64_t v2297 = *(void *)(v2294 + 16);
                                            if ((unint64_t)v2295 >= v2297)
                                            {
                                              v2300 = *(_DWORD **)v2294;
                                              uint64_t v2301 = ((uint64_t)v2295 - *(void *)v2294) >> 2;
                                              unint64_t v2302 = v2301 + 1;
                                              if ((unint64_t)(v2301 + 1) >> 62) {
                                                sub_566C();
                                              }
                                              uint64_t v2303 = v2297 - (void)v2300;
                                              if (v2303 >> 1 > v2302) {
                                                unint64_t v2302 = v2303 >> 1;
                                              }
                                              if ((unint64_t)v2303 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                unint64_t v2304 = 0x3FFFFFFFFFFFFFFFLL;
                                              }
                                              else {
                                                unint64_t v2304 = v2302;
                                              }
                                              if (v2304)
                                              {
                                                v2305 = (char *)sub_458C8((uint64_t)v2298, v2304);
                                                v2295 = *v2296;
                                                v2300 = *(_DWORD **)v2294;
                                              }
                                              else
                                              {
                                                v2305 = 0;
                                              }
                                              v2362 = &v2305[4 * v2301];
                                              *(_DWORD *)v2362 = 207;
                                              v2299 = v2362 + 4;
                                              while (v2295 != v2300)
                                              {
                                                int v2363 = *--v2295;
                                                *((_DWORD *)v2362 - 1) = v2363;
                                                v2362 -= 4;
                                              }
                                              *(void *)uint64_t v2294 = v2362;
                                              *v2296 = v2299;
                                              void *v2298 = &v2305[4 * v2304];
                                              if (v2300) {
                                                operator delete(v2300);
                                              }
                                            }
                                            else
                                            {
                                              _DWORD *v2295 = 207;
                                              v2299 = v2295 + 1;
                                            }
                                            *v2296 = v2299;
                                            if (!*v14)
                                            {
LABEL_4171:
                                              if ((*((unsigned char *)__p + 26) & 1) == 0) {
                                                goto LABEL_4172;
                                              }
                                              uint64_t v2364 = *v12 + 24 * v13;
                                              v2366 = (_DWORD **)(v2364 + 8);
                                              v2365 = *(_DWORD **)(v2364 + 8);
                                              v2368 = (void *)(v2364 + 16);
                                              unint64_t v2367 = *(void *)(v2364 + 16);
                                              if ((unint64_t)v2365 >= v2367)
                                              {
                                                v2370 = *(_DWORD **)v2364;
                                                uint64_t v2371 = ((uint64_t)v2365 - *(void *)v2364) >> 2;
                                                unint64_t v2372 = v2371 + 1;
                                                if ((unint64_t)(v2371 + 1) >> 62) {
                                                  sub_566C();
                                                }
                                                uint64_t v2373 = v2367 - (void)v2370;
                                                if (v2373 >> 1 > v2372) {
                                                  unint64_t v2372 = v2373 >> 1;
                                                }
                                                if ((unint64_t)v2373 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                  unint64_t v2374 = 0x3FFFFFFFFFFFFFFFLL;
                                                }
                                                else {
                                                  unint64_t v2374 = v2372;
                                                }
                                                if (v2374)
                                                {
                                                  v2375 = (char *)sub_458C8((uint64_t)v2368, v2374);
                                                  v2365 = *v2366;
                                                  v2370 = *(_DWORD **)v2364;
                                                }
                                                else
                                                {
                                                  v2375 = 0;
                                                }
                                                v2432 = &v2375[4 * v2371];
                                                *(_DWORD *)v2432 = 208;
                                                v2369 = v2432 + 4;
                                                while (v2365 != v2370)
                                                {
                                                  int v2433 = *--v2365;
                                                  *((_DWORD *)v2432 - 1) = v2433;
                                                  v2432 -= 4;
                                                }
                                                *(void *)uint64_t v2364 = v2432;
                                                *v2366 = v2369;
                                                void *v2368 = &v2375[4 * v2374];
                                                if (v2370) {
                                                  operator delete(v2370);
                                                }
                                              }
                                              else
                                              {
                                                _DWORD *v2365 = 208;
                                                v2369 = v2365 + 1;
                                              }
                                              *v2366 = v2369;
                                              if (!*v14)
                                              {
LABEL_4172:
                                                if ((*((unsigned char *)__p + 26) & 2) != 0)
                                                {
                                                  uint64_t v247 = *v12 + 24 * v13;
                                                  uint64_t v249 = (int **)(v247 + 8);
                                                  int v248 = *(int **)(v247 + 8);
                                                  uint64_t v251 = (void *)(v247 + 16);
                                                  unint64_t v2434 = *(void *)(v247 + 16);
                                                  if ((unint64_t)v248 < v2434)
                                                  {
                                                    int v252 = 209;
                                                    goto LABEL_2186;
                                                  }
                                                  uint64_t v253 = *(int **)v247;
                                                  uint64_t v2435 = ((uint64_t)v248 - *(void *)v247) >> 2;
                                                  unint64_t v2436 = v2435 + 1;
                                                  if ((unint64_t)(v2435 + 1) >> 62) {
                                                    sub_566C();
                                                  }
                                                  uint64_t v2437 = v2434 - (void)v253;
                                                  if (v2437 >> 1 > v2436) {
                                                    unint64_t v2436 = v2437 >> 1;
                                                  }
                                                  if ((unint64_t)v2437 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                    unint64_t v257 = 0x3FFFFFFFFFFFFFFFLL;
                                                  }
                                                  else {
                                                    unint64_t v257 = v2436;
                                                  }
                                                  if (v257)
                                                  {
                                                    unint64_t v258 = (char *)sub_458C8((uint64_t)v251, v257);
                                                    int v248 = *v249;
                                                    uint64_t v253 = *(int **)v247;
                                                  }
                                                  else
                                                  {
                                                    unint64_t v258 = 0;
                                                  }
                                                  unint64_t v473 = &v258[4 * v2435];
                                                  *(_DWORD *)unint64_t v473 = 209;
                                                  unint64_t v474 = (int *)(v473 + 4);
                                                  while (v248 != v253)
                                                  {
                                                    int v2494 = *--v248;
                                                    *((_DWORD *)v473 - 1) = v2494;
                                                    v473 -= 4;
                                                  }
                                                  goto LABEL_3834;
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          break;
        case 8:
          if (!*v14)
          {
            if ((*((unsigned char *)__p + 3) & 1) == 0) {
              goto LABEL_468;
            }
            uint64_t v105 = *v12 + 24 * v13;
            unint64_t v107 = (_DWORD **)(v105 + 8);
            unint64_t v106 = *(_DWORD **)(v105 + 8);
            uint64_t v109 = (void *)(v105 + 16);
            unint64_t v108 = *(void *)(v105 + 16);
            if ((unint64_t)v106 >= v108)
            {
              uint64_t v201 = *(_DWORD **)v105;
              uint64_t v202 = ((uint64_t)v106 - *(void *)v105) >> 2;
              unint64_t v203 = v202 + 1;
              if ((unint64_t)(v202 + 1) >> 62) {
                sub_566C();
              }
              uint64_t v204 = v108 - (void)v201;
              if (v204 >> 1 > v203) {
                unint64_t v203 = v204 >> 1;
              }
              if ((unint64_t)v204 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v205 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v205 = v203;
              }
              if (v205)
              {
                unint64_t v206 = (char *)sub_458C8((uint64_t)v109, v205);
                unint64_t v106 = *v107;
                uint64_t v201 = *(_DWORD **)v105;
              }
              else
              {
                unint64_t v206 = 0;
              }
              uint64_t v413 = &v206[4 * v202];
              *(_DWORD *)uint64_t v413 = 24;
              unsigned int v110 = v413 + 4;
              while (v106 != v201)
              {
                int v414 = *--v106;
                *((_DWORD *)v413 - 1) = v414;
                v413 -= 4;
              }
              *(void *)uint64_t v105 = v413;
              *unint64_t v107 = v110;
              void *v109 = &v206[4 * v205];
              if (v201) {
                operator delete(v201);
              }
            }
            else
            {
              *unint64_t v106 = 24;
              unsigned int v110 = v106 + 1;
            }
            *unint64_t v107 = v110;
            if (!*v14)
            {
LABEL_468:
              if ((*((unsigned char *)__p + 3) & 2) == 0) {
                goto LABEL_1270;
              }
              uint64_t v415 = *v12 + 24 * v13;
              unint64_t v417 = (_DWORD **)(v415 + 8);
              uint64_t v416 = *(_DWORD **)(v415 + 8);
              unint64_t v419 = (void *)(v415 + 16);
              unint64_t v418 = *(void *)(v415 + 16);
              if ((unint64_t)v416 >= v418)
              {
                uint64_t v421 = *(_DWORD **)v415;
                uint64_t v422 = ((uint64_t)v416 - *(void *)v415) >> 2;
                unint64_t v423 = v422 + 1;
                if ((unint64_t)(v422 + 1) >> 62) {
                  sub_566C();
                }
                uint64_t v424 = v418 - (void)v421;
                if (v424 >> 1 > v423) {
                  unint64_t v423 = v424 >> 1;
                }
                if ((unint64_t)v424 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v425 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v425 = v423;
                }
                if (v425)
                {
                  uint64_t v426 = (char *)sub_458C8((uint64_t)v419, v425);
                  uint64_t v416 = *v417;
                  uint64_t v421 = *(_DWORD **)v415;
                }
                else
                {
                  uint64_t v426 = 0;
                }
                unsigned __int8 v630 = &v426[4 * v422];
                *(_DWORD *)unsigned __int8 v630 = 25;
                v420 = v630 + 4;
                while (v416 != v421)
                {
                  int v631 = *--v416;
                  *((_DWORD *)v630 - 1) = v631;
                  v630 -= 4;
                }
                *(void *)uint64_t v415 = v630;
                char *v417 = v420;
                *unint64_t v419 = &v426[4 * v425];
                if (v421) {
                  operator delete(v421);
                }
              }
              else
              {
                _DWORD *v416 = 25;
                v420 = v416 + 1;
              }
              char *v417 = v420;
              if (!*v14)
              {
LABEL_1270:
                if ((*((unsigned char *)__p + 3) & 4) == 0) {
                  goto LABEL_4173;
                }
                uint64_t v632 = *v12 + 24 * v13;
                v634 = (_DWORD **)(v632 + 8);
                long long v633 = *(_DWORD **)(v632 + 8);
                v636 = (void *)(v632 + 16);
                unint64_t v635 = *(void *)(v632 + 16);
                if ((unint64_t)v633 >= v635)
                {
                  v638 = *(_DWORD **)v632;
                  uint64_t v639 = ((uint64_t)v633 - *(void *)v632) >> 2;
                  unint64_t v640 = v639 + 1;
                  if ((unint64_t)(v639 + 1) >> 62) {
                    sub_566C();
                  }
                  uint64_t v641 = v635 - (void)v638;
                  if (v641 >> 1 > v640) {
                    unint64_t v640 = v641 >> 1;
                  }
                  if ((unint64_t)v641 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v642 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v642 = v640;
                  }
                  if (v642)
                  {
                    v643 = (char *)sub_458C8((uint64_t)v636, v642);
                    long long v633 = *v634;
                    v638 = *(_DWORD **)v632;
                  }
                  else
                  {
                    v643 = 0;
                  }
                  v824 = &v643[4 * v639];
                  *(_DWORD *)v824 = 26;
                  v637 = v824 + 4;
                  while (v633 != v638)
                  {
                    int v825 = *--v633;
                    *((_DWORD *)v824 - 1) = v825;
                    v824 -= 4;
                  }
                  *(void *)uint64_t v632 = v824;
                  *v634 = v637;
                  void *v636 = &v643[4 * v642];
                  if (v638) {
                    operator delete(v638);
                  }
                }
                else
                {
                  *long long v633 = 26;
                  v637 = v633 + 1;
                }
                *v634 = v637;
                if (!*v14)
                {
LABEL_4173:
                  if ((*((unsigned char *)__p + 3) & 8) == 0) {
                    goto LABEL_4174;
                  }
                  uint64_t v826 = *v12 + 24 * v13;
                  v828 = (_DWORD **)(v826 + 8);
                  v827 = *(_DWORD **)(v826 + 8);
                  v830 = (void *)(v826 + 16);
                  unint64_t v829 = *(void *)(v826 + 16);
                  if ((unint64_t)v827 >= v829)
                  {
                    v832 = *(_DWORD **)v826;
                    uint64_t v833 = ((uint64_t)v827 - *(void *)v826) >> 2;
                    unint64_t v834 = v833 + 1;
                    if ((unint64_t)(v833 + 1) >> 62) {
                      sub_566C();
                    }
                    uint64_t v835 = v829 - (void)v832;
                    if (v835 >> 1 > v834) {
                      unint64_t v834 = v835 >> 1;
                    }
                    if ((unint64_t)v835 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v836 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v836 = v834;
                    }
                    if (v836)
                    {
                      v837 = (char *)sub_458C8((uint64_t)v830, v836);
                      v827 = *v828;
                      v832 = *(_DWORD **)v826;
                    }
                    else
                    {
                      v837 = 0;
                    }
                    v1008 = &v837[4 * v833];
                    *(_DWORD *)v1008 = 27;
                    v831 = v1008 + 4;
                    while (v827 != v832)
                    {
                      int v1009 = *--v827;
                      *((_DWORD *)v1008 - 1) = v1009;
                      v1008 -= 4;
                    }
                    *(void *)uint64_t v826 = v1008;
                    *v828 = v831;
                    void *v830 = &v837[4 * v836];
                    if (v832) {
                      operator delete(v832);
                    }
                  }
                  else
                  {
                    _DWORD *v827 = 27;
                    v831 = v827 + 1;
                  }
                  *v828 = v831;
                  if (!*v14)
                  {
LABEL_4174:
                    if ((*((unsigned char *)__p + 3) & 0x10) != 0)
                    {
                      uint64_t v247 = *v12 + 24 * v13;
                      uint64_t v249 = (int **)(v247 + 8);
                      int v248 = *(int **)(v247 + 8);
                      uint64_t v251 = (void *)(v247 + 16);
                      unint64_t v1010 = *(void *)(v247 + 16);
                      if ((unint64_t)v248 < v1010)
                      {
                        int v252 = 28;
                        goto LABEL_2186;
                      }
                      uint64_t v253 = *(int **)v247;
                      uint64_t v1011 = ((uint64_t)v248 - *(void *)v247) >> 2;
                      unint64_t v1012 = v1011 + 1;
                      if ((unint64_t)(v1011 + 1) >> 62) {
                        sub_566C();
                      }
                      uint64_t v1013 = v1010 - (void)v253;
                      if (v1013 >> 1 > v1012) {
                        unint64_t v1012 = v1013 >> 1;
                      }
                      if ((unint64_t)v1013 >= 0x7FFFFFFFFFFFFFFCLL) {
                        unint64_t v257 = 0x3FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v257 = v1012;
                      }
                      if (v257)
                      {
                        unint64_t v258 = (char *)sub_458C8((uint64_t)v251, v257);
                        int v248 = *v249;
                        uint64_t v253 = *(int **)v247;
                      }
                      else
                      {
                        unint64_t v258 = 0;
                      }
                      unint64_t v473 = &v258[4 * v1011];
                      *(_DWORD *)unint64_t v473 = 28;
                      unint64_t v474 = (int *)(v473 + 4);
                      while (v248 != v253)
                      {
                        int v1182 = *--v248;
                        *((_DWORD *)v473 - 1) = v1182;
                        v473 -= 4;
                      }
                      goto LABEL_3834;
                    }
                  }
                }
              }
            }
          }
          break;
        case 9:
          if (!*v14)
          {
            if ((*((unsigned char *)__p + 8) & 0x40) == 0) {
              goto LABEL_306;
            }
            uint64_t v45 = *v12 + 24 * v13;
            uint64_t v47 = (_DWORD **)(v45 + 8);
            uint64_t v46 = *(_DWORD **)(v45 + 8);
            uint64_t v49 = (void *)(v45 + 16);
            unint64_t v48 = *(void *)(v45 + 16);
            if ((unint64_t)v46 >= v48)
            {
              unint64_t v147 = *(_DWORD **)v45;
              uint64_t v148 = ((uint64_t)v46 - *(void *)v45) >> 2;
              unint64_t v149 = v148 + 1;
              if ((unint64_t)(v148 + 1) >> 62) {
                sub_566C();
              }
              uint64_t v150 = v48 - (void)v147;
              if (v150 >> 1 > v149) {
                unint64_t v149 = v150 >> 1;
              }
              if ((unint64_t)v150 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v151 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v151 = v149;
              }
              if (v151)
              {
                uint64_t v152 = (char *)sub_458C8((uint64_t)v49, v151);
                uint64_t v46 = *v47;
                unint64_t v147 = *(_DWORD **)v45;
              }
              else
              {
                uint64_t v152 = 0;
              }
              unint64_t v287 = &v152[4 * v148];
              *(_DWORD *)unint64_t v287 = 70;
              uint64_t v50 = v287 + 4;
              while (v46 != v147)
              {
                int v288 = *--v46;
                *((_DWORD *)v287 - 1) = v288;
                v287 -= 4;
              }
              *(void *)uint64_t v45 = v287;
              *uint64_t v47 = v50;
              void *v49 = &v152[4 * v151];
              if (v147) {
                operator delete(v147);
              }
            }
            else
            {
              *uint64_t v46 = 70;
              uint64_t v50 = v46 + 1;
            }
            *uint64_t v47 = v50;
            if (!*v14)
            {
LABEL_306:
              if ((*((unsigned char *)__p + 8) & 0x80) == 0) {
                goto LABEL_3801;
              }
              uint64_t v289 = *v12 + 24 * v13;
              uint64_t v291 = (_DWORD **)(v289 + 8);
              __int16 v290 = *(_DWORD **)(v289 + 8);
              unint64_t v293 = (void *)(v289 + 16);
              unint64_t v292 = *(void *)(v289 + 16);
              if ((unint64_t)v290 >= v292)
              {
                uint64_t v295 = *(_DWORD **)v289;
                uint64_t v296 = ((uint64_t)v290 - *(void *)v289) >> 2;
                unint64_t v297 = v296 + 1;
                if ((unint64_t)(v296 + 1) >> 62) {
                  sub_566C();
                }
                uint64_t v298 = v292 - (void)v295;
                if (v298 >> 1 > v297) {
                  unint64_t v297 = v298 >> 1;
                }
                if ((unint64_t)v298 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v299 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v299 = v297;
                }
                if (v299)
                {
                  unint64_t v300 = (char *)sub_458C8((uint64_t)v293, v299);
                  __int16 v290 = *v291;
                  uint64_t v295 = *(_DWORD **)v289;
                }
                else
                {
                  unint64_t v300 = 0;
                }
                uint64_t v504 = &v300[4 * v296];
                *(_DWORD *)uint64_t v504 = 71;
                unint64_t v294 = v504 + 4;
                while (v290 != v295)
                {
                  int v505 = *--v290;
                  *((_DWORD *)v504 - 1) = v505;
                  v504 -= 4;
                }
                *(void *)uint64_t v289 = v504;
                void *v291 = v294;
                *unint64_t v293 = &v300[4 * v299];
                if (v295) {
                  operator delete(v295);
                }
              }
              else
              {
                _DWORD *v290 = 71;
                unint64_t v294 = v290 + 1;
              }
              void *v291 = v294;
              if (!*v14)
              {
LABEL_3801:
                if ((*((unsigned char *)__p + 9) & 1) == 0) {
                  goto LABEL_4175;
                }
                uint64_t v506 = *v12 + 24 * v13;
                v508 = (_DWORD **)(v506 + 8);
                v507 = *(_DWORD **)(v506 + 8);
                v510 = (void *)(v506 + 16);
                unint64_t v509 = *(void *)(v506 + 16);
                if ((unint64_t)v507 >= v509)
                {
                  unint64_t v512 = *(_DWORD **)v506;
                  uint64_t v513 = ((uint64_t)v507 - *(void *)v506) >> 2;
                  unint64_t v514 = v513 + 1;
                  if ((unint64_t)(v513 + 1) >> 62) {
                    sub_566C();
                  }
                  uint64_t v515 = v509 - (void)v512;
                  if (v515 >> 1 > v514) {
                    unint64_t v514 = v515 >> 1;
                  }
                  if ((unint64_t)v515 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v516 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v516 = v514;
                  }
                  if (v516)
                  {
                    v517 = (char *)sub_458C8((uint64_t)v510, v516);
                    v507 = *v508;
                    unint64_t v512 = *(_DWORD **)v506;
                  }
                  else
                  {
                    v517 = 0;
                  }
                  v706 = &v517[4 * v513];
                  *(_DWORD *)v706 = 72;
                  uint64_t v511 = v706 + 4;
                  while (v507 != v512)
                  {
                    int v707 = *--v507;
                    *((_DWORD *)v706 - 1) = v707;
                    v706 -= 4;
                  }
                  *(void *)uint64_t v506 = v706;
                  char *v508 = v511;
                  void *v510 = &v517[4 * v516];
                  if (v512) {
                    operator delete(v512);
                  }
                }
                else
                {
                  _DWORD *v507 = 72;
                  uint64_t v511 = v507 + 1;
                }
                char *v508 = v511;
                if (!*v14)
                {
LABEL_4175:
                  if ((*((unsigned char *)__p + 9) & 2) == 0) {
                    goto LABEL_4176;
                  }
                  uint64_t v708 = *v12 + 24 * v13;
                  v710 = (_DWORD **)(v708 + 8);
                  v709 = *(_DWORD **)(v708 + 8);
                  v712 = (void *)(v708 + 16);
                  unint64_t v711 = *(void *)(v708 + 16);
                  if ((unint64_t)v709 >= v711)
                  {
                    v714 = *(_DWORD **)v708;
                    uint64_t v715 = ((uint64_t)v709 - *(void *)v708) >> 2;
                    unint64_t v716 = v715 + 1;
                    if ((unint64_t)(v715 + 1) >> 62) {
                      sub_566C();
                    }
                    uint64_t v717 = v711 - (void)v714;
                    if (v717 >> 1 > v716) {
                      unint64_t v716 = v717 >> 1;
                    }
                    if ((unint64_t)v717 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v718 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v718 = v716;
                    }
                    if (v718)
                    {
                      v719 = (char *)sub_458C8((uint64_t)v712, v718);
                      v709 = *v710;
                      v714 = *(_DWORD **)v708;
                    }
                    else
                    {
                      v719 = 0;
                    }
                    v895 = &v719[4 * v715];
                    *(_DWORD *)v895 = 73;
                    v713 = v895 + 4;
                    while (v709 != v714)
                    {
                      int v896 = *--v709;
                      *((_DWORD *)v895 - 1) = v896;
                      v895 -= 4;
                    }
                    *(void *)uint64_t v708 = v895;
                    *v710 = v713;
                    void *v712 = &v719[4 * v718];
                    if (v714) {
                      operator delete(v714);
                    }
                  }
                  else
                  {
                    _DWORD *v709 = 73;
                    v713 = v709 + 1;
                  }
                  *v710 = v713;
                  if (!*v14)
                  {
LABEL_4176:
                    if ((*((unsigned char *)__p + 9) & 4) == 0) {
                      goto LABEL_4177;
                    }
                    uint64_t v897 = *v12 + 24 * v13;
                    v899 = (_DWORD **)(v897 + 8);
                    v898 = *(_DWORD **)(v897 + 8);
                    v901 = (void *)(v897 + 16);
                    unint64_t v900 = *(void *)(v897 + 16);
                    if ((unint64_t)v898 >= v900)
                    {
                      v903 = *(_DWORD **)v897;
                      uint64_t v904 = ((uint64_t)v898 - *(void *)v897) >> 2;
                      unint64_t v905 = v904 + 1;
                      if ((unint64_t)(v904 + 1) >> 62) {
                        sub_566C();
                      }
                      uint64_t v906 = v900 - (void)v903;
                      if (v906 >> 1 > v905) {
                        unint64_t v905 = v906 >> 1;
                      }
                      if ((unint64_t)v906 >= 0x7FFFFFFFFFFFFFFCLL) {
                        unint64_t v907 = 0x3FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v907 = v905;
                      }
                      if (v907)
                      {
                        v908 = (char *)sub_458C8((uint64_t)v901, v907);
                        v898 = *v899;
                        v903 = *(_DWORD **)v897;
                      }
                      else
                      {
                        v908 = 0;
                      }
                      v1070 = &v908[4 * v904];
                      *(_DWORD *)v1070 = 74;
                      v902 = v1070 + 4;
                      while (v898 != v903)
                      {
                        int v1071 = *--v898;
                        *((_DWORD *)v1070 - 1) = v1071;
                        v1070 -= 4;
                      }
                      *(void *)uint64_t v897 = v1070;
                      *v899 = v902;
                      void *v901 = &v908[4 * v907];
                      if (v903) {
                        operator delete(v903);
                      }
                    }
                    else
                    {
                      _DWORD *v898 = 74;
                      v902 = v898 + 1;
                    }
                    *v899 = v902;
                    if (!*v14)
                    {
LABEL_4177:
                      if ((*((unsigned char *)__p + 9) & 8) == 0) {
                        goto LABEL_4178;
                      }
                      uint64_t v1072 = *v12 + 24 * v13;
                      v1074 = (_DWORD **)(v1072 + 8);
                      v1073 = *(_DWORD **)(v1072 + 8);
                      v1076 = (void *)(v1072 + 16);
                      unint64_t v1075 = *(void *)(v1072 + 16);
                      if ((unint64_t)v1073 >= v1075)
                      {
                        v1078 = *(_DWORD **)v1072;
                        uint64_t v1079 = ((uint64_t)v1073 - *(void *)v1072) >> 2;
                        unint64_t v1080 = v1079 + 1;
                        if ((unint64_t)(v1079 + 1) >> 62) {
                          sub_566C();
                        }
                        uint64_t v1081 = v1075 - (void)v1078;
                        if (v1081 >> 1 > v1080) {
                          unint64_t v1080 = v1081 >> 1;
                        }
                        if ((unint64_t)v1081 >= 0x7FFFFFFFFFFFFFFCLL) {
                          unint64_t v1082 = 0x3FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v1082 = v1080;
                        }
                        if (v1082)
                        {
                          v1083 = (char *)sub_458C8((uint64_t)v1076, v1082);
                          v1073 = *v1074;
                          v1078 = *(_DWORD **)v1072;
                        }
                        else
                        {
                          v1083 = 0;
                        }
                        v1235 = &v1083[4 * v1079];
                        *(_DWORD *)v1235 = 75;
                        v1077 = v1235 + 4;
                        while (v1073 != v1078)
                        {
                          int v1236 = *--v1073;
                          *((_DWORD *)v1235 - 1) = v1236;
                          v1235 -= 4;
                        }
                        *(void *)uint64_t v1072 = v1235;
                        *v1074 = v1077;
                        void *v1076 = &v1083[4 * v1082];
                        if (v1078) {
                          operator delete(v1078);
                        }
                      }
                      else
                      {
                        _DWORD *v1073 = 75;
                        v1077 = v1073 + 1;
                      }
                      *v1074 = v1077;
                      if (!*v14)
                      {
LABEL_4178:
                        if ((*((unsigned char *)__p + 9) & 0x10) == 0) {
                          goto LABEL_4179;
                        }
                        uint64_t v1237 = *v12 + 24 * v13;
                        v1239 = (_DWORD **)(v1237 + 8);
                        v1238 = *(_DWORD **)(v1237 + 8);
                        v1241 = (void *)(v1237 + 16);
                        unint64_t v1240 = *(void *)(v1237 + 16);
                        if ((unint64_t)v1238 >= v1240)
                        {
                          v1243 = *(_DWORD **)v1237;
                          uint64_t v1244 = ((uint64_t)v1238 - *(void *)v1237) >> 2;
                          unint64_t v1245 = v1244 + 1;
                          if ((unint64_t)(v1244 + 1) >> 62) {
                            sub_566C();
                          }
                          uint64_t v1246 = v1240 - (void)v1243;
                          if (v1246 >> 1 > v1245) {
                            unint64_t v1245 = v1246 >> 1;
                          }
                          if ((unint64_t)v1246 >= 0x7FFFFFFFFFFFFFFCLL) {
                            unint64_t v1247 = 0x3FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v1247 = v1245;
                          }
                          if (v1247)
                          {
                            v1248 = (char *)sub_458C8((uint64_t)v1241, v1247);
                            v1238 = *v1239;
                            v1243 = *(_DWORD **)v1237;
                          }
                          else
                          {
                            v1248 = 0;
                          }
                          v1376 = &v1248[4 * v1244];
                          *(_DWORD *)v1376 = 76;
                          v1242 = v1376 + 4;
                          while (v1238 != v1243)
                          {
                            int v1377 = *--v1238;
                            *((_DWORD *)v1376 - 1) = v1377;
                            v1376 -= 4;
                          }
                          *(void *)uint64_t v1237 = v1376;
                          *v1239 = v1242;
                          void *v1241 = &v1248[4 * v1247];
                          if (v1243) {
                            operator delete(v1243);
                          }
                        }
                        else
                        {
                          _DWORD *v1238 = 76;
                          v1242 = v1238 + 1;
                        }
                        *v1239 = v1242;
                        if (!*v14)
                        {
LABEL_4179:
                          if ((*((unsigned char *)__p + 9) & 0x20) == 0) {
                            goto LABEL_4180;
                          }
                          uint64_t v1378 = *v12 + 24 * v13;
                          v1380 = (_DWORD **)(v1378 + 8);
                          v1379 = *(_DWORD **)(v1378 + 8);
                          v1382 = (void *)(v1378 + 16);
                          unint64_t v1381 = *(void *)(v1378 + 16);
                          if ((unint64_t)v1379 >= v1381)
                          {
                            v1384 = *(_DWORD **)v1378;
                            uint64_t v1385 = ((uint64_t)v1379 - *(void *)v1378) >> 2;
                            unint64_t v1386 = v1385 + 1;
                            if ((unint64_t)(v1385 + 1) >> 62) {
                              sub_566C();
                            }
                            uint64_t v1387 = v1381 - (void)v1384;
                            if (v1387 >> 1 > v1386) {
                              unint64_t v1386 = v1387 >> 1;
                            }
                            if ((unint64_t)v1387 >= 0x7FFFFFFFFFFFFFFCLL) {
                              unint64_t v1388 = 0x3FFFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v1388 = v1386;
                            }
                            if (v1388)
                            {
                              v1389 = (char *)sub_458C8((uint64_t)v1382, v1388);
                              v1379 = *v1380;
                              v1384 = *(_DWORD **)v1378;
                            }
                            else
                            {
                              v1389 = 0;
                            }
                            v1519 = &v1389[4 * v1385];
                            *(_DWORD *)v1519 = 77;
                            v1383 = v1519 + 4;
                            while (v1379 != v1384)
                            {
                              int v1520 = *--v1379;
                              *((_DWORD *)v1519 - 1) = v1520;
                              v1519 -= 4;
                            }
                            *(void *)uint64_t v1378 = v1519;
                            *v1380 = v1383;
                            void *v1382 = &v1389[4 * v1388];
                            if (v1384) {
                              operator delete(v1384);
                            }
                          }
                          else
                          {
                            _DWORD *v1379 = 77;
                            v1383 = v1379 + 1;
                          }
                          *v1380 = v1383;
                          if (!*v14)
                          {
LABEL_4180:
                            if ((*((unsigned char *)__p + 9) & 0x40) == 0) {
                              goto LABEL_4181;
                            }
                            uint64_t v1521 = *v12 + 24 * v13;
                            v1523 = (_DWORD **)(v1521 + 8);
                            v1522 = *(_DWORD **)(v1521 + 8);
                            v1525 = (void *)(v1521 + 16);
                            unint64_t v1524 = *(void *)(v1521 + 16);
                            if ((unint64_t)v1522 >= v1524)
                            {
                              v1527 = *(_DWORD **)v1521;
                              uint64_t v1528 = ((uint64_t)v1522 - *(void *)v1521) >> 2;
                              unint64_t v1529 = v1528 + 1;
                              if ((unint64_t)(v1528 + 1) >> 62) {
                                sub_566C();
                              }
                              uint64_t v1530 = v1524 - (void)v1527;
                              if (v1530 >> 1 > v1529) {
                                unint64_t v1529 = v1530 >> 1;
                              }
                              if ((unint64_t)v1530 >= 0x7FFFFFFFFFFFFFFCLL) {
                                unint64_t v1531 = 0x3FFFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v1531 = v1529;
                              }
                              if (v1531)
                              {
                                v1532 = (char *)sub_458C8((uint64_t)v1525, v1531);
                                v1522 = *v1523;
                                v1527 = *(_DWORD **)v1521;
                              }
                              else
                              {
                                v1532 = 0;
                              }
                              v1659 = &v1532[4 * v1528];
                              *(_DWORD *)v1659 = 78;
                              v1526 = v1659 + 4;
                              while (v1522 != v1527)
                              {
                                int v1660 = *--v1522;
                                *((_DWORD *)v1659 - 1) = v1660;
                                v1659 -= 4;
                              }
                              *(void *)uint64_t v1521 = v1659;
                              *v1523 = v1526;
                              void *v1525 = &v1532[4 * v1531];
                              if (v1527) {
                                operator delete(v1527);
                              }
                            }
                            else
                            {
                              _DWORD *v1522 = 78;
                              v1526 = v1522 + 1;
                            }
                            *v1523 = v1526;
                            if (!*v14)
                            {
LABEL_4181:
                              if ((*((unsigned char *)__p + 9) & 0x80) == 0) {
                                goto LABEL_4182;
                              }
                              uint64_t v1661 = *v12 + 24 * v13;
                              v1663 = (_DWORD **)(v1661 + 8);
                              v1662 = *(_DWORD **)(v1661 + 8);
                              v1665 = (void *)(v1661 + 16);
                              unint64_t v1664 = *(void *)(v1661 + 16);
                              if ((unint64_t)v1662 >= v1664)
                              {
                                v1667 = *(_DWORD **)v1661;
                                uint64_t v1668 = ((uint64_t)v1662 - *(void *)v1661) >> 2;
                                unint64_t v1669 = v1668 + 1;
                                if ((unint64_t)(v1668 + 1) >> 62) {
                                  sub_566C();
                                }
                                uint64_t v1670 = v1664 - (void)v1667;
                                if (v1670 >> 1 > v1669) {
                                  unint64_t v1669 = v1670 >> 1;
                                }
                                if ((unint64_t)v1670 >= 0x7FFFFFFFFFFFFFFCLL) {
                                  unint64_t v1671 = 0x3FFFFFFFFFFFFFFFLL;
                                }
                                else {
                                  unint64_t v1671 = v1669;
                                }
                                if (v1671)
                                {
                                  v1672 = (char *)sub_458C8((uint64_t)v1665, v1671);
                                  v1662 = *v1663;
                                  v1667 = *(_DWORD **)v1661;
                                }
                                else
                                {
                                  v1672 = 0;
                                }
                                v1783 = &v1672[4 * v1668];
                                *(_DWORD *)v1783 = 79;
                                v1666 = v1783 + 4;
                                while (v1662 != v1667)
                                {
                                  int v1784 = *--v1662;
                                  *((_DWORD *)v1783 - 1) = v1784;
                                  v1783 -= 4;
                                }
                                *(void *)uint64_t v1661 = v1783;
                                *v1663 = v1666;
                                void *v1665 = &v1672[4 * v1671];
                                if (v1667) {
                                  operator delete(v1667);
                                }
                              }
                              else
                              {
                                _DWORD *v1662 = 79;
                                v1666 = v1662 + 1;
                              }
                              *v1663 = v1666;
                              if (!*v14)
                              {
LABEL_4182:
                                if ((*((unsigned char *)__p + 10) & 1) == 0) {
                                  goto LABEL_4183;
                                }
                                uint64_t v1785 = *v12 + 24 * v13;
                                v1787 = (_DWORD **)(v1785 + 8);
                                v1786 = *(_DWORD **)(v1785 + 8);
                                v1789 = (void *)(v1785 + 16);
                                unint64_t v1788 = *(void *)(v1785 + 16);
                                if ((unint64_t)v1786 >= v1788)
                                {
                                  v1791 = *(_DWORD **)v1785;
                                  uint64_t v1792 = ((uint64_t)v1786 - *(void *)v1785) >> 2;
                                  unint64_t v1793 = v1792 + 1;
                                  if ((unint64_t)(v1792 + 1) >> 62) {
                                    sub_566C();
                                  }
                                  uint64_t v1794 = v1788 - (void)v1791;
                                  if (v1794 >> 1 > v1793) {
                                    unint64_t v1793 = v1794 >> 1;
                                  }
                                  if ((unint64_t)v1794 >= 0x7FFFFFFFFFFFFFFCLL) {
                                    unint64_t v1795 = 0x3FFFFFFFFFFFFFFFLL;
                                  }
                                  else {
                                    unint64_t v1795 = v1793;
                                  }
                                  if (v1795)
                                  {
                                    v1796 = (char *)sub_458C8((uint64_t)v1789, v1795);
                                    v1786 = *v1787;
                                    v1791 = *(_DWORD **)v1785;
                                  }
                                  else
                                  {
                                    v1796 = 0;
                                  }
                                  v1886 = &v1796[4 * v1792];
                                  *(_DWORD *)v1886 = 80;
                                  v1790 = v1886 + 4;
                                  while (v1786 != v1791)
                                  {
                                    int v1887 = *--v1786;
                                    *((_DWORD *)v1886 - 1) = v1887;
                                    v1886 -= 4;
                                  }
                                  *(void *)uint64_t v1785 = v1886;
                                  *v1787 = v1790;
                                  void *v1789 = &v1796[4 * v1795];
                                  if (v1791) {
                                    operator delete(v1791);
                                  }
                                }
                                else
                                {
                                  _DWORD *v1786 = 80;
                                  v1790 = v1786 + 1;
                                }
                                *v1787 = v1790;
                                if (!*v14)
                                {
LABEL_4183:
                                  if ((*((unsigned char *)__p + 10) & 2) == 0) {
                                    goto LABEL_4184;
                                  }
                                  uint64_t v1888 = *v12 + 24 * v13;
                                  v1890 = (_DWORD **)(v1888 + 8);
                                  v1889 = *(_DWORD **)(v1888 + 8);
                                  v1892 = (void *)(v1888 + 16);
                                  unint64_t v1891 = *(void *)(v1888 + 16);
                                  if ((unint64_t)v1889 >= v1891)
                                  {
                                    v1894 = *(_DWORD **)v1888;
                                    uint64_t v1895 = ((uint64_t)v1889 - *(void *)v1888) >> 2;
                                    unint64_t v1896 = v1895 + 1;
                                    if ((unint64_t)(v1895 + 1) >> 62) {
                                      sub_566C();
                                    }
                                    uint64_t v1897 = v1891 - (void)v1894;
                                    if (v1897 >> 1 > v1896) {
                                      unint64_t v1896 = v1897 >> 1;
                                    }
                                    if ((unint64_t)v1897 >= 0x7FFFFFFFFFFFFFFCLL) {
                                      unint64_t v1898 = 0x3FFFFFFFFFFFFFFFLL;
                                    }
                                    else {
                                      unint64_t v1898 = v1896;
                                    }
                                    if (v1898)
                                    {
                                      v1899 = (char *)sub_458C8((uint64_t)v1892, v1898);
                                      v1889 = *v1890;
                                      v1894 = *(_DWORD **)v1888;
                                    }
                                    else
                                    {
                                      v1899 = 0;
                                    }
                                    v1984 = &v1899[4 * v1895];
                                    *(_DWORD *)v1984 = 81;
                                    v1893 = v1984 + 4;
                                    while (v1889 != v1894)
                                    {
                                      int v1985 = *--v1889;
                                      *((_DWORD *)v1984 - 1) = v1985;
                                      v1984 -= 4;
                                    }
                                    *(void *)uint64_t v1888 = v1984;
                                    *v1890 = v1893;
                                    void *v1892 = &v1899[4 * v1898];
                                    if (v1894) {
                                      operator delete(v1894);
                                    }
                                  }
                                  else
                                  {
                                    _DWORD *v1889 = 81;
                                    v1893 = v1889 + 1;
                                  }
                                  *v1890 = v1893;
                                  if (!*v14)
                                  {
LABEL_4184:
                                    if ((*((unsigned char *)__p + 10) & 4) == 0) {
                                      goto LABEL_4185;
                                    }
                                    uint64_t v1986 = *v12 + 24 * v13;
                                    v1988 = (_DWORD **)(v1986 + 8);
                                    v1987 = *(_DWORD **)(v1986 + 8);
                                    v1990 = (void *)(v1986 + 16);
                                    unint64_t v1989 = *(void *)(v1986 + 16);
                                    if ((unint64_t)v1987 >= v1989)
                                    {
                                      v1992 = *(_DWORD **)v1986;
                                      uint64_t v1993 = ((uint64_t)v1987 - *(void *)v1986) >> 2;
                                      unint64_t v1994 = v1993 + 1;
                                      if ((unint64_t)(v1993 + 1) >> 62) {
                                        sub_566C();
                                      }
                                      uint64_t v1995 = v1989 - (void)v1992;
                                      if (v1995 >> 1 > v1994) {
                                        unint64_t v1994 = v1995 >> 1;
                                      }
                                      if ((unint64_t)v1995 >= 0x7FFFFFFFFFFFFFFCLL) {
                                        unint64_t v1996 = 0x3FFFFFFFFFFFFFFFLL;
                                      }
                                      else {
                                        unint64_t v1996 = v1994;
                                      }
                                      if (v1996)
                                      {
                                        v1997 = (char *)sub_458C8((uint64_t)v1990, v1996);
                                        v1987 = *v1988;
                                        v1992 = *(_DWORD **)v1986;
                                      }
                                      else
                                      {
                                        v1997 = 0;
                                      }
                                      v2074 = &v1997[4 * v1993];
                                      *(_DWORD *)v2074 = 82;
                                      v1991 = v2074 + 4;
                                      while (v1987 != v1992)
                                      {
                                        int v2075 = *--v1987;
                                        *((_DWORD *)v2074 - 1) = v2075;
                                        v2074 -= 4;
                                      }
                                      *(void *)uint64_t v1986 = v2074;
                                      *v1988 = v1991;
                                      void *v1990 = &v1997[4 * v1996];
                                      if (v1992) {
                                        operator delete(v1992);
                                      }
                                    }
                                    else
                                    {
                                      _DWORD *v1987 = 82;
                                      v1991 = v1987 + 1;
                                    }
                                    *v1988 = v1991;
                                    if (!*v14)
                                    {
LABEL_4185:
                                      if ((*((unsigned char *)__p + 10) & 8) == 0) {
                                        goto LABEL_4186;
                                      }
                                      uint64_t v2076 = *v12 + 24 * v13;
                                      v2078 = (_DWORD **)(v2076 + 8);
                                      v2077 = *(_DWORD **)(v2076 + 8);
                                      v2080 = (void *)(v2076 + 16);
                                      unint64_t v2079 = *(void *)(v2076 + 16);
                                      if ((unint64_t)v2077 >= v2079)
                                      {
                                        v2082 = *(_DWORD **)v2076;
                                        uint64_t v2083 = ((uint64_t)v2077 - *(void *)v2076) >> 2;
                                        unint64_t v2084 = v2083 + 1;
                                        if ((unint64_t)(v2083 + 1) >> 62) {
                                          sub_566C();
                                        }
                                        uint64_t v2085 = v2079 - (void)v2082;
                                        if (v2085 >> 1 > v2084) {
                                          unint64_t v2084 = v2085 >> 1;
                                        }
                                        if ((unint64_t)v2085 >= 0x7FFFFFFFFFFFFFFCLL) {
                                          unint64_t v2086 = 0x3FFFFFFFFFFFFFFFLL;
                                        }
                                        else {
                                          unint64_t v2086 = v2084;
                                        }
                                        if (v2086)
                                        {
                                          v2087 = (char *)sub_458C8((uint64_t)v2080, v2086);
                                          v2077 = *v2078;
                                          v2082 = *(_DWORD **)v2076;
                                        }
                                        else
                                        {
                                          v2087 = 0;
                                        }
                                        v2159 = &v2087[4 * v2083];
                                        *(_DWORD *)v2159 = 83;
                                        v2081 = v2159 + 4;
                                        while (v2077 != v2082)
                                        {
                                          int v2160 = *--v2077;
                                          *((_DWORD *)v2159 - 1) = v2160;
                                          v2159 -= 4;
                                        }
                                        *(void *)uint64_t v2076 = v2159;
                                        *v2078 = v2081;
                                        void *v2080 = &v2087[4 * v2086];
                                        if (v2082) {
                                          operator delete(v2082);
                                        }
                                      }
                                      else
                                      {
                                        _DWORD *v2077 = 83;
                                        v2081 = v2077 + 1;
                                      }
                                      *v2078 = v2081;
                                      if (!*v14)
                                      {
LABEL_4186:
                                        if ((*((unsigned char *)__p + 10) & 0x10) == 0) {
                                          goto LABEL_4187;
                                        }
                                        uint64_t v2161 = *v12 + 24 * v13;
                                        v2163 = (_DWORD **)(v2161 + 8);
                                        v2162 = *(_DWORD **)(v2161 + 8);
                                        v2165 = (void *)(v2161 + 16);
                                        unint64_t v2164 = *(void *)(v2161 + 16);
                                        if ((unint64_t)v2162 >= v2164)
                                        {
                                          v2167 = *(_DWORD **)v2161;
                                          uint64_t v2168 = ((uint64_t)v2162 - *(void *)v2161) >> 2;
                                          unint64_t v2169 = v2168 + 1;
                                          if ((unint64_t)(v2168 + 1) >> 62) {
                                            sub_566C();
                                          }
                                          uint64_t v2170 = v2164 - (void)v2167;
                                          if (v2170 >> 1 > v2169) {
                                            unint64_t v2169 = v2170 >> 1;
                                          }
                                          if ((unint64_t)v2170 >= 0x7FFFFFFFFFFFFFFCLL) {
                                            unint64_t v2171 = 0x3FFFFFFFFFFFFFFFLL;
                                          }
                                          else {
                                            unint64_t v2171 = v2169;
                                          }
                                          if (v2171)
                                          {
                                            v2172 = (char *)sub_458C8((uint64_t)v2165, v2171);
                                            v2162 = *v2163;
                                            v2167 = *(_DWORD **)v2161;
                                          }
                                          else
                                          {
                                            v2172 = 0;
                                          }
                                          v2235 = &v2172[4 * v2168];
                                          *(_DWORD *)v2235 = 84;
                                          v2166 = v2235 + 4;
                                          while (v2162 != v2167)
                                          {
                                            int v2236 = *--v2162;
                                            *((_DWORD *)v2235 - 1) = v2236;
                                            v2235 -= 4;
                                          }
                                          *(void *)uint64_t v2161 = v2235;
                                          *v2163 = v2166;
                                          void *v2165 = &v2172[4 * v2171];
                                          if (v2167) {
                                            operator delete(v2167);
                                          }
                                        }
                                        else
                                        {
                                          _DWORD *v2162 = 84;
                                          v2166 = v2162 + 1;
                                        }
                                        *v2163 = v2166;
                                        if (!*v14)
                                        {
LABEL_4187:
                                          if ((*((unsigned char *)__p + 10) & 0x20) == 0) {
                                            goto LABEL_4188;
                                          }
                                          uint64_t v2237 = *v12 + 24 * v13;
                                          v2239 = (_DWORD **)(v2237 + 8);
                                          v2238 = *(_DWORD **)(v2237 + 8);
                                          v2241 = (void *)(v2237 + 16);
                                          unint64_t v2240 = *(void *)(v2237 + 16);
                                          if ((unint64_t)v2238 >= v2240)
                                          {
                                            v2243 = *(_DWORD **)v2237;
                                            uint64_t v2244 = ((uint64_t)v2238 - *(void *)v2237) >> 2;
                                            unint64_t v2245 = v2244 + 1;
                                            if ((unint64_t)(v2244 + 1) >> 62) {
                                              sub_566C();
                                            }
                                            uint64_t v2246 = v2240 - (void)v2243;
                                            if (v2246 >> 1 > v2245) {
                                              unint64_t v2245 = v2246 >> 1;
                                            }
                                            if ((unint64_t)v2246 >= 0x7FFFFFFFFFFFFFFCLL) {
                                              unint64_t v2247 = 0x3FFFFFFFFFFFFFFFLL;
                                            }
                                            else {
                                              unint64_t v2247 = v2245;
                                            }
                                            if (v2247)
                                            {
                                              v2248 = (char *)sub_458C8((uint64_t)v2241, v2247);
                                              v2238 = *v2239;
                                              v2243 = *(_DWORD **)v2237;
                                            }
                                            else
                                            {
                                              v2248 = 0;
                                            }
                                            v2306 = &v2248[4 * v2244];
                                            *(_DWORD *)v2306 = 85;
                                            v2242 = v2306 + 4;
                                            while (v2238 != v2243)
                                            {
                                              int v2307 = *--v2238;
                                              *((_DWORD *)v2306 - 1) = v2307;
                                              v2306 -= 4;
                                            }
                                            *(void *)uint64_t v2237 = v2306;
                                            *v2239 = v2242;
                                            void *v2241 = &v2248[4 * v2247];
                                            if (v2243) {
                                              operator delete(v2243);
                                            }
                                          }
                                          else
                                          {
                                            _DWORD *v2238 = 85;
                                            v2242 = v2238 + 1;
                                          }
                                          *v2239 = v2242;
                                          if (!*v14)
                                          {
LABEL_4188:
                                            if ((*((unsigned char *)__p + 10) & 0x40) == 0) {
                                              goto LABEL_4189;
                                            }
                                            uint64_t v2308 = *v12 + 24 * v13;
                                            v2310 = (_DWORD **)(v2308 + 8);
                                            v2309 = *(_DWORD **)(v2308 + 8);
                                            v2312 = (void *)(v2308 + 16);
                                            unint64_t v2311 = *(void *)(v2308 + 16);
                                            if ((unint64_t)v2309 >= v2311)
                                            {
                                              v2314 = *(_DWORD **)v2308;
                                              uint64_t v2315 = ((uint64_t)v2309 - *(void *)v2308) >> 2;
                                              unint64_t v2316 = v2315 + 1;
                                              if ((unint64_t)(v2315 + 1) >> 62) {
                                                sub_566C();
                                              }
                                              uint64_t v2317 = v2311 - (void)v2314;
                                              if (v2317 >> 1 > v2316) {
                                                unint64_t v2316 = v2317 >> 1;
                                              }
                                              if ((unint64_t)v2317 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                unint64_t v2318 = 0x3FFFFFFFFFFFFFFFLL;
                                              }
                                              else {
                                                unint64_t v2318 = v2316;
                                              }
                                              if (v2318)
                                              {
                                                v2319 = (char *)sub_458C8((uint64_t)v2312, v2318);
                                                v2309 = *v2310;
                                                v2314 = *(_DWORD **)v2308;
                                              }
                                              else
                                              {
                                                v2319 = 0;
                                              }
                                              v2376 = &v2319[4 * v2315];
                                              *(_DWORD *)v2376 = 86;
                                              v2313 = v2376 + 4;
                                              while (v2309 != v2314)
                                              {
                                                int v2377 = *--v2309;
                                                *((_DWORD *)v2376 - 1) = v2377;
                                                v2376 -= 4;
                                              }
                                              *(void *)uint64_t v2308 = v2376;
                                              *v2310 = v2313;
                                              void *v2312 = &v2319[4 * v2318];
                                              if (v2314) {
                                                operator delete(v2314);
                                              }
                                            }
                                            else
                                            {
                                              _DWORD *v2309 = 86;
                                              v2313 = v2309 + 1;
                                            }
                                            *v2310 = v2313;
                                            if (!*v14)
                                            {
LABEL_4189:
                                              if ((*((unsigned char *)__p + 10) & 0x80) == 0) {
                                                goto LABEL_4190;
                                              }
                                              uint64_t v2378 = *v12 + 24 * v13;
                                              v2380 = (_DWORD **)(v2378 + 8);
                                              v2379 = *(_DWORD **)(v2378 + 8);
                                              v2382 = (void *)(v2378 + 16);
                                              unint64_t v2381 = *(void *)(v2378 + 16);
                                              if ((unint64_t)v2379 >= v2381)
                                              {
                                                v2384 = *(_DWORD **)v2378;
                                                uint64_t v2385 = ((uint64_t)v2379 - *(void *)v2378) >> 2;
                                                unint64_t v2386 = v2385 + 1;
                                                if ((unint64_t)(v2385 + 1) >> 62) {
                                                  sub_566C();
                                                }
                                                uint64_t v2387 = v2381 - (void)v2384;
                                                if (v2387 >> 1 > v2386) {
                                                  unint64_t v2386 = v2387 >> 1;
                                                }
                                                if ((unint64_t)v2387 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                  unint64_t v2388 = 0x3FFFFFFFFFFFFFFFLL;
                                                }
                                                else {
                                                  unint64_t v2388 = v2386;
                                                }
                                                if (v2388)
                                                {
                                                  v2389 = (char *)sub_458C8((uint64_t)v2382, v2388);
                                                  v2379 = *v2380;
                                                  v2384 = *(_DWORD **)v2378;
                                                }
                                                else
                                                {
                                                  v2389 = 0;
                                                }
                                                v2438 = &v2389[4 * v2385];
                                                *(_DWORD *)v2438 = 87;
                                                v2383 = v2438 + 4;
                                                while (v2379 != v2384)
                                                {
                                                  int v2439 = *--v2379;
                                                  *((_DWORD *)v2438 - 1) = v2439;
                                                  v2438 -= 4;
                                                }
                                                *(void *)uint64_t v2378 = v2438;
                                                *v2380 = v2383;
                                                void *v2382 = &v2389[4 * v2388];
                                                if (v2384) {
                                                  operator delete(v2384);
                                                }
                                              }
                                              else
                                              {
                                                _DWORD *v2379 = 87;
                                                v2383 = v2379 + 1;
                                              }
                                              *v2380 = v2383;
                                              if (!*v14)
                                              {
LABEL_4190:
                                                if ((*((unsigned char *)__p + 11) & 1) == 0) {
                                                  goto LABEL_4191;
                                                }
                                                uint64_t v2440 = *v12 + 24 * v13;
                                                v2442 = (_DWORD **)(v2440 + 8);
                                                v2441 = *(_DWORD **)(v2440 + 8);
                                                v2444 = (void *)(v2440 + 16);
                                                unint64_t v2443 = *(void *)(v2440 + 16);
                                                if ((unint64_t)v2441 >= v2443)
                                                {
                                                  v2446 = *(_DWORD **)v2440;
                                                  uint64_t v2447 = ((uint64_t)v2441 - *(void *)v2440) >> 2;
                                                  unint64_t v2448 = v2447 + 1;
                                                  if ((unint64_t)(v2447 + 1) >> 62) {
                                                    sub_566C();
                                                  }
                                                  uint64_t v2449 = v2443 - (void)v2446;
                                                  if (v2449 >> 1 > v2448) {
                                                    unint64_t v2448 = v2449 >> 1;
                                                  }
                                                  if ((unint64_t)v2449 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                    unint64_t v2450 = 0x3FFFFFFFFFFFFFFFLL;
                                                  }
                                                  else {
                                                    unint64_t v2450 = v2448;
                                                  }
                                                  if (v2450)
                                                  {
                                                    v2451 = (char *)sub_458C8((uint64_t)v2444, v2450);
                                                    v2441 = *v2442;
                                                    v2446 = *(_DWORD **)v2440;
                                                  }
                                                  else
                                                  {
                                                    v2451 = 0;
                                                  }
                                                  v2495 = &v2451[4 * v2447];
                                                  *(_DWORD *)v2495 = 88;
                                                  v2445 = v2495 + 4;
                                                  while (v2441 != v2446)
                                                  {
                                                    int v2496 = *--v2441;
                                                    *((_DWORD *)v2495 - 1) = v2496;
                                                    v2495 -= 4;
                                                  }
                                                  *(void *)uint64_t v2440 = v2495;
                                                  *v2442 = v2445;
                                                  void *v2444 = &v2451[4 * v2450];
                                                  if (v2446) {
                                                    operator delete(v2446);
                                                  }
                                                }
                                                else
                                                {
                                                  _DWORD *v2441 = 88;
                                                  v2445 = v2441 + 1;
                                                }
                                                *v2442 = v2445;
                                                if (!*v14)
                                                {
LABEL_4191:
                                                  if ((*((unsigned char *)__p + 11) & 2) == 0) {
                                                    goto LABEL_4192;
                                                  }
                                                  uint64_t v2497 = *v12 + 24 * v13;
                                                  v2499 = (_DWORD **)(v2497 + 8);
                                                  v2498 = *(_DWORD **)(v2497 + 8);
                                                  v2501 = (void *)(v2497 + 16);
                                                  unint64_t v2500 = *(void *)(v2497 + 16);
                                                  if ((unint64_t)v2498 >= v2500)
                                                  {
                                                    v2503 = *(_DWORD **)v2497;
                                                    uint64_t v2504 = ((uint64_t)v2498 - *(void *)v2497) >> 2;
                                                    unint64_t v2505 = v2504 + 1;
                                                    if ((unint64_t)(v2504 + 1) >> 62) {
                                                      sub_566C();
                                                    }
                                                    uint64_t v2506 = v2500 - (void)v2503;
                                                    if (v2506 >> 1 > v2505) {
                                                      unint64_t v2505 = v2506 >> 1;
                                                    }
                                                    if ((unint64_t)v2506 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                      unint64_t v2507 = 0x3FFFFFFFFFFFFFFFLL;
                                                    }
                                                    else {
                                                      unint64_t v2507 = v2505;
                                                    }
                                                    if (v2507)
                                                    {
                                                      v2508 = (char *)sub_458C8((uint64_t)v2501, v2507);
                                                      v2498 = *v2499;
                                                      v2503 = *(_DWORD **)v2497;
                                                    }
                                                    else
                                                    {
                                                      v2508 = 0;
                                                    }
                                                    v2543 = &v2508[4 * v2504];
                                                    *(_DWORD *)v2543 = 89;
                                                    v2502 = v2543 + 4;
                                                    while (v2498 != v2503)
                                                    {
                                                      int v2544 = *--v2498;
                                                      *((_DWORD *)v2543 - 1) = v2544;
                                                      v2543 -= 4;
                                                    }
                                                    *(void *)uint64_t v2497 = v2543;
                                                    *v2499 = v2502;
                                                    void *v2501 = &v2508[4 * v2507];
                                                    if (v2503) {
                                                      operator delete(v2503);
                                                    }
                                                  }
                                                  else
                                                  {
                                                    _DWORD *v2498 = 89;
                                                    v2502 = v2498 + 1;
                                                  }
                                                  *v2499 = v2502;
                                                  if (!*v14)
                                                  {
LABEL_4192:
                                                    if ((*((unsigned char *)__p + 11) & 4) == 0) {
                                                      goto LABEL_4193;
                                                    }
                                                    uint64_t v2545 = *v12 + 24 * v13;
                                                    v2547 = (_DWORD **)(v2545 + 8);
                                                    v2546 = *(_DWORD **)(v2545 + 8);
                                                    v2549 = (void *)(v2545 + 16);
                                                    unint64_t v2548 = *(void *)(v2545 + 16);
                                                    if ((unint64_t)v2546 >= v2548)
                                                    {
                                                      v2551 = *(_DWORD **)v2545;
                                                      uint64_t v2552 = ((uint64_t)v2546 - *(void *)v2545) >> 2;
                                                      unint64_t v2553 = v2552 + 1;
                                                      if ((unint64_t)(v2552 + 1) >> 62) {
                                                        sub_566C();
                                                      }
                                                      uint64_t v2554 = v2548 - (void)v2551;
                                                      if (v2554 >> 1 > v2553) {
                                                        unint64_t v2553 = v2554 >> 1;
                                                      }
                                                      if ((unint64_t)v2554 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                        unint64_t v2555 = 0x3FFFFFFFFFFFFFFFLL;
                                                      }
                                                      else {
                                                        unint64_t v2555 = v2553;
                                                      }
                                                      if (v2555)
                                                      {
                                                        v2556 = (char *)sub_458C8((uint64_t)v2549, v2555);
                                                        v2546 = *v2547;
                                                        v2551 = *(_DWORD **)v2545;
                                                      }
                                                      else
                                                      {
                                                        v2556 = 0;
                                                      }
                                                      v2586 = &v2556[4 * v2552];
                                                      *(_DWORD *)v2586 = 90;
                                                      v2550 = v2586 + 4;
                                                      while (v2546 != v2551)
                                                      {
                                                        int v2587 = *--v2546;
                                                        *((_DWORD *)v2586 - 1) = v2587;
                                                        v2586 -= 4;
                                                      }
                                                      *(void *)uint64_t v2545 = v2586;
                                                      *v2547 = v2550;
                                                      void *v2549 = &v2556[4 * v2555];
                                                      if (v2551) {
                                                        operator delete(v2551);
                                                      }
                                                    }
                                                    else
                                                    {
                                                      _DWORD *v2546 = 90;
                                                      v2550 = v2546 + 1;
                                                    }
                                                    *v2547 = v2550;
                                                    if (!*v14)
                                                    {
LABEL_4193:
                                                      if ((*((unsigned char *)__p + 11) & 8) == 0) {
                                                        goto LABEL_4194;
                                                      }
                                                      uint64_t v2588 = *v12 + 24 * v13;
                                                      v2590 = (_DWORD **)(v2588 + 8);
                                                      v2589 = *(_DWORD **)(v2588 + 8);
                                                      v2592 = (void *)(v2588 + 16);
                                                      unint64_t v2591 = *(void *)(v2588 + 16);
                                                      if ((unint64_t)v2589 >= v2591)
                                                      {
                                                        v2594 = *(_DWORD **)v2588;
                                                        uint64_t v2595 = ((uint64_t)v2589 - *(void *)v2588) >> 2;
                                                        unint64_t v2596 = v2595 + 1;
                                                        if ((unint64_t)(v2595 + 1) >> 62) {
                                                          sub_566C();
                                                        }
                                                        uint64_t v2597 = v2591 - (void)v2594;
                                                        if (v2597 >> 1 > v2596) {
                                                          unint64_t v2596 = v2597 >> 1;
                                                        }
                                                        if ((unint64_t)v2597 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                          unint64_t v2598 = 0x3FFFFFFFFFFFFFFFLL;
                                                        }
                                                        else {
                                                          unint64_t v2598 = v2596;
                                                        }
                                                        if (v2598)
                                                        {
                                                          v2599 = (char *)sub_458C8((uint64_t)v2592, v2598);
                                                          v2589 = *v2590;
                                                          v2594 = *(_DWORD **)v2588;
                                                        }
                                                        else
                                                        {
                                                          v2599 = 0;
                                                        }
                                                        v2620 = &v2599[4 * v2595];
                                                        *(_DWORD *)v2620 = 91;
                                                        v2593 = v2620 + 4;
                                                        while (v2589 != v2594)
                                                        {
                                                          int v2621 = *--v2589;
                                                          *((_DWORD *)v2620 - 1) = v2621;
                                                          v2620 -= 4;
                                                        }
                                                        *(void *)uint64_t v2588 = v2620;
                                                        *v2590 = v2593;
                                                        void *v2592 = &v2599[4 * v2598];
                                                        if (v2594) {
                                                          operator delete(v2594);
                                                        }
                                                      }
                                                      else
                                                      {
                                                        _DWORD *v2589 = 91;
                                                        v2593 = v2589 + 1;
                                                      }
                                                      *v2590 = v2593;
                                                      if (!*v14)
                                                      {
LABEL_4194:
                                                        if ((*((unsigned char *)__p + 11) & 0x10) == 0) {
                                                          goto LABEL_4195;
                                                        }
                                                        uint64_t v2622 = *v12 + 24 * v13;
                                                        v2624 = (_DWORD **)(v2622 + 8);
                                                        v2623 = *(_DWORD **)(v2622 + 8);
                                                        v2626 = (void *)(v2622 + 16);
                                                        unint64_t v2625 = *(void *)(v2622 + 16);
                                                        if ((unint64_t)v2623 >= v2625)
                                                        {
                                                          v2628 = *(_DWORD **)v2622;
                                                          uint64_t v2629 = ((uint64_t)v2623 - *(void *)v2622) >> 2;
                                                          unint64_t v2630 = v2629 + 1;
                                                          if ((unint64_t)(v2629 + 1) >> 62) {
                                                            sub_566C();
                                                          }
                                                          uint64_t v2631 = v2625 - (void)v2628;
                                                          if (v2631 >> 1 > v2630) {
                                                            unint64_t v2630 = v2631 >> 1;
                                                          }
                                                          if ((unint64_t)v2631 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                            unint64_t v2632 = 0x3FFFFFFFFFFFFFFFLL;
                                                          }
                                                          else {
                                                            unint64_t v2632 = v2630;
                                                          }
                                                          if (v2632)
                                                          {
                                                            v2633 = (char *)sub_458C8((uint64_t)v2626, v2632);
                                                            v2623 = *v2624;
                                                            v2628 = *(_DWORD **)v2622;
                                                          }
                                                          else
                                                          {
                                                            v2633 = 0;
                                                          }
                                                          v2649 = &v2633[4 * v2629];
                                                          *(_DWORD *)v2649 = 92;
                                                          v2627 = v2649 + 4;
                                                          while (v2623 != v2628)
                                                          {
                                                            int v2650 = *--v2623;
                                                            *((_DWORD *)v2649 - 1) = v2650;
                                                            v2649 -= 4;
                                                          }
                                                          *(void *)uint64_t v2622 = v2649;
                                                          *v2624 = v2627;
                                                          void *v2626 = &v2633[4 * v2632];
                                                          if (v2628) {
                                                            operator delete(v2628);
                                                          }
                                                        }
                                                        else
                                                        {
                                                          _DWORD *v2623 = 92;
                                                          v2627 = v2623 + 1;
                                                        }
                                                        *v2624 = v2627;
                                                        if (!*v14)
                                                        {
LABEL_4195:
                                                          if ((*((unsigned char *)__p + 11) & 0x20) == 0) {
                                                            goto LABEL_4196;
                                                          }
                                                          uint64_t v2651 = *v12 + 24 * v13;
                                                          v2653 = (_DWORD **)(v2651 + 8);
                                                          v2652 = *(_DWORD **)(v2651 + 8);
                                                          v2655 = (void *)(v2651 + 16);
                                                          unint64_t v2654 = *(void *)(v2651 + 16);
                                                          if ((unint64_t)v2652 >= v2654)
                                                          {
                                                            v2657 = *(_DWORD **)v2651;
                                                            uint64_t v2658 = ((uint64_t)v2652 - *(void *)v2651) >> 2;
                                                            unint64_t v2659 = v2658 + 1;
                                                            if ((unint64_t)(v2658 + 1) >> 62) {
                                                              sub_566C();
                                                            }
                                                            uint64_t v2660 = v2654 - (void)v2657;
                                                            if (v2660 >> 1 > v2659) {
                                                              unint64_t v2659 = v2660 >> 1;
                                                            }
                                                            if ((unint64_t)v2660 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                              unint64_t v2661 = 0x3FFFFFFFFFFFFFFFLL;
                                                            }
                                                            else {
                                                              unint64_t v2661 = v2659;
                                                            }
                                                            if (v2661)
                                                            {
                                                              v2662 = (char *)sub_458C8((uint64_t)v2655, v2661);
                                                              v2652 = *v2653;
                                                              v2657 = *(_DWORD **)v2651;
                                                            }
                                                            else
                                                            {
                                                              v2662 = 0;
                                                            }
                                                            v2677 = &v2662[4 * v2658];
                                                            *(_DWORD *)v2677 = 93;
                                                            v2656 = v2677 + 4;
                                                            while (v2652 != v2657)
                                                            {
                                                              int v2678 = *--v2652;
                                                              *((_DWORD *)v2677 - 1) = v2678;
                                                              v2677 -= 4;
                                                            }
                                                            *(void *)uint64_t v2651 = v2677;
                                                            *v2653 = v2656;
                                                            void *v2655 = &v2662[4 * v2661];
                                                            if (v2657) {
                                                              operator delete(v2657);
                                                            }
                                                          }
                                                          else
                                                          {
                                                            _DWORD *v2652 = 93;
                                                            v2656 = v2652 + 1;
                                                          }
                                                          *v2653 = v2656;
                                                          if (!*v14)
                                                          {
LABEL_4196:
                                                            if ((*((unsigned char *)__p + 11) & 0x40) == 0) {
                                                              goto LABEL_4197;
                                                            }
                                                            uint64_t v2679 = *v12 + 24 * v13;
                                                            v2681 = (_DWORD **)(v2679 + 8);
                                                            v2680 = *(_DWORD **)(v2679 + 8);
                                                            v2683 = (void *)(v2679 + 16);
                                                            unint64_t v2682 = *(void *)(v2679 + 16);
                                                            if ((unint64_t)v2680 >= v2682)
                                                            {
                                                              v2685 = *(_DWORD **)v2679;
                                                              uint64_t v2686 = ((uint64_t)v2680 - *(void *)v2679) >> 2;
                                                              unint64_t v2687 = v2686 + 1;
                                                              if ((unint64_t)(v2686 + 1) >> 62) {
                                                                sub_566C();
                                                              }
                                                              uint64_t v2688 = v2682 - (void)v2685;
                                                              if (v2688 >> 1 > v2687) {
                                                                unint64_t v2687 = v2688 >> 1;
                                                              }
                                                              if ((unint64_t)v2688 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                                unint64_t v2689 = 0x3FFFFFFFFFFFFFFFLL;
                                                              }
                                                              else {
                                                                unint64_t v2689 = v2687;
                                                              }
                                                              if (v2689)
                                                              {
                                                                v2690 = (char *)sub_458C8((uint64_t)v2683, v2689);
                                                                v2680 = *v2681;
                                                                v2685 = *(_DWORD **)v2679;
                                                              }
                                                              else
                                                              {
                                                                v2690 = 0;
                                                              }
                                                              v2705 = &v2690[4 * v2686];
                                                              *(_DWORD *)v2705 = 94;
                                                              v2684 = v2705 + 4;
                                                              while (v2680 != v2685)
                                                              {
                                                                int v2706 = *--v2680;
                                                                *((_DWORD *)v2705 - 1) = v2706;
                                                                v2705 -= 4;
                                                              }
                                                              *(void *)uint64_t v2679 = v2705;
                                                              *v2681 = v2684;
                                                              void *v2683 = &v2690[4 * v2689];
                                                              if (v2685) {
                                                                operator delete(v2685);
                                                              }
                                                            }
                                                            else
                                                            {
                                                              _DWORD *v2680 = 94;
                                                              v2684 = v2680 + 1;
                                                            }
                                                            *v2681 = v2684;
                                                            if (!*v14)
                                                            {
LABEL_4197:
                                                              if ((*((unsigned char *)__p + 11) & 0x80) == 0) {
                                                                goto LABEL_4198;
                                                              }
                                                              uint64_t v2707 = *v12 + 24 * v13;
                                                              v2709 = (_DWORD **)(v2707 + 8);
                                                              v2708 = *(_DWORD **)(v2707 + 8);
                                                              v2711 = (void *)(v2707 + 16);
                                                              unint64_t v2710 = *(void *)(v2707 + 16);
                                                              if ((unint64_t)v2708 >= v2710)
                                                              {
                                                                v2713 = *(_DWORD **)v2707;
                                                                uint64_t v2714 = ((uint64_t)v2708 - *(void *)v2707) >> 2;
                                                                unint64_t v2715 = v2714 + 1;
                                                                if ((unint64_t)(v2714 + 1) >> 62) {
                                                                  sub_566C();
                                                                }
                                                                uint64_t v2716 = v2710 - (void)v2713;
                                                                if (v2716 >> 1 > v2715) {
                                                                  unint64_t v2715 = v2716 >> 1;
                                                                }
                                                                if ((unint64_t)v2716 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                                  unint64_t v2717 = 0x3FFFFFFFFFFFFFFFLL;
                                                                }
                                                                else {
                                                                  unint64_t v2717 = v2715;
                                                                }
                                                                if (v2717)
                                                                {
                                                                  v2718 = (char *)sub_458C8((uint64_t)v2711, v2717);
                                                                  v2708 = *v2709;
                                                                  v2713 = *(_DWORD **)v2707;
                                                                }
                                                                else
                                                                {
                                                                  v2718 = 0;
                                                                }
                                                                v2733 = &v2718[4 * v2714];
                                                                *(_DWORD *)v2733 = 95;
                                                                v2712 = v2733 + 4;
                                                                while (v2708 != v2713)
                                                                {
                                                                  int v2734 = *--v2708;
                                                                  *((_DWORD *)v2733 - 1) = v2734;
                                                                  v2733 -= 4;
                                                                }
                                                                *(void *)uint64_t v2707 = v2733;
                                                                *v2709 = v2712;
                                                                void *v2711 = &v2718[4 * v2717];
                                                                if (v2713) {
                                                                  operator delete(v2713);
                                                                }
                                                              }
                                                              else
                                                              {
                                                                _DWORD *v2708 = 95;
                                                                v2712 = v2708 + 1;
                                                              }
                                                              *v2709 = v2712;
                                                              if (!*v14)
                                                              {
LABEL_4198:
                                                                if ((*((unsigned char *)__p + 12) & 1) == 0) {
                                                                  goto LABEL_4199;
                                                                }
                                                                uint64_t v2735 = *v12 + 24 * v13;
                                                                v2737 = (_DWORD **)(v2735 + 8);
                                                                v2736 = *(_DWORD **)(v2735 + 8);
                                                                v2739 = (void *)(v2735 + 16);
                                                                unint64_t v2738 = *(void *)(v2735 + 16);
                                                                if ((unint64_t)v2736 >= v2738)
                                                                {
                                                                  v2741 = *(_DWORD **)v2735;
                                                                  uint64_t v2742 = ((uint64_t)v2736 - *(void *)v2735) >> 2;
                                                                  unint64_t v2743 = v2742 + 1;
                                                                  if ((unint64_t)(v2742 + 1) >> 62) {
                                                                    sub_566C();
                                                                  }
                                                                  uint64_t v2744 = v2738 - (void)v2741;
                                                                  if (v2744 >> 1 > v2743) {
                                                                    unint64_t v2743 = v2744 >> 1;
                                                                  }
                                                                  if ((unint64_t)v2744 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                                    unint64_t v2745 = 0x3FFFFFFFFFFFFFFFLL;
                                                                  }
                                                                  else {
                                                                    unint64_t v2745 = v2743;
                                                                  }
                                                                  if (v2745)
                                                                  {
                                                                    v2746 = (char *)sub_458C8((uint64_t)v2739, v2745);
                                                                    v2736 = *v2737;
                                                                    v2741 = *(_DWORD **)v2735;
                                                                  }
                                                                  else
                                                                  {
                                                                    v2746 = 0;
                                                                  }
                                                                  v2761 = &v2746[4 * v2742];
                                                                  *(_DWORD *)v2761 = 96;
                                                                  v2740 = v2761 + 4;
                                                                  while (v2736 != v2741)
                                                                  {
                                                                    int v2762 = *--v2736;
                                                                    *((_DWORD *)v2761 - 1) = v2762;
                                                                    v2761 -= 4;
                                                                  }
                                                                  *(void *)uint64_t v2735 = v2761;
                                                                  *v2737 = v2740;
                                                                  void *v2739 = &v2746[4 * v2745];
                                                                  if (v2741) {
                                                                    operator delete(v2741);
                                                                  }
                                                                }
                                                                else
                                                                {
                                                                  _DWORD *v2736 = 96;
                                                                  v2740 = v2736 + 1;
                                                                }
                                                                *v2737 = v2740;
                                                                if (!*v14)
                                                                {
LABEL_4199:
                                                                  if ((*((unsigned char *)__p + 12) & 2) == 0) {
                                                                    goto LABEL_4200;
                                                                  }
                                                                  uint64_t v2763 = *v12 + 24 * v13;
                                                                  v2765 = (_DWORD **)(v2763 + 8);
                                                                  v2764 = *(_DWORD **)(v2763 + 8);
                                                                  v2767 = (void *)(v2763 + 16);
                                                                  unint64_t v2766 = *(void *)(v2763 + 16);
                                                                  if ((unint64_t)v2764 >= v2766)
                                                                  {
                                                                    v2769 = *(_DWORD **)v2763;
                                                                    uint64_t v2770 = ((uint64_t)v2764 - *(void *)v2763) >> 2;
                                                                    unint64_t v2771 = v2770 + 1;
                                                                    if ((unint64_t)(v2770 + 1) >> 62) {
                                                                      sub_566C();
                                                                    }
                                                                    uint64_t v2772 = v2766 - (void)v2769;
                                                                    if (v2772 >> 1 > v2771) {
                                                                      unint64_t v2771 = v2772 >> 1;
                                                                    }
                                                                    if ((unint64_t)v2772 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                                      unint64_t v2773 = 0x3FFFFFFFFFFFFFFFLL;
                                                                    }
                                                                    else {
                                                                      unint64_t v2773 = v2771;
                                                                    }
                                                                    if (v2773)
                                                                    {
                                                                      v2774 = (char *)sub_458C8((uint64_t)v2767, v2773);
                                                                      v2764 = *v2765;
                                                                      v2769 = *(_DWORD **)v2763;
                                                                    }
                                                                    else
                                                                    {
                                                                      v2774 = 0;
                                                                    }
                                                                    v2789 = &v2774[4 * v2770];
                                                                    *(_DWORD *)v2789 = 97;
                                                                    v2768 = v2789 + 4;
                                                                    while (v2764 != v2769)
                                                                    {
                                                                      int v2790 = *--v2764;
                                                                      *((_DWORD *)v2789 - 1) = v2790;
                                                                      v2789 -= 4;
                                                                    }
                                                                    *(void *)uint64_t v2763 = v2789;
                                                                    *v2765 = v2768;
                                                                    void *v2767 = &v2774[4 * v2773];
                                                                    if (v2769) {
                                                                      operator delete(v2769);
                                                                    }
                                                                  }
                                                                  else
                                                                  {
                                                                    _DWORD *v2764 = 97;
                                                                    v2768 = v2764 + 1;
                                                                  }
                                                                  *v2765 = v2768;
                                                                  if (!*v14)
                                                                  {
LABEL_4200:
                                                                    if ((*((unsigned char *)__p + 12) & 4) == 0) {
                                                                      goto LABEL_4201;
                                                                    }
                                                                    uint64_t v2791 = *v12 + 24 * v13;
                                                                    v2793 = (_DWORD **)(v2791 + 8);
                                                                    v2792 = *(_DWORD **)(v2791 + 8);
                                                                    v2795 = (void *)(v2791 + 16);
                                                                    unint64_t v2794 = *(void *)(v2791 + 16);
                                                                    if ((unint64_t)v2792 >= v2794)
                                                                    {
                                                                      v2797 = *(_DWORD **)v2791;
                                                                      uint64_t v2798 = ((uint64_t)v2792 - *(void *)v2791) >> 2;
                                                                      unint64_t v2799 = v2798 + 1;
                                                                      if ((unint64_t)(v2798 + 1) >> 62) {
                                                                        sub_566C();
                                                                      }
                                                                      uint64_t v2800 = v2794 - (void)v2797;
                                                                      if (v2800 >> 1 > v2799) {
                                                                        unint64_t v2799 = v2800 >> 1;
                                                                      }
                                                                      if ((unint64_t)v2800 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                                        unint64_t v2801 = 0x3FFFFFFFFFFFFFFFLL;
                                                                      }
                                                                      else {
                                                                        unint64_t v2801 = v2799;
                                                                      }
                                                                      if (v2801)
                                                                      {
                                                                        v2802 = (char *)sub_458C8((uint64_t)v2795, v2801);
                                                                        v2792 = *v2793;
                                                                        v2797 = *(_DWORD **)v2791;
                                                                      }
                                                                      else
                                                                      {
                                                                        v2802 = 0;
                                                                      }
                                                                      v2817 = &v2802[4 * v2798];
                                                                      *(_DWORD *)v2817 = 98;
                                                                      v2796 = v2817 + 4;
                                                                      while (v2792 != v2797)
                                                                      {
                                                                        int v2818 = *--v2792;
                                                                        *((_DWORD *)v2817 - 1) = v2818;
                                                                        v2817 -= 4;
                                                                      }
                                                                      *(void *)uint64_t v2791 = v2817;
                                                                      *v2793 = v2796;
                                                                      void *v2795 = &v2802[4 * v2801];
                                                                      if (v2797) {
                                                                        operator delete(v2797);
                                                                      }
                                                                    }
                                                                    else
                                                                    {
                                                                      _DWORD *v2792 = 98;
                                                                      v2796 = v2792 + 1;
                                                                    }
                                                                    *v2793 = v2796;
                                                                    if (!*v14)
                                                                    {
LABEL_4201:
                                                                      if ((*((unsigned char *)__p + 12) & 8) == 0) {
                                                                        goto LABEL_4202;
                                                                      }
                                                                      uint64_t v2819 = *v12 + 24 * v13;
                                                                      v2821 = (_DWORD **)(v2819 + 8);
                                                                      v2820 = *(_DWORD **)(v2819 + 8);
                                                                      v2823 = (void *)(v2819 + 16);
                                                                      unint64_t v2822 = *(void *)(v2819 + 16);
                                                                      if ((unint64_t)v2820 >= v2822)
                                                                      {
                                                                        v2825 = *(_DWORD **)v2819;
                                                                        uint64_t v2826 = ((uint64_t)v2820 - *(void *)v2819) >> 2;
                                                                        unint64_t v2827 = v2826 + 1;
                                                                        if ((unint64_t)(v2826 + 1) >> 62) {
                                                                          sub_566C();
                                                                        }
                                                                        uint64_t v2828 = v2822 - (void)v2825;
                                                                        if (v2828 >> 1 > v2827) {
                                                                          unint64_t v2827 = v2828 >> 1;
                                                                        }
                                                                        if ((unint64_t)v2828 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                                          unint64_t v2829 = 0x3FFFFFFFFFFFFFFFLL;
                                                                        }
                                                                        else {
                                                                          unint64_t v2829 = v2827;
                                                                        }
                                                                        if (v2829)
                                                                        {
                                                                          v2830 = (char *)sub_458C8((uint64_t)v2823, v2829);
                                                                          v2820 = *v2821;
                                                                          v2825 = *(_DWORD **)v2819;
                                                                        }
                                                                        else
                                                                        {
                                                                          v2830 = 0;
                                                                        }
                                                                        v2845 = &v2830[4 * v2826];
                                                                        *(_DWORD *)v2845 = 99;
                                                                        v2824 = v2845 + 4;
                                                                        while (v2820 != v2825)
                                                                        {
                                                                          int v2846 = *--v2820;
                                                                          *((_DWORD *)v2845 - 1) = v2846;
                                                                          v2845 -= 4;
                                                                        }
                                                                        *(void *)uint64_t v2819 = v2845;
                                                                        *v2821 = v2824;
                                                                        void *v2823 = &v2830[4 * v2829];
                                                                        if (v2825) {
                                                                          operator delete(v2825);
                                                                        }
                                                                      }
                                                                      else
                                                                      {
                                                                        _DWORD *v2820 = 99;
                                                                        v2824 = v2820 + 1;
                                                                      }
                                                                      *v2821 = v2824;
                                                                      if (!*v14)
                                                                      {
LABEL_4202:
                                                                        if ((*((unsigned char *)__p + 12) & 0x10) == 0) {
                                                                          goto LABEL_4203;
                                                                        }
                                                                        uint64_t v2847 = *v12 + 24 * v13;
                                                                        v2849 = (_DWORD **)(v2847 + 8);
                                                                        v2848 = *(_DWORD **)(v2847 + 8);
                                                                        v2851 = (void *)(v2847 + 16);
                                                                        unint64_t v2850 = *(void *)(v2847 + 16);
                                                                        if ((unint64_t)v2848 >= v2850)
                                                                        {
                                                                          v2853 = *(_DWORD **)v2847;
                                                                          uint64_t v2854 = ((uint64_t)v2848 - *(void *)v2847) >> 2;
                                                                          unint64_t v2855 = v2854 + 1;
                                                                          if ((unint64_t)(v2854 + 1) >> 62) {
                                                                            sub_566C();
                                                                          }
                                                                          uint64_t v2856 = v2850 - (void)v2853;
                                                                          if (v2856 >> 1 > v2855) {
                                                                            unint64_t v2855 = v2856 >> 1;
                                                                          }
                                                                          if ((unint64_t)v2856 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                                            unint64_t v2857 = 0x3FFFFFFFFFFFFFFFLL;
                                                                          }
                                                                          else {
                                                                            unint64_t v2857 = v2855;
                                                                          }
                                                                          if (v2857)
                                                                          {
                                                                            v2858 = (char *)sub_458C8((uint64_t)v2851, v2857);
                                                                            v2848 = *v2849;
                                                                            v2853 = *(_DWORD **)v2847;
                                                                          }
                                                                          else
                                                                          {
                                                                            v2858 = 0;
                                                                          }
                                                                          v2873 = &v2858[4 * v2854];
                                                                          *(_DWORD *)v2873 = 100;
                                                                          v2852 = v2873 + 4;
                                                                          while (v2848 != v2853)
                                                                          {
                                                                            int v2874 = *--v2848;
                                                                            *((_DWORD *)v2873 - 1) = v2874;
                                                                            v2873 -= 4;
                                                                          }
                                                                          *(void *)uint64_t v2847 = v2873;
                                                                          *v2849 = v2852;
                                                                          void *v2851 = &v2858[4 * v2857];
                                                                          if (v2853) {
                                                                            operator delete(v2853);
                                                                          }
                                                                        }
                                                                        else
                                                                        {
                                                                          _DWORD *v2848 = 100;
                                                                          v2852 = v2848 + 1;
                                                                        }
                                                                        *v2849 = v2852;
                                                                        if (!*v14)
                                                                        {
LABEL_4203:
                                                                          if ((*((unsigned char *)__p + 12) & 0x20) != 0)
                                                                          {
                                                                            uint64_t v247 = *v12 + 24 * v13;
                                                                            uint64_t v249 = (int **)(v247 + 8);
                                                                            int v248 = *(int **)(v247 + 8);
                                                                            uint64_t v251 = (void *)(v247 + 16);
                                                                            unint64_t v2875 = *(void *)(v247 + 16);
                                                                            if ((unint64_t)v248 < v2875)
                                                                            {
                                                                              int v252 = 101;
                                                                              goto LABEL_2186;
                                                                            }
                                                                            uint64_t v253 = *(int **)v247;
                                                                            uint64_t v2876 = ((uint64_t)v248 - *(void *)v247) >> 2;
                                                                            unint64_t v2877 = v2876 + 1;
                                                                            if ((unint64_t)(v2876 + 1) >> 62) {
                                                                              sub_566C();
                                                                            }
                                                                            uint64_t v2878 = v2875 - (void)v253;
                                                                            if (v2878 >> 1 > v2877) {
                                                                              unint64_t v2877 = v2878 >> 1;
                                                                            }
                                                                            if ((unint64_t)v2878 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                                              unint64_t v257 = 0x3FFFFFFFFFFFFFFFLL;
                                                                            }
                                                                            else {
                                                                              unint64_t v257 = v2877;
                                                                            }
                                                                            if (v257)
                                                                            {
                                                                              unint64_t v258 = (char *)sub_458C8((uint64_t)v251, v257);
                                                                              int v248 = *v249;
                                                                              uint64_t v253 = *(int **)v247;
                                                                            }
                                                                            else
                                                                            {
                                                                              unint64_t v258 = 0;
                                                                            }
                                                                            unint64_t v473 = &v258[4 * v2876];
                                                                            *(_DWORD *)unint64_t v473 = 101;
                                                                            unint64_t v474 = (int *)(v473 + 4);
                                                                            while (v248 != v253)
                                                                            {
                                                                              int v2885 = *--v248;
                                                                              *((_DWORD *)v473 - 1) = v2885;
                                                                              v473 -= 4;
                                                                            }
                                                                            goto LABEL_3834;
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          break;
        case 10:
          if (!*v14)
          {
            if ((*(void *)__p & 0x8000000000000000) == 0) {
              goto LABEL_72;
            }
            uint64_t v117 = *v12 + 24 * v13;
            uint64_t v119 = (_DWORD **)(v117 + 8);
            unint64_t v118 = *(_DWORD **)(v117 + 8);
            uint64_t v121 = (void *)(v117 + 16);
            unint64_t v120 = *(void *)(v117 + 16);
            if ((unint64_t)v118 >= v120)
            {
              uint64_t v225 = *(_DWORD **)v117;
              uint64_t v226 = ((uint64_t)v118 - *(void *)v117) >> 2;
              unint64_t v227 = v226 + 1;
              if ((unint64_t)(v226 + 1) >> 62) {
                sub_566C();
              }
              uint64_t v228 = v120 - (void)v225;
              if (v228 >> 1 > v227) {
                unint64_t v227 = v228 >> 1;
              }
              if ((unint64_t)v228 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v229 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v229 = v227;
              }
              if (v229)
              {
                int v230 = (char *)sub_458C8((uint64_t)v121, v229);
                unint64_t v118 = *v119;
                uint64_t v225 = *(_DWORD **)v117;
              }
              else
              {
                int v230 = 0;
              }
              unint64_t v457 = &v230[4 * v226];
              *(_DWORD *)unint64_t v457 = 63;
              uint64_t v122 = v457 + 4;
              while (v118 != v225)
              {
                int v458 = *--v118;
                *((_DWORD *)v457 - 1) = v458;
                v457 -= 4;
              }
              *(void *)uint64_t v117 = v457;
              char *v119 = v122;
              *uint64_t v121 = &v230[4 * v229];
              if (v225) {
                operator delete(v225);
              }
            }
            else
            {
              _DWORD *v118 = 63;
              uint64_t v122 = v118 + 1;
            }
            char *v119 = v122;
            if (!*v14)
            {
LABEL_72:
              if ((*((unsigned char *)__p + 8) & 1) == 0) {
                goto LABEL_1526;
              }
              uint64_t v99 = *v12 + 24 * v13;
              unint64_t v101 = (_DWORD **)(v99 + 8);
              unint64_t v100 = *(_DWORD **)(v99 + 8);
              unint64_t v103 = (void *)(v99 + 16);
              unint64_t v102 = *(void *)(v99 + 16);
              if ((unint64_t)v100 >= v102)
              {
                uint64_t v213 = *(_DWORD **)v99;
                uint64_t v214 = ((uint64_t)v100 - *(void *)v99) >> 2;
                unint64_t v215 = v214 + 1;
                if ((unint64_t)(v214 + 1) >> 62) {
                  sub_566C();
                }
                uint64_t v216 = v102 - (void)v213;
                if (v216 >> 1 > v215) {
                  unint64_t v215 = v216 >> 1;
                }
                if ((unint64_t)v216 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v217 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v217 = v215;
                }
                if (v217)
                {
                  uint64_t v218 = (char *)sub_458C8((uint64_t)v103, v217);
                  unint64_t v100 = *v101;
                  uint64_t v213 = *(_DWORD **)v99;
                }
                else
                {
                  uint64_t v218 = 0;
                }
                unint64_t v441 = &v218[4 * v214];
                *(_DWORD *)unint64_t v441 = 64;
                unint64_t v104 = v441 + 4;
                while (v100 != v213)
                {
                  int v442 = *--v100;
                  *((_DWORD *)v441 - 1) = v442;
                  v441 -= 4;
                }
                *(void *)uint64_t v99 = v441;
                unint64_t *v101 = v104;
                void *v103 = &v218[4 * v217];
                if (v213) {
                  operator delete(v213);
                }
              }
              else
              {
                *unint64_t v100 = 64;
                unint64_t v104 = v100 + 1;
              }
              unint64_t *v101 = v104;
              if (!*v14)
              {
LABEL_1526:
                if ((*((unsigned char *)__p + 8) & 2) == 0) {
                  goto LABEL_4204;
                }
                uint64_t v443 = *v12 + 24 * v13;
                uint64_t v445 = (_DWORD **)(v443 + 8);
                v444 = *(_DWORD **)(v443 + 8);
                uint64_t v447 = (void *)(v443 + 16);
                unint64_t v446 = *(void *)(v443 + 16);
                if ((unint64_t)v444 >= v446)
                {
                  v449 = *(_DWORD **)v443;
                  uint64_t v450 = ((uint64_t)v444 - *(void *)v443) >> 2;
                  unint64_t v451 = v450 + 1;
                  if ((unint64_t)(v450 + 1) >> 62) {
                    sub_566C();
                  }
                  uint64_t v452 = v446 - (void)v449;
                  if (v452 >> 1 > v451) {
                    unint64_t v451 = v452 >> 1;
                  }
                  if ((unint64_t)v452 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v453 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v453 = v451;
                  }
                  if (v453)
                  {
                    int64_t v454 = (char *)sub_458C8((uint64_t)v447, v453);
                    v444 = *v445;
                    v449 = *(_DWORD **)v443;
                  }
                  else
                  {
                    int64_t v454 = 0;
                  }
                  v658 = &v454[4 * v450];
                  *(_DWORD *)v658 = 65;
                  uint64_t v448 = v658 + 4;
                  while (v444 != v449)
                  {
                    int v659 = *--v444;
                    *((_DWORD *)v658 - 1) = v659;
                    v658 -= 4;
                  }
                  *(void *)uint64_t v443 = v658;
                  char *v445 = v448;
                  *uint64_t v447 = &v454[4 * v453];
                  if (v449) {
                    operator delete(v449);
                  }
                }
                else
                {
                  _DWORD *v444 = 65;
                  uint64_t v448 = v444 + 1;
                }
                char *v445 = v448;
                if (!*v14)
                {
LABEL_4204:
                  if ((*((unsigned char *)__p + 8) & 4) == 0) {
                    goto LABEL_4205;
                  }
                  uint64_t v660 = *v12 + 24 * v13;
                  v662 = (_DWORD **)(v660 + 8);
                  v661 = *(_DWORD **)(v660 + 8);
                  v664 = (void *)(v660 + 16);
                  unint64_t v663 = *(void *)(v660 + 16);
                  if ((unint64_t)v661 >= v663)
                  {
                    v666 = *(_DWORD **)v660;
                    uint64_t v667 = ((uint64_t)v661 - *(void *)v660) >> 2;
                    unint64_t v668 = v667 + 1;
                    if ((unint64_t)(v667 + 1) >> 62) {
                      sub_566C();
                    }
                    uint64_t v669 = v663 - (void)v666;
                    if (v669 >> 1 > v668) {
                      unint64_t v668 = v669 >> 1;
                    }
                    if ((unint64_t)v669 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v670 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v670 = v668;
                    }
                    if (v670)
                    {
                      v671 = (char *)sub_458C8((uint64_t)v664, v670);
                      v661 = *v662;
                      v666 = *(_DWORD **)v660;
                    }
                    else
                    {
                      v671 = 0;
                    }
                    v852 = &v671[4 * v667];
                    *(_DWORD *)v852 = 66;
                    v665 = v852 + 4;
                    while (v661 != v666)
                    {
                      int v853 = *--v661;
                      *((_DWORD *)v852 - 1) = v853;
                      v852 -= 4;
                    }
                    *(void *)uint64_t v660 = v852;
                    *v662 = v665;
                    void *v664 = &v671[4 * v670];
                    if (v666) {
                      operator delete(v666);
                    }
                  }
                  else
                  {
                    _DWORD *v661 = 66;
                    v665 = v661 + 1;
                  }
                  *v662 = v665;
                  if (!*v14)
                  {
LABEL_4205:
                    if ((*((unsigned char *)__p + 8) & 8) == 0) {
                      goto LABEL_4206;
                    }
                    uint64_t v854 = *v12 + 24 * v13;
                    v856 = (_DWORD **)(v854 + 8);
                    v855 = *(_DWORD **)(v854 + 8);
                    v858 = (void *)(v854 + 16);
                    unint64_t v857 = *(void *)(v854 + 16);
                    if ((unint64_t)v855 >= v857)
                    {
                      v860 = *(_DWORD **)v854;
                      uint64_t v861 = ((uint64_t)v855 - *(void *)v854) >> 2;
                      unint64_t v862 = v861 + 1;
                      if ((unint64_t)(v861 + 1) >> 62) {
                        sub_566C();
                      }
                      uint64_t v863 = v857 - (void)v860;
                      if (v863 >> 1 > v862) {
                        unint64_t v862 = v863 >> 1;
                      }
                      if ((unint64_t)v863 >= 0x7FFFFFFFFFFFFFFCLL) {
                        unint64_t v864 = 0x3FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v864 = v862;
                      }
                      if (v864)
                      {
                        v865 = (char *)sub_458C8((uint64_t)v858, v864);
                        v855 = *v856;
                        v860 = *(_DWORD **)v854;
                      }
                      else
                      {
                        v865 = 0;
                      }
                      v1028 = &v865[4 * v861];
                      *(_DWORD *)v1028 = 67;
                      v859 = v1028 + 4;
                      while (v855 != v860)
                      {
                        int v1029 = *--v855;
                        *((_DWORD *)v1028 - 1) = v1029;
                        v1028 -= 4;
                      }
                      *(void *)uint64_t v854 = v1028;
                      *v856 = v859;
                      void *v858 = &v865[4 * v864];
                      if (v860) {
                        operator delete(v860);
                      }
                    }
                    else
                    {
                      _DWORD *v855 = 67;
                      v859 = v855 + 1;
                    }
                    *v856 = v859;
                    if (!*v14)
                    {
LABEL_4206:
                      if ((*((unsigned char *)__p + 8) & 0x10) == 0) {
                        goto LABEL_4207;
                      }
                      uint64_t v1030 = *v12 + 24 * v13;
                      v1032 = (_DWORD **)(v1030 + 8);
                      v1031 = *(_DWORD **)(v1030 + 8);
                      v1034 = (void *)(v1030 + 16);
                      unint64_t v1033 = *(void *)(v1030 + 16);
                      if ((unint64_t)v1031 >= v1033)
                      {
                        v1036 = *(_DWORD **)v1030;
                        uint64_t v1037 = ((uint64_t)v1031 - *(void *)v1030) >> 2;
                        unint64_t v1038 = v1037 + 1;
                        if ((unint64_t)(v1037 + 1) >> 62) {
                          sub_566C();
                        }
                        uint64_t v1039 = v1033 - (void)v1036;
                        if (v1039 >> 1 > v1038) {
                          unint64_t v1038 = v1039 >> 1;
                        }
                        if ((unint64_t)v1039 >= 0x7FFFFFFFFFFFFFFCLL) {
                          unint64_t v1040 = 0x3FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v1040 = v1038;
                        }
                        if (v1040)
                        {
                          v1041 = (char *)sub_458C8((uint64_t)v1034, v1040);
                          v1031 = *v1032;
                          v1036 = *(_DWORD **)v1030;
                        }
                        else
                        {
                          v1041 = 0;
                        }
                        v1197 = &v1041[4 * v1037];
                        *(_DWORD *)v1197 = 68;
                        v1035 = v1197 + 4;
                        while (v1031 != v1036)
                        {
                          int v1198 = *--v1031;
                          *((_DWORD *)v1197 - 1) = v1198;
                          v1197 -= 4;
                        }
                        *(void *)uint64_t v1030 = v1197;
                        *v1032 = v1035;
                        void *v1034 = &v1041[4 * v1040];
                        if (v1036) {
                          operator delete(v1036);
                        }
                      }
                      else
                      {
                        _DWORD *v1031 = 68;
                        v1035 = v1031 + 1;
                      }
                      *v1032 = v1035;
                      if (!*v14)
                      {
LABEL_4207:
                        if ((*((unsigned char *)__p + 8) & 0x20) != 0)
                        {
                          uint64_t v247 = *v12 + 24 * v13;
                          uint64_t v249 = (int **)(v247 + 8);
                          int v248 = *(int **)(v247 + 8);
                          uint64_t v251 = (void *)(v247 + 16);
                          unint64_t v1199 = *(void *)(v247 + 16);
                          if ((unint64_t)v248 < v1199)
                          {
                            int v252 = 69;
                            goto LABEL_2186;
                          }
                          uint64_t v253 = *(int **)v247;
                          uint64_t v1200 = ((uint64_t)v248 - *(void *)v247) >> 2;
                          unint64_t v1201 = v1200 + 1;
                          if ((unint64_t)(v1200 + 1) >> 62) {
                            sub_566C();
                          }
                          uint64_t v1202 = v1199 - (void)v253;
                          if (v1202 >> 1 > v1201) {
                            unint64_t v1201 = v1202 >> 1;
                          }
                          if ((unint64_t)v1202 >= 0x7FFFFFFFFFFFFFFCLL) {
                            unint64_t v257 = 0x3FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v257 = v1201;
                          }
                          if (v257)
                          {
                            unint64_t v258 = (char *)sub_458C8((uint64_t)v251, v257);
                            int v248 = *v249;
                            uint64_t v253 = *(int **)v247;
                          }
                          else
                          {
                            unint64_t v258 = 0;
                          }
                          unint64_t v473 = &v258[4 * v1200];
                          *(_DWORD *)unint64_t v473 = 69;
                          unint64_t v474 = (int *)(v473 + 4);
                          while (v248 != v253)
                          {
                            int v1361 = *--v248;
                            *((_DWORD *)v473 - 1) = v1361;
                            v473 -= 4;
                          }
                          goto LABEL_3834;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          break;
        case 11:
          if (!*v14)
          {
            if ((*((unsigned char *)__p + 7) & 0x20) == 0) {
              goto LABEL_252;
            }
            uint64_t v27 = *v12 + 24 * v13;
            __int16 v29 = (_DWORD **)(v27 + 8);
            int v28 = *(_DWORD **)(v27 + 8);
            uint64_t v31 = (void *)(v27 + 16);
            unint64_t v30 = *(void *)(v27 + 16);
            if ((unint64_t)v28 >= v30)
            {
              uint64_t v129 = *(_DWORD **)v27;
              uint64_t v130 = ((uint64_t)v28 - *(void *)v27) >> 2;
              unint64_t v131 = v130 + 1;
              if ((unint64_t)(v130 + 1) >> 62) {
                sub_566C();
              }
              uint64_t v132 = v30 - (void)v129;
              if (v132 >> 1 > v131) {
                unint64_t v131 = v132 >> 1;
              }
              if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v133 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v133 = v131;
              }
              if (v133)
              {
                char v134 = (char *)sub_458C8((uint64_t)v31, v133);
                int v28 = *v29;
                uint64_t v129 = *(_DWORD **)v27;
              }
              else
              {
                char v134 = 0;
              }
              unint64_t v245 = &v134[4 * v130];
              *(_DWORD *)unint64_t v245 = 61;
              uint64_t v32 = v245 + 4;
              while (v28 != v129)
              {
                int v246 = *--v28;
                *((_DWORD *)v245 - 1) = v246;
                v245 -= 4;
              }
              *(void *)uint64_t v27 = v245;
              void *v29 = v32;
              *uint64_t v31 = &v134[4 * v133];
              if (v129) {
                operator delete(v129);
              }
            }
            else
            {
              _DWORD *v28 = 61;
              uint64_t v32 = v28 + 1;
            }
            void *v29 = v32;
            if (!*v14)
            {
LABEL_252:
              if ((*((unsigned char *)__p + 7) & 0x40) != 0)
              {
                uint64_t v247 = *v12 + 24 * v13;
                uint64_t v249 = (int **)(v247 + 8);
                int v248 = *(int **)(v247 + 8);
                uint64_t v251 = (void *)(v247 + 16);
                unint64_t v250 = *(void *)(v247 + 16);
                if ((unint64_t)v248 < v250)
                {
                  int v252 = 62;
                  goto LABEL_2186;
                }
                uint64_t v253 = *(int **)v247;
                uint64_t v254 = ((uint64_t)v248 - *(void *)v247) >> 2;
                unint64_t v255 = v254 + 1;
                if ((unint64_t)(v254 + 1) >> 62) {
                  sub_566C();
                }
                uint64_t v256 = v250 - (void)v253;
                if (v256 >> 1 > v255) {
                  unint64_t v255 = v256 >> 1;
                }
                if ((unint64_t)v256 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v257 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v257 = v255;
                }
                if (v257)
                {
                  unint64_t v258 = (char *)sub_458C8((uint64_t)v251, v257);
                  int v248 = *v249;
                  uint64_t v253 = *(int **)v247;
                }
                else
                {
                  unint64_t v258 = 0;
                }
                unint64_t v473 = &v258[4 * v254];
                *(_DWORD *)unint64_t v473 = 62;
                unint64_t v474 = (int *)(v473 + 4);
                while (v248 != v253)
                {
                  int v475 = *--v248;
                  *((_DWORD *)v473 - 1) = v475;
                  v473 -= 4;
                }
                goto LABEL_3834;
              }
            }
          }
          break;
        case 12:
          if (!*v14)
          {
            if ((*((unsigned char *)__p + 15) & 2) == 0) {
              goto LABEL_288;
            }
            uint64_t v39 = *v12 + 24 * v13;
            uint64_t v41 = (_DWORD **)(v39 + 8);
            uint64_t v40 = *(_DWORD **)(v39 + 8);
            int v43 = (void *)(v39 + 16);
            unint64_t v42 = *(void *)(v39 + 16);
            if ((unint64_t)v40 >= v42)
            {
              unint64_t v141 = *(_DWORD **)v39;
              uint64_t v142 = ((uint64_t)v40 - *(void *)v39) >> 2;
              unint64_t v143 = v142 + 1;
              if ((unint64_t)(v142 + 1) >> 62) {
                sub_566C();
              }
              uint64_t v144 = v42 - (void)v141;
              if (v144 >> 1 > v143) {
                unint64_t v143 = v144 >> 1;
              }
              if ((unint64_t)v144 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v145 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v145 = v143;
              }
              if (v145)
              {
                unint64_t v146 = (char *)sub_458C8((uint64_t)v43, v145);
                uint64_t v40 = *v41;
                unint64_t v141 = *(_DWORD **)v39;
              }
              else
              {
                unint64_t v146 = 0;
              }
              uint64_t v273 = &v146[4 * v142];
              *(_DWORD *)uint64_t v273 = 121;
              unint64_t v44 = v273 + 4;
              while (v40 != v141)
              {
                int v274 = *--v40;
                *((_DWORD *)v273 - 1) = v274;
                v273 -= 4;
              }
              *(void *)uint64_t v39 = v273;
              void *v41 = v44;
              void *v43 = &v146[4 * v145];
              if (v141) {
                operator delete(v141);
              }
            }
            else
            {
              *uint64_t v40 = 121;
              unint64_t v44 = v40 + 1;
            }
            void *v41 = v44;
            if (!*v14)
            {
LABEL_288:
              if ((*((unsigned char *)__p + 15) & 4) == 0) {
                goto LABEL_1563;
              }
              uint64_t v275 = *v12 + 24 * v13;
              uint64_t v277 = (_DWORD **)(v275 + 8);
              unint64_t v276 = *(_DWORD **)(v275 + 8);
              unint64_t v279 = (void *)(v275 + 16);
              unint64_t v278 = *(void *)(v275 + 16);
              if ((unint64_t)v276 >= v278)
              {
                uint64_t v281 = *(_DWORD **)v275;
                uint64_t v282 = ((uint64_t)v276 - *(void *)v275) >> 2;
                unint64_t v283 = v282 + 1;
                if ((unint64_t)(v282 + 1) >> 62) {
                  sub_566C();
                }
                uint64_t v284 = v278 - (void)v281;
                if (v284 >> 1 > v283) {
                  unint64_t v283 = v284 >> 1;
                }
                if ((unint64_t)v284 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v285 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v285 = v283;
                }
                if (v285)
                {
                  unint64_t v286 = (char *)sub_458C8((uint64_t)v279, v285);
                  unint64_t v276 = *v277;
                  uint64_t v281 = *(_DWORD **)v275;
                }
                else
                {
                  unint64_t v286 = 0;
                }
                uint64_t v490 = &v286[4 * v282];
                *(_DWORD *)uint64_t v490 = 122;
                unint64_t v280 = v490 + 4;
                while (v276 != v281)
                {
                  int v491 = *--v276;
                  *((_DWORD *)v490 - 1) = v491;
                  v490 -= 4;
                }
                *(void *)uint64_t v275 = v490;
                char *v277 = v280;
                *unint64_t v279 = &v286[4 * v285];
                if (v281) {
                  operator delete(v281);
                }
              }
              else
              {
                _DWORD *v276 = 122;
                unint64_t v280 = v276 + 1;
              }
              char *v277 = v280;
              if (!*v14)
              {
LABEL_1563:
                if ((*((unsigned char *)__p + 15) & 8) == 0) {
                  goto LABEL_4208;
                }
                uint64_t v492 = *v12 + 24 * v13;
                unint64_t v494 = (_DWORD **)(v492 + 8);
                uint64_t v493 = *(_DWORD **)(v492 + 8);
                v496 = (void *)(v492 + 16);
                unint64_t v495 = *(void *)(v492 + 16);
                if ((unint64_t)v493 >= v495)
                {
                  unint64_t v498 = *(_DWORD **)v492;
                  uint64_t v499 = ((uint64_t)v493 - *(void *)v492) >> 2;
                  unint64_t v500 = v499 + 1;
                  if ((unint64_t)(v499 + 1) >> 62) {
                    sub_566C();
                  }
                  uint64_t v501 = v495 - (void)v498;
                  if (v501 >> 1 > v500) {
                    unint64_t v500 = v501 >> 1;
                  }
                  if ((unint64_t)v501 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v502 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v502 = v500;
                  }
                  if (v502)
                  {
                    v503 = (char *)sub_458C8((uint64_t)v496, v502);
                    uint64_t v493 = *v494;
                    unint64_t v498 = *(_DWORD **)v492;
                  }
                  else
                  {
                    v503 = 0;
                  }
                  v692 = &v503[4 * v499];
                  *(_DWORD *)v692 = 123;
                  v497 = v692 + 4;
                  while (v493 != v498)
                  {
                    int v693 = *--v493;
                    *((_DWORD *)v692 - 1) = v693;
                    v692 -= 4;
                  }
                  *(void *)uint64_t v492 = v692;
                  *unint64_t v494 = v497;
                  void *v496 = &v503[4 * v502];
                  if (v498) {
                    operator delete(v498);
                  }
                }
                else
                {
                  *uint64_t v493 = 123;
                  v497 = v493 + 1;
                }
                *unint64_t v494 = v497;
                if (!*v14)
                {
LABEL_4208:
                  if ((*((unsigned char *)__p + 15) & 0x10) == 0) {
                    goto LABEL_4209;
                  }
                  uint64_t v694 = *v12 + 24 * v13;
                  v696 = (_DWORD **)(v694 + 8);
                  v695 = *(_DWORD **)(v694 + 8);
                  v698 = (void *)(v694 + 16);
                  unint64_t v697 = *(void *)(v694 + 16);
                  if ((unint64_t)v695 >= v697)
                  {
                    v700 = *(_DWORD **)v694;
                    uint64_t v701 = ((uint64_t)v695 - *(void *)v694) >> 2;
                    unint64_t v702 = v701 + 1;
                    if ((unint64_t)(v701 + 1) >> 62) {
                      sub_566C();
                    }
                    uint64_t v703 = v697 - (void)v700;
                    if (v703 >> 1 > v702) {
                      unint64_t v702 = v703 >> 1;
                    }
                    if ((unint64_t)v703 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v704 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v704 = v702;
                    }
                    if (v704)
                    {
                      v705 = (char *)sub_458C8((uint64_t)v698, v704);
                      v695 = *v696;
                      v700 = *(_DWORD **)v694;
                    }
                    else
                    {
                      v705 = 0;
                    }
                    v881 = &v705[4 * v701];
                    *(_DWORD *)v881 = 124;
                    v699 = v881 + 4;
                    while (v695 != v700)
                    {
                      int v882 = *--v695;
                      *((_DWORD *)v881 - 1) = v882;
                      v881 -= 4;
                    }
                    *(void *)uint64_t v694 = v881;
                    *v696 = v699;
                    void *v698 = &v705[4 * v704];
                    if (v700) {
                      operator delete(v700);
                    }
                  }
                  else
                  {
                    _DWORD *v695 = 124;
                    v699 = v695 + 1;
                  }
                  *v696 = v699;
                  if (!*v14)
                  {
LABEL_4209:
                    if ((*((unsigned char *)__p + 15) & 0x20) == 0) {
                      goto LABEL_4210;
                    }
                    uint64_t v883 = *v12 + 24 * v13;
                    v885 = (_DWORD **)(v883 + 8);
                    v884 = *(_DWORD **)(v883 + 8);
                    v887 = (void *)(v883 + 16);
                    unint64_t v886 = *(void *)(v883 + 16);
                    if ((unint64_t)v884 >= v886)
                    {
                      v889 = *(_DWORD **)v883;
                      uint64_t v890 = ((uint64_t)v884 - *(void *)v883) >> 2;
                      unint64_t v891 = v890 + 1;
                      if ((unint64_t)(v890 + 1) >> 62) {
                        sub_566C();
                      }
                      uint64_t v892 = v886 - (void)v889;
                      if (v892 >> 1 > v891) {
                        unint64_t v891 = v892 >> 1;
                      }
                      if ((unint64_t)v892 >= 0x7FFFFFFFFFFFFFFCLL) {
                        unint64_t v893 = 0x3FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v893 = v891;
                      }
                      if (v893)
                      {
                        v894 = (char *)sub_458C8((uint64_t)v887, v893);
                        v884 = *v885;
                        v889 = *(_DWORD **)v883;
                      }
                      else
                      {
                        v894 = 0;
                      }
                      v1056 = &v894[4 * v890];
                      *(_DWORD *)v1056 = 125;
                      v888 = v1056 + 4;
                      while (v884 != v889)
                      {
                        int v1057 = *--v884;
                        *((_DWORD *)v1056 - 1) = v1057;
                        v1056 -= 4;
                      }
                      *(void *)uint64_t v883 = v1056;
                      *v885 = v888;
                      void *v887 = &v894[4 * v893];
                      if (v889) {
                        operator delete(v889);
                      }
                    }
                    else
                    {
                      _DWORD *v884 = 125;
                      v888 = v884 + 1;
                    }
                    *v885 = v888;
                    if (!*v14)
                    {
LABEL_4210:
                      if ((*((unsigned char *)__p + 15) & 0x40) == 0) {
                        goto LABEL_4211;
                      }
                      uint64_t v1058 = *v12 + 24 * v13;
                      v1060 = (_DWORD **)(v1058 + 8);
                      v1059 = *(_DWORD **)(v1058 + 8);
                      v1062 = (void *)(v1058 + 16);
                      unint64_t v1061 = *(void *)(v1058 + 16);
                      if ((unint64_t)v1059 >= v1061)
                      {
                        v1064 = *(_DWORD **)v1058;
                        uint64_t v1065 = ((uint64_t)v1059 - *(void *)v1058) >> 2;
                        unint64_t v1066 = v1065 + 1;
                        if ((unint64_t)(v1065 + 1) >> 62) {
                          sub_566C();
                        }
                        uint64_t v1067 = v1061 - (void)v1064;
                        if (v1067 >> 1 > v1066) {
                          unint64_t v1066 = v1067 >> 1;
                        }
                        if ((unint64_t)v1067 >= 0x7FFFFFFFFFFFFFFCLL) {
                          unint64_t v1068 = 0x3FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v1068 = v1066;
                        }
                        if (v1068)
                        {
                          v1069 = (char *)sub_458C8((uint64_t)v1062, v1068);
                          v1059 = *v1060;
                          v1064 = *(_DWORD **)v1058;
                        }
                        else
                        {
                          v1069 = 0;
                        }
                        v1217 = &v1069[4 * v1065];
                        *(_DWORD *)v1217 = 126;
                        v1063 = v1217 + 4;
                        while (v1059 != v1064)
                        {
                          int v1218 = *--v1059;
                          *((_DWORD *)v1217 - 1) = v1218;
                          v1217 -= 4;
                        }
                        *(void *)uint64_t v1058 = v1217;
                        *v1060 = v1063;
                        void *v1062 = &v1069[4 * v1068];
                        if (v1064) {
                          operator delete(v1064);
                        }
                      }
                      else
                      {
                        _DWORD *v1059 = 126;
                        v1063 = v1059 + 1;
                      }
                      *v1060 = v1063;
                      if (!*v14)
                      {
LABEL_4211:
                        if ((*((void *)__p + 1) & 0x8000000000000000) == 0) {
                          goto LABEL_4212;
                        }
                        uint64_t v1220 = *v12 + 24 * v13;
                        v1222 = (_DWORD **)(v1220 + 8);
                        v1221 = *(_DWORD **)(v1220 + 8);
                        v1224 = (void *)(v1220 + 16);
                        unint64_t v1223 = *(void *)(v1220 + 16);
                        if ((unint64_t)v1221 >= v1223)
                        {
                          v1229 = *(_DWORD **)v1220;
                          uint64_t v1230 = ((uint64_t)v1221 - *(void *)v1220) >> 2;
                          unint64_t v1231 = v1230 + 1;
                          if ((unint64_t)(v1230 + 1) >> 62) {
                            sub_566C();
                          }
                          uint64_t v1232 = v1223 - (void)v1229;
                          if (v1232 >> 1 > v1231) {
                            unint64_t v1231 = v1232 >> 1;
                          }
                          if ((unint64_t)v1232 >= 0x7FFFFFFFFFFFFFFCLL) {
                            unint64_t v1233 = 0x3FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v1233 = v1231;
                          }
                          if (v1233)
                          {
                            v1234 = (char *)sub_458C8((uint64_t)v1224, v1233);
                            v1221 = *v1222;
                            v1229 = *(_DWORD **)v1220;
                          }
                          else
                          {
                            v1234 = 0;
                          }
                          v1503 = &v1234[4 * v1230];
                          *(_DWORD *)v1503 = 127;
                          v1225 = v1503 + 4;
                          while (v1221 != v1229)
                          {
                            int v1504 = *--v1221;
                            *((_DWORD *)v1503 - 1) = v1504;
                            v1503 -= 4;
                          }
                          *(void *)uint64_t v1220 = v1503;
                          *v1222 = v1225;
                          void *v1224 = &v1234[4 * v1233];
                          if (v1229) {
                            operator delete(v1229);
                          }
                        }
                        else
                        {
                          _DWORD *v1221 = 127;
                          v1225 = v1221 + 1;
                        }
                        *v1222 = v1225;
                        if (!*v14)
                        {
LABEL_4212:
                          if (*((unsigned char *)__p + 16))
                          {
                            uint64_t v247 = *v12 + 24 * v13;
                            uint64_t v249 = (int **)(v247 + 8);
                            int v248 = *(int **)(v247 + 8);
                            uint64_t v251 = (void *)(v247 + 16);
                            unint64_t v1219 = *(void *)(v247 + 16);
                            if ((unint64_t)v248 < v1219)
                            {
                              int v252 = 128;
                              goto LABEL_2186;
                            }
                            uint64_t v253 = *(int **)v247;
                            uint64_t v1226 = ((uint64_t)v248 - *(void *)v247) >> 2;
                            unint64_t v1227 = v1226 + 1;
                            if ((unint64_t)(v1226 + 1) >> 62) {
                              sub_566C();
                            }
                            uint64_t v1228 = v1219 - (void)v253;
                            if (v1228 >> 1 > v1227) {
                              unint64_t v1227 = v1228 >> 1;
                            }
                            if ((unint64_t)v1228 >= 0x7FFFFFFFFFFFFFFCLL) {
                              unint64_t v257 = 0x3FFFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v257 = v1227;
                            }
                            if (v257)
                            {
                              unint64_t v258 = (char *)sub_458C8((uint64_t)v251, v257);
                              int v248 = *v249;
                              uint64_t v253 = *(int **)v247;
                            }
                            else
                            {
                              unint64_t v258 = 0;
                            }
                            unint64_t v473 = &v258[4 * v1226];
                            *(_DWORD *)unint64_t v473 = 128;
                            unint64_t v474 = (int *)(v473 + 4);
                            while (v248 != v253)
                            {
                              int v1488 = *--v248;
                              *((_DWORD *)v473 - 1) = v1488;
                              v473 -= 4;
                            }
                            goto LABEL_3834;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          break;
        case 13:
          if (!*v14)
          {
            if ((*((unsigned char *)__p + 12) & 0x40) == 0) {
              goto LABEL_432;
            }
            uint64_t v87 = *v12 + 24 * v13;
            uint64_t v89 = (_DWORD **)(v87 + 8);
            char v88 = *(_DWORD **)(v87 + 8);
            uint64_t v91 = (void *)(v87 + 16);
            unint64_t v90 = *(void *)(v87 + 16);
            if ((unint64_t)v88 >= v90)
            {
              unsigned int v189 = *(_DWORD **)v87;
              uint64_t v190 = ((uint64_t)v88 - *(void *)v87) >> 2;
              unint64_t v191 = v190 + 1;
              if ((unint64_t)(v190 + 1) >> 62) {
                sub_566C();
              }
              uint64_t v192 = v90 - (void)v189;
              if (v192 >> 1 > v191) {
                unint64_t v191 = v192 >> 1;
              }
              if ((unint64_t)v192 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v193 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v193 = v191;
              }
              if (v193)
              {
                uint64_t v194 = (char *)sub_458C8((uint64_t)v91, v193);
                char v88 = *v89;
                unsigned int v189 = *(_DWORD **)v87;
              }
              else
              {
                uint64_t v194 = 0;
              }
              unint64_t v385 = &v194[4 * v190];
              *(_DWORD *)unint64_t v385 = 102;
              unint64_t v92 = v385 + 4;
              while (v88 != v189)
              {
                int v386 = *--v88;
                *((_DWORD *)v385 - 1) = v386;
                v385 -= 4;
              }
              *(void *)uint64_t v87 = v385;
              char *v89 = v92;
              *uint64_t v91 = &v194[4 * v193];
              if (v189) {
                operator delete(v189);
              }
            }
            else
            {
              _DWORD *v88 = 102;
              unint64_t v92 = v88 + 1;
            }
            char *v89 = v92;
            if (!*v14)
            {
LABEL_432:
              if ((*((unsigned char *)__p + 12) & 0x80) == 0) {
                goto LABEL_2885;
              }
              uint64_t v387 = *v12 + 24 * v13;
              __int16 v389 = (_DWORD **)(v387 + 8);
              v388 = *(_DWORD **)(v387 + 8);
              uint64_t v391 = (void *)(v387 + 16);
              unint64_t v390 = *(void *)(v387 + 16);
              if ((unint64_t)v388 >= v390)
              {
                uint64_t v393 = *(_DWORD **)v387;
                uint64_t v394 = ((uint64_t)v388 - *(void *)v387) >> 2;
                unint64_t v395 = v394 + 1;
                if ((unint64_t)(v394 + 1) >> 62) {
                  sub_566C();
                }
                uint64_t v396 = v390 - (void)v393;
                if (v396 >> 1 > v395) {
                  unint64_t v395 = v396 >> 1;
                }
                if ((unint64_t)v396 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v397 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v397 = v395;
                }
                if (v397)
                {
                  uint64_t v398 = (char *)sub_458C8((uint64_t)v391, v397);
                  v388 = *v389;
                  uint64_t v393 = *(_DWORD **)v387;
                }
                else
                {
                  uint64_t v398 = 0;
                }
                v602 = &v398[4 * v394];
                *(_DWORD *)v602 = 103;
                unint64_t v392 = v602 + 4;
                while (v388 != v393)
                {
                  int v603 = *--v388;
                  *((_DWORD *)v602 - 1) = v603;
                  v602 -= 4;
                }
                *(void *)uint64_t v387 = v602;
                char *v389 = v392;
                *uint64_t v391 = &v398[4 * v397];
                if (v393) {
                  operator delete(v393);
                }
              }
              else
              {
                _DWORD *v388 = 103;
                unint64_t v392 = v388 + 1;
              }
              char *v389 = v392;
              if (!*v14)
              {
LABEL_2885:
                if ((*((unsigned char *)__p + 13) & 1) == 0) {
                  goto LABEL_4213;
                }
                uint64_t v604 = *v12 + 24 * v13;
                v606 = (_DWORD **)(v604 + 8);
                v605 = *(_DWORD **)(v604 + 8);
                v608 = (void *)(v604 + 16);
                unint64_t v607 = *(void *)(v604 + 16);
                if ((unint64_t)v605 >= v607)
                {
                  v610 = *(_DWORD **)v604;
                  uint64_t v611 = ((uint64_t)v605 - *(void *)v604) >> 2;
                  unint64_t v612 = v611 + 1;
                  if ((unint64_t)(v611 + 1) >> 62) {
                    sub_566C();
                  }
                  uint64_t v613 = v607 - (void)v610;
                  if (v613 >> 1 > v612) {
                    unint64_t v612 = v613 >> 1;
                  }
                  if ((unint64_t)v613 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v614 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v614 = v612;
                  }
                  if (v614)
                  {
                    v615 = (char *)sub_458C8((uint64_t)v608, v614);
                    v605 = *v606;
                    v610 = *(_DWORD **)v604;
                  }
                  else
                  {
                    v615 = 0;
                  }
                  v796 = &v615[4 * v611];
                  *(_DWORD *)v796 = 104;
                  v609 = v796 + 4;
                  while (v605 != v610)
                  {
                    int v797 = *--v605;
                    *((_DWORD *)v796 - 1) = v797;
                    v796 -= 4;
                  }
                  *(void *)uint64_t v604 = v796;
                  *v606 = v609;
                  void *v608 = &v615[4 * v614];
                  if (v610) {
                    operator delete(v610);
                  }
                }
                else
                {
                  _DWORD *v605 = 104;
                  v609 = v605 + 1;
                }
                *v606 = v609;
                if (!*v14)
                {
LABEL_4213:
                  if ((*((unsigned char *)__p + 13) & 2) == 0) {
                    goto LABEL_4214;
                  }
                  uint64_t v798 = *v12 + 24 * v13;
                  v800 = (_DWORD **)(v798 + 8);
                  v799 = *(_DWORD **)(v798 + 8);
                  v802 = (void *)(v798 + 16);
                  unint64_t v801 = *(void *)(v798 + 16);
                  if ((unint64_t)v799 >= v801)
                  {
                    v804 = *(_DWORD **)v798;
                    uint64_t v805 = ((uint64_t)v799 - *(void *)v798) >> 2;
                    unint64_t v806 = v805 + 1;
                    if ((unint64_t)(v805 + 1) >> 62) {
                      sub_566C();
                    }
                    uint64_t v807 = v801 - (void)v804;
                    if (v807 >> 1 > v806) {
                      unint64_t v806 = v807 >> 1;
                    }
                    if ((unint64_t)v807 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v808 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v808 = v806;
                    }
                    if (v808)
                    {
                      v809 = (char *)sub_458C8((uint64_t)v802, v808);
                      v799 = *v800;
                      v804 = *(_DWORD **)v798;
                    }
                    else
                    {
                      v809 = 0;
                    }
                    v980 = &v809[4 * v805];
                    *(_DWORD *)v980 = 105;
                    v803 = v980 + 4;
                    while (v799 != v804)
                    {
                      int v981 = *--v799;
                      *((_DWORD *)v980 - 1) = v981;
                      v980 -= 4;
                    }
                    *(void *)uint64_t v798 = v980;
                    *v800 = v803;
                    void *v802 = &v809[4 * v808];
                    if (v804) {
                      operator delete(v804);
                    }
                  }
                  else
                  {
                    _DWORD *v799 = 105;
                    v803 = v799 + 1;
                  }
                  *v800 = v803;
                  if (!*v14)
                  {
LABEL_4214:
                    if ((*((unsigned char *)__p + 13) & 4) == 0) {
                      goto LABEL_4215;
                    }
                    uint64_t v982 = *v12 + 24 * v13;
                    v984 = (_DWORD **)(v982 + 8);
                    v983 = *(_DWORD **)(v982 + 8);
                    v986 = (void *)(v982 + 16);
                    unint64_t v985 = *(void *)(v982 + 16);
                    if ((unint64_t)v983 >= v985)
                    {
                      v988 = *(_DWORD **)v982;
                      uint64_t v989 = ((uint64_t)v983 - *(void *)v982) >> 2;
                      unint64_t v990 = v989 + 1;
                      if ((unint64_t)(v989 + 1) >> 62) {
                        sub_566C();
                      }
                      uint64_t v991 = v985 - (void)v988;
                      if (v991 >> 1 > v990) {
                        unint64_t v990 = v991 >> 1;
                      }
                      if ((unint64_t)v991 >= 0x7FFFFFFFFFFFFFFCLL) {
                        unint64_t v992 = 0x3FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v992 = v990;
                      }
                      if (v992)
                      {
                        v993 = (char *)sub_458C8((uint64_t)v986, v992);
                        v983 = *v984;
                        v988 = *(_DWORD **)v982;
                      }
                      else
                      {
                        v993 = 0;
                      }
                      v1154 = &v993[4 * v989];
                      *(_DWORD *)v1154 = 106;
                      v987 = v1154 + 4;
                      while (v983 != v988)
                      {
                        int v1155 = *--v983;
                        *((_DWORD *)v1154 - 1) = v1155;
                        v1154 -= 4;
                      }
                      *(void *)uint64_t v982 = v1154;
                      *v984 = v987;
                      void *v986 = &v993[4 * v992];
                      if (v988) {
                        operator delete(v988);
                      }
                    }
                    else
                    {
                      _DWORD *v983 = 106;
                      v987 = v983 + 1;
                    }
                    *v984 = v987;
                    if (!*v14)
                    {
LABEL_4215:
                      if ((*((unsigned char *)__p + 13) & 8) == 0) {
                        goto LABEL_4216;
                      }
                      uint64_t v1156 = *v12 + 24 * v13;
                      v1158 = (_DWORD **)(v1156 + 8);
                      v1157 = *(_DWORD **)(v1156 + 8);
                      v1160 = (void *)(v1156 + 16);
                      unint64_t v1159 = *(void *)(v1156 + 16);
                      if ((unint64_t)v1157 >= v1159)
                      {
                        v1162 = *(_DWORD **)v1156;
                        uint64_t v1163 = ((uint64_t)v1157 - *(void *)v1156) >> 2;
                        unint64_t v1164 = v1163 + 1;
                        if ((unint64_t)(v1163 + 1) >> 62) {
                          sub_566C();
                        }
                        uint64_t v1165 = v1159 - (void)v1162;
                        if (v1165 >> 1 > v1164) {
                          unint64_t v1164 = v1165 >> 1;
                        }
                        if ((unint64_t)v1165 >= 0x7FFFFFFFFFFFFFFCLL) {
                          unint64_t v1166 = 0x3FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v1166 = v1164;
                        }
                        if (v1166)
                        {
                          v1167 = (char *)sub_458C8((uint64_t)v1160, v1166);
                          v1157 = *v1158;
                          v1162 = *(_DWORD **)v1156;
                        }
                        else
                        {
                          v1167 = 0;
                        }
                        v1319 = &v1167[4 * v1163];
                        *(_DWORD *)v1319 = 107;
                        v1161 = v1319 + 4;
                        while (v1157 != v1162)
                        {
                          int v1320 = *--v1157;
                          *((_DWORD *)v1319 - 1) = v1320;
                          v1319 -= 4;
                        }
                        *(void *)uint64_t v1156 = v1319;
                        *v1158 = v1161;
                        void *v1160 = &v1167[4 * v1166];
                        if (v1162) {
                          operator delete(v1162);
                        }
                      }
                      else
                      {
                        _DWORD *v1157 = 107;
                        v1161 = v1157 + 1;
                      }
                      *v1158 = v1161;
                      if (!*v14)
                      {
LABEL_4216:
                        if ((*((unsigned char *)__p + 13) & 0x10) == 0) {
                          goto LABEL_4217;
                        }
                        uint64_t v1321 = *v12 + 24 * v13;
                        v1323 = (_DWORD **)(v1321 + 8);
                        v1322 = *(_DWORD **)(v1321 + 8);
                        v1325 = (void *)(v1321 + 16);
                        unint64_t v1324 = *(void *)(v1321 + 16);
                        if ((unint64_t)v1322 >= v1324)
                        {
                          v1327 = *(_DWORD **)v1321;
                          uint64_t v1328 = ((uint64_t)v1322 - *(void *)v1321) >> 2;
                          unint64_t v1329 = v1328 + 1;
                          if ((unint64_t)(v1328 + 1) >> 62) {
                            sub_566C();
                          }
                          uint64_t v1330 = v1324 - (void)v1327;
                          if (v1330 >> 1 > v1329) {
                            unint64_t v1329 = v1330 >> 1;
                          }
                          if ((unint64_t)v1330 >= 0x7FFFFFFFFFFFFFFCLL) {
                            unint64_t v1331 = 0x3FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v1331 = v1329;
                          }
                          if (v1331)
                          {
                            v1332 = (char *)sub_458C8((uint64_t)v1325, v1331);
                            v1322 = *v1323;
                            v1327 = *(_DWORD **)v1321;
                          }
                          else
                          {
                            v1332 = 0;
                          }
                          v1460 = &v1332[4 * v1328];
                          *(_DWORD *)v1460 = 108;
                          v1326 = v1460 + 4;
                          while (v1322 != v1327)
                          {
                            int v1461 = *--v1322;
                            *((_DWORD *)v1460 - 1) = v1461;
                            v1460 -= 4;
                          }
                          *(void *)uint64_t v1321 = v1460;
                          *v1323 = v1326;
                          void *v1325 = &v1332[4 * v1331];
                          if (v1327) {
                            operator delete(v1327);
                          }
                        }
                        else
                        {
                          _DWORD *v1322 = 108;
                          v1326 = v1322 + 1;
                        }
                        *v1323 = v1326;
                        if (!*v14)
                        {
LABEL_4217:
                          if ((*((unsigned char *)__p + 13) & 0x20) == 0) {
                            goto LABEL_4218;
                          }
                          uint64_t v1462 = *v12 + 24 * v13;
                          v1464 = (_DWORD **)(v1462 + 8);
                          v1463 = *(_DWORD **)(v1462 + 8);
                          v1466 = (void *)(v1462 + 16);
                          unint64_t v1465 = *(void *)(v1462 + 16);
                          if ((unint64_t)v1463 >= v1465)
                          {
                            v1468 = *(_DWORD **)v1462;
                            uint64_t v1469 = ((uint64_t)v1463 - *(void *)v1462) >> 2;
                            unint64_t v1470 = v1469 + 1;
                            if ((unint64_t)(v1469 + 1) >> 62) {
                              sub_566C();
                            }
                            uint64_t v1471 = v1465 - (void)v1468;
                            if (v1471 >> 1 > v1470) {
                              unint64_t v1470 = v1471 >> 1;
                            }
                            if ((unint64_t)v1471 >= 0x7FFFFFFFFFFFFFFCLL) {
                              unint64_t v1472 = 0x3FFFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v1472 = v1470;
                            }
                            if (v1472)
                            {
                              v1473 = (char *)sub_458C8((uint64_t)v1466, v1472);
                              v1463 = *v1464;
                              v1468 = *(_DWORD **)v1462;
                            }
                            else
                            {
                              v1473 = 0;
                            }
                            v1603 = &v1473[4 * v1469];
                            *(_DWORD *)v1603 = 109;
                            v1467 = v1603 + 4;
                            while (v1463 != v1468)
                            {
                              int v1604 = *--v1463;
                              *((_DWORD *)v1603 - 1) = v1604;
                              v1603 -= 4;
                            }
                            *(void *)uint64_t v1462 = v1603;
                            *v1464 = v1467;
                            void *v1466 = &v1473[4 * v1472];
                            if (v1468) {
                              operator delete(v1468);
                            }
                          }
                          else
                          {
                            _DWORD *v1463 = 109;
                            v1467 = v1463 + 1;
                          }
                          *v1464 = v1467;
                          if (!*v14)
                          {
LABEL_4218:
                            if ((*((unsigned char *)__p + 13) & 0x40) == 0) {
                              goto LABEL_4219;
                            }
                            uint64_t v1605 = *v12 + 24 * v13;
                            v1607 = (_DWORD **)(v1605 + 8);
                            v1606 = *(_DWORD **)(v1605 + 8);
                            v1609 = (void *)(v1605 + 16);
                            unint64_t v1608 = *(void *)(v1605 + 16);
                            if ((unint64_t)v1606 >= v1608)
                            {
                              v1611 = *(_DWORD **)v1605;
                              uint64_t v1612 = ((uint64_t)v1606 - *(void *)v1605) >> 2;
                              unint64_t v1613 = v1612 + 1;
                              if ((unint64_t)(v1612 + 1) >> 62) {
                                sub_566C();
                              }
                              uint64_t v1614 = v1608 - (void)v1611;
                              if (v1614 >> 1 > v1613) {
                                unint64_t v1613 = v1614 >> 1;
                              }
                              if ((unint64_t)v1614 >= 0x7FFFFFFFFFFFFFFCLL) {
                                unint64_t v1615 = 0x3FFFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v1615 = v1613;
                              }
                              if (v1615)
                              {
                                v1616 = (char *)sub_458C8((uint64_t)v1609, v1615);
                                v1606 = *v1607;
                                v1611 = *(_DWORD **)v1605;
                              }
                              else
                              {
                                v1616 = 0;
                              }
                              v1735 = &v1616[4 * v1612];
                              *(_DWORD *)v1735 = 110;
                              v1610 = v1735 + 4;
                              while (v1606 != v1611)
                              {
                                int v1736 = *--v1606;
                                *((_DWORD *)v1735 - 1) = v1736;
                                v1735 -= 4;
                              }
                              *(void *)uint64_t v1605 = v1735;
                              *v1607 = v1610;
                              void *v1609 = &v1616[4 * v1615];
                              if (v1611) {
                                operator delete(v1611);
                              }
                            }
                            else
                            {
                              _DWORD *v1606 = 110;
                              v1610 = v1606 + 1;
                            }
                            *v1607 = v1610;
                            if (!*v14)
                            {
LABEL_4219:
                              if ((*((unsigned char *)__p + 13) & 0x80) == 0) {
                                goto LABEL_4220;
                              }
                              uint64_t v1737 = *v12 + 24 * v13;
                              v1739 = (_DWORD **)(v1737 + 8);
                              v1738 = *(_DWORD **)(v1737 + 8);
                              v1741 = (void *)(v1737 + 16);
                              unint64_t v1740 = *(void *)(v1737 + 16);
                              if ((unint64_t)v1738 >= v1740)
                              {
                                v1743 = *(_DWORD **)v1737;
                                uint64_t v1744 = ((uint64_t)v1738 - *(void *)v1737) >> 2;
                                unint64_t v1745 = v1744 + 1;
                                if ((unint64_t)(v1744 + 1) >> 62) {
                                  sub_566C();
                                }
                                uint64_t v1746 = v1740 - (void)v1743;
                                if (v1746 >> 1 > v1745) {
                                  unint64_t v1745 = v1746 >> 1;
                                }
                                if ((unint64_t)v1746 >= 0x7FFFFFFFFFFFFFFCLL) {
                                  unint64_t v1747 = 0x3FFFFFFFFFFFFFFFLL;
                                }
                                else {
                                  unint64_t v1747 = v1745;
                                }
                                if (v1747)
                                {
                                  v1748 = (char *)sub_458C8((uint64_t)v1741, v1747);
                                  v1738 = *v1739;
                                  v1743 = *(_DWORD **)v1737;
                                }
                                else
                                {
                                  v1748 = 0;
                                }
                                v1843 = &v1748[4 * v1744];
                                *(_DWORD *)v1843 = 111;
                                v1742 = v1843 + 4;
                                while (v1738 != v1743)
                                {
                                  int v1844 = *--v1738;
                                  *((_DWORD *)v1843 - 1) = v1844;
                                  v1843 -= 4;
                                }
                                *(void *)uint64_t v1737 = v1843;
                                *v1739 = v1742;
                                void *v1741 = &v1748[4 * v1747];
                                if (v1743) {
                                  operator delete(v1743);
                                }
                              }
                              else
                              {
                                _DWORD *v1738 = 111;
                                v1742 = v1738 + 1;
                              }
                              *v1739 = v1742;
                              if (!*v14)
                              {
LABEL_4220:
                                if ((*((unsigned char *)__p + 14) & 1) == 0) {
                                  goto LABEL_4221;
                                }
                                uint64_t v1845 = *v12 + 24 * v13;
                                v1847 = (_DWORD **)(v1845 + 8);
                                v1846 = *(_DWORD **)(v1845 + 8);
                                v1849 = (void *)(v1845 + 16);
                                unint64_t v1848 = *(void *)(v1845 + 16);
                                if ((unint64_t)v1846 >= v1848)
                                {
                                  v1851 = *(_DWORD **)v1845;
                                  uint64_t v1852 = ((uint64_t)v1846 - *(void *)v1845) >> 2;
                                  unint64_t v1853 = v1852 + 1;
                                  if ((unint64_t)(v1852 + 1) >> 62) {
                                    sub_566C();
                                  }
                                  uint64_t v1854 = v1848 - (void)v1851;
                                  if (v1854 >> 1 > v1853) {
                                    unint64_t v1853 = v1854 >> 1;
                                  }
                                  if ((unint64_t)v1854 >= 0x7FFFFFFFFFFFFFFCLL) {
                                    unint64_t v1855 = 0x3FFFFFFFFFFFFFFFLL;
                                  }
                                  else {
                                    unint64_t v1855 = v1853;
                                  }
                                  if (v1855)
                                  {
                                    v1856 = (char *)sub_458C8((uint64_t)v1849, v1855);
                                    v1846 = *v1847;
                                    v1851 = *(_DWORD **)v1845;
                                  }
                                  else
                                  {
                                    v1856 = 0;
                                  }
                                  v1942 = &v1856[4 * v1852];
                                  *(_DWORD *)v1942 = 112;
                                  v1850 = v1942 + 4;
                                  while (v1846 != v1851)
                                  {
                                    int v1943 = *--v1846;
                                    *((_DWORD *)v1942 - 1) = v1943;
                                    v1942 -= 4;
                                  }
                                  *(void *)uint64_t v1845 = v1942;
                                  *v1847 = v1850;
                                  void *v1849 = &v1856[4 * v1855];
                                  if (v1851) {
                                    operator delete(v1851);
                                  }
                                }
                                else
                                {
                                  _DWORD *v1846 = 112;
                                  v1850 = v1846 + 1;
                                }
                                *v1847 = v1850;
                                if (!*v14)
                                {
LABEL_4221:
                                  if ((*((unsigned char *)__p + 14) & 2) == 0) {
                                    goto LABEL_4222;
                                  }
                                  uint64_t v1944 = *v12 + 24 * v13;
                                  v1946 = (_DWORD **)(v1944 + 8);
                                  v1945 = *(_DWORD **)(v1944 + 8);
                                  v1948 = (void *)(v1944 + 16);
                                  unint64_t v1947 = *(void *)(v1944 + 16);
                                  if ((unint64_t)v1945 >= v1947)
                                  {
                                    v1950 = *(_DWORD **)v1944;
                                    uint64_t v1951 = ((uint64_t)v1945 - *(void *)v1944) >> 2;
                                    unint64_t v1952 = v1951 + 1;
                                    if ((unint64_t)(v1951 + 1) >> 62) {
                                      sub_566C();
                                    }
                                    uint64_t v1953 = v1947 - (void)v1950;
                                    if (v1953 >> 1 > v1952) {
                                      unint64_t v1952 = v1953 >> 1;
                                    }
                                    if ((unint64_t)v1953 >= 0x7FFFFFFFFFFFFFFCLL) {
                                      unint64_t v1954 = 0x3FFFFFFFFFFFFFFFLL;
                                    }
                                    else {
                                      unint64_t v1954 = v1952;
                                    }
                                    if (v1954)
                                    {
                                      v1955 = (char *)sub_458C8((uint64_t)v1948, v1954);
                                      v1945 = *v1946;
                                      v1950 = *(_DWORD **)v1944;
                                    }
                                    else
                                    {
                                      v1955 = 0;
                                    }
                                    v2032 = &v1955[4 * v1951];
                                    *(_DWORD *)v2032 = 113;
                                    v1949 = v2032 + 4;
                                    while (v1945 != v1950)
                                    {
                                      int v2033 = *--v1945;
                                      *((_DWORD *)v2032 - 1) = v2033;
                                      v2032 -= 4;
                                    }
                                    *(void *)uint64_t v1944 = v2032;
                                    *v1946 = v1949;
                                    void *v1948 = &v1955[4 * v1954];
                                    if (v1950) {
                                      operator delete(v1950);
                                    }
                                  }
                                  else
                                  {
                                    _DWORD *v1945 = 113;
                                    v1949 = v1945 + 1;
                                  }
                                  *v1946 = v1949;
                                  if (!*v14)
                                  {
LABEL_4222:
                                    if ((*((unsigned char *)__p + 14) & 4) == 0) {
                                      goto LABEL_4223;
                                    }
                                    uint64_t v2034 = *v12 + 24 * v13;
                                    v2036 = (_DWORD **)(v2034 + 8);
                                    v2035 = *(_DWORD **)(v2034 + 8);
                                    v2038 = (void *)(v2034 + 16);
                                    unint64_t v2037 = *(void *)(v2034 + 16);
                                    if ((unint64_t)v2035 >= v2037)
                                    {
                                      v2040 = *(_DWORD **)v2034;
                                      uint64_t v2041 = ((uint64_t)v2035 - *(void *)v2034) >> 2;
                                      unint64_t v2042 = v2041 + 1;
                                      if ((unint64_t)(v2041 + 1) >> 62) {
                                        sub_566C();
                                      }
                                      uint64_t v2043 = v2037 - (void)v2040;
                                      if (v2043 >> 1 > v2042) {
                                        unint64_t v2042 = v2043 >> 1;
                                      }
                                      if ((unint64_t)v2043 >= 0x7FFFFFFFFFFFFFFCLL) {
                                        unint64_t v2044 = 0x3FFFFFFFFFFFFFFFLL;
                                      }
                                      else {
                                        unint64_t v2044 = v2042;
                                      }
                                      if (v2044)
                                      {
                                        v2045 = (char *)sub_458C8((uint64_t)v2038, v2044);
                                        v2035 = *v2036;
                                        v2040 = *(_DWORD **)v2034;
                                      }
                                      else
                                      {
                                        v2045 = 0;
                                      }
                                      v2117 = &v2045[4 * v2041];
                                      *(_DWORD *)v2117 = 114;
                                      v2039 = v2117 + 4;
                                      while (v2035 != v2040)
                                      {
                                        int v2118 = *--v2035;
                                        *((_DWORD *)v2117 - 1) = v2118;
                                        v2117 -= 4;
                                      }
                                      *(void *)uint64_t v2034 = v2117;
                                      *v2036 = v2039;
                                      void *v2038 = &v2045[4 * v2044];
                                      if (v2040) {
                                        operator delete(v2040);
                                      }
                                    }
                                    else
                                    {
                                      _DWORD *v2035 = 114;
                                      v2039 = v2035 + 1;
                                    }
                                    *v2036 = v2039;
                                    if (!*v14)
                                    {
LABEL_4223:
                                      if ((*((unsigned char *)__p + 14) & 8) == 0) {
                                        goto LABEL_4224;
                                      }
                                      uint64_t v2119 = *v12 + 24 * v13;
                                      v2121 = (_DWORD **)(v2119 + 8);
                                      v2120 = *(_DWORD **)(v2119 + 8);
                                      v2123 = (void *)(v2119 + 16);
                                      unint64_t v2122 = *(void *)(v2119 + 16);
                                      if ((unint64_t)v2120 >= v2122)
                                      {
                                        v2125 = *(_DWORD **)v2119;
                                        uint64_t v2126 = ((uint64_t)v2120 - *(void *)v2119) >> 2;
                                        unint64_t v2127 = v2126 + 1;
                                        if ((unint64_t)(v2126 + 1) >> 62) {
                                          sub_566C();
                                        }
                                        uint64_t v2128 = v2122 - (void)v2125;
                                        if (v2128 >> 1 > v2127) {
                                          unint64_t v2127 = v2128 >> 1;
                                        }
                                        if ((unint64_t)v2128 >= 0x7FFFFFFFFFFFFFFCLL) {
                                          unint64_t v2129 = 0x3FFFFFFFFFFFFFFFLL;
                                        }
                                        else {
                                          unint64_t v2129 = v2127;
                                        }
                                        if (v2129)
                                        {
                                          v2130 = (char *)sub_458C8((uint64_t)v2123, v2129);
                                          v2120 = *v2121;
                                          v2125 = *(_DWORD **)v2119;
                                        }
                                        else
                                        {
                                          v2130 = 0;
                                        }
                                        v2201 = &v2130[4 * v2126];
                                        *(_DWORD *)v2201 = 115;
                                        v2124 = v2201 + 4;
                                        while (v2120 != v2125)
                                        {
                                          int v2202 = *--v2120;
                                          *((_DWORD *)v2201 - 1) = v2202;
                                          v2201 -= 4;
                                        }
                                        *(void *)uint64_t v2119 = v2201;
                                        *v2121 = v2124;
                                        void *v2123 = &v2130[4 * v2129];
                                        if (v2125) {
                                          operator delete(v2125);
                                        }
                                      }
                                      else
                                      {
                                        _DWORD *v2120 = 115;
                                        v2124 = v2120 + 1;
                                      }
                                      *v2121 = v2124;
                                      if (!*v14)
                                      {
LABEL_4224:
                                        if ((*((unsigned char *)__p + 14) & 0x10) != 0)
                                        {
                                          uint64_t v247 = *v12 + 24 * v13;
                                          uint64_t v249 = (int **)(v247 + 8);
                                          int v248 = *(int **)(v247 + 8);
                                          uint64_t v251 = (void *)(v247 + 16);
                                          unint64_t v2203 = *(void *)(v247 + 16);
                                          if ((unint64_t)v248 < v2203)
                                          {
                                            int v252 = 116;
                                            goto LABEL_2186;
                                          }
                                          uint64_t v253 = *(int **)v247;
                                          uint64_t v2204 = ((uint64_t)v248 - *(void *)v247) >> 2;
                                          unint64_t v2205 = v2204 + 1;
                                          if ((unint64_t)(v2204 + 1) >> 62) {
                                            sub_566C();
                                          }
                                          uint64_t v2206 = v2203 - (void)v253;
                                          if (v2206 >> 1 > v2205) {
                                            unint64_t v2205 = v2206 >> 1;
                                          }
                                          if ((unint64_t)v2206 >= 0x7FFFFFFFFFFFFFFCLL) {
                                            unint64_t v257 = 0x3FFFFFFFFFFFFFFFLL;
                                          }
                                          else {
                                            unint64_t v257 = v2205;
                                          }
                                          if (v257)
                                          {
                                            unint64_t v258 = (char *)sub_458C8((uint64_t)v251, v257);
                                            int v248 = *v249;
                                            uint64_t v253 = *(int **)v247;
                                          }
                                          else
                                          {
                                            unint64_t v258 = 0;
                                          }
                                          unint64_t v473 = &v258[4 * v2204];
                                          *(_DWORD *)unint64_t v473 = 116;
                                          unint64_t v474 = (int *)(v473 + 4);
                                          while (v248 != v253)
                                          {
                                            int v2277 = *--v248;
                                            *((_DWORD *)v473 - 1) = v2277;
                                            v473 -= 4;
                                          }
                                          goto LABEL_3834;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          break;
        case 14:
          if (!*v14)
          {
            if ((*((unsigned char *)__p + 14) & 0x20) == 0) {
              goto LABEL_234;
            }
            uint64_t v21 = *v12 + 24 * v13;
            int v23 = (_DWORD **)(v21 + 8);
            long long v22 = *(_DWORD **)(v21 + 8);
            unint64_t v25 = (void *)(v21 + 16);
            unint64_t v24 = *(void *)(v21 + 16);
            if ((unint64_t)v22 >= v24)
            {
              uint64_t v123 = *(_DWORD **)v21;
              uint64_t v124 = ((uint64_t)v22 - *(void *)v21) >> 2;
              unint64_t v125 = v124 + 1;
              if ((unint64_t)(v124 + 1) >> 62) {
                sub_566C();
              }
              uint64_t v126 = v24 - (void)v123;
              if (v126 >> 1 > v125) {
                unint64_t v125 = v126 >> 1;
              }
              if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v127 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v127 = v125;
              }
              if (v127)
              {
                int v128 = (char *)sub_458C8((uint64_t)v25, v127);
                long long v22 = *v23;
                uint64_t v123 = *(_DWORD **)v21;
              }
              else
              {
                int v128 = 0;
              }
              uint64_t v231 = &v128[4 * v124];
              *(_DWORD *)uint64_t v231 = 117;
              unint64_t v26 = v231 + 4;
              while (v22 != v123)
              {
                int v232 = *--v22;
                *((_DWORD *)v231 - 1) = v232;
                v231 -= 4;
              }
              *(void *)uint64_t v21 = v231;
              *int v23 = v26;
              *unint64_t v25 = &v128[4 * v127];
              if (v123) {
                operator delete(v123);
              }
            }
            else
            {
              _DWORD *v22 = 117;
              unint64_t v26 = v22 + 1;
            }
            *int v23 = v26;
            if (!*v14)
            {
LABEL_234:
              if ((*((unsigned char *)__p + 14) & 0x40) == 0) {
                goto LABEL_812;
              }
              uint64_t v233 = *v12 + 24 * v13;
              int v235 = (_DWORD **)(v233 + 8);
              unint64_t v234 = *(_DWORD **)(v233 + 8);
              uint64_t v237 = (void *)(v233 + 16);
              unint64_t v236 = *(void *)(v233 + 16);
              if ((unint64_t)v234 >= v236)
              {
                uint64_t v239 = *(_DWORD **)v233;
                uint64_t v240 = ((uint64_t)v234 - *(void *)v233) >> 2;
                unint64_t v241 = v240 + 1;
                if ((unint64_t)(v240 + 1) >> 62) {
                  sub_566C();
                }
                uint64_t v242 = v236 - (void)v239;
                if (v242 >> 1 > v241) {
                  unint64_t v241 = v242 >> 1;
                }
                if ((unint64_t)v242 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v243 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v243 = v241;
                }
                if (v243)
                {
                  unint64_t v244 = (char *)sub_458C8((uint64_t)v237, v243);
                  unint64_t v234 = *v235;
                  uint64_t v239 = *(_DWORD **)v233;
                }
                else
                {
                  unint64_t v244 = 0;
                }
                uint64_t v459 = &v244[4 * v240];
                *(_DWORD *)uint64_t v459 = 118;
                unint64_t v238 = v459 + 4;
                while (v234 != v239)
                {
                  int v460 = *--v234;
                  *((_DWORD *)v459 - 1) = v460;
                  v459 -= 4;
                }
                *(void *)uint64_t v233 = v459;
                *int v235 = v238;
                *uint64_t v237 = &v244[4 * v243];
                if (v239) {
                  operator delete(v239);
                }
              }
              else
              {
                _DWORD *v234 = 118;
                unint64_t v238 = v234 + 1;
              }
              *int v235 = v238;
              if (!*v14)
              {
LABEL_812:
                if ((*((unsigned char *)__p + 14) & 0x80) == 0) {
                  goto LABEL_4225;
                }
                uint64_t v461 = *v12 + 24 * v13;
                unint64_t v463 = (_DWORD **)(v461 + 8);
                uint64_t v462 = *(_DWORD **)(v461 + 8);
                long long v465 = (void *)(v461 + 16);
                unint64_t v464 = *(void *)(v461 + 16);
                if ((unint64_t)v462 >= v464)
                {
                  int v467 = *(_DWORD **)v461;
                  uint64_t v468 = ((uint64_t)v462 - *(void *)v461) >> 2;
                  unint64_t v469 = v468 + 1;
                  if ((unint64_t)(v468 + 1) >> 62) {
                    sub_566C();
                  }
                  uint64_t v470 = v464 - (void)v467;
                  if (v470 >> 1 > v469) {
                    unint64_t v469 = v470 >> 1;
                  }
                  if ((unint64_t)v470 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v471 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v471 = v469;
                  }
                  if (v471)
                  {
                    uint64_t v472 = (char *)sub_458C8((uint64_t)v465, v471);
                    uint64_t v462 = *v463;
                    int v467 = *(_DWORD **)v461;
                  }
                  else
                  {
                    uint64_t v472 = 0;
                  }
                  v672 = &v472[4 * v468];
                  *(_DWORD *)v672 = 119;
                  long long v466 = v672 + 4;
                  while (v462 != v467)
                  {
                    int v673 = *--v462;
                    *((_DWORD *)v672 - 1) = v673;
                    v672 -= 4;
                  }
                  *(void *)uint64_t v461 = v672;
                  *unint64_t v463 = v466;
                  *long long v465 = &v472[4 * v471];
                  if (v467) {
                    operator delete(v467);
                  }
                }
                else
                {
                  *uint64_t v462 = 119;
                  long long v466 = v462 + 1;
                }
                *unint64_t v463 = v466;
                if (!*v14)
                {
LABEL_4225:
                  if (*((unsigned char *)__p + 15))
                  {
                    uint64_t v247 = *v12 + 24 * v13;
                    uint64_t v249 = (int **)(v247 + 8);
                    int v248 = *(int **)(v247 + 8);
                    uint64_t v251 = (void *)(v247 + 16);
                    unint64_t v674 = *(void *)(v247 + 16);
                    if ((unint64_t)v248 < v674)
                    {
                      int v252 = 120;
                      goto LABEL_2186;
                    }
                    uint64_t v253 = *(int **)v247;
                    uint64_t v675 = ((uint64_t)v248 - *(void *)v247) >> 2;
                    unint64_t v676 = v675 + 1;
                    if ((unint64_t)(v675 + 1) >> 62) {
                      sub_566C();
                    }
                    uint64_t v677 = v674 - (void)v253;
                    if (v677 >> 1 > v676) {
                      unint64_t v676 = v677 >> 1;
                    }
                    if ((unint64_t)v677 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v257 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v257 = v676;
                    }
                    if (v257)
                    {
                      unint64_t v258 = (char *)sub_458C8((uint64_t)v251, v257);
                      int v248 = *v249;
                      uint64_t v253 = *(int **)v247;
                    }
                    else
                    {
                      unint64_t v258 = 0;
                    }
                    unint64_t v473 = &v258[4 * v675];
                    *(_DWORD *)unint64_t v473 = 120;
                    unint64_t v474 = (int *)(v473 + 4);
                    while (v248 != v253)
                    {
                      int v866 = *--v248;
                      *((_DWORD *)v473 - 1) = v866;
                      v473 -= 4;
                    }
                    goto LABEL_3834;
                  }
                }
              }
            }
          }
          break;
        case 15:
          if (!*v14)
          {
            if ((*((unsigned char *)__p + 18) & 0x80) == 0) {
              goto LABEL_342;
            }
            uint64_t v57 = *v12 + 24 * v13;
            uint64_t v59 = (_DWORD **)(v57 + 8);
            int v58 = *(_DWORD **)(v57 + 8);
            uint64_t v61 = (void *)(v57 + 16);
            unint64_t v60 = *(void *)(v57 + 16);
            if ((unint64_t)v58 >= v60)
            {
              unint64_t v159 = *(_DWORD **)v57;
              uint64_t v160 = ((uint64_t)v58 - *(void *)v57) >> 2;
              unint64_t v161 = v160 + 1;
              if ((unint64_t)(v160 + 1) >> 62) {
                sub_566C();
              }
              uint64_t v162 = v60 - (void)v159;
              if (v162 >> 1 > v161) {
                unint64_t v161 = v162 >> 1;
              }
              if ((unint64_t)v162 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v163 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v163 = v161;
              }
              if (v163)
              {
                unint64_t v164 = (char *)sub_458C8((uint64_t)v61, v163);
                int v58 = *v59;
                unint64_t v159 = *(_DWORD **)v57;
              }
              else
              {
                unint64_t v164 = 0;
              }
              uint64_t v315 = &v164[4 * v160];
              *(_DWORD *)uint64_t v315 = 151;
              uint64_t v62 = v315 + 4;
              while (v58 != v159)
              {
                int v316 = *--v58;
                *((_DWORD *)v315 - 1) = v316;
                v315 -= 4;
              }
              *(void *)uint64_t v57 = v315;
              void *v59 = v62;
              *uint64_t v61 = &v164[4 * v163];
              if (v159) {
                operator delete(v159);
              }
            }
            else
            {
              _DWORD *v58 = 151;
              uint64_t v62 = v58 + 1;
            }
            void *v59 = v62;
            if (!*v14)
            {
LABEL_342:
              if ((*((unsigned char *)__p + 19) & 1) == 0) {
                goto LABEL_2183;
              }
              uint64_t v317 = *v12 + 24 * v13;
              v319 = (_DWORD **)(v317 + 8);
              unint64_t v318 = *(_DWORD **)(v317 + 8);
              uint64_t v321 = (void *)(v317 + 16);
              unint64_t v320 = *(void *)(v317 + 16);
              if ((unint64_t)v318 >= v320)
              {
                uint64_t v323 = *(_DWORD **)v317;
                uint64_t v324 = ((uint64_t)v318 - *(void *)v317) >> 2;
                unint64_t v325 = v324 + 1;
                if ((unint64_t)(v324 + 1) >> 62) {
                  sub_566C();
                }
                uint64_t v326 = v320 - (void)v323;
                if (v326 >> 1 > v325) {
                  unint64_t v325 = v326 >> 1;
                }
                if ((unint64_t)v326 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v327 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v327 = v325;
                }
                if (v327)
                {
                  unint64_t v328 = (char *)sub_458C8((uint64_t)v321, v327);
                  unint64_t v318 = *v319;
                  uint64_t v323 = *(_DWORD **)v317;
                }
                else
                {
                  unint64_t v328 = 0;
                }
                uint64_t v532 = &v328[4 * v324];
                *(_DWORD *)uint64_t v532 = 152;
                uint64_t v322 = v532 + 4;
                while (v318 != v323)
                {
                  int v533 = *--v318;
                  *((_DWORD *)v532 - 1) = v533;
                  v532 -= 4;
                }
                *(void *)uint64_t v317 = v532;
                void *v319 = v322;
                *uint64_t v321 = &v328[4 * v327];
                if (v323) {
                  operator delete(v323);
                }
              }
              else
              {
                _DWORD *v318 = 152;
                uint64_t v322 = v318 + 1;
              }
              void *v319 = v322;
              if (!*v14)
              {
LABEL_2183:
                if ((*((unsigned char *)__p + 19) & 2) == 0) {
                  goto LABEL_4226;
                }
                uint64_t v534 = *v12 + 24 * v13;
                uint64_t v536 = (_DWORD **)(v534 + 8);
                uint64_t v535 = *(_DWORD **)(v534 + 8);
                unsigned int v538 = (void *)(v534 + 16);
                unint64_t v537 = *(void *)(v534 + 16);
                if ((unint64_t)v535 >= v537)
                {
                  unint64_t v540 = *(_DWORD **)v534;
                  uint64_t v541 = ((uint64_t)v535 - *(void *)v534) >> 2;
                  unint64_t v542 = v541 + 1;
                  if ((unint64_t)(v541 + 1) >> 62) {
                    sub_566C();
                  }
                  uint64_t v543 = v537 - (void)v540;
                  if (v543 >> 1 > v542) {
                    unint64_t v542 = v543 >> 1;
                  }
                  if ((unint64_t)v543 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v544 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v544 = v542;
                  }
                  if (v544)
                  {
                    uint64_t v545 = (char *)sub_458C8((uint64_t)v538, v544);
                    uint64_t v535 = *v536;
                    unint64_t v540 = *(_DWORD **)v534;
                  }
                  else
                  {
                    uint64_t v545 = 0;
                  }
                  v734 = &v545[4 * v541];
                  *(_DWORD *)v734 = 153;
                  v539 = v734 + 4;
                  while (v535 != v540)
                  {
                    int v735 = *--v535;
                    *((_DWORD *)v734 - 1) = v735;
                    v734 -= 4;
                  }
                  *(void *)uint64_t v534 = v734;
                  *uint64_t v536 = v539;
                  *unsigned int v538 = &v545[4 * v544];
                  if (v540) {
                    operator delete(v540);
                  }
                }
                else
                {
                  *uint64_t v535 = 153;
                  v539 = v535 + 1;
                }
                *uint64_t v536 = v539;
                if (!*v14)
                {
LABEL_4226:
                  if ((*((unsigned char *)__p + 19) & 4) == 0) {
                    goto LABEL_4227;
                  }
                  uint64_t v736 = *v12 + 24 * v13;
                  v738 = (_DWORD **)(v736 + 8);
                  v737 = *(_DWORD **)(v736 + 8);
                  v740 = (void *)(v736 + 16);
                  unint64_t v739 = *(void *)(v736 + 16);
                  if ((unint64_t)v737 >= v739)
                  {
                    v742 = *(_DWORD **)v736;
                    uint64_t v743 = ((uint64_t)v737 - *(void *)v736) >> 2;
                    unint64_t v744 = v743 + 1;
                    if ((unint64_t)(v743 + 1) >> 62) {
                      sub_566C();
                    }
                    uint64_t v745 = v739 - (void)v742;
                    if (v745 >> 1 > v744) {
                      unint64_t v744 = v745 >> 1;
                    }
                    if ((unint64_t)v745 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v746 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v746 = v744;
                    }
                    if (v746)
                    {
                      v747 = (char *)sub_458C8((uint64_t)v740, v746);
                      v737 = *v738;
                      v742 = *(_DWORD **)v736;
                    }
                    else
                    {
                      v747 = 0;
                    }
                    v923 = &v747[4 * v743];
                    *(_DWORD *)v923 = 154;
                    v741 = v923 + 4;
                    while (v737 != v742)
                    {
                      int v924 = *--v737;
                      *((_DWORD *)v923 - 1) = v924;
                      v923 -= 4;
                    }
                    *(void *)uint64_t v736 = v923;
                    *v738 = v741;
                    void *v740 = &v747[4 * v746];
                    if (v742) {
                      operator delete(v742);
                    }
                  }
                  else
                  {
                    _DWORD *v737 = 154;
                    v741 = v737 + 1;
                  }
                  *v738 = v741;
                  if (!*v14)
                  {
LABEL_4227:
                    if ((*((unsigned char *)__p + 19) & 8) == 0) {
                      goto LABEL_4228;
                    }
                    uint64_t v925 = *v12 + 24 * v13;
                    v927 = (_DWORD **)(v925 + 8);
                    v926 = *(_DWORD **)(v925 + 8);
                    v929 = (void *)(v925 + 16);
                    unint64_t v928 = *(void *)(v925 + 16);
                    if ((unint64_t)v926 >= v928)
                    {
                      v931 = *(_DWORD **)v925;
                      uint64_t v932 = ((uint64_t)v926 - *(void *)v925) >> 2;
                      unint64_t v933 = v932 + 1;
                      if ((unint64_t)(v932 + 1) >> 62) {
                        sub_566C();
                      }
                      uint64_t v934 = v928 - (void)v931;
                      if (v934 >> 1 > v933) {
                        unint64_t v933 = v934 >> 1;
                      }
                      if ((unint64_t)v934 >= 0x7FFFFFFFFFFFFFFCLL) {
                        unint64_t v935 = 0x3FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v935 = v933;
                      }
                      if (v935)
                      {
                        v936 = (char *)sub_458C8((uint64_t)v929, v935);
                        v926 = *v927;
                        v931 = *(_DWORD **)v925;
                      }
                      else
                      {
                        v936 = 0;
                      }
                      v1098 = &v936[4 * v932];
                      *(_DWORD *)v1098 = 155;
                      v930 = v1098 + 4;
                      while (v926 != v931)
                      {
                        int v1099 = *--v926;
                        *((_DWORD *)v1098 - 1) = v1099;
                        v1098 -= 4;
                      }
                      *(void *)uint64_t v925 = v1098;
                      *v927 = v930;
                      void *v929 = &v936[4 * v935];
                      if (v931) {
                        operator delete(v931);
                      }
                    }
                    else
                    {
                      _DWORD *v926 = 155;
                      v930 = v926 + 1;
                    }
                    *v927 = v930;
                    if (!*v14)
                    {
LABEL_4228:
                      if ((*((unsigned char *)__p + 19) & 0x10) == 0) {
                        goto LABEL_4229;
                      }
                      uint64_t v1100 = *v12 + 24 * v13;
                      v1102 = (_DWORD **)(v1100 + 8);
                      v1101 = *(_DWORD **)(v1100 + 8);
                      v1104 = (void *)(v1100 + 16);
                      unint64_t v1103 = *(void *)(v1100 + 16);
                      if ((unint64_t)v1101 >= v1103)
                      {
                        v1106 = *(_DWORD **)v1100;
                        uint64_t v1107 = ((uint64_t)v1101 - *(void *)v1100) >> 2;
                        unint64_t v1108 = v1107 + 1;
                        if ((unint64_t)(v1107 + 1) >> 62) {
                          sub_566C();
                        }
                        uint64_t v1109 = v1103 - (void)v1106;
                        if (v1109 >> 1 > v1108) {
                          unint64_t v1108 = v1109 >> 1;
                        }
                        if ((unint64_t)v1109 >= 0x7FFFFFFFFFFFFFFCLL) {
                          unint64_t v1110 = 0x3FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v1110 = v1108;
                        }
                        if (v1110)
                        {
                          v1111 = (char *)sub_458C8((uint64_t)v1104, v1110);
                          v1101 = *v1102;
                          v1106 = *(_DWORD **)v1100;
                        }
                        else
                        {
                          v1111 = 0;
                        }
                        v1263 = &v1111[4 * v1107];
                        *(_DWORD *)v1263 = 156;
                        v1105 = v1263 + 4;
                        while (v1101 != v1106)
                        {
                          int v1264 = *--v1101;
                          *((_DWORD *)v1263 - 1) = v1264;
                          v1263 -= 4;
                        }
                        *(void *)uint64_t v1100 = v1263;
                        *v1102 = v1105;
                        void *v1104 = &v1111[4 * v1110];
                        if (v1106) {
                          operator delete(v1106);
                        }
                      }
                      else
                      {
                        _DWORD *v1101 = 156;
                        v1105 = v1101 + 1;
                      }
                      *v1102 = v1105;
                      if (!*v14)
                      {
LABEL_4229:
                        if ((*((unsigned char *)__p + 19) & 0x20) == 0) {
                          goto LABEL_4230;
                        }
                        uint64_t v1265 = *v12 + 24 * v13;
                        v1267 = (_DWORD **)(v1265 + 8);
                        v1266 = *(_DWORD **)(v1265 + 8);
                        v1269 = (void *)(v1265 + 16);
                        unint64_t v1268 = *(void *)(v1265 + 16);
                        if ((unint64_t)v1266 >= v1268)
                        {
                          v1271 = *(_DWORD **)v1265;
                          uint64_t v1272 = ((uint64_t)v1266 - *(void *)v1265) >> 2;
                          unint64_t v1273 = v1272 + 1;
                          if ((unint64_t)(v1272 + 1) >> 62) {
                            sub_566C();
                          }
                          uint64_t v1274 = v1268 - (void)v1271;
                          if (v1274 >> 1 > v1273) {
                            unint64_t v1273 = v1274 >> 1;
                          }
                          if ((unint64_t)v1274 >= 0x7FFFFFFFFFFFFFFCLL) {
                            unint64_t v1275 = 0x3FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v1275 = v1273;
                          }
                          if (v1275)
                          {
                            v1276 = (char *)sub_458C8((uint64_t)v1269, v1275);
                            v1266 = *v1267;
                            v1271 = *(_DWORD **)v1265;
                          }
                          else
                          {
                            v1276 = 0;
                          }
                          v1404 = &v1276[4 * v1272];
                          *(_DWORD *)v1404 = 157;
                          v1270 = v1404 + 4;
                          while (v1266 != v1271)
                          {
                            int v1405 = *--v1266;
                            *((_DWORD *)v1404 - 1) = v1405;
                            v1404 -= 4;
                          }
                          *(void *)uint64_t v1265 = v1404;
                          *v1267 = v1270;
                          void *v1269 = &v1276[4 * v1275];
                          if (v1271) {
                            operator delete(v1271);
                          }
                        }
                        else
                        {
                          _DWORD *v1266 = 157;
                          v1270 = v1266 + 1;
                        }
                        *v1267 = v1270;
                        if (!*v14)
                        {
LABEL_4230:
                          if ((*((unsigned char *)__p + 19) & 0x40) == 0) {
                            goto LABEL_4231;
                          }
                          uint64_t v1406 = *v12 + 24 * v13;
                          v1408 = (_DWORD **)(v1406 + 8);
                          v1407 = *(_DWORD **)(v1406 + 8);
                          v1410 = (void *)(v1406 + 16);
                          unint64_t v1409 = *(void *)(v1406 + 16);
                          if ((unint64_t)v1407 >= v1409)
                          {
                            v1412 = *(_DWORD **)v1406;
                            uint64_t v1413 = ((uint64_t)v1407 - *(void *)v1406) >> 2;
                            unint64_t v1414 = v1413 + 1;
                            if ((unint64_t)(v1413 + 1) >> 62) {
                              sub_566C();
                            }
                            uint64_t v1415 = v1409 - (void)v1412;
                            if (v1415 >> 1 > v1414) {
                              unint64_t v1414 = v1415 >> 1;
                            }
                            if ((unint64_t)v1415 >= 0x7FFFFFFFFFFFFFFCLL) {
                              unint64_t v1416 = 0x3FFFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v1416 = v1414;
                            }
                            if (v1416)
                            {
                              v1417 = (char *)sub_458C8((uint64_t)v1410, v1416);
                              v1407 = *v1408;
                              v1412 = *(_DWORD **)v1406;
                            }
                            else
                            {
                              v1417 = 0;
                            }
                            v1547 = &v1417[4 * v1413];
                            *(_DWORD *)v1547 = 158;
                            v1411 = v1547 + 4;
                            while (v1407 != v1412)
                            {
                              int v1548 = *--v1407;
                              *((_DWORD *)v1547 - 1) = v1548;
                              v1547 -= 4;
                            }
                            *(void *)uint64_t v1406 = v1547;
                            *v1408 = v1411;
                            void *v1410 = &v1417[4 * v1416];
                            if (v1412) {
                              operator delete(v1412);
                            }
                          }
                          else
                          {
                            _DWORD *v1407 = 158;
                            v1411 = v1407 + 1;
                          }
                          *v1408 = v1411;
                          if (!*v14)
                          {
LABEL_4231:
                            if ((*((unsigned char *)__p + 19) & 0x80) == 0) {
                              goto LABEL_4232;
                            }
                            uint64_t v1549 = *v12 + 24 * v13;
                            v1551 = (_DWORD **)(v1549 + 8);
                            v1550 = *(_DWORD **)(v1549 + 8);
                            v1553 = (void *)(v1549 + 16);
                            unint64_t v1552 = *(void *)(v1549 + 16);
                            if ((unint64_t)v1550 >= v1552)
                            {
                              v1555 = *(_DWORD **)v1549;
                              uint64_t v1556 = ((uint64_t)v1550 - *(void *)v1549) >> 2;
                              unint64_t v1557 = v1556 + 1;
                              if ((unint64_t)(v1556 + 1) >> 62) {
                                sub_566C();
                              }
                              uint64_t v1558 = v1552 - (void)v1555;
                              if (v1558 >> 1 > v1557) {
                                unint64_t v1557 = v1558 >> 1;
                              }
                              if ((unint64_t)v1558 >= 0x7FFFFFFFFFFFFFFCLL) {
                                unint64_t v1559 = 0x3FFFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v1559 = v1557;
                              }
                              if (v1559)
                              {
                                v1560 = (char *)sub_458C8((uint64_t)v1553, v1559);
                                v1550 = *v1551;
                                v1555 = *(_DWORD **)v1549;
                              }
                              else
                              {
                                v1560 = 0;
                              }
                              v1687 = &v1560[4 * v1556];
                              *(_DWORD *)v1687 = 159;
                              v1554 = v1687 + 4;
                              while (v1550 != v1555)
                              {
                                int v1688 = *--v1550;
                                *((_DWORD *)v1687 - 1) = v1688;
                                v1687 -= 4;
                              }
                              *(void *)uint64_t v1549 = v1687;
                              *v1551 = v1554;
                              void *v1553 = &v1560[4 * v1559];
                              if (v1555) {
                                operator delete(v1555);
                              }
                            }
                            else
                            {
                              _DWORD *v1550 = 159;
                              v1554 = v1550 + 1;
                            }
                            *v1551 = v1554;
                            if (!*v14)
                            {
LABEL_4232:
                              if (*((unsigned char *)__p + 20))
                              {
                                uint64_t v247 = *v12 + 24 * v13;
                                uint64_t v249 = (int **)(v247 + 8);
                                int v248 = *(int **)(v247 + 8);
                                uint64_t v251 = (void *)(v247 + 16);
                                unint64_t v1689 = *(void *)(v247 + 16);
                                if ((unint64_t)v248 >= v1689)
                                {
                                  uint64_t v253 = *(int **)v247;
                                  uint64_t v1690 = ((uint64_t)v248 - *(void *)v247) >> 2;
                                  unint64_t v1691 = v1690 + 1;
                                  if ((unint64_t)(v1690 + 1) >> 62) {
                                    sub_566C();
                                  }
                                  uint64_t v1692 = v1689 - (void)v253;
                                  if (v1692 >> 1 > v1691) {
                                    unint64_t v1691 = v1692 >> 1;
                                  }
                                  if ((unint64_t)v1692 >= 0x7FFFFFFFFFFFFFFCLL) {
                                    unint64_t v257 = 0x3FFFFFFFFFFFFFFFLL;
                                  }
                                  else {
                                    unint64_t v257 = v1691;
                                  }
                                  if (v257)
                                  {
                                    unint64_t v258 = (char *)sub_458C8((uint64_t)v251, v257);
                                    int v248 = *v249;
                                    uint64_t v253 = *(int **)v247;
                                  }
                                  else
                                  {
                                    unint64_t v258 = 0;
                                  }
                                  unint64_t v473 = &v258[4 * v1690];
                                  *(_DWORD *)unint64_t v473 = 160;
                                  unint64_t v474 = (int *)(v473 + 4);
                                  while (v248 != v253)
                                  {
                                    int v1811 = *--v248;
                                    *((_DWORD *)v473 - 1) = v1811;
                                    v473 -= 4;
                                  }
LABEL_3834:
                                  *(void *)uint64_t v247 = v473;
                                  char *v249 = v474;
                                  void *v251 = &v258[4 * v257];
                                  if (v253) {
                                    operator delete(v253);
                                  }
                                }
                                else
                                {
                                  int v252 = 160;
LABEL_2186:
                                  *int v248 = v252;
                                  unint64_t v474 = v248 + 1;
                                }
                                char *v249 = v474;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          break;
        default:
          break;
      }
      ++v13;
    }
    while (v13 != 16);
    uint64_t v2887 = 1;
  }
  if (__p) {
    operator delete(__p);
  }
  return v2887;
}

void sub_72A34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_73140(uint64_t a1)
{
  *(void *)a1 = off_741FB0;
  if (*(void *)(a1 + 128))
  {
    sub_F63C4();
    operator delete();
  }
  uint64_t v2 = a1 + 43184;
  uint64_t v3 = a1 + 50480;
  do
  {
    unsigned int v4 = *(void ***)(v3 - 40);
    long long v5 = *(void ***)(v3 - 32);
    *(void *)(v3 - 8) = 0;
    unint64_t v6 = (char *)v5 - (char *)v4;
    if ((unint64_t)((char *)v5 - (char *)v4) >= 0x11)
    {
      do
      {
        operator delete(*v4);
        long long v5 = *(void ***)(v3 - 32);
        unsigned int v4 = (void **)(*(void *)(v3 - 40) + 8);
        *(void *)(v3 - 40) = v4;
        unint64_t v6 = (char *)v5 - (char *)v4;
      }
      while ((unint64_t)((char *)v5 - (char *)v4) > 0x10);
    }
    unint64_t v7 = v6 >> 3;
    if (v7 == 1)
    {
      uint64_t v8 = 256;
      goto LABEL_10;
    }
    if (v7 == 2)
    {
      uint64_t v8 = 512;
LABEL_10:
      *(void *)(v3 - 16) = v8;
    }
    if (v4 != v5)
    {
      do
      {
        uint64_t v9 = *v4++;
        operator delete(v9);
      }
      while (v4 != v5);
      uint64_t v11 = *(void *)(v3 - 40);
      uint64_t v10 = *(void *)(v3 - 32);
      if (v10 != v11) {
        *(void *)(v3 - 32) = v10 + ((v11 - v10 + 7) & 0xFFFFFFFFFFFFFFF8);
      }
    }
    uint64_t v13 = *(void **)(v3 - 48);
    v3 -= 48;
    uint64_t v12 = v13;
    if (v13) {
      operator delete(v12);
    }
  }
  while (v3 != v2);
  sub_2F31C(a1 + 43136);
  uint64_t v14 = 0;
  uint64_t v15 = a1 + 35232;
  do
  {
    if (*(unsigned char *)(a1 + 35416 + v14))
    {
      uint64_t v16 = v15 + v14;
      uint64_t v17 = *(void **)(v15 + v14 + 96);
      if (v17)
      {
        *(void *)(v16 + 104) = v17;
        operator delete(v17);
      }
      unint64_t v18 = *(void **)(v16 + 72);
      if (v18)
      {
        *(void *)(v15 + v14 + 80) = v18;
        operator delete(v18);
      }
      uint64_t v19 = v15 + v14;
      int v20 = *(void **)(v15 + v14 + 48);
      if (v20)
      {
        *(void *)(v19 + 56) = v20;
        operator delete(v20);
      }
      uint64_t v21 = *(void **)(v19 + 24);
      if (v21)
      {
        *(void *)(v15 + v14 + 32) = v21;
        operator delete(v21);
      }
      long long v22 = *(void **)(v15 + v14);
      if (v22)
      {
        *(void *)(v15 + v14 + 8) = v22;
        operator delete(v22);
      }
    }
    v14 -= 232;
  }
  while (v14 != -35264);
  unint64_t v24 = (void **)(a1 + 136);
  std::vector<std::vector<ProfileEvent>>::__destroy_vector::operator()[abi:nn180100](&v24);
  return a1;
}

void sub_7331C(uint64_t a1)
{
  sub_73140(a1);

  operator delete();
}

void sub_73354(uint64_t a1, void *a2, unsigned int a3)
{
  if (a3 > 0xF) {
    return;
  }
  uint64_t v3 = a1 + 40 * a3 + 35872;
  if (!*(unsigned char *)(a1 + 40 * a3 + 35904)) {
    return;
  }
  uint64_t v5 = *(void *)v3;
  uint64_t v6 = *(void *)(a1 + 40 * a3 + 35888);
  int v66 = *(_DWORD *)(a1 + 40 * a3 + 35896);
  uint64_t v7 = (uint64_t)(a2 + 24);
  unint64_t v8 = a2[24];
  uint64_t v9 = a2[3256];
  uint64_t v10 = a2[3255];
  uint64_t v11 = a2[3259];
  uint64_t v12 = a2[3258];
  uint64_t v13 = (void *)a2[23];
  if ((unint64_t)v13 >= v8)
  {
    uint64_t v15 = (void **)(a2 + 22);
    uint64_t v16 = a2[22];
    uint64_t v17 = ((uint64_t)v13 - v16) >> 3;
    if ((unint64_t)(v17 + 1) >> 61) {
      goto LABEL_70;
    }
    uint64_t v18 = v8 - v16;
    uint64_t v19 = v18 >> 2;
    if (v18 >> 2 <= (unint64_t)(v17 + 1)) {
      uint64_t v19 = v17 + 1;
    }
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v19;
    }
    if (v20) {
      uint64_t v21 = (char *)sub_5714(v7, v20);
    }
    else {
      uint64_t v21 = 0;
    }
    long long v22 = &v21[8 * v17];
    int v23 = &v21[8 * v20];
    *(void *)long long v22 = v5;
    uint64_t v14 = v22 + 8;
    unint64_t v25 = (char *)a2[22];
    unint64_t v24 = (char *)a2[23];
    if (v24 != v25)
    {
      do
      {
        uint64_t v26 = *((void *)v24 - 1);
        v24 -= 8;
        *((void *)v22 - 1) = v26;
        v22 -= 8;
      }
      while (v24 != v25);
      unint64_t v24 = (char *)*v15;
    }
    a2[22] = v22;
    a2[23] = v14;
    a2[24] = v23;
    if (v24) {
      operator delete(v24);
    }
  }
  else
  {
    *uint64_t v13 = v5;
    uint64_t v14 = v13 + 1;
  }
  uint64_t v27 = (((v11 - v12) << 29) - 0x100000000) | (((unint64_t)(v9 - v10) >> 3) - 1);
  unint64_t v28 = a2[27];
  a2[23] = v14;
  __int16 v29 = (uint64_t *)a2[26];
  if ((unint64_t)v29 >= v28)
  {
    uint64_t v31 = a2[25];
    uint64_t v32 = ((uint64_t)v29 - v31) >> 3;
    if (!((unint64_t)(v32 + 1) >> 61))
    {
      uint64_t v33 = v28 - v31;
      uint64_t v34 = v33 >> 2;
      if (v33 >> 2 <= (unint64_t)(v32 + 1)) {
        uint64_t v34 = v32 + 1;
      }
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v35 = v34;
      }
      if (v35) {
        unint64_t v36 = (char *)sub_5714((uint64_t)(a2 + 27), v35);
      }
      else {
        unint64_t v36 = 0;
      }
      uint64_t v37 = (uint64_t *)&v36[8 * v32];
      unint64_t v38 = &v36[8 * v35];
      *uint64_t v37 = v27;
      unint64_t v30 = v37 + 1;
      uint64_t v40 = (char *)a2[25];
      uint64_t v39 = (char *)a2[26];
      if (v39 != v40)
      {
        do
        {
          uint64_t v41 = *((void *)v39 - 1);
          v39 -= 8;
          *--uint64_t v37 = v41;
        }
        while (v39 != v40);
        uint64_t v39 = (char *)a2[25];
      }
      a2[25] = v37;
      a2[26] = v30;
      a2[27] = v38;
      if (v39) {
        operator delete(v39);
      }
      goto LABEL_35;
    }
LABEL_70:
    sub_566C();
  }
  uint64_t *v29 = v27;
  unint64_t v30 = v29 + 1;
LABEL_35:
  unint64_t v42 = a2[30];
  a2[26] = v30;
  int v43 = (char *)a2[29];
  if ((unint64_t)v43 >= v42)
  {
    uint64_t v45 = (char *)a2[28];
    uint64_t v46 = (v43 - v45) >> 3;
    if ((unint64_t)(v46 + 1) >> 61) {
      sub_566C();
    }
    unint64_t v47 = v42 - (void)v45;
    unint64_t v48 = (uint64_t)(v42 - (void)v45) >> 2;
    if (v48 <= v46 + 1) {
      unint64_t v48 = v46 + 1;
    }
    if (v47 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v49 = v48;
    }
    if (v49)
    {
      uint64_t v50 = (char *)sub_5714((uint64_t)(a2 + 30), v49);
      uint64_t v45 = (char *)a2[28];
      int v43 = (char *)a2[29];
    }
    else
    {
      uint64_t v50 = 0;
    }
    uint64_t v51 = &v50[8 * v46];
    unint64_t v52 = &v50[8 * v49];
    *(void *)uint64_t v51 = v6;
    unint64_t v44 = v51 + 8;
    while (v43 != v45)
    {
      uint64_t v53 = *((void *)v43 - 1);
      v43 -= 8;
      *((void *)v51 - 1) = v53;
      v51 -= 8;
    }
    a2[28] = v51;
    a2[29] = v44;
    a2[30] = v52;
    if (v45) {
      operator delete(v45);
    }
  }
  else
  {
    *(void *)int v43 = v6;
    unint64_t v44 = v43 + 8;
  }
  a2[29] = v44;
  unint64_t v54 = (char *)a2[32];
  unint64_t v55 = a2[33];
  if ((unint64_t)v54 >= v55)
  {
    uint64_t v57 = (char *)a2[31];
    uint64_t v58 = (v54 - v57) >> 2;
    if ((unint64_t)(v58 + 1) >> 62) {
      sub_566C();
    }
    unint64_t v59 = v55 - (void)v57;
    unint64_t v60 = (uint64_t)(v55 - (void)v57) >> 1;
    if (v60 <= v58 + 1) {
      unint64_t v60 = v58 + 1;
    }
    if (v59 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v61 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v61 = v60;
    }
    if (v61)
    {
      uint64_t v62 = (char *)sub_458C8((uint64_t)(a2 + 33), v61);
      uint64_t v57 = (char *)a2[31];
      unint64_t v54 = (char *)a2[32];
    }
    else
    {
      uint64_t v62 = 0;
    }
    uint64_t v63 = &v62[4 * v58];
    uint64_t v64 = &v62[4 * v61];
    *(_DWORD *)uint64_t v63 = v66;
    unint64_t v56 = v63 + 4;
    while (v54 != v57)
    {
      int v65 = *((_DWORD *)v54 - 1);
      v54 -= 4;
      *((_DWORD *)v63 - 1) = v65;
      v63 -= 4;
    }
    a2[31] = v63;
    a2[32] = v56;
    a2[33] = v64;
    if (v57) {
      operator delete(v57);
    }
  }
  else
  {
    *(_DWORD *)unint64_t v54 = v66;
    unint64_t v56 = v54 + 4;
  }
  a2[32] = v56;
  if (*(unsigned char *)(v3 + 32)) {
    *(unsigned char *)(v3 + 32) = 0;
  }
}

void sub_736D4(uint64_t a1, void *a2, unsigned int a3, char a4)
{
  if (a3 > 0x97) {
    return;
  }
  uint64_t v4 = a1 + 232 * a3;
  if (!*(unsigned char *)(v4 + 384)) {
    return;
  }
  uint64_t v7 = v4 + 160;
  unsigned int v8 = *(unsigned __int8 *)(v4 + 196);
  if (v8 >= 0x60)
  {
    if (v8 >= 0x68)
    {
      if (v8 < 0x98) {
        goto LABEL_15;
      }
    }
    else if (*(unsigned char *)(v7 + 215))
    {
      goto LABEL_15;
    }
  }
  if ((*(_DWORD *)(v7 + 208) - 3) > 1 || *(unsigned char *)(v7 + 216))
  {
    uint64_t v9 = a1 + 43184;
    uint64_t v10 = (int64x2_t *)(a1 + 43184 + 48 * a3);
    if (v10[2].i64[1])
    {
      unint64_t v11 = *(void *)(v9 + 48 * a3 + 32);
      uint64_t v12 = *(void *)(*(void *)(v10->i64[1] + ((v11 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v11 & 0x1FF));
      if (*(unsigned char *)(v12 + 32))
      {
        sub_47E68(v10);
        if (*(unsigned char *)(v7 + 224))
        {
          *(void *)(v7 + 8) = (((a2[3259] - a2[3258]) << 29) - 0x100000000) | (((a2[3256] - a2[3255]) >> 3)
                                                                                 - 1);
          *(unsigned char *)(v7 + 212) = a4;
        }
        sub_45934(v12 + 40, v7);
        goto LABEL_16;
      }
    }
  }
LABEL_15:
  *(void *)(v7 + 8) = (((a2[3259] - a2[3258]) << 29) - 0x100000000) | (((a2[3256] - a2[3255]) >> 3) - 1);
  *(unsigned char *)(v7 + 212) = a4;
  sub_46078(a2, v7);
LABEL_16:
  if (*(unsigned char *)(v7 + 224))
  {
    uint64_t v13 = *(void **)(v7 + 136);
    if (v13)
    {
      *(void *)(v7 + 144) = v13;
      operator delete(v13);
    }
    uint64_t v14 = *(void **)(v7 + 112);
    if (v14)
    {
      *(void *)(v7 + 120) = v14;
      operator delete(v14);
    }
    uint64_t v15 = *(void **)(v7 + 88);
    if (v15)
    {
      *(void *)(v7 + 96) = v15;
      operator delete(v15);
    }
    uint64_t v16 = *(void **)(v7 + 64);
    if (v16)
    {
      *(void *)(v7 + 72) = v16;
      operator delete(v16);
    }
    uint64_t v17 = *(void **)(v7 + 40);
    if (v17)
    {
      *(void *)(v7 + 48) = v17;
      operator delete(v17);
    }
    *(unsigned char *)(v7 + 224) = 0;
  }
}

const char *sub_738A8(uint64_t a1, unsigned int a2)
{
  unsigned int v2 = a2 - 128;
  if (a2 < 0x80)
  {
    uint64_t v3 = &off_742008[a2];
    return *v3;
  }
  if (v2 < 0x40)
  {
    uint64_t v4 = off_742408;
LABEL_7:
    uint64_t v3 = &v4[v2];
    return *v3;
  }
  unsigned int v2 = a2 - 192;
  if (a2 - 192 < 0x16)
  {
    uint64_t v4 = off_742608;
    goto LABEL_7;
  }
  return "Invalid";
}

uint64_t sub_73904(uint64_t result, uint64_t a2, uint64_t *a3, unsigned char *a4)
{
  *(void *)(result + 96) = 0;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)uint64_t result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *a4 = 1;
  uint64_t v4 = *a3;
  uint64_t v5 = *a3 & 7;
  unint64_t v6 = (unint64_t)*a3 >> 3;
  if (v5 == 7) {
    int v7 = *(unsigned __int16 *)(a2 + v6) >> 7;
  }
  else {
    int v7 = *(unsigned __int8 *)(a2 + v6) >> v5;
  }
  switch(v7 & 3)
  {
    case 1:
      uint64_t v12 = (v4 + 2) & 7;
      unint64_t v13 = (unint64_t)(v4 + 2) >> 3;
      if (v12 == 7) {
        int v14 = *(unsigned __int16 *)(a2 + v13) >> 7;
      }
      else {
        int v14 = *(unsigned __int8 *)(a2 + v13) >> v12;
      }
      switch(v14 & 3)
      {
        case 1:
          unint64_t v44 = v4 + 4;
          uint64_t v45 = (v4 + 4) & 7;
          unint64_t v46 = v44 >> 3;
          if (v45 == 7) {
            int v47 = *(unsigned __int16 *)(a2 + v46) >> 7;
          }
          else {
            int v47 = *(unsigned __int8 *)(a2 + v46) >> v45;
          }
          int v84 = v47 & 3;
          if (v84 == 1)
          {
            *(_WORD *)(result + 8) = 11;
            *(void *)uint64_t result = 0x300000003;
            unint64_t v128 = *a3 + 26;
            unint64_t v129 = v128 & 7;
            unint64_t v130 = v128 >> 3;
            if (v129 > 2)
            {
              unint64_t v132 = ((unint64_t)*(unsigned __int8 *)(v130 + a2 + 7) << 56) | ((unint64_t)*(unsigned __int8 *)(v130 + a2 + 6) << 48);
              unint64_t v131 = (unint64_t)*(unsigned __int8 *)(v130 + a2 + 5) << 40;
            }
            else
            {
              unint64_t v131 = (unint64_t)*(unsigned __int8 *)(v130 + a2 + 6) << 48;
              unint64_t v132 = (unint64_t)*(unsigned __int8 *)(v130 + a2 + 5) << 40;
            }
            uint64_t v182 = (unsigned __int8 *)(a2 + v130);
            *(void *)(result + 24) |= ((v132 | v131 | ((unint64_t)v182[4] << 32) | ((unint64_t)v182[3] << 24) | ((unint64_t)v182[2] << 16) | ((unint64_t)v182[1] << 8) | *v182) >> v129) & 0x3FFFFFFFFFFFFFLL;
            unint64_t v183 = *a3 & 7;
            unint64_t v184 = (unint64_t)(*a3 + 80) >> 3;
            if (v183 > 5) {
              unsigned int v185 = *(unsigned __int16 *)(a2 + v184);
            }
            else {
              unsigned int v185 = *(unsigned __int8 *)(a2 + v184);
            }
            *(_DWORD *)(result + 32) |= (v185 >> v183) & 7;
            unint64_t v186 = *a3 + 6;
            unint64_t v187 = v186 & 7;
            unint64_t v188 = v186 >> 3;
            if (v187 > 4)
            {
              int v190 = (*(unsigned __int8 *)(v188 + a2 + 3) << 24) | (*(unsigned __int8 *)(v188 + a2 + 2) << 16);
              int v189 = *(unsigned __int8 *)(v188 + a2 + 1) << 8;
            }
            else
            {
              int v189 = *(unsigned __int8 *)(v188 + a2 + 2) << 16;
              int v190 = *(unsigned __int8 *)(v188 + a2 + 1) << 8;
            }
            *(_DWORD *)(result + 16) |= ((v190 | v189 | *(unsigned __int8 *)(a2 + v188)) >> v187) & 0xFFFFF;
            uint64_t v22 = 83;
          }
          else
          {
            if (v84) {
              goto LABEL_81;
            }
            *(_WORD *)(result + 8) = 4;
            *(void *)uint64_t result = 0x200000002;
            unint64_t v85 = *a3 + 6;
            unint64_t v86 = v85 & 7;
            unint64_t v87 = v85 >> 3;
            if (v86 > 4)
            {
              int v89 = (*(unsigned __int8 *)(v87 + a2 + 3) << 24) | (*(unsigned __int8 *)(v87 + a2 + 2) << 16);
              int v88 = *(unsigned __int8 *)(v87 + a2 + 1) << 8;
            }
            else
            {
              int v88 = *(unsigned __int8 *)(v87 + a2 + 2) << 16;
              int v89 = *(unsigned __int8 *)(v87 + a2 + 1) << 8;
            }
            *(_DWORD *)(result + 16) |= ((v89 | v88 | *(unsigned __int8 *)(a2 + v87)) >> v86) & 0xFFFFF;
            uint64_t v22 = 26;
          }
          goto LABEL_398;
        case 2:
          *(_WORD *)(result + 8) = 2;
          *(void *)uint64_t result = 0x500000005;
          if ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 4) >> 3)) >> ((*(unsigned char *)a3 + 4) & 7)))
          {
            *(_DWORD *)(result + 16) = 1;
            unint64_t v48 = *a3 + 5;
            unint64_t v49 = v48 & 7;
            unint64_t v50 = v48 >> 3;
            if (v49 > 5) {
              unsigned int v51 = *(unsigned __int16 *)(a2 + v50);
            }
            else {
              unsigned int v51 = *(unsigned __int8 *)(a2 + v50);
            }
            *(unsigned char *)(result + 20) |= (v51 >> v49) & 7;
            unint64_t v137 = *a3 & 7;
            unint64_t v138 = (unint64_t)(*a3 + 8) >> 3;
            if (v137 > 1) {
              unsigned int v139 = *(unsigned __int16 *)(a2 + v138);
            }
            else {
              unsigned int v139 = *(unsigned __int8 *)(a2 + v138);
            }
            *(unsigned char *)(result + 21) |= (v139 >> v137) & 0x7F;
            goto LABEL_122;
          }
          *(_DWORD *)(result + 16) = 0;
          unint64_t v103 = *a3 + 5;
          unint64_t v104 = v103 >> 3;
          unint64_t v105 = v103 & 7;
          if (v105) {
            int v106 = *(unsigned __int16 *)(a2 + v104) >> v105;
          }
          else {
            LOBYTE(v106) = *(unsigned char *)(a2 + v104);
          }
          *(unsigned char *)(result + 20) |= v106;
          unint64_t v191 = *a3 + 13;
          unint64_t v192 = v191 & 7;
          unint64_t v193 = v191 >> 3;
          if (v192 > 5) {
            unsigned __int16 v194 = *(_WORD *)(a2 + v193);
          }
          else {
            unsigned __int16 v194 = *(unsigned __int8 *)(a2 + v193);
          }
          switch((v194 >> v192) & 7)
          {
            case 1:
              int v361 = 1;
              goto LABEL_289;
            case 2:
              int v361 = 2;
              goto LABEL_289;
            case 3:
              int v361 = 3;
              goto LABEL_289;
            case 4:
              int v361 = 4;
              goto LABEL_289;
            case 5:
              int v361 = 5;
              goto LABEL_289;
            case 6:
              int v361 = 6;
              goto LABEL_289;
            case 7:
              int v361 = 7;
LABEL_289:
              *(_DWORD *)(result + 24) = v361;
              break;
            default:
              *(_DWORD *)(result + 24) = 0;
              break;
          }
          uint64_t v22 = 16;
          break;
        case 3:
          *(_WORD *)(result + 8) = 2;
          *(void *)uint64_t result = 0x600000006;
          unint64_t v52 = *a3 + 4;
          unint64_t v53 = v52 >> 3;
          unint64_t v54 = v52 & 7;
          if (v54) {
            int v55 = *(unsigned __int16 *)(a2 + v53) >> v54;
          }
          else {
            LOBYTE(v55) = *(unsigned char *)(a2 + v53);
          }
          *(unsigned char *)(result + 16) |= v55;
          uint64_t v22 = 12;
          goto LABEL_398;
        default:
          *(_WORD *)(result + 8) = 1;
          *(void *)uint64_t result = 0x100000001;
          uint64_t v22 = 4;
          goto LABEL_398;
      }
      break;
    case 2:
      unint64_t v15 = v4 + 2;
      uint64_t v16 = (v4 + 2) & 7;
      unint64_t v17 = v15 >> 3;
      if (v16 == 7) {
        int v18 = *(unsigned __int16 *)(a2 + v17) >> 7;
      }
      else {
        int v18 = *(unsigned __int8 *)(a2 + v17) >> v16;
      }
      switch(v18 & 3)
      {
        case 1:
          *(_WORD *)(result + 8) = 17;
          *(void *)uint64_t result = 0x800000008;
          unint64_t v56 = *a3 + 4;
          unint64_t v57 = v56 >> 3;
          unint64_t v58 = v56 & 7;
          if (v58) {
            int v59 = *(unsigned __int16 *)(a2 + v57) >> v58;
          }
          else {
            LOBYTE(v59) = *(unsigned char *)(a2 + v57);
          }
          *(unsigned char *)(result + 16) |= v59;
          unint64_t v107 = *a3 + 12;
          unint64_t v108 = v107 & 7;
          unint64_t v109 = v107 >> 3;
          if (v108 == 7) {
            int v110 = *(unsigned __int16 *)(a2 + v109) >> 7;
          }
          else {
            int v110 = *(unsigned __int8 *)(a2 + v109) >> v108;
          }
          switch(v110 & 3)
          {
            case 1:
              *(_DWORD *)(result + 20) = 0;
              unint64_t v146 = *a3 + 14;
              unint64_t v147 = v146 >> 3;
              unint64_t v148 = v146 & 7;
              if (v148)
              {
                unint64_t v149 = (unsigned __int8 *)(a2 + v147);
                uint64_t v150 = ((((unint64_t)v149[4] << 32) | ((unint64_t)v149[3] << 24) | ((unint64_t)v149[2] << 16) | ((unint64_t)v149[1] << 8) | *v149) >> v148);
              }
              else
              {
                uint64_t v150 = *(unsigned int *)(a2 + v147);
              }
              int v234 = *(_DWORD *)(result + 32);
              unint64_t v235 = *(void *)(result + 24) & 0xFFFFFFFF00000000 | v150 | *(void *)(result + 24);
              *(void *)(result + 24) = v235;
              unint64_t v236 = *a3 + 46;
              unint64_t v237 = v236 >> 3;
              unint64_t v238 = v236 & 7;
              if (v238)
              {
                uint64_t v239 = (unsigned __int8 *)(a2 + v237);
                uint64_t v240 = ((((unint64_t)v239[4] << 32) | ((unint64_t)v239[3] << 24) | ((unint64_t)v239[2] << 16) | ((unint64_t)v239[1] << 8) | *v239) >> v238);
              }
              else
              {
                uint64_t v240 = *(unsigned int *)(a2 + v237);
              }
              unint64_t v253 = v235 & 0xFFFFFFFF00000000 | (v240 << 32) | v235;
              *(_DWORD *)(result + 32) = v234;
              *(void *)(result + 24) = v253;
              unint64_t v254 = *a3 + 78;
              unint64_t v255 = v254 >> 3;
              unint64_t v256 = v254 & 7;
              if (v256)
              {
                unint64_t v257 = (unsigned __int8 *)(a2 + v255);
                int v258 = (((unint64_t)v257[4] << 32) | ((unint64_t)v257[3] << 24) | ((unint64_t)v257[2] << 16) | ((unint64_t)v257[1] << 8) | *v257) >> v256;
              }
              else
              {
                int v258 = *(_DWORD *)(a2 + v255);
              }
              *(void *)(result + 24) = v253;
              *(_DWORD *)(result + 32) = v258 | v234;
              if ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 110) >> 3)) >> ((*(unsigned char *)a3 + 110) & 7)))
              {
                *(_DWORD *)(result + 36) = 1;
                unint64_t v259 = *a3 + 111;
                unint64_t v260 = v259 & 7;
                unint64_t v261 = v259 >> 3;
                if (v260 > 3) {
                  unsigned int v262 = *(unsigned __int16 *)(a2 + v261);
                }
                else {
                  unsigned int v262 = *(unsigned __int8 *)(a2 + v261);
                }
                *(unsigned char *)(result + 40) |= (v262 >> v260) & 0x1F;
                unint64_t v278 = *a3 + 116;
                unint64_t v279 = v278 & 7;
                unint64_t v280 = v278 >> 3;
                if (v279 > 4) {
                  unsigned int v281 = (*(unsigned __int8 *)(a2 + v280 + 2) << 16) | (*(unsigned __int8 *)(a2 + v280 + 1) << 8) | *(unsigned __int8 *)(a2 + v280);
                }
                else {
                  unsigned int v281 = *(unsigned __int16 *)(a2 + v280);
                }
                int v287 = *(_DWORD *)(result + 42) | (v281 >> v279) & 0xFFF;
                *(_DWORD *)(result + 42) = v287;
                unint64_t v288 = *a3 & 7;
                unint64_t v289 = (unint64_t)(*a3 + 128) >> 3;
                if (v288 > 4) {
                  unsigned int v290 = *(unsigned __int16 *)(a2 + v289);
                }
                else {
                  unsigned int v290 = *(unsigned __int8 *)(a2 + v289);
                }
                int v295 = v287 | (((v290 >> v288) & 0xF) << 12);
                *(_DWORD *)(result + 42) = v295;
                unint64_t v296 = (*(unsigned char *)a3 - 124) & 7;
                unint64_t v297 = (unint64_t)(*a3 + 132) >> 3;
                if (v296 > 4) {
                  unsigned int v298 = *(unsigned __int16 *)(a2 + v297);
                }
                else {
                  unsigned int v298 = *(unsigned __int8 *)(a2 + v297);
                }
                *(_DWORD *)(result + 42) = v295 | (((v298 >> v296) & 0xF) << 16);
                uint64_t v22 = 136;
              }
              else
              {
                *(_DWORD *)(result + 36) = 0;
                unint64_t v263 = *a3 + 111;
                unint64_t v264 = v263 & 7;
                unint64_t v265 = v263 >> 3;
                if (v264 > 3) {
                  unsigned int v266 = *(unsigned __int16 *)(a2 + v265);
                }
                else {
                  unsigned int v266 = *(unsigned __int8 *)(a2 + v265);
                }
                *(unsigned char *)(result + 40) |= (v266 >> v264) & 0x1F;
                uint64_t v22 = 116;
              }
              break;
            case 2:
              *(_DWORD *)(result + 20) = 3;
              unint64_t v151 = *a3 + 14;
              unsigned int v152 = *(unsigned __int8 *)(a2 + (v151 >> 3));
              char v153 = v151 & 7;
              char v154 = *(unsigned char *)(result + 24);
              if ((v152 >> v153))
              {
                *(unsigned char *)(result + 24) = v154 | 1;
                unint64_t v155 = *a3 + 15;
                unint64_t v156 = v155 & 7;
                unint64_t v157 = v155 >> 3;
                if (v156 > 4) {
                  unsigned int v158 = *(unsigned __int16 *)(a2 + v157);
                }
                else {
                  unsigned int v158 = *(unsigned __int8 *)(a2 + v157);
                }
                *(unsigned char *)(result + 25) |= (v158 >> v156) & 0xF;
                unint64_t v267 = *a3 + 19;
                unint64_t v268 = v267 & 7;
                unint64_t v269 = v267 >> 3;
                if (v268 > 4) {
                  unsigned int v270 = *(unsigned __int16 *)(a2 + v269);
                }
                else {
                  unsigned int v270 = *(unsigned __int8 *)(a2 + v269);
                }
                *(unsigned char *)(result + 33) |= (v270 >> v268) & 0xF;
                uint64_t v22 = 23;
              }
              else
              {
                *(unsigned char *)(result + 24) = v154 & 0xFE;
                unint64_t v241 = *a3 + 15;
                unint64_t v242 = v241 & 7;
                unint64_t v243 = v241 >> 3;
                if (v242 > 4) {
                  unsigned int v244 = *(unsigned __int16 *)(a2 + v243);
                }
                else {
                  unsigned int v244 = *(unsigned __int8 *)(a2 + v243);
                }
                *(unsigned char *)(result + 25) |= (v244 >> v242) & 0xF;
                unint64_t v362 = *a3 + 19;
                unint64_t v363 = v362 & 7;
                unint64_t v364 = v362 >> 3;
                if (v363 > 4) {
                  unsigned int v365 = *(unsigned __int16 *)(a2 + v364);
                }
                else {
                  unsigned int v365 = *(unsigned __int8 *)(a2 + v364);
                }
                *(unsigned char *)(result + 33) |= (v365 >> v363) & 0xF;
                unint64_t v370 = *a3 + 23;
                unint64_t v371 = v370 & 7;
                unint64_t v372 = v370 >> 3;
                if (v371 > 4) {
                  unsigned int v373 = *(unsigned __int16 *)(a2 + v372);
                }
                else {
                  unsigned int v373 = *(unsigned __int8 *)(a2 + v372);
                }
                *(unsigned char *)(result + 26) |= (v373 >> v371) & 0xF;
                unint64_t v378 = *a3 + 27;
                unint64_t v379 = v378 & 7;
                unint64_t v380 = v378 >> 3;
                if (v379 > 4) {
                  unsigned int v381 = *(unsigned __int16 *)(a2 + v380);
                }
                else {
                  unsigned int v381 = *(unsigned __int8 *)(a2 + v380);
                }
                *(unsigned char *)(result + 34) |= (v381 >> v379) & 0xF;
                unint64_t v386 = *a3 + 31;
                unint64_t v387 = v386 & 7;
                unint64_t v388 = v386 >> 3;
                if (v387 > 4) {
                  unsigned int v389 = *(unsigned __int16 *)(a2 + v388);
                }
                else {
                  unsigned int v389 = *(unsigned __int8 *)(a2 + v388);
                }
                *(unsigned char *)(result + 27) |= (v389 >> v387) & 0xF;
                unint64_t v394 = *a3 + 35;
                unint64_t v395 = v394 & 7;
                unint64_t v396 = v394 >> 3;
                if (v395 > 4) {
                  unsigned int v397 = *(unsigned __int16 *)(a2 + v396);
                }
                else {
                  unsigned int v397 = *(unsigned __int8 *)(a2 + v396);
                }
                *(unsigned char *)(result + 35) |= (v397 >> v395) & 0xF;
                unint64_t v402 = *a3 + 39;
                unint64_t v403 = v402 & 7;
                unint64_t v404 = v402 >> 3;
                if (v403 > 4) {
                  unsigned int v405 = *(unsigned __int16 *)(a2 + v404);
                }
                else {
                  unsigned int v405 = *(unsigned __int8 *)(a2 + v404);
                }
                *(unsigned char *)(result + 28) |= (v405 >> v403) & 0xF;
                unint64_t v410 = *a3 + 43;
                unint64_t v411 = v410 & 7;
                unint64_t v412 = v410 >> 3;
                if (v411 > 4) {
                  unsigned int v413 = *(unsigned __int16 *)(a2 + v412);
                }
                else {
                  unsigned int v413 = *(unsigned __int8 *)(a2 + v412);
                }
                *(unsigned char *)(result + 36) |= (v413 >> v411) & 0xF;
                unint64_t v418 = *a3 + 47;
                unint64_t v419 = v418 & 7;
                unint64_t v420 = v418 >> 3;
                if (v419 > 4) {
                  unsigned int v421 = *(unsigned __int16 *)(a2 + v420);
                }
                else {
                  unsigned int v421 = *(unsigned __int8 *)(a2 + v420);
                }
                *(unsigned char *)(result + 29) |= (v421 >> v419) & 0xF;
                unint64_t v426 = *a3 + 51;
                unint64_t v427 = v426 & 7;
                unint64_t v428 = v426 >> 3;
                if (v427 > 4) {
                  unsigned int v429 = *(unsigned __int16 *)(a2 + v428);
                }
                else {
                  unsigned int v429 = *(unsigned __int8 *)(a2 + v428);
                }
                *(unsigned char *)(result + 37) |= (v429 >> v427) & 0xF;
                unint64_t v434 = *a3 + 55;
                unint64_t v435 = v434 & 7;
                unint64_t v436 = v434 >> 3;
                if (v435 > 4) {
                  unsigned int v437 = *(unsigned __int16 *)(a2 + v436);
                }
                else {
                  unsigned int v437 = *(unsigned __int8 *)(a2 + v436);
                }
                *(unsigned char *)(result + 30) |= (v437 >> v435) & 0xF;
                unint64_t v442 = *a3 + 59;
                unint64_t v443 = v442 & 7;
                unint64_t v444 = v442 >> 3;
                if (v443 > 4) {
                  unsigned int v445 = *(unsigned __int16 *)(a2 + v444);
                }
                else {
                  unsigned int v445 = *(unsigned __int8 *)(a2 + v444);
                }
                *(unsigned char *)(result + 38) |= (v445 >> v443) & 0xF;
                unint64_t v450 = *a3 + 63;
                unint64_t v451 = v450 & 7;
                unint64_t v452 = v450 >> 3;
                if (v451 > 4) {
                  unsigned int v453 = *(unsigned __int16 *)(a2 + v452);
                }
                else {
                  unsigned int v453 = *(unsigned __int8 *)(a2 + v452);
                }
                *(unsigned char *)(result + 31) |= (v453 >> v451) & 0xF;
                unint64_t v458 = *a3 + 67;
                unint64_t v459 = v458 & 7;
                unint64_t v460 = v458 >> 3;
                if (v459 > 4) {
                  unsigned int v461 = *(unsigned __int16 *)(a2 + v460);
                }
                else {
                  unsigned int v461 = *(unsigned __int8 *)(a2 + v460);
                }
                *(unsigned char *)(result + 39) |= (v461 >> v459) & 0xF;
                unint64_t v466 = *a3 + 71;
                unint64_t v467 = v466 & 7;
                unint64_t v468 = v466 >> 3;
                if (v467 > 4) {
                  unsigned int v469 = *(unsigned __int16 *)(a2 + v468);
                }
                else {
                  unsigned int v469 = *(unsigned __int8 *)(a2 + v468);
                }
                *(unsigned char *)(result + 32) |= (v469 >> v467) & 0xF;
                unint64_t v474 = *a3 + 75;
                unint64_t v475 = v474 & 7;
                unint64_t v476 = v474 >> 3;
                if (v475 > 4) {
                  unsigned int v477 = *(unsigned __int16 *)(a2 + v476);
                }
                else {
                  unsigned int v477 = *(unsigned __int8 *)(a2 + v476);
                }
                *(unsigned char *)(result + 40) |= (v477 >> v475) & 0xF;
                uint64_t v22 = 79;
              }
              break;
            case 3:
              *(_DWORD *)(result + 20) = 2;
              unint64_t v159 = *a3 + 14;
              unint64_t v160 = v159 & 7;
              unint64_t v161 = v159 >> 3;
              if (v160 == 7) {
                unsigned int v162 = ((*(unsigned __int8 *)(a2 + v161 + 2) << 16) | (*(unsigned __int8 *)(a2 + v161 + 1) << 8) | *(unsigned __int8 *)(a2 + v161)) >> 7;
              }
              else {
                unsigned int v162 = *(unsigned __int16 *)(a2 + v161) >> v160;
              }
              *(_WORD *)(result + 24) |= v162 & 0x3FF;
              uint64_t v206 = *a3 & 7;
              unint64_t v207 = (unint64_t)(*a3 + 24) >> 3;
              if (v206 == 7) {
                unsigned int v208 = ((*(unsigned __int8 *)(a2 + v207 + 2) << 16) | (*(unsigned __int8 *)(a2 + v207 + 1) << 8) | *(unsigned __int8 *)(a2 + v207)) >> 7;
              }
              else {
                unsigned int v208 = *(unsigned __int16 *)(a2 + v207) >> v206;
              }
              *(_WORD *)(result + 26) |= v208 & 0x3FF;
              unint64_t v218 = *a3 + 34;
              unint64_t v219 = v218 & 7;
              unint64_t v220 = v218 >> 3;
              if (v219 > 5) {
                unsigned int v221 = (*(unsigned __int8 *)(a2 + v220 + 2) << 16) | (*(unsigned __int8 *)(a2 + v220 + 1) << 8) | *(unsigned __int8 *)(a2 + v220);
              }
              else {
                unsigned int v221 = *(unsigned __int16 *)(a2 + v220);
              }
              *(_WORD *)(result + 28) |= (v221 >> v219) & 0x7FF;
              unint64_t v226 = *a3 + 45;
              unsigned int v227 = *(unsigned __int8 *)(a2 + (v226 >> 3));
              char v228 = v226 & 7;
              char v229 = *(unsigned char *)(result + 30);
              if ((v227 >> v228))
              {
                *(unsigned char *)(result + 30) = v229 | 1;
                unint64_t v230 = *a3 + 46;
                unint64_t v231 = v230 & 7;
                unint64_t v232 = v230 >> 3;
                if (v231 > 4) {
                  unsigned int v233 = *(unsigned __int16 *)(a2 + v232);
                }
                else {
                  unsigned int v233 = *(unsigned __int8 *)(a2 + v232);
                }
                *(unsigned char *)(result + 31) |= (v233 >> v231) & 0xF;
                unint64_t v274 = *a3 + 50;
                unint64_t v275 = v274 & 7;
                unint64_t v276 = v274 >> 3;
                if (v275 > 4) {
                  unsigned int v277 = *(unsigned __int16 *)(a2 + v276);
                }
                else {
                  unsigned int v277 = *(unsigned __int8 *)(a2 + v276);
                }
                *(unsigned char *)(result + 39) |= (v277 >> v275) & 0xF;
                uint64_t v22 = 54;
              }
              else
              {
                *(unsigned char *)(result + 30) = v229 & 0xFE;
                unint64_t v249 = *a3 + 46;
                unint64_t v250 = v249 & 7;
                unint64_t v251 = v249 >> 3;
                if (v250 > 4) {
                  unsigned int v252 = *(unsigned __int16 *)(a2 + v251);
                }
                else {
                  unsigned int v252 = *(unsigned __int8 *)(a2 + v251);
                }
                *(unsigned char *)(result + 31) |= (v252 >> v250) & 0xF;
                unint64_t v366 = *a3 + 50;
                unint64_t v367 = v366 & 7;
                unint64_t v368 = v366 >> 3;
                if (v367 > 4) {
                  unsigned int v369 = *(unsigned __int16 *)(a2 + v368);
                }
                else {
                  unsigned int v369 = *(unsigned __int8 *)(a2 + v368);
                }
                *(unsigned char *)(result + 39) |= (v369 >> v367) & 0xF;
                unint64_t v374 = *a3 + 54;
                unint64_t v375 = v374 & 7;
                unint64_t v376 = v374 >> 3;
                if (v375 > 4) {
                  unsigned int v377 = *(unsigned __int16 *)(a2 + v376);
                }
                else {
                  unsigned int v377 = *(unsigned __int8 *)(a2 + v376);
                }
                *(unsigned char *)(result + 32) |= (v377 >> v375) & 0xF;
                unint64_t v382 = *a3 + 58;
                unint64_t v383 = v382 & 7;
                unint64_t v384 = v382 >> 3;
                if (v383 > 4) {
                  unsigned int v385 = *(unsigned __int16 *)(a2 + v384);
                }
                else {
                  unsigned int v385 = *(unsigned __int8 *)(a2 + v384);
                }
                *(unsigned char *)(result + 40) |= (v385 >> v383) & 0xF;
                unint64_t v390 = *a3 + 62;
                unint64_t v391 = v390 & 7;
                unint64_t v392 = v390 >> 3;
                if (v391 > 4) {
                  unsigned int v393 = *(unsigned __int16 *)(a2 + v392);
                }
                else {
                  unsigned int v393 = *(unsigned __int8 *)(a2 + v392);
                }
                *(unsigned char *)(result + 33) |= (v393 >> v391) & 0xF;
                unint64_t v398 = *a3 + 66;
                unint64_t v399 = v398 & 7;
                unint64_t v400 = v398 >> 3;
                if (v399 > 4) {
                  unsigned int v401 = *(unsigned __int16 *)(a2 + v400);
                }
                else {
                  unsigned int v401 = *(unsigned __int8 *)(a2 + v400);
                }
                *(unsigned char *)(result + 41) |= (v401 >> v399) & 0xF;
                unint64_t v406 = *a3 + 70;
                unint64_t v407 = v406 & 7;
                unint64_t v408 = v406 >> 3;
                if (v407 > 4) {
                  unsigned int v409 = *(unsigned __int16 *)(a2 + v408);
                }
                else {
                  unsigned int v409 = *(unsigned __int8 *)(a2 + v408);
                }
                *(unsigned char *)(result + 34) |= (v409 >> v407) & 0xF;
                unint64_t v414 = *a3 + 74;
                unint64_t v415 = v414 & 7;
                unint64_t v416 = v414 >> 3;
                if (v415 > 4) {
                  unsigned int v417 = *(unsigned __int16 *)(a2 + v416);
                }
                else {
                  unsigned int v417 = *(unsigned __int8 *)(a2 + v416);
                }
                *(unsigned char *)(result + 42) |= (v417 >> v415) & 0xF;
                unint64_t v422 = *a3 + 78;
                unint64_t v423 = v422 & 7;
                unint64_t v424 = v422 >> 3;
                if (v423 > 4) {
                  unsigned int v425 = *(unsigned __int16 *)(a2 + v424);
                }
                else {
                  unsigned int v425 = *(unsigned __int8 *)(a2 + v424);
                }
                *(unsigned char *)(result + 35) |= (v425 >> v423) & 0xF;
                unint64_t v430 = *a3 + 82;
                unint64_t v431 = v430 & 7;
                unint64_t v432 = v430 >> 3;
                if (v431 > 4) {
                  unsigned int v433 = *(unsigned __int16 *)(a2 + v432);
                }
                else {
                  unsigned int v433 = *(unsigned __int8 *)(a2 + v432);
                }
                *(unsigned char *)(result + 43) |= (v433 >> v431) & 0xF;
                unint64_t v438 = *a3 + 86;
                unint64_t v439 = v438 & 7;
                unint64_t v440 = v438 >> 3;
                if (v439 > 4) {
                  unsigned int v441 = *(unsigned __int16 *)(a2 + v440);
                }
                else {
                  unsigned int v441 = *(unsigned __int8 *)(a2 + v440);
                }
                *(unsigned char *)(result + 36) |= (v441 >> v439) & 0xF;
                unint64_t v446 = *a3 + 90;
                unint64_t v447 = v446 & 7;
                unint64_t v448 = v446 >> 3;
                if (v447 > 4) {
                  unsigned int v449 = *(unsigned __int16 *)(a2 + v448);
                }
                else {
                  unsigned int v449 = *(unsigned __int8 *)(a2 + v448);
                }
                *(unsigned char *)(result + 44) |= (v449 >> v447) & 0xF;
                unint64_t v454 = *a3 + 94;
                unint64_t v455 = v454 & 7;
                unint64_t v456 = v454 >> 3;
                if (v455 > 4) {
                  unsigned int v457 = *(unsigned __int16 *)(a2 + v456);
                }
                else {
                  unsigned int v457 = *(unsigned __int8 *)(a2 + v456);
                }
                *(unsigned char *)(result + 37) |= (v457 >> v455) & 0xF;
                unint64_t v462 = *a3 + 98;
                unint64_t v463 = v462 & 7;
                unint64_t v464 = v462 >> 3;
                if (v463 > 4) {
                  unsigned int v465 = *(unsigned __int16 *)(a2 + v464);
                }
                else {
                  unsigned int v465 = *(unsigned __int8 *)(a2 + v464);
                }
                *(unsigned char *)(result + 45) |= (v465 >> v463) & 0xF;
                unint64_t v470 = *a3 + 102;
                unint64_t v471 = v470 & 7;
                unint64_t v472 = v470 >> 3;
                if (v471 > 4) {
                  unsigned int v473 = *(unsigned __int16 *)(a2 + v472);
                }
                else {
                  unsigned int v473 = *(unsigned __int8 *)(a2 + v472);
                }
                *(unsigned char *)(result + 38) |= (v473 >> v471) & 0xF;
                unint64_t v478 = *a3 + 106;
                unint64_t v479 = v478 & 7;
                unint64_t v480 = v478 >> 3;
                if (v479 > 4) {
                  unsigned int v481 = *(unsigned __int16 *)(a2 + v480);
                }
                else {
                  unsigned int v481 = *(unsigned __int8 *)(a2 + v480);
                }
                *(unsigned char *)(result + 46) |= (v481 >> v479) & 0xF;
                uint64_t v22 = 110;
              }
              break;
            default:
              *(_DWORD *)(result + 20) = 1;
              unint64_t v111 = *a3 + 14;
              unint64_t v112 = v111 & 7;
              unint64_t v113 = v111 >> 3;
              if (v112 > 4) {
                unsigned __int16 v114 = *(_WORD *)(a2 + v113);
              }
              else {
                unsigned __int16 v114 = *(unsigned __int8 *)(a2 + v113);
              }
              int v201 = *(unsigned __int16 *)(result + 24) | (v114 >> v112) & 0xF;
              *(_WORD *)(result + 24) = v201;
              unint64_t v202 = *a3 + 18;
              unint64_t v203 = v202 & 7;
              unint64_t v204 = v202 >> 3;
              if (v203 > 4) {
                unsigned __int16 v205 = *(_WORD *)(a2 + v204);
              }
              else {
                unsigned __int16 v205 = *(unsigned __int8 *)(a2 + v204);
              }
              int v213 = (16 * ((v205 >> v203) & 0xF)) | v201;
              *(_WORD *)(result + 24) = v213;
              unint64_t v214 = *a3 + 22;
              unint64_t v215 = v214 & 7;
              unint64_t v216 = v214 >> 3;
              if (v215 > 4) {
                unsigned __int16 v217 = *(_WORD *)(a2 + v216);
              }
              else {
                unsigned __int16 v217 = *(unsigned __int8 *)(a2 + v216);
              }
              *(_WORD *)(result + 24) = (((v217 >> v215) & 0xF) << 8) | v213;
              if ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 26) >> 3)) >> ((*(unsigned char *)a3 + 26) & 7)))
              {
                *(_DWORD *)(result + 28) = 1;
                unint64_t v222 = *a3 + 27;
                unint64_t v223 = v222 & 7;
                unint64_t v224 = v222 >> 3;
                if (v223 > 3) {
                  unsigned int v225 = *(unsigned __int16 *)(a2 + v224);
                }
                else {
                  unsigned int v225 = *(unsigned __int8 *)(a2 + v224);
                }
                *(unsigned char *)(result + 32) |= (v225 >> v223) & 0x1F;
                unint64_t v271 = *a3 & 7;
                unint64_t v272 = (unint64_t)(*a3 + 32) >> 3;
                if (v271 > 4) {
                  unsigned int v273 = (*(unsigned __int8 *)(a2 + v272 + 2) << 16) | (*(unsigned __int8 *)(a2 + v272 + 1) << 8) | *(unsigned __int8 *)(a2 + v272);
                }
                else {
                  unsigned int v273 = *(unsigned __int16 *)(a2 + v272);
                }
                int v282 = *(_DWORD *)(result + 34) | (v273 >> v271) & 0xFFF;
                *(_DWORD *)(result + 34) = v282;
                unint64_t v283 = *a3 + 44;
                unint64_t v284 = v283 & 7;
                unint64_t v285 = v283 >> 3;
                if (v284 > 4) {
                  unsigned int v286 = *(unsigned __int16 *)(a2 + v285);
                }
                else {
                  unsigned int v286 = *(unsigned __int8 *)(a2 + v285);
                }
                int v291 = v282 | (((v286 >> v284) & 0xF) << 12);
                *(_DWORD *)(result + 34) = v291;
                unint64_t v292 = *a3 & 7;
                unint64_t v293 = (unint64_t)(*a3 + 48) >> 3;
                if (v292 > 4) {
                  unsigned int v294 = *(unsigned __int16 *)(a2 + v293);
                }
                else {
                  unsigned int v294 = *(unsigned __int8 *)(a2 + v293);
                }
                *(_DWORD *)(result + 34) = v291 | (((v294 >> v292) & 0xF) << 16);
                uint64_t v22 = 52;
              }
              else
              {
                *(_DWORD *)(result + 28) = 0;
                unint64_t v245 = *a3 + 27;
                unint64_t v246 = v245 & 7;
                unint64_t v247 = v245 >> 3;
                if (v246 > 3) {
                  unsigned int v248 = *(unsigned __int16 *)(a2 + v247);
                }
                else {
                  unsigned int v248 = *(unsigned __int8 *)(a2 + v247);
                }
                *(unsigned char *)(result + 32) |= (v248 >> v246) & 0x1F;
                uint64_t v22 = 32;
              }
              break;
          }
          break;
        case 2:
          *(_WORD *)(result + 8) = 6;
          *(void *)uint64_t result = 0x900000009;
          unint64_t v60 = *a3 + 4;
          unint64_t v61 = v60 >> 3;
          unint64_t v62 = v60 & 7;
          if (v62) {
            int v63 = *(unsigned __int16 *)(a2 + v61) >> v62;
          }
          else {
            LOBYTE(v63) = *(unsigned char *)(a2 + v61);
          }
          *(unsigned char *)(result + 16) |= v63;
          unint64_t v115 = *a3 + 12;
          unint64_t v116 = v115 >> 3;
          unint64_t v117 = v115 & 7;
          if (v117)
          {
            unint64_t v118 = (unsigned __int8 *)(a2 + v116);
            unint64_t v119 = (((unint64_t)v118[4] << 32) | ((unint64_t)v118[3] << 24) | ((unint64_t)v118[2] << 16) | ((unint64_t)v118[1] << 8) | *v118) >> v117;
          }
          else
          {
            LODWORD(v119) = *(_DWORD *)(a2 + v116);
          }
          *(_DWORD *)(result + 20) |= v119;
          uint64_t v22 = 44;
          break;
        case 3:
          *(_WORD *)(result + 8) = 62;
          *(void *)uint64_t result = 0xA0000000ALL;
          unint64_t v64 = *a3 + 4;
          unint64_t v65 = v64 & 7;
          unint64_t v66 = v64 >> 3;
          if (v65 > 4) {
            unsigned __int16 v67 = *(_WORD *)(a2 + v66);
          }
          else {
            unsigned __int16 v67 = *(unsigned __int8 *)(a2 + v66);
          }
          switch((v67 >> v65) & 0xF)
          {
            case 1:
              *(_DWORD *)(result + 16) = 1;
              unint64_t v299 = *a3 & 7;
              unint64_t v300 = (unint64_t)(*a3 + 8) >> 3;
              if (v299 > 4)
              {
                int v302 = (*(unsigned __int8 *)(v300 + a2 + 3) << 24) | (*(unsigned __int8 *)(v300 + a2 + 2) << 16);
                int v301 = *(unsigned __int8 *)(v300 + a2 + 1) << 8;
              }
              else
              {
                int v301 = *(unsigned __int8 *)(v300 + a2 + 2) << 16;
                int v302 = *(unsigned __int8 *)(v300 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 24) |= ((v302 | v301 | *(unsigned __int8 *)(a2 + v300)) >> v299) & 0xFFFFF;
              unint64_t v487 = *a3 + 28;
              unint64_t v488 = v487 & 7;
              unint64_t v489 = v487 >> 3;
              if (v488 > 4)
              {
                int v491 = (*(unsigned __int8 *)(v489 + a2 + 3) << 24) | (*(unsigned __int8 *)(v489 + a2 + 2) << 16);
                int v490 = *(unsigned __int8 *)(v489 + a2 + 1) << 8;
              }
              else
              {
                int v490 = *(unsigned __int8 *)(v489 + a2 + 2) << 16;
                int v491 = *(unsigned __int8 *)(v489 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 28) |= ((v491 | v490 | *(unsigned __int8 *)(a2 + v489)) >> v488) & 0xFFFFF;
              unint64_t v547 = *a3 & 7;
              unint64_t v548 = (unint64_t)(*a3 + 48) >> 3;
              if (v547 > 4)
              {
                int v550 = (*(unsigned __int8 *)(v548 + a2 + 3) << 24) | (*(unsigned __int8 *)(v548 + a2 + 2) << 16);
                int v549 = *(unsigned __int8 *)(v548 + a2 + 1) << 8;
              }
              else
              {
                int v549 = *(unsigned __int8 *)(v548 + a2 + 2) << 16;
                int v550 = *(unsigned __int8 *)(v548 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 32) |= ((v550 | v549 | *(unsigned __int8 *)(a2 + v548)) >> v547) & 0xFFFFF;
              unint64_t v599 = *a3 + 68;
              unint64_t v600 = v599 & 7;
              unint64_t v601 = v599 >> 3;
              if (v600 > 4)
              {
                int v603 = (*(unsigned __int8 *)(v601 + a2 + 3) << 24) | (*(unsigned __int8 *)(v601 + a2 + 2) << 16);
                int v602 = *(unsigned __int8 *)(v601 + a2 + 1) << 8;
              }
              else
              {
                int v602 = *(unsigned __int8 *)(v601 + a2 + 2) << 16;
                int v603 = *(unsigned __int8 *)(v601 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 36) |= ((v603 | v602 | *(unsigned __int8 *)(a2 + v601)) >> v600) & 0xFFFFF;
              unint64_t v641 = *a3 & 7;
              unint64_t v642 = (unint64_t)(*a3 + 88) >> 3;
              if (v641 > 4)
              {
                int v644 = (*(unsigned __int8 *)(v642 + a2 + 3) << 24) | (*(unsigned __int8 *)(v642 + a2 + 2) << 16);
                int v643 = *(unsigned __int8 *)(v642 + a2 + 1) << 8;
              }
              else
              {
                int v643 = *(unsigned __int8 *)(v642 + a2 + 2) << 16;
                int v644 = *(unsigned __int8 *)(v642 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 40) |= ((v644 | v643 | *(unsigned __int8 *)(a2 + v642)) >> v641) & 0xFFFFF;
              unint64_t v681 = *a3 + 108;
              unint64_t v682 = v681 & 7;
              unint64_t v683 = v681 >> 3;
              if (v682 > 4)
              {
                int v685 = (*(unsigned __int8 *)(v683 + a2 + 3) << 24) | (*(unsigned __int8 *)(v683 + a2 + 2) << 16);
                int v684 = *(unsigned __int8 *)(v683 + a2 + 1) << 8;
              }
              else
              {
                int v684 = *(unsigned __int8 *)(v683 + a2 + 2) << 16;
                int v685 = *(unsigned __int8 *)(v683 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 44) |= ((v685 | v684 | *(unsigned __int8 *)(a2 + v683)) >> v682) & 0xFFFFF;
              unint64_t v718 = *a3 & 7;
              unint64_t v719 = (unint64_t)(*a3 + 128) >> 3;
              if (v718 > 4)
              {
                int v721 = (*(unsigned __int8 *)(v719 + a2 + 3) << 24) | (*(unsigned __int8 *)(v719 + a2 + 2) << 16);
                int v720 = *(unsigned __int8 *)(v719 + a2 + 1) << 8;
              }
              else
              {
                int v720 = *(unsigned __int8 *)(v719 + a2 + 2) << 16;
                int v721 = *(unsigned __int8 *)(v719 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 48) |= ((v721 | v720 | *(unsigned __int8 *)(a2 + v719)) >> v718) & 0xFFFFF;
              unint64_t v756 = (*(unsigned char *)a3 - 108) & 7;
              unint64_t v757 = (unint64_t)(*a3 + 148) >> 3;
              if (v756 > 4)
              {
                int v759 = (*(unsigned __int8 *)(v757 + a2 + 3) << 24) | (*(unsigned __int8 *)(v757 + a2 + 2) << 16);
                int v758 = *(unsigned __int8 *)(v757 + a2 + 1) << 8;
              }
              else
              {
                int v758 = *(unsigned __int8 *)(v757 + a2 + 2) << 16;
                int v759 = *(unsigned __int8 *)(v757 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 52) |= ((v759 | v758 | *(unsigned __int8 *)(a2 + v757)) >> v756) & 0xFFFFF;
              unint64_t v792 = (unint64_t)(*a3 + 168) >> 3;
              uint64_t v793 = *a3 & 7;
              if (v793) {
                unsigned int v794 = ((*(unsigned __int8 *)(a2 + v792 + 2) << 16) | (*(unsigned __int8 *)(a2 + v792 + 1) << 8) | *(unsigned __int8 *)(a2 + v792)) >> v793;
              }
              else {
                LOWORD(v794) = *(_WORD *)(a2 + v792);
              }
              int v1148 = *(_DWORD *)(result + 56) | (unsigned __int16)v794;
              *(_DWORD *)(result + 56) = v1148;
              unint64_t v1149 = (unint64_t)(*a3 + 184) >> 3;
              uint64_t v1150 = *a3 & 7;
              if (v1150) {
                unsigned int v1151 = ((*(unsigned __int8 *)(a2 + v1149 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1149 + 1) << 8) | *(unsigned __int8 *)(a2 + v1149)) >> v1150;
              }
              else {
                unsigned int v1151 = *(unsigned __int16 *)(a2 + v1149);
              }
              *(_DWORD *)(result + 56) = v1148 | (v1151 << 16);
              uint64_t v22 = 200;
              break;
            case 2:
              *(_DWORD *)(result + 16) = 2;
              uint64_t v303 = *a3 & 7;
              unint64_t v304 = (unint64_t)(*a3 + 8) >> 3;
              if (v303 == 7) {
                int v305 = *(unsigned __int16 *)(a2 + v304) >> 7;
              }
              else {
                int v305 = *(unsigned __int8 *)(a2 + v304) >> v303;
              }
              *(unsigned char *)(result + 24) |= v305 & 3;
              unint64_t v492 = *a3 + 10;
              unint64_t v493 = v492 & 7;
              unint64_t v494 = v492 >> 3;
              if (v493 > 1) {
                unsigned int v495 = (*(unsigned __int8 *)(a2 + v494 + 2) << 16) | (*(unsigned __int8 *)(a2 + v494 + 1) << 8) | *(unsigned __int8 *)(a2 + v494);
              }
              else {
                unsigned int v495 = *(unsigned __int16 *)(a2 + v494);
              }
              *(_WORD *)(result + 26) |= (v495 >> v493) & 0x7FFF;
              unint64_t v551 = *a3 + 25;
              unint64_t v552 = v551 & 7;
              unint64_t v553 = v551 >> 3;
              if (v552 > 1) {
                unsigned int v554 = (*(unsigned __int8 *)(a2 + v553 + 2) << 16) | (*(unsigned __int8 *)(a2 + v553 + 1) << 8) | *(unsigned __int8 *)(a2 + v553);
              }
              else {
                unsigned int v554 = *(unsigned __int16 *)(a2 + v553);
              }
              *(_WORD *)(result + 28) |= (v554 >> v552) & 0x7FFF;
              unint64_t v604 = *a3 & 7;
              unint64_t v605 = (unint64_t)(*a3 + 40) >> 3;
              if (v604 > 1) {
                unsigned int v606 = (*(unsigned __int8 *)(a2 + v605 + 2) << 16) | (*(unsigned __int8 *)(a2 + v605 + 1) << 8) | *(unsigned __int8 *)(a2 + v605);
              }
              else {
                unsigned int v606 = *(unsigned __int16 *)(a2 + v605);
              }
              *(_WORD *)(result + 30) |= (v606 >> v604) & 0x7FFF;
              unint64_t v645 = *a3 + 55;
              unint64_t v646 = v645 & 7;
              unint64_t v647 = v645 >> 3;
              if (v646 > 1) {
                unsigned int v648 = (*(unsigned __int8 *)(a2 + v647 + 2) << 16) | (*(unsigned __int8 *)(a2 + v647 + 1) << 8) | *(unsigned __int8 *)(a2 + v647);
              }
              else {
                unsigned int v648 = *(unsigned __int16 *)(a2 + v647);
              }
              *(_WORD *)(result + 32) |= (v648 >> v646) & 0x7FFF;
              unint64_t v686 = *a3 + 70;
              unint64_t v687 = v686 & 7;
              unint64_t v688 = v686 >> 3;
              if (v687 > 1) {
                unsigned int v689 = (*(unsigned __int8 *)(a2 + v688 + 2) << 16) | (*(unsigned __int8 *)(a2 + v688 + 1) << 8) | *(unsigned __int8 *)(a2 + v688);
              }
              else {
                unsigned int v689 = *(unsigned __int16 *)(a2 + v688);
              }
              *(_WORD *)(result + 34) |= (v689 >> v687) & 0x7FFF;
              unint64_t v722 = *a3 + 85;
              unint64_t v723 = v722 & 7;
              unint64_t v724 = v722 >> 3;
              if (v723 > 1) {
                unsigned int v725 = (*(unsigned __int8 *)(a2 + v724 + 2) << 16) | (*(unsigned __int8 *)(a2 + v724 + 1) << 8) | *(unsigned __int8 *)(a2 + v724);
              }
              else {
                unsigned int v725 = *(unsigned __int16 *)(a2 + v724);
              }
              *(_WORD *)(result + 36) |= (v725 >> v723) & 0x7FFF;
              unint64_t v760 = *a3 + 100;
              unint64_t v761 = v760 & 7;
              unint64_t v762 = v760 >> 3;
              if (v761 > 1) {
                unsigned int v763 = (*(unsigned __int8 *)(a2 + v762 + 2) << 16) | (*(unsigned __int8 *)(a2 + v762 + 1) << 8) | *(unsigned __int8 *)(a2 + v762);
              }
              else {
                unsigned int v763 = *(unsigned __int16 *)(a2 + v762);
              }
              *(_WORD *)(result + 38) |= (v763 >> v761) & 0x7FFF;
              unint64_t v795 = *a3 + 115;
              unint64_t v796 = v795 & 7;
              unint64_t v797 = v795 >> 3;
              if (v796 > 1) {
                unsigned int v798 = (*(unsigned __int8 *)(a2 + v797 + 2) << 16) | (*(unsigned __int8 *)(a2 + v797 + 1) << 8) | *(unsigned __int8 *)(a2 + v797);
              }
              else {
                unsigned int v798 = *(unsigned __int16 *)(a2 + v797);
              }
              *(_WORD *)(result + 40) |= (v798 >> v796) & 0x7FFF;
              unint64_t v821 = (*(unsigned char *)a3 - 126) & 7;
              unint64_t v822 = (unint64_t)(*a3 + 130) >> 3;
              if (v821 > 1) {
                unsigned int v823 = (*(unsigned __int8 *)(a2 + v822 + 2) << 16) | (*(unsigned __int8 *)(a2 + v822 + 1) << 8) | *(unsigned __int8 *)(a2 + v822);
              }
              else {
                unsigned int v823 = *(unsigned __int16 *)(a2 + v822);
              }
              *(_WORD *)(result + 42) |= (v823 >> v821) & 0x7FFF;
              unint64_t v843 = (*(unsigned char *)a3 - 111) & 7;
              unint64_t v844 = (unint64_t)(*a3 + 145) >> 3;
              if (v843 > 1) {
                unsigned int v845 = (*(unsigned __int8 *)(a2 + v844 + 2) << 16) | (*(unsigned __int8 *)(a2 + v844 + 1) << 8) | *(unsigned __int8 *)(a2 + v844);
              }
              else {
                unsigned int v845 = *(unsigned __int16 *)(a2 + v844);
              }
              *(_WORD *)(result + 44) |= (v845 >> v843) & 0x7FFF;
              unint64_t v860 = *a3 & 7;
              unint64_t v861 = (unint64_t)(*a3 + 160) >> 3;
              if (v860 > 1) {
                unsigned int v862 = (*(unsigned __int8 *)(a2 + v861 + 2) << 16) | (*(unsigned __int8 *)(a2 + v861 + 1) << 8) | *(unsigned __int8 *)(a2 + v861);
              }
              else {
                unsigned int v862 = *(unsigned __int16 *)(a2 + v861);
              }
              *(_WORD *)(result + 46) |= (v862 >> v860) & 0x7FFF;
              unint64_t v877 = (*(unsigned char *)a3 - 81) & 7;
              unint64_t v878 = (unint64_t)(*a3 + 175) >> 3;
              if (v877 > 1) {
                unsigned int v879 = (*(unsigned __int8 *)(a2 + v878 + 2) << 16) | (*(unsigned __int8 *)(a2 + v878 + 1) << 8) | *(unsigned __int8 *)(a2 + v878);
              }
              else {
                unsigned int v879 = *(unsigned __int16 *)(a2 + v878);
              }
              *(_WORD *)(result + 48) |= (v879 >> v877) & 0x7FFF;
              unint64_t v894 = (*(unsigned char *)a3 - 66) & 7;
              unint64_t v895 = (unint64_t)(*a3 + 190) >> 3;
              if (v894 > 1) {
                unsigned int v896 = (*(unsigned __int8 *)(a2 + v895 + 2) << 16) | (*(unsigned __int8 *)(a2 + v895 + 1) << 8) | *(unsigned __int8 *)(a2 + v895);
              }
              else {
                unsigned int v896 = *(unsigned __int16 *)(a2 + v895);
              }
              *(_WORD *)(result + 50) |= (v896 >> v894) & 0x7FFF;
              unint64_t v911 = (*(unsigned char *)a3 - 51) & 7;
              unint64_t v912 = (unint64_t)(*a3 + 205) >> 3;
              if (v911 > 1) {
                unsigned int v913 = (*(unsigned __int8 *)(a2 + v912 + 2) << 16) | (*(unsigned __int8 *)(a2 + v912 + 1) << 8) | *(unsigned __int8 *)(a2 + v912);
              }
              else {
                unsigned int v913 = *(unsigned __int16 *)(a2 + v912);
              }
              *(_WORD *)(result + 52) |= (v913 >> v911) & 0x7FFF;
              unint64_t v929 = (*(unsigned char *)a3 - 36) & 7;
              unint64_t v930 = (unint64_t)(*a3 + 220) >> 3;
              if (v929 > 1) {
                unsigned int v931 = (*(unsigned __int8 *)(a2 + v930 + 2) << 16) | (*(unsigned __int8 *)(a2 + v930 + 1) << 8) | *(unsigned __int8 *)(a2 + v930);
              }
              else {
                unsigned int v931 = *(unsigned __int16 *)(a2 + v930);
              }
              *(_WORD *)(result + 54) |= (v931 >> v929) & 0x7FFF;
              unint64_t v947 = (*(unsigned char *)a3 - 21) & 7;
              unint64_t v948 = (unint64_t)(*a3 + 235) >> 3;
              if (v947 > 1) {
                unsigned int v949 = (*(unsigned __int8 *)(a2 + v948 + 2) << 16) | (*(unsigned __int8 *)(a2 + v948 + 1) << 8) | *(unsigned __int8 *)(a2 + v948);
              }
              else {
                unsigned int v949 = *(unsigned __int16 *)(a2 + v948);
              }
              *(_WORD *)(result + 56) |= (v949 >> v947) & 0x7FFF;
              unint64_t v967 = (*(unsigned char *)a3 - 6) & 7;
              unint64_t v968 = (unint64_t)(*a3 + 250) >> 3;
              if (v967 > 1) {
                unsigned int v969 = (*(unsigned __int8 *)(a2 + v968 + 2) << 16) | (*(unsigned __int8 *)(a2 + v968 + 1) << 8) | *(unsigned __int8 *)(a2 + v968);
              }
              else {
                unsigned int v969 = *(unsigned __int16 *)(a2 + v968);
              }
              *(_WORD *)(result + 58) |= (v969 >> v967) & 0x7FFF;
              unint64_t v983 = *a3 + 265;
              unint64_t v984 = v983 & 7;
              unint64_t v985 = v983 >> 3;
              if (v984 > 1) {
                unsigned int v986 = (*(unsigned __int8 *)(a2 + v985 + 2) << 16) | (*(unsigned __int8 *)(a2 + v985 + 1) << 8) | *(unsigned __int8 *)(a2 + v985);
              }
              else {
                unsigned int v986 = *(unsigned __int16 *)(a2 + v985);
              }
              *(_WORD *)(result + 60) |= (v986 >> v984) & 0x7FFF;
              unint64_t v1000 = *a3 & 7;
              unint64_t v1001 = (unint64_t)(*a3 + 280) >> 3;
              if (v1000 > 1) {
                unsigned int v1002 = (*(unsigned __int8 *)(a2 + v1001 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1001 + 1) << 8) | *(unsigned __int8 *)(a2 + v1001);
              }
              else {
                unsigned int v1002 = *(unsigned __int16 *)(a2 + v1001);
              }
              *(_WORD *)(result + 62) |= (v1002 >> v1000) & 0x7FFF;
              unint64_t v1011 = *a3 + 295;
              unint64_t v1012 = v1011 & 7;
              unint64_t v1013 = v1011 >> 3;
              if (v1012 > 1) {
                unsigned int v1014 = (*(unsigned __int8 *)(a2 + v1013 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1013 + 1) << 8) | *(unsigned __int8 *)(a2 + v1013);
              }
              else {
                unsigned int v1014 = *(unsigned __int16 *)(a2 + v1013);
              }
              *(_WORD *)(result + 64) |= (v1014 >> v1012) & 0x7FFF;
              unint64_t v1019 = *a3 + 310;
              unint64_t v1020 = v1019 & 7;
              unint64_t v1021 = v1019 >> 3;
              if (v1020 > 1) {
                unsigned int v1022 = (*(unsigned __int8 *)(a2 + v1021 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1021 + 1) << 8) | *(unsigned __int8 *)(a2 + v1021);
              }
              else {
                unsigned int v1022 = *(unsigned __int16 *)(a2 + v1021);
              }
              *(_WORD *)(result + 66) |= (v1022 >> v1020) & 0x7FFF;
              unint64_t v1027 = *a3 + 325;
              unint64_t v1028 = v1027 & 7;
              unint64_t v1029 = v1027 >> 3;
              if (v1028 > 1) {
                unsigned int v1030 = (*(unsigned __int8 *)(a2 + v1029 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1029 + 1) << 8) | *(unsigned __int8 *)(a2 + v1029);
              }
              else {
                unsigned int v1030 = *(unsigned __int16 *)(a2 + v1029);
              }
              *(_WORD *)(result + 68) |= (v1030 >> v1028) & 0x7FFF;
              unint64_t v1035 = *a3 + 340;
              unint64_t v1036 = v1035 & 7;
              unint64_t v1037 = v1035 >> 3;
              if (v1036 > 1) {
                unsigned int v1038 = (*(unsigned __int8 *)(a2 + v1037 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1037 + 1) << 8) | *(unsigned __int8 *)(a2 + v1037);
              }
              else {
                unsigned int v1038 = *(unsigned __int16 *)(a2 + v1037);
              }
              *(_WORD *)(result + 70) |= (v1038 >> v1036) & 0x7FFF;
              unint64_t v1043 = *a3 + 355;
              unint64_t v1044 = v1043 & 7;
              unint64_t v1045 = v1043 >> 3;
              if (v1044 > 1) {
                unsigned int v1046 = (*(unsigned __int8 *)(a2 + v1045 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1045 + 1) << 8) | *(unsigned __int8 *)(a2 + v1045);
              }
              else {
                unsigned int v1046 = *(unsigned __int16 *)(a2 + v1045);
              }
              *(_WORD *)(result + 72) |= (v1046 >> v1044) & 0x7FFF;
              unint64_t v1051 = *a3 + 370;
              unint64_t v1052 = v1051 & 7;
              unint64_t v1053 = v1051 >> 3;
              if (v1052 > 1) {
                unsigned int v1054 = (*(unsigned __int8 *)(a2 + v1053 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1053 + 1) << 8) | *(unsigned __int8 *)(a2 + v1053);
              }
              else {
                unsigned int v1054 = *(unsigned __int16 *)(a2 + v1053);
              }
              *(_WORD *)(result + 74) |= (v1054 >> v1052) & 0x7FFF;
              unint64_t v1059 = (*(unsigned char *)a3 - 127) & 7;
              unint64_t v1060 = (unint64_t)(*a3 + 385) >> 3;
              if (v1059 > 1) {
                unsigned int v1061 = (*(unsigned __int8 *)(a2 + v1060 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1060 + 1) << 8) | *(unsigned __int8 *)(a2 + v1060);
              }
              else {
                unsigned int v1061 = *(unsigned __int16 *)(a2 + v1060);
              }
              *(_WORD *)(result + 76) |= (v1061 >> v1059) & 0x7FFF;
              unint64_t v1066 = *a3 & 7;
              unint64_t v1067 = (unint64_t)(*a3 + 400) >> 3;
              if (v1066 > 1) {
                unsigned int v1068 = (*(unsigned __int8 *)(a2 + v1067 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1067 + 1) << 8) | *(unsigned __int8 *)(a2 + v1067);
              }
              else {
                unsigned int v1068 = *(unsigned __int16 *)(a2 + v1067);
              }
              *(_WORD *)(result + 78) |= (v1068 >> v1066) & 0x7FFF;
              unint64_t v1072 = (*(unsigned char *)a3 - 97) & 7;
              unint64_t v1073 = (unint64_t)(*a3 + 415) >> 3;
              if (v1072 > 1) {
                unsigned int v1074 = (*(unsigned __int8 *)(a2 + v1073 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1073 + 1) << 8) | *(unsigned __int8 *)(a2 + v1073);
              }
              else {
                unsigned int v1074 = *(unsigned __int16 *)(a2 + v1073);
              }
              *(_WORD *)(result + 80) |= (v1074 >> v1072) & 0x7FFF;
              unint64_t v1079 = (*(unsigned char *)a3 - 82) & 7;
              unint64_t v1080 = (unint64_t)(*a3 + 430) >> 3;
              if (v1079 > 1) {
                unsigned int v1081 = (*(unsigned __int8 *)(a2 + v1080 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1080 + 1) << 8) | *(unsigned __int8 *)(a2 + v1080);
              }
              else {
                unsigned int v1081 = *(unsigned __int16 *)(a2 + v1080);
              }
              *(_WORD *)(result + 82) |= (v1081 >> v1079) & 0x7FFF;
              unint64_t v1085 = (*(unsigned char *)a3 - 67) & 7;
              unint64_t v1086 = (unint64_t)(*a3 + 445) >> 3;
              if (v1085 > 1) {
                unsigned int v1087 = (*(unsigned __int8 *)(a2 + v1086 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1086 + 1) << 8) | *(unsigned __int8 *)(a2 + v1086);
              }
              else {
                unsigned int v1087 = *(unsigned __int16 *)(a2 + v1086);
              }
              *(_WORD *)(result + 84) |= (v1087 >> v1085) & 0x7FFF;
              unint64_t v1091 = (*(unsigned char *)a3 - 52) & 7;
              unint64_t v1092 = (unint64_t)(*a3 + 460) >> 3;
              if (v1091 > 1) {
                unsigned int v1093 = (*(unsigned __int8 *)(a2 + v1092 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1092 + 1) << 8) | *(unsigned __int8 *)(a2 + v1092);
              }
              else {
                unsigned int v1093 = *(unsigned __int16 *)(a2 + v1092);
              }
              *(_WORD *)(result + 86) |= (v1093 >> v1091) & 0x7FFF;
              unint64_t v1097 = (*(unsigned char *)a3 - 37) & 7;
              unint64_t v1098 = (unint64_t)(*a3 + 475) >> 3;
              if (v1097 > 1) {
                unsigned int v1099 = (*(unsigned __int8 *)(a2 + v1098 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1098 + 1) << 8) | *(unsigned __int8 *)(a2 + v1098);
              }
              else {
                unsigned int v1099 = *(unsigned __int16 *)(a2 + v1098);
              }
              *(_WORD *)(result + 88) |= (v1099 >> v1097) & 0x7FFF;
              uint64_t v22 = 490;
              break;
            case 3:
              *(_DWORD *)(result + 16) = 3;
              *(unsigned char *)(result + 24) |= (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 8) >> 3)) >> (*a3 & 7)) & 1;
              unint64_t v306 = *a3 + 9;
              unint64_t v307 = v306 >> 3;
              unint64_t v308 = v306 & 7;
              if (v308) {
                unsigned int v309 = ((*(unsigned __int8 *)(a2 + v307 + 2) << 16) | (*(unsigned __int8 *)(a2 + v307 + 1) << 8) | *(unsigned __int8 *)(a2 + v307)) >> v308;
              }
              else {
                LOWORD(v309) = *(_WORD *)(a2 + v307);
              }
              uint64_t v1100 = (unsigned __int16)v309;
              int v1101 = *(_DWORD *)(result + 34);
              uint64_t v1102 = *(void *)(result + 26);
              uint64_t v1103 = v1102 | v1100;
              *(void *)(result + 26) = v1103;
              unint64_t v1104 = *a3 + 25;
              unint64_t v1105 = v1104 >> 3;
              unint64_t v1106 = v1104 & 7;
              if (v1106) {
                unsigned int v1107 = ((*(unsigned __int8 *)(a2 + v1105 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1105 + 1) << 8) | *(unsigned __int8 *)(a2 + v1105)) >> v1106;
              }
              else {
                unsigned int v1107 = *(unsigned __int16 *)(a2 + v1105);
              }
              unint64_t v1155 = v1103 & 0xFFFFFFFF0000FFFFLL | v1103 & 0xFFFF0000 | (unint64_t)(v1107 << 16);
              *(_DWORD *)(result + 34) = v1101;
              *(void *)(result + 26) = v1155;
              unint64_t v1156 = *a3 + 41;
              unint64_t v1157 = v1156 >> 3;
              unint64_t v1158 = v1156 & 7;
              if (v1158) {
                unsigned int v1159 = ((*(unsigned __int8 *)(a2 + v1157 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1157 + 1) << 8) | *(unsigned __int8 *)(a2 + v1157)) >> v1158;
              }
              else {
                LOWORD(v1159) = *(_WORD *)(a2 + v1157);
              }
              unint64_t v1171 = v1155 & 0xFFFF0000FFFFFFFFLL | v1102 & 0xFFFF00000000 | ((unint64_t)(unsigned __int16)v1159 << 32);
              *(_DWORD *)(result + 34) = v1101;
              *(void *)(result + 26) = v1171;
              unint64_t v1172 = *a3 + 57;
              unint64_t v1173 = v1172 >> 3;
              unint64_t v1174 = v1172 & 7;
              if (v1174) {
                uint64_t v1175 = ((*(unsigned __int8 *)(a2 + v1173 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1173 + 1) << 8) | *(unsigned __int8 *)(a2 + v1173)) >> v1174;
              }
              else {
                uint64_t v1175 = *(unsigned __int16 *)(a2 + v1173);
              }
              unint64_t v1176 = v1171 & 0xFFFF000000000000 | (v1175 << 48) | v1171 & 0xFFFFFFFFFFFFLL;
              *(_DWORD *)(result + 34) = v1101;
              *(void *)(result + 26) = v1176;
              unint64_t v1177 = *a3 + 73;
              unint64_t v1178 = v1177 >> 3;
              unint64_t v1179 = v1177 & 7;
              if (v1179) {
                unsigned int v1180 = ((*(unsigned __int8 *)(a2 + v1178 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1178 + 1) << 8) | *(unsigned __int8 *)(a2 + v1178)) >> v1179;
              }
              else {
                LOWORD(v1180) = *(_WORD *)(a2 + v1178);
              }
              unsigned int v1181 = (unsigned __int16)(v1101 | v1180) | v1101 & 0xFFFF0000;
              *(void *)(result + 26) = v1176;
              *(_DWORD *)(result + 34) = v1181;
              unint64_t v1182 = *a3 + 89;
              unint64_t v1183 = v1182 & 7;
              unint64_t v1184 = v1182 >> 3;
              if (v1183 > 1) {
                unsigned int v1185 = (*(unsigned __int8 *)(a2 + v1184 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1184 + 1) << 8) | *(unsigned __int8 *)(a2 + v1184);
              }
              else {
                unsigned int v1185 = *(unsigned __int16 *)(a2 + v1184);
              }
              *(void *)(result + 26) = v1176;
              *(_DWORD *)(result + 34) = v1181 & 0x8000FFFF | ((((v1185 >> v1183) | HIWORD(v1181)) & 0x7FFF) << 16);
              unint64_t v1186 = (unint64_t)(*a3 + 104) >> 3;
              uint64_t v1187 = *a3 & 7;
              if (v1187) {
                unsigned int v1188 = ((*(unsigned __int8 *)(a2 + v1186 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1186 + 1) << 8) | *(unsigned __int8 *)(a2 + v1186)) >> v1187;
              }
              else {
                LOWORD(v1188) = *(_WORD *)(a2 + v1186);
              }
              uint64_t v1189 = (unsigned __int16)v1188;
              int v1190 = *(_DWORD *)(result + 46);
              uint64_t v1191 = *(void *)(result + 38);
              uint64_t v1192 = v1191 | v1189;
              *(void *)(result + 38) = v1192;
              unint64_t v1193 = (unint64_t)(*a3 + 120) >> 3;
              uint64_t v1194 = *a3 & 7;
              if (v1194) {
                unsigned int v1195 = ((*(unsigned __int8 *)(a2 + v1193 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1193 + 1) << 8) | *(unsigned __int8 *)(a2 + v1193)) >> v1194;
              }
              else {
                unsigned int v1195 = *(unsigned __int16 *)(a2 + v1193);
              }
              unint64_t v1196 = v1192 & 0xFFFFFFFF0000FFFFLL | v1192 & 0xFFFF0000 | (unint64_t)(v1195 << 16);
              *(_DWORD *)(result + 46) = v1190;
              *(void *)(result + 38) = v1196;
              unint64_t v1197 = (unint64_t)(*a3 + 136) >> 3;
              uint64_t v1198 = *a3 & 7;
              if (v1198) {
                unsigned int v1199 = ((*(unsigned __int8 *)(a2 + v1197 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1197 + 1) << 8) | *(unsigned __int8 *)(a2 + v1197)) >> v1198;
              }
              else {
                LOWORD(v1199) = *(_WORD *)(a2 + v1197);
              }
              unint64_t v1200 = v1196 & 0xFFFF0000FFFFFFFFLL | v1191 & 0xFFFF00000000 | ((unint64_t)(unsigned __int16)v1199 << 32);
              *(_DWORD *)(result + 46) = v1190;
              *(void *)(result + 38) = v1200;
              unint64_t v1201 = (unint64_t)(*a3 + 152) >> 3;
              uint64_t v1202 = *a3 & 7;
              if (v1202) {
                uint64_t v1203 = ((*(unsigned __int8 *)(a2 + v1201 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1201 + 1) << 8) | *(unsigned __int8 *)(a2 + v1201)) >> v1202;
              }
              else {
                uint64_t v1203 = *(unsigned __int16 *)(a2 + v1201);
              }
              unint64_t v1204 = v1200 & 0xFFFF000000000000 | (v1203 << 48) | v1200 & 0xFFFFFFFFFFFFLL;
              *(_DWORD *)(result + 46) = v1190;
              *(void *)(result + 38) = v1204;
              unint64_t v1205 = (unint64_t)(*a3 + 168) >> 3;
              uint64_t v1206 = *a3 & 7;
              if (v1206) {
                unsigned int v1207 = ((*(unsigned __int8 *)(a2 + v1205 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1205 + 1) << 8) | *(unsigned __int8 *)(a2 + v1205)) >> v1206;
              }
              else {
                LOWORD(v1207) = *(_WORD *)(a2 + v1205);
              }
              unsigned int v1208 = (unsigned __int16)(v1190 | v1207) | v1190 & 0xFFFF0000;
              *(void *)(result + 38) = v1204;
              *(_DWORD *)(result + 46) = v1208;
              unint64_t v1209 = *a3 & 7;
              unint64_t v1210 = (unint64_t)(*a3 + 184) >> 3;
              if (v1209 > 1) {
                unsigned int v1211 = (*(unsigned __int8 *)(a2 + v1210 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1210 + 1) << 8) | *(unsigned __int8 *)(a2 + v1210);
              }
              else {
                unsigned int v1211 = *(unsigned __int16 *)(a2 + v1210);
              }
              *(void *)(result + 38) = v1204;
              *(_DWORD *)(result + 46) = v1208 & 0x8000FFFF | ((((v1211 >> v1209) | HIWORD(v1208)) & 0x7FFF) << 16);
              unint64_t v1212 = (*(unsigned char *)a3 - 57) & 7;
              unint64_t v1213 = (unint64_t)(*a3 + 199) >> 3;
              if (v1212 > 1) {
                unsigned int v1214 = (*(unsigned __int8 *)(a2 + v1213 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1213 + 1) << 8) | *(unsigned __int8 *)(a2 + v1213);
              }
              else {
                unsigned int v1214 = *(unsigned __int16 *)(a2 + v1213);
              }
              *(_WORD *)(result + 50) |= (v1214 >> v1212) & 0x7FFF;
              uint64_t v22 = 214;
              break;
            case 4:
              *(_DWORD *)(result + 16) = 4;
              int v310 = (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 8) >> 3)) >> (*a3 & 7)) & 1 | *(_DWORD *)(result + 24);
              *(_DWORD *)(result + 24) = v310;
              unint64_t v311 = *a3 + 9;
              unint64_t v312 = v311 & 7;
              unint64_t v313 = v311 >> 3;
              if (v312 == 7) {
                int v314 = *(_DWORD *)(a2 + v313) >> 7;
              }
              else {
                int v314 = ((*(unsigned __int8 *)(a2 + v313 + 2) << 16) | (*(unsigned __int8 *)(a2 + v313 + 1) << 8) | *(unsigned __int8 *)(a2 + v313)) >> v312;
              }
              *(_DWORD *)(result + 24) = (2 * (v314 & 0x3FFFF)) | v310;
              unint64_t v496 = *a3 + 27;
              unint64_t v497 = v496 & 7;
              unint64_t v498 = v496 >> 3;
              if (v497 == 7) {
                int v499 = *(_DWORD *)(a2 + v498) >> 7;
              }
              else {
                int v499 = ((*(unsigned __int8 *)(a2 + v498 + 2) << 16) | (*(unsigned __int8 *)(a2 + v498 + 1) << 8) | *(unsigned __int8 *)(a2 + v498)) >> v497;
              }
              *(_DWORD *)(result + 28) |= v499 & 0x3FFFF;
              unint64_t v555 = *a3 + 45;
              unint64_t v556 = v555 & 7;
              unint64_t v557 = v555 >> 3;
              if (v556 == 7) {
                int v558 = *(_DWORD *)(a2 + v557) >> 7;
              }
              else {
                int v558 = ((*(unsigned __int8 *)(a2 + v557 + 2) << 16) | (*(unsigned __int8 *)(a2 + v557 + 1) << 8) | *(unsigned __int8 *)(a2 + v557)) >> v556;
              }
              *(_DWORD *)(result + 32) |= v558 & 0x3FFFF;
              unint64_t v607 = *a3 + 63;
              unint64_t v608 = v607 & 7;
              unint64_t v609 = v607 >> 3;
              if (v608 == 7) {
                int v610 = *(_DWORD *)(a2 + v609) >> 7;
              }
              else {
                int v610 = ((*(unsigned __int8 *)(a2 + v609 + 2) << 16) | (*(unsigned __int8 *)(a2 + v609 + 1) << 8) | *(unsigned __int8 *)(a2 + v609)) >> v608;
              }
              *(_DWORD *)(result + 36) |= v610 & 0x3FFFF;
              unint64_t v649 = *a3 + 81;
              unint64_t v650 = v649 & 7;
              unint64_t v651 = v649 >> 3;
              if (v650 == 7) {
                int v652 = *(_DWORD *)(a2 + v651) >> 7;
              }
              else {
                int v652 = ((*(unsigned __int8 *)(a2 + v651 + 2) << 16) | (*(unsigned __int8 *)(a2 + v651 + 1) << 8) | *(unsigned __int8 *)(a2 + v651)) >> v650;
              }
              *(_DWORD *)(result + 40) |= v652 & 0x3FFFF;
              unint64_t v690 = *a3 + 99;
              unint64_t v691 = v690 & 7;
              unint64_t v692 = v690 >> 3;
              if (v691 == 7) {
                int v693 = *(_DWORD *)(a2 + v692) >> 7;
              }
              else {
                int v693 = ((*(unsigned __int8 *)(a2 + v692 + 2) << 16) | (*(unsigned __int8 *)(a2 + v692 + 1) << 8) | *(unsigned __int8 *)(a2 + v692)) >> v691;
              }
              *(_DWORD *)(result + 44) |= v693 & 0x3FFFF;
              unint64_t v726 = *a3 + 117;
              unint64_t v727 = v726 & 7;
              unint64_t v728 = v726 >> 3;
              if (v727 > 4)
              {
                int v730 = (*(unsigned __int8 *)(v728 + a2 + 3) << 24) | (*(unsigned __int8 *)(v728 + a2 + 2) << 16);
                int v729 = *(unsigned __int8 *)(v728 + a2 + 1) << 8;
              }
              else
              {
                int v729 = *(unsigned __int8 *)(v728 + a2 + 2) << 16;
                int v730 = *(unsigned __int8 *)(v728 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 48) |= ((v730 | v729 | *(unsigned __int8 *)(a2 + v728)) >> v727) & 0xFFFFF;
              unint64_t v764 = (*(unsigned char *)a3 - 119) & 7;
              unint64_t v765 = (unint64_t)(*a3 + 137) >> 3;
              if (v764 > 4)
              {
                int v767 = (*(unsigned __int8 *)(v765 + a2 + 3) << 24) | (*(unsigned __int8 *)(v765 + a2 + 2) << 16);
                int v766 = *(unsigned __int8 *)(v765 + a2 + 1) << 8;
              }
              else
              {
                int v766 = *(unsigned __int8 *)(v765 + a2 + 2) << 16;
                int v767 = *(unsigned __int8 *)(v765 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 52) |= ((v767 | v766 | *(unsigned __int8 *)(a2 + v765)) >> v764) & 0xFFFFF;
              unint64_t v799 = (*(unsigned char *)a3 - 99) & 7;
              unint64_t v800 = (unint64_t)(*a3 + 157) >> 3;
              if (v799 > 4)
              {
                int v802 = (*(unsigned __int8 *)(v800 + a2 + 3) << 24) | (*(unsigned __int8 *)(v800 + a2 + 2) << 16);
                int v801 = *(unsigned __int8 *)(v800 + a2 + 1) << 8;
              }
              else
              {
                int v801 = *(unsigned __int8 *)(v800 + a2 + 2) << 16;
                int v802 = *(unsigned __int8 *)(v800 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 56) |= ((v802 | v801 | *(unsigned __int8 *)(a2 + v800)) >> v799) & 0xFFFFF;
              unint64_t v824 = (unint64_t)(*a3 + 177) >> 3;
              if (((*(unsigned char *)a3 - 79) & 7) != 0) {
                unsigned int v825 = ((*(unsigned __int8 *)(a2 + v824 + 2) << 16) | (*(unsigned __int8 *)(a2 + v824 + 1) << 8) | *(unsigned __int8 *)(a2 + v824)) >> ((*(unsigned char *)a3 - 79) & 7);
              }
              else {
                LOWORD(v825) = *(_WORD *)(a2 + v824);
              }
              int v1152 = *(_DWORD *)(result + 60) | (unsigned __int16)v825;
              *(_DWORD *)(result + 60) = v1152;
              unint64_t v1153 = (unint64_t)(*a3 + 193) >> 3;
              if (((*(unsigned char *)a3 - 63) & 7) != 0) {
                unsigned int v1154 = ((*(unsigned __int8 *)(a2 + v1153 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1153 + 1) << 8) | *(unsigned __int8 *)(a2 + v1153)) >> ((*(unsigned char *)a3 - 63) & 7);
              }
              else {
                unsigned int v1154 = *(unsigned __int16 *)(a2 + v1153);
              }
              *(_DWORD *)(result + 60) = v1152 | (v1154 << 16);
              uint64_t v22 = 209;
              break;
            case 5:
              *(_DWORD *)(result + 16) = 5;
              int v315 = (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 8) >> 3)) >> (*a3 & 7)) & 1 | *(_DWORD *)(result + 24);
              *(_DWORD *)(result + 24) = v315;
              unint64_t v316 = *a3 + 9;
              unint64_t v317 = v316 & 7;
              unint64_t v318 = v316 >> 3;
              if (v317 > 5)
              {
                int v320 = (*(unsigned __int8 *)(v318 + a2 + 3) << 24) | (*(unsigned __int8 *)(v318 + a2 + 2) << 16);
                int v319 = *(unsigned __int8 *)(v318 + a2 + 1) << 8;
              }
              else
              {
                int v319 = *(unsigned __int8 *)(v318 + a2 + 2) << 16;
                int v320 = *(unsigned __int8 *)(v318 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 24) = (2
                                        * (((v320 | v319 | *(unsigned __int8 *)(a2 + v318)) >> v317) & 0x7FFFF)) | v315;
              unint64_t v500 = *a3 + 28;
              *(_DWORD *)(result + 28) |= (((*(unsigned __int8 *)(a2 + (v500 >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + (v500 >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + (v500 >> 3))) >> (v500 & 7)) & 0x1FFFF;
              unint64_t v501 = *a3 + 45;
              unint64_t v502 = v501 & 7;
              unint64_t v503 = v501 >> 3;
              if (v502 > 4)
              {
                int v505 = (*(unsigned __int8 *)(v503 + a2 + 3) << 24) | (*(unsigned __int8 *)(v503 + a2 + 2) << 16);
                int v504 = *(unsigned __int8 *)(v503 + a2 + 1) << 8;
              }
              else
              {
                int v504 = *(unsigned __int8 *)(v503 + a2 + 2) << 16;
                int v505 = *(unsigned __int8 *)(v503 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 32) |= ((v505 | v504 | *(unsigned __int8 *)(a2 + v503)) >> v502) & 0xFFFFF;
              unint64_t v559 = *a3 + 65;
              unint64_t v560 = v559 & 7;
              unint64_t v561 = v559 >> 3;
              if (v560 > 4)
              {
                int v563 = (*(unsigned __int8 *)(v561 + a2 + 3) << 24) | (*(unsigned __int8 *)(v561 + a2 + 2) << 16);
                int v562 = *(unsigned __int8 *)(v561 + a2 + 1) << 8;
              }
              else
              {
                int v562 = *(unsigned __int8 *)(v561 + a2 + 2) << 16;
                int v563 = *(unsigned __int8 *)(v561 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 36) |= ((v563 | v562 | *(unsigned __int8 *)(a2 + v561)) >> v560) & 0xFFFFF;
              uint64_t v22 = 85;
              break;
            case 6:
              *(_DWORD *)(result + 16) = 6;
              int v321 = (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 8) >> 3)) >> (*a3 & 7)) & 1 | *(_DWORD *)(result + 24);
              *(_DWORD *)(result + 24) = v321;
              unint64_t v322 = *a3 + 9;
              unint64_t v323 = v322 & 7;
              unint64_t v324 = v322 >> 3;
              if (v323 > 5)
              {
                int v326 = (*(unsigned __int8 *)(v324 + a2 + 3) << 24) | (*(unsigned __int8 *)(v324 + a2 + 2) << 16);
                int v325 = *(unsigned __int8 *)(v324 + a2 + 1) << 8;
              }
              else
              {
                int v325 = *(unsigned __int8 *)(v324 + a2 + 2) << 16;
                int v326 = *(unsigned __int8 *)(v324 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 24) = (2
                                        * (((v326 | v325 | *(unsigned __int8 *)(a2 + v324)) >> v323) & 0x7FFFF)) | v321;
              unint64_t v506 = *a3 + 28;
              unint64_t v507 = v506 & 7;
              unint64_t v508 = v506 >> 3;
              if (v507 > 5)
              {
                int v510 = (*(unsigned __int8 *)(v508 + a2 + 3) << 24) | (*(unsigned __int8 *)(v508 + a2 + 2) << 16);
                int v509 = *(unsigned __int8 *)(v508 + a2 + 1) << 8;
              }
              else
              {
                int v509 = *(unsigned __int8 *)(v508 + a2 + 2) << 16;
                int v510 = *(unsigned __int8 *)(v508 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 28) |= ((v510 | v509 | *(unsigned __int8 *)(a2 + v508)) >> v507) & 0x7FFFF;
              unint64_t v564 = *a3 + 47;
              unint64_t v565 = v564 & 7;
              unint64_t v566 = v564 >> 3;
              if (v565 > 5)
              {
                int v568 = (*(unsigned __int8 *)(v566 + a2 + 3) << 24) | (*(unsigned __int8 *)(v566 + a2 + 2) << 16);
                int v567 = *(unsigned __int8 *)(v566 + a2 + 1) << 8;
              }
              else
              {
                int v567 = *(unsigned __int8 *)(v566 + a2 + 2) << 16;
                int v568 = *(unsigned __int8 *)(v566 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 32) |= ((v568 | v567 | *(unsigned __int8 *)(a2 + v566)) >> v565) & 0x7FFFF;
              unint64_t v611 = *a3 + 66;
              unint64_t v612 = v611 & 7;
              unint64_t v613 = v611 >> 3;
              if (v612 > 5)
              {
                int v615 = (*(unsigned __int8 *)(v613 + a2 + 3) << 24) | (*(unsigned __int8 *)(v613 + a2 + 2) << 16);
                int v614 = *(unsigned __int8 *)(v613 + a2 + 1) << 8;
              }
              else
              {
                int v614 = *(unsigned __int8 *)(v613 + a2 + 2) << 16;
                int v615 = *(unsigned __int8 *)(v613 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 36) |= ((v615 | v614 | *(unsigned __int8 *)(a2 + v613)) >> v612) & 0x7FFFF;
              unint64_t v653 = *a3 + 85;
              unint64_t v654 = v653 & 7;
              unint64_t v655 = v653 >> 3;
              if (v654 > 5)
              {
                int v657 = (*(unsigned __int8 *)(v655 + a2 + 3) << 24) | (*(unsigned __int8 *)(v655 + a2 + 2) << 16);
                int v656 = *(unsigned __int8 *)(v655 + a2 + 1) << 8;
              }
              else
              {
                int v656 = *(unsigned __int8 *)(v655 + a2 + 2) << 16;
                int v657 = *(unsigned __int8 *)(v655 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 40) |= ((v657 | v656 | *(unsigned __int8 *)(a2 + v655)) >> v654) & 0x7FFFF;
              unint64_t v694 = *a3 & 7;
              unint64_t v695 = (unint64_t)(*a3 + 104) >> 3;
              if (v694 > 5)
              {
                int v697 = (*(unsigned __int8 *)(v695 + a2 + 3) << 24) | (*(unsigned __int8 *)(v695 + a2 + 2) << 16);
                int v696 = *(unsigned __int8 *)(v695 + a2 + 1) << 8;
              }
              else
              {
                int v696 = *(unsigned __int8 *)(v695 + a2 + 2) << 16;
                int v697 = *(unsigned __int8 *)(v695 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 44) |= ((v697 | v696 | *(unsigned __int8 *)(a2 + v695)) >> v694) & 0x7FFFF;
              unint64_t v731 = *a3 + 123;
              unint64_t v732 = v731 & 7;
              unint64_t v733 = v731 >> 3;
              if (v732 > 5)
              {
                int v735 = (*(unsigned __int8 *)(v733 + a2 + 3) << 24) | (*(unsigned __int8 *)(v733 + a2 + 2) << 16);
                int v734 = *(unsigned __int8 *)(v733 + a2 + 1) << 8;
              }
              else
              {
                int v734 = *(unsigned __int8 *)(v733 + a2 + 2) << 16;
                int v735 = *(unsigned __int8 *)(v733 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 48) |= ((v735 | v734 | *(unsigned __int8 *)(a2 + v733)) >> v732) & 0x7FFFF;
              unint64_t v768 = (*(unsigned char *)a3 - 114) & 7;
              unint64_t v769 = (unint64_t)(*a3 + 142) >> 3;
              if (v768 > 5)
              {
                int v771 = (*(unsigned __int8 *)(v769 + a2 + 3) << 24) | (*(unsigned __int8 *)(v769 + a2 + 2) << 16);
                int v770 = *(unsigned __int8 *)(v769 + a2 + 1) << 8;
              }
              else
              {
                int v770 = *(unsigned __int8 *)(v769 + a2 + 2) << 16;
                int v771 = *(unsigned __int8 *)(v769 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 52) |= ((v771 | v770 | *(unsigned __int8 *)(a2 + v769)) >> v768) & 0x7FFFF;
              unint64_t v803 = (*(unsigned char *)a3 - 95) & 7;
              unint64_t v804 = (unint64_t)(*a3 + 161) >> 3;
              if (v803 > 5)
              {
                int v806 = (*(unsigned __int8 *)(v804 + a2 + 3) << 24) | (*(unsigned __int8 *)(v804 + a2 + 2) << 16);
                int v805 = *(unsigned __int8 *)(v804 + a2 + 1) << 8;
              }
              else
              {
                int v805 = *(unsigned __int8 *)(v804 + a2 + 2) << 16;
                int v806 = *(unsigned __int8 *)(v804 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 56) |= ((v806 | v805 | *(unsigned __int8 *)(a2 + v804)) >> v803) & 0x7FFFF;
              unint64_t v826 = (*(unsigned char *)a3 - 76) & 7;
              unint64_t v827 = (unint64_t)(*a3 + 180) >> 3;
              if (v826 > 5)
              {
                int v829 = (*(unsigned __int8 *)(v827 + a2 + 3) << 24) | (*(unsigned __int8 *)(v827 + a2 + 2) << 16);
                int v828 = *(unsigned __int8 *)(v827 + a2 + 1) << 8;
              }
              else
              {
                int v828 = *(unsigned __int8 *)(v827 + a2 + 2) << 16;
                int v829 = *(unsigned __int8 *)(v827 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 60) |= ((v829 | v828 | *(unsigned __int8 *)(a2 + v827)) >> v826) & 0x7FFFF;
              unint64_t v846 = (*(unsigned char *)a3 - 57) & 7;
              unint64_t v847 = (unint64_t)(*a3 + 199) >> 3;
              if (v846 > 5)
              {
                int v849 = (*(unsigned __int8 *)(v847 + a2 + 3) << 24) | (*(unsigned __int8 *)(v847 + a2 + 2) << 16);
                int v848 = *(unsigned __int8 *)(v847 + a2 + 1) << 8;
              }
              else
              {
                int v848 = *(unsigned __int8 *)(v847 + a2 + 2) << 16;
                int v849 = *(unsigned __int8 *)(v847 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 64) |= ((v849 | v848 | *(unsigned __int8 *)(a2 + v847)) >> v846) & 0x7FFFF;
              unint64_t v863 = (*(unsigned char *)a3 - 38) & 7;
              unint64_t v864 = (unint64_t)(*a3 + 218) >> 3;
              if (v863 > 5)
              {
                int v866 = (*(unsigned __int8 *)(v864 + a2 + 3) << 24) | (*(unsigned __int8 *)(v864 + a2 + 2) << 16);
                int v865 = *(unsigned __int8 *)(v864 + a2 + 1) << 8;
              }
              else
              {
                int v865 = *(unsigned __int8 *)(v864 + a2 + 2) << 16;
                int v866 = *(unsigned __int8 *)(v864 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 68) |= ((v866 | v865 | *(unsigned __int8 *)(a2 + v864)) >> v863) & 0x7FFFF;
              unint64_t v880 = (*(unsigned char *)a3 - 19) & 7;
              unint64_t v881 = (unint64_t)(*a3 + 237) >> 3;
              if (v880 > 5)
              {
                int v883 = (*(unsigned __int8 *)(v881 + a2 + 3) << 24) | (*(unsigned __int8 *)(v881 + a2 + 2) << 16);
                int v882 = *(unsigned __int8 *)(v881 + a2 + 1) << 8;
              }
              else
              {
                int v882 = *(unsigned __int8 *)(v881 + a2 + 2) << 16;
                int v883 = *(unsigned __int8 *)(v881 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 72) |= ((v883 | v882 | *(unsigned __int8 *)(a2 + v881)) >> v880) & 0x7FFFF;
              unint64_t v897 = *a3 & 7;
              unint64_t v898 = (unint64_t)(*a3 + 256) >> 3;
              if (v897 > 5)
              {
                int v900 = (*(unsigned __int8 *)(v898 + a2 + 3) << 24) | (*(unsigned __int8 *)(v898 + a2 + 2) << 16);
                int v899 = *(unsigned __int8 *)(v898 + a2 + 1) << 8;
              }
              else
              {
                int v899 = *(unsigned __int8 *)(v898 + a2 + 2) << 16;
                int v900 = *(unsigned __int8 *)(v898 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 76) |= ((v900 | v899 | *(unsigned __int8 *)(a2 + v898)) >> v897) & 0x7FFFF;
              unint64_t v914 = *a3 + 275;
              unint64_t v915 = v914 & 7;
              unint64_t v916 = v914 >> 3;
              if (v915 > 5)
              {
                int v918 = (*(unsigned __int8 *)(v916 + a2 + 3) << 24) | (*(unsigned __int8 *)(v916 + a2 + 2) << 16);
                int v917 = *(unsigned __int8 *)(v916 + a2 + 1) << 8;
              }
              else
              {
                int v917 = *(unsigned __int8 *)(v916 + a2 + 2) << 16;
                int v918 = *(unsigned __int8 *)(v916 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 80) |= ((v918 | v917 | *(unsigned __int8 *)(a2 + v916)) >> v915) & 0x7FFFF;
              unint64_t v932 = *a3 + 294;
              unint64_t v933 = v932 & 7;
              unint64_t v934 = v932 >> 3;
              if (v933 > 5)
              {
                int v936 = (*(unsigned __int8 *)(v934 + a2 + 3) << 24) | (*(unsigned __int8 *)(v934 + a2 + 2) << 16);
                int v935 = *(unsigned __int8 *)(v934 + a2 + 1) << 8;
              }
              else
              {
                int v935 = *(unsigned __int8 *)(v934 + a2 + 2) << 16;
                int v936 = *(unsigned __int8 *)(v934 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 84) |= ((v936 | v935 | *(unsigned __int8 *)(a2 + v934)) >> v933) & 0x7FFFF;
              unint64_t v950 = *a3 + 313;
              unint64_t v951 = v950 & 7;
              unint64_t v952 = v950 >> 3;
              if (v951 > 5)
              {
                int v954 = (*(unsigned __int8 *)(v952 + a2 + 3) << 24) | (*(unsigned __int8 *)(v952 + a2 + 2) << 16);
                int v953 = *(unsigned __int8 *)(v952 + a2 + 1) << 8;
              }
              else
              {
                int v953 = *(unsigned __int8 *)(v952 + a2 + 2) << 16;
                int v954 = *(unsigned __int8 *)(v952 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 88) |= ((v954 | v953 | *(unsigned __int8 *)(a2 + v952)) >> v951) & 0x7FFFF;
              unint64_t v970 = *a3 + 332;
              unint64_t v971 = v970 & 7;
              unint64_t v972 = v970 >> 3;
              if (v971 > 5)
              {
                int v974 = (*(unsigned __int8 *)(v972 + a2 + 3) << 24) | (*(unsigned __int8 *)(v972 + a2 + 2) << 16);
                int v973 = *(unsigned __int8 *)(v972 + a2 + 1) << 8;
              }
              else
              {
                int v973 = *(unsigned __int8 *)(v972 + a2 + 2) << 16;
                int v974 = *(unsigned __int8 *)(v972 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 92) |= ((v974 | v973 | *(unsigned __int8 *)(a2 + v972)) >> v971) & 0x7FFFF;
              unint64_t v987 = *a3 + 351;
              unint64_t v988 = v987 & 7;
              unint64_t v989 = v987 >> 3;
              if (v988 > 5)
              {
                int v991 = (*(unsigned __int8 *)(v989 + a2 + 3) << 24) | (*(unsigned __int8 *)(v989 + a2 + 2) << 16);
                int v990 = *(unsigned __int8 *)(v989 + a2 + 1) << 8;
              }
              else
              {
                int v990 = *(unsigned __int8 *)(v989 + a2 + 2) << 16;
                int v991 = *(unsigned __int8 *)(v989 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 96) |= ((v991 | v990 | *(unsigned __int8 *)(a2 + v989)) >> v988) & 0x7FFFF;
              unint64_t v1003 = *a3 + 370;
              unint64_t v1004 = v1003 & 7;
              unint64_t v1005 = v1003 >> 3;
              if (v1004 > 5)
              {
                int v1007 = (*(unsigned __int8 *)(v1005 + a2 + 3) << 24) | (*(unsigned __int8 *)(v1005 + a2 + 2) << 16);
                int v1006 = *(unsigned __int8 *)(v1005 + a2 + 1) << 8;
              }
              else
              {
                int v1006 = *(unsigned __int8 *)(v1005 + a2 + 2) << 16;
                int v1007 = *(unsigned __int8 *)(v1005 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 100) |= ((v1007 | v1006 | *(unsigned __int8 *)(a2 + v1005)) >> v1004) & 0x7FFFF;
              uint64_t v22 = 389;
              break;
            case 7:
              *(_DWORD *)(result + 16) = 7;
              int v327 = (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 8) >> 3)) >> (*a3 & 7)) & 1 | *(_DWORD *)(result + 24);
              *(_DWORD *)(result + 24) = v327;
              unint64_t v328 = *a3 + 9;
              unint64_t v329 = v328 & 7;
              unint64_t v330 = v328 >> 3;
              if (v329 > 1) {
                unsigned int v331 = (*(unsigned __int8 *)(a2 + v330 + 2) << 16) | (*(unsigned __int8 *)(a2 + v330 + 1) << 8) | *(unsigned __int8 *)(a2 + v330);
              }
              else {
                unsigned int v331 = *(unsigned __int16 *)(a2 + v330);
              }
              int v511 = (2 * ((v331 >> v329) & 0x7FFF)) | v327;
              *(_DWORD *)(result + 24) = v511;
              unint64_t v512 = *a3 & 7;
              unint64_t v513 = (unint64_t)(*a3 + 24) >> 3;
              if (v512 > 1) {
                unsigned int v514 = (*(unsigned __int8 *)(a2 + v513 + 2) << 16) | (*(unsigned __int8 *)(a2 + v513 + 1) << 8) | *(unsigned __int8 *)(a2 + v513);
              }
              else {
                unsigned int v514 = *(unsigned __int16 *)(a2 + v513);
              }
              *(_DWORD *)(result + 24) = (((v514 >> v512) & 0x7FFF) << 16) | v511;
              unint64_t v569 = *a3 + 39;
              unint64_t v570 = v569 & 7;
              unint64_t v571 = v569 >> 3;
              if (v570 > 1) {
                unsigned int v572 = (*(unsigned __int8 *)(a2 + v571 + 2) << 16) | (*(unsigned __int8 *)(a2 + v571 + 1) << 8) | *(unsigned __int8 *)(a2 + v571);
              }
              else {
                unsigned int v572 = *(unsigned __int16 *)(a2 + v571);
              }
              *(_WORD *)(result + 28) |= (v572 >> v570) & 0x7FFF;
              unint64_t v616 = *a3 + 54;
              unint64_t v617 = v616 & 7;
              unint64_t v618 = v616 >> 3;
              if (v617 > 1) {
                unsigned int v619 = (*(unsigned __int8 *)(a2 + v618 + 2) << 16) | (*(unsigned __int8 *)(a2 + v618 + 1) << 8) | *(unsigned __int8 *)(a2 + v618);
              }
              else {
                unsigned int v619 = *(unsigned __int16 *)(a2 + v618);
              }
              *(_WORD *)(result + 30) |= (v619 >> v617) & 0x7FFF;
              unint64_t v658 = *a3 + 69;
              unint64_t v659 = v658 & 7;
              unint64_t v660 = v658 >> 3;
              if (v659 > 1) {
                unsigned int v661 = (*(unsigned __int8 *)(a2 + v660 + 2) << 16) | (*(unsigned __int8 *)(a2 + v660 + 1) << 8) | *(unsigned __int8 *)(a2 + v660);
              }
              else {
                unsigned int v661 = *(unsigned __int16 *)(a2 + v660);
              }
              *(_WORD *)(result + 32) |= (v661 >> v659) & 0x7FFF;
              unint64_t v698 = *a3 + 84;
              unint64_t v699 = v698 & 7;
              unint64_t v700 = v698 >> 3;
              if (v699 > 1) {
                unsigned int v701 = (*(unsigned __int8 *)(a2 + v700 + 2) << 16) | (*(unsigned __int8 *)(a2 + v700 + 1) << 8) | *(unsigned __int8 *)(a2 + v700);
              }
              else {
                unsigned int v701 = *(unsigned __int16 *)(a2 + v700);
              }
              *(_WORD *)(result + 34) |= (v701 >> v699) & 0x7FFF;
              unint64_t v736 = *a3 + 99;
              unint64_t v737 = v736 & 7;
              unint64_t v738 = v736 >> 3;
              if (v737 > 1) {
                unsigned int v739 = (*(unsigned __int8 *)(a2 + v738 + 2) << 16) | (*(unsigned __int8 *)(a2 + v738 + 1) << 8) | *(unsigned __int8 *)(a2 + v738);
              }
              else {
                unsigned int v739 = *(unsigned __int16 *)(a2 + v738);
              }
              *(_WORD *)(result + 36) |= (v739 >> v737) & 0x7FFF;
              unint64_t v772 = *a3 + 114;
              unint64_t v773 = v772 & 7;
              unint64_t v774 = v772 >> 3;
              if (v773 > 1) {
                unsigned int v775 = (*(unsigned __int8 *)(a2 + v774 + 2) << 16) | (*(unsigned __int8 *)(a2 + v774 + 1) << 8) | *(unsigned __int8 *)(a2 + v774);
              }
              else {
                unsigned int v775 = *(unsigned __int16 *)(a2 + v774);
              }
              *(_WORD *)(result + 38) |= (v775 >> v773) & 0x7FFF;
              unint64_t v807 = (*(unsigned char *)a3 - 127) & 7;
              unint64_t v808 = (unint64_t)(*a3 + 129) >> 3;
              if (v807 > 1) {
                unsigned int v809 = (*(unsigned __int8 *)(a2 + v808 + 2) << 16) | (*(unsigned __int8 *)(a2 + v808 + 1) << 8) | *(unsigned __int8 *)(a2 + v808);
              }
              else {
                unsigned int v809 = *(unsigned __int16 *)(a2 + v808);
              }
              *(_WORD *)(result + 40) |= (v809 >> v807) & 0x7FFF;
              unint64_t v830 = *a3 & 7;
              unint64_t v831 = (unint64_t)(*a3 + 144) >> 3;
              if (v830 > 1) {
                unsigned int v832 = (*(unsigned __int8 *)(a2 + v831 + 2) << 16) | (*(unsigned __int8 *)(a2 + v831 + 1) << 8) | *(unsigned __int8 *)(a2 + v831);
              }
              else {
                unsigned int v832 = *(unsigned __int16 *)(a2 + v831);
              }
              *(_WORD *)(result + 42) |= (v832 >> v830) & 0x7FFF;
              unint64_t v850 = (*(unsigned char *)a3 - 97) & 7;
              unint64_t v851 = (unint64_t)(*a3 + 159) >> 3;
              if (v850 > 5)
              {
                int v853 = (*(unsigned __int8 *)(v851 + a2 + 3) << 24) | (*(unsigned __int8 *)(v851 + a2 + 2) << 16);
                int v852 = *(unsigned __int8 *)(v851 + a2 + 1) << 8;
              }
              else
              {
                int v852 = *(unsigned __int8 *)(v851 + a2 + 2) << 16;
                int v853 = *(unsigned __int8 *)(v851 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 44) |= ((v853 | v852 | *(unsigned __int8 *)(a2 + v851)) >> v850) & 0x7FFFF;
              unint64_t v867 = (*(unsigned char *)a3 - 78) & 7;
              unint64_t v868 = (unint64_t)(*a3 + 178) >> 3;
              if (v867 > 5)
              {
                int v870 = (*(unsigned __int8 *)(v868 + a2 + 3) << 24) | (*(unsigned __int8 *)(v868 + a2 + 2) << 16);
                int v869 = *(unsigned __int8 *)(v868 + a2 + 1) << 8;
              }
              else
              {
                int v869 = *(unsigned __int8 *)(v868 + a2 + 2) << 16;
                int v870 = *(unsigned __int8 *)(v868 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 48) |= ((v870 | v869 | *(unsigned __int8 *)(a2 + v868)) >> v867) & 0x7FFFF;
              unint64_t v884 = (*(unsigned char *)a3 - 59) & 7;
              unint64_t v885 = (unint64_t)(*a3 + 197) >> 3;
              if (v884 > 5)
              {
                int v887 = (*(unsigned __int8 *)(v885 + a2 + 3) << 24) | (*(unsigned __int8 *)(v885 + a2 + 2) << 16);
                int v886 = *(unsigned __int8 *)(v885 + a2 + 1) << 8;
              }
              else
              {
                int v886 = *(unsigned __int8 *)(v885 + a2 + 2) << 16;
                int v887 = *(unsigned __int8 *)(v885 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 52) |= ((v887 | v886 | *(unsigned __int8 *)(a2 + v885)) >> v884) & 0x7FFFF;
              unint64_t v901 = *a3 & 7;
              unint64_t v902 = (unint64_t)(*a3 + 216) >> 3;
              if (v901 > 5)
              {
                int v904 = (*(unsigned __int8 *)(v902 + a2 + 3) << 24) | (*(unsigned __int8 *)(v902 + a2 + 2) << 16);
                int v903 = *(unsigned __int8 *)(v902 + a2 + 1) << 8;
              }
              else
              {
                int v903 = *(unsigned __int8 *)(v902 + a2 + 2) << 16;
                int v904 = *(unsigned __int8 *)(v902 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 56) |= ((v904 | v903 | *(unsigned __int8 *)(a2 + v902)) >> v901) & 0x7FFFF;
              unint64_t v919 = (*(unsigned char *)a3 - 21) & 7;
              unint64_t v920 = (unint64_t)(*a3 + 235) >> 3;
              if (v919 > 5)
              {
                int v922 = (*(unsigned __int8 *)(v920 + a2 + 3) << 24) | (*(unsigned __int8 *)(v920 + a2 + 2) << 16);
                int v921 = *(unsigned __int8 *)(v920 + a2 + 1) << 8;
              }
              else
              {
                int v921 = *(unsigned __int8 *)(v920 + a2 + 2) << 16;
                int v922 = *(unsigned __int8 *)(v920 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 60) |= ((v922 | v921 | *(unsigned __int8 *)(a2 + v920)) >> v919) & 0x7FFFF;
              unint64_t v937 = (*(unsigned char *)a3 - 2) & 7;
              unint64_t v938 = (unint64_t)(*a3 + 254) >> 3;
              if (v937 > 5)
              {
                int v940 = (*(unsigned __int8 *)(v938 + a2 + 3) << 24) | (*(unsigned __int8 *)(v938 + a2 + 2) << 16);
                int v939 = *(unsigned __int8 *)(v938 + a2 + 1) << 8;
              }
              else
              {
                int v939 = *(unsigned __int8 *)(v938 + a2 + 2) << 16;
                int v940 = *(unsigned __int8 *)(v938 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 64) |= ((v940 | v939 | *(unsigned __int8 *)(a2 + v938)) >> v937) & 0x7FFFF;
              unint64_t v955 = *a3 + 273;
              unint64_t v956 = v955 & 7;
              unint64_t v957 = v955 >> 3;
              if (v956 > 5)
              {
                int v959 = (*(unsigned __int8 *)(v957 + a2 + 3) << 24) | (*(unsigned __int8 *)(v957 + a2 + 2) << 16);
                int v958 = *(unsigned __int8 *)(v957 + a2 + 1) << 8;
              }
              else
              {
                int v958 = *(unsigned __int8 *)(v957 + a2 + 2) << 16;
                int v959 = *(unsigned __int8 *)(v957 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 68) |= ((v959 | v958 | *(unsigned __int8 *)(a2 + v957)) >> v956) & 0x7FFFF;
              unint64_t v975 = *a3 + 292;
              unint64_t v976 = v975 & 7;
              unint64_t v977 = v975 >> 3;
              if (v976 > 5)
              {
                int v979 = (*(unsigned __int8 *)(v977 + a2 + 3) << 24) | (*(unsigned __int8 *)(v977 + a2 + 2) << 16);
                int v978 = *(unsigned __int8 *)(v977 + a2 + 1) << 8;
              }
              else
              {
                int v978 = *(unsigned __int8 *)(v977 + a2 + 2) << 16;
                int v979 = *(unsigned __int8 *)(v977 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 72) |= ((v979 | v978 | *(unsigned __int8 *)(a2 + v977)) >> v976) & 0x7FFFF;
              unint64_t v992 = *a3 + 311;
              unint64_t v993 = v992 & 7;
              unint64_t v994 = v992 >> 3;
              if (v993 > 5)
              {
                int v996 = (*(unsigned __int8 *)(v994 + a2 + 3) << 24) | (*(unsigned __int8 *)(v994 + a2 + 2) << 16);
                int v995 = *(unsigned __int8 *)(v994 + a2 + 1) << 8;
              }
              else
              {
                int v995 = *(unsigned __int8 *)(v994 + a2 + 2) << 16;
                int v996 = *(unsigned __int8 *)(v994 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 76) |= ((v996 | v995 | *(unsigned __int8 *)(a2 + v994)) >> v993) & 0x7FFFF;
              uint64_t v22 = 330;
              break;
            case 8:
              *(_DWORD *)(result + 16) = 8;
              unint64_t v332 = (unint64_t)(*a3 + 8) >> 3;
              uint64_t v333 = *a3 & 7;
              if (v333) {
                unsigned int v334 = ((*(unsigned __int8 *)(a2 + v332 + 2) << 16) | (*(unsigned __int8 *)(a2 + v332 + 1) << 8) | *(unsigned __int8 *)(a2 + v332)) >> v333;
              }
              else {
                LOWORD(v334) = *(_WORD *)(a2 + v332);
              }
              uint64_t v1108 = *(void *)(result + 24) | (unsigned __int16)v334;
              *(void *)(result + 24) = v1108;
              unint64_t v1109 = (unint64_t)(*a3 + 24) >> 3;
              uint64_t v1110 = *a3 & 7;
              if (v1110) {
                unsigned int v1111 = ((*(unsigned __int8 *)(a2 + v1109 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1109 + 1) << 8) | *(unsigned __int8 *)(a2 + v1109)) >> v1110;
              }
              else {
                unsigned int v1111 = *(unsigned __int16 *)(a2 + v1109);
              }
              uint64_t v1160 = v1108 | (v1111 << 16);
              *(void *)(result + 24) = v1160;
              *(void *)(result + 24) = v1160 | ((unint64_t)((((*(unsigned __int8 *)(a2
                                                                                           + ((unint64_t)(*a3 + 40) >> 3)
                                                                                           + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 40) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 40) >> 3))) >> (*a3 & 7)) & 0x1FFFF) << 32);
              unsigned int v1161 = (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 57) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 57) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 57) >> 3))) >> ((*(unsigned char *)a3 + 57) & 7)) & 0x1FFFF | *(_DWORD *)(result + 32);
              *(_DWORD *)(result + 32) = v1161;
              unint64_t v1162 = *a3 + 74;
              unint64_t v1163 = v1162 & 7;
              unint64_t v1164 = v1162 >> 3;
              if (v1163 > 1) {
                unsigned int v1165 = (*(unsigned __int8 *)(a2 + v1164 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1164 + 1) << 8) | *(unsigned __int8 *)(a2 + v1164);
              }
              else {
                unsigned int v1165 = *(unsigned __int16 *)(a2 + v1164);
              }
              *(_DWORD *)(result + 32) = v1161 | (v1165 >> v1163 << 17);
              uint64_t v22 = 89;
              break;
            case 9:
              *(_DWORD *)(result + 16) = 9;
              int v335 = (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 8) >> 3)) >> (*a3 & 7)) & 1 | *(unsigned __int16 *)(result + 24);
              *(_WORD *)(result + 24) |= (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 8) >> 3)) >> (*a3 & 7)) & 1;
              unint64_t v336 = *a3 + 9;
              unint64_t v337 = v336 & 7;
              unint64_t v338 = v336 >> 3;
              if (v337 > 3) {
                unsigned int v339 = (*(unsigned __int8 *)(a2 + v338 + 2) << 16) | (*(unsigned __int8 *)(a2 + v338 + 1) << 8) | *(unsigned __int8 *)(a2 + v338);
              }
              else {
                unsigned int v339 = *(unsigned __int16 *)(a2 + v338);
              }
              *(_WORD *)(result + 24) = (2 * ((v339 >> v337) & 0x1FFF)) | v335;
              unint64_t v515 = *a3 + 22;
              unint64_t v516 = v515 & 7;
              unint64_t v517 = v515 >> 3;
              if (v516 > 3) {
                unsigned int v518 = (*(unsigned __int8 *)(a2 + v517 + 2) << 16) | (*(unsigned __int8 *)(a2 + v517 + 1) << 8) | *(unsigned __int8 *)(a2 + v517);
              }
              else {
                unsigned int v518 = *(unsigned __int16 *)(a2 + v517);
              }
              *(_WORD *)(result + 26) |= (v518 >> v516) & 0x1FFF;
              unint64_t v573 = *a3 + 35;
              unint64_t v574 = v573 & 7;
              unint64_t v575 = v573 >> 3;
              if (v574 > 3) {
                unsigned int v576 = (*(unsigned __int8 *)(a2 + v575 + 2) << 16) | (*(unsigned __int8 *)(a2 + v575 + 1) << 8) | *(unsigned __int8 *)(a2 + v575);
              }
              else {
                unsigned int v576 = *(unsigned __int16 *)(a2 + v575);
              }
              *(_WORD *)(result + 28) |= (v576 >> v574) & 0x1FFF;
              unint64_t v620 = *a3 & 7;
              unint64_t v621 = (unint64_t)(*a3 + 48) >> 3;
              if (v620 > 3) {
                unsigned int v622 = (*(unsigned __int8 *)(a2 + v621 + 2) << 16) | (*(unsigned __int8 *)(a2 + v621 + 1) << 8) | *(unsigned __int8 *)(a2 + v621);
              }
              else {
                unsigned int v622 = *(unsigned __int16 *)(a2 + v621);
              }
              *(_WORD *)(result + 30) |= (v622 >> v620) & 0x1FFF;
              unint64_t v662 = *a3 + 61;
              unint64_t v663 = v662 & 7;
              unint64_t v664 = v662 >> 3;
              if (v663 > 3) {
                unsigned int v665 = (*(unsigned __int8 *)(a2 + v664 + 2) << 16) | (*(unsigned __int8 *)(a2 + v664 + 1) << 8) | *(unsigned __int8 *)(a2 + v664);
              }
              else {
                unsigned int v665 = *(unsigned __int16 *)(a2 + v664);
              }
              *(_WORD *)(result + 32) |= (v665 >> v663) & 0x1FFF;
              unint64_t v702 = *a3 + 74;
              unint64_t v703 = v702 & 7;
              unint64_t v704 = v702 >> 3;
              if (v703 > 3) {
                unsigned int v705 = (*(unsigned __int8 *)(a2 + v704 + 2) << 16) | (*(unsigned __int8 *)(a2 + v704 + 1) << 8) | *(unsigned __int8 *)(a2 + v704);
              }
              else {
                unsigned int v705 = *(unsigned __int16 *)(a2 + v704);
              }
              *(_WORD *)(result + 34) |= (v705 >> v703) & 0x1FFF;
              unint64_t v740 = *a3 + 87;
              unint64_t v741 = v740 & 7;
              unint64_t v742 = v740 >> 3;
              if (v741 > 3) {
                unsigned int v743 = (*(unsigned __int8 *)(a2 + v742 + 2) << 16) | (*(unsigned __int8 *)(a2 + v742 + 1) << 8) | *(unsigned __int8 *)(a2 + v742);
              }
              else {
                unsigned int v743 = *(unsigned __int16 *)(a2 + v742);
              }
              *(_WORD *)(result + 36) |= (v743 >> v741) & 0x1FFF;
              unint64_t v776 = *a3 + 100;
              unint64_t v777 = v776 & 7;
              unint64_t v778 = v776 >> 3;
              if (v777 > 3) {
                unsigned int v779 = (*(unsigned __int8 *)(a2 + v778 + 2) << 16) | (*(unsigned __int8 *)(a2 + v778 + 1) << 8) | *(unsigned __int8 *)(a2 + v778);
              }
              else {
                unsigned int v779 = *(unsigned __int16 *)(a2 + v778);
              }
              *(_WORD *)(result + 38) |= (v779 >> v777) & 0x1FFF;
              unint64_t v810 = *a3 + 113;
              unint64_t v811 = v810 & 7;
              unint64_t v812 = v810 >> 3;
              if (v811 > 3) {
                unsigned int v813 = (*(unsigned __int8 *)(a2 + v812 + 2) << 16) | (*(unsigned __int8 *)(a2 + v812 + 1) << 8) | *(unsigned __int8 *)(a2 + v812);
              }
              else {
                unsigned int v813 = *(unsigned __int16 *)(a2 + v812);
              }
              *(_WORD *)(result + 40) |= (v813 >> v811) & 0x1FFF;
              unint64_t v833 = *a3 + 126;
              unint64_t v834 = v833 & 7;
              unint64_t v835 = v833 >> 3;
              if (v834 > 3) {
                unsigned int v836 = (*(unsigned __int8 *)(a2 + v835 + 2) << 16) | (*(unsigned __int8 *)(a2 + v835 + 1) << 8) | *(unsigned __int8 *)(a2 + v835);
              }
              else {
                unsigned int v836 = *(unsigned __int16 *)(a2 + v835);
              }
              *(_WORD *)(result + 42) |= (v836 >> v834) & 0x1FFF;
              unint64_t v854 = (*(unsigned char *)a3 - 117) & 7;
              unint64_t v855 = (unint64_t)(*a3 + 139) >> 3;
              if (v854 > 3) {
                unsigned int v856 = (*(unsigned __int8 *)(a2 + v855 + 2) << 16) | (*(unsigned __int8 *)(a2 + v855 + 1) << 8) | *(unsigned __int8 *)(a2 + v855);
              }
              else {
                unsigned int v856 = *(unsigned __int16 *)(a2 + v855);
              }
              *(_WORD *)(result + 44) |= (v856 >> v854) & 0x1FFF;
              unint64_t v871 = *a3 & 7;
              unint64_t v872 = (unint64_t)(*a3 + 152) >> 3;
              if (v871 > 3) {
                unsigned int v873 = (*(unsigned __int8 *)(a2 + v872 + 2) << 16) | (*(unsigned __int8 *)(a2 + v872 + 1) << 8) | *(unsigned __int8 *)(a2 + v872);
              }
              else {
                unsigned int v873 = *(unsigned __int16 *)(a2 + v872);
              }
              *(_WORD *)(result + 46) |= (v873 >> v871) & 0x1FFF;
              unint64_t v888 = (*(unsigned char *)a3 - 91) & 7;
              unint64_t v889 = (unint64_t)(*a3 + 165) >> 3;
              if (v888 > 3) {
                unsigned int v890 = (*(unsigned __int8 *)(a2 + v889 + 2) << 16) | (*(unsigned __int8 *)(a2 + v889 + 1) << 8) | *(unsigned __int8 *)(a2 + v889);
              }
              else {
                unsigned int v890 = *(unsigned __int16 *)(a2 + v889);
              }
              *(_WORD *)(result + 48) |= (v890 >> v888) & 0x1FFF;
              unint64_t v905 = (*(unsigned char *)a3 - 78) & 7;
              unint64_t v906 = (unint64_t)(*a3 + 178) >> 3;
              if (v905 > 3) {
                unsigned int v907 = (*(unsigned __int8 *)(a2 + v906 + 2) << 16) | (*(unsigned __int8 *)(a2 + v906 + 1) << 8) | *(unsigned __int8 *)(a2 + v906);
              }
              else {
                unsigned int v907 = *(unsigned __int16 *)(a2 + v906);
              }
              *(_WORD *)(result + 50) |= (v907 >> v905) & 0x1FFF;
              unint64_t v923 = (*(unsigned char *)a3 - 65) & 7;
              unint64_t v924 = (unint64_t)(*a3 + 191) >> 3;
              if (v923 > 3) {
                unsigned int v925 = (*(unsigned __int8 *)(a2 + v924 + 2) << 16) | (*(unsigned __int8 *)(a2 + v924 + 1) << 8) | *(unsigned __int8 *)(a2 + v924);
              }
              else {
                unsigned int v925 = *(unsigned __int16 *)(a2 + v924);
              }
              *(_WORD *)(result + 52) |= (v925 >> v923) & 0x1FFF;
              unint64_t v941 = (*(unsigned char *)a3 - 52) & 7;
              unint64_t v942 = (unint64_t)(*a3 + 204) >> 3;
              if (v941 > 3) {
                unsigned int v943 = (*(unsigned __int8 *)(a2 + v942 + 2) << 16) | (*(unsigned __int8 *)(a2 + v942 + 1) << 8) | *(unsigned __int8 *)(a2 + v942);
              }
              else {
                unsigned int v943 = *(unsigned __int16 *)(a2 + v942);
              }
              *(_WORD *)(result + 54) |= (v943 >> v941) & 0x1FFF;
              unint64_t v960 = (*(unsigned char *)a3 - 39) & 7;
              unint64_t v961 = (unint64_t)(*a3 + 217) >> 3;
              if (v960 > 3) {
                unsigned int v962 = (*(unsigned __int8 *)(a2 + v961 + 2) << 16) | (*(unsigned __int8 *)(a2 + v961 + 1) << 8) | *(unsigned __int8 *)(a2 + v961);
              }
              else {
                unsigned int v962 = *(unsigned __int16 *)(a2 + v961);
              }
              *(_WORD *)(result + 56) |= (v962 >> v960) & 0x1FFF;
              unint64_t v980 = (*(unsigned char *)a3 - 26) & 7;
              unint64_t v981 = (unint64_t)(*a3 + 230) >> 3;
              if (v980 > 3) {
                unsigned int v982 = (*(unsigned __int8 *)(a2 + v981 + 2) << 16) | (*(unsigned __int8 *)(a2 + v981 + 1) << 8) | *(unsigned __int8 *)(a2 + v981);
              }
              else {
                unsigned int v982 = *(unsigned __int16 *)(a2 + v981);
              }
              *(_WORD *)(result + 58) |= (v982 >> v980) & 0x1FFF;
              unint64_t v997 = (*(unsigned char *)a3 - 13) & 7;
              unint64_t v998 = (unint64_t)(*a3 + 243) >> 3;
              if (v997 > 3) {
                unsigned int v999 = (*(unsigned __int8 *)(a2 + v998 + 2) << 16) | (*(unsigned __int8 *)(a2 + v998 + 1) << 8) | *(unsigned __int8 *)(a2 + v998);
              }
              else {
                unsigned int v999 = *(unsigned __int16 *)(a2 + v998);
              }
              *(_WORD *)(result + 60) |= (v999 >> v997) & 0x1FFF;
              unint64_t v1008 = *a3 & 7;
              unint64_t v1009 = (unint64_t)(*a3 + 256) >> 3;
              if (v1008 > 3) {
                unsigned int v1010 = (*(unsigned __int8 *)(a2 + v1009 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1009 + 1) << 8) | *(unsigned __int8 *)(a2 + v1009);
              }
              else {
                unsigned int v1010 = *(unsigned __int16 *)(a2 + v1009);
              }
              *(_WORD *)(result + 62) |= (v1010 >> v1008) & 0x1FFF;
              unint64_t v1015 = *a3 + 269;
              unint64_t v1016 = v1015 & 7;
              unint64_t v1017 = v1015 >> 3;
              if (v1016 > 3) {
                unsigned int v1018 = (*(unsigned __int8 *)(a2 + v1017 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1017 + 1) << 8) | *(unsigned __int8 *)(a2 + v1017);
              }
              else {
                unsigned int v1018 = *(unsigned __int16 *)(a2 + v1017);
              }
              *(_WORD *)(result + 64) |= (v1018 >> v1016) & 0x1FFF;
              unint64_t v1023 = *a3 + 282;
              unint64_t v1024 = v1023 & 7;
              unint64_t v1025 = v1023 >> 3;
              if (v1024 > 3) {
                unsigned int v1026 = (*(unsigned __int8 *)(a2 + v1025 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1025 + 1) << 8) | *(unsigned __int8 *)(a2 + v1025);
              }
              else {
                unsigned int v1026 = *(unsigned __int16 *)(a2 + v1025);
              }
              *(_WORD *)(result + 66) |= (v1026 >> v1024) & 0x1FFF;
              unint64_t v1031 = *a3 + 295;
              unint64_t v1032 = v1031 & 7;
              unint64_t v1033 = v1031 >> 3;
              if (v1032 > 3) {
                unsigned int v1034 = (*(unsigned __int8 *)(a2 + v1033 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1033 + 1) << 8) | *(unsigned __int8 *)(a2 + v1033);
              }
              else {
                unsigned int v1034 = *(unsigned __int16 *)(a2 + v1033);
              }
              *(_WORD *)(result + 68) |= (v1034 >> v1032) & 0x1FFF;
              unint64_t v1039 = *a3 + 308;
              unint64_t v1040 = v1039 & 7;
              unint64_t v1041 = v1039 >> 3;
              if (v1040 > 3) {
                unsigned int v1042 = (*(unsigned __int8 *)(a2 + v1041 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1041 + 1) << 8) | *(unsigned __int8 *)(a2 + v1041);
              }
              else {
                unsigned int v1042 = *(unsigned __int16 *)(a2 + v1041);
              }
              *(_WORD *)(result + 70) |= (v1042 >> v1040) & 0x1FFF;
              unint64_t v1047 = *a3 + 321;
              unint64_t v1048 = v1047 & 7;
              unint64_t v1049 = v1047 >> 3;
              if (v1048 > 3) {
                unsigned int v1050 = (*(unsigned __int8 *)(a2 + v1049 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1049 + 1) << 8) | *(unsigned __int8 *)(a2 + v1049);
              }
              else {
                unsigned int v1050 = *(unsigned __int16 *)(a2 + v1049);
              }
              *(_WORD *)(result + 72) |= (v1050 >> v1048) & 0x1FFF;
              unint64_t v1055 = *a3 + 334;
              unint64_t v1056 = v1055 & 7;
              unint64_t v1057 = v1055 >> 3;
              if (v1056 > 3) {
                unsigned int v1058 = (*(unsigned __int8 *)(a2 + v1057 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1057 + 1) << 8) | *(unsigned __int8 *)(a2 + v1057);
              }
              else {
                unsigned int v1058 = *(unsigned __int16 *)(a2 + v1057);
              }
              *(_WORD *)(result + 74) |= (v1058 >> v1056) & 0x1FFF;
              unint64_t v1062 = *a3 + 347;
              unint64_t v1063 = v1062 & 7;
              unint64_t v1064 = v1062 >> 3;
              if (v1063 > 3) {
                unsigned int v1065 = (*(unsigned __int8 *)(a2 + v1064 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1064 + 1) << 8) | *(unsigned __int8 *)(a2 + v1064);
              }
              else {
                unsigned int v1065 = *(unsigned __int16 *)(a2 + v1064);
              }
              *(_WORD *)(result + 76) |= (v1065 >> v1063) & 0x1FFF;
              unint64_t v1069 = *a3 & 7;
              unint64_t v1070 = (unint64_t)(*a3 + 360) >> 3;
              if (v1069 > 3) {
                unsigned int v1071 = (*(unsigned __int8 *)(a2 + v1070 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1070 + 1) << 8) | *(unsigned __int8 *)(a2 + v1070);
              }
              else {
                unsigned int v1071 = *(unsigned __int16 *)(a2 + v1070);
              }
              *(_WORD *)(result + 78) |= (v1071 >> v1069) & 0x1FFF;
              unint64_t v1075 = *a3 + 373;
              unint64_t v1076 = v1075 & 7;
              unint64_t v1077 = v1075 >> 3;
              if (v1076 > 3) {
                unsigned int v1078 = (*(unsigned __int8 *)(a2 + v1077 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1077 + 1) << 8) | *(unsigned __int8 *)(a2 + v1077);
              }
              else {
                unsigned int v1078 = *(unsigned __int16 *)(a2 + v1077);
              }
              *(_WORD *)(result + 80) |= (v1078 >> v1076) & 0x1FFF;
              unint64_t v1082 = (*(unsigned char *)a3 - 126) & 7;
              unint64_t v1083 = (unint64_t)(*a3 + 386) >> 3;
              if (v1082 > 3) {
                unsigned int v1084 = (*(unsigned __int8 *)(a2 + v1083 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1083 + 1) << 8) | *(unsigned __int8 *)(a2 + v1083);
              }
              else {
                unsigned int v1084 = *(unsigned __int16 *)(a2 + v1083);
              }
              *(_WORD *)(result + 82) |= (v1084 >> v1082) & 0x1FFF;
              unint64_t v1088 = (*(unsigned char *)a3 - 113) & 7;
              unint64_t v1089 = (unint64_t)(*a3 + 399) >> 3;
              if (v1088 > 3) {
                unsigned int v1090 = (*(unsigned __int8 *)(a2 + v1089 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1089 + 1) << 8) | *(unsigned __int8 *)(a2 + v1089);
              }
              else {
                unsigned int v1090 = *(unsigned __int16 *)(a2 + v1089);
              }
              *(_WORD *)(result + 84) |= (v1090 >> v1088) & 0x1FFF;
              unint64_t v1094 = (*(unsigned char *)a3 - 100) & 7;
              unint64_t v1095 = (unint64_t)(*a3 + 412) >> 3;
              if (v1094 > 3) {
                unsigned int v1096 = (*(unsigned __int8 *)(a2 + v1095 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1095 + 1) << 8) | *(unsigned __int8 *)(a2 + v1095);
              }
              else {
                unsigned int v1096 = *(unsigned __int16 *)(a2 + v1095);
              }
              *(_WORD *)(result + 86) |= (v1096 >> v1094) & 0x1FFF;
              uint64_t v22 = 425;
              break;
            case 0xA:
              *(_DWORD *)(result + 16) = 10;
              unint64_t v340 = (unint64_t)(*a3 + 8) >> 3;
              uint64_t v341 = *a3 & 7;
              if (v341)
              {
                unint64_t v342 = (unsigned __int8 *)(a2 + v340);
                unint64_t v343 = (((unint64_t)v342[4] << 32) | ((unint64_t)v342[3] << 24) | ((unint64_t)v342[2] << 16) | ((unint64_t)v342[1] << 8) | *v342) >> v341;
              }
              else
              {
                LODWORD(v343) = *(_DWORD *)(a2 + v340);
              }
              *(_DWORD *)(result + 24) |= v343;
              v1112 = (unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 40) >> 3));
              unint64_t v1113 = ((((unint64_t)v1112[4] << 32) | ((unint64_t)v1112[3] << 24) | ((unint64_t)v1112[2] << 16) | ((unint64_t)v1112[1] << 8) | *v1112) >> (*a3 & 7)) & 0x1FFFFFFFFLL | *(void *)(result + 32);
              *(void *)(result + 32) = v1113;
              unint64_t v1114 = *a3 + 73;
              unint64_t v1115 = v1114 & 7;
              unint64_t v1116 = v1114 >> 3;
              if (v1115 > 1) {
                unsigned int v1117 = (*(unsigned __int8 *)(a2 + v1116 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1116 + 1) << 8) | *(unsigned __int8 *)(a2 + v1116);
              }
              else {
                unsigned int v1117 = *(unsigned __int16 *)(a2 + v1116);
              }
              unint64_t v1118 = v1113 | ((unint64_t)((v1117 >> v1115) & 0x7FFF) << 33);
              *(void *)(result + 32) = v1118;
              unint64_t v1119 = *a3 & 7;
              unint64_t v1120 = (unint64_t)(*a3 + 88) >> 3;
              if (v1119 > 1) {
                unsigned int v1121 = (*(unsigned __int8 *)(a2 + v1120 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1120 + 1) << 8) | *(unsigned __int8 *)(a2 + v1120);
              }
              else {
                unsigned int v1121 = *(unsigned __int16 *)(a2 + v1120);
              }
              *(void *)(result + 32) = v1118 | ((unint64_t)((v1121 >> v1119) & 0x7FFF) << 48);
              unint64_t v1122 = *a3 + 103;
              unint64_t v1123 = v1122 & 7;
              unint64_t v1124 = v1122 >> 3;
              if (v1123 > 1) {
                unsigned int v1125 = (*(unsigned __int8 *)(a2 + v1124 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1124 + 1) << 8) | *(unsigned __int8 *)(a2 + v1124);
              }
              else {
                unsigned int v1125 = *(unsigned __int16 *)(a2 + v1124);
              }
              *(_WORD *)(result + 40) |= (v1125 >> v1123) & 0x7FFF;
              unint64_t v1126 = *a3 + 118;
              unint64_t v1127 = v1126 & 7;
              unint64_t v1128 = v1126 >> 3;
              if (v1127 > 1) {
                unsigned int v1129 = (*(unsigned __int8 *)(a2 + v1128 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1128 + 1) << 8) | *(unsigned __int8 *)(a2 + v1128);
              }
              else {
                unsigned int v1129 = *(unsigned __int16 *)(a2 + v1128);
              }
              *(_WORD *)(result + 42) |= (v1129 >> v1127) & 0x7FFF;
              unint64_t v1130 = (*(unsigned char *)a3 - 123) & 7;
              unint64_t v1131 = (unint64_t)(*a3 + 133) >> 3;
              if (v1130 > 1) {
                unsigned int v1132 = (*(unsigned __int8 *)(a2 + v1131 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1131 + 1) << 8) | *(unsigned __int8 *)(a2 + v1131);
              }
              else {
                unsigned int v1132 = *(unsigned __int16 *)(a2 + v1131);
              }
              *(_WORD *)(result + 44) |= (v1132 >> v1130) & 0x7FFF;
              uint64_t v22 = 148;
              break;
            case 0xB:
              *(_DWORD *)(result + 16) = 11;
              unint64_t v344 = *a3 & 7;
              unint64_t v345 = (unint64_t)(*a3 + 8) >> 3;
              if (v344 > 1) {
                unsigned int v346 = (*(unsigned __int8 *)(a2 + v345 + 2) << 16) | (*(unsigned __int8 *)(a2 + v345 + 1) << 8) | *(unsigned __int8 *)(a2 + v345);
              }
              else {
                unsigned int v346 = *(unsigned __int16 *)(a2 + v345);
              }
              *(_WORD *)(result + 24) |= (v346 >> v344) & 0x7FFF;
              unint64_t v519 = *a3 + 23;
              unint64_t v520 = v519 & 7;
              unint64_t v521 = v519 >> 3;
              if (v520 > 1) {
                unsigned int v522 = (*(unsigned __int8 *)(a2 + v521 + 2) << 16) | (*(unsigned __int8 *)(a2 + v521 + 1) << 8) | *(unsigned __int8 *)(a2 + v521);
              }
              else {
                unsigned int v522 = *(unsigned __int16 *)(a2 + v521);
              }
              *(_WORD *)(result + 26) |= (v522 >> v520) & 0x7FFF;
              uint64_t v22 = 38;
              break;
            case 0xC:
              *(_DWORD *)(result + 16) = 12;
              unint64_t v347 = *a3 & 7;
              unint64_t v348 = (unint64_t)(*a3 + 8) >> 3;
              if (v347 > 1) {
                unsigned int v349 = (*(unsigned __int8 *)(a2 + v348 + 2) << 16) | (*(unsigned __int8 *)(a2 + v348 + 1) << 8) | *(unsigned __int8 *)(a2 + v348);
              }
              else {
                unsigned int v349 = *(unsigned __int16 *)(a2 + v348);
              }
              *(_WORD *)(result + 24) |= (v349 >> v347) & 0x7FFF;
              unint64_t v523 = *a3 + 23;
              unint64_t v524 = v523 & 7;
              unint64_t v525 = v523 >> 3;
              if (v524 > 1) {
                unsigned int v526 = (*(unsigned __int8 *)(a2 + v525 + 2) << 16) | (*(unsigned __int8 *)(a2 + v525 + 1) << 8) | *(unsigned __int8 *)(a2 + v525);
              }
              else {
                unsigned int v526 = *(unsigned __int16 *)(a2 + v525);
              }
              *(_WORD *)(result + 26) |= (v526 >> v524) & 0x7FFF;
              unint64_t v577 = *a3 + 38;
              unint64_t v578 = v577 >> 3;
              unint64_t v579 = v577 & 7;
              if (v579) {
                unsigned int v580 = ((*(unsigned __int8 *)(a2 + v578 + 2) << 16) | (*(unsigned __int8 *)(a2 + v578 + 1) << 8) | *(unsigned __int8 *)(a2 + v578)) >> v579;
              }
              else {
                LOWORD(v580) = *(_WORD *)(a2 + v578);
              }
              *(_WORD *)(result + 28) |= v580;
              unint64_t v1133 = *a3 + 54;
              unint64_t v1134 = v1133 & 7;
              unint64_t v1135 = v1133 >> 3;
              if (v1134 == 7) {
                int v1136 = *(_DWORD *)(a2 + v1135) >> 7;
              }
              else {
                int v1136 = ((*(unsigned __int8 *)(a2 + v1135 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1135 + 1) << 8) | *(unsigned __int8 *)(a2 + v1135)) >> v1134;
              }
              *(_DWORD *)(result + 32) |= v1136 & 0x3FFFF;
              uint64_t v1137 = *a3 & 7;
              unint64_t v1138 = (unint64_t)(*a3 + 72) >> 3;
              if (v1137 == 7) {
                int v1139 = *(_DWORD *)(a2 + v1138) >> 7;
              }
              else {
                int v1139 = ((*(unsigned __int8 *)(a2 + v1138 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1138 + 1) << 8) | *(unsigned __int8 *)(a2 + v1138)) >> v1137;
              }
              int v1140 = *(_DWORD *)(result + 40);
              *(_DWORD *)(result + 36) |= v1139 & 0x3FFFF;
              *(_DWORD *)(result + 40) = (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 90) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 90) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 90) >> 3))) >> ((*(unsigned char *)a3 + 90) & 7)) & 0x1FFFF | v1140;
              unint64_t v1141 = *a3 + 107;
              unint64_t v1142 = v1141 >> 3;
              unint64_t v1143 = v1141 & 7;
              if (v1143) {
                unsigned int v1144 = ((*(unsigned __int8 *)(a2 + v1142 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1142 + 1) << 8) | *(unsigned __int8 *)(a2 + v1142)) >> v1143;
              }
              else {
                LOWORD(v1144) = *(_WORD *)(a2 + v1142);
              }
              int v1166 = *(_DWORD *)(result + 44) | (unsigned __int16)v1144;
              *(_DWORD *)(result + 44) = v1166;
              unint64_t v1167 = *a3 + 123;
              unint64_t v1168 = v1167 >> 3;
              unint64_t v1169 = v1167 & 7;
              if (v1169) {
                unsigned int v1170 = ((*(unsigned __int8 *)(a2 + v1168 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1168 + 1) << 8) | *(unsigned __int8 *)(a2 + v1168)) >> v1169;
              }
              else {
                unsigned int v1170 = *(unsigned __int16 *)(a2 + v1168);
              }
              *(_DWORD *)(result + 44) = v1166 | (v1170 << 16);
              uint64_t v22 = 139;
              break;
            case 0xD:
              *(_DWORD *)(result + 16) = 13;
              unint64_t v350 = *a3 & 7;
              unint64_t v351 = (unint64_t)(*a3 + 8) >> 3;
              if (v350 > 1) {
                unsigned int v352 = (*(unsigned __int8 *)(a2 + v351 + 2) << 16) | (*(unsigned __int8 *)(a2 + v351 + 1) << 8) | *(unsigned __int8 *)(a2 + v351);
              }
              else {
                unsigned int v352 = *(unsigned __int16 *)(a2 + v351);
              }
              *(_WORD *)(result + 24) |= (v352 >> v350) & 0x7FFF;
              unint64_t v527 = *a3 + 23;
              unint64_t v528 = v527 & 7;
              unint64_t v529 = v527 >> 3;
              if (v528 > 1) {
                unsigned int v530 = (*(unsigned __int8 *)(a2 + v529 + 2) << 16) | (*(unsigned __int8 *)(a2 + v529 + 1) << 8) | *(unsigned __int8 *)(a2 + v529);
              }
              else {
                unsigned int v530 = *(unsigned __int16 *)(a2 + v529);
              }
              *(_WORD *)(result + 26) |= (v530 >> v528) & 0x7FFF;
              unint64_t v581 = *a3 + 38;
              unint64_t v582 = v581 & 7;
              unint64_t v583 = v581 >> 3;
              if (v582 > 1) {
                unsigned int v584 = (*(unsigned __int8 *)(a2 + v583 + 2) << 16) | (*(unsigned __int8 *)(a2 + v583 + 1) << 8) | *(unsigned __int8 *)(a2 + v583);
              }
              else {
                unsigned int v584 = *(unsigned __int16 *)(a2 + v583);
              }
              *(_WORD *)(result + 28) |= (v584 >> v582) & 0x7FFF;
              unint64_t v623 = *a3 + 53;
              unint64_t v624 = v623 & 7;
              unint64_t v625 = v623 >> 3;
              if (v624 > 1) {
                unsigned int v626 = (*(unsigned __int8 *)(a2 + v625 + 2) << 16) | (*(unsigned __int8 *)(a2 + v625 + 1) << 8) | *(unsigned __int8 *)(a2 + v625);
              }
              else {
                unsigned int v626 = *(unsigned __int16 *)(a2 + v625);
              }
              uint64_t v666 = *(unsigned int *)(result + 40);
              *(_WORD *)(result + 30) |= (v626 >> v624) & 0x7FFF;
              int v667 = *(_DWORD *)(result + 36);
              *(_DWORD *)(result + 32) |= (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 68) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 68) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 68) >> 3))) >> ((*(unsigned char *)a3 + 68) & 7)) & 0x1FFFF;
              *(_DWORD *)(result + 36) = (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 85) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 85) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 85) >> 3))) >> ((*(unsigned char *)a3 + 85) & 7)) & 0x1FFFF | v667;
              unint64_t v668 = v666 | ((unint64_t)*(unsigned __int16 *)(result + 44) << 32);
              unsigned int v669 = (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 102) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 102) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 102) >> 3))) >> ((*(unsigned char *)a3 + 102) & 7)) & 0x1FFFF;
              *(_DWORD *)(result + 40) = v666 | v669;
              unint64_t v670 = *a3 + 119;
              unint64_t v671 = v670 & 7;
              unint64_t v672 = v670 >> 3;
              if (v671 > 1) {
                unsigned int v673 = (*(unsigned __int8 *)(a2 + v672 + 2) << 16) | (*(unsigned __int8 *)(a2 + v672 + 1) << 8) | *(unsigned __int8 *)(a2 + v672);
              }
              else {
                unsigned int v673 = *(unsigned __int16 *)(a2 + v672);
              }
              uint64_t v706 = v669 | (v673 >> v671 << 17);
              *(_WORD *)(result + 44) = WORD2(v668);
              *(_DWORD *)(result + 40) = v668 | v706;
              unint64_t v707 = (*(unsigned char *)a3 - 122) & 7;
              unint64_t v708 = (unint64_t)(*a3 + 134) >> 3;
              if (v707 > 2) {
                unsigned int v709 = (*(unsigned __int8 *)(a2 + v708 + 2) << 16) | (*(unsigned __int8 *)(a2 + v708 + 1) << 8) | *(unsigned __int8 *)(a2 + v708);
              }
              else {
                unsigned int v709 = *(unsigned __int16 *)(a2 + v708);
              }
              unint64_t v744 = v706 | ((unint64_t)((v709 >> v707) & 0x3FFF) << 32) | v668;
              *(_DWORD *)(result + 40) = v744;
              *(_WORD *)(result + 44) = WORD2(v744);
              unint64_t v745 = (*(unsigned char *)a3 - 108) & 7;
              unint64_t v746 = (unint64_t)(*a3 + 148) >> 3;
              if (v745 > 2) {
                unsigned int v747 = (*(unsigned __int8 *)(a2 + v746 + 2) << 16) | (*(unsigned __int8 *)(a2 + v746 + 1) << 8) | *(unsigned __int8 *)(a2 + v746);
              }
              else {
                unsigned int v747 = *(unsigned __int16 *)(a2 + v746);
              }
              *(_WORD *)(result + 46) |= (v747 >> v745) & 0x3FFF;
              int v780 = *(_DWORD *)(result + 52);
              *(_DWORD *)(result + 48) |= (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 162) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 162) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 162) >> 3))) >> ((*(unsigned char *)a3 - 94) & 7)) & 0x1FFFF;
              *(_DWORD *)(result + 52) = (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 179) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 179) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 179) >> 3))) >> ((*(unsigned char *)a3 - 77) & 7)) & 0x1FFFF | v780;
              *(_DWORD *)(result + 56) |= (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 196) >> 3) + 2) << 16) | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 196) >> 3) + 1) << 8) | *(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 196) >> 3))) >> ((*(unsigned char *)a3 - 60) & 7)) & 0x1FFFF;
              unint64_t v781 = (unint64_t)(*a3 + 213) >> 3;
              if (((*(unsigned char *)a3 - 43) & 7) != 0) {
                unsigned int v782 = ((*(unsigned __int8 *)(a2 + v781 + 2) << 16) | (*(unsigned __int8 *)(a2 + v781 + 1) << 8) | *(unsigned __int8 *)(a2 + v781)) >> ((*(unsigned char *)a3 - 43) & 7);
              }
              else {
                LOWORD(v782) = *(_WORD *)(a2 + v781);
              }
              int v1145 = *(_DWORD *)(result + 60) | (unsigned __int16)v782;
              *(_DWORD *)(result + 60) = v1145;
              unint64_t v1146 = (unint64_t)(*a3 + 229) >> 3;
              if (((*(unsigned char *)a3 - 27) & 7) != 0) {
                unsigned int v1147 = ((*(unsigned __int8 *)(a2 + v1146 + 2) << 16) | (*(unsigned __int8 *)(a2 + v1146 + 1) << 8) | *(unsigned __int8 *)(a2 + v1146)) >> ((*(unsigned char *)a3 - 27) & 7);
              }
              else {
                unsigned int v1147 = *(unsigned __int16 *)(a2 + v1146);
              }
              *(_DWORD *)(result + 60) = v1145 | (v1147 << 16);
              uint64_t v22 = 245;
              break;
            case 0xE:
              *(_DWORD *)(result + 16) = 14;
              unint64_t v353 = *a3 & 7;
              unint64_t v354 = (unint64_t)(*a3 + 8) >> 3;
              if (v353 > 2)
              {
                int v356 = (*(unsigned __int8 *)(v354 + a2 + 3) << 24) | (*(unsigned __int8 *)(v354 + a2 + 2) << 16);
                int v355 = *(unsigned __int8 *)(v354 + a2 + 1) << 8;
              }
              else
              {
                int v355 = *(unsigned __int8 *)(v354 + a2 + 2) << 16;
                int v356 = *(unsigned __int8 *)(v354 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 24) |= ((v356 | v355 | *(unsigned __int8 *)(a2 + v354)) >> v353) & 0x3FFFFF;
              unint64_t v531 = *a3 + 30;
              unint64_t v532 = v531 & 7;
              unint64_t v533 = v531 >> 3;
              if (v532 > 2)
              {
                int v535 = (*(unsigned __int8 *)(v533 + a2 + 3) << 24) | (*(unsigned __int8 *)(v533 + a2 + 2) << 16);
                int v534 = *(unsigned __int8 *)(v533 + a2 + 1) << 8;
              }
              else
              {
                int v534 = *(unsigned __int8 *)(v533 + a2 + 2) << 16;
                int v535 = *(unsigned __int8 *)(v533 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 28) |= ((v535 | v534 | *(unsigned __int8 *)(a2 + v533)) >> v532) & 0x3FFFFF;
              unint64_t v585 = *a3 + 52;
              unint64_t v586 = v585 & 7;
              unint64_t v587 = v585 >> 3;
              if (v586 > 5)
              {
                int v589 = (*(unsigned __int8 *)(v587 + a2 + 3) << 24) | (*(unsigned __int8 *)(v587 + a2 + 2) << 16);
                int v588 = *(unsigned __int8 *)(v587 + a2 + 1) << 8;
              }
              else
              {
                int v588 = *(unsigned __int8 *)(v587 + a2 + 2) << 16;
                int v589 = *(unsigned __int8 *)(v587 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 32) |= ((v589 | v588 | *(unsigned __int8 *)(a2 + v587)) >> v586) & 0x7FFFF;
              unint64_t v627 = *a3 + 71;
              unint64_t v628 = v627 & 7;
              unint64_t v629 = v627 >> 3;
              if (v628 > 2)
              {
                int v631 = (*(unsigned __int8 *)(v629 + a2 + 3) << 24) | (*(unsigned __int8 *)(v629 + a2 + 2) << 16);
                int v630 = *(unsigned __int8 *)(v629 + a2 + 1) << 8;
              }
              else
              {
                int v630 = *(unsigned __int8 *)(v629 + a2 + 2) << 16;
                int v631 = *(unsigned __int8 *)(v629 + a2 + 1) << 8;
              }
              *(_DWORD *)(result + 36) |= ((v631 | v630 | *(unsigned __int8 *)(a2 + v629)) >> v628) & 0x3FFFFF;
              uint64_t v22 = 93;
              break;
            case 0xF:
              *(_DWORD *)(result + 16) = 15;
              unint64_t v357 = *a3 & 7;
              unint64_t v358 = (unint64_t)(*a3 + 8) >> 3;
              if (v357 > 2) {
                unsigned int v359 = (*(unsigned __int8 *)(a2 + v358 + 2) << 16) | (*(unsigned __int8 *)(a2 + v358 + 1) << 8) | *(unsigned __int8 *)(a2 + v358);
              }
              else {
                unsigned int v359 = *(unsigned __int16 *)(a2 + v358);
              }
              *(_WORD *)(result + 24) |= (v359 >> v357) & 0x3FFF;
              unint64_t v536 = *a3 + 22;
              unint64_t v537 = v536 & 7;
              unint64_t v538 = v536 >> 3;
              if (v537 > 2) {
                unsigned int v539 = (*(unsigned __int8 *)(a2 + v538 + 2) << 16) | (*(unsigned __int8 *)(a2 + v538 + 1) << 8) | *(unsigned __int8 *)(a2 + v538);
              }
              else {
                unsigned int v539 = *(unsigned __int16 *)(a2 + v538);
              }
              *(_WORD *)(result + 26) |= (v539 >> v537) & 0x3FFF;
              unint64_t v590 = *a3 + 36;
              unint64_t v591 = v590 & 7;
              unint64_t v592 = v590 >> 3;
              if (v591 > 2) {
                unsigned int v593 = (*(unsigned __int8 *)(a2 + v592 + 2) << 16) | (*(unsigned __int8 *)(a2 + v592 + 1) << 8) | *(unsigned __int8 *)(a2 + v592);
              }
              else {
                unsigned int v593 = *(unsigned __int16 *)(a2 + v592);
              }
              *(_WORD *)(result + 28) |= (v593 >> v591) & 0x3FFF;
              unint64_t v632 = *a3 + 50;
              unint64_t v633 = v632 & 7;
              unint64_t v634 = v632 >> 3;
              if (v633 > 2) {
                unsigned int v635 = (*(unsigned __int8 *)(a2 + v634 + 2) << 16) | (*(unsigned __int8 *)(a2 + v634 + 1) << 8) | *(unsigned __int8 *)(a2 + v634);
              }
              else {
                unsigned int v635 = *(unsigned __int16 *)(a2 + v634);
              }
              *(_WORD *)(result + 30) |= (v635 >> v633) & 0x3FFF;
              unint64_t v674 = *a3 & 7;
              unint64_t v675 = (unint64_t)(*a3 + 64) >> 3;
              if (v674 > 3) {
                unsigned int v676 = (*(unsigned __int8 *)(a2 + v675 + 2) << 16) | (*(unsigned __int8 *)(a2 + v675 + 1) << 8) | *(unsigned __int8 *)(a2 + v675);
              }
              else {
                unsigned int v676 = *(unsigned __int16 *)(a2 + v675);
              }
              *(_WORD *)(result + 32) |= (v676 >> v674) & 0x1FFF;
              unint64_t v710 = *a3 + 77;
              unint64_t v711 = v710 & 7;
              unint64_t v712 = v710 >> 3;
              if (v711 > 3) {
                unsigned int v713 = (*(unsigned __int8 *)(a2 + v712 + 2) << 16) | (*(unsigned __int8 *)(a2 + v712 + 1) << 8) | *(unsigned __int8 *)(a2 + v712);
              }
              else {
                unsigned int v713 = *(unsigned __int16 *)(a2 + v712);
              }
              *(_WORD *)(result + 34) |= (v713 >> v711) & 0x1FFF;
              unint64_t v748 = *a3 + 90;
              unint64_t v749 = v748 & 7;
              unint64_t v750 = v748 >> 3;
              if (v749 > 3) {
                unsigned int v751 = (*(unsigned __int8 *)(a2 + v750 + 2) << 16) | (*(unsigned __int8 *)(a2 + v750 + 1) << 8) | *(unsigned __int8 *)(a2 + v750);
              }
              else {
                unsigned int v751 = *(unsigned __int16 *)(a2 + v750);
              }
              int v783 = *(_DWORD *)(result + 36) | (v751 >> v749) & 0x1FFF;
              *(_DWORD *)(result + 36) = v783;
              unint64_t v784 = *a3 + 103;
              unint64_t v785 = v784 & 7;
              unint64_t v786 = v784 >> 3;
              if (v785 == 7) {
                int v787 = *(_DWORD *)(a2 + v786) >> 7;
              }
              else {
                int v787 = ((*(unsigned __int8 *)(a2 + v786 + 2) << 16) | (*(unsigned __int8 *)(a2 + v786 + 1) << 8) | *(unsigned __int8 *)(a2 + v786)) >> v785;
              }
              *(_DWORD *)(result + 36) = ((v787 & 0x3FFFF) << 13) | v783;
              unint64_t v814 = *a3 + 121;
              unint64_t v815 = v814 & 7;
              unint64_t v816 = v814 >> 3;
              if (v815 == 7) {
                int v817 = *(_DWORD *)(a2 + v816) >> 7;
              }
              else {
                int v817 = ((*(unsigned __int8 *)(a2 + v816 + 2) << 16) | (*(unsigned __int8 *)(a2 + v816 + 1) << 8) | *(unsigned __int8 *)(a2 + v816)) >> v815;
              }
              *(_DWORD *)(result + 40) |= v817 & 0x3FFFF;
              uint64_t v837 = (*(unsigned char *)a3 - 117) & 7;
              unint64_t v838 = (unint64_t)(*a3 + 139) >> 3;
              if (v837 == 7) {
                int v839 = *(_DWORD *)(a2 + v838) >> 7;
              }
              else {
                int v839 = ((*(unsigned __int8 *)(a2 + v838 + 2) << 16) | (*(unsigned __int8 *)(a2 + v838 + 1) << 8) | *(unsigned __int8 *)(a2 + v838)) >> v837;
              }
              *(_DWORD *)(result + 44) |= v839 & 0x3FFFF;
              uint64_t v22 = 157;
              break;
            default:
              *(_DWORD *)(result + 16) = 0;
              uint64_t v90 = *a3 & 7;
              unint64_t v91 = (unint64_t)(*a3 + 8) >> 3;
              if (v90 == 7) {
                int v92 = *(_DWORD *)(a2 + v91) >> 7;
              }
              else {
                int v92 = ((*(unsigned __int8 *)(a2 + v91 + 2) << 16) | (*(unsigned __int8 *)(a2 + v91 + 1) << 8) | *(unsigned __int8 *)(a2 + v91)) >> v90;
              }
              *(_DWORD *)(result + 24) |= v92 & 0x3FFFF;
              unint64_t v483 = *a3 + 26;
              unint64_t v484 = v483 & 7;
              unint64_t v485 = v483 >> 3;
              if (v484 == 7) {
                int v486 = *(_DWORD *)(a2 + v485) >> 7;
              }
              else {
                int v486 = ((*(unsigned __int8 *)(a2 + v485 + 2) << 16) | (*(unsigned __int8 *)(a2 + v485 + 1) << 8) | *(unsigned __int8 *)(a2 + v485)) >> v484;
              }
              uint64_t v540 = *(unsigned int *)(result + 28);
              unint64_t v541 = v540 | ((unint64_t)*(unsigned __int16 *)(result + 32) << 32);
              int v542 = v486 & 0x3FFFF;
              *(_DWORD *)(result + 28) = v540 | v542;
              unint64_t v543 = *a3 + 44;
              unint64_t v544 = v543 & 7;
              unint64_t v545 = v543 >> 3;
              if (v544 > 2) {
                unsigned int v546 = (*(unsigned __int8 *)(a2 + v545 + 2) << 16) | (*(unsigned __int8 *)(a2 + v545 + 1) << 8) | *(unsigned __int8 *)(a2 + v545);
              }
              else {
                unsigned int v546 = *(unsigned __int16 *)(a2 + v545);
              }
              uint64_t v594 = v542 | (v546 >> v544 << 18);
              *(_WORD *)(result + 32) = WORD2(v541);
              *(_DWORD *)(result + 28) = v541 | v594;
              unint64_t v595 = *a3 + 58;
              unint64_t v596 = v595 & 7;
              unint64_t v597 = v595 >> 3;
              if (v596 > 3) {
                unsigned int v598 = (*(unsigned __int8 *)(a2 + v597 + 2) << 16) | (*(unsigned __int8 *)(a2 + v597 + 1) << 8) | *(unsigned __int8 *)(a2 + v597);
              }
              else {
                unsigned int v598 = *(unsigned __int16 *)(a2 + v597);
              }
              unint64_t v636 = v594 | ((unint64_t)((v598 >> v596) & 0x1FFF) << 32) | v541;
              *(_DWORD *)(result + 28) = v636;
              *(_WORD *)(result + 32) = WORD2(v636);
              unint64_t v637 = *a3 + 71;
              unint64_t v638 = v637 & 7;
              unint64_t v639 = v637 >> 3;
              if (v638 > 2) {
                unsigned int v640 = (*(unsigned __int8 *)(a2 + v639 + 2) << 16) | (*(unsigned __int8 *)(a2 + v639 + 1) << 8) | *(unsigned __int8 *)(a2 + v639);
              }
              else {
                unsigned int v640 = *(unsigned __int16 *)(a2 + v639);
              }
              *(_WORD *)(result + 34) |= (v640 >> v638) & 0x3FFF;
              unint64_t v677 = *a3 + 85;
              unint64_t v678 = v677 & 7;
              unint64_t v679 = v677 >> 3;
              if (v678 > 2) {
                unsigned int v680 = (*(unsigned __int8 *)(a2 + v679 + 2) << 16) | (*(unsigned __int8 *)(a2 + v679 + 1) << 8) | *(unsigned __int8 *)(a2 + v679);
              }
              else {
                unsigned int v680 = *(unsigned __int16 *)(a2 + v679);
              }
              *(_WORD *)(result + 36) |= (v680 >> v678) & 0x3FFF;
              unint64_t v714 = *a3 + 99;
              unint64_t v715 = v714 & 7;
              unint64_t v716 = v714 >> 3;
              if (v715 > 2) {
                unsigned int v717 = (*(unsigned __int8 *)(a2 + v716 + 2) << 16) | (*(unsigned __int8 *)(a2 + v716 + 1) << 8) | *(unsigned __int8 *)(a2 + v716);
              }
              else {
                unsigned int v717 = *(unsigned __int16 *)(a2 + v716);
              }
              *(_WORD *)(result + 38) |= (v717 >> v715) & 0x3FFF;
              unint64_t v752 = *a3 + 113;
              unint64_t v753 = v752 & 7;
              unint64_t v754 = v752 >> 3;
              if (v753 > 2) {
                unsigned int v755 = (*(unsigned __int8 *)(a2 + v754 + 2) << 16) | (*(unsigned __int8 *)(a2 + v754 + 1) << 8) | *(unsigned __int8 *)(a2 + v754);
              }
              else {
                unsigned int v755 = *(unsigned __int16 *)(a2 + v754);
              }
              *(_WORD *)(result + 40) |= (v755 >> v753) & 0x3FFF;
              unint64_t v788 = *a3 + 127;
              unint64_t v789 = v788 & 7;
              unint64_t v790 = v788 >> 3;
              if (v789 > 2) {
                unsigned int v791 = (*(unsigned __int8 *)(a2 + v790 + 2) << 16) | (*(unsigned __int8 *)(a2 + v790 + 1) << 8) | *(unsigned __int8 *)(a2 + v790);
              }
              else {
                unsigned int v791 = *(unsigned __int16 *)(a2 + v790);
              }
              *(_WORD *)(result + 42) |= (v791 >> v789) & 0x3FFF;
              unint64_t v818 = (*(unsigned char *)a3 - 115) & 7;
              unint64_t v819 = (unint64_t)(*a3 + 141) >> 3;
              if (v818 > 2) {
                unsigned int v820 = (*(unsigned __int8 *)(a2 + v819 + 2) << 16) | (*(unsigned __int8 *)(a2 + v819 + 1) << 8) | *(unsigned __int8 *)(a2 + v819);
              }
              else {
                unsigned int v820 = *(unsigned __int16 *)(a2 + v819);
              }
              *(_WORD *)(result + 44) |= (v820 >> v818) & 0x3FFF;
              *(_WORD *)(result + 46) |= (*(unsigned __int16 *)(a2 + ((unint64_t)(*a3 + 155) >> 3)) >> ((*(unsigned char *)a3 - 101) & 7)) & 0x1FF;
              *(_WORD *)(result + 48) |= (*(unsigned __int16 *)(a2 + ((unint64_t)(*a3 + 164) >> 3)) >> ((*(unsigned char *)a3 - 92) & 7)) & 0x1FF;
              unint64_t v840 = (*(unsigned char *)a3 - 83) & 7;
              unint64_t v841 = (unint64_t)(*a3 + 173) >> 3;
              if (v840 > 5) {
                unsigned int v842 = (*(unsigned __int8 *)(a2 + v841 + 2) << 16) | (*(unsigned __int8 *)(a2 + v841 + 1) << 8) | *(unsigned __int8 *)(a2 + v841);
              }
              else {
                unsigned int v842 = *(unsigned __int16 *)(a2 + v841);
              }
              *(_WORD *)(result + 50) |= (v842 >> v840) & 0x7FF;
              unint64_t v857 = *a3 & 7;
              unint64_t v858 = (unint64_t)(*a3 + 184) >> 3;
              if (v857 > 2) {
                unsigned int v859 = (*(unsigned __int8 *)(a2 + v858 + 2) << 16) | (*(unsigned __int8 *)(a2 + v858 + 1) << 8) | *(unsigned __int8 *)(a2 + v858);
              }
              else {
                unsigned int v859 = *(unsigned __int16 *)(a2 + v858);
              }
              *(_WORD *)(result + 52) |= (v859 >> v857) & 0x3FFF;
              unint64_t v874 = (*(unsigned char *)a3 - 58) & 7;
              unint64_t v875 = (unint64_t)(*a3 + 198) >> 3;
              if (v874 > 2) {
                unsigned int v876 = (*(unsigned __int8 *)(a2 + v875 + 2) << 16) | (*(unsigned __int8 *)(a2 + v875 + 1) << 8) | *(unsigned __int8 *)(a2 + v875);
              }
              else {
                unsigned int v876 = *(unsigned __int16 *)(a2 + v875);
              }
              *(_WORD *)(result + 54) |= (v876 >> v874) & 0x3FFF;
              unint64_t v891 = (*(unsigned char *)a3 - 44) & 7;
              unint64_t v892 = (unint64_t)(*a3 + 212) >> 3;
              if (v891 > 2) {
                unsigned int v893 = (*(unsigned __int8 *)(a2 + v892 + 2) << 16) | (*(unsigned __int8 *)(a2 + v892 + 1) << 8) | *(unsigned __int8 *)(a2 + v892);
              }
              else {
                unsigned int v893 = *(unsigned __int16 *)(a2 + v892);
              }
              *(_WORD *)(result + 56) |= (v893 >> v891) & 0x3FFF;
              unint64_t v908 = (*(unsigned char *)a3 - 30) & 7;
              unint64_t v909 = (unint64_t)(*a3 + 226) >> 3;
              if (v908 > 2) {
                unsigned int v910 = (*(unsigned __int8 *)(a2 + v909 + 2) << 16) | (*(unsigned __int8 *)(a2 + v909 + 1) << 8) | *(unsigned __int8 *)(a2 + v909);
              }
              else {
                unsigned int v910 = *(unsigned __int16 *)(a2 + v909);
              }
              *(_WORD *)(result + 58) |= (v910 >> v908) & 0x3FFF;
              unint64_t v926 = *a3 & 7;
              unint64_t v927 = (unint64_t)(*a3 + 240) >> 3;
              if (v926 > 2) {
                unsigned int v928 = (*(unsigned __int8 *)(a2 + v927 + 2) << 16) | (*(unsigned __int8 *)(a2 + v927 + 1) << 8) | *(unsigned __int8 *)(a2 + v927);
              }
              else {
                unsigned int v928 = *(unsigned __int16 *)(a2 + v927);
              }
              *(_WORD *)(result + 60) |= (v928 >> v926) & 0x3FFF;
              unint64_t v944 = (*(unsigned char *)a3 - 2) & 7;
              unint64_t v945 = (unint64_t)(*a3 + 254) >> 3;
              if (v944 > 2) {
                unsigned int v946 = (*(unsigned __int8 *)(a2 + v945 + 2) << 16) | (*(unsigned __int8 *)(a2 + v945 + 1) << 8) | *(unsigned __int8 *)(a2 + v945);
              }
              else {
                unsigned int v946 = *(unsigned __int16 *)(a2 + v945);
              }
              *(_WORD *)(result + 62) |= (v946 >> v944) & 0x3FFF;
              *(_WORD *)(result + 64) |= (*(unsigned __int16 *)(a2 + ((unint64_t)(*a3 + 268) >> 3)) >> ((*(unsigned char *)a3 + 12) & 7)) & 0x1FF;
              *(_WORD *)(result + 66) |= (*(unsigned __int16 *)(a2 + ((unint64_t)(*a3 + 277) >> 3)) >> ((*(unsigned char *)a3 + 21) & 7)) & 0x1FF;
              unint64_t v963 = *a3 + 286;
              unint64_t v964 = v963 & 7;
              unint64_t v965 = v963 >> 3;
              if (v964 > 5) {
                unsigned int v966 = (*(unsigned __int8 *)(a2 + v965 + 2) << 16) | (*(unsigned __int8 *)(a2 + v965 + 1) << 8) | *(unsigned __int8 *)(a2 + v965);
              }
              else {
                unsigned int v966 = *(unsigned __int16 *)(a2 + v965);
              }
              *(_WORD *)(result + 68) |= (v966 >> v964) & 0x7FF;
              uint64_t v22 = 297;
              break;
          }
          break;
        default:
          *(_WORD *)(result + 8) = 8;
          *(void *)uint64_t result = 0x700000007;
          unint64_t v23 = *a3 + 4;
          unint64_t v24 = v23 >> 3;
          unint64_t v25 = v23 & 7;
          if (v25) {
            int v26 = *(unsigned __int16 *)(a2 + v24) >> v25;
          }
          else {
            LOBYTE(v26) = *(unsigned char *)(a2 + v24);
          }
          *(unsigned char *)(result + 16) |= v26;
          if (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 12) >> 3)) >> ((*(unsigned char *)a3 + 12) & 7)) & 1) == 0)
          {
            *(_DWORD *)(result + 20) = 0;
            unint64_t v120 = *a3 + 13;
            unint64_t v121 = v120 & 7;
            unint64_t v122 = v120 >> 3;
            if (v121 > 3) {
              unsigned int v123 = *(unsigned __int16 *)(a2 + v122);
            }
            else {
              unsigned int v123 = *(unsigned __int8 *)(a2 + v122);
            }
            *(unsigned char *)(result + 24) |= (v123 >> v121) & 0x1F;
            goto LABEL_56;
          }
          *(_DWORD *)(result + 20) = 1;
          unint64_t v99 = *a3 + 13;
          unint64_t v100 = v99 & 7;
          unint64_t v101 = v99 >> 3;
          if (v100 > 3) {
            unsigned int v102 = *(unsigned __int16 *)(a2 + v101);
          }
          else {
            unsigned int v102 = *(unsigned __int8 *)(a2 + v101);
          }
          uint64_t v140 = *(void *)(result + 24) | (v102 >> v100) & 0x1F;
          *(void *)(result + 24) = v140;
          unint64_t v141 = *a3 + 18;
          unint64_t v142 = v141 & 7;
          unint64_t v143 = v141 >> 3;
          if (v142 == 7)
          {
            unint64_t v144 = ((unint64_t)*(unsigned __int8 *)(v143 + a2 + 6) << 48) | ((unint64_t)*(unsigned __int8 *)(v143 + a2 + 5) << 40);
            unint64_t v145 = (unint64_t)*(unsigned __int8 *)(v143 + a2 + 4) << 32;
          }
          else
          {
            unint64_t v145 = (unint64_t)*(unsigned __int8 *)(v143 + a2 + 5) << 40;
            unint64_t v144 = (unint64_t)*(unsigned __int8 *)(v143 + a2 + 4) << 32;
          }
          *(void *)(result + 24) = ((((v144 | v145 | ((unint64_t)*(unsigned __int8 *)(a2 + v143 + 3) << 24) | ((unint64_t)*(unsigned __int8 *)(a2 + v143 + 2) << 16) | ((unint64_t)*(unsigned __int8 *)(a2 + v143 + 1) << 8) | *(unsigned __int8 *)(a2 + v143)) >> v142) & 0x3FFFFFFFFFFLL) << 6) | v140;
          uint64_t v22 = 60;
          break;
      }
      break;
    case 3:
      uint64_t v19 = (v4 + 2) & 7;
      unint64_t v20 = (unint64_t)(v4 + 2) >> 3;
      if (v19 == 7) {
        int v21 = *(unsigned __int16 *)(a2 + v20) >> 7;
      }
      else {
        int v21 = *(unsigned __int8 *)(a2 + v20) >> v19;
      }
      switch(v21 & 3)
      {
        case 1:
          unint64_t v68 = v4 + 4;
          uint64_t v69 = (v4 + 4) & 7;
          unint64_t v70 = v68 >> 3;
          if (v69 == 7) {
            int v71 = *(unsigned __int16 *)(a2 + v70) >> 7;
          }
          else {
            int v71 = *(unsigned __int8 *)(a2 + v70) >> v69;
          }
          int v93 = v71 & 3;
          if (v93 == 1)
          {
            *(_WORD *)(result + 8) = 1;
            uint64_t v94 = 0xE0000000ELL;
          }
          else
          {
            if (v93) {
              goto LABEL_81;
            }
            *(_WORD *)(result + 8) = 1;
            uint64_t v94 = 0xD0000000DLL;
          }
          *(void *)uint64_t result = v94;
          unint64_t v133 = *a3 + 6;
          unint64_t v134 = v133 & 7;
          unint64_t v135 = v133 >> 3;
          if (v134 == 7) {
            int v136 = *(unsigned __int16 *)(a2 + v135) >> 7;
          }
          else {
            int v136 = *(unsigned __int8 *)(a2 + v135) >> v134;
          }
          *(unsigned char *)(result + 16) |= v136 & 3;
          uint64_t v22 = 8;
          goto LABEL_398;
        case 2:
          unint64_t v72 = v4 + 4;
          uint64_t v73 = (v4 + 4) & 7;
          unint64_t v74 = v72 >> 3;
          if (v73 == 7)
          {
            if ((((unint64_t)(*(unsigned __int8 *)(a2 + v74) | (*(unsigned __int8 *)(a2 + v74 + 1) << 8)) >> 7) & 3) != 0) {
              goto LABEL_81;
            }
          }
          else if (((*(unsigned __int8 *)(a2 + v74) >> v73) & 3) != 0)
          {
            goto LABEL_81;
          }
          *(_WORD *)(result + 8) = 3;
          *(void *)uint64_t result = 0xF0000000FLL;
          unint64_t v95 = *a3 + 6;
          unint64_t v96 = v95 & 7;
          unint64_t v97 = v95 >> 3;
          if (v96 > 1) {
            unsigned int v98 = *(unsigned __int16 *)(a2 + v97);
          }
          else {
            unsigned int v98 = *(unsigned __int8 *)(a2 + v97);
          }
          *(unsigned char *)(result + 24) |= (v98 >> v96) & 0x7F;
          unint64_t v163 = *a3 + 13;
          unint64_t v164 = v163 & 7;
          unint64_t v165 = v163 >> 3;
          if (v164 > 5) {
            unsigned __int16 v166 = *(_WORD *)(a2 + v165);
          }
          else {
            unsigned __int16 v166 = *(unsigned __int8 *)(a2 + v165);
          }
          *(_DWORD *)(result + 20) = (v166 >> v164) & 7;
          unint64_t v167 = *a3 & 7;
          unint64_t v168 = (unint64_t)(*a3 + 16) >> 3;
          if (v167 > 5) {
            unsigned __int16 v169 = *(_WORD *)(a2 + v168);
          }
          else {
            unsigned __int16 v169 = *(unsigned __int8 *)(a2 + v168);
          }
          switch((v169 >> v167) & 7)
          {
            case 1:
              int v360 = 1;
              goto LABEL_280;
            case 2:
              int v360 = 2;
              goto LABEL_280;
            case 3:
              int v360 = 3;
              goto LABEL_280;
            case 4:
              int v360 = 4;
              goto LABEL_280;
            case 5:
              int v360 = 5;
              goto LABEL_280;
            case 6:
              int v360 = 6;
              goto LABEL_280;
            case 7:
              int v360 = 7;
LABEL_280:
              *(_DWORD *)(result + 16) = v360;
              break;
            default:
              *(_DWORD *)(result + 16) = 0;
              break;
          }
          uint64_t v22 = 19;
          goto LABEL_398;
        case 3:
          unint64_t v75 = v4 + 4;
          uint64_t v76 = (v4 + 4) & 7;
          unint64_t v77 = v75 >> 3;
          if (v76 == 7)
          {
            if ((((unint64_t)(*(unsigned __int8 *)(a2 + v77) | (*(unsigned __int8 *)(a2 + v77 + 1) << 8)) >> 7) & 3) != 0) {
              goto LABEL_81;
            }
          }
          else if (((*(unsigned __int8 *)(a2 + v77) >> v76) & 3) != 0)
          {
            goto LABEL_81;
          }
          *(_WORD *)(result + 8) = 1;
          *(void *)uint64_t result = 0x1000000010;
          uint64_t v22 = 6;
          goto LABEL_398;
        default:
          unint64_t v27 = v4 + 4;
          uint64_t v28 = (v4 + 4) & 7;
          unint64_t v29 = v27 >> 3;
          if (v28 == 7) {
            int v30 = *(unsigned __int16 *)(a2 + v29) >> 7;
          }
          else {
            int v30 = *(unsigned __int8 *)(a2 + v29) >> v28;
          }
          int v78 = v30 & 3;
          if (v78 == 1)
          {
            *(_WORD *)(result + 8) = 3;
            *(void *)uint64_t result = 0xC0000000CLL;
            unint64_t v124 = *a3 + 6;
            unint64_t v125 = v124 & 7;
            unint64_t v126 = v124 >> 3;
            if (v125 > 5) {
              unsigned __int16 v127 = *(_WORD *)(a2 + v126);
            }
            else {
              unsigned __int16 v127 = *(unsigned __int8 *)(a2 + v126);
            }
            *(_DWORD *)(result + 16) = (v127 >> v125) & 7;
            int v170 = *(_WORD *)(result + 20) & 0xFFFE | (*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 9) >> 3)) >> ((*(unsigned char *)a3 + 9) & 7)) & 1;
            *(_WORD *)(result + 20) = v170;
            unsigned int v171 = v170 & 0xFFFFFFFD | (2
                                      * ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 10) >> 3)) >> ((*(unsigned char *)a3 + 10) & 7)) & 1));
            *(_WORD *)(result + 20) = v171;
            unsigned int v172 = v171 & 0xFFFFFFFB | (4
                                      * ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 11) >> 3)) >> ((*(unsigned char *)a3 + 11) & 7)) & 1));
            *(_WORD *)(result + 20) = v172;
            unsigned int v173 = v172 & 0xFFFFFFF7 | (8
                                      * ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 12) >> 3)) >> ((*(unsigned char *)a3 + 12) & 7)) & 1));
            *(_WORD *)(result + 20) = v173;
            unsigned int v174 = v173 & 0xFFFFFFEF | (16
                                      * ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 13) >> 3)) >> ((*(unsigned char *)a3 + 13) & 7)) & 1));
            *(_WORD *)(result + 20) = v174;
            unsigned int v175 = v174 & 0xFFFFFFDF | (32
                                      * ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 14) >> 3)) >> ((*(unsigned char *)a3 + 14) & 7)) & 1));
            *(_WORD *)(result + 20) = v175;
            unsigned int v176 = v175 & 0xFFFFFFBF | (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 15) >> 3)) >> ((*(unsigned char *)a3 + 15) & 7)) & 1) << 6);
            *(_WORD *)(result + 20) = v176;
            unsigned int v177 = v176 & 0xFFFFFF7F | (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 17) >> 3)) >> ((*(unsigned char *)a3 + 17) & 7)) & 1) << 7);
            *(_WORD *)(result + 20) = v177;
            unsigned int v178 = v177 & 0xFFFFFEFF | (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 18) >> 3)) >> ((*(unsigned char *)a3 + 18) & 7)) & 1) << 8);
            *(_WORD *)(result + 20) = v178;
            unsigned int v179 = v178 & 0xFFFFFDFF | (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 19) >> 3)) >> ((*(unsigned char *)a3 + 19) & 7)) & 1) << 9);
            *(_WORD *)(result + 20) = v179;
            unsigned int v180 = v179 & 0xFFFFFBFF | (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 20) >> 3)) >> ((*(unsigned char *)a3 + 20) & 7)) & 1) << 10);
            *(_WORD *)(result + 20) = v180;
            if ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 21) >> 3)) >> ((*(unsigned char *)a3 + 21) & 7))) {
              __int16 v181 = v180 | 0x800;
            }
            else {
              __int16 v181 = v180 & 0xF7FF;
            }
            *(_WORD *)(result + 20) = v181;
            uint64_t v22 = 22;
          }
          else
          {
            if (v78)
            {
LABEL_81:
              *a4 = 0;
              return result;
            }
            *(_WORD *)(result + 8) = 10;
            *(void *)uint64_t result = 0xB0000000BLL;
            unint64_t v79 = *a3 + 9;
            unint64_t v80 = v79 >> 3;
            unint64_t v81 = v79 & 7;
            if (v81)
            {
              unint64_t v82 = ((unint64_t)*(unsigned __int8 *)(v80 + a2 + 7) << 56) | ((unint64_t)*(unsigned __int8 *)(v80 + a2 + 6) << 48);
              unint64_t v83 = (unint64_t)*(unsigned __int8 *)(v80 + a2 + 5) << 40;
            }
            else
            {
              unint64_t v83 = (unint64_t)*(unsigned __int8 *)(v80 + a2 + 6) << 48;
              unint64_t v82 = (unint64_t)*(unsigned __int8 *)(v80 + a2 + 5) << 40;
            }
            uint64_t v195 = (unsigned __int8 *)(a2 + v80);
            unint64_t v196 = ((v82 | v83 | ((unint64_t)v195[4] << 32) | ((unint64_t)v195[3] << 24) | ((unint64_t)v195[2] << 16) | ((unint64_t)v195[1] << 8) | *v195) >> v81) & 0xFFFFFFFFFFFFFFLL;
            unint64_t v197 = *a3 + 65;
            unint64_t v198 = v197 >> 3;
            unint64_t v199 = v197 & 7;
            if (v199) {
              uint64_t v200 = (*(unsigned __int16 *)(a2 + v198) >> v199);
            }
            else {
              uint64_t v200 = *(unsigned __int8 *)(a2 + v198);
            }
            *(void *)(result + 24) |= v196 | (v200 << 56);
            unint64_t v209 = *a3 + 6;
            unint64_t v210 = v209 & 7;
            unint64_t v211 = v209 >> 3;
            if (v210 > 5) {
              unsigned __int16 v212 = *(_WORD *)(a2 + v211);
            }
            else {
              unsigned __int16 v212 = *(unsigned __int8 *)(a2 + v211);
            }
            switch((v212 >> v210) & 7)
            {
              case 1:
                int v482 = 1;
                goto LABEL_396;
              case 2:
                int v482 = 2;
                goto LABEL_396;
              case 3:
                int v482 = 3;
                goto LABEL_396;
              case 4:
                int v482 = 4;
                goto LABEL_396;
              case 5:
                int v482 = 5;
                goto LABEL_396;
              case 6:
                int v482 = 6;
                goto LABEL_396;
              case 7:
                int v482 = 7;
LABEL_396:
                *(_DWORD *)(result + 16) = v482;
                break;
              default:
                *(_DWORD *)(result + 16) = 0;
                break;
            }
            uint64_t v22 = 73;
          }
          break;
      }
      break;
    default:
      *(_WORD *)(result + 8) = 3;
      *(void *)uint64_t result = 0;
      unint64_t v8 = *a3 + 2;
      unint64_t v9 = v8 >> 3;
      unint64_t v10 = v8 & 7;
      if (v10) {
        int v11 = (*(unsigned __int16 *)(a2 + v9) >> v10);
      }
      else {
        int v11 = *(unsigned __int8 *)(a2 + v9);
      }
      int v31 = *(unsigned __int16 *)(result + 16) | v11;
      *(_WORD *)(result + 16) = v31;
      uint64_t v32 = *a3;
      if ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 10) >> 3)) >> ((*(unsigned char *)a3 + 10) & 7)))
      {
        unint64_t v33 = v32 + 11;
        unint64_t v34 = (v32 + 11) & 7;
        unint64_t v35 = v33 >> 3;
        if (v34 > 2) {
          unsigned __int16 v36 = *(_WORD *)(a2 + v35);
        }
        else {
          unsigned __int16 v36 = *(unsigned __int8 *)(a2 + v35);
        }
        int v42 = (((v36 >> v34) & 0x3F) << 8) | v31;
        *(_WORD *)(result + 16) = v42;
        if ((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 17) >> 3)) >> ((*(unsigned char *)a3 + 17) & 7))) {
          __int16 v43 = v42 | 0x4000;
        }
        else {
          __int16 v43 = v42 & 0xBFFF;
        }
        *(_WORD *)(result + 16) = v43;
LABEL_56:
        uint64_t v22 = 18;
      }
      else
      {
        __int16 v37 = v31 & 0xBFFF;
        *(_WORD *)(result + 16) = v37;
        unint64_t v38 = *a3 + 11;
        unint64_t v39 = v38 & 7;
        unint64_t v40 = v38 >> 3;
        if (v39 > 4) {
          unsigned __int16 v41 = *(_WORD *)(a2 + v40);
        }
        else {
          unsigned __int16 v41 = *(unsigned __int8 *)(a2 + v40);
        }
        *(_WORD *)(result + 16) = (((v41 >> v39) & 0xF) << 8) | v37;
LABEL_122:
        uint64_t v22 = 15;
      }
      break;
  }
LABEL_398:
  *a3 += v22;
  return result;
}

void sub_79FD0(uint64_t a1, void *a2)
{
  uint64_t v2 = a1 + 43144;
  if (*(void *)(a1 + 43176))
  {
    uint64_t v15 = a1 + 160;
    uint64_t v5 = a1 + 43184;
    unint64_t v6 = *(void *)(a1 + 43168);
    do
    {
      uint64_t v7 = *(void *)(*(void *)v2 + ((v6 >> 1) & 0x7FFFFFFFFFFFFFF8));
      unsigned int v8 = v6 & 0xF;
      unint64_t v9 = (unsigned __int8 *)(v7 + 272 * (v6 & 0xF));
      if (!v9[32]) {
        break;
      }
      uint64_t v18 = a1;
      v16[0] = v9;
      v16[1] = &v18;
      v16[2] = a1;
      v16[3] = &v17;
      uint64_t v10 = v7 + 272 * v8;
      if (*(unsigned char *)(v10 + 264))
      {
        sub_7A21C((unint64_t)v16, v10 + 40, (uint64_t)v9);
        if (!*(unsigned char *)(v10 + 264)) {
          sub_8894();
        }
        sub_46078(a2, v10 + 40);
      }
      else
      {
        unint64_t v11 = *v9;
        if (v11 <= 0x97)
        {
          sub_7A21C((unint64_t)v16, v15 + 232 * *v9, v15);
          uint64_t v12 = (int64x2_t *)(v5 + 48 * v11);
          if (v12[2].i64[1]) {
            goto LABEL_14;
          }
          unint64_t v13 = sub_12C18C();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            unint64_t v20 = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp"
                  "ort/APS/AGXPSAPSParserGen1.cpp";
            __int16 v21 = 1024;
            int v22 = 806;
            __int16 v23 = 2080;
            unint64_t v24 = "!pendingPositionsForClique.empty()";
            _os_log_error_impl(&def_1C1270, v13, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", buf, 0x1Cu);
          }
          if (sub_12C17C()) {
            sub_12C184();
          }
          if (v12[2].i64[1]) {
LABEL_14:
          }
            sub_47E68(v12);
        }
      }
      sub_3EE00(*(void *)(*(void *)v2 + ((*(void *)(v2 + 24) >> 1) & 0x7FFFFFFFFFFFFFF8))+ 272 * (*(void *)(v2 + 24) & 0xFLL));
      uint64_t v14 = *(void *)(v2 + 32) - 1;
      unint64_t v6 = *(void *)(v2 + 24) + 1;
      *(void *)(v2 + 24) = v6;
      *(void *)(v2 + 32) = v14;
      if (v6 >= 0x20)
      {
        operator delete(**(void ***)v2);
        *(void *)v2 += 8;
        uint64_t v14 = *(void *)(v2 + 32);
        unint64_t v6 = *(void *)(v2 + 24) - 16;
        *(void *)(v2 + 24) = v6;
      }
    }
    while (v14);
  }
}

unint64_t sub_7A21C@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(void *)result;
  unint64_t v5 = result;
  uint64_t v6 = *(void *)(result + 16);
  uint64_t v7 = *(unsigned int *)(a2 + 208);
  switch(*(_DWORD *)(*(void *)result + 4))
  {
    case 0:
      uint64_t result = sub_7A524(*(uint64_t **)(result + 8), *(void *)(v3 + 20), *(_DWORD *)(v3 + 28), v7, a3);
      uint64_t v9 = *(void *)(*(void *)v5 + 8);
      uint64_t v10 = ((v8 & 0x7FF) << 43) | ((HIDWORD(result) & 0x7FF) << 32) | (HIDWORD(v8) << 54) | *(unsigned int *)(*(void *)v5 + 16);
      if (v7 <= 7)
      {
        *((void *)&v11 + 1) = ((v8 & 0x7FF) << 43) | ((HIDWORD(result) & 0x7FF) << 32) | (HIDWORD(v8) << 54) | *(unsigned int *)(*(void *)v5 + 16);
        *(void *)&long long v11 = v9 & 0xFFFFFFFF00000000;
        uint64_t v12 = v6 + 16 * v7 + 40832;
        *(_DWORD *)uint64_t v12 = v9;
        *(int32x2_t *)(v12 + 4) = vzip1_s32((int32x2_t)(v11 >> 32), (int32x2_t)v10);
        *(unsigned char *)(v12 + 12) = 1;
      }
      int v14 = *(unsigned __int8 *)(a2 + 204);
      unint64_t v13 = (unsigned char *)(a2 + 204);
      *(void *)(v13 - 28) = v10;
      *(void *)(v13 - 36) = v9;
      *(v13 - 20) = ((v8 & 0x40000000000) != 0) | (2 * result) & 0x3F;
      if (!v14) {
        goto LABEL_23;
      }
      break;
    case 1:
      uint64_t result = sub_7A524(*(uint64_t **)(result + 8), *(void *)(v3 + 12), *(_DWORD *)(v3 + 20), v7, a3);
      unint64_t v16 = 0;
      uint64_t v17 = ((HIDWORD(result) & 0x7FF) << 32) | ((v15 & 0x7FF) << 43) | (HIDWORD(v15) << 54);
      if (v7 <= 7)
      {
        uint64_t v18 = (_DWORD *)(v6 + 16 * v7 + 40832);
        if (*(unsigned char *)(v6 + 16 * v7 + 40844))
        {
          unsigned int v19 = *(unsigned __int16 *)(*(void *)v5 + 8);
          int32x2_t v20 = vadd_s32(*(int32x2_t *)(v6 + 16 * v7 + 40836), (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v19), (uint32x2_t)0xFFFFFFF8FFFFFFFCLL), (int8x8_t)0xF0000000FLL));
          uint64_t v21 = *v18 + (v19 & 0xF);
          unint64_t v16 = v21 | ((unint64_t)v20.u32[0] << 32);
          uint64_t v17 = v20.u32[1] | (unint64_t)v17;
          *uint64_t v18 = v21;
          *(int32x2_t *)(v6 + 16 * v7 + 40836) = v20;
        }
      }
      int v22 = *(unsigned __int8 *)(a2 + 204);
      unint64_t v13 = (unsigned char *)(a2 + 204);
      *(void *)(v13 - 28) = v17;
      *(void *)(v13 - 36) = v16;
      *(v13 - 20) = ((v15 & 0x40000000000) != 0) | (2 * result) & 0x3F;
      if (!v22) {
        goto LABEL_23;
      }
      break;
    case 2:
      __int16 v23 = *(_WORD *)(v3 + 8);
      LODWORD(v24) = ((*(_WORD *)(v3 + 12) & 0x7FF) << 20) | ((*(_WORD *)(v3 + 10) & 0x3FF) << 10) | v23 & 0x3FF;
      uint8x8_t v25 = *(uint8x8_t *)(v3 + 15);
      uint8x8_t v26 = *(uint8x8_t *)(v3 + 23);
      if (*(unsigned char *)(v3 + 14))
      {
        int v31 = v25.u8[0];
        v27.i64[0] = vdupq_n_s16(v25.u8[0]).u64[0];
        v27.i64[1] = vdupq_n_s16(v31 + 1).i64[1];
        *(int16x4_t *)v28.i8 = vadd_s16(vdup_n_s16(v26.u8[0]), (int16x4_t)0x3000200010000);
        v28.i64[1] = v28.i64[0];
      }
      else
      {
        uint16x8_t v27 = vmovl_u8(v25);
        uint16x8_t v28 = vmovl_u8(v26);
      }
      if (v7 <= 7)
      {
        uint64_t v32 = v6 + 16 * v7 + 40960;
        *(_DWORD *)uint64_t v32 = v23 & 0x3FF;
        *(int8x8_t *)(v32 + 4) = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v24), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x7FF000003FFLL);
        *(unsigned char *)(v32 + 12) = 1;
      }
      goto LABEL_22;
    case 3:
      LODWORD(v24) = *(unsigned __int8 *)(v3 + 8);
      uint8x8_t v29 = *(uint8x8_t *)(v3 + 9);
      uint8x8_t v30 = *(uint8x8_t *)(v3 + 17);
      if (v24)
      {
        int v33 = v29.u8[0];
        v27.i64[0] = vdupq_n_s16(v29.u8[0]).u64[0];
        v27.i64[1] = vdupq_n_s16(v33 + 1).i64[1];
        uint64_t v24 = (uint64_t)&unk_4C7000;
        *(int16x4_t *)v28.i8 = vadd_s16(vdup_n_s16(v30.u8[0]), (int16x4_t)0x3000200010000);
        v28.i64[1] = v28.i64[0];
      }
      else
      {
        uint16x8_t v27 = vmovl_u8(v29);
        uint16x8_t v28 = vmovl_u8(v30);
      }
      if (v7 <= 7)
      {
        uint64_t v24 = v6 + 16 * v7 + 40960;
        if (*(unsigned char *)(v6 + 16 * v7 + 40972)) {
          LODWORD(v24) = *(_DWORD *)v24 & 0x3FF | ((*(_DWORD *)(v6 + 16 * v7 + 40964) & 0x3FF) << 10) & 0x800FFFFF | ((*(_DWORD *)(v6 + 16 * v7 + 40968) & 0x7FF) << 20);
        }
      }
LABEL_22:
      int v34 = *(unsigned __int8 *)(a2 + 204);
      unint64_t v13 = (unsigned char *)(a2 + 204);
      *(uint16x8_t *)(a2 + 168) = v27;
      *(uint16x8_t *)(a2 + 184) = v28;
      *(_DWORD *)(a2 + 200) = v24;
      if (!v34) {
LABEL_23:
      }
        *unint64_t v13 = 1;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_7A524@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v5 = *a1;
  if (a2)
  {
    if (a2 == 1)
    {
      uint64_t v6 = HIDWORD(a2) & 0x1F;
      char v7 = HIWORD(a2) >> 12;
      a5 = (HIWORD(a2) & 0xFFF & ~(-1 << v7)) + 1;
      if (a4 <= 7)
      {
        uint64_t v8 = v5 + 16 * a4 + 40704;
        *(_DWORD *)uint64_t v8 = a5;
        *(void *)(v8 + 4) = ((((unsigned __int16)(HIWORD(a2) & 0xFFF) >> v7) & ~(-1 << (a3 & 0xF))) + 1) | ((unint64_t)((((unsigned __int16)(HIWORD(a2) & 0xFFF) >> v7) >> (a3 & 0xF)) + 1) << 32);
        *(unsigned char *)(v8 + 12) = 1;
      }
    }
    else
    {
      LODWORD(v6) = 0;
    }
  }
  else
  {
    uint64_t v6 = HIDWORD(a2) & 0x1F;
    if (a4 <= 7)
    {
      uint64_t v9 = (unsigned int *)(v5 + 16 * a4 + 40704);
      if (*((unsigned char *)v9 + 12))
      {
        a5 = *v9;
      }
      else
      {
        long long v11 = sub_12C18C();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
          sub_1B4C04(v11);
        }
        if (sub_12C17C()) {
          sub_12C184();
        }
      }
    }
  }
  return v6 | (unint64_t)(a5 << 32);
}

void sub_7A630(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    if (*(_DWORD *)(v3 + 48)) {
      goto LABEL_381;
    }
    uint64_t v5 = *(void **)a1[1];
    uint64_t v6 = *(_WORD *)(a1[2] + 58) & 0x3FFF;
    char v7 = (char *)v5[485];
    unint64_t v8 = v5[486];
    if ((unint64_t)v7 >= v8)
    {
      uint64_t v17 = (char *)v5[484];
      uint64_t v18 = (v7 - v17) >> 3;
      if ((unint64_t)(v18 + 1) >> 61) {
        goto LABEL_373;
      }
      unint64_t v19 = v8 - (void)v17;
      unint64_t v20 = (uint64_t)(v8 - (void)v17) >> 2;
      if (v20 <= v18 + 1) {
        unint64_t v20 = v18 + 1;
      }
      if (v19 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v21 = v20;
      }
      if (v21)
      {
        int v22 = (char *)sub_5714((uint64_t)(v5 + 486), v21);
        char v7 = (char *)v5[485];
        uint64_t v17 = (char *)v5[484];
      }
      else
      {
        int v22 = 0;
      }
      __int16 v23 = &v22[8 * v18];
      uint64_t v24 = &v22[8 * v21];
      *(void *)__int16 v23 = v6;
      uint64_t v9 = v23 + 8;
      while (v7 != v17)
      {
        uint64_t v25 = *((void *)v7 - 1);
        v7 -= 8;
        *((void *)v23 - 1) = v25;
        v23 -= 8;
      }
      v5[484] = v23;
      v5[485] = v9;
      v5[486] = v24;
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      *(void *)char v7 = v6;
      uint64_t v9 = v7 + 8;
    }
    v5[485] = v9;
    if (!*(_DWORD *)(v3 + 48))
    {
      uint8x8_t v26 = *(void **)a1[1];
      uint64_t v27 = *(_WORD *)(a1[2] + 40) & 0x3FFF;
      uint16x8_t v28 = (char *)v26[488];
      unint64_t v29 = v26[489];
      if ((unint64_t)v28 >= v29)
      {
        int v31 = (char *)v26[487];
        uint64_t v32 = (v28 - v31) >> 3;
        if ((unint64_t)(v32 + 1) >> 61) {
          goto LABEL_373;
        }
        unint64_t v33 = v29 - (void)v31;
        unint64_t v34 = (uint64_t)(v29 - (void)v31) >> 2;
        if (v34 <= v32 + 1) {
          unint64_t v34 = v32 + 1;
        }
        if (v33 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v35 = v34;
        }
        if (v35)
        {
          unsigned __int16 v36 = (char *)sub_5714((uint64_t)(v26 + 489), v35);
          uint16x8_t v28 = (char *)v26[488];
          int v31 = (char *)v26[487];
        }
        else
        {
          unsigned __int16 v36 = 0;
        }
        __int16 v37 = &v36[8 * v32];
        unint64_t v38 = &v36[8 * v35];
        *(void *)__int16 v37 = v27;
        uint8x8_t v30 = v37 + 8;
        while (v28 != v31)
        {
          uint64_t v39 = *((void *)v28 - 1);
          v28 -= 8;
          *((void *)v37 - 1) = v39;
          v37 -= 8;
        }
        v26[487] = v37;
        v26[488] = v30;
        v26[489] = v38;
        if (v31) {
          operator delete(v31);
        }
      }
      else
      {
        *(void *)uint16x8_t v28 = v27;
        uint8x8_t v30 = v28 + 8;
      }
      v26[488] = v30;
      if (!*(_DWORD *)(v3 + 48))
      {
        unint64_t v40 = *(void **)a1[1];
        uint64_t v41 = *(_WORD *)(a1[2] + 60) & 0x3FFF;
        int v42 = (char *)v40[491];
        unint64_t v43 = v40[492];
        if ((unint64_t)v42 >= v43)
        {
          uint64_t v45 = (char *)v40[490];
          uint64_t v46 = (v42 - v45) >> 3;
          if ((unint64_t)(v46 + 1) >> 61) {
            goto LABEL_373;
          }
          unint64_t v47 = v43 - (void)v45;
          unint64_t v48 = (uint64_t)(v43 - (void)v45) >> 2;
          if (v48 <= v46 + 1) {
            unint64_t v48 = v46 + 1;
          }
          if (v47 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v49 = v48;
          }
          if (v49)
          {
            unint64_t v50 = (char *)sub_5714((uint64_t)(v40 + 492), v49);
            int v42 = (char *)v40[491];
            uint64_t v45 = (char *)v40[490];
          }
          else
          {
            unint64_t v50 = 0;
          }
          unsigned int v51 = &v50[8 * v46];
          unint64_t v52 = &v50[8 * v49];
          *(void *)unsigned int v51 = v41;
          unint64_t v44 = v51 + 8;
          while (v42 != v45)
          {
            uint64_t v53 = *((void *)v42 - 1);
            v42 -= 8;
            *((void *)v51 - 1) = v53;
            v51 -= 8;
          }
          v40[490] = v51;
          v40[491] = v44;
          v40[492] = v52;
          if (v45) {
            operator delete(v45);
          }
        }
        else
        {
          *(void *)int v42 = v41;
          unint64_t v44 = v42 + 8;
        }
        v40[491] = v44;
        if (!*(_DWORD *)(v3 + 48))
        {
          unint64_t v54 = *(void **)a1[1];
          uint64_t v55 = *(_WORD *)(a1[2] + 42) & 0x3FFF;
          unint64_t v56 = (char *)v54[494];
          unint64_t v57 = v54[495];
          if ((unint64_t)v56 >= v57)
          {
            int v59 = (char *)v54[493];
            uint64_t v60 = (v56 - v59) >> 3;
            if ((unint64_t)(v60 + 1) >> 61) {
              goto LABEL_373;
            }
            unint64_t v61 = v57 - (void)v59;
            unint64_t v62 = (uint64_t)(v57 - (void)v59) >> 2;
            if (v62 <= v60 + 1) {
              unint64_t v62 = v60 + 1;
            }
            if (v61 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v63 = v62;
            }
            if (v63)
            {
              unint64_t v64 = (char *)sub_5714((uint64_t)(v54 + 495), v63);
              unint64_t v56 = (char *)v54[494];
              int v59 = (char *)v54[493];
            }
            else
            {
              unint64_t v64 = 0;
            }
            unint64_t v65 = &v64[8 * v60];
            unint64_t v66 = &v64[8 * v63];
            *(void *)unint64_t v65 = v55;
            unint64_t v58 = v65 + 8;
            while (v56 != v59)
            {
              uint64_t v67 = *((void *)v56 - 1);
              v56 -= 8;
              *((void *)v65 - 1) = v67;
              v65 -= 8;
            }
            v54[493] = v65;
            v54[494] = v58;
            v54[495] = v66;
            if (v59) {
              operator delete(v59);
            }
          }
          else
          {
            *(void *)unint64_t v56 = v55;
            unint64_t v58 = v56 + 8;
          }
          v54[494] = v58;
          if (!*(_DWORD *)(v3 + 48))
          {
            unint64_t v68 = *(void **)a1[1];
            uint64_t v69 = *(_WORD *)(a1[2] + 62) & 0x3FFF;
            unint64_t v70 = (char *)v68[497];
            unint64_t v71 = v68[498];
            if ((unint64_t)v70 >= v71)
            {
              uint64_t v73 = (char *)v68[496];
              uint64_t v74 = (v70 - v73) >> 3;
              if ((unint64_t)(v74 + 1) >> 61) {
                goto LABEL_373;
              }
              unint64_t v75 = v71 - (void)v73;
              unint64_t v76 = (uint64_t)(v71 - (void)v73) >> 2;
              if (v76 <= v74 + 1) {
                unint64_t v76 = v74 + 1;
              }
              if (v75 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v77 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v77 = v76;
              }
              if (v77)
              {
                int v78 = (char *)sub_5714((uint64_t)(v68 + 498), v77);
                unint64_t v70 = (char *)v68[497];
                uint64_t v73 = (char *)v68[496];
              }
              else
              {
                int v78 = 0;
              }
              unint64_t v79 = &v78[8 * v74];
              unint64_t v80 = &v78[8 * v77];
              *(void *)unint64_t v79 = v69;
              unint64_t v72 = v79 + 8;
              while (v70 != v73)
              {
                uint64_t v81 = *((void *)v70 - 1);
                v70 -= 8;
                *((void *)v79 - 1) = v81;
                v79 -= 8;
              }
              v68[496] = v79;
              v68[497] = v72;
              v68[498] = v80;
              if (v73) {
                operator delete(v73);
              }
            }
            else
            {
              *(void *)unint64_t v70 = v69;
              unint64_t v72 = v70 + 8;
            }
            v68[497] = v72;
            if (!*(_DWORD *)(v3 + 48))
            {
              unint64_t v82 = *(void **)a1[1];
              uint64_t v83 = *(_WORD *)(a1[2] + 44) & 0x3FFF;
              int v84 = (char *)v82[500];
              unint64_t v85 = v82[501];
              if ((unint64_t)v84 >= v85)
              {
                unint64_t v87 = (char *)v82[499];
                uint64_t v88 = (v84 - v87) >> 3;
                if ((unint64_t)(v88 + 1) >> 61) {
                  goto LABEL_373;
                }
                unint64_t v89 = v85 - (void)v87;
                unint64_t v90 = (uint64_t)(v85 - (void)v87) >> 2;
                if (v90 <= v88 + 1) {
                  unint64_t v90 = v88 + 1;
                }
                if (v89 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v91 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v91 = v90;
                }
                if (v91)
                {
                  int v92 = (char *)sub_5714((uint64_t)(v82 + 501), v91);
                  int v84 = (char *)v82[500];
                  unint64_t v87 = (char *)v82[499];
                }
                else
                {
                  int v92 = 0;
                }
                int v93 = &v92[8 * v88];
                uint64_t v94 = &v92[8 * v91];
                *(void *)int v93 = v83;
                unint64_t v86 = v93 + 8;
                while (v84 != v87)
                {
                  uint64_t v95 = *((void *)v84 - 1);
                  v84 -= 8;
                  *((void *)v93 - 1) = v95;
                  v93 -= 8;
                }
                v82[499] = v93;
                v82[500] = v86;
                v82[501] = v94;
                if (v87) {
                  operator delete(v87);
                }
              }
              else
              {
                *(void *)int v84 = v83;
                unint64_t v86 = v84 + 8;
              }
              v82[500] = v86;
              if (!*(_DWORD *)(v3 + 48))
              {
                unint64_t v96 = *(void **)a1[1];
                uint64_t v97 = *(_DWORD *)(a1[2] + 28) & 0x3FFFFLL;
                unsigned int v98 = (uint64_t *)v96[503];
                unint64_t v99 = v96[504];
                if ((unint64_t)v98 >= v99)
                {
                  unint64_t v101 = (uint64_t *)v96[502];
                  uint64_t v102 = v98 - v101;
                  if ((unint64_t)(v102 + 1) >> 61) {
                    goto LABEL_373;
                  }
                  unint64_t v103 = v99 - (void)v101;
                  unint64_t v104 = (uint64_t)(v99 - (void)v101) >> 2;
                  if (v104 <= v102 + 1) {
                    unint64_t v104 = v102 + 1;
                  }
                  if (v103 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v105 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v105 = v104;
                  }
                  if (v105)
                  {
                    int v106 = (char *)sub_5714((uint64_t)(v96 + 504), v105);
                    unsigned int v98 = (uint64_t *)v96[503];
                    unint64_t v101 = (uint64_t *)v96[502];
                  }
                  else
                  {
                    int v106 = 0;
                  }
                  unint64_t v107 = (uint64_t *)&v106[8 * v102];
                  unint64_t v108 = &v106[8 * v105];
                  *unint64_t v107 = v97;
                  unint64_t v100 = v107 + 1;
                  while (v98 != v101)
                  {
                    uint64_t v109 = *--v98;
                    *--unint64_t v107 = v109;
                  }
                  v96[502] = v107;
                  v96[503] = v100;
                  v96[504] = v108;
                  if (v101) {
                    operator delete(v101);
                  }
                }
                else
                {
                  *unsigned int v98 = v97;
                  unint64_t v100 = v98 + 1;
                }
                v96[503] = v100;
                if (!*(_DWORD *)(v3 + 48))
                {
                  int v110 = *(void **)a1[1];
                  uint64_t v111 = *(_WORD *)(a1[2] + 52) & 0x3FFF;
                  unint64_t v112 = (char *)v110[506];
                  unint64_t v113 = v110[507];
                  if ((unint64_t)v112 >= v113)
                  {
                    unint64_t v115 = (char *)v110[505];
                    uint64_t v116 = (v112 - v115) >> 3;
                    if ((unint64_t)(v116 + 1) >> 61) {
                      goto LABEL_373;
                    }
                    unint64_t v117 = v113 - (void)v115;
                    unint64_t v118 = (uint64_t)(v113 - (void)v115) >> 2;
                    if (v118 <= v116 + 1) {
                      unint64_t v118 = v116 + 1;
                    }
                    if (v117 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v119 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v119 = v118;
                    }
                    if (v119)
                    {
                      unint64_t v120 = (char *)sub_5714((uint64_t)(v110 + 507), v119);
                      unint64_t v112 = (char *)v110[506];
                      unint64_t v115 = (char *)v110[505];
                    }
                    else
                    {
                      unint64_t v120 = 0;
                    }
                    unint64_t v121 = &v120[8 * v116];
                    unint64_t v122 = &v120[8 * v119];
                    *(void *)unint64_t v121 = v111;
                    unsigned __int16 v114 = v121 + 8;
                    while (v112 != v115)
                    {
                      uint64_t v123 = *((void *)v112 - 1);
                      v112 -= 8;
                      *((void *)v121 - 1) = v123;
                      v121 -= 8;
                    }
                    v110[505] = v121;
                    v110[506] = v114;
                    v110[507] = v122;
                    if (v115) {
                      operator delete(v115);
                    }
                  }
                  else
                  {
                    *(void *)unint64_t v112 = v111;
                    unsigned __int16 v114 = v112 + 8;
                  }
                  v110[506] = v114;
                  if (!*(_DWORD *)(v3 + 48))
                  {
                    unint64_t v124 = *(void **)a1[1];
                    uint64_t v125 = *(_WORD *)(a1[2] + 34) & 0x3FFF;
                    unint64_t v126 = (char *)v124[509];
                    unint64_t v127 = v124[510];
                    if ((unint64_t)v126 >= v127)
                    {
                      unint64_t v129 = (char *)v124[508];
                      uint64_t v130 = (v126 - v129) >> 3;
                      if ((unint64_t)(v130 + 1) >> 61) {
                        goto LABEL_373;
                      }
                      unint64_t v131 = v127 - (void)v129;
                      unint64_t v132 = (uint64_t)(v127 - (void)v129) >> 2;
                      if (v132 <= v130 + 1) {
                        unint64_t v132 = v130 + 1;
                      }
                      if (v131 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v133 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v133 = v132;
                      }
                      if (v133)
                      {
                        unint64_t v134 = (char *)sub_5714((uint64_t)(v124 + 510), v133);
                        unint64_t v126 = (char *)v124[509];
                        unint64_t v129 = (char *)v124[508];
                      }
                      else
                      {
                        unint64_t v134 = 0;
                      }
                      unint64_t v135 = &v134[8 * v130];
                      int v136 = &v134[8 * v133];
                      *(void *)unint64_t v135 = v125;
                      unint64_t v128 = v135 + 8;
                      while (v126 != v129)
                      {
                        uint64_t v137 = *((void *)v126 - 1);
                        v126 -= 8;
                        *((void *)v135 - 1) = v137;
                        v135 -= 8;
                      }
                      v124[508] = v135;
                      v124[509] = v128;
                      v124[510] = v136;
                      if (v129) {
                        operator delete(v129);
                      }
                    }
                    else
                    {
                      *(void *)unint64_t v126 = v125;
                      unint64_t v128 = v126 + 8;
                    }
                    v124[509] = v128;
                    if (!*(_DWORD *)(v3 + 48))
                    {
                      unint64_t v138 = *(void **)a1[1];
                      uint64_t v139 = *(_WORD *)(a1[2] + 54) & 0x3FFF;
                      uint64_t v140 = (char *)v138[512];
                      unint64_t v141 = v138[513];
                      if ((unint64_t)v140 >= v141)
                      {
                        unint64_t v143 = (char *)v138[511];
                        uint64_t v144 = (v140 - v143) >> 3;
                        if ((unint64_t)(v144 + 1) >> 61) {
                          goto LABEL_373;
                        }
                        unint64_t v145 = v141 - (void)v143;
                        unint64_t v146 = (uint64_t)(v141 - (void)v143) >> 2;
                        if (v146 <= v144 + 1) {
                          unint64_t v146 = v144 + 1;
                        }
                        if (v145 >= 0x7FFFFFFFFFFFFFF8) {
                          unint64_t v147 = 0x1FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v147 = v146;
                        }
                        if (v147)
                        {
                          unint64_t v148 = (char *)sub_5714((uint64_t)(v138 + 513), v147);
                          uint64_t v140 = (char *)v138[512];
                          unint64_t v143 = (char *)v138[511];
                        }
                        else
                        {
                          unint64_t v148 = 0;
                        }
                        unint64_t v149 = &v148[8 * v144];
                        uint64_t v150 = &v148[8 * v147];
                        *(void *)unint64_t v149 = v139;
                        unint64_t v142 = v149 + 8;
                        while (v140 != v143)
                        {
                          uint64_t v151 = *((void *)v140 - 1);
                          v140 -= 8;
                          *((void *)v149 - 1) = v151;
                          v149 -= 8;
                        }
                        v138[511] = v149;
                        v138[512] = v142;
                        v138[513] = v150;
                        if (v143) {
                          operator delete(v143);
                        }
                      }
                      else
                      {
                        *(void *)uint64_t v140 = v139;
                        unint64_t v142 = v140 + 8;
                      }
                      v138[512] = v142;
                      if (!*(_DWORD *)(v3 + 48))
                      {
                        unsigned int v152 = *(void **)a1[1];
                        uint64_t v153 = *(_WORD *)(a1[2] + 36) & 0x3FFF;
                        char v154 = (char *)v152[515];
                        unint64_t v155 = v152[516];
                        if ((unint64_t)v154 >= v155)
                        {
                          unint64_t v157 = (char *)v152[514];
                          uint64_t v158 = (v154 - v157) >> 3;
                          if ((unint64_t)(v158 + 1) >> 61) {
                            goto LABEL_373;
                          }
                          unint64_t v159 = v155 - (void)v157;
                          unint64_t v160 = (uint64_t)(v155 - (void)v157) >> 2;
                          if (v160 <= v158 + 1) {
                            unint64_t v160 = v158 + 1;
                          }
                          if (v159 >= 0x7FFFFFFFFFFFFFF8) {
                            unint64_t v161 = 0x1FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v161 = v160;
                          }
                          if (v161)
                          {
                            unsigned int v162 = (char *)sub_5714((uint64_t)(v152 + 516), v161);
                            char v154 = (char *)v152[515];
                            unint64_t v157 = (char *)v152[514];
                          }
                          else
                          {
                            unsigned int v162 = 0;
                          }
                          unint64_t v163 = &v162[8 * v158];
                          unint64_t v164 = &v162[8 * v161];
                          *(void *)unint64_t v163 = v153;
                          unint64_t v156 = v163 + 8;
                          while (v154 != v157)
                          {
                            uint64_t v165 = *((void *)v154 - 1);
                            v154 -= 8;
                            *((void *)v163 - 1) = v165;
                            v163 -= 8;
                          }
                          v152[514] = v163;
                          v152[515] = v156;
                          v152[516] = v164;
                          if (v157) {
                            operator delete(v157);
                          }
                        }
                        else
                        {
                          *(void *)char v154 = v153;
                          unint64_t v156 = v154 + 8;
                        }
                        v152[515] = v156;
                        if (!*(_DWORD *)(v3 + 48))
                        {
                          unsigned __int16 v166 = *(void **)a1[1];
                          uint64_t v167 = *(_WORD *)(a1[2] + 56) & 0x3FFF;
                          unint64_t v168 = (char *)v166[518];
                          unint64_t v169 = v166[519];
                          if ((unint64_t)v168 >= v169)
                          {
                            unsigned int v171 = (char *)v166[517];
                            uint64_t v172 = (v168 - v171) >> 3;
                            if ((unint64_t)(v172 + 1) >> 61) {
                              goto LABEL_373;
                            }
                            unint64_t v173 = v169 - (void)v171;
                            unint64_t v174 = (uint64_t)(v169 - (void)v171) >> 2;
                            if (v174 <= v172 + 1) {
                              unint64_t v174 = v172 + 1;
                            }
                            if (v173 >= 0x7FFFFFFFFFFFFFF8) {
                              unint64_t v175 = 0x1FFFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v175 = v174;
                            }
                            if (v175)
                            {
                              unsigned int v176 = (char *)sub_5714((uint64_t)(v166 + 519), v175);
                              unint64_t v168 = (char *)v166[518];
                              unsigned int v171 = (char *)v166[517];
                            }
                            else
                            {
                              unsigned int v176 = 0;
                            }
                            unsigned int v177 = &v176[8 * v172];
                            unsigned int v178 = &v176[8 * v175];
                            *(void *)unsigned int v177 = v167;
                            int v170 = v177 + 8;
                            while (v168 != v171)
                            {
                              uint64_t v179 = *((void *)v168 - 1);
                              v168 -= 8;
                              *((void *)v177 - 1) = v179;
                              v177 -= 8;
                            }
                            v166[517] = v177;
                            v166[518] = v170;
                            v166[519] = v178;
                            if (v171) {
                              operator delete(v171);
                            }
                          }
                          else
                          {
                            *(void *)unint64_t v168 = v167;
                            int v170 = v168 + 8;
                          }
                          v166[518] = v170;
                          if (!*(_DWORD *)(v3 + 48))
                          {
                            unsigned int v180 = *(void **)a1[1];
                            uint64_t v181 = *(_WORD *)(a1[2] + 38) & 0x3FFF;
                            uint64_t v182 = (char *)v180[521];
                            unint64_t v183 = v180[522];
                            if ((unint64_t)v182 >= v183)
                            {
                              unsigned int v185 = (char *)v180[520];
                              uint64_t v186 = (v182 - v185) >> 3;
                              if ((unint64_t)(v186 + 1) >> 61) {
                                goto LABEL_373;
                              }
                              unint64_t v187 = v183 - (void)v185;
                              unint64_t v188 = (uint64_t)(v183 - (void)v185) >> 2;
                              if (v188 <= v186 + 1) {
                                unint64_t v188 = v186 + 1;
                              }
                              if (v187 >= 0x7FFFFFFFFFFFFFF8) {
                                unint64_t v189 = 0x1FFFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v189 = v188;
                              }
                              if (v189)
                              {
                                int v190 = (char *)sub_5714((uint64_t)(v180 + 522), v189);
                                uint64_t v182 = (char *)v180[521];
                                unsigned int v185 = (char *)v180[520];
                              }
                              else
                              {
                                int v190 = 0;
                              }
                              unint64_t v191 = &v190[8 * v186];
                              unint64_t v192 = &v190[8 * v189];
                              *(void *)unint64_t v191 = v181;
                              unint64_t v184 = v191 + 8;
                              while (v182 != v185)
                              {
                                uint64_t v193 = *((void *)v182 - 1);
                                v182 -= 8;
                                *((void *)v191 - 1) = v193;
                                v191 -= 8;
                              }
                              v180[520] = v191;
                              v180[521] = v184;
                              v180[522] = v192;
                              if (v185) {
                                operator delete(v185);
                              }
                            }
                            else
                            {
                              *(void *)uint64_t v182 = v181;
                              unint64_t v184 = v182 + 8;
                            }
                            v180[521] = v184;
                            if (!*(_DWORD *)(v3 + 48))
                            {
                              unsigned __int16 v194 = *(void **)a1[1];
                              uint64_t v195 = *(_DWORD *)(a1[2] + 24) & 0x3FFFFLL;
                              unint64_t v196 = (uint64_t *)v194[524];
                              unint64_t v197 = v194[525];
                              if ((unint64_t)v196 >= v197)
                              {
                                unint64_t v199 = (uint64_t *)v194[523];
                                uint64_t v200 = v196 - v199;
                                if ((unint64_t)(v200 + 1) >> 61) {
                                  goto LABEL_373;
                                }
                                unint64_t v201 = v197 - (void)v199;
                                unint64_t v202 = (uint64_t)(v197 - (void)v199) >> 2;
                                if (v202 <= v200 + 1) {
                                  unint64_t v202 = v200 + 1;
                                }
                                if (v201 >= 0x7FFFFFFFFFFFFFF8) {
                                  unint64_t v203 = 0x1FFFFFFFFFFFFFFFLL;
                                }
                                else {
                                  unint64_t v203 = v202;
                                }
                                if (v203)
                                {
                                  unint64_t v204 = (char *)sub_5714((uint64_t)(v194 + 525), v203);
                                  unint64_t v196 = (uint64_t *)v194[524];
                                  unint64_t v199 = (uint64_t *)v194[523];
                                }
                                else
                                {
                                  unint64_t v204 = 0;
                                }
                                unsigned __int16 v205 = (uint64_t *)&v204[8 * v200];
                                uint64_t v206 = &v204[8 * v203];
                                *unsigned __int16 v205 = v195;
                                unint64_t v198 = v205 + 1;
                                while (v196 != v199)
                                {
                                  uint64_t v207 = *--v196;
                                  *--unsigned __int16 v205 = v207;
                                }
                                v194[523] = v205;
                                v194[524] = v198;
                                v194[525] = v206;
                                if (v199) {
                                  operator delete(v199);
                                }
                              }
                              else
                              {
                                uint64_t *v196 = v195;
                                unint64_t v198 = v196 + 1;
                              }
                              v194[524] = v198;
                              if (!*(_DWORD *)(v3 + 48))
                              {
                                unsigned int v208 = *(void **)a1[1];
                                uint64_t v209 = *(_WORD *)(a1[2] + 68) & 0x7FF;
                                unint64_t v210 = (char *)v208[527];
                                unint64_t v211 = v208[528];
                                if ((unint64_t)v210 >= v211)
                                {
                                  int v213 = (char *)v208[526];
                                  uint64_t v214 = (v210 - v213) >> 3;
                                  if ((unint64_t)(v214 + 1) >> 61) {
                                    goto LABEL_373;
                                  }
                                  unint64_t v215 = v211 - (void)v213;
                                  unint64_t v216 = (uint64_t)(v211 - (void)v213) >> 2;
                                  if (v216 <= v214 + 1) {
                                    unint64_t v216 = v214 + 1;
                                  }
                                  if (v215 >= 0x7FFFFFFFFFFFFFF8) {
                                    unint64_t v217 = 0x1FFFFFFFFFFFFFFFLL;
                                  }
                                  else {
                                    unint64_t v217 = v216;
                                  }
                                  if (v217)
                                  {
                                    unint64_t v218 = (char *)sub_5714((uint64_t)(v208 + 528), v217);
                                    unint64_t v210 = (char *)v208[527];
                                    int v213 = (char *)v208[526];
                                  }
                                  else
                                  {
                                    unint64_t v218 = 0;
                                  }
                                  unint64_t v219 = &v218[8 * v214];
                                  unint64_t v220 = &v218[8 * v217];
                                  *(void *)unint64_t v219 = v209;
                                  unsigned __int16 v212 = v219 + 8;
                                  while (v210 != v213)
                                  {
                                    uint64_t v221 = *((void *)v210 - 1);
                                    v210 -= 8;
                                    *((void *)v219 - 1) = v221;
                                    v219 -= 8;
                                  }
                                  v208[526] = v219;
                                  v208[527] = v212;
                                  v208[528] = v220;
                                  if (v213) {
                                    operator delete(v213);
                                  }
                                }
                                else
                                {
                                  *(void *)unint64_t v210 = v209;
                                  unsigned __int16 v212 = v210 + 8;
                                }
                                v208[527] = v212;
                                if (!*(_DWORD *)(v3 + 48))
                                {
                                  unint64_t v222 = *(void **)a1[1];
                                  uint64_t v223 = *(_WORD *)(a1[2] + 50) & 0x7FF;
                                  unint64_t v224 = (char *)v222[530];
                                  unint64_t v225 = v222[531];
                                  if ((unint64_t)v224 >= v225)
                                  {
                                    unsigned int v227 = (char *)v222[529];
                                    uint64_t v228 = (v224 - v227) >> 3;
                                    if ((unint64_t)(v228 + 1) >> 61) {
                                      goto LABEL_373;
                                    }
                                    unint64_t v229 = v225 - (void)v227;
                                    unint64_t v230 = (uint64_t)(v225 - (void)v227) >> 2;
                                    if (v230 <= v228 + 1) {
                                      unint64_t v230 = v228 + 1;
                                    }
                                    if (v229 >= 0x7FFFFFFFFFFFFFF8) {
                                      unint64_t v231 = 0x1FFFFFFFFFFFFFFFLL;
                                    }
                                    else {
                                      unint64_t v231 = v230;
                                    }
                                    if (v231)
                                    {
                                      unint64_t v232 = (char *)sub_5714((uint64_t)(v222 + 531), v231);
                                      unint64_t v224 = (char *)v222[530];
                                      unsigned int v227 = (char *)v222[529];
                                    }
                                    else
                                    {
                                      unint64_t v232 = 0;
                                    }
                                    unsigned int v233 = &v232[8 * v228];
                                    int v234 = &v232[8 * v231];
                                    *(void *)unsigned int v233 = v223;
                                    unint64_t v226 = v233 + 8;
                                    while (v224 != v227)
                                    {
                                      uint64_t v235 = *((void *)v224 - 1);
                                      v224 -= 8;
                                      *((void *)v233 - 1) = v235;
                                      v233 -= 8;
                                    }
                                    v222[529] = v233;
                                    v222[530] = v226;
                                    v222[531] = v234;
                                    if (v227) {
                                      operator delete(v227);
                                    }
                                  }
                                  else
                                  {
                                    *(void *)unint64_t v224 = v223;
                                    unint64_t v226 = v224 + 8;
                                  }
                                  v222[530] = v226;
                                  if (!*(_DWORD *)(v3 + 48))
                                  {
                                    unint64_t v236 = *(void **)a1[1];
                                    uint64_t v237 = *(_WORD *)(a1[2] + 32) & 0x1FFF;
                                    unint64_t v238 = (char *)v236[533];
                                    unint64_t v239 = v236[534];
                                    if ((unint64_t)v238 >= v239)
                                    {
                                      unint64_t v241 = (char *)v236[532];
                                      uint64_t v242 = (v238 - v241) >> 3;
                                      if ((unint64_t)(v242 + 1) >> 61) {
                                        goto LABEL_373;
                                      }
                                      unint64_t v243 = v239 - (void)v241;
                                      unint64_t v244 = (uint64_t)(v239 - (void)v241) >> 2;
                                      if (v244 <= v242 + 1) {
                                        unint64_t v244 = v242 + 1;
                                      }
                                      if (v243 >= 0x7FFFFFFFFFFFFFF8) {
                                        unint64_t v245 = 0x1FFFFFFFFFFFFFFFLL;
                                      }
                                      else {
                                        unint64_t v245 = v244;
                                      }
                                      if (v245)
                                      {
                                        unint64_t v246 = (char *)sub_5714((uint64_t)(v236 + 534), v245);
                                        unint64_t v238 = (char *)v236[533];
                                        unint64_t v241 = (char *)v236[532];
                                      }
                                      else
                                      {
                                        unint64_t v246 = 0;
                                      }
                                      unint64_t v247 = &v246[8 * v242];
                                      unsigned int v248 = &v246[8 * v245];
                                      *(void *)unint64_t v247 = v237;
                                      uint64_t v240 = v247 + 8;
                                      while (v238 != v241)
                                      {
                                        uint64_t v249 = *((void *)v238 - 1);
                                        v238 -= 8;
                                        *((void *)v247 - 1) = v249;
                                        v247 -= 8;
                                      }
                                      v236[532] = v247;
                                      v236[533] = v240;
                                      v236[534] = v248;
                                      if (v241) {
                                        operator delete(v241);
                                      }
                                    }
                                    else
                                    {
                                      *(void *)unint64_t v238 = v237;
                                      uint64_t v240 = v238 + 8;
                                    }
                                    v236[533] = v240;
                                    if (!*(_DWORD *)(v3 + 48))
                                    {
                                      unint64_t v250 = *(void **)a1[1];
                                      uint64_t v251 = *(_WORD *)(a1[2] + 64) & 0x1FF;
                                      unsigned int v252 = (char *)v250[536];
                                      unint64_t v253 = v250[537];
                                      if ((unint64_t)v252 >= v253)
                                      {
                                        unint64_t v255 = (char *)v250[535];
                                        uint64_t v256 = (v252 - v255) >> 3;
                                        if ((unint64_t)(v256 + 1) >> 61) {
                                          goto LABEL_373;
                                        }
                                        unint64_t v257 = v253 - (void)v255;
                                        unint64_t v258 = (uint64_t)(v253 - (void)v255) >> 2;
                                        if (v258 <= v256 + 1) {
                                          unint64_t v258 = v256 + 1;
                                        }
                                        if (v257 >= 0x7FFFFFFFFFFFFFF8) {
                                          unint64_t v259 = 0x1FFFFFFFFFFFFFFFLL;
                                        }
                                        else {
                                          unint64_t v259 = v258;
                                        }
                                        if (v259)
                                        {
                                          unint64_t v260 = (char *)sub_5714((uint64_t)(v250 + 537), v259);
                                          unsigned int v252 = (char *)v250[536];
                                          unint64_t v255 = (char *)v250[535];
                                        }
                                        else
                                        {
                                          unint64_t v260 = 0;
                                        }
                                        unint64_t v261 = &v260[8 * v256];
                                        unsigned int v262 = &v260[8 * v259];
                                        *(void *)unint64_t v261 = v251;
                                        unint64_t v254 = v261 + 8;
                                        while (v252 != v255)
                                        {
                                          uint64_t v263 = *((void *)v252 - 1);
                                          v252 -= 8;
                                          *((void *)v261 - 1) = v263;
                                          v261 -= 8;
                                        }
                                        v250[535] = v261;
                                        v250[536] = v254;
                                        v250[537] = v262;
                                        if (v255) {
                                          operator delete(v255);
                                        }
                                      }
                                      else
                                      {
                                        *(void *)unsigned int v252 = v251;
                                        unint64_t v254 = v252 + 8;
                                      }
                                      v250[536] = v254;
                                      if (!*(_DWORD *)(v3 + 48))
                                      {
                                        unint64_t v264 = *(void **)a1[1];
                                        uint64_t v265 = *(_WORD *)(a1[2] + 46) & 0x1FF;
                                        unsigned int v266 = (char *)v264[539];
                                        unint64_t v267 = v264[540];
                                        if ((unint64_t)v266 >= v267)
                                        {
                                          unint64_t v269 = (char *)v264[538];
                                          uint64_t v270 = (v266 - v269) >> 3;
                                          if ((unint64_t)(v270 + 1) >> 61) {
                                            goto LABEL_373;
                                          }
                                          unint64_t v271 = v267 - (void)v269;
                                          unint64_t v272 = (uint64_t)(v267 - (void)v269) >> 2;
                                          if (v272 <= v270 + 1) {
                                            unint64_t v272 = v270 + 1;
                                          }
                                          if (v271 >= 0x7FFFFFFFFFFFFFF8) {
                                            unint64_t v273 = 0x1FFFFFFFFFFFFFFFLL;
                                          }
                                          else {
                                            unint64_t v273 = v272;
                                          }
                                          if (v273)
                                          {
                                            unint64_t v274 = (char *)sub_5714((uint64_t)(v264 + 540), v273);
                                            unsigned int v266 = (char *)v264[539];
                                            unint64_t v269 = (char *)v264[538];
                                          }
                                          else
                                          {
                                            unint64_t v274 = 0;
                                          }
                                          unint64_t v275 = &v274[8 * v270];
                                          unint64_t v276 = &v274[8 * v273];
                                          *(void *)unint64_t v275 = v265;
                                          unint64_t v268 = v275 + 8;
                                          while (v266 != v269)
                                          {
                                            uint64_t v277 = *((void *)v266 - 1);
                                            v266 -= 8;
                                            *((void *)v275 - 1) = v277;
                                            v275 -= 8;
                                          }
                                          v264[538] = v275;
                                          v264[539] = v268;
                                          v264[540] = v276;
                                          if (v269) {
                                            operator delete(v269);
                                          }
                                        }
                                        else
                                        {
                                          *(void *)unsigned int v266 = v265;
                                          unint64_t v268 = v266 + 8;
                                        }
                                        v264[539] = v268;
                                        if (!*(_DWORD *)(v3 + 48))
                                        {
                                          unint64_t v278 = *(void **)a1[1];
                                          uint64_t v279 = *(_WORD *)(a1[2] + 66) & 0x1FF;
                                          unint64_t v280 = (char *)v278[542];
                                          unint64_t v281 = v278[543];
                                          if ((unint64_t)v280 >= v281)
                                          {
                                            unint64_t v283 = (char *)v278[541];
                                            uint64_t v284 = (v280 - v283) >> 3;
                                            if ((unint64_t)(v284 + 1) >> 61) {
                                              goto LABEL_373;
                                            }
                                            unint64_t v285 = v281 - (void)v283;
                                            unint64_t v286 = (uint64_t)(v281 - (void)v283) >> 2;
                                            if (v286 <= v284 + 1) {
                                              unint64_t v286 = v284 + 1;
                                            }
                                            if (v285 >= 0x7FFFFFFFFFFFFFF8) {
                                              unint64_t v287 = 0x1FFFFFFFFFFFFFFFLL;
                                            }
                                            else {
                                              unint64_t v287 = v286;
                                            }
                                            if (v287)
                                            {
                                              unint64_t v288 = (char *)sub_5714((uint64_t)(v278 + 543), v287);
                                              unint64_t v280 = (char *)v278[542];
                                              unint64_t v283 = (char *)v278[541];
                                            }
                                            else
                                            {
                                              unint64_t v288 = 0;
                                            }
                                            unint64_t v289 = &v288[8 * v284];
                                            unsigned int v290 = &v288[8 * v287];
                                            *(void *)unint64_t v289 = v279;
                                            int v282 = v289 + 8;
                                            while (v280 != v283)
                                            {
                                              uint64_t v291 = *((void *)v280 - 1);
                                              v280 -= 8;
                                              *((void *)v289 - 1) = v291;
                                              v289 -= 8;
                                            }
                                            v278[541] = v289;
                                            v278[542] = v282;
                                            v278[543] = v290;
                                            if (v283) {
                                              operator delete(v283);
                                            }
                                          }
                                          else
                                          {
                                            *(void *)unint64_t v280 = v279;
                                            int v282 = v280 + 8;
                                          }
                                          v278[542] = v282;
                                          if (!*(_DWORD *)(v3 + 48))
                                          {
                                            unint64_t v292 = *(void **)a1[1];
                                            uint64_t v293 = *(_WORD *)(a1[2] + 48) & 0x1FF;
                                            unsigned int v294 = (char *)v292[545];
                                            unint64_t v295 = v292[546];
                                            if ((unint64_t)v294 >= v295)
                                            {
                                              unint64_t v297 = (char *)v292[544];
                                              uint64_t v298 = (v294 - v297) >> 3;
                                              if ((unint64_t)(v298 + 1) >> 61) {
                                                goto LABEL_373;
                                              }
                                              unint64_t v299 = v295 - (void)v297;
                                              unint64_t v300 = (uint64_t)(v295 - (void)v297) >> 2;
                                              if (v300 <= v298 + 1) {
                                                unint64_t v300 = v298 + 1;
                                              }
                                              if (v299 >= 0x7FFFFFFFFFFFFFF8) {
                                                unint64_t v301 = 0x1FFFFFFFFFFFFFFFLL;
                                              }
                                              else {
                                                unint64_t v301 = v300;
                                              }
                                              if (v301)
                                              {
                                                int v302 = (char *)sub_5714((uint64_t)(v292 + 546), v301);
                                                unsigned int v294 = (char *)v292[545];
                                                unint64_t v297 = (char *)v292[544];
                                              }
                                              else
                                              {
                                                int v302 = 0;
                                              }
                                              uint64_t v303 = &v302[8 * v298];
                                              unint64_t v304 = &v302[8 * v301];
                                              *(void *)uint64_t v303 = v293;
                                              unint64_t v296 = v303 + 8;
                                              while (v294 != v297)
                                              {
                                                uint64_t v305 = *((void *)v294 - 1);
                                                v294 -= 8;
                                                *((void *)v303 - 1) = v305;
                                                v303 -= 8;
                                              }
                                              v292[544] = v303;
                                              v292[545] = v296;
                                              v292[546] = v304;
                                              if (v297) {
                                                operator delete(v297);
                                              }
                                            }
                                            else
                                            {
                                              *(void *)unsigned int v294 = v293;
                                              unint64_t v296 = v294 + 8;
                                            }
                                            v292[545] = v296;
                                            if (!*(_DWORD *)(v3 + 48))
                                            {
                                              uint64_t v306 = a1[2];
                                              unint64_t v307 = *(void **)a1[1];
                                              unint64_t v308 = (unint64_t)*(unsigned int *)(v306 + 28) >> 18;
                                              unsigned int v309 = (unint64_t *)v307[548];
                                              unint64_t v310 = v307[549];
                                              if ((unint64_t)v309 < v310)
                                              {
                                                *unsigned int v309 = v308;
                                                unint64_t v311 = v309 + 1;
LABEL_380:
                                                v307[548] = v311;
                                                goto LABEL_381;
                                              }
                                              unint64_t v312 = (unint64_t *)v307[547];
                                              uint64_t v313 = v309 - v312;
                                              if (!((unint64_t)(v313 + 1) >> 61))
                                              {
                                                unint64_t v314 = v310 - (void)v312;
                                                unint64_t v315 = (uint64_t)(v310 - (void)v312) >> 2;
                                                if (v315 <= v313 + 1) {
                                                  unint64_t v315 = v313 + 1;
                                                }
                                                if (v314 >= 0x7FFFFFFFFFFFFFF8) {
                                                  unint64_t v316 = 0x1FFFFFFFFFFFFFFFLL;
                                                }
                                                else {
                                                  unint64_t v316 = v315;
                                                }
                                                if (v316)
                                                {
                                                  unint64_t v317 = (char *)sub_5714((uint64_t)(v307 + 549), v316);
                                                  unsigned int v309 = (unint64_t *)v307[548];
                                                  unint64_t v312 = (unint64_t *)v307[547];
                                                }
                                                else
                                                {
                                                  unint64_t v317 = 0;
                                                }
                                                unint64_t v318 = (unint64_t *)&v317[8 * v313];
                                                int v319 = &v317[8 * v316];
                                                unint64_t *v318 = v308;
                                                unint64_t v311 = v318 + 1;
                                                while (v309 != v312)
                                                {
                                                  unint64_t v320 = *--v309;
                                                  *--unint64_t v318 = v320;
                                                }
                                                v307[547] = v318;
                                                v307[548] = v311;
                                                v307[549] = v319;
                                                if (v312) {
                                                  operator delete(v312);
                                                }
                                                goto LABEL_380;
                                              }
LABEL_373:
                                              sub_566C();
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_381:
    *a2 = 1;
    return;
  }
  if (!*(_DWORD *)(v3 + 48))
  {
    long long v11 = (void *)a1[1];
    uint64_t v10 = a1[2];
    uint64_t v12 = (void *)*v11;
    *(void *)(v12[485] - 8) += *(_WORD *)(v10 + 58) & 0x3FFF;
    *(void *)(v12[488] - 8) += *(_WORD *)(v10 + 40) & 0x3FFF;
    *(void *)(v12[491] - 8) += *(_WORD *)(v10 + 60) & 0x3FFF;
    *(void *)(v12[494] - 8) += *(_WORD *)(v10 + 42) & 0x3FFF;
    *(void *)(v12[497] - 8) += *(_WORD *)(v10 + 62) & 0x3FFF;
    *(void *)(v12[500] - 8) += *(_WORD *)(v10 + 44) & 0x3FFF;
    *(void *)(v12[503] - 8) += *(_DWORD *)(v10 + 28) & 0x3FFFF;
    *(void *)(v12[506] - 8) += *(_WORD *)(v10 + 52) & 0x3FFF;
    *(void *)(v12[509] - 8) += *(_WORD *)(v10 + 34) & 0x3FFF;
    *(void *)(v12[512] - 8) += *(_WORD *)(v10 + 54) & 0x3FFF;
    uint64_t v13 = a1[2];
    int v14 = *(void **)a1[1];
    *(void *)(v14[515] - 8) += *(_WORD *)(v13 + 36) & 0x3FFF;
    *(void *)(v14[518] - 8) += *(_WORD *)(v13 + 56) & 0x3FFF;
    *(void *)(v14[521] - 8) += *(_WORD *)(v13 + 38) & 0x3FFF;
    *(void *)(v14[524] - 8) += *(_DWORD *)(v13 + 24) & 0x3FFFF;
    *(void *)(v14[527] - 8) += *(_WORD *)(v13 + 68) & 0x7FF;
    *(void *)(v14[530] - 8) += *(_WORD *)(v13 + 50) & 0x7FF;
    *(void *)(v14[533] - 8) += *(_WORD *)(v13 + 32) & 0x1FFF;
    *(void *)(v14[536] - 8) += *(_WORD *)(v13 + 64) & 0x1FF;
    *(void *)(v14[539] - 8) += *(_WORD *)(v13 + 46) & 0x1FF;
    *(void *)(v14[542] - 8) += *(_WORD *)(v13 + 66) & 0x1FF;
    uint64_t v15 = a1[2];
    unint64_t v16 = (void *)*v11;
    *(void *)(v16[545] - 8) += *(_WORD *)(v15 + 48) & 0x1FF;
    *(void *)(v16[548] - 8) += (unint64_t)*(unsigned int *)(v15 + 28) >> 18;
  }
}

void sub_7BAA8(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    if (*(_DWORD *)(v3 + 48)) {
      goto LABEL_176;
    }
    uint64_t v5 = *(void **)a1[1];
    uint64_t v6 = *(_DWORD *)(a1[2] + 44) & 0xFFFFFLL;
    char v7 = (uint64_t *)v5[581];
    unint64_t v8 = v5[582];
    if ((unint64_t)v7 >= v8)
    {
      uint64_t v12 = (uint64_t *)v5[580];
      uint64_t v13 = v7 - v12;
      if ((unint64_t)(v13 + 1) >> 61) {
        goto LABEL_178;
      }
      unint64_t v14 = v8 - (void)v12;
      unint64_t v15 = (uint64_t)(v8 - (void)v12) >> 2;
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      if (v14 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v15;
      }
      if (v16)
      {
        uint64_t v17 = (char *)sub_5714((uint64_t)(v5 + 582), v16);
        char v7 = (uint64_t *)v5[581];
        uint64_t v12 = (uint64_t *)v5[580];
      }
      else
      {
        uint64_t v17 = 0;
      }
      uint64_t v18 = (uint64_t *)&v17[8 * v13];
      unint64_t v19 = &v17[8 * v16];
      *uint64_t v18 = v6;
      uint64_t v9 = v18 + 1;
      while (v7 != v12)
      {
        uint64_t v20 = *--v7;
        *--uint64_t v18 = v20;
      }
      v5[580] = v18;
      v5[581] = v9;
      v5[582] = v19;
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      uint64_t *v7 = v6;
      uint64_t v9 = v7 + 1;
    }
    v5[581] = v9;
    if (!*(_DWORD *)(v3 + 48))
    {
      unint64_t v21 = *(void **)a1[1];
      uint64_t v22 = *(_DWORD *)(a1[2] + 48) & 0xFFFFFLL;
      __int16 v23 = (uint64_t *)v21[584];
      unint64_t v24 = v21[585];
      if ((unint64_t)v23 >= v24)
      {
        uint8x8_t v26 = (uint64_t *)v21[583];
        uint64_t v27 = v23 - v26;
        if ((unint64_t)(v27 + 1) >> 61) {
          goto LABEL_178;
        }
        unint64_t v28 = v24 - (void)v26;
        unint64_t v29 = (uint64_t)(v24 - (void)v26) >> 2;
        if (v29 <= v27 + 1) {
          unint64_t v29 = v27 + 1;
        }
        if (v28 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v29;
        }
        if (v30)
        {
          int v31 = (char *)sub_5714((uint64_t)(v21 + 585), v30);
          __int16 v23 = (uint64_t *)v21[584];
          uint8x8_t v26 = (uint64_t *)v21[583];
        }
        else
        {
          int v31 = 0;
        }
        uint64_t v32 = (uint64_t *)&v31[8 * v27];
        unint64_t v33 = &v31[8 * v30];
        *uint64_t v32 = v22;
        uint64_t v25 = v32 + 1;
        while (v23 != v26)
        {
          uint64_t v34 = *--v23;
          *--uint64_t v32 = v34;
        }
        v21[583] = v32;
        v21[584] = v25;
        v21[585] = v33;
        if (v26) {
          operator delete(v26);
        }
      }
      else
      {
        *__int16 v23 = v22;
        uint64_t v25 = v23 + 1;
      }
      v21[584] = v25;
      if (!*(_DWORD *)(v3 + 48))
      {
        unint64_t v35 = *(void **)a1[1];
        uint64_t v36 = *(_DWORD *)(a1[2] + 52) & 0xFFFFFLL;
        __int16 v37 = (uint64_t *)v35[587];
        unint64_t v38 = v35[588];
        if ((unint64_t)v37 >= v38)
        {
          unint64_t v40 = (uint64_t *)v35[586];
          uint64_t v41 = v37 - v40;
          if ((unint64_t)(v41 + 1) >> 61) {
            goto LABEL_178;
          }
          unint64_t v42 = v38 - (void)v40;
          unint64_t v43 = (uint64_t)(v38 - (void)v40) >> 2;
          if (v43 <= v41 + 1) {
            unint64_t v43 = v41 + 1;
          }
          if (v42 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v44 = v43;
          }
          if (v44)
          {
            uint64_t v45 = (char *)sub_5714((uint64_t)(v35 + 588), v44);
            __int16 v37 = (uint64_t *)v35[587];
            unint64_t v40 = (uint64_t *)v35[586];
          }
          else
          {
            uint64_t v45 = 0;
          }
          uint64_t v46 = (uint64_t *)&v45[8 * v41];
          unint64_t v47 = &v45[8 * v44];
          *uint64_t v46 = v36;
          uint64_t v39 = v46 + 1;
          while (v37 != v40)
          {
            uint64_t v48 = *--v37;
            *--uint64_t v46 = v48;
          }
          v35[586] = v46;
          v35[587] = v39;
          v35[588] = v47;
          if (v40) {
            operator delete(v40);
          }
        }
        else
        {
          *__int16 v37 = v36;
          uint64_t v39 = v37 + 1;
        }
        v35[587] = v39;
        if (!*(_DWORD *)(v3 + 48))
        {
          uint64_t v49 = a1[1];
          unint64_t v50 = *(void **)v49;
          uint64_t v51 = *(unsigned __int16 *)(a1[2] + 58);
          unint64_t v52 = *(char **)(*(void *)v49 + 4720);
          unint64_t v53 = *(void *)(*(void *)v49 + 4728);
          if ((unint64_t)v52 >= v53)
          {
            uint64_t v55 = (char *)v50[589];
            uint64_t v56 = (v52 - v55) >> 3;
            if ((unint64_t)(v56 + 1) >> 61) {
              goto LABEL_178;
            }
            unint64_t v57 = v53 - (void)v55;
            unint64_t v58 = (uint64_t)(v53 - (void)v55) >> 2;
            if (v58 <= v56 + 1) {
              unint64_t v58 = v56 + 1;
            }
            if (v57 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v59 = v58;
            }
            if (v59)
            {
              uint64_t v60 = (char *)sub_5714((uint64_t)(v50 + 591), v59);
              unint64_t v52 = (char *)v50[590];
              uint64_t v55 = (char *)v50[589];
            }
            else
            {
              uint64_t v60 = 0;
            }
            unint64_t v61 = &v60[8 * v56];
            unint64_t v62 = &v60[8 * v59];
            *(void *)unint64_t v61 = v51;
            unint64_t v54 = v61 + 8;
            while (v52 != v55)
            {
              uint64_t v63 = *((void *)v52 - 1);
              v52 -= 8;
              *((void *)v61 - 1) = v63;
              v61 -= 8;
            }
            v50[589] = v61;
            v50[590] = v54;
            v50[591] = v62;
            if (v55) {
              operator delete(v55);
            }
          }
          else
          {
            *(void *)unint64_t v52 = v51;
            unint64_t v54 = v52 + 8;
          }
          v50[590] = v54;
          if (!*(_DWORD *)(v3 + 48))
          {
            uint64_t v64 = a1[1];
            unint64_t v65 = *(void **)v64;
            uint64_t v66 = *(unsigned __int16 *)(a1[2] + 56);
            uint64_t v67 = *(char **)(*(void *)v64 + 4744);
            unint64_t v68 = *(void *)(*(void *)v64 + 4752);
            if ((unint64_t)v67 >= v68)
            {
              unint64_t v70 = (char *)v65[592];
              uint64_t v71 = (v67 - v70) >> 3;
              if ((unint64_t)(v71 + 1) >> 61) {
                goto LABEL_178;
              }
              unint64_t v72 = v68 - (void)v70;
              unint64_t v73 = (uint64_t)(v68 - (void)v70) >> 2;
              if (v73 <= v71 + 1) {
                unint64_t v73 = v71 + 1;
              }
              if (v72 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v74 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v74 = v73;
              }
              if (v74)
              {
                unint64_t v75 = (char *)sub_5714((uint64_t)(v65 + 594), v74);
                uint64_t v67 = (char *)v65[593];
                unint64_t v70 = (char *)v65[592];
              }
              else
              {
                unint64_t v75 = 0;
              }
              unint64_t v76 = &v75[8 * v71];
              unint64_t v77 = &v75[8 * v74];
              *(void *)unint64_t v76 = v66;
              uint64_t v69 = v76 + 8;
              while (v67 != v70)
              {
                uint64_t v78 = *((void *)v67 - 1);
                v67 -= 8;
                *((void *)v76 - 1) = v78;
                v76 -= 8;
              }
              v65[592] = v76;
              v65[593] = v69;
              v65[594] = v77;
              if (v70) {
                operator delete(v70);
              }
            }
            else
            {
              *(void *)uint64_t v67 = v66;
              uint64_t v69 = v67 + 8;
            }
            v65[593] = v69;
            if (!*(_DWORD *)(v3 + 48))
            {
              unint64_t v79 = *(void **)a1[1];
              uint64_t v80 = *(_DWORD *)(a1[2] + 32) & 0xFFFFFLL;
              uint64_t v81 = (uint64_t *)v79[596];
              unint64_t v82 = v79[597];
              if ((unint64_t)v81 >= v82)
              {
                int v84 = (uint64_t *)v79[595];
                uint64_t v85 = v81 - v84;
                if ((unint64_t)(v85 + 1) >> 61) {
                  goto LABEL_178;
                }
                unint64_t v86 = v82 - (void)v84;
                unint64_t v87 = (uint64_t)(v82 - (void)v84) >> 2;
                if (v87 <= v85 + 1) {
                  unint64_t v87 = v85 + 1;
                }
                if (v86 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v88 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v88 = v87;
                }
                if (v88)
                {
                  unint64_t v89 = (char *)sub_5714((uint64_t)(v79 + 597), v88);
                  uint64_t v81 = (uint64_t *)v79[596];
                  int v84 = (uint64_t *)v79[595];
                }
                else
                {
                  unint64_t v89 = 0;
                }
                unint64_t v90 = (uint64_t *)&v89[8 * v85];
                unint64_t v91 = &v89[8 * v88];
                *unint64_t v90 = v80;
                uint64_t v83 = v90 + 1;
                while (v81 != v84)
                {
                  uint64_t v92 = *--v81;
                  *--unint64_t v90 = v92;
                }
                v79[595] = v90;
                v79[596] = v83;
                v79[597] = v91;
                if (v84) {
                  operator delete(v84);
                }
              }
              else
              {
                uint64_t *v81 = v80;
                uint64_t v83 = v81 + 1;
              }
              v79[596] = v83;
              if (!*(_DWORD *)(v3 + 48))
              {
                int v93 = *(void **)a1[1];
                uint64_t v94 = *(_DWORD *)(a1[2] + 36) & 0xFFFFFLL;
                uint64_t v95 = (uint64_t *)v93[599];
                unint64_t v96 = v93[600];
                if ((unint64_t)v95 >= v96)
                {
                  unsigned int v98 = (uint64_t *)v93[598];
                  uint64_t v99 = v95 - v98;
                  if ((unint64_t)(v99 + 1) >> 61) {
                    goto LABEL_178;
                  }
                  unint64_t v100 = v96 - (void)v98;
                  unint64_t v101 = (uint64_t)(v96 - (void)v98) >> 2;
                  if (v101 <= v99 + 1) {
                    unint64_t v101 = v99 + 1;
                  }
                  if (v100 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v102 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v102 = v101;
                  }
                  if (v102)
                  {
                    unint64_t v103 = (char *)sub_5714((uint64_t)(v93 + 600), v102);
                    uint64_t v95 = (uint64_t *)v93[599];
                    unsigned int v98 = (uint64_t *)v93[598];
                  }
                  else
                  {
                    unint64_t v103 = 0;
                  }
                  unint64_t v104 = (uint64_t *)&v103[8 * v99];
                  unint64_t v105 = &v103[8 * v102];
                  uint64_t *v104 = v94;
                  uint64_t v97 = v104 + 1;
                  while (v95 != v98)
                  {
                    uint64_t v106 = *--v95;
                    *--unint64_t v104 = v106;
                  }
                  v93[598] = v104;
                  v93[599] = v97;
                  v93[600] = v105;
                  if (v98) {
                    operator delete(v98);
                  }
                }
                else
                {
                  uint64_t *v95 = v94;
                  uint64_t v97 = v95 + 1;
                }
                v93[599] = v97;
                if (!*(_DWORD *)(v3 + 48))
                {
                  unint64_t v107 = *(void **)a1[1];
                  uint64_t v108 = *(_DWORD *)(a1[2] + 40) & 0xFFFFFLL;
                  uint64_t v109 = (uint64_t *)v107[602];
                  unint64_t v110 = v107[603];
                  if ((unint64_t)v109 >= v110)
                  {
                    unint64_t v112 = (uint64_t *)v107[601];
                    uint64_t v113 = v109 - v112;
                    if ((unint64_t)(v113 + 1) >> 61) {
                      goto LABEL_178;
                    }
                    unint64_t v114 = v110 - (void)v112;
                    unint64_t v115 = (uint64_t)(v110 - (void)v112) >> 2;
                    if (v115 <= v113 + 1) {
                      unint64_t v115 = v113 + 1;
                    }
                    if (v114 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v116 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v116 = v115;
                    }
                    if (v116)
                    {
                      unint64_t v117 = (char *)sub_5714((uint64_t)(v107 + 603), v116);
                      uint64_t v109 = (uint64_t *)v107[602];
                      unint64_t v112 = (uint64_t *)v107[601];
                    }
                    else
                    {
                      unint64_t v117 = 0;
                    }
                    unint64_t v118 = (uint64_t *)&v117[8 * v113];
                    unint64_t v119 = &v117[8 * v116];
                    uint64_t *v118 = v108;
                    uint64_t v111 = v118 + 1;
                    while (v109 != v112)
                    {
                      uint64_t v120 = *--v109;
                      *--unint64_t v118 = v120;
                    }
                    v107[601] = v118;
                    v107[602] = v111;
                    v107[603] = v119;
                    if (v112) {
                      operator delete(v112);
                    }
                  }
                  else
                  {
                    uint64_t *v109 = v108;
                    uint64_t v111 = v109 + 1;
                  }
                  v107[602] = v111;
                  if (!*(_DWORD *)(v3 + 48))
                  {
                    unint64_t v121 = *(void **)a1[1];
                    uint64_t v122 = *(_DWORD *)(a1[2] + 24) & 0xFFFFFLL;
                    uint64_t v123 = (uint64_t *)v121[605];
                    unint64_t v124 = v121[606];
                    if ((unint64_t)v123 >= v124)
                    {
                      unint64_t v126 = (uint64_t *)v121[604];
                      uint64_t v127 = v123 - v126;
                      if ((unint64_t)(v127 + 1) >> 61) {
                        goto LABEL_178;
                      }
                      unint64_t v128 = v124 - (void)v126;
                      unint64_t v129 = (uint64_t)(v124 - (void)v126) >> 2;
                      if (v129 <= v127 + 1) {
                        unint64_t v129 = v127 + 1;
                      }
                      if (v128 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v130 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v130 = v129;
                      }
                      if (v130)
                      {
                        unint64_t v131 = (char *)sub_5714((uint64_t)(v121 + 606), v130);
                        uint64_t v123 = (uint64_t *)v121[605];
                        unint64_t v126 = (uint64_t *)v121[604];
                      }
                      else
                      {
                        unint64_t v131 = 0;
                      }
                      unint64_t v132 = (uint64_t *)&v131[8 * v127];
                      unint64_t v133 = &v131[8 * v130];
                      *unint64_t v132 = v122;
                      uint64_t v125 = v132 + 1;
                      while (v123 != v126)
                      {
                        uint64_t v134 = *--v123;
                        *--unint64_t v132 = v134;
                      }
                      v121[604] = v132;
                      v121[605] = v125;
                      v121[606] = v133;
                      if (v126) {
                        operator delete(v126);
                      }
                    }
                    else
                    {
                      *uint64_t v123 = v122;
                      uint64_t v125 = v123 + 1;
                    }
                    v121[605] = v125;
                    if (!*(_DWORD *)(v3 + 48))
                    {
                      uint64_t v135 = a1[2];
                      int v136 = *(void **)a1[1];
                      uint64_t v137 = *(_DWORD *)(v135 + 28) & 0xFFFFFLL;
                      unint64_t v138 = (uint64_t *)v136[608];
                      unint64_t v139 = v136[609];
                      if ((unint64_t)v138 < v139)
                      {
                        *unint64_t v138 = v137;
                        uint64_t v140 = v138 + 1;
LABEL_175:
                        v136[608] = v140;
                        goto LABEL_176;
                      }
                      unint64_t v141 = (uint64_t *)v136[607];
                      uint64_t v142 = v138 - v141;
                      if (!((unint64_t)(v142 + 1) >> 61))
                      {
                        unint64_t v143 = v139 - (void)v141;
                        unint64_t v144 = (uint64_t)(v139 - (void)v141) >> 2;
                        if (v144 <= v142 + 1) {
                          unint64_t v144 = v142 + 1;
                        }
                        if (v143 >= 0x7FFFFFFFFFFFFFF8) {
                          unint64_t v145 = 0x1FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v145 = v144;
                        }
                        if (v145)
                        {
                          unint64_t v146 = (char *)sub_5714((uint64_t)(v136 + 609), v145);
                          unint64_t v138 = (uint64_t *)v136[608];
                          unint64_t v141 = (uint64_t *)v136[607];
                        }
                        else
                        {
                          unint64_t v146 = 0;
                        }
                        unint64_t v147 = (uint64_t *)&v146[8 * v142];
                        unint64_t v148 = &v146[8 * v145];
                        *unint64_t v147 = v137;
                        uint64_t v140 = v147 + 1;
                        while (v138 != v141)
                        {
                          uint64_t v149 = *--v138;
                          *--unint64_t v147 = v149;
                        }
                        v136[607] = v147;
                        v136[608] = v140;
                        v136[609] = v148;
                        if (v141) {
                          operator delete(v141);
                        }
                        goto LABEL_175;
                      }
LABEL_178:
                      sub_566C();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_176:
    *a2 = 1;
    return;
  }
  if (!*(_DWORD *)(v3 + 48))
  {
    uint64_t v10 = a1[2];
    long long v11 = *(void **)a1[1];
    *(void *)(v11[581] - 8) += *(_DWORD *)(v10 + 44) & 0xFFFFF;
    *(void *)(v11[584] - 8) += *(_DWORD *)(v10 + 48) & 0xFFFFF;
    *(void *)(v11[587] - 8) += *(_DWORD *)(v10 + 52) & 0xFFFFF;
    *(void *)(v11[590] - 8) += *(unsigned __int16 *)(v10 + 58);
    *(void *)(v11[593] - 8) += *(unsigned __int16 *)(v10 + 56);
    *(void *)(v11[596] - 8) += *(_DWORD *)(v10 + 32) & 0xFFFFF;
    *(void *)(v11[599] - 8) += *(_DWORD *)(v10 + 36) & 0xFFFFF;
    *(void *)(v11[602] - 8) += *(_DWORD *)(v10 + 40) & 0xFFFFF;
    *(void *)(v11[605] - 8) += *(_DWORD *)(v10 + 24) & 0xFFFFF;
    *(void *)(v11[608] - 8) += *(_DWORD *)(v10 + 28) & 0xFFFFF;
  }
}

void sub_7C43C(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    if (*(_DWORD *)(v3 + 48)) {
      goto LABEL_551;
    }
    uint64_t v5 = *(void **)a1[1];
    uint64_t v6 = *(_WORD *)(a1[2] + 34) & 0x7FFF;
    char v7 = (char *)v5[185];
    unint64_t v8 = v5[186];
    if ((unint64_t)v7 >= v8)
    {
      unint64_t v19 = (char *)v5[184];
      uint64_t v20 = (v7 - v19) >> 3;
      if ((unint64_t)(v20 + 1) >> 61) {
        goto LABEL_543;
      }
      unint64_t v21 = v8 - (void)v19;
      unint64_t v22 = (uint64_t)(v8 - (void)v19) >> 2;
      if (v22 <= v20 + 1) {
        unint64_t v22 = v20 + 1;
      }
      if (v21 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v23 = v22;
      }
      if (v23)
      {
        unint64_t v24 = (char *)sub_5714((uint64_t)(v5 + 186), v23);
        char v7 = (char *)v5[185];
        unint64_t v19 = (char *)v5[184];
      }
      else
      {
        unint64_t v24 = 0;
      }
      uint64_t v25 = &v24[8 * v20];
      uint8x8_t v26 = &v24[8 * v23];
      *(void *)uint64_t v25 = v6;
      uint64_t v9 = v25 + 8;
      while (v7 != v19)
      {
        uint64_t v27 = *((void *)v7 - 1);
        v7 -= 8;
        *((void *)v25 - 1) = v27;
        v25 -= 8;
      }
      v5[184] = v25;
      v5[185] = v9;
      v5[186] = v26;
      if (v19) {
        operator delete(v19);
      }
    }
    else
    {
      *(void *)char v7 = v6;
      uint64_t v9 = v7 + 8;
    }
    v5[185] = v9;
    if (!*(_DWORD *)(v3 + 48))
    {
      unint64_t v28 = *(void **)a1[1];
      uint64_t v29 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      unint64_t v30 = (char *)v28[188];
      unint64_t v31 = v28[189];
      if ((unint64_t)v30 >= v31)
      {
        unint64_t v33 = (char *)v28[187];
        uint64_t v34 = (v30 - v33) >> 3;
        if ((unint64_t)(v34 + 1) >> 61) {
          goto LABEL_543;
        }
        unint64_t v35 = v31 - (void)v33;
        unint64_t v36 = (uint64_t)(v31 - (void)v33) >> 2;
        if (v36 <= v34 + 1) {
          unint64_t v36 = v34 + 1;
        }
        if (v35 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v37 = v36;
        }
        if (v37)
        {
          unint64_t v38 = (char *)sub_5714((uint64_t)(v28 + 189), v37);
          unint64_t v30 = (char *)v28[188];
          unint64_t v33 = (char *)v28[187];
        }
        else
        {
          unint64_t v38 = 0;
        }
        uint64_t v39 = &v38[8 * v34];
        unint64_t v40 = &v38[8 * v37];
        *(void *)uint64_t v39 = v29;
        uint64_t v32 = v39 + 8;
        while (v30 != v33)
        {
          uint64_t v41 = *((void *)v30 - 1);
          v30 -= 8;
          *((void *)v39 - 1) = v41;
          v39 -= 8;
        }
        v28[187] = v39;
        v28[188] = v32;
        v28[189] = v40;
        if (v33) {
          operator delete(v33);
        }
      }
      else
      {
        *(void *)unint64_t v30 = v29;
        uint64_t v32 = v30 + 8;
      }
      v28[188] = v32;
      if (!*(_DWORD *)(v3 + 48))
      {
        unint64_t v42 = *(void **)a1[1];
        uint64_t v43 = *(_WORD *)(a1[2] + 36) & 0x7FFF;
        unint64_t v44 = (char *)v42[191];
        unint64_t v45 = v42[192];
        if ((unint64_t)v44 >= v45)
        {
          unint64_t v47 = (char *)v42[190];
          uint64_t v48 = (v44 - v47) >> 3;
          if ((unint64_t)(v48 + 1) >> 61) {
            goto LABEL_543;
          }
          unint64_t v49 = v45 - (void)v47;
          unint64_t v50 = (uint64_t)(v45 - (void)v47) >> 2;
          if (v50 <= v48 + 1) {
            unint64_t v50 = v48 + 1;
          }
          if (v49 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v51 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v51 = v50;
          }
          if (v51)
          {
            unint64_t v52 = (char *)sub_5714((uint64_t)(v42 + 192), v51);
            unint64_t v44 = (char *)v42[191];
            unint64_t v47 = (char *)v42[190];
          }
          else
          {
            unint64_t v52 = 0;
          }
          unint64_t v53 = &v52[8 * v48];
          unint64_t v54 = &v52[8 * v51];
          *(void *)unint64_t v53 = v43;
          uint64_t v46 = v53 + 8;
          while (v44 != v47)
          {
            uint64_t v55 = *((void *)v44 - 1);
            v44 -= 8;
            *((void *)v53 - 1) = v55;
            v53 -= 8;
          }
          v42[190] = v53;
          v42[191] = v46;
          v42[192] = v54;
          if (v47) {
            operator delete(v47);
          }
        }
        else
        {
          *(void *)unint64_t v44 = v43;
          uint64_t v46 = v44 + 8;
        }
        v42[191] = v46;
        if (!*(_DWORD *)(v3 + 48))
        {
          uint64_t v56 = *(void **)a1[1];
          uint64_t v57 = *(_WORD *)(a1[2] + 28) & 0x7FFF;
          unint64_t v58 = (char *)v56[194];
          unint64_t v59 = v56[195];
          if ((unint64_t)v58 >= v59)
          {
            unint64_t v61 = (char *)v56[193];
            uint64_t v62 = (v58 - v61) >> 3;
            if ((unint64_t)(v62 + 1) >> 61) {
              goto LABEL_543;
            }
            unint64_t v63 = v59 - (void)v61;
            unint64_t v64 = (uint64_t)(v59 - (void)v61) >> 2;
            if (v64 <= v62 + 1) {
              unint64_t v64 = v62 + 1;
            }
            if (v63 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v65 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v65 = v64;
            }
            if (v65)
            {
              uint64_t v66 = (char *)sub_5714((uint64_t)(v56 + 195), v65);
              unint64_t v58 = (char *)v56[194];
              unint64_t v61 = (char *)v56[193];
            }
            else
            {
              uint64_t v66 = 0;
            }
            uint64_t v67 = &v66[8 * v62];
            unint64_t v68 = &v66[8 * v65];
            *(void *)uint64_t v67 = v57;
            uint64_t v60 = v67 + 8;
            while (v58 != v61)
            {
              uint64_t v69 = *((void *)v58 - 1);
              v58 -= 8;
              *((void *)v67 - 1) = v69;
              v67 -= 8;
            }
            v56[193] = v67;
            v56[194] = v60;
            v56[195] = v68;
            if (v61) {
              operator delete(v61);
            }
          }
          else
          {
            *(void *)unint64_t v58 = v57;
            uint64_t v60 = v58 + 8;
          }
          v56[194] = v60;
          if (!*(_DWORD *)(v3 + 48))
          {
            unint64_t v70 = *(void **)a1[1];
            uint64_t v71 = *(_WORD *)(a1[2] + 38) & 0x7FFF;
            unint64_t v72 = (char *)v70[197];
            unint64_t v73 = v70[198];
            if ((unint64_t)v72 >= v73)
            {
              unint64_t v75 = (char *)v70[196];
              uint64_t v76 = (v72 - v75) >> 3;
              if ((unint64_t)(v76 + 1) >> 61) {
                goto LABEL_543;
              }
              unint64_t v77 = v73 - (void)v75;
              unint64_t v78 = (uint64_t)(v73 - (void)v75) >> 2;
              if (v78 <= v76 + 1) {
                unint64_t v78 = v76 + 1;
              }
              if (v77 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v79 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v79 = v78;
              }
              if (v79)
              {
                uint64_t v80 = (char *)sub_5714((uint64_t)(v70 + 198), v79);
                unint64_t v72 = (char *)v70[197];
                unint64_t v75 = (char *)v70[196];
              }
              else
              {
                uint64_t v80 = 0;
              }
              uint64_t v81 = &v80[8 * v76];
              unint64_t v82 = &v80[8 * v79];
              *(void *)uint64_t v81 = v71;
              unint64_t v74 = v81 + 8;
              while (v72 != v75)
              {
                uint64_t v83 = *((void *)v72 - 1);
                v72 -= 8;
                *((void *)v81 - 1) = v83;
                v81 -= 8;
              }
              v70[196] = v81;
              v70[197] = v74;
              v70[198] = v82;
              if (v75) {
                operator delete(v75);
              }
            }
            else
            {
              *(void *)unint64_t v72 = v71;
              unint64_t v74 = v72 + 8;
            }
            v70[197] = v74;
            if (!*(_DWORD *)(v3 + 48))
            {
              int v84 = *(void **)a1[1];
              uint64_t v85 = *(_WORD *)(a1[2] + 30) & 0x7FFF;
              unint64_t v86 = (char *)v84[200];
              unint64_t v87 = v84[201];
              if ((unint64_t)v86 >= v87)
              {
                unint64_t v89 = (char *)v84[199];
                uint64_t v90 = (v86 - v89) >> 3;
                if ((unint64_t)(v90 + 1) >> 61) {
                  goto LABEL_543;
                }
                unint64_t v91 = v87 - (void)v89;
                unint64_t v92 = (uint64_t)(v87 - (void)v89) >> 2;
                if (v92 <= v90 + 1) {
                  unint64_t v92 = v90 + 1;
                }
                if (v91 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v93 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v93 = v92;
                }
                if (v93)
                {
                  uint64_t v94 = (char *)sub_5714((uint64_t)(v84 + 201), v93);
                  unint64_t v86 = (char *)v84[200];
                  unint64_t v89 = (char *)v84[199];
                }
                else
                {
                  uint64_t v94 = 0;
                }
                uint64_t v95 = &v94[8 * v90];
                unint64_t v96 = &v94[8 * v93];
                *(void *)uint64_t v95 = v85;
                unint64_t v88 = v95 + 8;
                while (v86 != v89)
                {
                  uint64_t v97 = *((void *)v86 - 1);
                  v86 -= 8;
                  *((void *)v95 - 1) = v97;
                  v95 -= 8;
                }
                v84[199] = v95;
                v84[200] = v88;
                v84[201] = v96;
                if (v89) {
                  operator delete(v89);
                }
              }
              else
              {
                *(void *)unint64_t v86 = v85;
                unint64_t v88 = v86 + 8;
              }
              v84[200] = v88;
              if (!*(_DWORD *)(v3 + 48))
              {
                unsigned int v98 = *(void **)a1[1];
                uint64_t v99 = *(_WORD *)(a1[2] + 40) & 0x7FFF;
                unint64_t v100 = (char *)v98[203];
                unint64_t v101 = v98[204];
                if ((unint64_t)v100 >= v101)
                {
                  unint64_t v103 = (char *)v98[202];
                  uint64_t v104 = (v100 - v103) >> 3;
                  if ((unint64_t)(v104 + 1) >> 61) {
                    goto LABEL_543;
                  }
                  unint64_t v105 = v101 - (void)v103;
                  unint64_t v106 = (uint64_t)(v101 - (void)v103) >> 2;
                  if (v106 <= v104 + 1) {
                    unint64_t v106 = v104 + 1;
                  }
                  if (v105 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v107 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v107 = v106;
                  }
                  if (v107)
                  {
                    uint64_t v108 = (char *)sub_5714((uint64_t)(v98 + 204), v107);
                    unint64_t v100 = (char *)v98[203];
                    unint64_t v103 = (char *)v98[202];
                  }
                  else
                  {
                    uint64_t v108 = 0;
                  }
                  uint64_t v109 = &v108[8 * v104];
                  unint64_t v110 = &v108[8 * v107];
                  *(void *)uint64_t v109 = v99;
                  unint64_t v102 = v109 + 8;
                  while (v100 != v103)
                  {
                    uint64_t v111 = *((void *)v100 - 1);
                    v100 -= 8;
                    *((void *)v109 - 1) = v111;
                    v109 -= 8;
                  }
                  v98[202] = v109;
                  v98[203] = v102;
                  v98[204] = v110;
                  if (v103) {
                    operator delete(v103);
                  }
                }
                else
                {
                  *(void *)unint64_t v100 = v99;
                  unint64_t v102 = v100 + 8;
                }
                v98[203] = v102;
                if (!*(_DWORD *)(v3 + 48))
                {
                  unint64_t v112 = *(void **)a1[1];
                  uint64_t v113 = *(_WORD *)(a1[2] + 32) & 0x7FFF;
                  unint64_t v114 = (char *)v112[206];
                  unint64_t v115 = v112[207];
                  if ((unint64_t)v114 >= v115)
                  {
                    unint64_t v117 = (char *)v112[205];
                    uint64_t v118 = (v114 - v117) >> 3;
                    if ((unint64_t)(v118 + 1) >> 61) {
                      goto LABEL_543;
                    }
                    unint64_t v119 = v115 - (void)v117;
                    unint64_t v120 = (uint64_t)(v115 - (void)v117) >> 2;
                    if (v120 <= v118 + 1) {
                      unint64_t v120 = v118 + 1;
                    }
                    if (v119 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v121 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v121 = v120;
                    }
                    if (v121)
                    {
                      uint64_t v122 = (char *)sub_5714((uint64_t)(v112 + 207), v121);
                      unint64_t v114 = (char *)v112[206];
                      unint64_t v117 = (char *)v112[205];
                    }
                    else
                    {
                      uint64_t v122 = 0;
                    }
                    uint64_t v123 = &v122[8 * v118];
                    unint64_t v124 = &v122[8 * v121];
                    *(void *)uint64_t v123 = v113;
                    unint64_t v116 = v123 + 8;
                    while (v114 != v117)
                    {
                      uint64_t v125 = *((void *)v114 - 1);
                      v114 -= 8;
                      *((void *)v123 - 1) = v125;
                      v123 -= 8;
                    }
                    v112[205] = v123;
                    v112[206] = v116;
                    v112[207] = v124;
                    if (v117) {
                      operator delete(v117);
                    }
                  }
                  else
                  {
                    *(void *)unint64_t v114 = v113;
                    unint64_t v116 = v114 + 8;
                  }
                  v112[206] = v116;
                  if (!*(_DWORD *)(v3 + 48))
                  {
                    unint64_t v126 = *(void **)a1[1];
                    uint64_t v127 = *(_WORD *)(a1[2] + 50) & 0x7FFF;
                    unint64_t v128 = (char *)v126[209];
                    unint64_t v129 = v126[210];
                    if ((unint64_t)v128 >= v129)
                    {
                      unint64_t v131 = (char *)v126[208];
                      uint64_t v132 = (v128 - v131) >> 3;
                      if ((unint64_t)(v132 + 1) >> 61) {
                        goto LABEL_543;
                      }
                      unint64_t v133 = v129 - (void)v131;
                      unint64_t v134 = (uint64_t)(v129 - (void)v131) >> 2;
                      if (v134 <= v132 + 1) {
                        unint64_t v134 = v132 + 1;
                      }
                      if (v133 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v135 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v135 = v134;
                      }
                      if (v135)
                      {
                        int v136 = (char *)sub_5714((uint64_t)(v126 + 210), v135);
                        unint64_t v128 = (char *)v126[209];
                        unint64_t v131 = (char *)v126[208];
                      }
                      else
                      {
                        int v136 = 0;
                      }
                      uint64_t v137 = &v136[8 * v132];
                      unint64_t v138 = &v136[8 * v135];
                      *(void *)uint64_t v137 = v127;
                      unint64_t v130 = v137 + 8;
                      while (v128 != v131)
                      {
                        uint64_t v139 = *((void *)v128 - 1);
                        v128 -= 8;
                        *((void *)v137 - 1) = v139;
                        v137 -= 8;
                      }
                      v126[208] = v137;
                      v126[209] = v130;
                      v126[210] = v138;
                      if (v131) {
                        operator delete(v131);
                      }
                    }
                    else
                    {
                      *(void *)unint64_t v128 = v127;
                      unint64_t v130 = v128 + 8;
                    }
                    v126[209] = v130;
                    if (!*(_DWORD *)(v3 + 48))
                    {
                      uint64_t v140 = *(void **)a1[1];
                      uint64_t v141 = *(_WORD *)(a1[2] + 42) & 0x7FFF;
                      uint64_t v142 = (char *)v140[212];
                      unint64_t v143 = v140[213];
                      if ((unint64_t)v142 >= v143)
                      {
                        unint64_t v145 = (char *)v140[211];
                        uint64_t v146 = (v142 - v145) >> 3;
                        if ((unint64_t)(v146 + 1) >> 61) {
                          goto LABEL_543;
                        }
                        unint64_t v147 = v143 - (void)v145;
                        unint64_t v148 = (uint64_t)(v143 - (void)v145) >> 2;
                        if (v148 <= v146 + 1) {
                          unint64_t v148 = v146 + 1;
                        }
                        if (v147 >= 0x7FFFFFFFFFFFFFF8) {
                          unint64_t v149 = 0x1FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v149 = v148;
                        }
                        if (v149)
                        {
                          uint64_t v150 = (char *)sub_5714((uint64_t)(v140 + 213), v149);
                          uint64_t v142 = (char *)v140[212];
                          unint64_t v145 = (char *)v140[211];
                        }
                        else
                        {
                          uint64_t v150 = 0;
                        }
                        uint64_t v151 = &v150[8 * v146];
                        unsigned int v152 = &v150[8 * v149];
                        *(void *)uint64_t v151 = v141;
                        unint64_t v144 = v151 + 8;
                        while (v142 != v145)
                        {
                          uint64_t v153 = *((void *)v142 - 1);
                          v142 -= 8;
                          *((void *)v151 - 1) = v153;
                          v151 -= 8;
                        }
                        v140[211] = v151;
                        v140[212] = v144;
                        v140[213] = v152;
                        if (v145) {
                          operator delete(v145);
                        }
                      }
                      else
                      {
                        *(void *)uint64_t v142 = v141;
                        unint64_t v144 = v142 + 8;
                      }
                      v140[212] = v144;
                      if (!*(_DWORD *)(v3 + 48))
                      {
                        char v154 = *(void **)a1[1];
                        uint64_t v155 = *(_WORD *)(a1[2] + 52) & 0x7FFF;
                        unint64_t v156 = (char *)v154[215];
                        unint64_t v157 = v154[216];
                        if ((unint64_t)v156 >= v157)
                        {
                          unint64_t v159 = (char *)v154[214];
                          uint64_t v160 = (v156 - v159) >> 3;
                          if ((unint64_t)(v160 + 1) >> 61) {
                            goto LABEL_543;
                          }
                          unint64_t v161 = v157 - (void)v159;
                          unint64_t v162 = (uint64_t)(v157 - (void)v159) >> 2;
                          if (v162 <= v160 + 1) {
                            unint64_t v162 = v160 + 1;
                          }
                          if (v161 >= 0x7FFFFFFFFFFFFFF8) {
                            unint64_t v163 = 0x1FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v163 = v162;
                          }
                          if (v163)
                          {
                            unint64_t v164 = (char *)sub_5714((uint64_t)(v154 + 216), v163);
                            unint64_t v156 = (char *)v154[215];
                            unint64_t v159 = (char *)v154[214];
                          }
                          else
                          {
                            unint64_t v164 = 0;
                          }
                          uint64_t v165 = &v164[8 * v160];
                          unsigned __int16 v166 = &v164[8 * v163];
                          *(void *)uint64_t v165 = v155;
                          uint64_t v158 = v165 + 8;
                          while (v156 != v159)
                          {
                            uint64_t v167 = *((void *)v156 - 1);
                            v156 -= 8;
                            *((void *)v165 - 1) = v167;
                            v165 -= 8;
                          }
                          v154[214] = v165;
                          v154[215] = v158;
                          v154[216] = v166;
                          if (v159) {
                            operator delete(v159);
                          }
                        }
                        else
                        {
                          *(void *)unint64_t v156 = v155;
                          uint64_t v158 = v156 + 8;
                        }
                        v154[215] = v158;
                        if (!*(_DWORD *)(v3 + 48))
                        {
                          unint64_t v168 = *(void **)a1[1];
                          uint64_t v169 = *(_WORD *)(a1[2] + 44) & 0x7FFF;
                          int v170 = (char *)v168[218];
                          unint64_t v171 = v168[219];
                          if ((unint64_t)v170 >= v171)
                          {
                            unint64_t v173 = (char *)v168[217];
                            uint64_t v174 = (v170 - v173) >> 3;
                            if ((unint64_t)(v174 + 1) >> 61) {
                              goto LABEL_543;
                            }
                            unint64_t v175 = v171 - (void)v173;
                            unint64_t v176 = (uint64_t)(v171 - (void)v173) >> 2;
                            if (v176 <= v174 + 1) {
                              unint64_t v176 = v174 + 1;
                            }
                            if (v175 >= 0x7FFFFFFFFFFFFFF8) {
                              unint64_t v177 = 0x1FFFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v177 = v176;
                            }
                            if (v177)
                            {
                              unsigned int v178 = (char *)sub_5714((uint64_t)(v168 + 219), v177);
                              int v170 = (char *)v168[218];
                              unint64_t v173 = (char *)v168[217];
                            }
                            else
                            {
                              unsigned int v178 = 0;
                            }
                            uint64_t v179 = &v178[8 * v174];
                            unsigned int v180 = &v178[8 * v177];
                            *(void *)uint64_t v179 = v169;
                            uint64_t v172 = v179 + 8;
                            while (v170 != v173)
                            {
                              uint64_t v181 = *((void *)v170 - 1);
                              v170 -= 8;
                              *((void *)v179 - 1) = v181;
                              v179 -= 8;
                            }
                            v168[217] = v179;
                            v168[218] = v172;
                            v168[219] = v180;
                            if (v173) {
                              operator delete(v173);
                            }
                          }
                          else
                          {
                            *(void *)int v170 = v169;
                            uint64_t v172 = v170 + 8;
                          }
                          v168[218] = v172;
                          if (!*(_DWORD *)(v3 + 48))
                          {
                            uint64_t v182 = *(void **)a1[1];
                            uint64_t v183 = *(_WORD *)(a1[2] + 54) & 0x7FFF;
                            unint64_t v184 = (char *)v182[221];
                            unint64_t v185 = v182[222];
                            if ((unint64_t)v184 >= v185)
                            {
                              unint64_t v187 = (char *)v182[220];
                              uint64_t v188 = (v184 - v187) >> 3;
                              if ((unint64_t)(v188 + 1) >> 61) {
                                goto LABEL_543;
                              }
                              unint64_t v189 = v185 - (void)v187;
                              unint64_t v190 = (uint64_t)(v185 - (void)v187) >> 2;
                              if (v190 <= v188 + 1) {
                                unint64_t v190 = v188 + 1;
                              }
                              if (v189 >= 0x7FFFFFFFFFFFFFF8) {
                                unint64_t v191 = 0x1FFFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v191 = v190;
                              }
                              if (v191)
                              {
                                unint64_t v192 = (char *)sub_5714((uint64_t)(v182 + 222), v191);
                                unint64_t v184 = (char *)v182[221];
                                unint64_t v187 = (char *)v182[220];
                              }
                              else
                              {
                                unint64_t v192 = 0;
                              }
                              uint64_t v193 = &v192[8 * v188];
                              unsigned __int16 v194 = &v192[8 * v191];
                              *(void *)uint64_t v193 = v183;
                              uint64_t v186 = v193 + 8;
                              while (v184 != v187)
                              {
                                uint64_t v195 = *((void *)v184 - 1);
                                v184 -= 8;
                                *((void *)v193 - 1) = v195;
                                v193 -= 8;
                              }
                              v182[220] = v193;
                              v182[221] = v186;
                              v182[222] = v194;
                              if (v187) {
                                operator delete(v187);
                              }
                            }
                            else
                            {
                              *(void *)unint64_t v184 = v183;
                              uint64_t v186 = v184 + 8;
                            }
                            v182[221] = v186;
                            if (!*(_DWORD *)(v3 + 48))
                            {
                              unint64_t v196 = *(void **)a1[1];
                              uint64_t v197 = *(_WORD *)(a1[2] + 46) & 0x7FFF;
                              unint64_t v198 = (char *)v196[224];
                              unint64_t v199 = v196[225];
                              if ((unint64_t)v198 >= v199)
                              {
                                unint64_t v201 = (char *)v196[223];
                                uint64_t v202 = (v198 - v201) >> 3;
                                if ((unint64_t)(v202 + 1) >> 61) {
                                  goto LABEL_543;
                                }
                                unint64_t v203 = v199 - (void)v201;
                                unint64_t v204 = (uint64_t)(v199 - (void)v201) >> 2;
                                if (v204 <= v202 + 1) {
                                  unint64_t v204 = v202 + 1;
                                }
                                if (v203 >= 0x7FFFFFFFFFFFFFF8) {
                                  unint64_t v205 = 0x1FFFFFFFFFFFFFFFLL;
                                }
                                else {
                                  unint64_t v205 = v204;
                                }
                                if (v205)
                                {
                                  uint64_t v206 = (char *)sub_5714((uint64_t)(v196 + 225), v205);
                                  unint64_t v198 = (char *)v196[224];
                                  unint64_t v201 = (char *)v196[223];
                                }
                                else
                                {
                                  uint64_t v206 = 0;
                                }
                                uint64_t v207 = &v206[8 * v202];
                                unsigned int v208 = &v206[8 * v205];
                                *(void *)uint64_t v207 = v197;
                                uint64_t v200 = v207 + 8;
                                while (v198 != v201)
                                {
                                  uint64_t v209 = *((void *)v198 - 1);
                                  v198 -= 8;
                                  *((void *)v207 - 1) = v209;
                                  v207 -= 8;
                                }
                                v196[223] = v207;
                                v196[224] = v200;
                                v196[225] = v208;
                                if (v201) {
                                  operator delete(v201);
                                }
                              }
                              else
                              {
                                *(void *)unint64_t v198 = v197;
                                uint64_t v200 = v198 + 8;
                              }
                              v196[224] = v200;
                              if (!*(_DWORD *)(v3 + 48))
                              {
                                unint64_t v210 = *(void **)a1[1];
                                uint64_t v211 = *(_WORD *)(a1[2] + 56) & 0x7FFF;
                                unsigned __int16 v212 = (char *)v210[227];
                                unint64_t v213 = v210[228];
                                if ((unint64_t)v212 >= v213)
                                {
                                  unint64_t v215 = (char *)v210[226];
                                  uint64_t v216 = (v212 - v215) >> 3;
                                  if ((unint64_t)(v216 + 1) >> 61) {
                                    goto LABEL_543;
                                  }
                                  unint64_t v217 = v213 - (void)v215;
                                  unint64_t v218 = (uint64_t)(v213 - (void)v215) >> 2;
                                  if (v218 <= v216 + 1) {
                                    unint64_t v218 = v216 + 1;
                                  }
                                  if (v217 >= 0x7FFFFFFFFFFFFFF8) {
                                    unint64_t v219 = 0x1FFFFFFFFFFFFFFFLL;
                                  }
                                  else {
                                    unint64_t v219 = v218;
                                  }
                                  if (v219)
                                  {
                                    unint64_t v220 = (char *)sub_5714((uint64_t)(v210 + 228), v219);
                                    unsigned __int16 v212 = (char *)v210[227];
                                    unint64_t v215 = (char *)v210[226];
                                  }
                                  else
                                  {
                                    unint64_t v220 = 0;
                                  }
                                  uint64_t v221 = &v220[8 * v216];
                                  unint64_t v222 = &v220[8 * v219];
                                  *(void *)uint64_t v221 = v211;
                                  uint64_t v214 = v221 + 8;
                                  while (v212 != v215)
                                  {
                                    uint64_t v223 = *((void *)v212 - 1);
                                    v212 -= 8;
                                    *((void *)v221 - 1) = v223;
                                    v221 -= 8;
                                  }
                                  v210[226] = v221;
                                  v210[227] = v214;
                                  v210[228] = v222;
                                  if (v215) {
                                    operator delete(v215);
                                  }
                                }
                                else
                                {
                                  *(void *)unsigned __int16 v212 = v211;
                                  uint64_t v214 = v212 + 8;
                                }
                                v210[227] = v214;
                                if (!*(_DWORD *)(v3 + 48))
                                {
                                  unint64_t v224 = *(void **)a1[1];
                                  uint64_t v225 = *(_WORD *)(a1[2] + 48) & 0x7FFF;
                                  unint64_t v226 = (char *)v224[230];
                                  unint64_t v227 = v224[231];
                                  if ((unint64_t)v226 >= v227)
                                  {
                                    unint64_t v229 = (char *)v224[229];
                                    uint64_t v230 = (v226 - v229) >> 3;
                                    if ((unint64_t)(v230 + 1) >> 61) {
                                      goto LABEL_543;
                                    }
                                    unint64_t v231 = v227 - (void)v229;
                                    unint64_t v232 = (uint64_t)(v227 - (void)v229) >> 2;
                                    if (v232 <= v230 + 1) {
                                      unint64_t v232 = v230 + 1;
                                    }
                                    if (v231 >= 0x7FFFFFFFFFFFFFF8) {
                                      unint64_t v233 = 0x1FFFFFFFFFFFFFFFLL;
                                    }
                                    else {
                                      unint64_t v233 = v232;
                                    }
                                    if (v233)
                                    {
                                      int v234 = (char *)sub_5714((uint64_t)(v224 + 231), v233);
                                      unint64_t v226 = (char *)v224[230];
                                      unint64_t v229 = (char *)v224[229];
                                    }
                                    else
                                    {
                                      int v234 = 0;
                                    }
                                    uint64_t v235 = &v234[8 * v230];
                                    unint64_t v236 = &v234[8 * v233];
                                    *(void *)uint64_t v235 = v225;
                                    uint64_t v228 = v235 + 8;
                                    while (v226 != v229)
                                    {
                                      uint64_t v237 = *((void *)v226 - 1);
                                      v226 -= 8;
                                      *((void *)v235 - 1) = v237;
                                      v235 -= 8;
                                    }
                                    v224[229] = v235;
                                    v224[230] = v228;
                                    v224[231] = v236;
                                    if (v229) {
                                      operator delete(v229);
                                    }
                                  }
                                  else
                                  {
                                    *(void *)unint64_t v226 = v225;
                                    uint64_t v228 = v226 + 8;
                                  }
                                  v224[230] = v228;
                                  if (!*(_DWORD *)(v3 + 48))
                                  {
                                    unint64_t v238 = *(void **)a1[1];
                                    uint64_t v239 = *(_WORD *)(a1[2] + 66) & 0x7FFF;
                                    uint64_t v240 = (char *)v238[233];
                                    unint64_t v241 = v238[234];
                                    if ((unint64_t)v240 >= v241)
                                    {
                                      unint64_t v243 = (char *)v238[232];
                                      uint64_t v244 = (v240 - v243) >> 3;
                                      if ((unint64_t)(v244 + 1) >> 61) {
                                        goto LABEL_543;
                                      }
                                      unint64_t v245 = v241 - (void)v243;
                                      unint64_t v246 = (uint64_t)(v241 - (void)v243) >> 2;
                                      if (v246 <= v244 + 1) {
                                        unint64_t v246 = v244 + 1;
                                      }
                                      if (v245 >= 0x7FFFFFFFFFFFFFF8) {
                                        unint64_t v247 = 0x1FFFFFFFFFFFFFFFLL;
                                      }
                                      else {
                                        unint64_t v247 = v246;
                                      }
                                      if (v247)
                                      {
                                        unsigned int v248 = (char *)sub_5714((uint64_t)(v238 + 234), v247);
                                        uint64_t v240 = (char *)v238[233];
                                        unint64_t v243 = (char *)v238[232];
                                      }
                                      else
                                      {
                                        unsigned int v248 = 0;
                                      }
                                      uint64_t v249 = &v248[8 * v244];
                                      unint64_t v250 = &v248[8 * v247];
                                      *(void *)uint64_t v249 = v239;
                                      uint64_t v242 = v249 + 8;
                                      while (v240 != v243)
                                      {
                                        uint64_t v251 = *((void *)v240 - 1);
                                        v240 -= 8;
                                        *((void *)v249 - 1) = v251;
                                        v249 -= 8;
                                      }
                                      v238[232] = v249;
                                      v238[233] = v242;
                                      v238[234] = v250;
                                      if (v243) {
                                        operator delete(v243);
                                      }
                                    }
                                    else
                                    {
                                      *(void *)uint64_t v240 = v239;
                                      uint64_t v242 = v240 + 8;
                                    }
                                    v238[233] = v242;
                                    if (!*(_DWORD *)(v3 + 48))
                                    {
                                      unsigned int v252 = *(void **)a1[1];
                                      uint64_t v253 = *(_WORD *)(a1[2] + 58) & 0x7FFF;
                                      unint64_t v254 = (char *)v252[236];
                                      unint64_t v255 = v252[237];
                                      if ((unint64_t)v254 >= v255)
                                      {
                                        unint64_t v257 = (char *)v252[235];
                                        uint64_t v258 = (v254 - v257) >> 3;
                                        if ((unint64_t)(v258 + 1) >> 61) {
                                          goto LABEL_543;
                                        }
                                        unint64_t v259 = v255 - (void)v257;
                                        unint64_t v260 = (uint64_t)(v255 - (void)v257) >> 2;
                                        if (v260 <= v258 + 1) {
                                          unint64_t v260 = v258 + 1;
                                        }
                                        if (v259 >= 0x7FFFFFFFFFFFFFF8) {
                                          unint64_t v261 = 0x1FFFFFFFFFFFFFFFLL;
                                        }
                                        else {
                                          unint64_t v261 = v260;
                                        }
                                        if (v261)
                                        {
                                          unsigned int v262 = (char *)sub_5714((uint64_t)(v252 + 237), v261);
                                          unint64_t v254 = (char *)v252[236];
                                          unint64_t v257 = (char *)v252[235];
                                        }
                                        else
                                        {
                                          unsigned int v262 = 0;
                                        }
                                        uint64_t v263 = &v262[8 * v258];
                                        unint64_t v264 = &v262[8 * v261];
                                        *(void *)uint64_t v263 = v253;
                                        uint64_t v256 = v263 + 8;
                                        while (v254 != v257)
                                        {
                                          uint64_t v265 = *((void *)v254 - 1);
                                          v254 -= 8;
                                          *((void *)v263 - 1) = v265;
                                          v263 -= 8;
                                        }
                                        v252[235] = v263;
                                        v252[236] = v256;
                                        v252[237] = v264;
                                        if (v257) {
                                          operator delete(v257);
                                        }
                                      }
                                      else
                                      {
                                        *(void *)unint64_t v254 = v253;
                                        uint64_t v256 = v254 + 8;
                                      }
                                      v252[236] = v256;
                                      if (!*(_DWORD *)(v3 + 48))
                                      {
                                        unsigned int v266 = *(void **)a1[1];
                                        uint64_t v267 = *(_WORD *)(a1[2] + 68) & 0x7FFF;
                                        unint64_t v268 = (char *)v266[239];
                                        unint64_t v269 = v266[240];
                                        if ((unint64_t)v268 >= v269)
                                        {
                                          unint64_t v271 = (char *)v266[238];
                                          uint64_t v272 = (v268 - v271) >> 3;
                                          if ((unint64_t)(v272 + 1) >> 61) {
                                            goto LABEL_543;
                                          }
                                          unint64_t v273 = v269 - (void)v271;
                                          unint64_t v274 = (uint64_t)(v269 - (void)v271) >> 2;
                                          if (v274 <= v272 + 1) {
                                            unint64_t v274 = v272 + 1;
                                          }
                                          if (v273 >= 0x7FFFFFFFFFFFFFF8) {
                                            unint64_t v275 = 0x1FFFFFFFFFFFFFFFLL;
                                          }
                                          else {
                                            unint64_t v275 = v274;
                                          }
                                          if (v275)
                                          {
                                            unint64_t v276 = (char *)sub_5714((uint64_t)(v266 + 240), v275);
                                            unint64_t v268 = (char *)v266[239];
                                            unint64_t v271 = (char *)v266[238];
                                          }
                                          else
                                          {
                                            unint64_t v276 = 0;
                                          }
                                          uint64_t v277 = &v276[8 * v272];
                                          unint64_t v278 = &v276[8 * v275];
                                          *(void *)uint64_t v277 = v267;
                                          uint64_t v270 = v277 + 8;
                                          while (v268 != v271)
                                          {
                                            uint64_t v279 = *((void *)v268 - 1);
                                            v268 -= 8;
                                            *((void *)v277 - 1) = v279;
                                            v277 -= 8;
                                          }
                                          v266[238] = v277;
                                          v266[239] = v270;
                                          v266[240] = v278;
                                          if (v271) {
                                            operator delete(v271);
                                          }
                                        }
                                        else
                                        {
                                          *(void *)unint64_t v268 = v267;
                                          uint64_t v270 = v268 + 8;
                                        }
                                        v266[239] = v270;
                                        if (!*(_DWORD *)(v3 + 48))
                                        {
                                          unint64_t v280 = *(void **)a1[1];
                                          uint64_t v281 = *(_WORD *)(a1[2] + 60) & 0x7FFF;
                                          int v282 = (char *)v280[242];
                                          unint64_t v283 = v280[243];
                                          if ((unint64_t)v282 >= v283)
                                          {
                                            unint64_t v285 = (char *)v280[241];
                                            uint64_t v286 = (v282 - v285) >> 3;
                                            if ((unint64_t)(v286 + 1) >> 61) {
                                              goto LABEL_543;
                                            }
                                            unint64_t v287 = v283 - (void)v285;
                                            unint64_t v288 = (uint64_t)(v283 - (void)v285) >> 2;
                                            if (v288 <= v286 + 1) {
                                              unint64_t v288 = v286 + 1;
                                            }
                                            if (v287 >= 0x7FFFFFFFFFFFFFF8) {
                                              unint64_t v289 = 0x1FFFFFFFFFFFFFFFLL;
                                            }
                                            else {
                                              unint64_t v289 = v288;
                                            }
                                            if (v289)
                                            {
                                              unsigned int v290 = (char *)sub_5714((uint64_t)(v280 + 243), v289);
                                              int v282 = (char *)v280[242];
                                              unint64_t v285 = (char *)v280[241];
                                            }
                                            else
                                            {
                                              unsigned int v290 = 0;
                                            }
                                            uint64_t v291 = &v290[8 * v286];
                                            unint64_t v292 = &v290[8 * v289];
                                            *(void *)uint64_t v291 = v281;
                                            uint64_t v284 = v291 + 8;
                                            while (v282 != v285)
                                            {
                                              uint64_t v293 = *((void *)v282 - 1);
                                              v282 -= 8;
                                              *((void *)v291 - 1) = v293;
                                              v291 -= 8;
                                            }
                                            v280[241] = v291;
                                            v280[242] = v284;
                                            v280[243] = v292;
                                            if (v285) {
                                              operator delete(v285);
                                            }
                                          }
                                          else
                                          {
                                            *(void *)int v282 = v281;
                                            uint64_t v284 = v282 + 8;
                                          }
                                          v280[242] = v284;
                                          if (!*(_DWORD *)(v3 + 48))
                                          {
                                            unsigned int v294 = *(void **)a1[1];
                                            uint64_t v295 = *(_WORD *)(a1[2] + 70) & 0x7FFF;
                                            unint64_t v296 = (char *)v294[245];
                                            unint64_t v297 = v294[246];
                                            if ((unint64_t)v296 >= v297)
                                            {
                                              unint64_t v299 = (char *)v294[244];
                                              uint64_t v300 = (v296 - v299) >> 3;
                                              if ((unint64_t)(v300 + 1) >> 61) {
                                                goto LABEL_543;
                                              }
                                              unint64_t v301 = v297 - (void)v299;
                                              unint64_t v302 = (uint64_t)(v297 - (void)v299) >> 2;
                                              if (v302 <= v300 + 1) {
                                                unint64_t v302 = v300 + 1;
                                              }
                                              if (v301 >= 0x7FFFFFFFFFFFFFF8) {
                                                unint64_t v303 = 0x1FFFFFFFFFFFFFFFLL;
                                              }
                                              else {
                                                unint64_t v303 = v302;
                                              }
                                              if (v303)
                                              {
                                                unint64_t v304 = (char *)sub_5714((uint64_t)(v294 + 246), v303);
                                                unint64_t v296 = (char *)v294[245];
                                                unint64_t v299 = (char *)v294[244];
                                              }
                                              else
                                              {
                                                unint64_t v304 = 0;
                                              }
                                              uint64_t v305 = &v304[8 * v300];
                                              uint64_t v306 = &v304[8 * v303];
                                              *(void *)uint64_t v305 = v295;
                                              uint64_t v298 = v305 + 8;
                                              while (v296 != v299)
                                              {
                                                uint64_t v307 = *((void *)v296 - 1);
                                                v296 -= 8;
                                                *((void *)v305 - 1) = v307;
                                                v305 -= 8;
                                              }
                                              v294[244] = v305;
                                              v294[245] = v298;
                                              v294[246] = v306;
                                              if (v299) {
                                                operator delete(v299);
                                              }
                                            }
                                            else
                                            {
                                              *(void *)unint64_t v296 = v295;
                                              uint64_t v298 = v296 + 8;
                                            }
                                            v294[245] = v298;
                                            if (!*(_DWORD *)(v3 + 48))
                                            {
                                              unint64_t v308 = *(void **)a1[1];
                                              uint64_t v309 = *(_WORD *)(a1[2] + 62) & 0x7FFF;
                                              unint64_t v310 = (char *)v308[248];
                                              unint64_t v311 = v308[249];
                                              if ((unint64_t)v310 >= v311)
                                              {
                                                uint64_t v313 = (char *)v308[247];
                                                uint64_t v314 = (v310 - v313) >> 3;
                                                if ((unint64_t)(v314 + 1) >> 61) {
                                                  goto LABEL_543;
                                                }
                                                unint64_t v315 = v311 - (void)v313;
                                                unint64_t v316 = (uint64_t)(v311 - (void)v313) >> 2;
                                                if (v316 <= v314 + 1) {
                                                  unint64_t v316 = v314 + 1;
                                                }
                                                if (v315 >= 0x7FFFFFFFFFFFFFF8) {
                                                  unint64_t v317 = 0x1FFFFFFFFFFFFFFFLL;
                                                }
                                                else {
                                                  unint64_t v317 = v316;
                                                }
                                                if (v317)
                                                {
                                                  unint64_t v318 = (char *)sub_5714((uint64_t)(v308 + 249), v317);
                                                  unint64_t v310 = (char *)v308[248];
                                                  uint64_t v313 = (char *)v308[247];
                                                }
                                                else
                                                {
                                                  unint64_t v318 = 0;
                                                }
                                                int v319 = &v318[8 * v314];
                                                unint64_t v320 = &v318[8 * v317];
                                                *(void *)int v319 = v309;
                                                unint64_t v312 = v319 + 8;
                                                while (v310 != v313)
                                                {
                                                  uint64_t v321 = *((void *)v310 - 1);
                                                  v310 -= 8;
                                                  *((void *)v319 - 1) = v321;
                                                  v319 -= 8;
                                                }
                                                v308[247] = v319;
                                                v308[248] = v312;
                                                v308[249] = v320;
                                                if (v313) {
                                                  operator delete(v313);
                                                }
                                              }
                                              else
                                              {
                                                *(void *)unint64_t v310 = v309;
                                                unint64_t v312 = v310 + 8;
                                              }
                                              v308[248] = v312;
                                              if (!*(_DWORD *)(v3 + 48))
                                              {
                                                unint64_t v322 = *(void **)a1[1];
                                                uint64_t v323 = *(_WORD *)(a1[2] + 72) & 0x7FFF;
                                                unint64_t v324 = (char *)v322[251];
                                                unint64_t v325 = v322[252];
                                                if ((unint64_t)v324 >= v325)
                                                {
                                                  int v327 = (char *)v322[250];
                                                  uint64_t v328 = (v324 - v327) >> 3;
                                                  if ((unint64_t)(v328 + 1) >> 61) {
                                                    goto LABEL_543;
                                                  }
                                                  unint64_t v329 = v325 - (void)v327;
                                                  unint64_t v330 = (uint64_t)(v325 - (void)v327) >> 2;
                                                  if (v330 <= v328 + 1) {
                                                    unint64_t v330 = v328 + 1;
                                                  }
                                                  if (v329 >= 0x7FFFFFFFFFFFFFF8) {
                                                    unint64_t v331 = 0x1FFFFFFFFFFFFFFFLL;
                                                  }
                                                  else {
                                                    unint64_t v331 = v330;
                                                  }
                                                  if (v331)
                                                  {
                                                    unint64_t v332 = (char *)sub_5714((uint64_t)(v322 + 252), v331);
                                                    unint64_t v324 = (char *)v322[251];
                                                    int v327 = (char *)v322[250];
                                                  }
                                                  else
                                                  {
                                                    unint64_t v332 = 0;
                                                  }
                                                  uint64_t v333 = &v332[8 * v328];
                                                  unsigned int v334 = &v332[8 * v331];
                                                  *(void *)uint64_t v333 = v323;
                                                  int v326 = v333 + 8;
                                                  while (v324 != v327)
                                                  {
                                                    uint64_t v335 = *((void *)v324 - 1);
                                                    v324 -= 8;
                                                    *((void *)v333 - 1) = v335;
                                                    v333 -= 8;
                                                  }
                                                  v322[250] = v333;
                                                  v322[251] = v326;
                                                  v322[252] = v334;
                                                  if (v327) {
                                                    operator delete(v327);
                                                  }
                                                }
                                                else
                                                {
                                                  *(void *)unint64_t v324 = v323;
                                                  int v326 = v324 + 8;
                                                }
                                                v322[251] = v326;
                                                if (!*(_DWORD *)(v3 + 48))
                                                {
                                                  unint64_t v336 = *(void **)a1[1];
                                                  uint64_t v337 = *(_WORD *)(a1[2] + 64) & 0x7FFF;
                                                  unint64_t v338 = (char *)v336[254];
                                                  unint64_t v339 = v336[255];
                                                  if ((unint64_t)v338 >= v339)
                                                  {
                                                    uint64_t v341 = (char *)v336[253];
                                                    uint64_t v342 = (v338 - v341) >> 3;
                                                    if ((unint64_t)(v342 + 1) >> 61) {
                                                      goto LABEL_543;
                                                    }
                                                    unint64_t v343 = v339 - (void)v341;
                                                    unint64_t v344 = (uint64_t)(v339 - (void)v341) >> 2;
                                                    if (v344 <= v342 + 1) {
                                                      unint64_t v344 = v342 + 1;
                                                    }
                                                    if (v343 >= 0x7FFFFFFFFFFFFFF8) {
                                                      unint64_t v345 = 0x1FFFFFFFFFFFFFFFLL;
                                                    }
                                                    else {
                                                      unint64_t v345 = v344;
                                                    }
                                                    if (v345)
                                                    {
                                                      unsigned int v346 = (char *)sub_5714((uint64_t)(v336 + 255), v345);
                                                      unint64_t v338 = (char *)v336[254];
                                                      uint64_t v341 = (char *)v336[253];
                                                    }
                                                    else
                                                    {
                                                      unsigned int v346 = 0;
                                                    }
                                                    unint64_t v347 = &v346[8 * v342];
                                                    unint64_t v348 = &v346[8 * v345];
                                                    *(void *)unint64_t v347 = v337;
                                                    unint64_t v340 = v347 + 8;
                                                    while (v338 != v341)
                                                    {
                                                      uint64_t v349 = *((void *)v338 - 1);
                                                      v338 -= 8;
                                                      *((void *)v347 - 1) = v349;
                                                      v347 -= 8;
                                                    }
                                                    v336[253] = v347;
                                                    v336[254] = v340;
                                                    v336[255] = v348;
                                                    if (v341) {
                                                      operator delete(v341);
                                                    }
                                                  }
                                                  else
                                                  {
                                                    *(void *)unint64_t v338 = v337;
                                                    unint64_t v340 = v338 + 8;
                                                  }
                                                  v336[254] = v340;
                                                  if (!*(_DWORD *)(v3 + 48))
                                                  {
                                                    unint64_t v350 = *(void **)a1[1];
                                                    uint64_t v351 = *(_WORD *)(a1[2] + 82) & 0x7FFF;
                                                    unsigned int v352 = (char *)v350[257];
                                                    unint64_t v353 = v350[258];
                                                    if ((unint64_t)v352 >= v353)
                                                    {
                                                      int v355 = (char *)v350[256];
                                                      uint64_t v356 = (v352 - v355) >> 3;
                                                      if ((unint64_t)(v356 + 1) >> 61) {
                                                        goto LABEL_543;
                                                      }
                                                      unint64_t v357 = v353 - (void)v355;
                                                      unint64_t v358 = (uint64_t)(v353 - (void)v355) >> 2;
                                                      if (v358 <= v356 + 1) {
                                                        unint64_t v358 = v356 + 1;
                                                      }
                                                      if (v357 >= 0x7FFFFFFFFFFFFFF8) {
                                                        unint64_t v359 = 0x1FFFFFFFFFFFFFFFLL;
                                                      }
                                                      else {
                                                        unint64_t v359 = v358;
                                                      }
                                                      if (v359)
                                                      {
                                                        int v360 = (char *)sub_5714((uint64_t)(v350 + 258), v359);
                                                        unsigned int v352 = (char *)v350[257];
                                                        int v355 = (char *)v350[256];
                                                      }
                                                      else
                                                      {
                                                        int v360 = 0;
                                                      }
                                                      int v361 = &v360[8 * v356];
                                                      unint64_t v362 = &v360[8 * v359];
                                                      *(void *)int v361 = v351;
                                                      unint64_t v354 = v361 + 8;
                                                      while (v352 != v355)
                                                      {
                                                        uint64_t v363 = *((void *)v352 - 1);
                                                        v352 -= 8;
                                                        *((void *)v361 - 1) = v363;
                                                        v361 -= 8;
                                                      }
                                                      v350[256] = v361;
                                                      v350[257] = v354;
                                                      v350[258] = v362;
                                                      if (v355) {
                                                        operator delete(v355);
                                                      }
                                                    }
                                                    else
                                                    {
                                                      *(void *)unsigned int v352 = v351;
                                                      unint64_t v354 = v352 + 8;
                                                    }
                                                    v350[257] = v354;
                                                    if (!*(_DWORD *)(v3 + 48))
                                                    {
                                                      unint64_t v364 = *(void **)a1[1];
                                                      uint64_t v365 = *(_WORD *)(a1[2] + 74) & 0x7FFF;
                                                      unint64_t v366 = (char *)v364[260];
                                                      unint64_t v367 = v364[261];
                                                      if ((unint64_t)v366 >= v367)
                                                      {
                                                        unsigned int v369 = (char *)v364[259];
                                                        uint64_t v370 = (v366 - v369) >> 3;
                                                        if ((unint64_t)(v370 + 1) >> 61) {
                                                          goto LABEL_543;
                                                        }
                                                        unint64_t v371 = v367 - (void)v369;
                                                        unint64_t v372 = (uint64_t)(v367 - (void)v369) >> 2;
                                                        if (v372 <= v370 + 1) {
                                                          unint64_t v372 = v370 + 1;
                                                        }
                                                        if (v371 >= 0x7FFFFFFFFFFFFFF8) {
                                                          unint64_t v373 = 0x1FFFFFFFFFFFFFFFLL;
                                                        }
                                                        else {
                                                          unint64_t v373 = v372;
                                                        }
                                                        if (v373)
                                                        {
                                                          unint64_t v374 = (char *)sub_5714((uint64_t)(v364 + 261), v373);
                                                          unint64_t v366 = (char *)v364[260];
                                                          unsigned int v369 = (char *)v364[259];
                                                        }
                                                        else
                                                        {
                                                          unint64_t v374 = 0;
                                                        }
                                                        unint64_t v375 = &v374[8 * v370];
                                                        unint64_t v376 = &v374[8 * v373];
                                                        *(void *)unint64_t v375 = v365;
                                                        unint64_t v368 = v375 + 8;
                                                        while (v366 != v369)
                                                        {
                                                          uint64_t v377 = *((void *)v366 - 1);
                                                          v366 -= 8;
                                                          *((void *)v375 - 1) = v377;
                                                          v375 -= 8;
                                                        }
                                                        v364[259] = v375;
                                                        v364[260] = v368;
                                                        v364[261] = v376;
                                                        if (v369) {
                                                          operator delete(v369);
                                                        }
                                                      }
                                                      else
                                                      {
                                                        *(void *)unint64_t v366 = v365;
                                                        unint64_t v368 = v366 + 8;
                                                      }
                                                      v364[260] = v368;
                                                      if (!*(_DWORD *)(v3 + 48))
                                                      {
                                                        unint64_t v378 = *(void **)a1[1];
                                                        uint64_t v379 = *(_WORD *)(a1[2] + 84) & 0x7FFF;
                                                        unint64_t v380 = (char *)v378[263];
                                                        unint64_t v381 = v378[264];
                                                        if ((unint64_t)v380 >= v381)
                                                        {
                                                          unint64_t v383 = (char *)v378[262];
                                                          uint64_t v384 = (v380 - v383) >> 3;
                                                          if ((unint64_t)(v384 + 1) >> 61) {
                                                            goto LABEL_543;
                                                          }
                                                          unint64_t v385 = v381 - (void)v383;
                                                          unint64_t v386 = (uint64_t)(v381 - (void)v383) >> 2;
                                                          if (v386 <= v384 + 1) {
                                                            unint64_t v386 = v384 + 1;
                                                          }
                                                          if (v385 >= 0x7FFFFFFFFFFFFFF8) {
                                                            unint64_t v387 = 0x1FFFFFFFFFFFFFFFLL;
                                                          }
                                                          else {
                                                            unint64_t v387 = v386;
                                                          }
                                                          if (v387)
                                                          {
                                                            unint64_t v388 = (char *)sub_5714((uint64_t)(v378 + 264), v387);
                                                            unint64_t v380 = (char *)v378[263];
                                                            unint64_t v383 = (char *)v378[262];
                                                          }
                                                          else
                                                          {
                                                            unint64_t v388 = 0;
                                                          }
                                                          unsigned int v389 = &v388[8 * v384];
                                                          unint64_t v390 = &v388[8 * v387];
                                                          *(void *)unsigned int v389 = v379;
                                                          unint64_t v382 = v389 + 8;
                                                          while (v380 != v383)
                                                          {
                                                            uint64_t v391 = *((void *)v380 - 1);
                                                            v380 -= 8;
                                                            *((void *)v389 - 1) = v391;
                                                            v389 -= 8;
                                                          }
                                                          v378[262] = v389;
                                                          v378[263] = v382;
                                                          v378[264] = v390;
                                                          if (v383) {
                                                            operator delete(v383);
                                                          }
                                                        }
                                                        else
                                                        {
                                                          *(void *)unint64_t v380 = v379;
                                                          unint64_t v382 = v380 + 8;
                                                        }
                                                        v378[263] = v382;
                                                        if (!*(_DWORD *)(v3 + 48))
                                                        {
                                                          unint64_t v392 = *(void **)a1[1];
                                                          uint64_t v393 = *(_WORD *)(a1[2] + 76) & 0x7FFF;
                                                          unint64_t v394 = (char *)v392[266];
                                                          unint64_t v395 = v392[267];
                                                          if ((unint64_t)v394 >= v395)
                                                          {
                                                            unsigned int v397 = (char *)v392[265];
                                                            uint64_t v398 = (v394 - v397) >> 3;
                                                            if ((unint64_t)(v398 + 1) >> 61) {
                                                              goto LABEL_543;
                                                            }
                                                            unint64_t v399 = v395 - (void)v397;
                                                            unint64_t v400 = (uint64_t)(v395 - (void)v397) >> 2;
                                                            if (v400 <= v398 + 1) {
                                                              unint64_t v400 = v398 + 1;
                                                            }
                                                            if (v399 >= 0x7FFFFFFFFFFFFFF8) {
                                                              unint64_t v401 = 0x1FFFFFFFFFFFFFFFLL;
                                                            }
                                                            else {
                                                              unint64_t v401 = v400;
                                                            }
                                                            if (v401)
                                                            {
                                                              unint64_t v402 = (char *)sub_5714((uint64_t)(v392 + 267), v401);
                                                              unint64_t v394 = (char *)v392[266];
                                                              unsigned int v397 = (char *)v392[265];
                                                            }
                                                            else
                                                            {
                                                              unint64_t v402 = 0;
                                                            }
                                                            unint64_t v403 = &v402[8 * v398];
                                                            unint64_t v404 = &v402[8 * v401];
                                                            *(void *)unint64_t v403 = v393;
                                                            unint64_t v396 = v403 + 8;
                                                            while (v394 != v397)
                                                            {
                                                              uint64_t v405 = *((void *)v394 - 1);
                                                              v394 -= 8;
                                                              *((void *)v403 - 1) = v405;
                                                              v403 -= 8;
                                                            }
                                                            v392[265] = v403;
                                                            v392[266] = v396;
                                                            v392[267] = v404;
                                                            if (v397) {
                                                              operator delete(v397);
                                                            }
                                                          }
                                                          else
                                                          {
                                                            *(void *)unint64_t v394 = v393;
                                                            unint64_t v396 = v394 + 8;
                                                          }
                                                          v392[266] = v396;
                                                          if (!*(_DWORD *)(v3 + 48))
                                                          {
                                                            unint64_t v406 = *(void **)a1[1];
                                                            uint64_t v407 = *(_WORD *)(a1[2] + 86) & 0x7FFF;
                                                            unint64_t v408 = (char *)v406[269];
                                                            unint64_t v409 = v406[270];
                                                            if ((unint64_t)v408 >= v409)
                                                            {
                                                              unint64_t v411 = (char *)v406[268];
                                                              uint64_t v412 = (v408 - v411) >> 3;
                                                              if ((unint64_t)(v412 + 1) >> 61) {
                                                                goto LABEL_543;
                                                              }
                                                              unint64_t v413 = v409 - (void)v411;
                                                              unint64_t v414 = (uint64_t)(v409 - (void)v411) >> 2;
                                                              if (v414 <= v412 + 1) {
                                                                unint64_t v414 = v412 + 1;
                                                              }
                                                              if (v413 >= 0x7FFFFFFFFFFFFFF8) {
                                                                unint64_t v415 = 0x1FFFFFFFFFFFFFFFLL;
                                                              }
                                                              else {
                                                                unint64_t v415 = v414;
                                                              }
                                                              if (v415)
                                                              {
                                                                unint64_t v416 = (char *)sub_5714((uint64_t)(v406 + 270), v415);
                                                                unint64_t v408 = (char *)v406[269];
                                                                unint64_t v411 = (char *)v406[268];
                                                              }
                                                              else
                                                              {
                                                                unint64_t v416 = 0;
                                                              }
                                                              unsigned int v417 = &v416[8 * v412];
                                                              unint64_t v418 = &v416[8 * v415];
                                                              *(void *)unsigned int v417 = v407;
                                                              unint64_t v410 = v417 + 8;
                                                              while (v408 != v411)
                                                              {
                                                                uint64_t v419 = *((void *)v408 - 1);
                                                                v408 -= 8;
                                                                *((void *)v417 - 1) = v419;
                                                                v417 -= 8;
                                                              }
                                                              v406[268] = v417;
                                                              v406[269] = v410;
                                                              v406[270] = v418;
                                                              if (v411) {
                                                                operator delete(v411);
                                                              }
                                                            }
                                                            else
                                                            {
                                                              *(void *)unint64_t v408 = v407;
                                                              unint64_t v410 = v408 + 8;
                                                            }
                                                            v406[269] = v410;
                                                            if (!*(_DWORD *)(v3 + 48))
                                                            {
                                                              unint64_t v420 = *(void **)a1[1];
                                                              uint64_t v421 = *(_WORD *)(a1[2] + 78) & 0x7FFF;
                                                              unint64_t v422 = (char *)v420[272];
                                                              unint64_t v423 = v420[273];
                                                              if ((unint64_t)v422 >= v423)
                                                              {
                                                                unsigned int v425 = (char *)v420[271];
                                                                uint64_t v426 = (v422 - v425) >> 3;
                                                                if ((unint64_t)(v426 + 1) >> 61) {
                                                                  goto LABEL_543;
                                                                }
                                                                unint64_t v427 = v423 - (void)v425;
                                                                unint64_t v428 = (uint64_t)(v423 - (void)v425) >> 2;
                                                                if (v428 <= v426 + 1) {
                                                                  unint64_t v428 = v426 + 1;
                                                                }
                                                                if (v427 >= 0x7FFFFFFFFFFFFFF8) {
                                                                  unint64_t v429 = 0x1FFFFFFFFFFFFFFFLL;
                                                                }
                                                                else {
                                                                  unint64_t v429 = v428;
                                                                }
                                                                if (v429)
                                                                {
                                                                  unint64_t v430 = (char *)sub_5714((uint64_t)(v420 + 273), v429);
                                                                  unint64_t v422 = (char *)v420[272];
                                                                  unsigned int v425 = (char *)v420[271];
                                                                }
                                                                else
                                                                {
                                                                  unint64_t v430 = 0;
                                                                }
                                                                unint64_t v431 = &v430[8 * v426];
                                                                unint64_t v432 = &v430[8 * v429];
                                                                *(void *)unint64_t v431 = v421;
                                                                unint64_t v424 = v431 + 8;
                                                                while (v422 != v425)
                                                                {
                                                                  uint64_t v433 = *((void *)v422 - 1);
                                                                  v422 -= 8;
                                                                  *((void *)v431 - 1) = v433;
                                                                  v431 -= 8;
                                                                }
                                                                v420[271] = v431;
                                                                v420[272] = v424;
                                                                v420[273] = v432;
                                                                if (v425) {
                                                                  operator delete(v425);
                                                                }
                                                              }
                                                              else
                                                              {
                                                                *(void *)unint64_t v422 = v421;
                                                                unint64_t v424 = v422 + 8;
                                                              }
                                                              v420[272] = v424;
                                                              if (!*(_DWORD *)(v3 + 48))
                                                              {
                                                                unint64_t v434 = *(void **)a1[1];
                                                                uint64_t v435 = *(_WORD *)(a1[2] + 88) & 0x7FFF;
                                                                unint64_t v436 = (char *)v434[275];
                                                                unint64_t v437 = v434[276];
                                                                if ((unint64_t)v436 >= v437)
                                                                {
                                                                  unint64_t v439 = (char *)v434[274];
                                                                  uint64_t v440 = (v436 - v439) >> 3;
                                                                  if ((unint64_t)(v440 + 1) >> 61) {
                                                                    goto LABEL_543;
                                                                  }
                                                                  unint64_t v441 = v437 - (void)v439;
                                                                  unint64_t v442 = (uint64_t)(v437 - (void)v439) >> 2;
                                                                  if (v442 <= v440 + 1) {
                                                                    unint64_t v442 = v440 + 1;
                                                                  }
                                                                  if (v441 >= 0x7FFFFFFFFFFFFFF8) {
                                                                    unint64_t v443 = 0x1FFFFFFFFFFFFFFFLL;
                                                                  }
                                                                  else {
                                                                    unint64_t v443 = v442;
                                                                  }
                                                                  if (v443)
                                                                  {
                                                                    unint64_t v444 = (char *)sub_5714((uint64_t)(v434 + 276), v443);
                                                                    unint64_t v436 = (char *)v434[275];
                                                                    unint64_t v439 = (char *)v434[274];
                                                                  }
                                                                  else
                                                                  {
                                                                    unint64_t v444 = 0;
                                                                  }
                                                                  unsigned int v445 = &v444[8 * v440];
                                                                  unint64_t v446 = &v444[8 * v443];
                                                                  *(void *)unsigned int v445 = v435;
                                                                  unint64_t v438 = v445 + 8;
                                                                  while (v436 != v439)
                                                                  {
                                                                    uint64_t v447 = *((void *)v436 - 1);
                                                                    v436 -= 8;
                                                                    *((void *)v445 - 1) = v447;
                                                                    v445 -= 8;
                                                                  }
                                                                  v434[274] = v445;
                                                                  v434[275] = v438;
                                                                  v434[276] = v446;
                                                                  if (v439) {
                                                                    operator delete(v439);
                                                                  }
                                                                }
                                                                else
                                                                {
                                                                  *(void *)unint64_t v436 = v435;
                                                                  unint64_t v438 = v436 + 8;
                                                                }
                                                                v434[275] = v438;
                                                                if (!*(_DWORD *)(v3 + 48))
                                                                {
                                                                  uint64_t v448 = a1[2];
                                                                  unsigned int v449 = *(void **)a1[1];
                                                                  uint64_t v450 = *(_WORD *)(v448 + 80) & 0x7FFF;
                                                                  unint64_t v451 = (char *)v449[278];
                                                                  unint64_t v452 = v449[279];
                                                                  if ((unint64_t)v451 < v452)
                                                                  {
                                                                    *(void *)unint64_t v451 = v450;
                                                                    unsigned int v453 = v451 + 8;
LABEL_550:
                                                                    v449[278] = v453;
                                                                    goto LABEL_551;
                                                                  }
                                                                  unint64_t v454 = (char *)v449[277];
                                                                  uint64_t v455 = (v451 - v454) >> 3;
                                                                  if (!((unint64_t)(v455 + 1) >> 61))
                                                                  {
                                                                    unint64_t v456 = v452 - (void)v454;
                                                                    unint64_t v457 = (uint64_t)(v452 - (void)v454) >> 2;
                                                                    if (v457 <= v455 + 1) {
                                                                      unint64_t v457 = v455 + 1;
                                                                    }
                                                                    if (v456 >= 0x7FFFFFFFFFFFFFF8) {
                                                                      unint64_t v458 = 0x1FFFFFFFFFFFFFFFLL;
                                                                    }
                                                                    else {
                                                                      unint64_t v458 = v457;
                                                                    }
                                                                    if (v458)
                                                                    {
                                                                      unint64_t v459 = (char *)sub_5714((uint64_t)(v449 + 279), v458);
                                                                      unint64_t v451 = (char *)v449[278];
                                                                      unint64_t v454 = (char *)v449[277];
                                                                    }
                                                                    else
                                                                    {
                                                                      unint64_t v459 = 0;
                                                                    }
                                                                    unint64_t v460 = &v459[8 * v455];
                                                                    unsigned int v461 = &v459[8 * v458];
                                                                    *(void *)unint64_t v460 = v450;
                                                                    unsigned int v453 = v460 + 8;
                                                                    while (v451 != v454)
                                                                    {
                                                                      uint64_t v462 = *((void *)v451 - 1);
                                                                      v451 -= 8;
                                                                      *((void *)v460 - 1) = v462;
                                                                      v460 -= 8;
                                                                    }
                                                                    v449[277] = v460;
                                                                    v449[278] = v453;
                                                                    v449[279] = v461;
                                                                    if (v454) {
                                                                      operator delete(v454);
                                                                    }
                                                                    goto LABEL_550;
                                                                  }
LABEL_543:
                                                                  sub_566C();
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_551:
    *a2 = 1;
    return;
  }
  if (!*(_DWORD *)(v3 + 48))
  {
    long long v11 = (void *)a1[1];
    uint64_t v10 = (_WORD *)a1[2];
    uint64_t v12 = (void *)*v11;
    *(void *)(v12[185] - 8) += v10[17] & 0x7FFF;
    *(void *)(v12[188] - 8) += v10[13] & 0x7FFF;
    *(void *)(v12[191] - 8) += v10[18] & 0x7FFF;
    *(void *)(v12[194] - 8) += v10[14] & 0x7FFF;
    *(void *)(v12[197] - 8) += v10[19] & 0x7FFF;
    *(void *)(v12[200] - 8) += v10[15] & 0x7FFF;
    *(void *)(v12[203] - 8) += v10[20] & 0x7FFF;
    *(void *)(v12[206] - 8) += v10[16] & 0x7FFF;
    *(void *)(v12[209] - 8) += v10[25] & 0x7FFF;
    *(void *)(v12[212] - 8) += v10[21] & 0x7FFF;
    uint64_t v13 = (_WORD *)a1[2];
    unint64_t v14 = *(void **)a1[1];
    *(void *)(v14[215] - 8) += v13[26] & 0x7FFF;
    *(void *)(v14[218] - 8) += v13[22] & 0x7FFF;
    *(void *)(v14[221] - 8) += v13[27] & 0x7FFF;
    *(void *)(v14[224] - 8) += v13[23] & 0x7FFF;
    *(void *)(v14[227] - 8) += v13[28] & 0x7FFF;
    *(void *)(v14[230] - 8) += v13[24] & 0x7FFF;
    *(void *)(v14[233] - 8) += v13[33] & 0x7FFF;
    *(void *)(v14[236] - 8) += v13[29] & 0x7FFF;
    *(void *)(v14[239] - 8) += v13[34] & 0x7FFF;
    *(void *)(v14[242] - 8) += v13[30] & 0x7FFF;
    unint64_t v15 = (_WORD *)a1[2];
    unint64_t v16 = *(void **)a1[1];
    *(void *)(v16[245] - 8) += v15[35] & 0x7FFF;
    *(void *)(v16[248] - 8) += v15[31] & 0x7FFF;
    *(void *)(v16[251] - 8) += v15[36] & 0x7FFF;
    *(void *)(v16[254] - 8) += v15[32] & 0x7FFF;
    *(void *)(v16[257] - 8) += v15[41] & 0x7FFF;
    *(void *)(v16[260] - 8) += v15[37] & 0x7FFF;
    *(void *)(v16[263] - 8) += v15[42] & 0x7FFF;
    *(void *)(v16[266] - 8) += v15[38] & 0x7FFF;
    *(void *)(v16[269] - 8) += v15[43] & 0x7FFF;
    *(void *)(v16[272] - 8) += v15[39] & 0x7FFF;
    uint64_t v17 = a1[2];
    uint64_t v18 = (void *)*v11;
    *(void *)(v18[275] - 8) += *(_WORD *)(v17 + 88) & 0x7FFF;
    *(void *)(v18[278] - 8) += *(_WORD *)(v17 + 80) & 0x7FFF;
  }
}

void sub_7E144(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    if (*(_DWORD *)(v3 + 48)) {
      goto LABEL_227;
    }
    uint64_t v5 = *(void **)a1[1];
    uint64_t v6 = *(_WORD *)(a1[2] + 48) & 0x7FFF;
    char v7 = (char *)v5[131];
    unint64_t v8 = v5[132];
    if ((unint64_t)v7 >= v8)
    {
      unint64_t v15 = (char *)v5[130];
      uint64_t v16 = (v7 - v15) >> 3;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_229;
      }
      unint64_t v17 = v8 - (void)v15;
      unint64_t v18 = (uint64_t)(v8 - (void)v15) >> 2;
      if (v18 <= v16 + 1) {
        unint64_t v18 = v16 + 1;
      }
      if (v17 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v18;
      }
      if (v19)
      {
        uint64_t v20 = (char *)sub_5714((uint64_t)(v5 + 132), v19);
        char v7 = (char *)v5[131];
        unint64_t v15 = (char *)v5[130];
      }
      else
      {
        uint64_t v20 = 0;
      }
      unint64_t v21 = &v20[8 * v16];
      unint64_t v22 = &v20[8 * v19];
      *(void *)unint64_t v21 = v6;
      uint64_t v9 = v21 + 8;
      while (v7 != v15)
      {
        uint64_t v23 = *((void *)v7 - 1);
        v7 -= 8;
        *((void *)v21 - 1) = v23;
        v21 -= 8;
      }
      v5[130] = v21;
      v5[131] = v9;
      v5[132] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)char v7 = v6;
      uint64_t v9 = v7 + 8;
    }
    v5[131] = v9;
    if (!*(_DWORD *)(v3 + 48))
    {
      unint64_t v24 = *(void **)a1[1];
      uint64_t v25 = *(_WORD *)(a1[2] + 36) & 0x7FFF;
      uint8x8_t v26 = (char *)v24[134];
      unint64_t v27 = v24[135];
      if ((unint64_t)v26 >= v27)
      {
        uint64_t v29 = (char *)v24[133];
        uint64_t v30 = (v26 - v29) >> 3;
        if ((unint64_t)(v30 + 1) >> 61) {
          goto LABEL_229;
        }
        unint64_t v31 = v27 - (void)v29;
        unint64_t v32 = (uint64_t)(v27 - (void)v29) >> 2;
        if (v32 <= v30 + 1) {
          unint64_t v32 = v30 + 1;
        }
        if (v31 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v33 = v32;
        }
        if (v33)
        {
          uint64_t v34 = (char *)sub_5714((uint64_t)(v24 + 135), v33);
          uint8x8_t v26 = (char *)v24[134];
          uint64_t v29 = (char *)v24[133];
        }
        else
        {
          uint64_t v34 = 0;
        }
        unint64_t v35 = &v34[8 * v30];
        unint64_t v36 = &v34[8 * v33];
        *(void *)unint64_t v35 = v25;
        unint64_t v28 = v35 + 8;
        while (v26 != v29)
        {
          uint64_t v37 = *((void *)v26 - 1);
          v26 -= 8;
          *((void *)v35 - 1) = v37;
          v35 -= 8;
        }
        v24[133] = v35;
        v24[134] = v28;
        v24[135] = v36;
        if (v29) {
          operator delete(v29);
        }
      }
      else
      {
        *(void *)uint8x8_t v26 = v25;
        unint64_t v28 = v26 + 8;
      }
      v24[134] = v28;
      if (!*(_DWORD *)(v3 + 48))
      {
        uint64_t v38 = a1[1];
        uint64_t v39 = *(void **)v38;
        uint64_t v40 = *(unsigned __int16 *)(a1[2] + 44);
        uint64_t v41 = *(char **)(*(void *)v38 + 1096);
        unint64_t v42 = *(void *)(*(void *)v38 + 1104);
        if ((unint64_t)v41 >= v42)
        {
          unint64_t v44 = (char *)v39[136];
          uint64_t v45 = (v41 - v44) >> 3;
          if ((unint64_t)(v45 + 1) >> 61) {
            goto LABEL_229;
          }
          unint64_t v46 = v42 - (void)v44;
          unint64_t v47 = (uint64_t)(v42 - (void)v44) >> 2;
          if (v47 <= v45 + 1) {
            unint64_t v47 = v45 + 1;
          }
          if (v46 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v48 = v47;
          }
          if (v48)
          {
            unint64_t v49 = (char *)sub_5714((uint64_t)(v39 + 138), v48);
            uint64_t v41 = (char *)v39[137];
            unint64_t v44 = (char *)v39[136];
          }
          else
          {
            unint64_t v49 = 0;
          }
          unint64_t v50 = &v49[8 * v45];
          unint64_t v51 = &v49[8 * v48];
          *(void *)unint64_t v50 = v40;
          uint64_t v43 = v50 + 8;
          while (v41 != v44)
          {
            uint64_t v52 = *((void *)v41 - 1);
            v41 -= 8;
            *((void *)v50 - 1) = v52;
            v50 -= 8;
          }
          v39[136] = v50;
          v39[137] = v43;
          v39[138] = v51;
          if (v44) {
            operator delete(v44);
          }
        }
        else
        {
          *(void *)uint64_t v41 = v40;
          uint64_t v43 = v41 + 8;
        }
        v39[137] = v43;
        if (!*(_DWORD *)(v3 + 48))
        {
          uint64_t v53 = a1[1];
          unint64_t v54 = *(void **)v53;
          uint64_t v55 = *(unsigned __int16 *)(a1[2] + 32);
          uint64_t v56 = *(char **)(*(void *)v53 + 1120);
          unint64_t v57 = *(void *)(*(void *)v53 + 1128);
          if ((unint64_t)v56 >= v57)
          {
            unint64_t v59 = (char *)v54[139];
            uint64_t v60 = (v56 - v59) >> 3;
            if ((unint64_t)(v60 + 1) >> 61) {
              goto LABEL_229;
            }
            unint64_t v61 = v57 - (void)v59;
            unint64_t v62 = (uint64_t)(v57 - (void)v59) >> 2;
            if (v62 <= v60 + 1) {
              unint64_t v62 = v60 + 1;
            }
            if (v61 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v63 = v62;
            }
            if (v63)
            {
              unint64_t v64 = (char *)sub_5714((uint64_t)(v54 + 141), v63);
              uint64_t v56 = (char *)v54[140];
              unint64_t v59 = (char *)v54[139];
            }
            else
            {
              unint64_t v64 = 0;
            }
            unint64_t v65 = &v64[8 * v60];
            uint64_t v66 = &v64[8 * v63];
            *(void *)unint64_t v65 = v55;
            unint64_t v58 = v65 + 8;
            while (v56 != v59)
            {
              uint64_t v67 = *((void *)v56 - 1);
              v56 -= 8;
              *((void *)v65 - 1) = v67;
              v65 -= 8;
            }
            v54[139] = v65;
            v54[140] = v58;
            v54[141] = v66;
            if (v59) {
              operator delete(v59);
            }
          }
          else
          {
            *(void *)uint64_t v56 = v55;
            unint64_t v58 = v56 + 8;
          }
          v54[140] = v58;
          if (!*(_DWORD *)(v3 + 48))
          {
            uint64_t v68 = a1[1];
            uint64_t v69 = *(void **)v68;
            uint64_t v70 = *(unsigned __int16 *)(a1[2] + 38);
            uint64_t v71 = *(char **)(*(void *)v68 + 1144);
            unint64_t v72 = *(void *)(*(void *)v68 + 1152);
            if ((unint64_t)v71 >= v72)
            {
              unint64_t v74 = (char *)v69[142];
              uint64_t v75 = (v71 - v74) >> 3;
              if ((unint64_t)(v75 + 1) >> 61) {
                goto LABEL_229;
              }
              unint64_t v76 = v72 - (void)v74;
              unint64_t v77 = (uint64_t)(v72 - (void)v74) >> 2;
              if (v77 <= v75 + 1) {
                unint64_t v77 = v75 + 1;
              }
              if (v76 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v78 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v78 = v77;
              }
              if (v78)
              {
                unint64_t v79 = (char *)sub_5714((uint64_t)(v69 + 144), v78);
                uint64_t v71 = (char *)v69[143];
                unint64_t v74 = (char *)v69[142];
              }
              else
              {
                unint64_t v79 = 0;
              }
              uint64_t v80 = &v79[8 * v75];
              uint64_t v81 = &v79[8 * v78];
              *(void *)uint64_t v80 = v70;
              unint64_t v73 = v80 + 8;
              while (v71 != v74)
              {
                uint64_t v82 = *((void *)v71 - 1);
                v71 -= 8;
                *((void *)v80 - 1) = v82;
                v80 -= 8;
              }
              v69[142] = v80;
              v69[143] = v73;
              v69[144] = v81;
              if (v74) {
                operator delete(v74);
              }
            }
            else
            {
              *(void *)uint64_t v71 = v70;
              unint64_t v73 = v71 + 8;
            }
            v69[143] = v73;
            if (!*(_DWORD *)(v3 + 48))
            {
              uint64_t v83 = a1[1];
              int v84 = *(void **)v83;
              uint64_t v85 = *(unsigned __int16 *)(a1[2] + 26);
              unint64_t v86 = *(char **)(*(void *)v83 + 1168);
              unint64_t v87 = *(void *)(*(void *)v83 + 1176);
              if ((unint64_t)v86 >= v87)
              {
                unint64_t v89 = (char *)v84[145];
                uint64_t v90 = (v86 - v89) >> 3;
                if ((unint64_t)(v90 + 1) >> 61) {
                  goto LABEL_229;
                }
                unint64_t v91 = v87 - (void)v89;
                unint64_t v92 = (uint64_t)(v87 - (void)v89) >> 2;
                if (v92 <= v90 + 1) {
                  unint64_t v92 = v90 + 1;
                }
                if (v91 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v93 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v93 = v92;
                }
                if (v93)
                {
                  uint64_t v94 = (char *)sub_5714((uint64_t)(v84 + 147), v93);
                  unint64_t v86 = (char *)v84[146];
                  unint64_t v89 = (char *)v84[145];
                }
                else
                {
                  uint64_t v94 = 0;
                }
                uint64_t v95 = &v94[8 * v90];
                unint64_t v96 = &v94[8 * v93];
                *(void *)uint64_t v95 = v85;
                unint64_t v88 = v95 + 8;
                while (v86 != v89)
                {
                  uint64_t v97 = *((void *)v86 - 1);
                  v86 -= 8;
                  *((void *)v95 - 1) = v97;
                  v95 -= 8;
                }
                v84[145] = v95;
                v84[146] = v88;
                v84[147] = v96;
                if (v89) {
                  operator delete(v89);
                }
              }
              else
              {
                *(void *)unint64_t v86 = v85;
                unint64_t v88 = v86 + 8;
              }
              v84[146] = v88;
              if (!*(_DWORD *)(v3 + 48))
              {
                uint64_t v98 = a1[1];
                uint64_t v99 = *(void **)v98;
                uint64_t v100 = *(unsigned __int16 *)(a1[2] + 40);
                unint64_t v101 = *(char **)(*(void *)v98 + 1192);
                unint64_t v102 = *(void *)(*(void *)v98 + 1200);
                if ((unint64_t)v101 >= v102)
                {
                  uint64_t v104 = (char *)v99[148];
                  uint64_t v105 = (v101 - v104) >> 3;
                  if ((unint64_t)(v105 + 1) >> 61) {
                    goto LABEL_229;
                  }
                  unint64_t v106 = v102 - (void)v104;
                  unint64_t v107 = (uint64_t)(v102 - (void)v104) >> 2;
                  if (v107 <= v105 + 1) {
                    unint64_t v107 = v105 + 1;
                  }
                  if (v106 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v108 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v108 = v107;
                  }
                  if (v108)
                  {
                    uint64_t v109 = (char *)sub_5714((uint64_t)(v99 + 150), v108);
                    unint64_t v101 = (char *)v99[149];
                    uint64_t v104 = (char *)v99[148];
                  }
                  else
                  {
                    uint64_t v109 = 0;
                  }
                  unint64_t v110 = &v109[8 * v105];
                  uint64_t v111 = &v109[8 * v108];
                  *(void *)unint64_t v110 = v100;
                  unint64_t v103 = v110 + 8;
                  while (v101 != v104)
                  {
                    uint64_t v112 = *((void *)v101 - 1);
                    v101 -= 8;
                    *((void *)v110 - 1) = v112;
                    v110 -= 8;
                  }
                  v99[148] = v110;
                  v99[149] = v103;
                  v99[150] = v111;
                  if (v104) {
                    operator delete(v104);
                  }
                }
                else
                {
                  *(void *)unint64_t v101 = v100;
                  unint64_t v103 = v101 + 8;
                }
                v99[149] = v103;
                if (!*(_DWORD *)(v3 + 48))
                {
                  uint64_t v113 = a1[1];
                  unint64_t v114 = *(void **)v113;
                  uint64_t v115 = *(unsigned __int16 *)(a1[2] + 28);
                  unint64_t v116 = *(char **)(*(void *)v113 + 1216);
                  unint64_t v117 = *(void *)(*(void *)v113 + 1224);
                  if ((unint64_t)v116 >= v117)
                  {
                    unint64_t v119 = (char *)v114[151];
                    uint64_t v120 = (v116 - v119) >> 3;
                    if ((unint64_t)(v120 + 1) >> 61) {
                      goto LABEL_229;
                    }
                    unint64_t v121 = v117 - (void)v119;
                    unint64_t v122 = (uint64_t)(v117 - (void)v119) >> 2;
                    if (v122 <= v120 + 1) {
                      unint64_t v122 = v120 + 1;
                    }
                    if (v121 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v123 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v123 = v122;
                    }
                    if (v123)
                    {
                      unint64_t v124 = (char *)sub_5714((uint64_t)(v114 + 153), v123);
                      unint64_t v116 = (char *)v114[152];
                      unint64_t v119 = (char *)v114[151];
                    }
                    else
                    {
                      unint64_t v124 = 0;
                    }
                    uint64_t v125 = &v124[8 * v120];
                    unint64_t v126 = &v124[8 * v123];
                    *(void *)uint64_t v125 = v115;
                    uint64_t v118 = v125 + 8;
                    while (v116 != v119)
                    {
                      uint64_t v127 = *((void *)v116 - 1);
                      v116 -= 8;
                      *((void *)v125 - 1) = v127;
                      v125 -= 8;
                    }
                    v114[151] = v125;
                    v114[152] = v118;
                    v114[153] = v126;
                    if (v119) {
                      operator delete(v119);
                    }
                  }
                  else
                  {
                    *(void *)unint64_t v116 = v115;
                    uint64_t v118 = v116 + 8;
                  }
                  v114[152] = v118;
                  if (!*(_DWORD *)(v3 + 48))
                  {
                    uint64_t v128 = a1[1];
                    unint64_t v129 = *(void **)v128;
                    uint64_t v130 = *(unsigned __int16 *)(a1[2] + 46);
                    unint64_t v131 = *(char **)(*(void *)v128 + 1240);
                    unint64_t v132 = *(void *)(*(void *)v128 + 1248);
                    if ((unint64_t)v131 >= v132)
                    {
                      unint64_t v134 = (char *)v129[154];
                      uint64_t v135 = (v131 - v134) >> 3;
                      if ((unint64_t)(v135 + 1) >> 61) {
                        goto LABEL_229;
                      }
                      unint64_t v136 = v132 - (void)v134;
                      unint64_t v137 = (uint64_t)(v132 - (void)v134) >> 2;
                      if (v137 <= v135 + 1) {
                        unint64_t v137 = v135 + 1;
                      }
                      if (v136 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v138 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v138 = v137;
                      }
                      if (v138)
                      {
                        uint64_t v139 = (char *)sub_5714((uint64_t)(v129 + 156), v138);
                        unint64_t v131 = (char *)v129[155];
                        unint64_t v134 = (char *)v129[154];
                      }
                      else
                      {
                        uint64_t v139 = 0;
                      }
                      uint64_t v140 = &v139[8 * v135];
                      uint64_t v141 = &v139[8 * v138];
                      *(void *)uint64_t v140 = v130;
                      unint64_t v133 = v140 + 8;
                      while (v131 != v134)
                      {
                        uint64_t v142 = *((void *)v131 - 1);
                        v131 -= 8;
                        *((void *)v140 - 1) = v142;
                        v140 -= 8;
                      }
                      v129[154] = v140;
                      v129[155] = v133;
                      v129[156] = v141;
                      if (v134) {
                        operator delete(v134);
                      }
                    }
                    else
                    {
                      *(void *)unint64_t v131 = v130;
                      unint64_t v133 = v131 + 8;
                    }
                    v129[155] = v133;
                    if (!*(_DWORD *)(v3 + 48))
                    {
                      uint64_t v143 = a1[1];
                      unint64_t v144 = *(void **)v143;
                      uint64_t v145 = *(unsigned __int16 *)(a1[2] + 34);
                      uint64_t v146 = *(char **)(*(void *)v143 + 1264);
                      unint64_t v147 = *(void *)(*(void *)v143 + 1272);
                      if ((unint64_t)v146 >= v147)
                      {
                        unint64_t v149 = (char *)v144[157];
                        uint64_t v150 = (v146 - v149) >> 3;
                        if ((unint64_t)(v150 + 1) >> 61) {
                          goto LABEL_229;
                        }
                        unint64_t v151 = v147 - (void)v149;
                        unint64_t v152 = (uint64_t)(v147 - (void)v149) >> 2;
                        if (v152 <= v150 + 1) {
                          unint64_t v152 = v150 + 1;
                        }
                        if (v151 >= 0x7FFFFFFFFFFFFFF8) {
                          unint64_t v153 = 0x1FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v153 = v152;
                        }
                        if (v153)
                        {
                          char v154 = (char *)sub_5714((uint64_t)(v144 + 159), v153);
                          uint64_t v146 = (char *)v144[158];
                          unint64_t v149 = (char *)v144[157];
                        }
                        else
                        {
                          char v154 = 0;
                        }
                        uint64_t v155 = &v154[8 * v150];
                        unint64_t v156 = &v154[8 * v153];
                        *(void *)uint64_t v155 = v145;
                        unint64_t v148 = v155 + 8;
                        while (v146 != v149)
                        {
                          uint64_t v157 = *((void *)v146 - 1);
                          v146 -= 8;
                          *((void *)v155 - 1) = v157;
                          v155 -= 8;
                        }
                        v144[157] = v155;
                        v144[158] = v148;
                        v144[159] = v156;
                        if (v149) {
                          operator delete(v149);
                        }
                      }
                      else
                      {
                        *(void *)uint64_t v146 = v145;
                        unint64_t v148 = v146 + 8;
                      }
                      v144[158] = v148;
                      if (!*(_DWORD *)(v3 + 48))
                      {
                        uint64_t v158 = a1[1];
                        unint64_t v159 = *(void **)v158;
                        uint64_t v160 = *(unsigned __int16 *)(a1[2] + 42);
                        unint64_t v161 = *(char **)(*(void *)v158 + 1288);
                        unint64_t v162 = *(void *)(*(void *)v158 + 1296);
                        if ((unint64_t)v161 >= v162)
                        {
                          unint64_t v164 = (char *)v159[160];
                          uint64_t v165 = (v161 - v164) >> 3;
                          if ((unint64_t)(v165 + 1) >> 61) {
                            goto LABEL_229;
                          }
                          unint64_t v166 = v162 - (void)v164;
                          unint64_t v167 = (uint64_t)(v162 - (void)v164) >> 2;
                          if (v167 <= v165 + 1) {
                            unint64_t v167 = v165 + 1;
                          }
                          if (v166 >= 0x7FFFFFFFFFFFFFF8) {
                            unint64_t v168 = 0x1FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v168 = v167;
                          }
                          if (v168)
                          {
                            uint64_t v169 = (char *)sub_5714((uint64_t)(v159 + 162), v168);
                            unint64_t v161 = (char *)v159[161];
                            unint64_t v164 = (char *)v159[160];
                          }
                          else
                          {
                            uint64_t v169 = 0;
                          }
                          int v170 = &v169[8 * v165];
                          unint64_t v171 = &v169[8 * v168];
                          *(void *)int v170 = v160;
                          unint64_t v163 = v170 + 8;
                          while (v161 != v164)
                          {
                            uint64_t v172 = *((void *)v161 - 1);
                            v161 -= 8;
                            *((void *)v170 - 1) = v172;
                            v170 -= 8;
                          }
                          v159[160] = v170;
                          v159[161] = v163;
                          v159[162] = v171;
                          if (v164) {
                            operator delete(v164);
                          }
                        }
                        else
                        {
                          *(void *)unint64_t v161 = v160;
                          unint64_t v163 = v161 + 8;
                        }
                        v159[161] = v163;
                        if (!*(_DWORD *)(v3 + 48))
                        {
                          uint64_t v173 = a1[1];
                          uint64_t v174 = *(void **)v173;
                          uint64_t v175 = *(unsigned __int16 *)(a1[2] + 30);
                          unint64_t v176 = *(char **)(*(void *)v173 + 1312);
                          unint64_t v177 = *(void *)(*(void *)v173 + 1320);
                          if ((unint64_t)v176 >= v177)
                          {
                            uint64_t v179 = (char *)v174[163];
                            uint64_t v180 = (v176 - v179) >> 3;
                            if ((unint64_t)(v180 + 1) >> 61) {
                              goto LABEL_229;
                            }
                            unint64_t v181 = v177 - (void)v179;
                            unint64_t v182 = (uint64_t)(v177 - (void)v179) >> 2;
                            if (v182 <= v180 + 1) {
                              unint64_t v182 = v180 + 1;
                            }
                            if (v181 >= 0x7FFFFFFFFFFFFFF8) {
                              unint64_t v183 = 0x1FFFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v183 = v182;
                            }
                            if (v183)
                            {
                              unint64_t v184 = (char *)sub_5714((uint64_t)(v174 + 165), v183);
                              unint64_t v176 = (char *)v174[164];
                              uint64_t v179 = (char *)v174[163];
                            }
                            else
                            {
                              unint64_t v184 = 0;
                            }
                            unint64_t v185 = &v184[8 * v180];
                            uint64_t v186 = &v184[8 * v183];
                            *(void *)unint64_t v185 = v175;
                            unsigned int v178 = v185 + 8;
                            while (v176 != v179)
                            {
                              uint64_t v187 = *((void *)v176 - 1);
                              v176 -= 8;
                              *((void *)v185 - 1) = v187;
                              v185 -= 8;
                            }
                            v174[163] = v185;
                            v174[164] = v178;
                            v174[165] = v186;
                            if (v179) {
                              operator delete(v179);
                            }
                          }
                          else
                          {
                            *(void *)unint64_t v176 = v175;
                            unsigned int v178 = v176 + 8;
                          }
                          v174[164] = v178;
                          if (!*(_DWORD *)(v3 + 48))
                          {
                            uint64_t v188 = a1[2];
                            unint64_t v189 = *(void **)a1[1];
                            uint64_t v190 = *(_WORD *)(v188 + 50) & 0x7FFF;
                            unint64_t v191 = (char *)v189[167];
                            unint64_t v192 = v189[168];
                            if ((unint64_t)v191 < v192)
                            {
                              *(void *)unint64_t v191 = v190;
                              uint64_t v193 = v191 + 8;
LABEL_226:
                              v189[167] = v193;
                              goto LABEL_227;
                            }
                            unsigned __int16 v194 = (char *)v189[166];
                            uint64_t v195 = (v191 - v194) >> 3;
                            if (!((unint64_t)(v195 + 1) >> 61))
                            {
                              unint64_t v196 = v192 - (void)v194;
                              unint64_t v197 = (uint64_t)(v192 - (void)v194) >> 2;
                              if (v197 <= v195 + 1) {
                                unint64_t v197 = v195 + 1;
                              }
                              if (v196 >= 0x7FFFFFFFFFFFFFF8) {
                                unint64_t v198 = 0x1FFFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v198 = v197;
                              }
                              if (v198)
                              {
                                unint64_t v199 = (char *)sub_5714((uint64_t)(v189 + 168), v198);
                                unint64_t v191 = (char *)v189[167];
                                unsigned __int16 v194 = (char *)v189[166];
                              }
                              else
                              {
                                unint64_t v199 = 0;
                              }
                              uint64_t v200 = &v199[8 * v195];
                              unint64_t v201 = &v199[8 * v198];
                              *(void *)uint64_t v200 = v190;
                              uint64_t v193 = v200 + 8;
                              while (v191 != v194)
                              {
                                uint64_t v202 = *((void *)v191 - 1);
                                v191 -= 8;
                                *((void *)v200 - 1) = v202;
                                v200 -= 8;
                              }
                              v189[166] = v200;
                              v189[167] = v193;
                              v189[168] = v201;
                              if (v194) {
                                operator delete(v194);
                              }
                              goto LABEL_226;
                            }
LABEL_229:
                            sub_566C();
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_227:
    *a2 = 1;
    return;
  }
  if (!*(_DWORD *)(v3 + 48))
  {
    long long v11 = (void *)a1[1];
    uint64_t v10 = (unsigned __int16 *)a1[2];
    uint64_t v12 = (void *)*v11;
    *(void *)(v12[131] - 8) += v10[24] & 0x7FFF;
    *(void *)(v12[134] - 8) += v10[18] & 0x7FFF;
    *(void *)(v12[137] - 8) += v10[22];
    *(void *)(v12[140] - 8) += v10[16];
    *(void *)(v12[143] - 8) += v10[19];
    *(void *)(v12[146] - 8) += v10[13];
    *(void *)(v12[149] - 8) += v10[20];
    *(void *)(v12[152] - 8) += v10[14];
    *(void *)(v12[155] - 8) += v10[23];
    *(void *)(v12[158] - 8) += v10[17];
    uint64_t v13 = (unsigned __int16 *)a1[2];
    unint64_t v14 = (void *)*v11;
    *(void *)(v14[161] - 8) += v13[21];
    *(void *)(v14[164] - 8) += v13[15];
    *(void *)(v14[167] - 8) += v13[25] & 0x7FFF;
  }
}

void sub_7ED00(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    if (*(_DWORD *)(v3 + 48)) {
      goto LABEL_193;
    }
    uint64_t v5 = *(void **)a1[1];
    uint64_t v6 = *(_DWORD *)(a1[2] + 36) & 0x3FFFFLL;
    char v7 = (uint64_t *)v5[98];
    unint64_t v8 = v5[99];
    if ((unint64_t)v7 >= v8)
    {
      uint64_t v13 = (uint64_t *)v5[97];
      uint64_t v14 = v7 - v13;
      if ((unint64_t)(v14 + 1) >> 61) {
        goto LABEL_195;
      }
      unint64_t v15 = v8 - (void)v13;
      unint64_t v16 = (uint64_t)(v8 - (void)v13) >> 2;
      if (v16 <= v14 + 1) {
        unint64_t v16 = v14 + 1;
      }
      if (v15 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v16;
      }
      if (v17)
      {
        unint64_t v18 = (char *)sub_5714((uint64_t)(v5 + 99), v17);
        char v7 = (uint64_t *)v5[98];
        uint64_t v13 = (uint64_t *)v5[97];
      }
      else
      {
        unint64_t v18 = 0;
      }
      unint64_t v19 = (uint64_t *)&v18[8 * v14];
      uint64_t v20 = &v18[8 * v17];
      *unint64_t v19 = v6;
      uint64_t v9 = v19 + 1;
      while (v7 != v13)
      {
        uint64_t v21 = *--v7;
        *--unint64_t v19 = v21;
      }
      v5[97] = v19;
      v5[98] = v9;
      v5[99] = v20;
      if (v13) {
        operator delete(v13);
      }
    }
    else
    {
      uint64_t *v7 = v6;
      uint64_t v9 = v7 + 1;
    }
    v5[98] = v9;
    if (!*(_DWORD *)(v3 + 48))
    {
      unint64_t v22 = *(void **)a1[1];
      uint64_t v23 = *(_DWORD *)(a1[2] + 32) & 0x3FFFFLL;
      unint64_t v24 = (uint64_t *)v22[101];
      unint64_t v25 = v22[102];
      if ((unint64_t)v24 >= v25)
      {
        unint64_t v27 = (uint64_t *)v22[100];
        uint64_t v28 = v24 - v27;
        if ((unint64_t)(v28 + 1) >> 61) {
          goto LABEL_195;
        }
        unint64_t v29 = v25 - (void)v27;
        unint64_t v30 = (uint64_t)(v25 - (void)v27) >> 2;
        if (v30 <= v28 + 1) {
          unint64_t v30 = v28 + 1;
        }
        if (v29 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v31 = v30;
        }
        if (v31)
        {
          unint64_t v32 = (char *)sub_5714((uint64_t)(v22 + 102), v31);
          unint64_t v24 = (uint64_t *)v22[101];
          unint64_t v27 = (uint64_t *)v22[100];
        }
        else
        {
          unint64_t v32 = 0;
        }
        unint64_t v33 = (uint64_t *)&v32[8 * v28];
        uint64_t v34 = &v32[8 * v31];
        *unint64_t v33 = v23;
        uint8x8_t v26 = v33 + 1;
        while (v24 != v27)
        {
          uint64_t v35 = *--v24;
          *--unint64_t v33 = v35;
        }
        v22[100] = v33;
        v22[101] = v26;
        v22[102] = v34;
        if (v27) {
          operator delete(v27);
        }
      }
      else
      {
        uint64_t *v24 = v23;
        uint8x8_t v26 = v24 + 1;
      }
      v22[101] = v26;
      if (!*(_DWORD *)(v3 + 48))
      {
        unint64_t v36 = *(void **)a1[1];
        uint64_t v37 = *(_DWORD *)(a1[2] + 28) & 0x3FFFFLL;
        uint64_t v38 = (uint64_t *)v36[104];
        unint64_t v39 = v36[105];
        if ((unint64_t)v38 >= v39)
        {
          uint64_t v41 = (uint64_t *)v36[103];
          uint64_t v42 = v38 - v41;
          if ((unint64_t)(v42 + 1) >> 61) {
            goto LABEL_195;
          }
          unint64_t v43 = v39 - (void)v41;
          unint64_t v44 = (uint64_t)(v39 - (void)v41) >> 2;
          if (v44 <= v42 + 1) {
            unint64_t v44 = v42 + 1;
          }
          if (v43 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v45 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v45 = v44;
          }
          if (v45)
          {
            unint64_t v46 = (char *)sub_5714((uint64_t)(v36 + 105), v45);
            uint64_t v38 = (uint64_t *)v36[104];
            uint64_t v41 = (uint64_t *)v36[103];
          }
          else
          {
            unint64_t v46 = 0;
          }
          unint64_t v47 = (uint64_t *)&v46[8 * v42];
          unint64_t v48 = &v46[8 * v45];
          *unint64_t v47 = v37;
          uint64_t v40 = v47 + 1;
          while (v38 != v41)
          {
            uint64_t v49 = *--v38;
            *--unint64_t v47 = v49;
          }
          v36[103] = v47;
          v36[104] = v40;
          v36[105] = v48;
          if (v41) {
            operator delete(v41);
          }
        }
        else
        {
          *uint64_t v38 = v37;
          uint64_t v40 = v38 + 1;
        }
        v36[104] = v40;
        if (!*(_DWORD *)(v3 + 48))
        {
          unint64_t v50 = *(void **)a1[1];
          unint64_t v51 = ((unint64_t)*(unsigned int *)(a1[2] + 24) >> 1) & 0x3FFFF;
          uint64_t v52 = (unint64_t *)v50[107];
          unint64_t v53 = v50[108];
          if ((unint64_t)v52 >= v53)
          {
            uint64_t v55 = (unint64_t *)v50[106];
            uint64_t v56 = v52 - v55;
            if ((unint64_t)(v56 + 1) >> 61) {
              goto LABEL_195;
            }
            unint64_t v57 = v53 - (void)v55;
            unint64_t v58 = (uint64_t)(v53 - (void)v55) >> 2;
            if (v58 <= v56 + 1) {
              unint64_t v58 = v56 + 1;
            }
            if (v57 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v59 = v58;
            }
            if (v59)
            {
              uint64_t v60 = (char *)sub_5714((uint64_t)(v50 + 108), v59);
              uint64_t v52 = (unint64_t *)v50[107];
              uint64_t v55 = (unint64_t *)v50[106];
            }
            else
            {
              uint64_t v60 = 0;
            }
            unint64_t v61 = (unint64_t *)&v60[8 * v56];
            unint64_t v62 = &v60[8 * v59];
            *unint64_t v61 = v51;
            unint64_t v54 = v61 + 1;
            while (v52 != v55)
            {
              unint64_t v63 = *--v52;
              *--unint64_t v61 = v63;
            }
            v50[106] = v61;
            v50[107] = v54;
            v50[108] = v62;
            if (v55) {
              operator delete(v55);
            }
          }
          else
          {
            *uint64_t v52 = v51;
            unint64_t v54 = v52 + 1;
          }
          v50[107] = v54;
          if (!*(_DWORD *)(v3 + 48))
          {
            unint64_t v64 = *(void **)a1[1];
            uint64_t v65 = *(_DWORD *)(a1[2] + 44) & 0x3FFFFLL;
            uint64_t v66 = (uint64_t *)v64[110];
            unint64_t v67 = v64[111];
            if ((unint64_t)v66 >= v67)
            {
              uint64_t v69 = (uint64_t *)v64[109];
              uint64_t v70 = v66 - v69;
              if ((unint64_t)(v70 + 1) >> 61) {
                goto LABEL_195;
              }
              unint64_t v71 = v67 - (void)v69;
              unint64_t v72 = (uint64_t)(v67 - (void)v69) >> 2;
              if (v72 <= v70 + 1) {
                unint64_t v72 = v70 + 1;
              }
              if (v71 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v73 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v73 = v72;
              }
              if (v73)
              {
                unint64_t v74 = (char *)sub_5714((uint64_t)(v64 + 111), v73);
                uint64_t v66 = (uint64_t *)v64[110];
                uint64_t v69 = (uint64_t *)v64[109];
              }
              else
              {
                unint64_t v74 = 0;
              }
              uint64_t v75 = (uint64_t *)&v74[8 * v70];
              unint64_t v76 = &v74[8 * v73];
              *uint64_t v75 = v65;
              uint64_t v68 = v75 + 1;
              while (v66 != v69)
              {
                uint64_t v77 = *--v66;
                *--uint64_t v75 = v77;
              }
              v64[109] = v75;
              v64[110] = v68;
              v64[111] = v76;
              if (v69) {
                operator delete(v69);
              }
            }
            else
            {
              uint64_t *v66 = v65;
              uint64_t v68 = v66 + 1;
            }
            v64[110] = v68;
            if (!*(_DWORD *)(v3 + 48))
            {
              unint64_t v78 = *(void **)a1[1];
              uint64_t v79 = *(_DWORD *)(a1[2] + 40) & 0x3FFFFLL;
              uint64_t v80 = (uint64_t *)v78[113];
              unint64_t v81 = v78[114];
              if ((unint64_t)v80 >= v81)
              {
                uint64_t v83 = (uint64_t *)v78[112];
                uint64_t v84 = v80 - v83;
                if ((unint64_t)(v84 + 1) >> 61) {
                  goto LABEL_195;
                }
                unint64_t v85 = v81 - (void)v83;
                unint64_t v86 = (uint64_t)(v81 - (void)v83) >> 2;
                if (v86 <= v84 + 1) {
                  unint64_t v86 = v84 + 1;
                }
                if (v85 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v87 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v87 = v86;
                }
                if (v87)
                {
                  unint64_t v88 = (char *)sub_5714((uint64_t)(v78 + 114), v87);
                  uint64_t v80 = (uint64_t *)v78[113];
                  uint64_t v83 = (uint64_t *)v78[112];
                }
                else
                {
                  unint64_t v88 = 0;
                }
                unint64_t v89 = (uint64_t *)&v88[8 * v84];
                uint64_t v90 = &v88[8 * v87];
                uint64_t *v89 = v79;
                uint64_t v82 = v89 + 1;
                while (v80 != v83)
                {
                  uint64_t v91 = *--v80;
                  *--unint64_t v89 = v91;
                }
                v78[112] = v89;
                v78[113] = v82;
                v78[114] = v90;
                if (v83) {
                  operator delete(v83);
                }
              }
              else
              {
                uint64_t *v80 = v79;
                uint64_t v82 = v80 + 1;
              }
              v78[113] = v82;
              if (!*(_DWORD *)(v3 + 48))
              {
                uint64_t v92 = a1[1];
                unint64_t v93 = *(void **)v92;
                uint64_t v94 = *(unsigned __int16 *)(a1[2] + 62);
                uint64_t v95 = *(char **)(*(void *)v92 + 928);
                unint64_t v96 = *(void *)(*(void *)v92 + 936);
                if ((unint64_t)v95 >= v96)
                {
                  uint64_t v98 = (char *)v93[115];
                  uint64_t v99 = (v95 - v98) >> 3;
                  if ((unint64_t)(v99 + 1) >> 61) {
                    goto LABEL_195;
                  }
                  unint64_t v100 = v96 - (void)v98;
                  unint64_t v101 = (uint64_t)(v96 - (void)v98) >> 2;
                  if (v101 <= v99 + 1) {
                    unint64_t v101 = v99 + 1;
                  }
                  if (v100 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v102 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v102 = v101;
                  }
                  if (v102)
                  {
                    unint64_t v103 = (char *)sub_5714((uint64_t)(v93 + 117), v102);
                    uint64_t v95 = (char *)v93[116];
                    uint64_t v98 = (char *)v93[115];
                  }
                  else
                  {
                    unint64_t v103 = 0;
                  }
                  uint64_t v104 = &v103[8 * v99];
                  uint64_t v105 = &v103[8 * v102];
                  *(void *)uint64_t v104 = v94;
                  uint64_t v97 = v104 + 8;
                  while (v95 != v98)
                  {
                    uint64_t v106 = *((void *)v95 - 1);
                    v95 -= 8;
                    *((void *)v104 - 1) = v106;
                    v104 -= 8;
                  }
                  v93[115] = v104;
                  v93[116] = v97;
                  v93[117] = v105;
                  if (v98) {
                    operator delete(v98);
                  }
                }
                else
                {
                  *(void *)uint64_t v95 = v94;
                  uint64_t v97 = v95 + 8;
                }
                v93[116] = v97;
                if (!*(_DWORD *)(v3 + 48))
                {
                  unint64_t v107 = *(void **)a1[1];
                  uint64_t v108 = *(_DWORD *)(a1[2] + 48) & 0xFFFFFLL;
                  uint64_t v109 = (uint64_t *)v107[119];
                  unint64_t v110 = v107[120];
                  if ((unint64_t)v109 >= v110)
                  {
                    uint64_t v112 = (uint64_t *)v107[118];
                    uint64_t v113 = v109 - v112;
                    if ((unint64_t)(v113 + 1) >> 61) {
                      goto LABEL_195;
                    }
                    unint64_t v114 = v110 - (void)v112;
                    unint64_t v115 = (uint64_t)(v110 - (void)v112) >> 2;
                    if (v115 <= v113 + 1) {
                      unint64_t v115 = v113 + 1;
                    }
                    if (v114 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v116 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v116 = v115;
                    }
                    if (v116)
                    {
                      unint64_t v117 = (char *)sub_5714((uint64_t)(v107 + 120), v116);
                      uint64_t v109 = (uint64_t *)v107[119];
                      uint64_t v112 = (uint64_t *)v107[118];
                    }
                    else
                    {
                      unint64_t v117 = 0;
                    }
                    uint64_t v118 = (uint64_t *)&v117[8 * v113];
                    unint64_t v119 = &v117[8 * v116];
                    uint64_t *v118 = v108;
                    uint64_t v111 = v118 + 1;
                    while (v109 != v112)
                    {
                      uint64_t v120 = *--v109;
                      *--uint64_t v118 = v120;
                    }
                    v107[118] = v118;
                    v107[119] = v111;
                    v107[120] = v119;
                    if (v112) {
                      operator delete(v112);
                    }
                  }
                  else
                  {
                    uint64_t *v109 = v108;
                    uint64_t v111 = v109 + 1;
                  }
                  v107[119] = v111;
                  if (!*(_DWORD *)(v3 + 48))
                  {
                    unint64_t v121 = *(void **)a1[1];
                    uint64_t v122 = *(_DWORD *)(a1[2] + 56) & 0xFFFFFLL;
                    unint64_t v123 = (uint64_t *)v121[122];
                    unint64_t v124 = v121[123];
                    if ((unint64_t)v123 >= v124)
                    {
                      unint64_t v126 = (uint64_t *)v121[121];
                      uint64_t v127 = v123 - v126;
                      if ((unint64_t)(v127 + 1) >> 61) {
                        goto LABEL_195;
                      }
                      unint64_t v128 = v124 - (void)v126;
                      unint64_t v129 = (uint64_t)(v124 - (void)v126) >> 2;
                      if (v129 <= v127 + 1) {
                        unint64_t v129 = v127 + 1;
                      }
                      if (v128 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v130 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v130 = v129;
                      }
                      if (v130)
                      {
                        unint64_t v131 = (char *)sub_5714((uint64_t)(v121 + 123), v130);
                        unint64_t v123 = (uint64_t *)v121[122];
                        unint64_t v126 = (uint64_t *)v121[121];
                      }
                      else
                      {
                        unint64_t v131 = 0;
                      }
                      unint64_t v132 = (uint64_t *)&v131[8 * v127];
                      unint64_t v133 = &v131[8 * v130];
                      *unint64_t v132 = v122;
                      uint64_t v125 = v132 + 1;
                      while (v123 != v126)
                      {
                        uint64_t v134 = *--v123;
                        *--unint64_t v132 = v134;
                      }
                      v121[121] = v132;
                      v121[122] = v125;
                      v121[123] = v133;
                      if (v126) {
                        operator delete(v126);
                      }
                    }
                    else
                    {
                      *unint64_t v123 = v122;
                      uint64_t v125 = v123 + 1;
                    }
                    v121[122] = v125;
                    if (!*(_DWORD *)(v3 + 48))
                    {
                      uint64_t v135 = a1[1];
                      unint64_t v136 = *(void **)v135;
                      uint64_t v137 = *(unsigned __int16 *)(a1[2] + 60);
                      unint64_t v138 = *(char **)(*(void *)v135 + 1000);
                      unint64_t v139 = *(void *)(*(void *)v135 + 1008);
                      if ((unint64_t)v138 >= v139)
                      {
                        uint64_t v141 = (char *)v136[124];
                        uint64_t v142 = (v138 - v141) >> 3;
                        if ((unint64_t)(v142 + 1) >> 61) {
                          goto LABEL_195;
                        }
                        unint64_t v143 = v139 - (void)v141;
                        unint64_t v144 = (uint64_t)(v139 - (void)v141) >> 2;
                        if (v144 <= v142 + 1) {
                          unint64_t v144 = v142 + 1;
                        }
                        if (v143 >= 0x7FFFFFFFFFFFFFF8) {
                          unint64_t v145 = 0x1FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v145 = v144;
                        }
                        if (v145)
                        {
                          uint64_t v146 = (char *)sub_5714((uint64_t)(v136 + 126), v145);
                          unint64_t v138 = (char *)v136[125];
                          uint64_t v141 = (char *)v136[124];
                        }
                        else
                        {
                          uint64_t v146 = 0;
                        }
                        unint64_t v147 = &v146[8 * v142];
                        unint64_t v148 = &v146[8 * v145];
                        *(void *)unint64_t v147 = v137;
                        uint64_t v140 = v147 + 8;
                        while (v138 != v141)
                        {
                          uint64_t v149 = *((void *)v138 - 1);
                          v138 -= 8;
                          *((void *)v147 - 1) = v149;
                          v147 -= 8;
                        }
                        v136[124] = v147;
                        v136[125] = v140;
                        v136[126] = v148;
                        if (v141) {
                          operator delete(v141);
                        }
                      }
                      else
                      {
                        *(void *)unint64_t v138 = v137;
                        uint64_t v140 = v138 + 8;
                      }
                      v136[125] = v140;
                      if (!*(_DWORD *)(v3 + 48))
                      {
                        uint64_t v150 = a1[2];
                        unint64_t v151 = *(void **)a1[1];
                        uint64_t v152 = *(_DWORD *)(v150 + 52) & 0xFFFFFLL;
                        unint64_t v153 = (uint64_t *)v151[128];
                        unint64_t v154 = v151[129];
                        if ((unint64_t)v153 < v154)
                        {
                          *unint64_t v153 = v152;
                          uint64_t v155 = v153 + 1;
LABEL_192:
                          v151[128] = v155;
                          goto LABEL_193;
                        }
                        unint64_t v156 = (uint64_t *)v151[127];
                        uint64_t v157 = v153 - v156;
                        if (!((unint64_t)(v157 + 1) >> 61))
                        {
                          unint64_t v158 = v154 - (void)v156;
                          unint64_t v159 = (uint64_t)(v154 - (void)v156) >> 2;
                          if (v159 <= v157 + 1) {
                            unint64_t v159 = v157 + 1;
                          }
                          if (v158 >= 0x7FFFFFFFFFFFFFF8) {
                            unint64_t v160 = 0x1FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v160 = v159;
                          }
                          if (v160)
                          {
                            unint64_t v161 = (char *)sub_5714((uint64_t)(v151 + 129), v160);
                            unint64_t v153 = (uint64_t *)v151[128];
                            unint64_t v156 = (uint64_t *)v151[127];
                          }
                          else
                          {
                            unint64_t v161 = 0;
                          }
                          unint64_t v162 = (uint64_t *)&v161[8 * v157];
                          unint64_t v163 = &v161[8 * v160];
                          *unint64_t v162 = v152;
                          uint64_t v155 = v162 + 1;
                          while (v153 != v156)
                          {
                            uint64_t v164 = *--v153;
                            *--unint64_t v162 = v164;
                          }
                          v151[127] = v162;
                          v151[128] = v155;
                          v151[129] = v163;
                          if (v156) {
                            operator delete(v156);
                          }
                          goto LABEL_192;
                        }
LABEL_195:
                        sub_566C();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_193:
    *a2 = 1;
    return;
  }
  if (!*(_DWORD *)(v3 + 48))
  {
    uint64_t v11 = a1[1];
    uint64_t v10 = a1[2];
    uint64_t v12 = *(void **)v11;
    *(void *)(v12[98] - 8) += *(_DWORD *)(v10 + 36) & 0x3FFFF;
    *(void *)(v12[101] - 8) += *(_DWORD *)(v10 + 32) & 0x3FFFF;
    *(void *)(v12[104] - 8) += *(_DWORD *)(v10 + 28) & 0x3FFFF;
    *(void *)(v12[107] - 8) += ((unint64_t)*(unsigned int *)(v10 + 24) >> 1) & 0x3FFFF;
    *(void *)(v12[110] - 8) += *(_DWORD *)(v10 + 44) & 0x3FFFF;
    *(void *)(v12[113] - 8) += *(_DWORD *)(v10 + 40) & 0x3FFFF;
    *(void *)(v12[116] - 8) += *(unsigned __int16 *)(v10 + 62);
    *(void *)(v12[119] - 8) += *(_DWORD *)(v10 + 48) & 0xFFFFF;
    *(void *)(v12[122] - 8) += *(_DWORD *)(v10 + 56) & 0xFFFFF;
    *(void *)(v12[125] - 8) += *(unsigned __int16 *)(v10 + 60);
    *(void *)(*(void *)(*(void *)v11 + 1024) - 8) += *(_DWORD *)(a1[2] + 52) & 0xFFFFF;
  }
}

void sub_7F734(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    if (*(_DWORD *)(v3 + 48)) {
      goto LABEL_74;
    }
    uint64_t v5 = *(void **)a1[1];
    uint64_t v6 = *(_DWORD *)(a1[2] + 36) & 0xFFFFFLL;
    char v7 = (uint64_t *)v5[728];
    unint64_t v8 = v5[729];
    if ((unint64_t)v7 >= v8)
    {
      uint64_t v12 = (uint64_t *)v5[727];
      uint64_t v13 = v7 - v12;
      if ((unint64_t)(v13 + 1) >> 61) {
        goto LABEL_76;
      }
      unint64_t v14 = v8 - (void)v12;
      unint64_t v15 = (uint64_t)(v8 - (void)v12) >> 2;
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      if (v14 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v15;
      }
      if (v16)
      {
        unint64_t v17 = (char *)sub_5714((uint64_t)(v5 + 729), v16);
        char v7 = (uint64_t *)v5[728];
        uint64_t v12 = (uint64_t *)v5[727];
      }
      else
      {
        unint64_t v17 = 0;
      }
      unint64_t v18 = (uint64_t *)&v17[8 * v13];
      unint64_t v19 = &v17[8 * v16];
      *unint64_t v18 = v6;
      uint64_t v9 = v18 + 1;
      while (v7 != v12)
      {
        uint64_t v20 = *--v7;
        *--unint64_t v18 = v20;
      }
      v5[727] = v18;
      v5[728] = v9;
      v5[729] = v19;
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      uint64_t *v7 = v6;
      uint64_t v9 = v7 + 1;
    }
    v5[728] = v9;
    if (!*(_DWORD *)(v3 + 48))
    {
      uint64_t v21 = *(void **)a1[1];
      uint64_t v22 = *(_DWORD *)(a1[2] + 28) & 0x1FFFFLL;
      uint64_t v23 = (uint64_t *)v21[731];
      unint64_t v24 = v21[732];
      if ((unint64_t)v23 >= v24)
      {
        uint8x8_t v26 = (uint64_t *)v21[730];
        uint64_t v27 = v23 - v26;
        if ((unint64_t)(v27 + 1) >> 61) {
          goto LABEL_76;
        }
        unint64_t v28 = v24 - (void)v26;
        unint64_t v29 = (uint64_t)(v24 - (void)v26) >> 2;
        if (v29 <= v27 + 1) {
          unint64_t v29 = v27 + 1;
        }
        if (v28 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v29;
        }
        if (v30)
        {
          unint64_t v31 = (char *)sub_5714((uint64_t)(v21 + 732), v30);
          uint64_t v23 = (uint64_t *)v21[731];
          uint8x8_t v26 = (uint64_t *)v21[730];
        }
        else
        {
          unint64_t v31 = 0;
        }
        unint64_t v32 = (uint64_t *)&v31[8 * v27];
        unint64_t v33 = &v31[8 * v30];
        *unint64_t v32 = v22;
        unint64_t v25 = v32 + 1;
        while (v23 != v26)
        {
          uint64_t v34 = *--v23;
          *--unint64_t v32 = v34;
        }
        v21[730] = v32;
        v21[731] = v25;
        v21[732] = v33;
        if (v26) {
          operator delete(v26);
        }
      }
      else
      {
        *uint64_t v23 = v22;
        unint64_t v25 = v23 + 1;
      }
      v21[731] = v25;
      if (!*(_DWORD *)(v3 + 48))
      {
        uint64_t v35 = *(void **)a1[1];
        uint64_t v36 = *(_DWORD *)(a1[2] + 32) & 0xFFFFFLL;
        uint64_t v37 = (uint64_t *)v35[734];
        unint64_t v38 = v35[735];
        if ((unint64_t)v37 >= v38)
        {
          uint64_t v40 = (uint64_t *)v35[733];
          uint64_t v41 = v37 - v40;
          if ((unint64_t)(v41 + 1) >> 61) {
            goto LABEL_76;
          }
          unint64_t v42 = v38 - (void)v40;
          unint64_t v43 = (uint64_t)(v38 - (void)v40) >> 2;
          if (v43 <= v41 + 1) {
            unint64_t v43 = v41 + 1;
          }
          if (v42 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v44 = v43;
          }
          if (v44)
          {
            unint64_t v45 = (char *)sub_5714((uint64_t)(v35 + 735), v44);
            uint64_t v37 = (uint64_t *)v35[734];
            uint64_t v40 = (uint64_t *)v35[733];
          }
          else
          {
            unint64_t v45 = 0;
          }
          unint64_t v46 = (uint64_t *)&v45[8 * v41];
          unint64_t v47 = &v45[8 * v44];
          *unint64_t v46 = v36;
          unint64_t v39 = v46 + 1;
          while (v37 != v40)
          {
            uint64_t v48 = *--v37;
            *--unint64_t v46 = v48;
          }
          v35[733] = v46;
          v35[734] = v39;
          v35[735] = v47;
          if (v40) {
            operator delete(v40);
          }
        }
        else
        {
          *uint64_t v37 = v36;
          unint64_t v39 = v37 + 1;
        }
        v35[734] = v39;
        if (!*(_DWORD *)(v3 + 48))
        {
          uint64_t v49 = a1[2];
          unint64_t v50 = *(void **)a1[1];
          unint64_t v51 = ((unint64_t)*(unsigned int *)(v49 + 24) >> 1) & 0x7FFFF;
          uint64_t v52 = (unint64_t *)v50[737];
          unint64_t v53 = v50[738];
          if ((unint64_t)v52 < v53)
          {
            *uint64_t v52 = v51;
            unint64_t v54 = v52 + 1;
LABEL_73:
            v50[737] = v54;
            goto LABEL_74;
          }
          uint64_t v55 = (unint64_t *)v50[736];
          uint64_t v56 = v52 - v55;
          if (!((unint64_t)(v56 + 1) >> 61))
          {
            unint64_t v57 = v53 - (void)v55;
            unint64_t v58 = (uint64_t)(v53 - (void)v55) >> 2;
            if (v58 <= v56 + 1) {
              unint64_t v58 = v56 + 1;
            }
            if (v57 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v59 = v58;
            }
            if (v59)
            {
              uint64_t v60 = (char *)sub_5714((uint64_t)(v50 + 738), v59);
              uint64_t v52 = (unint64_t *)v50[737];
              uint64_t v55 = (unint64_t *)v50[736];
            }
            else
            {
              uint64_t v60 = 0;
            }
            unint64_t v61 = (unint64_t *)&v60[8 * v56];
            unint64_t v62 = &v60[8 * v59];
            *unint64_t v61 = v51;
            unint64_t v54 = v61 + 1;
            while (v52 != v55)
            {
              unint64_t v63 = *--v52;
              *--unint64_t v61 = v63;
            }
            v50[736] = v61;
            v50[737] = v54;
            v50[738] = v62;
            if (v55) {
              operator delete(v55);
            }
            goto LABEL_73;
          }
LABEL_76:
          sub_566C();
        }
      }
    }
LABEL_74:
    *a2 = 1;
    return;
  }
  if (!*(_DWORD *)(v3 + 48))
  {
    uint64_t v10 = (unsigned int *)a1[2];
    uint64_t v11 = *(void **)a1[1];
    *(void *)(v11[728] - 8) += v10[9] & 0xFFFFF;
    *(void *)(v11[731] - 8) += v10[7] & 0x1FFFF;
    *(void *)(v11[734] - 8) += v10[8] & 0xFFFFF;
    *(void *)(v11[737] - 8) += ((unint64_t)v10[6] >> 1) & 0x7FFFF;
  }
}

void sub_7FB50(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    if (*(_DWORD *)(v3 + 48)) {
      goto LABEL_347;
    }
    uint64_t v5 = *(void **)a1[1];
    uint64_t v6 = *(_DWORD *)(a1[2] + 48) & 0x7FFFFLL;
    char v7 = (uint64_t *)v5[611];
    unint64_t v8 = v5[612];
    if ((unint64_t)v7 >= v8)
    {
      unint64_t v15 = (uint64_t *)v5[610];
      uint64_t v16 = v7 - v15;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_339;
      }
      unint64_t v17 = v8 - (void)v15;
      unint64_t v18 = (uint64_t)(v8 - (void)v15) >> 2;
      if (v18 <= v16 + 1) {
        unint64_t v18 = v16 + 1;
      }
      if (v17 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v18;
      }
      if (v19)
      {
        uint64_t v20 = (char *)sub_5714((uint64_t)(v5 + 612), v19);
        char v7 = (uint64_t *)v5[611];
        unint64_t v15 = (uint64_t *)v5[610];
      }
      else
      {
        uint64_t v20 = 0;
      }
      uint64_t v21 = (uint64_t *)&v20[8 * v16];
      uint64_t v22 = &v20[8 * v19];
      uint64_t *v21 = v6;
      uint64_t v9 = v21 + 1;
      while (v7 != v15)
      {
        uint64_t v23 = *--v7;
        *--uint64_t v21 = v23;
      }
      v5[610] = v21;
      v5[611] = v9;
      v5[612] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      uint64_t *v7 = v6;
      uint64_t v9 = v7 + 1;
    }
    v5[611] = v9;
    if (!*(_DWORD *)(v3 + 48))
    {
      unint64_t v24 = *(void **)a1[1];
      uint64_t v25 = *(_DWORD *)(a1[2] + 88) & 0x7FFFFLL;
      uint8x8_t v26 = (uint64_t *)v24[614];
      unint64_t v27 = v24[615];
      if ((unint64_t)v26 >= v27)
      {
        unint64_t v29 = (uint64_t *)v24[613];
        uint64_t v30 = v26 - v29;
        if ((unint64_t)(v30 + 1) >> 61) {
          goto LABEL_339;
        }
        unint64_t v31 = v27 - (void)v29;
        unint64_t v32 = (uint64_t)(v27 - (void)v29) >> 2;
        if (v32 <= v30 + 1) {
          unint64_t v32 = v30 + 1;
        }
        if (v31 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v33 = v32;
        }
        if (v33)
        {
          uint64_t v34 = (char *)sub_5714((uint64_t)(v24 + 615), v33);
          uint8x8_t v26 = (uint64_t *)v24[614];
          unint64_t v29 = (uint64_t *)v24[613];
        }
        else
        {
          uint64_t v34 = 0;
        }
        uint64_t v35 = (uint64_t *)&v34[8 * v30];
        uint64_t v36 = &v34[8 * v33];
        uint64_t *v35 = v25;
        unint64_t v28 = v35 + 1;
        while (v26 != v29)
        {
          uint64_t v37 = *--v26;
          *--uint64_t v35 = v37;
        }
        v24[613] = v35;
        v24[614] = v28;
        v24[615] = v36;
        if (v29) {
          operator delete(v29);
        }
      }
      else
      {
        uint64_t *v26 = v25;
        unint64_t v28 = v26 + 1;
      }
      v24[614] = v28;
      if (!*(_DWORD *)(v3 + 48))
      {
        unint64_t v38 = *(void **)a1[1];
        unint64_t v39 = ((unint64_t)*(unsigned int *)(a1[2] + 24) >> 1) & 0x7FFFF;
        uint64_t v40 = (unint64_t *)v38[617];
        unint64_t v41 = v38[618];
        if ((unint64_t)v40 >= v41)
        {
          unint64_t v43 = (unint64_t *)v38[616];
          uint64_t v44 = v40 - v43;
          if ((unint64_t)(v44 + 1) >> 61) {
            goto LABEL_339;
          }
          unint64_t v45 = v41 - (void)v43;
          unint64_t v46 = (uint64_t)(v41 - (void)v43) >> 2;
          if (v46 <= v44 + 1) {
            unint64_t v46 = v44 + 1;
          }
          if (v45 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v47 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v47 = v46;
          }
          if (v47)
          {
            uint64_t v48 = (char *)sub_5714((uint64_t)(v38 + 618), v47);
            uint64_t v40 = (unint64_t *)v38[617];
            unint64_t v43 = (unint64_t *)v38[616];
          }
          else
          {
            uint64_t v48 = 0;
          }
          uint64_t v49 = (unint64_t *)&v48[8 * v44];
          unint64_t v50 = &v48[8 * v47];
          unint64_t *v49 = v39;
          unint64_t v42 = v49 + 1;
          while (v40 != v43)
          {
            unint64_t v51 = *--v40;
            *--uint64_t v49 = v51;
          }
          v38[616] = v49;
          v38[617] = v42;
          v38[618] = v50;
          if (v43) {
            operator delete(v43);
          }
        }
        else
        {
          *uint64_t v40 = v39;
          unint64_t v42 = v40 + 1;
        }
        v38[617] = v42;
        if (!*(_DWORD *)(v3 + 48))
        {
          uint64_t v52 = *(void **)a1[1];
          uint64_t v53 = *(_DWORD *)(a1[2] + 64) & 0x7FFFFLL;
          unint64_t v54 = (uint64_t *)v52[620];
          unint64_t v55 = v52[621];
          if ((unint64_t)v54 >= v55)
          {
            unint64_t v57 = (uint64_t *)v52[619];
            uint64_t v58 = v54 - v57;
            if ((unint64_t)(v58 + 1) >> 61) {
              goto LABEL_339;
            }
            unint64_t v59 = v55 - (void)v57;
            unint64_t v60 = (uint64_t)(v55 - (void)v57) >> 2;
            if (v60 <= v58 + 1) {
              unint64_t v60 = v58 + 1;
            }
            if (v59 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v61 = v60;
            }
            if (v61)
            {
              unint64_t v62 = (char *)sub_5714((uint64_t)(v52 + 621), v61);
              unint64_t v54 = (uint64_t *)v52[620];
              unint64_t v57 = (uint64_t *)v52[619];
            }
            else
            {
              unint64_t v62 = 0;
            }
            unint64_t v63 = (uint64_t *)&v62[8 * v58];
            unint64_t v64 = &v62[8 * v61];
            *unint64_t v63 = v53;
            uint64_t v56 = v63 + 1;
            while (v54 != v57)
            {
              uint64_t v65 = *--v54;
              *--unint64_t v63 = v65;
            }
            v52[619] = v63;
            v52[620] = v56;
            v52[621] = v64;
            if (v57) {
              operator delete(v57);
            }
          }
          else
          {
            uint64_t *v54 = v53;
            uint64_t v56 = v54 + 1;
          }
          v52[620] = v56;
          if (!*(_DWORD *)(v3 + 48))
          {
            uint64_t v66 = *(void **)a1[1];
            uint64_t v67 = *(_DWORD *)(a1[2] + 32) & 0x7FFFFLL;
            uint64_t v68 = (uint64_t *)v66[623];
            unint64_t v69 = v66[624];
            if ((unint64_t)v68 >= v69)
            {
              unint64_t v71 = (uint64_t *)v66[622];
              uint64_t v72 = v68 - v71;
              if ((unint64_t)(v72 + 1) >> 61) {
                goto LABEL_339;
              }
              unint64_t v73 = v69 - (void)v71;
              unint64_t v74 = (uint64_t)(v69 - (void)v71) >> 2;
              if (v74 <= v72 + 1) {
                unint64_t v74 = v72 + 1;
              }
              if (v73 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v75 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v75 = v74;
              }
              if (v75)
              {
                unint64_t v76 = (char *)sub_5714((uint64_t)(v66 + 624), v75);
                uint64_t v68 = (uint64_t *)v66[623];
                unint64_t v71 = (uint64_t *)v66[622];
              }
              else
              {
                unint64_t v76 = 0;
              }
              uint64_t v77 = (uint64_t *)&v76[8 * v72];
              unint64_t v78 = &v76[8 * v75];
              *uint64_t v77 = v67;
              uint64_t v70 = v77 + 1;
              while (v68 != v71)
              {
                uint64_t v79 = *--v68;
                *--uint64_t v77 = v79;
              }
              v66[622] = v77;
              v66[623] = v70;
              v66[624] = v78;
              if (v71) {
                operator delete(v71);
              }
            }
            else
            {
              *uint64_t v68 = v67;
              uint64_t v70 = v68 + 1;
            }
            v66[623] = v70;
            if (!*(_DWORD *)(v3 + 48))
            {
              uint64_t v80 = *(void **)a1[1];
              uint64_t v81 = *(_DWORD *)(a1[2] + 72) & 0x7FFFFLL;
              uint64_t v82 = (uint64_t *)v80[626];
              unint64_t v83 = v80[627];
              if ((unint64_t)v82 >= v83)
              {
                unint64_t v85 = (uint64_t *)v80[625];
                uint64_t v86 = v82 - v85;
                if ((unint64_t)(v86 + 1) >> 61) {
                  goto LABEL_339;
                }
                unint64_t v87 = v83 - (void)v85;
                unint64_t v88 = (uint64_t)(v83 - (void)v85) >> 2;
                if (v88 <= v86 + 1) {
                  unint64_t v88 = v86 + 1;
                }
                if (v87 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v89 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v89 = v88;
                }
                if (v89)
                {
                  uint64_t v90 = (char *)sub_5714((uint64_t)(v80 + 627), v89);
                  uint64_t v82 = (uint64_t *)v80[626];
                  unint64_t v85 = (uint64_t *)v80[625];
                }
                else
                {
                  uint64_t v90 = 0;
                }
                uint64_t v91 = (uint64_t *)&v90[8 * v86];
                uint64_t v92 = &v90[8 * v89];
                *uint64_t v91 = v81;
                uint64_t v84 = v91 + 1;
                while (v82 != v85)
                {
                  uint64_t v93 = *--v82;
                  *--uint64_t v91 = v93;
                }
                v80[625] = v91;
                v80[626] = v84;
                v80[627] = v92;
                if (v85) {
                  operator delete(v85);
                }
              }
              else
              {
                *uint64_t v82 = v81;
                uint64_t v84 = v82 + 1;
              }
              v80[626] = v84;
              if (!*(_DWORD *)(v3 + 48))
              {
                uint64_t v94 = *(void **)a1[1];
                uint64_t v95 = *(_DWORD *)(a1[2] + 44) & 0x7FFFFLL;
                unint64_t v96 = (uint64_t *)v94[629];
                unint64_t v97 = v94[630];
                if ((unint64_t)v96 >= v97)
                {
                  uint64_t v99 = (uint64_t *)v94[628];
                  uint64_t v100 = v96 - v99;
                  if ((unint64_t)(v100 + 1) >> 61) {
                    goto LABEL_339;
                  }
                  unint64_t v101 = v97 - (void)v99;
                  unint64_t v102 = (uint64_t)(v97 - (void)v99) >> 2;
                  if (v102 <= v100 + 1) {
                    unint64_t v102 = v100 + 1;
                  }
                  if (v101 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v103 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v103 = v102;
                  }
                  if (v103)
                  {
                    uint64_t v104 = (char *)sub_5714((uint64_t)(v94 + 630), v103);
                    unint64_t v96 = (uint64_t *)v94[629];
                    uint64_t v99 = (uint64_t *)v94[628];
                  }
                  else
                  {
                    uint64_t v104 = 0;
                  }
                  uint64_t v105 = (uint64_t *)&v104[8 * v100];
                  uint64_t v106 = &v104[8 * v103];
                  *uint64_t v105 = v95;
                  uint64_t v98 = v105 + 1;
                  while (v96 != v99)
                  {
                    uint64_t v107 = *--v96;
                    *--uint64_t v105 = v107;
                  }
                  v94[628] = v105;
                  v94[629] = v98;
                  v94[630] = v106;
                  if (v99) {
                    operator delete(v99);
                  }
                }
                else
                {
                  uint64_t *v96 = v95;
                  uint64_t v98 = v96 + 1;
                }
                v94[629] = v98;
                if (!*(_DWORD *)(v3 + 48))
                {
                  uint64_t v108 = *(void **)a1[1];
                  uint64_t v109 = *(_DWORD *)(a1[2] + 84) & 0x7FFFFLL;
                  unint64_t v110 = (uint64_t *)v108[632];
                  unint64_t v111 = v108[633];
                  if ((unint64_t)v110 >= v111)
                  {
                    uint64_t v113 = (uint64_t *)v108[631];
                    uint64_t v114 = v110 - v113;
                    if ((unint64_t)(v114 + 1) >> 61) {
                      goto LABEL_339;
                    }
                    unint64_t v115 = v111 - (void)v113;
                    unint64_t v116 = (uint64_t)(v111 - (void)v113) >> 2;
                    if (v116 <= v114 + 1) {
                      unint64_t v116 = v114 + 1;
                    }
                    if (v115 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v117 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v117 = v116;
                    }
                    if (v117)
                    {
                      uint64_t v118 = (char *)sub_5714((uint64_t)(v108 + 633), v117);
                      unint64_t v110 = (uint64_t *)v108[632];
                      uint64_t v113 = (uint64_t *)v108[631];
                    }
                    else
                    {
                      uint64_t v118 = 0;
                    }
                    unint64_t v119 = (uint64_t *)&v118[8 * v114];
                    uint64_t v120 = &v118[8 * v117];
                    uint64_t *v119 = v109;
                    uint64_t v112 = v119 + 1;
                    while (v110 != v113)
                    {
                      uint64_t v121 = *--v110;
                      *--unint64_t v119 = v121;
                    }
                    v108[631] = v119;
                    v108[632] = v112;
                    v108[633] = v120;
                    if (v113) {
                      operator delete(v113);
                    }
                  }
                  else
                  {
                    uint64_t *v110 = v109;
                    uint64_t v112 = v110 + 1;
                  }
                  v108[632] = v112;
                  if (!*(_DWORD *)(v3 + 48))
                  {
                    uint64_t v122 = *(void **)a1[1];
                    uint64_t v123 = *(_DWORD *)(a1[2] + 40) & 0x7FFFFLL;
                    unint64_t v124 = (uint64_t *)v122[635];
                    unint64_t v125 = v122[636];
                    if ((unint64_t)v124 >= v125)
                    {
                      uint64_t v127 = (uint64_t *)v122[634];
                      uint64_t v128 = v124 - v127;
                      if ((unint64_t)(v128 + 1) >> 61) {
                        goto LABEL_339;
                      }
                      unint64_t v129 = v125 - (void)v127;
                      unint64_t v130 = (uint64_t)(v125 - (void)v127) >> 2;
                      if (v130 <= v128 + 1) {
                        unint64_t v130 = v128 + 1;
                      }
                      if (v129 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v131 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v131 = v130;
                      }
                      if (v131)
                      {
                        unint64_t v132 = (char *)sub_5714((uint64_t)(v122 + 636), v131);
                        unint64_t v124 = (uint64_t *)v122[635];
                        uint64_t v127 = (uint64_t *)v122[634];
                      }
                      else
                      {
                        unint64_t v132 = 0;
                      }
                      unint64_t v133 = (uint64_t *)&v132[8 * v128];
                      uint64_t v134 = &v132[8 * v131];
                      uint64_t *v133 = v123;
                      unint64_t v126 = v133 + 1;
                      while (v124 != v127)
                      {
                        uint64_t v135 = *--v124;
                        *--unint64_t v133 = v135;
                      }
                      v122[634] = v133;
                      v122[635] = v126;
                      v122[636] = v134;
                      if (v127) {
                        operator delete(v127);
                      }
                    }
                    else
                    {
                      uint64_t *v124 = v123;
                      unint64_t v126 = v124 + 1;
                    }
                    v122[635] = v126;
                    if (!*(_DWORD *)(v3 + 48))
                    {
                      unint64_t v136 = *(void **)a1[1];
                      uint64_t v137 = *(_DWORD *)(a1[2] + 80) & 0x7FFFFLL;
                      unint64_t v138 = (uint64_t *)v136[638];
                      unint64_t v139 = v136[639];
                      if ((unint64_t)v138 >= v139)
                      {
                        uint64_t v141 = (uint64_t *)v136[637];
                        uint64_t v142 = v138 - v141;
                        if ((unint64_t)(v142 + 1) >> 61) {
                          goto LABEL_339;
                        }
                        unint64_t v143 = v139 - (void)v141;
                        unint64_t v144 = (uint64_t)(v139 - (void)v141) >> 2;
                        if (v144 <= v142 + 1) {
                          unint64_t v144 = v142 + 1;
                        }
                        if (v143 >= 0x7FFFFFFFFFFFFFF8) {
                          unint64_t v145 = 0x1FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v145 = v144;
                        }
                        if (v145)
                        {
                          uint64_t v146 = (char *)sub_5714((uint64_t)(v136 + 639), v145);
                          unint64_t v138 = (uint64_t *)v136[638];
                          uint64_t v141 = (uint64_t *)v136[637];
                        }
                        else
                        {
                          uint64_t v146 = 0;
                        }
                        unint64_t v147 = (uint64_t *)&v146[8 * v142];
                        unint64_t v148 = &v146[8 * v145];
                        *unint64_t v147 = v137;
                        uint64_t v140 = v147 + 1;
                        while (v138 != v141)
                        {
                          uint64_t v149 = *--v138;
                          *--unint64_t v147 = v149;
                        }
                        v136[637] = v147;
                        v136[638] = v140;
                        v136[639] = v148;
                        if (v141) {
                          operator delete(v141);
                        }
                      }
                      else
                      {
                        *unint64_t v138 = v137;
                        uint64_t v140 = v138 + 1;
                      }
                      v136[638] = v140;
                      if (!*(_DWORD *)(v3 + 48))
                      {
                        uint64_t v150 = *(void **)a1[1];
                        uint64_t v151 = *(_DWORD *)(a1[2] + 56) & 0x7FFFFLL;
                        uint64_t v152 = (uint64_t *)v150[641];
                        unint64_t v153 = v150[642];
                        if ((unint64_t)v152 >= v153)
                        {
                          uint64_t v155 = (uint64_t *)v150[640];
                          uint64_t v156 = v152 - v155;
                          if ((unint64_t)(v156 + 1) >> 61) {
                            goto LABEL_339;
                          }
                          unint64_t v157 = v153 - (void)v155;
                          unint64_t v158 = (uint64_t)(v153 - (void)v155) >> 2;
                          if (v158 <= v156 + 1) {
                            unint64_t v158 = v156 + 1;
                          }
                          if (v157 >= 0x7FFFFFFFFFFFFFF8) {
                            unint64_t v159 = 0x1FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v159 = v158;
                          }
                          if (v159)
                          {
                            unint64_t v160 = (char *)sub_5714((uint64_t)(v150 + 642), v159);
                            uint64_t v152 = (uint64_t *)v150[641];
                            uint64_t v155 = (uint64_t *)v150[640];
                          }
                          else
                          {
                            unint64_t v160 = 0;
                          }
                          unint64_t v161 = (uint64_t *)&v160[8 * v156];
                          unint64_t v162 = &v160[8 * v159];
                          uint64_t *v161 = v151;
                          unint64_t v154 = v161 + 1;
                          while (v152 != v155)
                          {
                            uint64_t v163 = *--v152;
                            *--unint64_t v161 = v163;
                          }
                          v150[640] = v161;
                          v150[641] = v154;
                          v150[642] = v162;
                          if (v155) {
                            operator delete(v155);
                          }
                        }
                        else
                        {
                          *uint64_t v152 = v151;
                          unint64_t v154 = v152 + 1;
                        }
                        v150[641] = v154;
                        if (!*(_DWORD *)(v3 + 48))
                        {
                          uint64_t v164 = *(void **)a1[1];
                          uint64_t v165 = *(_DWORD *)(a1[2] + 96) & 0x7FFFFLL;
                          unint64_t v166 = (uint64_t *)v164[644];
                          unint64_t v167 = v164[645];
                          if ((unint64_t)v166 >= v167)
                          {
                            uint64_t v169 = (uint64_t *)v164[643];
                            uint64_t v170 = v166 - v169;
                            if ((unint64_t)(v170 + 1) >> 61) {
                              goto LABEL_339;
                            }
                            unint64_t v171 = v167 - (void)v169;
                            unint64_t v172 = (uint64_t)(v167 - (void)v169) >> 2;
                            if (v172 <= v170 + 1) {
                              unint64_t v172 = v170 + 1;
                            }
                            if (v171 >= 0x7FFFFFFFFFFFFFF8) {
                              unint64_t v173 = 0x1FFFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v173 = v172;
                            }
                            if (v173)
                            {
                              uint64_t v174 = (char *)sub_5714((uint64_t)(v164 + 645), v173);
                              unint64_t v166 = (uint64_t *)v164[644];
                              uint64_t v169 = (uint64_t *)v164[643];
                            }
                            else
                            {
                              uint64_t v174 = 0;
                            }
                            uint64_t v175 = (uint64_t *)&v174[8 * v170];
                            unint64_t v176 = &v174[8 * v173];
                            uint64_t *v175 = v165;
                            unint64_t v168 = v175 + 1;
                            while (v166 != v169)
                            {
                              uint64_t v177 = *--v166;
                              *--uint64_t v175 = v177;
                            }
                            v164[643] = v175;
                            v164[644] = v168;
                            v164[645] = v176;
                            if (v169) {
                              operator delete(v169);
                            }
                          }
                          else
                          {
                            *unint64_t v166 = v165;
                            unint64_t v168 = v166 + 1;
                          }
                          v164[644] = v168;
                          if (!*(_DWORD *)(v3 + 48))
                          {
                            unsigned int v178 = *(void **)a1[1];
                            uint64_t v179 = *(_DWORD *)(a1[2] + 60) & 0x7FFFFLL;
                            uint64_t v180 = (uint64_t *)v178[647];
                            unint64_t v181 = v178[648];
                            if ((unint64_t)v180 >= v181)
                            {
                              unint64_t v183 = (uint64_t *)v178[646];
                              uint64_t v184 = v180 - v183;
                              if ((unint64_t)(v184 + 1) >> 61) {
                                goto LABEL_339;
                              }
                              unint64_t v185 = v181 - (void)v183;
                              unint64_t v186 = (uint64_t)(v181 - (void)v183) >> 2;
                              if (v186 <= v184 + 1) {
                                unint64_t v186 = v184 + 1;
                              }
                              if (v185 >= 0x7FFFFFFFFFFFFFF8) {
                                unint64_t v187 = 0x1FFFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v187 = v186;
                              }
                              if (v187)
                              {
                                uint64_t v188 = (char *)sub_5714((uint64_t)(v178 + 648), v187);
                                uint64_t v180 = (uint64_t *)v178[647];
                                unint64_t v183 = (uint64_t *)v178[646];
                              }
                              else
                              {
                                uint64_t v188 = 0;
                              }
                              unint64_t v189 = (uint64_t *)&v188[8 * v184];
                              uint64_t v190 = &v188[8 * v187];
                              uint64_t *v189 = v179;
                              unint64_t v182 = v189 + 1;
                              while (v180 != v183)
                              {
                                uint64_t v191 = *--v180;
                                *--unint64_t v189 = v191;
                              }
                              v178[646] = v189;
                              v178[647] = v182;
                              v178[648] = v190;
                              if (v183) {
                                operator delete(v183);
                              }
                            }
                            else
                            {
                              uint64_t *v180 = v179;
                              unint64_t v182 = v180 + 1;
                            }
                            v178[647] = v182;
                            if (!*(_DWORD *)(v3 + 48))
                            {
                              unint64_t v192 = *(void **)a1[1];
                              uint64_t v193 = *(_DWORD *)(a1[2] + 52) & 0x7FFFFLL;
                              unsigned __int16 v194 = (uint64_t *)v192[650];
                              unint64_t v195 = v192[651];
                              if ((unint64_t)v194 >= v195)
                              {
                                unint64_t v197 = (uint64_t *)v192[649];
                                uint64_t v198 = v194 - v197;
                                if ((unint64_t)(v198 + 1) >> 61) {
                                  goto LABEL_339;
                                }
                                unint64_t v199 = v195 - (void)v197;
                                unint64_t v200 = (uint64_t)(v195 - (void)v197) >> 2;
                                if (v200 <= v198 + 1) {
                                  unint64_t v200 = v198 + 1;
                                }
                                if (v199 >= 0x7FFFFFFFFFFFFFF8) {
                                  unint64_t v201 = 0x1FFFFFFFFFFFFFFFLL;
                                }
                                else {
                                  unint64_t v201 = v200;
                                }
                                if (v201)
                                {
                                  uint64_t v202 = (char *)sub_5714((uint64_t)(v192 + 651), v201);
                                  unsigned __int16 v194 = (uint64_t *)v192[650];
                                  unint64_t v197 = (uint64_t *)v192[649];
                                }
                                else
                                {
                                  uint64_t v202 = 0;
                                }
                                unint64_t v203 = (uint64_t *)&v202[8 * v198];
                                unint64_t v204 = &v202[8 * v201];
                                uint64_t *v203 = v193;
                                unint64_t v196 = v203 + 1;
                                while (v194 != v197)
                                {
                                  uint64_t v205 = *--v194;
                                  *--unint64_t v203 = v205;
                                }
                                v192[649] = v203;
                                v192[650] = v196;
                                v192[651] = v204;
                                if (v197) {
                                  operator delete(v197);
                                }
                              }
                              else
                              {
                                uint64_t *v194 = v193;
                                unint64_t v196 = v194 + 1;
                              }
                              v192[650] = v196;
                              if (!*(_DWORD *)(v3 + 48))
                              {
                                uint64_t v206 = *(void **)a1[1];
                                uint64_t v207 = *(_DWORD *)(a1[2] + 92) & 0x7FFFFLL;
                                unsigned int v208 = (uint64_t *)v206[653];
                                unint64_t v209 = v206[654];
                                if ((unint64_t)v208 >= v209)
                                {
                                  uint64_t v211 = (uint64_t *)v206[652];
                                  uint64_t v212 = v208 - v211;
                                  if ((unint64_t)(v212 + 1) >> 61) {
                                    goto LABEL_339;
                                  }
                                  unint64_t v213 = v209 - (void)v211;
                                  unint64_t v214 = (uint64_t)(v209 - (void)v211) >> 2;
                                  if (v214 <= v212 + 1) {
                                    unint64_t v214 = v212 + 1;
                                  }
                                  if (v213 >= 0x7FFFFFFFFFFFFFF8) {
                                    unint64_t v215 = 0x1FFFFFFFFFFFFFFFLL;
                                  }
                                  else {
                                    unint64_t v215 = v214;
                                  }
                                  if (v215)
                                  {
                                    uint64_t v216 = (char *)sub_5714((uint64_t)(v206 + 654), v215);
                                    unsigned int v208 = (uint64_t *)v206[653];
                                    uint64_t v211 = (uint64_t *)v206[652];
                                  }
                                  else
                                  {
                                    uint64_t v216 = 0;
                                  }
                                  unint64_t v217 = (uint64_t *)&v216[8 * v212];
                                  unint64_t v218 = &v216[8 * v215];
                                  uint64_t *v217 = v207;
                                  unint64_t v210 = v217 + 1;
                                  while (v208 != v211)
                                  {
                                    uint64_t v219 = *--v208;
                                    *--unint64_t v217 = v219;
                                  }
                                  v206[652] = v217;
                                  v206[653] = v210;
                                  v206[654] = v218;
                                  if (v211) {
                                    operator delete(v211);
                                  }
                                }
                                else
                                {
                                  uint64_t *v208 = v207;
                                  unint64_t v210 = v208 + 1;
                                }
                                v206[653] = v210;
                                if (!*(_DWORD *)(v3 + 48))
                                {
                                  unint64_t v220 = *(void **)a1[1];
                                  uint64_t v221 = *(_DWORD *)(a1[2] + 28) & 0x7FFFFLL;
                                  unint64_t v222 = (uint64_t *)v220[656];
                                  unint64_t v223 = v220[657];
                                  if ((unint64_t)v222 >= v223)
                                  {
                                    uint64_t v225 = (uint64_t *)v220[655];
                                    uint64_t v226 = v222 - v225;
                                    if ((unint64_t)(v226 + 1) >> 61) {
                                      goto LABEL_339;
                                    }
                                    unint64_t v227 = v223 - (void)v225;
                                    unint64_t v228 = (uint64_t)(v223 - (void)v225) >> 2;
                                    if (v228 <= v226 + 1) {
                                      unint64_t v228 = v226 + 1;
                                    }
                                    if (v227 >= 0x7FFFFFFFFFFFFFF8) {
                                      unint64_t v229 = 0x1FFFFFFFFFFFFFFFLL;
                                    }
                                    else {
                                      unint64_t v229 = v228;
                                    }
                                    if (v229)
                                    {
                                      uint64_t v230 = (char *)sub_5714((uint64_t)(v220 + 657), v229);
                                      unint64_t v222 = (uint64_t *)v220[656];
                                      uint64_t v225 = (uint64_t *)v220[655];
                                    }
                                    else
                                    {
                                      uint64_t v230 = 0;
                                    }
                                    unint64_t v231 = (uint64_t *)&v230[8 * v226];
                                    unint64_t v232 = &v230[8 * v229];
                                    uint64_t *v231 = v221;
                                    unint64_t v224 = v231 + 1;
                                    while (v222 != v225)
                                    {
                                      uint64_t v233 = *--v222;
                                      *--unint64_t v231 = v233;
                                    }
                                    v220[655] = v231;
                                    v220[656] = v224;
                                    v220[657] = v232;
                                    if (v225) {
                                      operator delete(v225);
                                    }
                                  }
                                  else
                                  {
                                    uint64_t *v222 = v221;
                                    unint64_t v224 = v222 + 1;
                                  }
                                  v220[656] = v224;
                                  if (!*(_DWORD *)(v3 + 48))
                                  {
                                    int v234 = *(void **)a1[1];
                                    uint64_t v235 = *(_DWORD *)(a1[2] + 68) & 0x7FFFFLL;
                                    unint64_t v236 = (uint64_t *)v234[659];
                                    unint64_t v237 = v234[660];
                                    if ((unint64_t)v236 >= v237)
                                    {
                                      uint64_t v239 = (uint64_t *)v234[658];
                                      uint64_t v240 = v236 - v239;
                                      if ((unint64_t)(v240 + 1) >> 61) {
                                        goto LABEL_339;
                                      }
                                      unint64_t v241 = v237 - (void)v239;
                                      unint64_t v242 = (uint64_t)(v237 - (void)v239) >> 2;
                                      if (v242 <= v240 + 1) {
                                        unint64_t v242 = v240 + 1;
                                      }
                                      if (v241 >= 0x7FFFFFFFFFFFFFF8) {
                                        unint64_t v243 = 0x1FFFFFFFFFFFFFFFLL;
                                      }
                                      else {
                                        unint64_t v243 = v242;
                                      }
                                      if (v243)
                                      {
                                        uint64_t v244 = (char *)sub_5714((uint64_t)(v234 + 660), v243);
                                        unint64_t v236 = (uint64_t *)v234[659];
                                        uint64_t v239 = (uint64_t *)v234[658];
                                      }
                                      else
                                      {
                                        uint64_t v244 = 0;
                                      }
                                      unint64_t v245 = (uint64_t *)&v244[8 * v240];
                                      unint64_t v246 = &v244[8 * v243];
                                      uint64_t *v245 = v235;
                                      unint64_t v238 = v245 + 1;
                                      while (v236 != v239)
                                      {
                                        uint64_t v247 = *--v236;
                                        *--unint64_t v245 = v247;
                                      }
                                      v234[658] = v245;
                                      v234[659] = v238;
                                      v234[660] = v246;
                                      if (v239) {
                                        operator delete(v239);
                                      }
                                    }
                                    else
                                    {
                                      uint64_t *v236 = v235;
                                      unint64_t v238 = v236 + 1;
                                    }
                                    v234[659] = v238;
                                    if (!*(_DWORD *)(v3 + 48))
                                    {
                                      unsigned int v248 = *(void **)a1[1];
                                      uint64_t v249 = *(_DWORD *)(a1[2] + 36) & 0x7FFFFLL;
                                      unint64_t v250 = (uint64_t *)v248[662];
                                      unint64_t v251 = v248[663];
                                      if ((unint64_t)v250 >= v251)
                                      {
                                        uint64_t v253 = (uint64_t *)v248[661];
                                        uint64_t v254 = v250 - v253;
                                        if ((unint64_t)(v254 + 1) >> 61) {
                                          goto LABEL_339;
                                        }
                                        unint64_t v255 = v251 - (void)v253;
                                        unint64_t v256 = (uint64_t)(v251 - (void)v253) >> 2;
                                        if (v256 <= v254 + 1) {
                                          unint64_t v256 = v254 + 1;
                                        }
                                        if (v255 >= 0x7FFFFFFFFFFFFFF8) {
                                          unint64_t v257 = 0x1FFFFFFFFFFFFFFFLL;
                                        }
                                        else {
                                          unint64_t v257 = v256;
                                        }
                                        if (v257)
                                        {
                                          uint64_t v258 = (char *)sub_5714((uint64_t)(v248 + 663), v257);
                                          unint64_t v250 = (uint64_t *)v248[662];
                                          uint64_t v253 = (uint64_t *)v248[661];
                                        }
                                        else
                                        {
                                          uint64_t v258 = 0;
                                        }
                                        unint64_t v259 = (uint64_t *)&v258[8 * v254];
                                        unint64_t v260 = &v258[8 * v257];
                                        uint64_t *v259 = v249;
                                        unsigned int v252 = v259 + 1;
                                        while (v250 != v253)
                                        {
                                          uint64_t v261 = *--v250;
                                          *--unint64_t v259 = v261;
                                        }
                                        v248[661] = v259;
                                        v248[662] = v252;
                                        v248[663] = v260;
                                        if (v253) {
                                          operator delete(v253);
                                        }
                                      }
                                      else
                                      {
                                        *unint64_t v250 = v249;
                                        unsigned int v252 = v250 + 1;
                                      }
                                      v248[662] = v252;
                                      if (!*(_DWORD *)(v3 + 48))
                                      {
                                        unsigned int v262 = *(void **)a1[1];
                                        uint64_t v263 = *(_DWORD *)(a1[2] + 76) & 0x7FFFFLL;
                                        unint64_t v264 = (uint64_t *)v262[665];
                                        unint64_t v265 = v262[666];
                                        if ((unint64_t)v264 >= v265)
                                        {
                                          uint64_t v267 = (uint64_t *)v262[664];
                                          uint64_t v268 = v264 - v267;
                                          if ((unint64_t)(v268 + 1) >> 61) {
                                            goto LABEL_339;
                                          }
                                          unint64_t v269 = v265 - (void)v267;
                                          unint64_t v270 = (uint64_t)(v265 - (void)v267) >> 2;
                                          if (v270 <= v268 + 1) {
                                            unint64_t v270 = v268 + 1;
                                          }
                                          if (v269 >= 0x7FFFFFFFFFFFFFF8) {
                                            unint64_t v271 = 0x1FFFFFFFFFFFFFFFLL;
                                          }
                                          else {
                                            unint64_t v271 = v270;
                                          }
                                          if (v271)
                                          {
                                            uint64_t v272 = (char *)sub_5714((uint64_t)(v262 + 666), v271);
                                            unint64_t v264 = (uint64_t *)v262[665];
                                            uint64_t v267 = (uint64_t *)v262[664];
                                          }
                                          else
                                          {
                                            uint64_t v272 = 0;
                                          }
                                          unint64_t v273 = (uint64_t *)&v272[8 * v268];
                                          unint64_t v274 = &v272[8 * v271];
                                          *unint64_t v273 = v263;
                                          unsigned int v266 = v273 + 1;
                                          while (v264 != v267)
                                          {
                                            uint64_t v275 = *--v264;
                                            *--unint64_t v273 = v275;
                                          }
                                          v262[664] = v273;
                                          v262[665] = v266;
                                          v262[666] = v274;
                                          if (v267) {
                                            operator delete(v267);
                                          }
                                        }
                                        else
                                        {
                                          uint64_t *v264 = v263;
                                          unsigned int v266 = v264 + 1;
                                        }
                                        v262[665] = v266;
                                        if (!*(_DWORD *)(v3 + 48))
                                        {
                                          uint64_t v276 = a1[2];
                                          uint64_t v277 = *(void **)a1[1];
                                          uint64_t v278 = *(_DWORD *)(v276 + 100) & 0x7FFFFLL;
                                          uint64_t v279 = (uint64_t *)v277[668];
                                          unint64_t v280 = v277[669];
                                          if ((unint64_t)v279 < v280)
                                          {
                                            *uint64_t v279 = v278;
                                            uint64_t v281 = v279 + 1;
LABEL_346:
                                            v277[668] = v281;
                                            goto LABEL_347;
                                          }
                                          int v282 = (uint64_t *)v277[667];
                                          uint64_t v283 = v279 - v282;
                                          if (!((unint64_t)(v283 + 1) >> 61))
                                          {
                                            unint64_t v284 = v280 - (void)v282;
                                            unint64_t v285 = (uint64_t)(v280 - (void)v282) >> 2;
                                            if (v285 <= v283 + 1) {
                                              unint64_t v285 = v283 + 1;
                                            }
                                            if (v284 >= 0x7FFFFFFFFFFFFFF8) {
                                              unint64_t v286 = 0x1FFFFFFFFFFFFFFFLL;
                                            }
                                            else {
                                              unint64_t v286 = v285;
                                            }
                                            if (v286)
                                            {
                                              unint64_t v287 = (char *)sub_5714((uint64_t)(v277 + 669), v286);
                                              uint64_t v279 = (uint64_t *)v277[668];
                                              int v282 = (uint64_t *)v277[667];
                                            }
                                            else
                                            {
                                              unint64_t v287 = 0;
                                            }
                                            unint64_t v288 = (uint64_t *)&v287[8 * v283];
                                            unint64_t v289 = &v287[8 * v286];
                                            *unint64_t v288 = v278;
                                            uint64_t v281 = v288 + 1;
                                            while (v279 != v282)
                                            {
                                              uint64_t v290 = *--v279;
                                              *--unint64_t v288 = v290;
                                            }
                                            v277[667] = v288;
                                            v277[668] = v281;
                                            v277[669] = v289;
                                            if (v282) {
                                              operator delete(v282);
                                            }
                                            goto LABEL_346;
                                          }
LABEL_339:
                                          sub_566C();
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_347:
    *a2 = 1;
    return;
  }
  if (!*(_DWORD *)(v3 + 48))
  {
    uint64_t v11 = (void *)a1[1];
    uint64_t v10 = (unsigned int *)a1[2];
    uint64_t v12 = (void *)*v11;
    *(void *)(v12[611] - 8) += v10[12] & 0x7FFFF;
    *(void *)(v12[614] - 8) += v10[22] & 0x7FFFF;
    *(void *)(v12[617] - 8) += ((unint64_t)v10[6] >> 1) & 0x7FFFF;
    *(void *)(v12[620] - 8) += v10[16] & 0x7FFFF;
    *(void *)(v12[623] - 8) += v10[8] & 0x7FFFF;
    *(void *)(v12[626] - 8) += v10[18] & 0x7FFFF;
    *(void *)(v12[629] - 8) += v10[11] & 0x7FFFF;
    *(void *)(v12[632] - 8) += v10[21] & 0x7FFFF;
    *(void *)(v12[635] - 8) += v10[10] & 0x7FFFF;
    *(void *)(v12[638] - 8) += v10[20] & 0x7FFFF;
    uint64_t v13 = (_DWORD *)a1[2];
    unint64_t v14 = (void *)*v11;
    *(void *)(v14[641] - 8) += v13[14] & 0x7FFFF;
    *(void *)(v14[644] - 8) += v13[24] & 0x7FFFF;
    *(void *)(v14[647] - 8) += v13[15] & 0x7FFFF;
    *(void *)(v14[650] - 8) += v13[13] & 0x7FFFF;
    *(void *)(v14[653] - 8) += v13[23] & 0x7FFFF;
    *(void *)(v14[656] - 8) += v13[7] & 0x7FFFF;
    *(void *)(v14[659] - 8) += v13[17] & 0x7FFFF;
    *(void *)(v14[662] - 8) += v13[9] & 0x7FFFF;
    *(void *)(v14[665] - 8) += v13[19] & 0x7FFFF;
    *(void *)(v14[668] - 8) += v13[25] & 0x7FFFF;
  }
}

void sub_80E38(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    if (*(_DWORD *)(v3 + 48)) {
      goto LABEL_330;
    }
    uint64_t v5 = *(void **)a1[1];
    uint64_t v6 = *(_WORD *)(a1[2] + 36) & 0x7FFF;
    char v7 = (char *)v5[671];
    unint64_t v8 = v5[672];
    if ((unint64_t)v7 >= v8)
    {
      unint64_t v15 = (char *)v5[670];
      uint64_t v16 = (v7 - v15) >> 3;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_322;
      }
      unint64_t v17 = v8 - (void)v15;
      unint64_t v18 = (uint64_t)(v8 - (void)v15) >> 2;
      if (v18 <= v16 + 1) {
        unint64_t v18 = v16 + 1;
      }
      if (v17 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v18;
      }
      if (v19)
      {
        uint64_t v20 = (char *)sub_5714((uint64_t)(v5 + 672), v19);
        char v7 = (char *)v5[671];
        unint64_t v15 = (char *)v5[670];
      }
      else
      {
        uint64_t v20 = 0;
      }
      uint64_t v21 = &v20[8 * v16];
      uint64_t v22 = &v20[8 * v19];
      *(void *)uint64_t v21 = v6;
      uint64_t v9 = v21 + 8;
      while (v7 != v15)
      {
        uint64_t v23 = *((void *)v7 - 1);
        v7 -= 8;
        *((void *)v21 - 1) = v23;
        v21 -= 8;
      }
      v5[670] = v21;
      v5[671] = v9;
      v5[672] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)char v7 = v6;
      uint64_t v9 = v7 + 8;
    }
    v5[671] = v9;
    if (!*(_DWORD *)(v3 + 48))
    {
      unint64_t v24 = *(void **)a1[1];
      uint64_t v25 = *(_DWORD *)(a1[2] + 68) & 0x7FFFFLL;
      uint8x8_t v26 = (uint64_t *)v24[674];
      unint64_t v27 = v24[675];
      if ((unint64_t)v26 >= v27)
      {
        unint64_t v29 = (uint64_t *)v24[673];
        uint64_t v30 = v26 - v29;
        if ((unint64_t)(v30 + 1) >> 61) {
          goto LABEL_322;
        }
        unint64_t v31 = v27 - (void)v29;
        unint64_t v32 = (uint64_t)(v27 - (void)v29) >> 2;
        if (v32 <= v30 + 1) {
          unint64_t v32 = v30 + 1;
        }
        if (v31 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v33 = v32;
        }
        if (v33)
        {
          uint64_t v34 = (char *)sub_5714((uint64_t)(v24 + 675), v33);
          uint8x8_t v26 = (uint64_t *)v24[674];
          unint64_t v29 = (uint64_t *)v24[673];
        }
        else
        {
          uint64_t v34 = 0;
        }
        uint64_t v35 = (uint64_t *)&v34[8 * v30];
        uint64_t v36 = &v34[8 * v33];
        uint64_t *v35 = v25;
        unint64_t v28 = v35 + 1;
        while (v26 != v29)
        {
          uint64_t v37 = *--v26;
          *--uint64_t v35 = v37;
        }
        v24[673] = v35;
        v24[674] = v28;
        v24[675] = v36;
        if (v29) {
          operator delete(v29);
        }
      }
      else
      {
        uint64_t *v26 = v25;
        unint64_t v28 = v26 + 1;
      }
      v24[674] = v28;
      if (!*(_DWORD *)(v3 + 48))
      {
        unint64_t v38 = *(void **)a1[1];
        uint64_t v39 = *(_WORD *)(a1[2] + 42) & 0x7FFF;
        uint64_t v40 = (char *)v38[677];
        unint64_t v41 = v38[678];
        if ((unint64_t)v40 >= v41)
        {
          unint64_t v43 = (char *)v38[676];
          uint64_t v44 = (v40 - v43) >> 3;
          if ((unint64_t)(v44 + 1) >> 61) {
            goto LABEL_322;
          }
          unint64_t v45 = v41 - (void)v43;
          unint64_t v46 = (uint64_t)(v41 - (void)v43) >> 2;
          if (v46 <= v44 + 1) {
            unint64_t v46 = v44 + 1;
          }
          if (v45 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v47 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v47 = v46;
          }
          if (v47)
          {
            uint64_t v48 = (char *)sub_5714((uint64_t)(v38 + 678), v47);
            uint64_t v40 = (char *)v38[677];
            unint64_t v43 = (char *)v38[676];
          }
          else
          {
            uint64_t v48 = 0;
          }
          uint64_t v49 = &v48[8 * v44];
          unint64_t v50 = &v48[8 * v47];
          *(void *)uint64_t v49 = v39;
          unint64_t v42 = v49 + 8;
          while (v40 != v43)
          {
            uint64_t v51 = *((void *)v40 - 1);
            v40 -= 8;
            *((void *)v49 - 1) = v51;
            v49 -= 8;
          }
          v38[676] = v49;
          v38[677] = v42;
          v38[678] = v50;
          if (v43) {
            operator delete(v43);
          }
        }
        else
        {
          *(void *)uint64_t v40 = v39;
          unint64_t v42 = v40 + 8;
        }
        v38[677] = v42;
        if (!*(_DWORD *)(v3 + 48))
        {
          uint64_t v52 = *(void **)a1[1];
          uint64_t v53 = (unsigned __int16)*(_DWORD *)(a1[2] + 24) >> 1;
          unint64_t v54 = (char *)v52[680];
          unint64_t v55 = v52[681];
          if ((unint64_t)v54 >= v55)
          {
            unint64_t v57 = (char *)v52[679];
            uint64_t v58 = (v54 - v57) >> 3;
            if ((unint64_t)(v58 + 1) >> 61) {
              goto LABEL_322;
            }
            unint64_t v59 = v55 - (void)v57;
            unint64_t v60 = (uint64_t)(v55 - (void)v57) >> 2;
            if (v60 <= v58 + 1) {
              unint64_t v60 = v58 + 1;
            }
            if (v59 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v61 = v60;
            }
            if (v61)
            {
              unint64_t v62 = (char *)sub_5714((uint64_t)(v52 + 681), v61);
              unint64_t v54 = (char *)v52[680];
              unint64_t v57 = (char *)v52[679];
            }
            else
            {
              unint64_t v62 = 0;
            }
            unint64_t v63 = &v62[8 * v58];
            unint64_t v64 = &v62[8 * v61];
            *(void *)unint64_t v63 = v53;
            uint64_t v56 = v63 + 8;
            while (v54 != v57)
            {
              uint64_t v65 = *((void *)v54 - 1);
              v54 -= 8;
              *((void *)v63 - 1) = v65;
              v63 -= 8;
            }
            v52[679] = v63;
            v52[680] = v56;
            v52[681] = v64;
            if (v57) {
              operator delete(v57);
            }
          }
          else
          {
            *(void *)unint64_t v54 = v53;
            uint64_t v56 = v54 + 8;
          }
          v52[680] = v56;
          if (!*(_DWORD *)(v3 + 48))
          {
            uint64_t v66 = *(void **)a1[1];
            uint64_t v67 = *(_DWORD *)(a1[2] + 44) & 0x7FFFFLL;
            uint64_t v68 = (uint64_t *)v66[683];
            unint64_t v69 = v66[684];
            if ((unint64_t)v68 >= v69)
            {
              unint64_t v71 = (uint64_t *)v66[682];
              uint64_t v72 = v68 - v71;
              if ((unint64_t)(v72 + 1) >> 61) {
                goto LABEL_322;
              }
              unint64_t v73 = v69 - (void)v71;
              unint64_t v74 = (uint64_t)(v69 - (void)v71) >> 2;
              if (v74 <= v72 + 1) {
                unint64_t v74 = v72 + 1;
              }
              if (v73 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v75 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v75 = v74;
              }
              if (v75)
              {
                unint64_t v76 = (char *)sub_5714((uint64_t)(v66 + 684), v75);
                uint64_t v68 = (uint64_t *)v66[683];
                unint64_t v71 = (uint64_t *)v66[682];
              }
              else
              {
                unint64_t v76 = 0;
              }
              uint64_t v77 = (uint64_t *)&v76[8 * v72];
              unint64_t v78 = &v76[8 * v75];
              *uint64_t v77 = v67;
              uint64_t v70 = v77 + 1;
              while (v68 != v71)
              {
                uint64_t v79 = *--v68;
                *--uint64_t v77 = v79;
              }
              v66[682] = v77;
              v66[683] = v70;
              v66[684] = v78;
              if (v71) {
                operator delete(v71);
              }
            }
            else
            {
              *uint64_t v68 = v67;
              uint64_t v70 = v68 + 1;
            }
            v66[683] = v70;
            if (!*(_DWORD *)(v3 + 48))
            {
              uint64_t v80 = *(void **)a1[1];
              uint64_t v81 = *(_WORD *)(a1[2] + 28) & 0x7FFF;
              uint64_t v82 = (char *)v80[686];
              unint64_t v83 = v80[687];
              if ((unint64_t)v82 >= v83)
              {
                unint64_t v85 = (char *)v80[685];
                uint64_t v86 = (v82 - v85) >> 3;
                if ((unint64_t)(v86 + 1) >> 61) {
                  goto LABEL_322;
                }
                unint64_t v87 = v83 - (void)v85;
                unint64_t v88 = (uint64_t)(v83 - (void)v85) >> 2;
                if (v88 <= v86 + 1) {
                  unint64_t v88 = v86 + 1;
                }
                if (v87 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v89 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v89 = v88;
                }
                if (v89)
                {
                  uint64_t v90 = (char *)sub_5714((uint64_t)(v80 + 687), v89);
                  uint64_t v82 = (char *)v80[686];
                  unint64_t v85 = (char *)v80[685];
                }
                else
                {
                  uint64_t v90 = 0;
                }
                uint64_t v91 = &v90[8 * v86];
                uint64_t v92 = &v90[8 * v89];
                *(void *)uint64_t v91 = v81;
                uint64_t v84 = v91 + 8;
                while (v82 != v85)
                {
                  uint64_t v93 = *((void *)v82 - 1);
                  v82 -= 8;
                  *((void *)v91 - 1) = v93;
                  v91 -= 8;
                }
                v80[685] = v91;
                v80[686] = v84;
                v80[687] = v92;
                if (v85) {
                  operator delete(v85);
                }
              }
              else
              {
                *(void *)uint64_t v82 = v81;
                uint64_t v84 = v82 + 8;
              }
              v80[686] = v84;
              if (!*(_DWORD *)(v3 + 48))
              {
                uint64_t v94 = *(void **)a1[1];
                uint64_t v95 = *(_DWORD *)(a1[2] + 52) & 0x7FFFFLL;
                unint64_t v96 = (uint64_t *)v94[689];
                unint64_t v97 = v94[690];
                if ((unint64_t)v96 >= v97)
                {
                  uint64_t v99 = (uint64_t *)v94[688];
                  uint64_t v100 = v96 - v99;
                  if ((unint64_t)(v100 + 1) >> 61) {
                    goto LABEL_322;
                  }
                  unint64_t v101 = v97 - (void)v99;
                  unint64_t v102 = (uint64_t)(v97 - (void)v99) >> 2;
                  if (v102 <= v100 + 1) {
                    unint64_t v102 = v100 + 1;
                  }
                  if (v101 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v103 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v103 = v102;
                  }
                  if (v103)
                  {
                    uint64_t v104 = (char *)sub_5714((uint64_t)(v94 + 690), v103);
                    unint64_t v96 = (uint64_t *)v94[689];
                    uint64_t v99 = (uint64_t *)v94[688];
                  }
                  else
                  {
                    uint64_t v104 = 0;
                  }
                  uint64_t v105 = (uint64_t *)&v104[8 * v100];
                  uint64_t v106 = &v104[8 * v103];
                  *uint64_t v105 = v95;
                  uint64_t v98 = v105 + 1;
                  while (v96 != v99)
                  {
                    uint64_t v107 = *--v96;
                    *--uint64_t v105 = v107;
                  }
                  v94[688] = v105;
                  v94[689] = v98;
                  v94[690] = v106;
                  if (v99) {
                    operator delete(v99);
                  }
                }
                else
                {
                  uint64_t *v96 = v95;
                  uint64_t v98 = v96 + 1;
                }
                v94[689] = v98;
                if (!*(_DWORD *)(v3 + 48))
                {
                  uint64_t v108 = *(void **)a1[1];
                  uint64_t v109 = *(_WORD *)(a1[2] + 34) & 0x7FFF;
                  unint64_t v110 = (char *)v108[692];
                  unint64_t v111 = v108[693];
                  if ((unint64_t)v110 >= v111)
                  {
                    uint64_t v113 = (char *)v108[691];
                    uint64_t v114 = (v110 - v113) >> 3;
                    if ((unint64_t)(v114 + 1) >> 61) {
                      goto LABEL_322;
                    }
                    unint64_t v115 = v111 - (void)v113;
                    unint64_t v116 = (uint64_t)(v111 - (void)v113) >> 2;
                    if (v116 <= v114 + 1) {
                      unint64_t v116 = v114 + 1;
                    }
                    if (v115 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v117 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v117 = v116;
                    }
                    if (v117)
                    {
                      uint64_t v118 = (char *)sub_5714((uint64_t)(v108 + 693), v117);
                      unint64_t v110 = (char *)v108[692];
                      uint64_t v113 = (char *)v108[691];
                    }
                    else
                    {
                      uint64_t v118 = 0;
                    }
                    unint64_t v119 = &v118[8 * v114];
                    uint64_t v120 = &v118[8 * v117];
                    *(void *)unint64_t v119 = v109;
                    uint64_t v112 = v119 + 8;
                    while (v110 != v113)
                    {
                      uint64_t v121 = *((void *)v110 - 1);
                      v110 -= 8;
                      *((void *)v119 - 1) = v121;
                      v119 -= 8;
                    }
                    v108[691] = v119;
                    v108[692] = v112;
                    v108[693] = v120;
                    if (v113) {
                      operator delete(v113);
                    }
                  }
                  else
                  {
                    *(void *)unint64_t v110 = v109;
                    uint64_t v112 = v110 + 8;
                  }
                  v108[692] = v112;
                  if (!*(_DWORD *)(v3 + 48))
                  {
                    uint64_t v122 = *(void **)a1[1];
                    uint64_t v123 = *(_DWORD *)(a1[2] + 64) & 0x7FFFFLL;
                    unint64_t v124 = (uint64_t *)v122[695];
                    unint64_t v125 = v122[696];
                    if ((unint64_t)v124 >= v125)
                    {
                      uint64_t v127 = (uint64_t *)v122[694];
                      uint64_t v128 = v124 - v127;
                      if ((unint64_t)(v128 + 1) >> 61) {
                        goto LABEL_322;
                      }
                      unint64_t v129 = v125 - (void)v127;
                      unint64_t v130 = (uint64_t)(v125 - (void)v127) >> 2;
                      if (v130 <= v128 + 1) {
                        unint64_t v130 = v128 + 1;
                      }
                      if (v129 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v131 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v131 = v130;
                      }
                      if (v131)
                      {
                        unint64_t v132 = (char *)sub_5714((uint64_t)(v122 + 696), v131);
                        unint64_t v124 = (uint64_t *)v122[695];
                        uint64_t v127 = (uint64_t *)v122[694];
                      }
                      else
                      {
                        unint64_t v132 = 0;
                      }
                      unint64_t v133 = (uint64_t *)&v132[8 * v128];
                      uint64_t v134 = &v132[8 * v131];
                      uint64_t *v133 = v123;
                      unint64_t v126 = v133 + 1;
                      while (v124 != v127)
                      {
                        uint64_t v135 = *--v124;
                        *--unint64_t v133 = v135;
                      }
                      v122[694] = v133;
                      v122[695] = v126;
                      v122[696] = v134;
                      if (v127) {
                        operator delete(v127);
                      }
                    }
                    else
                    {
                      uint64_t *v124 = v123;
                      unint64_t v126 = v124 + 1;
                    }
                    v122[695] = v126;
                    if (!*(_DWORD *)(v3 + 48))
                    {
                      unint64_t v136 = *(void **)a1[1];
                      uint64_t v137 = *(_WORD *)(a1[2] + 32) & 0x7FFF;
                      unint64_t v138 = (char *)v136[698];
                      unint64_t v139 = v136[699];
                      if ((unint64_t)v138 >= v139)
                      {
                        uint64_t v141 = (char *)v136[697];
                        uint64_t v142 = (v138 - v141) >> 3;
                        if ((unint64_t)(v142 + 1) >> 61) {
                          goto LABEL_322;
                        }
                        unint64_t v143 = v139 - (void)v141;
                        unint64_t v144 = (uint64_t)(v139 - (void)v141) >> 2;
                        if (v144 <= v142 + 1) {
                          unint64_t v144 = v142 + 1;
                        }
                        if (v143 >= 0x7FFFFFFFFFFFFFF8) {
                          unint64_t v145 = 0x1FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v145 = v144;
                        }
                        if (v145)
                        {
                          uint64_t v146 = (char *)sub_5714((uint64_t)(v136 + 699), v145);
                          unint64_t v138 = (char *)v136[698];
                          uint64_t v141 = (char *)v136[697];
                        }
                        else
                        {
                          uint64_t v146 = 0;
                        }
                        unint64_t v147 = &v146[8 * v142];
                        unint64_t v148 = &v146[8 * v145];
                        *(void *)unint64_t v147 = v137;
                        uint64_t v140 = v147 + 8;
                        while (v138 != v141)
                        {
                          uint64_t v149 = *((void *)v138 - 1);
                          v138 -= 8;
                          *((void *)v147 - 1) = v149;
                          v147 -= 8;
                        }
                        v136[697] = v147;
                        v136[698] = v140;
                        v136[699] = v148;
                        if (v141) {
                          operator delete(v141);
                        }
                      }
                      else
                      {
                        *(void *)unint64_t v138 = v137;
                        uint64_t v140 = v138 + 8;
                      }
                      v136[698] = v140;
                      if (!*(_DWORD *)(v3 + 48))
                      {
                        uint64_t v150 = *(void **)a1[1];
                        uint64_t v151 = *(_DWORD *)(a1[2] + 60) & 0x7FFFFLL;
                        uint64_t v152 = (uint64_t *)v150[701];
                        unint64_t v153 = v150[702];
                        if ((unint64_t)v152 >= v153)
                        {
                          uint64_t v155 = (uint64_t *)v150[700];
                          uint64_t v156 = v152 - v155;
                          if ((unint64_t)(v156 + 1) >> 61) {
                            goto LABEL_322;
                          }
                          unint64_t v157 = v153 - (void)v155;
                          unint64_t v158 = (uint64_t)(v153 - (void)v155) >> 2;
                          if (v158 <= v156 + 1) {
                            unint64_t v158 = v156 + 1;
                          }
                          if (v157 >= 0x7FFFFFFFFFFFFFF8) {
                            unint64_t v159 = 0x1FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v159 = v158;
                          }
                          if (v159)
                          {
                            unint64_t v160 = (char *)sub_5714((uint64_t)(v150 + 702), v159);
                            uint64_t v152 = (uint64_t *)v150[701];
                            uint64_t v155 = (uint64_t *)v150[700];
                          }
                          else
                          {
                            unint64_t v160 = 0;
                          }
                          unint64_t v161 = (uint64_t *)&v160[8 * v156];
                          unint64_t v162 = &v160[8 * v159];
                          uint64_t *v161 = v151;
                          unint64_t v154 = v161 + 1;
                          while (v152 != v155)
                          {
                            uint64_t v163 = *--v152;
                            *--unint64_t v161 = v163;
                          }
                          v150[700] = v161;
                          v150[701] = v154;
                          v150[702] = v162;
                          if (v155) {
                            operator delete(v155);
                          }
                        }
                        else
                        {
                          *uint64_t v152 = v151;
                          unint64_t v154 = v152 + 1;
                        }
                        v150[701] = v154;
                        if (!*(_DWORD *)(v3 + 48))
                        {
                          uint64_t v164 = *(void **)a1[1];
                          uint64_t v165 = *(_WORD *)(a1[2] + 40) & 0x7FFF;
                          unint64_t v166 = (char *)v164[704];
                          unint64_t v167 = v164[705];
                          if ((unint64_t)v166 >= v167)
                          {
                            uint64_t v169 = (char *)v164[703];
                            uint64_t v170 = (v166 - v169) >> 3;
                            if ((unint64_t)(v170 + 1) >> 61) {
                              goto LABEL_322;
                            }
                            unint64_t v171 = v167 - (void)v169;
                            unint64_t v172 = (uint64_t)(v167 - (void)v169) >> 2;
                            if (v172 <= v170 + 1) {
                              unint64_t v172 = v170 + 1;
                            }
                            if (v171 >= 0x7FFFFFFFFFFFFFF8) {
                              unint64_t v173 = 0x1FFFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v173 = v172;
                            }
                            if (v173)
                            {
                              uint64_t v174 = (char *)sub_5714((uint64_t)(v164 + 705), v173);
                              unint64_t v166 = (char *)v164[704];
                              uint64_t v169 = (char *)v164[703];
                            }
                            else
                            {
                              uint64_t v174 = 0;
                            }
                            uint64_t v175 = &v174[8 * v170];
                            unint64_t v176 = &v174[8 * v173];
                            *(void *)uint64_t v175 = v165;
                            unint64_t v168 = v175 + 8;
                            while (v166 != v169)
                            {
                              uint64_t v177 = *((void *)v166 - 1);
                              v166 -= 8;
                              *((void *)v175 - 1) = v177;
                              v175 -= 8;
                            }
                            v164[703] = v175;
                            v164[704] = v168;
                            v164[705] = v176;
                            if (v169) {
                              operator delete(v169);
                            }
                          }
                          else
                          {
                            *(void *)unint64_t v166 = v165;
                            unint64_t v168 = v166 + 8;
                          }
                          v164[704] = v168;
                          if (!*(_DWORD *)(v3 + 48))
                          {
                            unsigned int v178 = *(void **)a1[1];
                            uint64_t v179 = *(_DWORD *)(a1[2] + 76) & 0x7FFFFLL;
                            uint64_t v180 = (uint64_t *)v178[707];
                            unint64_t v181 = v178[708];
                            if ((unint64_t)v180 >= v181)
                            {
                              unint64_t v183 = (uint64_t *)v178[706];
                              uint64_t v184 = v180 - v183;
                              if ((unint64_t)(v184 + 1) >> 61) {
                                goto LABEL_322;
                              }
                              unint64_t v185 = v181 - (void)v183;
                              unint64_t v186 = (uint64_t)(v181 - (void)v183) >> 2;
                              if (v186 <= v184 + 1) {
                                unint64_t v186 = v184 + 1;
                              }
                              if (v185 >= 0x7FFFFFFFFFFFFFF8) {
                                unint64_t v187 = 0x1FFFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v187 = v186;
                              }
                              if (v187)
                              {
                                uint64_t v188 = (char *)sub_5714((uint64_t)(v178 + 708), v187);
                                uint64_t v180 = (uint64_t *)v178[707];
                                unint64_t v183 = (uint64_t *)v178[706];
                              }
                              else
                              {
                                uint64_t v188 = 0;
                              }
                              unint64_t v189 = (uint64_t *)&v188[8 * v184];
                              uint64_t v190 = &v188[8 * v187];
                              uint64_t *v189 = v179;
                              unint64_t v182 = v189 + 1;
                              while (v180 != v183)
                              {
                                uint64_t v191 = *--v180;
                                *--unint64_t v189 = v191;
                              }
                              v178[706] = v189;
                              v178[707] = v182;
                              v178[708] = v190;
                              if (v183) {
                                operator delete(v183);
                              }
                            }
                            else
                            {
                              uint64_t *v180 = v179;
                              unint64_t v182 = v180 + 1;
                            }
                            v178[707] = v182;
                            if (!*(_DWORD *)(v3 + 48))
                            {
                              unint64_t v192 = *(void **)a1[1];
                              uint64_t v193 = *(_WORD *)(a1[2] + 38) & 0x7FFF;
                              unsigned __int16 v194 = (char *)v192[710];
                              unint64_t v195 = v192[711];
                              if ((unint64_t)v194 >= v195)
                              {
                                unint64_t v197 = (char *)v192[709];
                                uint64_t v198 = (v194 - v197) >> 3;
                                if ((unint64_t)(v198 + 1) >> 61) {
                                  goto LABEL_322;
                                }
                                unint64_t v199 = v195 - (void)v197;
                                unint64_t v200 = (uint64_t)(v195 - (void)v197) >> 2;
                                if (v200 <= v198 + 1) {
                                  unint64_t v200 = v198 + 1;
                                }
                                if (v199 >= 0x7FFFFFFFFFFFFFF8) {
                                  unint64_t v201 = 0x1FFFFFFFFFFFFFFFLL;
                                }
                                else {
                                  unint64_t v201 = v200;
                                }
                                if (v201)
                                {
                                  uint64_t v202 = (char *)sub_5714((uint64_t)(v192 + 711), v201);
                                  unsigned __int16 v194 = (char *)v192[710];
                                  unint64_t v197 = (char *)v192[709];
                                }
                                else
                                {
                                  uint64_t v202 = 0;
                                }
                                unint64_t v203 = &v202[8 * v198];
                                unint64_t v204 = &v202[8 * v201];
                                *(void *)unint64_t v203 = v193;
                                unint64_t v196 = v203 + 8;
                                while (v194 != v197)
                                {
                                  uint64_t v205 = *((void *)v194 - 1);
                                  v194 -= 8;
                                  *((void *)v203 - 1) = v205;
                                  v203 -= 8;
                                }
                                v192[709] = v203;
                                v192[710] = v196;
                                v192[711] = v204;
                                if (v197) {
                                  operator delete(v197);
                                }
                              }
                              else
                              {
                                *(void *)unsigned __int16 v194 = v193;
                                unint64_t v196 = v194 + 8;
                              }
                              v192[710] = v196;
                              if (!*(_DWORD *)(v3 + 48))
                              {
                                uint64_t v206 = *(void **)a1[1];
                                uint64_t v207 = *(_DWORD *)(a1[2] + 72) & 0x7FFFFLL;
                                unsigned int v208 = (uint64_t *)v206[713];
                                unint64_t v209 = v206[714];
                                if ((unint64_t)v208 >= v209)
                                {
                                  uint64_t v211 = (uint64_t *)v206[712];
                                  uint64_t v212 = v208 - v211;
                                  if ((unint64_t)(v212 + 1) >> 61) {
                                    goto LABEL_322;
                                  }
                                  unint64_t v213 = v209 - (void)v211;
                                  unint64_t v214 = (uint64_t)(v209 - (void)v211) >> 2;
                                  if (v214 <= v212 + 1) {
                                    unint64_t v214 = v212 + 1;
                                  }
                                  if (v213 >= 0x7FFFFFFFFFFFFFF8) {
                                    unint64_t v215 = 0x1FFFFFFFFFFFFFFFLL;
                                  }
                                  else {
                                    unint64_t v215 = v214;
                                  }
                                  if (v215)
                                  {
                                    uint64_t v216 = (char *)sub_5714((uint64_t)(v206 + 714), v215);
                                    unsigned int v208 = (uint64_t *)v206[713];
                                    uint64_t v211 = (uint64_t *)v206[712];
                                  }
                                  else
                                  {
                                    uint64_t v216 = 0;
                                  }
                                  unint64_t v217 = (uint64_t *)&v216[8 * v212];
                                  unint64_t v218 = &v216[8 * v215];
                                  uint64_t *v217 = v207;
                                  unint64_t v210 = v217 + 1;
                                  while (v208 != v211)
                                  {
                                    uint64_t v219 = *--v208;
                                    *--unint64_t v217 = v219;
                                  }
                                  v206[712] = v217;
                                  v206[713] = v210;
                                  v206[714] = v218;
                                  if (v211) {
                                    operator delete(v211);
                                  }
                                }
                                else
                                {
                                  uint64_t *v208 = v207;
                                  unint64_t v210 = v208 + 1;
                                }
                                v206[713] = v210;
                                if (!*(_DWORD *)(v3 + 48))
                                {
                                  unint64_t v220 = *(void **)a1[1];
                                  uint64_t v221 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
                                  unint64_t v222 = (char *)v220[716];
                                  unint64_t v223 = v220[717];
                                  if ((unint64_t)v222 >= v223)
                                  {
                                    uint64_t v225 = (char *)v220[715];
                                    uint64_t v226 = (v222 - v225) >> 3;
                                    if ((unint64_t)(v226 + 1) >> 61) {
                                      goto LABEL_322;
                                    }
                                    unint64_t v227 = v223 - (void)v225;
                                    unint64_t v228 = (uint64_t)(v223 - (void)v225) >> 2;
                                    if (v228 <= v226 + 1) {
                                      unint64_t v228 = v226 + 1;
                                    }
                                    if (v227 >= 0x7FFFFFFFFFFFFFF8) {
                                      unint64_t v229 = 0x1FFFFFFFFFFFFFFFLL;
                                    }
                                    else {
                                      unint64_t v229 = v228;
                                    }
                                    if (v229)
                                    {
                                      uint64_t v230 = (char *)sub_5714((uint64_t)(v220 + 717), v229);
                                      unint64_t v222 = (char *)v220[716];
                                      uint64_t v225 = (char *)v220[715];
                                    }
                                    else
                                    {
                                      uint64_t v230 = 0;
                                    }
                                    unint64_t v231 = &v230[8 * v226];
                                    unint64_t v232 = &v230[8 * v229];
                                    *(void *)unint64_t v231 = v221;
                                    unint64_t v224 = v231 + 8;
                                    while (v222 != v225)
                                    {
                                      uint64_t v233 = *((void *)v222 - 1);
                                      v222 -= 8;
                                      *((void *)v231 - 1) = v233;
                                      v231 -= 8;
                                    }
                                    v220[715] = v231;
                                    v220[716] = v224;
                                    v220[717] = v232;
                                    if (v225) {
                                      operator delete(v225);
                                    }
                                  }
                                  else
                                  {
                                    *(void *)unint64_t v222 = v221;
                                    unint64_t v224 = v222 + 8;
                                  }
                                  v220[716] = v224;
                                  if (!*(_DWORD *)(v3 + 48))
                                  {
                                    int v234 = *(void **)a1[1];
                                    uint64_t v235 = *(_DWORD *)(a1[2] + 48) & 0x7FFFFLL;
                                    unint64_t v236 = (uint64_t *)v234[719];
                                    unint64_t v237 = v234[720];
                                    if ((unint64_t)v236 >= v237)
                                    {
                                      uint64_t v239 = (uint64_t *)v234[718];
                                      uint64_t v240 = v236 - v239;
                                      if ((unint64_t)(v240 + 1) >> 61) {
                                        goto LABEL_322;
                                      }
                                      unint64_t v241 = v237 - (void)v239;
                                      unint64_t v242 = (uint64_t)(v237 - (void)v239) >> 2;
                                      if (v242 <= v240 + 1) {
                                        unint64_t v242 = v240 + 1;
                                      }
                                      if (v241 >= 0x7FFFFFFFFFFFFFF8) {
                                        unint64_t v243 = 0x1FFFFFFFFFFFFFFFLL;
                                      }
                                      else {
                                        unint64_t v243 = v242;
                                      }
                                      if (v243)
                                      {
                                        uint64_t v244 = (char *)sub_5714((uint64_t)(v234 + 720), v243);
                                        unint64_t v236 = (uint64_t *)v234[719];
                                        uint64_t v239 = (uint64_t *)v234[718];
                                      }
                                      else
                                      {
                                        uint64_t v244 = 0;
                                      }
                                      unint64_t v245 = (uint64_t *)&v244[8 * v240];
                                      unint64_t v246 = &v244[8 * v243];
                                      uint64_t *v245 = v235;
                                      unint64_t v238 = v245 + 1;
                                      while (v236 != v239)
                                      {
                                        uint64_t v247 = *--v236;
                                        *--unint64_t v245 = v247;
                                      }
                                      v234[718] = v245;
                                      v234[719] = v238;
                                      v234[720] = v246;
                                      if (v239) {
                                        operator delete(v239);
                                      }
                                    }
                                    else
                                    {
                                      uint64_t *v236 = v235;
                                      unint64_t v238 = v236 + 1;
                                    }
                                    v234[719] = v238;
                                    if (!*(_DWORD *)(v3 + 48))
                                    {
                                      unsigned int v248 = *(void **)a1[1];
                                      uint64_t v249 = *(_WORD *)(a1[2] + 30) & 0x7FFF;
                                      unint64_t v250 = (char *)v248[722];
                                      unint64_t v251 = v248[723];
                                      if ((unint64_t)v250 >= v251)
                                      {
                                        uint64_t v253 = (char *)v248[721];
                                        uint64_t v254 = (v250 - v253) >> 3;
                                        if ((unint64_t)(v254 + 1) >> 61) {
                                          goto LABEL_322;
                                        }
                                        unint64_t v255 = v251 - (void)v253;
                                        unint64_t v256 = (uint64_t)(v251 - (void)v253) >> 2;
                                        if (v256 <= v254 + 1) {
                                          unint64_t v256 = v254 + 1;
                                        }
                                        if (v255 >= 0x7FFFFFFFFFFFFFF8) {
                                          unint64_t v257 = 0x1FFFFFFFFFFFFFFFLL;
                                        }
                                        else {
                                          unint64_t v257 = v256;
                                        }
                                        if (v257)
                                        {
                                          uint64_t v258 = (char *)sub_5714((uint64_t)(v248 + 723), v257);
                                          unint64_t v250 = (char *)v248[722];
                                          uint64_t v253 = (char *)v248[721];
                                        }
                                        else
                                        {
                                          uint64_t v258 = 0;
                                        }
                                        unint64_t v259 = &v258[8 * v254];
                                        unint64_t v260 = &v258[8 * v257];
                                        *(void *)unint64_t v259 = v249;
                                        unsigned int v252 = v259 + 8;
                                        while (v250 != v253)
                                        {
                                          uint64_t v261 = *((void *)v250 - 1);
                                          v250 -= 8;
                                          *((void *)v259 - 1) = v261;
                                          v259 -= 8;
                                        }
                                        v248[721] = v259;
                                        v248[722] = v252;
                                        v248[723] = v260;
                                        if (v253) {
                                          operator delete(v253);
                                        }
                                      }
                                      else
                                      {
                                        *(void *)unint64_t v250 = v249;
                                        unsigned int v252 = v250 + 8;
                                      }
                                      v248[722] = v252;
                                      if (!*(_DWORD *)(v3 + 48))
                                      {
                                        uint64_t v262 = a1[2];
                                        uint64_t v263 = *(void **)a1[1];
                                        uint64_t v264 = *(_DWORD *)(v262 + 56) & 0x7FFFFLL;
                                        unint64_t v265 = (uint64_t *)v263[725];
                                        unint64_t v266 = v263[726];
                                        if ((unint64_t)v265 < v266)
                                        {
                                          *unint64_t v265 = v264;
                                          uint64_t v267 = v265 + 1;
LABEL_329:
                                          v263[725] = v267;
                                          goto LABEL_330;
                                        }
                                        uint64_t v268 = (uint64_t *)v263[724];
                                        uint64_t v269 = v265 - v268;
                                        if (!((unint64_t)(v269 + 1) >> 61))
                                        {
                                          unint64_t v270 = v266 - (void)v268;
                                          unint64_t v271 = (uint64_t)(v266 - (void)v268) >> 2;
                                          if (v271 <= v269 + 1) {
                                            unint64_t v271 = v269 + 1;
                                          }
                                          if (v270 >= 0x7FFFFFFFFFFFFFF8) {
                                            unint64_t v272 = 0x1FFFFFFFFFFFFFFFLL;
                                          }
                                          else {
                                            unint64_t v272 = v271;
                                          }
                                          if (v272)
                                          {
                                            unint64_t v273 = (char *)sub_5714((uint64_t)(v263 + 726), v272);
                                            unint64_t v265 = (uint64_t *)v263[725];
                                            uint64_t v268 = (uint64_t *)v263[724];
                                          }
                                          else
                                          {
                                            unint64_t v273 = 0;
                                          }
                                          unint64_t v274 = (uint64_t *)&v273[8 * v269];
                                          uint64_t v275 = &v273[8 * v272];
                                          *unint64_t v274 = v264;
                                          uint64_t v267 = v274 + 1;
                                          while (v265 != v268)
                                          {
                                            uint64_t v276 = *--v265;
                                            *--unint64_t v274 = v276;
                                          }
                                          v263[724] = v274;
                                          v263[725] = v267;
                                          v263[726] = v275;
                                          if (v268) {
                                            operator delete(v268);
                                          }
                                          goto LABEL_329;
                                        }
LABEL_322:
                                        sub_566C();
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_330:
    *a2 = 1;
    return;
  }
  if (!*(_DWORD *)(v3 + 48))
  {
    uint64_t v11 = (void *)a1[1];
    uint64_t v10 = a1[2];
    uint64_t v12 = (void *)*v11;
    *(void *)(v12[671] - 8) += *(_WORD *)(v10 + 36) & 0x7FFF;
    *(void *)(v12[674] - 8) += *(_DWORD *)(v10 + 68) & 0x7FFFF;
    *(void *)(v12[677] - 8) += *(_WORD *)(v10 + 42) & 0x7FFF;
    *(void *)(v12[680] - 8) += (unsigned __int16)*(_DWORD *)(v10 + 24) >> 1;
    *(void *)(v12[683] - 8) += *(_DWORD *)(v10 + 44) & 0x7FFFF;
    *(void *)(v12[686] - 8) += *(_WORD *)(v10 + 28) & 0x7FFF;
    *(void *)(v12[689] - 8) += *(_DWORD *)(v10 + 52) & 0x7FFFF;
    *(void *)(v12[692] - 8) += *(_WORD *)(v10 + 34) & 0x7FFF;
    *(void *)(v12[695] - 8) += *(_DWORD *)(v10 + 64) & 0x7FFFF;
    *(void *)(v12[698] - 8) += *(_WORD *)(v10 + 32) & 0x7FFF;
    uint64_t v13 = a1[2];
    unint64_t v14 = (void *)*v11;
    *(void *)(v14[701] - 8) += *(_DWORD *)(v13 + 60) & 0x7FFFF;
    *(void *)(v14[704] - 8) += *(_WORD *)(v13 + 40) & 0x7FFF;
    *(void *)(v14[707] - 8) += *(_DWORD *)(v13 + 76) & 0x7FFFF;
    *(void *)(v14[710] - 8) += *(_WORD *)(v13 + 38) & 0x7FFF;
    *(void *)(v14[713] - 8) += *(_DWORD *)(v13 + 72) & 0x7FFFF;
    *(void *)(v14[716] - 8) += *(_WORD *)(v13 + 26) & 0x7FFF;
    *(void *)(v14[719] - 8) += *(_DWORD *)(v13 + 48) & 0x7FFFF;
    *(void *)(v14[722] - 8) += *(_WORD *)(v13 + 30) & 0x7FFF;
    *(void *)(v14[725] - 8) += *(_DWORD *)(v13 + 56) & 0x7FFFF;
  }
}

void sub_82034(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    if (*(_DWORD *)(v3 + 48)) {
      goto LABEL_91;
    }
    uint64_t v5 = *(void **)a1[1];
    unint64_t v6 = (unint64_t)*(unsigned int *)(a1[2] + 32) >> 17;
    char v7 = (unint64_t *)v5[170];
    unint64_t v8 = v5[171];
    if ((unint64_t)v7 >= v8)
    {
      uint64_t v12 = (unint64_t *)v5[169];
      uint64_t v13 = v7 - v12;
      if ((unint64_t)(v13 + 1) >> 61) {
        goto LABEL_93;
      }
      unint64_t v14 = v8 - (void)v12;
      unint64_t v15 = (uint64_t)(v8 - (void)v12) >> 2;
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      if (v14 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v15;
      }
      if (v16)
      {
        unint64_t v17 = (char *)sub_5714((uint64_t)(v5 + 171), v16);
        char v7 = (unint64_t *)v5[170];
        uint64_t v12 = (unint64_t *)v5[169];
      }
      else
      {
        unint64_t v17 = 0;
      }
      unint64_t v18 = (unint64_t *)&v17[8 * v13];
      unint64_t v19 = &v17[8 * v16];
      *unint64_t v18 = v6;
      uint64_t v9 = v18 + 1;
      while (v7 != v12)
      {
        unint64_t v20 = *--v7;
        *--unint64_t v18 = v20;
      }
      v5[169] = v18;
      v5[170] = v9;
      v5[171] = v19;
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      unint64_t *v7 = v6;
      uint64_t v9 = v7 + 1;
    }
    v5[170] = v9;
    if (!*(_DWORD *)(v3 + 48))
    {
      uint64_t v21 = *(void **)a1[1];
      uint64_t v22 = *(_DWORD *)(a1[2] + 32) & 0x1FFFFLL;
      uint64_t v23 = (uint64_t *)v21[173];
      unint64_t v24 = v21[174];
      if ((unint64_t)v23 >= v24)
      {
        uint8x8_t v26 = (uint64_t *)v21[172];
        uint64_t v27 = v23 - v26;
        if ((unint64_t)(v27 + 1) >> 61) {
          goto LABEL_93;
        }
        unint64_t v28 = v24 - (void)v26;
        unint64_t v29 = (uint64_t)(v24 - (void)v26) >> 2;
        if (v29 <= v27 + 1) {
          unint64_t v29 = v27 + 1;
        }
        if (v28 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v29;
        }
        if (v30)
        {
          unint64_t v31 = (char *)sub_5714((uint64_t)(v21 + 174), v30);
          uint64_t v23 = (uint64_t *)v21[173];
          uint8x8_t v26 = (uint64_t *)v21[172];
        }
        else
        {
          unint64_t v31 = 0;
        }
        unint64_t v32 = (uint64_t *)&v31[8 * v27];
        unint64_t v33 = &v31[8 * v30];
        *unint64_t v32 = v22;
        uint64_t v25 = v32 + 1;
        while (v23 != v26)
        {
          uint64_t v34 = *--v23;
          *--unint64_t v32 = v34;
        }
        v21[172] = v32;
        v21[173] = v25;
        v21[174] = v33;
        if (v26) {
          operator delete(v26);
        }
      }
      else
      {
        *uint64_t v23 = v22;
        uint64_t v25 = v23 + 1;
      }
      v21[173] = v25;
      if (!*(_DWORD *)(v3 + 48))
      {
        uint64_t v35 = *(void **)a1[1];
        uint64_t v36 = *(_DWORD *)(a1[2] + 28) & 0x1FFFFLL;
        uint64_t v37 = (uint64_t *)v35[176];
        unint64_t v38 = v35[177];
        if ((unint64_t)v37 >= v38)
        {
          uint64_t v40 = (uint64_t *)v35[175];
          uint64_t v41 = v37 - v40;
          if ((unint64_t)(v41 + 1) >> 61) {
            goto LABEL_93;
          }
          unint64_t v42 = v38 - (void)v40;
          unint64_t v43 = (uint64_t)(v38 - (void)v40) >> 2;
          if (v43 <= v41 + 1) {
            unint64_t v43 = v41 + 1;
          }
          if (v42 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v44 = v43;
          }
          if (v44)
          {
            unint64_t v45 = (char *)sub_5714((uint64_t)(v35 + 177), v44);
            uint64_t v37 = (uint64_t *)v35[176];
            uint64_t v40 = (uint64_t *)v35[175];
          }
          else
          {
            unint64_t v45 = 0;
          }
          unint64_t v46 = (uint64_t *)&v45[8 * v41];
          unint64_t v47 = &v45[8 * v44];
          *unint64_t v46 = v36;
          uint64_t v39 = v46 + 1;
          while (v37 != v40)
          {
            uint64_t v48 = *--v37;
            *--unint64_t v46 = v48;
          }
          v35[175] = v46;
          v35[176] = v39;
          v35[177] = v47;
          if (v40) {
            operator delete(v40);
          }
        }
        else
        {
          *uint64_t v37 = v36;
          uint64_t v39 = v37 + 1;
        }
        v35[176] = v39;
        if (!*(_DWORD *)(v3 + 48))
        {
          uint64_t v49 = a1[1];
          unint64_t v50 = *(void **)v49;
          uint64_t v51 = *(unsigned __int16 *)(a1[2] + 26);
          uint64_t v52 = *(char **)(*(void *)v49 + 1432);
          unint64_t v53 = *(void *)(*(void *)v49 + 1440);
          if ((unint64_t)v52 >= v53)
          {
            unint64_t v55 = (char *)v50[178];
            uint64_t v56 = (v52 - v55) >> 3;
            if ((unint64_t)(v56 + 1) >> 61) {
              goto LABEL_93;
            }
            unint64_t v57 = v53 - (void)v55;
            unint64_t v58 = (uint64_t)(v53 - (void)v55) >> 2;
            if (v58 <= v56 + 1) {
              unint64_t v58 = v56 + 1;
            }
            if (v57 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v59 = v58;
            }
            if (v59)
            {
              unint64_t v60 = (char *)sub_5714((uint64_t)(v50 + 180), v59);
              uint64_t v52 = (char *)v50[179];
              unint64_t v55 = (char *)v50[178];
            }
            else
            {
              unint64_t v60 = 0;
            }
            unint64_t v61 = &v60[8 * v56];
            unint64_t v62 = &v60[8 * v59];
            *(void *)unint64_t v61 = v51;
            unint64_t v54 = v61 + 8;
            while (v52 != v55)
            {
              uint64_t v63 = *((void *)v52 - 1);
              v52 -= 8;
              *((void *)v61 - 1) = v63;
              v61 -= 8;
            }
            v50[178] = v61;
            v50[179] = v54;
            v50[180] = v62;
            if (v55) {
              operator delete(v55);
            }
          }
          else
          {
            *(void *)uint64_t v52 = v51;
            unint64_t v54 = v52 + 8;
          }
          v50[179] = v54;
          if (!*(_DWORD *)(v3 + 48))
          {
            uint64_t v64 = a1[1];
            uint64_t v65 = a1[2];
            uint64_t v66 = *(void **)v64;
            uint64_t v67 = *(unsigned __int16 *)(v65 + 24);
            uint64_t v68 = *(char **)(*(void *)v64 + 1456);
            unint64_t v69 = *(void *)(*(void *)v64 + 1464);
            if ((unint64_t)v68 < v69)
            {
              *(void *)uint64_t v68 = v67;
              uint64_t v70 = v68 + 8;
LABEL_90:
              v66[182] = v70;
              goto LABEL_91;
            }
            unint64_t v71 = (char *)v66[181];
            uint64_t v72 = (v68 - v71) >> 3;
            if (!((unint64_t)(v72 + 1) >> 61))
            {
              unint64_t v73 = v69 - (void)v71;
              unint64_t v74 = (uint64_t)(v69 - (void)v71) >> 2;
              if (v74 <= v72 + 1) {
                unint64_t v74 = v72 + 1;
              }
              if (v73 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v75 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v75 = v74;
              }
              if (v75)
              {
                unint64_t v76 = (char *)sub_5714((uint64_t)(v66 + 183), v75);
                uint64_t v68 = (char *)v66[182];
                unint64_t v71 = (char *)v66[181];
              }
              else
              {
                unint64_t v76 = 0;
              }
              uint64_t v77 = &v76[8 * v72];
              unint64_t v78 = &v76[8 * v75];
              *(void *)uint64_t v77 = v67;
              uint64_t v70 = v77 + 8;
              while (v68 != v71)
              {
                uint64_t v79 = *((void *)v68 - 1);
                v68 -= 8;
                *((void *)v77 - 1) = v79;
                v77 -= 8;
              }
              v66[181] = v77;
              v66[182] = v70;
              v66[183] = v78;
              if (v71) {
                operator delete(v71);
              }
              goto LABEL_90;
            }
LABEL_93:
            sub_566C();
          }
        }
      }
    }
LABEL_91:
    *a2 = 1;
    return;
  }
  if (!*(_DWORD *)(v3 + 48))
  {
    uint64_t v10 = a1[2];
    uint64_t v11 = *(void **)a1[1];
    *(void *)(v11[170] - 8) += (unint64_t)*(unsigned int *)(v10 + 32) >> 17;
    *(void *)(v11[173] - 8) += *(_DWORD *)(v10 + 32) & 0x1FFFF;
    *(void *)(v11[176] - 8) += *(_DWORD *)(v10 + 28) & 0x1FFFF;
    *(void *)(v11[179] - 8) += *(unsigned __int16 *)(v10 + 26);
    *(void *)(v11[182] - 8) += *(unsigned __int16 *)(v10 + 24);
  }
}

void sub_82500(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    if (*(_DWORD *)(v3 + 48)) {
      goto LABEL_551;
    }
    uint64_t v5 = *(void **)a1[1];
    uint64_t v6 = *(_WORD *)(a1[2] + 82) & 0x1FFF;
    char v7 = (char *)v5[308];
    unint64_t v8 = v5[309];
    if ((unint64_t)v7 >= v8)
    {
      unint64_t v19 = (char *)v5[307];
      uint64_t v20 = (v7 - v19) >> 3;
      if ((unint64_t)(v20 + 1) >> 61) {
        goto LABEL_543;
      }
      unint64_t v21 = v8 - (void)v19;
      unint64_t v22 = (uint64_t)(v8 - (void)v19) >> 2;
      if (v22 <= v20 + 1) {
        unint64_t v22 = v20 + 1;
      }
      if (v21 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v23 = v22;
      }
      if (v23)
      {
        unint64_t v24 = (char *)sub_5714((uint64_t)(v5 + 309), v23);
        char v7 = (char *)v5[308];
        unint64_t v19 = (char *)v5[307];
      }
      else
      {
        unint64_t v24 = 0;
      }
      uint64_t v25 = &v24[8 * v20];
      uint8x8_t v26 = &v24[8 * v23];
      *(void *)uint64_t v25 = v6;
      uint64_t v9 = v25 + 8;
      while (v7 != v19)
      {
        uint64_t v27 = *((void *)v7 - 1);
        v7 -= 8;
        *((void *)v25 - 1) = v27;
        v25 -= 8;
      }
      v5[307] = v25;
      v5[308] = v9;
      v5[309] = v26;
      if (v19) {
        operator delete(v19);
      }
    }
    else
    {
      *(void *)char v7 = v6;
      uint64_t v9 = v7 + 8;
    }
    v5[308] = v9;
    if (!*(_DWORD *)(v3 + 48))
    {
      unint64_t v28 = *(void **)a1[1];
      uint64_t v29 = *(_WORD *)(a1[2] + 66) & 0x1FFF;
      unint64_t v30 = (char *)v28[311];
      unint64_t v31 = v28[312];
      if ((unint64_t)v30 >= v31)
      {
        unint64_t v33 = (char *)v28[310];
        uint64_t v34 = (v30 - v33) >> 3;
        if ((unint64_t)(v34 + 1) >> 61) {
          goto LABEL_543;
        }
        unint64_t v35 = v31 - (void)v33;
        unint64_t v36 = (uint64_t)(v31 - (void)v33) >> 2;
        if (v36 <= v34 + 1) {
          unint64_t v36 = v34 + 1;
        }
        if (v35 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v37 = v36;
        }
        if (v37)
        {
          unint64_t v38 = (char *)sub_5714((uint64_t)(v28 + 312), v37);
          unint64_t v30 = (char *)v28[311];
          unint64_t v33 = (char *)v28[310];
        }
        else
        {
          unint64_t v38 = 0;
        }
        uint64_t v39 = &v38[8 * v34];
        uint64_t v40 = &v38[8 * v37];
        *(void *)uint64_t v39 = v29;
        unint64_t v32 = v39 + 8;
        while (v30 != v33)
        {
          uint64_t v41 = *((void *)v30 - 1);
          v30 -= 8;
          *((void *)v39 - 1) = v41;
          v39 -= 8;
        }
        v28[310] = v39;
        v28[311] = v32;
        v28[312] = v40;
        if (v33) {
          operator delete(v33);
        }
      }
      else
      {
        *(void *)unint64_t v30 = v29;
        unint64_t v32 = v30 + 8;
      }
      v28[311] = v32;
      if (!*(_DWORD *)(v3 + 48))
      {
        unint64_t v42 = *(void **)a1[1];
        uint64_t v43 = *(_WORD *)(a1[2] + 50) & 0x1FFF;
        unint64_t v44 = (char *)v42[314];
        unint64_t v45 = v42[315];
        if ((unint64_t)v44 >= v45)
        {
          unint64_t v47 = (char *)v42[313];
          uint64_t v48 = (v44 - v47) >> 3;
          if ((unint64_t)(v48 + 1) >> 61) {
            goto LABEL_543;
          }
          unint64_t v49 = v45 - (void)v47;
          unint64_t v50 = (uint64_t)(v45 - (void)v47) >> 2;
          if (v50 <= v48 + 1) {
            unint64_t v50 = v48 + 1;
          }
          if (v49 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v51 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v51 = v50;
          }
          if (v51)
          {
            uint64_t v52 = (char *)sub_5714((uint64_t)(v42 + 315), v51);
            unint64_t v44 = (char *)v42[314];
            unint64_t v47 = (char *)v42[313];
          }
          else
          {
            uint64_t v52 = 0;
          }
          unint64_t v53 = &v52[8 * v48];
          unint64_t v54 = &v52[8 * v51];
          *(void *)unint64_t v53 = v43;
          unint64_t v46 = v53 + 8;
          while (v44 != v47)
          {
            uint64_t v55 = *((void *)v44 - 1);
            v44 -= 8;
            *((void *)v53 - 1) = v55;
            v53 -= 8;
          }
          v42[313] = v53;
          v42[314] = v46;
          v42[315] = v54;
          if (v47) {
            operator delete(v47);
          }
        }
        else
        {
          *(void *)unint64_t v44 = v43;
          unint64_t v46 = v44 + 8;
        }
        v42[314] = v46;
        if (!*(_DWORD *)(v3 + 48))
        {
          uint64_t v56 = *(void **)a1[1];
          uint64_t v57 = *(_WORD *)(a1[2] + 34) & 0x1FFF;
          unint64_t v58 = (char *)v56[317];
          unint64_t v59 = v56[318];
          if ((unint64_t)v58 >= v59)
          {
            unint64_t v61 = (char *)v56[316];
            uint64_t v62 = (v58 - v61) >> 3;
            if ((unint64_t)(v62 + 1) >> 61) {
              goto LABEL_543;
            }
            unint64_t v63 = v59 - (void)v61;
            unint64_t v64 = (uint64_t)(v59 - (void)v61) >> 2;
            if (v64 <= v62 + 1) {
              unint64_t v64 = v62 + 1;
            }
            if (v63 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v65 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v65 = v64;
            }
            if (v65)
            {
              uint64_t v66 = (char *)sub_5714((uint64_t)(v56 + 318), v65);
              unint64_t v58 = (char *)v56[317];
              unint64_t v61 = (char *)v56[316];
            }
            else
            {
              uint64_t v66 = 0;
            }
            uint64_t v67 = &v66[8 * v62];
            uint64_t v68 = &v66[8 * v65];
            *(void *)uint64_t v67 = v57;
            unint64_t v60 = v67 + 8;
            while (v58 != v61)
            {
              uint64_t v69 = *((void *)v58 - 1);
              v58 -= 8;
              *((void *)v67 - 1) = v69;
              v67 -= 8;
            }
            v56[316] = v67;
            v56[317] = v60;
            v56[318] = v68;
            if (v61) {
              operator delete(v61);
            }
          }
          else
          {
            *(void *)unint64_t v58 = v57;
            unint64_t v60 = v58 + 8;
          }
          v56[317] = v60;
          if (!*(_DWORD *)(v3 + 48))
          {
            uint64_t v70 = *(void **)a1[1];
            uint64_t v71 = *(_WORD *)(a1[2] + 84) & 0x1FFF;
            uint64_t v72 = (char *)v70[320];
            unint64_t v73 = v70[321];
            if ((unint64_t)v72 >= v73)
            {
              unint64_t v75 = (char *)v70[319];
              uint64_t v76 = (v72 - v75) >> 3;
              if ((unint64_t)(v76 + 1) >> 61) {
                goto LABEL_543;
              }
              unint64_t v77 = v73 - (void)v75;
              unint64_t v78 = (uint64_t)(v73 - (void)v75) >> 2;
              if (v78 <= v76 + 1) {
                unint64_t v78 = v76 + 1;
              }
              if (v77 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v79 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v79 = v78;
              }
              if (v79)
              {
                uint64_t v80 = (char *)sub_5714((uint64_t)(v70 + 321), v79);
                uint64_t v72 = (char *)v70[320];
                unint64_t v75 = (char *)v70[319];
              }
              else
              {
                uint64_t v80 = 0;
              }
              uint64_t v81 = &v80[8 * v76];
              uint64_t v82 = &v80[8 * v79];
              *(void *)uint64_t v81 = v71;
              unint64_t v74 = v81 + 8;
              while (v72 != v75)
              {
                uint64_t v83 = *((void *)v72 - 1);
                v72 -= 8;
                *((void *)v81 - 1) = v83;
                v81 -= 8;
              }
              v70[319] = v81;
              v70[320] = v74;
              v70[321] = v82;
              if (v75) {
                operator delete(v75);
              }
            }
            else
            {
              *(void *)uint64_t v72 = v71;
              unint64_t v74 = v72 + 8;
            }
            v70[320] = v74;
            if (!*(_DWORD *)(v3 + 48))
            {
              uint64_t v84 = *(void **)a1[1];
              uint64_t v85 = *(_WORD *)(a1[2] + 68) & 0x1FFF;
              uint64_t v86 = (char *)v84[323];
              unint64_t v87 = v84[324];
              if ((unint64_t)v86 >= v87)
              {
                unint64_t v89 = (char *)v84[322];
                uint64_t v90 = (v86 - v89) >> 3;
                if ((unint64_t)(v90 + 1) >> 61) {
                  goto LABEL_543;
                }
                unint64_t v91 = v87 - (void)v89;
                unint64_t v92 = (uint64_t)(v87 - (void)v89) >> 2;
                if (v92 <= v90 + 1) {
                  unint64_t v92 = v90 + 1;
                }
                if (v91 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v93 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v93 = v92;
                }
                if (v93)
                {
                  uint64_t v94 = (char *)sub_5714((uint64_t)(v84 + 324), v93);
                  uint64_t v86 = (char *)v84[323];
                  unint64_t v89 = (char *)v84[322];
                }
                else
                {
                  uint64_t v94 = 0;
                }
                uint64_t v95 = &v94[8 * v90];
                unint64_t v96 = &v94[8 * v93];
                *(void *)uint64_t v95 = v85;
                unint64_t v88 = v95 + 8;
                while (v86 != v89)
                {
                  uint64_t v97 = *((void *)v86 - 1);
                  v86 -= 8;
                  *((void *)v95 - 1) = v97;
                  v95 -= 8;
                }
                v84[322] = v95;
                v84[323] = v88;
                v84[324] = v96;
                if (v89) {
                  operator delete(v89);
                }
              }
              else
              {
                *(void *)uint64_t v86 = v85;
                unint64_t v88 = v86 + 8;
              }
              v84[323] = v88;
              if (!*(_DWORD *)(v3 + 48))
              {
                uint64_t v98 = *(void **)a1[1];
                uint64_t v99 = *(_WORD *)(a1[2] + 52) & 0x1FFF;
                uint64_t v100 = (char *)v98[326];
                unint64_t v101 = v98[327];
                if ((unint64_t)v100 >= v101)
                {
                  unint64_t v103 = (char *)v98[325];
                  uint64_t v104 = (v100 - v103) >> 3;
                  if ((unint64_t)(v104 + 1) >> 61) {
                    goto LABEL_543;
                  }
                  unint64_t v105 = v101 - (void)v103;
                  unint64_t v106 = (uint64_t)(v101 - (void)v103) >> 2;
                  if (v106 <= v104 + 1) {
                    unint64_t v106 = v104 + 1;
                  }
                  if (v105 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v107 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v107 = v106;
                  }
                  if (v107)
                  {
                    uint64_t v108 = (char *)sub_5714((uint64_t)(v98 + 327), v107);
                    uint64_t v100 = (char *)v98[326];
                    unint64_t v103 = (char *)v98[325];
                  }
                  else
                  {
                    uint64_t v108 = 0;
                  }
                  uint64_t v109 = &v108[8 * v104];
                  unint64_t v110 = &v108[8 * v107];
                  *(void *)uint64_t v109 = v99;
                  unint64_t v102 = v109 + 8;
                  while (v100 != v103)
                  {
                    uint64_t v111 = *((void *)v100 - 1);
                    v100 -= 8;
                    *((void *)v109 - 1) = v111;
                    v109 -= 8;
                  }
                  v98[325] = v109;
                  v98[326] = v102;
                  v98[327] = v110;
                  if (v103) {
                    operator delete(v103);
                  }
                }
                else
                {
                  *(void *)uint64_t v100 = v99;
                  unint64_t v102 = v100 + 8;
                }
                v98[326] = v102;
                if (!*(_DWORD *)(v3 + 48))
                {
                  uint64_t v112 = *(void **)a1[1];
                  uint64_t v113 = *(_WORD *)(a1[2] + 36) & 0x1FFF;
                  uint64_t v114 = (char *)v112[329];
                  unint64_t v115 = v112[330];
                  if ((unint64_t)v114 >= v115)
                  {
                    unint64_t v117 = (char *)v112[328];
                    uint64_t v118 = (v114 - v117) >> 3;
                    if ((unint64_t)(v118 + 1) >> 61) {
                      goto LABEL_543;
                    }
                    unint64_t v119 = v115 - (void)v117;
                    unint64_t v120 = (uint64_t)(v115 - (void)v117) >> 2;
                    if (v120 <= v118 + 1) {
                      unint64_t v120 = v118 + 1;
                    }
                    if (v119 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v121 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v121 = v120;
                    }
                    if (v121)
                    {
                      uint64_t v122 = (char *)sub_5714((uint64_t)(v112 + 330), v121);
                      uint64_t v114 = (char *)v112[329];
                      unint64_t v117 = (char *)v112[328];
                    }
                    else
                    {
                      uint64_t v122 = 0;
                    }
                    uint64_t v123 = &v122[8 * v118];
                    unint64_t v124 = &v122[8 * v121];
                    *(void *)uint64_t v123 = v113;
                    unint64_t v116 = v123 + 8;
                    while (v114 != v117)
                    {
                      uint64_t v125 = *((void *)v114 - 1);
                      v114 -= 8;
                      *((void *)v123 - 1) = v125;
                      v123 -= 8;
                    }
                    v112[328] = v123;
                    v112[329] = v116;
                    v112[330] = v124;
                    if (v117) {
                      operator delete(v117);
                    }
                  }
                  else
                  {
                    *(void *)uint64_t v114 = v113;
                    unint64_t v116 = v114 + 8;
                  }
                  v112[329] = v116;
                  if (!*(_DWORD *)(v3 + 48))
                  {
                    unint64_t v126 = *(void **)a1[1];
                    uint64_t v127 = *(_WORD *)(a1[2] + 86) & 0x1FFF;
                    uint64_t v128 = (char *)v126[332];
                    unint64_t v129 = v126[333];
                    if ((unint64_t)v128 >= v129)
                    {
                      unint64_t v131 = (char *)v126[331];
                      uint64_t v132 = (v128 - v131) >> 3;
                      if ((unint64_t)(v132 + 1) >> 61) {
                        goto LABEL_543;
                      }
                      unint64_t v133 = v129 - (void)v131;
                      unint64_t v134 = (uint64_t)(v129 - (void)v131) >> 2;
                      if (v134 <= v132 + 1) {
                        unint64_t v134 = v132 + 1;
                      }
                      if (v133 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v135 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v135 = v134;
                      }
                      if (v135)
                      {
                        unint64_t v136 = (char *)sub_5714((uint64_t)(v126 + 333), v135);
                        uint64_t v128 = (char *)v126[332];
                        unint64_t v131 = (char *)v126[331];
                      }
                      else
                      {
                        unint64_t v136 = 0;
                      }
                      uint64_t v137 = &v136[8 * v132];
                      unint64_t v138 = &v136[8 * v135];
                      *(void *)uint64_t v137 = v127;
                      unint64_t v130 = v137 + 8;
                      while (v128 != v131)
                      {
                        uint64_t v139 = *((void *)v128 - 1);
                        v128 -= 8;
                        *((void *)v137 - 1) = v139;
                        v137 -= 8;
                      }
                      v126[331] = v137;
                      v126[332] = v130;
                      v126[333] = v138;
                      if (v131) {
                        operator delete(v131);
                      }
                    }
                    else
                    {
                      *(void *)uint64_t v128 = v127;
                      unint64_t v130 = v128 + 8;
                    }
                    v126[332] = v130;
                    if (!*(_DWORD *)(v3 + 48))
                    {
                      uint64_t v140 = *(void **)a1[1];
                      uint64_t v141 = *(_WORD *)(a1[2] + 70) & 0x1FFF;
                      uint64_t v142 = (char *)v140[335];
                      unint64_t v143 = v140[336];
                      if ((unint64_t)v142 >= v143)
                      {
                        unint64_t v145 = (char *)v140[334];
                        uint64_t v146 = (v142 - v145) >> 3;
                        if ((unint64_t)(v146 + 1) >> 61) {
                          goto LABEL_543;
                        }
                        unint64_t v147 = v143 - (void)v145;
                        unint64_t v148 = (uint64_t)(v143 - (void)v145) >> 2;
                        if (v148 <= v146 + 1) {
                          unint64_t v148 = v146 + 1;
                        }
                        if (v147 >= 0x7FFFFFFFFFFFFFF8) {
                          unint64_t v149 = 0x1FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v149 = v148;
                        }
                        if (v149)
                        {
                          uint64_t v150 = (char *)sub_5714((uint64_t)(v140 + 336), v149);
                          uint64_t v142 = (char *)v140[335];
                          unint64_t v145 = (char *)v140[334];
                        }
                        else
                        {
                          uint64_t v150 = 0;
                        }
                        uint64_t v151 = &v150[8 * v146];
                        uint64_t v152 = &v150[8 * v149];
                        *(void *)uint64_t v151 = v141;
                        unint64_t v144 = v151 + 8;
                        while (v142 != v145)
                        {
                          uint64_t v153 = *((void *)v142 - 1);
                          v142 -= 8;
                          *((void *)v151 - 1) = v153;
                          v151 -= 8;
                        }
                        v140[334] = v151;
                        v140[335] = v144;
                        v140[336] = v152;
                        if (v145) {
                          operator delete(v145);
                        }
                      }
                      else
                      {
                        *(void *)uint64_t v142 = v141;
                        unint64_t v144 = v142 + 8;
                      }
                      v140[335] = v144;
                      if (!*(_DWORD *)(v3 + 48))
                      {
                        unint64_t v154 = *(void **)a1[1];
                        uint64_t v155 = *(_WORD *)(a1[2] + 54) & 0x1FFF;
                        uint64_t v156 = (char *)v154[338];
                        unint64_t v157 = v154[339];
                        if ((unint64_t)v156 >= v157)
                        {
                          unint64_t v159 = (char *)v154[337];
                          uint64_t v160 = (v156 - v159) >> 3;
                          if ((unint64_t)(v160 + 1) >> 61) {
                            goto LABEL_543;
                          }
                          unint64_t v161 = v157 - (void)v159;
                          unint64_t v162 = (uint64_t)(v157 - (void)v159) >> 2;
                          if (v162 <= v160 + 1) {
                            unint64_t v162 = v160 + 1;
                          }
                          if (v161 >= 0x7FFFFFFFFFFFFFF8) {
                            unint64_t v163 = 0x1FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v163 = v162;
                          }
                          if (v163)
                          {
                            uint64_t v164 = (char *)sub_5714((uint64_t)(v154 + 339), v163);
                            uint64_t v156 = (char *)v154[338];
                            unint64_t v159 = (char *)v154[337];
                          }
                          else
                          {
                            uint64_t v164 = 0;
                          }
                          uint64_t v165 = &v164[8 * v160];
                          unint64_t v166 = &v164[8 * v163];
                          *(void *)uint64_t v165 = v155;
                          unint64_t v158 = v165 + 8;
                          while (v156 != v159)
                          {
                            uint64_t v167 = *((void *)v156 - 1);
                            v156 -= 8;
                            *((void *)v165 - 1) = v167;
                            v165 -= 8;
                          }
                          v154[337] = v165;
                          v154[338] = v158;
                          v154[339] = v166;
                          if (v159) {
                            operator delete(v159);
                          }
                        }
                        else
                        {
                          *(void *)uint64_t v156 = v155;
                          unint64_t v158 = v156 + 8;
                        }
                        v154[338] = v158;
                        if (!*(_DWORD *)(v3 + 48))
                        {
                          unint64_t v168 = *(void **)a1[1];
                          uint64_t v169 = *(_WORD *)(a1[2] + 38) & 0x1FFF;
                          uint64_t v170 = (char *)v168[341];
                          unint64_t v171 = v168[342];
                          if ((unint64_t)v170 >= v171)
                          {
                            unint64_t v173 = (char *)v168[340];
                            uint64_t v174 = (v170 - v173) >> 3;
                            if ((unint64_t)(v174 + 1) >> 61) {
                              goto LABEL_543;
                            }
                            unint64_t v175 = v171 - (void)v173;
                            unint64_t v176 = (uint64_t)(v171 - (void)v173) >> 2;
                            if (v176 <= v174 + 1) {
                              unint64_t v176 = v174 + 1;
                            }
                            if (v175 >= 0x7FFFFFFFFFFFFFF8) {
                              unint64_t v177 = 0x1FFFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v177 = v176;
                            }
                            if (v177)
                            {
                              unsigned int v178 = (char *)sub_5714((uint64_t)(v168 + 342), v177);
                              uint64_t v170 = (char *)v168[341];
                              unint64_t v173 = (char *)v168[340];
                            }
                            else
                            {
                              unsigned int v178 = 0;
                            }
                            uint64_t v179 = &v178[8 * v174];
                            uint64_t v180 = &v178[8 * v177];
                            *(void *)uint64_t v179 = v169;
                            unint64_t v172 = v179 + 8;
                            while (v170 != v173)
                            {
                              uint64_t v181 = *((void *)v170 - 1);
                              v170 -= 8;
                              *((void *)v179 - 1) = v181;
                              v179 -= 8;
                            }
                            v168[340] = v179;
                            v168[341] = v172;
                            v168[342] = v180;
                            if (v173) {
                              operator delete(v173);
                            }
                          }
                          else
                          {
                            *(void *)uint64_t v170 = v169;
                            unint64_t v172 = v170 + 8;
                          }
                          v168[341] = v172;
                          if (!*(_DWORD *)(v3 + 48))
                          {
                            unint64_t v182 = *(void **)a1[1];
                            uint64_t v183 = *(_WORD *)(a1[2] + 76) & 0x1FFF;
                            uint64_t v184 = (char *)v182[344];
                            unint64_t v185 = v182[345];
                            if ((unint64_t)v184 >= v185)
                            {
                              unint64_t v187 = (char *)v182[343];
                              uint64_t v188 = (v184 - v187) >> 3;
                              if ((unint64_t)(v188 + 1) >> 61) {
                                goto LABEL_543;
                              }
                              unint64_t v189 = v185 - (void)v187;
                              unint64_t v190 = (uint64_t)(v185 - (void)v187) >> 2;
                              if (v190 <= v188 + 1) {
                                unint64_t v190 = v188 + 1;
                              }
                              if (v189 >= 0x7FFFFFFFFFFFFFF8) {
                                unint64_t v191 = 0x1FFFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v191 = v190;
                              }
                              if (v191)
                              {
                                unint64_t v192 = (char *)sub_5714((uint64_t)(v182 + 345), v191);
                                uint64_t v184 = (char *)v182[344];
                                unint64_t v187 = (char *)v182[343];
                              }
                              else
                              {
                                unint64_t v192 = 0;
                              }
                              uint64_t v193 = &v192[8 * v188];
                              unsigned __int16 v194 = &v192[8 * v191];
                              *(void *)uint64_t v193 = v183;
                              unint64_t v186 = v193 + 8;
                              while (v184 != v187)
                              {
                                uint64_t v195 = *((void *)v184 - 1);
                                v184 -= 8;
                                *((void *)v193 - 1) = v195;
                                v193 -= 8;
                              }
                              v182[343] = v193;
                              v182[344] = v186;
                              v182[345] = v194;
                              if (v187) {
                                operator delete(v187);
                              }
                            }
                            else
                            {
                              *(void *)uint64_t v184 = v183;
                              unint64_t v186 = v184 + 8;
                            }
                            v182[344] = v186;
                            if (!*(_DWORD *)(v3 + 48))
                            {
                              unint64_t v196 = *(void **)a1[1];
                              uint64_t v197 = *(_WORD *)(a1[2] + 60) & 0x1FFF;
                              uint64_t v198 = (char *)v196[347];
                              unint64_t v199 = v196[348];
                              if ((unint64_t)v198 >= v199)
                              {
                                unint64_t v201 = (char *)v196[346];
                                uint64_t v202 = (v198 - v201) >> 3;
                                if ((unint64_t)(v202 + 1) >> 61) {
                                  goto LABEL_543;
                                }
                                unint64_t v203 = v199 - (void)v201;
                                unint64_t v204 = (uint64_t)(v199 - (void)v201) >> 2;
                                if (v204 <= v202 + 1) {
                                  unint64_t v204 = v202 + 1;
                                }
                                if (v203 >= 0x7FFFFFFFFFFFFFF8) {
                                  unint64_t v205 = 0x1FFFFFFFFFFFFFFFLL;
                                }
                                else {
                                  unint64_t v205 = v204;
                                }
                                if (v205)
                                {
                                  uint64_t v206 = (char *)sub_5714((uint64_t)(v196 + 348), v205);
                                  uint64_t v198 = (char *)v196[347];
                                  unint64_t v201 = (char *)v196[346];
                                }
                                else
                                {
                                  uint64_t v206 = 0;
                                }
                                uint64_t v207 = &v206[8 * v202];
                                unsigned int v208 = &v206[8 * v205];
                                *(void *)uint64_t v207 = v197;
                                unint64_t v200 = v207 + 8;
                                while (v198 != v201)
                                {
                                  uint64_t v209 = *((void *)v198 - 1);
                                  v198 -= 8;
                                  *((void *)v207 - 1) = v209;
                                  v207 -= 8;
                                }
                                v196[346] = v207;
                                v196[347] = v200;
                                v196[348] = v208;
                                if (v201) {
                                  operator delete(v201);
                                }
                              }
                              else
                              {
                                *(void *)uint64_t v198 = v197;
                                unint64_t v200 = v198 + 8;
                              }
                              v196[347] = v200;
                              if (!*(_DWORD *)(v3 + 48))
                              {
                                unint64_t v210 = *(void **)a1[1];
                                uint64_t v211 = *(_WORD *)(a1[2] + 44) & 0x1FFF;
                                uint64_t v212 = (char *)v210[350];
                                unint64_t v213 = v210[351];
                                if ((unint64_t)v212 >= v213)
                                {
                                  unint64_t v215 = (char *)v210[349];
                                  uint64_t v216 = (v212 - v215) >> 3;
                                  if ((unint64_t)(v216 + 1) >> 61) {
                                    goto LABEL_543;
                                  }
                                  unint64_t v217 = v213 - (void)v215;
                                  unint64_t v218 = (uint64_t)(v213 - (void)v215) >> 2;
                                  if (v218 <= v216 + 1) {
                                    unint64_t v218 = v216 + 1;
                                  }
                                  if (v217 >= 0x7FFFFFFFFFFFFFF8) {
                                    unint64_t v219 = 0x1FFFFFFFFFFFFFFFLL;
                                  }
                                  else {
                                    unint64_t v219 = v218;
                                  }
                                  if (v219)
                                  {
                                    unint64_t v220 = (char *)sub_5714((uint64_t)(v210 + 351), v219);
                                    uint64_t v212 = (char *)v210[350];
                                    unint64_t v215 = (char *)v210[349];
                                  }
                                  else
                                  {
                                    unint64_t v220 = 0;
                                  }
                                  uint64_t v221 = &v220[8 * v216];
                                  unint64_t v222 = &v220[8 * v219];
                                  *(void *)uint64_t v221 = v211;
                                  unint64_t v214 = v221 + 8;
                                  while (v212 != v215)
                                  {
                                    uint64_t v223 = *((void *)v212 - 1);
                                    v212 -= 8;
                                    *((void *)v221 - 1) = v223;
                                    v221 -= 8;
                                  }
                                  v210[349] = v221;
                                  v210[350] = v214;
                                  v210[351] = v222;
                                  if (v215) {
                                    operator delete(v215);
                                  }
                                }
                                else
                                {
                                  *(void *)uint64_t v212 = v211;
                                  unint64_t v214 = v212 + 8;
                                }
                                v210[350] = v214;
                                if (!*(_DWORD *)(v3 + 48))
                                {
                                  unint64_t v224 = *(void **)a1[1];
                                  uint64_t v225 = *(_WORD *)(a1[2] + 28) & 0x1FFF;
                                  uint64_t v226 = (char *)v224[353];
                                  unint64_t v227 = v224[354];
                                  if ((unint64_t)v226 >= v227)
                                  {
                                    unint64_t v229 = (char *)v224[352];
                                    uint64_t v230 = (v226 - v229) >> 3;
                                    if ((unint64_t)(v230 + 1) >> 61) {
                                      goto LABEL_543;
                                    }
                                    unint64_t v231 = v227 - (void)v229;
                                    unint64_t v232 = (uint64_t)(v227 - (void)v229) >> 2;
                                    if (v232 <= v230 + 1) {
                                      unint64_t v232 = v230 + 1;
                                    }
                                    if (v231 >= 0x7FFFFFFFFFFFFFF8) {
                                      unint64_t v233 = 0x1FFFFFFFFFFFFFFFLL;
                                    }
                                    else {
                                      unint64_t v233 = v232;
                                    }
                                    if (v233)
                                    {
                                      int v234 = (char *)sub_5714((uint64_t)(v224 + 354), v233);
                                      uint64_t v226 = (char *)v224[353];
                                      unint64_t v229 = (char *)v224[352];
                                    }
                                    else
                                    {
                                      int v234 = 0;
                                    }
                                    uint64_t v235 = &v234[8 * v230];
                                    unint64_t v236 = &v234[8 * v233];
                                    *(void *)uint64_t v235 = v225;
                                    unint64_t v228 = v235 + 8;
                                    while (v226 != v229)
                                    {
                                      uint64_t v237 = *((void *)v226 - 1);
                                      v226 -= 8;
                                      *((void *)v235 - 1) = v237;
                                      v235 -= 8;
                                    }
                                    v224[352] = v235;
                                    v224[353] = v228;
                                    v224[354] = v236;
                                    if (v229) {
                                      operator delete(v229);
                                    }
                                  }
                                  else
                                  {
                                    *(void *)uint64_t v226 = v225;
                                    unint64_t v228 = v226 + 8;
                                  }
                                  v224[353] = v228;
                                  if (!*(_DWORD *)(v3 + 48))
                                  {
                                    unint64_t v238 = *(void **)a1[1];
                                    uint64_t v239 = *(_WORD *)(a1[2] + 78) & 0x1FFF;
                                    uint64_t v240 = (char *)v238[356];
                                    unint64_t v241 = v238[357];
                                    if ((unint64_t)v240 >= v241)
                                    {
                                      unint64_t v243 = (char *)v238[355];
                                      uint64_t v244 = (v240 - v243) >> 3;
                                      if ((unint64_t)(v244 + 1) >> 61) {
                                        goto LABEL_543;
                                      }
                                      unint64_t v245 = v241 - (void)v243;
                                      unint64_t v246 = (uint64_t)(v241 - (void)v243) >> 2;
                                      if (v246 <= v244 + 1) {
                                        unint64_t v246 = v244 + 1;
                                      }
                                      if (v245 >= 0x7FFFFFFFFFFFFFF8) {
                                        unint64_t v247 = 0x1FFFFFFFFFFFFFFFLL;
                                      }
                                      else {
                                        unint64_t v247 = v246;
                                      }
                                      if (v247)
                                      {
                                        unsigned int v248 = (char *)sub_5714((uint64_t)(v238 + 357), v247);
                                        uint64_t v240 = (char *)v238[356];
                                        unint64_t v243 = (char *)v238[355];
                                      }
                                      else
                                      {
                                        unsigned int v248 = 0;
                                      }
                                      uint64_t v249 = &v248[8 * v244];
                                      unint64_t v250 = &v248[8 * v247];
                                      *(void *)uint64_t v249 = v239;
                                      unint64_t v242 = v249 + 8;
                                      while (v240 != v243)
                                      {
                                        uint64_t v251 = *((void *)v240 - 1);
                                        v240 -= 8;
                                        *((void *)v249 - 1) = v251;
                                        v249 -= 8;
                                      }
                                      v238[355] = v249;
                                      v238[356] = v242;
                                      v238[357] = v250;
                                      if (v243) {
                                        operator delete(v243);
                                      }
                                    }
                                    else
                                    {
                                      *(void *)uint64_t v240 = v239;
                                      unint64_t v242 = v240 + 8;
                                    }
                                    v238[356] = v242;
                                    if (!*(_DWORD *)(v3 + 48))
                                    {
                                      unsigned int v252 = *(void **)a1[1];
                                      uint64_t v253 = *(_WORD *)(a1[2] + 62) & 0x1FFF;
                                      uint64_t v254 = (char *)v252[359];
                                      unint64_t v255 = v252[360];
                                      if ((unint64_t)v254 >= v255)
                                      {
                                        unint64_t v257 = (char *)v252[358];
                                        uint64_t v258 = (v254 - v257) >> 3;
                                        if ((unint64_t)(v258 + 1) >> 61) {
                                          goto LABEL_543;
                                        }
                                        unint64_t v259 = v255 - (void)v257;
                                        unint64_t v260 = (uint64_t)(v255 - (void)v257) >> 2;
                                        if (v260 <= v258 + 1) {
                                          unint64_t v260 = v258 + 1;
                                        }
                                        if (v259 >= 0x7FFFFFFFFFFFFFF8) {
                                          unint64_t v261 = 0x1FFFFFFFFFFFFFFFLL;
                                        }
                                        else {
                                          unint64_t v261 = v260;
                                        }
                                        if (v261)
                                        {
                                          uint64_t v262 = (char *)sub_5714((uint64_t)(v252 + 360), v261);
                                          uint64_t v254 = (char *)v252[359];
                                          unint64_t v257 = (char *)v252[358];
                                        }
                                        else
                                        {
                                          uint64_t v262 = 0;
                                        }
                                        uint64_t v263 = &v262[8 * v258];
                                        uint64_t v264 = &v262[8 * v261];
                                        *(void *)uint64_t v263 = v253;
                                        unint64_t v256 = v263 + 8;
                                        while (v254 != v257)
                                        {
                                          uint64_t v265 = *((void *)v254 - 1);
                                          v254 -= 8;
                                          *((void *)v263 - 1) = v265;
                                          v263 -= 8;
                                        }
                                        v252[358] = v263;
                                        v252[359] = v256;
                                        v252[360] = v264;
                                        if (v257) {
                                          operator delete(v257);
                                        }
                                      }
                                      else
                                      {
                                        *(void *)uint64_t v254 = v253;
                                        unint64_t v256 = v254 + 8;
                                      }
                                      v252[359] = v256;
                                      if (!*(_DWORD *)(v3 + 48))
                                      {
                                        unint64_t v266 = *(void **)a1[1];
                                        uint64_t v267 = *(_WORD *)(a1[2] + 46) & 0x1FFF;
                                        uint64_t v268 = (char *)v266[362];
                                        unint64_t v269 = v266[363];
                                        if ((unint64_t)v268 >= v269)
                                        {
                                          unint64_t v271 = (char *)v266[361];
                                          uint64_t v272 = (v268 - v271) >> 3;
                                          if ((unint64_t)(v272 + 1) >> 61) {
                                            goto LABEL_543;
                                          }
                                          unint64_t v273 = v269 - (void)v271;
                                          unint64_t v274 = (uint64_t)(v269 - (void)v271) >> 2;
                                          if (v274 <= v272 + 1) {
                                            unint64_t v274 = v272 + 1;
                                          }
                                          if (v273 >= 0x7FFFFFFFFFFFFFF8) {
                                            unint64_t v275 = 0x1FFFFFFFFFFFFFFFLL;
                                          }
                                          else {
                                            unint64_t v275 = v274;
                                          }
                                          if (v275)
                                          {
                                            uint64_t v276 = (char *)sub_5714((uint64_t)(v266 + 363), v275);
                                            uint64_t v268 = (char *)v266[362];
                                            unint64_t v271 = (char *)v266[361];
                                          }
                                          else
                                          {
                                            uint64_t v276 = 0;
                                          }
                                          uint64_t v277 = &v276[8 * v272];
                                          uint64_t v278 = &v276[8 * v275];
                                          *(void *)uint64_t v277 = v267;
                                          unint64_t v270 = v277 + 8;
                                          while (v268 != v271)
                                          {
                                            uint64_t v279 = *((void *)v268 - 1);
                                            v268 -= 8;
                                            *((void *)v277 - 1) = v279;
                                            v277 -= 8;
                                          }
                                          v266[361] = v277;
                                          v266[362] = v270;
                                          v266[363] = v278;
                                          if (v271) {
                                            operator delete(v271);
                                          }
                                        }
                                        else
                                        {
                                          *(void *)uint64_t v268 = v267;
                                          unint64_t v270 = v268 + 8;
                                        }
                                        v266[362] = v270;
                                        if (!*(_DWORD *)(v3 + 48))
                                        {
                                          unint64_t v280 = *(void **)a1[1];
                                          uint64_t v281 = *(_WORD *)(a1[2] + 30) & 0x1FFF;
                                          int v282 = (char *)v280[365];
                                          unint64_t v283 = v280[366];
                                          if ((unint64_t)v282 >= v283)
                                          {
                                            unint64_t v285 = (char *)v280[364];
                                            uint64_t v286 = (v282 - v285) >> 3;
                                            if ((unint64_t)(v286 + 1) >> 61) {
                                              goto LABEL_543;
                                            }
                                            unint64_t v287 = v283 - (void)v285;
                                            unint64_t v288 = (uint64_t)(v283 - (void)v285) >> 2;
                                            if (v288 <= v286 + 1) {
                                              unint64_t v288 = v286 + 1;
                                            }
                                            if (v287 >= 0x7FFFFFFFFFFFFFF8) {
                                              unint64_t v289 = 0x1FFFFFFFFFFFFFFFLL;
                                            }
                                            else {
                                              unint64_t v289 = v288;
                                            }
                                            if (v289)
                                            {
                                              uint64_t v290 = (char *)sub_5714((uint64_t)(v280 + 366), v289);
                                              int v282 = (char *)v280[365];
                                              unint64_t v285 = (char *)v280[364];
                                            }
                                            else
                                            {
                                              uint64_t v290 = 0;
                                            }
                                            uint64_t v291 = &v290[8 * v286];
                                            unint64_t v292 = &v290[8 * v289];
                                            *(void *)uint64_t v291 = v281;
                                            unint64_t v284 = v291 + 8;
                                            while (v282 != v285)
                                            {
                                              uint64_t v293 = *((void *)v282 - 1);
                                              v282 -= 8;
                                              *((void *)v291 - 1) = v293;
                                              v291 -= 8;
                                            }
                                            v280[364] = v291;
                                            v280[365] = v284;
                                            v280[366] = v292;
                                            if (v285) {
                                              operator delete(v285);
                                            }
                                          }
                                          else
                                          {
                                            *(void *)int v282 = v281;
                                            unint64_t v284 = v282 + 8;
                                          }
                                          v280[365] = v284;
                                          if (!*(_DWORD *)(v3 + 48))
                                          {
                                            unsigned int v294 = *(void **)a1[1];
                                            uint64_t v295 = *(_WORD *)(a1[2] + 80) & 0x1FFF;
                                            unint64_t v296 = (char *)v294[368];
                                            unint64_t v297 = v294[369];
                                            if ((unint64_t)v296 >= v297)
                                            {
                                              unint64_t v299 = (char *)v294[367];
                                              uint64_t v300 = (v296 - v299) >> 3;
                                              if ((unint64_t)(v300 + 1) >> 61) {
                                                goto LABEL_543;
                                              }
                                              unint64_t v301 = v297 - (void)v299;
                                              unint64_t v302 = (uint64_t)(v297 - (void)v299) >> 2;
                                              if (v302 <= v300 + 1) {
                                                unint64_t v302 = v300 + 1;
                                              }
                                              if (v301 >= 0x7FFFFFFFFFFFFFF8) {
                                                unint64_t v303 = 0x1FFFFFFFFFFFFFFFLL;
                                              }
                                              else {
                                                unint64_t v303 = v302;
                                              }
                                              if (v303)
                                              {
                                                unint64_t v304 = (char *)sub_5714((uint64_t)(v294 + 369), v303);
                                                unint64_t v296 = (char *)v294[368];
                                                unint64_t v299 = (char *)v294[367];
                                              }
                                              else
                                              {
                                                unint64_t v304 = 0;
                                              }
                                              uint64_t v305 = &v304[8 * v300];
                                              uint64_t v306 = &v304[8 * v303];
                                              *(void *)uint64_t v305 = v295;
                                              uint64_t v298 = v305 + 8;
                                              while (v296 != v299)
                                              {
                                                uint64_t v307 = *((void *)v296 - 1);
                                                v296 -= 8;
                                                *((void *)v305 - 1) = v307;
                                                v305 -= 8;
                                              }
                                              v294[367] = v305;
                                              v294[368] = v298;
                                              v294[369] = v306;
                                              if (v299) {
                                                operator delete(v299);
                                              }
                                            }
                                            else
                                            {
                                              *(void *)unint64_t v296 = v295;
                                              uint64_t v298 = v296 + 8;
                                            }
                                            v294[368] = v298;
                                            if (!*(_DWORD *)(v3 + 48))
                                            {
                                              unint64_t v308 = *(void **)a1[1];
                                              uint64_t v309 = *(_WORD *)(a1[2] + 64) & 0x1FFF;
                                              unint64_t v310 = (char *)v308[371];
                                              unint64_t v311 = v308[372];
                                              if ((unint64_t)v310 >= v311)
                                              {
                                                uint64_t v313 = (char *)v308[370];
                                                uint64_t v314 = (v310 - v313) >> 3;
                                                if ((unint64_t)(v314 + 1) >> 61) {
                                                  goto LABEL_543;
                                                }
                                                unint64_t v315 = v311 - (void)v313;
                                                unint64_t v316 = (uint64_t)(v311 - (void)v313) >> 2;
                                                if (v316 <= v314 + 1) {
                                                  unint64_t v316 = v314 + 1;
                                                }
                                                if (v315 >= 0x7FFFFFFFFFFFFFF8) {
                                                  unint64_t v317 = 0x1FFFFFFFFFFFFFFFLL;
                                                }
                                                else {
                                                  unint64_t v317 = v316;
                                                }
                                                if (v317)
                                                {
                                                  unint64_t v318 = (char *)sub_5714((uint64_t)(v308 + 372), v317);
                                                  unint64_t v310 = (char *)v308[371];
                                                  uint64_t v313 = (char *)v308[370];
                                                }
                                                else
                                                {
                                                  unint64_t v318 = 0;
                                                }
                                                int v319 = &v318[8 * v314];
                                                unint64_t v320 = &v318[8 * v317];
                                                *(void *)int v319 = v309;
                                                unint64_t v312 = v319 + 8;
                                                while (v310 != v313)
                                                {
                                                  uint64_t v321 = *((void *)v310 - 1);
                                                  v310 -= 8;
                                                  *((void *)v319 - 1) = v321;
                                                  v319 -= 8;
                                                }
                                                v308[370] = v319;
                                                v308[371] = v312;
                                                v308[372] = v320;
                                                if (v313) {
                                                  operator delete(v313);
                                                }
                                              }
                                              else
                                              {
                                                *(void *)unint64_t v310 = v309;
                                                unint64_t v312 = v310 + 8;
                                              }
                                              v308[371] = v312;
                                              if (!*(_DWORD *)(v3 + 48))
                                              {
                                                unint64_t v322 = *(void **)a1[1];
                                                uint64_t v323 = *(_WORD *)(a1[2] + 48) & 0x1FFF;
                                                unint64_t v324 = (char *)v322[374];
                                                unint64_t v325 = v322[375];
                                                if ((unint64_t)v324 >= v325)
                                                {
                                                  int v327 = (char *)v322[373];
                                                  uint64_t v328 = (v324 - v327) >> 3;
                                                  if ((unint64_t)(v328 + 1) >> 61) {
                                                    goto LABEL_543;
                                                  }
                                                  unint64_t v329 = v325 - (void)v327;
                                                  unint64_t v330 = (uint64_t)(v325 - (void)v327) >> 2;
                                                  if (v330 <= v328 + 1) {
                                                    unint64_t v330 = v328 + 1;
                                                  }
                                                  if (v329 >= 0x7FFFFFFFFFFFFFF8) {
                                                    unint64_t v331 = 0x1FFFFFFFFFFFFFFFLL;
                                                  }
                                                  else {
                                                    unint64_t v331 = v330;
                                                  }
                                                  if (v331)
                                                  {
                                                    unint64_t v332 = (char *)sub_5714((uint64_t)(v322 + 375), v331);
                                                    unint64_t v324 = (char *)v322[374];
                                                    int v327 = (char *)v322[373];
                                                  }
                                                  else
                                                  {
                                                    unint64_t v332 = 0;
                                                  }
                                                  uint64_t v333 = &v332[8 * v328];
                                                  unsigned int v334 = &v332[8 * v331];
                                                  *(void *)uint64_t v333 = v323;
                                                  int v326 = v333 + 8;
                                                  while (v324 != v327)
                                                  {
                                                    uint64_t v335 = *((void *)v324 - 1);
                                                    v324 -= 8;
                                                    *((void *)v333 - 1) = v335;
                                                    v333 -= 8;
                                                  }
                                                  v322[373] = v333;
                                                  v322[374] = v326;
                                                  v322[375] = v334;
                                                  if (v327) {
                                                    operator delete(v327);
                                                  }
                                                }
                                                else
                                                {
                                                  *(void *)unint64_t v324 = v323;
                                                  int v326 = v324 + 8;
                                                }
                                                v322[374] = v326;
                                                if (!*(_DWORD *)(v3 + 48))
                                                {
                                                  unint64_t v336 = *(void **)a1[1];
                                                  uint64_t v337 = *(_WORD *)(a1[2] + 32) & 0x1FFF;
                                                  unint64_t v338 = (char *)v336[377];
                                                  unint64_t v339 = v336[378];
                                                  if ((unint64_t)v338 >= v339)
                                                  {
                                                    uint64_t v341 = (char *)v336[376];
                                                    uint64_t v342 = (v338 - v341) >> 3;
                                                    if ((unint64_t)(v342 + 1) >> 61) {
                                                      goto LABEL_543;
                                                    }
                                                    unint64_t v343 = v339 - (void)v341;
                                                    unint64_t v344 = (uint64_t)(v339 - (void)v341) >> 2;
                                                    if (v344 <= v342 + 1) {
                                                      unint64_t v344 = v342 + 1;
                                                    }
                                                    if (v343 >= 0x7FFFFFFFFFFFFFF8) {
                                                      unint64_t v345 = 0x1FFFFFFFFFFFFFFFLL;
                                                    }
                                                    else {
                                                      unint64_t v345 = v344;
                                                    }
                                                    if (v345)
                                                    {
                                                      unsigned int v346 = (char *)sub_5714((uint64_t)(v336 + 378), v345);
                                                      unint64_t v338 = (char *)v336[377];
                                                      uint64_t v341 = (char *)v336[376];
                                                    }
                                                    else
                                                    {
                                                      unsigned int v346 = 0;
                                                    }
                                                    unint64_t v347 = &v346[8 * v342];
                                                    unint64_t v348 = &v346[8 * v345];
                                                    *(void *)unint64_t v347 = v337;
                                                    unint64_t v340 = v347 + 8;
                                                    while (v338 != v341)
                                                    {
                                                      uint64_t v349 = *((void *)v338 - 1);
                                                      v338 -= 8;
                                                      *((void *)v347 - 1) = v349;
                                                      v347 -= 8;
                                                    }
                                                    v336[376] = v347;
                                                    v336[377] = v340;
                                                    v336[378] = v348;
                                                    if (v341) {
                                                      operator delete(v341);
                                                    }
                                                  }
                                                  else
                                                  {
                                                    *(void *)unint64_t v338 = v337;
                                                    unint64_t v340 = v338 + 8;
                                                  }
                                                  v336[377] = v340;
                                                  if (!*(_DWORD *)(v3 + 48))
                                                  {
                                                    unint64_t v350 = *(void **)a1[1];
                                                    uint64_t v351 = *(_WORD *)(a1[2] + 72) & 0x1FFF;
                                                    unsigned int v352 = (char *)v350[380];
                                                    unint64_t v353 = v350[381];
                                                    if ((unint64_t)v352 >= v353)
                                                    {
                                                      int v355 = (char *)v350[379];
                                                      uint64_t v356 = (v352 - v355) >> 3;
                                                      if ((unint64_t)(v356 + 1) >> 61) {
                                                        goto LABEL_543;
                                                      }
                                                      unint64_t v357 = v353 - (void)v355;
                                                      unint64_t v358 = (uint64_t)(v353 - (void)v355) >> 2;
                                                      if (v358 <= v356 + 1) {
                                                        unint64_t v358 = v356 + 1;
                                                      }
                                                      if (v357 >= 0x7FFFFFFFFFFFFFF8) {
                                                        unint64_t v359 = 0x1FFFFFFFFFFFFFFFLL;
                                                      }
                                                      else {
                                                        unint64_t v359 = v358;
                                                      }
                                                      if (v359)
                                                      {
                                                        int v360 = (char *)sub_5714((uint64_t)(v350 + 381), v359);
                                                        unsigned int v352 = (char *)v350[380];
                                                        int v355 = (char *)v350[379];
                                                      }
                                                      else
                                                      {
                                                        int v360 = 0;
                                                      }
                                                      int v361 = &v360[8 * v356];
                                                      unint64_t v362 = &v360[8 * v359];
                                                      *(void *)int v361 = v351;
                                                      unint64_t v354 = v361 + 8;
                                                      while (v352 != v355)
                                                      {
                                                        uint64_t v363 = *((void *)v352 - 1);
                                                        v352 -= 8;
                                                        *((void *)v361 - 1) = v363;
                                                        v361 -= 8;
                                                      }
                                                      v350[379] = v361;
                                                      v350[380] = v354;
                                                      v350[381] = v362;
                                                      if (v355) {
                                                        operator delete(v355);
                                                      }
                                                    }
                                                    else
                                                    {
                                                      *(void *)unsigned int v352 = v351;
                                                      unint64_t v354 = v352 + 8;
                                                    }
                                                    v350[380] = v354;
                                                    if (!*(_DWORD *)(v3 + 48))
                                                    {
                                                      unint64_t v364 = *(void **)a1[1];
                                                      uint64_t v365 = *(_WORD *)(a1[2] + 56) & 0x1FFF;
                                                      unint64_t v366 = (char *)v364[383];
                                                      unint64_t v367 = v364[384];
                                                      if ((unint64_t)v366 >= v367)
                                                      {
                                                        unsigned int v369 = (char *)v364[382];
                                                        uint64_t v370 = (v366 - v369) >> 3;
                                                        if ((unint64_t)(v370 + 1) >> 61) {
                                                          goto LABEL_543;
                                                        }
                                                        unint64_t v371 = v367 - (void)v369;
                                                        unint64_t v372 = (uint64_t)(v367 - (void)v369) >> 2;
                                                        if (v372 <= v370 + 1) {
                                                          unint64_t v372 = v370 + 1;
                                                        }
                                                        if (v371 >= 0x7FFFFFFFFFFFFFF8) {
                                                          unint64_t v373 = 0x1FFFFFFFFFFFFFFFLL;
                                                        }
                                                        else {
                                                          unint64_t v373 = v372;
                                                        }
                                                        if (v373)
                                                        {
                                                          unint64_t v374 = (char *)sub_5714((uint64_t)(v364 + 384), v373);
                                                          unint64_t v366 = (char *)v364[383];
                                                          unsigned int v369 = (char *)v364[382];
                                                        }
                                                        else
                                                        {
                                                          unint64_t v374 = 0;
                                                        }
                                                        unint64_t v375 = &v374[8 * v370];
                                                        unint64_t v376 = &v374[8 * v373];
                                                        *(void *)unint64_t v375 = v365;
                                                        unint64_t v368 = v375 + 8;
                                                        while (v366 != v369)
                                                        {
                                                          uint64_t v377 = *((void *)v366 - 1);
                                                          v366 -= 8;
                                                          *((void *)v375 - 1) = v377;
                                                          v375 -= 8;
                                                        }
                                                        v364[382] = v375;
                                                        v364[383] = v368;
                                                        v364[384] = v376;
                                                        if (v369) {
                                                          operator delete(v369);
                                                        }
                                                      }
                                                      else
                                                      {
                                                        *(void *)unint64_t v366 = v365;
                                                        unint64_t v368 = v366 + 8;
                                                      }
                                                      v364[383] = v368;
                                                      if (!*(_DWORD *)(v3 + 48))
                                                      {
                                                        unint64_t v378 = *(void **)a1[1];
                                                        uint64_t v379 = *(_WORD *)(a1[2] + 40) & 0x1FFF;
                                                        unint64_t v380 = (char *)v378[386];
                                                        unint64_t v381 = v378[387];
                                                        if ((unint64_t)v380 >= v381)
                                                        {
                                                          unint64_t v383 = (char *)v378[385];
                                                          uint64_t v384 = (v380 - v383) >> 3;
                                                          if ((unint64_t)(v384 + 1) >> 61) {
                                                            goto LABEL_543;
                                                          }
                                                          unint64_t v385 = v381 - (void)v383;
                                                          unint64_t v386 = (uint64_t)(v381 - (void)v383) >> 2;
                                                          if (v386 <= v384 + 1) {
                                                            unint64_t v386 = v384 + 1;
                                                          }
                                                          if (v385 >= 0x7FFFFFFFFFFFFFF8) {
                                                            unint64_t v387 = 0x1FFFFFFFFFFFFFFFLL;
                                                          }
                                                          else {
                                                            unint64_t v387 = v386;
                                                          }
                                                          if (v387)
                                                          {
                                                            unint64_t v388 = (char *)sub_5714((uint64_t)(v378 + 387), v387);
                                                            unint64_t v380 = (char *)v378[386];
                                                            unint64_t v383 = (char *)v378[385];
                                                          }
                                                          else
                                                          {
                                                            unint64_t v388 = 0;
                                                          }
                                                          unsigned int v389 = &v388[8 * v384];
                                                          unint64_t v390 = &v388[8 * v387];
                                                          *(void *)unsigned int v389 = v379;
                                                          unint64_t v382 = v389 + 8;
                                                          while (v380 != v383)
                                                          {
                                                            uint64_t v391 = *((void *)v380 - 1);
                                                            v380 -= 8;
                                                            *((void *)v389 - 1) = v391;
                                                            v389 -= 8;
                                                          }
                                                          v378[385] = v389;
                                                          v378[386] = v382;
                                                          v378[387] = v390;
                                                          if (v383) {
                                                            operator delete(v383);
                                                          }
                                                        }
                                                        else
                                                        {
                                                          *(void *)unint64_t v380 = v379;
                                                          unint64_t v382 = v380 + 8;
                                                        }
                                                        v378[386] = v382;
                                                        if (!*(_DWORD *)(v3 + 48))
                                                        {
                                                          unint64_t v392 = *(void **)a1[1];
                                                          unint64_t v393 = ((unint64_t)*(unsigned __int16 *)(a1[2] + 24) >> 1) & 0x1FFF;
                                                          unint64_t v394 = (unint64_t *)v392[389];
                                                          unint64_t v395 = v392[390];
                                                          if ((unint64_t)v394 >= v395)
                                                          {
                                                            unsigned int v397 = (unint64_t *)v392[388];
                                                            uint64_t v398 = v394 - v397;
                                                            if ((unint64_t)(v398 + 1) >> 61) {
                                                              goto LABEL_543;
                                                            }
                                                            unint64_t v399 = v395 - (void)v397;
                                                            unint64_t v400 = (uint64_t)(v395 - (void)v397) >> 2;
                                                            if (v400 <= v398 + 1) {
                                                              unint64_t v400 = v398 + 1;
                                                            }
                                                            if (v399 >= 0x7FFFFFFFFFFFFFF8) {
                                                              unint64_t v401 = 0x1FFFFFFFFFFFFFFFLL;
                                                            }
                                                            else {
                                                              unint64_t v401 = v400;
                                                            }
                                                            if (v401)
                                                            {
                                                              unint64_t v402 = (char *)sub_5714((uint64_t)(v392 + 390), v401);
                                                              unint64_t v394 = (unint64_t *)v392[389];
                                                              unsigned int v397 = (unint64_t *)v392[388];
                                                            }
                                                            else
                                                            {
                                                              unint64_t v402 = 0;
                                                            }
                                                            unint64_t v403 = (unint64_t *)&v402[8 * v398];
                                                            unint64_t v404 = &v402[8 * v401];
                                                            unint64_t *v403 = v393;
                                                            unint64_t v396 = v403 + 1;
                                                            while (v394 != v397)
                                                            {
                                                              unint64_t v405 = *--v394;
                                                              *--unint64_t v403 = v405;
                                                            }
                                                            v392[388] = v403;
                                                            v392[389] = v396;
                                                            v392[390] = v404;
                                                            if (v397) {
                                                              operator delete(v397);
                                                            }
                                                          }
                                                          else
                                                          {
                                                            unint64_t *v394 = v393;
                                                            unint64_t v396 = v394 + 1;
                                                          }
                                                          v392[389] = v396;
                                                          if (!*(_DWORD *)(v3 + 48))
                                                          {
                                                            unint64_t v406 = *(void **)a1[1];
                                                            uint64_t v407 = *(_WORD *)(a1[2] + 74) & 0x1FFF;
                                                            unint64_t v408 = (char *)v406[392];
                                                            unint64_t v409 = v406[393];
                                                            if ((unint64_t)v408 >= v409)
                                                            {
                                                              unint64_t v411 = (char *)v406[391];
                                                              uint64_t v412 = (v408 - v411) >> 3;
                                                              if ((unint64_t)(v412 + 1) >> 61) {
                                                                goto LABEL_543;
                                                              }
                                                              unint64_t v413 = v409 - (void)v411;
                                                              unint64_t v414 = (uint64_t)(v409 - (void)v411) >> 2;
                                                              if (v414 <= v412 + 1) {
                                                                unint64_t v414 = v412 + 1;
                                                              }
                                                              if (v413 >= 0x7FFFFFFFFFFFFFF8) {
                                                                unint64_t v415 = 0x1FFFFFFFFFFFFFFFLL;
                                                              }
                                                              else {
                                                                unint64_t v415 = v414;
                                                              }
                                                              if (v415)
                                                              {
                                                                unint64_t v416 = (char *)sub_5714((uint64_t)(v406 + 393), v415);
                                                                unint64_t v408 = (char *)v406[392];
                                                                unint64_t v411 = (char *)v406[391];
                                                              }
                                                              else
                                                              {
                                                                unint64_t v416 = 0;
                                                              }
                                                              unsigned int v417 = &v416[8 * v412];
                                                              unint64_t v418 = &v416[8 * v415];
                                                              *(void *)unsigned int v417 = v407;
                                                              unint64_t v410 = v417 + 8;
                                                              while (v408 != v411)
                                                              {
                                                                uint64_t v419 = *((void *)v408 - 1);
                                                                v408 -= 8;
                                                                *((void *)v417 - 1) = v419;
                                                                v417 -= 8;
                                                              }
                                                              v406[391] = v417;
                                                              v406[392] = v410;
                                                              v406[393] = v418;
                                                              if (v411) {
                                                                operator delete(v411);
                                                              }
                                                            }
                                                            else
                                                            {
                                                              *(void *)unint64_t v408 = v407;
                                                              unint64_t v410 = v408 + 8;
                                                            }
                                                            v406[392] = v410;
                                                            if (!*(_DWORD *)(v3 + 48))
                                                            {
                                                              unint64_t v420 = *(void **)a1[1];
                                                              uint64_t v421 = *(_WORD *)(a1[2] + 58) & 0x1FFF;
                                                              unint64_t v422 = (char *)v420[395];
                                                              unint64_t v423 = v420[396];
                                                              if ((unint64_t)v422 >= v423)
                                                              {
                                                                unsigned int v425 = (char *)v420[394];
                                                                uint64_t v426 = (v422 - v425) >> 3;
                                                                if ((unint64_t)(v426 + 1) >> 61) {
                                                                  goto LABEL_543;
                                                                }
                                                                unint64_t v427 = v423 - (void)v425;
                                                                unint64_t v428 = (uint64_t)(v423 - (void)v425) >> 2;
                                                                if (v428 <= v426 + 1) {
                                                                  unint64_t v428 = v426 + 1;
                                                                }
                                                                if (v427 >= 0x7FFFFFFFFFFFFFF8) {
                                                                  unint64_t v429 = 0x1FFFFFFFFFFFFFFFLL;
                                                                }
                                                                else {
                                                                  unint64_t v429 = v428;
                                                                }
                                                                if (v429)
                                                                {
                                                                  unint64_t v430 = (char *)sub_5714((uint64_t)(v420 + 396), v429);
                                                                  unint64_t v422 = (char *)v420[395];
                                                                  unsigned int v425 = (char *)v420[394];
                                                                }
                                                                else
                                                                {
                                                                  unint64_t v430 = 0;
                                                                }
                                                                unint64_t v431 = &v430[8 * v426];
                                                                unint64_t v432 = &v430[8 * v429];
                                                                *(void *)unint64_t v431 = v421;
                                                                unint64_t v424 = v431 + 8;
                                                                while (v422 != v425)
                                                                {
                                                                  uint64_t v433 = *((void *)v422 - 1);
                                                                  v422 -= 8;
                                                                  *((void *)v431 - 1) = v433;
                                                                  v431 -= 8;
                                                                }
                                                                v420[394] = v431;
                                                                v420[395] = v424;
                                                                v420[396] = v432;
                                                                if (v425) {
                                                                  operator delete(v425);
                                                                }
                                                              }
                                                              else
                                                              {
                                                                *(void *)unint64_t v422 = v421;
                                                                unint64_t v424 = v422 + 8;
                                                              }
                                                              v420[395] = v424;
                                                              if (!*(_DWORD *)(v3 + 48))
                                                              {
                                                                unint64_t v434 = *(void **)a1[1];
                                                                uint64_t v435 = *(_WORD *)(a1[2] + 42) & 0x1FFF;
                                                                unint64_t v436 = (char *)v434[398];
                                                                unint64_t v437 = v434[399];
                                                                if ((unint64_t)v436 >= v437)
                                                                {
                                                                  unint64_t v439 = (char *)v434[397];
                                                                  uint64_t v440 = (v436 - v439) >> 3;
                                                                  if ((unint64_t)(v440 + 1) >> 61) {
                                                                    goto LABEL_543;
                                                                  }
                                                                  unint64_t v441 = v437 - (void)v439;
                                                                  unint64_t v442 = (uint64_t)(v437 - (void)v439) >> 2;
                                                                  if (v442 <= v440 + 1) {
                                                                    unint64_t v442 = v440 + 1;
                                                                  }
                                                                  if (v441 >= 0x7FFFFFFFFFFFFFF8) {
                                                                    unint64_t v443 = 0x1FFFFFFFFFFFFFFFLL;
                                                                  }
                                                                  else {
                                                                    unint64_t v443 = v442;
                                                                  }
                                                                  if (v443)
                                                                  {
                                                                    unint64_t v444 = (char *)sub_5714((uint64_t)(v434 + 399), v443);
                                                                    unint64_t v436 = (char *)v434[398];
                                                                    unint64_t v439 = (char *)v434[397];
                                                                  }
                                                                  else
                                                                  {
                                                                    unint64_t v444 = 0;
                                                                  }
                                                                  unsigned int v445 = &v444[8 * v440];
                                                                  unint64_t v446 = &v444[8 * v443];
                                                                  *(void *)unsigned int v445 = v435;
                                                                  unint64_t v438 = v445 + 8;
                                                                  while (v436 != v439)
                                                                  {
                                                                    uint64_t v447 = *((void *)v436 - 1);
                                                                    v436 -= 8;
                                                                    *((void *)v445 - 1) = v447;
                                                                    v445 -= 8;
                                                                  }
                                                                  v434[397] = v445;
                                                                  v434[398] = v438;
                                                                  v434[399] = v446;
                                                                  if (v439) {
                                                                    operator delete(v439);
                                                                  }
                                                                }
                                                                else
                                                                {
                                                                  *(void *)unint64_t v436 = v435;
                                                                  unint64_t v438 = v436 + 8;
                                                                }
                                                                v434[398] = v438;
                                                                if (!*(_DWORD *)(v3 + 48))
                                                                {
                                                                  uint64_t v448 = a1[2];
                                                                  unsigned int v449 = *(void **)a1[1];
                                                                  uint64_t v450 = *(_WORD *)(v448 + 26) & 0x1FFF;
                                                                  unint64_t v451 = (char *)v449[401];
                                                                  unint64_t v452 = v449[402];
                                                                  if ((unint64_t)v451 < v452)
                                                                  {
                                                                    *(void *)unint64_t v451 = v450;
                                                                    unsigned int v453 = v451 + 8;
LABEL_550:
                                                                    v449[401] = v453;
                                                                    goto LABEL_551;
                                                                  }
                                                                  unint64_t v454 = (char *)v449[400];
                                                                  uint64_t v455 = (v451 - v454) >> 3;
                                                                  if (!((unint64_t)(v455 + 1) >> 61))
                                                                  {
                                                                    unint64_t v456 = v452 - (void)v454;
                                                                    unint64_t v457 = (uint64_t)(v452 - (void)v454) >> 2;
                                                                    if (v457 <= v455 + 1) {
                                                                      unint64_t v457 = v455 + 1;
                                                                    }
                                                                    if (v456 >= 0x7FFFFFFFFFFFFFF8) {
                                                                      unint64_t v458 = 0x1FFFFFFFFFFFFFFFLL;
                                                                    }
                                                                    else {
                                                                      unint64_t v458 = v457;
                                                                    }
                                                                    if (v458)
                                                                    {
                                                                      unint64_t v459 = (char *)sub_5714((uint64_t)(v449 + 402), v458);
                                                                      unint64_t v451 = (char *)v449[401];
                                                                      unint64_t v454 = (char *)v449[400];
                                                                    }
                                                                    else
                                                                    {
                                                                      unint64_t v459 = 0;
                                                                    }
                                                                    unint64_t v460 = &v459[8 * v455];
                                                                    unsigned int v461 = &v459[8 * v458];
                                                                    *(void *)unint64_t v460 = v450;
                                                                    unsigned int v453 = v460 + 8;
                                                                    while (v451 != v454)
                                                                    {
                                                                      uint64_t v462 = *((void *)v451 - 1);
                                                                      v451 -= 8;
                                                                      *((void *)v460 - 1) = v462;
                                                                      v460 -= 8;
                                                                    }
                                                                    v449[400] = v460;
                                                                    v449[401] = v453;
                                                                    v449[402] = v461;
                                                                    if (v454) {
                                                                      operator delete(v454);
                                                                    }
                                                                    goto LABEL_550;
                                                                  }
LABEL_543:
                                                                  sub_566C();
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_551:
    *a2 = 1;
    return;
  }
  if (!*(_DWORD *)(v3 + 48))
  {
    uint64_t v11 = (void *)a1[1];
    uint64_t v10 = (_WORD *)a1[2];
    uint64_t v12 = (void *)*v11;
    *(void *)(v12[308] - 8) += v10[41] & 0x1FFF;
    *(void *)(v12[311] - 8) += v10[33] & 0x1FFF;
    *(void *)(v12[314] - 8) += v10[25] & 0x1FFF;
    *(void *)(v12[317] - 8) += v10[17] & 0x1FFF;
    *(void *)(v12[320] - 8) += v10[42] & 0x1FFF;
    *(void *)(v12[323] - 8) += v10[34] & 0x1FFF;
    *(void *)(v12[326] - 8) += v10[26] & 0x1FFF;
    *(void *)(v12[329] - 8) += v10[18] & 0x1FFF;
    *(void *)(v12[332] - 8) += v10[43] & 0x1FFF;
    *(void *)(v12[335] - 8) += v10[35] & 0x1FFF;
    uint64_t v13 = (_WORD *)a1[2];
    unint64_t v14 = *(void **)a1[1];
    *(void *)(v14[338] - 8) += v13[27] & 0x1FFF;
    *(void *)(v14[341] - 8) += v13[19] & 0x1FFF;
    *(void *)(v14[344] - 8) += v13[38] & 0x1FFF;
    *(void *)(v14[347] - 8) += v13[30] & 0x1FFF;
    *(void *)(v14[350] - 8) += v13[22] & 0x1FFF;
    *(void *)(v14[353] - 8) += v13[14] & 0x1FFF;
    *(void *)(v14[356] - 8) += v13[39] & 0x1FFF;
    *(void *)(v14[359] - 8) += v13[31] & 0x1FFF;
    *(void *)(v14[362] - 8) += v13[23] & 0x1FFF;
    *(void *)(v14[365] - 8) += v13[15] & 0x1FFF;
    unint64_t v15 = (unsigned __int16 *)a1[2];
    unint64_t v16 = *(void **)a1[1];
    *(void *)(v16[368] - 8) += v15[40] & 0x1FFF;
    *(void *)(v16[371] - 8) += v15[32] & 0x1FFF;
    *(void *)(v16[374] - 8) += v15[24] & 0x1FFF;
    *(void *)(v16[377] - 8) += v15[16] & 0x1FFF;
    *(void *)(v16[380] - 8) += v15[36] & 0x1FFF;
    *(void *)(v16[383] - 8) += v15[28] & 0x1FFF;
    *(void *)(v16[386] - 8) += v15[20] & 0x1FFF;
    *(void *)(v16[389] - 8) += ((unint64_t)v15[12] >> 1) & 0x1FFF;
    *(void *)(v16[392] - 8) += v15[37] & 0x1FFF;
    *(void *)(v16[395] - 8) += v15[29] & 0x1FFF;
    uint64_t v17 = a1[2];
    unint64_t v18 = (void *)*v11;
    *(void *)(v18[398] - 8) += *(_WORD *)(v17 + 42) & 0x1FFF;
    *(void *)(v18[401] - 8) += *(_WORD *)(v17 + 26) & 0x1FFF;
  }
}

void sub_84208(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    if (*(_DWORD *)(v3 + 48)) {
      goto LABEL_125;
    }
    uint64_t v5 = *(void **)a1[1];
    uint64_t v6 = *(_WORD *)(a1[2] + 42) & 0x7FFF;
    char v7 = (char *)v5[287];
    unint64_t v8 = v5[288];
    if ((unint64_t)v7 >= v8)
    {
      uint64_t v12 = (char *)v5[286];
      uint64_t v13 = (v7 - v12) >> 3;
      if ((unint64_t)(v13 + 1) >> 61) {
        goto LABEL_127;
      }
      unint64_t v14 = v8 - (void)v12;
      unint64_t v15 = (uint64_t)(v8 - (void)v12) >> 2;
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      if (v14 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v15;
      }
      if (v16)
      {
        uint64_t v17 = (char *)sub_5714((uint64_t)(v5 + 288), v16);
        char v7 = (char *)v5[287];
        uint64_t v12 = (char *)v5[286];
      }
      else
      {
        uint64_t v17 = 0;
      }
      unint64_t v18 = &v17[8 * v13];
      unint64_t v19 = &v17[8 * v16];
      *(void *)unint64_t v18 = v6;
      uint64_t v9 = v18 + 8;
      while (v7 != v12)
      {
        uint64_t v20 = *((void *)v7 - 1);
        v7 -= 8;
        *((void *)v18 - 1) = v20;
        v18 -= 8;
      }
      v5[286] = v18;
      v5[287] = v9;
      v5[288] = v19;
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      *(void *)char v7 = v6;
      uint64_t v9 = v7 + 8;
    }
    v5[287] = v9;
    if (!*(_DWORD *)(v3 + 48))
    {
      unint64_t v21 = *(void **)a1[1];
      uint64_t v22 = *(_WORD *)(a1[2] + 40) & 0x7FFF;
      unint64_t v23 = (char *)v21[290];
      unint64_t v24 = v21[291];
      if ((unint64_t)v23 >= v24)
      {
        uint8x8_t v26 = (char *)v21[289];
        uint64_t v27 = (v23 - v26) >> 3;
        if ((unint64_t)(v27 + 1) >> 61) {
          goto LABEL_127;
        }
        unint64_t v28 = v24 - (void)v26;
        unint64_t v29 = (uint64_t)(v24 - (void)v26) >> 2;
        if (v29 <= v27 + 1) {
          unint64_t v29 = v27 + 1;
        }
        if (v28 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v29;
        }
        if (v30)
        {
          unint64_t v31 = (char *)sub_5714((uint64_t)(v21 + 291), v30);
          unint64_t v23 = (char *)v21[290];
          uint8x8_t v26 = (char *)v21[289];
        }
        else
        {
          unint64_t v31 = 0;
        }
        unint64_t v32 = &v31[8 * v27];
        unint64_t v33 = &v31[8 * v30];
        *(void *)unint64_t v32 = v22;
        uint64_t v25 = v32 + 8;
        while (v23 != v26)
        {
          uint64_t v34 = *((void *)v23 - 1);
          v23 -= 8;
          *((void *)v32 - 1) = v34;
          v32 -= 8;
        }
        v21[289] = v32;
        v21[290] = v25;
        v21[291] = v33;
        if (v26) {
          operator delete(v26);
        }
      }
      else
      {
        *(void *)unint64_t v23 = v22;
        uint64_t v25 = v23 + 8;
      }
      v21[290] = v25;
      if (!*(_DWORD *)(v3 + 48))
      {
        unint64_t v35 = *(void **)a1[1];
        uint64_t v36 = *(_WORD *)(a1[2] + 38) & 0x7FFF;
        unint64_t v37 = (char *)v35[293];
        unint64_t v38 = v35[294];
        if ((unint64_t)v37 >= v38)
        {
          uint64_t v40 = (char *)v35[292];
          uint64_t v41 = (v37 - v40) >> 3;
          if ((unint64_t)(v41 + 1) >> 61) {
            goto LABEL_127;
          }
          unint64_t v42 = v38 - (void)v40;
          unint64_t v43 = (uint64_t)(v38 - (void)v40) >> 2;
          if (v43 <= v41 + 1) {
            unint64_t v43 = v41 + 1;
          }
          if (v42 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v44 = v43;
          }
          if (v44)
          {
            unint64_t v45 = (char *)sub_5714((uint64_t)(v35 + 294), v44);
            unint64_t v37 = (char *)v35[293];
            uint64_t v40 = (char *)v35[292];
          }
          else
          {
            unint64_t v45 = 0;
          }
          unint64_t v46 = &v45[8 * v41];
          unint64_t v47 = &v45[8 * v44];
          *(void *)unint64_t v46 = v36;
          uint64_t v39 = v46 + 8;
          while (v37 != v40)
          {
            uint64_t v48 = *((void *)v37 - 1);
            v37 -= 8;
            *((void *)v46 - 1) = v48;
            v46 -= 8;
          }
          v35[292] = v46;
          v35[293] = v39;
          v35[294] = v47;
          if (v40) {
            operator delete(v40);
          }
        }
        else
        {
          *(void *)unint64_t v37 = v36;
          uint64_t v39 = v37 + 8;
        }
        v35[293] = v39;
        if (!*(_DWORD *)(v3 + 48))
        {
          unint64_t v49 = *(void **)a1[1];
          uint64_t v50 = (*(void *)(a1[2] + 32) >> 33) & 0x7FFFLL;
          unint64_t v51 = (uint64_t *)v49[296];
          unint64_t v52 = v49[297];
          if ((unint64_t)v51 >= v52)
          {
            unint64_t v54 = (uint64_t *)v49[295];
            uint64_t v55 = v51 - v54;
            if ((unint64_t)(v55 + 1) >> 61) {
              goto LABEL_127;
            }
            unint64_t v56 = v52 - (void)v54;
            unint64_t v57 = (uint64_t)(v52 - (void)v54) >> 2;
            if (v57 <= v55 + 1) {
              unint64_t v57 = v55 + 1;
            }
            if (v56 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v58 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v58 = v57;
            }
            if (v58)
            {
              unint64_t v59 = (char *)sub_5714((uint64_t)(v49 + 297), v58);
              unint64_t v51 = (uint64_t *)v49[296];
              unint64_t v54 = (uint64_t *)v49[295];
            }
            else
            {
              unint64_t v59 = 0;
            }
            unint64_t v60 = (uint64_t *)&v59[8 * v55];
            unint64_t v61 = &v59[8 * v58];
            *unint64_t v60 = v50;
            unint64_t v53 = v60 + 1;
            while (v51 != v54)
            {
              uint64_t v62 = *--v51;
              *--unint64_t v60 = v62;
            }
            v49[295] = v60;
            v49[296] = v53;
            v49[297] = v61;
            if (v54) {
              operator delete(v54);
            }
          }
          else
          {
            uint64_t *v51 = v50;
            unint64_t v53 = v51 + 1;
          }
          v49[296] = v53;
          if (!*(_DWORD *)(v3 + 48))
          {
            unint64_t v63 = *(void **)a1[1];
            uint64_t v64 = *(void *)(a1[2] + 32) & 0x1FFFFFFFFLL;
            unint64_t v65 = (uint64_t *)v63[299];
            unint64_t v66 = v63[300];
            if ((unint64_t)v65 >= v66)
            {
              uint64_t v68 = (uint64_t *)v63[298];
              uint64_t v69 = v65 - v68;
              if ((unint64_t)(v69 + 1) >> 61) {
                goto LABEL_127;
              }
              unint64_t v70 = v66 - (void)v68;
              unint64_t v71 = (uint64_t)(v66 - (void)v68) >> 2;
              if (v71 <= v69 + 1) {
                unint64_t v71 = v69 + 1;
              }
              if (v70 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v72 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v72 = v71;
              }
              if (v72)
              {
                unint64_t v73 = (char *)sub_5714((uint64_t)(v63 + 300), v72);
                unint64_t v65 = (uint64_t *)v63[299];
                uint64_t v68 = (uint64_t *)v63[298];
              }
              else
              {
                unint64_t v73 = 0;
              }
              unint64_t v74 = (uint64_t *)&v73[8 * v69];
              unint64_t v75 = &v73[8 * v72];
              uint64_t *v74 = v64;
              uint64_t v67 = v74 + 1;
              while (v65 != v68)
              {
                uint64_t v76 = *--v65;
                *--unint64_t v74 = v76;
              }
              v63[298] = v74;
              v63[299] = v67;
              v63[300] = v75;
              if (v68) {
                operator delete(v68);
              }
            }
            else
            {
              uint64_t *v65 = v64;
              uint64_t v67 = v65 + 1;
            }
            v63[299] = v67;
            if (!*(_DWORD *)(v3 + 48))
            {
              unint64_t v77 = *(void **)a1[1];
              uint64_t v78 = *(_WORD *)(a1[2] + 44) & 0x7FFF;
              unint64_t v79 = (char *)v77[302];
              unint64_t v80 = v77[303];
              if ((unint64_t)v79 >= v80)
              {
                uint64_t v82 = (char *)v77[301];
                uint64_t v83 = (v79 - v82) >> 3;
                if ((unint64_t)(v83 + 1) >> 61) {
                  goto LABEL_127;
                }
                unint64_t v84 = v80 - (void)v82;
                unint64_t v85 = (uint64_t)(v80 - (void)v82) >> 2;
                if (v85 <= v83 + 1) {
                  unint64_t v85 = v83 + 1;
                }
                if (v84 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v86 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v86 = v85;
                }
                if (v86)
                {
                  unint64_t v87 = (char *)sub_5714((uint64_t)(v77 + 303), v86);
                  unint64_t v79 = (char *)v77[302];
                  uint64_t v82 = (char *)v77[301];
                }
                else
                {
                  unint64_t v87 = 0;
                }
                unint64_t v88 = &v87[8 * v83];
                unint64_t v89 = &v87[8 * v86];
                *(void *)unint64_t v88 = v78;
                uint64_t v81 = v88 + 8;
                while (v79 != v82)
                {
                  uint64_t v90 = *((void *)v79 - 1);
                  v79 -= 8;
                  *((void *)v88 - 1) = v90;
                  v88 -= 8;
                }
                v77[301] = v88;
                v77[302] = v81;
                v77[303] = v89;
                if (v82) {
                  operator delete(v82);
                }
              }
              else
              {
                *(void *)unint64_t v79 = v78;
                uint64_t v81 = v79 + 8;
              }
              v77[302] = v81;
              if (!*(_DWORD *)(v3 + 48))
              {
                uint64_t v91 = a1[1];
                uint64_t v92 = a1[2];
                unint64_t v93 = *(void **)v91;
                uint64_t v94 = *(unsigned int *)(v92 + 24);
                uint64_t v95 = *(char **)(*(void *)v91 + 2440);
                unint64_t v96 = *(void *)(*(void *)v91 + 2448);
                if ((unint64_t)v95 < v96)
                {
                  *(void *)uint64_t v95 = v94;
                  uint64_t v97 = v95 + 8;
LABEL_124:
                  v93[305] = v97;
                  goto LABEL_125;
                }
                uint64_t v98 = (char *)v93[304];
                uint64_t v99 = (v95 - v98) >> 3;
                if (!((unint64_t)(v99 + 1) >> 61))
                {
                  unint64_t v100 = v96 - (void)v98;
                  unint64_t v101 = (uint64_t)(v96 - (void)v98) >> 2;
                  if (v101 <= v99 + 1) {
                    unint64_t v101 = v99 + 1;
                  }
                  if (v100 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v102 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v102 = v101;
                  }
                  if (v102)
                  {
                    unint64_t v103 = (char *)sub_5714((uint64_t)(v93 + 306), v102);
                    uint64_t v95 = (char *)v93[305];
                    uint64_t v98 = (char *)v93[304];
                  }
                  else
                  {
                    unint64_t v103 = 0;
                  }
                  uint64_t v104 = &v103[8 * v99];
                  unint64_t v105 = &v103[8 * v102];
                  *(void *)uint64_t v104 = v94;
                  uint64_t v97 = v104 + 8;
                  while (v95 != v98)
                  {
                    uint64_t v106 = *((void *)v95 - 1);
                    v95 -= 8;
                    *((void *)v104 - 1) = v106;
                    v104 -= 8;
                  }
                  v93[304] = v104;
                  v93[305] = v97;
                  v93[306] = v105;
                  if (v98) {
                    operator delete(v98);
                  }
                  goto LABEL_124;
                }
LABEL_127:
                sub_566C();
              }
            }
          }
        }
      }
    }
LABEL_125:
    *a2 = 1;
    return;
  }
  if (!*(_DWORD *)(v3 + 48))
  {
    uint64_t v10 = a1[2];
    uint64_t v11 = *(void **)a1[1];
    *(void *)(v11[287] - 8) += *(_WORD *)(v10 + 42) & 0x7FFF;
    *(void *)(v11[290] - 8) += *(_WORD *)(v10 + 40) & 0x7FFF;
    *(void *)(v11[293] - 8) += *(_WORD *)(v10 + 38) & 0x7FFF;
    *(void *)(v11[296] - 8) += (*(void *)(v10 + 32) >> 33) & 0x7FFFLL;
    *(void *)(v11[299] - 8) += *(void *)(v10 + 32) & 0x1FFFFFFFFLL;
    *(void *)(v11[302] - 8) += *(_WORD *)(v10 + 44) & 0x7FFF;
    *(void *)(v11[305] - 8) += *(unsigned int *)(v10 + 24);
  }
}

void sub_848A8(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    if (*(_DWORD *)(v3 + 48)) {
      goto LABEL_40;
    }
    uint64_t v5 = *(void **)a1[1];
    uint64_t v6 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
    char v7 = (char *)v5[281];
    unint64_t v8 = v5[282];
    if ((unint64_t)v7 >= v8)
    {
      uint64_t v12 = (char *)v5[280];
      uint64_t v13 = (v7 - v12) >> 3;
      if ((unint64_t)(v13 + 1) >> 61) {
        goto LABEL_42;
      }
      unint64_t v14 = v8 - (void)v12;
      unint64_t v15 = (uint64_t)(v8 - (void)v12) >> 2;
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      if (v14 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v15;
      }
      if (v16)
      {
        uint64_t v17 = (char *)sub_5714((uint64_t)(v5 + 282), v16);
        char v7 = (char *)v5[281];
        uint64_t v12 = (char *)v5[280];
      }
      else
      {
        uint64_t v17 = 0;
      }
      unint64_t v18 = &v17[8 * v13];
      unint64_t v19 = &v17[8 * v16];
      *(void *)unint64_t v18 = v6;
      uint64_t v9 = v18 + 8;
      while (v7 != v12)
      {
        uint64_t v20 = *((void *)v7 - 1);
        v7 -= 8;
        *((void *)v18 - 1) = v20;
        v18 -= 8;
      }
      v5[280] = v18;
      v5[281] = v9;
      v5[282] = v19;
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      *(void *)char v7 = v6;
      uint64_t v9 = v7 + 8;
    }
    v5[281] = v9;
    if (*(_DWORD *)(v3 + 48))
    {
LABEL_40:
      *a2 = 1;
      return;
    }
    uint64_t v21 = a1[2];
    uint64_t v22 = *(void **)a1[1];
    uint64_t v23 = *(_WORD *)(v21 + 24) & 0x7FFF;
    unint64_t v24 = (char *)v22[284];
    unint64_t v25 = v22[285];
    if ((unint64_t)v24 < v25)
    {
      *(void *)unint64_t v24 = v23;
      uint8x8_t v26 = v24 + 8;
LABEL_39:
      v22[284] = v26;
      goto LABEL_40;
    }
    uint64_t v27 = (char *)v22[283];
    uint64_t v28 = (v24 - v27) >> 3;
    if (!((unint64_t)(v28 + 1) >> 61))
    {
      unint64_t v29 = v25 - (void)v27;
      unint64_t v30 = (uint64_t)(v25 - (void)v27) >> 2;
      if (v30 <= v28 + 1) {
        unint64_t v30 = v28 + 1;
      }
      if (v29 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v31 = v30;
      }
      if (v31)
      {
        unint64_t v32 = (char *)sub_5714((uint64_t)(v22 + 285), v31);
        unint64_t v24 = (char *)v22[284];
        uint64_t v27 = (char *)v22[283];
      }
      else
      {
        unint64_t v32 = 0;
      }
      unint64_t v33 = &v32[8 * v28];
      uint64_t v34 = &v32[8 * v31];
      *(void *)unint64_t v33 = v23;
      uint8x8_t v26 = v33 + 8;
      while (v24 != v27)
      {
        uint64_t v35 = *((void *)v24 - 1);
        v24 -= 8;
        *((void *)v33 - 1) = v35;
        v33 -= 8;
      }
      v22[283] = v33;
      v22[284] = v26;
      v22[285] = v34;
      if (v27) {
        operator delete(v27);
      }
      goto LABEL_39;
    }
LABEL_42:
    sub_566C();
  }
  if (!*(_DWORD *)(v3 + 48))
  {
    uint64_t v10 = a1[2];
    uint64_t v11 = *(void *)a1[1];
    *(void *)(*(void *)(v11 + 2248) - 8) += *(_WORD *)(v10 + 26) & 0x7FFF;
    *(void *)(*(void *)(v11 + 2272) - 8) += *(_WORD *)(v10 + 24) & 0x7FFF;
  }
}

void sub_84ADC(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    if (*(_DWORD *)(v3 + 48)) {
      goto LABEL_142;
    }
    uint64_t v5 = *(void **)a1[1];
    uint64_t v6 = *(_WORD *)(a1[2] + 24) & 0x7FFF;
    char v7 = (char *)v5[461];
    unint64_t v8 = v5[462];
    if ((unint64_t)v7 >= v8)
    {
      uint64_t v12 = (char *)v5[460];
      uint64_t v13 = (v7 - v12) >> 3;
      if ((unint64_t)(v13 + 1) >> 61) {
        goto LABEL_144;
      }
      unint64_t v14 = v8 - (void)v12;
      unint64_t v15 = (uint64_t)(v8 - (void)v12) >> 2;
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      if (v14 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v15;
      }
      if (v16)
      {
        uint64_t v17 = (char *)sub_5714((uint64_t)(v5 + 462), v16);
        char v7 = (char *)v5[461];
        uint64_t v12 = (char *)v5[460];
      }
      else
      {
        uint64_t v17 = 0;
      }
      unint64_t v18 = &v17[8 * v13];
      unint64_t v19 = &v17[8 * v16];
      *(void *)unint64_t v18 = v6;
      uint64_t v9 = v18 + 8;
      while (v7 != v12)
      {
        uint64_t v20 = *((void *)v7 - 1);
        v7 -= 8;
        *((void *)v18 - 1) = v20;
        v18 -= 8;
      }
      v5[460] = v18;
      v5[461] = v9;
      v5[462] = v19;
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      *(void *)char v7 = v6;
      uint64_t v9 = v7 + 8;
    }
    v5[461] = v9;
    if (!*(_DWORD *)(v3 + 48))
    {
      uint64_t v21 = *(void **)a1[1];
      uint64_t v22 = *(_DWORD *)(a1[2] + 40) & 0x1FFFFLL;
      uint64_t v23 = (uint64_t *)v21[464];
      unint64_t v24 = v21[465];
      if ((unint64_t)v23 >= v24)
      {
        uint8x8_t v26 = (uint64_t *)v21[463];
        uint64_t v27 = v23 - v26;
        if ((unint64_t)(v27 + 1) >> 61) {
          goto LABEL_144;
        }
        unint64_t v28 = v24 - (void)v26;
        unint64_t v29 = (uint64_t)(v24 - (void)v26) >> 2;
        if (v29 <= v27 + 1) {
          unint64_t v29 = v27 + 1;
        }
        if (v28 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v29;
        }
        if (v30)
        {
          unint64_t v31 = (char *)sub_5714((uint64_t)(v21 + 465), v30);
          uint64_t v23 = (uint64_t *)v21[464];
          uint8x8_t v26 = (uint64_t *)v21[463];
        }
        else
        {
          unint64_t v31 = 0;
        }
        unint64_t v32 = (uint64_t *)&v31[8 * v27];
        unint64_t v33 = &v31[8 * v30];
        *unint64_t v32 = v22;
        unint64_t v25 = v32 + 1;
        while (v23 != v26)
        {
          uint64_t v34 = *--v23;
          *--unint64_t v32 = v34;
        }
        v21[463] = v32;
        v21[464] = v25;
        v21[465] = v33;
        if (v26) {
          operator delete(v26);
        }
      }
      else
      {
        *uint64_t v23 = v22;
        unint64_t v25 = v23 + 1;
      }
      v21[464] = v25;
      if (!*(_DWORD *)(v3 + 48))
      {
        uint64_t v35 = *(void **)a1[1];
        uint64_t v36 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
        unint64_t v37 = (char *)v35[467];
        unint64_t v38 = v35[468];
        if ((unint64_t)v37 >= v38)
        {
          uint64_t v40 = (char *)v35[466];
          uint64_t v41 = (v37 - v40) >> 3;
          if ((unint64_t)(v41 + 1) >> 61) {
            goto LABEL_144;
          }
          unint64_t v42 = v38 - (void)v40;
          unint64_t v43 = (uint64_t)(v38 - (void)v40) >> 2;
          if (v43 <= v41 + 1) {
            unint64_t v43 = v41 + 1;
          }
          if (v42 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v44 = v43;
          }
          if (v44)
          {
            unint64_t v45 = (char *)sub_5714((uint64_t)(v35 + 468), v44);
            unint64_t v37 = (char *)v35[467];
            uint64_t v40 = (char *)v35[466];
          }
          else
          {
            unint64_t v45 = 0;
          }
          unint64_t v46 = &v45[8 * v41];
          unint64_t v47 = &v45[8 * v44];
          *(void *)unint64_t v46 = v36;
          uint64_t v39 = v46 + 8;
          while (v37 != v40)
          {
            uint64_t v48 = *((void *)v37 - 1);
            v37 -= 8;
            *((void *)v46 - 1) = v48;
            v46 -= 8;
          }
          v35[466] = v46;
          v35[467] = v39;
          v35[468] = v47;
          if (v40) {
            operator delete(v40);
          }
        }
        else
        {
          *(void *)unint64_t v37 = v36;
          uint64_t v39 = v37 + 8;
        }
        v35[467] = v39;
        if (!*(_DWORD *)(v3 + 48))
        {
          unint64_t v49 = *(void **)a1[1];
          uint64_t v50 = *(_DWORD *)(a1[2] + 36) & 0x3FFFFLL;
          unint64_t v51 = (uint64_t *)v49[470];
          unint64_t v52 = v49[471];
          if ((unint64_t)v51 >= v52)
          {
            unint64_t v54 = (uint64_t *)v49[469];
            uint64_t v55 = v51 - v54;
            if ((unint64_t)(v55 + 1) >> 61) {
              goto LABEL_144;
            }
            unint64_t v56 = v52 - (void)v54;
            unint64_t v57 = (uint64_t)(v52 - (void)v54) >> 2;
            if (v57 <= v55 + 1) {
              unint64_t v57 = v55 + 1;
            }
            if (v56 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v58 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v58 = v57;
            }
            if (v58)
            {
              unint64_t v59 = (char *)sub_5714((uint64_t)(v49 + 471), v58);
              unint64_t v51 = (uint64_t *)v49[470];
              unint64_t v54 = (uint64_t *)v49[469];
            }
            else
            {
              unint64_t v59 = 0;
            }
            unint64_t v60 = (uint64_t *)&v59[8 * v55];
            unint64_t v61 = &v59[8 * v58];
            *unint64_t v60 = v50;
            unint64_t v53 = v60 + 1;
            while (v51 != v54)
            {
              uint64_t v62 = *--v51;
              *--unint64_t v60 = v62;
            }
            v49[469] = v60;
            v49[470] = v53;
            v49[471] = v61;
            if (v54) {
              operator delete(v54);
            }
          }
          else
          {
            uint64_t *v51 = v50;
            unint64_t v53 = v51 + 1;
          }
          v49[470] = v53;
          if (!*(_DWORD *)(v3 + 48))
          {
            unint64_t v63 = *(void **)a1[1];
            uint64_t v64 = *(_DWORD *)(a1[2] + 32) & 0x3FFFFLL;
            unint64_t v65 = (uint64_t *)v63[473];
            unint64_t v66 = v63[474];
            if ((unint64_t)v65 >= v66)
            {
              uint64_t v68 = (uint64_t *)v63[472];
              uint64_t v69 = v65 - v68;
              if ((unint64_t)(v69 + 1) >> 61) {
                goto LABEL_144;
              }
              unint64_t v70 = v66 - (void)v68;
              unint64_t v71 = (uint64_t)(v66 - (void)v68) >> 2;
              if (v71 <= v69 + 1) {
                unint64_t v71 = v69 + 1;
              }
              if (v70 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v72 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v72 = v71;
              }
              if (v72)
              {
                unint64_t v73 = (char *)sub_5714((uint64_t)(v63 + 474), v72);
                unint64_t v65 = (uint64_t *)v63[473];
                uint64_t v68 = (uint64_t *)v63[472];
              }
              else
              {
                unint64_t v73 = 0;
              }
              unint64_t v74 = (uint64_t *)&v73[8 * v69];
              unint64_t v75 = &v73[8 * v72];
              uint64_t *v74 = v64;
              uint64_t v67 = v74 + 1;
              while (v65 != v68)
              {
                uint64_t v76 = *--v65;
                *--unint64_t v74 = v76;
              }
              v63[472] = v74;
              v63[473] = v67;
              v63[474] = v75;
              if (v68) {
                operator delete(v68);
              }
            }
            else
            {
              uint64_t *v65 = v64;
              uint64_t v67 = v65 + 1;
            }
            v63[473] = v67;
            if (!*(_DWORD *)(v3 + 48))
            {
              uint64_t v77 = a1[1];
              uint64_t v78 = *(void **)v77;
              uint64_t v79 = *(unsigned __int16 *)(a1[2] + 46);
              unint64_t v80 = *(char **)(*(void *)v77 + 3808);
              unint64_t v81 = *(void *)(*(void *)v77 + 3816);
              if ((unint64_t)v80 >= v81)
              {
                uint64_t v83 = (char *)v78[475];
                uint64_t v84 = (v80 - v83) >> 3;
                if ((unint64_t)(v84 + 1) >> 61) {
                  goto LABEL_144;
                }
                unint64_t v85 = v81 - (void)v83;
                unint64_t v86 = (uint64_t)(v81 - (void)v83) >> 2;
                if (v86 <= v84 + 1) {
                  unint64_t v86 = v84 + 1;
                }
                if (v85 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v87 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v87 = v86;
                }
                if (v87)
                {
                  unint64_t v88 = (char *)sub_5714((uint64_t)(v78 + 477), v87);
                  unint64_t v80 = (char *)v78[476];
                  uint64_t v83 = (char *)v78[475];
                }
                else
                {
                  unint64_t v88 = 0;
                }
                unint64_t v89 = &v88[8 * v84];
                uint64_t v90 = &v88[8 * v87];
                *(void *)unint64_t v89 = v79;
                uint64_t v82 = v89 + 8;
                while (v80 != v83)
                {
                  uint64_t v91 = *((void *)v80 - 1);
                  v80 -= 8;
                  *((void *)v89 - 1) = v91;
                  v89 -= 8;
                }
                v78[475] = v89;
                v78[476] = v82;
                v78[477] = v90;
                if (v83) {
                  operator delete(v83);
                }
              }
              else
              {
                *(void *)unint64_t v80 = v79;
                uint64_t v82 = v80 + 8;
              }
              v78[476] = v82;
              if (!*(_DWORD *)(v3 + 48))
              {
                uint64_t v92 = a1[1];
                unint64_t v93 = *(void **)v92;
                uint64_t v94 = *(unsigned __int16 *)(a1[2] + 44);
                uint64_t v95 = *(char **)(*(void *)v92 + 3832);
                unint64_t v96 = *(void *)(*(void *)v92 + 3840);
                if ((unint64_t)v95 >= v96)
                {
                  uint64_t v98 = (char *)v93[478];
                  uint64_t v99 = (v95 - v98) >> 3;
                  if ((unint64_t)(v99 + 1) >> 61) {
                    goto LABEL_144;
                  }
                  unint64_t v100 = v96 - (void)v98;
                  unint64_t v101 = (uint64_t)(v96 - (void)v98) >> 2;
                  if (v101 <= v99 + 1) {
                    unint64_t v101 = v99 + 1;
                  }
                  if (v100 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v102 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v102 = v101;
                  }
                  if (v102)
                  {
                    unint64_t v103 = (char *)sub_5714((uint64_t)(v93 + 480), v102);
                    uint64_t v95 = (char *)v93[479];
                    uint64_t v98 = (char *)v93[478];
                  }
                  else
                  {
                    unint64_t v103 = 0;
                  }
                  uint64_t v104 = &v103[8 * v99];
                  unint64_t v105 = &v103[8 * v102];
                  *(void *)uint64_t v104 = v94;
                  uint64_t v97 = v104 + 8;
                  while (v95 != v98)
                  {
                    uint64_t v106 = *((void *)v95 - 1);
                    v95 -= 8;
                    *((void *)v104 - 1) = v106;
                    v104 -= 8;
                  }
                  v93[478] = v104;
                  v93[479] = v97;
                  v93[480] = v105;
                  if (v98) {
                    operator delete(v98);
                  }
                }
                else
                {
                  *(void *)uint64_t v95 = v94;
                  uint64_t v97 = v95 + 8;
                }
                v93[479] = v97;
                if (!*(_DWORD *)(v3 + 48))
                {
                  uint64_t v107 = a1[1];
                  uint64_t v108 = a1[2];
                  uint64_t v109 = *(void **)v107;
                  uint64_t v110 = *(unsigned __int16 *)(v108 + 28);
                  uint64_t v111 = *(char **)(*(void *)v107 + 3856);
                  unint64_t v112 = *(void *)(*(void *)v107 + 3864);
                  if ((unint64_t)v111 < v112)
                  {
                    *(void *)uint64_t v111 = v110;
                    uint64_t v113 = v111 + 8;
LABEL_141:
                    v109[482] = v113;
                    goto LABEL_142;
                  }
                  uint64_t v114 = (char *)v109[481];
                  uint64_t v115 = (v111 - v114) >> 3;
                  if (!((unint64_t)(v115 + 1) >> 61))
                  {
                    unint64_t v116 = v112 - (void)v114;
                    unint64_t v117 = (uint64_t)(v112 - (void)v114) >> 2;
                    if (v117 <= v115 + 1) {
                      unint64_t v117 = v115 + 1;
                    }
                    if (v116 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v118 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v118 = v117;
                    }
                    if (v118)
                    {
                      unint64_t v119 = (char *)sub_5714((uint64_t)(v109 + 483), v118);
                      uint64_t v111 = (char *)v109[482];
                      uint64_t v114 = (char *)v109[481];
                    }
                    else
                    {
                      unint64_t v119 = 0;
                    }
                    unint64_t v120 = &v119[8 * v115];
                    unint64_t v121 = &v119[8 * v118];
                    *(void *)unint64_t v120 = v110;
                    uint64_t v113 = v120 + 8;
                    while (v111 != v114)
                    {
                      uint64_t v122 = *((void *)v111 - 1);
                      v111 -= 8;
                      *((void *)v120 - 1) = v122;
                      v120 -= 8;
                    }
                    v109[481] = v120;
                    v109[482] = v113;
                    v109[483] = v121;
                    if (v114) {
                      operator delete(v114);
                    }
                    goto LABEL_141;
                  }
LABEL_144:
                  sub_566C();
                }
              }
            }
          }
        }
      }
    }
LABEL_142:
    *a2 = 1;
    return;
  }
  if (!*(_DWORD *)(v3 + 48))
  {
    uint64_t v10 = a1[2];
    uint64_t v11 = *(void **)a1[1];
    *(void *)(v11[461] - 8) += *(_WORD *)(v10 + 24) & 0x7FFF;
    *(void *)(v11[464] - 8) += *(_DWORD *)(v10 + 40) & 0x1FFFF;
    *(void *)(v11[467] - 8) += *(_WORD *)(v10 + 26) & 0x7FFF;
    *(void *)(v11[470] - 8) += *(_DWORD *)(v10 + 36) & 0x3FFFF;
    *(void *)(v11[473] - 8) += *(_DWORD *)(v10 + 32) & 0x3FFFF;
    *(void *)(v11[476] - 8) += *(unsigned __int16 *)(v10 + 46);
    *(void *)(v11[479] - 8) += *(unsigned __int16 *)(v10 + 44);
    *(void *)(v11[482] - 8) += *(unsigned __int16 *)(v10 + 28);
  }
}

void sub_85250(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    if (*(_DWORD *)(v3 + 48)) {
      goto LABEL_262;
    }
    uint64_t v5 = *(void **)a1[1];
    unint64_t v6 = (unint64_t)*(unsigned int *)(a1[2] + 40) >> 17;
    char v7 = (unint64_t *)v5[404];
    unint64_t v8 = v5[405];
    if ((unint64_t)v7 >= v8)
    {
      unint64_t v16 = (unint64_t *)v5[403];
      uint64_t v17 = v7 - v16;
      if ((unint64_t)(v17 + 1) >> 61) {
        goto LABEL_254;
      }
      unint64_t v18 = v8 - (void)v16;
      unint64_t v19 = (uint64_t)(v8 - (void)v16) >> 2;
      if (v19 <= v17 + 1) {
        unint64_t v19 = v17 + 1;
      }
      if (v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v20 = v19;
      }
      if (v20)
      {
        uint64_t v21 = (char *)sub_5714((uint64_t)(v5 + 405), v20);
        char v7 = (unint64_t *)v5[404];
        unint64_t v16 = (unint64_t *)v5[403];
      }
      else
      {
        uint64_t v21 = 0;
      }
      uint64_t v22 = (unint64_t *)&v21[8 * v17];
      uint64_t v23 = &v21[8 * v20];
      unint64_t *v22 = v6;
      uint64_t v9 = v22 + 1;
      while (v7 != v16)
      {
        unint64_t v24 = *--v7;
        *--uint64_t v22 = v24;
      }
      v5[403] = v22;
      v5[404] = v9;
      v5[405] = v23;
      if (v16) {
        operator delete(v16);
      }
    }
    else
    {
      unint64_t *v7 = v6;
      uint64_t v9 = v7 + 1;
    }
    v5[404] = v9;
    if (!*(_DWORD *)(v3 + 48))
    {
      unint64_t v25 = *(void **)a1[1];
      uint64_t v26 = *(_DWORD *)(a1[2] + 40) & 0x1FFFFLL;
      uint64_t v27 = (uint64_t *)v25[407];
      unint64_t v28 = v25[408];
      if ((unint64_t)v27 >= v28)
      {
        unint64_t v30 = (uint64_t *)v25[406];
        uint64_t v31 = v27 - v30;
        if ((unint64_t)(v31 + 1) >> 61) {
          goto LABEL_254;
        }
        unint64_t v32 = v28 - (void)v30;
        unint64_t v33 = (uint64_t)(v28 - (void)v30) >> 2;
        if (v33 <= v31 + 1) {
          unint64_t v33 = v31 + 1;
        }
        if (v32 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v34 = v33;
        }
        if (v34)
        {
          uint64_t v35 = (char *)sub_5714((uint64_t)(v25 + 408), v34);
          uint64_t v27 = (uint64_t *)v25[407];
          unint64_t v30 = (uint64_t *)v25[406];
        }
        else
        {
          uint64_t v35 = 0;
        }
        uint64_t v36 = (uint64_t *)&v35[8 * v31];
        unint64_t v37 = &v35[8 * v34];
        uint64_t *v36 = v26;
        unint64_t v29 = v36 + 1;
        while (v27 != v30)
        {
          uint64_t v38 = *--v27;
          *--uint64_t v36 = v38;
        }
        v25[406] = v36;
        v25[407] = v29;
        v25[408] = v37;
        if (v30) {
          operator delete(v30);
        }
      }
      else
      {
        *uint64_t v27 = v26;
        unint64_t v29 = v27 + 1;
      }
      v25[407] = v29;
      if (!*(_DWORD *)(v3 + 48))
      {
        uint64_t v39 = *(void **)a1[1];
        uint64_t v40 = *(_WORD *)(a1[2] + 28) & 0x7FFF;
        uint64_t v41 = (char *)v39[410];
        unint64_t v42 = v39[411];
        if ((unint64_t)v41 >= v42)
        {
          unint64_t v44 = (char *)v39[409];
          uint64_t v45 = (v41 - v44) >> 3;
          if ((unint64_t)(v45 + 1) >> 61) {
            goto LABEL_254;
          }
          unint64_t v46 = v42 - (void)v44;
          unint64_t v47 = (uint64_t)(v42 - (void)v44) >> 2;
          if (v47 <= v45 + 1) {
            unint64_t v47 = v45 + 1;
          }
          if (v46 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v48 = v47;
          }
          if (v48)
          {
            unint64_t v49 = (char *)sub_5714((uint64_t)(v39 + 411), v48);
            uint64_t v41 = (char *)v39[410];
            unint64_t v44 = (char *)v39[409];
          }
          else
          {
            unint64_t v49 = 0;
          }
          uint64_t v50 = &v49[8 * v45];
          unint64_t v51 = &v49[8 * v48];
          *(void *)uint64_t v50 = v40;
          unint64_t v43 = v50 + 8;
          while (v41 != v44)
          {
            uint64_t v52 = *((void *)v41 - 1);
            v41 -= 8;
            *((void *)v50 - 1) = v52;
            v50 -= 8;
          }
          v39[409] = v50;
          v39[410] = v43;
          v39[411] = v51;
          if (v44) {
            operator delete(v44);
          }
        }
        else
        {
          *(void *)uint64_t v41 = v40;
          unint64_t v43 = v41 + 8;
        }
        v39[410] = v43;
        if (!*(_DWORD *)(v3 + 48))
        {
          unint64_t v53 = *(void **)a1[1];
          uint64_t v54 = *(_WORD *)(a1[2] + 30) & 0x7FFF;
          uint64_t v55 = (char *)v53[413];
          unint64_t v56 = v53[414];
          if ((unint64_t)v55 >= v56)
          {
            unint64_t v58 = (char *)v53[412];
            uint64_t v59 = (v55 - v58) >> 3;
            if ((unint64_t)(v59 + 1) >> 61) {
              goto LABEL_254;
            }
            unint64_t v60 = v56 - (void)v58;
            unint64_t v61 = (uint64_t)(v56 - (void)v58) >> 2;
            if (v61 <= v59 + 1) {
              unint64_t v61 = v59 + 1;
            }
            if (v60 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v62 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v62 = v61;
            }
            if (v62)
            {
              unint64_t v63 = (char *)sub_5714((uint64_t)(v53 + 414), v62);
              uint64_t v55 = (char *)v53[413];
              unint64_t v58 = (char *)v53[412];
            }
            else
            {
              unint64_t v63 = 0;
            }
            uint64_t v64 = &v63[8 * v59];
            unint64_t v65 = &v63[8 * v62];
            *(void *)uint64_t v64 = v54;
            unint64_t v57 = v64 + 8;
            while (v55 != v58)
            {
              uint64_t v66 = *((void *)v55 - 1);
              v55 -= 8;
              *((void *)v64 - 1) = v66;
              v64 -= 8;
            }
            v53[412] = v64;
            v53[413] = v57;
            v53[414] = v65;
            if (v58) {
              operator delete(v58);
            }
          }
          else
          {
            *(void *)uint64_t v55 = v54;
            unint64_t v57 = v55 + 8;
          }
          v53[413] = v57;
          if (!*(_DWORD *)(v3 + 48))
          {
            uint64_t v67 = *(void **)a1[1];
            uint64_t v68 = *(_WORD *)(a1[2] + 24) & 0x7FFF;
            uint64_t v69 = (char *)v67[416];
            unint64_t v70 = v67[417];
            if ((unint64_t)v69 >= v70)
            {
              unint64_t v72 = (char *)v67[415];
              uint64_t v73 = (v69 - v72) >> 3;
              if ((unint64_t)(v73 + 1) >> 61) {
                goto LABEL_254;
              }
              unint64_t v74 = v70 - (void)v72;
              unint64_t v75 = (uint64_t)(v70 - (void)v72) >> 2;
              if (v75 <= v73 + 1) {
                unint64_t v75 = v73 + 1;
              }
              if (v74 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v76 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v76 = v75;
              }
              if (v76)
              {
                uint64_t v77 = (char *)sub_5714((uint64_t)(v67 + 417), v76);
                uint64_t v69 = (char *)v67[416];
                unint64_t v72 = (char *)v67[415];
              }
              else
              {
                uint64_t v77 = 0;
              }
              uint64_t v78 = &v77[8 * v73];
              uint64_t v79 = &v77[8 * v76];
              *(void *)uint64_t v78 = v68;
              unint64_t v71 = v78 + 8;
              while (v69 != v72)
              {
                uint64_t v80 = *((void *)v69 - 1);
                v69 -= 8;
                *((void *)v78 - 1) = v80;
                v78 -= 8;
              }
              v67[415] = v78;
              v67[416] = v71;
              v67[417] = v79;
              if (v72) {
                operator delete(v72);
              }
            }
            else
            {
              *(void *)uint64_t v69 = v68;
              unint64_t v71 = v69 + 8;
            }
            v67[416] = v71;
            if (!*(_DWORD *)(v3 + 48))
            {
              unint64_t v81 = *(void **)a1[1];
              uint64_t v82 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
              uint64_t v83 = (char *)v81[419];
              unint64_t v84 = v81[420];
              if ((unint64_t)v83 >= v84)
              {
                unint64_t v86 = (char *)v81[418];
                uint64_t v87 = (v83 - v86) >> 3;
                if ((unint64_t)(v87 + 1) >> 61) {
                  goto LABEL_254;
                }
                unint64_t v88 = v84 - (void)v86;
                unint64_t v89 = (uint64_t)(v84 - (void)v86) >> 2;
                if (v89 <= v87 + 1) {
                  unint64_t v89 = v87 + 1;
                }
                if (v88 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v90 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v90 = v89;
                }
                if (v90)
                {
                  uint64_t v91 = (char *)sub_5714((uint64_t)(v81 + 420), v90);
                  uint64_t v83 = (char *)v81[419];
                  unint64_t v86 = (char *)v81[418];
                }
                else
                {
                  uint64_t v91 = 0;
                }
                uint64_t v92 = &v91[8 * v87];
                unint64_t v93 = &v91[8 * v90];
                *(void *)uint64_t v92 = v82;
                unint64_t v85 = v92 + 8;
                while (v83 != v86)
                {
                  uint64_t v94 = *((void *)v83 - 1);
                  v83 -= 8;
                  *((void *)v92 - 1) = v94;
                  v92 -= 8;
                }
                v81[418] = v92;
                v81[419] = v85;
                v81[420] = v93;
                if (v86) {
                  operator delete(v86);
                }
              }
              else
              {
                *(void *)uint64_t v83 = v82;
                unint64_t v85 = v83 + 8;
              }
              v81[419] = v85;
              if (!*(_DWORD *)(v3 + 48))
              {
                uint64_t v95 = a1[1];
                unint64_t v96 = *(void **)v95;
                uint64_t v97 = *(unsigned __int16 *)(a1[2] + 60);
                uint64_t v98 = *(char **)(*(void *)v95 + 3376);
                unint64_t v99 = *(void *)(*(void *)v95 + 3384);
                if ((unint64_t)v98 >= v99)
                {
                  unint64_t v101 = (char *)v96[421];
                  uint64_t v102 = (v98 - v101) >> 3;
                  if ((unint64_t)(v102 + 1) >> 61) {
                    goto LABEL_254;
                  }
                  unint64_t v103 = v99 - (void)v101;
                  unint64_t v104 = (uint64_t)(v99 - (void)v101) >> 2;
                  if (v104 <= v102 + 1) {
                    unint64_t v104 = v102 + 1;
                  }
                  if (v103 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v105 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v105 = v104;
                  }
                  if (v105)
                  {
                    uint64_t v106 = (char *)sub_5714((uint64_t)(v96 + 423), v105);
                    uint64_t v98 = (char *)v96[422];
                    unint64_t v101 = (char *)v96[421];
                  }
                  else
                  {
                    uint64_t v106 = 0;
                  }
                  uint64_t v107 = &v106[8 * v102];
                  uint64_t v108 = &v106[8 * v105];
                  *(void *)uint64_t v107 = v97;
                  unint64_t v100 = v107 + 8;
                  while (v98 != v101)
                  {
                    uint64_t v109 = *((void *)v98 - 1);
                    v98 -= 8;
                    *((void *)v107 - 1) = v109;
                    v107 -= 8;
                  }
                  v96[421] = v107;
                  v96[422] = v100;
                  v96[423] = v108;
                  if (v101) {
                    operator delete(v101);
                  }
                }
                else
                {
                  *(void *)uint64_t v98 = v97;
                  unint64_t v100 = v98 + 8;
                }
                v96[422] = v100;
                if (!*(_DWORD *)(v3 + 48))
                {
                  uint64_t v110 = *(void **)a1[1];
                  uint64_t v111 = *(_DWORD *)(a1[2] + 52) & 0x1FFFFLL;
                  unint64_t v112 = (uint64_t *)v110[425];
                  unint64_t v113 = v110[426];
                  if ((unint64_t)v112 >= v113)
                  {
                    uint64_t v115 = (uint64_t *)v110[424];
                    uint64_t v116 = v112 - v115;
                    if ((unint64_t)(v116 + 1) >> 61) {
                      goto LABEL_254;
                    }
                    unint64_t v117 = v113 - (void)v115;
                    unint64_t v118 = (uint64_t)(v113 - (void)v115) >> 2;
                    if (v118 <= v116 + 1) {
                      unint64_t v118 = v116 + 1;
                    }
                    if (v117 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v119 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v119 = v118;
                    }
                    if (v119)
                    {
                      unint64_t v120 = (char *)sub_5714((uint64_t)(v110 + 426), v119);
                      unint64_t v112 = (uint64_t *)v110[425];
                      uint64_t v115 = (uint64_t *)v110[424];
                    }
                    else
                    {
                      unint64_t v120 = 0;
                    }
                    unint64_t v121 = (uint64_t *)&v120[8 * v116];
                    uint64_t v122 = &v120[8 * v119];
                    *unint64_t v121 = v111;
                    uint64_t v114 = v121 + 1;
                    while (v112 != v115)
                    {
                      uint64_t v123 = *--v112;
                      *--unint64_t v121 = v123;
                    }
                    v110[424] = v121;
                    v110[425] = v114;
                    v110[426] = v122;
                    if (v115) {
                      operator delete(v115);
                    }
                  }
                  else
                  {
                    *unint64_t v112 = v111;
                    uint64_t v114 = v112 + 1;
                  }
                  v110[425] = v114;
                  if (!*(_DWORD *)(v3 + 48))
                  {
                    unint64_t v124 = *(void **)a1[1];
                    uint64_t v125 = *(_DWORD *)(a1[2] + 48) & 0x1FFFFLL;
                    unint64_t v126 = (uint64_t *)v124[428];
                    unint64_t v127 = v124[429];
                    if ((unint64_t)v126 >= v127)
                    {
                      unint64_t v129 = (uint64_t *)v124[427];
                      uint64_t v130 = v126 - v129;
                      if ((unint64_t)(v130 + 1) >> 61) {
                        goto LABEL_254;
                      }
                      unint64_t v131 = v127 - (void)v129;
                      unint64_t v132 = (uint64_t)(v127 - (void)v129) >> 2;
                      if (v132 <= v130 + 1) {
                        unint64_t v132 = v130 + 1;
                      }
                      if (v131 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v133 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v133 = v132;
                      }
                      if (v133)
                      {
                        unint64_t v134 = (char *)sub_5714((uint64_t)(v124 + 429), v133);
                        unint64_t v126 = (uint64_t *)v124[428];
                        unint64_t v129 = (uint64_t *)v124[427];
                      }
                      else
                      {
                        unint64_t v134 = 0;
                      }
                      unint64_t v135 = (uint64_t *)&v134[8 * v130];
                      unint64_t v136 = &v134[8 * v133];
                      *unint64_t v135 = v125;
                      uint64_t v128 = v135 + 1;
                      while (v126 != v129)
                      {
                        uint64_t v137 = *--v126;
                        *--unint64_t v135 = v137;
                      }
                      v124[427] = v135;
                      v124[428] = v128;
                      v124[429] = v136;
                      if (v129) {
                        operator delete(v129);
                      }
                    }
                    else
                    {
                      uint64_t *v126 = v125;
                      uint64_t v128 = v126 + 1;
                    }
                    v124[428] = v128;
                    if (!*(_DWORD *)(v3 + 48))
                    {
                      unint64_t v138 = *(void **)a1[1];
                      uint64_t v139 = *(_DWORD *)(a1[2] + 56) & 0x1FFFFLL;
                      uint64_t v140 = (uint64_t *)v138[431];
                      unint64_t v141 = v138[432];
                      if ((unint64_t)v140 >= v141)
                      {
                        unint64_t v143 = (uint64_t *)v138[430];
                        uint64_t v144 = v140 - v143;
                        if ((unint64_t)(v144 + 1) >> 61) {
                          goto LABEL_254;
                        }
                        unint64_t v145 = v141 - (void)v143;
                        unint64_t v146 = (uint64_t)(v141 - (void)v143) >> 2;
                        if (v146 <= v144 + 1) {
                          unint64_t v146 = v144 + 1;
                        }
                        if (v145 >= 0x7FFFFFFFFFFFFFF8) {
                          unint64_t v147 = 0x1FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v147 = v146;
                        }
                        if (v147)
                        {
                          unint64_t v148 = (char *)sub_5714((uint64_t)(v138 + 432), v147);
                          uint64_t v140 = (uint64_t *)v138[431];
                          unint64_t v143 = (uint64_t *)v138[430];
                        }
                        else
                        {
                          unint64_t v148 = 0;
                        }
                        unint64_t v149 = (uint64_t *)&v148[8 * v144];
                        uint64_t v150 = &v148[8 * v147];
                        uint64_t *v149 = v139;
                        uint64_t v142 = v149 + 1;
                        while (v140 != v143)
                        {
                          uint64_t v151 = *--v140;
                          *--unint64_t v149 = v151;
                        }
                        v138[430] = v149;
                        v138[431] = v142;
                        v138[432] = v150;
                        if (v143) {
                          operator delete(v143);
                        }
                      }
                      else
                      {
                        uint64_t *v140 = v139;
                        uint64_t v142 = v140 + 1;
                      }
                      v138[431] = v142;
                      if (!*(_DWORD *)(v3 + 48))
                      {
                        uint64_t v152 = *(void **)a1[1];
                        uint64_t v153 = *(_WORD *)(a1[2] + 46) & 0x3FFF;
                        unint64_t v154 = (char *)v152[434];
                        unint64_t v155 = v152[435];
                        if ((unint64_t)v154 >= v155)
                        {
                          unint64_t v157 = (char *)v152[433];
                          uint64_t v158 = (v154 - v157) >> 3;
                          if ((unint64_t)(v158 + 1) >> 61) {
                            goto LABEL_254;
                          }
                          unint64_t v159 = v155 - (void)v157;
                          unint64_t v160 = (uint64_t)(v155 - (void)v157) >> 2;
                          if (v160 <= v158 + 1) {
                            unint64_t v160 = v158 + 1;
                          }
                          if (v159 >= 0x7FFFFFFFFFFFFFF8) {
                            unint64_t v161 = 0x1FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v161 = v160;
                          }
                          if (v161)
                          {
                            unint64_t v162 = (char *)sub_5714((uint64_t)(v152 + 435), v161);
                            unint64_t v154 = (char *)v152[434];
                            unint64_t v157 = (char *)v152[433];
                          }
                          else
                          {
                            unint64_t v162 = 0;
                          }
                          unint64_t v163 = &v162[8 * v158];
                          uint64_t v164 = &v162[8 * v161];
                          *(void *)unint64_t v163 = v153;
                          uint64_t v156 = v163 + 8;
                          while (v154 != v157)
                          {
                            uint64_t v165 = *((void *)v154 - 1);
                            v154 -= 8;
                            *((void *)v163 - 1) = v165;
                            v163 -= 8;
                          }
                          v152[433] = v163;
                          v152[434] = v156;
                          v152[435] = v164;
                          if (v157) {
                            operator delete(v157);
                          }
                        }
                        else
                        {
                          *(void *)unint64_t v154 = v153;
                          uint64_t v156 = v154 + 8;
                        }
                        v152[434] = v156;
                        if (!*(_DWORD *)(v3 + 48))
                        {
                          unint64_t v166 = *(void **)a1[1];
                          uint64_t v167 = *(_WORD *)(a1[2] + 44) & 0x3FFF;
                          unint64_t v168 = (char *)v166[437];
                          unint64_t v169 = v166[438];
                          if ((unint64_t)v168 >= v169)
                          {
                            unint64_t v171 = (char *)v166[436];
                            uint64_t v172 = (v168 - v171) >> 3;
                            if ((unint64_t)(v172 + 1) >> 61) {
                              goto LABEL_254;
                            }
                            unint64_t v173 = v169 - (void)v171;
                            unint64_t v174 = (uint64_t)(v169 - (void)v171) >> 2;
                            if (v174 <= v172 + 1) {
                              unint64_t v174 = v172 + 1;
                            }
                            if (v173 >= 0x7FFFFFFFFFFFFFF8) {
                              unint64_t v175 = 0x1FFFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v175 = v174;
                            }
                            if (v175)
                            {
                              unint64_t v176 = (char *)sub_5714((uint64_t)(v166 + 438), v175);
                              unint64_t v168 = (char *)v166[437];
                              unint64_t v171 = (char *)v166[436];
                            }
                            else
                            {
                              unint64_t v176 = 0;
                            }
                            unint64_t v177 = &v176[8 * v172];
                            unsigned int v178 = &v176[8 * v175];
                            *(void *)unint64_t v177 = v167;
                            uint64_t v170 = v177 + 8;
                            while (v168 != v171)
                            {
                              uint64_t v179 = *((void *)v168 - 1);
                              v168 -= 8;
                              *((void *)v177 - 1) = v179;
                              v177 -= 8;
                            }
                            v166[436] = v177;
                            v166[437] = v170;
                            v166[438] = v178;
                            if (v171) {
                              operator delete(v171);
                            }
                          }
                          else
                          {
                            *(void *)unint64_t v168 = v167;
                            uint64_t v170 = v168 + 8;
                          }
                          v166[437] = v170;
                          if (!*(_DWORD *)(v3 + 48))
                          {
                            uint64_t v180 = a1[1];
                            uint64_t v181 = *(void **)v180;
                            uint64_t v182 = *(unsigned __int16 *)(a1[2] + 62);
                            uint64_t v183 = *(char **)(*(void *)v180 + 3520);
                            unint64_t v184 = *(void *)(*(void *)v180 + 3528);
                            if ((unint64_t)v183 >= v184)
                            {
                              unint64_t v186 = (char *)v181[439];
                              uint64_t v187 = (v183 - v186) >> 3;
                              if ((unint64_t)(v187 + 1) >> 61) {
                                goto LABEL_254;
                              }
                              unint64_t v188 = v184 - (void)v186;
                              unint64_t v189 = (uint64_t)(v184 - (void)v186) >> 2;
                              if (v189 <= v187 + 1) {
                                unint64_t v189 = v187 + 1;
                              }
                              if (v188 >= 0x7FFFFFFFFFFFFFF8) {
                                unint64_t v190 = 0x1FFFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v190 = v189;
                              }
                              if (v190)
                              {
                                unint64_t v191 = (char *)sub_5714((uint64_t)(v181 + 441), v190);
                                uint64_t v183 = (char *)v181[440];
                                unint64_t v186 = (char *)v181[439];
                              }
                              else
                              {
                                unint64_t v191 = 0;
                              }
                              unint64_t v192 = &v191[8 * v187];
                              uint64_t v193 = &v191[8 * v190];
                              *(void *)unint64_t v192 = v182;
                              unint64_t v185 = v192 + 8;
                              while (v183 != v186)
                              {
                                uint64_t v194 = *((void *)v183 - 1);
                                v183 -= 8;
                                *((void *)v192 - 1) = v194;
                                v192 -= 8;
                              }
                              v181[439] = v192;
                              v181[440] = v185;
                              v181[441] = v193;
                              if (v186) {
                                operator delete(v186);
                              }
                            }
                            else
                            {
                              *(void *)uint64_t v183 = v182;
                              unint64_t v185 = v183 + 8;
                            }
                            v181[440] = v185;
                            if (!*(_DWORD *)(v3 + 48))
                            {
                              uint64_t v195 = *(void **)a1[1];
                              uint64_t v196 = *(_DWORD *)(a1[2] + 32) & 0x1FFFFLL;
                              uint64_t v197 = (uint64_t *)v195[443];
                              unint64_t v198 = v195[444];
                              if ((unint64_t)v197 >= v198)
                              {
                                unint64_t v200 = (uint64_t *)v195[442];
                                uint64_t v201 = v197 - v200;
                                if ((unint64_t)(v201 + 1) >> 61) {
                                  goto LABEL_254;
                                }
                                unint64_t v202 = v198 - (void)v200;
                                unint64_t v203 = (uint64_t)(v198 - (void)v200) >> 2;
                                if (v203 <= v201 + 1) {
                                  unint64_t v203 = v201 + 1;
                                }
                                if (v202 >= 0x7FFFFFFFFFFFFFF8) {
                                  unint64_t v204 = 0x1FFFFFFFFFFFFFFFLL;
                                }
                                else {
                                  unint64_t v204 = v203;
                                }
                                if (v204)
                                {
                                  unint64_t v205 = (char *)sub_5714((uint64_t)(v195 + 444), v204);
                                  uint64_t v197 = (uint64_t *)v195[443];
                                  unint64_t v200 = (uint64_t *)v195[442];
                                }
                                else
                                {
                                  unint64_t v205 = 0;
                                }
                                uint64_t v206 = (uint64_t *)&v205[8 * v201];
                                uint64_t v207 = &v205[8 * v204];
                                uint64_t *v206 = v196;
                                unint64_t v199 = v206 + 1;
                                while (v197 != v200)
                                {
                                  uint64_t v208 = *--v197;
                                  *--uint64_t v206 = v208;
                                }
                                v195[442] = v206;
                                v195[443] = v199;
                                v195[444] = v207;
                                if (v200) {
                                  operator delete(v200);
                                }
                              }
                              else
                              {
                                uint64_t *v197 = v196;
                                unint64_t v199 = v197 + 1;
                              }
                              v195[443] = v199;
                              if (!*(_DWORD *)(v3 + 48))
                              {
                                uint64_t v209 = a1[2];
                                unint64_t v210 = *(void **)a1[1];
                                uint64_t v211 = *(_DWORD *)(v209 + 36) & 0x1FFFFLL;
                                uint64_t v212 = (uint64_t *)v210[446];
                                unint64_t v213 = v210[447];
                                if ((unint64_t)v212 < v213)
                                {
                                  *uint64_t v212 = v211;
                                  unint64_t v214 = v212 + 1;
LABEL_261:
                                  v210[446] = v214;
                                  goto LABEL_262;
                                }
                                unint64_t v215 = (uint64_t *)v210[445];
                                uint64_t v216 = v212 - v215;
                                if (!((unint64_t)(v216 + 1) >> 61))
                                {
                                  unint64_t v217 = v213 - (void)v215;
                                  unint64_t v218 = (uint64_t)(v213 - (void)v215) >> 2;
                                  if (v218 <= v216 + 1) {
                                    unint64_t v218 = v216 + 1;
                                  }
                                  if (v217 >= 0x7FFFFFFFFFFFFFF8) {
                                    unint64_t v219 = 0x1FFFFFFFFFFFFFFFLL;
                                  }
                                  else {
                                    unint64_t v219 = v218;
                                  }
                                  if (v219)
                                  {
                                    unint64_t v220 = (char *)sub_5714((uint64_t)(v210 + 447), v219);
                                    uint64_t v212 = (uint64_t *)v210[446];
                                    unint64_t v215 = (uint64_t *)v210[445];
                                  }
                                  else
                                  {
                                    unint64_t v220 = 0;
                                  }
                                  uint64_t v221 = (uint64_t *)&v220[8 * v216];
                                  unint64_t v222 = &v220[8 * v219];
                                  *uint64_t v221 = v211;
                                  unint64_t v214 = v221 + 1;
                                  while (v212 != v215)
                                  {
                                    uint64_t v223 = *--v212;
                                    *--uint64_t v221 = v223;
                                  }
                                  v210[445] = v221;
                                  v210[446] = v214;
                                  v210[447] = v222;
                                  if (v215) {
                                    operator delete(v215);
                                  }
                                  goto LABEL_261;
                                }
LABEL_254:
                                sub_566C();
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_262:
    *a2 = 1;
    return;
  }
  if (!*(_DWORD *)(v3 + 48))
  {
    uint64_t v11 = (void *)a1[1];
    uint64_t v10 = a1[2];
    unsigned int v12 = *(_DWORD *)(v10 + 40);
    v10 += 40;
    uint64_t v13 = (void *)*v11;
    *(void *)(v13[404] - 8) += (unint64_t)v12 >> 17;
    *(void *)(v13[407] - 8) += *(_DWORD *)v10 & 0x1FFFF;
    *(void *)(v13[410] - 8) += *(_WORD *)(v10 - 12) & 0x7FFF;
    *(void *)(v13[413] - 8) += *(_WORD *)(v10 - 10) & 0x7FFF;
    *(void *)(v13[416] - 8) += *(_WORD *)(v10 - 16) & 0x7FFF;
    *(void *)(v13[419] - 8) += *(_WORD *)(v10 - 14) & 0x7FFF;
    *(void *)(v13[422] - 8) += *(unsigned __int16 *)(v10 + 20);
    *(void *)(v13[425] - 8) += *(_DWORD *)(v10 + 12) & 0x1FFFF;
    *(void *)(v13[428] - 8) += *(_DWORD *)(v10 + 8) & 0x1FFFF;
    *(void *)(v13[431] - 8) += *(_DWORD *)(v10 + 16) & 0x1FFFF;
    uint64_t v14 = a1[2];
    unint64_t v15 = (void *)*v11;
    *(void *)(v15[434] - 8) += *(_WORD *)(v14 + 46) & 0x3FFF;
    *(void *)(v15[437] - 8) += *(_WORD *)(v14 + 44) & 0x3FFF;
    *(void *)(v15[440] - 8) += *(unsigned __int16 *)(v14 + 62);
    *(void *)(v15[443] - 8) += *(_DWORD *)(v14 + 32) & 0x1FFFF;
    *(void *)(v15[446] - 8) += *(_DWORD *)(v14 + 36) & 0x1FFFF;
  }
}

void sub_86010(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    if (*(_DWORD *)(v3 + 48)) {
      goto LABEL_74;
    }
    uint64_t v5 = *(void **)a1[1];
    uint64_t v6 = *(_DWORD *)(a1[2] + 32) & 0x7FFFFLL;
    char v7 = (uint64_t *)v5[449];
    unint64_t v8 = v5[450];
    if ((unint64_t)v7 >= v8)
    {
      unsigned int v12 = (uint64_t *)v5[448];
      uint64_t v13 = v7 - v12;
      if ((unint64_t)(v13 + 1) >> 61) {
        goto LABEL_76;
      }
      unint64_t v14 = v8 - (void)v12;
      unint64_t v15 = (uint64_t)(v8 - (void)v12) >> 2;
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      if (v14 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v15;
      }
      if (v16)
      {
        uint64_t v17 = (char *)sub_5714((uint64_t)(v5 + 450), v16);
        char v7 = (uint64_t *)v5[449];
        unsigned int v12 = (uint64_t *)v5[448];
      }
      else
      {
        uint64_t v17 = 0;
      }
      unint64_t v18 = (uint64_t *)&v17[8 * v13];
      unint64_t v19 = &v17[8 * v16];
      *unint64_t v18 = v6;
      uint64_t v9 = v18 + 1;
      while (v7 != v12)
      {
        uint64_t v20 = *--v7;
        *--unint64_t v18 = v20;
      }
      v5[448] = v18;
      v5[449] = v9;
      v5[450] = v19;
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      uint64_t *v7 = v6;
      uint64_t v9 = v7 + 1;
    }
    v5[449] = v9;
    if (!*(_DWORD *)(v3 + 48))
    {
      uint64_t v21 = *(void **)a1[1];
      uint64_t v22 = *(_DWORD *)(a1[2] + 36) & 0x3FFFFFLL;
      uint64_t v23 = (uint64_t *)v21[452];
      unint64_t v24 = v21[453];
      if ((unint64_t)v23 >= v24)
      {
        uint64_t v26 = (uint64_t *)v21[451];
        uint64_t v27 = v23 - v26;
        if ((unint64_t)(v27 + 1) >> 61) {
          goto LABEL_76;
        }
        unint64_t v28 = v24 - (void)v26;
        unint64_t v29 = (uint64_t)(v24 - (void)v26) >> 2;
        if (v29 <= v27 + 1) {
          unint64_t v29 = v27 + 1;
        }
        if (v28 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v29;
        }
        if (v30)
        {
          uint64_t v31 = (char *)sub_5714((uint64_t)(v21 + 453), v30);
          uint64_t v23 = (uint64_t *)v21[452];
          uint64_t v26 = (uint64_t *)v21[451];
        }
        else
        {
          uint64_t v31 = 0;
        }
        unint64_t v32 = (uint64_t *)&v31[8 * v27];
        unint64_t v33 = &v31[8 * v30];
        *unint64_t v32 = v22;
        unint64_t v25 = v32 + 1;
        while (v23 != v26)
        {
          uint64_t v34 = *--v23;
          *--unint64_t v32 = v34;
        }
        v21[451] = v32;
        v21[452] = v25;
        v21[453] = v33;
        if (v26) {
          operator delete(v26);
        }
      }
      else
      {
        *uint64_t v23 = v22;
        unint64_t v25 = v23 + 1;
      }
      v21[452] = v25;
      if (!*(_DWORD *)(v3 + 48))
      {
        uint64_t v35 = *(void **)a1[1];
        uint64_t v36 = *(_DWORD *)(a1[2] + 28) & 0x3FFFFFLL;
        unint64_t v37 = (uint64_t *)v35[455];
        unint64_t v38 = v35[456];
        if ((unint64_t)v37 >= v38)
        {
          uint64_t v40 = (uint64_t *)v35[454];
          uint64_t v41 = v37 - v40;
          if ((unint64_t)(v41 + 1) >> 61) {
            goto LABEL_76;
          }
          unint64_t v42 = v38 - (void)v40;
          unint64_t v43 = (uint64_t)(v38 - (void)v40) >> 2;
          if (v43 <= v41 + 1) {
            unint64_t v43 = v41 + 1;
          }
          if (v42 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v44 = v43;
          }
          if (v44)
          {
            uint64_t v45 = (char *)sub_5714((uint64_t)(v35 + 456), v44);
            unint64_t v37 = (uint64_t *)v35[455];
            uint64_t v40 = (uint64_t *)v35[454];
          }
          else
          {
            uint64_t v45 = 0;
          }
          unint64_t v46 = (uint64_t *)&v45[8 * v41];
          unint64_t v47 = &v45[8 * v44];
          *unint64_t v46 = v36;
          uint64_t v39 = v46 + 1;
          while (v37 != v40)
          {
            uint64_t v48 = *--v37;
            *--unint64_t v46 = v48;
          }
          v35[454] = v46;
          v35[455] = v39;
          v35[456] = v47;
          if (v40) {
            operator delete(v40);
          }
        }
        else
        {
          *unint64_t v37 = v36;
          uint64_t v39 = v37 + 1;
        }
        v35[455] = v39;
        if (!*(_DWORD *)(v3 + 48))
        {
          uint64_t v49 = a1[2];
          uint64_t v50 = *(void **)a1[1];
          uint64_t v51 = *(_DWORD *)(v49 + 24) & 0x3FFFFFLL;
          uint64_t v52 = (uint64_t *)v50[458];
          unint64_t v53 = v50[459];
          if ((unint64_t)v52 < v53)
          {
            *uint64_t v52 = v51;
            uint64_t v54 = v52 + 1;
LABEL_73:
            v50[458] = v54;
            goto LABEL_74;
          }
          uint64_t v55 = (uint64_t *)v50[457];
          uint64_t v56 = v52 - v55;
          if (!((unint64_t)(v56 + 1) >> 61))
          {
            unint64_t v57 = v53 - (void)v55;
            unint64_t v58 = (uint64_t)(v53 - (void)v55) >> 2;
            if (v58 <= v56 + 1) {
              unint64_t v58 = v56 + 1;
            }
            if (v57 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v59 = v58;
            }
            if (v59)
            {
              unint64_t v60 = (char *)sub_5714((uint64_t)(v50 + 459), v59);
              uint64_t v52 = (uint64_t *)v50[458];
              uint64_t v55 = (uint64_t *)v50[457];
            }
            else
            {
              unint64_t v60 = 0;
            }
            unint64_t v61 = (uint64_t *)&v60[8 * v56];
            unint64_t v62 = &v60[8 * v59];
            *unint64_t v61 = v51;
            uint64_t v54 = v61 + 1;
            while (v52 != v55)
            {
              uint64_t v63 = *--v52;
              *--unint64_t v61 = v63;
            }
            v50[457] = v61;
            v50[458] = v54;
            v50[459] = v62;
            if (v55) {
              operator delete(v55);
            }
            goto LABEL_73;
          }
LABEL_76:
          sub_566C();
        }
      }
    }
LABEL_74:
    *a2 = 1;
    return;
  }
  if (!*(_DWORD *)(v3 + 48))
  {
    uint64_t v10 = (_DWORD *)a1[2];
    uint64_t v11 = *(void **)a1[1];
    *(void *)(v11[449] - 8) += v10[8] & 0x7FFFF;
    *(void *)(v11[452] - 8) += v10[9] & 0x3FFFFF;
    *(void *)(v11[455] - 8) += v10[7] & 0x3FFFFF;
    *(void *)(v11[458] - 8) += v10[6] & 0x3FFFFF;
  }
}

void sub_8640C(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2) {
      return;
    }
    if (*(_DWORD *)(v3 + 48)) {
      goto LABEL_176;
    }
    uint64_t v5 = *(void **)a1[1];
    uint64_t v6 = *(_WORD *)(a1[2] + 34) & 0x1FFF;
    char v7 = (char *)v5[551];
    unint64_t v8 = v5[552];
    if ((unint64_t)v7 >= v8)
    {
      unsigned int v12 = (char *)v5[550];
      uint64_t v13 = (v7 - v12) >> 3;
      if ((unint64_t)(v13 + 1) >> 61) {
        goto LABEL_178;
      }
      unint64_t v14 = v8 - (void)v12;
      unint64_t v15 = (uint64_t)(v8 - (void)v12) >> 2;
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      if (v14 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v15;
      }
      if (v16)
      {
        uint64_t v17 = (char *)sub_5714((uint64_t)(v5 + 552), v16);
        char v7 = (char *)v5[551];
        unsigned int v12 = (char *)v5[550];
      }
      else
      {
        uint64_t v17 = 0;
      }
      unint64_t v18 = &v17[8 * v13];
      unint64_t v19 = &v17[8 * v16];
      *(void *)unint64_t v18 = v6;
      uint64_t v9 = v18 + 8;
      while (v7 != v12)
      {
        uint64_t v20 = *((void *)v7 - 1);
        v7 -= 8;
        *((void *)v18 - 1) = v20;
        v18 -= 8;
      }
      v5[550] = v18;
      v5[551] = v9;
      v5[552] = v19;
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      *(void *)char v7 = v6;
      uint64_t v9 = v7 + 8;
    }
    v5[551] = v9;
    if (!*(_DWORD *)(v3 + 48))
    {
      uint64_t v21 = *(void **)a1[1];
      uint64_t v22 = *(_DWORD *)(a1[2] + 40) & 0x3FFFFLL;
      uint64_t v23 = (uint64_t *)v21[554];
      unint64_t v24 = v21[555];
      if ((unint64_t)v23 >= v24)
      {
        uint64_t v26 = (uint64_t *)v21[553];
        uint64_t v27 = v23 - v26;
        if ((unint64_t)(v27 + 1) >> 61) {
          goto LABEL_178;
        }
        unint64_t v28 = v24 - (void)v26;
        unint64_t v29 = (uint64_t)(v24 - (void)v26) >> 2;
        if (v29 <= v27 + 1) {
          unint64_t v29 = v27 + 1;
        }
        if (v28 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v29;
        }
        if (v30)
        {
          uint64_t v31 = (char *)sub_5714((uint64_t)(v21 + 555), v30);
          uint64_t v23 = (uint64_t *)v21[554];
          uint64_t v26 = (uint64_t *)v21[553];
        }
        else
        {
          uint64_t v31 = 0;
        }
        unint64_t v32 = (uint64_t *)&v31[8 * v27];
        unint64_t v33 = &v31[8 * v30];
        *unint64_t v32 = v22;
        unint64_t v25 = v32 + 1;
        while (v23 != v26)
        {
          uint64_t v34 = *--v23;
          *--unint64_t v32 = v34;
        }
        v21[553] = v32;
        v21[554] = v25;
        v21[555] = v33;
        if (v26) {
          operator delete(v26);
        }
      }
      else
      {
        *uint64_t v23 = v22;
        unint64_t v25 = v23 + 1;
      }
      v21[554] = v25;
      if (!*(_DWORD *)(v3 + 48))
      {
        uint64_t v35 = *(void **)a1[1];
        uint64_t v36 = *(_WORD *)(a1[2] + 32) & 0x1FFF;
        unint64_t v37 = (char *)v35[557];
        unint64_t v38 = v35[558];
        if ((unint64_t)v37 >= v38)
        {
          uint64_t v40 = (char *)v35[556];
          uint64_t v41 = (v37 - v40) >> 3;
          if ((unint64_t)(v41 + 1) >> 61) {
            goto LABEL_178;
          }
          unint64_t v42 = v38 - (void)v40;
          unint64_t v43 = (uint64_t)(v38 - (void)v40) >> 2;
          if (v43 <= v41 + 1) {
            unint64_t v43 = v41 + 1;
          }
          if (v42 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v44 = v43;
          }
          if (v44)
          {
            uint64_t v45 = (char *)sub_5714((uint64_t)(v35 + 558), v44);
            unint64_t v37 = (char *)v35[557];
            uint64_t v40 = (char *)v35[556];
          }
          else
          {
            uint64_t v45 = 0;
          }
          unint64_t v46 = &v45[8 * v41];
          unint64_t v47 = &v45[8 * v44];
          *(void *)unint64_t v46 = v36;
          uint64_t v39 = v46 + 8;
          while (v37 != v40)
          {
            uint64_t v48 = *((void *)v37 - 1);
            v37 -= 8;
            *((void *)v46 - 1) = v48;
            v46 -= 8;
          }
          v35[556] = v46;
          v35[557] = v39;
          v35[558] = v47;
          if (v40) {
            operator delete(v40);
          }
        }
        else
        {
          *(void *)unint64_t v37 = v36;
          uint64_t v39 = v37 + 8;
        }
        v35[557] = v39;
        if (!*(_DWORD *)(v3 + 48))
        {
          uint64_t v49 = *(void **)a1[1];
          unint64_t v50 = ((unint64_t)*(unsigned int *)(a1[2] + 36) >> 13) & 0x3FFFF;
          uint64_t v51 = (unint64_t *)v49[560];
          unint64_t v52 = v49[561];
          if ((unint64_t)v51 >= v52)
          {
            uint64_t v54 = (unint64_t *)v49[559];
            uint64_t v55 = v51 - v54;
            if ((unint64_t)(v55 + 1) >> 61) {
              goto LABEL_178;
            }
            unint64_t v56 = v52 - (void)v54;
            unint64_t v57 = (uint64_t)(v52 - (void)v54) >> 2;
            if (v57 <= v55 + 1) {
              unint64_t v57 = v55 + 1;
            }
            if (v56 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v58 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v58 = v57;
            }
            if (v58)
            {
              unint64_t v59 = (char *)sub_5714((uint64_t)(v49 + 561), v58);
              uint64_t v51 = (unint64_t *)v49[560];
              uint64_t v54 = (unint64_t *)v49[559];
            }
            else
            {
              unint64_t v59 = 0;
            }
            unint64_t v60 = (unint64_t *)&v59[8 * v55];
            unint64_t v61 = &v59[8 * v58];
            *unint64_t v60 = v50;
            unint64_t v53 = v60 + 1;
            while (v51 != v54)
            {
              unint64_t v62 = *--v51;
              *--unint64_t v60 = v62;
            }
            v49[559] = v60;
            v49[560] = v53;
            v49[561] = v61;
            if (v54) {
              operator delete(v54);
            }
          }
          else
          {
            unint64_t *v51 = v50;
            unint64_t v53 = v51 + 1;
          }
          v49[560] = v53;
          if (!*(_DWORD *)(v3 + 48))
          {
            uint64_t v63 = *(void **)a1[1];
            uint64_t v64 = *(_DWORD *)(a1[2] + 36) & 0x1FFFLL;
            unint64_t v65 = (uint64_t *)v63[563];
            unint64_t v66 = v63[564];
            if ((unint64_t)v65 >= v66)
            {
              uint64_t v68 = (uint64_t *)v63[562];
              uint64_t v69 = v65 - v68;
              if ((unint64_t)(v69 + 1) >> 61) {
                goto LABEL_178;
              }
              unint64_t v70 = v66 - (void)v68;
              unint64_t v71 = (uint64_t)(v66 - (void)v68) >> 2;
              if (v71 <= v69 + 1) {
                unint64_t v71 = v69 + 1;
              }
              if (v70 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v72 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v72 = v71;
              }
              if (v72)
              {
                uint64_t v73 = (char *)sub_5714((uint64_t)(v63 + 564), v72);
                unint64_t v65 = (uint64_t *)v63[563];
                uint64_t v68 = (uint64_t *)v63[562];
              }
              else
              {
                uint64_t v73 = 0;
              }
              unint64_t v74 = (uint64_t *)&v73[8 * v69];
              unint64_t v75 = &v73[8 * v72];
              uint64_t *v74 = v64;
              uint64_t v67 = v74 + 1;
              while (v65 != v68)
              {
                uint64_t v76 = *--v65;
                *--unint64_t v74 = v76;
              }
              v63[562] = v74;
              v63[563] = v67;
              v63[564] = v75;
              if (v68) {
                operator delete(v68);
              }
            }
            else
            {
              uint64_t *v65 = v64;
              uint64_t v67 = v65 + 1;
            }
            v63[563] = v67;
            if (!*(_DWORD *)(v3 + 48))
            {
              uint64_t v77 = *(void **)a1[1];
              uint64_t v78 = *(_DWORD *)(a1[2] + 44) & 0x3FFFFLL;
              uint64_t v79 = (uint64_t *)v77[566];
              unint64_t v80 = v77[567];
              if ((unint64_t)v79 >= v80)
              {
                uint64_t v82 = (uint64_t *)v77[565];
                uint64_t v83 = v79 - v82;
                if ((unint64_t)(v83 + 1) >> 61) {
                  goto LABEL_178;
                }
                unint64_t v84 = v80 - (void)v82;
                unint64_t v85 = (uint64_t)(v80 - (void)v82) >> 2;
                if (v85 <= v83 + 1) {
                  unint64_t v85 = v83 + 1;
                }
                if (v84 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v86 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v86 = v85;
                }
                if (v86)
                {
                  uint64_t v87 = (char *)sub_5714((uint64_t)(v77 + 567), v86);
                  uint64_t v79 = (uint64_t *)v77[566];
                  uint64_t v82 = (uint64_t *)v77[565];
                }
                else
                {
                  uint64_t v87 = 0;
                }
                unint64_t v88 = (uint64_t *)&v87[8 * v83];
                unint64_t v89 = &v87[8 * v86];
                uint64_t *v88 = v78;
                unint64_t v81 = v88 + 1;
                while (v79 != v82)
                {
                  uint64_t v90 = *--v79;
                  *--unint64_t v88 = v90;
                }
                v77[565] = v88;
                v77[566] = v81;
                v77[567] = v89;
                if (v82) {
                  operator delete(v82);
                }
              }
              else
              {
                uint64_t *v79 = v78;
                unint64_t v81 = v79 + 1;
              }
              v77[566] = v81;
              if (!*(_DWORD *)(v3 + 48))
              {
                uint64_t v91 = *(void **)a1[1];
                uint64_t v92 = *(_WORD *)(a1[2] + 28) & 0x3FFF;
                unint64_t v93 = (char *)v91[569];
                unint64_t v94 = v91[570];
                if ((unint64_t)v93 >= v94)
                {
                  unint64_t v96 = (char *)v91[568];
                  uint64_t v97 = (v93 - v96) >> 3;
                  if ((unint64_t)(v97 + 1) >> 61) {
                    goto LABEL_178;
                  }
                  unint64_t v98 = v94 - (void)v96;
                  unint64_t v99 = (uint64_t)(v94 - (void)v96) >> 2;
                  if (v99 <= v97 + 1) {
                    unint64_t v99 = v97 + 1;
                  }
                  if (v98 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v100 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v100 = v99;
                  }
                  if (v100)
                  {
                    unint64_t v101 = (char *)sub_5714((uint64_t)(v91 + 570), v100);
                    unint64_t v93 = (char *)v91[569];
                    unint64_t v96 = (char *)v91[568];
                  }
                  else
                  {
                    unint64_t v101 = 0;
                  }
                  uint64_t v102 = &v101[8 * v97];
                  unint64_t v103 = &v101[8 * v100];
                  *(void *)uint64_t v102 = v92;
                  uint64_t v95 = v102 + 8;
                  while (v93 != v96)
                  {
                    uint64_t v104 = *((void *)v93 - 1);
                    v93 -= 8;
                    *((void *)v102 - 1) = v104;
                    v102 -= 8;
                  }
                  v91[568] = v102;
                  v91[569] = v95;
                  v91[570] = v103;
                  if (v96) {
                    operator delete(v96);
                  }
                }
                else
                {
                  *(void *)unint64_t v93 = v92;
                  uint64_t v95 = v93 + 8;
                }
                v91[569] = v95;
                if (!*(_DWORD *)(v3 + 48))
                {
                  unint64_t v105 = *(void **)a1[1];
                  uint64_t v106 = *(_WORD *)(a1[2] + 24) & 0x3FFF;
                  uint64_t v107 = (char *)v105[572];
                  unint64_t v108 = v105[573];
                  if ((unint64_t)v107 >= v108)
                  {
                    uint64_t v110 = (char *)v105[571];
                    uint64_t v111 = (v107 - v110) >> 3;
                    if ((unint64_t)(v111 + 1) >> 61) {
                      goto LABEL_178;
                    }
                    unint64_t v112 = v108 - (void)v110;
                    unint64_t v113 = (uint64_t)(v108 - (void)v110) >> 2;
                    if (v113 <= v111 + 1) {
                      unint64_t v113 = v111 + 1;
                    }
                    if (v112 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v114 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v114 = v113;
                    }
                    if (v114)
                    {
                      uint64_t v115 = (char *)sub_5714((uint64_t)(v105 + 573), v114);
                      uint64_t v107 = (char *)v105[572];
                      uint64_t v110 = (char *)v105[571];
                    }
                    else
                    {
                      uint64_t v115 = 0;
                    }
                    uint64_t v116 = &v115[8 * v111];
                    unint64_t v117 = &v115[8 * v114];
                    *(void *)uint64_t v116 = v106;
                    uint64_t v109 = v116 + 8;
                    while (v107 != v110)
                    {
                      uint64_t v118 = *((void *)v107 - 1);
                      v107 -= 8;
                      *((void *)v116 - 1) = v118;
                      v116 -= 8;
                    }
                    v105[571] = v116;
                    v105[572] = v109;
                    v105[573] = v117;
                    if (v110) {
                      operator delete(v110);
                    }
                  }
                  else
                  {
                    *(void *)uint64_t v107 = v106;
                    uint64_t v109 = v107 + 8;
                  }
                  v105[572] = v109;
                  if (!*(_DWORD *)(v3 + 48))
                  {
                    unint64_t v119 = *(void **)a1[1];
                    uint64_t v120 = *(_WORD *)(a1[2] + 30) & 0x3FFF;
                    unint64_t v121 = (char *)v119[575];
                    unint64_t v122 = v119[576];
                    if ((unint64_t)v121 >= v122)
                    {
                      unint64_t v124 = (char *)v119[574];
                      uint64_t v125 = (v121 - v124) >> 3;
                      if ((unint64_t)(v125 + 1) >> 61) {
                        goto LABEL_178;
                      }
                      unint64_t v126 = v122 - (void)v124;
                      unint64_t v127 = (uint64_t)(v122 - (void)v124) >> 2;
                      if (v127 <= v125 + 1) {
                        unint64_t v127 = v125 + 1;
                      }
                      if (v126 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v128 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v128 = v127;
                      }
                      if (v128)
                      {
                        unint64_t v129 = (char *)sub_5714((uint64_t)(v119 + 576), v128);
                        unint64_t v121 = (char *)v119[575];
                        unint64_t v124 = (char *)v119[574];
                      }
                      else
                      {
                        unint64_t v129 = 0;
                      }
                      uint64_t v130 = &v129[8 * v125];
                      unint64_t v131 = &v129[8 * v128];
                      *(void *)uint64_t v130 = v120;
                      uint64_t v123 = v130 + 8;
                      while (v121 != v124)
                      {
                        uint64_t v132 = *((void *)v121 - 1);
                        v121 -= 8;
                        *((void *)v130 - 1) = v132;
                        v130 -= 8;
                      }
                      v119[574] = v130;
                      v119[575] = v123;
                      v119[576] = v131;
                      if (v124) {
                        operator delete(v124);
                      }
                    }
                    else
                    {
                      *(void *)unint64_t v121 = v120;
                      uint64_t v123 = v121 + 8;
                    }
                    v119[575] = v123;
                    if (!*(_DWORD *)(v3 + 48))
                    {
                      uint64_t v133 = a1[2];
                      unint64_t v134 = *(void **)a1[1];
                      uint64_t v135 = *(_WORD *)(v133 + 26) & 0x3FFF;
                      unint64_t v136 = (char *)v134[578];
                      unint64_t v137 = v134[579];
                      if ((unint64_t)v136 < v137)
                      {
                        *(void *)unint64_t v136 = v135;
                        unint64_t v138 = v136 + 8;
LABEL_175:
                        v134[578] = v138;
                        goto LABEL_176;
                      }
                      uint64_t v139 = (char *)v134[577];
                      uint64_t v140 = (v136 - v139) >> 3;
                      if (!((unint64_t)(v140 + 1) >> 61))
                      {
                        unint64_t v141 = v137 - (void)v139;
                        unint64_t v142 = (uint64_t)(v137 - (void)v139) >> 2;
                        if (v142 <= v140 + 1) {
                          unint64_t v142 = v140 + 1;
                        }
                        if (v141 >= 0x7FFFFFFFFFFFFFF8) {
                          unint64_t v143 = 0x1FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v143 = v142;
                        }
                        if (v143)
                        {
                          uint64_t v144 = (char *)sub_5714((uint64_t)(v134 + 579), v143);
                          unint64_t v136 = (char *)v134[578];
                          uint64_t v139 = (char *)v134[577];
                        }
                        else
                        {
                          uint64_t v144 = 0;
                        }
                        unint64_t v145 = &v144[8 * v140];
                        unint64_t v146 = &v144[8 * v143];
                        *(void *)unint64_t v145 = v135;
                        unint64_t v138 = v145 + 8;
                        while (v136 != v139)
                        {
                          uint64_t v147 = *((void *)v136 - 1);
                          v136 -= 8;
                          *((void *)v145 - 1) = v147;
                          v145 -= 8;
                        }
                        v134[577] = v145;
                        v134[578] = v138;
                        v134[579] = v146;
                        if (v139) {
                          operator delete(v139);
                        }
                        goto LABEL_175;
                      }
LABEL_178:
                      sub_566C();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_176:
    *a2 = 1;
    return;
  }
  if (!*(_DWORD *)(v3 + 48))
  {
    uint64_t v10 = a1[2];
    uint64_t v11 = *(void **)a1[1];
    *(void *)(v11[551] - 8) += *(_WORD *)(v10 + 34) & 0x1FFF;
    *(void *)(v11[554] - 8) += *(_DWORD *)(v10 + 40) & 0x3FFFF;
    *(void *)(v11[557] - 8) += *(_WORD *)(v10 + 32) & 0x1FFF;
    *(void *)(v11[560] - 8) += ((unint64_t)*(unsigned int *)(v10 + 36) >> 13) & 0x3FFFF;
    *(void *)(v11[563] - 8) += *(_DWORD *)(v10 + 36) & 0x1FFF;
    *(void *)(v11[566] - 8) += *(_DWORD *)(v10 + 44) & 0x3FFFF;
    *(void *)(v11[569] - 8) += *(_WORD *)(v10 + 28) & 0x3FFF;
    *(void *)(v11[572] - 8) += *(_WORD *)(v10 + 24) & 0x3FFF;
    *(void *)(v11[575] - 8) += *(_WORD *)(v10 + 30) & 0x3FFF;
    *(void *)(v11[578] - 8) += *(_WORD *)(v10 + 26) & 0x3FFF;
  }
}

void sub_86DB0(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    unint64_t v297 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    unint64_t v296 = *v297;
    uint64_t v298 = (char *)v297[1] - (char *)*v297;
    if (v298)
    {
      unint64_t v299 = v298 >> 2;
      if (v299 <= 1) {
        unint64_t v299 = 1;
      }
      do
      {
        int v300 = *v296++;
        switch(v300)
        {
          case 129:
            unint64_t v301 = *(_WORD *)(a1[3] + 58) & 0x3FFF;
            unint64_t v302 = (void *)(*(void *)a1[2] + 3880);
            goto LABEL_410;
          case 130:
            unint64_t v301 = *(_WORD *)(a1[3] + 40) & 0x3FFF;
            unint64_t v302 = (void *)(*(void *)a1[2] + 3904);
            goto LABEL_410;
          case 131:
            unint64_t v301 = *(_WORD *)(a1[3] + 60) & 0x3FFF;
            unint64_t v302 = (void *)(*(void *)a1[2] + 3928);
            goto LABEL_410;
          case 132:
            unint64_t v301 = *(_WORD *)(a1[3] + 42) & 0x3FFF;
            unint64_t v302 = (void *)(*(void *)a1[2] + 3952);
            goto LABEL_410;
          case 133:
            unint64_t v301 = *(_WORD *)(a1[3] + 62) & 0x3FFF;
            unint64_t v302 = (void *)(*(void *)a1[2] + 3976);
            goto LABEL_410;
          case 134:
            unint64_t v301 = *(_WORD *)(a1[3] + 44) & 0x3FFF;
            unint64_t v302 = (void *)(*(void *)a1[2] + 4000);
            goto LABEL_410;
          case 135:
            unint64_t v301 = *(_DWORD *)(a1[3] + 28) & 0x3FFFF;
            unint64_t v302 = (void *)(*(void *)a1[2] + 4024);
            goto LABEL_410;
          case 136:
            unint64_t v301 = *(_WORD *)(a1[3] + 52) & 0x3FFF;
            unint64_t v302 = (void *)(*(void *)a1[2] + 4048);
            goto LABEL_410;
          case 137:
            unint64_t v301 = *(_WORD *)(a1[3] + 34) & 0x3FFF;
            unint64_t v302 = (void *)(*(void *)a1[2] + 4072);
            goto LABEL_410;
          case 138:
            unint64_t v301 = *(_WORD *)(a1[3] + 54) & 0x3FFF;
            unint64_t v302 = (void *)(*(void *)a1[2] + 4096);
            goto LABEL_410;
          case 139:
            unint64_t v301 = *(_WORD *)(a1[3] + 36) & 0x3FFF;
            unint64_t v302 = (void *)(*(void *)a1[2] + 4120);
            goto LABEL_410;
          case 140:
            unint64_t v301 = *(_WORD *)(a1[3] + 56) & 0x3FFF;
            unint64_t v302 = (void *)(*(void *)a1[2] + 4144);
            goto LABEL_410;
          case 141:
            unint64_t v301 = *(_WORD *)(a1[3] + 38) & 0x3FFF;
            unint64_t v302 = (void *)(*(void *)a1[2] + 4168);
            goto LABEL_410;
          case 142:
            unint64_t v301 = *(_DWORD *)(a1[3] + 24) & 0x3FFFF;
            unint64_t v302 = (void *)(*(void *)a1[2] + 4192);
            goto LABEL_410;
          case 143:
            unint64_t v301 = *(_WORD *)(a1[3] + 68) & 0x7FF;
            unint64_t v302 = (void *)(*(void *)a1[2] + 4216);
            goto LABEL_410;
          case 144:
            unint64_t v301 = *(_WORD *)(a1[3] + 50) & 0x7FF;
            unint64_t v302 = (void *)(*(void *)a1[2] + 4240);
            goto LABEL_410;
          case 145:
            unint64_t v301 = *(_WORD *)(a1[3] + 32) & 0x1FFF;
            unint64_t v302 = (void *)(*(void *)a1[2] + 4264);
            goto LABEL_410;
          case 146:
            unint64_t v301 = *(_WORD *)(a1[3] + 64) & 0x1FF;
            unint64_t v302 = (void *)(*(void *)a1[2] + 4288);
            goto LABEL_410;
          case 147:
            unint64_t v301 = *(_WORD *)(a1[3] + 46) & 0x1FF;
            unint64_t v302 = (void *)(*(void *)a1[2] + 4312);
            goto LABEL_410;
          case 148:
            unint64_t v301 = *(_WORD *)(a1[3] + 66) & 0x1FF;
            unint64_t v302 = (void *)(*(void *)a1[2] + 4336);
            goto LABEL_410;
          case 149:
            unint64_t v301 = *(_WORD *)(a1[3] + 48) & 0x1FF;
            unint64_t v302 = (void *)(*(void *)a1[2] + 4360);
            goto LABEL_410;
          case 150:
            unint64_t v301 = (unint64_t)*(unsigned int *)(a1[3] + 28) >> 18;
            unint64_t v302 = (void *)(*(void *)a1[2] + 4384);
LABEL_410:
            *(void *)(*v302 - 8) += v301;
            break;
          default:
            break;
        }
        --v299;
      }
      while (v299);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    uint64_t v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0x81:
            uint64_t v10 = *(void **)a1[2];
            uint64_t v11 = *(_WORD *)(a1[3] + 58) & 0x3FFF;
            unsigned int v12 = (char *)v10[485];
            unint64_t v13 = v10[486];
            if ((unint64_t)v12 >= v13)
            {
              uint64_t v120 = (char *)v10[484];
              uint64_t v121 = (v12 - v120) >> 3;
              if ((unint64_t)(v121 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v122 = v13 - (void)v120;
              unint64_t v123 = (uint64_t)(v13 - (void)v120) >> 2;
              if (v123 <= v121 + 1) {
                unint64_t v123 = v121 + 1;
              }
              if (v122 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v124 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v124 = v123;
              }
              if (v124)
              {
                uint64_t v125 = (char *)sub_5714((uint64_t)(v10 + 486), v124);
                unsigned int v12 = (char *)v10[485];
                uint64_t v120 = (char *)v10[484];
              }
              else
              {
                uint64_t v125 = 0;
              }
              unsigned int v252 = &v125[8 * v121];
              *(void *)unsigned int v252 = v11;
              unint64_t v14 = v252 + 8;
              while (v12 != v120)
              {
                uint64_t v253 = *((void *)v12 - 1);
                v12 -= 8;
                *((void *)v252 - 1) = v253;
                v252 -= 8;
              }
              v10[484] = v252;
              v10[485] = v14;
              v10[486] = &v125[8 * v124];
              if (v120) {
                operator delete(v120);
              }
            }
            else
            {
              *(void *)unsigned int v12 = v11;
              unint64_t v14 = v12 + 8;
            }
            v10[485] = v14;
            break;
          case 0x82:
            unint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_WORD *)(a1[3] + 40) & 0x3FFF;
            uint64_t v17 = (char *)v15[488];
            unint64_t v18 = v15[489];
            if ((unint64_t)v17 >= v18)
            {
              unint64_t v126 = (char *)v15[487];
              uint64_t v127 = (v17 - v126) >> 3;
              if ((unint64_t)(v127 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v128 = v18 - (void)v126;
              unint64_t v129 = (uint64_t)(v18 - (void)v126) >> 2;
              if (v129 <= v127 + 1) {
                unint64_t v129 = v127 + 1;
              }
              if (v128 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v130 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v130 = v129;
              }
              if (v130)
              {
                unint64_t v131 = (char *)sub_5714((uint64_t)(v15 + 489), v130);
                uint64_t v17 = (char *)v15[488];
                unint64_t v126 = (char *)v15[487];
              }
              else
              {
                unint64_t v131 = 0;
              }
              uint64_t v254 = &v131[8 * v127];
              *(void *)uint64_t v254 = v16;
              unint64_t v19 = v254 + 8;
              while (v17 != v126)
              {
                uint64_t v255 = *((void *)v17 - 1);
                v17 -= 8;
                *((void *)v254 - 1) = v255;
                v254 -= 8;
              }
              v15[487] = v254;
              v15[488] = v19;
              v15[489] = &v131[8 * v130];
              if (v126) {
                operator delete(v126);
              }
            }
            else
            {
              *(void *)uint64_t v17 = v16;
              unint64_t v19 = v17 + 8;
            }
            v15[488] = v19;
            break;
          case 0x83:
            uint64_t v20 = *(void **)a1[2];
            uint64_t v21 = *(_WORD *)(a1[3] + 60) & 0x3FFF;
            uint64_t v22 = (char *)v20[491];
            unint64_t v23 = v20[492];
            if ((unint64_t)v22 >= v23)
            {
              uint64_t v132 = (char *)v20[490];
              uint64_t v133 = (v22 - v132) >> 3;
              if ((unint64_t)(v133 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v134 = v23 - (void)v132;
              unint64_t v135 = (uint64_t)(v23 - (void)v132) >> 2;
              if (v135 <= v133 + 1) {
                unint64_t v135 = v133 + 1;
              }
              if (v134 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v136 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v136 = v135;
              }
              if (v136)
              {
                unint64_t v137 = (char *)sub_5714((uint64_t)(v20 + 492), v136);
                uint64_t v22 = (char *)v20[491];
                uint64_t v132 = (char *)v20[490];
              }
              else
              {
                unint64_t v137 = 0;
              }
              unint64_t v256 = &v137[8 * v133];
              *(void *)unint64_t v256 = v21;
              unint64_t v24 = v256 + 8;
              while (v22 != v132)
              {
                uint64_t v257 = *((void *)v22 - 1);
                v22 -= 8;
                *((void *)v256 - 1) = v257;
                v256 -= 8;
              }
              v20[490] = v256;
              v20[491] = v24;
              v20[492] = &v137[8 * v136];
              if (v132) {
                operator delete(v132);
              }
            }
            else
            {
              *(void *)uint64_t v22 = v21;
              unint64_t v24 = v22 + 8;
            }
            v20[491] = v24;
            break;
          case 0x84:
            unint64_t v25 = *(void **)a1[2];
            uint64_t v26 = *(_WORD *)(a1[3] + 42) & 0x3FFF;
            uint64_t v27 = (char *)v25[494];
            unint64_t v28 = v25[495];
            if ((unint64_t)v27 >= v28)
            {
              unint64_t v138 = (char *)v25[493];
              uint64_t v139 = (v27 - v138) >> 3;
              if ((unint64_t)(v139 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v140 = v28 - (void)v138;
              unint64_t v141 = (uint64_t)(v28 - (void)v138) >> 2;
              if (v141 <= v139 + 1) {
                unint64_t v141 = v139 + 1;
              }
              if (v140 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v142 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v142 = v141;
              }
              if (v142)
              {
                unint64_t v143 = (char *)sub_5714((uint64_t)(v25 + 495), v142);
                uint64_t v27 = (char *)v25[494];
                unint64_t v138 = (char *)v25[493];
              }
              else
              {
                unint64_t v143 = 0;
              }
              uint64_t v258 = &v143[8 * v139];
              *(void *)uint64_t v258 = v26;
              unint64_t v29 = v258 + 8;
              while (v27 != v138)
              {
                uint64_t v259 = *((void *)v27 - 1);
                v27 -= 8;
                *((void *)v258 - 1) = v259;
                v258 -= 8;
              }
              v25[493] = v258;
              v25[494] = v29;
              v25[495] = &v143[8 * v142];
              if (v138) {
                operator delete(v138);
              }
            }
            else
            {
              *(void *)uint64_t v27 = v26;
              unint64_t v29 = v27 + 8;
            }
            v25[494] = v29;
            break;
          case 0x85:
            unint64_t v30 = *(void **)a1[2];
            uint64_t v31 = *(_WORD *)(a1[3] + 62) & 0x3FFF;
            unint64_t v32 = (char *)v30[497];
            unint64_t v33 = v30[498];
            if ((unint64_t)v32 >= v33)
            {
              uint64_t v144 = (char *)v30[496];
              uint64_t v145 = (v32 - v144) >> 3;
              if ((unint64_t)(v145 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v146 = v33 - (void)v144;
              unint64_t v147 = (uint64_t)(v33 - (void)v144) >> 2;
              if (v147 <= v145 + 1) {
                unint64_t v147 = v145 + 1;
              }
              if (v146 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v148 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v148 = v147;
              }
              if (v148)
              {
                unint64_t v149 = (char *)sub_5714((uint64_t)(v30 + 498), v148);
                unint64_t v32 = (char *)v30[497];
                uint64_t v144 = (char *)v30[496];
              }
              else
              {
                unint64_t v149 = 0;
              }
              unint64_t v260 = &v149[8 * v145];
              *(void *)unint64_t v260 = v31;
              uint64_t v34 = v260 + 8;
              while (v32 != v144)
              {
                uint64_t v261 = *((void *)v32 - 1);
                v32 -= 8;
                *((void *)v260 - 1) = v261;
                v260 -= 8;
              }
              v30[496] = v260;
              v30[497] = v34;
              v30[498] = &v149[8 * v148];
              if (v144) {
                operator delete(v144);
              }
            }
            else
            {
              *(void *)unint64_t v32 = v31;
              uint64_t v34 = v32 + 8;
            }
            v30[497] = v34;
            break;
          case 0x86:
            uint64_t v35 = *(void **)a1[2];
            uint64_t v36 = *(_WORD *)(a1[3] + 44) & 0x3FFF;
            unint64_t v37 = (char *)v35[500];
            unint64_t v38 = v35[501];
            if ((unint64_t)v37 >= v38)
            {
              uint64_t v150 = (char *)v35[499];
              uint64_t v151 = (v37 - v150) >> 3;
              if ((unint64_t)(v151 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v152 = v38 - (void)v150;
              unint64_t v153 = (uint64_t)(v38 - (void)v150) >> 2;
              if (v153 <= v151 + 1) {
                unint64_t v153 = v151 + 1;
              }
              if (v152 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v154 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v154 = v153;
              }
              if (v154)
              {
                unint64_t v155 = (char *)sub_5714((uint64_t)(v35 + 501), v154);
                unint64_t v37 = (char *)v35[500];
                uint64_t v150 = (char *)v35[499];
              }
              else
              {
                unint64_t v155 = 0;
              }
              uint64_t v262 = &v155[8 * v151];
              *(void *)uint64_t v262 = v36;
              uint64_t v39 = v262 + 8;
              while (v37 != v150)
              {
                uint64_t v263 = *((void *)v37 - 1);
                v37 -= 8;
                *((void *)v262 - 1) = v263;
                v262 -= 8;
              }
              v35[499] = v262;
              v35[500] = v39;
              v35[501] = &v155[8 * v154];
              if (v150) {
                operator delete(v150);
              }
            }
            else
            {
              *(void *)unint64_t v37 = v36;
              uint64_t v39 = v37 + 8;
            }
            v35[500] = v39;
            break;
          case 0x87:
            uint64_t v40 = *(void **)a1[2];
            uint64_t v41 = *(_DWORD *)(a1[3] + 28) & 0x3FFFFLL;
            unint64_t v42 = (uint64_t *)v40[503];
            unint64_t v43 = v40[504];
            if ((unint64_t)v42 >= v43)
            {
              uint64_t v156 = (uint64_t *)v40[502];
              uint64_t v157 = v42 - v156;
              if ((unint64_t)(v157 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v158 = v43 - (void)v156;
              unint64_t v159 = (uint64_t)(v43 - (void)v156) >> 2;
              if (v159 <= v157 + 1) {
                unint64_t v159 = v157 + 1;
              }
              if (v158 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v160 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v160 = v159;
              }
              if (v160)
              {
                unint64_t v161 = (char *)sub_5714((uint64_t)(v40 + 504), v160);
                unint64_t v42 = (uint64_t *)v40[503];
                uint64_t v156 = (uint64_t *)v40[502];
              }
              else
              {
                unint64_t v161 = 0;
              }
              uint64_t v264 = (uint64_t *)&v161[8 * v157];
              uint64_t *v264 = v41;
              unint64_t v44 = v264 + 1;
              while (v42 != v156)
              {
                uint64_t v265 = *--v42;
                *--uint64_t v264 = v265;
              }
              v40[502] = v264;
              v40[503] = v44;
              v40[504] = &v161[8 * v160];
              if (v156) {
                operator delete(v156);
              }
            }
            else
            {
              *unint64_t v42 = v41;
              unint64_t v44 = v42 + 1;
            }
            v40[503] = v44;
            break;
          case 0x88:
            uint64_t v45 = *(void **)a1[2];
            uint64_t v46 = *(_WORD *)(a1[3] + 52) & 0x3FFF;
            unint64_t v47 = (char *)v45[506];
            unint64_t v48 = v45[507];
            if ((unint64_t)v47 >= v48)
            {
              unint64_t v162 = (char *)v45[505];
              uint64_t v163 = (v47 - v162) >> 3;
              if ((unint64_t)(v163 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v164 = v48 - (void)v162;
              unint64_t v165 = (uint64_t)(v48 - (void)v162) >> 2;
              if (v165 <= v163 + 1) {
                unint64_t v165 = v163 + 1;
              }
              if (v164 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v166 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v166 = v165;
              }
              if (v166)
              {
                uint64_t v167 = (char *)sub_5714((uint64_t)(v45 + 507), v166);
                unint64_t v47 = (char *)v45[506];
                unint64_t v162 = (char *)v45[505];
              }
              else
              {
                uint64_t v167 = 0;
              }
              unint64_t v266 = &v167[8 * v163];
              *(void *)unint64_t v266 = v46;
              uint64_t v49 = v266 + 8;
              while (v47 != v162)
              {
                uint64_t v267 = *((void *)v47 - 1);
                v47 -= 8;
                *((void *)v266 - 1) = v267;
                v266 -= 8;
              }
              v45[505] = v266;
              v45[506] = v49;
              v45[507] = &v167[8 * v166];
              if (v162) {
                operator delete(v162);
              }
            }
            else
            {
              *(void *)unint64_t v47 = v46;
              uint64_t v49 = v47 + 8;
            }
            v45[506] = v49;
            break;
          case 0x89:
            unint64_t v50 = *(void **)a1[2];
            uint64_t v51 = *(_WORD *)(a1[3] + 34) & 0x3FFF;
            unint64_t v52 = (char *)v50[509];
            unint64_t v53 = v50[510];
            if ((unint64_t)v52 >= v53)
            {
              unint64_t v168 = (char *)v50[508];
              uint64_t v169 = (v52 - v168) >> 3;
              if ((unint64_t)(v169 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v170 = v53 - (void)v168;
              unint64_t v171 = (uint64_t)(v53 - (void)v168) >> 2;
              if (v171 <= v169 + 1) {
                unint64_t v171 = v169 + 1;
              }
              if (v170 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v172 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v172 = v171;
              }
              if (v172)
              {
                unint64_t v173 = (char *)sub_5714((uint64_t)(v50 + 510), v172);
                unint64_t v52 = (char *)v50[509];
                unint64_t v168 = (char *)v50[508];
              }
              else
              {
                unint64_t v173 = 0;
              }
              uint64_t v268 = &v173[8 * v169];
              *(void *)uint64_t v268 = v51;
              uint64_t v54 = v268 + 8;
              while (v52 != v168)
              {
                uint64_t v269 = *((void *)v52 - 1);
                v52 -= 8;
                *((void *)v268 - 1) = v269;
                v268 -= 8;
              }
              v50[508] = v268;
              v50[509] = v54;
              v50[510] = &v173[8 * v172];
              if (v168) {
                operator delete(v168);
              }
            }
            else
            {
              *(void *)unint64_t v52 = v51;
              uint64_t v54 = v52 + 8;
            }
            v50[509] = v54;
            break;
          case 0x8A:
            uint64_t v55 = *(void **)a1[2];
            uint64_t v56 = *(_WORD *)(a1[3] + 54) & 0x3FFF;
            unint64_t v57 = (char *)v55[512];
            unint64_t v58 = v55[513];
            if ((unint64_t)v57 >= v58)
            {
              unint64_t v174 = (char *)v55[511];
              uint64_t v175 = (v57 - v174) >> 3;
              if ((unint64_t)(v175 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v176 = v58 - (void)v174;
              unint64_t v177 = (uint64_t)(v58 - (void)v174) >> 2;
              if (v177 <= v175 + 1) {
                unint64_t v177 = v175 + 1;
              }
              if (v176 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v178 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v178 = v177;
              }
              if (v178)
              {
                uint64_t v179 = (char *)sub_5714((uint64_t)(v55 + 513), v178);
                unint64_t v57 = (char *)v55[512];
                unint64_t v174 = (char *)v55[511];
              }
              else
              {
                uint64_t v179 = 0;
              }
              unint64_t v270 = &v179[8 * v175];
              *(void *)unint64_t v270 = v56;
              unint64_t v59 = v270 + 8;
              while (v57 != v174)
              {
                uint64_t v271 = *((void *)v57 - 1);
                v57 -= 8;
                *((void *)v270 - 1) = v271;
                v270 -= 8;
              }
              v55[511] = v270;
              v55[512] = v59;
              v55[513] = &v179[8 * v178];
              if (v174) {
                operator delete(v174);
              }
            }
            else
            {
              *(void *)unint64_t v57 = v56;
              unint64_t v59 = v57 + 8;
            }
            v55[512] = v59;
            break;
          case 0x8B:
            unint64_t v60 = *(void **)a1[2];
            uint64_t v61 = *(_WORD *)(a1[3] + 36) & 0x3FFF;
            unint64_t v62 = (char *)v60[515];
            unint64_t v63 = v60[516];
            if ((unint64_t)v62 >= v63)
            {
              uint64_t v180 = (char *)v60[514];
              uint64_t v181 = (v62 - v180) >> 3;
              if ((unint64_t)(v181 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v182 = v63 - (void)v180;
              unint64_t v183 = (uint64_t)(v63 - (void)v180) >> 2;
              if (v183 <= v181 + 1) {
                unint64_t v183 = v181 + 1;
              }
              if (v182 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v184 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v184 = v183;
              }
              if (v184)
              {
                unint64_t v185 = (char *)sub_5714((uint64_t)(v60 + 516), v184);
                unint64_t v62 = (char *)v60[515];
                uint64_t v180 = (char *)v60[514];
              }
              else
              {
                unint64_t v185 = 0;
              }
              uint64_t v272 = &v185[8 * v181];
              *(void *)uint64_t v272 = v61;
              uint64_t v64 = v272 + 8;
              while (v62 != v180)
              {
                uint64_t v273 = *((void *)v62 - 1);
                v62 -= 8;
                *((void *)v272 - 1) = v273;
                v272 -= 8;
              }
              v60[514] = v272;
              v60[515] = v64;
              v60[516] = &v185[8 * v184];
              if (v180) {
                operator delete(v180);
              }
            }
            else
            {
              *(void *)unint64_t v62 = v61;
              uint64_t v64 = v62 + 8;
            }
            v60[515] = v64;
            break;
          case 0x8C:
            unint64_t v65 = *(void **)a1[2];
            uint64_t v66 = *(_WORD *)(a1[3] + 56) & 0x3FFF;
            uint64_t v67 = (char *)v65[518];
            unint64_t v68 = v65[519];
            if ((unint64_t)v67 >= v68)
            {
              unint64_t v186 = (char *)v65[517];
              uint64_t v187 = (v67 - v186) >> 3;
              if ((unint64_t)(v187 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v188 = v68 - (void)v186;
              unint64_t v189 = (uint64_t)(v68 - (void)v186) >> 2;
              if (v189 <= v187 + 1) {
                unint64_t v189 = v187 + 1;
              }
              if (v188 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v190 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v190 = v189;
              }
              if (v190)
              {
                unint64_t v191 = (char *)sub_5714((uint64_t)(v65 + 519), v190);
                uint64_t v67 = (char *)v65[518];
                unint64_t v186 = (char *)v65[517];
              }
              else
              {
                unint64_t v191 = 0;
              }
              unint64_t v274 = &v191[8 * v187];
              *(void *)unint64_t v274 = v66;
              uint64_t v69 = v274 + 8;
              while (v67 != v186)
              {
                uint64_t v275 = *((void *)v67 - 1);
                v67 -= 8;
                *((void *)v274 - 1) = v275;
                v274 -= 8;
              }
              v65[517] = v274;
              v65[518] = v69;
              v65[519] = &v191[8 * v190];
              if (v186) {
                operator delete(v186);
              }
            }
            else
            {
              *(void *)uint64_t v67 = v66;
              uint64_t v69 = v67 + 8;
            }
            v65[518] = v69;
            break;
          case 0x8D:
            unint64_t v70 = *(void **)a1[2];
            uint64_t v71 = *(_WORD *)(a1[3] + 38) & 0x3FFF;
            unint64_t v72 = (char *)v70[521];
            unint64_t v73 = v70[522];
            if ((unint64_t)v72 >= v73)
            {
              unint64_t v192 = (char *)v70[520];
              uint64_t v193 = (v72 - v192) >> 3;
              if ((unint64_t)(v193 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v194 = v73 - (void)v192;
              unint64_t v195 = (uint64_t)(v73 - (void)v192) >> 2;
              if (v195 <= v193 + 1) {
                unint64_t v195 = v193 + 1;
              }
              if (v194 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v196 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v196 = v195;
              }
              if (v196)
              {
                uint64_t v197 = (char *)sub_5714((uint64_t)(v70 + 522), v196);
                unint64_t v72 = (char *)v70[521];
                unint64_t v192 = (char *)v70[520];
              }
              else
              {
                uint64_t v197 = 0;
              }
              uint64_t v276 = &v197[8 * v193];
              *(void *)uint64_t v276 = v71;
              unint64_t v74 = v276 + 8;
              while (v72 != v192)
              {
                uint64_t v277 = *((void *)v72 - 1);
                v72 -= 8;
                *((void *)v276 - 1) = v277;
                v276 -= 8;
              }
              v70[520] = v276;
              v70[521] = v74;
              v70[522] = &v197[8 * v196];
              if (v192) {
                operator delete(v192);
              }
            }
            else
            {
              *(void *)unint64_t v72 = v71;
              unint64_t v74 = v72 + 8;
            }
            v70[521] = v74;
            break;
          case 0x8E:
            unint64_t v75 = *(void **)a1[2];
            uint64_t v76 = *(_DWORD *)(a1[3] + 24) & 0x3FFFFLL;
            uint64_t v77 = (uint64_t *)v75[524];
            unint64_t v78 = v75[525];
            if ((unint64_t)v77 >= v78)
            {
              unint64_t v198 = (uint64_t *)v75[523];
              uint64_t v199 = v77 - v198;
              if ((unint64_t)(v199 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v200 = v78 - (void)v198;
              unint64_t v201 = (uint64_t)(v78 - (void)v198) >> 2;
              if (v201 <= v199 + 1) {
                unint64_t v201 = v199 + 1;
              }
              if (v200 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v202 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v202 = v201;
              }
              if (v202)
              {
                unint64_t v203 = (char *)sub_5714((uint64_t)(v75 + 525), v202);
                uint64_t v77 = (uint64_t *)v75[524];
                unint64_t v198 = (uint64_t *)v75[523];
              }
              else
              {
                unint64_t v203 = 0;
              }
              uint64_t v278 = (uint64_t *)&v203[8 * v199];
              uint64_t *v278 = v76;
              uint64_t v79 = v278 + 1;
              while (v77 != v198)
              {
                uint64_t v279 = *--v77;
                *--uint64_t v278 = v279;
              }
              v75[523] = v278;
              v75[524] = v79;
              v75[525] = &v203[8 * v202];
              if (v198) {
                operator delete(v198);
              }
            }
            else
            {
              *uint64_t v77 = v76;
              uint64_t v79 = v77 + 1;
            }
            v75[524] = v79;
            break;
          case 0x8F:
            unint64_t v80 = *(void **)a1[2];
            uint64_t v81 = *(_WORD *)(a1[3] + 68) & 0x7FF;
            uint64_t v82 = (char *)v80[527];
            unint64_t v83 = v80[528];
            if ((unint64_t)v82 >= v83)
            {
              unint64_t v204 = (char *)v80[526];
              uint64_t v205 = (v82 - v204) >> 3;
              if ((unint64_t)(v205 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v206 = v83 - (void)v204;
              unint64_t v207 = (uint64_t)(v83 - (void)v204) >> 2;
              if (v207 <= v205 + 1) {
                unint64_t v207 = v205 + 1;
              }
              if (v206 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v208 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v208 = v207;
              }
              if (v208)
              {
                uint64_t v209 = (char *)sub_5714((uint64_t)(v80 + 528), v208);
                uint64_t v82 = (char *)v80[527];
                unint64_t v204 = (char *)v80[526];
              }
              else
              {
                uint64_t v209 = 0;
              }
              unint64_t v280 = &v209[8 * v205];
              *(void *)unint64_t v280 = v81;
              unint64_t v84 = v280 + 8;
              while (v82 != v204)
              {
                uint64_t v281 = *((void *)v82 - 1);
                v82 -= 8;
                *((void *)v280 - 1) = v281;
                v280 -= 8;
              }
              v80[526] = v280;
              v80[527] = v84;
              v80[528] = &v209[8 * v208];
              if (v204) {
                operator delete(v204);
              }
            }
            else
            {
              *(void *)uint64_t v82 = v81;
              unint64_t v84 = v82 + 8;
            }
            v80[527] = v84;
            break;
          case 0x90:
            unint64_t v85 = *(void **)a1[2];
            uint64_t v86 = *(_WORD *)(a1[3] + 50) & 0x7FF;
            uint64_t v87 = (char *)v85[530];
            unint64_t v88 = v85[531];
            if ((unint64_t)v87 >= v88)
            {
              unint64_t v210 = (char *)v85[529];
              uint64_t v211 = (v87 - v210) >> 3;
              if ((unint64_t)(v211 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v212 = v88 - (void)v210;
              unint64_t v213 = (uint64_t)(v88 - (void)v210) >> 2;
              if (v213 <= v211 + 1) {
                unint64_t v213 = v211 + 1;
              }
              if (v212 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v214 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v214 = v213;
              }
              if (v214)
              {
                unint64_t v215 = (char *)sub_5714((uint64_t)(v85 + 531), v214);
                uint64_t v87 = (char *)v85[530];
                unint64_t v210 = (char *)v85[529];
              }
              else
              {
                unint64_t v215 = 0;
              }
              int v282 = &v215[8 * v211];
              *(void *)int v282 = v86;
              unint64_t v89 = v282 + 8;
              while (v87 != v210)
              {
                uint64_t v283 = *((void *)v87 - 1);
                v87 -= 8;
                *((void *)v282 - 1) = v283;
                v282 -= 8;
              }
              v85[529] = v282;
              v85[530] = v89;
              v85[531] = &v215[8 * v214];
              if (v210) {
                operator delete(v210);
              }
            }
            else
            {
              *(void *)uint64_t v87 = v86;
              unint64_t v89 = v87 + 8;
            }
            v85[530] = v89;
            break;
          case 0x91:
            uint64_t v90 = *(void **)a1[2];
            uint64_t v91 = *(_WORD *)(a1[3] + 32) & 0x1FFF;
            uint64_t v92 = (char *)v90[533];
            unint64_t v93 = v90[534];
            if ((unint64_t)v92 >= v93)
            {
              uint64_t v216 = (char *)v90[532];
              uint64_t v217 = (v92 - v216) >> 3;
              if ((unint64_t)(v217 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v218 = v93 - (void)v216;
              unint64_t v219 = (uint64_t)(v93 - (void)v216) >> 2;
              if (v219 <= v217 + 1) {
                unint64_t v219 = v217 + 1;
              }
              if (v218 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v220 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v220 = v219;
              }
              if (v220)
              {
                uint64_t v221 = (char *)sub_5714((uint64_t)(v90 + 534), v220);
                uint64_t v92 = (char *)v90[533];
                uint64_t v216 = (char *)v90[532];
              }
              else
              {
                uint64_t v221 = 0;
              }
              unint64_t v284 = &v221[8 * v217];
              *(void *)unint64_t v284 = v91;
              unint64_t v94 = v284 + 8;
              while (v92 != v216)
              {
                uint64_t v285 = *((void *)v92 - 1);
                v92 -= 8;
                *((void *)v284 - 1) = v285;
                v284 -= 8;
              }
              v90[532] = v284;
              v90[533] = v94;
              v90[534] = &v221[8 * v220];
              if (v216) {
                operator delete(v216);
              }
            }
            else
            {
              *(void *)uint64_t v92 = v91;
              unint64_t v94 = v92 + 8;
            }
            v90[533] = v94;
            break;
          case 0x92:
            uint64_t v95 = *(void **)a1[2];
            uint64_t v96 = *(_WORD *)(a1[3] + 64) & 0x1FF;
            uint64_t v97 = (char *)v95[536];
            unint64_t v98 = v95[537];
            if ((unint64_t)v97 >= v98)
            {
              unint64_t v222 = (char *)v95[535];
              uint64_t v223 = (v97 - v222) >> 3;
              if ((unint64_t)(v223 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v224 = v98 - (void)v222;
              unint64_t v225 = (uint64_t)(v98 - (void)v222) >> 2;
              if (v225 <= v223 + 1) {
                unint64_t v225 = v223 + 1;
              }
              if (v224 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v226 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v226 = v225;
              }
              if (v226)
              {
                unint64_t v227 = (char *)sub_5714((uint64_t)(v95 + 537), v226);
                uint64_t v97 = (char *)v95[536];
                unint64_t v222 = (char *)v95[535];
              }
              else
              {
                unint64_t v227 = 0;
              }
              uint64_t v286 = &v227[8 * v223];
              *(void *)uint64_t v286 = v96;
              unint64_t v99 = v286 + 8;
              while (v97 != v222)
              {
                uint64_t v287 = *((void *)v97 - 1);
                v97 -= 8;
                *((void *)v286 - 1) = v287;
                v286 -= 8;
              }
              v95[535] = v286;
              v95[536] = v99;
              v95[537] = &v227[8 * v226];
              if (v222) {
                operator delete(v222);
              }
            }
            else
            {
              *(void *)uint64_t v97 = v96;
              unint64_t v99 = v97 + 8;
            }
            v95[536] = v99;
            break;
          case 0x93:
            unint64_t v100 = *(void **)a1[2];
            uint64_t v101 = *(_WORD *)(a1[3] + 46) & 0x1FF;
            uint64_t v102 = (char *)v100[539];
            unint64_t v103 = v100[540];
            if ((unint64_t)v102 >= v103)
            {
              unint64_t v228 = (char *)v100[538];
              uint64_t v229 = (v102 - v228) >> 3;
              if ((unint64_t)(v229 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v230 = v103 - (void)v228;
              unint64_t v231 = (uint64_t)(v103 - (void)v228) >> 2;
              if (v231 <= v229 + 1) {
                unint64_t v231 = v229 + 1;
              }
              if (v230 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v232 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v232 = v231;
              }
              if (v232)
              {
                unint64_t v233 = (char *)sub_5714((uint64_t)(v100 + 540), v232);
                uint64_t v102 = (char *)v100[539];
                unint64_t v228 = (char *)v100[538];
              }
              else
              {
                unint64_t v233 = 0;
              }
              unint64_t v288 = &v233[8 * v229];
              *(void *)unint64_t v288 = v101;
              uint64_t v104 = v288 + 8;
              while (v102 != v228)
              {
                uint64_t v289 = *((void *)v102 - 1);
                v102 -= 8;
                *((void *)v288 - 1) = v289;
                v288 -= 8;
              }
              v100[538] = v288;
              v100[539] = v104;
              v100[540] = &v233[8 * v232];
              if (v228) {
                operator delete(v228);
              }
            }
            else
            {
              *(void *)uint64_t v102 = v101;
              uint64_t v104 = v102 + 8;
            }
            v100[539] = v104;
            break;
          case 0x94:
            unint64_t v105 = *(void **)a1[2];
            uint64_t v106 = *(_WORD *)(a1[3] + 66) & 0x1FF;
            uint64_t v107 = (char *)v105[542];
            unint64_t v108 = v105[543];
            if ((unint64_t)v107 >= v108)
            {
              int v234 = (char *)v105[541];
              uint64_t v235 = (v107 - v234) >> 3;
              if ((unint64_t)(v235 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v236 = v108 - (void)v234;
              unint64_t v237 = (uint64_t)(v108 - (void)v234) >> 2;
              if (v237 <= v235 + 1) {
                unint64_t v237 = v235 + 1;
              }
              if (v236 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v238 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v238 = v237;
              }
              if (v238)
              {
                uint64_t v239 = (char *)sub_5714((uint64_t)(v105 + 543), v238);
                uint64_t v107 = (char *)v105[542];
                int v234 = (char *)v105[541];
              }
              else
              {
                uint64_t v239 = 0;
              }
              uint64_t v290 = &v239[8 * v235];
              *(void *)uint64_t v290 = v106;
              uint64_t v109 = v290 + 8;
              while (v107 != v234)
              {
                uint64_t v291 = *((void *)v107 - 1);
                v107 -= 8;
                *((void *)v290 - 1) = v291;
                v290 -= 8;
              }
              v105[541] = v290;
              v105[542] = v109;
              v105[543] = &v239[8 * v238];
              if (v234) {
                operator delete(v234);
              }
            }
            else
            {
              *(void *)uint64_t v107 = v106;
              uint64_t v109 = v107 + 8;
            }
            v105[542] = v109;
            break;
          case 0x95:
            uint64_t v110 = *(void **)a1[2];
            uint64_t v111 = *(_WORD *)(a1[3] + 48) & 0x1FF;
            unint64_t v112 = (char *)v110[545];
            unint64_t v113 = v110[546];
            if ((unint64_t)v112 >= v113)
            {
              uint64_t v240 = (char *)v110[544];
              uint64_t v241 = (v112 - v240) >> 3;
              if ((unint64_t)(v241 + 1) >> 61) {
                goto LABEL_414;
              }
              unint64_t v242 = v113 - (void)v240;
              unint64_t v243 = (uint64_t)(v113 - (void)v240) >> 2;
              if (v243 <= v241 + 1) {
                unint64_t v243 = v241 + 1;
              }
              if (v242 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v244 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v244 = v243;
              }
              if (v244)
              {
                unint64_t v245 = (char *)sub_5714((uint64_t)(v110 + 546), v244);
                unint64_t v112 = (char *)v110[545];
                uint64_t v240 = (char *)v110[544];
              }
              else
              {
                unint64_t v245 = 0;
              }
              unint64_t v292 = &v245[8 * v241];
              *(void *)unint64_t v292 = v111;
              unint64_t v114 = v292 + 8;
              while (v112 != v240)
              {
                uint64_t v293 = *((void *)v112 - 1);
                v112 -= 8;
                *((void *)v292 - 1) = v293;
                v292 -= 8;
              }
              v110[544] = v292;
              v110[545] = v114;
              v110[546] = &v245[8 * v244];
              if (v240) {
                operator delete(v240);
              }
            }
            else
            {
              *(void *)unint64_t v112 = v111;
              unint64_t v114 = v112 + 8;
            }
            v110[545] = v114;
            break;
          case 0x96:
            uint64_t v115 = *(void **)a1[2];
            unint64_t v116 = (unint64_t)*(unsigned int *)(a1[3] + 28) >> 18;
            unint64_t v117 = (unint64_t *)v115[548];
            unint64_t v118 = v115[549];
            if ((unint64_t)v117 >= v118)
            {
              unint64_t v246 = (unint64_t *)v115[547];
              uint64_t v247 = v117 - v246;
              if ((unint64_t)(v247 + 1) >> 61) {
LABEL_414:
              }
                sub_566C();
              unint64_t v248 = v118 - (void)v246;
              unint64_t v249 = (uint64_t)(v118 - (void)v246) >> 2;
              if (v249 <= v247 + 1) {
                unint64_t v249 = v247 + 1;
              }
              if (v248 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v250 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v250 = v249;
              }
              if (v250)
              {
                uint64_t v251 = (char *)sub_5714((uint64_t)(v115 + 549), v250);
                unint64_t v117 = (unint64_t *)v115[548];
                unint64_t v246 = (unint64_t *)v115[547];
              }
              else
              {
                uint64_t v251 = 0;
              }
              unsigned int v294 = (unint64_t *)&v251[8 * v247];
              unint64_t *v294 = v116;
              unint64_t v119 = v294 + 1;
              while (v117 != v246)
              {
                unint64_t v295 = *--v117;
                *--unsigned int v294 = v295;
              }
              v115[547] = v294;
              v115[548] = v119;
              v115[549] = &v251[8 * v250];
              if (v246) {
                operator delete(v246);
              }
            }
            else
            {
              *unint64_t v117 = v116;
              unint64_t v119 = v117 + 1;
            }
            v115[548] = v119;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_882D4(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    unint64_t v143 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    unint64_t v142 = *v143;
    uint64_t v144 = (char *)v143[1] - (char *)*v143;
    if (v144)
    {
      unint64_t v145 = v144 >> 2;
      if (v145 <= 1) {
        unint64_t v145 = 1;
      }
      do
      {
        int v146 = *v142++;
        switch(v146)
        {
          case 161:
            uint64_t v147 = *(_DWORD *)(a1[3] + 44) & 0xFFFFF;
            unint64_t v148 = (void *)(*(void *)a1[2] + 4648);
            goto LABEL_194;
          case 162:
            uint64_t v147 = *(_DWORD *)(a1[3] + 48) & 0xFFFFF;
            unint64_t v148 = (void *)(*(void *)a1[2] + 4672);
            goto LABEL_194;
          case 163:
            uint64_t v147 = *(_DWORD *)(a1[3] + 52) & 0xFFFFF;
            unint64_t v148 = (void *)(*(void *)a1[2] + 4696);
            goto LABEL_194;
          case 164:
            uint64_t v147 = *(unsigned __int16 *)(a1[3] + 58);
            unint64_t v148 = (void *)(*(void *)a1[2] + 4720);
            goto LABEL_194;
          case 165:
            uint64_t v147 = *(unsigned __int16 *)(a1[3] + 56);
            unint64_t v148 = (void *)(*(void *)a1[2] + 4744);
            goto LABEL_194;
          case 166:
            uint64_t v147 = *(_DWORD *)(a1[3] + 32) & 0xFFFFF;
            unint64_t v148 = (void *)(*(void *)a1[2] + 4768);
            goto LABEL_194;
          case 167:
            uint64_t v147 = *(_DWORD *)(a1[3] + 36) & 0xFFFFF;
            unint64_t v148 = (void *)(*(void *)a1[2] + 4792);
            goto LABEL_194;
          case 168:
            uint64_t v147 = *(_DWORD *)(a1[3] + 40) & 0xFFFFF;
            unint64_t v148 = (void *)(*(void *)a1[2] + 4816);
            goto LABEL_194;
          case 169:
            uint64_t v147 = *(_DWORD *)(a1[3] + 24) & 0xFFFFF;
            unint64_t v148 = (void *)(*(void *)a1[2] + 4840);
            goto LABEL_194;
          case 170:
            uint64_t v147 = *(_DWORD *)(a1[3] + 28) & 0xFFFFF;
            unint64_t v148 = (void *)(*(void *)a1[2] + 4864);
LABEL_194:
            *(void *)(*v148 - 8) += v147;
            break;
          default:
            break;
        }
        --v145;
      }
      while (v145);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    uint64_t v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0xA1:
            uint64_t v10 = *(void **)a1[2];
            uint64_t v11 = *(_DWORD *)(a1[3] + 44) & 0xFFFFFLL;
            unsigned int v12 = (uint64_t *)v10[581];
            unint64_t v13 = v10[582];
            if ((unint64_t)v12 >= v13)
            {
              unint64_t v62 = (uint64_t *)v10[580];
              uint64_t v63 = v12 - v62;
              if ((unint64_t)(v63 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v64 = v13 - (void)v62;
              unint64_t v65 = (uint64_t)(v13 - (void)v62) >> 2;
              if (v65 <= v63 + 1) {
                unint64_t v65 = v63 + 1;
              }
              if (v64 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v66 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v66 = v65;
              }
              if (v66)
              {
                uint64_t v67 = (char *)sub_5714((uint64_t)(v10 + 582), v66);
                unsigned int v12 = (uint64_t *)v10[581];
                unint64_t v62 = (uint64_t *)v10[580];
              }
              else
              {
                uint64_t v67 = 0;
              }
              unint64_t v122 = (uint64_t *)&v67[8 * v63];
              *unint64_t v122 = v11;
              unint64_t v14 = v122 + 1;
              while (v12 != v62)
              {
                uint64_t v123 = *--v12;
                *--unint64_t v122 = v123;
              }
              v10[580] = v122;
              v10[581] = v14;
              v10[582] = &v67[8 * v66];
              if (v62) {
                operator delete(v62);
              }
            }
            else
            {
              uint64_t *v12 = v11;
              unint64_t v14 = v12 + 1;
            }
            v10[581] = v14;
            break;
          case 0xA2:
            unint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_DWORD *)(a1[3] + 48) & 0xFFFFFLL;
            uint64_t v17 = (uint64_t *)v15[584];
            unint64_t v18 = v15[585];
            if ((unint64_t)v17 >= v18)
            {
              unint64_t v68 = (uint64_t *)v15[583];
              uint64_t v69 = v17 - v68;
              if ((unint64_t)(v69 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v70 = v18 - (void)v68;
              unint64_t v71 = (uint64_t)(v18 - (void)v68) >> 2;
              if (v71 <= v69 + 1) {
                unint64_t v71 = v69 + 1;
              }
              if (v70 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v72 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v72 = v71;
              }
              if (v72)
              {
                unint64_t v73 = (char *)sub_5714((uint64_t)(v15 + 585), v72);
                uint64_t v17 = (uint64_t *)v15[584];
                unint64_t v68 = (uint64_t *)v15[583];
              }
              else
              {
                unint64_t v73 = 0;
              }
              unint64_t v124 = (uint64_t *)&v73[8 * v69];
              uint64_t *v124 = v16;
              unint64_t v19 = v124 + 1;
              while (v17 != v68)
              {
                uint64_t v125 = *--v17;
                *--unint64_t v124 = v125;
              }
              v15[583] = v124;
              v15[584] = v19;
              v15[585] = &v73[8 * v72];
              if (v68) {
                operator delete(v68);
              }
            }
            else
            {
              *uint64_t v17 = v16;
              unint64_t v19 = v17 + 1;
            }
            v15[584] = v19;
            break;
          case 0xA3:
            uint64_t v20 = *(void **)a1[2];
            uint64_t v21 = *(_DWORD *)(a1[3] + 52) & 0xFFFFFLL;
            uint64_t v22 = (uint64_t *)v20[587];
            unint64_t v23 = v20[588];
            if ((unint64_t)v22 >= v23)
            {
              unint64_t v74 = (uint64_t *)v20[586];
              uint64_t v75 = v22 - v74;
              if ((unint64_t)(v75 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v76 = v23 - (void)v74;
              unint64_t v77 = (uint64_t)(v23 - (void)v74) >> 2;
              if (v77 <= v75 + 1) {
                unint64_t v77 = v75 + 1;
              }
              if (v76 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v78 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v78 = v77;
              }
              if (v78)
              {
                uint64_t v79 = (char *)sub_5714((uint64_t)(v20 + 588), v78);
                uint64_t v22 = (uint64_t *)v20[587];
                unint64_t v74 = (uint64_t *)v20[586];
              }
              else
              {
                uint64_t v79 = 0;
              }
              unint64_t v126 = (uint64_t *)&v79[8 * v75];
              uint64_t *v126 = v21;
              unint64_t v24 = v126 + 1;
              while (v22 != v74)
              {
                uint64_t v127 = *--v22;
                *--unint64_t v126 = v127;
              }
              v20[586] = v126;
              v20[587] = v24;
              v20[588] = &v79[8 * v78];
              if (v74) {
                operator delete(v74);
              }
            }
            else
            {
              uint64_t *v22 = v21;
              unint64_t v24 = v22 + 1;
            }
            v20[587] = v24;
            break;
          case 0xA4:
            uint64_t v25 = a1[2];
            uint64_t v26 = *(void **)v25;
            uint64_t v27 = *(unsigned __int16 *)(a1[3] + 58);
            unint64_t v28 = *(char **)(*(void *)v25 + 4720);
            unint64_t v29 = *(void *)(*(void *)v25 + 4728);
            if ((unint64_t)v28 >= v29)
            {
              unint64_t v80 = (char *)v26[589];
              uint64_t v81 = (v28 - v80) >> 3;
              if ((unint64_t)(v81 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v82 = v29 - (void)v80;
              unint64_t v83 = (uint64_t)(v29 - (void)v80) >> 2;
              if (v83 <= v81 + 1) {
                unint64_t v83 = v81 + 1;
              }
              if (v82 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v84 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v84 = v83;
              }
              if (v84)
              {
                unint64_t v85 = (char *)sub_5714((uint64_t)(v26 + 591), v84);
                unint64_t v28 = (char *)v26[590];
                unint64_t v80 = (char *)v26[589];
              }
              else
              {
                unint64_t v85 = 0;
              }
              unint64_t v128 = &v85[8 * v81];
              *(void *)unint64_t v128 = v27;
              unint64_t v30 = v128 + 8;
              while (v28 != v80)
              {
                uint64_t v129 = *((void *)v28 - 1);
                v28 -= 8;
                *((void *)v128 - 1) = v129;
                v128 -= 8;
              }
              v26[589] = v128;
              v26[590] = v30;
              v26[591] = &v85[8 * v84];
              if (v80) {
                operator delete(v80);
              }
            }
            else
            {
              *(void *)unint64_t v28 = v27;
              unint64_t v30 = v28 + 8;
            }
            v26[590] = v30;
            break;
          case 0xA5:
            uint64_t v31 = a1[2];
            unint64_t v32 = *(void **)v31;
            uint64_t v33 = *(unsigned __int16 *)(a1[3] + 56);
            uint64_t v34 = *(char **)(*(void *)v31 + 4744);
            unint64_t v35 = *(void *)(*(void *)v31 + 4752);
            if ((unint64_t)v34 >= v35)
            {
              uint64_t v86 = (char *)v32[592];
              uint64_t v87 = (v34 - v86) >> 3;
              if ((unint64_t)(v87 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v88 = v35 - (void)v86;
              unint64_t v89 = (uint64_t)(v35 - (void)v86) >> 2;
              if (v89 <= v87 + 1) {
                unint64_t v89 = v87 + 1;
              }
              if (v88 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v90 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v90 = v89;
              }
              if (v90)
              {
                uint64_t v91 = (char *)sub_5714((uint64_t)(v32 + 594), v90);
                uint64_t v34 = (char *)v32[593];
                uint64_t v86 = (char *)v32[592];
              }
              else
              {
                uint64_t v91 = 0;
              }
              unint64_t v130 = &v91[8 * v87];
              *(void *)unint64_t v130 = v33;
              uint64_t v36 = v130 + 8;
              while (v34 != v86)
              {
                uint64_t v131 = *((void *)v34 - 1);
                v34 -= 8;
                *((void *)v130 - 1) = v131;
                v130 -= 8;
              }
              v32[592] = v130;
              v32[593] = v36;
              v32[594] = &v91[8 * v90];
              if (v86) {
                operator delete(v86);
              }
            }
            else
            {
              *(void *)uint64_t v34 = v33;
              uint64_t v36 = v34 + 8;
            }
            v32[593] = v36;
            break;
          case 0xA6:
            unint64_t v37 = *(void **)a1[2];
            uint64_t v38 = *(_DWORD *)(a1[3] + 32) & 0xFFFFFLL;
            uint64_t v39 = (uint64_t *)v37[596];
            unint64_t v40 = v37[597];
            if ((unint64_t)v39 >= v40)
            {
              uint64_t v92 = (uint64_t *)v37[595];
              uint64_t v93 = v39 - v92;
              if ((unint64_t)(v93 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v94 = v40 - (void)v92;
              unint64_t v95 = (uint64_t)(v40 - (void)v92) >> 2;
              if (v95 <= v93 + 1) {
                unint64_t v95 = v93 + 1;
              }
              if (v94 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v96 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v96 = v95;
              }
              if (v96)
              {
                uint64_t v97 = (char *)sub_5714((uint64_t)(v37 + 597), v96);
                uint64_t v39 = (uint64_t *)v37[596];
                uint64_t v92 = (uint64_t *)v37[595];
              }
              else
              {
                uint64_t v97 = 0;
              }
              uint64_t v132 = (uint64_t *)&v97[8 * v93];
              *uint64_t v132 = v38;
              uint64_t v41 = v132 + 1;
              while (v39 != v92)
              {
                uint64_t v133 = *--v39;
                *--uint64_t v132 = v133;
              }
              v37[595] = v132;
              v37[596] = v41;
              v37[597] = &v97[8 * v96];
              if (v92) {
                operator delete(v92);
              }
            }
            else
            {
              uint64_t *v39 = v38;
              uint64_t v41 = v39 + 1;
            }
            v37[596] = v41;
            break;
          case 0xA7:
            unint64_t v42 = *(void **)a1[2];
            uint64_t v43 = *(_DWORD *)(a1[3] + 36) & 0xFFFFFLL;
            unint64_t v44 = (uint64_t *)v42[599];
            unint64_t v45 = v42[600];
            if ((unint64_t)v44 >= v45)
            {
              unint64_t v98 = (uint64_t *)v42[598];
              uint64_t v99 = v44 - v98;
              if ((unint64_t)(v99 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v100 = v45 - (void)v98;
              unint64_t v101 = (uint64_t)(v45 - (void)v98) >> 2;
              if (v101 <= v99 + 1) {
                unint64_t v101 = v99 + 1;
              }
              if (v100 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v102 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v102 = v101;
              }
              if (v102)
              {
                unint64_t v103 = (char *)sub_5714((uint64_t)(v42 + 600), v102);
                unint64_t v44 = (uint64_t *)v42[599];
                unint64_t v98 = (uint64_t *)v42[598];
              }
              else
              {
                unint64_t v103 = 0;
              }
              unint64_t v134 = (uint64_t *)&v103[8 * v99];
              uint64_t *v134 = v43;
              uint64_t v46 = v134 + 1;
              while (v44 != v98)
              {
                uint64_t v135 = *--v44;
                *--unint64_t v134 = v135;
              }
              v42[598] = v134;
              v42[599] = v46;
              v42[600] = &v103[8 * v102];
              if (v98) {
                operator delete(v98);
              }
            }
            else
            {
              uint64_t *v44 = v43;
              uint64_t v46 = v44 + 1;
            }
            v42[599] = v46;
            break;
          case 0xA8:
            unint64_t v47 = *(void **)a1[2];
            uint64_t v48 = *(_DWORD *)(a1[3] + 40) & 0xFFFFFLL;
            uint64_t v49 = (uint64_t *)v47[602];
            unint64_t v50 = v47[603];
            if ((unint64_t)v49 >= v50)
            {
              uint64_t v104 = (uint64_t *)v47[601];
              uint64_t v105 = v49 - v104;
              if ((unint64_t)(v105 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v106 = v50 - (void)v104;
              unint64_t v107 = (uint64_t)(v50 - (void)v104) >> 2;
              if (v107 <= v105 + 1) {
                unint64_t v107 = v105 + 1;
              }
              if (v106 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v108 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v108 = v107;
              }
              if (v108)
              {
                uint64_t v109 = (char *)sub_5714((uint64_t)(v47 + 603), v108);
                uint64_t v49 = (uint64_t *)v47[602];
                uint64_t v104 = (uint64_t *)v47[601];
              }
              else
              {
                uint64_t v109 = 0;
              }
              unint64_t v136 = (uint64_t *)&v109[8 * v105];
              *unint64_t v136 = v48;
              uint64_t v51 = v136 + 1;
              while (v49 != v104)
              {
                uint64_t v137 = *--v49;
                *--unint64_t v136 = v137;
              }
              v47[601] = v136;
              v47[602] = v51;
              v47[603] = &v109[8 * v108];
              if (v104) {
                operator delete(v104);
              }
            }
            else
            {
              uint64_t *v49 = v48;
              uint64_t v51 = v49 + 1;
            }
            v47[602] = v51;
            break;
          case 0xA9:
            unint64_t v52 = *(void **)a1[2];
            uint64_t v53 = *(_DWORD *)(a1[3] + 24) & 0xFFFFFLL;
            uint64_t v54 = (uint64_t *)v52[605];
            unint64_t v55 = v52[606];
            if ((unint64_t)v54 >= v55)
            {
              uint64_t v110 = (uint64_t *)v52[604];
              uint64_t v111 = v54 - v110;
              if ((unint64_t)(v111 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v112 = v55 - (void)v110;
              unint64_t v113 = (uint64_t)(v55 - (void)v110) >> 2;
              if (v113 <= v111 + 1) {
                unint64_t v113 = v111 + 1;
              }
              if (v112 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v114 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v114 = v113;
              }
              if (v114)
              {
                uint64_t v115 = (char *)sub_5714((uint64_t)(v52 + 606), v114);
                uint64_t v54 = (uint64_t *)v52[605];
                uint64_t v110 = (uint64_t *)v52[604];
              }
              else
              {
                uint64_t v115 = 0;
              }
              unint64_t v138 = (uint64_t *)&v115[8 * v111];
              *unint64_t v138 = v53;
              uint64_t v56 = v138 + 1;
              while (v54 != v110)
              {
                uint64_t v139 = *--v54;
                *--unint64_t v138 = v139;
              }
              v52[604] = v138;
              v52[605] = v56;
              v52[606] = &v115[8 * v114];
              if (v110) {
                operator delete(v110);
              }
            }
            else
            {
              uint64_t *v54 = v53;
              uint64_t v56 = v54 + 1;
            }
            v52[605] = v56;
            break;
          case 0xAA:
            unint64_t v57 = *(void **)a1[2];
            uint64_t v58 = *(_DWORD *)(a1[3] + 28) & 0xFFFFFLL;
            unint64_t v59 = (uint64_t *)v57[608];
            unint64_t v60 = v57[609];
            if ((unint64_t)v59 >= v60)
            {
              unint64_t v116 = (uint64_t *)v57[607];
              uint64_t v117 = v59 - v116;
              if ((unint64_t)(v117 + 1) >> 61) {
LABEL_198:
              }
                sub_566C();
              unint64_t v118 = v60 - (void)v116;
              unint64_t v119 = (uint64_t)(v60 - (void)v116) >> 2;
              if (v119 <= v117 + 1) {
                unint64_t v119 = v117 + 1;
              }
              if (v118 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v120 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v120 = v119;
              }
              if (v120)
              {
                uint64_t v121 = (char *)sub_5714((uint64_t)(v57 + 609), v120);
                unint64_t v59 = (uint64_t *)v57[608];
                unint64_t v116 = (uint64_t *)v57[607];
              }
              else
              {
                uint64_t v121 = 0;
              }
              unint64_t v140 = (uint64_t *)&v121[8 * v117];
              uint64_t *v140 = v58;
              uint64_t v61 = v140 + 1;
              while (v59 != v116)
              {
                uint64_t v141 = *--v59;
                *--unint64_t v140 = v141;
              }
              v57[607] = v140;
              v57[608] = v61;
              v57[609] = &v121[8 * v120];
              if (v116) {
                operator delete(v116);
              }
            }
            else
            {
              uint64_t *v59 = v58;
              uint64_t v61 = v59 + 1;
            }
            v57[608] = v61;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_88D4C(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    unint64_t v427 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v426 = *v427;
    uint64_t v428 = (char *)v427[1] - (char *)*v427;
    if (v428)
    {
      unint64_t v429 = v428 >> 2;
      if (v429 <= 1) {
        unint64_t v429 = 1;
      }
      do
      {
        int v430 = *v426++;
        switch(v430)
        {
          case 29:
            unint64_t v431 = (_WORD *)(a1[3] + 34);
            unint64_t v432 = (void *)(*(void *)a1[2] + 1480);
            goto LABEL_590;
          case 30:
            unint64_t v431 = (_WORD *)(a1[3] + 26);
            unint64_t v432 = (void *)(*(void *)a1[2] + 1504);
            goto LABEL_590;
          case 31:
            unint64_t v431 = (_WORD *)(a1[3] + 36);
            unint64_t v432 = (void *)(*(void *)a1[2] + 1528);
            goto LABEL_590;
          case 32:
            unint64_t v431 = (_WORD *)(a1[3] + 28);
            unint64_t v432 = (void *)(*(void *)a1[2] + 1552);
            goto LABEL_590;
          case 33:
            unint64_t v431 = (_WORD *)(a1[3] + 38);
            unint64_t v432 = (void *)(*(void *)a1[2] + 1576);
            goto LABEL_590;
          case 34:
            unint64_t v431 = (_WORD *)(a1[3] + 30);
            unint64_t v432 = (void *)(*(void *)a1[2] + 1600);
            goto LABEL_590;
          case 35:
            unint64_t v431 = (_WORD *)(a1[3] + 40);
            unint64_t v432 = (void *)(*(void *)a1[2] + 1624);
            goto LABEL_590;
          case 36:
            unint64_t v431 = (_WORD *)(a1[3] + 32);
            unint64_t v432 = (void *)(*(void *)a1[2] + 1648);
            goto LABEL_590;
          case 37:
            unint64_t v431 = (_WORD *)(a1[3] + 50);
            unint64_t v432 = (void *)(*(void *)a1[2] + 1672);
            goto LABEL_590;
          case 38:
            unint64_t v431 = (_WORD *)(a1[3] + 42);
            unint64_t v432 = (void *)(*(void *)a1[2] + 1696);
            goto LABEL_590;
          case 39:
            unint64_t v431 = (_WORD *)(a1[3] + 52);
            unint64_t v432 = (void *)(*(void *)a1[2] + 1720);
            goto LABEL_590;
          case 40:
            unint64_t v431 = (_WORD *)(a1[3] + 44);
            unint64_t v432 = (void *)(*(void *)a1[2] + 1744);
            goto LABEL_590;
          case 41:
            unint64_t v431 = (_WORD *)(a1[3] + 54);
            unint64_t v432 = (void *)(*(void *)a1[2] + 1768);
            goto LABEL_590;
          case 42:
            unint64_t v431 = (_WORD *)(a1[3] + 46);
            unint64_t v432 = (void *)(*(void *)a1[2] + 1792);
            goto LABEL_590;
          case 43:
            unint64_t v431 = (_WORD *)(a1[3] + 56);
            unint64_t v432 = (void *)(*(void *)a1[2] + 1816);
            goto LABEL_590;
          case 44:
            unint64_t v431 = (_WORD *)(a1[3] + 48);
            unint64_t v432 = (void *)(*(void *)a1[2] + 1840);
            goto LABEL_590;
          case 45:
            unint64_t v431 = (_WORD *)(a1[3] + 66);
            unint64_t v432 = (void *)(*(void *)a1[2] + 1864);
            goto LABEL_590;
          case 46:
            unint64_t v431 = (_WORD *)(a1[3] + 58);
            unint64_t v432 = (void *)(*(void *)a1[2] + 1888);
            goto LABEL_590;
          case 47:
            unint64_t v431 = (_WORD *)(a1[3] + 68);
            unint64_t v432 = (void *)(*(void *)a1[2] + 1912);
            goto LABEL_590;
          case 48:
            unint64_t v431 = (_WORD *)(a1[3] + 60);
            unint64_t v432 = (void *)(*(void *)a1[2] + 1936);
            goto LABEL_590;
          case 49:
            unint64_t v431 = (_WORD *)(a1[3] + 70);
            unint64_t v432 = (void *)(*(void *)a1[2] + 1960);
            goto LABEL_590;
          case 50:
            unint64_t v431 = (_WORD *)(a1[3] + 62);
            unint64_t v432 = (void *)(*(void *)a1[2] + 1984);
            goto LABEL_590;
          case 51:
            unint64_t v431 = (_WORD *)(a1[3] + 72);
            unint64_t v432 = (void *)(*(void *)a1[2] + 2008);
            goto LABEL_590;
          case 52:
            unint64_t v431 = (_WORD *)(a1[3] + 64);
            unint64_t v432 = (void *)(*(void *)a1[2] + 2032);
            goto LABEL_590;
          case 53:
            unint64_t v431 = (_WORD *)(a1[3] + 82);
            unint64_t v432 = (void *)(*(void *)a1[2] + 2056);
            goto LABEL_590;
          case 54:
            unint64_t v431 = (_WORD *)(a1[3] + 74);
            unint64_t v432 = (void *)(*(void *)a1[2] + 2080);
            goto LABEL_590;
          case 55:
            unint64_t v431 = (_WORD *)(a1[3] + 84);
            unint64_t v432 = (void *)(*(void *)a1[2] + 2104);
            goto LABEL_590;
          case 56:
            unint64_t v431 = (_WORD *)(a1[3] + 76);
            unint64_t v432 = (void *)(*(void *)a1[2] + 2128);
            goto LABEL_590;
          case 57:
            unint64_t v431 = (_WORD *)(a1[3] + 86);
            unint64_t v432 = (void *)(*(void *)a1[2] + 2152);
            goto LABEL_590;
          case 58:
            unint64_t v431 = (_WORD *)(a1[3] + 78);
            unint64_t v432 = (void *)(*(void *)a1[2] + 2176);
            goto LABEL_590;
          case 59:
            unint64_t v431 = (_WORD *)(a1[3] + 88);
            unint64_t v432 = (void *)(*(void *)a1[2] + 2200);
            goto LABEL_590;
          case 60:
            unint64_t v431 = (_WORD *)(a1[3] + 80);
            unint64_t v432 = (void *)(*(void *)a1[2] + 2224);
LABEL_590:
            *(void *)(*v432 - 8) += *v431 & 0x7FFF;
            break;
          default:
            break;
        }
        --v429;
      }
      while (v429);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    uint64_t v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0x1D:
            uint64_t v10 = *(void **)a1[2];
            uint64_t v11 = *(_WORD *)(a1[3] + 34) & 0x7FFF;
            unsigned int v12 = (char *)v10[185];
            unint64_t v13 = v10[186];
            if ((unint64_t)v12 >= v13)
            {
              unint64_t v170 = (char *)v10[184];
              uint64_t v171 = (v12 - v170) >> 3;
              if ((unint64_t)(v171 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v172 = v13 - (void)v170;
              unint64_t v173 = (uint64_t)(v13 - (void)v170) >> 2;
              if (v173 <= v171 + 1) {
                unint64_t v173 = v171 + 1;
              }
              if (v172 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v174 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v174 = v173;
              }
              if (v174)
              {
                uint64_t v175 = (char *)sub_5714((uint64_t)(v10 + 186), v174);
                unsigned int v12 = (char *)v10[185];
                unint64_t v170 = (char *)v10[184];
              }
              else
              {
                uint64_t v175 = 0;
              }
              unint64_t v362 = &v175[8 * v171];
              *(void *)unint64_t v362 = v11;
              unint64_t v14 = v362 + 8;
              while (v12 != v170)
              {
                uint64_t v363 = *((void *)v12 - 1);
                v12 -= 8;
                *((void *)v362 - 1) = v363;
                v362 -= 8;
              }
              v10[184] = v362;
              v10[185] = v14;
              v10[186] = &v175[8 * v174];
              if (v170) {
                operator delete(v170);
              }
            }
            else
            {
              *(void *)unsigned int v12 = v11;
              unint64_t v14 = v12 + 8;
            }
            v10[185] = v14;
            break;
          case 0x1E:
            unint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_WORD *)(a1[3] + 26) & 0x7FFF;
            uint64_t v17 = (char *)v15[188];
            unint64_t v18 = v15[189];
            if ((unint64_t)v17 >= v18)
            {
              unint64_t v176 = (char *)v15[187];
              uint64_t v177 = (v17 - v176) >> 3;
              if ((unint64_t)(v177 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v178 = v18 - (void)v176;
              unint64_t v179 = (uint64_t)(v18 - (void)v176) >> 2;
              if (v179 <= v177 + 1) {
                unint64_t v179 = v177 + 1;
              }
              if (v178 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v180 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v180 = v179;
              }
              if (v180)
              {
                uint64_t v181 = (char *)sub_5714((uint64_t)(v15 + 189), v180);
                uint64_t v17 = (char *)v15[188];
                unint64_t v176 = (char *)v15[187];
              }
              else
              {
                uint64_t v181 = 0;
              }
              unint64_t v364 = &v181[8 * v177];
              *(void *)unint64_t v364 = v16;
              unint64_t v19 = v364 + 8;
              while (v17 != v176)
              {
                uint64_t v365 = *((void *)v17 - 1);
                v17 -= 8;
                *((void *)v364 - 1) = v365;
                v364 -= 8;
              }
              v15[187] = v364;
              v15[188] = v19;
              v15[189] = &v181[8 * v180];
              if (v176) {
                operator delete(v176);
              }
            }
            else
            {
              *(void *)uint64_t v17 = v16;
              unint64_t v19 = v17 + 8;
            }
            v15[188] = v19;
            break;
          case 0x1F:
            uint64_t v20 = *(void **)a1[2];
            uint64_t v21 = *(_WORD *)(a1[3] + 36) & 0x7FFF;
            uint64_t v22 = (char *)v20[191];
            unint64_t v23 = v20[192];
            if ((unint64_t)v22 >= v23)
            {
              unint64_t v182 = (char *)v20[190];
              uint64_t v183 = (v22 - v182) >> 3;
              if ((unint64_t)(v183 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v184 = v23 - (void)v182;
              unint64_t v185 = (uint64_t)(v23 - (void)v182) >> 2;
              if (v185 <= v183 + 1) {
                unint64_t v185 = v183 + 1;
              }
              if (v184 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v186 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v186 = v185;
              }
              if (v186)
              {
                uint64_t v187 = (char *)sub_5714((uint64_t)(v20 + 192), v186);
                uint64_t v22 = (char *)v20[191];
                unint64_t v182 = (char *)v20[190];
              }
              else
              {
                uint64_t v187 = 0;
              }
              unint64_t v366 = &v187[8 * v183];
              *(void *)unint64_t v366 = v21;
              unint64_t v24 = v366 + 8;
              while (v22 != v182)
              {
                uint64_t v367 = *((void *)v22 - 1);
                v22 -= 8;
                *((void *)v366 - 1) = v367;
                v366 -= 8;
              }
              v20[190] = v366;
              v20[191] = v24;
              v20[192] = &v187[8 * v186];
              if (v182) {
                operator delete(v182);
              }
            }
            else
            {
              *(void *)uint64_t v22 = v21;
              unint64_t v24 = v22 + 8;
            }
            v20[191] = v24;
            break;
          case 0x20:
            uint64_t v25 = *(void **)a1[2];
            uint64_t v26 = *(_WORD *)(a1[3] + 28) & 0x7FFF;
            uint64_t v27 = (char *)v25[194];
            unint64_t v28 = v25[195];
            if ((unint64_t)v27 >= v28)
            {
              unint64_t v188 = (char *)v25[193];
              uint64_t v189 = (v27 - v188) >> 3;
              if ((unint64_t)(v189 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v190 = v28 - (void)v188;
              unint64_t v191 = (uint64_t)(v28 - (void)v188) >> 2;
              if (v191 <= v189 + 1) {
                unint64_t v191 = v189 + 1;
              }
              if (v190 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v192 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v192 = v191;
              }
              if (v192)
              {
                uint64_t v193 = (char *)sub_5714((uint64_t)(v25 + 195), v192);
                uint64_t v27 = (char *)v25[194];
                unint64_t v188 = (char *)v25[193];
              }
              else
              {
                uint64_t v193 = 0;
              }
              unint64_t v368 = &v193[8 * v189];
              *(void *)unint64_t v368 = v26;
              unint64_t v29 = v368 + 8;
              while (v27 != v188)
              {
                uint64_t v369 = *((void *)v27 - 1);
                v27 -= 8;
                *((void *)v368 - 1) = v369;
                v368 -= 8;
              }
              v25[193] = v368;
              v25[194] = v29;
              v25[195] = &v193[8 * v192];
              if (v188) {
                operator delete(v188);
              }
            }
            else
            {
              *(void *)uint64_t v27 = v26;
              unint64_t v29 = v27 + 8;
            }
            v25[194] = v29;
            break;
          case 0x21:
            unint64_t v30 = *(void **)a1[2];
            uint64_t v31 = *(_WORD *)(a1[3] + 38) & 0x7FFF;
            unint64_t v32 = (char *)v30[197];
            unint64_t v33 = v30[198];
            if ((unint64_t)v32 >= v33)
            {
              unint64_t v194 = (char *)v30[196];
              uint64_t v195 = (v32 - v194) >> 3;
              if ((unint64_t)(v195 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v196 = v33 - (void)v194;
              unint64_t v197 = (uint64_t)(v33 - (void)v194) >> 2;
              if (v197 <= v195 + 1) {
                unint64_t v197 = v195 + 1;
              }
              if (v196 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v198 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v198 = v197;
              }
              if (v198)
              {
                uint64_t v199 = (char *)sub_5714((uint64_t)(v30 + 198), v198);
                unint64_t v32 = (char *)v30[197];
                unint64_t v194 = (char *)v30[196];
              }
              else
              {
                uint64_t v199 = 0;
              }
              uint64_t v370 = &v199[8 * v195];
              *(void *)uint64_t v370 = v31;
              uint64_t v34 = v370 + 8;
              while (v32 != v194)
              {
                uint64_t v371 = *((void *)v32 - 1);
                v32 -= 8;
                *((void *)v370 - 1) = v371;
                v370 -= 8;
              }
              v30[196] = v370;
              v30[197] = v34;
              v30[198] = &v199[8 * v198];
              if (v194) {
                operator delete(v194);
              }
            }
            else
            {
              *(void *)unint64_t v32 = v31;
              uint64_t v34 = v32 + 8;
            }
            v30[197] = v34;
            break;
          case 0x22:
            unint64_t v35 = *(void **)a1[2];
            uint64_t v36 = *(_WORD *)(a1[3] + 30) & 0x7FFF;
            unint64_t v37 = (char *)v35[200];
            unint64_t v38 = v35[201];
            if ((unint64_t)v37 >= v38)
            {
              unint64_t v200 = (char *)v35[199];
              uint64_t v201 = (v37 - v200) >> 3;
              if ((unint64_t)(v201 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v202 = v38 - (void)v200;
              unint64_t v203 = (uint64_t)(v38 - (void)v200) >> 2;
              if (v203 <= v201 + 1) {
                unint64_t v203 = v201 + 1;
              }
              if (v202 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v204 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v204 = v203;
              }
              if (v204)
              {
                uint64_t v205 = (char *)sub_5714((uint64_t)(v35 + 201), v204);
                unint64_t v37 = (char *)v35[200];
                unint64_t v200 = (char *)v35[199];
              }
              else
              {
                uint64_t v205 = 0;
              }
              unint64_t v372 = &v205[8 * v201];
              *(void *)unint64_t v372 = v36;
              uint64_t v39 = v372 + 8;
              while (v37 != v200)
              {
                uint64_t v373 = *((void *)v37 - 1);
                v37 -= 8;
                *((void *)v372 - 1) = v373;
                v372 -= 8;
              }
              v35[199] = v372;
              v35[200] = v39;
              v35[201] = &v205[8 * v204];
              if (v200) {
                operator delete(v200);
              }
            }
            else
            {
              *(void *)unint64_t v37 = v36;
              uint64_t v39 = v37 + 8;
            }
            v35[200] = v39;
            break;
          case 0x23:
            unint64_t v40 = *(void **)a1[2];
            uint64_t v41 = *(_WORD *)(a1[3] + 40) & 0x7FFF;
            unint64_t v42 = (char *)v40[203];
            unint64_t v43 = v40[204];
            if ((unint64_t)v42 >= v43)
            {
              unint64_t v206 = (char *)v40[202];
              uint64_t v207 = (v42 - v206) >> 3;
              if ((unint64_t)(v207 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v208 = v43 - (void)v206;
              unint64_t v209 = (uint64_t)(v43 - (void)v206) >> 2;
              if (v209 <= v207 + 1) {
                unint64_t v209 = v207 + 1;
              }
              if (v208 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v210 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v210 = v209;
              }
              if (v210)
              {
                uint64_t v211 = (char *)sub_5714((uint64_t)(v40 + 204), v210);
                unint64_t v42 = (char *)v40[203];
                unint64_t v206 = (char *)v40[202];
              }
              else
              {
                uint64_t v211 = 0;
              }
              unint64_t v374 = &v211[8 * v207];
              *(void *)unint64_t v374 = v41;
              unint64_t v44 = v374 + 8;
              while (v42 != v206)
              {
                uint64_t v375 = *((void *)v42 - 1);
                v42 -= 8;
                *((void *)v374 - 1) = v375;
                v374 -= 8;
              }
              v40[202] = v374;
              v40[203] = v44;
              v40[204] = &v211[8 * v210];
              if (v206) {
                operator delete(v206);
              }
            }
            else
            {
              *(void *)unint64_t v42 = v41;
              unint64_t v44 = v42 + 8;
            }
            v40[203] = v44;
            break;
          case 0x24:
            unint64_t v45 = *(void **)a1[2];
            uint64_t v46 = *(_WORD *)(a1[3] + 32) & 0x7FFF;
            unint64_t v47 = (char *)v45[206];
            unint64_t v48 = v45[207];
            if ((unint64_t)v47 >= v48)
            {
              unint64_t v212 = (char *)v45[205];
              uint64_t v213 = (v47 - v212) >> 3;
              if ((unint64_t)(v213 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v214 = v48 - (void)v212;
              unint64_t v215 = (uint64_t)(v48 - (void)v212) >> 2;
              if (v215 <= v213 + 1) {
                unint64_t v215 = v213 + 1;
              }
              if (v214 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v216 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v216 = v215;
              }
              if (v216)
              {
                uint64_t v217 = (char *)sub_5714((uint64_t)(v45 + 207), v216);
                unint64_t v47 = (char *)v45[206];
                unint64_t v212 = (char *)v45[205];
              }
              else
              {
                uint64_t v217 = 0;
              }
              unint64_t v376 = &v217[8 * v213];
              *(void *)unint64_t v376 = v46;
              uint64_t v49 = v376 + 8;
              while (v47 != v212)
              {
                uint64_t v377 = *((void *)v47 - 1);
                v47 -= 8;
                *((void *)v376 - 1) = v377;
                v376 -= 8;
              }
              v45[205] = v376;
              v45[206] = v49;
              v45[207] = &v217[8 * v216];
              if (v212) {
                operator delete(v212);
              }
            }
            else
            {
              *(void *)unint64_t v47 = v46;
              uint64_t v49 = v47 + 8;
            }
            v45[206] = v49;
            break;
          case 0x25:
            unint64_t v50 = *(void **)a1[2];
            uint64_t v51 = *(_WORD *)(a1[3] + 50) & 0x7FFF;
            unint64_t v52 = (char *)v50[209];
            unint64_t v53 = v50[210];
            if ((unint64_t)v52 >= v53)
            {
              unint64_t v218 = (char *)v50[208];
              uint64_t v219 = (v52 - v218) >> 3;
              if ((unint64_t)(v219 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v220 = v53 - (void)v218;
              unint64_t v221 = (uint64_t)(v53 - (void)v218) >> 2;
              if (v221 <= v219 + 1) {
                unint64_t v221 = v219 + 1;
              }
              if (v220 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v222 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v222 = v221;
              }
              if (v222)
              {
                uint64_t v223 = (char *)sub_5714((uint64_t)(v50 + 210), v222);
                unint64_t v52 = (char *)v50[209];
                unint64_t v218 = (char *)v50[208];
              }
              else
              {
                uint64_t v223 = 0;
              }
              unint64_t v378 = &v223[8 * v219];
              *(void *)unint64_t v378 = v51;
              uint64_t v54 = v378 + 8;
              while (v52 != v218)
              {
                uint64_t v379 = *((void *)v52 - 1);
                v52 -= 8;
                *((void *)v378 - 1) = v379;
                v378 -= 8;
              }
              v50[208] = v378;
              v50[209] = v54;
              v50[210] = &v223[8 * v222];
              if (v218) {
                operator delete(v218);
              }
            }
            else
            {
              *(void *)unint64_t v52 = v51;
              uint64_t v54 = v52 + 8;
            }
            v50[209] = v54;
            break;
          case 0x26:
            unint64_t v55 = *(void **)a1[2];
            uint64_t v56 = *(_WORD *)(a1[3] + 42) & 0x7FFF;
            unint64_t v57 = (char *)v55[212];
            unint64_t v58 = v55[213];
            if ((unint64_t)v57 >= v58)
            {
              unint64_t v224 = (char *)v55[211];
              uint64_t v225 = (v57 - v224) >> 3;
              if ((unint64_t)(v225 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v226 = v58 - (void)v224;
              unint64_t v227 = (uint64_t)(v58 - (void)v224) >> 2;
              if (v227 <= v225 + 1) {
                unint64_t v227 = v225 + 1;
              }
              if (v226 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v228 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v228 = v227;
              }
              if (v228)
              {
                uint64_t v229 = (char *)sub_5714((uint64_t)(v55 + 213), v228);
                unint64_t v57 = (char *)v55[212];
                unint64_t v224 = (char *)v55[211];
              }
              else
              {
                uint64_t v229 = 0;
              }
              unint64_t v380 = &v229[8 * v225];
              *(void *)unint64_t v380 = v56;
              unint64_t v59 = v380 + 8;
              while (v57 != v224)
              {
                uint64_t v381 = *((void *)v57 - 1);
                v57 -= 8;
                *((void *)v380 - 1) = v381;
                v380 -= 8;
              }
              v55[211] = v380;
              v55[212] = v59;
              v55[213] = &v229[8 * v228];
              if (v224) {
                operator delete(v224);
              }
            }
            else
            {
              *(void *)unint64_t v57 = v56;
              unint64_t v59 = v57 + 8;
            }
            v55[212] = v59;
            break;
          case 0x27:
            unint64_t v60 = *(void **)a1[2];
            uint64_t v61 = *(_WORD *)(a1[3] + 52) & 0x7FFF;
            unint64_t v62 = (char *)v60[215];
            unint64_t v63 = v60[216];
            if ((unint64_t)v62 >= v63)
            {
              unint64_t v230 = (char *)v60[214];
              uint64_t v231 = (v62 - v230) >> 3;
              if ((unint64_t)(v231 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v232 = v63 - (void)v230;
              unint64_t v233 = (uint64_t)(v63 - (void)v230) >> 2;
              if (v233 <= v231 + 1) {
                unint64_t v233 = v231 + 1;
              }
              if (v232 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v234 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v234 = v233;
              }
              if (v234)
              {
                uint64_t v235 = (char *)sub_5714((uint64_t)(v60 + 216), v234);
                unint64_t v62 = (char *)v60[215];
                unint64_t v230 = (char *)v60[214];
              }
              else
              {
                uint64_t v235 = 0;
              }
              unint64_t v382 = &v235[8 * v231];
              *(void *)unint64_t v382 = v61;
              unint64_t v64 = v382 + 8;
              while (v62 != v230)
              {
                uint64_t v383 = *((void *)v62 - 1);
                v62 -= 8;
                *((void *)v382 - 1) = v383;
                v382 -= 8;
              }
              v60[214] = v382;
              v60[215] = v64;
              v60[216] = &v235[8 * v234];
              if (v230) {
                operator delete(v230);
              }
            }
            else
            {
              *(void *)unint64_t v62 = v61;
              unint64_t v64 = v62 + 8;
            }
            v60[215] = v64;
            break;
          case 0x28:
            unint64_t v65 = *(void **)a1[2];
            uint64_t v66 = *(_WORD *)(a1[3] + 44) & 0x7FFF;
            uint64_t v67 = (char *)v65[218];
            unint64_t v68 = v65[219];
            if ((unint64_t)v67 >= v68)
            {
              unint64_t v236 = (char *)v65[217];
              uint64_t v237 = (v67 - v236) >> 3;
              if ((unint64_t)(v237 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v238 = v68 - (void)v236;
              unint64_t v239 = (uint64_t)(v68 - (void)v236) >> 2;
              if (v239 <= v237 + 1) {
                unint64_t v239 = v237 + 1;
              }
              if (v238 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v240 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v240 = v239;
              }
              if (v240)
              {
                uint64_t v241 = (char *)sub_5714((uint64_t)(v65 + 219), v240);
                uint64_t v67 = (char *)v65[218];
                unint64_t v236 = (char *)v65[217];
              }
              else
              {
                uint64_t v241 = 0;
              }
              uint64_t v384 = &v241[8 * v237];
              *(void *)uint64_t v384 = v66;
              uint64_t v69 = v384 + 8;
              while (v67 != v236)
              {
                uint64_t v385 = *((void *)v67 - 1);
                v67 -= 8;
                *((void *)v384 - 1) = v385;
                v384 -= 8;
              }
              v65[217] = v384;
              v65[218] = v69;
              v65[219] = &v241[8 * v240];
              if (v236) {
                operator delete(v236);
              }
            }
            else
            {
              *(void *)uint64_t v67 = v66;
              uint64_t v69 = v67 + 8;
            }
            v65[218] = v69;
            break;
          case 0x29:
            unint64_t v70 = *(void **)a1[2];
            uint64_t v71 = *(_WORD *)(a1[3] + 54) & 0x7FFF;
            unint64_t v72 = (char *)v70[221];
            unint64_t v73 = v70[222];
            if ((unint64_t)v72 >= v73)
            {
              unint64_t v242 = (char *)v70[220];
              uint64_t v243 = (v72 - v242) >> 3;
              if ((unint64_t)(v243 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v244 = v73 - (void)v242;
              unint64_t v245 = (uint64_t)(v73 - (void)v242) >> 2;
              if (v245 <= v243 + 1) {
                unint64_t v245 = v243 + 1;
              }
              if (v244 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v246 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v246 = v245;
              }
              if (v246)
              {
                uint64_t v247 = (char *)sub_5714((uint64_t)(v70 + 222), v246);
                unint64_t v72 = (char *)v70[221];
                unint64_t v242 = (char *)v70[220];
              }
              else
              {
                uint64_t v247 = 0;
              }
              unint64_t v386 = &v247[8 * v243];
              *(void *)unint64_t v386 = v71;
              unint64_t v74 = v386 + 8;
              while (v72 != v242)
              {
                uint64_t v387 = *((void *)v72 - 1);
                v72 -= 8;
                *((void *)v386 - 1) = v387;
                v386 -= 8;
              }
              v70[220] = v386;
              v70[221] = v74;
              v70[222] = &v247[8 * v246];
              if (v242) {
                operator delete(v242);
              }
            }
            else
            {
              *(void *)unint64_t v72 = v71;
              unint64_t v74 = v72 + 8;
            }
            v70[221] = v74;
            break;
          case 0x2A:
            uint64_t v75 = *(void **)a1[2];
            uint64_t v76 = *(_WORD *)(a1[3] + 46) & 0x7FFF;
            unint64_t v77 = (char *)v75[224];
            unint64_t v78 = v75[225];
            if ((unint64_t)v77 >= v78)
            {
              unint64_t v248 = (char *)v75[223];
              uint64_t v249 = (v77 - v248) >> 3;
              if ((unint64_t)(v249 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v250 = v78 - (void)v248;
              unint64_t v251 = (uint64_t)(v78 - (void)v248) >> 2;
              if (v251 <= v249 + 1) {
                unint64_t v251 = v249 + 1;
              }
              if (v250 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v252 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v252 = v251;
              }
              if (v252)
              {
                uint64_t v253 = (char *)sub_5714((uint64_t)(v75 + 225), v252);
                unint64_t v77 = (char *)v75[224];
                unint64_t v248 = (char *)v75[223];
              }
              else
              {
                uint64_t v253 = 0;
              }
              unint64_t v388 = &v253[8 * v249];
              *(void *)unint64_t v388 = v76;
              uint64_t v79 = v388 + 8;
              while (v77 != v248)
              {
                uint64_t v389 = *((void *)v77 - 1);
                v77 -= 8;
                *((void *)v388 - 1) = v389;
                v388 -= 8;
              }
              v75[223] = v388;
              v75[224] = v79;
              v75[225] = &v253[8 * v252];
              if (v248) {
                operator delete(v248);
              }
            }
            else
            {
              *(void *)unint64_t v77 = v76;
              uint64_t v79 = v77 + 8;
            }
            v75[224] = v79;
            break;
          case 0x2B:
            unint64_t v80 = *(void **)a1[2];
            uint64_t v81 = *(_WORD *)(a1[3] + 56) & 0x7FFF;
            unint64_t v82 = (char *)v80[227];
            unint64_t v83 = v80[228];
            if ((unint64_t)v82 >= v83)
            {
              uint64_t v254 = (char *)v80[226];
              uint64_t v255 = (v82 - v254) >> 3;
              if ((unint64_t)(v255 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v256 = v83 - (void)v254;
              unint64_t v257 = (uint64_t)(v83 - (void)v254) >> 2;
              if (v257 <= v255 + 1) {
                unint64_t v257 = v255 + 1;
              }
              if (v256 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v258 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v258 = v257;
              }
              if (v258)
              {
                uint64_t v259 = (char *)sub_5714((uint64_t)(v80 + 228), v258);
                unint64_t v82 = (char *)v80[227];
                uint64_t v254 = (char *)v80[226];
              }
              else
              {
                uint64_t v259 = 0;
              }
              unint64_t v390 = &v259[8 * v255];
              *(void *)unint64_t v390 = v81;
              unint64_t v84 = v390 + 8;
              while (v82 != v254)
              {
                uint64_t v391 = *((void *)v82 - 1);
                v82 -= 8;
                *((void *)v390 - 1) = v391;
                v390 -= 8;
              }
              v80[226] = v390;
              v80[227] = v84;
              v80[228] = &v259[8 * v258];
              if (v254) {
                operator delete(v254);
              }
            }
            else
            {
              *(void *)unint64_t v82 = v81;
              unint64_t v84 = v82 + 8;
            }
            v80[227] = v84;
            break;
          case 0x2C:
            unint64_t v85 = *(void **)a1[2];
            uint64_t v86 = *(_WORD *)(a1[3] + 48) & 0x7FFF;
            uint64_t v87 = (char *)v85[230];
            unint64_t v88 = v85[231];
            if ((unint64_t)v87 >= v88)
            {
              unint64_t v260 = (char *)v85[229];
              uint64_t v261 = (v87 - v260) >> 3;
              if ((unint64_t)(v261 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v262 = v88 - (void)v260;
              unint64_t v263 = (uint64_t)(v88 - (void)v260) >> 2;
              if (v263 <= v261 + 1) {
                unint64_t v263 = v261 + 1;
              }
              if (v262 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v264 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v264 = v263;
              }
              if (v264)
              {
                uint64_t v265 = (char *)sub_5714((uint64_t)(v85 + 231), v264);
                uint64_t v87 = (char *)v85[230];
                unint64_t v260 = (char *)v85[229];
              }
              else
              {
                uint64_t v265 = 0;
              }
              unint64_t v392 = &v265[8 * v261];
              *(void *)unint64_t v392 = v86;
              unint64_t v89 = v392 + 8;
              while (v87 != v260)
              {
                uint64_t v393 = *((void *)v87 - 1);
                v87 -= 8;
                *((void *)v392 - 1) = v393;
                v392 -= 8;
              }
              v85[229] = v392;
              v85[230] = v89;
              v85[231] = &v265[8 * v264];
              if (v260) {
                operator delete(v260);
              }
            }
            else
            {
              *(void *)uint64_t v87 = v86;
              unint64_t v89 = v87 + 8;
            }
            v85[230] = v89;
            break;
          case 0x2D:
            unint64_t v90 = *(void **)a1[2];
            uint64_t v91 = *(_WORD *)(a1[3] + 66) & 0x7FFF;
            uint64_t v92 = (char *)v90[233];
            unint64_t v93 = v90[234];
            if ((unint64_t)v92 >= v93)
            {
              unint64_t v266 = (char *)v90[232];
              uint64_t v267 = (v92 - v266) >> 3;
              if ((unint64_t)(v267 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v268 = v93 - (void)v266;
              unint64_t v269 = (uint64_t)(v93 - (void)v266) >> 2;
              if (v269 <= v267 + 1) {
                unint64_t v269 = v267 + 1;
              }
              if (v268 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v270 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v270 = v269;
              }
              if (v270)
              {
                uint64_t v271 = (char *)sub_5714((uint64_t)(v90 + 234), v270);
                uint64_t v92 = (char *)v90[233];
                unint64_t v266 = (char *)v90[232];
              }
              else
              {
                uint64_t v271 = 0;
              }
              unint64_t v394 = &v271[8 * v267];
              *(void *)unint64_t v394 = v91;
              unint64_t v94 = v394 + 8;
              while (v92 != v266)
              {
                uint64_t v395 = *((void *)v92 - 1);
                v92 -= 8;
                *((void *)v394 - 1) = v395;
                v394 -= 8;
              }
              v90[232] = v394;
              v90[233] = v94;
              v90[234] = &v271[8 * v270];
              if (v266) {
                operator delete(v266);
              }
            }
            else
            {
              *(void *)uint64_t v92 = v91;
              unint64_t v94 = v92 + 8;
            }
            v90[233] = v94;
            break;
          case 0x2E:
            unint64_t v95 = *(void **)a1[2];
            uint64_t v96 = *(_WORD *)(a1[3] + 58) & 0x7FFF;
            uint64_t v97 = (char *)v95[236];
            unint64_t v98 = v95[237];
            if ((unint64_t)v97 >= v98)
            {
              uint64_t v272 = (char *)v95[235];
              uint64_t v273 = (v97 - v272) >> 3;
              if ((unint64_t)(v273 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v274 = v98 - (void)v272;
              unint64_t v275 = (uint64_t)(v98 - (void)v272) >> 2;
              if (v275 <= v273 + 1) {
                unint64_t v275 = v273 + 1;
              }
              if (v274 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v276 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v276 = v275;
              }
              if (v276)
              {
                uint64_t v277 = (char *)sub_5714((uint64_t)(v95 + 237), v276);
                uint64_t v97 = (char *)v95[236];
                uint64_t v272 = (char *)v95[235];
              }
              else
              {
                uint64_t v277 = 0;
              }
              unint64_t v396 = &v277[8 * v273];
              *(void *)unint64_t v396 = v96;
              uint64_t v99 = v396 + 8;
              while (v97 != v272)
              {
                uint64_t v397 = *((void *)v97 - 1);
                v97 -= 8;
                *((void *)v396 - 1) = v397;
                v396 -= 8;
              }
              v95[235] = v396;
              v95[236] = v99;
              v95[237] = &v277[8 * v276];
              if (v272) {
                operator delete(v272);
              }
            }
            else
            {
              *(void *)uint64_t v97 = v96;
              uint64_t v99 = v97 + 8;
            }
            v95[236] = v99;
            break;
          case 0x2F:
            unint64_t v100 = *(void **)a1[2];
            uint64_t v101 = *(_WORD *)(a1[3] + 68) & 0x7FFF;
            unint64_t v102 = (char *)v100[239];
            unint64_t v103 = v100[240];
            if ((unint64_t)v102 >= v103)
            {
              uint64_t v278 = (char *)v100[238];
              uint64_t v279 = (v102 - v278) >> 3;
              if ((unint64_t)(v279 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v280 = v103 - (void)v278;
              unint64_t v281 = (uint64_t)(v103 - (void)v278) >> 2;
              if (v281 <= v279 + 1) {
                unint64_t v281 = v279 + 1;
              }
              if (v280 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v282 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v282 = v281;
              }
              if (v282)
              {
                uint64_t v283 = (char *)sub_5714((uint64_t)(v100 + 240), v282);
                unint64_t v102 = (char *)v100[239];
                uint64_t v278 = (char *)v100[238];
              }
              else
              {
                uint64_t v283 = 0;
              }
              uint64_t v398 = &v283[8 * v279];
              *(void *)uint64_t v398 = v101;
              uint64_t v104 = v398 + 8;
              while (v102 != v278)
              {
                uint64_t v399 = *((void *)v102 - 1);
                v102 -= 8;
                *((void *)v398 - 1) = v399;
                v398 -= 8;
              }
              v100[238] = v398;
              v100[239] = v104;
              v100[240] = &v283[8 * v282];
              if (v278) {
                operator delete(v278);
              }
            }
            else
            {
              *(void *)unint64_t v102 = v101;
              uint64_t v104 = v102 + 8;
            }
            v100[239] = v104;
            break;
          case 0x30:
            uint64_t v105 = *(void **)a1[2];
            uint64_t v106 = *(_WORD *)(a1[3] + 60) & 0x7FFF;
            unint64_t v107 = (char *)v105[242];
            unint64_t v108 = v105[243];
            if ((unint64_t)v107 >= v108)
            {
              unint64_t v284 = (char *)v105[241];
              uint64_t v285 = (v107 - v284) >> 3;
              if ((unint64_t)(v285 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v286 = v108 - (void)v284;
              unint64_t v287 = (uint64_t)(v108 - (void)v284) >> 2;
              if (v287 <= v285 + 1) {
                unint64_t v287 = v285 + 1;
              }
              if (v286 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v288 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v288 = v287;
              }
              if (v288)
              {
                uint64_t v289 = (char *)sub_5714((uint64_t)(v105 + 243), v288);
                unint64_t v107 = (char *)v105[242];
                unint64_t v284 = (char *)v105[241];
              }
              else
              {
                uint64_t v289 = 0;
              }
              unint64_t v400 = &v289[8 * v285];
              *(void *)unint64_t v400 = v106;
              uint64_t v109 = v400 + 8;
              while (v107 != v284)
              {
                uint64_t v401 = *((void *)v107 - 1);
                v107 -= 8;
                *((void *)v400 - 1) = v401;
                v400 -= 8;
              }
              v105[241] = v400;
              v105[242] = v109;
              v105[243] = &v289[8 * v288];
              if (v284) {
                operator delete(v284);
              }
            }
            else
            {
              *(void *)unint64_t v107 = v106;
              uint64_t v109 = v107 + 8;
            }
            v105[242] = v109;
            break;
          case 0x31:
            uint64_t v110 = *(void **)a1[2];
            uint64_t v111 = *(_WORD *)(a1[3] + 70) & 0x7FFF;
            unint64_t v112 = (char *)v110[245];
            unint64_t v113 = v110[246];
            if ((unint64_t)v112 >= v113)
            {
              uint64_t v290 = (char *)v110[244];
              uint64_t v291 = (v112 - v290) >> 3;
              if ((unint64_t)(v291 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v292 = v113 - (void)v290;
              unint64_t v293 = (uint64_t)(v113 - (void)v290) >> 2;
              if (v293 <= v291 + 1) {
                unint64_t v293 = v291 + 1;
              }
              if (v292 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v294 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v294 = v293;
              }
              if (v294)
              {
                unint64_t v295 = (char *)sub_5714((uint64_t)(v110 + 246), v294);
                unint64_t v112 = (char *)v110[245];
                uint64_t v290 = (char *)v110[244];
              }
              else
              {
                unint64_t v295 = 0;
              }
              unint64_t v402 = &v295[8 * v291];
              *(void *)unint64_t v402 = v111;
              unint64_t v114 = v402 + 8;
              while (v112 != v290)
              {
                uint64_t v403 = *((void *)v112 - 1);
                v112 -= 8;
                *((void *)v402 - 1) = v403;
                v402 -= 8;
              }
              v110[244] = v402;
              v110[245] = v114;
              v110[246] = &v295[8 * v294];
              if (v290) {
                operator delete(v290);
              }
            }
            else
            {
              *(void *)unint64_t v112 = v111;
              unint64_t v114 = v112 + 8;
            }
            v110[245] = v114;
            break;
          case 0x32:
            uint64_t v115 = *(void **)a1[2];
            uint64_t v116 = *(_WORD *)(a1[3] + 62) & 0x7FFF;
            uint64_t v117 = (char *)v115[248];
            unint64_t v118 = v115[249];
            if ((unint64_t)v117 >= v118)
            {
              unint64_t v296 = (char *)v115[247];
              uint64_t v297 = (v117 - v296) >> 3;
              if ((unint64_t)(v297 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v298 = v118 - (void)v296;
              unint64_t v299 = (uint64_t)(v118 - (void)v296) >> 2;
              if (v299 <= v297 + 1) {
                unint64_t v299 = v297 + 1;
              }
              if (v298 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v300 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v300 = v299;
              }
              if (v300)
              {
                unint64_t v301 = (char *)sub_5714((uint64_t)(v115 + 249), v300);
                uint64_t v117 = (char *)v115[248];
                unint64_t v296 = (char *)v115[247];
              }
              else
              {
                unint64_t v301 = 0;
              }
              unint64_t v404 = &v301[8 * v297];
              *(void *)unint64_t v404 = v116;
              unint64_t v119 = v404 + 8;
              while (v117 != v296)
              {
                uint64_t v405 = *((void *)v117 - 1);
                v117 -= 8;
                *((void *)v404 - 1) = v405;
                v404 -= 8;
              }
              v115[247] = v404;
              v115[248] = v119;
              v115[249] = &v301[8 * v300];
              if (v296) {
                operator delete(v296);
              }
            }
            else
            {
              *(void *)uint64_t v117 = v116;
              unint64_t v119 = v117 + 8;
            }
            v115[248] = v119;
            break;
          case 0x33:
            unint64_t v120 = *(void **)a1[2];
            uint64_t v121 = *(_WORD *)(a1[3] + 72) & 0x7FFF;
            unint64_t v122 = (char *)v120[251];
            unint64_t v123 = v120[252];
            if ((unint64_t)v122 >= v123)
            {
              unint64_t v302 = (char *)v120[250];
              uint64_t v303 = (v122 - v302) >> 3;
              if ((unint64_t)(v303 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v304 = v123 - (void)v302;
              unint64_t v305 = (uint64_t)(v123 - (void)v302) >> 2;
              if (v305 <= v303 + 1) {
                unint64_t v305 = v303 + 1;
              }
              if (v304 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v306 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v306 = v305;
              }
              if (v306)
              {
                uint64_t v307 = (char *)sub_5714((uint64_t)(v120 + 252), v306);
                unint64_t v122 = (char *)v120[251];
                unint64_t v302 = (char *)v120[250];
              }
              else
              {
                uint64_t v307 = 0;
              }
              unint64_t v406 = &v307[8 * v303];
              *(void *)unint64_t v406 = v121;
              unint64_t v124 = v406 + 8;
              while (v122 != v302)
              {
                uint64_t v407 = *((void *)v122 - 1);
                v122 -= 8;
                *((void *)v406 - 1) = v407;
                v406 -= 8;
              }
              v120[250] = v406;
              v120[251] = v124;
              v120[252] = &v307[8 * v306];
              if (v302) {
                operator delete(v302);
              }
            }
            else
            {
              *(void *)unint64_t v122 = v121;
              unint64_t v124 = v122 + 8;
            }
            v120[251] = v124;
            break;
          case 0x34:
            uint64_t v125 = *(void **)a1[2];
            uint64_t v126 = *(_WORD *)(a1[3] + 64) & 0x7FFF;
            uint64_t v127 = (char *)v125[254];
            unint64_t v128 = v125[255];
            if ((unint64_t)v127 >= v128)
            {
              unint64_t v308 = (char *)v125[253];
              uint64_t v309 = (v127 - v308) >> 3;
              if ((unint64_t)(v309 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v310 = v128 - (void)v308;
              unint64_t v311 = (uint64_t)(v128 - (void)v308) >> 2;
              if (v311 <= v309 + 1) {
                unint64_t v311 = v309 + 1;
              }
              if (v310 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v312 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v312 = v311;
              }
              if (v312)
              {
                uint64_t v313 = (char *)sub_5714((uint64_t)(v125 + 255), v312);
                uint64_t v127 = (char *)v125[254];
                unint64_t v308 = (char *)v125[253];
              }
              else
              {
                uint64_t v313 = 0;
              }
              unint64_t v408 = &v313[8 * v309];
              *(void *)unint64_t v408 = v126;
              uint64_t v129 = v408 + 8;
              while (v127 != v308)
              {
                uint64_t v409 = *((void *)v127 - 1);
                v127 -= 8;
                *((void *)v408 - 1) = v409;
                v408 -= 8;
              }
              v125[253] = v408;
              v125[254] = v129;
              v125[255] = &v313[8 * v312];
              if (v308) {
                operator delete(v308);
              }
            }
            else
            {
              *(void *)uint64_t v127 = v126;
              uint64_t v129 = v127 + 8;
            }
            v125[254] = v129;
            break;
          case 0x35:
            unint64_t v130 = *(void **)a1[2];
            uint64_t v131 = *(_WORD *)(a1[3] + 82) & 0x7FFF;
            uint64_t v132 = (char *)v130[257];
            unint64_t v133 = v130[258];
            if ((unint64_t)v132 >= v133)
            {
              uint64_t v314 = (char *)v130[256];
              uint64_t v315 = (v132 - v314) >> 3;
              if ((unint64_t)(v315 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v316 = v133 - (void)v314;
              unint64_t v317 = (uint64_t)(v133 - (void)v314) >> 2;
              if (v317 <= v315 + 1) {
                unint64_t v317 = v315 + 1;
              }
              if (v316 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v318 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v318 = v317;
              }
              if (v318)
              {
                int v319 = (char *)sub_5714((uint64_t)(v130 + 258), v318);
                uint64_t v132 = (char *)v130[257];
                uint64_t v314 = (char *)v130[256];
              }
              else
              {
                int v319 = 0;
              }
              unint64_t v410 = &v319[8 * v315];
              *(void *)unint64_t v410 = v131;
              unint64_t v134 = v410 + 8;
              while (v132 != v314)
              {
                uint64_t v411 = *((void *)v132 - 1);
                v132 -= 8;
                *((void *)v410 - 1) = v411;
                v410 -= 8;
              }
              v130[256] = v410;
              v130[257] = v134;
              v130[258] = &v319[8 * v318];
              if (v314) {
                operator delete(v314);
              }
            }
            else
            {
              *(void *)uint64_t v132 = v131;
              unint64_t v134 = v132 + 8;
            }
            v130[257] = v134;
            break;
          case 0x36:
            uint64_t v135 = *(void **)a1[2];
            uint64_t v136 = *(_WORD *)(a1[3] + 74) & 0x7FFF;
            uint64_t v137 = (char *)v135[260];
            unint64_t v138 = v135[261];
            if ((unint64_t)v137 >= v138)
            {
              unint64_t v320 = (char *)v135[259];
              uint64_t v321 = (v137 - v320) >> 3;
              if ((unint64_t)(v321 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v322 = v138 - (void)v320;
              unint64_t v323 = (uint64_t)(v138 - (void)v320) >> 2;
              if (v323 <= v321 + 1) {
                unint64_t v323 = v321 + 1;
              }
              if (v322 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v324 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v324 = v323;
              }
              if (v324)
              {
                unint64_t v325 = (char *)sub_5714((uint64_t)(v135 + 261), v324);
                uint64_t v137 = (char *)v135[260];
                unint64_t v320 = (char *)v135[259];
              }
              else
              {
                unint64_t v325 = 0;
              }
              uint64_t v412 = &v325[8 * v321];
              *(void *)uint64_t v412 = v136;
              uint64_t v139 = v412 + 8;
              while (v137 != v320)
              {
                uint64_t v413 = *((void *)v137 - 1);
                v137 -= 8;
                *((void *)v412 - 1) = v413;
                v412 -= 8;
              }
              v135[259] = v412;
              v135[260] = v139;
              v135[261] = &v325[8 * v324];
              if (v320) {
                operator delete(v320);
              }
            }
            else
            {
              *(void *)uint64_t v137 = v136;
              uint64_t v139 = v137 + 8;
            }
            v135[260] = v139;
            break;
          case 0x37:
            unint64_t v140 = *(void **)a1[2];
            uint64_t v141 = *(_WORD *)(a1[3] + 84) & 0x7FFF;
            unint64_t v142 = (char *)v140[263];
            unint64_t v143 = v140[264];
            if ((unint64_t)v142 >= v143)
            {
              int v326 = (char *)v140[262];
              uint64_t v327 = (v142 - v326) >> 3;
              if ((unint64_t)(v327 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v328 = v143 - (void)v326;
              unint64_t v329 = (uint64_t)(v143 - (void)v326) >> 2;
              if (v329 <= v327 + 1) {
                unint64_t v329 = v327 + 1;
              }
              if (v328 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v330 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v330 = v329;
              }
              if (v330)
              {
                unint64_t v331 = (char *)sub_5714((uint64_t)(v140 + 264), v330);
                unint64_t v142 = (char *)v140[263];
                int v326 = (char *)v140[262];
              }
              else
              {
                unint64_t v331 = 0;
              }
              unint64_t v414 = &v331[8 * v327];
              *(void *)unint64_t v414 = v141;
              uint64_t v144 = v414 + 8;
              while (v142 != v326)
              {
                uint64_t v415 = *((void *)v142 - 1);
                v142 -= 8;
                *((void *)v414 - 1) = v415;
                v414 -= 8;
              }
              v140[262] = v414;
              v140[263] = v144;
              v140[264] = &v331[8 * v330];
              if (v326) {
                operator delete(v326);
              }
            }
            else
            {
              *(void *)unint64_t v142 = v141;
              uint64_t v144 = v142 + 8;
            }
            v140[263] = v144;
            break;
          case 0x38:
            unint64_t v145 = *(void **)a1[2];
            uint64_t v146 = *(_WORD *)(a1[3] + 76) & 0x7FFF;
            uint64_t v147 = (char *)v145[266];
            unint64_t v148 = v145[267];
            if ((unint64_t)v147 >= v148)
            {
              unint64_t v332 = (char *)v145[265];
              uint64_t v333 = (v147 - v332) >> 3;
              if ((unint64_t)(v333 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v334 = v148 - (void)v332;
              unint64_t v335 = (uint64_t)(v148 - (void)v332) >> 2;
              if (v335 <= v333 + 1) {
                unint64_t v335 = v333 + 1;
              }
              if (v334 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v336 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v336 = v335;
              }
              if (v336)
              {
                uint64_t v337 = (char *)sub_5714((uint64_t)(v145 + 267), v336);
                uint64_t v147 = (char *)v145[266];
                unint64_t v332 = (char *)v145[265];
              }
              else
              {
                uint64_t v337 = 0;
              }
              unint64_t v416 = &v337[8 * v333];
              *(void *)unint64_t v416 = v146;
              unint64_t v149 = v416 + 8;
              while (v147 != v332)
              {
                uint64_t v417 = *((void *)v147 - 1);
                v147 -= 8;
                *((void *)v416 - 1) = v417;
                v416 -= 8;
              }
              v145[265] = v416;
              v145[266] = v149;
              v145[267] = &v337[8 * v336];
              if (v332) {
                operator delete(v332);
              }
            }
            else
            {
              *(void *)uint64_t v147 = v146;
              unint64_t v149 = v147 + 8;
            }
            v145[266] = v149;
            break;
          case 0x39:
            uint64_t v150 = *(void **)a1[2];
            uint64_t v151 = *(_WORD *)(a1[3] + 86) & 0x7FFF;
            unint64_t v152 = (char *)v150[269];
            unint64_t v153 = v150[270];
            if ((unint64_t)v152 >= v153)
            {
              unint64_t v338 = (char *)v150[268];
              uint64_t v339 = (v152 - v338) >> 3;
              if ((unint64_t)(v339 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v340 = v153 - (void)v338;
              unint64_t v341 = (uint64_t)(v153 - (void)v338) >> 2;
              if (v341 <= v339 + 1) {
                unint64_t v341 = v339 + 1;
              }
              if (v340 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v342 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v342 = v341;
              }
              if (v342)
              {
                unint64_t v343 = (char *)sub_5714((uint64_t)(v150 + 270), v342);
                unint64_t v152 = (char *)v150[269];
                unint64_t v338 = (char *)v150[268];
              }
              else
              {
                unint64_t v343 = 0;
              }
              unint64_t v418 = &v343[8 * v339];
              *(void *)unint64_t v418 = v151;
              unint64_t v154 = v418 + 8;
              while (v152 != v338)
              {
                uint64_t v419 = *((void *)v152 - 1);
                v152 -= 8;
                *((void *)v418 - 1) = v419;
                v418 -= 8;
              }
              v150[268] = v418;
              v150[269] = v154;
              v150[270] = &v343[8 * v342];
              if (v338) {
                operator delete(v338);
              }
            }
            else
            {
              *(void *)unint64_t v152 = v151;
              unint64_t v154 = v152 + 8;
            }
            v150[269] = v154;
            break;
          case 0x3A:
            unint64_t v155 = *(void **)a1[2];
            uint64_t v156 = *(_WORD *)(a1[3] + 78) & 0x7FFF;
            uint64_t v157 = (char *)v155[272];
            unint64_t v158 = v155[273];
            if ((unint64_t)v157 >= v158)
            {
              unint64_t v344 = (char *)v155[271];
              uint64_t v345 = (v157 - v344) >> 3;
              if ((unint64_t)(v345 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v346 = v158 - (void)v344;
              unint64_t v347 = (uint64_t)(v158 - (void)v344) >> 2;
              if (v347 <= v345 + 1) {
                unint64_t v347 = v345 + 1;
              }
              if (v346 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v348 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v348 = v347;
              }
              if (v348)
              {
                uint64_t v349 = (char *)sub_5714((uint64_t)(v155 + 273), v348);
                uint64_t v157 = (char *)v155[272];
                unint64_t v344 = (char *)v155[271];
              }
              else
              {
                uint64_t v349 = 0;
              }
              unint64_t v420 = &v349[8 * v345];
              *(void *)unint64_t v420 = v156;
              unint64_t v159 = v420 + 8;
              while (v157 != v344)
              {
                uint64_t v421 = *((void *)v157 - 1);
                v157 -= 8;
                *((void *)v420 - 1) = v421;
                v420 -= 8;
              }
              v155[271] = v420;
              v155[272] = v159;
              v155[273] = &v349[8 * v348];
              if (v344) {
                operator delete(v344);
              }
            }
            else
            {
              *(void *)uint64_t v157 = v156;
              unint64_t v159 = v157 + 8;
            }
            v155[272] = v159;
            break;
          case 0x3B:
            unint64_t v160 = *(void **)a1[2];
            uint64_t v161 = *(_WORD *)(a1[3] + 88) & 0x7FFF;
            unint64_t v162 = (char *)v160[275];
            unint64_t v163 = v160[276];
            if ((unint64_t)v162 >= v163)
            {
              unint64_t v350 = (char *)v160[274];
              uint64_t v351 = (v162 - v350) >> 3;
              if ((unint64_t)(v351 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v352 = v163 - (void)v350;
              unint64_t v353 = (uint64_t)(v163 - (void)v350) >> 2;
              if (v353 <= v351 + 1) {
                unint64_t v353 = v351 + 1;
              }
              if (v352 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v354 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v354 = v353;
              }
              if (v354)
              {
                int v355 = (char *)sub_5714((uint64_t)(v160 + 276), v354);
                unint64_t v162 = (char *)v160[275];
                unint64_t v350 = (char *)v160[274];
              }
              else
              {
                int v355 = 0;
              }
              unint64_t v422 = &v355[8 * v351];
              *(void *)unint64_t v422 = v161;
              unint64_t v164 = v422 + 8;
              while (v162 != v350)
              {
                uint64_t v423 = *((void *)v162 - 1);
                v162 -= 8;
                *((void *)v422 - 1) = v423;
                v422 -= 8;
              }
              v160[274] = v422;
              v160[275] = v164;
              v160[276] = &v355[8 * v354];
              if (v350) {
                operator delete(v350);
              }
            }
            else
            {
              *(void *)unint64_t v162 = v161;
              unint64_t v164 = v162 + 8;
            }
            v160[275] = v164;
            break;
          case 0x3C:
            unint64_t v165 = *(void **)a1[2];
            uint64_t v166 = *(_WORD *)(a1[3] + 80) & 0x7FFF;
            uint64_t v167 = (char *)v165[278];
            unint64_t v168 = v165[279];
            if ((unint64_t)v167 >= v168)
            {
              uint64_t v356 = (char *)v165[277];
              uint64_t v357 = (v167 - v356) >> 3;
              if ((unint64_t)(v357 + 1) >> 61) {
LABEL_594:
              }
                sub_566C();
              unint64_t v358 = v168 - (void)v356;
              unint64_t v359 = (uint64_t)(v168 - (void)v356) >> 2;
              if (v359 <= v357 + 1) {
                unint64_t v359 = v357 + 1;
              }
              if (v358 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v360 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v360 = v359;
              }
              if (v360)
              {
                int v361 = (char *)sub_5714((uint64_t)(v165 + 279), v360);
                uint64_t v167 = (char *)v165[278];
                uint64_t v356 = (char *)v165[277];
              }
              else
              {
                int v361 = 0;
              }
              unint64_t v424 = &v361[8 * v357];
              *(void *)unint64_t v424 = v166;
              uint64_t v169 = v424 + 8;
              while (v167 != v356)
              {
                uint64_t v425 = *((void *)v167 - 1);
                v167 -= 8;
                *((void *)v424 - 1) = v425;
                v424 -= 8;
              }
              v165[277] = v424;
              v165[278] = v169;
              v165[279] = &v361[8 * v360];
              if (v356) {
                operator delete(v356);
              }
            }
            else
            {
              *(void *)uint64_t v167 = v166;
              uint64_t v169 = v167 + 8;
            }
            v165[278] = v169;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_8AB14(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    unint64_t v190 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v189 = *v190;
    uint64_t v191 = (char *)v190[1] - (char *)*v190;
    if (v191)
    {
      unint64_t v192 = v191 >> 2;
      if (v192 <= 1) {
        unint64_t v192 = 1;
      }
      do
      {
        int v193 = *v189++;
        switch(v193)
        {
          case 11:
            uint64_t v194 = *(_WORD *)(a1[3] + 48) & 0x7FFF;
            uint64_t v195 = (void *)(*(void *)a1[2] + 1048);
            goto LABEL_248;
          case 12:
            uint64_t v194 = *(_WORD *)(a1[3] + 36) & 0x7FFF;
            uint64_t v195 = (void *)(*(void *)a1[2] + 1072);
            goto LABEL_248;
          case 13:
            uint64_t v194 = *(unsigned __int16 *)(a1[3] + 44);
            uint64_t v195 = (void *)(*(void *)a1[2] + 1096);
            goto LABEL_248;
          case 14:
            uint64_t v194 = *(unsigned __int16 *)(a1[3] + 32);
            uint64_t v195 = (void *)(*(void *)a1[2] + 1120);
            goto LABEL_248;
          case 15:
            uint64_t v194 = *(unsigned __int16 *)(a1[3] + 38);
            uint64_t v195 = (void *)(*(void *)a1[2] + 1144);
            goto LABEL_248;
          case 16:
            uint64_t v194 = *(unsigned __int16 *)(a1[3] + 26);
            uint64_t v195 = (void *)(*(void *)a1[2] + 1168);
            goto LABEL_248;
          case 17:
            uint64_t v194 = *(unsigned __int16 *)(a1[3] + 40);
            uint64_t v195 = (void *)(*(void *)a1[2] + 1192);
            goto LABEL_248;
          case 18:
            uint64_t v194 = *(unsigned __int16 *)(a1[3] + 28);
            uint64_t v195 = (void *)(*(void *)a1[2] + 1216);
            goto LABEL_248;
          case 19:
            uint64_t v194 = *(unsigned __int16 *)(a1[3] + 46);
            uint64_t v195 = (void *)(*(void *)a1[2] + 1240);
            goto LABEL_248;
          case 20:
            uint64_t v194 = *(unsigned __int16 *)(a1[3] + 34);
            uint64_t v195 = (void *)(*(void *)a1[2] + 1264);
            goto LABEL_248;
          case 21:
            uint64_t v194 = *(unsigned __int16 *)(a1[3] + 42);
            uint64_t v195 = (void *)(*(void *)a1[2] + 1288);
            goto LABEL_248;
          case 22:
            uint64_t v194 = *(unsigned __int16 *)(a1[3] + 30);
            uint64_t v195 = (void *)(*(void *)a1[2] + 1312);
            goto LABEL_248;
          case 23:
            uint64_t v194 = *(_WORD *)(a1[3] + 50) & 0x7FFF;
            uint64_t v195 = (void *)(*(void *)a1[2] + 1336);
LABEL_248:
            *(void *)(*v195 - 8) += v194;
            break;
          default:
            break;
        }
        --v192;
      }
      while (v192);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    uint64_t v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0xB:
            uint64_t v10 = *(void **)a1[2];
            uint64_t v11 = *(_WORD *)(a1[3] + 48) & 0x7FFF;
            unsigned int v12 = (char *)v10[131];
            unint64_t v13 = v10[132];
            if ((unint64_t)v12 >= v13)
            {
              unint64_t v85 = (char *)v10[130];
              uint64_t v86 = (v12 - v85) >> 3;
              if ((unint64_t)(v86 + 1) >> 61) {
                goto LABEL_252;
              }
              unint64_t v87 = v13 - (void)v85;
              unint64_t v88 = (uint64_t)(v13 - (void)v85) >> 2;
              if (v88 <= v86 + 1) {
                unint64_t v88 = v86 + 1;
              }
              if (v87 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v89 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v89 = v88;
              }
              if (v89)
              {
                unint64_t v90 = (char *)sub_5714((uint64_t)(v10 + 132), v89);
                unsigned int v12 = (char *)v10[131];
                unint64_t v85 = (char *)v10[130];
              }
              else
              {
                unint64_t v90 = 0;
              }
              unint64_t v163 = &v90[8 * v86];
              *(void *)unint64_t v163 = v11;
              unint64_t v14 = v163 + 8;
              while (v12 != v85)
              {
                uint64_t v164 = *((void *)v12 - 1);
                v12 -= 8;
                *((void *)v163 - 1) = v164;
                v163 -= 8;
              }
              v10[130] = v163;
              v10[131] = v14;
              v10[132] = &v90[8 * v89];
              if (v85) {
                operator delete(v85);
              }
            }
            else
            {
              *(void *)unsigned int v12 = v11;
              unint64_t v14 = v12 + 8;
            }
            v10[131] = v14;
            break;
          case 0xC:
            unint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_WORD *)(a1[3] + 36) & 0x7FFF;
            uint64_t v17 = (char *)v15[134];
            unint64_t v18 = v15[135];
            if ((unint64_t)v17 >= v18)
            {
              uint64_t v91 = (char *)v15[133];
              uint64_t v92 = (v17 - v91) >> 3;
              if ((unint64_t)(v92 + 1) >> 61) {
                goto LABEL_252;
              }
              unint64_t v93 = v18 - (void)v91;
              unint64_t v94 = (uint64_t)(v18 - (void)v91) >> 2;
              if (v94 <= v92 + 1) {
                unint64_t v94 = v92 + 1;
              }
              if (v93 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v95 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v95 = v94;
              }
              if (v95)
              {
                uint64_t v96 = (char *)sub_5714((uint64_t)(v15 + 135), v95);
                uint64_t v17 = (char *)v15[134];
                uint64_t v91 = (char *)v15[133];
              }
              else
              {
                uint64_t v96 = 0;
              }
              unint64_t v165 = &v96[8 * v92];
              *(void *)unint64_t v165 = v16;
              unint64_t v19 = v165 + 8;
              while (v17 != v91)
              {
                uint64_t v166 = *((void *)v17 - 1);
                v17 -= 8;
                *((void *)v165 - 1) = v166;
                v165 -= 8;
              }
              v15[133] = v165;
              v15[134] = v19;
              v15[135] = &v96[8 * v95];
              if (v91) {
                operator delete(v91);
              }
            }
            else
            {
              *(void *)uint64_t v17 = v16;
              unint64_t v19 = v17 + 8;
            }
            v15[134] = v19;
            break;
          case 0xD:
            uint64_t v20 = a1[2];
            uint64_t v21 = *(void **)v20;
            uint64_t v22 = *(unsigned __int16 *)(a1[3] + 44);
            unint64_t v23 = *(char **)(*(void *)v20 + 1096);
            unint64_t v24 = *(void *)(*(void *)v20 + 1104);
            if ((unint64_t)v23 >= v24)
            {
              uint64_t v97 = (char *)v21[136];
              uint64_t v98 = (v23 - v97) >> 3;
              if ((unint64_t)(v98 + 1) >> 61) {
                goto LABEL_252;
              }
              unint64_t v99 = v24 - (void)v97;
              unint64_t v100 = (uint64_t)(v24 - (void)v97) >> 2;
              if (v100 <= v98 + 1) {
                unint64_t v100 = v98 + 1;
              }
              if (v99 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v101 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v101 = v100;
              }
              if (v101)
              {
                unint64_t v102 = (char *)sub_5714((uint64_t)(v21 + 138), v101);
                unint64_t v23 = (char *)v21[137];
                uint64_t v97 = (char *)v21[136];
              }
              else
              {
                unint64_t v102 = 0;
              }
              uint64_t v167 = &v102[8 * v98];
              *(void *)uint64_t v167 = v22;
              uint64_t v25 = v167 + 8;
              while (v23 != v97)
              {
                uint64_t v168 = *((void *)v23 - 1);
                v23 -= 8;
                *((void *)v167 - 1) = v168;
                v167 -= 8;
              }
              v21[136] = v167;
              v21[137] = v25;
              v21[138] = &v102[8 * v101];
              if (v97) {
                operator delete(v97);
              }
            }
            else
            {
              *(void *)unint64_t v23 = v22;
              uint64_t v25 = v23 + 8;
            }
            v21[137] = v25;
            break;
          case 0xE:
            uint64_t v26 = a1[2];
            uint64_t v27 = *(void **)v26;
            uint64_t v28 = *(unsigned __int16 *)(a1[3] + 32);
            unint64_t v29 = *(char **)(*(void *)v26 + 1120);
            unint64_t v30 = *(void *)(*(void *)v26 + 1128);
            if ((unint64_t)v29 >= v30)
            {
              unint64_t v103 = (char *)v27[139];
              uint64_t v104 = (v29 - v103) >> 3;
              if ((unint64_t)(v104 + 1) >> 61) {
                goto LABEL_252;
              }
              unint64_t v105 = v30 - (void)v103;
              unint64_t v106 = (uint64_t)(v30 - (void)v103) >> 2;
              if (v106 <= v104 + 1) {
                unint64_t v106 = v104 + 1;
              }
              if (v105 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v107 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v107 = v106;
              }
              if (v107)
              {
                unint64_t v108 = (char *)sub_5714((uint64_t)(v27 + 141), v107);
                unint64_t v29 = (char *)v27[140];
                unint64_t v103 = (char *)v27[139];
              }
              else
              {
                unint64_t v108 = 0;
              }
              uint64_t v169 = &v108[8 * v104];
              *(void *)uint64_t v169 = v28;
              uint64_t v31 = v169 + 8;
              while (v29 != v103)
              {
                uint64_t v170 = *((void *)v29 - 1);
                v29 -= 8;
                *((void *)v169 - 1) = v170;
                v169 -= 8;
              }
              v27[139] = v169;
              v27[140] = v31;
              v27[141] = &v108[8 * v107];
              if (v103) {
                operator delete(v103);
              }
            }
            else
            {
              *(void *)unint64_t v29 = v28;
              uint64_t v31 = v29 + 8;
            }
            v27[140] = v31;
            break;
          case 0xF:
            uint64_t v32 = a1[2];
            unint64_t v33 = *(void **)v32;
            uint64_t v34 = *(unsigned __int16 *)(a1[3] + 38);
            unint64_t v35 = *(char **)(*(void *)v32 + 1144);
            unint64_t v36 = *(void *)(*(void *)v32 + 1152);
            if ((unint64_t)v35 >= v36)
            {
              uint64_t v109 = (char *)v33[142];
              uint64_t v110 = (v35 - v109) >> 3;
              if ((unint64_t)(v110 + 1) >> 61) {
                goto LABEL_252;
              }
              unint64_t v111 = v36 - (void)v109;
              unint64_t v112 = (uint64_t)(v36 - (void)v109) >> 2;
              if (v112 <= v110 + 1) {
                unint64_t v112 = v110 + 1;
              }
              if (v111 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v113 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v113 = v112;
              }
              if (v113)
              {
                unint64_t v114 = (char *)sub_5714((uint64_t)(v33 + 144), v113);
                unint64_t v35 = (char *)v33[143];
                uint64_t v109 = (char *)v33[142];
              }
              else
              {
                unint64_t v114 = 0;
              }
              uint64_t v171 = &v114[8 * v110];
              *(void *)uint64_t v171 = v34;
              unint64_t v37 = v171 + 8;
              while (v35 != v109)
              {
                uint64_t v172 = *((void *)v35 - 1);
                v35 -= 8;
                *((void *)v171 - 1) = v172;
                v171 -= 8;
              }
              v33[142] = v171;
              v33[143] = v37;
              v33[144] = &v114[8 * v113];
              if (v109) {
                operator delete(v109);
              }
            }
            else
            {
              *(void *)unint64_t v35 = v34;
              unint64_t v37 = v35 + 8;
            }
            v33[143] = v37;
            break;
          case 0x10:
            uint64_t v38 = a1[2];
            uint64_t v39 = *(void **)v38;
            uint64_t v40 = *(unsigned __int16 *)(a1[3] + 26);
            uint64_t v41 = *(char **)(*(void *)v38 + 1168);
            unint64_t v42 = *(void *)(*(void *)v38 + 1176);
            if ((unint64_t)v41 >= v42)
            {
              uint64_t v115 = (char *)v39[145];
              uint64_t v116 = (v41 - v115) >> 3;
              if ((unint64_t)(v116 + 1) >> 61) {
                goto LABEL_252;
              }
              unint64_t v117 = v42 - (void)v115;
              unint64_t v118 = (uint64_t)(v42 - (void)v115) >> 2;
              if (v118 <= v116 + 1) {
                unint64_t v118 = v116 + 1;
              }
              if (v117 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v119 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v119 = v118;
              }
              if (v119)
              {
                unint64_t v120 = (char *)sub_5714((uint64_t)(v39 + 147), v119);
                uint64_t v41 = (char *)v39[146];
                uint64_t v115 = (char *)v39[145];
              }
              else
              {
                unint64_t v120 = 0;
              }
              unint64_t v173 = &v120[8 * v116];
              *(void *)unint64_t v173 = v40;
              unint64_t v43 = v173 + 8;
              while (v41 != v115)
              {
                uint64_t v174 = *((void *)v41 - 1);
                v41 -= 8;
                *((void *)v173 - 1) = v174;
                v173 -= 8;
              }
              v39[145] = v173;
              v39[146] = v43;
              v39[147] = &v120[8 * v119];
              if (v115) {
                operator delete(v115);
              }
            }
            else
            {
              *(void *)uint64_t v41 = v40;
              unint64_t v43 = v41 + 8;
            }
            v39[146] = v43;
            break;
          case 0x11:
            uint64_t v44 = a1[2];
            unint64_t v45 = *(void **)v44;
            uint64_t v46 = *(unsigned __int16 *)(a1[3] + 40);
            unint64_t v47 = *(char **)(*(void *)v44 + 1192);
            unint64_t v48 = *(void *)(*(void *)v44 + 1200);
            if ((unint64_t)v47 >= v48)
            {
              uint64_t v121 = (char *)v45[148];
              uint64_t v122 = (v47 - v121) >> 3;
              if ((unint64_t)(v122 + 1) >> 61) {
                goto LABEL_252;
              }
              unint64_t v123 = v48 - (void)v121;
              unint64_t v124 = (uint64_t)(v48 - (void)v121) >> 2;
              if (v124 <= v122 + 1) {
                unint64_t v124 = v122 + 1;
              }
              if (v123 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v125 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v125 = v124;
              }
              if (v125)
              {
                uint64_t v126 = (char *)sub_5714((uint64_t)(v45 + 150), v125);
                unint64_t v47 = (char *)v45[149];
                uint64_t v121 = (char *)v45[148];
              }
              else
              {
                uint64_t v126 = 0;
              }
              uint64_t v175 = &v126[8 * v122];
              *(void *)uint64_t v175 = v46;
              uint64_t v49 = v175 + 8;
              while (v47 != v121)
              {
                uint64_t v176 = *((void *)v47 - 1);
                v47 -= 8;
                *((void *)v175 - 1) = v176;
                v175 -= 8;
              }
              v45[148] = v175;
              v45[149] = v49;
              v45[150] = &v126[8 * v125];
              if (v121) {
                operator delete(v121);
              }
            }
            else
            {
              *(void *)unint64_t v47 = v46;
              uint64_t v49 = v47 + 8;
            }
            v45[149] = v49;
            break;
          case 0x12:
            uint64_t v50 = a1[2];
            uint64_t v51 = *(void **)v50;
            uint64_t v52 = *(unsigned __int16 *)(a1[3] + 28);
            unint64_t v53 = *(char **)(*(void *)v50 + 1216);
            unint64_t v54 = *(void *)(*(void *)v50 + 1224);
            if ((unint64_t)v53 >= v54)
            {
              uint64_t v127 = (char *)v51[151];
              uint64_t v128 = (v53 - v127) >> 3;
              if ((unint64_t)(v128 + 1) >> 61) {
                goto LABEL_252;
              }
              unint64_t v129 = v54 - (void)v127;
              unint64_t v130 = (uint64_t)(v54 - (void)v127) >> 2;
              if (v130 <= v128 + 1) {
                unint64_t v130 = v128 + 1;
              }
              if (v129 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v131 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v131 = v130;
              }
              if (v131)
              {
                uint64_t v132 = (char *)sub_5714((uint64_t)(v51 + 153), v131);
                unint64_t v53 = (char *)v51[152];
                uint64_t v127 = (char *)v51[151];
              }
              else
              {
                uint64_t v132 = 0;
              }
              uint64_t v177 = &v132[8 * v128];
              *(void *)uint64_t v177 = v52;
              unint64_t v55 = v177 + 8;
              while (v53 != v127)
              {
                uint64_t v178 = *((void *)v53 - 1);
                v53 -= 8;
                *((void *)v177 - 1) = v178;
                v177 -= 8;
              }
              v51[151] = v177;
              v51[152] = v55;
              v51[153] = &v132[8 * v131];
              if (v127) {
                operator delete(v127);
              }
            }
            else
            {
              *(void *)unint64_t v53 = v52;
              unint64_t v55 = v53 + 8;
            }
            v51[152] = v55;
            break;
          case 0x13:
            uint64_t v56 = a1[2];
            unint64_t v57 = *(void **)v56;
            uint64_t v58 = *(unsigned __int16 *)(a1[3] + 46);
            unint64_t v59 = *(char **)(*(void *)v56 + 1240);
            unint64_t v60 = *(void *)(*(void *)v56 + 1248);
            if ((unint64_t)v59 >= v60)
            {
              unint64_t v133 = (char *)v57[154];
              uint64_t v134 = (v59 - v133) >> 3;
              if ((unint64_t)(v134 + 1) >> 61) {
                goto LABEL_252;
              }
              unint64_t v135 = v60 - (void)v133;
              unint64_t v136 = (uint64_t)(v60 - (void)v133) >> 2;
              if (v136 <= v134 + 1) {
                unint64_t v136 = v134 + 1;
              }
              if (v135 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v137 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v137 = v136;
              }
              if (v137)
              {
                unint64_t v138 = (char *)sub_5714((uint64_t)(v57 + 156), v137);
                unint64_t v59 = (char *)v57[155];
                unint64_t v133 = (char *)v57[154];
              }
              else
              {
                unint64_t v138 = 0;
              }
              unint64_t v179 = &v138[8 * v134];
              *(void *)unint64_t v179 = v58;
              uint64_t v61 = v179 + 8;
              while (v59 != v133)
              {
                uint64_t v180 = *((void *)v59 - 1);
                v59 -= 8;
                *((void *)v179 - 1) = v180;
                v179 -= 8;
              }
              v57[154] = v179;
              v57[155] = v61;
              v57[156] = &v138[8 * v137];
              if (v133) {
                operator delete(v133);
              }
            }
            else
            {
              *(void *)unint64_t v59 = v58;
              uint64_t v61 = v59 + 8;
            }
            v57[155] = v61;
            break;
          case 0x14:
            uint64_t v62 = a1[2];
            unint64_t v63 = *(void **)v62;
            uint64_t v64 = *(unsigned __int16 *)(a1[3] + 34);
            unint64_t v65 = *(char **)(*(void *)v62 + 1264);
            unint64_t v66 = *(void *)(*(void *)v62 + 1272);
            if ((unint64_t)v65 >= v66)
            {
              uint64_t v139 = (char *)v63[157];
              uint64_t v140 = (v65 - v139) >> 3;
              if ((unint64_t)(v140 + 1) >> 61) {
                goto LABEL_252;
              }
              unint64_t v141 = v66 - (void)v139;
              unint64_t v142 = (uint64_t)(v66 - (void)v139) >> 2;
              if (v142 <= v140 + 1) {
                unint64_t v142 = v140 + 1;
              }
              if (v141 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v143 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v143 = v142;
              }
              if (v143)
              {
                uint64_t v144 = (char *)sub_5714((uint64_t)(v63 + 159), v143);
                unint64_t v65 = (char *)v63[158];
                uint64_t v139 = (char *)v63[157];
              }
              else
              {
                uint64_t v144 = 0;
              }
              uint64_t v181 = &v144[8 * v140];
              *(void *)uint64_t v181 = v64;
              uint64_t v67 = v181 + 8;
              while (v65 != v139)
              {
                uint64_t v182 = *((void *)v65 - 1);
                v65 -= 8;
                *((void *)v181 - 1) = v182;
                v181 -= 8;
              }
              v63[157] = v181;
              v63[158] = v67;
              v63[159] = &v144[8 * v143];
              if (v139) {
                operator delete(v139);
              }
            }
            else
            {
              *(void *)unint64_t v65 = v64;
              uint64_t v67 = v65 + 8;
            }
            v63[158] = v67;
            break;
          case 0x15:
            uint64_t v68 = a1[2];
            uint64_t v69 = *(void **)v68;
            uint64_t v70 = *(unsigned __int16 *)(a1[3] + 42);
            uint64_t v71 = *(char **)(*(void *)v68 + 1288);
            unint64_t v72 = *(void *)(*(void *)v68 + 1296);
            if ((unint64_t)v71 >= v72)
            {
              unint64_t v145 = (char *)v69[160];
              uint64_t v146 = (v71 - v145) >> 3;
              if ((unint64_t)(v146 + 1) >> 61) {
                goto LABEL_252;
              }
              unint64_t v147 = v72 - (void)v145;
              unint64_t v148 = (uint64_t)(v72 - (void)v145) >> 2;
              if (v148 <= v146 + 1) {
                unint64_t v148 = v146 + 1;
              }
              if (v147 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v149 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v149 = v148;
              }
              if (v149)
              {
                uint64_t v150 = (char *)sub_5714((uint64_t)(v69 + 162), v149);
                uint64_t v71 = (char *)v69[161];
                unint64_t v145 = (char *)v69[160];
              }
              else
              {
                uint64_t v150 = 0;
              }
              uint64_t v183 = &v150[8 * v146];
              *(void *)uint64_t v183 = v70;
              unint64_t v73 = v183 + 8;
              while (v71 != v145)
              {
                uint64_t v184 = *((void *)v71 - 1);
                v71 -= 8;
                *((void *)v183 - 1) = v184;
                v183 -= 8;
              }
              v69[160] = v183;
              v69[161] = v73;
              v69[162] = &v150[8 * v149];
              if (v145) {
                operator delete(v145);
              }
            }
            else
            {
              *(void *)uint64_t v71 = v70;
              unint64_t v73 = v71 + 8;
            }
            v69[161] = v73;
            break;
          case 0x16:
            uint64_t v74 = a1[2];
            uint64_t v75 = *(void **)v74;
            uint64_t v76 = *(unsigned __int16 *)(a1[3] + 30);
            unint64_t v77 = *(char **)(*(void *)v74 + 1312);
            unint64_t v78 = *(void *)(*(void *)v74 + 1320);
            if ((unint64_t)v77 >= v78)
            {
              uint64_t v151 = (char *)v75[163];
              uint64_t v152 = (v77 - v151) >> 3;
              if ((unint64_t)(v152 + 1) >> 61) {
                goto LABEL_252;
              }
              unint64_t v153 = v78 - (void)v151;
              unint64_t v154 = (uint64_t)(v78 - (void)v151) >> 2;
              if (v154 <= v152 + 1) {
                unint64_t v154 = v152 + 1;
              }
              if (v153 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v155 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v155 = v154;
              }
              if (v155)
              {
                uint64_t v156 = (char *)sub_5714((uint64_t)(v75 + 165), v155);
                unint64_t v77 = (char *)v75[164];
                uint64_t v151 = (char *)v75[163];
              }
              else
              {
                uint64_t v156 = 0;
              }
              unint64_t v185 = &v156[8 * v152];
              *(void *)unint64_t v185 = v76;
              uint64_t v79 = v185 + 8;
              while (v77 != v151)
              {
                uint64_t v186 = *((void *)v77 - 1);
                v77 -= 8;
                *((void *)v185 - 1) = v186;
                v185 -= 8;
              }
              v75[163] = v185;
              v75[164] = v79;
              v75[165] = &v156[8 * v155];
              if (v151) {
                operator delete(v151);
              }
            }
            else
            {
              *(void *)unint64_t v77 = v76;
              uint64_t v79 = v77 + 8;
            }
            v75[164] = v79;
            break;
          case 0x17:
            unint64_t v80 = *(void **)a1[2];
            uint64_t v81 = *(_WORD *)(a1[3] + 50) & 0x7FFF;
            unint64_t v82 = (char *)v80[167];
            unint64_t v83 = v80[168];
            if ((unint64_t)v82 >= v83)
            {
              uint64_t v157 = (char *)v80[166];
              uint64_t v158 = (v82 - v157) >> 3;
              if ((unint64_t)(v158 + 1) >> 61) {
LABEL_252:
              }
                sub_566C();
              unint64_t v159 = v83 - (void)v157;
              unint64_t v160 = (uint64_t)(v83 - (void)v157) >> 2;
              if (v160 <= v158 + 1) {
                unint64_t v160 = v158 + 1;
              }
              if (v159 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v161 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v161 = v160;
              }
              if (v161)
              {
                unint64_t v162 = (char *)sub_5714((uint64_t)(v80 + 168), v161);
                unint64_t v82 = (char *)v80[167];
                uint64_t v157 = (char *)v80[166];
              }
              else
              {
                unint64_t v162 = 0;
              }
              uint64_t v187 = &v162[8 * v158];
              *(void *)uint64_t v187 = v81;
              unint64_t v84 = v187 + 8;
              while (v82 != v157)
              {
                uint64_t v188 = *((void *)v82 - 1);
                v82 -= 8;
                *((void *)v187 - 1) = v188;
                v187 -= 8;
              }
              v80[166] = v187;
              v80[167] = v84;
              v80[168] = &v162[8 * v161];
              if (v157) {
                operator delete(v157);
              }
            }
            else
            {
              *(void *)unint64_t v82 = v81;
              unint64_t v84 = v82 + 8;
            }
            v80[167] = v84;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_8B774(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    uint64_t v156 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    unint64_t v155 = *v156;
    uint64_t v157 = (char *)v156[1] - (char *)*v156;
    if (v157)
    {
      unint64_t v158 = v157 >> 2;
      if (v158 <= 1) {
        unint64_t v158 = 1;
      }
      do
      {
        int v159 = *v155++;
        switch(v159)
        {
          case 0:
            unint64_t v160 = *(_DWORD *)(a1[3] + 36) & 0x3FFFF;
            unint64_t v161 = (void *)(*(void *)a1[2] + 784);
            goto LABEL_212;
          case 1:
            unint64_t v160 = *(_DWORD *)(a1[3] + 32) & 0x3FFFF;
            unint64_t v161 = (void *)(*(void *)a1[2] + 808);
            goto LABEL_212;
          case 2:
            unint64_t v160 = *(_DWORD *)(a1[3] + 28) & 0x3FFFF;
            unint64_t v161 = (void *)(*(void *)a1[2] + 832);
            goto LABEL_212;
          case 3:
            unint64_t v160 = ((unint64_t)*(unsigned int *)(a1[3] + 24) >> 1) & 0x3FFFF;
            unint64_t v161 = (void *)(*(void *)a1[2] + 856);
            goto LABEL_212;
          case 4:
            unint64_t v160 = *(_DWORD *)(a1[3] + 44) & 0x3FFFF;
            unint64_t v161 = (void *)(*(void *)a1[2] + 880);
            goto LABEL_212;
          case 5:
            unint64_t v160 = *(_DWORD *)(a1[3] + 40) & 0x3FFFF;
            unint64_t v161 = (void *)(*(void *)a1[2] + 904);
            goto LABEL_212;
          case 6:
            unint64_t v160 = *(unsigned __int16 *)(a1[3] + 62);
            unint64_t v161 = (void *)(*(void *)a1[2] + 928);
            goto LABEL_212;
          case 7:
            unint64_t v160 = *(_DWORD *)(a1[3] + 48) & 0xFFFFF;
            unint64_t v161 = (void *)(*(void *)a1[2] + 952);
            goto LABEL_212;
          case 8:
            unint64_t v160 = *(_DWORD *)(a1[3] + 56) & 0xFFFFF;
            unint64_t v161 = (void *)(*(void *)a1[2] + 976);
            goto LABEL_212;
          case 9:
            unint64_t v160 = *(unsigned __int16 *)(a1[3] + 60);
            unint64_t v161 = (void *)(*(void *)a1[2] + 1000);
            goto LABEL_212;
          case 10:
            unint64_t v160 = *(_DWORD *)(a1[3] + 52) & 0xFFFFF;
            unint64_t v161 = (void *)(*(void *)a1[2] + 1024);
LABEL_212:
            *(void *)(*v161 - 8) += v160;
            break;
          default:
            break;
        }
        --v158;
      }
      while (v158);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    uint64_t v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0:
            uint64_t v10 = *(void **)a1[2];
            uint64_t v11 = *(_DWORD *)(a1[3] + 36) & 0x3FFFFLL;
            unsigned int v12 = (uint64_t *)v10[98];
            unint64_t v13 = v10[99];
            if ((unint64_t)v12 >= v13)
            {
              uint64_t v67 = (uint64_t *)v10[97];
              uint64_t v68 = v12 - v67;
              if ((unint64_t)(v68 + 1) >> 61) {
                goto LABEL_216;
              }
              unint64_t v69 = v13 - (void)v67;
              unint64_t v70 = (uint64_t)(v13 - (void)v67) >> 2;
              if (v70 <= v68 + 1) {
                unint64_t v70 = v68 + 1;
              }
              if (v69 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v71 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v71 = v70;
              }
              if (v71)
              {
                unint64_t v72 = (char *)sub_5714((uint64_t)(v10 + 99), v71);
                unsigned int v12 = (uint64_t *)v10[98];
                uint64_t v67 = (uint64_t *)v10[97];
              }
              else
              {
                unint64_t v72 = 0;
              }
              unint64_t v133 = (uint64_t *)&v72[8 * v68];
              uint64_t *v133 = v11;
              unint64_t v14 = v133 + 1;
              while (v12 != v67)
              {
                uint64_t v134 = *--v12;
                *--unint64_t v133 = v134;
              }
              v10[97] = v133;
              v10[98] = v14;
              v10[99] = &v72[8 * v71];
              if (v67) {
                operator delete(v67);
              }
            }
            else
            {
              uint64_t *v12 = v11;
              unint64_t v14 = v12 + 1;
            }
            v10[98] = v14;
            break;
          case 1:
            unint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_DWORD *)(a1[3] + 32) & 0x3FFFFLL;
            uint64_t v17 = (uint64_t *)v15[101];
            unint64_t v18 = v15[102];
            if ((unint64_t)v17 >= v18)
            {
              unint64_t v73 = (uint64_t *)v15[100];
              uint64_t v74 = v17 - v73;
              if ((unint64_t)(v74 + 1) >> 61) {
                goto LABEL_216;
              }
              unint64_t v75 = v18 - (void)v73;
              unint64_t v76 = (uint64_t)(v18 - (void)v73) >> 2;
              if (v76 <= v74 + 1) {
                unint64_t v76 = v74 + 1;
              }
              if (v75 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v77 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v77 = v76;
              }
              if (v77)
              {
                unint64_t v78 = (char *)sub_5714((uint64_t)(v15 + 102), v77);
                uint64_t v17 = (uint64_t *)v15[101];
                unint64_t v73 = (uint64_t *)v15[100];
              }
              else
              {
                unint64_t v78 = 0;
              }
              unint64_t v135 = (uint64_t *)&v78[8 * v74];
              *unint64_t v135 = v16;
              unint64_t v19 = v135 + 1;
              while (v17 != v73)
              {
                uint64_t v136 = *--v17;
                *--unint64_t v135 = v136;
              }
              v15[100] = v135;
              v15[101] = v19;
              v15[102] = &v78[8 * v77];
              if (v73) {
                operator delete(v73);
              }
            }
            else
            {
              *uint64_t v17 = v16;
              unint64_t v19 = v17 + 1;
            }
            v15[101] = v19;
            break;
          case 2:
            uint64_t v20 = *(void **)a1[2];
            uint64_t v21 = *(_DWORD *)(a1[3] + 28) & 0x3FFFFLL;
            uint64_t v22 = (uint64_t *)v20[104];
            unint64_t v23 = v20[105];
            if ((unint64_t)v22 >= v23)
            {
              uint64_t v79 = (uint64_t *)v20[103];
              uint64_t v80 = v22 - v79;
              if ((unint64_t)(v80 + 1) >> 61) {
                goto LABEL_216;
              }
              unint64_t v81 = v23 - (void)v79;
              unint64_t v82 = (uint64_t)(v23 - (void)v79) >> 2;
              if (v82 <= v80 + 1) {
                unint64_t v82 = v80 + 1;
              }
              if (v81 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v83 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v83 = v82;
              }
              if (v83)
              {
                unint64_t v84 = (char *)sub_5714((uint64_t)(v20 + 105), v83);
                uint64_t v22 = (uint64_t *)v20[104];
                uint64_t v79 = (uint64_t *)v20[103];
              }
              else
              {
                unint64_t v84 = 0;
              }
              unint64_t v137 = (uint64_t *)&v84[8 * v80];
              *unint64_t v137 = v21;
              unint64_t v24 = v137 + 1;
              while (v22 != v79)
              {
                uint64_t v138 = *--v22;
                *--unint64_t v137 = v138;
              }
              v20[103] = v137;
              v20[104] = v24;
              v20[105] = &v84[8 * v83];
              if (v79) {
                operator delete(v79);
              }
            }
            else
            {
              uint64_t *v22 = v21;
              unint64_t v24 = v22 + 1;
            }
            v20[104] = v24;
            break;
          case 3:
            uint64_t v25 = *(void **)a1[2];
            unint64_t v26 = ((unint64_t)*(unsigned int *)(a1[3] + 24) >> 1) & 0x3FFFF;
            uint64_t v27 = (unint64_t *)v25[107];
            unint64_t v28 = v25[108];
            if ((unint64_t)v27 >= v28)
            {
              unint64_t v85 = (unint64_t *)v25[106];
              uint64_t v86 = v27 - v85;
              if ((unint64_t)(v86 + 1) >> 61) {
                goto LABEL_216;
              }
              unint64_t v87 = v28 - (void)v85;
              unint64_t v88 = (uint64_t)(v28 - (void)v85) >> 2;
              if (v88 <= v86 + 1) {
                unint64_t v88 = v86 + 1;
              }
              if (v87 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v89 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v89 = v88;
              }
              if (v89)
              {
                unint64_t v90 = (char *)sub_5714((uint64_t)(v25 + 108), v89);
                uint64_t v27 = (unint64_t *)v25[107];
                unint64_t v85 = (unint64_t *)v25[106];
              }
              else
              {
                unint64_t v90 = 0;
              }
              uint64_t v139 = (unint64_t *)&v90[8 * v86];
              unint64_t *v139 = v26;
              unint64_t v29 = v139 + 1;
              while (v27 != v85)
              {
                unint64_t v140 = *--v27;
                *--uint64_t v139 = v140;
              }
              v25[106] = v139;
              v25[107] = v29;
              v25[108] = &v90[8 * v89];
              if (v85) {
                operator delete(v85);
              }
            }
            else
            {
              *uint64_t v27 = v26;
              unint64_t v29 = v27 + 1;
            }
            v25[107] = v29;
            break;
          case 4:
            unint64_t v30 = *(void **)a1[2];
            uint64_t v31 = *(_DWORD *)(a1[3] + 44) & 0x3FFFFLL;
            uint64_t v32 = (uint64_t *)v30[110];
            unint64_t v33 = v30[111];
            if ((unint64_t)v32 >= v33)
            {
              uint64_t v91 = (uint64_t *)v30[109];
              uint64_t v92 = v32 - v91;
              if ((unint64_t)(v92 + 1) >> 61) {
                goto LABEL_216;
              }
              unint64_t v93 = v33 - (void)v91;
              unint64_t v94 = (uint64_t)(v33 - (void)v91) >> 2;
              if (v94 <= v92 + 1) {
                unint64_t v94 = v92 + 1;
              }
              if (v93 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v95 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v95 = v94;
              }
              if (v95)
              {
                uint64_t v96 = (char *)sub_5714((uint64_t)(v30 + 111), v95);
                uint64_t v32 = (uint64_t *)v30[110];
                uint64_t v91 = (uint64_t *)v30[109];
              }
              else
              {
                uint64_t v96 = 0;
              }
              unint64_t v141 = (uint64_t *)&v96[8 * v92];
              uint64_t *v141 = v31;
              uint64_t v34 = v141 + 1;
              while (v32 != v91)
              {
                uint64_t v142 = *--v32;
                *--unint64_t v141 = v142;
              }
              v30[109] = v141;
              v30[110] = v34;
              v30[111] = &v96[8 * v95];
              if (v91) {
                operator delete(v91);
              }
            }
            else
            {
              *uint64_t v32 = v31;
              uint64_t v34 = v32 + 1;
            }
            v30[110] = v34;
            break;
          case 5:
            unint64_t v35 = *(void **)a1[2];
            uint64_t v36 = *(_DWORD *)(a1[3] + 40) & 0x3FFFFLL;
            unint64_t v37 = (uint64_t *)v35[113];
            unint64_t v38 = v35[114];
            if ((unint64_t)v37 >= v38)
            {
              uint64_t v97 = (uint64_t *)v35[112];
              uint64_t v98 = v37 - v97;
              if ((unint64_t)(v98 + 1) >> 61) {
                goto LABEL_216;
              }
              unint64_t v99 = v38 - (void)v97;
              unint64_t v100 = (uint64_t)(v38 - (void)v97) >> 2;
              if (v100 <= v98 + 1) {
                unint64_t v100 = v98 + 1;
              }
              if (v99 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v101 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v101 = v100;
              }
              if (v101)
              {
                unint64_t v102 = (char *)sub_5714((uint64_t)(v35 + 114), v101);
                unint64_t v37 = (uint64_t *)v35[113];
                uint64_t v97 = (uint64_t *)v35[112];
              }
              else
              {
                unint64_t v102 = 0;
              }
              unint64_t v143 = (uint64_t *)&v102[8 * v98];
              *unint64_t v143 = v36;
              uint64_t v39 = v143 + 1;
              while (v37 != v97)
              {
                uint64_t v144 = *--v37;
                *--unint64_t v143 = v144;
              }
              v35[112] = v143;
              v35[113] = v39;
              v35[114] = &v102[8 * v101];
              if (v97) {
                operator delete(v97);
              }
            }
            else
            {
              *unint64_t v37 = v36;
              uint64_t v39 = v37 + 1;
            }
            v35[113] = v39;
            break;
          case 6:
            uint64_t v40 = a1[2];
            uint64_t v41 = *(void **)v40;
            uint64_t v42 = *(unsigned __int16 *)(a1[3] + 62);
            unint64_t v43 = *(char **)(*(void *)v40 + 928);
            unint64_t v44 = *(void *)(*(void *)v40 + 936);
            if ((unint64_t)v43 >= v44)
            {
              unint64_t v103 = (char *)v41[115];
              uint64_t v104 = (v43 - v103) >> 3;
              if ((unint64_t)(v104 + 1) >> 61) {
                goto LABEL_216;
              }
              unint64_t v105 = v44 - (void)v103;
              unint64_t v106 = (uint64_t)(v44 - (void)v103) >> 2;
              if (v106 <= v104 + 1) {
                unint64_t v106 = v104 + 1;
              }
              if (v105 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v107 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v107 = v106;
              }
              if (v107)
              {
                unint64_t v108 = (char *)sub_5714((uint64_t)(v41 + 117), v107);
                unint64_t v43 = (char *)v41[116];
                unint64_t v103 = (char *)v41[115];
              }
              else
              {
                unint64_t v108 = 0;
              }
              unint64_t v145 = &v108[8 * v104];
              *(void *)unint64_t v145 = v42;
              unint64_t v45 = v145 + 8;
              while (v43 != v103)
              {
                uint64_t v146 = *((void *)v43 - 1);
                v43 -= 8;
                *((void *)v145 - 1) = v146;
                v145 -= 8;
              }
              v41[115] = v145;
              v41[116] = v45;
              v41[117] = &v108[8 * v107];
              if (v103) {
                operator delete(v103);
              }
            }
            else
            {
              *(void *)unint64_t v43 = v42;
              unint64_t v45 = v43 + 8;
            }
            v41[116] = v45;
            break;
          case 7:
            uint64_t v46 = *(void **)a1[2];
            uint64_t v47 = *(_DWORD *)(a1[3] + 48) & 0xFFFFFLL;
            unint64_t v48 = (uint64_t *)v46[119];
            unint64_t v49 = v46[120];
            if ((unint64_t)v48 >= v49)
            {
              uint64_t v109 = (uint64_t *)v46[118];
              uint64_t v110 = v48 - v109;
              if ((unint64_t)(v110 + 1) >> 61) {
                goto LABEL_216;
              }
              unint64_t v111 = v49 - (void)v109;
              unint64_t v112 = (uint64_t)(v49 - (void)v109) >> 2;
              if (v112 <= v110 + 1) {
                unint64_t v112 = v110 + 1;
              }
              if (v111 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v113 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v113 = v112;
              }
              if (v113)
              {
                unint64_t v114 = (char *)sub_5714((uint64_t)(v46 + 120), v113);
                unint64_t v48 = (uint64_t *)v46[119];
                uint64_t v109 = (uint64_t *)v46[118];
              }
              else
              {
                unint64_t v114 = 0;
              }
              unint64_t v147 = (uint64_t *)&v114[8 * v110];
              *unint64_t v147 = v47;
              uint64_t v50 = v147 + 1;
              while (v48 != v109)
              {
                uint64_t v148 = *--v48;
                *--unint64_t v147 = v148;
              }
              v46[118] = v147;
              v46[119] = v50;
              v46[120] = &v114[8 * v113];
              if (v109) {
                operator delete(v109);
              }
            }
            else
            {
              *unint64_t v48 = v47;
              uint64_t v50 = v48 + 1;
            }
            v46[119] = v50;
            break;
          case 8:
            uint64_t v51 = *(void **)a1[2];
            uint64_t v52 = *(_DWORD *)(a1[3] + 56) & 0xFFFFFLL;
            unint64_t v53 = (uint64_t *)v51[122];
            unint64_t v54 = v51[123];
            if ((unint64_t)v53 >= v54)
            {
              uint64_t v115 = (uint64_t *)v51[121];
              uint64_t v116 = v53 - v115;
              if ((unint64_t)(v116 + 1) >> 61) {
                goto LABEL_216;
              }
              unint64_t v117 = v54 - (void)v115;
              unint64_t v118 = (uint64_t)(v54 - (void)v115) >> 2;
              if (v118 <= v116 + 1) {
                unint64_t v118 = v116 + 1;
              }
              if (v117 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v119 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v119 = v118;
              }
              if (v119)
              {
                unint64_t v120 = (char *)sub_5714((uint64_t)(v51 + 123), v119);
                unint64_t v53 = (uint64_t *)v51[122];
                uint64_t v115 = (uint64_t *)v51[121];
              }
              else
              {
                unint64_t v120 = 0;
              }
              unint64_t v149 = (uint64_t *)&v120[8 * v116];
              uint64_t *v149 = v52;
              unint64_t v55 = v149 + 1;
              while (v53 != v115)
              {
                uint64_t v150 = *--v53;
                *--unint64_t v149 = v150;
              }
              v51[121] = v149;
              v51[122] = v55;
              v51[123] = &v120[8 * v119];
              if (v115) {
                operator delete(v115);
              }
            }
            else
            {
              *unint64_t v53 = v52;
              unint64_t v55 = v53 + 1;
            }
            v51[122] = v55;
            break;
          case 9:
            uint64_t v56 = a1[2];
            unint64_t v57 = *(void **)v56;
            uint64_t v58 = *(unsigned __int16 *)(a1[3] + 60);
            unint64_t v59 = *(char **)(*(void *)v56 + 1000);
            unint64_t v60 = *(void *)(*(void *)v56 + 1008);
            if ((unint64_t)v59 >= v60)
            {
              uint64_t v121 = (char *)v57[124];
              uint64_t v122 = (v59 - v121) >> 3;
              if ((unint64_t)(v122 + 1) >> 61) {
                goto LABEL_216;
              }
              unint64_t v123 = v60 - (void)v121;
              unint64_t v124 = (uint64_t)(v60 - (void)v121) >> 2;
              if (v124 <= v122 + 1) {
                unint64_t v124 = v122 + 1;
              }
              if (v123 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v125 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v125 = v124;
              }
              if (v125)
              {
                uint64_t v126 = (char *)sub_5714((uint64_t)(v57 + 126), v125);
                unint64_t v59 = (char *)v57[125];
                uint64_t v121 = (char *)v57[124];
              }
              else
              {
                uint64_t v126 = 0;
              }
              uint64_t v151 = &v126[8 * v122];
              *(void *)uint64_t v151 = v58;
              uint64_t v61 = v151 + 8;
              while (v59 != v121)
              {
                uint64_t v152 = *((void *)v59 - 1);
                v59 -= 8;
                *((void *)v151 - 1) = v152;
                v151 -= 8;
              }
              v57[124] = v151;
              v57[125] = v61;
              v57[126] = &v126[8 * v125];
              if (v121) {
                operator delete(v121);
              }
            }
            else
            {
              *(void *)unint64_t v59 = v58;
              uint64_t v61 = v59 + 8;
            }
            v57[125] = v61;
            break;
          case 0xA:
            uint64_t v62 = *(void **)a1[2];
            uint64_t v63 = *(_DWORD *)(a1[3] + 52) & 0xFFFFFLL;
            uint64_t v64 = (uint64_t *)v62[128];
            unint64_t v65 = v62[129];
            if ((unint64_t)v64 >= v65)
            {
              uint64_t v127 = (uint64_t *)v62[127];
              uint64_t v128 = v64 - v127;
              if ((unint64_t)(v128 + 1) >> 61) {
LABEL_216:
              }
                sub_566C();
              unint64_t v129 = v65 - (void)v127;
              unint64_t v130 = (uint64_t)(v65 - (void)v127) >> 2;
              if (v130 <= v128 + 1) {
                unint64_t v130 = v128 + 1;
              }
              if (v129 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v131 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v131 = v130;
              }
              if (v131)
              {
                uint64_t v132 = (char *)sub_5714((uint64_t)(v62 + 129), v131);
                uint64_t v64 = (uint64_t *)v62[128];
                uint64_t v127 = (uint64_t *)v62[127];
              }
              else
              {
                uint64_t v132 = 0;
              }
              unint64_t v153 = (uint64_t *)&v132[8 * v128];
              *unint64_t v153 = v63;
              unint64_t v66 = v153 + 1;
              while (v64 != v127)
              {
                uint64_t v154 = *--v64;
                *--unint64_t v153 = v154;
              }
              v62[127] = v153;
              v62[128] = v66;
              v62[129] = &v132[8 * v131];
              if (v127) {
                operator delete(v127);
              }
            }
            else
            {
              uint64_t *v64 = v63;
              unint64_t v66 = v64 + 1;
            }
            v62[128] = v66;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_8C24C(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    uint64_t v63 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v62 = *v63;
    uint64_t v64 = (char *)v63[1] - (char *)*v63;
    if (v64)
    {
      unint64_t v65 = v64 >> 2;
      if (v65 <= 1) {
        unint64_t v65 = 1;
      }
      do
      {
        int v66 = *v62++;
        switch(v66)
        {
          case 210:
            unint64_t v67 = *(_DWORD *)(a1[3] + 36) & 0xFFFFF;
            uint64_t v68 = (void *)(*(void *)a1[2] + 5824);
            goto LABEL_86;
          case 211:
            unint64_t v67 = *(_DWORD *)(a1[3] + 28) & 0x1FFFF;
            uint64_t v68 = (void *)(*(void *)a1[2] + 5848);
            goto LABEL_86;
          case 212:
            unint64_t v67 = *(_DWORD *)(a1[3] + 32) & 0xFFFFF;
            uint64_t v68 = (void *)(*(void *)a1[2] + 5872);
            goto LABEL_86;
          case 213:
            unint64_t v67 = ((unint64_t)*(unsigned int *)(a1[3] + 24) >> 1) & 0x7FFFF;
            uint64_t v68 = (void *)(*(void *)a1[2] + 5896);
LABEL_86:
            *(void *)(*v68 - 8) += v67;
            break;
          default:
            break;
        }
        --v65;
      }
      while (v65);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    uint64_t v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0xD2:
            uint64_t v10 = *(void **)a1[2];
            uint64_t v11 = *(_DWORD *)(a1[3] + 36) & 0xFFFFFLL;
            unsigned int v12 = (uint64_t *)v10[728];
            unint64_t v13 = v10[729];
            if ((unint64_t)v12 >= v13)
            {
              unint64_t v30 = (uint64_t *)v10[727];
              uint64_t v31 = v12 - v30;
              if ((unint64_t)(v31 + 1) >> 61) {
                goto LABEL_90;
              }
              unint64_t v32 = v13 - (void)v30;
              unint64_t v33 = (uint64_t)(v13 - (void)v30) >> 2;
              if (v33 <= v31 + 1) {
                unint64_t v33 = v31 + 1;
              }
              if (v32 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v34 = v33;
              }
              if (v34)
              {
                unint64_t v35 = (char *)sub_5714((uint64_t)(v10 + 729), v34);
                unsigned int v12 = (uint64_t *)v10[728];
                unint64_t v30 = (uint64_t *)v10[727];
              }
              else
              {
                unint64_t v35 = 0;
              }
              unint64_t v54 = (uint64_t *)&v35[8 * v31];
              uint64_t *v54 = v11;
              unint64_t v14 = v54 + 1;
              while (v12 != v30)
              {
                uint64_t v55 = *--v12;
                *--unint64_t v54 = v55;
              }
              v10[727] = v54;
              v10[728] = v14;
              v10[729] = &v35[8 * v34];
              if (v30) {
                operator delete(v30);
              }
            }
            else
            {
              uint64_t *v12 = v11;
              unint64_t v14 = v12 + 1;
            }
            v10[728] = v14;
            break;
          case 0xD3:
            unint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_DWORD *)(a1[3] + 28) & 0x1FFFFLL;
            uint64_t v17 = (uint64_t *)v15[731];
            unint64_t v18 = v15[732];
            if ((unint64_t)v17 >= v18)
            {
              uint64_t v36 = (uint64_t *)v15[730];
              uint64_t v37 = v17 - v36;
              if ((unint64_t)(v37 + 1) >> 61) {
                goto LABEL_90;
              }
              unint64_t v38 = v18 - (void)v36;
              unint64_t v39 = (uint64_t)(v18 - (void)v36) >> 2;
              if (v39 <= v37 + 1) {
                unint64_t v39 = v37 + 1;
              }
              if (v38 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v40 = v39;
              }
              if (v40)
              {
                uint64_t v41 = (char *)sub_5714((uint64_t)(v15 + 732), v40);
                uint64_t v17 = (uint64_t *)v15[731];
                uint64_t v36 = (uint64_t *)v15[730];
              }
              else
              {
                uint64_t v41 = 0;
              }
              uint64_t v56 = (uint64_t *)&v41[8 * v37];
              uint64_t *v56 = v16;
              unint64_t v19 = v56 + 1;
              while (v17 != v36)
              {
                uint64_t v57 = *--v17;
                *--uint64_t v56 = v57;
              }
              v15[730] = v56;
              v15[731] = v19;
              v15[732] = &v41[8 * v40];
              if (v36) {
                operator delete(v36);
              }
            }
            else
            {
              *uint64_t v17 = v16;
              unint64_t v19 = v17 + 1;
            }
            v15[731] = v19;
            break;
          case 0xD4:
            uint64_t v20 = *(void **)a1[2];
            uint64_t v21 = *(_DWORD *)(a1[3] + 32) & 0xFFFFFLL;
            uint64_t v22 = (uint64_t *)v20[734];
            unint64_t v23 = v20[735];
            if ((unint64_t)v22 >= v23)
            {
              uint64_t v42 = (uint64_t *)v20[733];
              uint64_t v43 = v22 - v42;
              if ((unint64_t)(v43 + 1) >> 61) {
                goto LABEL_90;
              }
              unint64_t v44 = v23 - (void)v42;
              unint64_t v45 = (uint64_t)(v23 - (void)v42) >> 2;
              if (v45 <= v43 + 1) {
                unint64_t v45 = v43 + 1;
              }
              if (v44 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v46 = v45;
              }
              if (v46)
              {
                uint64_t v47 = (char *)sub_5714((uint64_t)(v20 + 735), v46);
                uint64_t v22 = (uint64_t *)v20[734];
                uint64_t v42 = (uint64_t *)v20[733];
              }
              else
              {
                uint64_t v47 = 0;
              }
              uint64_t v58 = (uint64_t *)&v47[8 * v43];
              uint64_t *v58 = v21;
              unint64_t v24 = v58 + 1;
              while (v22 != v42)
              {
                uint64_t v59 = *--v22;
                *--uint64_t v58 = v59;
              }
              v20[733] = v58;
              v20[734] = v24;
              v20[735] = &v47[8 * v46];
              if (v42) {
                operator delete(v42);
              }
            }
            else
            {
              uint64_t *v22 = v21;
              unint64_t v24 = v22 + 1;
            }
            v20[734] = v24;
            break;
          case 0xD5:
            uint64_t v25 = *(void **)a1[2];
            unint64_t v26 = ((unint64_t)*(unsigned int *)(a1[3] + 24) >> 1) & 0x7FFFF;
            uint64_t v27 = (unint64_t *)v25[737];
            unint64_t v28 = v25[738];
            if ((unint64_t)v27 >= v28)
            {
              unint64_t v48 = (unint64_t *)v25[736];
              uint64_t v49 = v27 - v48;
              if ((unint64_t)(v49 + 1) >> 61) {
LABEL_90:
              }
                sub_566C();
              unint64_t v50 = v28 - (void)v48;
              unint64_t v51 = (uint64_t)(v28 - (void)v48) >> 2;
              if (v51 <= v49 + 1) {
                unint64_t v51 = v49 + 1;
              }
              if (v50 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v52 = v51;
              }
              if (v52)
              {
                unint64_t v53 = (char *)sub_5714((uint64_t)(v25 + 738), v52);
                uint64_t v27 = (unint64_t *)v25[737];
                unint64_t v48 = (unint64_t *)v25[736];
              }
              else
              {
                unint64_t v53 = 0;
              }
              unint64_t v60 = (unint64_t *)&v53[8 * v49];
              *unint64_t v60 = v26;
              unint64_t v29 = v60 + 1;
              while (v27 != v48)
              {
                unint64_t v61 = *--v27;
                *--unint64_t v60 = v61;
              }
              v25[736] = v60;
              v25[737] = v29;
              v25[738] = &v53[8 * v52];
              if (v48) {
                operator delete(v48);
              }
            }
            else
            {
              *uint64_t v27 = v26;
              unint64_t v29 = v27 + 1;
            }
            v25[737] = v29;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_8C74C(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    uint64_t v271 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    unint64_t v270 = *v271;
    uint64_t v272 = (char *)v271[1] - (char *)*v271;
    if (v272)
    {
      unint64_t v273 = v272 >> 2;
      if (v273 <= 1) {
        unint64_t v273 = 1;
      }
      do
      {
        int v274 = *v270++;
        switch(v274)
        {
          case 171:
            int v275 = *(_DWORD *)(a1[3] + 48);
            unint64_t v276 = (void *)(*(void *)a1[2] + 4888);
            goto LABEL_374;
          case 172:
            int v275 = *(_DWORD *)(a1[3] + 88);
            unint64_t v276 = (void *)(*(void *)a1[2] + 4912);
            goto LABEL_374;
          case 173:
            int v275 = *(_DWORD *)(a1[3] + 24) >> 1;
            unint64_t v276 = (void *)(*(void *)a1[2] + 4936);
            goto LABEL_374;
          case 174:
            int v275 = *(_DWORD *)(a1[3] + 64);
            unint64_t v276 = (void *)(*(void *)a1[2] + 4960);
            goto LABEL_374;
          case 175:
            int v275 = *(_DWORD *)(a1[3] + 32);
            unint64_t v276 = (void *)(*(void *)a1[2] + 4984);
            goto LABEL_374;
          case 176:
            int v275 = *(_DWORD *)(a1[3] + 72);
            unint64_t v276 = (void *)(*(void *)a1[2] + 5008);
            goto LABEL_374;
          case 177:
            int v275 = *(_DWORD *)(a1[3] + 44);
            unint64_t v276 = (void *)(*(void *)a1[2] + 5032);
            goto LABEL_374;
          case 178:
            int v275 = *(_DWORD *)(a1[3] + 84);
            unint64_t v276 = (void *)(*(void *)a1[2] + 5056);
            goto LABEL_374;
          case 179:
            int v275 = *(_DWORD *)(a1[3] + 40);
            unint64_t v276 = (void *)(*(void *)a1[2] + 5080);
            goto LABEL_374;
          case 180:
            int v275 = *(_DWORD *)(a1[3] + 80);
            unint64_t v276 = (void *)(*(void *)a1[2] + 5104);
            goto LABEL_374;
          case 181:
            int v275 = *(_DWORD *)(a1[3] + 56);
            unint64_t v276 = (void *)(*(void *)a1[2] + 5128);
            goto LABEL_374;
          case 182:
            int v275 = *(_DWORD *)(a1[3] + 96);
            unint64_t v276 = (void *)(*(void *)a1[2] + 5152);
            goto LABEL_374;
          case 183:
            int v275 = *(_DWORD *)(a1[3] + 60);
            unint64_t v276 = (void *)(*(void *)a1[2] + 5176);
            goto LABEL_374;
          case 184:
            int v275 = *(_DWORD *)(a1[3] + 52);
            unint64_t v276 = (void *)(*(void *)a1[2] + 5200);
            goto LABEL_374;
          case 185:
            int v275 = *(_DWORD *)(a1[3] + 92);
            unint64_t v276 = (void *)(*(void *)a1[2] + 5224);
            goto LABEL_374;
          case 186:
            int v275 = *(_DWORD *)(a1[3] + 28);
            unint64_t v276 = (void *)(*(void *)a1[2] + 5248);
            goto LABEL_374;
          case 187:
            int v275 = *(_DWORD *)(a1[3] + 68);
            unint64_t v276 = (void *)(*(void *)a1[2] + 5272);
            goto LABEL_374;
          case 188:
            int v275 = *(_DWORD *)(a1[3] + 36);
            unint64_t v276 = (void *)(*(void *)a1[2] + 5296);
            goto LABEL_374;
          case 189:
            int v275 = *(_DWORD *)(a1[3] + 76);
            unint64_t v276 = (void *)(*(void *)a1[2] + 5320);
            goto LABEL_374;
          case 190:
            int v275 = *(_DWORD *)(a1[3] + 100);
            unint64_t v276 = (void *)(*(void *)a1[2] + 5344);
LABEL_374:
            *(void *)(*v276 - 8) += v275 & 0x7FFFF;
            break;
          default:
            break;
        }
        --v273;
      }
      while (v273);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    uint64_t v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0xAB:
            uint64_t v10 = *(void **)a1[2];
            uint64_t v11 = *(_DWORD *)(a1[3] + 48) & 0x7FFFFLL;
            unsigned int v12 = (uint64_t *)v10[611];
            unint64_t v13 = v10[612];
            if ((unint64_t)v12 >= v13)
            {
              uint64_t v110 = (uint64_t *)v10[610];
              uint64_t v111 = v12 - v110;
              if ((unint64_t)(v111 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v112 = v13 - (void)v110;
              unint64_t v113 = (uint64_t)(v13 - (void)v110) >> 2;
              if (v113 <= v111 + 1) {
                unint64_t v113 = v111 + 1;
              }
              if (v112 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v114 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v114 = v113;
              }
              if (v114)
              {
                uint64_t v115 = (char *)sub_5714((uint64_t)(v10 + 612), v114);
                unsigned int v12 = (uint64_t *)v10[611];
                uint64_t v110 = (uint64_t *)v10[610];
              }
              else
              {
                uint64_t v115 = 0;
              }
              unint64_t v230 = (uint64_t *)&v115[8 * v111];
              uint64_t *v230 = v11;
              unint64_t v14 = v230 + 1;
              while (v12 != v110)
              {
                uint64_t v231 = *--v12;
                *--unint64_t v230 = v231;
              }
              v10[610] = v230;
              v10[611] = v14;
              v10[612] = &v115[8 * v114];
              if (v110) {
                operator delete(v110);
              }
            }
            else
            {
              uint64_t *v12 = v11;
              unint64_t v14 = v12 + 1;
            }
            v10[611] = v14;
            break;
          case 0xAC:
            unint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_DWORD *)(a1[3] + 88) & 0x7FFFFLL;
            uint64_t v17 = (uint64_t *)v15[614];
            unint64_t v18 = v15[615];
            if ((unint64_t)v17 >= v18)
            {
              uint64_t v116 = (uint64_t *)v15[613];
              uint64_t v117 = v17 - v116;
              if ((unint64_t)(v117 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v118 = v18 - (void)v116;
              unint64_t v119 = (uint64_t)(v18 - (void)v116) >> 2;
              if (v119 <= v117 + 1) {
                unint64_t v119 = v117 + 1;
              }
              if (v118 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v120 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v120 = v119;
              }
              if (v120)
              {
                uint64_t v121 = (char *)sub_5714((uint64_t)(v15 + 615), v120);
                uint64_t v17 = (uint64_t *)v15[614];
                uint64_t v116 = (uint64_t *)v15[613];
              }
              else
              {
                uint64_t v121 = 0;
              }
              unint64_t v232 = (uint64_t *)&v121[8 * v117];
              uint64_t *v232 = v16;
              unint64_t v19 = v232 + 1;
              while (v17 != v116)
              {
                uint64_t v233 = *--v17;
                *--unint64_t v232 = v233;
              }
              v15[613] = v232;
              v15[614] = v19;
              v15[615] = &v121[8 * v120];
              if (v116) {
                operator delete(v116);
              }
            }
            else
            {
              *uint64_t v17 = v16;
              unint64_t v19 = v17 + 1;
            }
            v15[614] = v19;
            break;
          case 0xAD:
            uint64_t v20 = *(void **)a1[2];
            unint64_t v21 = ((unint64_t)*(unsigned int *)(a1[3] + 24) >> 1) & 0x7FFFF;
            uint64_t v22 = (unint64_t *)v20[617];
            unint64_t v23 = v20[618];
            if ((unint64_t)v22 >= v23)
            {
              uint64_t v122 = (unint64_t *)v20[616];
              uint64_t v123 = v22 - v122;
              if ((unint64_t)(v123 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v124 = v23 - (void)v122;
              unint64_t v125 = (uint64_t)(v23 - (void)v122) >> 2;
              if (v125 <= v123 + 1) {
                unint64_t v125 = v123 + 1;
              }
              if (v124 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v126 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v126 = v125;
              }
              if (v126)
              {
                uint64_t v127 = (char *)sub_5714((uint64_t)(v20 + 618), v126);
                uint64_t v22 = (unint64_t *)v20[617];
                uint64_t v122 = (unint64_t *)v20[616];
              }
              else
              {
                uint64_t v127 = 0;
              }
              unint64_t v234 = (unint64_t *)&v127[8 * v123];
              unint64_t *v234 = v21;
              unint64_t v24 = v234 + 1;
              while (v22 != v122)
              {
                unint64_t v235 = *--v22;
                *--unint64_t v234 = v235;
              }
              v20[616] = v234;
              v20[617] = v24;
              v20[618] = &v127[8 * v126];
              if (v122) {
                operator delete(v122);
              }
            }
            else
            {
              unint64_t *v22 = v21;
              unint64_t v24 = v22 + 1;
            }
            v20[617] = v24;
            break;
          case 0xAE:
            uint64_t v25 = *(void **)a1[2];
            uint64_t v26 = *(_DWORD *)(a1[3] + 64) & 0x7FFFFLL;
            uint64_t v27 = (uint64_t *)v25[620];
            unint64_t v28 = v25[621];
            if ((unint64_t)v27 >= v28)
            {
              uint64_t v128 = (uint64_t *)v25[619];
              uint64_t v129 = v27 - v128;
              if ((unint64_t)(v129 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v130 = v28 - (void)v128;
              unint64_t v131 = (uint64_t)(v28 - (void)v128) >> 2;
              if (v131 <= v129 + 1) {
                unint64_t v131 = v129 + 1;
              }
              if (v130 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v132 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v132 = v131;
              }
              if (v132)
              {
                unint64_t v133 = (char *)sub_5714((uint64_t)(v25 + 621), v132);
                uint64_t v27 = (uint64_t *)v25[620];
                uint64_t v128 = (uint64_t *)v25[619];
              }
              else
              {
                unint64_t v133 = 0;
              }
              unint64_t v236 = (uint64_t *)&v133[8 * v129];
              uint64_t *v236 = v26;
              unint64_t v29 = v236 + 1;
              while (v27 != v128)
              {
                uint64_t v237 = *--v27;
                *--unint64_t v236 = v237;
              }
              v25[619] = v236;
              v25[620] = v29;
              v25[621] = &v133[8 * v132];
              if (v128) {
                operator delete(v128);
              }
            }
            else
            {
              *uint64_t v27 = v26;
              unint64_t v29 = v27 + 1;
            }
            v25[620] = v29;
            break;
          case 0xAF:
            unint64_t v30 = *(void **)a1[2];
            uint64_t v31 = *(_DWORD *)(a1[3] + 32) & 0x7FFFFLL;
            unint64_t v32 = (uint64_t *)v30[623];
            unint64_t v33 = v30[624];
            if ((unint64_t)v32 >= v33)
            {
              uint64_t v134 = (uint64_t *)v30[622];
              uint64_t v135 = v32 - v134;
              if ((unint64_t)(v135 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v136 = v33 - (void)v134;
              unint64_t v137 = (uint64_t)(v33 - (void)v134) >> 2;
              if (v137 <= v135 + 1) {
                unint64_t v137 = v135 + 1;
              }
              if (v136 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v138 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v138 = v137;
              }
              if (v138)
              {
                uint64_t v139 = (char *)sub_5714((uint64_t)(v30 + 624), v138);
                unint64_t v32 = (uint64_t *)v30[623];
                uint64_t v134 = (uint64_t *)v30[622];
              }
              else
              {
                uint64_t v139 = 0;
              }
              unint64_t v238 = (uint64_t *)&v139[8 * v135];
              uint64_t *v238 = v31;
              unint64_t v34 = v238 + 1;
              while (v32 != v134)
              {
                uint64_t v239 = *--v32;
                *--unint64_t v238 = v239;
              }
              v30[622] = v238;
              v30[623] = v34;
              v30[624] = &v139[8 * v138];
              if (v134) {
                operator delete(v134);
              }
            }
            else
            {
              *unint64_t v32 = v31;
              unint64_t v34 = v32 + 1;
            }
            v30[623] = v34;
            break;
          case 0xB0:
            unint64_t v35 = *(void **)a1[2];
            uint64_t v36 = *(_DWORD *)(a1[3] + 72) & 0x7FFFFLL;
            uint64_t v37 = (uint64_t *)v35[626];
            unint64_t v38 = v35[627];
            if ((unint64_t)v37 >= v38)
            {
              unint64_t v140 = (uint64_t *)v35[625];
              uint64_t v141 = v37 - v140;
              if ((unint64_t)(v141 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v142 = v38 - (void)v140;
              unint64_t v143 = (uint64_t)(v38 - (void)v140) >> 2;
              if (v143 <= v141 + 1) {
                unint64_t v143 = v141 + 1;
              }
              if (v142 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v144 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v144 = v143;
              }
              if (v144)
              {
                unint64_t v145 = (char *)sub_5714((uint64_t)(v35 + 627), v144);
                uint64_t v37 = (uint64_t *)v35[626];
                unint64_t v140 = (uint64_t *)v35[625];
              }
              else
              {
                unint64_t v145 = 0;
              }
              unint64_t v240 = (uint64_t *)&v145[8 * v141];
              *unint64_t v240 = v36;
              unint64_t v39 = v240 + 1;
              while (v37 != v140)
              {
                uint64_t v241 = *--v37;
                *--unint64_t v240 = v241;
              }
              v35[625] = v240;
              v35[626] = v39;
              v35[627] = &v145[8 * v144];
              if (v140) {
                operator delete(v140);
              }
            }
            else
            {
              *uint64_t v37 = v36;
              unint64_t v39 = v37 + 1;
            }
            v35[626] = v39;
            break;
          case 0xB1:
            unint64_t v40 = *(void **)a1[2];
            uint64_t v41 = *(_DWORD *)(a1[3] + 44) & 0x7FFFFLL;
            uint64_t v42 = (uint64_t *)v40[629];
            unint64_t v43 = v40[630];
            if ((unint64_t)v42 >= v43)
            {
              uint64_t v146 = (uint64_t *)v40[628];
              uint64_t v147 = v42 - v146;
              if ((unint64_t)(v147 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v148 = v43 - (void)v146;
              unint64_t v149 = (uint64_t)(v43 - (void)v146) >> 2;
              if (v149 <= v147 + 1) {
                unint64_t v149 = v147 + 1;
              }
              if (v148 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v150 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v150 = v149;
              }
              if (v150)
              {
                uint64_t v151 = (char *)sub_5714((uint64_t)(v40 + 630), v150);
                uint64_t v42 = (uint64_t *)v40[629];
                uint64_t v146 = (uint64_t *)v40[628];
              }
              else
              {
                uint64_t v151 = 0;
              }
              unint64_t v242 = (uint64_t *)&v151[8 * v147];
              *unint64_t v242 = v41;
              unint64_t v44 = v242 + 1;
              while (v42 != v146)
              {
                uint64_t v243 = *--v42;
                *--unint64_t v242 = v243;
              }
              v40[628] = v242;
              v40[629] = v44;
              v40[630] = &v151[8 * v150];
              if (v146) {
                operator delete(v146);
              }
            }
            else
            {
              *uint64_t v42 = v41;
              unint64_t v44 = v42 + 1;
            }
            v40[629] = v44;
            break;
          case 0xB2:
            unint64_t v45 = *(void **)a1[2];
            uint64_t v46 = *(_DWORD *)(a1[3] + 84) & 0x7FFFFLL;
            uint64_t v47 = (uint64_t *)v45[632];
            unint64_t v48 = v45[633];
            if ((unint64_t)v47 >= v48)
            {
              uint64_t v152 = (uint64_t *)v45[631];
              uint64_t v153 = v47 - v152;
              if ((unint64_t)(v153 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v154 = v48 - (void)v152;
              unint64_t v155 = (uint64_t)(v48 - (void)v152) >> 2;
              if (v155 <= v153 + 1) {
                unint64_t v155 = v153 + 1;
              }
              if (v154 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v156 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v156 = v155;
              }
              if (v156)
              {
                uint64_t v157 = (char *)sub_5714((uint64_t)(v45 + 633), v156);
                uint64_t v47 = (uint64_t *)v45[632];
                uint64_t v152 = (uint64_t *)v45[631];
              }
              else
              {
                uint64_t v157 = 0;
              }
              unint64_t v244 = (uint64_t *)&v157[8 * v153];
              uint64_t *v244 = v46;
              uint64_t v49 = v244 + 1;
              while (v47 != v152)
              {
                uint64_t v245 = *--v47;
                *--unint64_t v244 = v245;
              }
              v45[631] = v244;
              v45[632] = v49;
              v45[633] = &v157[8 * v156];
              if (v152) {
                operator delete(v152);
              }
            }
            else
            {
              *uint64_t v47 = v46;
              uint64_t v49 = v47 + 1;
            }
            v45[632] = v49;
            break;
          case 0xB3:
            unint64_t v50 = *(void **)a1[2];
            uint64_t v51 = *(_DWORD *)(a1[3] + 40) & 0x7FFFFLL;
            unint64_t v52 = (uint64_t *)v50[635];
            unint64_t v53 = v50[636];
            if ((unint64_t)v52 >= v53)
            {
              unint64_t v158 = (uint64_t *)v50[634];
              uint64_t v159 = v52 - v158;
              if ((unint64_t)(v159 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v160 = v53 - (void)v158;
              unint64_t v161 = (uint64_t)(v53 - (void)v158) >> 2;
              if (v161 <= v159 + 1) {
                unint64_t v161 = v159 + 1;
              }
              if (v160 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v162 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v162 = v161;
              }
              if (v162)
              {
                unint64_t v163 = (char *)sub_5714((uint64_t)(v50 + 636), v162);
                unint64_t v52 = (uint64_t *)v50[635];
                unint64_t v158 = (uint64_t *)v50[634];
              }
              else
              {
                unint64_t v163 = 0;
              }
              unint64_t v246 = (uint64_t *)&v163[8 * v159];
              uint64_t *v246 = v51;
              unint64_t v54 = v246 + 1;
              while (v52 != v158)
              {
                uint64_t v247 = *--v52;
                *--unint64_t v246 = v247;
              }
              v50[634] = v246;
              v50[635] = v54;
              v50[636] = &v163[8 * v162];
              if (v158) {
                operator delete(v158);
              }
            }
            else
            {
              *unint64_t v52 = v51;
              unint64_t v54 = v52 + 1;
            }
            v50[635] = v54;
            break;
          case 0xB4:
            uint64_t v55 = *(void **)a1[2];
            uint64_t v56 = *(_DWORD *)(a1[3] + 80) & 0x7FFFFLL;
            uint64_t v57 = (uint64_t *)v55[638];
            unint64_t v58 = v55[639];
            if ((unint64_t)v57 >= v58)
            {
              uint64_t v164 = (uint64_t *)v55[637];
              uint64_t v165 = v57 - v164;
              if ((unint64_t)(v165 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v166 = v58 - (void)v164;
              unint64_t v167 = (uint64_t)(v58 - (void)v164) >> 2;
              if (v167 <= v165 + 1) {
                unint64_t v167 = v165 + 1;
              }
              if (v166 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v168 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v168 = v167;
              }
              if (v168)
              {
                uint64_t v169 = (char *)sub_5714((uint64_t)(v55 + 639), v168);
                uint64_t v57 = (uint64_t *)v55[638];
                uint64_t v164 = (uint64_t *)v55[637];
              }
              else
              {
                uint64_t v169 = 0;
              }
              unint64_t v248 = (uint64_t *)&v169[8 * v165];
              *unint64_t v248 = v56;
              uint64_t v59 = v248 + 1;
              while (v57 != v164)
              {
                uint64_t v249 = *--v57;
                *--unint64_t v248 = v249;
              }
              v55[637] = v248;
              v55[638] = v59;
              v55[639] = &v169[8 * v168];
              if (v164) {
                operator delete(v164);
              }
            }
            else
            {
              *uint64_t v57 = v56;
              uint64_t v59 = v57 + 1;
            }
            v55[638] = v59;
            break;
          case 0xB5:
            unint64_t v60 = *(void **)a1[2];
            uint64_t v61 = *(_DWORD *)(a1[3] + 56) & 0x7FFFFLL;
            uint64_t v62 = (uint64_t *)v60[641];
            unint64_t v63 = v60[642];
            if ((unint64_t)v62 >= v63)
            {
              uint64_t v170 = (uint64_t *)v60[640];
              uint64_t v171 = v62 - v170;
              if ((unint64_t)(v171 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v172 = v63 - (void)v170;
              unint64_t v173 = (uint64_t)(v63 - (void)v170) >> 2;
              if (v173 <= v171 + 1) {
                unint64_t v173 = v171 + 1;
              }
              if (v172 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v174 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v174 = v173;
              }
              if (v174)
              {
                uint64_t v175 = (char *)sub_5714((uint64_t)(v60 + 642), v174);
                uint64_t v62 = (uint64_t *)v60[641];
                uint64_t v170 = (uint64_t *)v60[640];
              }
              else
              {
                uint64_t v175 = 0;
              }
              unint64_t v250 = (uint64_t *)&v175[8 * v171];
              *unint64_t v250 = v61;
              uint64_t v64 = v250 + 1;
              while (v62 != v170)
              {
                uint64_t v251 = *--v62;
                *--unint64_t v250 = v251;
              }
              v60[640] = v250;
              v60[641] = v64;
              v60[642] = &v175[8 * v174];
              if (v170) {
                operator delete(v170);
              }
            }
            else
            {
              *uint64_t v62 = v61;
              uint64_t v64 = v62 + 1;
            }
            v60[641] = v64;
            break;
          case 0xB6:
            unint64_t v65 = *(void **)a1[2];
            uint64_t v66 = *(_DWORD *)(a1[3] + 96) & 0x7FFFFLL;
            unint64_t v67 = (uint64_t *)v65[644];
            unint64_t v68 = v65[645];
            if ((unint64_t)v67 >= v68)
            {
              uint64_t v176 = (uint64_t *)v65[643];
              uint64_t v177 = v67 - v176;
              if ((unint64_t)(v177 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v178 = v68 - (void)v176;
              unint64_t v179 = (uint64_t)(v68 - (void)v176) >> 2;
              if (v179 <= v177 + 1) {
                unint64_t v179 = v177 + 1;
              }
              if (v178 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v180 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v180 = v179;
              }
              if (v180)
              {
                uint64_t v181 = (char *)sub_5714((uint64_t)(v65 + 645), v180);
                unint64_t v67 = (uint64_t *)v65[644];
                uint64_t v176 = (uint64_t *)v65[643];
              }
              else
              {
                uint64_t v181 = 0;
              }
              unint64_t v252 = (uint64_t *)&v181[8 * v177];
              *unint64_t v252 = v66;
              unint64_t v69 = v252 + 1;
              while (v67 != v176)
              {
                uint64_t v253 = *--v67;
                *--unint64_t v252 = v253;
              }
              v65[643] = v252;
              v65[644] = v69;
              v65[645] = &v181[8 * v180];
              if (v176) {
                operator delete(v176);
              }
            }
            else
            {
              *unint64_t v67 = v66;
              unint64_t v69 = v67 + 1;
            }
            v65[644] = v69;
            break;
          case 0xB7:
            unint64_t v70 = *(void **)a1[2];
            uint64_t v71 = *(_DWORD *)(a1[3] + 60) & 0x7FFFFLL;
            unint64_t v72 = (uint64_t *)v70[647];
            unint64_t v73 = v70[648];
            if ((unint64_t)v72 >= v73)
            {
              uint64_t v182 = (uint64_t *)v70[646];
              uint64_t v183 = v72 - v182;
              if ((unint64_t)(v183 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v184 = v73 - (void)v182;
              unint64_t v185 = (uint64_t)(v73 - (void)v182) >> 2;
              if (v185 <= v183 + 1) {
                unint64_t v185 = v183 + 1;
              }
              if (v184 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v186 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v186 = v185;
              }
              if (v186)
              {
                uint64_t v187 = (char *)sub_5714((uint64_t)(v70 + 648), v186);
                unint64_t v72 = (uint64_t *)v70[647];
                uint64_t v182 = (uint64_t *)v70[646];
              }
              else
              {
                uint64_t v187 = 0;
              }
              uint64_t v254 = (uint64_t *)&v187[8 * v183];
              uint64_t *v254 = v71;
              uint64_t v74 = v254 + 1;
              while (v72 != v182)
              {
                uint64_t v255 = *--v72;
                *--uint64_t v254 = v255;
              }
              v70[646] = v254;
              v70[647] = v74;
              v70[648] = &v187[8 * v186];
              if (v182) {
                operator delete(v182);
              }
            }
            else
            {
              *unint64_t v72 = v71;
              uint64_t v74 = v72 + 1;
            }
            v70[647] = v74;
            break;
          case 0xB8:
            unint64_t v75 = *(void **)a1[2];
            uint64_t v76 = *(_DWORD *)(a1[3] + 52) & 0x7FFFFLL;
            unint64_t v77 = (uint64_t *)v75[650];
            unint64_t v78 = v75[651];
            if ((unint64_t)v77 >= v78)
            {
              uint64_t v188 = (uint64_t *)v75[649];
              uint64_t v189 = v77 - v188;
              if ((unint64_t)(v189 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v190 = v78 - (void)v188;
              unint64_t v191 = (uint64_t)(v78 - (void)v188) >> 2;
              if (v191 <= v189 + 1) {
                unint64_t v191 = v189 + 1;
              }
              if (v190 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v192 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v192 = v191;
              }
              if (v192)
              {
                int v193 = (char *)sub_5714((uint64_t)(v75 + 651), v192);
                unint64_t v77 = (uint64_t *)v75[650];
                uint64_t v188 = (uint64_t *)v75[649];
              }
              else
              {
                int v193 = 0;
              }
              unint64_t v256 = (uint64_t *)&v193[8 * v189];
              *unint64_t v256 = v76;
              uint64_t v79 = v256 + 1;
              while (v77 != v188)
              {
                uint64_t v257 = *--v77;
                *--unint64_t v256 = v257;
              }
              v75[649] = v256;
              v75[650] = v79;
              v75[651] = &v193[8 * v192];
              if (v188) {
                operator delete(v188);
              }
            }
            else
            {
              *unint64_t v77 = v76;
              uint64_t v79 = v77 + 1;
            }
            v75[650] = v79;
            break;
          case 0xB9:
            uint64_t v80 = *(void **)a1[2];
            uint64_t v81 = *(_DWORD *)(a1[3] + 92) & 0x7FFFFLL;
            unint64_t v82 = (uint64_t *)v80[653];
            unint64_t v83 = v80[654];
            if ((unint64_t)v82 >= v83)
            {
              uint64_t v194 = (uint64_t *)v80[652];
              uint64_t v195 = v82 - v194;
              if ((unint64_t)(v195 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v196 = v83 - (void)v194;
              unint64_t v197 = (uint64_t)(v83 - (void)v194) >> 2;
              if (v197 <= v195 + 1) {
                unint64_t v197 = v195 + 1;
              }
              if (v196 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v198 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v198 = v197;
              }
              if (v198)
              {
                uint64_t v199 = (char *)sub_5714((uint64_t)(v80 + 654), v198);
                unint64_t v82 = (uint64_t *)v80[653];
                uint64_t v194 = (uint64_t *)v80[652];
              }
              else
              {
                uint64_t v199 = 0;
              }
              unint64_t v258 = (uint64_t *)&v199[8 * v195];
              *unint64_t v258 = v81;
              unint64_t v84 = v258 + 1;
              while (v82 != v194)
              {
                uint64_t v259 = *--v82;
                *--unint64_t v258 = v259;
              }
              v80[652] = v258;
              v80[653] = v84;
              v80[654] = &v199[8 * v198];
              if (v194) {
                operator delete(v194);
              }
            }
            else
            {
              *unint64_t v82 = v81;
              unint64_t v84 = v82 + 1;
            }
            v80[653] = v84;
            break;
          case 0xBA:
            unint64_t v85 = *(void **)a1[2];
            uint64_t v86 = *(_DWORD *)(a1[3] + 28) & 0x7FFFFLL;
            unint64_t v87 = (uint64_t *)v85[656];
            unint64_t v88 = v85[657];
            if ((unint64_t)v87 >= v88)
            {
              unint64_t v200 = (uint64_t *)v85[655];
              uint64_t v201 = v87 - v200;
              if ((unint64_t)(v201 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v202 = v88 - (void)v200;
              unint64_t v203 = (uint64_t)(v88 - (void)v200) >> 2;
              if (v203 <= v201 + 1) {
                unint64_t v203 = v201 + 1;
              }
              if (v202 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v204 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v204 = v203;
              }
              if (v204)
              {
                uint64_t v205 = (char *)sub_5714((uint64_t)(v85 + 657), v204);
                unint64_t v87 = (uint64_t *)v85[656];
                unint64_t v200 = (uint64_t *)v85[655];
              }
              else
              {
                uint64_t v205 = 0;
              }
              unint64_t v260 = (uint64_t *)&v205[8 * v201];
              uint64_t *v260 = v86;
              unint64_t v89 = v260 + 1;
              while (v87 != v200)
              {
                uint64_t v261 = *--v87;
                *--unint64_t v260 = v261;
              }
              v85[655] = v260;
              v85[656] = v89;
              v85[657] = &v205[8 * v204];
              if (v200) {
                operator delete(v200);
              }
            }
            else
            {
              *unint64_t v87 = v86;
              unint64_t v89 = v87 + 1;
            }
            v85[656] = v89;
            break;
          case 0xBB:
            unint64_t v90 = *(void **)a1[2];
            uint64_t v91 = *(_DWORD *)(a1[3] + 68) & 0x7FFFFLL;
            uint64_t v92 = (uint64_t *)v90[659];
            unint64_t v93 = v90[660];
            if ((unint64_t)v92 >= v93)
            {
              unint64_t v206 = (uint64_t *)v90[658];
              uint64_t v207 = v92 - v206;
              if ((unint64_t)(v207 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v208 = v93 - (void)v206;
              unint64_t v209 = (uint64_t)(v93 - (void)v206) >> 2;
              if (v209 <= v207 + 1) {
                unint64_t v209 = v207 + 1;
              }
              if (v208 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v210 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v210 = v209;
              }
              if (v210)
              {
                uint64_t v211 = (char *)sub_5714((uint64_t)(v90 + 660), v210);
                uint64_t v92 = (uint64_t *)v90[659];
                unint64_t v206 = (uint64_t *)v90[658];
              }
              else
              {
                uint64_t v211 = 0;
              }
              unint64_t v262 = (uint64_t *)&v211[8 * v207];
              *unint64_t v262 = v91;
              unint64_t v94 = v262 + 1;
              while (v92 != v206)
              {
                uint64_t v263 = *--v92;
                *--unint64_t v262 = v263;
              }
              v90[658] = v262;
              v90[659] = v94;
              v90[660] = &v211[8 * v210];
              if (v206) {
                operator delete(v206);
              }
            }
            else
            {
              *uint64_t v92 = v91;
              unint64_t v94 = v92 + 1;
            }
            v90[659] = v94;
            break;
          case 0xBC:
            unint64_t v95 = *(void **)a1[2];
            uint64_t v96 = *(_DWORD *)(a1[3] + 36) & 0x7FFFFLL;
            uint64_t v97 = (uint64_t *)v95[662];
            unint64_t v98 = v95[663];
            if ((unint64_t)v97 >= v98)
            {
              unint64_t v212 = (uint64_t *)v95[661];
              uint64_t v213 = v97 - v212;
              if ((unint64_t)(v213 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v214 = v98 - (void)v212;
              unint64_t v215 = (uint64_t)(v98 - (void)v212) >> 2;
              if (v215 <= v213 + 1) {
                unint64_t v215 = v213 + 1;
              }
              if (v214 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v216 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v216 = v215;
              }
              if (v216)
              {
                uint64_t v217 = (char *)sub_5714((uint64_t)(v95 + 663), v216);
                uint64_t v97 = (uint64_t *)v95[662];
                unint64_t v212 = (uint64_t *)v95[661];
              }
              else
              {
                uint64_t v217 = 0;
              }
              unint64_t v264 = (uint64_t *)&v217[8 * v213];
              uint64_t *v264 = v96;
              unint64_t v99 = v264 + 1;
              while (v97 != v212)
              {
                uint64_t v265 = *--v97;
                *--unint64_t v264 = v265;
              }
              v95[661] = v264;
              v95[662] = v99;
              v95[663] = &v217[8 * v216];
              if (v212) {
                operator delete(v212);
              }
            }
            else
            {
              *uint64_t v97 = v96;
              unint64_t v99 = v97 + 1;
            }
            v95[662] = v99;
            break;
          case 0xBD:
            unint64_t v100 = *(void **)a1[2];
            uint64_t v101 = *(_DWORD *)(a1[3] + 76) & 0x7FFFFLL;
            unint64_t v102 = (uint64_t *)v100[665];
            unint64_t v103 = v100[666];
            if ((unint64_t)v102 >= v103)
            {
              unint64_t v218 = (uint64_t *)v100[664];
              uint64_t v219 = v102 - v218;
              if ((unint64_t)(v219 + 1) >> 61) {
                goto LABEL_378;
              }
              unint64_t v220 = v103 - (void)v218;
              unint64_t v221 = (uint64_t)(v103 - (void)v218) >> 2;
              if (v221 <= v219 + 1) {
                unint64_t v221 = v219 + 1;
              }
              if (v220 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v222 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v222 = v221;
              }
              if (v222)
              {
                uint64_t v223 = (char *)sub_5714((uint64_t)(v100 + 666), v222);
                unint64_t v102 = (uint64_t *)v100[665];
                unint64_t v218 = (uint64_t *)v100[664];
              }
              else
              {
                uint64_t v223 = 0;
              }
              unint64_t v266 = (uint64_t *)&v223[8 * v219];
              uint64_t *v266 = v101;
              uint64_t v104 = v266 + 1;
              while (v102 != v218)
              {
                uint64_t v267 = *--v102;
                *--unint64_t v266 = v267;
              }
              v100[664] = v266;
              v100[665] = v104;
              v100[666] = &v223[8 * v222];
              if (v218) {
                operator delete(v218);
              }
            }
            else
            {
              *unint64_t v102 = v101;
              uint64_t v104 = v102 + 1;
            }
            v100[665] = v104;
            break;
          case 0xBE:
            unint64_t v105 = *(void **)a1[2];
            uint64_t v106 = *(_DWORD *)(a1[3] + 100) & 0x7FFFFLL;
            unint64_t v107 = (uint64_t *)v105[668];
            unint64_t v108 = v105[669];
            if ((unint64_t)v107 >= v108)
            {
              unint64_t v224 = (uint64_t *)v105[667];
              uint64_t v225 = v107 - v224;
              if ((unint64_t)(v225 + 1) >> 61) {
LABEL_378:
              }
                sub_566C();
              unint64_t v226 = v108 - (void)v224;
              unint64_t v227 = (uint64_t)(v108 - (void)v224) >> 2;
              if (v227 <= v225 + 1) {
                unint64_t v227 = v225 + 1;
              }
              if (v226 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v228 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v228 = v227;
              }
              if (v228)
              {
                uint64_t v229 = (char *)sub_5714((uint64_t)(v105 + 669), v228);
                unint64_t v107 = (uint64_t *)v105[668];
                unint64_t v224 = (uint64_t *)v105[667];
              }
              else
              {
                uint64_t v229 = 0;
              }
              unint64_t v268 = (uint64_t *)&v229[8 * v225];
              uint64_t *v268 = v106;
              uint64_t v109 = v268 + 1;
              while (v107 != v224)
              {
                uint64_t v269 = *--v107;
                *--unint64_t v268 = v269;
              }
              v105[667] = v268;
              v105[668] = v109;
              v105[669] = &v229[8 * v228];
              if (v224) {
                operator delete(v224);
              }
            }
            else
            {
              *unint64_t v107 = v106;
              uint64_t v109 = v107 + 1;
            }
            v105[668] = v109;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_8DAC4(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    unint64_t v258 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v257 = *v258;
    uint64_t v259 = (char *)v258[1] - (char *)*v258;
    if (v259)
    {
      unint64_t v260 = v259 >> 2;
      if (v260 <= 1) {
        unint64_t v260 = 1;
      }
      do
      {
        int v261 = *v257++;
        switch(v261)
        {
          case 191:
            uint64_t v262 = *(_WORD *)(a1[3] + 36) & 0x7FFF;
            uint64_t v263 = (void *)(*(void *)a1[2] + 5368);
            goto LABEL_356;
          case 192:
            uint64_t v262 = *(_DWORD *)(a1[3] + 68) & 0x7FFFF;
            uint64_t v263 = (void *)(*(void *)a1[2] + 5392);
            goto LABEL_356;
          case 193:
            uint64_t v262 = *(_WORD *)(a1[3] + 42) & 0x7FFF;
            uint64_t v263 = (void *)(*(void *)a1[2] + 5416);
            goto LABEL_356;
          case 194:
            uint64_t v262 = (unsigned __int16)*(_DWORD *)(a1[3] + 24) >> 1;
            uint64_t v263 = (void *)(*(void *)a1[2] + 5440);
            goto LABEL_356;
          case 195:
            uint64_t v262 = *(_DWORD *)(a1[3] + 44) & 0x7FFFF;
            uint64_t v263 = (void *)(*(void *)a1[2] + 5464);
            goto LABEL_356;
          case 196:
            uint64_t v262 = *(_WORD *)(a1[3] + 28) & 0x7FFF;
            uint64_t v263 = (void *)(*(void *)a1[2] + 5488);
            goto LABEL_356;
          case 197:
            uint64_t v262 = *(_DWORD *)(a1[3] + 52) & 0x7FFFF;
            uint64_t v263 = (void *)(*(void *)a1[2] + 5512);
            goto LABEL_356;
          case 198:
            uint64_t v262 = *(_WORD *)(a1[3] + 34) & 0x7FFF;
            uint64_t v263 = (void *)(*(void *)a1[2] + 5536);
            goto LABEL_356;
          case 199:
            uint64_t v262 = *(_DWORD *)(a1[3] + 64) & 0x7FFFF;
            uint64_t v263 = (void *)(*(void *)a1[2] + 5560);
            goto LABEL_356;
          case 200:
            uint64_t v262 = *(_WORD *)(a1[3] + 32) & 0x7FFF;
            uint64_t v263 = (void *)(*(void *)a1[2] + 5584);
            goto LABEL_356;
          case 201:
            uint64_t v262 = *(_DWORD *)(a1[3] + 60) & 0x7FFFF;
            uint64_t v263 = (void *)(*(void *)a1[2] + 5608);
            goto LABEL_356;
          case 202:
            uint64_t v262 = *(_WORD *)(a1[3] + 40) & 0x7FFF;
            uint64_t v263 = (void *)(*(void *)a1[2] + 5632);
            goto LABEL_356;
          case 203:
            uint64_t v262 = *(_DWORD *)(a1[3] + 76) & 0x7FFFF;
            uint64_t v263 = (void *)(*(void *)a1[2] + 5656);
            goto LABEL_356;
          case 204:
            uint64_t v262 = *(_WORD *)(a1[3] + 38) & 0x7FFF;
            uint64_t v263 = (void *)(*(void *)a1[2] + 5680);
            goto LABEL_356;
          case 205:
            uint64_t v262 = *(_DWORD *)(a1[3] + 72) & 0x7FFFF;
            uint64_t v263 = (void *)(*(void *)a1[2] + 5704);
            goto LABEL_356;
          case 206:
            uint64_t v262 = *(_WORD *)(a1[3] + 26) & 0x7FFF;
            uint64_t v263 = (void *)(*(void *)a1[2] + 5728);
            goto LABEL_356;
          case 207:
            uint64_t v262 = *(_DWORD *)(a1[3] + 48) & 0x7FFFF;
            uint64_t v263 = (void *)(*(void *)a1[2] + 5752);
            goto LABEL_356;
          case 208:
            uint64_t v262 = *(_WORD *)(a1[3] + 30) & 0x7FFF;
            uint64_t v263 = (void *)(*(void *)a1[2] + 5776);
            goto LABEL_356;
          case 209:
            uint64_t v262 = *(_DWORD *)(a1[3] + 56) & 0x7FFFF;
            uint64_t v263 = (void *)(*(void *)a1[2] + 5800);
LABEL_356:
            *(void *)(*v263 - 8) += v262;
            break;
          default:
            break;
        }
        --v260;
      }
      while (v260);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    uint64_t v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0xBF:
            uint64_t v10 = *(void **)a1[2];
            uint64_t v11 = *(_WORD *)(a1[3] + 36) & 0x7FFF;
            unsigned int v12 = (char *)v10[671];
            unint64_t v13 = v10[672];
            if ((unint64_t)v12 >= v13)
            {
              unint64_t v105 = (char *)v10[670];
              uint64_t v106 = (v12 - v105) >> 3;
              if ((unint64_t)(v106 + 1) >> 61) {
                goto LABEL_360;
              }
              unint64_t v107 = v13 - (void)v105;
              unint64_t v108 = (uint64_t)(v13 - (void)v105) >> 2;
              if (v108 <= v106 + 1) {
                unint64_t v108 = v106 + 1;
              }
              if (v107 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v109 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v109 = v108;
              }
              if (v109)
              {
                uint64_t v110 = (char *)sub_5714((uint64_t)(v10 + 672), v109);
                unsigned int v12 = (char *)v10[671];
                unint64_t v105 = (char *)v10[670];
              }
              else
              {
                uint64_t v110 = 0;
              }
              uint64_t v219 = &v110[8 * v106];
              *(void *)uint64_t v219 = v11;
              unint64_t v14 = v219 + 8;
              while (v12 != v105)
              {
                uint64_t v220 = *((void *)v12 - 1);
                v12 -= 8;
                *((void *)v219 - 1) = v220;
                v219 -= 8;
              }
              v10[670] = v219;
              v10[671] = v14;
              v10[672] = &v110[8 * v109];
              if (v105) {
                operator delete(v105);
              }
            }
            else
            {
              *(void *)unsigned int v12 = v11;
              unint64_t v14 = v12 + 8;
            }
            v10[671] = v14;
            break;
          case 0xC0:
            unint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_DWORD *)(a1[3] + 68) & 0x7FFFFLL;
            uint64_t v17 = (uint64_t *)v15[674];
            unint64_t v18 = v15[675];
            if ((unint64_t)v17 >= v18)
            {
              uint64_t v111 = (uint64_t *)v15[673];
              uint64_t v112 = v17 - v111;
              if ((unint64_t)(v112 + 1) >> 61) {
                goto LABEL_360;
              }
              unint64_t v113 = v18 - (void)v111;
              unint64_t v114 = (uint64_t)(v18 - (void)v111) >> 2;
              if (v114 <= v112 + 1) {
                unint64_t v114 = v112 + 1;
              }
              if (v113 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v115 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v115 = v114;
              }
              if (v115)
              {
                uint64_t v116 = (char *)sub_5714((uint64_t)(v15 + 675), v115);
                uint64_t v17 = (uint64_t *)v15[674];
                uint64_t v111 = (uint64_t *)v15[673];
              }
              else
              {
                uint64_t v116 = 0;
              }
              unint64_t v221 = (uint64_t *)&v116[8 * v112];
              *unint64_t v221 = v16;
              unint64_t v19 = v221 + 1;
              while (v17 != v111)
              {
                uint64_t v222 = *--v17;
                *--unint64_t v221 = v222;
              }
              v15[673] = v221;
              v15[674] = v19;
              v15[675] = &v116[8 * v115];
              if (v111) {
                operator delete(v111);
              }
            }
            else
            {
              *uint64_t v17 = v16;
              unint64_t v19 = v17 + 1;
            }
            v15[674] = v19;
            break;
          case 0xC1:
            uint64_t v20 = *(void **)a1[2];
            uint64_t v21 = *(_WORD *)(a1[3] + 42) & 0x7FFF;
            uint64_t v22 = (char *)v20[677];
            unint64_t v23 = v20[678];
            if ((unint64_t)v22 >= v23)
            {
              uint64_t v117 = (char *)v20[676];
              uint64_t v118 = (v22 - v117) >> 3;
              if ((unint64_t)(v118 + 1) >> 61) {
                goto LABEL_360;
              }
              unint64_t v119 = v23 - (void)v117;
              unint64_t v120 = (uint64_t)(v23 - (void)v117) >> 2;
              if (v120 <= v118 + 1) {
                unint64_t v120 = v118 + 1;
              }
              if (v119 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v121 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v121 = v120;
              }
              if (v121)
              {
                uint64_t v122 = (char *)sub_5714((uint64_t)(v20 + 678), v121);
                uint64_t v22 = (char *)v20[677];
                uint64_t v117 = (char *)v20[676];
              }
              else
              {
                uint64_t v122 = 0;
              }
              uint64_t v223 = &v122[8 * v118];
              *(void *)uint64_t v223 = v21;
              unint64_t v24 = v223 + 8;
              while (v22 != v117)
              {
                uint64_t v224 = *((void *)v22 - 1);
                v22 -= 8;
                *((void *)v223 - 1) = v224;
                v223 -= 8;
              }
              v20[676] = v223;
              v20[677] = v24;
              v20[678] = &v122[8 * v121];
              if (v117) {
                operator delete(v117);
              }
            }
            else
            {
              *(void *)uint64_t v22 = v21;
              unint64_t v24 = v22 + 8;
            }
            v20[677] = v24;
            break;
          case 0xC2:
            uint64_t v25 = *(void **)a1[2];
            uint64_t v26 = (unsigned __int16)*(_DWORD *)(a1[3] + 24) >> 1;
            uint64_t v27 = (char *)v25[680];
            unint64_t v28 = v25[681];
            if ((unint64_t)v27 >= v28)
            {
              uint64_t v123 = (char *)v25[679];
              uint64_t v124 = (v27 - v123) >> 3;
              if ((unint64_t)(v124 + 1) >> 61) {
                goto LABEL_360;
              }
              unint64_t v125 = v28 - (void)v123;
              unint64_t v126 = (uint64_t)(v28 - (void)v123) >> 2;
              if (v126 <= v124 + 1) {
                unint64_t v126 = v124 + 1;
              }
              if (v125 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v127 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v127 = v126;
              }
              if (v127)
              {
                uint64_t v128 = (char *)sub_5714((uint64_t)(v25 + 681), v127);
                uint64_t v27 = (char *)v25[680];
                uint64_t v123 = (char *)v25[679];
              }
              else
              {
                uint64_t v128 = 0;
              }
              uint64_t v225 = &v128[8 * v124];
              *(void *)uint64_t v225 = v26;
              unint64_t v29 = v225 + 8;
              while (v27 != v123)
              {
                uint64_t v226 = *((void *)v27 - 1);
                v27 -= 8;
                *((void *)v225 - 1) = v226;
                v225 -= 8;
              }
              v25[679] = v225;
              v25[680] = v29;
              v25[681] = &v128[8 * v127];
              if (v123) {
                operator delete(v123);
              }
            }
            else
            {
              *(void *)uint64_t v27 = v26;
              unint64_t v29 = v27 + 8;
            }
            v25[680] = v29;
            break;
          case 0xC3:
            unint64_t v30 = *(void **)a1[2];
            uint64_t v31 = *(_DWORD *)(a1[3] + 44) & 0x7FFFFLL;
            unint64_t v32 = (uint64_t *)v30[683];
            unint64_t v33 = v30[684];
            if ((unint64_t)v32 >= v33)
            {
              uint64_t v129 = (uint64_t *)v30[682];
              uint64_t v130 = v32 - v129;
              if ((unint64_t)(v130 + 1) >> 61) {
                goto LABEL_360;
              }
              unint64_t v131 = v33 - (void)v129;
              unint64_t v132 = (uint64_t)(v33 - (void)v129) >> 2;
              if (v132 <= v130 + 1) {
                unint64_t v132 = v130 + 1;
              }
              if (v131 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v133 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v133 = v132;
              }
              if (v133)
              {
                uint64_t v134 = (char *)sub_5714((uint64_t)(v30 + 684), v133);
                unint64_t v32 = (uint64_t *)v30[683];
                uint64_t v129 = (uint64_t *)v30[682];
              }
              else
              {
                uint64_t v134 = 0;
              }
              unint64_t v227 = (uint64_t *)&v134[8 * v130];
              *unint64_t v227 = v31;
              unint64_t v34 = v227 + 1;
              while (v32 != v129)
              {
                uint64_t v228 = *--v32;
                *--unint64_t v227 = v228;
              }
              v30[682] = v227;
              v30[683] = v34;
              v30[684] = &v134[8 * v133];
              if (v129) {
                operator delete(v129);
              }
            }
            else
            {
              *unint64_t v32 = v31;
              unint64_t v34 = v32 + 1;
            }
            v30[683] = v34;
            break;
          case 0xC4:
            unint64_t v35 = *(void **)a1[2];
            uint64_t v36 = *(_WORD *)(a1[3] + 28) & 0x7FFF;
            uint64_t v37 = (char *)v35[686];
            unint64_t v38 = v35[687];
            if ((unint64_t)v37 >= v38)
            {
              uint64_t v135 = (char *)v35[685];
              uint64_t v136 = (v37 - v135) >> 3;
              if ((unint64_t)(v136 + 1) >> 61) {
                goto LABEL_360;
              }
              unint64_t v137 = v38 - (void)v135;
              unint64_t v138 = (uint64_t)(v38 - (void)v135) >> 2;
              if (v138 <= v136 + 1) {
                unint64_t v138 = v136 + 1;
              }
              if (v137 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v139 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v139 = v138;
              }
              if (v139)
              {
                unint64_t v140 = (char *)sub_5714((uint64_t)(v35 + 687), v139);
                uint64_t v37 = (char *)v35[686];
                uint64_t v135 = (char *)v35[685];
              }
              else
              {
                unint64_t v140 = 0;
              }
              uint64_t v229 = &v140[8 * v136];
              *(void *)uint64_t v229 = v36;
              unint64_t v39 = v229 + 8;
              while (v37 != v135)
              {
                uint64_t v230 = *((void *)v37 - 1);
                v37 -= 8;
                *((void *)v229 - 1) = v230;
                v229 -= 8;
              }
              v35[685] = v229;
              v35[686] = v39;
              v35[687] = &v140[8 * v139];
              if (v135) {
                operator delete(v135);
              }
            }
            else
            {
              *(void *)uint64_t v37 = v36;
              unint64_t v39 = v37 + 8;
            }
            v35[686] = v39;
            break;
          case 0xC5:
            unint64_t v40 = *(void **)a1[2];
            uint64_t v41 = *(_DWORD *)(a1[3] + 52) & 0x7FFFFLL;
            uint64_t v42 = (uint64_t *)v40[689];
            unint64_t v43 = v40[690];
            if ((unint64_t)v42 >= v43)
            {
              uint64_t v141 = (uint64_t *)v40[688];
              uint64_t v142 = v42 - v141;
              if ((unint64_t)(v142 + 1) >> 61) {
                goto LABEL_360;
              }
              unint64_t v143 = v43 - (void)v141;
              unint64_t v144 = (uint64_t)(v43 - (void)v141) >> 2;
              if (v144 <= v142 + 1) {
                unint64_t v144 = v142 + 1;
              }
              if (v143 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v145 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v145 = v144;
              }
              if (v145)
              {
                uint64_t v146 = (char *)sub_5714((uint64_t)(v40 + 690), v145);
                uint64_t v42 = (uint64_t *)v40[689];
                uint64_t v141 = (uint64_t *)v40[688];
              }
              else
              {
                uint64_t v146 = 0;
              }
              uint64_t v231 = (uint64_t *)&v146[8 * v142];
              uint64_t *v231 = v41;
              unint64_t v44 = v231 + 1;
              while (v42 != v141)
              {
                uint64_t v232 = *--v42;
                *--uint64_t v231 = v232;
              }
              v40[688] = v231;
              v40[689] = v44;
              v40[690] = &v146[8 * v145];
              if (v141) {
                operator delete(v141);
              }
            }
            else
            {
              *uint64_t v42 = v41;
              unint64_t v44 = v42 + 1;
            }
            v40[689] = v44;
            break;
          case 0xC6:
            unint64_t v45 = *(void **)a1[2];
            uint64_t v46 = *(_WORD *)(a1[3] + 34) & 0x7FFF;
            uint64_t v47 = (char *)v45[692];
            unint64_t v48 = v45[693];
            if ((unint64_t)v47 >= v48)
            {
              uint64_t v147 = (char *)v45[691];
              uint64_t v148 = (v47 - v147) >> 3;
              if ((unint64_t)(v148 + 1) >> 61) {
                goto LABEL_360;
              }
              unint64_t v149 = v48 - (void)v147;
              unint64_t v150 = (uint64_t)(v48 - (void)v147) >> 2;
              if (v150 <= v148 + 1) {
                unint64_t v150 = v148 + 1;
              }
              if (v149 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v151 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v151 = v150;
              }
              if (v151)
              {
                uint64_t v152 = (char *)sub_5714((uint64_t)(v45 + 693), v151);
                uint64_t v47 = (char *)v45[692];
                uint64_t v147 = (char *)v45[691];
              }
              else
              {
                uint64_t v152 = 0;
              }
              uint64_t v233 = &v152[8 * v148];
              *(void *)uint64_t v233 = v46;
              uint64_t v49 = v233 + 8;
              while (v47 != v147)
              {
                uint64_t v234 = *((void *)v47 - 1);
                v47 -= 8;
                *((void *)v233 - 1) = v234;
                v233 -= 8;
              }
              v45[691] = v233;
              v45[692] = v49;
              v45[693] = &v152[8 * v151];
              if (v147) {
                operator delete(v147);
              }
            }
            else
            {
              *(void *)uint64_t v47 = v46;
              uint64_t v49 = v47 + 8;
            }
            v45[692] = v49;
            break;
          case 0xC7:
            unint64_t v50 = *(void **)a1[2];
            uint64_t v51 = *(_DWORD *)(a1[3] + 64) & 0x7FFFFLL;
            unint64_t v52 = (uint64_t *)v50[695];
            unint64_t v53 = v50[696];
            if ((unint64_t)v52 >= v53)
            {
              uint64_t v153 = (uint64_t *)v50[694];
              uint64_t v154 = v52 - v153;
              if ((unint64_t)(v154 + 1) >> 61) {
                goto LABEL_360;
              }
              unint64_t v155 = v53 - (void)v153;
              unint64_t v156 = (uint64_t)(v53 - (void)v153) >> 2;
              if (v156 <= v154 + 1) {
                unint64_t v156 = v154 + 1;
              }
              if (v155 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v157 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v157 = v156;
              }
              if (v157)
              {
                unint64_t v158 = (char *)sub_5714((uint64_t)(v50 + 696), v157);
                unint64_t v52 = (uint64_t *)v50[695];
                uint64_t v153 = (uint64_t *)v50[694];
              }
              else
              {
                unint64_t v158 = 0;
              }
              unint64_t v235 = (uint64_t *)&v158[8 * v154];
              *unint64_t v235 = v51;
              unint64_t v54 = v235 + 1;
              while (v52 != v153)
              {
                uint64_t v236 = *--v52;
                *--unint64_t v235 = v236;
              }
              v50[694] = v235;
              v50[695] = v54;
              v50[696] = &v158[8 * v157];
              if (v153) {
                operator delete(v153);
              }
            }
            else
            {
              *unint64_t v52 = v51;
              unint64_t v54 = v52 + 1;
            }
            v50[695] = v54;
            break;
          case 0xC8:
            uint64_t v55 = *(void **)a1[2];
            uint64_t v56 = *(_WORD *)(a1[3] + 32) & 0x7FFF;
            uint64_t v57 = (char *)v55[698];
            unint64_t v58 = v55[699];
            if ((unint64_t)v57 >= v58)
            {
              uint64_t v159 = (char *)v55[697];
              uint64_t v160 = (v57 - v159) >> 3;
              if ((unint64_t)(v160 + 1) >> 61) {
                goto LABEL_360;
              }
              unint64_t v161 = v58 - (void)v159;
              unint64_t v162 = (uint64_t)(v58 - (void)v159) >> 2;
              if (v162 <= v160 + 1) {
                unint64_t v162 = v160 + 1;
              }
              if (v161 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v163 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v163 = v162;
              }
              if (v163)
              {
                uint64_t v164 = (char *)sub_5714((uint64_t)(v55 + 699), v163);
                uint64_t v57 = (char *)v55[698];
                uint64_t v159 = (char *)v55[697];
              }
              else
              {
                uint64_t v164 = 0;
              }
              uint64_t v237 = &v164[8 * v160];
              *(void *)uint64_t v237 = v56;
              uint64_t v59 = v237 + 8;
              while (v57 != v159)
              {
                uint64_t v238 = *((void *)v57 - 1);
                v57 -= 8;
                *((void *)v237 - 1) = v238;
                v237 -= 8;
              }
              v55[697] = v237;
              v55[698] = v59;
              v55[699] = &v164[8 * v163];
              if (v159) {
                operator delete(v159);
              }
            }
            else
            {
              *(void *)uint64_t v57 = v56;
              uint64_t v59 = v57 + 8;
            }
            v55[698] = v59;
            break;
          case 0xC9:
            unint64_t v60 = *(void **)a1[2];
            uint64_t v61 = *(_DWORD *)(a1[3] + 60) & 0x7FFFFLL;
            uint64_t v62 = (uint64_t *)v60[701];
            unint64_t v63 = v60[702];
            if ((unint64_t)v62 >= v63)
            {
              uint64_t v165 = (uint64_t *)v60[700];
              uint64_t v166 = v62 - v165;
              if ((unint64_t)(v166 + 1) >> 61) {
                goto LABEL_360;
              }
              unint64_t v167 = v63 - (void)v165;
              unint64_t v168 = (uint64_t)(v63 - (void)v165) >> 2;
              if (v168 <= v166 + 1) {
                unint64_t v168 = v166 + 1;
              }
              if (v167 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v169 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v169 = v168;
              }
              if (v169)
              {
                uint64_t v170 = (char *)sub_5714((uint64_t)(v60 + 702), v169);
                uint64_t v62 = (uint64_t *)v60[701];
                uint64_t v165 = (uint64_t *)v60[700];
              }
              else
              {
                uint64_t v170 = 0;
              }
              uint64_t v239 = (uint64_t *)&v170[8 * v166];
              uint64_t *v239 = v61;
              uint64_t v64 = v239 + 1;
              while (v62 != v165)
              {
                uint64_t v240 = *--v62;
                *--uint64_t v239 = v240;
              }
              v60[700] = v239;
              v60[701] = v64;
              v60[702] = &v170[8 * v169];
              if (v165) {
                operator delete(v165);
              }
            }
            else
            {
              *uint64_t v62 = v61;
              uint64_t v64 = v62 + 1;
            }
            v60[701] = v64;
            break;
          case 0xCA:
            unint64_t v65 = *(void **)a1[2];
            uint64_t v66 = *(_WORD *)(a1[3] + 40) & 0x7FFF;
            unint64_t v67 = (char *)v65[704];
            unint64_t v68 = v65[705];
            if ((unint64_t)v67 >= v68)
            {
              uint64_t v171 = (char *)v65[703];
              uint64_t v172 = (v67 - v171) >> 3;
              if ((unint64_t)(v172 + 1) >> 61) {
                goto LABEL_360;
              }
              unint64_t v173 = v68 - (void)v171;
              unint64_t v174 = (uint64_t)(v68 - (void)v171) >> 2;
              if (v174 <= v172 + 1) {
                unint64_t v174 = v172 + 1;
              }
              if (v173 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v175 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v175 = v174;
              }
              if (v175)
              {
                uint64_t v176 = (char *)sub_5714((uint64_t)(v65 + 705), v175);
                unint64_t v67 = (char *)v65[704];
                uint64_t v171 = (char *)v65[703];
              }
              else
              {
                uint64_t v176 = 0;
              }
              uint64_t v241 = &v176[8 * v172];
              *(void *)uint64_t v241 = v66;
              unint64_t v69 = v241 + 8;
              while (v67 != v171)
              {
                uint64_t v242 = *((void *)v67 - 1);
                v67 -= 8;
                *((void *)v241 - 1) = v242;
                v241 -= 8;
              }
              v65[703] = v241;
              v65[704] = v69;
              v65[705] = &v176[8 * v175];
              if (v171) {
                operator delete(v171);
              }
            }
            else
            {
              *(void *)unint64_t v67 = v66;
              unint64_t v69 = v67 + 8;
            }
            v65[704] = v69;
            break;
          case 0xCB:
            unint64_t v70 = *(void **)a1[2];
            uint64_t v71 = *(_DWORD *)(a1[3] + 76) & 0x7FFFFLL;
            unint64_t v72 = (uint64_t *)v70[707];
            unint64_t v73 = v70[708];
            if ((unint64_t)v72 >= v73)
            {
              uint64_t v177 = (uint64_t *)v70[706];
              uint64_t v178 = v72 - v177;
              if ((unint64_t)(v178 + 1) >> 61) {
                goto LABEL_360;
              }
              unint64_t v179 = v73 - (void)v177;
              unint64_t v180 = (uint64_t)(v73 - (void)v177) >> 2;
              if (v180 <= v178 + 1) {
                unint64_t v180 = v178 + 1;
              }
              if (v179 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v181 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v181 = v180;
              }
              if (v181)
              {
                uint64_t v182 = (char *)sub_5714((uint64_t)(v70 + 708), v181);
                unint64_t v72 = (uint64_t *)v70[707];
                uint64_t v177 = (uint64_t *)v70[706];
              }
              else
              {
                uint64_t v182 = 0;
              }
              uint64_t v243 = (uint64_t *)&v182[8 * v178];
              *uint64_t v243 = v71;
              uint64_t v74 = v243 + 1;
              while (v72 != v177)
              {
                uint64_t v244 = *--v72;
                *--uint64_t v243 = v244;
              }
              v70[706] = v243;
              v70[707] = v74;
              v70[708] = &v182[8 * v181];
              if (v177) {
                operator delete(v177);
              }
            }
            else
            {
              *unint64_t v72 = v71;
              uint64_t v74 = v72 + 1;
            }
            v70[707] = v74;
            break;
          case 0xCC:
            unint64_t v75 = *(void **)a1[2];
            uint64_t v76 = *(_WORD *)(a1[3] + 38) & 0x7FFF;
            unint64_t v77 = (char *)v75[710];
            unint64_t v78 = v75[711];
            if ((unint64_t)v77 >= v78)
            {
              uint64_t v183 = (char *)v75[709];
              uint64_t v184 = (v77 - v183) >> 3;
              if ((unint64_t)(v184 + 1) >> 61) {
                goto LABEL_360;
              }
              unint64_t v185 = v78 - (void)v183;
              unint64_t v186 = (uint64_t)(v78 - (void)v183) >> 2;
              if (v186 <= v184 + 1) {
                unint64_t v186 = v184 + 1;
              }
              if (v185 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v187 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v187 = v186;
              }
              if (v187)
              {
                uint64_t v188 = (char *)sub_5714((uint64_t)(v75 + 711), v187);
                unint64_t v77 = (char *)v75[710];
                uint64_t v183 = (char *)v75[709];
              }
              else
              {
                uint64_t v188 = 0;
              }
              uint64_t v245 = &v188[8 * v184];
              *(void *)uint64_t v245 = v76;
              uint64_t v79 = v245 + 8;
              while (v77 != v183)
              {
                uint64_t v246 = *((void *)v77 - 1);
                v77 -= 8;
                *((void *)v245 - 1) = v246;
                v245 -= 8;
              }
              v75[709] = v245;
              v75[710] = v79;
              v75[711] = &v188[8 * v187];
              if (v183) {
                operator delete(v183);
              }
            }
            else
            {
              *(void *)unint64_t v77 = v76;
              uint64_t v79 = v77 + 8;
            }
            v75[710] = v79;
            break;
          case 0xCD:
            uint64_t v80 = *(void **)a1[2];
            uint64_t v81 = *(_DWORD *)(a1[3] + 72) & 0x7FFFFLL;
            unint64_t v82 = (uint64_t *)v80[713];
            unint64_t v83 = v80[714];
            if ((unint64_t)v82 >= v83)
            {
              uint64_t v189 = (uint64_t *)v80[712];
              uint64_t v190 = v82 - v189;
              if ((unint64_t)(v190 + 1) >> 61) {
                goto LABEL_360;
              }
              unint64_t v191 = v83 - (void)v189;
              unint64_t v192 = (uint64_t)(v83 - (void)v189) >> 2;
              if (v192 <= v190 + 1) {
                unint64_t v192 = v190 + 1;
              }
              if (v191 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v193 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v193 = v192;
              }
              if (v193)
              {
                uint64_t v194 = (char *)sub_5714((uint64_t)(v80 + 714), v193);
                unint64_t v82 = (uint64_t *)v80[713];
                uint64_t v189 = (uint64_t *)v80[712];
              }
              else
              {
                uint64_t v194 = 0;
              }
              uint64_t v247 = (uint64_t *)&v194[8 * v190];
              *uint64_t v247 = v81;
              unint64_t v84 = v247 + 1;
              while (v82 != v189)
              {
                uint64_t v248 = *--v82;
                *--uint64_t v247 = v248;
              }
              v80[712] = v247;
              v80[713] = v84;
              v80[714] = &v194[8 * v193];
              if (v189) {
                operator delete(v189);
              }
            }
            else
            {
              *unint64_t v82 = v81;
              unint64_t v84 = v82 + 1;
            }
            v80[713] = v84;
            break;
          case 0xCE:
            unint64_t v85 = *(void **)a1[2];
            uint64_t v86 = *(_WORD *)(a1[3] + 26) & 0x7FFF;
            unint64_t v87 = (char *)v85[716];
            unint64_t v88 = v85[717];
            if ((unint64_t)v87 >= v88)
            {
              uint64_t v195 = (char *)v85[715];
              uint64_t v196 = (v87 - v195) >> 3;
              if ((unint64_t)(v196 + 1) >> 61) {
                goto LABEL_360;
              }
              unint64_t v197 = v88 - (void)v195;
              unint64_t v198 = (uint64_t)(v88 - (void)v195) >> 2;
              if (v198 <= v196 + 1) {
                unint64_t v198 = v196 + 1;
              }
              if (v197 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v199 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v199 = v198;
              }
              if (v199)
              {
                unint64_t v200 = (char *)sub_5714((uint64_t)(v85 + 717), v199);
                unint64_t v87 = (char *)v85[716];
                uint64_t v195 = (char *)v85[715];
              }
              else
              {
                unint64_t v200 = 0;
              }
              uint64_t v249 = &v200[8 * v196];
              *(void *)uint64_t v249 = v86;
              unint64_t v89 = v249 + 8;
              while (v87 != v195)
              {
                uint64_t v250 = *((void *)v87 - 1);
                v87 -= 8;
                *((void *)v249 - 1) = v250;
                v249 -= 8;
              }
              v85[715] = v249;
              v85[716] = v89;
              v85[717] = &v200[8 * v199];
              if (v195) {
                operator delete(v195);
              }
            }
            else
            {
              *(void *)unint64_t v87 = v86;
              unint64_t v89 = v87 + 8;
            }
            v85[716] = v89;
            break;
          case 0xCF:
            unint64_t v90 = *(void **)a1[2];
            uint64_t v91 = *(_DWORD *)(a1[3] + 48) & 0x7FFFFLL;
            uint64_t v92 = (uint64_t *)v90[719];
            unint64_t v93 = v90[720];
            if ((unint64_t)v92 >= v93)
            {
              uint64_t v201 = (uint64_t *)v90[718];
              uint64_t v202 = v92 - v201;
              if ((unint64_t)(v202 + 1) >> 61) {
                goto LABEL_360;
              }
              unint64_t v203 = v93 - (void)v201;
              unint64_t v204 = (uint64_t)(v93 - (void)v201) >> 2;
              if (v204 <= v202 + 1) {
                unint64_t v204 = v202 + 1;
              }
              if (v203 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v205 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v205 = v204;
              }
              if (v205)
              {
                unint64_t v206 = (char *)sub_5714((uint64_t)(v90 + 720), v205);
                uint64_t v92 = (uint64_t *)v90[719];
                uint64_t v201 = (uint64_t *)v90[718];
              }
              else
              {
                unint64_t v206 = 0;
              }
              uint64_t v251 = (uint64_t *)&v206[8 * v202];
              uint64_t *v251 = v91;
              unint64_t v94 = v251 + 1;
              while (v92 != v201)
              {
                uint64_t v252 = *--v92;
                *--uint64_t v251 = v252;
              }
              v90[718] = v251;
              v90[719] = v94;
              v90[720] = &v206[8 * v205];
              if (v201) {
                operator delete(v201);
              }
            }
            else
            {
              *uint64_t v92 = v91;
              unint64_t v94 = v92 + 1;
            }
            v90[719] = v94;
            break;
          case 0xD0:
            unint64_t v95 = *(void **)a1[2];
            uint64_t v96 = *(_WORD *)(a1[3] + 30) & 0x7FFF;
            uint64_t v97 = (char *)v95[722];
            unint64_t v98 = v95[723];
            if ((unint64_t)v97 >= v98)
            {
              uint64_t v207 = (char *)v95[721];
              uint64_t v208 = (v97 - v207) >> 3;
              if ((unint64_t)(v208 + 1) >> 61) {
                goto LABEL_360;
              }
              unint64_t v209 = v98 - (void)v207;
              unint64_t v210 = (uint64_t)(v98 - (void)v207) >> 2;
              if (v210 <= v208 + 1) {
                unint64_t v210 = v208 + 1;
              }
              if (v209 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v211 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v211 = v210;
              }
              if (v211)
              {
                unint64_t v212 = (char *)sub_5714((uint64_t)(v95 + 723), v211);
                uint64_t v97 = (char *)v95[722];
                uint64_t v207 = (char *)v95[721];
              }
              else
              {
                unint64_t v212 = 0;
              }
              uint64_t v253 = &v212[8 * v208];
              *(void *)uint64_t v253 = v96;
              unint64_t v99 = v253 + 8;
              while (v97 != v207)
              {
                uint64_t v254 = *((void *)v97 - 1);
                v97 -= 8;
                *((void *)v253 - 1) = v254;
                v253 -= 8;
              }
              v95[721] = v253;
              v95[722] = v99;
              v95[723] = &v212[8 * v211];
              if (v207) {
                operator delete(v207);
              }
            }
            else
            {
              *(void *)uint64_t v97 = v96;
              unint64_t v99 = v97 + 8;
            }
            v95[722] = v99;
            break;
          case 0xD1:
            unint64_t v100 = *(void **)a1[2];
            uint64_t v101 = *(_DWORD *)(a1[3] + 56) & 0x7FFFFLL;
            unint64_t v102 = (uint64_t *)v100[725];
            unint64_t v103 = v100[726];
            if ((unint64_t)v102 >= v103)
            {
              uint64_t v213 = (uint64_t *)v100[724];
              uint64_t v214 = v102 - v213;
              if ((unint64_t)(v214 + 1) >> 61) {
LABEL_360:
              }
                sub_566C();
              unint64_t v215 = v103 - (void)v213;
              unint64_t v216 = (uint64_t)(v103 - (void)v213) >> 2;
              if (v216 <= v214 + 1) {
                unint64_t v216 = v214 + 1;
              }
              if (v215 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v217 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v217 = v216;
              }
              if (v217)
              {
                unint64_t v218 = (char *)sub_5714((uint64_t)(v100 + 726), v217);
                unint64_t v102 = (uint64_t *)v100[725];
                uint64_t v213 = (uint64_t *)v100[724];
              }
              else
              {
                unint64_t v218 = 0;
              }
              uint64_t v255 = (uint64_t *)&v218[8 * v214];
              *uint64_t v255 = v101;
              uint64_t v104 = v255 + 1;
              while (v102 != v213)
              {
                uint64_t v256 = *--v102;
                *--uint64_t v255 = v256;
              }
              v100[724] = v255;
              v100[725] = v104;
              v100[726] = &v218[8 * v217];
              if (v213) {
                operator delete(v213);
              }
            }
            else
            {
              *unint64_t v102 = v101;
              uint64_t v104 = v102 + 1;
            }
            v100[725] = v104;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_8ED98(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    unint64_t v78 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    unint64_t v77 = *v78;
    uint64_t v79 = (char *)v78[1] - (char *)*v78;
    if (v79)
    {
      unint64_t v80 = v79 >> 2;
      if (v80 <= 1) {
        unint64_t v80 = 1;
      }
      do
      {
        int v81 = *v77++;
        switch(v81)
        {
          case 24:
            unint64_t v82 = (unint64_t)*(unsigned int *)(a1[3] + 32) >> 17;
            unint64_t v83 = (void *)(*(void *)a1[2] + 1360);
            goto LABEL_104;
          case 25:
            unint64_t v82 = *(_DWORD *)(a1[3] + 32) & 0x1FFFF;
            unint64_t v83 = (void *)(*(void *)a1[2] + 1384);
            goto LABEL_104;
          case 26:
            unint64_t v82 = *(_DWORD *)(a1[3] + 28) & 0x1FFFF;
            unint64_t v83 = (void *)(*(void *)a1[2] + 1408);
            goto LABEL_104;
          case 27:
            unint64_t v82 = *(unsigned __int16 *)(a1[3] + 26);
            unint64_t v83 = (void *)(*(void *)a1[2] + 1432);
            goto LABEL_104;
          case 28:
            unint64_t v82 = *(unsigned __int16 *)(a1[3] + 24);
            unint64_t v83 = (void *)(*(void *)a1[2] + 1456);
LABEL_104:
            *(void *)(*v83 - 8) += v82;
            break;
          default:
            break;
        }
        --v80;
      }
      while (v80);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    uint64_t v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0x18:
            uint64_t v10 = *(void **)a1[2];
            unint64_t v11 = (unint64_t)*(unsigned int *)(a1[3] + 32) >> 17;
            unsigned int v12 = (unint64_t *)v10[170];
            unint64_t v13 = v10[171];
            if ((unint64_t)v12 >= v13)
            {
              uint64_t v37 = (unint64_t *)v10[169];
              uint64_t v38 = v12 - v37;
              if ((unint64_t)(v38 + 1) >> 61) {
                goto LABEL_108;
              }
              unint64_t v39 = v13 - (void)v37;
              unint64_t v40 = (uint64_t)(v13 - (void)v37) >> 2;
              if (v40 <= v38 + 1) {
                unint64_t v40 = v38 + 1;
              }
              if (v39 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v41 = v40;
              }
              if (v41)
              {
                uint64_t v42 = (char *)sub_5714((uint64_t)(v10 + 171), v41);
                unsigned int v12 = (unint64_t *)v10[170];
                uint64_t v37 = (unint64_t *)v10[169];
              }
              else
              {
                uint64_t v42 = 0;
              }
              unint64_t v67 = (unint64_t *)&v42[8 * v38];
              *unint64_t v67 = v11;
              unint64_t v14 = v67 + 1;
              while (v12 != v37)
              {
                unint64_t v68 = *--v12;
                *--unint64_t v67 = v68;
              }
              v10[169] = v67;
              v10[170] = v14;
              v10[171] = &v42[8 * v41];
              if (v37) {
                operator delete(v37);
              }
            }
            else
            {
              unint64_t *v12 = v11;
              unint64_t v14 = v12 + 1;
            }
            v10[170] = v14;
            break;
          case 0x19:
            unint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_DWORD *)(a1[3] + 32) & 0x1FFFFLL;
            uint64_t v17 = (uint64_t *)v15[173];
            unint64_t v18 = v15[174];
            if ((unint64_t)v17 >= v18)
            {
              unint64_t v43 = (uint64_t *)v15[172];
              uint64_t v44 = v17 - v43;
              if ((unint64_t)(v44 + 1) >> 61) {
                goto LABEL_108;
              }
              unint64_t v45 = v18 - (void)v43;
              unint64_t v46 = (uint64_t)(v18 - (void)v43) >> 2;
              if (v46 <= v44 + 1) {
                unint64_t v46 = v44 + 1;
              }
              if (v45 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v47 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v47 = v46;
              }
              if (v47)
              {
                unint64_t v48 = (char *)sub_5714((uint64_t)(v15 + 174), v47);
                uint64_t v17 = (uint64_t *)v15[173];
                unint64_t v43 = (uint64_t *)v15[172];
              }
              else
              {
                unint64_t v48 = 0;
              }
              unint64_t v69 = (uint64_t *)&v48[8 * v44];
              uint64_t *v69 = v16;
              unint64_t v19 = v69 + 1;
              while (v17 != v43)
              {
                uint64_t v70 = *--v17;
                *--unint64_t v69 = v70;
              }
              v15[172] = v69;
              v15[173] = v19;
              v15[174] = &v48[8 * v47];
              if (v43) {
                operator delete(v43);
              }
            }
            else
            {
              *uint64_t v17 = v16;
              unint64_t v19 = v17 + 1;
            }
            v15[173] = v19;
            break;
          case 0x1A:
            uint64_t v20 = *(void **)a1[2];
            uint64_t v21 = *(_DWORD *)(a1[3] + 28) & 0x1FFFFLL;
            uint64_t v22 = (uint64_t *)v20[176];
            unint64_t v23 = v20[177];
            if ((unint64_t)v22 >= v23)
            {
              uint64_t v49 = (uint64_t *)v20[175];
              uint64_t v50 = v22 - v49;
              if ((unint64_t)(v50 + 1) >> 61) {
                goto LABEL_108;
              }
              unint64_t v51 = v23 - (void)v49;
              unint64_t v52 = (uint64_t)(v23 - (void)v49) >> 2;
              if (v52 <= v50 + 1) {
                unint64_t v52 = v50 + 1;
              }
              if (v51 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v53 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v53 = v52;
              }
              if (v53)
              {
                unint64_t v54 = (char *)sub_5714((uint64_t)(v20 + 177), v53);
                uint64_t v22 = (uint64_t *)v20[176];
                uint64_t v49 = (uint64_t *)v20[175];
              }
              else
              {
                unint64_t v54 = 0;
              }
              uint64_t v71 = (uint64_t *)&v54[8 * v50];
              uint64_t *v71 = v21;
              unint64_t v24 = v71 + 1;
              while (v22 != v49)
              {
                uint64_t v72 = *--v22;
                *--uint64_t v71 = v72;
              }
              v20[175] = v71;
              v20[176] = v24;
              v20[177] = &v54[8 * v53];
              if (v49) {
                operator delete(v49);
              }
            }
            else
            {
              uint64_t *v22 = v21;
              unint64_t v24 = v22 + 1;
            }
            v20[176] = v24;
            break;
          case 0x1B:
            uint64_t v25 = a1[2];
            uint64_t v26 = *(void **)v25;
            uint64_t v27 = *(unsigned __int16 *)(a1[3] + 26);
            unint64_t v28 = *(char **)(*(void *)v25 + 1432);
            unint64_t v29 = *(void *)(*(void *)v25 + 1440);
            if ((unint64_t)v28 >= v29)
            {
              uint64_t v55 = (char *)v26[178];
              uint64_t v56 = (v28 - v55) >> 3;
              if ((unint64_t)(v56 + 1) >> 61) {
                goto LABEL_108;
              }
              unint64_t v57 = v29 - (void)v55;
              unint64_t v58 = (uint64_t)(v29 - (void)v55) >> 2;
              if (v58 <= v56 + 1) {
                unint64_t v58 = v56 + 1;
              }
              if (v57 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v59 = v58;
              }
              if (v59)
              {
                unint64_t v60 = (char *)sub_5714((uint64_t)(v26 + 180), v59);
                unint64_t v28 = (char *)v26[179];
                uint64_t v55 = (char *)v26[178];
              }
              else
              {
                unint64_t v60 = 0;
              }
              unint64_t v73 = &v60[8 * v56];
              *(void *)unint64_t v73 = v27;
              unint64_t v30 = v73 + 8;
              while (v28 != v55)
              {
                uint64_t v74 = *((void *)v28 - 1);
                v28 -= 8;
                *((void *)v73 - 1) = v74;
                v73 -= 8;
              }
              v26[178] = v73;
              v26[179] = v30;
              v26[180] = &v60[8 * v59];
              if (v55) {
                operator delete(v55);
              }
            }
            else
            {
              *(void *)unint64_t v28 = v27;
              unint64_t v30 = v28 + 8;
            }
            v26[179] = v30;
            break;
          case 0x1C:
            uint64_t v31 = a1[2];
            unint64_t v32 = *(void **)v31;
            uint64_t v33 = *(unsigned __int16 *)(a1[3] + 24);
            unint64_t v34 = *(char **)(*(void *)v31 + 1456);
            unint64_t v35 = *(void *)(*(void *)v31 + 1464);
            if ((unint64_t)v34 >= v35)
            {
              uint64_t v61 = (char *)v32[181];
              uint64_t v62 = (v34 - v61) >> 3;
              if ((unint64_t)(v62 + 1) >> 61) {
LABEL_108:
              }
                sub_566C();
              unint64_t v63 = v35 - (void)v61;
              unint64_t v64 = (uint64_t)(v35 - (void)v61) >> 2;
              if (v64 <= v62 + 1) {
                unint64_t v64 = v62 + 1;
              }
              if (v63 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v65 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v65 = v64;
              }
              if (v65)
              {
                uint64_t v66 = (char *)sub_5714((uint64_t)(v32 + 183), v65);
                unint64_t v34 = (char *)v32[182];
                uint64_t v61 = (char *)v32[181];
              }
              else
              {
                uint64_t v66 = 0;
              }
              unint64_t v75 = &v66[8 * v62];
              *(void *)unint64_t v75 = v33;
              uint64_t v36 = v75 + 8;
              while (v34 != v61)
              {
                uint64_t v76 = *((void *)v34 - 1);
                v34 -= 8;
                *((void *)v75 - 1) = v76;
                v75 -= 8;
              }
              v32[181] = v75;
              v32[182] = v36;
              v32[183] = &v66[8 * v65];
              if (v61) {
                operator delete(v61);
              }
            }
            else
            {
              *(void *)unint64_t v34 = v33;
              uint64_t v36 = v34 + 8;
            }
            v32[182] = v36;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_8F338(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    unint64_t v427 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v426 = *v427;
    uint64_t v428 = (char *)v427[1] - (char *)*v427;
    if (v428)
    {
      unint64_t v429 = v428 >> 2;
      if (v429 <= 1) {
        unint64_t v429 = 1;
      }
      do
      {
        int v430 = *v426++;
        switch(v430)
        {
          case 'F':
            LOWORD(v431) = *(_WORD *)(a1[3] + 82);
            unint64_t v432 = (void *)(*(void *)a1[2] + 2464);
            goto LABEL_590;
          case 'G':
            LOWORD(v431) = *(_WORD *)(a1[3] + 66);
            unint64_t v432 = (void *)(*(void *)a1[2] + 2488);
            goto LABEL_590;
          case 'H':
            LOWORD(v431) = *(_WORD *)(a1[3] + 50);
            unint64_t v432 = (void *)(*(void *)a1[2] + 2512);
            goto LABEL_590;
          case 'I':
            LOWORD(v431) = *(_WORD *)(a1[3] + 34);
            unint64_t v432 = (void *)(*(void *)a1[2] + 2536);
            goto LABEL_590;
          case 'J':
            LOWORD(v431) = *(_WORD *)(a1[3] + 84);
            unint64_t v432 = (void *)(*(void *)a1[2] + 2560);
            goto LABEL_590;
          case 'K':
            LOWORD(v431) = *(_WORD *)(a1[3] + 68);
            unint64_t v432 = (void *)(*(void *)a1[2] + 2584);
            goto LABEL_590;
          case 'L':
            LOWORD(v431) = *(_WORD *)(a1[3] + 52);
            unint64_t v432 = (void *)(*(void *)a1[2] + 2608);
            goto LABEL_590;
          case 'M':
            LOWORD(v431) = *(_WORD *)(a1[3] + 36);
            unint64_t v432 = (void *)(*(void *)a1[2] + 2632);
            goto LABEL_590;
          case 'N':
            LOWORD(v431) = *(_WORD *)(a1[3] + 86);
            unint64_t v432 = (void *)(*(void *)a1[2] + 2656);
            goto LABEL_590;
          case 'O':
            LOWORD(v431) = *(_WORD *)(a1[3] + 70);
            unint64_t v432 = (void *)(*(void *)a1[2] + 2680);
            goto LABEL_590;
          case 'P':
            LOWORD(v431) = *(_WORD *)(a1[3] + 54);
            unint64_t v432 = (void *)(*(void *)a1[2] + 2704);
            goto LABEL_590;
          case 'Q':
            LOWORD(v431) = *(_WORD *)(a1[3] + 38);
            unint64_t v432 = (void *)(*(void *)a1[2] + 2728);
            goto LABEL_590;
          case 'R':
            LOWORD(v431) = *(_WORD *)(a1[3] + 76);
            unint64_t v432 = (void *)(*(void *)a1[2] + 2752);
            goto LABEL_590;
          case 'S':
            LOWORD(v431) = *(_WORD *)(a1[3] + 60);
            unint64_t v432 = (void *)(*(void *)a1[2] + 2776);
            goto LABEL_590;
          case 'T':
            LOWORD(v431) = *(_WORD *)(a1[3] + 44);
            unint64_t v432 = (void *)(*(void *)a1[2] + 2800);
            goto LABEL_590;
          case 'U':
            LOWORD(v431) = *(_WORD *)(a1[3] + 28);
            unint64_t v432 = (void *)(*(void *)a1[2] + 2824);
            goto LABEL_590;
          case 'V':
            LOWORD(v431) = *(_WORD *)(a1[3] + 78);
            unint64_t v432 = (void *)(*(void *)a1[2] + 2848);
            goto LABEL_590;
          case 'W':
            LOWORD(v431) = *(_WORD *)(a1[3] + 62);
            unint64_t v432 = (void *)(*(void *)a1[2] + 2872);
            goto LABEL_590;
          case 'X':
            LOWORD(v431) = *(_WORD *)(a1[3] + 46);
            unint64_t v432 = (void *)(*(void *)a1[2] + 2896);
            goto LABEL_590;
          case 'Y':
            LOWORD(v431) = *(_WORD *)(a1[3] + 30);
            unint64_t v432 = (void *)(*(void *)a1[2] + 2920);
            goto LABEL_590;
          case 'Z':
            LOWORD(v431) = *(_WORD *)(a1[3] + 80);
            unint64_t v432 = (void *)(*(void *)a1[2] + 2944);
            goto LABEL_590;
          case '[':
            LOWORD(v431) = *(_WORD *)(a1[3] + 64);
            unint64_t v432 = (void *)(*(void *)a1[2] + 2968);
            goto LABEL_590;
          case '\\':
            LOWORD(v431) = *(_WORD *)(a1[3] + 48);
            unint64_t v432 = (void *)(*(void *)a1[2] + 2992);
            goto LABEL_590;
          case ']':
            LOWORD(v431) = *(_WORD *)(a1[3] + 32);
            unint64_t v432 = (void *)(*(void *)a1[2] + 3016);
            goto LABEL_590;
          case '^':
            LOWORD(v431) = *(_WORD *)(a1[3] + 72);
            unint64_t v432 = (void *)(*(void *)a1[2] + 3040);
            goto LABEL_590;
          case '_':
            LOWORD(v431) = *(_WORD *)(a1[3] + 56);
            unint64_t v432 = (void *)(*(void *)a1[2] + 3064);
            goto LABEL_590;
            LOWORD(v431) = *(_WORD *)(a1[3] + 40);
            unint64_t v432 = (void *)(*(void *)a1[2] + 3088);
            goto LABEL_590;
          case 'a':
            int v431 = *(unsigned __int16 *)(a1[3] + 24) >> 1;
            unint64_t v432 = (void *)(*(void *)a1[2] + 3112);
            goto LABEL_590;
          case 'b':
            LOWORD(v431) = *(_WORD *)(a1[3] + 74);
            unint64_t v432 = (void *)(*(void *)a1[2] + 3136);
            goto LABEL_590;
          case 'c':
            LOWORD(v431) = *(_WORD *)(a1[3] + 58);
            unint64_t v432 = (void *)(*(void *)a1[2] + 3160);
            goto LABEL_590;
          case 'd':
            LOWORD(v431) = *(_WORD *)(a1[3] + 42);
            unint64_t v432 = (void *)(*(void *)a1[2] + 3184);
            goto LABEL_590;
          case 'e':
            LOWORD(v431) = *(_WORD *)(a1[3] + 26);
            unint64_t v432 = (void *)(*(void *)a1[2] + 3208);
LABEL_590:
            *(void *)(*v432 - 8) += v431 & 0x1FFF;
            break;
          default:
            break;
        }
        --v429;
      }
      while (v429);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    uint64_t v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 'F':
            uint64_t v10 = *(void **)a1[2];
            uint64_t v11 = *(_WORD *)(a1[3] + 82) & 0x1FFF;
            unsigned int v12 = (char *)v10[308];
            unint64_t v13 = v10[309];
            if ((unint64_t)v12 >= v13)
            {
              uint64_t v170 = (char *)v10[307];
              uint64_t v171 = (v12 - v170) >> 3;
              if ((unint64_t)(v171 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v172 = v13 - (void)v170;
              unint64_t v173 = (uint64_t)(v13 - (void)v170) >> 2;
              if (v173 <= v171 + 1) {
                unint64_t v173 = v171 + 1;
              }
              if (v172 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v174 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v174 = v173;
              }
              if (v174)
              {
                unint64_t v175 = (char *)sub_5714((uint64_t)(v10 + 309), v174);
                unsigned int v12 = (char *)v10[308];
                uint64_t v170 = (char *)v10[307];
              }
              else
              {
                unint64_t v175 = 0;
              }
              unint64_t v362 = &v175[8 * v171];
              *(void *)unint64_t v362 = v11;
              unint64_t v14 = v362 + 8;
              while (v12 != v170)
              {
                uint64_t v363 = *((void *)v12 - 1);
                v12 -= 8;
                *((void *)v362 - 1) = v363;
                v362 -= 8;
              }
              v10[307] = v362;
              v10[308] = v14;
              v10[309] = &v175[8 * v174];
              if (v170) {
                operator delete(v170);
              }
            }
            else
            {
              *(void *)unsigned int v12 = v11;
              unint64_t v14 = v12 + 8;
            }
            v10[308] = v14;
            break;
          case 'G':
            unint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_WORD *)(a1[3] + 66) & 0x1FFF;
            uint64_t v17 = (char *)v15[311];
            unint64_t v18 = v15[312];
            if ((unint64_t)v17 >= v18)
            {
              uint64_t v176 = (char *)v15[310];
              uint64_t v177 = (v17 - v176) >> 3;
              if ((unint64_t)(v177 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v178 = v18 - (void)v176;
              unint64_t v179 = (uint64_t)(v18 - (void)v176) >> 2;
              if (v179 <= v177 + 1) {
                unint64_t v179 = v177 + 1;
              }
              if (v178 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v180 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v180 = v179;
              }
              if (v180)
              {
                unint64_t v181 = (char *)sub_5714((uint64_t)(v15 + 312), v180);
                uint64_t v17 = (char *)v15[311];
                uint64_t v176 = (char *)v15[310];
              }
              else
              {
                unint64_t v181 = 0;
              }
              unint64_t v364 = &v181[8 * v177];
              *(void *)unint64_t v364 = v16;
              unint64_t v19 = v364 + 8;
              while (v17 != v176)
              {
                uint64_t v365 = *((void *)v17 - 1);
                v17 -= 8;
                *((void *)v364 - 1) = v365;
                v364 -= 8;
              }
              v15[310] = v364;
              v15[311] = v19;
              v15[312] = &v181[8 * v180];
              if (v176) {
                operator delete(v176);
              }
            }
            else
            {
              *(void *)uint64_t v17 = v16;
              unint64_t v19 = v17 + 8;
            }
            v15[311] = v19;
            break;
          case 'H':
            uint64_t v20 = *(void **)a1[2];
            uint64_t v21 = *(_WORD *)(a1[3] + 50) & 0x1FFF;
            uint64_t v22 = (char *)v20[314];
            unint64_t v23 = v20[315];
            if ((unint64_t)v22 >= v23)
            {
              uint64_t v182 = (char *)v20[313];
              uint64_t v183 = (v22 - v182) >> 3;
              if ((unint64_t)(v183 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v184 = v23 - (void)v182;
              unint64_t v185 = (uint64_t)(v23 - (void)v182) >> 2;
              if (v185 <= v183 + 1) {
                unint64_t v185 = v183 + 1;
              }
              if (v184 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v186 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v186 = v185;
              }
              if (v186)
              {
                unint64_t v187 = (char *)sub_5714((uint64_t)(v20 + 315), v186);
                uint64_t v22 = (char *)v20[314];
                uint64_t v182 = (char *)v20[313];
              }
              else
              {
                unint64_t v187 = 0;
              }
              unint64_t v366 = &v187[8 * v183];
              *(void *)unint64_t v366 = v21;
              unint64_t v24 = v366 + 8;
              while (v22 != v182)
              {
                uint64_t v367 = *((void *)v22 - 1);
                v22 -= 8;
                *((void *)v366 - 1) = v367;
                v366 -= 8;
              }
              v20[313] = v366;
              v20[314] = v24;
              v20[315] = &v187[8 * v186];
              if (v182) {
                operator delete(v182);
              }
            }
            else
            {
              *(void *)uint64_t v22 = v21;
              unint64_t v24 = v22 + 8;
            }
            v20[314] = v24;
            break;
          case 'I':
            uint64_t v25 = *(void **)a1[2];
            uint64_t v26 = *(_WORD *)(a1[3] + 34) & 0x1FFF;
            uint64_t v27 = (char *)v25[317];
            unint64_t v28 = v25[318];
            if ((unint64_t)v27 >= v28)
            {
              uint64_t v188 = (char *)v25[316];
              uint64_t v189 = (v27 - v188) >> 3;
              if ((unint64_t)(v189 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v190 = v28 - (void)v188;
              unint64_t v191 = (uint64_t)(v28 - (void)v188) >> 2;
              if (v191 <= v189 + 1) {
                unint64_t v191 = v189 + 1;
              }
              if (v190 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v192 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v192 = v191;
              }
              if (v192)
              {
                unint64_t v193 = (char *)sub_5714((uint64_t)(v25 + 318), v192);
                uint64_t v27 = (char *)v25[317];
                uint64_t v188 = (char *)v25[316];
              }
              else
              {
                unint64_t v193 = 0;
              }
              unint64_t v368 = &v193[8 * v189];
              *(void *)unint64_t v368 = v26;
              unint64_t v29 = v368 + 8;
              while (v27 != v188)
              {
                uint64_t v369 = *((void *)v27 - 1);
                v27 -= 8;
                *((void *)v368 - 1) = v369;
                v368 -= 8;
              }
              v25[316] = v368;
              v25[317] = v29;
              v25[318] = &v193[8 * v192];
              if (v188) {
                operator delete(v188);
              }
            }
            else
            {
              *(void *)uint64_t v27 = v26;
              unint64_t v29 = v27 + 8;
            }
            v25[317] = v29;
            break;
          case 'J':
            unint64_t v30 = *(void **)a1[2];
            uint64_t v31 = *(_WORD *)(a1[3] + 84) & 0x1FFF;
            unint64_t v32 = (char *)v30[320];
            unint64_t v33 = v30[321];
            if ((unint64_t)v32 >= v33)
            {
              uint64_t v194 = (char *)v30[319];
              uint64_t v195 = (v32 - v194) >> 3;
              if ((unint64_t)(v195 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v196 = v33 - (void)v194;
              unint64_t v197 = (uint64_t)(v33 - (void)v194) >> 2;
              if (v197 <= v195 + 1) {
                unint64_t v197 = v195 + 1;
              }
              if (v196 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v198 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v198 = v197;
              }
              if (v198)
              {
                unint64_t v199 = (char *)sub_5714((uint64_t)(v30 + 321), v198);
                unint64_t v32 = (char *)v30[320];
                uint64_t v194 = (char *)v30[319];
              }
              else
              {
                unint64_t v199 = 0;
              }
              uint64_t v370 = &v199[8 * v195];
              *(void *)uint64_t v370 = v31;
              unint64_t v34 = v370 + 8;
              while (v32 != v194)
              {
                uint64_t v371 = *((void *)v32 - 1);
                v32 -= 8;
                *((void *)v370 - 1) = v371;
                v370 -= 8;
              }
              v30[319] = v370;
              v30[320] = v34;
              v30[321] = &v199[8 * v198];
              if (v194) {
                operator delete(v194);
              }
            }
            else
            {
              *(void *)unint64_t v32 = v31;
              unint64_t v34 = v32 + 8;
            }
            v30[320] = v34;
            break;
          case 'K':
            unint64_t v35 = *(void **)a1[2];
            uint64_t v36 = *(_WORD *)(a1[3] + 68) & 0x1FFF;
            uint64_t v37 = (char *)v35[323];
            unint64_t v38 = v35[324];
            if ((unint64_t)v37 >= v38)
            {
              unint64_t v200 = (char *)v35[322];
              uint64_t v201 = (v37 - v200) >> 3;
              if ((unint64_t)(v201 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v202 = v38 - (void)v200;
              unint64_t v203 = (uint64_t)(v38 - (void)v200) >> 2;
              if (v203 <= v201 + 1) {
                unint64_t v203 = v201 + 1;
              }
              if (v202 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v204 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v204 = v203;
              }
              if (v204)
              {
                unint64_t v205 = (char *)sub_5714((uint64_t)(v35 + 324), v204);
                uint64_t v37 = (char *)v35[323];
                unint64_t v200 = (char *)v35[322];
              }
              else
              {
                unint64_t v205 = 0;
              }
              unint64_t v372 = &v205[8 * v201];
              *(void *)unint64_t v372 = v36;
              unint64_t v39 = v372 + 8;
              while (v37 != v200)
              {
                uint64_t v373 = *((void *)v37 - 1);
                v37 -= 8;
                *((void *)v372 - 1) = v373;
                v372 -= 8;
              }
              v35[322] = v372;
              v35[323] = v39;
              v35[324] = &v205[8 * v204];
              if (v200) {
                operator delete(v200);
              }
            }
            else
            {
              *(void *)uint64_t v37 = v36;
              unint64_t v39 = v37 + 8;
            }
            v35[323] = v39;
            break;
          case 'L':
            unint64_t v40 = *(void **)a1[2];
            uint64_t v41 = *(_WORD *)(a1[3] + 52) & 0x1FFF;
            uint64_t v42 = (char *)v40[326];
            unint64_t v43 = v40[327];
            if ((unint64_t)v42 >= v43)
            {
              unint64_t v206 = (char *)v40[325];
              uint64_t v207 = (v42 - v206) >> 3;
              if ((unint64_t)(v207 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v208 = v43 - (void)v206;
              unint64_t v209 = (uint64_t)(v43 - (void)v206) >> 2;
              if (v209 <= v207 + 1) {
                unint64_t v209 = v207 + 1;
              }
              if (v208 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v210 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v210 = v209;
              }
              if (v210)
              {
                unint64_t v211 = (char *)sub_5714((uint64_t)(v40 + 327), v210);
                uint64_t v42 = (char *)v40[326];
                unint64_t v206 = (char *)v40[325];
              }
              else
              {
                unint64_t v211 = 0;
              }
              unint64_t v374 = &v211[8 * v207];
              *(void *)unint64_t v374 = v41;
              uint64_t v44 = v374 + 8;
              while (v42 != v206)
              {
                uint64_t v375 = *((void *)v42 - 1);
                v42 -= 8;
                *((void *)v374 - 1) = v375;
                v374 -= 8;
              }
              v40[325] = v374;
              v40[326] = v44;
              v40[327] = &v211[8 * v210];
              if (v206) {
                operator delete(v206);
              }
            }
            else
            {
              *(void *)uint64_t v42 = v41;
              uint64_t v44 = v42 + 8;
            }
            v40[326] = v44;
            break;
          case 'M':
            unint64_t v45 = *(void **)a1[2];
            uint64_t v46 = *(_WORD *)(a1[3] + 36) & 0x1FFF;
            unint64_t v47 = (char *)v45[329];
            unint64_t v48 = v45[330];
            if ((unint64_t)v47 >= v48)
            {
              unint64_t v212 = (char *)v45[328];
              uint64_t v213 = (v47 - v212) >> 3;
              if ((unint64_t)(v213 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v214 = v48 - (void)v212;
              unint64_t v215 = (uint64_t)(v48 - (void)v212) >> 2;
              if (v215 <= v213 + 1) {
                unint64_t v215 = v213 + 1;
              }
              if (v214 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v216 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v216 = v215;
              }
              if (v216)
              {
                unint64_t v217 = (char *)sub_5714((uint64_t)(v45 + 330), v216);
                unint64_t v47 = (char *)v45[329];
                unint64_t v212 = (char *)v45[328];
              }
              else
              {
                unint64_t v217 = 0;
              }
              unint64_t v376 = &v217[8 * v213];
              *(void *)unint64_t v376 = v46;
              uint64_t v49 = v376 + 8;
              while (v47 != v212)
              {
                uint64_t v377 = *((void *)v47 - 1);
                v47 -= 8;
                *((void *)v376 - 1) = v377;
                v376 -= 8;
              }
              v45[328] = v376;
              v45[329] = v49;
              v45[330] = &v217[8 * v216];
              if (v212) {
                operator delete(v212);
              }
            }
            else
            {
              *(void *)unint64_t v47 = v46;
              uint64_t v49 = v47 + 8;
            }
            v45[329] = v49;
            break;
          case 'N':
            uint64_t v50 = *(void **)a1[2];
            uint64_t v51 = *(_WORD *)(a1[3] + 86) & 0x1FFF;
            unint64_t v52 = (char *)v50[332];
            unint64_t v53 = v50[333];
            if ((unint64_t)v52 >= v53)
            {
              unint64_t v218 = (char *)v50[331];
              uint64_t v219 = (v52 - v218) >> 3;
              if ((unint64_t)(v219 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v220 = v53 - (void)v218;
              unint64_t v221 = (uint64_t)(v53 - (void)v218) >> 2;
              if (v221 <= v219 + 1) {
                unint64_t v221 = v219 + 1;
              }
              if (v220 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v222 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v222 = v221;
              }
              if (v222)
              {
                uint64_t v223 = (char *)sub_5714((uint64_t)(v50 + 333), v222);
                unint64_t v52 = (char *)v50[332];
                unint64_t v218 = (char *)v50[331];
              }
              else
              {
                uint64_t v223 = 0;
              }
              unint64_t v378 = &v223[8 * v219];
              *(void *)unint64_t v378 = v51;
              unint64_t v54 = v378 + 8;
              while (v52 != v218)
              {
                uint64_t v379 = *((void *)v52 - 1);
                v52 -= 8;
                *((void *)v378 - 1) = v379;
                v378 -= 8;
              }
              v50[331] = v378;
              v50[332] = v54;
              v50[333] = &v223[8 * v222];
              if (v218) {
                operator delete(v218);
              }
            }
            else
            {
              *(void *)unint64_t v52 = v51;
              unint64_t v54 = v52 + 8;
            }
            v50[332] = v54;
            break;
          case 'O':
            uint64_t v55 = *(void **)a1[2];
            uint64_t v56 = *(_WORD *)(a1[3] + 70) & 0x1FFF;
            unint64_t v57 = (char *)v55[335];
            unint64_t v58 = v55[336];
            if ((unint64_t)v57 >= v58)
            {
              uint64_t v224 = (char *)v55[334];
              uint64_t v225 = (v57 - v224) >> 3;
              if ((unint64_t)(v225 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v226 = v58 - (void)v224;
              unint64_t v227 = (uint64_t)(v58 - (void)v224) >> 2;
              if (v227 <= v225 + 1) {
                unint64_t v227 = v225 + 1;
              }
              if (v226 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v228 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v228 = v227;
              }
              if (v228)
              {
                uint64_t v229 = (char *)sub_5714((uint64_t)(v55 + 336), v228);
                unint64_t v57 = (char *)v55[335];
                uint64_t v224 = (char *)v55[334];
              }
              else
              {
                uint64_t v229 = 0;
              }
              unint64_t v380 = &v229[8 * v225];
              *(void *)unint64_t v380 = v56;
              unint64_t v59 = v380 + 8;
              while (v57 != v224)
              {
                uint64_t v381 = *((void *)v57 - 1);
                v57 -= 8;
                *((void *)v380 - 1) = v381;
                v380 -= 8;
              }
              v55[334] = v380;
              v55[335] = v59;
              v55[336] = &v229[8 * v228];
              if (v224) {
                operator delete(v224);
              }
            }
            else
            {
              *(void *)unint64_t v57 = v56;
              unint64_t v59 = v57 + 8;
            }
            v55[335] = v59;
            break;
          case 'P':
            unint64_t v60 = *(void **)a1[2];
            uint64_t v61 = *(_WORD *)(a1[3] + 54) & 0x1FFF;
            uint64_t v62 = (char *)v60[338];
            unint64_t v63 = v60[339];
            if ((unint64_t)v62 >= v63)
            {
              uint64_t v230 = (char *)v60[337];
              uint64_t v231 = (v62 - v230) >> 3;
              if ((unint64_t)(v231 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v232 = v63 - (void)v230;
              unint64_t v233 = (uint64_t)(v63 - (void)v230) >> 2;
              if (v233 <= v231 + 1) {
                unint64_t v233 = v231 + 1;
              }
              if (v232 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v234 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v234 = v233;
              }
              if (v234)
              {
                unint64_t v235 = (char *)sub_5714((uint64_t)(v60 + 339), v234);
                uint64_t v62 = (char *)v60[338];
                uint64_t v230 = (char *)v60[337];
              }
              else
              {
                unint64_t v235 = 0;
              }
              unint64_t v382 = &v235[8 * v231];
              *(void *)unint64_t v382 = v61;
              unint64_t v64 = v382 + 8;
              while (v62 != v230)
              {
                uint64_t v383 = *((void *)v62 - 1);
                v62 -= 8;
                *((void *)v382 - 1) = v383;
                v382 -= 8;
              }
              v60[337] = v382;
              v60[338] = v64;
              v60[339] = &v235[8 * v234];
              if (v230) {
                operator delete(v230);
              }
            }
            else
            {
              *(void *)uint64_t v62 = v61;
              unint64_t v64 = v62 + 8;
            }
            v60[338] = v64;
            break;
          case 'Q':
            unint64_t v65 = *(void **)a1[2];
            uint64_t v66 = *(_WORD *)(a1[3] + 38) & 0x1FFF;
            unint64_t v67 = (char *)v65[341];
            unint64_t v68 = v65[342];
            if ((unint64_t)v67 >= v68)
            {
              uint64_t v236 = (char *)v65[340];
              uint64_t v237 = (v67 - v236) >> 3;
              if ((unint64_t)(v237 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v238 = v68 - (void)v236;
              unint64_t v239 = (uint64_t)(v68 - (void)v236) >> 2;
              if (v239 <= v237 + 1) {
                unint64_t v239 = v237 + 1;
              }
              if (v238 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v240 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v240 = v239;
              }
              if (v240)
              {
                uint64_t v241 = (char *)sub_5714((uint64_t)(v65 + 342), v240);
                unint64_t v67 = (char *)v65[341];
                uint64_t v236 = (char *)v65[340];
              }
              else
              {
                uint64_t v241 = 0;
              }
              uint64_t v384 = &v241[8 * v237];
              *(void *)uint64_t v384 = v66;
              unint64_t v69 = v384 + 8;
              while (v67 != v236)
              {
                uint64_t v385 = *((void *)v67 - 1);
                v67 -= 8;
                *((void *)v384 - 1) = v385;
                v384 -= 8;
              }
              v65[340] = v384;
              v65[341] = v69;
              v65[342] = &v241[8 * v240];
              if (v236) {
                operator delete(v236);
              }
            }
            else
            {
              *(void *)unint64_t v67 = v66;
              unint64_t v69 = v67 + 8;
            }
            v65[341] = v69;
            break;
          case 'R':
            uint64_t v70 = *(void **)a1[2];
            uint64_t v71 = *(_WORD *)(a1[3] + 76) & 0x1FFF;
            uint64_t v72 = (char *)v70[344];
            unint64_t v73 = v70[345];
            if ((unint64_t)v72 >= v73)
            {
              uint64_t v242 = (char *)v70[343];
              uint64_t v243 = (v72 - v242) >> 3;
              if ((unint64_t)(v243 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v244 = v73 - (void)v242;
              unint64_t v245 = (uint64_t)(v73 - (void)v242) >> 2;
              if (v245 <= v243 + 1) {
                unint64_t v245 = v243 + 1;
              }
              if (v244 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v246 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v246 = v245;
              }
              if (v246)
              {
                uint64_t v247 = (char *)sub_5714((uint64_t)(v70 + 345), v246);
                uint64_t v72 = (char *)v70[344];
                uint64_t v242 = (char *)v70[343];
              }
              else
              {
                uint64_t v247 = 0;
              }
              unint64_t v386 = &v247[8 * v243];
              *(void *)unint64_t v386 = v71;
              uint64_t v74 = v386 + 8;
              while (v72 != v242)
              {
                uint64_t v387 = *((void *)v72 - 1);
                v72 -= 8;
                *((void *)v386 - 1) = v387;
                v386 -= 8;
              }
              v70[343] = v386;
              v70[344] = v74;
              v70[345] = &v247[8 * v246];
              if (v242) {
                operator delete(v242);
              }
            }
            else
            {
              *(void *)uint64_t v72 = v71;
              uint64_t v74 = v72 + 8;
            }
            v70[344] = v74;
            break;
          case 'S':
            unint64_t v75 = *(void **)a1[2];
            uint64_t v76 = *(_WORD *)(a1[3] + 60) & 0x1FFF;
            unint64_t v77 = (char *)v75[347];
            unint64_t v78 = v75[348];
            if ((unint64_t)v77 >= v78)
            {
              uint64_t v248 = (char *)v75[346];
              uint64_t v249 = (v77 - v248) >> 3;
              if ((unint64_t)(v249 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v250 = v78 - (void)v248;
              unint64_t v251 = (uint64_t)(v78 - (void)v248) >> 2;
              if (v251 <= v249 + 1) {
                unint64_t v251 = v249 + 1;
              }
              if (v250 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v252 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v252 = v251;
              }
              if (v252)
              {
                uint64_t v253 = (char *)sub_5714((uint64_t)(v75 + 348), v252);
                unint64_t v77 = (char *)v75[347];
                uint64_t v248 = (char *)v75[346];
              }
              else
              {
                uint64_t v253 = 0;
              }
              unint64_t v388 = &v253[8 * v249];
              *(void *)unint64_t v388 = v76;
              uint64_t v79 = v388 + 8;
              while (v77 != v248)
              {
                uint64_t v389 = *((void *)v77 - 1);
                v77 -= 8;
                *((void *)v388 - 1) = v389;
                v388 -= 8;
              }
              v75[346] = v388;
              v75[347] = v79;
              v75[348] = &v253[8 * v252];
              if (v248) {
                operator delete(v248);
              }
            }
            else
            {
              *(void *)unint64_t v77 = v76;
              uint64_t v79 = v77 + 8;
            }
            v75[347] = v79;
            break;
          case 'T':
            unint64_t v80 = *(void **)a1[2];
            uint64_t v81 = *(_WORD *)(a1[3] + 44) & 0x1FFF;
            unint64_t v82 = (char *)v80[350];
            unint64_t v83 = v80[351];
            if ((unint64_t)v82 >= v83)
            {
              uint64_t v254 = (char *)v80[349];
              uint64_t v255 = (v82 - v254) >> 3;
              if ((unint64_t)(v255 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v256 = v83 - (void)v254;
              unint64_t v257 = (uint64_t)(v83 - (void)v254) >> 2;
              if (v257 <= v255 + 1) {
                unint64_t v257 = v255 + 1;
              }
              if (v256 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v258 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v258 = v257;
              }
              if (v258)
              {
                uint64_t v259 = (char *)sub_5714((uint64_t)(v80 + 351), v258);
                unint64_t v82 = (char *)v80[350];
                uint64_t v254 = (char *)v80[349];
              }
              else
              {
                uint64_t v259 = 0;
              }
              unint64_t v390 = &v259[8 * v255];
              *(void *)unint64_t v390 = v81;
              unint64_t v84 = v390 + 8;
              while (v82 != v254)
              {
                uint64_t v391 = *((void *)v82 - 1);
                v82 -= 8;
                *((void *)v390 - 1) = v391;
                v390 -= 8;
              }
              v80[349] = v390;
              v80[350] = v84;
              v80[351] = &v259[8 * v258];
              if (v254) {
                operator delete(v254);
              }
            }
            else
            {
              *(void *)unint64_t v82 = v81;
              unint64_t v84 = v82 + 8;
            }
            v80[350] = v84;
            break;
          case 'U':
            unint64_t v85 = *(void **)a1[2];
            uint64_t v86 = *(_WORD *)(a1[3] + 28) & 0x1FFF;
            unint64_t v87 = (char *)v85[353];
            unint64_t v88 = v85[354];
            if ((unint64_t)v87 >= v88)
            {
              unint64_t v260 = (char *)v85[352];
              uint64_t v261 = (v87 - v260) >> 3;
              if ((unint64_t)(v261 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v262 = v88 - (void)v260;
              unint64_t v263 = (uint64_t)(v88 - (void)v260) >> 2;
              if (v263 <= v261 + 1) {
                unint64_t v263 = v261 + 1;
              }
              if (v262 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v264 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v264 = v263;
              }
              if (v264)
              {
                uint64_t v265 = (char *)sub_5714((uint64_t)(v85 + 354), v264);
                unint64_t v87 = (char *)v85[353];
                unint64_t v260 = (char *)v85[352];
              }
              else
              {
                uint64_t v265 = 0;
              }
              unint64_t v392 = &v265[8 * v261];
              *(void *)unint64_t v392 = v86;
              unint64_t v89 = v392 + 8;
              while (v87 != v260)
              {
                uint64_t v393 = *((void *)v87 - 1);
                v87 -= 8;
                *((void *)v392 - 1) = v393;
                v392 -= 8;
              }
              v85[352] = v392;
              v85[353] = v89;
              v85[354] = &v265[8 * v264];
              if (v260) {
                operator delete(v260);
              }
            }
            else
            {
              *(void *)unint64_t v87 = v86;
              unint64_t v89 = v87 + 8;
            }
            v85[353] = v89;
            break;
          case 'V':
            unint64_t v90 = *(void **)a1[2];
            uint64_t v91 = *(_WORD *)(a1[3] + 78) & 0x1FFF;
            uint64_t v92 = (char *)v90[356];
            unint64_t v93 = v90[357];
            if ((unint64_t)v92 >= v93)
            {
              unint64_t v266 = (char *)v90[355];
              uint64_t v267 = (v92 - v266) >> 3;
              if ((unint64_t)(v267 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v268 = v93 - (void)v266;
              unint64_t v269 = (uint64_t)(v93 - (void)v266) >> 2;
              if (v269 <= v267 + 1) {
                unint64_t v269 = v267 + 1;
              }
              if (v268 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v270 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v270 = v269;
              }
              if (v270)
              {
                uint64_t v271 = (char *)sub_5714((uint64_t)(v90 + 357), v270);
                uint64_t v92 = (char *)v90[356];
                unint64_t v266 = (char *)v90[355];
              }
              else
              {
                uint64_t v271 = 0;
              }
              unint64_t v394 = &v271[8 * v267];
              *(void *)unint64_t v394 = v91;
              unint64_t v94 = v394 + 8;
              while (v92 != v266)
              {
                uint64_t v395 = *((void *)v92 - 1);
                v92 -= 8;
                *((void *)v394 - 1) = v395;
                v394 -= 8;
              }
              v90[355] = v394;
              v90[356] = v94;
              v90[357] = &v271[8 * v270];
              if (v266) {
                operator delete(v266);
              }
            }
            else
            {
              *(void *)uint64_t v92 = v91;
              unint64_t v94 = v92 + 8;
            }
            v90[356] = v94;
            break;
          case 'W':
            unint64_t v95 = *(void **)a1[2];
            uint64_t v96 = *(_WORD *)(a1[3] + 62) & 0x1FFF;
            uint64_t v97 = (char *)v95[359];
            unint64_t v98 = v95[360];
            if ((unint64_t)v97 >= v98)
            {
              uint64_t v272 = (char *)v95[358];
              uint64_t v273 = (v97 - v272) >> 3;
              if ((unint64_t)(v273 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v274 = v98 - (void)v272;
              unint64_t v275 = (uint64_t)(v98 - (void)v272) >> 2;
              if (v275 <= v273 + 1) {
                unint64_t v275 = v273 + 1;
              }
              if (v274 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v276 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v276 = v275;
              }
              if (v276)
              {
                uint64_t v277 = (char *)sub_5714((uint64_t)(v95 + 360), v276);
                uint64_t v97 = (char *)v95[359];
                uint64_t v272 = (char *)v95[358];
              }
              else
              {
                uint64_t v277 = 0;
              }
              unint64_t v396 = &v277[8 * v273];
              *(void *)unint64_t v396 = v96;
              unint64_t v99 = v396 + 8;
              while (v97 != v272)
              {
                uint64_t v397 = *((void *)v97 - 1);
                v97 -= 8;
                *((void *)v396 - 1) = v397;
                v396 -= 8;
              }
              v95[358] = v396;
              v95[359] = v99;
              v95[360] = &v277[8 * v276];
              if (v272) {
                operator delete(v272);
              }
            }
            else
            {
              *(void *)uint64_t v97 = v96;
              unint64_t v99 = v97 + 8;
            }
            v95[359] = v99;
            break;
          case 'X':
            unint64_t v100 = *(void **)a1[2];
            uint64_t v101 = *(_WORD *)(a1[3] + 46) & 0x1FFF;
            unint64_t v102 = (char *)v100[362];
            unint64_t v103 = v100[363];
            if ((unint64_t)v102 >= v103)
            {
              uint64_t v278 = (char *)v100[361];
              uint64_t v279 = (v102 - v278) >> 3;
              if ((unint64_t)(v279 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v280 = v103 - (void)v278;
              unint64_t v281 = (uint64_t)(v103 - (void)v278) >> 2;
              if (v281 <= v279 + 1) {
                unint64_t v281 = v279 + 1;
              }
              if (v280 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v282 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v282 = v281;
              }
              if (v282)
              {
                uint64_t v283 = (char *)sub_5714((uint64_t)(v100 + 363), v282);
                unint64_t v102 = (char *)v100[362];
                uint64_t v278 = (char *)v100[361];
              }
              else
              {
                uint64_t v283 = 0;
              }
              uint64_t v398 = &v283[8 * v279];
              *(void *)uint64_t v398 = v101;
              uint64_t v104 = v398 + 8;
              while (v102 != v278)
              {
                uint64_t v399 = *((void *)v102 - 1);
                v102 -= 8;
                *((void *)v398 - 1) = v399;
                v398 -= 8;
              }
              v100[361] = v398;
              v100[362] = v104;
              v100[363] = &v283[8 * v282];
              if (v278) {
                operator delete(v278);
              }
            }
            else
            {
              *(void *)unint64_t v102 = v101;
              uint64_t v104 = v102 + 8;
            }
            v100[362] = v104;
            break;
          case 'Y':
            unint64_t v105 = *(void **)a1[2];
            uint64_t v106 = *(_WORD *)(a1[3] + 30) & 0x1FFF;
            unint64_t v107 = (char *)v105[365];
            unint64_t v108 = v105[366];
            if ((unint64_t)v107 >= v108)
            {
              unint64_t v284 = (char *)v105[364];
              uint64_t v285 = (v107 - v284) >> 3;
              if ((unint64_t)(v285 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v286 = v108 - (void)v284;
              unint64_t v287 = (uint64_t)(v108 - (void)v284) >> 2;
              if (v287 <= v285 + 1) {
                unint64_t v287 = v285 + 1;
              }
              if (v286 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v288 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v288 = v287;
              }
              if (v288)
              {
                uint64_t v289 = (char *)sub_5714((uint64_t)(v105 + 366), v288);
                unint64_t v107 = (char *)v105[365];
                unint64_t v284 = (char *)v105[364];
              }
              else
              {
                uint64_t v289 = 0;
              }
              unint64_t v400 = &v289[8 * v285];
              *(void *)unint64_t v400 = v106;
              unint64_t v109 = v400 + 8;
              while (v107 != v284)
              {
                uint64_t v401 = *((void *)v107 - 1);
                v107 -= 8;
                *((void *)v400 - 1) = v401;
                v400 -= 8;
              }
              v105[364] = v400;
              v105[365] = v109;
              v105[366] = &v289[8 * v288];
              if (v284) {
                operator delete(v284);
              }
            }
            else
            {
              *(void *)unint64_t v107 = v106;
              unint64_t v109 = v107 + 8;
            }
            v105[365] = v109;
            break;
          case 'Z':
            uint64_t v110 = *(void **)a1[2];
            uint64_t v111 = *(_WORD *)(a1[3] + 80) & 0x1FFF;
            uint64_t v112 = (char *)v110[368];
            unint64_t v113 = v110[369];
            if ((unint64_t)v112 >= v113)
            {
              uint64_t v290 = (char *)v110[367];
              uint64_t v291 = (v112 - v290) >> 3;
              if ((unint64_t)(v291 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v292 = v113 - (void)v290;
              unint64_t v293 = (uint64_t)(v113 - (void)v290) >> 2;
              if (v293 <= v291 + 1) {
                unint64_t v293 = v291 + 1;
              }
              if (v292 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v294 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v294 = v293;
              }
              if (v294)
              {
                unint64_t v295 = (char *)sub_5714((uint64_t)(v110 + 369), v294);
                uint64_t v112 = (char *)v110[368];
                uint64_t v290 = (char *)v110[367];
              }
              else
              {
                unint64_t v295 = 0;
              }
              unint64_t v402 = &v295[8 * v291];
              *(void *)unint64_t v402 = v111;
              unint64_t v114 = v402 + 8;
              while (v112 != v290)
              {
                uint64_t v403 = *((void *)v112 - 1);
                v112 -= 8;
                *((void *)v402 - 1) = v403;
                v402 -= 8;
              }
              v110[367] = v402;
              v110[368] = v114;
              v110[369] = &v295[8 * v294];
              if (v290) {
                operator delete(v290);
              }
            }
            else
            {
              *(void *)uint64_t v112 = v111;
              unint64_t v114 = v112 + 8;
            }
            v110[368] = v114;
            break;
          case '[':
            unint64_t v115 = *(void **)a1[2];
            uint64_t v116 = *(_WORD *)(a1[3] + 64) & 0x1FFF;
            uint64_t v117 = (char *)v115[371];
            unint64_t v118 = v115[372];
            if ((unint64_t)v117 >= v118)
            {
              unint64_t v296 = (char *)v115[370];
              uint64_t v297 = (v117 - v296) >> 3;
              if ((unint64_t)(v297 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v298 = v118 - (void)v296;
              unint64_t v299 = (uint64_t)(v118 - (void)v296) >> 2;
              if (v299 <= v297 + 1) {
                unint64_t v299 = v297 + 1;
              }
              if (v298 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v300 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v300 = v299;
              }
              if (v300)
              {
                unint64_t v301 = (char *)sub_5714((uint64_t)(v115 + 372), v300);
                uint64_t v117 = (char *)v115[371];
                unint64_t v296 = (char *)v115[370];
              }
              else
              {
                unint64_t v301 = 0;
              }
              unint64_t v404 = &v301[8 * v297];
              *(void *)unint64_t v404 = v116;
              unint64_t v119 = v404 + 8;
              while (v117 != v296)
              {
                uint64_t v405 = *((void *)v117 - 1);
                v117 -= 8;
                *((void *)v404 - 1) = v405;
                v404 -= 8;
              }
              v115[370] = v404;
              v115[371] = v119;
              v115[372] = &v301[8 * v300];
              if (v296) {
                operator delete(v296);
              }
            }
            else
            {
              *(void *)uint64_t v117 = v116;
              unint64_t v119 = v117 + 8;
            }
            v115[371] = v119;
            break;
          case '\\':
            unint64_t v120 = *(void **)a1[2];
            uint64_t v121 = *(_WORD *)(a1[3] + 48) & 0x1FFF;
            uint64_t v122 = (char *)v120[374];
            unint64_t v123 = v120[375];
            if ((unint64_t)v122 >= v123)
            {
              unint64_t v302 = (char *)v120[373];
              uint64_t v303 = (v122 - v302) >> 3;
              if ((unint64_t)(v303 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v304 = v123 - (void)v302;
              unint64_t v305 = (uint64_t)(v123 - (void)v302) >> 2;
              if (v305 <= v303 + 1) {
                unint64_t v305 = v303 + 1;
              }
              if (v304 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v306 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v306 = v305;
              }
              if (v306)
              {
                uint64_t v307 = (char *)sub_5714((uint64_t)(v120 + 375), v306);
                uint64_t v122 = (char *)v120[374];
                unint64_t v302 = (char *)v120[373];
              }
              else
              {
                uint64_t v307 = 0;
              }
              unint64_t v406 = &v307[8 * v303];
              *(void *)unint64_t v406 = v121;
              uint64_t v124 = v406 + 8;
              while (v122 != v302)
              {
                uint64_t v407 = *((void *)v122 - 1);
                v122 -= 8;
                *((void *)v406 - 1) = v407;
                v406 -= 8;
              }
              v120[373] = v406;
              v120[374] = v124;
              v120[375] = &v307[8 * v306];
              if (v302) {
                operator delete(v302);
              }
            }
            else
            {
              *(void *)uint64_t v122 = v121;
              uint64_t v124 = v122 + 8;
            }
            v120[374] = v124;
            break;
          case ']':
            unint64_t v125 = *(void **)a1[2];
            uint64_t v126 = *(_WORD *)(a1[3] + 32) & 0x1FFF;
            unint64_t v127 = (char *)v125[377];
            unint64_t v128 = v125[378];
            if ((unint64_t)v127 >= v128)
            {
              unint64_t v308 = (char *)v125[376];
              uint64_t v309 = (v127 - v308) >> 3;
              if ((unint64_t)(v309 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v310 = v128 - (void)v308;
              unint64_t v311 = (uint64_t)(v128 - (void)v308) >> 2;
              if (v311 <= v309 + 1) {
                unint64_t v311 = v309 + 1;
              }
              if (v310 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v312 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v312 = v311;
              }
              if (v312)
              {
                uint64_t v313 = (char *)sub_5714((uint64_t)(v125 + 378), v312);
                unint64_t v127 = (char *)v125[377];
                unint64_t v308 = (char *)v125[376];
              }
              else
              {
                uint64_t v313 = 0;
              }
              unint64_t v408 = &v313[8 * v309];
              *(void *)unint64_t v408 = v126;
              uint64_t v129 = v408 + 8;
              while (v127 != v308)
              {
                uint64_t v409 = *((void *)v127 - 1);
                v127 -= 8;
                *((void *)v408 - 1) = v409;
                v408 -= 8;
              }
              v125[376] = v408;
              v125[377] = v129;
              v125[378] = &v313[8 * v312];
              if (v308) {
                operator delete(v308);
              }
            }
            else
            {
              *(void *)unint64_t v127 = v126;
              uint64_t v129 = v127 + 8;
            }
            v125[377] = v129;
            break;
          case '^':
            uint64_t v130 = *(void **)a1[2];
            uint64_t v131 = *(_WORD *)(a1[3] + 72) & 0x1FFF;
            unint64_t v132 = (char *)v130[380];
            unint64_t v133 = v130[381];
            if ((unint64_t)v132 >= v133)
            {
              uint64_t v314 = (char *)v130[379];
              uint64_t v315 = (v132 - v314) >> 3;
              if ((unint64_t)(v315 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v316 = v133 - (void)v314;
              unint64_t v317 = (uint64_t)(v133 - (void)v314) >> 2;
              if (v317 <= v315 + 1) {
                unint64_t v317 = v315 + 1;
              }
              if (v316 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v318 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v318 = v317;
              }
              if (v318)
              {
                int v319 = (char *)sub_5714((uint64_t)(v130 + 381), v318);
                unint64_t v132 = (char *)v130[380];
                uint64_t v314 = (char *)v130[379];
              }
              else
              {
                int v319 = 0;
              }
              unint64_t v410 = &v319[8 * v315];
              *(void *)unint64_t v410 = v131;
              uint64_t v134 = v410 + 8;
              while (v132 != v314)
              {
                uint64_t v411 = *((void *)v132 - 1);
                v132 -= 8;
                *((void *)v410 - 1) = v411;
                v410 -= 8;
              }
              v130[379] = v410;
              v130[380] = v134;
              v130[381] = &v319[8 * v318];
              if (v314) {
                operator delete(v314);
              }
            }
            else
            {
              *(void *)unint64_t v132 = v131;
              uint64_t v134 = v132 + 8;
            }
            v130[380] = v134;
            break;
          case '_':
            uint64_t v135 = *(void **)a1[2];
            uint64_t v136 = *(_WORD *)(a1[3] + 56) & 0x1FFF;
            unint64_t v137 = (char *)v135[383];
            unint64_t v138 = v135[384];
            if ((unint64_t)v137 >= v138)
            {
              unint64_t v320 = (char *)v135[382];
              uint64_t v321 = (v137 - v320) >> 3;
              if ((unint64_t)(v321 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v322 = v138 - (void)v320;
              unint64_t v323 = (uint64_t)(v138 - (void)v320) >> 2;
              if (v323 <= v321 + 1) {
                unint64_t v323 = v321 + 1;
              }
              if (v322 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v324 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v324 = v323;
              }
              if (v324)
              {
                unint64_t v325 = (char *)sub_5714((uint64_t)(v135 + 384), v324);
                unint64_t v137 = (char *)v135[383];
                unint64_t v320 = (char *)v135[382];
              }
              else
              {
                unint64_t v325 = 0;
              }
              uint64_t v412 = &v325[8 * v321];
              *(void *)uint64_t v412 = v136;
              unint64_t v139 = v412 + 8;
              while (v137 != v320)
              {
                uint64_t v413 = *((void *)v137 - 1);
                v137 -= 8;
                *((void *)v412 - 1) = v413;
                v412 -= 8;
              }
              v135[382] = v412;
              v135[383] = v139;
              v135[384] = &v325[8 * v324];
              if (v320) {
                operator delete(v320);
              }
            }
            else
            {
              *(void *)unint64_t v137 = v136;
              unint64_t v139 = v137 + 8;
            }
            v135[383] = v139;
            break;
            unint64_t v140 = *(void **)a1[2];
            uint64_t v141 = *(_WORD *)(a1[3] + 40) & 0x1FFF;
            uint64_t v142 = (char *)v140[386];
            unint64_t v143 = v140[387];
            if ((unint64_t)v142 >= v143)
            {
              int v326 = (char *)v140[385];
              uint64_t v327 = (v142 - v326) >> 3;
              if ((unint64_t)(v327 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v328 = v143 - (void)v326;
              unint64_t v329 = (uint64_t)(v143 - (void)v326) >> 2;
              if (v329 <= v327 + 1) {
                unint64_t v329 = v327 + 1;
              }
              if (v328 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v330 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v330 = v329;
              }
              if (v330)
              {
                unint64_t v331 = (char *)sub_5714((uint64_t)(v140 + 387), v330);
                uint64_t v142 = (char *)v140[386];
                int v326 = (char *)v140[385];
              }
              else
              {
                unint64_t v331 = 0;
              }
              unint64_t v414 = &v331[8 * v327];
              *(void *)unint64_t v414 = v141;
              unint64_t v144 = v414 + 8;
              while (v142 != v326)
              {
                uint64_t v415 = *((void *)v142 - 1);
                v142 -= 8;
                *((void *)v414 - 1) = v415;
                v414 -= 8;
              }
              v140[385] = v414;
              v140[386] = v144;
              v140[387] = &v331[8 * v330];
              if (v326) {
                operator delete(v326);
              }
            }
            else
            {
              *(void *)uint64_t v142 = v141;
              unint64_t v144 = v142 + 8;
            }
            v140[386] = v144;
            break;
          case 'a':
            unint64_t v145 = *(void **)a1[2];
            unint64_t v146 = ((unint64_t)*(unsigned __int16 *)(a1[3] + 24) >> 1) & 0x1FFF;
            uint64_t v147 = (unint64_t *)v145[389];
            unint64_t v148 = v145[390];
            if ((unint64_t)v147 >= v148)
            {
              unint64_t v332 = (unint64_t *)v145[388];
              uint64_t v333 = v147 - v332;
              if ((unint64_t)(v333 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v334 = v148 - (void)v332;
              unint64_t v335 = (uint64_t)(v148 - (void)v332) >> 2;
              if (v335 <= v333 + 1) {
                unint64_t v335 = v333 + 1;
              }
              if (v334 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v336 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v336 = v335;
              }
              if (v336)
              {
                uint64_t v337 = (char *)sub_5714((uint64_t)(v145 + 390), v336);
                uint64_t v147 = (unint64_t *)v145[389];
                unint64_t v332 = (unint64_t *)v145[388];
              }
              else
              {
                uint64_t v337 = 0;
              }
              unint64_t v416 = (unint64_t *)&v337[8 * v333];
              unint64_t *v416 = v146;
              unint64_t v149 = v416 + 1;
              while (v147 != v332)
              {
                unint64_t v417 = *--v147;
                *--unint64_t v416 = v417;
              }
              v145[388] = v416;
              v145[389] = v149;
              v145[390] = &v337[8 * v336];
              if (v332) {
                operator delete(v332);
              }
            }
            else
            {
              *uint64_t v147 = v146;
              unint64_t v149 = v147 + 1;
            }
            v145[389] = v149;
            break;
          case 'b':
            unint64_t v150 = *(void **)a1[2];
            uint64_t v151 = *(_WORD *)(a1[3] + 74) & 0x1FFF;
            uint64_t v152 = (char *)v150[392];
            unint64_t v153 = v150[393];
            if ((unint64_t)v152 >= v153)
            {
              unint64_t v338 = (char *)v150[391];
              uint64_t v339 = (v152 - v338) >> 3;
              if ((unint64_t)(v339 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v340 = v153 - (void)v338;
              unint64_t v341 = (uint64_t)(v153 - (void)v338) >> 2;
              if (v341 <= v339 + 1) {
                unint64_t v341 = v339 + 1;
              }
              if (v340 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v342 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v342 = v341;
              }
              if (v342)
              {
                unint64_t v343 = (char *)sub_5714((uint64_t)(v150 + 393), v342);
                uint64_t v152 = (char *)v150[392];
                unint64_t v338 = (char *)v150[391];
              }
              else
              {
                unint64_t v343 = 0;
              }
              unint64_t v418 = &v343[8 * v339];
              *(void *)unint64_t v418 = v151;
              uint64_t v154 = v418 + 8;
              while (v152 != v338)
              {
                uint64_t v419 = *((void *)v152 - 1);
                v152 -= 8;
                *((void *)v418 - 1) = v419;
                v418 -= 8;
              }
              v150[391] = v418;
              v150[392] = v154;
              v150[393] = &v343[8 * v342];
              if (v338) {
                operator delete(v338);
              }
            }
            else
            {
              *(void *)uint64_t v152 = v151;
              uint64_t v154 = v152 + 8;
            }
            v150[392] = v154;
            break;
          case 'c':
            unint64_t v155 = *(void **)a1[2];
            uint64_t v156 = *(_WORD *)(a1[3] + 58) & 0x1FFF;
            unint64_t v157 = (char *)v155[395];
            unint64_t v158 = v155[396];
            if ((unint64_t)v157 >= v158)
            {
              unint64_t v344 = (char *)v155[394];
              uint64_t v345 = (v157 - v344) >> 3;
              if ((unint64_t)(v345 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v346 = v158 - (void)v344;
              unint64_t v347 = (uint64_t)(v158 - (void)v344) >> 2;
              if (v347 <= v345 + 1) {
                unint64_t v347 = v345 + 1;
              }
              if (v346 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v348 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v348 = v347;
              }
              if (v348)
              {
                uint64_t v349 = (char *)sub_5714((uint64_t)(v155 + 396), v348);
                unint64_t v157 = (char *)v155[395];
                unint64_t v344 = (char *)v155[394];
              }
              else
              {
                uint64_t v349 = 0;
              }
              unint64_t v420 = &v349[8 * v345];
              *(void *)unint64_t v420 = v156;
              uint64_t v159 = v420 + 8;
              while (v157 != v344)
              {
                uint64_t v421 = *((void *)v157 - 1);
                v157 -= 8;
                *((void *)v420 - 1) = v421;
                v420 -= 8;
              }
              v155[394] = v420;
              v155[395] = v159;
              v155[396] = &v349[8 * v348];
              if (v344) {
                operator delete(v344);
              }
            }
            else
            {
              *(void *)unint64_t v157 = v156;
              uint64_t v159 = v157 + 8;
            }
            v155[395] = v159;
            break;
          case 'd':
            uint64_t v160 = *(void **)a1[2];
            uint64_t v161 = *(_WORD *)(a1[3] + 42) & 0x1FFF;
            unint64_t v162 = (char *)v160[398];
            unint64_t v163 = v160[399];
            if ((unint64_t)v162 >= v163)
            {
              unint64_t v350 = (char *)v160[397];
              uint64_t v351 = (v162 - v350) >> 3;
              if ((unint64_t)(v351 + 1) >> 61) {
                goto LABEL_594;
              }
              unint64_t v352 = v163 - (void)v350;
              unint64_t v353 = (uint64_t)(v163 - (void)v350) >> 2;
              if (v353 <= v351 + 1) {
                unint64_t v353 = v351 + 1;
              }
              if (v352 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v354 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v354 = v353;
              }
              if (v354)
              {
                int v355 = (char *)sub_5714((uint64_t)(v160 + 399), v354);
                unint64_t v162 = (char *)v160[398];
                unint64_t v350 = (char *)v160[397];
              }
              else
              {
                int v355 = 0;
              }
              unint64_t v422 = &v355[8 * v351];
              *(void *)unint64_t v422 = v161;
              uint64_t v164 = v422 + 8;
              while (v162 != v350)
              {
                uint64_t v423 = *((void *)v162 - 1);
                v162 -= 8;
                *((void *)v422 - 1) = v423;
                v422 -= 8;
              }
              v160[397] = v422;
              v160[398] = v164;
              v160[399] = &v355[8 * v354];
              if (v350) {
                operator delete(v350);
              }
            }
            else
            {
              *(void *)unint64_t v162 = v161;
              uint64_t v164 = v162 + 8;
            }
            v160[398] = v164;
            break;
          case 'e':
            uint64_t v165 = *(void **)a1[2];
            uint64_t v166 = *(_WORD *)(a1[3] + 26) & 0x1FFF;
            unint64_t v167 = (char *)v165[401];
            unint64_t v168 = v165[402];
            if ((unint64_t)v167 >= v168)
            {
              uint64_t v356 = (char *)v165[400];
              uint64_t v357 = (v167 - v356) >> 3;
              if ((unint64_t)(v357 + 1) >> 61) {
LABEL_594:
              }
                sub_566C();
              unint64_t v358 = v168 - (void)v356;
              unint64_t v359 = (uint64_t)(v168 - (void)v356) >> 2;
              if (v359 <= v357 + 1) {
                unint64_t v359 = v357 + 1;
              }
              if (v358 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v360 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v360 = v359;
              }
              if (v360)
              {
                int v361 = (char *)sub_5714((uint64_t)(v165 + 402), v360);
                unint64_t v167 = (char *)v165[401];
                uint64_t v356 = (char *)v165[400];
              }
              else
              {
                int v361 = 0;
              }
              unint64_t v424 = &v361[8 * v357];
              *(void *)unint64_t v424 = v166;
              unint64_t v169 = v424 + 8;
              while (v167 != v356)
              {
                uint64_t v425 = *((void *)v167 - 1);
                v167 -= 8;
                *((void *)v424 - 1) = v425;
                v424 -= 8;
              }
              v165[400] = v424;
              v165[401] = v169;
              v165[402] = &v361[8 * v360];
              if (v356) {
                operator delete(v356);
              }
            }
            else
            {
              *(void *)unint64_t v167 = v166;
              unint64_t v169 = v167 + 8;
            }
            v165[401] = v169;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_91100(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    unint64_t v103 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    unint64_t v102 = *v103;
    uint64_t v104 = (char *)v103[1] - (char *)*v103;
    if (v104)
    {
      unint64_t v105 = v104 >> 2;
      if (v105 <= 1) {
        unint64_t v105 = 1;
      }
      do
      {
        int v106 = *v102++;
        switch(v106)
        {
          case '?':
            uint64_t v107 = *(_WORD *)(a1[3] + 42) & 0x7FFF;
            unint64_t v108 = (void *)(*(void *)a1[2] + 2296);
            goto LABEL_140;
          case '@':
            uint64_t v107 = *(_WORD *)(a1[3] + 40) & 0x7FFF;
            unint64_t v108 = (void *)(*(void *)a1[2] + 2320);
            goto LABEL_140;
          case 'A':
            uint64_t v107 = *(_WORD *)(a1[3] + 38) & 0x7FFF;
            unint64_t v108 = (void *)(*(void *)a1[2] + 2344);
            goto LABEL_140;
          case 'B':
            uint64_t v107 = (*(void *)(a1[3] + 32) >> 33) & 0x7FFFLL;
            unint64_t v108 = (void *)(*(void *)a1[2] + 2368);
            goto LABEL_140;
          case 'C':
            uint64_t v107 = *(void *)(a1[3] + 32) & 0x1FFFFFFFFLL;
            unint64_t v108 = (void *)(*(void *)a1[2] + 2392);
            goto LABEL_140;
          case 'D':
            uint64_t v107 = *(_WORD *)(a1[3] + 44) & 0x7FFF;
            unint64_t v108 = (void *)(*(void *)a1[2] + 2416);
            goto LABEL_140;
          case 'E':
            uint64_t v107 = *(unsigned int *)(a1[3] + 24);
            unint64_t v108 = (void *)(*(void *)a1[2] + 2440);
LABEL_140:
            *(void *)(*v108 - 8) += v107;
            break;
          default:
            break;
        }
        --v105;
      }
      while (v105);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    uint64_t v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case '?':
            uint64_t v10 = *(void **)a1[2];
            uint64_t v11 = *(_WORD *)(a1[3] + 42) & 0x7FFF;
            unsigned int v12 = (char *)v10[287];
            unint64_t v13 = v10[288];
            if ((unint64_t)v12 >= v13)
            {
              uint64_t v46 = (char *)v10[286];
              uint64_t v47 = (v12 - v46) >> 3;
              if ((unint64_t)(v47 + 1) >> 61) {
                goto LABEL_144;
              }
              unint64_t v48 = v13 - (void)v46;
              unint64_t v49 = (uint64_t)(v13 - (void)v46) >> 2;
              if (v49 <= v47 + 1) {
                unint64_t v49 = v47 + 1;
              }
              if (v48 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v50 = v49;
              }
              if (v50)
              {
                uint64_t v51 = (char *)sub_5714((uint64_t)(v10 + 288), v50);
                unsigned int v12 = (char *)v10[287];
                uint64_t v46 = (char *)v10[286];
              }
              else
              {
                uint64_t v51 = 0;
              }
              unint64_t v88 = &v51[8 * v47];
              *(void *)unint64_t v88 = v11;
              unint64_t v14 = v88 + 8;
              while (v12 != v46)
              {
                uint64_t v89 = *((void *)v12 - 1);
                v12 -= 8;
                *((void *)v88 - 1) = v89;
                v88 -= 8;
              }
              v10[286] = v88;
              v10[287] = v14;
              v10[288] = &v51[8 * v50];
              if (v46) {
                operator delete(v46);
              }
            }
            else
            {
              *(void *)unsigned int v12 = v11;
              unint64_t v14 = v12 + 8;
            }
            v10[287] = v14;
            break;
          case '@':
            unint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_WORD *)(a1[3] + 40) & 0x7FFF;
            uint64_t v17 = (char *)v15[290];
            unint64_t v18 = v15[291];
            if ((unint64_t)v17 >= v18)
            {
              unint64_t v52 = (char *)v15[289];
              uint64_t v53 = (v17 - v52) >> 3;
              if ((unint64_t)(v53 + 1) >> 61) {
                goto LABEL_144;
              }
              unint64_t v54 = v18 - (void)v52;
              unint64_t v55 = (uint64_t)(v18 - (void)v52) >> 2;
              if (v55 <= v53 + 1) {
                unint64_t v55 = v53 + 1;
              }
              if (v54 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v56 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v56 = v55;
              }
              if (v56)
              {
                unint64_t v57 = (char *)sub_5714((uint64_t)(v15 + 291), v56);
                uint64_t v17 = (char *)v15[290];
                unint64_t v52 = (char *)v15[289];
              }
              else
              {
                unint64_t v57 = 0;
              }
              unint64_t v90 = &v57[8 * v53];
              *(void *)unint64_t v90 = v16;
              unint64_t v19 = v90 + 8;
              while (v17 != v52)
              {
                uint64_t v91 = *((void *)v17 - 1);
                v17 -= 8;
                *((void *)v90 - 1) = v91;
                v90 -= 8;
              }
              v15[289] = v90;
              v15[290] = v19;
              v15[291] = &v57[8 * v56];
              if (v52) {
                operator delete(v52);
              }
            }
            else
            {
              *(void *)uint64_t v17 = v16;
              unint64_t v19 = v17 + 8;
            }
            v15[290] = v19;
            break;
          case 'A':
            uint64_t v20 = *(void **)a1[2];
            uint64_t v21 = *(_WORD *)(a1[3] + 38) & 0x7FFF;
            uint64_t v22 = (char *)v20[293];
            unint64_t v23 = v20[294];
            if ((unint64_t)v22 >= v23)
            {
              unint64_t v58 = (char *)v20[292];
              uint64_t v59 = (v22 - v58) >> 3;
              if ((unint64_t)(v59 + 1) >> 61) {
                goto LABEL_144;
              }
              unint64_t v60 = v23 - (void)v58;
              unint64_t v61 = (uint64_t)(v23 - (void)v58) >> 2;
              if (v61 <= v59 + 1) {
                unint64_t v61 = v59 + 1;
              }
              if (v60 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v62 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v62 = v61;
              }
              if (v62)
              {
                unint64_t v63 = (char *)sub_5714((uint64_t)(v20 + 294), v62);
                uint64_t v22 = (char *)v20[293];
                unint64_t v58 = (char *)v20[292];
              }
              else
              {
                unint64_t v63 = 0;
              }
              uint64_t v92 = &v63[8 * v59];
              *(void *)uint64_t v92 = v21;
              unint64_t v24 = v92 + 8;
              while (v22 != v58)
              {
                uint64_t v93 = *((void *)v22 - 1);
                v22 -= 8;
                *((void *)v92 - 1) = v93;
                v92 -= 8;
              }
              v20[292] = v92;
              v20[293] = v24;
              v20[294] = &v63[8 * v62];
              if (v58) {
                operator delete(v58);
              }
            }
            else
            {
              *(void *)uint64_t v22 = v21;
              unint64_t v24 = v22 + 8;
            }
            v20[293] = v24;
            break;
          case 'B':
            uint64_t v25 = *(void **)a1[2];
            uint64_t v26 = (*(void *)(a1[3] + 32) >> 33) & 0x7FFFLL;
            uint64_t v27 = (uint64_t *)v25[296];
            unint64_t v28 = v25[297];
            if ((unint64_t)v27 >= v28)
            {
              unint64_t v64 = (uint64_t *)v25[295];
              uint64_t v65 = v27 - v64;
              if ((unint64_t)(v65 + 1) >> 61) {
                goto LABEL_144;
              }
              unint64_t v66 = v28 - (void)v64;
              unint64_t v67 = (uint64_t)(v28 - (void)v64) >> 2;
              if (v67 <= v65 + 1) {
                unint64_t v67 = v65 + 1;
              }
              if (v66 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v68 = v67;
              }
              if (v68)
              {
                unint64_t v69 = (char *)sub_5714((uint64_t)(v25 + 297), v68);
                uint64_t v27 = (uint64_t *)v25[296];
                unint64_t v64 = (uint64_t *)v25[295];
              }
              else
              {
                unint64_t v69 = 0;
              }
              unint64_t v94 = (uint64_t *)&v69[8 * v65];
              uint64_t *v94 = v26;
              unint64_t v29 = v94 + 1;
              while (v27 != v64)
              {
                uint64_t v95 = *--v27;
                *--unint64_t v94 = v95;
              }
              v25[295] = v94;
              v25[296] = v29;
              v25[297] = &v69[8 * v68];
              if (v64) {
                operator delete(v64);
              }
            }
            else
            {
              *uint64_t v27 = v26;
              unint64_t v29 = v27 + 1;
            }
            v25[296] = v29;
            break;
          case 'C':
            unint64_t v30 = *(void **)a1[2];
            uint64_t v31 = *(void *)(a1[3] + 32) & 0x1FFFFFFFFLL;
            unint64_t v32 = (uint64_t *)v30[299];
            unint64_t v33 = v30[300];
            if ((unint64_t)v32 >= v33)
            {
              uint64_t v70 = (uint64_t *)v30[298];
              uint64_t v71 = v32 - v70;
              if ((unint64_t)(v71 + 1) >> 61) {
                goto LABEL_144;
              }
              unint64_t v72 = v33 - (void)v70;
              unint64_t v73 = (uint64_t)(v33 - (void)v70) >> 2;
              if (v73 <= v71 + 1) {
                unint64_t v73 = v71 + 1;
              }
              if (v72 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v74 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v74 = v73;
              }
              if (v74)
              {
                unint64_t v75 = (char *)sub_5714((uint64_t)(v30 + 300), v74);
                unint64_t v32 = (uint64_t *)v30[299];
                uint64_t v70 = (uint64_t *)v30[298];
              }
              else
              {
                unint64_t v75 = 0;
              }
              uint64_t v96 = (uint64_t *)&v75[8 * v71];
              uint64_t *v96 = v31;
              unint64_t v34 = v96 + 1;
              while (v32 != v70)
              {
                uint64_t v97 = *--v32;
                *--uint64_t v96 = v97;
              }
              v30[298] = v96;
              v30[299] = v34;
              v30[300] = &v75[8 * v74];
              if (v70) {
                operator delete(v70);
              }
            }
            else
            {
              *unint64_t v32 = v31;
              unint64_t v34 = v32 + 1;
            }
            v30[299] = v34;
            break;
          case 'D':
            unint64_t v35 = *(void **)a1[2];
            uint64_t v36 = *(_WORD *)(a1[3] + 44) & 0x7FFF;
            uint64_t v37 = (char *)v35[302];
            unint64_t v38 = v35[303];
            if ((unint64_t)v37 >= v38)
            {
              uint64_t v76 = (char *)v35[301];
              uint64_t v77 = (v37 - v76) >> 3;
              if ((unint64_t)(v77 + 1) >> 61) {
                goto LABEL_144;
              }
              unint64_t v78 = v38 - (void)v76;
              unint64_t v79 = (uint64_t)(v38 - (void)v76) >> 2;
              if (v79 <= v77 + 1) {
                unint64_t v79 = v77 + 1;
              }
              if (v78 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v80 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v80 = v79;
              }
              if (v80)
              {
                uint64_t v81 = (char *)sub_5714((uint64_t)(v35 + 303), v80);
                uint64_t v37 = (char *)v35[302];
                uint64_t v76 = (char *)v35[301];
              }
              else
              {
                uint64_t v81 = 0;
              }
              unint64_t v98 = &v81[8 * v77];
              *(void *)unint64_t v98 = v36;
              unint64_t v39 = v98 + 8;
              while (v37 != v76)
              {
                uint64_t v99 = *((void *)v37 - 1);
                v37 -= 8;
                *((void *)v98 - 1) = v99;
                v98 -= 8;
              }
              v35[301] = v98;
              v35[302] = v39;
              v35[303] = &v81[8 * v80];
              if (v76) {
                operator delete(v76);
              }
            }
            else
            {
              *(void *)uint64_t v37 = v36;
              unint64_t v39 = v37 + 8;
            }
            v35[302] = v39;
            break;
          case 'E':
            uint64_t v40 = a1[2];
            uint64_t v41 = *(void **)v40;
            uint64_t v42 = *(unsigned int *)(a1[3] + 24);
            unint64_t v43 = *(char **)(*(void *)v40 + 2440);
            unint64_t v44 = *(void *)(*(void *)v40 + 2448);
            if ((unint64_t)v43 >= v44)
            {
              unint64_t v82 = (char *)v41[304];
              uint64_t v83 = (v43 - v82) >> 3;
              if ((unint64_t)(v83 + 1) >> 61) {
LABEL_144:
              }
                sub_566C();
              unint64_t v84 = v44 - (void)v82;
              unint64_t v85 = (uint64_t)(v44 - (void)v82) >> 2;
              if (v85 <= v83 + 1) {
                unint64_t v85 = v83 + 1;
              }
              if (v84 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v86 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v86 = v85;
              }
              if (v86)
              {
                unint64_t v87 = (char *)sub_5714((uint64_t)(v41 + 306), v86);
                unint64_t v43 = (char *)v41[305];
                unint64_t v82 = (char *)v41[304];
              }
              else
              {
                unint64_t v87 = 0;
              }
              unint64_t v100 = &v87[8 * v83];
              *(void *)unint64_t v100 = v42;
              unint64_t v45 = v100 + 8;
              while (v43 != v82)
              {
                uint64_t v101 = *((void *)v43 - 1);
                v43 -= 8;
                *((void *)v100 - 1) = v101;
                v100 -= 8;
              }
              v41[304] = v100;
              v41[305] = v45;
              v41[306] = &v87[8 * v86];
              if (v82) {
                operator delete(v82);
              }
            }
            else
            {
              *(void *)unint64_t v43 = v42;
              unint64_t v45 = v43 + 8;
            }
            v41[305] = v45;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_91868(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    unint64_t v38 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v37 = *v38;
    uint64_t v39 = (char *)v38[1] - (char *)*v38;
    if (!v39) {
      goto LABEL_54;
    }
    unint64_t v40 = v39 >> 2;
    if (v40 <= 1) {
      unint64_t v40 = 1;
    }
    while (1)
    {
      int v42 = *v37++;
      int v41 = v42;
      if (v42 == 62) {
        break;
      }
      if (v41 == 61)
      {
        unint64_t v43 = (_WORD *)(a1[3] + 26);
        unint64_t v44 = (void *)(*(void *)a1[2] + 2248);
LABEL_52:
        *(void *)(*v44 - 8) += *v43 & 0x7FFF;
      }
      if (!--v40) {
        goto LABEL_54;
      }
    }
    unint64_t v43 = (_WORD *)(a1[3] + 24);
    unint64_t v44 = (void *)(*(void *)a1[2] + 2272);
    goto LABEL_52;
  }
  if (*a2) {
    return;
  }
  uint64_t v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
  uint64_t v6 = v5[1] - *v5;
  if (v6)
  {
    uint64_t v7 = 0;
    unint64_t v8 = v6 >> 2;
    if (v8 <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = v8;
    }
    do
    {
      int v10 = *(_DWORD *)(*v5 + 4 * v7);
      if (v10 == 62)
      {
        uint64_t v16 = *(void **)a1[2];
        uint64_t v17 = *(_WORD *)(a1[3] + 24) & 0x7FFF;
        unint64_t v18 = (char *)v16[284];
        unint64_t v19 = v16[285];
        if ((unint64_t)v18 >= v19)
        {
          uint64_t v27 = (char *)v16[283];
          uint64_t v28 = (v18 - v27) >> 3;
          if ((unint64_t)(v28 + 1) >> 61) {
LABEL_56:
          }
            sub_566C();
          unint64_t v29 = v19 - (void)v27;
          unint64_t v30 = (uint64_t)(v19 - (void)v27) >> 2;
          if (v30 <= v28 + 1) {
            unint64_t v30 = v28 + 1;
          }
          if (v29 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v31 = v30;
          }
          if (v31)
          {
            unint64_t v32 = (char *)sub_5714((uint64_t)(v16 + 285), v31);
            unint64_t v18 = (char *)v16[284];
            uint64_t v27 = (char *)v16[283];
          }
          else
          {
            unint64_t v32 = 0;
          }
          unint64_t v35 = &v32[8 * v28];
          *(void *)unint64_t v35 = v17;
          uint64_t v20 = v35 + 8;
          while (v18 != v27)
          {
            uint64_t v36 = *((void *)v18 - 1);
            v18 -= 8;
            *((void *)v35 - 1) = v36;
            v35 -= 8;
          }
          v16[283] = v35;
          v16[284] = v20;
          v16[285] = &v32[8 * v31];
          if (v27) {
            operator delete(v27);
          }
        }
        else
        {
          *(void *)unint64_t v18 = v17;
          uint64_t v20 = v18 + 8;
        }
        v16[284] = v20;
      }
      else if (v10 == 61)
      {
        uint64_t v11 = *(void **)a1[2];
        uint64_t v12 = *(_WORD *)(a1[3] + 26) & 0x7FFF;
        unint64_t v13 = (char *)v11[281];
        unint64_t v14 = v11[282];
        if ((unint64_t)v13 >= v14)
        {
          uint64_t v21 = (char *)v11[280];
          uint64_t v22 = (v13 - v21) >> 3;
          if ((unint64_t)(v22 + 1) >> 61) {
            goto LABEL_56;
          }
          unint64_t v23 = v14 - (void)v21;
          unint64_t v24 = (uint64_t)(v14 - (void)v21) >> 2;
          if (v24 <= v22 + 1) {
            unint64_t v24 = v22 + 1;
          }
          if (v23 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v25 = v24;
          }
          if (v25)
          {
            uint64_t v26 = (char *)sub_5714((uint64_t)(v11 + 282), v25);
            unint64_t v13 = (char *)v11[281];
            uint64_t v21 = (char *)v11[280];
          }
          else
          {
            uint64_t v26 = 0;
          }
          unint64_t v33 = &v26[8 * v22];
          *(void *)unint64_t v33 = v12;
          unint64_t v15 = v33 + 8;
          while (v13 != v21)
          {
            uint64_t v34 = *((void *)v13 - 1);
            v13 -= 8;
            *((void *)v33 - 1) = v34;
            v33 -= 8;
          }
          v11[280] = v33;
          v11[281] = v15;
          v11[282] = &v26[8 * v25];
          if (v21) {
            operator delete(v21);
          }
        }
        else
        {
          *(void *)unint64_t v13 = v12;
          unint64_t v15 = v13 + 8;
        }
        v11[281] = v15;
      }
      ++v7;
    }
    while (v7 != v9);
  }
LABEL_54:
  *a2 = 1;
}

void sub_91B30(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    unint64_t v118 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v117 = *v118;
    uint64_t v119 = (char *)v118[1] - (char *)*v118;
    if (v119)
    {
      unint64_t v120 = v119 >> 2;
      if (v120 <= 1) {
        unint64_t v120 = 1;
      }
      do
      {
        int v121 = *v117++;
        switch(v121)
        {
          case 121:
            uint64_t v122 = *(_WORD *)(a1[3] + 24) & 0x7FFF;
            unint64_t v123 = (void *)(*(void *)a1[2] + 3688);
            goto LABEL_158;
          case 122:
            uint64_t v122 = *(_DWORD *)(a1[3] + 40) & 0x1FFFF;
            unint64_t v123 = (void *)(*(void *)a1[2] + 3712);
            goto LABEL_158;
          case 123:
            uint64_t v122 = *(_WORD *)(a1[3] + 26) & 0x7FFF;
            unint64_t v123 = (void *)(*(void *)a1[2] + 3736);
            goto LABEL_158;
          case 124:
            uint64_t v122 = *(_DWORD *)(a1[3] + 36) & 0x3FFFF;
            unint64_t v123 = (void *)(*(void *)a1[2] + 3760);
            goto LABEL_158;
          case 125:
            uint64_t v122 = *(_DWORD *)(a1[3] + 32) & 0x3FFFF;
            unint64_t v123 = (void *)(*(void *)a1[2] + 3784);
            goto LABEL_158;
          case 126:
            uint64_t v122 = *(unsigned __int16 *)(a1[3] + 46);
            unint64_t v123 = (void *)(*(void *)a1[2] + 3808);
            goto LABEL_158;
          case 127:
            uint64_t v122 = *(unsigned __int16 *)(a1[3] + 44);
            unint64_t v123 = (void *)(*(void *)a1[2] + 3832);
            goto LABEL_158;
          case 128:
            uint64_t v122 = *(unsigned __int16 *)(a1[3] + 28);
            unint64_t v123 = (void *)(*(void *)a1[2] + 3856);
LABEL_158:
            *(void *)(*v123 - 8) += v122;
            break;
          default:
            break;
        }
        --v120;
      }
      while (v120);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    uint64_t v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0x79:
            int v10 = *(void **)a1[2];
            uint64_t v11 = *(_WORD *)(a1[3] + 24) & 0x7FFF;
            uint64_t v12 = (char *)v10[461];
            unint64_t v13 = v10[462];
            if ((unint64_t)v12 >= v13)
            {
              uint64_t v53 = (char *)v10[460];
              uint64_t v54 = (v12 - v53) >> 3;
              if ((unint64_t)(v54 + 1) >> 61) {
                goto LABEL_162;
              }
              unint64_t v55 = v13 - (void)v53;
              unint64_t v56 = (uint64_t)(v13 - (void)v53) >> 2;
              if (v56 <= v54 + 1) {
                unint64_t v56 = v54 + 1;
              }
              if (v55 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v57 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v57 = v56;
              }
              if (v57)
              {
                unint64_t v58 = (char *)sub_5714((uint64_t)(v10 + 462), v57);
                uint64_t v12 = (char *)v10[461];
                uint64_t v53 = (char *)v10[460];
              }
              else
              {
                unint64_t v58 = 0;
              }
              uint64_t v101 = &v58[8 * v54];
              *(void *)uint64_t v101 = v11;
              unint64_t v14 = v101 + 8;
              while (v12 != v53)
              {
                uint64_t v102 = *((void *)v12 - 1);
                v12 -= 8;
                *((void *)v101 - 1) = v102;
                v101 -= 8;
              }
              v10[460] = v101;
              v10[461] = v14;
              v10[462] = &v58[8 * v57];
              if (v53) {
                operator delete(v53);
              }
            }
            else
            {
              *(void *)uint64_t v12 = v11;
              unint64_t v14 = v12 + 8;
            }
            v10[461] = v14;
            break;
          case 0x7A:
            unint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_DWORD *)(a1[3] + 40) & 0x1FFFFLL;
            uint64_t v17 = (uint64_t *)v15[464];
            unint64_t v18 = v15[465];
            if ((unint64_t)v17 >= v18)
            {
              uint64_t v59 = (uint64_t *)v15[463];
              uint64_t v60 = v17 - v59;
              if ((unint64_t)(v60 + 1) >> 61) {
                goto LABEL_162;
              }
              unint64_t v61 = v18 - (void)v59;
              unint64_t v62 = (uint64_t)(v18 - (void)v59) >> 2;
              if (v62 <= v60 + 1) {
                unint64_t v62 = v60 + 1;
              }
              if (v61 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v63 = v62;
              }
              if (v63)
              {
                unint64_t v64 = (char *)sub_5714((uint64_t)(v15 + 465), v63);
                uint64_t v17 = (uint64_t *)v15[464];
                uint64_t v59 = (uint64_t *)v15[463];
              }
              else
              {
                unint64_t v64 = 0;
              }
              unint64_t v103 = (uint64_t *)&v64[8 * v60];
              uint64_t *v103 = v16;
              unint64_t v19 = v103 + 1;
              while (v17 != v59)
              {
                uint64_t v104 = *--v17;
                *--unint64_t v103 = v104;
              }
              v15[463] = v103;
              v15[464] = v19;
              v15[465] = &v64[8 * v63];
              if (v59) {
                operator delete(v59);
              }
            }
            else
            {
              *uint64_t v17 = v16;
              unint64_t v19 = v17 + 1;
            }
            v15[464] = v19;
            break;
          case 0x7B:
            uint64_t v20 = *(void **)a1[2];
            uint64_t v21 = *(_WORD *)(a1[3] + 26) & 0x7FFF;
            uint64_t v22 = (char *)v20[467];
            unint64_t v23 = v20[468];
            if ((unint64_t)v22 >= v23)
            {
              uint64_t v65 = (char *)v20[466];
              uint64_t v66 = (v22 - v65) >> 3;
              if ((unint64_t)(v66 + 1) >> 61) {
                goto LABEL_162;
              }
              unint64_t v67 = v23 - (void)v65;
              unint64_t v68 = (uint64_t)(v23 - (void)v65) >> 2;
              if (v68 <= v66 + 1) {
                unint64_t v68 = v66 + 1;
              }
              if (v67 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v69 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v69 = v68;
              }
              if (v69)
              {
                uint64_t v70 = (char *)sub_5714((uint64_t)(v20 + 468), v69);
                uint64_t v22 = (char *)v20[467];
                uint64_t v65 = (char *)v20[466];
              }
              else
              {
                uint64_t v70 = 0;
              }
              unint64_t v105 = &v70[8 * v66];
              *(void *)unint64_t v105 = v21;
              unint64_t v24 = v105 + 8;
              while (v22 != v65)
              {
                uint64_t v106 = *((void *)v22 - 1);
                v22 -= 8;
                *((void *)v105 - 1) = v106;
                v105 -= 8;
              }
              v20[466] = v105;
              v20[467] = v24;
              v20[468] = &v70[8 * v69];
              if (v65) {
                operator delete(v65);
              }
            }
            else
            {
              *(void *)uint64_t v22 = v21;
              unint64_t v24 = v22 + 8;
            }
            v20[467] = v24;
            break;
          case 0x7C:
            unint64_t v25 = *(void **)a1[2];
            uint64_t v26 = *(_DWORD *)(a1[3] + 36) & 0x3FFFFLL;
            uint64_t v27 = (uint64_t *)v25[470];
            unint64_t v28 = v25[471];
            if ((unint64_t)v27 >= v28)
            {
              uint64_t v71 = (uint64_t *)v25[469];
              uint64_t v72 = v27 - v71;
              if ((unint64_t)(v72 + 1) >> 61) {
                goto LABEL_162;
              }
              unint64_t v73 = v28 - (void)v71;
              unint64_t v74 = (uint64_t)(v28 - (void)v71) >> 2;
              if (v74 <= v72 + 1) {
                unint64_t v74 = v72 + 1;
              }
              if (v73 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v75 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v75 = v74;
              }
              if (v75)
              {
                uint64_t v76 = (char *)sub_5714((uint64_t)(v25 + 471), v75);
                uint64_t v27 = (uint64_t *)v25[470];
                uint64_t v71 = (uint64_t *)v25[469];
              }
              else
              {
                uint64_t v76 = 0;
              }
              uint64_t v107 = (uint64_t *)&v76[8 * v72];
              *uint64_t v107 = v26;
              unint64_t v29 = v107 + 1;
              while (v27 != v71)
              {
                uint64_t v108 = *--v27;
                *--uint64_t v107 = v108;
              }
              v25[469] = v107;
              v25[470] = v29;
              v25[471] = &v76[8 * v75];
              if (v71) {
                operator delete(v71);
              }
            }
            else
            {
              *uint64_t v27 = v26;
              unint64_t v29 = v27 + 1;
            }
            v25[470] = v29;
            break;
          case 0x7D:
            unint64_t v30 = *(void **)a1[2];
            uint64_t v31 = *(_DWORD *)(a1[3] + 32) & 0x3FFFFLL;
            unint64_t v32 = (uint64_t *)v30[473];
            unint64_t v33 = v30[474];
            if ((unint64_t)v32 >= v33)
            {
              uint64_t v77 = (uint64_t *)v30[472];
              uint64_t v78 = v32 - v77;
              if ((unint64_t)(v78 + 1) >> 61) {
                goto LABEL_162;
              }
              unint64_t v79 = v33 - (void)v77;
              unint64_t v80 = (uint64_t)(v33 - (void)v77) >> 2;
              if (v80 <= v78 + 1) {
                unint64_t v80 = v78 + 1;
              }
              if (v79 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v81 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v81 = v80;
              }
              if (v81)
              {
                unint64_t v82 = (char *)sub_5714((uint64_t)(v30 + 474), v81);
                unint64_t v32 = (uint64_t *)v30[473];
                uint64_t v77 = (uint64_t *)v30[472];
              }
              else
              {
                unint64_t v82 = 0;
              }
              unint64_t v109 = (uint64_t *)&v82[8 * v78];
              uint64_t *v109 = v31;
              uint64_t v34 = v109 + 1;
              while (v32 != v77)
              {
                uint64_t v110 = *--v32;
                *--unint64_t v109 = v110;
              }
              v30[472] = v109;
              v30[473] = v34;
              v30[474] = &v82[8 * v81];
              if (v77) {
                operator delete(v77);
              }
            }
            else
            {
              *unint64_t v32 = v31;
              uint64_t v34 = v32 + 1;
            }
            v30[473] = v34;
            break;
          case 0x7E:
            uint64_t v35 = a1[2];
            uint64_t v36 = *(void **)v35;
            uint64_t v37 = *(unsigned __int16 *)(a1[3] + 46);
            unint64_t v38 = *(char **)(*(void *)v35 + 3808);
            unint64_t v39 = *(void *)(*(void *)v35 + 3816);
            if ((unint64_t)v38 >= v39)
            {
              uint64_t v83 = (char *)v36[475];
              uint64_t v84 = (v38 - v83) >> 3;
              if ((unint64_t)(v84 + 1) >> 61) {
                goto LABEL_162;
              }
              unint64_t v85 = v39 - (void)v83;
              unint64_t v86 = (uint64_t)(v39 - (void)v83) >> 2;
              if (v86 <= v84 + 1) {
                unint64_t v86 = v84 + 1;
              }
              if (v85 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v87 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v87 = v86;
              }
              if (v87)
              {
                unint64_t v88 = (char *)sub_5714((uint64_t)(v36 + 477), v87);
                unint64_t v38 = (char *)v36[476];
                uint64_t v83 = (char *)v36[475];
              }
              else
              {
                unint64_t v88 = 0;
              }
              uint64_t v111 = &v88[8 * v84];
              *(void *)uint64_t v111 = v37;
              unint64_t v40 = v111 + 8;
              while (v38 != v83)
              {
                uint64_t v112 = *((void *)v38 - 1);
                v38 -= 8;
                *((void *)v111 - 1) = v112;
                v111 -= 8;
              }
              v36[475] = v111;
              v36[476] = v40;
              v36[477] = &v88[8 * v87];
              if (v83) {
                operator delete(v83);
              }
            }
            else
            {
              *(void *)unint64_t v38 = v37;
              unint64_t v40 = v38 + 8;
            }
            v36[476] = v40;
            break;
          case 0x7F:
            uint64_t v41 = a1[2];
            int v42 = *(void **)v41;
            uint64_t v43 = *(unsigned __int16 *)(a1[3] + 44);
            unint64_t v44 = *(char **)(*(void *)v41 + 3832);
            unint64_t v45 = *(void *)(*(void *)v41 + 3840);
            if ((unint64_t)v44 >= v45)
            {
              uint64_t v89 = (char *)v42[478];
              uint64_t v90 = (v44 - v89) >> 3;
              if ((unint64_t)(v90 + 1) >> 61) {
                goto LABEL_162;
              }
              unint64_t v91 = v45 - (void)v89;
              unint64_t v92 = (uint64_t)(v45 - (void)v89) >> 2;
              if (v92 <= v90 + 1) {
                unint64_t v92 = v90 + 1;
              }
              if (v91 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v93 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v93 = v92;
              }
              if (v93)
              {
                unint64_t v94 = (char *)sub_5714((uint64_t)(v42 + 480), v93);
                unint64_t v44 = (char *)v42[479];
                uint64_t v89 = (char *)v42[478];
              }
              else
              {
                unint64_t v94 = 0;
              }
              unint64_t v113 = &v94[8 * v90];
              *(void *)unint64_t v113 = v43;
              uint64_t v46 = v113 + 8;
              while (v44 != v89)
              {
                uint64_t v114 = *((void *)v44 - 1);
                v44 -= 8;
                *((void *)v113 - 1) = v114;
                v113 -= 8;
              }
              v42[478] = v113;
              v42[479] = v46;
              v42[480] = &v94[8 * v93];
              if (v89) {
                operator delete(v89);
              }
            }
            else
            {
              *(void *)unint64_t v44 = v43;
              uint64_t v46 = v44 + 8;
            }
            v42[479] = v46;
            break;
          case 0x80:
            uint64_t v47 = a1[2];
            unint64_t v48 = *(void **)v47;
            uint64_t v49 = *(unsigned __int16 *)(a1[3] + 28);
            unint64_t v50 = *(char **)(*(void *)v47 + 3856);
            unint64_t v51 = *(void *)(*(void *)v47 + 3864);
            if ((unint64_t)v50 >= v51)
            {
              uint64_t v95 = (char *)v48[481];
              uint64_t v96 = (v50 - v95) >> 3;
              if ((unint64_t)(v96 + 1) >> 61) {
LABEL_162:
              }
                sub_566C();
              unint64_t v97 = v51 - (void)v95;
              unint64_t v98 = (uint64_t)(v51 - (void)v95) >> 2;
              if (v98 <= v96 + 1) {
                unint64_t v98 = v96 + 1;
              }
              if (v97 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v99 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v99 = v98;
              }
              if (v99)
              {
                unint64_t v100 = (char *)sub_5714((uint64_t)(v48 + 483), v99);
                unint64_t v50 = (char *)v48[482];
                uint64_t v95 = (char *)v48[481];
              }
              else
              {
                unint64_t v100 = 0;
              }
              unint64_t v115 = &v100[8 * v96];
              *(void *)unint64_t v115 = v49;
              unint64_t v52 = v115 + 8;
              while (v50 != v95)
              {
                uint64_t v116 = *((void *)v50 - 1);
                v50 -= 8;
                *((void *)v115 - 1) = v116;
                v115 -= 8;
              }
              v48[481] = v115;
              v48[482] = v52;
              v48[483] = &v100[8 * v99];
              if (v95) {
                operator delete(v95);
              }
            }
            else
            {
              *(void *)unint64_t v50 = v49;
              unint64_t v52 = v50 + 8;
            }
            v48[482] = v52;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_92368(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    unint64_t v208 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v207 = *v208;
    uint64_t v209 = (char *)v208[1] - (char *)*v208;
    if (v209)
    {
      unint64_t v210 = v209 >> 2;
      if (v210 <= 1) {
        unint64_t v210 = 1;
      }
      do
      {
        int v211 = *v207++;
        switch(v211)
        {
          case 'f':
            unint64_t v212 = (unint64_t)*(unsigned int *)(a1[3] + 40) >> 17;
            uint64_t v213 = (void *)(*(void *)a1[2] + 3232);
            goto LABEL_284;
          case 'g':
            unint64_t v212 = *(_DWORD *)(a1[3] + 40) & 0x1FFFF;
            uint64_t v213 = (void *)(*(void *)a1[2] + 3256);
            goto LABEL_284;
          case 'h':
            unint64_t v212 = *(_WORD *)(a1[3] + 28) & 0x7FFF;
            uint64_t v213 = (void *)(*(void *)a1[2] + 3280);
            goto LABEL_284;
          case 'i':
            unint64_t v212 = *(_WORD *)(a1[3] + 30) & 0x7FFF;
            uint64_t v213 = (void *)(*(void *)a1[2] + 3304);
            goto LABEL_284;
          case 'j':
            unint64_t v212 = *(_WORD *)(a1[3] + 24) & 0x7FFF;
            uint64_t v213 = (void *)(*(void *)a1[2] + 3328);
            goto LABEL_284;
          case 'k':
            unint64_t v212 = *(_WORD *)(a1[3] + 26) & 0x7FFF;
            uint64_t v213 = (void *)(*(void *)a1[2] + 3352);
            goto LABEL_284;
          case 'l':
            unint64_t v212 = *(unsigned __int16 *)(a1[3] + 60);
            uint64_t v213 = (void *)(*(void *)a1[2] + 3376);
            goto LABEL_284;
          case 'm':
            unint64_t v212 = *(_DWORD *)(a1[3] + 52) & 0x1FFFF;
            uint64_t v213 = (void *)(*(void *)a1[2] + 3400);
            goto LABEL_284;
          case 'n':
            unint64_t v212 = *(_DWORD *)(a1[3] + 48) & 0x1FFFF;
            uint64_t v213 = (void *)(*(void *)a1[2] + 3424);
            goto LABEL_284;
          case 'o':
            unint64_t v212 = *(_DWORD *)(a1[3] + 56) & 0x1FFFF;
            uint64_t v213 = (void *)(*(void *)a1[2] + 3448);
            goto LABEL_284;
          case 'p':
            unint64_t v212 = *(_WORD *)(a1[3] + 46) & 0x3FFF;
            uint64_t v213 = (void *)(*(void *)a1[2] + 3472);
            goto LABEL_284;
          case 'q':
            unint64_t v212 = *(_WORD *)(a1[3] + 44) & 0x3FFF;
            uint64_t v213 = (void *)(*(void *)a1[2] + 3496);
            goto LABEL_284;
          case 'r':
            unint64_t v212 = *(unsigned __int16 *)(a1[3] + 62);
            uint64_t v213 = (void *)(*(void *)a1[2] + 3520);
            goto LABEL_284;
          case 's':
            unint64_t v212 = *(_DWORD *)(a1[3] + 32) & 0x1FFFF;
            uint64_t v213 = (void *)(*(void *)a1[2] + 3544);
            goto LABEL_284;
          case 't':
            unint64_t v212 = *(_DWORD *)(a1[3] + 36) & 0x1FFFF;
            uint64_t v213 = (void *)(*(void *)a1[2] + 3568);
LABEL_284:
            *(void *)(*v213 - 8) += v212;
            break;
          default:
            break;
        }
        --v210;
      }
      while (v210);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    uint64_t v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 'f':
            int v10 = *(void **)a1[2];
            unint64_t v11 = (unint64_t)*(unsigned int *)(a1[3] + 40) >> 17;
            uint64_t v12 = (unint64_t *)v10[404];
            unint64_t v13 = v10[405];
            if ((unint64_t)v12 >= v13)
            {
              unint64_t v87 = (unint64_t *)v10[403];
              uint64_t v88 = v12 - v87;
              if ((unint64_t)(v88 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v89 = v13 - (void)v87;
              unint64_t v90 = (uint64_t)(v13 - (void)v87) >> 2;
              if (v90 <= v88 + 1) {
                unint64_t v90 = v88 + 1;
              }
              if (v89 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v91 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v91 = v90;
              }
              if (v91)
              {
                unint64_t v92 = (char *)sub_5714((uint64_t)(v10 + 405), v91);
                uint64_t v12 = (unint64_t *)v10[404];
                unint64_t v87 = (unint64_t *)v10[403];
              }
              else
              {
                unint64_t v92 = 0;
              }
              uint64_t v177 = (unint64_t *)&v92[8 * v88];
              unint64_t *v177 = v11;
              unint64_t v14 = v177 + 1;
              while (v12 != v87)
              {
                unint64_t v178 = *--v12;
                *--uint64_t v177 = v178;
              }
              v10[403] = v177;
              v10[404] = v14;
              v10[405] = &v92[8 * v91];
              if (v87) {
                operator delete(v87);
              }
            }
            else
            {
              unint64_t *v12 = v11;
              unint64_t v14 = v12 + 1;
            }
            v10[404] = v14;
            break;
          case 'g':
            unint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_DWORD *)(a1[3] + 40) & 0x1FFFFLL;
            uint64_t v17 = (uint64_t *)v15[407];
            unint64_t v18 = v15[408];
            if ((unint64_t)v17 >= v18)
            {
              unint64_t v93 = (uint64_t *)v15[406];
              uint64_t v94 = v17 - v93;
              if ((unint64_t)(v94 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v95 = v18 - (void)v93;
              unint64_t v96 = (uint64_t)(v18 - (void)v93) >> 2;
              if (v96 <= v94 + 1) {
                unint64_t v96 = v94 + 1;
              }
              if (v95 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v97 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v97 = v96;
              }
              if (v97)
              {
                unint64_t v98 = (char *)sub_5714((uint64_t)(v15 + 408), v97);
                uint64_t v17 = (uint64_t *)v15[407];
                unint64_t v93 = (uint64_t *)v15[406];
              }
              else
              {
                unint64_t v98 = 0;
              }
              unint64_t v179 = (uint64_t *)&v98[8 * v94];
              uint64_t *v179 = v16;
              unint64_t v19 = v179 + 1;
              while (v17 != v93)
              {
                uint64_t v180 = *--v17;
                *--unint64_t v179 = v180;
              }
              v15[406] = v179;
              v15[407] = v19;
              v15[408] = &v98[8 * v97];
              if (v93) {
                operator delete(v93);
              }
            }
            else
            {
              *uint64_t v17 = v16;
              unint64_t v19 = v17 + 1;
            }
            v15[407] = v19;
            break;
          case 'h':
            uint64_t v20 = *(void **)a1[2];
            uint64_t v21 = *(_WORD *)(a1[3] + 28) & 0x7FFF;
            uint64_t v22 = (char *)v20[410];
            unint64_t v23 = v20[411];
            if ((unint64_t)v22 >= v23)
            {
              unint64_t v99 = (char *)v20[409];
              uint64_t v100 = (v22 - v99) >> 3;
              if ((unint64_t)(v100 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v101 = v23 - (void)v99;
              unint64_t v102 = (uint64_t)(v23 - (void)v99) >> 2;
              if (v102 <= v100 + 1) {
                unint64_t v102 = v100 + 1;
              }
              if (v101 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v103 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v103 = v102;
              }
              if (v103)
              {
                uint64_t v104 = (char *)sub_5714((uint64_t)(v20 + 411), v103);
                uint64_t v22 = (char *)v20[410];
                unint64_t v99 = (char *)v20[409];
              }
              else
              {
                uint64_t v104 = 0;
              }
              unint64_t v181 = &v104[8 * v100];
              *(void *)unint64_t v181 = v21;
              unint64_t v24 = v181 + 8;
              while (v22 != v99)
              {
                uint64_t v182 = *((void *)v22 - 1);
                v22 -= 8;
                *((void *)v181 - 1) = v182;
                v181 -= 8;
              }
              v20[409] = v181;
              v20[410] = v24;
              v20[411] = &v104[8 * v103];
              if (v99) {
                operator delete(v99);
              }
            }
            else
            {
              *(void *)uint64_t v22 = v21;
              unint64_t v24 = v22 + 8;
            }
            v20[410] = v24;
            break;
          case 'i':
            unint64_t v25 = *(void **)a1[2];
            uint64_t v26 = *(_WORD *)(a1[3] + 30) & 0x7FFF;
            uint64_t v27 = (char *)v25[413];
            unint64_t v28 = v25[414];
            if ((unint64_t)v27 >= v28)
            {
              unint64_t v105 = (char *)v25[412];
              uint64_t v106 = (v27 - v105) >> 3;
              if ((unint64_t)(v106 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v107 = v28 - (void)v105;
              unint64_t v108 = (uint64_t)(v28 - (void)v105) >> 2;
              if (v108 <= v106 + 1) {
                unint64_t v108 = v106 + 1;
              }
              if (v107 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v109 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v109 = v108;
              }
              if (v109)
              {
                uint64_t v110 = (char *)sub_5714((uint64_t)(v25 + 414), v109);
                uint64_t v27 = (char *)v25[413];
                unint64_t v105 = (char *)v25[412];
              }
              else
              {
                uint64_t v110 = 0;
              }
              uint64_t v183 = &v110[8 * v106];
              *(void *)uint64_t v183 = v26;
              unint64_t v29 = v183 + 8;
              while (v27 != v105)
              {
                uint64_t v184 = *((void *)v27 - 1);
                v27 -= 8;
                *((void *)v183 - 1) = v184;
                v183 -= 8;
              }
              v25[412] = v183;
              v25[413] = v29;
              v25[414] = &v110[8 * v109];
              if (v105) {
                operator delete(v105);
              }
            }
            else
            {
              *(void *)uint64_t v27 = v26;
              unint64_t v29 = v27 + 8;
            }
            v25[413] = v29;
            break;
          case 'j':
            unint64_t v30 = *(void **)a1[2];
            uint64_t v31 = *(_WORD *)(a1[3] + 24) & 0x7FFF;
            unint64_t v32 = (char *)v30[416];
            unint64_t v33 = v30[417];
            if ((unint64_t)v32 >= v33)
            {
              uint64_t v111 = (char *)v30[415];
              uint64_t v112 = (v32 - v111) >> 3;
              if ((unint64_t)(v112 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v113 = v33 - (void)v111;
              unint64_t v114 = (uint64_t)(v33 - (void)v111) >> 2;
              if (v114 <= v112 + 1) {
                unint64_t v114 = v112 + 1;
              }
              if (v113 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v115 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v115 = v114;
              }
              if (v115)
              {
                uint64_t v116 = (char *)sub_5714((uint64_t)(v30 + 417), v115);
                unint64_t v32 = (char *)v30[416];
                uint64_t v111 = (char *)v30[415];
              }
              else
              {
                uint64_t v116 = 0;
              }
              unint64_t v185 = &v116[8 * v112];
              *(void *)unint64_t v185 = v31;
              uint64_t v34 = v185 + 8;
              while (v32 != v111)
              {
                uint64_t v186 = *((void *)v32 - 1);
                v32 -= 8;
                *((void *)v185 - 1) = v186;
                v185 -= 8;
              }
              v30[415] = v185;
              v30[416] = v34;
              v30[417] = &v116[8 * v115];
              if (v111) {
                operator delete(v111);
              }
            }
            else
            {
              *(void *)unint64_t v32 = v31;
              uint64_t v34 = v32 + 8;
            }
            v30[416] = v34;
            break;
          case 'k':
            uint64_t v35 = *(void **)a1[2];
            uint64_t v36 = *(_WORD *)(a1[3] + 26) & 0x7FFF;
            uint64_t v37 = (char *)v35[419];
            unint64_t v38 = v35[420];
            if ((unint64_t)v37 >= v38)
            {
              uint64_t v117 = (char *)v35[418];
              uint64_t v118 = (v37 - v117) >> 3;
              if ((unint64_t)(v118 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v119 = v38 - (void)v117;
              unint64_t v120 = (uint64_t)(v38 - (void)v117) >> 2;
              if (v120 <= v118 + 1) {
                unint64_t v120 = v118 + 1;
              }
              if (v119 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v121 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v121 = v120;
              }
              if (v121)
              {
                uint64_t v122 = (char *)sub_5714((uint64_t)(v35 + 420), v121);
                uint64_t v37 = (char *)v35[419];
                uint64_t v117 = (char *)v35[418];
              }
              else
              {
                uint64_t v122 = 0;
              }
              unint64_t v187 = &v122[8 * v118];
              *(void *)unint64_t v187 = v36;
              unint64_t v39 = v187 + 8;
              while (v37 != v117)
              {
                uint64_t v188 = *((void *)v37 - 1);
                v37 -= 8;
                *((void *)v187 - 1) = v188;
                v187 -= 8;
              }
              v35[418] = v187;
              v35[419] = v39;
              v35[420] = &v122[8 * v121];
              if (v117) {
                operator delete(v117);
              }
            }
            else
            {
              *(void *)uint64_t v37 = v36;
              unint64_t v39 = v37 + 8;
            }
            v35[419] = v39;
            break;
          case 'l':
            uint64_t v40 = a1[2];
            uint64_t v41 = *(void **)v40;
            uint64_t v42 = *(unsigned __int16 *)(a1[3] + 60);
            uint64_t v43 = *(char **)(*(void *)v40 + 3376);
            unint64_t v44 = *(void *)(*(void *)v40 + 3384);
            if ((unint64_t)v43 >= v44)
            {
              unint64_t v123 = (char *)v41[421];
              uint64_t v124 = (v43 - v123) >> 3;
              if ((unint64_t)(v124 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v125 = v44 - (void)v123;
              unint64_t v126 = (uint64_t)(v44 - (void)v123) >> 2;
              if (v126 <= v124 + 1) {
                unint64_t v126 = v124 + 1;
              }
              if (v125 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v127 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v127 = v126;
              }
              if (v127)
              {
                unint64_t v128 = (char *)sub_5714((uint64_t)(v41 + 423), v127);
                uint64_t v43 = (char *)v41[422];
                unint64_t v123 = (char *)v41[421];
              }
              else
              {
                unint64_t v128 = 0;
              }
              uint64_t v189 = &v128[8 * v124];
              *(void *)uint64_t v189 = v42;
              unint64_t v45 = v189 + 8;
              while (v43 != v123)
              {
                uint64_t v190 = *((void *)v43 - 1);
                v43 -= 8;
                *((void *)v189 - 1) = v190;
                v189 -= 8;
              }
              v41[421] = v189;
              v41[422] = v45;
              v41[423] = &v128[8 * v127];
              if (v123) {
                operator delete(v123);
              }
            }
            else
            {
              *(void *)uint64_t v43 = v42;
              unint64_t v45 = v43 + 8;
            }
            v41[422] = v45;
            break;
          case 'm':
            uint64_t v46 = *(void **)a1[2];
            uint64_t v47 = *(_DWORD *)(a1[3] + 52) & 0x1FFFFLL;
            unint64_t v48 = (uint64_t *)v46[425];
            unint64_t v49 = v46[426];
            if ((unint64_t)v48 >= v49)
            {
              uint64_t v129 = (uint64_t *)v46[424];
              uint64_t v130 = v48 - v129;
              if ((unint64_t)(v130 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v131 = v49 - (void)v129;
              unint64_t v132 = (uint64_t)(v49 - (void)v129) >> 2;
              if (v132 <= v130 + 1) {
                unint64_t v132 = v130 + 1;
              }
              if (v131 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v133 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v133 = v132;
              }
              if (v133)
              {
                uint64_t v134 = (char *)sub_5714((uint64_t)(v46 + 426), v133);
                unint64_t v48 = (uint64_t *)v46[425];
                uint64_t v129 = (uint64_t *)v46[424];
              }
              else
              {
                uint64_t v134 = 0;
              }
              unint64_t v191 = (uint64_t *)&v134[8 * v130];
              *unint64_t v191 = v47;
              unint64_t v50 = v191 + 1;
              while (v48 != v129)
              {
                uint64_t v192 = *--v48;
                *--unint64_t v191 = v192;
              }
              v46[424] = v191;
              v46[425] = v50;
              v46[426] = &v134[8 * v133];
              if (v129) {
                operator delete(v129);
              }
            }
            else
            {
              *unint64_t v48 = v47;
              unint64_t v50 = v48 + 1;
            }
            v46[425] = v50;
            break;
          case 'n':
            unint64_t v51 = *(void **)a1[2];
            uint64_t v52 = *(_DWORD *)(a1[3] + 48) & 0x1FFFFLL;
            uint64_t v53 = (uint64_t *)v51[428];
            unint64_t v54 = v51[429];
            if ((unint64_t)v53 >= v54)
            {
              uint64_t v135 = (uint64_t *)v51[427];
              uint64_t v136 = v53 - v135;
              if ((unint64_t)(v136 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v137 = v54 - (void)v135;
              unint64_t v138 = (uint64_t)(v54 - (void)v135) >> 2;
              if (v138 <= v136 + 1) {
                unint64_t v138 = v136 + 1;
              }
              if (v137 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v139 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v139 = v138;
              }
              if (v139)
              {
                unint64_t v140 = (char *)sub_5714((uint64_t)(v51 + 429), v139);
                uint64_t v53 = (uint64_t *)v51[428];
                uint64_t v135 = (uint64_t *)v51[427];
              }
              else
              {
                unint64_t v140 = 0;
              }
              unint64_t v193 = (uint64_t *)&v140[8 * v136];
              *unint64_t v193 = v52;
              unint64_t v55 = v193 + 1;
              while (v53 != v135)
              {
                uint64_t v194 = *--v53;
                *--unint64_t v193 = v194;
              }
              v51[427] = v193;
              v51[428] = v55;
              v51[429] = &v140[8 * v139];
              if (v135) {
                operator delete(v135);
              }
            }
            else
            {
              *uint64_t v53 = v52;
              unint64_t v55 = v53 + 1;
            }
            v51[428] = v55;
            break;
          case 'o':
            unint64_t v56 = *(void **)a1[2];
            uint64_t v57 = *(_DWORD *)(a1[3] + 56) & 0x1FFFFLL;
            unint64_t v58 = (uint64_t *)v56[431];
            unint64_t v59 = v56[432];
            if ((unint64_t)v58 >= v59)
            {
              uint64_t v141 = (uint64_t *)v56[430];
              uint64_t v142 = v58 - v141;
              if ((unint64_t)(v142 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v143 = v59 - (void)v141;
              unint64_t v144 = (uint64_t)(v59 - (void)v141) >> 2;
              if (v144 <= v142 + 1) {
                unint64_t v144 = v142 + 1;
              }
              if (v143 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v145 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v145 = v144;
              }
              if (v145)
              {
                unint64_t v146 = (char *)sub_5714((uint64_t)(v56 + 432), v145);
                unint64_t v58 = (uint64_t *)v56[431];
                uint64_t v141 = (uint64_t *)v56[430];
              }
              else
              {
                unint64_t v146 = 0;
              }
              uint64_t v195 = (uint64_t *)&v146[8 * v142];
              *uint64_t v195 = v57;
              uint64_t v60 = v195 + 1;
              while (v58 != v141)
              {
                uint64_t v196 = *--v58;
                *--uint64_t v195 = v196;
              }
              v56[430] = v195;
              v56[431] = v60;
              v56[432] = &v146[8 * v145];
              if (v141) {
                operator delete(v141);
              }
            }
            else
            {
              uint64_t *v58 = v57;
              uint64_t v60 = v58 + 1;
            }
            v56[431] = v60;
            break;
          case 'p':
            unint64_t v61 = *(void **)a1[2];
            uint64_t v62 = *(_WORD *)(a1[3] + 46) & 0x3FFF;
            unint64_t v63 = (char *)v61[434];
            unint64_t v64 = v61[435];
            if ((unint64_t)v63 >= v64)
            {
              uint64_t v147 = (char *)v61[433];
              uint64_t v148 = (v63 - v147) >> 3;
              if ((unint64_t)(v148 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v149 = v64 - (void)v147;
              unint64_t v150 = (uint64_t)(v64 - (void)v147) >> 2;
              if (v150 <= v148 + 1) {
                unint64_t v150 = v148 + 1;
              }
              if (v149 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v151 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v151 = v150;
              }
              if (v151)
              {
                uint64_t v152 = (char *)sub_5714((uint64_t)(v61 + 435), v151);
                unint64_t v63 = (char *)v61[434];
                uint64_t v147 = (char *)v61[433];
              }
              else
              {
                uint64_t v152 = 0;
              }
              unint64_t v197 = &v152[8 * v148];
              *(void *)unint64_t v197 = v62;
              uint64_t v65 = v197 + 8;
              while (v63 != v147)
              {
                uint64_t v198 = *((void *)v63 - 1);
                v63 -= 8;
                *((void *)v197 - 1) = v198;
                v197 -= 8;
              }
              v61[433] = v197;
              v61[434] = v65;
              v61[435] = &v152[8 * v151];
              if (v147) {
                operator delete(v147);
              }
            }
            else
            {
              *(void *)unint64_t v63 = v62;
              uint64_t v65 = v63 + 8;
            }
            v61[434] = v65;
            break;
          case 'q':
            uint64_t v66 = *(void **)a1[2];
            uint64_t v67 = *(_WORD *)(a1[3] + 44) & 0x3FFF;
            unint64_t v68 = (char *)v66[437];
            unint64_t v69 = v66[438];
            if ((unint64_t)v68 >= v69)
            {
              unint64_t v153 = (char *)v66[436];
              uint64_t v154 = (v68 - v153) >> 3;
              if ((unint64_t)(v154 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v155 = v69 - (void)v153;
              unint64_t v156 = (uint64_t)(v69 - (void)v153) >> 2;
              if (v156 <= v154 + 1) {
                unint64_t v156 = v154 + 1;
              }
              if (v155 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v157 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v157 = v156;
              }
              if (v157)
              {
                unint64_t v158 = (char *)sub_5714((uint64_t)(v66 + 438), v157);
                unint64_t v68 = (char *)v66[437];
                unint64_t v153 = (char *)v66[436];
              }
              else
              {
                unint64_t v158 = 0;
              }
              unint64_t v199 = &v158[8 * v154];
              *(void *)unint64_t v199 = v67;
              uint64_t v70 = v199 + 8;
              while (v68 != v153)
              {
                uint64_t v200 = *((void *)v68 - 1);
                v68 -= 8;
                *((void *)v199 - 1) = v200;
                v199 -= 8;
              }
              v66[436] = v199;
              v66[437] = v70;
              v66[438] = &v158[8 * v157];
              if (v153) {
                operator delete(v153);
              }
            }
            else
            {
              *(void *)unint64_t v68 = v67;
              uint64_t v70 = v68 + 8;
            }
            v66[437] = v70;
            break;
          case 'r':
            uint64_t v71 = a1[2];
            uint64_t v72 = *(void **)v71;
            uint64_t v73 = *(unsigned __int16 *)(a1[3] + 62);
            unint64_t v74 = *(char **)(*(void *)v71 + 3520);
            unint64_t v75 = *(void *)(*(void *)v71 + 3528);
            if ((unint64_t)v74 >= v75)
            {
              uint64_t v159 = (char *)v72[439];
              uint64_t v160 = (v74 - v159) >> 3;
              if ((unint64_t)(v160 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v161 = v75 - (void)v159;
              unint64_t v162 = (uint64_t)(v75 - (void)v159) >> 2;
              if (v162 <= v160 + 1) {
                unint64_t v162 = v160 + 1;
              }
              if (v161 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v163 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v163 = v162;
              }
              if (v163)
              {
                uint64_t v164 = (char *)sub_5714((uint64_t)(v72 + 441), v163);
                unint64_t v74 = (char *)v72[440];
                uint64_t v159 = (char *)v72[439];
              }
              else
              {
                uint64_t v164 = 0;
              }
              uint64_t v201 = &v164[8 * v160];
              *(void *)uint64_t v201 = v73;
              uint64_t v76 = v201 + 8;
              while (v74 != v159)
              {
                uint64_t v202 = *((void *)v74 - 1);
                v74 -= 8;
                *((void *)v201 - 1) = v202;
                v201 -= 8;
              }
              v72[439] = v201;
              v72[440] = v76;
              v72[441] = &v164[8 * v163];
              if (v159) {
                operator delete(v159);
              }
            }
            else
            {
              *(void *)unint64_t v74 = v73;
              uint64_t v76 = v74 + 8;
            }
            v72[440] = v76;
            break;
          case 's':
            uint64_t v77 = *(void **)a1[2];
            uint64_t v78 = *(_DWORD *)(a1[3] + 32) & 0x1FFFFLL;
            unint64_t v79 = (uint64_t *)v77[443];
            unint64_t v80 = v77[444];
            if ((unint64_t)v79 >= v80)
            {
              uint64_t v165 = (uint64_t *)v77[442];
              uint64_t v166 = v79 - v165;
              if ((unint64_t)(v166 + 1) >> 61) {
                goto LABEL_288;
              }
              unint64_t v167 = v80 - (void)v165;
              unint64_t v168 = (uint64_t)(v80 - (void)v165) >> 2;
              if (v168 <= v166 + 1) {
                unint64_t v168 = v166 + 1;
              }
              if (v167 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v169 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v169 = v168;
              }
              if (v169)
              {
                uint64_t v170 = (char *)sub_5714((uint64_t)(v77 + 444), v169);
                unint64_t v79 = (uint64_t *)v77[443];
                uint64_t v165 = (uint64_t *)v77[442];
              }
              else
              {
                uint64_t v170 = 0;
              }
              unint64_t v203 = (uint64_t *)&v170[8 * v166];
              uint64_t *v203 = v78;
              unint64_t v81 = v203 + 1;
              while (v79 != v165)
              {
                uint64_t v204 = *--v79;
                *--unint64_t v203 = v204;
              }
              v77[442] = v203;
              v77[443] = v81;
              v77[444] = &v170[8 * v169];
              if (v165) {
                operator delete(v165);
              }
            }
            else
            {
              uint64_t *v79 = v78;
              unint64_t v81 = v79 + 1;
            }
            v77[443] = v81;
            break;
          case 't':
            unint64_t v82 = *(void **)a1[2];
            uint64_t v83 = *(_DWORD *)(a1[3] + 36) & 0x1FFFFLL;
            uint64_t v84 = (uint64_t *)v82[446];
            unint64_t v85 = v82[447];
            if ((unint64_t)v84 >= v85)
            {
              uint64_t v171 = (uint64_t *)v82[445];
              uint64_t v172 = v84 - v171;
              if ((unint64_t)(v172 + 1) >> 61) {
LABEL_288:
              }
                sub_566C();
              unint64_t v173 = v85 - (void)v171;
              unint64_t v174 = (uint64_t)(v85 - (void)v171) >> 2;
              if (v174 <= v172 + 1) {
                unint64_t v174 = v172 + 1;
              }
              if (v173 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v175 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v175 = v174;
              }
              if (v175)
              {
                uint64_t v176 = (char *)sub_5714((uint64_t)(v82 + 447), v175);
                uint64_t v84 = (uint64_t *)v82[446];
                uint64_t v171 = (uint64_t *)v82[445];
              }
              else
              {
                uint64_t v176 = 0;
              }
              unint64_t v205 = (uint64_t *)&v176[8 * v172];
              *unint64_t v205 = v83;
              unint64_t v86 = v205 + 1;
              while (v84 != v171)
              {
                uint64_t v206 = *--v84;
                *--unint64_t v205 = v206;
              }
              v82[445] = v205;
              v82[446] = v86;
              v82[447] = &v176[8 * v175];
              if (v171) {
                operator delete(v171);
              }
            }
            else
            {
              uint64_t *v84 = v83;
              unint64_t v86 = v84 + 1;
            }
            v82[446] = v86;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_931C8(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    unint64_t v63 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v62 = *v63;
    uint64_t v64 = (char *)v63[1] - (char *)*v63;
    if (v64)
    {
      unint64_t v65 = v64 >> 2;
      if (v65 <= 1) {
        unint64_t v65 = 1;
      }
      do
      {
        int v66 = *v62++;
        switch(v66)
        {
          case 'u':
            uint64_t v67 = *(_DWORD *)(a1[3] + 32) & 0x7FFFF;
            unint64_t v68 = (void *)(*(void *)a1[2] + 3592);
            goto LABEL_86;
          case 'v':
            uint64_t v67 = *(_DWORD *)(a1[3] + 36) & 0x3FFFFF;
            unint64_t v68 = (void *)(*(void *)a1[2] + 3616);
            goto LABEL_86;
          case 'w':
            uint64_t v67 = *(_DWORD *)(a1[3] + 28) & 0x3FFFFF;
            unint64_t v68 = (void *)(*(void *)a1[2] + 3640);
            goto LABEL_86;
          case 'x':
            uint64_t v67 = *(_DWORD *)(a1[3] + 24) & 0x3FFFFF;
            unint64_t v68 = (void *)(*(void *)a1[2] + 3664);
LABEL_86:
            *(void *)(*v68 - 8) += v67;
            break;
          default:
            break;
        }
        --v65;
      }
      while (v65);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    uint64_t v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 'u':
            int v10 = *(void **)a1[2];
            uint64_t v11 = *(_DWORD *)(a1[3] + 32) & 0x7FFFFLL;
            uint64_t v12 = (uint64_t *)v10[449];
            unint64_t v13 = v10[450];
            if ((unint64_t)v12 >= v13)
            {
              unint64_t v30 = (uint64_t *)v10[448];
              uint64_t v31 = v12 - v30;
              if ((unint64_t)(v31 + 1) >> 61) {
                goto LABEL_90;
              }
              unint64_t v32 = v13 - (void)v30;
              unint64_t v33 = (uint64_t)(v13 - (void)v30) >> 2;
              if (v33 <= v31 + 1) {
                unint64_t v33 = v31 + 1;
              }
              if (v32 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v34 = v33;
              }
              if (v34)
              {
                uint64_t v35 = (char *)sub_5714((uint64_t)(v10 + 450), v34);
                uint64_t v12 = (uint64_t *)v10[449];
                unint64_t v30 = (uint64_t *)v10[448];
              }
              else
              {
                uint64_t v35 = 0;
              }
              unint64_t v54 = (uint64_t *)&v35[8 * v31];
              uint64_t *v54 = v11;
              unint64_t v14 = v54 + 1;
              while (v12 != v30)
              {
                uint64_t v55 = *--v12;
                *--unint64_t v54 = v55;
              }
              v10[448] = v54;
              v10[449] = v14;
              v10[450] = &v35[8 * v34];
              if (v30) {
                operator delete(v30);
              }
            }
            else
            {
              uint64_t *v12 = v11;
              unint64_t v14 = v12 + 1;
            }
            v10[449] = v14;
            break;
          case 'v':
            unint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_DWORD *)(a1[3] + 36) & 0x3FFFFFLL;
            uint64_t v17 = (uint64_t *)v15[452];
            unint64_t v18 = v15[453];
            if ((unint64_t)v17 >= v18)
            {
              uint64_t v36 = (uint64_t *)v15[451];
              uint64_t v37 = v17 - v36;
              if ((unint64_t)(v37 + 1) >> 61) {
                goto LABEL_90;
              }
              unint64_t v38 = v18 - (void)v36;
              unint64_t v39 = (uint64_t)(v18 - (void)v36) >> 2;
              if (v39 <= v37 + 1) {
                unint64_t v39 = v37 + 1;
              }
              if (v38 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v40 = v39;
              }
              if (v40)
              {
                uint64_t v41 = (char *)sub_5714((uint64_t)(v15 + 453), v40);
                uint64_t v17 = (uint64_t *)v15[452];
                uint64_t v36 = (uint64_t *)v15[451];
              }
              else
              {
                uint64_t v41 = 0;
              }
              unint64_t v56 = (uint64_t *)&v41[8 * v37];
              uint64_t *v56 = v16;
              unint64_t v19 = v56 + 1;
              while (v17 != v36)
              {
                uint64_t v57 = *--v17;
                *--unint64_t v56 = v57;
              }
              v15[451] = v56;
              v15[452] = v19;
              v15[453] = &v41[8 * v40];
              if (v36) {
                operator delete(v36);
              }
            }
            else
            {
              *uint64_t v17 = v16;
              unint64_t v19 = v17 + 1;
            }
            v15[452] = v19;
            break;
          case 'w':
            uint64_t v20 = *(void **)a1[2];
            uint64_t v21 = *(_DWORD *)(a1[3] + 28) & 0x3FFFFFLL;
            uint64_t v22 = (uint64_t *)v20[455];
            unint64_t v23 = v20[456];
            if ((unint64_t)v22 >= v23)
            {
              uint64_t v42 = (uint64_t *)v20[454];
              uint64_t v43 = v22 - v42;
              if ((unint64_t)(v43 + 1) >> 61) {
                goto LABEL_90;
              }
              unint64_t v44 = v23 - (void)v42;
              unint64_t v45 = (uint64_t)(v23 - (void)v42) >> 2;
              if (v45 <= v43 + 1) {
                unint64_t v45 = v43 + 1;
              }
              if (v44 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v46 = v45;
              }
              if (v46)
              {
                uint64_t v47 = (char *)sub_5714((uint64_t)(v20 + 456), v46);
                uint64_t v22 = (uint64_t *)v20[455];
                uint64_t v42 = (uint64_t *)v20[454];
              }
              else
              {
                uint64_t v47 = 0;
              }
              unint64_t v58 = (uint64_t *)&v47[8 * v43];
              uint64_t *v58 = v21;
              unint64_t v24 = v58 + 1;
              while (v22 != v42)
              {
                uint64_t v59 = *--v22;
                *--unint64_t v58 = v59;
              }
              v20[454] = v58;
              v20[455] = v24;
              v20[456] = &v47[8 * v46];
              if (v42) {
                operator delete(v42);
              }
            }
            else
            {
              uint64_t *v22 = v21;
              unint64_t v24 = v22 + 1;
            }
            v20[455] = v24;
            break;
          case 'x':
            unint64_t v25 = *(void **)a1[2];
            uint64_t v26 = *(_DWORD *)(a1[3] + 24) & 0x3FFFFFLL;
            uint64_t v27 = (uint64_t *)v25[458];
            unint64_t v28 = v25[459];
            if ((unint64_t)v27 >= v28)
            {
              unint64_t v48 = (uint64_t *)v25[457];
              uint64_t v49 = v27 - v48;
              if ((unint64_t)(v49 + 1) >> 61) {
LABEL_90:
              }
                sub_566C();
              unint64_t v50 = v28 - (void)v48;
              unint64_t v51 = (uint64_t)(v28 - (void)v48) >> 2;
              if (v51 <= v49 + 1) {
                unint64_t v51 = v49 + 1;
              }
              if (v50 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v52 = v51;
              }
              if (v52)
              {
                uint64_t v53 = (char *)sub_5714((uint64_t)(v25 + 459), v52);
                uint64_t v27 = (uint64_t *)v25[458];
                unint64_t v48 = (uint64_t *)v25[457];
              }
              else
              {
                uint64_t v53 = 0;
              }
              uint64_t v60 = (uint64_t *)&v53[8 * v49];
              *uint64_t v60 = v26;
              unint64_t v29 = v60 + 1;
              while (v27 != v48)
              {
                uint64_t v61 = *--v27;
                *--uint64_t v60 = v61;
              }
              v25[457] = v60;
              v25[458] = v29;
              v25[459] = &v53[8 * v52];
              if (v48) {
                operator delete(v48);
              }
            }
            else
            {
              *uint64_t v27 = v26;
              unint64_t v29 = v27 + 1;
            }
            v25[458] = v29;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_93698(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    uint64_t v141 = (int **)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    unint64_t v140 = *v141;
    uint64_t v142 = (char *)v141[1] - (char *)*v141;
    if (v142)
    {
      unint64_t v143 = v142 >> 2;
      if (v143 <= 1) {
        unint64_t v143 = 1;
      }
      do
      {
        int v144 = *v140++;
        switch(v144)
        {
          case 151:
            unint64_t v145 = *(_WORD *)(a1[3] + 34) & 0x1FFF;
            unint64_t v146 = (void *)(*(void *)a1[2] + 4408);
            goto LABEL_194;
          case 152:
            unint64_t v145 = *(_DWORD *)(a1[3] + 40) & 0x3FFFF;
            unint64_t v146 = (void *)(*(void *)a1[2] + 4432);
            goto LABEL_194;
          case 153:
            unint64_t v145 = *(_WORD *)(a1[3] + 32) & 0x1FFF;
            unint64_t v146 = (void *)(*(void *)a1[2] + 4456);
            goto LABEL_194;
          case 154:
            unint64_t v145 = ((unint64_t)*(unsigned int *)(a1[3] + 36) >> 13) & 0x3FFFF;
            unint64_t v146 = (void *)(*(void *)a1[2] + 4480);
            goto LABEL_194;
          case 155:
            unint64_t v145 = *(_DWORD *)(a1[3] + 36) & 0x1FFF;
            unint64_t v146 = (void *)(*(void *)a1[2] + 4504);
            goto LABEL_194;
          case 156:
            unint64_t v145 = *(_DWORD *)(a1[3] + 44) & 0x3FFFF;
            unint64_t v146 = (void *)(*(void *)a1[2] + 4528);
            goto LABEL_194;
          case 157:
            unint64_t v145 = *(_WORD *)(a1[3] + 28) & 0x3FFF;
            unint64_t v146 = (void *)(*(void *)a1[2] + 4552);
            goto LABEL_194;
          case 158:
            unint64_t v145 = *(_WORD *)(a1[3] + 24) & 0x3FFF;
            unint64_t v146 = (void *)(*(void *)a1[2] + 4576);
            goto LABEL_194;
          case 159:
            unint64_t v145 = *(_WORD *)(a1[3] + 30) & 0x3FFF;
            unint64_t v146 = (void *)(*(void *)a1[2] + 4600);
            goto LABEL_194;
          case 160:
            unint64_t v145 = *(_WORD *)(a1[3] + 26) & 0x3FFF;
            unint64_t v146 = (void *)(*(void *)a1[2] + 4624);
LABEL_194:
            *(void *)(*v146 - 8) += v145;
            break;
          default:
            break;
        }
        --v143;
      }
      while (v143);
    }
  }
  else
  {
    if (*a2) {
      return;
    }
    uint64_t v5 = (void *)(*(void *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    uint64_t v6 = v5[1] - *v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 2;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0x97:
            int v10 = *(void **)a1[2];
            uint64_t v11 = *(_WORD *)(a1[3] + 34) & 0x1FFF;
            uint64_t v12 = (char *)v10[551];
            unint64_t v13 = v10[552];
            if ((unint64_t)v12 >= v13)
            {
              uint64_t v60 = (char *)v10[550];
              uint64_t v61 = (v12 - v60) >> 3;
              if ((unint64_t)(v61 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v62 = v13 - (void)v60;
              unint64_t v63 = (uint64_t)(v13 - (void)v60) >> 2;
              if (v63 <= v61 + 1) {
                unint64_t v63 = v61 + 1;
              }
              if (v62 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v64 = v63;
              }
              if (v64)
              {
                unint64_t v65 = (char *)sub_5714((uint64_t)(v10 + 552), v64);
                uint64_t v12 = (char *)v10[551];
                uint64_t v60 = (char *)v10[550];
              }
              else
              {
                unint64_t v65 = 0;
              }
              unint64_t v120 = &v65[8 * v61];
              *(void *)unint64_t v120 = v11;
              unint64_t v14 = v120 + 8;
              while (v12 != v60)
              {
                uint64_t v121 = *((void *)v12 - 1);
                v12 -= 8;
                *((void *)v120 - 1) = v121;
                v120 -= 8;
              }
              v10[550] = v120;
              v10[551] = v14;
              v10[552] = &v65[8 * v64];
              if (v60) {
                operator delete(v60);
              }
            }
            else
            {
              *(void *)uint64_t v12 = v11;
              unint64_t v14 = v12 + 8;
            }
            v10[551] = v14;
            break;
          case 0x98:
            unint64_t v15 = *(void **)a1[2];
            uint64_t v16 = *(_DWORD *)(a1[3] + 40) & 0x3FFFFLL;
            uint64_t v17 = (uint64_t *)v15[554];
            unint64_t v18 = v15[555];
            if ((unint64_t)v17 >= v18)
            {
              int v66 = (uint64_t *)v15[553];
              uint64_t v67 = v17 - v66;
              if ((unint64_t)(v67 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v68 = v18 - (void)v66;
              unint64_t v69 = (uint64_t)(v18 - (void)v66) >> 2;
              if (v69 <= v67 + 1) {
                unint64_t v69 = v67 + 1;
              }
              if (v68 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v70 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v70 = v69;
              }
              if (v70)
              {
                uint64_t v71 = (char *)sub_5714((uint64_t)(v15 + 555), v70);
                uint64_t v17 = (uint64_t *)v15[554];
                int v66 = (uint64_t *)v15[553];
              }
              else
              {
                uint64_t v71 = 0;
              }
              uint64_t v122 = (uint64_t *)&v71[8 * v67];
              *uint64_t v122 = v16;
              unint64_t v19 = v122 + 1;
              while (v17 != v66)
              {
                uint64_t v123 = *--v17;
                *--uint64_t v122 = v123;
              }
              v15[553] = v122;
              v15[554] = v19;
              v15[555] = &v71[8 * v70];
              if (v66) {
                operator delete(v66);
              }
            }
            else
            {
              *uint64_t v17 = v16;
              unint64_t v19 = v17 + 1;
            }
            v15[554] = v19;
            break;
          case 0x99:
            uint64_t v20 = *(void **)a1[2];
            uint64_t v21 = *(_WORD *)(a1[3] + 32) & 0x1FFF;
            uint64_t v22 = (char *)v20[557];
            unint64_t v23 = v20[558];
            if ((unint64_t)v22 >= v23)
            {
              uint64_t v72 = (char *)v20[556];
              uint64_t v73 = (v22 - v72) >> 3;
              if ((unint64_t)(v73 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v74 = v23 - (void)v72;
              unint64_t v75 = (uint64_t)(v23 - (void)v72) >> 2;
              if (v75 <= v73 + 1) {
                unint64_t v75 = v73 + 1;
              }
              if (v74 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v76 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v76 = v75;
              }
              if (v76)
              {
                uint64_t v77 = (char *)sub_5714((uint64_t)(v20 + 558), v76);
                uint64_t v22 = (char *)v20[557];
                uint64_t v72 = (char *)v20[556];
              }
              else
              {
                uint64_t v77 = 0;
              }
              uint64_t v124 = &v77[8 * v73];
              *(void *)uint64_t v124 = v21;
              unint64_t v24 = v124 + 8;
              while (v22 != v72)
              {
                uint64_t v125 = *((void *)v22 - 1);
                v22 -= 8;
                *((void *)v124 - 1) = v125;
                v124 -= 8;
              }
              v20[556] = v124;
              v20[557] = v24;
              v20[558] = &v77[8 * v76];
              if (v72) {
                operator delete(v72);
              }
            }
            else
            {
              *(void *)uint64_t v22 = v21;
              unint64_t v24 = v22 + 8;
            }
            v20[557] = v24;
            break;
          case 0x9A:
            unint64_t v25 = *(void **)a1[2];
            unint64_t v26 = ((unint64_t)*(unsigned int *)(a1[3] + 36) >> 13) & 0x3FFFF;
            uint64_t v27 = (unint64_t *)v25[560];
            unint64_t v28 = v25[561];
            if ((unint64_t)v27 >= v28)
            {
              uint64_t v78 = (unint64_t *)v25[559];
              uint64_t v79 = v27 - v78;
              if ((unint64_t)(v79 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v80 = v28 - (void)v78;
              unint64_t v81 = (uint64_t)(v28 - (void)v78) >> 2;
              if (v81 <= v79 + 1) {
                unint64_t v81 = v79 + 1;
              }
              if (v80 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v82 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v82 = v81;
              }
              if (v82)
              {
                uint64_t v83 = (char *)sub_5714((uint64_t)(v25 + 561), v82);
                uint64_t v27 = (unint64_t *)v25[560];
                uint64_t v78 = (unint64_t *)v25[559];
              }
              else
              {
                uint64_t v83 = 0;
              }
              unint64_t v126 = (unint64_t *)&v83[8 * v79];
              unint64_t *v126 = v26;
              unint64_t v29 = v126 + 1;
              while (v27 != v78)
              {
                unint64_t v127 = *--v27;
                *--unint64_t v126 = v127;
              }
              v25[559] = v126;
              v25[560] = v29;
              v25[561] = &v83[8 * v82];
              if (v78) {
                operator delete(v78);
              }
            }
            else
            {
              *uint64_t v27 = v26;
              unint64_t v29 = v27 + 1;
            }
            v25[560] = v29;
            break;
          case 0x9B:
            unint64_t v30 = *(void **)a1[2];
            uint64_t v31 = *(_DWORD *)(a1[3] + 36) & 0x1FFFLL;
            unint64_t v32 = (uint64_t *)v30[563];
            unint64_t v33 = v30[564];
            if ((unint64_t)v32 >= v33)
            {
              uint64_t v84 = (uint64_t *)v30[562];
              uint64_t v85 = v32 - v84;
              if ((unint64_t)(v85 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v86 = v33 - (void)v84;
              unint64_t v87 = (uint64_t)(v33 - (void)v84) >> 2;
              if (v87 <= v85 + 1) {
                unint64_t v87 = v85 + 1;
              }
              if (v86 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v88 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v88 = v87;
              }
              if (v88)
              {
                unint64_t v89 = (char *)sub_5714((uint64_t)(v30 + 564), v88);
                unint64_t v32 = (uint64_t *)v30[563];
                uint64_t v84 = (uint64_t *)v30[562];
              }
              else
              {
                unint64_t v89 = 0;
              }
              unint64_t v128 = (uint64_t *)&v89[8 * v85];
              *unint64_t v128 = v31;
              unint64_t v34 = v128 + 1;
              while (v32 != v84)
              {
                uint64_t v129 = *--v32;
                *--unint64_t v128 = v129;
              }
              v30[562] = v128;
              v30[563] = v34;
              v30[564] = &v89[8 * v88];
              if (v84) {
                operator delete(v84);
              }
            }
            else
            {
              *unint64_t v32 = v31;
              unint64_t v34 = v32 + 1;
            }
            v30[563] = v34;
            break;
          case 0x9C:
            uint64_t v35 = *(void **)a1[2];
            uint64_t v36 = *(_DWORD *)(a1[3] + 44) & 0x3FFFFLL;
            uint64_t v37 = (uint64_t *)v35[566];
            unint64_t v38 = v35[567];
            if ((unint64_t)v37 >= v38)
            {
              unint64_t v90 = (uint64_t *)v35[565];
              uint64_t v91 = v37 - v90;
              if ((unint64_t)(v91 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v92 = v38 - (void)v90;
              unint64_t v93 = (uint64_t)(v38 - (void)v90) >> 2;
              if (v93 <= v91 + 1) {
                unint64_t v93 = v91 + 1;
              }
              if (v92 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v94 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v94 = v93;
              }
              if (v94)
              {
                unint64_t v95 = (char *)sub_5714((uint64_t)(v35 + 567), v94);
                uint64_t v37 = (uint64_t *)v35[566];
                unint64_t v90 = (uint64_t *)v35[565];
              }
              else
              {
                unint64_t v95 = 0;
              }
              uint64_t v130 = (uint64_t *)&v95[8 * v91];
              *uint64_t v130 = v36;
              unint64_t v39 = v130 + 1;
              while (v37 != v90)
              {
                uint64_t v131 = *--v37;
                *--uint64_t v130 = v131;
              }
              v35[565] = v130;
              v35[566] = v39;
              v35[567] = &v95[8 * v94];
              if (v90) {
                operator delete(v90);
              }
            }
            else
            {
              *uint64_t v37 = v36;
              unint64_t v39 = v37 + 1;
            }
            v35[566] = v39;
            break;
          case 0x9D:
            unint64_t v40 = *(void **)a1[2];
            uint64_t v41 = *(_WORD *)(a1[3] + 28) & 0x3FFF;
            uint64_t v42 = (char *)v40[569];
            unint64_t v43 = v40[570];
            if ((unint64_t)v42 >= v43)
            {
              unint64_t v96 = (char *)v40[568];
              uint64_t v97 = (v42 - v96) >> 3;
              if ((unint64_t)(v97 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v98 = v43 - (void)v96;
              unint64_t v99 = (uint64_t)(v43 - (void)v96) >> 2;
              if (v99 <= v97 + 1) {
                unint64_t v99 = v97 + 1;
              }
              if (v98 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v100 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v100 = v99;
              }
              if (v100)
              {
                unint64_t v101 = (char *)sub_5714((uint64_t)(v40 + 570), v100);
                uint64_t v42 = (char *)v40[569];
                unint64_t v96 = (char *)v40[568];
              }
              else
              {
                unint64_t v101 = 0;
              }
              unint64_t v132 = &v101[8 * v97];
              *(void *)unint64_t v132 = v41;
              unint64_t v44 = v132 + 8;
              while (v42 != v96)
              {
                uint64_t v133 = *((void *)v42 - 1);
                v42 -= 8;
                *((void *)v132 - 1) = v133;
                v132 -= 8;
              }
              v40[568] = v132;
              v40[569] = v44;
              v40[570] = &v101[8 * v100];
              if (v96) {
                operator delete(v96);
              }
            }
            else
            {
              *(void *)uint64_t v42 = v41;
              unint64_t v44 = v42 + 8;
            }
            v40[569] = v44;
            break;
          case 0x9E:
            unint64_t v45 = *(void **)a1[2];
            uint64_t v46 = *(_WORD *)(a1[3] + 24) & 0x3FFF;
            uint64_t v47 = (char *)v45[572];
            unint64_t v48 = v45[573];
            if ((unint64_t)v47 >= v48)
            {
              unint64_t v102 = (char *)v45[571];
              uint64_t v103 = (v47 - v102) >> 3;
              if ((unint64_t)(v103 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v104 = v48 - (void)v102;
              unint64_t v105 = (uint64_t)(v48 - (void)v102) >> 2;
              if (v105 <= v103 + 1) {
                unint64_t v105 = v103 + 1;
              }
              if (v104 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v106 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v106 = v105;
              }
              if (v106)
              {
                unint64_t v107 = (char *)sub_5714((uint64_t)(v45 + 573), v106);
                uint64_t v47 = (char *)v45[572];
                unint64_t v102 = (char *)v45[571];
              }
              else
              {
                unint64_t v107 = 0;
              }
              uint64_t v134 = &v107[8 * v103];
              *(void *)uint64_t v134 = v46;
              uint64_t v49 = v134 + 8;
              while (v47 != v102)
              {
                uint64_t v135 = *((void *)v47 - 1);
                v47 -= 8;
                *((void *)v134 - 1) = v135;
                v134 -= 8;
              }
              v45[571] = v134;
              v45[572] = v49;
              v45[573] = &v107[8 * v106];
              if (v102) {
                operator delete(v102);
              }
            }
            else
            {
              *(void *)uint64_t v47 = v46;
              uint64_t v49 = v47 + 8;
            }
            v45[572] = v49;
            break;
          case 0x9F:
            unint64_t v50 = *(void **)a1[2];
            uint64_t v51 = *(_WORD *)(a1[3] + 30) & 0x3FFF;
            unint64_t v52 = (char *)v50[575];
            unint64_t v53 = v50[576];
            if ((unint64_t)v52 >= v53)
            {
              unint64_t v108 = (char *)v50[574];
              uint64_t v109 = (v52 - v108) >> 3;
              if ((unint64_t)(v109 + 1) >> 61) {
                goto LABEL_198;
              }
              unint64_t v110 = v53 - (void)v108;
              unint64_t v111 = (uint64_t)(v53 - (void)v108) >> 2;
              if (v111 <= v109 + 1) {
                unint64_t v111 = v109 + 1;
              }
              if (v110 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v112 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v112 = v111;
              }
              if (v112)
              {
                unint64_t v113 = (char *)sub_5714((uint64_t)(v50 + 576), v112);
                unint64_t v52 = (char *)v50[575];
                unint64_t v108 = (char *)v50[574];
              }
              else
              {
                unint64_t v113 = 0;
              }
              uint64_t v136 = &v113[8 * v109];
              *(void *)uint64_t v136 = v51;
              unint64_t v54 = v136 + 8;
              while (v52 != v108)
              {
                uint64_t v137 = *((void *)v52 - 1);
                v52 -= 8;
                *((void *)v136 - 1) = v137;
                v136 -= 8;
              }
              v50[574] = v136;
              v50[575] = v54;
              v50[576] = &v113[8 * v112];
              if (v108) {
                operator delete(v108);
              }
            }
            else
            {
              *(void *)unint64_t v52 = v51;
              unint64_t v54 = v52 + 8;
            }
            v50[575] = v54;
            break;
          case 0xA0:
            uint64_t v55 = *(void **)a1[2];
            uint64_t v56 = *(_WORD *)(a1[3] + 26) & 0x3FFF;
            uint64_t v57 = (char *)v55[578];
            unint64_t v58 = v55[579];
            if ((unint64_t)v57 >= v58)
            {
              unint64_t v114 = (char *)v55[577];
              uint64_t v115 = (v57 - v114) >> 3;
              if ((unint64_t)(v115 + 1) >> 61) {
LABEL_198:
              }
                sub_566C();
              unint64_t v116 = v58 - (void)v114;
              unint64_t v117 = (uint64_t)(v58 - (void)v114) >> 2;
              if (v117 <= v115 + 1) {
                unint64_t v117 = v115 + 1;
              }
              if (v116 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v118 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v118 = v117;
              }
              if (v118)
              {
                unint64_t v119 = (char *)sub_5714((uint64_t)(v55 + 579), v118);
                uint64_t v57 = (char *)v55[578];
                unint64_t v114 = (char *)v55[577];
              }
              else
              {
                unint64_t v119 = 0;
              }
              unint64_t v138 = &v119[8 * v115];
              *(void *)unint64_t v138 = v56;
              uint64_t v59 = v138 + 8;
              while (v57 != v114)
              {
                uint64_t v139 = *((void *)v57 - 1);
                v57 -= 8;
                *((void *)v138 - 1) = v139;
                v138 -= 8;
              }
              v55[577] = v138;
              v55[578] = v59;
              v55[579] = &v119[8 * v118];
              if (v114) {
                operator delete(v114);
              }
            }
            else
            {
              *(void *)uint64_t v57 = v56;
              uint64_t v59 = v57 + 8;
            }
            v55[578] = v59;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_94120()
{
}

uint64_t sub_94134(int a1, char *__s1)
{
  if (!__s1) {
    return 214;
  }
  uint64_t result = strcmp(__s1, "D7642F4CD8A1F1052D8874FFCB84623EEB5AD8DB476AAA36BB13F44E0122717D");
  if (result)
  {
    if (!strcmp(__s1, "ECCE75AB7F80F9519A3E08E3A0EE71610AE67E3B82829786B02D98C09276F560"))
    {
      return 1;
    }
    else if (!strcmp(__s1, "0D43CB377576A411251DB7D5579117D02FC1BB178830D97B5332A806AC122B37"))
    {
      return 2;
    }
    else if (!strcmp(__s1, "9E7E7B3180DA596EBA2925972639C8DC058E97904ADA86E8FA31E691D63CA97B"))
    {
      return 3;
    }
    else if (!strcmp(__s1, "FE4E8A2782700A8DEC84E195627096B91A904FF6F486B78EF381501FB9667E0F"))
    {
      return 4;
    }
    else if (!strcmp(__s1, "35E9B0A78729DBBE416E11951D26DDC657D957CE37E23B41A2915BB6CC8CF792"))
    {
      return 5;
    }
    else if (!strcmp(__s1, "992E7CAEB9808CFC06F5E69E0B80D0ABB3328FC59FA76FED7BB9529EBBC6E484"))
    {
      return 6;
    }
    else if (!strcmp(__s1, "C04589D08BD1AA2481137A423CC2E81C537B75011557AB0EA579F58E489D9981"))
    {
      return 7;
    }
    else if (!strcmp(__s1, "7C3CD59A80673DD0787DF037FB1FB45E0EB635BFDB2554E10CBF5D056FEDAB78"))
    {
      return 8;
    }
    else if (!strcmp(__s1, "E484E42F34BF2E406D25EB38451C67D3C3C9CB9DEB9222C4F5E21E7E6729C787"))
    {
      return 9;
    }
    else if (!strcmp(__s1, "A1CD5E72A4CAD33DD4C2190F293103B9FD8B40FFE76B1A99A195768465964F91"))
    {
      return 10;
    }
    else if (!strcmp(__s1, "1FFBA951E06F1A7810DC823264210F0C13273E454D699383F3D6265630FEDD53"))
    {
      return 11;
    }
    else if (!strcmp(__s1, "3856FBD8576C0AA988700D7EF5787AAAE94A3BBFBB393B0426FA9D379DA69C91"))
    {
      return 12;
    }
    else if (!strcmp(__s1, "76F5A23AACC27615C980BE3E58B52994192195866836855BCA7C3F885796297B"))
    {
      return 13;
    }
    else if (!strcmp(__s1, "4BF63E209F7D92B4E8341476C80013664D3299327C72E7A7F0D16E1CBD4904FC"))
    {
      return 14;
    }
    else if (!strcmp(__s1, "260130B343BA0695AB911D986B3870FA0CCD0EC58E6F55895A856F37201CE9F8"))
    {
      return 15;
    }
    else if (!strcmp(__s1, "79E88035C9BC883D403F17831B8C9264E643C6B76E9B3C1451B49B0F672C32BF"))
    {
      return 16;
    }
    else if (!strcmp(__s1, "100299043F027ADADB62685130C7FBE549E29F08B58C365844FF8EC25BAEEAB0"))
    {
      return 17;
    }
    else if (!strcmp(__s1, "AA1E812506867A5F2C54D3BA3268DB5C4BB2C6B0E4F500340DD23C4E1E637D9D"))
    {
      return 18;
    }
    else if (!strcmp(__s1, "5D4640C1160E691CF9E1DA7FE475482756D03567716B9856424469B31049A457"))
    {
      return 19;
    }
    else if (!strcmp(__s1, "3476066F46CC277DE7616AAAD8FCDF2C28DA42293B231F74A62159EB6EDAC78C"))
    {
      return 20;
    }
    else if (!strcmp(__s1, "547021D0E82D62B7841769A23FC7FE04F7A63B8A0528A3F6E4C67E8B9420360E"))
    {
      return 21;
    }
    else if (!strcmp(__s1, "295D65BB175E4E4EEF9003E008E093043C9B8CE43190BE0A2D8F1771F9837033"))
    {
      return 22;
    }
    else if (!strcmp(__s1, "3AFE7FC24E518305DB9BB516AE4AA6725E13A423016B31BAFEBFD6FA09AFAFCD"))
    {
      return 23;
    }
    else if (!strcmp(__s1, "37C7DEA7C7AC62E48672D62B73746ED032AC86A05AA223DB4F373D44F106CD6A"))
    {
      return 24;
    }
    else if (!strcmp(__s1, "42EA38C66C2CC54A764D5E204FF38F3402542A5F05B7731D549F22D745429051"))
    {
      return 25;
    }
    else if (!strcmp(__s1, "F6D454657EA6A999B3D168C1A68D6592B2F348BA088B279DBF0A992754767224"))
    {
      return 26;
    }
    else if (!strcmp(__s1, "63CA0F7A21417297C42CDF8868259FBCECF5C6A5C1C994C3A1CA5F608179B458"))
    {
      return 27;
    }
    else if (!strcmp(__s1, "75D1CF68BBA66F3E658B115EF614F1449D832863CAF5F46D092488791378897F"))
    {
      return 28;
    }
    else if (!strcmp(__s1, "F4B1ED932C463D5EE2A9E1F0BEC7DDE12141635B8C1BC09662243EA36A1E2ECE"))
    {
      return 29;
    }
    else if (!strcmp(__s1, "511B8B14F417FD34A16CC128C14014AD2B4C5A60B3B053D963C78631DD6B3B89"))
    {
      return 30;
    }
    else if (!strcmp(__s1, "932639B5CA9FD3BE98F2787A2CDE095AAE9CE2D64A911486D12757EFBFD85140"))
    {
      return 31;
    }
    else if (!strcmp(__s1, "09ADF2F2D849AAB1B547CE687B45B30560D5965A6EE176E97CBC14EB63728DE2"))
    {
      return 32;
    }
    else if (!strcmp(__s1, "C2DF6BB1B96D7879744E5D54DEB55C12D7A9ECFF52AF539FC1FA63882B058A70"))
    {
      return 33;
    }
    else if (!strcmp(__s1, "8C96A68570A6DF5B4ABA9577C27042A37A60B8FBD6BC9DE3F909EC683406A5CD"))
    {
      return 34;
    }
    else if (!strcmp(__s1, "7B36DACFCE6FC736238A397E5EF2F7E25BE954A649117EE12A916CE79F75B94A"))
    {
      return 35;
    }
    else if (!strcmp(__s1, "80C734FBB111112ADB288D1CA5E1A6D5381987D38F4DFA08EFE8CC3C5F1CF131"))
    {
      return 36;
    }
    else if (!strcmp(__s1, "3A6B5C3F24147C27899AEB7FF2FE3FB579A0D79BE4AB9BE54E7F31F7AED99F24"))
    {
      return 37;
    }
    else if (!strcmp(__s1, "23C55391915968963B369CFA8F5BE79A370ADD2CB37A32A0C9267269406EC6E8"))
    {
      return 38;
    }
    else if (!strcmp(__s1, "1394031F165B7EE472518C80605434939287CE630C3E2BF45774C422646BDB52"))
    {
      return 39;
    }
    else if (!strcmp(__s1, "B664BC44BBFB5AB784B0240FFB637DC636A9B7CEE13D6D556ED1D4ED56E9DEF8"))
    {
      return 40;
    }
    else if (!strcmp(__s1, "2AD526A49877323714C9104CAF0E3F117082A43D0955315AF0F43F7AADFF2586"))
    {
      return 41;
    }
    else if (!strcmp(__s1, "0559E51C335EC81412374E33F830E804DF39F2FF796E95308A25A8A8BFA0475A"))
    {
      return 42;
    }
    else if (!strcmp(__s1, "656B51D5FF08D489CFD54BA967A44D9FBB3DEE2BEF089EADFF59F0176430773E"))
    {
      return 43;
    }
    else if (!strcmp(__s1, "08E5DC7B9F52DFF7963D2715D3927A1356E247326CAF5C76830A7D7227B991B0"))
    {
      return 44;
    }
    else if (!strcmp(__s1, "97566BDFEF237739AC2EFF164112983D98FCFAC0EE4F30C671D4908D02520208"))
    {
      return 45;
    }
    else if (!strcmp(__s1, "5ABE83ED58C646C0795991EFC53EFAF95AD3FA933AFD23A5181FDC1D4DFDFBA0"))
    {
      return 46;
    }
    else if (!strcmp(__s1, "F7FED94B5F000049299482FDF5F0D7700B1A29309A0313344D1B861FDC715239"))
    {
      return 47;
    }
    else if (!strcmp(__s1, "CD2FFA0725298FE71DCD34C05D62ABC16C9F0A5690297DF5376D65198C5D7890"))
    {
      return 48;
    }
    else if (!strcmp(__s1, "DE73E30C620D682FA8317A0FEB5087A2C63811110674D46B9894D955808CBC9E"))
    {
      return 49;
    }
    else if (!strcmp(__s1, "B1981D6FA7779DA1E867116607CFA5B05E44C5C8D8A9E8AD1906FEF7F8BA1874"))
    {
      return 50;
    }
    else if (!strcmp(__s1, "B942A1DFEF5624B827CF986CC919BB4891C1C421645311F2355CE6766AEBEF2E"))
    {
      return 51;
    }
    else if (!strcmp(__s1, "B2D70BAA5FA87BB6C253C5314B6E833D882783F1E906897B196FCC4D6572D5C6"))
    {
      return 52;
    }
    else if (!strcmp(__s1, "AD07330BE6EF87E08C9E5D058B4CBD9F71C39D7C1B916A834F263B5E7B3DFC43"))
    {
      return 53;
    }
    else if (!strcmp(__s1, "9AD2DE6034B18A80CF5573485FEEE0B7EBF72DF6DD292271C9B412FBDF8037C5"))
    {
      return 54;
    }
    else if (!strcmp(__s1, "2BBC664C4BF8238D5FC7A5376438D13CE61B9EBC1FF8EC52F6F5A80543BEACD4"))
    {
      return 55;
    }
    else if (!strcmp(__s1, "B4E21A931309227166902DC5A3E8BACAE69D267A7E733A61139712AC108C6E4E"))
    {
      return 56;
    }
    else if (!strcmp(__s1, "B0FE94C089261C381766B5366AEB1C6ACBF46BC57B4298D568C5EDFCABE30A8A"))
    {
      return 57;
    }
    else if (!strcmp(__s1, "3EFF071A6AD7AF2F6FD8A87059C9CDD5937E87D8B9B4D215C449748133129BDE"))
    {
      return 58;
    }
    else if (!strcmp(__s1, "0B5AF8D437BA25AB6225EADB7A0FC92659AAB2122AC993E00CFA2F83B0E143B3"))
    {
      return 59;
    }
    else if (!strcmp(__s1, "EE48140733BA4D00D8E6CB099101E0BBB6FDB2F71FC05FC0FEAC8A6CF3100B14"))
    {
      return 60;
    }
    else if (!strcmp(__s1, "152B31D6CDC80AD2A7F1593F1E81074F9FEB957043B213E8537F5C9098DFD449"))
    {
      return 61;
    }
    else if (!strcmp(__s1, "0E8C0AF79B626C37D4BD04D61ACC6B1841B7F784FEF6692E84A2B1971C771CF6"))
    {
      return 62;
    }
    else if (!strcmp(__s1, "12038A812C239440324EDCEB54DA13B6B7D0C4D89F61582F9A4628C4409FAAE6"))
    {
      return 63;
    }
    else if (!strcmp(__s1, "12ADE1668F06776E2CE9CC2CC563E0BD45A5346C6D883D748FD3C132E7EB8A2F"))
    {
      return 64;
    }
    else if (!strcmp(__s1, "D5D2B254E0B808929711EBFC999F2E0F884DB9876C90B056E230E4DD6D3261CE"))
    {
      return 65;
    }
    else if (!strcmp(__s1, "CA5FDEAD1B2DEC16F5B525E9AE3CA7C4EDC163EEE950D7A77A7C5284A607369F"))
    {
      return 66;
    }
    else if (!strcmp(__s1, "28B92DE785184753FAF5508E080CB8FE784D6A5214E5E6382751D52534A72FCE"))
    {
      return 67;
    }
    else if (!strcmp(__s1, "316635C054256728753D20516A98550DBF581EBA16691321F7BBCE3A9177E09D"))
    {
      return 68;
    }
    else if (!strcmp(__s1, "D2D14661D9692EBD5065F06CB4C2AC7DD14339CAEA538D5AFA4A2B5813E87D5D"))
    {
      return 69;
    }
    else if (!strcmp(__s1, "96775CCE99E1AD0C194329938D933579304BAD868B3720C34D20D27536E7AEE7"))
    {
      return 70;
    }
    else if (!strcmp(__s1, "615761368EF9DB43D1A8DF2EF1CC087B17906454F025A1E1C5BB95B022582B9B"))
    {
      return 71;
    }
    else if (!strcmp(__s1, "2A5A81F290FDE6D31DB132DD493737A7252C441023286294F3C77CE48DD4E2F0"))
    {
      return 72;
    }
    else if (!strcmp(__s1, "7262FC4EB2434704063840AB716EF14B50F3A0E5E3457E8EBF9E014325CAE94F"))
    {
      return 73;
    }
    else if (!strcmp(__s1, "A2B9B85B3AADE88EBF43D3DB522C31E6A781700C0112047F72FA920A638A69BE"))
    {
      return 74;
    }
    else if (!strcmp(__s1, "D97205C2B224673AE923C3A7A003D96258A1A774E1C9E3CD513B0706C6657D48"))
    {
      return 75;
    }
    else if (!strcmp(__s1, "0C60DB8A2A73C9B343C4B279EDF24580976BD74BD0294B1AAC17B0A4273D8C28"))
    {
      return 76;
    }
    else if (!strcmp(__s1, "27A93DA3DF54447DCB9F371C54907BEFA8F17B7FA905EDAC2B523C7A0D93A918"))
    {
      return 77;
    }
    else if (!strcmp(__s1, "F98BB9D35C454CA00A884F6B9621A30F2C78A880A96D81B5E661391D74E8455A"))
    {
      return 78;
    }
    else if (!strcmp(__s1, "AC00030F77E6F4E41BF49DC8D7A42C68813DB0C3B652C340B340C01873EB0AB7"))
    {
      return 79;
    }
    else if (!strcmp(__s1, "BA7A33DF7A125E9EE5C1036DD6DADB3B74CC4B9BA9C5C1B235C131E70B7B4E41"))
    {
      return 80;
    }
    else if (!strcmp(__s1, "038FA673BF47F15B7C5236E4863A96C910C3993AB31529A041DE199F3EEB66CB"))
    {
      return 81;
    }
    else if (!strcmp(__s1, "E44B08E42854960D4B0277D46D6181F8B07FAC3C3CCF5A6B31AA9DC9FA4057D6"))
    {
      return 82;
    }
    else if (!strcmp(__s1, "B80C09BAE4062CCC534F6E6EF6EA6E0ABEFF12048A342EB3138E7B76890D8D3B"))
    {
      return 83;
    }
    else if (!strcmp(__s1, "00EB2F035A98609505AB8DAB9B98D1FECEAA766F368932F7FE6316AE8BAEFBE0"))
    {
      return 84;
    }
    else if (!strcmp(__s1, "6368DD78E9738AAB3001F4C17EBE26BFB0414CDCC1399D092A48AB5A57536454"))
    {
      return 85;
    }
    else if (!strcmp(__s1, "C0909793BE0330B378C0CD09F0D9B9F09F599EC8C6B94C37ABA9011E83596F90"))
    {
      return 86;
    }
    else if (!strcmp(__s1, "11221127E966E92C6C18F64D312E8C9AF73DB3A9DB792E4442FCECE644A8E7B1"))
    {
      return 87;
    }
    else if (!strcmp(__s1, "FED7B076A3D7DE52B6D9A21D14FB1A49BABF975B73BE74181C4EA26976162724"))
    {
      return 88;
    }
    else if (!strcmp(__s1, "26456E27CBF6165D84C883AC666AF50E5EAAA39D07887C37BD3A9BD26A74B2FE"))
    {
      return 89;
    }
    else if (!strcmp(__s1, "F365A0CC0EEB38797FCD82D5E4AC3B2ACF44EB34D333D4AB1AD8D8891B7F8892"))
    {
      return 90;
    }
    else if (!strcmp(__s1, "A5F302F870E09D718474CBCADD4E0B3589351A5007777F1B805169B54226B875"))
    {
      return 91;
    }
    else if (!strcmp(__s1, "903B8B51F5368A75F9777D9155C6A2664116770701ED241A6D1662131A802333"))
    {
      return 92;
    }
    else if (!strcmp(__s1, "DD96D75C3E233EE9B4528803691C00E98D5F49F2B4B3B83676332ABFBB65DE07"))
    {
      return 93;
    }
    else if (!strcmp(__s1, "F2F4280636DC1065AEFE537517EE6B816C8133EF2E5C106D92DDD2B0E0DFC69D"))
    {
      return 94;
    }
    else if (!strcmp(__s1, "EA4B7DF630D01A5FC30F51DEEC420CB0F667CC57639F1C1D8E67D97B12524E0C"))
    {
      return 95;
    }
    else if (!strcmp(__s1, "89DBD24AAAD1D4D50F3F74A7040B52C5B06B4768F1E09DC89D4067D243744882"))
    {
      return 96;
    }
    else if (!strcmp(__s1, "F942A7256C77ACD182AE0B767F21133B11937660A61610A18CD14087D1F2F71C"))
    {
      return 97;
    }
    else if (!strcmp(__s1, "A739EE6D2886FEBC60795D1D8803BF19A1A3463541AB6024A90DBB8E4650F589"))
    {
      return 98;
    }
    else if (!strcmp(__s1, "7B872939683DD4D93E917C20089932C93AACDE7E7C0738CB78026B6FC178B1D9"))
    {
      return 99;
    }
    else if (!strcmp(__s1, "9EB2D21E75D0AA677C8D110763485DB3A78262C89D05CA0C3AF7EBD2D6AB99DD"))
    {
      return 100;
    }
    else if (!strcmp(__s1, "AC7E4629ABFA704A6369754CB199383D2901F0916E230FB75D765420550E8244"))
    {
      return 101;
    }
    else if (!strcmp(__s1, "FF9225FC7116F7583194D2D2F948E6CFD131F9020C7B7C9D61A8DE2F46571C5F"))
    {
      return 102;
    }
    else if (!strcmp(__s1, "3216E3D0006FC749B832DD3C33FF4B7CAE3CE455B3FE030A3EB061DC0356D829"))
    {
      return 103;
    }
    else if (!strcmp(__s1, "41E40C57A9236569333335DEA9CB52F0058A4BF366335B45406F04F7E0A93CD5"))
    {
      return 104;
    }
    else if (!strcmp(__s1, "2F5E861CD13CBCECC15CB691FCC7DCE54FC0755F96F1289D26AFB056BD6788D5"))
    {
      return 105;
    }
    else if (!strcmp(__s1, "0C7AC4ECF65C2CA6215B602A5C050FB69BFF2BA322B47A6890E2F0EE8CA922C0"))
    {
      return 106;
    }
    else if (!strcmp(__s1, "6634D05466F515CAD98B1548EE7DCC52386712E059BE4C1A3FBB157892D9D61E"))
    {
      return 107;
    }
    else if (!strcmp(__s1, "C1F228965CE72DCBDF0563CA9125430BFC5215644CF7426375AAE844D9C393CF"))
    {
      return 108;
    }
    else if (!strcmp(__s1, "860E5D173A5DA8DE4C5A88EDDF57BFB0D9E7D010DFD109852AF3D1C8480DE485"))
    {
      return 109;
    }
    else if (!strcmp(__s1, "2FAB2C822F900089CD78CBC4AB947F23F8CD8C71D0257BB20870F2437F345683"))
    {
      return 110;
    }
    else if (!strcmp(__s1, "A2AEBDCCCD11BCF937DC0DE23C78762A9FD1425DA34EE911F615F041D947D3CE"))
    {
      return 111;
    }
    else if (!strcmp(__s1, "C517BA395C2A64392D1C11AE86475E6F476E22867252458FCC5152B58A43603D"))
    {
      return 112;
    }
    else if (!strcmp(__s1, "E5FA747F28EBFE3E4BBD4BE279044F914B09502E3EB62035341300536242F90B"))
    {
      return 113;
    }
    else if (!strcmp(__s1, "7973408EAAC4FAF261DDB68AD698E34EFC1018CD38876DB49DA34E1C044F2CFC"))
    {
      return 114;
    }
    else if (!strcmp(__s1, "7EFBE7B468F2C8FF4C34E67EDC7E8F80DB3E295C6221F8408D4440A78430C64F"))
    {
      return 115;
    }
    else if (!strcmp(__s1, "D67C31C99E39309E5E09E11F7A5E7B3576972C57135463976A5539814860D051"))
    {
      return 116;
    }
    else if (!strcmp(__s1, "3473F3E1E2A85DAEEB664F0C421CDF84D3B27258796FFBB2881208B73DEFC007"))
    {
      return 117;
    }
    else if (!strcmp(__s1, "CBB7FC5C90F6950C90B30709E38AC295085E9F9A5D82EB5DF56E89752A1E0252"))
    {
      return 118;
    }
    else if (!strcmp(__s1, "1B57426DF9B957C95C4296A880A1D75B70200B72E8554E7D713D37098154E907"))
    {
      return 119;
    }
    else if (!strcmp(__s1, "F5B97BA71877E7014D8BB80B1B5750123154A26D4FD86B41AE0525EDEF44A41B"))
    {
      return 120;
    }
    else if (!strcmp(__s1, "E2175386E8858E1E5273EB120A19C734896FE34E529B7720E38F90C3E66633CC"))
    {
      return 121;
    }
    else if (!strcmp(__s1, "A5AD2AAF51022A15627C4C6C3F18D612BFF2CA7F01F65EC1C26965ED6DDC6563"))
    {
      return 122;
    }
    else if (!strcmp(__s1, "89FBB3BDB9379AD11D47A5F312EDF73706C589F07B8C14BE99A3D604DA840455"))
    {
      return 123;
    }
    else if (!strcmp(__s1, "BEE28431C5E817DF3C9C265B3672660D03A6C89EE5236507323554958AE59578"))
    {
      return 124;
    }
    else if (!strcmp(__s1, "1F6D45D5DEB05AFFD7C7C1DAC38D882FA9A9D616990FBB135621C1F0D30CA596"))
    {
      return 125;
    }
    else if (!strcmp(__s1, "24B2EDEBE37A35C073BBC2B83505D52B7FDB9C121406C6308CF528457883D4BE"))
    {
      return 126;
    }
    else if (!strcmp(__s1, "D51129E2277ED8B7AE37E82DA9F8FEB9C3FDB71EC4E4B5548B4D3763A89AF1C2"))
    {
      return 127;
    }
    else if (!strcmp(__s1, "CFEE285EA42317F1E8CE16B6BAED451F1D8029F8C057963B2486EA9093B3CD28"))
    {
      return 128;
    }
    else if (!strcmp(__s1, "AEB4C02667999241FFC01E220B4443963E1B34D3ACD2C5545F5BBE1143870378"))
    {
      return 129;
    }
    else if (!strcmp(__s1, "98A511FEF2F07DAECD3383521C19383B6DCA2C733FA4611CDFA49CC62B7B5181"))
    {
      return 130;
    }
    else if (!strcmp(__s1, "40A9788933E5BA39796E86A50864B263BC0F2291A4B895C7EA6BBB144E5DACA5"))
    {
      return 131;
    }
    else if (!strcmp(__s1, "51A34CA49D64B984F464BC878382CDD07EEF0B001EBE4F2E95026F21673969A7"))
    {
      return 132;
    }
    else if (!strcmp(__s1, "D469DF7536BAE8E1DE2CB8B3C1E14B4133343771592D97C7BCEC1D03BF0EE40A"))
    {
      return 133;
    }
    else if (!strcmp(__s1, "83B2F8BA9316B9EFB16E84445A86F4306028A166E21E7B350C8D908E696445FC"))
    {
      return 134;
    }
    else if (!strcmp(__s1, "ECE8C77FAA463F6CD7C69976F66D170E06AABA1F8EAADE7E5C2EF059C7FD1BC6"))
    {
      return 135;
    }
    else if (!strcmp(__s1, "06E83674FEE3BAEADDA04BCE4F798E64EAF9562959486A334178EFE9614AFE02"))
    {
      return 136;
    }
    else if (!strcmp(__s1, "92CB5205D6DC7B8CF67306FCBBF4D2E22C50A82E14C323C9869A8154961E1379"))
    {
      return 137;
    }
    else if (!strcmp(__s1, "CFC88028D48CFFC122779E410D958A0644A7B3219492B8F56805460AE11D3317"))
    {
      return 138;
    }
    else if (!strcmp(__s1, "87BA80BEA278BCBDE11D4ADFEA6B3C8BEF365D8260CDE3591D5B76B2C36DD853"))
    {
      return 139;
    }
    else if (!strcmp(__s1, "C38EE6AA610415ACB3D10D68E346EE868CDB70CFC2F46D887E5E152FD4A256B2"))
    {
      return 140;
    }
    else if (!strcmp(__s1, "D2D6A9827703DC8826305F130123DE83C3648F82DCB4F96DFCD7E33EA799BD62"))
    {
      return 141;
    }
    else if (!strcmp(__s1, "9B37F49C310110FE3C1D0349A0DBD1F4165E5E1873418FE3D8E02DBD2C42360F"))
    {
      return 142;
    }
    else if (!strcmp(__s1, "3E6CC5C197ACBED66DB18F36FE33CAF7D744175ADB2FE6C6FAE97B0CBB5B21CD"))
    {
      return 143;
    }
    else if (!strcmp(__s1, "250DFDD8D5BC61F9B0D9CD91F4DDCE0E4799ED7B1264EEF03FAD66612BCA288D"))
    {
      return 144;
    }
    else if (!strcmp(__s1, "6EA38ABD760FE83DDB724F359C9F761841C5BD69E5DCCC1C211D42F98751EF80"))
    {
      return 145;
    }
    else if (!strcmp(__s1, "F9F04A751DF32AED42FF9EFB131D3CD40E499AA0A99A68D0DD6778167E42BF26"))
    {
      return 146;
    }
    else if (!strcmp(__s1, "5BA476059E7B48575673F80A8DC1251E26C5B23F5DCF5BCB3AB1251D0D3424E8"))
    {
      return 147;
    }
    else if (!strcmp(__s1, "357D351342C59B72F21BD4580AD1B2F1C4C47D0006AB615A4760BC3BEBD99E48"))
    {
      return 148;
    }
    else if (!strcmp(__s1, "D613D0441777617363D2EF9031155D28A493ED4CF2B714C61332BEB8E694A21C"))
    {
      return 149;
    }
    else if (!strcmp(__s1, "8751E932723FAB8324B1EFAB05DE911953F94AB079963EC9D4882EC0F853207E"))
    {
      return 150;
    }
    else if (!strcmp(__s1, "EA870EDD0C8AD026DB44FB5C6AC53D8875D62255F794C489EAB9F8222F0616CB"))
    {
      return 151;
    }
    else if (!strcmp(__s1, "B0D00D3E15F0D45E0DAD2FE819496F3837110BDADE01AC3A17862CDDACDEE5AB"))
    {
      return 152;
    }
    else if (!strcmp(__s1, "7B4CF9B631F81D78F2CEA2F4869D0137BE4CA667AE9B13DB22A617C2BA15C075"))
    {
      return 153;
    }
    else if (!strcmp(__s1, "CA1DD5B830AB9668FC5EBD5904EB9B0113C766FCE57EF59AEC58982AE744413A"))
    {
      return 154;
    }
    else if (!strcmp(__s1, "2D29DA77B4EF8E7B1D2F3F764587274747D1C2AB05C053B4CE38AE701116BF6A"))
    {
      return 155;
    }
    else if (!strcmp(__s1, "83156D57355E76E46E7319E18EA9D6A8D20E78958733028FD3F74C3FD9B0BCC5"))
    {
      return 156;
    }
    else if (!strcmp(__s1, "95DD082534B76465BAA6B38551429C11CD11A77CB351740B05F3D18D2CD2B990"))
    {
      return 157;
    }
    else if (!strcmp(__s1, "996E91405229B0F31165936664CCE9F7D3145963C1A14FA9DD57A320E349F123"))
    {
      return 158;
    }
    else if (!strcmp(__s1, "294111BEC0EE4CFDDCE430D197B75A1CB09E21EB1C822E16CD1CBCC982D46A3F"))
    {
      return 159;
    }
    else if (!strcmp(__s1, "727820125C45F365E03E3C14E8202CFF1E0049F24543B5D589F3956E11F5C581"))
    {
      return 160;
    }
    else if (!strcmp(__s1, "33634F0DC72BA827D588E38DC75C388CF4976E4671D85148780CFAFD262B07FB"))
    {
      return 161;
    }
    else if (!strcmp(__s1, "FD6F91B4C067953424B95F0B332F0FB4A64F7E43DC4D6E8CDE26B1D5D7C07A42"))
    {
      return 162;
    }
    else if (!strcmp(__s1, "50E7E1AAC46F3CF79A6B3BB2DDC0BCDCF0ACD9011439415E47AEA7B6579F3EA8"))
    {
      return 163;
    }
    else if (!strcmp(__s1, "25C93B5B4A76FFE8A20CA68271CF612F43D0B5504B6680945F3BB046DA47213A"))
    {
      return 164;
    }
    else if (!strcmp(__s1, "B6B78FABA9FD12B688986DC5EA4D4B8B731265EDEC1E5AE52B0CAA6FC31801F2"))
    {
      return 165;
    }
    else if (!strcmp(__s1, "55DDF08ED5B641C5048444150A2D58A930D81F86EEA506CD8B4073F64FC0F1C2"))
    {
      return 166;
    }
    else if (!strcmp(__s1, "C4B3D90E89BC6B96BEB336D1A17757038334C2A490EDF56428037F1BC405BF70"))
    {
      return 167;
    }
    else if (!strcmp(__s1, "E0822A12A8DD1B222198A771537F2CE4899EB45BC94D7854E0E6FA983E6EBC89"))
    {
      return 168;
    }
    else if (!strcmp(__s1, "FB75B1EE028F765D95134B65BAFD26602EE879B247F31514268AFE1DF00830D4"))
    {
      return 169;
    }
    else if (!strcmp(__s1, "C8CAD3DF32303A6876151218FAAA63CA0642964F0528B51E0F3BBA792A0FA006"))
    {
      return 170;
    }
    else if (!strcmp(__s1, "EED11884758646FD70438F8D2661EC13F25DF1E40EC651E073736D2EFDAB9F0D"))
    {
      return 171;
    }
    else if (!strcmp(__s1, "E01BD71065BD9CE02CFEEC935E09F6DE3C3B9EFAED8F187A533C6321069B4D85"))
    {
      return 172;
    }
    else if (!strcmp(__s1, "E4079A9FE3685ED6370986B0373FFC91E49069A610571534C42255467036D7CD"))
    {
      return 173;
    }
    else if (!strcmp(__s1, "6060A012307BC0711368543129DC26F4493F2C5C30CAF9D4F782C065929930B3"))
    {
      return 174;
    }
    else if (!strcmp(__s1, "11F678510139CFDE77DC68F07F633C61D28564C9B207D45849B5E6AB72B41E0A"))
    {
      return 175;
    }
    else if (!strcmp(__s1, "9C397DD48F0AD6AAD1F9B2ABA077E5808FA3D4E452B659013FF3CEC6D1EB1472"))
    {
      return 176;
    }
    else if (!strcmp(__s1, "D1922B4CF1F4DC1E2062378D34EE4E6EAB398BD0417BC95E5EF60C5C1F53E035"))
    {
      return 177;
    }
    else if (!strcmp(__s1, "7D8633F6EB10ABA43002BB46D28FA26BFFA1093AB39728908221CE3FD922C72D"))
    {
      return 178;
    }
    else if (!strcmp(__s1, "DFF91EC9DAE4F9D14485F569D87B6AC75F93DD47C850ACF09E9DD7A3D0EFCE8A"))
    {
      return 179;
    }
    else if (!strcmp(__s1, "8F37B8C186E20EAB68B65FA965112E8C106205370CA0829C3EBD548C49C99A46"))
    {
      return 180;
    }
    else if (!strcmp(__s1, "3FAA4DE8275531852B39C91E52291523AEA993A6114D2CF7645F7C8AC1EF27CE"))
    {
      return 181;
    }
    else if (!strcmp(__s1, "6FFBFD65F64B0F892C812D9952748E8632E02C4DF155F5E233927E6D0DC88D38"))
    {
      return 182;
    }
    else if (!strcmp(__s1, "2660D91E9E44E8375C647F1F4FDD89923B3BFA26A3AF29D5937BAF8EF1E10CFE"))
    {
      return 183;
    }
    else if (!strcmp(__s1, "3CCBBD2DBDE74F294638B5661472C6041FD802D082125437CB926C2F4E201182"))
    {
      return 184;
    }
    else if (!strcmp(__s1, "0597494BBDA7FA995805FB01DD8AD6D81CC143C09F8EFB86702288F745E3F791"))
    {
      return 185;
    }
    else if (!strcmp(__s1, "0AF6A9208DBB7C0C06A19C4C9090BF87CF00BBEE2BDFD9E0C49423DD641C1174"))
    {
      return 186;
    }
    else if (!strcmp(__s1, "6CFA2D1125EAFC658FDF0E2F1A1B4F8D315296A1AFB116D0A8ECF669C026FF69"))
    {
      return 187;
    }
    else if (!strcmp(__s1, "0D32627A10C5DB983D8E5DF466E154001CBB4E945D22A4E280A08C8D0F1701A7"))
    {
      return 188;
    }
    else if (!strcmp(__s1, "B6C42286FD0AB628E79B9D4F5F10DC31C2DFD460570800BEB5C9E53651363C7D"))
    {
      return 189;
    }
    else if (!strcmp(__s1, "5DCA18DF36F9FA665E30157E71359C15F04492B59DA944CC2B10D7A925843DA7"))
    {
      return 190;
    }
    else if (!strcmp(__s1, "5851D9888A5EE313F6D80CC60F6BB6ADFC20BB0BA8D9BED753F04382DF6BED1A"))
    {
      return 191;
    }
    else if (!strcmp(__s1, "FD406D36CD5763CFC9F0DD6C37C7BDC528ADF3990CF9725229F4258C1758C94D"))
    {
      return 192;
    }
    else if (!strcmp(__s1, "EC02EE62A95DE2B0B2BC9C65A400E1318CFD7FFA894EECC7B23F8FB164A10C08"))
    {
      return 193;
    }
    else if (!strcmp(__s1, "81E23B94D526C5353E9E499DE4D53C13BAC39B09D64961C3259B99425E493446"))
    {
      return 194;
    }
    else if (!strcmp(__s1, "D36BDC945E9A3C2158D269457AE35CC5AD63543965D991AB68A2CC0556E31D50"))
    {
      return 195;
    }
    else if (!strcmp(__s1, "EEC15933C85F49CDCD9A4DC75821303FD2E5E1A8E2651667DB103FF51457DF71"))
    {
      return 196;
    }
    else if (!strcmp(__s1, "19FCC75261554C74A79C9151422F265347FC6282808C4BB8E9627195837B3682"))
    {
      return 197;
    }
    else if (!strcmp(__s1, "54D70702DEC6F85C65B8D1E26F089610058B0CDC6B23440F6FD07F26E6E23315"))
    {
      return 198;
    }
    else if (!strcmp(__s1, "244B94B5F2129A5A0083F3661EAC9C6B9EB5FB62A499E6ED236452F5BE6828F5"))
    {
      return 199;
    }
    else if (!strcmp(__s1, "2C9ACA342CA7C8F4A29CA1C798155F709AC8B8D95F0D20C549DBC00F1C42184D"))
    {
      return 200;
    }
    else if (!strcmp(__s1, "972B60C198C39199A11F25454037CADA381BB118BE18D850A36534F88A82B7F1"))
    {
      return 201;
    }
    else if (!strcmp(__s1, "0AAC94B02176D8B144479EAFEE546A608C8B5E61D7A27481868626A7820E0CB1"))
    {
      return 202;
    }
    else if (!strcmp(__s1, "5537928133BBD235A03487186F42FBFF9D0FC45873C83FD5219EB5EBF500ED10"))
    {
      return 203;
    }
    else if (!strcmp(__s1, "1ADDCB1D74CE36E8E4C6007CDB14DD6A053A9C2FBDB707345B3C5E7BB07299AA"))
    {
      return 204;
    }
    else if (!strcmp(__s1, "353FBA19946FC52BCED9C06F6EE4844496369F4985110F6E78E467505E48C88F"))
    {
      return 205;
    }
    else if (!strcmp(__s1, "E2D94E3051875514422124C186B05CDA6F417AF1FC67511A17055B65BED227AA"))
    {
      return 206;
    }
    else if (!strcmp(__s1, "E9FDDF0E4E3D3ABB4D40C135F207C0310E5BE4CCF2EC1099CB89594DD756B745"))
    {
      return 207;
    }
    else if (!strcmp(__s1, "A6DE7D11FD45FD0B0F5541862F786FAAA17E530F3CBAC5CE63EFD6C7B7B8EC27"))
    {
      return 208;
    }
    else if (!strcmp(__s1, "53E08B2D38CDBBC0D198B95302BCC632B50E773651E9BA4C57373B002114CBBC"))
    {
      return 209;
    }
    else if (!strcmp(__s1, "E21086636B17AA11D0ECA0545AB90C82D396EB03C6D33A9DE49DEEC71BFEC9A3"))
    {
      return 210;
    }
    else if (!strcmp(__s1, "18487C9D7CEF0D61908387ACBCC7316000F44757B4F9C98EA18217C35C6ECF85"))
    {
      return 211;
    }
    else if (!strcmp(__s1, "274A1E04D620A2A93E0AAFC7DB5F0BC3A6322D745709FD3011852A7608D0DC59"))
    {
      return 212;
    }
    else if (!strcmp(__s1, "A6C2B5EE1745CD5EB5C81F2B31F5E946A0C1BDC93B226BB05571EFA08555EF8F"))
    {
      return 213;
    }
    else
    {
      return 214;
    }
  }
  return result;
}

uint64_t sub_958C4(uint64_t a1, unsigned int a2)
{
  unsigned int v2 = a2 - 128;
  if (a2 < 0x80)
  {
    uint64_t v3 = (char *)&unk_4C6CC8 + 4 * (int)a2;
    return *(unsigned int *)v3;
  }
  if (v2 < 0x40)
  {
    uint64_t v4 = (char *)&unk_4C6EC8;
LABEL_7:
    uint64_t v3 = &v4[4 * v2];
    return *(unsigned int *)v3;
  }
  unsigned int v2 = a2 - 192;
  if (a2 - 192 < 0x16)
  {
    uint64_t v4 = (char *)&unk_4C6FC8;
    goto LABEL_7;
  }
  return 16;
}

unsigned int *sub_95918(unsigned int *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = 0;
    uint8x8_t v2 = (uint8x8_t)vcnt_s8((int8x8_t)v1[2]);
    v2.i16[0] = vaddlv_u8(v2);
    if (v2.i32[0] == 1 && v1[2] - 2049 >= 0xFFFFF80F)
    {
      uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v1[3]);
      v3.i16[0] = vaddlv_u8(v3);
      if (v3.i32[0] == 1 && v1[3] - 8193 >= 0xFFFFE03F)
      {
        uint8x8_t v5 = (uint8x8_t)vcnt_s8((int8x8_t)v1[4]);
        v5.i16[0] = vaddlv_u8(v5);
        if (v5.i32[0] == 1 && v1[4] - 32769 >= 0xFFFF807F) {
          operator new();
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_959EC(uint64_t a1, long long *a2)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = off_7426C8;
  uint8x8_t v3 = (unsigned char *)(a1 + 39504);
  long long v4 = *a2;
  long long v5 = a2[1];
  uint64_t v6 = (unsigned char *)(a1 + 34256);
  *(void *)(a1 + 48) = *((void *)a2 + 4);
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 86) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  uint64_t v7 = (unsigned char *)(a1 + 376);
  uint64_t v8 = 152;
  do
  {
    *(v7 - 216) = 0;
    unsigned char *v7 = 0;
    v7 += 224;
    --v8;
  }
  while (v8);
  uint64_t v9 = 8;
  do
  {
    *(v6 - 48) = 0;
    *uint64_t v6 = 0;
    v6 += 56;
    --v9;
  }
  while (v9);
  int v10 = (unsigned char *)(a1 + 34688);
  uint64_t v11 = 16;
  do
  {
    *(v10 - 32) = 0;
    unsigned char *v10 = 0;
    v10 += 40;
    --v11;
  }
  while (v11);
  uint64_t v12 = (unsigned char *)(a1 + 35400);
  uint64_t v13 = 255;
  do
  {
    *(v12 - 8) = 0;
    unsigned char *v12 = 0;
    v12 += 16;
    --v13;
  }
  while (v13);
  uint64_t v14 = 8;
  do
  {
    *(v3 - 12) = 0;
    *uint8x8_t v3 = 0;
    v3 += 16;
    --v14;
  }
  while (v14);
  unint64_t v15 = (unsigned char *)(a1 + 39632);
  uint64_t v16 = 8;
  do
  {
    *(v15 - 12) = 0;
    unsigned char *v15 = 0;
    v15 += 16;
    --v16;
  }
  while (v16);
  uint64_t v17 = (unsigned char *)(a1 + 39760);
  uint64_t v18 = 8;
  do
  {
    *(v17 - 12) = 0;
    *uint64_t v17 = 0;
    v17 += 16;
    --v18;
  }
  while (v18);
  unint64_t v19 = (unsigned char *)(a1 + 39888);
  uint64_t v20 = 128;
  do
  {
    *(v19 - 8) = 0;
    *unint64_t v19 = 0;
    v19 += 16;
    --v20;
  }
  while (v20);
  *(_OWORD *)(a1 + 39472) = 0u;
  *(_DWORD *)(a1 + 39488) = 0;
  bzero((void *)(a1 + 41928), 0x1CB0uLL);
  int v21 = *(_DWORD *)(a1 + 28);
  if (v21 > 1023)
  {
    if (v21 > 4095)
    {
      if (v21 == 4096)
      {
        int v22 = 6;
        goto LABEL_35;
      }
      if (v21 == 0x2000)
      {
        int v22 = 7;
        goto LABEL_35;
      }
    }
    else
    {
      if (v21 == 1024)
      {
        int v22 = 4;
        goto LABEL_35;
      }
      if (v21 == 2048)
      {
        int v22 = 5;
        goto LABEL_35;
      }
    }
  }
  else if (v21 > 255)
  {
    if (v21 == 256)
    {
      int v22 = 2;
      goto LABEL_35;
    }
    if (v21 == 512)
    {
      int v22 = 3;
      goto LABEL_35;
    }
  }
  else
  {
    int v22 = 0;
    if (v21 == 64)
    {
LABEL_35:
      *(_DWORD *)(a1 + 100) = v22;
      return a1;
    }
    if (v21 == 128)
    {
      int v22 = 1;
      goto LABEL_35;
    }
  }
  return a1;
}