id checkLockedState_bounce(uint64_t a1, void *a2)
{
  return [a2 onLockNotification];
}

void sub_100006380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100006A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100006D38(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100007E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void OUTLINED_FUNCTION_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_3(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_5(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void OUTLINED_FUNCTION_6(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x16u);
}

id _mo_log_facility_get_os_log(dispatch_once_t *predicate)
{
  if (*predicate != -1) {
    dispatch_once_f(predicate, predicate, (dispatch_function_t)_mo_log_facility_prepare);
  }
  v2 = (void *)predicate[2];

  return v2;
}

os_log_t _mo_log_facility_prepare(uint64_t a1)
{
  os_log_t result = os_log_create("com.apple.MomentsUIService", *(const char **)(a1 + 8));
  *(void *)(a1 + 16) = result;
  return result;
}

void OUTLINED_FUNCTION_1_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

void sub_10000C114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

int main(int argc, const char **argv, const char **envp)
{
  if ((_set_user_dir_suffix() & 1) == 0)
  {
    if (serverManager._clientConnections != (NSMutableDictionary *)-1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static MOAngelLogger.shared);
    v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Can't set user's dir suffix path.", v6, 2u);
      swift_slowDealloc();
    }
  }
  serverManager.super.isa = (Class)[self sharedInstance];
  int v7 = static CommandLine.argc.getter();
  v8 = (char **)static CommandLine.unsafeArgv.getter();
  type metadata accessor for UIApplication(0, &lazy cache variable for type metadata for UIApplication);
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  uint64_t v10 = NSStringFromClass(ObjCClassFromMetadata);
  if (!v10)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = (NSString *)String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for MOAppDelegate();
  v11 = (objc_class *)swift_getObjCClassFromMetadata();
  v12 = NSStringFromClass(v11);
  if (!v12)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    v12 = (NSString *)String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  UIApplicationMain(v7, v8, v10, v12);

  return 0;
}

uint64_t variable initialization expression of MOSuggestionInterstitialExpandableListViewCell.didToggle()
{
  return 0;
}

uint64_t variable initialization expression of MOSuggestionSheetAssetViewModel.assignedAssetTileSize()
{
  return 11;
}

id variable initialization expression of MOCircularProgressIndicatorView.blurMaterialView()
{
  return variable initialization expression of MOSuggestionMapSnapshotView.platterBlurView(11);
}

uint64_t default argument 1 of static MOSuggestionInterstitialListAssetViewModel.assetVisualSubTypesToCountString(_:includeCount:separator:)()
{
  return 1;
}

uint64_t default argument 1 of UIView.alignCenterHorizontallyToSuper(margin:equivalency:)()
{
  return 0;
}

double default argument 0 of UILabel.setLineSpacing(lineSpacing:lineHeightMultiple:baselineOffset:font:)()
{
  return 0.0;
}

void *variable initialization expression of MOSuggestionInterstitialExpandableListView.selectedAssetIdentifiers()
{
  return &_swiftEmptySetSingleton;
}

void *variable initialization expression of MOSuggestionInterstitialExpandableListView.assetViewModels()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t static MOSuggestionSheetInterstitialView.EMPTY_TEXT.getter()
{
  return 0;
}

uint64_t variable initialization expression of MOSuggestionInterstitialSupplementaryCheckmarkView.keyColor()
{
  return 0;
}

double static MOSuggestionInterstitialExpandableListViewCellConstants.LABEL_SPACING.getter()
{
  return 0.5;
}

uint64_t default argument 0 of MOEventBundle.orderedAssetReferencesForPreview(max:)()
{
  return 5;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

id variable initialization expression of MOSuggestionPickerPrivacyBadge.iconView()
{
  double v0 = CGRectMake();
  double v2 = v1;
  double v4 = v3;
  double v6 = v5;
  id v7 = objc_allocWithZone((Class)type metadata accessor for MOSuggestionPickerBadgeIconView());

  return [v7 initWithFrame:v0, v2, v4, v6];
}

uint64_t variable initialization expression of MOSuggestionAssetCacheWorkoutInput.workoutType()
{
  return 0;
}

unsigned char *variable initialization expression of MOSuggestionSheetAssetGridView.addedView()
{
  double v0 = [objc_allocWithZone((Class)type metadata accessor for MOSuggestionAddedView()) initWithFrame:0.0, 0.0, 0.0, 0.0];
  v0[OBJC_IVAR____TtC16MomentsUIService21MOSuggestionAddedView_symbolOnly] = 0;
  double v1 = v0;
  [v1 setClipsToBounds:1];
  MOSuggestionAddedView.initAddedView()();

  return v1;
}

uint64_t variable initialization expression of MOSuggestionSheetAssetGridView.assetViewModels()
{
  return 0;
}

id variable initialization expression of MOSuggestionSheetOverflowView.overflowCountLabel()
{
  id v0 = [objc_allocWithZone((Class)UILabel) init];
  if (one-time initialization token for numberColor != -1) {
    swift_once();
  }
  [v0 setTextColor:static MOSuggestionSheetOverflowView.numberColor];
  if (one-time initialization token for font != -1) {
    swift_once();
  }
  [v0 setFont:static MOSuggestionSheetOverflowView.font];
  [v0 setAdjustsFontForContentSizeCategory:1];
  return v0;
}

id variable initialization expression of MOSuggestionSheetInterstitialView.scrollView()
{
  return variable initialization expression of MOSuggestionSheetInterstitialView.scrollView((Class *)UIScrollView_ptr, (SEL *)&selRef_setShowsVerticalScrollIndicator_);
}

id variable initialization expression of MOSuggestionSheetInterstitialView.stackView()
{
  id v0 = [objc_allocWithZone((Class)UIStackView) init];
  [v0 setAxis:1];
  [v0 setAlignment:3];
  [v0 setSpacing:3.0];
  return v0;
}

id variable initialization expression of MOSuggestionSheetInterstitialView.labelStackView()
{
  return variable initialization expression of MOSuggestionSheetInterstitialView.labelStackView(0, 3);
}

uint64_t variable initialization expression of MOSuggestionAssetActivityRingsProvider.idx()
{
  return -1;
}

double variable initialization expression of MOSuggestionSheetHalfMosaicLayout.contentBounds()
{
  return 0.0;
}

id variable initialization expression of MOSuggestionCollectionViewSingleAssetCell.assetGridView()
{
  return variable initialization expression of MOSuggestionCollectionViewSingleAssetCell.assetGridView((void (*)(void))type metadata accessor for MOSuggestionSheetAssetGridView);
}

id variable initialization expression of MOSuggestionCollectionViewSingleAssetCell.journalButton()
{
  id v0 = (objc_class *)type metadata accessor for MOSuggestionSheetJournalButton();
  double v1 = objc_allocWithZone(v0);
  double v2 = &v1[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetJournalButton_buttonTapped];
  void *v2 = 0;
  v2[1] = 0;
  v1[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetJournalButton_singleCellAsset] = 1;
  v5.receiver = v1;
  v5.super_class = v0;
  [super initWithFrame:0.0, 0.0, 0.0, 0.0];
  MOSuggestionSheetJournalButton.sharedInit()();

  return v3;
}

uint64_t variable initialization expression of MOSuggestionInterstitialCarouselCheckMarkView.isSelected()
{
  return 2;
}

id variable initialization expression of MOSuggestionCutoutView.fillLayer()
{
  id v0 = objc_allocWithZone((Class)CAShapeLayer);

  return [v0 init];
}

id default argument 3 of MOSuggestionWorkoutsSnowGlobeView.init(icons:glyphLightBackgroundColor:glyphDarkBackgroundColor:glyphTintColor:)()
{
  return default argument 3 of MOSuggestionWorkoutIconGlyphView.init(image:glyphLightBackgroundColor:glyphDarkBackgroundColor:glyphTintColor:)(&one-time initialization token for exerciseGreen, (void **)&static MOSuggestionTheme.Colors.exerciseGreen);
}

id default argument 1 of MOSuggestionWorkoutIconGlyphView.init(image:glyphLightBackgroundColor:glyphDarkBackgroundColor:glyphTintColor:)()
{
  if (one-time initialization token for exerciseGreen != -1) {
    swift_once();
  }
  id v0 = [(id)static MOSuggestionTheme.Colors.exerciseGreen colorWithAlphaComponent:0.18];

  return v0;
}

uint64_t static MOSuggestionAssetMediaAlbumArtProvider.DEFAULT_RETRY_COUNT.getter()
{
  return 3;
}

id default argument 0 of WorkoutLocationAnnotationView.init(annotation:type:tileSize:)()
{
  id v0 = objc_allocWithZone((Class)MKPointAnnotation);

  return [v0 init];
}

id variable initialization expression of MOSuggestionAssetActivityRingsProvider.summary()
{
  id v0 = objc_allocWithZone((Class)HKActivitySummary);

  return [v0 init];
}

id variable initialization expression of MOSuggestionAssetActivityRingsProvider.timeRangePredicate()
{
  id v0 = objc_allocWithZone((Class)NSPredicate);

  return [v0 init];
}

double variable initialization expression of MOSuggestionSheetFilterCollectionView.filterDelegate@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

id variable initialization expression of MOSuggestionInterstitialCarouselViewCell.assetView()
{
  return variable initialization expression of MOSuggestionCollectionViewSingleAssetCell.assetGridView((void (*)(void))type metadata accessor for MOSuggestionSheetAssetView);
}

double default argument 1 of static MOSuggestionAssetSnowglobeEffect.imageFor(images:targetSize:)()
{
  return 250.0;
}

id default argument 3 of UIImage.composedOf(with:rects:targetSize:backgroundColor:)()
{
  id v0 = [self blackColor];

  return v0;
}

uint64_t default argument 2 of static MOSuggestionInterstitialListAssetViewModel.assetVisualSubTypesToCountString(_:includeCount:separator:)()
{
  return 0x20A280E220;
}

double variable initialization expression of MOSuggestionPrivacyTipCellModel.tip@<D0>(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t variable initialization expression of MOSuggestionAssetReference.transferID@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult.uuid((uint64_t (*)(void))&type metadata accessor for UUID, a1);
}

id default argument 2 of MOSuggestionAssetCacheManager.retrieveAssetsFor(_:withTypes:queue:cacheType:completion:)()
{
  return default argument 3 of MOSuggestionWorkoutIconGlyphView.init(image:glyphLightBackgroundColor:glyphDarkBackgroundColor:glyphTintColor:)(&one-time initialization token for defaultQueue, (void **)&static MOSuggestionAssetCacheManager.defaultQueue);
}

uint64_t variable initialization expression of MOSuggestionAssetMapSnapshotProvider.snapshotProcessingQueue()
{
  type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin();
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  id v3 = (char *)v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DispatchQoS();
  __chkstk_darwin();
  type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  static DispatchQoS.userInitiated.getter();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v0);
  v5[1] = &_swiftEmptyArrayStorage;
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

double variable initialization expression of MOSuggestionAssetMapSnapshotProvider.minimumPinSeparationDegrees()
{
  return 0.0005;
}

id variable initialization expression of MOSuggestionAssetMapSnapshotProvider.mapService()
{
  id v0 = objc_allocWithZone((Class)GEOMapService);

  return [v0 init];
}

id variable initialization expression of MOSuggestionActivityRouteAssetView.distanceBlue()
{
  return variable initialization expression of MOSuggestionActivityRouteAssetView.distanceBlue(0x65636E6174736964, 0xEC00000065756C42, (SEL *)&selRef_systemBlueColor);
}

id variable initialization expression of MOSuggestionActivityRouteAssetView.timeYellow()
{
  return variable initialization expression of MOSuggestionActivityRouteAssetView.distanceBlue(0x6C6C6559656D6974, 0xEA0000000000776FLL, (SEL *)&selRef_systemYellowColor);
}

id variable initialization expression of MOSuggestionActivityRouteAssetView.movePink()
{
  return variable initialization expression of MOSuggestionActivityRouteAssetView.distanceBlue(0x6B6E695065766F6DLL, 0xE800000000000000, (SEL *)&selRef_systemPinkColor);
}

id variable initialization expression of MOSuggestionActivityRouteAssetView.labelStack()
{
  id v0 = [objc_allocWithZone((Class)UIStackView) init];
  [v0 setAxis:1];
  [v0 setDistribution:4];
  [v0 setAlignment:1];
  [v0 setSpacing:2.0];
  return v0;
}

id variable initialization expression of ReflectionPromptView.shuffleButton()
{
  id v0 = objc_allocWithZone((Class)UIButton);

  return [v0 init];
}

id variable initialization expression of MOSuggestionSheetMediaAssetView.sourceBlurContainerView()
{
  return variable initialization expression of MOSuggestionMapSnapshotView.platterBlurView(16);
}

id variable initialization expression of ReflectionPromptView.blurredEffectView()
{
  id v0 = objc_allocWithZone((Class)UIVisualEffectView);

  return [v0 init];
}

id variable initialization expression of ReflectionPromptView.accentColor()
{
  id v0 = [self systemWhiteColor];

  return v0;
}

id variable initialization expression of MOSuggestionCollectionViewListCell.stackView()
{
  return variable initialization expression of MOSuggestionCollectionViewListCell.stackView(1, 1, 0);
}

id variable initialization expression of MOSuggestionCollectionViewListCell.buttonHolder()
{
  return variable initialization expression of MOSuggestionCollectionViewListCell.stackView(0, 3, 0);
}

id variable initialization expression of MOSuggestionCollectionViewListCell.playButton()
{
  return variable initialization expression of MOSuggestionCollectionViewSingleAssetCell.assetGridView((void (*)(void))type metadata accessor for MOSuggestionSheetListPlayButton);
}

unsigned char *variable initialization expression of MOSuggestionCollectionViewListCell.addedView()
{
  id v0 = [objc_allocWithZone((Class)type metadata accessor for MOSuggestionAddedView()) initWithFrame:0.0, 0.0, 0.0, 0.0];
  v0[OBJC_IVAR____TtC16MomentsUIService21MOSuggestionAddedView_symbolOnly] = 1;
  uint64_t v1 = v0;
  [v1 setClipsToBounds:1];
  MOSuggestionAddedView.initAddedView()();

  return v1;
}

id variable initialization expression of MOSuggestionCollectionViewListCell.assetContainerView()
{
  id v0 = [objc_allocWithZone((Class)UIView) init];
  id v1 = [self clearColor];
  [v0 setBackgroundColor:v1];

  [v0 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v2 = [v0 layer];
  [v2 setMaskedCorners:1];

  [v0 setClipsToBounds:1];
  return v0;
}

void *variable initialization expression of MOSuggestionAssetSystemSymbolProvider.symbolCache()
{
  return &_swiftEmptyDictionarySingleton;
}

id variable initialization expression of MOSuggestionInterstitialExpandableListViewCell.stackView()
{
  return variable initialization expression of MOSuggestionCollectionViewListCell.stackView(1, 1, 2);
}

id variable initialization expression of MOSuggestionCollectionViewListCell.stackView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = [objc_allocWithZone((Class)UIStackView) init];
  [v6 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v6 setAxis:a1];
  [v6 setAlignment:a2];
  [v6 setDistribution:a3];
  return v6;
}

id variable initialization expression of MOSuggestionInterstitialExpandableListViewCell.assetView()
{
  return variable initialization expression of MOSuggestionInterstitialExpandableListViewCell.assetView((uint64_t (*)(void))type metadata accessor for MOSuggestionInterstitialListAssetView);
}

id variable initialization expression of MOSuggestionInterstitialExpandableListViewCell.checkmarkView()
{
  if (one-time initialization token for checkPlatterViewSize != -1) {
    swift_once();
  }
  long long v0 = static MOSuggestionSheetMosaicCell.checkPlatterViewSize;
  id v1 = objc_allocWithZone((Class)type metadata accessor for CanvasAssetAccessoryView());

  return [v1 initWithFrame:0.0, 0.0, v0];
}

uint64_t variable initialization expression of MOWeakArray.references()
{
  type metadata accessor for MOWeakReference();

  return static Array._allocateUninitialized(_:)();
}

id variable initialization expression of MOSuggestionAssetPhotoLivePhotoVideosProvider.imageManager()
{
  id v0 = objc_allocWithZone((Class)PHCachingImageManager);

  return [v0 init];
}

uint64_t variable initialization expression of MOSuggestionAssetPhotoLivePhotoVideosProvider.queue()
{
  return variable initialization expression of MOSuggestionAssetPhotoLivePhotoVideosProvider.queue((void (*)(uint64_t))&static DispatchQoS.unspecified.getter, 0xD000000000000037, 0x80000001001E1320);
}

id variable initialization expression of MOSuggestionAssetWorkoutProvider.healthStore()
{
  id v0 = objc_allocWithZone((Class)HKHealthStore);

  return [v0 init];
}

uint64_t default argument 1 of static MOSuggestionAssetWorkoutProvider.localizedDistanceUsingPreferredUnit(meters:workoutType:)()
{
  return 37;
}

unint64_t variable initialization expression of MOSuggestionCollectionViewModel.stateBackup()
{
  return specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&_swiftEmptyArrayStorage);
}

id variable initialization expression of MOSuggestionCollectionViewModel.protectedAppsManager()
{
  return variable initialization expression of MOSuggestionInterstitialExpandableListViewCell.assetView((uint64_t (*)(void))type metadata accessor for MOProtectedAppsManager);
}

uint64_t default argument 0 of static MOProtectedAppsManager.requiresChallenge(appSources:completion:)()
{
  if (one-time initialization token for allFixedApps != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

id default argument 1 of MOEventBundleStore.refreshAndFetchBundles(presentationDetails:queue:completionHandler:)()
{
  return default argument 3 of MOSuggestionWorkoutIconGlyphView.init(image:glyphLightBackgroundColor:glyphDarkBackgroundColor:glyphTintColor:)(&one-time initialization token for defaultQueue, (void **)&static MOEventBundleStore.defaultQueue);
}

id default argument 3 of MOSuggestionWorkoutIconGlyphView.init(image:glyphLightBackgroundColor:glyphDarkBackgroundColor:glyphTintColor:)(void *a1, void **a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  id v3 = *a2;

  return v3;
}

uint64_t default argument 27 of MOSuggestionSheetAssetViewModel.init(id:parent:image:activitySummary:routeMap:linkMetadata:assetType:assetVisualSubType:evergreenData:reflectionIndex:mediaAssetID:URL:mediaType:isSquare:contactName:contactFirstName:workoutName:livePhoto:videoAsset:activityName:activityStepCount:motionActivityNumSteps:title:subtitle:weatherString:weatherTemperature:calories:duration:distance:averageHeartRate:shouldAutoPlay:squareCropRect:landscapeCropRect:portraitCropRect:assignedAssetTileSize:mapPrimaryField:mapSecondaryField:mapLocationCount:isLoadingPlaceHolder:renderedView:valenceClassificationAndReflectiveInterval:reflectiveInterval:stateOfMindLabels:stateOfMindLabelsShortened:stateOfMindDomains:stateOfMindDomainsShortened:stateOfMindAssociatedColorsLight:stateOfMindAssociatedColorsDark:stateOfMindDate:bgColor:mediaThirdPartyAppAssociatedColors:bgColorVariant:)()
{
  return 0;
}

uint64_t variable initialization expression of MOSuggestionInterstitialCarouselView.queue()
{
  return variable initialization expression of MOSuggestionAssetPhotoLivePhotoVideosProvider.queue((void (*)(uint64_t))&static DispatchQoS.unspecified.getter, 0xD00000000000002FLL, 0x80000001001E1360);
}

double default argument 2 of MOSuggestionInterstitialCarouselView.scrollToIndex(index:shouldScroll:velocity:)()
{
  return 0.2;
}

id variable initialization expression of MOSuggestionStateOfMindAssetView.labelStack()
{
  id v0 = [objc_allocWithZone((Class)UIStackView) init];
  [v0 setAxis:1];
  [v0 setSpacing:1.0];
  [v0 setAlignment:1];
  return v0;
}

id variable initialization expression of MOAssetPhotoMomentProvider.imageManager()
{
  id v0 = [self defaultManager];

  return v0;
}

id variable initialization expression of MOSuggestionActivityRingsAssetView.labelStackView()
{
  id v0 = [objc_allocWithZone((Class)UIStackView) init];
  [v0 setAxis:1];
  [v0 setSpacing:2.0];
  [v0 setAlignment:1];
  [v0 setDistribution:3];
  return v0;
}

double variable initialization expression of MOSuggestionSheetImage.squareCrop@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 32) = 1;
  return result;
}

id variable initialization expression of MOSuggestionCollectionView.onboardingManager()
{
  id v0 = [self sharedInstance];

  return v0;
}

id variable initialization expression of MOSuggestionCollectionView.privacyBadge()
{
  double y = CGRectZero.origin.y;
  double width = CGRectZero.size.width;
  double height = CGRectZero.size.height;
  id v3 = objc_allocWithZone((Class)type metadata accessor for MOSuggestionPickerPrivacyBadge());

  return [v3 initWithFrame:CGRectZero.origin.x, y, width, height];
}

id variable initialization expression of MOSuggestionCollectionView.refresher()
{
  id v0 = objc_allocWithZone((Class)UIRefreshControl);

  return [v0 init];
}

id variable initialization expression of MOSuggestionCollectionView.activityIndicator()
{
  return variable initialization expression of MOSuggestionSheetInterstitialView.scrollView((Class *)UIActivityIndicatorView_ptr, (SEL *)&selRef_setTranslatesAutoresizingMaskIntoConstraints_);
}

id variable initialization expression of MOSuggestionSheetInterstitialView.scrollView(Class *a1, SEL *a2)
{
  id v3 = [objc_allocWithZone(*a1) init];
  [v3 *a2];
  return v3;
}

id variable initialization expression of MOSuggestionInterstitialAlertContentViewController.textView()
{
  id v0 = objc_allocWithZone((Class)UITextView);

  return [v0 init];
}

id variable initialization expression of MOSuggestionInterstitialAlertController.textViewContentController()
{
  return variable initialization expression of MOSuggestionInterstitialExpandableListViewCell.assetView((uint64_t (*)(void))type metadata accessor for MOSuggestionInterstitialAlertContentViewController);
}

double static MOSuggestionInterstitialListAssetViewConstants.INSET_MARGIN_CUTOUT.getter()
{
  return 2.0;
}

id variable initialization expression of MOPOIAnnotationView.basePOICircleView()
{
  id v0 = objc_allocWithZone((Class)UIImageView);

  return [v0 init];
}

id variable initialization expression of MOPOIAnnotationView.clusterCountLabel()
{
  id v0 = objc_allocWithZone((Class)UILabel);

  return [v0 init];
}

id variable initialization expression of MOPOIAnnotationView.borderBackgroundView()
{
  id v0 = objc_allocWithZone((Class)UIView);

  return [v0 init];
}

id variable initialization expression of MOAngelControllerWrapper.serverManager()
{
  id v0 = [self sharedInstance];

  return v0;
}

id variable initialization expression of MOAngelControllerWrapper.engagementWriter()
{
  id v0 = [self sharedInstance];

  return v0;
}

id variable initialization expression of MOSuggestionSheetFilterCollectionView.layout()
{
  id v0 = [objc_allocWithZone((Class)UICollectionViewFlowLayout) init];
  [v0 setScrollDirection:1];
  [v0 setMinimumInteritemSpacing:12.0];
  return v0;
}

uint64_t variable initialization expression of MOSuggestionSheetFilterCollectionView.filterViewModel()
{
  type metadata accessor for MOSuggestionSheetFilterCollectionViewModel();
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = 0;
  return result;
}

uint64_t variable initialization expression of MOSuggestionAssetCacheWorkoutInput.startDate@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult.uuid((uint64_t (*)(void))&type metadata accessor for Date, a1);
}

uint64_t variable initialization expression of MOSuggestionSheetAssetViewModel.assetVisualSubType()
{
  return 26;
}

uint64_t variable initialization expression of MOSuggestionSheetMediaAssetView.mediaPreviewURL@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult.uuid((uint64_t (*)(void))&type metadata accessor for URL, a1);
}

uint64_t variable initialization expression of MOSuggestionSheetAssetViewModel.weatherTemperature@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
  id v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

id variable initialization expression of MOSuggestionInterstitialCarouselCheckMarkView.accessoryButton()
{
  return variable initialization expression of MOSuggestionCollectionViewSingleAssetCell.assetGridView((void (*)(void))type metadata accessor for MOSuggestionSheetOversizedBoundsButton);
}

uint64_t variable initialization expression of MOSuggestionInterstitialExpandableListView.queue()
{
  return variable initialization expression of MOSuggestionAssetPhotoLivePhotoVideosProvider.queue((void (*)(uint64_t))&static DispatchQoS.unspecified.getter, 0xD00000000000002BLL, 0x80000001001E1390);
}

uint64_t variable initialization expression of MOSuggestionSheetMosaicCell.overflowDetail()
{
  return 0;
}

id variable initialization expression of MOSuggestionSheetVideoPlaybackView.config()
{
  return variable initialization expression of MOSuggestionSheetVideoPlaybackView.config((SEL *)&selRef_grayColor, 50.0);
}

id variable initialization expression of MOSuggestionSheetVideoPlaybackView.muteButtonConfig()
{
  id v0 = [self preferredFontForTextStyle:UIFontTextStyleTitle3];
  id v1 = [self configurationWithFont:v0];

  return v1;
}

id variable initialization expression of MOSuggestionSheetVideoPlaybackView.unMutedImage()
{
  return variable initialization expression of MOSuggestionSheetVideoPlaybackView.unMutedImage();
}

{
  NSString v0;
  id v1;

  id v0 = String._bridgeToObjectiveC()();
  id v1 = [self systemImageNamed:v0];

  return v1;
}

id variable initialization expression of MOSuggestionSheetVideoPlaybackView.mutedImage()
{
  return variable initialization expression of MOSuggestionSheetVideoPlaybackView.unMutedImage();
}

id variable initialization expression of MOCircularProgressIndicatorView.config()
{
  return variable initialization expression of MOSuggestionSheetVideoPlaybackView.config((SEL *)&selRef_whiteColor, 15.0);
}

id variable initialization expression of MOPlayPauseButton.pauseImage()
{
  return variable initialization expression of MOSuggestionSheetVideoPlaybackView.unMutedImage();
}

id variable initialization expression of MOPlayPauseButton.playImage()
{
  return variable initialization expression of MOSuggestionSheetVideoPlaybackView.unMutedImage();
}

unint64_t variable initialization expression of MOEventBundleStore.appMusicExternalBundleId()
{
  return 0xD000000000000029;
}

id variable initialization expression of MOEventBundleStore.promptManager()
{
  id v0 = objc_allocWithZone((Class)MOPromptManager);

  return [v0 init];
}

id variable initialization expression of CanvasAssetAccessoryView.keyColor()
{
  id v0 = [self systemBlueColor];

  return v0;
}

id variable initialization expression of MOSuggestionCarouselView.pageControl()
{
  id v0 = objc_allocWithZone((Class)UIPageControl);

  return [v0 init];
}

id variable initialization expression of MOSuggestionMotionAssetView.motionBackground()
{
  return variable initialization expression of MOSuggestionActivityRouteAssetView.distanceBlue(0xD000000000000010, 0x80000001001E13E0, (SEL *)&selRef_systemWhiteColor);
}

id variable initialization expression of MOSuggestionMotionAssetView.workoutDataLabel()
{
  id v0 = [objc_allocWithZone((Class)UILabel) init];
  id v1 = [self preferredFontForTextStyle:UIFontTextStyleFootnote];
  [v0 setFont:v1];

  [v0 setTextAlignment:0];
  [v0 setAdjustsFontForContentSizeCategory:1];
  [v0 setMaximumContentSizeCategory:UIContentSizeCategoryAccessibilityMedium];
  return v0;
}

id variable initialization expression of MOSuggestionActivityIconAssetView.labelStack()
{
  return variable initialization expression of MOSuggestionSheetInterstitialView.labelStackView(1, 1);
}

id variable initialization expression of MOSuggestionMotionAssetView.imageView()
{
  return variable initialization expression of MOSuggestionCollectionViewSingleAssetCell.assetGridView((void (*)(void))type metadata accessor for MOSuggestionRoundView);
}

id variable initialization expression of MOMusicPlaybackCoordinator.mediaPlayer()
{
  id v0 = [self systemMusicPlayer];

  return v0;
}

id variable initialization expression of MOSuggestionAssetAppIconProvider.defaultDescriptor()
{
  id v0 = [self mainScreen];
  [v0 scale];
  double v2 = v1;

  id v3 = objc_allocWithZone((Class)ISImageDescriptor);

  return [v3 initWithSize:350.0 scale:350.0 v2];
}

id variable initialization expression of MOLocationShifter.shifter()
{
  id v0 = objc_allocWithZone((Class)GEOLocationShifter);

  return [v0 init];
}

uint64_t variable initialization expression of MOLocationShifter.processingQueue()
{
  return variable initialization expression of MOSuggestionAssetPhotoLivePhotoVideosProvider.queue((void (*)(uint64_t))&static DispatchQoS.unspecified.getter, 0xD00000000000002BLL, 0x80000001001E1400);
}

id variable initialization expression of MOSuggestionSheetVideoPlaybackView.config(SEL *a1, double a2)
{
  id v3 = [self *a1];
  double v4 = self;
  id v5 = [v4 configurationWithHierarchicalColor:v3];

  id v6 = [self systemFontOfSize:a2];
  id v7 = [v4 configurationWithFont:v6];

  id v8 = [v5 configurationByApplyingConfiguration:v7];
  return v8;
}

id variable initialization expression of MOCircularProgressIndicatorView.borderPath()
{
  id v0 = objc_allocWithZone((Class)UIBezierPath);

  return [v0 init];
}

id variable initialization expression of MOSuggestionActivityIconAssetView.heartRed()
{
  return variable initialization expression of MOSuggestionActivityRouteAssetView.distanceBlue(0x6465527472616568, 0xE800000000000000, (SEL *)&selRef_systemRedColor);
}

id variable initialization expression of MOSuggestionActivityRouteAssetView.distanceBlue(uint64_t a1, uint64_t a2, SEL *a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = self;
  id v6 = [v5 colorNamed:v4];

  if (v6) {
    return v6;
  }
  id v8 = [v5 *a3];

  return v8;
}

id variable initialization expression of MOSuggestionSheetInterstitialView.labelStackView(uint64_t a1, uint64_t a2)
{
  id v4 = [objc_allocWithZone((Class)UIStackView) init];
  [v4 setAxis:a1];
  [v4 setAlignment:a2];
  return v4;
}

void variable initialization expression of MOSuggestionPickerBadgeIconView.C1_1()
{
}

void variable initialization expression of MOSuggestionPickerBadgeIconView.C1_2()
{
}

id variable initialization expression of MOSuggestionPickerBadgeIconView.suggestionsImageView()
{
  return variable initialization expression of MOSuggestionPickerBadgeIconView.suggestionsImageView();
}

{
  NSString v0;
  id v1;
  id v2;

  id v0 = String._bridgeToObjectiveC()();
  double v1 = [self imageNamed:v0];

  double v2 = [objc_allocWithZone((Class)UIImageView) initWithImage:v1];
  return v2;
}

id variable initialization expression of MOSuggestionPickerBadgeIconView.privacyImageView()
{
  return variable initialization expression of MOSuggestionPickerBadgeIconView.suggestionsImageView();
}

id variable initialization expression of MOSuggestionCollectionViewOnboardingSectionHeaderView.newEntryButton()
{
  return variable initialization expression of MOSuggestionCollectionViewSingleAssetCell.assetGridView((void (*)(void))type metadata accessor for MOSuggestionSheetNewEntryButton);
}

id variable initialization expression of MOSecureWindow._controller()
{
  return variable initialization expression of MOSuggestionInterstitialExpandableListViewCell.assetView((uint64_t (*)(void))type metadata accessor for MOAngelControllerWrapper);
}

id variable initialization expression of MOSuggestionInterstitialExpandableListViewCell.assetView(uint64_t (*a1)(void))
{
  id v1 = objc_allocWithZone((Class)a1(0));

  return [v1 init];
}

id variable initialization expression of MOSuggestionInterstitialSupplementaryCheckmarkView.checkmarkView()
{
  if (one-time initialization token for CHECK_PLATTER_VIEW_SIZE != -1) {
    swift_once();
  }
  long long v0 = static MOSuggestionInterstitialCarouselViewConstants.CHECK_PLATTER_VIEW_SIZE;
  id v1 = objc_allocWithZone((Class)type metadata accessor for MOSuggestionInterstitialCarouselCheckMarkView());

  return [v1 initWithFrame:0.0, 0.0, v0];
}

id variable initialization expression of MOSuggestionSheetMediaAssetView.labelStackView()
{
  id v0 = objc_allocWithZone((Class)UIStackView);

  return [v0 init];
}

id variable initialization expression of MOSuggestionMapSnapshotView.platterBlurView(uint64_t a1)
{
  id v1 = [self effectWithStyle:a1];
  id v2 = [objc_allocWithZone((Class)UIVisualEffectView) initWithEffect:v1];

  return v2;
}

id variable initialization expression of MOSuggestionCollectionViewSingleAssetCell.platterView()
{
  id v0 = [objc_allocWithZone((Class)UIView) init];
  id v1 = [v0 traitCollection];
  id v2 = [v1 userInterfaceStyle];

  specialized static MOSuggestionTheme.Styles.styleViewAsPlatter(view:traitCollection:)(v0, (uint64_t)v2);
  return v0;
}

id variable initialization expression of MOSuggestionCollectionViewCell.journalButton()
{
  id v0 = (objc_class *)type metadata accessor for MOSuggestionSheetJournalButton();
  id v1 = objc_allocWithZone(v0);
  id v2 = &v1[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetJournalButton_buttonTapped];
  void *v2 = 0;
  v2[1] = 0;
  v1[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetJournalButton_singleCellAsset] = 0;
  v5.receiver = v1;
  v5.super_class = v0;
  [super initWithFrame:0.0, 0.0, 0.0, 0.0];
  MOSuggestionSheetJournalButton.sharedInit()();

  return v3;
}

id variable initialization expression of MOSuggestionCollectionViewCell.photoMemoryBanner()
{
  return variable initialization expression of MOSuggestionCollectionViewSingleAssetCell.assetGridView((void (*)(void))type metadata accessor for MOSuggestionPhotoMemoryBanner);
}

id variable initialization expression of MOSuggestionCollectionViewSingleAssetCell.assetGridView(void (*a1)(void))
{
  a1(0);
  id v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());

  return [v1 init];
}

uint64_t variable initialization expression of MOSuggestionAssetMediaAlbumArtProvider.queue()
{
  return variable initialization expression of MOSuggestionAssetPhotoLivePhotoVideosProvider.queue((void (*)(uint64_t))&static DispatchQoS.utility.getter, 0xD000000000000030, 0x80000001001E1450);
}

uint64_t variable initialization expression of MOSuggestionAssetPhotoLivePhotoVideosProvider.queue(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  v12[0] = a3;
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v8);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v9 - 8);
  uint64_t v10 = type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  a1(v10);
  v12[1] = &_swiftEmptyArrayStorage;
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v4);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

id variable initialization expression of MOSuggestionAssetMediaAlbumArtProvider.configurationManager()
{
  id v0 = objc_allocWithZone((Class)MOConfigurationManagerBase);

  return [v0 init];
}

uint64_t variable initialization expression of MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult.uuid@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);

  return v4(a2, 1, 1, v3);
}

id variable initialization expression of MOSuggestionAssetCacheManager.assetCache()
{
  id v0 = objc_allocWithZone((Class)NSCache);

  return [v0 init];
}

void *variable initialization expression of MOSuggestionAssetCacheManager.photoLivePhotoVideoProvider()
{
  return MOSuggestionAssetPhotoLivePhotoVideosProvider.init()();
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSAttributedStringKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSAttributedStringKey(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

void *protocol witness for SetAlgebra.intersection(_:) in conformance CACornerMask@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance CACornerMask(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *protocol witness for SetAlgebra.formUnion(_:) in conformance CACornerMask(void *result)
{
  *v1 |= *result;
  return result;
}

void *protocol witness for SetAlgebra.formIntersection(_:) in conformance CACornerMask(void *result)
{
  *v1 &= *result;
  return result;
}

NSNumber protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance UIFontWeight()
{
  return CGFloat._bridgeToObjectiveC()();
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance UIFontWeight(uint64_t a1, uint64_t a2)
{
  uint64_t result = static CGFloat._forceBridgeFromObjectiveC(_:result:)();
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance UIFontWeight(uint64_t a1, uint64_t a2)
{
  char v3 = static CGFloat._conditionallyBridgeFromObjectiveC(_:result:)();
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  return v3 & 1;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance UIFontWeight@<X0>(void *a1@<X8>)
{
  uint64_t result = static CGFloat._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = v3;
  return result;
}

void protocol witness for Hashable.hash(into:) in conformance MOSuggestionAssetMediaItemType()
{
  Hasher._combine(_:)(*v0);
}

void protocol witness for SetAlgebra.init() in conformance MOPickerContentOption(void *a1@<X8>)
{
  *a1 = 0;
}

void *protocol witness for SetAlgebra.union(_:) in conformance MOPickerContentOption@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance MOPickerContentOption@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

void *protocol witness for SetAlgebra.remove(_:) in conformance MOPickerContentOption@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *protocol witness for SetAlgebra.update(with:) in conformance MOPickerContentOption@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance MOPickerContentOption(void *result)
{
  *v1 ^= *result;
  return result;
}

void *protocol witness for SetAlgebra.subtracting(_:) in conformance MOPickerContentOption@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance MOPickerContentOption(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance MOPickerContentOption()
{
  return *v0 == 0;
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance MOPickerContentOption(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

void *protocol witness for SetAlgebra.subtract(_:) in conformance MOPickerContentOption(void *result)
{
  *v1 &= ~*result;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MOSuggestionAssetMediaItemType()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MOSuggestionAssetMediaItemType()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for RawRepresentable.rawValue.getter in conformance MOResourceType(void *a1@<X8>)
{
  *a1 = *v1;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance MORankingCategory(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance NSAttributedStringKey(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance NSAttributedStringKey(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance NSAttributedStringKey@<X0>(void *a1@<X8>)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

void *protocol witness for OptionSet.init(rawValue:) in conformance CACornerMask@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance MOSuggestionAssetsType()
{
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOSuggestionAssetsType and conformance MOSuggestionAssetsType, type metadata accessor for MOSuggestionAssetsType);
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOSuggestionAssetsType and conformance MOSuggestionAssetsType, type metadata accessor for MOSuggestionAssetsType);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance PHAssetMediaSubtype(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance PHAssetMediaSubtype(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance MOSuggestionEngagementEvent()
{
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOSuggestionEngagementEvent and conformance MOSuggestionEngagementEvent, type metadata accessor for MOSuggestionEngagementEvent);
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOSuggestionEngagementEvent and conformance MOSuggestionEngagementEvent, type metadata accessor for MOSuggestionEngagementEvent);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance GEOPOICategory@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance MOPickerContentOption@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = specialized SetAlgebra<>.init(arrayLiteral:)(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSAttributedStringKey()
{
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance GEOPOICategory()
{
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type GEOPOICategory and conformance GEOPOICategory, type metadata accessor for GEOPOICategory);
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type GEOPOICategory and conformance GEOPOICategory, type metadata accessor for GEOPOICategory);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance MOSuggestionAssetMetadataKey()
{
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type MOSuggestionAssetMetadataKey and conformance MOSuggestionAssetMetadataKey, type metadata accessor for MOSuggestionAssetMetadataKey);
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOSuggestionAssetMetadataKey and conformance MOSuggestionAssetMetadataKey, type metadata accessor for MOSuggestionAssetMetadataKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance UIFontWeight@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

double protocol witness for RawRepresentable.rawValue.getter in conformance UIFontWeight@<D0>(void *a1@<X8>)
{
  double result = *v1;
  *a1 = *(void *)v1;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance UIFontWeight()
{
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance MOWorkoutMotionActivityAction()
{
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOWorkoutMotionActivityAction and conformance MOWorkoutMotionActivityAction, type metadata accessor for MOWorkoutMotionActivityAction);
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOWorkoutMotionActivityAction and conformance MOWorkoutMotionActivityAction, type metadata accessor for MOWorkoutMotionActivityAction);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance UIFontDescriptorAttributeName()
{
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UIFontDescriptorAttributeName and conformance UIFontDescriptorAttributeName, type metadata accessor for UIFontDescriptorAttributeName);
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIFontDescriptorAttributeName and conformance UIFontDescriptorAttributeName, type metadata accessor for UIFontDescriptorAttributeName);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance UIFontDescriptorTraitKey()
{
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIFontDescriptorTraitKey and conformance UIFontDescriptorTraitKey, type metadata accessor for UIFontDescriptorTraitKey);
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIFontDescriptorTraitKey and conformance UIFontDescriptorTraitKey, type metadata accessor for UIFontDescriptorTraitKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance CIContextOption()
{
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type CIContextOption and conformance CIContextOption, type metadata accessor for CIContextOption);
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type CIContextOption and conformance CIContextOption, type metadata accessor for CIContextOption);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance MOSuggestionAssetMotionActivityType()
{
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOSuggestionAssetMotionActivityType and conformance MOSuggestionAssetMotionActivityType, type metadata accessor for MOSuggestionAssetMotionActivityType);
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOSuggestionAssetMotionActivityType and conformance MOSuggestionAssetMotionActivityType, type metadata accessor for MOSuggestionAssetMotionActivityType);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance UISheetPresentationControllerDetentIdentifier()
{
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UISheetPresentationControllerDetentIdentifier and conformance UISheetPresentationControllerDetentIdentifier, type metadata accessor for UISheetPresentationControllerDetentIdentifier);
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UISheetPresentationControllerDetentIdentifier and conformance UISheetPresentationControllerDetentIdentifier, type metadata accessor for UISheetPresentationControllerDetentIdentifier);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance UIApplicationOpenExternalURLOptionsKey()
{
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIApplicationOpenExternalURLOptionsKey and conformance UIApplicationOpenExternalURLOptionsKey, type metadata accessor for UIApplicationOpenExternalURLOptionsKey);
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIApplicationOpenExternalURLOptionsKey and conformance UIApplicationOpenExternalURLOptionsKey, type metadata accessor for UIApplicationOpenExternalURLOptionsKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance MOUsageContextType()
{
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOUsageContextType and conformance MOUsageContextType, type metadata accessor for MOUsageContextType);
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOUsageContextType and conformance MOUsageContextType, type metadata accessor for MOUsageContextType);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance MOMediaPlayMetaDataKeyPlayerMediaType()
{
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOMediaPlayMetaDataKeyPlayerMediaType and conformance MOMediaPlayMetaDataKeyPlayerMediaType, type metadata accessor for MOMediaPlayMetaDataKeyPlayerMediaType);
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type MOMediaPlayMetaDataKeyPlayerMediaType and conformance MOMediaPlayMetaDataKeyPlayerMediaType, type metadata accessor for MOMediaPlayMetaDataKeyPlayerMediaType);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance MOEventBundleSourceType()
{
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type MOEventBundleSourceType and conformance MOEventBundleSourceType, type metadata accessor for MOEventBundleSourceType);
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOEventBundleSourceType and conformance MOEventBundleSourceType, type metadata accessor for MOEventBundleSourceType);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance MOSuggestionAssetsType@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance UIFontDescriptorFeatureKey()
{
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIFontDescriptorFeatureKey and conformance UIFontDescriptorFeatureKey, type metadata accessor for UIFontDescriptorFeatureKey);
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UIFontDescriptorFeatureKey and conformance UIFontDescriptorFeatureKey, type metadata accessor for UIFontDescriptorFeatureKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance MOPhotoResourceType()
{
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOPhotoResourceType and conformance MOPhotoResourceType, type metadata accessor for MOPhotoResourceType);
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOPhotoResourceType and conformance MOPhotoResourceType, type metadata accessor for MOPhotoResourceType);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GEOPOICategory(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSAttributedStringKey(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance UIFontWeight()
{
  return Double.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance UIFontWeight()
{
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *v0;
  }
  else {
    Swift::UInt64 v1 = 0;
  }
  Hasher._combine(_:)(v1);
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance UIFontWeight()
{
  return static Hasher._hash(seed:_:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MOSuggestionAssetsType()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSAttributedStringKey(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NSAttributedStringKey()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSAttributedStringKey()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance UIFontWeight(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t specialized UnsafeMutablePointer.deallocate()()
{
  return swift_slowDealloc();
}

double CGRectMake()
{
  return 0.0;
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0;
    }
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t type metadata accessor for UIApplication(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A];
  if (!lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A]);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

void type metadata accessor for HKWorkoutActivityType(uint64_t a1)
{
}

void type metadata accessor for MOEventBundleInterfaceType(uint64_t a1)
{
}

void type metadata accessor for MOSuggestionAssetBgColorVariantType(uint64_t a1)
{
}

void type metadata accessor for MOPickerContentOption(uint64_t a1)
{
}

void type metadata accessor for MOSuggestionAssetMediaItemType(uint64_t a1)
{
}

void type metadata accessor for PHImageContentMode(uint64_t a1)
{
}

void type metadata accessor for MONotificationEventTrigger(uint64_t a1)
{
}

void type metadata accessor for MOReflectionPromptType(uint64_t a1)
{
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for CLLocationCoordinate2D(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CLLocationCoordinate2D(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CLLocationCoordinate2D(uint64_t a1)
{
}

void type metadata accessor for MOEventBundleSuperType(uint64_t a1)
{
}

void type metadata accessor for MOEventBundleSubType(uint64_t a1)
{
}

void type metadata accessor for MOPhotoResourceType(uint64_t a1)
{
}

void type metadata accessor for GEOLocationCoordinate2D(uint64_t a1)
{
}

void type metadata accessor for MOWorkoutMotionActivityAction(uint64_t a1)
{
}

void type metadata accessor for MOMediaPlayMetaDataKeyPlayerMediaType(uint64_t a1)
{
}

void type metadata accessor for UIApplicationOpenExternalURLOptionsKey(uint64_t a1)
{
}

void type metadata accessor for MOUsageContextType(uint64_t a1)
{
}

void type metadata accessor for MOSuggestionSheetViewState(uint64_t a1)
{
}

void type metadata accessor for UISheetPresentationControllerDetentIdentifier(uint64_t a1)
{
}

void type metadata accessor for CGColorRef(uint64_t a1)
{
}

void type metadata accessor for CGPoint(uint64_t a1)
{
}

void type metadata accessor for MOSuggestionEngagementEvent(uint64_t a1)
{
}

void type metadata accessor for MOSuggestionAssetsType(uint64_t a1)
{
}

void type metadata accessor for CFNullRef(uint64_t a1)
{
}

void type metadata accessor for CIContextOption(uint64_t a1)
{
}

void type metadata accessor for MOSuggestionAssetMotionActivityType(uint64_t a1)
{
}

void type metadata accessor for UIFontDescriptorTraitKey(uint64_t a1)
{
}

void type metadata accessor for UIFontWeight(uint64_t a1)
{
}

void type metadata accessor for UIFontDescriptorAttributeName(uint64_t a1)
{
}

void type metadata accessor for MOSuggestionAssetMetadataKey(uint64_t a1)
{
}

void type metadata accessor for NSAttributedStringKey(uint64_t a1)
{
}

void type metadata accessor for CGRectEdge(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for CGRect(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for CGRect(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CGRect(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

uint64_t base witness table accessor for RawRepresentable in NSAttributedStringKey()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
}

uint64_t lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSAttributedStringKey()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
}

uint64_t base witness table accessor for RawRepresentable in MOSuggestionAssetMetadataKey()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOSuggestionAssetMetadataKey and conformance MOSuggestionAssetMetadataKey, type metadata accessor for MOSuggestionAssetMetadataKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in MOSuggestionAssetMetadataKey()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOSuggestionAssetMetadataKey and conformance MOSuggestionAssetMetadataKey, type metadata accessor for MOSuggestionAssetMetadataKey);
}

uint64_t base witness table accessor for RawRepresentable in UIFontDescriptorAttributeName()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIFontDescriptorAttributeName and conformance UIFontDescriptorAttributeName, type metadata accessor for UIFontDescriptorAttributeName);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in UIFontDescriptorAttributeName()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIFontDescriptorAttributeName and conformance UIFontDescriptorAttributeName, type metadata accessor for UIFontDescriptorAttributeName);
}

uint64_t base witness table accessor for RawRepresentable in UIFontWeight()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIFontWeight and conformance UIFontWeight, type metadata accessor for UIFontWeight);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in UIFontWeight()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIFontWeight and conformance UIFontWeight, type metadata accessor for UIFontWeight);
}

uint64_t base witness table accessor for Equatable in UIFontWeight()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIFontWeight and conformance UIFontWeight, type metadata accessor for UIFontWeight);
}

uint64_t base witness table accessor for RawRepresentable in UIFontDescriptorTraitKey()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIFontDescriptorTraitKey and conformance UIFontDescriptorTraitKey, type metadata accessor for UIFontDescriptorTraitKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in UIFontDescriptorTraitKey()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIFontDescriptorTraitKey and conformance UIFontDescriptorTraitKey, type metadata accessor for UIFontDescriptorTraitKey);
}

uint64_t base witness table accessor for Equatable in UIFontDescriptorTraitKey()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIFontDescriptorTraitKey and conformance UIFontDescriptorTraitKey, type metadata accessor for UIFontDescriptorTraitKey);
}

uint64_t base witness table accessor for RawRepresentable in MOSuggestionAssetMotionActivityType()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOSuggestionAssetMotionActivityType and conformance MOSuggestionAssetMotionActivityType, type metadata accessor for MOSuggestionAssetMotionActivityType);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in MOSuggestionAssetMotionActivityType()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOSuggestionAssetMotionActivityType and conformance MOSuggestionAssetMotionActivityType, type metadata accessor for MOSuggestionAssetMotionActivityType);
}

uint64_t base witness table accessor for Equatable in MOSuggestionAssetMotionActivityType()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOSuggestionAssetMotionActivityType and conformance MOSuggestionAssetMotionActivityType, type metadata accessor for MOSuggestionAssetMotionActivityType);
}

uint64_t base witness table accessor for RawRepresentable in CIContextOption()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type CIContextOption and conformance CIContextOption, type metadata accessor for CIContextOption);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in CIContextOption()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type CIContextOption and conformance CIContextOption, type metadata accessor for CIContextOption);
}

uint64_t base witness table accessor for RawRepresentable in MOSuggestionAssetsType()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOSuggestionAssetsType and conformance MOSuggestionAssetsType, type metadata accessor for MOSuggestionAssetsType);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in MOSuggestionAssetsType()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOSuggestionAssetsType and conformance MOSuggestionAssetsType, type metadata accessor for MOSuggestionAssetsType);
}

uint64_t base witness table accessor for Equatable in MOSuggestionAssetsType()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOSuggestionAssetsType and conformance MOSuggestionAssetsType, type metadata accessor for MOSuggestionAssetsType);
}

uint64_t base witness table accessor for RawRepresentable in MOSuggestionEngagementEvent()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOSuggestionEngagementEvent and conformance MOSuggestionEngagementEvent, type metadata accessor for MOSuggestionEngagementEvent);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in MOSuggestionEngagementEvent()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOSuggestionEngagementEvent and conformance MOSuggestionEngagementEvent, type metadata accessor for MOSuggestionEngagementEvent);
}

uint64_t base witness table accessor for Equatable in MOSuggestionEngagementEvent()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOSuggestionEngagementEvent and conformance MOSuggestionEngagementEvent, type metadata accessor for MOSuggestionEngagementEvent);
}

uint64_t base witness table accessor for RawRepresentable in UISheetPresentationControllerDetentIdentifier()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UISheetPresentationControllerDetentIdentifier and conformance UISheetPresentationControllerDetentIdentifier, type metadata accessor for UISheetPresentationControllerDetentIdentifier);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in UISheetPresentationControllerDetentIdentifier()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UISheetPresentationControllerDetentIdentifier and conformance UISheetPresentationControllerDetentIdentifier, type metadata accessor for UISheetPresentationControllerDetentIdentifier);
}

uint64_t base witness table accessor for Equatable in UISheetPresentationControllerDetentIdentifier()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UISheetPresentationControllerDetentIdentifier and conformance UISheetPresentationControllerDetentIdentifier, type metadata accessor for UISheetPresentationControllerDetentIdentifier);
}

uint64_t base witness table accessor for RawRepresentable in MOUsageContextType()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOUsageContextType and conformance MOUsageContextType, type metadata accessor for MOUsageContextType);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in MOUsageContextType()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOUsageContextType and conformance MOUsageContextType, type metadata accessor for MOUsageContextType);
}

uint64_t base witness table accessor for RawRepresentable in UIApplicationOpenExternalURLOptionsKey()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIApplicationOpenExternalURLOptionsKey and conformance UIApplicationOpenExternalURLOptionsKey, type metadata accessor for UIApplicationOpenExternalURLOptionsKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in UIApplicationOpenExternalURLOptionsKey()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIApplicationOpenExternalURLOptionsKey and conformance UIApplicationOpenExternalURLOptionsKey, type metadata accessor for UIApplicationOpenExternalURLOptionsKey);
}

uint64_t base witness table accessor for RawRepresentable in MOMediaPlayMetaDataKeyPlayerMediaType()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOMediaPlayMetaDataKeyPlayerMediaType and conformance MOMediaPlayMetaDataKeyPlayerMediaType, type metadata accessor for MOMediaPlayMetaDataKeyPlayerMediaType);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in MOMediaPlayMetaDataKeyPlayerMediaType()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOMediaPlayMetaDataKeyPlayerMediaType and conformance MOMediaPlayMetaDataKeyPlayerMediaType, type metadata accessor for MOMediaPlayMetaDataKeyPlayerMediaType);
}

uint64_t base witness table accessor for Equatable in MOMediaPlayMetaDataKeyPlayerMediaType()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOMediaPlayMetaDataKeyPlayerMediaType and conformance MOMediaPlayMetaDataKeyPlayerMediaType, type metadata accessor for MOMediaPlayMetaDataKeyPlayerMediaType);
}

uint64_t base witness table accessor for RawRepresentable in MOWorkoutMotionActivityAction()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOWorkoutMotionActivityAction and conformance MOWorkoutMotionActivityAction, type metadata accessor for MOWorkoutMotionActivityAction);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in MOWorkoutMotionActivityAction()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOWorkoutMotionActivityAction and conformance MOWorkoutMotionActivityAction, type metadata accessor for MOWorkoutMotionActivityAction);
}

uint64_t base witness table accessor for Equatable in MOWorkoutMotionActivityAction()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOWorkoutMotionActivityAction and conformance MOWorkoutMotionActivityAction, type metadata accessor for MOWorkoutMotionActivityAction);
}

uint64_t base witness table accessor for RawRepresentable in MOPhotoResourceType()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOPhotoResourceType and conformance MOPhotoResourceType, type metadata accessor for MOPhotoResourceType);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in MOPhotoResourceType()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOPhotoResourceType and conformance MOPhotoResourceType, type metadata accessor for MOPhotoResourceType);
}

uint64_t base witness table accessor for Equatable in MOPhotoResourceType()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOPhotoResourceType and conformance MOPhotoResourceType, type metadata accessor for MOPhotoResourceType);
}

uint64_t base witness table accessor for Equatable in MOSuggestionAssetMediaItemType()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOSuggestionAssetMediaItemType and conformance MOSuggestionAssetMediaItemType, type metadata accessor for MOSuggestionAssetMediaItemType);
}

uint64_t base witness table accessor for Equatable in MOPickerContentOption()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOPickerContentOption and conformance MOPickerContentOption, type metadata accessor for MOPickerContentOption);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in MOPickerContentOption()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOPickerContentOption and conformance MOPickerContentOption, type metadata accessor for MOPickerContentOption);
}

uint64_t base witness table accessor for RawRepresentable in MOPickerContentOption()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOPickerContentOption and conformance MOPickerContentOption, type metadata accessor for MOPickerContentOption);
}

uint64_t base witness table accessor for SetAlgebra in MOPickerContentOption()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOPickerContentOption and conformance MOPickerContentOption, type metadata accessor for MOPickerContentOption);
}

uint64_t base witness table accessor for Equatable in UIApplicationOpenExternalURLOptionsKey()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIApplicationOpenExternalURLOptionsKey and conformance UIApplicationOpenExternalURLOptionsKey, type metadata accessor for UIApplicationOpenExternalURLOptionsKey);
}

uint64_t base witness table accessor for Equatable in MOUsageContextType()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOUsageContextType and conformance MOUsageContextType, type metadata accessor for MOUsageContextType);
}

uint64_t base witness table accessor for Equatable in CIContextOption()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type CIContextOption and conformance CIContextOption, type metadata accessor for CIContextOption);
}

uint64_t base witness table accessor for Equatable in UIFontDescriptorAttributeName()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIFontDescriptorAttributeName and conformance UIFontDescriptorAttributeName, type metadata accessor for UIFontDescriptorAttributeName);
}

uint64_t base witness table accessor for Equatable in MOSuggestionAssetMetadataKey()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOSuggestionAssetMetadataKey and conformance MOSuggestionAssetMetadataKey, type metadata accessor for MOSuggestionAssetMetadataKey);
}

uint64_t base witness table accessor for Equatable in NSAttributedStringKey()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
}

unint64_t lazy protocol witness table accessor for type CGFloat and conformance CGFloat()
{
  unint64_t result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

void type metadata accessor for UIFontDescriptorFeatureKey(uint64_t a1)
{
}

void type metadata accessor for MOSetting(uint64_t a1)
{
}

void type metadata accessor for MOEventBundleSourceType(uint64_t a1)
{
}

void type metadata accessor for MODatabaseUpgradeStatus(uint64_t a1)
{
}

void type metadata accessor for UIViewAnimationOptions(uint64_t a1)
{
}

void type metadata accessor for MOVisibilityCategoryForUI(uint64_t a1)
{
}

void type metadata accessor for GEOPOICategory(uint64_t a1)
{
}

void type metadata accessor for HKWorkoutActivityType(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t base witness table accessor for RawRepresentable in GEOPOICategory()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type GEOPOICategory and conformance GEOPOICategory, type metadata accessor for GEOPOICategory);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in GEOPOICategory()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type GEOPOICategory and conformance GEOPOICategory, type metadata accessor for GEOPOICategory);
}

uint64_t base witness table accessor for Equatable in GEOPOICategory()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type GEOPOICategory and conformance GEOPOICategory, type metadata accessor for GEOPOICategory);
}

uint64_t base witness table accessor for Equatable in UIViewAnimationOptions()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIViewAnimationOptions and conformance UIViewAnimationOptions, type metadata accessor for UIViewAnimationOptions);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in UIViewAnimationOptions()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIViewAnimationOptions and conformance UIViewAnimationOptions, type metadata accessor for UIViewAnimationOptions);
}

uint64_t base witness table accessor for RawRepresentable in UIViewAnimationOptions()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIViewAnimationOptions and conformance UIViewAnimationOptions, type metadata accessor for UIViewAnimationOptions);
}

uint64_t base witness table accessor for SetAlgebra in UIViewAnimationOptions()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIViewAnimationOptions and conformance UIViewAnimationOptions, type metadata accessor for UIViewAnimationOptions);
}

uint64_t base witness table accessor for RawRepresentable in MOEventBundleSourceType()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOEventBundleSourceType and conformance MOEventBundleSourceType, type metadata accessor for MOEventBundleSourceType);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in MOEventBundleSourceType()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOEventBundleSourceType and conformance MOEventBundleSourceType, type metadata accessor for MOEventBundleSourceType);
}

uint64_t base witness table accessor for Equatable in MOSetting()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOSetting and conformance MOSetting, type metadata accessor for MOSetting);
}

uint64_t base witness table accessor for RawRepresentable in UIFontDescriptorFeatureKey()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIFontDescriptorFeatureKey and conformance UIFontDescriptorFeatureKey, type metadata accessor for UIFontDescriptorFeatureKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in UIFontDescriptorFeatureKey()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIFontDescriptorFeatureKey and conformance UIFontDescriptorFeatureKey, type metadata accessor for UIFontDescriptorFeatureKey);
}

uint64_t base witness table accessor for Equatable in UIFontDescriptorFeatureKey()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIFontDescriptorFeatureKey and conformance UIFontDescriptorFeatureKey, type metadata accessor for UIFontDescriptorFeatureKey);
}

uint64_t base witness table accessor for Equatable in MOEventBundleSourceType()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type MOEventBundleSourceType and conformance MOEventBundleSourceType, type metadata accessor for MOEventBundleSourceType);
}

void MOSuggestionInterstitialAlertContentViewController.styleView()()
{
}

unint64_t MOSuggestionMapSnapshotViewStyle.description.getter(char a1)
{
  unint64_t result = 0x646C6569466F7774;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000012;
      break;
    case 2:
      unint64_t result = 0xD000000000000013;
      break;
    case 3:
      unint64_t result = 0xD000000000000018;
      break;
    case 4:
      unint64_t result = 0xD000000000000019;
      break;
    case 5:
      unint64_t result = 0x614C6E6564646968;
      break;
    default:
      return result;
  }
  return result;
}

BOOL static UIView.AutolayoutEquivalency.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void UIView.AutolayoutEquivalency.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int UIView.AutolayoutEquivalency.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance MOSuggestionMapSnapshotViewStyle(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MOSuggestionMapSnapshotViewStyle()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance MOSuggestionMapSnapshotViewStyle()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MOSuggestionMapSnapshotViewStyle()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

id MOSuggestionMapSnapshotView.imageView.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_imageView);
}

uint64_t MOSuggestionMapSnapshotView.prominentField.getter()
{
  return MOSuggestionMapSnapshotView.prominentField.getter(&OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_prominentField);
}

uint64_t MOSuggestionMapSnapshotView.prominentField.setter(uint64_t a1, uint64_t a2)
{
  return MOSuggestionMapSnapshotView.prominentField.setter(a1, a2, &OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_prominentField);
}

uint64_t (*MOSuggestionMapSnapshotView.prominentField.modify())()
{
  return MOSuggestionMapSnapshotView.secondaryField.modify;
}

uint64_t MOSuggestionMapSnapshotView.secondaryField.getter()
{
  return MOSuggestionMapSnapshotView.prominentField.getter(&OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_secondaryField);
}

uint64_t MOSuggestionMapSnapshotView.prominentField.getter(void *a1)
{
  uint64_t v2 = (uint64_t *)(v1 + *a1);
  swift_beginAccess();
  uint64_t v3 = *v2;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t MOSuggestionMapSnapshotView.secondaryField.setter(uint64_t a1, uint64_t a2)
{
  return MOSuggestionMapSnapshotView.prominentField.setter(a1, a2, &OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_secondaryField);
}

uint64_t MOSuggestionMapSnapshotView.prominentField.setter(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = (void *)(v3 + *a3);
  swift_beginAccess();
  void *v6 = a1;
  v6[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*MOSuggestionMapSnapshotView.secondaryField.modify())()
{
  return MOSuggestionMapSnapshotView.secondaryField.modify;
}

uint64_t MOSuggestionMapSnapshotView.style.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_style);
  swift_beginAccess();
  return *v1;
}

uint64_t MOSuggestionMapSnapshotView.style.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_style);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*MOSuggestionMapSnapshotView.style.modify())()
{
  return MOSuggestionMapSnapshotView.secondaryField.modify;
}

uint64_t MOSuggestionMapSnapshotView.assignedTileSize.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_assignedTileSize);
  swift_beginAccess();
  return *v1;
}

uint64_t MOSuggestionMapSnapshotView.assignedTileSize.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_assignedTileSize);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*MOSuggestionMapSnapshotView.assignedTileSize.modify())()
{
  return MOSuggestionMapSnapshotView.secondaryField.modify;
}

id MOSuggestionMapSnapshotView.platterBlurView.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_platterBlurView);
  swift_beginAccess();
  uint64_t v2 = *v1;

  return v2;
}

void MOSuggestionMapSnapshotView.platterBlurView.setter(void *a1)
{
  uint64_t v3 = (void **)(v1 + OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_platterBlurView);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *uint64_t v3 = a1;
}

uint64_t (*MOSuggestionMapSnapshotView.platterBlurView.modify())()
{
  return MOSuggestionMapSnapshotView.platterBlurView.modify;
}

id MOSuggestionMapSnapshotView.labelView.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_labelView);
}

char *MOSuggestionMapSnapshotView.__allocating_init(baseMapImage:prominentField:secondaryField:style:assignedTileSize:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  id v15 = objc_allocWithZone(v7);
  return MOSuggestionMapSnapshotView.init(baseMapImage:prominentField:secondaryField:style:assignedTileSize:)(a1, a2, a3, a4, a5, a6, a7);
}

char *MOSuggestionMapSnapshotView.init(baseMapImage:prominentField:secondaryField:style:assignedTileSize:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  int v57 = a7;
  int v56 = a6;
  uint64_t v55 = a5;
  uint64_t v54 = a4;
  uint64_t v53 = a3;
  uint64_t v63 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v62 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  v61 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = type metadata accessor for DispatchQoS();
  uint64_t v59 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  v58 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = &v7[OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_prominentField];
  void *v12 = 0;
  v12[1] = 0;
  v13 = &v7[OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_secondaryField];
  void *v13 = 0;
  v13[1] = 0;
  v14 = &v7[OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_assignedTileSize];
  v7[OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_assignedTileSize] = 11;
  uint64_t v15 = OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_platterBlurView;
  v16 = self;
  v17 = v7;
  id v18 = [v16 effectWithStyle:11];
  id v19 = [objc_allocWithZone((Class)UIVisualEffectView) initWithEffect:v18];

  *(void *)&v7[v15] = v19;
  uint64_t v20 = OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_labelView;
  *(void *)&v17[v20] = [objc_allocWithZone((Class)UILabel) init];
  id v21 = [objc_allocWithZone((Class)UIImageView) initWithImage:a1];
  *(void *)&v17[OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_imageView] = v21;
  [v21 setContentMode:2];
  swift_beginAccess();
  uint64_t v22 = v53;
  void *v12 = a2;
  v12[1] = v22;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v23 = v55;
  void *v13 = v54;
  v13[1] = v23;
  swift_bridgeObjectRelease();
  v17[OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_style] = v56;
  swift_beginAccess();
  unsigned char *v14 = v57;

  double y = CGRectZero.origin.y;
  double width = CGRectZero.size.width;
  double height = CGRectZero.size.height;
  v27 = (objc_class *)type metadata accessor for MOSuggestionMapSnapshotView();
  v65.receiver = v17;
  v65.super_class = v27;
  v28 = [super initWithFrame:CGRectZero.origin.x, y, width, height];
  v29 = &v28[OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_prominentField];
  swift_beginAccess();
  if (*((void *)v29 + 1)
    || (v31 = &v28[OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_secondaryField],
        swift_beginAccess(),
        (uint64_t v32 = *((void *)v31 + 1)) == 0))
  {
    v30 = v28;
  }
  else
  {
    *(void *)v29 = *(void *)v31;
    *((void *)v29 + 1) = v32;
    v33 = v28;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  [v28 setIsAccessibilityElement:1 v53];
  UIAccessibilityTraits v34 = UIAccessibilityTraitImage;
  v35 = v28;
  unint64_t v36 = (unint64_t)[v35 accessibilityTraits];
  if ((v34 & ~v36) != 0) {
    UIAccessibilityTraits v37 = v34;
  }
  else {
    UIAccessibilityTraits v37 = 0;
  }
  [v35 setAccessibilityTraits:v37 | v36];

  v38 = self;
  v39 = v35;
  id v40 = [v38 mainBundle];
  v66._object = (void *)0x80000001001E1510;
  v41._countAndFlagsBits = 0x70616E732070614DLL;
  v41._object = (void *)0xEC000000746F6873;
  v42._countAndFlagsBits = 0;
  v42._object = (void *)0xE000000000000000;
  v66._countAndFlagsBits = 0xD00000000000002BLL;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v41, (Swift::String_optional)0, (NSBundle)v40, v42, v66);

  NSString v43 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v39 setAccessibilityLabel:v43];

  type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  v44 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v45 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = partial apply for closure #1 in MOSuggestionMapSnapshotView.init(baseMapImage:prominentField:secondaryField:style:assignedTileSize:);
  aBlock[5] = v45;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor;
  v46 = _Block_copy(aBlock);
  swift_release();
  v47 = v58;
  static DispatchQoS.unspecified.getter();
  aBlock[0] = &_swiftEmptyArrayStorage;
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  v48 = v61;
  uint64_t v49 = v63;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v46);

  (*(void (**)(char *, uint64_t))(v62 + 8))(v48, v49);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v47, v60);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UITraitDefinition.Type>);
  uint64_t v50 = swift_allocObject();
  *(_OWORD *)(v50 + 16) = xmmword_1001DA0F0;
  *(void *)(v50 + 32) = type metadata accessor for UITraitUserInterfaceStyle();
  *(void *)(v50 + 40) = &protocol witness table for UITraitUserInterfaceStyle;
  v51 = v39;
  UIView.registerForTraitChanges(_:action:)();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return v51;
}

uint64_t type metadata accessor for MOSuggestionMapSnapshotView()
{
  return self;
}

void closure #1 in MOSuggestionMapSnapshotView.init(baseMapImage:prominentField:secondaryField:style:assignedTileSize:)()
{
  swift_beginAccess();
  Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = Strong;
    id v2 = [Strong addSubview:*(void *)((char *)Strong + OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_imageView)];
    uint64_t v3 = (void *)(*(uint64_t (**)(id))((swift_isaMask & *v1) + 0xE8))(v2);
    [v1 addSubview:v3];

    id v4 = [v1 addSubview:*(void *)((char *)v1 + OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_labelView)];
    (*(void (**)(id))((swift_isaMask & *v1) + 0x108))(v4);
  }
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

Swift::Void __swiftcall MOSuggestionMapSnapshotView.handleTraitChange()()
{
  id v1 = [v0 traitCollection];
  id v2 = [v1 userInterfaceStyle];

  int v3 = (*(unsigned __int8 (**)(void))((swift_isaMask & *v0) + 0xB8))();
  if (v2 == (id)1)
  {
    if (v3 == 2) {
      return;
    }
    id v4 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xE8))();
    id v5 = [self effectWithStyle:11];
  }
  else
  {
    if (v3 == 2) {
      return;
    }
    id v4 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xE8))();
    id v5 = [self effectWithStyle:16];
  }
  id v6 = v5;
  [v4 setEffect:];
}

uint64_t MOSuggestionMapSnapshotView.applyStyle()()
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xB8))();
  switch((char)result)
  {
    case 0:
      id v2 = *(uint64_t (**)(void))((swift_isaMask & *v0) + 0x88);
      uint64_t v3 = v2();
      if (v4)
      {
        uint64_t v5 = v3;
        uint64_t v6 = v4;
        uint64_t v7 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xA0))();
        if (v8)
        {
          uint64_t v9 = v7;
          uint64_t v10 = v8;
          MOSuggestionMapSnapshotView.addPlatter()();
          MOSuggestionMapSnapshotView.addProminentAndSecondaryLabel(prominentField:secondaryField:)(v5, v6, v9, v10);
          goto LABEL_11;
        }
        uint64_t v3 = swift_bridgeObjectRelease();
      }
      uint64_t result = ((uint64_t (*)(uint64_t))v2)(v3);
      if (v18) {
        goto LABEL_14;
      }
      break;
    case 1:
      uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x88))();
      if (v11)
      {
LABEL_14:
        MOSuggestionMapSnapshotView.addPlatter()();
        MOSuggestionMapSnapshotView.addFullWidthProminentLabel(text:)();
        goto LABEL_15;
      }
      break;
    case 2:
      uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x88))();
      if (v12)
      {
        MOSuggestionMapSnapshotView.addGradient()();
        MOSuggestionMapSnapshotView.addFullWidthGradientLabel(text:)();
        goto LABEL_15;
      }
      break;
    case 4:
      uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x88))();
      if (v13)
      {
        uint64_t v14 = result;
        uint64_t v15 = v13;
        uint64_t v16 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xA0))();
        MOSuggestionMapSnapshotView.addCarouselCenteredLabels(prominentField:secondaryField:)(v14, v15, v16, v17);
LABEL_11:
        swift_bridgeObjectRelease();
LABEL_15:
        uint64_t result = swift_bridgeObjectRelease();
      }
      break;
    default:
      return result;
  }
  return result;
}

void MOSuggestionMapSnapshotView.platterFrame.getter()
{
  [v0 bounds];
  CGRectGetHeight(v2);
  [v0 bounds];
  CGRectGetHeight(v3);
  [v0 bounds];
  CGRectGetHeight(v4);
  [v0 bounds];
  CGRectGetHeight(v5);
  [v0 bounds];
  CGRectGetWidth(v6);
  [v0 bounds];
  CGRectGetHeight(v7);
  [v0 bounds];
  CGRectGetHeight(v8);

  MOSuggestionInterstitialExpandableListViewCellConstants.init()();
}

void MOSuggestionMapSnapshotView.platterLabelFrame.getter()
{
  [v0 bounds];
  CGRectGetHeight(v2);
  [v0 bounds];
  CGRectGetHeight(v3);
  [v0 bounds];
  CGRectGetHeight(v4);
  [v0 bounds];
  CGRectGetHeight(v5);
  [v0 bounds];
  CGRectGetWidth(v6);
  [v0 bounds];
  CGRectGetHeight(v7);
  [v0 bounds];
  CGRectGetHeight(v8);

  MOSuggestionInterstitialExpandableListViewCellConstants.init()();
}

void MOSuggestionMapSnapshotView.gradientFrameLabel.getter()
{
  (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xD0))();
  [v0 bounds];
  CGRectGetHeight(v1);
  [v0 bounds];
  CGRectGetHeight(v2);
  [v0 bounds];
  CGRectGetWidth(v3);
  [v0 bounds];
  CGRectGetHeight(v4);
  MOSuggestionInterstitialExpandableListViewCellConstants.init()();
}

void MOSuggestionMapSnapshotView.addGradient()()
{
  CGRect v1 = v0;
  NSString v43 = *(uint64_t (**)(void))((swift_isaMask & *v0) + 0xE8);
  CGRect v2 = (void *)v43();
  [v1 bounds];
  CGRectGetHeight(v46);
  [v1 bounds];
  CGRectGetHeight(v47);
  [v1 bounds];
  CGRectGetWidth(v48);
  [v1 bounds];
  CGRectGetHeight(v49);
  MOSuggestionInterstitialExpandableListViewCellConstants.init()();
  [v2 setFrame:];

  id v3 = [objc_allocWithZone((Class)CAGradientLayer) init];
  MOSuggestionInterstitialExpandableListViewCellConstants.init()();
  [v3 setStartPoint:0.5, v4];
  MOSuggestionInterstitialExpandableListViewCellConstants.init()();
  [v3 setEndPoint:0.5, v5];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1001DA100;
  CGRect v7 = self;
  id v8 = [v7 clearColor];
  id v9 = [v8 CGColor];

  type metadata accessor for CGColorRef(0);
  uint64_t v11 = v10;
  *(void *)(v6 + 56) = v10;
  *(void *)(v6 + 32) = v9;
  id v12 = [v7 whiteColor];
  id v13 = [v12 colorWithAlphaComponent:0.85];

  id v14 = [v13 CGColor];
  *(void *)(v6 + 88) = v11;
  *(void *)(v6 + 64) = v14;
  id v15 = [v7 whiteColor];
  id v16 = [v15 colorWithAlphaComponent:1.0];

  id v17 = [v16 CGColor];
  *(void *)(v6 + 120) = v11;
  *(void *)(v6 + 96) = v17;
  id v18 = [v7 whiteColor];
  id v19 = [v18 colorWithAlphaComponent:1.0];

  id v20 = [v19 CGColor];
  *(void *)(v6 + 152) = v11;
  *(void *)(v6 + 128) = v20;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v3 setColors:isa];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_1001DA110;
  *(void *)(v22 + 32) = [objc_allocWithZone((Class)NSNumber) initWithDouble:0.0];
  *(void *)(v22 + 40) = [objc_allocWithZone((Class)NSNumber) initWithDouble:0.5];
  *(void *)(v22 + 48) = [objc_allocWithZone((Class)NSNumber) initWithDouble:0.65];
  *(void *)(v22 + 56) = [objc_allocWithZone((Class)NSNumber) initWithDouble:1.0];
  specialized Array._endMutation()();
  type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  Class v23 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v3 setLocations:v23];

  id v24 = v3;
  v25 = (void *)v43();
  [v25 bounds];
  double v27 = v26;
  double v29 = v28;
  double v31 = v30;
  double v33 = v32;

  [v24 setFrame:v27, v29, v31, v33];
  UIAccessibilityTraits v34 = (void *)v43();
  id v35 = [v34 layer];

  [v35 setMask:v24];
  unint64_t v36 = (void *)v43();
  id v37 = [v36 layer];

  [v37 setMasksToBounds:1];
  v38 = (void *)v43();
  v39 = self;
  id v40 = [self mainScreen];
  [v40 scale];
  double v42 = v41;

  id v44 = [v39 _effectWithBlurRadius:8.0 scale:v42];
  [v38 setEffect:v44];
}

id MOSuggestionMapSnapshotView.addFullWidthGradientLabel(text:)()
{
  CGRect v1 = *(void **)((char *)v0 + OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_labelView);
  MOSuggestionMapSnapshotView.gradientFrameLabel.getter();
  [v1 setFrame:];
  [v1 setTextAlignment:1];
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 setText:v2];

  id v3 = [self secondaryLabelColor];
  [v1 setTextColor:v3];

  int v4 = (*(unsigned __int8 (**)(void))((swift_isaMask & *v0) + 0xD0))();
  double v5 = self;
  if (v4 == 4) {
    id v6 = [v5 preferredFontDescriptorWithTextStyle:UIFontTextStyleFootnote];
  }
  else {
    id v6 = [v5 preferredFontDescriptorWithTextStyle:UIFontTextStyleCaption1];
  }
  id v7 = [v6 fontDescriptorWithSymbolicTraits:32770];

  if (v7)
  {
    id v8 = [self fontWithDescriptor:v7 size:0.0];
  }
  else
  {
    id v8 = 0;
  }
  [v1 setFont:v8];

  return [v1 setNumberOfLines:2];
}

void MOSuggestionMapSnapshotView.addFullWidthProminentLabel(text:)()
{
  CGRect v1 = *(void **)(v0 + OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_labelView);
  MOSuggestionMapSnapshotView.platterLabelFrame.getter();
  [v1 setFrame:];
  [v1 setTextAlignment:1];
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 setText:v2];

  id v3 = [self secondaryLabelColor];
  [v1 setTextColor:v3];

  int v4 = self;
  id v5 = [v4 preferredFontForTextStyle:UIFontTextStyleFootnote];
  id v6 = [v5 fontDescriptor];
  id v7 = [v6 fontDescriptorWithSymbolicTraits:2];

  if (v7)
  {
    id v8 = [v4 fontWithDescriptor:v7 size:0.0];

    [v1 setFont:v8];
  }
  else
  {
    __break(1u);
  }
}

void MOSuggestionMapSnapshotView.addProminentAndSecondaryLabel(prominentField:secondaryField:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = *(void **)(v4 + OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_labelView);
  MOSuggestionMapSnapshotView.platterLabelFrame.getter();
  [v7 setFrame:];
  id v29 = v7;
  [v7 setTextAlignment:1];
  swift_bridgeObjectRetain();
  v8._countAndFlagsBits = 0x20A280E220;
  v8._object = (void *)0xA500000000000000;
  String.append(_:)(v8);
  swift_bridgeObjectRetain();
  v9._countAndFlagsBits = a3;
  v9._object = a4;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  id v10 = objc_allocWithZone((Class)NSMutableAttributedString);
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v30 = [v10 initWithString:v11];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(NSAttributedStringKey, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1001DA0F0;
  *(void *)(inited + 32) = NSFontAttributeName;
  id v13 = self;
  id v14 = NSFontAttributeName;
  id v15 = [v13 preferredFontForTextStyle:UIFontTextStyleFootnote];
  id v16 = [v15 fontDescriptor];
  id v17 = [v16 fontDescriptorWithSymbolicTraits:2];

  if (v17)
  {
    id v18 = [v13 fontWithDescriptor:v17 size:0.0];

    uint64_t v19 = type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for UIFont);
    *(void *)(inited + 64) = v19;
    *(void *)(inited + 40) = v18;
    specialized Dictionary.init(dictionaryLiteral:)(inited);
    type metadata accessor for NSAttributedStringKey(0);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v30 addAttributes:isa range:0, String.count.getter()];

    uint64_t v21 = swift_initStackObject();
    *(_OWORD *)(v21 + 16) = xmmword_1001DA0F0;
    *(void *)(v21 + 32) = v14;
    uint64_t v22 = v14;
    id v23 = [v13 preferredFontForTextStyle:UIFontTextStyleFootnote];
    *(void *)(v21 + 64) = v19;
    *(void *)(v21 + 40) = v23;
    specialized Dictionary.init(dictionaryLiteral:)(v21);
    v24.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v25 = String.count.getter();
    uint64_t v26 = String.count.getter();
    uint64_t v27 = String.count.getter();
    if (!__OFADD__(v26, v27))
    {
      [v30 addAttributes:v24.super.isa range:v25, v26 + v27];

      [v29 setAttributedText:v30];
      id v28 = [self secondaryLabelColor];
      [v29 setTextColor:v28];

      [v29 setAdjustsFontSizeToFitWidth:1];
      return;
    }
    __break(1u);
  }
  __break(1u);
}

void MOSuggestionMapSnapshotView.addCarouselCenteredLabels(prominentField:secondaryField:)(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  Swift::String v9 = *(void **)(v4 + OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_labelView);
  [v9 setTextAlignment:1];
  uint64_t v71 = a3;
  if (!a4 || a3 == a1 && a2 == a4 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    v67._countAndFlagsBits = a3;
    v67._object = a4;
    String.append(_:)(v67);
    swift_bridgeObjectRetain();
    v68._countAndFlagsBits = 10;
    v68._object = (void *)0xE100000000000000;
    String.append(_:)(v68);
    swift_bridgeObjectRelease();
  }
  id v10 = objc_allocWithZone((Class)NSMutableAttributedString);
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v12 = [v10 initWithString:v11];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(NSAttributedStringKey, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1001DA0F0;
  *(void *)(inited + 32) = NSFontAttributeName;
  id v14 = self;
  v69 = NSFontAttributeName;
  v70 = v14;
  id v15 = [v14 preferredFontForTextStyle:UIFontTextStyleSubheadline];
  Class isa = UIFont.withWeight(_:)(UIFontWeightSemibold).super.isa;

  uint64_t v17 = type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for UIFont);
  *(void *)(inited + 64) = v17;
  *(void *)(inited + 40) = isa;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
  Class v18 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v12 addAttributes:v18 range:0, String.count.getter()];

  if (!a4 || v71 == a1 && a2 == a4 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v19 = swift_initStackObject();
  *(_OWORD *)(v19 + 16) = xmmword_1001DA0F0;
  *(void *)(v19 + 32) = v69;
  id v20 = v69;
  id v21 = [v70 preferredFontForTextStyle:UIFontTextStyleSubheadline];
  *(void *)(v19 + 64) = v17;
  *(void *)(v19 + 40) = v21;
  specialized Dictionary.init(dictionaryLiteral:)(v19);
  v22.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v23 = String.count.getter();
  uint64_t v24 = v23 + 1;
  if (__OFADD__(v23, 1))
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v25 = String.count.getter();
  uint64_t v26 = String.count.getter();
  uint64_t v27 = v25 + v26;
  if (__OFADD__(v25, v26))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (__OFSUB__(v27, 1))
  {
LABEL_24:
    __break(1u);
    return;
  }
  [v12 addAttributes:v22.super.isa range:v24, v27 - 1];

LABEL_14:
  [v9 setAttributedText:v12];
  id v28 = [self secondaryLabelColor];
  [v9 setTextColor:v28];

  [v9 setNumberOfLines:2];
  [v9 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v72 frame];
  [v9 setPreferredMaxLayoutWidth:CGRectGetWidth(v73) + -64.0];
  id v29 = [v9 heightAnchor];
  [v72 bounds];
  id v30 = [v29 constraintLessThanOrEqualToConstant:CGRectGetHeight(v74) / 5.0];

  [v30 setActive:1];
  id v31 = [v9 superview];
  if (v31)
  {
    double v32 = v31;
    [v9 setTranslatesAutoresizingMaskIntoConstraints:0];
    id v33 = [v9 bottomAnchor];
    id v34 = [v32 bottomAnchor];
    id v35 = [v33 constraintEqualToAnchor:v34];

    if (v35)
    {
      [v35 setConstant:-16.0];
      id v36 = v35;
      [v36 setActive:1];
    }
  }
  id v37 = [v9 superview];
  if (v37)
  {
    v38 = v37;
    [v9 setTranslatesAutoresizingMaskIntoConstraints:0];
    id v39 = [v9 centerXAnchor];
    id v40 = [v38 centerXAnchor];
    id v41 = [v39 constraintEqualToAnchor:v40];

    [v41 setConstant:0.0];
    id v42 = v41;
    [v42 setActive:1];
  }
  NSString v43 = *(uint64_t (**)(void))((swift_isaMask & *v72) + 0xE8);
  id v44 = (void *)v43();
  [v44 setTranslatesAutoresizingMaskIntoConstraints:0];

  uint64_t v45 = (void *)v43();
  [v45 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v46 = [v45 leadingAnchor];
  id v47 = [v9 leadingAnchor];
  id v48 = [v46 constraintEqualToAnchor:v47 constant:-16.0];

  [v48 setActive:1];
  CGRect v49 = (void *)v43();
  [v49 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v50 = [v49 trailingAnchor];
  id v51 = [v9 trailingAnchor];
  id v52 = [v50 constraintEqualToAnchor:v51 constant:16.0];

  [v52 setActive:1];
  uint64_t v53 = (void *)v43();
  [v53 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v54 = [v53 topAnchor];
  id v55 = [v9 topAnchor];
  id v56 = [v54 constraintEqualToAnchor:v55 constant:-8.0];

  [v56 setActive:1];
  int v57 = (void *)v43();
  [v57 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v58 = [v57 bottomAnchor];
  id v59 = [v9 bottomAnchor];
  id v60 = [v58 constraintEqualToAnchor:v59 constant:8.0];

  [v60 setActive:1];
  v61 = (void *)v43();
  id v62 = [v61 layer];

  [v62 setCornerRadius:8.0];
  uint64_t v63 = (void *)v43();
  id v64 = [v63 layer];

  LODWORD(v65) = 1065017672;
  [v64 setOpacity:v65];

  Swift::String v66 = (void *)v43();
  [v66 setClipsToBounds:1];
}

void MOSuggestionMapSnapshotView.addPlatter()()
{
  CGRect v1 = *(uint64_t (**)(void))((swift_isaMask & *v0) + 0xE8);
  NSString v2 = (void *)v1();
  MOSuggestionMapSnapshotView.platterFrame.getter();
  [v2 setFrame:];

  id v3 = (void *)v1();
  id v4 = [v3 layer];

  [v0 bounds];
  [v4 setCornerRadius:CGRectGetHeight(v10) / 5.0 / 6.0];

  id v5 = (void *)v1();
  id v6 = [v5 layer];

  LODWORD(v7) = 1065017672;
  [v6 setOpacity:v7];

  id v8 = (id)v1();
  [v8 setClipsToBounds:1];
}

Swift::Void __swiftcall MOSuggestionMapSnapshotView.layoutSubviews()()
{
  CGRect v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  Swift::String v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  CGRect v10 = (objc_class *)type metadata accessor for MOSuggestionMapSnapshotView();
  v16.receiver = v0;
  v16.super_class = v10;
  [super layoutSubviews];
  NSString v11 = *(void **)&v0[OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_imageView];
  [v1 bounds];
  [v11 setFrame:];
  type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  id v12 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v13 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = partial apply for closure #1 in MOSuggestionMapSnapshotView.layoutSubviews();
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_5;
  id v14 = _Block_copy(aBlock);
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = &_swiftEmptyArrayStorage;
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

void closure #1 in MOSuggestionMapSnapshotView.layoutSubviews()()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    CGRect v1 = (void *)Strong;
    MOSuggestionMapSnapshotView.applyStyle()();
  }
}

id MOSuggestionMapSnapshotView.__deallocating_deinit()
{
  CGRect v1 = v0;
  [*(id *)&v0[OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_imageView] setImage:0];
  uint64_t v2 = (id *)&v0[OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_platterBlurView];
  swift_beginAccess();
  [*v2 setEffect:0];
  if (serverManager._displayMonitor != (FBSDisplayLayoutMonitor *)-1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static MOAngelLogger.memory);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "[MOSuggestionMapSnapshotView] de-init", v6, 2u);
    swift_slowDealloc();
  }

  v8.receiver = v1;
  v8.super_class = (Class)type metadata accessor for MOSuggestionMapSnapshotView();
  return [super dealloc];
}

id MOSuggestionInterstitialSupplementaryCheckmarkView.__allocating_init(coder:)(void *a1)
{
  id v3 = [objc_allocWithZone(v1) initWithCoder:a1];

  return v3;
}

id MOSuggestionInterstitialSupplementaryCheckmarkView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);

  return [v9 initWithFrame:a1, a2, a3, a4];
}

void MOSuggestionMapSnapshotView.init(frame:)()
{
}

uint64_t sub_100014C5C()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void partial apply for closure #1 in MOSuggestionMapSnapshotView.init(baseMapImage:prominentField:secondaryField:style:assignedTileSize:)()
{
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  }
  return result;
}

void partial apply for closure #1 in MOSuggestionMapSnapshotView.layoutSubviews()()
{
}

void specialized MOSuggestionMapSnapshotView.init(coder:)()
{
  CGRect v1 = &v0[OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_prominentField];
  void *v1 = 0;
  v1[1] = 0;
  uint64_t v2 = &v0[OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_secondaryField];
  void *v2 = 0;
  v2[1] = 0;
  v0[OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_assignedTileSize] = 11;
  uint64_t v3 = OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_platterBlurView;
  id v4 = [self effectWithStyle:11];
  id v5 = [objc_allocWithZone((Class)UIVisualEffectView) initWithEffect:v4];

  *(void *)&v0[v3] = v5;
  uint64_t v6 = OBJC_IVAR____TtC16MomentsUIService27MOSuggestionMapSnapshotView_labelView;
  *(void *)&v0[v6] = [objc_allocWithZone((Class)UILabel) init];

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type MOSuggestionMapSnapshotViewStyle and conformance MOSuggestionMapSnapshotViewStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type MOSuggestionMapSnapshotViewStyle and conformance MOSuggestionMapSnapshotViewStyle;
  if (!lazy protocol witness table cache variable for type MOSuggestionMapSnapshotViewStyle and conformance MOSuggestionMapSnapshotViewStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MOSuggestionMapSnapshotViewStyle and conformance MOSuggestionMapSnapshotViewStyle);
  }
  return result;
}

uint64_t sub_100014E84@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x88))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_100014EE0(uint64_t *a1, void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))((swift_isaMask & **a2) + 0x90);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_100014F58@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0xA0))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_100014FB4(uint64_t *a1, void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))((swift_isaMask & **a2) + 0xA8);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_10001502C@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0xB8))();
  *a2 = result;
  return result;
}

uint64_t sub_100015088(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((swift_isaMask & **a2) + 0xC0))(*a1);
}

uint64_t sub_1000150E0@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0xD0))();
  *a2 = result;
  return result;
}

uint64_t sub_10001513C(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((swift_isaMask & **a2) + 0xD8))(*a1);
}

uint64_t sub_100015194@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0xE8))();
  *a2 = result;
  return result;
}

uint64_t sub_1000151F0(id *a1, void **a2)
{
  return (*(uint64_t (**)(id))((swift_isaMask & **a2) + 0xF0))(*a1);
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for MOSuggestionMapSnapshotViewStyle(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for MOSuggestionMapSnapshotViewStyle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000153BCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for MOSuggestionMapSnapshotViewStyle(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *destructiveInjectEnumTag for MOSuggestionMapSnapshotViewStyle(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for MOSuggestionMapSnapshotViewStyle()
{
  return &type metadata for MOSuggestionMapSnapshotViewStyle;
}

uint64_t lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t MOSuggestionAssetMapsClusterer.skipRows.getter()
{
  return MOSuggestionAssetMapsClusterer.skipRows.getter();
}

{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t MOSuggestionAssetMapsClusterer.skipRows.setter(uint64_t a1)
{
  return MOSuggestionAssetMapsClusterer.skipRows.setter(a1, &OBJC_IVAR____TtC16MomentsUIService30MOSuggestionAssetMapsClusterer_skipRows);
}

uint64_t (*MOSuggestionAssetMapsClusterer.skipRows.modify())()
{
  return MOSuggestionMapSnapshotView.secondaryField.modify;
}

uint64_t MOSuggestionAssetMapsClusterer.skipColumns.getter()
{
  return MOSuggestionAssetMapsClusterer.skipRows.getter();
}

uint64_t MOSuggestionAssetMapsClusterer.skipColumns.setter(uint64_t a1)
{
  return MOSuggestionAssetMapsClusterer.skipRows.setter(a1, &OBJC_IVAR____TtC16MomentsUIService30MOSuggestionAssetMapsClusterer_skipColumns);
}

uint64_t MOSuggestionAssetMapsClusterer.skipRows.setter(uint64_t a1, void *a2)
{
  unsigned int v4 = (void *)(v2 + *a2);
  swift_beginAccess();
  void *v4 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*MOSuggestionAssetMapsClusterer.skipColumns.modify())()
{
  return MOSuggestionMapSnapshotView.platterBlurView.modify;
}

void *MOSuggestionAssetMapsClusterer.MAX_SPAN_REGION_DEGREES.unsafeMutableAddressor()
{
  return &static MOSuggestionAssetMapsClusterer.MAX_SPAN_REGION_DEGREES;
}

double static MOSuggestionAssetMapsClusterer.MAX_SPAN_REGION_DEGREES.getter()
{
  return 180.0;
}

double MOSuggestionAssetMapsClusterer.Cluster.coordinates.getter()
{
  return *(double *)v0;
}

void MOSuggestionAssetMapsClusterer.Cluster.coordinates.setter(double a1, double a2)
{
  double *v2 = a1;
  v2[1] = a2;
}

void (__swiftcall *MOSuggestionAssetMediaCoverArtQueryInput.title.modify())()
{
  return MOSuggestionInterstitialExpandableListViewCellConstants.init();
}

double MOSuggestionAssetMapsClusterer.Cluster.distance.getter()
{
  return *(double *)(v0 + 16);
}

void MOSuggestionAssetMapsClusterer.Cluster.distance.setter(double a1)
{
  *(double *)(v1 + 16) = a1;
}

void (__swiftcall *MOSuggestionAssetMediaCoverArtQueryInput.albumTitle.modify())()
{
  return MOSuggestionInterstitialExpandableListViewCellConstants.init();
}

uint64_t MOSuggestionAssetMapsClusterer.Cluster.count.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t MOSuggestionAssetMapsClusterer.Cluster.count.setter(uint64_t result)
{
  *(void *)(v1 + 24) = result;
  return result;
}

void (__swiftcall *MOPOIAnnotationViewConfiguration.forceCircle.modify())()
{
  return MOSuggestionInterstitialExpandableListViewCellConstants.init();
}

uint64_t MOSuggestionAssetMediaCoverArtQueryInput.artistName.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MOSuggestionAssetMediaCoverArtQueryInput.artistName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return result;
}

void (__swiftcall *MOSuggestionAssetMediaCoverArtQueryInput.artistName.modify())()
{
  return MOSuggestionInterstitialExpandableListViewCellConstants.init();
}

uint64_t MOSuggestionAssetMapsClusterer.Cluster.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster() + 32);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster()
{
  uint64_t result = type metadata singleton initialization cache for MOSuggestionAssetMapsClusterer.Cluster;
  if (!type metadata singleton initialization cache for MOSuggestionAssetMapsClusterer.Cluster) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t MOSuggestionAssetMapsClusterer.Cluster.id.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster() + 32);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

void (__swiftcall *MOSuggestionAssetMapsClusterer.Cluster.id.modify())()
{
  return MOSuggestionInterstitialExpandableListViewCellConstants.init();
}

uint64_t MOSuggestionAssetMapsClusterer.Cluster.geoMapItem.getter()
{
  type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster();

  return swift_unknownObjectRetain();
}

uint64_t MOSuggestionAssetMapsClusterer.Cluster.geoMapItem.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster() + 36);
  uint64_t result = swift_unknownObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

void (__swiftcall *MOSuggestionAssetMapsClusterer.Cluster.geoMapItem.modify())()
{
  return MOSuggestionInterstitialExpandableListViewCellConstants.init();
}

double MOSuggestionAssetMapsClusterer.Cluster.confidence.getter()
{
  return *(double *)(v0 + *(int *)(type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster() + 40));
}

uint64_t MOSuggestionAssetMapsClusterer.Cluster.confidence.setter(double a1)
{
  uint64_t result = type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster();
  *(double *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

void (__swiftcall *MOSuggestionAssetMapsClusterer.Cluster.confidence.modify())()
{
  return MOSuggestionInterstitialExpandableListViewCellConstants.init();
}

uint64_t MOSuggestionAssetMapsClusterer.Cluster.title.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster() + 44));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MOSuggestionAssetMapsClusterer.Cluster.title.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster() + 44));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

void (__swiftcall *MOSuggestionAssetMapsClusterer.Cluster.title.modify())()
{
  return MOSuggestionInterstitialExpandableListViewCellConstants.init();
}

uint64_t MOSuggestionAssetMapsClusterer.Cluster.isWork.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster() + 48));
}

uint64_t MOSuggestionAssetMapsClusterer.Cluster.isWork.setter(char a1)
{
  uint64_t result = type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster();
  *(unsigned char *)(v1 + *(int *)(result + 48)) = a1;
  return result;
}

void (__swiftcall *MOSuggestionAssetMapsClusterer.Cluster.isWork.modify())()
{
  return MOSuggestionInterstitialExpandableListViewCellConstants.init();
}

uint64_t MOSuggestionAssetMapsClusterer.Cluster.isScaledDownPOI.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster() + 52));
}

uint64_t MOSuggestionAssetMapsClusterer.Cluster.isScaledDownPOI.setter(char a1)
{
  uint64_t result = type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster();
  *(unsigned char *)(v1 + *(int *)(result + 52)) = a1;
  return result;
}

void (__swiftcall *MOSuggestionAssetMapsClusterer.Cluster.isScaledDownPOI.modify())()
{
  return MOSuggestionInterstitialExpandableListViewCellConstants.init();
}

double MOSuggestionAssetMapsClusterer.Cluster.horizontalUncertainty.getter()
{
  return *(double *)(v0 + *(int *)(type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster() + 56));
}

uint64_t MOSuggestionAssetMapsClusterer.Cluster.horizontalUncertainty.setter(double a1)
{
  uint64_t result = type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster();
  *(double *)(v1 + *(int *)(result + 56)) = a1;
  return result;
}

void (__swiftcall *MOSuggestionAssetMapsClusterer.Cluster.horizontalUncertainty.modify())()
{
  return MOSuggestionInterstitialExpandableListViewCellConstants.init();
}

uint64_t static MOSuggestionAssetMapsClusterer.Cluster.== infix(_:_:)()
{
  type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster();

  return static UUID.== infix(_:_:)();
}

uint64_t MOSuggestionAssetMapsClusterer.Cluster.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int MOSuggestionAssetMapsClusterer.Cluster.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t MOSuggestionAssetMapsClusterer.Cluster.init(coordinates:distance:count:chain:id:geoMapItem:confidence:title:isWork:isScaledDownPOI:horizontalUncertainty:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, double a13@<D3>, double a14@<D4>, char a15)
{
  *(double *)a9 = a10;
  *(double *)(a9 + 8) = a11;
  *(double *)(a9 + 16) = a12;
  *(void *)(a9 + 24) = a1;
  *(void *)(a9 + 32) = a2;
  *(void *)(a9 + 40) = a3;
  uint64_t v23 = (int *)type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster();
  uint64_t v24 = a9 + v23[8];
  uint64_t v25 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 32))(v24, a4, v25);
  *(void *)(a9 + v23[9]) = a5;
  *(double *)(a9 + v23[10]) = a13;
  uint64_t v27 = (void *)(a9 + v23[11]);
  void *v27 = a6;
  v27[1] = a7;
  *(unsigned char *)(a9 + v23[12]) = a8;
  *(unsigned char *)(a9 + v23[13]) = a15;
  *(double *)(a9 + v23[14]) = a14;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MOSuggestionAssetMapsClusterer.Cluster()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MOSuggestionAssetMapsClusterer.Cluster()
{
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MOSuggestionAssetMapsClusterer.Cluster()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MOSuggestionAssetMapsClusterer.Cluster()
{
  return static UUID.== infix(_:_:)();
}

uint64_t MOSuggestionAssetMapsClusterer.__allocating_init(mapLocations:separationThreshold:)(uint64_t *a1, double a2)
{
  id v5 = objc_allocWithZone(v2);
  return MOSuggestionAssetMapsClusterer.init(mapLocations:separationThreshold:)(a1, a2);
}

uint64_t MOSuggestionAssetMapsClusterer.init(mapLocations:separationThreshold:)(uint64_t *a1, double a2)
{
  uint64_t v5 = type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  int v8 = (double *)((char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  *(void *)&v2[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionAssetMapsClusterer_skipRows] = &_swiftEmptySetSingleton;
  *(void *)&v2[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionAssetMapsClusterer_skipColumns] = &_swiftEmptySetSingleton;
  id v9 = &one-time initialization token for localizableStringKey;
  CGRect v10 = &_swiftEmptyArrayStorage;
  *(void *)&v2[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionAssetMapsClusterer_inputClusters] = &_swiftEmptyArrayStorage;
  *(void *)&v2[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionAssetMapsClusterer_results] = &_swiftEmptySetSingleton;
  *(double *)&v2[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionAssetMapsClusterer_separationThreshold] = a2;
  NSString v11 = (objc_class *)type metadata accessor for MOSuggestionAssetMapsClusterer();
  v27.receiver = v2;
  v27.super_class = v11;
  [super init];
  id v13 = v12;
  uint64_t v26 = 0;
  if ((unint64_t)a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v14 = *(void *)(((unint64_t)a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  id v15 = v12;
  if (v14)
  {
    while (1)
    {
      uint64_t v25 = v10;
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14 & ~(v14 >> 63), 0);
      if (v14 < 0) {
        break;
      }
      id v22 = v13;
      id v13 = 0;
      CGRect v10 = 0;
      uint64_t v17 = v25;
      unint64_t v23 = (unint64_t)a1 & 0xC000000000000001;
      id v9 = a1;
      while ((id)v14 != v13)
      {
        if (v23)
        {
          uint64_t v18 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          uint64_t v18 = a1[(void)v13 + 4];
          swift_retain();
        }
        uint64_t v24 = v18;
        closure #1 in MOSuggestionAssetMapsClusterer.init(mapLocations:separationThreshold:)(&v24, &v26, v8);
        swift_release();
        uint64_t v25 = v17;
        unint64_t v20 = v17[2];
        unint64_t v19 = v17[3];
        if (v20 >= v19 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
          uint64_t v17 = v25;
        }
        id v13 = (char *)v13 + 1;
        v17[2] = v20 + 1;
        outlined init with take of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v8, (uint64_t)v17+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v20);
        a1 = v9;
        if ((id)v14 == v13)
        {
          swift_bridgeObjectRelease();
          id v13 = v22;

          id v9 = &one-time initialization token for localizableStringKey;
          goto LABEL_16;
        }
      }
      __break(1u);
LABEL_14:
      id v21 = v13;
      swift_bridgeObjectRetain();
      uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v14) {
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();

    uint64_t v17 = &_swiftEmptyArrayStorage;
LABEL_16:
    *(void *)((char *)v13 + v9[319]) = v17;
    swift_bridgeObjectRelease();
    return (uint64_t)v13;
  }
  return result;
}

uint64_t type metadata accessor for MOSuggestionAssetMapsClusterer()
{
  return self;
}

uint64_t closure #1 in MOSuggestionAssetMapsClusterer.init(mapLocations:separationThreshold:)@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, double *a3@<X8>)
{
  uint64_t v5 = *a1;
  double v6 = (*(double (**)(void))(*(void *)*a1 + 240))();
  double v7 = (*(double (**)(void))(*(void *)v5 + 264))();
  int v8 = *(uint64_t (**)(void))(*(void *)v5 + 312);
  uint64_t v9 = v8();
  if (v10)
  {
    uint64_t v25 = 1;
  }
  else
  {
    uint64_t result = ((uint64_t (*)(uint64_t))v8)(v9);
    if (v12) {
      goto LABEL_8;
    }
    uint64_t v25 = result;
  }
  uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v27 = v13;
  v14._countAndFlagsBits = 95;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  id v15 = a2;
  uint64_t v16 = (*(uint64_t (**)(void))(*(void *)v5 + 288))();
  double v17 = (*(double (**)(void))(*(void *)v5 + 360))();
  uint64_t v18 = (*(uint64_t (**)(void))(*(void *)v5 + 336))();
  uint64_t v20 = v19;
  char v21 = (*(uint64_t (**)(void))(*(void *)v5 + 384))();
  double v22 = (*(double (**)(void))(*(void *)v5 + 456))();
  unint64_t v23 = (int *)type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster();
  uint64_t result = UUID.init()();
  *a3 = v6;
  a3[1] = v7;
  a3[2] = 0.0;
  *((void *)a3 + 3) = v25;
  *((void *)a3 + 4) = v26;
  *((void *)a3 + 5) = v27;
  *(void *)((char *)a3 + v23[9]) = v16;
  *(double *)((char *)a3 + v23[10]) = v17;
  uint64_t v24 = (uint64_t *)((char *)a3 + v23[11]);
  *uint64_t v24 = v18;
  v24[1] = v20;
  *((unsigned char *)a3 + v23[12]) = v21 & 1;
  *((unsigned char *)a3 + v23[13]) = 0;
  *(double *)((char *)a3 + v23[14]) = v22;
  if (!__OFADD__(*v15, 1))
  {
    ++*v15;
    return result;
  }
  __break(1u);
LABEL_8:
  __break(1u);
  return result;
}

Swift::Void __swiftcall MOSuggestionAssetMapsClusterer.buildDendogram()()
{
  uint64_t v1 = type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster();
  uint64_t v129 = *(void *)(v1 - 8);
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v121 = (uint64_t)v109 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v120 = (uint64_t)v109 - v5;
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v8 = __chkstk_darwin(v7);
  v113 = (char *)v109 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v117 = (uint64_t)v109 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v116 = (uint64_t)v109 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v115 = (uint64_t)v109 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v114 = (uint64_t)v109 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  v112 = (char *)v109 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  double v22 = (char *)v109 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  __chkstk_darwin(v23);
  uint64_t v122 = (uint64_t)v109 - v27;
  unint64_t v137 = *(void *)(v0 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionAssetMapsClusterer_inputClusters);
  unint64_t v133 = v137;
  uint64_t v28 = *(void *)(v137 + 16);
  if (!v28)
  {
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
LABEL_93:
    __break(1u);
LABEL_94:
    __break(1u);
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
LABEL_97:
    __break(1u);
LABEL_98:
    __break(1u);
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
LABEL_101:
    __break(1u);
    return;
  }
  uint64_t v29 = v28 - 1;
  if (v28 == 1)
  {
    swift_bridgeObjectRetain();
    goto LABEL_76;
  }
  uint64_t v127 = v26;
  uint64_t v124 = v25;
  uint64_t v125 = v24;
  uint64_t v110 = OBJC_IVAR____TtC16MomentsUIService30MOSuggestionAssetMapsClusterer_separationThreshold;
  v109[1] = v0 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionAssetMapsClusterer_results;
  swift_bridgeObjectRetain();
  uint64_t v30 = 0;
  uint64_t v119 = v0;
  uint64_t v126 = v1;
  v111 = v22;
  uint64_t v118 = v29;
  while (1)
  {
    if (v30 == v29)
    {
LABEL_88:
      __break(1u);
LABEL_89:
      __break(1u);
      goto LABEL_90;
    }
    unint64_t v31 = v133;
    uint64_t v32 = *(void *)(v133 + 16);
    if (v32
      && (uint64_t v33 = static Array._allocateBufferUninitialized(minimumCapacity:)(),
          *(void *)(v33 + 16) = v32,
          memset_pattern16((void *)(v33 + 32), &unk_1001DA260, 8 * v32),
          (uint64_t v34 = *(void *)(v31 + 16)) != 0))
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Double]);
      id v35 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      v35[2] = v34;
      v35[4] = v33;
      if (v34 != 1)
      {
        id v36 = v35;
        v35[5] = v33;
        uint64_t v37 = v34 - 2;
        if (v34 != 2)
        {
          v38 = v35 + 6;
          do
          {
            *v38++ = v33;
            swift_bridgeObjectRetain();
            --v37;
          }
          while (v37);
        }
        swift_bridgeObjectRetain();
        unint64_t v31 = v133;
        id v35 = v36;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      id v35 = &_swiftEmptyArrayStorage;
    }
    uint64_t v39 = *(void *)(v31 + 16);
    if (!v39) {
      goto LABEL_89;
    }
    uint64_t v123 = v30;
    uint64_t v40 = v39 - 1;
    id v41 = v35;
    if (v39 != 1) {
      break;
    }
LABEL_34:
    distanceMatrix._rawValue = v35;
    uint64_t v62 = v119;
    Swift::tuple_tuple_Int_Int_Double_optional v138 = MOSuggestionAssetMapsClusterer.findSmallestEuclideanDistance(distanceMatrix:lowerHalfOnly:)(&distanceMatrix, 1);
    if (v63)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v64 = (uint64_t)v111;
      if (v138.value._0._0 < 0) {
        goto LABEL_92;
      }
      unint64_t v65 = *(void *)(v133 + 16);
      if (v138.value._0._0 >= v65) {
        goto LABEL_93;
      }
      unint64_t v66 = v138.value._0._1;
      double v67 = *(double *)&v138.is_nil;
      unint64_t v132 = (*(unsigned __int8 *)(v129 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v129 + 80);
      uint64_t v68 = v133 + v132;
      uint64_t v69 = *(void *)(v129 + 72);
      outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v133 + v132 + v69 * v138.value._0._0, v122);
      if (v66 >= v65) {
        goto LABEL_94;
      }
      double v70 = v67;
      uint64_t v71 = v127;
      outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v68 + v69 * v66, v127);
      if (*(double *)(v62 + v110) * *(double *)(v62 + v110) > v70)
      {
        unint64_t v134 = v122 + *(int *)(v126 + 32);
        swift_bridgeObjectRetain();
        unint64_t v72 = 0;
        uint64_t v135 = v69;
        uint64_t v73 = v69 + v132;
        unint64_t v74 = 1;
        uint64_t v75 = (uint64_t)v113;
        uint64_t v76 = (uint64_t)v112;
        while (1)
        {
          char v77 = static UUID.== infix(_:_:)();
          outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v68, v64);
          outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v127, v76);
          if (v77) {
            break;
          }
          char v78 = static UUID.== infix(_:_:)();
          outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v76);
          outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v64);
          if (v78) {
            goto LABEL_48;
          }
          ++v72;
          v68 += v135;
          ++v74;
          v73 += v135;
          if (v65 == v72)
          {
            unint64_t v79 = v133;
            swift_bridgeObjectRelease();
            unint64_t v72 = *(void *)(v79 + 16);
            unint64_t v80 = v137;
            goto LABEL_50;
          }
        }
        outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v76);
        outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v64);
LABEL_48:
        unint64_t v85 = v133;
        swift_bridgeObjectRelease();
        if (__OFADD__(v72, 1)) {
          goto LABEL_101;
        }
        uint64_t v86 = *(void *)(v85 + 16);
        unint64_t v80 = v137;
        if (v72 + 1 != v86)
        {
          while (v74 < *(void *)(v80 + 16))
          {
            outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v80 + v73, v75);
            char v99 = static UUID.== infix(_:_:)();
            uint64_t v100 = v75;
            uint64_t v101 = v75;
            uint64_t v102 = v124;
            outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v100, v124);
            uint64_t v103 = v125;
            outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v127, v125);
            if (v99)
            {
              outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v102);
              outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v103);
              outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v101);
              uint64_t v75 = v101;
            }
            else
            {
              char v104 = static UUID.== infix(_:_:)();
              outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v102);
              outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v103);
              outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v101);
              uint64_t v75 = v101;
              if ((v104 & 1) == 0)
              {
                if (v74 != v72)
                {
                  if ((v72 & 0x8000000000000000) != 0) {
                    goto LABEL_95;
                  }
                  unint64_t v105 = *(void *)(v80 + 16);
                  if (v72 >= v105) {
                    goto LABEL_96;
                  }
                  unint64_t v106 = v72 * v135;
                  outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v80 + v132 + v72 * v135, v120);
                  if (v74 >= v105) {
                    goto LABEL_97;
                  }
                  outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v80 + v73, v121);
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  {
                    unint64_t v80 = specialized _ArrayBuffer._consumeAndCreateNew()(v80);
                    unint64_t v137 = v80;
                  }
                  if (v72 >= *(void *)(v80 + 16)) {
                    goto LABEL_98;
                  }
                  outlined assign with take of MOSuggestionAssetMapsClusterer.Cluster(v121, v80 + v132 + v106);
                  if (v74 >= *(void *)(v137 + 16)) {
                    goto LABEL_99;
                  }
                  outlined assign with take of MOSuggestionAssetMapsClusterer.Cluster(v120, v137 + v73);
                }
                if (__OFADD__(v72++, 1)) {
                  goto LABEL_91;
                }
              }
            }
            unint64_t v108 = v74 + 1;
            if (__OFADD__(v74, 1)) {
              goto LABEL_87;
            }
            unint64_t v80 = v137;
            ++v74;
            v73 += v135;
            if (v108 == *(void *)(v137 + 16)) {
              goto LABEL_50;
            }
          }
          goto LABEL_86;
        }
LABEL_50:
        int64_t v87 = *(void *)(v80 + 16);
        if (v87 < (uint64_t)v72) {
          goto LABEL_100;
        }
        specialized Array.replaceSubrange<A>(_:with:)(v72, v87, &demangling cache variable for type metadata for _ContiguousArrayStorage<MOSuggestionAssetMapsClusterer.Cluster>, (uint64_t (*)(void))type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster, (uint64_t (*)(void))type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster, (uint64_t (*)(void))type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster);
        swift_bridgeObjectRelease();
        uint64_t v88 = v114;
        MOSuggestionAssetMapsClusterer.combinedCluster(_:_:distance:)(v122, v127, v114, v70);
        outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v88, v115);
        unint64_t v89 = v137;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v29 = v118;
        uint64_t v84 = v123;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          unint64_t v89 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v89 + 16) + 1, 1, v89, &demangling cache variable for type metadata for _ContiguousArrayStorage<MOSuggestionAssetMapsClusterer.Cluster>, (uint64_t (*)(void))type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster, (uint64_t (*)(void))type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster);
        }
        unint64_t v91 = v89;
        unint64_t v92 = *(void *)(v89 + 16);
        unint64_t v133 = v91;
        unint64_t v93 = *(void *)(v91 + 24);
        if (v92 >= v93 >> 1) {
          unint64_t v133 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v93 > 1, v92 + 1, 1, v133, &demangling cache variable for type metadata for _ContiguousArrayStorage<MOSuggestionAssetMapsClusterer.Cluster>, (uint64_t (*)(void))type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster, (uint64_t (*)(void))type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster);
        }
        unint64_t v94 = v132;
        unint64_t v95 = v133;
        *(void *)(v133 + 16) = v92 + 1;
        outlined init with take of MOSuggestionAssetMapsClusterer.Cluster(v115, v95 + v94 + v92 * v135);
        unint64_t v137 = v95;
        uint64_t v96 = v114;
        uint64_t v97 = v117;
        outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v114, v117);
        swift_beginAccess();
        uint64_t v98 = v116;
        specialized Set._Variant.insert(_:)(v116, v97);
        outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v98);
        swift_endAccess();
        outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v96);
        outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v127);
        outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v122);
        goto LABEL_56;
      }
      swift_bridgeObjectRelease();
      uint64_t v81 = v122;
      uint64_t v82 = v117;
      outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v122, v117);
      swift_beginAccess();
      uint64_t v83 = v116;
      specialized Set._Variant.insert(_:)(v116, v82);
      outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v83);
      outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v71, v82);
      specialized Set._Variant.insert(_:)(v83, v82);
      outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v83);
      swift_endAccess();
      outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v71);
      outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v81);
    }
    uint64_t v29 = v118;
    uint64_t v84 = v123;
LABEL_56:
    uint64_t v30 = v84 + 1;
    if (v30 == v29) {
      goto LABEL_76;
    }
  }
  unint64_t v42 = 0;
  NSString v43 = v35 + 4;
  id v44 = v35 + 5;
  unint64_t v128 = v31 + 8;
  unint64_t v132 = 1;
  uint64_t v130 = v39 - 1;
  while (1)
  {
    if (v42 == v40)
    {
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
LABEL_87:
      __break(1u);
      goto LABEL_88;
    }
    unint64_t v45 = *(void *)(v31 + 16);
    if (v45 <= v42) {
      goto LABEL_84;
    }
    unint64_t v131 = v42 + 1;
    if (v42 + 1 != v45) {
      break;
    }
LABEL_16:
    ++v132;
    uint64_t v40 = v130;
    unint64_t v42 = v131;
    if (v131 == v130) {
      goto LABEL_34;
    }
  }
  if (v42 + 1 >= v45) {
    goto LABEL_85;
  }
  unint64_t v46 = (*(unsigned __int8 *)(v129 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v129 + 80);
  uint64_t v47 = *(void *)(v129 + 72);
  id v48 = (double *)(v31 + v46 + v47 * v42);
  unint64_t v134 = v45 - 1;
  uint64_t v135 = v47;
  CGRect v49 = (double *)(v128 + v46 + v47 * v132);
  unint64_t v50 = v42;
  while (1)
  {
    unint64_t v51 = *(void *)(v31 + 16);
    if (v42 >= v51) {
      break;
    }
    unint64_t v52 = v50 + 1;
    if (v50 + 1 >= v51) {
      goto LABEL_78;
    }
    if (v42 >= v35[2]) {
      goto LABEL_79;
    }
    double v53 = *(v49 - 1);
    double v54 = *v49;
    double v56 = *v48;
    double v55 = v48[1];
    int v57 = (char *)v43[v42];
    char v58 = swift_isUniquelyReferenced_nonNull_native();
    v43[v42] = v57;
    if ((v58 & 1) == 0)
    {
      int v57 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v57);
      v43[v42] = v57;
    }
    if (v52 >= *((void *)v57 + 2)) {
      goto LABEL_80;
    }
    double v59 = (v56 - v53) * (v56 - v53) + (v55 - v54) * (v55 - v54);
    *(double *)&v57[8 * v50 + 40] = v59;
    if (v52 >= v41[2]) {
      goto LABEL_81;
    }
    id v60 = (char *)v44[v50];
    char v61 = swift_isUniquelyReferenced_nonNull_native();
    v44[v50] = v60;
    if ((v61 & 1) == 0)
    {
      id v60 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v60);
      v44[v50] = v60;
    }
    unint64_t v31 = v133;
    if (v42 >= *((void *)v60 + 2)) {
      goto LABEL_82;
    }
    id v35 = v41;
    *(double *)&v60[8 * v42 + 32] = v59;
    ++v50;
    CGRect v49 = (double *)((char *)v49 + v135);
    if (v134 == v50) {
      goto LABEL_16;
    }
  }
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_76:
  swift_bridgeObjectRelease();
}

uint64_t MOSuggestionAssetMapsClusterer.distanceMatrix(clusters:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = specialized Array.init(repeating:count:)(*(void *)(*a1 + 16), 1.79769313e308);
  uint64_t result = (uint64_t)specialized Array.init(repeating:count:)((uint64_t)v2, *(void *)(v1 + 16));
  uint64_t v31 = v1;
  uint64_t v4 = *(void *)(v1 + 16);
  if (v4)
  {
    uint64_t v5 = result;
    uint64_t v6 = v4 - 1;
    if (v4 == 1) {
      return v5;
    }
    unint64_t v7 = 0;
    uint64_t v26 = v1 + 8;
    uint64_t v27 = v4 - 1;
    uint64_t v8 = 5;
    uint64_t v9 = 1;
    while (v7 != v6)
    {
      unint64_t v10 = *(void *)(v31 + 16);
      if (v10 <= v7) {
        goto LABEL_32;
      }
      uint64_t v29 = v8;
      unint64_t v28 = v7 + 1;
      if (v7 + 1 != v10)
      {
        if (v7 + 1 >= v10) {
          goto LABEL_33;
        }
        uint64_t v11 = type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster();
        uint64_t v12 = *(void *)(v11 - 8);
        uint64_t result = v11 - 8;
        unint64_t v13 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
        uint64_t v14 = *(void *)(v12 + 72);
        uint64_t v15 = (double *)(v31 + v13 + v14 * v7);
        unint64_t v30 = 1 - v10;
        uint64_t v16 = (double *)(v26 + v13 + v14 * v9);
        while (1)
        {
          unint64_t v17 = *(void *)(v31 + 16);
          if (v7 >= v17) {
            break;
          }
          unint64_t v18 = v8 - 4;
          if (v8 - 4 >= v17) {
            goto LABEL_26;
          }
          double v19 = *(v16 - 1);
          double v20 = *v16;
          double v22 = *v15;
          double v21 = v15[1];
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
            uint64_t v5 = result;
          }
          if (v7 >= *(void *)(v5 + 16)) {
            goto LABEL_27;
          }
          uint64_t v23 = *(void *)(v5 + 32 + 8 * v7);
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          *(void *)(v5 + 32 + 8 * v7) = v23;
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v23);
            uint64_t v23 = result;
            *(void *)(v5 + 32 + 8 * v7) = result;
          }
          if (v18 >= *(void *)(v23 + 16)) {
            goto LABEL_28;
          }
          double v24 = (v22 - v19) * (v22 - v19) + (v21 - v20) * (v21 - v20);
          *(double *)(v23 + 8 * v8) = v24;
          if (v18 >= *(void *)(v5 + 16)) {
            goto LABEL_29;
          }
          uint64_t v25 = *(void *)(v5 + 8 * v8);
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          *(void *)(v5 + 8 * v8) = v25;
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v25);
            uint64_t v25 = result;
            *(void *)(v5 + 8 * v8) = result;
          }
          if (v7 >= *(void *)(v25 + 16)) {
            goto LABEL_30;
          }
          *(double *)(v25 + 8 * v7 + 32) = v24;
          ++v8;
          uint64_t v16 = (double *)((char *)v16 + v14);
          if (v30 + v8 == 5) {
            goto LABEL_4;
          }
        }
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
        break;
      }
LABEL_4:
      uint64_t v8 = v29 + 1;
      ++v9;
      uint64_t v6 = v27;
      ++v7;
      if (v28 == v27) {
        return v5;
      }
    }
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
  }
  __break(1u);
  return result;
}

Swift::tuple_tuple_Int_Int_Double_optional __swiftcall MOSuggestionAssetMapsClusterer.findSmallestEuclideanDistance(distanceMatrix:lowerHalfOnly:)(Swift::OpaquePointer *distanceMatrix, Swift::Bool lowerHalfOnly)
{
  rawValue = distanceMatrix->_rawValue;
  uint64_t v33 = rawValue[2];
  if (!v33)
  {
LABEL_39:
    Swift::Int v4 = 0;
    Swift::Int v5 = 0;
    Swift::Bool v6 = 0;
    goto LABEL_43;
  }
  uint64_t v32 = (char *)(rawValue + 4);
  Swift::Int v4 = swift_bridgeObjectRetain();
  unint64_t v8 = 0;
  double v9 = 1.79769313e308;
  uint64_t v37 = -1;
  uint64_t v10 = -1;
  Swift::Int v35 = v4;
  while (1)
  {
    if (v8 >= *(void *)(v4 + 16)) {
      goto LABEL_42;
    }
    uint64_t v11 = *(void *)&v32[8 * v8];
    uint64_t v12 = *(void *)(v11 + 16);
    if (v12) {
      break;
    }
LABEL_4:
    if (++v8 == v33)
    {
      swift_bridgeObjectRelease();
      Swift::Int v4 = v10;
      Swift::Int v5 = v37;
      if (v10 != -1 || v37 != -1)
      {
        Swift::Bool v6 = LOBYTE(v9);
        goto LABEL_43;
      }
      goto LABEL_39;
    }
  }
  unint64_t v13 = *(uint64_t (**)(Swift::Int))((swift_isaMask & *v2) + 0x78);
  if (v8 <= 1) {
    uint64_t v14 = 1;
  }
  else {
    uint64_t v14 = v8;
  }
  unint64_t v34 = v14;
  Swift::Int v4 = swift_bridgeObjectRetain();
  unint64_t v15 = 0;
  while (v15 < *(void *)(v11 + 16))
  {
    double v16 = *(double *)(v11 + 32 + 8 * v15);
    uint64_t v17 = v13(v4);
    if (*(void *)(v17 + 16))
    {
      uint64_t v18 = static Hasher._hash(seed:_:)();
      uint64_t v19 = -1 << *(unsigned char *)(v17 + 32);
      unint64_t v20 = v18 & ~v19;
      if ((*(void *)(v17 + 56 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20))
      {
        uint64_t v21 = *(void *)(v17 + 48);
        if (*(void *)(v21 + 8 * v20) == v8) {
          goto LABEL_11;
        }
        uint64_t v22 = ~v19;
        while (1)
        {
          unint64_t v20 = (v20 + 1) & v22;
          if (((*(void *)(v17 + 56 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) == 0) {
            break;
          }
          if (*(void *)(v21 + 8 * v20) == v8) {
            goto LABEL_11;
          }
        }
      }
    }
    uint64_t v23 = swift_bridgeObjectRelease();
    uint64_t v24 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v2) + 0x90))(v23);
    if (!*(void *)(v24 + 16)) {
      goto LABEL_28;
    }
    uint64_t v25 = static Hasher._hash(seed:_:)();
    uint64_t v26 = -1 << *(unsigned char *)(v24 + 32);
    unint64_t v27 = v25 & ~v26;
    if (((*(void *)(v24 + 56 + ((v27 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v27) & 1) == 0) {
      goto LABEL_28;
    }
    uint64_t v28 = *(void *)(v24 + 48);
    if (*(void *)(v28 + 8 * v27) != v15)
    {
      uint64_t v29 = ~v26;
      while (1)
      {
        unint64_t v27 = (v27 + 1) & v29;
        if (((*(void *)(v24 + 56 + ((v27 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v27) & 1) == 0) {
          break;
        }
        if (*(void *)(v28 + 8 * v27) == v15) {
          goto LABEL_11;
        }
      }
LABEL_28:
      Swift::Int v4 = swift_bridgeObjectRelease();
      if (!lowerHalfOnly || v15 < v8 && (unint64_t v30 = *(void *)(v35 + 16), v15 < v30) && v30 > v34)
      {
        uint64_t v31 = v37;
        if (v16 < v9) {
          uint64_t v31 = v15;
        }
        uint64_t v37 = v31;
        if (v16 < v9)
        {
          uint64_t v10 = v8;
          double v9 = v16;
        }
      }
      goto LABEL_12;
    }
LABEL_11:
    Swift::Int v4 = swift_bridgeObjectRelease();
LABEL_12:
    if (++v15 == v12)
    {
      swift_bridgeObjectRelease();
      Swift::Int v4 = v35;
      goto LABEL_4;
    }
  }
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  result.value._1 = v7;
  result.value._0._1 = v5;
  result.value._0._0 = v4;
  result.is_nil = v6;
  return result;
}

uint64_t MOSuggestionAssetMapsClusterer.combinedCluster(_:_:distance:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t result = type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster();
  double v9 = (int *)result;
  uint64_t v10 = *(int *)(result + 36);
  uint64_t v11 = *(void *)(a1 + v10);
  if (!v11)
  {
    uint64_t v11 = *(void *)(a2 + v10);
    uint64_t result = swift_unknownObjectRetain();
  }
  uint64_t v12 = *(void *)(a1 + 24);
  uint64_t v13 = *(void *)(a2 + 24);
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    double v15 = (*(double *)(a1 + 8) + *(double *)(a2 + 8)) * 0.5;
    double v16 = (*(double *)a1 + *(double *)a2) * 0.5;
    uint64_t v18 = *(void *)(a1 + 32);
    uint64_t v17 = *(void *)(a1 + 40);
    uint64_t v19 = *(void *)(a2 + 32);
    unint64_t v20 = *(void **)(a2 + 40);
    uint64_t v23 = v18;
    uint64_t v24 = v17;
    swift_bridgeObjectRetain();
    v21._countAndFlagsBits = v19;
    v21._object = v20;
    String.append(_:)(v21);
    swift_unknownObjectRetain();
    uint64_t result = UUID.init()();
    *(double *)a3 = v16;
    *(double *)(a3 + 8) = v15;
    *(double *)(a3 + 16) = a4;
    *(void *)(a3 + 24) = v14;
    *(void *)(a3 + 32) = v23;
    *(void *)(a3 + 40) = v24;
    *(void *)(a3 + v9[9]) = v11;
    *(void *)(a3 + v9[10]) = 0;
    uint64_t v22 = (void *)(a3 + v9[11]);
    *uint64_t v22 = 0;
    v22[1] = 0xE000000000000000;
    *(unsigned char *)(a3 + v9[12]) = 0;
    *(unsigned char *)(a3 + v9[13]) = 0;
    *(void *)(a3 + v9[14]) = 0;
  }
  return result;
}

double static MOSuggestionAssetMapsClusterer.makeRegion(containing:applyBottomPaddingForPlatter:applyBottomPaddingForGradient:horizontalAspectRatio:markerStyle:applyRenderMargin:shouldAdjustMarker:)(unint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  return specialized static MOSuggestionAssetMapsClusterer.makeRegion(containing:applyBottomPaddingForPlatter:applyBottomPaddingForGradient:horizontalAspectRatio:markerStyle:applyRenderMargin:shouldAdjustMarker:)(a1, a2, a3, a4, a6);
}

char *MOSuggestionAssetMapsClusterer.groupedByAverageHeight()()
{
  uint64_t v150 = type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster();
  uint64_t v151 = *(void *)(v150 - 8);
  uint64_t v0 = __chkstk_darwin(v150);
  uint64_t v149 = (uint64_t)&v126 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = __chkstk_darwin(v0);
  Swift::Int v4 = (char *)&v126 - v3;
  uint64_t v5 = __chkstk_darwin(v2);
  uint64_t v137 = (uint64_t)&v126 - v6;
  uint64_t v7 = __chkstk_darwin(v5);
  double v9 = (char *)&v126 - v8;
  uint64_t v10 = __chkstk_darwin(v7);
  v145 = (double *)((char *)&v126 - v11);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v126 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v126 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  unint64_t v20 = (double *)((char *)&v126 - v19);
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v126 - v21;
  *(void *)&long long v155 = 0;
  *((void *)&v155 + 1) = 0xE000000000000000;
  double v23 = COERCE_DOUBLE(specialized static MOAngelDefaultsManager.doubleValueFor(_:)());
  if (v24) {
    double v25 = 0.5;
  }
  else {
    double v25 = v23;
  }
  if (serverManager._connectionProperties != (NSMutableDictionary *)-1) {
    goto LABEL_124;
  }
  while (1)
  {
    uint64_t v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static MOAngelLogger.assets);
    unint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.default.getter();
    BOOL v29 = os_log_type_enabled(v27, v28);
    v139 = v14;
    if (v29)
    {
      unint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)unint64_t v30 = 134217984;
      *(double *)&long long v153 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "[MOSuggestionAssetMapsClusterer] using POI penalty: %f", v30, 0xCu);
      swift_slowDealloc();
    }

    uint64_t v31 = (uint64_t *)(v146 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionAssetMapsClusterer_results);
    swift_beginAccess();
    uint64_t v32 = *v31;
    uint64_t v33 = &one-time initialization token for localizableStringKey;
    if (!*(void *)(*v31 + 16))
    {
      uint64_t v22 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_107;
    }
    unint64_t v131 = v9;
    uint64_t v14 = (char *)(v32 + 56);
    uint64_t v34 = 1 << *(unsigned char *)(v32 + 32);
    uint64_t v35 = -1;
    if (v34 < 64) {
      uint64_t v35 = ~(-1 << v34);
    }
    unint64_t v36 = v35 & *(void *)(v32 + 56);
    double v9 = (char *)((unint64_t)(v34 + 63) >> 6);
    swift_bridgeObjectRetain();
    uint64_t v37 = 0;
    for (double i = 0.0; ; double i = i + v42 * (1.0 - v41))
    {
      if (v36)
      {
        unint64_t v39 = __clz(__rbit64(v36));
        v36 &= v36 - 1;
        unint64_t v40 = v39 | (v37 << 6);
        goto LABEL_12;
      }
      uint64_t v43 = v37 + 1;
      if (__OFADD__(v37, 1))
      {
LABEL_119:
        __break(1u);
LABEL_120:
        __break(1u);
        goto LABEL_121;
      }
      if (v43 >= (uint64_t)v9) {
        goto LABEL_31;
      }
      unint64_t v44 = *(void *)&v14[8 * v43];
      ++v37;
      if (!v44)
      {
        uint64_t v37 = v43 + 1;
        if (v43 + 1 >= (uint64_t)v9) {
          goto LABEL_31;
        }
        unint64_t v44 = *(void *)&v14[8 * v37];
        if (!v44)
        {
          uint64_t v37 = v43 + 2;
          if (v43 + 2 >= (uint64_t)v9) {
            goto LABEL_31;
          }
          unint64_t v44 = *(void *)&v14[8 * v37];
          if (!v44) {
            break;
          }
        }
      }
LABEL_30:
      unint64_t v36 = (v44 - 1) & v44;
      unint64_t v40 = __clz(__rbit64(v44)) + (v37 << 6);
LABEL_12:
      outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(*(void *)(v32 + 48) + *(void *)(v151 + 72) * v40, (uint64_t)v22);
      outlined init with take of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v22, (uint64_t)v20);
      if (*(void *)((char *)v20 + *(int *)(v150 + 36))) {
        double v41 = v25;
      }
      else {
        double v41 = -v25;
      }
      double v42 = v20[2];
      outlined destroy of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v20);
    }
    uint64_t v45 = v43 + 3;
    if (v45 >= (uint64_t)v9) {
      break;
    }
    unint64_t v44 = *(void *)&v14[8 * v45];
    if (v44)
    {
      uint64_t v37 = v45;
      goto LABEL_30;
    }
    while (1)
    {
      uint64_t v37 = v45 + 1;
      if (__OFADD__(v45, 1)) {
        break;
      }
      if (v37 >= (uint64_t)v9) {
        goto LABEL_31;
      }
      unint64_t v44 = *(void *)&v14[8 * v37];
      ++v45;
      if (v44) {
        goto LABEL_30;
      }
    }
LABEL_121:
    __break(1u);
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    swift_once();
  }
LABEL_31:
  swift_release();
  uint64_t v46 = *v31;
  double v25 = *(double *)(*v31 + 16);
  swift_bridgeObjectRetain_n();
  uint64_t v47 = specialized _copyCollectionToContiguousArray<A>(_:)(v46);
  swift_bridgeObjectRelease();
  *(void *)&long long v153 = v47;
  specialized MutableCollection<>.sort(by:)((void **)&v153, specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
  swift_bridgeObjectRelease();
  double v9 = (char *)v153;
  unint64_t v20 = *(double **)(v153 + 16);
  uint64_t v14 = v139;
  if (v20)
  {
    id v48 = 0;
    uint64_t v142 = OBJC_IVAR____TtC16MomentsUIService30MOSuggestionAssetMapsClusterer_inputClusters;
    unint64_t v141 = (*(unsigned __int8 *)(v151 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v151 + 80);
    uint64_t v49 = v153 + v141;
    uint64_t v130 = GEOPOICategoryReligiousSite;
    uint64_t v22 = (char *)_swiftEmptyArrayStorage;
    unint64_t v133 = 0x80000001001E16D0;
    unint64_t v132 = (char *)&type metadata for Any + 8;
    double v50 = i / (double)*(uint64_t *)&v25;
    Swift::tuple_tuple_Int_Int_Double_optional v138 = (char *)v153;
    v144 = v20;
    uint64_t v143 = v153 + v141;
    unint64_t v134 = v17;
    while (1)
    {
      if ((unint64_t)v48 >= *((void *)v9 + 2))
      {
        __break(1u);
        goto LABEL_119;
      }
      uint64_t v148 = *(void *)(v151 + 72);
      outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v49 + v148 * (void)v48, (uint64_t)v17);
      double v25 = *((double *)v17 + 2);
      outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v17, (uint64_t)v14);
      if (v25 >= v50)
      {
        outlined destroy of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v14);
        goto LABEL_34;
      }
      long long v153 = v155;
      uint64_t v51 = *((void *)v14 + 5);
      *(void *)&v152[0] = *((void *)v14 + 4);
      *((void *)&v152[0] + 1) = v51;
      unint64_t v20 = (double *)lazy protocol witness table accessor for type String and conformance String();
      char v52 = StringProtocol.contains<A>(_:)();
      outlined destroy of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v14);
      if (v52) {
        goto LABEL_100;
      }
      uint64_t v53 = *((void *)v17 + 5);
      *(void *)&long long v153 = *((void *)v17 + 4);
      *((void *)&v153 + 1) = v53;
      *(void *)&v152[0] = 95;
      *((void *)&v152[0] + 1) = 0xE100000000000000;
      uint64_t v54 = StringProtocol.components<A>(separatedBy:)();
      if (!*(void *)(v54 + 16)) {
        goto LABEL_122;
      }
      double v55 = (void *)v54;
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v56 = v55[2];
        if (!v56) {
          goto LABEL_123;
        }
      }
      else
      {
        double v55 = specialized _ArrayBuffer._consumeAndCreateNew()(v55);
        uint64_t v56 = v55[2];
        if (!v56) {
          goto LABEL_123;
        }
      }
      v55[2] = v56 - 1;
      swift_bridgeObjectRelease();
      double v9 = (char *)v55[2];
      if (!v9)
      {
        swift_bridgeObjectRelease();
        double v9 = v138;
        goto LABEL_99;
      }
      swift_bridgeObjectRetain();
      uint64_t v140 = 0;
      uint64_t v147 = 0;
      uint64_t v14 = 0;
      unint64_t v20 = (double *)(v55 + 5);
      double v57 = 0.0;
      double v58 = 0.0;
      do
      {
        uint64_t v61 = *((void *)v20 - 1);
        unint64_t v62 = *(void *)v20;
        if (v61) {
          BOOL v63 = 0;
        }
        else {
          BOOL v63 = v62 == 0xE000000000000000;
        }
        if (v63) {
          goto LABEL_51;
        }
        if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
          goto LABEL_51;
        }
        swift_bridgeObjectRetain();
        uint64_t v64 = specialized FixedWidthInteger.init(_:)(v61, v62);
        if (v65) {
          goto LABEL_51;
        }
        if (v64 < 0) {
          goto LABEL_51;
        }
        uint64_t v66 = *(void *)(v146 + v142);
        if (v64 >= *(void *)(v66 + 16)) {
          goto LABEL_51;
        }
        double v67 = v145;
        outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v66 + v141 + v64 * v148, (uint64_t)v145);
        double v69 = *v67;
        double v68 = v67[1];
        uint64_t v70 = *(int *)(v150 + 36);
        uint64_t v71 = *(void **)((char *)v67 + v70);
        if (!v71 || v140 >= 1)
        {
          swift_unknownObjectRelease();
          goto LABEL_44;
        }
        uint64_t v135 = *(int *)(v150 + 36);
        uint64_t v72 = one-time initialization token for defaults;
        id v136 = v71;
        swift_unknownObjectRetain();
        if (v72 != -1) {
          swift_once();
        }
        uint64_t v73 = (void *)static MOAngelDefaultsManager.defaults;
        if (!static MOAngelDefaultsManager.defaults)
        {
          long long v153 = 0u;
          long long v154 = 0u;
LABEL_76:
          outlined destroy of Any?((uint64_t)&v153);
          goto LABEL_77;
        }
        NSString v74 = String._bridgeToObjectiveC()();
        id v75 = [v73 objectForKey:v74];

        if (v75)
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          memset(v152, 0, sizeof(v152));
        }
        id v76 = v136;
        outlined init with take of Any?((uint64_t)v152, (uint64_t)&v153);
        if (!*((void *)&v154 + 1)) {
          goto LABEL_76;
        }
        if (swift_dynamicCast() & 1) != 0 && (v152[0])
        {
          id v77 = [v76 _poiCategory];
          if (!v77) {
            goto LABEL_79;
          }
          char v78 = v77;
          uint64_t v79 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v129 = v80;
          if (v79 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v129 == v81)
          {

            swift_bridgeObjectRelease_n();
          }
          else
          {
            unint64_t v128 = v81;
            char v82 = _stringCompareWithSmolCheck(_:_:expecting:)();
            uint64_t v83 = v78;
            char v84 = v82;

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            id v76 = v136;
            if ((v84 & 1) == 0)
            {
LABEL_79:
              uint64_t v129 = (char *)self;
              unint64_t v128 = (char *)[v76 _styleAttributes];
              id v126 = self;
              id v85 = [v126 mainScreen];
              [v85 scale];
              double v25 = v86;

              int64_t v87 = v129;
              uint64_t v88 = v128;
              id v127 = [v129 newFillColorForStyleAttributes:v128 forScale:v25];

              unint64_t v89 = v87;
              if (v127)
              {
                uint64_t v129 = v89;
                id v90 = [v136 _styleAttributes];
                id v91 = [v126 mainScreen];
                [v91 scale];
                double v25 = v92;

                id v93 = [v129 imageForStyle:v90 size:3 forScale:0 format:v25];
                if (v93)
                {

                  double v94 = *v145;
                  uint64_t v95 = *((void *)v145 + 1);
                  uint64_t v129 = (char *)*((void *)v17 + 2);
                  uint64_t v135 = *((void *)v17 + 4);
                  uint64_t v140 = *((void *)v17 + 5);
                  uint64_t v96 = (int *)v150;
                  uint64_t v97 = v131;
                  unint64_t v128 = (char *)v131 + *(int *)(v150 + 32);
                  swift_unknownObjectRetain();
                  swift_bridgeObjectRetain();
                  UUID.init()();
                  *(double *)uint64_t v97 = v94;
                  v97[1] = v95;
                  v97[2] = v129;
                  uint64_t v98 = v135;
                  v97[3] = 1;
                  v97[4] = v98;
                  v97[5] = v140;
                  *(void *)((char *)v97 + v96[9]) = v136;
                  *(void *)((char *)v97 + v96[10]) = 0;
                  char v99 = (void *)((char *)v97 + v96[11]);
                  *char v99 = 0;
                  v99[1] = 0xE000000000000000;
                  *((unsigned char *)v97 + v96[12]) = 0;
                  *((unsigned char *)v97 + v96[13]) = 1;
                  *(void *)((char *)v97 + v96[14]) = 0;
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                    uint64_t v22 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v22 + 2) + 1, 1, (unint64_t)v22, &demangling cache variable for type metadata for _ContiguousArrayStorage<MOSuggestionAssetMapsClusterer.Cluster>, (uint64_t (*)(void))type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster, (uint64_t (*)(void))type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster);
                  }
                  double v25 = 7.0;
                  unint64_t v101 = *((void *)v22 + 2);
                  unint64_t v100 = *((void *)v22 + 3);
                  uint64_t v102 = v101 + 1;
                  if (v101 >= v100 >> 1)
                  {
                    uint64_t v140 = v101 + 1;
                    uint64_t v103 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v100 > 1, v101 + 1, 1, (unint64_t)v22, &demangling cache variable for type metadata for _ContiguousArrayStorage<MOSuggestionAssetMapsClusterer.Cluster>, (uint64_t (*)(void))type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster, (uint64_t (*)(void))type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster);
                    uint64_t v102 = v140;
                    uint64_t v22 = (char *)v103;
                  }
                  *((void *)v22 + 2) = v102;
                  outlined init with take of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v131, (uint64_t)&v22[v141 + v101 * v148]);
                  swift_unknownObjectRelease();
                  outlined destroy of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v145);
                  if (v58 != 0.0) {
                    double v58 = v58 + (v58 - v69) / 7.0;
                  }
                  if (v57 != 0.0) {
                    double v57 = v57 + (v57 - v68) / 7.0;
                  }
                  uint64_t v140 = 1;
                  goto LABEL_51;
                }
              }
            }
          }
        }
LABEL_77:
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        uint64_t v70 = v135;
LABEL_44:
        if (v58 == 0.0) {
          double v58 = v69;
        }
        else {
          double v58 = (v58 + v69) * 0.5;
        }
        if (v57 == 0.0) {
          double v57 = v68;
        }
        else {
          double v57 = (v57 + v68) * 0.5;
        }
        double v59 = v145;
        uint64_t v147 = *(void *)((char *)v145 + v70);
        swift_unknownObjectRetain();
        outlined destroy of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v59);
        if (__OFADD__(v14++, 1)) {
          goto LABEL_120;
        }
LABEL_51:
        v20 += 2;
        --v9;
      }
      while (v9);
      swift_bridgeObjectRelease();
      if ((uint64_t)v14 <= 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v14 = v139;
        double v9 = v138;
      }
      else
      {
        double v25 = *((double *)v17 + 2);
        uint64_t v104 = *((void *)v17 + 4);
        uint64_t v105 = *((void *)v17 + 5);
        unint64_t v106 = (char *)v55[2];
        uint64_t v107 = v147;
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        BOOL v108 = v14 != v106;
        v109 = (int *)v150;
        uint64_t v110 = v137;
        UUID.init()();
        *(double *)uint64_t v110 = v58;
        *(double *)(v110 + 8) = v57;
        *(double *)(v110 + 16) = v25;
        *(void *)(v110 + 24) = v14;
        *(void *)(v110 + 32) = v104;
        *(void *)(v110 + 40) = v105;
        *(void *)(v110 + v109[9]) = v107;
        *(void *)(v110 + v109[10]) = 0;
        v111 = (void *)(v110 + v109[11]);
        void *v111 = 0;
        v111[1] = 0xE000000000000000;
        *(unsigned char *)(v110 + v109[12]) = 0;
        *(unsigned char *)(v110 + v109[13]) = v108;
        *(void *)(v110 + v109[14]) = 0;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v22 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v22 + 2) + 1, 1, (unint64_t)v22, &demangling cache variable for type metadata for _ContiguousArrayStorage<MOSuggestionAssetMapsClusterer.Cluster>, (uint64_t (*)(void))type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster, (uint64_t (*)(void))type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster);
        }
        unint64_t v113 = *((void *)v22 + 2);
        unint64_t v112 = *((void *)v22 + 3);
        uint64_t v14 = v139;
        double v9 = v138;
        uint64_t v17 = v134;
        if (v113 >= v112 >> 1) {
          uint64_t v22 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v112 > 1, v113 + 1, 1, (unint64_t)v22, &demangling cache variable for type metadata for _ContiguousArrayStorage<MOSuggestionAssetMapsClusterer.Cluster>, (uint64_t (*)(void))type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster, (uint64_t (*)(void))type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster);
        }
        *((void *)v22 + 2) = v113 + 1;
        outlined init with take of MOSuggestionAssetMapsClusterer.Cluster(v137, (uint64_t)&v22[v141 + v113 * v148]);
      }
LABEL_99:
      uint64_t v114 = *((void *)v17 + 4);
      uint64_t v115 = (void *)*((void *)v17 + 5);
      swift_bridgeObjectRetain();
      v116._countAndFlagsBits = v114;
      v116._object = v115;
      String.append(_:)(v116);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
LABEL_100:
      unint64_t v20 = v144;
      uint64_t v49 = v143;
LABEL_34:
      id v48 = (double *)((char *)v48 + 1);
      outlined destroy of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v17);
      if (v48 == v20)
      {
        swift_release();
        goto LABEL_106;
      }
    }
  }
  swift_release();
  uint64_t v22 = (char *)_swiftEmptyArrayStorage;
LABEL_106:
  uint64_t v33 = &one-time initialization token for localizableStringKey;
LABEL_107:
  uint64_t v117 = *(void *)(v146 + v33[319]);
  uint64_t v118 = *(void *)(v117 + 16);
  if (v118)
  {
    unint64_t v119 = (*(unsigned __int8 *)(v151 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v151 + 80);
    uint64_t v120 = v117 + v119;
    uint64_t v121 = *(void *)(v151 + 72);
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v120, (uint64_t)v4);
      long long v153 = v155;
      uint64_t v122 = *((void *)v4 + 5);
      *(void *)&v152[0] = *((void *)v4 + 4);
      *((void *)&v152[0] + 1) = v122;
      lazy protocol witness table accessor for type String and conformance String();
      if ((StringProtocol.contains<A>(_:)() & 1) == 0)
      {
        outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v4, v149);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v22 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v22 + 2) + 1, 1, (unint64_t)v22, &demangling cache variable for type metadata for _ContiguousArrayStorage<MOSuggestionAssetMapsClusterer.Cluster>, (uint64_t (*)(void))type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster, (uint64_t (*)(void))type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster);
        }
        unint64_t v124 = *((void *)v22 + 2);
        unint64_t v123 = *((void *)v22 + 3);
        if (v124 >= v123 >> 1) {
          uint64_t v22 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v123 > 1, v124 + 1, 1, (unint64_t)v22, &demangling cache variable for type metadata for _ContiguousArrayStorage<MOSuggestionAssetMapsClusterer.Cluster>, (uint64_t (*)(void))type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster, (uint64_t (*)(void))type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster);
        }
        *((void *)v22 + 2) = v124 + 1;
        outlined init with take of MOSuggestionAssetMapsClusterer.Cluster(v149, (uint64_t)&v22[v119 + v124 * v121]);
      }
      outlined destroy of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v4);
      v120 += v121;
      --v118;
    }
    while (v118);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return v22;
}

uint64_t specialized FixedWidthInteger.init(_:)(uint64_t result, unint64_t a2)
{
  uint64_t v3 = HIBYTE(a2) & 0xF;
  uint64_t v4 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = result & 0xFFFFFFFFFFFFLL;
  }
  if (!v5)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) == 0)
    {
      if ((result & 0x1000000000000000) != 0) {
        uint64_t v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        uint64_t v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      uint64_t v7 = (uint64_t)specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v6, v4, 10);
      char v9 = v8 & 1;
      goto LABEL_37;
    }
    v23[0] = result;
    v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (result == 43)
    {
      if (!v3) {
        goto LABEL_50;
      }
      if (v3 == 1 || (BYTE1(result) - 48) > 9u) {
        goto LABEL_34;
      }
      uint64_t v7 = (BYTE1(result) - 48);
      uint64_t v14 = v3 - 2;
      if (v14)
      {
        uint64_t v15 = (unsigned __int8 *)v23 + 2;
        while (1)
        {
          unsigned int v16 = *v15 - 48;
          if (v16 > 9) {
            goto LABEL_34;
          }
          uint64_t v17 = 10 * v7;
          if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63) {
            goto LABEL_34;
          }
          uint64_t v7 = v17 + v16;
          if (__OFADD__(v17, v16)) {
            goto LABEL_34;
          }
          char v9 = 0;
          ++v15;
          if (!--v14) {
            goto LABEL_37;
          }
        }
      }
    }
    else
    {
      if (result == 45)
      {
        if (v3)
        {
          if (v3 != 1 && (BYTE1(result) - 48) <= 9u)
          {
            uint64_t v7 = -(uint64_t)(BYTE1(result) - 48);
            uint64_t v10 = v3 - 2;
            if (v10)
            {
              uint64_t v11 = (unsigned __int8 *)v23 + 2;
              while (1)
              {
                unsigned int v12 = *v11 - 48;
                if (v12 > 9) {
                  goto LABEL_34;
                }
                uint64_t v13 = 10 * v7;
                if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63) {
                  goto LABEL_34;
                }
                uint64_t v7 = v13 - v12;
                if (__OFSUB__(v13, v12)) {
                  goto LABEL_34;
                }
                char v9 = 0;
                ++v11;
                if (!--v10) {
                  goto LABEL_37;
                }
              }
            }
            goto LABEL_36;
          }
LABEL_34:
          uint64_t v7 = 0;
          char v9 = 1;
          goto LABEL_37;
        }
        __break(1u);
LABEL_50:
        __break(1u);
        return result;
      }
      if (!v3 || (result - 48) > 9u) {
        goto LABEL_34;
      }
      uint64_t v7 = (result - 48);
      uint64_t v18 = v3 - 1;
      if (v18)
      {
        uint64_t v19 = (unsigned __int8 *)v23 + 1;
        while (1)
        {
          unsigned int v20 = *v19 - 48;
          if (v20 > 9) {
            goto LABEL_34;
          }
          uint64_t v21 = 10 * v7;
          if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63) {
            goto LABEL_34;
          }
          uint64_t v7 = v21 + v20;
          if (__OFADD__(v21, v20)) {
            goto LABEL_34;
          }
          char v9 = 0;
          ++v19;
          if (!--v18) {
            goto LABEL_37;
          }
        }
      }
    }
LABEL_36:
    char v9 = 0;
    goto LABEL_37;
  }
  uint64_t v7 = (uint64_t)specialized _parseInteger<A, B>(ascii:radix:)(result, a2, 10);
  char v9 = v22;
LABEL_37:
  swift_bridgeObjectRelease();
  if (v9) {
    return 0;
  }
  else {
    return v7;
  }
}

id MOSuggestionInterstitialAlertContentViewController.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return [v1 init];
}

void MOSuggestionAssetMapsClusterer.init()()
{
}

id MOSuggestionAssetMapsClusterer.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MOSuggestionAssetMapsClusterer();
  return [super dealloc];
}

char *MOSuggestionAssetMapsClusterer.__allocating_init(coordinates:separationThreshold:)(uint64_t a1, double a2)
{
  uint64_t v5 = (int *)type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster();
  uint64_t v6 = *((void *)v5 - 1);
  __chkstk_darwin(v5);
  char v8 = (void *)((char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  char v9 = (char *)(*(uint64_t (**)(void *, double))(v2 + 240))(_swiftEmptyArrayStorage, 0.5);
  uint64_t v10 = v9;
  *(double *)&v9[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionAssetMapsClusterer_separationThreshold] = a2;
  int64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    unint64_t v30 = _swiftEmptyArrayStorage;
    v27[0] = v9;
    unsigned int v12 = v9;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0);
    uint64_t v13 = 0;
    uint64_t v14 = v30;
    v27[1] = a1;
    uint64_t v15 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v16 = *(v15 - 1);
      uint64_t v17 = *v15;
      v27[2] = v13;
      uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v29 = v18;
      v19._countAndFlagsBits = 95;
      v19._object = (void *)0xE100000000000000;
      String.append(_:)(v19);
      uint64_t v20 = v28;
      uint64_t v21 = v29;
      UUID.init()();
      *char v8 = v16;
      v8[1] = v17;
      v8[2] = 0;
      v8[3] = 1;
      v8[4] = v20;
      v8[5] = v21;
      *(void *)((char *)v8 + v5[9]) = 0;
      *(void *)((char *)v8 + v5[10]) = 0;
      char v22 = (void *)((char *)v8 + v5[11]);
      *char v22 = 0;
      v22[1] = 0xE000000000000000;
      *((unsigned char *)v8 + v5[12]) = 0;
      *((unsigned char *)v8 + v5[13]) = 0;
      *(void *)((char *)v8 + v5[14]) = 0;
      unint64_t v30 = v14;
      unint64_t v24 = v14[2];
      unint64_t v23 = v14[3];
      if (v24 >= v23 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
        uint64_t v14 = v30;
      }
      ++v13;
      v14[2] = v24 + 1;
      outlined init with take of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v8, (uint64_t)v14+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v24);
      v15 += 2;
    }
    while (v11 != v13);
    swift_bridgeObjectRelease();
    uint64_t v10 = (char *)v27[0];
  }
  else
  {
    double v25 = v9;
    swift_bridgeObjectRelease();
    uint64_t v14 = _swiftEmptyArrayStorage;
  }
  *(void *)&v10[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionAssetMapsClusterer_inputClusters] = v14;

  swift_bridgeObjectRelease();
  return v10;
}

__C::CLLocationCoordinate2D __swiftcall CLLocationCoordinate2D.comparable()()
{
  double v2 = v0;
  if (v1 < 0.0 && (*(void *)&v1 & 0x7FF0000000000000) != 0x7FF0000000000000) {
    Swift::Double v1 = remainder(v1, 360.0) + 360.0;
  }
  double v4 = v2;
  result.longitude = v1;
  result.latitude = v4;
  return result;
}

char *specialized Array.init(repeating:count:)(unint64_t a1, double a2)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    __C::CLLocationCoordinate2D result = (char *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (!a1) {
    return (char *)&_swiftEmptyArrayStorage;
  }
  __C::CLLocationCoordinate2D result = (char *)static Array._allocateBufferUninitialized(minimumCapacity:)();
  *((void *)result + 2) = a1;
  double v4 = (double *)(result + 32);
  if (a1 < 4)
  {
    unint64_t v5 = 0;
    double v6 = a2;
LABEL_9:
    unint64_t v10 = a1 - v5;
    do
    {
      *v4++ = v6;
      --v10;
    }
    while (v10);
    return result;
  }
  unint64_t v5 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  v4 += a1 & 0xFFFFFFFFFFFFFFFCLL;
  double v6 = a2;
  int64x2_t v7 = vdupq_lane_s64(*(uint64_t *)&a2, 0);
  char v8 = (int64x2_t *)(result + 48);
  unint64_t v9 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v8[-1] = v7;
    *char v8 = v7;
    v8 += 2;
    v9 -= 4;
  }
  while (v9);
  if (v5 != a1) {
    goto LABEL_9;
  }
  return result;
}

void *specialized Array.init(repeating:count:)(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    __C::CLLocationCoordinate2D result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (a2)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Double]);
      double v4 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      unint64_t v5 = v4;
      v4[2] = a2;
      v4[4] = a1;
      if (a2 != 1)
      {
        v4[5] = a1;
        uint64_t v6 = a2 - 2;
        if (v6)
        {
          int64x2_t v7 = v4 + 6;
          do
          {
            *v7++ = a1;
            swift_bridgeObjectRetain();
            --v6;
          }
          while (v6);
        }
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      return &_swiftEmptyArrayStorage;
    }
    return v5;
  }
  return result;
}

double *specialized Array.init(repeating:count:)(int a1, size_t a2)
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    __C::CLLocationCoordinate2D result = (double *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (!a2) {
      return _swiftEmptyArrayStorage;
    }
    uint64_t v4 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v4 + 16) = a2;
    memset((void *)(v4 + 32), a1, a2);
    return (double *)v4;
  }
  return result;
}

uint64_t specialized Array.init(repeating:count:)(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (a2)
    {
      type metadata accessor for MOSuggestionSheetAssetViewModel(0);
      uint64_t v4 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      uint64_t v5 = v4 & 0xFFFFFFFFFFFFFF8;
      *(void *)(v5 + 16) = a2;
      unint64_t v9 = (void *)v4;
      *(void *)(v5 + 32) = a1;
      if (a2 != 1)
      {
        *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x28) = a1;
        uint64_t v6 = a2 - 2;
        if (v6)
        {
          int64x2_t v7 = (void *)(v5 + 48);
          do
          {
            *v7++ = a1;
            swift_retain();
            --v6;
          }
          while (v6);
        }
        swift_retain();
      }
    }
    else
    {
      unint64_t v9 = _swiftEmptyArrayStorage;
      swift_release();
    }
    specialized Array._endMutation()();
    return (uint64_t)v9;
  }
  return result;
}

BOOL specialized Set.contains(_:)(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v4 = static Hasher._hash(seed:_:)();
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (*(void *)(v8 + 8 * v6) == a1) {
    return 1;
  }
  uint64_t v10 = ~v5;
  unint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    return 0;
  }
  do
  {
    uint64_t v12 = *(void *)(v8 + 8 * v11);
    BOOL result = v12 == a1;
    if (v12 == a1) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }
  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

uint64_t specialized Set.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if ((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
    {
      uint64_t v10 = *(void *)(a3 + 48);
      unint64_t v11 = (void *)(v10 + 16 * v8);
      BOOL v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        return 1;
      }
      uint64_t v14 = ~v7;
      unint64_t v15 = (v8 + 1) & v14;
      if ((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
      {
        while (1)
        {
          uint64_t v16 = (void *)(v10 + 16 * v15);
          BOOL v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            break;
          }
          uint64_t result = 0;
          unint64_t v15 = (v15 + 1) & v14;
          if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
            return result;
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

Swift::Bool __swiftcall MOSuggestionAssetMapsClusterer.isInLowerHalf(distanceMatrix:pair:)(Swift::OpaquePointer *distanceMatrix, Swift::tuple_Int_Int pair)
{
  Swift::Int v2 = *((void *)distanceMatrix->_rawValue + 2);
  BOOL v3 = (unint64_t)v2 > 1;
  if (pair._0 < 0) {
    BOOL v3 = 0;
  }
  if (pair._1 < 0) {
    BOOL v3 = 0;
  }
  if (v2 <= pair._0) {
    BOOL v3 = 0;
  }
  Swift::Bool v4 = v2 > pair._1 && v3;
  if (pair._0 <= 0) {
    Swift::Bool v4 = 0;
  }
  return pair._1 < pair._0 && v4;
}

Swift::Void __swiftcall MOSuggestionAssetMapsClusterer.printDendogram()()
{
  Swift::Double v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionAssetMapsClusterer_results);
  swift_beginAccess();
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain_n();
  BOOL v3 = specialized _copyCollectionToContiguousArray<A>(_:)(v2);
  swift_bridgeObjectRelease();
  Swift::Bool v4 = v3;
  specialized MutableCollection<>.sort(by:)(&v4, specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
  swift_bridgeObjectRelease();
  specialized MOSuggestionAssetMapsClusterer.printClusters(_:)((uint64_t)v4);
  swift_release();
}

__C::CLLocationCoordinate2D __swiftcall CLLocationCoordinate2D.normalized()()
{
  v2.i64[0] = v1;
  double v3 = *(double *)v0.i64;
  v0.i64[0] = 0x4076800000000000;
  v4.f64[0] = NAN;
  v4.f64[1] = NAN;
  double v5 = remainder(*(long double *)v2.i64, *(long double *)vbslq_s8((int8x16_t)vnegq_f64(v4), v0, v2).i64);
  double v6 = v3;
  result.longitude = v5;
  result.latitude = v6;
  return result;
}

uint64_t static FloatingPoint.* infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v10[1] = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v6 = *(void *)(a3 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  dispatch thunk of static Numeric.* infix(_:_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, a3);
}

uint64_t specialized MutableCollection<>.sort(by:)(void **a1, uint64_t (*a2)(void *))
{
  uint64_t v4 = *(void *)(type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster() - 8);
  uint64_t v5 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = (void *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v5);
  }
  uint64_t v6 = v5[2];
  v8[0] = (char *)v5 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  v8[1] = v6;
  uint64_t result = a2(v8);
  *a1 = v5;
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 32]) {
          memmove(v13, a4 + 32, 8 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_0(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<MOMusicPlaybackCoordinatorDelegate>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(MOAssetAndMediaType, Int)>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MOProtectedAppSource>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<()>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(presentationDetails: MOClientPresentationDetails, handler: (_:_:))>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *a1, int64_t a2, char a3, void *a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(MOSuggestionAssetReference, Int)>, (uint64_t *)&demangling cache variable for type metadata for (MOSuggestionAssetReference, Int));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(MOSuggestionAsset, Int)>, (uint64_t *)&demangling cache variable for type metadata for (MOSuggestionAsset, Int));
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<MOSuggestionSheetAssetDateRange>, type metadata accessor for MOSuggestionSheetAssetDateRange, type metadata accessor for MOSuggestionSheetAssetDateRange);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<MOSuggestionAssetPhotoLivePhotoVideosProvider.LivePhotoTask>, (uint64_t (*)(void))type metadata accessor for MOSuggestionAssetPhotoLivePhotoVideosProvider.LivePhotoTask, (uint64_t (*)(void))type metadata accessor for MOSuggestionAssetPhotoLivePhotoVideosProvider.LivePhotoTask);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<URL>, (uint64_t (*)(void))&type metadata accessor for URL, (uint64_t (*)(void))&type metadata accessor for URL);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<MOSuggestionAssetPhotoMomentMetadata>, (uint64_t (*)(void))type metadata accessor for MOSuggestionAssetPhotoMomentMetadata, (uint64_t (*)(void))type metadata accessor for MOSuggestionAssetPhotoMomentMetadata);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<PropertyDescriptor>, (uint64_t (*)(void))type metadata accessor for PropertyDescriptor, (uint64_t (*)(void))type metadata accessor for PropertyDescriptor);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>, (uint64_t (*)(void))&type metadata accessor for UUID, (uint64_t (*)(void))&type metadata accessor for UUID);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Date>, (uint64_t (*)(void))&type metadata accessor for Date, (uint64_t (*)(void))&type metadata accessor for Date);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    uint64_t v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (void *)swift_allocObject();
  size_t v19 = _swift_stdlib_malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v18[2] = v13;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

double *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(double *result, int64_t a2, char a3, double *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  int64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v7 = a2;
    }
LABEL_8:
    int64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      int64_t v9 = *((void *)a4 + 2);
    }
    else {
      int64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
      uint64_t v10 = (double *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * v11 - 64;
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= (double *)((char *)a4 + v8 + 32)) {
          memmove(v12, a4 + 4, v8);
        }
        a4[2] = 0.0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  int64_t v11;
  uint64_t v12;
  double *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  int64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v7 = a2;
    }
LABEL_8:
    int64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      int64_t v9 = *((void *)a4 + 2);
    }
    else {
      int64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
      uint64_t v10 = (double *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0.0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  size_t v11;
  double *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  int64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v7 = a2;
    }
LABEL_8:
    int64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      int64_t v9 = *((void *)a4 + 2);
    }
    else {
      int64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MOSuggestionAssetMediaAlbumArtProvider.QueuableRequest>);
      uint64_t v10 = (double *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 112);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[14 * v8 + 4]) {
          memmove(v12, a4 + 4, 112 * v8);
        }
        a4[2] = 0.0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  int64_t v11;
  uint64_t v12;
  double *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  int64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v7 = a2;
    }
LABEL_8:
    int64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      int64_t v9 = *((void *)a4 + 2);
    }
    else {
      int64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MOSuggestionAssetCacheManager.MOSuggestionAssetCompletionResultHolder>);
      uint64_t v10 = (double *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0.0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  double *v10;
  size_t v11;
  double *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  int64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v7 = a2;
    }
LABEL_8:
    int64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      int64_t v9 = *((void *)a4 + 2);
    }
    else {
      int64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Bool>);
      uint64_t v10 = (double *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * v11 - 64;
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= (double *)((char *)a4 + v8 + 32)) {
          memmove(v12, a4 + 4, v8);
        }
        a4[2] = 0.0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  int64_t v11;
  uint64_t v12;
  double *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  int64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v7 = a2;
    }
LABEL_8:
    int64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      int64_t v9 = *((void *)a4 + 2);
    }
    else {
      int64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt>);
      uint64_t v10 = (double *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0.0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *a1, int64_t a2, char a3, char *a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[MOSuggestionCollectionViewCellViewModel]>, (uint64_t *)&demangling cache variable for type metadata for [MOSuggestionCollectionViewCellViewModel]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[MOSuggestionAssetMetadataKey : Any?]>, &demangling cache variable for type metadata for [MOSuggestionAssetMetadataKey : Any?]);
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = *((void *)a4 + 3);
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = *((void *)a4 + 2);
    if (v10 <= v11) {
      uint64_t v12 = *((void *)a4 + 2);
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v13 = (char *)swift_allocObject();
      int64_t v14 = _swift_stdlib_malloc_size(v13);
      uint64_t v15 = v14 - 32;
      if (v14 < 32) {
        uint64_t v15 = v14 - 25;
      }
      *((void *)v13 + 2) = v11;
      *((void *)v13 + 3) = 2 * (v15 >> 3);
      uint64_t v16 = v13 + 32;
      if (v8) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v13 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v16 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[8 * v11 + 32]) {
          memmove(v16, a4 + 32, 8 * v11);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v13 = (void *)swift_allocObject();
      int64_t v14 = _swift_stdlib_malloc_size(v13);
      uint64_t v15 = v14 - 32;
      if (v14 < 32) {
        uint64_t v15 = v14 - 17;
      }
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 4);
      uint64_t v16 = v13 + 4;
      if (v8) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v13 = _swiftEmptyArrayStorage;
      uint64_t v16 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[2 * v11 + 4]) {
          memmove(v16, a4 + 4, 16 * v11);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<MOSuggestionAssetMapsClusterer.Cluster>, (uint64_t (*)(void))type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster);
  *double v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *double v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *double v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *double v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *double v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *double v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *double v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *double v3 = result;
  return result;
}

uint64_t outlined init with take of MOSuggestionAssetMapsClusterer.Cluster(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<MOSuggestionAssetMapsClusterer.Cluster>, (uint64_t (*)(void))type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(MOSuggestionAssetReference, Int)>, (uint64_t *)&demangling cache variable for type metadata for (MOSuggestionAssetReference, Int));
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  char v8 = a4[2];
  if (v7 <= v8) {
    unint64_t v9 = a4[2];
  }
  else {
    unint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(MOAssetAndMediaType, Int)>);
    uint64_t v10 = (void *)swift_allocObject();
    uint64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    void v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  uint64_t v13 = (unint64_t)(v10 + 4);
  int64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 32 * v8) {
      memmove(v10 + 4, a4 + 4, 32 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 32 * v8 || v13 >= v14 + 32 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MOAssetAndMediaType, Int));
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<MOSuggestionSheetAssetDateRange>, type metadata accessor for MOSuggestionSheetAssetDateRange);
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  char v8 = a4[2];
  if (v7 <= v8) {
    unint64_t v9 = a4[2];
  }
  else {
    unint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<MOSuggestionAssetsType>);
    uint64_t v10 = (void *)swift_allocObject();
    uint64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    void v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  uint64_t v13 = (unint64_t)(v10 + 4);
  int64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    type metadata accessor for MOSuggestionAssetsType(0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CLLocationCoordinate2D>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  int64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  int64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(MOSuggestionAssetVisualSubType, Int)>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  int64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  int64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, uint64_t a4)
{
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>);
    uint64_t v10 = (double *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  uint64_t v13 = (char *)(v10 + 4);
  int64_t v14 = (char *)(a4 + 32);
  if (a1)
  {
    if (v10 != (double *)a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *(void *)(a4 + 16) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    memcpy(v13, v14, 32 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MOSuggestionAssetCacheManager.MOSuggestionAssetCompletionResultHolder>);
    uint64_t v10 = (double *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  uint64_t v13 = (char *)(v10 + 4);
  int64_t v14 = (char *)(a4 + 32);
  if (a1)
  {
    if (v10 != (double *)a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *(void *)(a4 + 16) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  size_t v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(a6(0) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (char *)v16 + v20;
  unint64_t v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  unint64_t v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    uint64_t v13 = (void *)swift_allocObject();
    int64_t v14 = _swift_stdlib_malloc_size(v13);
    uint64_t v15 = v14 - 32;
    if (v14 < 32) {
      uint64_t v15 = v14 - 17;
    }
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 4);
  }
  else
  {
    uint64_t v13 = _swiftEmptyArrayStorage;
  }
  unint64_t v16 = (unint64_t)(v13 + 4);
  unint64_t v17 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v13 != a4 || v16 >= v17 + 16 * v11) {
      memmove(v13 + 4, a4 + 4, 16 * v11);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v17 >= v16 + 16 * v11 || v16 >= v17 + 16 * v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, uint64_t a2)
{
  double v3 = v2;
  uint64_t v6 = type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster();
  uint64_t v22 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
  swift_bridgeObjectRetain();
  dispatch thunk of Hashable.hash(into:)();
  Swift::Int v10 = Hasher._finalize()();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  if ((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
  {
    uint64_t v19 = v2;
    uint64_t v20 = a2;
    uint64_t v21 = a1;
    uint64_t v13 = ~v11;
    uint64_t v14 = *(void *)(v22 + 72);
    while (1)
    {
      outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(*(void *)(v9 + 48) + v14 * v12, (uint64_t)v8);
      char v15 = static UUID.== infix(_:_:)();
      outlined destroy of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v8);
      if (v15) {
        break;
      }
      unint64_t v12 = (v12 + 1) & v13;
      if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        a2 = v20;
        a1 = v21;
        double v3 = v19;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v20);
    outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(*(void *)(*v19 + 48) + v14 * v12, v21);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(a2, (uint64_t)v8);
    uint64_t v23 = *v3;
    *double v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v8, v12, isUniquelyReferenced_nonNull_native);
    *double v3 = v23;
    swift_bridgeObjectRelease();
    outlined init with take of MOSuggestionAssetMapsClusterer.Cluster(a2, a1);
    return 1;
  }
}

uint64_t specialized Set._Variant.insert(_:)(unsigned char *a1, Swift::Int a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v2;
    uint64_t *v2 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v8, isUniquelyReferenced_nonNull_native);
    uint64_t *v2 = v13;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  if (*(unsigned __int8 *)(v9 + v8) != a2)
  {
    uint64_t v10 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v10;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(unsigned __int8 *)(v9 + v8) != a2);
  }
  uint64_t result = 0;
  LOBYTE(a2) = *(unsigned char *)(*(void *)(*v2 + 48) + v8);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    unint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *double v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *double v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

{
  uint64_t *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  BOOL v13;
  Swift::Int *v14;
  Swift::Int v15;
  uint64_t v17;
  void *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    unint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *double v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *double v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::UInt *a1, Swift::UInt a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v2;
    uint64_t *v2 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v8, isUniquelyReferenced_nonNull_native);
    uint64_t *v2 = v13;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  if (*(void *)(v9 + 8 * v8) != a2)
  {
    uint64_t v10 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v10;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v9 + 8 * v8) != a2);
  }
  uint64_t result = 0;
  a2 = *(void *)(*(void *)(*v2 + 48) + 8 * v8);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t *a1, uint64_t a2)
{
  double v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static Hasher._hash(seed:_:)();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    *double v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v9, isUniquelyReferenced_nonNull_native);
    *double v3 = v14;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(v6 + 48);
  if (*(void *)(v10 + 8 * v9) != a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v10 + 8 * v9) != a2);
  }
  uint64_t result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(void *a1, void *a2)
{
  return specialized Set._Variant.insert(_:)(a1, a2, &demangling cache variable for type metadata for _SetStorage<MOEventBundleSourceType>, type metadata accessor for MOEventBundleSourceType);
}

{
  return specialized Set._Variant.insert(_:)(a1, a2, &demangling cache variable for type metadata for _SetStorage<MOSuggestionAssetsType>, type metadata accessor for MOSuggestionAssetsType);
}

uint64_t specialized Set._Variant.insert(_:)(void *a1, void *a2, uint64_t *a3, void (*a4)(void))
{
  uint64_t v5 = v4;
  uint64_t v8 = *v4;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v9 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  unint64_t v11 = v9 & ~v10;
  if (((*(void *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v32 = *v5;
    *uint64_t v5 = 0x8000000000000000;
    id v26 = a2;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v26, v11, isUniquelyReferenced_nonNull_native, a3, a4);
    *uint64_t v5 = v32;
    swift_bridgeObjectRelease();
    *a1 = v26;
    return 1;
  }
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;
  if (v12 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v14 == v15)
  {
LABEL_16:
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v17 & 1) == 0)
    {
      uint64_t v18 = ~v10;
      do
      {
        unint64_t v11 = (v11 + 1) & v18;
        if (((*(void *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
          goto LABEL_15;
        }
        uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v21 = v20;
        if (v19 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v21 == v22) {
          goto LABEL_16;
        }
        char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      while ((v24 & 1) == 0);
    }
  }

  swift_bridgeObjectRelease();
  uint64_t v28 = *(void **)(*(void *)(*v5 + 48) + 8 * v11);
  *a1 = v28;
  id v29 = v28;
  return 0;
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster();
  uint64_t v33 = *(void *)(v2 - 8);
  uint64_t v34 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<MOSuggestionAssetMapsClusterer.Cluster>);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    unint64_t v30 = v0;
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v9 = *(void *)(v5 + 56);
    uint64_t v32 = (void *)(v5 + 56);
    if (v8 < 64) {
      uint64_t v10 = ~(-1 << v8);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & v9;
    int64_t v31 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v12 = v6 + 56;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    while (1)
    {
      if (v11)
      {
        unint64_t v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v17 = v16 | (v14 << 6);
      }
      else
      {
        int64_t v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v31) {
          goto LABEL_33;
        }
        unint64_t v19 = v32[v18];
        ++v14;
        if (!v19)
        {
          int64_t v14 = v18 + 1;
          if (v18 + 1 >= v31) {
            goto LABEL_33;
          }
          unint64_t v19 = v32[v14];
          if (!v19)
          {
            int64_t v14 = v18 + 2;
            if (v18 + 2 >= v31) {
              goto LABEL_33;
            }
            unint64_t v19 = v32[v14];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v31)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v30;
                uint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
                if (v29 > 63) {
                  bzero(v32, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v32 = -1 << v29;
                }
                *(void *)(v5 + 16) = 0;
                break;
              }
              unint64_t v19 = v32[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v14 = v20 + 1;
                  if (__OFADD__(v20, 1)) {
                    goto LABEL_39;
                  }
                  if (v14 >= v31) {
                    goto LABEL_33;
                  }
                  unint64_t v19 = v32[v14];
                  ++v20;
                  if (v19) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v14 = v20;
            }
          }
        }
LABEL_23:
        unint64_t v11 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      uint64_t v21 = *(void *)(v33 + 72);
      outlined init with take of MOSuggestionAssetMapsClusterer.Cluster(*(void *)(v5 + 48) + v21 * v17, (uint64_t)v4);
      Hasher.init(_seed:)();
      type metadata accessor for UUID();
      lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
      dispatch thunk of Hashable.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v12 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      uint64_t result = outlined init with take of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v4, *(void *)(v7 + 48) + v15 * v21);
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v7;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  Swift::UInt v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<MOSuggestionAssetVisualSubType>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 0;
    uint64_t v6 = (void *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    uint64_t v9 = v8 & *(void *)(v2 + 56);
    uint64_t v10 = (unint64_t)(v7 + 63) >> 6;
    unint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        uint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        int64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        unint64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          uint64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            uint64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              unint64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                unint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  unsigned __int8 *v6 = -1 << v26;
                }
                uint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  uint64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              uint64_t v5 = v17;
            }
          }
        }
LABEL_23:
        uint64_t v9 = (v16 - 1) & v16;
        int64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      int64_t v18 = *(unsigned __int8 *)(*(void *)(v2 + 48) + v14);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v18);
      uint64_t result = Hasher._finalize()();
      unint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      int64_t v20 = result & ~v19;
      uint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        uint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          unint64_t v24 = v21 == v23;
          if (v21 == v23) {
            uint64_t v21 = 0;
          }
          v22 |= v24;
          char v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        uint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(unsigned char *)(*(void *)(v4 + 48) + v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    unint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    uint64_t v7 = v6 & *(void *)(v2 + 56);
    uint64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    unint64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        int64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        unint64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          unint64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            unint64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  uint64_t *v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  unint64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              unint64_t v11 = v18;
            }
          }
        }
LABEL_23:
        uint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      unint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      int64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        uint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        uint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      uint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      void *v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<MOProtectedAppSource>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    unint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    uint64_t v7 = v6 & *(void *)(v2 + 56);
    uint64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    unint64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        int64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        unint64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          unint64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            unint64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  uint64_t *v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  unint64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              unint64_t v11 = v18;
            }
          }
        }
LABEL_23:
        uint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      unint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      int64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        uint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        uint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      uint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      void *v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  Swift::UInt v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<MOSuggestionAssetMediaItemType>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 0;
    uint64_t v6 = (void *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    uint64_t v9 = v8 & *(void *)(v2 + 56);
    uint64_t v10 = (unint64_t)(v7 + 63) >> 6;
    unint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        uint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        int64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        unint64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          uint64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            uint64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              unint64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                unint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  unsigned __int8 *v6 = -1 << v26;
                }
                uint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  uint64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              uint64_t v5 = v17;
            }
          }
        }
LABEL_23:
        uint64_t v9 = (v16 - 1) & v16;
        int64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      int64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v18);
      uint64_t result = Hasher._finalize()();
      unint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      int64_t v20 = result & ~v19;
      uint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        uint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          unint64_t v24 = v21 == v23;
          if (v21 == v23) {
            uint64_t v21 = 0;
          }
          v22 |= v24;
          char v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        uint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Int>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 0;
    uint64_t v6 = (uint64_t *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    unint64_t v26 = -1 << v7;
    BOOL v27 = v1;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    uint64_t v9 = v8 & *(void *)(v2 + 56);
    uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v10 = (unint64_t)(v7 + 63) >> 6;
    unint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        uint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        int64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        unint64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          uint64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            uint64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              unint64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64) {
                  bzero((void *)(v2 + 56), 8 * v10);
                }
                else {
                  unsigned __int8 *v6 = v26;
                }
                uint64_t v1 = v27;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  uint64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              uint64_t v5 = v17;
            }
          }
        }
LABEL_23:
        uint64_t v9 = (v16 - 1) & v16;
        int64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      int64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      uint64_t result = static Hasher._hash(seed:_:)();
      unint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      int64_t v20 = result & ~v19;
      uint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        uint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          unint64_t v24 = v21 == v23;
          if (v21 == v23) {
            uint64_t v21 = 0;
          }
          v22 |= v24;
          char v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        uint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t specialized _NativeSet.resize(capacity:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v29 = v2;
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    int64_t v31 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v4 + 56);
    int64_t v30 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v10 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v9)
      {
        unint64_t v14 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v15 = v14 | (v12 << 6);
      }
      else
      {
        int64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v30) {
          goto LABEL_33;
        }
        unint64_t v17 = v31[v16];
        ++v12;
        if (!v17)
        {
          int64_t v12 = v16 + 1;
          if (v16 + 1 >= v30) {
            goto LABEL_33;
          }
          unint64_t v17 = v31[v12];
          if (!v17)
          {
            int64_t v12 = v16 + 2;
            if (v16 + 2 >= v30) {
              goto LABEL_33;
            }
            unint64_t v17 = v31[v12];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v30)
              {
LABEL_33:
                swift_release();
                uint64_t v3 = v29;
                uint64_t v28 = 1 << *(unsigned char *)(v4 + 32);
                if (v28 > 63) {
                  bzero(v31, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v31 = -1 << v28;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v17 = v31[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v12 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v12 >= v30) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v31[v12];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v12 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      uint64_t v19 = *(void *)(*(void *)(v4 + 48) + 8 * v15);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      Hasher.init(_seed:)();
      String.hash(into:)();
      Swift::Int v20 = Hasher._finalize()();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v21 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v22 = v20 & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v26 = v23 == v25;
          if (v23 == v25) {
            unint64_t v23 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v10 + 8 * v23);
        }
        while (v27 == -1);
        unint64_t v13 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(void *)(*(void *)(v6 + 48) + 8 * v13) = v19;
      ++*(void *)(v6 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v6;
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v7 = type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = *(void *)(*v3 + 16);
  unint64_t v12 = *(void *)(*v3 + 24);
  uint64_t v27 = v3;
  uint64_t v28 = a1;
  if (v12 > v11 && (a3 & 1) != 0)
  {
LABEL_13:
    uint64_t v13 = v8;
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
    goto LABEL_8;
  }
  if (v12 <= v11)
  {
    specialized _NativeSet.copyAndResize(capacity:)();
LABEL_8:
    uint64_t v14 = *v3;
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    Swift::Int v15 = Hasher._finalize()();
    uint64_t v16 = -1 << *(unsigned char *)(v14 + 32);
    a2 = v15 & ~v16;
    if ((*(void *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      uint64_t v17 = ~v16;
      uint64_t v13 = v8;
      uint64_t v18 = *(void *)(v8 + 72);
      while (1)
      {
        outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(*(void *)(v14 + 48) + v18 * a2, (uint64_t)v10);
        char v19 = static UUID.== infix(_:_:)();
        outlined destroy of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v10);
        if (v19) {
          goto LABEL_17;
        }
        a2 = (a2 + 1) & v17;
        if (((*(void *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          goto LABEL_14;
        }
      }
    }
    goto LABEL_13;
  }
  uint64_t v13 = v8;
  specialized _NativeSet.copy()();
LABEL_14:
  uint64_t v20 = v28;
  uint64_t v21 = *v27;
  *(void *)(*v27 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = outlined init with take of MOSuggestionAssetMapsClusterer.Cluster(v20, *(void *)(v21 + 48) + *(void *)(v13 + 72) * a2);
  uint64_t v23 = *(void *)(v21 + 16);
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (!v24)
  {
    *(void *)(v21 + 16) = v25;
    return result;
  }
  __break(1u);
LABEL_17:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, unint64_t a2, char a3)
{
  Swift::UInt v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  uint64_t result = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(unsigned __int8 *)(v10 + a2) == v5)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(unsigned __int8 *)(v10 + a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(unsigned char *)(*(void *)(v12 + 48) + a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

{
  uint64_t *v3;
  Swift::UInt v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  Swift::UInt v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  uint64_t result = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(void *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      type metadata accessor for MOSuggestionAssetMediaItemType(0);
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v10 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v12 + 48) + 8 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  Swift::UInt v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    uint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

{
  uint64_t *v4;
  uint64_t *v5;
  Swift::Int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  BOOL v16;
  uint64_t v17;
  void *v18;
  uint64_t v20;
  Swift::Int *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  Swift::UInt v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    uint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  uint64_t result = static Hasher._hash(seed:_:)();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(void *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v10 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v12 + 48) + 8 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t result, unint64_t a2, char a3, uint64_t *a4, void (*a5)(void))
{
  unint64_t v7 = v5;
  uint64_t v9 = result;
  unint64_t v10 = *(void *)(*v5 + 16);
  unint64_t v11 = *(void *)(*v5 + 24);
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_22;
  }
  uint64_t v12 = v10 + 1;
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)(v12, a4);
  }
  else
  {
    if (v11 > v10)
    {
      uint64_t result = (uint64_t)specialized _NativeSet.copy()(a4);
LABEL_22:
      uint64_t v29 = *v7;
      *(void *)(*v7 + 8 * (a2 >> 6) + 56) |= 1 << a2;
      *(void *)(*(void *)(v29 + 48) + 8 * a2) = v9;
      uint64_t v30 = *(void *)(v29 + 16);
      BOOL v31 = __OFADD__(v30, 1);
      uint64_t v32 = v30 + 1;
      if (!v31)
      {
        *(void *)(v29 + 16) = v32;
        return result;
      }
      __break(1u);
      goto LABEL_25;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v12, a4);
  }
  uint64_t v13 = *v5;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v14 = Hasher._finalize()();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
  a2 = v14 & ~v15;
  if (((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
    goto LABEL_22;
  }
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;
  if (v16 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v18 == v19)
  {
LABEL_25:
    swift_bridgeObjectRelease_n();
    goto LABEL_26;
  }
  char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v21 & 1) == 0)
  {
    uint64_t v22 = ~v15;
    do
    {
      a2 = (a2 + 1) & v22;
      if (((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
        goto LABEL_22;
      }
      uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v25 = v24;
      if (v23 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v25 == v26) {
        goto LABEL_25;
      }
      char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
    }
    while ((v28 & 1) == 0);
  }
LABEL_26:
  a5(0);
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *specialized _NativeSet.copy()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<MOSuggestionAssetMapsClusterer.Cluster>);
  uint64_t v6 = *v0;
  uint64_t v7 = static _SetStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
LABEL_25:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v8;
    return result;
  }
  uint64_t result = (void *)(v7 + 56);
  uint64_t v10 = v6 + 56;
  unint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v10 + 8 * v11) {
    uint64_t result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  }
  int64_t v12 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v13 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(v6 + 56);
  int64_t v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      unint64_t v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v18 = v17 | (v12 << 6);
      goto LABEL_9;
    }
    int64_t v20 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v20 >= v16) {
      goto LABEL_25;
    }
    unint64_t v21 = *(void *)(v10 + 8 * v20);
    ++v12;
    if (!v21)
    {
      int64_t v12 = v20 + 1;
      if (v20 + 1 >= v16) {
        goto LABEL_25;
      }
      unint64_t v21 = *(void *)(v10 + 8 * v12);
      if (!v21)
      {
        int64_t v12 = v20 + 2;
        if (v20 + 2 >= v16) {
          goto LABEL_25;
        }
        unint64_t v21 = *(void *)(v10 + 8 * v12);
        if (!v21) {
          break;
        }
      }
    }
LABEL_24:
    unint64_t v15 = (v21 - 1) & v21;
    unint64_t v18 = __clz(__rbit64(v21)) + (v12 << 6);
LABEL_9:
    unint64_t v19 = *(void *)(v3 + 72) * v18;
    outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(*(void *)(v6 + 48) + v19, (uint64_t)v5);
    uint64_t result = (void *)outlined init with take of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v5, *(void *)(v8 + 48) + v19);
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v16) {
    goto LABEL_25;
  }
  unint64_t v21 = *(void *)(v10 + 8 * v22);
  if (v21)
  {
    int64_t v12 = v22;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v12 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v12 >= v16) {
      goto LABEL_25;
    }
    unint64_t v21 = *(void *)(v10 + 8 * v12);
    ++v22;
    if (v21) {
      goto LABEL_24;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<MOSuggestionAssetVisualSubType>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  uint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  unint64_t v11 = -1;
  if (v10 < 64) {
    unint64_t v11 = ~(-1 << v10);
  }
  int64_t v12 = v11 & *(void *)(v2 + 56);
  uint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      uint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      uint64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        uint64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    int64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
  }
  unint64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    uint64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    uint64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  uint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  unint64_t v11 = -1;
  if (v10 < 64) {
    unint64_t v11 = ~(-1 << v10);
  }
  int64_t v12 = v11 & *(void *)(v2 + 56);
  uint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      uint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      uint64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        uint64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    int64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    unint64_t v18 = v17[1];
    unint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    uint64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    uint64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<MOProtectedAppSource>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  uint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  unint64_t v11 = -1;
  if (v10 < 64) {
    unint64_t v11 = ~(-1 << v10);
  }
  int64_t v12 = v11 & *(void *)(v2 + 56);
  uint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      uint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      uint64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        uint64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    int64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    unint64_t v18 = v17[1];
    unint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    uint64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    uint64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<MOSuggestionAssetMediaItemType>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  uint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  unint64_t v11 = -1;
  if (v10 < 64) {
    unint64_t v11 = ~(-1 << v10);
  }
  int64_t v12 = v11 & *(void *)(v2 + 56);
  uint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      uint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      uint64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        uint64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    int64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }
  unint64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    uint64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    uint64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Int>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  uint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  unint64_t v11 = -1;
  if (v10 < 64) {
    unint64_t v11 = ~(-1 << v10);
  }
  int64_t v12 = v11 & *(void *)(v2 + 56);
  uint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      uint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      uint64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        uint64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    int64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }
  unint64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    uint64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    uint64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

id specialized _NativeSet.copy()(uint64_t *a1)
{
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _SetStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    uint64_t *v2 = v5;
    return result;
  }
  id result = (id)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v14) {
      goto LABEL_28;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v20 = *(void *)(v7 + 8 * v10);
      if (!v20)
      {
        int64_t v10 = v19 + 2;
        if (v19 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v20 = *(void *)(v7 + 8 * v10);
        if (!v20) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    unint64_t v18 = *(void **)(*(void *)(v3 + 48) + v17);
    *(void *)(*(void *)(v5 + 48) + v17) = v18;
    id result = v18;
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v14) {
    goto LABEL_28;
  }
  unint64_t v20 = *(void *)(v7 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster();
  uint64_t v32 = *(void *)(v2 - 8);
  uint64_t v33 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<MOSuggestionAssetMapsClusterer.Cluster>);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v7;
    return result;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v9 = *(void *)(v5 + 56);
  uint64_t v29 = v0;
  uint64_t v30 = v5 + 56;
  if (v8 < 64) {
    uint64_t v10 = ~(-1 << v8);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & v9;
  int64_t v31 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 56;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_24;
    }
    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v18 >= v31) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v30 + 8 * v18);
    ++v14;
    if (!v19)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v31) {
        goto LABEL_33;
      }
      unint64_t v19 = *(void *)(v30 + 8 * v14);
      if (!v19)
      {
        int64_t v14 = v18 + 2;
        if (v18 + 2 >= v31) {
          goto LABEL_33;
        }
        unint64_t v19 = *(void *)(v30 + 8 * v14);
        if (!v19) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v11 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_24:
    uint64_t v21 = *(void *)(v32 + 72);
    outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(*(void *)(v5 + 48) + v21 * v17, (uint64_t)v4);
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v12 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v15 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    uint64_t result = outlined init with take of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v4, *(void *)(v7 + 48) + v15 * v21);
    ++*(void *)(v7 + 16);
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v31)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v29;
    goto LABEL_35;
  }
  unint64_t v19 = *(void *)(v30 + 8 * v20);
  if (v19)
  {
    int64_t v14 = v20;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v14 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v14 >= v31) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v30 + 8 * v14);
    ++v20;
    if (v19) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  Swift::UInt v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<MOSuggestionAssetVisualSubType>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  uint64_t v9 = v8 & *(void *)(v2 + 56);
  uint64_t v10 = (unint64_t)(v7 + 63) >> 6;
  unint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      int64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    unint64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      uint64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        uint64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v9 = (v16 - 1) & v16;
    int64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    int64_t v18 = *(unsigned __int8 *)(*(void *)(v2 + 48) + v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    uint64_t result = Hasher._finalize()();
    unint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    int64_t v20 = result & ~v19;
    uint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      uint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        unint64_t v24 = v21 == v23;
        if (v21 == v23) {
          uint64_t v21 = 0;
        }
        v22 |= v24;
        char v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      uint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(unsigned char *)(*(void *)(v4 + 48) + v12) = v18;
    ++*(void *)(v4 + 16);
  }
  unint64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    uint64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  uint64_t v8 = v7 & *(void *)(v2 + 56);
  uint64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  unint64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      int64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    unint64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      unint64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        unint64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    unint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    int64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      uint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      uint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    void *v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    unint64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    unint64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<MOProtectedAppSource>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  uint64_t v8 = v7 & *(void *)(v2 + 56);
  uint64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  unint64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      int64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    unint64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      unint64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        unint64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    unint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    int64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain_n();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      uint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      uint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    void *v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    unint64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    unint64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  Swift::UInt v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<MOSuggestionAssetMediaItemType>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  uint64_t v9 = v8 & *(void *)(v2 + 56);
  uint64_t v10 = (unint64_t)(v7 + 63) >> 6;
  unint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      int64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    unint64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      uint64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        uint64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v9 = (v16 - 1) & v16;
    int64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    int64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    uint64_t result = Hasher._finalize()();
    unint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    int64_t v20 = result & ~v19;
    uint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      uint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        unint64_t v24 = v21 == v23;
        if (v21 == v23) {
          uint64_t v21 = 0;
        }
        v22 |= v24;
        char v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      uint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  unint64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    uint64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Int>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  unint64_t v26 = v1;
  uint64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  uint64_t v9 = v8 & *(void *)(v2 + 56);
  uint64_t v10 = (unint64_t)(v7 + 63) >> 6;
  unint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      int64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    unint64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      uint64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        uint64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v9 = (v16 - 1) & v16;
    int64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    int64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    uint64_t result = static Hasher._hash(seed:_:)();
    unint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    int64_t v20 = result & ~v19;
    uint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      uint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        unint64_t v24 = v21 == v23;
        if (v21 == v23) {
          uint64_t v21 = 0;
        }
        v22 |= v24;
        char v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      uint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  unint64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v26;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    uint64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (!*(void *)(v4 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v3 = v6;
    return result;
  }
  uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v29 = v2;
  uint64_t v30 = v4 + 56;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v4 + 56);
  int64_t v31 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v10 = v5 + 56;
  uint64_t result = swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v9)
    {
      unint64_t v14 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v31) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v30 + 8 * v16);
    ++v12;
    if (!v17)
    {
      int64_t v12 = v16 + 1;
      if (v16 + 1 >= v31) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v30 + 8 * v12);
      if (!v17)
      {
        int64_t v12 = v16 + 2;
        if (v16 + 2 >= v31) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v30 + 8 * v12);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    unint64_t v19 = *(void **)(*(void *)(v4 + 48) + 8 * v15);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    id v20 = v19;
    String.hash(into:)();
    Swift::Int v21 = Hasher._finalize()();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v22 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v23 = v21 & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v10 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v23) & ~*(void *)(v10 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v10 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v13 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(void *)(*(void *)(v6 + 48) + 8 * v13) = v20;
    ++*(void *)(v6 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v31)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v3 = v29;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v30 + 8 * v18);
  if (v17)
  {
    int64_t v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= v31) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v30 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<[Double]>, (uint64_t *)&demangling cache variable for type metadata for [Double]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<[MOSuggestionCollectionViewCellViewModel]>, (uint64_t *)&demangling cache variable for type metadata for [MOSuggestionCollectionViewCellViewModel]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<MOSuggestionAssetMapsClusterer.Cluster>, (uint64_t (*)(void))type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster, (uint64_t (*)(void))type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster);
}

{
  uint64_t vars8;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }

  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void *specialized _ArrayBuffer._consumeAndCreateNew()(void *a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<(MOSuggestionAsset, Int)>, (uint64_t *)&demangling cache variable for type metadata for (MOSuggestionAsset, Int));
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MOSuggestionAssetMapsClusterer.Cluster>);
  uint64_t v3 = *(void *)(type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster() - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (void *)swift_allocObject();
  uint64_t result = (void *)_swift_stdlib_malloc_size(v6);
  if (v4)
  {
    if ((void *)((char *)result - v5) != (void *)0x8000000000000000 || v4 != -1)
    {
      v6[2] = v1;
      v6[3] = 2 * ((uint64_t)((uint64_t)result - v5) / v4);
      uint64_t v9 = specialized Sequence._copySequenceContents(initializing:)(&v10, (uint64_t)v6 + v5, v1, a1);
      swift_bridgeObjectRetain();
      outlined consume of Set<String>.Iterator._Variant();
      if (v9 == v1) {
        return v6;
      }
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1)
{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (void (*)(void *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (void (*)(void *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (void (*)(void *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for UIImage);
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, a3, a4, &lazy cache variable for type metadata for PHAsset);
}

{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  void *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *result;

  uint64_t v4 = a4 >> 1;
  unint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5) {
      return _swiftEmptyArrayStorage;
    }
    uint64_t v8 = v5;
    if (v5 <= 0)
    {
      uint64_t v9 = _swiftEmptyArrayStorage;
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0) {
          goto LABEL_19;
        }
        int64_t v12 = a2 + 8 * a3;
        if (v12 < (unint64_t)&v9[v8 + 4] && (unint64_t)(v9 + 4) < v12 + v8 * 8) {
          goto LABEL_19;
        }
        type metadata accessor for MOSuggestionCollectionViewCellViewModel();
        swift_arrayInitWithCopy();
        return v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v9 = (void *)swift_allocObject();
      uint64_t v10 = _swift_stdlib_malloc_size(v9);
      unint64_t v11 = v10 - 32;
      if (v10 < 32) {
        unint64_t v11 = v10 - 25;
      }
      v9[2] = v5;
      v9[3] = (2 * (v11 >> 3)) | 1;
      if (v4 != a3) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t *a5)
{
  unint64_t v5 = a4 >> 1;
  uint64_t v6 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v6) {
      return _swiftEmptyArrayStorage;
    }
    uint64_t v10 = v6;
    if (v6 <= 0)
    {
      unint64_t v11 = _swiftEmptyArrayStorage;
      if (v5 != a3)
      {
LABEL_7:
        if (v6 < 0) {
          goto LABEL_19;
        }
        unint64_t v14 = a2 + 8 * a3;
        if (v14 < (unint64_t)&v11[v10 + 4] && (unint64_t)(v11 + 4) < v14 + v10 * 8) {
          goto LABEL_19;
        }
        type metadata accessor for UIApplication(0, a5);
        swift_arrayInitWithCopy();
        return v11;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      unint64_t v11 = (void *)swift_allocObject();
      int64_t v12 = _swift_stdlib_malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 25;
      }
      v11[2] = v6;
      v11[3] = (2 * (v13 >> 3)) | 1;
      if (v5 != a3) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1, void (*a2)(void *, uint64_t, unint64_t))
{
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v4) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v4 <= 0)
    {
      unint64_t v5 = _swiftEmptyArrayStorage;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      unint64_t v5 = (void *)swift_allocObject();
      int64_t v6 = _swift_stdlib_malloc_size(v5);
      uint64_t v7 = v6 - 32;
      if (v6 < 32) {
        uint64_t v7 = v6 - 25;
      }
      void v5[2] = v4;
      v5[3] = (2 * (v7 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    a2(v5 + 4, v4, a1);
    a2 = v8;
    swift_bridgeObjectRelease();
    if (a2 == (void (*)(void *, uint64_t, unint64_t))v4) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v4) {
      return _swiftEmptyArrayStorage;
    }
  }
  return v5;
}

double *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  uint64_t v6 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of Set<String>.Iterator._Variant();
  if (v6 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return (double *)v3;
}

unsigned __int8 *specialized _parseInteger<A, B>(ascii:radix:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = String.init<A>(_:)();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = static String._copying(_:)();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    uint64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  unint64_t v11 = specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

unsigned __int8 *specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            uint64_t v9 = 0;
            for (double i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8) {
                    return 0;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              uint64_t v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
                return 0;
              }
              uint64_t v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12))) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      unsigned __int8 v22 = a3 + 48;
      unsigned __int8 v23 = a3 + 55;
      unsigned __int8 v24 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v22 = 58;
      }
      else
      {
        unsigned __int8 v24 = 97;
        unsigned __int8 v23 = 65;
      }
      if (result)
      {
        uint64_t v25 = 0;
        do
        {
          unsigned int v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24) {
                return 0;
              }
              char v27 = -87;
            }
            else
            {
              char v27 = -55;
            }
          }
          else
          {
            char v27 = -48;
          }
          uint64_t v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63) {
            return 0;
          }
          uint64_t v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27))) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  uint64_t v14 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v15 = a3 + 48;
  unsigned __int8 v16 = a3 + 55;
  unsigned __int8 v17 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v15 = 58;
  }
  else
  {
    unsigned __int8 v17 = 97;
    unsigned __int8 v16 = 65;
  }
  if (!result) {
    return 0;
  }
  uint64_t v9 = 0;
  int64_t v18 = result + 1;
  do
  {
    unsigned int v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17) {
          return 0;
        }
        char v20 = -87;
      }
      else
      {
        char v20 = -55;
      }
    }
    else
    {
      char v20 = -48;
    }
    uint64_t v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
      return 0;
    }
    uint64_t v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20))) {
      return 0;
    }
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

uint64_t static String._copying(_:)()
{
  unint64_t v0 = String.subscript.getter();
  uint64_t v4 = static String._copying(_:)(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t static String._copying(_:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = specialized Collection.count.getter(a1, a2, a3, a4);
    if (!v9
      || (uint64_t v10 = v9,
          unsigned int v11 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v9, 0),
          unint64_t v12 = specialized Sequence._copySequenceContents(initializing:)((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4), swift_bridgeObjectRetain(), swift_bridgeObjectRelease(), v12 == v10))
    {
      uint64_t v13 = static String._uncheckedFromUTF8(_:)();
      swift_release();
      return v13;
    }
    __break(1u);
  }
  else
  {
    if ((a4 & 0x2000000000000000) != 0)
    {
      v14[0] = a3;
      v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
      return static String._uncheckedFromUTF8(_:)();
    }
    if ((a3 & 0x1000000000000000) != 0) {
      goto LABEL_4;
    }
  }
  _StringObject.sharedUTF8.getter();
LABEL_4:

  return static String._uncheckedFromUTF8(_:)();
}

uint64_t specialized Collection.count.getter(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4;
  uint64_t v5 = a3;
  unint64_t v6 = a2;
  unint64_t v7 = a1;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((a1 & 0xC) == 4 << v8)
  {
    a1 = _StringGuts._slowEnsureMatchingEncoding(_:)(a1, a3, a4);
    unint64_t v7 = a1;
  }
  if ((v6 & 0xC) == v9)
  {
    a1 = _StringGuts._slowEnsureMatchingEncoding(_:)(v6, v5, v4);
    unint64_t v6 = a1;
    if ((v4 & 0x1000000000000000) == 0) {
      return (v6 >> 16) - (v7 >> 16);
    }
  }
  else if ((v4 & 0x1000000000000000) == 0)
  {
    return (v6 >> 16) - (v7 >> 16);
  }
  unint64_t v11 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0) {
    unint64_t v11 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (v11 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v11 >= v6 >> 16)
  {
    a1 = v7;
    a2 = v6;
    a3 = v5;
    a4 = v4;
    return String.UTF8View._foreignDistance(from:to:)(a1, a2, a3, a4);
  }
  __break(1u);
  return String.UTF8View._foreignDistance(from:to:)(a1, a2, a3, a4);
}

unint64_t specialized Sequence._copySequenceContents(initializing:)(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_33:
    void *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    uint64_t result = v12;
    if (v17 == v15) {
      uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      uint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          uint64_t result = _StringObject.sharedUTF8.getter();
        }
        char v19 = *(unsigned char *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)();
LABEL_29:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster();
  uint64_t v129 = *(void *)(v4 - 8);
  uint64_t v130 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v126 = (uint64_t)&v120 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v135 = (uint64_t)&v120 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v133 = (uint64_t)&v120 - v10;
  __chkstk_darwin(v9);
  uint64_t v132 = (uint64_t)&v120 - v11;
  Swift::Int v12 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v12);
  if (result >= v12)
  {
    if (v12 < 0) {
      goto LABEL_142;
    }
    if (v12) {
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v12, 1, a1);
    }
    return result;
  }
  if (v12 >= 0) {
    uint64_t v14 = v12;
  }
  else {
    uint64_t v14 = v12 + 1;
  }
  if (v12 < -1) {
    goto LABEL_150;
  }
  Swift::Int v123 = result;
  if (v12 < 2)
  {
    unint64_t v18 = _swiftEmptyArrayStorage;
    unint64_t v128 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v129 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v129 + 80));
    if (v12 != 1)
    {
      unint64_t v21 = _swiftEmptyArrayStorage[2];
      char v20 = (char *)_swiftEmptyArrayStorage;
LABEL_107:
      uint64_t v122 = v18;
      if (v21 >= 2)
      {
        uint64_t v114 = *a1;
        do
        {
          unint64_t v115 = v21 - 2;
          if (v21 < 2) {
            goto LABEL_137;
          }
          if (!v114) {
            goto LABEL_149;
          }
          uint64_t v116 = *(void *)&v20[16 * v115 + 32];
          uint64_t v117 = *(void *)&v20[16 * v21 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)(v114 + *(void *)(v129 + 72) * v116, v114 + *(void *)(v129 + 72) * *(void *)&v20[16 * v21 + 16], v114 + *(void *)(v129 + 72) * v117, v128);
          if (v2) {
            break;
          }
          if (v117 < v116) {
            goto LABEL_138;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            char v20 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v20);
          }
          if (v115 >= *((void *)v20 + 2)) {
            goto LABEL_139;
          }
          uint64_t v118 = &v20[16 * v115 + 32];
          *(void *)uint64_t v118 = v116;
          *((void *)v118 + 1) = v117;
          unint64_t v119 = *((void *)v20 + 2);
          if (v21 > v119) {
            goto LABEL_140;
          }
          memmove(&v20[16 * v21 + 16], &v20[16 * v21 + 32], 16 * (v119 - v21));
          *((void *)v20 + 2) = v119 - 1;
          unint64_t v21 = v119 - 1;
        }
        while (v119 > 2);
      }
LABEL_118:
      swift_bridgeObjectRelease();
      v122[2] = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v122 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v15 = v14 >> 1;
    uint64_t v16 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v16 + 16) = v15;
    uint64_t v17 = *(unsigned __int8 *)(v129 + 80);
    uint64_t v122 = (void *)v16;
    unint64_t v128 = v16 + ((v17 + 32) & ~v17);
  }
  uint64_t v19 = 0;
  char v20 = (char *)_swiftEmptyArrayStorage;
  unint64_t v134 = a1;
  while (1)
  {
    uint64_t v22 = v19;
    uint64_t v23 = v19 + 1;
    if (v19 + 1 >= v12)
    {
      Swift::Int v32 = v19 + 1;
    }
    else
    {
      uint64_t v24 = *a1;
      uint64_t v25 = v19;
      uint64_t v127 = v19;
      uint64_t v26 = *(void *)(v129 + 72);
      uint64_t v27 = v132;
      outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v24 + v26 * v23, v132);
      uint64_t v28 = v24 + v26 * v25;
      uint64_t v29 = v133;
      outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v28, v133);
      double v30 = *(double *)(v27 + 16);
      double v31 = *(double *)(v29 + 16);
      outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v29);
      outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v27);
      Swift::Int v32 = v127 + 2;
      uint64_t v124 = v24;
      uint64_t v136 = v26;
      if (v127 + 2 >= v12)
      {
        uint64_t v40 = v26;
        uint64_t v22 = v127;
        if (v31 >= v30) {
          goto LABEL_40;
        }
      }
      else
      {
        uint64_t v125 = v2;
        Swift::Int v131 = v26 * v23;
        uint64_t v33 = v24;
        Swift::Int v34 = v127 + 2;
        uint64_t v35 = v26 * (v127 + 2);
        while (1)
        {
          Swift::Int v36 = v12;
          uint64_t v37 = v132;
          outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v33 + v35, v132);
          uint64_t v38 = v133;
          outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v33 + v131, v133);
          BOOL v39 = *(double *)(v38 + 16) >= *(double *)(v37 + 16);
          outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v38);
          outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v37);
          if (v31 < v30 == v39) {
            break;
          }
          uint64_t v40 = v136;
          v33 += v136;
          ++v34;
          Swift::Int v12 = v36;
          if (v36 == v34)
          {
            Swift::Int v32 = v36;
            a1 = v134;
            uint64_t v2 = v125;
            uint64_t v22 = v127;
            if (v31 < v30) {
              goto LABEL_27;
            }
            goto LABEL_40;
          }
        }
        a1 = v134;
        Swift::Int v32 = v34;
        uint64_t v2 = v125;
        uint64_t v22 = v127;
        Swift::Int v12 = v36;
        uint64_t v40 = v136;
        if (v31 >= v30) {
          goto LABEL_40;
        }
      }
LABEL_27:
      if (v32 < v22) {
        goto LABEL_143;
      }
      if (v22 < v32)
      {
        Swift::Int v131 = v12;
        uint64_t v121 = v20;
        uint64_t v41 = 0;
        uint64_t v42 = v40 * (v32 - 1);
        Swift::Int v43 = v32 * v40;
        uint64_t v44 = v22 * v40;
        do
        {
          if (v22 != v32 + v41 - 1)
          {
            uint64_t v125 = v2;
            uint64_t v45 = v124;
            if (!v124) {
              goto LABEL_148;
            }
            unint64_t v46 = v124 + v44;
            outlined init with take of MOSuggestionAssetMapsClusterer.Cluster(v124 + v44, v126);
            if (v44 < v42 || v46 >= v45 + v43)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v44 != v42)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            outlined init with take of MOSuggestionAssetMapsClusterer.Cluster(v126, v45 + v42);
            a1 = v134;
            uint64_t v2 = v125;
            uint64_t v40 = v136;
          }
          ++v22;
          --v41;
          v42 -= v40;
          v43 -= v40;
          v44 += v40;
        }
        while (v22 < v32 + v41);
        char v20 = v121;
        uint64_t v22 = v127;
        Swift::Int v12 = v131;
      }
    }
LABEL_40:
    if (v32 < v12)
    {
      if (__OFSUB__(v32, v22)) {
        goto LABEL_141;
      }
      if (v32 - v22 < v123) {
        break;
      }
    }
LABEL_58:
    if (v32 < v22) {
      goto LABEL_136;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v136 = v32;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      char v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v20 + 2) + 1, 1, v20);
    }
    unint64_t v63 = *((void *)v20 + 2);
    unint64_t v62 = *((void *)v20 + 3);
    unint64_t v21 = v63 + 1;
    if (v63 >= v62 >> 1) {
      char v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v62 > 1), v63 + 1, 1, v20);
    }
    *((void *)v20 + 2) = v21;
    uint64_t v64 = v20 + 32;
    char v65 = &v20[16 * v63 + 32];
    uint64_t v66 = v136;
    *(void *)char v65 = v22;
    *((void *)v65 + 1) = v66;
    if (v63)
    {
      while (1)
      {
        unint64_t v67 = v21 - 1;
        if (v21 >= 4)
        {
          uint64_t v72 = &v64[16 * v21];
          uint64_t v73 = *((void *)v72 - 8);
          uint64_t v74 = *((void *)v72 - 7);
          BOOL v78 = __OFSUB__(v74, v73);
          uint64_t v75 = v74 - v73;
          if (v78) {
            goto LABEL_125;
          }
          uint64_t v77 = *((void *)v72 - 6);
          uint64_t v76 = *((void *)v72 - 5);
          BOOL v78 = __OFSUB__(v76, v77);
          uint64_t v70 = v76 - v77;
          char v71 = v78;
          if (v78) {
            goto LABEL_126;
          }
          unint64_t v79 = v21 - 2;
          unint64_t v80 = &v64[16 * v21 - 32];
          uint64_t v82 = *(void *)v80;
          uint64_t v81 = *((void *)v80 + 1);
          BOOL v78 = __OFSUB__(v81, v82);
          uint64_t v83 = v81 - v82;
          if (v78) {
            goto LABEL_128;
          }
          BOOL v78 = __OFADD__(v70, v83);
          uint64_t v84 = v70 + v83;
          if (v78) {
            goto LABEL_131;
          }
          if (v84 >= v75)
          {
            uint64_t v102 = &v64[16 * v67];
            uint64_t v104 = *(void *)v102;
            uint64_t v103 = *((void *)v102 + 1);
            BOOL v78 = __OFSUB__(v103, v104);
            uint64_t v105 = v103 - v104;
            if (v78) {
              goto LABEL_135;
            }
            BOOL v95 = v70 < v105;
            goto LABEL_95;
          }
        }
        else
        {
          if (v21 != 3)
          {
            uint64_t v96 = *((void *)v20 + 4);
            uint64_t v97 = *((void *)v20 + 5);
            BOOL v78 = __OFSUB__(v97, v96);
            uint64_t v89 = v97 - v96;
            char v90 = v78;
            goto LABEL_89;
          }
          uint64_t v69 = *((void *)v20 + 4);
          uint64_t v68 = *((void *)v20 + 5);
          BOOL v78 = __OFSUB__(v68, v69);
          uint64_t v70 = v68 - v69;
          char v71 = v78;
        }
        if (v71) {
          goto LABEL_127;
        }
        unint64_t v79 = v21 - 2;
        id v85 = &v64[16 * v21 - 32];
        uint64_t v87 = *(void *)v85;
        uint64_t v86 = *((void *)v85 + 1);
        BOOL v88 = __OFSUB__(v86, v87);
        uint64_t v89 = v86 - v87;
        char v90 = v88;
        if (v88) {
          goto LABEL_130;
        }
        id v91 = &v64[16 * v67];
        uint64_t v93 = *(void *)v91;
        uint64_t v92 = *((void *)v91 + 1);
        BOOL v78 = __OFSUB__(v92, v93);
        uint64_t v94 = v92 - v93;
        if (v78) {
          goto LABEL_133;
        }
        if (__OFADD__(v89, v94)) {
          goto LABEL_134;
        }
        if (v89 + v94 >= v70)
        {
          BOOL v95 = v70 < v94;
LABEL_95:
          if (v95) {
            unint64_t v67 = v79;
          }
          goto LABEL_97;
        }
LABEL_89:
        if (v90) {
          goto LABEL_129;
        }
        uint64_t v98 = &v64[16 * v67];
        uint64_t v100 = *(void *)v98;
        uint64_t v99 = *((void *)v98 + 1);
        BOOL v78 = __OFSUB__(v99, v100);
        uint64_t v101 = v99 - v100;
        if (v78) {
          goto LABEL_132;
        }
        if (v101 < v89) {
          goto LABEL_15;
        }
LABEL_97:
        unint64_t v106 = v67 - 1;
        if (v67 - 1 >= v21)
        {
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
          goto LABEL_145;
        }
        uint64_t v107 = *a1;
        if (!*a1) {
          goto LABEL_147;
        }
        BOOL v108 = v20;
        v109 = &v64[16 * v106];
        uint64_t v110 = *(void *)v109;
        v111 = &v64[16 * v67];
        uint64_t v112 = *((void *)v111 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)(v107 + *(void *)(v129 + 72) * *(void *)v109, v107 + *(void *)(v129 + 72) * *(void *)v111, v107 + *(void *)(v129 + 72) * v112, v128);
        if (v2) {
          goto LABEL_118;
        }
        if (v112 < v110) {
          goto LABEL_122;
        }
        if (v67 > *((void *)v108 + 2)) {
          goto LABEL_123;
        }
        *(void *)v109 = v110;
        *(void *)&v64[16 * v106 + 8] = v112;
        unint64_t v113 = *((void *)v108 + 2);
        if (v67 >= v113) {
          goto LABEL_124;
        }
        char v20 = v108;
        unint64_t v21 = v113 - 1;
        memmove(&v64[16 * v67], v111 + 16, 16 * (v113 - 1 - v67));
        *((void *)v108 + 2) = v113 - 1;
        a1 = v134;
        if (v113 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v21 = 1;
LABEL_15:
    Swift::Int v12 = a1[1];
    uint64_t v19 = v136;
    if (v136 >= v12)
    {
      unint64_t v18 = v122;
      goto LABEL_107;
    }
  }
  if (__OFADD__(v22, v123)) {
    goto LABEL_144;
  }
  if (v22 + v123 >= v12) {
    Swift::Int v47 = v12;
  }
  else {
    Swift::Int v47 = v22 + v123;
  }
  if (v47 >= v22)
  {
    if (v32 != v47)
    {
      uint64_t v127 = v22;
      uint64_t v121 = v20;
      uint64_t v124 = v47;
      uint64_t v125 = v2;
      Swift::Int v48 = *(void *)(v129 + 72);
      uint64_t v136 = v48 * (v32 - 1);
      Swift::Int v131 = v48;
      Swift::Int v49 = v32 * v48;
      do
      {
        uint64_t v50 = 0;
        uint64_t v51 = v127;
        while (1)
        {
          Swift::Int v52 = v32;
          uint64_t v53 = *a1;
          uint64_t v54 = v132;
          outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v49 + v50 + *a1, v132);
          uint64_t v55 = v136 + v50 + v53;
          uint64_t v56 = v133;
          outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v55, v133);
          double v57 = *(double *)(v54 + 16);
          double v58 = *(double *)(v56 + 16);
          outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v56);
          outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v54);
          if (v58 >= v57) {
            break;
          }
          uint64_t v59 = *a1;
          if (!*a1) {
            goto LABEL_146;
          }
          uint64_t v60 = v59 + v136 + v50;
          outlined init with take of MOSuggestionAssetMapsClusterer.Cluster(v59 + v49 + v50, v135);
          swift_arrayInitWithTakeFrontToBack();
          outlined init with take of MOSuggestionAssetMapsClusterer.Cluster(v135, v60);
          v50 -= v131;
          ++v51;
          Swift::Int v32 = v52;
          a1 = v134;
          if (v52 == v51) {
            goto LABEL_51;
          }
        }
        Swift::Int v32 = v52;
LABEL_51:
        ++v32;
        v136 += v131;
        v49 += v131;
      }
      while (v32 != v124);
      Swift::Int v32 = v124;
      uint64_t v2 = v125;
      char v20 = v121;
      uint64_t v22 = v127;
    }
    goto LABEL_58;
  }
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  Swift::Int result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  Swift::Int v28;
  uint64_t v29;
  Swift::Int v30;
  Swift::Int v31;
  uint64_t v32;
  Swift::Int v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  Swift::Int v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int (*v53)(uint64_t, uint64_t, uint64_t);
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t *v64;
  Swift::Int v65;
  Swift::Int v66;
  uint64_t *v67;
  uint64_t v68;
  Swift::Int v69;
  void *v70;
  uint64_t v71;
  Swift::Int v72;
  uint64_t v73;
  uint64_t (*v74)(uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int (*v87)(uint64_t, uint64_t, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  char *v100;
  char *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  BOOL v113;
  unint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  BOOL v123;
  uint64_t v124;
  char v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  BOOL v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  Swift::Int v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  Swift::Int v166;
  Swift::Int v167;
  void *v168;
  uint64_t *v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  void (*v175)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v176;
  void (*v177)(uint64_t, uint64_t, uint64_t, uint64_t);
  unsigned int (**v178)(uint64_t, uint64_t, uint64_t);
  void (**v179)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v180;
  uint64_t (*v181)(uint64_t);
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;

  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MOSuggestionSheetAssetDateRange?);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v155 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  v172 = (uint64_t)&v155 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  v162 = (uint64_t)&v155 - v11;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v155 - v12;
  uint64_t v14 = type metadata accessor for MOSuggestionSheetAssetDateRange(0);
  v173 = *(void *)(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  v170 = (uint64_t)&v155 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  v176 = (uint64_t)&v155 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  v159 = (uint64_t)&v155 - v20;
  __chkstk_darwin(v19);
  v163 = (uint64_t)&v155 - v21;
  uint64_t v22 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v22);
  if (result >= v22)
  {
    if (v22 < 0) {
      goto LABEL_182;
    }
    if (v22) {
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v22, 1, a1);
    }
    return result;
  }
  if (v22 >= 0) {
    uint64_t v24 = v22;
  }
  else {
    uint64_t v24 = v22 + 1;
  }
  if (v22 < -1) {
    goto LABEL_190;
  }
  v158 = result;
  v164 = v13;
  v156 = a1;
  if (v22 < 2)
  {
    uint64_t v27 = (char *)_swiftEmptyArrayStorage;
    v184 = (uint64_t)_swiftEmptyArrayStorage;
    v169 = (uint64_t *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v22 != 1)
    {
      uint64_t v99 = _swiftEmptyArrayStorage[2];
      goto LABEL_145;
    }
  }
  else
  {
    uint64_t v25 = v24 >> 1;
    type metadata accessor for MOSuggestionInterstitialListAssetViewModel();
    uint64_t v26 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10) = v25;
    v169 = (uint64_t *)((v26 & 0xFFFFFFFFFFFFFF8) + 32);
    v184 = v26;
  }
  uint64_t v28 = 0;
  uint64_t v29 = *a1;
  v178 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v173 + 48);
  v179 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v173 + 56);
  v157 = v29 - 8;
  uint64_t v27 = (char *)_swiftEmptyArrayStorage;
  v171 = v7;
  v180 = v14;
  v165 = v22;
  v174 = v29;
  do
  {
    double v30 = v28;
    double v31 = v28 + 1;
    v167 = v28;
    if (v28 + 1 >= v22)
    {
      uint64_t v50 = v28 + 1;
      goto LABEL_58;
    }
    v161 = v27;
    Swift::Int v32 = *(void *)(v29 + 8 * v31);
    v182 = *(void *)(v29 + 8 * v28);
    v183 = v32;
    swift_retain();
    swift_retain();
    LODWORD(v181) = closure #1 in Array<A>.sortedByAscendingTime.getter(&v183, &v182);
    if (v2)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      goto LABEL_157;
    }
    v160 = 0;
    swift_release();
    swift_release();
    uint64_t v33 = v30 + 2;
    if (v30 + 2 < v22)
    {
      while (1)
      {
        Swift::Int v34 = *(void *)(v29 + 8 * v31);
        uint64_t v35 = *(uint64_t (**)(uint64_t))(**(void **)(v29 + 8 * v33) + 224);
        swift_retain();
        Swift::Int v36 = swift_retain();
        uint64_t v37 = v35(v36);
        uint64_t v38 = swift_bridgeObjectRelease();
        if (!v37) {
          break;
        }
        BOOL v39 = *(uint64_t (**)(uint64_t))(*(void *)v34 + 224);
        uint64_t v40 = v39(v38);
        uint64_t v41 = swift_bridgeObjectRelease();
        if (!v40)
        {
          swift_release();
          swift_release();
          uint64_t v22 = v165;
          if ((v181 & 1) == 0)
          {
            uint64_t v50 = v33;
            uint64_t v2 = v160;
            uint64_t v27 = v161;
            uint64_t v29 = v174;
LABEL_45:
            double v30 = v167;
            goto LABEL_58;
          }
          Swift::Int v49 = 1;
          goto LABEL_25;
        }
        uint64_t v42 = v35(v41);
        if (!v42)
        {
          uint64_t v51 = (uint64_t)v164;
          (*v179)((uint64_t)v164, 1, 1, v180);
          Swift::Int v52 = v51;
          goto LABEL_38;
        }
        if (*(void *)(v42 + 16))
        {
          Swift::Int v43 = v173;
          uint64_t v44 = (uint64_t)v164;
          outlined init with copy of MOSuggestionSheetAssetDateRange(v42 + ((*(unsigned __int8 *)(v173 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v173 + 80)), (uint64_t)v164);
          uint64_t v45 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 56);
          unint64_t v46 = v44;
          Swift::Int v47 = 0;
          Swift::Int v48 = v180;
        }
        else
        {
          Swift::Int v48 = v180;
          uint64_t v45 = *v179;
          uint64_t v44 = (uint64_t)v164;
          unint64_t v46 = (uint64_t)v164;
          Swift::Int v47 = 1;
        }
        v177 = v45;
        v45(v46, v47, 1, v48);
        swift_bridgeObjectRelease();
        uint64_t v53 = *v178;
        uint64_t v54 = (*v178)(v44, 1, v48);
        Swift::Int v52 = v44;
        if (v54 == 1)
        {
LABEL_38:
          outlined destroy of Any?(v52, &demangling cache variable for type metadata for MOSuggestionSheetAssetDateRange?);
          swift_release();
          swift_release();
          if (v181)
          {
            uint64_t v50 = v33;
            uint64_t v22 = v165;
            goto LABEL_49;
          }
          uint64_t v50 = v33 + 1;
          double v31 = v33;
          uint64_t v33 = v50;
          uint64_t v22 = v165;
          uint64_t v29 = v174;
          if (v50 >= v165) {
            goto LABEL_44;
          }
        }
        else
        {
          uint64_t v55 = outlined init with take of MOSuggestionSheetAssetDateRange((uint64_t)v164, v163);
          uint64_t v56 = v39(v55);
          if (!v56)
          {
            double v57 = v162;
            v177(v162, 1, 1, v180);
LABEL_37:
            outlined destroy of MOSuggestionSheetAssetDateRange(v163);
            Swift::Int v52 = v57;
            goto LABEL_38;
          }
          double v57 = v162;
          double v58 = v180;
          if (*(void *)(v56 + 16))
          {
            outlined init with copy of MOSuggestionSheetAssetDateRange(v56 + ((*(unsigned __int8 *)(v173 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v173 + 80)), v162);
            uint64_t v59 = 0;
          }
          else
          {
            uint64_t v59 = 1;
          }
          v177(v57, v59, 1, v58);
          swift_bridgeObjectRelease();
          if (v53(v57, 1, v58) == 1) {
            goto LABEL_37;
          }
          uint64_t v60 = v57;
          uint64_t v61 = v159;
          outlined init with take of MOSuggestionSheetAssetDateRange(v60, v159);
          unint64_t v62 = v163;
          unint64_t v63 = static Date.< infix(_:_:)();
          outlined destroy of MOSuggestionSheetAssetDateRange(v61);
          outlined destroy of MOSuggestionSheetAssetDateRange(v62);
          swift_release();
          swift_release();
          Swift::Int v49 = (char)v181;
          uint64_t v22 = v165;
          uint64_t v29 = v174;
          if ((v181 ^ v63)) {
            goto LABEL_42;
          }
LABEL_26:
          uint64_t v50 = v33 + 1;
          double v31 = v33;
          uint64_t v33 = v50;
          if (v50 >= v22) {
            goto LABEL_43;
          }
        }
      }
      swift_release();
      swift_release();
      if (v181)
      {
        uint64_t v50 = v33;
LABEL_49:
        uint64_t v29 = v174;
        goto LABEL_50;
      }
      Swift::Int v49 = 0;
LABEL_25:
      uint64_t v29 = v174;
      goto LABEL_26;
    }
LABEL_42:
    Swift::Int v49 = (char)v181;
    uint64_t v50 = v33;
LABEL_43:
    if ((v49 & 1) == 0)
    {
LABEL_44:
      uint64_t v2 = v160;
      uint64_t v27 = v161;
      goto LABEL_45;
    }
LABEL_50:
    double v30 = v167;
    uint64_t v27 = v161;
    if (v50 < v167) {
      goto LABEL_183;
    }
    uint64_t v2 = v160;
    if (v167 < v50)
    {
      uint64_t v64 = (uint64_t *)(v157 + 8 * v50);
      char v65 = v50;
      uint64_t v66 = v167;
      unint64_t v67 = (uint64_t *)(v29 + 8 * v167);
      do
      {
        if (v66 != --v65)
        {
          if (!v29) {
            goto LABEL_188;
          }
          uint64_t v68 = *v67;
          *unint64_t v67 = *v64;
          *uint64_t v64 = v68;
        }
        ++v66;
        --v64;
        ++v67;
      }
      while (v66 < v65);
    }
LABEL_58:
    if (v50 >= v22) {
      goto LABEL_93;
    }
    if (__OFSUB__(v50, v30)) {
      goto LABEL_181;
    }
    if (v50 - v30 >= v158) {
      goto LABEL_93;
    }
    if (__OFADD__(v30, v158)) {
      goto LABEL_184;
    }
    if (v30 + v158 >= v22) {
      uint64_t v69 = v22;
    }
    else {
      uint64_t v69 = v30 + v158;
    }
    if (v69 < v30)
    {
LABEL_185:
      __break(1u);
LABEL_186:
      __break(1u);
LABEL_187:
      __break(1u);
LABEL_188:
      __break(1u);
LABEL_189:
      __break(1u);
LABEL_190:
      Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    if (v50 == v69) {
      goto LABEL_93;
    }
    v161 = v27;
    v160 = v2;
    uint64_t v70 = (void *)(v157 + 8 * v50);
    v166 = v69;
    while (2)
    {
      char v71 = *(void *)(v29 + 8 * v50);
      uint64_t v72 = v30;
      v168 = v70;
      v177 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v50;
      while (1)
      {
        uint64_t v73 = *v70;
        uint64_t v74 = *(uint64_t (**)(uint64_t))(*(void *)v71 + 224);
        swift_retain();
        uint64_t v75 = swift_retain();
        uint64_t v76 = v74(v75);
        uint64_t v77 = swift_bridgeObjectRelease();
        if (!v76)
        {
          swift_release();
          swift_release();
          goto LABEL_69;
        }
        v181 = *(uint64_t (**)(uint64_t))(*(void *)v73 + 224);
        BOOL v78 = v181(v77);
        unint64_t v79 = swift_bridgeObjectRelease();
        if (!v78)
        {
          swift_release();
          swift_release();
          uint64_t v50 = (Swift::Int)v177;
          goto LABEL_85;
        }
        unint64_t v80 = v74(v79);
        if (!v80)
        {
          uint64_t v81 = v172;
          (*v179)(v172, 1, 1, v180);
LABEL_89:
          outlined destroy of Any?(v81, &demangling cache variable for type metadata for MOSuggestionSheetAssetDateRange?);
          swift_release();
          swift_release();
          uint64_t v29 = v174;
          uint64_t v50 = (Swift::Int)v177;
          goto LABEL_69;
        }
        if (*(void *)(v80 + 16))
        {
          uint64_t v81 = v172;
          uint64_t v82 = v173;
          outlined init with copy of MOSuggestionSheetAssetDateRange(v80 + ((*(unsigned __int8 *)(v173 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v173 + 80)), v172);
          uint64_t v83 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v82 + 56);
          uint64_t v84 = v81;
          id v85 = 0;
          uint64_t v86 = v180;
        }
        else
        {
          uint64_t v86 = v180;
          uint64_t v83 = *v179;
          uint64_t v81 = v172;
          uint64_t v84 = v172;
          id v85 = 1;
        }
        v175 = v83;
        v83(v84, v85, 1, v86);
        swift_bridgeObjectRelease();
        uint64_t v87 = *v178;
        if ((*v178)(v81, 1, v86) == 1) {
          goto LABEL_89;
        }
        BOOL v88 = outlined init with take of MOSuggestionSheetAssetDateRange(v81, v176);
        uint64_t v89 = v181(v88);
        if (!v89) {
          break;
        }
        char v90 = (uint64_t)v171;
        if (*(void *)(v89 + 16))
        {
          outlined init with copy of MOSuggestionSheetAssetDateRange(v89 + ((*(unsigned __int8 *)(v173 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v173 + 80)), (uint64_t)v171);
          id v91 = 0;
        }
        else
        {
          id v91 = 1;
        }
        uint64_t v50 = (Swift::Int)v177;
        uint64_t v92 = v180;
        v175(v90, v91, 1, v180);
        swift_bridgeObjectRelease();
        if (v87(v90, 1, v92) == 1) {
          goto LABEL_91;
        }
        uint64_t v93 = v170;
        outlined init with take of MOSuggestionSheetAssetDateRange(v90, v170);
        uint64_t v94 = v176;
        BOOL v95 = static Date.< infix(_:_:)();
        outlined destroy of MOSuggestionSheetAssetDateRange(v93);
        outlined destroy of MOSuggestionSheetAssetDateRange(v94);
        swift_release();
        swift_release();
        uint64_t v29 = v174;
        if ((v95 & 1) == 0) {
          goto LABEL_69;
        }
LABEL_85:
        if (!v29) {
          goto LABEL_186;
        }
        uint64_t v96 = *v70;
        char v71 = v70[1];
        void *v70 = v71;
        v70[1] = v96;
        --v70;
        if (v50 == ++v72) {
          goto LABEL_69;
        }
      }
      char v90 = (uint64_t)v171;
      v175((uint64_t)v171, 1, 1, v180);
      uint64_t v50 = (Swift::Int)v177;
LABEL_91:
      outlined destroy of MOSuggestionSheetAssetDateRange(v176);
      outlined destroy of Any?(v90, &demangling cache variable for type metadata for MOSuggestionSheetAssetDateRange?);
      swift_release();
      swift_release();
      uint64_t v29 = v174;
LABEL_69:
      ++v50;
      double v30 = v167;
      uint64_t v70 = v168 + 1;
      if (v50 != v166) {
        continue;
      }
      break;
    }
    uint64_t v50 = v166;
    uint64_t v2 = v160;
    uint64_t v27 = v161;
LABEL_93:
    if (v50 < v30) {
      goto LABEL_177;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v27 + 2) + 1, 1, v27);
    }
    uint64_t v98 = *((void *)v27 + 2);
    uint64_t v97 = *((void *)v27 + 3);
    uint64_t v99 = v98 + 1;
    if (v98 >= v97 >> 1) {
      uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v97 > 1), v98 + 1, 1, v27);
    }
    *((void *)v27 + 2) = v99;
    uint64_t v100 = v27 + 32;
    uint64_t v101 = &v27[16 * v98 + 32];
    *(void *)uint64_t v101 = v30;
    *((void *)v101 + 1) = v50;
    v177 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v50;
    if (v98)
    {
      while (2)
      {
        uint64_t v102 = v99 - 1;
        if (v99 >= 4)
        {
          uint64_t v107 = &v100[16 * v99];
          BOOL v108 = *((void *)v107 - 8);
          v109 = *((void *)v107 - 7);
          unint64_t v113 = __OFSUB__(v109, v108);
          uint64_t v110 = v109 - v108;
          if (v113) {
            goto LABEL_165;
          }
          uint64_t v112 = *((void *)v107 - 6);
          v111 = *((void *)v107 - 5);
          unint64_t v113 = __OFSUB__(v111, v112);
          uint64_t v105 = v111 - v112;
          unint64_t v106 = v113;
          if (v113) {
            goto LABEL_166;
          }
          uint64_t v114 = v99 - 2;
          unint64_t v115 = &v100[16 * v99 - 32];
          uint64_t v117 = *(void *)v115;
          uint64_t v116 = *((void *)v115 + 1);
          unint64_t v113 = __OFSUB__(v116, v117);
          uint64_t v118 = v116 - v117;
          if (v113) {
            goto LABEL_168;
          }
          unint64_t v113 = __OFADD__(v105, v118);
          unint64_t v119 = v105 + v118;
          if (v113) {
            goto LABEL_171;
          }
          if (v119 >= v110)
          {
            uint64_t v137 = &v100[16 * v102];
            v139 = *(void *)v137;
            Swift::tuple_tuple_Int_Int_Double_optional v138 = *((void *)v137 + 1);
            unint64_t v113 = __OFSUB__(v138, v139);
            uint64_t v140 = v138 - v139;
            if (v113) {
              goto LABEL_175;
            }
            uint64_t v130 = v105 < v140;
          }
          else
          {
LABEL_112:
            if (v106) {
              goto LABEL_167;
            }
            uint64_t v114 = v99 - 2;
            uint64_t v120 = &v100[16 * v99 - 32];
            uint64_t v122 = *(void *)v120;
            uint64_t v121 = *((void *)v120 + 1);
            Swift::Int v123 = __OFSUB__(v121, v122);
            uint64_t v124 = v121 - v122;
            uint64_t v125 = v123;
            if (v123) {
              goto LABEL_170;
            }
            uint64_t v126 = &v100[16 * v102];
            unint64_t v128 = *(void *)v126;
            uint64_t v127 = *((void *)v126 + 1);
            unint64_t v113 = __OFSUB__(v127, v128);
            uint64_t v129 = v127 - v128;
            if (v113) {
              goto LABEL_173;
            }
            if (__OFADD__(v124, v129)) {
              goto LABEL_174;
            }
            if (v124 + v129 < v105) {
              goto LABEL_124;
            }
            uint64_t v130 = v105 < v129;
          }
          if (v130) {
            uint64_t v102 = v114;
          }
        }
        else
        {
          if (v99 == 3)
          {
            uint64_t v104 = *((void *)v27 + 4);
            uint64_t v103 = *((void *)v27 + 5);
            unint64_t v113 = __OFSUB__(v103, v104);
            uint64_t v105 = v103 - v104;
            unint64_t v106 = v113;
            goto LABEL_112;
          }
          Swift::Int v131 = *((void *)v27 + 4);
          uint64_t v132 = *((void *)v27 + 5);
          unint64_t v113 = __OFSUB__(v132, v131);
          uint64_t v124 = v132 - v131;
          uint64_t v125 = v113;
LABEL_124:
          if (v125) {
            goto LABEL_169;
          }
          uint64_t v133 = &v100[16 * v102];
          uint64_t v135 = *(void *)v133;
          unint64_t v134 = *((void *)v133 + 1);
          unint64_t v113 = __OFSUB__(v134, v135);
          uint64_t v136 = v134 - v135;
          if (v113) {
            goto LABEL_172;
          }
          if (v136 < v124) {
            goto LABEL_141;
          }
        }
        unint64_t v141 = v102 - 1;
        if (v102 - 1 >= v99)
        {
          __break(1u);
LABEL_162:
          __break(1u);
LABEL_163:
          __break(1u);
LABEL_164:
          __break(1u);
LABEL_165:
          __break(1u);
LABEL_166:
          __break(1u);
LABEL_167:
          __break(1u);
LABEL_168:
          __break(1u);
LABEL_169:
          __break(1u);
LABEL_170:
          __break(1u);
LABEL_171:
          __break(1u);
LABEL_172:
          __break(1u);
LABEL_173:
          __break(1u);
LABEL_174:
          __break(1u);
LABEL_175:
          __break(1u);
LABEL_176:
          __break(1u);
LABEL_177:
          __break(1u);
LABEL_178:
          __break(1u);
LABEL_179:
          __break(1u);
LABEL_180:
          __break(1u);
LABEL_181:
          __break(1u);
LABEL_182:
          __break(1u);
LABEL_183:
          __break(1u);
LABEL_184:
          __break(1u);
          goto LABEL_185;
        }
        if (!v29) {
          goto LABEL_187;
        }
        uint64_t v142 = v29;
        uint64_t v143 = &v100[16 * v141];
        v144 = *(void *)v143;
        v145 = &v100[16 * v102];
        uint64_t v146 = *((void *)v145 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((uint64_t *)(v142 + 8 * *(void *)v143), (uint64_t *)(v142 + 8 * *(void *)v145), v142 + 8 * v146, v169);
        if (v2) {
          goto LABEL_156;
        }
        if (v146 < v144) {
          goto LABEL_162;
        }
        if (v102 > *((void *)v27 + 2)) {
          goto LABEL_163;
        }
        *(void *)uint64_t v143 = v144;
        *(void *)&v100[16 * v141 + 8] = v146;
        uint64_t v147 = *((void *)v27 + 2);
        if (v102 >= v147) {
          goto LABEL_164;
        }
        uint64_t v99 = v147 - 1;
        memmove(&v100[16 * v102], v145 + 16, 16 * (v147 - 1 - v102));
        *((void *)v27 + 2) = v147 - 1;
        uint64_t v29 = v174;
        if (v147 <= 2) {
          goto LABEL_141;
        }
        continue;
      }
    }
    uint64_t v99 = 1;
LABEL_141:
    uint64_t v22 = v165;
    uint64_t v28 = (Swift::Int)v177;
  }
  while ((uint64_t)v177 < v165);
LABEL_145:
  if (v99 >= 2)
  {
    uint64_t v148 = *v156;
    do
    {
      uint64_t v149 = v99 - 2;
      if (v99 < 2) {
        goto LABEL_176;
      }
      if (!v148) {
        goto LABEL_189;
      }
      uint64_t v150 = v27;
      uint64_t v151 = *(void *)&v27[16 * v149 + 32];
      v152 = *(void *)&v27[16 * v99 + 24];
      specialized _merge<A>(low:mid:high:buffer:by:)((uint64_t *)(v148 + 8 * v151), (uint64_t *)(v148 + 8 * *(void *)&v27[16 * v99 + 16]), v148 + 8 * v152, v169);
      if (v2) {
        break;
      }
      if (v152 < v151) {
        goto LABEL_178;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v150 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v27);
      }
      if (v149 >= *((void *)v150 + 2)) {
        goto LABEL_179;
      }
      long long v153 = &v150[16 * v149 + 32];
      *(void *)long long v153 = v151;
      *((void *)v153 + 1) = v152;
      long long v154 = *((void *)v150 + 2);
      if (v99 > v154) {
        goto LABEL_180;
      }
      memmove(&v150[16 * v99 + 16], &v150[16 * v99 + 32], 16 * (v154 - v99));
      uint64_t v27 = v150;
      *((void *)v150 + 2) = v154 - 1;
      uint64_t v99 = v154 - 1;
    }
    while (v154 > 2);
  }
LABEL_156:
  swift_bridgeObjectRelease();
LABEL_157:
  *(void *)((v184 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
  specialized Array._endMutation()();
  return swift_bridgeObjectRelease();
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  Swift::Int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  Swift::Int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned __int8 *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  Swift::Int v23;
  Swift::Int v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  Swift::Int v28;
  unsigned __int8 *v29;
  unsigned int v30;
  Swift::Int v31;
  unsigned __int8 *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  char v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t i;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  void *v103;
  Swift::Int v104;
  Swift::Int v105;
  uint64_t v106;
  unsigned __int8 *__dst;

  unint64_t v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_136;
    }
    if ((unint64_t)v3 >= 2)
    {
      id v85 = 0;
      uint64_t v86 = *a1;
      for (double i = 1; i != v3; ++i)
      {
        BOOL v88 = *(unsigned __int8 *)(v86 + 16 * i);
        uint64_t v89 = v85;
        do
        {
          if (v88 >= *(unsigned __int8 *)(v86 + v89)) {
            break;
          }
          if (!v86) {
            goto LABEL_140;
          }
          char v90 = v86 + v89;
          id v91 = *(void *)(v86 + v89 + 24);
          *(_OWORD *)(v86 + v89 + 16) = *(_OWORD *)(v86 + v89);
          *(unsigned char *)char v90 = v88;
          *(void *)(v90 + 8) = v91;
          v89 -= 16;
        }
        while (v89 != -16);
        v85 += 16;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_145;
  }
  uint64_t v6 = result;
  uint64_t v101 = a1;
  if (v3 < 2)
  {
    uint64_t v9 = _swiftEmptyArrayStorage;
    __dst = (unsigned __int8 *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      uint64_t v13 = _swiftEmptyArrayStorage[2];
      Swift::Int v12 = (char *)_swiftEmptyArrayStorage;
LABEL_102:
      uint64_t v92 = v12;
      uint64_t v103 = v9;
      if (v13 >= 2)
      {
        uint64_t v93 = *v101;
        do
        {
          uint64_t v94 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_131;
          }
          if (!v93) {
            goto LABEL_144;
          }
          BOOL v95 = v92;
          uint64_t v96 = *(void *)&v92[16 * v94 + 32];
          uint64_t v97 = *(void *)&v92[16 * v13 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((unsigned __int8 *)(v93 + 16 * v96), (unsigned __int8 *)(v93 + 16 * *(void *)&v92[16 * v13 + 16]), v93 + 16 * v97, __dst);
          if (v1) {
            break;
          }
          if (v97 < v96) {
            goto LABEL_132;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            BOOL v95 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v95);
          }
          if (v94 >= *((void *)v95 + 2)) {
            goto LABEL_133;
          }
          uint64_t v98 = &v95[16 * v94 + 32];
          *(void *)uint64_t v98 = v96;
          *((void *)v98 + 1) = v97;
          uint64_t v99 = *((void *)v95 + 2);
          if (v13 > v99) {
            goto LABEL_134;
          }
          memmove(&v95[16 * v13 + 16], &v95[16 * v13 + 32], 16 * (v99 - v13));
          uint64_t v92 = v95;
          *((void *)v95 + 2) = v99 - 1;
          uint64_t v13 = v99 - 1;
        }
        while (v99 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      v103[2] = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v103 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v7 = v5 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MOSuggestionAssetVisualSubType, Int));
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v8 + 16) = v7;
    uint64_t v103 = (void *)v8;
    __dst = (unsigned __int8 *)(v8 + 32);
  }
  uint64_t v10 = 0;
  uint64_t v11 = *a1;
  uint64_t v102 = *a1 + 32;
  uint64_t v100 = *a1 - 16;
  Swift::Int v12 = (char *)_swiftEmptyArrayStorage;
  uint64_t v104 = v6;
  uint64_t v105 = v3;
  unint64_t v106 = v11;
  while (1)
  {
    uint64_t v14 = v10++;
    if (v10 < v3)
    {
      uint64_t v15 = *(unsigned __int8 *)(v11 + 16 * v10);
      uint64_t v16 = 16 * v14;
      uint64_t v17 = *(unsigned __int8 *)(v11 + 16 * v14);
      uint64_t v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        unint64_t v18 = (unsigned __int8 *)(v102 + 16 * v14);
        uint64_t v19 = v15;
        while (1)
        {
          unint64_t v21 = *v18;
          v18 += 16;
          char v20 = v21;
          if (v15 < v17 == v21 >= v19) {
            break;
          }
          ++v10;
          uint64_t v19 = v20;
          if (v3 == v10)
          {
            uint64_t v10 = v3;
            break;
          }
        }
      }
      if (v15 < v17)
      {
        if (v10 < v14) {
          goto LABEL_137;
        }
        if (v14 < v10)
        {
          uint64_t v22 = 16 * v10;
          uint64_t v23 = v10;
          uint64_t v24 = v14;
          do
          {
            if (v24 != --v23)
            {
              if (!v11) {
                goto LABEL_143;
              }
              uint64_t v25 = v11 + v22;
              uint64_t v26 = *(unsigned char *)(v11 + v16);
              uint64_t v27 = *(void *)(v11 + v16 + 8);
              *(_OWORD *)(v11 + v16) = *(_OWORD *)(v11 + v22 - 16);
              *(unsigned char *)(v25 - 16) = v26;
              *(void *)(v25 - 8) = v27;
            }
            ++v24;
            v22 -= 16;
            v16 += 16;
          }
          while (v24 < v23);
        }
      }
    }
    if (v10 >= v3) {
      goto LABEL_46;
    }
    if (__OFSUB__(v10, v14)) {
      goto LABEL_135;
    }
    if (v10 - v14 >= v6) {
      goto LABEL_46;
    }
    uint64_t v28 = v14 + v6;
    if (__OFADD__(v14, v6)) {
      goto LABEL_138;
    }
    if (v28 >= v3) {
      uint64_t v28 = v3;
    }
    if (v28 < v14) {
      break;
    }
    if (v10 != v28)
    {
      uint64_t v29 = (unsigned __int8 *)(v100 + 16 * v10);
      do
      {
        double v30 = *(unsigned __int8 *)(v11 + 16 * v10);
        double v31 = v14;
        Swift::Int v32 = v29;
        do
        {
          if (v30 >= *v32) {
            break;
          }
          if (!v11) {
            goto LABEL_141;
          }
          uint64_t v33 = *((void *)v32 + 3);
          *((_OWORD *)v32 + 1) = *(_OWORD *)v32;
          *Swift::Int v32 = v30;
          *((void *)v32 + 1) = v33;
          v32 -= 16;
          ++v31;
        }
        while (v10 != v31);
        ++v10;
        v29 += 16;
      }
      while (v10 != v28);
      uint64_t v10 = v28;
    }
LABEL_46:
    if (v10 < v14) {
      goto LABEL_130;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      Swift::Int v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v12 + 2) + 1, 1, v12);
    }
    uint64_t v35 = *((void *)v12 + 2);
    Swift::Int v34 = *((void *)v12 + 3);
    uint64_t v13 = v35 + 1;
    uint64_t v11 = v106;
    if (v35 >= v34 >> 1)
    {
      uint64_t v84 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v34 > 1), v35 + 1, 1, v12);
      uint64_t v11 = v106;
      Swift::Int v12 = v84;
    }
    *((void *)v12 + 2) = v13;
    Swift::Int v36 = v12 + 32;
    uint64_t v37 = &v12[16 * v35 + 32];
    *(void *)uint64_t v37 = v14;
    *((void *)v37 + 1) = v10;
    if (v35)
    {
      while (1)
      {
        uint64_t v38 = v13 - 1;
        if (v13 >= 4)
        {
          Swift::Int v43 = &v36[16 * v13];
          uint64_t v44 = *((void *)v43 - 8);
          uint64_t v45 = *((void *)v43 - 7);
          Swift::Int v49 = __OFSUB__(v45, v44);
          unint64_t v46 = v45 - v44;
          if (v49) {
            goto LABEL_119;
          }
          Swift::Int v48 = *((void *)v43 - 6);
          Swift::Int v47 = *((void *)v43 - 5);
          Swift::Int v49 = __OFSUB__(v47, v48);
          uint64_t v41 = v47 - v48;
          uint64_t v42 = v49;
          if (v49) {
            goto LABEL_120;
          }
          uint64_t v50 = v13 - 2;
          uint64_t v51 = &v36[16 * v13 - 32];
          uint64_t v53 = *(void *)v51;
          Swift::Int v52 = *((void *)v51 + 1);
          Swift::Int v49 = __OFSUB__(v52, v53);
          uint64_t v54 = v52 - v53;
          if (v49) {
            goto LABEL_122;
          }
          Swift::Int v49 = __OFADD__(v41, v54);
          uint64_t v55 = v41 + v54;
          if (v49) {
            goto LABEL_125;
          }
          if (v55 >= v46)
          {
            uint64_t v73 = &v36[16 * v38];
            uint64_t v75 = *(void *)v73;
            uint64_t v74 = *((void *)v73 + 1);
            Swift::Int v49 = __OFSUB__(v74, v75);
            uint64_t v76 = v74 - v75;
            if (v49) {
              goto LABEL_129;
            }
            uint64_t v66 = v41 < v76;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            unint64_t v67 = *((void *)v12 + 4);
            uint64_t v68 = *((void *)v12 + 5);
            Swift::Int v49 = __OFSUB__(v68, v67);
            uint64_t v60 = v68 - v67;
            uint64_t v61 = v49;
            goto LABEL_77;
          }
          uint64_t v40 = *((void *)v12 + 4);
          BOOL v39 = *((void *)v12 + 5);
          Swift::Int v49 = __OFSUB__(v39, v40);
          uint64_t v41 = v39 - v40;
          uint64_t v42 = v49;
        }
        if (v42) {
          goto LABEL_121;
        }
        uint64_t v50 = v13 - 2;
        uint64_t v56 = &v36[16 * v13 - 32];
        double v58 = *(void *)v56;
        double v57 = *((void *)v56 + 1);
        uint64_t v59 = __OFSUB__(v57, v58);
        uint64_t v60 = v57 - v58;
        uint64_t v61 = v59;
        if (v59) {
          goto LABEL_124;
        }
        unint64_t v62 = &v36[16 * v38];
        uint64_t v64 = *(void *)v62;
        unint64_t v63 = *((void *)v62 + 1);
        Swift::Int v49 = __OFSUB__(v63, v64);
        char v65 = v63 - v64;
        if (v49) {
          goto LABEL_127;
        }
        if (__OFADD__(v60, v65)) {
          goto LABEL_128;
        }
        if (v60 + v65 >= v41)
        {
          uint64_t v66 = v41 < v65;
LABEL_83:
          if (v66) {
            uint64_t v38 = v50;
          }
          goto LABEL_85;
        }
LABEL_77:
        if (v61) {
          goto LABEL_123;
        }
        uint64_t v69 = &v36[16 * v38];
        char v71 = *(void *)v69;
        uint64_t v70 = *((void *)v69 + 1);
        Swift::Int v49 = __OFSUB__(v70, v71);
        uint64_t v72 = v70 - v71;
        if (v49) {
          goto LABEL_126;
        }
        if (v72 < v60) {
          goto LABEL_15;
        }
LABEL_85:
        uint64_t v77 = v38 - 1;
        if (v38 - 1 >= v13)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        if (!v11) {
          goto LABEL_142;
        }
        BOOL v78 = v12;
        unint64_t v79 = &v36[16 * v77];
        unint64_t v80 = *(void *)v79;
        uint64_t v81 = &v36[16 * v38];
        uint64_t v82 = *((void *)v81 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((unsigned __int8 *)(v11 + 16 * *(void *)v79), (unsigned __int8 *)(v11 + 16 * *(void *)v81), v11 + 16 * v82, __dst);
        if (v1) {
          goto LABEL_93;
        }
        if (v82 < v80) {
          goto LABEL_116;
        }
        if (v38 > *((void *)v78 + 2)) {
          goto LABEL_117;
        }
        *(void *)unint64_t v79 = v80;
        *(void *)&v36[16 * v77 + 8] = v82;
        uint64_t v83 = *((void *)v78 + 2);
        if (v38 >= v83) {
          goto LABEL_118;
        }
        Swift::Int v12 = v78;
        uint64_t v13 = v83 - 1;
        memmove(&v36[16 * v38], v81 + 16, 16 * (v83 - 1 - v38));
        *((void *)v78 + 2) = v83 - 1;
        uint64_t v11 = v106;
        if (v83 <= 2) {
          goto LABEL_15;
        }
      }
    }
    uint64_t v13 = 1;
LABEL_15:
    uint64_t v6 = v104;
    unint64_t v3 = v105;
    if (v10 >= v105)
    {
      uint64_t v9 = v103;
      goto LABEL_102;
    }
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  Swift::Int result;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  Swift::Int v9;
  char *v10;
  unint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  int v26;
  uint64_t v27;
  Swift::Int v28;
  Swift::Int v29;
  _OWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  long long v36;
  Swift::Int v37;
  uint64_t v38;
  Swift::Int v39;
  uint64_t v40;
  long long *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v47;
  long long v48;
  long long v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v79;
  uint64_t v80;
  char v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  Swift::Int v115;
  void *v116;
  Swift::Int v117;
  Swift::Int v118;
  Swift::Int v119;
  char *__dst;
  uint64_t v121;
  uint64_t v122;

  uint64_t v2 = v1;
  uint64_t v4 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v4);
  if (result >= v4)
  {
    if (v4 < 0) {
      goto LABEL_150;
    }
    if (v4) {
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v4, 1, a1);
    }
    return result;
  }
  if (v4 >= 0) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = v4 + 1;
  }
  if (v4 < -1) {
    goto LABEL_158;
  }
  unint64_t v115 = result;
  unint64_t v113 = a1;
  if (v4 < 2)
  {
    uint64_t v8 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v4 != 1)
    {
      uint64_t v11 = _swiftEmptyArrayStorage[2];
      uint64_t v10 = (char *)_swiftEmptyArrayStorage;
LABEL_115:
      uint64_t v116 = v8;
      if (v11 >= 2)
      {
        uint64_t v105 = *v113;
        do
        {
          unint64_t v106 = v11 - 2;
          if (v11 < 2) {
            goto LABEL_145;
          }
          if (!v105) {
            goto LABEL_157;
          }
          uint64_t v107 = *(void *)&v10[16 * v106 + 32];
          BOOL v108 = *(void *)&v10[16 * v11 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v105 + 32 * v107), (char *)(v105 + 32 * *(void *)&v10[16 * v11 + 16]), v105 + 32 * v108, __dst);
          if (v2) {
            break;
          }
          if (v108 < v107) {
            goto LABEL_146;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v10);
          }
          if (v106 >= *((void *)v10 + 2)) {
            goto LABEL_147;
          }
          v109 = &v10[16 * v106 + 32];
          *(void *)v109 = v107;
          *((void *)v109 + 1) = v108;
          uint64_t v110 = *((void *)v10 + 2);
          if (v11 > v110) {
            goto LABEL_148;
          }
          memmove(&v10[16 * v11 + 16], &v10[16 * v11 + 32], 16 * (v110 - v11));
          *((void *)v10 + 2) = v110 - 1;
          uint64_t v11 = v110 - 1;
        }
        while (v110 > 2);
      }
LABEL_126:
      swift_bridgeObjectRelease();
      v116[2] = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v121 = v1;
  }
  else
  {
    uint64_t v121 = v1;
    uint64_t v7 = v6 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MOAssetAndMediaType, Int));
    uint64_t v8 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
    void v8[2] = v7;
    __dst = (char *)(v8 + 4);
  }
  uint64_t v116 = v8;
  uint64_t v9 = 0;
  uint64_t v114 = *a1 + 64;
  uint64_t v112 = *a1 + 24;
  uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  unint64_t v119 = v4;
  uint64_t v122 = *a1;
  while (1)
  {
    Swift::Int v12 = v9++;
    if (v9 < v4)
    {
      uint64_t v13 = 32 * v12;
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v16 = v15;
      if (v14 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v16 == v17) {
        uint64_t v19 = 0;
      }
      else {
        uint64_t v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v9 = v12 + 2;
      if (v12 + 2 < v119)
      {
        char v20 = v114 + 32 * v12;
        while (1)
        {
          unint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v23 = v22;
          uint64_t v25 = v21 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v23 == v24;
          uint64_t v26 = v25 ? 0 : _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v19 ^ v26)) {
            break;
          }
          ++v9;
          v20 += 32;
          if (v119 == v9)
          {
            uint64_t v9 = v119;
            break;
          }
        }
      }
      if (v19)
      {
        if (v9 < v12) {
          goto LABEL_151;
        }
        if (v12 < v9)
        {
          uint64_t v27 = 32 * v9;
          uint64_t v28 = v9;
          uint64_t v29 = v12;
          do
          {
            if (v29 != --v28)
            {
              if (!v122) {
                goto LABEL_156;
              }
              double v30 = (_OWORD *)(v122 + v13);
              double v31 = v122 + v27;
              Swift::Int v32 = *(void *)(v122 + v13);
              uint64_t v33 = *(void *)(v122 + v13 + 8);
              Swift::Int v34 = *(unsigned char *)(v122 + v13 + 16);
              uint64_t v35 = *(void *)(v122 + v13 + 24);
              Swift::Int v36 = *(_OWORD *)(v122 + v27 - 16);
              uint64_t *v30 = *(_OWORD *)(v122 + v27 - 32);
              v30[1] = v36;
              *(void *)(v31 - 32) = v32;
              *(void *)(v31 - 24) = v33;
              *(unsigned char *)(v31 - 16) = v34;
              *(void *)(v31 - 8) = v35;
            }
            ++v29;
            v27 -= 32;
            v13 += 32;
          }
          while (v29 < v28);
        }
      }
      uint64_t v4 = v119;
    }
    if (v9 >= v4) {
      goto LABEL_66;
    }
    if (__OFSUB__(v9, v12)) {
      goto LABEL_149;
    }
    if (v9 - v12 >= v115) {
      goto LABEL_66;
    }
    if (__OFADD__(v12, v115)) {
      goto LABEL_152;
    }
    uint64_t v37 = v12 + v115 >= v4 ? v4 : v12 + v115;
    if (v37 < v12) {
      break;
    }
    if (v9 != v37)
    {
      v111 = v10;
      uint64_t v38 = v112 + 32 * v9;
      uint64_t v117 = v37;
      uint64_t v118 = v12;
      do
      {
        BOOL v39 = v12;
        uint64_t v40 = v38;
        while (1)
        {
          uint64_t v41 = (long long *)(v40 - 56);
          uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v44 = v43;
          if (v42 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v44 == v45) {
            break;
          }
          Swift::Int v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v47 & 1) == 0) {
            goto LABEL_55;
          }
          if (!v122) {
            goto LABEL_154;
          }
          Swift::Int v49 = *v41;
          Swift::Int v48 = *(_OWORD *)(v40 - 40);
          *(void *)(v40 - 32) = *(void *)v40;
          v40 -= 32;
          uint64_t v50 = *(void *)(v40 + 8);
          uint64_t v51 = *(void *)(v40 + 16);
          Swift::Int v52 = *(unsigned char *)(v40 + 24);
          v41[2] = v49;
          v41[3] = v48;
          *(void *)(v40 - 24) = v50;
          *(void *)(v40 - 16) = v51;
          *(unsigned char *)(v40 - 8) = v52;
          if (v9 == ++v39) {
            goto LABEL_55;
          }
        }
        swift_bridgeObjectRelease_n();
LABEL_55:
        ++v9;
        v38 += 32;
        Swift::Int v12 = v118;
      }
      while (v9 != v117);
      uint64_t v9 = v117;
      uint64_t v10 = v111;
    }
LABEL_66:
    if (v9 < v12) {
      goto LABEL_144;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v10 + 2) + 1, 1, v10);
    }
    uint64_t v54 = *((void *)v10 + 2);
    uint64_t v53 = *((void *)v10 + 3);
    uint64_t v11 = v54 + 1;
    uint64_t v55 = v122;
    if (v54 >= v53 >> 1)
    {
      uint64_t v104 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v53 > 1), v54 + 1, 1, v10);
      uint64_t v55 = v122;
      uint64_t v10 = v104;
    }
    *((void *)v10 + 2) = v11;
    uint64_t v56 = v10 + 32;
    double v57 = &v10[16 * v54 + 32];
    *(void *)double v57 = v12;
    *((void *)v57 + 1) = v9;
    if (v54)
    {
      while (1)
      {
        double v58 = v11 - 1;
        if (v11 >= 4)
        {
          unint64_t v63 = &v56[16 * v11];
          uint64_t v64 = *((void *)v63 - 8);
          char v65 = *((void *)v63 - 7);
          uint64_t v69 = __OFSUB__(v65, v64);
          uint64_t v66 = v65 - v64;
          if (v69) {
            goto LABEL_133;
          }
          uint64_t v68 = *((void *)v63 - 6);
          unint64_t v67 = *((void *)v63 - 5);
          uint64_t v69 = __OFSUB__(v67, v68);
          uint64_t v61 = v67 - v68;
          unint64_t v62 = v69;
          if (v69) {
            goto LABEL_134;
          }
          uint64_t v70 = v11 - 2;
          char v71 = &v56[16 * v11 - 32];
          uint64_t v73 = *(void *)v71;
          uint64_t v72 = *((void *)v71 + 1);
          uint64_t v69 = __OFSUB__(v72, v73);
          uint64_t v74 = v72 - v73;
          if (v69) {
            goto LABEL_136;
          }
          uint64_t v69 = __OFADD__(v61, v74);
          uint64_t v75 = v61 + v74;
          if (v69) {
            goto LABEL_139;
          }
          if (v75 >= v66)
          {
            uint64_t v93 = &v56[16 * v58];
            BOOL v95 = *(void *)v93;
            uint64_t v94 = *((void *)v93 + 1);
            uint64_t v69 = __OFSUB__(v94, v95);
            uint64_t v96 = v94 - v95;
            if (v69) {
              goto LABEL_143;
            }
            uint64_t v86 = v61 < v96;
            goto LABEL_103;
          }
        }
        else
        {
          if (v11 != 3)
          {
            uint64_t v87 = *((void *)v10 + 4);
            BOOL v88 = *((void *)v10 + 5);
            uint64_t v69 = __OFSUB__(v88, v87);
            unint64_t v80 = v88 - v87;
            uint64_t v81 = v69;
            goto LABEL_97;
          }
          uint64_t v60 = *((void *)v10 + 4);
          uint64_t v59 = *((void *)v10 + 5);
          uint64_t v69 = __OFSUB__(v59, v60);
          uint64_t v61 = v59 - v60;
          unint64_t v62 = v69;
        }
        if (v62) {
          goto LABEL_135;
        }
        uint64_t v70 = v11 - 2;
        uint64_t v76 = &v56[16 * v11 - 32];
        BOOL v78 = *(void *)v76;
        uint64_t v77 = *((void *)v76 + 1);
        unint64_t v79 = __OFSUB__(v77, v78);
        unint64_t v80 = v77 - v78;
        uint64_t v81 = v79;
        if (v79) {
          goto LABEL_138;
        }
        uint64_t v82 = &v56[16 * v58];
        uint64_t v84 = *(void *)v82;
        uint64_t v83 = *((void *)v82 + 1);
        uint64_t v69 = __OFSUB__(v83, v84);
        id v85 = v83 - v84;
        if (v69) {
          goto LABEL_141;
        }
        if (__OFADD__(v80, v85)) {
          goto LABEL_142;
        }
        if (v80 + v85 >= v61)
        {
          uint64_t v86 = v61 < v85;
LABEL_103:
          if (v86) {
            double v58 = v70;
          }
          goto LABEL_105;
        }
LABEL_97:
        if (v81) {
          goto LABEL_137;
        }
        uint64_t v89 = &v56[16 * v58];
        id v91 = *(void *)v89;
        char v90 = *((void *)v89 + 1);
        uint64_t v69 = __OFSUB__(v90, v91);
        uint64_t v92 = v90 - v91;
        if (v69) {
          goto LABEL_140;
        }
        if (v92 < v80) {
          goto LABEL_15;
        }
LABEL_105:
        uint64_t v97 = v58 - 1;
        if (v58 - 1 >= v11)
        {
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
          goto LABEL_153;
        }
        if (!v55) {
          goto LABEL_155;
        }
        uint64_t v98 = v10;
        uint64_t v99 = &v56[16 * v97];
        uint64_t v100 = *(void *)v99;
        uint64_t v101 = &v56[16 * v58];
        uint64_t v102 = *((void *)v101 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v55 + 32 * *(void *)v99), (char *)(v55 + 32 * *(void *)v101), v55 + 32 * v102, __dst);
        if (v121) {
          goto LABEL_126;
        }
        if (v102 < v100) {
          goto LABEL_130;
        }
        if (v58 > *((void *)v98 + 2)) {
          goto LABEL_131;
        }
        *(void *)uint64_t v99 = v100;
        *(void *)&v56[16 * v97 + 8] = v102;
        uint64_t v103 = *((void *)v98 + 2);
        if (v58 >= v103) {
          goto LABEL_132;
        }
        uint64_t v10 = v98;
        uint64_t v11 = v103 - 1;
        memmove(&v56[16 * v58], v101 + 16, 16 * (v103 - 1 - v58));
        *((void *)v10 + 2) = v103 - 1;
        uint64_t v55 = v122;
        if (v103 <= 2) {
          goto LABEL_15;
        }
      }
    }
    uint64_t v11 = 1;
LABEL_15:
    uint64_t v4 = v119;
    uint64_t v8 = v116;
    if (v9 >= v119)
    {
      uint64_t v2 = v121;
      goto LABEL_115;
    }
  }
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  Swift::Int v10;
  uint64_t v11;
  Swift::Int v12;
  Swift::Int v13;
  BOOL v14;
  BOOL v15;
  uint64_t *v16;
  Swift::Int v17;
  uint64_t v18;
  BOOL v19;
  uint64_t *v20;
  Swift::Int v21;
  Swift::Int v22;
  uint64_t *v23;
  uint64_t v24;
  Swift::Int v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  char v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  Swift::Int v80;
  uint64_t *v81;
  uint64_t *v82;
  BOOL v83;
  BOOL v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  Swift::Int v99;
  Swift::Int v100;
  Swift::Int v101;
  char *v102;
  Swift::Int v103;
  char *v104;
  Swift::Int v105;
  uint64_t *__dst;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;

  unint64_t v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_142;
    }
    if (v3) {
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_151;
  }
  uint64_t v6 = result;
  uint64_t v97 = a1;
  if (v3 < 2)
  {
    uint64_t v9 = (char *)_swiftEmptyArrayStorage;
    uint64_t v110 = (uint64_t)_swiftEmptyArrayStorage;
    __dst = (uint64_t *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v3 != 1)
    {
      uint64_t v29 = _swiftEmptyArrayStorage[2];
LABEL_104:
      if (v29 >= 2)
      {
        uint64_t v87 = *v97;
        do
        {
          BOOL v88 = v29 - 2;
          if (v29 < 2) {
            goto LABEL_137;
          }
          if (!v87) {
            goto LABEL_150;
          }
          uint64_t v89 = (uint64_t)v9;
          char v90 = *(void *)&v9[16 * v88 + 32];
          id v91 = *(void *)&v9[16 * v29 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((uint64_t *)(v87 + 8 * v90), (uint64_t *)(v87 + 8 * *(void *)&v9[16 * v29 + 16]), v87 + 8 * v91, __dst);
          if (v1) {
            break;
          }
          if (v91 < v90) {
            goto LABEL_138;
          }
          if (swift_isUniquelyReferenced_nonNull_native()) {
            uint64_t v92 = (char *)v89;
          }
          else {
            uint64_t v92 = specialized _ArrayBuffer._consumeAndCreateNew()(v89);
          }
          if (v88 >= *((void *)v92 + 2)) {
            goto LABEL_139;
          }
          uint64_t v93 = &v92[16 * v88 + 32];
          *(void *)uint64_t v93 = v90;
          *((void *)v93 + 1) = v91;
          uint64_t v94 = *((void *)v92 + 2);
          if (v29 > v94) {
            goto LABEL_140;
          }
          BOOL v95 = v92;
          memmove(&v92[16 * v29 + 16], &v92[16 * v29 + 32], 16 * (v94 - v29));
          uint64_t v9 = v95;
          *((void *)v95 + 2) = v94 - 1;
          uint64_t v29 = v94 - 1;
        }
        while (v94 > 2);
      }
LABEL_119:
      swift_bridgeObjectRelease();
LABEL_120:
      *(void *)((v110 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v7 = v5 >> 1;
    type metadata accessor for MOSuggestionAssetReference(0);
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10) = v7;
    __dst = (uint64_t *)((v8 & 0xFFFFFFFFFFFFFF8) + 32);
    uint64_t v110 = v8;
  }
  uint64_t v10 = 0;
  uint64_t v11 = *a1;
  uint64_t v98 = *a1 + 16;
  uint64_t v96 = *a1 - 8;
  uint64_t v9 = (char *)_swiftEmptyArrayStorage;
  uint64_t v105 = v3;
  uint64_t v101 = v6;
  uint64_t v107 = *a1;
  while (1)
  {
    Swift::Int v12 = v10;
    uint64_t v13 = v10 + 1;
    if (v10 + 1 < v3)
    {
      uint64_t v102 = v9;
      v109 = *(void *)(v11 + 8 * v13);
      BOOL v108 = *(void *)(v11 + 8 * v10);
      swift_retain();
      swift_retain();
      uint64_t v14 = closure #1 in MOEventBundle.typeSortedAssetReferencesForInterstitial.getter(&v109, &v108);
      if (v1)
      {
LABEL_118:
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        goto LABEL_120;
      }
      uint64_t v15 = v14;
      swift_release();
      swift_release();
      uint64_t v13 = v12 + 2;
      if (v12 + 2 < v3)
      {
        uint64_t v99 = v12;
        uint64_t v16 = (uint64_t *)(v98 + 8 * v12);
        while (1)
        {
          uint64_t v17 = v13;
          unint64_t v18 = *(v16 - 1);
          v109 = *v16;
          BOOL v108 = v18;
          swift_retain();
          swift_retain();
          uint64_t v19 = closure #1 in MOEventBundle.typeSortedAssetReferencesForInterstitial.getter(&v109, &v108);
          swift_release();
          swift_release();
          if ((v15 ^ v19)) {
            break;
          }
          uint64_t v13 = v17 + 1;
          ++v16;
          unint64_t v3 = v105;
          if (v105 == v17 + 1)
          {
            uint64_t v13 = v105;
            uint64_t v6 = v101;
            goto LABEL_21;
          }
        }
        unint64_t v3 = v105;
        uint64_t v6 = v101;
        uint64_t v13 = v17;
LABEL_21:
        Swift::Int v12 = v99;
      }
      uint64_t v9 = v102;
      uint64_t v11 = v107;
      if (v15)
      {
        if (v13 < v12) {
          goto LABEL_146;
        }
        if (v12 < v13)
        {
          char v20 = (uint64_t *)(v96 + 8 * v13);
          unint64_t v21 = v13;
          uint64_t v22 = v12;
          uint64_t v23 = (uint64_t *)(v107 + 8 * v12);
          do
          {
            if (v22 != --v21)
            {
              if (!v107) {
                goto LABEL_149;
              }
              uint64_t v24 = *v23;
              *uint64_t v23 = *v20;
              *char v20 = v24;
            }
            ++v22;
            --v20;
            ++v23;
          }
          while (v22 < v21);
        }
      }
    }
    if (v13 >= v3) {
      goto LABEL_40;
    }
    if (__OFSUB__(v13, v12)) {
      goto LABEL_143;
    }
    if (v13 - v12 >= v6) {
      goto LABEL_40;
    }
    if (__OFADD__(v12, v6)) {
      goto LABEL_144;
    }
    uint64_t v25 = v12 + v6 >= v3 ? v3 : v12 + v6;
    if (v25 < v12) {
      break;
    }
    if (v13 != v25)
    {
      uint64_t v104 = v9;
      BOOL v78 = (uint64_t *)(v96 + 8 * v13);
      uint64_t v100 = v12;
      do
      {
        unint64_t v79 = *(void *)(v11 + 8 * v13);
        unint64_t v80 = v12;
        uint64_t v81 = v78;
        uint64_t v82 = v78;
        while (1)
        {
          v109 = v79;
          BOOL v108 = *v82;
          swift_retain();
          swift_retain();
          uint64_t v83 = closure #1 in MOEventBundle.typeSortedAssetReferencesForInterstitial.getter(&v109, &v108);
          if (v1) {
            goto LABEL_118;
          }
          uint64_t v84 = v83;
          swift_release();
          swift_release();
          if (!v84) {
            break;
          }
          uint64_t v11 = v107;
          if (!v107) {
            goto LABEL_148;
          }
          id v85 = *v82;
          unint64_t v79 = v82[1];
          *uint64_t v82 = v79;
          v82[1] = v85;
          --v82;
          if (v13 == ++v80) {
            goto LABEL_98;
          }
        }
        uint64_t v11 = v107;
LABEL_98:
        ++v13;
        BOOL v78 = v81 + 1;
        Swift::Int v12 = v100;
      }
      while (v13 != v25);
      uint64_t v13 = v25;
      uint64_t v9 = v104;
      if (v25 < v100) {
        goto LABEL_141;
      }
      goto LABEL_41;
    }
LABEL_40:
    if (v13 < v12) {
      goto LABEL_141;
    }
LABEL_41:
    uint64_t v26 = v9;
    if (swift_isUniquelyReferenced_nonNull_native()) {
      uint64_t v9 = v26;
    }
    else {
      uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v26 + 2) + 1, 1, v26);
    }
    uint64_t v28 = *((void *)v9 + 2);
    uint64_t v27 = *((void *)v9 + 3);
    uint64_t v29 = v28 + 1;
    uint64_t v11 = v107;
    if (v28 >= v27 >> 1)
    {
      uint64_t v86 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v27 > 1), v28 + 1, 1, v9);
      uint64_t v11 = v107;
      uint64_t v9 = v86;
    }
    *((void *)v9 + 2) = v29;
    double v30 = v9 + 32;
    double v31 = &v9[16 * v28 + 32];
    *(void *)double v31 = v12;
    *((void *)v31 + 1) = v13;
    uint64_t v103 = v13;
    if (v28)
    {
      while (1)
      {
        Swift::Int v32 = v29 - 1;
        if (v29 >= 4)
        {
          uint64_t v37 = &v30[16 * v29];
          uint64_t v38 = *((void *)v37 - 8);
          BOOL v39 = *((void *)v37 - 7);
          Swift::Int v43 = __OFSUB__(v39, v38);
          uint64_t v40 = v39 - v38;
          if (v43) {
            goto LABEL_126;
          }
          uint64_t v42 = *((void *)v37 - 6);
          uint64_t v41 = *((void *)v37 - 5);
          Swift::Int v43 = __OFSUB__(v41, v42);
          uint64_t v35 = v41 - v42;
          Swift::Int v36 = v43;
          if (v43) {
            goto LABEL_127;
          }
          uint64_t v44 = v29 - 2;
          uint64_t v45 = &v30[16 * v29 - 32];
          Swift::Int v47 = *(void *)v45;
          unint64_t v46 = *((void *)v45 + 1);
          Swift::Int v43 = __OFSUB__(v46, v47);
          Swift::Int v48 = v46 - v47;
          if (v43) {
            goto LABEL_129;
          }
          Swift::Int v43 = __OFADD__(v35, v48);
          Swift::Int v49 = v35 + v48;
          if (v43) {
            goto LABEL_132;
          }
          if (v49 >= v40)
          {
            unint64_t v67 = &v30[16 * v32];
            uint64_t v69 = *(void *)v67;
            uint64_t v68 = *((void *)v67 + 1);
            Swift::Int v43 = __OFSUB__(v68, v69);
            uint64_t v70 = v68 - v69;
            if (v43) {
              goto LABEL_136;
            }
            uint64_t v60 = v35 < v70;
            goto LABEL_77;
          }
        }
        else
        {
          if (v29 != 3)
          {
            uint64_t v61 = *((void *)v9 + 4);
            unint64_t v62 = *((void *)v9 + 5);
            Swift::Int v43 = __OFSUB__(v62, v61);
            uint64_t v54 = v62 - v61;
            uint64_t v55 = v43;
            goto LABEL_71;
          }
          Swift::Int v34 = *((void *)v9 + 4);
          uint64_t v33 = *((void *)v9 + 5);
          Swift::Int v43 = __OFSUB__(v33, v34);
          uint64_t v35 = v33 - v34;
          Swift::Int v36 = v43;
        }
        if (v36) {
          goto LABEL_128;
        }
        uint64_t v44 = v29 - 2;
        uint64_t v50 = &v30[16 * v29 - 32];
        Swift::Int v52 = *(void *)v50;
        uint64_t v51 = *((void *)v50 + 1);
        uint64_t v53 = __OFSUB__(v51, v52);
        uint64_t v54 = v51 - v52;
        uint64_t v55 = v53;
        if (v53) {
          goto LABEL_131;
        }
        uint64_t v56 = &v30[16 * v32];
        double v58 = *(void *)v56;
        double v57 = *((void *)v56 + 1);
        Swift::Int v43 = __OFSUB__(v57, v58);
        uint64_t v59 = v57 - v58;
        if (v43) {
          goto LABEL_134;
        }
        if (__OFADD__(v54, v59)) {
          goto LABEL_135;
        }
        if (v54 + v59 >= v35)
        {
          uint64_t v60 = v35 < v59;
LABEL_77:
          if (v60) {
            Swift::Int v32 = v44;
          }
          goto LABEL_79;
        }
LABEL_71:
        if (v55) {
          goto LABEL_130;
        }
        unint64_t v63 = &v30[16 * v32];
        char v65 = *(void *)v63;
        uint64_t v64 = *((void *)v63 + 1);
        Swift::Int v43 = __OFSUB__(v64, v65);
        uint64_t v66 = v64 - v65;
        if (v43) {
          goto LABEL_133;
        }
        if (v66 < v54) {
          goto LABEL_88;
        }
LABEL_79:
        char v71 = v32 - 1;
        if (v32 - 1 >= v29)
        {
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
          goto LABEL_145;
        }
        if (!v11) {
          goto LABEL_147;
        }
        uint64_t v72 = v9;
        uint64_t v73 = &v30[16 * v71];
        uint64_t v74 = *(void *)v73;
        uint64_t v75 = &v30[16 * v32];
        uint64_t v76 = *((void *)v75 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((uint64_t *)(v11 + 8 * *(void *)v73), (uint64_t *)(v11 + 8 * *(void *)v75), v11 + 8 * v76, __dst);
        if (v1) {
          goto LABEL_119;
        }
        if (v76 < v74) {
          goto LABEL_123;
        }
        if (v32 > *((void *)v72 + 2)) {
          goto LABEL_124;
        }
        *(void *)uint64_t v73 = v74;
        *(void *)&v30[16 * v71 + 8] = v76;
        uint64_t v77 = *((void *)v72 + 2);
        if (v32 >= v77) {
          goto LABEL_125;
        }
        uint64_t v29 = v77 - 1;
        memmove(&v30[16 * v32], v75 + 16, 16 * (v77 - 1 - v32));
        uint64_t v9 = v72;
        *((void *)v72 + 2) = v77 - 1;
        uint64_t v11 = v107;
        if (v77 <= 2) {
          goto LABEL_88;
        }
      }
    }
    uint64_t v29 = 1;
LABEL_88:
    uint64_t v10 = v103;
    unint64_t v3 = v105;
    uint64_t v6 = v101;
    if (v103 >= v105) {
      goto LABEL_104;
    }
  }
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  Swift::Int result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  Swift::Int v15;
  Swift::Int v16;
  uint64_t v17;
  void *v18;
  id v19;
  char *v20;
  id v21;
  char *v22;
  void (*v23)(char *, uint64_t);
  char *v24;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  uint64_t v28;
  void *v29;
  id v30;
  char *v31;
  id v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t *v36;
  Swift::Int v37;
  Swift::Int v38;
  uint64_t *v39;
  uint64_t v40;
  Swift::Int v41;
  void *v42;
  Swift::Int v43;
  uint64_t v44;
  Swift::Int v45;
  uint64_t v46;
  void *v47;
  id v48;
  char *v49;
  id v50;
  char *v51;
  void (*v52)(char *, uint64_t);
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  char v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  Swift::Int v122;
  Swift::Int v123;
  Swift::Int v124;
  Swift::Int v125;
  void *v126;
  void *v127;
  uint64_t v128;
  void (**v129)(char *, uint64_t);
  char *v130;
  char *v131;
  uint64_t v132;
  Swift::Int v133;
  uint64_t v134;
  uint64_t v135;

  uint64_t v132 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v132 - 8);
  unint64_t v3 = __chkstk_darwin(v132);
  Swift::Int v131 = (char *)&v117 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v130 = (char *)&v117 - v5;
  uint64_t v6 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v6);
  if (result >= v6)
  {
    if (v6 < 0) {
      goto LABEL_134;
    }
    if (v6) {
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v6, 1, a1);
    }
    return result;
  }
  if (v6 >= 0) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = v6 + 1;
  }
  if (v6 < -1) {
    goto LABEL_142;
  }
  uint64_t v122 = result;
  if (v6 < 2)
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
    uint64_t v135 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v127 = (void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v6 != 1)
    {
      uint64_t v14 = _swiftEmptyArrayStorage[2];
LABEL_100:
      BOOL v108 = v128;
      if (v14 >= 2)
      {
        v109 = *a1;
        do
        {
          uint64_t v110 = v14 - 2;
          if (v14 < 2) {
            goto LABEL_129;
          }
          if (!v109) {
            goto LABEL_141;
          }
          v111 = v11;
          uint64_t v112 = v11 + 32;
          unint64_t v113 = *(void *)&v11[16 * v110 + 32];
          uint64_t v114 = *(void *)&v11[16 * v14 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)(v109 + 8 * v113, (void *)(v109 + 8 * *(void *)&v112[16 * v14 - 16]), (void *)(v109 + 8 * v114), v127);
          if (v108) {
            break;
          }
          if (v114 < v113) {
            goto LABEL_130;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            v111 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v111);
          }
          if (v110 >= *((void *)v111 + 2)) {
            goto LABEL_131;
          }
          unint64_t v115 = &v111[16 * v110 + 32];
          *(void *)unint64_t v115 = v113;
          *((void *)v115 + 1) = v114;
          uint64_t v116 = *((void *)v111 + 2);
          if (v14 > v116) {
            goto LABEL_132;
          }
          uint64_t v11 = v111;
          memmove(&v111[16 * v14 + 16], &v111[16 * v14 + 32], 16 * (v116 - v14));
          *((void *)v111 + 2) = v116 - 1;
          uint64_t v14 = v116 - 1;
        }
        while (v116 > 2);
      }
LABEL_111:
      swift_bridgeObjectRelease();
      *(void *)((v135 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v9 = v8 >> 1;
    type metadata accessor for MOSuggestionCollectionViewCellViewModel();
    uint64_t v10 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) = v9;
    uint64_t v127 = (void *)((v10 & 0xFFFFFFFFFFFFFF8) + 32);
    uint64_t v135 = v10;
  }
  Swift::Int v12 = 0;
  uint64_t v13 = *a1;
  uint64_t v129 = (void (**)(char *, uint64_t))(v2 + 8);
  uint64_t v120 = v13 + 16;
  uint64_t v118 = a1;
  unint64_t v119 = v13 - 8;
  uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  uint64_t v125 = v6;
  unint64_t v134 = v13;
  while (1)
  {
    uint64_t v15 = v12;
    uint64_t v16 = v12 + 1;
    uint64_t v124 = v12;
    if (v12 + 1 < v6)
    {
      uint64_t v17 = *(void *)(v13 + 8 * v12);
      unint64_t v18 = *(void **)(*(void *)(v13 + 8 * v16) + 16);
      swift_retain();
      swift_retain();
      uint64_t v19 = [v18 displayStartDate];
      char v20 = v130;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      unint64_t v21 = [*(id *)(v17 + 16) displayStartDate];
      uint64_t v22 = v131;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      LODWORD(v133) = static Date.< infix(_:_:)();
      uint64_t v23 = *v129;
      uint64_t v24 = v22;
      uint64_t v25 = v132;
      (*v129)(v24, v132);
      v23(v20, v25);
      swift_release();
      uint64_t v6 = v125;
      swift_release();
      uint64_t v16 = v15 + 2;
      if (v15 + 2 < v6)
      {
        uint64_t v121 = v11;
        uint64_t v26 = v120 + 8 * v15;
        while (1)
        {
          uint64_t v27 = v16;
          uint64_t v28 = *(void *)(v26 - 8);
          uint64_t v29 = *(void **)(*(void *)v26 + 16);
          swift_retain();
          swift_retain();
          double v30 = [v29 displayStartDate];
          double v31 = v130;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          Swift::Int v32 = [*(id *)(v28 + 16) displayStartDate];
          uint64_t v33 = v131;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          LODWORD(v32) = static Date.< infix(_:_:)();
          Swift::Int v34 = v33;
          uint64_t v35 = v132;
          v23(v34, v132);
          v23(v31, v35);
          swift_release();
          swift_release();
          if ((v133 ^ v32)) {
            break;
          }
          ++v16;
          v26 += 8;
          uint64_t v6 = v125;
          if (v125 == v27 + 1)
          {
            uint64_t v16 = v125;
            uint64_t v11 = v121;
            goto LABEL_22;
          }
        }
        uint64_t v11 = v121;
        uint64_t v6 = v125;
LABEL_22:
        uint64_t v15 = v124;
      }
      uint64_t v13 = v134;
      if (v133)
      {
        if (v16 < v15) {
          goto LABEL_135;
        }
        if (v15 < v16)
        {
          Swift::Int v36 = (uint64_t *)(v119 + 8 * v16);
          uint64_t v37 = v16;
          uint64_t v38 = v15;
          BOOL v39 = (uint64_t *)(v134 + 8 * v15);
          do
          {
            if (v38 != --v37)
            {
              if (!v13) {
                goto LABEL_140;
              }
              uint64_t v40 = *v39;
              void *v39 = *v36;
              *Swift::Int v36 = v40;
            }
            ++v38;
            --v36;
            ++v39;
          }
          while (v38 < v37);
        }
      }
    }
    if (v16 >= v6) {
      goto LABEL_50;
    }
    if (__OFSUB__(v16, v15)) {
      goto LABEL_133;
    }
    if (v16 - v15 >= v122) {
      goto LABEL_50;
    }
    if (__OFADD__(v15, v122)) {
      goto LABEL_136;
    }
    uint64_t v41 = v15 + v122 >= v6 ? v6 : v15 + v122;
    if (v41 < v15) {
      break;
    }
    if (v16 != v41)
    {
      uint64_t v121 = v11;
      uint64_t v42 = (void *)(v119 + 8 * v16);
      Swift::Int v123 = v41;
      do
      {
        uint64_t v44 = *(void *)(v13 + 8 * v16);
        uint64_t v45 = v15;
        uint64_t v126 = v42;
        uint64_t v133 = v16;
        while (1)
        {
          unint64_t v46 = *v42;
          Swift::Int v47 = *(void **)(v44 + 16);
          swift_retain();
          swift_retain();
          Swift::Int v48 = [v47 displayStartDate];
          Swift::Int v49 = v130;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v50 = [*(id *)(v46 + 16) displayStartDate];
          uint64_t v51 = v131;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          LOBYTE(v50) = static Date.< infix(_:_:)();
          Swift::Int v52 = *v129;
          uint64_t v53 = v51;
          uint64_t v54 = v132;
          (*v129)(v53, v132);
          v52(v49, v54);
          swift_release();
          swift_release();
          if ((v50 & 1) == 0) {
            break;
          }
          Swift::Int v43 = v133;
          uint64_t v13 = v134;
          if (!v134) {
            goto LABEL_138;
          }
          uint64_t v55 = *v42;
          uint64_t v44 = v42[1];
          *uint64_t v42 = v44;
          v42[1] = v55;
          --v42;
          if (v43 == ++v45) {
            goto LABEL_43;
          }
        }
        Swift::Int v43 = v133;
        uint64_t v13 = v134;
LABEL_43:
        uint64_t v16 = v43 + 1;
        uint64_t v42 = v126 + 1;
        uint64_t v15 = v124;
      }
      while (v16 != v123);
      uint64_t v16 = v123;
      uint64_t v11 = v121;
    }
LABEL_50:
    if (v16 < v15) {
      goto LABEL_128;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    double v57 = *((void *)v11 + 2);
    uint64_t v56 = *((void *)v11 + 3);
    uint64_t v14 = v57 + 1;
    uint64_t v13 = v134;
    if (v57 >= v56 >> 1)
    {
      uint64_t v107 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v56 > 1), v57 + 1, 1, v11);
      uint64_t v13 = v134;
      uint64_t v11 = v107;
    }
    *((void *)v11 + 2) = v14;
    double v58 = v11 + 32;
    uint64_t v59 = &v11[16 * v57 + 32];
    *(void *)uint64_t v59 = v15;
    *((void *)v59 + 1) = v16;
    uint64_t v133 = v16;
    if (v57)
    {
      while (1)
      {
        uint64_t v60 = v14 - 1;
        if (v14 >= 4)
        {
          char v65 = &v58[16 * v14];
          uint64_t v66 = *((void *)v65 - 8);
          unint64_t v67 = *((void *)v65 - 7);
          char v71 = __OFSUB__(v67, v66);
          uint64_t v68 = v67 - v66;
          if (v71) {
            goto LABEL_117;
          }
          uint64_t v70 = *((void *)v65 - 6);
          uint64_t v69 = *((void *)v65 - 5);
          char v71 = __OFSUB__(v69, v70);
          unint64_t v63 = v69 - v70;
          uint64_t v64 = v71;
          if (v71) {
            goto LABEL_118;
          }
          uint64_t v72 = v14 - 2;
          uint64_t v73 = &v58[16 * v14 - 32];
          uint64_t v75 = *(void *)v73;
          uint64_t v74 = *((void *)v73 + 1);
          char v71 = __OFSUB__(v74, v75);
          uint64_t v76 = v74 - v75;
          if (v71) {
            goto LABEL_120;
          }
          char v71 = __OFADD__(v63, v76);
          uint64_t v77 = v63 + v76;
          if (v71) {
            goto LABEL_123;
          }
          if (v77 >= v68)
          {
            BOOL v95 = &v58[16 * v60];
            uint64_t v97 = *(void *)v95;
            uint64_t v96 = *((void *)v95 + 1);
            char v71 = __OFSUB__(v96, v97);
            uint64_t v98 = v96 - v97;
            if (v71) {
              goto LABEL_127;
            }
            BOOL v88 = v63 < v98;
            goto LABEL_87;
          }
        }
        else
        {
          if (v14 != 3)
          {
            uint64_t v89 = *((void *)v11 + 4);
            char v90 = *((void *)v11 + 5);
            char v71 = __OFSUB__(v90, v89);
            uint64_t v82 = v90 - v89;
            uint64_t v83 = v71;
            goto LABEL_81;
          }
          unint64_t v62 = *((void *)v11 + 4);
          uint64_t v61 = *((void *)v11 + 5);
          char v71 = __OFSUB__(v61, v62);
          unint64_t v63 = v61 - v62;
          uint64_t v64 = v71;
        }
        if (v64) {
          goto LABEL_119;
        }
        uint64_t v72 = v14 - 2;
        BOOL v78 = &v58[16 * v14 - 32];
        unint64_t v80 = *(void *)v78;
        unint64_t v79 = *((void *)v78 + 1);
        uint64_t v81 = __OFSUB__(v79, v80);
        uint64_t v82 = v79 - v80;
        uint64_t v83 = v81;
        if (v81) {
          goto LABEL_122;
        }
        uint64_t v84 = &v58[16 * v60];
        uint64_t v86 = *(void *)v84;
        id v85 = *((void *)v84 + 1);
        char v71 = __OFSUB__(v85, v86);
        uint64_t v87 = v85 - v86;
        if (v71) {
          goto LABEL_125;
        }
        if (__OFADD__(v82, v87)) {
          goto LABEL_126;
        }
        if (v82 + v87 >= v63)
        {
          BOOL v88 = v63 < v87;
LABEL_87:
          if (v88) {
            uint64_t v60 = v72;
          }
          goto LABEL_89;
        }
LABEL_81:
        if (v83) {
          goto LABEL_121;
        }
        id v91 = &v58[16 * v60];
        uint64_t v93 = *(void *)v91;
        uint64_t v92 = *((void *)v91 + 1);
        char v71 = __OFSUB__(v92, v93);
        uint64_t v94 = v92 - v93;
        if (v71) {
          goto LABEL_124;
        }
        if (v94 < v82) {
          goto LABEL_14;
        }
LABEL_89:
        uint64_t v99 = v60 - 1;
        if (v60 - 1 >= v14)
        {
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
          goto LABEL_137;
        }
        if (!v13) {
          goto LABEL_139;
        }
        uint64_t v100 = v11;
        uint64_t v101 = &v58[16 * v99];
        uint64_t v102 = *(void *)v101;
        uint64_t v103 = &v58[16 * v60];
        uint64_t v104 = *((void *)v103 + 1);
        uint64_t v105 = v128;
        specialized _merge<A>(low:mid:high:buffer:by:)(v13 + 8 * *(void *)v101, (void *)(v13 + 8 * *(void *)v103), (void *)(v13 + 8 * v104), v127);
        unint64_t v128 = v105;
        if (v105) {
          goto LABEL_111;
        }
        if (v104 < v102) {
          goto LABEL_114;
        }
        if (v60 > *((void *)v100 + 2)) {
          goto LABEL_115;
        }
        *(void *)uint64_t v101 = v102;
        *(void *)&v58[16 * v99 + 8] = v104;
        unint64_t v106 = *((void *)v100 + 2);
        if (v60 >= v106) {
          goto LABEL_116;
        }
        uint64_t v11 = v100;
        uint64_t v14 = v106 - 1;
        memmove(&v58[16 * v60], v103 + 16, 16 * (v106 - 1 - v60));
        *((void *)v100 + 2) = v106 - 1;
        uint64_t v13 = v134;
        if (v106 <= 2) {
          goto LABEL_14;
        }
      }
    }
    uint64_t v14 = 1;
LABEL_14:
    uint64_t v6 = v125;
    Swift::Int v12 = v133;
    if (v133 >= v125)
    {
      a1 = v118;
      goto LABEL_100;
    }
  }
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t *v2;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  double v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  id v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  double v34;
  void *v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  id v39;
  void *v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  double v44;
  uint64_t *v45;
  Swift::Int v46;
  Swift::Int v47;
  uint64_t *v48;
  uint64_t v49;
  Swift::Int v50;
  uint64_t *v51;
  uint64_t v52;
  Swift::Int v53;
  uint64_t *v54;
  uint64_t v55;
  void *v56;
  id v57;
  double v58;
  void *v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  id v63;
  void *v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  double v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  char v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  BOOL v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  unint64_t v119;
  char *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  unint64_t v126;
  char *v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  Swift::Int v131;
  Swift::Int v132;
  Swift::Int v133;
  Swift::Int v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  unsigned char v138[40];
  long long v139;
  long long v140;
  uint64_t v141;

  uint64_t v2 = a1;
  unint64_t v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_187;
    }
    if (v3) {
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, v2);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_195;
  }
  uint64_t v6 = result;
  uint64_t v136 = v1;
  unint64_t v128 = v2;
  if (v3 < 2)
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
    unint64_t v141 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v135 = (char *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v3 != 1)
    {
      uint64_t v13 = _swiftEmptyArrayStorage[2];
LABEL_153:
      if (v13 >= 2)
      {
        uint64_t v121 = *v128;
        do
        {
          uint64_t v122 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_182;
          }
          if (!v121) {
            goto LABEL_194;
          }
          Swift::Int v123 = *(void *)&v10[16 * v122 + 32];
          uint64_t v124 = *(void *)&v10[16 * v13 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v121 + 8 * v123), (char *)(v121 + 8 * *(void *)&v10[16 * v13 + 16]), v121 + 8 * v124, v135);
          if (v136) {
            break;
          }
          if (v124 < v123) {
            goto LABEL_183;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v10);
          }
          if (v122 >= *((void *)v10 + 2)) {
            goto LABEL_184;
          }
          uint64_t v125 = &v10[16 * v122 + 32];
          *(void *)uint64_t v125 = v123;
          *((void *)v125 + 1) = v124;
          uint64_t v126 = *((void *)v10 + 2);
          if (v13 > v126) {
            goto LABEL_185;
          }
          memmove(&v10[16 * v13 + 16], &v10[16 * v13 + 32], 16 * (v126 - v13));
          *((void *)v10 + 2) = v126 - 1;
          uint64_t v13 = v126 - 1;
        }
        while (v126 > 2);
      }
LABEL_164:
      swift_bridgeObjectRelease();
      *(void *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v7 = v2;
    uint64_t v8 = v5 >> 1;
    type metadata accessor for MOSuggestionCollectionViewCellViewModel();
    uint64_t v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) = v8;
    uint64_t v2 = v7;
    uint64_t v135 = (char *)((v9 & 0xFFFFFFFFFFFFFF8) + 32);
    unint64_t v141 = v9;
  }
  uint64_t v11 = 0;
  Swift::Int v12 = *v2;
  uint64_t v130 = *v2 + 16;
  Swift::Int v131 = v6;
  uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  uint64_t v129 = *v2 - 8;
  unint64_t v134 = v3;
  uint64_t v137 = *v2;
  while (2)
  {
    uint64_t v14 = v11++;
    if (v11 >= v3) {
      goto LABEL_68;
    }
    uint64_t v15 = *(void *)(v12 + 8 * v11);
    uint64_t v16 = *(void *)(v12 + 8 * v14);
    uint64_t v17 = *(void **)(v15 + 16);
    swift_retain();
    swift_retain();
    unint64_t v18 = [v17 rankingDictionary];
    uint64_t v19 = 0.0;
    if (v18)
    {
      char v20 = v18;
      unint64_t v21 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      AnyHashable.init<A>(_:)();
      if (*(void *)(v21 + 16)
        && (uint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v138), (v23 & 1) != 0))
      {
        outlined init with copy of Any(*(void *)(v21 + 56) + 32 * v22, (uint64_t)&v139);
      }
      else
      {
        v139 = 0u;
        uint64_t v140 = 0u;
      }
      swift_bridgeObjectRelease();
      outlined destroy of AnyHashable((uint64_t)v138);
      if (*((void *)&v140 + 1))
      {
        if (swift_dynamicCast()) {
          uint64_t v19 = 1.67436463e243;
        }
      }
      else
      {
        outlined destroy of Any?((uint64_t)&v139, &demangling cache variable for type metadata for Any?);
      }
    }
    uint64_t v24 = [*(id *)(v16 + 16) rankingDictionary];
    if (!v24) {
      goto LABEL_34;
    }
    uint64_t v25 = v24;
    uint64_t v26 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    AnyHashable.init<A>(_:)();
    if (*(void *)(v26 + 16) && (uint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v138), (v28 & 1) != 0))
    {
      outlined init with copy of Any(*(void *)(v26 + 56) + 32 * v27, (uint64_t)&v139);
    }
    else
    {
      v139 = 0u;
      uint64_t v140 = 0u;
    }
    swift_bridgeObjectRelease();
    outlined destroy of AnyHashable((uint64_t)v138);
    if (!*((void *)&v140 + 1))
    {
      outlined destroy of Any?((uint64_t)&v139, &demangling cache variable for type metadata for Any?);
      goto LABEL_34;
    }
    if ((swift_dynamicCast() & 1) == 0)
    {
LABEL_34:
      swift_release();
      swift_release();
      uint64_t v29 = 0.0;
      goto LABEL_35;
    }
    uint64_t v29 = 1.67436463e243;
    swift_release();
    swift_release();
LABEL_35:
    uint64_t v11 = v14 + 2;
    Swift::Int v12 = v137;
    if (v14 + 2 >= v3) {
      goto LABEL_60;
    }
    double v30 = v130 + 8 * v14;
    do
    {
      double v31 = *(void *)(v30 - 8);
      Swift::Int v32 = *(void **)(*(void *)v30 + 16);
      swift_retain();
      swift_retain();
      uint64_t v33 = [v32 rankingDictionary];
      Swift::Int v34 = 0.0;
      if (v33)
      {
        uint64_t v35 = v33;
        Swift::Int v36 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

        AnyHashable.init<A>(_:)();
        if (*(void *)(v36 + 16)
          && (uint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v138), (v38 & 1) != 0))
        {
          outlined init with copy of Any(*(void *)(v36 + 56) + 32 * v37, (uint64_t)&v139);
        }
        else
        {
          v139 = 0u;
          uint64_t v140 = 0u;
        }
        swift_bridgeObjectRelease();
        outlined destroy of AnyHashable((uint64_t)v138);
        if (*((void *)&v140 + 1))
        {
          if (swift_dynamicCast()) {
            Swift::Int v34 = 1.67436463e243;
          }
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v139, &demangling cache variable for type metadata for Any?);
        }
      }
      BOOL v39 = [*(id *)(v31 + 16) rankingDictionary];
      if (v39)
      {
        uint64_t v40 = v39;
        uint64_t v41 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

        AnyHashable.init<A>(_:)();
        if (*(void *)(v41 + 16)
          && (uint64_t v42 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v138), (v43 & 1) != 0))
        {
          outlined init with copy of Any(*(void *)(v41 + 56) + 32 * v42, (uint64_t)&v139);
        }
        else
        {
          v139 = 0u;
          uint64_t v140 = 0u;
        }
        unint64_t v3 = v134;
        swift_bridgeObjectRelease();
        outlined destroy of AnyHashable((uint64_t)v138);
        if (*((void *)&v140 + 1))
        {
          if (swift_dynamicCast())
          {
            uint64_t v44 = 1.67436463e243;
            swift_release();
            swift_release();
            goto LABEL_57;
          }
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v139, &demangling cache variable for type metadata for Any?);
        }
        swift_release();
        swift_release();
        uint64_t v44 = 0.0;
      }
      else
      {
        swift_release();
        swift_release();
        uint64_t v44 = 0.0;
        unint64_t v3 = v134;
      }
LABEL_57:
      Swift::Int v12 = v137;
      if (v29 < v19 == v44 >= v34) {
        goto LABEL_60;
      }
      ++v11;
      v30 += 8;
    }
    while (v3 != v11);
    uint64_t v11 = v3;
LABEL_60:
    if (v29 < v19)
    {
      if (v11 < v14) {
        goto LABEL_188;
      }
      if (v14 < v11)
      {
        uint64_t v45 = (uint64_t *)(v129 + 8 * v11);
        unint64_t v46 = v11;
        Swift::Int v47 = v14;
        Swift::Int v48 = (uint64_t *)(v12 + 8 * v14);
        do
        {
          if (v47 != --v46)
          {
            if (!v12) {
              goto LABEL_193;
            }
            Swift::Int v49 = *v48;
            double *v48 = *v45;
            *uint64_t v45 = v49;
          }
          ++v47;
          --v45;
          ++v48;
        }
        while (v47 < v46);
      }
    }
LABEL_68:
    if (v11 >= v3) {
      goto LABEL_104;
    }
    if (__OFSUB__(v11, v14)) {
      goto LABEL_186;
    }
    if (v11 - v14 >= v131) {
      goto LABEL_104;
    }
    if (__OFADD__(v14, v131)) {
      goto LABEL_189;
    }
    if (v14 + v131 >= v3) {
      uint64_t v50 = v3;
    }
    else {
      uint64_t v50 = v14 + v131;
    }
    if (v50 >= v14)
    {
      if (v11 == v50) {
        goto LABEL_104;
      }
      uint64_t v132 = v50;
      uint64_t v133 = v14;
      uint64_t v127 = v10;
      uint64_t v51 = (uint64_t *)(v129 + 8 * v11);
      while (2)
      {
        Swift::Int v52 = *(void *)(v12 + 8 * v11);
        uint64_t v53 = v133;
        uint64_t v54 = v51;
        while (2)
        {
          uint64_t v55 = *v54;
          uint64_t v56 = *(void **)(v52 + 16);
          swift_retain();
          swift_retain();
          double v57 = [v56 rankingDictionary];
          double v58 = 0.0;
          if (v57)
          {
            uint64_t v59 = v57;
            uint64_t v60 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

            AnyHashable.init<A>(_:)();
            if (*(void *)(v60 + 16)
              && (uint64_t v61 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v138), (v62 & 1) != 0))
            {
              outlined init with copy of Any(*(void *)(v60 + 56) + 32 * v61, (uint64_t)&v139);
            }
            else
            {
              v139 = 0u;
              uint64_t v140 = 0u;
            }
            swift_bridgeObjectRelease();
            outlined destroy of AnyHashable((uint64_t)v138);
            if (*((void *)&v140 + 1))
            {
              if (swift_dynamicCast()) {
                double v58 = 1.67436463e243;
              }
            }
            else
            {
              outlined destroy of Any?((uint64_t)&v139, &demangling cache variable for type metadata for Any?);
            }
          }
          unint64_t v63 = [*(id *)(v55 + 16) rankingDictionary];
          if (v63)
          {
            uint64_t v64 = v63;
            char v65 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

            AnyHashable.init<A>(_:)();
            if (*(void *)(v65 + 16)
              && (uint64_t v66 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v138), (v67 & 1) != 0))
            {
              outlined init with copy of Any(*(void *)(v65 + 56) + 32 * v66, (uint64_t)&v139);
            }
            else
            {
              v139 = 0u;
              uint64_t v140 = 0u;
            }
            swift_bridgeObjectRelease();
            outlined destroy of AnyHashable((uint64_t)v138);
            if (*((void *)&v140 + 1))
            {
              if (swift_dynamicCast())
              {
                uint64_t v68 = 1.67436463e243;
                swift_release();
                swift_release();
                goto LABEL_99;
              }
            }
            else
            {
              outlined destroy of Any?((uint64_t)&v139, &demangling cache variable for type metadata for Any?);
            }
          }
          swift_release();
          swift_release();
          uint64_t v68 = 0.0;
LABEL_99:
          Swift::Int v12 = v137;
          if (v68 >= v58) {
            break;
          }
          if (!v137) {
            goto LABEL_191;
          }
          uint64_t v69 = *v54;
          Swift::Int v52 = v54[1];
          *uint64_t v54 = v52;
          v54[1] = v69;
          --v54;
          if (v11 != ++v53) {
            continue;
          }
          break;
        }
        ++v11;
        ++v51;
        if (v11 != v132) {
          continue;
        }
        break;
      }
      uint64_t v11 = v132;
      uint64_t v10 = v127;
      uint64_t v14 = v133;
LABEL_104:
      if (v11 < v14) {
        goto LABEL_181;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v10 + 2) + 1, 1, v10);
      }
      char v71 = *((void *)v10 + 2);
      uint64_t v70 = *((void *)v10 + 3);
      uint64_t v13 = v71 + 1;
      Swift::Int v12 = v137;
      if (v71 >= v70 >> 1)
      {
        uint64_t v120 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v70 > 1), v71 + 1, 1, v10);
        Swift::Int v12 = v137;
        uint64_t v10 = v120;
      }
      *((void *)v10 + 2) = v13;
      uint64_t v72 = v10 + 32;
      uint64_t v73 = &v10[16 * v71 + 32];
      *(void *)uint64_t v73 = v14;
      *((void *)v73 + 1) = v11;
      if (v71)
      {
        while (2)
        {
          uint64_t v74 = v13 - 1;
          if (v13 >= 4)
          {
            unint64_t v79 = &v72[16 * v13];
            unint64_t v80 = *((void *)v79 - 8);
            uint64_t v81 = *((void *)v79 - 7);
            id v85 = __OFSUB__(v81, v80);
            uint64_t v82 = v81 - v80;
            if (v85) {
              goto LABEL_170;
            }
            uint64_t v84 = *((void *)v79 - 6);
            uint64_t v83 = *((void *)v79 - 5);
            id v85 = __OFSUB__(v83, v84);
            uint64_t v77 = v83 - v84;
            BOOL v78 = v85;
            if (v85) {
              goto LABEL_171;
            }
            uint64_t v86 = v13 - 2;
            uint64_t v87 = &v72[16 * v13 - 32];
            uint64_t v89 = *(void *)v87;
            BOOL v88 = *((void *)v87 + 1);
            id v85 = __OFSUB__(v88, v89);
            char v90 = v88 - v89;
            if (v85) {
              goto LABEL_173;
            }
            id v85 = __OFADD__(v77, v90);
            id v91 = v77 + v90;
            if (v85) {
              goto LABEL_176;
            }
            if (v91 >= v82)
            {
              v109 = &v72[16 * v74];
              v111 = *(void *)v109;
              uint64_t v110 = *((void *)v109 + 1);
              id v85 = __OFSUB__(v110, v111);
              uint64_t v112 = v110 - v111;
              if (v85) {
                goto LABEL_180;
              }
              uint64_t v102 = v77 < v112;
            }
            else
            {
LABEL_123:
              if (v78) {
                goto LABEL_172;
              }
              uint64_t v86 = v13 - 2;
              uint64_t v92 = &v72[16 * v13 - 32];
              uint64_t v94 = *(void *)v92;
              uint64_t v93 = *((void *)v92 + 1);
              BOOL v95 = __OFSUB__(v93, v94);
              uint64_t v96 = v93 - v94;
              uint64_t v97 = v95;
              if (v95) {
                goto LABEL_175;
              }
              uint64_t v98 = &v72[16 * v74];
              uint64_t v100 = *(void *)v98;
              uint64_t v99 = *((void *)v98 + 1);
              id v85 = __OFSUB__(v99, v100);
              uint64_t v101 = v99 - v100;
              if (v85) {
                goto LABEL_178;
              }
              if (__OFADD__(v96, v101)) {
                goto LABEL_179;
              }
              if (v96 + v101 < v77) {
                goto LABEL_135;
              }
              uint64_t v102 = v77 < v101;
            }
            if (v102) {
              uint64_t v74 = v86;
            }
          }
          else
          {
            if (v13 == 3)
            {
              uint64_t v76 = *((void *)v10 + 4);
              uint64_t v75 = *((void *)v10 + 5);
              id v85 = __OFSUB__(v75, v76);
              uint64_t v77 = v75 - v76;
              BOOL v78 = v85;
              goto LABEL_123;
            }
            uint64_t v103 = *((void *)v10 + 4);
            uint64_t v104 = *((void *)v10 + 5);
            id v85 = __OFSUB__(v104, v103);
            uint64_t v96 = v104 - v103;
            uint64_t v97 = v85;
LABEL_135:
            if (v97) {
              goto LABEL_174;
            }
            uint64_t v105 = &v72[16 * v74];
            uint64_t v107 = *(void *)v105;
            unint64_t v106 = *((void *)v105 + 1);
            id v85 = __OFSUB__(v106, v107);
            BOOL v108 = v106 - v107;
            if (v85) {
              goto LABEL_177;
            }
            if (v108 < v96) {
              goto LABEL_14;
            }
          }
          unint64_t v113 = v74 - 1;
          if (v74 - 1 >= v13)
          {
            __break(1u);
LABEL_167:
            __break(1u);
LABEL_168:
            __break(1u);
LABEL_169:
            __break(1u);
LABEL_170:
            __break(1u);
LABEL_171:
            __break(1u);
LABEL_172:
            __break(1u);
LABEL_173:
            __break(1u);
LABEL_174:
            __break(1u);
LABEL_175:
            __break(1u);
LABEL_176:
            __break(1u);
LABEL_177:
            __break(1u);
LABEL_178:
            __break(1u);
LABEL_179:
            __break(1u);
LABEL_180:
            __break(1u);
LABEL_181:
            __break(1u);
LABEL_182:
            __break(1u);
LABEL_183:
            __break(1u);
LABEL_184:
            __break(1u);
LABEL_185:
            __break(1u);
LABEL_186:
            __break(1u);
LABEL_187:
            __break(1u);
LABEL_188:
            __break(1u);
LABEL_189:
            __break(1u);
            goto LABEL_190;
          }
          if (!v12) {
            goto LABEL_192;
          }
          uint64_t v114 = v10;
          unint64_t v115 = &v72[16 * v113];
          uint64_t v116 = *(void *)v115;
          uint64_t v117 = &v72[16 * v74];
          uint64_t v118 = *((void *)v117 + 1);
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v12 + 8 * *(void *)v115), (char *)(v12 + 8 * *(void *)v117), v12 + 8 * v118, v135);
          if (v136) {
            goto LABEL_164;
          }
          if (v118 < v116) {
            goto LABEL_167;
          }
          if (v74 > *((void *)v114 + 2)) {
            goto LABEL_168;
          }
          *(void *)unint64_t v115 = v116;
          *(void *)&v72[16 * v113 + 8] = v118;
          unint64_t v119 = *((void *)v114 + 2);
          if (v74 >= v119) {
            goto LABEL_169;
          }
          uint64_t v10 = v114;
          uint64_t v13 = v119 - 1;
          memmove(&v72[16 * v74], v117 + 16, 16 * (v119 - 1 - v74));
          *((void *)v114 + 2) = v119 - 1;
          Swift::Int v12 = v137;
          if (v119 <= 2) {
            goto LABEL_14;
          }
          continue;
        }
      }
      uint64_t v13 = 1;
LABEL_14:
      unint64_t v3 = v134;
      if (v11 >= v134) {
        goto LABEL_153;
      }
      continue;
    }
    break;
  }
LABEL_190:
  __break(1u);
LABEL_191:
  __break(1u);
LABEL_192:
  __break(1u);
LABEL_193:
  __break(1u);
LABEL_194:
  __break(1u);
LABEL_195:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  Swift::Int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  Swift::Int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::Int v28;
  void *v29;
  uint64_t v30;
  Swift::Int v31;
  void *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  char v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t i;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  unint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  void *v102;
  Swift::Int v103;
  Swift::Int v104;
  uint64_t v105;
  char *__dst;

  unint64_t v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_136;
    }
    if ((unint64_t)v3 >= 2)
    {
      id v85 = 0;
      uint64_t v86 = *a1;
      for (double i = 1; i != v3; ++i)
      {
        BOOL v88 = *(void *)(v86 + 16 * i + 8);
        uint64_t v89 = v85;
        do
        {
          char v90 = v86 + v89;
          if (v88 >= *(void *)(v86 + v89 + 8)) {
            break;
          }
          if (!v86) {
            goto LABEL_140;
          }
          id v91 = *(void *)(v90 + 16);
          *(_OWORD *)(v90 + 16) = *(_OWORD *)v90;
          *(void *)char v90 = v91;
          *(void *)(v90 + 8) = v88;
          v89 -= 16;
        }
        while (v89 != -16);
        v85 += 16;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_145;
  }
  uint64_t v6 = result;
  uint64_t v100 = a1;
  if (v3 < 2)
  {
    uint64_t v9 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      uint64_t v13 = _swiftEmptyArrayStorage[2];
      Swift::Int v12 = (char *)_swiftEmptyArrayStorage;
LABEL_102:
      uint64_t v92 = v12;
      uint64_t v102 = v9;
      if (v13 >= 2)
      {
        uint64_t v93 = *v100;
        do
        {
          uint64_t v94 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_131;
          }
          if (!v93) {
            goto LABEL_144;
          }
          BOOL v95 = v92;
          uint64_t v96 = *(void *)&v92[16 * v94 + 32];
          uint64_t v97 = *(void *)&v92[16 * v13 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v93 + 16 * v96), (char *)(v93 + 16 * *(void *)&v92[16 * v13 + 16]), v93 + 16 * v97, __dst);
          if (v1) {
            break;
          }
          if (v97 < v96) {
            goto LABEL_132;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            BOOL v95 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v95);
          }
          if (v94 >= *((void *)v95 + 2)) {
            goto LABEL_133;
          }
          uint64_t v98 = &v95[16 * v94 + 32];
          *(void *)uint64_t v98 = v96;
          *((void *)v98 + 1) = v97;
          uint64_t v99 = *((void *)v95 + 2);
          if (v13 > v99) {
            goto LABEL_134;
          }
          memmove(&v95[16 * v13 + 16], &v95[16 * v13 + 32], 16 * (v99 - v13));
          uint64_t v92 = v95;
          *((void *)v95 + 2) = v99 - 1;
          uint64_t v13 = v99 - 1;
        }
        while (v99 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      v102[2] = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v102 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v7 = v5 >> 1;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (MOSuggestionAsset, Int));
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v8 + 16) = v7;
    uint64_t v102 = (void *)v8;
    __dst = (char *)(v8 + 32);
  }
  uint64_t v10 = 0;
  uint64_t v11 = *a1;
  uint64_t v101 = *a1 + 40;
  Swift::Int v12 = (char *)_swiftEmptyArrayStorage;
  uint64_t v103 = v6;
  uint64_t v104 = v3;
  uint64_t v105 = v11;
  while (1)
  {
    uint64_t v14 = v10++;
    if (v10 < v3)
    {
      uint64_t v15 = *(void *)(v11 + 16 * v10 + 8);
      uint64_t v16 = *(void *)(v11 + 16 * v14 + 8);
      uint64_t v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        uint64_t v17 = (uint64_t *)(v101 + 16 * v14);
        unint64_t v18 = v15;
        while (1)
        {
          char v20 = *v17;
          v17 += 2;
          uint64_t v19 = v20;
          if (v15 < v16 == v20 >= v18) {
            break;
          }
          ++v10;
          unint64_t v18 = v19;
          if (v3 == v10)
          {
            uint64_t v10 = v3;
            break;
          }
        }
      }
      if (v15 < v16)
      {
        if (v10 < v14) {
          goto LABEL_137;
        }
        if (v14 < v10)
        {
          unint64_t v21 = 16 * v10;
          uint64_t v22 = 16 * v14;
          uint64_t v23 = v10;
          uint64_t v24 = v14;
          do
          {
            if (v24 != --v23)
            {
              if (!v11) {
                goto LABEL_143;
              }
              uint64_t v25 = v11 + v21;
              uint64_t v26 = *(void *)(v11 + v22);
              uint64_t v27 = *(void *)(v11 + v22 + 8);
              *(_OWORD *)(v11 + v22) = *(_OWORD *)(v11 + v21 - 16);
              *(void *)(v25 - 16) = v26;
              *(void *)(v25 - 8) = v27;
            }
            ++v24;
            v21 -= 16;
            v22 += 16;
          }
          while (v24 < v23);
        }
      }
    }
    if (v10 >= v3) {
      goto LABEL_46;
    }
    if (__OFSUB__(v10, v14)) {
      goto LABEL_135;
    }
    if (v10 - v14 >= v6) {
      goto LABEL_46;
    }
    uint64_t v28 = v14 + v6;
    if (__OFADD__(v14, v6)) {
      goto LABEL_138;
    }
    if (v28 >= v3) {
      uint64_t v28 = v3;
    }
    if (v28 < v14) {
      break;
    }
    if (v10 != v28)
    {
      uint64_t v29 = (void *)(v11 + 16 * v10);
      do
      {
        double v30 = *(void *)(v11 + 16 * v10 + 8);
        double v31 = v14;
        Swift::Int v32 = v29;
        do
        {
          if (v30 >= *(v32 - 1)) {
            break;
          }
          if (!v11) {
            goto LABEL_141;
          }
          uint64_t v33 = *v32;
          *(_OWORD *)Swift::Int v32 = *((_OWORD *)v32 - 1);
          *(v32 - 1) = v30;
          *(v32 - 2) = v33;
          v32 -= 2;
          ++v31;
        }
        while (v10 != v31);
        ++v10;
        v29 += 2;
      }
      while (v10 != v28);
      uint64_t v10 = v28;
    }
LABEL_46:
    if (v10 < v14) {
      goto LABEL_130;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      Swift::Int v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v12 + 2) + 1, 1, v12);
    }
    uint64_t v35 = *((void *)v12 + 2);
    Swift::Int v34 = *((void *)v12 + 3);
    uint64_t v13 = v35 + 1;
    uint64_t v11 = v105;
    if (v35 >= v34 >> 1)
    {
      uint64_t v84 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v34 > 1), v35 + 1, 1, v12);
      uint64_t v11 = v105;
      Swift::Int v12 = v84;
    }
    *((void *)v12 + 2) = v13;
    Swift::Int v36 = v12 + 32;
    uint64_t v37 = &v12[16 * v35 + 32];
    *(void *)uint64_t v37 = v14;
    *((void *)v37 + 1) = v10;
    if (v35)
    {
      while (1)
      {
        uint64_t v38 = v13 - 1;
        if (v13 >= 4)
        {
          Swift::Int v43 = &v36[16 * v13];
          uint64_t v44 = *((void *)v43 - 8);
          uint64_t v45 = *((void *)v43 - 7);
          Swift::Int v49 = __OFSUB__(v45, v44);
          unint64_t v46 = v45 - v44;
          if (v49) {
            goto LABEL_119;
          }
          Swift::Int v48 = *((void *)v43 - 6);
          Swift::Int v47 = *((void *)v43 - 5);
          Swift::Int v49 = __OFSUB__(v47, v48);
          uint64_t v41 = v47 - v48;
          uint64_t v42 = v49;
          if (v49) {
            goto LABEL_120;
          }
          uint64_t v50 = v13 - 2;
          uint64_t v51 = &v36[16 * v13 - 32];
          uint64_t v53 = *(void *)v51;
          Swift::Int v52 = *((void *)v51 + 1);
          Swift::Int v49 = __OFSUB__(v52, v53);
          uint64_t v54 = v52 - v53;
          if (v49) {
            goto LABEL_122;
          }
          Swift::Int v49 = __OFADD__(v41, v54);
          uint64_t v55 = v41 + v54;
          if (v49) {
            goto LABEL_125;
          }
          if (v55 >= v46)
          {
            uint64_t v73 = &v36[16 * v38];
            uint64_t v75 = *(void *)v73;
            uint64_t v74 = *((void *)v73 + 1);
            Swift::Int v49 = __OFSUB__(v74, v75);
            uint64_t v76 = v74 - v75;
            if (v49) {
              goto LABEL_129;
            }
            uint64_t v66 = v41 < v76;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            unint64_t v67 = *((void *)v12 + 4);
            uint64_t v68 = *((void *)v12 + 5);
            Swift::Int v49 = __OFSUB__(v68, v67);
            uint64_t v60 = v68 - v67;
            uint64_t v61 = v49;
            goto LABEL_77;
          }
          uint64_t v40 = *((void *)v12 + 4);
          BOOL v39 = *((void *)v12 + 5);
          Swift::Int v49 = __OFSUB__(v39, v40);
          uint64_t v41 = v39 - v40;
          uint64_t v42 = v49;
        }
        if (v42) {
          goto LABEL_121;
        }
        uint64_t v50 = v13 - 2;
        uint64_t v56 = &v36[16 * v13 - 32];
        double v58 = *(void *)v56;
        double v57 = *((void *)v56 + 1);
        uint64_t v59 = __OFSUB__(v57, v58);
        uint64_t v60 = v57 - v58;
        uint64_t v61 = v59;
        if (v59) {
          goto LABEL_124;
        }
        unint64_t v62 = &v36[16 * v38];
        uint64_t v64 = *(void *)v62;
        unint64_t v63 = *((void *)v62 + 1);
        Swift::Int v49 = __OFSUB__(v63, v64);
        char v65 = v63 - v64;
        if (v49) {
          goto LABEL_127;
        }
        if (__OFADD__(v60, v65)) {
          goto LABEL_128;
        }
        if (v60 + v65 >= v41)
        {
          uint64_t v66 = v41 < v65;
LABEL_83:
          if (v66) {
            uint64_t v38 = v50;
          }
          goto LABEL_85;
        }
LABEL_77:
        if (v61) {
          goto LABEL_123;
        }
        uint64_t v69 = &v36[16 * v38];
        char v71 = *(void *)v69;
        uint64_t v70 = *((void *)v69 + 1);
        Swift::Int v49 = __OFSUB__(v70, v71);
        uint64_t v72 = v70 - v71;
        if (v49) {
          goto LABEL_126;
        }
        if (v72 < v60) {
          goto LABEL_15;
        }
LABEL_85:
        uint64_t v77 = v38 - 1;
        if (v38 - 1 >= v13)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        if (!v11) {
          goto LABEL_142;
        }
        BOOL v78 = v12;
        unint64_t v79 = &v36[16 * v77];
        unint64_t v80 = *(void *)v79;
        uint64_t v81 = &v36[16 * v38];
        uint64_t v82 = *((void *)v81 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v11 + 16 * *(void *)v79), (char *)(v11 + 16 * *(void *)v81), v11 + 16 * v82, __dst);
        if (v1) {
          goto LABEL_93;
        }
        if (v82 < v80) {
          goto LABEL_116;
        }
        if (v38 > *((void *)v78 + 2)) {
          goto LABEL_117;
        }
        *(void *)unint64_t v79 = v80;
        *(void *)&v36[16 * v77 + 8] = v82;
        uint64_t v83 = *((void *)v78 + 2);
        if (v38 >= v83) {
          goto LABEL_118;
        }
        Swift::Int v12 = v78;
        uint64_t v13 = v83 - 1;
        memmove(&v36[16 * v38], v81 + 16, 16 * (v83 - 1 - v38));
        *((void *)v78 + 2) = v83 - 1;
        uint64_t v11 = v105;
        if (v83 <= 2) {
          goto LABEL_15;
        }
      }
    }
    uint64_t v13 = 1;
LABEL_15:
    uint64_t v6 = v103;
    unint64_t v3 = v104;
    if (v10 >= v104)
    {
      uint64_t v9 = v102;
      goto LABEL_102;
    }
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  Swift::Int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  Swift::Int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::Int v28;
  void *v29;
  uint64_t v30;
  Swift::Int v31;
  void *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  char v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t i;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  unint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  void *v102;
  Swift::Int v103;
  Swift::Int v104;
  uint64_t v105;
  char *__dst;

  unint64_t v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_136;
    }
    if ((unint64_t)v3 >= 2)
    {
      id v85 = 0;
      uint64_t v86 = *a1;
      for (double i = 1; i != v3; ++i)
      {
        BOOL v88 = *(void *)(v86 + 16 * i + 8);
        uint64_t v89 = v85;
        do
        {
          char v90 = v86 + v89;
          if (v88 >= *(void *)(v86 + v89 + 8)) {
            break;
          }
          if (!v86) {
            goto LABEL_140;
          }
          id v91 = *(void *)(v90 + 16);
          *(_OWORD *)(v90 + 16) = *(_OWORD *)v90;
          *(void *)char v90 = v91;
          *(void *)(v90 + 8) = v88;
          v89 -= 16;
        }
        while (v89 != -16);
        v85 += 16;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_145;
  }
  uint64_t v6 = result;
  uint64_t v100 = a1;
  if (v3 < 2)
  {
    uint64_t v9 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      uint64_t v13 = _swiftEmptyArrayStorage[2];
      Swift::Int v12 = (char *)_swiftEmptyArrayStorage;
LABEL_102:
      uint64_t v92 = v12;
      uint64_t v102 = v9;
      if (v13 >= 2)
      {
        uint64_t v93 = *v100;
        do
        {
          uint64_t v94 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_131;
          }
          if (!v93) {
            goto LABEL_144;
          }
          BOOL v95 = v92;
          uint64_t v96 = *(void *)&v92[16 * v94 + 32];
          uint64_t v97 = *(void *)&v92[16 * v13 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v93 + 16 * v96), (char *)(v93 + 16 * *(void *)&v92[16 * v13 + 16]), v93 + 16 * v97, __dst);
          if (v1) {
            break;
          }
          if (v97 < v96) {
            goto LABEL_132;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            BOOL v95 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v95);
          }
          if (v94 >= *((void *)v95 + 2)) {
            goto LABEL_133;
          }
          uint64_t v98 = &v95[16 * v94 + 32];
          *(void *)uint64_t v98 = v96;
          *((void *)v98 + 1) = v97;
          uint64_t v99 = *((void *)v95 + 2);
          if (v13 > v99) {
            goto LABEL_134;
          }
          memmove(&v95[16 * v13 + 16], &v95[16 * v13 + 32], 16 * (v99 - v13));
          uint64_t v92 = v95;
          *((void *)v95 + 2) = v99 - 1;
          uint64_t v13 = v99 - 1;
        }
        while (v99 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      v102[2] = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v102 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v7 = v5 >> 1;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (MOSuggestionAssetReference, Int));
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v8 + 16) = v7;
    uint64_t v102 = (void *)v8;
    __dst = (char *)(v8 + 32);
  }
  uint64_t v10 = 0;
  uint64_t v11 = *a1;
  uint64_t v101 = *a1 + 40;
  Swift::Int v12 = (char *)_swiftEmptyArrayStorage;
  uint64_t v103 = v6;
  uint64_t v104 = v3;
  uint64_t v105 = v11;
  while (1)
  {
    uint64_t v14 = v10++;
    if (v10 < v3)
    {
      uint64_t v15 = *(void *)(v11 + 16 * v10 + 8);
      uint64_t v16 = *(void *)(v11 + 16 * v14 + 8);
      uint64_t v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        uint64_t v17 = (uint64_t *)(v101 + 16 * v14);
        unint64_t v18 = v15;
        while (1)
        {
          char v20 = *v17;
          v17 += 2;
          uint64_t v19 = v20;
          if (v15 < v16 == v20 >= v18) {
            break;
          }
          ++v10;
          unint64_t v18 = v19;
          if (v3 == v10)
          {
            uint64_t v10 = v3;
            break;
          }
        }
      }
      if (v15 < v16)
      {
        if (v10 < v14) {
          goto LABEL_137;
        }
        if (v14 < v10)
        {
          unint64_t v21 = 16 * v10;
          uint64_t v22 = 16 * v14;
          uint64_t v23 = v10;
          uint64_t v24 = v14;
          do
          {
            if (v24 != --v23)
            {
              if (!v11) {
                goto LABEL_143;
              }
              uint64_t v25 = v11 + v21;
              uint64_t v26 = *(void *)(v11 + v22);
              uint64_t v27 = *(void *)(v11 + v22 + 8);
              *(_OWORD *)(v11 + v22) = *(_OWORD *)(v11 + v21 - 16);
              *(void *)(v25 - 16) = v26;
              *(void *)(v25 - 8) = v27;
            }
            ++v24;
            v21 -= 16;
            v22 += 16;
          }
          while (v24 < v23);
        }
      }
    }
    if (v10 >= v3) {
      goto LABEL_46;
    }
    if (__OFSUB__(v10, v14)) {
      goto LABEL_135;
    }
    if (v10 - v14 >= v6) {
      goto LABEL_46;
    }
    uint64_t v28 = v14 + v6;
    if (__OFADD__(v14, v6)) {
      goto LABEL_138;
    }
    if (v28 >= v3) {
      uint64_t v28 = v3;
    }
    if (v28 < v14) {
      break;
    }
    if (v10 != v28)
    {
      uint64_t v29 = (void *)(v11 + 16 * v10);
      do
      {
        double v30 = *(void *)(v11 + 16 * v10 + 8);
        double v31 = v14;
        Swift::Int v32 = v29;
        do
        {
          if (v30 >= *(v32 - 1)) {
            break;
          }
          if (!v11) {
            goto LABEL_141;
          }
          uint64_t v33 = *v32;
          *(_OWORD *)Swift::Int v32 = *((_OWORD *)v32 - 1);
          *(v32 - 1) = v30;
          *(v32 - 2) = v33;
          v32 -= 2;
          ++v31;
        }
        while (v10 != v31);
        ++v10;
        v29 += 2;
      }
      while (v10 != v28);
      uint64_t v10 = v28;
    }
LABEL_46:
    if (v10 < v14) {
      goto LABEL_130;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      Swift::Int v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v12 + 2) + 1, 1, v12);
    }
    uint64_t v35 = *((void *)v12 + 2);
    Swift::Int v34 = *((void *)v12 + 3);
    uint64_t v13 = v35 + 1;
    uint64_t v11 = v105;
    if (v35 >= v34 >> 1)
    {
      uint64_t v84 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v34 > 1), v35 + 1, 1, v12);
      uint64_t v11 = v105;
      Swift::Int v12 = v84;
    }
    *((void *)v12 + 2) = v13;
    Swift::Int v36 = v12 + 32;
    uint64_t v37 = &v12[16 * v35 + 32];
    *(void *)uint64_t v37 = v14;
    *((void *)v37 + 1) = v10;
    if (v35)
    {
      while (1)
      {
        uint64_t v38 = v13 - 1;
        if (v13 >= 4)
        {
          Swift::Int v43 = &v36[16 * v13];
          uint64_t v44 = *((void *)v43 - 8);
          uint64_t v45 = *((void *)v43 - 7);
          Swift::Int v49 = __OFSUB__(v45, v44);
          unint64_t v46 = v45 - v44;
          if (v49) {
            goto LABEL_119;
          }
          Swift::Int v48 = *((void *)v43 - 6);
          Swift::Int v47 = *((void *)v43 - 5);
          Swift::Int v49 = __OFSUB__(v47, v48);
          uint64_t v41 = v47 - v48;
          uint64_t v42 = v49;
          if (v49) {
            goto LABEL_120;
          }
          uint64_t v50 = v13 - 2;
          uint64_t v51 = &v36[16 * v13 - 32];
          uint64_t v53 = *(void *)v51;
          Swift::Int v52 = *((void *)v51 + 1);
          Swift::Int v49 = __OFSUB__(v52, v53);
          uint64_t v54 = v52 - v53;
          if (v49) {
            goto LABEL_122;
          }
          Swift::Int v49 = __OFADD__(v41, v54);
          uint64_t v55 = v41 + v54;
          if (v49) {
            goto LABEL_125;
          }
          if (v55 >= v46)
          {
            uint64_t v73 = &v36[16 * v38];
            uint64_t v75 = *(void *)v73;
            uint64_t v74 = *((void *)v73 + 1);
            Swift::Int v49 = __OFSUB__(v74, v75);
            uint64_t v76 = v74 - v75;
            if (v49) {
              goto LABEL_129;
            }
            uint64_t v66 = v41 < v76;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            unint64_t v67 = *((void *)v12 + 4);
            uint64_t v68 = *((void *)v12 + 5);
            Swift::Int v49 = __OFSUB__(v68, v67);
            uint64_t v60 = v68 - v67;
            uint64_t v61 = v49;
            goto LABEL_77;
          }
          uint64_t v40 = *((void *)v12 + 4);
          BOOL v39 = *((void *)v12 + 5);
          Swift::Int v49 = __OFSUB__(v39, v40);
          uint64_t v41 = v39 - v40;
          uint64_t v42 = v49;
        }
        if (v42) {
          goto LABEL_121;
        }
        uint64_t v50 = v13 - 2;
        uint64_t v56 = &v36[16 * v13 - 32];
        double v58 = *(void *)v56;
        double v57 = *((void *)v56 + 1);
        uint64_t v59 = __OFSUB__(v57, v58);
        uint64_t v60 = v57 - v58;
        uint64_t v61 = v59;
        if (v59) {
          goto LABEL_124;
        }
        unint64_t v62 = &v36[16 * v38];
        uint64_t v64 = *(void *)v62;
        unint64_t v63 = *((void *)v62 + 1);
        Swift::Int v49 = __OFSUB__(v63, v64);
        char v65 = v63 - v64;
        if (v49) {
          goto LABEL_127;
        }
        if (__OFADD__(v60, v65)) {
          goto LABEL_128;
        }
        if (v60 + v65 >= v41)
        {
          uint64_t v66 = v41 < v65;
LABEL_83:
          if (v66) {
            uint64_t v38 = v50;
          }
          goto LABEL_85;
        }
LABEL_77:
        if (v61) {
          goto LABEL_123;
        }
        uint64_t v69 = &v36[16 * v38];
        char v71 = *(void *)v69;
        uint64_t v70 = *((void *)v69 + 1);
        Swift::Int v49 = __OFSUB__(v70, v71);
        uint64_t v72 = v70 - v71;
        if (v49) {
          goto LABEL_126;
        }
        if (v72 < v60) {
          goto LABEL_15;
        }
LABEL_85:
        uint64_t v77 = v38 - 1;
        if (v38 - 1 >= v13)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        if (!v11) {
          goto LABEL_142;
        }
        BOOL v78 = v12;
        unint64_t v79 = &v36[16 * v77];
        unint64_t v80 = *(void *)v79;
        uint64_t v81 = &v36[16 * v38];
        uint64_t v82 = *((void *)v81 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v11 + 16 * *(void *)v79), (char *)(v11 + 16 * *(void *)v81), v11 + 16 * v82, __dst);
        if (v1) {
          goto LABEL_93;
        }
        if (v82 < v80) {
          goto LABEL_116;
        }
        if (v38 > *((void *)v78 + 2)) {
          goto LABEL_117;
        }
        *(void *)unint64_t v79 = v80;
        *(void *)&v36[16 * v77 + 8] = v82;
        uint64_t v83 = *((void *)v78 + 2);
        if (v38 >= v83) {
          goto LABEL_118;
        }
        Swift::Int v12 = v78;
        uint64_t v13 = v83 - 1;
        memmove(&v36[16 * v38], v81 + 16, 16 * (v83 - 1 - v38));
        *((void *)v78 + 2) = v83 - 1;
        uint64_t v11 = v105;
        if (v83 <= 2) {
          goto LABEL_15;
        }
      }
    }
    uint64_t v13 = 1;
LABEL_15:
    uint64_t v6 = v103;
    unint64_t v3 = v104;
    if (v10 >= v104)
    {
      uint64_t v9 = v102;
      goto LABEL_102;
    }
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  double *v9;
  Swift::Int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  Swift::Int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::Int v28;
  void *v29;
  uint64_t v30;
  Swift::Int v31;
  void *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  char v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t i;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  unint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  double *v102;
  Swift::Int v103;
  Swift::Int v104;
  uint64_t v105;
  char *__dst;

  unint64_t v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_136;
    }
    if ((unint64_t)v3 >= 2)
    {
      id v85 = 0;
      uint64_t v86 = *a1;
      for (double i = 1; i != v3; ++i)
      {
        BOOL v88 = *(void *)(v86 + 16 * i + 8);
        uint64_t v89 = v85;
        do
        {
          char v90 = v86 + v89;
          if (v88 >= *(void *)(v86 + v89 + 8)) {
            break;
          }
          if (!v86) {
            goto LABEL_140;
          }
          id v91 = *(void *)(v90 + 16);
          *(_OWORD *)(v90 + 16) = *(_OWORD *)v90;
          *(void *)char v90 = v91;
          *(void *)(v90 + 8) = v88;
          v89 -= 16;
        }
        while (v89 != -16);
        v85 += 16;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_145;
  }
  uint64_t v6 = result;
  uint64_t v100 = a1;
  if (v3 < 2)
  {
    uint64_t v9 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      uint64_t v13 = *(void *)&_swiftEmptyArrayStorage[2];
      Swift::Int v12 = (char *)_swiftEmptyArrayStorage;
LABEL_102:
      uint64_t v92 = v12;
      uint64_t v102 = v9;
      if (v13 >= 2)
      {
        uint64_t v93 = *v100;
        do
        {
          uint64_t v94 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_131;
          }
          if (!v93) {
            goto LABEL_144;
          }
          BOOL v95 = v92;
          uint64_t v96 = *(void *)&v92[16 * v94 + 32];
          uint64_t v97 = *(void *)&v92[16 * v13 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v93 + 16 * v96), (char *)(v93 + 16 * *(void *)&v92[16 * v13 + 16]), v93 + 16 * v97, __dst);
          if (v1) {
            break;
          }
          if (v97 < v96) {
            goto LABEL_132;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            BOOL v95 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v95);
          }
          if (v94 >= *((void *)v95 + 2)) {
            goto LABEL_133;
          }
          uint64_t v98 = &v95[16 * v94 + 32];
          *(void *)uint64_t v98 = v96;
          *((void *)v98 + 1) = v97;
          uint64_t v99 = *((void *)v95 + 2);
          if (v13 > v99) {
            goto LABEL_134;
          }
          memmove(&v95[16 * v13 + 16], &v95[16 * v13 + 32], 16 * (v99 - v13));
          uint64_t v92 = v95;
          *((void *)v95 + 2) = v99 - 1;
          uint64_t v13 = v99 - 1;
        }
        while (v99 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      v102[2] = 0.0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v102 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v7 = v5 >> 1;
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v8 + 16) = v7;
    uint64_t v102 = (double *)v8;
    __dst = (char *)(v8 + 32);
  }
  uint64_t v10 = 0;
  uint64_t v11 = *a1;
  uint64_t v101 = *a1 + 40;
  Swift::Int v12 = (char *)_swiftEmptyArrayStorage;
  uint64_t v103 = v6;
  uint64_t v104 = v3;
  uint64_t v105 = v11;
  while (1)
  {
    uint64_t v14 = v10++;
    if (v10 < v3)
    {
      uint64_t v15 = *(void *)(v11 + 16 * v10 + 8);
      uint64_t v16 = *(void *)(v11 + 16 * v14 + 8);
      uint64_t v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        uint64_t v17 = (uint64_t *)(v101 + 16 * v14);
        unint64_t v18 = v15;
        while (1)
        {
          char v20 = *v17;
          v17 += 2;
          uint64_t v19 = v20;
          if (v15 < v16 == v20 >= v18) {
            break;
          }
          ++v10;
          unint64_t v18 = v19;
          if (v3 == v10)
          {
            uint64_t v10 = v3;
            break;
          }
        }
      }
      if (v15 < v16)
      {
        if (v10 < v14) {
          goto LABEL_137;
        }
        if (v14 < v10)
        {
          unint64_t v21 = 16 * v10;
          uint64_t v22 = 16 * v14;
          uint64_t v23 = v10;
          uint64_t v24 = v14;
          do
          {
            if (v24 != --v23)
            {
              if (!v11) {
                goto LABEL_143;
              }
              uint64_t v25 = v11 + v21;
              uint64_t v26 = *(void *)(v11 + v22);
              uint64_t v27 = *(void *)(v11 + v22 + 8);
              *(_OWORD *)(v11 + v22) = *(_OWORD *)(v11 + v21 - 16);
              *(void *)(v25 - 16) = v26;
              *(void *)(v25 - 8) = v27;
            }
            ++v24;
            v21 -= 16;
            v22 += 16;
          }
          while (v24 < v23);
        }
      }
    }
    if (v10 >= v3) {
      goto LABEL_46;
    }
    if (__OFSUB__(v10, v14)) {
      goto LABEL_135;
    }
    if (v10 - v14 >= v6) {
      goto LABEL_46;
    }
    uint64_t v28 = v14 + v6;
    if (__OFADD__(v14, v6)) {
      goto LABEL_138;
    }
    if (v28 >= v3) {
      uint64_t v28 = v3;
    }
    if (v28 < v14) {
      break;
    }
    if (v10 != v28)
    {
      uint64_t v29 = (void *)(v11 + 16 * v10);
      do
      {
        double v30 = *(void *)(v11 + 16 * v10 + 8);
        double v31 = v14;
        Swift::Int v32 = v29;
        do
        {
          if (v30 >= *(v32 - 1)) {
            break;
          }
          if (!v11) {
            goto LABEL_141;
          }
          uint64_t v33 = *v32;
          *(_OWORD *)Swift::Int v32 = *((_OWORD *)v32 - 1);
          *(v32 - 1) = v30;
          *(v32 - 2) = v33;
          v32 -= 2;
          ++v31;
        }
        while (v10 != v31);
        ++v10;
        v29 += 2;
      }
      while (v10 != v28);
      uint64_t v10 = v28;
    }
LABEL_46:
    if (v10 < v14) {
      goto LABEL_130;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      Swift::Int v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v12 + 2) + 1, 1, v12);
    }
    uint64_t v35 = *((void *)v12 + 2);
    Swift::Int v34 = *((void *)v12 + 3);
    uint64_t v13 = v35 + 1;
    uint64_t v11 = v105;
    if (v35 >= v34 >> 1)
    {
      uint64_t v84 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v34 > 1), v35 + 1, 1, v12);
      uint64_t v11 = v105;
      Swift::Int v12 = v84;
    }
    *((void *)v12 + 2) = v13;
    Swift::Int v36 = v12 + 32;
    uint64_t v37 = &v12[16 * v35 + 32];
    *(void *)uint64_t v37 = v14;
    *((void *)v37 + 1) = v10;
    if (v35)
    {
      while (1)
      {
        uint64_t v38 = v13 - 1;
        if (v13 >= 4)
        {
          Swift::Int v43 = &v36[16 * v13];
          uint64_t v44 = *((void *)v43 - 8);
          uint64_t v45 = *((void *)v43 - 7);
          Swift::Int v49 = __OFSUB__(v45, v44);
          unint64_t v46 = v45 - v44;
          if (v49) {
            goto LABEL_119;
          }
          Swift::Int v48 = *((void *)v43 - 6);
          Swift::Int v47 = *((void *)v43 - 5);
          Swift::Int v49 = __OFSUB__(v47, v48);
          uint64_t v41 = v47 - v48;
          uint64_t v42 = v49;
          if (v49) {
            goto LABEL_120;
          }
          uint64_t v50 = v13 - 2;
          uint64_t v51 = &v36[16 * v13 - 32];
          uint64_t v53 = *(void *)v51;
          Swift::Int v52 = *((void *)v51 + 1);
          Swift::Int v49 = __OFSUB__(v52, v53);
          uint64_t v54 = v52 - v53;
          if (v49) {
            goto LABEL_122;
          }
          Swift::Int v49 = __OFADD__(v41, v54);
          uint64_t v55 = v41 + v54;
          if (v49) {
            goto LABEL_125;
          }
          if (v55 >= v46)
          {
            uint64_t v73 = &v36[16 * v38];
            uint64_t v75 = *(void *)v73;
            uint64_t v74 = *((void *)v73 + 1);
            Swift::Int v49 = __OFSUB__(v74, v75);
            uint64_t v76 = v74 - v75;
            if (v49) {
              goto LABEL_129;
            }
            uint64_t v66 = v41 < v76;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            unint64_t v67 = *((void *)v12 + 4);
            uint64_t v68 = *((void *)v12 + 5);
            Swift::Int v49 = __OFSUB__(v68, v67);
            uint64_t v60 = v68 - v67;
            uint64_t v61 = v49;
            goto LABEL_77;
          }
          uint64_t v40 = *((void *)v12 + 4);
          BOOL v39 = *((void *)v12 + 5);
          Swift::Int v49 = __OFSUB__(v39, v40);
          uint64_t v41 = v39 - v40;
          uint64_t v42 = v49;
        }
        if (v42) {
          goto LABEL_121;
        }
        uint64_t v50 = v13 - 2;
        uint64_t v56 = &v36[16 * v13 - 32];
        double v58 = *(void *)v56;
        double v57 = *((void *)v56 + 1);
        uint64_t v59 = __OFSUB__(v57, v58);
        uint64_t v60 = v57 - v58;
        uint64_t v61 = v59;
        if (v59) {
          goto LABEL_124;
        }
        unint64_t v62 = &v36[16 * v38];
        uint64_t v64 = *(void *)v62;
        unint64_t v63 = *((void *)v62 + 1);
        Swift::Int v49 = __OFSUB__(v63, v64);
        char v65 = v63 - v64;
        if (v49) {
          goto LABEL_127;
        }
        if (__OFADD__(v60, v65)) {
          goto LABEL_128;
        }
        if (v60 + v65 >= v41)
        {
          uint64_t v66 = v41 < v65;
LABEL_83:
          if (v66) {
            uint64_t v38 = v50;
          }
          goto LABEL_85;
        }
LABEL_77:
        if (v61) {
          goto LABEL_123;
        }
        uint64_t v69 = &v36[16 * v38];
        char v71 = *(void *)v69;
        uint64_t v70 = *((void *)v69 + 1);
        Swift::Int v49 = __OFSUB__(v70, v71);
        uint64_t v72 = v70 - v71;
        if (v49) {
          goto LABEL_126;
        }
        if (v72 < v60) {
          goto LABEL_15;
        }
LABEL_85:
        uint64_t v77 = v38 - 1;
        if (v38 - 1 >= v13)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        if (!v11) {
          goto LABEL_142;
        }
        BOOL v78 = v12;
        unint64_t v79 = &v36[16 * v77];
        unint64_t v80 = *(void *)v79;
        uint64_t v81 = &v36[16 * v38];
        uint64_t v82 = *((void *)v81 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v11 + 16 * *(void *)v79), (char *)(v11 + 16 * *(void *)v81), v11 + 16 * v82, __dst);
        if (v1) {
          goto LABEL_93;
        }
        if (v82 < v80) {
          goto LABEL_116;
        }
        if (v38 > *((void *)v78 + 2)) {
          goto LABEL_117;
        }
        *(void *)unint64_t v79 = v80;
        *(void *)&v36[16 * v77 + 8] = v82;
        uint64_t v83 = *((void *)v78 + 2);
        if (v38 >= v83) {
          goto LABEL_118;
        }
        Swift::Int v12 = v78;
        uint64_t v13 = v83 - 1;
        memmove(&v36[16 * v38], v81 + 16, 16 * (v83 - 1 - v38));
        *((void *)v78 + 2) = v83 - 1;
        uint64_t v11 = v105;
        if (v83 <= 2) {
          goto LABEL_15;
        }
      }
    }
    uint64_t v13 = 1;
LABEL_15:
    uint64_t v6 = v103;
    unint64_t v3 = v104;
    if (v10 >= v104)
    {
      uint64_t v9 = v102;
      goto LABEL_102;
    }
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster();
  uint64_t v132 = *(void *)(v4 - 8);
  uint64_t v133 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v129 = (uint64_t)&v123 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v139 = (uint64_t)&v123 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v136 = (uint64_t)&v123 - v10;
  __chkstk_darwin(v9);
  uint64_t v135 = (uint64_t)&v123 - v11;
  Swift::Int v12 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v12);
  if (result >= v12)
  {
    if (v12 < 0) {
      goto LABEL_142;
    }
    if (v12) {
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v12, 1, a1);
    }
    return result;
  }
  if (v12 >= 0) {
    uint64_t v14 = v12;
  }
  else {
    uint64_t v14 = v12 + 1;
  }
  if (v12 < -1) {
    goto LABEL_150;
  }
  Swift::Int v125 = result;
  if (v12 < 2)
  {
    unint64_t v18 = (char *)_swiftEmptyArrayStorage;
    unint64_t v131 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v132 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v132 + 80));
    uint64_t v124 = _swiftEmptyArrayStorage;
    if (v12 != 1)
    {
      unint64_t v20 = _swiftEmptyArrayStorage[2];
LABEL_108:
      if (v20 >= 2)
      {
        uint64_t v117 = *a1;
        do
        {
          unint64_t v118 = v20 - 2;
          if (v20 < 2) {
            goto LABEL_137;
          }
          if (!v117) {
            goto LABEL_149;
          }
          uint64_t v119 = *(void *)&v18[16 * v118 + 32];
          uint64_t v120 = *(void *)&v18[16 * v20 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)(v117 + *(void *)(v132 + 72) * v119, v117 + *(void *)(v132 + 72) * *(void *)&v18[16 * v20 + 16], v117 + *(void *)(v132 + 72) * v120, v131);
          if (v2) {
            break;
          }
          if (v120 < v119) {
            goto LABEL_138;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v18);
          }
          if (v118 >= *((void *)v18 + 2)) {
            goto LABEL_139;
          }
          uint64_t v121 = &v18[16 * v118 + 32];
          *(void *)uint64_t v121 = v119;
          *((void *)v121 + 1) = v120;
          unint64_t v122 = *((void *)v18 + 2);
          if (v20 > v122) {
            goto LABEL_140;
          }
          memmove(&v18[16 * v20 + 16], &v18[16 * v20 + 32], 16 * (v122 - v20));
          *((void *)v18 + 2) = v122 - 1;
          unint64_t v20 = v122 - 1;
        }
        while (v122 > 2);
      }
LABEL_119:
      swift_bridgeObjectRelease();
      v124[2] = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v15 = v14 >> 1;
    uint64_t v16 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v16 + 16) = v15;
    uint64_t v17 = *(unsigned __int8 *)(v132 + 80);
    uint64_t v124 = (void *)v16;
    unint64_t v131 = v16 + ((v17 + 32) & ~v17);
  }
  Swift::Int v19 = 0;
  unint64_t v18 = (char *)_swiftEmptyArrayStorage;
  Swift::tuple_tuple_Int_Int_Double_optional v138 = a1;
  while (1)
  {
    Swift::Int v21 = v19;
    Swift::Int v22 = v19 + 1;
    if (v19 + 1 >= v12) {
      goto LABEL_39;
    }
    uint64_t v127 = v2;
    uint64_t v23 = *a1;
    uint64_t v24 = *(void *)(v132 + 72);
    uint64_t v25 = v135;
    outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(*a1 + v24 * v22, v135);
    uint64_t v26 = v23 + v24 * v21;
    Swift::Int v130 = v21;
    uint64_t v27 = v136;
    outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v26, v136);
    Swift::Int v140 = *(void *)(v25 + 24);
    Swift::Int v137 = *(void *)(v27 + 24);
    uint64_t v28 = v27;
    Swift::Int v21 = v130;
    outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v28);
    outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v25);
    Swift::Int v29 = v21 + 2;
    uint64_t v134 = v23;
    uint64_t v141 = v24;
    if (v21 + 2 >= v12)
    {
      Swift::Int v32 = v21 + 2;
      uint64_t v39 = v24;
    }
    else
    {
      uint64_t v126 = v18;
      Swift::Int v30 = v24 * v22;
      uint64_t v31 = v23;
      Swift::Int v32 = v29;
      uint64_t v33 = v24 * v29;
      while (1)
      {
        Swift::Int v34 = v12;
        int v35 = v140 < v137;
        uint64_t v36 = v135;
        outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v31 + v33, v135);
        uint64_t v37 = v136;
        outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v31 + v30, v136);
        int v38 = *(void *)(v36 + 24) >= *(void *)(v37 + 24);
        outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v37);
        outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v36);
        if (v35 == v38) {
          break;
        }
        uint64_t v39 = v141;
        v31 += v141;
        ++v32;
        Swift::Int v12 = v34;
        if (v34 == v32)
        {
          Swift::Int v32 = v34;
          a1 = v138;
          unint64_t v18 = v126;
          Swift::Int v21 = v130;
          goto LABEL_23;
        }
      }
      a1 = v138;
      unint64_t v18 = v126;
      Swift::Int v21 = v130;
      Swift::Int v12 = v34;
      uint64_t v39 = v141;
    }
LABEL_23:
    if (v140 >= v137) {
      break;
    }
    if (v32 < v21) {
      goto LABEL_143;
    }
    Swift::Int v22 = v32;
    if (v21 >= v32)
    {
      uint64_t v2 = v127;
LABEL_39:
      if (v22 >= v12) {
        goto LABEL_59;
      }
      goto LABEL_40;
    }
    Swift::Int v140 = v12;
    uint64_t v126 = v18;
    uint64_t v40 = 0;
    uint64_t v41 = v39 * (v32 - 1);
    Swift::Int v42 = v32 * v39;
    uint64_t v43 = v21 * v39;
    do
    {
      if (v21 != v22 + v40 - 1)
      {
        uint64_t v44 = v134;
        if (!v134) {
          goto LABEL_148;
        }
        unint64_t v45 = v134 + v43;
        outlined init with take of MOSuggestionAssetMapsClusterer.Cluster(v134 + v43, v129);
        if (v43 < v41 || v45 >= v44 + v42)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v43 != v41)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        outlined init with take of MOSuggestionAssetMapsClusterer.Cluster(v129, v44 + v41);
        Swift::Int v22 = v32;
        uint64_t v39 = v141;
      }
      ++v21;
      --v40;
      v41 -= v39;
      v42 -= v39;
      v43 += v39;
    }
    while (v21 < v22 + v40);
    a1 = v138;
    unint64_t v18 = v126;
    uint64_t v2 = v127;
    Swift::Int v21 = v130;
    Swift::Int v12 = v140;
    if (v22 < v140) {
      goto LABEL_40;
    }
LABEL_59:
    if (v22 < v21) {
      goto LABEL_136;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v137 = v22;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      unint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v18 + 2) + 1, 1, v18);
    }
    unint64_t v66 = *((void *)v18 + 2);
    unint64_t v65 = *((void *)v18 + 3);
    unint64_t v20 = v66 + 1;
    if (v66 >= v65 >> 1) {
      unint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v65 > 1), v66 + 1, 1, v18);
    }
    *((void *)v18 + 2) = v20;
    unint64_t v67 = v18 + 32;
    uint64_t v68 = &v18[16 * v66 + 32];
    Swift::Int v69 = v137;
    *(void *)uint64_t v68 = v21;
    *((void *)v68 + 1) = v69;
    if (v66)
    {
      while (1)
      {
        unint64_t v70 = v20 - 1;
        if (v20 >= 4)
        {
          uint64_t v75 = &v67[16 * v20];
          uint64_t v76 = *((void *)v75 - 8);
          uint64_t v77 = *((void *)v75 - 7);
          BOOL v81 = __OFSUB__(v77, v76);
          uint64_t v78 = v77 - v76;
          if (v81) {
            goto LABEL_125;
          }
          uint64_t v80 = *((void *)v75 - 6);
          uint64_t v79 = *((void *)v75 - 5);
          BOOL v81 = __OFSUB__(v79, v80);
          uint64_t v73 = v79 - v80;
          char v74 = v81;
          if (v81) {
            goto LABEL_126;
          }
          unint64_t v82 = v20 - 2;
          uint64_t v83 = &v67[16 * v20 - 32];
          uint64_t v85 = *(void *)v83;
          uint64_t v84 = *((void *)v83 + 1);
          BOOL v81 = __OFSUB__(v84, v85);
          uint64_t v86 = v84 - v85;
          if (v81) {
            goto LABEL_128;
          }
          BOOL v81 = __OFADD__(v73, v86);
          uint64_t v87 = v73 + v86;
          if (v81) {
            goto LABEL_131;
          }
          if (v87 >= v78)
          {
            uint64_t v105 = &v67[16 * v70];
            uint64_t v107 = *(void *)v105;
            uint64_t v106 = *((void *)v105 + 1);
            BOOL v81 = __OFSUB__(v106, v107);
            uint64_t v108 = v106 - v107;
            if (v81) {
              goto LABEL_135;
            }
            BOOL v98 = v73 < v108;
            goto LABEL_96;
          }
        }
        else
        {
          if (v20 != 3)
          {
            uint64_t v99 = *((void *)v18 + 4);
            uint64_t v100 = *((void *)v18 + 5);
            BOOL v81 = __OFSUB__(v100, v99);
            uint64_t v92 = v100 - v99;
            char v93 = v81;
            goto LABEL_90;
          }
          uint64_t v72 = *((void *)v18 + 4);
          uint64_t v71 = *((void *)v18 + 5);
          BOOL v81 = __OFSUB__(v71, v72);
          uint64_t v73 = v71 - v72;
          char v74 = v81;
        }
        if (v74) {
          goto LABEL_127;
        }
        unint64_t v82 = v20 - 2;
        BOOL v88 = &v67[16 * v20 - 32];
        uint64_t v90 = *(void *)v88;
        uint64_t v89 = *((void *)v88 + 1);
        BOOL v91 = __OFSUB__(v89, v90);
        uint64_t v92 = v89 - v90;
        char v93 = v91;
        if (v91) {
          goto LABEL_130;
        }
        uint64_t v94 = &v67[16 * v70];
        uint64_t v96 = *(void *)v94;
        uint64_t v95 = *((void *)v94 + 1);
        BOOL v81 = __OFSUB__(v95, v96);
        uint64_t v97 = v95 - v96;
        if (v81) {
          goto LABEL_133;
        }
        if (__OFADD__(v92, v97)) {
          goto LABEL_134;
        }
        if (v92 + v97 >= v73)
        {
          BOOL v98 = v73 < v97;
LABEL_96:
          if (v98) {
            unint64_t v70 = v82;
          }
          goto LABEL_98;
        }
LABEL_90:
        if (v93) {
          goto LABEL_129;
        }
        uint64_t v101 = &v67[16 * v70];
        uint64_t v103 = *(void *)v101;
        uint64_t v102 = *((void *)v101 + 1);
        BOOL v81 = __OFSUB__(v102, v103);
        uint64_t v104 = v102 - v103;
        if (v81) {
          goto LABEL_132;
        }
        if (v104 < v92) {
          goto LABEL_14;
        }
LABEL_98:
        unint64_t v109 = v70 - 1;
        if (v70 - 1 >= v20)
        {
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
          goto LABEL_145;
        }
        uint64_t v110 = *a1;
        if (!*a1) {
          goto LABEL_147;
        }
        v111 = v18;
        uint64_t v112 = &v67[16 * v109];
        uint64_t v113 = *(void *)v112;
        uint64_t v114 = &v67[16 * v70];
        uint64_t v115 = *((void *)v114 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)(v110 + *(void *)(v132 + 72) * *(void *)v112, v110 + *(void *)(v132 + 72) * *(void *)v114, v110 + *(void *)(v132 + 72) * v115, v131);
        if (v2) {
          goto LABEL_119;
        }
        if (v115 < v113) {
          goto LABEL_122;
        }
        if (v70 > *((void *)v111 + 2)) {
          goto LABEL_123;
        }
        *(void *)uint64_t v112 = v113;
        *(void *)&v67[16 * v109 + 8] = v115;
        unint64_t v116 = *((void *)v111 + 2);
        if (v70 >= v116) {
          goto LABEL_124;
        }
        unint64_t v18 = v111;
        unint64_t v20 = v116 - 1;
        memmove(&v67[16 * v70], v114 + 16, 16 * (v116 - 1 - v70));
        *((void *)v111 + 2) = v116 - 1;
        a1 = v138;
        if (v116 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v20 = 1;
LABEL_14:
    Swift::Int v12 = a1[1];
    Swift::Int v19 = v137;
    if (v137 >= v12) {
      goto LABEL_108;
    }
  }
  Swift::Int v22 = v32;
  uint64_t v2 = v127;
  if (v22 >= v12) {
    goto LABEL_59;
  }
LABEL_40:
  if (__OFSUB__(v22, v21)) {
    goto LABEL_141;
  }
  if (v22 - v21 >= v125) {
    goto LABEL_59;
  }
  if (__OFADD__(v21, v125)) {
    goto LABEL_144;
  }
  if (v21 + v125 >= v12) {
    Swift::Int v46 = v12;
  }
  else {
    Swift::Int v46 = v21 + v125;
  }
  if (v46 >= v21)
  {
    if (v22 != v46)
    {
      Swift::Int v130 = v21;
      uint64_t v126 = v18;
      uint64_t v127 = v2;
      uint64_t v47 = *(void *)(v132 + 72);
      uint64_t v48 = v47 * (v22 - 1);
      uint64_t v134 = v47;
      Swift::Int v49 = v22 * v47;
      Swift::Int v128 = v46;
      do
      {
        uint64_t v51 = 0;
        Swift::Int v52 = v130;
        Swift::Int v137 = v22;
        while (1)
        {
          Swift::Int v140 = v52;
          uint64_t v53 = v138;
          uint64_t v54 = *v138;
          Swift::Int v55 = v49;
          uint64_t v56 = v49 + v51 + *v138;
          uint64_t v57 = v135;
          outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v56, v135);
          uint64_t v58 = v48;
          uint64_t v59 = v48 + v51 + v54;
          uint64_t v60 = v136;
          outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v59, v136);
          uint64_t v141 = *(void *)(v57 + 24);
          uint64_t v61 = *(void *)(v60 + 24);
          outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v60);
          outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v57);
          if (v141 >= v61) {
            break;
          }
          uint64_t v62 = *v53;
          if (!*v53) {
            goto LABEL_146;
          }
          Swift::Int v49 = v55;
          uint64_t v48 = v58;
          uint64_t v63 = v62 + v58 + v51;
          outlined init with take of MOSuggestionAssetMapsClusterer.Cluster(v62 + v55 + v51, v139);
          swift_arrayInitWithTakeFrontToBack();
          outlined init with take of MOSuggestionAssetMapsClusterer.Cluster(v139, v63);
          v51 -= v134;
          Swift::Int v52 = v140 + 1;
          Swift::Int v50 = v137;
          if (v137 == v140 + 1) {
            goto LABEL_50;
          }
        }
        Swift::Int v50 = v137;
        uint64_t v48 = v58;
        Swift::Int v49 = v55;
LABEL_50:
        Swift::Int v22 = v50 + 1;
        v48 += v134;
        v49 += v134;
      }
      while (v22 != v128);
      Swift::Int v22 = v128;
      unint64_t v18 = v126;
      uint64_t v2 = v127;
      a1 = v138;
      Swift::Int v21 = v130;
    }
    goto LABEL_59;
  }
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  Swift::Int result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  Swift::Int v19;
  char *v20;
  unint64_t v21;
  Swift::Int v22;
  Swift::Int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::Int v33;
  uint64_t v34;
  Swift::Int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  Swift::Int v39;
  uint64_t v40;
  uint64_t v41;
  Swift::Int v42;
  uint64_t v43;
  Swift::Int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  Swift::Int v48;
  uint64_t v49;
  Swift::Int v50;
  Swift::Int v51;
  uint64_t v52;
  Swift::Int v53;
  uint64_t *v54;
  uint64_t v55;
  Swift::Int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  Swift::Int v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  BOOL v91;
  uint64_t v92;
  char v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  BOOL v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  unint64_t v123;
  void *v124;
  Swift::Int v125;
  char *v126;
  uint64_t v127;
  Swift::Int v128;
  uint64_t v129;
  Swift::Int v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  Swift::Int v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;

  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for MOSuggestionSheetAssetDateRange(0);
  uint64_t v132 = *(void *)(v4 - 8);
  uint64_t v133 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v129 = (uint64_t)&v124 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v139 = (uint64_t)&v124 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v136 = (uint64_t)&v124 - v10;
  __chkstk_darwin(v9);
  uint64_t v135 = (uint64_t)&v124 - v11;
  Swift::Int v12 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v12);
  if (result >= v12)
  {
    if (v12 < 0) {
      goto LABEL_142;
    }
    if (v12) {
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v12, 1, a1);
    }
    return result;
  }
  if (v12 >= 0) {
    uint64_t v14 = v12;
  }
  else {
    uint64_t v14 = v12 + 1;
  }
  if (v12 < -1) {
    goto LABEL_150;
  }
  Swift::Int v125 = result;
  if (v12 < 2)
  {
    unint64_t v18 = _swiftEmptyArrayStorage;
    unint64_t v131 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v132 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v132 + 80));
    if (v12 != 1)
    {
      Swift::Int v21 = _swiftEmptyArrayStorage[2];
      unint64_t v20 = (char *)_swiftEmptyArrayStorage;
LABEL_107:
      uint64_t v117 = v20;
      uint64_t v124 = v18;
      if (v21 >= 2)
      {
        unint64_t v118 = *a1;
        do
        {
          uint64_t v119 = v21 - 2;
          if (v21 < 2) {
            goto LABEL_137;
          }
          if (!v118) {
            goto LABEL_149;
          }
          uint64_t v120 = *(void *)&v117[16 * v119 + 32];
          uint64_t v121 = *(void *)&v117[16 * v21 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)(v118 + *(void *)(v132 + 72) * v120, v118 + *(void *)(v132 + 72) * *(void *)&v117[16 * v21 + 16], v118 + *(void *)(v132 + 72) * v121, v131);
          if (v2) {
            break;
          }
          if (v121 < v120) {
            goto LABEL_138;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v117 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v117);
          }
          if (v119 >= *((void *)v117 + 2)) {
            goto LABEL_139;
          }
          unint64_t v122 = &v117[16 * v119 + 32];
          *(void *)unint64_t v122 = v120;
          *((void *)v122 + 1) = v121;
          uint64_t v123 = *((void *)v117 + 2);
          if (v21 > v123) {
            goto LABEL_140;
          }
          memmove(&v117[16 * v21 + 16], &v117[16 * v21 + 32], 16 * (v123 - v21));
          *((void *)v117 + 2) = v123 - 1;
          Swift::Int v21 = v123 - 1;
        }
        while (v123 > 2);
      }
LABEL_118:
      swift_bridgeObjectRelease();
      v124[2] = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v124 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v15 = v14 >> 1;
    uint64_t v16 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v16 + 16) = v15;
    uint64_t v17 = *(unsigned __int8 *)(v132 + 80);
    uint64_t v124 = (void *)v16;
    unint64_t v131 = v16 + ((v17 + 32) & ~v17);
  }
  Swift::Int v19 = 0;
  unint64_t v20 = (char *)_swiftEmptyArrayStorage;
  Swift::tuple_tuple_Int_Int_Double_optional v138 = a1;
  while (1)
  {
    Swift::Int v22 = v19;
    uint64_t v23 = v19 + 1;
    Swift::Int v130 = v19;
    if (v19 + 1 >= v12)
    {
      uint64_t v39 = v19 + 1;
      goto LABEL_59;
    }
    uint64_t v127 = v2;
    uint64_t v24 = *a1;
    uint64_t v25 = *a1 + *(void *)(v132 + 72) * v23;
    Swift::Int v140 = *(void *)(v132 + 72);
    uint64_t v26 = v140;
    uint64_t v27 = v135;
    outlined init with copy of MOSuggestionSheetAssetDateRange(v25, v135, type metadata accessor for MOSuggestionSheetAssetDateRange);
    uint64_t v28 = v24 + v26 * v22;
    Swift::Int v29 = v136;
    outlined init with copy of MOSuggestionSheetAssetDateRange(v28, v136, type metadata accessor for MOSuggestionSheetAssetDateRange);
    LODWORD(v137) = static Date.< infix(_:_:)();
    outlined destroy of MOSuggestionSheetAssetDateRange(v29);
    outlined destroy of MOSuggestionSheetAssetDateRange(v27);
    Swift::Int v30 = v140;
    uint64_t v134 = v24;
    if (v22 + 2 >= v12)
    {
      uint64_t v33 = v22 + 2;
      if ((v137 & 1) == 0) {
        goto LABEL_38;
      }
    }
    else
    {
      uint64_t v126 = v20;
      uint64_t v31 = v140 * v23;
      Swift::Int v32 = v24;
      uint64_t v33 = v22 + 2;
      Swift::Int v34 = v140 * (v22 + 2);
      do
      {
        int v35 = v12;
        uint64_t v36 = v135;
        outlined init with copy of MOSuggestionSheetAssetDateRange(v32 + v34, v135, type metadata accessor for MOSuggestionSheetAssetDateRange);
        uint64_t v37 = v136;
        outlined init with copy of MOSuggestionSheetAssetDateRange(v32 + v31, v136, type metadata accessor for MOSuggestionSheetAssetDateRange);
        int v38 = static Date.< infix(_:_:)();
        outlined destroy of MOSuggestionSheetAssetDateRange(v37);
        outlined destroy of MOSuggestionSheetAssetDateRange(v36);
        if ((v137 ^ v38))
        {
          unint64_t v20 = v126;
          Swift::Int v22 = v130;
          Swift::Int v12 = v35;
          Swift::Int v30 = v140;
          if ((v137 & 1) == 0) {
            goto LABEL_38;
          }
          goto LABEL_25;
        }
        Swift::Int v30 = v140;
        v32 += v140;
        ++v33;
        Swift::Int v12 = v35;
      }
      while (v35 != v33);
      uint64_t v33 = v35;
      unint64_t v20 = v126;
      Swift::Int v22 = v130;
      if ((v137 & 1) == 0)
      {
LABEL_38:
        uint64_t v39 = v33;
        goto LABEL_39;
      }
    }
LABEL_25:
    if (v33 < v22) {
      goto LABEL_143;
    }
    uint64_t v39 = v33;
    if (v22 < v33) {
      break;
    }
LABEL_39:
    uint64_t v2 = v127;
    if (v39 < v12) {
      goto LABEL_42;
    }
LABEL_59:
    if (v39 < v22) {
      goto LABEL_136;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v137 = v39;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      unint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v20 + 2) + 1, 1, v20);
    }
    unint64_t v66 = *((void *)v20 + 2);
    unint64_t v65 = *((void *)v20 + 3);
    Swift::Int v21 = v66 + 1;
    if (v66 >= v65 >> 1) {
      unint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v65 > 1), v66 + 1, 1, v20);
    }
    *((void *)v20 + 2) = v21;
    unint64_t v67 = v20 + 32;
    uint64_t v68 = &v20[16 * v66 + 32];
    Swift::Int v69 = v137;
    *(void *)uint64_t v68 = v22;
    *((void *)v68 + 1) = v69;
    if (v66)
    {
      while (1)
      {
        unint64_t v70 = v21 - 1;
        if (v21 >= 4)
        {
          uint64_t v75 = &v67[16 * v21];
          uint64_t v76 = *((void *)v75 - 8);
          uint64_t v77 = *((void *)v75 - 7);
          BOOL v81 = __OFSUB__(v77, v76);
          uint64_t v78 = v77 - v76;
          if (v81) {
            goto LABEL_125;
          }
          uint64_t v80 = *((void *)v75 - 6);
          uint64_t v79 = *((void *)v75 - 5);
          BOOL v81 = __OFSUB__(v79, v80);
          uint64_t v73 = v79 - v80;
          char v74 = v81;
          if (v81) {
            goto LABEL_126;
          }
          unint64_t v82 = v21 - 2;
          uint64_t v83 = &v67[16 * v21 - 32];
          uint64_t v85 = *(void *)v83;
          uint64_t v84 = *((void *)v83 + 1);
          BOOL v81 = __OFSUB__(v84, v85);
          uint64_t v86 = v84 - v85;
          if (v81) {
            goto LABEL_128;
          }
          BOOL v81 = __OFADD__(v73, v86);
          uint64_t v87 = v73 + v86;
          if (v81) {
            goto LABEL_131;
          }
          if (v87 >= v78)
          {
            uint64_t v105 = &v67[16 * v70];
            uint64_t v107 = *(void *)v105;
            uint64_t v106 = *((void *)v105 + 1);
            BOOL v81 = __OFSUB__(v106, v107);
            uint64_t v108 = v106 - v107;
            if (v81) {
              goto LABEL_135;
            }
            BOOL v98 = v73 < v108;
            goto LABEL_96;
          }
        }
        else
        {
          if (v21 != 3)
          {
            uint64_t v99 = *((void *)v20 + 4);
            uint64_t v100 = *((void *)v20 + 5);
            BOOL v81 = __OFSUB__(v100, v99);
            uint64_t v92 = v100 - v99;
            char v93 = v81;
            goto LABEL_90;
          }
          uint64_t v72 = *((void *)v20 + 4);
          uint64_t v71 = *((void *)v20 + 5);
          BOOL v81 = __OFSUB__(v71, v72);
          uint64_t v73 = v71 - v72;
          char v74 = v81;
        }
        if (v74) {
          goto LABEL_127;
        }
        unint64_t v82 = v21 - 2;
        BOOL v88 = &v67[16 * v21 - 32];
        uint64_t v90 = *(void *)v88;
        uint64_t v89 = *((void *)v88 + 1);
        BOOL v91 = __OFSUB__(v89, v90);
        uint64_t v92 = v89 - v90;
        char v93 = v91;
        if (v91) {
          goto LABEL_130;
        }
        uint64_t v94 = &v67[16 * v70];
        uint64_t v96 = *(void *)v94;
        uint64_t v95 = *((void *)v94 + 1);
        BOOL v81 = __OFSUB__(v95, v96);
        uint64_t v97 = v95 - v96;
        if (v81) {
          goto LABEL_133;
        }
        if (__OFADD__(v92, v97)) {
          goto LABEL_134;
        }
        if (v92 + v97 >= v73)
        {
          BOOL v98 = v73 < v97;
LABEL_96:
          if (v98) {
            unint64_t v70 = v82;
          }
          goto LABEL_98;
        }
LABEL_90:
        if (v93) {
          goto LABEL_129;
        }
        uint64_t v101 = &v67[16 * v70];
        uint64_t v103 = *(void *)v101;
        uint64_t v102 = *((void *)v101 + 1);
        BOOL v81 = __OFSUB__(v102, v103);
        uint64_t v104 = v102 - v103;
        if (v81) {
          goto LABEL_132;
        }
        if (v104 < v92) {
          goto LABEL_15;
        }
LABEL_98:
        unint64_t v109 = v70 - 1;
        if (v70 - 1 >= v21)
        {
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
          goto LABEL_145;
        }
        uint64_t v110 = *a1;
        if (!*a1) {
          goto LABEL_147;
        }
        v111 = v20;
        uint64_t v112 = &v67[16 * v109];
        uint64_t v113 = *(void *)v112;
        uint64_t v114 = &v67[16 * v70];
        uint64_t v115 = *((void *)v114 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)(v110 + *(void *)(v132 + 72) * *(void *)v112, v110 + *(void *)(v132 + 72) * *(void *)v114, v110 + *(void *)(v132 + 72) * v115, v131);
        if (v2) {
          goto LABEL_118;
        }
        if (v115 < v113) {
          goto LABEL_122;
        }
        if (v70 > *((void *)v111 + 2)) {
          goto LABEL_123;
        }
        *(void *)uint64_t v112 = v113;
        *(void *)&v67[16 * v109 + 8] = v115;
        unint64_t v116 = *((void *)v111 + 2);
        if (v70 >= v116) {
          goto LABEL_124;
        }
        unint64_t v20 = v111;
        Swift::Int v21 = v116 - 1;
        memmove(&v67[16 * v70], v114 + 16, 16 * (v116 - 1 - v70));
        *((void *)v111 + 2) = v116 - 1;
        a1 = v138;
        if (v116 <= 2) {
          goto LABEL_15;
        }
      }
    }
    Swift::Int v21 = 1;
LABEL_15:
    Swift::Int v12 = a1[1];
    Swift::Int v19 = v137;
    if (v137 >= v12)
    {
      unint64_t v18 = v124;
      goto LABEL_107;
    }
  }
  Swift::Int v137 = v12;
  uint64_t v126 = v20;
  uint64_t v40 = 0;
  uint64_t v41 = v30 * (v33 - 1);
  Swift::Int v42 = v22;
  uint64_t v43 = v33 * v30;
  uint64_t v44 = v42;
  unint64_t v45 = v42 * v30;
  do
  {
    if (v44 != v39 + v40 - 1)
    {
      Swift::Int v46 = v134;
      if (!v134) {
        goto LABEL_148;
      }
      uint64_t v47 = v134 + v45;
      outlined init with take of MOSuggestionSheetAssetDateRange(v134 + v45, v129, type metadata accessor for MOSuggestionSheetAssetDateRange);
      if (v45 < v41 || v47 >= v46 + v43)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (v45 != v41)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      outlined init with take of MOSuggestionSheetAssetDateRange(v129, v46 + v41, type metadata accessor for MOSuggestionSheetAssetDateRange);
      uint64_t v39 = v33;
      Swift::Int v30 = v140;
    }
    ++v44;
    --v40;
    v41 -= v30;
    v43 -= v30;
    v45 += v30;
  }
  while (v44 < v39 + v40);
  Swift::Int v12 = v137;
  a1 = v138;
  unint64_t v20 = v126;
  uint64_t v2 = v127;
  Swift::Int v22 = v130;
  if (v39 >= v137) {
    goto LABEL_59;
  }
LABEL_42:
  if (__OFSUB__(v39, v22)) {
    goto LABEL_141;
  }
  if (v39 - v22 >= v125) {
    goto LABEL_59;
  }
  if (__OFADD__(v22, v125)) {
    goto LABEL_144;
  }
  if (v22 + v125 >= v12) {
    uint64_t v48 = v12;
  }
  else {
    uint64_t v48 = v22 + v125;
  }
  if (v48 >= v22)
  {
    if (v39 != v48)
    {
      uint64_t v126 = v20;
      uint64_t v127 = v2;
      Swift::Int v49 = *(void *)(v132 + 72);
      Swift::Int v140 = v49 * (v39 - 1);
      uint64_t v134 = v49;
      Swift::Int v50 = v39 * v49;
      Swift::Int v128 = v48;
      do
      {
        Swift::Int v52 = 0;
        uint64_t v53 = v22;
        Swift::Int v137 = v39;
        while (1)
        {
          uint64_t v54 = v138;
          Swift::Int v55 = *v138;
          uint64_t v56 = v50;
          uint64_t v57 = v50 + v52 + *v138;
          uint64_t v58 = v135;
          outlined init with copy of MOSuggestionSheetAssetDateRange(v57, v135, type metadata accessor for MOSuggestionSheetAssetDateRange);
          uint64_t v59 = v140 + v52 + v55;
          uint64_t v60 = v136;
          outlined init with copy of MOSuggestionSheetAssetDateRange(v59, v136, type metadata accessor for MOSuggestionSheetAssetDateRange);
          uint64_t v61 = static Date.< infix(_:_:)();
          outlined destroy of MOSuggestionSheetAssetDateRange(v60);
          outlined destroy of MOSuggestionSheetAssetDateRange(v58);
          if ((v61 & 1) == 0) {
            break;
          }
          uint64_t v62 = *v54;
          if (!*v54) {
            goto LABEL_146;
          }
          Swift::Int v50 = v56;
          uint64_t v63 = v62 + v140 + v52;
          outlined init with take of MOSuggestionSheetAssetDateRange(v62 + v56 + v52, v139, type metadata accessor for MOSuggestionSheetAssetDateRange);
          swift_arrayInitWithTakeFrontToBack();
          outlined init with take of MOSuggestionSheetAssetDateRange(v139, v63, type metadata accessor for MOSuggestionSheetAssetDateRange);
          v52 -= v134;
          ++v53;
          uint64_t v51 = v137;
          if (v137 == v53) {
            goto LABEL_52;
          }
        }
        uint64_t v51 = v137;
        Swift::Int v50 = v56;
LABEL_52:
        uint64_t v39 = v51 + 1;
        v140 += v134;
        v50 += v134;
        Swift::Int v22 = v130;
      }
      while (v39 != v128);
      uint64_t v39 = v128;
      unint64_t v20 = v126;
      uint64_t v2 = v127;
      a1 = v138;
    }
    goto LABEL_59;
  }
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v26 = a1;
  uint64_t v27 = type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster();
  uint64_t v7 = __chkstk_darwin(v27);
  uint64_t v30 = (uint64_t)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (double *)((char *)&v24 - v10);
  uint64_t result = __chkstk_darwin(v9);
  uint64_t v15 = (double *)((char *)&v24 - v14);
  uint64_t v29 = a3;
  uint64_t v25 = a2;
  if (a3 != a2)
  {
    uint64_t v16 = *(void *)(v13 + 72);
    uint64_t v32 = v16 * (v29 - 1);
    uint64_t v28 = v16;
    uint64_t v31 = v16 * v29;
LABEL_5:
    uint64_t v17 = 0;
    uint64_t v18 = v26;
    while (1)
    {
      uint64_t v19 = *a4;
      outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v31 + v17 + *a4, (uint64_t)v15);
      outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v32 + v17 + v19, (uint64_t)v11);
      double v20 = v15[2];
      double v21 = v11[2];
      outlined destroy of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v11);
      uint64_t result = outlined destroy of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v15);
      if (v21 >= v20)
      {
LABEL_4:
        v32 += v28;
        v31 += v28;
        if (++v29 == v25) {
          return result;
        }
        goto LABEL_5;
      }
      uint64_t v22 = *a4;
      if (!*a4) {
        break;
      }
      uint64_t v23 = v22 + v32 + v17;
      outlined init with take of MOSuggestionAssetMapsClusterer.Cluster(v22 + v31 + v17, v30);
      swift_arrayInitWithTakeFrontToBack();
      uint64_t result = outlined init with take of MOSuggestionAssetMapsClusterer.Cluster(v30, v23);
      v17 -= v28;
      if (v29 == ++v18) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  unsigned int (*v35)(uint64_t, uint64_t, uint64_t);
  void (*v36)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int (**v57)(uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(uint64_t);
  uint64_t v61;
  void (**v62)(uint64_t, uint64_t, uint64_t, uint64_t);

  Swift::Int v49 = a1;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MOSuggestionSheetAssetDateRange?);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  Swift::Int v52 = (uint64_t)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v53 = (uint64_t)&v47 - v10;
  uint64_t v11 = type metadata accessor for MOSuggestionSheetAssetDateRange(0);
  uint64_t v54 = *(void *)(v11 - 8);
  Swift::Int v12 = __chkstk_darwin(v11);
  uint64_t v51 = (uint64_t)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v12);
  uint64_t v58 = (uint64_t)&v47 - v15;
  uint64_t v48 = a2;
  if (a3 != a2)
  {
    uint64_t v16 = *a4;
    uint64_t v62 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v54 + 56);
    uint64_t v57 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48);
    Swift::Int v55 = v16;
    uint64_t v17 = (void *)(v16 + 8 * a3 - 8);
    uint64_t v61 = v11;
LABEL_8:
    uint64_t v19 = *(void *)(v55 + 8 * a3);
    double v20 = v49;
    Swift::Int v50 = v17;
    uint64_t v56 = a3;
    while (1)
    {
      double v21 = *v17;
      uint64_t v22 = *(uint64_t (**)(uint64_t))(*(void *)v19 + 224);
      swift_retain();
      uint64_t v23 = swift_retain();
      uint64_t v24 = v22(v23);
      uint64_t v25 = swift_bridgeObjectRelease();
      if (!v24) {
        goto LABEL_6;
      }
      uint64_t v26 = *(uint64_t (**)(uint64_t))(*(void *)v21 + 224);
      uint64_t v27 = *(void *)v21 + 224;
      uint64_t v28 = v26(v25);
      uint64_t v29 = swift_bridgeObjectRelease();
      if (v28)
      {
        uint64_t v30 = v22(v29);
        if (!v30)
        {
          uint64_t v31 = v53;
          (*v62)(v53, 1, 1, v61);
LABEL_27:
          outlined destroy of Any?(v31, &demangling cache variable for type metadata for MOSuggestionSheetAssetDateRange?);
          swift_release();
          uint64_t result = swift_release();
          a3 = v56;
          goto LABEL_7;
        }
        uint64_t v59 = v27;
        uint64_t v60 = v26;
        if (*(void *)(v30 + 16))
        {
          uint64_t v31 = v53;
          uint64_t v32 = v54;
          outlined init with copy of MOSuggestionSheetAssetDateRange(v30 + ((*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80)), v53);
          uint64_t v33 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56);
          Swift::Int v34 = v61;
          v33(v31, 0, 1, v61);
        }
        else
        {
          uint64_t v33 = *v62;
          uint64_t v31 = v53;
          Swift::Int v34 = v61;
          (*v62)(v53, 1, 1, v61);
        }
        swift_bridgeObjectRelease();
        int v35 = *v57;
        if ((*v57)(v31, 1, v34) == 1) {
          goto LABEL_27;
        }
        uint64_t v36 = v33;
        uint64_t v37 = outlined init with take of MOSuggestionSheetAssetDateRange(v31, v58);
        int v38 = v60(v37);
        if (!v38)
        {
          uint64_t v18 = v52;
          v36(v52, 1, 1, v61);
          a3 = v56;
LABEL_5:
          outlined destroy of MOSuggestionSheetAssetDateRange(v58);
          outlined destroy of Any?(v18, &demangling cache variable for type metadata for MOSuggestionSheetAssetDateRange?);
LABEL_6:
          swift_release();
          uint64_t result = swift_release();
LABEL_7:
          ++a3;
          uint64_t v17 = v50 + 1;
          if (a3 == v48) {
            return result;
          }
          goto LABEL_8;
        }
        uint64_t v18 = v52;
        uint64_t v39 = v61;
        if (*(void *)(v38 + 16))
        {
          outlined init with copy of MOSuggestionSheetAssetDateRange(v38 + ((*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80)), v52);
          uint64_t v40 = 0;
        }
        else
        {
          uint64_t v40 = 1;
        }
        v36(v18, v40, 1, v39);
        swift_bridgeObjectRelease();
        uint64_t v41 = v35(v18, 1, v39);
        a3 = v56;
        if (v41 == 1) {
          goto LABEL_5;
        }
        Swift::Int v42 = v18;
        uint64_t v43 = v51;
        outlined init with take of MOSuggestionSheetAssetDateRange(v42, v51);
        uint64_t v44 = v58;
        unint64_t v45 = static Date.< infix(_:_:)();
        outlined destroy of MOSuggestionSheetAssetDateRange(v43);
        outlined destroy of MOSuggestionSheetAssetDateRange(v44);
        swift_release();
        uint64_t result = swift_release();
        if ((v45 & 1) == 0) {
          goto LABEL_7;
        }
      }
      else
      {
        swift_release();
        uint64_t result = swift_release();
        a3 = v56;
      }
      if (!v55) {
        break;
      }
      Swift::Int v46 = *v17;
      uint64_t v19 = v17[1];
      char *v17 = v19;
      v17[1] = v46;
      --v17;
      if (a3 == ++v20) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  char *v14;
  void (**v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  id v21;
  id v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  uint64_t v31 = a1;
  uint64_t v36 = type metadata accessor for Date();
  uint64_t v7 = __chkstk_darwin(v36);
  int v35 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v7);
  Swift::Int v34 = (char *)&v29 - v11;
  uint64_t v30 = a2;
  if (a3 != a2)
  {
    Swift::Int v12 = *a4;
    uint64_t v33 = v10 + 8;
    uint64_t v37 = v12;
    uint64_t v13 = (void *)(v12 + 8 * a3 - 8);
    uint64_t v15 = (void (**)(char *, uint64_t))(v10 + 8);
    uint64_t v14 = v34;
LABEL_5:
    uint64_t v16 = *(void *)(v37 + 8 * a3);
    uint64_t v17 = v31;
    uint64_t v32 = v13;
    while (1)
    {
      uint64_t v18 = *v13;
      uint64_t v19 = *(void **)(v16 + 16);
      swift_retain();
      double v20 = v18;
      int v38 = v18;
      swift_retain();
      double v21 = [v19 displayStartDate];
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v22 = [*(id *)(v20 + 16) displayStartDate];
      uint64_t v23 = v35;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      LOBYTE(v22) = static Date.< infix(_:_:)();
      uint64_t v24 = a3;
      uint64_t v25 = *v15;
      uint64_t v26 = v23;
      uint64_t v27 = v36;
      (*v15)(v26, v36);
      v25(v14, v27);
      a3 = v24;
      swift_release();
      uint64_t result = swift_release();
      if ((v22 & 1) == 0)
      {
LABEL_4:
        a3 = v24 + 1;
        uint64_t v13 = v32 + 1;
        if (v24 + 1 == v30) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v37) {
        break;
      }
      uint64_t v28 = *v13;
      uint64_t v16 = v13[1];
      void *v13 = v16;
      v13[1] = v28;
      --v13;
      if (v24 == ++v17) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v28 = a1;
  uint64_t v29 = type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster();
  uint64_t v7 = __chkstk_darwin(v29);
  uint64_t v32 = (uint64_t)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v26 - v10;
  uint64_t result = __chkstk_darwin(v9);
  uint64_t v15 = (char *)&v26 - v14;
  uint64_t v31 = a3;
  uint64_t v27 = a2;
  if (a3 != a2)
  {
    uint64_t v16 = *(void *)(v13 + 72);
    uint64_t v34 = v16 * (v31 - 1);
    uint64_t v30 = v16;
    uint64_t v33 = v16 * v31;
LABEL_5:
    uint64_t v17 = 0;
    uint64_t v18 = v28;
    while (1)
    {
      uint64_t v19 = a4;
      uint64_t v20 = *a4;
      outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v33 + v17 + v20, (uint64_t)v15);
      outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v34 + v17 + v20, (uint64_t)v11);
      uint64_t v21 = *((void *)v15 + 3);
      uint64_t v22 = *((void *)v11 + 3);
      outlined destroy of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v11);
      uint64_t result = outlined destroy of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v15);
      BOOL v23 = v21 < v22;
      a4 = v19;
      if (!v23)
      {
LABEL_4:
        v34 += v30;
        v33 += v30;
        if (++v31 == v27) {
          return result;
        }
        goto LABEL_5;
      }
      uint64_t v24 = *v19;
      if (!*v19) {
        break;
      }
      uint64_t v25 = v24 + v34 + v17;
      outlined init with take of MOSuggestionAssetMapsClusterer.Cluster(v24 + v33 + v17, v32);
      swift_arrayInitWithTakeFrontToBack();
      uint64_t result = outlined init with take of MOSuggestionAssetMapsClusterer.Cluster(v32, v25);
      v17 -= v30;
      ++v18;
      a4 = v19;
      if (v31 == v18) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  uint64_t v27 = a1;
  uint64_t v28 = type metadata accessor for MOSuggestionSheetAssetDateRange(0);
  uint64_t v7 = __chkstk_darwin(v28);
  uint64_t v31 = (uint64_t)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v25 - v10;
  uint64_t result = __chkstk_darwin(v9);
  uint64_t v15 = (char *)&v25 - v14;
  uint64_t v30 = a3;
  uint64_t v26 = a2;
  if (a3 != a2)
  {
    uint64_t v16 = *(void *)(v13 + 72);
    uint64_t v33 = v16 * (v30 - 1);
    uint64_t v29 = v16;
    uint64_t v32 = v16 * v30;
LABEL_5:
    uint64_t v17 = 0;
    uint64_t v18 = v27;
    while (1)
    {
      uint64_t v19 = a4;
      uint64_t v20 = *a4;
      outlined init with copy of MOSuggestionSheetAssetDateRange(v32 + v17 + v20, (uint64_t)v15, type metadata accessor for MOSuggestionSheetAssetDateRange);
      uint64_t v21 = v33 + v17 + v20;
      a4 = v19;
      outlined init with copy of MOSuggestionSheetAssetDateRange(v21, (uint64_t)v11, type metadata accessor for MOSuggestionSheetAssetDateRange);
      uint64_t v22 = static Date.< infix(_:_:)();
      outlined destroy of MOSuggestionSheetAssetDateRange((uint64_t)v11);
      uint64_t result = outlined destroy of MOSuggestionSheetAssetDateRange((uint64_t)v15);
      if ((v22 & 1) == 0)
      {
LABEL_4:
        v33 += v29;
        v32 += v29;
        if (++v30 == v26) {
          return result;
        }
        goto LABEL_5;
      }
      BOOL v23 = *v19;
      if (!*v19) {
        break;
      }
      uint64_t v24 = v23 + v33 + v17;
      outlined init with take of MOSuggestionSheetAssetDateRange(v23 + v32 + v17, v31, type metadata accessor for MOSuggestionSheetAssetDateRange);
      swift_arrayInitWithTakeFrontToBack();
      uint64_t result = outlined init with take of MOSuggestionSheetAssetDateRange(v31, v24, type metadata accessor for MOSuggestionSheetAssetDateRange);
      v17 -= v29;
      ++v18;
      a4 = v19;
      if (v30 == v18) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v40 = type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster();
  uint64_t v8 = __chkstk_darwin(v40);
  uint64_t v10 = (double *)((char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8);
  Swift::Int v12 = (double *)((char *)&v39 - v11);
  uint64_t v14 = *(void *)(v13 + 72);
  if (!v14)
  {
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  if (a2 - a1 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_70;
  }
  int64_t v15 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_71;
  }
  uint64_t v16 = (uint64_t)(a2 - a1) / v14;
  unint64_t v43 = a1;
  unint64_t v42 = a4;
  uint64_t v17 = v15 / v14;
  if (v16 >= v15 / v14)
  {
    if ((v17 & 0x8000000000000000) == 0)
    {
      uint64_t v19 = v17 * v14;
      if (a4 < a2 || a2 + v19 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v29 = a4 + v19;
      unint64_t v41 = a4 + v19;
      unint64_t v43 = a2;
      if (v19 >= 1 && a1 < a2)
      {
        uint64_t v31 = -v14;
        do
        {
          unint64_t v32 = a3 + v31;
          outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v29 + v31, (uint64_t)v12);
          unint64_t v33 = a2 + v31;
          outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(a2 + v31, (uint64_t)v10);
          double v34 = v12[2];
          double v35 = v10[2];
          outlined destroy of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v10);
          outlined destroy of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v12);
          if (v35 >= v34)
          {
            unint64_t v36 = v41;
            v41 += v31;
            if (a3 < v36 || v32 >= v36)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (a3 != v36)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            unint64_t v33 = a2;
          }
          else
          {
            if (a3 < a2 || v32 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (a3 != a2)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            v43 += v31;
          }
          unint64_t v29 = v41;
          if (v41 <= a4) {
            break;
          }
          a2 = v33;
          a3 += v31;
        }
        while (v33 > a1);
      }
      goto LABEL_68;
    }
  }
  else if ((v16 & 0x8000000000000000) == 0)
  {
    uint64_t v18 = v16 * v14;
    if (a4 < a1 || a1 + v18 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v20 = a4 + v18;
    unint64_t v41 = a4 + v18;
    if (v18 >= 1 && a2 < a3)
    {
      do
      {
        outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(a2, (uint64_t)v12);
        outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(a4, (uint64_t)v10);
        double v22 = v12[2];
        double v23 = v10[2];
        outlined destroy of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v10);
        outlined destroy of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v12);
        unint64_t v24 = v43;
        if (v23 >= v22)
        {
          unint64_t v27 = v42 + v14;
          if (v43 < v42 || v43 >= v27)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v43 != v42)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          unint64_t v42 = v27;
          unint64_t v25 = a2;
        }
        else
        {
          unint64_t v25 = a2 + v14;
          if (v43 < a2 || v43 >= v25)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v43 == a2)
          {
            unint64_t v24 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        unint64_t v43 = v24 + v14;
        a4 = v42;
        if (v42 >= v20) {
          break;
        }
        a2 = v25;
      }
      while (v25 < a3);
    }
LABEL_68:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v43, &v42, (uint64_t *)&v41);
    return 1;
  }
LABEL_72:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v27;
  unint64_t v29;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t result;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;

  Swift::Int v49 = type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster();
  uint64_t v8 = __chkstk_darwin(v49);
  Swift::Int v50 = (uint64_t)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v46 - v10;
  uint64_t v13 = *(void *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }
  if (a2 - a1 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_71;
  }
  uint64_t v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_72;
  }
  int64_t v15 = (uint64_t)(a2 - a1) / v13;
  uint64_t v53 = a1;
  Swift::Int v52 = a4;
  uint64_t v16 = v14 / v13;
  if (v15 >= v14 / v13)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      uint64_t v18 = v16 * v13;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v29 = a4 + v18;
      uint64_t v51 = a4 + v18;
      uint64_t v53 = a2;
      if (v18 >= 1 && a1 < a2)
      {
        uint64_t v31 = -v13;
        uint64_t v47 = a4;
        uint64_t v48 = a1;
        do
        {
          unint64_t v32 = a3 + v31;
          outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v29 + v31, (uint64_t)v11);
          unint64_t v33 = a2 + v31;
          double v34 = a3;
          double v35 = (uint64_t)v11;
          unint64_t v36 = v50;
          outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(a2 + v31, v50);
          uint64_t v37 = *(void *)(v35 + 24);
          int v38 = *(void *)(v36 + 24);
          uint64_t v39 = v36;
          uint64_t v11 = (char *)v35;
          outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v39);
          outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v35);
          if (v37 >= v38)
          {
            unint64_t v43 = v51;
            v51 += v31;
            if (v34 < v43 || v32 >= v43)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v33 = a2;
              unint64_t v41 = v47;
              unint64_t v42 = v48;
            }
            else
            {
              unint64_t v42 = v48;
              if (v34 != v43) {
                swift_arrayInitWithTakeBackToFront();
              }
              unint64_t v33 = a2;
              unint64_t v41 = v47;
            }
          }
          else
          {
            if (v34 < a2 || v32 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v41 = v47;
              unint64_t v42 = v48;
            }
            else
            {
              uint64_t v40 = v34 == a2;
              unint64_t v41 = v47;
              unint64_t v42 = v48;
              if (!v40) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            v53 += v31;
          }
          unint64_t v29 = v51;
          if (v51 <= v41) {
            break;
          }
          a2 = v33;
          a3 = v32;
        }
        while (v33 > v42);
      }
      goto LABEL_69;
    }
  }
  else if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v17 = v15 * v13;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    uint64_t v19 = a4 + v17;
    uint64_t v51 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      uint64_t v21 = v50;
      do
      {
        outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(a2, (uint64_t)v11);
        outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(a4, v21);
        double v22 = *((void *)v11 + 3);
        double v23 = *(void *)(v21 + 24);
        outlined destroy of MOSuggestionAssetMapsClusterer.Cluster(v21);
        outlined destroy of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v11);
        unint64_t v24 = v53;
        if (v22 >= v23)
        {
          unint64_t v27 = v52 + v13;
          if (v53 < v52 || v53 >= v27)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v53 != v52)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          Swift::Int v52 = v27;
          unint64_t v25 = a2;
        }
        else
        {
          unint64_t v25 = a2 + v13;
          if (v53 < a2 || v53 >= v25)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v53 == a2)
          {
            unint64_t v24 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        uint64_t v53 = v24 + v13;
        a4 = v52;
        if (v52 >= v19) {
          break;
        }
        a2 = v25;
      }
      while (v25 < a3);
    }
LABEL_69:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v53, &v52, (uint64_t *)&v51);
    return 1;
  }
LABEL_73:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t result;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;

  unint64_t v36 = type metadata accessor for MOSuggestionSheetAssetDateRange(0);
  uint64_t v8 = __chkstk_darwin(v36);
  uint64_t v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  Swift::Int v12 = (char *)&v34 - v11;
  uint64_t v14 = *(void *)(v13 + 72);
  if (!v14)
  {
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (a2 - a1 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_61;
  }
  int64_t v15 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_62;
  }
  uint64_t v16 = (uint64_t)(a2 - a1) / v14;
  uint64_t v39 = a1;
  int v38 = a4;
  uint64_t v17 = v15 / v14;
  if (v16 >= v15 / v14)
  {
    if ((v17 & 0x8000000000000000) == 0)
    {
      uint64_t v19 = v17 * v14;
      if (a4 < a2 || a2 + v19 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      uint64_t v26 = a4 + v19;
      uint64_t v37 = a4 + v19;
      uint64_t v39 = a2;
      double v35 = a1;
      if (v19 >= 1 && a1 < a2)
      {
        uint64_t v28 = -v14;
        do
        {
          unint64_t v29 = a3 + v28;
          outlined init with copy of MOSuggestionSheetAssetDateRange(v26 + v28, (uint64_t)v12, type metadata accessor for MOSuggestionSheetAssetDateRange);
          uint64_t v30 = a2 + v28;
          outlined init with copy of MOSuggestionSheetAssetDateRange(a2 + v28, (uint64_t)v10, type metadata accessor for MOSuggestionSheetAssetDateRange);
          uint64_t v31 = static Date.< infix(_:_:)();
          outlined destroy of MOSuggestionSheetAssetDateRange((uint64_t)v10);
          outlined destroy of MOSuggestionSheetAssetDateRange((uint64_t)v12);
          if (v31)
          {
            if (a3 < a2 || v29 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (a3 != a2)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            v39 += v28;
          }
          else
          {
            unint64_t v32 = v37;
            v37 += v28;
            if (a3 < v32 || v29 >= v32)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (a3 != v32)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v30 = a2;
          }
          uint64_t v26 = v37;
          if (v37 <= a4) {
            break;
          }
          a2 = v30;
          a3 += v28;
        }
        while (v30 > v35);
      }
      goto LABEL_59;
    }
  }
  else if ((v16 & 0x8000000000000000) == 0)
  {
    uint64_t v18 = v16 * v14;
    if (a4 < a1 || a1 + v18 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v20 = a4 + v18;
    uint64_t v37 = a4 + v18;
    if (v18 >= 1 && a2 < a3)
    {
      do
      {
        outlined init with copy of MOSuggestionSheetAssetDateRange(a2, (uint64_t)v12, type metadata accessor for MOSuggestionSheetAssetDateRange);
        outlined init with copy of MOSuggestionSheetAssetDateRange(a4, (uint64_t)v10, type metadata accessor for MOSuggestionSheetAssetDateRange);
        double v22 = static Date.< infix(_:_:)();
        outlined destroy of MOSuggestionSheetAssetDateRange((uint64_t)v10);
        outlined destroy of MOSuggestionSheetAssetDateRange((uint64_t)v12);
        double v23 = v39;
        if (v22)
        {
          unint64_t v24 = a2 + v14;
          if (v39 < a2 || v39 >= v24)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v39 == a2)
          {
            double v23 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        else
        {
          unint64_t v25 = v38 + v14;
          if (v39 < v38 || v39 >= v25)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v39 != v38)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          int v38 = v25;
          unint64_t v24 = a2;
        }
        uint64_t v39 = v23 + v14;
        a4 = v38;
        if (v38 >= v20) {
          break;
        }
        a2 = v24;
      }
      while (v24 < a3);
    }
LABEL_59:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v39, &v38, (uint64_t *)&v37);
    return 1;
  }
LABEL_63:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = a3;
    uint64_t v5 = a2;
    uint64_t v6 = a1;
    if (!(*v4 >> 62))
    {
      if (*(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v22 < v5) {
    goto LABEL_29;
  }
LABEL_4:
  uint64_t v8 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v7 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v10 = v23 + v7;
    if (!__OFADD__(v23, v7)) {
      goto LABEL_8;
    }
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (*v4 >> 62) {
    goto LABEL_32;
  }
  uint64_t v9 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v10 = v9 + v7;
  if (__OFADD__(v9, v7)) {
    goto LABEL_34;
  }
LABEL_8:
  unint64_t v11 = *v4;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  unint64_t *v4 = v11;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v11 & 0x8000000000000000) != 0
    || (v11 & 0x4000000000000000) != 0
    || (uint64_t v13 = v11 & 0xFFFFFFFFFFFFFF8, v10 > *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1))
  {
    if (!(v11 >> 62))
    {
LABEL_13:
      swift_bridgeObjectRetain();
      unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      swift_bridgeObjectRelease();
      unint64_t *v4 = v11;
      uint64_t v13 = v11 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_14;
    }
LABEL_35:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
LABEL_14:
  uint64_t v14 = (void *)(v13 + 32 + 8 * v6);
  type metadata accessor for MOSuggestionCollectionViewCellViewModel();
  swift_arrayDestroy();
  if (v7)
  {
    if (v11 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v16 = v24 - v5;
      if (!__OFSUB__(v24, v5))
      {
LABEL_17:
        if (v16 < 0)
        {
LABEL_42:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        uint64_t v17 = (char *)(v14 + 1);
        uint64_t v18 = (char *)(v13 + 32 + 8 * v5);
        if (v14 + 1 != (void *)v18 || v17 >= &v18[8 * v16]) {
          memmove(v17, v18, 8 * v16);
        }
        if (!(v11 >> 62))
        {
          uint64_t v19 = *(void *)(v13 + 16);
          uint64_t v20 = v19 + v7;
          if (!__OFADD__(v19, v7))
          {
LABEL_23:
            *(void *)(v13 + 16) = v20;
            goto LABEL_24;
          }
          goto LABEL_41;
        }
LABEL_39:
        swift_bridgeObjectRetain();
        uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v20 = v25 + v7;
        if (!__OFADD__(v25, v7)) {
          goto LABEL_23;
        }
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v15 = *(void *)(v13 + 16);
      uint64_t v16 = v15 - v5;
      if (!__OFSUB__(v15, v5)) {
        goto LABEL_17;
      }
    }
    __break(1u);
    goto LABEL_39;
  }
LABEL_24:
  void *v14 = v3;

  return specialized Array._endMutation()();
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v5 = *v3;
  int64_t v6 = *((void *)*v3 + 2);
  if (v6 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v10 > *((void *)v5 + 3) >> 1)
  {
    if (v6 <= v10) {
      int64_t v13 = v6 + v9;
    }
    else {
      int64_t v13 = v6;
    }
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v13, 1, v5, &demangling cache variable for type metadata for _ContiguousArrayStorage<[MOSuggestionCollectionViewCellViewModel]>, (uint64_t *)&demangling cache variable for type metadata for [MOSuggestionCollectionViewCellViewModel]);
  }
  uint64_t v14 = &v5[8 * a1 + 32];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [MOSuggestionCollectionViewCellViewModel]);
  uint64_t result = (char *)swift_arrayDestroy();
  if (!v9) {
    goto LABEL_20;
  }
  uint64_t v16 = *((void *)v5 + 2);
  BOOL v17 = __OFSUB__(v16, a2);
  uint64_t v18 = v16 - a2;
  if (v17) {
    goto LABEL_26;
  }
  if ((v18 & 0x8000000000000000) == 0)
  {
    uint64_t result = v14 + 8;
    uint64_t v19 = &v5[8 * a2 + 32];
    if (v14 + 8 != v19 || result >= &v19[8 * v18]) {
      uint64_t result = (char *)memmove(result, v19, 8 * v18);
    }
    uint64_t v20 = *((void *)v5 + 2);
    BOOL v17 = __OFADD__(v20, v9);
    uint64_t v21 = v20 + v9;
    if (!v17)
    {
      *((void *)v5 + 2) = v21;
LABEL_20:
      *(void *)uint64_t v14 = a3;
      *uint64_t v3 = v5;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8 - 8);
  Swift::Int v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v30 - v14;
  uint64_t v35 = a4;
  uint64_t v18 = *(void *)(a4 + 56);
  uint64_t v17 = a4 + 56;
  uint64_t v16 = v18;
  uint64_t v19 = -1 << *(unsigned char *)(v17 - 24);
  if (-v19 < 64) {
    uint64_t v20 = ~(-1 << -(char)v19);
  }
  else {
    uint64_t v20 = -1;
  }
  unint64_t v21 = v20 & v16;
  if (!a2)
  {
    int64_t v22 = 0;
    a3 = 0;
LABEL_38:
    *a1 = v35;
    a1[1] = v17;
    a1[2] = ~v19;
    a1[3] = v22;
    a1[4] = v21;
    return a3;
  }
  if (!a3)
  {
    int64_t v22 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v32 = -1 << *(unsigned char *)(v17 - 24);
  unint64_t v33 = a1;
  int64_t v22 = 0;
  uint64_t v23 = 0;
  int64_t v34 = (unint64_t)(63 - v19) >> 6;
  int64_t v31 = v34 - 1;
  if (!v21) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v24 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  unint64_t v25 = v24 | (v22 << 6);
  while (1)
  {
    ++v23;
    uint64_t v29 = *(void *)(v9 + 72);
    outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(*(void *)(v35 + 48) + v29 * v25, (uint64_t)v12);
    outlined init with take of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v12, (uint64_t)v15);
    uint64_t result = outlined init with take of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v15, a2);
    if (v23 == a3) {
      goto LABEL_37;
    }
    a2 += v29;
    if (v21) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v26 >= v34) {
      goto LABEL_32;
    }
    unint64_t v27 = *(void *)(v17 + 8 * v26);
    if (!v27) {
      break;
    }
LABEL_18:
    unint64_t v21 = (v27 - 1) & v27;
    unint64_t v25 = __clz(__rbit64(v27)) + (v26 << 6);
    int64_t v22 = v26;
  }
  v22 += 2;
  if (v26 + 1 >= v34)
  {
    unint64_t v21 = 0;
    int64_t v22 = v26;
    goto LABEL_36;
  }
  unint64_t v27 = *(void *)(v17 + 8 * v22);
  if (v27) {
    goto LABEL_14;
  }
  int64_t v28 = v26 + 2;
  if (v26 + 2 >= v34) {
    goto LABEL_32;
  }
  unint64_t v27 = *(void *)(v17 + 8 * v28);
  if (v27) {
    goto LABEL_17;
  }
  int64_t v22 = v26 + 3;
  if (v26 + 3 >= v34)
  {
    unint64_t v21 = 0;
    int64_t v22 = v26 + 2;
    goto LABEL_36;
  }
  unint64_t v27 = *(void *)(v17 + 8 * v22);
  if (v27)
  {
LABEL_14:
    int64_t v26 = v22;
    goto LABEL_18;
  }
  int64_t v28 = v26 + 4;
  if (v26 + 4 >= v34)
  {
LABEL_32:
    unint64_t v21 = 0;
LABEL_36:
    a3 = v23;
LABEL_37:
    uint64_t v19 = v32;
    a1 = v33;
    goto LABEL_38;
  }
  unint64_t v27 = *(void *)(v17 + 8 * v28);
  if (v27)
  {
LABEL_17:
    int64_t v26 = v28;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v26 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v26 >= v34)
    {
      unint64_t v21 = 0;
      int64_t v22 = v31;
      goto LABEL_36;
    }
    unint64_t v27 = *(void *)(v17 + 8 * v26);
    ++v28;
    if (v27) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    void v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    void *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 32 * a1 + 32);
    size_t v6 = 32 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + a1 + 32);
    size_t v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined assign with take of MOSuggestionAssetMapsClusterer.Cluster(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

double specialized static MOSuggestionAssetMapsClusterer.makeRegion(containing:applyBottomPaddingForPlatter:applyBottomPaddingForGradient:horizontalAspectRatio:markerStyle:applyRenderMargin:shouldAdjustMarker:)(unint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v8 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v9 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v9)
    {
LABEL_3:
      char v46 = a5;
      if ((a1 & 0xC000000000000001) != 0)
      {
        char v10 = a2;
        uint64_t v11 = specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_6:
        uint64_t v12 = swift_bridgeObjectRelease();
        double latitude = (*(double (**)(uint64_t))(*(void *)v11 + 240))(v12);
        (*(void (**)(void))(*(void *)v11 + 264))();
        double v14 = (*(double (**)(void))(*(void *)v11 + 456))();
        uint64_t v15 = (*(uint64_t (**)(void))(*(void *)v11 + 312))();
        char v17 = v16;
        if (v8)
        {
          swift_bridgeObjectRetain();
          int64_t v18 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v18 < 2) {
            goto LABEL_8;
          }
        }
        else
        {
          int64_t v18 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v18 < 2)
          {
LABEL_8:
            if ((v17 & 1) != 0 || v15 < 2)
            {
              if (v14 <= 0.0)
              {
                swift_release();
                double v19 = 0.04;
              }
              else
              {
                if (one-time initialization token for LOW_CONFIDENCE_HIGH_CERTAINTITY_THRESHOLD != -1) {
                  swift_once();
                }
                double v38 = *(double *)&static MOMapLocation.LOW_CONFIDENCE_HIGH_CERTAINTITY_THRESHOLD;
                swift_release();
                double v39 = v14 / 111000.0;
                if (v14 >= v38)
                {
                  double v40 = v39 * 3.0 + 0.003;
                  if (v40 <= 0.1) {
                    double v19 = v40;
                  }
                  else {
                    double v19 = 0.1;
                  }
                }
                else
                {
                  double v19 = v39 + v39 + 0.003;
                }
              }
            }
            else
            {
              swift_release();
              double v19 = 0.01;
            }
            double latitudeDelta = v19;
            if (v46)
            {
LABEL_31:
              double v37 = 1.4;
LABEL_32:
              if (v10) {
                return latitude + latitudeDelta * v37 * 1.4 / -12.0;
              }
              return latitude;
            }
LABEL_20:
            double v37 = 1.1;
            goto LABEL_32;
          }
        }
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18, 0);
        uint64_t v20 = 0;
        do
        {
          if ((a1 & 0xC000000000000001) != 0)
          {
            uint64_t v21 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            uint64_t v21 = *(void *)(a1 + 8 * v20 + 32);
            swift_retain();
          }
          double v22 = (*(double (**)(void))(*(void *)v21 + 240))();
          double v23 = (*(double (**)(void))(*(void *)v21 + 264))();
          swift_release();
          unint64_t v25 = _swiftEmptyArrayStorage[2];
          unint64_t v24 = _swiftEmptyArrayStorage[3];
          if (v25 >= v24 >> 1) {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
          }
          ++v20;
          _swiftEmptyArrayStorage[2] = v25 + 1;
          int64_t v26 = (double *)&_swiftEmptyArrayStorage[2 * v25 + 4];
          *int64_t v26 = v22;
          v26[1] = v23;
        }
        while (v18 != v20);
        id v27 = [self polygonWithCoordinates:&_swiftEmptyArrayStorage[4] count:v18];
        swift_bridgeObjectRelease();
        [v27 boundingMapRect];
        double v29 = v28;
        double v31 = v30;
        double v33 = v32;
        double v35 = v34;

        v47.origin.x = v29;
        v47.origin.double y = v31;
        v47.size.double width = v33;
        v47.size.double height = v35;
        MKCoordinateRegion v48 = MKCoordinateRegionForMapRect(v47);
        double latitude = v48.center.latitude;
        double latitudeDelta = v48.span.latitudeDelta;
        swift_release();
        if (v46) {
          goto LABEL_31;
        }
        goto LABEL_20;
      }
      if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        char v10 = a2;
        uint64_t v11 = *(void *)(a1 + 32);
        swift_retain();
        goto LABEL_6;
      }
      __break(1u);
      goto LABEL_43;
    }
  }
  swift_bridgeObjectRelease();
  if (serverManager._connectionProperties != (NSMutableDictionary *)-1) {
LABEL_43:
  }
    swift_once();
  uint64_t v41 = type metadata accessor for Logger();
  __swift_project_value_buffer(v41, (uint64_t)static MOAngelLogger.assets);
  unint64_t v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v44 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v44 = 0;
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "[MapSnapshot] makeRegion failed with 0 locations", v44, 2u);
    swift_slowDealloc();
  }

  v49.origin.x = MKMapRectNull.origin.x;
  v49.origin.double y = MKMapRectNull.origin.y;
  v49.size.double width = MKMapRectNull.size.width;
  v49.size.double height = MKMapRectNull.size.height;
  *(void *)&double latitude = (unint64_t)MKCoordinateRegionForMapRect(v49);
  return latitude;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MOMusicPlaybackCoordinatorDelegate);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MOAssetAndMediaType, Int));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 112 * a1 + 32;
    unint64_t v6 = a3 + 112 * v4;
    if (v5 >= v6 || v5 + 112 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (presentationDetails: MOClientPresentationDetails, handler: ()));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ());
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static MOSuggestionAssetMapsClusterer.clusteredPins(locations:targetRegion:numBuckets:)(unint64_t a1, uint64_t a2, double a3, long double a4, double a5, double a6)
{
  unint64_t v11 = a1;
  unint64_t v12 = a1 >> 62;
  if (a1 >> 62) {
    goto LABEL_145;
  }
  if (*(uint64_t *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2)
  {
LABEL_146:
    swift_bridgeObjectRetain();
    return v11;
  }
LABEL_3:
  if ((~*(void *)&a4 & 0x7FF0000000000000) != 0 && a4 < 0.0) {
    a4 = remainder(a4, 360.0) + 360.0;
  }
  double v13 = a6 * 0.5;
  a6 = a4 - a6 * 0.5;
  double v14 = a5 * 0.5 + a3;
  a5 = a3 - a5 * 0.5;
  double v15 = vabdd_f64(a5, v14) / (double)a2;
  if (v15 <= 0.0) {
    goto LABEL_146;
  }
  double v16 = vabdd_f64(a6, a4 + v13) / (double)a2;
  if (v16 <= 0.0) {
    goto LABEL_146;
  }
  uint64_t v104 = &_swiftEmptyDictionarySingleton;
  if (!v12)
  {
    uint64_t v17 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v17) {
      goto LABEL_10;
    }
LABEL_52:
    swift_bridgeObjectRelease();
    unint64_t v45 = &_swiftEmptyDictionarySingleton;
LABEL_53:
    unint64_t v103 = (unint64_t)_swiftEmptyArrayStorage;
    uint64_t v86 = v45 + 64;
    uint64_t v46 = 1 << v45[32];
    uint64_t v47 = -1;
    if (v46 < 64) {
      uint64_t v47 = ~(-1 << v46);
    }
    unint64_t v48 = v47 & *((void *)v45 + 8);
    int64_t v87 = (unint64_t)(v46 + 63) >> 6;
    swift_bridgeObjectRetain();
    int64_t v49 = 0;
    for (i = v45; ; unint64_t v45 = i)
    {
      while (2)
      {
        while (2)
        {
          if (v48)
          {
            unint64_t v50 = __clz(__rbit64(v48));
            v48 &= v48 - 1;
            unint64_t v51 = v50 | (v49 << 6);
          }
          else
          {
            int64_t v52 = v49 + 1;
            if (__OFADD__(v49, 1)) {
              goto LABEL_141;
            }
            if (v52 >= v87)
            {
LABEL_131:
              swift_release();
              unint64_t v11 = v103;
              swift_bridgeObjectRelease();
              return v11;
            }
            unint64_t v53 = *(void *)&v86[8 * v52];
            ++v49;
            if (!v53)
            {
              int64_t v49 = v52 + 1;
              if (v52 + 1 >= v87) {
                goto LABEL_131;
              }
              unint64_t v53 = *(void *)&v86[8 * v49];
              if (!v53)
              {
                int64_t v49 = v52 + 2;
                if (v52 + 2 >= v87) {
                  goto LABEL_131;
                }
                unint64_t v53 = *(void *)&v86[8 * v49];
                if (!v53)
                {
                  int64_t v54 = v52 + 3;
                  if (v54 >= v87) {
                    goto LABEL_131;
                  }
                  unint64_t v53 = *(void *)&v86[8 * v54];
                  if (!v53)
                  {
                    while (1)
                    {
                      int64_t v49 = v54 + 1;
                      if (__OFADD__(v54, 1)) {
                        break;
                      }
                      if (v49 >= v87) {
                        goto LABEL_131;
                      }
                      unint64_t v53 = *(void *)&v86[8 * v49];
                      ++v54;
                      if (v53) {
                        goto LABEL_72;
                      }
                    }
LABEL_149:
                    __break(1u);
LABEL_150:
                    __break(1u);
                    goto LABEL_151;
                  }
                  int64_t v49 = v54;
                }
              }
            }
LABEL_72:
            unint64_t v48 = (v53 - 1) & v53;
            unint64_t v51 = __clz(__rbit64(v53)) + (v49 << 6);
          }
          uint64_t v55 = *(void *)(*((void *)v45 + 7) + 8 * v51);
          connectionProperties = serverManager._connectionProperties;
          swift_bridgeObjectRetain();
          if (connectionProperties != (NSMutableDictionary *)-1) {
            swift_once();
          }
          uint64_t v57 = type metadata accessor for Logger();
          __swift_project_value_buffer(v57, (uint64_t)static MOAngelLogger.assets);
          swift_bridgeObjectRetain_n();
          uint64_t v58 = Logger.logObject.getter();
          a2 = static os_log_type_t.debug.getter();
          unint64_t v59 = (unint64_t)v55 >> 62;
          if (os_log_type_enabled(v58, (os_log_type_t)a2))
          {
            uint64_t v60 = swift_slowAlloc();
            *(_DWORD *)uint64_t v60 = 134217984;
            if (v59)
            {
              swift_bridgeObjectRetain();
              unint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
            }
            else
            {
              unint64_t v12 = *(void *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x10);
            }
            swift_bridgeObjectRelease();
            *(void *)(v60 + 4) = v12;
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v58, (os_log_type_t)a2, "[ClusterPins] Group Count %ld", (uint8_t *)v60, 0xCu);
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          if (v59)
          {
            if (v55 >= 0) {
              unint64_t v11 = v55 & 0xFFFFFFFFFFFFFF8;
            }
            else {
              unint64_t v11 = v55;
            }
            swift_bridgeObjectRetain();
            a2 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (a2 <= 1)
            {
              swift_bridgeObjectRetain();
              unint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
LABEL_120:
              if (!v11)
              {
                swift_bridgeObjectRelease();
                continue;
              }
              if ((v55 & 0xC000000000000001) != 0)
              {
                unint64_t v11 = specialized _ArrayBuffer._getElementSlowPath(_:)();
                goto LABEL_124;
              }
              if (*(void *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x10))
              {
                unint64_t v11 = *(void *)(v55 + 32);
                swift_retain();
LABEL_124:
                swift_bridgeObjectRelease();
                uint64_t v80 = Logger.logObject.getter();
                os_log_type_t v81 = static os_log_type_t.debug.getter();
                if (os_log_type_enabled(v80, v81))
                {
                  unint64_t v12 = swift_slowAlloc();
                  *(_WORD *)unint64_t v12 = 0;
                  _os_log_impl((void *)&_mh_execute_header, v80, v81, "[ClusterPins] Single location pass through", (uint8_t *)v12, 2u);
                  swift_slowDealloc();
                }

                swift_retain();
                a2 = (uint64_t)&v103;
                specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                if (*(void *)((v103 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v103 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                }
                specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized Array._endMutation()();
                swift_release();
                continue;
              }
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              swift_bridgeObjectRetain();
              uint64_t v82 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (v82 < 2) {
                goto LABEL_146;
              }
              goto LABEL_3;
            }
            int64_t v89 = v49;
            uint64_t v101 = 0;
            uint64_t v102 = 0;
            swift_bridgeObjectRetain();
            uint64_t v79 = _CocoaArrayWrapper.endIndex.getter();
            if (!v79)
            {
              swift_bridgeObjectRelease_n();
              continue;
            }
            uint64_t v61 = (uint8_t *)v79;
            if (v79 < 1) {
              goto LABEL_142;
            }
            uint64_t v85 = v55 & 0xFFFFFFFFFFFFFF8;
            uint64_t v88 = a2;
            unint64_t v91 = v48;
          }
          else
          {
            unint64_t v11 = *(void *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x10);
            if (v11 <= 1) {
              goto LABEL_120;
            }
            uint64_t v85 = v55 & 0xFFFFFFFFFFFFFF8;
            int64_t v89 = v49;
            unint64_t v91 = v48;
            uint64_t v101 = 0;
            uint64_t v102 = 0;
            swift_bridgeObjectRetain();
            uint64_t v88 = v11;
            uint64_t v61 = (uint8_t *)v11;
          }
          break;
        }
        unint64_t v62 = v55 & 0xC000000000000001;
        swift_beginAccess();
        swift_beginAccess();
        unint64_t v12 = 0;
        unint64_t v94 = 0;
        uint64_t v97 = v55;
        a5 = 0.0;
        a6 = 0.0;
        do
        {
          if (v62)
          {
            a2 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            a2 = *(void *)(v55 + 8 * v12 + 32);
            swift_retain();
          }
          a4 = (*(double (**)(void))(*(void *)a2 + 240))();
          a3 = (*(double (**)(void))(*(void *)a2 + 264))();
          unint64_t v11 = *(void *)a2 + 288;
          uint64_t v63 = *(uint64_t (**)(void))v11;
          uint64_t v64 = (*(uint64_t (**)(void))v11)();
          if (v64)
          {
            uint64_t v65 = v64;
            unint64_t v66 = (void *)v63();
            if (v66)
            {
              id v67 = [v66 _poiCategory];
              swift_unknownObjectRelease();
              if (v67)
              {

                uint64_t v101 = v65;
                swift_unknownObjectRelease();
                unint64_t v94 = v65;
              }
              else
              {
                swift_unknownObjectRelease();
              }
              uint64_t v55 = v97;
            }
            else
            {
              swift_unknownObjectRelease();
            }
          }
          uint64_t v68 = v63();
          swift_release();
          swift_unknownObjectRelease();
          uint64_t v69 = v102 + 1;
          if (__OFADD__(v102, 1))
          {
            __break(1u);
            goto LABEL_133;
          }
          ++v12;
          a6 = a6 + a4;
          a5 = a5 + a3;
          ++v102;
        }
        while (v61 != (uint8_t *)v12);
        swift_bridgeObjectRelease();
        unint64_t v11 = v94;
        if (v94)
        {
          int64_t v49 = v89;
          unint64_t v48 = v91;
          if (v69 > 0) {
            goto LABEL_100;
          }
LABEL_105:
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          unint64_t v45 = i;
          continue;
        }
        break;
      }
      int64_t v49 = v89;
      unint64_t v48 = v91;
      if (v68)
      {
        uint64_t v101 = v68;
        swift_unknownObjectRetain();
        swift_unknownObjectRelease();
        unint64_t v11 = v68;
      }
      if (v69 <= 0) {
        goto LABEL_105;
      }
LABEL_100:
      unint64_t v95 = v11;
      unint64_t v92 = v48;
      unint64_t v70 = Logger.logObject.getter();
      os_log_type_t v71 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v70, v71))
      {
        int64_t v72 = v49;
        uint64_t v73 = swift_slowAlloc();
        uint64_t v74 = swift_slowAlloc();
        *(_DWORD *)uint64_t v73 = 134218242;
        uint64_t v69 = v102;
        uint64_t v99 = v102;
        uint64_t v100 = v74;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v73 + 12) = 2080;
        unint64_t v95 = v101;
        uint64_t v99 = v101;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GEOMapItem?);
        uint64_t v75 = Optional.debugDescription.getter();
        uint64_t v99 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v75, v76, &v100);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v70, v71, "[ClusterPins] Conslidating %ld locations into a single pin, mapItem:%s", (uint8_t *)v73, 0x16u);
        swift_arrayDestroy();
        uint64_t v55 = v97;
        swift_slowDealloc();
        int64_t v49 = v72;
        swift_slowDealloc();
      }

      unint64_t v48 = v92;
      if (v62)
      {
        unint64_t v11 = v95;
        swift_unknownObjectRetain();
        uint64_t v77 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        goto LABEL_108;
      }
      unint64_t v11 = v95;
      if (!*(void *)(v85 + 16))
      {
        __break(1u);
        goto LABEL_149;
      }
      uint64_t v77 = *(void *)(v55 + 32);
      swift_unknownObjectRetain();
      swift_retain();
LABEL_108:
      uint64_t v78 = swift_bridgeObjectRelease();
      a4 = a6 / (double)v69;
      a3 = a5 / (double)v88;
      a5 = (*(double (**)(uint64_t))(*(void *)v77 + 360))(v78);
      swift_release();
      type metadata accessor for MOMapLocation();
      swift_allocObject();
      MOMapLocation.init(latitude:longitude:title:clusterCount:geoMapItem:confidenceLevel:isWork:enclosingArea:horizontalUncertainty:isScaledDownPOI:poiCateogory:)(0, 0xE000000000000000, v69, 0, v11, 0, 0, 0, a4, a3, a5, 0.0, 0, 0, 0xE000000000000000);
      a2 = (uint64_t)&v103;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      unint64_t v12 = *(void *)((v103 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v12 >= *(void *)((v103 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
  if (!v17) {
    goto LABEL_52;
  }
LABEL_10:
  uint64_t v93 = a2 + 1;
  if (__OFADD__(a2, 1)) {
    goto LABEL_150;
  }
  if (v17 >= 1)
  {
    unint64_t v12 = 0;
    unint64_t v96 = v11 & 0xC000000000000001;
    uint64_t v90 = v17;
    do
    {
      if (v96)
      {
        uint64_t v19 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v19 = *(void *)(v11 + 8 * v12 + 32);
        swift_retain();
      }
      a2 = v19;
      a4 = (*(double (**)(void))(*(void *)v19 + 240))();
      long double v20 = (*(double (**)(void))(*(void *)v19 + 264))();
      if (v20 < 0.0 && (*(void *)&v20 & 0x7FF0000000000000) != 0x7FF0000000000000)
      {
        a3 = 360.0;
        long double v20 = remainder(v20, 360.0) + 360.0;
      }
      double v22 = (a4 - a5) / v15;
      if (v22 <= -9.22337204e18)
      {
LABEL_133:
        __break(1u);
LABEL_134:
        __break(1u);
LABEL_135:
        __break(1u);
LABEL_136:
        __break(1u);
LABEL_137:
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_139:
        __break(1u);
LABEL_140:
        __break(1u);
LABEL_141:
        __break(1u);
LABEL_142:
        __break(1u);
        goto LABEL_143;
      }
      if (v22 >= 9.22337204e18) {
        goto LABEL_134;
      }
      double v23 = (v20 - a6) / v16;
      if ((*(void *)&v22 & 0x7FF0000000000000) == 0x7FF0000000000000
        || (*(void *)&v23 & 0x7FF0000000000000) == 0x7FF0000000000000)
      {
        goto LABEL_135;
      }
      if (v23 <= -9.22337204e18) {
        goto LABEL_136;
      }
      if (v23 >= 9.22337204e18) {
        goto LABEL_137;
      }
      uint64_t v25 = (uint64_t)v23 * v93;
      if ((unsigned __int128)((uint64_t)v23 * (__int128)v93) >> 64 != v25 >> 63) {
        goto LABEL_138;
      }
      uint64_t v26 = (uint64_t)v22 + v25;
      if (__OFADD__((uint64_t)v22, v25)) {
        goto LABEL_139;
      }
      id v27 = v104;
      if (v104[2] && (specialized __RawDictionaryStorage.find<A>(_:)(v26), (v28 & 1) != 0))
      {
        a2 = (uint64_t)&v104;
        double v30 = specialized Dictionary.subscript.modify(v98, v26);
        if (*v29)
        {
          a2 = (uint64_t)v29;
          swift_retain();
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((*(void *)a2 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)a2 & 0xFFFFFFFFFFFFFF8)
                                                                                      + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          ((void (*)(void *, void))v30)(v98, 0);
          swift_release();
        }
        else
        {
          ((void (*)(void *, void))v30)(v98, 0);
          swift_release();
        }
      }
      else
      {
        unint64_t v31 = v11;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        uint64_t v32 = swift_allocObject();
        *(_OWORD *)(v32 + 16) = xmmword_1001DA250;
        *(void *)(v32 + 32) = v19;
        v98[0] = v32;
        specialized Array._endMutation()();
        unint64_t v11 = v98[0];
        swift_retain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v98[0] = v27;
        a2 = (uint64_t)v27;
        unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v26);
        uint64_t v36 = v27[2];
        BOOL v37 = (v34 & 1) == 0;
        uint64_t v38 = v36 + v37;
        if (__OFADD__(v36, v37)) {
          goto LABEL_140;
        }
        char v39 = v34;
        if (v27[3] >= v38)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            specialized _NativeDictionary.copy()();
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v38, isUniquelyReferenced_nonNull_native);
          unint64_t v40 = specialized __RawDictionaryStorage.find<A>(_:)(v26);
          if ((v39 & 1) != (v41 & 1)) {
            goto LABEL_152;
          }
          unint64_t v35 = v40;
        }
        a2 = v98[0];
        if (v39)
        {
          uint64_t v18 = *(void *)(v98[0] + 56);
          swift_bridgeObjectRelease();
          *(void *)(v18 + 8 * v35) = v11;
        }
        else
        {
          *(void *)(v98[0] + 8 * (v35 >> 6) + 64) |= 1 << v35;
          *(void *)(*(void *)(a2 + 48) + 8 * v35) = v26;
          *(void *)(*(void *)(a2 + 56) + 8 * v35) = v11;
          uint64_t v42 = *(void *)(a2 + 16);
          BOOL v43 = __OFADD__(v42, 1);
          uint64_t v44 = v42 + 1;
          if (v43) {
            goto LABEL_144;
          }
          *(void *)(a2 + 16) = v44;
        }
        uint64_t v104 = (void *)a2;
        swift_release();
        swift_bridgeObjectRelease();
        unint64_t v11 = v31;
        uint64_t v17 = v90;
      }
      ++v12;
    }
    while (v17 != v12);
    swift_bridgeObjectRelease();
    unint64_t v45 = v104;
    goto LABEL_53;
  }
LABEL_151:
  __break(1u);
LABEL_152:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized MOSuggestionAssetMapsClusterer.printClusters(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster() - 8;
  uint64_t result = __chkstk_darwin(v2);
  unint64_t v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7)
  {
    uint64_t v8 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v9 = *(void *)(v4 + 72);
    v21[1] = a1;
    swift_bridgeObjectRetain();
    long long v22 = xmmword_1001DA0F0;
    do
    {
      outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v8, (uint64_t)v6);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
      uint64_t v10 = swift_allocObject();
      *(_OWORD *)(v10 + 16) = v22;
      uint64_t v24 = 0;
      unint64_t v25 = 0xE000000000000000;
      _StringGuts.grow(_:)(51);
      v11._countAndFlagsBits = 0x616E6964726F6F63;
      v11._object = (void *)0xED0000203A736574;
      String.append(_:)(v11);
      long long v23 = *(_OWORD *)v6;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Double, Double));
      _print_unlocked<A, B>(_:_:)();
      v12._countAndFlagsBits = 0x6E6174736964202CLL;
      v12._object = (void *)0xEC000000203A6563;
      String.append(_:)(v12);
      Double.write<A>(to:)();
      v13._countAndFlagsBits = 0x3A746E756F63202CLL;
      v13._object = (void *)0xE900000000000020;
      String.append(_:)(v13);
      *(void *)&long long v23 = *((void *)v6 + 3);
      v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
      v15._countAndFlagsBits = 0x3A6E69616863202CLL;
      v15._object = (void *)0xE900000000000020;
      String.append(_:)(v15);
      uint64_t v16 = *((void *)v6 + 4);
      uint64_t v17 = (void *)*((void *)v6 + 5);
      swift_bridgeObjectRetain();
      v18._countAndFlagsBits = v16;
      v18._object = v17;
      String.append(_:)(v18);
      swift_bridgeObjectRelease();
      uint64_t v19 = v24;
      unint64_t v20 = v25;
      *(void *)(v10 + 56) = &type metadata for String;
      *(void *)(v10 + 32) = v19;
      *(void *)(v10 + 40) = v20;
      print(_:separator:terminator:)();
      swift_bridgeObjectRelease();
      outlined destroy of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v6);
      v8 += v9;
      --v7;
    }
    while (v7);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t base witness table accessor for Equatable in MOSuggestionAssetMapsClusterer.Cluster()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type MOSuggestionAssetMapsClusterer.Cluster and conformance MOSuggestionAssetMapsClusterer.Cluster, (void (*)(uint64_t))type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster);
}

uint64_t lazy protocol witness table accessor for type UUID and conformance UUID(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100026478@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x78))();
  *a2 = result;
  return result;
}

uint64_t sub_1000264D4(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))((swift_isaMask & **a2) + 0x80);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_100026538@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x90))();
  *a2 = result;
  return result;
}

uint64_t sub_100026594(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))((swift_isaMask & **a2) + 0x98);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

void *initializeBufferWithCopyOfBuffer for MOSuggestionAssetMapsClusterer.Cluster(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    void *v4 = *a2;
    uint64_t v4 = (void *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    long long v7 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    uint64_t v8 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v8;
    uint64_t v9 = a3[8];
    uint64_t v10 = a1 + v9;
    uint64_t v11 = (uint64_t)a2 + v9;
    uint64_t v12 = type metadata accessor for UUID();
    Swift::String v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    uint64_t v14 = a3[10];
    *(void *)((char *)v4 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    *(void *)((char *)v4 + v14) = *(uint64_t *)((char *)a2 + v14);
    uint64_t v15 = a3[11];
    uint64_t v16 = a3[12];
    uint64_t v17 = (void *)((char *)v4 + v15);
    Swift::String v18 = (uint64_t *)((char *)a2 + v15);
    uint64_t v19 = v18[1];
    void *v17 = *v18;
    v17[1] = v19;
    *((unsigned char *)v4 + v16) = *((unsigned char *)a2 + v16);
    uint64_t v20 = a3[14];
    *((unsigned char *)v4 + a3[13]) = *((unsigned char *)a2 + a3[13]);
    *(void *)((char *)v4 + v20) = *(uint64_t *)((char *)a2 + v20);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for MOSuggestionAssetMapsClusterer.Cluster(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_unknownObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MOSuggestionAssetMapsClusterer.Cluster(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = a3[8];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  uint64_t v13 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(void *)(a1 + v13) = *(void *)(a2 + v13);
  uint64_t v14 = a3[11];
  uint64_t v15 = a3[12];
  uint64_t v16 = (void *)(a1 + v14);
  uint64_t v17 = (void *)(a2 + v14);
  uint64_t v18 = v17[1];
  void *v16 = *v17;
  v16[1] = v18;
  *(unsigned char *)(a1 + v15) = *(unsigned char *)(a2 + v15);
  uint64_t v19 = a3[14];
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  *(void *)(a1 + v19) = *(void *)(a2 + v19);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for MOSuggestionAssetMapsClusterer.Cluster(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[8];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)((char *)a1 + a3[10]) = *(void *)((char *)a2 + a3[10]);
  uint64_t v10 = a3[11];
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  void *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[12]) = *((unsigned char *)a2 + a3[12]);
  *((unsigned char *)a1 + a3[13]) = *((unsigned char *)a2 + a3[13]);
  *(void *)((char *)a1 + a3[14]) = *(void *)((char *)a2 + a3[14]);
  return a1;
}

_OWORD *initializeWithTake for MOSuggestionAssetMapsClusterer.Cluster(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = a3[8];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[10];
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  *(void *)((char *)a1 + v11) = *(void *)((char *)a2 + v11);
  uint64_t v12 = a3[12];
  *(_OWORD *)((char *)a1 + a3[11]) = *(_OWORD *)((char *)a2 + a3[11]);
  *((unsigned char *)a1 + v12) = *((unsigned char *)a2 + v12);
  uint64_t v13 = a3[14];
  *((unsigned char *)a1 + a3[13]) = *((unsigned char *)a2 + a3[13]);
  *(void *)((char *)a1 + v13) = *(void *)((char *)a2 + v13);
  return a1;
}

uint64_t assignWithTake for MOSuggestionAssetMapsClusterer.Cluster(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[8];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_unknownObjectRelease();
  uint64_t v10 = a3[11];
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (uint64_t *)(a2 + v10);
  uint64_t v14 = *v12;
  uint64_t v13 = v12[1];
  void *v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[13];
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  *(unsigned char *)(a1 + v15) = *(unsigned char *)(a2 + v15);
  *(void *)(a1 + a3[14]) = *(void *)(a2 + a3[14]);
  return a1;
}

uint64_t getEnumTagSinglePayload for MOSuggestionAssetMapsClusterer.Cluster(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100026C08);
}

uint64_t sub_100026C08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 40);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UUID();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 32);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for MOSuggestionAssetMapsClusterer.Cluster(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100026CCC);
}

uint64_t sub_100026CCC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 40) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 32);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for MOSuggestionAssetMapsClusterer.Cluster()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2)
{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, &demangling cache variable for type metadata for _ContiguousArrayStorage<MOSuggestionAssetPhotoLivePhotoVideosProvider.LivePhotoTask>, (uint64_t (*)(void))type metadata accessor for MOSuggestionAssetPhotoLivePhotoVideosProvider.LivePhotoTask, (uint64_t (*)(void))type metadata accessor for MOSuggestionAssetPhotoLivePhotoVideosProvider.LivePhotoTask, (uint64_t (*)(void))type metadata accessor for MOSuggestionAssetPhotoLivePhotoVideosProvider.LivePhotoTask);
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  unint64_t v8 = *v6;
  int64_t v9 = *(void *)(*v6 + 16);
  if (v9 < a2)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v11 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (__OFSUB__(0, v11))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  int64_t v12 = v9 - v11;
  if (__OFADD__(v9, a1 - a2))
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  unint64_t v31 = v6;
  uint64_t v32 = a1 - a2;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v12 > *(void *)(v8 + 24) >> 1)
  {
    if (v9 <= v12) {
      int64_t v18 = v9 - v11;
    }
    else {
      int64_t v18 = v9;
    }
    unint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v18, 1, v8, a3, a4, a5);
  }
  uint64_t v19 = *(void *)(a6(0) - 8);
  unint64_t v20 = v8 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
  uint64_t v21 = *(void *)(v19 + 72);
  uint64_t v22 = v21 * a1;
  unint64_t v23 = v20 + v21 * a1;
  uint64_t result = swift_arrayDestroy();
  if (!v32) {
    goto LABEL_25;
  }
  uint64_t v25 = *(void *)(v8 + 16);
  uint64_t v26 = v25 - a2;
  if (__OFSUB__(v25, a2)) {
    goto LABEL_31;
  }
  if ((v26 & 0x8000000000000000) == 0)
  {
    if (v22 < v21 * a2 || v23 >= v20 + v21 * a2 + v26 * v21)
    {
      uint64_t result = swift_arrayInitWithTakeFrontToBack();
    }
    else if (v22 != v21 * a2)
    {
      uint64_t result = swift_arrayInitWithTakeBackToFront();
    }
    uint64_t v28 = *(void *)(v8 + 16);
    BOOL v29 = __OFADD__(v28, v32);
    uint64_t v30 = v28 + v32;
    if (!v29)
    {
      *(void *)(v8 + 16) = v30;
LABEL_25:
      unint64_t *v31 = v8;
      return result;
    }
    goto LABEL_32;
  }
LABEL_33:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = a2;
    uint64_t v4 = a1;
    if (!(*v3 >> 62))
    {
      if (*(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v18 < v2) {
    goto LABEL_29;
  }
LABEL_4:
  uint64_t v6 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v5 = v4 - v2;
  if (__OFSUB__(0, v6))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v8 = v19 + v5;
    if (!__OFADD__(v19, v5)) {
      goto LABEL_8;
    }
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (*v3 >> 62) {
    goto LABEL_32;
  }
  uint64_t v7 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v8 = v7 - v6;
  if (__OFADD__(v7, v5)) {
    goto LABEL_34;
  }
LABEL_8:
  unint64_t v9 = *v3;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v3 = v9;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v9 & 0x8000000000000000) != 0
    || (v9 & 0x4000000000000000) != 0
    || (uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8, v8 > *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1))
  {
    if (!(v9 >> 62))
    {
LABEL_13:
      swift_bridgeObjectRetain();
      unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      swift_bridgeObjectRelease();
      *uint64_t v3 = v9;
      uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_14;
    }
LABEL_35:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
LABEL_14:
  type metadata accessor for MOSuggestionCollectionViewCellViewModel();
  swift_arrayDestroy();
  if (v5)
  {
    if (v9 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v13 = v20 - v2;
      if (!__OFSUB__(v20, v2))
      {
LABEL_17:
        if (v13 < 0)
        {
LABEL_42:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        uint64_t v14 = (const void *)(v11 + 32 + 8 * v2);
        if (v4 != v2 || v11 + 32 + 8 * v4 >= (unint64_t)v14 + 8 * v13) {
          memmove((void *)(v11 + 32 + 8 * v4), v14, 8 * v13);
        }
        if (!(v9 >> 62))
        {
          uint64_t v15 = *(void *)(v11 + 16);
          uint64_t v16 = v15 + v5;
          if (!__OFADD__(v15, v5))
          {
LABEL_23:
            *(void *)(v11 + 16) = v16;
            goto LABEL_24;
          }
          goto LABEL_41;
        }
LABEL_39:
        swift_bridgeObjectRetain();
        uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v16 = v21 + v5;
        if (!__OFADD__(v21, v5)) {
          goto LABEL_23;
        }
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v12 = *(void *)(v11 + 16);
      uint64_t v13 = v12 - v2;
      if (!__OFSUB__(v12, v2)) {
        goto LABEL_17;
      }
    }
    __break(1u);
    goto LABEL_39;
  }
LABEL_24:

  return specialized Array._endMutation()();
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 16 * a1 + 32;
    unint64_t v7 = a3 + 16 * v5;
    if (v6 >= v7 || v6 + 16 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 8 * a1 + 32;
    unint64_t v7 = a3 + 8 * v5;
    if (v6 >= v7 || v6 + 8 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined consume of Set<String>.Iterator._Variant()
{
  return swift_release();
}

uint64_t specialized == infix<A>(_:_:)()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

double specialized Dictionary.subscript.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  if (*(void *)(a2 + 16) && (unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v6 & 1) != 0))
  {
    uint64_t v7 = *(void *)(a2 + 56) + 32 * v5;
    outlined init with copy of Any(v7, (uint64_t)a3);
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

{
  unint64_t v5;
  char v6;
  uint64_t v7;
  double result;
  uint64_t vars8;

  if (*(void *)(a2 + 16) && (unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v6 & 1) != 0))
  {
    uint64_t v7 = *(void *)(a2 + 56) + 32 * v5;
    outlined init with copy of Any(v7, (uint64_t)a3);
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

void *specialized Dictionary.subscript.getter(void *a1, uint64_t a2)
{
  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(void *)(a2 + 16))
    {
      unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a1);
      if (v7)
      {
        unint64_t v5 = *(void **)(*(void *)(a2 + 56) + 8 * v6);
        id v8 = v5;
        return v5;
      }
    }
    return 0;
  }
  id v3 = a1;
  uint64_t v4 = __CocoaDictionary.lookup(_:)();

  if (!v4) {
    return 0;
  }
  type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for HKUnit);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  unint64_t v5 = v10;
  swift_unknownObjectRelease();
  return v5;
}

uint64_t MOSuggestionInterstitialListAssetViewModel.__allocating_init(stateOfMindAssets:bundleStartDate:bundleEndDate:)(unint64_t a1, void *a2, Swift::OpaquePointer a3)
{
  char v7 = (char *)type metadata accessor for MOSuggestionSheetAssetDateRange(0);
  uint64_t v154 = *((void *)v7 - 1);
  __chkstk_darwin(v7);
  uint64_t v156 = (uint64_t)&v136 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (void *)(a1 >> 62);
  if (a1 >> 62) {
    goto LABEL_104;
  }
  int64_t v10 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v10 < 1)
  {
LABEL_105:
    swift_bridgeObjectRelease();
    uint64_t v128 = type metadata accessor for Date();
    uint64_t v129 = *(void (**)(void *, uint64_t))(*(void *)(v128 - 8) + 8);
    v129(a3._rawValue, v128);
    v129(a2, v128);
    return 0;
  }
LABEL_3:
  uint64_t v159 = (uint64_t)v9;
  v160 = v7;
  uint64_t v142 = v3;
  rawValue = a3._rawValue;
  v152 = a2;
  uint64_t v165 = (uint64_t)_swiftEmptyArrayStorage;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
  a2 = 0;
  a3._rawValue = (void *)v165;
  unint64_t v162 = a1 & 0xC000000000000001;
  char v7 = (char *)&type metadata for String;
  unint64_t v161 = a1;
  do
  {
    if (v162) {
      id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v11 = *(id *)(a1 + 8 * (void)a2 + 32);
    }
    uint64_t v9 = v11;
    id v12 = [v11 identifier];
    a1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v14 = v13;

    *(void *)&v169[0] = a1;
    *((void *)&v169[0] + 1) = v14;
    *(void *)&unsigned long long v163 = 35;
    *((void *)&v163 + 1) = 0xE100000000000000;
    lazy protocol witness table accessor for type String and conformance String();
    id v3 = v169;
    uint64_t v15 = (void *)StringProtocol.components<A>(separatedBy:)();
    if (!v15[2])
    {
      __break(1u);
LABEL_104:
      swift_bridgeObjectRetain();
      int64_t v10 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v10 < 1) {
        goto LABEL_105;
      }
      goto LABEL_3;
    }
    uint64_t v16 = v15[4];
    uint64_t v17 = v15[5];
    swift_bridgeObjectRetain();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v165 = (uint64_t)a3._rawValue;
    unint64_t v19 = *((void *)a3._rawValue + 2);
    unint64_t v18 = *((void *)a3._rawValue + 3);
    if (v19 >= v18 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
      a3._rawValue = (void *)v165;
    }
    a2 = (char *)a2 + 1;
    *((void *)a3._rawValue + 2) = v19 + 1;
    uint64_t v20 = (char *)a3._rawValue + 16 * v19;
    *((void *)v20 + 4) = v16;
    *((void *)v20 + 5) = v17;
    a1 = v161;
  }
  while ((void *)v10 != a2);
  Swift::String v21 = String.init(combinedIdentifiersFrom:)(a3);
  uint64_t countAndFlagsBits = v21._countAndFlagsBits;
  object = v21._object;
  uint64_t v22 = (char *)MOSuggestionAssetsTypeStateOfMindAsset;
  unint64_t v167 = (unint64_t)_swiftEmptyArrayStorage;
  unint64_t v168 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v23 = type metadata accessor for Date();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = v156;
  (*(void (**)(uint64_t, void *, uint64_t))(v24 + 16))(v156, v152, v23);
  uint64_t v26 = v25 + *((int *)v160 + 5);
  uint64_t v145 = v24;
  id v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56);
  uint64_t v146 = v23;
  v27(v26, 1, 1, v23);
  uint64_t v147 = v22;
  if (v159)
  {
    swift_bridgeObjectRetain();
    uint64_t v112 = v22;
    uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v30 = (_OWORD *)&unk_1001DA000;
    if (!v28) {
      goto LABEL_90;
    }
LABEL_13:
    if (v28 < 1)
    {
      __break(1u);
      goto LABEL_112;
    }
    uint64_t v31 = 0;
    v158 = _swiftEmptyArrayStorage;
    v160 = (char *)&type metadata for Any + 8;
    long long v153 = v30[15];
    long long v143 = xmmword_1001DA250;
    long long v140 = xmmword_1001DA390;
    uint64_t v139 = (void *)0x80000001001E1990;
    Swift::tuple_tuple_Int_Int_Double_optional v138 = (void *)0x80000001001E19D0;
    Swift::Int v137 = (void *)0x80000001001E1950;
    uint64_t v159 = v28;
    while (1)
    {
      id v32 = v162 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(a1 + 8 * v31 + 32);
      double v33 = v32;
      id v34 = [v32 assetType];
      uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v37 = v36;
      if (v35 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v37 == v38)
      {

        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v40 & 1) == 0)
        {
          [v33 contentClassType];
          uint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
          if (ObjCClassMetadata != type metadata accessor for MOSuggestionGenericFallBackInfo())
          {
            if (serverManager._clientConnections != (NSMutableDictionary *)-1) {
              swift_once();
            }
            uint64_t v42 = type metadata accessor for Logger();
            __swift_project_value_buffer(v42, (uint64_t)static MOAngelLogger.shared);
            BOOL v43 = Logger.logObject.getter();
            os_log_type_t v44 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v43, v44))
            {
              unint64_t v45 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)unint64_t v45 = 0;
              _os_log_impl((void *)&_mh_execute_header, v43, v44, "[MOSuggestionInterstitialListAssetViewModel.stateOfMindAsset] Mismatched init for asset type", v45, 2u);
              swift_slowDealloc();
            }

LABEL_88:
            goto LABEL_16;
          }
        }
      }
      id v46 = [v33 content];
      self;
      uint64_t v47 = swift_dynamicCastObjCClass();
      if (v47) {
        break;
      }

      swift_unknownObjectRelease();
LABEL_16:
      if (v28 == ++v31) {
        goto LABEL_91;
      }
    }
    uint64_t v48 = v47;
    id v49 = [v33 metadata];
    uint64_t v50 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v51 = specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(v50);
    swift_bridgeObjectRelease();
    if (v51)
    {
      if (*(void *)(v51 + 16))
      {
        id v52 = MOSuggestionAssetMetadataKeyStateOfMindValenceClassificationAndReflectiveIntervalLocalized;
        unint64_t v53 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v52);
        if (v54)
        {
          outlined init with copy of Any(*(void *)(v51 + 56) + 32 * v53, (uint64_t)&v163);
        }
        else
        {
          long long v164 = 0u;
          unsigned long long v163 = 0u;
        }

        a1 = v161;
        if (*((void *)&v164 + 1))
        {
          if (swift_dynamicCast())
          {
            uint64_t v55 = v165;
            uint64_t v157 = v166;
            memset(v169, 0, sizeof(v169));
            char v170 = 1;
            type metadata accessor for MOSuggestionSheetImage();
            swift_allocObject();
            swift_unknownObjectRetain();
            uint64_t v155 = MOSuggestionSheetImage.init(image:associatedTintColor:associatedBackgroundColor:tileBackgroundColor:shouldBeRounded:squareCrop:extraMargin:)(v48, 0, 0, 0, 0, (uint64_t)v169, 0, 1);
            if (*(void *)(v51 + 16))
            {
              id v56 = MOSuggestionAssetMetadataKeyStateOfMindLabelsLocalized;
              unint64_t v57 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v56);
              if (v58)
              {
                outlined init with copy of Any(*(void *)(v51 + 56) + 32 * v57, (uint64_t)&v163);
              }
              else
              {
                long long v164 = 0u;
                unsigned long long v163 = 0u;
              }

              if (*((void *)&v164 + 1))
              {
                if (swift_dynamicCast())
                {
                  uint64_t v59 = v165;
                  unint64_t v60 = v166;
                  goto LABEL_56;
                }
LABEL_55:
                uint64_t v59 = 0;
                unint64_t v60 = 0xE000000000000000;
LABEL_56:
                if (*(void *)(v51 + 16))
                {
                  id v61 = MOSuggestionAssetMetadataKeyStateOfMindDomainsLocalized;
                  unint64_t v62 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v61);
                  if (v63)
                  {
                    outlined init with copy of Any(*(void *)(v51 + 56) + 32 * v62, (uint64_t)&v163);
                  }
                  else
                  {
                    long long v164 = 0u;
                    unsigned long long v163 = 0u;
                  }
                }
                else
                {
                  long long v164 = 0uLL;
                  unsigned long long v163 = 0uLL;
                }
                swift_bridgeObjectRelease();
                if (*((void *)&v164 + 1))
                {
                  if (swift_dynamicCast())
                  {
                    uint64_t v65 = v165;
                    unint64_t v64 = v166;
                    if (v59)
                    {
LABEL_71:
                      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                      {
                        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
                        uint64_t v66 = swift_allocObject();
                        *(_OWORD *)(v66 + 16) = v140;
                        uint64_t v67 = v157;
                        *(void *)(v66 + 32) = v55;
                        *(void *)(v66 + 40) = v67;
                        *(void *)(v66 + 48) = v59;
                        *(void *)(v66 + 56) = v60;
                        *(void *)&unsigned long long v163 = v66;
                        id v68 = [self mainBundle];
                        unint64_t v151 = v64;
                        id v69 = v68;
                        v171._uint64_t countAndFlagsBits = 0xD000000000000033;
                        v171._object = v137;
                        v70._uint64_t countAndFlagsBits = 8236;
                        v70._object = (void *)0xE200000000000000;
                        v71._uint64_t countAndFlagsBits = 0;
                        v71._object = (void *)0xE000000000000000;
                        NSLocalizedString(_:tableName:bundle:value:comment:)(v70, (Swift::String_optional)0, (NSBundle)v69, v71, v171);

                        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
                        lazy protocol witness table accessor for type [String] and conformance [A]();
                        uint64_t v72 = BidirectionalCollection<>.joined(separator:)();
                        unint64_t v64 = v151;
                        uint64_t v55 = v72;
                        uint64_t v157 = v73;
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        if (!v65) {
                          goto LABEL_75;
                        }
                        goto LABEL_76;
                      }
                      swift_bridgeObjectRelease();
                      if (v65) {
                        goto LABEL_76;
                      }
LABEL_75:
                      if (v64 != 0xE000000000000000)
                      {
LABEL_76:
                        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                        {
                          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
                          uint64_t v74 = swift_allocObject();
                          *(_OWORD *)(v74 + 16) = v140;
                          uint64_t v75 = v157;
                          *(void *)(v74 + 32) = v55;
                          *(void *)(v74 + 40) = v75;
                          unint64_t v76 = self;
                          uint64_t v157 = v65;
                          uint64_t v77 = v76;
                          uint64_t v78 = (void *)v64;
                          id v79 = [v76 mainBundle];
                          v172._object = v139;
                          v80._uint64_t countAndFlagsBits = 10272;
                          v80._object = (void *)0xE200000000000000;
                          v81._uint64_t countAndFlagsBits = 0;
                          v81._object = (void *)0xE000000000000000;
                          v172._uint64_t countAndFlagsBits = 0xD00000000000003ELL;
                          unsigned long long v82 = (unsigned __int128)NSLocalizedString(_:tableName:bundle:value:comment:)(v80, (Swift::String_optional)0, (NSBundle)v79, v81, v172);

                          unsigned long long v163 = v82;
                          swift_bridgeObjectRetain();
                          v83._uint64_t countAndFlagsBits = v157;
                          v83._object = v78;
                          String.append(_:)(v83);
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          unint64_t v84 = *((void *)&v163 + 1);
                          unint64_t v85 = v163;
                          id v86 = [v77 mainBundle];
                          v173._object = v138;
                          v87._uint64_t countAndFlagsBits = 41;
                          v87._object = (void *)0xE100000000000000;
                          v88._uint64_t countAndFlagsBits = 0;
                          v88._object = (void *)0xE000000000000000;
                          v173._uint64_t countAndFlagsBits = 0xD00000000000003ELL;
                          Swift::String v89 = NSLocalizedString(_:tableName:bundle:value:comment:)(v87, (Swift::String_optional)0, (NSBundle)v86, v88, v173);

                          unsigned long long v163 = __PAIR128__(v84, v85);
                          swift_bridgeObjectRetain();
                          String.append(_:)(v89);
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          uint64_t v90 = *((void *)&v163 + 1);
                          *(void *)(v74 + 48) = v163;
                          *(void *)(v74 + 56) = v90;
                          *(void *)&unsigned long long v163 = v74;
                          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
                          lazy protocol witness table accessor for type [String] and conformance [A]();
                          uint64_t v55 = BidirectionalCollection<>.joined(separator:)();
                          uint64_t v157 = v91;
                        }
                      }
                      swift_bridgeObjectRelease();
                      id v92 = [v33 identifier];
                      uint64_t v93 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                      uint64_t v95 = v94;

                      *(void *)&unsigned long long v163 = v93;
                      *((void *)&v163 + 1) = v95;
                      uint64_t v165 = 35;
                      unint64_t v166 = 0xE100000000000000;
                      uint64_t v96 = (uint64_t)&v163;
                      uint64_t v97 = (void *)StringProtocol.components<A>(separatedBy:)();
                      if (!v97[2])
                      {
                        __break(1u);
                        goto LABEL_107;
                      }
                      uint64_t v99 = v97[4];
                      uint64_t v98 = v97[5];
                      uint64_t v150 = v99;
                      uint64_t v149 = v98;
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MOSuggestionSheetAssetDateRange>);
                      unint64_t v100 = (*(unsigned __int8 *)(v154 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v154 + 80);
                      uint64_t v101 = swift_allocObject();
                      *(_OWORD *)(v101 + 16) = v153;
                      outlined init with copy of MOSuggestionSheetAssetDateRange(v156, v101 + v100);
                      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
                      uint64_t v102 = swift_allocObject();
                      *(_OWORD *)(v102 + 16) = v153;
                      unint64_t v151 = v55;
                      uint64_t v103 = v157;
                      *(void *)(v102 + 32) = v55;
                      *(void *)(v102 + 40) = v103;
                      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
                      uint64_t v104 = swift_allocObject();
                      *(_OWORD *)(v104 + 16) = v143;
                      *(void *)(v104 + 32) = v155;
                      *(void *)&unsigned long long v163 = v104;
                      specialized Array._endMutation()();
                      uint64_t v105 = v163;
                      type metadata accessor for MOSuggestionInterstitialListAssetViewModel();
                      swift_allocObject();
                      swift_bridgeObjectRetain();
                      swift_retain();
                      MOSuggestionInterstitialListAssetViewModel.init(id:subViewModels:topLevelGroupHeading:dates:titles:icons:assetVisualSubType:selectable:isLoadingPlaceHolder:isFallback:)(v150, v149, 0, 0, 0, v101, v102, v105, 25, 1, 0, 0);
                      swift_retain();
                      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                      if (*(void *)((v168 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v168 & 0xFFFFFFFFFFFFFF8)
                                                                                         + 0x18) >> 1)
                        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                      specialized Array._endMutation()();
                      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                      a1 = v161;
                      uint64_t v28 = v159;
                      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                        v158 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v158[2] + 1, 1, v158);
                      }
                      unint64_t v108 = v158[2];
                      unint64_t v107 = v158[3];
                      if (v108 >= v107 >> 1) {
                        v158 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v107 > 1), v108 + 1, 1, v158);
                      }
                      unint64_t v109 = v158;
                      v158[2] = v108 + 1;
                      uint64_t v110 = &v109[2 * v108];
                      uint64_t v111 = v157;
                      v110[4] = v151;
                      v110[5] = v111;
                      swift_retain();
                      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                      if (*(void *)((v167 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v167 & 0xFFFFFFFFFFFFFF8)
                                                                                         + 0x18) >> 1)
                        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                      specialized Array._endMutation()();
                      swift_release();
                      swift_release();
                      swift_unknownObjectRelease();
                      goto LABEL_88;
                    }
LABEL_68:
                    if (v60 != 0xE000000000000000) {
                      goto LABEL_71;
                    }
                    swift_bridgeObjectRelease();
                    if (!v65) {
                      goto LABEL_75;
                    }
                    goto LABEL_76;
                  }
                }
                else
                {
                  outlined destroy of Any?((uint64_t)&v163, &demangling cache variable for type metadata for Any?);
                }
                uint64_t v65 = 0;
                unint64_t v64 = 0xE000000000000000;
                if (v59) {
                  goto LABEL_71;
                }
                goto LABEL_68;
              }
            }
            else
            {
              long long v164 = 0u;
              unsigned long long v163 = 0u;
            }
            outlined destroy of Any?((uint64_t)&v163, &demangling cache variable for type metadata for Any?);
            goto LABEL_55;
          }
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_47;
        }
      }
      else
      {
        long long v164 = 0u;
        unsigned long long v163 = 0u;
      }
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();

      outlined destroy of Any?((uint64_t)&v163, &demangling cache variable for type metadata for Any?);
LABEL_48:
      uint64_t v28 = v159;
      goto LABEL_16;
    }
    swift_unknownObjectRelease();
LABEL_47:

    goto LABEL_48;
  }
  uint64_t v28 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  BOOL v29 = v22;
  uint64_t v30 = &unk_1001DA000;
  if (v28) {
    goto LABEL_13;
  }
LABEL_90:
  v158 = _swiftEmptyArrayStorage;
LABEL_91:
  swift_bridgeObjectRelease();
  uint64_t v96 = v167;
  if (v167 >> 62)
  {
LABEL_107:
    swift_bridgeObjectRetain();
    uint64_t v130 = _CocoaArrayWrapper.endIndex.getter();
    a3._rawValue = v152;
    char v7 = v147;
    if (!v130) {
      goto LABEL_108;
    }
LABEL_93:
    if ((v96 & 0xC000000000000001) == 0)
    {
      if (!*(void *)((v96 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_116;
      }
      swift_retain();
LABEL_96:
      swift_bridgeObjectRelease();
      uint64_t v96 = (*((uint64_t (**)(uint64_t, void *, void, void, void, void, void, void, int))v142 + 43))(countAndFlagsBits, object, 0, 0, 0, 0, 0, 0, 281);
      unint64_t v114 = v168;
      if (v168 >> 62)
      {
        swift_retain();
        swift_bridgeObjectRetain();
        uint64_t v134 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v134 < 2) {
          goto LABEL_102;
        }
      }
      else
      {
        uint64_t v115 = *(void *)((v168 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_retain();
        if (v115 < 2)
        {
LABEL_102:
          swift_bridgeObjectRelease();
          uint64_t v118 = MOSuggestionInterstitialListAssetViewModel._groupAssetTypeAndCountDescription(with:)(0);
          uint64_t v120 = v119;
          swift_beginAccess();
          *(void *)(v96 + 24) = v118;
          *(void *)(v96 + 32) = v120;
          swift_bridgeObjectRelease();
          swift_beginAccess();
          *(void *)(v96 + 48) = v158;
          swift_bridgeObjectRelease();
          unint64_t v121 = v167;
          swift_beginAccess();
          *(void *)(v96 + 56) = v121;
          swift_bridgeObjectRelease();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MOSuggestionSheetAssetDateRange>);
          unint64_t v122 = (*(unsigned __int8 *)(v154 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v154 + 80);
          uint64_t v123 = swift_allocObject();
          *(_OWORD *)(v123 + 16) = xmmword_1001DA0F0;
          uint64_t v124 = v123 + v122;
          uint64_t v125 = v156;
          outlined init with copy of MOSuggestionSheetAssetDateRange(v156, v124);
          swift_release();

          uint64_t v126 = *(void (**)(void *, uint64_t))(v145 + 8);
          uint64_t v127 = v146;
          v126(rawValue, v146);
          v126(a3._rawValue, v127);
          outlined destroy of MOSuggestionSheetAssetDateRange(v125);
          swift_beginAccess();
          *(void *)(v96 + 40) = v123;
          swift_release();
          swift_bridgeObjectRelease();
          return v96;
        }
      }
      if ((v114 & 0x8000000000000000) == 0 && (v114 & 0x4000000000000000) == 0)
      {
        uint64_t v116 = v114 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain();
LABEL_101:
        *(void *)&unsigned long long v163 = v116;
        specialized MutableCollection<>.sort(by:)((uint64_t *)&v163);
        swift_bridgeObjectRelease();
        uint64_t v117 = v163;
        swift_beginAccess();
        *(void *)(v96 + 16) = v117;
        goto LABEL_102;
      }
LABEL_116:
      unint64_t v135 = swift_bridgeObjectRetain();
      uint64_t v116 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v135);
      swift_bridgeObjectRelease();
      goto LABEL_101;
    }
LABEL_112:
    specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_96;
  }
  uint64_t v113 = *(void *)((v167 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  a3._rawValue = v152;
  char v7 = v147;
  if (v113) {
    goto LABEL_93;
  }
LABEL_108:
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  unint64_t v131 = *(void (**)(void *, uint64_t))(v145 + 8);
  uint64_t v132 = v146;
  v131(rawValue, v146);
  v131(a3._rawValue, v132);
  outlined destroy of MOSuggestionSheetAssetDateRange(v156);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MOSuggestionAssetMetadataKey, Any>);
    uint64_t v1 = (unsigned char *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v1 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v27 = a1 + 64;
  uint64_t v2 = -1 << *(unsigned char *)(a1 + 32);
  if (-v2 < 64) {
    uint64_t v3 = ~(-1 << -(char)v2);
  }
  else {
    uint64_t v3 = -1;
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v26 = (unint64_t)(63 - v2) >> 6;
  unint64_t v5 = v1 + 64;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v7 = 0;
  while (1)
  {
    if (v4)
    {
      uint64_t v9 = (v4 - 1) & v4;
      unint64_t v10 = __clz(__rbit64(v4)) | (v7 << 6);
      int64_t v11 = v7;
      goto LABEL_28;
    }
    int64_t v12 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    if (v12 >= v26) {
      goto LABEL_39;
    }
    unint64_t v13 = *(void *)(v27 + 8 * v12);
    int64_t v11 = v7 + 1;
    if (!v13)
    {
      int64_t v11 = v7 + 2;
      if (v7 + 2 >= v26) {
        goto LABEL_39;
      }
      unint64_t v13 = *(void *)(v27 + 8 * v11);
      if (!v13)
      {
        int64_t v11 = v7 + 3;
        if (v7 + 3 >= v26) {
          goto LABEL_39;
        }
        unint64_t v13 = *(void *)(v27 + 8 * v11);
        if (!v13)
        {
          int64_t v11 = v7 + 4;
          if (v7 + 4 >= v26) {
            goto LABEL_39;
          }
          unint64_t v13 = *(void *)(v27 + 8 * v11);
          if (!v13) {
            break;
          }
        }
      }
    }
LABEL_27:
    uint64_t v9 = (v13 - 1) & v13;
    unint64_t v10 = __clz(__rbit64(v13)) + (v11 << 6);
LABEL_28:
    outlined init with copy of AnyHashable(*(void *)(a1 + 48) + 40 * v10, (uint64_t)v37);
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v10, (uint64_t)v38 + 8);
    v35[0] = v38[0];
    v35[1] = v38[1];
    uint64_t v36 = v39;
    v34[0] = v37[0];
    v34[1] = v37[1];
    outlined init with copy of AnyHashable((uint64_t)v34, (uint64_t)v31);
    type metadata accessor for MOSuggestionAssetMetadataKey(0);
    if (!swift_dynamicCast())
    {
      uint64_t v30 = 0;
      outlined destroy of Any?((uint64_t)v34, &demangling cache variable for type metadata for (key: AnyHashable, value: Any));
      uint64_t v25 = v30;
      swift_release();

      outlined consume of Set<String>.Iterator._Variant();
      swift_release();
      return 0;
    }
    uint64_t v15 = v30;
    outlined init with copy of Any((uint64_t)v35 + 8, (uint64_t)v31);
    outlined destroy of Any?((uint64_t)v34, &demangling cache variable for type metadata for (key: AnyHashable, value: Any));
    outlined init with take of Any(v31, (_OWORD *)((char *)v32 + 8));
    outlined init with take of Any((_OWORD *)((char *)v32 + 8), v29);
    uint64_t v16 = v15;
    outlined init with take of Any(v29, v33);
    outlined init with take of Any(v33, v32);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v17 = Hasher._finalize()();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v18 = -1 << v1[32];
    unint64_t v19 = v17 & ~v18;
    unint64_t v20 = v19 >> 6;
    if (((-1 << v19) & ~*(void *)&v5[8 * (v19 >> 6)]) != 0)
    {
      unint64_t v8 = __clz(__rbit64((-1 << v19) & ~*(void *)&v5[8 * (v19 >> 6)])) | v19 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v21 = 0;
      unint64_t v22 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (++v20 == v22 && (v21 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v23 = v20 == v22;
        if (v20 == v22) {
          unint64_t v20 = 0;
        }
        v21 |= v23;
        uint64_t v24 = *(void *)&v5[8 * v20];
      }
      while (v24 == -1);
      unint64_t v8 = __clz(__rbit64(~v24)) + (v20 << 6);
    }
    *(void *)&v5[(v8 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v8;
    *(void *)(*((void *)v1 + 6) + 8 * v8) = v16;
    uint64_t result = (uint64_t)outlined init with take of Any(v32, (_OWORD *)(*((void *)v1 + 7) + 32 * v8));
    ++*((void *)v1 + 2);
    int64_t v7 = v11;
    unint64_t v4 = v9;
  }
  int64_t v14 = v7 + 5;
  if (v7 + 5 >= v26)
  {
LABEL_39:
    swift_release();
    outlined consume of Set<String>.Iterator._Variant();
    return (uint64_t)v1;
  }
  unint64_t v13 = *(void *)(v27 + 8 * v14);
  if (v13)
  {
    int64_t v11 = v7 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v11 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v11 >= v26) {
      goto LABEL_39;
    }
    unint64_t v13 = *(void *)(v27 + 8 * v11);
    ++v14;
    if (v13) {
      goto LABEL_27;
    }
  }
LABEL_42:
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
    *a1 = v2;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  return specialized ContiguousArray._endMutation()();
}

{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v6[2];

  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
    *a1 = v2;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  return specialized ContiguousArray._endMutation()();
}

{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v6[2];

  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
    *a1 = v2;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  return specialized ContiguousArray._endMutation()();
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v2;
  uint64_t vars8;

  Swift::Int v2 = static Hasher._hash(seed:_:)();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v2;
  uint64_t vars8;

  type metadata accessor for UUID();
  _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  Swift::Int v2 = dispatch thunk of Hashable._rawHashValue(seed:)();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  uint64_t vars8;

  Swift::Int v2 = v1;
  uint64_t v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  uint64_t vars8;

  Swift::Int v2 = v1;
  uint64_t v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(char a1)
{
  Hasher.init(_seed:)();
  MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields.rawValue.getter(a1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v2 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;
  unsigned char v4[72];
  uint64_t vars8;

  Hasher.init(_seed:)();
  MOSuggestionAssetTileSize.hash(into:)((uint64_t)v4, a1);
  Swift::Int v2 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(void *a1, Swift::UInt a2, char a3)
{
  char v6 = a3 & 1;
  Hasher.init(_seed:)();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v7 = a1;
  String.hash(into:)();

  swift_bridgeObjectRelease();
  if (a3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(a2);
  }
  Swift::Int v8 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)((uint64_t)v7, a2, v6, v8);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
            break;
          }
          char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  uint64_t v4 = v2 + 64;
  unint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (uint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            uint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void (*v11)(char *, unint64_t, uint64_t);
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  unint64_t v19 = a1;
  uint64_t v4 = type metadata accessor for UUID();
  unint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v20 = v2;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v9 = a2 & ~v8;
  char v18 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    unint64_t v10 = ~v8;
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v12 = v5 + 16;
    char v11 = v13;
    uint64_t v14 = *(void *)(v12 + 56);
    do
    {
      v11(v7, *(void *)(v20 + 48) + v14 * v9, v4);
      _s10Foundation4UUIDVACSHAAWlTm_0(&lazy protocol witness table cache variable for type UUID and conformance UUID);
      uint64_t v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v12 - 8))(v7, v4);
      if (v15) {
        break;
      }
      uint64_t v9 = (v9 + 1) & v10;
    }
    while (((*(void *)(v18 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char v6;
  unsigned char v8[40];

  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    unint64_t v5 = ~v3;
    do
    {
      outlined init with copy of AnyHashable(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      uint64_t v6 = static AnyHashable.== infix(_:_:)();
      outlined destroy of AnyHashable((uint64_t)v8);
      if (v6) {
        break;
      }
      uint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  id v6;
  char v7;
  uint64_t v8;
  id v9;
  char v10;

  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  double i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for HKQuantityType);
    uint64_t v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    uint64_t v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (double i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; double i = (i + 1) & v8)
      {
        uint64_t v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        unint64_t v10 = static NSObject.== infix(_:_:)();

        if (v10) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  const char *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  const char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;

  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    uint64_t v6 = a1;
    while (1)
    {
      uint64_t v7 = 0xE900000000000073;
      uint64_t v8 = 0x74657373416D756ELL;
      switch(*(unsigned char *)(*(void *)(v2 + 48) + v4))
      {
        case 1:
          uint64_t v9 = "cal";
          goto LABEL_12;
        case 2:
          unint64_t v10 = "numAssets_Contact";
          goto LABEL_20;
        case 3:
          uint64_t v8 = 0xD000000000000012;
          uint64_t v7 = 0x80000001001E0E40;
          break;
        case 4:
          uint64_t v7 = 0xEF616964654D5F73;
          break;
        case 5:
          uint64_t v8 = 0xD000000000000018;
          uint64_t v7 = 0x80000001001E0E70;
          break;
        case 6:
          uint64_t v7 = 0xEF6F746F68505F73;
          break;
        case 7:
          uint64_t v8 = 0xD000000000000014;
          uint64_t v7 = 0x80000001001E0EA0;
          break;
        case 8:
          uint64_t v7 = 0xEF6F656469565F73;
          break;
        case 9:
          uint64_t v9 = "tion";
          goto LABEL_12;
        case 0xA:
          uint64_t v8 = 0xD000000000000016;
          uint64_t v7 = 0x80000001001E0EF0;
          break;
        case 0xB:
          unint64_t v10 = "numAssets_WorkoutGroup";
          goto LABEL_20;
        case 0xC:
          uint64_t v9 = "numAssetsAuthorized";
LABEL_12:
          uint64_t v7 = (unint64_t)v9 | 0x8000000000000000;
          uint64_t v8 = 0xD000000000000011;
          break;
        case 0xD:
          unint64_t v10 = "suggestionSubtype";
          goto LABEL_20;
        case 0xE:
          uint64_t v8 = 0x726566736E617274;
          uint64_t v7 = 0xEA00000000004449;
          break;
        case 0xF:
          unint64_t v10 = "suggestionSupertype";
LABEL_20:
          uint64_t v7 = (unint64_t)v10 | 0x8000000000000000;
          uint64_t v8 = 0xD000000000000013;
          break;
        default:
          break;
      }
      char v11 = 0x74657373416D756ELL;
      uint64_t v12 = 0xE900000000000073;
      switch(v6)
      {
        case 1:
          uint64_t v13 = "cal";
          goto LABEL_31;
        case 2:
          uint64_t v14 = "numAssets_Contact";
          goto LABEL_47;
        case 3:
          uint64_t v16 = "numAssets_LivePhoto";
          uint64_t v15 = 0xD000000000000012;
          goto LABEL_37;
        case 4:
          uint64_t v12 = 0xEF616964654D5F73;
          if (v8 != 0x74657373416D756ELL) {
            goto LABEL_49;
          }
          goto LABEL_48;
        case 5:
          uint64_t v15 = 0xD000000000000018;
          uint64_t v16 = "on";
          goto LABEL_37;
        case 6:
          Swift::Int v17 = 0x746F68505F73;
          goto LABEL_41;
        case 7:
          uint64_t v15 = 0xD000000000000014;
          uint64_t v16 = "Activity";
LABEL_37:
          uint64_t v12 = (unint64_t)v16 | 0x8000000000000000;
          if (v8 != v15) {
            goto LABEL_49;
          }
          goto LABEL_48;
        case 8:
          Swift::Int v17 = 0x656469565F73;
LABEL_41:
          uint64_t v12 = v17 & 0xFFFFFFFFFFFFLL | 0xEF6F000000000000;
          if (v8 != 0x74657373416D756ELL) {
            goto LABEL_49;
          }
          goto LABEL_48;
        case 9:
          uint64_t v13 = "tion";
          goto LABEL_31;
        case 10:
          char v11 = 0xD000000000000016;
          uint64_t v12 = 0x80000001001E0EF0;
          goto LABEL_44;
        case 11:
          uint64_t v14 = "numAssets_WorkoutGroup";
          goto LABEL_47;
        case 12:
          uint64_t v13 = "numAssetsAuthorized";
LABEL_31:
          uint64_t v12 = (unint64_t)v13 | 0x8000000000000000;
          if (v8 != 0xD000000000000011) {
            goto LABEL_49;
          }
          goto LABEL_48;
        case 13:
          uint64_t v14 = "suggestionSubtype";
          goto LABEL_47;
        case 14:
          uint64_t v12 = 0xEA00000000004449;
          if (v8 != 0x726566736E617274) {
            goto LABEL_49;
          }
          goto LABEL_48;
        case 15:
          uint64_t v14 = "suggestionSupertype";
LABEL_47:
          uint64_t v12 = (unint64_t)v14 | 0x8000000000000000;
          if (v8 == 0xD000000000000013) {
            goto LABEL_48;
          }
          goto LABEL_49;
        default:
LABEL_44:
          if (v8 != v11) {
            goto LABEL_49;
          }
LABEL_48:
          if (v7 == v12)
          {
            swift_bridgeObjectRelease_n();
            return v4;
          }
LABEL_49:
          char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v18) {
            return v4;
          }
          uint64_t v4 = (v4 + 1) & v5;
          if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
            return v4;
          }
          break;
      }
    }
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;

  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v6 = ~v4;
    while (2)
    {
      switch(*(unsigned char *)(*(void *)(v2 + 48) + result))
      {
        case 2:
          if (a1 != 2) {
            goto LABEL_4;
          }
          break;
        case 3:
          if (a1 != 3) {
            goto LABEL_4;
          }
          break;
        case 4:
          if (a1 != 4) {
            goto LABEL_4;
          }
          break;
        case 5:
          if (a1 != 5) {
            goto LABEL_4;
          }
          break;
        case 6:
          if (a1 != 6) {
            goto LABEL_4;
          }
          break;
        case 7:
          if (a1 != 7) {
            goto LABEL_4;
          }
          break;
        case 8:
          if (a1 != 8) {
            goto LABEL_4;
          }
          break;
        case 9:
          if (a1 != 9) {
            goto LABEL_4;
          }
          break;
        case 0xA:
          if (a1 != 10) {
            goto LABEL_4;
          }
          break;
        default:
          if a1 - 2 < 9 || ((*(unsigned __int8 *)(*(void *)(v2 + 48) + result) ^ a1))
          {
LABEL_4:
            unint64_t result = (result + 1) & v6;
            if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result)) {
              continue;
            }
          }
          break;
      }
      break;
    }
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    unint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v5 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v6 = a4 & ~v5;
  if ((*(void *)(v4 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v7 = ~v5;
    do
    {
      uint64_t v8 = *(void *)(v4 + 48) + 24 * v6;
      uint64_t v9 = *(void *)(v8 + 8);
      char v10 = *(unsigned char *)(v8 + 16);
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v13 = v12;
      if (v11 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v13 == v14)
      {
        swift_bridgeObjectRelease_n();
        if (v10)
        {
LABEL_3:
          if (a3) {
            return v6;
          }
          goto LABEL_4;
        }
      }
      else
      {
        char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v16 & 1) == 0) {
          goto LABEL_4;
        }
        if (v10) {
          goto LABEL_3;
        }
      }
      if ((a3 & 1) == 0 && v9 == a2) {
        return v6;
      }
LABEL_4:
      unint64_t v6 = (v6 + 1) & v7;
    }
    while (((*(void *)(v4 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
  }
  return v6;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(uint64_t *__src, uint64_t *a2, unint64_t a3, uint64_t *__dst)
{
  unint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = (char *)a2 - (char *)__src;
  int64_t v9 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v9 = (char *)a2 - (char *)__src;
  }
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 3;
  uint64_t v37 = __src;
  uint64_t v36 = __dst;
  id v32 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      uint64_t v19 = v4;
      if (__dst != a2 || &a2[v13] <= __dst)
      {
        memmove(__dst, a2, 8 * v13);
        __dst = v32;
      }
      unint64_t v20 = &__dst[v13];
      uint64_t v35 = v20;
      uint64_t v37 = v6;
      if (v7 >= v6 || v11 < 8) {
        goto LABEL_48;
      }
      char v21 = (uint64_t *)(a3 - 8);
      unint64_t v22 = v6;
      uint64_t v31 = v7;
      while (1)
      {
        BOOL v23 = v20;
        uint64_t v24 = *--v20;
        uint64_t v34 = v24;
        uint64_t v25 = *--v22;
        uint64_t v33 = v25;
        swift_retain();
        swift_retain();
        char v26 = closure #1 in Array<A>.sortedByAscendingTime.getter(&v34, &v33);
        if (v19) {
          goto LABEL_47;
        }
        char v27 = v26;
        uint64_t v28 = v21 + 1;
        swift_release();
        swift_release();
        if (v27)
        {
          BOOL v29 = v32;
          if (v28 != v6 || v21 >= v6) {
            *char v21 = *v22;
          }
          uint64_t v37 = v22;
          uint64_t v19 = 0;
          unint64_t v20 = v23;
        }
        else
        {
          uint64_t v35 = v20;
          BOOL v29 = v32;
          if (v28 < v23 || v21 >= v23 || v28 != v23) {
            *char v21 = *v20;
          }
          unint64_t v22 = v6;
          uint64_t v19 = 0;
        }
        if (v22 > v31)
        {
          --v21;
          unint64_t v6 = v22;
          if (v20 > v29) {
            continue;
          }
        }
        goto LABEL_48;
      }
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[v10] <= __dst)
    {
      memmove(__dst, __src, 8 * v10);
      __dst = v32;
    }
    uint64_t v14 = &__dst[v10];
    uint64_t v35 = v14;
    if ((unint64_t)v6 >= a3 || v8 < 8) {
      goto LABEL_48;
    }
    while (1)
    {
      uint64_t v34 = *v6;
      uint64_t v15 = __dst;
      uint64_t v33 = *__dst;
      swift_retain();
      swift_retain();
      char v16 = closure #1 in Array<A>.sortedByAscendingTime.getter(&v34, &v33);
      if (v4) {
        break;
      }
      char v17 = v16;
      swift_release();
      swift_release();
      if (v17)
      {
        char v18 = v6 + 1;
        if (v7 < v6 || v7 >= v18 || v7 != v6) {
          *uint64_t v7 = *v6;
        }
        __dst = v15;
      }
      else
      {
        if (v7 != v15) {
          *uint64_t v7 = *v15;
        }
        __dst = v15 + 1;
        uint64_t v36 = v15 + 1;
        char v18 = v6;
      }
      uint64_t v37 = ++v7;
      if (__dst < v14)
      {
        unint64_t v6 = v18;
        if ((unint64_t)v18 < a3) {
          continue;
        }
      }
      goto LABEL_48;
    }
LABEL_47:
    swift_release();
    swift_release();
LABEL_48:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v37, &v36, &v35);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t *v6;
  uint64_t *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  BOOL v16;
  BOOL v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  BOOL v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t result;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;

  unint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = (char *)a2 - (char *)__src;
  int64_t v9 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v9 = (char *)a2 - (char *)__src;
  }
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 3;
  uint64_t v37 = __src;
  uint64_t v36 = __dst;
  id v32 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      uint64_t v19 = v4;
      if (__dst != a2 || &a2[v13] <= __dst)
      {
        memmove(__dst, a2, 8 * v13);
        __dst = v32;
      }
      unint64_t v20 = &__dst[v13];
      uint64_t v35 = v20;
      uint64_t v37 = v6;
      if (v7 >= v6 || v11 < 8) {
        goto LABEL_48;
      }
      char v21 = (uint64_t *)(a3 - 8);
      unint64_t v22 = v6;
      uint64_t v31 = v7;
      while (1)
      {
        BOOL v23 = v20;
        uint64_t v24 = *--v20;
        uint64_t v34 = v24;
        uint64_t v25 = *--v22;
        uint64_t v33 = v25;
        swift_retain();
        swift_retain();
        char v26 = closure #1 in MOEventBundle.typeSortedAssetReferencesForInterstitial.getter(&v34, &v33);
        if (v19) {
          goto LABEL_47;
        }
        char v27 = v26;
        uint64_t v28 = v21 + 1;
        swift_release();
        swift_release();
        if (v27)
        {
          BOOL v29 = v32;
          if (v28 != v6 || v21 >= v6) {
            *char v21 = *v22;
          }
          uint64_t v37 = v22;
          uint64_t v19 = 0;
          unint64_t v20 = v23;
        }
        else
        {
          uint64_t v35 = v20;
          BOOL v29 = v32;
          if (v28 < v23 || v21 >= v23 || v28 != v23) {
            *char v21 = *v20;
          }
          unint64_t v22 = v6;
          uint64_t v19 = 0;
        }
        if (v22 > v31)
        {
          --v21;
          unint64_t v6 = v22;
          if (v20 > v29) {
            continue;
          }
        }
        goto LABEL_48;
      }
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[v10] <= __dst)
    {
      memmove(__dst, __src, 8 * v10);
      __dst = v32;
    }
    uint64_t v14 = &__dst[v10];
    uint64_t v35 = v14;
    if ((unint64_t)v6 >= a3 || v8 < 8) {
      goto LABEL_48;
    }
    while (1)
    {
      uint64_t v34 = *v6;
      uint64_t v15 = __dst;
      uint64_t v33 = *__dst;
      swift_retain();
      swift_retain();
      char v16 = closure #1 in MOEventBundle.typeSortedAssetReferencesForInterstitial.getter(&v34, &v33);
      if (v4) {
        break;
      }
      char v17 = v16;
      swift_release();
      swift_release();
      if (v17)
      {
        char v18 = v6 + 1;
        if (v7 < v6 || v7 >= v18 || v7 != v6) {
          *uint64_t v7 = *v6;
        }
        __dst = v15;
      }
      else
      {
        if (v7 != v15) {
          *uint64_t v7 = *v15;
        }
        __dst = v15 + 1;
        uint64_t v36 = v15 + 1;
        char v18 = v6;
      }
      uint64_t v37 = ++v7;
      if (__dst < v14)
      {
        unint64_t v6 = v18;
        if ((unint64_t)v18 < a3) {
          continue;
        }
      }
      goto LABEL_48;
    }
LABEL_47:
    swift_release();
    swift_release();
LABEL_48:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v37, &v36, &v35);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  unint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

{
  uint64_t (*v6)();

  unint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

{
  uint64_t (*v6)();

  unint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](void (**a1)(id *a1), unint64_t a2, uint64_t a3))()
{
  unint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

void protocol witness for Collection.subscript.read in conformance [A]specialized (void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t (*specialized Array.subscript.read(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    uint64_t v4 = swift_retain();
LABEL_5:
    *uint64_t v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

{
  uint64_t (*v3)();
  id v4;

  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    uint64_t v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;

  uint64_t v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    uint64_t v4 = swift_retain();
LABEL_5:
    *uint64_t v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

uint64_t outlined init with copy of MOSuggestionSheetAssetDateRange(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MOSuggestionSheetAssetDateRange(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of MOSuggestionSheetAssetDateRange(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MOSuggestionSheetAssetDateRange(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [String]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t _s10Foundation4UUIDVACSHAAWlTm_0(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for UUID();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void (*specialized Array.subscript.read(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

void Array.subscript.readspecialized (id *a1)
{
}

uint64_t Array.subscript.readspecialized ()
{
  return swift_release();
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  return a1;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t outlined destroy of Any?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with take of MOSuggestionSheetAssetDateRange(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MOSuggestionSheetAssetDateRange(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t MOAngelLogger.shared.unsafeMutableAddressor()
{
  return MOAngelLogger.shared.unsafeMutableAddressor(&serverManager._clientConnections, (uint64_t (*)(void))&type metadata accessor for Logger, (uint64_t)static MOAngelLogger.shared);
}

uint64_t MOAngelLogger.memory.unsafeMutableAddressor()
{
  return MOAngelLogger.shared.unsafeMutableAddressor(&serverManager._displayMonitor, (uint64_t (*)(void))&type metadata accessor for Logger, (uint64_t)static MOAngelLogger.memory);
}

uint64_t MOAngelLogger.assets.unsafeMutableAddressor()
{
  return MOAngelLogger.shared.unsafeMutableAddressor(&serverManager._connectionProperties, (uint64_t (*)(void))&type metadata accessor for Logger, (uint64_t)static MOAngelLogger.assets);
}

uint64_t one-time initialization function for shared(uint64_t a1)
{
  return one-time initialization function for shared(a1, static MOAngelLogger.shared);
}

uint64_t static MOAngelLogger.shared.getter@<X0>(uint64_t a1@<X8>)
{
  return static MOAngelLogger.shared.getter(&serverManager._clientConnections, (uint64_t (*)(void))&type metadata accessor for Logger, (uint64_t)static MOAngelLogger.shared, a1);
}

uint64_t one-time initialization function for assets(uint64_t a1)
{
  return one-time initialization function for shared(a1, static MOAngelLogger.assets);
}

uint64_t static MOAngelLogger.assets.getter@<X0>(uint64_t a1@<X8>)
{
  return static MOAngelLogger.shared.getter(&serverManager._connectionProperties, (uint64_t (*)(void))&type metadata accessor for Logger, (uint64_t)static MOAngelLogger.assets, a1);
}

uint64_t one-time initialization function for ranking(uint64_t a1)
{
  return one-time initialization function for shared(a1, static MOAngelLogger.ranking);
}

uint64_t MOAngelLogger.ranking.unsafeMutableAddressor()
{
  return MOAngelLogger.shared.unsafeMutableAddressor(&serverManager._connectionListener, (uint64_t (*)(void))&type metadata accessor for Logger, (uint64_t)static MOAngelLogger.ranking);
}

uint64_t static MOAngelLogger.ranking.getter@<X0>(uint64_t a1@<X8>)
{
  return static MOAngelLogger.shared.getter(&serverManager._connectionListener, (uint64_t (*)(void))&type metadata accessor for Logger, (uint64_t)static MOAngelLogger.ranking, a1);
}

uint64_t one-time initialization function for memory(uint64_t a1)
{
  return one-time initialization function for shared(a1, static MOAngelLogger.memory);
}

uint64_t static MOAngelLogger.memory.getter@<X0>(uint64_t a1@<X8>)
{
  return static MOAngelLogger.shared.getter(&serverManager._displayMonitor, (uint64_t (*)(void))&type metadata accessor for Logger, (uint64_t)static MOAngelLogger.memory, a1);
}

uint64_t one-time initialization function for sheetController(uint64_t a1)
{
  return one-time initialization function for shared(a1, static MOAngelLogger.sheetController);
}

uint64_t MOAngelLogger.sheetController.unsafeMutableAddressor()
{
  return MOAngelLogger.shared.unsafeMutableAddressor(&one-time initialization token for sheetController, (uint64_t (*)(void))&type metadata accessor for Logger, (uint64_t)static MOAngelLogger.sheetController);
}

uint64_t static MOAngelLogger.sheetController.getter@<X0>(uint64_t a1@<X8>)
{
  return static MOAngelLogger.shared.getter(&one-time initialization token for sheetController, (uint64_t (*)(void))&type metadata accessor for Logger, (uint64_t)static MOAngelLogger.sheetController, a1);
}

uint64_t one-time initialization function for filtering(uint64_t a1)
{
  return one-time initialization function for shared(a1, static MOAngelLogger.filtering);
}

uint64_t one-time initialization function for shared(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return Logger.init(subsystem:category:)();
}

uint64_t MOAngelLogger.filtering.unsafeMutableAddressor()
{
  return MOAngelLogger.shared.unsafeMutableAddressor(&one-time initialization token for filtering, (uint64_t (*)(void))&type metadata accessor for Logger, (uint64_t)static MOAngelLogger.filtering);
}

uint64_t static MOAngelLogger.filtering.getter@<X0>(uint64_t a1@<X8>)
{
  return static MOAngelLogger.shared.getter(&one-time initialization token for filtering, (uint64_t (*)(void))&type metadata accessor for Logger, (uint64_t)static MOAngelLogger.filtering, a1);
}

uint64_t MOSuggestionAssetContactProfilePictureProvider.deinit()
{
  return v0;
}

uint64_t MOSuggestionAssetContactProfilePictureProvider.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t MOSuggestionAssetContactProfilePictureProvider.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t one-time initialization function for assets()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OSSignposter();
  __swift_allocate_value_buffer(v4, static MOAngelSignposter.assets);
  __swift_project_value_buffer(v4, (uint64_t)static MOAngelSignposter.assets);
  if (serverManager._connectionProperties != (NSMutableDictionary *)-1) {
    swift_once();
  }
  uint64_t v5 = __swift_project_value_buffer(v0, (uint64_t)static MOAngelLogger.assets);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  return OSSignposter.init(logger:)();
}

uint64_t MOAngelSignposter.assets.unsafeMutableAddressor()
{
  return MOAngelLogger.shared.unsafeMutableAddressor(&one-time initialization token for assets, (uint64_t (*)(void))&type metadata accessor for OSSignposter, (uint64_t)static MOAngelSignposter.assets);
}

uint64_t MOAngelLogger.shared.unsafeMutableAddressor(void *a1, uint64_t (*a2)(void), uint64_t a3)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = a2(0);

  return __swift_project_value_buffer(v5, a3);
}

uint64_t static MOAngelSignposter.assets.getter@<X0>(uint64_t a1@<X8>)
{
  return static MOAngelLogger.shared.getter(&one-time initialization token for assets, (uint64_t (*)(void))&type metadata accessor for OSSignposter, (uint64_t)static MOAngelSignposter.assets, a1);
}

uint64_t static MOAngelLogger.shared.getter@<X0>(void *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v7 = a2(0);
  uint64_t v8 = __swift_project_value_buffer(v7, a3);
  int64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);

  return v9(a4, v8, v7);
}

uint64_t type metadata accessor for MOAngelLogger()
{
  return self;
}

uint64_t type metadata accessor for MOAngelSignposter()
{
  return self;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

void *MOSuggestionPickerPrivacyBadge.IMAGE_LENGTH.unsafeMutableAddressor()
{
  return &static MOSuggestionPickerPrivacyBadge.IMAGE_LENGTH;
}

double static MOSuggestionSheetInterstitialViewConstants.SIDE_MARGIN.getter()
{
  return 20.0;
}

void *MOSuggestionPickerPrivacyBadge.CONTENT_MARGIN.unsafeMutableAddressor()
{
  return &static MOSuggestionPickerPrivacyBadge.CONTENT_MARGIN;
}

id MOSuggestionPickerPrivacyBadge.iconView.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionPickerPrivacyBadge_iconView);
  swift_beginAccess();
  uint64_t v2 = *v1;

  return v2;
}

void MOSuggestionPickerPrivacyBadge.iconView.setter(void *a1)
{
}

uint64_t (*MOSuggestionPickerPrivacyBadge.iconView.modify())()
{
  return MOSuggestionMapSnapshotView.secondaryField.modify;
}

void closure #1 in variable initialization expression of MOSuggestionPickerPrivacyBadge.label()
{
  id v0 = [objc_allocWithZone((Class)UILabel) init];
  [v0 setTranslatesAutoresizingMaskIntoConstraints:0];
  uint64_t v1 = self;
  id v2 = [v1 preferredFontForTextStyle:UIFontTextStyleCaption1];
  id v3 = [v2 fontDescriptor];
  id v4 = [v3 fontDescriptorWithSymbolicTraits:2];

  if (v4)
  {
    id v5 = [v1 fontWithDescriptor:v4 size:0.0];

    [v0 setFont:v5];
    id v6 = [self mainBundle];
    v10._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v10._object = (void *)0x80000001001E1B90;
    v7._object = (void *)0x80000001001E1B70;
    v7._uint64_t countAndFlagsBits = 0xD000000000000016;
    v8._uint64_t countAndFlagsBits = 0;
    v8._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v7, (Swift::String_optional)0, (NSBundle)v6, v8, v10);

    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v0 setText:v9];

    [v0 setAdjustsFontForContentSizeCategory:1];
    [v0 setMaximumContentSizeCategory:UIContentSizeCategoryAccessibilityMedium];
  }
  else
  {
    __break(1u);
  }
}

id MOSuggestionPickerPrivacyBadge.label.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionPickerPrivacyBadge_label);
  swift_beginAccess();
  id v2 = *v1;

  return v2;
}

void MOSuggestionPickerPrivacyBadge.label.setter(void *a1)
{
}

void MOSuggestionPickerPrivacyBadge.iconView.setter(void *a1, void *a2)
{
  id v4 = (void **)(v2 + *a2);
  swift_beginAccess();
  id v5 = *v4;
  void *v4 = a1;
}

uint64_t (*MOSuggestionPickerPrivacyBadge.label.modify())()
{
  return MOSuggestionMapSnapshotView.platterBlurView.modify;
}

void MOSuggestionPickerPrivacyBadge.init(coder:)()
{
  uint64_t v1 = OBJC_IVAR____TtC16MomentsUIService30MOSuggestionPickerPrivacyBadge_iconView;
  double v2 = CGRectMake();
  *(void *)&v0[v1] = [objc_allocWithZone((Class)type metadata accessor for MOSuggestionPickerBadgeIconView()) initWithFrame:v2, v3, v4, v5];
  uint64_t v6 = OBJC_IVAR____TtC16MomentsUIService30MOSuggestionPickerPrivacyBadge_label;
  closure #1 in variable initialization expression of MOSuggestionPickerPrivacyBadge.label();
  *(void *)&v0[v6] = v7;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall MOSuggestionPickerPrivacyBadge.flipToPrivacyIconAndDismissAfterDelay()()
{
  uint64_t v1 = v0;
  MOSuggestionInterstitialExpandableListViewCellConstants.init()();
  double v3 = v2;
  double v5 = v4;
  MOSuggestionInterstitialExpandableListViewCellConstants.init()();
  double v7 = v6;
  double v9 = v8;
  MOSuggestionInterstitialExpandableListViewCellConstants.init()();
  double v11 = v10;
  double v13 = v12;
  uint64_t v14 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x60))();
  (*(void (**)(void))((swift_isaMask & *v14) + 0x70))();

  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v1;
  id v16 = objc_allocWithZone((Class)UIViewPropertyAnimator);
  BOOL v29 = partial apply for closure #1 in MOSuggestionPickerPrivacyBadge.flipToPrivacyIconAndDismissAfterDelay();
  uint64_t v30 = v15;
  uint64_t v25 = _NSConcreteStackBlock;
  uint64_t v26 = 1107296256;
  char v27 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v28 = &block_descriptor_0;
  char v17 = _Block_copy(&v25);
  id v18 = v1;
  swift_release();
  id v19 = [v16 initWithDuration:v17 controlPoint1:0.167 controlPoint2:v3 animations:v11 v13];
  _Block_release(v17);
  [v19 startAnimationAfterDelay:2.75];
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v18;
  id v21 = objc_allocWithZone((Class)UIViewPropertyAnimator);
  BOOL v29 = partial apply for closure #2 in MOSuggestionPickerPrivacyBadge.flipToPrivacyIconAndDismissAfterDelay();
  uint64_t v30 = v20;
  uint64_t v25 = _NSConcreteStackBlock;
  uint64_t v26 = 1107296256;
  char v27 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v28 = &block_descriptor_6;
  unint64_t v22 = _Block_copy(&v25);
  id v23 = v18;
  swift_release();
  id v24 = [v21 initWithDuration:v22 controlPoint1:0.167 controlPoint2:v3 animations:v5, v7, v9];
  _Block_release(v22);
  [v24 startAnimationAfterDelay:2.75];
}

id closure #1 in MOSuggestionPickerPrivacyBadge.flipToPrivacyIconAndDismissAfterDelay()(void *a1)
{
  CGAffineTransformMakeScale(&v3, 0.75, 0.75);
  return [a1 setTransform:&v3];
}

id MOSuggestionPickerPrivacyBadge.__allocating_init(effect:)(void *a1)
{
  id v3 = [objc_allocWithZone(v1) initWithEffect:a1];

  return v3;
}

void MOSuggestionPickerPrivacyBadge.init(effect:)()
{
}

id MOSuggestionPickerPrivacyBadge.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MOSuggestionPickerPrivacyBadge();
  return [super dealloc];
}

char *specialized MOSuggestionPickerPrivacyBadge.init(frame:)()
{
  uint64_t v1 = OBJC_IVAR____TtC16MomentsUIService30MOSuggestionPickerPrivacyBadge_iconView;
  double v2 = CGRectMake();
  double v4 = v3;
  double v6 = v5;
  double v8 = v7;
  double v9 = (objc_class *)type metadata accessor for MOSuggestionPickerBadgeIconView();
  double v10 = v0;
  *(void *)&v0[v1] = [objc_allocWithZone(v9) initWithFrame:v2, v4, v6, v8];
  uint64_t v11 = OBJC_IVAR____TtC16MomentsUIService30MOSuggestionPickerPrivacyBadge_label;
  closure #1 in variable initialization expression of MOSuggestionPickerPrivacyBadge.label();
  *(void *)&v10[v11] = v12;

  id v47 = [self effectWithStyle:8];
  v48.receiver = v10;
  v48.super_class = (Class)type metadata accessor for MOSuggestionPickerPrivacyBadge();
  double v13 = (char *)[v48 initWithEffect:v47];
  [v13 setEffect:v47];
  uint64_t v14 = (id *)&v13[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionPickerPrivacyBadge_iconView];
  swift_beginAccess();
  [*v14 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v15 = [v13 contentView];
  [v15 addSubview:*v14];

  id v16 = [v13 contentView];
  char v17 = (id *)&v13[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionPickerPrivacyBadge_label];
  swift_beginAccess();
  [v16 addSubview:*v17];

  [v13 _setCornerRadius:6.0];
  id v46 = self;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_1001DA3E0;
  id v19 = [*v14 widthAnchor];
  id v20 = [v19 constraintEqualToConstant:20.0];

  *(void *)(v18 + 32) = v20;
  id v21 = [*v14 heightAnchor];
  id v22 = [v21 constraintEqualToConstant:20.0];

  *(void *)(v18 + 40) = v22;
  id v23 = [*v14 leadingAnchor];
  id v24 = [v13 leadingAnchor];
  id v25 = [v23 constraintEqualToAnchor:v24 constant:2.0];

  *(void *)(v18 + 48) = v25;
  id v26 = [*v14 topAnchor];
  id v27 = [v13 topAnchor];
  id v28 = [v26 constraintEqualToAnchor:v27 constant:2.0];

  *(void *)(v18 + 56) = v28;
  id v29 = [v13 bottomAnchor];
  id v30 = [*v14 bottomAnchor];
  id v31 = [v29 constraintEqualToAnchor:v30 constant:2.0];

  *(void *)(v18 + 64) = v31;
  id v32 = [*v17 leadingAnchor];
  id v33 = [*v14 trailingAnchor];
  id v34 = [v32 constraintEqualToAnchor:v33 constant:3.0];

  *(void *)(v18 + 72) = v34;
  id v35 = [*v17 topAnchor];
  id v36 = [v13 topAnchor];
  id v37 = [v35 constraintEqualToAnchor:v36];

  *(void *)(v18 + 80) = v37;
  id v38 = [*v17 bottomAnchor];
  id v39 = [v13 bottomAnchor];
  id v40 = [v38 constraintEqualToAnchor:v39];

  *(void *)(v18 + 88) = v40;
  id v41 = [v13 trailingAnchor];
  id v42 = [*v17 trailingAnchor];
  id v43 = [v41 constraintEqualToAnchor:v42 constant:6.0];

  *(void *)(v18 + 96) = v43;
  specialized Array._endMutation()();
  type metadata accessor for NSLayoutConstraint();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v46 activateConstraints:isa];

  return v13;
}

uint64_t sub_10002E604()
{
  return _swift_deallocObject(v0, 24, 7);
}

id partial apply for closure #1 in MOSuggestionPickerPrivacyBadge.flipToPrivacyIconAndDismissAfterDelay()()
{
  return closure #1 in MOSuggestionPickerPrivacyBadge.flipToPrivacyIconAndDismissAfterDelay()(*(void **)(v0 + 16));
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

id partial apply for closure #2 in MOSuggestionPickerPrivacyBadge.flipToPrivacyIconAndDismissAfterDelay()()
{
  return [*(id *)(v0 + 16) setAlpha:0.0];
}

uint64_t type metadata accessor for MOSuggestionPickerPrivacyBadge()
{
  return self;
}

uint64_t sub_10002E694@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x60))();
  *a2 = result;
  return result;
}

uint64_t sub_10002E6F0(id *a1, void **a2)
{
  return (*(uint64_t (**)(id))((swift_isaMask & **a2) + 0x68))(*a1);
}

uint64_t sub_10002E754@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x78))();
  *a2 = result;
  return result;
}

uint64_t sub_10002E7B0(id *a1, void **a2)
{
  return (*(uint64_t (**)(id))((swift_isaMask & **a2) + 0x80))(*a1);
}

unint64_t type metadata accessor for NSLayoutConstraint()
{
  unint64_t result = lazy cache variable for type metadata for NSLayoutConstraint;
  if (!lazy cache variable for type metadata for NSLayoutConstraint)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  }
  return result;
}

uint64_t MOSuggestionInterstitialListAssetViewModel.__allocating_init(contactAssets:bundleStartDate:bundleEndDate:)(unint64_t a1, void *a2, void *a3)
{
  double v7 = (char *)type metadata accessor for MOSuggestionSheetAssetDateRange(0);
  uint64_t v112 = *((void *)v7 - 1);
  __chkstk_darwin(v7);
  uint64_t v114 = (uint64_t)&countAndFlagsBits - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v9 = (void *)(a1 >> 62);
  if (a1 >> 62) {
    goto LABEL_71;
  }
  int64_t v10 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v10 < 1)
  {
LABEL_72:
    swift_bridgeObjectRelease();
    uint64_t v91 = type metadata accessor for Date();
    id v92 = *(void (**)(void *, uint64_t))(*(void *)(v91 - 8) + 8);
    v92(a3, v91);
    v92(a2, v91);
    return 0;
  }
LABEL_3:
  uint64_t v117 = v7;
  uint64_t v118 = v9;
  unint64_t v100 = v3;
  uint64_t v106 = a3;
  unint64_t v107 = a2;
  uint64_t v123 = (uint64_t)_swiftEmptyArrayStorage;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
  a2 = 0;
  a3 = (void *)v123;
  unint64_t v120 = a1 & 0xC000000000000001;
  double v9 = &type metadata for String;
  unint64_t v119 = a1;
  do
  {
    if (v120) {
      uint64_t v11 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      uint64_t v11 = (char *)*(id *)(a1 + 8 * (void)a2 + 32);
    }
    double v7 = v11;
    id v12 = [v11 identifier:countAndFlagsBits];
    a1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v14 = v13;

    *(void *)&v127[0] = a1;
    *((void *)&v127[0] + 1) = v14;
    *(void *)&long long v121 = 35;
    *((void *)&v121 + 1) = 0xE100000000000000;
    lazy protocol witness table accessor for type String and conformance String();
    double v3 = v127;
    id v15 = (void *)StringProtocol.components<A>(separatedBy:)();
    if (!v15[2])
    {
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      swift_bridgeObjectRetain();
      int64_t v10 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v10 < 1) {
        goto LABEL_72;
      }
      goto LABEL_3;
    }
    uint64_t v16 = v15[4];
    uint64_t v17 = v15[5];
    swift_bridgeObjectRetain();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v123 = (uint64_t)a3;
    unint64_t v19 = a3[2];
    unint64_t v18 = a3[3];
    if (v19 >= v18 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
      a3 = (void *)v123;
    }
    a2 = (char *)a2 + 1;
    a3[2] = v19 + 1;
    id v20 = &a3[2 * v19];
    v20[4] = v16;
    v20[5] = v17;
    a1 = v119;
  }
  while ((void *)v10 != a2);
  Swift::String v21 = String.init(combinedIdentifiersFrom:)((Swift::OpaquePointer)a3);
  object = v21._object;
  id v23 = (void *)MOSuggestionAssetsTypeContactPhoto;
  unint64_t v125 = (unint64_t)_swiftEmptyArrayStorage;
  unint64_t v126 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v24 = type metadata accessor for Date();
  uint64_t v25 = *(void *)(v24 - 8);
  id v26 = *(void (**)(uint64_t, void *, uint64_t))(v25 + 16);
  uint64_t v27 = v114;
  v26(v114, v107, v24);
  uint64_t v28 = v27 + *((int *)v117 + 5);
  v26(v28, v106, v24);
  uint64_t v103 = v25;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v25 + 56))(v28, 0, 1, v24);
  uint64_t v104 = v23;
  uint64_t v102 = v24;
  uint64_t v101 = v21._object;
  uint64_t countAndFlagsBits = v21._countAndFlagsBits;
  if (v118)
  {
    swift_bridgeObjectRetain();
    id v73 = v23;
    uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    id v31 = (_OWORD *)&unk_1001DA000;
    if (!v29) {
      goto LABEL_56;
    }
LABEL_13:
    uint64_t v118 = (void *)v29;
    if (v29 < 1)
    {
      __break(1u);
      goto LABEL_78;
    }
    uint64_t v32 = 0;
    uint64_t v116 = _swiftEmptyArrayStorage;
    uint64_t v117 = (char *)&type metadata for Any + 8;
    long long v113 = v31[15];
    long long v105 = xmmword_1001DA250;
    id v33 = v118;
    while (1)
    {
      if (v120) {
        id v34 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v34 = *(id *)(a1 + 8 * v32 + 32);
      }
      a3 = v34;
      id v35 = [v34 assetType:countAndFlagsBits];
      uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v38 = v37;
      if (v36 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v38 == v39)
      {

        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v41 = _stringCompareWithSmolCheck(_:_:expecting:)();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v41 & 1) == 0)
        {
          [a3 contentClassType];
          uint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
          if (ObjCClassMetadata != type metadata accessor for MOSuggestionGenericFallBackInfo())
          {
            if (serverManager._clientConnections != (NSMutableDictionary *)-1) {
              swift_once();
            }
            uint64_t v43 = type metadata accessor for Logger();
            __swift_project_value_buffer(v43, (uint64_t)static MOAngelLogger.shared);
            os_log_type_t v44 = Logger.logObject.getter();
            os_log_type_t v45 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v44, v45))
            {
              id v46 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)id v46 = 0;
              _os_log_impl((void *)&_mh_execute_header, v44, v45, "[MOSuggestionInterstitialListAssetViewModel.contactAssets] Mismatched init for asset type", v46, 2u);
              swift_slowDealloc();
            }

            goto LABEL_18;
          }
        }
      }
      double v9 = [a3 content];
      self;
      uint64_t v47 = swift_dynamicCastObjCClass();
      if (v47)
      {
        uint64_t v48 = v47;
        id v49 = [a3 metadata];
        uint64_t v50 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v51 = specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(v50);
        swift_bridgeObjectRelease();
        if (v51)
        {
          if (*(void *)(v51 + 16))
          {
            id v52 = MOSuggestionAssetMetadataKeyContactName;
            uint64_t v53 = specialized __RawDictionaryStorage.find<A>(_:)(v52);
            if (v54)
            {
              outlined init with copy of Any(*(void *)(v51 + 56) + 32 * v53, (uint64_t)&v121);
            }
            else
            {
              long long v122 = 0u;
              long long v121 = 0u;
            }
          }
          else
          {
            long long v122 = 0u;
            long long v121 = 0u;
          }
          swift_bridgeObjectRelease();
          if (!*((void *)&v122 + 1))
          {
            swift_unknownObjectRelease();

            outlined destroy of Any?((uint64_t)&v121);
            goto LABEL_17;
          }
          if (swift_dynamicCast())
          {
            a1 = v124;
            uint64_t v115 = v123;
            memset(v127, 0, sizeof(v127));
            char v128 = 1;
            type metadata accessor for MOSuggestionSheetImage();
            swift_allocObject();
            swift_unknownObjectRetain();
            double v7 = (char *)MOSuggestionSheetImage.init(image:associatedTintColor:associatedBackgroundColor:tileBackgroundColor:shouldBeRounded:squareCrop:extraMargin:)(v48, 0, 0, 0, 0, (uint64_t)v127, 0, 1);
            id v55 = [a3 identifier];
            uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            a2 = v57;

            *(void *)&long long v121 = v56;
            *((void *)&v121 + 1) = a2;
            uint64_t v123 = 35;
            unint64_t v124 = 0xE100000000000000;
            double v3 = &v121;
            char v58 = (void *)StringProtocol.components<A>(separatedBy:)();
            if (!v58[2]) {
              goto LABEL_70;
            }
            uint64_t v60 = v58[4];
            uint64_t v59 = v58[5];
            uint64_t v109 = v60;
            uint64_t v108 = v59;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MOSuggestionSheetAssetDateRange>);
            unint64_t v61 = (*(unsigned __int8 *)(v112 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v112 + 80);
            uint64_t v62 = swift_allocObject();
            *(_OWORD *)(v62 + 16) = v113;
            outlined init with copy of MOSuggestionSheetAssetDateRange(v114, v62 + v61);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
            unint64_t v63 = a1;
            uint64_t v64 = swift_allocObject();
            *(_OWORD *)(v64 + 16) = v113;
            *(void *)(v64 + 32) = v115;
            *(void *)(v64 + 40) = v63;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
            uint64_t v65 = swift_allocObject();
            *(_OWORD *)(v65 + 16) = v105;
            *(void *)(v65 + 32) = v7;
            *(void *)&long long v121 = v65;
            specialized Array._endMutation()();
            uint64_t v66 = v121;
            type metadata accessor for MOSuggestionInterstitialListAssetViewModel();
            swift_allocObject();
            unint64_t v111 = v63;
            swift_bridgeObjectRetain();
            uint64_t v110 = v7;
            swift_retain();
            MOSuggestionInterstitialListAssetViewModel.init(id:subViewModels:topLevelGroupHeading:dates:titles:icons:assetVisualSubType:selectable:isLoadingPlaceHolder:isFallback:)(v109, v108, 0, 0, 0, v62, v64, v66, 11, 1, 0, 0);
            swift_retain();
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            uint64_t v67 = v115;
            if (*(void *)((v126 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v126 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v116 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v116[2] + 1, 1, v116);
            }
            a1 = v119;
            unint64_t v69 = v116[2];
            unint64_t v68 = v116[3];
            if (v69 >= v68 >> 1) {
              uint64_t v116 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v68 > 1), v69 + 1, 1, v116);
            }
            Swift::String v70 = v116;
            v116[2] = v69 + 1;
            Swift::String v71 = &v70[2 * v69];
            unint64_t v72 = v111;
            v71[4] = v67;
            v71[5] = v72;
            swift_retain();
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((v125 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v125 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            swift_release();
            swift_release();
          }
        }
        swift_unknownObjectRelease();
      }
      else
      {

        swift_unknownObjectRelease();
      }
LABEL_17:
      id v33 = v118;
LABEL_18:
      if (v33 == (void *)++v32) {
        goto LABEL_57;
      }
    }
  }
  uint64_t v29 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  id v30 = v23;
  id v31 = &unk_1001DA000;
  if (v29) {
    goto LABEL_13;
  }
LABEL_56:
  uint64_t v116 = _swiftEmptyArrayStorage;
LABEL_57:
  swift_bridgeObjectRelease();
  uint64_t v74 = v125;
  if (v125 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v93 = _CocoaArrayWrapper.endIndex.getter();
    id v23 = v107;
    uint64_t v24 = (uint64_t)v106;
    object = v104;
    if (!v93) {
      goto LABEL_74;
    }
LABEL_59:
    if ((v74 & 0xC000000000000001) == 0)
    {
      if (!*(void *)((v74 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_82;
      }
      swift_retain();
LABEL_62:
      swift_bridgeObjectRelease();
      uint64_t v74 = (*((uint64_t (**)(uint64_t, void *, void, void, void, void, void, void, int))v100 + 43))(countAndFlagsBits, v101, 0, 0, 0, 0, 0, 0, 267);
      unint64_t v76 = v126;
      if (v126 >> 62)
      {
        swift_retain();
        swift_bridgeObjectRetain();
        uint64_t v97 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v97 < 2) {
          goto LABEL_68;
        }
      }
      else
      {
        uint64_t v77 = *(void *)((v126 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_retain();
        if (v77 < 2)
        {
LABEL_68:
          swift_bridgeObjectRelease();
          uint64_t v80 = MOSuggestionInterstitialListAssetViewModel._groupAssetTypeAndCountDescription(with:)(0);
          uint64_t v82 = v81;
          swift_beginAccess();
          *(void *)(v74 + 24) = v80;
          *(void *)(v74 + 32) = v82;
          swift_bridgeObjectRelease();
          swift_beginAccess();
          *(void *)(v74 + 48) = v116;
          swift_bridgeObjectRelease();
          unint64_t v83 = v125;
          swift_beginAccess();
          *(void *)(v74 + 56) = v83;
          swift_bridgeObjectRelease();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MOSuggestionSheetAssetDateRange>);
          unint64_t v84 = (*(unsigned __int8 *)(v112 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v112 + 80);
          uint64_t v85 = swift_allocObject();
          *(_OWORD *)(v85 + 16) = xmmword_1001DA0F0;
          uint64_t v86 = v85 + v84;
          uint64_t v87 = v114;
          outlined init with copy of MOSuggestionSheetAssetDateRange(v114, v86);
          swift_release();

          Swift::String v88 = *(void (**)(uint64_t, uint64_t))(v103 + 8);
          uint64_t v89 = v24;
          uint64_t v90 = v102;
          v88(v89, v102);
          v88((uint64_t)v23, v90);
          outlined destroy of MOSuggestionSheetAssetDateRange(v87);
          swift_beginAccess();
          *(void *)(v74 + 40) = v85;
          swift_release();
          swift_bridgeObjectRelease();
          return v74;
        }
      }
      if ((v76 & 0x8000000000000000) == 0 && (v76 & 0x4000000000000000) == 0)
      {
        uint64_t v78 = v76 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain();
LABEL_67:
        *(void *)&long long v121 = v78;
        specialized MutableCollection<>.sort(by:)((uint64_t *)&v121);
        swift_bridgeObjectRelease();
        uint64_t v79 = v121;
        swift_beginAccess();
        *(void *)(v74 + 16) = v79;
        goto LABEL_68;
      }
LABEL_82:
      unint64_t v98 = swift_bridgeObjectRetain();
      uint64_t v78 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v98);
      swift_bridgeObjectRelease();
      goto LABEL_67;
    }
LABEL_78:
    specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_62;
  }
  uint64_t v75 = *(void *)((v125 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  id v23 = v107;
  uint64_t v24 = (uint64_t)v106;
  object = v104;
  if (v75) {
    goto LABEL_59;
  }
LABEL_74:
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  uint64_t v94 = *(void (**)(uint64_t, uint64_t))(v103 + 8);
  uint64_t v95 = v102;
  v94(v24, v102);
  v94((uint64_t)v23, v95);
  outlined destroy of MOSuggestionSheetAssetDateRange(v114);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

double MOSuggestionContactAssetView.mediumWidth.getter()
{
  uint64_t v1 = (unsigned char *)(v0 + OBJC_IVAR____TtC16MomentsUIService28MOSuggestionContactAssetView____lazy_storage___mediumWidth);
  if ((*(unsigned char *)(v0
                 + OBJC_IVAR____TtC16MomentsUIService28MOSuggestionContactAssetView____lazy_storage___mediumWidth
                 + 8) & 1) == 0)
    return *(double *)v1;
  *(void *)uint64_t v1 = 0x4034000000000000;
  v1[8] = 0;
  return 20.0;
}

void MOSuggestionContactAssetView.mediumWidth.setter(double a1)
{
  uint64_t v2 = v1 + OBJC_IVAR____TtC16MomentsUIService28MOSuggestionContactAssetView____lazy_storage___mediumWidth;
  *(double *)uint64_t v2 = a1;
  *(unsigned char *)(v2 + 8) = 0;
}

void *(*MOSuggestionContactAssetView.mediumWidth.modify(uint64_t a1))(void *result)
{
  *(void *)(a1 + 8) = v1;
  *(double *)a1 = MOSuggestionContactAssetView.mediumWidth.getter();
  return MOSuggestionContactAssetView.mediumWidth.modify;
}

void *MOSuggestionContactAssetView.mediumWidth.modify(void *result)
{
  uint64_t v1 = result[1] + OBJC_IVAR____TtC16MomentsUIService28MOSuggestionContactAssetView____lazy_storage___mediumWidth;
  *(void *)uint64_t v1 = *result;
  *(unsigned char *)(v1 + 8) = 0;
  return result;
}

id MOSuggestionContactAssetView.__allocating_init(image:name:contactFirstName:assignedTileSize:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  id v13 = objc_allocWithZone(v6);
  return MOSuggestionContactAssetView.init(image:name:contactFirstName:assignedTileSize:)(a1, a2, a3, a4, a5, a6);
}

id MOSuggestionContactAssetView.init(image:name:contactFirstName:assignedTileSize:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  double v9 = &v6[OBJC_IVAR____TtC16MomentsUIService28MOSuggestionContactAssetView____lazy_storage___mediumWidth];
  *(void *)double v9 = 0;
  v9[8] = 1;
  double y = CGRectZero.origin.y;
  double width = CGRectZero.size.width;
  double height = CGRectZero.size.height;
  v151.receiver = v6;
  v151.super_class = (Class)type metadata accessor for MOSuggestionContactAssetView();
  [super initWithFrame:CGRectZero.origin.x, y, width, height];
  id v14 = objc_allocWithZone((Class)UIImageView);
  id v15 = v13;
  id v16 = [v14 initWithImage:a1];
  id v17 = [self effectWithStyle:8];
  id v18 = [objc_allocWithZone((Class)UIVisualEffectView) initWithEffect:v17];
  [v16 bounds];
  [v18 setFrame:];
  [v18 setAutoresizingMask:18];
  [v16 addSubview:v18];

  [v16 setContentMode:2];
  [v15 addSubview:v16];
  UIView.fillSuper(margin:)(0.0);
  swift_bridgeObjectRelease();
  uint64_t v150 = a1;
  id v19 = [objc_allocWithZone((Class)UIImageView) initWithImage:a1];
  [v19 setContentMode:1];
  id v20 = [objc_allocWithZone((Class)UILabel) init];
  Swift::String v21 = self;
  id v22 = [v21 preferredFontForTextStyle:UIFontTextStyleFootnote];
  id v23 = [v22 fontDescriptor];
  id v24 = [v23 fontDescriptorWithSymbolicTraits:2];

  if (!v24)
  {
    __break(1u);
LABEL_72:
    __break(1u);
    JUMPOUT(0x100030D34);
  }
  id v25 = [v21 fontWithDescriptor:v24 size:0.0];

  [v20 setFont:v25];
  id v26 = [self labelColor];
  [v20 setTextColor:v26];

  [v20 setNumberOfLines:0];
  [v20 setLineBreakMode:4];
  int v27 = a6;
  BOOL v28 = a6 == 5;
  int v29 = a6 - 2;
  uint64_t v30 = v27 == 2 || v28;
  [v20 setTextAlignment:v30];
  swift_bridgeObjectRelease();
  NSString v31 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v20 setText:v31];

  [v20 setMaximumContentSizeCategory:UIContentSizeCategoryAccessibilityMedium];
  id v32 = [objc_allocWithZone((Class)UIStackView) init];
  [v32 addArrangedSubview:v19];
  [v32 addArrangedSubview:v20];
  [v32 setAlignment:3];
  [v15 addSubview:v32];
  switch(v29)
  {
    case 0:
      [v20 setTextAlignment:1];
      [v32 setAxis:1];
      [v20 setNumberOfLines:1];
      id v63 = [v32 superview];
      if (v63)
      {
        uint64_t v64 = v63;
        [v32 setTranslatesAutoresizingMaskIntoConstraints:0];
        id v65 = [v32 topAnchor];
        id v66 = [v64 topAnchor];
        id v67 = [v65 constraintEqualToAnchor:v66];

        [v67 setConstant:8.0];
        if (v67)
        {
          id v68 = v67;
          [v68 setActive:1];
        }
      }
      id v69 = [v32 superview];
      if (v69)
      {
        Swift::String v70 = v69;
        [v32 setTranslatesAutoresizingMaskIntoConstraints:0];
        id v71 = [v32 leadingAnchor];
        id v72 = [v70 leadingAnchor];
        id v73 = [v71 constraintEqualToAnchor:v72];

        [v73 setConstant:8.0];
        if (v73)
        {
          id v74 = v73;
          [v74 setActive:1];
        }
      }
      id v75 = [v32 superview];
      if (v75)
      {
        unint64_t v76 = v75;
        [v32 setTranslatesAutoresizingMaskIntoConstraints:0];
        id v77 = [v32 trailingAnchor];
        id v78 = [v76 trailingAnchor];
        id v79 = [v77 constraintEqualToAnchor:v78];

        [v79 setConstant:-8.0];
        if (v79)
        {
          id v80 = v79;
          [v80 setActive:1];
        }
      }
      id v81 = [v32 superview];
      if (v81)
      {
        uint64_t v82 = v81;
        [v32 setTranslatesAutoresizingMaskIntoConstraints:0];
        id v83 = [v32 bottomAnchor];
        id v84 = [v82 bottomAnchor];
        id v85 = [v83 constraintEqualToAnchor:v84];

        if (v85)
        {
          [v85 setConstant:-8.0];
          id v86 = v85;
          [v86 setActive:1];
        }
      }
      [v32 setCustomSpacing:v19 afterView:8.0];
      goto LABEL_67;
    case 1:
      [v32 removeFromSuperview];
      [v15 addSubview:v19];
      id v87 = [v19 superview];
      if (v87)
      {
        Swift::String v88 = v87;
        [v19 setTranslatesAutoresizingMaskIntoConstraints:0];
        id v89 = [v19 topAnchor];
        id v90 = [v88 topAnchor];
        id v91 = [v89 constraintEqualToAnchor:v90];

        [v91 setConstant:4.0];
        if (v91)
        {
          id v92 = v91;
          [v92 setActive:1];
        }
      }
      id v93 = [v19 superview];
      if (v93)
      {
        uint64_t v94 = v93;
        [v19 setTranslatesAutoresizingMaskIntoConstraints:0];
        id v95 = [v19 leadingAnchor];
        id v96 = [v94 leadingAnchor];
        id v97 = [v95 constraintEqualToAnchor:v96];

        [v97 setConstant:4.0];
        if (v97)
        {
          id v98 = v97;
          [v98 setActive:1];
        }
      }
      id v99 = [v19 superview];
      if (v99)
      {
        unint64_t v100 = v99;
        [v19 setTranslatesAutoresizingMaskIntoConstraints:0];
        id v101 = [v19 trailingAnchor];
        id v102 = [v100 trailingAnchor];
        id v103 = [v101 constraintEqualToAnchor:v102];

        [v103 setConstant:-4.0];
        if (v103)
        {
          id v104 = v103;
          [v104 setActive:1];
        }
      }
      id v105 = [v19 superview];
      if (v105)
      {
        uint64_t v106 = v105;
        [v19 setTranslatesAutoresizingMaskIntoConstraints:0];
        id v107 = [v19 bottomAnchor];
        id v108 = [v106 bottomAnchor];
        id v109 = [v107 constraintEqualToAnchor:v108];

        if (v109)
        {
          [v109 setConstant:-4.0];
          id v110 = v109;
          [v110 setActive:1];
        }
      }
      goto LABEL_67;
    case 2:
    case 4:
    case 5:
      [v20 setTextAlignment:0];
      [v32 setAxis:0];
      id v33 = [v19 widthAnchor];
      id v34 = [v19 heightAnchor];
      id v35 = [v33 constraintEqualToAnchor:v34];

      [v35 setActive:1];
      id v36 = [v20 leadingAnchor];
      id v37 = [v19 trailingAnchor];
      id v38 = [v36 constraintEqualToAnchor:v37 constant:12.0];

      [v38 setActive:1];
      id v39 = [v32 superview];
      if (v39)
      {
        id v40 = v39;
        [v32 setTranslatesAutoresizingMaskIntoConstraints:0];
        id v41 = [v32 topAnchor];
        id v42 = [v40 topAnchor];
        id v43 = [v41 constraintEqualToAnchor:v42];

        [v43 setConstant:8.0];
        id v44 = v43;
        [v44 setActive:1];
      }
      id v45 = [v32 superview];
      if (v45)
      {
        id v46 = v45;
        [v32 setTranslatesAutoresizingMaskIntoConstraints:0];
        id v47 = [v32 leadingAnchor];
        id v48 = [v46 leadingAnchor];
        id v49 = [v47 constraintEqualToAnchor:v48];

        [v49 setConstant:8.0];
        id v50 = v49;
        [v50 setActive:1];
      }
      id v51 = [v32 superview];
      if (v51)
      {
        id v52 = v51;
        [v32 setTranslatesAutoresizingMaskIntoConstraints:0];
        id v53 = [v32 trailingAnchor];
        id v54 = [v52 trailingAnchor];
        id v55 = [v53 constraintEqualToAnchor:v54];

        [v55 setConstant:-8.0];
        id v56 = v55;
        [v56 setActive:1];
      }
      id v57 = [v32 superview];
      if (v57)
      {
        char v58 = v57;
        [v32 setTranslatesAutoresizingMaskIntoConstraints:0];
        id v59 = [v32 bottomAnchor];
        id v60 = [v58 bottomAnchor];
        id v61 = [v59 constraintEqualToAnchor:v60];

        [v61 setConstant:-8.0];
        id v62 = v61;
        [v62 setActive:1];
      }
      [v32 setCustomSpacing:v19 afterView:12.0];
      goto LABEL_67;
    case 3:
      goto LABEL_50;
    case 6:
      id v111 = [v21 preferredFontForTextStyle:UIFontTextStyleBody];
      id v112 = [v111 fontDescriptor];
      id v113 = [v112 fontDescriptorWithSymbolicTraits:2];

      if (!v113) {
        goto LABEL_72;
      }
      id v114 = [v21 fontWithDescriptor:v113 size:0.0];

      [v20 setFont:v114];
LABEL_50:
      [v20 setTextAlignment:1];
      [v32 setAxis:1];
      id v115 = [v32 superview];
      if (v115)
      {
        uint64_t v116 = v115;
        [v32 setTranslatesAutoresizingMaskIntoConstraints:0];
        id v117 = [v32 topAnchor];
        id v118 = [v116 topAnchor];
        id v119 = [v117 constraintEqualToAnchor:v118];

        [v119 setConstant:16.0];
        if (v119)
        {
          id v120 = v119;
          [v120 setActive:1];
        }
      }
      id v121 = [v32 superview];
      if (v121)
      {
        long long v122 = v121;
        [v32 setTranslatesAutoresizingMaskIntoConstraints:0];
        id v123 = [v32 leadingAnchor];
        id v124 = [v122 leadingAnchor];
        id v125 = [v123 constraintEqualToAnchor:v124];

        [v125 setConstant:12.0];
        if (v125)
        {
          id v126 = v125;
          [v126 setActive:1];
        }
      }
      id v127 = [v32 superview];
      if (v127)
      {
        char v128 = v127;
        [v32 setTranslatesAutoresizingMaskIntoConstraints:0];
        id v129 = [v32 trailingAnchor];
        id v130 = [v128 trailingAnchor];
        id v131 = [v129 constraintEqualToAnchor:v130];

        [v131 setConstant:-12.0];
        if (v131)
        {
          id v132 = v131;
          [v132 setActive:1];
        }
      }
      id v133 = [v32 superview];
      if (v133)
      {
        uint64_t v134 = v133;
        [v32 setTranslatesAutoresizingMaskIntoConstraints:0];
        id v135 = [v32 bottomAnchor];
        id v136 = [v134 bottomAnchor];
        id v137 = [v135 constraintEqualToAnchor:v136];

        if (v137)
        {
          [v137 setConstant:-16.0];
          id v138 = v137;
          [v138 setActive:1];
        }
      }
      [v32 setCustomSpacing:v19 afterView:16.0];
LABEL_67:
      [v15 setIsAccessibilityElement:1];
      UIAccessibilityTraits v139 = UIAccessibilityTraitImage;
      id v140 = v15;
      unint64_t v141 = (unint64_t)[v140 accessibilityTraits];
      if ((v139 & ~v141) != 0) {
        UIAccessibilityTraits v142 = v139;
      }
      else {
        UIAccessibilityTraits v142 = 0;
      }
      [v140 setAccessibilityTraits:v142 | v141];

      [v140 setAccessibilityIgnoresInvertColors:1];
      long long v143 = self;
      id v144 = v140;
      id v145 = [v143 mainBundle];
      v152._object = (void *)0x80000001001E1BB0;
      v146._uint64_t countAndFlagsBits = 0x746361746E6F43;
      v146._object = (void *)0xE700000000000000;
      v147._uint64_t countAndFlagsBits = 0;
      v147._object = (void *)0xE000000000000000;
      v152._uint64_t countAndFlagsBits = 0xD000000000000026;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v146, (Swift::String_optional)0, (NSBundle)v145, v147, v152);

      NSString v148 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v144 setAccessibilityLabel:v148];

      return v144;
    default:
      goto LABEL_67;
  }
}

void MOSuggestionContactAssetView.init(coder:)()
{
  uint64_t v1 = &v0[OBJC_IVAR____TtC16MomentsUIService28MOSuggestionContactAssetView____lazy_storage___mediumWidth];
  *(void *)uint64_t v1 = 0;
  v1[8] = 1;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void MOSuggestionContactAssetView.init(frame:)()
{
}

id MOSuggestionContactAssetView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MOSuggestionContactAssetView();
  return [super dealloc];
}

uint64_t type metadata accessor for MOSuggestionContactAssetView()
{
  return self;
}

void sub_100030F04(void **a1@<X0>, double *a2@<X8>)
{
  *a2 = (*(double (**)(void))((swift_isaMask & **a1) + 0x58))();
}

uint64_t sub_100030F60(double *a1, void **a2)
{
  return (*(uint64_t (**)(double))((swift_isaMask & **a2) + 0x60))(*a1);
}

void *MOSuggestionSheetAssetGridView.maxCount.unsafeMutableAddressor()
{
  return &static MOSuggestionSheetAssetGridView.maxCount;
}

uint64_t static MOSuggestionSheetAssetGridView.maxCount.getter()
{
  return 13;
}

void *MOSuggestionSheetAssetGridView.fullWidthfirstRowCount.unsafeMutableAddressor()
{
  return &static MOSuggestionSheetAssetGridView.fullWidthfirstRowCount;
}

void *MOSuggestionSheetAssetGridView.halfWidthfirstRowCount.unsafeMutableAddressor()
{
  return &static MOSuggestionSheetAssetGridView.halfWidthfirstRowCount;
}

uint64_t static MOSuggestionSheetAssetGridView.fullWidthIndexBeforeCutoff.getter()
{
  return 4;
}

void *MOSuggestionSheetAssetGridView.cornerRadius.unsafeMutableAddressor()
{
  return &static MOSuggestionSheetAssetGridView.cornerRadius;
}

double static MOSuggestionInterstitialExpandableListViewCellConstants.CHECKMARK_PLATTER_MARGIN.getter()
{
  return 8.0;
}

void *MOSuggestionSheetAssetGridView.gutter.unsafeMutableAddressor()
{
  return &static MOSuggestionSheetAssetGridView.gutter;
}

double static MOSuggestionInterstitialListAssetViewConstants.MAP_PIN_INSET_MARGIN.getter()
{
  return 4.0;
}

void *MOSuggestionSheetAssetGridView.fullWidthIndexBeforeCutoff.unsafeMutableAddressor()
{
  return &static MOSuggestionSheetAssetGridView.fullWidthIndexBeforeCutoff;
}

void *MOSuggestionSheetAssetGridView.halfWidthIndexBeforeCutoff.unsafeMutableAddressor()
{
  return &static MOSuggestionSheetAssetGridView.halfWidthIndexBeforeCutoff;
}

void *MOSuggestionSheetAssetGridView.gridCollectionView.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_gridCollectionView);
  swift_beginAccess();
  objc_super v2 = *v1;
  id v3 = v2;
  return v2;
}

void MOSuggestionSheetAssetGridView.gridCollectionView.setter(void *a1)
{
  id v3 = (void **)(v1 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_gridCollectionView);
  swift_beginAccess();
  double v4 = *v3;
  *id v3 = a1;
}

uint64_t (*MOSuggestionSheetAssetGridView.gridCollectionView.modify())()
{
  return MOSuggestionMapSnapshotView.platterBlurView.modify;
}

uint64_t MOSuggestionSheetAssetGridView.delegate.getter()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t MOSuggestionSheetAssetGridView.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_delegate;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*MOSuggestionSheetAssetGridView.delegate.modify(void *a1))(uint64_t a1, char a2)
{
  id v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_delegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = Strong;
  v3[4] = v7;
  return MOSuggestionSheetAssetGridView.delegate.modify;
}

void MOSuggestionSheetAssetGridView.delegate.modify(uint64_t a1, char a2)
{
  id v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + *(void *)(*(void *)a1 + 48) + 8) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }

  free(v3);
}

uint64_t MOSuggestionSheetAssetGridView.assetCount.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_assetCount;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t MOSuggestionSheetAssetGridView.assetCount.setter(uint64_t a1)
{
  id v3 = (void *)(v1 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_assetCount);
  uint64_t result = swift_beginAccess();
  *id v3 = a1;
  return result;
}

uint64_t (*MOSuggestionSheetAssetGridView.assetCount.modify())()
{
  return MOSuggestionMapSnapshotView.secondaryField.modify;
}

uint64_t MOSuggestionSheetAssetGridView.isFullWidth.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_isFullWidth);
  swift_beginAccess();
  return *v1;
}

uint64_t MOSuggestionSheetAssetGridView.isFullWidth.setter(char a1)
{
  id v3 = (char *)v1 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_isFullWidth;
  swift_beginAccess();
  *id v3 = a1;
  if (a1) {
    uint64_t v4 = (objc_class *)type metadata accessor for MOSuggestionSheetMosaicLayout();
  }
  else {
    uint64_t v4 = (objc_class *)type metadata accessor for MOSuggestionSheetHalfMosaicLayout();
  }
  id v5 = [objc_allocWithZone(v4) init];
  double v6 = *(void **)((char *)v1 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_mosaicLayout);
  *(void *)((char *)v1 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_mosaicLayout) = v5;

  return (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x1E0))();
}

void (*MOSuggestionSheetAssetGridView.isFullWidth.modify(void *a1))(void **a1, char a2)
{
  id v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_isFullWidth;
  v3[3] = v1;
  v3[4] = v4;
  swift_beginAccess();
  return MOSuggestionSheetAssetGridView.isFullWidth.modify;
}

void MOSuggestionSheetAssetGridView.isFullWidth.modify(void **a1, char a2)
{
  id v3 = *a1;
  swift_endAccess();
  if ((a2 & 1) == 0)
  {
    uint64_t v4 = (void *)v3[3];
    if (*((unsigned char *)v4 + v3[4]) == 1) {
      id v5 = (objc_class *)type metadata accessor for MOSuggestionSheetMosaicLayout();
    }
    else {
      id v5 = (objc_class *)type metadata accessor for MOSuggestionSheetHalfMosaicLayout();
    }
    id v6 = [objc_allocWithZone(v5) init];
    uint64_t v7 = *(void **)((char *)v4 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_mosaicLayout);
    *(void *)((char *)v4 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_mosaicLayout) = v6;

    (*(void (**)(void))((swift_isaMask & *v4) + 0x1E0))();
  }

  free(v3);
}

uint64_t MOSuggestionSheetAssetGridView.isFullHeight.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_isFullHeight);
  swift_beginAccess();
  return *v1;
}

uint64_t MOSuggestionSheetAssetGridView.isFullHeight.setter(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (char *)v2 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_isFullHeight;
  swift_beginAccess();
  unsigned char *v4 = a1;
  id v5 = *(void **)((char *)v2 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_mosaicLayout);
  type metadata accessor for MOSuggestionSheetMosaicLayout();
  id v6 = (void *)swift_dynamicCastClass();
  if (v6)
  {
    uint64_t v7 = *(void (**)(void))((swift_isaMask & *v6) + 0xA8);
    id v8 = v5;
    v7(a1 & 1);
  }
  return (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x1E0))();
}

void (*MOSuggestionSheetAssetGridView.isFullHeight.modify(void *a1))(void **a1, char a2)
{
  id v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_isFullHeight;
  v3[3] = v1;
  v3[4] = v4;
  swift_beginAccess();
  return MOSuggestionSheetAssetGridView.isFullHeight.modify;
}

void MOSuggestionSheetAssetGridView.isFullHeight.modify(void **a1, char a2)
{
  id v3 = *a1;
  swift_endAccess();
  if ((a2 & 1) == 0)
  {
    uint64_t v4 = (void *)v3[3];
    id v5 = *(void **)((char *)v4 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_mosaicLayout);
    type metadata accessor for MOSuggestionSheetMosaicLayout();
    id v6 = (void *)swift_dynamicCastClass();
    if (v6)
    {
      uint64_t v7 = *((unsigned __int8 *)v4 + v3[4]);
      id v8 = *(void (**)(uint64_t))((swift_isaMask & *v6) + 0xA8);
      id v9 = v5;
      v8(v7);

      uint64_t v4 = (void *)v3[3];
    }
    (*(void (**)(void))((swift_isaMask & *v4) + 0x1E0))();
  }

  free(v3);
}

uint64_t key path setter for MOSuggestionSheetAssetGridView.assetViewModels : MOSuggestionSheetAssetGridView(uint64_t *a1, void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  id v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))((swift_isaMask & **a2) + 0x158);
  outlined copy of MOWeakArray<MOSuggestionSheetAssetViewModel>?(*a1);
  return v5(v2, v3, v4);
}

uint64_t MOSuggestionSheetAssetGridView.assetViewModels.didset()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)((char *)v0 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_assetViewModels);
  uint64_t v3 = swift_beginAccess();
  unint64_t v4 = *v2;
  if (!*v2) {
    return (*(uint64_t (**)(uint64_t))((swift_isaMask & *v1) + 0x1C0))(v3);
  }
  uint64_t v5 = v4 & 0xFFFFFFFFFFFFFF8;
  if (v4 >> 62) {
    goto LABEL_22;
  }
  uint64_t v6 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRetain();
  if (v6)
  {
LABEL_4:
    if ((v6 & 0x8000000000000000) == 0)
    {
      uint64_t v8 = 0;
      unint64_t v20 = v4 & 0xC000000000000001;
      v4 += 32;
      while (1)
      {
        if (v8 < 0 || v8 >= v6)
        {
          if (__OFADD__(v8++, 1))
          {
            __break(1u);
LABEL_20:
            __break(1u);
LABEL_21:
            __break(1u);
LABEL_22:
            outlined copy of MOWeakArray<MOSuggestionSheetAssetViewModel>?(v4);
            swift_bridgeObjectRetain();
            uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
            uint64_t result = swift_bridgeObjectRelease();
            if (!v6) {
              goto LABEL_23;
            }
            goto LABEL_4;
          }
        }
        else
        {
          if (v20)
          {
            uint64_t v11 = specialized _ArrayBuffer._getElementSlowPath(_:)();
            uint64_t v10 = v11;
          }
          else
          {
            if ((unint64_t)v8 >= *(void *)(v5 + 16)) {
              goto LABEL_20;
            }
            uint64_t v10 = *(void *)(v4 + 8 * v8);
            uint64_t v11 = swift_retain();
          }
          uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 96))(v11);
          swift_release();
          ++v8;
          if (v12)
          {
            id v13 = *(uint64_t (**)(uint64_t))(*(void *)v12 + 512);
            uint64_t v14 = swift_retain();
            v21[0] = v13(v14);
            v21[1] = v15;
            v22[0] = 35;
            v22[1] = 0xE100000000000000;
            lazy protocol witness table accessor for type String and conformance String();
            id v16 = (void *)StringProtocol.components<A>(separatedBy:)();
            if (!v16[2]) {
              goto LABEL_21;
            }
            Swift::Int v18 = v16[4];
            Swift::Int v17 = v16[5];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            id v19 = (void (*)(void *, void))(*(uint64_t (**)(void *))((swift_isaMask & *v1)
                                                                                             + 0x178))(v21);
            specialized Set._Variant.insert(_:)(v22, v18, v17);
            swift_bridgeObjectRelease();
            v19(v21, 0);
            swift_release_n();
          }
        }
        if (v8 == v6) {
          goto LABEL_23;
        }
      }
    }
    __break(1u);
  }
  else
  {
LABEL_23:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t MOSuggestionSheetAssetGridView.assetViewModels.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_assetViewModels);
  swift_beginAccess();
  uint64_t v2 = *v1;
  outlined copy of MOWeakArray<MOSuggestionSheetAssetViewModel>?(*v1);
  return v2;
}

uint64_t outlined copy of MOWeakArray<MOSuggestionSheetAssetViewModel>?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t MOSuggestionSheetAssetGridView.assetViewModels.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (uint64_t *)(v3 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_assetViewModels);
  swift_beginAccess();
  uint64_t v8 = *v7;
  *uint64_t v7 = a1;
  v7[1] = a2;
  v7[2] = a3;
  outlined consume of MOWeakArray<MOSuggestionSheetAssetViewModel>?(v8);
  return MOSuggestionSheetAssetGridView.assetViewModels.didset();
}

uint64_t outlined consume of MOWeakArray<MOSuggestionSheetAssetViewModel>?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t (*MOSuggestionSheetAssetGridView.assetViewModels.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return MOSuggestionSheetAssetGridView.assetViewModels.modify;
}

uint64_t MOSuggestionSheetAssetGridView.assetViewModels.modify(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return MOSuggestionSheetAssetGridView.assetViewModels.didset();
  }
  return result;
}

uint64_t MOSuggestionSheetAssetGridView.selectedAssetIdentifiers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MOSuggestionSheetAssetGridView.selectedAssetIdentifiers.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_selectedAssetIdentifiers);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*MOSuggestionSheetAssetGridView.selectedAssetIdentifiers.modify())()
{
  return MOSuggestionMapSnapshotView.secondaryField.modify;
}

uint64_t MOSuggestionSheetAssetGridView.isBundleSelected.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_isBundleSelected);
  swift_beginAccess();
  return *v1;
}

uint64_t MOSuggestionSheetAssetGridView.isBundleSelected.setter(char a1)
{
  uint64_t v3 = (char *)v1 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_isBundleSelected;
  uint64_t v4 = swift_beginAccess();
  *uint64_t v3 = a1;
  return (*(uint64_t (**)(uint64_t))((swift_isaMask & *v1) + 0x1E8))(v4);
}

uint64_t (*MOSuggestionSheetAssetGridView.isBundleSelected.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return MOSuggestionSheetAssetGridView.isBundleSelected.modify;
}

uint64_t MOSuggestionSheetAssetGridView.isBundleSelected.modify(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return (*(uint64_t (**)(uint64_t))((swift_isaMask & **(void **)(a1 + 24)) + 0x1E8))(result);
  }
  return result;
}

uint64_t MOSuggestionSheetAssetGridView.isInterstitial.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_isInterstitial);
  swift_beginAccess();
  return *v1;
}

void MOSuggestionSheetAssetGridView.isInterstitial.setter(char a1)
{
  uint64_t v3 = (char *)v1 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_isInterstitial;
  uint64_t v4 = swift_beginAccess();
  *uint64_t v3 = a1;
  uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t))((swift_isaMask & *v1) + 0xA8))(v4);
  if (v5)
  {
    uint64_t v6 = v5;
    [v5 reloadData];
  }
}

void (*MOSuggestionSheetAssetGridView.isInterstitial.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return MOSuggestionSheetAssetGridView.isInterstitial.modify;
}

void MOSuggestionSheetAssetGridView.isInterstitial.modify(uint64_t a1, char a2)
{
  uint64_t v4 = swift_endAccess();
  if ((a2 & 1) == 0)
  {
    uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t))((swift_isaMask & **(void **)(a1 + 24)) + 0xA8))(v4);
    if (v5)
    {
      id v6 = v5;
      [v5 reloadData];
    }
  }
}

char *MOSuggestionSheetAssetGridView.init(frame:)(double a1, double a2, double a3, double a4)
{
  uint64_t v5 = v4;
  *(void *)&v4[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_gridCollectionView] = 0;
  uint64_t v10 = OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_addedView;
  id v11 = objc_allocWithZone((Class)type metadata accessor for MOSuggestionAddedView());
  uint64_t v12 = v5;
  id v13 = [v11 initWithFrame:0.0, 0.0, 0.0, 0.0];
  v13[OBJC_IVAR____TtC16MomentsUIService21MOSuggestionAddedView_symbolOnly] = 0;
  uint64_t v14 = v13;
  [v14 setClipsToBounds:1];
  MOSuggestionAddedView.initAddedView()();

  *(void *)&v5[v10] = v14;
  *(void *)&v12[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v12[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_assetCount] = 0;
  v12[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_isFullWidth] = 1;
  v12[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_isFullHeight] = 1;
  uint64_t v15 = &v12[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_assetViewModels];
  *((void *)v15 + 1) = 0;
  *((void *)v15 + 2) = 0;
  *(void *)uint64_t v15 = 0;
  *(void *)&v12[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_selectedAssetIdentifiers] = &_swiftEmptySetSingleton;
  v12[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_isBundleSelected] = 0;
  v12[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_isInterstitial] = 0;
  *(void *)&v12[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_mosaicLayout] = [objc_allocWithZone((Class)type metadata accessor for MOSuggestionSheetMosaicLayout()) init];

  v20.receiver = v12;
  v20.super_class = (Class)type metadata accessor for MOSuggestionSheetAssetGridView();
  id v16 = [super initWithFrame:a1, a2, a3, a4];
  MOSuggestionSheetAssetGridView.initGridCollectionView()();
  uint64_t v17 = OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_addedView;
  [v16 addSubview:*(void *)&v16[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_addedView]];
  id v18 = [*(id *)&v16[v17] layer];
  [v18 setCornerRadius:8.0];

  return v16;
}

Swift::Void __swiftcall MOSuggestionSheetAssetGridView.layoutSubviews()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MOSuggestionSheetAssetGridView();
  [super layoutSubviews];
  (*(void (**)(id))((swift_isaMask & *v0) + 0x1E8))(v1);
}

Swift::Void __swiftcall MOSuggestionSheetAssetGridView.setAddedViewInteractionState(_:)(MomentsUIService::MOSuggestionCollectionViewInteractionState a1)
{
  uint64_t v2 = a1 & 1;
  uint64_t v3 = *(void **)(v1 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_addedView);
  uint64_t v4 = *(void (**)(uint64_t))((swift_isaMask & *v3) + 0x98);
  uint64_t v5 = v3;
  v4(v2);
}

void MOSuggestionSheetAssetGridView.initGridCollectionView()()
{
  [v0 bounds];
  id v5 = [objc_allocWithZone((Class)type metadata accessor for MOSuggestionSheetGridCollectionView()) initWithFrame:v1 collectionViewLayout:v2];
  uint64_t v6 = (*(uint64_t (**)(id))((swift_isaMask & *v0) + 0xB0))(v5);
  uint64_t v7 = *(uint64_t (**)(void))((swift_isaMask & *v0) + 0xA8);
  uint64_t v8 = (void *)((uint64_t (*)(uint64_t))v7)(v6);
  if (v8)
  {
    id v9 = v8;
    [v8 setTranslatesAutoresizingMaskIntoConstraints:0];
  }
  uint64_t v10 = (void *)v7();
  if (v10)
  {
    id v11 = v10;
    [v10 setAllowsSelection:1];
    [v11 setAllowsMultipleSelection:1];
    [v11 setDelegate:v0];
    [v11 setDataSource:v0];
    [v11 setClipsToBounds:0];
    id v12 = [v11 layer];
    [v12 setCornerCurve:kCACornerCurveContinuous];

    id v13 = [v11 layer];
    [v13 setMaskedCorners:1];

    uint64_t v14 = self;
    id v40 = v11;
    id v15 = [v14 clearColor];
    [v40 setBackgroundColor:v15];

    [v0 addSubview:v40];
    id v16 = [v40 superview];
    if (v16)
    {
      uint64_t v17 = v16;
      [v40 setTranslatesAutoresizingMaskIntoConstraints:0];
      id v18 = [v40 topAnchor];
      id v19 = [v17 topAnchor];
      id v20 = [v18 constraintEqualToAnchor:v19];

      [v20 setConstant:2.0];
      id v21 = v20;
      [v21 setActive:1];
    }
    id v22 = [v40 superview];
    if (v22)
    {
      id v23 = v22;
      [v40 setTranslatesAutoresizingMaskIntoConstraints:0];
      id v24 = [v40 leadingAnchor];
      id v25 = [v23 leadingAnchor];
      id v26 = [v24 constraintEqualToAnchor:v25];

      [v26 setConstant:2.0];
      id v27 = v26;
      [v27 setActive:1];
    }
    id v28 = [v40 superview];
    if (v28)
    {
      int v29 = v28;
      [v40 setTranslatesAutoresizingMaskIntoConstraints:0];
      id v30 = [v40 trailingAnchor];
      id v31 = [v29 trailingAnchor];
      id v32 = [v30 constraintEqualToAnchor:v31];

      [v32 setConstant:-2.0];
      id v33 = v32;
      [v33 setActive:1];
    }
    id v34 = [v40 superview];
    if (v34)
    {
      id v35 = v34;
      [v40 setTranslatesAutoresizingMaskIntoConstraints:0];
      id v36 = [v40 bottomAnchor];
      id v37 = [v35 bottomAnchor];
      id v38 = [v36 constraintEqualToAnchor:v37];

      [v38 setConstant:-2.0];
      id v39 = v38;
      [v39 setActive:1];
    }
    (*(void (**)(void))((swift_isaMask & *v0) + 0x1C0))();
  }
}

Swift::Void __swiftcall MOSuggestionSheetAssetGridView.invalidateGrid()()
{
  [*(id *)(v0 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_mosaicLayout) invalidateLayout];
}

Swift::Void __swiftcall MOSuggestionSheetAssetGridView.reloadAll()()
{
  uint64_t v1 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x1C0))();
  double v2 = (void *)(*(uint64_t (**)(uint64_t))((swift_isaMask & *v0) + 0xA8))(v1);
  if (v2)
  {
    id v3 = v2;
    [v2 reloadData];
  }
}

Swift::Void __swiftcall MOSuggestionSheetAssetGridView.reload(index:)(Swift::Int index)
{
  unint64_t v3 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x150))();
  if (!v3) {
    goto LABEL_7;
  }
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    Swift::Int v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    Swift::Int v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  uint64_t v5 = swift_bridgeObjectRelease();
  if (v4 > index)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v1) + 0xA8))(v5);
    if (!v6) {
      return;
    }
    uint64_t v7 = (void *)v6;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<IndexPath>);
    type metadata accessor for IndexPath();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_1001DA0F0;
    IndexPath.init(row:section:)();
    os_log_t oslog = (os_log_t)Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v7 reconfigureItemsAtIndexPaths:oslog];
  }
  else
  {
LABEL_7:
    if (serverManager._connectionProperties != (NSMutableDictionary *)-1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static MOAngelLogger.assets);
    os_log_t oslog = (os_log_t)Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v9, "[MOSuggestionSheetAssetGridView] Refusing to reconfigure due to size / index mismatch", v10, 2u);
      swift_slowDealloc();
    }
  }
}

void MOSuggestionSheetAssetGridView.reloadWith(assetViewModel:index:)(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  unint64_t v5 = (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x150))();
  if (v5)
  {
    if (v5 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v6 > a2)
    {
      uint64_t v8 = (uint64_t (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))((swift_isaMask & *v2) + 0x160))(v21);
      if (*v7)
      {
        os_log_type_t v9 = v7;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for MOWeakReference<MOSuggestionSheetAssetViewModel>);
        uint64_t v10 = swift_allocObject();
        swift_weakInit();
        swift_beginAccess();
        swift_weakAssign();
        uint64_t v11 = *v9;
        swift_retain_n();
        int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
        uint64_t *v9 = v11;
        if (!isUniquelyReferenced_nonNull_bridgeObject || v11 < 0 || (v11 & 0x4000000000000000) != 0)
        {
          uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew()(v11);
          uint64_t *v9 = v11;
        }
        if (a2 < 0)
        {
          __break(1u);
        }
        else if (*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) > (unint64_t)a2)
        {
          *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 8 * a2 + 0x20) = v10;
          swift_release();
          specialized Array._endMutation()();
          swift_release_n();
          uint64_t v13 = v8(v21, 0);
          goto LABEL_21;
        }
        __break(1u);
        return;
      }
      uint64_t v13 = v8(v21, 0);
LABEL_21:
      uint64_t v17 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v3) + 0xA8))(v13);
      if (v17)
      {
        id v18 = (void *)v17;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<IndexPath>);
        type metadata accessor for IndexPath();
        *(_OWORD *)(swift_allocObject() + 16) = xmmword_1001DA0F0;
        IndexPath.init(row:section:)();
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v18 reconfigureItemsAtIndexPaths:isa];
      }
      return;
    }
  }
  if (serverManager._connectionProperties != (NSMutableDictionary *)-1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static MOAngelLogger.assets);
  os_log_t oslog = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v15))
  {
    id v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v15, "[MOSuggestionSheetAssetGridView] Refusing to reconfigure due to size / index mismatch", v16, 2u);
    swift_slowDealloc();
  }
}

Swift::Void __swiftcall MOSuggestionSheetAssetGridView.updateGridLayout()()
{
  uint64_t v1 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xA8))();
  if (v1)
  {
    id v3 = (id)v1;
    id v2 = *(id *)((char *)v0 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_mosaicLayout);
    [v3 setCollectionViewLayout:v2];
  }
}

Swift::Void __swiftcall MOSuggestionSheetAssetGridView.updateAddedVisibility()()
{
  uint64_t v1 = OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_addedView;
  id v2 = *(uint64_t (**)(void))((swift_isaMask & *v0) + 0x180);
  id v3 = *(id *)((char *)v0 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_addedView);
  [v3 setHidden:(v2() & 1) == 0];

  id v4 = *(id *)((char *)v0 + v1);
  [v0 bounds];
  [v4 setFrame:];
}

Swift::Void __swiftcall MOSuggestionSheetAssetGridView.updateSelectedAssets()()
{
  uint64_t v1 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xA8))();
  if (v1)
  {
    id v2 = v1;
    [v1 reloadData];
  }
}

Swift::Int __swiftcall MOSuggestionSheetAssetGridView.maxAssetCount()()
{
  Swift::Int result = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x150))();
  if (result)
  {
    unint64_t v2 = result;
    if ((*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x198))())
    {
      if (v2 >> 62)
      {
        swift_bridgeObjectRetain();
        Swift::Int v3 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        Swift::Int v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v3 >= 13) {
        return 13;
      }
      else {
        return v3;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v4 = swift_bridgeObjectRelease();
      if ((*(uint64_t (**)(uint64_t))((swift_isaMask & *v0) + 0x120))(v4)) {
        return 5;
      }
      else {
        return 4;
      }
    }
  }
  return result;
}

id MOSuggestionSheetAssetGridView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MOSuggestionSheetAssetGridView();
  return [super dealloc];
}

Swift::Int __swiftcall MOSuggestionSheetAssetGridView.collectionView(_:numberOfItemsInSection:)(UICollectionView _, Swift::Int numberOfItemsInSection)
{
  Swift::Int result = (*(uint64_t (**)(Class, Swift::Int))((swift_isaMask & *v2) + 0x150))(_.super.super.super.super.isa, numberOfItemsInSection);
  if (result)
  {
    if ((unint64_t)result >> 62)
    {
      swift_bridgeObjectRetain();
      Swift::Int v4 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      Swift::Int v4 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    uint64_t v5 = swift_bridgeObjectRelease();
    Swift::Int result = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v2) + 0x1F8))(v5);
    if (result >= v4) {
      return v4;
    }
  }
  return result;
}

void MOSuggestionSheetAssetGridView.collectionView(_:didEndDisplaying:forItemAt:)(uint64_t a1, void *a2)
{
  type metadata accessor for MOSuggestionSheetMosaicCell();
  Swift::Int v3 = (void *)swift_dynamicCastClass();
  if (v3)
  {
    Swift::Int v4 = *(void (**)(void))((swift_isaMask & *v3) + 0x170);
    id v5 = a2;
    v4();
  }
}

void MOSuggestionSheetAssetGridView.collectionView(_:cellForItemAt:)(void *a1, NSObject *a2)
{
  Swift::Int v3 = v2;
  uint64_t v6 = (void *)type metadata accessor for IndexPath();
  uint64_t v77 = *(v6 - 1);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  NSString v9 = String._bridgeToObjectiveC()();
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  id v11 = [a1 dequeueReusableCellWithReuseIdentifier:v9 forIndexPath:isa];

  type metadata accessor for MOSuggestionSheetMosaicCell();
  uint64_t v12 = swift_dynamicCastClass();
  if (!v12) {
    goto LABEL_55;
  }
  uint64_t v13 = (void *)v12;
  id v78 = a2;
  uint64_t v14 = IndexPath.item.getter();
  os_log_type_t v15 = *(uint64_t (**)(void))((swift_isaMask & (uint64_t)v3->isa) + 0x150);
  unint64_t v16 = v15();
  id v76 = v6;
  if (!v16)
  {
    if (v14 > -2) {
      return;
    }
LABEL_8:
    uint64_t v18 = ((uint64_t (*)(unint64_t))v15)(v16);
    id v75 = v13;
    if (v18)
    {
      unint64_t v20 = v18;
      uint64_t v74 = v19;
      unint64_t v21 = IndexPath.item.getter();
      os_log_type_t v22 = v20 & 0xF8;
      if (v20 >> 62)
      {
        swift_bridgeObjectRetain();
        unint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if ((v23 & 0x8000000000000000) != 0)
        {
          __break(1u);
          goto LABEL_50;
        }
      }
      else
      {
        unint64_t v23 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      if ((v21 & 0x8000000000000000) == 0 && v21 < v23)
      {
        if ((v20 & 0xC000000000000001) == 0)
        {
          if (v21 >= *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_52;
          }
          uint64_t v24 = *(void *)(v20 + 8 * v21 + 32);
          uint64_t v25 = swift_retain();
          goto LABEL_16;
        }
LABEL_50:
        uint64_t v25 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v24 = v25;
LABEL_16:
        uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 96))(v25);
        swift_release();
        outlined consume of MOWeakArray<MOSuggestionSheetAssetViewModel>?(v20);
        if (v26)
        {
          id v27 = [a1 collectionViewLayout];
          Class v28 = IndexPath._bridgeToObjectiveC()().super.isa;
          int v29 = [v27 layoutAttributesForItemAtIndexPath:v28];

          id v76 = v27;
          if (v29)
          {
            [v29 size];
            double v31 = v30;
            [v29 size];
            double v33 = v31 - v32;
          }
          else
          {
            double v33 = 0.0;
          }
          id v11 = &swift_isaMask;
          uint64_t v43 = (*(uint64_t (**)(BOOL))(*(void *)v26 + 808))(fabs(v33) < 5.0);
          id v44 = *(uint64_t (**)(uint64_t))((swift_isaMask & (uint64_t)v3->isa) + 0x198);
          uint64_t v74 = (swift_isaMask & (uint64_t)v3->isa) + 408;
          char v45 = v44(v43);
          id v46 = v75;
          (*(void (**)(void))((swift_isaMask & *v75) + 0x128))(v45 & 1);
          id v47 = *(uint64_t (**)(uint64_t))((swift_isaMask & *v46) + 0x110);
          uint64_t v48 = swift_retain();
          uint64_t v49 = v47(v48);
          uint64_t v50 = (*(uint64_t (**)(uint64_t))((swift_isaMask & (uint64_t)v3->isa) + 0x168))(v49);
          id v51 = *(uint64_t (**)(void))(*(void *)v26 + 512);
          uint64_t v77 = v26;
          v79[0] = v51();
          v79[1] = v52;
          v79[4] = 35;
          v79[5] = 0xE100000000000000;
          lazy protocol witness table accessor for type String and conformance String();
          id v53 = (void *)StringProtocol.components<A>(separatedBy:)();
          if (v53[2])
          {
            uint64_t v54 = v53[4];
            uint64_t v55 = v53[5];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            char v56 = specialized Set.contains(_:)(v54, v55, v50);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            id v57 = [v46 setSelected:v56 & 1];
            char v58 = *(uint64_t (**)(void))((swift_isaMask & (uint64_t)v3->isa) + 0x120);
            if (((uint64_t (*)(id))v58)(v57)) {
              uint64_t v59 = 4;
            }
            else {
              uint64_t v59 = 3;
            }
            char v60 = v58();
            uint64_t v61 = (*(uint64_t (**)(void))((swift_isaMask & (uint64_t)v3->isa) + 0x108))();
            if (IndexPath.row.getter() != v59) {
              goto LABEL_42;
            }
            uint64_t v62 = 4;
            if (v60) {
              uint64_t v62 = 5;
            }
            if (v61 <= v62)
            {
LABEL_42:

              swift_release();
              goto LABEL_45;
            }
            char v63 = v58();
            uint64_t v64 = (*(uint64_t (**)(void))((swift_isaMask & (uint64_t)v3->isa) + 0x108))();
            if (v63)
            {
              uint64_t v65 = v64 - 5;
              if (!__OFSUB__(v64, 5)) {
                goto LABEL_44;
              }
              __break(1u);
              goto LABEL_42;
            }
            uint64_t v65 = v64 - 4;
            if (!__OFSUB__(v64, 4))
            {
LABEL_44:
              uint64_t v66 = v65 + 1;
              id v67 = *(uint64_t (**)(void *))((swift_isaMask & *v75) + 0x148);
              id v68 = (uint64_t (*)(void *, void))v67(v79);
              *(void *)(v69 + 8) = v66;
              uint64_t v70 = v68(v79, 0);
              LOBYTE(v66) = v44(v70);
              id v71 = (void (*)(void *, void))v67(v79);
              BOOL *v72 = (v66 & 1) == 0;
              v71(v79, 0);

              swift_release();
              goto LABEL_45;
            }
          }
          else
          {
            __break(1u);
          }
          __break(1u);
LABEL_55:

          __break(1u);
          return;
        }
        goto LABEL_20;
      }
      outlined consume of MOWeakArray<MOSuggestionSheetAssetViewModel>?(v20);
    }
LABEL_20:
    if (serverManager._clientConnections != (NSMutableDictionary *)-1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    __swift_project_value_buffer(v34, (uint64_t)static MOAngelLogger.shared);
    uint64_t v35 = v77;
    id v36 = v76;
    (*(void (**)(char *, NSObject *, id))(v77 + 16))(v8, v78, v76);
    Swift::Int v3 = v3;
    id v37 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v37, v22))
    {

      (*(void (**)(char *, id))(v35 + 8))(v8, v36);
      int v29 = v3;
LABEL_45:

      return;
    }
    id v78 = v37;
    unint64_t v20 = swift_slowAlloc();
    *(_DWORD *)unint64_t v20 = 134218240;
    uint64_t v38 = IndexPath.item.getter();
    (*(void (**)(char *, id))(v35 + 8))(v8, v36);
    v79[0] = v38;
    uint64_t v39 = UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v20 + 12) = 2048;
    uint64_t v40 = ((uint64_t (*)(uint64_t))v15)(v39);
    if (!v40)
    {

      uint64_t v42 = 0;
      goto LABEL_28;
    }
    unint64_t v41 = v40;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined consume of MOWeakArray<MOSuggestionSheetAssetViewModel>?(v41);
    if (!(v41 >> 62))
    {
      uint64_t v42 = *(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_28:
      int v29 = v78;
      v79[0] = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v29, v22, "[MOSuggestionSheetAssetGridView] index out of bounds, indexPath.item=%ld, count=%ld", (uint8_t *)v20, 0x16u);
      swift_slowDealloc();
      goto LABEL_45;
    }
LABEL_52:
    swift_bridgeObjectRetain();
    uint64_t v42 = _CocoaArrayWrapper.endIndex.getter();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    goto LABEL_28;
  }
  if (v16 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v17 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  unint64_t v16 = swift_bridgeObjectRelease();
  if (v14 < v17) {
    goto LABEL_8;
  }
}

void *MOSuggestionSheetAssetGridView.collectionView(_:willDisplay:forItemAt:)(void *a1, void *a2)
{
  Swift::Int v3 = v2;
  uint64_t v6 = *(uint64_t (**)(void))((swift_isaMask & *v2) + 0x150);
  Swift::Int result = (void *)v6();
  if (!result) {
    return result;
  }
  unint64_t v9 = (unint64_t)result;
  uint64_t v10 = v8;
  uint64_t v24 = a1;
  id v11 = a2;
  unint64_t v12 = IndexPath.item.getter();
  uint64_t v13 = (void *)(v9 & 0xFFFFFFFFFFFFFF8);
  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if ((v14 & 0x8000000000000000) != 0)
    {
      __break(1u);
      goto LABEL_28;
    }
  }
  else
  {
    unint64_t v14 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((v12 & 0x8000000000000000) == 0 && v12 < v14)
  {
    if ((v9 & 0xC000000000000001) == 0)
    {
      if (v12 >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_30;
      }
      uint64_t v15 = *(void *)(v9 + 8 * v12 + 32);
      uint64_t v16 = swift_retain();
LABEL_9:
      uint64_t v13 = v11;
      unint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 96))(v16);
      swift_release();
      Swift::Int result = (void *)outlined consume of MOWeakArray<MOSuggestionSheetAssetViewModel>?(v9);
      id v11 = v24;
      if (!v14) {
        return result;
      }
      uint64_t v10 = IndexPath.item.getter();
      unint64_t v17 = v6();
      if (!v17)
      {
        if (v10 < -1)
        {
LABEL_14:
          uint64_t v19 = (*(uint64_t (**)(unint64_t))((swift_isaMask & *v3) + 0x168))(v17);
          (*(void (**)(void))(*(void *)v14 + 512))();
          lazy protocol witness table accessor for type String and conformance String();
          Swift::Int result = (void *)StringProtocol.components<A>(separatedBy:)();
          if (result[2])
          {
            uint64_t v20 = result[4];
            uint64_t v21 = result[5];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            char v22 = specialized Set.contains(_:)(v20, v21, v19);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v22)
            {
              Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
              [v11 selectItemAtIndexPath:isa animated:0 scrollPosition:1];
            }
            [v13 setSelected:v22 & 1];
            return (void *)swift_release();
          }
          else
          {
            __break(1u);
          }
          return result;
        }
        goto LABEL_23;
      }
      if (!(v17 >> 62))
      {
        uint64_t v18 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_13;
      }
LABEL_30:
      swift_bridgeObjectRetain();
      uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
LABEL_13:
      swift_bridgeObjectRelease();
      unint64_t v17 = swift_bridgeObjectRelease();
      if (v10 < v18) {
        goto LABEL_14;
      }
LABEL_23:
      return (void *)swift_release();
    }
LABEL_28:
    uint64_t v16 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    uint64_t v15 = v16;
    goto LABEL_9;
  }

  return (void *)outlined consume of MOWeakArray<MOSuggestionSheetAssetViewModel>?(v9);
}

void *MOSuggestionSheetAssetGridView.collectionView(_:didSelectItemAt:)()
{
  return specialized MOSuggestionSheetAssetGridView.collectionView(_:didSelectItemAt:)();
}

void *MOSuggestionSheetAssetGridView.collectionView(_:didDeselectItemAt:)()
{
  return specialized MOSuggestionSheetAssetGridView.collectionView(_:didDeselectItemAt:)();
}

uint64_t @objc MOSuggestionSheetAssetGridView.collectionView(_:didSelectItemAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(char *))
{
  uint64_t v8 = type metadata accessor for IndexPath();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  id v12 = a3;
  id v13 = a1;
  a5(v11);

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t type metadata accessor for MOSuggestionSheetAssetGridView()
{
  return self;
}

void specialized MOSuggestionSheetAssetGridView.init(coder:)()
{
  uint64_t v1 = v0;
  *(void *)&v0[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_gridCollectionView] = 0;
  uint64_t v2 = OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_addedView;
  Swift::Int v3 = [objc_allocWithZone((Class)type metadata accessor for MOSuggestionAddedView()) initWithFrame:0.0, 0.0, 0.0, 0.0];
  v3[OBJC_IVAR____TtC16MomentsUIService21MOSuggestionAddedView_symbolOnly] = 0;
  Swift::Int v4 = v3;
  [v4 setClipsToBounds:1];
  MOSuggestionAddedView.initAddedView()();

  *(void *)&v1[v2] = v4;
  *(void *)&v1[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v1[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_assetCount] = 0;
  v1[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_isFullWidth] = 1;
  v1[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_isFullHeight] = 1;
  id v5 = &v1[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_assetViewModels];
  v5[1] = 0;
  void v5[2] = 0;
  *id v5 = 0;
  *(void *)&v1[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_selectedAssetIdentifiers] = &_swiftEmptySetSingleton;
  v1[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_isBundleSelected] = 0;
  v1[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetAssetGridView_isInterstitial] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void *specialized MOSuggestionSheetAssetGridView.collectionView(_:didSelectItemAt:)()
{
  uint64_t v1 = v0;
  Swift::Int result = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x150))();
  if (!result) {
    return result;
  }
  unint64_t v3 = (unint64_t)result;
  unint64_t v4 = IndexPath.item.getter();
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if ((v5 & 0x8000000000000000) != 0)
    {
      __break(1u);
      goto LABEL_36;
    }
  }
  else
  {
    unint64_t v5 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((v4 & 0x8000000000000000) != 0 || v4 >= v5)
  {
    return (void *)outlined consume of MOWeakArray<MOSuggestionSheetAssetViewModel>?(v3);
  }
  if ((v3 & 0xC000000000000001) == 0)
  {
    if (v4 >= *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_38;
    }
    uint64_t v6 = *(void *)(v3 + 8 * v4 + 32);
    uint64_t v7 = swift_retain();
    goto LABEL_9;
  }
LABEL_36:
  uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  uint64_t v6 = v7;
LABEL_9:
  uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 96))(v7);
  swift_release();
  Swift::Int result = (void *)outlined consume of MOWeakArray<MOSuggestionSheetAssetViewModel>?(v3);
  if (!v8) {
    return result;
  }
  uint64_t v9 = (unint64_t *)(*v8 + 512);
  unint64_t v3 = *v9;
  if (((uint64_t (*)(void *))*v9)(result) != 0x6C6F686563616C70 || v10 != 0xEB00000000726564)
  {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v12)
    {
      return (void *)swift_release();
    }
    if (serverManager._connectionProperties == (NSMutableDictionary *)-1)
    {
LABEL_25:
      uint64_t v13 = type metadata accessor for Logger();
      __swift_project_value_buffer(v13, (uint64_t)static MOAngelLogger.assets);
      swift_retain_n();
      unint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v14, v15))
      {
        os_log_type_t v29 = v15;
        uint64_t v16 = (uint8_t *)swift_slowAlloc();
        uint64_t v30 = swift_slowAlloc();
        *(_DWORD *)uint64_t v16 = 136315138;
        uint64_t v31 = ((uint64_t (*)(void))v3)();
        uint64_t v32 = v17;
        Swift::Int v33 = 35;
        unint64_t v34 = 0xE100000000000000;
        lazy protocol witness table accessor for type String and conformance String();
        Swift::Int result = (void *)StringProtocol.components<A>(separatedBy:)();
        if (!result[2]) {
          goto LABEL_40;
        }
        uint64_t v19 = result[4];
        unint64_t v18 = result[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v18, &v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v14, v29, "[MOSuggestionSheetAssetGridView] selecting %s", v16, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        uint64_t v20 = swift_release_n();
      }
      uint64_t v31 = ((uint64_t (*)(uint64_t))v3)(v20);
      uint64_t v32 = v21;
      Swift::Int v33 = 35;
      unint64_t v34 = 0xE100000000000000;
      lazy protocol witness table accessor for type String and conformance String();
      Swift::Int result = (void *)StringProtocol.components<A>(separatedBy:)();
      if (result[2])
      {
        Swift::Int v22 = result[4];
        Swift::Int v23 = result[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v24 = (uint64_t (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))((swift_isaMask & *v1)
                                                                                              + 0x178))(&v31);
        specialized Set._Variant.insert(_:)(&v33, v22, v23);
        swift_bridgeObjectRelease();
        uint64_t v25 = v24(&v31, 0);
        if ((*(uint64_t (**)(uint64_t))((swift_isaMask & *v1) + 0xF0))(v25))
        {
          uint64_t v27 = v26;
          uint64_t ObjectType = swift_getObjectType();
          (*(void (**)(uint64_t, uint64_t))(v27 + 8))(ObjectType, v27);
          swift_unknownObjectRelease();
        }
        return (void *)swift_release();
      }
      __break(1u);
LABEL_40:
      __break(1u);
      return result;
    }
LABEL_38:
    swift_once();
    goto LABEL_25;
  }
  swift_release();

  return (void *)swift_bridgeObjectRelease();
}

void *specialized MOSuggestionSheetAssetGridView.collectionView(_:didDeselectItemAt:)()
{
  uint64_t v2 = v0;
  Swift::Int result = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x150))();
  if (!result) {
    return result;
  }
  unint64_t v4 = (unint64_t)result;
  unint64_t v5 = IndexPath.item.getter();
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if ((v6 & 0x8000000000000000) != 0)
    {
      __break(1u);
      goto LABEL_25;
    }
  }
  else
  {
    unint64_t v6 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((v5 & 0x8000000000000000) == 0 && v5 < v6)
  {
    if ((v4 & 0xC000000000000001) == 0)
    {
      if (v5 >= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_27;
      }
      uint64_t v7 = *(void *)(v4 + 8 * v5 + 32);
      uint64_t v8 = swift_retain();
LABEL_9:
      uint64_t v1 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 96))(v8);
      swift_release();
      Swift::Int result = (void *)outlined consume of MOWeakArray<MOSuggestionSheetAssetViewModel>?(v4);
      if (!v1) {
        return result;
      }
      if (serverManager._connectionProperties == (NSMutableDictionary *)-1)
      {
LABEL_11:
        uint64_t v9 = type metadata accessor for Logger();
        __swift_project_value_buffer(v9, (uint64_t)static MOAngelLogger.assets);
        swift_retain_n();
        uint64_t v10 = Logger.logObject.getter();
        os_log_type_t v11 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v10, v11))
        {
          char v12 = (uint8_t *)swift_slowAlloc();
          uint64_t v24 = swift_slowAlloc();
          *(_DWORD *)char v12 = 136315138;
          uint64_t v25 = (*(uint64_t (**)(void))(*(void *)v1 + 512))();
          uint64_t v26 = v13;
          uint64_t v27 = 35;
          unint64_t v28 = 0xE100000000000000;
          lazy protocol witness table accessor for type String and conformance String();
          Swift::Int result = (void *)StringProtocol.components<A>(separatedBy:)();
          if (!result[2]) {
            goto LABEL_29;
          }
          uint64_t v15 = result[4];
          unint64_t v14 = result[5];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v14, &v24);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v10, v11, "[MOSuggestionSheetAssetGridView] un-selecting %s", v12, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_release_n();
        }
        uint64_t v25 = (*(uint64_t (**)(void))(*(void *)v1 + 512))();
        uint64_t v26 = v16;
        uint64_t v27 = 35;
        unint64_t v28 = 0xE100000000000000;
        lazy protocol witness table accessor for type String and conformance String();
        Swift::Int result = (void *)StringProtocol.components<A>(separatedBy:)();
        if (result[2])
        {
          uint64_t v17 = result[4];
          uint64_t v18 = result[5];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v19 = (uint64_t (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))((swift_isaMask & *v2)
                                                                                                + 0x178))(&v25);
          specialized Set._Variant.remove(_:)(v17, v18);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v20 = v19(&v25, 0);
          if ((*(uint64_t (**)(uint64_t))((swift_isaMask & *v2) + 0xF0))(v20))
          {
            uint64_t v22 = v21;
            uint64_t ObjectType = swift_getObjectType();
            (*(void (**)(uint64_t, uint64_t))(v22 + 8))(ObjectType, v22);
            swift_unknownObjectRelease();
          }
          return (void *)swift_release();
        }
        __break(1u);
LABEL_29:
        __break(1u);
        return result;
      }
LABEL_27:
      swift_once();
      goto LABEL_11;
    }
LABEL_25:
    uint64_t v8 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    uint64_t v7 = v8;
    goto LABEL_9;
  }

  return (void *)outlined consume of MOWeakArray<MOSuggestionSheetAssetViewModel>?(v4);
}

uint64_t sub_100035B80@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0xA8))();
  *a2 = result;
  return result;
}

uint64_t sub_100035BDC(id *a1, void **a2)
{
  id v2 = *a1;
  unint64_t v3 = *(uint64_t (**)(id))((swift_isaMask & **a2) + 0xB0);
  id v4 = *a1;
  return v3(v2);
}

uint64_t sub_100035C44@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0xF0))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_100035CA0(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))((swift_isaMask & **a2) + 0xF8);
  uint64_t v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t sub_100035D14@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x108))();
  *a2 = result;
  return result;
}

uint64_t sub_100035D78(void *a1, void **a2)
{
  return (*(uint64_t (**)(void))((swift_isaMask & **a2) + 0x110))(*a1);
}

uint64_t sub_100035DD8@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x120))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_100035E40(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((swift_isaMask & **a2) + 0x128))(*a1);
}

uint64_t sub_100035EA0@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x138))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_100035F08(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((swift_isaMask & **a2) + 0x140))(*a1);
}

uint64_t sub_100035F68@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x150))();
  *a2 = result;
  a2[1] = v4;
  a2[2] = v5;
  return result;
}

uint64_t sub_100035FD4@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x168))();
  *a2 = result;
  return result;
}

uint64_t sub_100036038(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))((swift_isaMask & **a2) + 0x170);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1000360A4@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x180))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_10003610C(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((swift_isaMask & **a2) + 0x188))(*a1);
}

uint64_t sub_10003616C@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x198))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000361D4(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((swift_isaMask & **a2) + 0x1A0))(*a1);
}

uint64_t outlined destroy of weak MOSuggestionSheetInterstitialGridInteractionsDelegate?(uint64_t a1)
{
  return a1;
}

void one-time initialization function for font()
{
  uint64_t v0 = self;
  id v1 = [v0 preferredFontForTextStyle:UIFontTextStyleBody];
  id v2 = [v1 fontDescriptor];
  id v3 = [v2 fontDescriptorWithSymbolicTraits:2];

  if (v3)
  {
    id v4 = [v0 fontWithDescriptor:v3 size:0.0];

    static MOSuggestionSheetOverflowView.font = (uint64_t)v4;
  }
  else
  {
    __break(1u);
  }
}

{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;

  uint64_t v0 = self;
  id v1 = [v0 preferredFontForTextStyle:UIFontTextStyleCallout];
  id v2 = [v1 fontDescriptor];
  id v3 = [v2 fontDescriptorWithSymbolicTraits:2];

  if (v3)
  {
    id v4 = [v0 fontWithDescriptor:v3 size:0.0];

    static MOSuggestionAddedView.font = (uint64_t)v4;
  }
  else
  {
    __break(1u);
  }
}

uint64_t *MOSuggestionSheetOverflowView.font.unsafeMutableAddressor()
{
  if (one-time initialization token for font != -1) {
    swift_once();
  }
  return &static MOSuggestionSheetOverflowView.font;
}

id static MOSuggestionSheetOverflowView.font.getter()
{
  return default argument 3 of MOSuggestionWorkoutIconGlyphView.init(image:glyphLightBackgroundColor:glyphDarkBackgroundColor:glyphTintColor:)(&one-time initialization token for font, (void **)&static MOSuggestionSheetOverflowView.font);
}

void one-time initialization function for config()
{
  if (one-time initialization token for font != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static MOSuggestionSheetOverflowView.font;
  id v1 = self;
  id v2 = v0;
  id v3 = [v1 configurationWithFont:v2 scale:1];

  static MOSuggestionSheetOverflowView.config = (uint64_t)v3;
}

{
  void *v0;
  void *v1;
  id v2;
  id v3;

  if (one-time initialization token for font != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static MOSuggestionAddedView.font;
  id v1 = self;
  id v2 = v0;
  id v3 = [v1 configurationWithFont:v2];

  static MOSuggestionAddedView.config = (uint64_t)v3;
}

uint64_t *MOSuggestionSheetOverflowView.config.unsafeMutableAddressor()
{
  if (one-time initialization token for config != -1) {
    swift_once();
  }
  return &static MOSuggestionSheetOverflowView.config;
}

id static MOSuggestionSheetOverflowView.config.getter()
{
  return default argument 3 of MOSuggestionWorkoutIconGlyphView.init(image:glyphLightBackgroundColor:glyphDarkBackgroundColor:glyphTintColor:)(&one-time initialization token for config, (void **)&static MOSuggestionSheetOverflowView.config);
}

const char *MOSuggestionSheetOverflowView.systemSymbol.unsafeMutableAddressor()
{
  return "plus";
}

uint64_t static MOSuggestionSheetOverflowView.systemSymbol.getter()
{
  return 1937075312;
}

void one-time initialization function for symbolColor()
{
  id v0 = [self tertiarySystemBackgroundColor];
  id v1 = [v0 colorWithAlphaComponent:0.5];

  static MOSuggestionSheetOverflowView.symbolColor = (uint64_t)v1;
}

uint64_t *MOSuggestionSheetOverflowView.symbolColor.unsafeMutableAddressor()
{
  if (one-time initialization token for symbolColor != -1) {
    swift_once();
  }
  return &static MOSuggestionSheetOverflowView.symbolColor;
}

id static MOSuggestionSheetOverflowView.symbolColor.getter()
{
  return default argument 3 of MOSuggestionWorkoutIconGlyphView.init(image:glyphLightBackgroundColor:glyphDarkBackgroundColor:glyphTintColor:)(&one-time initialization token for symbolColor, (void **)&static MOSuggestionSheetOverflowView.symbolColor);
}

id one-time initialization function for numberColor()
{
  id result = [self systemWhiteColor];
  static MOSuggestionSheetOverflowView.numberColor = (uint64_t)result;
  return result;
}

uint64_t *MOSuggestionSheetOverflowView.numberColor.unsafeMutableAddressor()
{
  if (one-time initialization token for numberColor != -1) {
    swift_once();
  }
  return &static MOSuggestionSheetOverflowView.numberColor;
}

id static MOSuggestionSheetOverflowView.numberColor.getter()
{
  return default argument 3 of MOSuggestionWorkoutIconGlyphView.init(image:glyphLightBackgroundColor:glyphDarkBackgroundColor:glyphTintColor:)(&one-time initialization token for numberColor, (void **)&static MOSuggestionSheetOverflowView.numberColor);
}

id MOSuggestionSheetOverflowView.blurEffectView.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetOverflowView_blurEffectView);
}

void MOSuggestionSheetOverflowView.overflowCount.didset()
{
  id v1 = *(void **)(v0 + OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetOverflowView_overflowCountLabel);
  id v2 = self;
  id v3 = v1;
  id v4 = [v2 mainBundle];
  v11._object = (void *)0x80000001001E1ED0;
  v5._uint64_t countAndFlagsBits = 25637;
  v5._object = (void *)0xE200000000000000;
  v6._uint64_t countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  v11._uint64_t countAndFlagsBits = 0xD000000000000014;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v5, (Swift::String_optional)0, (NSBundle)v4, v6, v11);

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1001DA0F0;
  uint64_t v8 = (uint64_t *)(v0 + OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetOverflowView_overflowCount);
  swift_beginAccess();
  uint64_t v9 = *v8;
  *(void *)(v7 + 56) = &type metadata for Int;
  *(void *)(v7 + 64) = &protocol witness table for Int;
  *(void *)(v7 + 32) = v9;
  static String.localizedStringWithFormat(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v3 setText:v10];
}

uint64_t MOSuggestionSheetOverflowView.overflowCount.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetOverflowView_overflowCount;
  swift_beginAccess();
  return *(void *)v1;
}

void MOSuggestionSheetOverflowView.overflowCount.setter(uint64_t a1)
{
  id v3 = (void *)(v1 + OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetOverflowView_overflowCount);
  swift_beginAccess();
  *id v3 = a1;
  MOSuggestionSheetOverflowView.overflowCount.didset();
}

void (*MOSuggestionSheetOverflowView.overflowCount.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return MOSuggestionSheetOverflowView.overflowCount.modify;
}

void MOSuggestionSheetOverflowView.overflowCount.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    MOSuggestionSheetOverflowView.overflowCount.didset();
  }
}

char *MOSuggestionSheetOverflowView.__allocating_init(overflowCount:)(uint64_t a1, uint64_t a2)
{
  id v4 = [objc_allocWithZone(v2) initWithFrame:0.0, 0.0, 0.0, 0.0];
  Swift::String v5 = *(void **)&v4[OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetOverflowView_overflowCountLabel];
  id v6 = v5;
  if (a2)
  {
    NSString v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v7 = 0;
  }
  [v5 setText:v7];

  return v4;
}

id MOSuggestionSheetOverflowView.init(frame:)(double a1, double a2, double a3, double a4)
{
  uint64_t v9 = OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetOverflowView_blurEffectView;
  id v10 = objc_allocWithZone((Class)UIVisualEffectView);
  Swift::String v11 = v4;
  *(void *)&v4[v9] = [v10 init];
  *(void *)&v11[OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetOverflowView_overflowCount] = 0;
  uint64_t v12 = OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetOverflowView_overflowCountLabel;
  id v13 = [objc_allocWithZone((Class)UILabel) init];
  if (one-time initialization token for numberColor != -1) {
    swift_once();
  }
  [v13 setTextColor:static MOSuggestionSheetOverflowView.numberColor];
  if (one-time initialization token for font != -1) {
    swift_once();
  }
  [v13 setFont:static MOSuggestionSheetOverflowView.font];
  [v13 setAdjustsFontForContentSizeCategory:1];
  *(void *)&v11[v12] = v13;

  v16.receiver = v11;
  v16.super_class = (Class)type metadata accessor for MOSuggestionSheetOverflowView();
  id v14 = [super initWithFrame:a1, a2, a3, a4];
  MOSuggestionSheetOverflowView.initOverflowView()();

  return v14;
}

uint64_t type metadata accessor for MOSuggestionSheetOverflowView()
{
  return self;
}

void MOSuggestionSheetOverflowView.initOverflowView()()
{
  uint64_t v1 = v0;
  id v2 = *(void **)&v0[OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetOverflowView_blurEffectView];
  id v3 = [self _effectWithBlurRadius:10.0 scale:1.0];
  [v2 setEffect:v3];

  id v4 = [self blackColor];
  id v5 = [v4 colorWithAlphaComponent:0.2];

  [v2 setBackgroundColor:v5];
  [v1 addSubview:v2];
  UIView.fillSuper(margin:)(0.0);
  swift_bridgeObjectRelease();
  id v6 = [v2 layer];
  [v6 setCornerRadius:7.0];

  [v2 setClipsToBounds:1];
  id v7 = [objc_allocWithZone((Class)UIStackView) init];
  [v7 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v7 setAxis:0];
  [v7 setDistribution:2];
  [v7 setAlignment:3];
  [v1 addSubview:v7];
  id v8 = [v7 superview];
  if (v8)
  {
    uint64_t v9 = v8;
    [v7 setTranslatesAutoresizingMaskIntoConstraints:0];
    id v10 = [v7 centerXAnchor];
    id v11 = [v9 centerXAnchor];
    id v12 = [v10 constraintEqualToAnchor:v11];

    [v12 setConstant:0.0];
    id v13 = v12;
    [v13 setActive:1];
  }
  id v14 = [v7 superview];
  if (v14)
  {
    uint64_t v15 = v14;
    [v7 setTranslatesAutoresizingMaskIntoConstraints:0];
    id v16 = [v7 centerYAnchor];
    id v17 = [v15 centerYAnchor];
    id v18 = [v16 constraintEqualToAnchor:v17];

    [v18 setConstant:0.0];
    id v19 = v18;
    [v19 setActive:1];
  }
  id v28 = [objc_allocWithZone((Class)UIImageView) init];
  if (one-time initialization token for config != -1) {
    swift_once();
  }
  id v20 = (id)static MOSuggestionSheetOverflowView.config;
  NSString v21 = String._bridgeToObjectiveC()();
  id v22 = [self systemImageNamed:v21 withConfiguration:v20];

  [v28 setImage:v22];
  if (one-time initialization token for symbolColor != -1) {
    swift_once();
  }
  [v28 setTintColor:static MOSuggestionSheetOverflowView.symbolColor];
  [v28 setOverrideUserInterfaceStyle:1];
  [v28 setMaximumContentSizeCategory:UIContentSizeCategoryAccessibilityMedium];
  [v7 addArrangedSubview:v28];
  uint64_t v23 = OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetOverflowView_overflowCountLabel;
  uint64_t v24 = one-time initialization token for numberColor;
  id v25 = *(id *)&v1[OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetOverflowView_overflowCountLabel];
  if (v24 != -1) {
    swift_once();
  }
  [v25 setTextColor:static MOSuggestionSheetOverflowView.numberColor];

  uint64_t v26 = one-time initialization token for font;
  id v27 = *(id *)&v1[v23];
  if (v26 != -1) {
    swift_once();
  }
  [v27 setFont:static MOSuggestionSheetOverflowView.font];

  [*(id *)&v1[v23] setMaximumContentSizeCategory:UIContentSizeCategoryAccessibilityMedium];
  [v7 addArrangedSubview:*(void *)&v1[v23]];
}

id MOSuggestionSheetOverflowView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MOSuggestionSheetOverflowView();
  return [super dealloc];
}

void specialized MOSuggestionSheetOverflowView.init(coder:)()
{
  uint64_t v1 = OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetOverflowView_blurEffectView;
  *(void *)&v0[v1] = [objc_allocWithZone((Class)UIVisualEffectView) init];
  *(void *)&v0[OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetOverflowView_overflowCount] = 0;
  uint64_t v2 = OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetOverflowView_overflowCountLabel;
  id v3 = [objc_allocWithZone((Class)UILabel) init];
  if (one-time initialization token for numberColor != -1) {
    swift_once();
  }
  [v3 setTextColor:static MOSuggestionSheetOverflowView.numberColor];
  if (one-time initialization token for font != -1) {
    swift_once();
  }
  [v3 setFont:static MOSuggestionSheetOverflowView.font];
  [v3 setAdjustsFontForContentSizeCategory:1];
  *(void *)&v0[v2] = v3;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_100037338@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x68))();
  *a2 = result;
  return result;
}

uint64_t sub_100037394(void *a1, void **a2)
{
  return (*(uint64_t (**)(void))((swift_isaMask & **a2) + 0x70))(*a1);
}

BOOL static MOSuggestionCollectionViewInteractionState.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void MOSuggestionCollectionViewInteractionState.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int MOSuggestionCollectionViewInteractionState.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AssetViewMode(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void *MOSuggestionSheetInterstitialViewConstants.SIDE_MARGIN.unsafeMutableAddressor()
{
  return &static MOSuggestionSheetInterstitialViewConstants.SIDE_MARGIN;
}

void *MOSuggestionSheetInterstitialViewConstants.BUTTON_SIDE_MARGIN_LANDSCAPE.unsafeMutableAddressor()
{
  return &static MOSuggestionSheetInterstitialViewConstants.BUTTON_SIDE_MARGIN_LANDSCAPE;
}

double static MOSuggestionSheetInterstitialViewConstants.BUTTON_SIDE_MARGIN_LANDSCAPE.getter()
{
  return 200.0;
}

void one-time initialization function for BUTTON_BOTTOM_MARGIN_LANDSCAPE()
{
  static MOSuggestionSheetInterstitialViewConstants.BUTTON_BOTTOM_MARGIN_LANDSCAPE = 0x4010000000000000;
}

uint64_t *MOSuggestionSheetInterstitialViewConstants.BUTTON_BOTTOM_MARGIN_LANDSCAPE.unsafeMutableAddressor()
{
  if (one-time initialization token for BUTTON_BOTTOM_MARGIN_LANDSCAPE != -1) {
    swift_once();
  }
  return &static MOSuggestionSheetInterstitialViewConstants.BUTTON_BOTTOM_MARGIN_LANDSCAPE;
}

double static MOSuggestionSheetInterstitialViewConstants.BUTTON_BOTTOM_MARGIN_LANDSCAPE.getter()
{
  return static MOSuggestionSheetInterstitialViewConstants.BUTTON_BOTTOM_MARGIN_LANDSCAPE.getter(&one-time initialization token for BUTTON_BOTTOM_MARGIN_LANDSCAPE, (uint64_t)&static MOSuggestionSheetInterstitialViewConstants.BUTTON_BOTTOM_MARGIN_LANDSCAPE);
}

void one-time initialization function for BUTTON_BOTTOM_MARGIN_PORTRAIT()
{
  static MOSuggestionSheetInterstitialViewConstants.BUTTON_BOTTOM_MARGIN_PORTRAIT = 0x404C000000000000;
}

uint64_t *MOSuggestionSheetInterstitialViewConstants.BUTTON_BOTTOM_MARGIN_PORTRAIT.unsafeMutableAddressor()
{
  if (one-time initialization token for BUTTON_BOTTOM_MARGIN_PORTRAIT != -1) {
    swift_once();
  }
  return &static MOSuggestionSheetInterstitialViewConstants.BUTTON_BOTTOM_MARGIN_PORTRAIT;
}

double static MOSuggestionSheetInterstitialViewConstants.BUTTON_BOTTOM_MARGIN_PORTRAIT.getter()
{
  return static MOSuggestionSheetInterstitialViewConstants.BUTTON_BOTTOM_MARGIN_LANDSCAPE.getter(&one-time initialization token for BUTTON_BOTTOM_MARGIN_PORTRAIT, (uint64_t)&static MOSuggestionSheetInterstitialViewConstants.BUTTON_BOTTOM_MARGIN_PORTRAIT);
}

double static MOSuggestionSheetInterstitialViewConstants.BUTTON_BOTTOM_MARGIN_LANDSCAPE.getter(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  return *(double *)a2;
}

void *MOSuggestionSheetInterstitialViewConstants.LIST_SIDE_MARGIN_LANDSCAPE.unsafeMutableAddressor()
{
  return &static MOSuggestionSheetInterstitialViewConstants.LIST_SIDE_MARGIN_LANDSCAPE;
}

double static MOSuggestionSheetInterstitialViewConstants.LIST_SIDE_MARGIN_LANDSCAPE.getter()
{
  return 104.0;
}

void *MOSuggestionSheetInterstitialViewConstants.SIDE_MARGIN_PHOTO_MEMORY_BANNER.unsafeMutableAddressor()
{
  return &static MOSuggestionSheetInterstitialViewConstants.SIDE_MARGIN_PHOTO_MEMORY_BANNER;
}

double static MOSuggestionInterstitialExpandableListViewCellConstants.ASSET_PLATTER_EDGE_LENGTH.getter()
{
  return 40.0;
}

void *MOSuggestionSheetInterstitialViewConstants.SECONDARY_BUTTON_BOTTOM_MARGIN.unsafeMutableAddressor()
{
  return &static MOSuggestionSheetInterstitialViewConstants.SECONDARY_BUTTON_BOTTOM_MARGIN;
}

double static MOSuggestionSheetInterstitialViewConstants.SECONDARY_BUTTON_BOTTOM_MARGIN.getter()
{
  return 34.0;
}

void *MOSuggestionSheetInterstitialViewConstants.SECONDARY_BUTTON_JOURNAL_BUTTON_MARGIN.unsafeMutableAddressor()
{
  return &static MOSuggestionSheetInterstitialViewConstants.SECONDARY_BUTTON_JOURNAL_BUTTON_MARGIN;
}

double static MOSuggestionInterstitialListAssetViewConstants.INSET_MARGIN.getter()
{
  return 5.0;
}

uint64_t MOSuggestionSheetInterstitialView.controller.getter()
{
  return swift_unknownObjectWeakLoadStrong();
}

void MOSuggestionSheetInterstitialView.controller.setter(void *a1)
{
}

void (*MOSuggestionSheetInterstitialView.controller.modify(void *a1))(id **a1, char a2)
{
  id v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_controller;
  v3[4] = v1;
  v3[5] = v4;
  swift_beginAccess();
  v3[3] = swift_unknownObjectWeakLoadStrong();
  return MOSuggestionSheetInterstitialView.controller.modify;
}

void MOSuggestionSheetInterstitialView.controller.modify(id **a1, char a2)
{
  id v3 = *a1;
  id v4 = (*a1)[3];
  swift_unknownObjectWeakAssign();
  if (a2)
  {

    swift_endAccess();
  }
  else
  {
    swift_endAccess();
  }

  free(v3);
}

uint64_t MOSuggestionSheetInterstitialView.presentationDelegate.getter()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t MOSuggestionSheetInterstitialView.presentationDelegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_presentationDelegate;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*MOSuggestionSheetInterstitialView.presentationDelegate.modify(void *a1))(uint64_t a1, char a2)
{
  id v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_presentationDelegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = Strong;
  v3[4] = v7;
  return MOSuggestionSheetAssetGridView.delegate.modify;
}

uint64_t MOSuggestionSheetInterstitialView.cellViewModel.getter()
{
  return swift_retain();
}

uint64_t MOSuggestionSheetInterstitialView.cellViewModel.setter(uint64_t a1)
{
  id v3 = (void *)(v1 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_cellViewModel);
  swift_beginAccess();
  *id v3 = a1;
  return swift_release();
}

uint64_t (*MOSuggestionSheetInterstitialView.cellViewModel.modify())()
{
  return MOSuggestionMapSnapshotView.platterBlurView.modify;
}

uint64_t MOSuggestionSheetInterstitialView.toggleListViewCarouselModeAccessibilityLabel.getter()
{
  char v1 = *(unsigned char *)(v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_currentViewMode);
  id v2 = [self mainBundle];
  unint64_t v9 = 0x80000001001E22C0;
  if (v1)
  {
    uint64_t v3 = 0x6C6573756F726143;
    unint64_t v4 = 0xED00007765695620;
  }
  else
  {
    uint64_t v3 = 0x656956207473694CLL;
    unint64_t v4 = 0xE900000000000077;
  }
  v5._uint64_t countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  unint64_t v6 = 0xD00000000000004ELL;
  uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v3, (Swift::String_optional)0, (NSBundle)v2, v5, *(Swift::String *)(&v9 - 1))._countAndFlagsBits;

  return countAndFlagsBits;
}

void closure #1 in variable initialization expression of MOSuggestionSheetInterstitialView.titleLabel()
{
  id v0 = [objc_allocWithZone((Class)UILabel) init];
  [v0 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v0 setAdjustsFontForContentSizeCategory:1];
  [v0 setNumberOfLines:0];
  char v1 = self;
  id v2 = [v1 preferredFontForTextStyle:UIFontTextStyleTitle2];
  id v3 = [v2 fontDescriptor];
  id v4 = [v3 fontDescriptorWithSymbolicTraits:2];

  if (v4)
  {
    id v5 = [v1 fontWithDescriptor:v4 size:0.0];

    [v0 setFont:v5];
    [v0 setTextAlignment:1];
  }
  else
  {
    __break(1u);
  }
}

id closure #1 in variable initialization expression of MOSuggestionSheetInterstitialView.dateLabel()
{
  id v0 = [objc_allocWithZone((Class)UILabel) init];
  [v0 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v0 setAdjustsFontForContentSizeCategory:1];
  [v0 setLineBreakMode:4];
  id v1 = [self preferredFontForTextStyle:UIFontTextStyleTitle3];
  [v0 setFont:v1];

  [v0 setNumberOfLines:0];
  [v0 setTextAlignment:1];
  return v0;
}

id closure #1 in variable initialization expression of MOSuggestionSheetInterstitialView.assetTypeLabel()
{
  id v0 = [objc_allocWithZone((Class)UILabel) init];
  [v0 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v0 setAdjustsFontForContentSizeCategory:1];
  [v0 setNumberOfLines:0];
  id v1 = [self preferredFontForTextStyle:UIFontTextStyleSubheadline];
  [v0 setFont:v1];

  id v2 = [self secondaryLabelColor];
  id v3 = [v2 colorWithAlphaComponent:0.67];

  [v0 setTextColor:v3];
  [v0 setTextAlignment:1];
  return v0;
}

id closure #1 in variable initialization expression of MOSuggestionSheetInterstitialView.emptySelectionLabel()
{
  id v0 = [objc_allocWithZone((Class)UILabel) init];
  [v0 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v0 setAdjustsFontForContentSizeCategory:1];
  [v0 setNumberOfLines:0];
  id v1 = [self preferredFontForTextStyle:UIFontTextStyleSubheadline];
  [v0 setFont:v1];

  id v2 = [self secondaryLabelColor];
  id v3 = [v2 colorWithAlphaComponent:0.67];

  [v0 setTextColor:v3];
  [v0 setTextAlignment:1];
  [v0 setHidden:1];
  [v0 setMaximumContentSizeCategory:UIContentSizeCategoryAccessibilityMedium];
  return v0;
}

void one-time initialization function for SELECT_AT_LEAST_ONE_TEXT()
{
  id v0 = [self mainBundle];
  v4._uint64_t countAndFlagsBits = 0xD000000000000049;
  v4._object = (void *)0x80000001001E25B0;
  v1._object = (void *)0x80000001001E2580;
  v1._uint64_t countAndFlagsBits = 0xD00000000000002ELL;
  v2._uint64_t countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  Swift::String v3 = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v4);

  static MOSuggestionSheetInterstitialView.SELECT_AT_LEAST_ONE_TEXT = (__int128)v3;
}

long long *MOSuggestionSheetInterstitialView.SELECT_AT_LEAST_ONE_TEXT.unsafeMutableAddressor()
{
  if (one-time initialization token for SELECT_AT_LEAST_ONE_TEXT != -1) {
    swift_once();
  }
  return &static MOSuggestionSheetInterstitialView.SELECT_AT_LEAST_ONE_TEXT;
}

uint64_t static MOSuggestionSheetInterstitialView.SELECT_AT_LEAST_ONE_TEXT.getter()
{
  if (one-time initialization token for SELECT_AT_LEAST_ONE_TEXT != -1) {
    swift_once();
  }
  uint64_t v0 = static MOSuggestionSheetInterstitialView.SELECT_AT_LEAST_ONE_TEXT;
  swift_bridgeObjectRetain();
  return v0;
}

void *MOSuggestionSheetInterstitialView.EMPTY_TEXT.unsafeMutableAddressor()
{
  return &static MOSuggestionSheetInterstitialView.EMPTY_TEXT;
}

char *MOSuggestionSheetInterstitialView.__allocating_init(controller:cellViewModel:presentationDelegate:selectedSuggestion:indexPath:fromNotification:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  id v17 = objc_allocWithZone(v8);
  id v18 = specialized MOSuggestionSheetInterstitialView.init(controller:cellViewModel:presentationDelegate:selectedSuggestion:indexPath:fromNotification:)(a1, a2, a3, a4, a5, a6, a7, a8);

  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  return v18;
}

char *MOSuggestionSheetInterstitialView.init(controller:cellViewModel:presentationDelegate:selectedSuggestion:indexPath:fromNotification:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  unint64_t v9 = specialized MOSuggestionSheetInterstitialView.init(controller:cellViewModel:presentationDelegate:selectedSuggestion:indexPath:fromNotification:)(a1, a2, a3, a4, a5, a6, a7, a8);

  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  return v9;
}

void MOSuggestionSheetInterstitialView.viewWillTransition(to:with:)(void *a1, double a2, double a3)
{
  BOOL v7 = specialized static MOAngelRootViewController.isLandscape.getter();
  double v8 = *(double *)&static MOAngelRootViewController.LANDSCAPE_WIDTH;
  if (!v7) {
    double v8 = a2;
  }
  [v3 setPreferredContentSize:v8 a3];
  v13.receiver = v3;
  v13.super_class = (Class)type metadata accessor for MOSuggestionSheetInterstitialView();
  [super viewWillTransitionToSize:a1 withTransitionCoordinator:a2 a3];
  uint64_t v9 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v9;
  *(double *)(v10 + 24) = a2;
  *(double *)(v10 + 32) = a3;
  v12[4] = partial apply for closure #1 in MOSuggestionSheetInterstitialView.viewWillTransition(to:with:);
  v12[5] = v10;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  void v12[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
  v12[3] = &block_descriptor_1;
  id v11 = _Block_copy(v12);
  swift_release();
  [a1 animateAlongsideTransition:0 completion:v11];
  _Block_release(v11);
}

void closure #1 in MOSuggestionSheetInterstitialView.viewWillTransition(to:with:)(double a1, double a2)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v5 = (char *)Strong;
    MOSuggestionSheetInterstitialView.updateConstraints()();
    uint64_t v6 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetCarouselView;
    id v7 = *(id *)&v5[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetCarouselView];
    MOSuggestionInterstitialCarouselView.updateLayout()();

    BOOL v8 = specialized static MOAngelRootViewController.isLandscape.getter();
    double v9 = *(double *)&static MOAngelRootViewController.LANDSCAPE_WIDTH;
    if (!v8) {
      double v9 = a1;
    }
    [v5 setPreferredContentSize:v9, a2];
    MOSuggestionSheetInterstitialView.updateConstraints()();
    id v10 = *(id *)&v5[v6];
    MOSuggestionInterstitialCarouselView.updateLayout()();
  }
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ()(uint64_t a1)
{
  Swift::String v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();

  return swift_unknownObjectRelease();
}

id MOSuggestionSheetInterstitialView.updateConstraints()()
{
  uint64_t v1 = v0;
  if (specialized static MOAngelRootViewController.isLandscape.getter())
  {
    if (serverManager._clientConnections != (NSMutableDictionary *)-1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static MOAngelLogger.shared);
    Swift::String v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v3, v4))
    {
      id v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "handling landscape", v5, 2u);
      swift_slowDealloc();
    }

    MOSuggestionSheetInterstitialView.handleLandscapeLayout()();
  }
  else
  {
    if (serverManager._clientConnections != (NSMutableDictionary *)-1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static MOAngelLogger.shared);
    id v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v7, v8))
    {
      double v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)double v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "handling portrait", v9, 2u);
      swift_slowDealloc();
    }

    MOSuggestionSheetInterstitialView.handlePortraitLayout()();
  }
  uint64_t v10 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetCarouselView;
  [*(id *)(v1 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetCarouselView) setNeedsLayout];
  id v11 = *(void **)(v1 + v10);

  return [v11 layoutIfNeeded];
}

void MOSuggestionSheetInterstitialView.handlePortraitLayout()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UIButton.Configuration.Size();
  uint64_t v44 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  os_log_type_t v4 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIButton.Configuration?);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  os_log_type_t v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  id v11 = (char *)&v43 - v10;
  uint64_t v12 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v0) + 0x1C8))(v9);
  if (v12)
  {
    uint64_t v13 = v12;
    id v14 = [v0 navigationItem];
    id v15 = *(id *)(v13 + 16);
    unint64_t v16 = (unint64_t)MOEventBundle._orderedAssetReferences()();
    if (v16)
    {
      uint64_t v17 = v2;
      if (v16 >> 62) {
        uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
      }
      else {
        uint64_t v18 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }

      swift_bridgeObjectRelease();
      if (v18 == 1)
      {
        id v19 = [self mainBundle];
        unint64_t v42 = 0x80000001001E1F60;
        uint64_t v20 = 0x49207463656C6553;
        unint64_t v21 = 0xEB000000006D6574;
LABEL_9:
        v22._uint64_t countAndFlagsBits = 0;
        v22._object = (void *)0xE000000000000000;
        unint64_t v23 = 0xD00000000000002DLL;
        NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v20, (Swift::String_optional)0, (NSBundle)v19, v22, *(Swift::String *)(&v42 - 1));

        NSString v24 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v14 setTitle:v24];
        swift_release();

        uint64_t v2 = v17;
        goto LABEL_10;
      }
    }
    else
    {
      uint64_t v17 = v2;
    }
    id v19 = [self mainBundle];
    unint64_t v42 = 0x80000001001E1F30;
    uint64_t v20 = 0x49207463656C6553;
    unint64_t v21 = 0xEC000000736D6574;
    goto LABEL_9;
  }
LABEL_10:
  id v25 = *(void **)((char *)v1 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_navigationBar);
  [v25 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v26 = [v25 heightAnchor];
  id v27 = [v26 constraintEqualToConstant:50.0];

  [v27 setActive:1];
  id v28 = self;
  type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  swift_bridgeObjectRetain();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v28 deactivateConstraints:isa];

  swift_bridgeObjectRetain();
  Class v30 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v28 activateConstraints:v30];

  uint64_t v31 = *(void **)((char *)v1 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_stackView);
  [v31 setCustomSpacing:*(void *)((char *)v1 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_titleLabel) afterView:10.0];
  uint64_t v32 = *(void **)((char *)v1 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_labelStackView);
  [v31 setCustomSpacing:v32 afterView:20.0];
  [*(id *)((char *)v1+ OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_journalButtonLeadingConstraint) setConstant:20.0];
  Swift::Int v33 = *(void **)((char *)v1
                 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_journalButtonTrailingConstraint);
  if (v33) {
    [v33 setConstant:-20.0];
  }
  [v32 setAxis:1];
  [v32 setAlignment:3];
  id v34 = [v32 setCustomSpacing:*(void *)((char *)v1 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_dateLabel) afterView:0.0];
  uint64_t v35 = (void *)(*(uint64_t (**)(id))((swift_isaMask & *v1) + 0x138))(v34);
  if (v35)
  {
    id v36 = v35;
    if (((*(uint64_t (**)(void))((swift_isaMask & *v35) + 0x1B0))() & 1) != 0
      || ((*(uint64_t (**)(void))((swift_isaMask & *v36) + 0x1C0))() & 1) != 0)
    {
      id v37 = *(void **)((char *)v1
                     + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_journalButtonBottomConstraint);
      if (v37)
      {
        uint64_t v38 = one-time initialization token for BUTTON_BOTTOM_MARGIN_PORTRAIT;
        id v39 = v37;
        if (v38 != -1) {
          swift_once();
        }
        [v39 setConstant:-*(double *)&static MOSuggestionSheetInterstitialViewConstants.BUTTON_BOTTOM_MARGIN_PORTRAIT];
      }
    }
  }
  id v40 = objc_retain(*(id *)((char *)v1
                          + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_journalButton));
  UIButton.configuration.getter();
  uint64_t v41 = type metadata accessor for UIButton.Configuration();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v41 - 8) + 48))(v11, 1, v41))
  {
    outlined init with copy of UIButton.Configuration?((uint64_t)v11, (uint64_t)v8);
    UIButton.configuration.setter();

    outlined destroy of UIButton.Configuration?((uint64_t)v11);
  }
  else
  {
    (*(void (**)(char *, void, uint64_t))(v44 + 104))(v4, enum case for UIButton.Configuration.Size.large(_:), v2);
    UIButton.Configuration.buttonSize.setter();
    UIButton.configuration.setter();
  }
}

void MOSuggestionSheetInterstitialView.handleLandscapeLayout()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UIButton.Configuration.Size();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIButton.Configuration?);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  id v11 = (char *)&v32 - v10;
  id v12 = [v0 navigationItem];
  NSString v13 = String._bridgeToObjectiveC()();
  [v12 setTitle:v13];

  id v14 = *(void **)((char *)v1 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_navigationBar);
  [v14 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v15 = [v14 heightAnchor];
  id v16 = [v15 constraintEqualToConstant:40.0];

  [v16 setActive:1];
  uint64_t v17 = self;
  type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  swift_bridgeObjectRetain();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v17 deactivateConstraints:isa];

  swift_bridgeObjectRetain();
  Class v19 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v17 activateConstraints:v19];

  uint64_t v20 = *(void **)((char *)v1 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_stackView);
  [v20 setCustomSpacing:*(void *)((char *)v1 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_titleLabel) afterView:0.0];
  unint64_t v21 = *(void **)((char *)v1 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_labelStackView);
  [v20 setCustomSpacing:v21 afterView:10.0];
  Swift::String v22 = *(void **)((char *)v1
                 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_journalButtonLeadingConstraint);
  if (v22) {
    [v22 setConstant:200.0];
  }
  unint64_t v23 = *(void **)((char *)v1
                 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_journalButtonTrailingConstraint);
  if (v23) {
    [v23 setConstant:-200.0];
  }
  [v21 setAxis:1];
  [v21 setAlignment:3];
  id v24 = [v21 setCustomSpacing:*(void *)((char *)v1 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_dateLabel) afterView:2.0];
  id v25 = (void *)(*(uint64_t (**)(id))((swift_isaMask & *v1) + 0x138))(v24);
  if (v25)
  {
    id v26 = v25;
    if (((*(uint64_t (**)(void))((swift_isaMask & *v25) + 0x1B0))() & 1) != 0
      || ((*(uint64_t (**)(void))((swift_isaMask & *v26) + 0x1C0))() & 1) != 0)
    {
      id v27 = *(void **)((char *)v1
                     + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_journalButtonBottomConstraint);
      if (v27)
      {
        uint64_t v28 = one-time initialization token for BUTTON_BOTTOM_MARGIN_LANDSCAPE;
        id v29 = v27;
        if (v28 != -1) {
          swift_once();
        }
        [v29 setConstant:-*(double *)&static MOSuggestionSheetInterstitialViewConstants.BUTTON_BOTTOM_MARGIN_LANDSCAPE];
      }
    }
  }
  id v30 = objc_retain(*(id *)((char *)v1
                          + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_journalButton));
  UIButton.configuration.getter();
  uint64_t v31 = type metadata accessor for UIButton.Configuration();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v31 - 8) + 48))(v11, 1, v31))
  {
    outlined init with copy of UIButton.Configuration?((uint64_t)v11, (uint64_t)v9);
    UIButton.configuration.setter();

    outlined destroy of UIButton.Configuration?((uint64_t)v11);
  }
  else
  {
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for UIButton.Configuration.Size.medium(_:), v2);
    UIButton.Configuration.buttonSize.setter();
    UIButton.configuration.setter();
  }
}

Swift::Void __swiftcall MOSuggestionSheetInterstitialView.setupViews()()
{
  uint64_t v1 = v0;
  uint64_t v2 = (*(uint64_t (**)(void))((swift_isaMask & *(void *)v0) + 0x1C8))();
  if (!v2) {
    return;
  }
  uint64_t v3 = (id *)v2;
  uint64_t v4 = (*(uint64_t (**)(void))((swift_isaMask & *(void *)v0) + 0x138))();
  if (v4)
  {
    v281 = (void *)v4;
    uint64_t v5 = *(void **)&v0[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_navigationBar];
    uint64_t v6 = self;
    id v7 = [v6 systemBackgroundColor];
    [v5 setBarTintColor:v7];

    id v8 = [v6 systemBackgroundColor];
    [v5 setBackgroundColor:v8];

    [v5 setTranslucent:0];
    id v9 = [objc_allocWithZone((Class)UIImage) init];
    [v5 setShadowImage:v9];

    [v5 setTranslatesAutoresizingMaskIntoConstraints:0];
    uint64_t v10 = &selRef_collectionView_didSelectItemAtIndexPath_;
    id v11 = [v0 view];
    if (!v11)
    {
      __break(1u);
      goto LABEL_78;
    }
    id v12 = v11;
    id v287 = v5;
    [v11 addSubview:v5];

    id v13 = v3[2];
    unint64_t v14 = (unint64_t)MOEventBundle._orderedAssetReferences()();
    id v279 = v6;
    if (v14)
    {
      if (v14 >> 62) {
        uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
      }
      else {
        uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }

      swift_bridgeObjectRelease();
      if (v15 == 1)
      {
        id v16 = [self mainBundle];
        unint64_t v277 = 0x80000001001E1F60;
        uint64_t v17 = 0x49207463656C6553;
        unint64_t v18 = 0xEB000000006D6574;
        goto LABEL_15;
      }
    }
    else
    {
    }
    id v16 = [self mainBundle];
    unint64_t v277 = 0x80000001001E1F30;
    uint64_t v17 = 0x49207463656C6553;
    unint64_t v18 = 0xEC000000736D6574;
LABEL_15:
    v19._uint64_t countAndFlagsBits = 0;
    v19._object = (void *)0xE000000000000000;
    unint64_t v20 = 0xD00000000000002DLL;
    NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v17, (Swift::String_optional)0, (NSBundle)v16, v19, *(Swift::String *)(&v277 - 1));

    id v21 = [v1 navigationItem];
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v21 setTitle:v22];

    MOSuggestionSheetInterstitialView.setNavBar()();
    unint64_t v23 = *(void **)&v1[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_titleLabel];
    [v23 setUserInteractionEnabled:1];
    id v278 = [objc_allocWithZone((Class)UITapGestureRecognizer) initWithTarget:v1 action:"handleLabelEditTap:"];
    id v24 = [v23 addGestureRecognizer:];
    id v25 = *(void **)&v1[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_dateLabel];
    (*((void (**)(id))*v3 + 56))(v24);
    NSString v26 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v288 = v25;
    [v25 setText:v26];

    id v27 = [v1 view];
    if (v27)
    {
      uint64_t v28 = v27;
      id v29 = *(void **)&v1[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_scrollView];
      id v30 = &selRef_collectionView_didSelectItemAtIndexPath_;
      [v27 addSubview:v29];

      id v31 = [v29 superview];
      if (v31)
      {
        uint64_t v32 = v31;
        [v29 setTranslatesAutoresizingMaskIntoConstraints:0];
        id v33 = [v29 leadingAnchor];
        id v34 = [v32 leadingAnchor];
        id v35 = [v33 constraintEqualToAnchor:v34];

        [v35 setConstant:0.0];
        id v36 = v35;
        uint64_t v10 = &selRef_collectionView_didSelectItemAtIndexPath_;
        id v37 = v36;
        [v36 setActive:1];

        id v30 = &selRef_collectionView_didSelectItemAtIndexPath_;
      }
      id v38 = [v29 superview];
      if (v38)
      {
        id v39 = v38;
        [v29 setTranslatesAutoresizingMaskIntoConstraints:0];
        id v40 = [v29 trailingAnchor];
        id v41 = [v39 trailingAnchor];
        id v42 = [v40 constraintEqualToAnchor:v41];

        [v42 setConstant:0.0];
        id v43 = v42;
        uint64_t v10 = &selRef_collectionView_didSelectItemAtIndexPath_;
        id v44 = v43;
        [v43 setActive:1];

        id v30 = &selRef_collectionView_didSelectItemAtIndexPath_;
      }
      char v45 = *(void **)&v1[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_stackView];
      id v286 = v29;
      [v29 v30[164] v45];
      id v46 = *(void **)&v1[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_labelStackView];
      [v46 addArrangedSubview:v288];
      id v47 = *(void **)&v1[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetTypeLabel];
      [v46 addArrangedSubview:v47];
      [v45 addArrangedSubview:v23];
      [v45 addArrangedSubview:v46];
      uint64_t v48 = v30;
      uint64_t v49 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetListView;
      [v45 addArrangedSubview:*(void *)&v1[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetListView]];
      uint64_t v289 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetCarouselView;
      [v45 addArrangedSubview:*(void *)&v1[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetCarouselView]];
      uint64_t v285 = v49;
      [*(id *)&v1[v49] setHidden:1];
      id v50 = [v1 v10[219]];
      if (v50)
      {
        id v51 = v50;
        uint64_t v52 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_journalButton;
        [v50 v48[164] *(void *)&v1[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_journalButton]];

        id v53 = [v1 v10[219]];
        if (v53)
        {
          uint64_t v54 = v53;
          uint64_t v283 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_quickAddButton;
          [v53 v48[164]:v1[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_quickAddButton]];

          id v55 = [v1 v10[219]];
          if (v55)
          {
            char v56 = v55;
            id v282 = *(id *)&v1[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_emptySelectionLabel];
            [v55 v48[164]];

            id v57 = [v23 superview];
            uint64_t v284 = v52;
            if (v57)
            {
              char v58 = v57;
              [v23 setTranslatesAutoresizingMaskIntoConstraints:0];
              id v59 = [v23 leadingAnchor];
              id v60 = [v58 leadingAnchor];
              id v61 = [v59 constraintEqualToAnchor:v60];

              uint64_t v10 = &selRef_collectionView_didSelectItemAtIndexPath_;
              uint64_t v52 = v284;
              [v61 setConstant:24.0];
              id v62 = v61;
              [v62 setActive:1];
            }
            id v63 = [v23 superview];
            if (v63)
            {
              uint64_t v64 = v63;
              [v23 setTranslatesAutoresizingMaskIntoConstraints:0];
              id v65 = [v23 trailingAnchor];
              id v66 = [v64 trailingAnchor];
              id v67 = [v65 constraintEqualToAnchor:v66];

              [v67 setConstant:-16.0];
              id v68 = v67;
              uint64_t v10 = &selRef_collectionView_didSelectItemAtIndexPath_;
              id v69 = v68;
              [v68 setActive:1];
            }
            id v70 = [*(id *)&v1[v52] leadingAnchor];
            id v71 = [v1 v10[219]];
            if (v71)
            {
              id v72 = v71;
              uint64_t v73 = v10;
              id v280 = v46;
              id v74 = [v71 leadingAnchor];

              id v75 = [v70 constraintEqualToAnchor:v74 constant:20.0];
              uint64_t v76 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_journalButtonLeadingConstraint;
              uint64_t v77 = *(void **)&v1[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_journalButtonLeadingConstraint];
              *(void *)&v1[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_journalButtonLeadingConstraint] = v75;

              id v78 = [*(id *)&v1[v52] trailingAnchor];
              id v79 = [v1 v73[219]];
              if (v79)
              {
                id v80 = v79;
                id v81 = [v79 trailingAnchor];

                id v82 = [v78 constraintEqualToAnchor:v81 constant:-20.0];
                uint64_t v83 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_journalButtonTrailingConstraint;
                id v84 = *(void **)&v1[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_journalButtonTrailingConstraint];
                *(void *)&v1[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_journalButtonTrailingConstraint] = v82;

                [*(id *)&v1[v76] setActive:1];
                [*(id *)&v1[v83] setActive:1];
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
                uint64_t v85 = swift_allocObject();
                *(_OWORD *)(v85 + 16) = xmmword_1001DA520;
                id v86 = [*(id *)&v1[v289] heightAnchor];
                id v87 = [*(id *)&v1[v289] widthAnchor];
                id v88 = [v86 constraintEqualToAnchor:v87];

                *(void *)(v85 + 32) = v88;
                id v89 = [*(id *)&v1[v285] leadingAnchor];
                id v90 = [v45 leadingAnchor];
                id v91 = [v89 constraintEqualToAnchor:v90 constant:20.0];

                *(void *)(v85 + 40) = v91;
                id v92 = [*(id *)&v1[v285] trailingAnchor];
                id v93 = [v45 trailingAnchor];
                id v94 = [v92 constraintEqualToAnchor:v93 constant:-20.0];

                *(void *)(v85 + 48) = v94;
                id v95 = [v286 topAnchor];
                id v96 = [v287 bottomAnchor];
                id v97 = [v95 constraintEqualToAnchor:v96 constant:20.0];

                *(void *)(v85 + 56) = v97;
                id v98 = [v45 topAnchor];
                id v99 = [v286 topAnchor];
                id v100 = [v98 constraintEqualToAnchor:v99 constant:8.0];

                *(void *)(v85 + 64) = v100;
                id v101 = [v288 topAnchor];
                id v102 = [v46 topAnchor];
                id v103 = [v101 constraintEqualToAnchor:v102];

                *(void *)(v85 + 72) = v103;
                id v104 = [v288 bottomAnchor];
                id v105 = [v47 topAnchor];
                id v106 = [v104 constraintEqualToAnchor:v105 constant:-10.0];

                *(void *)(v85 + 80) = v106;
                id v107 = [v47 bottomAnchor];
                id v108 = [v46 bottomAnchor];
                id v109 = [v107 constraintEqualToAnchor:v108];

                *(void *)(v85 + 88) = v109;
                specialized Array._endMutation()();
                *(void *)&v1[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_portraitConstraints] = v85;
                swift_bridgeObjectRelease();
                uint64_t v110 = swift_allocObject();
                *(_OWORD *)(v110 + 16) = xmmword_1001DA530;
                id v111 = [*(id *)&v1[v289] heightAnchor];
                id v112 = [v1 view];
                if (v112)
                {
                  id v113 = v112;
                  id v114 = [v112 heightAnchor];

                  id v115 = [v111 constraintEqualToAnchor:v114 multiplier:0.5];
                  *(void *)(v110 + 32) = v115;
                  id v116 = [*(id *)&v1[v285] leadingAnchor];
                  id v117 = [v45 leadingAnchor];
                  id v118 = [v116 constraintEqualToAnchor:v117 constant:104.0];

                  *(void *)(v110 + 40) = v118;
                  id v119 = [*(id *)&v1[v285] trailingAnchor];
                  id v120 = [v45 trailingAnchor];
                  id v121 = [v119 constraintEqualToAnchor:v120 constant:-104.0];

                  *(void *)(v110 + 48) = v121;
                  id v122 = [v286 topAnchor];
                  id v123 = [v287 bottomAnchor];
                  id v124 = [v122 constraintEqualToAnchor:v123];

                  *(void *)(v110 + 56) = v124;
                  id v125 = [v45 topAnchor];
                  id v126 = [v286 topAnchor];
                  id v127 = [v125 constraintEqualToAnchor:v126];

                  *(void *)(v110 + 64) = v127;
                  id v128 = [v288 leadingAnchor];
                  id v129 = [v46 leadingAnchor];
                  id v130 = [v128 constraintEqualToAnchor:v129];

                  *(void *)(v110 + 72) = v130;
                  id v131 = [v288 trailingAnchor];
                  id v132 = [v46 trailingAnchor];
                  id v133 = [v131 constraintEqualToAnchor:v132];

                  *(void *)(v110 + 80) = v133;
                  id v134 = [v47 leadingAnchor];
                  id v135 = [v46 leadingAnchor];
                  id v136 = [v134 constraintEqualToAnchor:v135];

                  *(void *)(v110 + 88) = v136;
                  id v137 = [v46 leadingAnchor];
                  id v138 = [v45 leadingAnchor];
                  id v139 = [v137 constraintGreaterThanOrEqualToAnchor:v138];

                  *(void *)(v110 + 96) = v139;
                  id v140 = [v46 trailingAnchor];
                  id v141 = [v45 trailingAnchor];
                  id v142 = [v140 constraintLessThanOrEqualToAnchor:v141];

                  *(void *)(v110 + 104) = v142;
                  id v143 = [v288 leadingAnchor];
                  id v144 = [v46 leadingAnchor];
                  id v145 = [v143 constraintGreaterThanOrEqualToAnchor:v144];

                  *(void *)(v110 + 112) = v145;
                  id v146 = [v47 trailingAnchor];
                  id v147 = [v280 trailingAnchor];
                  id v148 = [v146 constraintLessThanOrEqualToAnchor:v147];

                  *(void *)(v110 + 120) = v148;
                  id v149 = [v280 centerXAnchor];
                  id v150 = [v45 centerXAnchor];
                  id v151 = [v149 constraintEqualToAnchor:v150];

                  *(void *)(v110 + 128) = v151;
                  specialized Array._endMutation()();
                  *(void *)&v1[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_landscapeConstraints] = v110;
                  swift_bridgeObjectRelease();
                  id v152 = *(id *)&v1[v289];
                  id v153 = [v152 superview];
                  if (v153)
                  {
                    uint64_t v154 = v153;
                    [v152 setTranslatesAutoresizingMaskIntoConstraints:0];
                    id v155 = [v152 leadingAnchor];
                    id v156 = [v154 leadingAnchor];
                    id v157 = [v155 constraintEqualToAnchor:v156];

                    v158 = &selRef_collectionView_didSelectItemAtIndexPath_;
                    [v157 setConstant:0.0];
                    if (v157)
                    {
                      id v157 = v157;
                      [v157 setActive:1];

                      id v152 = v157;
                    }
                    uint64_t v159 = v282;
                  }
                  else
                  {
                    id v157 = 0;
                    uint64_t v154 = v152;
                    uint64_t v159 = v282;
                    v158 = &selRef_collectionView_didSelectItemAtIndexPath_;
                  }

                  id v160 = *(id *)&v1[v289];
                  id v161 = [v160 superview];
                  if (v161)
                  {
                    unint64_t v162 = v161;
                    [v160 setTranslatesAutoresizingMaskIntoConstraints:0];
                    id v163 = [v160 trailingAnchor];
                    id v164 = [v162 trailingAnchor];
                    id v165 = [v163 constraintEqualToAnchor:v164];

                    [v165 setConstant:0.0];
                    if (v165)
                    {
                      id v165 = v165;
                      [v165 setActive:1];

                      id v160 = v165;
                    }
                    uint64_t v159 = v282;
                  }
                  else
                  {
                    id v165 = 0;
                    unint64_t v162 = v160;
                  }

                  id v166 = [v159 superview];
                  if (v166)
                  {
                    unint64_t v167 = v166;
                    [v159 setTranslatesAutoresizingMaskIntoConstraints:0];
                    id v168 = [v159 leadingAnchor];
                    id v169 = [v167 leadingAnchor];
                    id v170 = [v168 constraintEqualToAnchor:v169];

                    [v170 setConstant:20.0];
                    id v171 = v170;
                    [v171 setActive:1];
                  }
                  id v172 = [v159 superview];
                  if (v172)
                  {
                    Swift::String v173 = v172;
                    [v159 setTranslatesAutoresizingMaskIntoConstraints:0];
                    id v174 = [v159 trailingAnchor];
                    id v175 = [v173 trailingAnchor];
                    id v176 = [v174 constraintEqualToAnchor:v175];

                    [v176 setConstant:-20.0];
                    id v177 = v176;
                    [v177 setActive:1];
                  }
                  p_vtable = (void **)(&OBJC_METACLASS____TtC16MomentsUIService29MOSuggestionSheetOverflowView + 24);
                  if (((*(uint64_t (**)(void))((swift_isaMask & *v281) + 0x1B0))() & 1) != 0
                    || ((*(uint64_t (**)(void))((swift_isaMask & *v281) + 0x1C0))() & 1) != 0)
                  {
                    id v179 = *(id *)&v1[v283];
                    [v179 setTranslatesAutoresizingMaskIntoConstraints:0];
                    id v180 = [v179 heightAnchor];
                    id v181 = [v180 constraintEqualToConstant:0.0];

                    v182 = &selRef_collectionView_didSelectItemAtIndexPath_;
                    [v181 setActive:1];

                    [*(id *)&v1[v283] setHidden:1];
                    id v183 = [*(id *)&v1[v284] bottomAnchor];
                    id v184 = [v1 view];
                    if (!v184)
                    {
LABEL_89:
                      __break(1u);
                      return;
                    }
                    v185 = v184;
                    id v186 = [v184 safeAreaLayoutGuide];

                    id v187 = [v186 bottomAnchor];
                    id v188 = [v183 constraintEqualToAnchor:v187 constant:-4.0];
                  }
                  else
                  {
                    v189 = *(void **)&v1[v284];
                    id v190 = *(id *)&v1[v283];
                    id v191 = v189;
                    [v190 setTranslatesAutoresizingMaskIntoConstraints:0];
                    id v192 = [v190 leadingAnchor];
                    id v193 = [v191 leadingAnchor];
                    id v194 = [v192 constraintEqualToAnchor:v193 constant:0.0];

                    [v194 setActive:1];
                    v195 = *(void **)&v1[v284];
                    id v196 = *(id *)&v1[v283];
                    id v197 = v195;
                    [v196 setTranslatesAutoresizingMaskIntoConstraints:0];
                    id v198 = [v196 trailingAnchor];
                    id v199 = [v197 trailingAnchor];
                    id v200 = [v198 constraintEqualToAnchor:v199 constant:0.0];

                    [v200 setActive:1];
                    id v201 = *(id *)&v1[v283];
                    id v202 = [v201 superview];
                    if (v202)
                    {
                      v203 = v202;
                      [v201 setTranslatesAutoresizingMaskIntoConstraints:0];
                      id v204 = [v201 centerXAnchor];
                      id v205 = [v203 centerXAnchor];
                      id v206 = [v204 constraintEqualToAnchor:v205];

                      v158 = &selRef_collectionView_didSelectItemAtIndexPath_;
                      [v206 setConstant:0.0];
                      if (v206)
                      {
                        id v206 = v206;
                        v182 = &selRef_collectionView_didSelectItemAtIndexPath_;
                        [v206 setActive:1];

                        id v201 = v206;
                      }
                      else
                      {
                        v182 = &selRef_collectionView_didSelectItemAtIndexPath_;
                      }
                      v207 = &selRef_collectionView_didSelectItemAtIndexPath_;
                      v208 = &selRef_collectionView_didSelectItemAtIndexPath_;
                    }
                    else
                    {
                      id v206 = 0;
                      v203 = v201;
                      v182 = &selRef_collectionView_didSelectItemAtIndexPath_;
                      v158 = &selRef_collectionView_didSelectItemAtIndexPath_;
                      v207 = &selRef_collectionView_didSelectItemAtIndexPath_;
                      v208 = &selRef_collectionView_didSelectItemAtIndexPath_;
                    }

                    id v209 = *(id *)&v1[v283];
                    id v210 = [v209 superview];
                    if (v210)
                    {
                      v211 = v210;
                      [v209 setTranslatesAutoresizingMaskIntoConstraints:0];
                      id v212 = [v209 v208[145]];
                      id v213 = [v211 v208[145]];
                      id v214 = [v212 constraintEqualToAnchor:v213];

                      if (v214)
                      {
                        [v214 v158[148]:-34.0];
                        id v214 = v214;
                        v182 = &selRef_collectionView_didSelectItemAtIndexPath_;
                        [v214 setActive:1];

                        id v209 = v214;
                      }
                      else
                      {
                        v182 = &selRef_collectionView_didSelectItemAtIndexPath_;
                      }
                      v207 = &selRef_collectionView_didSelectItemAtIndexPath_;
                    }
                    else
                    {
                      id v214 = 0;
                      v211 = v209;
                    }

                    id v215 = [*(id *)&v1[v284] v208[145]];
                    id v216 = [*(id *)&v1[v283] v207[144]];
                    id v188 = [v215 constraintEqualToAnchor:v216 constant:-5.0];

                    p_vtable = &OBJC_METACLASS____TtC16MomentsUIService29MOSuggestionSheetOverflowView.vtable;
                  }
                  v217 = (char *)p_vtable[20];
                  v218 = *(void **)&v217[(void)v1];
                  *(void *)&v217[(void)v1] = v188;

                  [*(id *)((char *)p_vtable[20] + (void)v1) v182[139]:1];
                  id v219 = [v45 superview];
                  if (v219)
                  {
                    v220 = v219;
                    [v45 setTranslatesAutoresizingMaskIntoConstraints:0];
                    id v221 = [v45 leadingAnchor];
                    id v222 = [v220 leadingAnchor];
                    id v223 = [v221 constraintEqualToAnchor:v222];

                    [v223 v158[148] 0.0];
                    id v224 = v223;
                    [v224 v182[139]:1];
                  }
                  id v225 = [v45 superview];
                  if (v225)
                  {
                    v226 = v225;
                    [v45 setTranslatesAutoresizingMaskIntoConstraints:0];
                    id v227 = [v45 trailingAnchor];
                    id v228 = [v226 trailingAnchor];
                    id v229 = [v227 constraintEqualToAnchor:v228];

                    [v229 setConstant:0.0];
                    id v230 = v229;
                    [v230 setActive:1];
                  }
                  id v231 = [v45 superview];
                  if (v231)
                  {
                    v232 = v231;
                    [v45 setTranslatesAutoresizingMaskIntoConstraints:0];
                    id v233 = [v45 bottomAnchor];
                    id v234 = [v232 bottomAnchor];
                    id v235 = [v233 constraintEqualToAnchor:v234];

                    if (v235)
                    {
                      [v235 setConstant:-0.0];
                      id v236 = v235;
                      [v236 setActive:1];
                    }
                  }
                  uint64_t v237 = swift_allocObject();
                  *(_OWORD *)(v237 + 16) = xmmword_1001DA540;
                  id v238 = [v287 leadingAnchor];
                  id v239 = [v1 view];
                  if (v239)
                  {
                    v240 = v239;
                    id v241 = [v239 leadingAnchor];

                    id v242 = [v238 constraintEqualToAnchor:v241];
                    *(void *)(v237 + 32) = v242;
                    id v243 = [v287 trailingAnchor];
                    id v244 = [v1 view];
                    if (v244)
                    {
                      v245 = v244;
                      id v246 = [v244 trailingAnchor];

                      id v247 = [v243 constraintEqualToAnchor:v246];
                      *(void *)(v237 + 40) = v247;
                      id v248 = [v287 topAnchor];
                      id v249 = [v1 view];
                      if (v249)
                      {
                        v250 = v249;
                        v290 = self;
                        id v251 = [v250 topAnchor];

                        id v252 = [v248 constraintEqualToAnchor:v251];
                        *(void *)(v237 + 48) = v252;
                        id v253 = [*(id *)&v1[v284] centerXAnchor];
                        id v254 = [v286 centerXAnchor];
                        id v255 = [v253 constraintEqualToAnchor:v254];

                        *(void *)(v237 + 56) = v255;
                        id v256 = [v45 widthAnchor];
                        id v257 = [v286 widthAnchor];
                        id v258 = [v256 constraintEqualToAnchor:v257];

                        *(void *)(v237 + 64) = v258;
                        id v259 = [v286 bottomAnchor];
                        id v260 = [v282 topAnchor];
                        id v261 = [v259 constraintEqualToAnchor:v260];

                        *(void *)(v237 + 72) = v261;
                        id v262 = [*(id *)&v1[v285] bottomAnchor];
                        id v263 = [v282 topAnchor];
                        id v264 = [v262 constraintEqualToAnchor:v263];

                        *(void *)(v237 + 80) = v264;
                        id v265 = [*(id *)&v1[v284] topAnchor];
                        id v266 = [v282 bottomAnchor];
                        id v267 = [v265 constraintEqualToAnchor:v266];

                        *(void *)(v237 + 88) = v267;
                        id v268 = [v282 centerXAnchor];
                        id v269 = [*(id *)&v1[v284] centerXAnchor];
                        id v270 = [v268 constraintEqualToAnchor:v269];

                        *(void *)(v237 + 96) = v270;
                        id v271 = [v282 bottomAnchor];
                        id v272 = [*(id *)&v1[v284] topAnchor];
                        id v273 = [v271 constraintEqualToAnchor:v272 constant:-10.0];

                        *(void *)(v237 + 104) = v273;
                        specialized Array._endMutation()();
                        type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
                        Class isa = Array._bridgeToObjectiveC()().super.isa;
                        swift_bridgeObjectRelease();
                        [v290 activateConstraints:isa];

                        [*(id *)&v1[v284] addTarget:v1 action:"journalButtonTapped:" forControlEvents:64];
                        [*(id *)&v1[v283] addTarget:v1 action:"addButtonTapped" forControlEvents:64];
                        id v275 = [v1 view];
                        if (v275)
                        {
                          v276 = v275;
                          id v291 = [v279 systemBackgroundColor];
                          [v276 setBackgroundColor:v291];
                          swift_release();

                          return;
                        }
                        goto LABEL_88;
                      }
LABEL_87:
                      __break(1u);
LABEL_88:
                      __break(1u);
                      goto LABEL_89;
                    }
LABEL_86:
                    __break(1u);
                    goto LABEL_87;
                  }
LABEL_85:
                  __break(1u);
                  goto LABEL_86;
                }
LABEL_84:
                __break(1u);
                goto LABEL_85;
              }
LABEL_83:
              __break(1u);
              goto LABEL_84;
            }
LABEL_82:
            __break(1u);
            goto LABEL_83;
          }
LABEL_81:
          __break(1u);
          goto LABEL_82;
        }
LABEL_80:
        __break(1u);
        goto LABEL_81;
      }
LABEL_79:
      __break(1u);
      goto LABEL_80;
    }
LABEL_78:
    __break(1u);
    goto LABEL_79;
  }

  swift_release();
}

Swift::Void __swiftcall MOSuggestionSheetInterstitialView.preFetch()()
{
  MOSuggestionSheetInterstitialView.fetchAssetsForCarousel()();

  MOSuggestionSheetInterstitialView.didUpdateSelection()();
}

Swift::Void __swiftcall MOSuggestionSheetInterstitialView.didUpdateSelection()()
{
  uint64_t v1 = v0;
  if (*((unsigned char *)v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_currentViewMode))
  {
    uint64_t v2 = *(void **)((char *)v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetListView);
    uint64_t v3 = *(uint64_t (**)(void))((swift_isaMask & *v2) + 0xD0);
  }
  else
  {
    uint64_t v2 = *(void **)((char *)v0
                    + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetCarouselView);
    uint64_t v3 = *(uint64_t (**)(void))((swift_isaMask & *v2) + 0x110);
  }
  uint64_t v4 = v2;
  uint64_t v5 = v3();

  specialized Set._Variant.remove(_:)(0x6C6F686563616C70, 0xEB00000000726564);
  swift_bridgeObjectRelease();
  specialized Set._Variant.remove(_:)(0, 0xE000000000000000);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(v5 + 16);
  swift_bridgeObjectRelease();
  id v7 = *(void **)((char *)v1 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_journalButton);
  if (v6)
  {
    [v7 setEnabled:1];
    [*(id *)((char *)v1 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_quickAddButton) setEnabled:1];
    id v8 = *(void **)((char *)v1
                  + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_emptySelectionLabel);
    [v8 setHidden:1];
  }
  else
  {
    [v7 setEnabled:0];
    [*(id *)((char *)v1 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_quickAddButton) setEnabled:0];
    id v8 = *(void **)((char *)v1
                  + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_emptySelectionLabel);
    [v8 setHidden:0];
    if (one-time initialization token for SELECT_AT_LEAST_ONE_TEXT != -1) {
      swift_once();
    }
  }
  NSString v9 = String._bridgeToObjectiveC()();
  [v8 setText:v9];

  uint64_t v10 = *(void (**)(void))((swift_isaMask & *v1) + 0x330);

  v10();
}

Swift::Void __swiftcall MOSuggestionSheetInterstitialView.viewDidAppear(_:)(Swift::Bool a1)
{
}

void MOSuggestionSheetInterstitialView.setNavBar()()
{
  uint64_t v1 = v0;
  uint64_t v2 = (*(uint64_t (**)(void))((swift_isaMask & *(void *)v0) + 0x138))();
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    NSString v4 = String._bridgeToObjectiveC()();
    id v5 = [self systemImageNamed:v4];

    id v6 = [objc_allocWithZone((Class)UIBarButtonItem) initWithImage:v5 style:2 target:0 action:"didToggleListCarouselViewButtonWithCarouselIndex:"];
    uint64_t v7 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_toggleListViewCarouselButton;
    id v8 = *(void **)&v1[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_toggleListViewCarouselButton];
    *(void *)&v1[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_toggleListViewCarouselButton] = v6;

    char v9 = (*(uint64_t (**)(void))((swift_isaMask & *v3) + 0x1B0))();
    uint64_t v10 = self;
    id v11 = &selRef_systemBlueColor;
    if ((v9 & 1) == 0) {
      id v11 = &selRef_systemIndigoColor;
    }
    id v12 = [v10 *v11];
    id v13 = *(void **)&v1[v7];
    if (v13)
    {
      [v13 setTintColor:v12];
      unint64_t v14 = *(void **)&v1[v7];
      if (v14)
      {
        id v15 = v14;
        MOSuggestionSheetInterstitialView.toggleListViewCarouselModeAccessibilityLabel.getter();
        NSString v16 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v15 setAccessibilityLabel:v16];

        uint64_t v17 = *(void **)&v1[v7];
        if (v17)
        {
          id v18 = v17;
          id v19 = [v1 navigationItem];
          [v19 setRightBarButtonItem:v18];
        }
      }
    }
    unint64_t v20 = *(void **)&v1[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_navigationBar];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_1001DA250;
    *(void *)(v21 + 32) = [v1 navigationItem];
    specialized Array._endMutation()();
    type metadata accessor for UIApplication(0, &lazy cache variable for type metadata for UINavigationItem);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v20 setItems:isa animated:0];

    id v23 = [objc_allocWithZone((Class)UIBarButtonItem) initWithBarButtonSystemItem:1 target:0 action:"cancelSheet"];
    [v23 setTintColor:v12];
    id v24 = [v1 navigationItem];
    [v24 setLeftBarButtonItem:v23];
  }
}

Swift::Void __swiftcall MOSuggestionSheetInterstitialView.updateAssetTypes()()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)aBlock - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  id v8 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v9 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = partial apply for closure #1 in MOSuggestionSheetInterstitialView.updateAssetTypes();
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_7;
  uint64_t v10 = _Block_copy(aBlock);
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v10);

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void closure #1 in MOSuggestionSheetInterstitialView.updateAssetTypes()()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    uint64_t v2 = self;
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    aBlock[4] = partial apply for closure #1 in closure #1 in MOSuggestionSheetInterstitialView.updateAssetTypes();
    aBlock[5] = v3;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_93;
    uint64_t v4 = _Block_copy(aBlock);
    id v5 = v1;
    swift_release();
    [v2 animateWithDuration:v4 animations:1.0];
    _Block_release(v4);
  }
}

void closure #1 in closure #1 in MOSuggestionSheetInterstitialView.updateAssetTypes()(uint64_t a1)
{
  uint64_t v2 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_currentViewMode;
  if (*(unsigned char *)(a1 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_currentViewMode) == 1)
  {
    uint64_t v3 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetListView;
    id v4 = *(id *)(a1 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetListView);
    uint64_t v5 = MOSuggestionInterstitialExpandableListView.assetTypeSummary.getter();
    unint64_t v7 = v6;

    swift_bridgeObjectRelease();
    uint64_t v8 = HIBYTE(v7) & 0xF;
    if ((v7 & 0x2000000000000000) == 0) {
      uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
    }
    if (v8)
    {
      id v9 = *(id *)(a1 + v3);
      MOSuggestionInterstitialExpandableListView.assetTypeSummary.getter();
LABEL_11:

      goto LABEL_12;
    }
    if (*(unsigned char *)(a1 + v2)) {
      goto LABEL_12;
    }
  }
  uint64_t v10 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetCarouselView;
  id v11 = *(id *)(a1 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetCarouselView);
  uint64_t v12 = MOSuggestionInterstitialCarouselView.assetTypeSummary.getter();
  unint64_t v14 = v13;

  swift_bridgeObjectRelease();
  uint64_t v15 = HIBYTE(v14) & 0xF;
  if ((v14 & 0x2000000000000000) == 0) {
    uint64_t v15 = v12 & 0xFFFFFFFFFFFFLL;
  }
  if (v15)
  {
    id v9 = *(id *)(a1 + v10);
    MOSuggestionInterstitialCarouselView.assetTypeSummary.getter();
    goto LABEL_11;
  }
LABEL_12:
  NSString v16 = *(void **)(a1 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetTypeLabel);
  id v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v16 setText:v17];
}

Swift::Void __swiftcall MOSuggestionSheetInterstitialView.viewDidLoad()()
{
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for MOSuggestionSheetInterstitialView();
  [super viewDidLoad];
  id v1 = [v0 view];
  if (v1)
  {
    uint64_t v2 = v1;
    id v3 = [self systemBackgroundColor];
    [v2 setBackgroundColor:v3];
  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall MOSuggestionSheetInterstitialView.viewDidDisappear(_:)(Swift::Bool a1)
{
  uint64_t v2 = v1;
  v34.receiver = v2;
  v34.super_class = (Class)type metadata accessor for MOSuggestionSheetInterstitialView();
  [super viewDidDisappear:a1];
  uint64_t v4 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetCarouselView;
  uint64_t v5 = *(void **)&v2[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetCarouselView];
  unint64_t v6 = *(uint64_t (**)(unsigned char *))((swift_isaMask & *v5) + 0xF0);
  unint64_t v7 = v5;
  uint64_t v8 = (void (*)(unsigned char *, void))v6(v33);
  void *v9 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  v8(v33, 0);

  uint64_t v10 = *(void **)&v2[v4];
  id v11 = *(void (**)(void))((swift_isaMask & *v10) + 0xD0);
  uint64_t v12 = v10;
  v11(0);

  unint64_t v13 = *(void **)&v2[v4];
  unint64_t v14 = *(void (**)(void))((swift_isaMask & *v13) + 0xB8);
  uint64_t v15 = v13;
  v14(0);

  uint64_t v16 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetListView;
  id v17 = *(void **)&v2[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetListView];
  id v18 = *(uint64_t (**)(unsigned char *))((swift_isaMask & *v17) + 0xC8);
  id v19 = v17;
  unint64_t v20 = (void (*)(unsigned char *, void))v18(v33);
  *uint64_t v21 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  v20(v33, 0);

  NSString v22 = *(void **)&v2[v16];
  id v23 = *(void (**)(void))((swift_isaMask & *v22) + 0x90);
  id v24 = v22;
  v23(0);

  id v25 = [v2 view];
  if (!v25) {
    goto LABEL_15;
  }
  NSString v26 = v25;
  id v27 = [v25 subviews];
  type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  unint64_t v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v28 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v29) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v29 = *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v29)
    {
LABEL_4:
      if (v29 >= 1)
      {
        for (uint64_t i = 0; i != v29; ++i)
        {
          if ((v28 & 0xC000000000000001) != 0) {
            id v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v31 = *(id *)(v28 + 8 * i + 32);
          }
          uint64_t v32 = v31;
          [v31 removeFromSuperview];
        }
        goto LABEL_11;
      }
      __break(1u);
LABEL_15:
      __break(1u);
      return;
    }
  }
LABEL_11:

  swift_bridgeObjectRelease();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  (*(void (**)(void))(*(void *)static MOSuggestionAssetCacheManager.shared + 296))();
}

Swift::Void __swiftcall MOSuggestionSheetInterstitialView.viewWillDisappear(_:)(Swift::Bool a1)
{
}

id MOSuggestionSheetInterstitialView.viewDidAppear(_:)(char a1, SEL *a2)
{
  v6.receiver = v2;
  v6.super_class = (Class)type metadata accessor for MOSuggestionSheetInterstitialView();
  return [super &1];
}

id @objc MOSuggestionSheetInterstitialView.viewDidAppear(_:)(void *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  v7.receiver = a1;
  v7.super_class = (Class)type metadata accessor for MOSuggestionSheetInterstitialView();
  return [super a3];
}

Swift::Void __swiftcall MOSuggestionSheetInterstitialView.cancelSheet()()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  (*(void (**)(void))(*(void *)static MOSuggestionAssetCacheManager.shared + 288))();

  [v0 dismissViewControllerAnimated:1 completion:0];
}

Swift::Void __swiftcall MOSuggestionSheetInterstitialView.addButtonTapped()()
{
  id v1 = v0;
  uint64_t v2 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x1C8))();
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x138))();
    if (v4)
    {
      id v15 = (id)v4;
      uint64_t v5 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x390))();
      char v6 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v0) + 0x3A0))(v5);
      (*(void (**)(uint64_t, uint64_t))((char *)v0
                                               + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_selectedSuggestion))((uint64_t)v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_indexPath, 1);
      uint64_t v7 = IndexPath.row.getter();
      uint64_t v8 = *(void *)((char *)v1
                     + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_modifiedTitleString);
      uint64_t v9 = *(void *)((char *)v1
                     + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_modifiedTitleString
                     + 8);
      uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, void, id))(*(void *)v3 + 552);
      swift_bridgeObjectRetain();
      v10(v7, v8, v9, v6 & 1, v15);
      swift_bridgeObjectRelease();
      uint64_t v11 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v1) + 0x3A8))(5);
      if ((*(uint64_t (**)(uint64_t))((swift_isaMask & *v1) + 0x150))(v11))
      {
        uint64_t v13 = v12;
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t))(v13 + 16))(ObjectType, v13);
        swift_unknownObjectRelease();
      }
      [v1 dismissViewControllerAnimated:1 completion:0];
      swift_release();
    }
    else
    {
      swift_release();
    }
  }
}

void MOSuggestionSheetInterstitialView.updateTitleLabelString()()
{
  id v1 = v0;
  uint64_t v2 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x138))();
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    id v4 = objc_allocWithZone((Class)NSMutableAttributedString);
    swift_bridgeObjectRetain();
    NSString v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v6 = [v4 initWithString:v5];

    NSString v7 = String._bridgeToObjectiveC()();
    id v8 = [self systemImageNamed:v7];

    if (v8)
    {
      char v9 = (*(uint64_t (**)(void))((swift_isaMask & *v3) + 0x1B0))();
      uint64_t v10 = self;
      uint64_t v11 = &selRef_systemBlueColor;
      if ((v9 & 1) == 0) {
        uint64_t v11 = &selRef_systemIndigoColor;
      }
      id v12 = [v10 *v11];
      id v13 = [v8 imageWithTintColor:v12];

      unint64_t v14 = self;
      id v15 = [v14 preferredFontForTextStyle:UIFontTextStyleHeadline];
      id v16 = [v15 fontDescriptor];
      id v17 = [v16 fontDescriptorWithSymbolicTraits:2];

      if (!v17)
      {
        __break(1u);
        return;
      }
      id v18 = [v14 fontWithDescriptor:v17 size:0.0];

      id v19 = [self configurationWithFont:v18];
      id v8 = [v13 imageWithSymbolConfiguration:v19];
    }
    id v20 = [objc_allocWithZone((Class)NSTextAttachment) init];
    [v20 setImage:v8];
    id v25 = [self attributedStringWithAttachment:v20];
    id v21 = objc_allocWithZone((Class)NSAttributedString);
    NSString v22 = String._bridgeToObjectiveC()();
    id v23 = [v21 initWithString:v22];

    [v6 appendAttributedString:v23];
    [v6 appendAttributedString:v25];
    id v24 = *(void **)((char *)v1 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_titleLabel);
    [v24 setAttributedText:v6];
    [v24 setTranslatesAutoresizingMaskIntoConstraints:0];
    [v24 setAdjustsFontForContentSizeCategory:1];
  }
}

void closure #1 in MOSuggestionSheetInterstitialView.handleLabelEditTap(_:)(uint64_t a1, void *a2)
{
  uint64_t v2 = (*(uint64_t (**)(void))((swift_isaMask & *a2) + 0x60))();
  uint64_t v4 = v3;
  NSString v5 = String._bridgeToObjectiveC()();
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  NSString v7 = (void *)Strong;
  if (Strong)
  {
    uint64_t v9 = *(void *)(Strong + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_titleString);
    uint64_t v8 = *(void *)(Strong + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_titleString + 8);
    swift_bridgeObjectRetain();

    if (v8)
    {
      v17[0] = v9;
      v17[1] = v8;
      NSString v7 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
      outlined destroy of String((uint64_t)v17);
    }
    else
    {
      NSString v7 = 0;
    }
  }
  unsigned __int8 v10 = [v5 isEqual:v7];

  swift_unknownObjectRelease();
  if (v10) {
    goto LABEL_10;
  }
  swift_beginAccess();
  uint64_t v11 = swift_unknownObjectWeakLoadStrong();
  if (v11)
  {
    id v12 = (void *)v11;
    id v13 = (uint64_t *)(v11 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_modifiedTitleString);
    uint64_t *v13 = v2;
    v13[1] = v4;
    swift_bridgeObjectRetain();

    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  uint64_t v14 = swift_unknownObjectWeakLoadStrong();
  if (!v14)
  {
LABEL_10:
    swift_bridgeObjectRelease();
  }
  else
  {
    id v15 = (void *)v14;
    id v16 = (uint64_t *)(v14 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_titleString);
    uint64_t *v16 = v2;
    v16[1] = v4;
    swift_bridgeObjectRelease();
    MOSuggestionSheetInterstitialView.updateTitleLabelString()();
  }
}

void MOSuggestionSheetInterstitialView.fetchAssetsForCarousel()()
{
  id v1 = v0;
  uint64_t v2 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x1C8))();
  if (v2)
  {
    uint64_t v3 = v2;
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    (*(void (**)(void))(*(void *)static MOSuggestionAssetCacheManager.shared + 296))();
    uint64_t v4 = swift_allocObject();
    swift_unknownObjectWeakInit();
    swift_retain();
    uint64_t v5 = MOSuggestionCollectionViewCellViewModel.fetchAssetsWithPlaceHolderSingleResult(previewOnly:previewMax:style:typeSorted:completionHandler:)(0, 5, MomentsUIService_SuggestionCellStyle_carouselFullScreen, 0, (uint64_t)partial apply for closure #1 in MOSuggestionSheetInterstitialView.fetchAssetsForCarousel(), v4);
    swift_release_n();
    uint64_t v6 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetCarouselView;
    NSString v7 = objc_retain(*(id *)((char *)v1
                           + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetCarouselView));
    uint64_t v8 = specialized static MOSuggestionSheetAssetViewModel.placeholders(count:parent:)(v5, v3);
    (*(void (**)(void *))((swift_isaMask & *v7) + 0xE8))(v8);

    id v9 = *(id *)((char *)v1 + v6);
    MOSuggestionInterstitialCarouselView.reloadAll()();
    swift_release();
  }
}

void closure #1 in MOSuggestionSheetInterstitialView.fetchAssetsForCarousel()(uint64_t *a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v11 = Strong;
    if (*((unsigned char *)a1 + 16) == 1 || (uint64_t v12 = *a1) == 0)
    {
    }
    else
    {
      uint64_t v20 = v3;
      uint64_t v13 = a1[1];
      type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
      swift_retain();
      uint64_t v19 = static OS_dispatch_queue.main.getter();
      uint64_t v14 = (void *)swift_allocObject();
      v14[2] = v11;
      void v14[3] = v12;
      v14[4] = v13;
      aBlock[4] = partial apply for closure #1 in closure #1 in MOSuggestionSheetInterstitialView.fetchAssetsForCarousel();
      aBlock[5] = v14;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
      aBlock[3] = &block_descriptor_100;
      id v15 = _Block_copy(aBlock);
      swift_retain();
      id v16 = v11;
      swift_release();
      static DispatchQoS.unspecified.getter();
      aBlock[0] = _swiftEmptyArrayStorage;
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
      dispatch thunk of SetAlgebra.init<A>(_:)();
      id v17 = (void *)v19;
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v15);

      swift_release();
      (*(void (**)(char *, uint64_t))(v20 + 8))(v5, v2);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }
  }
}

void closure #1 in closure #1 in MOSuggestionSheetInterstitialView.fetchAssetsForCarousel()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = *(id *)(a1 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetCarouselView);
  MOSuggestionInterstitialCarouselView.reloadCell(_:index:)(a2, a3);
}

void MOSuggestionSheetInterstitialView.fetchAssetsForListView(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if ((*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x1C8))())
  {
    uint64_t v6 = swift_allocObject();
    *(unsigned char *)(v6 + 16) = 0;
    uint64_t v7 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v8 = (void *)swift_allocObject();
    void v8[2] = v7;
    v8[3] = v6;
    v8[4] = a1;
    v8[5] = a2;
    swift_retain();
    swift_retain();
    swift_retain();
    unint64_t v9 = MOSuggestionCollectionViewCellViewModel.fetchListAssetsWithPlaceHolderSingleResult(previewOnly:previewMax:typeSorted:completion:)(0, 5, 1, (uint64_t)partial apply for closure #1 in MOSuggestionSheetInterstitialView.fetchAssetsForListView(completion:), (uint64_t)v8);
    swift_release();
    swift_release();
    uint64_t v10 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetListView;
    uint64_t v11 = objc_retain(*(id *)((char *)v3
                            + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetListView));
    unint64_t v12 = specialized static MOSuggestionInterstitialListAssetViewModel.placeHolders(count:)(v9);
    (*(void (**)(unint64_t))((swift_isaMask & *v11) + 0xC0))(v12);

    id v13 = *(id *)((char *)v3 + v10);
    MOSuggestionInterstitialExpandableListView.reloadAll()();
    swift_release();
    swift_release();
  }
}

void closure #1 in MOSuggestionSheetInterstitialView.fetchAssetsForListView(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v34 = a3;
  uint64_t v35 = a5;
  uint64_t v33 = a4;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v36 = *(void *)(v10 - 8);
  uint64_t v37 = v10;
  __chkstk_darwin(v10);
  unint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13 - 8);
  id v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v18 = Strong;
    if (*(unsigned char *)(a1 + 16) == 1)
    {
    }
    else
    {
      uint64_t v30 = *(void *)(a1 + 8);
      type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
      uint64_t v32 = static OS_dispatch_queue.main.getter();
      outlined init with copy of MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult(a1, (uint64_t)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
      unint64_t v19 = (*(unsigned __int8 *)(v14 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
      unint64_t v20 = (v15 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v21 = (v20 + 15) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v31 = v7;
      uint64_t v22 = swift_allocObject();
      *(void *)(v22 + 16) = v18;
      outlined init with take of MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult((uint64_t)v16, v22 + v19);
      *(void *)(v22 + v20) = v30;
      uint64_t v23 = v33;
      *(void *)(v22 + v21) = v34;
      id v24 = (void *)(v22 + ((v21 + 15) & 0xFFFFFFFFFFFFFFF8));
      uint64_t v25 = v35;
      *id v24 = v23;
      v24[1] = v25;
      aBlock[4] = partial apply for closure #1 in closure #1 in MOSuggestionSheetInterstitialView.fetchAssetsForListView(completion:);
      aBlock[5] = v22;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
      aBlock[3] = &block_descriptor_79;
      NSString v26 = _Block_copy(aBlock);
      id v27 = v18;
      swift_retain();
      swift_retain();
      swift_release();
      static DispatchQoS.unspecified.getter();
      aBlock[0] = _swiftEmptyArrayStorage;
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
      dispatch thunk of SetAlgebra.init<A>(_:)();
      unint64_t v28 = (void *)v32;
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v26);

      (*(void (**)(char *, uint64_t))(v31 + 8))(v9, v6);
      (*(void (**)(char *, uint64_t))(v36 + 8))(v12, v37);
    }
  }
}

uint64_t closure #1 in closure #1 in MOSuggestionSheetInterstitialView.fetchAssetsForListView(completion:)(void *a1, uint64_t *a2, unint64_t a3, uint64_t a4, void (*a5)(uint64_t))
{
  uint64_t v8 = *(void **)((char *)a1 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetListView);
  uint64_t v9 = *a2;
  uint64_t v10 = *(uint64_t (**)(unsigned char *))((swift_isaMask & *v8) + 0xC8);
  uint64_t v11 = v8;
  swift_retain();
  unint64_t v12 = (void (*)(unsigned char *, void))v10(v19);
  uint64_t v14 = v13;
  uint64_t v15 = *v13;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  uint64_t *v14 = v15;
  if (!result || v15 < 0 || (v15 & 0x4000000000000000) != 0)
  {
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew()(v15);
    uint64_t v15 = result;
    uint64_t *v14 = result;
  }
  if ((a3 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a3)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  id v17 = (unsigned char *)(a4 + 16);
  *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 8 * a3 + 0x20) = v9;
  swift_release();
  specialized Array._endMutation()();
  v12(v19, 0);
  MOSuggestionInterstitialExpandableListView.reloadAll()();

  (*(void (**)(void))((swift_isaMask & *a1) + 0x330))();
  uint64_t result = swift_beginAccess();
  if ((*v17 & 1) == 0)
  {
    a5(result);
    uint64_t result = swift_beginAccess();
    unsigned char *v17 = 1;
  }
  return result;
}

void MOSuggestionSheetInterstitialView.showCarousel()()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetCarouselView;
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetCarouselView);
  uint64_t v4 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_currentViewMode;
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_currentViewMode))
  {
    id v5 = *(void **)(v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetListView);
    uint64_t v6 = *(void (**)(void))((swift_isaMask & *v5) + 0xD0);
    v3;
    uint64_t v7 = v5;
    v6();
  }
  else
  {
    uint64_t v8 = *(void (**)(void))((swift_isaMask & *v3) + 0x110);
    uint64_t v9 = v3;
    v8();
  }
  uint64_t v10 = *(void (**)(uint64_t))((swift_isaMask & *v3) + 0x118);
  uint64_t v11 = swift_bridgeObjectRetain();
  v10(v11);

  swift_bridgeObjectRelease();
  id v12 = *(id *)(v1 + v2);
  MOSuggestionInterstitialCarouselView.refreshCheckmarksState()();

  *(unsigned char *)(v1 + v4) = 0;
  [*(id *)(v1 + v2) setHidden:0];
  [*(id *)(v1 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetListView) setHidden:1];
  [*(id *)(v1 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_scrollView) setShowsVerticalScrollIndicator:0];
  MOSuggestionSheetInterstitialView.didUpdateSelection()();

  MOSuggestionSheetInterstitialView.setNavBar()();
}

uint64_t MOSuggestionSheetInterstitialView.currentlyActiveSelectedIdentifiers.getter()
{
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_currentViewMode))
  {
    uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetListView);
    uint64_t v2 = *(uint64_t (**)(void))((swift_isaMask & *v1) + 0xD0);
  }
  else
  {
    uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetCarouselView);
    uint64_t v2 = *(uint64_t (**)(void))((swift_isaMask & *v1) + 0x110);
  }
  uint64_t v3 = v1;
  uint64_t v4 = v2();

  return v4;
}

uint64_t MOSuggestionSheetInterstitialView.showListView()()
{
  uint64_t v1 = v0;
  uint64_t v21 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v24 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v22 = *(void *)(v4 - 8);
  uint64_t v23 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void **)(v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetListView);
  uint64_t v8 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_currentViewMode;
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_currentViewMode))
  {
    uint64_t v9 = *(void (**)(void))((swift_isaMask & *v7) + 0xD0);
    uint64_t v10 = v7;
    v9();
  }
  else
  {
    uint64_t v11 = *(void **)(v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetCarouselView);
    id v12 = *(void (**)(void))((swift_isaMask & *v11) + 0x110);
    v7;
    uint64_t v13 = v11;
    v12();
  }
  uint64_t v14 = *(void (**)(uint64_t))((swift_isaMask & *v7) + 0xD8);
  uint64_t v15 = swift_bridgeObjectRetain();
  v14(v15);

  swift_bridgeObjectRelease();
  *(unsigned char *)(v1 + v8) = 1;
  type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  id v16 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v17 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = partial apply for closure #1 in MOSuggestionSheetInterstitialView.showListView();
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_66;
  uint64_t v18 = _Block_copy(aBlock);
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  uint64_t v19 = v21;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v24 + 8))(v3, v19);
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v6, v23);
}

void closure #1 in MOSuggestionSheetInterstitialView.showListView()()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (char *)Strong;
    uint64_t v2 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetListView;
    id v3 = *(id *)(Strong + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetListView);
    MOSuggestionInterstitialExpandableListView.refreshCheckmarksState()();

    [*(id *)&v1[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetCarouselView] setHidden:1];
    [*(id *)&v1[v2] setHidden:0];
    [*(id *)&v1[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_scrollView] setShowsVerticalScrollIndicator:1];
    MOSuggestionSheetInterstitialView.didUpdateSelection()();
    MOSuggestionSheetInterstitialView.setNavBar()();
  }
}

void *MOSuggestionSheetInterstitialView.NIL_CAROUSEL_INDEX.unsafeMutableAddressor()
{
  return &static MOSuggestionSheetInterstitialView.NIL_CAROUSEL_INDEX;
}

void closure #1 in MOSuggestionSheetInterstitialView.didToggleListCarouselViewButton(carouselIndex:)()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    MOSuggestionSheetInterstitialView.showListView()();
    if (serverManager._connectionProperties != (NSMutableDictionary *)-1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static MOAngelLogger.assets);
    id v3 = v1;
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136315394;
      if (v3[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_currentViewMode])
      {
        uint64_t v7 = *(void **)&v3[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetListView];
        uint64_t v8 = *(void (**)(void))((swift_isaMask & *v7) + 0xD0);
      }
      else
      {
        uint64_t v7 = *(void **)&v3[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetCarouselView];
        uint64_t v8 = *(void (**)(void))((swift_isaMask & *v7) + 0x110);
      }
      uint64_t v9 = v7;
      v8();

      uint64_t v10 = Set.debugDescription.getter();
      unint64_t v12 = v11;
      swift_bridgeObjectRelease();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v6 + 12) = 2080;
      uint64_t v13 = *(void **)&v3[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetListView];
      uint64_t v14 = *(void (**)(void))((swift_isaMask & *v13) + 0xD0);
      uint64_t v15 = v13;
      v14();

      uint64_t v16 = Set.debugDescription.getter();
      unint64_t v18 = v17;
      swift_bridgeObjectRelease();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "[Interstitial] currentlySelected: %s, selectedList: %s", (uint8_t *)v6, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
}

Swift::Void __swiftcall MOSuggestionSheetInterstitialView.markSelectedAssetsAsEligible()()
{
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_currentViewMode))
  {
    uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetListView);
    uint64_t v2 = *(uint64_t (**)(void))((swift_isaMask & *v1) + 0xD0);
  }
  else
  {
    uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetCarouselView);
    uint64_t v2 = *(uint64_t (**)(void))((swift_isaMask & *v1) + 0x110);
  }
  id v3 = v1;
  uint64_t v4 = v2();

  int64_t v5 = 0;
  uint64_t v6 = v4 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(v4 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  if (!v9) {
    goto LABEL_8;
  }
LABEL_7:
  unint64_t v11 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v11 | (v5 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v5 << 6))
  {
    uint64_t v16 = (uint64_t *)(*(void *)(v4 + 48) + 16 * i);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    uint64_t v19 = one-time initialization token for shared;
    swift_bridgeObjectRetain();
    if (v19 != -1) {
      swift_once();
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)static MOSuggestionAssetCacheManager.shared + 264))(v18, v17);
    swift_bridgeObjectRelease();
    if (v9) {
      goto LABEL_7;
    }
LABEL_8:
    int64_t v13 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
LABEL_30:
      __break(1u);
      return;
    }
    if (v13 >= v10) {
      goto LABEL_26;
    }
    unint64_t v14 = *(void *)(v6 + 8 * v13);
    ++v5;
    if (!v14)
    {
      int64_t v5 = v13 + 1;
      if (v13 + 1 >= v10) {
        goto LABEL_26;
      }
      unint64_t v14 = *(void *)(v6 + 8 * v5);
      if (!v14)
      {
        int64_t v5 = v13 + 2;
        if (v13 + 2 >= v10) {
          goto LABEL_26;
        }
        unint64_t v14 = *(void *)(v6 + 8 * v5);
        if (!v14) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v9 = (v14 - 1) & v14;
  }
  int64_t v15 = v13 + 3;
  if (v15 < v10)
  {
    unint64_t v14 = *(void *)(v6 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        int64_t v5 = v15 + 1;
        if (__OFADD__(v15, 1)) {
          goto LABEL_30;
        }
        if (v5 >= v10) {
          goto LABEL_26;
        }
        unint64_t v14 = *(void *)(v6 + 8 * v5);
        ++v15;
        if (v14) {
          goto LABEL_21;
        }
      }
    }
    int64_t v5 = v15;
    goto LABEL_21;
  }
LABEL_26:

  swift_release();
}

Swift::Bool __swiftcall MOSuggestionSheetInterstitialView.isPromptElligibleForTransfer()()
{
  if (!(*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x1C8))()) {
    return 0;
  }
  if (*((unsigned char *)v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_currentViewMode))
  {
    uint64_t v1 = *(void **)((char *)v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetListView);
    uint64_t v2 = *(uint64_t (**)(void))((swift_isaMask & *v1) + 0xD0);
  }
  else
  {
    uint64_t v1 = *(void **)((char *)v0
                    + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetCarouselView);
    uint64_t v2 = *(uint64_t (**)(void))((swift_isaMask & *v1) + 0x110);
  }
  id v3 = v1;
  uint64_t v5 = v2();

  unint64_t v6 = (unint64_t)MOEventBundle.orderedAssetReferencesForPreview(max:)(13);
  if (v6)
  {
    unint64_t v7 = v6;
    uint64_t v8 = v6 & 0xFFFFFFFFFFFFFF8;
    if (v6 >> 62) {
      goto LABEL_62;
    }
    for (uint64_t i = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10); i; uint64_t i = _CocoaArrayWrapper.endIndex.getter())
    {
      uint64_t v70 = v5;
      uint64_t v71 = v8;
      unint64_t v10 = 0;
      Swift::Bool v69 = 1;
      while (1)
      {
        if ((v7 & 0xC000000000000001) != 0)
        {
          uint64_t v8 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v5 = v10 + 1;
          if (__OFADD__(v10, 1)) {
            break;
          }
          goto LABEL_16;
        }
        if (v10 >= *(void *)(v71 + 16)) {
          goto LABEL_61;
        }
        uint64_t v8 = *(void *)(v7 + 8 * v10 + 32);
        swift_retain();
        uint64_t v5 = v10 + 1;
        if (__OFADD__(v10, 1)) {
          break;
        }
LABEL_16:
        unint64_t v11 = (void *)(*(uint64_t (**)(void))(*(void *)v8 + 120))();
        uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v14 = v13;
        if (v12 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v14 == v15)
        {
LABEL_37:
          swift_bridgeObjectRelease_n();
          goto LABEL_38;
        }
        char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v17) {
          goto LABEL_38;
        }
        uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v20 = v19;
        if (v18 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v20 == v21) {
          goto LABEL_37;
        }
        char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v23) {
          goto LABEL_38;
        }
        uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v26 = v25;
        if (v24 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v26 == v27) {
          goto LABEL_37;
        }
        char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v28) {
          goto LABEL_38;
        }
        uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v31 = v30;
        if (v29 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v31 == v32) {
          goto LABEL_37;
        }
        char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v33) {
          goto LABEL_38;
        }
        uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v36 = v35;
        if (v34 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v36 == v37) {
          goto LABEL_37;
        }
        char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v38)
        {
LABEL_38:
          swift_release();

LABEL_39:
          ++v10;
          if (v5 == i)
          {
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return v69;
          }
        }
        else
        {
          uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v41 = v40;
          if (v39 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v41 == v42) {
            goto LABEL_37;
          }
          char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v43) {
            goto LABEL_38;
          }
          uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v46 = v45;
          if (v44 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v46 == v47) {
            goto LABEL_44;
          }
          char v49 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          uint64_t v48 = swift_bridgeObjectRelease();
          if ((v49 & 1) == 0)
          {
            uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v52 = v51;
            if (v50 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v52 == v53) {
              goto LABEL_44;
            }
            char v54 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            uint64_t v48 = swift_bridgeObjectRelease();
            if ((v54 & 1) == 0)
            {
              uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v57 = v56;
              if (v55 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v57 == v58) {
                goto LABEL_44;
              }
              char v59 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              uint64_t v48 = swift_bridgeObjectRelease();
              if ((v59 & 1) == 0)
              {
                uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                uint64_t v62 = v61;
                if (v60 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v62 == v63) {
                  goto LABEL_44;
                }
                char v64 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                uint64_t v48 = swift_bridgeObjectRelease();
                if ((v64 & 1) == 0)
                {
                  static String._unconditionallyBridgeFromObjectiveC(_:)();
                  static String._unconditionallyBridgeFromObjectiveC(_:)();
LABEL_44:
                  swift_bridgeObjectRelease();
                  uint64_t v48 = swift_bridgeObjectRelease();
                }
              }
            }
          }
          uint64_t v65 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 296))(v48);
          char v67 = specialized Set.contains(_:)(v65, v66, v70);
          swift_bridgeObjectRelease();

          swift_release();
          if (v67) {
            goto LABEL_39;
          }
          Swift::Bool v69 = 0;
          unint64_t v10 = v5;
          if (v5 == i)
          {
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return 0;
          }
        }
      }
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      ;
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRelease();
  return 1;
}

void MOSuggestionSheetInterstitialView.logNotificationAnalyticsEvent(trigger:)()
{
  if (serverManager._connectionProperties != (NSMutableDictionary *)-1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static MOAngelLogger.assets);
  uint64_t v2 = v0;
  id v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 67109376;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    *(_WORD *)(v5 + 8) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[Interstitial] fromNotification: %{BOOL}d, trigger: %lu", (uint8_t *)v5, 0x12u);
    swift_slowDealloc();
  }
  else
  {
  }
  if (*((unsigned char *)v2 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_fromNotification) == 1)
  {
    uint64_t v6 = (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x1C8))();
    if (v6)
    {
      id v7 = *(id *)(v6 + 16);
      swift_release();
      id v8 = v7;
      MONotificationAnalytics.NotificationEngagementEvent.send()();
    }
  }
}

id MOSuggestionSheetInterstitialView.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  os_log_type_t v4 = v3;
  if (a2)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v6 = 0;
  }
  id v7 = [objc_allocWithZone(v4) initWithNibName:v6 bundle:a3];

  return v7;
}

void MOSuggestionSheetInterstitialView.init(nibName:bundle:)()
{
}

id MOSuggestionSheetInterstitialView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MOSuggestionSheetInterstitialView();
  return [super dealloc];
}

Swift::Void __swiftcall MOSuggestionSheetInterstitialView.shouldShowCarouselAtIndex(index:)(Swift::Int index)
{
  (*(void (**)(Swift::Int))((swift_isaMask & *v1) + 0x388))(index);
}

Swift::Void __swiftcall MOSuggestionSheetInterstitialView.enableActionButtons()()
{
  [*(id *)(v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_journalButton) setEnabled:1];
  [*(id *)(v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_quickAddButton) setEnabled:1];
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_emptySelectionLabel);
  [v1 setHidden:1];
  id v2 = String._bridgeToObjectiveC()();
  [v1 setText:v2];
}

Swift::Void __swiftcall MOSuggestionSheetInterstitialView.disableActionButtons()()
{
  [*(id *)(v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_journalButton) setEnabled:0];
  [*(id *)(v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_quickAddButton) setEnabled:0];
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_emptySelectionLabel);
  [v1 setHidden:0];
  if (one-time initialization token for SELECT_AT_LEAST_ONE_TEXT != -1) {
    swift_once();
  }
  id v2 = String._bridgeToObjectiveC()();
  [v1 setText:v2];
}

uint64_t specialized Set._Variant.remove(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  unint64_t v10 = (void *)(v9 + 16 * v8);
  BOOL v11 = *v10 == a1 && v10[1] == a2;
  if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    uint64_t v15 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v15;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_18;
      }
      uint64_t v16 = (void *)(v9 + 16 * v8);
      BOOL v17 = *v16 == a1 && v16[1] == a2;
    }
    while (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *v2;
  uint64_t v19 = *v2;
  uint64_t *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeSet.copy()();
    uint64_t v13 = v19;
  }
  uint64_t v14 = *(void *)(*(void *)(v13 + 48) + 16 * v8);
  specialized _NativeSet._delete(at:)(v8);
  uint64_t *v2 = v19;
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t specialized Set._Variant.remove(_:)(uint64_t a1)
{
  id v2 = v1;
  uint64_t v4 = *v2;
  uint64_t v5 = static Hasher._hash(seed:_:)();
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v7 = v5 & ~v6;
  if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(v4 + 48);
  if (*(void *)(v8 + 8 * v7) != a1)
  {
    uint64_t v9 = ~v6;
    do
    {
      unint64_t v7 = (v7 + 1) & v9;
      if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
        return 0;
      }
    }
    while (*(void *)(v8 + 8 * v7) != a1);
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *v2;
  uint64_t v14 = *v2;
  uint64_t *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeSet.copy()();
    uint64_t v11 = v14;
  }
  uint64_t v12 = *(void *)(*(void *)(v11 + 48) + 8 * v7);
  specialized _NativeSet._delete(at:)(v7);
  uint64_t *v2 = v14;
  swift_bridgeObjectRelease();
  return v12;
}

unint64_t specialized _NativeSet._delete(at:)(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(v3 + 48);
          uint64_t v13 = (_OWORD *)(v12 + 16 * v2);
          uint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v13 >= v14 + 1))
          {
            _OWORD *v13 = *v14;
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v15 = *(void *)(v3 + 16);
  BOOL v16 = __OFSUB__(v15, 1);
  uint64_t v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = *(void *)(v3 + 48);
        unint64_t v11 = (void *)(v10 + 8 * v6);
        uint64_t v12 = static Hasher._hash(seed:_:)() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= v12)
          {
LABEL_16:
            uint64_t v15 = (void *)(v10 + 8 * v2);
            if (v2 != v6 || (int64_t v2 = v6, v15 >= v11 + 1))
            {
              *uint64_t v15 = *v11;
              int64_t v2 = v6;
            }
          }
        }
        else if (v12 >= v9 || v2 >= v12)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  BOOL v16 = *(void *)(v3 + 16);
  uint64_t v17 = __OFSUB__(v16, 1);
  uint64_t v18 = v16 - 1;
  if (v17)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v18;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

id specialized static MOSuggestionSheetInterstitialView.makeJournalButton(publicUI:clientName:isSourceJournalComposer:)(int a1, uint64_t a2, uint64_t a3, int a4)
{
  int v57 = a4;
  uint64_t v56 = a3;
  uint64_t v54 = a2;
  int v55 = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIButton.Configuration?);
  __chkstk_darwin(v4 - 8);
  unint64_t v6 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = type metadata accessor for UIButton.Configuration.Size();
  uint64_t v7 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  unint64_t v9 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UIButton.Configuration.CornerStyle();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for UIButton.Configuration();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v18 = [objc_allocWithZone((Class)UIButton) init];
  static UIButton.Configuration.filled()();
  (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for UIButton.Configuration.CornerStyle.large(_:), v10);
  UIButton.Configuration.cornerStyle.setter();
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for UIButton.Configuration.Size.large(_:), v60);
  UIButton.Configuration.buttonSize.setter();
  uint64_t v19 = self;
  uint64_t v20 = &selRef_systemBlueColor;
  char v21 = v55;
  if ((v55 & 1) == 0) {
    uint64_t v20 = &selRef_systemIndigoColor;
  }
  id v22 = [v19 *v20];
  UIButton.Configuration.baseBackgroundColor.setter();
  char v23 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  uint64_t v58 = v17;
  v23(v6, v17, v14);
  uint64_t v59 = v15;
  uint64_t v60 = v14;
  uint64_t v24 = v15;
  uint64_t v25 = v56;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v6, 0, 1, v14);
  UIButton.configuration.setter();
  [v18 setRole:1];
  [v18 setTranslatesAutoresizingMaskIntoConstraints:0];
  uint64_t v26 = self;
  id v27 = [v26 mainBundle];
  v61._object = (void *)0x80000001001E24D0;
  v28._uint64_t countAndFlagsBits = 0x7257207472617453;
  v28._object = (void *)0xED0000676E697469;
  v29._uint64_t countAndFlagsBits = 0;
  v29._object = (void *)0xE000000000000000;
  v61._uint64_t countAndFlagsBits = 0xD00000000000003BLL;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v28, (Swift::String_optional)0, (NSBundle)v27, v29, v61);

  NSString v30 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v18 setTitle:v30 forState:0];

  id v31 = v18;
  id v32 = [v26 mainBundle];
  v62._uint64_t countAndFlagsBits = 0xD000000000000042;
  v62._object = (void *)0x80000001001E2510;
  v33._uint64_t countAndFlagsBits = 0x7257207472617453;
  v33._object = (void *)0xED0000676E697469;
  v34._uint64_t countAndFlagsBits = 0;
  v34._object = (void *)0xE000000000000000;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v33, (Swift::String_optional)0, (NSBundle)v32, v34, v62);

  NSString v35 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v31 setAccessibilityLabel:v35];

  [v31 setMaximumContentSizeCategory:UIContentSizeCategoryAccessibilityMedium];
  if ((v21 & 1) != 0 && v25)
  {
    swift_bridgeObjectRetain();
    id v36 = [v26 mainBundle];
    v63._uint64_t countAndFlagsBits = 0xD000000000000011;
    v63._object = (void *)0x80000001001E2560;
    v37._uint64_t countAndFlagsBits = 0xE2206F7420646441;
    v37._object = (void *)0xAF9D80E240259C80;
    v38._uint64_t countAndFlagsBits = 0;
    v38._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v37, (Swift::String_optional)0, (NSBundle)v36, v38, v63);

    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v39 = swift_allocObject();
    *(_OWORD *)(v39 + 16) = xmmword_1001DA0F0;
    *(void *)(v39 + 56) = &type metadata for String;
    *(void *)(v39 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v39 + 32) = v54;
    *(void *)(v39 + 40) = v25;
    static String.localizedStringWithFormat(_:_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    NSString v40 = String._bridgeToObjectiveC()();
    [v31 setTitle:v40 forState:0];

    id v41 = v31;
    NSString v42 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v41 setAccessibilityLabel:v42];
  }
  if ((v57 & 1) != 0 && (v21 & 1) == 0)
  {
    id v43 = [v26 mainBundle];
    v64._object = (void *)0x80000001001E24D0;
    v44._uint64_t countAndFlagsBits = 0x45206F7420646441;
    v44._object = (void *)0xEC0000007972746ELL;
    v45._uint64_t countAndFlagsBits = 0;
    v45._object = (void *)0xE000000000000000;
    v64._uint64_t countAndFlagsBits = 0xD00000000000003BLL;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v44, (Swift::String_optional)0, (NSBundle)v43, v45, v64);

    NSString v46 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v31 setTitle:v46 forState:0];

    id v47 = v31;
    id v48 = [v26 mainBundle];
    v65._uint64_t countAndFlagsBits = 0xD000000000000042;
    v65._object = (void *)0x80000001001E2510;
    v49._uint64_t countAndFlagsBits = 0x45206F7420646441;
    v49._object = (void *)0xEC0000007972746ELL;
    v50._uint64_t countAndFlagsBits = 0;
    v50._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v49, (Swift::String_optional)0, (NSBundle)v48, v50, v65);

    NSString v51 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v47 setAccessibilityLabel:v51];
  }
  (*(void (**)(char *, uint64_t))(v59 + 8))(v58, v60);
  return v31;
}

id specialized static MOSuggestionSheetInterstitialView.makeQuickAddButton(publicUI:)(char a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIButton.Configuration?);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UIButton.Configuration.Size();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UIButton.Configuration();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = [objc_allocWithZone((Class)UIButton) init];
  static UIButton.Configuration.plain()();
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for UIButton.Configuration.Size.large(_:), v5);
  UIButton.Configuration.buttonSize.setter();
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v4, v12, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v4, 0, 1, v9);
  UIButton.configuration.setter();
  [v13 setTranslatesAutoresizingMaskIntoConstraints:0];
  uint64_t v14 = self;
  id v15 = v13;
  id v16 = [v14 systemBackgroundColor];
  [v15 setBackgroundColor:v16];

  id v17 = [self mainBundle];
  v26._uint64_t countAndFlagsBits = 0xD00000000000004ALL;
  v26._object = (void *)0x80000001001E2480;
  v18._object = (void *)0x80000001001E2460;
  v18._uint64_t countAndFlagsBits = 0xD000000000000014;
  v19._uint64_t countAndFlagsBits = 0;
  v19._object = (void *)0xE000000000000000;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v18, (Swift::String_optional)0, (NSBundle)v17, v19, v26);

  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v15 setTitle:v20 forState:0];

  if (a1) {
    char v21 = &selRef_systemBlueColor;
  }
  else {
    char v21 = &selRef_systemIndigoColor;
  }
  id v22 = [v14 *v21];
  [v15 setTitleColor:v22 forState:0];

  id v23 = [v14 *v21];
  [v15 setTintColor:v23];

  [v15 setMaximumContentSizeCategory:UIContentSizeCategoryAccessibilityMedium];
  [v15 setRole:1];
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return v15;
}

char *specialized MOSuggestionSheetInterstitialView.init(controller:cellViewModel:presentationDelegate:selectedSuggestion:indexPath:fromNotification:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  swift_unknownObjectWeakInit();
  uint64_t v10 = &v8[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_presentationDelegate];
  *(void *)&v8[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_presentationDelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v8[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_currentViewMode] = 0;
  *(void *)&v8[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_photoMemoryBanner] = 0;
  uint64_t v11 = &v8[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_cellViewModel];
  *(void *)&v8[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_cellViewModel] = 0;
  *(void *)&v8[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_toggleListViewCarouselButton] = 0;
  uint64_t v12 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_scrollView;
  id v13 = objc_allocWithZone((Class)UIScrollView);
  uint64_t v14 = v8;
  id v15 = [v13 init];
  [v15 setShowsVerticalScrollIndicator:0];
  *(void *)&v8[v12] = v15;
  uint64_t v16 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_stackView;
  id v17 = [objc_allocWithZone((Class)UIStackView) init];
  [v17 setAxis:1];
  [v17 setAlignment:3];
  [v17 setSpacing:3.0];
  *(void *)&v14[v16] = v17;
  uint64_t v18 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_labelStackView;
  id v19 = [objc_allocWithZone((Class)UIStackView) init];
  [v19 setAxis:0];
  [v19 setAlignment:3];
  *(void *)&v14[v18] = v19;
  uint64_t v20 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_titleLabel;
  closure #1 in variable initialization expression of MOSuggestionSheetInterstitialView.titleLabel();
  *(void *)&v14[v20] = v21;
  uint64_t v22 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_dateLabel;
  *(void *)&v14[v22] = closure #1 in variable initialization expression of MOSuggestionSheetInterstitialView.dateLabel();
  uint64_t v23 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetTypeLabel;
  *(void *)&v14[v23] = closure #1 in variable initialization expression of MOSuggestionSheetInterstitialView.assetTypeLabel();
  uint64_t v24 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_emptySelectionLabel;
  *(void *)&v14[v24] = closure #1 in variable initialization expression of MOSuggestionSheetInterstitialView.emptySelectionLabel();
  *(void *)&v14[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_portraitConstraints] = _swiftEmptyArrayStorage;
  *(void *)&v14[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_landscapeConstraints] = _swiftEmptyArrayStorage;
  *(void *)&v14[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_commonConstraints] = _swiftEmptyArrayStorage;
  *(void *)&v14[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_journalButtonLeadingConstraint] = 0;
  *(void *)&v14[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_journalButtonTrailingConstraint] = 0;
  *(void *)&v14[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_journalButtonBottomConstraint] = 0;
  uint64_t v25 = &v14[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_titleString];
  void *v25 = 0;
  v25[1] = 0;
  Swift::String v26 = &v14[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_modifiedTitleString];
  *Swift::String v26 = 0;
  v26[1] = 0;
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  swift_beginAccess();
  *((void *)v10 + 1) = a4;
  swift_unknownObjectWeakAssign();
  id v27 = &v14[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_selectedSuggestion];
  void *v27 = a5;
  v27[1] = a6;
  Swift::String v28 = &v14[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_indexPath];
  uint64_t v62 = type metadata accessor for IndexPath();
  uint64_t v29 = *(void *)(v62 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v28, a7, v62);
  v14[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_fromNotification] = a8;
  id v30 = objc_allocWithZone((Class)UINavigationBar);
  swift_retain();
  id v31 = [v30 init];
  *(void *)&v14[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_navigationBar] = v31;
  swift_beginAccess();
  void *v11 = a2;
  swift_retain();
  uint64_t v32 = swift_release();
  Swift::String v33 = *(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0x1B0);
  LOBYTE(v30) = v33(v32);
  uint64_t v34 = (*(uint64_t (**)(void))((swift_isaMask & *a1) + 0x1C8))();
  uint64_t v36 = v35;
  char v37 = (*(uint64_t (**)(void))((swift_isaMask & *a1) + 0x1C0))();
  id v38 = specialized static MOSuggestionSheetInterstitialView.makeJournalButton(publicUI:clientName:isSourceJournalComposer:)(v30 & 1, v34, v36, v37 & 1);
  uint64_t v39 = swift_bridgeObjectRelease();
  *(void *)&v14[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_journalButton] = v38;
  char v40 = v33(v39);
  *(void *)&v14[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_quickAddButton] = specialized static MOSuggestionSheetInterstitialView.makeQuickAddButton(publicUI:)(v40 & 1);
  id v41 = objc_allocWithZone((Class)type metadata accessor for MOSuggestionInterstitialExpandableListView());
  NSString v42 = a1;
  *(void *)&v14[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetListView] = MOSuggestionInterstitialExpandableListView.init(controller:)(v42);
  id v43 = objc_allocWithZone((Class)type metadata accessor for MOSuggestionInterstitialCarouselView());
  *(void *)&v14[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetCarouselView] = MOSuggestionInterstitialCarouselView.init(controller:)(v42);

  v65.receiver = v14;
  v65.super_class = (Class)type metadata accessor for MOSuggestionSheetInterstitialView();
  Swift::String v44 = [super initWithNibName:0 bundle:0];
  Swift::String v45 = *(void **)&v44[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetCarouselView];
  NSString v46 = *(void (**)(char *, _UNKNOWN **))((swift_isaMask & *v45) + 0x198);
  id v47 = v44;
  id v48 = v45;
  v46(v44, &protocol witness table for MOSuggestionSheetInterstitialView);

  Swift::String v49 = *(void **)&v47[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetListView];
  Swift::String v50 = *(void (**)(char *, _UNKNOWN **))((swift_isaMask & *v49) + 0xF0);
  NSString v51 = v47;
  uint64_t v52 = v49;
  v50(v44, &protocol witness table for MOSuggestionSheetInterstitialView);

  id v53 = [self defaultCenter];
  [v53 addObserver:v51 selector:"handleContentSizeChanged" name:UIContentSizeCategoryDidChangeNotification object:0];

  uint64_t v54 = (*(uint64_t (**)(void))(*(void *)a2 + 176))();
  int v55 = (uint64_t *)&v51[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_titleString];
  *int v55 = v54;
  v55[1] = v56;
  swift_bridgeObjectRelease();
  MOSuggestionSheetInterstitialView.updateTitleLabelString()();
  (*(void (**)(void))((swift_isaMask & *(void *)v51) + 0x318))();
  (*(void (**)(uint64_t))((swift_isaMask & *(void *)v51) + 0x3A8))(6);
  MOSuggestionSheetInterstitialView.updateConstraints()();

  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(a7, v62);
  return v51;
}

uint64_t type metadata accessor for MOSuggestionSheetInterstitialView()
{
  uint64_t result = type metadata singleton initialization cache for MOSuggestionSheetInterstitialView;
  if (!type metadata singleton initialization cache for MOSuggestionSheetInterstitialView) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000416A0()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000416D8()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void partial apply for closure #1 in MOSuggestionSheetInterstitialView.viewWillTransition(to:with:)()
{
  closure #1 in MOSuggestionSheetInterstitialView.viewWillTransition(to:with:)(*(double *)(v0 + 24), *(double *)(v0 + 32));
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

void specialized MOSuggestionSheetInterstitialView.init(coder:)()
{
  swift_unknownObjectWeakInit();
  *(void *)&v0[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_presentationDelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v0[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_currentViewMode] = 0;
  *(void *)&v0[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_photoMemoryBanner] = 0;
  *(void *)&v0[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_cellViewModel] = 0;
  *(void *)&v0[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_toggleListViewCarouselButton] = 0;
  uint64_t v1 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_scrollView;
  id v2 = [objc_allocWithZone((Class)UIScrollView) init];
  [v2 setShowsVerticalScrollIndicator:0];
  *(void *)&v0[v1] = v2;
  uint64_t v3 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_stackView;
  id v4 = [objc_allocWithZone((Class)UIStackView) init];
  [v4 setAxis:1];
  [v4 setAlignment:3];
  [v4 setSpacing:3.0];
  *(void *)&v0[v3] = v4;
  uint64_t v5 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_labelStackView;
  id v6 = [objc_allocWithZone((Class)UIStackView) init];
  [v6 setAxis:0];
  [v6 setAlignment:3];
  *(void *)&v0[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_titleLabel;
  closure #1 in variable initialization expression of MOSuggestionSheetInterstitialView.titleLabel();
  *(void *)&v0[v7] = v8;
  uint64_t v9 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_dateLabel;
  *(void *)&v0[v9] = closure #1 in variable initialization expression of MOSuggestionSheetInterstitialView.dateLabel();
  uint64_t v10 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetTypeLabel;
  *(void *)&v0[v10] = closure #1 in variable initialization expression of MOSuggestionSheetInterstitialView.assetTypeLabel();
  uint64_t v11 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_emptySelectionLabel;
  *(void *)&v0[v11] = closure #1 in variable initialization expression of MOSuggestionSheetInterstitialView.emptySelectionLabel();
  *(void *)&v0[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_portraitConstraints] = _swiftEmptyArrayStorage;
  *(void *)&v0[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_landscapeConstraints] = _swiftEmptyArrayStorage;
  *(void *)&v0[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_commonConstraints] = _swiftEmptyArrayStorage;
  *(void *)&v0[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_journalButtonLeadingConstraint] = 0;
  *(void *)&v0[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_journalButtonTrailingConstraint] = 0;
  *(void *)&v0[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_journalButtonBottomConstraint] = 0;
  uint64_t v12 = &v0[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_titleString];
  void *v12 = 0;
  v12[1] = 0;
  id v13 = &v0[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_modifiedTitleString];
  void *v13 = 0;
  v13[1] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void partial apply for closure #1 in MOSuggestionSheetInterstitialView.updateAssetTypes()()
{
}

unint64_t lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags()
{
  unint64_t result = lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags;
  if (!lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags)
  {
    type metadata accessor for DispatchWorkItemFlags();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags);
  }
  return result;
}

void specialized MOSuggestionSheetInterstitialView.journalButtonTapped(_:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x1C8))();
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x138))();
    if (v4)
    {
      uint64_t v14 = (void *)v4;
      uint64_t v5 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x390))();
      char v6 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v0) + 0x3A0))(v5);
      (*(void (**)(uint64_t, void))((char *)v0
                                              + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_selectedSuggestion))((uint64_t)v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_indexPath, 0);
      uint64_t v7 = IndexPath.row.getter();
      uint64_t v8 = *(void *)((char *)v1
                     + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_modifiedTitleString);
      uint64_t v9 = *(void *)((char *)v1
                     + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_modifiedTitleString
                     + 8);
      uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void *))(*(void *)v3 + 528);
      swift_bridgeObjectRetain();
      v10(v7, v8, v9, v6 & 1, v14);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t))((swift_isaMask & *v1) + 0x3A8))(5);
      if ((*(uint64_t (**)(void))((swift_isaMask & *v14) + 0x1C0))())
      {
        if ((*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x150))())
        {
          uint64_t v12 = v11;
          uint64_t ObjectType = swift_getObjectType();
          (*(void (**)(uint64_t, uint64_t))(v12 + 16))(ObjectType, v12);
          swift_unknownObjectRelease();
        }
        [v1 dismissViewControllerAnimated:1 completion:0];
      }
      swift_release();
    }
    else
    {
      swift_release();
    }
  }
}

void specialized MOSuggestionSheetInterstitialView.handleLabelEditTap(_:)()
{
  uint64_t v1 = *(void *)&v0[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_titleString + 8];
  if (v1)
  {
    uint64_t v2 = v0;
    uint64_t v3 = *(void *)&v0[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_titleString];
    type metadata accessor for MOSuggestionInterstitialAlertController();
    uint64_t v4 = self;
    swift_bridgeObjectRetain();
    id v5 = [v4 mainBundle];
    v26._uint64_t countAndFlagsBits = 0xD00000000000004ALL;
    v26._object = (void *)0x80000001001E2310;
    v6._uint64_t countAndFlagsBits = 0x7469542074696445;
    v6._object = (void *)0xEA0000000000656CLL;
    v7._uint64_t countAndFlagsBits = 0;
    v7._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v6, (Swift::String_optional)0, (NSBundle)v5, v7, v26);

    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v9 = [(id)swift_getObjCClassFromMetadata() alertControllerWithTitle:v8 message:0 preferredStyle:1];

    (*(void (**)(uint64_t, uint64_t))((swift_isaMask & *v9) + 0x58))(v3, v1);
    swift_bridgeObjectRelease();
    id v10 = [v4 mainBundle];
    v27._uint64_t countAndFlagsBits = 0xD000000000000049;
    v27._object = (void *)0x80000001001E2360;
    v11._uint64_t countAndFlagsBits = 0x6C65636E6143;
    v11._object = (void *)0xE600000000000000;
    v12._uint64_t countAndFlagsBits = 0;
    v12._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v11, (Swift::String_optional)0, (NSBundle)v10, v12, v27);

    NSString v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v14 = self;
    id v15 = [v14 actionWithTitle:v13 style:1 handler:0];

    [v9 addAction:v15];
    id v16 = [v4 mainBundle];
    v28._object = (void *)0x80000001001E23B0;
    v17._uint64_t countAndFlagsBits = 0x6D7269666E6F43;
    v17._object = (void *)0xE700000000000000;
    v18._uint64_t countAndFlagsBits = 0;
    v18._object = (void *)0xE000000000000000;
    v28._uint64_t countAndFlagsBits = 0xD000000000000044;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v17, (Swift::String_optional)0, (NSBundle)v16, v18, v28);

    uint64_t v19 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = v9;
    *(void *)(v20 + 24) = v19;
    uint64_t v21 = v9;
    swift_retain();
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    aBlock[4] = partial apply for closure #1 in MOSuggestionSheetInterstitialView.handleLabelEditTap(_:);
    aBlock[5] = v20;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIAlertAction) -> ();
    aBlock[3] = &block_descriptor_87;
    uint64_t v23 = _Block_copy(aBlock);
    swift_release();
    id v24 = [v14 actionWithTitle:v22 style:0 handler:v23];
    _Block_release(v23);
    swift_release();

    [v21 addAction:v24];
    [v2 presentViewController:v21 animated:1 completion:0];
  }
}

void specialized MOSuggestionSheetInterstitialView.didToggleListCarouselViewButton(carouselIndex:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_currentViewMode;
  if (v0[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_currentViewMode] == 1)
  {
    MOSuggestionSheetInterstitialView.showCarousel()();
  }
  else
  {
    uint64_t v3 = *(void **)&v0[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetListView];
    uint64_t v4 = *(uint64_t (**)(void))((swift_isaMask & *v3) + 0xB8);
    id v5 = v3;
    unint64_t v6 = v4();

    if (v6 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (v7)
    {
      MOSuggestionSheetInterstitialView.showListView()();
    }
    else
    {
      uint64_t v8 = swift_allocObject();
      swift_unknownObjectWeakInit();
      swift_retain();
      MOSuggestionSheetInterstitialView.fetchAssetsForListView(completion:)((uint64_t)partial apply for closure #1 in MOSuggestionSheetInterstitialView.didToggleListCarouselViewButton(carouselIndex:), v8);
      swift_release_n();
    }
  }
  if (serverManager._connectionProperties != (NSMutableDictionary *)-1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static MOAngelLogger.assets);
  id v10 = v1;
  Swift::String v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315394;
    if (*((unsigned char *)v1 + v2))
    {
      uint64_t v14 = *(void **)&v10[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetListView];
      id v15 = *(void (**)(void))((swift_isaMask & *v14) + 0xD0);
    }
    else
    {
      uint64_t v14 = *(void **)&v10[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetCarouselView];
      id v15 = *(void (**)(void))((swift_isaMask & *v14) + 0x110);
    }
    id v16 = v14;
    v15();

    uint64_t v17 = Set.debugDescription.getter();
    unint64_t v19 = v18;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2080;
    uint64_t v20 = *(void **)&v10[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetInterstitialView_assetCarouselView];
    uint64_t v21 = *(void (**)(void *, uint64_t))((swift_isaMask & *v20) + 0x110);
    NSString v22 = v20;
    v21(v22, v23);

    uint64_t v24 = Set.debugDescription.getter();
    unint64_t v26 = v25;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v26, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "[Interstitial] currentlySelected: %s, selectedList: %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  MOSuggestionSheetInterstitialView.setNavBar()();
}

unint64_t lazy protocol witness table accessor for type AssetViewMode and conformance AssetViewMode()
{
  unint64_t result = lazy protocol witness table cache variable for type AssetViewMode and conformance AssetViewMode;
  if (!lazy protocol witness table cache variable for type AssetViewMode and conformance AssetViewMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AssetViewMode and conformance AssetViewMode);
  }
  return result;
}

uint64_t sub_100042620@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x138))();
  *a2 = result;
  return result;
}

uint64_t sub_100042684(id *a1, void **a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))((swift_isaMask & **a2) + 0x140);
  id v4 = *a1;
  return v3(v2);
}

uint64_t sub_1000426F4@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x150))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_100042758(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))((swift_isaMask & **a2) + 0x158);
  uint64_t v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t sub_1000427D4@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x1C8))();
  *a2 = result;
  return result;
}

uint64_t sub_100042838(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))((swift_isaMask & **a2) + 0x1D0);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t getEnumTagSinglePayload for AssetViewMode(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AssetViewMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100042A00);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *destructiveInjectEnumTag for AssetViewMode(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for AssetViewMode()
{
  return &type metadata for AssetViewMode;
}

ValueMetadata *type metadata accessor for MOSuggestionSheetInterstitialViewConstants()
{
  return &type metadata for MOSuggestionSheetInterstitialViewConstants;
}

uint64_t ObjC metadata update function for MOSuggestionSheetInterstitialView()
{
  return type metadata accessor for MOSuggestionSheetInterstitialView();
}

uint64_t type metadata completion function for MOSuggestionSheetInterstitialView()
{
  uint64_t result = type metadata accessor for IndexPath();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

void partial apply for closure #1 in MOSuggestionSheetInterstitialView.showListView()()
{
}

uint64_t sub_100042B74()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100042B84()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void partial apply for closure #1 in MOSuggestionSheetInterstitialView.fetchAssetsForListView(completion:)(uint64_t a1)
{
  closure #1 in MOSuggestionSheetInterstitialView.fetchAssetsForListView(completion:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t outlined init with copy of MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100042C3C()
{
  unint64_t v1 = (int *)(type metadata accessor for MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult()
             - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);

  swift_release();
  uint64_t v5 = v0 + v3 + v1[8];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t outlined init with take of MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in closure #1 in MOSuggestionSheetInterstitialView.fetchAssetsForListView(completion:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult()
                 - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void **)(v0 + 16);
  unint64_t v6 = *(void *)(v0 + v3);
  uint64_t v7 = *(void *)(v0 + v4);
  int v8 = *(void (**)(uint64_t))(v0 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8));

  return closure #1 in closure #1 in MOSuggestionSheetInterstitialView.fetchAssetsForListView(completion:)(v5, (uint64_t *)(v0 + v2), v6, v7, v8);
}

uint64_t outlined init with copy of UIButton.Configuration?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIButton.Configuration?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of UIButton.Configuration?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIButton.Configuration?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void partial apply for closure #1 in MOSuggestionSheetInterstitialView.didToggleListCarouselViewButton(carouselIndex:)()
{
}

uint64_t sub_100042F8C()
{
  return objectdestroy_83Tm(32);
}

void partial apply for closure #1 in MOSuggestionSheetInterstitialView.handleLabelEditTap(_:)(uint64_t a1)
{
  closure #1 in MOSuggestionSheetInterstitialView.handleLabelEditTap(_:)(a1, *(void **)(v1 + 16));
}

uint64_t outlined destroy of String(uint64_t a1)
{
  return a1;
}

uint64_t sub_100042FF0()
{
  return _swift_deallocObject(v0, 24, 7);
}

void partial apply for closure #1 in closure #1 in MOSuggestionSheetInterstitialView.updateAssetTypes()()
{
  closure #1 in closure #1 in MOSuggestionSheetInterstitialView.updateAssetTypes()(*(void *)(v0 + 16));
}

void partial apply for closure #1 in MOSuggestionSheetInterstitialView.fetchAssetsForCarousel()(uint64_t *a1)
{
}

uint64_t sub_100043038()
{
  return objectdestroy_83Tm(40);
}

uint64_t objectdestroy_83Tm(uint64_t a1)
{
  swift_release();

  return _swift_deallocObject(v1, a1, 7);
}

void partial apply for closure #1 in closure #1 in MOSuggestionSheetInterstitialView.fetchAssetsForCarousel()()
{
  closure #1 in closure #1 in MOSuggestionSheetInterstitialView.fetchAssetsForCarousel()(v0[2], v0[3], v0[4]);
}

uint64_t MOSuggestionSheetMosaicLayout.cachedAttributes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MOSuggestionSheetMosaicLayout.cachedAttributes.setter(uint64_t a1)
{
  unint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetMosaicLayout_cachedAttributes);
  swift_beginAccess();
  *unint64_t v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*MOSuggestionSheetMosaicLayout.cachedAttributes.modify())()
{
  return MOSuggestionMapSnapshotView.secondaryField.modify;
}

double MOSuggestionSheetMosaicLayout.contentBounds.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetMosaicLayout_contentBounds;
  swift_beginAccess();
  return *(double *)v1;
}

uint64_t MOSuggestionSheetMosaicLayout.contentBounds.setter(double a1, double a2, double a3, double a4)
{
  uint64_t v9 = (double *)(v4 + OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetMosaicLayout_contentBounds);
  uint64_t result = swift_beginAccess();
  double *v9 = a1;
  v9[1] = a2;
  v9[2] = a3;
  v9[3] = a4;
  return result;
}

uint64_t (*MOSuggestionSheetMosaicLayout.contentBounds.modify())()
{
  return MOSuggestionMapSnapshotView.secondaryField.modify;
}

uint64_t MOSuggestionSheetMosaicLayout.isFullHeight.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetMosaicLayout_isFullHeight);
  swift_beginAccess();
  return *v1;
}

uint64_t MOSuggestionSheetMosaicLayout.isFullHeight.setter(char a1)
{
  unint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetMosaicLayout_isFullHeight);
  uint64_t result = swift_beginAccess();
  *unint64_t v3 = a1;
  return result;
}

uint64_t (*MOSuggestionSheetMosaicLayout.isFullHeight.modify())()
{
  return MOSuggestionMapSnapshotView.platterBlurView.modify;
}

uint64_t MOSuggestionSheetMosaicLayout.mosaicSegmentDelegate.getter()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t MOSuggestionSheetMosaicLayout.mosaicSegmentDelegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetMosaicLayout_mosaicSegmentDelegate;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*MOSuggestionSheetMosaicLayout.mosaicSegmentDelegate.modify(void *a1))(uint64_t a1, char a2)
{
  unint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetMosaicLayout_mosaicSegmentDelegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = Strong;
  v3[4] = v7;
  return MOSuggestionSheetAssetGridView.delegate.modify;
}

Swift::Void __swiftcall MOSuggestionSheetMosaicLayout.prepare()()
{
  uint64_t v1 = v0;
  uint64_t v528 = type metadata accessor for IndexPath();
  uint64_t v2 = *(void *)(v528 - 8);
  __chkstk_darwin(v528);
  v527 = (char *)&v502 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = (objc_class *)type metadata accessor for MOSuggestionSheetMosaicLayout();
  v531.receiver = v0;
  v531.super_class = v4;
  [super prepareLayout];
  id v5 = [v0 collectionView];
  if (v5)
  {
    unint64_t v6 = v5;
    uint64_t v7 = *(void (**)(void, void))((swift_isaMask & *v0) + 0xC0);
    uint64_t v8 = swift_unknownObjectRetain();
    v7(v8, &protocol witness table for MOSuggestionSheetMosaicLayout);
    uint64_t v9 = (swift_isaMask & *v0) + 128;
    v526 = *(uint64_t (**)(void))((swift_isaMask & *v0) + 0x80);
    uint64_t v525 = v9;
    id v10 = (void (*)(void, void))v526(&slice);
    void *v11 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
    v10(&slice, 0);
    id v12 = [v6 bounds];
    uint64_t v13 = (swift_isaMask & *v1) + 144;
    v524 = *(void (**)(__n128, __n128, __n128, __n128))((swift_isaMask & *v1) + 0x90);
    uint64_t v523 = v13;
    ((void (*)(id, double, double))v524)(v12, 0.0, 0.0);
    uint64_t v14 = (uint64_t)[v6 numberOfItemsInSection:0];
    [v6 bounds];
    double v16 = v15;
    (*(void (**)(uint64_t, double))((swift_isaMask & *v1) + 0xD0))(v14, v15);
    uint64_t v520 = v14;
    uint64_t v18 = v14 - 1;
    if (v14 < 1)
    {
    }
    else
    {
      uint64_t v19 = 0;
      CGFloat v518 = v17;
      CGFloat v514 = ceil(v17 * 0.5);
      CGFloat v20 = 0.0;
      CGFloat v519 = v16;
      CGFloat v515 = ceil(v16 * 0.5);
      v522 = (void (**)(char *, uint64_t))(v2 + 8);
      CGFloat v21 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
      long long v513 = xmmword_1001DA0F0;
      CGFloat v22 = 0.0;
      CGFloat v23 = 0.0;
      CGFloat v24 = 0.0;
      v517 = v6;
      uint64_t v516 = v14 - 1;
      do
      {
        switch(v18)
        {
          case 0:
            swift_bridgeObjectRelease();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>);
            CGFloat v21 = COERCE_DOUBLE(swift_allocObject());
            *(_OWORD *)(*(void *)&v21 + 16) = v513;
            *(void *)(*(void *)&v21 + 32) = 0;
            *(void *)(*(void *)&v21 + 40) = 0;
            CGFloat v26 = v518;
            *(CGFloat *)(*(void *)&v21 + 48) = v519;
            *(CGFloat *)(*(void *)&v21 + 56) = v26;
            uint64_t v27 = *(void *)(*(void *)&v21 + 16);
            if (v27) {
              goto LABEL_197;
            }
            continue;
          case 1:
            swift_bridgeObjectRelease();
            memset(&slice, 0, sizeof(slice));
            memset(&remainder, 0, sizeof(remainder));
            v534.origin.CGFloat x = 0.0;
            v534.origin.CGFloat y = 0.0;
            CGFloat v28 = v519;
            v534.size.CGFloat width = v519;
            CGFloat v29 = v518;
            v534.size.CGFloat height = v518;
            CGFloat v30 = v515;
            CGRectDivide(v534, &slice, &remainder, v515, CGRectMinXEdge);
            v529.CGFloat x = remainder.origin.y;
            v521.CGFloat x = remainder.size.height;
            CGFloat v31 = remainder.origin.x + 1.0;
            v511.CGFloat x = remainder.size.width + -1.0;
            memset(&slice, 0, sizeof(slice));
            memset(&remainder, 0, sizeof(remainder));
            v535.origin.CGFloat x = 0.0;
            v535.origin.CGFloat y = 0.0;
            v535.size.CGFloat width = v28;
            v535.size.CGFloat height = v29;
            CGRectDivide(v535, &slice, &remainder, v30, CGRectMinXEdge);
            CGPoint origin = slice.origin;
            CGFloat width = slice.size.width;
            CGFloat height = slice.size.height;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>);
            CGFloat v21 = COERCE_DOUBLE(swift_allocObject());
            CGPoint v34 = origin;
            *(_OWORD *)(*(void *)&v21 + 16) = xmmword_1001DA390;
            *(CGPoint *)(*(void *)&v21 + 32) = v34;
            *(CGFloat *)(*(void *)&v21 + 48) = width;
            *(CGFloat *)(*(void *)&v21 + 56) = height;
            v34.CGFloat x = v529.x;
            *(CGFloat *)(*(void *)&v21 + 64) = v31;
            *(CGFloat *)(*(void *)&v21 + 72) = v34.x;
            v34.CGFloat x = v521.x;
            *(CGFloat *)(*(void *)&v21 + 80) = v511.x;
            *(CGFloat *)(*(void *)&v21 + 88) = v34.x;
            uint64_t v27 = *(void *)(*(void *)&v21 + 16);
            if (!v27) {
              continue;
            }
            goto LABEL_197;
          case 2:
            swift_bridgeObjectRelease();
            memset(&slice, 0, sizeof(slice));
            memset(&remainder, 0, sizeof(remainder));
            v536.origin.CGFloat x = 0.0;
            v536.origin.CGFloat y = 0.0;
            CGFloat v35 = v519;
            v536.size.CGFloat width = v519;
            CGFloat v36 = v518;
            v536.size.CGFloat height = v518;
            CGFloat v37 = v515;
            CGRectDivide(v536, &slice, &remainder, v515, CGRectMinXEdge);
            origin.CGFloat x = remainder.origin.y;
            double v38 = remainder.size.height;
            v509.CGFloat width = remainder.origin.x + 1.0;
            v508.CGFloat width = remainder.size.width + -1.0;
            memset(&slice, 0, sizeof(slice));
            memset(&remainder, 0, sizeof(remainder));
            v537.origin.CGFloat x = 0.0;
            v537.origin.CGFloat y = 0.0;
            v537.size.CGFloat width = v35;
            v537.size.CGFloat height = v36;
            CGRectDivide(v537, &slice, &remainder, v37, CGRectMinXEdge);
            CGPoint v529 = slice.origin;
            v521.CGFloat x = slice.size.width;
            v511.CGFloat x = slice.size.height;
            memset(&slice, 0, sizeof(slice));
            memset(&remainder, 0, sizeof(remainder));
            v538.origin.CGFloat x = v509.width;
            v538.origin.CGFloat y = origin.x;
            v538.size.CGFloat width = v508.width;
            v538.size.CGFloat height = v38;
            CGRectDivide(v538, &slice, &remainder, ceil(v38 * 0.5), CGRectMinYEdge);
            CGPoint origin = slice.origin;
            v509.CGFloat width = slice.size.width;
            v508.CGFloat width = slice.size.height;
            CGFloat x = remainder.origin.x;
            CGFloat v40 = remainder.size.width;
            CGFloat v41 = remainder.origin.y + 1.0;
            CGFloat v42 = remainder.size.height + -1.0;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>);
            CGFloat v21 = COERCE_DOUBLE(swift_allocObject());
            CGPoint v43 = v529;
            *(_OWORD *)(*(void *)&v21 + 16) = xmmword_1001DA740;
            *(CGPoint *)(*(void *)&v21 + 32) = v43;
            v43.CGFloat x = v511.x;
            *(CGFloat *)(*(void *)&v21 + 48) = v521.x;
            *(CGFloat *)(*(void *)&v21 + 56) = v43.x;
            *(CGPoint *)(*(void *)&v21 + 64) = origin;
            v43.CGFloat x = v508.width;
            *(CGFloat *)(*(void *)&v21 + 80) = v509.width;
            *(CGFloat *)(*(void *)&v21 + 88) = v43.x;
            *(CGFloat *)(*(void *)&v21 + 96) = x;
            *(CGFloat *)(*(void *)&v21 + 104) = v41;
            *(CGFloat *)(*(void *)&v21 + 112) = v40;
            *(CGFloat *)(*(void *)&v21 + 120) = v42;
            uint64_t v27 = *(void *)(*(void *)&v21 + 16);
            if (!v27) {
              continue;
            }
            goto LABEL_197;
          case 3:
            swift_bridgeObjectRelease();
            memset(&slice, 0, sizeof(slice));
            memset(&remainder, 0, sizeof(remainder));
            v539.origin.CGFloat x = 0.0;
            v539.origin.CGFloat y = 0.0;
            CGFloat v44 = v519;
            v539.size.CGFloat width = v519;
            CGFloat v45 = v518;
            v539.size.CGFloat height = v518;
            CGFloat v46 = v515;
            CGRectDivide(v539, &slice, &remainder, v515, CGRectMinXEdge);
            origin.CGFloat x = remainder.origin.y;
            double v47 = remainder.size.height;
            v509.CGFloat width = remainder.origin.x + 1.0;
            v508.CGFloat width = remainder.size.width + -1.0;
            memset(&slice, 0, sizeof(slice));
            memset(&remainder, 0, sizeof(remainder));
            v540.origin.CGFloat x = 0.0;
            v540.origin.CGFloat y = 0.0;
            v540.size.CGFloat width = v44;
            v540.size.CGFloat height = v45;
            CGRectDivide(v540, &slice, &remainder, v46, CGRectMinXEdge);
            CGPoint v529 = slice.origin;
            v521.CGFloat x = slice.size.width;
            v511.CGFloat x = slice.size.height;
            memset(&slice, 0, sizeof(slice));
            memset(&remainder, 0, sizeof(remainder));
            v541.origin.CGFloat x = v509.width;
            v541.origin.CGFloat y = origin.x;
            v541.size.CGFloat width = v508.width;
            v541.size.CGFloat height = v47;
            CGRectDivide(v541, &slice, &remainder, ceil(v47 * 0.5), CGRectMinYEdge);
            CGPoint origin = slice.origin;
            v509.CGFloat width = slice.size.width;
            v508.CGFloat width = slice.size.height;
            v542.origin.CGFloat x = remainder.origin.x;
            v542.size.CGFloat width = remainder.size.width;
            v542.origin.CGFloat y = remainder.origin.y + 1.0;
            v542.size.CGFloat height = remainder.size.height + -1.0;
            CGFloat v48 = ceil(remainder.size.width * 0.5);
            memset(&slice, 0, sizeof(slice));
            memset(&remainder, 0, sizeof(remainder));
            CGRectDivide(v542, &slice, &remainder, v48, CGRectMinXEdge);
            CGPoint v507 = slice.origin;
            CGFloat v49 = slice.size.width;
            CGFloat v50 = slice.size.height;
            v506.CGFloat x = remainder.origin.y;
            v505.CGFloat x = remainder.size.height;
            CGFloat v51 = remainder.origin.x + 1.0;
            CGFloat v52 = remainder.size.width + -1.0;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>);
            CGFloat v21 = COERCE_DOUBLE(swift_allocObject());
            CGPoint v53 = v529;
            *(_OWORD *)(*(void *)&v21 + 16) = xmmword_1001DA100;
            *(CGPoint *)(*(void *)&v21 + 32) = v53;
            v53.CGFloat x = v511.x;
            *(CGFloat *)(*(void *)&v21 + 48) = v521.x;
            *(CGFloat *)(*(void *)&v21 + 56) = v53.x;
            *(CGPoint *)(*(void *)&v21 + 64) = origin;
            v53.CGFloat x = v508.width;
            *(CGFloat *)(*(void *)&v21 + 80) = v509.width;
            *(CGFloat *)(*(void *)&v21 + 88) = v53.x;
            *(CGPoint *)(*(void *)&v21 + 96) = v507;
            *(CGFloat *)(*(void *)&v21 + 112) = v49;
            *(CGFloat *)(*(void *)&v21 + 120) = v50;
            v53.CGFloat x = v506.x;
            *(CGFloat *)(*(void *)&v21 + 128) = v51;
            *(CGFloat *)(*(void *)&v21 + 136) = v53.x;
            v53.CGFloat x = v505.x;
            *(CGFloat *)(*(void *)&v21 + 144) = v52;
            *(CGFloat *)(*(void *)&v21 + 152) = v53.x;
            uint64_t v27 = *(void *)(*(void *)&v21 + 16);
            if (!v27) {
              continue;
            }
            goto LABEL_197;
          case 4:
            swift_bridgeObjectRelease();
            memset(&slice, 0, sizeof(slice));
            memset(&remainder, 0, sizeof(remainder));
            v543.origin.CGFloat x = 0.0;
            v543.origin.CGFloat y = 0.0;
            v543.size.CGFloat width = v519;
            v543.size.CGFloat height = v518;
            CGRectDivide(v543, &slice, &remainder, v515, CGRectMinXEdge);
            CGPoint v511 = slice.origin;
            CGFloat v54 = slice.size.width;
            CGFloat v55 = slice.size.height;
            v529.CGFloat x = remainder.origin.y;
            v521.CGFloat x = remainder.size.height;
            CGFloat v56 = remainder.origin.x + 1.0;
            CGFloat v57 = remainder.size.width + -1.0;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>);
            uint64_t v58 = swift_allocObject();
            CGPoint v59 = v511;
            *(_OWORD *)(v58 + 16) = v513;
            *(CGPoint *)(v58 + 32) = v59;
            *(CGFloat *)(v58 + 48) = v54;
            *(CGFloat *)(v58 + 56) = v55;
            memset(&slice, 0, sizeof(slice));
            memset(&remainder, 0, sizeof(remainder));
            v59.CGFloat x = v56;
            CGFloat v60 = v529.x;
            CGFloat v61 = v57;
            CGFloat v62 = v521.x;
            CGRectDivide(*(CGRect *)&v59.x, &slice, &remainder, ceil(v57 * 0.5), CGRectMinXEdge);
            CGRect v544 = slice;
            origin.CGFloat x = remainder.origin.y;
            double v63 = remainder.size.height;
            v507.CGFloat x = remainder.origin.x + 1.0;
            v506.CGFloat x = remainder.size.width + -1.0;
            CGFloat v64 = ceil(slice.size.height * 0.5);
            memset(&slice, 0, sizeof(slice));
            memset(&remainder, 0, sizeof(remainder));
            CGRectDivide(v544, &slice, &remainder, v64, CGRectMinYEdge);
            CGFloat v66 = slice.origin.x;
            CGFloat y = slice.origin.y;
            CGFloat v67 = slice.size.width;
            v508.CGFloat width = slice.size.height;
            v529.CGFloat x = remainder.origin.x;
            v521.CGFloat x = remainder.size.width;
            v509.CGFloat width = remainder.origin.y + 1.0;
            v511.CGFloat x = remainder.size.height + -1.0;
            memset(&slice, 0, sizeof(slice));
            memset(&remainder, 0, sizeof(remainder));
            v545.origin.CGFloat x = v507.x;
            v545.origin.CGFloat y = origin.x;
            v545.size.CGFloat width = v506.x;
            v545.size.CGFloat height = v63;
            CGRectDivide(v545, &slice, &remainder, ceil(v63 * 0.5), CGRectMinYEdge);
            CGPoint v504 = slice.origin;
            *(CGFloat *)&long long v503 = slice.size.width;
            v502.CGFloat x = slice.size.height;
            origin.CGFloat x = remainder.origin.x;
            v507.CGFloat x = remainder.size.width;
            v505.CGFloat x = remainder.origin.y + 1.0;
            v506.CGFloat x = remainder.size.height + -1.0;
            uint64_t v68 = swift_allocObject();
            *(CGFloat *)(v68 + 32) = v66;
            *(CGFloat *)(v68 + 40) = y;
            CGFloat v69 = v508.width;
            *(CGFloat *)(v68 + 48) = v67;
            *(CGFloat *)(v68 + 56) = v69;
            *(CGPoint *)(v68 + 64) = v504;
            CGFloat v70 = v502.x;
            *(void *)(v68 + 80) = v503;
            *(CGFloat *)(v68 + 88) = v70;
            CGFloat v71 = v509.width;
            *(CGFloat *)(v68 + 96) = v529.x;
            *(CGFloat *)(v68 + 104) = v71;
            CGFloat v72 = v511.x;
            *(CGFloat *)(v68 + 112) = v521.x;
            *(CGFloat *)(v68 + 120) = v72;
            CGFloat v73 = v505.x;
            *(CGFloat *)(v68 + 128) = origin.x;
            *(CGFloat *)(v68 + 136) = v73;
            CGFloat v74 = v506.x;
            *(CGFloat *)(v68 + 144) = v507.x;
            *(CGFloat *)(v68 + 152) = v74;
            *(double *)&id v75 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)1, 2, 1, (void *)v58));
            *((void *)v75 + 2) = 2;
            v75[8] = v66;
            v75[9] = y;
            v75[10] = v67;
            v75[11] = v69;
            CGPoint v76 = *(CGPoint *)(v68 + 64);
            CGPoint v77 = *(CGPoint *)(v68 + 80);
            unint64_t v78 = *((void *)v75 + 3);
            if (v78 < 6)
            {
              CGPoint v529 = *(CGPoint *)(v68 + 64);
              CGPoint v521 = v77;
              *(double *)&v471 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v78 > 1), 3, 1, v75));
              CGPoint v77 = v521;
              CGPoint v76 = v529;
              id v75 = v471;
              unint64_t v78 = *((void *)v471 + 3);
            }
            *((void *)v75 + 2) = 3;
            *((CGPoint *)v75 + 6) = v76;
            *((CGPoint *)v75 + 7) = v77;
            CGPoint v79 = *(CGPoint *)(v68 + 96);
            CGPoint v80 = *(CGPoint *)(v68 + 112);
            if (v78 <= 7)
            {
              CGPoint v529 = *(CGPoint *)(v68 + 96);
              CGPoint v521 = v80;
              *(double *)&v472 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v78 > 1), 4, 1, v75));
              CGPoint v80 = v521;
              CGPoint v79 = v529;
              id v75 = v472;
              unint64_t v78 = *((void *)v472 + 3);
            }
            *((void *)v75 + 2) = 4;
            *((CGPoint *)v75 + 8) = v79;
            *((CGPoint *)v75 + 9) = v80;
            CGPoint v81 = *(CGPoint *)(v68 + 128);
            CGPoint v82 = *(CGPoint *)(v68 + 144);
            if (v78 <= 9)
            {
              CGPoint v529 = *(CGPoint *)(v68 + 128);
              CGPoint v521 = v82;
              *(double *)&v473 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v78 > 1), 5, 1, v75));
              CGPoint v82 = v521;
              CGPoint v81 = v529;
              id v75 = v473;
            }
            *((void *)v75 + 2) = 5;
            *((CGPoint *)v75 + 10) = v81;
            *((CGPoint *)v75 + 11) = v82;
            uint64_t v83 = v75;
            swift_setDeallocating();
            swift_deallocClassInstance();
            CGFloat v21 = *(double *)&v83;
            uint64_t v27 = *((void *)v83 + 2);
            if (!v27) {
              continue;
            }
            goto LABEL_197;
          case 5:
            CGFloat v84 = v21;
            memset(&slice, 0, sizeof(slice));
            memset(&remainder, 0, sizeof(remainder));
            v546.origin.CGFloat x = 0.0;
            v546.origin.CGFloat y = 0.0;
            v546.size.CGFloat width = v519;
            v546.size.CGFloat height = v518;
            CGRectDivide(v546, &slice, &remainder, v514, CGRectMinYEdge);
            CGFloat v85 = remainder.origin.x;
            double v86 = remainder.origin.y;
            CGFloat v87 = remainder.size.width;
            double v88 = remainder.size.height;
            id v89 = (CGPoint *)specialized MOSuggestionSheetMosaicLayout.firstRowRects(segmentFrame:)(slice.origin.x, slice.origin.y, slice.size.width, slice.size.height);
            CGFloat v90 = v89[1].x;
            if (v90 == 0.0)
            {
              uint64_t v91 = v19;
              CGFloat v92 = v84;
            }
            else
            {
              uint64_t v91 = v19;
              if (swift_isUniquelyReferenced_nonNull_native()) {
                CGFloat v92 = v84;
              }
              else {
                CGFloat v92 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(*(void *)&v84 + 16) + 1, 1, *(void **)&v84));
              }
              unint64_t v93 = *(void *)(*(void *)&v92 + 16);
              uint64_t v94 = 32 * v93;
              id v95 = v89 + 3;
              do
              {
                CGPoint v96 = v95[-1];
                CGPoint v97 = *v95;
                unint64_t v98 = *(void *)(*(void *)&v92 + 24);
                unint64_t v99 = v93 + 1;
                if (v93 >= v98 >> 1)
                {
                  CGPoint v529 = v95[-1];
                  CGPoint v521 = v97;
                  double v101 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v98 > 1), v93 + 1, 1, *(void **)&v92));
                  CGPoint v97 = v521;
                  CGPoint v96 = v529;
                  CGFloat v92 = v101;
                }
                *(void *)(*(void *)&v92 + 16) = v99;
                id v100 = (CGPoint *)(*(void *)&v92 + v94);
                v100[2] = v96;
                v100[3] = v97;
                v94 += 32;
                v95 += 2;
                unint64_t v93 = v99;
                --*(void *)&v90;
              }
              while (v90 != 0.0);
            }
            double v214 = v92;
            swift_bridgeObjectRelease();
            if (swift_isUniquelyReferenced_nonNull_native()) {
              CGFloat v21 = v214;
            }
            else {
              CGFloat v21 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(*(void *)&v214 + 16) + 1, 1, *(void **)&v214));
            }
            unint64_t v216 = *(void *)(*(void *)&v21 + 16);
            unint64_t v215 = *(void *)(*(void *)&v21 + 24);
            uint64_t v19 = v91;
            if (v216 >= v215 >> 1) {
              CGFloat v21 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v215 > 1), v216 + 1, 1, *(void **)&v21));
            }
            *(void *)(*(void *)&v21 + 16) = v216 + 1;
            v217 = (CGFloat *)(*(void *)&v21 + 32 * v216);
            v217[4] = v85;
            v217[5] = v86 + 1.0;
            v217[6] = v87;
            v217[7] = v88 + -1.0;
            uint64_t v27 = *(void *)(*(void *)&v21 + 16);
            if (!v27) {
              continue;
            }
            goto LABEL_197;
          case 6:
            CGFloat v102 = v21;
            memset(&slice, 0, sizeof(slice));
            memset(&remainder, 0, sizeof(remainder));
            v547.origin.CGFloat x = 0.0;
            v547.origin.CGFloat y = 0.0;
            v547.size.CGFloat width = v519;
            v547.size.CGFloat height = v518;
            CGRectDivide(v547, &slice, &remainder, v514, CGRectMinYEdge);
            CGFloat v103 = remainder.origin.x;
            double v104 = remainder.origin.y;
            double v105 = remainder.size.width;
            double v106 = remainder.size.height;
            id v107 = (CGPoint *)specialized MOSuggestionSheetMosaicLayout.firstRowRects(segmentFrame:)(slice.origin.x, slice.origin.y, slice.size.width, slice.size.height);
            CGFloat v108 = v107[1].x;
            if (v108 == 0.0)
            {
              uint64_t v109 = v19;
              CGFloat v110 = v102;
            }
            else
            {
              uint64_t v109 = v19;
              if (swift_isUniquelyReferenced_nonNull_native()) {
                CGFloat v110 = v102;
              }
              else {
                CGFloat v110 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(*(void *)&v102 + 16) + 1, 1, *(void **)&v102));
              }
              unint64_t v111 = *(void *)(*(void *)&v110 + 16);
              uint64_t v112 = 32 * v111;
              id v113 = v107 + 3;
              do
              {
                CGPoint v114 = v113[-1];
                CGPoint v115 = *v113;
                unint64_t v116 = *(void *)(*(void *)&v110 + 24);
                unint64_t v117 = v111 + 1;
                if (v111 >= v116 >> 1)
                {
                  CGPoint v529 = v113[-1];
                  CGPoint v521 = v115;
                  double v119 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v116 > 1), v111 + 1, 1, *(void **)&v110));
                  CGPoint v115 = v521;
                  CGPoint v114 = v529;
                  CGFloat v110 = v119;
                }
                *(void *)(*(void *)&v110 + 16) = v117;
                id v118 = (CGPoint *)(*(void *)&v110 + v112);
                v118[2] = v114;
                v118[3] = v115;
                v112 += 32;
                v113 += 2;
                unint64_t v111 = v117;
                --*(void *)&v108;
              }
              while (v108 != 0.0);
            }
            double v218 = v110;
            swift_bridgeObjectRelease();
            memset(&slice, 0, sizeof(slice));
            memset(&remainder, 0, sizeof(remainder));
            v549.origin.CGFloat x = v103;
            v549.origin.CGFloat y = v104 + 1.0;
            v549.size.CGFloat width = v105;
            v549.size.CGFloat height = v106 + -1.0;
            CGRectDivide(v549, &slice, &remainder, ceil(v105 * 0.5), CGRectMinXEdge);
            CGFloat v219 = slice.origin.x;
            CGPoint v529 = *(CGPoint *)&slice.origin.y;
            CGFloat v220 = slice.size.height;
            v521.CGFloat x = remainder.origin.x;
            CGFloat v221 = remainder.origin.y;
            CGFloat v222 = remainder.size.height;
            v511.CGFloat x = remainder.size.width;
            if (swift_isUniquelyReferenced_nonNull_native()) {
              CGFloat v21 = v218;
            }
            else {
              CGFloat v21 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(*(void *)&v218 + 16) + 1, 1, *(void **)&v218));
            }
            unint64_t v224 = *(void *)(*(void *)&v21 + 16);
            unint64_t v223 = *(void *)(*(void *)&v21 + 24);
            int64_t v225 = v223 >> 1;
            unint64_t v226 = v224 + 1;
            if (v223 >> 1 <= v224)
            {
              CGFloat v21 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v223 > 1), v224 + 1, 1, *(void **)&v21));
              unint64_t v223 = *(void *)(*(void *)&v21 + 24);
              int64_t v225 = v223 >> 1;
            }
            *(void *)(*(void *)&v21 + 16) = v226;
            id v227 = (void *)(*(void *)&v21 + 32 * v224);
            *((CGFloat *)v227 + 4) = v219;
            *(CGPoint *)(v227 + 5) = v529;
            *((CGFloat *)v227 + 7) = v220;
            if (v225 < (uint64_t)(v224 + 2)) {
              CGFloat v21 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v223 > 1), v224 + 2, 1, *(void **)&v21));
            }
            CGFloat v228 = v521.x + 1.0;
            CGFloat v229 = v511.x + -1.0;
            *(void *)(*(void *)&v21 + 16) = v224 + 2;
            id v230 = (double *)(*(void *)&v21 + 32 * v226);
            v230[4] = v228;
            v230[5] = v221;
            v230[6] = v229;
            goto LABEL_123;
          case 7:
            CGFloat v120 = v21;
            memset(&slice, 0, sizeof(slice));
            memset(&remainder, 0, sizeof(remainder));
            v548.origin.CGFloat x = 0.0;
            v548.origin.CGFloat y = 0.0;
            v548.size.CGFloat width = v519;
            v548.size.CGFloat height = v518;
            CGRectDivide(v548, &slice, &remainder, v514, CGRectMinYEdge);
            CGFloat v121 = remainder.origin.x;
            double v122 = remainder.origin.y;
            double v123 = remainder.size.width;
            double v124 = remainder.size.height;
            id v125 = (CGPoint *)specialized MOSuggestionSheetMosaicLayout.firstRowRects(segmentFrame:)(slice.origin.x, slice.origin.y, slice.size.width, slice.size.height);
            CGFloat v126 = v125[1].x;
            v529.CGFloat x = v121;
            if (v126 == 0.0)
            {
              uint64_t v109 = v19;
              CGFloat v127 = v120;
            }
            else
            {
              uint64_t v109 = v19;
              if (swift_isUniquelyReferenced_nonNull_native()) {
                CGFloat v127 = v120;
              }
              else {
                CGFloat v127 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(*(void *)&v120 + 16) + 1, 1, *(void **)&v120));
              }
              unint64_t v128 = *(void *)(*(void *)&v127 + 16);
              uint64_t v129 = 32 * v128;
              id v130 = v125 + 3;
              do
              {
                CGPoint v131 = v130[-1];
                CGPoint v132 = *v130;
                unint64_t v133 = *(void *)(*(void *)&v127 + 24);
                unint64_t v134 = v128 + 1;
                if (v128 >= v133 >> 1)
                {
                  CGPoint v521 = v130[-1];
                  CGPoint v511 = v132;
                  double v136 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v133 > 1), v128 + 1, 1, *(void **)&v127));
                  CGPoint v132 = v511;
                  CGPoint v131 = v521;
                  CGFloat v127 = v136;
                }
                *(void *)(*(void *)&v127 + 16) = v134;
                id v135 = (CGPoint *)(*(void *)&v127 + v129);
                v135[2] = v131;
                v135[3] = v132;
                v129 += 32;
                v130 += 2;
                unint64_t v128 = v134;
                --*(void *)&v126;
              }
              while (v126 != 0.0);
            }
            double v231 = v127;
            swift_bridgeObjectRelease();
            memset(&slice, 0, sizeof(slice));
            memset(&remainder, 0, sizeof(remainder));
            v550.origin.CGFloat x = v529.x;
            v550.origin.CGFloat y = v122 + 1.0;
            v550.size.CGFloat width = v123;
            v550.size.CGFloat height = v124 + -1.0;
            CGRectDivide(v550, &slice, &remainder, ceil(v123 * 0.5), CGRectMinXEdge);
            CGRect v551 = slice;
            v511.CGFloat x = remainder.origin.x;
            v529.CGFloat x = remainder.origin.y;
            origin.CGFloat x = remainder.size.width;
            v521.CGFloat x = remainder.size.height;
            CGFloat v232 = ceil(slice.size.height * 0.5);
            memset(&slice, 0, sizeof(slice));
            memset(&remainder, 0, sizeof(remainder));
            CGRectDivide(v551, &slice, &remainder, v232, CGRectMinYEdge);
            CGFloat v233 = slice.origin.x;
            CGPoint v507 = *(CGPoint *)&slice.origin.y;
            CGFloat v234 = slice.size.height;
            v509.CGFloat width = remainder.origin.x;
            double v235 = remainder.origin.y;
            double v236 = remainder.size.height;
            v508.CGFloat width = remainder.size.width;
            if (swift_isUniquelyReferenced_nonNull_native()) {
              CGFloat v21 = v231;
            }
            else {
              CGFloat v21 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(*(void *)&v231 + 16) + 1, 1, *(void **)&v231));
            }
            unint64_t v238 = *(void *)(*(void *)&v21 + 16);
            unint64_t v237 = *(void *)(*(void *)&v21 + 24);
            int64_t v239 = v237 >> 1;
            unint64_t v240 = v238 + 1;
            if (v237 >> 1 <= v238)
            {
              CGFloat v21 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v237 > 1), v238 + 1, 1, *(void **)&v21));
              unint64_t v237 = *(void *)(*(void *)&v21 + 24);
              int64_t v239 = v237 >> 1;
            }
            *(void *)(*(void *)&v21 + 16) = v240;
            id v241 = (void *)(*(void *)&v21 + 32 * v238);
            *((CGFloat *)v241 + 4) = v233;
            *(CGPoint *)(v241 + 5) = v507;
            *((CGFloat *)v241 + 7) = v234;
            unint64_t v242 = v238 + 2;
            if (v239 < (uint64_t)(v238 + 2)) {
              CGFloat v21 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v237 > 1), v238 + 2, 1, *(void **)&v21));
            }
            *(void *)(*(void *)&v21 + 16) = v242;
            id v243 = (double *)(*(void *)&v21 + 32 * v240);
            v243[4] = v509.width;
            v243[5] = v235 + 1.0;
            v243[6] = v508.width;
            v243[7] = v236 + -1.0;
            unint64_t v244 = *(void *)(*(void *)&v21 + 24);
            if ((uint64_t)(v238 + 3) > (uint64_t)(v244 >> 1)) {
              CGFloat v21 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v244 > 1), v238 + 3, 1, *(void **)&v21));
            }
            CGFloat v245 = v511.x + 1.0;
            CGFloat v246 = origin.x + -1.0;
            *(void *)(*(void *)&v21 + 16) = v238 + 3;
            id v247 = (CGFloat *)(*(void *)&v21 + 32 * v242);
            CGFloat v248 = v529.x;
            v247[4] = v245;
            v247[5] = v248;
            CGFloat v249 = v521.x;
            v247[6] = v246;
            v247[7] = v249;
            goto LABEL_124;
          case 8:
            CGFloat v137 = v21;
            CGRect.dividedIntegral(fraction:from:)(CGRectMinYEdge, (uint64_t)&slice, 0.5, 0.0, 0.0, v519, v518);
            long long v138 = *(_OWORD *)v533;
            long long v139 = *(_OWORD *)&v533[16];
            id v140 = (CGPoint *)specialized MOSuggestionSheetMosaicLayout.firstRowRects(segmentFrame:)(slice.origin.x, slice.origin.y, slice.size.width, slice.size.height);
            CGFloat v141 = v140[1].x;
            if (v141 == 0.0)
            {
              uint64_t v109 = v19;
              CGFloat v142 = v137;
            }
            else
            {
              uint64_t v109 = v19;
              if (swift_isUniquelyReferenced_nonNull_native()) {
                CGFloat v142 = v137;
              }
              else {
                CGFloat v142 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(*(void *)&v137 + 16) + 1, 1, *(void **)&v137));
              }
              unint64_t v143 = *(void *)(*(void *)&v142 + 16);
              uint64_t v144 = 32 * v143;
              id v145 = v140 + 3;
              do
              {
                CGPoint v146 = v145[-1];
                CGPoint v147 = *v145;
                unint64_t v148 = *(void *)(*(void *)&v142 + 24);
                unint64_t v149 = v143 + 1;
                if (v143 >= v148 >> 1)
                {
                  CGPoint v529 = v145[-1];
                  CGPoint v521 = v147;
                  double v151 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v148 > 1), v143 + 1, 1, *(void **)&v142));
                  CGPoint v147 = v521;
                  CGPoint v146 = v529;
                  CGFloat v142 = v151;
                }
                *(void *)(*(void *)&v142 + 16) = v149;
                id v150 = (CGPoint *)(*(void *)&v142 + v144);
                v150[2] = v146;
                v150[3] = v147;
                v144 += 32;
                v145 += 2;
                unint64_t v143 = v149;
                --*(void *)&v141;
              }
              while (v141 != 0.0);
            }
            double v250 = v142;
            swift_bridgeObjectRelease();
            CGRect.dividedIntegral(fraction:from:)(CGRectMinXEdge, (uint64_t)&slice, 0.5, *(CGFloat *)&v138, *((CGFloat *)&v138 + 1), *(CGFloat *)&v139, *((CGFloat *)&v139 + 1));
            v506.CGFloat x = *(CGFloat *)&v533[8];
            v507.CGFloat x = *(CGFloat *)v533;
            v504.CGFloat x = *(CGFloat *)&v533[24];
            v505.CGFloat x = *(CGFloat *)&v533[16];
            CGRect.dividedIntegral(fraction:from:)(CGRectMinYEdge, (uint64_t)&slice, 0.5, slice.origin.x, slice.origin.y, slice.size.width, slice.size.height);
            CGFloat v251 = slice.origin.x;
            CGFloat v252 = slice.origin.y;
            CGFloat v253 = slice.size.width;
            CGFloat v254 = slice.size.height;
            CGRect.dividedIntegral(fraction:from:)(CGRectMinXEdge, (uint64_t)&slice, 0.5, *(CGFloat *)v533, *(CGFloat *)&v533[8], *(CGFloat *)&v533[16], *(CGFloat *)&v533[24]);
            origin.CGFloat x = slice.origin.x;
            CGSize v509 = *(CGSize *)&slice.origin.y;
            v508.CGFloat width = slice.size.height;
            v529.CGFloat x = *(CGFloat *)v533;
            CGPoint v521 = *(CGPoint *)&v533[8];
            v511.CGFloat x = *(CGFloat *)&v533[24];
            if (swift_isUniquelyReferenced_nonNull_native()) {
              CGFloat v21 = v250;
            }
            else {
              CGFloat v21 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(*(void *)&v250 + 16) + 1, 1, *(void **)&v250));
            }
            unint64_t v256 = *(void *)(*(void *)&v21 + 16);
            unint64_t v255 = *(void *)(*(void *)&v21 + 24);
            int64_t v257 = v255 >> 1;
            unint64_t v258 = v256 + 1;
            if (v255 >> 1 <= v256)
            {
              CGFloat v21 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v255 > 1), v256 + 1, 1, *(void **)&v21));
              unint64_t v255 = *(void *)(*(void *)&v21 + 24);
              int64_t v257 = v255 >> 1;
            }
            *(void *)(*(void *)&v21 + 16) = v258;
            id v259 = (CGFloat *)(*(void *)&v21 + 32 * v256);
            v259[4] = v251;
            v259[5] = v252;
            v259[6] = v253;
            v259[7] = v254;
            unint64_t v260 = v256 + 2;
            if (v257 < (uint64_t)(v256 + 2)) {
              CGFloat v21 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v255 > 1), v256 + 2, 1, *(void **)&v21));
            }
            CGFloat v261 = v507.x;
            CGFloat v262 = v506.x;
            CGFloat v263 = v505.x;
            CGFloat v222 = v504.x;
            *(void *)(*(void *)&v21 + 16) = v260;
            id v264 = (void *)(*(void *)&v21 + 32 * v258);
            v264[4] = *(void *)&origin.x;
            *(CGSize *)(v264 + 5) = v509;
            v264[7] = *(void *)&v508.width;
            unint64_t v265 = *(void *)(*(void *)&v21 + 24);
            unint64_t v266 = v256 + 3;
            if ((uint64_t)(v256 + 3) > (uint64_t)(v265 >> 1)) {
              CGFloat v21 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v265 > 1), v256 + 3, 1, *(void **)&v21));
            }
            *(void *)(*(void *)&v21 + 16) = v266;
            id v267 = (void *)(*(void *)&v21 + 32 * v260);
            v267[4] = *(void *)&v529.x;
            *(CGPoint *)(v267 + 5) = v521;
            v267[7] = *(void *)&v511.x;
            unint64_t v268 = *(void *)(*(void *)&v21 + 24);
            if ((uint64_t)(v256 + 4) > (uint64_t)(v268 >> 1)) {
              CGFloat v21 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v268 > 1), v256 + 4, 1, *(void **)&v21));
            }
            *(void *)(*(void *)&v21 + 16) = v256 + 4;
            id v230 = (double *)(*(void *)&v21 + 32 * v266);
            v230[4] = v261;
            v230[5] = v262;
            v230[6] = v263;
LABEL_123:
            v230[7] = v222;
LABEL_124:
            uint64_t v19 = v109;
            uint64_t v27 = *(void *)(*(void *)&v21 + 16);
            if (!v27) {
              continue;
            }
            goto LABEL_197;
          case 9:
            CGFloat v152 = v21;
            CGRect.dividedIntegral(fraction:from:)(CGRectMinYEdge, (uint64_t)&slice, 0.5, 0.0, 0.0, v519, v518);
            long long v153 = *(_OWORD *)v533;
            long long v154 = *(_OWORD *)&v533[16];
            id v155 = (CGPoint *)specialized MOSuggestionSheetMosaicLayout.firstRowRects(segmentFrame:)(slice.origin.x, slice.origin.y, slice.size.width, slice.size.height);
            CGFloat v156 = v155[1].x;
            if (v156 == 0.0)
            {
              uint64_t v157 = v19;
              CGFloat v158 = v152;
            }
            else
            {
              uint64_t v157 = v19;
              if (swift_isUniquelyReferenced_nonNull_native()) {
                CGFloat v158 = v152;
              }
              else {
                CGFloat v158 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(*(void *)&v152 + 16) + 1, 1, *(void **)&v152));
              }
              unint64_t v159 = *(void *)(*(void *)&v158 + 16);
              uint64_t v160 = 32 * v159;
              id v161 = v155 + 3;
              do
              {
                CGPoint v162 = v161[-1];
                CGPoint v163 = *v161;
                unint64_t v164 = *(void *)(*(void *)&v158 + 24);
                unint64_t v165 = v159 + 1;
                if (v159 >= v164 >> 1)
                {
                  CGPoint v529 = v161[-1];
                  CGPoint v521 = v163;
                  double v167 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v164 > 1), v159 + 1, 1, *(void **)&v158));
                  CGPoint v163 = v521;
                  CGPoint v162 = v529;
                  CGFloat v158 = v167;
                }
                *(void *)(*(void *)&v158 + 16) = v165;
                id v166 = (CGPoint *)(*(void *)&v158 + v160);
                v166[2] = v162;
                v166[3] = v163;
                v160 += 32;
                v161 += 2;
                unint64_t v159 = v165;
                --*(void *)&v156;
              }
              while (v156 != 0.0);
            }
            CGFloat v269 = v158;
            swift_bridgeObjectRelease();
            CGRect.dividedIntegral(fraction:from:)(CGRectMinXEdge, (uint64_t)&slice, 0.5, *(CGFloat *)&v153, *((CGFloat *)&v153 + 1), *(CGFloat *)&v154, *((CGFloat *)&v154 + 1));
            v521.CGFloat x = *(CGFloat *)&v533[8];
            v529.CGFloat x = *(CGFloat *)v533;
            origin.CGFloat x = *(CGFloat *)&v533[24];
            v511.CGFloat x = *(CGFloat *)&v533[16];
            CGRect.dividedIntegral(fraction:from:)(CGRectMinXEdge, (uint64_t)&slice, 0.5, slice.origin.x, slice.origin.y, slice.size.width, slice.size.height);
            long long v270 = *(_OWORD *)v533;
            long long v271 = *(_OWORD *)&v533[16];
            CGRect.dividedIntegral(fraction:from:)(CGRectMinYEdge, (uint64_t)&slice, 0.5, slice.origin.x, slice.origin.y, slice.size.width, slice.size.height);
            CGPoint v506 = slice.origin;
            v505.CGFloat x = slice.size.width;
            v504.CGFloat x = slice.size.height;
            CGSize v509 = *(CGSize *)v533;
            v507.CGFloat x = *(CGFloat *)&v533[24];
            v508.CGFloat width = *(CGFloat *)&v533[16];
            CGRect.dividedIntegral(fraction:from:)(CGRectMinYEdge, (uint64_t)&slice, 0.5, *(CGFloat *)&v270, *((CGFloat *)&v270 + 1), *(CGFloat *)&v271, *((CGFloat *)&v271 + 1));
            CGPoint v502 = slice.origin;
            CGFloat v272 = slice.size.width;
            CGFloat v273 = slice.size.height;
            long long v503 = *(_OWORD *)v533;
            long long v274 = *(_OWORD *)&v533[16];
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>);
            uint64_t v275 = swift_allocObject();
            *(CGPoint *)(v275 + 32) = v506;
            CGFloat v276 = v504.x;
            *(CGFloat *)(v275 + 48) = v505.x;
            *(CGFloat *)(v275 + 56) = v276;
            *(CGPoint *)(v275 + 64) = v502;
            *(CGFloat *)(v275 + 80) = v272;
            *(CGFloat *)(v275 + 88) = v273;
            *(CGSize *)(v275 + 96) = v509;
            CGFloat v277 = v507.x;
            *(CGFloat *)(v275 + 112) = v508.width;
            *(CGFloat *)(v275 + 120) = v277;
            *(_OWORD *)(v275 + 128) = v503;
            *(_OWORD *)(v275 + 144) = v274;
            if (swift_isUniquelyReferenced_nonNull_native()) {
              double v278 = v269;
            }
            else {
              double v278 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(*(void *)&v269 + 16) + 1, 1, *(void **)&v269));
            }
            CGSize v279 = *(CGSize *)(v275 + 32);
            CGSize v280 = *(CGSize *)(v275 + 48);
            unint64_t v282 = *(void *)(*(void *)&v278 + 16);
            unint64_t v281 = *(void *)(*(void *)&v278 + 24);
            int64_t v283 = v281 >> 1;
            unint64_t v284 = v282 + 1;
            if (v281 >> 1 <= v282)
            {
              CGSize v509 = *(CGSize *)(v275 + 32);
              CGSize v508 = v280;
              double v474 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v281 > 1), v282 + 1, 1, *(void **)&v278));
              CGSize v280 = v508;
              CGSize v279 = v509;
              double v278 = v474;
              unint64_t v281 = *(void *)(*(void *)&v474 + 24);
              int64_t v283 = v281 >> 1;
            }
            *(void *)(*(void *)&v278 + 16) = v284;
            uint64_t v285 = (CGSize *)(*(void *)&v278 + 32 * v282);
            v285[2] = v279;
            v285[3] = v280;
            CGSize v286 = *(CGSize *)(v275 + 64);
            CGSize v287 = *(CGSize *)(v275 + 80);
            unint64_t v288 = v282 + 2;
            if (v283 < (uint64_t)(v282 + 2))
            {
              CGSize v509 = *(CGSize *)(v275 + 64);
              CGSize v508 = v287;
              double v475 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v281 > 1), v282 + 2, 1, *(void **)&v278));
              CGSize v287 = v508;
              CGSize v286 = v509;
              double v278 = v475;
            }
            *(void *)(*(void *)&v278 + 16) = v288;
            uint64_t v289 = (CGSize *)(*(void *)&v278 + 32 * v284);
            v289[2] = v286;
            v289[3] = v287;
            CGSize v290 = *(CGSize *)(v275 + 96);
            CGSize v291 = *(CGSize *)(v275 + 112);
            unint64_t v292 = *(void *)(*(void *)&v278 + 24);
            unint64_t v293 = v282 + 3;
            if ((uint64_t)(v282 + 3) > (uint64_t)(v292 >> 1))
            {
              CGSize v509 = *(CGSize *)(v275 + 96);
              CGSize v508 = v291;
              double v476 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v292 > 1), v282 + 3, 1, *(void **)&v278));
              CGSize v291 = v508;
              CGSize v290 = v509;
              double v278 = v476;
            }
            *(void *)(*(void *)&v278 + 16) = v293;
            v294 = (CGSize *)(*(void *)&v278 + 32 * v288);
            v294[2] = v290;
            v294[3] = v291;
            CGSize v295 = *(CGSize *)(v275 + 128);
            CGSize v296 = *(CGSize *)(v275 + 144);
            unint64_t v297 = *(void *)(*(void *)&v278 + 24);
            if ((uint64_t)(v282 + 4) > (uint64_t)(v297 >> 1))
            {
              CGSize v509 = *(CGSize *)(v275 + 128);
              CGSize v508 = v296;
              double v477 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v297 > 1), v282 + 4, 1, *(void **)&v278));
              CGSize v296 = v508;
              CGSize v295 = v509;
              double v278 = v477;
            }
            *(void *)(*(void *)&v278 + 16) = v282 + 4;
            v298 = (CGSize *)(*(void *)&v278 + 32 * v293);
            v298[2] = v295;
            v298[3] = v296;
            double v299 = v278;
            swift_setDeallocating();
            swift_deallocClassInstance();
            CGFloat v21 = v299;
            unint64_t v300 = *(void *)(*(void *)&v299 + 16);
            unint64_t v301 = *(void *)(*(void *)&v21 + 24);
            if (v300 >= v301 >> 1) {
              CGFloat v21 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v301 > 1), v300 + 1, 1, *(void **)&v21));
            }
            uint64_t v19 = v157;
            *(void *)(*(void *)&v21 + 16) = v300 + 1;
            v302 = (CGFloat *)(*(void *)&v21 + 32 * v300);
            CGFloat v303 = v521.x;
            v302[4] = v529.x;
            v302[5] = v303;
            CGFloat v304 = origin.x;
            v302[6] = v511.x;
            v302[7] = v304;
            uint64_t v27 = *(void *)(*(void *)&v21 + 16);
            if (!v27) {
              continue;
            }
            goto LABEL_197;
          case 10:
            CGFloat v168 = v21;
            CGRect.dividedIntegral(fraction:from:)(CGRectMinYEdge, (uint64_t)&slice, 0.5, 0.0, 0.0, v519, v518);
            long long v169 = *(_OWORD *)v533;
            long long v170 = *(_OWORD *)&v533[16];
            id v171 = (CGPoint *)specialized MOSuggestionSheetMosaicLayout.firstRowRects(segmentFrame:)(slice.origin.x, slice.origin.y, slice.size.width, slice.size.height);
            CGFloat v172 = v171[1].x;
            if (v172 == 0.0)
            {
              uint64_t v173 = v19;
              CGFloat v174 = v168;
            }
            else
            {
              uint64_t v173 = v19;
              if (swift_isUniquelyReferenced_nonNull_native()) {
                CGFloat v174 = v168;
              }
              else {
                CGFloat v174 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(*(void *)&v168 + 16) + 1, 1, *(void **)&v168));
              }
              unint64_t v175 = *(void *)(*(void *)&v174 + 16);
              uint64_t v176 = 32 * v175;
              id v177 = v171 + 3;
              do
              {
                CGPoint v178 = v177[-1];
                CGPoint v179 = *v177;
                unint64_t v180 = *(void *)(*(void *)&v174 + 24);
                unint64_t v181 = v175 + 1;
                if (v175 >= v180 >> 1)
                {
                  CGPoint v529 = v177[-1];
                  CGPoint v521 = v179;
                  double v183 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v180 > 1), v175 + 1, 1, *(void **)&v174));
                  CGPoint v179 = v521;
                  CGPoint v178 = v529;
                  CGFloat v174 = v183;
                }
                *(void *)(*(void *)&v174 + 16) = v181;
                v182 = (CGPoint *)(*(void *)&v174 + v176);
                v182[2] = v178;
                v182[3] = v179;
                v176 += 32;
                v177 += 2;
                unint64_t v175 = v181;
                --*(void *)&v172;
              }
              while (v172 != 0.0);
            }
            CGFloat v305 = v174;
            swift_bridgeObjectRelease();
            CGRect.dividedIntegral(fraction:from:)(CGRectMinXEdge, (uint64_t)&slice, 0.5, *(CGFloat *)&v169, *((CGFloat *)&v169 + 1), *(CGFloat *)&v170, *((CGFloat *)&v170 + 1));
            v521.CGFloat x = *(CGFloat *)&v533[8];
            v529.CGFloat x = *(CGFloat *)v533;
            origin.CGFloat x = *(CGFloat *)&v533[24];
            v511.CGFloat x = *(CGFloat *)&v533[16];
            CGRect.dividedIntegral(fraction:from:)(CGRectMinXEdge, (uint64_t)&slice, 0.5, slice.origin.x, slice.origin.y, slice.size.width, slice.size.height);
            long long v306 = *(_OWORD *)v533;
            long long v307 = *(_OWORD *)&v533[16];
            CGRect.dividedIntegral(fraction:from:)(CGRectMinYEdge, (uint64_t)&slice, 0.5, slice.origin.x, slice.origin.y, slice.size.width, slice.size.height);
            CGPoint v506 = slice.origin;
            v505.CGFloat x = slice.size.width;
            v504.CGFloat x = slice.size.height;
            CGSize v509 = *(CGSize *)v533;
            v507.CGFloat x = *(CGFloat *)&v533[24];
            v508.CGFloat width = *(CGFloat *)&v533[16];
            CGRect.dividedIntegral(fraction:from:)(CGRectMinYEdge, (uint64_t)&slice, 0.5, *(CGFloat *)&v306, *((CGFloat *)&v306 + 1), *(CGFloat *)&v307, *((CGFloat *)&v307 + 1));
            CGPoint v502 = slice.origin;
            CGFloat v308 = slice.size.width;
            CGFloat v309 = slice.size.height;
            long long v503 = *(_OWORD *)v533;
            long long v310 = *(_OWORD *)&v533[16];
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>);
            uint64_t v311 = swift_allocObject();
            *(CGPoint *)(v311 + 32) = v506;
            CGFloat v312 = v504.x;
            *(CGFloat *)(v311 + 48) = v505.x;
            *(CGFloat *)(v311 + 56) = v312;
            *(CGPoint *)(v311 + 64) = v502;
            *(CGFloat *)(v311 + 80) = v308;
            *(CGFloat *)(v311 + 88) = v309;
            *(CGSize *)(v311 + 96) = v509;
            CGFloat v313 = v507.x;
            *(CGFloat *)(v311 + 112) = v508.width;
            *(CGFloat *)(v311 + 120) = v313;
            *(_OWORD *)(v311 + 128) = v503;
            *(_OWORD *)(v311 + 144) = v310;
            if (swift_isUniquelyReferenced_nonNull_native()) {
              double v314 = v305;
            }
            else {
              double v314 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(*(void *)&v305 + 16) + 1, 1, *(void **)&v305));
            }
            CGSize v315 = *(CGSize *)(v311 + 32);
            CGSize v316 = *(CGSize *)(v311 + 48);
            unint64_t v318 = *(void *)(*(void *)&v314 + 16);
            unint64_t v317 = *(void *)(*(void *)&v314 + 24);
            int64_t v319 = v317 >> 1;
            unint64_t v320 = v318 + 1;
            if (v317 >> 1 <= v318)
            {
              CGSize v509 = *(CGSize *)(v311 + 32);
              CGSize v508 = v316;
              double v478 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v317 > 1), v318 + 1, 1, *(void **)&v314));
              CGSize v316 = v508;
              CGSize v315 = v509;
              double v314 = v478;
              unint64_t v317 = *(void *)(*(void *)&v478 + 24);
              int64_t v319 = v317 >> 1;
            }
            *(void *)(*(void *)&v314 + 16) = v320;
            v321 = (CGSize *)(*(void *)&v314 + 32 * v318);
            v321[2] = v315;
            v321[3] = v316;
            CGSize v322 = *(CGSize *)(v311 + 64);
            CGSize v323 = *(CGSize *)(v311 + 80);
            unint64_t v324 = v318 + 2;
            if (v319 < (uint64_t)(v318 + 2))
            {
              CGSize v509 = *(CGSize *)(v311 + 64);
              CGSize v508 = v323;
              double v479 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v317 > 1), v318 + 2, 1, *(void **)&v314));
              CGSize v323 = v508;
              CGSize v322 = v509;
              double v314 = v479;
            }
            *(void *)(*(void *)&v314 + 16) = v324;
            v325 = (CGSize *)(*(void *)&v314 + 32 * v320);
            v325[2] = v322;
            v325[3] = v323;
            CGSize v326 = *(CGSize *)(v311 + 96);
            CGSize v327 = *(CGSize *)(v311 + 112);
            unint64_t v328 = *(void *)(*(void *)&v314 + 24);
            unint64_t v329 = v318 + 3;
            if ((uint64_t)(v318 + 3) > (uint64_t)(v328 >> 1))
            {
              CGSize v509 = *(CGSize *)(v311 + 96);
              CGSize v508 = v327;
              double v480 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v328 > 1), v318 + 3, 1, *(void **)&v314));
              CGSize v327 = v508;
              CGSize v326 = v509;
              double v314 = v480;
            }
            *(void *)(*(void *)&v314 + 16) = v329;
            v330 = (CGSize *)(*(void *)&v314 + 32 * v324);
            v330[2] = v326;
            v330[3] = v327;
            CGSize v331 = *(CGSize *)(v311 + 128);
            CGSize v332 = *(CGSize *)(v311 + 144);
            unint64_t v333 = *(void *)(*(void *)&v314 + 24);
            if ((uint64_t)(v318 + 4) > (uint64_t)(v333 >> 1))
            {
              CGSize v509 = *(CGSize *)(v311 + 128);
              CGSize v508 = v332;
              double v481 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v333 > 1), v318 + 4, 1, *(void **)&v314));
              CGSize v332 = v508;
              CGSize v331 = v509;
              double v314 = v481;
            }
            *(void *)(*(void *)&v314 + 16) = v318 + 4;
            v334 = (CGSize *)(*(void *)&v314 + 32 * v329);
            v334[2] = v331;
            v334[3] = v332;
            double v335 = v314;
            swift_setDeallocating();
            swift_deallocClassInstance();
            CGRect.dividedIntegral(fraction:from:)(CGRectMinYEdge, (uint64_t)&slice, 0.5, v529.x, v521.x, v511.x, origin.x);
            CGFloat v21 = v335;
            CGPoint v336 = slice.origin;
            CGSize size = slice.size;
            CGPoint v338 = *(CGPoint *)v533;
            CGPoint v339 = *(CGPoint *)&v533[16];
            unint64_t v340 = *(void *)(*(void *)&v335 + 16);
            unint64_t v341 = *(void *)(*(void *)&v21 + 24);
            int64_t v342 = v341 >> 1;
            unint64_t v343 = v340 + 1;
            if (v341 >> 1 <= v340)
            {
              CGPoint v529 = *(CGPoint *)v533;
              CGPoint v521 = *(CGPoint *)&v533[16];
              CGPoint v511 = slice.origin;
              CGPoint origin = (CGPoint)slice.size;
              double v482 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v341 > 1), v340 + 1, 1, *(void **)&v21));
              CGSize size = (CGSize)origin;
              CGPoint v336 = v511;
              CGPoint v339 = v521;
              CGPoint v338 = v529;
              CGFloat v21 = v482;
              unint64_t v341 = *(void *)(*(void *)&v482 + 24);
              int64_t v342 = v341 >> 1;
            }
            *(void *)(*(void *)&v21 + 16) = v343;
            v344 = (CGPoint *)(*(void *)&v21 + 32 * v340);
            v344[2] = v336;
            v344[3] = (CGPoint)size;
            if (v342 < (uint64_t)(v340 + 2))
            {
              CGPoint v529 = v338;
              CGPoint v521 = v339;
              double v483 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v341 > 1), v340 + 2, 1, *(void **)&v21));
              CGPoint v339 = v521;
              CGPoint v338 = v529;
              CGFloat v21 = v483;
            }
            *(void *)(*(void *)&v21 + 16) = v340 + 2;
            v345 = (CGPoint *)(*(void *)&v21 + 32 * v343);
            v345[2] = v338;
            v345[3] = v339;
            goto LABEL_175;
          case 11:
            CGFloat v184 = v21;
            CGRect.dividedIntegral(fraction:from:)(CGRectMinYEdge, (uint64_t)&slice, 0.5, 0.0, 0.0, v519, v518);
            long long v185 = *(_OWORD *)v533;
            long long v186 = *(_OWORD *)&v533[16];
            id v187 = (CGPoint *)specialized MOSuggestionSheetMosaicLayout.firstRowRects(segmentFrame:)(slice.origin.x, slice.origin.y, slice.size.width, slice.size.height);
            CGFloat v188 = v187[1].x;
            if (v188 == 0.0)
            {
              uint64_t v173 = v19;
              CGFloat v189 = v184;
            }
            else
            {
              uint64_t v173 = v19;
              if (swift_isUniquelyReferenced_nonNull_native()) {
                CGFloat v189 = v184;
              }
              else {
                CGFloat v189 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(*(void *)&v184 + 16) + 1, 1, *(void **)&v184));
              }
              unint64_t v190 = *(void *)(*(void *)&v189 + 16);
              uint64_t v191 = 32 * v190;
              id v192 = v187 + 3;
              do
              {
                CGPoint v193 = v192[-1];
                CGPoint v194 = *v192;
                unint64_t v195 = *(void *)(*(void *)&v189 + 24);
                unint64_t v196 = v190 + 1;
                if (v190 >= v195 >> 1)
                {
                  CGPoint v529 = v192[-1];
                  CGPoint v521 = v194;
                  double v198 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v195 > 1), v190 + 1, 1, *(void **)&v189));
                  CGPoint v194 = v521;
                  CGPoint v193 = v529;
                  CGFloat v189 = v198;
                }
                *(void *)(*(void *)&v189 + 16) = v196;
                id v197 = (CGPoint *)(*(void *)&v189 + v191);
                v197[2] = v193;
                v197[3] = v194;
                v191 += 32;
                v192 += 2;
                unint64_t v190 = v196;
                --*(void *)&v188;
              }
              while (v188 != 0.0);
            }
            CGFloat v346 = v189;
            swift_bridgeObjectRelease();
            CGRect.dividedIntegral(fraction:from:)(CGRectMinXEdge, (uint64_t)&slice, 0.5, *(CGFloat *)&v185, *((CGFloat *)&v185 + 1), *(CGFloat *)&v186, *((CGFloat *)&v186 + 1));
            v521.CGFloat x = *(CGFloat *)&v533[8];
            v529.CGFloat x = *(CGFloat *)v533;
            origin.CGFloat x = *(CGFloat *)&v533[24];
            v511.CGFloat x = *(CGFloat *)&v533[16];
            CGRect.dividedIntegral(fraction:from:)(CGRectMinXEdge, (uint64_t)&slice, 0.5, slice.origin.x, slice.origin.y, slice.size.width, slice.size.height);
            long long v347 = *(_OWORD *)v533;
            long long v348 = *(_OWORD *)&v533[16];
            CGRect.dividedIntegral(fraction:from:)(CGRectMinYEdge, (uint64_t)&slice, 0.5, slice.origin.x, slice.origin.y, slice.size.width, slice.size.height);
            CGPoint v506 = slice.origin;
            v505.CGFloat x = slice.size.width;
            v504.CGFloat x = slice.size.height;
            CGSize v509 = *(CGSize *)v533;
            v507.CGFloat x = *(CGFloat *)&v533[24];
            v508.CGFloat width = *(CGFloat *)&v533[16];
            CGRect.dividedIntegral(fraction:from:)(CGRectMinYEdge, (uint64_t)&slice, 0.5, *(CGFloat *)&v347, *((CGFloat *)&v347 + 1), *(CGFloat *)&v348, *((CGFloat *)&v348 + 1));
            CGPoint v502 = slice.origin;
            CGFloat v349 = slice.size.width;
            CGFloat v350 = slice.size.height;
            long long v503 = *(_OWORD *)v533;
            long long v351 = *(_OWORD *)&v533[16];
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>);
            uint64_t v352 = swift_allocObject();
            *(CGPoint *)(v352 + 32) = v506;
            CGFloat v353 = v504.x;
            *(CGFloat *)(v352 + 48) = v505.x;
            *(CGFloat *)(v352 + 56) = v353;
            *(CGPoint *)(v352 + 64) = v502;
            *(CGFloat *)(v352 + 80) = v349;
            *(CGFloat *)(v352 + 88) = v350;
            *(CGSize *)(v352 + 96) = v509;
            CGFloat v354 = v507.x;
            *(CGFloat *)(v352 + 112) = v508.width;
            *(CGFloat *)(v352 + 120) = v354;
            *(_OWORD *)(v352 + 128) = v503;
            *(_OWORD *)(v352 + 144) = v351;
            if (swift_isUniquelyReferenced_nonNull_native()) {
              double v355 = v346;
            }
            else {
              double v355 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(*(void *)&v346 + 16) + 1, 1, *(void **)&v346));
            }
            CGSize v356 = *(CGSize *)(v352 + 32);
            CGSize v357 = *(CGSize *)(v352 + 48);
            unint64_t v359 = *(void *)(*(void *)&v355 + 16);
            unint64_t v358 = *(void *)(*(void *)&v355 + 24);
            int64_t v360 = v358 >> 1;
            unint64_t v361 = v359 + 1;
            if (v358 >> 1 <= v359)
            {
              CGSize v509 = *(CGSize *)(v352 + 32);
              CGSize v508 = v357;
              double v484 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v358 > 1), v359 + 1, 1, *(void **)&v355));
              CGSize v357 = v508;
              CGSize v356 = v509;
              double v355 = v484;
              unint64_t v358 = *(void *)(*(void *)&v484 + 24);
              int64_t v360 = v358 >> 1;
            }
            *(void *)(*(void *)&v355 + 16) = v361;
            v362 = (CGSize *)(*(void *)&v355 + 32 * v359);
            v362[2] = v356;
            v362[3] = v357;
            CGSize v363 = *(CGSize *)(v352 + 64);
            CGSize v364 = *(CGSize *)(v352 + 80);
            unint64_t v365 = v359 + 2;
            if (v360 < (uint64_t)(v359 + 2))
            {
              CGSize v509 = *(CGSize *)(v352 + 64);
              CGSize v508 = v364;
              double v485 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v358 > 1), v359 + 2, 1, *(void **)&v355));
              CGSize v364 = v508;
              CGSize v363 = v509;
              double v355 = v485;
            }
            *(void *)(*(void *)&v355 + 16) = v365;
            v366 = (CGSize *)(*(void *)&v355 + 32 * v361);
            v366[2] = v363;
            v366[3] = v364;
            CGSize v367 = *(CGSize *)(v352 + 96);
            CGSize v368 = *(CGSize *)(v352 + 112);
            unint64_t v369 = *(void *)(*(void *)&v355 + 24);
            unint64_t v370 = v359 + 3;
            if ((uint64_t)(v359 + 3) > (uint64_t)(v369 >> 1))
            {
              CGSize v509 = *(CGSize *)(v352 + 96);
              CGSize v508 = v368;
              double v486 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v369 > 1), v359 + 3, 1, *(void **)&v355));
              CGSize v368 = v508;
              CGSize v367 = v509;
              double v355 = v486;
            }
            *(void *)(*(void *)&v355 + 16) = v370;
            v371 = (CGSize *)(*(void *)&v355 + 32 * v365);
            v371[2] = v367;
            v371[3] = v368;
            CGSize v372 = *(CGSize *)(v352 + 128);
            CGSize v373 = *(CGSize *)(v352 + 144);
            unint64_t v374 = *(void *)(*(void *)&v355 + 24);
            if ((uint64_t)(v359 + 4) > (uint64_t)(v374 >> 1))
            {
              CGSize v509 = *(CGSize *)(v352 + 128);
              CGSize v508 = v373;
              double v487 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v374 > 1), v359 + 4, 1, *(void **)&v355));
              CGSize v373 = v508;
              CGSize v372 = v509;
              double v355 = v487;
            }
            *(void *)(*(void *)&v355 + 16) = v359 + 4;
            v375 = (CGSize *)(*(void *)&v355 + 32 * v370);
            v375[2] = v372;
            v375[3] = v373;
            double v376 = v355;
            swift_setDeallocating();
            swift_deallocClassInstance();
            CGRect.dividedIntegral(fraction:from:)(CGRectMinYEdge, (uint64_t)&slice, 0.5, v529.x, v521.x, v511.x, origin.x);
            uint64_t v377 = *(void *)v533;
            CGPoint v529 = *(CGPoint *)&v533[8];
            uint64_t v378 = *(void *)&v533[24];
            CGRect.dividedIntegral(fraction:from:)(CGRectMinXEdge, (uint64_t)&slice, 0.5, slice.origin.x, slice.origin.y, slice.size.width, slice.size.height);
            CGFloat v21 = v376;
            CGPoint v379 = slice.origin;
            CGSize v380 = slice.size;
            CGPoint v381 = *(CGPoint *)v533;
            CGPoint v382 = *(CGPoint *)&v533[16];
            unint64_t v383 = *(void *)(*(void *)&v376 + 16);
            unint64_t v384 = *(void *)(*(void *)&v21 + 24);
            int64_t v385 = v384 >> 1;
            unint64_t v386 = v383 + 1;
            if (v384 >> 1 <= v383)
            {
              CGPoint v521 = *(CGPoint *)v533;
              CGPoint v511 = *(CGPoint *)&v533[16];
              CGPoint origin = slice.origin;
              CGSize v509 = slice.size;
              double v488 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v384 > 1), v383 + 1, 1, *(void **)&v21));
              CGSize v380 = v509;
              CGPoint v379 = origin;
              CGPoint v382 = v511;
              CGPoint v381 = v521;
              CGFloat v21 = v488;
              unint64_t v384 = *(void *)(*(void *)&v488 + 24);
              int64_t v385 = v384 >> 1;
            }
            *(void *)(*(void *)&v21 + 16) = v386;
            v387 = (CGPoint *)(*(void *)&v21 + 32 * v383);
            v387[2] = v379;
            v387[3] = (CGPoint)v380;
            unint64_t v388 = v383 + 2;
            if (v385 < (uint64_t)(v383 + 2))
            {
              CGPoint v521 = v381;
              CGPoint v511 = v382;
              double v489 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v384 > 1), v383 + 2, 1, *(void **)&v21));
              CGPoint v382 = v511;
              CGPoint v381 = v521;
              CGFloat v21 = v489;
            }
            *(void *)(*(void *)&v21 + 16) = v388;
            v389 = (CGPoint *)(*(void *)&v21 + 32 * v386);
            v389[2] = v381;
            v389[3] = v382;
            unint64_t v390 = *(void *)(*(void *)&v21 + 24);
            if ((uint64_t)(v383 + 3) > (uint64_t)(v390 >> 1)) {
              CGFloat v21 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v390 > 1), v383 + 3, 1, *(void **)&v21));
            }
            *(void *)(*(void *)&v21 + 16) = v383 + 3;
            v391 = (void *)(*(void *)&v21 + 32 * v388);
            v391[4] = v377;
            *(CGPoint *)(v391 + 5) = v529;
            v391[7] = v378;
LABEL_175:
            uint64_t v19 = v173;
            uint64_t v27 = *(void *)(*(void *)&v21 + 16);
            if (!v27) {
              continue;
            }
            goto LABEL_197;
          case 12:
            CGFloat v199 = v21;
            CGRect.dividedIntegral(fraction:from:)(CGRectMinYEdge, (uint64_t)&slice, 0.5, 0.0, 0.0, v519, v518);
            long long v200 = *(_OWORD *)v533;
            long long v201 = *(_OWORD *)&v533[16];
            id v202 = (CGPoint *)specialized MOSuggestionSheetMosaicLayout.firstRowRects(segmentFrame:)(slice.origin.x, slice.origin.y, slice.size.width, slice.size.height);
            CGFloat v203 = v202[1].x;
            uint64_t v512 = v19;
            if (v203 == 0.0)
            {
              CGFloat v204 = v199;
            }
            else
            {
              if (swift_isUniquelyReferenced_nonNull_native()) {
                CGFloat v204 = v199;
              }
              else {
                CGFloat v204 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(*(void *)&v199 + 16) + 1, 1, *(void **)&v199));
              }
              unint64_t v205 = *(void *)(*(void *)&v204 + 16);
              uint64_t v206 = 32 * v205;
              v207 = v202 + 3;
              do
              {
                CGPoint v208 = v207[-1];
                CGPoint v209 = *v207;
                unint64_t v210 = *(void *)(*(void *)&v204 + 24);
                unint64_t v211 = v205 + 1;
                if (v205 >= v210 >> 1)
                {
                  CGPoint v529 = v207[-1];
                  CGPoint v521 = v209;
                  double v213 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v210 > 1), v205 + 1, 1, *(void **)&v204));
                  CGPoint v209 = v521;
                  CGPoint v208 = v529;
                  CGFloat v204 = v213;
                }
                *(void *)(*(void *)&v204 + 16) = v211;
                id v212 = (CGPoint *)(*(void *)&v204 + v206);
                v212[2] = v208;
                v212[3] = v209;
                v206 += 32;
                v207 += 2;
                unint64_t v205 = v211;
                --*(void *)&v203;
              }
              while (v203 != 0.0);
            }
            CGFloat v392 = v204;
            swift_bridgeObjectRelease();
            CGRect.dividedIntegral(fraction:from:)(CGRectMinXEdge, (uint64_t)&slice, 0.5, *(CGFloat *)&v200, *((CGFloat *)&v200 + 1), *(CGFloat *)&v201, *((CGFloat *)&v201 + 1));
            v521.CGFloat x = *(CGFloat *)&v533[8];
            v529.CGFloat x = *(CGFloat *)v533;
            origin.CGFloat x = *(CGFloat *)&v533[24];
            v511.CGFloat x = *(CGFloat *)&v533[16];
            CGRect.dividedIntegral(fraction:from:)(CGRectMinXEdge, (uint64_t)&slice, 0.5, slice.origin.x, slice.origin.y, slice.size.width, slice.size.height);
            long long v393 = *(_OWORD *)v533;
            long long v394 = *(_OWORD *)&v533[16];
            CGRect.dividedIntegral(fraction:from:)(CGRectMinYEdge, (uint64_t)&slice, 0.5, slice.origin.x, slice.origin.y, slice.size.width, slice.size.height);
            CGPoint v506 = slice.origin;
            v505.CGFloat x = slice.size.width;
            v504.CGFloat x = slice.size.height;
            CGSize v509 = *(CGSize *)v533;
            v507.CGFloat x = *(CGFloat *)&v533[24];
            v508.CGFloat width = *(CGFloat *)&v533[16];
            CGRect.dividedIntegral(fraction:from:)(CGRectMinYEdge, (uint64_t)&slice, 0.5, *(CGFloat *)&v393, *((CGFloat *)&v393 + 1), *(CGFloat *)&v394, *((CGFloat *)&v394 + 1));
            CGPoint v502 = slice.origin;
            CGFloat v395 = slice.size.width;
            CGFloat v396 = slice.size.height;
            long long v503 = *(_OWORD *)v533;
            long long v397 = *(_OWORD *)&v533[16];
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>);
            uint64_t v398 = swift_allocObject();
            *(CGPoint *)(v398 + 32) = v506;
            CGFloat v399 = v504.x;
            *(CGFloat *)(v398 + 48) = v505.x;
            *(CGFloat *)(v398 + 56) = v399;
            *(CGPoint *)(v398 + 64) = v502;
            *(CGFloat *)(v398 + 80) = v395;
            *(CGFloat *)(v398 + 88) = v396;
            *(CGSize *)(v398 + 96) = v509;
            CGFloat v400 = v507.x;
            *(CGFloat *)(v398 + 112) = v508.width;
            *(CGFloat *)(v398 + 120) = v400;
            *(_OWORD *)(v398 + 128) = v503;
            *(_OWORD *)(v398 + 144) = v397;
            if (swift_isUniquelyReferenced_nonNull_native()) {
              CGFloat v401 = v392;
            }
            else {
              CGFloat v401 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(*(void *)&v392 + 16) + 1, 1, *(void **)&v392));
            }
            CGSize v402 = *(CGSize *)(v398 + 32);
            CGSize v403 = *(CGSize *)(v398 + 48);
            unint64_t v405 = *(void *)(*(void *)&v401 + 16);
            unint64_t v404 = *(void *)(*(void *)&v401 + 24);
            int64_t v406 = v404 >> 1;
            unint64_t v407 = v405 + 1;
            if (v404 >> 1 <= v405)
            {
              CGSize v509 = *(CGSize *)(v398 + 32);
              CGSize v508 = v403;
              v490 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v404 > 1), v405 + 1, 1, *(void **)&v401);
              CGSize v403 = v508;
              CGSize v402 = v509;
              CGFloat v401 = *(double *)&v490;
              unint64_t v404 = v490[3];
              int64_t v406 = v404 >> 1;
            }
            *(void *)(*(void *)&v401 + 16) = v407;
            v408 = (CGSize *)(*(void *)&v401 + 32 * v405);
            v408[2] = v402;
            v408[3] = v403;
            CGSize v409 = *(CGSize *)(v398 + 64);
            CGSize v410 = *(CGSize *)(v398 + 80);
            unint64_t v411 = v405 + 2;
            if (v406 < (uint64_t)(v405 + 2))
            {
              CGSize v509 = *(CGSize *)(v398 + 64);
              CGSize v508 = v410;
              v491 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v404 > 1), v405 + 2, 1, *(void **)&v401);
              CGSize v410 = v508;
              CGSize v409 = v509;
              CGFloat v401 = *(double *)&v491;
            }
            *(void *)(*(void *)&v401 + 16) = v411;
            v412 = (CGSize *)(*(void *)&v401 + 32 * v407);
            v412[2] = v409;
            v412[3] = v410;
            CGSize v413 = *(CGSize *)(v398 + 96);
            CGSize v414 = *(CGSize *)(v398 + 112);
            unint64_t v415 = *(void *)(*(void *)&v401 + 24);
            unint64_t v416 = v405 + 3;
            if ((uint64_t)(v405 + 3) > (uint64_t)(v415 >> 1))
            {
              CGSize v509 = *(CGSize *)(v398 + 96);
              CGSize v508 = v414;
              v492 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v415 > 1), v405 + 3, 1, *(void **)&v401);
              CGSize v414 = v508;
              CGSize v413 = v509;
              CGFloat v401 = *(double *)&v492;
            }
            *(void *)(*(void *)&v401 + 16) = v416;
            v417 = (CGSize *)(*(void *)&v401 + 32 * v411);
            v417[2] = v413;
            v417[3] = v414;
            CGSize v418 = *(CGSize *)(v398 + 128);
            CGSize v419 = *(CGSize *)(v398 + 144);
            unint64_t v420 = *(void *)(*(void *)&v401 + 24);
            if ((uint64_t)(v405 + 4) > (uint64_t)(v420 >> 1))
            {
              CGSize v509 = *(CGSize *)(v398 + 128);
              CGSize v508 = v419;
              v493 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v420 > 1), v405 + 4, 1, *(void **)&v401);
              CGSize v419 = v508;
              CGSize v418 = v509;
              CGFloat v401 = *(double *)&v493;
            }
            *(void *)(*(void *)&v401 + 16) = v405 + 4;
            v421 = (CGSize *)(*(void *)&v401 + 32 * v416);
            v421[2] = v418;
            v421[3] = v419;
            *(double *)&double v422 = v401;
            swift_setDeallocating();
            swift_deallocClassInstance();
            CGRect.dividedIntegral(fraction:from:)(CGRectMinXEdge, (uint64_t)&slice, 0.5, v529.x, v521.x, v511.x, origin.x);
            long long v423 = *(_OWORD *)v533;
            long long v424 = *(_OWORD *)&v533[16];
            CGRect.dividedIntegral(fraction:from:)(CGRectMinYEdge, (uint64_t)&slice, 0.5, slice.origin.x, slice.origin.y, slice.size.width, slice.size.height);
            origin.CGFloat x = slice.origin.x;
            v509.CGFloat width = slice.origin.y;
            v508.CGFloat width = slice.size.width;
            v507.CGFloat x = slice.size.height;
            CGPoint v529 = *(CGPoint *)v533;
            v511.CGFloat x = *(CGFloat *)&v533[24];
            v521.CGFloat x = *(CGFloat *)&v533[16];
            CGRect.dividedIntegral(fraction:from:)(CGRectMinYEdge, (uint64_t)&slice, 0.5, *(CGFloat *)&v423, *((CGFloat *)&v423 + 1), *(CGFloat *)&v424, *((CGFloat *)&v424 + 1));
            CGPoint v505 = slice.origin;
            CGFloat v425 = slice.size.width;
            CGFloat v426 = slice.size.height;
            CGPoint v506 = *(CGPoint *)v533;
            long long v427 = *(_OWORD *)&v533[16];
            uint64_t v428 = swift_allocObject();
            CGFloat v429 = v507.x;
            uint64_t v430 = *(void *)&v508.width;
            CGFloat v431 = v509.width;
            CGFloat v432 = origin.x;
            double v433 = v422;
            v434 = (_OWORD *)v428;
            *(CGFloat *)(v428 + 32) = origin.x;
            *(CGFloat *)(v428 + 40) = v431;
            *(void *)(v428 + 48) = v430;
            *(CGFloat *)(v428 + 56) = v429;
            *(CGPoint *)(v428 + 64) = v505;
            *(CGFloat *)(v428 + 80) = v425;
            *(CGFloat *)(v428 + 88) = v426;
            *(CGPoint *)(v428 + 96) = v529;
            CGFloat v435 = v511.x;
            *(CGFloat *)(v428 + 112) = v521.x;
            *(CGFloat *)(v428 + 120) = v435;
            *(CGPoint *)(v428 + 128) = v506;
            *(_OWORD *)(v428 + 144) = v427;
            unint64_t v436 = v422[2];
            unint64_t v437 = v433[3];
            int64_t v438 = v437 >> 1;
            unint64_t v439 = v436 + 1;
            if (v437 >> 1 <= v436)
            {
              double v494 = v432;
              double v495 = v431;
              uint64_t v496 = v430;
              double v497 = v429;
              double v498 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v437 > 1), v436 + 1, 1, *(double *)&v433));
              CGFloat v429 = v497;
              uint64_t v430 = v496;
              CGFloat v431 = v495;
              CGFloat v432 = v494;
              *(double *)&double v433 = v498;
              unint64_t v437 = *(void *)(*(void *)&v498 + 24);
              int64_t v438 = v437 >> 1;
            }
            v433[2] = v439;
            v440 = (CGFloat *)&v433[4 * v436];
            v440[4] = v432;
            v440[5] = v431;
            *((void *)v440 + 6) = v430;
            v440[7] = v429;
            CGPoint v441 = (CGPoint)v434[4];
            CGPoint v442 = (CGPoint)v434[5];
            unint64_t v443 = v436 + 2;
            if (v438 < (uint64_t)(v436 + 2))
            {
              CGPoint v529 = (CGPoint)v434[4];
              CGPoint v521 = v442;
              double v499 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v437 > 1), v436 + 2, 1, *(double *)&v433));
              CGPoint v442 = v521;
              CGPoint v441 = v529;
              *(double *)&double v433 = v499;
            }
            v433[2] = v443;
            v444 = (CGPoint *)&v433[4 * v439];
            v444[2] = v441;
            v444[3] = v442;
            CGPoint v445 = (CGPoint)v434[6];
            CGPoint v446 = (CGPoint)v434[7];
            unint64_t v447 = v433[3];
            unint64_t v448 = v436 + 3;
            if ((uint64_t)(v436 + 3) > (uint64_t)(v447 >> 1))
            {
              CGPoint v529 = (CGPoint)v434[6];
              CGPoint v521 = v446;
              double v500 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v447 > 1), v436 + 3, 1, *(double *)&v433));
              CGPoint v446 = v521;
              CGPoint v445 = v529;
              *(double *)&double v433 = v500;
            }
            v433[2] = v448;
            v449 = (CGPoint *)&v433[4 * v443];
            v449[2] = v445;
            v449[3] = v446;
            CGPoint v450 = (CGPoint)v434[8];
            CGPoint v451 = (CGPoint)v434[9];
            unint64_t v452 = v433[3];
            if ((uint64_t)(v436 + 4) > (uint64_t)(v452 >> 1))
            {
              CGPoint v529 = (CGPoint)v434[8];
              CGPoint v521 = v451;
              double v501 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v452 > 1), v436 + 4, 1, *(double *)&v433));
              CGPoint v451 = v521;
              CGPoint v450 = v529;
              *(double *)&double v433 = v501;
            }
            v433[2] = v436 + 4;
            v453 = (CGPoint *)&v433[4 * v448];
            v453[2] = v450;
            v453[3] = v451;
            v454 = v433;
            swift_setDeallocating();
            swift_deallocClassInstance();
            CGFloat v21 = *(double *)&v454;
            uint64_t v19 = v512;
            uint64_t v27 = v454[2];
            if (!v27) {
              continue;
            }
LABEL_197:
            CGFloat v455 = v21;
            *(void *)&v529.CGFloat x = self;
            v456 = *(double (**)(void))((swift_isaMask & *v1) + 0x88);
            swift_bridgeObjectRetain();
            v521.CGFloat x = v455;
            v457 = (double *)(*(void *)&v455 + 56);
            break;
          default:
            goto LABEL_219;
        }
        do
        {
          double v458 = *(v457 - 3);
          double v459 = *(v457 - 2);
          double v460 = *(v457 - 1);
          double v461 = *v457;
          v462 = v527;
          IndexPath.init(item:section:)();
          Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
          uint64_t v464 = v19;
          id v465 = [*(id *)&v529.x layoutAttributesForCellWithIndexPath:isa];

          (*v522)(v462, v528);
          [v465 setFrame:v458, v459, v460, v461];
          id v466 = v465;
          v467 = (uint64_t (*)(void, void))v526(&slice);
          v469 = v468;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          unint64_t v6 = v1;
          if (*(void *)((*v469 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v469 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          uint64_t v470 = v467(&slice, 0);
          v552.origin.CGFloat x = v456(v470);
          v554.origin.CGFloat x = v23;
          v554.origin.CGFloat y = v24;
          v554.size.CGFloat width = v20;
          v554.size.CGFloat height = v22;
          CGRect v553 = CGRectUnion(v552, v554);
          v524((__n128)v553.origin, *(__n128 *)&v553.origin.y, (__n128)v553.size, *(__n128 *)&v553.size.height);

          if (v464 == 0x7FFFFFFFFFFFFFFFLL)
          {
            __break(1u);
            goto LABEL_219;
          }
          uint64_t v19 = v464 + 1;
          v457 += 4;
          CGFloat v20 = v460;
          CGFloat v22 = v461;
          CGFloat v23 = v458;
          CGFloat v24 = v459;
          --v27;
        }
        while (v27);
        CGFloat v25 = v521.x;
        swift_bridgeObjectRelease();
        CGFloat v21 = v25;
        CGFloat v20 = v460;
        CGFloat v22 = v461;
        CGFloat v23 = v458;
        CGFloat v24 = v459;
        unint64_t v6 = v517;
        uint64_t v18 = v516;
      }
      while (v19 < v520);
LABEL_219:

      swift_bridgeObjectRelease();
    }
  }
}

uint64_t type metadata accessor for MOSuggestionSheetMosaicLayout()
{
  return self;
}

void CGRect.dividedIntegral(fraction:from:)(CGRectEdge a1@<W0>, uint64_t a2@<X8>, double a3@<D0>, CGFloat a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>, CGFloat a7@<D4>)
{
  type metadata accessor for CGRectEdge(0);
  double v14 = a6;
  switch(a1)
  {
    case CGRectMinXEdge:
    case CGRectMaxXEdge:
      goto LABEL_3;
    case CGRectMinYEdge:
    case CGRectMaxYEdge:
      double v14 = a7;
LABEL_3:
      CGFloat v15 = ceil(v14 * a3);
      memset(&slice, 0, sizeof(slice));
      memset(&v21, 0, sizeof(v21));
      v23.origin.double x = a4;
      v23.origin.double y = a5;
      v23.size.double width = a6;
      v23.size.double height = a7;
      CGRectDivide(v23, &slice, &v21, v15, a1);
      CGSize size = slice.size;
      double y = v21.origin.y;
      double x = v21.origin.x;
      double height = v21.size.height;
      double width = v21.size.width;
      switch(a1)
      {
        case CGRectMinXEdge:
        case CGRectMaxXEdge:
          double x = v21.origin.x + 1.0;
          double width = v21.size.width + -1.0;
          goto LABEL_6;
        case CGRectMinYEdge:
        case CGRectMaxYEdge:
          double y = v21.origin.y + 1.0;
          double height = v21.size.height + -1.0;
LABEL_6:
          *(CGPoint *)a2 = slice.origin;
          *(CGSize *)(a2 + 16) = size;
          *(double *)(a2 + 32) = x;
          *(double *)(a2 + 40) = y;
          *(double *)(a2 + 48) = width;
          *(double *)(a2 + 56) = height;
          return;
        default:
          goto LABEL_7;
      }
    default:
      break;
  }
LABEL_7:
  LODWORD(slice.origin.x) = a1;
  _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
  __break(1u);
  JUMPOUT(0x100046B18);
}

double MOSuggestionSheetHalfMosaicLayout.firstRect(segmentFrame:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  CGRect.dividedIntegral(fraction:from:)(CGRectMinXEdge, (uint64_t)&v5, 0.5, a1, a2, a3, a4);
  return v5;
}

__n128 MOSuggestionSheetHalfMosaicLayout.quarterRects(of:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  CGRect.dividedIntegral(fraction:from:)(CGRectMinXEdge, (uint64_t)&v21, 0.5, a1, a2, a3, a4);
  __n128 v4 = v24;
  CGFloat v5 = v25;
  CGFloat v6 = v26;
  CGRect.dividedIntegral(fraction:from:)(CGRectMinYEdge, (uint64_t)&v21, 0.5, *(CGFloat *)&v21, *((CGFloat *)&v21 + 1), v22, v23);
  CGFloat v7 = v22;
  CGFloat v8 = v23;
  long long v19 = v21;
  __n128 v20 = v24;
  double v9 = v25;
  double v10 = v26;
  CGRect.dividedIntegral(fraction:from:)(CGRectMinYEdge, (uint64_t)&v21, 0.5, v4.n128_f64[0], v4.n128_f64[1], v5, v6);
  CGFloat v11 = v22;
  CGFloat v12 = v23;
  long long v17 = v21;
  __n128 v18 = v24;
  double v13 = v25;
  double v14 = v26;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_1001DA100;
  *(_OWORD *)(v15 + 32) = v19;
  *(CGFloat *)(v15 + 48) = v7;
  *(CGFloat *)(v15 + 56) = v8;
  *(_OWORD *)(v15 + 64) = v17;
  *(CGFloat *)(v15 + 80) = v11;
  *(CGFloat *)(v15 + 88) = v12;
  *(__n128 *)(v15 + 96) = v20;
  *(double *)(v15 + 112) = v9;
  *(double *)(v15 + 120) = v10;
  __n128 result = v18;
  *(__n128 *)(v15 + 128) = v18;
  *(double *)(v15 + 144) = v13;
  *(double *)(v15 + 152) = v14;
  return result;
}

double MOSuggestionSheetMosaicLayout.collectionViewContentSize.getter()
{
  (*(void (**)(void))((swift_isaMask & *v0) + 0x88))();
  return v1;
}

id MOSuggestionSheetHalfMosaicLayout.shouldInvalidateLayout(forBoundsChange:)(double a1, double a2, CGFloat a3, CGFloat a4)
{
  id result = [v4 collectionView];
  if (result)
  {
    CGFloat v8 = result;
    [result bounds];
    v10.double width = a3;
    v10.double height = a4;
    BOOL v9 = CGSizeEqualToSize(v10, v11);

    return (id)!v9;
  }
  return result;
}

uint64_t MOSuggestionSheetMosaicLayout.layoutAttributesForItem(at:)()
{
  double v1 = *(uint64_t (**)(void))((swift_isaMask & *v0) + 0x70);
  unint64_t v2 = v1();
  if (v2 >> 62) {
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  }
  else {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (IndexPath.item.getter() >= v3) {
    return 0;
  }
  unint64_t v4 = IndexPath.item.getter();
  uint64_t result = v1();
  if ((result & 0xC000000000000001) != 0)
  {
    id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_8;
  }
  if ((v4 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v4 < *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v6 = *(id *)(result + 8 * v4 + 32);
LABEL_8:
    id v7 = v6;
    swift_bridgeObjectRelease();
    return (uint64_t)v7;
  }
  __break(1u);
  return result;
}

unint64_t MOSuggestionSheetMosaicLayout.layoutAttributesForElements(in:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  id v6 = v4;
  uint64_t v11 = *v4;
  CGFloat v12 = &swift_isaMask;
  unint64_t v49 = (unint64_t)_swiftEmptyArrayStorage;
  double v13 = *(uint64_t (**)(void))((swift_isaMask & v11) + 0x70);
  unint64_t v14 = v13();
  unint64_t v15 = v14;
  if (!(v14 >> 62))
  {
    uint64_t v16 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRelease();
    goto LABEL_3;
  }
  while (1)
  {
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v16 < 0) {
      break;
    }
LABEL_3:
    if (!v16) {
      return v49;
    }
    uint64_t v17 = (*(uint64_t (**)(void, uint64_t, CGFloat, CGFloat, CGFloat, CGFloat))((*v12 & *v6) + 0xD8))(0, v16 - 1, a1, a2, a3, a4);
    if (v18) {
      return v49;
    }
    Swift::Int v5 = v17;
    unint64_t v15 = (unint64_t)v6;
    unint64_t v19 = v13();
    if (v5 < 0) {
      goto LABEL_53;
    }
    unint64_t v15 = v19;
    uint64_t v16 = v19 >> 62;
    if (v19 >> 62) {
      goto LABEL_54;
    }
    if (*(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10) < v5) {
      goto LABEL_56;
    }
LABEL_8:
    CGFloat v48 = v13;
    if ((v15 & 0xC000000000000001) != 0 && v5 != 0)
    {
      type metadata accessor for UICollectionViewLayoutAttributes();
      Swift::Int v21 = 0;
      do
      {
        Swift::Int v22 = v21 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v21);
        Swift::Int v21 = v22;
      }
      while (v5 != v22);
    }
    if (v16)
    {
      swift_bridgeObjectRetain();
      CGFloat v12 = (void *)_CocoaArrayWrapper.subscript.getter();
      uint64_t v23 = v25;
      double v13 = v26;
      unint64_t v28 = v27;
      swift_bridgeObjectRelease_n();
      __n128 v24 = (uint64_t (*)(void))(v28 >> 1);
    }
    else
    {
      double v13 = 0;
      CGFloat v12 = (void *)(v15 & 0xFFFFFFFFFFFFFF8);
      uint64_t v23 = (v15 & 0xFFFFFFFFFFFFFF8) + 32;
      __n128 v24 = (uint64_t (*)(void))v5;
    }
    if (v24 != v13)
    {
      CGFloat v29 = v24;
      while (1)
      {
        BOOL v30 = __OFSUB__(v29, 1);
        CGFloat v29 = (uint64_t (*)(void))((char *)v29 - 1);
        if (v30) {
          break;
        }
        if ((uint64_t)v29 < (uint64_t)v13 || (uint64_t)v29 >= (uint64_t)v24) {
          goto LABEL_49;
        }
        id v31 = *(id *)(v23 + 8 * (void)v29);
        [v31 frame];
        double MaxY = CGRectGetMaxY(v50);
        v51.origin.double x = a1;
        v51.origin.double y = a2;
        v51.size.double width = a3;
        v51.size.double height = a4;
        if (CGRectGetMinY(v51) > MaxY)
        {

          goto LABEL_28;
        }
        id v33 = v31;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        unint64_t v15 = (unint64_t)&v49;
        specialized Array._endMutation()();

        if (v29 == v13) {
          goto LABEL_28;
        }
      }
      __break(1u);
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }
LABEL_28:
    uint64_t v34 = swift_unknownObjectRelease();
    unint64_t result = ((uint64_t (*)(uint64_t))v48)(v34);
    unint64_t v15 = result;
    uint64_t v16 = result >> 62;
    if (result >> 62) {
      goto LABEL_57;
    }
    id v6 = *(void **)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if ((uint64_t)v6 < v5) {
      goto LABEL_61;
    }
LABEL_30:
    if ((v15 & 0xC000000000000001) != 0 && (void *)v5 != v6)
    {
      if (v5 >= (uint64_t)v6) {
        goto LABEL_62;
      }
      type metadata accessor for UICollectionViewLayoutAttributes();
      Swift::Int v36 = v5;
      do
      {
        CGFloat v37 = (void *)(v36 + 1);
        _ArrayBuffer._typeCheckSlowPath(_:)(v36);
        Swift::Int v36 = (Swift::Int)v37;
      }
      while (v6 != v37);
    }
    if (!v16)
    {
      CGFloat v12 = (void *)(v15 & 0xFFFFFFFFFFFFFF8);
      double v13 = (uint64_t (*)(void))((v15 & 0xFFFFFFFFFFFFFF8) + 32);
      if ((void *)v5 != v6) {
        goto LABEL_39;
      }
LABEL_46:
      swift_unknownObjectRelease();
      return v49;
    }
    swift_bridgeObjectRetain();
    CGFloat v12 = (void *)_CocoaArrayWrapper.subscript.getter();
    double v13 = v38;
    Swift::Int v5 = v39;
    unint64_t v41 = v40;
    swift_bridgeObjectRelease_n();
    id v6 = (void *)(v41 >> 1);
    if ((void *)v5 == v6) {
      goto LABEL_46;
    }
LABEL_39:
    while (v5 < (uint64_t)v6)
    {
      id v42 = *((id *)v13 + v5);
      [v42 frame];
      double MinY = CGRectGetMinY(v52);
      v53.origin.double x = a1;
      v53.origin.double y = a2;
      v53.size.double width = a3;
      v53.size.double height = a4;
      if (MinY > CGRectGetMaxY(v53))
      {

        goto LABEL_46;
      }
      id v44 = v42;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      ++v5;
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      unint64_t v15 = (unint64_t)&v49;
      specialized Array._endMutation()();

      if (v6 == (void *)v5) {
        goto LABEL_46;
      }
    }
LABEL_50:
    __break(1u);
  }
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  unint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if ((result & 0x8000000000000000) != 0) {
    goto LABEL_63;
  }
  swift_bridgeObjectRetain();
  uint64_t v45 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v45 >= v5) {
    goto LABEL_8;
  }
LABEL_56:
  __break(1u);
LABEL_57:
  swift_bridgeObjectRetain();
  id v6 = (void *)_CocoaArrayWrapper.endIndex.getter();
  unint64_t result = swift_bridgeObjectRelease();
  if ((uint64_t)v6 < v5) {
    goto LABEL_64;
  }
  swift_bridgeObjectRetain();
  uint64_t v46 = _CocoaArrayWrapper.endIndex.getter();
  unint64_t result = swift_bridgeObjectRelease();
  if (v46 < v5) {
    goto LABEL_65;
  }
  swift_bridgeObjectRetain();
  uint64_t v47 = _CocoaArrayWrapper.endIndex.getter();
  unint64_t result = swift_bridgeObjectRelease();
  if (v47 >= (uint64_t)v6) {
    goto LABEL_30;
  }
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
  return result;
}

uint64_t MOSuggestionSheetMosaicLayout.assetGridHeight(assetCount:totalWidth:)(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0xA0))();
  }
  return result;
}

uint64_t MOSuggestionSheetMosaicLayout.binSearch(_:start:end:)(uint64_t a1, uint64_t a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  if (a2 < a1) {
    return 0;
  }
  uint64_t v15 = a1 + a2;
  if (__OFADD__(a1, a2))
  {
    __break(1u);
LABEL_19:
    id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_11:
    unint64_t v19 = v18;
    swift_bridgeObjectRelease();
    [v19 frame];
    v30.origin.double x = v12;
    v30.origin.double y = v11;
    v30.size.double width = v10;
    v30.size.double height = v9;
    if (CGRectIntersectsRect(v27, v30))
    {
    }
    else
    {
      [v19 frame];
      double MaxY = CGRectGetMaxY(v28);
      v29.origin.double x = v12;
      v29.origin.double y = v11;
      v29.size.double width = v10;
      v29.size.double height = v9;
      if (MaxY >= CGRectGetMinY(v29))
      {
        uint64_t v26 = v6 - 1;
        v21.n128_f64[0] = v12;
        v22.n128_f64[0] = v11;
        v23.n128_f64[0] = v10;
        v24.n128_f64[0] = v9;
        uint64_t v25 = a1;
      }
      else
      {
        uint64_t v25 = v6 + 1;
        v21.n128_f64[0] = v12;
        v22.n128_f64[0] = v11;
        v23.n128_f64[0] = v10;
        v24.n128_f64[0] = v9;
        uint64_t v26 = a2;
      }
      uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))((*v8 & *v7) + 0xD8))(v25, v26, v21, v22, v23, v24);
    }
    return v6;
  }
  CGFloat v9 = a6;
  CGFloat v10 = a5;
  CGFloat v11 = a4;
  CGFloat v12 = a3;
  if (v15 >= 0) {
    uint64_t v16 = a1 + a2;
  }
  else {
    uint64_t v16 = v15 + 1;
  }
  uint64_t v6 = v16 >> 1;
  CGFloat v8 = &swift_isaMask;
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & *v7) + 0x70))();
  if ((result & 0xC000000000000001) != 0) {
    goto LABEL_19;
  }
  if (v15 < -1)
  {
    __break(1u);
  }
  else if (v6 < *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v18 = *(id *)(result + 8 * v6 + 32);
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

id MOSuggestionSheetMosaicLayout.init()()
{
  *(void *)&v0[OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetMosaicLayout_cachedAttributes] = _swiftEmptyArrayStorage;
  double v1 = &v0[OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetMosaicLayout_contentBounds];
  _OWORD *v1 = 0u;
  v1[1] = 0u;
  v0[OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetMosaicLayout_isFullHeight] = 1;
  *(void *)&v0[OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetMosaicLayout_mosaicSegmentDelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for MOSuggestionSheetMosaicLayout();
  return [super init];
}

id MOSuggestionSheetMosaicLayout.init(coder:)(void *a1)
{
  *(void *)&v1[OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetMosaicLayout_cachedAttributes] = _swiftEmptyArrayStorage;
  objc_super v3 = &v1[OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetMosaicLayout_contentBounds];
  *objc_super v3 = 0u;
  v3[1] = 0u;
  v1[OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetMosaicLayout_isFullHeight] = 1;
  *(void *)&v1[OBJC_IVAR____TtC16MomentsUIService29MOSuggestionSheetMosaicLayout_mosaicSegmentDelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v6.receiver = v1;
  v6.super_class = (Class)type metadata accessor for MOSuggestionSheetMosaicLayout();
  [super initWithCoder:a1];

  return v4;
}

id MOSuggestionSheetMosaicLayout.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MOSuggestionSheetMosaicLayout();
  return [super dealloc];
}

void *specialized MOSuggestionSheetMosaicLayout.firstRowRects(segmentFrame:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  CGRect.dividedIntegral(fraction:from:)(CGRectMinXEdge, (uint64_t)v56, 0.5, a1, a2, a3, a4);
  uint64_t v4 = *(void *)v56;
  long long v54 = *(_OWORD *)&v56[8];
  uint64_t v5 = *(void *)&v56[24];
  long long v7 = *(_OWORD *)v57;
  CGFloat v6 = *(double *)&v57[16];
  CGFloat v8 = *(double *)&v57[24];
  CGFloat v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, _swiftEmptyArrayStorage);
  unint64_t v11 = v9[2];
  unint64_t v10 = v9[3];
  if (v11 >= v10 >> 1) {
    CGFloat v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v9);
  }
  v9[2] = v11 + 1;
  CGFloat v12 = &v9[4 * v11];
  v12[4] = v4;
  *(_OWORD *)(v12 + 5) = v54;
  v12[7] = v5;
  CGRect.dividedIntegral(fraction:from:)(CGRectMinXEdge, (uint64_t)v56, 0.5, *(CGFloat *)&v7, *((CGFloat *)&v7 + 1), v6, v8);
  long long v13 = *(_OWORD *)v57;
  CGFloat v14 = *(double *)&v57[16];
  CGFloat v15 = *(double *)&v57[24];
  CGRect.dividedIntegral(fraction:from:)(CGRectMinYEdge, (uint64_t)v56, 0.5, *(CGFloat *)v56, *(CGFloat *)&v56[8], *(CGFloat *)&v56[16], *(CGFloat *)&v56[24]);
  uint64_t v16 = *(void *)v56;
  uint64_t v18 = *(void *)&v56[24];
  uint64_t v17 = *(void *)v57;
  long long v53 = *(_OWORD *)&v56[8];
  long long v55 = *(_OWORD *)&v57[8];
  uint64_t v19 = *(void *)&v57[24];
  CGRect.dividedIntegral(fraction:from:)(CGRectMinYEdge, (uint64_t)v56, 0.5, *(CGFloat *)&v13, *((CGFloat *)&v13 + 1), v14, v15);
  long long v20 = *(_OWORD *)v56;
  long long v21 = *(_OWORD *)&v56[16];
  long long v22 = *(_OWORD *)v57;
  long long v23 = *(_OWORD *)&v57[16];
  unint64_t v25 = v9[2];
  unint64_t v24 = v9[3];
  int64_t v26 = v24 >> 1;
  unint64_t v27 = v25 + 1;
  if (v24 >> 1 <= v25)
  {
    long long v45 = *(_OWORD *)&v57[16];
    long long v49 = *(_OWORD *)v57;
    long long v41 = *(_OWORD *)&v56[16];
    long long v43 = *(_OWORD *)v56;
    CGFloat v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v24 > 1), v25 + 1, 1, v9);
    long long v21 = v41;
    long long v20 = v43;
    long long v23 = v45;
    long long v22 = v49;
    CGFloat v9 = v37;
    unint64_t v24 = v37[3];
    int64_t v26 = v24 >> 1;
  }
  v9[2] = v27;
  CGRect v28 = &v9[4 * v25];
  v28[4] = v16;
  *(_OWORD *)(v28 + 5) = v53;
  v28[7] = v18;
  unint64_t v29 = v25 + 2;
  if (v26 < (uint64_t)(v25 + 2))
  {
    long long v46 = v23;
    long long v50 = v22;
    long long v42 = v21;
    long long v44 = v20;
    double v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v24 > 1), v25 + 2, 1, v9);
    long long v21 = v42;
    long long v20 = v44;
    long long v23 = v46;
    long long v22 = v50;
    CGFloat v9 = v38;
  }
  v9[2] = v29;
  CGRect v30 = &v9[4 * v27];
  *((_OWORD *)v30 + 2) = v20;
  *((_OWORD *)v30 + 3) = v21;
  unint64_t v31 = v9[3];
  unint64_t v32 = v25 + 3;
  if ((uint64_t)(v25 + 3) > (uint64_t)(v31 >> 1))
  {
    long long v47 = v23;
    long long v51 = v22;
    Swift::Int v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v31 > 1), v25 + 3, 1, v9);
    long long v23 = v47;
    long long v22 = v51;
    CGFloat v9 = v39;
  }
  v9[2] = v32;
  id v33 = &v9[4 * v29];
  v33[4] = v17;
  *(_OWORD *)(v33 + 5) = v55;
  v33[7] = v19;
  unint64_t v34 = v9[3];
  if ((uint64_t)(v25 + 4) > (uint64_t)(v34 >> 1))
  {
    long long v48 = v23;
    long long v52 = v22;
    unint64_t v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v34 > 1), v25 + 4, 1, v9);
    long long v23 = v48;
    long long v22 = v52;
    CGFloat v9 = v40;
  }
  v9[2] = v25 + 4;
  CGFloat v35 = &v9[4 * v32];
  *((_OWORD *)v35 + 2) = v22;
  *((_OWORD *)v35 + 3) = v23;
  return v9;
}

unint64_t type metadata accessor for UICollectionViewLayoutAttributes()
{
  unint64_t result = lazy cache variable for type metadata for UICollectionViewLayoutAttributes;
  if (!lazy cache variable for type metadata for UICollectionViewLayoutAttributes)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UICollectionViewLayoutAttributes);
  }
  return result;
}

uint64_t sub_100047F80@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x70))();
  *a2 = result;
  return result;
}

uint64_t sub_100047FDC(uint64_t a1, void **a2)
{
  objc_super v2 = *(uint64_t (**)(uint64_t))((swift_isaMask & **a2) + 0x78);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

void sub_100048040(void **a1@<X0>, uint64_t a2@<X8>)
{
  *(double *)a2 = (*(double (**)(void))((swift_isaMask & **a1) + 0x88))();
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v4;
  *(void *)(a2 + 24) = v5;
}

uint64_t sub_1000480A0(double *a1, void **a2)
{
  return (*(uint64_t (**)(double, double, double, double))((swift_isaMask & **a2) + 0x90))(*a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_1000480FC@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0xA0))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_10004815C(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((swift_isaMask & **a2) + 0xA8))(*a1);
}

uint64_t sub_1000481B4@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0xB8))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_100048210(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))((swift_isaMask & **a2) + 0xC0);
  uint64_t v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

id MOSuggestionSheetFilterCollectionView.__allocating_init(frame:collectionViewLayout:)(void *a1, double a2, double a3, double a4, double a5)
{
  id v7 = [objc_allocWithZone(v5) initWithFrame:a1 collectionViewLayout:a2];

  return v7;
}

id MOSuggestionSheetGridCollectionView.init(frame:collectionViewLayout:)(void *a1, double a2, double a3, double a4, double a5)
{
  v17.receiver = v5;
  v17.super_class = (Class)type metadata accessor for MOSuggestionSheetGridCollectionView();
  id v11 = [super initWithFrame:a1 collectionViewLayout:a2];
  type metadata accessor for MOSuggestionSheetMosaicCell();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v13 = v11;
  NSString v14 = String._bridgeToObjectiveC()();
  [v13 registerClass:ObjCClassFromMetadata forCellWithReuseIdentifier:v14];

  [v13 setScrollEnabled:0];
  id v15 = [self whiteColor];
  [v13 setBackgroundColor:v15];

  return v13;
}

uint64_t type metadata accessor for MOSuggestionSheetGridCollectionView()
{
  return self;
}

id MOSuggestionSheetGridCollectionView.init(coder:)(void *a1)
{
  v9.receiver = v1;
  v9.super_class = (Class)type metadata accessor for MOSuggestionSheetGridCollectionView();
  [super initWithCoder:a1];
  if (v3)
  {
    type metadata accessor for MOSuggestionSheetMosaicCell();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    id v5 = v3;
    NSString v6 = String._bridgeToObjectiveC()();
    [v5 registerClass:ObjCClassFromMetadata forCellWithReuseIdentifier:v6];

    [v5 setScrollEnabled:0];
    id v7 = [self whiteColor];
    [v5 setBackgroundColor:v7];

    a1 = v7;
  }

  return v3;
}

id MOSuggestionSheetGridCollectionView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MOSuggestionSheetGridCollectionView();
  return [super dealloc];
}

unint64_t MOSuggestionAssetTileSize.description.getter(char a1)
{
  switch(a1)
  {
    case 2:
      unint64_t result = 0x4C4C414D53;
      break;
    case 3:
      unint64_t result = 1414744396;
      break;
    case 4:
      unint64_t result = 0xD000000000000011;
      break;
    case 5:
      unint64_t result = 0x454752414CLL;
      break;
    case 6:
      unint64_t result = 0x414C5F4152545845;
      break;
    case 7:
      unint64_t result = 0xD000000000000015;
      break;
    case 8:
      unint64_t result = 0x455243534C4C5546;
      break;
    case 9:
    case 10:
      unint64_t result = 0xD000000000000016;
      break;
    default:
      unint64_t result = 0x524546534E415254;
      break;
  }
  return result;
}

Swift::Bool __swiftcall MOSuggestionAssetTileSize.isHighestQualityForTransfer()()
{
  return v0 - 11 < 0xFFFFFFF7;
}

Swift::Bool __swiftcall MOSuggestionAssetTileSize.isHighestQualityForTransfer3P()()
{
  return (v0 - 11 < 0xFFFFFFF7) & v0;
}

void MOSuggestionAssetTileSize.hash(into:)(uint64_t a1, char a2)
{
  if ((a2 - 2) >= 9u)
  {
    Hasher._combine(_:)(7uLL);
    Swift::UInt v2 = a2 & 1;
  }
  else
  {
    Swift::UInt v2 = qword_1001DA958[(char)(a2 - 2)];
  }
  Hasher._combine(_:)(v2);
}

Swift::Int MOSuggestionAssetTileSize.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  MOSuggestionAssetTileSize.hash(into:)((uint64_t)v3, a1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MOSuggestionAssetTileSize()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  MOSuggestionAssetTileSize.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance MOSuggestionAssetTileSize(uint64_t a1)
{
  MOSuggestionAssetTileSize.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MOSuggestionAssetTileSize()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  MOSuggestionAssetTileSize.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance MOSuggestionAssetTileSize(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized static MOSuggestionAssetTileSize.__derived_enum_equals(_:_:)(*a1, *a2);
}

uint64_t one-time initialization function for tileSizesByCount()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, [MOSuggestionAssetTileSize])>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1001DA7D0;
  *(void *)(inited + 32) = 1;
  if (one-time initialization token for oneAssetsGrid != -1) {
    swift_once();
  }
  *(void *)(inited + 40) = static MOSuggestionLayoutEngine.FullWidth.oneAssetsGrid;
  *(void *)(inited + 48) = 2;
  uint64_t v1 = one-time initialization token for twoAssetsGrid;
  swift_bridgeObjectRetain();
  if (v1 != -1) {
    swift_once();
  }
  *(void *)(inited + 56) = static MOSuggestionLayoutEngine.FullWidth.twoAssetsGrid;
  *(void *)(inited + 64) = 3;
  uint64_t v2 = one-time initialization token for threeAssetsGrid;
  swift_bridgeObjectRetain();
  if (v2 != -1) {
    swift_once();
  }
  *(void *)(inited + 72) = static MOSuggestionLayoutEngine.FullWidth.threeAssetsGrid;
  *(void *)(inited + 80) = 4;
  uint64_t v3 = one-time initialization token for fourAssetsGrid;
  swift_bridgeObjectRetain();
  if (v3 != -1) {
    swift_once();
  }
  *(void *)(inited + 88) = static MOSuggestionLayoutEngine.FullWidth.fourAssetsGrid;
  *(void *)(inited + 96) = 5;
  uint64_t v4 = one-time initialization token for fiveAssetsGrid;
  swift_bridgeObjectRetain();
  if (v4 != -1) {
    swift_once();
  }
  *(void *)(inited + 104) = static MOSuggestionLayoutEngine.FullWidth.fiveAssetsGrid;
  *(void *)(inited + 112) = 6;
  uint64_t v5 = one-time initialization token for sixAssetsGrid;
  swift_bridgeObjectRetain();
  if (v5 != -1) {
    swift_once();
  }
  *(void *)(inited + 120) = static MOSuggestionLayoutEngine.FullWidth.sixAssetsGrid;
  *(void *)(inited + 128) = 7;
  uint64_t v6 = one-time initialization token for sevenAssetsGrid;
  swift_bridgeObjectRetain();
  if (v6 != -1) {
    swift_once();
  }
  *(void *)(inited + 136) = static MOSuggestionLayoutEngine.FullWidth.sevenAssetsGrid;
  *(void *)(inited + 144) = 8;
  uint64_t v7 = one-time initialization token for eightAssetsGrid;
  swift_bridgeObjectRetain();
  if (v7 != -1) {
    swift_once();
  }
  *(void *)(inited + 152) = static MOSuggestionLayoutEngine.FullWidth.eightAssetsGrid;
  *(void *)(inited + 160) = 9;
  uint64_t v8 = one-time initialization token for nineAssetsGrid;
  swift_bridgeObjectRetain();
  if (v8 != -1) {
    swift_once();
  }
  *(void *)(inited + 168) = static MOSuggestionLayoutEngine.FullWidth.nineAssetsGrid;
  *(void *)(inited + 176) = 10;
  uint64_t v9 = one-time initialization token for tenAssetsGrid;
  swift_bridgeObjectRetain();
  if (v9 != -1) {
    swift_once();
  }
  *(void *)(inited + 184) = static MOSuggestionLayoutEngine.FullWidth.tenAssetsGrid;
  *(void *)(inited + 192) = 11;
  uint64_t v10 = one-time initialization token for elevenAssetsGrid;
  swift_bridgeObjectRetain();
  if (v10 != -1) {
    swift_once();
  }
  *(void *)(inited + 200) = static MOSuggestionLayoutEngine.FullWidth.elevenAssetsGrid;
  *(void *)(inited + 208) = 12;
  uint64_t v11 = one-time initialization token for twelveAssetsGrid;
  swift_bridgeObjectRetain();
  if (v11 != -1) {
    swift_once();
  }
  *(void *)(inited + 216) = static MOSuggestionLayoutEngine.FullWidth.twelveAssetsGrid;
  *(void *)(inited + 224) = 13;
  uint64_t v12 = one-time initialization token for thirteenAssetsGrid;
  swift_bridgeObjectRetain();
  if (v12 != -1) {
    swift_once();
  }
  *(void *)(inited + 232) = static MOSuggestionLayoutEngine.FullWidth.thirteenAssetsGrid;
  unint64_t v13 = specialized Dictionary.init(dictionaryLiteral:)((void *)inited);
  swift_setDeallocating();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, [MOSuggestionAssetTileSize]));
  uint64_t result = swift_arrayDestroy();
  static MOSuggestionLayoutEngine.FullWidth.tileSizesByCount = v13;
  return result;
}

{
  uint64_t inited;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, [MOSuggestionAssetTileSize])>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1001DA100;
  *(void *)(inited + 32) = 1;
  if (one-time initialization token for oneAssetsGrid != -1) {
    swift_once();
  }
  *(void *)(inited + 40) = static MOSuggestionLayoutEngine.HalfWidth.oneAssetsGrid;
  *(void *)(inited + 48) = 2;
  uint64_t v1 = one-time initialization token for twoAssetsGrid;
  swift_bridgeObjectRetain();
  if (v1 != -1) {
    swift_once();
  }
  *(void *)(inited + 56) = static MOSuggestionLayoutEngine.HalfWidth.twoAssetsGrid;
  *(void *)(inited + 64) = 3;
  uint64_t v2 = one-time initialization token for threeAssetsGrid;
  swift_bridgeObjectRetain();
  if (v2 != -1) {
    swift_once();
  }
  *(void *)(inited + 72) = static MOSuggestionLayoutEngine.HalfWidth.threeAssetsGrid;
  *(void *)(inited + 80) = 4;
  uint64_t v3 = one-time initialization token for fourAssetsGrid;
  swift_bridgeObjectRetain();
  if (v3 != -1) {
    swift_once();
  }
  *(void *)(inited + 88) = static MOSuggestionLayoutEngine.HalfWidth.fourAssetsGrid;
  uint64_t v4 = specialized Dictionary.init(dictionaryLiteral:)((void *)inited);
  swift_setDeallocating();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, [MOSuggestionAssetTileSize]));
  uint64_t result = swift_arrayDestroy();
  static MOSuggestionLayoutEngine.HalfWidth.tileSizesByCount = v4;
  return result;
}

{
  uint64_t inited;
  unint64_t v1;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, [MOSuggestionAssetTileSize])>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1001DA0F0;
  *(void *)(inited + 32) = 1;
  if (one-time initialization token for oneAssetsGrid != -1) {
    swift_once();
  }
  *(void *)(inited + 40) = static MOSuggestionLayoutEngine.oneAssetsGrid;
  uint64_t v1 = specialized Dictionary.init(dictionaryLiteral:)((void *)inited);
  swift_setDeallocating();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, [MOSuggestionAssetTileSize]));
  uint64_t result = swift_arrayDestroy();
  static MOSuggestionLayoutEngine.FullWidthCondensed.tileSizesByCount = v1;
  return result;
}

uint64_t *MOSuggestionLayoutEngine.FullWidth.oneAssetsGrid.unsafeMutableAddressor()
{
  if (one-time initialization token for oneAssetsGrid != -1) {
    swift_once();
  }
  return &static MOSuggestionLayoutEngine.FullWidth.oneAssetsGrid;
}

uint64_t *MOSuggestionLayoutEngine.FullWidth.twoAssetsGrid.unsafeMutableAddressor()
{
  if (one-time initialization token for twoAssetsGrid != -1) {
    swift_once();
  }
  return &static MOSuggestionLayoutEngine.FullWidth.twoAssetsGrid;
}

uint64_t *MOSuggestionLayoutEngine.FullWidth.threeAssetsGrid.unsafeMutableAddressor()
{
  if (one-time initialization token for threeAssetsGrid != -1) {
    swift_once();
  }
  return &static MOSuggestionLayoutEngine.FullWidth.threeAssetsGrid;
}

uint64_t *MOSuggestionLayoutEngine.FullWidth.fourAssetsGrid.unsafeMutableAddressor()
{
  if (one-time initialization token for fourAssetsGrid != -1) {
    swift_once();
  }
  return &static MOSuggestionLayoutEngine.FullWidth.fourAssetsGrid;
}

uint64_t *MOSuggestionLayoutEngine.FullWidth.fiveAssetsGrid.unsafeMutableAddressor()
{
  if (one-time initialization token for fiveAssetsGrid != -1) {
    swift_once();
  }
  return &static MOSuggestionLayoutEngine.FullWidth.fiveAssetsGrid;
}

uint64_t *MOSuggestionLayoutEngine.FullWidth.sixAssetsGrid.unsafeMutableAddressor()
{
  if (one-time initialization token for sixAssetsGrid != -1) {
    swift_once();
  }
  return &static MOSuggestionLayoutEngine.FullWidth.sixAssetsGrid;
}

uint64_t *MOSuggestionLayoutEngine.FullWidth.sevenAssetsGrid.unsafeMutableAddressor()
{
  if (one-time initialization token for sevenAssetsGrid != -1) {
    swift_once();
  }
  return &static MOSuggestionLayoutEngine.FullWidth.sevenAssetsGrid;
}

uint64_t *MOSuggestionLayoutEngine.FullWidth.eightAssetsGrid.unsafeMutableAddressor()
{
  if (one-time initialization token for eightAssetsGrid != -1) {
    swift_once();
  }
  return &static MOSuggestionLayoutEngine.FullWidth.eightAssetsGrid;
}

uint64_t *MOSuggestionLayoutEngine.FullWidth.nineAssetsGrid.unsafeMutableAddressor()
{
  if (one-time initialization token for nineAssetsGrid != -1) {
    swift_once();
  }
  return &static MOSuggestionLayoutEngine.FullWidth.nineAssetsGrid;
}

uint64_t *MOSuggestionLayoutEngine.FullWidth.tenAssetsGrid.unsafeMutableAddressor()
{
  if (one-time initialization token for tenAssetsGrid != -1) {
    swift_once();
  }
  return &static MOSuggestionLayoutEngine.FullWidth.tenAssetsGrid;
}

uint64_t *MOSuggestionLayoutEngine.FullWidth.elevenAssetsGrid.unsafeMutableAddressor()
{
  if (one-time initialization token for elevenAssetsGrid != -1) {
    swift_once();
  }
  return &static MOSuggestionLayoutEngine.FullWidth.elevenAssetsGrid;
}

uint64_t *MOSuggestionLayoutEngine.FullWidth.twelveAssetsGrid.unsafeMutableAddressor()
{
  if (one-time initialization token for twelveAssetsGrid != -1) {
    swift_once();
  }
  return &static MOSuggestionLayoutEngine.FullWidth.twelveAssetsGrid;
}

uint64_t *MOSuggestionLayoutEngine.FullWidth.thirteenAssetsGrid.unsafeMutableAddressor()
{
  if (one-time initialization token for thirteenAssetsGrid != -1) {
    swift_once();
  }
  return &static MOSuggestionLayoutEngine.FullWidth.thirteenAssetsGrid;
}

uint64_t *MOSuggestionLayoutEngine.FullWidth.tileSizesByCount.unsafeMutableAddressor()
{
  if (one-time initialization token for tileSizesByCount != -1) {
    swift_once();
  }
  return &static MOSuggestionLayoutEngine.FullWidth.tileSizesByCount;
}

uint64_t static MOSuggestionLayoutEngine.FullWidth.tileSizesByCount.getter()
{
  return static MOSuggestionLayoutEngine.FullWidth.tileSizesByCount.getter(&one-time initialization token for tileSizesByCount);
}

void one-time initialization function for oneAssetsGrid()
{
  static MOSuggestionLayoutEngine.FullWidth.oneAssetsGrid = (uint64_t)&outlined read-only object #0 of one-time initialization function for oneAssetsGrid;
}

{
  static MOSuggestionLayoutEngine.HalfWidth.oneAssetsGrid = (uint64_t)&outlined read-only object #0 of one-time initialization function for oneAssetsGrid;
}

{
  static MOSuggestionLayoutEngine.oneAssetsGrid = (uint64_t)&outlined read-only object #0 of one-time initialization function for oneAssetsGrid;
}

uint64_t static MOSuggestionLayoutEngine.FullWidth.oneAssetsGrid.getter()
{
  return static MOSuggestionLayoutEngine.FullWidth.tileSizesByCount.getter(&one-time initialization token for oneAssetsGrid);
}

void one-time initialization function for twoAssetsGrid()
{
  static MOSuggestionLayoutEngine.FullWidth.twoAssetsGrid = (uint64_t)&outlined read-only object #0 of one-time initialization function for twoAssetsGrid;
}

{
  static MOSuggestionLayoutEngine.HalfWidth.twoAssetsGrid = (uint64_t)&outlined read-only object #0 of one-time initialization function for twoAssetsGrid;
}

uint64_t static MOSuggestionLayoutEngine.FullWidth.twoAssetsGrid.getter()
{
  return static MOSuggestionLayoutEngine.FullWidth.tileSizesByCount.getter(&one-time initialization token for twoAssetsGrid);
}

void one-time initialization function for threeAssetsGrid()
{
  static MOSuggestionLayoutEngine.FullWidth.threeAssetsGrid = (uint64_t)&outlined read-only object #0 of one-time initialization function for threeAssetsGrid;
}

{
  static MOSuggestionLayoutEngine.HalfWidth.threeAssetsGrid = (uint64_t)&outlined read-only object #0 of one-time initialization function for threeAssetsGrid;
}

uint64_t static MOSuggestionLayoutEngine.FullWidth.threeAssetsGrid.getter()
{
  return static MOSuggestionLayoutEngine.FullWidth.tileSizesByCount.getter(&one-time initialization token for threeAssetsGrid);
}

void one-time initialization function for fourAssetsGrid()
{
  static MOSuggestionLayoutEngine.FullWidth.fourAssetsGrid = (uint64_t)&outlined read-only object #0 of one-time initialization function for fourAssetsGrid;
}

{
  static MOSuggestionLayoutEngine.HalfWidth.fourAssetsGrid = (uint64_t)&outlined read-only object #0 of one-time initialization function for fourAssetsGrid;
}

uint64_t static MOSuggestionLayoutEngine.FullWidth.fourAssetsGrid.getter()
{
  return static MOSuggestionLayoutEngine.FullWidth.tileSizesByCount.getter(&one-time initialization token for fourAssetsGrid);
}

void one-time initialization function for fiveAssetsGrid()
{
  static MOSuggestionLayoutEngine.FullWidth.fiveAssetsGrid = (uint64_t)&outlined read-only object #0 of one-time initialization function for fiveAssetsGrid;
}

uint64_t static MOSuggestionLayoutEngine.FullWidth.fiveAssetsGrid.getter()
{
  return static MOSuggestionLayoutEngine.FullWidth.tileSizesByCount.getter(&one-time initialization token for fiveAssetsGrid);
}

void one-time initialization function for sixAssetsGrid()
{
  static MOSuggestionLayoutEngine.FullWidth.sixAssetsGrid = (uint64_t)&outlined read-only object #0 of one-time initialization function for sixAssetsGrid;
}

uint64_t static MOSuggestionLayoutEngine.FullWidth.sixAssetsGrid.getter()
{
  return static MOSuggestionLayoutEngine.FullWidth.tileSizesByCount.getter(&one-time initialization token for sixAssetsGrid);
}

void one-time initialization function for sevenAssetsGrid()
{
  static MOSuggestionLayoutEngine.FullWidth.sevenAssetsGrid = (uint64_t)&outlined read-only object #0 of one-time initialization function for sevenAssetsGrid;
}

uint64_t static MOSuggestionLayoutEngine.FullWidth.sevenAssetsGrid.getter()
{
  return static MOSuggestionLayoutEngine.FullWidth.tileSizesByCount.getter(&one-time initialization token for sevenAssetsGrid);
}

void one-time initialization function for eightAssetsGrid()
{
  static MOSuggestionLayoutEngine.FullWidth.eightAssetsGrid = (uint64_t)&outlined read-only object #0 of one-time initialization function for eightAssetsGrid;
}

uint64_t static MOSuggestionLayoutEngine.FullWidth.eightAssetsGrid.getter()
{
  return static MOSuggestionLayoutEngine.FullWidth.tileSizesByCount.getter(&one-time initialization token for eightAssetsGrid);
}

void one-time initialization function for nineAssetsGrid()
{
  static MOSuggestionLayoutEngine.FullWidth.nineAssetsGrid = (uint64_t)&outlined read-only object #0 of one-time initialization function for nineAssetsGrid;
}

uint64_t static MOSuggestionLayoutEngine.FullWidth.nineAssetsGrid.getter()
{
  return static MOSuggestionLayoutEngine.FullWidth.tileSizesByCount.getter(&one-time initialization token for nineAssetsGrid);
}

void one-time initialization function for tenAssetsGrid()
{
  static MOSuggestionLayoutEngine.FullWidth.tenAssetsGrid = (uint64_t)&outlined read-only object #0 of one-time initialization function for tenAssetsGrid;
}

uint64_t static MOSuggestionLayoutEngine.FullWidth.tenAssetsGrid.getter()
{
  return static MOSuggestionLayoutEngine.FullWidth.tileSizesByCount.getter(&one-time initialization token for tenAssetsGrid);
}

void one-time initialization function for elevenAssetsGrid()
{
  static MOSuggestionLayoutEngine.FullWidth.elevenAssetsGrid = (uint64_t)&outlined read-only object #0 of one-time initialization function for elevenAssetsGrid;
}

uint64_t static MOSuggestionLayoutEngine.FullWidth.elevenAssetsGrid.getter()
{
  return static MOSuggestionLayoutEngine.FullWidth.tileSizesByCount.getter(&one-time initialization token for elevenAssetsGrid);
}

void one-time initialization function for twelveAssetsGrid()
{
  static MOSuggestionLayoutEngine.FullWidth.twelveAssetsGrid = (uint64_t)&outlined read-only object #0 of one-time initialization function for twelveAssetsGrid;
}

uint64_t static MOSuggestionLayoutEngine.FullWidth.twelveAssetsGrid.getter()
{
  return static MOSuggestionLayoutEngine.FullWidth.tileSizesByCount.getter(&one-time initialization token for twelveAssetsGrid);
}

void one-time initialization function for thirteenAssetsGrid()
{
  static MOSuggestionLayoutEngine.FullWidth.thirteenAssetsGrid = (uint64_t)&outlined read-only object #0 of one-time initialization function for thirteenAssetsGrid;
}

uint64_t static MOSuggestionLayoutEngine.FullWidth.thirteenAssetsGrid.getter()
{
  return static MOSuggestionLayoutEngine.FullWidth.tileSizesByCount.getter(&one-time initialization token for thirteenAssetsGrid);
}

uint64_t *MOSuggestionLayoutEngine.HalfWidth.oneAssetsGrid.unsafeMutableAddressor()
{
  if (one-time initialization token for oneAssetsGrid != -1) {
    swift_once();
  }
  return &static MOSuggestionLayoutEngine.HalfWidth.oneAssetsGrid;
}

uint64_t *MOSuggestionLayoutEngine.HalfWidth.twoAssetsGrid.unsafeMutableAddressor()
{
  if (one-time initialization token for twoAssetsGrid != -1) {
    swift_once();
  }
  return &static MOSuggestionLayoutEngine.HalfWidth.twoAssetsGrid;
}

uint64_t *MOSuggestionLayoutEngine.HalfWidth.threeAssetsGrid.unsafeMutableAddressor()
{
  if (one-time initialization token for threeAssetsGrid != -1) {
    swift_once();
  }
  return &static MOSuggestionLayoutEngine.HalfWidth.threeAssetsGrid;
}

uint64_t *MOSuggestionLayoutEngine.HalfWidth.fourAssetsGrid.unsafeMutableAddressor()
{
  if (one-time initialization token for fourAssetsGrid != -1) {
    swift_once();
  }
  return &static MOSuggestionLayoutEngine.HalfWidth.fourAssetsGrid;
}

uint64_t *MOSuggestionLayoutEngine.HalfWidth.tileSizesByCount.unsafeMutableAddressor()
{
  if (one-time initialization token for tileSizesByCount != -1) {
    swift_once();
  }
  return &static MOSuggestionLayoutEngine.HalfWidth.tileSizesByCount;
}

uint64_t static MOSuggestionLayoutEngine.HalfWidth.tileSizesByCount.getter()
{
  return static MOSuggestionLayoutEngine.FullWidth.tileSizesByCount.getter(&one-time initialization token for tileSizesByCount);
}

uint64_t static MOSuggestionLayoutEngine.HalfWidth.oneAssetsGrid.getter()
{
  return static MOSuggestionLayoutEngine.FullWidth.tileSizesByCount.getter(&one-time initialization token for oneAssetsGrid);
}

uint64_t static MOSuggestionLayoutEngine.HalfWidth.twoAssetsGrid.getter()
{
  return static MOSuggestionLayoutEngine.FullWidth.tileSizesByCount.getter(&one-time initialization token for twoAssetsGrid);
}

uint64_t static MOSuggestionLayoutEngine.HalfWidth.threeAssetsGrid.getter()
{
  return static MOSuggestionLayoutEngine.FullWidth.tileSizesByCount.getter(&one-time initialization token for threeAssetsGrid);
}

uint64_t static MOSuggestionLayoutEngine.HalfWidth.fourAssetsGrid.getter()
{
  return static MOSuggestionLayoutEngine.FullWidth.tileSizesByCount.getter(&one-time initialization token for fourAssetsGrid);
}

uint64_t *MOSuggestionLayoutEngine.oneAssetsGrid.unsafeMutableAddressor()
{
  if (one-time initialization token for oneAssetsGrid != -1) {
    swift_once();
  }
  return &static MOSuggestionLayoutEngine.oneAssetsGrid;
}

uint64_t *MOSuggestionLayoutEngine.FullWidthCondensed.tileSizesByCount.unsafeMutableAddressor()
{
  if (one-time initialization token for tileSizesByCount != -1) {
    swift_once();
  }
  return &static MOSuggestionLayoutEngine.FullWidthCondensed.tileSizesByCount;
}

uint64_t static MOSuggestionLayoutEngine.FullWidthCondensed.tileSizesByCount.getter()
{
  return static MOSuggestionLayoutEngine.FullWidth.tileSizesByCount.getter(&one-time initialization token for tileSizesByCount);
}

uint64_t static MOSuggestionLayoutEngine.FullWidth.tileSizesByCount.getter(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

uint64_t static MOSuggestionLayoutEngine.oneAssetsGrid.getter()
{
  if (one-time initialization token for oneAssetsGrid != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

double static MOSuggestionLayoutEngine.viewportFromTileSize(_:)(char a1)
{
  if ((a1 - 2) > 8u) {
    return 300.0;
  }
  else {
    return dbl_1001DA9A0[(char)(a1 - 2)];
  }
}

double static MOSuggestionLayoutEngine.heightToWidthRatio(_:)(char a1)
{
  double result = 1.0;
  if ((a1 - 2) <= 8u) {
    return dbl_1001DA9E8[(char)(a1 - 2)] / dbl_1001DA9A0[(char)(a1 - 2)];
  }
  return result;
}

double static MOSuggestionLayoutEngine.widthToHeightRatio(_:)(char a1)
{
  double v1 = 1.0;
  if ((a1 - 2) <= 8u) {
    double v1 = dbl_1001DA9E8[(char)(a1 - 2)] / dbl_1001DA9A0[(char)(a1 - 2)];
  }
  return 1.0 / v1;
}

BOOL specialized static MOSuggestionAssetTileSize.__derived_enum_equals(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  switch(a1)
  {
    case 2u:
      if (a2 != 2) {
        goto LABEL_21;
      }
      BOOL result = 1;
      break;
    case 3u:
      if (a2 != 3) {
        goto LABEL_21;
      }
      BOOL result = 1;
      break;
    case 4u:
      if (a2 != 4) {
        goto LABEL_21;
      }
      BOOL result = 1;
      break;
    case 5u:
      if (a2 != 5) {
        goto LABEL_21;
      }
      BOOL result = 1;
      break;
    case 6u:
      if (a2 != 6) {
        goto LABEL_21;
      }
      BOOL result = 1;
      break;
    case 7u:
      if (a2 != 7) {
        goto LABEL_21;
      }
      BOOL result = 1;
      break;
    case 8u:
      if (a2 != 8) {
        goto LABEL_21;
      }
      BOOL result = 1;
      break;
    case 9u:
      if (a2 != 9) {
        goto LABEL_21;
      }
      BOOL result = 1;
      break;
    case 0xAu:
      if (a2 != 10) {
        goto LABEL_21;
      }
      BOOL result = 1;
      break;
    default:
      if (a2 - 2 >= 9) {
        BOOL result = ((a2 ^ a1) & 1) == 0;
      }
      else {
LABEL_21:
      }
        BOOL result = 0;
      break;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MOSuggestionAssetTransferDelivery and conformance MOSuggestionAssetTransferDelivery()
{
  unint64_t result = lazy protocol witness table cache variable for type MOSuggestionAssetTransferDelivery and conformance MOSuggestionAssetTransferDelivery;
  if (!lazy protocol witness table cache variable for type MOSuggestionAssetTransferDelivery and conformance MOSuggestionAssetTransferDelivery)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MOSuggestionAssetTransferDelivery and conformance MOSuggestionAssetTransferDelivery);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MOSuggestionAssetTileSize and conformance MOSuggestionAssetTileSize()
{
  unint64_t result = lazy protocol witness table cache variable for type MOSuggestionAssetTileSize and conformance MOSuggestionAssetTileSize;
  if (!lazy protocol witness table cache variable for type MOSuggestionAssetTileSize and conformance MOSuggestionAssetTileSize)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MOSuggestionAssetTileSize and conformance MOSuggestionAssetTileSize);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for MOSuggestionAssetTransferDelivery(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100049DACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MOSuggestionAssetTransferDelivery()
{
  return &type metadata for MOSuggestionAssetTransferDelivery;
}

uint64_t getEnumTagSinglePayload for MOSuggestionAssetTileSize(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF6)
  {
    unsigned int v2 = a2 + 10;
    if (a2 + 10 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 10;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 10;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x100049E94);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 10;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  if (v7 >= 2) {
    unsigned int v8 = v7 - 1;
  }
  else {
    unsigned int v8 = 0;
  }
  if (v8 >= 0xA) {
    return v8 - 9;
  }
  else {
    return 0;
  }
}

unsigned char *storeEnumTagSinglePayload for MOSuggestionAssetTileSize(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 10;
  if (a3 + 10 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xF6) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v7 = ((a2 - 246) >> 8) + 1;
    *unint64_t result = a2 + 10;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x100049F7CLL);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *unint64_t result = a2 + 10;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for MOSuggestionAssetTileSize(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 >= 2) {
    return v1 - 1;
  }
  else {
    return 0;
  }
}

unsigned char *destructiveInjectEnumTag for MOSuggestionAssetTileSize(unsigned char *result, int a2)
{
  if (a2) {
    *unint64_t result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for MOSuggestionAssetTileSize()
{
  return &type metadata for MOSuggestionAssetTileSize;
}

uint64_t type metadata accessor for MOSuggestionLayoutEngine()
{
  return self;
}

ValueMetadata *type metadata accessor for MOSuggestionLayoutEngine.FullWidth()
{
  return &type metadata for MOSuggestionLayoutEngine.FullWidth;
}

ValueMetadata *type metadata accessor for MOSuggestionLayoutEngine.HalfWidth()
{
  return &type metadata for MOSuggestionLayoutEngine.HalfWidth;
}

ValueMetadata *type metadata accessor for MOSuggestionLayoutEngine.FullWidthCondensed()
{
  return &type metadata for MOSuggestionLayoutEngine.FullWidthCondensed;
}

uint64_t one-time initialization function for queue()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  unsigned int v3 = (char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  static DispatchQoS.userInteractive.getter();
  v7[1] = _swiftEmptyArrayStorage;
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  static MOSuggestionAssetStateOfMindProvider.queue = result;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  void v7[2];

  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  unsigned int v3 = (char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  static DispatchQoS.userInteractive.getter();
  v7[1] = _swiftEmptyArrayStorage;
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  static MOSuggestionAssetWorkoutProvider.queue = result;
  return result;
}

uint64_t *MOSuggestionAssetStateOfMindProvider.queue.unsafeMutableAddressor()
{
  if (one-time initialization token for queue != -1) {
    swift_once();
  }
  return &static MOSuggestionAssetStateOfMindProvider.queue;
}

id static MOSuggestionAssetStateOfMindProvider.queue.getter()
{
  if (one-time initialization token for queue != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static MOSuggestionAssetStateOfMindProvider.queue;

  return v0;
}

void MOSuggestionAssetStateOfMindProvider.getStateOfMind(stateOfMindUUID:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  unsigned int v7 = self;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v9 = [v7 predicateForObjectWithUUID:isa];

  id v10 = [self stateOfMindType];
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a2;
  *(void *)(v11 + 24) = a3;
  id v12 = objc_allocWithZone((Class)HKSampleQuery);
  v15[4] = partial apply for closure #1 in MOSuggestionAssetStateOfMindProvider.getStateOfMind(stateOfMindUUID:completion:);
  v15[5] = v11;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 1107296256;
  v15[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed HKSampleQuery, @guaranteed [HKSample]?, @guaranteed Error?) -> ();
  v15[3] = &block_descriptor_2;
  unint64_t v13 = _Block_copy(v15);
  swift_retain();
  id v14 = [v12 initWithSampleType:v10 predicate:v9 limit:1 sortDescriptors:0 resultsHandler:v13];

  _Block_release(v13);
  swift_release();
  [*(id *)(v4 + 16) executeQuery:v14];
}

void closure #1 in MOSuggestionAssetStateOfMindProvider.getStateOfMind(stateOfMindUUID:completion:)(uint64_t a1, unint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  if (!a2) {
    goto LABEL_14;
  }
  uint64_t v6 = a2 & 0xFFFFFFFFFFFFFF8;
  if (!(a2 >> 62))
  {
    uint64_t v7 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v7) {
      goto LABEL_4;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_13;
  }
LABEL_4:
  if ((a2 & 0xC000000000000001) != 0)
  {
    id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)(v6 + 16))
    {
      __break(1u);
      return;
    }
    id v8 = *(id *)(a2 + 32);
  }
  id v9 = v8;
  swift_bridgeObjectRelease();
  self;
  uint64_t v10 = swift_dynamicCastObjCClass();
  if (!v10)
  {

LABEL_14:
    a4(0);
    return;
  }
  uint64_t v11 = v10;
  id v12 = v9;
  a4(v11);
}

uint64_t sub_10004A5D8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void partial apply for closure #1 in MOSuggestionAssetStateOfMindProvider.getStateOfMind(stateOfMindUUID:completion:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  closure #1 in MOSuggestionAssetStateOfMindProvider.getStateOfMind(stateOfMindUUID:completion:)(a1, a2, a3, *(void (**)(uint64_t))(v3 + 16));
}

void static MOSuggestionAssetStateOfMindProvider.getAssetFor(valence:cacheType:completion:)(uint64_t a1, void (*a2)(void))
{
  uint64_t v3 = type metadata accessor for StateOfMindVisualization.ValenceImageProvider.ImageScale();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for StateOfMindVisualization.ValenceImageProvider();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for StateOfMindVisualization.ValenceImageProvider.ImageScale.confirmationView(_:), v3);
  StateOfMindVisualization.ValenceImageProvider.init(valence:imageScale:)();
  uint64_t v11 = (void *)StateOfMindVisualization.ValenceImageProvider.uiImage.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v12 = MOSuggestionAssetsTypeStateOfMindAsset;
  type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  id v13 = [objc_allocWithZone((Class)MOSuggestionAsset) init:v11 type:v12 contentClassType:swift_getObjCClassFromMetadata()];
  a2();
}

uint64_t static MOSuggestionAssetStateOfMindProvider.getBackgroundColor(valence:style:)()
{
  return static CAGradientLayer.gradientLayerForValence(_:style:)();
}

uint64_t static MOSuggestionAssetStateOfMindProvider.getValenceClassificationAndReflectiveIntervalLocalized(valenceClassification:reflectiveInterval:)()
{
  id v0 = (id)HKUILocalizedStringForValenceClassificationAndReflectiveInterval();
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v1;
}

uint64_t MOSuggestionAssetStateOfMindProvider.deinit()
{
  return v0;
}

uint64_t MOSuggestionAssetStateOfMindProvider.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t MOSuggestionAssetStateOfMindProvider.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = [objc_allocWithZone((Class)HKHealthStore) init];
  return v0;
}

uint64_t MOSuggestionAssetStateOfMindProvider.init()()
{
  *(void *)(v0 + 16) = [objc_allocWithZone((Class)HKHealthStore) init];
  return v0;
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@guaranteed HKSampleQuery, @guaranteed [HKSample]?, @guaranteed Error?) -> ()(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v7 = *(void (**)(id, uint64_t, void *))(a1 + 32);
  if (a3)
  {
    type metadata accessor for UIApplication(0, &lazy cache variable for type metadata for HKSample);
    uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  id v8 = a2;
  id v9 = a4;
  v7(v8, v5, a4);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

unint64_t specialized static MOSuggestionAssetStateOfMindProvider.getLabelsLocalized(labelResource:)(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v2 = 0;
  uint64_t v3 = _swiftEmptyArrayStorage;
  do
  {
    swift_bridgeObjectRelease();
    id v4 = (id)HKUILocalizedStringForStateOfMindLabel();
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;

    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v3 = (double *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v3 + 2) + 1, 1, v3);
    }
    unint64_t v9 = *((void *)v3 + 2);
    unint64_t v8 = *((void *)v3 + 3);
    if (v9 >= v8 >> 1) {
      uint64_t v3 = (double *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, v3);
    }
    ++v2;
    *((void *)v3 + 2) = v9 + 1;
    uint64_t v10 = &v3[2 * v9];
    *((void *)v10 + 4) = v5;
    *((void *)v10 + 5) = v7;
  }
  while (v1 != v2);
  swift_bridgeObjectRelease();
  if (*((void *)v3 + 2) < 2uLL) {
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
  uint64_t v11 = self;
  swift_bridgeObjectRetain();
  id v12 = [v11 mainBundle];
  v22._uint64_t countAndFlagsBits = 0xD000000000000025;
  v22._object = (void *)0x80000001001E2AF0;
  v13._uint64_t countAndFlagsBits = 8236;
  v13._object = (void *)0xE200000000000000;
  v14._uint64_t countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v13, (Swift::String_optional)0, (NSBundle)v12, v14, v22);

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [String]);
  uint64_t v5 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*((void *)v3 + 2) < 3uLL)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    return v5;
  }
  id v15 = [self mainBundle];
  v16._uint64_t countAndFlagsBits = 0xD000000000000036;
  v23._uint64_t countAndFlagsBits = 0xD0000000000000A2;
  v23._object = (void *)0x80000001001E2A40;
  v16._object = (void *)0x80000001001E2A00;
  v17._object = (void *)0x80000001001E2900;
  v17._uint64_t countAndFlagsBits = 0xD000000000000010;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v16, (Swift::String_optional)0, (NSBundle)v15, v17, v23);

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_1001DA390;
  *(void *)(v18 + 56) = &type metadata for String;
  unint64_t result = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v18 + 64) = result;
  if (*((void *)v3 + 2))
  {
    unint64_t v20 = result;
    unint64_t result = *((void *)v3 + 5);
    *(double *)(v18 + 32) = v3[4];
    *(void *)(v18 + 40) = result;
    *(void *)(v18 + 96) = &type metadata for String;
    *(void *)(v18 + 104) = v20;
    if (*((void *)v3 + 2) >= 2uLL)
    {
      uint64_t v21 = *((void *)v3 + 7);
      *(double *)(v18 + 72) = v3[6];
      *(void *)(v18 + 80) = v21;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      static String.localizedStringWithFormat(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v5;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t specialized static MOSuggestionAssetStateOfMindProvider.getDomainsLocalized(domainResource:)(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v2 = 0;
  uint64_t v3 = _swiftEmptyArrayStorage;
  do
  {
    swift_bridgeObjectRelease();
    id v4 = (id)HKUILocalizedStringForStateOfMindDomain();
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;

    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v3 = (double *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v3 + 2) + 1, 1, v3);
    }
    unint64_t v9 = *((void *)v3 + 2);
    unint64_t v8 = *((void *)v3 + 3);
    if (v9 >= v8 >> 1) {
      uint64_t v3 = (double *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, v3);
    }
    ++v2;
    *((void *)v3 + 2) = v9 + 1;
    uint64_t v10 = &v3[2 * v9];
    *((void *)v10 + 4) = v5;
    *((void *)v10 + 5) = v7;
  }
  while (v1 != v2);
  swift_bridgeObjectRelease();
  if (*((void *)v3 + 2) < 2uLL) {
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
  uint64_t v11 = self;
  swift_bridgeObjectRetain();
  id v12 = [v11 mainBundle];
  v22._uint64_t countAndFlagsBits = 0xD000000000000026;
  v22._object = (void *)0x80000001001E29D0;
  v13._uint64_t countAndFlagsBits = 8236;
  v13._object = (void *)0xE200000000000000;
  v14._uint64_t countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v13, (Swift::String_optional)0, (NSBundle)v12, v14, v22);

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [String]);
  uint64_t v5 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*((void *)v3 + 2) < 3uLL)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    return v5;
  }
  id v15 = [self mainBundle];
  v16._uint64_t countAndFlagsBits = 0xD000000000000038;
  v23._uint64_t countAndFlagsBits = 0xD0000000000000A6;
  v23._object = (void *)0x80000001001E2920;
  v16._object = (void *)0x80000001001E28C0;
  v17._object = (void *)0x80000001001E2900;
  v17._uint64_t countAndFlagsBits = 0xD000000000000010;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v16, (Swift::String_optional)0, (NSBundle)v15, v17, v23);

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_1001DA390;
  *(void *)(v18 + 56) = &type metadata for String;
  unint64_t result = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v18 + 64) = result;
  if (*((void *)v3 + 2))
  {
    unint64_t v20 = result;
    unint64_t result = *((void *)v3 + 5);
    *(double *)(v18 + 32) = v3[4];
    *(void *)(v18 + 40) = result;
    *(void *)(v18 + 96) = &type metadata for String;
    *(void *)(v18 + 104) = v20;
    if (*((void *)v3 + 2) >= 2uLL)
    {
      uint64_t v21 = *((void *)v3 + 7);
      *(double *)(v18 + 72) = v3[6];
      *(void *)(v18 + 80) = v21;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      static String.localizedStringWithFormat(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v5;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for MOSuggestionAssetStateOfMindProvider()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes()
{
  unint64_t result = lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes;
  if (!lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes)
  {
    type metadata accessor for OS_dispatch_queue.Attributes();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [String] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *MOSuggestionCollectionViewSingleAssetCell.reuseIdentifier.unsafeMutableAddressor()
{
  return &static MOSuggestionCollectionViewSingleAssetCell.reuseIdentifier;
}

unint64_t static MOSuggestionCollectionViewSingleAssetCell.reuseIdentifier.getter()
{
  return 0xD000000000000029;
}

id closure #1 in variable initialization expression of MOSuggestionCollectionViewSingleAssetCell.titleLabel()
{
  id v0 = [objc_allocWithZone((Class)UILabel) init];
  [v0 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v0 setLineBreakMode:4];
  [v0 setNumberOfLines:2];
  [v0 setBaselineAdjustment:2];
  id v1 = [self labelColor];
  [v0 setTextColor:v1];

  [v0 setTextAlignment:4];
  [v0 setAdjustsFontForContentSizeCategory:1];
  [v0 setMaximumContentSizeCategory:UIContentSizeCategoryAccessibilityExtraExtraLarge];
  return v0;
}

id closure #1 in variable initialization expression of MOSuggestionCollectionViewSingleAssetCell.subtitleLabel()
{
  id v0 = [objc_allocWithZone((Class)UILabel) init];
  [v0 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v0 setLineBreakMode:4];
  [v0 setNumberOfLines:2];
  id v1 = [self secondaryLabelColor];
  [v0 setTextColor:v1];

  [v0 setTextAlignment:4];
  [v0 setBaselineAdjustment:2];
  [v0 setAdjustsFontForContentSizeCategory:1];
  [v0 setMaximumContentSizeCategory:UIContentSizeCategoryAccessibilityExtraExtraLarge];
  return v0;
}

void (__swiftcall *variable initialization expression of MOSuggestionCollectionViewSingleAssetCell.accessoryButtonAction())()
{
  return MOSuggestionInterstitialExpandableListViewCellConstants.init();
}

uint64_t key path setter for MOSuggestionCollectionViewSingleAssetCell.accessoryButtonAction : MOSuggestionCollectionViewSingleAssetCell(uint64_t *a1, void **a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  uint64_t v6 = *(uint64_t (**)(uint64_t (*)(), uint64_t))((swift_isaMask & **a2) + 0x90);
  swift_retain();
  return v6(partial apply for thunk for @escaping @callee_guaranteed () -> (@out ()), v5);
}

uint64_t MOSuggestionCollectionViewSingleAssetCell.accessoryButtonAction.getter()
{
  id v1 = (uint64_t *)(v0
                 + OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_accessoryButtonAction);
  swift_beginAccess();
  uint64_t v2 = *v1;
  swift_retain();
  return v2;
}

uint64_t MOSuggestionCollectionViewSingleAssetCell.accessoryButtonAction.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t *)(v2
                 + OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_accessoryButtonAction);
  swift_beginAccess();
  *uint64_t v5 = a1;
  v5[1] = a2;
  swift_retain();
  swift_release();
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  unint64_t v8 = *(void (**)(uint64_t, uint64_t))((swift_isaMask & **(void **)(v2
                                                                              + OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_journalButton))
                                               + 0x68);
  swift_retain();
  v8(v6, v7);
  return swift_release();
}

void (*MOSuggestionCollectionViewSingleAssetCell.accessoryButtonAction.modify(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_accessoryButtonAction;
  v3[3] = v1;
  v3[4] = v4;
  swift_beginAccess();
  return MOSuggestionCollectionViewSingleAssetCell.accessoryButtonAction.modify;
}

void MOSuggestionCollectionViewSingleAssetCell.accessoryButtonAction.modify(void **a1, char a2)
{
  uint64_t v3 = *a1;
  swift_endAccess();
  if ((a2 & 1) == 0)
  {
    uint64_t v4 = v3[3];
    uint64_t v5 = (uint64_t *)(v4 + v3[4]);
    uint64_t v6 = *v5;
    uint64_t v7 = v5[1];
    unint64_t v8 = *(void (**)(uint64_t, uint64_t))((swift_isaMask & **(void **)(v4
                                                                                + OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_journalButton))
                                                 + 0x68);
    swift_retain();
    v8(v6, v7);
  }

  free(v3);
}

uint64_t MOSuggestionCollectionViewSingleAssetCell.cellViewModel.didset()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)((char *)v0 + OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_titleLabel);
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  NSString v4 = (NSString)Strong;
  if (Strong)
  {
    (*(void (**)(uint64_t))(*(void *)Strong + 176))(Strong);
    swift_release();
    NSString v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  [v2 setText:v4];

  id v5 = specialized static MOSuggestionTheme.Fonts.footnoteEmphShortFont()();
  UILabel.setLineSpacing(lineSpacing:lineHeightMultiple:baselineOffset:font:)(v5, 0.0, 0.95, 0.0);

  uint64_t v6 = *(void **)((char *)v1
                + OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_subtitleLabel);
  uint64_t v7 = swift_weakLoadStrong();
  NSString v8 = (NSString)v7;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 376))(v7);
    swift_release();
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  [v6 setText:v8];

  id v9 = specialized static MOSuggestionTheme.Fonts.footnoteShortFont()();
  UILabel.setLineSpacing(lineSpacing:lineHeightMultiple:baselineOffset:font:)(v9, 0.0, 0.95, 0.0);

  uint64_t v10 = swift_weakLoadStrong();
  if (v10)
  {
    char v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 224))(v10);
    swift_release();
    uint64_t v12 = v11 & 1;
  }
  else
  {
    uint64_t v12 = 2;
  }
  uint64_t v13 = swift_weakLoadStrong();
  if (v13)
  {
    char v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 248))(v13);
    swift_release();
    uint64_t v15 = v14 & 1;
  }
  else
  {
    uint64_t v15 = 2;
  }
  (*(void (**)(uint64_t, uint64_t))((swift_isaMask & *v1) + 0xD8))(v12, v15);
  Swift::String v16 = *(void **)((char *)v1
                   + OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_assetGridView);
  uint64_t v17 = swift_weakLoadStrong();
  if (v17)
  {
    uint64_t v18 = (*(uint64_t (**)(void))(*(void *)v17 + 392))();
    swift_release();
  }
  else
  {
    uint64_t v18 = 0;
  }
  (*(void (**)(uint64_t))((swift_isaMask & *v16) + 0x110))(v18);
  uint64_t v19 = *(void **)((char *)v1
                   + OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_journalButton);
  uint64_t v20 = swift_weakLoadStrong();
  if (v20)
  {
    uint64_t v21 = *(unsigned __int8 *)(v20 + 80);
    swift_release();
  }
  else
  {
    uint64_t v21 = 0;
  }
  return (*(uint64_t (**)(uint64_t))((swift_isaMask & *v19) + 0x98))(v21);
}

uint64_t MOSuggestionCollectionViewSingleAssetCell.cellViewModel.getter()
{
  return swift_weakLoadStrong();
}

uint64_t MOSuggestionCollectionViewSingleAssetCell.cellViewModel.setter()
{
  return swift_release();
}

void (*MOSuggestionCollectionViewSingleAssetCell.cellViewModel.modify(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_cellViewModel;
  v3[4] = v1;
  v3[5] = v4;
  swift_beginAccess();
  v3[3] = swift_weakLoadStrong();
  return MOSuggestionCollectionViewSingleAssetCell.cellViewModel.modify;
}

void MOSuggestionCollectionViewSingleAssetCell.cellViewModel.modify(void **a1, char a2)
{
  uint64_t v3 = *a1;
  swift_weakAssign();
  if (a2)
  {
    swift_release();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_release();
    MOSuggestionCollectionViewSingleAssetCell.cellViewModel.didset();
  }

  free(v3);
}

char *MOSuggestionCollectionViewSingleAssetCell.init(frame:)(double a1, double a2, double a3, double a4)
{
  uint64_t v9 = OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_assetGridView;
  type metadata accessor for MOSuggestionSheetAssetGridView();
  id v10 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  char v11 = v4;
  *(void *)&v4[v9] = [v10 init];
  uint64_t v12 = OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_titleLabel;
  *(void *)&v11[v12] = closure #1 in variable initialization expression of MOSuggestionCollectionViewSingleAssetCell.titleLabel();
  uint64_t v13 = OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_subtitleLabel;
  *(void *)&v11[v13] = closure #1 in variable initialization expression of MOSuggestionCollectionViewSingleAssetCell.subtitleLabel();
  uint64_t v14 = OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_journalButton;
  uint64_t v15 = (objc_class *)type metadata accessor for MOSuggestionSheetJournalButton();
  Swift::String v16 = objc_allocWithZone(v15);
  uint64_t v17 = &v16[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetJournalButton_buttonTapped];
  void *v17 = 0;
  v17[1] = 0;
  v16[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetJournalButton_singleCellAsset] = 1;
  v40.receiver = v16;
  v40.super_class = v15;
  id v18 = [super initWithFrame:0.0, 0.0, 0.0, 0.0];
  MOSuggestionSheetJournalButton.sharedInit()();

  *(void *)&v11[v14] = v18;
  uint64_t v19 = (void (__swiftcall **)())&v11[OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_accessoryButtonAction];
  *uint64_t v19 = MOSuggestionInterstitialExpandableListViewCellConstants.init();
  v19[1] = 0;
  swift_weakInit();
  uint64_t v20 = OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_platterView;
  id v21 = [objc_allocWithZone((Class)UIView) init];
  id v22 = [v21 traitCollection];
  id v23 = [v22 userInterfaceStyle];

  specialized static MOSuggestionTheme.Styles.styleViewAsPlatter(view:traitCollection:)(v21, (uint64_t)v23);
  *(void *)&v11[v20] = v21;

  v39.receiver = v11;
  v39.super_class = (Class)type metadata accessor for MOSuggestionCollectionViewSingleAssetCell();
  unint64_t v24 = [(char *)[super initWithFrame:a1 a2:a2 a3:a3 a4:a4]];
  uint64_t v25 = OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_assetGridView;
  int64_t v26 = *(void **)&v24[OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_assetGridView];
  unint64_t v27 = *(void (**)(void))((swift_isaMask & *v26) + 0x128);
  CGRect v28 = v24;
  unint64_t v29 = v26;
  v27(0);

  id v30 = [v28 contentView];
  uint64_t v31 = OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_platterView;
  [v30 addSubview:*(void *)&v28[OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_platterView]];

  [*(id *)&v28[v31] addSubview:*(void *)&v24[v25]];
  [v28 addSubview:*(void *)&v28[OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_titleLabel]];
  [v28 addSubview:*(void *)&v28[OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_subtitleLabel]];
  id v32 = [v28 addSubview:*(void *)&v28[OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_journalButton]];
  (*(void (**)(id))((swift_isaMask & *(void *)v28) + 0xE0))(v32);
  id v33 = self;
  unint64_t v34 = v28;
  id v35 = [v33 clearColor];
  [v34 setBackgroundColor:v35];

  [v34 setClipsToBounds:0];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UITraitDefinition.Type>);
  uint64_t v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = xmmword_1001DA0F0;
  *(void *)(v36 + 32) = type metadata accessor for UITraitUserInterfaceStyle();
  *(void *)(v36 + 40) = &protocol witness table for UITraitUserInterfaceStyle;
  CGFloat v37 = v34;
  UIView.registerForTraitChanges(_:action:)();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return v37;
}

Swift::Void __swiftcall MOSuggestionCollectionViewSingleAssetCell.handleTraitChange()()
{
  id v3 = *(id *)&v0[OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_platterView];
  id v1 = [v0 traitCollection];
  id v2 = [v1 userInterfaceStyle];

  specialized static MOSuggestionTheme.Styles.styleViewAsPlatter(view:traitCollection:)(v3, (uint64_t)v2);
}

Swift::Void __swiftcall MOSuggestionCollectionViewSingleAssetCell.setInteractionState(added:saved:)(Swift::Bool_optional added, Swift::Bool_optional saved)
{
  if (added.value)
  {
    id v3 = *(void **)(v2 + OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_assetGridView);
    (*(void (**)(void))((swift_isaMask & *v3) + 0x1B0))(0);
  }
  else
  {
    if (!saved.value) {
      return;
    }
    id v3 = *(void **)(v2 + OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_assetGridView);
    (*(void (**)(uint64_t))((swift_isaMask & *v3) + 0x1B0))(1);
  }
  (*(void (**)(uint64_t))((swift_isaMask & *v3) + 0x188))(1);
}

Swift::Void __swiftcall MOSuggestionCollectionViewSingleAssetCell.setupConstraints()()
{
  id v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_platterView;
  id v3 = *(id *)&v0[OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_platterView];
  uint64_t v4 = &selRef_collectionView_didSelectItemAtIndexPath_;
  id v5 = [v3 superview];
  uint64_t v6 = &selRef_collectionView_didSelectItemAtIndexPath_;
  if (v5)
  {
    uint64_t v7 = v5;
    [v3 setTranslatesAutoresizingMaskIntoConstraints:0];
    id v8 = [v3 topAnchor];
    id v9 = [v7 topAnchor];
    id v10 = [v8 constraintEqualToAnchor:v9];

    [v10 setConstant:4.0];
    if (v10)
    {
      id v10 = v10;
      [v10 setActive:1];

      id v3 = v10;
    }

    uint64_t v6 = &selRef_collectionView_didSelectItemAtIndexPath_;
  }
  else
  {
    id v10 = 0;
    uint64_t v7 = v3;
  }

  id v11 = *(id *)&v1[v2];
  id v12 = [v11 superview];
  if (v12)
  {
    uint64_t v13 = v12;
    [v11 v6[92]:0];
    id v14 = [v11 leadingAnchor];
    id v15 = [v13 leadingAnchor];
    id v16 = [v14 constraintEqualToAnchor:v15];

    [v16 setConstant:4.0];
    if (v16)
    {
      id v16 = v16;
      [v16 setActive:1];

      id v11 = v16;
    }

    uint64_t v4 = &selRef_collectionView_didSelectItemAtIndexPath_;
  }
  else
  {
    id v16 = 0;
    uint64_t v13 = v11;
  }

  id v17 = *(id *)&v1[v2];
  id v18 = [v17 v4[140]];
  if (v18)
  {
    uint64_t v19 = v18;
    [v17 v6[92]];
    id v20 = [v17 trailingAnchor];
    id v21 = [v19 trailingAnchor];
    id v22 = [v20 constraintEqualToAnchor:v21];

    [v22 setConstant:-4.0];
    if (v22)
    {
      id v22 = v22;
      [v22 setActive:1];

      id v17 = v22;
    }
  }
  else
  {
    id v22 = 0;
    uint64_t v19 = v17;
  }

  id v23 = *(void **)&v1[OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_assetGridView];
  UIView.fillSuper(margin:)(0.0);
  swift_bridgeObjectRelease();
  objc_super v65 = self;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_1001DA530;
  id v25 = [v23 heightAnchor];
  id v26 = [v23 widthAnchor];
  id v27 = [v25 constraintEqualToAnchor:v26];

  *(void *)(v24 + 32) = v27;
  CGRect v28 = *(void **)&v1[OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_titleLabel];
  id v29 = [v28 topAnchor];
  id v30 = [*(id *)&v1[v2] bottomAnchor];
  id v31 = [v29 constraintEqualToAnchor:v30 constant:8.0];

  *(void *)(v24 + 40) = v31;
  id v32 = [v28 leadingAnchor];
  id v33 = [v1 leadingAnchor];
  id v34 = [v32 constraintEqualToAnchor:v33 constant:5.0];

  *(void *)(v24 + 48) = v34;
  id v35 = [v28 trailingAnchor];
  uint64_t v36 = *(void **)&v1[OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_journalButton];
  id v37 = [v36 leadingAnchor];
  id v38 = [v35 constraintEqualToAnchor:v37 constant:-5.0];

  *(void *)(v24 + 56) = v38;
  id v39 = [v36 topAnchor];
  id v40 = [*(id *)&v1[v2] bottomAnchor];
  id v41 = [v39 constraintEqualToAnchor:v40 constant:10.0];

  *(void *)(v24 + 64) = v41;
  id v42 = [v36 trailingAnchor];
  id v43 = [*(id *)&v1[v2] trailingAnchor];
  id v44 = [v42 constraintEqualToAnchor:v43 constant:-4.0];

  *(void *)(v24 + 72) = v44;
  id v45 = [v36 widthAnchor];
  id v46 = [v45 constraintGreaterThanOrEqualToConstant:27.0];

  *(void *)(v24 + 80) = v46;
  id v47 = [v36 widthAnchor];
  id v48 = [v47 constraintLessThanOrEqualToConstant:33.0];

  *(void *)(v24 + 88) = v48;
  id v49 = [v36 heightAnchor];
  id v50 = [v36 widthAnchor];
  id v51 = [v49 constraintEqualToAnchor:v50];

  *(void *)(v24 + 96) = v51;
  long long v52 = *(void **)&v1[OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_subtitleLabel];
  id v53 = [v52 topAnchor];
  id v54 = [v28 bottomAnchor];
  id v55 = [v53 constraintEqualToAnchor:v54 constant:1.0];

  *(void *)(v24 + 104) = v55;
  id v56 = [v52 bottomAnchor];
  id v57 = [v1 bottomAnchor];
  id v58 = [v56 constraintLessThanOrEqualToAnchor:v57];

  *(void *)(v24 + 112) = v58;
  id v59 = [v52 leadingAnchor];
  id v60 = [v28 leadingAnchor];
  id v61 = [v59 constraintEqualToAnchor:v60];

  *(void *)(v24 + 120) = v61;
  id v62 = [v52 trailingAnchor];
  id v63 = [v28 trailingAnchor];
  id v64 = [v62 constraintEqualToAnchor:v63];

  *(void *)(v24 + 128) = v64;
  specialized Array._endMutation()();
  type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v65 activateConstraints:isa];
}

void MOSuggestionCollectionViewSingleAssetCell.setAssetViewModels(_:)(unint64_t a1)
{
  id v3 = *(void **)((char *)v1
                  + OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_assetGridView);
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (!v4) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v4) {
      goto LABEL_12;
    }
  }
  specialized ContiguousArray.reserveCapacity(_:)();
  if (v4 < 0)
  {
    __break(1u);
    return;
  }
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v5 + 1;
      specialized _ArrayBuffer._getElementSlowPath(_:)();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for MOWeakReference<MOSuggestionSheetAssetViewModel>);
      swift_allocObject();
      swift_weakInit();
      swift_beginAccess();
      swift_weakAssign();
      swift_unknownObjectRelease();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      uint64_t v5 = v6;
    }
    while (v4 != v6);
  }
  else
  {
    unint64_t v7 = a1 + 32;
    do
    {
      v7 += 8;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for MOWeakReference<MOSuggestionSheetAssetViewModel>);
      swift_allocObject();
      swift_weakInit();
      swift_beginAccess();
      swift_weakAssign();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v4;
    }
    while (v4);
  }
LABEL_12:
  swift_bridgeObjectRelease();
  id v8 = *(uint64_t (**)(uint64_t, void *, void))((swift_isaMask & *v3) + 0x158);
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = v8(v9, _swiftEmptyArrayStorage, 0);
  id v11 = *(uint64_t (**)(uint64_t))((swift_isaMask & *v1) + 0xA0);
  uint64_t v12 = v11(v10);
  if (v12)
  {
    uint64_t v13 = *(void (**)(uint64_t))(*(void *)v12 + 304);
    uint64_t v14 = swift_bridgeObjectRetain();
    v13(v14);
    uint64_t v12 = swift_release();
  }
  id v15 = *(void **)((char *)v1
                 + OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_subtitleLabel);
  uint64_t v16 = v11(v12);
  if (v16)
  {
    (*(void (**)(uint64_t))(*(void *)v16 + 376))(v16);
    swift_release();
    NSString v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v17 = 0;
  }
  [v15 setText:v17];
}

Swift::Void __swiftcall MOSuggestionCollectionViewSingleAssetCell.updateCell(with:)(Swift::OpaquePointer with)
{
  MOSuggestionCollectionViewSingleAssetCell.setAssetViewModels(_:)((unint64_t)with._rawValue);
  (*(void (**)(void))((swift_isaMask & **(void **)(v1
                                                   + OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_assetGridView))
                    + 0x1C8))();
}

Swift::Void __swiftcall MOSuggestionCollectionViewSingleAssetCell.updateCell(with:index:)(Swift::OpaquePointer with, Swift::Int index)
{
  MOSuggestionCollectionViewSingleAssetCell.setAssetViewModels(_:)((unint64_t)with._rawValue);
  (*(void (**)(Swift::Int))((swift_isaMask & **(void **)(v2
                                                                    + OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_assetGridView))
                                     + 0x1D0))(index);
}

uint64_t MOSuggestionCollectionViewSingleAssetCell.updateCell(with:index:)(uint64_t a1, unint64_t a2)
{
  id v3 = v2;
  uint64_t v5 = *(void **)((char *)v2
                  + OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_assetGridView);
  unint64_t v7 = (uint64_t (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))((swift_isaMask & *v5) + 0x160))(v16);
  if (!*v6)
  {
    uint64_t v12 = v7(v16, 0);
    goto LABEL_10;
  }
  id v8 = v6;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for MOWeakReference<MOSuggestionSheetAssetViewModel>);
  uint64_t v9 = swift_allocObject();
  swift_weakInit();
  swift_beginAccess();
  swift_weakAssign();
  uint64_t v10 = *v8;
  swift_retain_n();
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *id v8 = v10;
  if (!result || v10 < 0 || (v10 & 0x4000000000000000) != 0)
  {
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
    uint64_t v10 = result;
    *id v8 = result;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 8 * a2 + 0x20) = v9;
  swift_release();
  specialized Array._endMutation()();
  swift_release_n();
  uint64_t v12 = v7(v16, 0);
LABEL_10:
  uint64_t v13 = *(void **)((char *)v3
                 + OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_subtitleLabel);
  uint64_t v14 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v3) + 0xA0))(v12);
  NSString v15 = (NSString)v14;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(void *)v14 + 376))(v14);
    swift_release();
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  [v13 setText:v15];

  return (*(uint64_t (**)(unint64_t))((swift_isaMask & *v5) + 0x1D0))(a2);
}

id MOSuggestionCollectionViewSingleAssetCell.hitTest(_:with:)(uint64_t a1, double a2, double a3)
{
  v10.receiver = v3;
  v10.super_class = (Class)type metadata accessor for MOSuggestionCollectionViewSingleAssetCell();
  [super hitTest:a1 withEvent:a2];
  if (v7)
  {
    type metadata accessor for UIApplication(0, &lazy cache variable for type metadata for UIButton);
    if (([v7 isKindOfClass:swift_getObjCClassFromMetadata()] & 1) == 0)
    {
      type metadata accessor for UIApplication(0, &lazy cache variable for type metadata for PHLivePhotoView);
      if (([v7 isKindOfClass:swift_getObjCClassFromMetadata()] & 1) == 0)
      {

        id v8 = v3;
        return v3;
      }
    }
  }
  return v7;
}

Swift::Void __swiftcall MOSuggestionCollectionViewSingleAssetCell.prepareForReuse()()
{
  uint64_t v1 = v0;
  v8.receiver = v0;
  v8.super_class = (Class)type metadata accessor for MOSuggestionCollectionViewSingleAssetCell();
  [super prepareForReuse];
  uint64_t v2 = *(void **)((char *)v0 + OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_titleLabel);
  NSString v3 = String._bridgeToObjectiveC()();
  [v2 setText:v3];

  uint64_t v4 = *(void **)((char *)v1
                + OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_subtitleLabel);
  NSString v5 = String._bridgeToObjectiveC()();
  [v4 setText:v5];

  uint64_t v6 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0xA0))();
  if (v6)
  {
    (*(void (**)(void))(*(void *)v6 + 304))(0);
    swift_release();
  }
  (*(void (**)(void))((swift_isaMask & *v1) + 0xA8))(0);
  id v7 = *(void **)((char *)v1
                  + OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_assetGridView);
  (*(void (**)(void, void, void))((swift_isaMask & *v7) + 0x158))(0, 0, 0);
  (*(void (**)(void))((swift_isaMask & *v7) + 0x188))(0);
}

id MOSuggestionCollectionViewSingleAssetCell.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MOSuggestionCollectionViewSingleAssetCell();
  return [super dealloc];
}

uint64_t type metadata accessor for MOSuggestionCollectionViewSingleAssetCell()
{
  return self;
}

void specialized MOSuggestionCollectionViewSingleAssetCell.init(coder:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_assetGridView;
  type metadata accessor for MOSuggestionSheetAssetGridView();
  *(void *)&v1[v2] = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
  uint64_t v3 = OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_titleLabel;
  *(void *)&v1[v3] = closure #1 in variable initialization expression of MOSuggestionCollectionViewSingleAssetCell.titleLabel();
  uint64_t v4 = OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_subtitleLabel;
  *(void *)&v1[v4] = closure #1 in variable initialization expression of MOSuggestionCollectionViewSingleAssetCell.subtitleLabel();
  uint64_t v5 = OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_journalButton;
  uint64_t v6 = (objc_class *)type metadata accessor for MOSuggestionSheetJournalButton();
  id v7 = objc_allocWithZone(v6);
  objc_super v8 = &v7[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetJournalButton_buttonTapped];
  *objc_super v8 = 0;
  v8[1] = 0;
  v7[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetJournalButton_singleCellAsset] = 1;
  v15.receiver = v7;
  v15.super_class = v6;
  [super initWithFrame:0.0, 0.0, 0.0, 0.0];
  MOSuggestionSheetJournalButton.sharedInit()();

  *(void *)&v1[v5] = v9;
  objc_super v10 = (void (__swiftcall **)())&v1[OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_accessoryButtonAction];
  *objc_super v10 = MOSuggestionInterstitialExpandableListViewCellConstants.init();
  v10[1] = 0;
  swift_weakInit();
  uint64_t v11 = OBJC_IVAR____TtC16MomentsUIService41MOSuggestionCollectionViewSingleAssetCell_platterView;
  id v12 = [objc_allocWithZone((Class)UIView) init];
  id v13 = [v12 traitCollection];
  id v14 = [v13 userInterfaceStyle];

  specialized static MOSuggestionTheme.Styles.styleViewAsPlatter(view:traitCollection:)(v12, (uint64_t)v14);
  *(void *)&v1[v11] = v12;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_10004D928@<X0>(void **a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x88))();
  uint64_t v5 = v4;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v3;
  *(void *)(result + 24) = v5;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed () -> ();
  a2[1] = (uint64_t (*)())result;
  return result;
}

uint64_t sub_10004D9C0@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0xA0))();
  *a2 = result;
  return result;
}

uint64_t sub_10004DA1C(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))((swift_isaMask & **a2) + 0xA8);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_10004DA80()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@out ())()
{
  return thunk for @escaping @callee_guaranteed () -> (@out ())(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> ()()
{
  return thunk for @callee_guaranteed () -> ()(*(uint64_t (**)(void))(v0 + 16));
}

void *MOSuggestionSheetOnboardingTipCell.reuseIdentifier.unsafeMutableAddressor()
{
  return &static MOSuggestionSheetOnboardingTipCell.reuseIdentifier;
}

unint64_t static MOSuggestionSheetOnboardingTipCell.reuseIdentifier.getter()
{
  return 0xD000000000000022;
}

uint64_t MOSuggestionSheetOnboardingTipCell.tipModel.getter()
{
  return swift_retain();
}

uint64_t MOSuggestionSheetOnboardingTipCell.tipModel.setter(uint64_t a1)
{
  uint64_t v3 = (void *)((char *)v1 + OBJC_IVAR____TtC16MomentsUIService34MOSuggestionSheetOnboardingTipCell_tipModel);
  swift_beginAccess();
  *uint64_t v3 = a1;
  swift_retain();
  uint64_t v4 = swift_release();
  (*(void (**)(uint64_t))((swift_isaMask & *v1) + 0x70))(v4);
  return swift_release();
}

uint64_t (*MOSuggestionSheetOnboardingTipCell.tipModel.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return MOSuggestionSheetOnboardingTipCell.tipModel.modify;
}

uint64_t MOSuggestionSheetOnboardingTipCell.tipModel.modify(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return (*(uint64_t (**)(uint64_t))((swift_isaMask & **(void **)(a1 + 24)) + 0x70))(result);
  }
  return result;
}

void MOSuggestionSheetOnboardingTipCell.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC16MomentsUIService34MOSuggestionSheetOnboardingTipCell_tipModel] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void *MOSuggestionSheetOnboardingTipCell.init(frame:)(double a1, double a2, double a3, double a4)
{
  *(void *)&v4[OBJC_IVAR____TtC16MomentsUIService34MOSuggestionSheetOnboardingTipCell_tipModel] = 0;
  v13.receiver = v4;
  v13.super_class = (Class)type metadata accessor for MOSuggestionSheetOnboardingTipCell();
  [super initWithFrame:a1, a2, a3, a4];
  objc_super v10 = *(void (**)(void))((swift_isaMask & *v9) + 0x70);
  uint64_t v11 = v9;
  v10();

  return v11;
}

uint64_t type metadata accessor for MOSuggestionSheetOnboardingTipCell()
{
  return self;
}

Swift::Void __swiftcall MOSuggestionSheetOnboardingTipCell.setUpTip()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(uint64_t (**)(void))((swift_isaMask & *v0) + 0x58);
  uint64_t v3 = v2();
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 128))(v3);
    swift_release();
  }
  lazy protocol witness table accessor for type MOSuggestionOnboardingTip and conformance MOSuggestionOnboardingTip();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  id v4 = objc_allocWithZone((Class)type metadata accessor for TipUIView());
  uint64_t v5 = (void *)TipUIView.init(_:arrowEdge:actionHandler:)();
  [v1 addSubview:v5];
  uint64_t v6 = self;
  id v7 = [v6 secondarySystemGroupedBackgroundColor];
  TipUIView.backgroundColor.setter();
  id v45 = v5;
  uint64_t v8 = v2();
  id v9 = &selRef_systemBlueColor;
  if (v8)
  {
    int v10 = *(unsigned __int8 *)(v8 + 32);
    swift_release();
    if (!v10) {
      id v9 = &selRef_systemIndigoColor;
    }
  }
  id v11 = [v6 *v9];
  [v45 setTintColor:v11];

  id v12 = [v45 layer];
  id v13 = [v6 blackColor];
  id v14 = [v13 CGColor];

  [v12 setShadowColor:v14];
  id v15 = [v45 layer];
  LODWORD(v16) = 1036831949;
  [v15 setShadowOpacity:v16];

  id v17 = [v45 layer];
  [v17 setShadowOffset:0.0, 5.0];

  id v18 = [v45 layer];
  [v18 setShadowRadius:8.0];

  id v19 = [v45 layer];
  [v19 setCornerCurve:kCACornerCurveContinuous];

  id v20 = [v45 layer];
  [v20 setShadowPathIsBounds:1];

  id v21 = [v45 superview];
  if (v21)
  {
    id v22 = v21;
    [v45 setTranslatesAutoresizingMaskIntoConstraints:0];
    id v23 = [v45 topAnchor];
    id v24 = [v22 topAnchor];
    id v25 = [v23 constraintEqualToAnchor:v24];

    [v25 setConstant:0.0];
    id v26 = v25;
    [v26 setActive:1];
  }
  id v27 = [v45 superview];
  if (v27)
  {
    CGRect v28 = v27;
    [v45 setTranslatesAutoresizingMaskIntoConstraints:0];
    id v29 = [v45 bottomAnchor];
    id v30 = [v28 bottomAnchor];
    id v31 = [v29 constraintEqualToAnchor:v30];

    if (v31)
    {
      [v31 setConstant:-0.0];
      id v32 = v31;
      [v32 setActive:1];
    }
  }
  id v33 = [v45 superview];
  if (v33)
  {
    id v34 = v33;
    [v45 setTranslatesAutoresizingMaskIntoConstraints:0];
    id v35 = [v45 leadingAnchor];
    id v36 = [v34 leadingAnchor];
    id v37 = [v35 constraintEqualToAnchor:v36];

    [v37 setConstant:20.0];
    id v38 = v37;
    [v38 setActive:1];
  }
  id v39 = [v45 superview];
  if (v39)
  {
    id v40 = v39;
    [v45 setTranslatesAutoresizingMaskIntoConstraints:0];
    id v41 = [v45 trailingAnchor];
    id v42 = [v40 trailingAnchor];
    id v43 = [v41 constraintEqualToAnchor:v42];

    [v43 setConstant:-20.0];
    id v44 = v43;
    [v44 setActive:1];
  }
  TipUIView.imageSize.setter();
}

unint64_t lazy protocol witness table accessor for type MOSuggestionOnboardingTip and conformance MOSuggestionOnboardingTip()
{
  unint64_t result = lazy protocol witness table cache variable for type MOSuggestionOnboardingTip and conformance MOSuggestionOnboardingTip;
  if (!lazy protocol witness table cache variable for type MOSuggestionOnboardingTip and conformance MOSuggestionOnboardingTip)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MOSuggestionOnboardingTip and conformance MOSuggestionOnboardingTip);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MOSuggestionOnboardingTip and conformance MOSuggestionOnboardingTip;
  if (!lazy protocol witness table cache variable for type MOSuggestionOnboardingTip and conformance MOSuggestionOnboardingTip)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MOSuggestionOnboardingTip and conformance MOSuggestionOnboardingTip);
  }
  return result;
}

uint64_t sub_10004E5E4()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void closure #1 in MOSuggestionSheetOnboardingTipCell.setUpTip()()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    if (Tips.Action.id.getter() == 0x726174732D746567 && v2 == 0xEB00000000646574)
    {
      uint64_t v3 = swift_bridgeObjectRelease();
    }
    else
    {
      char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t v3 = swift_bridgeObjectRelease();
      if ((v4 & 1) == 0)
      {
LABEL_8:

        return;
      }
    }
    uint64_t v5 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v1) + 0x58))(v3);
    if (v5)
    {
      uint64_t v6 = (void (*)(uint64_t))(*(uint64_t (**)(uint64_t))(*(void *)v5 + 104))(v5);
      uint64_t v7 = swift_release();
      v6(v7);

      swift_release();
      return;
    }
    goto LABEL_8;
  }
}

void partial apply for closure #1 in MOSuggestionSheetOnboardingTipCell.setUpTip()()
{
}

id MOSuggestionSheetOnboardingTipCell.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MOSuggestionSheetOnboardingTipCell();
  return [super dealloc];
}

unint64_t MOSuggestionOnboardingTip.id.getter()
{
  return 0xD000000000000019;
}

uint64_t MOSuggestionOnboardingTip.title.getter()
{
  return specialized MOSuggestionOnboardingTip.title.getter();
}

uint64_t MOSuggestionOnboardingTip.image.getter()
{
  type metadata accessor for MOSuggestionSheetOnboardingTipCell();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v1 = [self bundleForClass:ObjCClassFromMetadata];

  return Image.init(_:bundle:)(0xD000000000000019, 0x80000001001E1430, v1);
}

uint64_t MOSuggestionOnboardingTip.options.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of static Tips.OptionsBuilder.buildPartialBlock<A>(first:)>>.0);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of static Tips.OptionsBuilder.buildExpression<A>(_:)>>.0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Tips.IgnoresDisplayFrequency>);
  uint64_t v8 = type metadata accessor for Tips.IgnoresDisplayFrequency();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1001DA0F0;
  Tips.IgnoresDisplayFrequency.init(_:)();
  static Tips.OptionsBuilder.buildExpression<A>(_:)();
  swift_bridgeObjectRelease();
  uint64_t v12 = v8;
  id v13 = &protocol witness table for Tips.IgnoresDisplayFrequency;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  static Tips.OptionsBuilder.buildPartialBlock<A>(first:)();
  uint64_t v12 = v4;
  id v13 = (void *)OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2();
  uint64_t v10 = static Tips.OptionsBuilder.buildFinalResult<A>(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v10;
}

uint64_t one-time initialization function for $showSuggestionsOnboarding()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Parameter<Bool>);
  __swift_allocate_value_buffer(v0, static MOSuggestionOnboardingTip.$showSuggestionsOnboarding);
  __swift_project_value_buffer(v0, (uint64_t)static MOSuggestionOnboardingTip.$showSuggestionsOnboarding);
  uint64_t v1 = self;
  id v2 = [v1 sharedInstance];
  id v3 = [v2 onboardingFlowCompletionStatus];

  if (v3 != (id)1)
  {
    id v4 = [v1 sharedInstance];
    [v4 onboardingFlowCompletionStatus];
  }
  return Tips.Parameter.init<A>(_:_:_:_:)();
}

uint64_t MOSuggestionOnboardingTip.$showSuggestionsOnboarding.unsafeMutableAddressor()
{
  if (one-time initialization token for $showSuggestionsOnboarding != -1) {
    swift_once();
  }
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Parameter<Bool>);

  return __swift_project_value_buffer(v0, (uint64_t)static MOSuggestionOnboardingTip.$showSuggestionsOnboarding);
}

uint64_t static MOSuggestionOnboardingTip.$showSuggestionsOnboarding.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for $showSuggestionsOnboarding != -1) {
    swift_once();
  }
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Parameter<Bool>);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static MOSuggestionOnboardingTip.$showSuggestionsOnboarding);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t static MOSuggestionOnboardingTip.$showSuggestionsOnboarding.setter(uint64_t a1)
{
  if (one-time initialization token for $showSuggestionsOnboarding != -1) {
    swift_once();
  }
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Parameter<Bool>);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static MOSuggestionOnboardingTip.$showSuggestionsOnboarding);
  swift_beginAccess();
  uint64_t v4 = *(void *)(v2 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 24))(v3, a1, v2);
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v2);
}

uint64_t (*static MOSuggestionOnboardingTip.$showSuggestionsOnboarding.modify())()
{
  if (one-time initialization token for $showSuggestionsOnboarding != -1) {
    swift_once();
  }
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Parameter<Bool>);
  __swift_project_value_buffer(v0, (uint64_t)static MOSuggestionOnboardingTip.$showSuggestionsOnboarding);
  swift_beginAccess();
  return MOSuggestionMapSnapshotView.platterBlurView.modify;
}

uint64_t static MOSuggestionOnboardingTip.showSuggestionsOnboarding.getter()
{
  if (one-time initialization token for $showSuggestionsOnboarding != -1) {
    swift_once();
  }
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Parameter<Bool>);
  __swift_project_value_buffer(v0, (uint64_t)static MOSuggestionOnboardingTip.$showSuggestionsOnboarding);
  swift_beginAccess();
  Tips.Parameter.wrappedValue.getter();
  swift_endAccess();
  return v2;
}

uint64_t static MOSuggestionOnboardingTip.showSuggestionsOnboarding.setter()
{
  if (one-time initialization token for $showSuggestionsOnboarding != -1) {
    swift_once();
  }
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Parameter<Bool>);
  __swift_project_value_buffer(v0, (uint64_t)static MOSuggestionOnboardingTip.$showSuggestionsOnboarding);
  swift_beginAccess();
  Tips.Parameter.wrappedValue.setter();
  return swift_endAccess();
}

void (*static MOSuggestionOnboardingTip.showSuggestionsOnboarding.modify(void *a1))(uint64_t a1)
{
  unsigned __int8 v2 = malloc(0x30uLL);
  *a1 = v2;
  if (one-time initialization token for $showSuggestionsOnboarding != -1) {
    swift_once();
  }
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Parameter<Bool>);
  v2[3] = v3;
  v2[4] = __swift_project_value_buffer(v3, (uint64_t)static MOSuggestionOnboardingTip.$showSuggestionsOnboarding);
  swift_beginAccess();
  Tips.Parameter.wrappedValue.getter();
  char v4 = *((unsigned char *)v2 + 41);
  swift_endAccess();
  *((unsigned char *)v2 + 40) = v4;
  return static MOSuggestionOnboardingTip.showSuggestionsOnboarding.modify;
}

void static MOSuggestionOnboardingTip.showSuggestionsOnboarding.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(unsigned char *)(*(void *)a1 + 41) = *(unsigned char *)(*(void *)a1 + 40);
  swift_beginAccess();
  Tips.Parameter.wrappedValue.setter();
  swift_endAccess();

  free(v1);
}

uint64_t MOSuggestionOnboardingTip.rules.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Parameter<Bool>);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Tips.Rule>);
  type metadata accessor for Tips.Rule();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1001DA0F0;
  if (one-time initialization token for $showSuggestionsOnboarding != -1) {
    swift_once();
  }
  uint64_t v4 = __swift_project_value_buffer(v0, (uint64_t)static MOSuggestionOnboardingTip.$showSuggestionsOnboarding);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v4, v0);
  Tips.Rule.init<A>(_:_:)();
  static Tips.RuleBuilder.buildExpression(_:)();
  swift_bridgeObjectRelease();
  uint64_t v5 = static Tips.RuleBuilder.buildPartialBlock(first:)();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t closure #2 in MOSuggestionOnboardingTip.rules.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Value<Bool>);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v11[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Variable<Bool>);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = &v11[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type PredicateExpressions.Variable<Bool> and conformance PredicateExpressions.Variable<A>, &demangling cache variable for type metadata for PredicateExpressions.Variable<Bool>);
  static PredicateExpressions.build_Arg<A>(_:)();
  v11[15] = 1;
  static PredicateExpressions.build_Arg<A>(_:)();
  a1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Equal<PredicateExpressions.Variable<Bool>, PredicateExpressions.Value<Bool>>);
  a1[4] = lazy protocol witness table accessor for type PredicateExpressions.Equal<PredicateExpressions.Variable<Bool>, PredicateExpressions.Value<Bool>> and conformance <> PredicateExpressions.Equal<A, B>();
  __swift_allocate_boxed_opaque_existential_1(a1);
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type PredicateExpressions.Value<Bool> and conformance PredicateExpressions.Value<A>, &demangling cache variable for type metadata for PredicateExpressions.Value<Bool>);
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)();
  (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t MOClientPresentationDetails.isPublicUI.getter(char a1)
{
  return a1 & 1;
}

uint64_t MOSuggestionStateOfMindTip.isPublicUI.setter(uint64_t result)
{
  unsigned char *v1 = result;
  return result;
}

void protocol witness for Identifiable.id.getter in conformance MOSuggestionOnboardingTip(void *a1@<X8>)
{
  *a1 = 0xD000000000000019;
  a1[1] = 0x80000001001DAAB0;
}

uint64_t key path setter for MOSuggestionSheetOnboardingTipCellModel.presentOnboardingController : MOSuggestionSheetOnboardingTipCellModel(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  uint64_t v6 = *(uint64_t (**)(uint64_t (*)(), uint64_t))(**(void **)a2 + 112);
  swift_retain();
  return v6(partial apply for thunk for @escaping @callee_guaranteed () -> (@out ()), v5);
}

uint64_t MOSuggestionSheetOnboardingTipCellModel.presentOnboardingController.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 16);
  swift_retain();
  return v1;
}

uint64_t MOSuggestionSheetOnboardingTipCellModel.presentOnboardingController.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return swift_release();
}

uint64_t (*MOSuggestionSheetFilterCollectionViewModel.selectedFilter.modify())()
{
  return MOSuggestionMapSnapshotView.secondaryField.modify;
}

uint64_t MOSuggestionSheetOnboardingTipCellModel.isPublicUI.getter()
{
  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t MOSuggestionSheetOnboardingTipCellModel.tip.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 33);
}

uint64_t MOSuggestionSheetOnboardingTipCellModel.tip.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 33) = a1;
  return result;
}

uint64_t (*MOSuggestionSheetOnboardingTipCellModel.tip.modify())()
{
  return MOSuggestionMapSnapshotView.secondaryField.modify;
}

uint64_t MOSuggestionSheetOnboardingTipCellModel.__allocating_init(publicUI:presentOnboardingController:tip:)(char a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = swift_allocObject();
  *(unsigned char *)(v8 + 33) = 2;
  *(unsigned char *)(v8 + 32) = a1;
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  swift_beginAccess();
  *(unsigned char *)(v8 + 33) = a4;
  return v8;
}

uint64_t MOSuggestionSheetOnboardingTipCellModel.init(publicUI:presentOnboardingController:tip:)(char a1, uint64_t a2, uint64_t a3, char a4)
{
  *(unsigned char *)(v4 + 33) = 2;
  *(unsigned char *)(v4 + 32) = a1;
  *(void *)(v4 + 16) = a2;
  *(void *)(v4 + 24) = a3;
  swift_beginAccess();
  *(unsigned char *)(v4 + 33) = a4;
  return v4;
}

uint64_t MOSuggestionSheetOnboardingTipCellModel.deinit()
{
  swift_release();
  return v0;
}

uint64_t MOSuggestionSheetOnboardingTipCellModel.__deallocating_deinit()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t specialized MOSuggestionOnboardingTip.title.getter()
{
  id v0 = [self mainBundle];
  v4._uint64_t countAndFlagsBits = 0xD000000000000036;
  v4._object = (void *)0x80000001001E2ED0;
  v1._object = (void *)0x80000001001E1B70;
  v1._uint64_t countAndFlagsBits = 0xD000000000000016;
  v2._uint64_t countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v4);

  lazy protocol witness table accessor for type String and conformance String();
  return Text.init<A>(_:)();
}

uint64_t specialized MOSuggestionOnboardingTip.message.getter()
{
  id v0 = [self mainBundle];
  v1._uint64_t countAndFlagsBits = 0xD0000000000000A2;
  v4._object = (void *)0x80000001001E2E90;
  v1._object = (void *)0x80000001001E2DE0;
  v2._uint64_t countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v4._uint64_t countAndFlagsBits = 0xD000000000000039;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v4);

  lazy protocol witness table accessor for type String and conformance String();
  return Text.init<A>(_:)();
}

void *specialized MOSuggestionOnboardingTip.actions.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Tips.Action>);
  type metadata accessor for Tips.Action();
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1001DA0F0;
  id v1 = [self mainBundle];
  v6._object = (void *)0x80000001001E2D80;
  v2._uint64_t countAndFlagsBits = 0x7261745320746547;
  v2._object = (void *)0xEB00000000646574;
  v3._uint64_t countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  v6._uint64_t countAndFlagsBits = 0xD000000000000037;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v2, (Swift::String_optional)0, (NSBundle)v1, v3, v6);

  lazy protocol witness table accessor for type String and conformance String();
  Tips.Action.init<A>(id:title:perform:)();
  Swift::String v4 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay6TipKit4TipsO6ActionVGG_ALs5NeverOTgq505_sSi6f4Kit4h2O6i34VAEIgynr_Si6offset_AE7elementtAEs5J94OIegnrzr_TR03_s6a4Kit4c3O13D54BuilderV16buildFinalResultySayAC0D0VGAIFZAHSi_AHtXEfU_Tf3nnnpf_nTf1cn_n(v0);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  return v4;
}

void *associated type witness table accessor for Identifiable.ID : Hashable in MOSuggestionOnboardingTip()
{
  return &protocol witness table for String;
}

uint64_t sub_10004FDD4@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x58))();
  *a2 = result;
  return result;
}

uint64_t sub_10004FE30(uint64_t a1, void **a2)
{
  Swift::String v2 = *(uint64_t (**)(uint64_t))((swift_isaMask & **a2) + 0x60);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_10004FE94@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)a1 + 104))();
  uint64_t v5 = v4;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v3;
  *(void *)(result + 24) = v5;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed () -> ();
  a2[1] = (uint64_t (*)())result;
  return result;
}

uint64_t sub_10004FF1C@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 128))();
  *a2 = result;
  return result;
}

uint64_t sub_10004FF68(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 136))(*a1);
}

uint64_t getEnumTagSinglePayload for MOSuggestionOnboardingTip(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for MOSuggestionOnboardingTip(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10005011CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MOSuggestionOnboardingTip()
{
  return &type metadata for MOSuggestionOnboardingTip;
}

uint64_t type metadata accessor for MOSuggestionSheetOnboardingTipCellModel()
{
  return self;
}

uint64_t sub_100050178()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

unint64_t lazy protocol witness table accessor for type PredicateExpressions.Equal<PredicateExpressions.Variable<Bool>, PredicateExpressions.Value<Bool>> and conformance <> PredicateExpressions.Equal<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.Equal<PredicateExpressions.Variable<Bool>, PredicateExpressions.Value<Bool>> and conformance <> PredicateExpressions.Equal<A, B>;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.Equal<PredicateExpressions.Variable<Bool>, PredicateExpressions.Value<Bool>> and conformance <> PredicateExpressions.Equal<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PredicateExpressions.Equal<PredicateExpressions.Variable<Bool>, PredicateExpressions.Value<Bool>>);
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type PredicateExpressions.Variable<Bool> and conformance PredicateExpressions.Variable<A>, &demangling cache variable for type metadata for PredicateExpressions.Variable<Bool>);
    lazy protocol witness table accessor for type PredicateExpressions.Value<Bool> and conformance <A> PredicateExpressions.Value<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.Equal<PredicateExpressions.Variable<Bool>, PredicateExpressions.Value<Bool>> and conformance <> PredicateExpressions.Equal<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PredicateExpressions.Value<Bool> and conformance <A> PredicateExpressions.Value<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.Value<Bool> and conformance <A> PredicateExpressions.Value<A>;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.Value<Bool> and conformance <A> PredicateExpressions.Value<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PredicateExpressions.Value<Bool>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.Value<Bool> and conformance <A> PredicateExpressions.Value<A>);
  }
  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  id v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

Swift::Void __swiftcall MOSuggestionRoundView.layoutSubviews()()
{
  v1.receiver = v0;
  v1.super_class = (Class)type metadata accessor for MOSuggestionRoundView();
  [super layoutSubviews];
  [v0 setClipsToBounds:1];
  [v0 bounds];
  [v0 _setCornerRadius:CGRectGetHeight(v2) * 0.5];
}

uint64_t type metadata accessor for MOSuggestionRoundView()
{
  return self;
}

id MOSuggestionRoundView.init(frame:)(double a1, double a2, double a3, double a4)
{
  v10.receiver = v4;
  v10.super_class = (Class)type metadata accessor for MOSuggestionRoundView();
  return [super initWithFrame:a1, a2, a3, a4];
}

id MOSuggestionRoundView.init(coder:)(void *a1)
{
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for MOSuggestionRoundView();
  [super initWithCoder:a1];

  return v3;
}

id MOSuggestionRoundView.__deallocating_deinit()
{
  return MOSuggestionRoundView.__deallocating_deinit(type metadata accessor for MOSuggestionRoundView);
}

id MOSuggestionCutoutView.fillLayer.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC16MomentsUIService22MOSuggestionCutoutView_fillLayer);
}

char *MOSuggestionCutoutView.init()()
{
  uint64_t v1 = OBJC_IVAR____TtC16MomentsUIService22MOSuggestionCutoutView_fillLayer;
  id v2 = objc_allocWithZone((Class)CAShapeLayer);
  id v3 = v0;
  *(void *)&v0[v1] = [v2 init];

  v8.receiver = v3;
  v8.super_class = (Class)type metadata accessor for MOSuggestionCutoutView();
  unsigned int v4 = (char *)objc_msgSendSuper2(&v8, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  id v5 = [v4 layer];
  id v6 = *(id *)&v4[OBJC_IVAR____TtC16MomentsUIService22MOSuggestionCutoutView_fillLayer];
  [v5 addSublayer:v6];

  return v4;
}

uint64_t type metadata accessor for MOSuggestionCutoutView()
{
  return self;
}

void MOSuggestionCutoutView.init(coder:)()
{
  uint64_t v1 = OBJC_IVAR____TtC16MomentsUIService22MOSuggestionCutoutView_fillLayer;
  *(void *)&v0[v1] = [objc_allocWithZone((Class)CAShapeLayer) init];

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall MOSuggestionCutoutView.layoutSubviews()()
{
  v17.receiver = v0;
  v17.super_class = (Class)type metadata accessor for MOSuggestionCutoutView();
  [super layoutSubviews];
  [v0 frame];
  double v2 = v1;
  double v4 = v3;
  double v6 = v5;
  double v8 = v7;
  id v9 = self;
  id v10 = [v9 bezierPathWithRoundedRect:v2 cornerRadius:v4 v6, v8, 0.0];
  [v0 frame];
  CGRectGetWidth(v18);
  [v0 frame];
  CGRectGetHeight(v19);
  [v0 frame];
  CGRectGetWidth(v20);
  [v0 frame];
  CGRectGetHeight(v21);
  MOSuggestionInterstitialExpandableListViewCellConstants.init()();
  id v11 = [v9 bezierPathWithRoundedRect:v22.origin.x, v22.origin.y, v22.size.width, v22.size.height, CGRectGetWidth(v22) * 0.5];
  [v10 appendPath:v11];
  [v10 setUsesEvenOddFillRule:1];
  uint64_t v12 = *(void **)&v0[OBJC_IVAR____TtC16MomentsUIService22MOSuggestionCutoutView_fillLayer];
  id v13 = [v10 CGPath];
  [v12 setPath:v13];

  [v12 setFillRule:kCAFillRuleEvenOdd];
  id v14 = [self blackColor];
  id v15 = [v14 CGColor];

  [v12 setFillColor:v15];
  LODWORD(v16) = 1057803469;
  [v12 setOpacity:v16];
}

void MOSuggestionCutoutView.init(frame:)()
{
}

{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id MOSuggestionCutoutView.__deallocating_deinit()
{
  return MOSuggestionRoundView.__deallocating_deinit(type metadata accessor for MOSuggestionCutoutView);
}

void *MOSuggestionInterstitialListAssetViewConstants.INSET_MARGIN.unsafeMutableAddressor()
{
  return &static MOSuggestionInterstitialListAssetViewConstants.INSET_MARGIN;
}

void *MOSuggestionInterstitialListAssetViewConstants.INSET_MARGIN_CUTOUT.unsafeMutableAddressor()
{
  return &static MOSuggestionInterstitialListAssetViewConstants.INSET_MARGIN_CUTOUT;
}

void *MOSuggestionInterstitialListAssetViewConstants.MAP_PIN_INSET_MARGIN.unsafeMutableAddressor()
{
  return &static MOSuggestionInterstitialListAssetViewConstants.MAP_PIN_INSET_MARGIN;
}

id MOSuggestionInterstitialListAssetView.init()()
{
  v0[OBJC_IVAR____TtC16MomentsUIService37MOSuggestionInterstitialListAssetView_shouldBeRounded] = 0;
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for MOSuggestionInterstitialListAssetView();
  id v1 = [super initWithFrame:0.0, 0.0, 0.0, 0.0];
  [v1 _setCornerRadius:7.0];
  [v1 setClipsToBounds:1];

  return v1;
}

uint64_t type metadata accessor for MOSuggestionInterstitialListAssetView()
{
  return self;
}

uint64_t MOSuggestionInterstitialListAssetView.update(with:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  double v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  id v10 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v11 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v11;
  *(void *)(v12 + 24) = a1;
  aBlock[4] = partial apply for closure #1 in MOSuggestionInterstitialListAssetView.update(with:);
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_3;
  id v13 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_100050F78()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void closure #1 in MOSuggestionInterstitialListAssetView.update(with:)(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v4 = Strong;
    (*(void (**)(uint64_t))((swift_isaMask & *Strong) + 0x78))(a2);
  }
}

uint64_t sub_10005103C()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void partial apply for closure #1 in MOSuggestionInterstitialListAssetView.update(with:)()
{
  closure #1 in MOSuggestionInterstitialListAssetView.update(with:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

void MOSuggestionInterstitialListAssetView._update(with:)(unsigned __int8 *a1)
{
  uint64_t v3 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0xD8))();
  if (a1[89])
  {
    int v4 = a1[65];
    if (v4 != 26)
    {
      MOSuggestionInterstitialListAssetView.addFallbackView(_:)(v4);
    }
    return;
  }
  if (a1[88])
  {
    MOSuggestionInterstitialListAssetView.addFallBackSpinner()();
    return;
  }
  double v5 = (uint64_t (**)(void))(*(void *)a1 + 272);
  uint64_t v6 = *v5;
  unint64_t v7 = ((uint64_t (*)(uint64_t))*v5)(v3);
  if (!v7) {
    goto LABEL_50;
  }
  unint64_t v8 = v7;
  unsigned int v9 = a1[65];
  if (v9 == 26) {
    goto LABEL_49;
  }
  id v10 = (uint64_t (*)(uint64_t))(v7 >> 62);
  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v11) {
      goto LABEL_14;
    }
    goto LABEL_49;
  }
  uint64_t v11 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v11)
  {
LABEL_49:
    swift_bridgeObjectRelease();
LABEL_50:
    if (serverManager._connectionProperties != (NSMutableDictionary *)-1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static MOAngelLogger.assets);
    swift_retain_n();
    id v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 136315650;
      if (v6())
      {
        type metadata accessor for MOSuggestionSheetImage();
        uint64_t v26 = Array.debugDescription.getter();
        unint64_t v28 = v27;
        swift_bridgeObjectRelease();
      }
      else
      {
        unint64_t v28 = 0xE300000000000000;
        uint64_t v26 = 7104878;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v28, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      uint64_t v29 = swift_bridgeObjectRelease();
      *(_WORD *)(v25 + 12) = 2080;
      if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 248))(v29))
      {
        uint64_t v30 = Array.debugDescription.getter();
        unint64_t v32 = v31;
        swift_bridgeObjectRelease();
      }
      else
      {
        unint64_t v32 = 0xE300000000000000;
        uint64_t v30 = 7104878;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v32, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      uint64_t v33 = swift_bridgeObjectRelease();
      *(_WORD *)(v25 + 22) = 2080;
      if (((uint64_t (*)(uint64_t))v6)(v33))
      {
        type metadata accessor for MOSuggestionSheetImage();
        uint64_t v34 = Array.debugDescription.getter();
        unint64_t v36 = v35;
        swift_bridgeObjectRelease();
      }
      else
      {
        unint64_t v36 = 0xE300000000000000;
        uint64_t v34 = 7104878;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v36, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "[MOSuggestionInterstitialListAssetView.init] Unable to render, icons=%s, title=%s, dates=%s", (uint8_t *)v25, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    return;
  }
LABEL_14:
  if ((v8 & 0xC000000000000001) == 0)
  {
    if (!*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_68:
      uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
      goto LABEL_35;
    }
    uint64_t v11 = *(void *)(v8 + 32);
    swift_retain();
LABEL_17:
    switch(v9)
    {
      case 0u:
      case 1u:
      case 2u:
      case 4u:
      case 5u:
      case 6u:
      case 0xCu:
      case 0xDu:
      case 0xEu:
        swift_bridgeObjectRelease();
        uint64_t v12 = v11;
        char v13 = 1;
        goto LABEL_21;
      case 7u:
        swift_bridgeObjectRelease();
        MOSuggestionInterstitialListAssetView.addWorkoutGlyph(_:)(v11);
        goto LABEL_22;
      case 9u:
        swift_bridgeObjectRelease();
        MOSuggestionInterstitialListAssetView.addRouteSpotlightView(_:)(v11);
        goto LABEL_22;
      case 0xAu:
        MOSuggestionInterstitialListAssetView.addWorkoutGlobeGlyph(_:)(v8);
        swift_bridgeObjectRelease();
        goto LABEL_22;
      case 0xBu:
        if (v10)
        {
          swift_bridgeObjectRetain();
          uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v14 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        if (v14 <= 1) {
          goto LABEL_43;
        }
        MOSuggestionInterstitialListAssetView.addContactsGlobeGlyph(_:)(v8);
        goto LABEL_45;
      case 0xFu:
        uint64_t v15 = swift_bridgeObjectRelease();
        id v10 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 176);
        if (v10(v15)) {
          goto LABEL_19;
        }
        unint64_t v16 = v6();
        if (!v16) {
          goto LABEL_39;
        }
        if (v16 >> 62) {
          goto LABEL_68;
        }
        uint64_t v17 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
        break;
      case 0x11u:
      case 0x12u:
        swift_bridgeObjectRelease();
        MOSuggestionInterstitialListAssetView.addGlyphWithBackground(_:)(v11);
        goto LABEL_22;
      case 0x13u:
        swift_bridgeObjectRelease();
        MOSuggestionInterstitialListAssetView.addMixedRunWalkFillIcon(_:smartInvertOff:)(v11, 0);
        goto LABEL_22;
      case 0x14u:
      case 0x15u:
      case 0x16u:
LABEL_19:
        swift_bridgeObjectRelease();
        goto LABEL_20;
      case 0x19u:
LABEL_43:
        swift_bridgeObjectRelease();
        MOSuggestionInterstitialListAssetView.addGenericRoundView(_:)(v11);
        goto LABEL_22;
      default:
        goto LABEL_45;
    }
LABEL_35:
    uint64_t v18 = swift_bridgeObjectRelease();
    if (v17 == 1)
    {
      (*(void (**)(uint64_t))(*(void *)a1 + 200))(v18);
      uint64_t v20 = v19;
      uint64_t v21 = swift_bridgeObjectRelease();
      if (v20)
      {
        if (!v10(v21))
        {
LABEL_20:
          uint64_t v12 = v11;
          char v13 = 0;
LABEL_21:
          MOSuggestionInterstitialListAssetView.addFillIcon(_:smartInvertOff:)(v12, v13);
          goto LABEL_22;
        }
        swift_bridgeObjectRelease();
      }
    }
LABEL_39:
    MOSuggestionInterstitialListAssetView.addSpotlightIconView(_:)(v11);
LABEL_22:
    swift_release();
    return;
  }
  uint64_t v11 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  if (v9 <= 0x19) {
    goto LABEL_17;
  }
LABEL_45:
  swift_release();

  swift_bridgeObjectRelease();
}

void MOSuggestionInterstitialListAssetView.addFallBackSpinner()()
{
  [v0 frame];
  id v5 = [objc_allocWithZone((Class)UIActivityIndicatorView) initWithFrame:v1, v2, v3, v4];
  id v6 = [self darkGrayColor];
  [v5 setColor:v6];

  [v5 startAnimating];
  [v0 addSubview:v5];
  [v5 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v7 = [v5 superview];
  if (v7)
  {
    unint64_t v8 = v7;
    [v5 setTranslatesAutoresizingMaskIntoConstraints:0];
    id v9 = [v5 centerYAnchor];
    id v10 = [v8 centerYAnchor];
    id v11 = [v9 constraintEqualToAnchor:v10];

    [v11 setConstant:0.0];
    if (v11)
    {
      id v12 = v11;
      [v12 setActive:1];
    }
  }
  id v13 = [v5 superview];
  if (v13)
  {
    id v19 = v13;
    [v5 setTranslatesAutoresizingMaskIntoConstraints:0];
    id v14 = [v5 centerXAnchor];
    id v15 = [v19 centerXAnchor];
    id v16 = [v14 constraintEqualToAnchor:v15];

    [v16 setConstant:0.0];
    if (v16)
    {
      id v17 = v16;
      [v17 setActive:1];

      id v5 = v17;
    }

    uint64_t v18 = v19;
  }
  else
  {
    uint64_t v18 = v5;
  }
}

void MOSuggestionInterstitialListAssetView.addWorkoutGlyph(_:)(uint64_t a1)
{
  double v2 = v1;
  double v4 = (void *)(*(uint64_t (**)(void))(*(void *)a1 + 136))();
  if (one-time initialization token for exerciseGreen != -1) {
    swift_once();
  }
  id v5 = (void *)static MOSuggestionTheme.Colors.exerciseGreen;
  id v6 = [(id)static MOSuggestionTheme.Colors.exerciseGreen colorWithAlphaComponent:0.18];
  id v7 = [v5 colorWithAlphaComponent:0.18];
  objc_allocWithZone((Class)type metadata accessor for MOSuggestionWorkoutIconGlyphView());
  id v11 = MOSuggestionWorkoutIconGlyphView.init(image:glyphLightBackgroundColor:glyphDarkBackgroundColor:glyphTintColor:)(v4, v6, v7, v5);
  [v2 addSubview:v11];
  UIView.fillSuper(margin:)(5.0);
  uint64_t v8 = swift_bridgeObjectRelease();
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 208))(v8);
  if (v9)
  {
    id v10 = (void *)v9;
    [v2 setBackgroundColor:v9];
  }
  [v2 setAccessibilityIgnoresInvertColors:1];
  [v11 setIsAccessibilityElement:1];
}

void MOSuggestionInterstitialListAssetView.addGlyphWithBackground(_:)(uint64_t a1)
{
  id v3 = [objc_allocWithZone((Class)UIView) init];
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [self colorNamed:v4];

  [v3 setBackgroundColor:v5];
  [v1 addSubview:v3];
  UIView.fillSuper(margin:)(0.0);
  swift_bridgeObjectRelease();
  id v6 = [objc_allocWithZone((Class)UIImageView) init];
  id v7 = (void *)(*(uint64_t (**)(void))(*(void *)a1 + 136))();
  [v6 setImage:v7];

  [v6 setContentMode:2];
  [v3 addSubview:v6];
  UIView.fillSuper(margin:)(5.0);
  swift_bridgeObjectRelease();
  [v6 setIsAccessibilityElement:1];
  uint64_t v8 = self;
  id v9 = v6;
  id v10 = [v8 mainBundle];
  v15._uint64_t countAndFlagsBits = 0xD000000000000036;
  v15._object = (void *)0x80000001001E30E0;
  v11._uint64_t countAndFlagsBits = 0x676E696B6C6157;
  v11._object = (void *)0xE700000000000000;
  v12._uint64_t countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v11, (Swift::String_optional)0, (NSBundle)v10, v12, v15);

  id v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v9 setAccessibilityLabel:v13];
}

void MOSuggestionInterstitialListAssetView.addFallbackView(_:)(char a1)
{
  double v2 = v1;
  uint64_t v3 = 0x6F746F6870;
  unint64_t v4 = 0xE500000000000000;
  switch(a1)
  {
    case 0:
    case 1:
      uint64_t v3 = 0x636973756DLL;
      goto LABEL_9;
    case 2:
      unint64_t v4 = 0xE800000000000000;
      uint64_t v3 = 0x7374736163646F70;
      goto LABEL_9;
    case 7:
      unint64_t v4 = 0xEA00000000006E75;
      uint64_t v3 = 0x722E657275676966;
      goto LABEL_9;
    case 11:
      unint64_t v4 = 0x80000001001E11B0;
      uint64_t v3 = 0xD000000000000012;
      goto LABEL_9;
    case 12:
    case 13:
      goto LABEL_9;
    case 14:
      uint64_t v3 = 0x6F65646976;
      goto LABEL_9;
    case 15:
      uint64_t v3 = 0xD000000000000015;
      unint64_t v4 = 0x80000001001E1180;
      goto LABEL_9;
    case 26:
      return;
    default:
      unint64_t v4 = 0xEC0000006B72616DLL;
      uint64_t v3 = 0x6E6F697473657571;
LABEL_9:
      if (serverManager._connectionProperties != (NSMutableDictionary *)-1) {
        swift_once();
      }
      uint64_t v5 = type metadata accessor for Logger();
      __swift_project_value_buffer(v5, (uint64_t)static MOAngelLogger.assets);
      swift_bridgeObjectRetain_n();
      id v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v6, v7))
      {
        uint64_t v8 = swift_slowAlloc();
        uint64_t v9 = swift_slowAlloc();
        *(_DWORD *)uint64_t v8 = 134218242;
        uint64_t v21 = v9;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v8 + 12) = 2080;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v3, v4, &v21);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v6, v7, "[MOSuggestionInterstitialListAssetView] using visualType=%ld, fallbackType=%s", (uint8_t *)v8, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      type metadata accessor for MOSuggestionFallbackAssetView();
      id v10 = MOSuggestionFallbackAssetView.__allocating_init(with:sizeType:)(v3, v4, 3);
      [v2 addSubview:v10];
      UIView.fillSuper(margin:)(0.0);
      swift_bridgeObjectRelease();
      [v10 setIsAccessibilityElement:1];
      UIAccessibilityTraits v11 = UIAccessibilityTraitImage;
      Swift::String v12 = v10;
      unint64_t v13 = (unint64_t)[v12 accessibilityTraits];
      if ((v11 & ~v13) != 0) {
        UIAccessibilityTraits v14 = v11;
      }
      else {
        UIAccessibilityTraits v14 = 0;
      }
      [v12 setAccessibilityTraits:v14 | v13];

      Swift::String v15 = self;
      id v16 = v12;
      id v17 = [v15 mainBundle];
      v22._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
      v22._object = (void *)0x80000001001E3080;
      v18._uint64_t countAndFlagsBits = 0x6B6361626C6C6146;
      v18._object = (void *)0xE800000000000000;
      v19._uint64_t countAndFlagsBits = 0;
      v19._object = (void *)0xE000000000000000;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v18, (Swift::String_optional)0, (NSBundle)v17, v19, v22);

      NSString v20 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v16 setAccessibilityLabel:v20];

      return;
  }
}

void MOSuggestionInterstitialListAssetView.addFillIcon(_:smartInvertOff:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  id v6 = [objc_allocWithZone((Class)UIImageView) init];
  os_log_type_t v7 = (void *)(*(uint64_t (**)(void))(*(void *)a1 + 136))();
  [v6 setImage:v7];

  (*(void (**)(void *__return_ptr))(*(void *)a1 + 256))(v13);
  outlined init with take of CGRect?((uint64_t)v13, (uint64_t)v14);
  if ((v15 & 1) == 0)
  {
    double v8 = *(double *)v14;
    double v9 = *(double *)&v14[1];
    double v10 = *(double *)&v14[2];
    double v11 = *(double *)&v14[3];
    id v12 = [v6 layer];
    [v12 setContentsRect:v8, v9, v10, v11];
  }
  [v6 setContentMode:2];
  [v3 addSubview:v6];
  UIView.fillSuper(margin:)(0.0);
  swift_bridgeObjectRelease();
  [v6 setIsAccessibilityElement:1];
  if (a2) {
    [v6 setAccessibilityIgnoresInvertColors:1];
  }
}

void MOSuggestionInterstitialListAssetView.addMixedRunWalkFillIcon(_:smartInvertOff:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  id v6 = [objc_allocWithZone((Class)UIImageView) init];
  os_log_type_t v7 = (void *)(*(uint64_t (**)(void))(*(void *)a1 + 136))();
  [v6 setImage:v7];

  id v10 = v6;
  NSString v8 = String._bridgeToObjectiveC()();
  id v9 = [self colorNamed:v8];

  [v10 setBackgroundColor:v9];
  [v10 setContentMode:2];
  [v3 addSubview:v10];
  UIView.fillSuper(margin:)(0.0);
  swift_bridgeObjectRelease();
  [v10 setIsAccessibilityElement:1];
  if (a2) {
    [v10 setAccessibilityIgnoresInvertColors:1];
  }
}

void MOSuggestionInterstitialListAssetView.addGenericRoundView(_:)(uint64_t a1)
{
  type metadata accessor for MOSuggestionRoundView();
  id v3 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
  [v1 addSubview:v3];
  UIView.fillSuper(margin:)(0.0);
  swift_bridgeObjectRelease();
  id v4 = [objc_allocWithZone((Class)UIImageView) init];
  uint64_t v5 = (void *)(*(uint64_t (**)(void))(*(void *)a1 + 136))();
  [v4 setImage:v5];

  [v3 addSubview:v4];
  UIView.fillSuper(margin:)(0.0);
  swift_bridgeObjectRelease();
  [v4 setIsAccessibilityElement:1];
  UIAccessibilityTraits v6 = UIAccessibilityTraitImage;
  id v7 = v4;
  unint64_t v8 = (unint64_t)[v7 accessibilityTraits];
  if ((v6 & ~v8) != 0) {
    UIAccessibilityTraits v9 = v6;
  }
  else {
    UIAccessibilityTraits v9 = 0;
  }
  [v7 setAccessibilityTraits:v9 | v8];

  [v7 setAccessibilityIgnoresInvertColors:1];
  id v10 = self;
  id v11 = v7;
  id v12 = [v10 mainBundle];
  v17._object = (void *)0x80000001001E1BB0;
  v13._uint64_t countAndFlagsBits = 0x746361746E6F43;
  v13._object = (void *)0xE700000000000000;
  v14._uint64_t countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  v17._uint64_t countAndFlagsBits = 0xD000000000000026;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v13, (Swift::String_optional)0, (NSBundle)v12, v14, v17);

  id v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v11 setAccessibilityLabel:v15];
}

void MOSuggestionInterstitialListAssetView.addSpotlightIconView(_:)(uint64_t a1)
{
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)a1 + 160))();
  if (v3)
  {
    id v21 = (id)v3;
    uint64_t v4 = (*(uint64_t (**)(void))(*(void *)a1 + 184))();
    if (v4)
    {
      uint64_t v5 = (void *)v4;
      type metadata accessor for MOSuggestionRoundView();
      id v6 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
      [v6 setBackgroundColor:v5];
      [v1 addSubview:v6];
      UIView.fillSuper(margin:)(5.0);
      swift_bridgeObjectRelease();
      id v7 = [objc_allocWithZone((Class)UIImageView) init];
      unint64_t v8 = (void *)(*(uint64_t (**)(void))(*(void *)a1 + 136))();
      [v7 setImage:v8];

      [v7 setContentMode:1];
      [v7 setTintColor:v21];
      double v9 = COERCE_DOUBLE((*(uint64_t (**)(id))(*(void *)a1 + 280))([v6 addSubview:v7]))
         + 4.0;
      if (v10) {
        double v9 = 4.0;
      }
      UIView.fillSuper(margin:)(v9);
      swift_bridgeObjectRelease();
      [v7 setIsAccessibilityElement:1];
      UIAccessibilityTraits v11 = UIAccessibilityTraitImage;
      id v12 = v7;
      unint64_t v13 = (unint64_t)[v12 accessibilityTraits];
      if ((v11 & ~v13) != 0) {
        UIAccessibilityTraits v14 = v11;
      }
      else {
        UIAccessibilityTraits v14 = 0;
      }
      [v12 setAccessibilityTraits:v14 | v13];

      id v15 = self;
      id v16 = v12;
      id v17 = [v15 mainBundle];
      v23._object = (void *)0x80000001001E3120;
      v18._uint64_t countAndFlagsBits = 7364941;
      v18._object = (void *)0xE300000000000000;
      v19._uint64_t countAndFlagsBits = 0;
      v19._object = (void *)0xE000000000000000;
      v23._uint64_t countAndFlagsBits = 0xD000000000000022;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v18, (Swift::String_optional)0, (NSBundle)v17, v19, v23);

      NSString v20 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v16 setAccessibilityLabel:v20];
    }
  }
}

void MOSuggestionInterstitialListAssetView.addRouteSpotlightView(_:)(uint64_t a1)
{
  MOSuggestionInterstitialListAssetView.addFillIcon(_:smartInvertOff:)(a1, 1);
  id v2 = [objc_allocWithZone((Class)type metadata accessor for MOSuggestionCutoutView()) init];
  [v1 addSubview:v2];
  UIView.fillSuper(margin:)(0.0);
  swift_bridgeObjectRelease();
  [v2 setIsAccessibilityElement:1];
  UIAccessibilityTraits v3 = UIAccessibilityTraitImage;
  id v4 = v2;
  unint64_t v5 = (unint64_t)[v4 accessibilityTraits];
  if ((v3 & ~v5) != 0) {
    UIAccessibilityTraits v6 = v3;
  }
  else {
    UIAccessibilityTraits v6 = 0;
  }
  [v4 setAccessibilityTraits:v6 | v5];

  [v4 setAccessibilityIgnoresInvertColors:1];
  id v7 = self;
  id v8 = v4;
  id v9 = [v7 mainBundle];
  v14._object = (void *)0x80000001001E30B0;
  v10._uint64_t countAndFlagsBits = 0x6574756F52;
  v10._object = (void *)0xE500000000000000;
  v11._uint64_t countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  v14._uint64_t countAndFlagsBits = 0xD000000000000024;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v10, (Swift::String_optional)0, (NSBundle)v9, v11, v14);

  id v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v8 setAccessibilityLabel:v12];
}

void MOSuggestionInterstitialListAssetView.addWorkoutGlobeGlyph(_:)(unint64_t a1)
{
  id v2 = v1;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v4)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    if (v4 < 0)
    {
      __break(1u);
      return;
    }
    uint64_t v5 = 0;
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v6 = *(void *)(a1 + 8 * v5 + 32);
        swift_retain();
      }
      ++v5;
      (*(void (**)(void))(*(void *)v6 + 136))();
      swift_release();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    while (v4 != v5);
  }
  if (one-time initialization token for exerciseGreen != -1) {
    swift_once();
  }
  id v7 = (void *)static MOSuggestionTheme.Colors.exerciseGreen;
  id v8 = [(id)static MOSuggestionTheme.Colors.exerciseGreen colorWithAlphaComponent:0.18];
  id v9 = [v7 colorWithAlphaComponent:0.18];
  objc_allocWithZone((Class)type metadata accessor for MOSuggestionWorkoutsSnowGlobeView());
  id v10 = v7;
  id v11 = specialized MOSuggestionWorkoutsSnowGlobeView.init(icons:glyphLightBackgroundColor:glyphDarkBackgroundColor:glyphTintColor:)((uint64_t)_swiftEmptyArrayStorage, v8, v9, v10);

  [v2 addSubview:v11];
  UIView.fillSuper(margin:)(0.0);
  swift_bridgeObjectRelease();
  [v11 setIsAccessibilityElement:1];
  id v12 = self;
  id v18 = v11;
  id v13 = [v12 mainBundle];
  v20._object = (void *)0x80000001001E3150;
  v14._uint64_t countAndFlagsBits = 0x7374756F6B726F57;
  v14._object = (void *)0xE800000000000000;
  v15._uint64_t countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  v20._uint64_t countAndFlagsBits = 0xD00000000000002FLL;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v14, (Swift::String_optional)0, (NSBundle)v13, v15, v20);

  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v18 setAccessibilityLabel:v16];

  id v17 = [self blackColor];
  [v2 setBackgroundColor:v17];

  [v2 setAccessibilityIgnoresInvertColors:1];
  [v18 setIsAccessibilityElement:1];
}

void MOSuggestionInterstitialListAssetView.addContactsGlobeGlyph(_:)(unint64_t a1)
{
  id v2 = v1;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v4)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    if (v4 < 0)
    {
      __break(1u);
      return;
    }
    uint64_t v5 = 0;
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v6 = *(void *)(a1 + 8 * v5 + 32);
        swift_retain();
      }
      ++v5;
      (*(void (**)(void))(*(void *)v6 + 136))();
      swift_release();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    while (v4 != v5);
  }
  id v7 = objc_allocWithZone((Class)type metadata accessor for MOSuggestionWorkoutsSnowGlobeView());
  id v8 = MOSuggestionWorkoutsSnowGlobeView.init(alreadyRoundedIcons:)((uint64_t)_swiftEmptyArrayStorage);
  [v2 addSubview:v8];
  UIView.fillSuper(margin:)(0.0);
  swift_bridgeObjectRelease();
  [v8 setIsAccessibilityElement:1];
  UIAccessibilityTraits v9 = UIAccessibilityTraitImage;
  id v10 = v8;
  unint64_t v11 = (unint64_t)[v10 accessibilityTraits];
  if ((v9 & ~v11) != 0) {
    UIAccessibilityTraits v12 = v9;
  }
  else {
    UIAccessibilityTraits v12 = 0;
  }
  [v10 setAccessibilityTraits:v12 | v11];

  [v10 setAccessibilityIgnoresInvertColors:1];
  id v13 = self;
  id v14 = v10;
  id v15 = [v13 mainBundle];
  v21._object = (void *)0x80000001001E1BB0;
  v16._uint64_t countAndFlagsBits = 0x746361746E6F43;
  v16._object = (void *)0xE700000000000000;
  v17._uint64_t countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  v21._uint64_t countAndFlagsBits = 0xD000000000000026;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v16, (Swift::String_optional)0, (NSBundle)v15, v17, v21);

  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v14 setAccessibilityLabel:v18];

  id v19 = [self systemBackgroundColor];
  [v2 setBackgroundColor:v19];
}

void MOSuggestionInterstitialListAssetView.init(coder:)()
{
  v0[OBJC_IVAR____TtC16MomentsUIService37MOSuggestionInterstitialListAssetView_shouldBeRounded] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall MOSuggestionInterstitialListAssetView.prepareForReuse()()
{
  id v1 = [v0 subviews];
  type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v3) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v3) {
      goto LABEL_10;
    }
  }
  if (v3 < 1)
  {
    __break(1u);
    return;
  }
  for (uint64_t i = 0; i != v3; ++i)
  {
    if ((v2 & 0xC000000000000001) != 0) {
      id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v5 = *(id *)(v2 + 8 * i + 32);
    }
    uint64_t v6 = v5;
    [v5 removeFromSuperview];
  }
LABEL_10:
  swift_bridgeObjectRelease();
  id v7 = [self clearColor];
  [v0 setBackgroundColor:v7];
}

void MOSuggestionInterstitialListAssetView.init(frame:)()
{
}

void @objc MOSuggestionCutoutView.init(frame:)()
{
}

id MOSuggestionInterstitialListAssetView.__deallocating_deinit()
{
  return MOSuggestionRoundView.__deallocating_deinit(type metadata accessor for MOSuggestionInterstitialListAssetView);
}

id MOSuggestionRoundView.__deallocating_deinit(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return [super dealloc];
}

ValueMetadata *type metadata accessor for MOSuggestionInterstitialListAssetViewConstants()
{
  return &type metadata for MOSuggestionInterstitialListAssetViewConstants;
}

uint64_t outlined init with take of CGRect?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CGRect?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *MOSuggestionShowMoreFooterView.reuseIdentifier.unsafeMutableAddressor()
{
  return &static MOSuggestionShowMoreFooterView.reuseIdentifier;
}

unint64_t static MOSuggestionShowMoreFooterView.reuseIdentifier.getter()
{
  return 0xD00000000000001ELL;
}

void closure #1 in variable initialization expression of MOSuggestionShowMoreFooterView.showMoreButton()
{
  type metadata accessor for MOSuggestionCapsuleButton();
  id v0 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
  [v0 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v1 = [self mainBundle];
  v15._object = (void *)0x80000001001E3220;
  v2._uint64_t countAndFlagsBits = 0x726F4D20776F6853;
  v2._object = (void *)0xE900000000000065;
  v3._uint64_t countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  v15._uint64_t countAndFlagsBits = 0xD00000000000004ALL;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v2, (Swift::String_optional)0, (NSBundle)v1, v3, v15);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(NSAttributedStringKey, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1001DA0F0;
  *(void *)(inited + 32) = NSFontAttributeName;
  id v5 = self;
  uint64_t v6 = NSFontAttributeName;
  id v7 = [v5 preferredFontForTextStyle:UIFontTextStyleSubheadline];
  id v8 = [v7 fontDescriptor];
  id v9 = [v8 fontDescriptorWithSymbolicTraits:2];

  if (v9)
  {
    id v10 = [v5 fontWithDescriptor:v9 size:0.0];

    *(void *)(inited + 64) = type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for UIFont);
    *(void *)(inited + 40) = v10;
    specialized Dictionary.init(dictionaryLiteral:)(inited);
    id v11 = objc_allocWithZone((Class)NSAttributedString);
    NSString v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    type metadata accessor for NSAttributedStringKey(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v14 = [v11 initWithString:v12 attributes:isa];

    [v0 setAttributedTitle:v14 forState:0];
  }
  else
  {
    __break(1u);
  }
}

id MOSuggestionShowMoreFooterView.showMoreButton.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionShowMoreFooterView_showMoreButton);
}

uint64_t key path setter for MOSuggestionShowMoreFooterView.showMoreAction : MOSuggestionShowMoreFooterView(uint64_t *a1, void **a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  uint64_t v6 = *(uint64_t (**)(uint64_t (*)(), uint64_t))((swift_isaMask & **a2) + 0x68);
  swift_retain();
  return v6(partial apply for thunk for @escaping @callee_guaranteed () -> (@out ()), v5);
}

uint64_t MOSuggestionShowMoreFooterView.showMoreAction.getter()
{
  id v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionShowMoreFooterView_showMoreAction);
  swift_beginAccess();
  uint64_t v2 = *v1;
  swift_retain();
  return v2;
}

uint64_t MOSuggestionShowMoreFooterView.showMoreAction.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionShowMoreFooterView_showMoreAction);
  swift_beginAccess();
  *uint64_t v5 = a1;
  v5[1] = a2;
  swift_retain();
  swift_release();
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  id v8 = *(void (**)(uint64_t, uint64_t))((swift_isaMask & **(void **)(v2
                                                                              + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionShowMoreFooterView_showMoreButton))
                                               + 0x60);
  swift_retain();
  v8(v6, v7);
  return swift_release();
}

void (*MOSuggestionShowMoreFooterView.showMoreAction.modify(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC16MomentsUIService30MOSuggestionShowMoreFooterView_showMoreAction;
  v3[3] = v1;
  v3[4] = v4;
  swift_beginAccess();
  return MOSuggestionShowMoreFooterView.showMoreAction.modify;
}

void MOSuggestionShowMoreFooterView.showMoreAction.modify(void **a1, char a2)
{
  uint64_t v3 = *a1;
  swift_endAccess();
  if ((a2 & 1) == 0)
  {
    uint64_t v4 = v3[3];
    uint64_t v5 = (uint64_t *)(v4 + v3[4]);
    uint64_t v6 = *v5;
    uint64_t v7 = v5[1];
    id v8 = *(void (**)(uint64_t, uint64_t))((swift_isaMask & **(void **)(v4
                                                                                + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionShowMoreFooterView_showMoreButton))
                                                 + 0x60);
    swift_retain();
    v8(v6, v7);
  }

  free(v3);
}

char *MOSuggestionShowMoreFooterView.init(frame:)(double a1, double a2, double a3, double a4)
{
  uint64_t v9 = OBJC_IVAR____TtC16MomentsUIService30MOSuggestionShowMoreFooterView_showMoreButton;
  id v10 = v4;
  closure #1 in variable initialization expression of MOSuggestionShowMoreFooterView.showMoreButton();
  *(void *)&v4[v9] = v11;
  NSString v12 = (void (__swiftcall **)())&v10[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionShowMoreFooterView_showMoreAction];
  void *v12 = MOSuggestionInterstitialExpandableListViewCellConstants.init();
  v12[1] = 0;

  v30.receiver = v10;
  v30.super_class = (Class)type metadata accessor for MOSuggestionShowMoreFooterView();
  id v13 = [super initWithFrame:a1, a2, a3, a4];
  uint64_t v14 = OBJC_IVAR____TtC16MomentsUIService30MOSuggestionShowMoreFooterView_showMoreButton;
  uint64_t v15 = *(void *)&v13[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionShowMoreFooterView_showMoreButton];
  Swift::String v16 = v13;
  [v16 addSubview:v15];
  Swift::String v17 = self;
  NSString v18 = v16;
  id v19 = [v17 clearColor];
  [v18 setBackgroundColor:v19];

  Swift::String v20 = self;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_1001DACA0;
  id v22 = [*(id *)&v13[v14] centerXAnchor];
  id v23 = [v18 centerXAnchor];
  id v24 = [v22 constraintEqualToAnchor:v23];

  *(void *)(v21 + 32) = v24;
  id v25 = [*(id *)&v13[v14] topAnchor];
  id v26 = [v18 topAnchor];
  id v27 = [v25 constraintEqualToAnchor:v26 constant:10.0];

  *(void *)(v21 + 40) = v27;
  specialized Array._endMutation()();
  type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v20 activateConstraints:isa];

  return v18;
}

uint64_t type metadata accessor for MOSuggestionShowMoreFooterView()
{
  return self;
}

void MOSuggestionShowMoreFooterView.init(coder:)()
{
  uint64_t v1 = OBJC_IVAR____TtC16MomentsUIService30MOSuggestionShowMoreFooterView_showMoreButton;
  closure #1 in variable initialization expression of MOSuggestionShowMoreFooterView.showMoreButton();
  *(void *)&v0[v1] = v2;
  uint64_t v3 = (void (__swiftcall **)())&v0[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionShowMoreFooterView_showMoreAction];
  *uint64_t v3 = MOSuggestionInterstitialExpandableListViewCellConstants.init();
  v3[1] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id MOSuggestionShowMoreFooterView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MOSuggestionShowMoreFooterView();
  return [super dealloc];
}

uint64_t sub_1000541D8@<X0>(void **a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x60))();
  uint64_t v5 = v4;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v3;
  *(void *)(result + 24) = v5;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed () -> ();
  a2[1] = (uint64_t (*)())result;
  return result;
}

uint64_t sub_1000542C0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

unint64_t lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey()
{
  unint64_t result = lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey;
  if (!lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey)
  {
    type metadata accessor for NSAttributedStringKey(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey);
  }
  return result;
}

void one-time initialization function for BACKGROUND_COLOR()
{
  id v0 = [self systemIndigoColor];
  id v1 = [v0 colorWithAlphaComponent:0.15];

  static Constants.BACKGROUND_COLOR = (uint64_t)v1;
}

void one-time initialization function for LABEL_HEIGHT()
{
  id v0 = [objc_allocWithZone((Class)UILabel) init];
  id v1 = [self preferredFontForTextStyle:UIFontTextStyleFootnote];
  Class isa = UIFont.withWeight(_:)(UIFontWeightSemibold).super.isa;

  double v3 = specialized UILabel.estimatedHeight(forWidth:text:ofFont:)(0, 0xE000000000000000, isa, 0.0);
  static Constants.LABEL_HEIGHT = *(void *)&v3;
}

id MOSuggestionPhotoMemoryBanner.bannerLabel.getter()
{
  id v1 = (void **)(v0 + OBJC_IVAR____TtC16MomentsUIService29MOSuggestionPhotoMemoryBanner_bannerLabel);
  swift_beginAccess();
  objc_super v2 = *v1;

  return v2;
}

void MOSuggestionPhotoMemoryBanner.bannerLabel.setter(void *a1)
{
  double v3 = (void **)(v1 + OBJC_IVAR____TtC16MomentsUIService29MOSuggestionPhotoMemoryBanner_bannerLabel);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *double v3 = a1;
}

uint64_t (*MOSuggestionPhotoMemoryBanner.bannerLabel.modify())()
{
  return MOSuggestionMapSnapshotView.platterBlurView.modify;
}

Swift::Void __swiftcall MOSuggestionPhotoMemoryBanner.setPublicUI(_:)(Swift::Bool a1)
{
  double v3 = self;
  uint64_t v4 = &selRef_systemBlueColor;
  if (!a1) {
    uint64_t v4 = &selRef_systemIndigoColor;
  }
  id v5 = [v3 *v4];
  id v6 = [v5 colorWithAlphaComponent:0.15];

  [v1 setBackgroundColor:v6];

  [v1 setNeedsDisplay];
}

id MOSuggestionPhotoMemoryBanner.init(frame:)(double a1, double a2, double a3, double a4)
{
  uint64_t v9 = OBJC_IVAR____TtC16MomentsUIService29MOSuggestionPhotoMemoryBanner_bannerLabel;
  id v10 = objc_allocWithZone((Class)UILabel);
  uint64_t v11 = v4;
  *(void *)&v4[v9] = [v10 init];

  v28.receiver = v11;
  v28.super_class = (Class)type metadata accessor for MOSuggestionPhotoMemoryBanner();
  [super initWithFrame:a1, a2, a3, a4];
  id v13 = [v12 layer];
  [v13 setCornerRadius:7.0];

  uint64_t v14 = one-time initialization token for BACKGROUND_COLOR;
  id v15 = v12;
  if (v14 != -1) {
    swift_once();
  }
  [v15 setBackgroundColor:static Constants.BACKGROUND_COLOR];

  [v15 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v16 = [objc_allocWithZone((Class)UIImageView) init];
  uint64_t v17 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v17;
  *(void *)(v18 + 24) = v16;
  id v19 = objc_allocWithZone((Class)ISIcon);
  swift_retain();
  id v20 = v16;
  NSString v21 = String._bridgeToObjectiveC()();
  id v22 = [v19 initWithBundleIdentifier:v21];

  if (one-time initialization token for iconDescriptor != -1) {
    swift_once();
  }
  uint64_t v23 = static MOSuggestionAssetAppIconProvider.iconDescriptor;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = partial apply for closure #1 in MOSuggestionPhotoMemoryBanner.initBannerView();
  *(void *)(v24 + 24) = v18;
  v27[4] = partial apply for closure #1 in static MOSuggestionAssetAppIconProvider.getImageFor(bundleIdentifier:completion:);
  v27[5] = v24;
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 1107296256;
  v27[2] = thunk for @escaping @callee_guaranteed (@guaranteed CGImageRef?) -> ();
  void v27[3] = &block_descriptor_4;
  id v25 = _Block_copy(v27);
  swift_retain();
  swift_release();
  [v22 getCGImageForImageDescriptor:v23 completion:v25];
  _Block_release(v25);

  swift_release();
  swift_release();

  return v15;
}

uint64_t type metadata accessor for MOSuggestionPhotoMemoryBanner()
{
  return self;
}

uint64_t sub_100054988()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void MOSuggestionPhotoMemoryBanner.init(coder:)()
{
  uint64_t v1 = OBJC_IVAR____TtC16MomentsUIService29MOSuggestionPhotoMemoryBanner_bannerLabel;
  *(void *)&v0[v1] = [objc_allocWithZone((Class)UILabel) init];

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t closure #1 in MOSuggestionPhotoMemoryBanner.initBannerView()(void *a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v19 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_dispatch_queue();
  id v12 = (void *)static OS_dispatch_queue.main.getter();
  id v13 = (void *)swift_allocObject();
  v13[2] = a1;
  v13[3] = a2;
  v13[4] = a3;
  aBlock[4] = partial apply for closure #1 in closure #1 in MOSuggestionPhotoMemoryBanner.initBannerView();
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_12;
  uint64_t v14 = _Block_copy(aBlock);
  id v15 = a1;
  swift_retain();
  id v16 = a3;
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v19 + 8))(v8, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v18);
}

uint64_t sub_100054DA4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for closure #1 in MOSuggestionPhotoMemoryBanner.initBannerView()(void *a1)
{
  return closure #1 in MOSuggestionPhotoMemoryBanner.initBannerView()(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

void closure #1 in closure #1 in MOSuggestionPhotoMemoryBanner.initBannerView()(void *a1, uint64_t a2, void *a3)
{
  if (a1)
  {
    swift_beginAccess();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v6 = (void *)Strong;
      id v7 = a1;
      [a3 setImage:v7];
      [a3 setContentMode:1];
      [a3 setClipsToBounds:1];
      [a3 _setCornerRadius:4.0];
      [v6 addSubview:a3];
      id v8 = [a3 superview];
      if (v8)
      {
        uint64_t v9 = v8;
        [a3 setTranslatesAutoresizingMaskIntoConstraints:0];
        id v10 = [a3 leadingAnchor];
        id v11 = [v9 leadingAnchor];
        id v12 = [v10 constraintEqualToAnchor:v11];

        [v12 setConstant:6.0];
        id v13 = v12;
        [v13 setActive:1];
      }
      id v14 = [a3 superview];
      if (v14)
      {
        id v15 = v14;
        [a3 setTranslatesAutoresizingMaskIntoConstraints:0];
        id v16 = [a3 centerYAnchor];
        id v17 = [v15 centerYAnchor];
        id v18 = [v16 constraintEqualToAnchor:v17];

        [v18 setConstant:0.0];
        id v19 = v18;
        [v19 setActive:1];
      }
      id v20 = [a3 heightAnchor];
      if (one-time initialization token for LABEL_HEIGHT != -1) {
        swift_once();
      }
      id v21 = [v20 constraintEqualToConstant:*(double *)&static Constants.LABEL_HEIGHT];

      [v21 setActive:1];
      id v22 = [a3 widthAnchor];
      id v23 = [v22 constraintEqualToConstant:*(double *)&static Constants.LABEL_HEIGHT];

      [v23 setActive:1];
      uint64_t v24 = *(uint64_t (**)(void))((swift_isaMask & *v6) + 0x58);
      id v25 = (void *)v24();
      id v26 = [self preferredFontForTextStyle:UIFontTextStyleFootnote];
      Class isa = UIFont.withWeight(_:)(UIFontWeightSemibold).super.isa;

      [v25 setFont:isa];
      objc_super v28 = (void *)v24();
      id v29 = [self labelColor];
      [v28 setTextColor:v29];

      objc_super v30 = (void *)v24();
      [v30 setNumberOfLines:0];

      unint64_t v31 = (void *)v24();
      id v32 = [self mainBundle];
      v33._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
      v64._object = (void *)0x80000001001E3340;
      v33._object = (void *)0x80000001001E3320;
      v34._uint64_t countAndFlagsBits = 0;
      v34._object = (void *)0xE000000000000000;
      v64._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
      Swift::String v35 = NSLocalizedString(_:tableName:bundle:value:comment:)(v33, (Swift::String_optional)0, (NSBundle)v32, v34, v64);

      String.append(_:)(v35);
      swift_bridgeObjectRelease();
      NSString v36 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v31 setText:v36];

      uint64_t v37 = (void *)v24();
      [v37 setAdjustsFontSizeToFitWidth:1];

      id v38 = (void *)v24();
      [v38 setAdjustsFontForContentSizeCategory:1];

      id v39 = (void *)v24();
      [v39 setMaximumContentSizeCategory:UIContentSizeCategoryAccessibilityMedium];

      id v40 = (void *)v24();
      [v6 addSubview:v40];

      id v41 = (void *)v24();
      [v41 setTranslatesAutoresizingMaskIntoConstraints:0];
      id v42 = [v41 leadingAnchor];
      id v43 = [a3 trailingAnchor];
      id v44 = [v42 constraintEqualToAnchor:v43];

      [v44 setConstant:1.0];
      [v44 setActive:1];

      id v45 = (void *)v24();
      id v46 = [v45 superview];
      if (v46)
      {
        id v47 = v46;
        [v45 setTranslatesAutoresizingMaskIntoConstraints:0];
        id v48 = [v45 topAnchor];
        id v49 = [v47 topAnchor];
        id v50 = [v48 constraintEqualToAnchor:v49];

        [v50 setConstant:6.0];
        if (v50)
        {
          id v50 = v50;
          [v50 setActive:1];

          id v45 = v50;
        }
      }
      else
      {
        id v50 = 0;
        id v47 = v45;
      }

      id v51 = (void *)v24();
      id v52 = [v51 superview];
      if (v52)
      {
        id v53 = v52;
        [v51 setTranslatesAutoresizingMaskIntoConstraints:0];
        id v54 = [v51 bottomAnchor];
        id v55 = [v53 bottomAnchor];
        id v56 = [v54 constraintEqualToAnchor:v55];

        if (v56)
        {
          [v56 setConstant:-6.0];
          id v56 = v56;
          [v56 setActive:1];

          id v51 = v56;
        }
      }
      else
      {
        id v56 = 0;
        id v53 = v51;
      }

      id v57 = (void *)v24();
      id v58 = [v57 superview];
      if (v58)
      {
        id v59 = v58;
        [v57 setTranslatesAutoresizingMaskIntoConstraints:0];
        id v60 = [v57 trailingAnchor];
        id v61 = [v59 trailingAnchor];
        id v62 = [v60 constraintEqualToAnchor:v61];

        [v62 setConstant:1.0];
        id v63 = v62;
        [v63 setActive:1];

        id v7 = v63;
        uint64_t v6 = v63;
        id v57 = v59;
      }
    }
  }
}

double static MOSuggestionPhotoMemoryBanner.photoMemoryBannerHeight()()
{
  if (one-time initialization token for LABEL_HEIGHT != -1) {
    swift_once();
  }
  return *(double *)&static Constants.LABEL_HEIGHT + 12.0;
}

id MOSuggestionPhotoMemoryBanner.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MOSuggestionPhotoMemoryBanner();
  return [super dealloc];
}

double static MOSuggestionPhotoMemoryBanner.estimatedHeight.getter()
{
  id v0 = [objc_allocWithZone((Class)UILabel) init];
  id v1 = [self preferredFontForTextStyle:UIFontTextStyleFootnote];
  Class isa = UIFont.withWeight(_:)(UIFontWeightSemibold).super.isa;

  double v3 = specialized UILabel.estimatedHeight(forWidth:text:ofFont:)(0, 0xE000000000000000, isa, 100.0);
  return v3 + 12.0;
}

void thunk for @escaping @callee_guaranteed (@guaranteed CGImageRef?) -> ()(uint64_t a1, void *a2)
{
  double v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

uint64_t sub_100055924()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for closure #1 in static MOSuggestionAssetAppIconProvider.getImageFor(bundleIdentifier:completion:)(uint64_t a1)
{
  return closure #1 in static MOSuggestionAssetAppIconProvider.getImageFor(bundleIdentifier:completion:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

uint64_t sub_10005597C@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x58))();
  *a2 = result;
  return result;
}

uint64_t sub_1000559D8(id *a1, void **a2)
{
  return (*(uint64_t (**)(id))((swift_isaMask & **a2) + 0x60))(*a1);
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  unint64_t result = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  }
  return result;
}

uint64_t sub_100055A7C()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void partial apply for closure #1 in closure #1 in MOSuggestionPhotoMemoryBanner.initBannerView()()
{
  closure #1 in closure #1 in MOSuggestionPhotoMemoryBanner.initBannerView()(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32));
}

void *MOSuggestionSheetAssetView.cornerRadius.unsafeMutableAddressor()
{
  return &static MOSuggestionSheetAssetView.cornerRadius;
}

double static MOSuggestionInterstitialCarouselViewConstants.CAROUSEL_CELL_CORNER_RADIUS.getter()
{
  return 7.0;
}

uint64_t MOSuggestionSheetAssetView.delegate.getter()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t MOSuggestionSheetAssetView.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC16MomentsUIService26MOSuggestionSheetAssetView_delegate;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*MOSuggestionSheetAssetView.delegate.modify(void *a1))(uint64_t a1, char a2)
{
  double v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC16MomentsUIService26MOSuggestionSheetAssetView_delegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = Strong;
  v3[4] = v7;
  return MOSuggestionSheetAssetGridView.delegate.modify;
}

uint64_t MOSuggestionSheetAssetView.assetViewModel.didset()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  double v3 = (char *)aBlock - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  id v8 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v9 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = partial apply for closure #1 in MOSuggestionSheetAssetView.assetViewModel.didset;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_11;
  id v10 = _Block_copy(aBlock);
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v10);

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void closure #1 in MOSuggestionSheetAssetView.assetViewModel.didset()
{
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = Strong;
    (*(void (**)(void))((swift_isaMask & *Strong) + 0xC0))();
  }
}

uint64_t MOSuggestionSheetAssetView.assetViewModel.getter()
{
  return swift_weakLoadStrong();
}

uint64_t MOSuggestionSheetAssetView.assetViewModel.setter()
{
  return swift_release();
}

void (*MOSuggestionSheetAssetView.assetViewModel.modify(void *a1))(void **a1, char a2)
{
  double v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC16MomentsUIService26MOSuggestionSheetAssetView_assetViewModel;
  v3[4] = v1;
  v3[5] = v4;
  swift_beginAccess();
  v3[3] = swift_weakLoadStrong();
  return MOSuggestionSheetAssetView.assetViewModel.modify;
}

void MOSuggestionSheetAssetView.assetViewModel.modify(void **a1, char a2)
{
  double v3 = *a1;
  swift_weakAssign();
  if (a2)
  {
    swift_release();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_release();
    MOSuggestionSheetAssetView.assetViewModel.didset();
  }

  free(v3);
}

id MOSuggestionSheetAssetView.init(frame:)(double a1, double a2, double a3, double a4)
{
  v4[OBJC_IVAR____TtC16MomentsUIService26MOSuggestionSheetAssetView_currentSizeType] = 3;
  *(void *)&v4[OBJC_IVAR____TtC16MomentsUIService26MOSuggestionSheetAssetView_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  v12.receiver = v4;
  v12.super_class = (Class)type metadata accessor for MOSuggestionSheetAssetView();
  [super initWithFrame:a1, a2, a3, a4];
  [v9 setContentMode:2];
  id v10 = [v9 layer];
  [v10 setCornerRadius:7.0];

  [v9 setClipsToBounds:1];
  return v9;
}

uint64_t type metadata accessor for MOSuggestionSheetAssetView()
{
  return self;
}

void MOSuggestionSheetAssetView.init(coder:)()
{
  v0[OBJC_IVAR____TtC16MomentsUIService26MOSuggestionSheetAssetView_currentSizeType] = 3;
  *(void *)&v0[OBJC_IVAR____TtC16MomentsUIService26MOSuggestionSheetAssetView_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  swift_weakInit();

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t MOSuggestionSheetAssetView.sizedBasedMapStyle(numLocations:)(uint64_t a1)
{
  uint64_t v3 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x98))();
  if (!v3) {
    return 5;
  }
  char v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 1328))(v3);
  swift_release();
  uint64_t result = 5;
  switch(v4)
  {
    case 2:
    case 4:
      if (a1 <= 1) {
        uint64_t result = 2;
      }
      else {
        uint64_t result = 5;
      }
      break;
    case 5:
      uint64_t result = 1;
      break;
    case 6:
      uint64_t result = 0;
      break;
    case 8:
      uint64_t result = 4;
      break;
    default:
      return result;
  }
  return result;
}

Swift::Void __swiftcall MOSuggestionSheetAssetView.initAssetView()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  __chkstk_darwin(v2 - 8);
  unint64_t v512 = (unint64_t)&v507 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v516 = type metadata accessor for Date();
  *(void *)&long long v515 = *(void *)(v516 - 8);
  uint64_t v4 = __chkstk_darwin(v516);
  uint64_t v6 = (char *)&v507 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  id v8 = (char *)&v507 - v7;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  unint64_t v510 = (unint64_t)&v507 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v511 = (uint64_t)&v507 - v12;
  uint64_t v13 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  id v16 = (char *)&v507 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  CGFloat v518 = (void *)type metadata accessor for DispatchQoS();
  v517 = (void (**)(char *, void *))*(v518 - 1);
  __chkstk_darwin(v518);
  id v18 = (char *)&v507 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for URL();
  __chkstk_darwin(v19 - 8);
  id v21 = (char *)&v507 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v22 = [v0 subviews];
  type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  unint64_t v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  CGFloat v514 = v8;
  long long v513 = v6;
  *(void *)&long long v520 = v13;
  *(void *)&long long v519 = v14;
  if (v23 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v24) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v24 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v24) {
      goto LABEL_10;
    }
  }
  if (v24 < 1)
  {
    __break(1u);
    goto LABEL_54;
  }
  for (uint64_t i = 0; i != v24; ++i)
  {
    if ((v23 & 0xC000000000000001) != 0) {
      id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v26 = *(id *)(v23 + 8 * i + 32);
    }
    id v27 = v26;
    [v26 removeFromSuperview];
  }
LABEL_10:
  swift_bridgeObjectRelease();
  [v1 frame];
  char v32 = specialized static MOSuggestionSheetGridManager.getSizeType(for:)(v28, v29, v30, v31);
  uint64_t v33 = OBJC_IVAR____TtC16MomentsUIService26MOSuggestionSheetAssetView_currentSizeType;
  *((unsigned char *)v1 + OBJC_IVAR____TtC16MomentsUIService26MOSuggestionSheetAssetView_currentSizeType) = v32;
  Swift::String v34 = *(uint64_t (**)(void))((swift_isaMask & *v1) + 0x98);
  uint64_t v35 = v34();
  if (!v35) {
    return;
  }
  uint64_t v36 = v35;
  if ((*(uint64_t (**)(void))(*(void *)v35 + 1424))())
  {
    [v1 frame];
    *(void *)&long long v520 = [objc_allocWithZone((Class)UIActivityIndicatorView) initWithFrame:v37, v38, v39, v40];
    id v41 = [self darkGrayColor];
    [(id)v520 setColor:v41];

    [(id)v520 startAnimating];
    [v1 addSubview:(void)v520];
    [(id)v520 setTranslatesAutoresizingMaskIntoConstraints:0];
    id v42 = [(id)v520 superview];
    if (v42)
    {
      id v43 = v42;
      [(id)v520 setTranslatesAutoresizingMaskIntoConstraints:0];
      id v44 = [(id)v520 centerYAnchor];
      id v45 = [v43 centerYAnchor];
      id v46 = [v44 constraintEqualToAnchor:v45];

      [v46 setConstant:0.0];
      if (v46)
      {
        id v47 = v46;
        [v47 setActive:1];
      }
    }
    *(void *)&long long v519 = [(id)v520 superview];
    if ((void)v519)
    {
      [(id)v520 setTranslatesAutoresizingMaskIntoConstraints:0];
      id v48 = [(id)v520 centerXAnchor];
      id v49 = [(id)v519 centerXAnchor];
      id v50 = [v48 constraintEqualToAnchor:v49];

      [v50 setConstant:0.0];
      if (v50)
      {
        id v51 = v50;
        [v51 setActive:1];
        swift_release();
      }
      else
      {
        swift_release();
      }
      double v86 = &v530;
    }
    else
    {
      swift_release();
      double v86 = &v531;
    }
    CGFloat v102 = (void *)*(v86 - 32);

    return;
  }
  uint64_t v52 = (*(uint64_t (**)(void))(*(void *)v36 + 632))();
  if (!v52) {
    goto LABEL_246;
  }
  id v8 = (char *)v52;
  uint64_t v508 = v33;
  uint64_t v509 = v36;
  uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v55 = v54;
  if (v53 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v55 == v56)
  {
    uint64_t v59 = swift_bridgeObjectRelease_n();
    goto LABEL_45;
  }
  char v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t v59 = swift_bridgeObjectRelease();
  if (v58)
  {
LABEL_45:
    CGFloat v87 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v509 + 560))(v59);
    if (!v87) {
      goto LABEL_54;
    }
    char v88 = *((unsigned char *)v1 + v508);
    id v89 = v8;
    id v90 = v87;
    [v1 frame];
    double v92 = v91;
    double v94 = v93;
    double v96 = v95;
    double v98 = v97;
    id v99 = objc_allocWithZone((Class)type metadata accessor for MOSuggestionActivityRingsAssetView());
    id v100 = MOSuggestionActivityRingsAssetView.init(activitySummary:currentSizeType:frame:)(v90, v88, v92, v94, v96, v98);
    goto LABEL_47;
  }
  uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v62 = v61;
  if (v60 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v62 == v63)
  {
    uint64_t v66 = swift_bridgeObjectRelease_n();
    goto LABEL_59;
  }
  char v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t v66 = swift_bridgeObjectRelease();
  if (v65)
  {
LABEL_59:
    id v89 = v8;
    uint64_t v103 = (*(uint64_t (**)(uint64_t))(*(void *)v509 + 536))(v66);
    if (!v103) {
      goto LABEL_54;
    }
    id v90 = (id)v103;
    id v100 = [objc_allocWithZone((Class)UIImageView) initWithImage:v103];
LABEL_47:
    double v101 = v100;
    [v100 setContentMode:1];
    [v1 addSubview:v101];
    UIView.fillSuper(margin:)(0.0);

    goto LABEL_48;
  }
  uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v69 = v68;
  if (v67 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v69 == v70)
  {
    uint64_t v73 = swift_bridgeObjectRelease_n();
  }
  else
  {
    char v72 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v73 = swift_bridgeObjectRelease();
    if ((v72 & 1) == 0)
    {
      uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v76 = v75;
      if (v74 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v76 == v77)
      {
        uint64_t v80 = swift_bridgeObjectRelease_n();
      }
      else
      {
        char v79 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        uint64_t v80 = swift_bridgeObjectRelease();
        if ((v79 & 1) == 0)
        {
          uint64_t v81 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v83 = v82;
          if (v81 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v83 == v84)
          {
            uint64_t v85 = swift_bridgeObjectRelease_n();
            goto LABEL_84;
          }
          char v148 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          uint64_t v85 = swift_bridgeObjectRelease();
          if (v148)
          {
LABEL_84:
            uint64_t v149 = v509;
            uint64_t v150 = (*(uint64_t (**)(uint64_t))(*(void *)v509 + 1448))(v85);
            if (v150)
            {
              double v151 = (void *)v150;
              double v104 = v8;
              uint64_t v152 = (*(uint64_t (**)(void))(*(void *)v149 + 1136))();
              if (v153)
              {
                uint64_t v154 = v152;
                uint64_t v155 = v153;
                *(double *)&uint64_t v156 = COERCE_DOUBLE((*(uint64_t (**)(void))(*(void *)v149 + 1160))());
                if ((v157 & 1) != 0
                  || (double v158 = *(double *)&v156,
                      *(void *)&long long v520 = (*(uint64_t (**)(void))(*(void *)v149 + 1184))(),
                      !v159))
                {

                  swift_bridgeObjectRelease();
                }
                else
                {
                  uint64_t v160 = v159;
                  *(void *)&long long v519 = (*(uint64_t (**)(void))(*(void *)v149 + 1208))();
                  if (v161)
                  {
                    uint64_t v162 = v161;
                    CGFloat v518 = (void *)(*(uint64_t (**)(void))(*(void *)v149 + 896))();
                    if (!v163)
                    {

                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      goto LABEL_126;
                    }
                    uint64_t v164 = v163;
                    char v165 = (*(uint64_t (**)(void))(*(void *)v509 + 1328))();
                    if (v165 == 11)
                    {

                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
LABEL_126:
                      swift_bridgeObjectRelease();

                      goto LABEL_55;
                    }
                    char v226 = v165;
                    id v227 = v151;
                    [v1 frame];
                    double v229 = v228;
                    double v231 = v230;
                    double v233 = v232;
                    double v235 = v234;
                    id v236 = objc_allocWithZone((Class)type metadata accessor for MOSuggestionActivityIconAssetView());
                    id v202 = MOSuggestionActivityIconAssetView.init(imageView:name:assignedTileSize:frame:calories:duration:distance:averageHeartRate:)(v227, (uint64_t)v518, v164, v226, v154, v155, v520, v160, v229, v231, v233, v235, v158, v519, v162);
                    [v1 addSubview:v202];
                    UIView.fillSuper(margin:)(0.0);

                    goto LABEL_128;
                  }

                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                }
              }
              else
              {
              }
              goto LABEL_68;
            }
LABEL_54:

LABEL_55:
            swift_release();
            return;
          }
          uint64_t v166 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v168 = v167;
          uint64_t v169 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          id v507 = v8;
          if (v166 == v169 && v168 == v170)
          {
            uint64_t v171 = swift_bridgeObjectRelease_n();
            goto LABEL_101;
          }
          char v172 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          uint64_t v171 = swift_bridgeObjectRelease();
          if (v172)
          {
LABEL_101:
            uint64_t v173 = v509;
            uint64_t v174 = (*(uint64_t (**)(uint64_t))(*(void *)v509 + 536))(v171);
            uint64_t v175 = v508;
            if (v174)
            {
              uint64_t v176 = (void *)v174;
              uint64_t v177 = (*(uint64_t (**)(uint64_t))(*(void *)v173 + 824))(v174);
              if (v178)
              {
                uint64_t v179 = v177;
                uint64_t v180 = v178;
                uint64_t v181 = (*(uint64_t (**)(uint64_t))(*(void *)v173 + 872))(v177);
                if (!v182)
                {

                  goto LABEL_121;
                }
                uint64_t v183 = v181;
                uint64_t v184 = v182;
                unsigned __int8 v185 = (*(uint64_t (**)(uint64_t))(*(void *)v509 + 1328))(v181);
                if (v185 == 11)
                {

                  swift_bridgeObjectRelease();
LABEL_121:
                  swift_bridgeObjectRelease();
                  uint64_t v175 = v508;
                  goto LABEL_122;
                }
                unsigned __int8 v222 = v185;
                objc_allocWithZone((Class)type metadata accessor for MOSuggestionContactAssetView());
                id v223 = v176;
                id v224 = MOSuggestionContactAssetView.init(image:name:contactFirstName:assignedTileSize:)(v223, v179, v180, v183, v184, v222);
LABEL_124:
                int64_t v225 = v224;
                [v1 addSubview:v224];
                UIView.fillSuper(margin:)(0.0);

                goto LABEL_48;
              }
            }
LABEL_122:
            type metadata accessor for MOSuggestionFallbackAssetView();
            CGFloat v221 = MOSuggestionFallbackAssetView.__allocating_init(with:sizeType:)(0xD000000000000012, 0x80000001001E11B0, *((unsigned char *)v1 + v175));
            [v1 addSubview:v221];
            UIView.fillSuper(margin:)(0.0);

            goto LABEL_48;
          }
          uint64_t v203 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v205 = v204;
          if (v203 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v205 == v206)
          {
            uint64_t v207 = swift_bridgeObjectRelease_n();
            goto LABEL_116;
          }
          char v208 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          uint64_t v207 = swift_bridgeObjectRelease();
          if (v208)
          {
LABEL_116:
            uint64_t v209 = (*(uint64_t (**)(uint64_t))(*(void *)v509 + 536))(v207);
            if (v209)
            {
              unint64_t v210 = (void *)v209;
              id v211 = objc_allocWithZone((Class)UIImageView);
              id v212 = [v211 initWithImage:v210];
              uint64_t v213 = v34();
              if (v213)
              {
                double v214 = (uint64_t *)v213;
                [v1 frame];
                int v219 = specialized static MOSuggestionSheetGridManager.getSizeType(for:)(v215, v216, v217, v218);
                uint64_t v220 = *v214;
                if (v219 == 2) {
                  (*(void (**)(CGPoint *__return_ptr))(v220 + 1280))(&aBlock);
                }
                else {
                  (*(void (**)(CGPoint *__return_ptr))(v220 + 1256))(&aBlock);
                }
                CGPoint v242 = aBlock;
                CGSize v243 = v522;
                char v244 = (char)v523;
                swift_release();
                if ((v244 & 1) == 0)
                {
                  v536.origin.double x = 0.0;
                  v536.origin.double y = 0.0;
                  v536.size.double width = 0.0;
                  v536.size.double height = 0.0;
                  v534.CGPoint origin = v242;
                  v534.CGSize size = v243;
                  if (!CGRectEqualToRect(v534, v536))
                  {
                    id v245 = [v212 layer];
                    [v245 setContentsRect:v242, v243];
                  }
                }
              }
              [v212 setContentMode:2];
              [v1 addSubview:v212];
              UIView.fillSuper(margin:)(0.0);
              swift_bridgeObjectRelease();
              [v212 setIsAccessibilityElement:1];
              UIAccessibilityTraits v246 = UIAccessibilityTraitImage;
              id v247 = v212;
              unint64_t v248 = (unint64_t)[v247 accessibilityTraits];
              if ((v246 & ~v248) != 0) {
                UIAccessibilityTraits v249 = v246;
              }
              else {
                UIAccessibilityTraits v249 = 0;
              }
              [v247 setAccessibilityTraits:v249 | v248];

              [v247 setAccessibilityIgnoresInvertColors:1];
              double v250 = self;
              id v251 = v247;
              id v252 = [v250 mainBundle];
              v533._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
              v533._object = (void *)0x80000001001E33C0;
              v253._uint64_t countAndFlagsBits = 0x7361206F746F6850;
              v253._object = (void *)0xEB00000000746573;
              v254._uint64_t countAndFlagsBits = 0;
              v254._object = (void *)0xE000000000000000;
              NSLocalizedString(_:tableName:bundle:value:comment:)(v253, (Swift::String_optional)0, (NSBundle)v252, v254, v533);

              NSString v255 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease();
              [v251 setAccessibilityLabel:v255];

              goto LABEL_140;
            }
            goto LABEL_145;
          }
          uint64_t v237 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v239 = v238;
          if (v237 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v239 == v240)
          {
            uint64_t v241 = swift_bridgeObjectRelease_n();
            goto LABEL_142;
          }
          char v256 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          uint64_t v241 = swift_bridgeObjectRelease();
          if (v256)
          {
LABEL_142:
            uint64_t v257 = (*(uint64_t (**)(uint64_t))(*(void *)v509 + 920))(v241);
            if (v257)
            {
              unint64_t v258 = (void *)v257;
              char v259 = (*(uint64_t (**)(uint64_t))(*(void *)v509 + 1328))(v257);
              if (v259 != 11)
              {
                char v270 = v259;
                id v271 = v258;
                id v272 = [v1 frame:v507];
                double v274 = v273;
                double v276 = v275;
                double v278 = v277;
                double v280 = v279;
                char v281 = (*(uint64_t (**)(id))(*(void *)v509 + 1232))(v272);
                id v282 = objc_allocWithZone((Class)type metadata accessor for MOSuggestionLivePhotoView());
                int64_t v283 = MOSuggestionLivePhotoView.init(livePhoto:frame:shouldAutoPlay:size:)(v271, v281 & 1, v270, v274, v276, v278, v280);
                uint64_t v284 = v34();
                if (v284)
                {
                  uint64_t v285 = (uint64_t *)v284;
                  [v1 frame];
                  int v290 = specialized static MOSuggestionSheetGridManager.getSizeType(for:)(v286, v287, v288, v289);
                  uint64_t v291 = *v285;
                  if (v290 == 2) {
                    (*(void (**)(CGPoint *__return_ptr))(v291 + 1280))(&aBlock);
                  }
                  else {
                    (*(void (**)(CGPoint *__return_ptr))(v291 + 1256))(&aBlock);
                  }
                  CGPoint v299 = aBlock;
                  CGSize v300 = v522;
                  char v301 = (char)v523;
                  swift_release();
                  if ((v301 & 1) == 0)
                  {
                    v537.origin.double x = 0.0;
                    v537.origin.double y = 0.0;
                    v537.size.double width = 0.0;
                    v537.size.double height = 0.0;
                    v535.CGPoint origin = v299;
                    v535.CGSize size = v300;
                    if (!CGRectEqualToRect(v535, v537)) {
                      (*(void (**)(double, double, double, double))((swift_isaMask & *(void *)v283) + 0x88))(v299.x, v299.y, v300.width, v300.height);
                    }
                  }
                }
                [v1 addSubview:v283];
                UIView.fillSuper(margin:)(0.0);
                uint64_t v302 = swift_bridgeObjectRelease();
                uint64_t v303 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v1) + 0x80))(v302);
                (*(void (**)(uint64_t))((swift_isaMask & *(void *)v283) + 0x70))(v303);

                goto LABEL_140;
              }
            }
LABEL_145:
            type metadata accessor for MOSuggestionFallbackAssetView();
            char v260 = *((unsigned char *)v1 + v508);
            uint64_t v261 = 1953458288;
LABEL_146:
            unint64_t v262 = v261 & 0xFFFF0000FFFFFFFFLL | 0x6F00000000;
            unint64_t v263 = 0xE500000000000000;
LABEL_147:
            id v264 = MOSuggestionFallbackAssetView.__allocating_init(with:sizeType:)(v262, v263, v260);
            [v1 addSubview:v264];
            UIView.fillSuper(margin:)(0.0);
LABEL_148:

            goto LABEL_48;
          }
          uint64_t v265 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v267 = v266;
          if (v265 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v267 == v268)
          {
            uint64_t v269 = swift_bridgeObjectRelease_n();
LABEL_156:
            uint64_t v293 = (*(uint64_t (**)(uint64_t))(*(void *)v509 + 944))(v269);
            if (v293)
            {
              v294 = (void *)v293;
              char v295 = (*(uint64_t (**)(void))(*(void *)v509 + 1328))();
              if (v295 != 11)
              {
                char v309 = v295;
                static URL._unconditionallyBridgeFromObjectiveC(_:)();
                id v310 = [v1 frame];
                CGFloat v312 = v311;
                CGFloat v314 = v313;
                CGFloat v316 = v315;
                CGFloat v318 = v317;
                uint64_t v319 = ((uint64_t (*)(id))v34)(v310);
                if (v319)
                {
                  unint64_t v320 = (uint64_t *)v319;
                  [v1 frame:v507];
                  int v325 = specialized static MOSuggestionSheetGridManager.getSizeType(for:)(v321, v322, v323, v324);
                  uint64_t v326 = *v320;
                  if (v325 == 2) {
                    (*(void (**)(_OWORD *__return_ptr))(v326 + 1280))(v525);
                  }
                  else {
                    (*(void (**)(_OWORD *__return_ptr))(v326 + 1256))(v525);
                  }
                  long long v516 = v525[0];
                  long long v515 = v525[1];
                  char v355 = v526;
                  swift_release();
                }
                else
                {
                  long long v516 = 0u;
                  char v355 = 1;
                  long long v515 = 0u;
                }
                long long v527 = v516;
                long long v528 = v515;
                char v529 = v355;
                id v356 = objc_allocWithZone((Class)type metadata accessor for MOSuggestionSheetVideoPlaybackView());
                MOSuggestionSheetVideoPlaybackView.init(url:frame:assignedTileSize:cropRect:)((uint64_t)v21, v309, (uint64_t)&v527, v312, v314, v316, v318);
                unint64_t v358 = v357;
                [v1 addSubview:v357];
                UIView.fillSuper(margin:)(0.0);
                uint64_t v359 = swift_bridgeObjectRelease();
                if ((*(uint64_t (**)(uint64_t))(*(void *)v509 + 1232))(v359))
                {
                  type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
                  int64_t v360 = (void *)static OS_dispatch_queue.main.getter();
                  uint64_t v361 = swift_allocObject();
                  *(void *)(v361 + 16) = v358;
                  uint64_t v523 = partial apply for closure #1 in MOSuggestionSheetAssetView.initAssetView();
                  uint64_t v524 = v361;
                  *(void *)&aBlock.double x = _NSConcreteStackBlock;
                  *(void *)&aBlock.double y = 1107296256;
                  *(void *)&v522.double width = thunk for @escaping @callee_guaranteed () -> ();
                  *(void *)&v522.double height = &block_descriptor_5;
                  v362 = _Block_copy(&aBlock);
                  id v363 = v358;
                  swift_release();
                  static DispatchQoS.unspecified.getter();
                  *(void *)&aBlock.double x = _swiftEmptyArrayStorage;
                  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
                  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
                  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
                  uint64_t v364 = v520;
                  dispatch thunk of SetAlgebra.init<A>(_:)();
                  OS_dispatch_queue.async(group:qos:flags:execute:)();
                  swift_release();
                  _Block_release(v362);

                  (*(void (**)(char *, uint64_t))(v519 + 8))(v16, v364);
                  v517[1](v18, v518);
                }
                else
                {

                  swift_release();
                }
                return;
              }
            }
            uint64_t v296 = (*(uint64_t (**)(void))(*(void *)v509 + 536))();
            if (v296)
            {
              unint64_t v297 = (void *)v296;
              char v298 = (*(uint64_t (**)(void))(*(void *)v509 + 1328))();
              if (v298 != 11)
              {
                char v327 = v298;
                id v328 = v297;
                uint64_t v329 = v34();
                if (v329)
                {
                  v330 = (uint64_t *)v329;
                  [v1 frame:v507];
                  int v335 = specialized static MOSuggestionSheetGridManager.getSizeType(for:)(v331, v332, v333, v334);
                  uint64_t v336 = *v330;
                  if (v335 == 2) {
                    (*(void (**)(long long *__return_ptr))(v336 + 1280))(&v527);
                  }
                  else {
                    (*(void (**)(long long *__return_ptr))(v336 + 1256))(&v527);
                  }
                  long long v520 = v527;
                  long long v519 = v528;
                  char v370 = v529;
                  uint64_t v329 = swift_release();
                }
                else
                {
                  long long v520 = 0u;
                  char v370 = 1;
                  long long v519 = 0u;
                }
                CGPoint aBlock = (CGPoint)v520;
                CGSize v522 = (CGSize)v519;
                LOBYTE(v523) = v370;
                v371 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v509 + 1160))(v329);
                char v373 = v372 & 1;
                id v374 = objc_allocWithZone((Class)type metadata accessor for MOSuggestionSheetVideoPlaybackView.ThumbnailView());
                v375 = (void *)MOSuggestionSheetVideoPlaybackView.ThumbnailView.init(thumbnail:assignedTileSize:cropRect:duration:)(v328, v327, (uint64_t)&aBlock, v371, v373);
                [v1 addSubview:v375];
                UIView.fillSuper(margin:)(0.0);

                goto LABEL_48;
              }
            }
            type metadata accessor for MOSuggestionFallbackAssetView();
            char v260 = *((unsigned char *)v1 + v508);
            uint64_t v261 = 1701079414;
            goto LABEL_146;
          }
          char v292 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          uint64_t v269 = swift_bridgeObjectRelease();
          if (v292) {
            goto LABEL_156;
          }
          uint64_t v304 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v306 = v305;
          if (v304 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v306 == v307)
          {
            uint64_t v308 = swift_bridgeObjectRelease_n();
            goto LABEL_178;
          }
          char v337 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          uint64_t v308 = swift_bridgeObjectRelease();
          if (v337)
          {
LABEL_178:
            uint64_t v338 = (*(uint64_t (**)(uint64_t))(*(void *)v509 + 536))(v308);
            if (v338)
            {
              CGPoint v339 = (void *)v338;
              uint64_t v340 = (*(uint64_t (**)(void))(*(void *)v509 + 1400))();
              if ((v341 & 1) == 0)
              {
                uint64_t v342 = v340;
                uint64_t v343 = v509;
                v344 = *(uint64_t (**)(void))(*(void *)v509 + 1352);
                id v345 = v339;
                uint64_t v346 = v344();
                uint64_t v348 = v347;
                uint64_t v349 = (*(uint64_t (**)(void))(*(void *)v343 + 1376))();
                uint64_t v351 = v350;
                LODWORD(v342) = MOSuggestionSheetAssetView.sizedBasedMapStyle(numLocations:)(v342);
                int v352 = (*(uint64_t (**)(void))(*(void *)v343 + 1328))();
                id v353 = objc_allocWithZone((Class)type metadata accessor for MOSuggestionMapSnapshotView());
                CGFloat v354 = MOSuggestionMapSnapshotView.init(baseMapImage:prominentField:secondaryField:style:assignedTileSize:)(v345, v346, v348, v349, v351, v342, v352);
                [v354 setContentMode:2];
                [v1 addSubview:v354];
                UIView.fillSuper(margin:)(0.0);

                goto LABEL_48;
              }
            }
            goto LABEL_193;
          }
          uint64_t v365 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v367 = v366;
          if (v365 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v367 == v368)
          {
            uint64_t v369 = swift_bridgeObjectRelease_n();
LABEL_198:
            uint64_t v377 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v509 + 536))(v369);
            if (!v377)
            {
LABEL_193:
              type metadata accessor for MOSuggestionFallbackAssetView();
              char v260 = *((unsigned char *)v1 + v508);
              unint64_t v263 = 0x80000001001E1180;
              unint64_t v262 = 0xD000000000000015;
              goto LABEL_147;
            }
            uint64_t v378 = *(uint64_t (**)(id))(*(void *)v509 + 1328);
            id v379 = v377;
            int v380 = v378(v379);
            id v381 = objc_allocWithZone((Class)type metadata accessor for MOSuggestionMapSnapshotView());
            CGPoint v382 = MOSuggestionMapSnapshotView.init(baseMapImage:prominentField:secondaryField:style:assignedTileSize:)(v379, 0, 0, 0, 0, 5, v380);
LABEL_200:
            unint64_t v383 = v382;
            [v382 setContentMode:2 v507];
            [v1 addSubview:v383];
            UIView.fillSuper(margin:)(0.0);

            goto LABEL_48;
          }
          char v376 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          uint64_t v369 = swift_bridgeObjectRelease();
          if (v376) {
            goto LABEL_198;
          }
          uint64_t v384 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v386 = v385;
          if (v384 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v386 == v387)
          {
            uint64_t v388 = swift_bridgeObjectRelease_n();
            goto LABEL_205;
          }
          char v389 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          uint64_t v388 = swift_bridgeObjectRelease();
          if (v389)
          {
LABEL_205:
            uint64_t v390 = (*(uint64_t (**)(uint64_t))(*(void *)v509 + 584))(v388);
            if (v390)
            {
              v391 = (void *)v390;
              uint64_t v392 = (*(uint64_t (**)(uint64_t))(*(void *)v509 + 1136))(v390);
              if (v393)
              {
                uint64_t v394 = v392;
                uint64_t v395 = v393;
                *(double *)&uint64_t v396 = COERCE_DOUBLE((*(uint64_t (**)(uint64_t))(*(void *)v509 + 1160))(v392));
                if ((v397 & 1) != 0
                  || (double v398 = *(double *)&v396,
                      uint64_t v399 = (*(uint64_t (**)(uint64_t))(*(void *)v509 + 1184))(v396),
                      !v400))
                {

                  swift_bridgeObjectRelease();
                }
                else
                {
                  uint64_t v401 = v399;
                  uint64_t v402 = v400;
                  uint64_t v403 = (*(uint64_t (**)(uint64_t))(*(void *)v509 + 896))(v399);
                  if (v404)
                  {
                    uint64_t v405 = v403;
                    uint64_t v406 = v404;
                    char v407 = (*(uint64_t (**)(uint64_t))(*(void *)v509 + 1328))(v403);
                    if (v407 != 11)
                    {
                      char v428 = v407;
                      id v429 = v391;
                      [v1 frame:v507];
                      double v431 = v430;
                      double v433 = v432;
                      double v435 = v434;
                      double v437 = v436;
                      id v438 = objc_allocWithZone((Class)type metadata accessor for MOSuggestionActivityRouteAssetView());
                      id v264 = MOSuggestionActivityRouteAssetView.init(routeMap:name:assignedTileSize:frame:calories:duration:distance:)(v429, v405, v406, v428, v394, v395, v401, v402, v431, v433, v435, v437, v398);
                      [v1 addSubview:v264];
                      UIView.fillSuper(margin:)(0.0);

                      goto LABEL_148;
                    }

                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                  }
                  else
                  {

                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                  }
                }
              }
              else
              {
              }
            }
            goto LABEL_140;
          }
          uint64_t v408 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v410 = v409;
          if (v408 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v410 == v411)
          {
            uint64_t v412 = swift_bridgeObjectRelease_n();
            goto LABEL_218;
          }
          char v413 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          uint64_t v412 = swift_bridgeObjectRelease();
          if (v413)
          {
LABEL_218:
            uint64_t v414 = (*(uint64_t (**)(uint64_t))(*(void *)v509 + 608))(v412);
            if (v414)
            {
              unint64_t v415 = (void *)v414;
              id v416 = objc_allocWithZone((Class)type metadata accessor for MOSuggestionLinkShareView());
              id v223 = v415;
              id v224 = MOSuggestionLinkShareView.init(linkMetadata:)(v223);
              goto LABEL_124;
            }
            goto LABEL_140;
          }
          uint64_t v417 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v419 = v418;
          if (v417 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v419 == v420)
          {
            uint64_t v421 = swift_bridgeObjectRelease_n();
            goto LABEL_225;
          }
          char v422 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          uint64_t v421 = swift_bridgeObjectRelease();
          if (v422)
          {
LABEL_225:
            long long v423 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v509 + 680))(v421);
            if (v423)
            {
              id v379 = v423;
              id v424 = [v423 reflectionType:v507];
              id v425 = [v379 reflectionPrompts];
              uint64_t v426 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

              objc_allocWithZone((Class)type metadata accessor for ReflectionPromptView());
              uint64_t v427 = v509;
              swift_retain();
              CGPoint v382 = ReflectionPromptView.init(type:prompts:updateReflectionIndex:)((uint64_t)v424, v426, (uint64_t)partial apply for implicit closure #2 in implicit closure #1 in MOSuggestionSheetAssetView.initAssetView(), v427);
              goto LABEL_200;
            }
LABEL_140:

            goto LABEL_55;
          }
          uint64_t v439 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v441 = v440;
          if (v439 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v441 == v442)
          {
            uint64_t v443 = swift_bridgeObjectRelease_n();
            goto LABEL_232;
          }
          char v444 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          uint64_t v443 = swift_bridgeObjectRelease();
          if (v444)
          {
LABEL_232:
            char v445 = (*(uint64_t (**)(uint64_t))(*(void *)v509 + 1328))(v443);
            if (v445 != 11)
            {
              char v446 = v445;
              uint64_t v447 = v509;
              unint64_t v448 = (void *)(*(uint64_t (**)(void))(*(void *)v509 + 536))();
              *(void *)&long long v516 = v448;
              *(void *)&long long v520 = (*(uint64_t (**)(void))(*(void *)v447 + 728))();
              *(void *)&long long v519 = v449;
              uint64_t v450 = v511;
              uint64_t v451 = (*(uint64_t (**)(void))(*(void *)v447 + 752))();
              v517 = (void (**)(char *, void *))(*(uint64_t (**)(uint64_t))(*(void *)v447
                                                                                                + 1712))(v451);
              uint64_t v452 = v510;
              outlined init with copy of URL?(v450, v510);
              v453 = *(uint64_t (**)(void))(*(void *)v447 + 776);
              CGFloat v518 = v448;
              *(void *)&long long v515 = v453();
              uint64_t v454 = (*(uint64_t (**)(void))(*(void *)v447 + 1040))();
              uint64_t v456 = v455;
              uint64_t v457 = (*(uint64_t (**)(void))(*(void *)v447 + 1064))();
              uint64_t v459 = v458;
              double v460 = (void *)(*(uint64_t (**)(void))(*(void *)v447 + 1688))();
              uint64_t v461 = (*(uint64_t (**)(void))(*(void *)v447 + 1736))();
              id v462 = objc_allocWithZone((Class)type metadata accessor for MOSuggestionSheetMediaAssetView());
              v463 = specialized MOSuggestionSheetMediaAssetView.init(mediaAssetID:mediaPreviewURL:image:mediaType:sizeType:title:subtitle:assignedTileSize:bgColor:associatedColors:colorVariant:)(v520, v519, v452, (void *)v516, v515, v454, v456, v457, v459, v446, v460, (uint64_t)v517, v461);
              [v1 addSubview:v463];
              UIView.fillSuper(margin:)(0.0);

              swift_release();
              swift_bridgeObjectRelease();
              outlined destroy of Any?(v511, &demangling cache variable for type metadata for URL?);
              return;
            }
            goto LABEL_140;
          }
          uint64_t v464 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v466 = v465;
          if (v464 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v466 == v467)
          {
            uint64_t v468 = swift_bridgeObjectRelease_n();
            goto LABEL_238;
          }
          char v469 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          uint64_t v468 = swift_bridgeObjectRelease();
          if (v469)
          {
LABEL_238:
            uint64_t v470 = (*(uint64_t (**)(uint64_t))(*(void *)v509 + 536))(v468);
            if (!v470) {
              goto LABEL_254;
            }
            v471 = (void *)v470;
            uint64_t v472 = (*(uint64_t (**)(void))(*(void *)v509 + 1616))();
            if (!v472)
            {

              goto LABEL_254;
            }
            uint64_t v473 = v472;
            uint64_t v474 = (*(uint64_t (**)(void))(*(void *)v509 + 1640))();
            if (v474)
            {
              uint64_t v475 = v474;
              char v476 = (*(uint64_t (**)(void))(*(void *)v509 + 1328))();
              if (v476 != 11)
              {
                char v477 = v476;
                *(void *)&long long v520 = (*(uint64_t (**)(void))(*(void *)v509 + 1472))();
                if (v478)
                {
                  unint64_t v479 = v478;
                  unint64_t v480 = v512;
                  (*(void (**)(void))(*(void *)v509 + 1664))();
                  if ((*(unsigned int (**)(unint64_t, uint64_t, void))(v515 + 48))(v480, 1, v516) != 1)
                  {
                    (*(void (**)(char *, unint64_t, void))(v515 + 32))(v514, v512, v516);
                    *(void *)&long long v519 = v471;
                    id v485 = [v1 frame];
                    double v487 = v486;
                    double v489 = v488;
                    double v491 = v490;
                    double v493 = v492;
                    uint64_t v494 = v509;
                    CGFloat v518 = (void *)(*(uint64_t (**)(id))(*(void *)v509 + 1496))(v485);
                    v517 = (void (**)(char *, void *))(*(uint64_t (**)(void))(*(void *)v494 + 1520))();
                    unint64_t v512 = v495;
                    uint64_t v511 = (*(uint64_t (**)(void))(*(void *)v494 + 1544))();
                    unint64_t v510 = v496;
                    uint64_t v508 = (*(uint64_t (**)(void))(*(void *)v494 + 1568))();
                    unint64_t v498 = v497;
                    uint64_t v499 = (*(uint64_t (**)(void))(*(void *)v494 + 1592))();
                    unint64_t v501 = v500;
                    uint64_t v502 = (uint64_t)v513;
                    (*(void (**)(char *, char *, void))(v515 + 16))(v513, v514, v516);
                    id v503 = objc_allocWithZone((Class)type metadata accessor for MOSuggestionStateOfMindAssetView());
                    uint64_t v506 = v473;
                    CGPoint v504 = (void *)v519;
                    CGPoint v505 = specialized MOSuggestionStateOfMindAssetView.init(image:assignedTileSize:frame:valenceClassificationAndReflectiveInterval:reflectiveInterval:labels:labelsShortened:domains:domainsShortened:associatedColorsLight:associatedColorsDark:startDate:)(v519, v477, v520, v479, (uint64_t)v518, (uint64_t)v517, v512, v511, v487, v489, v491, v493, v510, v508, v498, v499, v501, v506, v475,
                             v502);

                    [v1 addSubview:v505];
                    UIView.fillSuper(margin:)(0.0);

                    swift_release();
                    swift_bridgeObjectRelease();
                    (*(void (**)(char *, void))(v515 + 8))(v514, v516);
                    return;
                  }
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();

                  outlined destroy of Any?(v512, (uint64_t *)&demangling cache variable for type metadata for Date?);
LABEL_254:
                  type metadata accessor for MOSuggestionFallbackAssetView();
                  double v484 = MOSuggestionFallbackAssetView.__allocating_init(with:sizeType:)(0xD000000000000011, 0x80000001001E11D0, *((unsigned char *)v1 + v508));
                  [v1 addSubview:v484];
                  UIView.fillSuper(margin:)(0.0);

                  swift_release();
                  swift_bridgeObjectRelease();
                  return;
                }
              }

              swift_bridgeObjectRelease();
            }
            else
            {
            }
            swift_bridgeObjectRelease();
            goto LABEL_254;
          }

LABEL_246:
          NSString v481 = String._bridgeToObjectiveC()();
          id v482 = [self imageNamed:v481];

          id v483 = [objc_allocWithZone((Class)UIImageView) initWithImage:v482];
          [v1 addSubview:v483];
          UIView.fillSuper(margin:)(0.0);

          swift_release();
          goto LABEL_247;
        }
      }
      double v104 = v8;
      uint64_t v129 = v509;
      uint64_t v130 = (*(uint64_t (**)(uint64_t))(*(void *)v509 + 536))(v80);
      if (!v130) {
        goto LABEL_82;
      }
      CGPoint v131 = (void *)v130;
      uint64_t v132 = (*(uint64_t (**)(void))(*(void *)v129 + 1136))();
      if (v133)
      {
        uint64_t v134 = v132;
        uint64_t v135 = v133;
        uint64_t v136 = v129;
        uint64_t v137 = (*(uint64_t (**)(void))(*(void *)v129 + 1160))();
        if ((v138 & 1) != 0
          || (v139 = *(double *)&v137, uint64_t v140 = (*(uint64_t (**)(void))(*(void *)v129 + 1184))(), !v141))
        {
        }
        else
        {
          uint64_t v142 = v140;
          uint64_t v143 = v141;
          *(void *)&long long v520 = (*(uint64_t (**)(void))(*(void *)v136 + 1208))();
          if (v144)
          {
            uint64_t v145 = v144;
            CGFloat v518 = (void *)(*(uint64_t (**)(void))(*(void *)v136 + 896))();
            *(void *)&long long v519 = v146;
            if (v146)
            {
              LODWORD(v516) = (*(uint64_t (**)(void))(*(void *)v136 + 1328))();
              if (v516 != 11)
              {
                double v186 = v139;
                uint64_t v187 = one-time initialization token for exerciseGreen;
                v517 = v131;
                if (v187 != -1) {
                  swift_once();
                }
                CGFloat v188 = (void *)static MOSuggestionTheme.Colors.exerciseGreen;
                *(void *)&long long v515 = [(id)static MOSuggestionTheme.Colors.exerciseGreen colorWithAlphaComponent:0.18];
                id v189 = [v188 colorWithAlphaComponent:0.18];
                id v190 = objc_allocWithZone((Class)type metadata accessor for MOSuggestionWorkoutIconGlyphView());
                id v191 = v188;
                id v192 = MOSuggestionWorkoutIconGlyphView.init(image:glyphLightBackgroundColor:glyphDarkBackgroundColor:glyphTintColor:)(v517, (void *)v515, v189, v191);
                [v1 frame];
                double v194 = v193;
                double v196 = v195;
                double v198 = v197;
                double v200 = v199;
                id v201 = objc_allocWithZone((Class)type metadata accessor for MOSuggestionActivityIconAssetView());
                id v202 = MOSuggestionActivityIconAssetView.init(imageView:name:assignedTileSize:frame:calories:duration:distance:averageHeartRate:)(v192, (uint64_t)v518, v519, v516, v134, v135, v142, v143, v194, v196, v198, v200, v186, v520, v145);
                [v1 addSubview:v202];
                UIView.fillSuper(margin:)(0.0);

LABEL_128:
                goto LABEL_48;
              }

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_82;
            }

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          else
          {

            swift_bridgeObjectRelease();
          }
        }
        swift_bridgeObjectRelease();
      }
      else
      {
      }
LABEL_82:
      type metadata accessor for MOSuggestionFallbackAssetView();
      CGPoint v147 = MOSuggestionFallbackAssetView.__allocating_init(with:sizeType:)(0x722E657275676966, 0xEA00000000006E75, *((unsigned char *)v1 + v508));
      [v1 addSubview:v147];
      UIView.fillSuper(margin:)(0.0);

      goto LABEL_48;
    }
  }
  double v104 = v8;
  uint64_t v105 = v509;
  uint64_t v106 = (*(uint64_t (**)(uint64_t))(*(void *)v509 + 1040))(v73);
  if (!v107)
  {
LABEL_68:

    goto LABEL_55;
  }
  uint64_t v108 = v106;
  uint64_t v109 = v107;
  uint64_t v110 = (*(uint64_t (**)(void))(*(void *)v105 + 1064))();
  if (!v111)
  {
LABEL_67:
    swift_bridgeObjectRelease();
    goto LABEL_68;
  }
  uint64_t v112 = v110;
  uint64_t v113 = v111;
  char v114 = (*(uint64_t (**)(void))(*(void *)v105 + 1328))();
  if (v114 == 11)
  {
    swift_bridgeObjectRelease();
    goto LABEL_67;
  }
  char v115 = v114;
  unint64_t v116 = (void *)(*(uint64_t (**)(void))(*(void *)v105 + 536))();
  id v117 = [v1 frame];
  double v119 = v118;
  double v121 = v120;
  double v123 = v122;
  double v125 = v124;
  CGFloat v126 = (void *)(*(uint64_t (**)(id))(*(void *)v105 + 1448))(v117);
  id v127 = objc_allocWithZone((Class)type metadata accessor for MOSuggestionMotionAssetView());
  unint64_t v128 = MOSuggestionMotionAssetView.init(image:title:subtitle:assignedTileSize:frame:snowglobeView:)(v116, v108, v109, v112, v113, v115, v126, v119, v121, v123, v125);
  [v1 addSubview:v128];
  UIView.fillSuper(margin:)(0.0);

LABEL_48:
  swift_release();
LABEL_247:

  swift_bridgeObjectRelease();
}

id @nonobjc UIImage.__allocating_init(named:)()
{
  NSString v0 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v1 = [(id)swift_getObjCClassFromMetadata() imageNamed:v0];

  return v1;
}

Swift::Void __swiftcall MOSuggestionSheetAssetView.prepareForReuse()()
{
  (*(void (**)(void))((swift_isaMask & *v0) + 0xA0))(0);
  id v1 = [v0 subviews];
  type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v3) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v3) {
      goto LABEL_10;
    }
  }
  if (v3 < 1)
  {
    __break(1u);
    return;
  }
  for (uint64_t i = 0; i != v3; ++i)
  {
    if ((v2 & 0xC000000000000001) != 0) {
      id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v5 = *(id *)(v2 + 8 * i + 32);
    }
    uint64_t v6 = v5;
    [v5 removeFromSuperview];
  }
LABEL_10:

  swift_bridgeObjectRelease();
}

id MOSuggestionSheetAssetView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MOSuggestionSheetAssetView();
  return [super dealloc];
}

uint64_t outlined init with copy of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in MOSuggestionSheetAssetView.initAssetView()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1792))();
}

uint64_t sub_10005A0B4()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t partial apply for closure #1 in MOSuggestionSheetAssetView.initAssetView()()
{
  return (*(uint64_t (**)(uint64_t))((swift_isaMask & **(void **)(v0 + 16)) + 0x118))(1);
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

uint64_t sub_10005A164@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x80))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_10005A1C0(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))((swift_isaMask & **a2) + 0x88);
  uint64_t v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t sub_10005A234@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x98))();
  *a2 = result;
  return result;
}

uint64_t sub_10005A290(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))((swift_isaMask & **a2) + 0xA0);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_10005A2F4()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void partial apply for closure #1 in MOSuggestionSheetAssetView.assetViewModel.didset()
{
}

uint64_t MOSuggestionSheetHalfMosaicLayout.cachedAttributes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MOSuggestionSheetHalfMosaicLayout.cachedAttributes.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetHalfMosaicLayout_cachedAttributes);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*MOSuggestionSheetHalfMosaicLayout.cachedAttributes.modify())()
{
  return MOSuggestionMapSnapshotView.secondaryField.modify;
}

double MOSuggestionSheetHalfMosaicLayout.contentBounds.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetHalfMosaicLayout_contentBounds;
  swift_beginAccess();
  return *(double *)v1;
}

uint64_t MOSuggestionSheetHalfMosaicLayout.contentBounds.setter(double a1, double a2, double a3, double a4)
{
  uint64_t v9 = (double *)(v4 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetHalfMosaicLayout_contentBounds);
  uint64_t result = swift_beginAccess();
  double *v9 = a1;
  v9[1] = a2;
  v9[2] = a3;
  v9[3] = a4;
  return result;
}

uint64_t (*MOSuggestionSheetHalfMosaicLayout.contentBounds.modify())()
{
  return MOSuggestionMapSnapshotView.platterBlurView.modify;
}

uint64_t MOSuggestionSheetHalfMosaicLayout.mosaicSegmentDelegate.getter()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t MOSuggestionSheetHalfMosaicLayout.mosaicSegmentDelegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetHalfMosaicLayout_mosaicSegmentDelegate;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*MOSuggestionSheetHalfMosaicLayout.mosaicSegmentDelegate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetHalfMosaicLayout_mosaicSegmentDelegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = Strong;
  v3[4] = v7;
  return MOSuggestionSheetAssetGridView.delegate.modify;
}

Swift::Void __swiftcall MOSuggestionSheetHalfMosaicLayout.prepare()()
{
  uint64_t v1 = v0;
  uint64_t v104 = type metadata accessor for IndexPath();
  uint64_t v2 = *(void *)(v104 - 8);
  __chkstk_darwin(v104);
  uint64_t v103 = (char *)&v77 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = (objc_class *)type metadata accessor for MOSuggestionSheetHalfMosaicLayout();
  v107.receiver = v0;
  v107.super_class = v4;
  [super prepareLayout];
  id v5 = [v0 collectionView];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void (**)(uint64_t, _UNKNOWN **))((swift_isaMask & *v0) + 0xA0);
    uint64_t v8 = swift_unknownObjectRetain();
    v7(v8, &protocol witness table for MOSuggestionSheetHalfMosaicLayout);
    uint64_t v9 = (swift_isaMask & *v0) + 120;
    CGFloat v102 = *(uint64_t (**)(CGRect *))((swift_isaMask & *v0) + 0x78);
    uint64_t v101 = v9;
    uint64_t v10 = (void (*)(CGRect *, void))v102(&slice);
    void *v11 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
    v10(&slice, 0);
    id v12 = [v6 bounds];
    uint64_t v13 = (swift_isaMask & *v1) + 136;
    id v100 = *(void (**)(__n128, __n128, __n128, __n128))((swift_isaMask & *v1) + 0x88);
    uint64_t v99 = v13;
    ((void (*)(id, double, double))v100)(v12, 0.0, 0.0);
    uint64_t v14 = (uint64_t)[v6 numberOfItemsInSection:0];
    [v6 bounds];
    double v16 = v15;
    (*(void (**)(uint64_t, double))((swift_isaMask & *v1) + 0xB0))(v14, v15);
    uint64_t v96 = v14;
    uint64_t v18 = v14 - 1;
    if (v14 < 1)
    {
    }
    else
    {
      CGFloat v19 = v17;
      id v78 = v6;
      uint64_t v20 = 0;
      CGFloat v82 = ceil(v16 * 0.5);
      CGFloat v21 = 0.0;
      CGFloat v92 = ceil(v17 * 0.5);
      double v98 = (void (**)(char *, uint64_t))(v2 + 8);
      *(double *)&uint64_t v22 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
      long long v81 = xmmword_1001DA0F0;
      long long v80 = xmmword_1001DA390;
      long long v79 = xmmword_1001DA740;
      CGFloat v23 = 0.0;
      CGFloat v24 = 0.0;
      CGFloat v25 = 0.0;
      double v95 = v16;
      double v94 = v17;
      uint64_t v93 = v14 - 1;
      do
      {
        switch(v18)
        {
          case 0:
            swift_bridgeObjectRelease();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>);
            *(double *)&uint64_t v22 = COERCE_DOUBLE(swift_allocObject());
            *(_OWORD *)(v22 + 16) = v81;
            *(void *)(v22 + 32) = 0;
            *(void *)(v22 + 40) = 0;
            uint64_t v26 = 1;
            *(double *)(v22 + 48) = v16;
            *(CGFloat *)(v22 + 56) = v19;
            goto LABEL_19;
          case 1:
            swift_bridgeObjectRelease();
            memset(&slice, 0, sizeof(slice));
            memset(&remainder, 0, sizeof(remainder));
            v109.origin.CGFloat x = 0.0;
            v109.origin.CGFloat y = 0.0;
            v109.size.CGFloat width = v16;
            v109.size.CGFloat height = v19;
            CGRectDivide(v109, &slice, &remainder, v92, CGRectMinYEdge);
            CGPoint origin = slice.origin;
            CGFloat width = slice.size.width;
            CGFloat height = slice.size.height;
            CGFloat x = remainder.origin.x;
            v105.CGFloat x = remainder.size.width;
            CGFloat v30 = remainder.origin.y + 1.0;
            CGFloat v97 = remainder.size.height + -1.0;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>);
            *(double *)&uint64_t v22 = COERCE_DOUBLE(swift_allocObject());
            CGPoint v31 = origin;
            *(_OWORD *)(v22 + 16) = v80;
            *(CGPoint *)(v22 + 32) = v31;
            *(CGFloat *)(v22 + 48) = width;
            *(CGFloat *)(v22 + 56) = height;
            *(CGFloat *)(v22 + 64) = x;
            *(CGFloat *)(v22 + 72) = v30;
            uint64_t v26 = 2;
            v31.CGFloat x = v97;
            *(CGFloat *)(v22 + 80) = v105.x;
            *(CGFloat *)(v22 + 88) = v31.x;
            goto LABEL_19;
          case 2:
            swift_bridgeObjectRelease();
            memset(&slice, 0, sizeof(slice));
            memset(&remainder, 0, sizeof(remainder));
            v110.origin.CGFloat x = 0.0;
            v110.origin.CGFloat y = 0.0;
            v110.size.CGFloat width = v16;
            v110.size.CGFloat height = v19;
            CGRectDivide(v110, &slice, &remainder, v92, CGRectMinYEdge);
            CGPoint v105 = slice.origin;
            CGFloat v97 = slice.size.width;
            origin.CGFloat x = slice.size.height;
            v111.origin.CGFloat x = remainder.origin.x;
            v111.size.CGFloat width = remainder.size.width;
            v111.origin.CGFloat y = remainder.origin.y + 1.0;
            v111.size.CGFloat height = remainder.size.height + -1.0;
            CGFloat v32 = ceil(remainder.size.width * 0.5);
            memset(&slice, 0, sizeof(slice));
            memset(&remainder, 0, sizeof(remainder));
            CGRectDivide(v111, &slice, &remainder, v32, CGRectMinXEdge);
            CGPoint v88 = slice.origin;
            CGFloat v33 = slice.size.width;
            CGFloat v34 = slice.size.height;
            CGFloat y = remainder.origin.y;
            CGFloat v90 = remainder.size.height;
            CGFloat v36 = remainder.origin.x + 1.0;
            CGFloat v89 = remainder.size.width + -1.0;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>);
            *(double *)&uint64_t v22 = COERCE_DOUBLE(swift_allocObject());
            CGPoint v37 = v105;
            *(_OWORD *)(v22 + 16) = v79;
            *(CGPoint *)(v22 + 32) = v37;
            v37.CGFloat x = origin.x;
            *(CGFloat *)(v22 + 48) = v97;
            *(CGFloat *)(v22 + 56) = v37.x;
            *(CGPoint *)(v22 + 64) = v88;
            *(CGFloat *)(v22 + 80) = v33;
            *(CGFloat *)(v22 + 88) = v34;
            *(CGFloat *)(v22 + 96) = v36;
            *(CGFloat *)(v22 + 104) = y;
            uint64_t v26 = 3;
            v37.CGFloat x = v90;
            *(CGFloat *)(v22 + 112) = v89;
            *(CGFloat *)(v22 + 120) = v37.x;
            goto LABEL_19;
          case 3:
            memset(&slice, 0, sizeof(slice));
            memset(&remainder, 0, sizeof(remainder));
            v112.origin.CGFloat x = 0.0;
            v112.origin.CGFloat y = 0.0;
            v112.size.CGFloat width = v16;
            v112.size.CGFloat height = v19;
            CGRectDivide(v112, &slice, &remainder, v82, CGRectMinXEdge);
            CGRect v113 = slice;
            CGFloat v38 = remainder.origin.y;
            double v39 = remainder.size.height;
            CGFloat v40 = remainder.origin.x + 1.0;
            CGFloat v41 = remainder.size.width + -1.0;
            CGFloat v42 = ceil(slice.size.height * 0.5);
            memset(&slice, 0, sizeof(slice));
            memset(&remainder, 0, sizeof(remainder));
            CGRectDivide(v113, &slice, &remainder, v42, CGRectMinYEdge);
            CGFloat v86 = slice.origin.x;
            CGFloat v85 = slice.origin.y;
            CGFloat v84 = slice.size.width;
            CGFloat v83 = slice.size.height;
            origin.CGFloat x = remainder.origin.x;
            CGFloat v89 = remainder.origin.y;
            CGFloat v90 = remainder.size.width;
            v88.CGFloat x = remainder.size.height;
            memset(&slice, 0, sizeof(slice));
            memset(&remainder, 0, sizeof(remainder));
            v114.origin.CGFloat x = v40;
            v114.origin.CGFloat y = v38;
            v114.size.CGFloat width = v41;
            v114.size.CGFloat height = v39;
            CGRectDivide(v114, &slice, &remainder, ceil(v39 * 0.5), CGRectMinYEdge);
            CGFloat v43 = slice.origin.x;
            long long v87 = *(_OWORD *)&slice.origin.y;
            CGFloat v44 = slice.size.height;
            double v45 = remainder.origin.y;
            v105.CGFloat x = remainder.origin.x;
            double v46 = remainder.size.height;
            CGFloat v97 = remainder.size.width;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              *(double *)&uint64_t v22 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v22 + 16) + 1, 1, (void *)v22));
            }
            unint64_t v48 = *(void *)(v22 + 16);
            unint64_t v47 = *(void *)(v22 + 24);
            int64_t v49 = v47 >> 1;
            unint64_t v50 = v48 + 1;
            if (v47 >> 1 <= v48)
            {
              *(double *)&uint64_t v22 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v47 > 1), v48 + 1, 1, (void *)v22));
              unint64_t v47 = *(void *)(v22 + 24);
              int64_t v49 = v47 >> 1;
            }
            *(void *)(v22 + 16) = v50;
            id v51 = (CGFloat *)(v22 + 32 * v48);
            CGFloat v52 = v85;
            v51[4] = v86;
            v51[5] = v52;
            CGFloat v53 = v83;
            v51[6] = v84;
            v51[7] = v53;
            unint64_t v54 = v48 + 2;
            if (v49 < (uint64_t)(v48 + 2)) {
              *(double *)&uint64_t v22 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v47 > 1), v48 + 2, 1, (void *)v22));
            }
            *(void *)(v22 + 16) = v54;
            uint64_t v55 = v22 + 32 * v50;
            *(CGFloat *)(v55 + 32) = v43;
            *(_OWORD *)(v55 + 40) = v87;
            *(CGFloat *)(v55 + 56) = v44;
            unint64_t v56 = *(void *)(v22 + 24);
            unint64_t v57 = v48 + 3;
            if ((uint64_t)(v48 + 3) > (uint64_t)(v56 >> 1)) {
              *(double *)&uint64_t v22 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v56 > 1), v48 + 3, 1, (void *)v22));
            }
            CGFloat v58 = v89 + 1.0;
            CGFloat v59 = v88.x + -1.0;
            *(void *)(v22 + 16) = v57;
            uint64_t v60 = (CGFloat *)(v22 + 32 * v54);
            v60[4] = origin.x;
            v60[5] = v58;
            v60[6] = v90;
            v60[7] = v59;
            unint64_t v61 = *(void *)(v22 + 24);
            if ((uint64_t)(v48 + 4) > (uint64_t)(v61 >> 1)) {
              *(double *)&uint64_t v22 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v61 > 1), v48 + 4, 1, (void *)v22));
            }
            *(void *)(v22 + 16) = v48 + 4;
            uint64_t v62 = (CGFloat *)(v22 + 32 * v57);
            v62[4] = v105.x;
            v62[5] = v45 + 1.0;
            v62[6] = v97;
            v62[7] = v46 + -1.0;
            uint64_t v26 = *(void *)(v22 + 16);
            if (!v26) {
              goto LABEL_25;
            }
LABEL_19:
            uint64_t v63 = (double *)(v22 + 56);
            *(void *)&v105.CGFloat x = self;
            Swift::String v64 = *(double (**)(uint64_t))((swift_isaMask & *v1) + 0x80);
            CGFloat v97 = *(double *)&v22;
            swift_bridgeObjectRetain();
            break;
          default:
            goto LABEL_29;
        }
        do
        {
          double v65 = *(v63 - 3);
          double v66 = *(v63 - 2);
          double v67 = *(v63 - 1);
          double v68 = *v63;
          uint64_t v69 = v103;
          IndexPath.init(item:section:)();
          Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
          id v71 = [*(id *)&v105.x layoutAttributesForCellWithIndexPath:isa];

          (*v98)(v69, v104);
          [v71 setFrame:v65, v66, v67, v68];
          id v72 = v71;
          uint64_t v73 = (uint64_t (*)(CGRect *, void))v102(&slice);
          uint64_t v75 = v74;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((*v75 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v75 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          uint64_t v76 = v73(&slice, 0);
          v115.origin.CGFloat x = v64(v76);
          v117.origin.CGFloat x = v24;
          v117.origin.CGFloat y = v25;
          v117.size.CGFloat width = v21;
          v117.size.CGFloat height = v23;
          CGRect v116 = CGRectUnion(v115, v117);
          v100((__n128)v116.origin, *(__n128 *)&v116.origin.y, (__n128)v116.size, *(__n128 *)&v116.size.height);

          if (v20 == 0x7FFFFFFFFFFFFFFFLL)
          {
            __break(1u);
            goto LABEL_29;
          }
          ++v20;
          v63 += 4;
          CGFloat v21 = v67;
          CGFloat v23 = v68;
          CGFloat v24 = v65;
          CGFloat v25 = v66;
          --v26;
        }
        while (v26);
        *(double *)&uint64_t v22 = v97;
        swift_bridgeObjectRelease();
        CGFloat v21 = v67;
        CGFloat v23 = v68;
        CGFloat v24 = v65;
        CGFloat v25 = v66;
        uint64_t v18 = v93;
LABEL_25:
        double v16 = v95;
        CGFloat v19 = v94;
      }
      while (v20 < v96);
LABEL_29:

      swift_bridgeObjectRelease();
    }
  }
}

uint64_t type metadata accessor for MOSuggestionSheetHalfMosaicLayout()
{
  return self;
}

double MOSuggestionSheetHalfMosaicLayout.collectionViewContentSize.getter()
{
  (*(void (**)(void))((swift_isaMask & *v0) + 0x80))();
  return v1;
}

uint64_t MOSuggestionSheetHalfMosaicLayout.layoutAttributesForItem(at:)()
{
  double v1 = *(uint64_t (**)(void))((swift_isaMask & *v0) + 0x68);
  unint64_t v2 = v1();
  if (v2 >> 62) {
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  }
  else {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (IndexPath.item.getter() >= v3) {
    return 0;
  }
  unint64_t v4 = IndexPath.item.getter();
  uint64_t result = v1();
  if ((result & 0xC000000000000001) != 0)
  {
    id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_8;
  }
  if ((v4 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v4 < *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v6 = *(id *)(result + 8 * v4 + 32);
LABEL_8:
    id v7 = v6;
    swift_bridgeObjectRelease();
    return (uint64_t)v7;
  }
  __break(1u);
  return result;
}

unint64_t MOSuggestionSheetHalfMosaicLayout.layoutAttributesForElements(in:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  id v6 = v4;
  uint64_t v11 = *v4;
  id v12 = &swift_isaMask;
  unint64_t v49 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v13 = *(uint64_t (**)(void))((swift_isaMask & v11) + 0x68);
  unint64_t v14 = v13();
  unint64_t v15 = v14;
  if (!(v14 >> 62))
  {
    uint64_t v16 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRelease();
    goto LABEL_3;
  }
  while (1)
  {
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v16 < 0) {
      break;
    }
LABEL_3:
    if (!v16) {
      return v49;
    }
    uint64_t v17 = (*(uint64_t (**)(void, uint64_t, CGFloat, CGFloat, CGFloat, CGFloat))((*v12 & *v6) + 0xB8))(0, v16 - 1, a1, a2, a3, a4);
    if (v18) {
      return v49;
    }
    Swift::Int v5 = v17;
    unint64_t v15 = (unint64_t)v6;
    unint64_t v19 = v13();
    if (v5 < 0) {
      goto LABEL_53;
    }
    unint64_t v15 = v19;
    uint64_t v16 = v19 >> 62;
    if (v19 >> 62) {
      goto LABEL_54;
    }
    if (*(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10) < v5) {
      goto LABEL_56;
    }
LABEL_8:
    unint64_t v48 = v13;
    if ((v15 & 0xC000000000000001) != 0 && v5 != 0)
    {
      type metadata accessor for UICollectionViewLayoutAttributes();
      Swift::Int v21 = 0;
      do
      {
        Swift::Int v22 = v21 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v21);
        Swift::Int v21 = v22;
      }
      while (v5 != v22);
    }
    if (v16)
    {
      swift_bridgeObjectRetain();
      id v12 = (void *)_CocoaArrayWrapper.subscript.getter();
      uint64_t v23 = v25;
      uint64_t v13 = v26;
      unint64_t v28 = v27;
      swift_bridgeObjectRelease_n();
      CGFloat v24 = (uint64_t (*)(void))(v28 >> 1);
    }
    else
    {
      uint64_t v13 = 0;
      id v12 = (void *)(v15 & 0xFFFFFFFFFFFFFF8);
      uint64_t v23 = (v15 & 0xFFFFFFFFFFFFFF8) + 32;
      CGFloat v24 = (uint64_t (*)(void))v5;
    }
    if (v24 != v13)
    {
      CGFloat v29 = v24;
      while (1)
      {
        BOOL v30 = __OFSUB__(v29, 1);
        CGFloat v29 = (uint64_t (*)(void))((char *)v29 - 1);
        if (v30) {
          break;
        }
        if ((uint64_t)v29 < (uint64_t)v13 || (uint64_t)v29 >= (uint64_t)v24) {
          goto LABEL_49;
        }
        id v31 = *(id *)(v23 + 8 * (void)v29);
        [v31 frame];
        double MaxY = CGRectGetMaxY(v50);
        v51.origin.CGFloat x = a1;
        v51.origin.CGFloat y = a2;
        v51.size.CGFloat width = a3;
        v51.size.CGFloat height = a4;
        if (CGRectGetMinY(v51) > MaxY)
        {

          goto LABEL_28;
        }
        id v33 = v31;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        unint64_t v15 = (unint64_t)&v49;
        specialized Array._endMutation()();

        if (v29 == v13) {
          goto LABEL_28;
        }
      }
      __break(1u);
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }
LABEL_28:
    uint64_t v34 = swift_unknownObjectRelease();
    unint64_t result = ((uint64_t (*)(uint64_t))v48)(v34);
    unint64_t v15 = result;
    uint64_t v16 = result >> 62;
    if (result >> 62) {
      goto LABEL_57;
    }
    id v6 = *(void **)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if ((uint64_t)v6 < v5) {
      goto LABEL_61;
    }
LABEL_30:
    if ((v15 & 0xC000000000000001) != 0 && (void *)v5 != v6)
    {
      if (v5 >= (uint64_t)v6) {
        goto LABEL_62;
      }
      type metadata accessor for UICollectionViewLayoutAttributes();
      Swift::Int v36 = v5;
      do
      {
        CGPoint v37 = (void *)(v36 + 1);
        _ArrayBuffer._typeCheckSlowPath(_:)(v36);
        Swift::Int v36 = (Swift::Int)v37;
      }
      while (v6 != v37);
    }
    if (!v16)
    {
      id v12 = (void *)(v15 & 0xFFFFFFFFFFFFFF8);
      uint64_t v13 = (uint64_t (*)(void))((v15 & 0xFFFFFFFFFFFFFF8) + 32);
      if ((void *)v5 != v6) {
        goto LABEL_39;
      }
LABEL_46:
      swift_unknownObjectRelease();
      return v49;
    }
    swift_bridgeObjectRetain();
    id v12 = (void *)_CocoaArrayWrapper.subscript.getter();
    uint64_t v13 = v38;
    Swift::Int v5 = v39;
    unint64_t v41 = v40;
    swift_bridgeObjectRelease_n();
    id v6 = (void *)(v41 >> 1);
    if ((void *)v5 == v6) {
      goto LABEL_46;
    }
LABEL_39:
    while (v5 < (uint64_t)v6)
    {
      id v42 = *((id *)v13 + v5);
      [v42 frame];
      double MinY = CGRectGetMinY(v52);
      v53.origin.CGFloat x = a1;
      v53.origin.CGFloat y = a2;
      v53.size.CGFloat width = a3;
      v53.size.CGFloat height = a4;
      if (MinY > CGRectGetMaxY(v53))
      {

        goto LABEL_46;
      }
      id v44 = v42;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      ++v5;
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      unint64_t v15 = (unint64_t)&v49;
      specialized Array._endMutation()();

      if (v6 == (void *)v5) {
        goto LABEL_46;
      }
    }
LABEL_50:
    __break(1u);
  }
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  unint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if ((result & 0x8000000000000000) != 0) {
    goto LABEL_63;
  }
  swift_bridgeObjectRetain();
  uint64_t v45 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v45 >= v5) {
    goto LABEL_8;
  }
LABEL_56:
  __break(1u);
LABEL_57:
  swift_bridgeObjectRetain();
  id v6 = (void *)_CocoaArrayWrapper.endIndex.getter();
  unint64_t result = swift_bridgeObjectRelease();
  if ((uint64_t)v6 < v5) {
    goto LABEL_64;
  }
  swift_bridgeObjectRetain();
  uint64_t v46 = _CocoaArrayWrapper.endIndex.getter();
  unint64_t result = swift_bridgeObjectRelease();
  if (v46 < v5) {
    goto LABEL_65;
  }
  swift_bridgeObjectRetain();
  uint64_t v47 = _CocoaArrayWrapper.endIndex.getter();
  unint64_t result = swift_bridgeObjectRelease();
  if (v47 >= (uint64_t)v6) {
    goto LABEL_30;
  }
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
  return result;
}

double MOSuggestionSheetHalfMosaicLayout.assetGridHeight(assetCount:totalWidth:)(uint64_t a1, double result)
{
  if (a1 > 5) {
    unint64_t result = result + result;
  }
  if (!a1) {
    return 0.0;
  }
  return result;
}

uint64_t MOSuggestionSheetHalfMosaicLayout.binSearch(_:start:end:)(uint64_t a1, uint64_t a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  if (a2 < a1) {
    return 0;
  }
  uint64_t v15 = a1 + a2;
  if (__OFADD__(a1, a2))
  {
    __break(1u);
LABEL_19:
    id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_11:
    unint64_t v19 = v18;
    swift_bridgeObjectRelease();
    [v19 frame];
    v30.origin.CGFloat x = v12;
    v30.origin.CGFloat y = v11;
    v30.size.CGFloat width = v10;
    v30.size.CGFloat height = v9;
    if (CGRectIntersectsRect(v27, v30))
    {
    }
    else
    {
      [v19 frame];
      double MaxY = CGRectGetMaxY(v28);
      v29.origin.CGFloat x = v12;
      v29.origin.CGFloat y = v11;
      v29.size.CGFloat width = v10;
      v29.size.CGFloat height = v9;
      if (MaxY >= CGRectGetMinY(v29))
      {
        uint64_t v26 = v6 - 1;
        v21.n128_f64[0] = v12;
        v22.n128_f64[0] = v11;
        v23.n128_f64[0] = v10;
        v24.n128_f64[0] = v9;
        uint64_t v25 = a1;
      }
      else
      {
        uint64_t v25 = v6 + 1;
        v21.n128_f64[0] = v12;
        v22.n128_f64[0] = v11;
        v23.n128_f64[0] = v10;
        v24.n128_f64[0] = v9;
        uint64_t v26 = a2;
      }
      uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))((*v8 & *v7) + 0xB8))(v25, v26, v21, v22, v23, v24);
    }
    return v6;
  }
  CGFloat v9 = a6;
  CGFloat v10 = a5;
  CGFloat v11 = a4;
  CGFloat v12 = a3;
  if (v15 >= 0) {
    uint64_t v16 = a1 + a2;
  }
  else {
    uint64_t v16 = v15 + 1;
  }
  uint64_t v6 = v16 >> 1;
  uint64_t v8 = &swift_isaMask;
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & *v7) + 0x68))();
  if ((result & 0xC000000000000001) != 0) {
    goto LABEL_19;
  }
  if (v15 < -1)
  {
    __break(1u);
  }
  else if (v6 < *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v18 = *(id *)(result + 8 * v6 + 32);
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

id MOSuggestionSheetHalfMosaicLayout.init()()
{
  *(void *)&v0[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetHalfMosaicLayout_cachedAttributes] = _swiftEmptyArrayStorage;
  double v1 = &v0[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetHalfMosaicLayout_contentBounds];
  *(_OWORD *)double v1 = 0u;
  *((_OWORD *)v1 + 1) = 0u;
  *(void *)&v0[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetHalfMosaicLayout_mosaicSegmentDelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for MOSuggestionSheetHalfMosaicLayout();
  return [super init];
}

id MOSuggestionSheetHalfMosaicLayout.init(coder:)(void *a1)
{
  *(void *)&v1[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetHalfMosaicLayout_cachedAttributes] = _swiftEmptyArrayStorage;
  objc_super v3 = &v1[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetHalfMosaicLayout_contentBounds];
  *(_OWORD *)objc_super v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  *(void *)&v1[OBJC_IVAR____TtC16MomentsUIService33MOSuggestionSheetHalfMosaicLayout_mosaicSegmentDelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v6.receiver = v1;
  v6.super_class = (Class)type metadata accessor for MOSuggestionSheetHalfMosaicLayout();
  id v4 = [super initWithCoder:a1];

  return v4;
}

id MOSuggestionSheetHalfMosaicLayout.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MOSuggestionSheetHalfMosaicLayout();
  return [super dealloc];
}

uint64_t sub_10005C134@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x68))();
  *a2 = result;
  return result;
}

uint64_t sub_10005C190(uint64_t a1, void **a2)
{
  objc_super v2 = *(uint64_t (**)(uint64_t))((swift_isaMask & **a2) + 0x70);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

void sub_10005C1F4(void **a1@<X0>, uint64_t a2@<X8>)
{
  *(double *)a2 = (*(double (**)(void))((swift_isaMask & **a1) + 0x80))();
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v4;
  *(void *)(a2 + 24) = v5;
}

uint64_t sub_10005C254(double *a1, void **a2)
{
  return (*(uint64_t (**)(double, double, double, double))((swift_isaMask & **a2) + 0x88))(*a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_10005C2B0@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x98))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_10005C30C(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))((swift_isaMask & **a2) + 0xA0);
  uint64_t v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

double MOAngelDefaultsManager.momentsUIDendrogramPOIPenalty.getter()
{
  if (one-time initialization token for defaults != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static MOAngelDefaultsManager.defaults;
  if (!static MOAngelDefaultsManager.defaults)
  {
    long long v5 = 0u;
    long long v6 = 0u;
LABEL_11:
    outlined destroy of Any?((uint64_t)&v5);
    return 0.5;
  }
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 objectForKey:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  outlined init with take of Any?((uint64_t)v4, (uint64_t)&v5);
  if (!*((void *)&v6 + 1)) {
    goto LABEL_11;
  }
  if (swift_dynamicCast()) {
    return *(double *)v4;
  }
  return 0.5;
}

uint64_t MOAngelDefaultsManager.momentsUIShouldUpLevelPOI.getter()
{
  if (one-time initialization token for defaults != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static MOAngelDefaultsManager.defaults;
  if (!static MOAngelDefaultsManager.defaults)
  {
    long long v5 = 0u;
    long long v6 = 0u;
LABEL_11:
    outlined destroy of Any?((uint64_t)&v5);
    return 0;
  }
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 objectForKey:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  outlined init with take of Any?((uint64_t)v4, (uint64_t)&v5);
  if (!*((void *)&v6 + 1)) {
    goto LABEL_11;
  }
  if (swift_dynamicCast()) {
    return LOBYTE(v4[0]);
  }
  return 0;
}

void one-time initialization function for defaults(uint64_t a1)
{
}

void one-time initialization function for siri(uint64_t a1)
{
}

void one-time initialization function for defaults(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = objc_allocWithZone((Class)NSUserDefaults);
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v5 initWithSuiteName:v6];

  *a4 = v7;
}

uint64_t MOAngelDefaultsManager.momentsUIShouldSkipDendrogram.getter()
{
  if (one-time initialization token for defaults != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static MOAngelDefaultsManager.defaults;
  if (!static MOAngelDefaultsManager.defaults)
  {
    long long v5 = 0u;
    long long v6 = 0u;
LABEL_11:
    outlined destroy of Any?((uint64_t)&v5);
    return 0;
  }
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 objectForKey:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  outlined init with take of Any?((uint64_t)v4, (uint64_t)&v5);
  if (!*((void *)&v6 + 1)) {
    goto LABEL_11;
  }
  if (swift_dynamicCast()) {
    return LOBYTE(v4[0]);
  }
  return 0;
}

uint64_t MOAngelDefaultsManager.momentsUIForceEmbeddedPOI.getter()
{
  if (one-time initialization token for defaults != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static MOAngelDefaultsManager.defaults;
  if (!static MOAngelDefaultsManager.defaults)
  {
    long long v5 = 0u;
    long long v6 = 0u;
LABEL_11:
    outlined destroy of Any?((uint64_t)&v5);
    return 0;
  }
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 objectForKey:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  outlined init with take of Any?((uint64_t)v4, (uint64_t)&v5);
  if (!*((void *)&v6 + 1)) {
    goto LABEL_11;
  }
  if (swift_dynamicCast()) {
    return LOBYTE(v4[0]);
  }
  return 0;
}

uint64_t MOAngelDefaultsManager.momentsUITripDropUninterestingPOI.getter()
{
  if (one-time initialization token for defaults != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static MOAngelDefaultsManager.defaults;
  if (!static MOAngelDefaultsManager.defaults)
  {
    long long v5 = 0u;
    long long v6 = 0u;
LABEL_11:
    outlined destroy of Any?((uint64_t)&v5);
    return 0;
  }
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 objectForKey:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  outlined init with take of Any?((uint64_t)v4, (uint64_t)&v5);
  if (!*((void *)&v6 + 1)) {
    goto LABEL_11;
  }
  if (swift_dynamicCast()) {
    return LOBYTE(v4[0]);
  }
  return 0;
}

double MOAngelDefaultsManager.momentsUILowConfidenceHighCertaintyThreshold.getter()
{
  if (one-time initialization token for defaults != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static MOAngelDefaultsManager.defaults;
  if (!static MOAngelDefaultsManager.defaults)
  {
    long long v5 = 0u;
    long long v6 = 0u;
LABEL_11:
    outlined destroy of Any?((uint64_t)&v5);
    return 150.0;
  }
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 objectForKey:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  outlined init with take of Any?((uint64_t)v4, (uint64_t)&v5);
  if (!*((void *)&v6 + 1)) {
    goto LABEL_11;
  }
  if (swift_dynamicCast()) {
    return *(double *)v4;
  }
  return 150.0;
}

uint64_t MOAngelDefaultsManager.momentsUIGridBuckets.getter()
{
  if (one-time initialization token for defaults != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static MOAngelDefaultsManager.defaults;
  if (!static MOAngelDefaultsManager.defaults)
  {
    long long v6 = 0u;
    long long v7 = 0u;
LABEL_14:
    outlined destroy of Any?((uint64_t)&v6);
    return 5;
  }
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 objectForKey:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  outlined init with take of Any?((uint64_t)v5, (uint64_t)&v6);
  if (!*((void *)&v7 + 1)) {
    goto LABEL_14;
  }
  uint64_t result = swift_dynamicCast();
  if ((result & 1) == 0) {
    return 5;
  }
  double v4 = round(*(double *)v5);
  if ((~*(void *)&v4 & 0x7FF0000000000000) != 0)
  {
    if (v4 > -9.22337204e18)
    {
      if (v4 < 9.22337204e18) {
        return (uint64_t)v4;
      }
      goto LABEL_18;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t MOAngelDefaultsManager.momentsUIClusterMaxCount.getter()
{
  if (one-time initialization token for defaults != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static MOAngelDefaultsManager.defaults;
  if (!static MOAngelDefaultsManager.defaults)
  {
    long long v6 = 0u;
    long long v7 = 0u;
LABEL_14:
    outlined destroy of Any?((uint64_t)&v6);
    return 30;
  }
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 objectForKey:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  outlined init with take of Any?((uint64_t)v5, (uint64_t)&v6);
  if (!*((void *)&v7 + 1)) {
    goto LABEL_14;
  }
  uint64_t result = swift_dynamicCast();
  if ((result & 1) == 0) {
    return 30;
  }
  double v4 = round(*(double *)v5);
  if ((~*(void *)&v4 & 0x7FF0000000000000) != 0)
  {
    if (v4 > -9.22337204e18)
    {
      if (v4 < 9.22337204e18) {
        return (uint64_t)v4;
      }
      goto LABEL_18;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

double MOAngelDefaultsManager.momentsUITightPOIScale.getter()
{
  if (one-time initialization token for defaults != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static MOAngelDefaultsManager.defaults;
  if (!static MOAngelDefaultsManager.defaults)
  {
    long long v5 = 0u;
    long long v6 = 0u;
LABEL_11:
    outlined destroy of Any?((uint64_t)&v5);
    return 0.5;
  }
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 objectForKey:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  outlined init with take of Any?((uint64_t)v4, (uint64_t)&v5);
  if (!*((void *)&v6 + 1)) {
    goto LABEL_11;
  }
  if (swift_dynamicCast()) {
    return *(double *)v4;
  }
  return 0.5;
}

void *MOAngelDefaultsManager.siriCanLearnFromAppDenySet.getter()
{
  if (one-time initialization token for siri != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static MOAngelDefaultsManager.siri;
  if (!static MOAngelDefaultsManager.siri)
  {
    long long v7 = 0u;
    long long v8 = 0u;
LABEL_12:
    outlined destroy of Any?((uint64_t)&v7);
    return &_swiftEmptySetSingleton;
  }
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 objectForKey:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  outlined init with take of Any?((uint64_t)v6, (uint64_t)&v7);
  if (!*((void *)&v8 + 1)) {
    goto LABEL_12;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Swift.AnyObject]);
  if ((swift_dynamicCast() & 1) == 0) {
    return &_swiftEmptySetSingleton;
  }
  uint64_t v3 = specialized _arrayConditionalCast<A, B>(_:)(*(unint64_t *)&v6[0]);
  swift_bridgeObjectRelease();
  if (!v3) {
    return &_swiftEmptySetSingleton;
  }
  uint64_t v4 = specialized Set.init<A>(_:)((uint64_t)v3);
  swift_bridgeObjectRelease();
  return (void *)v4;
}

void *specialized _arrayConditionalCast<A, B>(_:)(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
LABEL_23:
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3 & ~(v3 >> 63), 0);
  uint64_t v4 = _swiftEmptyArrayStorage;
  if (!v2)
  {
    unint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v2) {
      return v4;
    }
LABEL_7:
    for (uint64_t i = 4; ; ++i)
    {
      uint64_t v6 = i - 4;
      if ((a1 & 0xC000000000000001) != 0)
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v7 = i - 3;
        if (__OFADD__(v6, 1)) {
          goto LABEL_22;
        }
      }
      else
      {
        swift_unknownObjectRetain();
        uint64_t v7 = i - 3;
        if (__OFADD__(v6, 1))
        {
LABEL_22:
          __break(1u);
          goto LABEL_23;
        }
      }
      if (!swift_dynamicCast())
      {
        swift_release();
        swift_bridgeObjectRelease();
        return 0;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, _swiftEmptyArrayStorage[2] + 1, 1);
        uint64_t v4 = _swiftEmptyArrayStorage;
      }
      unint64_t v9 = _swiftEmptyArrayStorage[2];
      unint64_t v8 = _swiftEmptyArrayStorage[3];
      if (v9 >= v8 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
        uint64_t v4 = _swiftEmptyArrayStorage;
      }
      _swiftEmptyArrayStorage[2] = v9 + 1;
      CGFloat v10 = &_swiftEmptyArrayStorage[2 * v9];
      v10[4] = v12;
      v10[5] = v13;
      if (v7 == v2) {
        return v4;
      }
    }
  }
  swift_bridgeObjectRetain();
  unint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v2) {
    goto LABEL_7;
  }
  return v4;
}

{
  void *result;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;
  id v7;

  if (!(a1 >> 62))
  {
    uint64_t result = (void *)specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v3) {
      goto LABEL_3;
    }
    return _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  specialized ContiguousArray.reserveCapacity(_:)();
  swift_bridgeObjectRetain();
  uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = (void *)swift_bridgeObjectRelease();
  if (!v3) {
    return _swiftEmptyArrayStorage;
  }
LABEL_3:
  if (v3 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v4 = 0;
      do
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
        ++v4;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      while (v3 != v4);
    }
    else
    {
      long long v5 = (void **)(a1 + 32);
      do
      {
        uint64_t v6 = *v5++;
        uint64_t v7 = v6;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        --v3;
      }
      while (v3);
    }
    return _swiftEmptyArrayStorage;
  }
  __break(1u);
  return result;
}

uint64_t specialized static MOAngelDefaultsManager.doubleValueFor(_:)()
{
  if (one-time initialization token for defaults != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static MOAngelDefaultsManager.defaults;
  if (!static MOAngelDefaultsManager.defaults)
  {
    long long v5 = 0u;
    long long v6 = 0u;
LABEL_12:
    outlined destroy of Any?((uint64_t)&v5);
    return 0;
  }
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 objectForKey:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  outlined init with take of Any?((uint64_t)v4, (uint64_t)&v5);
  if (!*((void *)&v6 + 1)) {
    goto LABEL_12;
  }
  if (swift_dynamicCast()) {
    return *(void *)&v4[0];
  }
  else {
    return 0;
  }
}

uint64_t specialized static MOAngelDefaultsManager.BOOLeanValueFor(_:)()
{
  if (one-time initialization token for defaults != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static MOAngelDefaultsManager.defaults;
  if (!static MOAngelDefaultsManager.defaults)
  {
    long long v5 = 0u;
    long long v6 = 0u;
LABEL_12:
    outlined destroy of Any?((uint64_t)&v5);
    return 2;
  }
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 objectForKey:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  outlined init with take of Any?((uint64_t)v4, (uint64_t)&v5);
  if (!*((void *)&v6 + 1)) {
    goto LABEL_12;
  }
  if (swift_dynamicCast()) {
    return LOBYTE(v4[0]);
  }
  else {
    return 2;
  }
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (Swift::Int *)(a1 + 40);
    do
    {
      Swift::Int v5 = *(v4 - 1);
      Swift::Int v6 = *v4;
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MOAngelDefaultsManager()
{
  return &type metadata for MOAngelDefaultsManager;
}

uint64_t MOAppDelegate.init()()
{
  NSString v1 = v0;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v3 = type metadata accessor for Tips.ConfigurationOption.AnalyticsEngine();
  uint64_t v29 = *(void *)(v3 - 8);
  uint64_t v30 = v3;
  __chkstk_darwin(v3);
  Swift::Int v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Tips.ConfigurationOption.DatastoreLocation();
  uint64_t v27 = *(void *)(v6 - 8);
  uint64_t v28 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v9 - 8);
  CGFloat v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  id v18 = (char *)&v26 - v17;
  v31.receiver = v1;
  v31.super_class = ObjectType;
  id v26 = [super init];
  id v19 = [self defaultManager];
  uint64_t v20 = 1;
  id v21 = [v19 URLsForDirectory:14 inDomains:1];

  uint64_t v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(v22 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v11, v22 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80)), v12);
    uint64_t v20 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, v20, 1, v12);
  swift_bridgeObjectRelease();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v18, v11, v12);
    URL.appendingPathComponent(_:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Tips.ConfigurationOption>);
    type metadata accessor for Tips.ConfigurationOption();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_1001DA390;
    static Tips.ConfigurationOption.DatastoreLocation.url(_:)();
    static Tips.ConfigurationOption.datastoreLocation(_:)();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v8, v28);
    static Tips.ConfigurationOption.AnalyticsEngine.coreAnalytics.getter();
    static Tips.ConfigurationOption.analyticsEngine(_:)();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v5, v30);
    static Tips.configure(_:)();
    swift_bridgeObjectRelease();
    id v24 = v26;
    uint64_t v25 = *(void (**)(char *, uint64_t))(v13 + 8);
    v25(v16, v12);
    v25(v18, v12);
    return (uint64_t)v24;
  }
  return result;
}

Swift::Void __swiftcall MOAppDelegate.applicationDidCreateWindowScene(_:)(UIWindowScene a1)
{
}

id MOSceneDelegate.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return [super dealloc];
}

uint64_t type metadata accessor for MOAppDelegate()
{
  return self;
}

id WorkoutStartLocationAnnotation.init()()
{
  return WorkoutStartLocationAnnotation.init()(type metadata accessor for WorkoutStartLocationAnnotation);
}

uint64_t type metadata accessor for WorkoutStartLocationAnnotation()
{
  return self;
}

id WorkoutStartLocationAnnotation.__deallocating_deinit()
{
  return WorkoutStartLocationAnnotation.__deallocating_deinit(type metadata accessor for WorkoutStartLocationAnnotation);
}

id WorkoutEndLocationAnnotation.init()()
{
  return WorkoutStartLocationAnnotation.init()(type metadata accessor for WorkoutEndLocationAnnotation);
}

id WorkoutStartLocationAnnotation.init()(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return [super init];
}

uint64_t type metadata accessor for WorkoutEndLocationAnnotation()
{
  return self;
}

id @objc WorkoutStartLocationAnnotation.init()(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  v4.receiver = a1;
  v4.super_class = (Class)a3();
  return [super init];
}

id WorkoutEndLocationAnnotation.__deallocating_deinit()
{
  return WorkoutStartLocationAnnotation.__deallocating_deinit(type metadata accessor for WorkoutEndLocationAnnotation);
}

void *WorkoutLocationAnnotationView.__allocating_init(annotation:type:tileSize:)(uint64_t a1, char a2)
{
  char v3 = a2 & 1;
  swift_getObjectType();

  return specialized WorkoutLocationAnnotationView.__allocating_init(annotation:type:tileSize:)(a1, v3);
}

void *WorkoutLocationAnnotationView.init(annotation:type:tileSize:)(uint64_t a1, char a2)
{
  char v4 = a2 & 1;
  swift_getObjectType();

  return specialized WorkoutLocationAnnotationView.init(annotation:type:tileSize:)(a1, v4, v2);
}

uint64_t WorkoutLocationAnnotationView.init(coder:)(void *a1)
{
  type metadata accessor for WorkoutLocationAnnotationView();
  swift_deallocPartialClassInstance();
  return 0;
}

Swift::Void __swiftcall WorkoutLocationAnnotationView.setTintColor(_:)(MomentsUIService::WorkoutLocationAnnotationView::RouteAnnotationViewType a1)
{
  if (a1) {
    objc_super v2 = (void *)HKUIStandardMapRedColor();
  }
  else {
    objc_super v2 = (void *)HKUIStandardMapGreenColor();
  }
  id v3 = v2;
  [v1 setTintColor:v3];
}

void WorkoutLocationAnnotationView.draw(_:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  uint64_t v9 = UIGraphicsGetCurrentContext();
  if (v9)
  {
    c = v9;
    CGContextSetLineWidth(v9, 2.0);
    id v10 = [v4 tintColor];
    if (v10)
    {
      CGFloat v11 = v10;
      uint64_t v12 = (CGColor *)[v10 CGColor];

      CGContextSetFillColorWithColor(c, v12);
      id v13 = [self whiteColor];
      uint64_t v14 = (CGColor *)[v13 CGColor];

      CGContextSetStrokeColorWithColor(c, v14);
      v17.origin.CGFloat x = a1;
      v17.origin.CGFloat y = a2;
      v17.size.CGFloat width = a3;
      v17.size.CGFloat height = a4;
      CGRect v18 = CGRectInset(v17, 2.0, 2.0);
      CGContextAddEllipseInRect(c, v18);
      CGContextDrawPath(c, kCGPathFillStroke);
    }
    else
    {
      __break(1u);
    }
  }
}

id WorkoutLocationAnnotationView.__allocating_init(annotation:reuseIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v4 = v3;
  if (a3)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v6 = 0;
  }
  id v7 = [objc_allocWithZone(v4) initWithAnnotation:a1 reuseIdentifier:v6];

  swift_unknownObjectRelease();
  return v7;
}

void WorkoutLocationAnnotationView.init(annotation:reuseIdentifier:)()
{
}

id WorkoutLocationAnnotationView.__deallocating_deinit()
{
  return WorkoutStartLocationAnnotation.__deallocating_deinit(type metadata accessor for WorkoutLocationAnnotationView);
}

id WorkoutStartLocationAnnotation.__deallocating_deinit(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return [super dealloc];
}

void *specialized WorkoutLocationAnnotationView.init(annotation:type:tileSize:)(uint64_t a1, char a2, void *a3)
{
  uint64_t v4 = a2 & 1;
  v20.receiver = a3;
  v20.super_class = (Class)type metadata accessor for WorkoutLocationAnnotationView();
  [super initWithAnnotation:a1 reuseIdentifier:0];
  [v5 setFrame:CGRectMake(0.0, 0.0, 15.0, 15.0)];
  NSString v6 = self;
  id v7 = v5;
  id v8 = [v6 clearColor];
  [v7 setBackgroundColor:v8];

  [v7 setCanShowCallout:1];
  (*(void (**)(uint64_t))((swift_isaMask & *v7) + 0x58))(v4);
  [v7 setIsAccessibilityElement:1];
  UIAccessibilityTraits v9 = UIAccessibilityTraitImage;
  id v10 = v7;
  unint64_t v11 = (unint64_t)[v10 accessibilityTraits];
  if ((v9 & ~v11) != 0) {
    UIAccessibilityTraits v12 = v9;
  }
  else {
    UIAccessibilityTraits v12 = 0;
  }
  [v10 setAccessibilityTraits:v12 | v11];

  id v13 = self;
  uint64_t v14 = v10;
  id v15 = [v13 mainBundle];
  v21._object = (void *)0x80000001001E37B0;
  v16._uint64_t countAndFlagsBits = 0x6E73206574756F52;
  v16._object = (void *)0xEE00746F68737061;
  v17._uint64_t countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  v21._uint64_t countAndFlagsBits = 0xD000000000000033;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v16, (Swift::String_optional)0, (NSBundle)v15, v17, v21);

  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v14 setAccessibilityLabel:v18];

  swift_unknownObjectRelease();
  return v14;
}

void *specialized WorkoutLocationAnnotationView.__allocating_init(annotation:type:tileSize:)(uint64_t a1, char a2)
{
  char v3 = a2 & 1;
  id v4 = objc_allocWithZone((Class)type metadata accessor for WorkoutLocationAnnotationView());

  return specialized WorkoutLocationAnnotationView.init(annotation:type:tileSize:)(a1, v3, v4);
}

uint64_t type metadata accessor for WorkoutLocationAnnotationView()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type WorkoutLocationAnnotationView.RouteAnnotationViewType and conformance WorkoutLocationAnnotationView.RouteAnnotationViewType()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkoutLocationAnnotationView.RouteAnnotationViewType and conformance WorkoutLocationAnnotationView.RouteAnnotationViewType;
  if (!lazy protocol witness table cache variable for type WorkoutLocationAnnotationView.RouteAnnotationViewType and conformance WorkoutLocationAnnotationView.RouteAnnotationViewType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkoutLocationAnnotationView.RouteAnnotationViewType and conformance WorkoutLocationAnnotationView.RouteAnnotationViewType);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for WorkoutLocationAnnotationView.RouteAnnotationViewType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10005E5F4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WorkoutLocationAnnotationView.RouteAnnotationViewType()
{
  return &type metadata for WorkoutLocationAnnotationView.RouteAnnotationViewType;
}

id PrivacyViewController.__allocating_init(clientName:)()
{
  id v1 = objc_allocWithZone(v0);
  return specialized PrivacyViewController.init(clientName:)();
}

id PrivacyViewController.__allocating_init(title:detailText:symbolName:contentLayout:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v8 = v7;
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (!a4)
  {
    NSString v13 = 0;
    if (a6) {
      goto LABEL_3;
    }
LABEL_5:
    NSString v14 = 0;
    goto LABEL_6;
  }
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (!a6) {
    goto LABEL_5;
  }
LABEL_3:
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
LABEL_6:
  id v15 = [objc_allocWithZone(v8) initWithTitle:v12 detailText:v13 symbolName:v14 contentLayout:a7];

  return v15;
}

void PrivacyViewController.init(title:detailText:symbolName:contentLayout:)()
{
}

id PrivacyViewController.__allocating_init(title:detailText:icon:contentLayout:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  id v7 = v6;
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (a4)
  {
    NSString v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v12 = 0;
  }
  id v13 = [objc_allocWithZone(v7) initWithTitle:v11 detailText:v12 icon:a5 contentLayout:a6];

  return v13;
}

void PrivacyViewController.init(title:detailText:icon:contentLayout:)()
{
}

id PrivacyViewController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PrivacyViewController();
  return [super dealloc];
}

id specialized PrivacyViewController.init(clientName:)()
{
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [self imageNamed:v1];

  int v3 = self;
  id v4 = [v3 mainBundle];
  v23._uint64_t countAndFlagsBits = 0xD000000000000019;
  v5._uint64_t countAndFlagsBits = 0xD000000000000137;
  v23._object = (void *)0x80000001001E3A40;
  v5._object = (void *)0x80000001001E3900;
  v6._uint64_t countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v5, (Swift::String_optional)0, (NSBundle)v4, v6, v23);

  static String.localizedStringWithFormat(_:_:)();
  swift_bridgeObjectRelease();
  id v7 = [v3 mainBundle];
  v8._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  v24._object = (void *)0x80000001001E3A80;
  v8._object = (void *)0x80000001001E3A60;
  v9._uint64_t countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  v24._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v8, (Swift::String_optional)0, (NSBundle)v7, v9, v24);

  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v22.receiver = v0;
  v22.super_class = (Class)type metadata accessor for PrivacyViewController();
  id v12 = [super initWithTitle:v10 detailText:v11 icon:v2 contentLayout:2];

  id v13 = self;
  id v14 = v12;
  id v15 = [v13 boldButton];
  [v15 addTarget:v14 action:"doneTapped:" forControlEvents:64];
  id v16 = [v3 mainBundle];
  v25._object = (void *)0x80000001001E3AA0;
  v17._uint64_t countAndFlagsBits = 1701736260;
  v17._object = (void *)0xE400000000000000;
  v18._uint64_t countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  v25._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v17, (Swift::String_optional)0, (NSBundle)v16, v18, v25);

  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v15 setTitle:v19 forState:0];

  id v20 = [v14 buttonTray];
  [v20 addButton:v15];

  return v14;
}

uint64_t type metadata accessor for PrivacyViewController()
{
  return self;
}

void *MOSuggestionAssetActivityRingsConstants.kUnknownQueryValue.unsafeMutableAddressor()
{
  return &static MOSuggestionAssetActivityRingsConstants.kUnknownQueryValue;
}

double static MOSuggestionAssetActivityRingsConstants.kUnknownQueryValue.getter()
{
  return -1.0;
}

id one-time initialization function for healthStore()
{
  id result = [objc_allocWithZone((Class)HKHealthStore) init];
  static MOSuggestionAssetActivityRingsProvider.healthStore = (uint64_t)result;
  return result;
}

uint64_t MOSuggestionAssetActivityRingsProvider.getAsset(workoutStartDate:workoutEndDate:index:completion:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v92 = a4;
  uint64_t v93 = a5;
  uint64_t v95 = a2;
  long long v87 = a1;
  uint64_t v96 = type metadata accessor for Date();
  uint64_t v99 = *(void *)(v96 - 8);
  uint64_t v7 = __chkstk_darwin(v96);
  double v98 = (char *)&v83 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  os_log_t v88 = (os_log_t)((char *)&v83 - v10);
  __chkstk_darwin(v9);
  CGFloat v84 = (char *)&v83 - v11;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  __chkstk_darwin(v12 - 8);
  CGFloat v97 = (char *)&v83 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Calendar?);
  __chkstk_darwin(v14 - 8);
  double v94 = (char *)&v83 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DateComponents();
  uint64_t v90 = *(void *)(v16 - 8);
  uint64_t v91 = v16;
  __chkstk_darwin(v16);
  id v100 = (char *)&v83 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for Calendar();
  uint64_t v101 = *(void *)(v18 - 8);
  uint64_t v19 = __chkstk_darwin(v18);
  Swift::String v21 = (char *)&v83 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  Swift::String v23 = (char *)&v83 - v22;
  CGFloat v86 = v5;
  *(void *)((char *)v5 + OBJC_IVAR____TtC16MomentsUIService38MOSuggestionAssetActivityRingsProvider_idx) = a3;
  static Calendar.autoupdatingCurrent.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>);
  uint64_t v24 = type metadata accessor for Calendar.Component();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(void *)(v25 + 72);
  unint64_t v27 = (*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
  uint64_t v28 = 2 * v26;
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_1001DA740;
  unint64_t v30 = v29 + v27;
  objc_super v31 = *(void (**)(unint64_t, void, uint64_t))(v25 + 104);
  v31(v30, enum case for Calendar.Component.year(_:), v24);
  unint64_t v32 = v30 + v26;
  uint64_t v33 = v95;
  v31(v32, enum case for Calendar.Component.month(_:), v24);
  unint64_t v34 = v30 + v28;
  uint64_t v35 = (char *)v18;
  v31(v34, enum case for Calendar.Component.day(_:), v24);
  uint64_t v36 = v101;
  specialized Set.init(_nonEmptyArrayLiteral:)(v29);
  swift_setDeallocating();
  uint64_t v37 = v96;
  swift_arrayDestroy();
  swift_deallocClassInstance();
  Calendar.dateComponents(_:from:)();
  swift_bridgeObjectRelease();
  CGFloat v38 = *(void (**)(char *, char *, uint64_t))(v36 + 16);
  Swift::Int v39 = v94;
  CGFloat v89 = v23;
  v38(v94, v23, v18);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v39, 0, 1, v18);
  DateComponents.calendar.setter();
  static Calendar.autoupdatingCurrent.getter();
  unint64_t v40 = v97;
  uint64_t v41 = v99;
  Calendar.date(from:)();
  id v42 = *(uint64_t (**)(char *, char *))(v36 + 8);
  double v94 = v35;
  uint64_t v101 = v36 + 8;
  CGFloat v85 = v42;
  v42(v21, v35);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v41 + 48))(v40, 1, v37);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    id v44 = v84;
    (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v84, v40, v37);
    uint64_t v45 = v86;
    uint64_t v46 = (char *)v86 + OBJC_IVAR____TtC16MomentsUIService38MOSuggestionAssetActivityRingsProvider_ringsStartDate;
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v41 + 40))(v46, v44, v37);
    swift_endAccess();
    uint64_t v47 = (char *)v45 + OBJC_IVAR____TtC16MomentsUIService38MOSuggestionAssetActivityRingsProvider_ringsEndDate;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v41 + 24))(v47, v33, v37);
    swift_endAccess();
    id v48 = [objc_allocWithZone((Class)HKActivitySummary) init];
    unint64_t v49 = (void *)v45[2];
    v45[2] = v48;

    CGRect v50 = self;
    CGRect v51 = *(void (**)(char *, char *, uint64_t))(v41 + 16);
    v51(v44, v46, v37);
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    CGRect v53 = *(char **)(v41 + 8);
    uint64_t v99 = v41 + 8;
    CGFloat v97 = v53;
    ((void (*)(char *, uint64_t))v53)(v44, v37);
    Class v54 = Date._bridgeToObjectiveC()().super.isa;
    uint64_t v55 = v33;
    id v56 = [v50 predicateForSamplesWithStartDate:isa endDate:v54 options:1];

    unint64_t v57 = *(void **)((char *)v45
                   + OBJC_IVAR____TtC16MomentsUIService38MOSuggestionAssetActivityRingsProvider_timeRangePredicate);
    *(void *)((char *)v45
              + OBJC_IVAR____TtC16MomentsUIService38MOSuggestionAssetActivityRingsProvider_timeRangePredicate) = v56;

    Class v58 = DateComponents._bridgeToObjectiveC()().super.isa;
    id v59 = [v50 predicateForActivitySummaryWithDateComponents:v58];

    uint64_t v60 = *(void **)((char *)v45
                   + OBJC_IVAR____TtC16MomentsUIService38MOSuggestionAssetActivityRingsProvider_activitySummaryPredicate);
    *(void *)((char *)v45
              + OBJC_IVAR____TtC16MomentsUIService38MOSuggestionAssetActivityRingsProvider_activitySummaryPredicate) = v59;

    if (serverManager._clientConnections != (NSMutableDictionary *)-1) {
      swift_once();
    }
    uint64_t v61 = type metadata accessor for Logger();
    __swift_project_value_buffer(v61, (uint64_t)static MOAngelLogger.shared);
    os_log_t v62 = v88;
    v51((char *)v88, v87, v37);
    uint64_t v63 = v98;
    v51(v98, (char *)v55, v37);
    Swift::String v64 = Logger.logObject.getter();
    os_log_type_t v65 = static os_log_type_t.default.getter();
    int v66 = v65;
    if (os_log_type_enabled(v64, v65))
    {
      uint64_t v67 = swift_slowAlloc();
      uint64_t v95 = swift_slowAlloc();
      v103[0] = v95;
      *(_DWORD *)uint64_t v67 = 136315394;
      lazy protocol witness table accessor for type Date and conformance Date();
      LODWORD(v87) = v66;
      uint64_t v68 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v102 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v68, v69, v103);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      os_log_t v70 = v62;
      id v71 = (void (*)(char *, uint64_t))v97;
      ((void (*)(os_log_t, uint64_t))v97)(v70, v37);
      *(_WORD *)(v67 + 12) = 2080;
      os_log_t v88 = v64;
      id v72 = v98;
      uint64_t v73 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v102 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v73, v74, v103);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v71(v72, v37);
      Swift::String v64 = v88;
      _os_log_impl((void *)&_mh_execute_header, v88, (os_log_type_t)v87, "[Assets] Packing rings for workout startTime=%s endTime=%s", (uint8_t *)v67, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      os_log_t v75 = v62;
      uint64_t v76 = (void (*)(char *, uint64_t))v97;
      ((void (*)(os_log_t, uint64_t))v97)(v75, v37);
      v76(v63, v37);
    }

    uint64_t v78 = v92;
    uint64_t v77 = v93;
    uint64_t v80 = v90;
    uint64_t v79 = v91;
    long long v81 = (void *)swift_allocObject();
    v81[2] = v78;
    v81[3] = v77;
    v81[4] = v45;
    CGFloat v82 = *(void (**)(void (*)(void *), void *))(*v45 + 312);
    swift_retain();
    swift_retain();
    v82(partial apply for closure #1 in MOSuggestionAssetActivityRingsProvider.getAsset(workoutStartDate:workoutEndDate:index:completion:), v81);
    swift_release();
    (*(void (**)(char *, uint64_t))(v80 + 8))(v100, v79);
    return v85(v89, v94);
  }
  return result;
}

void closure #1 in MOSuggestionAssetActivityRingsProvider.getAsset(workoutStartDate:workoutEndDate:index:completion:)(void *a1, void (*a2)(uint64_t, void *), uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    uint64_t v7 = *(void *)(a4 + OBJC_IVAR____TtC16MomentsUIService38MOSuggestionAssetActivityRingsProvider_idx);
    id v12 = a1;
    a2(v7, a1);
  }
  else
  {
    if (serverManager._clientConnections != (NSMutableDictionary *)-1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static MOAngelLogger.shared);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Failed to generate rings", v11, 2u);
      swift_slowDealloc();
    }

    a2(*(void *)(a4 + OBJC_IVAR____TtC16MomentsUIService38MOSuggestionAssetActivityRingsProvider_idx), 0);
  }
}

void MOSuggestionAssetActivityRingsProvider.getUserDefaults(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2
                 + OBJC_IVAR____TtC16MomentsUIService38MOSuggestionAssetActivityRingsProvider_activitySummaryPredicate);
  Swift::String v6 = (void *)swift_allocObject();
  _OWORD v6[2] = a1;
  v6[3] = a2;
  v6[4] = v2;
  id v7 = objc_allocWithZone((Class)HKActivitySummaryQuery);
  v10[4] = partial apply for closure #1 in MOSuggestionAssetActivityRingsProvider.getUserDefaults(completion:);
  v10[5] = v6;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  void v10[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed HKActivitySummaryQuery, @guaranteed [HKActivitySummary]?, @guaranteed Error?) -> ();
  v10[3] = &block_descriptor_6;
  uint64_t v8 = _Block_copy(v10);
  swift_retain();
  swift_retain();
  id v9 = [v7 initWithPredicate:v5 resultsHandler:v8];
  _Block_release(v8);
  swift_release();
  if (one-time initialization token for healthStore != -1) {
    swift_once();
  }
  [(id)static MOSuggestionAssetActivityRingsProvider.healthStore executeQuery:v9];
}

void closure #1 in MOSuggestionAssetActivityRingsProvider.getUserDefaults(completion:)(uint64_t a1, unint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5, id *a6)
{
  if (!a2) {
    goto LABEL_12;
  }
  uint64_t v10 = a2 & 0xFFFFFFFFFFFFFF8;
  if (!(a2 >> 62))
  {
    uint64_t v11 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v11) {
      goto LABEL_4;
    }
    goto LABEL_11;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter())
  {
LABEL_11:
    swift_bridgeObjectRelease();
LABEL_12:
    a4(0);
    return;
  }
LABEL_4:
  if ((a2 & 0xC000000000000001) != 0)
  {
    id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)(v10 + 16))
    {
      __break(1u);
      return;
    }
    id v12 = *(id *)(a2 + 32);
  }
  id v19 = v12;
  swift_bridgeObjectRelease();
  id v13 = a6[2];
  id v14 = [v19 appleStandHoursGoal];
  [v13 setAppleStandHoursGoal:v14];

  id v15 = a6[2];
  id v16 = [v19 exerciseTimeGoal];
  [v15 setExerciseTimeGoal:v16];

  id v17 = a6[2];
  id v18 = [v19 activeEnergyBurnedGoal];
  [v17 setActiveEnergyBurnedGoal:v18];

  (*((void (**)(void (*)(void), uint64_t))*a6 + 40))(a4, a5);
}

id MOSuggestionAssetActivityRingsProvider.getStandMinutes(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v38 = a2;
  uint64_t v36 = a1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Calendar?);
  __chkstk_darwin(v11 - 8);
  id v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = type metadata accessor for DateComponents();
  uint64_t v37 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  id v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for HKQuantityType);
  id result = [(id)swift_getObjCClassFromMetadata() quantityTypeForIdentifier:HKQuantityTypeIdentifierAppleStandTime];
  if (result)
  {
    id v17 = result;
    uint64_t v18 = type metadata accessor for Calendar();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v13, 1, 1, v18);
    uint64_t v19 = type metadata accessor for TimeZone();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v10, 1, 1, v19);
    DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
    DateComponents.hour.setter();
    uint64_t v20 = *(void **)(v3 + OBJC_IVAR____TtC16MomentsUIService38MOSuggestionAssetActivityRingsProvider_timeRangePredicate);
    uint64_t v21 = v3 + OBJC_IVAR____TtC16MomentsUIService38MOSuggestionAssetActivityRingsProvider_ringsStartDate;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v21, v4);
    id v22 = objc_allocWithZone((Class)HKStatisticsCollectionQuery);
    id v23 = v20;
    uint64_t v24 = v15;
    uint64_t v25 = v3;
    uint64_t v26 = v4;
    id v27 = v23;
    id v28 = v17;
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    uint64_t v35 = v24;
    Class v30 = DateComponents._bridgeToObjectiveC()().super.isa;
    id v31 = [v22 initWithQuantityType:v28 quantitySamplePredicate:v27 options:0 anchorDate:isa intervalComponents:v30];

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v26);
    unint64_t v32 = (void *)swift_allocObject();
    uint64_t v33 = v36;
    _OWORD v32[2] = v25;
    v32[3] = v33;
    v32[4] = v38;
    aBlock[4] = partial apply for closure #1 in MOSuggestionAssetActivityRingsProvider.getStandMinutes(completion:);
    aBlock[5] = v32;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed HKStatisticsCollectionQuery, @guaranteed HKStatisticsCollection?, @guaranteed Error?) -> ();
    aBlock[3] = &block_descriptor_9;
    unint64_t v34 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    outlined copy of (@escaping @callee_guaranteed @Sendable (@guaranteed HKStatisticsCollectionQuery, @guaranteed HKStatisticsCollection?, @guaranteed Error?) -> ())?((uint64_t)partial apply for closure #1 in MOSuggestionAssetActivityRingsProvider.getStandMinutes(completion:));
    swift_release();
    [v31 setInitialResultsHandler:v34];
    _Block_release(v34);
    swift_release();
    if (one-time initialization token for healthStore != -1) {
      swift_once();
    }
    [(id)static MOSuggestionAssetActivityRingsProvider.healthStore executeQuery:v31];

    return (id)(*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v35, v39);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in MOSuggestionAssetActivityRingsProvider.getStandMinutes(completion:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  id v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = 0;
  if (a2)
  {
    uint64_t v27 = a5;
    uint64_t v15 = a4 + OBJC_IVAR____TtC16MomentsUIService38MOSuggestionAssetActivityRingsProvider_ringsStartDate;
    swift_beginAccess();
    uint64_t v28 = a6;
    id v16 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
    v16(v13, v15, v10);
    id v26 = a2;
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    uint64_t v18 = *(void (**)(char *, uint64_t))(v11 + 8);
    v18(v13, v10);
    uint64_t v19 = a4 + OBJC_IVAR____TtC16MomentsUIService38MOSuggestionAssetActivityRingsProvider_ringsEndDate;
    swift_beginAccess();
    v16(v13, v19, v10);
    a6 = v28;
    Class v20 = Date._bridgeToObjectiveC()().super.isa;
    v18(v13, v10);
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = v14;
    *(void *)(v21 + 24) = a4;
    aBlock[4] = partial apply for closure #1 in closure #1 in MOSuggestionAssetActivityRingsProvider.getStandMinutes(completion:);
    aBlock[5] = v21;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed HKStatistics, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
    aBlock[3] = &block_descriptor_52;
    id v22 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    id v23 = v26;
    [v26 enumerateStatisticsFromDate:isa toDate:v20 withBlock:v22];
    _Block_release(v22);

    a5 = v27;
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a4 + 328))(a5, a6);
  return swift_release();
}

void closure #1 in closure #1 in MOSuggestionAssetActivityRingsProvider.getStandMinutes(completion:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6 = [a1 sumQuantity];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = (double *)(a3 + 16);
    uint64_t v9 = self;
    id v10 = [v9 minuteUnit];
    [v7 doubleValueForUnit:v10];
    double v12 = v11;

    if (v12 > 0.0)
    {
      swift_beginAccess();
      *uint64_t v8 = *v8 + 1.0;
    }
    id v13 = *(id *)(a4 + 16);
    id v14 = [v9 countUnit];
    swift_beginAccess();
    id v15 = [self quantityWithUnit:v14 doubleValue:*v8];

    [v13 setAppleStandHours:v15];
  }
}

void thunk for @escaping @callee_guaranteed (@guaranteed HKStatistics, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

void MOSuggestionAssetActivityRingsProvider.getExerciseMinutes(completion:)(uint64_t a1, uint64_t a2)
{
}

void closure #1 in MOSuggestionAssetActivityRingsProvider.getExerciseMinutes(completion:)(uint64_t a1, void *a2, uint64_t a3, void (*a4)(void), uint64_t a5, id *a6)
{
  if (!a2) {
    goto LABEL_7;
  }
  id v9 = a2;
  id v10 = [v9 sumQuantity];
  if (!v10)
  {

LABEL_7:
    a4(0);
    return;
  }
  id v11 = v10;
  [a6[2] setAppleExerciseTime:];
  (*((void (**)(void (*)(void), uint64_t))*a6 + 42))(a4, a5);
}

void MOSuggestionAssetActivityRingsProvider.getMoveCalories(completion:)(uint64_t a1, uint64_t a2)
{
}

void MOSuggestionAssetActivityRingsProvider.getExerciseMinutes(completion:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for HKQuantityType);
  id v12 = [(id)swift_getObjCClassFromMetadata() quantityTypeForIdentifier:*a3];
  if (v12)
  {
    id v13 = v12;
    uint64_t v14 = *(void *)(v6 + OBJC_IVAR____TtC16MomentsUIService38MOSuggestionAssetActivityRingsProvider_timeRangePredicate);
    id v15 = (void *)swift_allocObject();
    v15[2] = a1;
    v15[3] = a2;
    v15[4] = v6;
    id v16 = objc_allocWithZone((Class)HKStatisticsQuery);
    v19[4] = a5;
    v19[5] = v15;
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 1107296256;
    v19[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed HKStatisticsCollectionQuery, @guaranteed HKStatisticsCollection?, @guaranteed Error?) -> ();
    v19[3] = a6;
    id v17 = _Block_copy(v19);
    swift_retain();
    swift_retain();
    id v18 = [v16 initWithQuantityType:v13 quantitySamplePredicate:v14 options:0 completionHandler:v17];
    _Block_release(v17);
    swift_release();
    if (one-time initialization token for healthStore != -1) {
      swift_once();
    }
    [(id)static MOSuggestionAssetActivityRingsProvider.healthStore executeQuery:v18];
  }
  else
  {
    __break(1u);
  }
}

void closure #1 in MOSuggestionAssetActivityRingsProvider.getMoveCalories(completion:)(uint64_t a1, void *a2, uint64_t a3, void (*a4)(void *), uint64_t a5, uint64_t a6)
{
  if (a2)
  {
    id v8 = a2;
    id v9 = [v8 sumQuantity];
    if (v9)
    {
      id v10 = v9;
      [*(id *)(a6 + 16) setActiveEnergyBurned:v9];
      if (serverManager._clientConnections != (NSMutableDictionary *)-1) {
        swift_once();
      }
      uint64_t v11 = type metadata accessor for Logger();
      __swift_project_value_buffer(v11, (uint64_t)static MOAngelLogger.shared);
      id v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v14 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v14 = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "[Assets] Packed rings asset", v14, 2u);
        swift_slowDealloc();
      }

      id v15 = *(void **)(a6 + 16);
      id v20 = v15;
      a4(v15);

      return;
    }
  }
  if (serverManager._clientConnections != (NSMutableDictionary *)-1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static MOAngelLogger.shared);
  id v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "[Assets] Unable to obtain user move calories", v19, 2u);
    swift_slowDealloc();
  }

  a4(0);
}

uint64_t MOSuggestionAssetActivityRingsProvider.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC16MomentsUIService38MOSuggestionAssetActivityRingsProvider_ringsStartDate;
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  v3(v1, v2);
  v3(v0 + OBJC_IVAR____TtC16MomentsUIService38MOSuggestionAssetActivityRingsProvider_ringsEndDate, v2);

  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC16MomentsUIService38MOSuggestionAssetActivityRingsProvider_activitySummaryPredicate));

  return v0;
}

uint64_t MOSuggestionAssetActivityRingsProvider.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC16MomentsUIService38MOSuggestionAssetActivityRingsProvider_ringsStartDate;
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  v3(v1, v2);
  v3(v0 + OBJC_IVAR____TtC16MomentsUIService38MOSuggestionAssetActivityRingsProvider_ringsEndDate, v2);

  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC16MomentsUIService38MOSuggestionAssetActivityRingsProvider_activitySummaryPredicate));

  return swift_deallocClassInstance();
}

uint64_t MOSuggestionAssetActivityRingsProvider.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  MOSuggestionAssetActivityRingsProvider.init()();
  return v0;
}

uint64_t MOSuggestionAssetActivityRingsProvider.init()()
{
  *(void *)(v0 + 16) = [objc_allocWithZone((Class)HKActivitySummary) init];
  Date.init()();
  Date.init()();
  uint64_t v1 = OBJC_IVAR____TtC16MomentsUIService38MOSuggestionAssetActivityRingsProvider_timeRangePredicate;
  *(void *)(v0 + v1) = [objc_allocWithZone((Class)NSPredicate) init];
  uint64_t v2 = OBJC_IVAR____TtC16MomentsUIService38MOSuggestionAssetActivityRingsProvider_activitySummaryPredicate;
  *(void *)(v0 + v2) = [objc_allocWithZone((Class)NSPredicate) init];
  *(void *)(v0 + OBJC_IVAR____TtC16MomentsUIService38MOSuggestionAssetActivityRingsProvider_workout) = 0;
  *(void *)(v0 + OBJC_IVAR____TtC16MomentsUIService38MOSuggestionAssetActivityRingsProvider_idx) = -1;
  return v0;
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@guaranteed HKActivitySummaryQuery, @guaranteed [HKActivitySummary]?, @guaranteed Error?) -> ()(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  id v7 = *(void (**)(id, uint64_t, void *))(a1 + 32);
  if (a3)
  {
    type metadata accessor for UIApplication(0, &lazy cache variable for type metadata for HKActivitySummary);
    uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  id v8 = a2;
  id v9 = a4;
  v7(v8, v5, a4);
  swift_release();

  return swift_bridgeObjectRelease();
}

void thunk for @escaping @callee_guaranteed @Sendable (@guaranteed HKStatisticsCollectionQuery, @guaranteed HKStatisticsCollection?, @guaranteed Error?) -> ()(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = *(void (**)(id, void *, void *))(a1 + 32);
  swift_retain();
  id v10 = a2;
  id v8 = a3;
  id v9 = a4;
  v7(v10, a3, a4);
  swift_release();
}

void partial apply for closure #1 in MOSuggestionAssetActivityRingsProvider.getAsset(workoutStartDate:workoutEndDate:index:completion:)(void *a1)
{
  closure #1 in MOSuggestionAssetActivityRingsProvider.getAsset(workoutStartDate:workoutEndDate:index:completion:)(a1, *(void (**)(uint64_t, void *))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

unint64_t lazy protocol witness table accessor for type Date and conformance Date()
{
  unint64_t result = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    type metadata accessor for Date();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
  }
  return result;
}

void partial apply for closure #1 in MOSuggestionAssetActivityRingsProvider.getUserDefaults(completion:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  closure #1 in MOSuggestionAssetActivityRingsProvider.getUserDefaults(completion:)(a1, a2, a3, *(void (**)(void))(v3 + 16), *(void *)(v3 + 24), *(id **)(v3 + 32));
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

uint64_t sub_100060F48()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t partial apply for closure #1 in MOSuggestionAssetActivityRingsProvider.getStandMinutes(completion:)(uint64_t a1, void *a2, uint64_t a3)
{
  return closure #1 in MOSuggestionAssetActivityRingsProvider.getStandMinutes(completion:)(a1, a2, a3, v3[2], v3[3], v3[4]);
}

uint64_t outlined copy of (@escaping @callee_guaranteed @Sendable (@guaranteed HKStatisticsCollectionQuery, @guaranteed HKStatisticsCollection?, @guaranteed Error?) -> ())?(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

void partial apply for closure #1 in MOSuggestionAssetActivityRingsProvider.getExerciseMinutes(completion:)(uint64_t a1, void *a2, uint64_t a3)
{
  closure #1 in MOSuggestionAssetActivityRingsProvider.getExerciseMinutes(completion:)(a1, a2, a3, *(void (**)(void))(v3 + 16), *(void *)(v3 + 24), *(id **)(v3 + 32));
}

uint64_t objectdestroyTm()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void partial apply for closure #1 in MOSuggestionAssetActivityRingsProvider.getMoveCalories(completion:)(uint64_t a1, void *a2, uint64_t a3)
{
  closure #1 in MOSuggestionAssetActivityRingsProvider.getMoveCalories(completion:)(a1, a2, a3, *(void (**)(void *))(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32));
}

ValueMetadata *type metadata accessor for MOSuggestionAssetActivityRingsConstants()
{
  return &type metadata for MOSuggestionAssetActivityRingsConstants;
}

uint64_t ObjC metadata update function for MOSuggestionAssetActivityRingsProvider()
{
  return type metadata accessor for MOSuggestionAssetActivityRingsProvider();
}

uint64_t type metadata accessor for MOSuggestionAssetActivityRingsProvider()
{
  uint64_t result = type metadata singleton initialization cache for MOSuggestionAssetActivityRingsProvider;
  if (!type metadata singleton initialization cache for MOSuggestionAssetActivityRingsProvider) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for MOSuggestionAssetActivityRingsProvider()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100061124()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100061134()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void partial apply for closure #1 in closure #1 in MOSuggestionAssetActivityRingsProvider.getStandMinutes(completion:)(void *a1, uint64_t a2)
{
  closure #1 in closure #1 in MOSuggestionAssetActivityRingsProvider.getStandMinutes(completion:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t specialized Array.count.getter(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t MOSuggestionInterstitialListAssetViewModel.__allocating_init(multiPinMapAsset:)(void *a1)
{
  uint64_t v217 = type metadata accessor for MOSuggestionSheetAssetDateRange(0);
  uint64_t v203 = *(void *)(v217 - 8);
  uint64_t v2 = __chkstk_darwin(v217);
  uint64_t v204 = (uint64_t)&v184 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v202 = (uint64_t)&v184 - v5;
  __chkstk_darwin(v4);
  uint64_t v201 = (uint64_t)&v184 - v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  __chkstk_darwin(v7 - 8);
  uint64_t v207 = (char *)&v184 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v209 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v209 - 8);
  __chkstk_darwin(v209);
  double v200 = (char *)&v184 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MOSuggestionSheetAssetDateRange?);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  double v214 = (char *)&v184 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  id v15 = (char *)&v184 - v14;
  id v16 = [a1 assetType];
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v19 = v18;
  if (v17 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v19 == v20)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v21 & 1) == 0) {
      goto LABEL_9;
    }
  }
  [a1 contentClassType];
  uint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
  if (ObjCClassMetadata == type metadata accessor for MOSuggestionGenericFallBackInfo())
  {
LABEL_9:
    if (serverManager._clientConnections != (NSMutableDictionary *)-1) {
      goto LABEL_148;
    }
    goto LABEL_10;
  }
  id v191 = [a1 assetType];
  unint64_t v225 = (unint64_t)_swiftEmptyArrayStorage;
  unint64_t v226 = (unint64_t)_swiftEmptyArrayStorage;
  id v23 = [a1 metadata];
  uint64_t v24 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v25 = (void *)MOSuggestionAssetMetadataKeyMultiPinMapLocations;
  *(void *)&long long v219 = MOSuggestionAssetMetadataKeyMultiPinMapLocations;
  type metadata accessor for MOSuggestionAssetMetadataKey(0);
  lazy protocol witness table accessor for type MOSuggestionAssetMetadataKey and conformance MOSuggestionAssetMetadataKey();
  id v26 = v25;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v24 + 16))
  {
    unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v220);
    uint64_t v28 = (uint64_t)v207;
    uint64_t v29 = v209;
    if (v30)
    {
      outlined init with copy of Any(*(void *)(v24 + 56) + 32 * v27, (uint64_t)&v223);
    }
    else
    {
      long long v223 = 0u;
      long long v224 = 0u;
    }
  }
  else
  {
    long long v223 = 0u;
    long long v224 = 0u;
    uint64_t v28 = (uint64_t)v207;
    uint64_t v29 = v209;
  }
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)&v220);
  if (!*((void *)&v224 + 1))
  {
    outlined destroy of Any?((uint64_t)&v223, &demangling cache variable for type metadata for Any?);
    goto LABEL_139;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[MOSuggestionAssetMetadataKey : Any]]);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_139:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (serverManager._clientConnections != (NSMutableDictionary *)-1) {
      swift_once();
    }
    uint64_t v177 = type metadata accessor for Logger();
    __swift_project_value_buffer(v177, (uint64_t)static MOAngelLogger.shared);
    uint64_t v178 = Logger.logObject.getter();
    os_log_type_t v179 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v178, v179))
    {
      uint64_t v180 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v180 = 0;
      _os_log_impl((void *)&_mh_execute_header, v178, v179, "[MOSuggestionInterstitialListAssetViewModel.multiPinMapAsset] Failed to unwrap metadata", v180, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  uint64_t v208 = *(void *)(v219 + 16);
  if (!v208)
  {
    swift_bridgeObjectRelease();
    goto LABEL_139;
  }
  uint64_t v35 = 0;
  uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v203 + 56);
  unint64_t v210 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
  id v211 = v36;
  double v195 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  id v189 = (void (**)(uint64_t, char *, uint64_t))(v9 + 16);
  id v190 = (void (**)(char *, uint64_t, uint64_t))(v9 + 32);
  CGFloat v188 = (void (**)(char *, uint64_t))(v9 + 8);
  uint64_t v212 = v203 + 56;
  double v198 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v203 + 48);
  double v194 = (char *)&type metadata for Any + 8;
  long long v197 = xmmword_1001DA0F0;
  long long v192 = xmmword_1001DA250;
  double v199 = _swiftEmptyArrayStorage;
  uint64_t v205 = _swiftEmptyArrayStorage;
  uint64_t v206 = v219;
  double v196 = a1;
  uint64_t v213 = v15;
  uint64_t v37 = v219;
  while (1)
  {
    uint64_t v216 = v35;
    uint64_t v39 = *(void *)(v37 + 8 * v35 + 32);
    v211(v15, 1, 1, v217);
    if (!*(void *)(v39 + 16))
    {
      long long v220 = 0u;
      long long v221 = 0u;
      swift_bridgeObjectRetain();
LABEL_34:
      outlined destroy of Any?((uint64_t)&v220, &demangling cache variable for type metadata for Any?);
      (*v210)(v28, 1, 1, v29);
LABEL_35:
      outlined destroy of Any?(v28, (uint64_t *)&demangling cache variable for type metadata for Date?);
      if (!*(void *)(v39 + 16)) {
        goto LABEL_33;
      }
      goto LABEL_36;
    }
    unint64_t v40 = (void *)MOSuggestionAssetMetadataKeyLocationPreviewVisitStartTime;
    swift_bridgeObjectRetain();
    id v41 = v40;
    uint64_t v42 = specialized __RawDictionaryStorage.find<A>(_:)(v41);
    if (v43)
    {
      outlined init with copy of Any(*(void *)(v39 + 56) + 32 * v42, (uint64_t)&v220);
    }
    else
    {
      long long v220 = 0u;
      long long v221 = 0u;
    }

    if (!*((void *)&v221 + 1)) {
      goto LABEL_34;
    }
    int v44 = swift_dynamicCast();
    uint64_t v45 = *v210;
    (*v210)(v28, v44 ^ 1u, 1, v29);
    if ((*v195)(v28, 1, v29) == 1) {
      goto LABEL_35;
    }
    uint64_t v46 = v200;
    (*v190)(v200, v28, v29);
    uint64_t v47 = v201;
    (*v189)(v201, v46, v29);
    v45(v47 + *(int *)(v217 + 20), 1, 1, v29);
    outlined init with copy of MOSuggestionSheetAssetDateRange(v47, v202);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      double v199 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v199[2] + 1, 1, (unint64_t)v199);
    }
    unint64_t v49 = v199[2];
    unint64_t v48 = v199[3];
    if (v49 >= v48 >> 1) {
      double v199 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v48 > 1, v49 + 1, 1, (unint64_t)v199);
    }
    CGRect v50 = v199;
    v199[2] = v49 + 1;
    outlined init with take of MOSuggestionSheetAssetDateRange(v202, (uint64_t)v50+ ((*(unsigned __int8 *)(v203 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v203 + 80))+ *(void *)(v203 + 72) * v49);
    (*v188)(v200, v29);
    outlined destroy of Any?((uint64_t)v15, &demangling cache variable for type metadata for MOSuggestionSheetAssetDateRange?);
    outlined init with take of MOSuggestionSheetAssetDateRange(v201, (uint64_t)v15);
    v211(v15, 0, 1, v217);
    uint64_t v37 = v206;
    if (!*(void *)(v39 + 16))
    {
LABEL_33:
      long long v220 = 0u;
      long long v221 = 0u;
LABEL_45:
      outlined destroy of Any?((uint64_t)&v220, &demangling cache variable for type metadata for Any?);
LABEL_46:
      long long v223 = 0uLL;
      goto LABEL_47;
    }
LABEL_36:
    id v51 = MOSuggestionAssetMetadataKeyLocationPreviewPlaceName;
    uint64_t v52 = specialized __RawDictionaryStorage.find<A>(_:)(v51);
    if (v53)
    {
      outlined init with copy of Any(*(void *)(v39 + 56) + 32 * v52, (uint64_t)&v220);
    }
    else
    {
      long long v220 = 0u;
      long long v221 = 0u;
    }

    if (!*((void *)&v221 + 1)) {
      goto LABEL_45;
    }
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_46;
    }
    if (*((void *)&v223 + 1))
    {
      if (!*(void *)(v39 + 16)) {
        goto LABEL_65;
      }
      goto LABEL_43;
    }
LABEL_47:
    if (!*(void *)(v39 + 16))
    {
      long long v220 = 0u;
      long long v221 = 0u;
LABEL_63:
      outlined destroy of Any?((uint64_t)&v220, &demangling cache variable for type metadata for Any?);
      uint64_t v85 = 0;
      uint64_t v86 = 0;
      goto LABEL_64;
    }
    id v57 = MOSuggestionAssetMetadataKeyLocationPreviewCityName;
    uint64_t v58 = specialized __RawDictionaryStorage.find<A>(_:)(v57);
    if (v59)
    {
      outlined init with copy of Any(*(void *)(v39 + 56) + 32 * v58, (uint64_t)&v220);
    }
    else
    {
      long long v220 = 0u;
      long long v221 = 0u;
    }

    if (!*((void *)&v221 + 1)) {
      goto LABEL_63;
    }
    int v84 = swift_dynamicCast();
    uint64_t v86 = *((void *)&v219 + 1);
    uint64_t v85 = v219;
    if (!v84)
    {
      uint64_t v85 = 0;
      uint64_t v86 = 0;
    }
LABEL_64:
    *(void *)&long long v223 = v85;
    *((void *)&v223 + 1) = v86;
    swift_bridgeObjectRelease();
    if (!*(void *)(v39 + 16))
    {
LABEL_65:
      long long v220 = 0u;
      long long v221 = 0u;
LABEL_66:
      outlined destroy of Any?((uint64_t)&v220, &demangling cache variable for type metadata for Any?);
      goto LABEL_67;
    }
LABEL_43:
    id v54 = MOSuggestionAssetMetadataKeyLocationPreviewVisitMapItem;
    uint64_t v55 = specialized __RawDictionaryStorage.find<A>(_:)(v54);
    if (v56)
    {
      outlined init with copy of Any(*(void *)(v39 + 56) + 32 * v55, (uint64_t)&v220);
    }
    else
    {
      long long v220 = 0u;
      long long v221 = 0u;
    }

    if (!*((void *)&v221 + 1)) {
      goto LABEL_66;
    }
    type metadata accessor for MKMapItem();
    if (swift_dynamicCast())
    {
      swift_bridgeObjectRelease();
      id v60 = (id)v219;
      id v61 = [v60 _styleAttributes];

      os_log_t v62 = v60;
      if (v61)
      {
        id v215 = v60;
        id v63 = [v60 _styleAttributes];
        if (!v63)
        {
          __break(1u);
LABEL_154:
          __break(1u);
          uint64_t result = swift_release();
          __break(1u);
          return result;
        }
        os_log_t v62 = v63;
        Swift::String v64 = self;
        os_log_type_t v65 = self;
        id v66 = [v65 mainScreen];
        [v66 scale];
        double v68 = v67;

        id v69 = [v64 newFillColorForStyleAttributes:v62 forScale:v68];
        id v70 = v64;
        if (v69)
        {
          id v71 = v70;
          id v72 = [v65 mainScreen];
          [v72 scale];
          double v74 = v73;

          id v75 = [v71 imageForStyle:v62 size:3 forScale:0 format:v74];
          if (v75)
          {
            id v76 = v75;
            id v77 = [objc_allocWithZone((Class)UIColor) initWithCGColor:v69];
            id v186 = v77;

            uint64_t v78 = self;
            id v187 = v77;
            id v185 = [v78 whiteColor];
            type metadata accessor for MOSuggestionSheetImage();
            uint64_t v79 = swift_allocObject();
            *(void *)(v79 + 40) = 0;
            *(void *)(v79 + 32) = 0;
            *(void *)(v79 + 24) = 0;
            *(_OWORD *)(v79 + 72) = 0u;
            *(_OWORD *)(v79 + 56) = 0u;
            *(unsigned char *)(v79 + 88) = 1;
            *(void *)(v79 + 96) = 0;
            *(unsigned char *)(v79 + 104) = 1;
            *(void *)(v79 + 16) = v76;
            swift_beginAccess();
            uint64_t v80 = *(void **)(v79 + 24);
            *(void *)(v79 + 24) = v186;
            a1 = v196;

            swift_beginAccess();
            long long v81 = *(void **)(v79 + 32);
            *(void *)(v79 + 32) = v185;

            swift_beginAccess();
            CGFloat v82 = *(void **)(v79 + 40);
            *(void *)(v79 + 40) = 0;

            *(unsigned char *)(v79 + 48) = 0;
            swift_beginAccess();
            *(_OWORD *)(v79 + 72) = 0u;
            *(_OWORD *)(v79 + 56) = 0u;
            *(unsigned char *)(v79 + 88) = 1;
            swift_beginAccess();
            *(void *)(v79 + 96) = 0xC000000000000000;
            *(unsigned char *)(v79 + 104) = 0;
            id v83 = v215;

            uint64_t v28 = (uint64_t)v207;
LABEL_113:
            uint64_t v29 = v209;
LABEL_114:
            uint64_t v110 = (uint64_t)v214;
            goto LABEL_115;
          }
        }
        id v60 = v215;

        uint64_t v28 = (uint64_t)v207;
        uint64_t v29 = v209;
      }
      id v83 = v60;

      if (one-time initialization token for genericIconWithColor != -1) {
        swift_once();
      }
      uint64_t v79 = static MOPOIAnnotationView.genericIconWithColor;
      swift_retain();
      goto LABEL_114;
    }
LABEL_67:
    if (!*(void *)(v39 + 16))
    {
      long long v220 = 0u;
      long long v221 = 0u;
LABEL_79:
      outlined destroy of Any?((uint64_t)&v220, &demangling cache variable for type metadata for Any?);
LABEL_80:
      if (*(void *)(v39 + 16))
      {
        id v111 = MOSuggestionAssetMetadataKeyLocationPreviewCityName;
        uint64_t v112 = specialized __RawDictionaryStorage.find<A>(_:)(v111);
        p_ivar_lyt = &ThirdPartyMediaColorEffectView.ivar_lyt;
        if (v114)
        {
          outlined init with copy of Any(*(void *)(v39 + 56) + 32 * v112, (uint64_t)&v220);
        }
        else
        {
          long long v220 = 0u;
          long long v221 = 0u;
        }
      }
      else
      {
        long long v220 = 0u;
        long long v221 = 0u;
        p_ivar_lyt = (void **)(&ThirdPartyMediaColorEffectView + 16);
      }
      swift_bridgeObjectRelease();
      if (*((void *)&v221 + 1))
      {
        if (swift_dynamicCast())
        {
          if (*((void *)&v223 + 1))
          {
            if (v223 == v219)
            {
              swift_bridgeObjectRelease();
LABEL_102:
              if (one-time initialization token for cityStyleAttributes != -1) {
                swift_once();
              }
              CGRect v116 = (void *)static MOPOIAnnotationView.cityStyleAttributes;
              if (static MOPOIAnnotationView.cityStyleAttributes)
              {
                CGRect v117 = self;
                double v118 = self;
                id v119 = v116;
                id v120 = [v118 mainScreen];
                [v120 p_ivar_lyt[442]];
                double v122 = v121;

                id v123 = [v117 newFillColorForStyleAttributes:v119 forScale:v122];
                id v124 = v117;
                if (v123)
                {
                  double v125 = v124;
                  id v126 = [v118 mainScreen];
                  [v126 p_ivar_lyt[442]];
                  double v128 = v127;

                  id v129 = [v125 imageForStyle:v119 size:3 forScale:0 format:v128];
                  if (v129)
                  {
                    id v130 = v129;
                    id v131 = [objc_allocWithZone((Class)UIColor) initWithCGColor:v123];

                    uint64_t v132 = self;
                    id v215 = v131;
                    id v187 = [v132 whiteColor];
                    type metadata accessor for MOSuggestionSheetImage();
                    uint64_t v79 = swift_allocObject();
                    *(void *)(v79 + 40) = 0;
                    *(void *)(v79 + 32) = 0;
                    *(void *)(v79 + 24) = 0;
                    *(_OWORD *)(v79 + 72) = 0u;
                    *(_OWORD *)(v79 + 56) = 0u;
                    *(unsigned char *)(v79 + 88) = 1;
                    *(void *)(v79 + 96) = 0;
                    *(unsigned char *)(v79 + 104) = 1;
                    *(void *)(v79 + 16) = v130;
                    swift_beginAccess();
                    uint64_t v133 = *(void **)(v79 + 24);
                    *(void *)(v79 + 24) = v131;
                    uint64_t v28 = (uint64_t)v207;
                    a1 = v196;

                    swift_beginAccess();
                    uint64_t v134 = *(void **)(v79 + 32);
                    *(void *)(v79 + 32) = v187;

                    swift_beginAccess();
                    uint64_t v135 = *(void **)(v79 + 40);
                    *(void *)(v79 + 40) = 0;

                    *(unsigned char *)(v79 + 48) = 0;
                    swift_beginAccess();
                    *(_OWORD *)(v79 + 72) = 0u;
                    *(_OWORD *)(v79 + 56) = 0u;
                    *(unsigned char *)(v79 + 88) = 1;
                    swift_beginAccess();
                    *(void *)(v79 + 96) = 0xC000000000000000;
                    *(unsigned char *)(v79 + 104) = 0;

                    id v83 = 0;
                    uint64_t v29 = v209;
                    uint64_t v110 = (uint64_t)v214;
                    uint64_t v37 = v206;
                    goto LABEL_115;
                  }
                }

                uint64_t v37 = v206;
              }
              if (one-time initialization token for genericIconWithColor != -1) {
                swift_once();
              }
              uint64_t v79 = static MOPOIAnnotationView.genericIconWithColor;
              swift_retain();
              id v83 = 0;
              goto LABEL_113;
            }
            char v115 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            uint64_t v110 = (uint64_t)v214;
            if (v115) {
              goto LABEL_102;
            }
LABEL_94:
            if (one-time initialization token for genericIconWithColor != -1) {
              swift_once();
            }
            uint64_t v79 = static MOPOIAnnotationView.genericIconWithColor;
            swift_retain();
            id v83 = 0;
            goto LABEL_115;
          }
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        outlined destroy of Any?((uint64_t)&v220, &demangling cache variable for type metadata for Any?);
      }
      uint64_t v110 = (uint64_t)v214;
      goto LABEL_94;
    }
    id v87 = MOSuggestionAssetMetadataKeyLocationPreviewTypeOfPlace;
    uint64_t v88 = specialized __RawDictionaryStorage.find<A>(_:)(v87);
    if (v89)
    {
      outlined init with copy of Any(*(void *)(v39 + 56) + 32 * v88, (uint64_t)&v220);
    }
    else
    {
      long long v220 = 0u;
      long long v221 = 0u;
    }

    if (!*((void *)&v221 + 1)) {
      goto LABEL_79;
    }
    if ((swift_dynamicCast() & 1) == 0 || (void)v219 != 2) {
      goto LABEL_80;
    }
    swift_bridgeObjectRelease();
    id v90 = [self workStyleAttributes];
    if (!v90) {
      goto LABEL_154;
    }
    uint64_t v91 = v90;
    uint64_t v92 = self;
    uint64_t v93 = self;
    id v94 = [v93 mainScreen];
    [v94 scale];
    double v96 = v95;

    id v97 = [v92 newFillColorForStyleAttributes:v91 forScale:v96];
    id v98 = v92;
    if (!v97
      || (uint64_t v99 = v98,
          id v100 = [v93 mainScreen],
          [v100 scale],
          double v102 = v101,
          v100,
          (id v103 = [v99 imageForStyle:v91 size:3 forScale:0 format:v102]) == 0))
    {

      uint64_t v38 = (uint64_t)v15;
      uint64_t v37 = v206;
      uint64_t v28 = (uint64_t)v207;
      goto LABEL_20;
    }
    id v104 = v103;
    id v105 = [objc_allocWithZone((Class)UIColor) initWithCGColor:v97];

    uint64_t v106 = self;
    id v215 = v105;
    id v187 = [v106 whiteColor];
    type metadata accessor for MOSuggestionSheetImage();
    uint64_t v79 = swift_allocObject();
    *(void *)(v79 + 40) = 0;
    *(void *)(v79 + 32) = 0;
    *(void *)(v79 + 24) = 0;
    *(_OWORD *)(v79 + 72) = 0u;
    *(_OWORD *)(v79 + 56) = 0u;
    *(unsigned char *)(v79 + 88) = 1;
    *(void *)(v79 + 96) = 0;
    *(unsigned char *)(v79 + 104) = 1;
    *(void *)(v79 + 16) = v104;
    swift_beginAccess();
    objc_super v107 = *(void **)(v79 + 24);
    *(void *)(v79 + 24) = v105;
    uint64_t v29 = v209;
    a1 = v196;

    swift_beginAccess();
    uint64_t v108 = *(void **)(v79 + 32);
    *(void *)(v79 + 32) = v187;

    swift_beginAccess();
    CGRect v109 = *(void **)(v79 + 40);
    *(void *)(v79 + 40) = 0;

    *(unsigned char *)(v79 + 48) = 0;
    swift_beginAccess();
    *(_OWORD *)(v79 + 72) = 0u;
    *(_OWORD *)(v79 + 56) = 0u;
    *(unsigned char *)(v79 + 88) = 1;
    swift_beginAccess();
    *(void *)(v79 + 96) = 0xC000000000000000;
    *(unsigned char *)(v79 + 104) = 0;

    id v83 = 0;
    uint64_t v37 = v206;
    uint64_t v28 = (uint64_t)v207;
    uint64_t v110 = (uint64_t)v214;
LABEL_115:
    uint64_t v136 = *((void *)&v223 + 1);
    if (*((void *)&v223 + 1)) {
      break;
    }

    swift_release();
    id v15 = v213;
    uint64_t v38 = (uint64_t)v213;
LABEL_20:
    uint64_t v35 = v216 + 1;
    outlined destroy of Any?(v38, &demangling cache variable for type metadata for MOSuggestionSheetAssetDateRange?);
    swift_bridgeObjectRelease();
    if (v208 == v35)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v158 = [a1 content];
      self;
      uint64_t v159 = swift_dynamicCastObjCClass();
      if (!v159)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();

        swift_bridgeObjectRelease();
        return 0;
      }
      uint64_t v160 = v159;
      id v161 = [a1 identifier];
      uint64_t v162 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v164 = v163;

      *(void *)&long long v220 = v162;
      *((void *)&v220 + 1) = v164;
      *(void *)&long long v223 = 35;
      *((void *)&v223 + 1) = 0xE100000000000000;
      lazy protocol witness table accessor for type String and conformance String();
      unint64_t v165 = (unint64_t)&v220;
      uint64_t v166 = (void *)StringProtocol.components<A>(separatedBy:)();
      if (v166[2])
      {
        uint64_t v167 = v166[4];
        uint64_t v168 = v166[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v162 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void, void, void, void, void, void, int))(v193 + 344))(v167, v168, 0, 0, 0, 0, 0, 0, 271);
        unint64_t v165 = v226;
        if (!(v226 >> 62))
        {
          uint64_t v169 = *(void *)((v226 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_retain();
          if (v169 >= 2) {
            goto LABEL_133;
          }
          goto LABEL_137;
        }
      }
      else
      {
        __break(1u);
      }
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v182 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v182 >= 2)
      {
LABEL_133:
        if ((v165 & 0x8000000000000000) != 0 || (v165 & 0x4000000000000000) != 0)
        {
          unint64_t v183 = swift_bridgeObjectRetain();
          uint64_t v170 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v183);
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v170 = v165 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain();
        }
        *(void *)&long long v220 = v170;
        specialized MutableCollection<>.sort(by:)((uint64_t *)&v220);
        swift_bridgeObjectRelease();
        uint64_t v171 = v220;
        swift_beginAccess();
        v162[2] = v171;
      }
LABEL_137:
      swift_bridgeObjectRelease();
      uint64_t v172 = MOSuggestionInterstitialListAssetViewModel._groupAssetTypeAndCountDescription(with:)(0);
      uint64_t v174 = v173;
      swift_beginAccess();
      v162[3] = v172;
      v162[4] = v174;
      swift_bridgeObjectRelease();
      swift_beginAccess();
      v162[6] = v205;
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v175 = swift_allocObject();
      *(_OWORD *)(v175 + 16) = v192;
      long long v220 = 0u;
      long long v221 = 0u;
      char v222 = 1;
      type metadata accessor for MOSuggestionSheetImage();
      swift_allocObject();
      swift_unknownObjectRetain();
      *(void *)(v175 + 32) = MOSuggestionSheetImage.init(image:associatedTintColor:associatedBackgroundColor:tileBackgroundColor:shouldBeRounded:squareCrop:extraMargin:)(v160, 0, 0, 0, 0, (uint64_t)&v220, 0, 1);
      uint64_t v218 = v175;
      specialized Array._endMutation()();
      uint64_t v176 = v218;
      swift_unknownObjectRelease();

      swift_beginAccess();
      v162[7] = v176;
      swift_bridgeObjectRelease();
      swift_beginAccess();
      v162[5] = v199;
      swift_release();
      swift_bridgeObjectRelease();
      return (uint64_t)v162;
    }
  }
  id v215 = v83;
  uint64_t v137 = v223;
  uint64_t v138 = (uint64_t)v213;
  outlined init with copy of MOSuggestionSheetAssetDateRange?((uint64_t)v213, v110);
  if ((*v198)(v110, 1, v217) == 1)
  {

    swift_release();
    outlined destroy of Any?(v138, &demangling cache variable for type metadata for MOSuggestionSheetAssetDateRange?);
    uint64_t v38 = v110;
    id v15 = (char *)v138;
    uint64_t v37 = v206;
    goto LABEL_20;
  }
  uint64_t v139 = v204;
  outlined init with take of MOSuggestionSheetAssetDateRange(v110, v204);
  swift_bridgeObjectRetain();
  id v140 = [a1 identifier];
  uint64_t v141 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v143 = v142;

  *(void *)&long long v220 = v141;
  *((void *)&v220 + 1) = v143;
  *(void *)&long long v219 = 35;
  *((void *)&v219 + 1) = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v144 = (void *)StringProtocol.components<A>(separatedBy:)();
  if (v144[2])
  {
    uint64_t v145 = v139;
    uint64_t v147 = v144[4];
    uint64_t v146 = v144[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MOSuggestionSheetAssetDateRange>);
    unint64_t v148 = (*(unsigned __int8 *)(v203 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v203 + 80);
    uint64_t v149 = swift_allocObject();
    *(_OWORD *)(v149 + 16) = v197;
    outlined init with copy of MOSuggestionSheetAssetDateRange(v145, v149 + v148);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v150 = swift_allocObject();
    *(_OWORD *)(v150 + 16) = v197;
    *(void *)(v150 + 32) = v137;
    *(void *)(v150 + 40) = v136;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v151 = swift_allocObject();
    *(_OWORD *)(v151 + 16) = v192;
    *(void *)(v151 + 32) = v79;
    *(void *)&long long v220 = v151;
    specialized Array._endMutation()();
    uint64_t v152 = v220;
    type metadata accessor for MOSuggestionInterstitialListAssetViewModel();
    swift_allocObject();
    swift_bridgeObjectRetain();
    swift_retain();
    *(unsigned char *)(MOSuggestionInterstitialListAssetViewModel.init(id:subViewModels:topLevelGroupHeading:dates:titles:icons:assetVisualSubType:selectable:isLoadingPlaceHolder:isFallback:)(v147, v146, 0, 0, 0, v149, v150, v152, 15, 1, 0, 0)+ 90) = 0;
    swift_retain();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v226 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v226 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v28 = (uint64_t)v207;
    uint64_t v29 = v209;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v205 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v205[2] + 1, 1, v205);
    }
    a1 = v196;
    unint64_t v155 = v205[2];
    unint64_t v154 = v205[3];
    if (v155 >= v154 >> 1) {
      uint64_t v205 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v154 > 1), v155 + 1, 1, v205);
    }
    uint64_t v156 = v205;
    v205[2] = v155 + 1;
    char v157 = &v156[2 * v155];
    v157[4] = v137;
    v157[5] = v136;
    swift_retain();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v225 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v225 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();

    swift_release();
    swift_release();
    outlined destroy of MOSuggestionSheetAssetDateRange(v204);
    id v15 = v213;
    uint64_t v38 = (uint64_t)v213;
    uint64_t v37 = v206;
    goto LABEL_20;
  }
  __break(1u);
LABEL_148:
  swift_once();
LABEL_10:
  uint64_t v31 = type metadata accessor for Logger();
  __swift_project_value_buffer(v31, (uint64_t)static MOAngelLogger.shared);
  unint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v32, v33))
  {
    unint64_t v34 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v34 = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "[MOSuggestionInterstitialListAssetViewModel.multiPinMapAsset] Mismatched init for asset type", v34, 2u);
    swift_slowDealloc();
  }

  return 0;
}

uint64_t specialized _convertToAnyHashable<A>(_:)(void *a1)
{
  type metadata accessor for MOSuggestionAssetMetadataKey(0);
  lazy protocol witness table accessor for type MOSuggestionAssetMetadataKey and conformance MOSuggestionAssetMetadataKey();
  id v2 = a1;
  return AnyHashable.init<A>(_:)();
}

id static MOPOIAnnotationView.iconWithColor(type:mapItem:)(char a1, void *a2)
{
  switch(a1)
  {
    case 1:
      id v7 = [self workStyleAttributes];
      if (v7)
      {
        uint64_t v8 = v7;
        id v6 = specialized static MOPOIAnnotationView.poiWithStyle(_:)((uint64_t)v7);

        return v6;
      }
      __break(1u);
      goto LABEL_20;
    case 2:
      if (one-time initialization token for cityStyleAttributes != -1) {
        swift_once();
      }
      if (!static MOPOIAnnotationView.cityStyleAttributes) {
        goto LABEL_15;
      }
      id v9 = (id)static MOPOIAnnotationView.cityStyleAttributes;
      id v6 = specialized static MOPOIAnnotationView.poiWithStyle(_:)((uint64_t)v9);

      if (!v6) {
        goto LABEL_15;
      }
      return v6;
    case 3:
      goto LABEL_15;
    default:
      if (!a2) {
        goto LABEL_15;
      }
      id v2 = a2;
      id v3 = [v2 _styleAttributes];

      if (!v3)
      {

LABEL_15:
        if (one-time initialization token for genericIconWithColor != -1) {
          swift_once();
        }
        id v6 = (id)static MOPOIAnnotationView.genericIconWithColor;
        swift_retain();
        return v6;
      }
      id v4 = [v2 _styleAttributes];
      if (!v4)
      {
LABEL_20:
        __break(1u);
        JUMPOUT(0x100063074);
      }
      uint64_t v5 = v4;
      id v6 = specialized static MOPOIAnnotationView.poiWithStyle(_:)((uint64_t)v4);

      if (!v6) {
        goto LABEL_15;
      }
      return v6;
  }
}

void one-time initialization function for genericIconWithColor()
{
  NSString v0 = String._bridgeToObjectiveC()();
  id v1 = [self _systemImageNamed:v0];

  if (v1)
  {
    id v2 = self;
    id v3 = [v2 whiteColor];
    id v4 = [v2 systemIndigoColor];
    memset(v5, 0, sizeof(v5));
    char v6 = 1;
    type metadata accessor for MOSuggestionSheetImage();
    swift_allocObject();
    static MOPOIAnnotationView.genericIconWithColor = MOSuggestionSheetImage.init(image:associatedTintColor:associatedBackgroundColor:tileBackgroundColor:shouldBeRounded:squareCrop:extraMargin:)((uint64_t)v1, (uint64_t)v3, v4, 0, 0, (uint64_t)v5, 0x4010000000000000, 0);
  }
  else
  {
    __break(1u);
  }
}

unint64_t lazy protocol witness table accessor for type MOSuggestionAssetMetadataKey and conformance MOSuggestionAssetMetadataKey()
{
  unint64_t result = lazy protocol witness table cache variable for type MOSuggestionAssetMetadataKey and conformance MOSuggestionAssetMetadataKey;
  if (!lazy protocol witness table cache variable for type MOSuggestionAssetMetadataKey and conformance MOSuggestionAssetMetadataKey)
  {
    type metadata accessor for MOSuggestionAssetMetadataKey(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MOSuggestionAssetMetadataKey and conformance MOSuggestionAssetMetadataKey);
  }
  return result;
}

uint64_t outlined init with copy of MOSuggestionSheetAssetDateRange?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MOSuggestionSheetAssetDateRange?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t type metadata accessor for MKMapItem()
{
  unint64_t result = lazy cache variable for type metadata for MKMapItem;
  if (!lazy cache variable for type metadata for MKMapItem)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for MKMapItem);
  }
  return result;
}

id specialized static MOPOIAnnotationView.poiWithStyle(_:)(uint64_t a1)
{
  id v2 = self;
  id v3 = self;
  id v4 = [v3 mainScreen];
  [v4 scale];
  double v6 = v5;

  id v7 = [v2 newFillColorForStyleAttributes:a1 forScale:v6];
  id v8 = v2;
  if (!v7) {
    return 0;
  }
  id v9 = v8;
  id v10 = [v3 mainScreen];
  [v10 scale];
  double v12 = v11;

  id v13 = [v9 imageForStyle:a1 size:3 forScale:0 format:v12];
  if (v13)
  {
    id v14 = [objc_allocWithZone((Class)UIColor) initWithCGColor:v7];

    id v15 = self;
    id v16 = v14;
    id v17 = [v15 whiteColor];
    memset(v19, 0, sizeof(v19));
    char v20 = 1;
    type metadata accessor for MOSuggestionSheetImage();
    swift_allocObject();
    id v13 = (id)MOSuggestionSheetImage.init(image:associatedTintColor:associatedBackgroundColor:tileBackgroundColor:shouldBeRounded:squareCrop:extraMargin:)((uint64_t)v13, (uint64_t)v14, v17, 0, 0, (uint64_t)v19, 0xC000000000000000, 0);
  }
  return v13;
}

unint64_t lazy protocol witness table accessor for type MOPOIAnnotationView.POIType and conformance MOPOIAnnotationView.POIType()
{
  unint64_t result = lazy protocol witness table cache variable for type MOPOIAnnotationView.POIType and conformance MOPOIAnnotationView.POIType;
  if (!lazy protocol witness table cache variable for type MOPOIAnnotationView.POIType and conformance MOPOIAnnotationView.POIType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MOPOIAnnotationView.POIType and conformance MOPOIAnnotationView.POIType);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for MOPOIAnnotationView.POIType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for MOPOIAnnotationView.POIType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10006361CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MOPOIAnnotationView.POIType()
{
  return &type metadata for MOPOIAnnotationView.POIType;
}

void one-time initialization function for dayNameFormatter(uint64_t a1)
{
}

uint64_t *MODateFormatter.dayNameFormatter.unsafeMutableAddressor()
{
  if (one-time initialization token for dayNameFormatter != -1) {
    swift_once();
  }
  return &static MODateFormatter.dayNameFormatter;
}

id static MODateFormatter.dayNameFormatter.getter()
{
  return default argument 3 of MOSuggestionWorkoutIconGlyphView.init(image:glyphLightBackgroundColor:glyphDarkBackgroundColor:glyphTintColor:)(&one-time initialization token for dayNameFormatter, (void **)&static MODateFormatter.dayNameFormatter);
}

void one-time initialization function for monthNameFormatter(uint64_t a1)
{
}

void *MODateFormatter.monthNameFormatter.unsafeMutableAddressor()
{
  if (one-time initialization token for monthNameFormatter != -1) {
    swift_once();
  }
  return &static MODateFormatter.monthNameFormatter;
}

id static MODateFormatter.monthNameFormatter.getter()
{
  return default argument 3 of MOSuggestionWorkoutIconGlyphView.init(image:glyphLightBackgroundColor:glyphDarkBackgroundColor:glyphTintColor:)(&one-time initialization token for monthNameFormatter, (void **)&static MODateFormatter.monthNameFormatter);
}

void one-time initialization function for monthDayNumberFormatter(uint64_t a1)
{
}

void *MODateFormatter.monthDayNumberFormatter.unsafeMutableAddressor()
{
  if (one-time initialization token for monthDayNumberFormatter != -1) {
    swift_once();
  }
  return &static MODateFormatter.monthDayNumberFormatter;
}

id static MODateFormatter.monthDayNumberFormatter.getter()
{
  return default argument 3 of MOSuggestionWorkoutIconGlyphView.init(image:glyphLightBackgroundColor:glyphDarkBackgroundColor:glyphTintColor:)(&one-time initialization token for monthDayNumberFormatter, (void **)&static MODateFormatter.monthDayNumberFormatter);
}

void one-time initialization function for fullDateFormatter(uint64_t a1)
{
}

uint64_t *MODateFormatter.fullDateFormatter.unsafeMutableAddressor()
{
  if (one-time initialization token for fullDateFormatter != -1) {
    swift_once();
  }
  return &static MODateFormatter.fullDateFormatter;
}

id static MODateFormatter.fullDateFormatter.getter()
{
  return default argument 3 of MOSuggestionWorkoutIconGlyphView.init(image:glyphLightBackgroundColor:glyphDarkBackgroundColor:glyphTintColor:)(&one-time initialization token for fullDateFormatter, (void **)&static MODateFormatter.fullDateFormatter);
}

id one-time initialization function for yearDateTimeFormatter()
{
  id result = closure #1 in variable initialization expression of static MODateFormatter.yearDateTimeFormatter();
  static MODateFormatter.yearDateTimeFormatter = (uint64_t)result;
  return result;
}

uint64_t *MODateFormatter.yearDateTimeFormatter.unsafeMutableAddressor()
{
  if (one-time initialization token for yearDateTimeFormatter != -1) {
    swift_once();
  }
  return &static MODateFormatter.yearDateTimeFormatter;
}

id static MODateFormatter.yearDateTimeFormatter.getter()
{
  return default argument 3 of MOSuggestionWorkoutIconGlyphView.init(image:glyphLightBackgroundColor:glyphDarkBackgroundColor:glyphTintColor:)(&one-time initialization token for yearDateTimeFormatter, (void **)&static MODateFormatter.yearDateTimeFormatter);
}

void one-time initialization function for yearDateFormatter(uint64_t a1)
{
}

uint64_t *MODateFormatter.yearDateFormatter.unsafeMutableAddressor()
{
  if (one-time initialization token for yearDateFormatter != -1) {
    swift_once();
  }
  return &static MODateFormatter.yearDateFormatter;
}

id static MODateFormatter.yearDateFormatter.getter()
{
  return default argument 3 of MOSuggestionWorkoutIconGlyphView.init(image:glyphLightBackgroundColor:glyphDarkBackgroundColor:glyphTintColor:)(&one-time initialization token for yearDateFormatter, (void **)&static MODateFormatter.yearDateFormatter);
}

id one-time initialization function for fullDateWithTimeFormatter()
{
  id result = closure #1 in variable initialization expression of static MODateFormatter.yearDateTimeFormatter();
  static MODateFormatter.fullDateWithTimeFormatter = (uint64_t)result;
  return result;
}

id closure #1 in variable initialization expression of static MODateFormatter.yearDateTimeFormatter()
{
  uint64_t v0 = type metadata accessor for Locale();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  int v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v4 = [objc_allocWithZone((Class)NSDateFormatter) init];
  static Locale.autoupdatingCurrent.getter();
  Class isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  [v4 setLocale:isa];

  [v4 setFormattingContext:2];
  NSString v6 = String._bridgeToObjectiveC()();
  [v4 setLocalizedDateFormatFromTemplate:v6];

  return v4;
}

uint64_t *MODateFormatter.fullDateWithTimeFormatter.unsafeMutableAddressor()
{
  if (one-time initialization token for fullDateWithTimeFormatter != -1) {
    swift_once();
  }
  return &static MODateFormatter.fullDateWithTimeFormatter;
}

id static MODateFormatter.fullDateWithTimeFormatter.getter()
{
  return default argument 3 of MOSuggestionWorkoutIconGlyphView.init(image:glyphLightBackgroundColor:glyphDarkBackgroundColor:glyphTintColor:)(&one-time initialization token for fullDateWithTimeFormatter, (void **)&static MODateFormatter.fullDateWithTimeFormatter);
}

void one-time initialization function for shortDateWithTimeFormatter(uint64_t a1)
{
}

void *MODateFormatter.shortDateWithTimeFormatter.unsafeMutableAddressor()
{
  if (one-time initialization token for shortDateWithTimeFormatter != -1) {
    swift_once();
  }
  return &static MODateFormatter.shortDateWithTimeFormatter;
}

id static MODateFormatter.shortDateWithTimeFormatter.getter()
{
  return default argument 3 of MOSuggestionWorkoutIconGlyphView.init(image:glyphLightBackgroundColor:glyphDarkBackgroundColor:glyphTintColor:)(&one-time initialization token for shortDateWithTimeFormatter, (void **)&static MODateFormatter.shortDateWithTimeFormatter);
}

void one-time initialization function for shortDateFormatter(uint64_t a1)
{
}

void *MODateFormatter.shortDateFormatter.unsafeMutableAddressor()
{
  if (one-time initialization token for shortDateFormatter != -1) {
    swift_once();
  }
  return &static MODateFormatter.shortDateFormatter;
}

id static MODateFormatter.shortDateFormatter.getter()
{
  return default argument 3 of MOSuggestionWorkoutIconGlyphView.init(image:glyphLightBackgroundColor:glyphDarkBackgroundColor:glyphTintColor:)(&one-time initialization token for shortDateFormatter, (void **)&static MODateFormatter.shortDateFormatter);
}

void one-time initialization function for shortTimeFormatter(uint64_t a1)
{
}

void one-time initialization function for dayNameFormatter(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = type metadata accessor for Locale();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = [objc_allocWithZone((Class)NSDateFormatter) init];
  static Locale.autoupdatingCurrent.getter();
  Class isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  [v9 setLocale:isa];

  [v9 setFormattingContext:2];
  NSString v11 = String._bridgeToObjectiveC()();
  [v9 setLocalizedDateFormatFromTemplate:v11];

  *a4 = v9;
}

uint64_t *MODateFormatter.shortTimeFormatter.unsafeMutableAddressor()
{
  if (one-time initialization token for shortTimeFormatter != -1) {
    swift_once();
  }
  return &static MODateFormatter.shortTimeFormatter;
}

id static MODateFormatter.shortTimeFormatter.getter()
{
  return default argument 3 of MOSuggestionWorkoutIconGlyphView.init(image:glyphLightBackgroundColor:glyphDarkBackgroundColor:glyphTintColor:)(&one-time initialization token for shortTimeFormatter, (void **)&static MODateFormatter.shortTimeFormatter);
}

id one-time initialization function for relativeDateFormatter()
{
  id result = closure #1 in variable initialization expression of static MODateFormatter.relativeDateFormatter();
  static MODateFormatter.relativeDateFormatter = (uint64_t)result;
  return result;
}

id closure #1 in variable initialization expression of static MODateFormatter.relativeDateFormatter()
{
  uint64_t v0 = type metadata accessor for Locale();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  int v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v4 = [objc_allocWithZone((Class)NSRelativeDateTimeFormatter) init];
  static Locale.autoupdatingCurrent.getter();
  Class isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  [v4 setLocale:isa];

  [v4 setUnitsStyle:0];
  [v4 setDateTimeStyle:1];
  [v4 setFormattingContext:4];
  return v4;
}

uint64_t *MODateFormatter.relativeDateFormatter.unsafeMutableAddressor()
{
  if (one-time initialization token for relativeDateFormatter != -1) {
    swift_once();
  }
  return &static MODateFormatter.relativeDateFormatter;
}

id static MODateFormatter.relativeDateFormatter.getter()
{
  return default argument 3 of MOSuggestionWorkoutIconGlyphView.init(image:glyphLightBackgroundColor:glyphDarkBackgroundColor:glyphTintColor:)(&one-time initialization token for relativeDateFormatter, (void **)&static MODateFormatter.relativeDateFormatter);
}

id one-time initialization function for durationWithHourMinuteSecondFormatter(uint64_t a1)
{
  return one-time initialization function for durationWithHourMinuteSecondFormatter(a1, 224, &static MODateFormatter.durationWithHourMinuteSecondFormatter);
}

uint64_t *MODateFormatter.durationWithHourMinuteSecondFormatter.unsafeMutableAddressor()
{
  if (one-time initialization token for durationWithHourMinuteSecondFormatter != -1) {
    swift_once();
  }
  return &static MODateFormatter.durationWithHourMinuteSecondFormatter;
}

id static MODateFormatter.durationWithHourMinuteSecondFormatter.getter()
{
  return default argument 3 of MOSuggestionWorkoutIconGlyphView.init(image:glyphLightBackgroundColor:glyphDarkBackgroundColor:glyphTintColor:)(&one-time initialization token for durationWithHourMinuteSecondFormatter, (void **)&static MODateFormatter.durationWithHourMinuteSecondFormatter);
}

id one-time initialization function for durationWithMinuteSecondFormatter(uint64_t a1)
{
  return one-time initialization function for durationWithHourMinuteSecondFormatter(a1, 192, &static MODateFormatter.durationWithMinuteSecondFormatter);
}

id one-time initialization function for durationWithHourMinuteSecondFormatter(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = [objc_allocWithZone((Class)NSDateComponentsFormatter) init];
  [v5 setUnitsStyle:0];
  [v5 setAllowedUnits:a2];
  id result = [v5 setZeroFormattingBehavior:0x10000];
  *a3 = v5;
  return result;
}

uint64_t *MODateFormatter.durationWithMinuteSecondFormatter.unsafeMutableAddressor()
{
  if (one-time initialization token for durationWithMinuteSecondFormatter != -1) {
    swift_once();
  }
  return &static MODateFormatter.durationWithMinuteSecondFormatter;
}

id static MODateFormatter.durationWithMinuteSecondFormatter.getter()
{
  return default argument 3 of MOSuggestionWorkoutIconGlyphView.init(image:glyphLightBackgroundColor:glyphDarkBackgroundColor:glyphTintColor:)(&one-time initialization token for durationWithMinuteSecondFormatter, (void **)&static MODateFormatter.durationWithMinuteSecondFormatter);
}

uint64_t type metadata accessor for MODateFormatter()
{
  return self;
}

const char *MOMomentsFeatureFlags.domain.getter()
{
  return "Moments";
}

const char *MOMomentsFeatureFlags.feature.getter(char a1)
{
  id result = "MOAngelEnabled";
  switch(a1)
  {
    case 1:
      id result = "MOInternalEnabled";
      break;
    case 2:
      id result = "MODevEnabled";
      break;
    case 3:
      id result = "MOLinkPreviewEnabled";
      break;
    case 4:
      id result = "MOAngelPullToRefreshEnabled";
      break;
    default:
      return result;
  }
  return result;
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance MOMomentsFeatureFlags()
{
  id result = "MOAngelEnabled";
  switch(*v0)
  {
    case 1:
      id result = "MOInternalEnabled";
      break;
    case 2:
      id result = "MODevEnabled";
      break;
    case 3:
      id result = "MOLinkPreviewEnabled";
      break;
    case 4:
      id result = "MOAngelPullToRefreshEnabled";
      break;
    default:
      return result;
  }
  return result;
}

const char *MOAppProtectionFeatureFlags.domain.getter()
{
  return "AppProtection";
}

const char *MOAppProtectionFeatureFlags.feature.getter()
{
  return "protected_apps";
}

void MOAppProtectionFeatureFlags.hash(into:)()
{
}

Swift::Int MOAppProtectionFeatureFlags.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MOAppProtectionFeatureFlags()
{
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type MOMomentsFeatureFlags and conformance MOMomentsFeatureFlags()
{
  unint64_t result = lazy protocol witness table cache variable for type MOMomentsFeatureFlags and conformance MOMomentsFeatureFlags;
  if (!lazy protocol witness table cache variable for type MOMomentsFeatureFlags and conformance MOMomentsFeatureFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MOMomentsFeatureFlags and conformance MOMomentsFeatureFlags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MOMomentsFeatureFlags and conformance MOMomentsFeatureFlags;
  if (!lazy protocol witness table cache variable for type MOMomentsFeatureFlags and conformance MOMomentsFeatureFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MOMomentsFeatureFlags and conformance MOMomentsFeatureFlags);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MOAppProtectionFeatureFlags and conformance MOAppProtectionFeatureFlags()
{
  unint64_t result = lazy protocol witness table cache variable for type MOAppProtectionFeatureFlags and conformance MOAppProtectionFeatureFlags;
  if (!lazy protocol witness table cache variable for type MOAppProtectionFeatureFlags and conformance MOAppProtectionFeatureFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MOAppProtectionFeatureFlags and conformance MOAppProtectionFeatureFlags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MOAppProtectionFeatureFlags and conformance MOAppProtectionFeatureFlags;
  if (!lazy protocol witness table cache variable for type MOAppProtectionFeatureFlags and conformance MOAppProtectionFeatureFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MOAppProtectionFeatureFlags and conformance MOAppProtectionFeatureFlags);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for MOMomentsFeatureFlags(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for MOMomentsFeatureFlags(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10006465CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MOMomentsFeatureFlags()
{
  return &type metadata for MOMomentsFeatureFlags;
}

uint64_t getEnumTagSinglePayload for MOAppProtectionFeatureFlags(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for MOAppProtectionFeatureFlags(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100064784);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for MOAppProtectionFeatureFlags()
{
  return &type metadata for MOAppProtectionFeatureFlags;
}

uint64_t MOSuggestionAssetMediaAnalytics.MediaEngagementEvent.bundleId.getter(uint64_t a1)
{
  return a1;
}

uint64_t MOSuggestionAssetMediaCoverArtQueryInput.title.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v2 = a1;
  v2[1] = a2;
  return result;
}

MomentsUIService::MOProtectedAppSource __swiftcall MOProtectedAppSource.init(fixedAppSource:)(MomentsUIService::MOProtectedFixedAppSource fixedAppSource)
{
  uint64_t v2 = 0xD000000000000019;
  int v3 = (void *)0x80000001001E0CD0;
  switch(fixedAppSource)
  {
    case MomentsUIService_MOProtectedFixedAppSource_fitness:
      uint64_t v2 = 0xD000000000000011;
      unsigned int v4 = "com.apple.Fitness";
      goto LABEL_12;
    case MomentsUIService_MOProtectedFixedAppSource_music:
      int v3 = (void *)0xEF636973754D2E65;
      uint64_t v2 = 0x6C7070612E6D6F63;
      break;
    case MomentsUIService_MOProtectedFixedAppSource_podcasts:
      uint64_t v5 = "com.apple.podcasts";
      goto LABEL_10;
    case MomentsUIService_MOProtectedFixedAppSource_messages:
      uint64_t v2 = 0xD000000000000013;
      unsigned int v4 = "com.apple.MobileSMS";
      goto LABEL_12;
    case MomentsUIService_MOProtectedFixedAppSource_facetime:
      uint64_t v5 = "com.apple.facetime";
      goto LABEL_10;
    case MomentsUIService_MOProtectedFixedAppSource_health:
      uint64_t v2 = 0xD000000000000010;
      unsigned int v4 = "com.apple.Health";
      goto LABEL_12;
    case MomentsUIService_MOProtectedFixedAppSource_phone:
      uint64_t v2 = 0xD000000000000015;
      unsigned int v4 = "com.apple.mobilephone";
      goto LABEL_12;
    case MomentsUIService_MOProtectedFixedAppSource_wallet:
      uint64_t v5 = "com.apple.Passbook";
LABEL_10:
      int v3 = (void *)((unint64_t)(v5 - 32) | 0x8000000000000000);
      uint64_t v2 = 0xD000000000000012;
      break;
    case MomentsUIService_MOProtectedFixedAppSource_calendar:
      uint64_t v2 = 0xD000000000000013;
      unsigned int v4 = "com.apple.mobilecal";
LABEL_12:
      int v3 = (void *)((unint64_t)(v4 - 32) | 0x8000000000000000);
      break;
    default:
      break;
  }
  result.bundleIdentifier._object = v3;
  result.bundleIdentifier._uint64_t countAndFlagsBits = v2;
  return result;
}

unint64_t MOProtectedFixedAppSource.bundleIdentifier.getter(char a1)
{
  unint64_t result = 0xD000000000000019;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000011;
      break;
    case 2:
      unint64_t result = 0x6C7070612E6D6F63;
      break;
    case 3:
    case 5:
    case 8:
      unint64_t result = 0xD000000000000012;
      break;
    case 4:
      unint64_t result = 0xD000000000000013;
      break;
    case 6:
      unint64_t result = 0xD000000000000010;
      break;
    case 7:
      unint64_t result = 0xD000000000000015;
      break;
    case 9:
      unint64_t result = 0xD000000000000013;
      break;
    default:
      return result;
  }
  return result;
}

id MOProtectedAppSource.protectionSubject.getter()
{
  uint64_t v0 = self;
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 applicationWithBundleIdentifier:v1];

  return v2;
}

void one-time initialization function for allFixedApps()
{
  static MOProtectedAppSource.allFixedApps = (uint64_t)&outlined read-only object #0 of one-time initialization function for allFixedApps;
}

uint64_t *MOProtectedAppSource.allFixedApps.unsafeMutableAddressor()
{
  if (one-time initialization token for allFixedApps != -1) {
    swift_once();
  }
  return &static MOProtectedAppSource.allFixedApps;
}

uint64_t static MOProtectedAppSource.allFixedApps.getter()
{
  if (one-time initialization token for allFixedApps != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static MOProtectedAppSource.allFixedApps.setter(uint64_t a1)
{
  if (one-time initialization token for allFixedApps != -1) {
    swift_once();
  }
  swift_beginAccess();
  static MOProtectedAppSource.allFixedApps = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static MOProtectedAppSource.allFixedApps.modify())()
{
  if (one-time initialization token for allFixedApps != -1) {
    swift_once();
  }
  swift_beginAccess();
  return MOSuggestionMapSnapshotView.platterBlurView.modify;
}

uint64_t MOProtectedAppSource.bundleIdHash.getter()
{
  return StringProtocol.hash.getter();
}

uint64_t MOProtectedAppSource.hash(into:)()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t static MOProtectedAppSource.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

Swift::Int MOProtectedAppSource.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MOProtectedAppSource()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MOProtectedAppSource()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MOProtectedAppSource()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MOProtectedAppSource(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

unint64_t MOProtectedFixedAppSource.rawValue.getter(char a1)
{
  unint64_t result = 0xD000000000000019;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000011;
      break;
    case 2:
      unint64_t result = 0x6C7070612E6D6F63;
      break;
    case 3:
    case 5:
    case 8:
      unint64_t result = 0xD000000000000012;
      break;
    case 4:
      unint64_t result = 0xD000000000000013;
      break;
    case 6:
      unint64_t result = 0xD000000000000010;
      break;
    case 7:
      unint64_t result = 0xD000000000000015;
      break;
    case 9:
      unint64_t result = 0xD000000000000013;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MOProtectedFixedAppSource(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = MOProtectedFixedAppSource.rawValue.getter(*a1);
  uint64_t v5 = v4;
  if (v3 == MOProtectedFixedAppSource.rawValue.getter(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MOProtectedFixedAppSource()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  MOProtectedFixedAppSource.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MOProtectedFixedAppSource()
{
  MOProtectedFixedAppSource.rawValue.getter(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MOProtectedFixedAppSource()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  MOProtectedFixedAppSource.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance MOProtectedFixedAppSource@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized MOProtectedFixedAppSource.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance MOProtectedFixedAppSource@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = MOProtectedFixedAppSource.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

id one-time initialization function for accessGuard()
{
  id result = [self sharedGuard];
  static MOProtectedAppsManager.accessGuard = (uint64_t)result;
  return result;
}

uint64_t *MOProtectedAppsManager.accessGuard.unsafeMutableAddressor()
{
  if (one-time initialization token for accessGuard != -1) {
    swift_once();
  }
  return &static MOProtectedAppsManager.accessGuard;
}

id static MOProtectedAppsManager.accessGuard.getter()
{
  if (one-time initialization token for accessGuard != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static MOProtectedAppsManager.accessGuard;

  return v0;
}

uint64_t MOProtectedAppsManager.delegate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC16MomentsUIService22MOProtectedAppsManager_delegate;
  swift_beginAccess();
  return outlined init with copy of MOProtectedAppsManagerDelegate?(v3, a1);
}

uint64_t MOProtectedAppsManager.delegate.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC16MomentsUIService22MOProtectedAppsManager_delegate;
  swift_beginAccess();
  outlined assign with take of MOProtectedAppsManagerDelegate?(a1, v3);
  return swift_endAccess();
}

uint64_t (*MOProtectedAppsManager.delegate.modify())()
{
  return MOSuggestionMapSnapshotView.secondaryField.modify;
}

uint64_t MOProtectedAppsManager.monitoring.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC16MomentsUIService22MOProtectedAppsManager_monitoring);
  swift_beginAccess();
  return *v1;
}

uint64_t MOProtectedAppsManager.monitoring.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC16MomentsUIService22MOProtectedAppsManager_monitoring);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*MOProtectedAppsManager.monitoring.modify())()
{
  return MOSuggestionMapSnapshotView.secondaryField.modify;
}

uint64_t MOProtectedAppsManager.monitoringSubjects.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MOProtectedAppsManager.monitoringSubjects.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC16MomentsUIService22MOProtectedAppsManager_monitoringSubjects);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*MOProtectedAppsManager.monitoringSubjects.modify())()
{
  return MOSuggestionMapSnapshotView.secondaryField.modify;
}

id MOProtectedAppsManager.init()()
{
  uint64_t v1 = &v0[OBJC_IVAR____TtC16MomentsUIService22MOProtectedAppsManager_delegate];
  *(_OWORD *)uint64_t v1 = 0u;
  *((_OWORD *)v1 + 1) = 0u;
  *((void *)v1 + 4) = 0;
  v0[OBJC_IVAR____TtC16MomentsUIService22MOProtectedAppsManager_monitoring] = 0;
  *(void *)&v0[OBJC_IVAR____TtC16MomentsUIService22MOProtectedAppsManager_monitoringSubjects] = &_swiftEmptySetSingleton;
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for MOProtectedAppsManager();
  return [super init];
}

id MOProtectedAppsManager.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MOProtectedAppsManager();
  return [super dealloc];
}

Swift::Void __swiftcall MOProtectedAppsManager.subscribeToChanges(apps:)(Swift::OpaquePointer apps)
{
  objc_super v2 = v1;
  v21[3] = (uint64_t)&type metadata for MOAppProtectionFeatureFlags;
  void v21[4] = lazy protocol witness table accessor for type MOAppProtectionFeatureFlags and conformance MOAppProtectionFeatureFlags();
  char v4 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  if (v4)
  {
    (*(void (**)(void *))((swift_isaMask & *v2) + 0xA0))(&_swiftEmptySetSingleton);
    uint64_t v5 = *((void *)apps._rawValue + 2);
    if (v5)
    {
      uint64_t v6 = *(uint64_t (**)(uint64_t *))((swift_isaMask & *v2) + 0xA8);
      swift_bridgeObjectRetain();
      BOOL v7 = (Swift::Int *)((char *)apps._rawValue + 40);
      do
      {
        Swift::Int v8 = *(v7 - 1);
        Swift::Int v9 = *v7;
        swift_bridgeObjectRetain();
        id v10 = (void (*)(uint64_t *, void))v6(v21);
        specialized Set._Variant.insert(_:)(&v20, v8, v9);
        swift_bridgeObjectRelease();
        v10(v21, 0);
        v7 += 2;
        --v5;
      }
      while (v5);
      swift_bridgeObjectRelease();
    }
    if (one-time initialization token for filtering != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static MOAngelLogger.filtering);
    uint64_t v12 = v2;
    id v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v14))
    {
      id v15 = (uint8_t *)swift_slowAlloc();
      v21[0] = swift_slowAlloc();
      *(_DWORD *)id v15 = 136315138;
      (*(void (**)(void))((swift_isaMask & *v12) + 0x98))();
      lazy protocol witness table accessor for type MOProtectedAppSource and conformance MOProtectedAppSource();
      uint64_t v16 = Set.debugDescription.getter();
      unint64_t v18 = v17;
      swift_bridgeObjectRelease();
      Swift::Int v20 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "[subscribeToChanges] monitoring status for sources:%s", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    if (((*(uint64_t (**)(void))((swift_isaMask & *v12) + 0x80))() & 1) == 0)
    {
      id v19 = objc_msgSend(objc_msgSend(self, "subjectMonitorRegistry"), "addMonitor:", v12);
      swift_unknownObjectRelease();
      (*(void (**)(uint64_t))((swift_isaMask & *v12) + 0x88))(1);
      swift_unknownObjectRelease();
    }
  }
}

id static MOProtectedAppsManager.shouldDropContentFrom(bundleIdentifier:)()
{
  uint64_t v0 = self;
  swift_bridgeObjectRetain();
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 applicationWithBundleIdentifier:v1];
  swift_bridgeObjectRelease();

  id v3 = [v2 isHidden];
  return v3;
}

uint64_t static MOProtectedAppsManager.requiresChallenge(appSources:completion:)(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  id v23 = &type metadata for MOAppProtectionFeatureFlags;
  unint64_t v24 = lazy protocol witness table accessor for type MOAppProtectionFeatureFlags and conformance MOAppProtectionFeatureFlags();
  char v6 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
  if ((v6 & 1) == 0) {
    return a2(1);
  }
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = 0;
  uint64_t v8 = swift_allocObject();
  *(unsigned char *)(v8 + 16) = 1;
  Swift::Int v9 = (void *)swift_allocObject();
  v9[2] = v7;
  v9[3] = a1;
  v9[4] = v8;
  v9[5] = a2;
  v9[6] = a3;
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10)
  {
    id v21 = self;
    swift_bridgeObjectRetain_n();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v11 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v13 = *(v11 - 1);
      uint64_t v12 = *v11;
      uint64_t v14 = one-time initialization token for accessGuard;
      swift_bridgeObjectRetain();
      if (v14 != -1) {
        swift_once();
      }
      v11 += 2;
      id v15 = (void *)static MOProtectedAppsManager.accessGuard;
      NSString v16 = String._bridgeToObjectiveC()();
      id v17 = [v21 applicationWithBundleIdentifier:v16];

      unint64_t v18 = (void *)swift_allocObject();
      v18[2] = v8;
      v18[3] = v13;
      v18[4] = v12;
      v18[5] = partial apply for closure #1 in static MOProtectedAppsManager.requiresChallenge(appSources:completion:);
      v18[6] = v9;
      unint64_t v24 = (unint64_t)partial apply for closure #2 in static MOProtectedAppsManager.requiresChallenge(appSources:completion:);
      uint64_t v25 = v18;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSNumber?, @guaranteed Error?) -> ();
      id v23 = (ValueMetadata *)&block_descriptor_7;
      id v19 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      [v15 getIsChallengeCurrentlyRequiredForSubject:v17 completion:v19];
      _Block_release(v19);

      --v10;
    }
    while (v10);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t closure #1 in static MOProtectedAppsManager.requiresChallenge(appSources:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(BOOL))
{
  uint64_t v8 = (void *)(a1 + 16);
  uint64_t result = swift_beginAccess();
  uint64_t v10 = *(void *)(a1 + 16);
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11)
  {
    __break(1u);
  }
  else
  {
    *uint64_t v8 = v12;
    if (v12 == *(void *)(a2 + 16))
    {
      swift_beginAccess();
      return a4((*(unsigned char *)(a3 + 16) & 1) == 0);
    }
  }
  return result;
}

uint64_t closure #2 in static MOProtectedAppsManager.requiresChallenge(appSources:completion:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t (*a6)(void))
{
  char v6 = a6;
  Swift::Int v9 = (unsigned char *)(a3 + 16);
  if (a1)
  {
    if ([a1 BOOLValue])
    {
      swift_beginAccess();
      unsigned char *v9 = 1;
      if (one-time initialization token for filtering != -1) {
        swift_once();
      }
      uint64_t v10 = type metadata accessor for Logger();
      __swift_project_value_buffer(v10, (uint64_t)static MOAngelLogger.filtering);
      swift_bridgeObjectRetain_n();
      BOOL v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = (uint8_t *)swift_slowAlloc();
        uint64_t v26 = swift_slowAlloc();
        *(_DWORD *)uint64_t v13 = 136315138;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a4, a5, &v26);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        uint64_t v14 = "protected apps requires authentication, appSource=%s";
LABEL_16:
        _os_log_impl((void *)&_mh_execute_header, v11, v12, v14, v13, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        return v6();
      }
    }
    else
    {
      swift_beginAccess();
      unsigned char *v9 = 0;
      if (one-time initialization token for filtering != -1) {
        swift_once();
      }
      uint64_t v23 = type metadata accessor for Logger();
      __swift_project_value_buffer(v23, (uint64_t)static MOAngelLogger.filtering);
      swift_bridgeObjectRetain_n();
      BOOL v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = (uint8_t *)swift_slowAlloc();
        uint64_t v26 = swift_slowAlloc();
        *(_DWORD *)uint64_t v13 = 136315138;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a4, a5, &v26);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        uint64_t v14 = "protected apps requires no authentication, appSource=%s";
        goto LABEL_16;
      }
    }

    swift_bridgeObjectRelease_n();
    return v6();
  }
  if (one-time initialization token for filtering != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static MOAngelLogger.filtering);
  swift_errorRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  id v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    *(_DWORD *)uint64_t v19 = 134218242;
    unint64_t v28 = a5;
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v27 = StringProtocol.hash.getter();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12) = 2080;
    if (a2)
    {
      swift_getErrorValue();
      uint64_t v20 = Error.localizedDescription.getter();
      unint64_t v22 = v21;
    }
    else
    {
      unint64_t v22 = 0xE700000000000000;
      uint64_t v20 = 0x6E776F6E6B6E75;
    }
    uint64_t v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "protected apps unlock, appSource=%ld, error=%s", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_beginAccess();
  unsigned char *v9 = 1;
  char v6 = a6;
  return v6();
}

void thunk for @escaping @callee_guaranteed (@guaranteed NSNumber?, @guaranteed Error?) -> ()(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

uint64_t static MOProtectedAppsManager.requestAccess(appSources:completion:)(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t v23 = &type metadata for MOAppProtectionFeatureFlags;
  unint64_t v24 = lazy protocol witness table accessor for type MOAppProtectionFeatureFlags and conformance MOAppProtectionFeatureFlags();
  char v6 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
  if ((v6 & 1) == 0) {
    return a2(0);
  }
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = 0;
  uint64_t v8 = swift_allocObject();
  *(unsigned char *)(v8 + 16) = 0;
  Swift::Int v9 = (void *)swift_allocObject();
  v9[2] = v7;
  v9[3] = a1;
  v9[4] = v8;
  v9[5] = a2;
  v9[6] = a3;
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10)
  {
    id v21 = self;
    swift_bridgeObjectRetain_n();
    swift_retain();
    swift_retain();
    swift_retain();
    BOOL v11 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v13 = *(v11 - 1);
      uint64_t v12 = *v11;
      uint64_t v14 = one-time initialization token for accessGuard;
      swift_bridgeObjectRetain();
      if (v14 != -1) {
        swift_once();
      }
      v11 += 2;
      id v15 = (void *)static MOProtectedAppsManager.accessGuard;
      NSString v16 = String._bridgeToObjectiveC()();
      id v17 = [v21 applicationWithBundleIdentifier:v16];

      os_log_type_t v18 = (void *)swift_allocObject();
      v18[2] = v13;
      v18[3] = v12;
      v18[4] = v8;
      v18[5] = partial apply for closure #1 in static MOProtectedAppsManager.requestAccess(appSources:completion:);
      v18[6] = v9;
      unint64_t v24 = (unint64_t)partial apply for closure #2 in static MOProtectedAppsManager.requestAccess(appSources:completion:);
      uint64_t v25 = v18;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ();
      uint64_t v23 = (ValueMetadata *)&block_descriptor_20;
      uint64_t v19 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      [v15 authenticateForSubject:v17 completion:v19];
      _Block_release(v19);

      --v10;
    }
    while (v10);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t closure #1 in static MOProtectedAppsManager.requestAccess(appSources:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v8 = (void *)(a1 + 16);
  uint64_t result = swift_beginAccess();
  uint64_t v10 = *(void *)(a1 + 16);
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11)
  {
    __break(1u);
  }
  else
  {
    *uint64_t v8 = v12;
    if (v12 == *(void *)(a2 + 16))
    {
      swift_beginAccess();
      return a4(*(unsigned __int8 *)(a3 + 16));
    }
  }
  return result;
}

uint64_t closure #2 in static MOProtectedAppsManager.requestAccess(appSources:completion:)(char a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  if (a1)
  {
    if (one-time initialization token for filtering != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static MOAngelLogger.filtering);
    swift_bridgeObjectRetain_n();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = swift_slowAlloc();
      v24[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v12 + 12) = 1024;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "protected apps unlock, appSource=%s, success=%{BOOL}d", (uint8_t *)v12, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    if (one-time initialization token for filtering != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static MOAngelLogger.filtering);
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    NSString v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v23 = a6;
      uint64_t v18 = swift_slowAlloc();
      v24[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v18 + 12) = 2080;
      if (a2)
      {
        swift_getErrorValue();
        uint64_t v19 = Error.localizedDescription.getter();
        unint64_t v21 = v20;
      }
      else
      {
        unint64_t v21 = 0xE700000000000000;
        uint64_t v19 = 0x6E776F6E6B6E75;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "protected apps unlock, appSource=%s, error=%s", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      a6 = v23;
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_beginAccess();
    *(unsigned char *)(a5 + 16) = 1;
  }
  return a6();
}

void thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ()(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

unint64_t specialized MOProtectedFixedAppSource.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of MOProtectedFixedAppSource.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xA) {
    return 10;
  }
  else {
    return v3;
  }
}

uint64_t outlined init with copy of MOProtectedAppsManagerDelegate?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MOProtectedAppsManagerDelegate?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of MOProtectedAppsManagerDelegate?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MOProtectedAppsManagerDelegate?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for MOProtectedAppsManager()
{
  return self;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

unint64_t lazy protocol witness table accessor for type MOProtectedAppSource and conformance MOProtectedAppSource()
{
  unint64_t result = lazy protocol witness table cache variable for type MOProtectedAppSource and conformance MOProtectedAppSource;
  if (!lazy protocol witness table cache variable for type MOProtectedAppSource and conformance MOProtectedAppSource)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MOProtectedAppSource and conformance MOProtectedAppSource);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MOProtectedAppSource and conformance MOProtectedAppSource;
  if (!lazy protocol witness table cache variable for type MOProtectedAppSource and conformance MOProtectedAppSource)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MOProtectedAppSource and conformance MOProtectedAppSource);
  }
  return result;
}

void specialized MOProtectedAppsManager.appProtectionSubjectsChanged(_:for:)(unint64_t a1)
{
  id v57 = &type metadata for MOAppProtectionFeatureFlags;
  unint64_t v58 = lazy protocol witness table accessor for type MOAppProtectionFeatureFlags and conformance MOAppProtectionFeatureFlags();
  char v3 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v56);
  if (v3)
  {
    if (a1 >> 62) {
      goto LABEL_51;
    }
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
    {
      while (2)
      {
        unint64_t v5 = 0;
        unint64_t v6 = a1 & 0xC000000000000001;
        uint64_t v7 = a1 & 0xFFFFFFFFFFFFFF8;
        unint64_t v8 = a1 + 32;
        unint64_t v49 = v1;
        unint64_t v50 = a1;
        unint64_t v45 = a1 & 0xC000000000000001;
        uint64_t v46 = v4;
        unint64_t v43 = a1 + 32;
        uint64_t v44 = a1 & 0xFFFFFFFFFFFFFF8;
        while (1)
        {
          if (v6)
          {
            id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if (v5 >= *(void *)(v7 + 16))
            {
              __break(1u);
              return;
            }
            id v10 = *(id *)(v8 + 8 * v5);
          }
          id v11 = v10;
          if (__OFADD__(v5++, 1)) {
            break;
          }
          self;
          uint64_t v13 = swift_dynamicCastObjCClass();
          uint64_t v9 = v11;
          if (v13)
          {
            uint64_t v14 = (void *)v13;
            unint64_t v48 = v5;
            uint64_t v15 = *(uint64_t (**)(void))((swift_isaMask & *v1) + 0x98);
            uint64_t v47 = v9;
            id v51 = v9;
            uint64_t v16 = v15();
            int64_t v17 = 0;
            a1 = v16 + 56;
            uint64_t v18 = *(void *)(v16 + 56);
            uint64_t v52 = v16;
            uint64_t v19 = 1 << *(unsigned char *)(v16 + 32);
            if (v19 < 64) {
              uint64_t v20 = ~(-1 << v19);
            }
            else {
              uint64_t v20 = -1;
            }
            unint64_t v21 = v20 & v18;
            int64_t v22 = (unint64_t)(v19 + 63) >> 6;
            if ((v20 & v18) != 0)
            {
LABEL_17:
              unint64_t v23 = __clz(__rbit64(v21));
              v21 &= v21 - 1;
              unint64_t v24 = v23 | (v17 << 6);
              goto LABEL_32;
            }
            while (1)
            {
              int64_t v25 = v17 + 1;
              if (__OFADD__(v17, 1))
              {
                __break(1u);
                goto LABEL_49;
              }
              if (v25 >= v22) {
                goto LABEL_5;
              }
              unint64_t v26 = *(void *)(a1 + 8 * v25);
              ++v17;
              if (!v26)
              {
                int64_t v17 = v25 + 1;
                if (v25 + 1 >= v22) {
                  goto LABEL_5;
                }
                unint64_t v26 = *(void *)(a1 + 8 * v17);
                if (!v26)
                {
                  int64_t v17 = v25 + 2;
                  if (v25 + 2 >= v22) {
                    goto LABEL_5;
                  }
                  unint64_t v26 = *(void *)(a1 + 8 * v17);
                  if (!v26)
                  {
                    int64_t v27 = v25 + 3;
                    if (v27 >= v22)
                    {
LABEL_5:

                      swift_release();
                      uint64_t v1 = v49;
                      a1 = v50;
                      unint64_t v6 = v45;
                      uint64_t v4 = v46;
                      uint64_t v9 = v47;
                      unint64_t v5 = v48;
                      unint64_t v8 = v43;
                      uint64_t v7 = v44;
                      goto LABEL_6;
                    }
                    unint64_t v26 = *(void *)(a1 + 8 * v27);
                    if (!v26)
                    {
                      while (1)
                      {
                        int64_t v17 = v27 + 1;
                        if (__OFADD__(v27, 1)) {
                          goto LABEL_50;
                        }
                        if (v17 >= v22) {
                          goto LABEL_5;
                        }
                        unint64_t v26 = *(void *)(a1 + 8 * v17);
                        ++v27;
                        if (v26) {
                          goto LABEL_31;
                        }
                      }
                    }
                    int64_t v17 = v27;
                  }
                }
              }
LABEL_31:
              unint64_t v21 = (v26 - 1) & v26;
              unint64_t v24 = __clz(__rbit64(v26)) + (v17 << 6);
LABEL_32:
              unint64_t v28 = (uint64_t *)(*(void *)(v52 + 48) + 16 * v24);
              uint64_t v29 = *v28;
              unint64_t v30 = v28[1];
              swift_bridgeObjectRetain();
              id v31 = [v14 bundleIdentifier];
              uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v1 = v33;

              if (v32 == v29 && v1 == (void *)v30) {
                break;
              }
              char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if (v35) {
                goto LABEL_40;
              }
              swift_bridgeObjectRelease();
              if (v21) {
                goto LABEL_17;
              }
            }
            swift_bridgeObjectRelease();
LABEL_40:
            swift_bridgeObjectRelease();
            if (one-time initialization token for filtering != -1) {
              swift_once();
            }
            uint64_t v36 = type metadata accessor for Logger();
            __swift_project_value_buffer(v36, (uint64_t)static MOAngelLogger.filtering);
            swift_bridgeObjectRetain();
            uint64_t v37 = Logger.logObject.getter();
            os_log_type_t v38 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v37, v38))
            {
              uint64_t v39 = (uint8_t *)swift_slowAlloc();
              v56[0] = swift_slowAlloc();
              *(_DWORD *)uint64_t v39 = 136315138;
              swift_bridgeObjectRetain();
              v53[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, v56);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              _os_log_impl((void *)&_mh_execute_header, v37, v38, "[subscribeToChanges] App status changed, validating conditions, appBundleId=%s", v39, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              uint64_t v40 = swift_bridgeObjectRelease_n();
            }
            (*(void (**)(uint64_t *__return_ptr, uint64_t))((swift_isaMask & *v49) + 0x68))(v56, v40);
            if (v57)
            {
              outlined init with copy of MOProtectedAppsManagerDelegate((uint64_t)v56, (uint64_t)v53);
              outlined destroy of MOProtectedAppsManagerDelegate?((uint64_t)v56);
              uint64_t v41 = v54;
              uint64_t v42 = v55;
              __swift_project_boxed_opaque_existential_1(v53, v54);
              (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v41, v42);
              swift_release();

              __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
            }
            else
            {

              swift_release();
              outlined destroy of MOProtectedAppsManagerDelegate?((uint64_t)v56);
            }
            return;
          }
LABEL_6:

          if (v5 == v4) {
            goto LABEL_52;
          }
        }
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        swift_bridgeObjectRetain();
        uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
        if (v4) {
          continue;
        }
        break;
      }
    }
LABEL_52:
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1000675B8()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000675C8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t partial apply for closure #1 in static MOProtectedAppsManager.requiresChallenge(appSources:completion:)()
{
  return partial apply for closure #1 in static MOProtectedAppsManager.requiresChallenge(appSources:completion:)((uint64_t (*)(void, void, void, void, void))closure #1 in static MOProtectedAppsManager.requiresChallenge(appSources:completion:));
}

uint64_t sub_1000675F4()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t partial apply for closure #2 in static MOProtectedAppsManager.requiresChallenge(appSources:completion:)(void *a1, uint64_t a2)
{
  return closure #2 in static MOProtectedAppsManager.requiresChallenge(appSources:completion:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(uint64_t (**)(void))(v2 + 40));
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

uint64_t objectdestroy_5Tm()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t partial apply for closure #1 in static MOProtectedAppsManager.requestAccess(appSources:completion:)()
{
  return partial apply for closure #1 in static MOProtectedAppsManager.requiresChallenge(appSources:completion:)((uint64_t (*)(void, void, void, void, void))closure #1 in static MOProtectedAppsManager.requestAccess(appSources:completion:));
}

uint64_t partial apply for closure #1 in static MOProtectedAppsManager.requiresChallenge(appSources:completion:)(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_1000676E8()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t partial apply for closure #2 in static MOProtectedAppsManager.requestAccess(appSources:completion:)(char a1, uint64_t a2)
{
  return closure #2 in static MOProtectedAppsManager.requestAccess(appSources:completion:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(uint64_t (**)(void))(v2 + 40));
}

unint64_t lazy protocol witness table accessor for type MOProtectedFixedAppSource and conformance MOProtectedFixedAppSource()
{
  unint64_t result = lazy protocol witness table cache variable for type MOProtectedFixedAppSource and conformance MOProtectedFixedAppSource;
  if (!lazy protocol witness table cache variable for type MOProtectedFixedAppSource and conformance MOProtectedFixedAppSource)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MOProtectedFixedAppSource and conformance MOProtectedFixedAppSource);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MOProtectedAppChallengeResult and conformance MOProtectedAppChallengeResult()
{
  unint64_t result = lazy protocol witness table cache variable for type MOProtectedAppChallengeResult and conformance MOProtectedAppChallengeResult;
  if (!lazy protocol witness table cache variable for type MOProtectedAppChallengeResult and conformance MOProtectedAppChallengeResult)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MOProtectedAppChallengeResult and conformance MOProtectedAppChallengeResult);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MOProtectedAppAuthenticationResult and conformance MOProtectedAppAuthenticationResult()
{
  unint64_t result = lazy protocol witness table cache variable for type MOProtectedAppAuthenticationResult and conformance MOProtectedAppAuthenticationResult;
  if (!lazy protocol witness table cache variable for type MOProtectedAppAuthenticationResult and conformance MOProtectedAppAuthenticationResult)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MOProtectedAppAuthenticationResult and conformance MOProtectedAppAuthenticationResult);
  }
  return result;
}

uint64_t sub_1000678A0(void **a1)
{
  return (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x68))();
}

uint64_t sub_1000678F4(uint64_t a1, void **a2)
{
  outlined init with copy of MOProtectedAppsManagerDelegate?(a1, (uint64_t)v4);
  return (*(uint64_t (**)(unsigned char *))((swift_isaMask & **a2) + 0x70))(v4);
}

uint64_t sub_100067960@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x80))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000679C0(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((swift_isaMask & **a2) + 0x88))(*a1);
}

uint64_t sub_100067A18@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x98))();
  *a2 = result;
  return result;
}

uint64_t sub_100067A74(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))((swift_isaMask & **a2) + 0xA0);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

void *initializeBufferWithCopyOfBuffer for MOProtectedAppSource(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for MOProtectedAppSource()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for MOProtectedAppSource(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for MOProtectedAppSource(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MOProtectedAppSource(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MOProtectedAppSource(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MOProtectedAppSource()
{
  return &type metadata for MOProtectedAppSource;
}

uint64_t getEnumTagSinglePayload for MOProtectedFixedAppSource(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF7) {
    goto LABEL_17;
  }
  if (a2 + 9 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 9) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 9;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v8 = v6 - 10;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for MOProtectedFixedAppSource(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *uint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100067D78);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MOProtectedFixedAppSource()
{
  return &type metadata for MOProtectedFixedAppSource;
}

ValueMetadata *type metadata accessor for MOProtectedAppChallengeResult()
{
  return &type metadata for MOProtectedAppChallengeResult;
}

unsigned char *storeEnumTagSinglePayload for MOProtectedAppChallengeResult(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100067E94);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MOProtectedAppAuthenticationResult()
{
  return &type metadata for MOProtectedAppAuthenticationResult;
}

uint64_t outlined destroy of MOProtectedAppsManagerDelegate?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MOProtectedAppsManagerDelegate?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of MOProtectedAppsManagerDelegate(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay16MomentsUIService26MOSuggestionAssetReferenceCG_AHs5NeverOTg5(void (*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, unint64_t a3)
{
  if (a3 >> 62) {
    goto LABEL_16;
  }
  uint64_t v6 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t result = _swiftEmptyArrayStorage;
    if (!v6) {
      break;
    }
    uint64_t v12 = _swiftEmptyArrayStorage;
    uint64_t result = (void *)specialized ContiguousArray.reserveCapacity(_:)();
    if (v6 < 0)
    {
      __break(1u);
      return result;
    }
    uint64_t v8 = 0;
    while (v6 != v8)
    {
      if ((a3 & 0xC000000000000001) != 0)
      {
        uint64_t v9 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v9 = *(void *)(a3 + 8 * v8 + 32);
        swift_retain();
      }
      uint64_t v10 = v9;
      a1(&v11, &v10);
      swift_release();
      if (v3) {
        return (void *)swift_release();
      }
      ++v8;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v6 == v8) {
        return v12;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return result;
}

void *MOSuggestionAssetAnalytics.Events.assetTransfer.unsafeMutableAddressor()
{
  return &static MOSuggestionAssetAnalytics.Events.assetTransfer;
}

unint64_t static MOSuggestionAssetAnalytics.Events.assetTransfer.getter()
{
  return 0xD00000000000001FLL;
}

void *MOSuggestionAssetAnalytics.AssetTransferEvent.SECONDS_SCALE_FACTOR.unsafeMutableAddressor()
{
  return &static MOSuggestionAssetAnalytics.AssetTransferEvent.SECONDS_SCALE_FACTOR;
}

double static MOSuggestionAssetAnalytics.AssetTransferEvent.SECONDS_SCALE_FACTOR.getter()
{
  return 10000.0;
}

unint64_t MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields.rawValue.getter(char a1)
{
  unint64_t result = 0x74657373416D756ELL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000011;
      break;
    case 2:
    case 11:
    case 13:
    case 15:
      unint64_t result = 0xD000000000000013;
      break;
    case 3:
      unint64_t result = 0xD000000000000012;
      break;
    case 5:
      unint64_t result = 0xD000000000000018;
      break;
    case 7:
      unint64_t result = 0xD000000000000014;
      break;
    case 9:
      unint64_t result = 0xD000000000000011;
      break;
    case 10:
      unint64_t result = 0xD000000000000016;
      break;
    case 12:
      unint64_t result = 0xD000000000000011;
      break;
    case 14:
      unint64_t result = 0x726566736E617274;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields.rawValue.getter(*a1);
  uint64_t v5 = v4;
  if (v3 == MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields.rawValue.getter(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields()
{
  MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields.rawValue.getter(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t MOSuggestionAssetAnalytics.AssetTransferEvent.numAssets.getter()
{
  return *(void *)v0;
}

uint64_t MOSuggestionAssetAnalytics.AssetTransferEvent.numAssets.setter(uint64_t result)
{
  void *v1 = result;
  return result;
}

void *MOSuggestionAssetAnalytics.AssetTransferEvent.assetsAuthorized.getter()
{
  char v1 = *(void **)(v0 + 8);
  id v2 = v1;
  return v1;
}

void MOSuggestionAssetAnalytics.AssetTransferEvent.assetsAuthorized.setter(uint64_t a1)
{
  *(void *)(v1 + 8) = a1;
}

void (__swiftcall *MOPOIAnnotationViewConfiguration.tileSize.modify())()
{
  return MOSuggestionInterstitialExpandableListViewCellConstants.init();
}

uint64_t MOPOIAnnotationViewConfiguration.numLocations.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t MOPOIAnnotationViewConfiguration.numLocations.setter(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t MOSuggestionAssetAnalytics.AssetTransferEvent.transferID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for MOSuggestionAssetAnalytics.AssetTransferEvent() + 32);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t MOSuggestionAssetAnalytics.AssetTransferEvent.transferID.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for MOSuggestionAssetAnalytics.AssetTransferEvent() + 32);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

void (__swiftcall *MOSuggestionAssetAnalytics.AssetTransferEvent.transferID.modify())()
{
  return MOSuggestionInterstitialExpandableListViewCellConstants.init();
}

double MOSuggestionAssetAnalytics.AssetTransferEvent.sheetProcessingTime_Seconds.getter()
{
  return *(double *)(v0 + *(int *)(type metadata accessor for MOSuggestionAssetAnalytics.AssetTransferEvent() + 36));
}

uint64_t MOSuggestionAssetAnalytics.AssetTransferEvent.sheetProcessingTime_Seconds.setter(double a1)
{
  uint64_t result = type metadata accessor for MOSuggestionAssetAnalytics.AssetTransferEvent();
  *(double *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

void (__swiftcall *MOSuggestionAssetAnalytics.AssetTransferEvent.sheetProcessingTime_Seconds.modify())()
{
  return MOSuggestionInterstitialExpandableListViewCellConstants.init();
}

unint64_t one-time initialization function for fieldTypeToAssetType()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields, MOSuggestionAssetsType)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1001DB460;
  *(unsigned char *)(inited + 32) = 1;
  uint64_t v1 = (void *)MOSuggestionAssetsTypeContactPhoto;
  *(void *)(inited + 40) = MOSuggestionAssetsTypeContactPhoto;
  *(unsigned char *)(inited + 48) = 2;
  id v2 = (void *)MOSuggestionAssetsTypeLivePhoto;
  *(void *)(inited + 56) = MOSuggestionAssetsTypeLivePhoto;
  *(unsigned char *)(inited + 64) = 3;
  uint64_t v3 = (void *)MOSuggestionAssetsTypeMultiPinMap;
  *(void *)(inited + 72) = MOSuggestionAssetsTypeMultiPinMap;
  *(unsigned char *)(inited + 80) = 4;
  uint64_t v4 = (void *)MOSuggestionAssetsTypeMediaCoverArt;
  *(void *)(inited + 88) = MOSuggestionAssetsTypeMediaCoverArt;
  *(unsigned char *)(inited + 96) = 5;
  uint64_t v5 = (void *)MOSuggestionAssetsTypeMotionActivity;
  *(void *)(inited + 104) = MOSuggestionAssetsTypeMotionActivity;
  *(unsigned char *)(inited + 112) = 6;
  uint64_t v6 = (void *)MOSuggestionAssetsTypePhoto;
  *(void *)(inited + 120) = MOSuggestionAssetsTypePhoto;
  *(unsigned char *)(inited + 128) = 7;
  BOOL v7 = (void *)MOSuggestionAssetsTypeReflectionPrompt;
  *(void *)(inited + 136) = MOSuggestionAssetsTypeReflectionPrompt;
  *(unsigned char *)(inited + 144) = 8;
  char v8 = (void *)MOSuggestionAssetsTypeVideo;
  *(void *)(inited + 152) = MOSuggestionAssetsTypeVideo;
  *(unsigned char *)(inited + 160) = 9;
  uint64_t v9 = (void *)MOSuggestionAssetsTypeWorkout;
  *(void *)(inited + 168) = MOSuggestionAssetsTypeWorkout;
  *(unsigned char *)(inited + 176) = 10;
  uint64_t v10 = (void *)MOSuggestionAssetsTypeWorkoutGroup;
  *(void *)(inited + 184) = MOSuggestionAssetsTypeWorkoutGroup;
  id v11 = v1;
  id v12 = v2;
  id v13 = v3;
  id v14 = v4;
  id v15 = v5;
  id v16 = v6;
  id v17 = v7;
  id v18 = v8;
  id v19 = v9;
  id v20 = v10;
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(inited);
  static MOSuggestionAssetAnalytics.AssetTransferEvent.fieldTypeToAssetType = result;
  return result;
}

uint64_t *MOSuggestionAssetAnalytics.AssetTransferEvent.fieldTypeToAssetType.unsafeMutableAddressor()
{
  if (one-time initialization token for fieldTypeToAssetType != -1) {
    swift_once();
  }
  return &static MOSuggestionAssetAnalytics.AssetTransferEvent.fieldTypeToAssetType;
}

uint64_t static MOSuggestionAssetAnalytics.AssetTransferEvent.fieldTypeToAssetType.getter()
{
  if (one-time initialization token for fieldTypeToAssetType != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

void MOSuggestionAssetAnalytics.AssetTransferEvent.init(bundle:references:transferID:)(void *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for MOSuggestionAssetAnalytics.AssetTransferEvent();
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + *(int *)(v8 + 36)) = 0;
  *(void *)(a4 + 16) = [a1 bundleSubType];
  *(void *)(a4 + 24) = [a1 bundleSuperType];
  uint64_t v9 = a4 + *(int *)(v8 + 32);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v10 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v9, a3, v10);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v11 = (*(uint64_t (**)(unint64_t))(*(void *)static MOSuggestionAssetCacheManager.shared + 256))(a2);
  if (v11)
  {
    uint64_t v12 = v11;
    if (a2 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();

      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v13 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a3, v10);
    *(void *)a4 = v13;

    *(void *)(a4 + 8) = v12;
  }
  else
  {

    swift_bridgeObjectRelease();
    id v14 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v14(a3, v10);
  }
}

Swift::Void __swiftcall MOSuggestionAssetAnalytics.AssetTransferEvent.send()()
{
  uint64_t v1 = type metadata accessor for MOSuggestionAssetAnalytics.AssetTransferEvent();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(void *)(v2 + 64);
  __chkstk_darwin(v1 - 8);
  NSString v4 = String._bridgeToObjectiveC()();
  outlined init with copy of MOSuggestionAssetAnalytics.AssetTransferEvent(v0, (uint64_t)aBlock - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v5 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v6 = swift_allocObject();
  outlined init with take of MOSuggestionAssetAnalytics.AssetTransferEvent((uint64_t)aBlock - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v6 + v5);
  aBlock[4] = partial apply for closure #1 in MOSuggestionAssetAnalytics.AssetTransferEvent.send();
  aBlock[5] = v6;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  void aBlock[3] = &block_descriptor_8;
  BOOL v7 = _Block_copy(aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v7);
}

unint64_t closure #1 in MOSuggestionAssetAnalytics.AssetTransferEvent.send()(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1001DB470;
  *(void *)(inited + 32) = 0x74657373416D756ELL;
  *(void *)(inited + 40) = 0xE900000000000073;
  *(void *)(inited + 48) = [objc_allocWithZone((Class)NSNumber) initWithInteger:*a1];
  *(void *)(inited + 56) = 0xD000000000000011;
  *(void *)(inited + 64) = 0x80000001001E0F30;
  *(void *)(inited + 72) = [objc_allocWithZone((Class)NSNumber) initWithUnsignedInteger:a1[2]];
  *(void *)(inited + 80) = 0xD000000000000013;
  *(void *)(inited + 88) = 0x80000001001E0F50;
  *(void *)(inited + 96) = [objc_allocWithZone((Class)NSNumber) initWithUnsignedInteger:a1[3]];
  *(void *)(inited + 104) = 0x726566736E617274;
  *(void *)(inited + 112) = 0xEA00000000004449;
  uint64_t v3 = type metadata accessor for MOSuggestionAssetAnalytics.AssetTransferEvent();
  UUID.uuidString.getter();
  id v4 = objc_allocWithZone((Class)NSString);
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v4 initWithString:v5];

  *(void *)(inited + 120) = v6;
  *(void *)(inited + 128) = 0xD000000000000013;
  *(void *)(inited + 136) = 0x80000001001E0F70;
  double v7 = *(double *)((char *)a1 + *(int *)(v3 + 36)) * 10000.0;
  if ((~*(void *)&v7 & 0x7FF0000000000000) == 0) {
    goto LABEL_68;
  }
  if (v7 <= -9.22337204e18)
  {
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  if (v7 >= 9.22337204e18)
  {
LABEL_70:
    __break(1u);
LABEL_71:
    swift_once();
    goto LABEL_59;
  }
  *(void *)(inited + 144) = [objc_allocWithZone((Class)NSNumber) initWithInteger:(uint64_t)v7];
  unint64_t v61 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  uint64_t v8 = (void *)a1[1];
  if (v8)
  {
    uint64_t v9 = one-time initialization token for fieldTypeToAssetType;
    id v57 = v8;
    if (v9 != -1) {
      swift_once();
    }
    uint64_t v54 = static MOSuggestionAssetAnalytics.AssetTransferEvent.fieldTypeToAssetType + 64;
    uint64_t v10 = 1 << *(unsigned char *)(static MOSuggestionAssetAnalytics.AssetTransferEvent.fieldTypeToAssetType + 32);
    uint64_t v11 = -1;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    unint64_t v12 = v11 & *(void *)(static MOSuggestionAssetAnalytics.AssetTransferEvent.fieldTypeToAssetType + 64);
    int64_t v55 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v56 = static MOSuggestionAssetAnalytics.AssetTransferEvent.fieldTypeToAssetType;
    swift_bridgeObjectRetain();
    uint64_t v13 = 0;
    int64_t v14 = 0;
    while (1)
    {
      if (v12)
      {
        unint64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        int64_t v59 = v14;
        unint64_t v18 = v17 | (v14 << 6);
      }
      else
      {
        int64_t v19 = v14 + 1;
        if (__OFADD__(v14, 1)) {
          goto LABEL_66;
        }
        if (v19 >= v55)
        {
LABEL_57:
          swift_release();
          id v45 = [objc_allocWithZone((Class)NSNumber) initWithInteger:v13];
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v60[0] = v61;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v45, 0xD000000000000013, 0x80000001001E0F10, isUniquelyReferenced_nonNull_native);

          swift_bridgeObjectRelease();
          break;
        }
        unint64_t v20 = *(void *)(v54 + 8 * v19);
        int64_t v21 = v14 + 1;
        if (!v20)
        {
          int64_t v21 = v14 + 2;
          if (v14 + 2 >= v55) {
            goto LABEL_57;
          }
          unint64_t v20 = *(void *)(v54 + 8 * v21);
          if (!v20)
          {
            int64_t v21 = v14 + 3;
            if (v14 + 3 >= v55) {
              goto LABEL_57;
            }
            unint64_t v20 = *(void *)(v54 + 8 * v21);
            if (!v20)
            {
              uint64_t v22 = v14 + 4;
              if (v14 + 4 >= v55) {
                goto LABEL_57;
              }
              unint64_t v20 = *(void *)(v54 + 8 * v22);
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_67;
                  }
                  if (v21 >= v55) {
                    goto LABEL_57;
                  }
                  unint64_t v20 = *(void *)(v54 + 8 * v21);
                  ++v22;
                  if (v20) {
                    goto LABEL_27;
                  }
                }
              }
              int64_t v21 = v14 + 4;
            }
          }
        }
LABEL_27:
        unint64_t v12 = (v20 - 1) & v20;
        int64_t v59 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = *(unsigned __int8 *)(*(void *)(v56 + 48) + v18);
      unint64_t v24 = *(void **)(*(void *)(v56 + 56) + 8 * v18);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v58 = v24;
      NSString v25 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v26 = [v57 countForObject:v25];

      unint64_t v27 = 0xE900000000000073;
      uint64_t v28 = 0x74657373416D756ELL;
      switch(v23)
      {
        case 1:
          uint64_t v29 = "cal";
          goto LABEL_36;
        case 2:
          unint64_t v30 = "numAssets_Contact";
          goto LABEL_42;
        case 3:
          uint64_t v28 = 0xD000000000000012;
          unint64_t v27 = 0x80000001001E0E40;
          break;
        case 4:
          unint64_t v27 = 0xEF616964654D5F73;
          break;
        case 5:
          uint64_t v28 = 0xD000000000000018;
          unint64_t v27 = 0x80000001001E0E70;
          break;
        case 6:
          unint64_t v27 = 0xEF6F746F68505F73;
          break;
        case 7:
          uint64_t v28 = 0xD000000000000014;
          unint64_t v27 = 0x80000001001E0EA0;
          break;
        case 8:
          unint64_t v27 = 0xEF6F656469565F73;
          break;
        case 9:
          uint64_t v29 = "tion";
          goto LABEL_36;
        case 10:
          uint64_t v28 = 0xD000000000000016;
          unint64_t v27 = 0x80000001001E0EF0;
          break;
        case 11:
          unint64_t v30 = "numAssets_WorkoutGroup";
          goto LABEL_42;
        case 12:
          uint64_t v29 = "numAssetsAuthorized";
LABEL_36:
          unint64_t v27 = (unint64_t)v29 | 0x8000000000000000;
          uint64_t v28 = 0xD000000000000011;
          break;
        case 13:
          unint64_t v30 = "suggestionSubtype";
          goto LABEL_42;
        case 14:
          uint64_t v28 = 0x726566736E617274;
          unint64_t v27 = 0xEA00000000004449;
          break;
        case 15:
          unint64_t v30 = "suggestionSupertype";
LABEL_42:
          unint64_t v27 = (unint64_t)v30 | 0x8000000000000000;
          uint64_t v28 = 0xD000000000000013;
          break;
        default:
          break;
      }
      id v31 = [objc_allocWithZone((Class)NSNumber) initWithInteger:v26];
      char v32 = swift_isUniquelyReferenced_nonNull_native();
      v60[0] = v61;
      unint64_t v34 = specialized __RawDictionaryStorage.find<A>(_:)(v28, v27);
      uint64_t v35 = *(void *)(v61 + 16);
      BOOL v36 = (v33 & 1) == 0;
      uint64_t v37 = v35 + v36;
      if (__OFADD__(v35, v36))
      {
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
        goto LABEL_69;
      }
      char v38 = v33;
      if (*(void *)(v61 + 24) >= v37)
      {
        if (v32)
        {
          uint64_t v41 = (void *)v60[0];
          if (v33) {
            goto LABEL_10;
          }
        }
        else
        {
          specialized _NativeDictionary.copy()();
          uint64_t v41 = (void *)v60[0];
          if (v38) {
            goto LABEL_10;
          }
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v37, v32);
        unint64_t v39 = specialized __RawDictionaryStorage.find<A>(_:)(v28, v27);
        if ((v38 & 1) != (v40 & 1))
        {
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          JUMPOUT(0x100069714);
        }
        unint64_t v34 = v39;
        uint64_t v41 = (void *)v60[0];
        if (v38)
        {
LABEL_10:
          uint64_t v15 = v41[7];

          *(void *)(v15 + 8 * v34) = v31;
          goto LABEL_11;
        }
      }
      v41[(v34 >> 6) + 8] |= 1 << v34;
      uint64_t v42 = (uint64_t *)(v41[6] + 16 * v34);
      *uint64_t v42 = v28;
      v42[1] = v27;
      *(void *)(v41[7] + 8 * v34) = v31;
      uint64_t v43 = v41[2];
      BOOL v16 = __OFADD__(v43, 1);
      uint64_t v44 = v43 + 1;
      if (v16) {
        goto LABEL_65;
      }
      v41[2] = v44;
      swift_bridgeObjectRetain();
LABEL_11:
      unint64_t v61 = (unint64_t)v41;

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      BOOL v16 = __OFADD__(v13, v26);
      v13 += (uint64_t)v26;
      int64_t v14 = v59;
      if (v16) {
        goto LABEL_64;
      }
    }
  }
  if (serverManager._connectionProperties != (NSMutableDictionary *)-1) {
    goto LABEL_71;
  }
LABEL_59:
  uint64_t v47 = type metadata accessor for Logger();
  __swift_project_value_buffer(v47, (uint64_t)static MOAngelLogger.assets);
  swift_bridgeObjectRetain_n();
  unint64_t v48 = Logger.logObject.getter();
  os_log_type_t v49 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v48, v49))
  {
    unint64_t v50 = (uint8_t *)swift_slowAlloc();
    v60[0] = swift_slowAlloc();
    *(_DWORD *)unint64_t v50 = 136315138;
    type metadata accessor for NSObject();
    uint64_t v51 = Dictionary.debugDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v52, v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v48, v49, "[analytics] result=%s", v50, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_beginAccess();
  return v61;
}

void *Array<A>.withTransferID(uuid:)(uint64_t a1, unint64_t a2)
{
  v3[2] = a1;
  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay16MomentsUIService26MOSuggestionAssetReferenceCG_AHs5NeverOTg5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for closure #1 in Array<A>.withTransferID(uuid:), (uint64_t)v3, a2);
}

uint64_t closure #1 in Array<A>.withTransferID(uuid:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *a1;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v8, a2, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  (*(void (**)(char *))(*(void *)v9 + 200))(v8);
  *a3 = v9;
  return swift_retain();
}

unint64_t specialized MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0x10) {
    return 16;
  }
  else {
    return v3;
  }
}

uint64_t type metadata accessor for MOSuggestionAssetAnalytics.AssetTransferEvent()
{
  uint64_t result = type metadata singleton initialization cache for MOSuggestionAssetAnalytics.AssetTransferEvent;
  if (!type metadata singleton initialization cache for MOSuggestionAssetAnalytics.AssetTransferEvent) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined init with copy of MOSuggestionAssetAnalytics.AssetTransferEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MOSuggestionAssetAnalytics.AssetTransferEvent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000699E8()
{
  uint64_t v1 = (int *)(type metadata accessor for MOSuggestionAssetAnalytics.AssetTransferEvent() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;

  uint64_t v7 = v6 + v1[10];
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t outlined init with take of MOSuggestionAssetAnalytics.AssetTransferEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MOSuggestionAssetAnalytics.AssetTransferEvent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t partial apply for closure #1 in MOSuggestionAssetAnalytics.AssetTransferEvent.send()()
{
  uint64_t v1 = *(void *)(type metadata accessor for MOSuggestionAssetAnalytics.AssetTransferEvent() - 8);
  uint64_t v2 = (void *)(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));

  return closure #1 in MOSuggestionAssetAnalytics.AssetTransferEvent.send()(v2);
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

uint64_t partial apply for closure #1 in Array<A>.withTransferID(uuid:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return closure #1 in Array<A>.withTransferID(uuid:)(a1, *(void *)(v2 + 16), a2);
}

unint64_t lazy protocol witness table accessor for type MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields and conformance MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields()
{
  unint64_t result = lazy protocol witness table cache variable for type MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields and conformance MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields;
  if (!lazy protocol witness table cache variable for type MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields and conformance MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields and conformance MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields);
  }
  return result;
}

uint64_t type metadata accessor for MOSuggestionAssetAnalytics()
{
  return self;
}

ValueMetadata *type metadata accessor for MOSuggestionAssetAnalytics.Events()
{
  return &type metadata for MOSuggestionAssetAnalytics.Events;
}

void *initializeBufferWithCopyOfBuffer for MOSuggestionAssetAnalytics.AssetTransferEvent(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    void *v4 = *a2;
    uint64_t v4 = (void *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = (void *)a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    uint64_t v8 = *(int *)(a3 + 32);
    uint64_t v9 = a1 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    uint64_t v11 = type metadata accessor for UUID();
    unint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
    id v13 = v7;
    v12(v9, v10, v11);
    *(void *)((char *)v4 + *(int *)(a3 + 36)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 36));
  }
  return v4;
}

uint64_t destroy for MOSuggestionAssetAnalytics.AssetTransferEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t initializeWithCopy for MOSuggestionAssetAnalytics.AssetTransferEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v7 = *(int *)(a3 + 32);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  id v12 = v6;
  v11(v8, v9, v10);
  *(void *)(a1 + *(int *)(a3 + 36)) = *(void *)(a2 + *(int *)(a3 + 36));
  return a1;
}

void *assignWithCopy for MOSuggestionAssetAnalytics.AssetTransferEvent(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = (void *)a1[1];
  uint64_t v7 = (void *)a2[1];
  a1[1] = v7;
  id v8 = v7;

  a1[2] = a2[2];
  a1[3] = a2[3];
  uint64_t v9 = *(int *)(a3 + 32);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 24))(v10, v11, v12);
  *(void *)((char *)a1 + *(int *)(a3 + 36)) = *(void *)((char *)a2 + *(int *)(a3 + 36));
  return a1;
}

uint64_t initializeWithTake for MOSuggestionAssetAnalytics.AssetTransferEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v7 = *(int *)(a3 + 32);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  *(void *)(a1 + *(int *)(a3 + 36)) = *(void *)(a2 + *(int *)(a3 + 36));
  return a1;
}

uint64_t assignWithTake for MOSuggestionAssetAnalytics.AssetTransferEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t v7 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v7;

  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v8 = *(int *)(a3 + 32);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  *(void *)(a1 + *(int *)(a3 + 36)) = *(void *)(a2 + *(int *)(a3 + 36));
  return a1;
}

uint64_t getEnumTagSinglePayload for MOSuggestionAssetAnalytics.AssetTransferEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006A0B4);
}

uint64_t sub_10006A0B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = type metadata accessor for UUID();
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = a1 + *(int *)(a3 + 32);
    return v10(v12, a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for MOSuggestionAssetAnalytics.AssetTransferEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006A184);
}

uint64_t sub_10006A184(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 8) = a2;
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 32);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for MOSuggestionAssetAnalytics.AssetTransferEvent()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF1) {
    goto LABEL_17;
  }
  if (a2 + 15 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 15) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 15;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 15;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 15;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x10;
  int v8 = v6 - 16;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 15 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 15) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF1) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF0)
  {
    unsigned int v6 = ((a2 - 241) >> 8) + 1;
    *uint64_t result = a2 + 15;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10006A430);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 15;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields()
{
  return &type metadata for MOSuggestionAssetAnalytics.AssetTransferEvent.EventFields;
}

unint64_t type metadata accessor for NSObject()
{
  unint64_t result = lazy cache variable for type metadata for NSObject;
  if (!lazy cache variable for type metadata for NSObject)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  }
  return result;
}

void *MOSuggestionInterstitialCarouselViewCell.reuseIdentifier.unsafeMutableAddressor()
{
  return &static MOSuggestionInterstitialCarouselViewCell.reuseIdentifier;
}

unint64_t static MOSuggestionInterstitialCarouselViewCell.reuseIdentifier.getter()
{
  return 0xD000000000000028;
}

uint64_t key path getter for MOSuggestionInterstitialCarouselViewCell.blockUserInteraction : MOSuggestionInterstitialCarouselViewCell@<X0>(void **a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x70))();
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = v4;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v5;
    *(void *)(result + 24) = v6;
    BOOL v7 = thunk for @escaping @callee_guaranteed () -> ()partial apply;
  }
  else
  {
    BOOL v7 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())result;
  return result;
}

uint64_t key path setter for MOSuggestionInterstitialCarouselViewCell.blockUserInteraction : MOSuggestionInterstitialCarouselViewCell(uint64_t *a1, void **a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  BOOL v7 = *(uint64_t (**)(uint64_t (*)(), uint64_t))((swift_isaMask & **a2) + 0x78);
  outlined copy of (@escaping @callee_guaranteed @Sendable (@guaranteed HKStatisticsCollectionQuery, @guaranteed HKStatisticsCollection?, @guaranteed Error?) -> ())?(v3);
  return v7(v6, v5);
}

uint64_t MOSuggestionInterstitialCarouselViewCell.blockUserInteraction.getter()
{
  return MOSuggestionInterstitialCarouselViewCell.blockUserInteraction.getter(&OBJC_IVAR____TtC16MomentsUIService40MOSuggestionInterstitialCarouselViewCell_blockUserInteraction);
}

uint64_t MOSuggestionInterstitialCarouselViewCell.blockUserInteraction.setter(uint64_t a1, uint64_t a2)
{
  return MOSuggestionInterstitialCarouselViewCell.blockUserInteraction.setter(a1, a2, &OBJC_IVAR____TtC16MomentsUIService40MOSuggestionInterstitialCarouselViewCell_blockUserInteraction);
}

uint64_t outlined consume of (@escaping @callee_guaranteed () -> ())?(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t (*MOSuggestionInterstitialCarouselViewCell.blockUserInteraction.modify())()
{
  return MOSuggestionMapSnapshotView.platterBlurView.modify;
}

uint64_t key path getter for MOSuggestionInterstitialCarouselViewCell.unBlockUserInteraction : MOSuggestionInterstitialCarouselViewCell@<X0>(void **a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x88))();
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = v4;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v5;
    *(void *)(result + 24) = v6;
    BOOL v7 = partial apply for thunk for @escaping @callee_guaranteed () -> ();
  }
  else
  {
    BOOL v7 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())result;
  return result;
}

uint64_t key path setter for MOSuggestionInterstitialCarouselViewCell.unBlockUserInteraction : MOSuggestionInterstitialCarouselViewCell(uint64_t *a1, void **a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed () -> (@out ());
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  BOOL v7 = *(uint64_t (**)(uint64_t (*)(), uint64_t))((swift_isaMask & **a2) + 0x90);
  outlined copy of (@escaping @callee_guaranteed @Sendable (@guaranteed HKStatisticsCollectionQuery, @guaranteed HKStatisticsCollection?, @guaranteed Error?) -> ())?(v3);
  return v7(v6, v5);
}

uint64_t MOSuggestionInterstitialCarouselViewCell.unBlockUserInteraction.getter()
{
  return MOSuggestionInterstitialCarouselViewCell.blockUserInteraction.getter(&OBJC_IVAR____TtC16MomentsUIService40MOSuggestionInterstitialCarouselViewCell_unBlockUserInteraction);
}

uint64_t MOSuggestionInterstitialCarouselViewCell.blockUserInteraction.getter(void *a1)
{
  int v2 = (uint64_t *)(v1 + *a1);
  swift_beginAccess();
  uint64_t v3 = *v2;
  outlined copy of (@escaping @callee_guaranteed @Sendable (@guaranteed HKStatisticsCollectionQuery, @guaranteed HKStatisticsCollection?, @guaranteed Error?) -> ())?(*v2);
  return v3;
}

uint64_t MOSuggestionInterstitialCarouselViewCell.unBlockUserInteraction.setter(uint64_t a1, uint64_t a2)
{
  return MOSuggestionInterstitialCarouselViewCell.blockUserInteraction.setter(a1, a2, &OBJC_IVAR____TtC16MomentsUIService40MOSuggestionInterstitialCarouselViewCell_unBlockUserInteraction);
}

uint64_t MOSuggestionInterstitialCarouselViewCell.blockUserInteraction.setter(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = (uint64_t *)(v3 + *a3);
  swift_beginAccess();
  uint64_t v7 = *v6;
  uint64_t *v6 = a1;
  v6[1] = a2;
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(v7);
}

uint64_t (*MOSuggestionInterstitialCarouselViewCell.unBlockUserInteraction.modify())()
{
  return MOSuggestionMapSnapshotView.secondaryField.modify;
}

Swift::Void __swiftcall MOSuggestionInterstitialCarouselViewCell.updateAssetView()()
{
  uint64_t v1 = *(uint64_t (**)(void))((swift_isaMask & *v0) + 0xA0);
  uint64_t v2 = v1();
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 808))(1);
    uint64_t v2 = swift_release();
  }
  uint64_t v3 = *(void **)((char *)v0 + OBJC_IVAR____TtC16MomentsUIService40MOSuggestionInterstitialCarouselViewCell_assetView);
  uint64_t v4 = ((uint64_t (*)(uint64_t))v1)(v2);
  (*(void (**)(uint64_t))((swift_isaMask & *v3) + 0xA0))(v4);
}

uint64_t MOSuggestionInterstitialCarouselViewCell.assetViewModel.getter()
{
  return swift_weakLoadStrong();
}

uint64_t MOSuggestionInterstitialCarouselViewCell.assetViewModel.setter()
{
  swift_beginAccess();
  uint64_t v1 = swift_weakAssign();
  uint64_t v2 = *(uint64_t (**)(uint64_t))((swift_isaMask & *v0) + 0xA0);
  uint64_t v3 = v2(v1);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 808))(1);
    uint64_t v3 = swift_release();
  }
  uint64_t v4 = *(void **)((char *)v0 + OBJC_IVAR____TtC16MomentsUIService40MOSuggestionInterstitialCarouselViewCell_assetView);
  uint64_t v5 = v2(v3);
  (*(void (**)(uint64_t))((swift_isaMask & *v4) + 0xA0))(v5);
  return swift_release();
}

void (*MOSuggestionInterstitialCarouselViewCell.assetViewModel.modify(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC16MomentsUIService40MOSuggestionInterstitialCarouselViewCell_assetViewModel;
  void v3[4] = v1;
  v3[5] = v4;
  swift_beginAccess();
  v3[3] = swift_weakLoadStrong();
  return MOSuggestionInterstitialCarouselViewCell.assetViewModel.modify;
}

void MOSuggestionInterstitialCarouselViewCell.assetViewModel.modify(void **a1, char a2)
{
  uint64_t v3 = *a1;
  swift_weakAssign();
  if (a2)
  {
    swift_release();
    swift_endAccess();
  }
  else
  {
    uint64_t v4 = (void *)v3[4];
    swift_endAccess();
    uint64_t v5 = swift_release();
    uint64_t v6 = *(uint64_t (**)(uint64_t))((swift_isaMask & *v4) + 0xA0);
    uint64_t v7 = v6(v5);
    if (v7)
    {
      (*(void (**)(uint64_t))(*(void *)v7 + 808))(1);
      uint64_t v7 = swift_release();
    }
    int v8 = *(void **)(v3[4] + OBJC_IVAR____TtC16MomentsUIService40MOSuggestionInterstitialCarouselViewCell_assetView);
    uint64_t v9 = v6(v7);
    (*(void (**)(uint64_t))((swift_isaMask & *v8) + 0xA0))(v9);
  }

  free(v3);
}

Swift::Void __swiftcall MOSuggestionInterstitialCarouselViewCell.setupViews()()
{
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC16MomentsUIService40MOSuggestionInterstitialCarouselViewCell_assetView];
  [v0 addSubview:v1];
  uint64_t v2 = self;
  id v3 = [v2 clearColor];
  [v0 setBackgroundColor:v3];

  [v0 setClipsToBounds:0];
  id v4 = [v0 layer];
  [v4 setCornerRadius:7.0];

  id v5 = [v0 layer];
  id v6 = [v2 blackColor];
  id v7 = [v6 CGColor];

  [v5 setShadowColor:v7];
  id v8 = [v0 layer];
  LODWORD(v9) = 1036831949;
  [v8 setShadowOpacity:v9];

  id v10 = [v0 layer];
  [v10 setShadowOffset:0.0, 2.0];

  id v11 = [v0 layer];
  [v11 setShadowRadius:4.0];

  id v12 = [v0 layer];
  [v12 setCornerCurve:kCACornerCurveContinuous];

  id v13 = [v0 layer];
  [v13 setShadowPathIsBounds:1];

  uint64_t v14 = *(void (**)(uint64_t, _UNKNOWN **))((swift_isaMask & *v1) + 0x88);
  uint64_t v15 = swift_unknownObjectRetain();
  v14(v15, &protocol witness table for MOSuggestionInterstitialCarouselViewCell);
}

id MOSuggestionInterstitialCarouselViewCell.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MOSuggestionInterstitialCarouselViewCell();
  return [super dealloc];
}

Swift::Void __swiftcall MOSuggestionInterstitialCarouselViewCell.layoutSubviews()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MOSuggestionInterstitialCarouselViewCell();
  [super layoutSubviews];
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC16MomentsUIService40MOSuggestionInterstitialCarouselViewCell_assetView];
  [v0 bounds];
  [v1 setFrame:];
}

Swift::Void __swiftcall MOSuggestionInterstitialCarouselViewCell.shouldBlockUserSelection()()
{
  uint64_t v1 = (void (*)(void))(*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x70))();
  if (v1)
  {
    uint64_t v2 = (uint64_t)v1;
    v1();
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v2);
  }
}

Swift::Void __swiftcall MOSuggestionInterstitialCarouselViewCell.shouldUnblockUserSelection()()
{
  uint64_t v1 = (void (*)(void))(*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x88))();
  if (v1)
  {
    uint64_t v2 = (uint64_t)v1;
    v1();
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v2);
  }
}

id specialized MOSuggestionInterstitialCarouselViewCell.init(frame:)()
{
  uint64_t v1 = OBJC_IVAR____TtC16MomentsUIService40MOSuggestionInterstitialCarouselViewCell_assetView;
  type metadata accessor for MOSuggestionSheetAssetView();
  id v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v3 = v0;
  *(void *)&v0[v1] = [v2 init];
  id v4 = &v3[OBJC_IVAR____TtC16MomentsUIService40MOSuggestionInterstitialCarouselViewCell_blockUserInteraction];
  *(void *)id v4 = 0;
  *((void *)v4 + 1) = 0;
  id v5 = &v3[OBJC_IVAR____TtC16MomentsUIService40MOSuggestionInterstitialCarouselViewCell_unBlockUserInteraction];
  *(void *)id v5 = 0;
  *((void *)v5 + 1) = 0;
  swift_weakInit();

  v8.receiver = v3;
  v8.super_class = (Class)type metadata accessor for MOSuggestionInterstitialCarouselViewCell();
  [super initWithFrame:0.0, 0.0, 0.0, 0.0];
  MOSuggestionInterstitialCarouselViewCell.setupViews()();

  return v6;
}

void specialized MOSuggestionInterstitialCarouselViewCell.init(coder:)()
{
  uint64_t v1 = OBJC_IVAR____TtC16MomentsUIService40MOSuggestionInterstitialCarouselViewCell_assetView;
  type metadata accessor for MOSuggestionSheetAssetView();
  *(void *)&v0[v1] = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
  id v2 = &v0[OBJC_IVAR____TtC16MomentsUIService40MOSuggestionInterstitialCarouselViewCell_blockUserInteraction];
  *(void *)id v2 = 0;
  *((void *)v2 + 1) = 0;
  id v3 = &v0[OBJC_IVAR____TtC16MomentsUIService40MOSuggestionInterstitialCarouselViewCell_unBlockUserInteraction];
  *(void *)id v3 = 0;
  *((void *)v3 + 1) = 0;
  swift_weakInit();

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t type metadata accessor for MOSuggestionInterstitialCarouselViewCell()
{
  return self;
}

uint64_t sub_10006B4C4@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0xA0))();
  *a2 = result;
  return result;
}

uint64_t sub_10006B520(uint64_t a1, void **a2)
{
  id v2 = *(uint64_t (**)(uint64_t))((swift_isaMask & **a2) + 0xA8);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_10006B584()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

char *MOSuggestionLivePhotoView.__allocating_init(livePhoto:frame:shouldAutoPlay:size:)(void *a1, int a2, char a3, double a4, double a5, double a6, double a7)
{
  id v15 = objc_allocWithZone(v7);
  return MOSuggestionLivePhotoView.init(livePhoto:frame:shouldAutoPlay:size:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t MOSuggestionLivePhotoView.delegate.getter()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t MOSuggestionLivePhotoView.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC16MomentsUIService25MOSuggestionLivePhotoView_delegate;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*MOSuggestionLivePhotoView.delegate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC16MomentsUIService25MOSuggestionLivePhotoView_delegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = Strong;
  void v3[4] = v7;
  return MOSuggestionSheetAssetGridView.delegate.modify;
}

char *MOSuggestionLivePhotoView.init(livePhoto:frame:shouldAutoPlay:size:)(void *a1, int a2, char a3, double a4, double a5, double a6, double a7)
{
  LODWORD(v91) = a2;
  uint64_t v14 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v89 = *(void *)(v14 - 8);
  uint64_t v90 = v14;
  __chkstk_darwin(v14);
  id v87 = (char *)&v83 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = type metadata accessor for DispatchQoS();
  uint64_t v86 = *(void *)(v88 - 8);
  __chkstk_darwin(v88);
  uint64_t v85 = (char *)&v83 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = type metadata accessor for DispatchTime();
  uint64_t v84 = *(void *)(v92 - 8);
  uint64_t v17 = __chkstk_darwin(v92);
  int64_t v19 = (char *)&v83 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  int64_t v21 = (char *)&v83 - v20;
  *(void *)&v7[OBJC_IVAR____TtC16MomentsUIService25MOSuggestionLivePhotoView_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  id v22 = objc_allocWithZone((Class)PHLivePhotoView);
  uint64_t v23 = v7;
  id v24 = [v22 initWithFrame:a4, a5, a6, a7];
  *(void *)&v23[OBJC_IVAR____TtC16MomentsUIService25MOSuggestionLivePhotoView_livePhotoView] = v24;
  if (one-time initialization token for checkPlatterViewSize != -1) {
    swift_once();
  }
  double v25 = CGRectMake_0();
  id v29 = [objc_allocWithZone((Class)UIImageView) initWithFrame:v25, v26, v27, v28];
  *(void *)&v23[OBJC_IVAR____TtC16MomentsUIService25MOSuggestionLivePhotoView_iconView] = v29;

  unint64_t v30 = (objc_class *)type metadata accessor for MOSuggestionLivePhotoView();
  v95.receiver = v23;
  v95.super_class = v30;
  id v31 = [super initWithFrame:a4, a5, a6, a7];
  char v32 = *(void **)&v31[OBJC_IVAR____TtC16MomentsUIService25MOSuggestionLivePhotoView_livePhotoView];
  char v33 = v31;
  id v93 = a1;
  [v32 setLivePhoto:a1];
  [v32 setContentMode:2];
  [v33 addSubview:v32];
  [v32 setDelegate:v33];
  id v34 = v32;
  UIView.fillSuper(margin:)(0.0);

  swift_bridgeObjectRelease();
  if (a3 == 8)
  {
    uint64_t v35 = OBJC_IVAR____TtC16MomentsUIService25MOSuggestionLivePhotoView_iconView;
    id v36 = *(id *)&v33[OBJC_IVAR____TtC16MomentsUIService25MOSuggestionLivePhotoView_iconView];
    NSString v37 = String._bridgeToObjectiveC()();
    id v38 = [self _systemImageNamed:v37];

    [v36 setImage:v38];
    unint64_t v39 = *(void **)&v33[v35];
    char v40 = self;
    id v41 = v39;
    id v42 = [v40 whiteColor];
    [v41 setTintColor:v42];

    id v43 = [*(id *)&v33[v35] layer];
    id v44 = [v40 blackColor];
    id v45 = [v44 CGColor];

    [v43 setShadowColor:v45];
    id v46 = [*(id *)&v33[v35] layer];
    [v46 setShadowRadius:2.0];

    id v47 = [*(id *)&v33[v35] layer];
    LODWORD(v48) = 1045220557;
    [v47 setShadowOpacity:v48];

    os_log_type_t v49 = *(void **)&v33[v35];
    id v50 = [v49 layer];
    [v49 bounds];
    [v50 setCornerRadius:CGRectGetHeight(v97) * 0.5];

    id v51 = [*(id *)&v33[v35] layer];
    [v51 setShadowOffset:0.0, 0.0];

    unint64_t v52 = *(void **)&v33[v35];
    id v53 = [v52 layer];
    [v52 bounds];
    double v55 = v54;
    double v57 = v56;
    double v59 = v58;
    double v61 = v60;
    [v52 bounds];
    CGFloat v62 = CGRectGetHeight(v98) * 0.5;
    id v63 = [self bezierPathWithRoundedRect:v55 cornerRadius:v57 v59, v61, v62];
    id v64 = [v63 CGPath];

    [v53 setShadowPath:v64];
    id v65 = [*(id *)&v33[v35] layer];
    [v65 setShadowPathIsBounds:1];

    [v33 addSubview:*(void *)&v33[v35]];
  }
  [v33 setIsAccessibilityElement:1];
  UIAccessibilityTraits v66 = UIAccessibilityTraitImage;
  double v67 = v33;
  unint64_t v68 = (unint64_t)[v67 accessibilityTraits];
  if ((v66 & ~v68) != 0) {
    UIAccessibilityTraits v69 = v66;
  }
  else {
    UIAccessibilityTraits v69 = 0;
  }
  [v67 setAccessibilityTraits:v69 | v68];

  [v67 setAccessibilityIgnoresInvertColors:1];
  id v70 = self;
  id v71 = v67;
  id v72 = [v70 mainBundle];
  v96._object = (void *)0x80000001001E3FA0;
  v73._uint64_t countAndFlagsBits = 0x6F6850206576694CLL;
  v73._object = (void *)0xEA00000000006F74;
  v74._uint64_t countAndFlagsBits = 0;
  v74._object = (void *)0xE000000000000000;
  v96._uint64_t countAndFlagsBits = 0xD00000000000002FLL;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v73, (Swift::String_optional)0, (NSBundle)v72, v74, v96);

  NSString v75 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v71 setAccessibilityLabel:v75];

  if (v91)
  {
    type metadata accessor for OS_dispatch_queue();
    id v76 = (void *)static OS_dispatch_queue.main.getter();
    static DispatchTime.now()();
    + infix(_:_:)();
    uint64_t v91 = *(void (**)(char *, uint64_t))(v84 + 8);
    v91(v19, v92);
    uint64_t v77 = swift_allocObject();
    swift_unknownObjectWeakInit();
    aBlock[4] = partial apply for closure #1 in MOSuggestionLivePhotoView.init(livePhoto:frame:shouldAutoPlay:size:);
    aBlock[5] = v77;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    void aBlock[3] = &block_descriptor_9;
    uint64_t v78 = _Block_copy(aBlock);
    swift_release();
    uint64_t v79 = v85;
    static DispatchQoS.unspecified.getter();
    aBlock[0] = _swiftEmptyArrayStorage;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    uint64_t v80 = v87;
    uint64_t v81 = v90;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();

    _Block_release(v78);
    (*(void (**)(char *, uint64_t))(v89 + 8))(v80, v81);
    (*(void (**)(char *, uint64_t))(v86 + 8))(v79, v88);
    v91(v21, v92);
  }
  else
  {
  }
  return v71;
}

void closure #1 in MOSuggestionLivePhotoView.init(livePhoto:frame:shouldAutoPlay:size:)()
{
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = Strong;
    [Strong setMuted:1];
  }
  swift_beginAccess();
  uint64_t v2 = (void *)swift_unknownObjectWeakLoadStrong();
  if (v2)
  {
    uint64_t v3 = v2;
    [v2 startPlaybackWithStyle:2];
  }
}

void MOSuggestionLivePhotoView.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC16MomentsUIService25MOSuggestionLivePhotoView_delegate + 8] = 0;
  swift_unknownObjectWeakInit();

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void MOSuggestionLivePhotoView.updateCrop(_:)(double a1, double a2, double a3, double a4)
{
  v11.origin.CGFloat x = 0.0;
  v11.origin.CGFloat y = 0.0;
  v11.size.CGFloat width = 0.0;
  v11.size.CGFloat height = 0.0;
  if (!CGRectEqualToRect(*(CGRect *)&a1, v11)) {
    [*(id *)(v4 + OBJC_IVAR____TtC16MomentsUIService25MOSuggestionLivePhotoView_livePhotoView) setContentsRect:a1, a2, a3, a4];
  }
  id v9 = [*(id *)(v4 + OBJC_IVAR____TtC16MomentsUIService25MOSuggestionLivePhotoView_livePhotoView) layer];
  [v9 setNeedsDisplay];
}

void MOSuggestionLivePhotoView.init(frame:)()
{
}

id MOSuggestionLivePhotoView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MOSuggestionLivePhotoView();
  return [super dealloc];
}

double CGRectMake_0()
{
  return 8.0;
}

uint64_t type metadata accessor for MOSuggestionLivePhotoView()
{
  return self;
}

uint64_t sub_10006C5C0()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void partial apply for closure #1 in MOSuggestionLivePhotoView.init(livePhoto:frame:shouldAutoPlay:size:)()
{
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_9()
{
  return swift_release();
}

void specialized MOSuggestionLivePhotoView.livePhotoView(_:willBeginPlaybackWith:)()
{
  if ((*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x68))())
  {
    uint64_t v2 = v1;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(ObjectType, v2);
    swift_unknownObjectRelease();
  }
  if (serverManager._clientConnections != (NSMutableDictionary *)-1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static MOAngelLogger.shared);
  os_log_t oslog = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v5))
  {
    id v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v5, "[MOSuggestionLivePhotoView] shouldBlockUserSelection", v6, 2u);
    swift_slowDealloc();
  }
}

void specialized MOSuggestionLivePhotoView.livePhotoView(_:didEndPlaybackWith:)()
{
  if ((*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x68))())
  {
    uint64_t v2 = v1;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v2 + 16))(ObjectType, v2);
    swift_unknownObjectRelease();
  }
  if (serverManager._clientConnections != (NSMutableDictionary *)-1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static MOAngelLogger.shared);
  os_log_t oslog = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v5))
  {
    id v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v5, "[MOSuggestionLivePhotoView] shouldUnblockUserSelection", v6, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_10006C8B0@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x68))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_10006C90C(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))((swift_isaMask & **a2) + 0x70);
  uint64_t v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

id MOSuggestionSheetJournalButton.__allocating_init(frame:isSingleCell:)(char a1, double a2, double a3, double a4, double a5)
{
  CGRect v11 = objc_allocWithZone(v5);
  id v12 = &v11[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetJournalButton_buttonTapped];
  void *v12 = 0;
  v12[1] = 0;
  v11[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetJournalButton_singleCellAsset] = a1;
  v15.receiver = v11;
  v15.super_class = v5;
  id v13 = [super initWithFrame:a2, a3, a4, a5];
  MOSuggestionSheetJournalButton.sharedInit()();

  return v13;
}

uint64_t key path getter for MOSuggestionSheetJournalButton.buttonTapped : MOSuggestionSheetJournalButton@<X0>(void **a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x60))();
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = v4;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v5;
    *(void *)(result + 24) = v6;
    uint64_t v7 = partial apply for thunk for @escaping @callee_guaranteed () -> ();
  }
  else
  {
    uint64_t v7 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())result;
  return result;
}

uint64_t key path setter for MOSuggestionSheetJournalButton.buttonTapped : MOSuggestionSheetJournalButton(uint64_t *a1, void **a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed () -> (@out ());
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t (*)(), uint64_t))((swift_isaMask & **a2) + 0x68);
  outlined copy of (@escaping @callee_guaranteed @Sendable (@guaranteed HKStatisticsCollectionQuery, @guaranteed HKStatisticsCollection?, @guaranteed Error?) -> ())?(v3);
  return v7(v6, v5);
}

uint64_t MOSuggestionSheetJournalButton.buttonTapped.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetJournalButton_buttonTapped);
  swift_beginAccess();
  uint64_t v2 = *v1;
  outlined copy of (@escaping @callee_guaranteed @Sendable (@guaranteed HKStatisticsCollectionQuery, @guaranteed HKStatisticsCollection?, @guaranteed Error?) -> ())?(*v1);
  return v2;
}

uint64_t MOSuggestionSheetJournalButton.buttonTapped.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetJournalButton_buttonTapped);
  swift_beginAccess();
  uint64_t v6 = *v5;
  *uint64_t v5 = a1;
  v5[1] = a2;
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(v6);
}

uint64_t (*MOSuggestionSheetJournalButton.buttonTapped.modify())()
{
  return MOSuggestionMapSnapshotView.platterBlurView.modify;
}

id MOSuggestionSheetJournalButton.init(frame:isSingleCell:)(char a1, double a2, double a3, double a4, double a5)
{
  id v10 = &v5[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetJournalButton_buttonTapped];
  *id v10 = 0;
  v10[1] = 0;
  v5[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetJournalButton_singleCellAsset] = a1;
  v13.receiver = v5;
  v13.super_class = (Class)type metadata accessor for MOSuggestionSheetJournalButton();
  id v11 = [super initWithFrame:a2, a3, a4, a5];
  MOSuggestionSheetJournalButton.sharedInit()();

  return v11;
}

id MOSuggestionSheetJournalButton.init(coder:)(void *a1)
{
  uint64_t v3 = &v1[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetJournalButton_buttonTapped];
  *uint64_t v3 = 0;
  v3[1] = 0;
  v1[OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetJournalButton_singleCellAsset] = 0;
  v8.receiver = v1;
  v8.super_class = (Class)type metadata accessor for MOSuggestionSheetJournalButton();
  id v4 = [super initWithCoder:a1];
  id v5 = v4;
  if (v4)
  {
    id v6 = v4;
    MOSuggestionSheetJournalButton.sharedInit()();
  }
  return v5;
}

Swift::Void __swiftcall MOSuggestionSheetJournalButton.setPublicUI(_:)(Swift::Bool a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIButton.Configuration?);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  id v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  objc_super v8 = (char *)&v13 - v7;
  UIButton.configuration.getter();
  uint64_t v9 = type metadata accessor for UIButton.Configuration();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9))
  {
    outlined init with copy of UIButton.Configuration?((uint64_t)v8, (uint64_t)v6);
    UIButton.configuration.setter();
    outlined destroy of UIButton.Configuration?((uint64_t)v8);
  }
  else
  {
    id v10 = self;
    id v11 = &selRef_systemBlueColor;
    if (!a1) {
      id v11 = &selRef_systemIndigoColor;
    }
    id v12 = [v10 *v11];
    UIButton.Configuration.baseForegroundColor.setter();
    UIButton.configuration.setter();
  }
  [v1 setNeedsUpdateConfiguration];
}

uint64_t MOSuggestionSheetJournalButton.sharedInit()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIButton.Configuration?);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for UIButton.Configuration.CornerStyle();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UIButton.Configuration.Size();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  id v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for UIButton.Configuration();
  uint64_t v12 = *(void *)(v32 - 8);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  [v1 setTranslatesAutoresizingMaskIntoConstraints:0];
  static UIButton.Configuration.filled()();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for UIButton.Configuration.Size.medium(_:), v8);
  UIButton.Configuration.buttonSize.setter();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for UIButton.Configuration.CornerStyle.capsule(_:), v4);
  UIButton.Configuration.cornerStyle.setter();
  objc_super v15 = self;
  id v16 = [v15 tertiarySystemFillColor];
  UIButton.Configuration.baseBackgroundColor.setter();
  id v17 = [v15 systemIndigoColor];
  UIButton.Configuration.baseForegroundColor.setter();
  id v18 = [self preferredFontForTextStyle:UIFontTextStyleCaption2];
  Class isa = UIFont.withWeight(_:)(UIFontWeightSemibold).super.isa;

  id v20 = [self configurationWithFont:isa];
  NSString v21 = String._bridgeToObjectiveC()();
  id v22 = [self systemImageNamed:v21 withConfiguration:v20];

  UIButton.Configuration.image.setter();
  if (*((unsigned char *)v1 + OBJC_IVAR____TtC16MomentsUIService30MOSuggestionSheetJournalButton_singleCellAsset)) {
    uint64_t v23 = &UIContentSizeCategoryExtraLarge;
  }
  else {
    uint64_t v23 = &UIContentSizeCategoryAccessibilityMedium;
  }
  [v1 setMaximumContentSizeCategory:*v23];
  id v24 = [self mainBundle];
  v33._uint64_t countAndFlagsBits = 0xD00000000000002ELL;
  v33._object = (void *)0x80000001001E4170;
  v25._uint64_t countAndFlagsBits = 0x206C616E72756F4ALL;
  v25._object = (void *)0xEB00000000776F4ELL;
  v26._uint64_t countAndFlagsBits = 0;
  v26._object = (void *)0xE000000000000000;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v25, (Swift::String_optional)0, (NSBundle)v24, v26, v33);

  NSString v27 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v1 setAccessibilityLabel:v27];

  uint64_t v28 = v32;
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v3, v14, v32);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v3, 0, 1, v28);
  UIButton.configuration.setter();
  type metadata accessor for UIAction();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  id v29 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  [v1 addAction:v29 forControlEvents:64];

  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v28);
}

uint64_t type metadata accessor for MOSuggestionSheetJournalButton()
{
  return self;
}

void closure #1 in MOSuggestionSheetJournalButton.sharedInit()()
{
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = Strong;
    uint64_t v2 = (void (*)(void))(*(uint64_t (**)(void))((swift_isaMask & *Strong) + 0x60))();
    if (v2)
    {
      uint64_t v3 = (uint64_t)v2;
      v2();
      outlined consume of (@escaping @callee_guaranteed () -> ())?(v3);
    }
  }
}

void MOSuggestionSheetJournalButton.init(frame:)()
{
}

id MOSuggestionSheetJournalButton.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MOSuggestionSheetJournalButton();
  return [super dealloc];
}

uint64_t sub_10006D6C0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

unint64_t type metadata accessor for UIAction()
{
  unint64_t result = lazy cache variable for type metadata for UIAction;
  if (!lazy cache variable for type metadata for UIAction)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIAction);
  }
  return result;
}

uint64_t sub_10006D738()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void partial apply for closure #1 in MOSuggestionSheetJournalButton.sharedInit()()
{
}

id MOSuggestionCollectionViewHeader.init(frame:)(double a1, double a2, double a3, double a4)
{
  *(void *)&v4[OBJC_IVAR____TtC16MomentsUIService32MOSuggestionCollectionViewHeader_titleLabel] = 0;
  *(void *)&v4[OBJC_IVAR____TtC16MomentsUIService32MOSuggestionCollectionViewHeader_subTitleLabel] = 0;
  v14.receiver = v4;
  v14.super_class = (Class)type metadata accessor for MOSuggestionCollectionViewHeader();
  [super initWithFrame:a1, a2, a3, a4];
  uint64_t v10 = self;
  id v11 = v9;
  id v12 = [v10 secondarySystemBackgroundColor];
  [v11 setBackgroundColor:v12];

  return v11;
}

uint64_t type metadata accessor for MOSuggestionCollectionViewHeader()
{
  return self;
}

void MOSuggestionCollectionViewHeader.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC16MomentsUIService32MOSuggestionCollectionViewHeader_titleLabel] = 0;
  *(void *)&v0[OBJC_IVAR____TtC16MomentsUIService32MOSuggestionCollectionViewHeader_subTitleLabel] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall MOSuggestionCollectionViewHeader.layoutSubviews()()
{
  v25.receiver = v0;
  v25.super_class = (Class)type metadata accessor for MOSuggestionCollectionViewHeader();
  [super layoutSubviews];
  uint64_t v1 = OBJC_IVAR____TtC16MomentsUIService32MOSuggestionCollectionViewHeader_titleLabel;
  if (!*(void *)&v0[OBJC_IVAR____TtC16MomentsUIService32MOSuggestionCollectionViewHeader_titleLabel])
  {
    id v2 = [objc_allocWithZone((Class)UILabel) init];
    id v3 = [self mainBundle];
    v4._object = (void *)0x80000001001E41E0;
    v26._object = (void *)0x80000001001E41E0;
    v4._uint64_t countAndFlagsBits = 0xD000000000000019;
    v5._uint64_t countAndFlagsBits = 0;
    v5._object = (void *)0xE000000000000000;
    v26._uint64_t countAndFlagsBits = 0xD000000000000019;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v4, (Swift::String_optional)0, (NSBundle)v3, v5, v26);

    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v2 setText:v6];

    id v7 = [self boldSystemFontOfSize:15.0];
    [v2 setFont:v7];

    uint64_t v8 = self;
    id v9 = [v8 labelColor];
    [v2 setTextColor:v9];

    uint64_t v10 = *(void **)&v0[v1];
    *(void *)&v0[v1] = v2;
    id v11 = v2;

    [v0 addSubview:v11];
    [v11 setTranslatesAutoresizingMaskIntoConstraints:0];
    id v12 = self;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_1001DACA0;
    id v14 = [v11 topAnchor];
    id v15 = [v0 topAnchor];
    id v16 = [v14 constraintEqualToAnchor:v15];

    *(void *)(v13 + 32) = v16;
    id v17 = [v11 centerXAnchor];
    id v18 = [v0 centerXAnchor];
    id v19 = [v17 constraintEqualToAnchor:v18];

    *(void *)(v13 + 40) = v19;
    specialized Array._endMutation()();
    type metadata accessor for NSLayoutConstraint();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v12 activateConstraints:isa];

    id v21 = [v11 heightAnchor];
    id v22 = [v21 constraintEqualToConstant:50.0];

    [v22 setActive:1];
    id v23 = v11;
    id v24 = [v8 secondarySystemBackgroundColor];
    [v23 setBackgroundColor:v24];
  }
}

id MOSuggestionCollectionViewHeader.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MOSuggestionCollectionViewHeader();
  return [super dealloc];
}

uint64_t type metadata accessor for Constants()
{
  return self;
}

{
  return self;
}

{
  return self;
}

{
  return self;
}

{
  return self;
}

{
  return self;
}

{
  return self;
}

{
  return self;
}

{
  return self;
}

int64x2_t one-time initialization function for avatarBaseSize()
{
  int64x2_t result = vdupq_n_s64(0x4056000000000000uLL);
  static MOSuggestionAssetSnowglobeEffect.avatarBaseSize = (__int128)result;
  return result;
}

void one-time initialization function for avatarLayout()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[CGRect]>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1001DB6A0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_1001DA0F0;
  MOSuggestionInterstitialExpandableListViewCellConstants.init()();
  *(void *)(v1 + 32) = v2;
  *(void *)(v1 + 40) = v3;
  *(void *)(v1 + 48) = v4;
  *(void *)(v1 + 56) = v5;
  *(void *)(v0 + 32) = v1;
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1001DA390;
  MOSuggestionInterstitialExpandableListViewCellConstants.init()();
  *(void *)(v6 + 32) = v7;
  *(void *)(v6 + 40) = v8;
  *(void *)(v6 + 48) = v9;
  *(void *)(v6 + 56) = v10;
  MOSuggestionInterstitialExpandableListViewCellConstants.init()();
  *(void *)(v6 + 64) = v11;
  *(void *)(v6 + 72) = v12;
  *(void *)(v6 + 80) = v13;
  *(void *)(v6 + 88) = v14;
  *(void *)(v0 + 40) = v6;
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_1001DA740;
  MOSuggestionInterstitialExpandableListViewCellConstants.init()();
  *(void *)(v15 + 32) = v16;
  *(void *)(v15 + 40) = v17;
  uint64_t v18 = v16;
  uint64_t v86 = v17;
  uint64_t v87 = v16;
  uint64_t v19 = v17;
  *(void *)(v15 + 48) = v20;
  *(void *)(v15 + 56) = v21;
  uint64_t v22 = v20;
  uint64_t v23 = v21;
  MOSuggestionInterstitialExpandableListViewCellConstants.init()();
  uint64_t v91 = v24;
  *(void *)(v15 + 64) = v25;
  *(void *)(v15 + 72) = v26;
  uint64_t v27 = v25;
  uint64_t v96 = v26;
  uint64_t v97 = v25;
  uint64_t v28 = v26;
  *(void *)(v15 + 80) = v29;
  *(void *)(v15 + 88) = v24;
  uint64_t v30 = v29;
  uint64_t v95 = v29;
  MOSuggestionInterstitialExpandableListViewCellConstants.init()();
  uint64_t v89 = v32;
  uint64_t v90 = v31;
  uint64_t v88 = v33;
  uint64_t v35 = v34;
  *(void *)(v15 + 96) = v31;
  *(void *)(v15 + 104) = v32;
  *(void *)(v15 + 112) = v33;
  *(void *)(v15 + 120) = v34;
  uint64_t v94 = v34;
  *(void *)(v0 + 48) = v15;
  uint64_t v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = xmmword_1001DA100;
  *(void *)(v36 + 32) = v18;
  *(void *)(v36 + 40) = v19;
  uint64_t v82 = v23;
  uint64_t v83 = v22;
  *(void *)(v36 + 48) = v22;
  *(void *)(v36 + 56) = v23;
  *(void *)(v36 + 64) = v27;
  *(void *)(v36 + 72) = v28;
  *(void *)(v36 + 80) = v30;
  *(void *)(v36 + 88) = v91;
  *(void *)(v36 + 96) = v90;
  *(void *)(v36 + 104) = v89;
  *(void *)(v36 + 112) = v88;
  *(void *)(v36 + 120) = v35;
  MOSuggestionInterstitialExpandableListViewCellConstants.init()();
  uint64_t v38 = v37;
  uint64_t v40 = v39;
  uint64_t v92 = v42;
  uint64_t v93 = v41;
  *(void *)(v36 + 128) = v37;
  *(void *)(v36 + 136) = v39;
  uint64_t v84 = v39;
  uint64_t v85 = v37;
  *(void *)(v36 + 144) = v41;
  *(void *)(v36 + 152) = v42;
  *(void *)(v0 + 56) = v36;
  uint64_t v43 = swift_allocObject();
  *(_OWORD *)(v43 + 16) = xmmword_1001DB470;
  *(void *)(v43 + 32) = v87;
  *(void *)(v43 + 40) = v86;
  *(void *)(v43 + 48) = v22;
  *(void *)(v43 + 56) = v23;
  *(void *)(v43 + 64) = v97;
  *(void *)(v43 + 72) = v96;
  *(void *)(v43 + 80) = v95;
  *(void *)(v43 + 88) = v91;
  *(void *)(v43 + 96) = v90;
  *(void *)(v43 + 104) = v89;
  *(void *)(v43 + 112) = v88;
  *(void *)(v43 + 120) = v94;
  *(void *)(v43 + 128) = v38;
  *(void *)(v43 + 136) = v40;
  *(void *)(v43 + 144) = v93;
  *(void *)(v43 + 152) = v92;
  MOSuggestionInterstitialExpandableListViewCellConstants.init()();
  uint64_t v45 = v44;
  uint64_t v47 = v46;
  uint64_t v49 = v48;
  uint64_t v51 = v50;
  *(void *)(v43 + 160) = v44;
  *(void *)(v43 + 168) = v46;
  *(void *)(v43 + 176) = v48;
  *(void *)(v43 + 184) = v50;
  *(void *)(v0 + 64) = v43;
  uint64_t v52 = swift_allocObject();
  *(_OWORD *)(v52 + 16) = xmmword_1001DB6B0;
  *(void *)(v52 + 32) = v87;
  *(void *)(v52 + 40) = v86;
  *(void *)(v52 + 48) = v83;
  *(void *)(v52 + 56) = v82;
  *(void *)(v52 + 64) = v97;
  *(void *)(v52 + 72) = v96;
  *(void *)(v52 + 80) = v95;
  *(void *)(v52 + 88) = v91;
  *(void *)(v52 + 96) = v90;
  *(void *)(v52 + 104) = v89;
  *(void *)(v52 + 112) = v88;
  *(void *)(v52 + 120) = v94;
  *(void *)(v52 + 128) = v85;
  *(void *)(v52 + 136) = v84;
  *(void *)(v52 + 144) = v93;
  *(void *)(v52 + 152) = v92;
  *(void *)(v52 + 160) = v45;
  *(void *)(v52 + 168) = v47;
  *(void *)(v52 + 176) = v49;
  *(void *)(v52 + 184) = v51;
  MOSuggestionInterstitialExpandableListViewCellConstants.init()();
  *(void *)(v52 + 192) = v53;
  *(void *)(v52 + 200) = v54;
  *(void *)(v52 + 208) = v55;
  *(void *)(v52 + 216) = v56;
  *(void *)(v0 + 72) = v52;
  uint64_t v57 = swift_allocObject();
  *(_OWORD *)(v57 + 16) = xmmword_1001DB6A0;
  *(void *)(v57 + 32) = v87;
  *(void *)(v57 + 40) = v86;
  *(void *)(v57 + 48) = v83;
  *(void *)(v57 + 56) = v82;
  MOSuggestionInterstitialExpandableListViewCellConstants.init()();
  *(void *)(v57 + 64) = v58;
  *(void *)(v57 + 72) = v59;
  *(void *)(v57 + 80) = v60;
  *(void *)(v57 + 88) = v61;
  MOSuggestionInterstitialExpandableListViewCellConstants.init()();
  *(void *)(v57 + 96) = v62;
  *(void *)(v57 + 104) = v63;
  *(void *)(v57 + 112) = v64;
  *(void *)(v57 + 120) = v65;
  MOSuggestionInterstitialExpandableListViewCellConstants.init()();
  *(void *)(v57 + 128) = v66;
  *(void *)(v57 + 136) = v67;
  *(void *)(v57 + 144) = v68;
  *(void *)(v57 + 152) = v69;
  MOSuggestionInterstitialExpandableListViewCellConstants.init()();
  *(void *)(v57 + 160) = v70;
  *(void *)(v57 + 168) = v71;
  *(void *)(v57 + 176) = v72;
  *(void *)(v57 + 184) = v73;
  MOSuggestionInterstitialExpandableListViewCellConstants.init()();
  *(void *)(v57 + 192) = v74;
  *(void *)(v57 + 200) = v75;
  *(void *)(v57 + 208) = v76;
  *(void *)(v57 + 216) = v77;
  MOSuggestionInterstitialExpandableListViewCellConstants.init()();
  *(void *)(v57 + 224) = v78;
  *(void *)(v57 + 232) = v79;
  *(void *)(v57 + 240) = v80;
  *(void *)(v57 + 248) = v81;
  *(void *)(v0 + 80) = v57;
  static MOSuggestionAssetSnowglobeEffect.avatarLayout = (_UNKNOWN *)v0;
}

UIImage *UIImage.composedOf(with:rects:targetSize:backgroundColor:)(uint64_t a1, uint64_t a2, void *a3, CGFloat a4, CGFloat a5)
{
  UIGraphicsBeginImageContext(*(CGSize *)&a4);
  [a3 set];
  v28.origin.CGFloat x = 0.0;
  v28.origin.CGFloat y = 0.0;
  v28.size.CGFloat width = a4;
  v28.size.CGFloat height = a5;
  UIRectFill(v28);
  int64x2_t result = [v5 drawInRect:0.0, 0.0, a4, a5];
  unint64_t v12 = *(void *)(a2 + 16);
  if (v12)
  {
    if (serverManager._connectionProperties == (NSMutableDictionary *)-1)
    {
      unint64_t v13 = a1 & 0xC000000000000001;
      if ((a1 & 0xC000000000000001) != 0)
      {
LABEL_5:
        uint64_t v14 = type metadata accessor for Logger();
        uint64_t v15 = 0;
        uint64_t v16 = (double *)(a2 + 56);
        uint64_t v25 = v14;
        unint64_t v26 = v12;
        while (1)
        {
          __swift_project_value_buffer(v14, (uint64_t)static MOAngelLogger.assets);
          swift_bridgeObjectRetain_n();
          uint64_t v19 = Logger.logObject.getter();
          os_log_type_t v20 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v19, v20))
          {
            uint64_t v21 = swift_slowAlloc();
            uint64_t v27 = swift_slowAlloc();
            *(_DWORD *)uint64_t v21 = 136315138;
            uint64_t v22 = CGRect.debugDescription.getter();
            *(void *)(v21 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v27);
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v19, v20, "[Snowglobe] %s", (uint8_t *)v21, 0xCu);
            swift_arrayDestroy();
            unint64_t v12 = v26;
            swift_slowDealloc();
            uint64_t v14 = v25;
            swift_slowDealloc();

            if (!v13) {
              goto LABEL_12;
            }
          }
          else
          {

            swift_bridgeObjectRelease_n();
            if (!v13)
            {
LABEL_12:
              id v17 = *(id *)(a1 + 8 * v15 + 32);
              goto LABEL_7;
            }
          }
          id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_7:
          uint64_t v18 = v17;
          ++v15;
          [v17 drawInRect:*(v16 - 3), *(v16 - 2), *(v16 - 1), *v16];

          v16 += 4;
          if (v12 == v15) {
            goto LABEL_13;
          }
        }
      }
    }
    else
    {
      int64x2_t result = (UIImage *)swift_once();
      unint64_t v13 = a1 & 0xC000000000000001;
      if ((a1 & 0xC000000000000001) != 0) {
        goto LABEL_5;
      }
    }
    if (v12 <= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_5;
    }
    __break(1u);
  }
  else
  {
LABEL_13:
    uint64_t v24 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    return v24;
  }
  return result;
}

uint64_t specialized static MOSuggestionAssetSnowglobeEffect.layoutRectsFor(targetSize:count:)(uint64_t result, double a2, float64_t a3)
{
  uint64_t v3 = 7;
  if (result < 7) {
    uint64_t v3 = result;
  }
  uint64_t v4 = v3 - 1;
  if (__OFSUB__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    double v28 = a2;
    if (one-time initialization token for avatarLayout == -1) {
      goto LABEL_5;
    }
  }
  int64x2_t result = swift_once();
LABEL_5:
  uint64_t v5 = _swiftEmptyArrayStorage;
  if (v4 < *((void *)static MOSuggestionAssetSnowglobeEffect.avatarLayout + 2))
  {
    if (v4 < 0)
    {
      __break(1u);
      return result;
    }
    uint64_t v5 = (double *)*((void *)static MOSuggestionAssetSnowglobeEffect.avatarLayout + v4 + 4);
    swift_bridgeObjectRetain();
  }
  int64_t v6 = *((void *)v5 + 2);
  if (v6)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    if (one-time initialization token for avatarBaseSize != -1) {
      swift_once();
    }
    v7.f64[0] = v28;
    v7.f64[1] = a3;
    BOOL v8 = *((double *)&static MOSuggestionAssetSnowglobeEffect.avatarBaseSize + 1) > 0.0
      && *(double *)&static MOSuggestionAssetSnowglobeEffect.avatarBaseSize > 0.0;
    float64x2_t v9 = vdivq_f64(v7, (float64x2_t)static MOSuggestionAssetSnowglobeEffect.avatarBaseSize);
    BOOL v10 = v9.f64[0] < 100.0;
    if (v9.f64[1] >= 100.0) {
      BOOL v10 = 0;
    }
    uint64_t v11 = (float64x2_t *)(v5 + 6);
    BOOL v12 = !v10;
    __asm { FMOV            V4.2D, #0.5 }
    do
    {
      float64x2_t v18 = 0uLL;
      float64x2_t v19 = 0uLL;
      if (v8 && !v12)
      {
        float64x2_t v19 = vmulq_f64(v9, *v11);
        float64x2_t v18 = vaddq_f64(vmulq_f64(v9, v11[-1]), vmulq_f64(vsubq_f64(v7, v19), _Q4));
      }
      double v21 = _swiftEmptyArrayStorage[2];
      double v20 = _swiftEmptyArrayStorage[3];
      if (*(void *)&v21 >= *(void *)&v20 >> 1)
      {
        float64x2_t v27 = v9;
        float64x2_t v29 = v7;
        float64x2_t v24 = v18;
        float64x2_t v25 = _Q4;
        float64x2_t v23 = v19;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(*(void *)&v20 > 1uLL, *(void *)&v21 + 1, 1);
        float64x2_t v19 = v23;
        float64x2_t v18 = v24;
        _Q4 = v25;
        float64x2_t v9 = v27;
        float64x2_t v7 = v29;
      }
      *(void *)&_swiftEmptyArrayStorage[2] = *(void *)&v21 + 1;
      uint64_t v22 = &_swiftEmptyArrayStorage[4 * *(void *)&v21];
      *((float64x2_t *)v22 + 2) = v18;
      *((float64x2_t *)v22 + 3) = v19;
      v11 += 2;
      --v6;
    }
    while (v6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)_swiftEmptyArrayStorage;
}

uint64_t specialized static MOSuggestionAssetSnowglobeEffect.imageFor(images:targetSize:)(unint64_t a1, double a2, float64_t a3)
{
  unint64_t v5 = a1;
  unint64_t v6 = a1 >> 62;
  if (!(a1 >> 62))
  {
    if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10) < 8uLL)
    {
LABEL_3:
      swift_bridgeObjectRetain();
      goto LABEL_17;
    }
    swift_bridgeObjectRetain();
LABEL_5:
    if ((v5 & 0xC000000000000001) != 0)
    {
      type metadata accessor for UIImage();
      _ArrayBuffer._typeCheckSlowPath(_:)(0);
      _ArrayBuffer._typeCheckSlowPath(_:)(1);
      _ArrayBuffer._typeCheckSlowPath(_:)(2);
      _ArrayBuffer._typeCheckSlowPath(_:)(3);
      _ArrayBuffer._typeCheckSlowPath(_:)(4);
      _ArrayBuffer._typeCheckSlowPath(_:)(5);
      _ArrayBuffer._typeCheckSlowPath(_:)(6);
    }
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.subscript.getter();
      uint64_t v9 = v11;
      uint64_t v7 = v12;
      unint64_t v10 = v13;
      swift_bridgeObjectRelease_n();
      if ((v10 & 1) == 0) {
        goto LABEL_10;
      }
    }
    else
    {
      uint64_t v7 = 0;
      uint64_t v8 = v5 & 0xFFFFFFFFFFFFFF8;
      uint64_t v9 = (v5 & 0xFFFFFFFFFFFFFF8) + 32;
      unint64_t v10 = 15;
    }
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    uint64_t v14 = (double *)swift_dynamicCastClass();
    if (!v14)
    {
      swift_unknownObjectRelease();
      uint64_t v14 = _swiftEmptyArrayStorage;
    }
    uint64_t v15 = *((void *)v14 + 2);
    swift_release();
    if (__OFSUB__(v10 >> 1, v7))
    {
      __break(1u);
    }
    else if (v15 == (v10 >> 1) - v7)
    {
      unint64_t v5 = swift_dynamicCastClass();
      swift_unknownObjectRelease();
      if (!v5)
      {
        swift_unknownObjectRelease();
        unint64_t v5 = (unint64_t)_swiftEmptyArrayStorage;
      }
LABEL_17:
      if (!(v5 >> 62))
      {
        uint64_t v16 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_19:
        uint64_t v17 = specialized static MOSuggestionAssetSnowglobeEffect.layoutRectsFor(targetSize:count:)(v16, a2, a3);
        id v18 = [objc_allocWithZone((Class)UIImage) init];
        id v19 = [self clearColor];
        double v20 = UIImage.composedOf(with:rects:targetSize:backgroundColor:)(v5, v17, v19, a2, a3);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return (uint64_t)v20;
      }
LABEL_24:
      swift_bridgeObjectRetain();
      uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
    swift_unknownObjectRelease();
LABEL_10:
    unint64_t v5 = (unint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v8, v9, v7, v10);
    swift_unknownObjectRelease();
    goto LABEL_17;
  }
  swift_bridgeObjectRetain();
  uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v22 <= 7) {
    goto LABEL_3;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if ((result & 0x8000000000000000) == 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v23 < 7)
    {
      __break(1u);
      goto LABEL_24;
    }
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for MOSuggestionAssetSnowglobeEffect()
{
  return &type metadata for MOSuggestionAssetSnowglobeEffect;
}

unint64_t type metadata accessor for UIImage()
{
  unint64_t result = lazy cache variable for type metadata for UIImage;
  if (!lazy cache variable for type metadata for UIImage)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  }
  return result;
}

uint64_t MOSuggestionAssetVisualSubType.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t one-time initialization function for localizableStringKey(uint64_t a1)
{
  return one-time initialization function for localizableStringKey(a1, (uint64_t)&outlined read-only object #0 of one-time initialization function for localizableStringKey, (uint64_t)&unk_1002204C0, 26, (unint64_t *)&static MOSuggestionAssetVisualSubType.localizableStringKey);
}

uint64_t one-time initialization function for pluralLocalizableStringKey(uint64_t a1)
{
  return one-time initialization function for localizableStringKey(a1, (uint64_t)&outlined read-only object #0 of one-time initialization function for pluralLocalizableStringKey, (uint64_t)&unk_100220750, 2, (unint64_t *)&static MOSuggestionAssetVisualSubType.pluralLocalizableStringKey);
}

uint64_t one-time initialization function for localizableStringKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  unint64_t v6 = specialized Dictionary.init(dictionaryLiteral:)(a2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MOSuggestionAssetVisualSubType, String));
  uint64_t result = swift_arrayDestroy();
  *a5 = v6;
  return result;
}

uint64_t MOSuggestionAssetVisualSubType.localizableKeyWithCount(count:)(uint64_t a1, char a2)
{
  uint64_t v3 = type metadata accessor for String.LocalizationValue.StringInterpolation();
  __chkstk_darwin(v3 - 8);
  switch(a2)
  {
    case 1:
    case 5:
      String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v4._uint64_t countAndFlagsBits = 0;
      v4._object = (void *)0xE000000000000000;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v4);
      String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)();
      uint64_t v5 = 0x6D75626C4120;
      goto LABEL_15;
    case 2:
    case 3:
      String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v6._uint64_t countAndFlagsBits = 0;
      v6._object = (void *)0xE000000000000000;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v6);
      String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)();
      uint64_t v7 = 0x74736163646F5020;
      goto LABEL_5;
    case 4:
      String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v13._uint64_t countAndFlagsBits = 0;
      v13._object = (void *)0xE000000000000000;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v13);
      String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)();
      uint64_t v7 = 0x4920616964654D20;
      unint64_t v9 = 0xEC000000736D6574;
      break;
    case 6:
      String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v14._uint64_t countAndFlagsBits = 0;
      v14._object = (void *)0xE000000000000000;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v14);
      String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)();
      uint64_t v7 = 0x7374736974724120;
      unint64_t v9 = 0xE800000000000000;
      break;
    case 7:
    case 8:
      String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v8._uint64_t countAndFlagsBits = 0;
      v8._object = (void *)0xE000000000000000;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v8);
      String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)();
      uint64_t v7 = 0x74756F6B726F5720;
LABEL_5:
      unint64_t v9 = 0xE900000000000073;
      break;
    case 9:
      String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v15._uint64_t countAndFlagsBits = 0;
      v15._object = (void *)0xE000000000000000;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v15);
      String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)();
      uint64_t v7 = 0x74756F6B726F5720;
      uint64_t v16 = 0x6574756F5220;
      goto LABEL_27;
    case 10:
      String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v17._uint64_t countAndFlagsBits = 0;
      v17._object = (void *)0xE000000000000000;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v17);
      String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)();
      unint64_t v9 = 0x80000001001E42C0;
      uint64_t v7 = 0xD000000000000012;
      break;
    case 11:
      String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v18._uint64_t countAndFlagsBits = 0;
      v18._object = (void *)0xE000000000000000;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v18);
      String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)();
      uint64_t v7 = 0x656C706F655020;
      unint64_t v9 = 0xE700000000000000;
      break;
    case 12:
    case 13:
      String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v10._uint64_t countAndFlagsBits = 0;
      v10._object = (void *)0xE000000000000000;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v10);
      String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)();
      uint64_t v5 = 0x6F746F685020;
      goto LABEL_15;
    case 14:
      String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v19._uint64_t countAndFlagsBits = 0;
      v19._object = (void *)0xE000000000000000;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v19);
      String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)();
      uint64_t v5 = 0x6F6564695620;
LABEL_15:
      uint64_t v7 = v5 & 0xFFFFFFFFFFFFLL | 0x73000000000000;
      unint64_t v9 = 0xE700000000000000;
      break;
    case 15:
    case 16:
      String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v11._uint64_t countAndFlagsBits = 0;
      v11._object = (void *)0xE000000000000000;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v11);
      String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)();
      uint64_t v7 = 0x6F697461636F4C20;
      goto LABEL_25;
    case 17:
      String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v20._uint64_t countAndFlagsBits = 0;
      v20._object = (void *)0xE000000000000000;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v20);
      String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)();
      uint64_t v7 = 0x736B6C615720;
      unint64_t v9 = 0xE600000000000000;
      break;
    case 18:
      String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v21._uint64_t countAndFlagsBits = 0;
      v21._object = (void *)0xE000000000000000;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v21);
      String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)();
      uint64_t v7 = 0x736E755220;
      unint64_t v9 = 0xE500000000000000;
      break;
    case 19:
      String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v22._uint64_t countAndFlagsBits = 0;
      v22._object = (void *)0xE000000000000000;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v22);
      String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)();
      uint64_t v7 = 0x572026206E755220;
      unint64_t v9 = 0xEC000000736B6C61;
      break;
    case 20:
      String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v23._uint64_t countAndFlagsBits = 0;
      v23._object = (void *)0xE000000000000000;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v23);
      String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)();
      uint64_t v24 = 0x696B6C615720;
      goto LABEL_21;
    case 21:
      String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v25._uint64_t countAndFlagsBits = 0;
      v25._object = (void *)0xE000000000000000;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v25);
      String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)();
      uint64_t v24 = 0x696E6E755220;
LABEL_21:
      uint64_t v7 = v24 & 0xFFFFFFFFFFFFLL | 0x676E000000000000;
      unint64_t v9 = 0xEE00736165724120;
      break;
    case 22:
      String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v26._uint64_t countAndFlagsBits = 0;
      v26._object = (void *)0xE000000000000000;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v26);
      String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)();
      uint64_t v7 = 0xD000000000000018;
      unint64_t v9 = 0x80000001001E42A0;
      break;
    case 23:
      String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v27._uint64_t countAndFlagsBits = 0;
      v27._object = (void *)0xE000000000000000;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v27);
      String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)();
      uint64_t v7 = 0x7463656C66655220;
      unint64_t v9 = 0xEC000000736E6F69;
      break;
    case 24:
      String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v28._uint64_t countAndFlagsBits = 0;
      v28._object = (void *)0xE000000000000000;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v28);
      String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)();
      uint64_t v7 = 0x6F63492070704120;
LABEL_25:
      unint64_t v9 = 0xEA0000000000736ELL;
      break;
    case 25:
      String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v29._uint64_t countAndFlagsBits = 0;
      v29._object = (void *)0xE000000000000000;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v29);
      String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)();
      uint64_t v7 = 0x6F20657461745320;
      uint64_t v16 = 0x646E694D2066;
LABEL_27:
      unint64_t v9 = v16 & 0xFFFFFFFFFFFFLL | 0xEF73000000000000;
      break;
    default:
      String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v12._uint64_t countAndFlagsBits = 0;
      v12._object = (void *)0xE000000000000000;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v12);
      String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)();
      uint64_t v7 = 0x73676E6F5320;
      unint64_t v9 = 0xE600000000000000;
      break;
  }
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(*(Swift::String *)&v7);
  return String.LocalizationValue.init(stringInterpolation:)();
}

uint64_t one-time initialization function for assetTypeMapping()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(MOSuggestionAssetVisualSubType, MOSuggestionAssetsType)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1001DB6F0;
  *(unsigned char *)(inited + 32) = 0;
  uint64_t v1 = (void *)MOSuggestionAssetsTypeMediaCoverArt;
  *(void *)(inited + 40) = MOSuggestionAssetsTypeMediaCoverArt;
  *(unsigned char *)(inited + 48) = 1;
  *(void *)(inited + 56) = v1;
  *(unsigned char *)(inited + 64) = 2;
  *(void *)(inited + 72) = v1;
  *(unsigned char *)(inited + 80) = 3;
  *(void *)(inited + 88) = v1;
  *(unsigned char *)(inited + 96) = 4;
  *(void *)(inited + 104) = v1;
  *(unsigned char *)(inited + 112) = 5;
  *(void *)(inited + 120) = v1;
  *(unsigned char *)(inited + 128) = 6;
  *(void *)(inited + 136) = v1;
  *(unsigned char *)(inited + 144) = 7;
  uint64_t v2 = (void *)MOSuggestionAssetsTypeWorkout;
  *(void *)(inited + 152) = MOSuggestionAssetsTypeWorkout;
  *(unsigned char *)(inited + 160) = 8;
  *(void *)(inited + 168) = v2;
  *(unsigned char *)(inited + 176) = 9;
  *(void *)(inited + 184) = v2;
  *(unsigned char *)(inited + 192) = 10;
  uint64_t v37 = (void *)MOSuggestionAssetsTypeWorkoutGroup;
  *(void *)(inited + 200) = MOSuggestionAssetsTypeWorkoutGroup;
  *(unsigned char *)(inited + 208) = 11;
  uint64_t v36 = (void *)MOSuggestionAssetsTypeContactPhoto;
  *(void *)(inited + 216) = MOSuggestionAssetsTypeContactPhoto;
  *(unsigned char *)(inited + 224) = 12;
  uint64_t v35 = (void *)MOSuggestionAssetsTypePhoto;
  *(void *)(inited + 232) = MOSuggestionAssetsTypePhoto;
  *(unsigned char *)(inited + 240) = 14;
  uint64_t v34 = (void *)MOSuggestionAssetsTypeVideo;
  *(void *)(inited + 248) = MOSuggestionAssetsTypeVideo;
  *(unsigned char *)(inited + 256) = 13;
  uint64_t v33 = (void *)MOSuggestionAssetsTypeLivePhoto;
  *(void *)(inited + 264) = MOSuggestionAssetsTypeLivePhoto;
  *(unsigned char *)(inited + 272) = 15;
  uint64_t v3 = (void *)MOSuggestionAssetsTypeMultiPinMap;
  *(void *)(inited + 280) = MOSuggestionAssetsTypeMultiPinMap;
  *(unsigned char *)(inited + 288) = 16;
  Swift::String v4 = (void *)MOSuggestionAssetsTypeLocationPreview;
  *(void *)(inited + 296) = MOSuggestionAssetsTypeLocationPreview;
  *(unsigned char *)(inited + 304) = 20;
  uint64_t v5 = (void *)MOSuggestionAssetsTypeGenericMap;
  *(void *)(inited + 312) = MOSuggestionAssetsTypeGenericMap;
  *(unsigned char *)(inited + 320) = 21;
  *(void *)(inited + 328) = v5;
  *(unsigned char *)(inited + 336) = 22;
  *(void *)(inited + 344) = v5;
  *(unsigned char *)(inited + 352) = 17;
  Swift::String v6 = (void *)MOSuggestionAssetsTypeMotionActivity;
  *(void *)(inited + 360) = MOSuggestionAssetsTypeMotionActivity;
  *(unsigned char *)(inited + 368) = 18;
  *(void *)(inited + 376) = v6;
  *(unsigned char *)(inited + 384) = 19;
  *(void *)(inited + 392) = v6;
  *(unsigned char *)(inited + 400) = 23;
  uint64_t v7 = (void *)MOSuggestionAssetsTypeReflectionPrompt;
  *(void *)(inited + 408) = MOSuggestionAssetsTypeReflectionPrompt;
  *(unsigned char *)(inited + 416) = 25;
  Swift::String v8 = (void *)MOSuggestionAssetsTypeStateOfMindAsset;
  *(void *)(inited + 424) = MOSuggestionAssetsTypeStateOfMindAsset;
  id v9 = v1;
  id v10 = v2;
  id v11 = v5;
  id v12 = v6;
  id v13 = v9;
  Swift::String v14 = (void *)specialized Dictionary.init(dictionaryLiteral:)(inited);
  swift_setDeallocating();
  id v15 = v13;
  id v16 = v10;
  id v17 = v11;
  id v18 = v12;
  id v19 = v15;
  id v20 = v16;
  id v21 = v17;
  id v22 = v18;
  id v23 = v37;
  id v24 = v36;
  id v25 = v35;
  id v26 = v34;
  id v27 = v33;
  id v28 = v3;
  id v29 = v4;
  id v30 = v7;
  id v31 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MOSuggestionAssetVisualSubType, MOSuggestionAssetsType));
  uint64_t result = swift_arrayDestroy();
  static MOSuggestionAssetVisualSubType.assetTypeMapping = v14;
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance MOSuggestionAssetVisualSubType@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized MOSuggestionAssetVisualSubType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance MOSuggestionAssetVisualSubType(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t MOSuggestionAssetVisualSubType.singularLocalizedString.getter(uint64_t a1)
{
  return MOSuggestionAssetVisualSubType.singularLocalizedString.getter(a1, (uint64_t (*)(void))MOSuggestionAssetVisualSubType.singularLocalizableStringKey.getter, "(Singular) Unknown visual subtype: %ld");
}

uint64_t MOSuggestionAssetVisualSubType.singularLocalizableStringKey.getter(unsigned __int8 a1)
{
  if (one-time initialization token for localizableStringKey != -1) {
    swift_once();
  }
  uint64_t v2 = static MOSuggestionAssetVisualSubType.localizableStringKey;
  if (!*((void *)static MOSuggestionAssetVisualSubType.localizableStringKey + 2)) {
    return 0;
  }
  unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v4 & 1) == 0) {
    return 0;
  }
  uint64_t v5 = *(void *)(v2[7] + 16 * v3);
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t MOSuggestionAssetVisualSubType.pluralLocalizedString.getter(uint64_t a1)
{
  return MOSuggestionAssetVisualSubType.singularLocalizedString.getter(a1, (uint64_t (*)(void))MOSuggestionAssetVisualSubType.pluralLocalizableStringKey.getter, "(Plural) Unknown visual subtype: %ld");
}

uint64_t MOSuggestionAssetVisualSubType.singularLocalizedString.getter(uint64_t a1, uint64_t (*a2)(void), const char *a3)
{
  uint64_t v4 = a2();
  if (v5)
  {
    uint64_t v6 = v4;
    uint64_t v7 = v5;
    uint64_t v8 = StaticString.description.getter();
    id v10 = v9;
    id v11 = [self mainBundle];
    v20._object = v10;
    v12._uint64_t countAndFlagsBits = v6;
    v12._object = v7;
    v13._uint64_t countAndFlagsBits = 0;
    v13._object = (void *)0xE000000000000000;
    v20._uint64_t countAndFlagsBits = v8;
    uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v12, (Swift::String_optional)0, (NSBundle)v11, v13, v20)._countAndFlagsBits;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (serverManager._connectionProperties != (NSMutableDictionary *)-1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static MOAngelLogger.assets);
    id v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      id v18 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)id v18 = 134217984;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, a3, v18, 0xCu);
      swift_slowDealloc();
    }

    return 0;
  }
  return countAndFlagsBits;
}

uint64_t MOSuggestionAssetVisualSubType.pluralLocalizableStringKey.getter(unsigned __int8 a1)
{
  if (one-time initialization token for pluralLocalizableStringKey != -1) {
    swift_once();
  }
  uint64_t v2 = static MOSuggestionAssetVisualSubType.pluralLocalizableStringKey;
  if (*((void *)static MOSuggestionAssetVisualSubType.pluralLocalizableStringKey + 2)
    && (unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v4 & 1) != 0))
  {
    uint64_t v5 = *(void *)(v2[7] + 16 * v3);
    swift_bridgeObjectRetain();
  }
  else
  {
    if (one-time initialization token for localizableStringKey != -1) {
      swift_once();
    }
    uint64_t v6 = static MOSuggestionAssetVisualSubType.localizableStringKey;
    if (*((void *)static MOSuggestionAssetVisualSubType.localizableStringKey + 2)
      && (unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v8 & 1) != 0))
    {
      uint64_t v11 = *(void *)(v6[7] + 16 * v7);
      swift_bridgeObjectRetain();
      v9._uint64_t countAndFlagsBits = 115;
      v9._object = (void *)0xE100000000000000;
      String.append(_:)(v9);
      return v11;
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

Swift::String __swiftcall MOSuggestionAssetVisualSubType.localizedStringWithCount(_:)(Swift::Int a1)
{
  char v2 = v1;
  uint64_t v4 = type metadata accessor for Locale();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v5 - 8);
  MOSuggestionAssetVisualSubType.localizableKeyWithCount(count:)(a1, v2);
  static Locale.current.getter();
  uint64_t v6 = String.init(localized:table:bundle:locale:comment:)();
  result._object = v7;
  result._uint64_t countAndFlagsBits = v6;
  return result;
}

void *MOSuggestionAssetVisualSubType.assetType.getter(unsigned __int8 a1)
{
  if (one-time initialization token for assetTypeMapping != -1) {
    swift_once();
  }
  char v2 = static MOSuggestionAssetVisualSubType.assetTypeMapping;
  if (!*((void *)static MOSuggestionAssetVisualSubType.assetTypeMapping + 2)) {
    return 0;
  }
  unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v4 & 1) == 0) {
    return 0;
  }
  uint64_t v5 = *(void **)(v2[7] + 8 * v3);
  id v6 = v5;
  return v5;
}

unint64_t MOSuggestionAssetVisualSubType.init(assetType:mediaType:motionActivityType:)(void *a1, uint64_t a2, char a3, void *a4)
{
  return specialized MOSuggestionAssetVisualSubType.init(assetType:mediaType:motionActivityType:)(a1, a2, a3 & 1, a4);
}

uint64_t specialized formatSpecifier<A>(_:)()
{
  return 1684827173;
}

unint64_t specialized MOSuggestionAssetVisualSubType.init(rawValue:)(unint64_t result)
{
  if (result >= 0x1A) {
    return 26;
  }
  return result;
}

unint64_t specialized MOSuggestionAssetVisualSubType.init(assetType:mediaType:motionActivityType:)(void *a1, uint64_t a2, char a3, void *a4)
{
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;
  if (v8 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v10 == v11)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_15;
  }
  char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v13)
  {
LABEL_15:

    return 12;
  }
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;
  if (v14 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v16 == v17)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_17;
  }
  char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v19)
  {
LABEL_17:

    return 13;
  }
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v22 = v21;
  if (v20 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v22 == v23)
  {
    swift_bridgeObjectRelease_n();
LABEL_19:

    return 14;
  }
  char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v25) {
    goto LABEL_19;
  }
  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v28 = v27;
  if (v26 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v28 == v29)
  {
    swift_bridgeObjectRelease_n();
LABEL_24:

    return 15;
  }
  char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v30) {
    goto LABEL_24;
  }
  uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v33 = v32;
  if (v31 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v33 == v34)
  {
    swift_bridgeObjectRelease_n();
LABEL_29:

    return 10;
  }
  char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v35) {
    goto LABEL_29;
  }
  uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v38 = v37;
  if (v36 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v38 == v39)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_34;
  }
  char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v40)
  {
LABEL_34:
    if (a4)
    {
      uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v43 = v42;
      if (v41 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v43 == v44)
      {
        id v45 = a4;
        swift_bridgeObjectRelease_n();
LABEL_42:

        return 18;
      }
      char v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
      id v51 = a4;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v50) {
        goto LABEL_42;
      }
      uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v60 = v59;
      if (v58 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v60 == v61)
      {
        swift_bridgeObjectRelease_n();
LABEL_60:

        return 17;
      }
      char v69 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v69) {
        goto LABEL_60;
      }
      uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v78 = v77;
      if (v76 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v78 == v79)
      {
        id v80 = v51;

        swift_bridgeObjectRelease_n();
        return 19;
      }
      char v82 = _stringCompareWithSmolCheck(_:_:expecting:)();
      id v83 = v51;

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v82) {
        return 19;
      }
      return 26;
    }
    goto LABEL_48;
  }
  uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v48 = v47;
  if (v46 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v48 == v49)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v52 & 1) == 0)
    {
      uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v64 = v63;
      if (v62 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v64 == v65)
      {
        id v66 = a1;

        swift_bridgeObjectRelease_n();
        if (a3) {
          return 26;
        }
      }
      else
      {
        char v70 = _stringCompareWithSmolCheck(_:_:expecting:)();
        id v71 = a1;

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        if (v70 & 1) == 0 || (a3) {
          return 26;
        }
      }
      if ((unint64_t)(a2 - 1) < 8) {
        return 0x6050402011A0200uLL >> (8 * (a2 - 1));
      }
      return 26;
    }
  }
  if (!a4)
  {
LABEL_48:

    return 26;
  }
  uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v55 = v54;
  if (v53 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v55 == v56)
  {
    id v57 = a4;
    swift_bridgeObjectRelease_n();
LABEL_58:

    return 21;
  }
  char v67 = _stringCompareWithSmolCheck(_:_:expecting:)();
  id v68 = a4;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v67) {
    goto LABEL_58;
  }
  uint64_t v72 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v74 = v73;
  if (v72 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v74 == v75)
  {
    swift_bridgeObjectRelease_n();
LABEL_72:

    return 20;
  }
  char v81 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v81) {
    goto LABEL_72;
  }
  uint64_t v84 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v86 = v85;
  if (v84 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v86 == v87)
  {
    id v88 = v68;

    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v89 = _stringCompareWithSmolCheck(_:_:expecting:)();
    id v90 = v68;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v89 & 1) == 0) {
      return 26;
    }
  }
  return 22;
}

unint64_t lazy protocol witness table accessor for type MOSuggestionAssetVisualSubType and conformance MOSuggestionAssetVisualSubType()
{
  unint64_t result = lazy protocol witness table cache variable for type MOSuggestionAssetVisualSubType and conformance MOSuggestionAssetVisualSubType;
  if (!lazy protocol witness table cache variable for type MOSuggestionAssetVisualSubType and conformance MOSuggestionAssetVisualSubType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MOSuggestionAssetVisualSubType and conformance MOSuggestionAssetVisualSubType);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for MOSuggestionAssetVisualSubType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xE7) {
    goto LABEL_17;
  }
  if (a2 + 25 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 25) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 25;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 25;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 25;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x1A;
  int v8 = v6 - 26;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for MOSuggestionAssetVisualSubType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 25 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 25) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE6)
  {
    unsigned int v6 = ((a2 - 231) >> 8) + 1;
    *unint64_t result = a2 + 25;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10007081CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 25;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MOSuggestionAssetVisualSubType()
{
  return &type metadata for MOSuggestionAssetVisualSubType;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy16MomentsUIService30MOSuggestionAssetVisualSubTypeOSiG_AH_Sits5NeverOTg504_s16d11UIService30fghij38OSiACSiIgyydd_AC3key_Si5valuetAC_Sits5k130OIegnrzr_TR04_s16a11UIService42c16InterstitialListd17ViewModelC32assetef53TypesToCountString_07includeN09separatorSSSDyAA0cfjK4G29N36G_SbSStFZAH_SitAH_SitXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v25 = *(void *)(a1 + 16);
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  unint64_t result = (void *)specialized Dictionary.startIndex.getter(a1);
  uint64_t v4 = (uint64_t)result;
  uint64_t v6 = v25;
  uint64_t v5 = a1;
  uint64_t v7 = 0;
  uint64_t v8 = a1 + 64;
  uint64_t v9 = a1 + 80;
  while ((v4 & 0x8000000000000000) == 0 && v4 < 1 << *(unsigned char *)(v5 + 32))
  {
    unint64_t v11 = (unint64_t)v4 >> 6;
    if ((*(void *)(v8 + 8 * ((unint64_t)v4 >> 6)) & (1 << v4)) == 0) {
      goto LABEL_23;
    }
    if (*(_DWORD *)(v5 + 36) != v3) {
      goto LABEL_24;
    }
    char v12 = *(unsigned char *)(*(void *)(v5 + 48) + v4);
    uint64_t v13 = *(void *)(*(void *)(v5 + 56) + 8 * v4);
    unint64_t v15 = _swiftEmptyArrayStorage[2];
    unint64_t v14 = _swiftEmptyArrayStorage[3];
    if (v15 >= v14 >> 1)
    {
      uint64_t v23 = v8;
      uint64_t v24 = v3;
      uint64_t v22 = v9;
      unint64_t result = (void *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
      uint64_t v9 = v22;
      uint64_t v8 = v23;
      uint64_t v3 = v24;
      uint64_t v6 = v25;
      uint64_t v5 = a1;
    }
    _swiftEmptyArrayStorage[2] = v15 + 1;
    uint64_t v16 = &_swiftEmptyArrayStorage[2 * v15];
    *((unsigned char *)v16 + 32) = v12;
    v16[5] = v13;
    int64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    if (v4 >= v10) {
      goto LABEL_25;
    }
    uint64_t v17 = *(void *)(v8 + 8 * v11);
    if ((v17 & (1 << v4)) == 0) {
      goto LABEL_26;
    }
    if (*(_DWORD *)(v5 + 36) != v3) {
      goto LABEL_27;
    }
    unint64_t v18 = v17 & (-2 << (v4 & 0x3F));
    if (v18)
    {
      int64_t v10 = __clz(__rbit64(v18)) | v4 & 0xFFFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v19 = v11 + 1;
      unint64_t v20 = (unint64_t)(v10 + 63) >> 6;
      if (v11 + 1 < v20)
      {
        unint64_t v21 = *(void *)(v8 + 8 * v19);
        if (v21)
        {
LABEL_20:
          int64_t v10 = __clz(__rbit64(v21)) + (v19 << 6);
        }
        else
        {
          while (v20 - 2 != v11)
          {
            unint64_t v21 = *(void *)(v9 + 8 * v11++);
            if (v21)
            {
              unint64_t v19 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    ++v7;
    uint64_t v4 = v10;
    if (v7 == v6) {
      return _swiftEmptyArrayStorage;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay16MomentsUIService19MOAssetAndMediaTypeV_SitG_SSs5NeverOTg504_s16d11UIService19fghi21VSiSSIggyo_AC_SitSSs5j137OIegnrzr_TR04_s16a61UIService42MOSuggestionInterstitialListAssetViewModelC25assetf44SetToCountStringySSSo09NSCountedK0CFZSSAA015cdE13J0V_P16XEfU1_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v3 = (uint64_t *)(a1 + 56);
    do
    {
      uint64_t v4 = *(v3 - 2);
      char v5 = *((unsigned char *)v3 - 8);
      uint64_t v6 = *v3;
      id v7 = (id)*(v3 - 3);
      uint64_t v8 = specialized static MOSuggestionSheetAssetViewModel.assetTypeAsPluralString(assetAndMediaType:count:includeCount:)(v7, v4, v5, v6, 1);
      uint64_t v10 = v9;

      unint64_t v12 = _swiftEmptyArrayStorage[2];
      unint64_t v11 = _swiftEmptyArrayStorage[3];
      if (v12 >= v11 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
      }
      v3 += 4;
      _swiftEmptyArrayStorage[2] = v12 + 1;
      uint64_t v13 = &_swiftEmptyArrayStorage[2 * v12];
      v13[4] = v8;
      void v13[5] = v10;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t (*specialized Dictionary.subscript.modify(void *a1, uint64_t a2))()
{
  uint64_t v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = specialized Dictionary._Variant.subscript.modify(v4, a2);
  return Dictionary.subscript.modifyspecialized ;
}

uint64_t (*specialized Dictionary.subscript.modify(void *a1, unsigned __int8 a2))()
{
  uint64_t v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = specialized Dictionary._Variant.subscript.modify(v4, a2);
  return Dictionary.subscript.modifyspecialized ;
}

void Dictionary.subscript.modifyspecialized (void *a1)
{
  int64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 32))(*a1, 0);

  free(v1);
}

{
  void *v1;
  void *v2;
  uint64_t vars8;

  int64_t v1 = (void *)*a1;
  int v2 = *(void **)(*a1 + 32);
  (*(void (**)(void, void))(*a1 + 40))(*a1, 0);

  free(v1);
}

uint64_t (*specialized Dictionary.subscript.modify(void *a1, void *a2))()
{
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  v4[4] = a2;
  v4[5] = specialized Dictionary._Variant.subscript.modify(v4, a2);
  return Dictionary.subscript.modifyspecialized ;
}

uint64_t (*specialized Dictionary.subscript.modify(void *a1, void *a2, Swift::UInt a3, char a4))()
{
  uint64_t v8 = malloc(0x30uLL);
  *a1 = v8;
  v8[4] = a2;
  v8[5] = specialized Dictionary._Variant.subscript.modify(v8, a2, a3, a4 & 1);
  return Dictionary.subscript.modifyspecialized ;
}

uint64_t MOSuggestionInterstitialListAssetViewModel.__allocating_init(id:subViewModels:topLevelGroupHeading:dates:titles:icons:assetVisualSubType:selectable:isLoadingPlaceHolder:isFallback:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, char a10, char a11, char a12)
{
  uint64_t v17 = swift_allocObject();
  MOSuggestionInterstitialListAssetViewModel.init(id:subViewModels:topLevelGroupHeading:dates:titles:icons:assetVisualSubType:selectable:isLoadingPlaceHolder:isFallback:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  return v17;
}

uint64_t MOSuggestionInterstitialListAssetViewModel.groupAssetTypeAndCountDescription.getter()
{
  return MOSuggestionInterstitialListAssetViewModel._groupAssetTypeAndCountDescription(with:)(0);
}

BOOL MOSuggestionInterstitialListAssetViewModel.isTopLevelWithChildren.getter()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 176))();
  if (v1) {
    swift_bridgeObjectRelease();
  }
  return v1 != 0;
}

unint64_t MOSuggestionInterstitialListAssetViewModel.isSingleTopLevel.getter()
{
  unint64_t result = (*(uint64_t (**)(void))(*(void *)v0 + 272))();
  if (result)
  {
    if (result >> 62) {
      uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    }
    else {
      uint64_t v2 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v3 = swift_bridgeObjectRelease();
    if (v2 == 1)
    {
      (*(void (**)(uint64_t))(*(void *)v0 + 200))(v3);
      uint64_t v5 = v4;
      uint64_t v6 = swift_bridgeObjectRelease();
      if (v5)
      {
        if (!(*(uint64_t (**)(uint64_t))(*(void *)v0 + 176))(v6)) {
          return 1;
        }
        swift_bridgeObjectRelease();
      }
    }
    return 0;
  }
  return result;
}

Swift::Void __swiftcall MOSuggestionInterstitialListAssetViewModel.disallowSelection()()
{
  *(unsigned char *)(v0 + 90) = 0;
}

uint64_t MOSuggestionInterstitialListAssetViewModel.subViewModels.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MOSuggestionInterstitialListAssetViewModel.subViewModels.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*MOSuggestionInterstitialListAssetViewModel.subViewModels.modify())()
{
  return MOSuggestionMapSnapshotView.platterBlurView.modify;
}

uint64_t MOSuggestionInterstitialListAssetViewModel.topLevelGroupHeading.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MOSuggestionInterstitialListAssetViewModel.topLevelGroupHeading.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*MOSuggestionInterstitialListAssetViewModel.topLevelGroupHeading.modify())()
{
  return MOSuggestionMapSnapshotView.secondaryField.modify;
}

uint64_t MOSuggestionInterstitialListAssetViewModel.dates.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MOSuggestionInterstitialListAssetViewModel.dates.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 40) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*MOSuggestionInterstitialListAssetViewModel.dates.modify())()
{
  return MOSuggestionMapSnapshotView.secondaryField.modify;
}

uint64_t MOSuggestionInterstitialListAssetViewModel.titles.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MOSuggestionInterstitialListAssetViewModel.titles.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 48) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*MOSuggestionInterstitialListAssetViewModel.titles.modify())()
{
  return MOSuggestionMapSnapshotView.secondaryField.modify;
}

uint64_t MOSuggestionInterstitialListAssetViewModel.icons.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MOSuggestionInterstitialListAssetViewModel.icons.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 56) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*MOSuggestionInterstitialListAssetViewModel.icons.modify())()
{
  return MOSuggestionMapSnapshotView.secondaryField.modify;
}

uint64_t MOSuggestionInterstitialListAssetViewModel.topLevelShouldBeSkippedInSummary.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 64);
}

uint64_t MOSuggestionInterstitialListAssetViewModel.topLevelShouldBeSkippedInSummary.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 64) = a1;
  return result;
}

uint64_t (*MOSuggestionInterstitialListAssetViewModel.topLevelShouldBeSkippedInSummary.modify())()
{
  return MOSuggestionMapSnapshotView.secondaryField.modify;
}

uint64_t MOSuggestionInterstitialListAssetViewModel.assetVisualSubType.getter()
{
  return *(unsigned __int8 *)(v0 + 65);
}

uint64_t MOSuggestionInterstitialListAssetViewModel.id.getter()
{
  uint64_t v1 = *(void *)(v0 + 72);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MOSuggestionInterstitialListAssetViewModel.isLoadingPlaceHolder.getter()
{
  return *(unsigned __int8 *)(v0 + 88);
}

uint64_t MOSuggestionInterstitialListAssetViewModel.isFallback.getter()
{
  return *(unsigned __int8 *)(v0 + 89);
}

uint64_t MOSuggestionInterstitialListAssetViewModel.uniqueUUID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC16MomentsUIService42MOSuggestionInterstitialListAssetViewModel_uniqueUUID;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t MOSuggestionInterstitialListAssetViewModel.init(id:subViewModels:topLevelGroupHeading:dates:titles:icons:assetVisualSubType:selectable:isLoadingPlaceHolder:isFallback:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, char a10, char a11, char a12)
{
  *(unsigned char *)(v12 + 64) = 0;
  *(_OWORD *)(v12 + 48) = 0u;
  *(_OWORD *)(v12 + 16) = 0u;
  *(_OWORD *)(v12 + 32) = 0u;
  *(unsigned char *)(v12 + 90) = 1;
  UUID.init()();
  swift_beginAccess();
  *(void *)(v12 + 16) = a3;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(void *)(v12 + 24) = a4;
  *(void *)(v12 + 32) = a5;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(void *)(v12 + 40) = a6;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(void *)(v12 + 48) = a7;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(void *)(v12 + 56) = a8;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v12 + 65) = a9;
  *(void *)(v12 + 72) = a1;
  *(void *)(v12 + 80) = a2;
  *(unsigned char *)(v12 + 90) = a10;
  *(unsigned char *)(v12 + 88) = a11;
  *(unsigned char *)(v12 + 89) = a12;
  if (a12 & 1) != 0 || (a11) {
    *(unsigned char *)(v12 + 90) = 0;
  }
  return v12;
}

uint64_t MOSuggestionInterstitialListAssetViewModel.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t static MOSuggestionInterstitialListAssetViewModel.== infix(_:_:)()
{
  return static UUID.== infix(_:_:)();
}

uint64_t MOSuggestionInterstitialListAssetViewModel.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC16MomentsUIService42MOSuggestionInterstitialListAssetViewModel_uniqueUUID;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t MOSuggestionInterstitialListAssetViewModel.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC16MomentsUIService42MOSuggestionInterstitialListAssetViewModel_uniqueUUID;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

Swift::Int MOSuggestionInterstitialListAssetViewModel.hashValue.getter()
{
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(*(void *)v0 + 352))(v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance MOSuggestionInterstitialListAssetViewModel()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 360))();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MOSuggestionInterstitialListAssetViewModel()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 352))();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MOSuggestionInterstitialListAssetViewModel()
{
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(**(void **)v0 + 352))(v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MOSuggestionInterstitialListAssetViewModel()
{
  return static UUID.== infix(_:_:)();
}

uint64_t MOSuggestionInterstitialListAssetViewModel.isSelectable.getter()
{
  return *(unsigned __int8 *)(v0 + 90);
}

uint64_t MOSuggestionInterstitialListAssetViewModel.hasIdentifiersSelected(_:)(uint64_t a1)
{
  unint64_t v3 = (*(uint64_t (**)(void))(*v1 + 176))();
  if (v3)
  {
    unint64_t v4 = v3;
    unint64_t v5 = v3 & 0xFFFFFFFFFFFFFF8;
    if (v3 >> 62) {
      goto LABEL_65;
    }
    for (uint64_t i = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10); i; uint64_t i = _CocoaArrayWrapper.endIndex.getter())
    {
      unint64_t v48 = v4;
      uint64_t v49 = i;
      if ((v4 & 0xC000000000000001) != 0)
      {
        uint64_t v7 = 0;
        uint64_t v8 = a1 + 56;
        while (1)
        {
          uint64_t v9 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          if (__OFADD__(v7++, 1)) {
            break;
          }
          if (*(void *)(a1 + 16))
          {
            uint64_t v12 = *(void *)(v9 + 72);
            uint64_t v11 = *(void *)(v9 + 80);
            Hasher.init(_seed:)();
            swift_bridgeObjectRetain();
            String.hash(into:)();
            Swift::Int v13 = Hasher._finalize()();
            uint64_t v14 = -1 << *(unsigned char *)(a1 + 32);
            unint64_t v5 = v13 & ~v14;
            if ((*(void *)(v8 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
            {
              uint64_t v15 = *(void *)(a1 + 48);
              uint64_t v16 = (void *)(v15 + 16 * v5);
              BOOL v17 = *v16 == v12 && v16[1] == v11;
              if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_unknownObjectRelease();
                return 1;
              }
              uint64_t v18 = ~v14;
              unint64_t v5 = (v5 + 1) & ~v14;
              if ((*(void *)(v8 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
              {
                unint64_t v19 = (void *)(v15 + 16 * v5);
                BOOL v20 = *v19 == v12 && v19[1] == v11;
                if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                  goto LABEL_60;
                }
                for (unint64_t j = v5 + 1; ; unint64_t j = v22 + 1)
                {
                  unint64_t v22 = j & v18;
                  if (((*(void *)(v8 + (((j & v18) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (j & v18)) & 1) == 0) {
                    break;
                  }
                  uint64_t v23 = (void *)(v15 + 16 * v22);
                  BOOL v24 = *v23 == v12 && v23[1] == v11;
                  if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                    goto LABEL_60;
                  }
                }
              }
              swift_bridgeObjectRelease();
              swift_unknownObjectRelease();
              unint64_t v4 = v48;
              uint64_t i = v49;
            }
            else
            {
              swift_bridgeObjectRelease();
              swift_unknownObjectRelease();
              uint64_t i = v49;
            }
          }
          else
          {
            swift_unknownObjectRelease();
          }
          if (v7 == i) {
            goto LABEL_66;
          }
        }
        __break(1u);
      }
      else
      {
        unint64_t v28 = 0;
        unint64_t v46 = v5;
        unint64_t v47 = v4 + 32;
        unint64_t v4 = a1 + 56;
        while (v28 < *(void *)(v5 + 16))
        {
          if (*(void *)(a1 + 16))
          {
            uint64_t v29 = *(void *)(v47 + 8 * v28);
            uint64_t v31 = *(void *)(v29 + 72);
            uint64_t v30 = *(void *)(v29 + 80);
            Hasher.init(_seed:)();
            swift_retain();
            swift_bridgeObjectRetain();
            String.hash(into:)();
            Swift::Int v32 = Hasher._finalize()();
            uint64_t v33 = -1 << *(unsigned char *)(a1 + 32);
            unint64_t v34 = v32 & ~v33;
            if ((*(void *)(v4 + ((v34 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v34))
            {
              uint64_t v35 = *(void *)(a1 + 48);
              uint64_t v36 = (void *)(v35 + 16 * v34);
              BOOL v37 = *v36 == v31 && v36[1] == v30;
              if (v37 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
LABEL_60:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_release();
                return 1;
              }
              uint64_t v38 = ~v33;
              unint64_t v39 = (v34 + 1) & ~v33;
              if ((*(void *)(v4 + ((v39 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v39))
              {
                char v40 = (void *)(v35 + 16 * v39);
                BOOL v41 = *v40 == v31 && v40[1] == v30;
                if (v41 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                  goto LABEL_60;
                }
                for (unint64_t k = v39 + 1; ; unint64_t k = v43 + 1)
                {
                  unint64_t v43 = k & v38;
                  if (((*(void *)(v4 + (((k & v38) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (k & v38)) & 1) == 0) {
                    break;
                  }
                  uint64_t v44 = (void *)(v35 + 16 * v43);
                  BOOL v45 = *v44 == v31 && v44[1] == v30;
                  if (v45 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                    goto LABEL_60;
                  }
                }
              }
              swift_bridgeObjectRelease();
              swift_release();
              uint64_t i = v49;
            }
            else
            {
              swift_bridgeObjectRelease();
              swift_release();
            }
            unint64_t v5 = v46;
          }
          if (++v28 == i) {
            goto LABEL_66;
          }
        }
      }
      __break(1u);
LABEL_65:
      ;
    }
LABEL_66:
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    uint64_t v25 = v1[9];
    uint64_t v26 = v1[10];
    swift_bridgeObjectRetain();
    LOBYTE(v25) = specialized Set.contains(_:)(v25, v26, a1);
    swift_bridgeObjectRelease();
    return v25 & 1;
  }
}

uint64_t MOSuggestionInterstitialListAssetViewModel.hasConsistentSubArrays.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v0 + 224);
  uint64_t v3 = v2();
  if (!v3) {
    goto LABEL_12;
  }
  uint64_t v4 = v3;
  uint64_t v5 = (*(uint64_t (**)(void))(*(void *)v0 + 272))();
  if (!v5) {
    goto LABEL_11;
  }
  unint64_t v6 = v5;
  uint64_t v7 = (*(uint64_t (**)(void))(*(void *)v0 + 248))();
  if (!v7)
  {
    swift_bridgeObjectRelease();
LABEL_11:
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v4 + 16);
  swift_bridgeObjectRelease();
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v9 != v10) {
    goto LABEL_11;
  }
  uint64_t v11 = *(void *)(v8 + 16);
  swift_bridgeObjectRelease();
  if (v9 == v11) {
    return 1;
  }
LABEL_12:
  if (serverManager._connectionProperties != (NSMutableDictionary *)-1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static MOAngelLogger.assets);
  swift_retain_n();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136315650;
    if (v2())
    {
      type metadata accessor for MOSuggestionSheetAssetDateRange(0);
      uint64_t v17 = Array.debugDescription.getter();
      unint64_t v19 = v18;
      swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v19 = 0xE300000000000000;
      uint64_t v17 = 7104878;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    uint64_t v20 = swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2080;
    if ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 272))(v20))
    {
      type metadata accessor for MOSuggestionSheetImage();
      uint64_t v21 = Array.debugDescription.getter();
      unint64_t v23 = v22;
      swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v23 = 0xE300000000000000;
      uint64_t v21 = 7104878;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v23, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    uint64_t v24 = swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 22) = 2080;
    if ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 248))(v24))
    {
      uint64_t v25 = Array.debugDescription.getter();
      unint64_t v27 = v26;
      swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v27 = 0xE300000000000000;
      uint64_t v25 = 7104878;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v27, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "[MOSuggestionInterstitialListAssetViewModel] inconsistent sub arrays dates=%s, icons=%s, titles=%s", (uint8_t *)v16, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  return 0;
}

void *MOSuggestionInterstitialListAssetViewModel.DOT_SEPARATOR.unsafeMutableAddressor()
{
  return &static MOSuggestionInterstitialListAssetViewModel.DOT_SEPARATOR;
}

void one-time initialization function for TIME_SEPARATOR()
{
  id v0 = [self mainBundle];
  v4._object = (void *)0x80000001001E4490;
  v1._uint64_t countAndFlagsBits = 2108704;
  v1._object = (void *)0xE300000000000000;
  v2._uint64_t countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v4._uint64_t countAndFlagsBits = 0xD000000000000034;
  Swift::String v3 = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v4);

  static MOSuggestionInterstitialListAssetViewModel.TIME_SEPARATOR = (__int128)v3;
}

long long *MOSuggestionInterstitialListAssetViewModel.TIME_SEPARATOR.unsafeMutableAddressor()
{
  if (one-time initialization token for TIME_SEPARATOR != -1) {
    swift_once();
  }
  return &static MOSuggestionInterstitialListAssetViewModel.TIME_SEPARATOR;
}

uint64_t static MOSuggestionInterstitialListAssetViewModel.TIME_SEPARATOR.getter()
{
  return static MOSuggestionInterstitialListAssetViewModel.TIME_SEPARATOR.getter(&one-time initialization token for TIME_SEPARATOR, (uint64_t *)&static MOSuggestionInterstitialListAssetViewModel.TIME_SEPARATOR);
}

void one-time initialization function for COMMA_SEPARATOR()
{
  id v0 = [self mainBundle];
  v4._object = (void *)0x80000001001E44D0;
  v1._uint64_t countAndFlagsBits = 8236;
  v1._object = (void *)0xE200000000000000;
  v2._uint64_t countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v4._uint64_t countAndFlagsBits = 0xD000000000000017;
  Swift::String v3 = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v4);

  static MOSuggestionInterstitialListAssetViewModel.COMMA_SEPARATOR = (__int128)v3;
}

long long *MOSuggestionInterstitialListAssetViewModel.COMMA_SEPARATOR.unsafeMutableAddressor()
{
  if (one-time initialization token for COMMA_SEPARATOR != -1) {
    swift_once();
  }
  return &static MOSuggestionInterstitialListAssetViewModel.COMMA_SEPARATOR;
}

uint64_t static MOSuggestionInterstitialListAssetViewModel.COMMA_SEPARATOR.getter()
{
  return static MOSuggestionInterstitialListAssetViewModel.TIME_SEPARATOR.getter(&one-time initialization token for COMMA_SEPARATOR, (uint64_t *)&static MOSuggestionInterstitialListAssetViewModel.COMMA_SEPARATOR);
}

uint64_t static MOSuggestionInterstitialListAssetViewModel.TIME_SEPARATOR.getter(void *a1, uint64_t *a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = *a2;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t MOSuggestionInterstitialListAssetViewModel._groupAssetTypeAndCountDescription(with:)(unint64_t a1)
{
  Swift::String v2 = (void *)v1;
  uint64_t v4 = type metadata accessor for Locale();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for String.LocalizationValue();
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 176))(v6);
  if (!v7)
  {
LABEL_4:
    int v9 = *(unsigned __int8 *)(v1 + 65);
    if (v9 == 26) {
      return 0;
    }
    BOOL v13 = 0;
    if (a1)
    {
      uint64_t v11 = *(void *)(v1 + 72);
      uint64_t v12 = v2[10];
      swift_bridgeObjectRetain();
      LOBYTE(v11) = specialized Set.contains(_:)(v11, v12, a1);
      swift_bridgeObjectRelease();
      if ((v11 & 1) == 0) {
        BOOL v13 = 1;
      }
    }
    (*(void (**)(BOOL))(*v2 + 304))(v13);
    MOSuggestionAssetVisualSubType.localizableKeyWithCount(count:)(1, v9);
    static Locale.current.getter();
    return String.init(localized:table:bundle:locale:comment:)();
  }
  unint64_t v8 = v7;
  if ((*(unsigned __int8 *)(v1 + 65) | 0x10) == 0x1A)
  {
    swift_bridgeObjectRelease();
    goto LABEL_4;
  }
  unint64_t v14 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)_swiftEmptyArrayStorage);
  id v68 = (void *)v14;
  char v67 = &_swiftEmptySetSingleton;
  if (v8 >> 62) {
    goto LABEL_47;
  }
  uint64_t v15 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v15)
  {
LABEL_48:
    swift_bridgeObjectRelease();
    if (*(void *)(v14 + 16)) {
      goto LABEL_41;
    }
    goto LABEL_49;
  }
LABEL_11:
  if (v15 < 1) {
    goto LABEL_88;
  }
  unint64_t v14 = 0;
  unint64_t v16 = v8 & 0xC000000000000001;
  unint64_t v63 = v8 & 0xC000000000000001;
  unint64_t v64 = v8;
  do
  {
    if (v16)
    {
      uint64_t v17 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v17 = *(void *)(v8 + 8 * v14 + 32);
      swift_retain();
    }
    int v18 = *(unsigned __int8 *)(v17 + 65);
    if (v18 == 26) {
      goto LABEL_14;
    }
    specialized Set._Variant.insert(_:)(v66, *(unsigned __int8 *)(v17 + 65));
    if (a1)
    {
      uint64_t v19 = *(void *)(v17 + 72);
      uint64_t v20 = *(void *)(v17 + 80);
      swift_bridgeObjectRetain();
      LOBYTE(v19) = specialized Set.contains(_:)(v19, v20, a1);
      swift_bridgeObjectRelease();
      if ((v19 & 1) == 0) {
        goto LABEL_14;
      }
    }
    uint64_t v21 = v68;
    if (v68[2])
    {
      specialized __RawDictionaryStorage.find<A>(_:)(v18);
      if (v22)
      {
        uint64_t v24 = specialized Dictionary.subscript.modify(v66, v18);
        if ((*(unsigned char *)(v23 + 8) & 1) == 0)
        {
          if (__OFADD__(*(void *)v23, 1)) {
            goto LABEL_46;
          }
          ++*(void *)v23;
        }
        ((void (*)(void *, void))v24)(v66, 0);
LABEL_14:
        swift_release();
        goto LABEL_15;
      }
    }
    unint64_t v8 = (unint64_t)v2;
    Swift::String v2 = (void *)v15;
    unint64_t v25 = a1;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v66[0] = v21;
    a1 = specialized __RawDictionaryStorage.find<A>(_:)(v18);
    uint64_t v28 = v21[2];
    BOOL v29 = (v27 & 1) == 0;
    uint64_t v30 = v28 + v29;
    if (__OFADD__(v28, v29))
    {
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      swift_bridgeObjectRetain();
      uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v15) {
        goto LABEL_48;
      }
      goto LABEL_11;
    }
    char v31 = v27;
    if (v21[3] >= v30)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        unint64_t v34 = (void *)v66[0];
        if ((v27 & 1) == 0) {
          goto LABEL_37;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        unint64_t v34 = (void *)v66[0];
        if ((v31 & 1) == 0) {
          goto LABEL_37;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v30, isUniquelyReferenced_nonNull_native);
      unint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)(v18);
      if ((v31 & 1) != (v33 & 1)) {
        goto LABEL_89;
      }
      a1 = v32;
      unint64_t v34 = (void *)v66[0];
      if ((v31 & 1) == 0)
      {
LABEL_37:
        v34[(a1 >> 6) + 8] |= 1 << a1;
        *(unsigned char *)(v34[6] + a1) = v18;
        *(void *)(v34[7] + 8 * a1) = 1;
        uint64_t v35 = v34[2];
        BOOL v36 = __OFADD__(v35, 1);
        uint64_t v37 = v35 + 1;
        if (v36) {
          goto LABEL_45;
        }
        _OWORD v34[2] = v37;
        goto LABEL_39;
      }
    }
    *(void *)(v34[7] + 8 * a1) = 1;
LABEL_39:
    id v68 = v34;
    swift_release();
    swift_bridgeObjectRelease();
    a1 = v25;
    uint64_t v15 = (uint64_t)v2;
    Swift::String v2 = (void *)v8;
    unint64_t v16 = v63;
    unint64_t v8 = v64;
LABEL_15:
    ++v14;
  }
  while (v15 != v14);
  swift_bridgeObjectRelease();
  unint64_t v14 = (unint64_t)v68;
  if (v68[2])
  {
LABEL_41:
    swift_bridgeObjectRelease();
    (*(void (**)(void))(*v2 + 304))(0);
LABEL_82:
    uint64_t v61 = swift_bridgeObjectRetain();
    uint64_t v10 = specialized static MOSuggestionInterstitialListAssetViewModel.assetVisualSubTypesToCountString(_:includeCount:separator:)(v61, 1, 0x20A280E220, 0xA500000000000000);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v10;
  }
LABEL_49:
  (*(void (**)(uint64_t))(*v2 + 304))(1);
  int64_t v38 = 0;
  unint64_t v39 = v67;
  uint64_t v65 = v67 + 56;
  uint64_t v40 = 1 << v67[32];
  uint64_t v41 = -1;
  if (v40 < 64) {
    uint64_t v41 = ~(-1 << v40);
  }
  unint64_t v42 = v41 & *((void *)v67 + 7);
  int64_t v43 = (unint64_t)(v40 + 63) >> 6;
  while (2)
  {
    if (v42)
    {
      unint64_t v44 = __clz(__rbit64(v42));
      v42 &= v42 - 1;
      unint64_t v45 = v44 | (v38 << 6);
    }
    else
    {
      int64_t v46 = v38 + 1;
      if (__OFADD__(v38, 1)) {
        goto LABEL_86;
      }
      if (v46 >= v43)
      {
LABEL_81:
        id v68 = (void *)v14;
        swift_release();
        goto LABEL_82;
      }
      unint64_t v47 = *(void *)&v65[8 * v46];
      ++v38;
      if (!v47)
      {
        int64_t v38 = v46 + 1;
        if (v46 + 1 >= v43) {
          goto LABEL_81;
        }
        unint64_t v47 = *(void *)&v65[8 * v38];
        if (!v47)
        {
          int64_t v38 = v46 + 2;
          if (v46 + 2 >= v43) {
            goto LABEL_81;
          }
          unint64_t v47 = *(void *)&v65[8 * v38];
          if (!v47)
          {
            int64_t v48 = v46 + 3;
            if (v48 >= v43) {
              goto LABEL_81;
            }
            unint64_t v47 = *(void *)&v65[8 * v48];
            if (!v47)
            {
              while (1)
              {
                int64_t v38 = v48 + 1;
                if (__OFADD__(v48, 1)) {
                  goto LABEL_87;
                }
                if (v38 >= v43) {
                  goto LABEL_81;
                }
                unint64_t v47 = *(void *)&v65[8 * v38];
                ++v48;
                if (v47) {
                  goto LABEL_69;
                }
              }
            }
            int64_t v38 = v48;
          }
        }
      }
LABEL_69:
      unint64_t v42 = (v47 - 1) & v47;
      unint64_t v45 = __clz(__rbit64(v47)) + (v38 << 6);
    }
    unsigned __int8 v49 = *(unsigned char *)(*((void *)v39 + 6) + v45);
    char v50 = swift_isUniquelyReferenced_nonNull_native();
    v66[0] = v14;
    unint64_t v52 = specialized __RawDictionaryStorage.find<A>(_:)(v49);
    uint64_t v53 = *(void *)(v14 + 16);
    BOOL v54 = (v51 & 1) == 0;
    uint64_t v55 = v53 + v54;
    if (!__OFADD__(v53, v54))
    {
      char v56 = v51;
      if (*(void *)(v14 + 24) >= v55)
      {
        if (v50)
        {
          unint64_t v14 = v66[0];
          if ((v51 & 1) == 0) {
            goto LABEL_77;
          }
        }
        else
        {
          specialized _NativeDictionary.copy()();
          unint64_t v14 = v66[0];
          if ((v56 & 1) == 0) {
            goto LABEL_77;
          }
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v55, v50);
        unint64_t v57 = specialized __RawDictionaryStorage.find<A>(_:)(v49);
        if ((v56 & 1) != (v58 & 1)) {
          goto LABEL_89;
        }
        unint64_t v52 = v57;
        unint64_t v14 = v66[0];
        if ((v56 & 1) == 0)
        {
LABEL_77:
          *(void *)(v14 + 8 * (v52 >> 6) + 64) |= 1 << v52;
          *(unsigned char *)(*(void *)(v14 + 48) + v52) = v49;
          *(void *)(*(void *)(v14 + 56) + 8 * v52) = 0;
          uint64_t v59 = *(void *)(v14 + 16);
          BOOL v36 = __OFADD__(v59, 1);
          uint64_t v60 = v59 + 1;
          if (v36) {
            goto LABEL_85;
          }
          *(void *)(v14 + 16) = v60;
          goto LABEL_53;
        }
      }
      *(void *)(*(void *)(v14 + 56) + 8 * v52) = 0;
LABEL_53:
      swift_bridgeObjectRelease();
      continue;
    }
    break;
  }
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
LABEL_89:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t static MOSuggestionInterstitialListAssetViewModel.assetTypeSetToCountString(_:)(void *a1)
{
  id v1 = a1;
  Swift::String v2 = specialized Sequence.compactMap<A>(_:)(v1, v1);

  uint64_t v6 = v2;
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v6, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew(), specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
  swift_bridgeObjectRelease();
  uint64_t v3 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay16MomentsUIService19MOAssetAndMediaTypeV_SitG_SSs5NeverOTg504_s16d11UIService19fghi21VSiSSIggyo_AC_SitSSs5j137OIegnrzr_TR04_s16a61UIService42MOSuggestionInterstitialListAssetViewModelC25assetf44SetToCountStringySSSo09NSCountedK0CFZSSAA015cdE13J0V_P16XEfU1_Tf3nnnpf_nTf1cn_n((uint64_t)v6);
  swift_release();
  uint64_t v6 = v3;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v4 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t MOSuggestionInterstitialListAssetViewModel.groupAssetTypeAndCountDescription(selectedAssetIdentifiers:)(unint64_t a1)
{
  uint64_t v2 = MOSuggestionInterstitialListAssetViewModel._groupAssetTypeAndCountDescription(with:)(a1);
  (*(void (**)(uint64_t))(*(void *)v1 + 208))(v2);
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)v1 + 200);

  return v3();
}

uint64_t MOSuggestionInterstitialListAssetViewModel.singleFirstTitleAndDate.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MOSuggestionSheetAssetDateRange?);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for MOSuggestionSheetAssetDateRange(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned int v9 = v0[65];
  if (v9 > 0x19) {
    goto LABEL_9;
  }
  if (((1 << v9) & 0x20080F7) == 0
    || (uint64_t v6 = MOSuggestionInterstitialListAssetViewModel.firstTitleAndDate.getter(), !v10))
  {
    if (v9 == 11)
    {
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 248))(v6);
      if (v12)
      {
        if (*(void *)(v12 + 16))
        {
          uint64_t v11 = *(void *)(v12 + 32);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          return v11;
        }
        swift_bridgeObjectRelease();
      }
      return 0;
    }
LABEL_9:
    uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 224))(v6);
    if (v13)
    {
      if (*(void *)(v13 + 16))
      {
        outlined init with copy of MOSuggestionSheetAssetDateRange(v13 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), (uint64_t)v3, type metadata accessor for MOSuggestionSheetAssetDateRange);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v3, 0, 1, v4);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1, 1, v4);
      }
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) != 1)
      {
        outlined init with take of MOSuggestionSheetAssetDateRange((uint64_t)v3, (uint64_t)v8, type metadata accessor for MOSuggestionSheetAssetDateRange);
        uint64_t v11 = specialized MOSuggestionInterstitialListAssetViewModel.singleDateRangeRepresentation(_:)((uint64_t)v8);
        outlined destroy of MOSuggestionSheetAssetDateRange((uint64_t)v8);
        return v11;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1, 1, v4);
    }
    outlined destroy of Any?((uint64_t)v3, &demangling cache variable for type metadata for MOSuggestionSheetAssetDateRange?);
    return 0;
  }
  return v6;
}

uint64_t MOSuggestionInterstitialListAssetViewModel.firstTitleAndDate.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MOSuggestionSheetAssetDateRange?);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for MOSuggestionSheetAssetDateRange(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  unint64_t v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 224))(v6);
  if (!v9)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1, 1, v4);
LABEL_7:
    outlined destroy of Any?((uint64_t)v3, &demangling cache variable for type metadata for MOSuggestionSheetAssetDateRange?);
    return 0;
  }
  if (*(void *)(v9 + 16))
  {
    outlined init with copy of MOSuggestionSheetAssetDateRange(v9 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), (uint64_t)v3, type metadata accessor for MOSuggestionSheetAssetDateRange);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v3, 0, 1, v4);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1, 1, v4);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1) {
    goto LABEL_7;
  }
  outlined init with take of MOSuggestionSheetAssetDateRange((uint64_t)v3, (uint64_t)v8, type metadata accessor for MOSuggestionSheetAssetDateRange);
  uint64_t v12 = specialized MOSuggestionInterstitialListAssetViewModel.singleDateRangeRepresentation(_:)((uint64_t)v8);
  unint64_t v14 = v13;
  if (!v13)
  {
    outlined destroy of MOSuggestionSheetAssetDateRange((uint64_t)v8);
    return 0;
  }
  uint64_t v15 = v12;
  unint64_t v16 = (void *)(*(uint64_t (**)(void))(*(void *)v0 + 248))();
  if (v16)
  {
    if (v16[2])
    {
      uint64_t v18 = v16[4];
      uint64_t v17 = v16[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v21[0] = v18;
      v21[1] = v17;
      swift_bridgeObjectRetain();
      v19._uint64_t countAndFlagsBits = 0x20A280E220;
      v19._object = (void *)0xA500000000000000;
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v20._uint64_t countAndFlagsBits = v15;
      v20._object = v14;
      String.append(_:)(v20);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v10 = v21[0];
      outlined destroy of MOSuggestionSheetAssetDateRange((uint64_t)v8);
      return v10;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  outlined destroy of MOSuggestionSheetAssetDateRange((uint64_t)v8);
  return 0;
}

uint64_t MOSuggestionInterstitialListAssetViewModel.topLevelSubtitleString.getter()
{
  if ((*(unsigned __int8 *)(v0 + 65) | 4) == 0xF) {
    return MOSuggestionInterstitialListAssetViewModel.concactenatedTitles.getter();
  }
  else {
    return MOSuggestionInterstitialListAssetViewModel.toplevelDateRangeString.getter();
  }
}

uint64_t MOSuggestionInterstitialListAssetViewModel.toplevelDateRangeString.getter()
{
  uint64_t v1 = type metadata accessor for Calendar();
  uint64_t v54 = *(void *)(v1 - 8);
  uint64_t v55 = v1;
  __chkstk_darwin(v1);
  uint64_t v53 = (char *)&v47 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v51 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  unint64_t v52 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  char v56 = (char *)&v47 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MOSuggestionSheetAssetDateRange?);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for MOSuggestionSheetAssetDateRange(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v15);
  Swift::String v20 = (char *)&v47 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v23 = (char *)&v47 - v22;
  uint64_t v24 = __chkstk_darwin(v21);
  unint64_t v26 = (char *)&v47 - v25;
  if (v0[65] - 17 > 1)
  {
    uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 224))(v24);
    BOOL v29 = (void *)v28;
    if (!v28) {
      return 0;
    }
    uint64_t v50 = v6;
    uint64_t v30 = *(void *)(v28 + 16);
    if (!v30)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    unsigned __int8 v49 = (void (*)(char *, char *, uint64_t))((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    outlined init with copy of MOSuggestionSheetAssetDateRange((uint64_t)v49 + v28, (uint64_t)v26, type metadata accessor for MOSuggestionSheetAssetDateRange);
    if (v30 == 1)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v57 = v29;
      swift_bridgeObjectRetain();
      specialized MutableCollection<>.sort(by:)(&v57);
      swift_bridgeObjectRelease();
      uint64_t v31 = v57[2];
      if (v31)
      {
        uint64_t v48 = (uint64_t)v49 + (void)v57;
        unsigned __int8 v49 = (void (*)(char *, char *, uint64_t))type metadata accessor for MOSuggestionSheetAssetDateRange;
        outlined init with copy of MOSuggestionSheetAssetDateRange(v48, (uint64_t)v23, type metadata accessor for MOSuggestionSheetAssetDateRange);
        outlined init with copy of MOSuggestionSheetAssetDateRange(v48 + *(void *)(v14 + 72) * (v31 - 1), (uint64_t)v12, (uint64_t (*)(void))v49);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v12, 0, 1, v13);
        swift_release();
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) != 1)
        {
          outlined init with take of MOSuggestionSheetAssetDateRange((uint64_t)v12, (uint64_t)v20, type metadata accessor for MOSuggestionSheetAssetDateRange);
          uint64_t v34 = v50;
          uint64_t v33 = v51;
          unsigned __int8 v49 = *(void (**)(char *, char *, uint64_t))(v51 + 16);
          v49(v56, v23, v50);
          outlined init with copy of Date?((uint64_t)&v20[*(int *)(v13 + 20)], (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for Date?);
          outlined init with copy of MOSuggestionSheetAssetDateRange((uint64_t)v20, (uint64_t)v17, type metadata accessor for MOSuggestionSheetAssetDateRange);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v5, 1, v34) == 1)
          {
            uint64_t v35 = (uint64_t)v52;
            uint64_t v36 = v34;
            uint64_t v37 = v33;
            v49(v52, v17, v36);
            outlined destroy of MOSuggestionSheetAssetDateRange((uint64_t)v17);
            outlined destroy of Any?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for Date?);
            uint64_t v39 = v54;
            uint64_t v38 = v55;
          }
          else
          {
            outlined destroy of MOSuggestionSheetAssetDateRange((uint64_t)v17);
            uint64_t v35 = (uint64_t)v52;
            (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v52, v5, v34);
            uint64_t v39 = v54;
            uint64_t v38 = v55;
            uint64_t v37 = v33;
          }
          uint64_t v40 = v53;
          static Calendar.current.getter();
          uint64_t v41 = (uint64_t)v56;
          char v42 = Calendar.isDate(_:inSameDayAs:)();
          (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v38);
          int64_t v43 = (void (**)(uint64_t, uint64_t))(v37 + 8);
          if (v42) {
            uint64_t v44 = specialized MOSuggestionInterstitialListAssetViewModel.timeRangeWithSameDayRepresentation(startTime:endTime:)(v41, v35);
          }
          else {
            uint64_t v44 = specialized MOSuggestionInterstitialListAssetViewModel.timeRangeWithDifferentDaysRepresentation(startTime:endTime:)();
          }
          uint64_t v27 = v44;
          unint64_t v45 = *v43;
          uint64_t v46 = v50;
          (*v43)(v35, v50);
          v45(v41, v46);
          outlined destroy of MOSuggestionSheetAssetDateRange((uint64_t)v20);
          outlined destroy of MOSuggestionSheetAssetDateRange((uint64_t)v23);
          goto LABEL_14;
        }
        outlined destroy of MOSuggestionSheetAssetDateRange((uint64_t)v23);
        outlined destroy of Any?((uint64_t)v12, &demangling cache variable for type metadata for MOSuggestionSheetAssetDateRange?);
      }
      else
      {
        swift_release();
      }
    }
    uint64_t v27 = specialized MOSuggestionInterstitialListAssetViewModel.singleDateRangeRepresentation(_:)((uint64_t)v26);
LABEL_14:
    outlined destroy of MOSuggestionSheetAssetDateRange((uint64_t)v26);
    return v27;
  }
  return MOSuggestionInterstitialListAssetViewModel.singleFirstTitleAndDate.getter();
}

uint64_t MOSuggestionInterstitialListAssetViewModel.concactenatedTitles.getter()
{
  unint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 176))();
  uint64_t v2 = v1;
  if (v1)
  {
    if (v1 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
      if (v3) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v3 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v3)
      {
LABEL_4:
        if (v3 < 1)
        {
          __break(1u);
          goto LABEL_33;
        }
        uint64_t v4 = 0;
        uint64_t v5 = _swiftEmptyArrayStorage;
        do
        {
          if ((v2 & 0xC000000000000001) != 0)
          {
            uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            uint64_t v6 = *(void *)(v2 + 8 * v4 + 32);
            swift_retain();
          }
          uint64_t v7 = (void *)(*(uint64_t (**)(void))(*(void *)v6 + 248))();
          if (v7)
          {
            if (v7[2])
            {
              uint64_t v9 = v7[4];
              uint64_t v8 = v7[5];
              swift_bridgeObjectRetain();
              swift_release();
              swift_bridgeObjectRelease();
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
              }
              unint64_t v11 = v5[2];
              unint64_t v10 = v5[3];
              if (v11 >= v10 >> 1) {
                uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v5);
              }
              _OWORD v5[2] = v11 + 1;
              uint64_t v12 = &v5[2 * v11];
              v12[4] = v9;
              v12[5] = v8;
            }
            else
            {
              swift_release();
              swift_bridgeObjectRelease();
            }
          }
          else
          {
            swift_release();
          }
          ++v4;
        }
        while (v3 != v4);
LABEL_22:
        swift_bridgeObjectRelease_n();
        id v13 = [self mainBundle];
        v14._uint64_t countAndFlagsBits = 0xD000000000000021;
        v24._object = (void *)0x80000001001E4350;
        v14._object = (void *)0x80000001001E4320;
        v15._uint64_t countAndFlagsBits = 0x26204025202C4025;
        v15._object = (void *)0xED000065726F6D20;
        v24._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
        NSLocalizedString(_:tableName:bundle:value:comment:)(v14, (Swift::String_optional)0, (NSBundle)v13, v15, v24);

        unint64_t v16 = v5[2];
        if (v16 > 2)
        {
          uint64_t v18 = v5[4];
          uint64_t v17 = v5[5];
          uint64_t v20 = v5[6];
          uint64_t v19 = v5[7];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
          uint64_t v21 = swift_allocObject();
          *(_OWORD *)(v21 + 16) = xmmword_1001DA390;
          *(void *)(v21 + 56) = &type metadata for String;
          unint64_t v22 = lazy protocol witness table accessor for type String and conformance String();
          *(void *)(v21 + 32) = v18;
          *(void *)(v21 + 40) = v17;
          *(void *)(v21 + 96) = &type metadata for String;
          *(void *)(v21 + 104) = v22;
          *(void *)(v21 + 64) = v22;
          *(void *)(v21 + 72) = v20;
          *(void *)(v21 + 80) = v19;
          uint64_t v2 = static String.localizedStringWithFormat(_:_:)();
          swift_bridgeObjectRelease();
LABEL_29:
          swift_bridgeObjectRelease();
          return v2;
        }
        swift_bridgeObjectRelease();
        if (v16 != 2)
        {
          if (!v5[2])
          {
            swift_bridgeObjectRelease();
            return 0;
          }
          uint64_t v2 = v5[4];
          swift_bridgeObjectRetain();
          goto LABEL_29;
        }
        if (one-time initialization token for COMMA_SEPARATOR == -1)
        {
LABEL_26:
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
          lazy protocol witness table accessor for type [String] and conformance [A]();
          uint64_t v2 = BidirectionalCollection<>.joined(separator:)();
          goto LABEL_29;
        }
LABEL_33:
        swift_once();
        goto LABEL_26;
      }
    }
    uint64_t v5 = _swiftEmptyArrayStorage;
    goto LABEL_22;
  }
  return v2;
}

uint64_t MOSuggestionInterstitialListAssetViewModel.subLevelDateRangeString.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MOSuggestionSheetAssetDateRange?);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for MOSuggestionSheetAssetDateRange(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 224))(v6);
  if (v9)
  {
    if (*(void *)(v9 + 16))
    {
      outlined init with copy of MOSuggestionSheetAssetDateRange(v9 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), (uint64_t)v3, type metadata accessor for MOSuggestionSheetAssetDateRange);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v3, 0, 1, v4);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1, 1, v4);
    }
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) != 1)
    {
      outlined init with take of MOSuggestionSheetAssetDateRange((uint64_t)v3, (uint64_t)v8, type metadata accessor for MOSuggestionSheetAssetDateRange);
      uint64_t v10 = specialized MOSuggestionInterstitialListAssetViewModel.singleDateRangeRepresentation(_:)((uint64_t)v8);
      outlined destroy of MOSuggestionSheetAssetDateRange((uint64_t)v8);
      return v10;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1, 1, v4);
  }
  outlined destroy of Any?((uint64_t)v3, &demangling cache variable for type metadata for MOSuggestionSheetAssetDateRange?);
  return 0;
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void *))
{
  uint64_t v6 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = a2(v6);
  }
  uint64_t v7 = *(void *)(v6 + 16);
  v9[0] = v6 + 32;
  v9[1] = v7;
  uint64_t result = a3(v9);
  *a1 = v6;
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  void v9[2];

  uint64_t v6 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = a2(v6);
  }
  uint64_t v7 = *(void *)(v6 + 16);
  v9[0] = v6 + 32;
  v9[1] = v7;
  uint64_t result = a3(v9);
  *a1 = v6;
  return result;
}

Swift::Int specialized MutableCollection<>.sort(by:)(void **a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for MOSuggestionSheetAssetDateRange(0) - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = (void *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v3);
  }
  uint64_t v4 = v3[2];
  v6[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  *a1 = v3;
  return result;
}

{
  void *v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
  }
  uint64_t v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

{
  void *v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = (void *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  }
  uint64_t v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v21 = result;
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v5 = *a4;
    uint64_t v6 = *a4 + 32 * a3 + 24;
LABEL_6:
    uint64_t v7 = v21;
    uint64_t v8 = v6;
    while (1)
    {
      uint64_t v9 = (long long *)(v8 - 56);
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v12 = v11;
      if (v10 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v12 == v13)
      {
        Swift::Int result = swift_bridgeObjectRelease_n();
LABEL_5:
        ++v4;
        v6 += 32;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_6;
      }
      char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      Swift::Int result = swift_bridgeObjectRelease();
      if ((v15 & 1) == 0) {
        goto LABEL_5;
      }
      if (!v5) {
        break;
      }
      long long v17 = *v9;
      long long v16 = *(_OWORD *)(v8 - 40);
      *(void *)(v8 - 32) = *(void *)v8;
      v8 -= 32;
      Swift::Int result = *(void *)(v8 + 8);
      uint64_t v18 = *(void *)(v8 + 16);
      char v19 = *(unsigned char *)(v8 + 24);
      void v9[2] = v17;
      v9[3] = v16;
      *(void *)(v8 - 24) = result;
      *(void *)(v8 - 16) = v18;
      *(unsigned char *)(v8 - 8) = v19;
      if (v4 == ++v7) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  if (a3 != a2)
  {
    uint64_t v5 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 8 * a3 - 8;
    uint64_t v13 = result;
LABEL_4:
    uint64_t v9 = *(void *)(v7 + 8 * v5);
    uint64_t v10 = (uint64_t *)v8;
    while (1)
    {
      long long v16 = v9;
      char v15 = *v10;
      swift_retain();
      swift_retain();
      uint64_t v11 = closure #1 in MOEventBundle.typeSortedAssetReferencesForInterstitial.getter(&v16, &v15);
      swift_release();
      Swift::Int result = swift_release();
      if (v4) {
        break;
      }
      if (v11)
      {
        if (!v7)
        {
          __break(1u);
          return result;
        }
        uint64_t v12 = *v10;
        uint64_t v9 = v10[1];
        *uint64_t v10 = v9;
        v10[1] = v12;
        --v10;
        if (v5 != ++v6) {
          continue;
        }
      }
      ++v5;
      v8 += 8;
      uint64_t v6 = v13;
      if (v5 != a2) {
        goto LABEL_4;
      }
      return result;
    }
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  double v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  id v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v24;
  void *v25;
  unsigned char v26[40];
  long long v27;
  long long v28;
  char *v29;

  Swift::String v24 = result;
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v5 = *a4;
    uint64_t v6 = (void *)(*a4 + 8 * a3 - 8);
    BOOL v29 = (char *)&type metadata for Any + 8;
LABEL_5:
    uint64_t v7 = *(void *)(v5 + 8 * v4);
    uint64_t v8 = v24;
    uint64_t v25 = v6;
    while (1)
    {
      uint64_t v9 = *v6;
      uint64_t v10 = *(void **)(v7 + 16);
      swift_retain();
      swift_retain();
      uint64_t v11 = [v10 rankingDictionary];
      uint64_t v12 = 0.0;
      if (v11)
      {
        uint64_t v13 = v11;
        Swift::String v14 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

        AnyHashable.init<A>(_:)();
        if (*(void *)(v14 + 16)
          && (char v15 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v26), (v16 & 1) != 0))
        {
          outlined init with copy of Any(*(void *)(v14 + 56) + 32 * v15, (uint64_t)&v27);
        }
        else
        {
          uint64_t v27 = 0u;
          uint64_t v28 = 0u;
        }
        swift_bridgeObjectRelease();
        outlined destroy of AnyHashable((uint64_t)v26);
        if (*((void *)&v28 + 1))
        {
          if (swift_dynamicCast()) {
            uint64_t v12 = 1.67436463e243;
          }
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v27, &demangling cache variable for type metadata for Any?);
        }
      }
      long long v17 = [*(id *)(v9 + 16) rankingDictionary];
      if (v17)
      {
        uint64_t v18 = v17;
        char v19 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

        AnyHashable.init<A>(_:)();
        if (*(void *)(v19 + 16)
          && (uint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v26), (v21 & 1) != 0))
        {
          outlined init with copy of Any(*(void *)(v19 + 56) + 32 * v20, (uint64_t)&v27);
        }
        else
        {
          uint64_t v27 = 0u;
          uint64_t v28 = 0u;
        }
        swift_bridgeObjectRelease();
        outlined destroy of AnyHashable((uint64_t)v26);
        if (*((void *)&v28 + 1))
        {
          if (swift_dynamicCast())
          {
            swift_release();
            Swift::Int result = swift_release();
            if (v12 <= 1.67436463e243) {
              goto LABEL_4;
            }
            goto LABEL_26;
          }
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v27, &demangling cache variable for type metadata for Any?);
        }
      }
      swift_release();
      Swift::Int result = swift_release();
      if (v12 <= 0.0) {
        goto LABEL_4;
      }
LABEL_26:
      if (!v5)
      {
        __break(1u);
        return result;
      }
      unint64_t v22 = *v6;
      uint64_t v7 = v6[1];
      void *v6 = v7;
      v6[1] = v22;
      --v6;
      if (v4 == ++v8)
      {
LABEL_4:
        ++v4;
        uint64_t v6 = v25 + 1;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }
    }
  }
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(unsigned __int8 *__src, unsigned __int8 *a2, unint64_t a3, unsigned __int8 *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 15;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 4;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 15;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 4;
  Swift::String v24 = __src;
  uint64_t v23 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst) {
        memmove(__dst, a2, 16 * v13);
      }
      long long v16 = &v4[16 * v13];
      unint64_t v22 = v16;
      Swift::String v24 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        long long v17 = (unsigned __int8 *)(a3 - 16);
        uint64_t v18 = v6;
        while (1)
        {
          char v19 = v17 + 16;
          unsigned int v20 = *(v18 - 16);
          v18 -= 16;
          if (*(v16 - 16) >= v20)
          {
            unint64_t v22 = v16 - 16;
            if (v19 < v16 || v17 >= v16 || v19 != v16) {
              *(_OWORD *)long long v17 = *((_OWORD *)v16 - 1);
            }
            uint64_t v18 = v6;
            v16 -= 16;
            if (v6 <= v7) {
              goto LABEL_42;
            }
          }
          else
          {
            if (v19 != v6 || v17 >= v6) {
              *(_OWORD *)long long v17 = *(_OWORD *)v18;
            }
            Swift::String v24 = v18;
            if (v18 <= v7) {
              goto LABEL_42;
            }
          }
          v17 -= 16;
          uint64_t v6 = v18;
          if (v16 <= v4) {
            goto LABEL_42;
          }
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst) {
      memmove(__dst, __src, 16 * v10);
    }
    Swift::String v14 = &v4[16 * v10];
    unint64_t v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        if (*v6 >= *v4)
        {
          if (v7 != v4) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v4;
          }
          v4 += 16;
          uint64_t v23 = v4;
          char v15 = v6;
        }
        else
        {
          char v15 = v6 + 16;
          if (v7 < v6 || v7 >= v15 || v7 != v6) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
          }
        }
        v7 += 16;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      Swift::String v24 = v7;
    }
LABEL_42:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *a1, char *__src, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = __src;
  uint64_t v7 = __src - a1;
  uint64_t v8 = __src - a1 + 31;
  if (__src - a1 >= 0) {
    uint64_t v8 = __src - a1;
  }
  uint64_t v9 = v8 >> 5;
  uint64_t v10 = a3 - (void)__src;
  uint64_t v11 = a3 - (void)__src + 31;
  if ((uint64_t)(a3 - (void)__src) >= 0) {
    uint64_t v11 = a3 - (void)__src;
  }
  uint64_t v12 = v11 >> 5;
  uint64_t v41 = a1;
  uint64_t v40 = __dst;
  if (v9 >= v11 >> 5)
  {
    if (v10 >= -31)
    {
      if (__dst != __src || &__src[32 * v12] <= __dst) {
        memmove(__dst, __src, 32 * v12);
      }
      Swift::String v24 = &v4[32 * v12];
      uint64_t v39 = v24;
      uint64_t v41 = v6;
      if (a1 < v6 && v10 >= 32)
      {
        uint64_t v25 = (char *)(a3 - 32);
        unint64_t v26 = v6;
        uint64_t v37 = v4;
        do
        {
          v26 -= 32;
          uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v29 = v28;
          if (v27 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v29 == v30) {
            char v32 = 0;
          }
          else {
            char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
          }
          uint64_t v33 = v25 + 32;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v32)
          {
            if (v33 != v6 || v25 >= v6)
            {
              long long v34 = *((_OWORD *)v26 + 1);
              *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
              *((_OWORD *)v25 + 1) = v34;
            }
            uint64_t v41 = v26;
          }
          else
          {
            uint64_t v39 = v24 - 32;
            if (v33 < v24 || v25 >= v24 || v33 != v24)
            {
              long long v35 = *((_OWORD *)v24 - 1);
              *(_OWORD *)uint64_t v25 = *((_OWORD *)v24 - 2);
              *((_OWORD *)v25 + 1) = v35;
            }
            unint64_t v26 = v6;
            v24 -= 32;
          }
          if (v26 <= a1) {
            break;
          }
          v25 -= 32;
          uint64_t v6 = v26;
        }
        while (v24 > v37);
      }
LABEL_54:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v41, (const void **)&v40, &v39);
      return 1;
    }
  }
  else if (v7 >= -31)
  {
    if (__dst != a1 || &a1[32 * v9] <= __dst) {
      memmove(__dst, a1, 32 * v9);
    }
    uint64_t v13 = &v4[32 * v9];
    uint64_t v39 = v13;
    if ((unint64_t)v6 < a3 && v7 >= 32)
    {
      Swift::String v14 = a1;
      while (1)
      {
        uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v17 = v16;
        if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v17 == v18) {
          break;
        }
        char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v20 & 1) == 0) {
          goto LABEL_23;
        }
        uint64_t v21 = v6 + 32;
        if (v14 < v6 || v14 >= v21 || v14 != v6)
        {
          long long v22 = *((_OWORD *)v6 + 1);
          *(_OWORD *)Swift::String v14 = *(_OWORD *)v6;
          *((_OWORD *)v14 + 1) = v22;
        }
LABEL_26:
        v14 += 32;
        if (v4 < v13)
        {
          uint64_t v6 = v21;
          if ((unint64_t)v21 < a3) {
            continue;
          }
        }
        uint64_t v41 = v14;
        goto LABEL_54;
      }
      swift_bridgeObjectRelease_n();
LABEL_23:
      if (v14 != v4)
      {
        long long v23 = *((_OWORD *)v4 + 1);
        *(_OWORD *)Swift::String v14 = *(_OWORD *)v4;
        *((_OWORD *)v14 + 1) = v23;
      }
      v4 += 32;
      uint64_t v40 = v4;
      uint64_t v21 = v6;
      goto LABEL_26;
    }
    goto LABEL_54;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t (*specialized Dictionary._Variant.subscript.modify(void *a1, uint64_t a2))()
{
  uint64_t v4 = malloc(0x50uLL);
  *a1 = v4;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4[8] = specialized Dictionary._Variant.asNative.modify(v4);
  v4[9] = specialized _NativeDictionary.subscript.modify(v4 + 4, a2, isUniquelyReferenced_nonNull_native);
  return Dictionary._Variant.subscript.modifyspecialized ;
}

uint64_t (*specialized Dictionary._Variant.subscript.modify(void *a1, unsigned __int8 a2))()
{
  uint64_t v4 = malloc(0x50uLL);
  *a1 = v4;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4[8] = specialized Dictionary._Variant.asNative.modify(v4);
  v4[9] = specialized _NativeDictionary.subscript.modify((uint64_t)(v4 + 4), a2, isUniquelyReferenced_nonNull_native);
  return Dictionary._Variant.subscript.modifyspecialized ;
}

void Dictionary._Variant.subscript.modifyspecialized (uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 64);
  (*(void (**)(void))(*(void *)a1 + 72))();
  v2(v1, 0);

  free(v1);
}

{
  void *v1;
  void (*v2)(void *, void);
  void *v3;
  uint64_t vars8;

  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 72);
  uint64_t v3 = *(void **)(*(void *)a1 + 64);
  (*(void (**)(void))(*(void *)a1 + 80))();

  v2(v1, 0);

  free(v1);
}

uint64_t (*specialized Dictionary._Variant.subscript.modify(void *a1, void *a2))()
{
  uint64_t v4 = malloc(0x58uLL);
  *a1 = v4;
  v4[8] = a2;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  id v6 = a2;
  v4[9] = specialized Dictionary._Variant.asNative.modify(v4);
  v4[10] = specialized _NativeDictionary.subscript.modify(v4 + 4, (uint64_t)v6, isUniquelyReferenced_nonNull_native);
  return Dictionary._Variant.subscript.modifyspecialized ;
}

uint64_t (*specialized Dictionary._Variant.subscript.modify(void *a1, void *a2, Swift::UInt a3, char a4))()
{
  uint64_t v8 = malloc(0x58uLL);
  *a1 = v8;
  v8[8] = a2;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  id v10 = a2;
  v8[9] = specialized Dictionary._Variant.asNative.modify(v8);
  v8[10] = specialized _NativeDictionary.subscript.modify(v8 + 4, v10, a3, a4 & 1, isUniquelyReferenced_nonNull_native);
  return Dictionary._Variant.subscript.modifyspecialized ;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<UIFontDescriptorAttributeName, Any>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<UIFontDescriptorTraitKey, Any>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<Int, [MOMapLocation]>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  void *v31;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MOSuggestionAssetVisualSubType, Int>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v30 = a2;
    uint64_t v8 = 0;
    uint64_t v31 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      id v10 = ~(-1 << v9);
    }
    else {
      id v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        uint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        uint64_t v16 = v15 | (v8 << 6);
      }
      else
      {
        uint64_t v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v17 >= v12) {
          goto LABEL_31;
        }
        uint64_t v18 = v31[v17];
        ++v8;
        if (!v18)
        {
          uint64_t v8 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_31;
          }
          uint64_t v18 = v31[v8];
          if (!v18)
          {
            char v19 = v17 + 2;
            if (v19 >= v12)
            {
LABEL_31:
              if ((v30 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_38;
              }
              uint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
              if (v29 >= 64) {
                bzero(v31, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                char *v31 = -1 << v29;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            uint64_t v18 = v31[v19];
            if (!v18)
            {
              while (1)
              {
                uint64_t v8 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v12) {
                  goto LABEL_31;
                }
                uint64_t v18 = v31[v8];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            uint64_t v8 = v19;
          }
        }
LABEL_21:
        uint64_t v11 = (v18 - 1) & v18;
        uint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      char v20 = *(unsigned __int8 *)(*(void *)(v5 + 48) + v16);
      uint64_t v21 = *(void *)(*(void *)(v5 + 56) + 8 * v16);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v20);
      uint64_t result = Hasher._finalize()();
      long long v22 = -1 << *(unsigned char *)(v7 + 32);
      long long v23 = result & ~v22;
      Swift::String v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        Swift::String v14 = __clz(__rbit64((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          uint64_t v27 = v24 == v26;
          if (v24 == v26) {
            Swift::String v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        Swift::String v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(unsigned char *)(*(void *)(v7 + 48) + v14) = v20;
      *(void *)(*(void *)(v7 + 56) + 8 * v14) = v21;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NSObject>);
  uint64_t v38 = a2;
  id v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  id v10 = v9 & *(void *)(v5 + 64);
  long long v35 = v2;
  uint64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      char v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      char v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    uint64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    long long v22 = (void *)(v5 + 64);
    long long v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      uint64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      long long v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        Swift::String v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        long long v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            uint64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            long long v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        uint64_t v13 = v24;
      }
    }
LABEL_30:
    id v10 = (v23 - 1) & v23;
    char v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    char v32 = *(void **)(*(void *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v33 = v32;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    Swift::String v14 = -1 << *(unsigned char *)(v7 + 32);
    uint64_t v15 = result & ~v14;
    uint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      uint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        uint64_t v27 = v16 == v26;
        if (v16 == v26) {
          uint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      uint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  long long v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  long long v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *long long v22 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [MOMusicPlaybackCoordinatorDelegate]>);
  uint64_t v36 = a2;
  id v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  long long v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  id v10 = v9 & *(void *)(v5 + 64);
  long long v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      char v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      char v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    uint64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    long long v22 = (void *)(v5 + 64);
    long long v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      uint64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      long long v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        Swift::String v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        long long v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            uint64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            long long v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        uint64_t v13 = v24;
      }
    }
LABEL_30:
    id v10 = (v23 - 1) & v23;
    char v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    char v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    Swift::String v14 = -1 << *(unsigned char *)(v7 + 32);
    uint64_t v15 = result & ~v14;
    uint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      uint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        uint64_t v27 = v16 == v26;
        if (v16 == v26) {
          uint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      uint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  long long v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *long long v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  char v39;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MOWorkoutMotionActivityAction, UIImage>);
  uint64_t v39 = a2;
  id v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v38 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  id v10 = v9 & *(void *)(v5 + 64);
  uint64_t v36 = v2;
  uint64_t v37 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      char v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    long long v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v37) {
      break;
    }
    long long v23 = (void *)(v5 + 64);
    Swift::String v24 = *(void *)(v38 + 8 * v22);
    ++v13;
    if (!v24)
    {
      uint64_t v13 = v22 + 1;
      if (v22 + 1 >= v37) {
        goto LABEL_33;
      }
      Swift::String v24 = *(void *)(v38 + 8 * v13);
      if (!v24)
      {
        uint64_t v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v36;
          if ((v39 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        Swift::String v24 = *(void *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            uint64_t v13 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v37) {
              goto LABEL_33;
            }
            Swift::String v24 = *(void *)(v38 + 8 * v13);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        uint64_t v13 = v25;
      }
    }
LABEL_30:
    id v10 = (v24 - 1) & v24;
    uint64_t v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    uint64_t v30 = 8 * v21;
    uint64_t v31 = *(void **)(*(void *)(v5 + 48) + v30);
    char v32 = *(void **)(*(void *)(v5 + 56) + v30);
    if ((v39 & 1) == 0)
    {
      uint64_t v33 = v31;
      long long v34 = v32;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::String v14 = Hasher._finalize()();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    uint64_t v16 = v14 & ~v15;
    uint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v11 + 8 * (v16 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v11 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v26 = 0;
      uint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        uint64_t v28 = v17 == v27;
        if (v17 == v27) {
          uint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v11 + 8 * v17);
      }
      while (v29 == -1);
      uint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v11 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    char v19 = 8 * v18;
    *(void *)(*(void *)(v7 + 48) + v19) = v31;
    *(void *)(*(void *)(v7 + 56) + v19) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v36;
  long long v23 = (void *)(v5 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  long long v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *long long v23 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<MOSuggestionAssetMetadataKey, Any>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<Int, [MOSuggestionCollectionViewCellViewModel]>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Int>);
  uint64_t v37 = a2;
  id v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  id v10 = v9 & *(void *)(v5 + 64);
  long long v34 = v2;
  long long v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      char v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      char v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    uint64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35) {
      break;
    }
    long long v22 = (void *)(v5 + 64);
    long long v23 = *(void *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      uint64_t v13 = v21 + 1;
      if (v21 + 1 >= v35) {
        goto LABEL_33;
      }
      long long v23 = *(void *)(v36 + 8 * v13);
      if (!v23)
      {
        Swift::String v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        long long v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            uint64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v35) {
              goto LABEL_33;
            }
            long long v23 = *(void *)(v36 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        uint64_t v13 = v24;
      }
    }
LABEL_30:
    id v10 = (v23 - 1) & v23;
    char v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    char v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    Swift::String v14 = -1 << *(unsigned char *)(v7 + 32);
    uint64_t v15 = result & ~v14;
    uint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      uint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        uint64_t v27 = v16 == v26;
        if (v16 == v26) {
          uint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      uint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  long long v22 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *long long v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  void *v36;
  char v37;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MOSuggestionAssetsType, [MOSuggestionAsset]>);
  uint64_t v37 = a2;
  id v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    long long v34 = v2;
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v36 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    id v10 = v9 & *(void *)(v5 + 64);
    long long v35 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    uint64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        char v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        uint64_t v21 = v20 | (v13 << 6);
      }
      else
      {
        long long v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v35) {
          goto LABEL_33;
        }
        long long v23 = v36[v22];
        ++v13;
        if (!v23)
        {
          uint64_t v13 = v22 + 1;
          if (v22 + 1 >= v35) {
            goto LABEL_33;
          }
          long long v23 = v36[v13];
          if (!v23)
          {
            Swift::String v24 = v22 + 2;
            if (v24 >= v35)
            {
LABEL_33:
              swift_release();
              uint64_t v3 = v34;
              if (v37)
              {
                uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
                if (v33 >= 64) {
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v36 = -1 << v33;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            long long v23 = v36[v24];
            if (!v23)
            {
              while (1)
              {
                uint64_t v13 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_40;
                }
                if (v13 >= v35) {
                  goto LABEL_33;
                }
                long long v23 = v36[v13];
                ++v24;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }
            uint64_t v13 = v24;
          }
        }
LABEL_30:
        id v10 = (v23 - 1) & v23;
        uint64_t v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      uint64_t v29 = 8 * v21;
      uint64_t v30 = *(void **)(*(void *)(v5 + 48) + v29);
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + v29);
      if ((v37 & 1) == 0)
      {
        char v32 = v30;
        swift_bridgeObjectRetain();
      }
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      Hasher.init(_seed:)();
      String.hash(into:)();
      Swift::String v14 = Hasher._finalize()();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v16 = v14 & ~v15;
      uint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v11 + 8 * (v16 >> 6))) != 0)
      {
        uint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v11 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          uint64_t v27 = v17 == v26;
          if (v17 == v26) {
            uint64_t v17 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v11 + 8 * v17);
        }
        while (v28 == -1);
        uint64_t v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }
      *(void *)(v11 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      char v19 = 8 * v18;
      *(void *)(*(void *)(v7 + 48) + v19) = v30;
      *(void *)(*(void *)(v7 + 56) + v19) = v31;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  uint64_t v21;
  id v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  int64_t v33;
  void *v34;
  char v35;
  unsigned char v36[32];

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MOSuggestionAssetMetadataKey, Any?>);
  long long v35 = a2;
  id v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    char v32 = v2;
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    long long v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    id v10 = v9 & *(void *)(v5 + 64);
    uint64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    uint64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        uint64_t v15 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        uint64_t v16 = v15 | (v13 << 6);
      }
      else
      {
        uint64_t v17 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v17 >= v33) {
          goto LABEL_34;
        }
        uint64_t v18 = v34[v17];
        ++v13;
        if (!v18)
        {
          uint64_t v13 = v17 + 1;
          if (v17 + 1 >= v33) {
            goto LABEL_34;
          }
          uint64_t v18 = v34[v13];
          if (!v18)
          {
            char v19 = v17 + 2;
            if (v19 >= v33)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v32;
              if (v35)
              {
                uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
                if (v31 >= 64) {
                  bzero(v34, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *long long v34 = -1 << v31;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            uint64_t v18 = v34[v19];
            if (!v18)
            {
              while (1)
              {
                uint64_t v13 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                uint64_t v18 = v34[v13];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            uint64_t v13 = v19;
          }
        }
LABEL_21:
        id v10 = (v18 - 1) & v18;
        uint64_t v16 = __clz(__rbit64(v18)) + (v13 << 6);
      }
      char v20 = *(void **)(*(void *)(v5 + 48) + 8 * v16);
      uint64_t v21 = *(void *)(v5 + 56) + 32 * v16;
      if (v35)
      {
        outlined init with take of Date?(v21, (uint64_t)v36, &demangling cache variable for type metadata for Any?);
      }
      else
      {
        outlined init with copy of Date?(v21, (uint64_t)v36, &demangling cache variable for type metadata for Any?);
        long long v22 = v20;
      }
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      Hasher.init(_seed:)();
      String.hash(into:)();
      long long v23 = Hasher._finalize()();
      uint64_t result = swift_bridgeObjectRelease();
      Swift::String v24 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v25 = v23 & ~v24;
      unint64_t v26 = v25 >> 6;
      if (((-1 << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        Swift::String v14 = __clz(__rbit64((-1 << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v27 = 0;
        uint64_t v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          uint64_t v29 = v26 == v28;
          if (v26 == v28) {
            unint64_t v26 = 0;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        Swift::String v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(void *)(*(void *)(v7 + 48) + 8 * v14) = v20;
      uint64_t result = outlined init with take of Date?((uint64_t)v36, *(void *)(v7 + 56) + 32 * v14, &demangling cache variable for type metadata for Any?);
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  void *v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  Swift::UInt v25;
  int v26;
  id v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  void *v39;
  uint64_t i;
  char v41;
  uint64_t v42;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MOAssetAndMediaType, Int>);
  uint64_t v41 = a2;
  id v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v39 = (void *)(v5 + 64);
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  id v10 = v9 & *(void *)(v5 + 64);
  uint64_t v37 = v2;
  uint64_t v38 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v13 = 0;
  for (i = v5; ; uint64_t v5 = i)
  {
    if (v10)
    {
      uint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v17 = v16 | (v13 << 6);
      goto LABEL_22;
    }
    uint64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v18 >= v38) {
      break;
    }
    char v19 = v39;
    char v20 = v39[v18];
    ++v13;
    if (!v20)
    {
      uint64_t v13 = v18 + 1;
      if (v18 + 1 >= v38) {
        goto LABEL_36;
      }
      char v20 = v39[v13];
      if (!v20)
      {
        uint64_t v21 = v18 + 2;
        if (v21 >= v38)
        {
LABEL_36:
          swift_release();
          uint64_t v3 = v37;
          if ((v41 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }
        char v20 = v39[v21];
        if (!v20)
        {
          while (1)
          {
            uint64_t v13 = v21 + 1;
            if (__OFADD__(v21, 1)) {
              goto LABEL_45;
            }
            if (v13 >= v38) {
              goto LABEL_36;
            }
            char v20 = v39[v13];
            ++v21;
            if (v20) {
              goto LABEL_21;
            }
          }
        }
        uint64_t v13 = v21;
      }
    }
LABEL_21:
    id v10 = (v20 - 1) & v20;
    uint64_t v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_22:
    long long v22 = *(void *)(v5 + 56);
    long long v23 = *(void *)(v5 + 48) + 24 * v17;
    Swift::String v24 = *(void **)v23;
    uint64_t v25 = *(void *)(v23 + 8);
    unint64_t v26 = *(unsigned __int8 *)(v23 + 16);
    char v42 = *(void *)(v22 + 8 * v17);
    if ((v41 & 1) == 0) {
      uint64_t v27 = v24;
    }
    Hasher.init(_seed:)();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v28 = v24;
    String.hash(into:)();

    swift_bridgeObjectRelease();
    if (v26)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v25);
    }
    uint64_t result = Hasher._finalize()();
    uint64_t v29 = -1 << *(unsigned char *)(v7 + 32);
    uint64_t v30 = result & ~v29;
    uint64_t v31 = v30 >> 6;
    if (((-1 << v30) & ~*(void *)(v11 + 8 * (v30 >> 6))) != 0)
    {
      Swift::String v14 = __clz(__rbit64((-1 << v30) & ~*(void *)(v11 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v32 = 0;
      uint64_t v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        long long v34 = v31 == v33;
        if (v31 == v33) {
          uint64_t v31 = 0;
        }
        v32 |= v34;
        long long v35 = *(void *)(v11 + 8 * v31);
      }
      while (v35 == -1);
      Swift::String v14 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    uint64_t v15 = *(void *)(v7 + 48) + 24 * v14;
    *(void *)uint64_t v15 = v28;
    *(void *)(v15 + 8) = v25;
    *(unsigned char *)(v15 + 16) = v26;
    *(void *)(*(void *)(v7 + 56) + 8 * v14) = v42;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v37;
  char v19 = v39;
  if ((v41 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
  if (v36 >= 64) {
    bzero(v19, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *char v19 = -1 << v36;
  }
  *(void *)(v5 + 16) = 0;
LABEL_43:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  void *v34;
  _OWORD v35[2];

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  id v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    long long v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    id v10 = v9 & *(void *)(v5 + 64);
    uint64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    uint64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        uint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        uint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        uint64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_34;
        }
        char v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          uint64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          char v19 = v34[v13];
          if (!v19)
          {
            char v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v2;
              if (a2)
              {
                char v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *long long v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            char v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                uint64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                char v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            uint64_t v13 = v20;
          }
        }
LABEL_21:
        id v10 = (v19 - 1) & v19;
        uint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      uint64_t v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      long long v23 = *v21;
      long long v22 = v21[1];
      Swift::String v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2)
      {
        outlined init with take of Any(v24, v35);
      }
      else
      {
        outlined init with copy of Any((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      uint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        Swift::String v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v28 = 0;
        uint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          uint64_t v30 = v27 == v29;
          if (v27 == v29) {
            uint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        Swift::String v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      uint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      *uint64_t v15 = v23;
      v15[1] = v22;
      uint64_t result = (uint64_t)outlined init with take of Any(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  long long v17;
  long long v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  long long v26;
  long long v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD v37[2];
  long long v38;
  long long v39;
  uint64_t v40;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  id v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  id v10 = v9 & *(void *)(v5 + 64);
  uint64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  Swift::String v14 = 0;
  while (1)
  {
    if (v10)
    {
      char v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      char v20 = v19 | (v14 << 6);
      goto LABEL_22;
    }
    uint64_t v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v11) {
      break;
    }
    long long v22 = (void *)(v5 + 64);
    long long v23 = *(void *)(v36 + 8 * v21);
    ++v14;
    if (!v23)
    {
      Swift::String v14 = v21 + 1;
      if (v21 + 1 >= v11) {
        goto LABEL_34;
      }
      long long v23 = *(void *)(v36 + 8 * v14);
      if (!v23)
      {
        Swift::String v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_34:
          swift_release();
          if ((a2 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        long long v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            Swift::String v14 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v14 >= v11) {
              goto LABEL_34;
            }
            long long v23 = *(void *)(v36 + 8 * v14);
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        Swift::String v14 = v24;
      }
    }
LABEL_21:
    id v10 = (v23 - 1) & v23;
    char v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_22:
    uint64_t v25 = *(void *)(v5 + 48) + 40 * v20;
    if (a2)
    {
      unint64_t v26 = *(_OWORD *)v25;
      uint64_t v27 = *(_OWORD *)(v25 + 16);
      uint64_t v40 = *(void *)(v25 + 32);
      uint64_t v38 = v26;
      uint64_t v39 = v27;
      outlined init with take of Any((_OWORD *)(*(void *)(v5 + 56) + 32 * v20), v37);
    }
    else
    {
      outlined init with copy of AnyHashable(v25, (uint64_t)&v38);
      outlined init with copy of Any(*(void *)(v5 + 56) + 32 * v20, (uint64_t)v37);
    }
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v28 = -1 << *(unsigned char *)(v7 + 32);
    uint64_t v29 = result & ~v28;
    uint64_t v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6))) != 0)
    {
      uint64_t v15 = __clz(__rbit64((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v31 = 0;
      char v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        uint64_t v33 = v30 == v32;
        if (v30 == v32) {
          uint64_t v30 = 0;
        }
        v31 |= v33;
        long long v34 = *(void *)(v12 + 8 * v30);
      }
      while (v34 == -1);
      uint64_t v15 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    uint64_t v16 = *(void *)(v7 + 48) + 40 * v15;
    uint64_t v17 = v38;
    uint64_t v18 = v39;
    *(void *)(v16 + 32) = v40;
    *(_OWORD *)uint64_t v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    uint64_t result = (uint64_t)outlined init with take of Any(v37, (_OWORD *)(*(void *)(v7 + 56) + 32 * v15));
    ++*(void *)(v7 + 16);
  }
  swift_release();
  long long v22 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  long long v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *long long v22 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  uint64_t v39;
  char v40;
  long long v41;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AppBgColor>);
  uint64_t v40 = a2;
  id v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v39 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  id v10 = v9 & *(void *)(v5 + 64);
  uint64_t v37 = v2;
  uint64_t v38 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      char v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    long long v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v38) {
      break;
    }
    long long v23 = (void *)(v5 + 64);
    Swift::String v24 = *(void *)(v39 + 8 * v22);
    ++v13;
    if (!v24)
    {
      uint64_t v13 = v22 + 1;
      if (v22 + 1 >= v38) {
        goto LABEL_33;
      }
      Swift::String v24 = *(void *)(v39 + 8 * v13);
      if (!v24)
      {
        uint64_t v25 = v22 + 2;
        if (v25 >= v38)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v37;
          if ((v40 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        Swift::String v24 = *(void *)(v39 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            uint64_t v13 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v38) {
              goto LABEL_33;
            }
            Swift::String v24 = *(void *)(v39 + 8 * v13);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        uint64_t v13 = v25;
      }
    }
LABEL_30:
    id v10 = (v24 - 1) & v24;
    uint64_t v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    char v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(v5 + 56) + 32 * v21;
    uint64_t v41 = *(_OWORD *)v33;
    long long v34 = *(void *)(v33 + 16);
    long long v35 = *(unsigned char *)(v33 + 24);
    if ((v40 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    Swift::String v14 = -1 << *(unsigned char *)(v7 + 32);
    uint64_t v15 = result & ~v14;
    uint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      uint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v26 = 0;
      uint64_t v27 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        uint64_t v28 = v16 == v27;
        if (v16 == v27) {
          uint64_t v16 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v11 + 8 * v16);
      }
      while (v29 == -1);
      uint64_t v17 = __clz(__rbit64(~v29)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v32;
    v18[1] = v31;
    char v19 = *(void *)(v7 + 56) + 32 * v17;
    *(_OWORD *)char v19 = v41;
    *(void *)(v19 + 16) = v34;
    *(unsigned char *)(v19 + 24) = v35;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v37;
  long long v23 = (void *)(v5 + 64);
  if ((v40 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
  if (v36 >= 64) {
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *long long v23 = -1 << v36;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  void *v36;
  long long v37;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String?>);
  id v6 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v36 = (void *)(v5 + 64);
    if (v9 < 64) {
      id v10 = ~(-1 << v9);
    }
    else {
      id v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    long long v35 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    uint64_t result = swift_retain();
    Swift::String v14 = 0;
    while (1)
    {
      if (v11)
      {
        uint64_t v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        long long v22 = v21 | (v14 << 6);
      }
      else
      {
        long long v23 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v23 >= v35) {
          goto LABEL_33;
        }
        Swift::String v24 = v36[v23];
        ++v14;
        if (!v24)
        {
          Swift::String v14 = v23 + 1;
          if (v23 + 1 >= v35) {
            goto LABEL_33;
          }
          Swift::String v24 = v36[v14];
          if (!v24)
          {
            uint64_t v25 = v23 + 2;
            if (v25 >= v35)
            {
LABEL_33:
              swift_release();
              uint64_t v3 = v2;
              if (v6)
              {
                long long v34 = 1 << *(unsigned char *)(v5 + 32);
                if (v34 >= 64) {
                  bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v36 = -1 << v34;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            Swift::String v24 = v36[v25];
            if (!v24)
            {
              while (1)
              {
                Swift::String v14 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_40;
                }
                if (v14 >= v35) {
                  goto LABEL_33;
                }
                Swift::String v24 = v36[v14];
                ++v25;
                if (v24) {
                  goto LABEL_30;
                }
              }
            }
            Swift::String v14 = v25;
          }
        }
LABEL_30:
        uint64_t v11 = (v24 - 1) & v24;
        long long v22 = __clz(__rbit64(v24)) + (v14 << 6);
      }
      uint64_t v30 = 16 * v22;
      uint64_t v31 = (uint64_t *)(*(void *)(v5 + 48) + v30);
      uint64_t v33 = *v31;
      char v32 = v31[1];
      uint64_t v37 = *(_OWORD *)(*(void *)(v5 + 56) + v30);
      if ((v6 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
      uint64_t v16 = result & ~v15;
      uint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        uint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v26 = 0;
        uint64_t v27 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          uint64_t v28 = v17 == v27;
          if (v17 == v27) {
            uint64_t v17 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v12 + 8 * v17);
        }
        while (v29 == -1);
        uint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
      }
      *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      char v19 = 16 * v18;
      char v20 = (void *)(*(void *)(v8 + 48) + v19);
      *char v20 = v33;
      v20[1] = v32;
      *(_OWORD *)(*(void *)(v8 + 56) + v19) = v37;
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v8;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Double>);
  uint64_t v37 = a2;
  id v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  long long v35 = v2;
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  id v10 = v9 & *(void *)(v5 + 64);
  uint64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  Swift::String v14 = 0;
  while (1)
  {
    if (v10)
    {
      char v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    long long v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    long long v23 = (void *)(v5 + 64);
    Swift::String v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      Swift::String v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      Swift::String v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        uint64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        Swift::String v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            Swift::String v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            Swift::String v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        Swift::String v14 = v25;
      }
    }
LABEL_30:
    id v10 = (v24 - 1) & v24;
    uint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    char v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    uint64_t v16 = result & ~v15;
    uint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v26 = 0;
      uint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        uint64_t v28 = v17 == v27;
        if (v17 == v27) {
          uint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      uint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    char v19 = (void *)(*(void *)(v7 + 48) + 16 * v18);
    *char v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v7 + 56) + 8 * v18) = v33;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  long long v23 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  long long v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *long long v23 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  char v36 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_41;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v35 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  int64_t v34 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_22;
    }
    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v34) {
      break;
    }
    char v19 = (void *)(v6 + 64);
    unint64_t v20 = *(void *)(v35 + 8 * v18);
    ++v14;
    if (!v20)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v34) {
        goto LABEL_34;
      }
      unint64_t v20 = *(void *)(v35 + 8 * v14);
      if (!v20)
      {
        int64_t v21 = v18 + 2;
        if (v21 >= v34)
        {
LABEL_34:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v20 = *(void *)(v35 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            int64_t v14 = v21 + 1;
            if (__OFADD__(v21, 1)) {
              goto LABEL_43;
            }
            if (v14 >= v34) {
              goto LABEL_34;
            }
            unint64_t v20 = *(void *)(v35 + 8 * v14);
            ++v21;
            if (v20) {
              goto LABEL_21;
            }
          }
        }
        int64_t v14 = v21;
      }
    }
LABEL_21:
    unint64_t v11 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v14 << 6);
LABEL_22:
    long long v22 = *(void **)(*(void *)(v6 + 48) + 8 * v17);
    long long v23 = (_OWORD *)(*(void *)(v6 + 56) + 32 * v17);
    if (v36)
    {
      outlined init with take of Any(v23, v37);
    }
    else
    {
      outlined init with copy of Any((uint64_t)v23, (uint64_t)v37);
      id v24 = v22;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v25 = Hasher._finalize()();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = v25 & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v12 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v27) & ~*(void *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v12 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v15 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(void *)(*(void *)(v8 + 48) + 8 * v15) = v22;
    uint64_t result = (uint64_t)outlined init with take of Any(v37, (_OWORD *)(*(void *)(v8 + 56) + 32 * v15));
    ++*(void *)(v8 + 16);
  }
  swift_release();
  char v19 = (void *)(v6 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v33 = 1 << *(unsigned char *)(v6 + 32);
  if (v33 >= 64) {
    bzero(v19, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *char v19 = -1 << v33;
  }
  *(void *)(v6 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;

  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = result;
  if (*(void *)(v6 + 16))
  {
    uint64_t v9 = 0;
    uint64_t v10 = (uint64_t *)(v6 + 64);
    unint64_t v11 = 1 << *(unsigned char *)(v6 + 32);
    uint64_t v32 = -1 << v11;
    uint64_t v33 = v11;
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    else {
      uint64_t v12 = -1;
    }
    uint64_t v13 = v12 & *(void *)(v6 + 64);
    int64_t v34 = (unint64_t)(v11 + 63) >> 6;
    int64_t v14 = result + 64;
    while (1)
    {
      if (v13)
      {
        unint64_t v20 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        int64_t v21 = v20 | (v9 << 6);
      }
      else
      {
        long long v22 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v22 >= v34) {
          goto LABEL_33;
        }
        long long v23 = v10[v22];
        ++v9;
        if (!v23)
        {
          uint64_t v9 = v22 + 1;
          if (v22 + 1 >= v34) {
            goto LABEL_33;
          }
          long long v23 = v10[v9];
          if (!v23)
          {
            id v24 = v22 + 2;
            if (v24 >= v34)
            {
LABEL_33:
              if (a2)
              {
                if (v33 >= 64) {
                  bzero((void *)(v6 + 64), 8 * v34);
                }
                else {
                  *uint64_t v10 = v32;
                }
                *(void *)(v6 + 16) = 0;
              }
              break;
            }
            long long v23 = v10[v24];
            if (!v23)
            {
              while (1)
              {
                uint64_t v9 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_41;
                }
                if (v9 >= v34) {
                  goto LABEL_33;
                }
                long long v23 = v10[v9];
                ++v24;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }
            uint64_t v9 = v24;
          }
        }
LABEL_30:
        uint64_t v13 = (v23 - 1) & v23;
        int64_t v21 = __clz(__rbit64(v23)) + (v9 << 6);
      }
      char v29 = 8 * v21;
      unint64_t v30 = *(void *)(*(void *)(v6 + 48) + v29);
      BOOL v31 = *(void *)(*(void *)(v6 + 56) + v29);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      unint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        int64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        Swift::Int v25 = 0;
        uint64_t v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          unint64_t v27 = v17 == v26;
          if (v17 == v26) {
            unint64_t v17 = 0;
          }
          v25 |= v27;
          unint64_t v28 = *(void *)(v14 + 8 * v17);
        }
        while (v28 == -1);
        int64_t v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }
      *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      char v19 = 8 * v18;
      *(void *)(*(void *)(v8 + 48) + v19) = v30;
      *(void *)(*(void *)(v8 + 56) + v19) = v31;
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v4 = v8;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, (Bool, Bool)>);
  int v45 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (*(void *)(v9 + 16))
  {
    uint64_t v39 = v2;
    uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
    uint64_t v13 = *(void *)(v9 + 64);
    uint64_t v41 = (void *)(v9 + 64);
    if (v12 < 64) {
      uint64_t v14 = ~(-1 << v12);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v15 = v14 & v13;
    int64_t v40 = (unint64_t)(v12 + 63) >> 6;
    char v42 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v46 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
    uint64_t v16 = v10 + 64;
    uint64_t result = swift_retain();
    int64_t v18 = 0;
    uint64_t v47 = v8;
    uint64_t v48 = v5;
    uint64_t v43 = v9;
    for (i = v6; ; uint64_t v6 = i)
    {
      if (v15)
      {
        unint64_t v21 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v22 = v21 | (v18 << 6);
      }
      else
      {
        int64_t v23 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v23 >= v40) {
          goto LABEL_34;
        }
        unint64_t v24 = v41[v23];
        ++v18;
        if (!v24)
        {
          int64_t v18 = v23 + 1;
          if (v23 + 1 >= v40) {
            goto LABEL_34;
          }
          unint64_t v24 = v41[v18];
          if (!v24)
          {
            int64_t v25 = v23 + 2;
            if (v25 >= v40)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v39;
              if (v45)
              {
                uint64_t v38 = 1 << *(unsigned char *)(v9 + 32);
                if (v38 >= 64) {
                  bzero(v41, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v41 = -1 << v38;
                }
                *(void *)(v9 + 16) = 0;
              }
              break;
            }
            unint64_t v24 = v41[v25];
            if (!v24)
            {
              while (1)
              {
                int64_t v18 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_41;
                }
                if (v18 >= v40) {
                  goto LABEL_34;
                }
                unint64_t v24 = v41[v18];
                ++v25;
                if (v24) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v18 = v25;
          }
        }
LABEL_21:
        unint64_t v15 = (v24 - 1) & v24;
        unint64_t v22 = __clz(__rbit64(v24)) + (v18 << 6);
      }
      uint64_t v26 = *(void *)(v6 + 72);
      unint64_t v27 = *(void *)(v9 + 48) + v26 * v22;
      if (v45) {
        (*v46)(v47, v27, v48);
      }
      else {
        (*v42)(v47, v27, v48);
      }
      unint64_t v28 = (char *)(*(void *)(v9 + 56) + 2 * v22);
      char v29 = v28[1];
      char v30 = *v28;
      _s10Foundation4UUIDVACSHAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v31 = -1 << *(unsigned char *)(v11 + 32);
      unint64_t v32 = result & ~v31;
      unint64_t v33 = v32 >> 6;
      if (((-1 << v32) & ~*(void *)(v16 + 8 * (v32 >> 6))) != 0)
      {
        unint64_t v19 = __clz(__rbit64((-1 << v32) & ~*(void *)(v16 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v34 = 0;
        unint64_t v35 = (unint64_t)(63 - v31) >> 6;
        do
        {
          if (++v33 == v35 && (v34 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v36 = v33 == v35;
          if (v33 == v35) {
            unint64_t v33 = 0;
          }
          v34 |= v36;
          uint64_t v37 = *(void *)(v16 + 8 * v33);
        }
        while (v37 == -1);
        unint64_t v19 = __clz(__rbit64(~v37)) + (v33 << 6);
      }
      *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v46)(*(void *)(v11 + 48) + v26 * v19, v47, v48);
      unint64_t v20 = (unsigned char *)(*(void *)(v11 + 56) + 2 * v19);
      *unint64_t v20 = v30;
      v20[1] = v29;
      ++*(void *)(v11 + 16);
      uint64_t v9 = v43;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  void *v41;
  uint64_t v42;
  int v43;

  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for PropertyDescriptor();
  char v42 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PropertyDescriptor>);
  uint64_t v43 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_41;
  }
  uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  uint64_t v41 = (void *)(v8 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1 << v11);
  }
  else {
    uint64_t v13 = -1;
  }
  uint64_t v14 = v13 & v12;
  uint64_t v39 = v2;
  int64_t v40 = (unint64_t)(v11 + 63) >> 6;
  unint64_t v15 = v9 + 64;
  uint64_t result = swift_retain();
  unint64_t v17 = 0;
  while (1)
  {
    if (v14)
    {
      unint64_t v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v21 = v20 | (v17 << 6);
      goto LABEL_22;
    }
    unint64_t v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v40) {
      break;
    }
    int64_t v23 = v41;
    unint64_t v24 = v41[v22];
    ++v17;
    if (!v24)
    {
      unint64_t v17 = v22 + 1;
      if (v22 + 1 >= v40) {
        goto LABEL_34;
      }
      unint64_t v24 = v41[v17];
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v40)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v39;
          if ((v43 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v24 = v41[v25];
        if (!v24)
        {
          while (1)
          {
            unint64_t v17 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_43;
            }
            if (v17 >= v40) {
              goto LABEL_34;
            }
            unint64_t v24 = v41[v17];
            ++v25;
            if (v24) {
              goto LABEL_21;
            }
          }
        }
        unint64_t v17 = v25;
      }
    }
LABEL_21:
    uint64_t v14 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_22:
    uint64_t v26 = (uint64_t *)(*(void *)(v8 + 48) + 16 * v21);
    unint64_t v28 = *v26;
    unint64_t v27 = v26[1];
    char v29 = *(void *)(v42 + 72);
    char v30 = *(void *)(v8 + 56) + v29 * v21;
    if (v43)
    {
      outlined init with take of MOSuggestionSheetAssetDateRange(v30, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for PropertyDescriptor);
    }
    else
    {
      outlined init with copy of MOSuggestionSheetAssetDateRange(v30, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for PropertyDescriptor);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v31 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v15 + 8 * (v32 >> 6))) != 0)
    {
      int64_t v18 = __clz(__rbit64((-1 << v32) & ~*(void *)(v15 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v15 + 8 * v33);
      }
      while (v37 == -1);
      int64_t v18 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v10 + 48) + 16 * v18);
    *unint64_t v19 = v28;
    v19[1] = v27;
    uint64_t result = outlined init with take of MOSuggestionSheetAssetDateRange((uint64_t)v7, *(void *)(v10 + 56) + v29 * v18, (uint64_t (*)(void))type metadata accessor for PropertyDescriptor);
    ++*(void *)(v10 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  int64_t v23 = v41;
  if ((v43 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v8 + 32);
  if (v38 >= 64) {
    bzero(v23, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v23 = -1 << v38;
  }
  *(void *)(v8 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void (**v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int64_t v43;
  void *v44;
  void (**v45)(char *, uint64_t, uint64_t);
  uint64_t v46;
  int v47;
  char *v48;
  uint64_t v49;

  uint64_t v3 = v2;
  unsigned __int8 v49 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v48 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, URL>);
  uint64_t v47 = a2;
  uint64_t v8 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16)) {
    goto LABEL_41;
  }
  uint64_t v10 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v11 = *(void *)(v7 + 64);
  uint64_t v44 = (void *)(v7 + 64);
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  else {
    uint64_t v12 = -1;
  }
  uint64_t v13 = v12 & v11;
  char v42 = v2;
  uint64_t v43 = (unint64_t)(v10 + 63) >> 6;
  int v45 = (void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v46 = v5;
  uint64_t v14 = (void (**)(char *, uint64_t, uint64_t))(v5 + 32);
  unint64_t v15 = v8 + 64;
  uint64_t result = swift_retain();
  unint64_t v17 = 0;
  while (1)
  {
    if (v13)
    {
      unint64_t v20 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v21 = v20 | (v17 << 6);
      goto LABEL_22;
    }
    unint64_t v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v43) {
      break;
    }
    int64_t v23 = v44;
    unint64_t v24 = v44[v22];
    ++v17;
    if (!v24)
    {
      unint64_t v17 = v22 + 1;
      if (v22 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v24 = v44[v17];
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v43)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v42;
          if ((v47 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v24 = v44[v25];
        if (!v24)
        {
          while (1)
          {
            unint64_t v17 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_43;
            }
            if (v17 >= v43) {
              goto LABEL_34;
            }
            unint64_t v24 = v44[v17];
            ++v25;
            if (v24) {
              goto LABEL_21;
            }
          }
        }
        unint64_t v17 = v25;
      }
    }
LABEL_21:
    uint64_t v13 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_22:
    uint64_t v26 = *(void *)(v7 + 56);
    unint64_t v27 = v7;
    unint64_t v28 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v21);
    char v29 = *v28;
    char v30 = v28[1];
    uint64_t v31 = *(void *)(v46 + 72);
    unint64_t v32 = v26 + v31 * v21;
    if (v47)
    {
      (*v14)(v48, v32, v49);
    }
    else
    {
      (*v45)(v48, v32, v49);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    unint64_t v33 = -1 << *(unsigned char *)(v9 + 32);
    char v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v15 + 8 * (v34 >> 6))) != 0)
    {
      int64_t v18 = __clz(__rbit64((-1 << v34) & ~*(void *)(v15 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      BOOL v36 = 0;
      uint64_t v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        uint64_t v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v15 + 8 * v35);
      }
      while (v39 == -1);
      int64_t v18 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v9 + 48) + 16 * v18);
    *unint64_t v19 = v29;
    v19[1] = v30;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v14)(*(void *)(v9 + 56) + v31 * v18, v48, v49);
    ++*(void *)(v9 + 16);
    uint64_t v7 = v27;
  }
  swift_release();
  uint64_t v3 = v42;
  int64_t v23 = v44;
  if ((v47 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  int64_t v40 = 1 << *(unsigned char *)(v7 + 32);
  if (v40 >= 64) {
    bzero(v23, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v23 = -1 << v40;
  }
  *(void *)(v7 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v9;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  void *v41;
  uint64_t v42;
  int v43;

  uint64_t v3 = v2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  char v42 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Date?>);
  uint64_t v43 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_41;
  }
  uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  uint64_t v41 = (void *)(v8 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1 << v11);
  }
  else {
    uint64_t v13 = -1;
  }
  uint64_t v14 = v13 & v12;
  uint64_t v39 = v2;
  int64_t v40 = (unint64_t)(v11 + 63) >> 6;
  unint64_t v15 = v9 + 64;
  uint64_t result = swift_retain();
  unint64_t v17 = 0;
  while (1)
  {
    if (v14)
    {
      unint64_t v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v21 = v20 | (v17 << 6);
      goto LABEL_22;
    }
    unint64_t v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v40) {
      break;
    }
    int64_t v23 = v41;
    unint64_t v24 = v41[v22];
    ++v17;
    if (!v24)
    {
      unint64_t v17 = v22 + 1;
      if (v22 + 1 >= v40) {
        goto LABEL_34;
      }
      unint64_t v24 = v41[v17];
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v40)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v39;
          if ((v43 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v24 = v41[v25];
        if (!v24)
        {
          while (1)
          {
            unint64_t v17 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_43;
            }
            if (v17 >= v40) {
              goto LABEL_34;
            }
            unint64_t v24 = v41[v17];
            ++v25;
            if (v24) {
              goto LABEL_21;
            }
          }
        }
        unint64_t v17 = v25;
      }
    }
LABEL_21:
    uint64_t v14 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_22:
    uint64_t v26 = (uint64_t *)(*(void *)(v8 + 48) + 16 * v21);
    unint64_t v27 = *v26;
    unint64_t v28 = v26[1];
    char v29 = *(void *)(v42 + 72);
    char v30 = *(void *)(v8 + 56) + v29 * v21;
    if (v43)
    {
      outlined init with take of Date?(v30, (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for Date?);
    }
    else
    {
      outlined init with copy of Date?(v30, (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for Date?);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v31 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v15 + 8 * (v32 >> 6))) != 0)
    {
      int64_t v18 = __clz(__rbit64((-1 << v32) & ~*(void *)(v15 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v15 + 8 * v33);
      }
      while (v37 == -1);
      int64_t v18 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v10 + 48) + 16 * v18);
    *unint64_t v19 = v27;
    v19[1] = v28;
    uint64_t result = outlined init with take of Date?((uint64_t)v7, *(void *)(v10 + 56) + v29 * v18, (uint64_t *)&demangling cache variable for type metadata for Date?);
    ++*(void *)(v10 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  int64_t v23 = v41;
  if ((v43 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v8 + 32);
  if (v38 >= 64) {
    bzero(v23, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v23 = -1 << v38;
  }
  *(void *)(v8 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, char a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  *(unsigned char *)(a4[6] + result) = a2;
  *(void *)(a4[7] + 8 * result) = a3;
  uint64_t v4 = a4[2];
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a4[2] = v6;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  BOOL v5 = (void *)(a5[6] + 16 * result);
  *BOOL v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  uint64_t v4 = 8 * result;
  *(void *)(a4[6] + v4) = a2;
  *(void *)(a4[7] + v4) = a3;
  uint64_t v5 = a4[2];
  BOOL v6 = __OFADD__(v5, 1);
  uint64_t v7 = v5 + 1;
  if (v6) {
    __break(1u);
  }
  else {
    a4[2] = v7;
  }
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t result = outlined init with take of Any(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

{
  uint64_t v5;
  long long v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v5 = a4[6] + 40 * a1;
  uint64_t v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(void *)(v5 + 32) = *(void *)(a2 + 32);
  uint64_t result = outlined init with take of Any(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v8 = a4[2];
  uint64_t v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t result = outlined init with take of Date?(a3, a4[7] + 32 * a1, &demangling cache variable for type metadata for Any?);
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, char a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1 << result;
  uint64_t v6 = a6[6] + 24 * result;
  *(void *)uint64_t v6 = a2;
  *(void *)(v6 + 8) = a3;
  *(unsigned char *)(v6 + 16) = a4 & 1;
  *(void *)(a6[7] + 8 * result) = a5;
  uint64_t v7 = a6[2];
  BOOL v8 = __OFADD__(v7, 1);
  uint64_t v9 = v7 + 1;
  if (v8) {
    __break(1u);
  }
  else {
    a6[2] = v9;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  BOOL v8 = (void *)(a5[6] + 16 * a1);
  *BOOL v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = type metadata accessor for URL();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v9 + *(void *)(*(void *)(v10 - 8) + 72) * a1, a4, v10);
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2] = v14;
  }
  return result;
}

{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  BOOL v8 = (void *)(a5[6] + 16 * a1);
  *BOOL v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  uint64_t result = outlined init with take of Date?(a4, v9 + *(void *)(*(void *)(v10 - 8) + 72) * a1, (uint64_t *)&demangling cache variable for type metadata for Date?);
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2] = v14;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, void *a8)
{
  a8[(result >> 6) + 8] |= 1 << result;
  BOOL v8 = (void *)(a8[6] + 16 * result);
  *BOOL v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a8[7] + 32 * result;
  *(void *)uint64_t v9 = a4;
  *(void *)(v9 + 8) = a5;
  *(void *)(v9 + 16) = a6;
  *(unsigned char *)(v9 + 24) = a7;
  uint64_t v10 = a8[2];
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a8[2] = v12;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1 << result;
  uint64_t v6 = (void *)(a6[6] + 16 * result);
  void *v6 = a2;
  v6[1] = a3;
  uint64_t v7 = (void *)(a6[7] + 16 * result);
  *uint64_t v7 = a4;
  v7[1] = a5;
  uint64_t v8 = a6[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a6[2] = v10;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, void *a4, double a5)
{
  a4[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = (void *)(a4[6] + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  *(double *)(a4[7] + 8 * result) = a5;
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

id specialized _NativeDictionary.copy()()
{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<UIFontDescriptorAttributeName, Any>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<UIFontDescriptorTraitKey, Any>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NSObject>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (id)swift_release();
    void *v1 = v4;
    return result;
  }
  uint64_t result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  BOOL v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  BOOL v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  BOOL v11 = -1;
  if (v10 < 64) {
    BOOL v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  BOOL v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      uint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    int64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      BOOL v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    int64_t v18 = v17[1];
    unint64_t v19 = 8 * v15;
    unint64_t v20 = *(void **)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    uint64_t result = v20;
  }
  unint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  int64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    BOOL v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    BOOL v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MOWorkoutMotionActivityAction, UIImage>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (id)swift_release();
    void *v1 = v4;
    return result;
  }
  uint64_t result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  BOOL v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  BOOL v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  BOOL v11 = -1;
  if (v10 < 64) {
    BOOL v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  BOOL v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      uint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      BOOL v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    int64_t v18 = *(void **)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    unint64_t v19 = v17;
    uint64_t result = v18;
  }
  unint64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    BOOL v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    BOOL v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<MOSuggestionAssetMetadataKey, Any>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  unsigned char v23[32];

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MOSuggestionAssetMetadataKey, Any?>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (id)swift_release();
LABEL_28:
    void *v1 = v4;
    return result;
  }
  unint64_t v22 = v1;
  uint64_t result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  BOOL v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  BOOL v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  BOOL v11 = -1;
  if (v10 < 64) {
    BOOL v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  BOOL v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      uint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      BOOL v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    int64_t v18 = 32 * v15;
    outlined init with copy of Date?(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v23, &demangling cache variable for type metadata for Any?);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    outlined init with take of Date?((uint64_t)v23, *(void *)(v4 + 56) + v18, &demangling cache variable for type metadata for Any?);
    uint64_t result = v17;
  }
  unint64_t v21 = v19 + 2;
  if (v21 >= v13)
  {
LABEL_26:
    uint64_t result = (id)swift_release();
    uint64_t v1 = v22;
    goto LABEL_28;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    BOOL v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    BOOL v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MOAssetAndMediaType, Int>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (id)swift_release();
    void *v1 = v4;
    return result;
  }
  uint64_t result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  BOOL v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  BOOL v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  BOOL v11 = -1;
  if (v10 < 64) {
    BOOL v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  BOOL v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      uint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      BOOL v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 24 * v15;
    unint64_t v17 = *(void *)(v2 + 48) + 24 * v15;
    int64_t v18 = *(void **)v17;
    unint64_t v19 = *(void *)(v17 + 8);
    LOBYTE(v17) = *(unsigned char *)(v17 + 16);
    unint64_t v20 = 8 * v15;
    unint64_t v21 = *(void *)(*(void *)(v2 + 56) + v20);
    unint64_t v22 = *(void *)(v4 + 48) + v16;
    *(void *)unint64_t v22 = v18;
    *(void *)(v22 + 8) = v19;
    *(unsigned char *)(v22 + 16) = v17;
    *(void *)(*(void *)(v4 + 56) + v20) = v21;
    uint64_t result = v18;
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    BOOL v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    BOOL v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.copy()()
{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<Int, [MOMapLocation]>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MOSuggestionAssetVisualSubType, Int>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    void *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  BOOL v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  BOOL v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  BOOL v11 = -1;
  if (v10 < 64) {
    BOOL v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  BOOL v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      uint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    int64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      BOOL v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v20 = __clz(__rbit64(v18));
    uint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = v20 + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    *(void *)(*(void *)(v4 + 56) + 8 * v15) = v16;
  }
  unint64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  int64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    BOOL v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    BOOL v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [MOMusicPlaybackCoordinatorDelegate]>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    void *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  BOOL v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  BOOL v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  BOOL v11 = -1;
  if (v10 < 64) {
    BOOL v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  BOOL v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      uint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    int64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      BOOL v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    int64_t v18 = v17[1];
    unint64_t v19 = 8 * v15;
    unint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  unint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  int64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    BOOL v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    BOOL v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char v21;
  char v22;
  unsigned char *v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  unint64_t v35 = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  char v34 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, (Bool, Bool)>);
  char v29 = v0;
  uint64_t v3 = *v0;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
    uint64_t result = (void *)swift_release();
    unint64_t v27 = v29;
LABEL_25:
    void *v27 = v5;
    return result;
  }
  uint64_t result = (void *)(v4 + 64);
  BOOL v7 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  uint64_t v37 = v5;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v3 + 64), 8 * v7);
  }
  uint64_t v8 = 0;
  *(void *)(v37 + 16) = *(void *)(v3 + 16);
  BOOL v9 = 1 << *(unsigned char *)(v3 + 32);
  BOOL v36 = v3;
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  BOOL v11 = v10 & *(void *)(v3 + 64);
  char v30 = v3 + 64;
  uint64_t v31 = (unint64_t)(v9 + 63) >> 6;
  unint64_t v32 = v1 + 32;
  unint64_t v33 = v1 + 16;
  BOOL v13 = v34;
  uint64_t v12 = v35;
  uint64_t v14 = v37;
  while (1)
  {
    if (v11)
    {
      unint64_t v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      uint64_t v16 = v15 | (v8 << 6);
      unint64_t v17 = v36;
      goto LABEL_9;
    }
    unint64_t v24 = v8 + 1;
    unint64_t v17 = v36;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v24 >= v31) {
      goto LABEL_23;
    }
    int64_t v25 = *(void *)(v30 + 8 * v24);
    ++v8;
    if (!v25)
    {
      uint64_t v8 = v24 + 1;
      if (v24 + 1 >= v31) {
        goto LABEL_23;
      }
      int64_t v25 = *(void *)(v30 + 8 * v8);
      if (!v25) {
        break;
      }
    }
LABEL_22:
    BOOL v11 = (v25 - 1) & v25;
    uint64_t v16 = __clz(__rbit64(v25)) + (v8 << 6);
LABEL_9:
    int64_t v18 = *(void *)(v1 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v13, *(void *)(v17 + 48) + v18, v12);
    unint64_t v19 = 2 * v16;
    unint64_t v20 = (char *)(*(void *)(v17 + 56) + v19);
    unint64_t v21 = *v20;
    unint64_t v22 = v20[1];
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(void *)(v14 + 48) + v18, v13, v12);
    int64_t v23 = (unsigned char *)(*(void *)(v14 + 56) + v19);
    *int64_t v23 = v21;
    v23[1] = v22;
  }
  uint64_t v26 = v24 + 2;
  if (v26 >= v31)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    unint64_t v27 = v29;
    uint64_t v5 = v37;
    goto LABEL_25;
  }
  int64_t v25 = *(void *)(v30 + 8 * v26);
  if (v25)
  {
    uint64_t v8 = v26;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v8 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v8 >= v31) {
      goto LABEL_23;
    }
    int64_t v25 = *(void *)(v30 + 8 * v8);
    ++v26;
    if (v25) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<Int, [MOSuggestionCollectionViewCellViewModel]>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Int>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    void *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  BOOL v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  BOOL v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  BOOL v11 = -1;
  if (v10 < 64) {
    BOOL v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  BOOL v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      uint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      BOOL v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    unint64_t v19 = *v17;
    int64_t v18 = v17[1];
    unint64_t v20 = 8 * v15;
    unint64_t v21 = *(void *)(*(void *)(v2 + 56) + v20);
    unint64_t v22 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v22 = v19;
    v22[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v20) = v21;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    BOOL v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    BOOL v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MOSuggestionAssetsType, [MOSuggestionAsset]>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    void *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  BOOL v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  BOOL v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  BOOL v11 = -1;
  if (v10 < 64) {
    BOOL v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  BOOL v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      uint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      BOOL v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    int64_t v18 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    unint64_t v19 = v17;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  unint64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    BOOL v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    BOOL v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    void *v1 = v4;
    return result;
  }
  int64_t v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  BOOL v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  BOOL v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  BOOL v11 = -1;
  if (v10 < 64) {
    BOOL v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  BOOL v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      uint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    int64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      BOOL v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    unint64_t v19 = *v17;
    int64_t v18 = v17[1];
    unint64_t v20 = 32 * v15;
    outlined init with copy of Any(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = v19;
    v21[1] = v18;
    outlined init with take of Any(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  unint64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  int64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    BOOL v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    BOOL v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *result;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;

  uint64_t v1 = type metadata accessor for PropertyDescriptor();
  unint64_t v27 = *(void *)(v1 - 8);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PropertyDescriptor>);
  unint64_t v24 = v0;
  uint64_t v4 = *v0;
  uint64_t v5 = static _DictionaryStorage.copy(original:)();
  uint64_t v6 = v5;
  if (!*(void *)(v4 + 16))
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    *unint64_t v24 = v6;
    return result;
  }
  uint64_t result = (void *)(v5 + 64);
  uint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v6 + 32)) + 63) >> 6;
  if (v6 != v4 || (unint64_t)result >= v4 + 64 + 8 * v8) {
    uint64_t result = memmove(result, (const void *)(v4 + 64), 8 * v8);
  }
  int64_t v25 = v4 + 64;
  BOOL v9 = 0;
  *(void *)(v6 + 16) = *(void *)(v4 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v4 + 32);
  BOOL v11 = -1;
  if (v10 < 64) {
    BOOL v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v4 + 64);
  uint64_t v26 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      BOOL v13 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v14 = v13 | (v9 << 6);
      goto LABEL_9;
    }
    unint64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v21 >= v26) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v25 + 8 * v21);
    ++v9;
    if (!v22)
    {
      BOOL v9 = v21 + 1;
      if (v21 + 1 >= v26) {
        goto LABEL_23;
      }
      unint64_t v22 = *(void *)(v25 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_22:
    uint64_t v12 = (v22 - 1) & v22;
    uint64_t v14 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_9:
    unint64_t v15 = 16 * v14;
    uint64_t v16 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v14);
    unint64_t v17 = *v16;
    int64_t v18 = v16[1];
    unint64_t v19 = *(void *)(v27 + 72) * v14;
    outlined init with copy of MOSuggestionSheetAssetDateRange(*(void *)(v4 + 56) + v19, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for PropertyDescriptor);
    unint64_t v20 = (void *)(*(void *)(v6 + 48) + v15);
    *unint64_t v20 = v17;
    v20[1] = v18;
    outlined init with take of MOSuggestionSheetAssetDateRange((uint64_t)v3, *(void *)(v6 + 56) + v19, (uint64_t (*)(void))type metadata accessor for PropertyDescriptor);
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v26) {
    goto LABEL_23;
  }
  unint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22)
  {
    BOOL v9 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    BOOL v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v26) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v25 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  unint64_t v35 = type metadata accessor for URL();
  uint64_t v1 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  uint64_t v3 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, URL>);
  char v30 = v0;
  uint64_t v4 = *v0;
  uint64_t v5 = static _DictionaryStorage.copy(original:)();
  uint64_t v6 = *(void *)(v4 + 16);
  BOOL v36 = v5;
  if (!v6)
  {
    uint64_t result = (void *)swift_release();
    unint64_t v28 = v36;
    unint64_t v27 = v30;
LABEL_25:
    void *v27 = v28;
    return result;
  }
  BOOL v7 = v5;
  uint64_t result = (void *)(v5 + 64);
  BOOL v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v4 || (unint64_t)result >= v4 + 64 + 8 * v9)
  {
    uint64_t result = memmove(result, (const void *)(v4 + 64), 8 * v9);
    BOOL v7 = v36;
  }
  uint64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v4 + 16);
  BOOL v11 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  BOOL v13 = v12 & *(void *)(v4 + 64);
  uint64_t v31 = v4 + 64;
  unint64_t v32 = (unint64_t)(v11 + 63) >> 6;
  unint64_t v33 = v1 + 32;
  char v34 = v1 + 16;
  uint64_t v14 = v35;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      uint64_t v16 = v15 | (v10 << 6);
      goto LABEL_9;
    }
    unint64_t v24 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v24 >= v32) {
      goto LABEL_23;
    }
    int64_t v25 = *(void *)(v31 + 8 * v24);
    ++v10;
    if (!v25)
    {
      uint64_t v10 = v24 + 1;
      if (v24 + 1 >= v32) {
        goto LABEL_23;
      }
      int64_t v25 = *(void *)(v31 + 8 * v10);
      if (!v25) {
        break;
      }
    }
LABEL_22:
    BOOL v13 = (v25 - 1) & v25;
    uint64_t v16 = __clz(__rbit64(v25)) + (v10 << 6);
LABEL_9:
    unint64_t v17 = 16 * v16;
    int64_t v18 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v16);
    unint64_t v19 = *v18;
    unint64_t v20 = v18[1];
    unint64_t v21 = *(void *)(v1 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v3, *(void *)(v4 + 56) + v21, v14);
    unint64_t v22 = v36;
    int64_t v23 = (void *)(*(void *)(v36 + 48) + v17);
    *int64_t v23 = v19;
    v23[1] = v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(void *)(v22 + 56) + v21, v3, v14);
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v26 = v24 + 2;
  if (v26 >= v32)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    unint64_t v27 = v30;
    unint64_t v28 = v36;
    goto LABEL_25;
  }
  int64_t v25 = *(void *)(v31 + 8 * v26);
  if (v25)
  {
    uint64_t v10 = v26;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v10 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v10 >= v32) {
      goto LABEL_23;
    }
    int64_t v25 = *(void *)(v31 + 8 * v10);
    ++v26;
    if (v25) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  long long v19;
  long long v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  _OWORD v24[2];
  _OWORD v25[2];
  uint64_t v26;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    void *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  BOOL v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  BOOL v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  BOOL v11 = -1;
  if (v10 < 64) {
    BOOL v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  BOOL v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      uint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      BOOL v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    outlined init with copy of AnyHashable(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    unint64_t v17 = 32 * v15;
    outlined init with copy of Any(*(void *)(v2 + 56) + v17, (uint64_t)v24);
    int64_t v18 = *(void *)(v4 + 48) + v16;
    unint64_t v19 = v25[0];
    unint64_t v20 = v25[1];
    *(void *)(v18 + 32) = v26;
    *(_OWORD *)int64_t v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    uint64_t result = outlined init with take of Any(v24, (_OWORD *)(*(void *)(v4 + 56) + v17));
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    BOOL v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    BOOL v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  void *v24;
  long long v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AppBgColor>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    void *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  BOOL v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  BOOL v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  BOOL v11 = -1;
  if (v10 < 64) {
    BOOL v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  BOOL v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      uint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v13) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      BOOL v9 = v27 + 1;
      if (v27 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v28 = *(void *)(v6 + 8 * v9);
      if (!v28) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v28 - 1) & v28;
    unint64_t v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    unint64_t v19 = *v17;
    int64_t v18 = v17[1];
    unint64_t v20 = 32 * v15;
    unint64_t v21 = *(void *)(v2 + 56) + v20;
    unint64_t v22 = *(void *)(v21 + 16);
    int64_t v23 = *(unsigned char *)(v21 + 24);
    unint64_t v24 = (void *)(*(void *)(v4 + 48) + v16);
    int64_t v25 = *(_OWORD *)v21;
    *unint64_t v24 = v19;
    v24[1] = v18;
    uint64_t v26 = *(void *)(v4 + 56) + v20;
    *(_OWORD *)uint64_t v26 = v25;
    *(void *)(v26 + 16) = v22;
    *(unsigned char *)(v26 + 24) = v23;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  char v29 = v27 + 2;
  if (v29 >= v13) {
    goto LABEL_26;
  }
  unint64_t v28 = *(void *)(v6 + 8 * v29);
  if (v28)
  {
    BOOL v9 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    BOOL v9 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v6 + 8 * v9);
    ++v29;
    if (v28) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;

  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  unint64_t v28 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Date?>);
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  BOOL v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_25:
    void *v1 = v7;
    return result;
  }
  int64_t v25 = v1;
  uint64_t result = (void *)(v6 + 64);
  BOOL v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    uint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v26 = v5 + 64;
  uint64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  BOOL v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  BOOL v13 = v12 & *(void *)(v5 + 64);
  unint64_t v27 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      uint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    unint64_t v22 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v22 >= v27) {
      goto LABEL_23;
    }
    int64_t v23 = *(void *)(v26 + 8 * v22);
    ++v10;
    if (!v23)
    {
      uint64_t v10 = v22 + 1;
      if (v22 + 1 >= v27) {
        goto LABEL_23;
      }
      int64_t v23 = *(void *)(v26 + 8 * v10);
      if (!v23) {
        break;
      }
    }
LABEL_22:
    BOOL v13 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v10 << 6);
LABEL_9:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v15);
    int64_t v18 = *v17;
    unint64_t v19 = v17[1];
    unint64_t v20 = *(void *)(v28 + 72) * v15;
    outlined init with copy of Date?(*(void *)(v5 + 56) + v20, (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for Date?);
    unint64_t v21 = (void *)(*(void *)(v7 + 48) + v16);
    *unint64_t v21 = v18;
    v21[1] = v19;
    outlined init with take of Date?((uint64_t)v4, *(void *)(v7 + 56) + v20, (uint64_t *)&demangling cache variable for type metadata for Date?);
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  unint64_t v24 = v22 + 2;
  if (v24 >= v27)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_25;
  }
  int64_t v23 = *(void *)(v26 + 8 * v24);
  if (v23)
  {
    uint64_t v10 = v24;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v10 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v10 >= v27) {
      goto LABEL_23;
    }
    int64_t v23 = *(void *)(v26 + 8 * v10);
    ++v24;
    if (v23) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  long long v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String?>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    void *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  BOOL v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  BOOL v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  BOOL v11 = -1;
  if (v10 < 64) {
    BOOL v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  BOOL v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      uint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    int64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      BOOL v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    int64_t v18 = *v17;
    unint64_t v19 = v17[1];
    unint64_t v20 = (void *)(*(void *)(v4 + 48) + v16);
    unint64_t v21 = *(_OWORD *)(*(void *)(v2 + 56) + v16);
    *unint64_t v20 = v18;
    v20[1] = v19;
    *(_OWORD *)(*(void *)(v4 + 56) + v16) = v21;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  unint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  int64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    BOOL v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    BOOL v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Double>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    void *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  BOOL v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  BOOL v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  BOOL v11 = -1;
  if (v10 < 64) {
    BOOL v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  BOOL v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      uint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    int64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      BOOL v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    int64_t v18 = v17[1];
    unint64_t v19 = 8 * v15;
    unint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  unint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  int64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    BOOL v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    BOOL v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id specialized _NativeDictionary.copy()(uint64_t *a1)
{
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v2 = v5;
    return result;
  }
  id result = (id)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v14) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v7 + 8 * v20);
    ++v10;
    if (!v21)
    {
      int64_t v10 = v20 + 1;
      if (v20 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v7 + 8 * v10);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v21 - 1) & v21;
    unint64_t v16 = __clz(__rbit64(v21)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    int64_t v18 = *(void **)(*(void *)(v3 + 48) + 8 * v16);
    uint64_t v19 = 32 * v16;
    outlined init with copy of Any(*(void *)(v3 + 56) + 32 * v16, (uint64_t)v23);
    *(void *)(*(void *)(v5 + 48) + v17) = v18;
    outlined init with take of Any(v23, (_OWORD *)(*(void *)(v5 + 56) + v19));
    id result = v18;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v14) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v7 + 8 * v22);
  if (v21)
  {
    int64_t v10 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v7 + 8 * v10);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.copy()(uint64_t *a1)
{
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v2 = v5;
    return result;
  }
  id result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v14) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v7 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    uint64_t v18 = *(void *)(*(void *)(v3 + 56) + v17);
    *(void *)(*(void *)(v5 + 48) + v17) = *(void *)(*(void *)(v3 + 48) + v17);
    *(void *)(*(void *)(v5 + 56) + v17) = v18;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v14) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v7 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void (*specialized _NativeDictionary.subscript.modify(void *a1, uint64_t a2, char a3))(uint64_t **a1, char a2)
{
  uint64_t v4 = v3;
  unint64_t v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[1] = a2;
  void v8[2] = v3;
  uint64_t v9 = *v3;
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  *((unsigned char *)v8 + 32) = v10 & 1;
  uint64_t v12 = *(void *)(v9 + 16);
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    char v15 = v10;
    uint64_t v16 = *(void *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[3] = v11;
      if (v15)
      {
LABEL_8:
        uint64_t v17 = *(void *)(*(void *)(*v4 + 56) + 8 * v11);
LABEL_12:
        *unint64_t v8 = v17;
        return _NativeDictionary.subscript.modifyspecialized ;
      }
LABEL_11:
      uint64_t v17 = 0;
      goto LABEL_12;
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<Int, [MOMapLocation]>);
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a3 & 1, &demangling cache variable for type metadata for _DictionaryStorage<Int, [MOMapLocation]>);
    unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v15 & 1) == (v19 & 1))
    {
      unint64_t v11 = v18;
      v8[3] = v18;
      if (v15) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  id result = (void (*)(uint64_t **, char))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void _NativeDictionary.subscript.modifyspecialized (uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  LOBYTE(v4) = *((unsigned char *)*a1 + 32);
  if (a2)
  {
    if (!v3) {
      goto LABEL_10;
    }
    unint64_t v5 = v2[3];
    uint64_t v6 = *(void **)v2[2];
    if ((*a1)[4]) {
      goto LABEL_9;
    }
    uint64_t v7 = v2[1];
    v6[(v5 >> 6) + 8] |= 1 << v5;
    uint64_t v8 = 8 * v5;
    *(void *)(v6[6] + v8) = v7;
    *(void *)(v6[7] + v8) = v3;
    uint64_t v9 = v6[2];
    BOOL v10 = __OFADD__(v9, 1);
    uint64_t v4 = v9 + 1;
    if (!v10)
    {
LABEL_13:
      void v6[2] = v4;
      goto LABEL_14;
    }
    __break(1u);
  }
  if (!v3)
  {
LABEL_10:
    if (v4) {
      specialized _NativeDictionary._delete(at:)(v2[3], *(void *)v2[2]);
    }
    goto LABEL_14;
  }
  unint64_t v5 = v2[3];
  uint64_t v6 = *(void **)v2[2];
  if ((v4 & 1) == 0)
  {
    uint64_t v11 = v2[1];
    v6[(v5 >> 6) + 8] |= 1 << v5;
    uint64_t v12 = 8 * v5;
    *(void *)(v6[6] + v12) = v11;
    *(void *)(v6[7] + v12) = v3;
    uint64_t v13 = v6[2];
    BOOL v10 = __OFADD__(v13, 1);
    uint64_t v4 = v13 + 1;
    if (v10)
    {
      __break(1u);
      return;
    }
    goto LABEL_13;
  }
LABEL_9:
  *(void *)(v6[7] + 8 * v5) = v3;
LABEL_14:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();

  free(v2);
}

unint64_t (*specialized _NativeDictionary.subscript.modify(uint64_t a1, unsigned __int8 a2, char a3))(unint64_t result, char a2)
{
  uint64_t v4 = v3;
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 9) = a2;
  uint64_t v8 = *v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  *(unsigned char *)(a1 + 10) = v9 & 1;
  uint64_t v11 = *(void *)(v8 + 16);
  char v12 = v9 ^ 1;
  uint64_t v13 = v11 + ((v9 ^ 1) & 1);
  if (__OFADD__(v11, (v9 ^ 1) & 1))
  {
    __break(1u);
  }
  else
  {
    unsigned __int8 v14 = v9;
    uint64_t v15 = *(void *)(v8 + 24);
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      *(void *)(a1 + 24) = v10;
      if (v14)
      {
LABEL_8:
        uint64_t v16 = *(void *)(*(void *)(*v4 + 56) + 8 * v10);
LABEL_12:
        *(void *)a1 = v16;
        *(unsigned char *)(a1 + 8) = v12 & 1;
        return _NativeDictionary.subscript.modifyspecialized ;
      }
LABEL_11:
      uint64_t v16 = 0;
      goto LABEL_12;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v18 & 1))
    {
      unint64_t v10 = v17;
      *(void *)(a1 + 24) = v17;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  id result = (unint64_t (*)(unint64_t, char))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t _NativeDictionary.subscript.modifyspecialized (unint64_t result, char a2)
{
  uint64_t v2 = *(void *)result;
  LOBYTE(v3) = *(unsigned char *)(result + 10);
  if (a2)
  {
    if (*(unsigned char *)(result + 8))
    {
      if ((*(unsigned char *)(result + 10) & 1) == 0) {
        return result;
      }
      return specialized _NativeDictionary._delete(at:)(*(void *)(result + 24), **(void **)(result + 16));
    }
    unint64_t v4 = *(void *)(result + 24);
    unint64_t v5 = **(void ***)(result + 16);
    if (*(unsigned char *)(result + 10)) {
      goto LABEL_13;
    }
    char v6 = *(unsigned char *)(result + 9);
    v5[(v4 >> 6) + 8] |= 1 << v4;
    *(unsigned char *)(v5[6] + v4) = v6;
    uint64_t v3 = v5[7];
    *(void *)(v3 + 8 * v4) = v2;
    uint64_t v7 = v5[2];
    BOOL v8 = __OFADD__(v7, 1);
    uint64_t v2 = v7 + 1;
    if (!v8) {
      goto LABEL_15;
    }
    __break(1u);
LABEL_12:
    unint64_t v4 = *(void *)(result + 24);
    unint64_t v5 = **(void ***)(result + 16);
    if ((v3 & 1) == 0)
    {
      char v9 = *(unsigned char *)(result + 9);
      v5[(v4 >> 6) + 8] |= 1 << v4;
      *(unsigned char *)(v5[6] + v4) = v9;
      *(void *)(v5[7] + 8 * v4) = v2;
      uint64_t v10 = v5[2];
      BOOL v8 = __OFADD__(v10, 1);
      uint64_t v2 = v10 + 1;
      if (v8)
      {
        __break(1u);
        return result;
      }
LABEL_15:
      _OWORD v5[2] = v2;
      return result;
    }
LABEL_13:
    *(void *)(v5[7] + 8 * v4) = v2;
    return result;
  }
  if ((*(unsigned char *)(result + 8) & 1) == 0) {
    goto LABEL_12;
  }
  if (*(unsigned char *)(result + 10)) {
    return specialized _NativeDictionary._delete(at:)(*(void *)(result + 24), **(void **)(result + 16));
  }
  return result;
}

void (*specialized _NativeDictionary.subscript.modify(void *a1, uint64_t a2, char a3))(uint64_t **a1)
{
  unint64_t v4 = v3;
  BOOL v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[1] = a2;
  void v8[2] = v3;
  uint64_t v9 = *v3;
  uint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  *((unsigned char *)v8 + 32) = v10 & 1;
  uint64_t v12 = *(void *)(v9 + 16);
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    char v15 = v10;
    uint64_t v16 = *(void *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[3] = v11;
      if (v15)
      {
LABEL_8:
        uint64_t v17 = *(void *)(*(void *)(*v4 + 56) + 8 * v11);
LABEL_12:
        *BOOL v8 = v17;
        return _NativeDictionary.subscript.modifyspecialized ;
      }
LABEL_11:
      uint64_t v17 = 0;
      goto LABEL_12;
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a3 & 1);
    uint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v15 & 1) == (v19 & 1))
    {
      uint64_t v11 = v18;
      v8[3] = v18;
      if (v15) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  type metadata accessor for MOSuggestionAssetsType(0);
  id result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void _NativeDictionary.subscript.modifyspecialized (uint64_t **a1)
{
  uint64_t v1 = *a1;
  specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(*a1, *((unsigned char *)*a1 + 32), (uint64_t *)(*a1)[2], (*a1)[3], (void *)(*a1)[1]);
  swift_bridgeObjectRelease();

  free(v1);
}

{
  uint64_t *v1;
  uint64_t v2;
  char v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t vars8;

  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  uint64_t v3 = *((unsigned char *)*a1 + 10);
  if ((*a1)[1])
  {
    if (*((unsigned char *)*a1 + 10))
    {
      unint64_t v4 = v1[5];
      unint64_t v5 = *(void *)v1[4];
      swift_arrayDestroy();
      specialized _NativeDictionary._delete(at:)(v4, v5);
    }
  }
  else
  {
    char v6 = v1[5];
    uint64_t v7 = *(void **)v1[4];
    if (v3)
    {
      *(void *)(v7[7] + 8 * v6) = v2;
    }
    else
    {
      BOOL v8 = (void *)v1[2];
      specialized _NativeDictionary._insert(at:key:value:)(v6, (uint64_t)v8, v1[3], *((unsigned char *)v1 + 9) & 1, v2, v7);
      uint64_t v9 = v8;
    }
  }

  free(v1);
}

void (*specialized _NativeDictionary.subscript.modify(void *a1, void *a2, Swift::UInt a3, char a4, char a5))(uint64_t **a1)
{
  char v6 = v5;
  uint64_t v12 = malloc(0x30uLL);
  *a1 = v12;
  v12[3] = a3;
  v12[4] = v6;
  *((unsigned char *)v12 + 9) = a4;
  void v12[2] = a2;
  char v13 = a4 & 1;
  uint64_t v14 = *v6;
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, v13);
  *((unsigned char *)v12 + 10) = v15 & 1;
  uint64_t v17 = *(void *)(v14 + 16);
  char v18 = v15 ^ 1;
  uint64_t v19 = v17 + ((v15 ^ 1) & 1);
  if (__OFADD__(v17, (v15 ^ 1) & 1))
  {
    __break(1u);
  }
  else
  {
    unsigned __int8 v20 = v15;
    uint64_t v21 = *(void *)(v14 + 24);
    if (v21 >= v19 && (a5 & 1) != 0)
    {
LABEL_7:
      v12[5] = v16;
      if (v20)
      {
LABEL_8:
        uint64_t v22 = *(void *)(*(void *)(*v6 + 56) + 8 * v16);
LABEL_12:
        void *v12 = v22;
        *((unsigned char *)v12 + 8) = v18 & 1;
        return _NativeDictionary.subscript.modifyspecialized ;
      }
LABEL_11:
      uint64_t v22 = 0;
      goto LABEL_12;
    }
    if (v21 >= v19 && (a5 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, a5 & 1);
    unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, v13);
    if ((v20 & 1) == (v24 & 1))
    {
      unint64_t v16 = v23;
      v12[5] = v23;
      if (v20) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  id result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t (*specialized Dictionary._Variant.asNative.modify(void *a1))()
{
  *a1 = *v1;
  a1[1] = v1;
  void *v1 = 0x8000000000000000;
  return Dictionary._Variant.asNative.modifyspecialized ;
}

uint64_t (*specialized Dictionary._Variant.asNative.modify(void *a1))(uint64_t result)
{
  *a1 = *v1;
  a1[1] = v1;
  void *v1 = 0x8000000000000000;
  return Dictionary._Variant.asNative.modifyspecialized ;
}

uint64_t Dictionary._Variant.asNative.modifyspecialized (uint64_t result)
{
  **(void **)(result + 8) = *(void *)result;
  return result;
}

uint64_t *specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(uint64_t *result, char a2, uint64_t *a3, unint64_t a4, void *a5)
{
  uint64_t v7 = *result;
  if (*result)
  {
    BOOL v8 = (void *)*a3;
    if (a2)
    {
      *(void *)(v8[7] + 8 * a4) = v7;
    }
    else
    {
      v8[(a4 >> 6) + 8] |= 1 << a4;
      uint64_t v9 = 8 * a4;
      *(void *)(v8[6] + v9) = a5;
      *(void *)(v8[7] + v9) = v7;
      uint64_t v10 = v8[2];
      BOOL v11 = __OFADD__(v10, 1);
      uint64_t v12 = v10 + 1;
      if (v11)
      {
        __break(1u);
        return result;
      }
      void v8[2] = v12;
      id v13 = a5;
    }
  }
  else if (a2)
  {
    type metadata accessor for MOSuggestionAssetsType(0);
    swift_arrayDestroy();
    specialized _NativeDictionary._delete(at:)(a4, *a3);
  }

  return (uint64_t *)swift_bridgeObjectRetain();
}

uint64_t specialized static MOSuggestionInterstitialListAssetViewModel.assetVisualSubTypesToCountString(_:includeCount:separator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Locale();
  __chkstk_darwin(v8 - 8);
  uint64_t v85 = (char *)v83 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v10 - 8);
  uint64_t v87 = (char *)v83 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a1 + 16))
  {
    unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(0xDu);
    if (v13)
    {
      if (*(void *)(a1 + 16))
      {
        uint64_t v14 = *(void *)(*(void *)(a1 + 56) + 8 * v12);
        unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(0xCu);
        if (v16)
        {
          uint64_t v17 = *(void *)(*(void *)(a1 + 56) + 8 * v15);
          BOOL v18 = __OFADD__(v17, v14);
          unint64_t v19 = v17 + v14;
          if (v18)
          {
            __break(1u);
          }
          else
          {
            swift_bridgeObjectRetain();
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            id v88 = (void *)a1;
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v19, 12, isUniquelyReferenced_nonNull_native);
            a1 = (uint64_t)v88;
            swift_bridgeObjectRelease();
            unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(0xDu);
            if ((v22 & 1) == 0) {
              goto LABEL_10;
            }
            unint64_t v19 = v21;
            char v23 = swift_isUniquelyReferenced_nonNull_native();
            id v88 = (void *)a1;
            if (v23) {
              goto LABEL_8;
            }
          }
          specialized _NativeDictionary.copy()();
          a1 = (uint64_t)v88;
LABEL_8:
          specialized _NativeDictionary._delete(at:)(v19, a1);
          swift_bridgeObjectRelease();
          goto LABEL_10;
        }
      }
    }
  }
  swift_bridgeObjectRetain();
LABEL_10:
  uint64_t v24 = swift_bridgeObjectRetain();
  int64_t v25 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy16MomentsUIService30MOSuggestionAssetVisualSubTypeOSiG_AH_Sits5NeverOTg504_s16d11UIService30fghij38OSiACSiIgyydd_AC3key_Si5valuetAC_Sits5k130OIegnrzr_TR04_s16a11UIService42c16InterstitialListd17ViewModelC32assetef53TypesToCountString_07includeN09separatorSSSDyAA0cfjK4G29N36G_SbSStFZAH_SitAH_SitXEfU_Tf3nnnpf_nTf1cn_n(v24);
  swift_bridgeObjectRelease();
  id v88 = v25;
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v88, specialized _ContiguousArrayBuffer._consumeAndCreateNew(), specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
  swift_bridgeObjectRelease();
  uint64_t v26 = (uint64_t)v88;
  int64_t v27 = v88[2];
  unint64_t v28 = _swiftEmptyArrayStorage;
  if (v27)
  {
    v83[2] = v83;
    v83[3] = a1;
    v83[4] = a3;
    v83[5] = a4;
    id v90 = _swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27, 0);
    v83[1] = v26;
    char v29 = (uint64_t *)(v26 + 40);
    unint64_t v28 = v90;
    unint64_t v86 = 0x80000001001E4300;
    *(void *)&long long v30 = 134217984;
    long long v84 = v30;
    do
    {
      uint64_t v31 = *((unsigned __int8 *)v29 - 8);
      uint64_t v32 = *v29;
      if (a2)
      {
        MOSuggestionAssetVisualSubType.localizableKeyWithCount(count:)(v32, *((unsigned char *)v29 - 8));
        static Locale.current.getter();
        uint64_t countAndFlagsBits = String.init(localized:table:bundle:locale:comment:)();
        object = v34;
      }
      else if (v32 <= 1)
      {
        if (one-time initialization token for localizableStringKey != -1) {
          swift_once();
        }
        char v42 = static MOSuggestionAssetVisualSubType.localizableStringKey;
        if (!*((void *)static MOSuggestionAssetVisualSubType.localizableStringKey + 2)
          || (unint64_t v43 = specialized __RawDictionaryStorage.find<A>(_:)(v31), (v44 & 1) == 0))
        {
          if (serverManager._connectionProperties != (NSMutableDictionary *)-1) {
            swift_once();
          }
          uint64_t v69 = type metadata accessor for Logger();
          __swift_project_value_buffer(v69, (uint64_t)static MOAngelLogger.assets);
          char v70 = Logger.logObject.getter();
          os_log_type_t v71 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v70, v71))
          {
            uint64_t v72 = swift_slowAlloc();
            *(_DWORD *)uint64_t v72 = v84;
            *(void *)(v72 + 4) = v31;
            uint64_t v73 = v70;
            os_log_type_t v74 = v71;
            uint64_t v75 = "(Singular) Unknown visual subtype: %ld";
            goto LABEL_39;
          }
LABEL_40:

          uint64_t countAndFlagsBits = 0;
          object = (void *)0xE000000000000000;
          goto LABEL_41;
        }
        int v45 = (uint64_t *)(v42[7] + 16 * v43);
        uint64_t v47 = *v45;
        uint64_t v46 = (void *)v45[1];
        swift_bridgeObjectRetain();
        uint64_t v48 = StaticString.description.getter();
        uint64_t v50 = v49;
        uint64_t v51 = a2;
        id v52 = [self mainBundle];
        v91._object = v50;
        v53._uint64_t countAndFlagsBits = v47;
        v53._object = v46;
        v54._uint64_t countAndFlagsBits = 0;
        v54._object = (void *)0xE000000000000000;
        v91._uint64_t countAndFlagsBits = v48;
        Swift::String v55 = NSLocalizedString(_:tableName:bundle:value:comment:)(v53, (Swift::String_optional)0, (NSBundle)v52, v54, v91);
        uint64_t countAndFlagsBits = v55._countAndFlagsBits;
        object = v55._object;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        a2 = v51;
      }
      else
      {
        if (one-time initialization token for pluralLocalizableStringKey != -1) {
          swift_once();
        }
        BOOL v36 = static MOSuggestionAssetVisualSubType.pluralLocalizableStringKey;
        if (*((void *)static MOSuggestionAssetVisualSubType.pluralLocalizableStringKey + 2)
          && (unint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(v31), (v38 & 1) != 0))
        {
          uint64_t v39 = (uint64_t *)(v36[7] + 16 * v37);
          uint64_t v41 = *v39;
          int64_t v40 = (void *)v39[1];
          swift_bridgeObjectRetain();
        }
        else
        {
          if (one-time initialization token for localizableStringKey != -1) {
            swift_once();
          }
          char v56 = static MOSuggestionAssetVisualSubType.localizableStringKey;
          if (!*((void *)static MOSuggestionAssetVisualSubType.localizableStringKey + 2)
            || (unint64_t v57 = specialized __RawDictionaryStorage.find<A>(_:)(v31), (v58 & 1) == 0))
          {
            if (serverManager._connectionProperties != (NSMutableDictionary *)-1) {
              swift_once();
            }
            uint64_t v76 = type metadata accessor for Logger();
            __swift_project_value_buffer(v76, (uint64_t)static MOAngelLogger.assets);
            char v70 = Logger.logObject.getter();
            os_log_type_t v77 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v70, v77))
            {
              uint64_t v72 = swift_slowAlloc();
              *(_DWORD *)uint64_t v72 = v84;
              *(void *)(v72 + 4) = v31;
              uint64_t v73 = v70;
              os_log_type_t v74 = v77;
              uint64_t v75 = "(Plural) Unknown visual subtype: %ld";
LABEL_39:
              _os_log_impl((void *)&_mh_execute_header, v73, v74, v75, (uint8_t *)v72, 0xCu);
              swift_slowDealloc();
            }
            goto LABEL_40;
          }
          uint64_t v59 = (uint64_t *)(v56[7] + 16 * v57);
          uint64_t v60 = v59[1];
          id v88 = (void *)*v59;
          char v89 = (void *)v60;
          swift_bridgeObjectRetain();
          v61._uint64_t countAndFlagsBits = 115;
          v61._object = (void *)0xE100000000000000;
          String.append(_:)(v61);
          uint64_t v41 = (uint64_t)v88;
          int64_t v40 = v89;
        }
        uint64_t v62 = StaticString.description.getter();
        unint64_t v64 = v63;
        id v65 = [self mainBundle];
        v92._object = v64;
        v66._uint64_t countAndFlagsBits = v41;
        v66._object = v40;
        v67._uint64_t countAndFlagsBits = 0;
        v67._object = (void *)0xE000000000000000;
        v92._uint64_t countAndFlagsBits = v62;
        Swift::String v68 = NSLocalizedString(_:tableName:bundle:value:comment:)(v66, (Swift::String_optional)0, (NSBundle)v65, v67, v92);
        uint64_t countAndFlagsBits = v68._countAndFlagsBits;
        object = v68._object;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
LABEL_41:
      id v90 = v28;
      unint64_t v79 = v28[2];
      unint64_t v78 = v28[3];
      if (v79 >= v78 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v78 > 1, v79 + 1, 1);
        unint64_t v28 = v90;
      }
      v29 += 2;
      void v28[2] = v79 + 1;
      id v80 = &v28[2 * v79];
      v80[4] = countAndFlagsBits;
      v80[5] = object;
      --v27;
    }
    while (v27);
  }
  swift_release();
  swift_bridgeObjectRelease();
  id v88 = v28;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v81 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v81;
}

uint64_t specialized static MOSuggestionInterstitialListAssetViewModel.assetVisualSubTypesToCountString(_:includeCount:separator:)(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v31 = a3;
  uint64_t v32 = a4;
  int v30 = a2;
  uint64_t v5 = type metadata accessor for NSFastEnumerationIterator();
  uint64_t v29 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = a1;
  NSSet.makeIterator()();
  id v35 = v8;

  uint64_t v9 = _s10Foundation4UUIDVACSHAAWlTm_1(&lazy protocol witness table cache variable for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator, (void (*)(uint64_t))&type metadata accessor for NSFastEnumerationIterator);
  dispatch thunk of IteratorProtocol.next()();
  if (!v41)
  {
    uint64_t v10 = &_swiftEmptyDictionarySingleton;
LABEL_19:
    (*(void (**)(char *, uint64_t))(v29 + 8))(v7, v5);
    uint64_t v26 = specialized static MOSuggestionInterstitialListAssetViewModel.assetVisualSubTypesToCountString(_:includeCount:separator:)((uint64_t)v10, v30 & 1, v31, v32);
    swift_bridgeObjectRelease();
    return v26;
  }
  uint64_t v10 = &_swiftEmptyDictionarySingleton;
  uint64_t v33 = v9;
  char v34 = (char *)&type metadata for Any + 8;
  while (1)
  {
    outlined init with take of Any(&v40, &v38);
    outlined init with copy of Any((uint64_t)&v38, (uint64_t)&v37);
    if (!swift_dynamicCast()) {
      goto LABEL_5;
    }
    uint64_t v11 = v5;
    unsigned __int8 v12 = v36;
    __swift_project_boxed_opaque_existential_1(&v38, v39);
    id v13 = [v35 countForObject:_bridgeAnythingToObjectiveC<A>(_:)()];
    swift_unknownObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v37 = v10;
    unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v12);
    uint64_t v17 = v10[2];
    BOOL v18 = (v15 & 1) == 0;
    uint64_t v19 = v17 + v18;
    if (__OFADD__(v17, v18)) {
      break;
    }
    char v20 = v15;
    if (v10[3] >= v19)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v10 = v37;
        if ((v15 & 1) == 0) {
          goto LABEL_14;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        uint64_t v10 = v37;
        if ((v20 & 1) == 0) {
          goto LABEL_14;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, isUniquelyReferenced_nonNull_native);
      unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v12);
      if ((v20 & 1) != (v22 & 1)) {
        goto LABEL_22;
      }
      unint64_t v16 = v21;
      uint64_t v10 = v37;
      if ((v20 & 1) == 0)
      {
LABEL_14:
        v10[(v16 >> 6) + 8] |= 1 << v16;
        *(unsigned char *)(v10[6] + v16) = v12;
        *(void *)(v10[7] + 8 * v16) = v13;
        uint64_t v23 = v10[2];
        BOOL v24 = __OFADD__(v23, 1);
        uint64_t v25 = v23 + 1;
        if (v24) {
          goto LABEL_21;
        }
        void v10[2] = v25;
        goto LABEL_4;
      }
    }
    *(void *)(v10[7] + 8 * v16) = v13;
LABEL_4:
    swift_bridgeObjectRelease();
    uint64_t v5 = v11;
LABEL_5:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v38);
    dispatch thunk of IteratorProtocol.next()();
    if (!v41) {
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t specialized static MOSuggestionInterstitialListAssetViewModel.placeHolders(count:)(unint64_t result)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v1 = result;
    if (result)
    {
      type metadata accessor for MOSuggestionInterstitialListAssetViewModel();
      do
      {
        swift_allocObject();
        MOSuggestionInterstitialListAssetViewModel.init(id:subViewModels:topLevelGroupHeading:dates:titles:icons:assetVisualSubType:selectable:isLoadingPlaceHolder:isFallback:)(0x6C6F686563616C70, 0xEB00000000726564, 0, 0, 0, 0, 0, 0, 26, 1, 1, 0);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        --v1;
      }
      while (v1);
      return (unint64_t)_swiftEmptyArrayStorage;
    }
    else
    {
      return (unint64_t)_swiftEmptyArrayStorage;
    }
  }
  return result;
}

void *specialized Sequence.compactMap<A>(_:)(void *a1, void *a2)
{
  id v28 = a2;
  uint64_t v3 = type metadata accessor for NSFastEnumerationIterator();
  uint64_t v17 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = a1;
  NSSet.makeIterator()();

  _s10Foundation4UUIDVACSHAAWlTm_1(&lazy protocol witness table cache variable for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator, (void (*)(uint64_t))&type metadata accessor for NSFastEnumerationIterator);
  dispatch thunk of IteratorProtocol.next()();
  if (v27)
  {
    uint64_t v7 = _swiftEmptyArrayStorage;
    BOOL v18 = v5;
    uint64_t v19 = v3;
    do
    {
      outlined init with take of Any(&v26, &v24);
      outlined init with copy of Any((uint64_t)&v24, (uint64_t)v23);
      if (swift_dynamicCast())
      {
        uint64_t v8 = v20;
        uint64_t v9 = v21;
        char v10 = v22;
        __swift_project_boxed_opaque_existential_1(&v24, v25);
        id v11 = [v28 countForObject:_bridgeAnythingToObjectiveC<A>(_:)()];
        swift_unknownObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
        }
        unint64_t v13 = v7[2];
        unint64_t v12 = v7[3];
        if (v13 >= v12 >> 1) {
          uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v7);
        }
        void v7[2] = v13 + 1;
        uint64_t v14 = &v7[4 * v13];
        void v14[4] = v8;
        v14[5] = v9;
        *((unsigned char *)v14 + 48) = v10;
        v14[7] = v11;
        uint64_t v5 = v18;
        uint64_t v3 = v19;
      }
      else
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
      }
      dispatch thunk of IteratorProtocol.next()();
    }
    while (v27);
  }
  else
  {
    uint64_t v7 = _swiftEmptyArrayStorage;
  }
  (*(void (**)(char *, uint64_t))(v17 + 8))(v5, v3);
  return v7;
}

uint64_t specialized static MOSuggestionInterstitialListAssetViewModel.assetTypeDictionaryToCountString(dict:)(uint64_t a1)
{
  uint64_t v4 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy16MomentsUIService19MOAssetAndMediaTypeVSiG_AH_Sits5NeverOTg504_s16d11UIService19fghi38VSiACSiIggyod_AC3key_Si5valuetAC_Sits5j129OIegnrzr_TR04_s16a61UIService42MOSuggestionInterstitialListAssetViewModelC32assetf38DictionaryToCountString4dictSSSDyAA015cdE27J0M32G_tFZAG_SitAG_SitXEfU_Tf3nnnpf_nTf1cn_n(a1);
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)(&v4);
  swift_bridgeObjectRelease();
  unint64_t v1 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay16MomentsUIService19MOAssetAndMediaTypeV_SitG_SSs5NeverOTg504_s16d11UIService19fghi21VSiSSIggyo_AC_SitSSs5j137OIegnrzr_TR04_s16a61UIService42MOSuggestionInterstitialListAssetViewModelC25assetf44SetToCountStringySSSo09NSCountedK0CFZSSAA015cdE13J0V_P16XEfU1_Tf3nnnpf_nTf1cn_n((uint64_t)v4);
  swift_release();
  uint64_t v4 = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v2 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v2;
}

BOOL specialized MOSuggestionInterstitialListAssetViewModel.sameHourMin(startDate:endDate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v43 = a2;
  uint64_t v41 = a1;
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v45 = *(void *)(v2 - 8);
  uint64_t v46 = v2;
  uint64_t v3 = __chkstk_darwin(v2);
  char v44 = (char *)v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v47 = (char *)v33 - v5;
  uint64_t v6 = type metadata accessor for Calendar.Component();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Calendar();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Calendar.current.getter();
  LODWORD(v40) = enum case for Calendar.Component.hour(_:);
  uint64_t v14 = *(void (**)(char *))(v7 + 104);
  v14(v9);
  uint64_t v42 = Calendar.component(_:from:)();
  char v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v9, v6);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v11 + 8);
  v16(v13, v10);
  static Calendar.current.getter();
  long long v38 = v14;
  v33[1] = v7 + 104;
  ((void (*)(char *, void, uint64_t))v14)(v9, v40, v6);
  uint64_t v17 = v43;
  uint64_t v18 = Calendar.component(_:from:)();
  uint64_t v34 = v6;
  uint64_t v35 = v7 + 8;
  unint64_t v37 = v15;
  v15(v9, v6);
  uint64_t v39 = v11 + 8;
  uint64_t v40 = v10;
  unsigned __int8 v36 = v16;
  v16(v13, v10);
  uint64_t v19 = v46;
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 16);
  v20(v47, v41, v46);
  v20(v44, v17, v19);
  if (v42 == v18)
  {
    static Calendar.current.getter();
    LODWORD(v42) = enum case for Calendar.Component.minute(_:);
    uint64_t v21 = v34;
    char v22 = v38;
    v38(v9);
    uint64_t v43 = Calendar.component(_:from:)();
    uint64_t v23 = v37;
    v37(v9, v21);
    uint64_t v24 = v40;
    uint64_t v25 = v36;
    v36(v13, v40);
    static Calendar.current.getter();
    ((void (*)(char *, void, uint64_t))v22)(v9, v42, v21);
    long long v26 = v44;
    uint64_t v27 = Calendar.component(_:from:)();
    v23(v9, v21);
    v25(v13, v24);
    uint64_t v28 = v46;
    uint64_t v29 = *(void (**)(char *, uint64_t))(v45 + 8);
    v29(v26, v46);
    v29(v47, v28);
    return v43 == v27;
  }
  else
  {
    uint64_t v31 = *(void (**)(char *, uint64_t))(v45 + 8);
    uint64_t v32 = v46;
    v31(v44, v46);
    v31(v47, v32);
    return 0;
  }
}

uint64_t specialized MOSuggestionInterstitialListAssetViewModel.timeRangeRepresentation(startTime:endTime:)(uint64_t a1, uint64_t a2)
{
  if (!specialized MOSuggestionInterstitialListAssetViewModel.sameHourMin(startDate:endDate:)(a1, a2))
  {
    if (one-time initialization token for shortTimeFormatter != -1) {
      swift_once();
    }
    uint64_t v2 = (void *)static MODateFormatter.shortTimeFormatter;
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    id v4 = [v2 stringForObjectValue:isa];

    if (v4)
    {
      uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v7 = v6;

      uint64_t v8 = (void *)static MODateFormatter.shortTimeFormatter;
      Class v9 = Date._bridgeToObjectiveC()().super.isa;
      id v10 = [v8 stringForObjectValue:v9];

      if (v10)
      {
        uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();

        if (one-time initialization token for TIME_SEPARATOR != -1) {
          swift_once();
        }
        Swift::String v12 = (Swift::String)static MOSuggestionInterstitialListAssetViewModel.TIME_SEPARATOR;
        swift_bridgeObjectRetain();
        String.append(_:)(v12);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v13._uint64_t countAndFlagsBits = v5;
        v13._object = v7;
        String.append(_:)(v13);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v11;
      }
      swift_bridgeObjectRelease();
    }
  }
  if (one-time initialization token for shortTimeFormatter != -1) {
    swift_once();
  }
  char v15 = (void *)static MODateFormatter.shortTimeFormatter;
  Class v16 = Date._bridgeToObjectiveC()().super.isa;
  id v17 = [v15 stringForObjectValue:v16];

  if (!v17) {
    return 0;
  }
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v14;
}

uint64_t specialized MOSuggestionInterstitialListAssetViewModel.timeRangeWithSameDayRepresentation(startTime:endTime:)(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for yearDateFormatter != -1) {
    swift_once();
  }
  id v4 = (void *)static MODateFormatter.yearDateFormatter;
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  id v6 = [v4 stringForObjectValue:isa];

  if (v6)
  {
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v8 = specialized MOSuggestionInterstitialListAssetViewModel.timeRangeRepresentation(startTime:endTime:)(a1, a2);
    if (v9)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v9;
      swift_bridgeObjectRetain();
      v12._uint64_t countAndFlagsBits = 0x20A280E220;
      v12._object = (void *)0xA500000000000000;
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v13._uint64_t countAndFlagsBits = v10;
      v13._object = v11;
      String.append(_:)(v13);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7;
    }
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t specialized MOSuggestionInterstitialListAssetViewModel.singleDateRangeRepresentation(_:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  __chkstk_darwin(v2 - 8);
  id v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for MOSuggestionSheetAssetDateRange(0);
  outlined init with copy of Date?(a1 + *(int *)(v9 + 20), (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for Date?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    outlined destroy of Any?((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for Date?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    if (specialized MOSuggestionInterstitialListAssetViewModel.sameHourMin(startDate:endDate:)(a1, (uint64_t)v8))
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
    else
    {
      uint64_t v10 = specialized MOSuggestionInterstitialListAssetViewModel.timeRangeWithSameDayRepresentation(startTime:endTime:)(a1, (uint64_t)v8);
      uint64_t v12 = v11;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if (v12) {
        return v10;
      }
    }
  }
  if (one-time initialization token for yearDateTimeFormatter != -1) {
    swift_once();
  }
  Swift::String v13 = (void *)static MODateFormatter.yearDateTimeFormatter;
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  id v15 = [v13 stringForObjectValue:isa];

  if (!v15) {
    return 0;
  }
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v10;
}

uint64_t specialized MOSuggestionInterstitialListAssetViewModel.timeRangeWithDifferentDaysRepresentation(startTime:endTime:)()
{
  if (one-time initialization token for yearDateFormatter != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static MODateFormatter.yearDateFormatter;
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  id v2 = [v0 stringForObjectValue:isa];

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  id v4 = (void *)static MODateFormatter.yearDateFormatter;
  Class v5 = Date._bridgeToObjectiveC()().super.isa;
  id v6 = [v4 stringForObjectValue:v5];

  if (!v6)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  if (one-time initialization token for TIME_SEPARATOR != -1) {
    swift_once();
  }
  Swift::String v10 = (Swift::String)static MOSuggestionInterstitialListAssetViewModel.TIME_SEPARATOR;
  swift_bridgeObjectRetain();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v11._uint64_t countAndFlagsBits = v7;
  v11._object = v9;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t base witness table accessor for Equatable in MOSuggestionInterstitialListAssetViewModel()
{
  return _s10Foundation4UUIDVACSHAAWlTm_1(&lazy protocol witness table cache variable for type MOSuggestionInterstitialListAssetViewModel and conformance MOSuggestionInterstitialListAssetViewModel, (void (*)(uint64_t))type metadata accessor for MOSuggestionInterstitialListAssetViewModel);
}

uint64_t type metadata accessor for MOSuggestionInterstitialListAssetViewModel()
{
  uint64_t result = type metadata singleton initialization cache for MOSuggestionInterstitialListAssetViewModel;
  if (!type metadata singleton initialization cache for MOSuggestionInterstitialListAssetViewModel) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10007FA1C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 176))();
  *a2 = result;
  return result;
}

uint64_t sub_10007FA68(uint64_t a1, uint64_t a2)
{
  id v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 184);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_10007FABC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 200))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_10007FB08(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 208);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_10007FB70@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 224))();
  *a2 = result;
  return result;
}

uint64_t sub_10007FBBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 232);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_10007FC10@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 248))();
  *a2 = result;
  return result;
}

uint64_t sub_10007FC5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 256);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_10007FCB8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 272))();
  *a2 = result;
  return result;
}

uint64_t sub_10007FD0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 280);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_10007FD68@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 296))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_10007FDC0(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 304))(*a1);
}

uint64_t ObjC metadata update function for MOSuggestionInterstitialListAssetViewModel()
{
  return type metadata accessor for MOSuggestionInterstitialListAssetViewModel();
}

uint64_t type metadata completion function for MOSuggestionInterstitialListAssetViewModel()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t outlined init with copy of MOSuggestionSheetAssetDateRange(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of MOSuggestionSheetAssetDateRange(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of Date?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of Date?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _s10Foundation4UUIDVACSHAAWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

UIFont __swiftcall UIFont.bold()()
{
  id v1 = [v0 fontDescriptor];
  id v2 = [v1 fontDescriptorWithSymbolicTraits:2];

  if (v2)
  {
    id v4 = [self fontWithDescriptor:v2 size:0.0];

    return (UIFont)v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void UILabel.setLineSpacing(lineSpacing:lineHeightMultiple:baselineOffset:font:)(void *a1, double a2, double a3, double a4)
{
  id v9 = [v4 text];
  if (v9)
  {
    Swift::String v10 = v9;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    id v11 = [objc_allocWithZone((Class)NSMutableParagraphStyle) init];
    [v11 setLineSpacing:a2];
    [v11 setLineBreakMode:4];
    [v11 setLineHeightMultiple:a3];
    LODWORD(v12) = 0.5;
    [v11 setHyphenationFactor:v12];
    id v13 = [v4 attributedText];
    if (v13)
    {
      NSString v14 = v13;
      swift_bridgeObjectRelease();
      id v15 = [objc_allocWithZone((Class)NSMutableAttributedString) initWithAttributedString:v14];
    }
    else
    {
      id v16 = objc_allocWithZone((Class)NSMutableAttributedString);
      NSString v14 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v15 = [v16 initWithString:v14];
    }
    uint64_t v17 = v15;

    if (a1)
    {
      id v18 = a1;
      [v17 addAttribute:NSFontAttributeName value:v18 range:0, [v17 length]];
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(NSAttributedStringKey, Any)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1001DA390;
    *(void *)(inited + 32) = NSBaselineOffsetAttributeName;
    *(double *)(inited + 40) = a4;
    *(void *)(inited + 64) = &type metadata for CGFloat;
    *(void *)(inited + 72) = NSParagraphStyleAttributeName;
    *(void *)(inited + 104) = type metadata accessor for NSMutableParagraphStyle();
    *(void *)(inited + 80) = v11;
    uint64_t v20 = NSBaselineOffsetAttributeName;
    uint64_t v21 = NSParagraphStyleAttributeName;
    id v22 = v11;
    specialized Dictionary.init(dictionaryLiteral:)(inited);
    type metadata accessor for NSAttributedStringKey(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v17 addAttributes:isa range:0 length:[v17 length]];

    [v4 setAttributedText:v17];
  }
}

UIFont __swiftcall UIFont.withWeight(_:)(UIFontWeight a1)
{
  id v2 = v1;
  id v4 = [v1 fontDescriptor];
  id v5 = [v4 fontAttributes];

  type metadata accessor for UIFontDescriptorAttributeName(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UIFontDescriptorAttributeName and conformance UIFontDescriptorAttributeName, type metadata accessor for UIFontDescriptorAttributeName);
  uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v33 = v6;
  if (!*(void *)(v6 + 16))
  {
    long long v31 = 0u;
    long long v32 = 0u;
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = UIFontDescriptorTraitsAttribute;
  uint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v7);
  if ((v9 & 1) == 0)
  {
    long long v31 = 0u;
    long long v32 = 0u;

    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  outlined init with copy of Any(*(void *)(v6 + 56) + 32 * v8, (uint64_t)&v31);

  swift_bridgeObjectRelease();
  if (!*((void *)&v32 + 1))
  {
LABEL_8:
    outlined destroy of Any?((uint64_t)&v31);
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UIFontDescriptorTraitKey : Any]);
  if (!swift_dynamicCast())
  {
LABEL_9:
    unint64_t v10 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&_swiftEmptyArrayStorage);
    goto LABEL_10;
  }
  unint64_t v10 = *(void *)&v30[0];
LABEL_10:
  type metadata accessor for UIFontWeight(0);
  *((void *)&v32 + 1) = v11;
  *(UIFontWeight *)&long long v31 = a1;
  outlined init with take of Any(&v31, v30);
  double v12 = UIFontWeightTrait;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v30, v12, isUniquelyReferenced_nonNull_native);

  swift_bridgeObjectRelease();
  NSString v14 = UIFontDescriptorNameAttribute;
  specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v14, specialized __RawDictionaryStorage.find<A>(_:), (void (*)(void))specialized _NativeDictionary.copy(), &v31);

  outlined destroy of Any?((uint64_t)&v31);
  *((void *)&v32 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UIFontDescriptorTraitKey : Any]);
  *(void *)&long long v31 = v10;
  outlined init with take of Any(&v31, v30);
  id v15 = UIFontDescriptorTraitsAttribute;
  uint64_t v16 = v33;
  char v17 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v30, v15, v17);

  swift_bridgeObjectRelease();
  id v18 = UIFontDescriptorFamilyAttribute;
  id v19 = [v2 familyName];
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v22 = v21;

  *((void *)&v32 + 1) = &type metadata for String;
  *(void *)&long long v31 = v20;
  *((void *)&v31 + 1) = v22;
  outlined init with take of Any(&v31, v30);
  char v23 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v30, v18, v23);
  uint64_t v33 = v16;

  swift_bridgeObjectRelease();
  id v24 = objc_allocWithZone((Class)UIFontDescriptor);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v26 = [v24 initWithFontAttributes:isa];

  [v2 pointSize];
  id v28 = [self fontWithDescriptor:v26 size:v27];

  return (UIFont)v28;
}

Swift::Void __swiftcall UILabel.styleDateWithWeekday(weekday:)(Swift::String weekday)
{
  id v2 = v1;
  object = weekday._object;
  uint64_t countAndFlagsBits = weekday._countAndFlagsBits;
  id v5 = [v2 attributedText];

  if (!v5) {
    return;
  }
  id v6 = [v2 attributedText];
  if (!v6)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v7 = v6;
  id v14 = [objc_allocWithZone((Class)NSMutableAttributedString) initWithAttributedString:v6];

  id v8 = [v2 font];
  if (!v8)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  char v9 = v8;
  id v10 = [v8 fontDescriptor];
  id v11 = [v10 fontDescriptorWithSymbolicTraits:2];

  if (!v11)
  {
LABEL_11:
    __break(1u);
    return;
  }
  id v12 = [self fontWithDescriptor:v11 size:0.0];

  v13._uint64_t countAndFlagsBits = countAndFlagsBits;
  v13._object = object;
  NSMutableAttributedString.setPrefixFont(font:forText:)((UIFont)v12, v13);

  [v2 setAttributedText:v14];
}

Swift::Void __swiftcall NSMutableAttributedString.setPrefixFont(font:forText:)(UIFont font, Swift::String forText)
{
  id v4 = [v2 mutableString];
  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [v4 rangeOfString:v5 options:1];
  id v8 = v7;

  if (v6)
  {
    if (v6 == (id)NSNotFound.getter()) {
      return;
    }
    if (__OFSUB__(v6, 1))
    {
      __break(1u);
    }
    else if ((((unint64_t)v6 - 1) & 0x8000000000000000) == 0)
    {
      if (v6 != (id)0x8000000000000000)
      {
        NSAttributedStringKey v9 = NSFontAttributeName;
        id v12 = v6;
        id v10 = v2;
        Class isa = font.super.isa;
        goto LABEL_9;
      }
LABEL_14:
      __break(1u);
      return;
    }
    __break(1u);
    goto LABEL_14;
  }
  NSAttributedStringKey v9 = NSFontAttributeName;
  id v10 = v2;
  Class isa = font.super.isa;
  id v12 = v8;
LABEL_9:

  [v10 addAttribute:v9 value:isa range:0];
}

Swift::String_optional __swiftcall String.firstWord()()
{
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v0 = (void *)StringProtocol.components<A>(separatedBy:)();
  if (v0[2])
  {
    uint64_t v1 = v0[4];
    id v2 = (void *)v0[5];
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v1 = 0;
    id v2 = 0;
  }
  swift_bridgeObjectRelease();
  uint64_t v3 = v1;
  id v4 = v2;
  result.value._object = v4;
  result.value._uint64_t countAndFlagsBits = v3;
  return result;
}

uint64_t String.removingNumbers.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CharacterSet();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10[0] = a1;
  v10[1] = a2;
  CharacterSet.init(charactersIn:)();
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v8 = StringProtocol.trimmingCharacters(in:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v8;
}

Swift::Void __swiftcall NSMutableAttributedString.setColor(color:forText:)(UIColor color, Swift::String forText)
{
}

Swift::Void __swiftcall NSMutableAttributedString.setFont(font:forText:)(UIFont font, Swift::String forText)
{
}

id NSMutableAttributedString.setColor(color:forText:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  id v7 = [v4 mutableString];
  NSString v8 = String._bridgeToObjectiveC()();
  id v9 = [v7 rangeOfString:v8 options:1];
  uint64_t v11 = v10;

  uint64_t v12 = *a4;

  return [v4 addAttribute:v12 value:a1 range:v9];
}

UIFont __swiftcall UIFont.withTraits(traits:)(UIFontDescriptorSymbolicTraits traits)
{
  uint64_t v2 = *(void *)&traits;
  id v3 = [v1 fontDescriptor];
  id v4 = [v3 fontDescriptorWithSymbolicTraits:v2];

  if (v4)
  {
    id v6 = [self fontWithDescriptor:v4 size:0.0];

    return (UIFont)v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t type metadata accessor for NSMutableParagraphStyle()
{
  unint64_t result = lazy cache variable for type metadata for NSMutableParagraphStyle;
  if (!lazy cache variable for type metadata for NSMutableParagraphStyle)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSMutableParagraphStyle);
  }
  return result;
}

id static UIFont.preferredFont(forTextStyle:design:symbolicTraits:weight:compatibleWith:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  return specialized static UIFont.preferredFont(forTextStyle:design:symbolicTraits:weight:compatibleWith:)(a1, a2, a3 | ((HIDWORD(a3) & 1) << 32), a4, a5 & 1, a6);
}

UIFont_optional __swiftcall UIFont.withSymbolicTraits(_:)(UIFontDescriptorSymbolicTraits a1)
{
  id v3 = [v1 fontDescriptor];
  id v4 = [v1 fontDescriptor];
  unsigned int v5 = [v4 symbolicTraits];

  id v6 = [v3 fontDescriptorWithSymbolicTraits:v5 | a1];
  if (v6)
  {
    NSString v8 = (objc_class *)[self fontWithDescriptor:v6 size:0.0];
  }
  else
  {
    NSString v8 = 0;
  }
  id v9 = v8;
  result.value.super.Class isa = v9;
  result.is_nil = v7;
  return result;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return specialized Dictionary._Variant.removeValue(forKey:)(a1, specialized __RawDictionaryStorage.find<A>(_:), (void (*)(void))specialized _NativeDictionary.copy(), a2);
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, void (*a3)(void)@<X2>, _OWORD *a4@<X8>)
{
  Swift::Bool v7 = v4;
  swift_bridgeObjectRetain();
  unint64_t v10 = a2(a1);
  LOBYTE(a1) = v11;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v7;
    uint64_t v15 = *v7;
    *Swift::Bool v7 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      a3();
      uint64_t v13 = v15;
    }

    outlined init with take of Any((_OWORD *)(*(void *)(v13 + 56) + 32 * v10), a4);
    specialized _NativeDictionary._delete(at:)(v10, v13);
    *Swift::Bool v7 = v13;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a4 = 0u;
    a4[1] = 0u;
  }
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1)
{
  uint64_t v2 = v1;
  unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v4 & 1) == 0) {
    return 0;
  }
  unint64_t v5 = v3;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v1;
  uint64_t v10 = *v2;
  uint64_t *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    uint64_t v7 = v10;
  }
  uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 8 * v5);
  specialized _NativeDictionary._delete(at:)(v5, v7);
  uint64_t *v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  *unint64_t v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    uint64_t v9 = v12;
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 8 * v6);
  specialized _NativeDictionary._delete(at:)(v6, v9);
  *unint64_t v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v21 = *v4;
    uint64_t *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v11 = v21;
    }
    swift_bridgeObjectRelease();
    uint64_t v12 = *(void *)(v11 + 56);
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    uint64_t v20 = *(void *)(v13 - 8);
    outlined init with take of Date?(v12 + *(void *)(v20 + 72) * v8, a3);
    specialized _NativeDictionary._delete(at:)(v8, v11);
    uint64_t *v4 = v11;
    swift_bridgeObjectRelease();
    id v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a3;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    id v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a3;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Swift::UInt v9 = *(unsigned __int8 *)(*(void *)(a2 + 48) + v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v9);
        double result = Hasher._finalize()();
        unint64_t v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (unsigned char *)(v11 + v3);
          uint64_t v13 = (unsigned char *)(v11 + v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            unsigned char *v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t v15 = (void *)(v14 + 8 * v3);
          uint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *uint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  uint64_t *v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  long long v9;
  void *v10;
  id v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        unint64_t v10 = *(void **)(*(void *)(a2 + 48) + 8 * v6);
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        Hasher.init(_seed:)();
        uint64_t v11 = v10;
        String.hash(into:)();
        uint64_t v12 = Hasher._finalize()();

        double result = swift_bridgeObjectRelease();
        uint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          uint64_t v14 = *(void *)(a2 + 48);
          uint64_t v15 = (void *)(v14 + 8 * v3);
          uint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || v15 >= v16 + 1) {
            *uint64_t v15 = *v16;
          }
          uint64_t v17 = *(void *)(a2 + 56);
          uint64_t v18 = (_OWORD *)(v17 + 32 * v3);
          uint64_t v19 = (_OWORD *)(v17 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 2))
          {
            Swift::UInt v9 = v19[1];
            *uint64_t v18 = *v19;
            v18[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    BOOL v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    BOOL v21 = (-1 << result) - 1;
  }
  *uint64_t v20 = v22 & v21;
  char v23 = *(void *)(a2 + 16);
  id v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Swift::UInt v9 = *(void *)(a2 + 48);
        unint64_t v10 = (void *)(v9 + 8 * v6);
        double result = static Hasher._hash(seed:_:)();
        uint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            uint64_t v14 = (void *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1) {
              NSString *v14 = *v10;
            }
            uint64_t v15 = *(void *)(a2 + 56);
            uint64_t v16 = (void *)(v15 + 8 * v3);
            uint64_t v17 = (void *)(v15 + 8 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 1))
            {
              void *v16 = *v17;
              int64_t v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *uint64_t v18 = v20 & v19;
  BOOL v21 = *(void *)(a2 + 16);
  uint64_t v22 = __OFSUB__(v21, 1);
  char v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::UInt v9 = Hasher._finalize()();
        double result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          uint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            unsigned char *v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t v15 = (void *)(v14 + 8 * v3);
          uint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *uint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  uint64_t *v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  id v10;
  Swift::Int v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Swift::UInt v9 = *(void **)(*(void *)(a2 + 48) + 8 * v6);
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        Hasher.init(_seed:)();
        unint64_t v10 = v9;
        String.hash(into:)();
        uint64_t v11 = Hasher._finalize()();

        double result = swift_bridgeObjectRelease();
        uint64_t v12 = v11 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8) {
            goto LABEL_5;
          }
        }
        else if (v12 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          uint64_t v13 = *(void *)(a2 + 48);
          uint64_t v14 = (void *)(v13 + 8 * v3);
          uint64_t v15 = (void *)(v13 + 8 * v6);
          if (v3 != v6 || v14 >= v15 + 1) {
            NSString *v14 = *v15;
          }
          uint64_t v16 = *(void *)(a2 + 56);
          uint64_t v17 = (void *)(v16 + 8 * v3);
          uint64_t v18 = (void *)(v16 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v17 >= v18 + 1))
          {
            uint64_t *v17 = *v18;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v20 = *v19;
    BOOL v21 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    BOOL v21 = *v19;
    uint64_t v20 = (-1 << result) - 1;
  }
  *uint64_t v19 = v21 & v20;
  uint64_t v22 = *(void *)(a2 + 16);
  char v23 = __OFSUB__(v22, 1);
  id v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  long long v9;
  Swift::Int v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        unint64_t v10 = Hasher._finalize()();
        double result = swift_bridgeObjectRelease();
        uint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(a2 + 48);
          uint64_t v13 = (_OWORD *)(v12 + 16 * v3);
          uint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            unsigned char *v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          uint64_t v16 = (_OWORD *)(v15 + 32 * v3);
          uint64_t v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 2))
          {
            Swift::UInt v9 = v17[1];
            void *v16 = *v17;
            v16[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *uint64_t v18 = v20 & v19;
  BOOL v21 = *(void *)(a2 + 16);
  uint64_t v22 = __OFSUB__(v21, 1);
  char v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::UInt v9 = Hasher._finalize()();
        double result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8) {
          break;
        }
        if (v10 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v11 = *(void *)(a2 + 48);
        uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
        uint64_t v13 = (_OWORD *)(v11 + 16 * v6);
        if (v3 != v6 || v12 >= v13 + 1) {
          unsigned char *v12 = *v13;
        }
        uint64_t v14 = *(void *)(a2 + 56);
        uint64_t v15 = *(void *)(*(void *)(type metadata accessor for URL() - 8) + 72);
        uint64_t v16 = v15 * v3;
        double result = v14 + v15 * v3;
        uint64_t v17 = v15 * v6;
        uint64_t v18 = v14 + v15 * v6 + v15;
        if (v16 < v17 || result >= v18)
        {
          double result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v3 = v6;
          if (v16 == v17) {
            goto LABEL_6;
          }
          double result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          goto LABEL_21;
        }
      }
      if (v10 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      if (v3 < (uint64_t)v10) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_21:
    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    BOOL v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    BOOL v21 = (-1 << result) - 1;
  }
  *uint64_t v20 = v22 & v21;
  char v23 = *(void *)(a2 + 16);
  id v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::UInt v9 = Hasher._finalize()();
        double result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8) {
          break;
        }
        if (v10 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v11 = *(void *)(a2 + 48);
        uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
        uint64_t v13 = (_OWORD *)(v11 + 16 * v6);
        if (v3 != v6 || v12 >= v13 + 1) {
          unsigned char *v12 = *v13;
        }
        uint64_t v14 = *(void *)(a2 + 56);
        uint64_t v15 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?)
                                    - 8)
                        + 72);
        uint64_t v16 = v15 * v3;
        double result = v14 + v15 * v3;
        uint64_t v17 = v15 * v6;
        uint64_t v18 = v14 + v15 * v6 + v15;
        if (v16 < v17 || result >= v18)
        {
          double result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v3 = v6;
          if (v16 == v17) {
            goto LABEL_6;
          }
          double result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          goto LABEL_21;
        }
      }
      if (v10 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      if (v3 < (uint64_t)v10) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_21:
    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    BOOL v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    BOOL v21 = (-1 << result) - 1;
  }
  *uint64_t v20 = v22 & v21;
  char v23 = *(void *)(a2 + 16);
  id v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void specialized _NativeDictionary._delete(at:)(unint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  int64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      uint64_t v30 = v4;
      unint64_t v31 = (v8 + 1) & v7;
      uint64_t v32 = v2;
      do
      {
        uint64_t v9 = 24 * v6;
        uint64_t v10 = *(void *)(v2 + 48) + 24 * v6;
        uint64_t v11 = *(void **)v10;
        Swift::UInt v12 = *(void *)(v10 + 8);
        int v13 = *(unsigned __int8 *)(v10 + 16);
        Hasher.init(_seed:)();
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v14 = v11;
        String.hash(into:)();

        swift_bridgeObjectRelease();
        if (v13 == 1)
        {
          Hasher._combine(_:)(0);
        }
        else
        {
          Hasher._combine(_:)(1u);
          Hasher._combine(_:)(v12);
        }
        Swift::Int v15 = Hasher._finalize()();

        Swift::Int v16 = v15 & v7;
        if (v3 >= (uint64_t)v31)
        {
          uint64_t v2 = v32;
          if (v16 >= v31 && v3 >= v16)
          {
LABEL_15:
            uint64_t v17 = *(void *)(v2 + 48);
            unint64_t v18 = v17 + 24 * v3;
            uint64_t v19 = (long long *)(v17 + v9);
            if (24 * v3 < v9 || v18 >= (unint64_t)v19 + 24 || v3 != v6)
            {
              long long v20 = *v19;
              *(void *)(v18 + 16) = *((void *)v19 + 2);
              *(_OWORD *)unint64_t v18 = v20;
            }
            uint64_t v21 = *(void *)(v2 + 56);
            uint64_t v22 = (void *)(v21 + 8 * v3);
            char v23 = (void *)(v21 + 8 * v6);
            uint64_t v4 = v30;
            if (v3 != v6 || (int64_t v3 = v6, v22 >= v23 + 1))
            {
              *uint64_t v22 = *v23;
              int64_t v3 = v6;
            }
            goto LABEL_5;
          }
        }
        else
        {
          uint64_t v2 = v32;
          if (v16 >= v31 || v3 >= v16) {
            goto LABEL_15;
          }
        }
        uint64_t v4 = v30;
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    id v24 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v25 = *v24;
    uint64_t v26 = (-1 << v3) - 1;
  }
  else
  {
    id v24 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    uint64_t v26 = *v24;
    uint64_t v25 = (-1 << a1) - 1;
  }
  *id v24 = v26 & v25;
  uint64_t v27 = *(void *)(v2 + 16);
  BOOL v28 = __OFSUB__(v27, 1);
  uint64_t v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v2 + 16) = v29;
    ++*(_DWORD *)(v2 + 36);
  }
}

double specialized UILabel.estimatedHeight(forWidth:text:ofFont:)(uint64_t a1, uint64_t a2, void *a3, double a4)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(NSAttributedStringKey, UIFont)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1001DA0F0;
  *(void *)(inited + 32) = NSFontAttributeName;
  *(void *)(inited + 40) = a3;
  uint64_t v9 = NSFontAttributeName;
  id v10 = a3;
  unint64_t v11 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  uint64_t v23 = a1;
  swift_bridgeObjectRetain();
  String.init<A>(_:)();
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v11);
  swift_bridgeObjectRelease();
  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v12 boundingRectWithSize:3 options:isa attributes:0 context:a4];
  CGFloat v15 = v14;
  CGFloat v17 = v16;
  CGFloat v19 = v18;
  CGFloat v21 = v20;

  v24.origin.CGFloat x = v15;
  v24.origin.CGFloat y = v17;
  v24.size.CGFloat width = v19;
  v24.size.CGFloat height = v21;
  return ceil(CGRectGetHeight(v24));
}

uint64_t lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id specialized static UIFont.preferredFont(forTextStyle:design:symbolicTraits:weight:compatibleWith:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  id v10 = [self preferredFontDescriptorWithTextStyle:a1 compatibleWithTraitCollection:a6];
  unint64_t v11 = v10;
  if ((a3 & 0x100000000) == 0)
  {
    id v12 = [v10 fontDescriptorWithSymbolicTraits:a3];
    if (v12)
    {
      id v13 = v12;

      unint64_t v11 = v13;
    }
  }
  if ((a5 & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(UIFontDescriptorAttributeName, Any)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1001DA0F0;
    *(void *)(inited + 32) = UIFontDescriptorTraitsAttribute;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(UIFontDescriptorTraitKey, UIFontWeight)>);
    uint64_t v15 = swift_initStackObject();
    *(_OWORD *)(v15 + 16) = xmmword_1001DA0F0;
    *(void *)(v15 + 32) = UIFontWeightTrait;
    *(void *)(v15 + 40) = a4;
    double v16 = UIFontDescriptorTraitsAttribute;
    CGFloat v17 = UIFontWeightTrait;
    unint64_t v18 = specialized Dictionary.init(dictionaryLiteral:)(v15);
    *(void *)(inited + 64) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UIFontDescriptorTraitKey : UIFontWeight]);
    *(void *)(inited + 40) = v18;
    specialized Dictionary.init(dictionaryLiteral:)(inited);
    type metadata accessor for UIFontDescriptorAttributeName(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UIFontDescriptorAttributeName and conformance UIFontDescriptorAttributeName, type metadata accessor for UIFontDescriptorAttributeName);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v20 = [v11 fontDescriptorByAddingAttributes:isa];

    unint64_t v11 = v20;
  }
  if (a2)
  {
    id v21 = [v11 fontDescriptorWithDesign:a2];
    if (v21)
    {
      id v22 = v21;

      unint64_t v11 = v22;
    }
  }
  id v23 = [self fontWithDescriptor:v11 size:0.0];

  return v23;
}

double specialized UILabel.estimatedHeight(forWidth:text:ofSize:weight:)(uint64_t a1, uint64_t a2, double a3, double a4, double a5)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(NSAttributedStringKey, UIFont)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1001DA0F0;
  *(void *)(inited + 32) = NSFontAttributeName;
  unint64_t v11 = self;
  id v12 = NSFontAttributeName;
  *(void *)(inited + 40) = [v11 systemFontOfSize:a4 weight:a5];
  unint64_t v13 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  uint64_t v25 = a2;
  swift_bridgeObjectRetain();
  String.init<A>(_:)();
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v13);
  swift_bridgeObjectRelease();
  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v14 boundingRectWithSize:3 options:isa attributes:0 context:a3];
  CGFloat v17 = v16;
  CGFloat v19 = v18;
  CGFloat v21 = v20;
  CGFloat v23 = v22;

  v26.origin.CGFloat x = v17;
  v26.origin.CGFloat y = v19;
  v26.size.CGFloat width = v21;
  v26.size.CGFloat height = v23;
  return ceil(CGRectGetHeight(v26));
}

uint64_t outlined init with take of Date?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *MOSuggestionPrivacyTipCell.reuseIdentifier.unsafeMutableAddressor()
{
  return &static MOSuggestionPrivacyTipCell.reuseIdentifier;
}

unint64_t static MOSuggestionPrivacyTipCell.reuseIdentifier.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t MOSuggestionPrivacyTipCell.tipModel.getter()
{
  return swift_retain();
}

uint64_t MOSuggestionPrivacyTipCell.tipModel.setter(uint64_t a1)
{
  int64_t v3 = (void *)((char *)v1 + OBJC_IVAR____TtC16MomentsUIService26MOSuggestionPrivacyTipCell_tipModel);
  swift_beginAccess();
  *int64_t v3 = a1;
  swift_retain();
  uint64_t v4 = swift_release();
  (*(void (**)(uint64_t))((swift_isaMask & *v1) + 0xB0))(v4);
  return swift_release();
}

uint64_t (*MOSuggestionPrivacyTipCell.tipModel.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return MOSuggestionPrivacyTipCell.tipModel.modify;
}

uint64_t MOSuggestionPrivacyTipCell.tipModel.modify(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return (*(uint64_t (**)(uint64_t))((swift_isaMask & **(void **)(a1 + 24)) + 0xB0))(result);
  }
  return result;
}

void (*variable initialization expression of MOSuggestionPrivacyTipCell.didDismiss())()
{
  return closure #1 in variable initialization expression of MOSuggestionPrivacyTipCell.didDismiss;
}

void closure #1 in variable initialization expression of MOSuggestionPrivacyTipCell.didDismiss()
{
  id v0 = [self sharedInstance];
  [v0 setOnboardingFlowCompletionStatus:3];
}

uint64_t key path setter for MOSuggestionPrivacyTipCell.didDismiss : MOSuggestionPrivacyTipCell(uint64_t *a1, void **a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  unint64_t v6 = *(uint64_t (**)(uint64_t (*)(), uint64_t))((swift_isaMask & **a2) + 0xA0);
  swift_retain();
  return v6(thunk for @escaping @callee_guaranteed () -> (@out ())partial apply, v5);
}

uint64_t MOSuggestionPrivacyTipCell.didDismiss.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC16MomentsUIService26MOSuggestionPrivacyTipCell_didDismiss);
  swift_beginAccess();
  uint64_t v2 = *v1;
  swift_retain();
  return v2;
}

uint64_t MOSuggestionPrivacyTipCell.didDismiss.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + OBJC_IVAR____TtC16MomentsUIService26MOSuggestionPrivacyTipCell_didDismiss);
  swift_beginAccess();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return swift_release();
}

uint64_t (*MOSuggestionPrivacyTipCell.didDismiss.modify())()
{
  return MOSuggestionMapSnapshotView.secondaryField.modify;
}

void MOSuggestionPrivacyTipCell.init(coder:)()
{
  swift_unknownObjectWeakInit();
  *(void *)&v0[OBJC_IVAR____TtC16MomentsUIService26MOSuggestionPrivacyTipCell_tipModel] = 0;
  uint64_t v1 = (void (**)())&v0[OBJC_IVAR____TtC16MomentsUIService26MOSuggestionPrivacyTipCell_didDismiss];
  uint64_t *v1 = closure #1 in variable initialization expression of MOSuggestionPrivacyTipCell.didDismiss;
  v1[1] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void *MOSuggestionPrivacyTipCell.init(frame:)()
{
  swift_unknownObjectWeakInit();
  *(void *)&v0[OBJC_IVAR____TtC16MomentsUIService26MOSuggestionPrivacyTipCell_tipModel] = 0;
  uint64_t v1 = (void (**)())&v0[OBJC_IVAR____TtC16MomentsUIService26MOSuggestionPrivacyTipCell_didDismiss];
  uint64_t *v1 = closure #1 in variable initialization expression of MOSuggestionPrivacyTipCell.didDismiss;
  v1[1] = 0;
  double y = CGRectZero.origin.y;
  double width = CGRectZero.size.width;
  double height = CGRectZero.size.height;
  v9.receiver = v0;
  v9.super_class = (Class)type metadata accessor for MOSuggestionPrivacyTipCell();
  uint64_t v5 = [super initWithFrame:CGRectZero.origin.x, y, width, height];
  unint64_t v6 = *(void (**)(void))((swift_isaMask & *v5) + 0xB0);
  uint64_t v7 = v5;
  v6();

  return v7;
}

uint64_t type metadata accessor for MOSuggestionPrivacyTipCell()
{
  return self;
}

Swift::Void __swiftcall MOSuggestionPrivacyTipCell.setUpTip()()
{
  uint64_t v1 = v0;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v3 = (void *)Strong;
    swift_unknownObjectWeakAssign();
    [v3 removeFromSuperview];
  }
  uint64_t v4 = *(uint64_t (**)(void))((swift_isaMask & *v1) + 0x80);
  uint64_t v5 = v4();
  if (v5)
  {
    unint64_t v6 = *(void *)(v5 + 48);
    uint64_t v49 = *(void *)(v5 + 40);
    swift_bridgeObjectRetain();
    uint64_t v5 = swift_release();
  }
  else
  {
    unint64_t v6 = 0xE600000000000000;
    uint64_t v49 = 0x74756F79616CLL;
  }
  uint64_t v7 = ((uint64_t (*)(uint64_t))v4)(v5);
  if (v7)
  {
    (*(void (**)(void *__return_ptr))(*(void *)v7 + 144))(v51);
    uint64_t v8 = v51[0];
    uint64_t v9 = v51[1];
    uint64_t v10 = v51[2];
    uint64_t v11 = v51[3];
    char v12 = v52;
    swift_release();
    uint64_t v7 = outlined init with take of MOSuggestionPrivacyTip?((uint64_t)v51, (uint64_t)v53);
    if (v54)
    {
      swift_bridgeObjectRelease();
      char v13 = v12 & 1;
      unint64_t v6 = v9;
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
  }
  uint64_t v14 = ((uint64_t (*)(uint64_t))v4)(v7);
  char v13 = v14;
  if (v14)
  {
    uint64_t v47 = *(void *)(v14 + 56);
    uint64_t v48 = v4;
    uint64_t v15 = *(void *)(v14 + 64);
    swift_bridgeObjectRetain();
    swift_release();
    outlined consume of MOSuggestionPrivacyTip?(v8, v9);
    char v13 = 0;
    uint64_t v10 = v47;
    uint64_t v11 = v15;
    uint64_t v4 = v48;
    uint64_t v8 = v49;
  }
  else
  {
    outlined consume of MOSuggestionPrivacyTip?(v8, v9);
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v8 = v49;
  }
LABEL_13:
  lazy protocol witness table accessor for type MOSuggestionPrivacyTip and conformance MOSuggestionPrivacyTip();
  uint64_t v50 = swift_allocObject();
  *(void *)(v50 + 16) = v8;
  *(void *)(v50 + 24) = v6;
  *(void *)(v50 + 32) = v10;
  *(void *)(v50 + 40) = v11;
  *(unsigned char *)(v50 + 48) = v13;
  swift_allocObject();
  swift_unknownObjectWeakInit();
  id v16 = objc_allocWithZone((Class)type metadata accessor for TipUIView());
  CGFloat v17 = (void *)TipUIView.init(_:arrowEdge:actionHandler:)();
  [v1 addSubview:v17];
  swift_unknownObjectWeakAssign();
  id v18 = v17;
  uint64_t v19 = v4();
  double v20 = &selRef_systemBlueColor;
  if (v19)
  {
    int v21 = *(unsigned __int8 *)(v19 + 32);
    swift_release();
    if (!v21) {
      double v20 = &selRef_systemIndigoColor;
    }
  }
  id v22 = [self *v20];
  [v18 setTintColor:v22];

  id v23 = [v18 superview];
  if (v23)
  {
    CGRect v24 = v23;
    [v18 setTranslatesAutoresizingMaskIntoConstraints:0];
    id v25 = [v18 topAnchor];
    id v26 = [v24 topAnchor];
    id v27 = [v25 constraintEqualToAnchor:v26];

    [v27 setConstant:0.0];
    if (v27)
    {
      id v28 = v27;
      [v28 setActive:1];
    }
  }
  id v29 = [v18 superview:v47, v48];
  if (v29)
  {
    uint64_t v30 = v29;
    [v18 setTranslatesAutoresizingMaskIntoConstraints:0];
    id v31 = [v18 bottomAnchor];
    id v32 = [v30 bottomAnchor];
    id v33 = [v31 constraintEqualToAnchor:v32];

    if (v33)
    {
      [v33 setConstant:-0.0];
      id v34 = v33;
      [v34 setActive:1];
    }
  }
  id v35 = [v18 superview];
  if (v35)
  {
    unsigned __int8 v36 = v35;
    [v18 setTranslatesAutoresizingMaskIntoConstraints:0];
    id v37 = [v18 leadingAnchor];
    id v38 = [v36 leadingAnchor];
    id v39 = [v37 constraintEqualToAnchor:v38];

    [v39 setConstant:20.0];
    if (v39)
    {
      id v40 = v39;
      [v40 setActive:1];
    }
  }
  id v41 = [v18 superview];
  if (v41)
  {
    uint64_t v42 = v41;
    [v18 setTranslatesAutoresizingMaskIntoConstraints:0];
    id v43 = [v18 trailingAnchor];
    id v44 = [v42 trailingAnchor];
    id v45 = [v43 constraintEqualToAnchor:v44];

    [v45 setConstant:-20.0];
    if (v45)
    {
      id v46 = v45;
      [v46 setActive:1];
    }
  }
  TipUIView.imageSize.setter();
}

uint64_t outlined init with take of MOSuggestionPrivacyTip?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MOSuggestionPrivacyTip?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined consume of MOSuggestionPrivacyTip?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MOSuggestionPrivacyTip and conformance MOSuggestionPrivacyTip()
{
  unint64_t result = lazy protocol witness table cache variable for type MOSuggestionPrivacyTip and conformance MOSuggestionPrivacyTip;
  if (!lazy protocol witness table cache variable for type MOSuggestionPrivacyTip and conformance MOSuggestionPrivacyTip)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MOSuggestionPrivacyTip and conformance MOSuggestionPrivacyTip);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MOSuggestionPrivacyTip and conformance MOSuggestionPrivacyTip;
  if (!lazy protocol witness table cache variable for type MOSuggestionPrivacyTip and conformance MOSuggestionPrivacyTip)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MOSuggestionPrivacyTip and conformance MOSuggestionPrivacyTip);
  }
  return result;
}

uint64_t sub_100083A94()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 49, 7);
}

uint64_t sub_100083AD4()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void __swiftcall MOSuggestionPrivacyTip.init(clientId:clientName:wasAvailable:)(MomentsUIService::MOSuggestionPrivacyTip *__return_ptr retstr, Swift::String clientId, Swift::String_optional clientName, Swift::Bool wasAvailable)
{
  retstr->clientId = clientId;
  retstr->clientName = clientName;
  retstr->wasAvailable = wasAvailable;
}

void closure #1 in MOSuggestionPrivacyTipCell.setUpTip()()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    if (Tips.Action.id.getter() == 0x6F6D2D6E7261656CLL && v2 == 0xEA00000000006572)
    {
      uint64_t v3 = swift_bridgeObjectRelease();
    }
    else
    {
      char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t v3 = swift_bridgeObjectRelease();
      if ((v4 & 1) == 0)
      {
LABEL_8:

        return;
      }
    }
    uint64_t v5 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v1) + 0x80))(v3);
    if (v5)
    {
      unint64_t v6 = (void (*)(uint64_t))(*(uint64_t (**)(uint64_t))(*(void *)v5 + 120))(v5);
      uint64_t v7 = swift_release();
      v6(v7);

      swift_release();
      return;
    }
    goto LABEL_8;
  }
}

void partial apply for closure #1 in MOSuggestionPrivacyTipCell.setUpTip()()
{
}

id MOSuggestionPrivacyTipCell.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MOSuggestionPrivacyTipCell();
  return [super dealloc];
}

unint64_t MOSuggestionPrivacyTip.id.getter()
{
  String.append(_:)(*v0);
  return 0xD00000000000001ALL;
}

uint64_t MOSuggestionPrivacyTip.title.getter()
{
  return specialized MOSuggestionPrivacyTip.title.getter();
}

uint64_t MOSuggestionPrivacyTip.message.getter()
{
  return specialized MOSuggestionPrivacyTip.message.getter(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t MOSuggestionPrivacyTip.image.getter()
{
  type metadata accessor for MOSuggestionSheetOnboardingTipCell();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v1 = [self bundleForClass:ObjCClassFromMetadata];

  return Image.init(_:bundle:)(0xD000000000000019, 0x80000001001E1430, v1);
}

uint64_t MOSuggestionPrivacyTip.options.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of static Tips.OptionsBuilder.buildPartialBlock<A>(first:)>>.0);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of static Tips.OptionsBuilder.buildExpression<A>(_:)>>.0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Tips.IgnoresDisplayFrequency>);
  uint64_t v8 = type metadata accessor for Tips.IgnoresDisplayFrequency();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1001DA0F0;
  Tips.IgnoresDisplayFrequency.init(_:)();
  static Tips.OptionsBuilder.buildExpression<A>(_:)();
  swift_bridgeObjectRelease();
  uint64_t v12 = v8;
  char v13 = &protocol witness table for Tips.IgnoresDisplayFrequency;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  static Tips.OptionsBuilder.buildPartialBlock<A>(first:)();
  uint64_t v12 = v4;
  char v13 = (void *)OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2();
  uint64_t v10 = static Tips.OptionsBuilder.buildFinalResult<A>(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v10;
}

uint64_t one-time initialization function for $showPrivacyOnboarding()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Parameter<Bool>);
  __swift_allocate_value_buffer(v0, static MOSuggestionPrivacyTip.$showPrivacyOnboarding);
  __swift_project_value_buffer(v0, (uint64_t)static MOSuggestionPrivacyTip.$showPrivacyOnboarding);
  id v1 = [self sharedInstance];
  [v1 isOnboarded];

  return Tips.Parameter.init<A>(_:_:_:_:)();
}

uint64_t MOSuggestionPrivacyTip.$showPrivacyOnboarding.unsafeMutableAddressor()
{
  if (one-time initialization token for $showPrivacyOnboarding != -1) {
    swift_once();
  }
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Parameter<Bool>);

  return __swift_project_value_buffer(v0, (uint64_t)static MOSuggestionPrivacyTip.$showPrivacyOnboarding);
}

uint64_t static MOSuggestionPrivacyTip.$showPrivacyOnboarding.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for $showPrivacyOnboarding != -1) {
    swift_once();
  }
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Parameter<Bool>);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static MOSuggestionPrivacyTip.$showPrivacyOnboarding);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t static MOSuggestionPrivacyTip.$showPrivacyOnboarding.setter(uint64_t a1)
{
  if (one-time initialization token for $showPrivacyOnboarding != -1) {
    swift_once();
  }
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Parameter<Bool>);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static MOSuggestionPrivacyTip.$showPrivacyOnboarding);
  swift_beginAccess();
  uint64_t v4 = *(void *)(v2 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 24))(v3, a1, v2);
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v2);
}

uint64_t (*static MOSuggestionPrivacyTip.$showPrivacyOnboarding.modify())()
{
  if (one-time initialization token for $showPrivacyOnboarding != -1) {
    swift_once();
  }
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Parameter<Bool>);
  __swift_project_value_buffer(v0, (uint64_t)static MOSuggestionPrivacyTip.$showPrivacyOnboarding);
  swift_beginAccess();
  return MOSuggestionMapSnapshotView.platterBlurView.modify;
}

uint64_t static MOSuggestionPrivacyTip.showPrivacyOnboarding.getter()
{
  if (one-time initialization token for $showPrivacyOnboarding != -1) {
    swift_once();
  }
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Parameter<Bool>);
  __swift_project_value_buffer(v0, (uint64_t)static MOSuggestionPrivacyTip.$showPrivacyOnboarding);
  swift_beginAccess();
  Tips.Parameter.wrappedValue.getter();
  swift_endAccess();
  return v2;
}

uint64_t static MOSuggestionPrivacyTip.showPrivacyOnboarding.setter()
{
  if (one-time initialization token for $showPrivacyOnboarding != -1) {
    swift_once();
  }
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Parameter<Bool>);
  __swift_project_value_buffer(v0, (uint64_t)static MOSuggestionPrivacyTip.$showPrivacyOnboarding);
  swift_beginAccess();
  Tips.Parameter.wrappedValue.setter();
  return swift_endAccess();
}

void (*static MOSuggestionPrivacyTip.showPrivacyOnboarding.modify(void *a1))(uint64_t a1)
{
  unsigned __int8 v2 = malloc(0x30uLL);
  *a1 = v2;
  if (one-time initialization token for $showPrivacyOnboarding != -1) {
    swift_once();
  }
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Parameter<Bool>);
  v2[3] = v3;
  v2[4] = __swift_project_value_buffer(v3, (uint64_t)static MOSuggestionPrivacyTip.$showPrivacyOnboarding);
  swift_beginAccess();
  Tips.Parameter.wrappedValue.getter();
  char v4 = *((unsigned char *)v2 + 41);
  swift_endAccess();
  *((unsigned char *)v2 + 40) = v4;
  return static MOSuggestionOnboardingTip.showSuggestionsOnboarding.modify;
}

uint64_t MOSuggestionPrivacyTip.rules.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Parameter<Bool>);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Tips.Rule>);
  type metadata accessor for Tips.Rule();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1001DA0F0;
  if (one-time initialization token for $showPrivacyOnboarding != -1) {
    swift_once();
  }
  uint64_t v4 = __swift_project_value_buffer(v0, (uint64_t)static MOSuggestionPrivacyTip.$showPrivacyOnboarding);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v4, v0);
  Tips.Rule.init<A>(_:_:)();
  static Tips.RuleBuilder.buildExpression(_:)();
  swift_bridgeObjectRelease();
  uint64_t v5 = static Tips.RuleBuilder.buildPartialBlock(first:)();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t closure #2 in MOSuggestionPrivacyTip.rules.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Value<Bool>);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v11[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Variable<Bool>);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v11[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type PredicateExpressions.Variable<Bool> and conformance PredicateExpressions.Variable<A>, &demangling cache variable for type metadata for PredicateExpressions.Variable<Bool>);
  static PredicateExpressions.build_Arg<A>(_:)();
  v11[15] = 1;
  static PredicateExpressions.build_Arg<A>(_:)();
  a1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Equal<PredicateExpressions.Variable<Bool>, PredicateExpressions.Value<Bool>>);
  a1[4] = lazy protocol witness table accessor for type PredicateExpressions.Equal<PredicateExpressions.Variable<Bool>, PredicateExpressions.Value<Bool>> and conformance <> PredicateExpressions.Equal<A, B>();
  __swift_allocate_boxed_opaque_existential_1(a1);
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type PredicateExpressions.Value<Bool> and conformance PredicateExpressions.Value<A>, &demangling cache variable for type metadata for PredicateExpressions.Value<Bool>);
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)();
  (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t MOSuggestionAssetMediaCoverArtQueryInput.title.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MOSuggestionAssetMediaCoverArtQueryInput.albumTitle.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MOSuggestionAssetMediaCoverArtQueryInput.albumTitle.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t MOSuggestionPrivacyTip.wasAvailable.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 32) = result;
  return result;
}

void protocol witness for Identifiable.id.getter in conformance MOSuggestionPrivacyTip(void *a1@<X8>)
{
  String.append(_:)(*v1);
  *a1 = 0xD00000000000001ALL;
  a1[1] = 0x80000001001E4530;
}

uint64_t key path setter for MOSuggestionPrivacyTipCellModel.presentPrivacyController : MOSuggestionPrivacyTipCellModel(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  uint64_t v6 = *(uint64_t (**)(uint64_t (*)(), uint64_t))(**(void **)a2 + 128);
  swift_retain();
  return v6(partial apply for thunk for @escaping @callee_guaranteed () -> (@out ()), v5);
}

uint64_t MOSuggestionPrivacyTipCellModel.clientId.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MOSuggestionPrivacyTipCellModel.clientName.getter()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t key path setter for MOSuggestionPrivacyTipCellModel.tip : MOSuggestionPrivacyTipCellModel(uint64_t a1, uint64_t a2)
{
  outlined init with take of MOSuggestionPrivacyTip?(a1, (uint64_t)v5);
  uint64_t v3 = *(uint64_t (**)(unsigned char *))(**(void **)a2 + 152);
  outlined retain of MOSuggestionPrivacyTip?((uint64_t)v5, (void (*)(void, void, void, void, void))outlined copy of MOSuggestionPrivacyTip?);
  return v3(v5);
}

uint64_t MOSuggestionPrivacyTipCellModel.tip.getter@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 72);
  uint64_t v4 = *(void *)(v1 + 80);
  uint64_t v5 = *(void *)(v1 + 88);
  uint64_t v6 = *(void *)(v1 + 96);
  char v7 = *(unsigned char *)(v1 + 104);
  uint64_t result = outlined copy of MOSuggestionPrivacyTip?(v3, v4);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return result;
}

uint64_t MOSuggestionPrivacyTipCellModel.tip.setter(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 72);
  uint64_t v4 = *(void *)(v1 + 80);
  outlined init with take of MOSuggestionPrivacyTip?(a1, v1 + 72);
  outlined retain of MOSuggestionPrivacyTip?(a1, (void (*)(void, void, void, void, void))outlined copy of MOSuggestionPrivacyTip?);
  outlined consume of MOSuggestionPrivacyTip?(v3, v4);
  return outlined retain of MOSuggestionPrivacyTip?(a1, (void (*)(void, void, void, void, void))outlined consume of MOSuggestionPrivacyTip?);
}

uint64_t (*MOSuggestionSheetAssetViewModel.assetVisualSubType.modify())()
{
  return MOSuggestionMapSnapshotView.secondaryField.modify;
}

uint64_t MOSuggestionPrivacyTipCellModel.__allocating_init(publicUI:clientId:clientName:presentPrivacyController:tip:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 88) = 0u;
  *(unsigned char *)(v16 + 104) = 0;
  *(_OWORD *)(v16 + 72) = 0u;
  *(unsigned char *)(v16 + 32) = a1;
  *(void *)(v16 + 40) = a2;
  *(void *)(v16 + 48) = a3;
  *(void *)(v16 + 56) = a4;
  *(void *)(v16 + 64) = a5;
  *(void *)(v16 + 16) = a6;
  *(void *)(v16 + 24) = a7;
  swift_beginAccess();
  uint64_t v17 = *(void *)(v16 + 72);
  uint64_t v18 = *(void *)(v16 + 80);
  outlined init with take of MOSuggestionPrivacyTip?(a8, v16 + 72);
  outlined consume of MOSuggestionPrivacyTip?(v17, v18);
  return v16;
}

uint64_t MOSuggestionPrivacyTipCellModel.init(publicUI:clientId:clientName:presentPrivacyController:tip:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(unsigned char *)(v8 + 104) = 0;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(unsigned char *)(v8 + 32) = a1;
  *(void *)(v8 + 40) = a2;
  *(void *)(v8 + 48) = a3;
  *(void *)(v8 + 56) = a4;
  *(void *)(v8 + 64) = a5;
  *(void *)(v8 + 16) = a6;
  *(void *)(v8 + 24) = a7;
  swift_beginAccess();
  uint64_t v10 = *(void *)(v8 + 72);
  uint64_t v11 = *(void *)(v8 + 80);
  outlined init with take of MOSuggestionPrivacyTip?(a8, v8 + 72);
  outlined consume of MOSuggestionPrivacyTip?(v10, v11);
  return v8;
}

uint64_t MOSuggestionPrivacyTipCellModel.deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of MOSuggestionPrivacyTip?(*(void *)(v0 + 72), *(void *)(v0 + 80));
  return v0;
}

uint64_t MOSuggestionPrivacyTipCellModel.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of MOSuggestionPrivacyTip?(*(void *)(v0 + 72), *(void *)(v0 + 80));

  return swift_deallocClassInstance();
}

uint64_t specialized MOSuggestionPrivacyTip.title.getter()
{
  id v0 = [self mainBundle];
  v4._uint64_t countAndFlagsBits = 0xD000000000000024;
  v4._object = (void *)0x80000001001E47C0;
  v1._object = (void *)0x80000001001E47A0;
  v1._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  v2._uint64_t countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v4);

  lazy protocol witness table accessor for type String and conformance String();
  return Text.init<A>(_:)();
}

uint64_t specialized MOSuggestionPrivacyTip.message.getter(unint64_t a1, uint64_t a2)
{
  if (a2)
  {
    Swift::String v4 = self;
    swift_bridgeObjectRetain();
    id v5 = [v4 mainBundle];
    v13._uint64_t countAndFlagsBits = 0xD00000000000003DLL;
    v13._object = (void *)0x80000001001E4760;
    v6._object = (void *)0x80000001001E4710;
    v6._uint64_t countAndFlagsBits = 0x1000000000000046;
    v7._uint64_t countAndFlagsBits = 0;
    v7._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v6, (Swift::String_optional)0, (NSBundle)v5, v7, v13);

    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_1001DA0F0;
    *(void *)(v8 + 56) = &type metadata for String;
    *(void *)(v8 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v8 + 32) = a1;
    *(void *)(v8 + 40) = a2;
    static String.localizedStringWithFormat(_:_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v9 = [self mainBundle];
    v10._uint64_t countAndFlagsBits = 0xD000000000000046;
    v14._object = (void *)0x80000001001E46D0;
    v10._object = (void *)0x80000001001E4680;
    v11._uint64_t countAndFlagsBits = 0;
    v11._object = (void *)0xE000000000000000;
    v14._uint64_t countAndFlagsBits = 0xD000000000000038;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v10, (Swift::String_optional)a1, (NSBundle)v9, v11, v14);
  }
  lazy protocol witness table accessor for type String and conformance String();
  return Text.init<A>(_:)();
}

void *specialized MOSuggestionPrivacyTip.actions.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Tips.Action>);
  type metadata accessor for Tips.Action();
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1001DA0F0;
  id v1 = [self mainBundle];
  v6._object = (void *)0x80000001001E4640;
  v2._uint64_t countAndFlagsBits = 0x6F4D206E7261654CLL;
  v2._object = (void *)0xEA00000000006572;
  v3._uint64_t countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  v6._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v2, (Swift::String_optional)0, (NSBundle)v1, v3, v6);

  lazy protocol witness table accessor for type String and conformance String();
  Tips.Action.init<A>(id:title:perform:)();
  Swift::String v4 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay6TipKit4TipsO6ActionVGG_ALs5NeverOTgq505_sSi6f4Kit4h2O6i34VAEIgynr_Si6offset_AE7elementtAEs5J94OIegnrzr_TR03_s6a4Kit4c3O13D54BuilderV16buildFinalResultySayAC0D0VGAIFZAHSi_AHtXEfU_Tf3nnnpf_nTf1cn_n(v0);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  return v4;
}

uint64_t outlined copy of MOSuggestionPrivacyTip?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined retain of MOSuggestionPrivacyTip?(uint64_t a1, void (*a2)(void, void, void, void, void))
{
  return a1;
}

uint64_t sub_100085670@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x80))();
  *a2 = result;
  return result;
}

uint64_t sub_1000856CC(uint64_t a1, void **a2)
{
  Swift::String v2 = *(uint64_t (**)(uint64_t))((swift_isaMask & **a2) + 0x88);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_100085730@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x98))();
  uint64_t v5 = v4;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v3;
  *(void *)(result + 24) = v5;
  *a2 = thunk for @escaping @callee_guaranteed () -> ()partial apply;
  a2[1] = result;
  return result;
}

uint64_t sub_1000857C8@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)a1 + 120))();
  uint64_t v5 = v4;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v3;
  *(void *)(result + 24) = v5;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed () -> ();
  a2[1] = (uint64_t (*)())result;
  return result;
}

uint64_t sub_100085850@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(void *__return_ptr))(**(void **)a1 + 144))(v4);
  return outlined init with take of MOSuggestionPrivacyTip?((uint64_t)v4, a2);
}

uint64_t destroy for MOSuggestionPrivacyTip()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MOSuggestionPrivacyTip(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MOSuggestionPrivacyTip(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for MOSuggestionPrivacyTip(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for MOSuggestionPrivacyTip(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 33)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MOSuggestionPrivacyTip(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 33) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MOSuggestionPrivacyTip()
{
  return &type metadata for MOSuggestionPrivacyTip;
}

uint64_t type metadata accessor for MOSuggestionPrivacyTipCellModel()
{
  return self;
}

uint64_t sub_100085AD4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t MOSuggestionInterstitialListAssetViewModel.__allocating_init(workoutGroupAsset:)(void *a1)
{
  uint64_t v133 = type metadata accessor for MOSuggestionSheetAssetDateRange(0);
  uint64_t v132 = *(void *)(v133 - 8);
  uint64_t v2 = __chkstk_darwin(v133);
  uint64_t v135 = (uint64_t)&v105 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v136 = (char *)&v105 - v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)&v105 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  Swift::String v10 = (char *)&v105 - v9;
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v137 = *(void *)(v11 - 8);
  uint64_t v12 = __chkstk_darwin(v11);
  Swift::String v14 = (char *)&v105 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v105 - v15;
  id v17 = [a1 assetType];
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v20 = v19;
  if (v18 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v20 == v21)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v23 & 1) == 0)
    {
LABEL_17:
      if (serverManager._clientConnections != (NSMutableDictionary *)-1) {
        swift_once();
      }
      uint64_t v34 = type metadata accessor for Logger();
      __swift_project_value_buffer(v34, (uint64_t)static MOAngelLogger.shared);
      id v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v35, v36))
      {
        id v37 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v37 = 0;
        id v38 = "[MOSuggestionInterstitialListAssetViewModel.workoutGroupAsset] Mismatched init for asset type";
        goto LABEL_29;
      }
      goto LABEL_30;
    }
  }
  [a1 contentClassType];
  uint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
  if (ObjCClassMetadata == type metadata accessor for MOSuggestionGenericFallBackInfo()) {
    goto LABEL_17;
  }
  unint64_t v143 = (unint64_t)_swiftEmptyArrayStorage;
  unint64_t v144 = (unint64_t)_swiftEmptyArrayStorage;
  id v25 = [a1 metadata];
  uint64_t v26 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v27 = specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(v26);
  swift_bridgeObjectRelease();
  if (!v27)
  {
LABEL_24:
    swift_bridgeObjectRelease_n();
    goto LABEL_25;
  }
  if (!*(void *)(v27 + 16))
  {
    long long v145 = 0u;
    long long v146 = 0u;
    goto LABEL_23;
  }
  id v28 = MOSuggestionAssetMetadataKeyWorkoutGroupStartDates;
  uint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(v28);
  if ((v30 & 1) == 0)
  {
    long long v145 = 0u;
    long long v146 = 0u;

    goto LABEL_23;
  }
  outlined init with copy of Any(*(void *)(v27 + 56) + 32 * v29, (uint64_t)&v145);

  if (!*((void *)&v146 + 1))
  {
LABEL_23:
    swift_bridgeObjectRelease();
    outlined destroy of Any?((uint64_t)&v145, &demangling cache variable for type metadata for Any?);
    goto LABEL_24;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Date]);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_41:
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
  if (!*(void *)(v27 + 16))
  {
    long long v145 = 0u;
    long long v146 = 0u;
LABEL_39:
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  unint64_t v131 = v141;
  id v31 = MOSuggestionAssetMetadataKeyWorkoutGroupEndDates;
  uint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)(v31);
  if (v33)
  {
    outlined init with copy of Any(*(void *)(v27 + 56) + 32 * v32, (uint64_t)&v145);
  }
  else
  {
    long long v145 = 0u;
    long long v146 = 0u;
  }

  if (!*((void *)&v146 + 1)) {
    goto LABEL_39;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_40:
    swift_bridgeObjectRelease();
    goto LABEL_41;
  }
  if (!*(void *)(v27 + 16))
  {
    long long v145 = 0u;
    long long v146 = 0u;
LABEL_95:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  unint64_t v130 = v141;
  id v42 = MOSuggestionAssetMetadataKeyWorkoutGroupTypes;
  uint64_t v43 = specialized __RawDictionaryStorage.find<A>(_:)(v42);
  if (v44)
  {
    outlined init with copy of Any(*(void *)(v27 + 56) + 32 * v43, (uint64_t)&v145);
  }
  else
  {
    long long v145 = 0u;
    long long v146 = 0u;
  }

  unint64_t v45 = v130;
  if (!*((void *)&v146 + 1)) {
    goto LABEL_95;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_40;
  }
  unint64_t v129 = v141;
  if (*(void *)(v27 + 16))
  {
    id v46 = MOSuggestionAssetMetadataKeyWorkoutGroupIcons;
    uint64_t v47 = specialized __RawDictionaryStorage.find<A>(_:)(v46);
    if (v48)
    {
      outlined init with copy of Any(*(void *)(v27 + 56) + 32 * v47, (uint64_t)&v145);
    }
    else
    {
      long long v145 = 0u;
      long long v146 = 0u;
    }

    unint64_t v45 = v130;
  }
  else
  {
    long long v145 = 0u;
    long long v146 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v146 + 1)) {
    goto LABEL_95;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UIImage]);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_41;
  }
  uint64_t v49 = (unsigned char *)v141;
  uint64_t v50 = *(void *)(v131 + 16);
  if (v50 != *(void *)(v45 + 16) || v50 != *(void *)(v129 + 16)) {
    goto LABEL_108;
  }
  if (v141 >> 62) {
    goto LABEL_106;
  }
  if (v50 != *(void *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_108;
  }
  while (2)
  {
    unint64_t v125 = (unint64_t)v49;
    uint64_t v124 = v50;
    if (!v50)
    {
      swift_bridgeObjectRelease();
      char v114 = _swiftEmptyArrayStorage;
      CGRect v113 = _swiftEmptyArrayStorage;
LABEL_100:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v90 = [a1 identifier];
      uint64_t v91 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v93 = v92;

      unint64_t v141 = v91;
      uint64_t v142 = v93;
      uint64_t v139 = 35;
      unint64_t v140 = 0xE100000000000000;
      lazy protocol witness table accessor for type String and conformance String();
      id v40 = &v141;
      uint64_t v94 = (void *)StringProtocol.components<A>(separatedBy:)();
      if (v94[2])
      {
        uint64_t v95 = v94[4];
        uint64_t v96 = v94[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        id v40 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, void, void, void, void, void, void, int))(v134 + 344))(v95, v96, 0, 0, 0, 0, 0, 0, 266);
        swift_retain();
        uint64_t v97 = MOSuggestionInterstitialListAssetViewModel._groupAssetTypeAndCountDescription(with:)(0);
        unint64_t v99 = v98;
        swift_beginAccess();
        v40[3] = v97;
        v40[4] = v99;
        swift_bridgeObjectRelease();
        swift_beginAccess();
        v40[6] = (unint64_t)v113;
        swift_bridgeObjectRelease();
        unint64_t v100 = v143;
        swift_beginAccess();
        v40[7] = v100;
        swift_bridgeObjectRelease();
        swift_beginAccess();
        v40[5] = (unint64_t)v114;
        swift_bridgeObjectRelease();
        if ((v144 & 0x8000000000000000) == 0 && (v144 & 0x4000000000000000) == 0)
        {
          uint64_t v101 = v144 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain();
LABEL_104:
          uint64_t v138 = v101;
          specialized MutableCollection<>.sort(by:)(&v138);
          swift_bridgeObjectRelease();

          uint64_t v102 = v138;
          swift_beginAccess();
          v40[2] = v102;
          swift_release();
          swift_bridgeObjectRelease();
          return (uint64_t)v40;
        }
      }
      else
      {
        __break(1u);
      }
      unint64_t v104 = swift_bridgeObjectRetain();
      uint64_t v101 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v104);
      swift_bridgeObjectRelease();
      goto LABEL_104;
    }
    if (v124 < 1)
    {
      __break(1u);
LABEL_112:
      __break(1u);
      uint64_t result = swift_release();
      __break(1u);
      return result;
    }
    unint64_t v51 = 0;
    unint64_t v52 = v125;
    unint64_t v123 = v125 & 0xC000000000000001;
    uint64_t v50 = v131;
    unint64_t v122 = *(void *)(v131 + 16);
    id v126 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v137 + 56);
    uint64_t v121 = v137 + 16;
    uint64_t v120 = v137 + 48;
    CGRect v117 = (void (**)(char *, char *, uint64_t))(v137 + 32);
    char v115 = (void (**)(char *, uint64_t))(v137 + 8);
    Swift::String v53 = (unint64_t *)(v129 + 40);
    long long v112 = xmmword_1001DA0F0;
    long long v111 = xmmword_1001DA250;
    char v114 = _swiftEmptyArrayStorage;
    CGRect v113 = _swiftEmptyArrayStorage;
    while (1)
    {
      if (v123) {
        uint64_t v54 = (unsigned char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        uint64_t v54 = *(id *)(v52 + 8 * v51 + 32);
      }
      double v127 = v53;
      unint64_t v128 = v51;
      if (v51 >= v122)
      {
        uint64_t v49 = v54;
        (*v126)(v10, 1, 1, v11);
LABEL_87:

        uint64_t v88 = (uint64_t)v10;
        goto LABEL_88;
      }
      if (v51 >= *(void *)(v50 + 16)) {
        break;
      }
      uint64_t v49 = v54;
      uint64_t v55 = v137;
      unint64_t v118 = (*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80);
      unint64_t v56 = v50 + v118;
      uint64_t v57 = *(void *)(v137 + 72) * v51;
      id v119 = *(void (**)(char *, unint64_t, uint64_t))(v137 + 16);
      v119(v10, v56 + v57, v11);
      char v58 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v55 + 56);
      v58(v10, 0, 1, v11);
      uint64_t v59 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48);
      if (v59(v10, 1, v11) == 1) {
        goto LABEL_87;
      }
      CGRect v116 = *v117;
      v116(v16, v10, v11);
      if (v128 >= *(void *)(v130 + 16))
      {
        v58(v8, 1, 1, v11);
      }
      else
      {
        v119(v8, v130 + v118 + v57, v11);
        v58(v8, 0, 1, v11);
        if (v59(v8, 1, v11) != 1)
        {
          v116(v14, v8, v11);
          if (v128 >= *(void *)(v129 + 16))
          {
          }
          else
          {
            unint64_t v60 = *v127;
            CGRect v116 = (void (*)(char *, char *, uint64_t))*(v127 - 1);
            unint64_t v118 = v60;
            Swift::String v61 = (void (*)(uint64_t, char *, uint64_t))v119;
            v119(v136, (unint64_t)v16, v11);
            uint64_t v62 = v61;
            unint64_t v63 = &v136[*(int *)(v133 + 20)];
            v62((uint64_t)v63, v14, v11);
            v58(v63, 0, 1, v11);
            unint64_t v64 = self;
            swift_bridgeObjectRetain();
            id v65 = v49;
            id v66 = [v64 blackColor];
            long long v145 = 0u;
            long long v146 = 0u;
            char v147 = 1;
            type metadata accessor for MOSuggestionSheetImage();
            swift_allocObject();
            id v119 = v65;
            uint64_t v67 = MOSuggestionSheetImage.init(image:associatedTintColor:associatedBackgroundColor:tileBackgroundColor:shouldBeRounded:squareCrop:extraMargin:)((uint64_t)v65, 0, 0, v66, 1, (uint64_t)&v145, 0, 1);
            id v68 = [a1 identifier];
            uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v71 = v70;

            unint64_t v141 = v69;
            uint64_t v142 = v71;
            uint64_t v139 = 35;
            unint64_t v140 = 0xE100000000000000;
            lazy protocol witness table accessor for type String and conformance String();
            uint64_t v72 = (void *)StringProtocol.components<A>(separatedBy:)();
            if (!v72[2]) {
              goto LABEL_112;
            }
            uint64_t v74 = v72[4];
            uint64_t v73 = v72[5];
            uint64_t v108 = v74;
            uint64_t v107 = v73;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MOSuggestionSheetAssetDateRange>);
            unint64_t v75 = (*(unsigned __int8 *)(v132 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v132 + 80);
            uint64_t v110 = *(void *)(v132 + 72);
            uint64_t v76 = swift_allocObject();
            uint64_t v106 = v76;
            *(_OWORD *)(v76 + 16) = v112;
            unint64_t v109 = v75;
            outlined init with copy of MOSuggestionSheetAssetDateRange((uint64_t)v136, v76 + v75);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
            uint64_t v77 = swift_allocObject();
            *(_OWORD *)(v77 + 16) = v112;
            unint64_t v78 = v118;
            *(void *)(v77 + 32) = v116;
            *(void *)(v77 + 40) = v78;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
            uint64_t v79 = swift_allocObject();
            *(_OWORD *)(v79 + 16) = v111;
            *(void *)(v79 + 32) = v67;
            unint64_t v141 = v79;
            specialized Array._endMutation()();
            unint64_t v105 = v141;
            type metadata accessor for MOSuggestionInterstitialListAssetViewModel();
            swift_allocObject();
            swift_bridgeObjectRetain();
            swift_retain();
            uint64_t v49 = (unsigned char *)MOSuggestionInterstitialListAssetViewModel.init(id:subViewModels:topLevelGroupHeading:dates:titles:icons:assetVisualSubType:selectable:isLoadingPlaceHolder:isFallback:)(v108, v107, 0, 0, 0, v106, v77, v105, 7, 1, 0, 0);
            v49[90] = 0;
            swift_retain();
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((v144 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v144 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              CGRect v113 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v113[2] + 1, 1, v113);
            }
            unint64_t v81 = v113[2];
            unint64_t v80 = v113[3];
            if (v81 >= v80 >> 1) {
              CGRect v113 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v80 > 1), v81 + 1, 1, v113);
            }
            char v82 = v113;
            v113[2] = v81 + 1;
            id v83 = &v82[2 * v81];
            unint64_t v84 = v118;
            v83[4] = v116;
            v83[5] = v84;
            swift_retain();
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((v143 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v143 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            outlined init with copy of MOSuggestionSheetAssetDateRange((uint64_t)v136, v135);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              char v114 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v114[2] + 1, 1, (unint64_t)v114);
            }
            unint64_t v86 = v114[2];
            unint64_t v85 = v114[3];
            if (v86 >= v85 >> 1) {
              char v114 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v85 > 1, v86 + 1, 1, (unint64_t)v114);
            }
            uint64_t v87 = v114;
            v114[2] = v86 + 1;
            outlined init with take of MOSuggestionSheetAssetDateRange(v135, (uint64_t)v87 + v109 + v86 * v110);

            swift_release();
            swift_release();
            outlined destroy of MOSuggestionSheetAssetDateRange((uint64_t)v136);
          }
          char v89 = *v115;
          (*v115)(v14, v11);
          v89(v16, v11);
          goto LABEL_89;
        }
      }
      (*v115)(v16, v11);

      uint64_t v88 = (uint64_t)v8;
LABEL_88:
      outlined destroy of Any?(v88, (uint64_t *)&demangling cache variable for type metadata for Date?);
LABEL_89:
      unint64_t v52 = v125;
      unint64_t v51 = v128 + 1;
      Swift::String v53 = v127 + 2;
      uint64_t v50 = v131;
      if (v124 == v128 + 1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_100;
      }
    }
    __break(1u);
LABEL_106:
    swift_bridgeObjectRetain();
    uint64_t v103 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v50 == v103)
    {
      swift_bridgeObjectRetain();
      uint64_t v50 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      continue;
    }
    break;
  }
LABEL_108:
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_25:
  if (serverManager._clientConnections != (NSMutableDictionary *)-1) {
    swift_once();
  }
  uint64_t v39 = type metadata accessor for Logger();
  __swift_project_value_buffer(v39, (uint64_t)static MOAngelLogger.shared);
  id v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v35, v36))
  {
    id v37 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v37 = 0;
    id v38 = "[MOSuggestionInterstitialListAssetViewModel.workoutGroupAsset] Failed to unwrap metadata";
LABEL_29:
    _os_log_impl((void *)&_mh_execute_header, v35, v36, v38, v37, 2u);
    swift_slowDealloc();
  }
LABEL_30:

  return 0;
}

unint64_t MOSuggestionCollectionViewCellViewModel.fetchListAssetsWithPlaceHolderSingleResult(previewOnly:previewMax:typeSorted:completion:)(Swift::Bool a1, Swift::Int a2, Swift::Bool typeSorted, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  unint64_t result = (unint64_t)MOSuggestionCollectionViewCellViewModel.prioritizedAssetReferences(previewOnly:previewMax:style:typeSorted:)(a1, a2, MomentsUIService_SuggestionCellStyle_list, typeSorted);
  if (!result) {
    return result;
  }
  unint64_t v102 = result;
  if (serverManager._connectionProperties != (NSMutableDictionary *)-1) {
    goto LABEL_109;
  }
LABEL_3:
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static MOAngelLogger.assets);
  swift_bridgeObjectRetain_n();
  uint64_t v10 = Logger.logObject.getter();
  LOBYTE(v11) = static os_log_type_t.debug.getter();
  uint64_t v12 = (void *)(v102 >> 62);
  if (!os_log_type_enabled((os_log_t)v10, (os_log_type_t)v11))
  {

    swift_bridgeObjectRelease_n();
    uint64_t v10 = v102;
    goto LABEL_7;
  }
  uint64_t v13 = (uint8_t *)swift_slowAlloc();
  *(_DWORD *)uint64_t v13 = 134217984;
  if (v12) {
    goto LABEL_169;
  }
  while (1)
  {
    swift_bridgeObjectRelease();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v10, (os_log_type_t)v11, "[MOSuggestionCollectionViewCellViewModel.List] assetReferencesCount: %ld", v13, 0xCu);
    swift_slowDealloc();

    uint64_t v10 = v102;
LABEL_7:
    uint64_t v98 = a5;
    uint64_t v99 = v6;
    uint64_t v13 = (uint8_t *)(v10 & 0xFFFFFFFFFFFFFF8);
    if (v12)
    {
      if (v10 >= 0) {
        LOBYTE(v11) = v10 & 0xF8;
      }
      else {
        LOBYTE(v11) = v10;
      }
      swift_bridgeObjectRetain();
      uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
      if (v14)
      {
LABEL_9:
        if (v14 >= 1)
        {
          uint64_t v101 = v10 & 0xFFFFFFFFFFFFFF8;
          uint64_t v15 = 0;
          a5 = v10 & 0xC000000000000001;
          while (1)
          {
            if (a5)
            {
              uint64_t v16 = specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else
            {
              uint64_t v16 = *(void *)(v10 + 8 * v15 + 32);
              swift_retain();
            }
            id v17 = (void *)(*(uint64_t (**)(void))(*(void *)v16 + 120))();
            uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v20 = v19;
            if (v18 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v20 == v21) {
              break;
            }
            char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v23) {
              goto LABEL_30;
            }
            uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v26 = v25;
            if (v24 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v26 == v27) {
              break;
            }
            char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v29) {
              goto LABEL_30;
            }
            uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v32 = v31;
            if (v30 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v32 == v33) {
              break;
            }
            char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v34 = v17;
            if (v42) {
              goto LABEL_30;
            }
LABEL_31:
            id v35 = v34;

            uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v38 = v37;
            if (v36 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v38 == v39)
            {

              swift_bridgeObjectRelease_n();
            }
            else
            {
              char v41 = _stringCompareWithSmolCheck(_:_:expecting:)();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v41 & 1) == 0)
              {
                swift_release();
                goto LABEL_13;
              }
            }
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
LABEL_13:
            uint64_t v10 = v102;
            if (v14 == ++v15)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              uint64_t v43 = 0;
              while (1)
              {
                if (a5)
                {
                  uint64_t v44 = specialized _ArrayBuffer._getElementSlowPath(_:)();
                }
                else
                {
                  uint64_t v44 = *(void *)(v10 + 8 * v43 + 32);
                  swift_retain();
                }
                unint64_t v45 = *(uint64_t (**)(void))(*(void *)v44 + 120);
                id v46 = (void *)v45();
                uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                uint64_t v49 = v48;
                if (v47 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v49 == v50) {
                  break;
                }
                char v52 = _stringCompareWithSmolCheck(_:_:expecting:)();

                swift_bridgeObjectRelease();
                uint64_t v53 = swift_bridgeObjectRelease();
                if (v52) {
                  goto LABEL_55;
                }
                id v46 = (void *)((uint64_t (*)(uint64_t))v45)(v53);
                uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                uint64_t v56 = v55;
                if (v54 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v56 == v57) {
                  break;
                }
                char v59 = _stringCompareWithSmolCheck(_:_:expecting:)();

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (v59) {
                  goto LABEL_55;
                }
                swift_release();
LABEL_56:
                uint64_t v10 = v102;
                if (v14 == ++v43)
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRetain();
                  uint64_t v60 = 0;
                  while (1)
                  {
                    if (a5)
                    {
                      uint64_t v61 = specialized _ArrayBuffer._getElementSlowPath(_:)();
                    }
                    else
                    {
                      uint64_t v61 = *(void *)(v10 + 8 * v60 + 32);
                      swift_retain();
                    }
                    uint64_t v62 = (void *)(*(uint64_t (**)(void))(*(void *)v61 + 120))();
                    uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                    uint64_t v65 = v64;
                    if (v63 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v65 == v66)
                    {

                      swift_bridgeObjectRelease_n();
                    }
                    else
                    {
                      char v68 = _stringCompareWithSmolCheck(_:_:expecting:)();

                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      if ((v68 & 1) == 0)
                      {
                        swift_release();
                        goto LABEL_60;
                      }
                    }
                    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
                    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
                    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                    specialized ContiguousArray._endMutation()();
LABEL_60:
                    uint64_t v10 = v102;
                    if (v14 == ++v60)
                    {
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRetain();
                      uint64_t v69 = 0;
                      while (1)
                      {
                        if (a5)
                        {
                          uint64_t v70 = specialized _ArrayBuffer._getElementSlowPath(_:)();
                        }
                        else
                        {
                          uint64_t v70 = *(void *)(v10 + 8 * v69 + 32);
                          swift_retain();
                        }
                        uint64_t v71 = (void *)(*(uint64_t (**)(void))(*(void *)v70 + 120))();
                        uint64_t v72 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                        uint64_t v74 = v73;
                        if (v72 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v74 == v75)
                        {

                          swift_bridgeObjectRelease_n();
                        }
                        else
                        {
                          char v77 = _stringCompareWithSmolCheck(_:_:expecting:)();

                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          if ((v77 & 1) == 0)
                          {
                            swift_release();
                            goto LABEL_73;
                          }
                        }
                        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
                        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
                        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                        specialized ContiguousArray._endMutation()();
LABEL_73:
                        uint64_t v10 = v102;
                        if (v14 == ++v69)
                        {
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRetain();
                          uint64_t v78 = 0;
                          while (1)
                          {
                            if (a5)
                            {
                              uint64_t v79 = specialized _ArrayBuffer._getElementSlowPath(_:)();
                            }
                            else
                            {
                              uint64_t v79 = *(void *)(v10 + 8 * v78 + 32);
                              swift_retain();
                            }
                            unint64_t v80 = (void *)(*(uint64_t (**)(void))(*(void *)v79 + 120))();
                            uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                            uint64_t v82 = v81;
                            if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v82 == v83)
                            {

                              swift_bridgeObjectRelease_n();
                            }
                            else
                            {
                              uint64_t v6 = _stringCompareWithSmolCheck(_:_:expecting:)();

                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                              if ((v6 & 1) == 0)
                              {
                                swift_release();
                                goto LABEL_86;
                              }
                            }
                            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
                            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
                            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                            specialized ContiguousArray._endMutation()();
LABEL_86:
                            uint64_t v10 = v102;
                            if (v14 == ++v78)
                            {
                              swift_bridgeObjectRelease();
                              unint64_t v85 = 0;
                              uint64_t v12 = _swiftEmptyArrayStorage;
                              while (1)
                              {
                                if (a5)
                                {
                                  uint64_t v86 = specialized _ArrayBuffer._getElementSlowPath(_:)();
                                  unint64_t v87 = v85 + 1;
                                  if (__OFADD__(v85, 1))
                                  {
LABEL_106:
                                    __break(1u);
LABEL_107:
                                    uint64_t v13 = (uint8_t *)_swiftEmptyArrayStorage;
                                    goto LABEL_115;
                                  }
                                }
                                else
                                {
                                  if (v85 >= *(void *)(v101 + 16))
                                  {
                                    __break(1u);
LABEL_109:
                                    swift_once();
                                    goto LABEL_3;
                                  }
                                  uint64_t v86 = *(void *)(v10 + 8 * v85 + 32);
                                  swift_retain();
                                  unint64_t v87 = v85 + 1;
                                  if (__OFADD__(v85, 1)) {
                                    goto LABEL_106;
                                  }
                                }
                                uint64_t v103 = v86;
                                if (closure #6 in MOSuggestionCollectionViewCellViewModel.fetchListAssetsWithPlaceHolderSingleResult(previewOnly:previewMax:typeSorted:completion:)((uint64_t)&v103))
                                {
                                  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
                                  uint64_t v6 = _swiftEmptyArrayStorage[2];
                                  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
                                  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                                  specialized ContiguousArray._endMutation()();
                                  uint64_t v10 = v102;
                                }
                                else
                                {
                                  swift_release();
                                }
                                ++v85;
                                if (v87 == v14) {
                                  goto LABEL_107;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }

              swift_bridgeObjectRelease_n();
LABEL_55:
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
              specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized ContiguousArray._endMutation()();
              goto LABEL_56;
            }
          }
          swift_bridgeObjectRelease_n();
LABEL_30:
          uint64_t v34 = (void *)MOSuggestionAssetsTypePhoto;
          goto LABEL_31;
        }
        __break(1u);
LABEL_164:
        __break(1u);
LABEL_165:
        __break(1u);
LABEL_166:
        __break(1u);
LABEL_167:
        __break(1u);
        goto LABEL_168;
      }
    }
    else
    {
      uint64_t v14 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v14) {
        goto LABEL_9;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v13 = (uint8_t *)_swiftEmptyArrayStorage;
    uint64_t v12 = _swiftEmptyArrayStorage;
LABEL_115:
    swift_bridgeObjectRelease();
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0
      || ((unint64_t)_swiftEmptyArrayStorage & 0x4000000000000000) != 0)
    {
      swift_bridgeObjectRetain();
      a5 = _CocoaArrayWrapper.endIndex.getter();
      swift_release();
    }
    else
    {
      a5 = _swiftEmptyArrayStorage[2];
    }
    uint64_t v103 = a5;
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0
      || ((unint64_t)_swiftEmptyArrayStorage & 0x4000000000000000) != 0)
    {
      break;
    }
    if ((uint64_t)_swiftEmptyArrayStorage[2] > 0) {
      goto LABEL_121;
    }
LABEL_129:
    swift_release();
    uint64_t v6 = a5;
    uint64_t v90 = v98;
    uint64_t v10 = v99;
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0) {
      goto LABEL_135;
    }
LABEL_130:
    if (((unint64_t)_swiftEmptyArrayStorage & 0x4000000000000000) != 0) {
      goto LABEL_135;
    }
    if ((uint64_t)_swiftEmptyArrayStorage[2] >= 1) {
      goto LABEL_132;
    }
LABEL_136:
    swift_release();
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0) {
      goto LABEL_142;
    }
LABEL_137:
    if (((unint64_t)_swiftEmptyArrayStorage & 0x4000000000000000) != 0) {
      goto LABEL_142;
    }
    if ((uint64_t)_swiftEmptyArrayStorage[2] >= 1) {
      goto LABEL_139;
    }
LABEL_143:
    swift_release();
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0) {
      goto LABEL_149;
    }
LABEL_144:
    if (((unint64_t)_swiftEmptyArrayStorage & 0x4000000000000000) != 0) {
      goto LABEL_149;
    }
    uint64_t v11 = _swiftEmptyArrayStorage[2];
    if (v11 >= 1) {
      goto LABEL_146;
    }
LABEL_150:
    swift_release();
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0) {
      goto LABEL_160;
    }
LABEL_151:
    if (((unint64_t)_swiftEmptyArrayStorage & 0x4000000000000000) != 0) {
      goto LABEL_160;
    }
    uint64_t v11 = _swiftEmptyArrayStorage[2];
    if (v11 < 1) {
      goto LABEL_161;
    }
LABEL_153:
    MOSuggestionCollectionViewCellViewModel._fetchGroupedAssets(assetReferences:updateIndex:completion:)((unint64_t)_swiftEmptyArrayStorage, v6, a4, v90);
    swift_release();
    BOOL v92 = __OFADD__(v6++, 1);
    if (!v92)
    {
      uint64_t v103 = v6;
      if (a5 < 1) {
        goto LABEL_156;
      }
      goto LABEL_155;
    }
LABEL_168:
    __break(1u);
LABEL_169:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t v91 = _CocoaArrayWrapper.endIndex.getter();
  swift_release();
  if (v91 <= 0) {
    goto LABEL_129;
  }
LABEL_121:
  swift_retain();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v88 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled((os_log_t)v11, v88))
  {
    char v89 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)char v89 = 134217984;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v11, v88, "[MOSuggestionCollectionViewCellViewModel.List] photoAssetsCount=%ld", v89, 0xCu);
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  uint64_t v90 = v98;
  uint64_t v10 = v99;
  MOSuggestionCollectionViewCellViewModel._fetchGroupedAssets(assetReferences:updateIndex:completion:)((unint64_t)_swiftEmptyArrayStorage, a5, a4, v98);
  swift_release();
  uint64_t v6 = a5 + 1;
  if (__OFADD__(a5, 1)) {
    goto LABEL_164;
  }
  uint64_t v103 = a5 + 1;
  if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) == 0) {
    goto LABEL_130;
  }
LABEL_135:
  swift_bridgeObjectRetain();
  uint64_t v93 = _CocoaArrayWrapper.endIndex.getter();
  swift_release();
  if (v93 < 1) {
    goto LABEL_136;
  }
LABEL_132:
  LOBYTE(v11) = _swiftEmptyArrayStorage;
  MOSuggestionCollectionViewCellViewModel._fetchGroupedAssets(assetReferences:updateIndex:completion:)((unint64_t)_swiftEmptyArrayStorage, v6, a4, v90);
  swift_release();
  BOOL v92 = __OFADD__(v6++, 1);
  if (v92) {
    goto LABEL_165;
  }
  uint64_t v103 = v6;
  if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) == 0) {
    goto LABEL_137;
  }
LABEL_142:
  swift_bridgeObjectRetain();
  uint64_t v94 = _CocoaArrayWrapper.endIndex.getter();
  swift_release();
  if (v94 < 1) {
    goto LABEL_143;
  }
LABEL_139:
  LOBYTE(v11) = _swiftEmptyArrayStorage;
  MOSuggestionCollectionViewCellViewModel._fetchGroupedAssets(assetReferences:updateIndex:completion:)((unint64_t)_swiftEmptyArrayStorage, v6, a4, v90);
  swift_release();
  BOOL v92 = __OFADD__(v6++, 1);
  if (v92) {
    goto LABEL_166;
  }
  uint64_t v103 = v6;
  if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) == 0) {
    goto LABEL_144;
  }
LABEL_149:
  swift_bridgeObjectRetain();
  uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
  swift_release();
  if (v11 < 1) {
    goto LABEL_150;
  }
LABEL_146:
  MOSuggestionCollectionViewCellViewModel._fetchGroupedAssets(assetReferences:updateIndex:completion:)((unint64_t)_swiftEmptyArrayStorage, v6, a4, v90);
  swift_release();
  BOOL v92 = __OFADD__(v6++, 1);
  if (v92) {
    goto LABEL_167;
  }
  uint64_t v103 = v6;
  if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) == 0) {
    goto LABEL_151;
  }
LABEL_160:
  swift_bridgeObjectRetain();
  uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
  swift_release();
  if (v11 >= 1) {
    goto LABEL_153;
  }
LABEL_161:
  swift_release();
  if (a5 >= 1) {
LABEL_155:
  }
    MOSuggestionCollectionViewCellViewModel._fetchAllOtherAssets(assetReferences:completion:)((unint64_t)_swiftEmptyArrayStorage, a4, v90);
LABEL_156:
  swift_release();
  uint64_t v95 = Logger.logObject.getter();
  os_log_type_t v96 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v95, v96))
  {
    uint64_t v97 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v97 = 134217984;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v95, v96, "[MOSuggestionCollectionViewCellViewModel.List] finalIndex: %ld", v97, 0xCu);
    swift_slowDealloc();
  }

  swift_beginAccess();
  return v103;
}

uint64_t MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionViewAssetPlaceHolderSingleResult.assetViewModel.getter()
{
  return swift_retain();
}

uint64_t MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionViewAssetPlaceHolderSingleResult.assetViewModel.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  void *v1 = a1;
  return result;
}

uint64_t MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionViewAssetPlaceHolderResult.updateIndex.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t MOAssetAndMediaType.mediaType.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 8) = result;
  *(unsigned char *)(v2 + 16) = a2 & 1;
  return result;
}

uint64_t MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult.uuid.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1
     + *(int *)(type metadata accessor for MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult()
              + 24);

  return outlined init with copy of UUID?(v3, a1);
}

uint64_t MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult.uuid.setter(uint64_t a1)
{
  uint64_t v3 = v1
     + *(int *)(type metadata accessor for MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult()
              + 24);

  return outlined assign with take of UUID?(a1, v3);
}

void (__swiftcall *MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult.uuid.modify())()
{
  return MOSuggestionInterstitialExpandableListViewCellConstants.init();
}

uint64_t MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult.init(assetViewModel:updateIndex:uuid:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)a5 = a1;
  *(void *)(a5 + 8) = a2;
  *(unsigned char *)(a5 + 16) = a3 & 1;
  uint64_t v6 = a5
     + *(int *)(type metadata accessor for MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult()
              + 24);

  return outlined init with take of UUID?(a4, v6);
}

uint64_t static MOSuggestionCollectionViewCellViewModel.PLACEHOLDER_LIST_RESULT.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for MOSuggestionInterstitialListAssetViewModel();
  swift_allocObject();
  uint64_t v2 = MOSuggestionInterstitialListAssetViewModel.init(id:subViewModels:topLevelGroupHeading:dates:titles:icons:assetVisualSubType:selectable:isLoadingPlaceHolder:isFallback:)(0x6C6F686563616C70, 0xEB00000000726564, 0, 0, 0, 0, 0, 0, 26, 1, 1, 0);
  uint64_t v3 = a1
     + *(int *)(type metadata accessor for MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult()
              + 24);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

uint64_t static MOSuggestionCollectionViewCellViewModel.fallbackResult(assetType:mediaType:motionType:updateIndex:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7 = a4;
  char v11 = a3 & 1;
  id v12 = a4;
  LOBYTE(v7) = specialized MOSuggestionAssetVisualSubType.init(assetType:mediaType:motionActivityType:)(a1, a2, v11, v7);
  type metadata accessor for MOSuggestionInterstitialListAssetViewModel();
  swift_allocObject();
  uint64_t v13 = MOSuggestionInterstitialListAssetViewModel.init(id:subViewModels:topLevelGroupHeading:dates:titles:icons:assetVisualSubType:selectable:isLoadingPlaceHolder:isFallback:)(0x6C6F686563616C70, 0xEB00000000726564, 0, 0, 0, 0, 0, 0, (char)v7, 1, 0, 1);
  uint64_t v14 = a6
      + *(int *)(type metadata accessor for MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult()
               + 24);
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  *(void *)a6 = v13;
  *(void *)(a6 + 8) = a5;
  *(unsigned char *)(a6 + 16) = 0;
  return result;
}

uint64_t closure #6 in MOSuggestionCollectionViewCellViewModel.fetchListAssetsWithPlaceHolderSingleResult(previewOnly:previewMax:typeSorted:completion:)(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(**(void **)a1 + 120);
  uint64_t v2 = (void *)v1();
  id v3 = (id)specialized static MOSuggestionAssetReference.consolidatedType(_:)((uint64_t)v2);

  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;
  if (v4 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v6 == v7) {
    goto LABEL_18;
  }
  char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();

  swift_bridgeObjectRelease();
  uint64_t v10 = swift_bridgeObjectRelease();
  char v11 = 0;
  if ((v9 & 1) == 0)
  {
    id v3 = (id)((uint64_t (*)(uint64_t))v1)(v10);
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v14 = v13;
    if (v12 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v14 == v15) {
      goto LABEL_18;
    }
    char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();

    swift_bridgeObjectRelease();
    uint64_t v18 = swift_bridgeObjectRelease();
    char v11 = 0;
    if ((v17 & 1) == 0)
    {
      id v3 = (id)((uint64_t (*)(uint64_t))v1)(v18);
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v21 = v20;
      if (v19 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v21 == v22) {
        goto LABEL_18;
      }
      char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      uint64_t v25 = swift_bridgeObjectRelease();
      char v11 = 0;
      if ((v24 & 1) == 0)
      {
        id v3 = (id)((uint64_t (*)(uint64_t))v1)(v25);
        uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v28 = v27;
        if (v26 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v28 != v29)
        {
          char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();

          swift_bridgeObjectRelease();
          uint64_t v32 = swift_bridgeObjectRelease();
          char v11 = 0;
          if (v31) {
            return v11 & 1;
          }
          id v3 = (id)((uint64_t (*)(uint64_t))v1)(v32);
          uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v35 = v34;
          if (v33 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v35 != v36)
          {
            char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();

            swift_bridgeObjectRelease();
            uint64_t v38 = swift_bridgeObjectRelease();
            char v11 = 0;
            if (v37) {
              return v11 & 1;
            }
            id v3 = (id)((uint64_t (*)(uint64_t))v1)(v38);
            uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v41 = v40;
            if (v39 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v41 == v42) {
              char v11 = 0;
            }
            else {
              char v11 = _stringCompareWithSmolCheck(_:_:expecting:)() ^ 1;
            }
            goto LABEL_19;
          }
        }
LABEL_18:
        char v11 = 0;
LABEL_19:

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
  }
  return v11 & 1;
}

uint64_t MOSuggestionCollectionViewCellViewModel._fetchGroupedAssets(assetReferences:updateIndex:completion:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = _swiftEmptyArrayStorage;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = 0;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v5 = result;
    if (!result) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v5) {
      goto LABEL_15;
    }
  }
  if (v5 < 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v7 = 0;
  unint64_t v16 = a1 & 0xC000000000000001;
  uint64_t v17 = v5;
  unint64_t v18 = a1;
  do
  {
    if (v16)
    {
      uint64_t v8 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v8 = *(void *)(a1 + 8 * v7 + 32);
      swift_retain();
    }
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    uint64_t v9 = static MOSuggestionAssetCacheManager.shared;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_1001DA250;
    *(void *)(v10 + 32) = v8;
    uint64_t v24 = v10;
    specialized Array._endMutation()();
    uint64_t v11 = swift_allocObject();
    swift_weakInit();
    uint64_t v12 = (void *)swift_allocObject();
    void v12[2] = v11;
    v12[3] = a3;
    v12[4] = a4;
    v12[5] = v22;
    void v12[6] = v23;
    v12[7] = a1;
    v12[8] = a2;
    uint64_t v13 = one-time initialization token for defaultQueue;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    if (v13 != -1) {
      swift_once();
    }
    ++v7;
    uint64_t v14 = *(void (**)(uint64_t, void, id, uint64_t, uint64_t (*)(uint64_t), void *))(*(void *)v9 + 232);
    id v15 = (id)static MOSuggestionAssetCacheManager.defaultQueue;
    v14(v24, 0, v15, 9, partial apply for closure #1 in MOSuggestionCollectionViewCellViewModel._fetchGroupedAssets(assetReferences:updateIndex:completion:), v12);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();

    a1 = v18;
  }
  while (v17 != v7);
LABEL_15:
  swift_release();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t MOSuggestionCollectionViewCellViewModel._fetchAllOtherAssets(assetReferences:completion:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = a1;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v4 = result;
    if (!result) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v4) {
      goto LABEL_15;
    }
  }
  if (v4 < 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v6 = 0;
  unint64_t v15 = v3 & 0xC000000000000001;
  uint64_t v16 = v4;
  unint64_t v17 = v3;
  do
  {
    if (v15)
    {
      uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v7 = *(void *)(v3 + 8 * v6 + 32);
      swift_retain();
    }
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    uint64_t v8 = static MOSuggestionAssetCacheManager.shared;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_1001DA250;
    *(void *)(v9 + 32) = v7;
    uint64_t v20 = v9;
    specialized Array._endMutation()();
    uint64_t v10 = swift_allocObject();
    swift_weakInit();
    uint64_t v11 = (void *)swift_allocObject();
    v11[2] = v10;
    v11[3] = a2;
    v11[4] = a3;
    v11[5] = v6;
    v11[6] = v7;
    uint64_t v12 = one-time initialization token for defaultQueue;
    swift_retain_n();
    swift_retain();
    swift_retain();
    if (v12 != -1) {
      swift_once();
    }
    ++v6;
    uint64_t v13 = *(void (**)(uint64_t, void, id, uint64_t, void (*)(unint64_t), void *))(*(void *)v8 + 232);
    id v14 = (id)static MOSuggestionAssetCacheManager.defaultQueue;
    v13(v20, 0, v14, 3, partial apply for closure #1 in MOSuggestionCollectionViewCellViewModel._fetchAllOtherAssets(assetReferences:completion:), v11);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();

    unint64_t v3 = v17;
  }
  while (v16 != v6);
LABEL_15:

  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in MOSuggestionCollectionViewCellViewModel._fetchGroupedAssets(assetReferences:updateIndex:completion:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void), uint64_t a8)
{
  uint64_t v139 = a8;
  uint64_t v142 = a6;
  unint64_t v143 = a7;
  uint64_t v138 = type metadata accessor for MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult();
  __chkstk_darwin(v138);
  unint64_t v140 = (char *)&v135 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v137 = (char *)&v135 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v136 = (char *)&v135 - v16;
  unint64_t v17 = (unint64_t *)type metadata accessor for DispatchWorkItemFlags();
  uint64_t v141 = *(v17 - 1);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v135 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for DispatchQoS();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v135 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    type metadata accessor for OS_dispatch_queue();
    char v31 = (void *)static OS_dispatch_queue.main.getter();
    uint64_t v32 = swift_allocObject();
    *(void *)(v32 + 16) = a3;
    *(void *)(v32 + 24) = a4;
    aBlock[4] = partial apply for closure #1 in closure #1 in MOSuggestionCollectionViewCellViewModel._fetchGroupedAssets(assetReferences:updateIndex:completion:);
    aBlock[5] = v32;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    void aBlock[3] = &block_descriptor_10;
    uint64_t v33 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = _swiftEmptyArrayStorage;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v33);

    (*(void (**)(char *, unint64_t *))(v141 + 8))(v19, v17);
    return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  }
  uint64_t v25 = (id *)Strong;
  uint64_t v26 = (void (*)(char *))a3;
  uint64_t v27 = a5 + 16;
  swift_beginAccess();
  if (__OFADD__(*(void *)(a5 + 16), 1))
  {
    __break(1u);
  }
  else
  {
    a3 = (unint64_t)v143;
    unint64_t v17 = (unint64_t *)(v142 + 16);
    *(void *)uint64_t v27 = *(void *)(a5 + 16) + 1;
    if (!a1) {
      goto LABEL_15;
    }
    uint64_t v21 = a1 & 0xFFFFFFFFFFFFFF8;
    if (!((unint64_t)a1 >> 62))
    {
      id v28 = *(id *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v28) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }
  swift_bridgeObjectRetain();
  id v28 = (id)_CocoaArrayWrapper.endIndex.getter();
  if (v28)
  {
LABEL_6:
    if ((a1 & 0xC000000000000001) != 0)
    {
      id v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (!*(void *)(v21 + 16))
      {
        __break(1u);
        goto LABEL_55;
      }
      id v29 = *(id *)(a1 + 32);
    }
    uint64_t v30 = v29;
    swift_bridgeObjectRelease();
    swift_beginAccess();
    id v28 = v30;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*v17 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((*v17 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    {
LABEL_10:
      a1 = (uint64_t)v17;
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();

      goto LABEL_15;
    }
LABEL_55:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    goto LABEL_10;
  }
LABEL_14:
  swift_bridgeObjectRelease();
LABEL_15:
  swift_beginAccess();
  uint64_t v35 = *(void *)v27;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    a1 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v35 < a1) {
      return swift_release();
    }
    swift_bridgeObjectRetain();
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_19;
    }
LABEL_49:
    swift_release();
    return swift_bridgeObjectRelease();
  }
  uint64_t v36 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v35 < v36) {
    return swift_release();
  }
  swift_bridgeObjectRetain();
  if (!v36) {
    goto LABEL_49;
  }
LABEL_19:
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v27 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_58:
      char v86 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v86 & 1) == 0) {
        goto LABEL_60;
      }
      goto LABEL_59;
    }
    uint64_t v27 = *(void *)(a3 + 32);
    swift_retain();
  }
  uint64_t v37 = swift_bridgeObjectRelease();
  unint64_t v143 = *(uint64_t (**)(void))(*(void *)v27 + 120);
  uint64_t v38 = (void *)((uint64_t (*)(uint64_t))v143)(v37);
  a1 = (uint64_t)(id)specialized static MOSuggestionAssetReference.consolidatedType(_:)((uint64_t)v38);

  uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v41 = v40;
  if (v39 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v41 == v42)
  {
    swift_bridgeObjectRelease_n();
LABEL_26:

    type metadata accessor for MOSuggestionInterstitialListAssetViewModel();
    swift_beginAccess();
    unint64_t v44 = swift_bridgeObjectRetain();
    int64_t v45 = MOSuggestionInterstitialListAssetViewModel.__allocating_init(photoAssets:)(v44);
    goto LABEL_27;
  }
  char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v43) {
    goto LABEL_26;
  }
  uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v56 = v55;
  if (v54 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v56 == v57)
  {
    swift_bridgeObjectRelease_n();
LABEL_33:

    type metadata accessor for MOSuggestionInterstitialListAssetViewModel();
    swift_beginAccess();
    unint64_t v59 = swift_bridgeObjectRetain();
    int64_t v45 = (int64_t)MOSuggestionInterstitialListAssetViewModel.__allocating_init(mediaAssets:)(v59);
    goto LABEL_27;
  }
  char v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v58) {
    goto LABEL_33;
  }
  uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v62 = v61;
  if (v60 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v62 == v63) {
    goto LABEL_36;
  }
  char v64 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v64) {
    goto LABEL_38;
  }
  uint64_t v66 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v68 = v67;
  if (v66 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v68 == v69)
  {
LABEL_36:
    swift_bridgeObjectRelease_n();
LABEL_38:

    type metadata accessor for MOSuggestionInterstitialListAssetViewModel();
    swift_beginAccess();
    unint64_t v65 = swift_bridgeObjectRetain();
    int64_t v45 = (int64_t)MOSuggestionInterstitialListAssetViewModel.__allocating_init(motionAssets:)(v65);
    goto LABEL_27;
  }
  char v70 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v70) {
    goto LABEL_38;
  }
  uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v73 = v72;
  if (v71 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v73 == v74)
  {
    swift_bridgeObjectRelease_n();
LABEL_46:

    type metadata accessor for MOSuggestionInterstitialListAssetViewModel();
    swift_beginAccess();
    unint64_t v76 = *v17;
    id v77 = v25[2];
    swift_bridgeObjectRetain();
    id v78 = [v77 displayStartDate];
    uint64_t v79 = v136;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    id v80 = [v25[2] displayEndDate];
    uint64_t v81 = v137;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    int64_t v45 = MOSuggestionInterstitialListAssetViewModel.__allocating_init(contactAssets:bundleStartDate:bundleEndDate:)(v76, v79, v81);
    goto LABEL_27;
  }
  char v75 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v75) {
    goto LABEL_46;
  }
  uint64_t v82 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v84 = v83;
  if (v82 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v84 != v85) {
    goto LABEL_58;
  }

  swift_bridgeObjectRelease_n();
LABEL_59:
  type metadata accessor for MOSuggestionInterstitialListAssetViewModel();
  swift_beginAccess();
  unint64_t v87 = *v17;
  id v88 = v25[2];
  swift_bridgeObjectRetain();
  id v89 = [v88 displayStartDate];
  uint64_t v90 = v136;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  id v91 = [v25[2] displayEndDate];
  BOOL v92 = v137;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v93._rawValue = v92;
  int64_t v45 = MOSuggestionInterstitialListAssetViewModel.__allocating_init(stateOfMindAssets:bundleStartDate:bundleEndDate:)(v87, v90, v93);
LABEL_27:
  int64_t v46 = v45;
  if (!v45)
  {
LABEL_60:
    uint64_t v94 = v143;
    uint64_t v95 = (void *)v143();
    uint64_t v96 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v98 = v97;
    if (v96 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v98 == v99)
    {

      uint64_t v100 = swift_bridgeObjectRelease_n();
    }
    else
    {
      char v101 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      uint64_t v100 = swift_bridgeObjectRelease();
      if ((v101 & 1) == 0) {
        goto LABEL_70;
      }
    }
    uint64_t v100 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 256))(v100);
    if (v100)
    {
      uint64_t v102 = v100;
      uint64_t v103 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      if (*(void *)(v102 + 16)
        && (unint64_t v105 = specialized __RawDictionaryStorage.find<A>(_:)(v103, v104), (v106 & 1) != 0))
      {
        uint64_t v107 = *(void *)(*(void *)(v102 + 56) + 8 * v105);
        swift_unknownObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v146 = v107;
        uint64_t v100 = swift_dynamicCast();
        if (v100)
        {
          uint64_t v108 = specialized static MOSuggestionAssetMediaCoverArtQueryInput.typeFromBundleId(_:)(v144, v145);
          uint64_t v109 = swift_bridgeObjectRelease();
          id v110 = (id)((uint64_t (*)(uint64_t))v94)(v109);
          char v111 = specialized MOSuggestionAssetVisualSubType.init(assetType:mediaType:motionActivityType:)(v110, v108, 0, 0);
          type metadata accessor for MOSuggestionInterstitialListAssetViewModel();
          swift_allocObject();
          uint64_t v112 = MOSuggestionInterstitialListAssetViewModel.init(id:subViewModels:topLevelGroupHeading:dates:titles:icons:assetVisualSubType:selectable:isLoadingPlaceHolder:isFallback:)(0x6C6F686563616C70, 0xEB00000000726564, 0, 0, 0, 0, 0, 0, v111, 1, 0, 1);
LABEL_77:
          uint64_t v130 = v112;
          unint64_t v131 = v140;
          uint64_t v132 = &v140[*(int *)(v138 + 24)];
          uint64_t v133 = type metadata accessor for UUID();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v133 - 8) + 56))(v132, 1, 1, v133);

          uint64_t v134 = v139;
          *(void *)unint64_t v131 = v130;
          *((void *)v131 + 1) = v134;
          v131[16] = 0;
          v26(v131);
          swift_release();
          swift_release();
          uint64_t v53 = (uint64_t)v131;
          return outlined destroy of MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult(v53);
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v100 = swift_bridgeObjectRelease();
      }
    }
LABEL_70:
    CGRect v113 = (void *)((uint64_t (*)(uint64_t))v94)(v100);
    uint64_t v114 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v116 = v115;
    if (v114 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v116 == v117)
    {

      uint64_t v118 = swift_bridgeObjectRelease_n();
    }
    else
    {
      char v119 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      uint64_t v118 = swift_bridgeObjectRelease();
      if ((v119 & 1) == 0)
      {
LABEL_76:
        id v110 = (id)((uint64_t (*)(uint64_t))v94)(v118);
        char v129 = specialized MOSuggestionAssetVisualSubType.init(assetType:mediaType:motionActivityType:)(v110, 0, 1, 0);
        type metadata accessor for MOSuggestionInterstitialListAssetViewModel();
        swift_allocObject();
        uint64_t v112 = MOSuggestionInterstitialListAssetViewModel.init(id:subViewModels:topLevelGroupHeading:dates:titles:icons:assetVisualSubType:selectable:isLoadingPlaceHolder:isFallback:)(0x6C6F686563616C70, 0xEB00000000726564, 0, 0, 0, 0, 0, 0, v129, 1, 0, 1);
        goto LABEL_77;
      }
    }
    uint64_t v118 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 280))(v118);
    if (v118)
    {
      uint64_t v120 = (void *)v118;
      uint64_t v121 = (void *)v94();
      id v122 = v120;
      id v123 = v121;
      LOBYTE(v121) = specialized MOSuggestionAssetVisualSubType.init(assetType:mediaType:motionActivityType:)(v123, 0, 1, v120);
      type metadata accessor for MOSuggestionInterstitialListAssetViewModel();
      swift_allocObject();
      uint64_t v124 = MOSuggestionInterstitialListAssetViewModel.init(id:subViewModels:topLevelGroupHeading:dates:titles:icons:assetVisualSubType:selectable:isLoadingPlaceHolder:isFallback:)(0x6C6F686563616C70, 0xEB00000000726564, 0, 0, 0, 0, 0, 0, (char)v121, 1, 0, 1);
      unint64_t v125 = v140;
      id v126 = &v140[*(int *)(v138 + 24)];
      uint64_t v127 = type metadata accessor for UUID();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v127 - 8) + 56))(v126, 1, 1, v127);

      uint64_t v128 = v139;
      *(void *)unint64_t v125 = v124;
      *((void *)v125 + 1) = v128;
      v125[16] = 0;
      v26(v125);

      swift_release();
      swift_release();
      uint64_t v53 = (uint64_t)v125;
      return outlined destroy of MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult(v53);
    }
    goto LABEL_76;
  }
  uint64_t v47 = v140;
  uint64_t v48 = &v140[*(int *)(v138 + 24)];
  uint64_t v49 = (void (*)(uint64_t))*((void *)*v25 + 43);
  uint64_t v50 = swift_retain_n();
  v49(v50);
  uint64_t v51 = type metadata accessor for UUID();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v48, 0, 1, v51);
  uint64_t v52 = v139;
  *(void *)uint64_t v47 = v46;
  *((void *)v47 + 1) = v52;
  v47[16] = 0;
  v26(v47);
  swift_release_n();
  swift_release();
  swift_release();
  uint64_t v53 = (uint64_t)v47;
  return outlined destroy of MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult(v53);
}

void closure #1 in MOSuggestionCollectionViewCellViewModel._fetchAllOtherAssets(assetReferences:completion:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, objc_class *a5, uint64_t a6)
{
  uint64_t v54 = a6;
  uint64_t v57 = a5;
  uint64_t v55 = type metadata accessor for MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult();
  __chkstk_darwin(v55);
  uint64_t v10 = ((char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v56 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DispatchQoS();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  unint64_t v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    type metadata accessor for OS_dispatch_queue();
    uint64_t v32 = (void *)static OS_dispatch_queue.main.getter();
    uint64_t v33 = swift_allocObject();
    *(void *)(v33 + 16) = a3;
    *(void *)(v33 + 24) = a4;
    char v64 = partial apply for closure #1 in closure #1 in MOSuggestionCollectionViewCellViewModel._fetchAllOtherAssets(assetReferences:completion:);
    unint64_t v65 = (void *)v33;
    CGPoint aBlock = _NSConcreteStackBlock;
    uint64_t v61 = 1107296256;
    uint64_t v62 = thunk for @escaping @callee_guaranteed () -> ();
    uint64_t v63 = &block_descriptor_23;
    uint64_t v34 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    static DispatchQoS.unspecified.getter();
    CGPoint aBlock = _swiftEmptyArrayStorage;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    uint64_t v35 = v56;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v34);

    (*(void (**)(char *, uint64_t))(v35 + 8))(v13, v11);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    return;
  }
  uint64_t v53 = a4;
  unint64_t v58 = a1;
  if (!a1) {
    goto LABEL_14;
  }
  uint64_t v52 = Strong;
  os_log_type_t v19 = a1 & 0xF8;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v21 = v14;
    if (v36) {
      goto LABEL_5;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  uint64_t v20 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  uint64_t v21 = v14;
  if (!v20) {
    goto LABEL_13;
  }
LABEL_5:
  uint64_t v22 = (uint8_t *)v11;
  uint64_t v50 = v21;
  if ((v58 & 0xC000000000000001) != 0)
  {
    id v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    uint64_t v23 = v15;
  }
  else
  {
    if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_28;
    }
    uint64_t v23 = v15;
    id v24 = *(id *)(v58 + 32);
  }
  swift_bridgeObjectRelease();
  id v51 = v24;
  uint64_t v25 = specialized MOSuggestionCollectionViewCellViewModel.createListAssetViewModel(for:)(v24);
  uint64_t v26 = v53;
  if (v25)
  {
    uint64_t v27 = v25;
    type metadata accessor for OS_dispatch_queue();
    id v28 = (void *)static OS_dispatch_queue.main.getter();
    id v29 = (void *)swift_allocObject();
    uint64_t v30 = v57;
    v29[2] = v27;
    v29[3] = v30;
    _OWORD v29[4] = v52;
    v29[5] = a3;
    v29[6] = v26;
    char v64 = partial apply for closure #2 in closure #1 in MOSuggestionCollectionViewCellViewModel._fetchAllOtherAssets(assetReferences:completion:);
    unint64_t v65 = v29;
    CGPoint aBlock = _NSConcreteStackBlock;
    uint64_t v61 = 1107296256;
    uint64_t v62 = thunk for @escaping @callee_guaranteed () -> ();
    uint64_t v63 = &block_descriptor_29;
    char v31 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_release();
    static DispatchQoS.unspecified.getter();
    CGPoint aBlock = _swiftEmptyArrayStorage;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();

    _Block_release(v31);
    swift_release();
    swift_release();

    (*(void (**)(char *, uint8_t *))(v56 + 8))(v13, v22);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v17, v50);
    return;
  }

LABEL_14:
  id v37 = (id)(*(uint64_t (**)(void))(*(void *)v54 + 120))();
  char v38 = specialized MOSuggestionAssetVisualSubType.init(assetType:mediaType:motionActivityType:)(v37, 0, 1, 0);
  type metadata accessor for MOSuggestionInterstitialListAssetViewModel();
  swift_allocObject();
  uint64_t v39 = MOSuggestionInterstitialListAssetViewModel.init(id:subViewModels:topLevelGroupHeading:dates:titles:icons:assetVisualSubType:selectable:isLoadingPlaceHolder:isFallback:)(0x6C6F686563616C70, 0xEB00000000726564, 0, 0, 0, 0, 0, 0, v38, 1, 0, 1);
  uint64_t v40 = (char *)v10 + *(int *)(v55 + 24);
  uint64_t v41 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v40, 1, 1, v41);

  uint64_t v42 = v57;
  v10->Class isa = (Class)v39;
  v10[1].Class isa = v42;
  LOBYTE(v10[2].isa) = 0;
  ((void (*))a3)(v10);
  outlined destroy of MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult((uint64_t)v10);
  if (serverManager._connectionProperties != (NSMutableDictionary *)-1) {
    swift_once();
  }
  uint64_t v43 = type metadata accessor for Logger();
  __swift_project_value_buffer(v43, (uint64_t)static MOAngelLogger.assets);
  a3 = v58;
  swift_bridgeObjectRetain_n();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v10, v19))
  {

    swift_bridgeObjectRelease_n();
    swift_release();
    return;
  }
  uint64_t v22 = (uint8_t *)swift_slowAlloc();
  CGPoint aBlock = (void *)swift_slowAlloc();
  *(_DWORD *)uint64_t v22 = 136315138;
  if (!a3)
  {
    unint64_t v47 = 0xE300000000000000;
    uint64_t v48 = 7104878;
LABEL_31:
    uint64_t v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v47, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v19, "[MOSuggestionCollectionViewCellViewModel.List] failed to generate view model, asset=%s", v22, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();

    return;
  }
  uint64_t v11 = a3 & 0xFFFFFFFFFFFFFF8;
  if (!(a3 >> 62))
  {
    uint64_t v44 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v44) {
      goto LABEL_20;
    }
LABEL_29:
    swift_bridgeObjectRelease();
    int64_t v46 = 0;
    goto LABEL_30;
  }
LABEL_28:
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_29;
  }
LABEL_20:
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v45 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_23;
  }
  if (*(void *)(v11 + 16))
  {
    id v45 = *(id *)(a3 + 32);
LABEL_23:
    int64_t v46 = v45;
    swift_bridgeObjectRelease();
LABEL_30:
    uint64_t v59 = (uint64_t)v46;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MOSuggestionAsset?);
    uint64_t v48 = Optional.debugDescription.getter();
    unint64_t v47 = v49;

    goto LABEL_31;
  }
  __break(1u);
}

uint64_t closure #1 in closure #1 in MOSuggestionCollectionViewCellViewModel._fetchGroupedAssets(assetReferences:updateIndex:completion:)(void (*a1)(char *))
{
  uint64_t v2 = type metadata accessor for MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult();
  uint64_t v3 = v2 - 8;
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for MOSuggestionInterstitialListAssetViewModel();
  swift_allocObject();
  uint64_t v6 = MOSuggestionInterstitialListAssetViewModel.init(id:subViewModels:topLevelGroupHeading:dates:titles:icons:assetVisualSubType:selectable:isLoadingPlaceHolder:isFallback:)(0x6C6F686563616C70, 0xEB00000000726564, 0, 0, 0, 0, 0, 0, 26, 1, 1, 0);
  uint64_t v7 = &v5[*(int *)(v3 + 32)];
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  *(void *)uint64_t v5 = v6;
  *((void *)v5 + 1) = 0;
  v5[16] = 1;
  a1(v5);
  return outlined destroy of MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult((uint64_t)v5);
}

uint64_t closure #2 in closure #1 in MOSuggestionCollectionViewCellViewModel._fetchAllOtherAssets(assetReferences:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *))
{
  uint64_t v8 = type metadata accessor for MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult();
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = &v11[*(int *)(v9 + 32)];
  uint64_t v13 = *(void (**)(uint64_t))(*(void *)a3 + 344);
  uint64_t v14 = swift_retain();
  v13(v14);
  uint64_t v15 = type metadata accessor for UUID();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v12, 0, 1, v15);
  *(void *)uint64_t v11 = a1;
  *((void *)v11 + 1) = a2;
  unsigned char v11[16] = 0;
  a4(v11);
  return outlined destroy of MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult((uint64_t)v11);
}

uint64_t type metadata accessor for MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult()
{
  uint64_t result = type metadata singleton initialization cache for MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult;
  if (!type metadata singleton initialization cache for MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined init with copy of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t initializeBufferWithCopyOfBuffer for MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    *(void *)(a1 + 8) = a2[1];
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = (void *)(a1 + v6);
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for UUID();
    uint64_t v10 = *(void *)(v9 - 8);
    uint64_t v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
    swift_retain();
    if (v11(v8, 1, v9))
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
      memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    }
  }
  return v5;
}

uint64_t destroy for MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v4, 1, v5);
  if (!result)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
    return v7(v4, v5);
  }
  return result;
}

uint64_t initializeWithCopy for MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (void *)(a1 + v5);
  uint64_t v7 = (const void *)(a2 + v5);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48);
  swift_retain();
  if (v10(v7, 1, v8))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v6, v7, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v6, v7, v8);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

uint64_t assignWithCopy for MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  uint64_t v6 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 24))(v8, v9, v10);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v8, v9, v10);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  return a1;
}

uint64_t initializeWithTake for MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (void *)(a1 + v5);
  uint64_t v7 = (const void *)(a2 + v5);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v6, v7, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

uint64_t assignWithTake for MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v7, v8, v9);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v7, v8, v9);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008B044);
}

uint64_t sub_10008B044(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008B10C);
}

void *sub_10008B10C(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

void type metadata completion function for MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult()
{
  type metadata accessor for UUID?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for UUID?()
{
  if (!lazy cache variable for type metadata for UUID?)
  {
    type metadata accessor for UUID();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UUID?);
    }
  }
}

uint64_t sub_10008B2B4()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10008B2EC()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10008B2FC()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10008B334()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t partial apply for closure #1 in MOSuggestionCollectionViewCellViewModel._fetchGroupedAssets(assetReferences:updateIndex:completion:)(uint64_t a1)
{
  return closure #1 in MOSuggestionCollectionViewCellViewModel._fetchGroupedAssets(assetReferences:updateIndex:completion:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(uint64_t (**)(void))(v1 + 56), *(void *)(v1 + 64));
}

uint64_t sub_10008B3A0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for closure #1 in closure #1 in MOSuggestionCollectionViewCellViewModel._fetchGroupedAssets(assetReferences:updateIndex:completion:)()
{
  return closure #1 in closure #1 in MOSuggestionCollectionViewCellViewModel._fetchGroupedAssets(assetReferences:updateIndex:completion:)(*(void (**)(char *))(v0 + 16));
}

uint64_t block_copy_helper_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_10()
{
  return swift_release();
}

uint64_t outlined destroy of MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MOSuggestionCollectionViewCellViewModel.MOSuggestionCollectionListViewAssetPlaceHolderSingleResult();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *specialized MOSuggestionCollectionViewCellViewModel.createListAssetViewModel(for:)(void *a1)
{
  id v2 = [a1 assetType];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;
  if (v3 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v5 == v6)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_15;
  }
  char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v8)
  {
LABEL_15:

    type metadata accessor for MOSuggestionInterstitialListAssetViewModel();
    return (void *)MOSuggestionInterstitialListAssetViewModel.__allocating_init(multiPinMapAsset:)(a1);
  }
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;
  if (v9 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v11 == v12)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_17;
  }
  char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v14)
  {
LABEL_17:

    type metadata accessor for MOSuggestionInterstitialListAssetViewModel();
    return MOSuggestionInterstitialListAssetViewModel.__allocating_init(workoutAsset:)(a1);
  }
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v17 = v16;
  if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v17 == v18)
  {

    swift_bridgeObjectRelease_n();
LABEL_19:
    type metadata accessor for MOSuggestionInterstitialListAssetViewModel();
    return (void *)MOSuggestionInterstitialListAssetViewModel.__allocating_init(workoutGroupAsset:)(a1);
  }
  char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v20) {
    goto LABEL_19;
  }
  return 0;
}

void partial apply for closure #1 in MOSuggestionCollectionViewCellViewModel._fetchAllOtherAssets(assetReferences:completion:)(unint64_t a1)
{
  closure #1 in MOSuggestionCollectionViewCellViewModel._fetchAllOtherAssets(assetReferences:completion:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(objc_class **)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t objectdestroy_16Tm()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t partial apply for closure #2 in closure #1 in MOSuggestionCollectionViewCellViewModel._fetchAllOtherAssets(assetReferences:completion:)()
{
  return closure #2 in closure #1 in MOSuggestionCollectionViewCellViewModel._fetchAllOtherAssets(assetReferences:completion:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void (**)(char *))(v0 + 40));
}

void *MOSuggestionAssetSystemIconImageFetcherConstants.kDefaultSize.unsafeMutableAddressor()
{
  return &static MOSuggestionAssetSystemIconImageFetcherConstants.kDefaultSize;
}

uint64_t static MOSuggestionAssetSystemIconImageFetcherConstants.kDefaultSize.getter()
{
  return 6;
}

uint64_t one-time initialization function for shared()
{
  type metadata accessor for MOSuggestionAssetSystemIconImageProvider();
  uint64_t result = swift_initStaticObject();
  static MOSuggestionAssetSystemIconImageProvider.shared = result;
  return result;
}

{
  uint64_t result;

  type metadata accessor for MOSuggestionAssetSystemSymbolProvider();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = &_swiftEmptyDictionarySingleton;
  static MOSuggestionAssetSystemSymbolProvider.shared = result;
  return result;
}

{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for MOEventBundleStore();
  uint64_t v0 = swift_allocObject();
  uint64_t result = MOEventBundleStore.init()();
  static MOEventBundleStore.shared = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for MOMusicPlaybackCoordinator();
  uint64_t v0 = swift_allocObject();
  uint64_t result = MOMusicPlaybackCoordinator.init()();
  static MOMusicPlaybackCoordinator.shared = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for MOLocationShifter();
  uint64_t v0 = swift_allocObject();
  uint64_t result = MOLocationShifter.init()();
  static MOLocationShifter.shared = v0;
  return result;
}

uint64_t *MOSuggestionAssetSystemIconImageProvider.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return &static MOSuggestionAssetSystemIconImageProvider.shared;
}

uint64_t static MOSuggestionAssetSystemIconImageProvider.shared.getter()
{
  type metadata accessor for MOSuggestionAssetSystemIconImageProvider();

  return swift_initStaticObject();
}

void MOSuggestionAssetSystemIconImageProvider.getAssetFor(workoutType:size:renderGlyph:isIndoors:completion:)(uint64_t a1, char a2, char a3, char a4, void (*a5)(void), uint64_t a6)
{
  if (serverManager._clientConnections != (NSMutableDictionary *)-1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static MOAngelLogger.shared);
  int v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v31 = a6;
    HIDWORD(v32) = HIDWORD(a1);
    uint64_t v15 = a5;
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 134218240;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 12) = 1024;
    LODWORD(v32) = a4 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "[workoutIcon] workoutType=%lu, isIndoor=%{BOOL}d", (uint8_t *)v16, 0x12u);
    a5 = v15;
    swift_slowDealloc();
  }

  uint64_t v17 = (CGContext *)[self activityTypeWithHKWorkoutActivityTypeIdentifier:a1 isIndoor:a4 & 1 metadata:0];
  uint64_t v18 = (CGContext *)(id)FIUIStaticScalableWorkoutIconImage();
  if (v18)
  {
    os_log_type_t v19 = v18;
    if (a2 - 11) < 0xF7u || (a3)
    {
      uint64_t v20 = one-time initialization token for exerciseGreen;
      os_log_type_t v19 = v18;
      if (v20 != -1) {
        swift_once();
      }
      uint64_t v21 = (void *)static MOSuggestionTheme.Colors.exerciseGreen;
      id v22 = [static MOSuggestionTheme.Colors.exerciseGreen colorWithAlphaComponent:0.18 v31, v32];
      uint64_t v23 = UIImage.fitnessTintAndPill(with:backgroundColor:symbolCenteringOffset:assetSize:)(v21, v22, a2, 0.0);

      if (v23)
      {

        os_log_type_t v19 = v23;
      }
      else
      {
        a5(0);
      }
    }
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      id v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "[Assets] Packed asset for system image", v29, 2u);
      swift_slowDealloc();
    }

    uint64_t v30 = v19;
    a5(v19);

    uint64_t v17 = v30;
  }
  else
  {
    id v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 134217984;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "[Assets] Unable to fetch system image for workoutType:%lu", v26, 0xCu);
      swift_slowDealloc();
    }

    a5(0);
  }
}

uint64_t type metadata accessor for MOSuggestionAssetSystemIconImageProvider()
{
  return self;
}

ValueMetadata *type metadata accessor for MOSuggestionAssetSystemIconImageFetcherConstants()
{
  return &type metadata for MOSuggestionAssetSystemIconImageFetcherConstants;
}

uint64_t specialized MOSuggestionAssetSystemIconImageProvider.getAssetFor(workoutType:size:renderGlyph:isIndoors:completion:)(uint64_t a1, char a2, char a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 a11, uint64_t a12, uint64_t a13, uint64_t a14, void (*a15)(id), uint8_t *a16)
{
  clientConnections = serverManager._clientConnections;
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  if (clientConnections != (NSMutableDictionary *)-1) {
    swift_once();
  }
  uint64_t v50 = a6;
  uint64_t v21 = type metadata accessor for Logger();
  __swift_project_value_buffer(v21, (uint64_t)static MOAngelLogger.shared);
  id v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.debug.getter();
  uint64_t v49 = a8;
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 134218240;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v24 + 12) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "[workoutIcon] workoutType=%lu, isIndoor=%{BOOL}d", (uint8_t *)v24, 0x12u);
    swift_slowDealloc();
  }

  uint64_t v25 = a14;
  id v46 = [self activityTypeWithHKWorkoutActivityTypeIdentifier:a1 isIndoor:a4 & 1 metadata:0];
  uint64_t v26 = (CGContext *)(id)FIUIStaticScalableWorkoutIconImage();
  uint64_t v27 = a16;
  if (v26)
  {
    os_log_type_t v28 = v26;
    if (a2 - 11) < 0xF7u || (a3)
    {
      uint64_t v33 = one-time initialization token for exerciseGreen;
      os_log_type_t v28 = v26;
      if (v33 != -1) {
        swift_once();
      }
      uint64_t v34 = (void *)static MOSuggestionTheme.Colors.exerciseGreen;
      id v35 = [(id)static MOSuggestionTheme.Colors.exerciseGreen colorWithAlphaComponent:0.18];
      uint64_t v36 = UIImage.fitnessTintAndPill(with:backgroundColor:symbolCenteringOffset:assetSize:)(v34, v35, a2, 0.0);

      if (v36)
      {
        uint64_t v29 = a12;

        os_log_type_t v28 = v36;
      }
      else
      {
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        specialized closure #1 in MOSuggestionAssetCacheManager.fetchAndCacheWorkoutObjectFromProvider(_:cacheType:completion:)(a6, a7, v49, a9, a10, a11, a12, a13, a14, a15, a16);
        swift_release();
        swift_release();
        swift_release();
        uint64_t v29 = a12;
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        uint64_t v27 = a16;
        swift_release();
      }
    }
    else
    {
      uint64_t v29 = a12;
    }
    id v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "[Assets] Packed asset for system image", v39, 2u);
      swift_slowDealloc();
    }

    swift_beginAccess();
    id v45 = *(void **)(a5 + 16);
    *(void *)(a5 + 16) = v28;
    swift_retain_n();
    uint64_t v40 = v28;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v41 = v40;

    specialized closure #1 in MOSuggestionAssetCacheManager.fetchAndCacheWorkoutObjectFromProvider(_:cacheType:completion:)(v50, a7, v49, a9, a10, a11, v29, a13, a14, a15, v27);
    swift_release();

    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v32 = 134217984;
      uint64_t v27 = a16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "[Assets] Unable to fetch system image for workoutType:%lu", v32, 0xCu);
      uint64_t v25 = a14;
      swift_slowDealloc();
    }

    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    specialized closure #1 in MOSuggestionAssetCacheManager.fetchAndCacheWorkoutObjectFromProvider(_:cacheType:completion:)(a6, a7, v49, a9, a10, a11, a12, a13, v25, a15, v27);
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release_n();
  swift_release_n();
  swift_release_n();
  swift_release_n();
  swift_release_n();
  swift_release_n();
  swift_release_n();
  swift_release_n();
  return swift_release_n();
}

void specialized MOSuggestionAssetSystemIconImageProvider.getAssetFor(workoutType:size:renderGlyph:isIndoors:completion:)(uint64_t a1, char a2, char a3, char a4, uint64_t a5, uint64_t (*a6)(uint64_t))
{
  if (serverManager._clientConnections != (NSMutableDictionary *)-1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static MOAngelLogger.shared);
  int v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    char v15 = a2;
    char v16 = a3;
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 134218240;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 12) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "[workoutIcon] workoutType=%lu, isIndoor=%{BOOL}d", (uint8_t *)v17, 0x12u);
    a3 = v16;
    a2 = v15;
    swift_slowDealloc();
  }

  id v18 = [self activityTypeWithHKWorkoutActivityTypeIdentifier:a1 isIndoor:a4 & 1 metadata:0];
  os_log_type_t v19 = (CGContext *)(id)FIUIStaticScalableWorkoutIconImage();
  if (v19)
  {
    uint64_t v20 = v19;
    if (a2 - 11) < 0xF7u || (a3)
    {
      uint64_t v24 = one-time initialization token for exerciseGreen;
      uint64_t v20 = v19;
      if (v24 != -1) {
        swift_once();
      }
      uint64_t v25 = (void *)static MOSuggestionTheme.Colors.exerciseGreen;
      id v26 = [(id)static MOSuggestionTheme.Colors.exerciseGreen colorWithAlphaComponent:0.18];
      uint64_t v27 = UIImage.fitnessTintAndPill(with:backgroundColor:symbolCenteringOffset:assetSize:)(v25, v26, a2, 0.0);

      if (v27)
      {

        uint64_t v20 = v27;
      }
      else
      {
        closure #1 in closure #1 in closure #5 in MOSuggestionAssetCacheManager.fetchAndCacheCombinedWorkoutObjectsFromProviders(_:cacheType:completion:)(0, a5, a6);
      }
    }
    os_log_type_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "[Assets] Packed asset for system image", v30, 2u);
      swift_slowDealloc();
    }

    swift_beginAccess();
    os_log_type_t v31 = v20;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*(void *)(a5 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(a5 + 16) & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    uint64_t v32 = swift_endAccess();
    a6(v32);
  }
  else
  {
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      os_log_type_t v23 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)os_log_type_t v23 = 134217984;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "[Assets] Unable to fetch system image for workoutType:%lu", v23, 0xCu);
      swift_slowDealloc();
    }

    ((void (*)(void))a6)();
  }
}

Swift::Void __swiftcall UIImageView.blurView()()
{
  id v1 = [self effectWithStyle:8];
  id v2 = [objc_allocWithZone((Class)UIVisualEffectView) initWithEffect:v1];
  [v0 bounds];
  [v2 setFrame:];
  [v2 setAutoresizingMask:18];
  [v0 addSubview:v2];
}

CGContext *UIImage.fitnessTintAndPill(with:backgroundColor:symbolCenteringOffset:assetSize:)(void *a1, void *a2, char a3, double a4)
{
  uint64_t v5 = v4;
  if ((a3 - 2) > 8u) {
    double v9 = 300.0;
  }
  else {
    double v9 = dbl_1001DBB78[(char)(a3 - 2)];
  }
  id v10 = [self mainScreen];
  [v10 scale];
  double v12 = v11;

  double v13 = v9 * v12;
  if (!a2 || (os_log_type_t v14 = (CGColor *)[a2 CGColor]) == 0)
  {
    id v15 = [a1 colorWithAlphaComponent:0.18];
    os_log_type_t v14 = (CGColor *)[v15 CGColor];
  }
  char v16 = (CGColor *)[v5 imageWithRenderingMode:2];
  [v5 scale];
  CGFloat v18 = v17;
  v36.double width = v13 + 4.0;
  v36.double height = v13 + 4.0;
  UIGraphicsBeginImageContextWithOptions(v36, 0, v18);
  uint64_t result = UIGraphicsGetCurrentContext();
  if (result)
  {
    uint64_t v20 = result;
    double v21 = v13 * 0.5;
    id v22 = [self clearColor];
    [v22 set];

    v37.origin.CGFloat x = 2.0;
    v37.origin.double y = 2.0;
    v37.size.double width = v13;
    v37.size.double height = v13;
    CGContextFillRect(v20, v37);
    CGContextSetFillColorWithColor(v20, v14);
    v38.origin.CGFloat x = 2.0;
    v38.origin.double y = 2.0;
    v38.size.double width = v13;
    v38.size.double height = v13;
    CGContextAddEllipseInRect(v20, v38);
    CGContextDrawPath(v20, kCGPathFillStroke);
    [a1 set];
    [(CGColor *)v16 size];
    double v24 = v23;
    [(CGColor *)v16 size];
    double v26 = v24 / v25;
    [(CGColor *)v16 size];
    double v28 = v27;
    [(CGColor *)v16 size];
    if (v29 <= v28)
    {
      double v33 = v21;
      double v34 = v21 / v26;
    }
    else
    {
      [(CGColor *)v16 size];
      double v31 = v30;
      [(CGColor *)v16 size];
      if (v31 >= v32)
      {

        id v35 = 0;
        uint64_t v20 = v16;
        goto LABEL_15;
      }
      double v33 = v21 * v26;
      double v34 = v21;
    }
    -[CGColor drawInRect:](v16, "drawInRect:", v21 - v33 * 0.5 + a4, v21 - v34 * 0.5 + a4);

    uint64_t result = UIGraphicsGetImageFromCurrentImageContext();
    if (result)
    {
      id v35 = result;

      UIGraphicsEndImageContext();
      char v16 = v14;
LABEL_15:

      return v35;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

id UIImage.averageColor.getter()
{
  id v1 = [objc_allocWithZone((Class)CIImage) initWithImage:v0];
  if (!v1) {
    return 0;
  }
  id v2 = v1;
  [v1 extent];
  double v4 = v3;
  [v2 extent];
  double v6 = v5;
  [v2 extent];
  double v8 = v7;
  [v2 extent];
  id v10 = [objc_allocWithZone((Class)CIVector) initWithX:v4 Y:v6 Z:v8 W:v9];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1001DA390;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v12;
  *(void *)(inited + 72) = type metadata accessor for UIApplication(0, &lazy cache variable for type metadata for CIImage);
  *(void *)(inited + 48) = v2;
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 88) = v13;
  *(void *)(inited + 120) = type metadata accessor for UIApplication(0, &lazy cache variable for type metadata for CIVector);
  *(void *)(inited + 96) = v10;
  id v14 = v10;
  id v15 = v2;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  NSString v16 = String._bridgeToObjectiveC()();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v18 = [self filterWithName:v16 withInputParameters:isa];

  if (!v18)
  {

    return 0;
  }
  id v19 = [v18 outputImage];
  if (!v19)
  {

    return 0;
  }
  uint64_t v20 = v19;
  uint64_t v21 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(v21 + 16) = 4;
  *(_DWORD *)(v21 + 32) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CIContextOption, Any)>);
  uint64_t v22 = swift_initStackObject();
  *(_OWORD *)(v22 + 16) = xmmword_1001DA0F0;
  *(void *)(v22 + 32) = kCIContextWorkingColorSpace;
  *(void *)(v22 + 64) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CFNullRef?);
  *(void *)(v22 + 40) = kCFNull;
  CFNullRef v23 = kCFNull;
  double v24 = kCIContextWorkingColorSpace;
  specialized Dictionary.init(dictionaryLiteral:)(v22);
  id v25 = objc_allocWithZone((Class)CIContext);
  type metadata accessor for CIContextOption(0);
  lazy protocol witness table accessor for type CIContextOption and conformance CIContextOption();
  Class v26 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v27 = [v25 initWithOptions:v26];

  id result = [v27 render:v20 toBitmap:v21 + 32 rowBytes:4 format:kCIFormatRGBA8 colorSpace:0.0, 0.0, 1.0, 1.0];
  unint64_t v30 = *(void *)(v21 + 16);
  if (!v30)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v30 == 1)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v30 < 3)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v30 != 3)
  {
    LOBYTE(v29) = *(unsigned char *)(v21 + 32);
    *(double *)&unint64_t v31 = (double)v29;
    double v32 = *(double *)&v31 / 255.0;
    LOBYTE(v31) = *(unsigned char *)(v21 + 33);
    *(double *)&unint64_t v33 = (double)v31;
    double v34 = *(double *)&v33 / 255.0;
    LOBYTE(v33) = *(unsigned char *)(v21 + 34);
    *(double *)&unint64_t v35 = (double)v33;
    double v36 = *(double *)&v35 / 255.0;
    LOBYTE(v35) = *(unsigned char *)(v21 + 35);
    id v37 = [objc_allocWithZone((Class)UIColor) initWithRed:v32 green:v34 blue:v36 alpha:(double)v35 / 255.0];
    swift_bridgeObjectRelease();

    return v37;
  }
LABEL_16:
  __break(1u);
  return result;
}

UIImage_optional __swiftcall UIImage.cropped()()
{
  id v1 = (CGImage *)[v0 CGImage];
  if (v1)
  {
    id v2 = v1;
    CGImageGetWidth(v1);
  }
  double v3 = (CGImage *)[v0 CGImage];
  if (v3)
  {
    double v4 = v3;
    CGImageGetHeight(v3);
  }
  double v5 = (CGImage *)[v0 CGImage];
  if (v5
    && (double v7 = v5,
        MOSuggestionInterstitialExpandableListViewCellConstants.init()(),
        CGImageRef v8 = CGImageCreateWithImageInRect(v7, v12),
        v7,
        v8))
  {
    double v9 = (objc_class *)[objc_allocWithZone((Class)UIImage) initWithCGImage:v8 scale:[v0 imageOrientation] orientation:0.0];
  }
  else
  {
    double v9 = 0;
  }
  id v10 = v9;
  result.value.super.Class isa = v10;
  result.is_nil = v6;
  return result;
}

UIImage_optional __swiftcall UIImage.circular()()
{
  [v0 size];
  double v2 = v1;
  [v0 size];
  double v4 = v3;
  id v5 = [objc_allocWithZone((Class)UIGraphicsImageRenderer) initWithSize:v2, v3];
  Swift::Bool v6 = (double *)swift_allocObject();
  void v6[2] = v2;
  v6[3] = v4;
  *((void *)v6 + 4) = v0;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = partial apply for closure #1 in UIImage.circular();
  *(void *)(v7 + 24) = v6;
  v13[4] = partial apply for thunk for @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ();
  void v13[5] = v7;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ();
  v13[3] = &block_descriptor_11;
  CGImageRef v8 = _Block_copy(v13);
  id v9 = v0;
  swift_retain();
  swift_release();
  id v10 = (objc_class *)[v5 imageWithActions:v8];

  _Block_release(v8);
  LOBYTE(v5) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  double v11 = (objc_class *)swift_release();
  if (v5) {
    __break(1u);
  }
  else {
    double v11 = v10;
  }
  result.value.super.Class isa = v11;
  result.is_nil = v12;
  return result;
}

id closure #1 in UIImage.circular()(uint64_t a1, void *a2)
{
  MOSuggestionInterstitialExpandableListViewCellConstants.init()();
  double v4 = v3;
  double v6 = v5;
  double v8 = v7;
  double v10 = v9;
  id v11 = [self bezierPathWithOvalInRect:v3, v5, v7, v9];
  [v11 addClip];

  return [a2 drawInRect:v4, v6, v8, v10];
}

void thunk for @escaping @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ()(uint64_t a1, void *a2)
{
  double v2 = *(void (**)(void))(a1 + 32);
  id v3 = a2;
  v2();
}

unint64_t lazy protocol witness table accessor for type CIContextOption and conformance CIContextOption()
{
  unint64_t result = lazy protocol witness table cache variable for type CIContextOption and conformance CIContextOption;
  if (!lazy protocol witness table cache variable for type CIContextOption and conformance CIContextOption)
  {
    type metadata accessor for CIContextOption(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CIContextOption and conformance CIContextOption);
  }
  return result;
}

uint64_t sub_10008D370()
{
  return _swift_deallocObject(v0, 40, 7);
}

id partial apply for closure #1 in UIImage.circular()(uint64_t a1)
{
  return closure #1 in UIImage.circular()(a1, *(void **)(v1 + 32));
}

uint64_t sub_10008D3B4()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t block_copy_helper_11(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_11()
{
  return swift_release();
}

double MOMapAnnotation.coordinate.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC16MomentsUIService15MOMapAnnotation_coordinate;
  swift_beginAccess();
  return *(double *)v1;
}

uint64_t MOMapAnnotation.coordinate.setter(double a1, double a2)
{
  double v5 = (double *)(v2 + OBJC_IVAR____TtC16MomentsUIService15MOMapAnnotation_coordinate);
  uint64_t result = swift_beginAccess();
  *double v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*MOMapAnnotation.coordinate.modify())()
{
  return MOSuggestionMapSnapshotView.platterBlurView.modify;
}

uint64_t MOMapAnnotation.title.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC16MomentsUIService15MOMapAnnotation_title);
  swift_beginAccess();
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t MOMapAnnotation.title.setter(uint64_t a1, uint64_t a2)
{
  double v5 = (void *)(v2 + OBJC_IVAR____TtC16MomentsUIService15MOMapAnnotation_title);
  swift_beginAccess();
  *double v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*MOMapAnnotation.title.modify())()
{
  return MOSuggestionMapSnapshotView.secondaryField.modify;
}

id MOMapAnnotation.__allocating_init(coordinate:title:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  double v9 = (char *)objc_allocWithZone(v4);
  double v10 = &v9[OBJC_IVAR____TtC16MomentsUIService15MOMapAnnotation_title];
  *(void *)double v10 = 0;
  *((void *)v10 + 1) = 0;
  id v11 = (double *)&v9[OBJC_IVAR____TtC16MomentsUIService15MOMapAnnotation_coordinate];
  double *v11 = a3;
  v11[1] = a4;
  swift_beginAccess();
  *(void *)double v10 = a1;
  *((void *)v10 + 1) = a2;
  swift_bridgeObjectRelease();
  v13.receiver = v9;
  v13.super_class = v4;
  return [super init];
}

id MOMapAnnotation.init(coordinate:title:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  double v7 = &v4[OBJC_IVAR____TtC16MomentsUIService15MOMapAnnotation_title];
  *(void *)double v7 = 0;
  *((void *)v7 + 1) = 0;
  double v8 = (double *)&v4[OBJC_IVAR____TtC16MomentsUIService15MOMapAnnotation_coordinate];
  *double v8 = a3;
  v8[1] = a4;
  swift_beginAccess();
  *(void *)double v7 = a1;
  *((void *)v7 + 1) = a2;
  swift_bridgeObjectRelease();
  v10.receiver = v4;
  v10.super_class = (Class)type metadata accessor for MOMapAnnotation();
  return [super init];
}

uint64_t type metadata accessor for MOMapAnnotation()
{
  return self;
}

uint64_t MOMapAnnotation.__allocating_init(coordinate:title:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

void MOMapAnnotation.init()()
{
}

id MOMapAnnotation.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MOMapAnnotation();
  return [super dealloc];
}

id MOSuggestionAssetMapSnapshotProvider.targetQueue.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 24);

  return v1;
}

void MOSuggestionAssetMapSnapshotProvider.targetQueue.setter(uint64_t a1)
{
  swift_beginAccess();
  id v3 = *(void **)(v1 + 24);
  *(void *)(v1 + 24) = a1;
}

uint64_t MOSuggestionAssetMapSnapshotProvider.__allocating_init(targetQueue:)(void *a1)
{
  uint64_t v2 = swift_allocObject();
  MOSuggestionAssetMapSnapshotProvider.init(targetQueue:)(a1);
  return v2;
}

uint64_t MOSuggestionAssetMapSnapshotProvider.init(targetQueue:)(id a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  double v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v9 - 8);
  type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  static DispatchQoS.userInitiated.getter();
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v5);
  v12[1] = _swiftEmptyArrayStorage;
  _sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  objc_super v10 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(v2 + 16) = v10;
  *(void *)(v2 + 32) = 0x3F40624DD2F1A9FCLL;
  *(void *)(v2 + 40) = [objc_allocWithZone((Class)NSCache) init];
  *(void *)(v2 + 48) = [objc_allocWithZone((Class)GEOMapService) init];
  if (!a1) {
    a1 = v10;
  }
  *(void *)(v2 + 24) = a1;
  [*(id *)(v2 + 40) setCountLimit:30];
  return v2;
}

uint64_t MOSuggestionAssetMapSnapshotProvider.getMapItem(resource:completion:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v22 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v21 - 8);
  uint64_t v11 = __chkstk_darwin(v21);
  objc_super v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v14 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 120))(v11);
  uint64_t v15 = swift_allocObject();
  swift_weakInit();
  NSString v16 = (void *)swift_allocObject();
  v16[2] = v15;
  v16[3] = a1;
  v16[4] = a2;
  v16[5] = a3;
  aBlock[4] = partial apply for closure #1 in MOSuggestionAssetMapSnapshotProvider.getMapItem(resource:completion:);
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  void aBlock[3] = &block_descriptor_12;
  double v17 = _Block_copy(aBlock);
  swift_retain();
  id v18 = a1;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  CFNullRef v23 = _swiftEmptyArrayStorage;
  _sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v22 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v21);
  swift_release();
  return swift_release();
}

uint64_t sub_10008E084()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void closure #1 in MOSuggestionAssetMapSnapshotProvider.getMapItem(resource:completion:)(uint64_t a1, void *a2, void (*a3)(uint64_t), uint64_t a4)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    id v9 = *(id *)(Strong + 40);
    swift_release();
    id v10 = [a2 identifier];
    if (!v10)
    {
      __break(1u);
      return;
    }
    uint64_t v11 = v10;
    id v12 = [v9 objectForKey:v10];

    if (v12)
    {
      uint64_t v13 = swift_unknownObjectRetain();
      a3(v13);
      swift_unknownObjectRelease_n();
      return;
    }
  }
  swift_beginAccess();
  uint64_t v14 = swift_weakLoadStrong();
  if (v14)
  {
    id v15 = *(id *)(v14 + 48);
    swift_release();
    Class isa = (Class)[a2 data];
    if (isa)
    {
      uint64_t v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v19 = v18;

      Class isa = Data._bridgeToObjectiveC()().super.isa;
      outlined consume of Data._Representation(v17, v19);
    }
    uint64_t v20 = (void *)swift_allocObject();
    v20[2] = a1;
    v20[3] = a2;
    v20[4] = a3;
    v20[5] = a4;
    v23[4] = partial apply for closure #1 in closure #1 in MOSuggestionAssetMapSnapshotProvider.getMapItem(resource:completion:);
    v23[5] = v20;
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 1107296256;
    _OWORD v23[2] = thunk for @escaping @callee_guaranteed (@guaranteed GEOMapItem?, @guaranteed Error?) -> ();
    void v23[3] = &block_descriptor_42;
    uint64_t v21 = _Block_copy(v23);
    swift_retain();
    id v22 = a2;
    swift_retain();
    swift_release();
    [v15 resolveMapItemFromHandle:isa completionHandler:v21];
    _Block_release(v21);
  }
}

void partial apply for closure #1 in MOSuggestionAssetMapSnapshotProvider.getMapItem(resource:completion:)()
{
  closure #1 in MOSuggestionAssetMapSnapshotProvider.getMapItem(resource:completion:)(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void (**)(uint64_t))(v0 + 32), *(void *)(v0 + 40));
}

id closure #1 in closure #1 in MOSuggestionAssetMapSnapshotProvider.getMapItem(resource:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t (*a5)(uint64_t))
{
  if (!a2)
  {
LABEL_6:
    if (a1) {
      goto LABEL_7;
    }
    return (id)a5(0);
  }
  swift_errorRetain();
  if (serverManager._connectionProperties != (NSMutableDictionary *)-1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static MOAngelLogger.assets);
  swift_errorRetain();
  swift_errorRetain();
  id v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    v19[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315138;
    swift_getErrorValue();
    uint64_t v12 = Error.localizedDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "[MOPOIAnnotationView]  %s", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    goto LABEL_6;
  }
  swift_errorRelease();
  swift_errorRelease();
  swift_errorRelease();

  if (!a1) {
    return (id)a5(0);
  }
LABEL_7:
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    swift_unknownObjectRetain();
    goto LABEL_13;
  }
  id v15 = *(void **)(Strong + 40);
  swift_unknownObjectRetain();
  id v16 = v15;
  swift_release();
  id result = [a4 identifier];
  if (result)
  {
    unint64_t v18 = result;
    [v16 setObject:a1 forKey:result];

LABEL_13:
    a5(a1);
    return (id)swift_unknownObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed GEOMapItem?, @guaranteed Error?) -> ()(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  swift_unknownObjectRetain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();

  return swift_unknownObjectRelease();
}

uint64_t block_copy_helper_12(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_12()
{
  return swift_release();
}

uint64_t _sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t MOSuggestionAssetMapSnapshotProvider.getMapFor(locations:size:completion:)(uint64_t a1, char a2, uint64_t (*a3)(void), uint64_t a4)
{
  if ((a2 - 2) > 8u) {
    return a3(0);
  }
  uint64_t v7 = (void *)(*(uint64_t (**)(void))(*(void *)v4 + 192))();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a3;
  *(void *)(v8 + 24) = a4;
  id v9 = *(void (**)(void *, void (*)(void *), uint64_t))(*(void *)v4 + 200);
  swift_retain();
  v9(v7, partial apply for closure #1 in MOSuggestionAssetMapSnapshotProvider.getMapFor(locations:size:completion:), v8);

  return swift_release();
}

void closure #1 in MOSuggestionAssetMapSnapshotProvider.getMapFor(locations:size:completion:)(void *a1, void (*a2)(void))
{
  if (a1)
  {
    uint64_t v4 = MOSuggestionAssetsTypeMultiPinMap;
    type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
    id v5 = objc_allocWithZone((Class)MOSuggestionAsset);
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    id v7 = a1;
    id v8 = [v5 init:v7 type:v4 contentClassType:ObjCClassFromMetadata];
    a2();
  }
  else
  {
    a2();
  }
}

void partial apply for closure #1 in MOSuggestionAssetMapSnapshotProvider.getMapFor(locations:size:completion:)(void *a1)
{
  closure #1 in MOSuggestionAssetMapSnapshotProvider.getMapFor(locations:size:completion:)(a1, *(void (**)(void))(v1 + 16));
}

void *MOSuggestionAssetMapSnapshotProvider.makeOptions(for:size:)(unint64_t a1, char a2)
{
  unint64_t v5 = a1;
  uint64_t v6 = *v2;
  if (a2 == 3) {
    uint64_t v7 = (*(uint64_t (**)(unint64_t))(v6 + 208))(a1);
  }
  else {
    uint64_t v7 = (*(uint64_t (**)(unint64_t))(v6 + 216))(a1);
  }
  unint64_t v8 = v7;
  id v9 = &selRef_collectionView_didSelectItemAtIndexPath_;
  id v10 = [objc_allocWithZone((Class)MKStandardMapConfiguration) init];
  uint64_t v11 = &selRef_filterIncludingAllCategories;
  if (a2 != 8 && (specialized static MOAngelDefaultsManager.BOOLeanValueFor(_:)() & 1) == 0) {
    uint64_t v11 = &selRef_filterExcludingAllCategories;
  }
  id v12 = [self *v11];
  [v10 setPointOfInterestFilter:v12];

  unint64_t v13 = v5 >> 62;
  if (v5 >> 62)
  {
LABEL_76:
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v14 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  id v15 = [objc_allocWithZone((Class)MKMapSnapshotOptions) v9[69]];
  id v80 = v15;
  unint64_t v81 = v8 >> 62;
  id v79 = v10;
  if (v14 != 1)
  {
    uint64_t v20 = 0;
    BOOL v22 = a2 == 8 || (a2 - 5) < 2u;
    goto LABEL_35;
  }
  id v16 = v15;
  if (v13)
  {
    swift_bridgeObjectRetain();
    if (_CocoaArrayWrapper.endIndex.getter())
    {
LABEL_12:
      if ((v5 & 0xC000000000000001) != 0)
      {
        unint64_t v13 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (!*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_83;
        }
        unint64_t v13 = *(void *)(v5 + 32);
        swift_retain();
      }
      uint64_t v18 = swift_bridgeObjectRelease();
      if ((*(double (**)(uint64_t))(*(void *)v13 + 360))(v18) > 0.9
        && (*(uint64_t (**)(void))(*(void *)v13 + 288))())
      {
        uint64_t v19 = swift_unknownObjectRelease();
        goto LABEL_28;
      }
      double v3 = (*(double (**)(void))(*(void *)v13 + 456))();
      if (one-time initialization token for LOW_CONFIDENCE_HIGH_CERTAINTITY_THRESHOLD == -1)
      {
LABEL_27:
        if (*(double *)&static MOMapLocation.LOW_CONFIDENCE_HIGH_CERTAINTITY_THRESHOLD < v3)
        {
LABEL_32:
          swift_release();
          goto LABEL_34;
        }
LABEL_28:
        uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 288))(v19);
        if (v23)
        {
          uint64_t v24 = v23;
          id v25 = [objc_allocWithZone((Class)MKMapItem) initWithGeoMapItem:v23 isPlaceHolderPlace:1];
          if (v25)
          {
            if ((a2 - 2) >= 9u)
            {
              double v27 = 300.0;
              double v28 = 300.0;
            }
            else
            {
              uint64_t v26 = 8 * (char)(a2 - 2);
              double v27 = *(double *)((char *)&unk_1001DBC58 + v26);
              double v28 = *(double *)((char *)&unk_1001DBCA0 + v26);
            }
            id v77 = v25;
            id v42 = [self cameraLookingAtMapItem:v25 forViewSize:1 allowPitch:v27];
            double v43 = (*(double (**)(void))(*(void *)v13 + 240))();
            [v42 setCenterCoordinate:v43, (*(double (**)(void))(*(void *)v13 + 264))()];
            unint64_t v76 = v42;
            [v16 setCamera:v42];
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
            uint64_t inited = swift_initStackObject();
            *(_OWORD *)(inited + 16) = xmmword_1001DA250;
            *(void *)(inited + 32) = v13;
            v84[0] = *(double *)&inited;
            specialized Array._endMutation()();
            unint64_t v45 = *(void *)&v84[0];
            swift_retain();
            double v46 = specialized static MOSuggestionAssetMapsClusterer.makeRegion(containing:applyBottomPaddingForPlatter:applyBottomPaddingForGradient:horizontalAspectRatio:markerStyle:applyRenderMargin:shouldAdjustMarker:)(v45, 0, 0, 0, 1);
            double v48 = v47;
            double v3 = v49;
            double v51 = v50;
            swift_bridgeObjectRelease();
            [v16 region];
            double v53 = v52;
            double v55 = v54;
            if (serverManager._connectionProperties != (NSMutableDictionary *)-1) {
              swift_once();
            }
            uint64_t v56 = type metadata accessor for Logger();
            __swift_project_value_buffer(v56, (uint64_t)static MOAngelLogger.assets);
            uint64_t v57 = Logger.logObject.getter();
            os_log_type_t v58 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v57, v58))
            {
              uint64_t v59 = swift_slowAlloc();
              *(_DWORD *)uint64_t v59 = 134218240;
              v84[0] = v51;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *(_WORD *)(v59 + 12) = 2048;
              v84[0] = v3;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              _os_log_impl((void *)&_mh_execute_header, v57, v58, "[MapSnapshot] naive region region=%f, %f", (uint8_t *)v59, 0x16u);
              id v10 = v79;
              swift_slowDealloc();
            }

            uint64_t v60 = v16;
            uint64_t v61 = Logger.logObject.getter();
            os_log_type_t v62 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v61, v62))
            {
              uint64_t v63 = v60;
              uint64_t v64 = swift_slowAlloc();
              *(_DWORD *)uint64_t v64 = 134218240;
              [v63 region];
              v84[0] = *(double *)&v65;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *(_WORD *)(v64 + 12) = 2048;
              [v63 region];
              v84[0] = *(double *)&v66;
              id v10 = v79;
              id v16 = v80;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              _os_log_impl((void *)&_mh_execute_header, v61, v62, "[MapSnapshot] options.camera region=%f, %f", (uint8_t *)v64, 0x16u);
              uint64_t v60 = v63;
              swift_slowDealloc();
            }
            else
            {

              uint64_t v61 = v60;
            }
            uint64_t v14 = 1;

            if (v53 >= v3 || v55 >= v51)
            {
              swift_unknownObjectRelease();

              swift_release();
            }
            else
            {
              uint64_t v75 = v24;
              -[NSObject setRegion:](v60, "setRegion:", v46, v48, v3, v51);
              uint64_t v67 = v60;
              uint64_t v68 = Logger.logObject.getter();
              os_log_type_t v69 = static os_log_type_t.debug.getter();
              if (os_log_type_enabled(v68, v69))
              {
                uint64_t v70 = swift_slowAlloc();
                *(_DWORD *)uint64_t v70 = 134218240;
                [v67 region];
                v84[0] = *(double *)&v71;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();

                *(_WORD *)(v70 + 12) = 2048;
                [v67 region];
                v84[0] = *(double *)&v72;
                id v10 = v79;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();

                _os_log_impl((void *)&_mh_execute_header, v68, v69, "[MapSnapshot] using naive region region=%f, %f", (uint8_t *)v70, 0x16u);
                uint64_t v14 = 1;
                swift_slowDealloc();
                swift_unknownObjectRelease();

                swift_release();
              }
              else
              {

                swift_unknownObjectRelease();
                swift_release();
              }
              id v16 = v80;
            }
            goto LABEL_43;
          }
          swift_release();
          swift_unknownObjectRelease();
          goto LABEL_34;
        }
        goto LABEL_32;
      }
LABEL_83:
      uint64_t v19 = swift_once();
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t v17 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v17) {
      goto LABEL_12;
    }
  }
  swift_bridgeObjectRelease();
LABEL_34:
  BOOL v22 = 0;
  uint64_t v20 = a2 == 4;
LABEL_35:
  if (serverManager._connectionProperties != (NSMutableDictionary *)-1) {
    swift_once();
  }
  uint64_t v29 = type metadata accessor for Logger();
  __swift_project_value_buffer(v29, (uint64_t)static MOAngelLogger.assets);
  swift_bridgeObjectRetain_n();
  unint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v78 = v14;
    uint64_t v32 = swift_slowAlloc();
    uint64_t v75 = swift_slowAlloc();
    v84[0] = *(double *)&v75;
    *(_DWORD *)uint64_t v32 = 136316162;
    unint64_t v33 = MOSuggestionAssetTileSize.description.getter(a2);
    uint64_t v83 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, (uint64_t *)v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v32 + 12) = 2048;
    if (v81)
    {
      swift_bridgeObjectRetain();
      uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v35 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    uint64_t v83 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v32 + 22) = 1024;
    LODWORD(v83) = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v32 + 28) = 1024;
    uint64_t v20 = v20;
    LODWORD(v83) = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v32 + 34) = 1024;
    LODWORD(v83) = (a2 & 0xFD) == 4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "[MapSnapshot] style: %s, numLocations: %ld, applyBottomPaddingForPlatter: %{BOOL}d, applyBottomPaddingForGradient: %{BOOL}d, shouldHaveHorizontalAspectRatio: %{BOOL}d", (uint8_t *)v32, 0x28u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v14 = v78;
    id v10 = v79;
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  id v16 = v80;
  [v80 setRegion:specialized static MOSuggestionAssetMapsClusterer.makeRegion(containing:applyBottomPaddingForPlatter:applyBottomPaddingForGradient:horizontalAspectRatio:markerStyle:applyRenderMargin:shouldAdjustMarker:)(v8, v22, v20, (a2 & 0xFD) == 4, 1)];
LABEL_43:
  [v16 setShowsBuildings:1 v75];
  [v16 setPreferredConfiguration:v10];
  [v16 _setAllowsSimultaneousLightDarkSnapshots:1];
  [v16 _setUseSnapshotService:1];
  if ((a2 - 2) > 8u)
  {
    double v37 = 300.0;
    double v38 = 300.0;
  }
  else
  {
    uint64_t v36 = 8 * (char)(a2 - 2);
    double v37 = *(double *)((char *)&unk_1001DBC58 + v36);
    double v38 = *(double *)((char *)&unk_1001DBCA0 + v36);
  }
  [v16 setSize:v37, v38];
  v84[0] = COERCE_DOUBLE(_swiftEmptyArrayStorage);
  if (v81)
  {
    swift_bridgeObjectRetain();
    uint64_t v39 = _CocoaArrayWrapper.endIndex.getter();
    if (v39) {
      goto LABEL_48;
    }
  }
  else
  {
    uint64_t v39 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v39)
    {
LABEL_48:
      unint64_t v13 = 0;
      uint64_t v40 = 4;
      while (1)
      {
        unint64_t v5 = v40 - 4;
        if ((v8 & 0xC000000000000001) != 0)
        {
          id v9 = (char **)specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v41 = v40 - 3;
          if (__OFADD__(v5, 1)) {
            goto LABEL_75;
          }
        }
        else
        {
          id v9 = *(char ***)(v8 + 8 * v40);
          swift_retain();
          uint64_t v41 = v40 - 3;
          if (__OFADD__(v5, 1))
          {
LABEL_75:
            __break(1u);
            goto LABEL_76;
          }
        }
        uint64_t v83 = (uint64_t)v9;
        closure #1 in MOSuggestionAssetMapSnapshotProvider.makeOptions(for:size:)(&v83, a2, v14 == 1, &v82);
        swift_release();
        if (v82)
        {
          id v10 = (id)v39;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((*(void *)&v84[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)&v84[0] & 0xFFFFFFFFFFFFFF8)
                                                                                           + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        ++v40;
        if (v41 == v39)
        {
          swift_bridgeObjectRelease();
          id v10 = v79;
          id v16 = v80;
          goto LABEL_79;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
LABEL_79:
  swift_bridgeObjectRelease();
  type metadata accessor for UIApplication(0, &lazy cache variable for type metadata for MKAnnotationView);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v16 setAnnotationViews:isa];

  return v16;
}

uint64_t closure #1 in MOSuggestionAssetMapSnapshotProvider.makeOptions(for:size:)@<X0>(uint64_t *a1@<X0>, char a2@<W1>, char a3@<W2>, void *a4@<X8>)
{
  uint64_t v4 = *a1;
  if (serverManager._connectionProperties != (NSMutableDictionary *)-1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static MOAngelLogger.assets);
  swift_retain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  unint64_t v8 = (double *)&unk_1001DA000;
  if (os_log_type_enabled(v6, v7))
  {
    os_log_type_t v44 = v7;
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 134218496;
    id v10 = *(double (**)(void))(*(void *)v4 + 360);
    double v50 = v10();
    uint64_t v11 = UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 12) = 2048;
    double v50 = (*(double (**)(uint64_t))(*(void *)v4 + 456))(v11);
    unint64_t v8 = (double *)&unk_1001DA000;
    uint64_t v12 = UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 22) = 1024;
    if (((double (*)(uint64_t))v10)(v12) <= 0.9)
    {
      swift_release();
    }
    else
    {
      uint64_t v13 = (*(uint64_t (**)(void))(*(void *)v4 + 288))();
      swift_release();
      if (v13)
      {
        swift_unknownObjectRelease();
        int v14 = 1;
LABEL_10:
        LODWORD(v50) = v14;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v6, v44, "[MapSnapshot] confidenceLevel=%f, unc=%f, shouldUseSpecificPlaceName=%{BOOL}d", (uint8_t *)v9, 0x1Cu);
        swift_slowDealloc();

        goto LABEL_11;
      }
    }
    int v14 = 0;
    goto LABEL_10;
  }

  uint64_t v15 = swift_release_n();
LABEL_11:
  id v16 = (double (**)(void))(*(void *)v4 + 360);
  uint64_t v17 = *v16;
  double v18 = ((double (*)(uint64_t))*v16)(v15);
  double v19 = v8[69];
  if (v18 > v19 && (uint64_t v20 = (uint64_t (**)(void))(*(void *)v4 + 288), v21 = *v20, (*v20)()))
  {
    uint64_t v22 = swift_unknownObjectRelease();
    uint64_t v43 = ((uint64_t (*)(uint64_t))v21)(v22);
  }
  else
  {
    uint64_t v43 = 0;
  }
  char v23 = (*(uint64_t (**)(void))(*(void *)v4 + 384))();
  uint64_t v45 = (*(uint64_t (**)(void))(*(void *)v4 + 312))();
  char v25 = v24;
  if (v17() > v19 && (uint64_t v26 = (*(uint64_t (**)(void))(*(void *)v4 + 288))()) != 0)
  {
    uint64_t v26 = swift_unknownObjectRelease();
    char v27 = 1;
  }
  else
  {
    char v27 = 0;
  }
  char v28 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 480))(v26);
  if (v17() > v19 && (*(uint64_t (**)(void))(*(void *)v4 + 288))())
  {
    uint64_t v29 = swift_unknownObjectRelease();
    BOOL v30 = 0;
  }
  else
  {
    double v31 = (*(double (**)(void))(*(void *)v4 + 456))();
    if (one-time initialization token for LOW_CONFIDENCE_HIGH_CERTAINTITY_THRESHOLD != -1) {
      uint64_t v29 = swift_once();
    }
    BOOL v30 = *(double *)&static MOMapLocation.LOW_CONFIDENCE_HIGH_CERTAINTITY_THRESHOLD < v31;
  }
  uint64_t v32 = v45;
  if (v25) {
    uint64_t v32 = 1;
  }
  double v50 = *(double *)&v43;
  char v51 = a2;
  char v52 = v23 & 1;
  uint64_t v53 = v32;
  BOOL v54 = (a3 & 1) == 0;
  char v55 = v27;
  char v56 = v28 & 1;
  BOOL v57 = v30;
  uint64_t v58 = 0x4000000000000000;
  double v33 = (*(double (**)(uint64_t))(*(void *)v4 + 240))(v29);
  double v34 = (*(double (**)(void))(*(void *)v4 + 264))();
  uint64_t v35 = (objc_class *)type metadata accessor for MOMapAnnotation();
  uint64_t v36 = (char *)objc_allocWithZone(v35);
  double v37 = &v36[OBJC_IVAR____TtC16MomentsUIService15MOMapAnnotation_title];
  *(void *)double v37 = 0;
  *((void *)v37 + 1) = 0;
  double v38 = (double *)&v36[OBJC_IVAR____TtC16MomentsUIService15MOMapAnnotation_coordinate];
  double *v38 = v33;
  v38[1] = v34;
  swift_beginAccess();
  *(void *)double v37 = 0;
  *((void *)v37 + 1) = 0;
  swift_bridgeObjectRelease();
  v49.receiver = v36;
  v49.super_class = v35;
  [super init];
  id v40 = objc_allocWithZone((Class)type metadata accessor for MOPOIAnnotationView());
  id v41 = specialized MOPOIAnnotationView.init(annotation:configuration:)((uint64_t)v39, (uint64_t)&v50);

  uint64_t result = swift_unknownObjectRelease();
  *a4 = v41;
  return result;
}

void MOSuggestionAssetMapSnapshotProvider.snapshot(options:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = [objc_allocWithZone((Class)MKMapSnapshotter) initWithOptions:a1];
  os_log_type_t v7 = (void *)(*(uint64_t (**)(void))(*(void *)v3 + 120))();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  v10[4] = partial apply for closure #1 in MOSuggestionAssetMapSnapshotProvider.snapshot(options:completion:);
  v10[5] = v8;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  void v10[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSNumber?, @guaranteed Error?) -> ();
  v10[3] = &block_descriptor_12_0;
  uint64_t v9 = _Block_copy(v10);
  swift_retain();
  swift_release();
  [v6 startWithQueue:v7 completionHandler:v9];
  _Block_release(v9);
}

void closure #1 in MOSuggestionAssetMapSnapshotProvider.snapshot(options:completion:)(void *a1, uint64_t a2, void (*a3)(void))
{
  if (a1)
  {
    id v4 = a1;
    id v13 = [v4 image];
    a3();
  }
  else
  {
    if (serverManager._clientConnections != (NSMutableDictionary *)-1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static MOAngelLogger.shared);
    swift_errorRetain();
    swift_errorRetain();
    os_log_type_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136315138;
      if (a2)
      {
        swift_getErrorValue();
        uint64_t v10 = Error.localizedDescription.getter();
        unint64_t v12 = v11;
      }
      else
      {
        unint64_t v12 = 0xE500000000000000;
        uint64_t v10 = 0x3E6C696E3CLL;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "[Assets] MKMapSnapshotter: Unable to create Map Snapshot. error=%s", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    ((void (*)(void))a3)(0);
  }
}

void *MOSuggestionAssetMapSnapshotProvider.consolidatedClusterPin(locations:)(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v2 > 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
      if (!v16)
      {
        char v9 = 0;
        uint64_t v4 = 0;
        double v6 = 0.0;
        double v7 = 0.0;
        double v8 = 0.0;
LABEL_19:
        swift_bridgeObjectRelease();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        uint64_t v18 = swift_allocObject();
        *(_OWORD *)(v18 + 16) = xmmword_1001DA250;
        type metadata accessor for MOMapLocation();
        swift_allocObject();
        swift_unknownObjectRetain();
        *(void *)(v18 + 32) = MOMapLocation.init(latitude:longitude:title:clusterCount:geoMapItem:confidenceLevel:isWork:enclosingArea:horizontalUncertainty:isScaledDownPOI:poiCateogory:)(0, 0xE000000000000000, v2, 0, v4, v9 & 1, 0, 0, v8 / (double)v2, v7 / (double)v2, v6, 0.0, 0, 0, 0xE000000000000000);
        specialized Array._endMutation()();
        uint64_t v17 = v18;
        swift_unknownObjectRelease();
        return (void *)v17;
      }
      uint64_t v3 = v16;
      if (v16 >= 1)
      {
LABEL_4:
        uint64_t v4 = 0;
        uint64_t v5 = 0;
        double v6 = 0.0;
        double v7 = 0.0;
        double v8 = 0.0;
        do
        {
          if ((a1 & 0xC000000000000001) != 0)
          {
            uint64_t v10 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            uint64_t v10 = *(void *)(a1 + 8 * v5 + 32);
            swift_retain();
          }
          double v11 = (*(double (**)(void))(*(void *)v10 + 240))();
          double v12 = (*(double (**)(void))(*(void *)v10 + 264))();
          id v13 = *(double (**)(void))(*(void *)v10 + 360);
          if (v6 < v13()) {
            double v6 = v13();
          }
          uint64_t v14 = (*(uint64_t (**)(void))(*(void *)v10 + 288))();
          if (v14)
          {
            uint64_t v15 = v14;
            swift_unknownObjectRelease();
            uint64_t v4 = v15;
          }
          ++v5;
          double v8 = v8 + v11;
          double v7 = v7 + v12;
          char v9 = (*(uint64_t (**)(void))(*(void *)v10 + 384))();
          swift_release();
        }
        while (v3 != v5);
        goto LABEL_19;
      }
      __break(1u);
    }
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v2)
    {
      swift_bridgeObjectRetain();
      uint64_t v3 = v2;
      goto LABEL_4;
    }
  }
  return _swiftEmptyArrayStorage;
}

void *MOSuggestionAssetMapSnapshotProvider.clusteredPinsUsingHierachicalDendogram(locations:)(unint64_t a1)
{
  uint64_t v2 = (int *)type metadata accessor for MOSuggestionAssetMapsClusterer.Cluster();
  uint64_t v3 = *((void *)v2 - 1);
  __chkstk_darwin(v2);
  uint64_t v5 = (double *)((char *)v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!(a1 >> 62))
  {
    if (*(uint64_t *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 3) {
      goto LABEL_3;
    }
LABEL_28:
    swift_bridgeObjectRetain();
    return (void *)a1;
  }
  swift_bridgeObjectRetain();
  uint64_t v50 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v50 < 3) {
    goto LABEL_28;
  }
LABEL_3:
  uint64_t v6 = 1;
  double v7 = specialized static MOSuggestionAssetMapsClusterer.makeRegion(containing:applyBottomPaddingForPlatter:applyBottomPaddingForGradient:horizontalAspectRatio:markerStyle:applyRenderMargin:shouldAdjustMarker:)(a1, 0, 0, 0, 1);
  long double v9 = v8;
  double v11 = v10;
  double v13 = v12;
  if (v10 <= 0.0005)
  {
LABEL_10:
    BOOL v54 = v5;
    if (serverManager._connectionProperties != (NSMutableDictionary *)-1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static MOAngelLogger.assets);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 134217984;
      uint64_t v58 = (void *)v6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "[MOSuggestionAssetMapsClusterer] using numBuckets: %ld", v20, 0xCu);
      swift_slowDealloc();
    }

    uint64_t v21 = specialized static MOSuggestionAssetMapsClusterer.clusteredPins(locations:targetRegion:numBuckets:)(a1, v6, v7, v9, v11, v13);
    if (specialized static MOAngelDefaultsManager.BOOLeanValueFor(_:)())
    {
      double v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v47, v48))
      {
        objc_super v49 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)objc_super v49 = 0;
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "[MOSuggestionAssetMapsClusterer] Skipping dendrogram", v49, 2u);
        swift_slowDealloc();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v22, v23))
      {
        char v24 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)char v24 = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "[MOSuggestionAssetMapsClusterer] Building dendrogram", v24, 2u);
        swift_slowDealloc();
      }

      id v25 = objc_allocWithZone((Class)type metadata accessor for MOSuggestionAssetMapsClusterer());
      uint64_t v26 = (uint64_t *)swift_bridgeObjectRetain();
      char v27 = (void *)MOSuggestionAssetMapsClusterer.init(mapLocations:separationThreshold:)(v26, 1.0);
      uint64_t v28 = (*(uint64_t (**)(void))((swift_isaMask & *v27) + 0xF8))();
      uint64_t v29 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v27) + 0x100))(v28);
      uint64_t v30 = *(void *)(v29 + 16);
      if (v30)
      {
        id v53 = v27;
        uint64_t v58 = _swiftEmptyArrayStorage;
        specialized ContiguousArray.reserveCapacity(_:)();
        uint64_t v31 = *(unsigned __int8 *)(v3 + 80);
        v52[1] = v29;
        uint64_t v32 = v29 + ((v31 + 32) & ~v31);
        uint64_t v55 = *(void *)(v3 + 72);
        double v33 = v54;
        do
        {
          outlined init with copy of MOSuggestionAssetMapsClusterer.Cluster(v32, (uint64_t)v33);
          double v34 = *v33;
          double v35 = v33[1];
          uint64_t v36 = v2[12];
          double v37 = (uint64_t *)((char *)v33 + v2[11]);
          uint64_t v38 = *((void *)v33 + 3);
          BOOL v57 = v38 < 2;
          if (v38 < 2) {
            uint64_t v38 = 0;
          }
          uint64_t v56 = v38;
          double v39 = *(double *)((char *)v33 + v2[10]);
          double v40 = *(double *)((char *)v33 + v2[14]);
          uint64_t v41 = *v37;
          uint64_t v42 = v37[1];
          uint64_t v43 = *(void *)((char *)v33 + v2[9]);
          char v44 = *((unsigned char *)v33 + v36);
          uint64_t v45 = v2;
          char v46 = *((unsigned char *)v33 + v2[13]);
          type metadata accessor for MOMapLocation();
          swift_allocObject();
          swift_bridgeObjectRetain();
          swift_unknownObjectRetain();
          char v51 = v46;
          uint64_t v2 = v45;
          MOMapLocation.init(latitude:longitude:title:clusterCount:geoMapItem:confidenceLevel:isWork:enclosingArea:horizontalUncertainty:isScaledDownPOI:poiCateogory:)(v41, v42, v56, v57, v43, v44, 0, 0, v34, v35, v39, v40, v51, 0, 0xE000000000000000);
          outlined destroy of MOSuggestionAssetMapsClusterer.Cluster((uint64_t)v33);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          v32 += v55;
          --v30;
        }
        while (v30);
        uint64_t v21 = (uint64_t)v58;
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();

        return _swiftEmptyArrayStorage;
      }
    }
    return (void *)v21;
  }
  uint64_t result = (void *)specialized static MOAngelDefaultsManager.doubleValueFor(_:)();
  if (v15)
  {
    uint64_t v6 = 5;
    goto LABEL_10;
  }
  double v16 = round(*(double *)&result);
  if ((~*(void *)&v16 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_31;
  }
  if (v16 <= -9.22337204e18)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (v16 < 9.22337204e18)
  {
    uint64_t v6 = (uint64_t)v16;
    goto LABEL_10;
  }
LABEL_32:
  __break(1u);
  return result;
}

id *MOSuggestionAssetMapSnapshotProvider.deinit()
{
  return v0;
}

uint64_t MOSuggestionAssetMapSnapshotProvider.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void MOSuggestionAssetMapSnapshotProvider.getRouteMapFor(_:size:completion:)(unint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = v4;
  unint64_t v12 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v13 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v14 = _swiftEmptyArrayStorage;
  uint64_t v59 = v7;
  uint64_t v60 = a3;
  if (v13)
  {
    aBlock[0] = _swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13 & ~(v13 >> 63), 0);
    if (v13 < 0)
    {
      __break(1u);
      goto LABEL_28;
    }
    uint64_t v58 = v12;
    uint64_t v15 = 0;
    uint64_t v14 = (double *)aBlock[0];
    do
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v16 = *(id *)(a1 + 8 * v15 + 32);
      }
      uint64_t v17 = v16;
      [v16 coordinate];
      uint64_t v19 = v18;
      uint64_t v21 = v20;

      aBlock[0] = v14;
      unint64_t v23 = *((void *)v14 + 2);
      unint64_t v22 = *((void *)v14 + 3);
      if (v23 >= v22 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
        uint64_t v14 = (double *)aBlock[0];
      }
      ++v15;
      *((void *)v14 + 2) = v23 + 1;
      char v24 = &v14[2 * v23];
      *((void *)v24 + 4) = v19;
      *((void *)v24 + 5) = v21;
    }
    while (v13 != v15);
    uint64_t v7 = v59;
    unint64_t v12 = v58;
  }
  double v25 = specialized MOSuggestionAssetMapSnapshotProvider.makeRouteRect(_:size:)((uint64_t)v14, a2);
  double v27 = v26;
  double v29 = v28;
  double v31 = v30;
  swift_bridgeObjectRelease();
  id v5 = [objc_allocWithZone((Class)MKStandardMapConfiguration) init];
  id v32 = [self filterExcludingAllCategories];
  [v5 setPointOfInterestFilter:v32];

  id v33 = [objc_allocWithZone((Class)MKMapSnapshotOptions) init];
  uint64_t v6 = v33;
  if ((a2 - 2) >= 9u)
  {
    double v35 = 300.0;
    double v36 = 300.0;
  }
  else
  {
    uint64_t v34 = 8 * (char)(a2 - 2);
    double v35 = *(double *)((char *)&unk_1001DBC58 + v34);
    double v36 = *(double *)((char *)&unk_1001DBCA0 + v34);
  }
  [v33 setSize:v35, v36];
  [v6 setMapRect:v25, v27, v29, v31];
  [v6 setPreferredConfiguration:v5];
  id v37 = [self traitCollectionWithUserInterfaceStyle:2];
  [v6 setTraitCollection:v37];

  [v6 _setUseSnapshotService:1];
  if (v13 != 1) {
    goto LABEL_25;
  }
  if (!v12)
  {
    uint64_t v38 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v38) {
      goto LABEL_19;
    }
LABEL_24:
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_24;
  }
LABEL_19:
  if ((a1 & 0xC000000000000001) != 0)
  {
LABEL_28:
    uint64_t v39 = a4;
    id v40 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_22;
  }
  if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v39 = a4;
    id v40 = *(id *)(a1 + 32);
LABEL_22:
    uint64_t v41 = v40;
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v42 = swift_allocObject();
    *(_OWORD *)(v42 + 16) = xmmword_1001DA250;
    [v41 coordinate];
    uint64_t v44 = v43;
    uint64_t v46 = v45;
    double v47 = (objc_class *)type metadata accessor for MOMapAnnotation();
    os_log_type_t v48 = (char *)objc_allocWithZone(v47);
    objc_super v49 = &v48[OBJC_IVAR____TtC16MomentsUIService15MOMapAnnotation_title];
    *(void *)objc_super v49 = 0;
    *((void *)v49 + 1) = 0;
    uint64_t v50 = &v48[OBJC_IVAR____TtC16MomentsUIService15MOMapAnnotation_coordinate];
    *(void *)uint64_t v50 = v44;
    *((void *)v50 + 1) = v46;
    swift_beginAccess();
    *(void *)objc_super v49 = 0;
    *((void *)v49 + 1) = 0;
    swift_bridgeObjectRelease();
    v61.receiver = v48;
    v61.super_class = v47;
    id v51 = [super init];
    id v52 = objc_allocWithZone((Class)type metadata accessor for WorkoutLocationAnnotationView());
    *(void *)(v42 + 32) = specialized WorkoutLocationAnnotationView.init(annotation:type:tileSize:)(v51, 0, v52);
    aBlock[0] = v42;
    specialized Array._endMutation()();
    type metadata accessor for UIApplication(0, &lazy cache variable for type metadata for MKAnnotationView);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v6 setAnnotationViews:isa];

    a4 = v39;
    uint64_t v7 = v59;
    a3 = v60;
LABEL_25:
    id v54 = [objc_allocWithZone((Class)MKMapSnapshotter) initWithOptions:v6];
    uint64_t v55 = (void *)(*(uint64_t (**)(void))(*(void *)v7 + 120))();
    uint64_t v56 = swift_allocObject();
    *(void *)(v56 + 16) = a3;
    *(void *)(v56 + 24) = a4;
    *(void *)(v56 + 32) = a1;
    *(unsigned char *)(v56 + 40) = a2;
    aBlock[4] = partial apply for closure #2 in MOSuggestionAssetMapSnapshotProvider.getRouteMapFor(_:size:completion:);
    aBlock[5] = v56;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSNumber?, @guaranteed Error?) -> ();
    void aBlock[3] = &block_descriptor_18;
    BOOL v57 = _Block_copy(aBlock);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    [v54 startWithQueue:v55 completionHandler:v57];
    _Block_release(v57);

    return;
  }
  __break(1u);
}

uint64_t closure #2 in MOSuggestionAssetMapSnapshotProvider.getRouteMapFor(_:size:completion:)(void *a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DispatchQoS();
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t v38 = v18;
    uint64_t v39 = v17;
    type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    id v21 = a1;
    uint64_t v37 = v13;
    uint64_t v22 = a4;
    id v23 = v21;
    uint64_t v36 = static OS_dispatch_queue.main.getter();
    uint64_t v24 = swift_allocObject();
    *(void *)(v24 + 16) = a5;
    *(unsigned char *)(v24 + 24) = a6;
    *(void *)(v24 + 32) = v23;
    *(void *)(v24 + 40) = a3;
    *(void *)(v24 + 48) = v22;
    aBlock[4] = (uint64_t)partial apply for closure #1 in closure #2 in MOSuggestionAssetMapSnapshotProvider.getRouteMapFor(_:size:completion:);
    aBlock[5] = v24;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
    void aBlock[3] = (uint64_t)&block_descriptor_36;
    double v25 = _Block_copy(aBlock);
    id v26 = v23;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
    _sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    double v27 = (void *)v36;
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v25);

    (*(void (**)(char *, uint64_t))(v37 + 8))(v15, v12);
    return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v20, v39);
  }
  else
  {
    if (a2)
    {
      swift_errorRetain();
      if (serverManager._connectionProperties != (NSMutableDictionary *)-1) {
        swift_once();
      }
      uint64_t v29 = type metadata accessor for Logger();
      __swift_project_value_buffer(v29, (uint64_t)static MOAngelLogger.assets);
      swift_errorRetain();
      swift_errorRetain();
      double v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v30, v31))
      {
        id v32 = (uint8_t *)swift_slowAlloc();
        aBlock[0] = swift_slowAlloc();
        *(_DWORD *)id v32 = 136315138;
        swift_getErrorValue();
        uint64_t v33 = Error.localizedDescription.getter();
        void aBlock[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "[RouteSnapshot] snapshot error %s", v32, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
      }
    }
    return a3(0);
  }
}

uint64_t MOSuggestionAssetMapSnapshotProvider.getGenericMapFor(location:size:completion:)(uint64_t a1, unsigned __int8 a2, uint64_t (*a3)(void), uint64_t a4)
{
  if ((a2 - 2) > 8u) {
    return a3(0);
  }
  id v7 = specialized MOSuggestionAssetMapSnapshotProvider.makeOptionsForArea(for:size:)(a1, a2);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a3;
  *(void *)(v8 + 24) = a4;
  long double v9 = *(void (**)(id, void (*)(void *), uint64_t))(*(void *)v4 + 200);
  swift_retain();
  v9(v7, partial apply for closure #1 in MOSuggestionAssetMapSnapshotProvider.getGenericMapFor(location:size:completion:), v8);

  return swift_release();
}

void closure #1 in MOSuggestionAssetMapSnapshotProvider.getGenericMapFor(location:size:completion:)(id a1, void (*a2)(void))
{
  if (a1)
  {
    id v3 = a1;
    uint64_t v4 = MOSuggestionAssetsTypeGenericMap;
    type metadata accessor for UIApplication(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
    a1 = [objc_allocWithZone((Class)MOSuggestionAsset) init:v3 type:v4 contentClassType:swift_getObjCClassFromMetadata()];
  }
  id v5 = a1;
  a2();
}

void partial apply for closure #1 in MOSuggestionAssetMapSnapshotProvider.snapshot(options:completion:)(void *a1, uint64_t a2)
{
  closure #1 in MOSuggestionAssetMapSnapshotProvider.snapshot(options:completion:)(a1, a2, *(void (**)(void))(v2 + 16));
}

double specialized MOSuggestionAssetMapSnapshotProvider.makeRouteRect(_:size:)(uint64_t a1, unsigned __int8 a2)
{
  int v2 = a2;
  id v3 = [self polylineWithCoordinates:a1 + 32 count:*(void *)(a1 + 16)];
  [v3 boundingMapRect];
  double v7 = v6;
  double v8 = v4;
  if (v4 > v5) {
    double v9 = v4;
  }
  else {
    double v9 = v5;
  }
  if (v2 == 3) {
    double v10 = v9 * 2.75;
  }
  else {
    double v10 = v9 * 2.5;
  }

  return v7 + v8 * 0.5 - v10 * 0.5;
}

uint64_t sub_1000918CC()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 41, 7);
}

uint64_t partial apply for closure #2 in MOSuggestionAssetMapSnapshotProvider.getRouteMapFor(_:size:completion:)(void *a1, uint64_t a2)
{
  return closure #2 in MOSuggestionAssetMapSnapshotProvider.getRouteMapFor(_:size:completion:)(a1, a2, *(uint64_t (**)(void))(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(unsigned char *)(v2 + 40));
}

void *specialized WorkoutLocationAnnotationView.init(annotation:type:tileSize:)(void *a1, char a2, void *a3)
{
  uint64_t v4 = a2 & 1;
  v20.receiver = a3;
  v20.super_class = (Class)type metadata accessor for WorkoutLocationAnnotationView();
  id v5 = [super initWithAnnotation:a1 reuseIdentifier:0];
  [v5 setFrame:CGRectMake(0.0, 0.0, 15.0, 15.0)];
  double v6 = self;
  double v7 = v5;
  id v8 = [v6 clearColor];
  [v7 setBackgroundColor:v8];

  [v7 setCanShowCallout:1];
  (*(void (**)(uint64_t))((swift_isaMask & *v7) + 0x58))(v4);
  [v7 setIsAccessibilityElement:1];
  UIAccessibilityTraits v9 = UIAccessibilityTraitImage;
  double v10 = v7;
  unint64_t v11 = (unint64_t)[v10 accessibilityTraits];
  if ((v9 & ~v11) != 0) {
    UIAccessibilityTraits v12 = v9;
  }
  else {
    UIAccessibilityTraits v12 = 0;
  }
  [v10 setAccessibilityTraits:v12 | v11];

  uint64_t v13 = self;
  uint64_t v14 = v10;
  id v15 = [v13 mainBundle];
  v21._object = (void *)0x80000001001E37B0;
  v16._uint64_t countAndFlagsBits = 0x6E73206574756F52;
  v16._object = (void *)0xEE00746F68737061;
  v17._uint64_t countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  v21._uint64_t countAndFlagsBits = 0xD000000000000033;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v16, (Swift::String_optional)0, (NSBundle)v15, v17, v21);

  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v14 setAccessibilityLabel:v18];

  return v14;
}

void specialized static MOSuggestionAssetMapSnapshotProvider.overlay(annotationView:at:on:context:)(void *a1, id a2, CGContext *a3)
{
  [a2 pointForCoordinate:];
  double v6 = v5;
  double v8 = v7;
  [a1 bounds];
  double v9 = v6 - CGRectGetMidX(v17);
  [a1 centerOffset];
  CGFloat v11 = v9 + v10;
  [a1 bounds];
  double v12 = v8 - CGRectGetMidY(v18);
  [a1 centerOffset];
  CGFloat v14 = v12 + v13;
  CGContextSaveGState(a3);
  CGContextTranslateCTM(a3, v11, v14);
  [a1 prepareForSnapshotting];
  id v15 = [a1 layer];
  [v15 renderInContext:a3];

  CGContextRestoreGState(a3);
}

UIImage *specialized static MOSuggestionAssetMapSnapshotProvider.routeImage(locations:size:lineWidth:snapshot:)(unint64_t a1, id a2, double a3)
{
  id v7 = [a2 image];
  [v7 size];
  CGFloat v9 = v8;
  CGFloat v11 = v10;

  id v12 = [self mainScreen];
  [v12 scale];
  CGFloat v14 = v13;

  v43.double width = v9;
  v43.double height = v11;
  UIGraphicsBeginImageContextWithOptions(v43, 0, v14);
  id v15 = [a2 image];
  [v15 size];
  double v17 = v16;

  id v18 = [a2 image];
  [v18 size];
  double v20 = v19;

  id v21 = [a2 image];
  [v21 drawInRect:0.0, 0.0, v17, v20];

  uint64_t v22 = UIGraphicsGetCurrentContext();
  if (!v22) {
    return 0;
  }
  id v23 = v22;
  id v24 = objc_allocWithZone((Class)type metadata accessor for MOSuggestionAssetGradientRouteRenderer());
  unint64_t v25 = swift_bridgeObjectRetain();
  id v26 = (void *)MOSuggestionAssetGradientRouteRenderer.init(routeLocations:)(v25);
  double v27 = &v42;
  double v28 = (void *)__chkstk_darwin(v26);
  (*(void (**)(CGContext *, id (*)(double, double), double))((swift_isaMask & *v28) + 0x78))(v23, partial apply for closure #1 in static MOSuggestionAssetMapSnapshotProvider.routeImage(locations:size:lineWidth:snapshot:), a3);
  CGContextStrokePath(v23);
  if (!(a1 >> 62))
  {
    uint64_t v29 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v29) {
      goto LABEL_4;
    }
LABEL_15:
    swift_bridgeObjectRelease();
LABEL_16:
    id v40 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return v40;
  }
  swift_bridgeObjectRetain();
  uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
  if (!v29) {
    goto LABEL_15;
  }
LABEL_4:
  if ((a1 & 0xC000000000000001) == 0)
  {
    unint64_t v30 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v30)
    {
      id v3 = (id *)(a1 + 32);
      double v27 = (uint64_t *)*(id *)(a1 + 32);
      swift_bridgeObjectRelease();
      unint64_t v31 = v29 - 1;
      if (!__OFSUB__(v29, 1))
      {
        if (v31 < v30)
        {
          id v3 = (id *)v3[v31];
          goto LABEL_9;
        }
LABEL_22:
        __break(1u);
        goto LABEL_23;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_22;
  }
  double v27 = (uint64_t *)specialized _ArrayBuffer._getElementSlowPath(_:)();
  uint64_t result = (UIImage *)swift_bridgeObjectRelease();
  if (!__OFSUB__(v29, 1))
  {
    swift_bridgeObjectRetain();
    id v3 = (id *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    swift_bridgeObjectRelease();
LABEL_9:
    if (serverManager._connectionProperties == (NSMutableDictionary *)-1)
    {
LABEL_10:
      uint64_t v32 = type metadata accessor for Logger();
      __swift_project_value_buffer(v32, (uint64_t)static MOAngelLogger.assets);
      uint64_t v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v35 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v35 = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "[RouteSnapshot] Rendering valid start and stop pins", v35, 2u);
        swift_slowDealloc();
      }

      id v36 = [objc_allocWithZone((Class)MKPointAnnotation) init];
      uint64_t v37 = (objc_class *)type metadata accessor for WorkoutLocationAnnotationView();
      uint64_t v38 = specialized WorkoutLocationAnnotationView.init(annotation:type:tileSize:)(v36, 0, objc_allocWithZone(v37));
      [v27 coordinate];
      specialized static MOSuggestionAssetMapSnapshotProvider.overlay(annotationView:at:on:context:)(v38, a2, v23);

      uint64_t v39 = specialized WorkoutLocationAnnotationView.init(annotation:type:tileSize:)([objc_allocWithZone((Class)MKPointAnnotation) init], 1, objc_allocWithZone(v37));
      [v3 coordinate];
      specialized static MOSuggestionAssetMapSnapshotProvider.overlay(annotationView:at:on:context:)(v39, a2, v23);

      goto LABEL_16;
    }
LABEL_23:
    swift_once();
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

id specialized MOSuggestionAssetMapSnapshotProvider.makeOptionsForArea(for:size:)(uint64_t a1, unsigned __int8 a2)
{
  int v4 = a2;
  double v5 = (*(double (**)(uint64_t))(*(void *)a1 + 456))(a1) / 111000.0 * 1.5;
  if (v4 == 3) {
    double v5 = v5 + v5;
  }
  double v6 = fmin(v5, 180.0);
  id v7 = [objc_allocWithZone((Class)MKMapSnapshotOptions) init];
  double v8 = (*(double (**)(void))(*(void *)a1 + 240))();
  [v7 setRegion:v8 (*(double (**)(void))(*(void *)a1 + 264))() v6 v6];
  [v7 setShowsBuildings:1];
  [v7 _setAllowsSimultaneousLightDarkSnapshots:1];
  if ((a2 - 2) > 8u)
  {
    double v10 = 300.0;
    double v11 = 300.0;
  }
  else
  {
    uint64_t v9 = 8 * (char)(a2 - 2);
    double v10 = *(double *)((char *)&unk_1001DBC58 + v9);
    double v11 = *(double *)((char *)&unk_1001DBCA0 + v9);
  }
  [v7 setSize:v10, v11];
  return v7;
}

uint64_t sub_1000922C8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void partial apply for closure #1 in MOSuggestionAssetMapSnapshotProvider.getGenericMapFor(location:size:completion:)(void *a1)
{
  closure #1 in MOSuggestionAssetMapSnapshotProvider.getGenericMapFor(location:size:completion:)(a1, *(void (**)(void))(v1 + 16));
}

void sub_100092308(void **a1@<X0>, uint64_t a2@<X8>)
{
  *(double *)a2 = (*(double (**)(void))((swift_isaMask & **a1) + 0x60))();
  *(void *)(a2 + 8) = v3;
}

uint64_t sub_100092364(double *a1, void **a2)
{
  return (*(uint64_t (**)(double, double))((swift_isaMask & **a2) + 0x68))(*a1, a1[1]);
}

uint64_t sub_1000923BC@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x78))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_100092418(uint64_t *a1, void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))((swift_isaMask & **a2) + 0x80);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_100092490@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 120))();
  *a2 = result;
  return result;
}

uint64_t sub_1000924DC(id *a1, uint64_t a2)
{
  return (*(uint64_t (**)(id))(**(void **)a2 + 128))(*a1);
}

uint64_t type metadata accessor for MOSuggestionAssetMapSnapshotProvider()
{
  return self;
}

uint64_t sub_100092554()
{
  swift_bridgeObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

void partial apply for closure #1 in closure #2 in MOSuggestionAssetMapSnapshotProvider.getRouteMapFor(_:size:completion:)()
{
  uint64_t v1 = *(void (**)(void))(v0 + 40);
  uint64_t v2 = specialized static MOSuggestionAssetMapSnapshotProvider.routeImage(locations:size:lineWidth:snapshot:)(*(void *)(v0 + 16), *(id *)(v0 + 32), 3.0);
  v1();
}

id partial apply for closure #1 in static MOSuggestionAssetMapSnapshotProvider.routeImage(locations:size:lineWidth:snapshot:)(double a1, double a2)
{
  uint64_t v3 = *(void **)(v2 + 16);
  CLLocationCoordinate2D v4 = MKCoordinateForMapPoint(*(MKMapPoint *)&a1);

  return [v3 pointForCoordinate:v4.latitude, v4.longitude];
}

uint64_t objectdestroy_2Tm()
{
  swift_release();

  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

id partial apply for closure #1 in closure #1 in MOSuggestionAssetMapSnapshotProvider.getMapItem(resource:completion:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in closure #1 in MOSuggestionAssetMapSnapshotProvider.getMapItem(resource:completion:)(a1, a2, *(void *)(v2 + 16), *(void **)(v2 + 24), *(uint64_t (**)(uint64_t))(v2 + 32));
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

void *MOSuggestionActivityRouteAssetView.__allocating_init(routeMap:name:assignedTileSize:frame:calories:duration:distance:)(void *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13)
{
  id v27 = objc_allocWithZone(v13);
  return MOSuggestionActivityRouteAssetView.init(routeMap:name:assignedTileSize:frame:calories:duration:distance:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

int64x2_t one-time initialization function for DEFAULT_LARGE_SIZE()
{
  int64x2_t result = vdupq_n_s64(0x4077700000000000uLL);
  static Constants.DEFAULT_LARGE_SIZE = (__int128)result;
  return result;
}

void closure #1 in variable initialization expression of MOSuggestionActivityRouteAssetView.exerciseNameLabel()
{
  id v0 = [objc_allocWithZone((Class)UILabel) init];
  uint64_t v1 = self;
  id v2 = [v1 preferredFontForTextStyle:UIFontTextStyleFootnote];
  id v3 = [v2 fontDescriptor];
  id v4 = [v3 fontDescriptorWithSymbolicTraits:2];

  if (v4)
  {
    id v5 = [v1 fontWithDescriptor:v4 size:0.0];

    [v0 setFont:v5];
    id v6 = [self whiteColor];
    [v0 setTextColor:v6];

    [v0 setTextAlignment:0];
    [v0 setLineBreakMode:0];
    [v0 setAdjustsFontForContentSizeCategory:1];
    [v0 setNumberOfLines:2];
    [v0 setMaximumContentSizeCategory:UIContentSizeCategoryAccessibilityMedium];
  }
  else
  {
    __break(1u);
  }
}

void closure #1 in variable initialization expression of MOSuggestionActivityRouteAssetView.workoutDataLabel()
{
  id v0 = [objc_allocWithZone((Class)UILabel) init];
  uint64_t v1 = self;
  id v2 = [v1 preferredFontForTextStyle:UIFontTextStyleFootnote];
  id v3 = [v2 fontDescriptor];
  id v4 = [v3 fontDescriptorWithSymbolicTraits:2];

  if (v4)
  {
    id v5 = [v1 fontWithDescriptor:v4 size:0.0];

    [v0 setFont:v5];
    id v6 = [self tertiaryLabelColor];
    [v0 setTextColor:v6];

    [v0 setLineBreakMode:0];
    [v0 setTextAlignment:0];
    [v0 setMaximumContentSizeCategory:UIContentSizeCategoryAccessibilityMedium];
    [v0 setAdjustsFontForContentSizeCategory:1];
  }
  else
  {
    __break(1u);
  }
}

void *MOSuggestionActivityRouteAssetView.init(routeMap:name:assignedTileSize:frame:calories:duration:distance:)(void *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13)
{
  id v24 = v13;
  NSString v25 = String._bridgeToObjectiveC()();
  id v26 = self;
  id v27 = [v26 colorNamed:v25];

  if (!v27) {
    id v27 = [v26 systemBlueColor];
  }
  *(void *)&v24[OBJC_IVAR____TtC16MomentsUIService34MOSuggestionActivityRouteAssetView_distanceBlue] = v27;
  NSString v28 = String._bridgeToObjectiveC()();
  id v29 = [v26 colorNamed:v28];

  if (!v29) {
    id v29 = [v26 systemYellowColor];
  }
  *(void *)&v24[OBJC_IVAR____TtC16MomentsUIService34MOSuggestionActivityRouteAssetView_timeYellow] = v29;
  NSString v30 = String._bridgeToObjectiveC()();
  id v31 = [v26 colorNamed:v30];

  if (!v31) {
    id v31 = [v26 systemPinkColor];
  }
  *(void *)&v24[OBJC_IVAR____TtC16MomentsUIService34MOSuggestionActivityRouteAssetView_movePink] = v31;
  uint64_t v32 = OBJC_IVAR____TtC16MomentsUIService34MOSuggestionActivityRouteAssetView_exerciseNameLabel;
  closure #1 in variable initialization expression of MOSuggestionActivityRouteAssetView.exerciseNameLabel();
  *(void *)&v24[v32] = v33;
  uint64_t v34 = OBJC_IVAR____TtC16MomentsUIService34MOSuggestionActivityRouteAssetView_workoutDataLabel;
  closure #1 in variable initialization expression of MOSuggestionActivityRouteAssetView.workoutDataLabel();
  *(void *)&v24[v34] = v35;
  uint64_t v36 = OBJC_IVAR____TtC16MomentsUIService34MOSuggestionActivityRouteAssetView_labelStack;
  id v37 = [objc_allocWithZone((Class)UIStackView) init];
  [v37 setAxis:1];
  [v37 setDistribution:4];
  [v37 setAlignment:1];
  [v37 setSpacing:2.0];
  *(void *)&v24[v36] = v37;
  *(void *)&v24[OBJC_IVAR____TtC16MomentsUIService34MOSuggestionActivityRouteAssetView_routeMap] = a1;
  uint64_t v38 = &v24[OBJC_IVAR____TtC16MomentsUIService34MOSuggestionActivityRouteAssetView_name];
  void *v38 = a2;
  v38[1] = a3;
  v24[OBJC_IVAR____TtC16MomentsUIService34MOSuggestionActivityRouteAssetView_assignedTileSize] = a4;
  *(double *)&v24[OBJC_IVAR____TtC16MomentsUIService34MOSuggestionActivityRouteAssetView_duration] = a13;
  uint64_t v39 = &v24[OBJC_IVAR____TtC16MomentsUIService34MOSuggestionActivityRouteAssetView_calories];
  void *v39 = a5;
  v39[1] = a6;
  id v40 = &v24[OBJC_IVAR____TtC16MomentsUIService34MOSuggestionActivityRouteAssetView_distance];
  *id v40 = a7;
  v40[1] = a8;
  id v41 = a1;

  v50.receiver = v24;
  v50.super_class = (Class)type metadata accessor for MOSuggestionActivityRouteAssetView();
  id v42 = [super initWithFrame:a9, a10, a11, a12];
  [v42 setContentMode:1];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UITraitDefinition.Type>);
  uint64_t v43 = swift_allocObject();
  *(_OWORD *)(v43 + 16) = xmmword_1001DA0F0;
  *(void *)(v43 + 32) = type metadata accessor for UITraitUserInterfaceStyle();
  *(void *)(v43 + 40) = &protocol witness table for UITraitUserInterfaceStyle;
  uint64_t v44 = v42;
  UIView.registerForTraitChanges(_:action:)();
  swift_unknownObjectRelease();

  uint64_t v45 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))((swift_isaMask & *v44) + 0xB8))(v45);

  return v44;
}

uint64_t type metadata accessor for MOSuggestionActivityRouteAssetView()
{
  return self;
}

Swift::Void __swiftcall MOSuggestionActivityRouteAssetView.makeUIView()()
{
  id v4 = (void *)type metadata accessor for CharacterSet();
  uint64_t v5 = *(v4 - 1);
  __chkstk_darwin(v4);
  id v7 = (char *)&v510 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = self;
  id v9 = [v8 blackColor];
  [v0 setBackgroundColor:v9];

  double v10 = *(void **)&v0[OBJC_IVAR____TtC16MomentsUIService34MOSuggestionActivityRouteAssetView_exerciseNameLabel];
  NSString v11 = String._bridgeToObjectiveC()();
  [v10 setText:v11];

  [v0 frame];
  if (v12 <= 0.0 || ([v0 frame], v13 <= 0.0))
  {
    if (one-time initialization token for DEFAULT_LARGE_SIZE != -1) {
      swift_once();
    }
    [v0 frame];
    [v0 setFrame:];
  }
  id v14 = *(id *)&v0[OBJC_IVAR____TtC16MomentsUIService34MOSuggestionActivityRouteAssetView_workoutDataLabel];
  [v0 frame];
  double Width = CGRectGetWidth(v573);
  id v16 = [v14 font];
  if (!v16)
  {
    __break(1u);
LABEL_115:
    __break(1u);
LABEL_116:
    __break(1u);
LABEL_117:
    __break(1u);
    JUMPOUT(0x100097654);
  }
  double v17 = v16;
  id v524 = v10;
  uint64_t v525 = v7;
  uint64_t v526 = v5;
  [v16 pointSize];
  double Height = v18;

  double v20 = specialized UILabel.estimatedHeight(forWidth:text:ofSize:weight:)(0, 0xE000000000000000, Width, Height, UIFontWeightBold);
  unint64_t v21 = *(void *)&v0[OBJC_IVAR____TtC16MomentsUIService34MOSuggestionActivityRouteAssetView_calories + 8];
  uint64_t v531 = *(void ***)&v0[OBJC_IVAR____TtC16MomentsUIService34MOSuggestionActivityRouteAssetView_calories];
  unint64_t v532 = v21;
  uint64_t v540 = 0;
  unint64_t v541 = 0xE000000000000000;
  if (one-time initialization token for queue != -1) {
    swift_once();
  }
  uint64_t v22 = (char **)static MOSuggestionAssetWorkoutProvider.queue;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = &v540;
  *(void *)(v23 + 24) = v0;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = partial apply for closure #1 in MOSuggestionActivityRouteAssetView.makeUIView();
  *(void *)(v24 + 24) = v23;
  CGRect v538 = partial apply for thunk for @callee_guaranteed () -> ();
  CGRect v539 = (NSString *)v24;
  CGPoint aBlock = _NSConcreteStackBlock;
  unint64_t v535 = 1107296256;
  CGRect v536 = thunk for @escaping @callee_guaranteed () -> ();
  CGRect v537 = &block_descriptor_13;
  NSString v25 = _Block_copy(&aBlock);
  NSAttributedStringKey v26 = v539;
  Swift::String v533 = v0;
  swift_retain();
  swift_release();
  dispatch_sync((dispatch_queue_t)v22, v25);
  _Block_release(v25);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
LABEL_113:
    swift_once();
    goto LABEL_24;
  }
  char v529 = v4;
  id v8 = [v8 systemWhiteColor];
  id v527 = v14;
  [v14 setTextColor:v8];

  uint64_t v22 = &selRef_collectionView_didSelectItemAtIndexPath_;
  NSString v28 = v533;
  [v533 frame];
  double v30 = (v29 + -16.0) * 0.5;
  double Width = v30 + v30;
  id v530 = self;
  NSAttributedStringKey v26 = [v530 bezierPathWithRoundedRect:8.0 cornerRadius:8.0 v30 + v30 v30 + v30 v30];
  id v4 = [objc_allocWithZone((Class)UIImageView) initWithImage:*(void *)&v28[OBJC_IVAR____TtC16MomentsUIService34MOSuggestionActivityRouteAssetView_routeMap]];
  id v14 = [objc_allocWithZone((Class)UIView) init];
  [v28 addSubview:v4];
  [v28 addSubview:v14];
  *(double *)&uint64_t v31 = 300.0;
  LODWORD(v8) = v28[OBJC_IVAR____TtC16MomentsUIService34MOSuggestionActivityRouteAssetView_assignedTileSize]
              - 2;
  *(double *)&uint64_t v32 = 100.0;
  *(double *)&uint64_t v33 = 400.0;
  double v34 = 98.0;
  double v1 = 200.0;
  double v35 = 200.0;
  double Height = 98.0;
  switch(v28[OBJC_IVAR____TtC16MomentsUIService34MOSuggestionActivityRouteAssetView_assignedTileSize])
  {
    case 2:
      double v35 = 100.0;
      double v34 = 100.0;
      double v1 = 100.0;
      double Height = 100.0;
      break;
    case 3:
    case 9:
    case 10:
      *(double *)&uint64_t v31 = 50.0;
      goto LABEL_12;
    case 4:
      break;
    case 5:
LABEL_14:
      *(double *)&uint64_t v36 = 200.0;
LABEL_19:
      double v35 = *(double *)&v36;
      double v34 = *(double *)&v36;
      double Height = v1;
      break;
    case 6:
LABEL_15:
      double Height = v1;
      double v34 = 200.0;
      double v35 = 400.0;
      double v1 = *(double *)&v33;
      break;
    case 7:
LABEL_16:
      double v34 = 100.0;
      double v35 = 400.0;
      double v1 = *(double *)&v33;
      double Height = *(double *)&v32;
      break;
    default:
LABEL_12:
      double v1 = *(double *)&v31;
      double v34 = 98.0;
      double v35 = 200.0;
      uint64_t v33 = v31;
      uint64_t v32 = v31;
      double Height = *(double *)&v31;
      switch(v28[OBJC_IVAR____TtC16MomentsUIService34MOSuggestionActivityRouteAssetView_assignedTileSize])
      {
        case 3:
        case 9:
        case 10:
          *(double *)&uint64_t v36 = 50.0;
          goto LABEL_19;
        case 4:
          goto LABEL_20;
        case 5:
          goto LABEL_14;
        case 6:
          goto LABEL_15;
        case 7:
          goto LABEL_16;
        default:
          *(double *)&uint64_t v36 = 300.0;
          goto LABEL_19;
      }
  }
LABEL_20:
  double v3 = 1.0 / (v34 / v35);
  id v37 = v533;
  [v533 frame];
  double v38 = CGRectGetWidth(v574);
  [v37 frame];
  double v2 = v38 / CGRectGetHeight(v575);
  [v37 frame];
  if (v2 >= v3)
  {
    double v1 = CGRectGetWidth(*(CGRect *)&v39);
    uint64_t v43 = 1;
  }
  else
  {
    double Height = CGRectGetHeight(*(CGRect *)&v39);
    uint64_t v43 = 2;
  }
  uint64_t v528 = v23;
  [v4 setContentMode:v43];
  if (serverManager._connectionProperties != (NSMutableDictionary *)-1) {
    goto LABEL_113;
  }
LABEL_24:
  uint64_t v44 = type metadata accessor for Logger();
  __swift_project_value_buffer(v44, (uint64_t)static MOAngelLogger.assets);
  uint64_t v45 = Logger.logObject.getter();
  os_log_type_t v46 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v45, v46))
  {
    uint64_t v47 = swift_slowAlloc();
    *(_DWORD *)uint64_t v47 = 67109632;
    LODWORD(aBlock) = v2 < v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v47 + 8) = 2048;
    CGPoint aBlock = *(void ***)&v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v47 + 18) = 2048;
    CGPoint aBlock = *(void ***)&v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v45, v46, "[MOSuggestionActivityRouteAssetView] isElongated=%{BOOL}d, assignedRatio=%f, frameRatio=%f", (uint8_t *)v47, 0x1Cu);
    uint64_t v22 = &selRef_collectionView_didSelectItemAtIndexPath_;
    swift_slowDealloc();
  }

  os_log_type_t v48 = &selRef_collectionView_didSelectItemAtIndexPath_;
  switch((int)v8)
  {
    case 0:
      goto LABEL_40;
    case 1:
      [v533 v22[135]];
      double v82 = (v81 + -8.0) * 0.5 + (v81 + -8.0) * 0.5;
      uint64_t v83 = [v530 bezierPathWithRoundedRect:4.0 cornerRadius:4.0 v82, v82];

      NSAttributedStringKey v26 = v83;
LABEL_40:
      UIView.fillSuper(margin:)(0.0);
      swift_bridgeObjectRelease();
      goto LABEL_106;
    case 2:
      id v84 = [v4 superview];
      if (v84)
      {
        uint64_t v85 = v84;
        [v4 setTranslatesAutoresizingMaskIntoConstraints:0];
        id v86 = [v4 leadingAnchor];
        id v87 = [v85 leadingAnchor];
        id v88 = [v86 constraintEqualToAnchor:v87];

        [v88 setConstant:0.0];
        if (v88)
        {
          id v89 = v88;
          [v89 setActive:1];
        }
      }
      id v90 = [v4 superview];
      if (v90)
      {
        id v91 = v90;
        [v4 setTranslatesAutoresizingMaskIntoConstraints:0];
        id v92 = [v4 centerYAnchor];
        id v93 = [v91 centerYAnchor];
        id v94 = [v92 constraintEqualToAnchor:v93];

        [v94 setConstant:0.0];
        if (v94)
        {
          id v95 = v94;
          [v95 setActive:1];
        }
      }
      id v520 = v14;
      [v4 setTranslatesAutoresizingMaskIntoConstraints:0];
      id v96 = [v4 widthAnchor];
      id v97 = [v96 constraintEqualToConstant:v1];

      [v97 setActive:1];
      [v4 setTranslatesAutoresizingMaskIntoConstraints:0];
      id v98 = [v4 heightAnchor];
      id v99 = [v98 constraintEqualToConstant:Height];

      [v99 setActive:1];
      uint64_t v100 = v533;
      (*(void (**)(void))((swift_isaMask & *(void *)v533) + 0xC0))();
      *(void *)&long long v522 = self;
      id v101 = [(id)v522 mainBundle];
      v543._uint64_t countAndFlagsBits = 0xD000000000000018;
      v543._object = (void *)0x80000001001E4BF0;
      v102._uint64_t countAndFlagsBits = 16421;
      v102._object = (void *)0xE200000000000000;
      v103._uint64_t countAndFlagsBits = 0;
      v103._object = (void *)0xE000000000000000;
      NSAttributedStringKey v515 = (NSAttributedStringKey)0xD000000000000018;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v102, (Swift::String_optional)0, (NSBundle)v101, v103, v543);

      uint64_t v104 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v105 = swift_allocObject();
      long long v523 = xmmword_1001DA0F0;
      *(_OWORD *)(v105 + 16) = xmmword_1001DA0F0;
      unint64_t v107 = *(void *)&v100[OBJC_IVAR____TtC16MomentsUIService34MOSuggestionActivityRouteAssetView_distance];
      char v106 = *(void ***)&v100[OBJC_IVAR____TtC16MomentsUIService34MOSuggestionActivityRouteAssetView_distance + 8];
      *(void *)(v105 + 56) = &type metadata for String;
      unint64_t v108 = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v105 + 64) = v108;
      *(void *)(v105 + 32) = v107;
      *(void *)(v105 + 40) = v106;
      swift_bridgeObjectRetain();
      static String.localizedStringWithFormat(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v109 = ((unint64_t)v106 >> 56) & 0xF;
      unint64_t v519 = v107;
      long long v516 = v106;
      if (((unint64_t)v106 & 0x2000000000000000) == 0) {
        uint64_t v109 = v107 & 0xFFFFFFFFFFFFLL;
      }
      CGPoint v521 = v4;
      NSAttributedStringKey v517 = v26;
      if (v109)
      {
        id v110 = (void *)v522;
      }
      else
      {
        swift_bridgeObjectRelease();
        id v110 = (void *)v522;
        id v171 = [(id)v522 mainBundle];
        v547._object = (void *)0x80000001001E4C10;
        v172._uint64_t countAndFlagsBits = 16421;
        v172._object = (void *)0xE200000000000000;
        v173._uint64_t countAndFlagsBits = 0;
        v173._object = (void *)0xE000000000000000;
        v547._uint64_t countAndFlagsBits = (uint64_t)v515;
        NSLocalizedString(_:tableName:bundle:value:comment:)(v172, (Swift::String_optional)0, (NSBundle)v171, v173, v547);

        uint64_t v174 = swift_allocObject();
        *(_OWORD *)(v174 + 16) = v523;
        *(void *)(v174 + 56) = &type metadata for String;
        *(void *)(v174 + 64) = v108;
        *(void *)(v174 + 32) = v531;
        *(void *)(v174 + 40) = v532;
        swift_bridgeObjectRetain();
        static String.localizedStringWithFormat(_:_:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      uint64_t v175 = (void *)v108;
      id v176 = objc_allocWithZone((Class)NSMutableAttributedString);
      NSString v177 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v178 = [v176 initWithString:v177];

      NSAttributedStringKey v515 = *(NSAttributedStringKey *)&v533[OBJC_IVAR____TtC16MomentsUIService34MOSuggestionActivityRouteAssetView_distanceBlue];
      id v179 = [v110 mainBundle];
      id v514 = (id)0x80000001001E4B10;
      v548._object = (void *)0x80000001001E4B10;
      v180._uint64_t countAndFlagsBits = 16421;
      v180._object = (void *)0xE200000000000000;
      v181._uint64_t countAndFlagsBits = 0;
      v181._object = (void *)0xE000000000000000;
      v548._uint64_t countAndFlagsBits = 0xD000000000000010;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v180, (Swift::String_optional)0, (NSBundle)v179, v181, v548);

      uint64_t v182 = swift_allocObject();
      *(_OWORD *)(v182 + 16) = v523;
      *(void *)(v182 + 56) = &type metadata for String;
      *(void *)(v182 + 64) = v108;
      *(void *)(v182 + 32) = v519;
      *(void *)(v182 + 40) = v516;
      swift_bridgeObjectRetain();
      static String.localizedStringWithFormat(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v183 = [v178 mutableString];
      NSString v184 = String._bridgeToObjectiveC()();
      id v185 = [v183 rangeOfString:v184 options:1];
      id v186 = v175;
      id v518 = v175;
      uint64_t v188 = v187;

      [v178 addAttribute:NSForegroundColorAttributeName value:v515 range:v185];
      swift_bridgeObjectRelease();
      NSAttributedStringKey v512 = *(NSAttributedStringKey *)&v533[OBJC_IVAR____TtC16MomentsUIService34MOSuggestionActivityRouteAssetView_movePink];
      id v189 = (void *)v522;
      id v190 = [(id)v522 mainBundle];
      NSAttributedStringKey v515 = (NSAttributedStringKey)0x80000001001E4B50;
      v549._object = (void *)0x80000001001E4B50;
      v191._uint64_t countAndFlagsBits = 16421;
      v191._object = (void *)0xE200000000000000;
      v192._uint64_t countAndFlagsBits = 0;
      v192._object = (void *)0xE000000000000000;
      v549._uint64_t countAndFlagsBits = 0xD000000000000010;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v191, (Swift::String_optional)0, (NSBundle)v190, v192, v549);

      uint64_t v193 = swift_allocObject();
      *(_OWORD *)(v193 + 16) = v523;
      *(void *)(v193 + 56) = &type metadata for String;
      *(void *)(v193 + 64) = v186;
      *(void *)(v193 + 32) = v531;
      *(void *)(v193 + 40) = v532;
      swift_bridgeObjectRetain();
      static String.localizedStringWithFormat(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v194 = [v178 mutableString];
      NSString v195 = String._bridgeToObjectiveC()();
      id v196 = [v194 rangeOfString:v195 options:1];
      NSAttributedStringKey v513 = (NSAttributedStringKey)v104;
      uint64_t v198 = v197;

      double v199 = v178;
      [v178 addAttribute:NSForegroundColorAttributeName value:v512 range:v196, v198];
      swift_bridgeObjectRelease();
      id v200 = specialized static MOSuggestionTheme.Fonts.footnoteEmphFontSmallCaps()();
      id v201 = [v189 mainBundle];
      v550._object = v514;
      v202._uint64_t countAndFlagsBits = 16421;
      v202._object = (void *)0xE200000000000000;
      v203._uint64_t countAndFlagsBits = 0;
      v203._object = (void *)0xE000000000000000;
      v550._uint64_t countAndFlagsBits = 0xD000000000000010;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v202, (Swift::String_optional)0, (NSBundle)v201, v203, v550);

      uint64_t v204 = swift_allocObject();
      *(_OWORD *)(v204 + 16) = v523;
      CGPoint aBlock = (void **)v519;
      unint64_t v535 = (unint64_t)v516;
      uint64_t v205 = v525;
      CharacterSet.init(charactersIn:)();
      unint64_t v519 = lazy protocol witness table accessor for type String and conformance String();
      uint64_t v206 = StringProtocol.trimmingCharacters(in:)();
      uint64_t v208 = v207;
      uint64_t v526 = *(void *)(v526 + 8);
      ((void (*)(char *, void *))v526)(v205, v529);
      id v209 = v518;
      *(void *)(v204 + 56) = &type metadata for String;
      *(void *)(v204 + 64) = v209;
      *(void *)(v204 + 32) = v206;
      *(void *)(v204 + 40) = v208;
      static String.localizedStringWithFormat(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v210 = [v178 mutableString];
      NSString v211 = String._bridgeToObjectiveC()();
      [v210 rangeOfString:v211 options:1];

      long long v516 = NSFontAttributeName;
      [v199 addAttribute:value:range:];

      swift_bridgeObjectRelease();
      id v212 = specialized static MOSuggestionTheme.Fonts.footnoteEmphFontSmallCaps()();
      id v213 = [(id)v522 mainBundle];
      v551._object = v515;
      v214._uint64_t countAndFlagsBits = 16421;
      v214._object = (void *)0xE200000000000000;
      v215._uint64_t countAndFlagsBits = 0;
      v215._object = (void *)0xE000000000000000;
      v551._uint64_t countAndFlagsBits = 0xD000000000000010;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v214, (Swift::String_optional)0, (NSBundle)v213, v215, v551);

      uint64_t v216 = swift_allocObject();
      *(_OWORD *)(v216 + 16) = v523;
      CGPoint aBlock = v531;
      unint64_t v535 = v532;
      CharacterSet.init(charactersIn:)();
      uint64_t v217 = StringProtocol.trimmingCharacters(in:)();
      uint64_t v219 = v218;
      ((void (*)(char *, void *))v526)(v205, v529);
      id v220 = v518;
      *(void *)(v216 + 56) = &type metadata for String;
      *(void *)(v216 + 64) = v220;
      *(void *)(v216 + 32) = v217;
      *(void *)(v216 + 40) = v219;
      static String.localizedStringWithFormat(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v221 = [v199 mutableString];
      NSString v222 = String._bridgeToObjectiveC()();
      id v223 = [v221 rangeOfString:v222 options:1];
      uint64_t v225 = v224;

      [v199 addAttribute:v516 value:v212 range:v223];
      swift_bridgeObjectRelease();
      id v226 = v527;
      unint64_t v532 = (unint64_t)v199;
      [v527 setAttributedText:v199];
      id v227 = v533;
      double v228 = *(void **)&v533[OBJC_IVAR____TtC16MomentsUIService34MOSuggestionActivityRouteAssetView_labelStack];
      [v228 addArrangedSubview:v524];
      [v228 addArrangedSubview:v226];
      [v227 addSubview:v228];
      id v229 = [v228 superview];
      if (v229)
      {
        double v230 = v229;
        [v228 setTranslatesAutoresizingMaskIntoConstraints:0];
        id v231 = [v228 leadingAnchor];
        id v232 = [v230 leadingAnchor];
        id v233 = [v231 constraintEqualToAnchor:v232];

        [v233 setConstant:Width + 24.0];
        id v234 = v233;
        [v234 setActive:1];
      }
      id v235 = [v228 superview];
      id v14 = v520;
      if (v235)
      {
        id v236 = v235;
        [v228 setTranslatesAutoresizingMaskIntoConstraints:0];
        id v237 = [v228 trailingAnchor];
        id v238 = [v236 trailingAnchor];
        id v239 = [v237 constraintEqualToAnchor:v238];

        [v239 setConstant:-12.0];
        id v240 = v239;
        [v240 setActive:1];
      }
      id v241 = [v228 superview];
      id v4 = v521;
      os_log_type_t v48 = &selRef_collectionView_didSelectItemAtIndexPath_;
      if (v241) {
        goto LABEL_93;
      }
      goto LABEL_96;
    case 3:
      id v520 = v14;
      char v111 = v533;
      [v533 v22[135]];
      double v113 = (v112 - (v20 + 12.0 + 5.0 + v20 + 12.0 + 5.0)) * 0.5;
      long long v516 = (void **)[v530 bezierPathWithRoundedRect:v20 + 12.0 + 5.0, v20 + 12.0 + 5.0, v113 + v113, v113 + v113];

      UIView.fillSuper(margin:)(0.0);
      uint64_t v114 = swift_bridgeObjectRelease();
      (*(void (**)(uint64_t))((swift_isaMask & *v111) + 0xC0))(v114);
      uint64_t v115 = self;
      id v116 = [v115 mainBundle];
      v544._uint64_t countAndFlagsBits = 0xD000000000000021;
      v544._object = (void *)0x80000001001E4C30;
      v117._uint64_t countAndFlagsBits = 0x402520B7C2204025;
      v117._object = (void *)0xA800000000000000;
      v118._uint64_t countAndFlagsBits = 0;
      v118._object = (void *)0xE000000000000000;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v117, (Swift::String_optional)0, (NSBundle)v116, v118, v544);

      *(void *)&long long v522 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v119 = swift_allocObject();
      long long v523 = xmmword_1001DA390;
      *(_OWORD *)(v119 + 16) = xmmword_1001DA390;
      unint64_t v121 = *(void *)((char *)v111 + OBJC_IVAR____TtC16MomentsUIService34MOSuggestionActivityRouteAssetView_distance);
      unint64_t v120 = *(void *)((char *)v111
                       + OBJC_IVAR____TtC16MomentsUIService34MOSuggestionActivityRouteAssetView_distance
                       + 8);
      *(void *)(v119 + 56) = &type metadata for String;
      id v122 = (void *)lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v119 + 32) = v121;
      *(void *)(v119 + 40) = v120;
      uint64_t v123 = v540;
      unint64_t v124 = v541;
      *(void *)(v119 + 96) = &type metadata for String;
      *(void *)(v119 + 104) = v122;
      id v524 = v122;
      *(void *)(v119 + 64) = v122;
      *(void *)(v119 + 72) = v123;
      *(void *)(v119 + 80) = v124;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      static String.localizedStringWithFormat(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v125 = HIBYTE(v120) & 0xF;
      unint64_t v519 = v121;
      id v518 = (id)v120;
      if ((v120 & 0x2000000000000000) == 0) {
        uint64_t v125 = v121 & 0xFFFFFFFFFFFFLL;
      }
      CGPoint v521 = v4;
      if (v125)
      {
        id v126 = v115;
        uint64_t v127 = &selRef_collectionView_didSelectItemAtIndexPath_;
      }
      else
      {
        swift_bridgeObjectRelease();
        CGPoint v242 = v531;
        unint64_t v243 = v532;
        if ((v532 & 0x2000000000000000) != 0) {
          unint64_t v244 = HIBYTE(v532) & 0xF;
        }
        else {
          unint64_t v244 = (unint64_t)v531 & 0xFFFFFFFFFFFFLL;
        }
        uint64_t v127 = &selRef_collectionView_didSelectItemAtIndexPath_;
        id v245 = [v115 mainBundle];
        if (v244)
        {
          v552._uint64_t countAndFlagsBits = 0xD000000000000021;
          v552._object = (void *)0x80000001001E4B70;
          v246._uint64_t countAndFlagsBits = 0x402520B7C2204025;
          v246._object = (void *)0xA800000000000000;
          v247._uint64_t countAndFlagsBits = 0;
          v247._object = (void *)0xE000000000000000;
          NSLocalizedString(_:tableName:bundle:value:comment:)(v246, (Swift::String_optional)0, (NSBundle)v245, v247, v552);

          uint64_t v248 = swift_allocObject();
          *(_OWORD *)(v248 + 16) = v523;
          id v249 = v524;
          *(void *)(v248 + 56) = &type metadata for String;
          *(void *)(v248 + 64) = v249;
          *(void *)(v248 + 32) = v242;
          *(void *)(v248 + 40) = v243;
          uint64_t v250 = v540;
          unint64_t v251 = v541;
          *(void *)(v248 + 96) = &type metadata for String;
          *(void *)(v248 + 104) = v249;
          *(void *)(v248 + 72) = v250;
          *(void *)(v248 + 80) = v251;
          swift_bridgeObjectRetain();
        }
        else
        {
          v560._uint64_t countAndFlagsBits = 0xD000000000000014;
          v560._object = (void *)0x80000001001E4BA0;
          v350._uint64_t countAndFlagsBits = 16421;
          v350._object = (void *)0xE200000000000000;
          v351._uint64_t countAndFlagsBits = 0;
          v351._object = (void *)0xE000000000000000;
          NSLocalizedString(_:tableName:bundle:value:comment:)(v350, (Swift::String_optional)0, (NSBundle)v245, v351, v560);

          uint64_t v352 = swift_allocObject();
          *(_OWORD *)(v352 + 16) = xmmword_1001DA0F0;
          uint64_t v354 = v540;
          unint64_t v353 = v541;
          id v355 = v524;
          *(void *)(v352 + 56) = &type metadata for String;
          *(void *)(v352 + 64) = v355;
          *(void *)(v352 + 32) = v354;
          *(void *)(v352 + 40) = v353;
        }
        swift_bridgeObjectRetain();
        static String.localizedStringWithFormat(_:_:)();
        id v126 = v115;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      id v356 = objc_allocWithZone((Class)NSMutableAttributedString);
      NSString v357 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v358 = [v356 initWithString:v357];

      uint64_t v359 = v533;
      NSAttributedStringKey v515 = *(NSAttributedStringKey *)&v533[OBJC_IVAR____TtC16MomentsUIService34MOSuggestionActivityRouteAssetView_distanceBlue];
      int64_t v360 = v126;
      id v361 = [v126 v127[119]];
      NSAttributedStringKey v517 = (NSAttributedStringKey)0x80000001001E4B10;
      v561._object = (void *)0x80000001001E4B10;
      v362._uint64_t countAndFlagsBits = 16421;
      v362._object = (void *)0xE200000000000000;
      v363._uint64_t countAndFlagsBits = 0;
      v363._object = (void *)0xE000000000000000;
      v561._uint64_t countAndFlagsBits = 0xD000000000000010;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v362, (Swift::String_optional)0, (NSBundle)v361, v363, v561);

      uint64_t v364 = swift_allocObject();
      long long v523 = xmmword_1001DA0F0;
      *(_OWORD *)(v364 + 16) = xmmword_1001DA0F0;
      id v365 = v524;
      *(void *)(v364 + 56) = &type metadata for String;
      *(void *)(v364 + 64) = v365;
      *(void *)(v364 + 32) = v519;
      *(void *)(v364 + 40) = v518;
      swift_bridgeObjectRetain();
      static String.localizedStringWithFormat(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v511 = v358;
      id v366 = [v358 mutableString];
      NSString v367 = String._bridgeToObjectiveC()();
      [v366 rangeOfString:v367 options:1];

      NSAttributedStringKey v513 = NSForegroundColorAttributeName;
      [v358 addAttribute:value:range:];
      swift_bridgeObjectRelease();
      NSAttributedStringKey v515 = *(NSAttributedStringKey *)&v359[OBJC_IVAR____TtC16MomentsUIService34MOSuggestionActivityRouteAssetView_timeYellow];
      id v368 = [v360 mainBundle];
      v562._object = (void *)0x80000001001E4B30;
      v369._uint64_t countAndFlagsBits = 16421;
      v369._object = (void *)0xE200000000000000;
      v370._uint64_t countAndFlagsBits = 0;
      v370._object = (void *)0xE000000000000000;
      v562._uint64_t countAndFlagsBits = 0xD000000000000010;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v369, (Swift::String_optional)0, (NSBundle)v368, v370, v562);

      uint64_t v371 = swift_allocObject();
      *(_OWORD *)(v371 + 16) = v523;
      uint64_t v373 = v540;
      unint64_t v372 = v541;
      id v374 = v524;
      *(void *)(v371 + 56) = &type metadata for String;
      *(void *)(v371 + 64) = v374;
      *(void *)(v371 + 32) = v373;
      *(void *)(v371 + 40) = v372;
      swift_bridgeObjectRetain();
      static String.localizedStringWithFormat(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v375 = v511;
      id v376 = [v511 mutableString];
      NSString v377 = String._bridgeToObjectiveC()();
      id v378 = [v376 rangeOfString:v377 options:1];
      uint64_t v380 = v379;

      [v375 addAttribute:NSForegroundColorAttributeName value:v515 range:v378];
      swift_bridgeObjectRelease();
      NSAttributedStringKey v512 = *(NSAttributedStringKey *)&v533[OBJC_IVAR____TtC16MomentsUIService34MOSuggestionActivityRouteAssetView_movePink];
      id v514 = v360;
      id v381 = [v360 mainBundle];
      NSAttributedStringKey v515 = (NSAttributedStringKey)0x80000001001E4B50;
      v563._object = (void *)0x80000001001E4B50;
      v382._uint64_t countAndFlagsBits = 16421;
      v382._object = (void *)0xE200000000000000;
      v383._uint64_t countAndFlagsBits = 0;
      v383._object = (void *)0xE000000000000000;
      v563._uint64_t countAndFlagsBits = 0xD000000000000010;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v382, (Swift::String_optional)0, (NSBundle)v381, v383, v563);

      uint64_t v384 = swift_allocObject();
      *(_OWORD *)(v384 + 16) = v523;
      *(void *)(v384 + 56) = &type metadata for String;
      *(void *)(v384 + 64) = v374;
      *(void *)(v384 + 32) = v531;
      *(void *)(v384 + 40) = v532;
      swift_bridgeObjectRetain();
      static String.localizedStringWithFormat(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v385 = [v375 mutableString];
      NSString v386 = String._bridgeToObjectiveC()();
      id v387 = [v385 rangeOfString:v386 options:1];
      uint64_t v389 = v388;

      uint64_t v390 = v375;
      [v375 addAttribute:v513 value:v512 range:v387];
      swift_bridgeObjectRelease();
      id v391 = specialized static MOSuggestionTheme.Fonts.footnoteEmphFontSmallCaps()();
      id v392 = [v360 mainBundle];
      v564._object = v517;
      v393._uint64_t countAndFlagsBits = 16421;
      v393._object = (void *)0xE200000000000000;
      v394._uint64_t countAndFlagsBits = 0;
      v394._object = (void *)0xE000000000000000;
      v564._uint64_t countAndFlagsBits = 0xD000000000000010;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v393, (Swift::String_optional)0, (NSBundle)v392, v394, v564);

      uint64_t v395 = swift_allocObject();
      *(_OWORD *)(v395 + 16) = v523;
      CGPoint aBlock = (void **)v519;
      unint64_t v535 = (unint64_t)v518;
      uint64_t v396 = v525;
      CharacterSet.init(charactersIn:)();
      unint64_t v519 = lazy protocol witness table accessor for type String and conformance String();
      uint64_t v397 = StringProtocol.trimmingCharacters(in:)();
      uint64_t v399 = v398;
      uint64_t v526 = *(void *)(v526 + 8);
      ((void (*)(char *, void *))v526)(v396, v529);
      id v400 = v524;
      *(void *)(v395 + 56) = &type metadata for String;
      *(void *)(v395 + 64) = v400;
      *(void *)(v395 + 32) = v397;
      *(void *)(v395 + 40) = v399;
      static String.localizedStringWithFormat(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v401 = [v390 mutableString];
      NSString v402 = String._bridgeToObjectiveC()();
      [v401 rangeOfString:v402 options:1];

      id v518 = NSFontAttributeName;
      [v390 addAttribute:value:range:];

      swift_bridgeObjectRelease();
      id v403 = specialized static MOSuggestionTheme.Fonts.footnoteEmphFontSmallCaps()();
      id v404 = [v514 mainBundle];
      v565._object = v515;
      v405._uint64_t countAndFlagsBits = 16421;
      v405._object = (void *)0xE200000000000000;
      v406._uint64_t countAndFlagsBits = 0;
      v406._object = (void *)0xE000000000000000;
      v565._uint64_t countAndFlagsBits = 0xD000000000000010;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v405, (Swift::String_optional)0, (NSBundle)v404, v406, v565);

      uint64_t v407 = swift_allocObject();
      *(_OWORD *)(v407 + 16) = v523;
      CGPoint aBlock = v531;
      unint64_t v535 = v532;
      CharacterSet.init(charactersIn:)();
      uint64_t v408 = StringProtocol.trimmingCharacters(in:)();
      uint64_t v410 = v409;
      ((void (*)(char *, void *))v526)(v396, v529);
      id v411 = v524;
      *(void *)(v407 + 56) = &type metadata for String;
      *(void *)(v407 + 64) = v411;
      *(void *)(v407 + 32) = v408;
      *(void *)(v407 + 40) = v410;
      static String.localizedStringWithFormat(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v412 = [v390 mutableString];
      NSString v413 = String._bridgeToObjectiveC()();
      id v414 = [v412 rangeOfString:v413 options:1];
      uint64_t v416 = v415;

      [v390 addAttribute:v518 value:v403 range:v414];
      swift_bridgeObjectRelease();
      [v527 setAttributedText:v390];

      os_log_type_t v48 = &selRef_collectionView_didSelectItemAtIndexPath_;
      goto LABEL_104;
    case 4:
    case 5:
      id v49 = [v4 superview];
      if (v49)
      {
        objc_super v50 = v49;
        [v4 setTranslatesAutoresizingMaskIntoConstraints:0];
        id v51 = [v4 leadingAnchor];
        id v52 = [v50 leadingAnchor];
        id v53 = [v51 constraintEqualToAnchor:v52];

        [v53 setConstant:0.0];
        if (v53)
        {
          id v54 = v53;
          [v54 setActive:1];
        }
      }
      id v55 = [v4 superview];
      if (v55)
      {
        uint64_t v56 = v55;
        [v4 setTranslatesAutoresizingMaskIntoConstraints:0];
        id v57 = [v4 centerYAnchor];
        id v58 = [v56 centerYAnchor];
        id v59 = [v57 constraintEqualToAnchor:v58];

        [v59 setConstant:0.0];
        if (v59)
        {
          id v60 = v59;
          [v60 setActive:1];
        }
      }
      NSAttributedStringKey v517 = v26;
      id v520 = v14;
      [v4 setTranslatesAutoresizingMaskIntoConstraints:0];
      id v61 = [v4 widthAnchor];
      id v62 = [v61 constraintEqualToConstant:v1];

      [v62 setActive:1];
      [v4 setTranslatesAutoresizingMaskIntoConstraints:0];
      id v63 = [v4 heightAnchor];
      id v64 = [v63 constraintEqualToConstant:Height];

      [v64 setActive:1];
      uint64_t v65 = v533;
      (*(void (**)(void))((swift_isaMask & *(void *)v533) + 0xC0))();
      id v518 = self;
      id v66 = [v518 mainBundle];
      v542._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
      v542._object = (void *)0x80000001001E4AE0;
      v67._uint64_t countAndFlagsBits = 0x402520B7C2204025;
      v67._object = (void *)0xAE00402520B7C220;
      v68._uint64_t countAndFlagsBits = 0;
      v68._object = (void *)0xE000000000000000;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v67, (Swift::String_optional)0, (NSBundle)v66, v68, v542);

      unint64_t v519 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v69 = swift_allocObject();
      *(_OWORD *)(v69 + 16) = xmmword_1001DA740;
      uint64_t v70 = (void **)&v65[OBJC_IVAR____TtC16MomentsUIService34MOSuggestionActivityRouteAssetView_distance];
      uint64_t v71 = v4;
      uint64_t v72 = (void **)*v70;
      uint64_t v73 = (NSString *)v70[1];
      *(void *)(v69 + 56) = &type metadata for String;
      unint64_t v74 = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v69 + 32) = v72;
      *(void *)(v69 + 40) = v73;
      uint64_t v75 = v540;
      unint64_t v76 = v541;
      *(void *)(v69 + 96) = &type metadata for String;
      *(void *)(v69 + 104) = v74;
      *(void *)(v69 + 64) = v74;
      *(void *)(v69 + 72) = v75;
      *(void *)(v69 + 80) = v76;
      *(void *)(v69 + 136) = &type metadata for String;
      *(void *)(v69 + 144) = v74;
      *(void *)&long long v523 = v74;
      uint64_t v78 = v531;
      unint64_t v77 = v532;
      *(void *)(v69 + 112) = v531;
      *(void *)(v69 + 120) = v77;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      static String.localizedStringWithFormat(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v79 = ((unint64_t)v73 >> 56) & 0xF;
      long long v516 = v72;
      NSAttributedStringKey v515 = v73;
      if (((unint64_t)v73 & 0x2000000000000000) == 0) {
        uint64_t v79 = (unint64_t)v72 & 0xFFFFFFFFFFFFLL;
      }
      CGPoint v521 = v71;
      if (v79)
      {
        id v80 = v518;
      }
      else
      {
        swift_bridgeObjectRelease();
        if ((v77 & 0x2000000000000000) != 0) {
          uint64_t v162 = HIBYTE(v77) & 0xF;
        }
        else {
          uint64_t v162 = (unint64_t)v78 & 0xFFFFFFFFFFFFLL;
        }
        id v163 = v518;
        id v164 = [v518 mainBundle];
        if (v162)
        {
          v546._uint64_t countAndFlagsBits = 0xD000000000000021;
          v546._object = (void *)0x80000001001E4BC0;
          v165._uint64_t countAndFlagsBits = 0x402520B7C2204025;
          v165._object = (void *)0xA800000000000000;
          v166._uint64_t countAndFlagsBits = 0;
          v166._object = (void *)0xE000000000000000;
          NSLocalizedString(_:tableName:bundle:value:comment:)(v165, (Swift::String_optional)0, (NSBundle)v164, v166, v546);

          uint64_t v167 = swift_allocObject();
          *(_OWORD *)(v167 + 16) = xmmword_1001DA390;
          uint64_t v168 = v540;
          unint64_t v169 = v541;
          uint64_t v170 = v523;
          *(void *)(v167 + 56) = &type metadata for String;
          *(void *)(v167 + 64) = v170;
          *(void *)(v167 + 32) = v168;
          *(void *)(v167 + 40) = v169;
          *(void *)(v167 + 96) = &type metadata for String;
          *(void *)(v167 + 104) = v170;
          *(void *)(v167 + 72) = v78;
          *(void *)(v167 + 80) = v77;
          swift_bridgeObjectRetain();
        }
        else
        {
          v554._uint64_t countAndFlagsBits = 0xD000000000000014;
          v554._object = (void *)0x80000001001E4BA0;
          v260._uint64_t countAndFlagsBits = 16421;
          v260._object = (void *)0xE200000000000000;
          v261._uint64_t countAndFlagsBits = 0;
          v261._object = (void *)0xE000000000000000;
          NSLocalizedString(_:tableName:bundle:value:comment:)(v260, (Swift::String_optional)0, (NSBundle)v164, v261, v554);

          uint64_t v262 = swift_allocObject();
          *(_OWORD *)(v262 + 16) = xmmword_1001DA0F0;
          uint64_t v264 = v540;
          unint64_t v263 = v541;
          uint64_t v265 = v523;
          *(void *)(v262 + 56) = &type metadata for String;
          *(void *)(v262 + 64) = v265;
          *(void *)(v262 + 32) = v264;
          *(void *)(v262 + 40) = v263;
        }
        swift_bridgeObjectRetain();
        static String.localizedStringWithFormat(_:_:)();
        id v80 = v163;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      id v266 = objc_allocWithZone((Class)NSMutableAttributedString);
      NSString v267 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v268 = [v266 initWithString:v267];

      NSAttributedStringKey v513 = *(NSAttributedStringKey *)&v533[OBJC_IVAR____TtC16MomentsUIService34MOSuggestionActivityRouteAssetView_distanceBlue];
      uint64_t v269 = v80;
      id v270 = [v80 mainBundle];
      id v514 = (id)0x80000001001E4B10;
      v555._object = (void *)0x80000001001E4B10;
      v271._uint64_t countAndFlagsBits = 16421;
      v271._object = (void *)0xE200000000000000;
      v272._uint64_t countAndFlagsBits = 0;
      v272._object = (void *)0xE000000000000000;
      v555._uint64_t countAndFlagsBits = 0xD000000000000010;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v271, (Swift::String_optional)0, (NSBundle)v270, v272, v555);

      uint64_t v273 = swift_allocObject();
      long long v522 = xmmword_1001DA0F0;
      *(_OWORD *)(v273 + 16) = xmmword_1001DA0F0;
      uint64_t v274 = v523;
      *(void *)(v273 + 56) = &type metadata for String;
      *(void *)(v273 + 64) = v274;
      *(void *)(v273 + 32) = v516;
      *(void *)(v273 + 40) = v515;
      swift_bridgeObjectRetain();
      static String.localizedStringWithFormat(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v275 = [v268 mutableString];
      NSString v276 = String._bridgeToObjectiveC()();
      id v277 = [v275 rangeOfString:v276 options:1];
      uint64_t v279 = v278;

      NSAttributedStringKey v512 = NSForegroundColorAttributeName;
      [v268 addAttribute:NSForegroundColorAttributeName value:v513 range:v277, v279];
      swift_bridgeObjectRelease();
      double v280 = v533;
      NSAttributedStringKey v513 = *(NSAttributedStringKey *)&v533[OBJC_IVAR____TtC16MomentsUIService34MOSuggestionActivityRouteAssetView_timeYellow];
      id v281 = [v269 mainBundle];
      v556._object = (void *)0x80000001001E4B30;
      v282._uint64_t countAndFlagsBits = 16421;
      v282._object = (void *)0xE200000000000000;
      v283._uint64_t countAndFlagsBits = 0;
      v283._object = (void *)0xE000000000000000;
      v556._uint64_t countAndFlagsBits = 0xD000000000000010;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v282, (Swift::String_optional)0, (NSBundle)v281, v283, v556);

      uint64_t v284 = swift_allocObject();
      *(_OWORD *)(v284 + 16) = v522;
      uint64_t v286 = v540;
      unint64_t v285 = v541;
      uint64_t v287 = v523;
      *(void *)(v284 + 56) = &type metadata for String;
      *(void *)(v284 + 64) = v287;
      *(void *)(v284 + 32) = v286;
      *(void *)(v284 + 40) = v285;
      swift_bridgeObjectRetain();
      static String.localizedStringWithFormat(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v288 = [v268 mutableString];
      NSString v289 = String._bridgeToObjectiveC()();
      id v290 = [v288 rangeOfString:v289 options:1];
      uint64_t v292 = v291;

      [v268 addAttribute:NSForegroundColorAttributeName value:v513 range:v290];
      swift_bridgeObjectRelease();
      uint64_t v293 = *(void *)&v280[OBJC_IVAR____TtC16MomentsUIService34MOSuggestionActivityRouteAssetView_movePink];
      id v294 = v518;
      id v295 = [v518 mainBundle];
      NSAttributedStringKey v513 = (NSAttributedStringKey)0x80000001001E4B50;
      v557._object = (void *)0x80000001001E4B50;
      v296._uint64_t countAndFlagsBits = 16421;
      v296._object = (void *)0xE200000000000000;
      v297._uint64_t countAndFlagsBits = 0;
      v297._object = (void *)0xE000000000000000;
      v557._uint64_t countAndFlagsBits = 0xD000000000000010;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v296, (Swift::String_optional)0, (NSBundle)v295, v297, v557);

      uint64_t v298 = swift_allocObject();
      *(_OWORD *)(v298 + 16) = v522;
      *(void *)(v298 + 56) = &type metadata for String;
      *(void *)(v298 + 64) = v287;
      *(void *)(v298 + 32) = v531;
      *(void *)(v298 + 40) = v532;
      swift_bridgeObjectRetain();
      static String.localizedStringWithFormat(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v299 = [v268 mutableString];
      NSString v300 = String._bridgeToObjectiveC()();
      id v301 = [v299 rangeOfString:v300 options:1];
      uint64_t v303 = v302;

      [v268 addAttribute:v512 value:v293 range:v301];
      swift_bridgeObjectRelease();
      id v304 = specialized static MOSuggestionTheme.Fonts.footnoteEmphFontSmallCaps()();
      id v305 = [v294 mainBundle];
      v558._object = v514;
      v306._uint64_t countAndFlagsBits = 16421;
      v306._object = (void *)0xE200000000000000;
      v307._uint64_t countAndFlagsBits = 0;
      v307._object = (void *)0xE000000000000000;
      v558._uint64_t countAndFlagsBits = 0xD000000000000010;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v306, (Swift::String_optional)0, (NSBundle)v305, v307, v558);

      uint64_t v308 = swift_allocObject();
      *(_OWORD *)(v308 + 16) = v522;
      CGPoint aBlock = v516;
      unint64_t v535 = (unint64_t)v515;
      char v309 = v525;
      CharacterSet.init(charactersIn:)();
      long long v516 = (void **)lazy protocol witness table accessor for type String and conformance String();
      uint64_t v310 = StringProtocol.trimmingCharacters(in:)();
      uint64_t v312 = v311;
      uint64_t v526 = *(void *)(v526 + 8);
      ((void (*)(char *, void *))v526)(v309, v529);
      uint64_t v313 = v523;
      *(void *)(v308 + 56) = &type metadata for String;
      *(void *)(v308 + 64) = v313;
      *(void *)(v308 + 32) = v310;
      *(void *)(v308 + 40) = v312;
      static String.localizedStringWithFormat(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v314 = [v268 mutableString];
      NSString v315 = String._bridgeToObjectiveC()();
      [v314 rangeOfString:v315 options:1];

      NSAttributedStringKey v515 = NSFontAttributeName;
      [v268 addAttribute:value:range:];

      swift_bridgeObjectRelease();
      id v316 = specialized static MOSuggestionTheme.Fonts.footnoteEmphFontSmallCaps()();
      id v317 = [v518 mainBundle];
      v559._object = v513;
      v318._uint64_t countAndFlagsBits = 16421;
      v318._object = (void *)0xE200000000000000;
      v319._uint64_t countAndFlagsBits = 0;
      v319._object = (void *)0xE000000000000000;
      v559._uint64_t countAndFlagsBits = 0xD000000000000010;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v318, (Swift::String_optional)0, (NSBundle)v317, v319, v559);

      uint64_t v320 = swift_allocObject();
      *(_OWORD *)(v320 + 16) = v522;
      CGPoint aBlock = v531;
      unint64_t v535 = v532;
      CharacterSet.init(charactersIn:)();
      uint64_t v321 = StringProtocol.trimmingCharacters(in:)();
      uint64_t v323 = v322;
      CGFloat v324 = v309;
      int v325 = v533;
      ((void (*)(char *, void *))v526)(v324, v529);
      uint64_t v326 = v523;
      *(void *)(v320 + 56) = &type metadata for String;
      *(void *)(v320 + 64) = v326;
      *(void *)(v320 + 32) = v321;
      *(void *)(v320 + 40) = v323;
      static String.localizedStringWithFormat(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v327 = [v268 mutableString];
      NSString v328 = String._bridgeToObjectiveC()();
      id v329 = [v327 rangeOfString:v328 options:1];
      uint64_t v331 = v330;

      [v268 addAttribute:v515 value:v316 range:v329];
      swift_bridgeObjectRelease();
      id v332 = v527;
      unint64_t v532 = (unint64_t)v268;
      [v527 setAttributedText:v268];
      double v228 = *(void **)&v325[OBJC_IVAR____TtC16MomentsUIService34MOSuggestionActivityRouteAssetView_labelStack];
      [v228 addArrangedSubview:v524];
      [v228 addArrangedSubview:v332];
      [v325 addSubview:v228];
      id v333 = [v228 superview];
      if (v333)
      {
        CGFloat v334 = v333;
        [v228 setTranslatesAutoresizingMaskIntoConstraints:0];
        id v335 = [v228 leadingAnchor];
        id v336 = [v334 leadingAnchor];
        id v337 = [v335 constraintEqualToAnchor:v336];

        [v337 setConstant:Width + 24.0];
        id v338 = v337;
        [v338 setActive:1];
      }
      id v339 = [v228 superview];
      id v14 = v520;
      if (v339)
      {
        uint64_t v340 = v339;
        [v228 setTranslatesAutoresizingMaskIntoConstraints:0];
        id v341 = [v228 trailingAnchor];
        id v342 = [v340 trailingAnchor];
        id v343 = [v341 constraintEqualToAnchor:v342];

        [v343 setConstant:-12.0];
        id v344 = v343;
        [v344 setActive:1];
      }
      id v241 = [v228 superview];
      id v4 = v521;
      os_log_type_t v48 = &selRef_collectionView_didSelectItemAtIndexPath_;
      if (v241)
      {
LABEL_93:
        id v345 = v241;
        [v228 setTranslatesAutoresizingMaskIntoConstraints:0];
        id v346 = [v228 centerYAnchor];
        id v347 = [v345 centerYAnchor];
        id v348 = [v346 constraintEqualToAnchor:v347];

        [v348 setConstant:0.0];
        NSAttributedStringKey v26 = v517;
        if (v348)
        {
          id v349 = v348;
          [v349 setActive:1];
        }
        else
        {
        }
LABEL_105:
        uint64_t v22 = &selRef_collectionView_didSelectItemAtIndexPath_;
      }
      else
      {
LABEL_96:

        uint64_t v22 = &selRef_collectionView_didSelectItemAtIndexPath_;
        NSAttributedStringKey v26 = v517;
      }
LABEL_106:
      double v486 = v533;
      [v533 v22[135]];
      double v488 = v487;
      [v486 v22[135]];
      id v489 = [v530 bezierPathWithRoundedRect:0.0, 0.0, v488];
      [v489 appendPath:v26];
      [v489 setUsesEvenOddFillRule:1];
      id v490 = [objc_allocWithZone((Class)CAShapeLayer) init];
      id v491 = [v489 CGPath];
      [v490 setPath:v491];

      [v490 setFillRule:kCAFillRuleEvenOdd];
      id v492 = [v486 backgroundColor];
      if (v492)
      {
        double v493 = v492;
        id v494 = [v492 CGColor];
      }
      else
      {
        id v494 = 0;
      }
      [v490 setFillColor:v494];

      LODWORD(v495) = 1057803469;
      [v490 setOpacity:v495];
      UIView.fillSuper(margin:)(0.0);
      swift_bridgeObjectRelease();
      id v496 = [v14 superview];
      if (v496)
      {
        unint64_t v497 = v496;
        [v14 setTranslatesAutoresizingMaskIntoConstraints:0];
        id v498 = [v14 centerYAnchor];
        id v499 = [v497 centerYAnchor];
        unint64_t v500 = v26;
        id v501 = [v498 constraintEqualToAnchor:v499];

        [v501 setConstant:0.0];
        id v502 = v501;
        NSAttributedStringKey v26 = v500;
        os_log_type_t v48 = &selRef_collectionView_didSelectItemAtIndexPath_;
        id v503 = v502;
        [v502 setActive:1];
      }
      id v504 = [v14 layer];
      [v504 addSublayer:v490];

      CGPoint v505 = v533;
      [v533 setIsAccessibilityElement:1];
      [v505 setAccessibilityIgnoresInvertColors:1];
      id v506 = [self v48[119]];
      v572._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
      v572._object = (void *)0x80000001001E4AB0;
      v507._uint64_t countAndFlagsBits = 0x2074756F6B726F57;
      v507._object = (void *)0xED00006574756F72;
      v508._uint64_t countAndFlagsBits = 0;
      v508._object = (void *)0xE000000000000000;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v507, (Swift::String_optional)0, (NSBundle)v506, v508, v572);

      NSString v509 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v505 setAccessibilityLabel:v509];

      (*(void (**)(void))((swift_isaMask & *(void *)v505) + 0xC8))();
      swift_release();
      swift_bridgeObjectRelease();
      return;
    case 6:
      NSAttributedStringKey v517 = v26;
      id v520 = v14;
      CGPoint v521 = v4;
      UIView.fillSuper(margin:)(0.0);
      swift_bridgeObjectRelease();
      id v128 = [objc_allocWithZone((Class)UILabel) init];
      [v533 v22[135]];
      double v129 = CGRectGetWidth(v576);
      uint64_t v130 = self;
      id v131 = [v130 preferredFontForTextStyle:UIFontTextStyleBody];
      id v132 = [v131 fontDescriptor];
      uint64_t v133 = v22;
      id v134 = [v132 fontDescriptorWithSymbolicTraits:2];

      if (!v134) {
        goto LABEL_115;
      }
      id v135 = [v130 fontWithDescriptor:v134 size:0.0];

      double v136 = specialized UILabel.estimatedHeight(forWidth:text:ofFont:)(0, 0xE000000000000000, v135, v129);
      double v137 = v136 + 12.0 + 5.0;
      uint64_t v138 = v533;
      [v533 v133[135]];
      double v140 = (v139 - (v137 + v137)) * 0.5 + (v139 - (v137 + v137)) * 0.5;
      long long v516 = [v530 bezierPathWithRoundedRect:v137 cornerRadius:v137 v140 v140];

      (*(void (**)(void))((swift_isaMask & *(void *)v138) + 0xC0))();
      id v141 = [v130 preferredFontForTextStyle:UIFontTextStyleBody];
      id v142 = [v141 fontDescriptor];
      id v143 = [v142 fontDescriptorWithSymbolicTraits:2];

      if (!v143) {
        goto LABEL_116;
      }
      id v144 = [v130 fontWithDescriptor:v143 size:0.0];

      [v524 setFont:v144];
      id v145 = [v130 preferredFontForTextStyle:UIFontTextStyleBody];
      id v146 = [v145 fontDescriptor];
      id v147 = [v146 fontDescriptorWithSymbolicTraits:2];

      unint64_t v148 = v531;
      if (!v147) {
        goto LABEL_117;
      }
      id v149 = [v130 fontWithDescriptor:v147 size:0.0];

      [v527 setFont:v149];
      uint64_t v150 = self;
      id v151 = [v150 mainBundle];
      v545._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
      v545._object = (void *)0x80000001001E4AE0;
      v152._uint64_t countAndFlagsBits = 0x402520B7C2204025;
      v152._object = (void *)0xAE00402520B7C220;
      v153._uint64_t countAndFlagsBits = 0;
      v153._object = (void *)0xE000000000000000;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v152, (Swift::String_optional)0, (NSBundle)v151, v153, v545);

      *(void *)&long long v522 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v154 = swift_allocObject();
      *(_OWORD *)(v154 + 16) = xmmword_1001DA740;
      unint64_t v156 = *(void *)&v533[OBJC_IVAR____TtC16MomentsUIService34MOSuggestionActivityRouteAssetView_distance];
      unint64_t v155 = *(void *)&v533[OBJC_IVAR____TtC16MomentsUIService34MOSuggestionActivityRouteAssetView_distance + 8];
      *(void *)(v154 + 56) = &type metadata for String;
      char v157 = (void *)lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v154 + 32) = v156;
      *(void *)(v154 + 40) = v155;
      uint64_t v158 = v540;
      unint64_t v159 = v541;
      *(void *)(v154 + 96) = &type metadata for String;
      *(void *)(v154 + 104) = v157;
      *(void *)(v154 + 64) = v157;
      *(void *)(v154 + 72) = v158;
      *(void *)(v154 + 80) = v159;
      *(void *)(v154 + 136) = &type metadata for String;
      *(void *)(v154 + 144) = v157;
      id v524 = v157;
      unint64_t v160 = v532;
      *(void *)(v154 + 112) = v148;
      *(void *)(v154 + 120) = v160;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      static String.localizedStringWithFormat(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v161 = HIBYTE(v155) & 0xF;
      unint64_t v519 = v156;
      if ((v155 & 0x2000000000000000) == 0) {
        uint64_t v161 = v156 & 0xFFFFFFFFFFFFLL;
      }
      if (!v161)
      {
        swift_bridgeObjectRelease();
        if ((v160 & 0x2000000000000000) != 0) {
          uint64_t v252 = HIBYTE(v160) & 0xF;
        }
        else {
          uint64_t v252 = (unint64_t)v148 & 0xFFFFFFFFFFFFLL;
        }
        id v253 = [v150 mainBundle];
        if (v252)
        {
          v553._uint64_t countAndFlagsBits = 0xD000000000000021;
          v553._object = (void *)0x80000001001E4B70;
          v254._uint64_t countAndFlagsBits = 0x402520B7C2204025;
          v254._object = (void *)0xA800000000000000;
          v255._uint64_t countAndFlagsBits = 0;
          v255._object = (void *)0xE000000000000000;
          NSLocalizedString(_:tableName:bundle:value:comment:)(v254, (Swift::String_optional)0, (NSBundle)v253, v255, v553);

          uint64_t v256 = swift_allocObject();
          *(_OWORD *)(v256 + 16) = xmmword_1001DA390;
          id v257 = v524;
          *(void *)(v256 + 56) = &type metadata for String;
          *(void *)(v256 + 64) = v257;
          *(void *)(v256 + 32) = v148;
          *(void *)(v256 + 40) = v160;
          uint64_t v258 = v540;
          unint64_t v259 = v541;
          *(void *)(v256 + 96) = &type metadata for String;
          *(void *)(v256 + 104) = v257;
          *(void *)(v256 + 72) = v258;
          *(void *)(v256 + 80) = v259;
          swift_bridgeObjectRetain();
        }
        else
        {
          v566._uint64_t countAndFlagsBits = 0xD000000000000014;
          v566._object = (void *)0x80000001001E4BA0;
          v417._uint64_t countAndFlagsBits = 16421;
          v417._object = (void *)0xE200000000000000;
          v418._uint64_t countAndFlagsBits = 0;
          v418._object = (void *)0xE000000000000000;
          NSLocalizedString(_:tableName:bundle:value:comment:)(v417, (Swift::String_optional)0, (NSBundle)v253, v418, v566);

          uint64_t v419 = swift_allocObject();
          *(_OWORD *)(v419 + 16) = xmmword_1001DA0F0;
          uint64_t v421 = v540;
          unint64_t v420 = v541;
          id v422 = v524;
          *(void *)(v419 + 56) = &type metadata for String;
          *(void *)(v419 + 64) = v422;
          *(void *)(v419 + 32) = v421;
          *(void *)(v419 + 40) = v420;
        }
        swift_bridgeObjectRetain();
        static String.localizedStringWithFormat(_:_:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      id v423 = objc_allocWithZone((Class)NSMutableAttributedString);
      NSString v424 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v425 = [v423 initWithString:v424];

      uint64_t v426 = v533;
      NSAttributedStringKey v515 = *(NSAttributedStringKey *)&v533[OBJC_IVAR____TtC16MomentsUIService34MOSuggestionActivityRouteAssetView_distanceBlue];
      id v518 = v150;
      id v427 = [v150 mainBundle];
      NSAttributedStringKey v517 = (NSAttributedStringKey)0x80000001001E4B10;
      v567._object = (void *)0x80000001001E4B10;
      v428._uint64_t countAndFlagsBits = 16421;
      v428._object = (void *)0xE200000000000000;
      v429._uint64_t countAndFlagsBits = 0;
      v429._object = (void *)0xE000000000000000;
      v567._uint64_t countAndFlagsBits = 0xD000000000000010;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v428, (Swift::String_optional)0, (NSBundle)v427, v429, v567);

      uint64_t v430 = swift_allocObject();
      long long v523 = xmmword_1001DA0F0;
      *(_OWORD *)(v430 + 16) = xmmword_1001DA0F0;
      id v431 = v524;
      *(void *)(v430 + 56) = &type metadata for String;
      *(void *)(v430 + 64) = v431;
      *(void *)(v430 + 32) = v519;
      *(void *)(v430 + 40) = v155;
      swift_bridgeObjectRetain();
      static String.localizedStringWithFormat(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v432 = [v425 mutableString];
      NSString v433 = String._bridgeToObjectiveC()();
      id v434 = [v432 rangeOfString:v433 options:1];
      uint64_t v436 = v435;

      NSAttributedStringKey v513 = NSForegroundColorAttributeName;
      [v425 addAttribute:NSForegroundColorAttributeName value:v515 range:v434 v436];
      swift_bridgeObjectRelease();
      NSAttributedStringKey v515 = *(NSAttributedStringKey *)&v426[OBJC_IVAR____TtC16MomentsUIService34MOSuggestionActivityRouteAssetView_timeYellow];
      id v437 = [v150 mainBundle];
      v568._object = (void *)0x80000001001E4B30;
      v438._uint64_t countAndFlagsBits = 16421;
      v438._object = (void *)0xE200000000000000;
      v439._uint64_t countAndFlagsBits = 0;
      v439._object = (void *)0xE000000000000000;
      v568._uint64_t countAndFlagsBits = 0xD000000000000010;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v438, (Swift::String_optional)0, (NSBundle)v437, v439, v568);

      uint64_t v440 = swift_allocObject();
      *(_OWORD *)(v440 + 16) = v523;
      uint64_t v442 = v540;
      unint64_t v441 = v541;
      id v443 = v524;
      *(void *)(v440 + 56) = &type metadata for String;
      *(void *)(v440 + 64) = v443;
      *(void *)(v440 + 32) = v442;
      *(void *)(v440 + 40) = v441;
      swift_bridgeObjectRetain();
      static String.localizedStringWithFormat(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v444 = [v425 mutableString];
      NSString v445 = String._bridgeToObjectiveC()();
      id v514 = (id)v155;
      id v446 = [v444 rangeOfString:v445 options:1];
      uint64_t v448 = v447;

      [v425 addAttribute:NSForegroundColorAttributeName value:v515 range:v446];
      swift_bridgeObjectRelease();
      uint64_t v449 = *(void *)&v533[OBJC_IVAR____TtC16MomentsUIService34MOSuggestionActivityRouteAssetView_movePink];
      id v450 = v518;
      id v451 = [v518 mainBundle];
      NSAttributedStringKey v515 = (NSAttributedStringKey)0x80000001001E4B50;
      v569._object = (void *)0x80000001001E4B50;
      v452._uint64_t countAndFlagsBits = 16421;
      v452._object = (void *)0xE200000000000000;
      v453._uint64_t countAndFlagsBits = 0;
      v453._object = (void *)0xE000000000000000;
      v569._uint64_t countAndFlagsBits = 0xD000000000000010;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v452, (Swift::String_optional)0, (NSBundle)v451, v453, v569);

      uint64_t v454 = swift_allocObject();
      *(_OWORD *)(v454 + 16) = v523;
      *(void *)(v454 + 56) = &type metadata for String;
      *(void *)(v454 + 64) = v443;
      *(void *)(v454 + 32) = v531;
      *(void *)(v454 + 40) = v532;
      swift_bridgeObjectRetain();
      static String.localizedStringWithFormat(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v455 = [v425 mutableString];
      NSString v456 = String._bridgeToObjectiveC()();
      id v457 = [v455 rangeOfString:v456 options:1];
      uint64_t v459 = v458;

      [v425 addAttribute:v513 value:v449 range:v457];
      swift_bridgeObjectRelease();
      id v460 = specialized static MOSuggestionTheme.Fonts.footnoteEmphFontSmallCaps()();
      id v461 = [v450 mainBundle];
      v570._object = v517;
      v462._uint64_t countAndFlagsBits = 16421;
      v462._object = (void *)0xE200000000000000;
      v463._uint64_t countAndFlagsBits = 0;
      v463._object = (void *)0xE000000000000000;
      v570._uint64_t countAndFlagsBits = 0xD000000000000010;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v462, (Swift::String_optional)0, (NSBundle)v461, v463, v570);

      uint64_t v464 = swift_allocObject();
      *(_OWORD *)(v464 + 16) = v523;
      CGPoint aBlock = (void **)v519;
      unint64_t v535 = (unint64_t)v514;
      uint64_t v465 = v525;
      CharacterSet.init(charactersIn:)();
      unint64_t v519 = lazy protocol witness table accessor for type String and conformance String();
      uint64_t v466 = StringProtocol.trimmingCharacters(in:)();
      uint64_t v468 = v467;
      uint64_t v526 = *(void *)(v526 + 8);
      ((void (*)(char *, void *))v526)(v465, v529);
      id v469 = v524;
      *(void *)(v464 + 56) = &type metadata for String;
      *(void *)(v464 + 64) = v469;
      *(void *)(v464 + 32) = v466;
      *(void *)(v464 + 40) = v468;
      static String.localizedStringWithFormat(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v470 = [v425 mutableString];
      NSString v471 = String._bridgeToObjectiveC()();
      [v470 rangeOfString:v471 options:1];

      NSAttributedStringKey v517 = NSFontAttributeName;
      [v425 addAttribute:value:range:];

      swift_bridgeObjectRelease();
      id v472 = specialized static MOSuggestionTheme.Fonts.footnoteEmphFontSmallCaps()();
      id v473 = [v518 mainBundle];
      v571._object = v515;
      v474._uint64_t countAndFlagsBits = 16421;
      v474._object = (void *)0xE200000000000000;
      v475._uint64_t countAndFlagsBits = 0;
      v475._object = (void *)0xE000000000000000;
      v571._uint64_t countAndFlagsBits = 0xD000000000000010;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v474, (Swift::String_optional)0, (NSBundle)v473, v475, v571);

      uint64_t v476 = swift_allocObject();
      *(_OWORD *)(v476 + 16) = v523;
      CGPoint aBlock = v531;
      unint64_t v535 = v532;
      CharacterSet.init(charactersIn:)();
      uint64_t v477 = StringProtocol.trimmingCharacters(in:)();
      uint64_t v479 = v478;
      ((void (*)(char *, void *))v526)(v465, v529);
      id v480 = v524;
      *(void *)(v476 + 56) = &type metadata for String;
      *(void *)(v476 + 64) = v480;
      *(void *)(v476 + 32) = v477;
      *(void *)(v476 + 40) = v479;
      static String.localizedStringWithFormat(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v481 = [v425 mutableString];
      NSString v482 = String._bridgeToObjectiveC()();
      id v483 = [v481 rangeOfString:v482 options:1];
      uint64_t v485 = v484;

      os_log_type_t v48 = &selRef_collectionView_didSelectItemAtIndexPath_;
      [v425 addAttribute:v517 value:v472 range:v483];

      swift_bridgeObjectRelease();
      [v527 setAttributedText:v425];

LABEL_104:
      NSAttributedStringKey v26 = v516;
      id v4 = v521;
      id v14 = v520;
      goto LABEL_105;
    default:
      goto LABEL_106;
  }
}