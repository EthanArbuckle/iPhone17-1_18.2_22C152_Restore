uint64_t type metadata accessor for _UIFontPickerRecentsView(uint64_t a1)
{
  return sub_100004BF8(a1, (uint64_t *)&unk_1000A82E0);
}

uint64_t sub_100002158()
{
  return swift_initClassMetadata2();
}

char *sub_1000021A4()
{
  ObjectType = (objc_class *)swift_getObjectType();
  type metadata accessor for FontPickerRecentsView(0);
  uint64_t v2 = ((uint64_t (*)(void))__chkstk_darwin)();
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v2);
  v7 = (char *)&v23 - v6;
  __chkstk_darwin(v5);
  v9 = (char *)&v23 - v8;
  type metadata accessor for FontPickerRecentsViewState(0);
  uint64_t v10 = swift_allocObject();
  id v11 = v0;
  sub_100004D98();
  uint64_t v12 = swift_retain();
  sub_1000024C4(v12, (uint64_t)v9);

  sub_100009DA8((uint64_t)v9, (uint64_t)v7, type metadata accessor for FontPickerRecentsView);
  v13 = (char *)objc_allocWithZone(ObjectType);
  *(void *)&v13[qword_1000A82D8] = 0;
  sub_100009DA8((uint64_t)v7, (uint64_t)v4, type metadata accessor for FontPickerRecentsView);
  v14 = (char *)UIHostingController.init(rootView:)();
  sub_100009E10((uint64_t)v7, type metadata accessor for FontPickerRecentsView);
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  *(void *)&v14[qword_1000A82D8] = v10;
  swift_retain();
  v15 = v14;
  swift_release();
  result = (char *)[v15 view];
  if (result)
  {
    v17 = result;
    id v18 = [self clearColor];
    [v17 setBackgroundColor:v18];

    id v19 = [v15 traitCollection];
    id v20 = [v19 userInterfaceIdiom];

    swift_getKeyPath();
    swift_getKeyPath();
    id v24 = v20;
    swift_retain();
    static Published.subscript.setter();
    id v21 = [v15 traitCollection];
    id v22 = [v21 preferredContentSizeCategory];

    swift_getKeyPath();
    swift_getKeyPath();
    id v24 = v22;
    swift_retain();
    static Published.subscript.setter();
    swift_release();

    sub_100009E10((uint64_t)v9, type metadata accessor for FontPickerRecentsView);
    return v15;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000024C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v4 = (int *)type metadata accessor for FontPickerRecentsView(0);
  uint64_t v5 = (uint64_t *)(a2 + v4[5]);
  *uint64_t v5 = swift_getKeyPath();
  sub_10000435C(&qword_1000A8528);
  swift_storeEnumTagMultiPayload();
  uint64_t v6 = a2 + v4[6];
  sub_10000435C(&qword_1000A8780);
  State.init(wrappedValue:)();
  *(_OWORD *)uint64_t v6 = v25;
  *(void *)(v6 + 16) = v26;
  v7 = (_OWORD *)(a2 + v4[7]);
  State.init(wrappedValue:)();
  _OWORD *v7 = v25;
  *(void *)(a2 + v4[8]) = 0x4034000000000000;
  uint64_t v8 = self;
  id v9 = [v8 familyNames];
  uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v11 = *(void *)(v10 + 16);
  if (v11)
  {
    uint64_t v24 = a2;
    swift_bridgeObjectRetain();
    uint64_t v12 = v10 + 40;
    while (1)
    {
      swift_bridgeObjectRetain();
      NSString v13 = String._bridgeToObjectiveC()();
      id v14 = [v8 fontNamesForFamilyName:v13];

      uint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
      if (*(void *)(v15 + 16))
      {
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRelease();
        [v8 systemFontSize];
        double v17 = v16;
        NSString v18 = String._bridgeToObjectiveC()();
        id v19 = [v8 fontWithName:v18 size:v17];

        if (v19)
        {
          id v20 = [v19 fontDescriptor];

          if (v20)
          {
            id v21 = [objc_allocWithZone((Class)_UIFontPickerFontInfo) initWithFontDescriptor:v20];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();

            if (v21)
            {
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
              if (*(void *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              }
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
            }
            goto LABEL_5;
          }
        }
        swift_bridgeObjectRelease_n();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
LABEL_5:
      v12 += 16;
      if (!--v11)
      {
        swift_bridgeObjectRelease();
        a2 = v24;
        break;
      }
    }
  }
  uint64_t v22 = v4[9];
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a2 + v22) = &_swiftEmptyArrayStorage;
  *(void *)a2 = sub_1000090C8;
  *(void *)(a2 + 8) = a1;
  *(unsigned char *)(a2 + 16) = 0;
  return result;
}

char *sub_100002828()
{
  return sub_1000021A4();
}

id sub_10000284C(uint64_t a1)
{
  v5.receiver = v1;
  v5.super_class = (Class)swift_getObjectType();
  [super traitCollectionDidChange:a1];
  if (*(void *)&v1[qword_1000A82D8])
  {
    swift_retain();
    id v4 = [v1 traitCollection];
    [v4 preferredContentSizeCategory];

    swift_getKeyPath();
    swift_getKeyPath();
    return (id)static Published.subscript.setter();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100002924(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = a1;
  sub_10000284C((uint64_t)a3);
}

uint64_t sub_100002990()
{
  return 1;
}

uint64_t sub_100002998(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for FontPickerRecentsView(0);
  __chkstk_darwin(v3 - 8);
  id v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = (char *)objc_allocWithZone(v1);
  *(void *)&v6[qword_1000A82D8] = 0;
  sub_100009DA8(a1, (uint64_t)v5, type metadata accessor for FontPickerRecentsView);
  uint64_t v7 = UIHostingController.init(rootView:)();
  sub_100009E10(a1, type metadata accessor for FontPickerRecentsView);
  return v7;
}

void *sub_100002A60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FontPickerRecentsView(0);
  __chkstk_darwin(v4 - 8);
  id v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (char *)objc_allocWithZone(v2);
  *(void *)&v7[qword_1000A82D8] = 0;
  sub_100009DA8(a2, (uint64_t)v6, type metadata accessor for FontPickerRecentsView);
  uint64_t v8 = (void *)UIHostingController.init(coder:rootView:)();
  id v9 = v8;
  sub_100009E10(a2, type metadata accessor for FontPickerRecentsView);
  if (v8) {

  }
  return v8;
}

id sub_100002B48(char *a1, uint64_t a2, uint64_t a3)
{
  ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&a1[qword_1000A82D8] = 0;
  v7.receiver = a1;
  v7.super_class = ObjectType;
  return [super initWithCoder:a3];
}

uint64_t sub_100002B9C()
{
  return swift_release();
}

id sub_100002BAC()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return [super dealloc];
}

uint64_t sub_100002BE4()
{
  return swift_release();
}

uint64_t sub_100002BF4()
{
  return type metadata accessor for _UIFontPickerRecentsView(0);
}

void sub_100002BFC()
{
  if (*(void *)(v0 + qword_1000A82D8))
  {
    swift_retain();
    unint64_t v1 = swift_bridgeObjectRetain();
    sub_100008F00(v1);
    swift_bridgeObjectRelease();
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.setter();
    swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100002CB0(void *a1)
{
  sub_10000A3AC(0, &qword_1000A86E8);
  static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v2 = a1;
  sub_100002BFC();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100002D24(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  if (a3)
  {
    sub_10000A3AC(0, &qword_1000A86E8);
    id result = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  if (*(void *)(v3 + qword_1000A82D8))
  {
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    return static Published.subscript.setter();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100002DD8(void *a1, void (*a2)(void))
{
  if (a2)
  {
    id v3 = [a1 fontDescriptor];
    a2();
  }
}

uint64_t sub_100002E40(uint64_t a1, int a2, void *aBlock)
{
  uint64_t result = (uint64_t)_Block_copy(aBlock);
  uint64_t v5 = (uint64_t (*)())result;
  if (result)
  {
    uint64_t result = swift_allocObject();
    uint64_t v6 = result;
    *(void *)(result + 16) = v5;
    uint64_t v5 = sub_100008EEC;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(void *)(a1 + qword_1000A82D8);
  if (v7)
  {
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = v5;
    *(void *)(v8 + 24) = v6;
    id v9 = (void (**)(void *))(v7
                                      + OBJC_IVAR____TtC19FontPickerUIService26FontPickerRecentsViewState_onSelection);
    char *v9 = sub_100008EAC;
    v9[1] = (void (*)(void *))v8;
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100002F14(uint64_t result)
{
  if (*(void *)(result + qword_1000A82D8))
  {
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    return static Published.subscript.setter();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100002F98()
{
  uint64_t v1 = qword_1000A82D8;
  if (!*(void *)(v0 + qword_1000A82D8))
  {
    __break(1u);
    goto LABEL_6;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  uint64_t result = static Published.subscript.setter();
  if (!*(void *)(v0 + v1))
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  uint64_t result = static Published.subscript.setter();
  if (*(void *)(v0 + v1))
  {
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    return static Published.subscript.setter();
  }
LABEL_7:
  __break(1u);
  return result;
}

void sub_1000030D4(void *a1)
{
  id v1 = a1;
  sub_100002F98();
}

uint64_t sub_100003144()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1000031B8@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_100003238()
{
  return static Published.subscript.setter();
}

uint64_t sub_1000032B4()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_100003328@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1000033A8()
{
  return static Published.subscript.setter();
}

uint64_t sub_100003424()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_100003498@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_100003518(void **a1)
{
  uint64_t v1 = *a1;
  swift_getKeyPath();
  swift_getKeyPath();
  id v2 = v1;
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t sub_100003590()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_100003604@<X0>(unsigned char *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_100003684()
{
  return static Published.subscript.setter();
}

double sub_1000036F8()
{
  return sub_100003784();
}

double sub_10000370C@<D0>(double *a1@<X8>)
{
  return sub_100003804(a1);
}

uint64_t sub_100003720()
{
  return sub_100003894();
}

double sub_100003734()
{
  return sub_100003784();
}

double sub_100003748@<D0>(double *a1@<X8>)
{
  return sub_100003804(a1);
}

uint64_t sub_10000375C()
{
  return sub_100003894();
}

double sub_100003770()
{
  return sub_100003784();
}

double sub_100003784()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

double sub_1000037F0@<D0>(double *a1@<X8>)
{
  return sub_100003804(a1);
}

double sub_100003804@<D0>(double *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  double result = v3;
  *a1 = v3;
  return result;
}

uint64_t sub_100003880()
{
  return sub_100003894();
}

uint64_t sub_100003894()
{
  return static Published.subscript.setter();
}

uint64_t sub_10000390C()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_100003980@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_100003A00()
{
  return static Published.subscript.setter();
}

uint64_t sub_100003A78()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC19FontPickerUIService26FontPickerRecentsViewState__fontsInfo;
  uint64_t v2 = sub_10000435C(&qword_1000A8750);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC19FontPickerUIService26FontPickerRecentsViewState__selectedFontsInfo;
  uint64_t v4 = sub_10000435C(&qword_1000A8758);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = v0 + OBJC_IVAR____TtC19FontPickerUIService26FontPickerRecentsViewState__contentSize;
  uint64_t v6 = sub_10000435C(&qword_1000A8760);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = v0 + OBJC_IVAR____TtC19FontPickerUIService26FontPickerRecentsViewState__adjustForIndexBar;
  uint64_t v8 = sub_10000435C(&qword_1000A8768);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = v0 + OBJC_IVAR____TtC19FontPickerUIService26FontPickerRecentsViewState__leadingMargin;
  uint64_t v10 = sub_10000435C(&qword_1000A8770);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);
  v11(v9, v10);
  v11(v0 + OBJC_IVAR____TtC19FontPickerUIService26FontPickerRecentsViewState__trailingMargin, v10);
  v11(v0 + OBJC_IVAR____TtC19FontPickerUIService26FontPickerRecentsViewState__headerMargin, v10);
  uint64_t v12 = v0 + OBJC_IVAR____TtC19FontPickerUIService26FontPickerRecentsViewState__idiom;
  uint64_t v13 = sub_10000435C(&qword_1000A8778);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
  swift_release();
  uint64_t v14 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v15 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v14, v15);
}

uint64_t sub_100003CE4()
{
  return type metadata accessor for FontPickerRecentsViewState(0);
}

uint64_t type metadata accessor for FontPickerRecentsViewState(uint64_t a1)
{
  return sub_100004BF8(a1, (uint64_t *)&unk_1000A8398);
}

void sub_100003D0C()
{
  sub_100003FE4(319, &qword_1000A83A8, &qword_1000A83B0);
  if (v0 <= 0x3F)
  {
    sub_100003FE4(319, &qword_1000A83B8, &qword_1000A83C0);
    if (v1 <= 0x3F)
    {
      sub_10000405C(319, &qword_1000A83C8, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Published);
      if (v2 <= 0x3F)
      {
        sub_100009470(319, &qword_1000A83D0, (uint64_t)&type metadata for Bool, (uint64_t (*)(void, uint64_t))&type metadata accessor for Published);
        if (v3 <= 0x3F)
        {
          sub_100009470(319, &qword_1000A83D8, (uint64_t)&type metadata for CGFloat, (uint64_t (*)(void, uint64_t))&type metadata accessor for Published);
          if (v4 <= 0x3F)
          {
            sub_10000405C(319, (unint64_t *)&unk_1000A83E0, (uint64_t (*)(uint64_t))type metadata accessor for UIUserInterfaceIdiom, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Published);
            if (v5 <= 0x3F) {
              swift_updateClassMetadata2();
            }
          }
        }
      }
    }
  }
}

uint64_t sub_100003F9C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

void sub_100003FE4(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  if (!*a2)
  {
    sub_100003F9C(a3);
    unint64_t v4 = type metadata accessor for Published();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for UIContentSizeCategory(uint64_t a1)
{
}

void sub_10000405C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for UIUserInterfaceIdiom(uint64_t a1)
{
}

void type metadata accessor for Key(uint64_t a1)
{
}

__n128 sub_100004114(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_100004120(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_100004140(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
}

void type metadata accessor for ComponentKey(uint64_t a1)
{
}

uint64_t sub_1000041BC(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *(void *)a1 = *a2;
    a1 = v14 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    char v9 = *((unsigned char *)a2 + 16);
    sub_100004354();
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    *(unsigned char *)(a1 + 16) = v9;
    uint64_t v10 = a3[5];
    uint64_t v11 = (void *)(a1 + v10);
    uint64_t v12 = (uint64_t *)((char *)a2 + v10);
    sub_10000435C(&qword_1000A8528);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = type metadata accessor for Font.Context();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    }
    else
    {
      *uint64_t v11 = *v12;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = a3[6];
    uint64_t v16 = a3[7];
    double v17 = (void *)(a1 + v15);
    NSString v18 = (uint64_t *)((char *)a2 + v15);
    uint64_t v19 = v18[1];
    void *v17 = *v18;
    v17[1] = v19;
    v17[2] = v18[2];
    id v20 = (void *)(a1 + v16);
    id v21 = (uint64_t *)((char *)a2 + v16);
    uint64_t v22 = v21[1];
    *id v20 = *v21;
    v20[1] = v22;
    uint64_t v23 = a3[9];
    *(void *)(a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    *(void *)(a1 + v23) = *(uint64_t *)((char *)a2 + v23);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100004354()
{
  return swift_retain();
}

uint64_t sub_10000435C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_1000043A0(uint64_t a1, uint64_t a2)
{
  sub_100004488();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  sub_10000435C(&qword_1000A8528);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for Font.Context();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100004488()
{
  return swift_release();
}

uint64_t sub_100004490(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  char v8 = *((unsigned char *)a2 + 16);
  sub_100004354();
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  uint64_t v9 = a3[5];
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (uint64_t *)((char *)a2 + v9);
  sub_10000435C(&qword_1000A8528);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = type metadata accessor for Font.Context();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  }
  else
  {
    *uint64_t v10 = *v11;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v13 = a3[6];
  uint64_t v14 = a3[7];
  uint64_t v15 = (void *)(a1 + v13);
  uint64_t v16 = (uint64_t *)((char *)a2 + v13);
  uint64_t v17 = v16[1];
  void *v15 = *v16;
  v15[1] = v17;
  v15[2] = v16[2];
  NSString v18 = (void *)(a1 + v14);
  uint64_t v19 = (uint64_t *)((char *)a2 + v14);
  uint64_t v20 = v19[1];
  *NSString v18 = *v19;
  v18[1] = v20;
  uint64_t v21 = a3[9];
  *(void *)(a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
  *(void *)(a1 + v21) = *(uint64_t *)((char *)a2 + v21);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1000045D8(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  char v8 = *((unsigned char *)a2 + 16);
  sub_100004354();
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  sub_100004488();
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v9 = a3[5];
    uint64_t v10 = (void *)(a1 + v9);
    uint64_t v11 = (uint64_t *)((char *)a2 + v9);
    sub_100009ED4(a1 + v9, &qword_1000A8528);
    sub_10000435C(&qword_1000A8528);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = type metadata accessor for Font.Context();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      *uint64_t v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v13 = a3[6];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (uint64_t)a2 + v13;
  void *v14 = *(uint64_t *)((char *)a2 + v13);
  v14[1] = *(uint64_t *)((char *)a2 + v13 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14[2] = *(void *)(v15 + 16);
  swift_retain();
  swift_release();
  uint64_t v16 = a3[7];
  uint64_t v17 = (void *)(a1 + v16);
  NSString v18 = (uint64_t *)((char *)a2 + v16);
  void *v17 = *v18;
  v17[1] = v18[1];
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
  *(void *)(a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100004780(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = a3[5];
  uint64_t v7 = (void *)(a1 + v6);
  char v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_10000435C(&qword_1000A8528);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for Font.Context();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  uint64_t v11 = a3[6];
  uint64_t v12 = a3[7];
  uint64_t v13 = a1 + v11;
  uint64_t v14 = (long long *)(a2 + v11);
  long long v15 = *v14;
  *(void *)(v13 + 16) = *((void *)v14 + 2);
  *(_OWORD *)uint64_t v13 = v15;
  *(_OWORD *)(a1 + v12) = *(_OWORD *)(a2 + v12);
  uint64_t v16 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(void *)(a1 + v16) = *(void *)(a2 + v16);
  return a1;
}

uint64_t sub_1000048A4(uint64_t a1, uint64_t a2, int *a3)
{
  char v6 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v6;
  sub_100004488();
  if (a1 != a2)
  {
    uint64_t v7 = a3[5];
    char v8 = (void *)(a1 + v7);
    uint64_t v9 = (const void *)(a2 + v7);
    sub_100009ED4(a1 + v7, &qword_1000A8528);
    uint64_t v10 = sub_10000435C(&qword_1000A8528);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = type metadata accessor for Font.Context();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
    }
  }
  uint64_t v12 = a3[6];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = a2 + v12;
  uint64_t v15 = *(void *)(a2 + v12 + 8);
  void *v13 = *(void *)(a2 + v12);
  v13[1] = v15;
  swift_bridgeObjectRelease();
  v13[2] = *(void *)(v14 + 16);
  swift_release();
  uint64_t v16 = a3[7];
  uint64_t v17 = (void *)(a1 + v16);
  NSString v18 = (void *)(a2 + v16);
  void *v17 = *v18;
  v17[1] = v18[1];
  swift_release();
  uint64_t v19 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(void *)(a1 + v19) = *(void *)(a2 + v19);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100004A24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100004A38);
}

uint64_t sub_100004A38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000435C(&qword_1000A8530);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 36));
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
}

uint64_t sub_100004B00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100004B14);
}

uint64_t sub_100004B14(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_10000435C(&qword_1000A8530);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 36)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for FontPickerRecentsView(uint64_t a1)
{
  return sub_100004BF8(a1, (uint64_t *)&unk_1000A8590);
}

uint64_t sub_100004BF8(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100004C30()
{
  sub_10000405C(319, (unint64_t *)&qword_1000A85A0, (uint64_t (*)(uint64_t))&type metadata accessor for Font.Context, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for ComponentSize(uint64_t a1)
{
}

uint64_t sub_100004D50()
{
  return sub_100008430(&qword_1000A85E8, type metadata accessor for ComponentSize);
}

uint64_t sub_100004D98()
{
  uint64_t v1 = sub_10000435C(&qword_1000A8778);
  uint64_t v43 = *(void *)(v1 - 8);
  uint64_t v44 = v1;
  __chkstk_darwin();
  v42 = (char *)&v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10000435C(&qword_1000A8770);
  uint64_t v40 = *(void *)(v3 - 8);
  uint64_t v41 = v3;
  __chkstk_darwin();
  uint64_t v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000435C(&qword_1000A8768);
  uint64_t v38 = *(void *)(v6 - 8);
  uint64_t v39 = v6;
  __chkstk_darwin();
  v37 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000435C(&qword_1000A8760);
  uint64_t v35 = *(void *)(v8 - 8);
  uint64_t v36 = v8;
  __chkstk_darwin();
  uint64_t v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000435C(&qword_1000A8758);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000435C(&qword_1000A8750);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin();
  NSString v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = v0 + OBJC_IVAR____TtC19FontPickerUIService26FontPickerRecentsViewState__fontsInfo;
  uint64_t v45 = (uint64_t)&_swiftEmptyArrayStorage;
  sub_10000435C(&qword_1000A83B0);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v19, v18, v15);
  uint64_t v20 = v0 + OBJC_IVAR____TtC19FontPickerUIService26FontPickerRecentsViewState__selectedFontsInfo;
  uint64_t v45 = 0;
  sub_10000435C(&qword_1000A83C0);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v20, v14, v11);
  uint64_t v21 = v0 + OBJC_IVAR____TtC19FontPickerUIService26FontPickerRecentsViewState__contentSize;
  uint64_t v45 = (uint64_t)UIContentSizeCategoryUnspecified;
  type metadata accessor for UIContentSizeCategory(0);
  uint64_t v22 = UIContentSizeCategoryUnspecified;
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v35 + 32))(v21, v10, v36);
  uint64_t v23 = v0 + OBJC_IVAR____TtC19FontPickerUIService26FontPickerRecentsViewState__adjustForIndexBar;
  LOBYTE(v45) = 0;
  uint64_t v24 = v37;
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v38 + 32))(v23, v24, v39);
  uint64_t v25 = v0 + OBJC_IVAR____TtC19FontPickerUIService26FontPickerRecentsViewState__leadingMargin;
  uint64_t v45 = 0;
  Published.init(initialValue:)();
  uint64_t v26 = v41;
  v27 = *(void (**)(uint64_t, char *, uint64_t))(v40 + 32);
  v27(v25, v5, v41);
  uint64_t v28 = v0 + OBJC_IVAR____TtC19FontPickerUIService26FontPickerRecentsViewState__trailingMargin;
  uint64_t v45 = 0;
  Published.init(initialValue:)();
  v27(v28, v5, v26);
  uint64_t v29 = v0 + OBJC_IVAR____TtC19FontPickerUIService26FontPickerRecentsViewState__headerMargin;
  uint64_t v45 = 0;
  Published.init(initialValue:)();
  v27(v29, v5, v26);
  uint64_t v30 = v0 + OBJC_IVAR____TtC19FontPickerUIService26FontPickerRecentsViewState__idiom;
  uint64_t v45 = -1;
  type metadata accessor for UIUserInterfaceIdiom(0);
  v31 = v42;
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v43 + 32))(v30, v31, v44);
  v32 = (void *)(v0 + OBJC_IVAR____TtC19FontPickerUIService26FontPickerRecentsViewState_onSelection);
  void *v32 = nullsub_1;
  v32[1] = 0;
  return v0;
}

uint64_t sub_100005318@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100005368@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v82 = type metadata accessor for ScrollIndicatorVisibility();
  uint64_t v81 = *(void *)(v82 - 8);
  __chkstk_darwin(v82);
  v97 = (char *)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = sub_10000435C(&qword_1000A8668);
  uint64_t v78 = *(void *)(v79 - 8);
  __chkstk_darwin(v79);
  uint64_t v6 = (char *)&v74 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = sub_10000435C(&qword_1000A8670);
  uint64_t v80 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  uint64_t v8 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = sub_10000435C(&qword_1000A8678);
  uint64_t v85 = *(void *)(v77 - 8);
  __chkstk_darwin(v77);
  v84 = (char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = sub_10000435C(&qword_1000A8680);
  uint64_t v89 = *(void *)(v91 - 8);
  __chkstk_darwin(v91);
  v87 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = sub_10000435C(&qword_1000A8688);
  __chkstk_darwin(v86);
  v93 = (char *)&v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = sub_10000435C(&qword_1000A8690);
  __chkstk_darwin(v92);
  uint64_t v96 = (uint64_t)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000435C(&qword_1000A8698);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v95 = (uint64_t)&v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v94 = (uint64_t)&v74 - v17;
  uint64_t v18 = type metadata accessor for FontPickerRecentsViewState(0);
  uint64_t v19 = sub_100008430(&qword_1000A86A0, (void (*)(uint64_t))type metadata accessor for FontPickerRecentsViewState);
  uint64_t v90 = v18;
  uint64_t v88 = v19;
  StateObject.wrappedValue.getter();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  if (v100 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v20 = *(void *)((v100 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  uint64_t v21 = v97;
  if (v20)
  {
    uint64_t v74 = v14;
    uint64_t v75 = v13;
    uint64_t v76 = a1;
    uint64_t v22 = static Axis.Set.horizontal.getter();
    __chkstk_darwin(v22);
    *(&v74 - 2) = v2;
    sub_10000435C(&qword_1000A86A8);
    uint64_t v23 = sub_100003F9C(&qword_1000A86B0);
    uint64_t v24 = sub_10000A368(&qword_1000A86B8, &qword_1000A86B0);
    unint64_t v100 = v23;
    uint64_t v101 = v24;
    swift_getOpaqueTypeConformance2();
    ScrollView.init(_:showsIndicators:content:)();
    static ScrollIndicatorVisibility.never.getter();
    unsigned __int8 v25 = static Axis.Set.vertical.getter();
    unsigned __int8 v26 = static Axis.Set.horizontal.getter();
    Axis.Set.init(rawValue:)();
    Axis.Set.init(rawValue:)();
    if (Axis.Set.init(rawValue:)() != v25) {
      Axis.Set.init(rawValue:)();
    }
    Axis.Set.init(rawValue:)();
    if (Axis.Set.init(rawValue:)() != v26) {
      Axis.Set.init(rawValue:)();
    }
    uint64_t v14 = v74;
    uint64_t v27 = v77;
    uint64_t v28 = sub_10000A368(&qword_1000A86C0, &qword_1000A8668);
    uint64_t v29 = v79;
    View.scrollIndicators(_:axes:)();
    (*(void (**)(char *, uint64_t))(v81 + 8))(v21, v82);
    (*(void (**)(char *, uint64_t))(v78 + 8))(v6, v29);
    unint64_t v100 = v29;
    uint64_t v101 = v28;
    uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    v31 = v84;
    uint64_t v32 = v83;
    View.scrollClipDisabled(_:)();
    (*(void (**)(char *, uint64_t))(v80 + 8))(v8, v32);
    v33 = (long long *)(v2 + *(int *)(type metadata accessor for FontPickerRecentsView(0) + 24));
    uint64_t v34 = *((void *)v33 + 2);
    long long v98 = *v33;
    uint64_t v99 = v34;
    sub_10000435C(&qword_1000A86C8);
    State.projectedValue.getter();
    *(void *)&long long v98 = v32;
    *((void *)&v98 + 1) = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2();
    uint64_t v35 = v87;
    View.scrollPosition<A>(id:anchor:)();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v85 + 8))(v31, v27);
    char v36 = static Edge.Set.leading.getter();
    StateObject.wrappedValue.getter();
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    EdgeInsets.init(_all:)();
    uint64_t v38 = v37;
    uint64_t v40 = v39;
    uint64_t v42 = v41;
    uint64_t v44 = v43;
    uint64_t v45 = v89;
    uint64_t v46 = (uint64_t)v93;
    uint64_t v47 = v91;
    (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v93, v35, v91);
    uint64_t v48 = v46 + *(int *)(v86 + 36);
    *(unsigned char *)uint64_t v48 = v36;
    *(void *)(v48 + 8) = v38;
    *(void *)(v48 + 16) = v40;
    *(void *)(v48 + 24) = v42;
    *(void *)(v48 + 32) = v44;
    *(unsigned char *)(v48 + 40) = 0;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v35, v47);
    char v49 = static Edge.Set.trailing.getter();
    StateObject.wrappedValue.getter();
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    EdgeInsets.init(_all:)();
    uint64_t v51 = v50;
    uint64_t v53 = v52;
    uint64_t v55 = v54;
    uint64_t v57 = v56;
    uint64_t v58 = v96;
    sub_100009E70(v46, v96, &qword_1000A8688);
    uint64_t v59 = v58 + *(int *)(v92 + 36);
    *(unsigned char *)uint64_t v59 = v49;
    *(void *)(v59 + 8) = v51;
    *(void *)(v59 + 16) = v53;
    *(void *)(v59 + 24) = v55;
    *(void *)(v59 + 32) = v57;
    *(unsigned char *)(v59 + 40) = 0;
    sub_100009ED4(v46, &qword_1000A8688);
    char v60 = static Edge.Set.bottom.getter();
    StateObject.wrappedValue.getter();
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    EdgeInsets.init(_all:)();
    uint64_t v62 = v61;
    uint64_t v64 = v63;
    uint64_t v66 = v65;
    uint64_t v68 = v67;
    uint64_t v69 = v95;
    sub_100009E70(v58, v95, &qword_1000A8690);
    uint64_t v13 = v75;
    uint64_t v70 = v69 + *(int *)(v75 + 36);
    *(unsigned char *)uint64_t v70 = v60;
    *(void *)(v70 + 8) = v62;
    *(void *)(v70 + 16) = v64;
    *(void *)(v70 + 24) = v66;
    *(void *)(v70 + 32) = v68;
    *(unsigned char *)(v70 + 40) = 0;
    sub_100009ED4(v58, &qword_1000A8690);
    uint64_t v71 = v94;
    sub_100009F30(v69, v94, &qword_1000A8698);
    a1 = v76;
    sub_100009F30(v71, v76, &qword_1000A8698);
    uint64_t v72 = 0;
  }
  else
  {
    uint64_t v72 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(a1, v72, 1, v13);
}

uint64_t sub_100005EF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v14[2] = a2;
  uint64_t v3 = type metadata accessor for FontPickerRecentsView(0);
  uint64_t v4 = v3 - 8;
  uint64_t v5 = *(void *)(v3 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v3);
  uint64_t v7 = sub_10000435C(&qword_1000A86B0);
  __chkstk_darwin(v7);
  uint64_t v9 = (double *)((char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  double v10 = *(double *)(a1 + *(int *)(v4 + 40)) * 0.5;
  *(void *)uint64_t v9 = static VerticalAlignment.center.getter();
  v9[1] = v10;
  *((unsigned char *)v9 + 16) = 0;
  v14[1] = (char *)v9 + *(int *)(sub_10000435C(&qword_1000A86D0) + 44);
  type metadata accessor for FontPickerRecentsViewState(0);
  sub_100008430(&qword_1000A86A0, (void (*)(uint64_t))type metadata accessor for FontPickerRecentsViewState);
  StateObject.wrappedValue.getter();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  swift_getKeyPath();
  sub_100009DA8(a1, (uint64_t)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for FontPickerRecentsView);
  unint64_t v11 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v12 = swift_allocObject();
  sub_100009A2C((uint64_t)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v12 + v11, type metadata accessor for FontPickerRecentsView);
  sub_10000435C(&qword_1000A83B0);
  sub_10000A368(&qword_1000A86D8, &qword_1000A83B0);
  sub_100008C14();
  ForEach<>.init(_:id:content:)();
  sub_10000A368(&qword_1000A86B8, &qword_1000A86B0);
  View.scrollTargetLayout(isEnabled:)();
  return sub_100009ED4((uint64_t)v9, &qword_1000A86B0);
}

void sub_100006244(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = [*a1 familyName];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  *a2 = v4;
  a2[1] = v6;
}

id sub_10000629C@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for FontPickerRecentsView(0);
  uint64_t v23 = *(void *)(v6 - 8);
  uint64_t v7 = *(void *)(v23 + 64);
  __chkstk_darwin(v6);
  uint64_t v24 = (uint64_t)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *a1;
  type metadata accessor for FontPickerRecentsViewState(0);
  sub_100008430(&qword_1000A86A0, (void (*)(uint64_t))type metadata accessor for FontPickerRecentsViewState);
  StateObject.wrappedValue.getter();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  if ((void)v27)
  {
    int v22 = sub_1000067D4((uint64_t)v8, v27, (uint64_t)&qword_1000A86E8);
    swift_bridgeObjectRelease();
  }
  else
  {
    int v22 = 0;
  }
  uint64_t v9 = a2 + *(int *)(v6 + 24);
  uint64_t v10 = *(void *)(v9 + 16);
  long long v25 = *(_OWORD *)v9;
  uint64_t v26 = v10;
  sub_10000435C(&qword_1000A86C8);
  State.projectedValue.getter();
  long long v21 = v27;
  uint64_t v11 = v28;
  uint64_t v20 = v29;
  id v19 = v8;
  StateObject.wrappedValue.getter();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  BOOL v12 = (void)v27 == 6;
  uint64_t v13 = v24;
  sub_100009DA8(a2, v24, type metadata accessor for FontPickerRecentsView);
  unint64_t v14 = (*(unsigned __int8 *)(v23 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
  uint64_t v15 = swift_allocObject();
  sub_100009A2C(v13, v15 + v14, type metadata accessor for FontPickerRecentsView);
  uint64_t v16 = v19;
  uint64_t v17 = v20;
  *(void *)(v15 + ((v7 + v14 + 7) & 0xFFFFFFFFFFFFFFF8)) = v19;
  *(_OWORD *)a3 = v21;
  *(void *)(a3 + 16) = v11;
  *(void *)(a3 + 24) = v17;
  *(void *)(a3 + 32) = v16;
  *(unsigned char *)(a3 + 40) = v22 & 1;
  *(unsigned char *)(a3 + 41) = v12;
  *(void *)(a3 + 48) = sub_100008DE0;
  *(void *)(a3 + 56) = v15;

  return v16;
}

uint64_t sub_1000065E0(char a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = 0;
    while (2)
    {
      uint64_t v6 = a2 + v5++;
      unint64_t v7 = 0xE400000000000000;
      uint64_t v8 = 1668508004;
      switch(*(unsigned char *)(v6 + 32))
      {
        case 1:
          unint64_t v7 = 0xE600000000000000;
          uint64_t v8 = 0x6E6568707968;
          break;
        case 2:
          unint64_t v7 = 0xE700000000000000;
          uint64_t v8 = 0x6C616D69636564;
          break;
        case 3:
          unint64_t v7 = 0xE500000000000000;
          uint64_t v8 = 0x726568746FLL;
          break;
        default:
          break;
      }
      unint64_t v9 = 0xE400000000000000;
      uint64_t v10 = 1668508004;
      switch(a1)
      {
        case 1:
          unint64_t v9 = 0xE600000000000000;
          if (v8 == 0x6E6568707968) {
            goto LABEL_12;
          }
          goto LABEL_13;
        case 2:
          unint64_t v9 = 0xE700000000000000;
          uint64_t v10 = 0x6C616D69636564;
          goto LABEL_11;
        case 3:
          unint64_t v9 = 0xE500000000000000;
          if (v8 != 0x726568746FLL) {
            goto LABEL_13;
          }
          goto LABEL_12;
        default:
LABEL_11:
          if (v8 != v10) {
            goto LABEL_13;
          }
LABEL_12:
          if (v7 == v9)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            return 1;
          }
LABEL_13:
          char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v11)
          {
            swift_bridgeObjectRelease();
            return 1;
          }
          if (v2 != v5) {
            continue;
          }
          swift_bridgeObjectRelease();
          break;
      }
      break;
    }
  }
  return 0;
}

uint64_t sub_1000067C0(uint64_t a1, unint64_t a2)
{
  return sub_1000067D4(a1, a2, (uint64_t)&unk_1000A8930);
}

uint64_t sub_1000067D4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a2 >> 62) {
    goto LABEL_20;
  }
  uint64_t v5 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v5; uint64_t v5 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v6 = a2 & 0xC000000000000001;
    if ((a2 & 0xC000000000000001) == 0)
    {
      id v7 = *(id *)(a2 + 32);
      goto LABEL_5;
    }
    while (1)
    {
      id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_5:
      uint64_t v8 = v7;
      sub_10000A3AC(0, (unint64_t *)a3);
      a3 = static NSObject.== infix(_:_:)();

      if (a3)
      {
LABEL_6:
        swift_bridgeObjectRelease();
        return 1;
      }
      if (v5 == 1) {
        goto LABEL_18;
      }
      if (v6) {
        break;
      }
      unint64_t v6 = 5;
      while (1)
      {
        unint64_t v12 = v6 - 3;
        if (__OFADD__(v6 - 4, 1)) {
          break;
        }
        a3 = (uint64_t)*(id *)(a2 + 8 * v6);
        char v13 = static NSObject.== infix(_:_:)();

        if (v13) {
          goto LABEL_6;
        }
        ++v6;
        if (v12 == v5) {
          goto LABEL_18;
        }
      }
      __break(1u);
    }
    a3 = 1;
    while (1)
    {
      specialized _ArrayBuffer._getElementSlowPath(_:)();
      uint64_t v10 = a3 + 1;
      if (__OFADD__(a3, 1)) {
        break;
      }
      char v11 = static NSObject.== infix(_:_:)();
      swift_unknownObjectRelease();
      if (v11) {
        goto LABEL_6;
      }
      ++a3;
      if (v10 == v5) {
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_20:
    swift_bridgeObjectRetain();
  }
LABEL_18:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_10000695C(uint64_t a1, uint64_t a2)
{
  type metadata accessor for FontPickerRecentsViewState(0);
  sub_100008430(&qword_1000A86A0, (void (*)(uint64_t))type metadata accessor for FontPickerRecentsViewState);
  id v3 = *(void (**)(uint64_t))(StateObject.wrappedValue.getter()
                                      + OBJC_IVAR____TtC19FontPickerUIService26FontPickerRecentsViewState_onSelection);
  swift_retain();
  swift_release();
  v3(a2);

  return swift_release();
}

uint64_t sub_100006A34@<X0>(uint64_t a1@<X8>)
{
  uint64_t v25 = a1;
  uint64_t v24 = sub_10000435C(&qword_1000A87C0);
  __chkstk_darwin(v24);
  uint64_t v26 = (uint64_t)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for AutomaticHoverEffect();
  uint64_t v23 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000435C(&qword_1000A87C8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000435C(&qword_1000A87D0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  char v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v21 - v14;
  char v16 = *(unsigned char *)(v1 + 41);
  sub_100006EA4((uint64_t)v8);
  if (v16)
  {
    static CustomHoverEffect<>.automatic.getter();
    uint64_t v22 = sub_100009590(&qword_1000A87D8, &qword_1000A87C8, (void (*)(void))sub_100009788);
    uint64_t v20 = sub_100008430(&qword_1000A8810, (void (*)(uint64_t))&type metadata accessor for AutomaticHoverEffect);
    View.hoverEffect<A>(_:isEnabled:)();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v5, v3);
    sub_100009ED4((uint64_t)v8, &qword_1000A87C8);
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v15, v13, v9);
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 16))(v26, v15, v9);
    swift_storeEnumTagMultiPayload();
    uint64_t v27 = v6;
    uint64_t v28 = v3;
    uint64_t v29 = v22;
    uint64_t v30 = v20;
    swift_getOpaqueTypeConformance2();
    _ConditionalContent<>.init(storage:)();
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v15, v9);
  }
  else
  {
    sub_100009E70((uint64_t)v8, v26, &qword_1000A87C8);
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = sub_100009590(&qword_1000A87D8, &qword_1000A87C8, (void (*)(void))sub_100009788);
    uint64_t v18 = sub_100008430(&qword_1000A8810, (void (*)(uint64_t))&type metadata accessor for AutomaticHoverEffect);
    uint64_t v27 = v6;
    uint64_t v28 = v3;
    uint64_t v29 = v17;
    uint64_t v30 = v18;
    swift_getOpaqueTypeConformance2();
    _ConditionalContent<>.init(storage:)();
    return sub_100009ED4((uint64_t)v8, &qword_1000A87C8);
  }
}

uint64_t sub_100006EA4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v35 = a1;
  uint64_t v3 = sub_10000435C(&qword_1000A87F0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000435C(&qword_1000A8818);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v33 = v7;
  uint64_t v34 = v8;
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000435C(&qword_1000A87E8);
  __chkstk_darwin(v11 - 8);
  char v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (_OWORD *)swift_allocObject();
  long long v15 = *(_OWORD *)(v2 + 16);
  v14[1] = *(_OWORD *)v2;
  v14[2] = v15;
  long long v16 = *(_OWORD *)(v2 + 48);
  void v14[3] = *(_OWORD *)(v2 + 32);
  v14[4] = v16;
  uint64_t v36 = v2;
  sub_100009964(v2);
  type metadata accessor for FontPreview();
  sub_100008430((unint64_t *)&unk_1000A8820, (void (*)(uint64_t))type metadata accessor for FontPreview);
  Button.init(action:label:)();
  char v17 = *(unsigned char *)(v2 + 41);
  LOBYTE(v37) = *(unsigned char *)(v2 + 40);
  BYTE1(v37) = v17;
  uint64_t v18 = sub_10000A368(&qword_1000A87F8, &qword_1000A87F0);
  unint64_t v19 = sub_1000098A8();
  View.buttonStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  id v20 = [*(id *)(v2 + 32) localizedFamilyName];
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v23 = v22;

  uint64_t v37 = v21;
  uint64_t v38 = v23;
  sub_1000099C8();
  uint64_t v24 = Text.init<A>(_:)();
  uint64_t v26 = v25;
  uint64_t v37 = v3;
  uint64_t v38 = &type metadata for FontPickerRecentsView.FontTile.FontTileButtonStyle;
  char v28 = v27 & 1;
  uint64_t v39 = v18;
  unint64_t v40 = v19;
  swift_getOpaqueTypeConformance2();
  uint64_t v29 = v33;
  View.accessibility(label:)();
  sub_100009A1C(v24, v26, v28);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v10, v29);
  uint64_t v30 = v35;
  sub_100009E70((uint64_t)v13, v35, &qword_1000A87E8);
  *(_WORD *)(v30 + *(int *)(sub_10000435C(&qword_1000A87C8) + 36)) = 256;
  return sub_100009ED4((uint64_t)v13, &qword_1000A87E8);
}

uint64_t sub_10000727C(uint64_t a1)
{
  static Animation.spring(response:dampingFraction:blendDuration:)();
  Animation.speed(_:)();
  swift_release();
  withAnimation<A>(_:_:)();
  uint64_t v2 = swift_release();
  return (*(uint64_t (**)(uint64_t))(a1 + 48))(v2);
}

uint64_t sub_10000731C(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) familyName];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  sub_10000435C(&qword_1000A8830);
  return Binding.wrappedValue.setter();
}

id sub_1000073B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for FontPreview();
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void **)(a1 + 32);
  *(void *)uint64_t v7 = v12;
  *(_OWORD *)(v7 + 8) = xmmword_100082D70;
  uint64_t v8 = (uint64_t *)&v7[*(int *)(v5 + 36)];
  *uint64_t v8 = swift_getKeyPath();
  sub_10000435C(&qword_1000A8528);
  swift_storeEnumTagMultiPayload();
  sub_100009A2C((uint64_t)v7, a2, (uint64_t (*)(void))type metadata accessor for FontPreview);
  uint64_t v9 = v12;

  return v9;
}

uint64_t sub_1000074A8@<X0>(int a1@<W1>, uint64_t a2@<X8>)
{
  int v65 = a1;
  uint64_t v62 = a2;
  uint64_t v60 = type metadata accessor for RoundedRectangle();
  uint64_t v2 = __chkstk_darwin(v60);
  uint64_t v61 = (double *)((char *)v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v2);
  uint64_t v51 = (double *)((char *)v49 - v4);
  uint64_t v50 = type metadata accessor for Material();
  __chkstk_darwin(v50);
  v49[1] = (char *)v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = sub_10000435C(&qword_1000A8848);
  __chkstk_darwin(v64);
  uint64_t v7 = (char *)v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ButtonStyleConfiguration.Label();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000435C(&qword_1000A8850);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  long long v15 = (char *)v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = sub_10000435C(&qword_1000A8858);
  __chkstk_darwin(v63);
  char v17 = (char *)v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = sub_10000435C(&qword_1000A8860);
  __chkstk_darwin(v52);
  uint64_t v56 = (uint64_t)v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = sub_10000435C(&qword_1000A8868);
  __chkstk_darwin(v53);
  uint64_t v57 = (char *)v49 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = sub_10000435C(&qword_1000A8870);
  __chkstk_darwin(v54);
  uint64_t v59 = (char *)v49 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = sub_10000435C(&qword_1000A8878);
  __chkstk_darwin(v55);
  uint64_t v58 = (char *)v49 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  ButtonStyleConfiguration.label.getter();
  uint64_t v22 = enum case for DynamicTypeSize.accessibility3(_:);
  uint64_t v23 = type metadata accessor for DynamicTypeSize();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 104))(v7, v22, v23);
  sub_100008430((unint64_t *)&unk_1000A8880, (void (*)(uint64_t))&type metadata accessor for DynamicTypeSize);
  uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
  if (result)
  {
    sub_100008430(&qword_1000AAE80, (void (*)(uint64_t))&type metadata accessor for ButtonStyleConfiguration.Label);
    sub_10000A368(&qword_1000A8890, &qword_1000A8848);
    View.dynamicTypeSize<A>(_:)();
    sub_100009ED4((uint64_t)v7, &qword_1000A8848);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    int v25 = static HierarchicalShapeStyle.primary.getter();
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v17, v15, v12);
    *(_DWORD *)&v17[*(int *)(v63 + 36)] = v25;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    char v26 = v65;
    if ((v65 & 0x100) != 0)
    {
      char v27 = v51;
      static Material.regular.getter();
      uint64_t v28 = AnyShapeStyle.init<A>(_:)();
      double v29 = 15.0;
      LODWORD(v63) = 256;
      goto LABEL_6;
    }
    uint64_t result = (uint64_t)[self tableCellGroupedBackgroundColor];
    if (result)
    {
      char v27 = v51;
      uint64_t v66 = Color.init(uiColor:)();
      uint64_t v28 = AnyShapeStyle.init<A>(_:)();
      LODWORD(v63) = 0;
      double v29 = 10.0;
LABEL_6:
      int v65 = v26 & 1;
      char v30 = static Edge.Set.all.getter();
      uint64_t v31 = v56;
      sub_100009E70((uint64_t)v17, v56, &qword_1000A8858);
      uint64_t v32 = v31 + *(int *)(v52 + 36);
      *(void *)uint64_t v32 = v28;
      *(unsigned char *)(v32 + 8) = v30;
      sub_100009ED4((uint64_t)v17, &qword_1000A8858);
      uint64_t v33 = v60;
      uint64_t v34 = (char *)v27 + *(int *)(v60 + 20);
      uint64_t v35 = enum case for RoundedCornerStyle.continuous(_:);
      LODWORD(v64) = enum case for RoundedCornerStyle.continuous(_:);
      uint64_t v36 = type metadata accessor for RoundedCornerStyle();
      uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v36 - 8) + 104);
      v37(v34, v35, v36);
      *char v27 = v29;
      v27[1] = v29;
      uint64_t v38 = (uint64_t)v57;
      uint64_t v39 = (uint64_t)&v57[*(int *)(v53 + 36)];
      sub_100009DA8((uint64_t)v27, v39, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
      *(_WORD *)(v39 + *(int *)(sub_10000435C(&qword_1000A8898) + 36)) = 256;
      sub_100009E70(v31, v38, &qword_1000A8860);
      sub_100009E10((uint64_t)v27, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
      sub_100009ED4(v31, &qword_1000A8860);
      uint64_t v40 = static Alignment.center.getter();
      uint64_t v42 = v41;
      uint64_t v43 = (uint64_t)v59;
      uint64_t v44 = (uint64_t)&v59[*(int *)(v54 + 36)];
      sub_100007CF8(v63 | v65, v44);
      uint64_t v45 = (uint64_t *)(v44 + *(int *)(sub_10000435C(&qword_1000A88A0) + 36));
      *uint64_t v45 = v40;
      v45[1] = v42;
      sub_100009F30(v38, v43, &qword_1000A8868);
      uint64_t v46 = v61;
      v37((char *)v61 + *(int *)(v33 + 20), v64, v36);
      *uint64_t v46 = v29;
      v46[1] = v29;
      uint64_t v47 = (uint64_t)v58;
      uint64_t v48 = (uint64_t)&v58[*(int *)(v55 + 36)];
      sub_100009DA8((uint64_t)v46, v48, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
      *(unsigned char *)(v48 + *(int *)(sub_10000435C(&qword_1000A88A8) + 36)) = 0;
      sub_100009E70(v43, v47, &qword_1000A8870);
      sub_100009E10((uint64_t)v46, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
      sub_100009ED4(v43, &qword_1000A8870);
      return sub_100009F30(v47, v62, &qword_1000A8878);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100007CF8@<X0>(__int16 a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for RoundedRectangle();
  uint64_t v5 = v4 - 8;
  __chkstk_darwin(v4);
  uint64_t v7 = (double *)((char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = sub_10000435C(&qword_1000A88B0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 0x100) != 0) {
    double v11 = 15.0;
  }
  else {
    double v11 = 10.0;
  }
  uint64_t v12 = (char *)v7 + *(int *)(v5 + 28);
  uint64_t v13 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v14 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 104))(v12, v13, v14);
  double *v7 = v11;
  v7[1] = v11;
  if (a1)
  {
    if ((a1 & 0x100) != 0) {
      LODWORD(v27) = static HierarchicalShapeStyle.primary.getter();
    }
    else {
      *(void *)&long long v27 = static Color.accentColor.getter();
    }
    uint64_t v15 = AnyShapeStyle.init<A>(_:)();
  }
  else
  {
    *(void *)&long long v27 = static Color.clear.getter();
    uint64_t v15 = AnyShapeStyle.init<A>(_:)();
  }
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  sub_100009DA8((uint64_t)v7, (uint64_t)v10, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  double v16 = *(double *)&v27 * 0.5;
  uint64_t v17 = (uint64_t)&v10[*(int *)(v8 + 68)];
  sub_100009DA8((uint64_t)v7, v17, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *(double *)(v17 + *(int *)(type metadata accessor for RoundedRectangle._Inset() + 20)) = v16;
  uint64_t v18 = v17 + *(int *)(sub_10000435C(&qword_1000A88B8) + 36);
  long long v19 = v28;
  *(_OWORD *)uint64_t v18 = v27;
  *(_OWORD *)(v18 + 16) = v19;
  *(void *)(v18 + 32) = v29;
  uint64_t v20 = sub_10000435C(&qword_1000A88C0);
  *(void *)(v17 + *(int *)(v20 + 52)) = v15;
  *(_WORD *)(v17 + *(int *)(v20 + 56)) = 256;
  uint64_t v21 = static Alignment.center.getter();
  uint64_t v23 = v22;
  uint64_t v24 = (uint64_t *)(v17 + *(int *)(sub_10000435C(&qword_1000A88C8) + 36));
  *uint64_t v24 = v21;
  v24[1] = v23;
  sub_100009E10((uint64_t)v7, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  return sub_100009F30((uint64_t)v10, a2, &qword_1000A88B0);
}

uint64_t sub_100007FCC@<X0>(uint64_t a1@<X8>)
{
  if (v1[1]) {
    int v2 = 256;
  }
  else {
    int v2 = 0;
  }
  return sub_1000074A8(v2 | *v1, a1);
}

uint64_t sub_100007FF0()
{
  return static View._viewListCount(inputs:)();
}

uint64_t sub_10000800C@<X0>(uint64_t a1@<X8>)
{
  return sub_100006A34(a1);
}

uint64_t sub_10000804C()
{
  return EnvironmentValues.fontResolutionContext.getter();
}

uint64_t sub_100008074(uint64_t a1, uint64_t a2)
{
  return sub_100008680(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

void *sub_100008098@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

Swift::Int sub_1000080B4()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000080FC()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100008128()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_10000816C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10000818C(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t sub_100008204(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_100008284@<X0>(void *a1@<X8>)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1000082C8(uint64_t a1, uint64_t a2)
{
  return sub_100008680(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

BOOL sub_1000082E0(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1000082F4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_100008320(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_10000832C(uint64_t a1)
{
  uint64_t v2 = sub_100008430(&qword_1000A8658, type metadata accessor for UIContentSizeCategory);
  uint64_t v3 = sub_100008430(&qword_1000A8660, type metadata accessor for UIContentSizeCategory);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000083E8()
{
  return sub_100008430(&qword_1000A85F0, type metadata accessor for UIContentSizeCategory);
}

uint64_t sub_100008430(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100008478()
{
  return sub_100008430(&qword_1000A85F8, type metadata accessor for UIContentSizeCategory);
}

uint64_t sub_1000084C0(uint64_t a1)
{
  uint64_t v2 = sub_100008430(&qword_1000A8FF0, type metadata accessor for ComponentKey);
  uint64_t v3 = sub_100008430(&qword_1000A8650, type metadata accessor for ComponentKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10000857C@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1000085C4(uint64_t a1)
{
  uint64_t v2 = sub_100008430((unint64_t *)&unk_1000AA390, type metadata accessor for Key);
  uint64_t v3 = sub_100008430((unint64_t *)&unk_1000A8640, type metadata accessor for Key);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100008680(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1000086C4()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100008718()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10000878C()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_100008818()
{
  return sub_100008430(&qword_1000A8600, type metadata accessor for UIContentSizeCategory);
}

uint64_t sub_100008860()
{
  return sub_100008430(&qword_1000A8608, type metadata accessor for ComponentKey);
}

uint64_t sub_1000088A8()
{
  return sub_100008430(&qword_1000A8610, type metadata accessor for ComponentKey);
}

uint64_t sub_1000088F0()
{
  return sub_100008430(&qword_1000A8618, type metadata accessor for ComponentKey);
}

uint64_t sub_100008938()
{
  return sub_100008430(&qword_1000A8620, type metadata accessor for Key);
}

uint64_t sub_100008980()
{
  return sub_100008430(&qword_1000A8628, type metadata accessor for Key);
}

uint64_t sub_1000089C8()
{
  return sub_100008430((unint64_t *)&unk_1000A8630, type metadata accessor for Key);
}

void *sub_100008A10()
{
  return &protocol witness table for ObservableObjectPublisher;
}

uint64_t sub_100008A1C@<X0>(uint64_t a1@<X8>)
{
  return sub_100005EF0(*(void *)(v1 + 16), a1);
}

const char *sub_100008A24()
{
  return "familyName";
}

uint64_t sub_100008A30()
{
  uint64_t v1 = type metadata accessor for FontPickerRecentsView(0);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  sub_100004488();
  uint64_t v5 = v0 + v3 + *(int *)(v1 + 20);
  sub_10000435C(&qword_1000A8528);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for Font.Context();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

id sub_100008B94@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for FontPickerRecentsView(0) - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return sub_10000629C(a1, v6, a2);
}

unint64_t sub_100008C14()
{
  unint64_t result = qword_1000A86E0;
  if (!qword_1000A86E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A86E0);
  }
  return result;
}

uint64_t sub_100008C68()
{
  uint64_t v1 = type metadata accessor for FontPickerRecentsView(0);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  sub_100004488();
  uint64_t v5 = v0 + v3 + *(int *)(v1 + 20);
  sub_10000435C(&qword_1000A8528);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for Font.Context();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }
  unint64_t v7 = (v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v7 + 8, v2 | 7);
}

uint64_t sub_100008DE0()
{
  uint64_t v1 = *(void *)(type metadata accessor for FontPickerRecentsView(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_10000695C(v0 + v2, v3);
}

uint64_t sub_100008E6C()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100008EAC(void *a1)
{
  sub_100002DD8(a1, *(void (**)(void))(v1 + 16));
}

uint64_t sub_100008EB4()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100008EEC()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

void *sub_100008F00(unint64_t a1)
{
  unint64_t v1 = a1;
  uint64_t v20 = &_swiftEmptyArrayStorage;
  if (a1 >> 62) {
    goto LABEL_19;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v2)
  {
    while (1)
    {
      unint64_t v18 = v1;
      unint64_t v3 = 0;
      unint64_t v4 = v1 & 0xC000000000000001;
      uint64_t v5 = v1 & 0xFFFFFFFFFFFFFF8;
      uint64_t v6 = &UIScrollViewDelegate__prots;
      while (v4)
      {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_9:
        uint64_t v8 = v7;
        unint64_t v9 = v3 + 1;
        if (__OFADD__(v3, 1)) {
          goto LABEL_18;
        }
        if ([v7 (SEL)v6[464].count])
        {
          uint64_t v10 = v5;
          uint64_t v11 = v2;
          unint64_t v12 = v4;
          id v13 = [v8 familyName];
          Swift::Int v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          Swift::Int v16 = v15;

          LOBYTE(v13) = sub_100015D64(&v19, v14, v16);
          swift_bridgeObjectRelease();
          if (v13)
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
          }
          else
          {
          }
          unint64_t v4 = v12;
          uint64_t v2 = v11;
          uint64_t v5 = v10;
          unint64_t v1 = v18;
          uint64_t v6 = &UIScrollViewDelegate__prots;
        }
        else
        {
        }
        ++v3;
        if (v9 == v2) {
          return v20;
        }
      }
      if (v3 < *(void *)(v5 + 16)) {
        break;
      }
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    id v7 = *(id *)(v1 + 8 * v3 + 32);
    goto LABEL_9;
  }
  return &_swiftEmptyArrayStorage;
}

uint64_t sub_1000090C8()
{
  return swift_retain();
}

uint64_t initializeBufferWithCopyOfBuffer for FontPickerRecentsView.FontTile(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for FontPickerRecentsView.FontTile(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for FontPickerRecentsView.FontTile(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void **)(a2 + 32);
  *(void *)(a1 + 32) = v5;
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  id v7 = v5;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for FontPickerRecentsView.FontTile(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a2 + 32);
  uint64_t v5 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v4;
  id v6 = v4;

  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for FontPickerRecentsView.FontTile(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for FontPickerRecentsView.FontTile(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  long long v4 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for FontPickerRecentsView.FontTile(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FontPickerRecentsView.FontTile(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FontPickerRecentsView.FontTile()
{
  return &type metadata for FontPickerRecentsView.FontTile;
}

__n128 _s7SectionVwtk(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for CGPoint(uint64_t a1)
{
}

uint64_t sub_100009400(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_100009420(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

void sub_100009470(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t sub_1000094C0()
{
  unint64_t result = qword_1000A8798;
  if (!qword_1000A8798)
  {
    sub_100003F9C(&qword_1000A87A0);
    sub_100009590(&qword_1000A87A8, &qword_1000A8698, (void (*)(void))sub_100009560);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A8798);
  }
  return result;
}

uint64_t sub_100009560()
{
  return sub_100009590(&qword_1000A87B0, &qword_1000A8690, (void (*)(void))sub_10000960C);
}

uint64_t sub_100009590(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100003F9C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10000960C()
{
  unint64_t result = qword_1000A87B8;
  if (!qword_1000A87B8)
  {
    sub_100003F9C(&qword_1000A8688);
    sub_100003F9C(&qword_1000A8678);
    sub_100003F9C(&qword_1000A8670);
    sub_100003F9C(&qword_1000A8668);
    sub_10000A368(&qword_1000A86C0, &qword_1000A8668);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A87B8);
  }
  return result;
}

uint64_t sub_10000976C()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_100009788()
{
  unint64_t result = qword_1000A87E0;
  if (!qword_1000A87E0)
  {
    sub_100003F9C(&qword_1000A87E8);
    sub_100003F9C(&qword_1000A87F0);
    sub_10000A368(&qword_1000A87F8, &qword_1000A87F0);
    sub_1000098A8();
    swift_getOpaqueTypeConformance2();
    sub_100008430(&qword_1000A8808, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A87E0);
  }
  return result;
}

unint64_t sub_1000098A8()
{
  unint64_t result = qword_1000A8800;
  if (!qword_1000A8800)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A8800);
  }
  return result;
}

uint64_t sub_1000098FC()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100009954()
{
  return sub_10000727C(v0 + 16);
}

id sub_10000995C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000073B0(*(void *)(v1 + 16), a1);
}

uint64_t sub_100009964(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 32);
  swift_bridgeObjectRetain();
  id v3 = v2;
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

unint64_t sub_1000099C8()
{
  unint64_t result = qword_1000AAAD0;
  if (!qword_1000AAAD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AAAD0);
  }
  return result;
}

uint64_t sub_100009A1C(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_release();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_100009A2C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100009A94()
{
  return sub_10000731C(*(void *)(v0 + 16));
}

_WORD *initializeBufferWithCopyOfBuffer for FontPickerRecentsView.FontTile.FontTileButtonStyle(_WORD *result, _WORD *a2)
{
  char *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for FontPickerRecentsView.FontTile.FontTileButtonStyle(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 65281 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65281 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65281;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }
LABEL_17:
  unsigned int v6 = *(unsigned __int8 *)a1;
  BOOL v7 = v6 >= 2;
  int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FontPickerRecentsView.FontTile.FontTileButtonStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65281 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65281 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 16) + 1;
    *(_WORD *)unint64_t result = a2 - 255;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100009C2CLL);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FontPickerRecentsView.FontTile.FontTileButtonStyle()
{
  return &type metadata for FontPickerRecentsView.FontTile.FontTileButtonStyle;
}

unint64_t sub_100009C68()
{
  unint64_t result = qword_1000A8838;
  if (!qword_1000A8838)
  {
    sub_100003F9C(&qword_1000A8840);
    sub_100003F9C(&qword_1000A87C8);
    type metadata accessor for AutomaticHoverEffect();
    sub_100009590(&qword_1000A87D8, &qword_1000A87C8, (void (*)(void))sub_100009788);
    sub_100008430(&qword_1000A8810, (void (*)(uint64_t))&type metadata accessor for AutomaticHoverEffect);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A8838);
  }
  return result;
}

uint64_t sub_100009D8C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100009DA8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100009E10(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100009E70(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10000435C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100009ED4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_10000435C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100009F30(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10000435C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_100009F98()
{
  unint64_t result = qword_1000A88D0;
  if (!qword_1000A88D0)
  {
    sub_100003F9C(&qword_1000A8878);
    sub_10000A038();
    sub_10000A368(&qword_1000A8928, &qword_1000A88A8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A88D0);
  }
  return result;
}

unint64_t sub_10000A038()
{
  unint64_t result = qword_1000A88D8;
  if (!qword_1000A88D8)
  {
    sub_100003F9C(&qword_1000A8870);
    sub_10000A0D8();
    sub_10000A368(&qword_1000A8920, &qword_1000A88A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A88D8);
  }
  return result;
}

unint64_t sub_10000A0D8()
{
  unint64_t result = qword_1000A88E0;
  if (!qword_1000A88E0)
  {
    sub_100003F9C(&qword_1000A8868);
    sub_10000A178();
    sub_10000A368(&qword_1000A8918, &qword_1000A8898);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A88E0);
  }
  return result;
}

unint64_t sub_10000A178()
{
  unint64_t result = qword_1000A88E8;
  if (!qword_1000A88E8)
  {
    sub_100003F9C(&qword_1000A8860);
    sub_10000A218();
    sub_10000A368(&qword_1000A8908, &qword_1000A8910);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A88E8);
  }
  return result;
}

unint64_t sub_10000A218()
{
  unint64_t result = qword_1000A88F0;
  if (!qword_1000A88F0)
  {
    sub_100003F9C(&qword_1000A8858);
    type metadata accessor for ButtonStyleConfiguration.Label();
    sub_100003F9C(&qword_1000A8848);
    sub_100008430(&qword_1000AAE80, (void (*)(uint64_t))&type metadata accessor for ButtonStyleConfiguration.Label);
    sub_10000A368(&qword_1000A8890, &qword_1000A8848);
    swift_getOpaqueTypeConformance2();
    sub_10000A368(&qword_1000A88F8, &qword_1000A8900);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A88F0);
  }
  return result;
}

uint64_t sub_10000A368(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100003F9C(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000A3AC(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_10000A3E8()
{
  return type metadata accessor for _UITextFormattingServiceViewController();
}

char *sub_10000A430(char *a1, char **a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = &v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    uint64_t v6 = *(int *)(a3 + 28);
    BOOL v7 = &a1[v6];
    int v8 = (char **)((char *)a2 + v6);
    unint64_t v9 = v5;
    sub_10000435C(&qword_1000A8528);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = type metadata accessor for Font.Context();
      (*(void (**)(char *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(v7, v8, v10);
    }
    else
    {
      *(void *)BOOL v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_10000A550(id *a1, uint64_t a2)
{
  int v4 = (char *)a1 + *(int *)(a2 + 28);
  sub_10000435C(&qword_1000A8528);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for Font.Context();
    uint64_t v6 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8);
    return v6(v4, v5);
  }
  else
  {
    return swift_release();
  }
}

uint64_t sub_10000A608(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = (void *)(a1 + v5);
  BOOL v7 = (void *)(a2 + v5);
  id v8 = v4;
  sub_10000435C(&qword_1000A8528);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = type metadata accessor for Font.Context();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(v6, v7, v9);
  }
  else
  {
    *uint64_t v6 = *v7;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_10000A6D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a2;
  BOOL v7 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v8 = v6;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  if (a1 != a2)
  {
    uint64_t v9 = *(int *)(a3 + 28);
    uint64_t v10 = (void *)(a1 + v9);
    uint64_t v11 = (void *)(a2 + v9);
    sub_100009ED4(a1 + v9, &qword_1000A8528);
    sub_10000435C(&qword_1000A8528);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = type metadata accessor for Font.Context();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      *uint64_t v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_10000A7D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = (void *)(a1 + v4);
  uint64_t v6 = (const void *)(a2 + v4);
  uint64_t v7 = sub_10000435C(&qword_1000A8528);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for Font.Context();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(v5, v6, v8);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v5, v6, *(void *)(*(void *)(v7 - 8) + 64));
  }
  return a1;
}

uint64_t sub_10000A8B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  if (a1 != a2)
  {
    uint64_t v7 = *(int *)(a3 + 28);
    uint64_t v8 = (void *)(a1 + v7);
    uint64_t v9 = (const void *)(a2 + v7);
    sub_100009ED4(a1 + v7, &qword_1000A8528);
    uint64_t v10 = sub_10000435C(&qword_1000A8528);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = type metadata accessor for Font.Context();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10000A9B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10000A9CC);
}

uint64_t sub_10000A9CC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10000435C(&qword_1000A8530);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10000AA80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10000AA94);
}

void *sub_10000AA94(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    char *result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_10000435C(&qword_1000A8530);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 28);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for FontPreview()
{
  uint64_t result = qword_1000A8A58;
  if (!qword_1000A8A58) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10000AB8C()
{
  sub_10000AC38();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_10000AC38()
{
  if (!qword_1000A85A0)
  {
    type metadata accessor for Font.Context();
    unint64_t v0 = type metadata accessor for Environment.Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1000A85A0);
    }
  }
}

uint64_t sub_10000AC90()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10000ACAC@<X0>(uint64_t a1@<X8>)
{
  int v2 = v1;
  uint64_t v4 = sub_10000435C(&qword_1000A8A98);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Font.Context();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Font.body.getter();
  type metadata accessor for FontPreview();
  sub_100012C24((uint64_t)v10);
  uint64_t v11 = (void *)Font.platformFont(in:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  [v11 pointSize];
  [v11 capHeight];
  double v13 = v12 * 0.5;
  *(void *)uint64_t v6 = static VerticalAlignment.center.getter();
  *((void *)v6 + 1) = 0;
  v6[16] = 0;
  uint64_t v14 = sub_10000435C(&qword_1000A8AA0);
  sub_10000AF08(v2, (uint64_t)&v6[*(int *)(v14 + 44)], v13);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  sub_100009E70((uint64_t)v6, a1, &qword_1000A8A98);

  Swift::Int v15 = (_OWORD *)(a1 + *(int *)(sub_10000435C(&qword_1000A8AA8) + 36));
  long long v16 = v18[1];
  _OWORD *v15 = v18[0];
  v15[1] = v16;
  v15[2] = v18[2];
  return sub_100009ED4((uint64_t)v6, &qword_1000A8A98);
}

uint64_t sub_10000AF08@<X0>(id *a1@<X0>, uint64_t a2@<X8>, double a3@<D1>)
{
  uint64_t v89 = a2;
  uint64_t v88 = type metadata accessor for Divider();
  uint64_t v5 = *(void *)(v88 - 8);
  __chkstk_darwin(v88);
  uint64_t v7 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = sub_10000435C(&qword_1000A8AB0);
  uint64_t v8 = __chkstk_darwin(v87);
  uint64_t v90 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v102 = (uint64_t)&v79 - v10;
  uint64_t v11 = type metadata accessor for FontPreview();
  __chkstk_darwin(v11 - 8);
  double v13 = (id *)((char *)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v14 = *a1;
  id v15 = [*a1 preferredShortPreviewString];
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;

  uint64_t v121 = v16;
  uint64_t v122 = v18;
  unint64_t v86 = sub_1000099C8();
  uint64_t v19 = Text.init<A>(_:)();
  uint64_t v99 = v20;
  uint64_t v100 = v19;
  char v22 = v21;
  uint64_t v101 = v23;
  uint64_t KeyPath = swift_getKeyPath();
  id v24 = [v14 postscriptName];
  if (!v24)
  {
    sub_10000B768((uint64_t)a1, (uint64_t)v13);
LABEL_5:
    id v28 = [*v13 fontDescriptor];
    id v29 = [v28 postscriptName];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    goto LABEL_6;
  }
  int v25 = v24;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v27 = v26;

  sub_10000B768((uint64_t)a1, (uint64_t)v13);
  if (!v27) {
    goto LABEL_5;
  }
LABEL_6:
  sub_10000B7CC((uint64_t)v13);
  *((void *)&v97 + 1) = static Font.custom(_:fixedSize:)();
  swift_bridgeObjectRelease();
  *(void *)&long long v97 = swift_getKeyPath();
  uint64_t v96 = static VerticalAlignment.center.getter();
  uint64_t v95 = swift_allocObject();
  *(double *)(v95 + 16) = a3;
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v92 = v140;
  uint64_t v93 = v142;
  uint64_t v94 = v144;
  uint64_t v91 = v145;
  unsigned __int8 v111 = v22 & 1;
  unsigned __int8 v109 = v141;
  unsigned __int8 v107 = v143;
  Divider.init()();
  char v30 = static Edge.Set.vertical.getter();
  EdgeInsets.init(_all:)();
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  uint64_t v38 = v37;
  uint64_t v39 = (uint64_t)v90;
  uint64_t v40 = v88;
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v90, v7, v88);
  uint64_t v41 = v39 + *(int *)(v87 + 36);
  *(unsigned char *)uint64_t v41 = v30;
  *(void *)(v41 + 8) = v32;
  *(void *)(v41 + 16) = v34;
  *(void *)(v41 + 24) = v36;
  *(void *)(v41 + 32) = v38;
  *(unsigned char *)(v41 + 40) = 0;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v40);
  sub_10000B844(v39, v102);
  id v42 = [*a1 localizedFullName];
  uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v45 = v44;

  uint64_t v121 = v43;
  uint64_t v122 = v45;
  uint64_t v46 = Text.init<A>(_:)();
  uint64_t v48 = v47;
  char v50 = v49 & 1;
  static Font.body.getter();
  uint64_t v85 = Text.font(_:)();
  uint64_t v87 = v51;
  uint64_t v88 = v52;
  LOBYTE(v45) = v53;
  swift_release();
  char v54 = v45 & 1;
  sub_100009A1C(v46, v48, v50);
  swift_bridgeObjectRelease();
  int v81 = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v56 = v55;
  uint64_t v58 = v57;
  uint64_t v60 = v59;
  uint64_t v62 = v61;
  uint64_t v80 = static VerticalAlignment.center.getter();
  uint64_t v63 = swift_allocObject();
  *(double *)(v63 + 16) = a3;
  LOBYTE(v48) = v111;
  LODWORD(v86) = v111;
  v105[0] = *(_DWORD *)v110;
  *(_DWORD *)((char *)v105 + 3) = *(_DWORD *)&v110[3];
  LOBYTE(v43) = v109;
  v104[0] = *(_DWORD *)v108;
  *(_DWORD *)((char *)v104 + 3) = *(_DWORD *)&v108[3];
  unsigned __int8 v64 = v107;
  int v82 = v109;
  int v83 = v107;
  v103[0] = *(_DWORD *)v106;
  *(_DWORD *)((char *)v103 + 3) = *(_DWORD *)&v106[3];
  uint64_t v65 = v102;
  sub_100009E70(v102, v39, &qword_1000A8AB0);
  *(void *)&long long v112 = v100;
  *((void *)&v112 + 1) = v99;
  LOBYTE(v113) = v48;
  *(_DWORD *)((char *)&v113 + 1) = *(_DWORD *)v110;
  DWORD1(v113) = *(_DWORD *)&v110[3];
  *((void *)&v113 + 1) = v101;
  *(void *)&long long v114 = KeyPath;
  *((void *)&v114 + 1) = 0x3FE0000000000000;
  long long v115 = v97;
  *(void *)&long long v116 = v96;
  v84 = sub_10000B840;
  *((void *)&v116 + 1) = sub_10000B840;
  *(void *)&long long v117 = v95;
  *((void *)&v117 + 1) = v92;
  LOBYTE(v118) = v43;
  DWORD1(v118) = *(_DWORD *)&v108[3];
  *(_DWORD *)((char *)&v118 + 1) = *(_DWORD *)v108;
  *((void *)&v118 + 1) = v93;
  LOBYTE(v119) = v64;
  DWORD1(v119) = *(_DWORD *)&v106[3];
  *(_DWORD *)((char *)&v119 + 1) = *(_DWORD *)v106;
  *((void *)&v119 + 1) = v94;
  uint64_t v120 = v91;
  long long v66 = v117;
  long long v67 = v118;
  long long v68 = v119;
  uint64_t v69 = (_OWORD *)v89;
  *(void *)(v89 + 128) = v91;
  v69[6] = v67;
  v69[7] = v68;
  long long v70 = v112;
  long long v71 = v113;
  v69[4] = v116;
  v69[5] = v66;
  long long v72 = v115;
  v69[2] = v114;
  v69[3] = v72;
  *uint64_t v69 = v70;
  v69[1] = v71;
  uint64_t v73 = sub_10000435C(&qword_1000A8AB8);
  sub_100009E70(v39, (uint64_t)v69 + *(int *)(v73 + 48), &qword_1000A8AB0);
  uint64_t v74 = (char *)v69 + *(int *)(v73 + 64);
  uint64_t v75 = v85;
  uint64_t v77 = v87;
  uint64_t v76 = v88;
  *(void *)uint64_t v74 = v85;
  *((void *)v74 + 1) = v77;
  v74[16] = v54;
  *((void *)v74 + 3) = v76;
  v74[32] = v81;
  *((void *)v74 + 5) = v56;
  *((void *)v74 + 6) = v58;
  *((void *)v74 + 7) = v60;
  *((void *)v74 + 8) = v62;
  v74[72] = 0;
  *((void *)v74 + 10) = v80;
  *((void *)v74 + 11) = sub_10000B840;
  *((void *)v74 + 12) = v63;
  sub_10000B8F8((uint64_t)&v112);
  sub_10000B970(v75, v77, v54);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_100009ED4(v65, &qword_1000A8AB0);
  sub_100009A1C(v75, v77, v54);
  swift_release();
  swift_bridgeObjectRelease();
  sub_100009ED4(v39, &qword_1000A8AB0);
  uint64_t v121 = v100;
  uint64_t v122 = v99;
  char v123 = v86;
  *(_DWORD *)v124 = v105[0];
  *(_DWORD *)&v124[3] = *(_DWORD *)((char *)v105 + 3);
  uint64_t v125 = v101;
  uint64_t v126 = KeyPath;
  uint64_t v127 = 0x3FE0000000000000;
  long long v128 = v97;
  uint64_t v129 = v96;
  v130 = v84;
  uint64_t v131 = v95;
  uint64_t v132 = v92;
  char v133 = v82;
  *(_DWORD *)&v134[3] = *(_DWORD *)((char *)v104 + 3);
  *(_DWORD *)v134 = v104[0];
  uint64_t v135 = v93;
  char v136 = v83;
  *(_DWORD *)&v137[3] = *(_DWORD *)((char *)v103 + 3);
  *(_DWORD *)v137 = v103[0];
  uint64_t v138 = v94;
  uint64_t v139 = v91;
  return sub_10000B980((uint64_t)&v121);
}

uint64_t sub_10000B6C0@<X0>(void *a1@<X8>)
{
  uint64_t result = EnvironmentValues.minimumScaleFactor.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_10000B6EC@<X0>(void *a1@<X8>)
{
  uint64_t result = EnvironmentValues.minimumScaleFactor.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_10000B718()
{
  return EnvironmentValues.minimumScaleFactor.setter();
}

uint64_t sub_10000B740()
{
  return EnvironmentValues.minimumScaleFactor.setter();
}

uint64_t sub_10000B768(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FontPreview();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000B7CC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FontPreview();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10000B830()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10000B844(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000435C(&qword_1000A8AB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000B8AC()
{
  return _swift_deallocObject(v0, 24, 7);
}

double sub_10000B8BC()
{
  double v1 = *(double *)(v0 + 16);
  static VerticalAlignment.firstTextBaseline.getter();
  ViewDimensions.subscript.getter();
  return v2 - v1;
}

uint64_t sub_10000B8F8(uint64_t a1)
{
  return a1;
}

uint64_t sub_10000B970(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_retain();
  }
  else {
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_10000B980(uint64_t a1)
{
  return a1;
}

unint64_t sub_10000B9FC()
{
  unint64_t result = qword_1000A8AC0;
  if (!qword_1000A8AC0)
  {
    sub_100003F9C(&qword_1000A8AA8);
    sub_10000BA78();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A8AC0);
  }
  return result;
}

unint64_t sub_10000BA78()
{
  unint64_t result = qword_1000A8AC8;
  if (!qword_1000A8AC8)
  {
    sub_100003F9C(&qword_1000A8A98);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A8AC8);
  }
  return result;
}

void *sub_10000BAD4(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_22;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v25 = v1 & 0xC000000000000001;
    uint64_t v27 = _swiftEmptyArrayStorage;
    uint64_t v3 = 4;
    unint64_t v24 = v1;
    while (1)
    {
      id v4 = v25 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v1 + 8 * v3);
      uint64_t v5 = v4;
      uint64_t v6 = v3 - 3;
      if (__OFADD__(v3 - 4, 1)) {
        break;
      }
      id v7 = [v4 components];
      sub_10000A3AC(0, &qword_1000A8AD0);
      unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v8 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      if (v9)
      {
        uint64_t v10 = v2;
        id v11 = [v5 identifier];
        Swift::Int v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        Swift::Int v14 = v13;

        LOBYTE(v11) = sub_100015D64(&v26, v12, v14);
        swift_bridgeObjectRelease();
        if (v11)
        {
          id v15 = [v5 identifier];
          uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v18 = v17;

          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v27 = sub_100014A3C(0, v27[2] + 1, 1, v27);
          }
          unint64_t v20 = v27[2];
          unint64_t v19 = v27[3];
          if (v20 >= v19 >> 1) {
            uint64_t v27 = sub_100014A3C((void *)(v19 > 1), v20 + 1, 1, v27);
          }
          char v21 = v27;
          v27[2] = v20 + 1;
          char v22 = &v21[2 * v20];
          v22[4] = v16;
          v22[5] = v18;
          uint64_t v2 = v10;
          unint64_t v1 = v24;
        }
        else
        {

          uint64_t v2 = v10;
          unint64_t v1 = v24;
        }
      }
      else
      {
      }
      ++v3;
      if (v6 == v2) {
        goto LABEL_24;
      }
    }
    __break(1u);
LABEL_22:
    swift_bridgeObjectRetain();
  }
  uint64_t v27 = _swiftEmptyArrayStorage;
LABEL_24:
  swift_bridgeObjectRelease();
  return v27;
}

double sub_10000BD84@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  if (*(unsigned char *)(a1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_isInPopoverPresentation)) {
    char v4 = 0;
  }
  else {
    char v4 = *(unsigned char *)(a1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_hasParentViewController) ^ 1;
  }
  uint64_t v5 = OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_useReducedMetrics;
  sub_1000746A8(v4 & 1, *(unsigned char *)(a1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_useReducedMetrics), v30);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  double v29 = sub_1000748C8(*(unsigned char *)(a1 + v5), v30);
  uint64_t v28 = static HorizontalAlignment.center.getter();
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  uint64_t KeyPath = swift_getKeyPath();
  type metadata accessor for TextFormattingState();
  sub_1000200D8((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
  swift_retain();
  uint64_t v26 = static ObservableObject.environmentStore.getter();
  uint64_t v25 = swift_getKeyPath();
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  char v6 = static Edge.Set.top.getter();
  EdgeInsets.init(_all:)();
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  char v24 = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  *(void *)a2 = v28;
  *(double *)(a2 + 8) = v29;
  *(unsigned char *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 17) = *(_DWORD *)v38;
  *(_DWORD *)(a2 + 20) = *(_DWORD *)&v38[3];
  *(_OWORD *)(a2 + 24) = v30;
  *(_OWORD *)(a2 + 40) = v31;
  *(_OWORD *)(a2 + 56) = v32;
  *(unsigned char *)(a2 + 72) = v33;
  *(_DWORD *)(a2 + 76) = *(_DWORD *)&v37[3];
  *(_DWORD *)(a2 + 73) = *(_DWORD *)v37;
  *(void *)(a2 + 80) = v34;
  *(void *)(a2 + 88) = v35;
  *(void *)(a2 + 96) = KeyPath;
  *(unsigned char *)(a2 + 104) = 0;
  *(_DWORD *)(a2 + 105) = *(_DWORD *)v36;
  *(_DWORD *)(a2 + 108) = *(_DWORD *)&v36[3];
  *(void *)(a2 + 112) = v26;
  *(void *)(a2 + 120) = a1;
  *(void *)(a2 + 128) = v25;
  *(unsigned char *)(a2 + 136) = v30;
  *(_DWORD *)(a2 + 140) = *(_DWORD *)&v40[3];
  *(_DWORD *)(a2 + 137) = *(_DWORD *)v40;
  *(unsigned char *)(a2 + 144) = v6;
  *(_DWORD *)(a2 + 145) = *(_DWORD *)v39;
  *(_DWORD *)(a2 + 148) = *(_DWORD *)&v39[3];
  *(void *)(a2 + 152) = v8;
  *(void *)(a2 + 160) = v10;
  *(void *)(a2 + 168) = v12;
  *(void *)(a2 + 176) = v14;
  *(unsigned char *)(a2 + 184) = 0;
  *(_DWORD *)(a2 + 185) = *(_DWORD *)v42;
  *(_DWORD *)(a2 + 188) = *(_DWORD *)&v42[3];
  *(unsigned char *)(a2 + 192) = v24;
  *(_DWORD *)(a2 + 196) = *(_DWORD *)&v41[3];
  *(_DWORD *)(a2 + 193) = *(_DWORD *)v41;
  *(void *)(a2 + 200) = v16;
  *(void *)(a2 + 208) = v18;
  *(void *)(a2 + 216) = v20;
  *(void *)(a2 + 224) = v22;
  *(unsigned char *)(a2 + 232) = 0;
  *(_DWORD *)(a2 + 236) = *(_DWORD *)&v45[3];
  *(_DWORD *)(a2 + 233) = *(_DWORD *)v45;
  *(void *)(a2 + 240) = v30;
  *(unsigned char *)(a2 + 248) = BYTE8(v30);
  *(_DWORD *)(a2 + 249) = *(_DWORD *)v44;
  *(_DWORD *)(a2 + 252) = *(_DWORD *)&v44[3];
  *(void *)(a2 + 256) = v31;
  *(unsigned char *)(a2 + 264) = BYTE8(v31);
  *(_DWORD *)(a2 + 268) = *(_DWORD *)&v43[3];
  *(_DWORD *)(a2 + 265) = *(_DWORD *)v43;
  double result = *(double *)&v32;
  *(_OWORD *)(a2 + 272) = v32;
  return result;
}

uint64_t sub_10000C304@<X0>(unsigned char *a1@<X8>)
{
  sub_100018C78();
  uint64_t result = EnvironmentValues.subscript.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_10000C354()
{
  return EnvironmentValues.subscript.setter();
}

double sub_10000C3A0@<D0>(uint64_t a1@<X8>)
{
  return sub_10000BD84(*(void *)(v1 + 8), a1);
}

void *sub_10000C3A8(char a1, double a2)
{
  id v5 = [v2 components];
  sub_10000A3AC(0, &qword_1000A8AD0);
  unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v6 >> 62) {
    goto LABEL_12;
  }
  uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v7)
  {
    while (v7 >= 1)
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      while (1)
      {
        id v10 = (v6 & 0xC000000000000001) != 0
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
            : *(id *)(v6 + 8 * v8 + 32);
        uint64_t v11 = v10;
        uint64_t v12 = sub_10000EB54();

        BOOL v13 = __OFADD__(v9, v12);
        v9 += v12;
        if (v13) {
          break;
        }
        if (v7 == ++v8) {
          goto LABEL_14;
        }
      }
      __break(1u);
LABEL_12:
      swift_bridgeObjectRetain();
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
      if (!v7) {
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_181:
    __break(1u);
LABEL_182:
    swift_release();
    __break(1u);
    goto LABEL_183;
  }
LABEL_13:
  uint64_t v9 = 0;
LABEL_14:
  char v146 = a1;
  swift_bridgeObjectRelease_n();
  sub_1000154BC(0, 6, 0);
  uint64_t v14 = 0;
  char v15 = 0;
  uint64_t v16 = _swiftEmptyArrayStorage;
  unint64_t v17 = _swiftEmptyArrayStorage[2];
  uint64_t v18 = 3 * v17;
  uint64_t v19 = &byte_10009E761;
  uint64_t v20 = 4;
  uint64_t v21 = qword_100083F50;
  while (1)
  {
    v148[0] = (uint64_t)v16;
    unint64_t v22 = v16[3];
    if (v17 >= v22 >> 1)
    {
      uint64_t v25 = v21;
      sub_1000154BC(v22 > 1, v17 + 1, 1);
      uint64_t v21 = v25;
      uint64_t v16 = (void *)v148[0];
    }
    v16[2] = v17 + 1;
    uint64_t v23 = &v16[v18 + v14];
    *((unsigned char *)v23 + 32) = v15;
    v23[5] = v9 / v20;
    v23[6] = v9 % v20;
    if (v14 == 15) {
      break;
    }
    uint64_t v24 = *v19++;
    char v15 = v24;
    uint64_t v20 = v21[v24];
    v14 += 3;
    ++v17;
  }
  uint64_t v26 = v21;
  sub_10000435C(&qword_1000A8B18);
  v148[0] = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v27 = swift_bridgeObjectRetain();
  sub_100018608(v27, 1, v148);
  swift_release();
  uint64_t v28 = swift_bridgeObjectRetain();
  double v29 = sub_100015078(v28);
  swift_release();
  v148[0] = (uint64_t)v29;
  sub_10001A200(v148, sub_10001C660, sub_10001A928);
  swift_release();
  if (!*(void *)(v148[0] + 16)) {
    goto LABEL_184;
  }
  uint64_t v30 = *(char *)(v148[0] + 32);
  swift_release();
  unint64_t v31 = v146;
  double v32 = dbl_100083F28[v146] + a2;
  if ((~*(void *)&v32 & 0x7FF0000000000000) == 0) {
    goto LABEL_170;
  }
  if (v32 <= -9.22337204e18) {
    goto LABEL_171;
  }
  if (v32 >= 9.22337204e18) {
    goto LABEL_172;
  }
  unint64_t v33 = v26[v30];
  double v34 = sub_100074A84(v146) + dbl_100083F28[v146];
  if ((~*(void *)&v34 & 0x7FF0000000000000) == 0) {
    goto LABEL_173;
  }
  if (v34 <= -9.22337204e18) {
    goto LABEL_174;
  }
  if (v34 < 9.22337204e18)
  {
    uint64_t v35 = (uint64_t)v34;
    if ((uint64_t)v34 && ((uint64_t)v32 != 0x8000000000000000 || v35 != -1))
    {
      uint64_t v136 = 4;
      uint64_t v36 = (uint64_t)v32 / v35;
      switch(v146)
      {
        case 1:
          BOOL v37 = v36 < 12;
          uint64_t v38 = 12;
          goto LABEL_37;
        case 2:
        case 3:
          goto LABEL_40;
        case 4:
          uint64_t v36 = 8;
          goto LABEL_39;
        default:
          if (v33 > 0xC || ((1 << v33) & 0x1570) == 0) {
            goto LABEL_154;
          }
          if ((uint64_t)v33 < v36) {
            uint64_t v36 = v33;
          }
          goto LABEL_39;
      }
    }
    goto LABEL_185;
  }
  while (2)
  {
    __break(1u);
LABEL_176:
    swift_bridgeObjectRetain();
    uint64_t v40 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v40) {
      goto LABEL_177;
    }
LABEL_42:
    unint64_t v138 = v31 & 0xC000000000000001;
    unint64_t v134 = v31 + 32;
    uint64_t v135 = v31 & 0xFFFFFFFFFFFFFF8;
    unint64_t v31 = 0;
    uint64_t v41 = _swiftEmptyArrayStorage;
    id v42 = &selRef_runWithFontNamesForFamilyName_usingBlock_;
    uint64_t v137 = v40;
LABEL_45:
    if (v138)
    {
      id v44 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (v31 >= *(void *)(v135 + 16)) {
        goto LABEL_158;
      }
      id v44 = *(id *)(v134 + 8 * v31);
    }
    id v142 = v44;
    BOOL v13 = __OFADD__(v31++, 1);
    if (v13)
    {
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
      goto LABEL_159;
    }
    unint64_t v141 = v31;
    uint64_t v45 = v41[2];
    if (!v45)
    {
      sub_10000435C(&qword_1000A8B30);
      uint64_t v69 = swift_allocObject();
      *(_OWORD *)(v69 + 16) = xmmword_100083940;
      *(void *)(v69 + 32) = v142;
      v148[0] = v69;
      specialized Array._endMutation()();
      uint64_t v70 = v148[0];
      id v71 = v142;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v41 = sub_100014C74(0, v41[2] + 1, 1, v41);
      }
      unint64_t v73 = v41[2];
      unint64_t v72 = v41[3];
      if (v73 >= v72 >> 1) {
        uint64_t v41 = sub_100014C74((void *)(v72 > 1), v73 + 1, 1, v41);
      }
      v41[2] = v73 + 1;
      uint64_t v43 = &v41[2 * v73];
      v43[4] = 0;
      v43[5] = v70;
      goto LABEL_44;
    }
    unint64_t v46 = v41[2 * v45 + 3];
    swift_bridgeObjectRetain();
    uint64_t v139 = sub_10000EB54();
    unint64_t v143 = v46;
    if (v46 >> 62)
    {
      swift_bridgeObjectRetain_n();
      unint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v140 = v41;
      if (!v31)
      {
LABEL_80:
        uint64_t v48 = 0;
        goto LABEL_81;
      }
    }
    else
    {
      unint64_t v31 = *(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      uint64_t v140 = v41;
      if (!v31) {
        goto LABEL_80;
      }
    }
    if ((uint64_t)v31 < 1) {
      goto LABEL_157;
    }
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    for (i = v31; i != v47; unint64_t v31 = i)
    {
      if ((v143 & 0xC000000000000001) != 0) {
        id v49 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v49 = *(id *)(v143 + 32 + 8 * v47);
      }
      char v50 = v49;
      uint64_t v147 = v48;
      if ([v49 v42[134]]) {
        id v51 = [v50 v42[134]];
      }
      else {
        id v51 = (id)sub_10000EC94();
      }
      id v52 = v51;
      sub_10000435C(&qword_1000A8B20);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_100083920;
      uint64_t v145 = v50;

      *(void *)(inited + 32) = 1;
      *(void *)(inited + 40) = v52;
      type metadata accessor for ComponentSize(0);
      sub_1000200D8(&qword_1000A8B28, type metadata accessor for ComponentSize);
      uint64_t v54 = Set.init(minimumCapacity:)();
      uint64_t v55 = 0;
      for (uint64_t j = v54 + 56; ; uint64_t j = v54 + 56)
      {
        while (1)
        {
          Swift::UInt v57 = *(void *)(inited + 32 + 8 * v55);
          uint64_t v58 = v55 + 1;
          Hasher.init(_seed:)();
          Hasher._combine(_:)(v57);
          Swift::Int v59 = Hasher._finalize()();
          uint64_t v60 = -1 << *(unsigned char *)(v54 + 32);
          unint64_t v61 = v59 & ~v60;
          if (((*(void *)(j + ((v61 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v61) & 1) == 0) {
            goto LABEL_69;
          }
          uint64_t v62 = *(void *)(v54 + 48);
          if (*(void *)(v62 + 8 * v61) != v57) {
            break;
          }
LABEL_62:
          uint64_t v55 = 1;
          if (v58 == 2) {
            goto LABEL_71;
          }
        }
        uint64_t v63 = ~v60;
        while (1)
        {
          unint64_t v61 = (v61 + 1) & v63;
          if (((*(void *)(j + ((v61 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v61) & 1) == 0) {
            break;
          }
          if (*(void *)(v62 + 8 * v61) == v57) {
            goto LABEL_62;
          }
        }
LABEL_69:
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v148[0] = v54;
        sub_100017044(v57, v61, isUniquelyReferenced_nonNull_native);
        uint64_t v54 = v148[0];
        swift_bridgeObjectRelease();
        uint64_t v55 = 1;
        if (v58 == 2) {
          break;
        }
      }
LABEL_71:
      swift_bridgeObjectRelease();
      uint64_t v65 = swift_bridgeObjectRetain();
      long long v66 = sub_100014F90(v65);
      swift_bridgeObjectRelease();
      v148[0] = (uint64_t)v66;
      sub_10001A200(v148, sub_10001C64C, sub_10001A298);
      swift_bridgeObjectRelease();
      uint64_t v67 = *(void *)(v148[0] + 16);
      id v42 = &selRef_runWithFontNamesForFamilyName_usingBlock_;
      if (!v67) {
        goto LABEL_182;
      }
      uint64_t v68 = *(void *)(v148[0] + 8 * v67 + 24);

      swift_release();
      uint64_t v48 = v147 + v68;
      if (__OFADD__(v147, v68))
      {
        __break(1u);
LABEL_154:
        BOOL v37 = v36 < 6;
        uint64_t v38 = 6;
LABEL_37:
        if (!v37) {
          uint64_t v36 = v38;
        }
LABEL_39:
        uint64_t v136 = v36;
LABEL_40:
        id v39 = [v133 components];
        unint64_t v31 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (!(v31 >> 62))
        {
          uint64_t v40 = *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v40) {
            goto LABEL_42;
          }
LABEL_177:
          swift_bridgeObjectRelease();
          uint64_t v41 = _swiftEmptyArrayStorage;
          uint64_t v121 = _swiftEmptyArrayStorage[2];
          if (v121) {
            goto LABEL_140;
          }
LABEL_178:
          char v123 = _swiftEmptyArrayStorage;
          goto LABEL_179;
        }
        goto LABEL_176;
      }
      ++v47;
    }
LABEL_81:
    swift_bridgeObjectRelease_n();
    if (__OFADD__(v48, v139)) {
      goto LABEL_156;
    }
    if (v136 >= v48 + v139)
    {
      swift_bridgeObjectRelease();
      uint64_t v41 = v140;
      unint64_t v88 = v140[2];
      id v71 = v142;
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        if (v88)
        {
LABEL_103:
          if (v88 <= v41[2])
          {
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((v41[2 * v88 + 3] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v41[2 * v88 + 3] & 0xFFFFFFFFFFFFFF8)
                                                                                           + 0x18) >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            goto LABEL_44;
          }
          goto LABEL_160;
        }
      }
      else
      {
        uint64_t v41 = sub_10001A284(v140);
        if (v88) {
          goto LABEL_103;
        }
      }
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
      goto LABEL_162;
    }
    uint64_t v74 = v140;
    if (!v31) {
      goto LABEL_115;
    }
    unint64_t v75 = v31 - 1;
    if (__OFSUB__(v31, 1)) {
      goto LABEL_161;
    }
    if ((v143 & 0xC000000000000001) == 0)
    {
      if ((v75 & 0x8000000000000000) == 0)
      {
        if (v75 < *(void *)((v143 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          id v76 = *(id *)(v143 + 8 * v75 + 32);
          goto LABEL_89;
        }
LABEL_164:
        __break(1u);
LABEL_165:
        __break(1u);
LABEL_166:
        __break(1u);
        goto LABEL_167;
      }
LABEL_162:
      __break(1u);
LABEL_163:
      __break(1u);
      goto LABEL_164;
    }
    swift_bridgeObjectRetain();
    id v76 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    swift_bridgeObjectRelease();
LABEL_89:
    unint64_t v31 = (unint64_t)v76;
    uint64_t v77 = sub_10000EB54();
    if (__OFSUB__(v48, v77)) {
      goto LABEL_163;
    }
    if (sub_10000EB54() >= v48 - v77) {
      goto LABEL_114;
    }
    id v78 = [v142 componentKey];
    id v79 = [v133 components];
    unint64_t v31 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (!(v31 >> 62))
    {
      uint64_t v80 = *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v80) {
        goto LABEL_93;
      }
LABEL_183:
      swift_bridgeObjectRelease();
      __break(1u);
LABEL_184:
      swift_release();
      __break(1u);
      swift_release();
      __break(1u);
      swift_unexpectedError();
      __break(1u);
LABEL_185:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x10000D480);
    }
    swift_bridgeObjectRetain();
    uint64_t v80 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v80) {
      goto LABEL_183;
    }
LABEL_93:
    unint64_t v81 = v80 - 1;
    if (__OFSUB__(v80, 1)) {
      goto LABEL_165;
    }
    if ((v31 & 0xC000000000000001) != 0)
    {
      id v82 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_98;
    }
    if ((v81 & 0x8000000000000000) != 0) {
      goto LABEL_166;
    }
    if (v81 >= *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_167:
      __break(1u);
LABEL_168:
      __break(1u);
LABEL_169:
      __break(1u);
LABEL_170:
      __break(1u);
LABEL_171:
      __break(1u);
LABEL_172:
      __break(1u);
LABEL_173:
      __break(1u);
LABEL_174:
      __break(1u);
      continue;
    }
    break;
  }
  id v82 = *(id *)(v31 + 8 * v81 + 32);
LABEL_98:
  int v83 = v82;
  swift_bridgeObjectRelease();
  unint64_t v31 = (unint64_t)[v83 componentKey];

  uint64_t v84 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v86 = v85;
  if (v84 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v86 == v87)
  {

    swift_bridgeObjectRelease_n();
    goto LABEL_108;
  }
  char v89 = _stringCompareWithSmolCheck(_:_:expecting:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v89 & 1) == 0)
  {
LABEL_114:

    uint64_t v74 = v140;
LABEL_115:
    swift_bridgeObjectRelease();
    uint64_t v100 = v74[2];
    sub_10000435C(&qword_1000A8B30);
    uint64_t v101 = swift_allocObject();
    *(_OWORD *)(v101 + 16) = xmmword_100083940;
    *(void *)(v101 + 32) = v142;
    v148[0] = v101;
    specialized Array._endMutation()();
    uint64_t v102 = v148[0];
    id v71 = v142;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v74 = sub_100014C74(0, v74[2] + 1, 1, v74);
    }
    unint64_t v104 = v74[2];
    unint64_t v103 = v74[3];
    v105 = v74;
    if (v104 >= v103 >> 1) {
      v105 = sub_100014C74((void *)(v103 > 1), v104 + 1, 1, v74);
    }
    _DWORD v105[2] = v104 + 1;
    v106 = &v105[2 * v104];
    uint64_t v41 = v105;
    v106[4] = v100;
    v106[5] = v102;
    goto LABEL_44;
  }
LABEL_108:
  if (!v140[2]) {
    goto LABEL_168;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v140 = sub_10001A284(v140);
  }
  uint64_t v90 = v140[2];
  if (!v90) {
    goto LABEL_169;
  }
  v140[2] = v90 - 1;
  swift_bridgeObjectRelease();
  uint64_t v91 = v140[2];
  uint64_t v92 = sub_10001CD14(1, v143);
  uint64_t v94 = v93;
  uint64_t v96 = v95;
  unint64_t v98 = v97;
  swift_bridgeObjectRelease();
  if ((v98 & 1) == 0) {
    goto LABEL_113;
  }
  id v107 = v76;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  v108 = (void *)swift_dynamicCastClass();
  if (!v108)
  {
    swift_unknownObjectRelease();
    v108 = _swiftEmptyArrayStorage;
  }
  uint64_t v109 = v108[2];
  swift_release();
  if (__OFSUB__(v98 >> 1, v96)) {
    goto LABEL_181;
  }
  if (v109 == (v98 >> 1) - v96)
  {
    uint64_t v99 = (void *)swift_dynamicCastClass();
    id v76 = v107;
    if (!v99)
    {
      swift_unknownObjectRelease();
      uint64_t v99 = _swiftEmptyArrayStorage;
    }
  }
  else
  {
    swift_unknownObjectRelease();
    id v76 = v107;
LABEL_113:
    uint64_t v99 = sub_100015184(v92, v94, v96, v98, &qword_1000A8AD0);
  }
  swift_unknownObjectRelease();
  unint64_t v111 = v140[2];
  unint64_t v110 = v140[3];
  unint64_t v112 = v111 + 1;
  if (v111 >= v110 >> 1) {
    uint64_t v140 = sub_100014C74((void *)(v110 > 1), v111 + 1, 1, v140);
  }
  v140[2] = v112;
  long long v113 = &v140[2 * v111];
  v113[4] = v91;
  v113[5] = v99;
  sub_10000435C(&qword_1000A8B30);
  uint64_t v114 = swift_allocObject();
  *(_OWORD *)(v114 + 16) = xmmword_100083930;
  *(void *)(v114 + 32) = v76;
  *(void *)(v114 + 40) = v142;
  v148[0] = v114;
  specialized Array._endMutation()();
  uint64_t v115 = v148[0];
  long long v116 = v76;
  unint64_t v117 = v140[2];
  unint64_t v118 = v140[3];
  id v71 = v116;
  id v119 = v142;
  if (v117 >= v118 >> 1) {
    uint64_t v41 = sub_100014C74((void *)(v118 > 1), v117 + 1, 1, v140);
  }
  else {
    uint64_t v41 = v140;
  }
  v41[2] = v117 + 1;
  uint64_t v120 = &v41[2 * v117];
  v120[4] = v112;
  v120[5] = v115;

LABEL_44:
  unint64_t v31 = v141;
  if (v141 != v137) {
    goto LABEL_45;
  }
  swift_bridgeObjectRelease();
  uint64_t v121 = v41[2];
  if (!v121) {
    goto LABEL_178;
  }
LABEL_140:
  swift_bridgeObjectRetain();
  uint64_t v122 = v41 + 5;
  char v123 = _swiftEmptyArrayStorage;
  while (2)
  {
    uint64_t v125 = *(v122 - 1);
    uint64_t v124 = *v122;
    if ((unint64_t)*v122 >> 62)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v131 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v131) {
        goto LABEL_141;
      }
LABEL_145:
      char v127 = swift_isUniquelyReferenced_nonNull_native();
      v148[0] = (uint64_t)v123;
      if ((v127 & 1) == 0)
      {
        sub_10001549C(0, v123[2] + 1, 1);
        char v123 = (void *)v148[0];
      }
      unint64_t v129 = v123[2];
      unint64_t v128 = v123[3];
      if (v129 >= v128 >> 1)
      {
        sub_10001549C(v128 > 1, v129 + 1, 1);
        char v123 = (void *)v148[0];
      }
      v123[2] = v129 + 1;
      v130 = &v123[2 * v129];
      v130[4] = v125;
      v130[5] = v124;
    }
    else
    {
      uint64_t v126 = *(void *)((v124 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v126) {
        goto LABEL_145;
      }
LABEL_141:
      swift_bridgeObjectRelease();
    }
    v122 += 2;
    if (--v121) {
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
LABEL_179:
  swift_bridgeObjectRelease();
  return v123;
}

BOOL sub_10000D494(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  int v3 = *(unsigned __int8 *)(a1 + 48);
  double v5 = *(double *)(a1 + 56);
  double v4 = *(double *)(a1 + 64);
  unint64_t v6 = *(void **)(a2 + 8);
  int v7 = *(unsigned __int8 *)(a2 + 48);
  double v9 = *(double *)(a2 + 56);
  double v8 = *(double *)(a2 + 64);
  sub_100013C6C(*(void *)a1, *(void *)a2);
  if ((v10 & 1) == 0 || (sub_1000145F4(v2, v6) & 1) == 0) {
    return 0;
  }
  char v11 = static EdgeInsets.== infix(_:_:)();
  BOOL result = 0;
  if ((v11 & 1) != 0 && ((v3 ^ v7) & 1) == 0) {
    return v4 == v8 && v5 == v9;
  }
  return result;
}

uint64_t sub_10000D598@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v5 = *(unsigned char *)(a2 + 48);
  if (*(void *)(*(void *)a2 + 16))
  {
    uint64_t v6 = *a1;
    uint64_t v7 = a1[1];
    swift_bridgeObjectRetain();
    sub_100018964(v6, v7);
    if (v8) {
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
  }
  char v9 = v5 & 1;
  uint64_t v10 = *(void *)(a2 + 72);
  char v11 = *(unsigned char *)(a2 + 80);
  sub_10001F504(v10, v11);
  char v12 = sub_100012C58(v10, v11);
  sub_10001F574(v10, v11);
  double v13 = sub_1000748C8(v9, v12);
  *(void *)a3 = static HorizontalAlignment.center.getter();
  *(double *)(a3 + 8) = v13;
  *(unsigned char *)(a3 + 16) = 0;
  sub_10000435C(&qword_1000A8C60);
  uint64_t v14 = swift_allocObject();
  long long v15 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v14 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v14 + 64) = v15;
  *(_OWORD *)(v14 + 80) = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(v14 + 96) = *(unsigned char *)(a2 + 80);
  long long v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v14 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v14 + 32) = v16;
  sub_10001EC9C(a2);
  sub_10000435C(&qword_1000A8C68);
  sub_10000435C(&qword_1000A8C70);
  sub_10000A368(&qword_1000A8C78, &qword_1000A8C68);
  sub_10001ED48();
  sub_10001EE64();
  return ForEach<>.init(_:content:)();
}

uint64_t sub_10000D784@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v76 = a3;
  uint64_t v5 = sub_10000435C(&qword_1000A8CA0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = &v64[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = sub_10000435C(&qword_1000A8C90);
  __chkstk_darwin(v8);
  uint64_t v77 = &v64[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = (int *)sub_10000435C(&qword_1000A8C70);
  __chkstk_darwin(v10);
  char v12 = &v64[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = *a1;
  unint64_t v14 = a1[1];
  uint64_t v15 = *(void *)(a2 + 72);
  int v16 = *(unsigned __int8 *)(a2 + 80);
  sub_10001F504(v15, *(unsigned char *)(a2 + 80));
  LOBYTE(a1) = sub_100012C58(v15, v16);
  uint64_t v75 = v15;
  int v74 = v16;
  sub_10001F574(v15, v16);
  double v17 = dbl_100083F28[(char)a1];
  double v18 = *(double *)(a2 + 56);
  uint64_t v19 = sub_10000DDA8(v13, v14);
  if (__OFSUB__(v19, 1)) {
    goto LABEL_23;
  }
  uint64_t v70 = v19 - 1;
  uint64_t v71 = v8;
  uint64_t v69 = sub_10000DDA8(v13, v14);
  if (v14 >> 62) {
    goto LABEL_24;
  }
  uint64_t v20 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  uint64_t v21 = v20;
  while (1)
  {
    uint64_t v22 = (uint64_t)v77;
    unint64_t v72 = v10;
    unint64_t v73 = v12;
    if (!v20) {
      break;
    }
    uint64_t v66 = v21;
    uint64_t v67 = a2;
    BOOL v65 = v21 == 1;
    uint64_t v68 = v7;
    unint64_t v78 = v14 & 0xC000000000000001;
    a2 = 4;
    while (1)
    {
      uint64_t v23 = v78 ? (int *)specialized _ArrayBuffer._getElementSlowPath(_:)() : (int *)*(id *)(v14 + 8 * a2);
      uint64_t v10 = v23;
      uint64_t v7 = (unsigned char *)(a2 - 3);
      if (__OFADD__(a2 - 4, 1)) {
        break;
      }
      unint64_t v24 = v14;
      id v25 = [v23 componentKey];
      uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v28 = v27;
      if (v26 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v28 == v29)
      {

        swift_bridgeObjectRelease_n();
LABEL_19:
        uint64_t v22 = (uint64_t)v77;
        a2 = v67;
        uint64_t v7 = v68;
        BOOL v32 = v65;
LABEL_20:
        uint64_t v21 = v66;
        goto LABEL_21;
      }
      char v12 = v29;
      char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v31) {
        goto LABEL_19;
      }
      ++a2;
      unint64_t v14 = v24;
      if (v7 == (unsigned char *)v20)
      {
        BOOL v32 = 0;
        uint64_t v22 = (uint64_t)v77;
        a2 = v67;
        uint64_t v7 = v68;
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain_n();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
  }
  BOOL v32 = 0;
LABEL_21:
  BOOL v33 = v21 == 1;
  swift_bridgeObjectRelease_n();
  uint64_t v34 = v75;
  char v35 = v74;
  sub_10001F504(v75, v74);
  char v36 = sub_100012C58(v34, v35);
  sub_10001F574(v34, v35);
  uint64_t v37 = qword_100083F00[v36];
  double v38 = (v18 - v17 * (double)v70) / (double)v69;
  *(void *)uint64_t v7 = static VerticalAlignment.center.getter();
  *((void *)v7 + 1) = v37;
  v7[16] = 0;
  sub_10000435C(&qword_1000A8CB0);
  unint64_t v39 = swift_bridgeObjectRetain();
  uint64_t v40 = sub_10001C6A4(v39);
  swift_bridgeObjectRelease();
  uint64_t v79 = v40;
  swift_getKeyPath();
  uint64_t v41 = swift_allocObject();
  *(double *)(v41 + 16) = v38;
  long long v42 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v41 + 56) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v41 + 72) = v42;
  *(_OWORD *)(v41 + 88) = *(_OWORD *)(a2 + 64);
  long long v43 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v41 + 24) = *(_OWORD *)a2;
  *(unsigned char *)(v41 + 104) = *(unsigned char *)(a2 + 80);
  *(_OWORD *)(v41 + 40) = v43;
  *(unsigned char *)(v41 + 105) = !v32;
  *(unsigned char *)(v41 + 106) = v33;
  sub_10001EC9C(a2);
  sub_10000435C(&qword_1000A8CB8);
  sub_10000435C(&qword_1000A8CC0);
  sub_10000A368(&qword_1000A8CC8, &qword_1000A8CB8);
  sub_10001F868(&qword_1000A8CD0, &qword_1000A8CC0, (void (*)(void))sub_10001EF18);
  ForEach<>.init(_:id:content:)();
  LOBYTE(v37) = static Edge.Set.leading.getter();
  EdgeInsets.init(_all:)();
  uint64_t v45 = v44;
  uint64_t v47 = v46;
  uint64_t v49 = v48;
  uint64_t v51 = v50;
  sub_100009E70((uint64_t)v7, v22, &qword_1000A8CA0);
  uint64_t v52 = v22 + *(int *)(v71 + 36);
  *(unsigned char *)uint64_t v52 = v37;
  *(void *)(v52 + 8) = v45;
  *(void *)(v52 + 16) = v47;
  *(void *)(v52 + 24) = v49;
  *(void *)(v52 + 32) = v51;
  *(unsigned char *)(v52 + 40) = 0;
  sub_100009ED4((uint64_t)v7, &qword_1000A8CA0);
  LOBYTE(v37) = static Edge.Set.trailing.getter();
  EdgeInsets.init(_all:)();
  uint64_t v54 = v53;
  uint64_t v56 = v55;
  uint64_t v58 = v57;
  uint64_t v60 = v59;
  uint64_t v61 = (uint64_t)v73;
  sub_100009E70(v22, (uint64_t)v73, &qword_1000A8C90);
  uint64_t v62 = v61 + v72[9];
  *(unsigned char *)uint64_t v62 = v37;
  *(void *)(v62 + 8) = v54;
  *(void *)(v62 + 16) = v56;
  *(void *)(v62 + 24) = v58;
  *(void *)(v62 + 32) = v60;
  *(unsigned char *)(v62 + 40) = 0;
  sub_100009ED4(v22, &qword_1000A8C90);
  return sub_100009F30(v61, v76, &qword_1000A8C70);
}

uint64_t sub_10000DDA8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    goto LABEL_12;
  }
  uint64_t v3 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain_n();
  if (v3)
  {
    while (v3 >= 1)
    {
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      while (1)
      {
        id v7 = (a2 & 0xC000000000000001) != 0
           ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
           : *(id *)(a2 + 8 * v5 + 32);
        uint64_t v8 = v7;
        uint64_t v9 = sub_10000EB54();

        BOOL v10 = __OFADD__(v6, v9);
        v6 += v9;
        if (v10) {
          break;
        }
        if (v3 == ++v5) {
          goto LABEL_14;
        }
      }
      __break(1u);
LABEL_12:
      swift_bridgeObjectRetain_n();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v3 = result;
      if (!result) {
        goto LABEL_13;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_13:
    uint64_t v6 = 0;
LABEL_14:
    swift_bridgeObjectRelease_n();
    return v6;
  }
  return result;
}

uint64_t sub_10000DEA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v10 = *(void *)(a2 + 72);
  char v11 = *(unsigned char *)(a2 + 80);
  id v12 = *(id *)(a1 + 8);
  sub_10001F504(v10, v11);
  char v13 = sub_100012C58(v10, v11);
  sub_10001F574(v10, v11);
  uint64_t v14 = sub_10000EB54();
  double v15 = dbl_100083F28[v13];
  uint64_t result = sub_10000EB54();
  if (__OFSUB__(result, 1))
  {
    __break(1u);
  }
  else
  {
    double v17 = (double)v14 * a6 + v15 * (double)(result - 1);
    uint64_t v18 = sub_10001DFA4(v13, v17);
    double v19 = 0.0;
    if ((a3 & 1) == 0) {
      double v19 = *(double *)(a2 + 24) + *(double *)(a2 + 40);
    }

    if (v18 < 1)
    {

      sub_10001F384((uint64_t)v29);
    }
    else
    {
      type metadata accessor for TextFormattingState();
      sub_1000200D8((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
      id v20 = v12;
      uint64_t v21 = EnvironmentObject.init()();
      uint64_t v26 = v22;
      uint64_t v27 = v21;
      uint64_t KeyPath = swift_getKeyPath();
      uint64_t v24 = swift_getKeyPath();
      static Alignment.center.getter();
      _FrameLayout.init(width:height:alignment:)();
      id v23 = [v20 componentKey];

      v29[0] = v27;
      v29[1] = v26;
      v29[2] = KeyPath;
      char v30 = 0;
      char v31 = 0;
      uint64_t v32 = v24;
      char v33 = 0;
      id v34 = v20;
      uint64_t v35 = v52;
      char v36 = v53;
      uint64_t v37 = v54;
      char v38 = v55;
      uint64_t v39 = v56;
      uint64_t v40 = v57;
      id v41 = v23;
      uint64_t v42 = swift_getKeyPath();
      uint64_t v43 = v18;
      char v44 = 0;
      uint64_t v45 = swift_getKeyPath();
      double v46 = v17 + v19;
      uint64_t v47 = swift_getKeyPath();
      double v48 = a6;
      uint64_t v49 = swift_getKeyPath();
      char v50 = a4 & 1;
      nullsub_1(v29);
    }
    sub_100009F30((uint64_t)v29, (uint64_t)v51, &qword_1000A8CC0);
    return sub_100009F30((uint64_t)v51, a5, &qword_1000A8CC0);
  }
  return result;
}

uint64_t sub_10000E1D4@<X0>(uint64_t a1@<X8>)
{
  sub_10001F4A4();
  uint64_t result = EnvironmentValues.subscript.getter();
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return result;
}

uint64_t sub_10000E22C()
{
  return EnvironmentValues.subscript.setter();
}

double sub_10000E280@<D0>(double *a1@<X8>)
{
  return sub_10000E2E0((void (*)(void))sub_10001F450, a1);
}

uint64_t sub_10000E2A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000E35C(a1, a2, a3, a4, (void (*)(void))sub_10001F450);
}

double sub_10000E2C0@<D0>(double *a1@<X8>)
{
  return sub_10000E2E0((void (*)(void))sub_10001F3FC, a1);
}

double sub_10000E2E0@<D0>(void (*a1)(void)@<X3>, double *a2@<X8>)
{
  a1();
  EnvironmentValues.subscript.getter();
  double result = v4;
  *a2 = v4;
  return result;
}

uint64_t sub_10000E33C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000E35C(a1, a2, a3, a4, (void (*)(void))sub_10001F3FC);
}

uint64_t sub_10000E35C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  return EnvironmentValues.subscript.setter();
}

uint64_t sub_10000E3AC@<X0>(unsigned char *a1@<X8>)
{
  sub_10001F3A8();
  uint64_t result = EnvironmentValues.subscript.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_10000E3FC()
{
  return EnvironmentValues.subscript.setter();
}

uint64_t sub_10000E448@<X0>(uint64_t a1@<X8>)
{
  long long v3 = *(_OWORD *)(v1 + 48);
  v12[2] = *(_OWORD *)(v1 + 32);
  v12[3] = v3;
  v12[4] = *(_OWORD *)(v1 + 64);
  char v13 = *(unsigned char *)(v1 + 80);
  long long v4 = *(_OWORD *)(v1 + 16);
  v12[0] = *(_OWORD *)v1;
  v12[1] = v4;
  if (*((double *)&v3 + 1) <= 0.0)
  {
    uint64_t v10 = sub_10000435C(&qword_1000A8C38);
    char v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
    return v11(a1, 1, 1, v10);
  }
  else
  {
    uint64_t v14 = *((void *)&v12[0] + 1);
    swift_getKeyPath();
    uint64_t v5 = swift_allocObject();
    long long v6 = *(_OWORD *)(v1 + 48);
    *(_OWORD *)(v5 + 48) = *(_OWORD *)(v1 + 32);
    *(_OWORD *)(v5 + 64) = v6;
    *(_OWORD *)(v5 + 80) = *(_OWORD *)(v1 + 64);
    *(unsigned char *)(v5 + 96) = *(unsigned char *)(v1 + 80);
    long long v7 = *(_OWORD *)(v1 + 16);
    *(_OWORD *)(v5 + 16) = *(_OWORD *)v1;
    *(_OWORD *)(v5 + 32) = v7;
    sub_10001EC70((uint64_t)&v14);
    sub_10001EC9C((uint64_t)v12);
    sub_10000435C(&qword_1000A8C40);
    sub_10000435C(&qword_1000A8C48);
    sub_10000A368(&qword_1000A8C50, &qword_1000A8C40);
    sub_10000A368(&qword_1000A8C58, &qword_1000A8C48);
    ForEach<>.init(_:id:content:)();
    uint64_t v8 = sub_10000435C(&qword_1000A8C38);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a1, 0, 1, v8);
  }
}

double sub_10000E67C(char a1, uint64_t a2)
{
  double v3 = 44.0;
  switch(a1)
  {
    case 1:
    case 3:
      return v3 * (double)a2;
    case 2:
    case 4:
      id v4 = [self mainScreen];
      [v4 _referenceBounds];
      CGFloat v6 = v5;
      CGFloat v8 = v7;
      CGFloat v10 = v9;
      CGFloat v12 = v11;

      v15.origin.x = v6;
      v15.origin.y = v8;
      v15.size.width = v10;
      v15.size.height = v12;
      BOOL v13 = CGRectGetHeight(v15) > 667.0;
      double v3 = 50.0;
      if (!v13) {
        double v3 = 45.0;
      }
      break;
    default:
      double v3 = 45.0;
      break;
  }
  return v3 * (double)a2;
}

BOOL static UITextFormattingViewControllerComponentSize.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 < a2;
}

uint64_t sub_10000E790()
{
  return sub_1000200D8(&qword_1000A85E8, type metadata accessor for ComponentSize);
}

BOOL sub_10000E7D8(void *a1, void *a2)
{
  return *a1 < *a2;
}

BOOL sub_10000E7EC(void *a1, void *a2)
{
  return *a2 >= *a1;
}

BOOL sub_10000E800(void *a1, void *a2)
{
  return *a1 >= *a2;
}

BOOL sub_10000E814(void *a1, void *a2)
{
  return *a2 < *a1;
}

uint64_t destroy for TextFormattingLayout()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TextFormattingLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TextFormattingLayout(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  return a1;
}

__n128 initializeWithTake for TextFormattingLayout(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for TextFormattingLayout(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for TextFormattingLayout(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TextFormattingLayout(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TextFormattingLayout()
{
  return &type metadata for TextFormattingLayout;
}

void *initializeBufferWithCopyOfBuffer for TextFormattingView(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for TextFormattingView()
{
  return swift_release();
}

void *assignWithCopy for TextFormattingView(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for TextFormattingView(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for TextFormattingView()
{
  return &type metadata for TextFormattingView;
}

uint64_t sub_10000EB38()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10000EB54()
{
  if ([v0 preferredSize]) {
    id v1 = [v0 preferredSize];
  }
  else {
    id v1 = (id)sub_10000EC94();
  }
  id v2 = v1;
  sub_10000435C(&qword_1000A8B20);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100083920;

  *(void *)(inited + 32) = 1;
  *(void *)(inited + 40) = v2;
  sub_10001CB50(inited);
  swift_setDeallocating();
  uint64_t v4 = swift_bridgeObjectRetain();
  double v5 = sub_100014F90(v4);
  swift_bridgeObjectRelease();
  double v9 = v5;
  sub_10001A200((uint64_t *)&v9, sub_10001C64C, sub_10001A298);
  swift_bridgeObjectRelease();
  uint64_t v6 = v9[2];
  if (v6)
  {
    uint64_t v7 = v9[v6 + 3];
    swift_release();
    return v7;
  }
  else
  {
    swift_release();
    __break(1u);
    uint64_t result = swift_release();
    __break(1u);
  }
  return result;
}

uint64_t sub_10000EC94()
{
  id v1 = [v0 componentKey];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;
  if (v2 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v4 == v5)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_15;
  }
  char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v7)
  {
LABEL_15:

    return 5;
  }
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;
  if (v8 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v10 == v11)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_17;
  }
  char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v13)
  {
LABEL_17:

    return 4;
  }
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;
  if (v14 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v16 == v17) {
    goto LABEL_13;
  }
  char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v19) {
    goto LABEL_19;
  }
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v22 = v21;
  if (v20 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v22 == v23) {
    goto LABEL_22;
  }
  char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v24) {
    goto LABEL_24;
  }
  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v27 = v26;
  if (v25 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v27 == v28) {
    goto LABEL_13;
  }
  char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v29) {
    goto LABEL_19;
  }
  uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v32 = v31;
  if (v30 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v32 == v33) {
    goto LABEL_30;
  }
  char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v34) {
    goto LABEL_32;
  }
  uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v37 = v36;
  if (v35 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v37 == v38)
  {
LABEL_30:
    swift_bridgeObjectRelease_n();
LABEL_32:

    return 1;
  }
  char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v39) {
    goto LABEL_32;
  }
  uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v42 = v41;
  if (v40 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v42 == v43) {
    goto LABEL_22;
  }
  char v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v44) {
    goto LABEL_24;
  }
  uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v47 = v46;
  if (v45 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v47 == v48) {
    goto LABEL_30;
  }
  char v49 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v49) {
    goto LABEL_32;
  }
  uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v52 = v51;
  if (v50 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v52 == v53)
  {
LABEL_13:
    swift_bridgeObjectRelease_n();
LABEL_19:

    return 3;
  }
  char v54 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v54) {
    goto LABEL_19;
  }
  uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v57 = v56;
  if (v55 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v57 == v58) {
    goto LABEL_30;
  }
  char v59 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v59) {
    goto LABEL_32;
  }
  uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v62 = v61;
  if (v60 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v62 == v63) {
    goto LABEL_22;
  }
  char v64 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v64) {
    goto LABEL_24;
  }
  uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v67 = v66;
  if (v65 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v67 == v68) {
    goto LABEL_30;
  }
  char v69 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v69) {
    goto LABEL_32;
  }
  uint64_t v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v72 = v71;
  if (v70 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v72 == v73)
  {
LABEL_22:
    swift_bridgeObjectRelease_n();
LABEL_24:

    return 2;
  }
  char v74 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v74) {
    goto LABEL_24;
  }
  uint64_t v75 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v77 = v76;
  if (v75 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v77 == v78) {
    goto LABEL_30;
  }
  char v79 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v79) {
    goto LABEL_32;
  }
  uint64_t v80 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v82 = v81;
  if (v80 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v82 == v83)
  {
    uint64_t v84 = 2;
  }
  else if (_stringCompareWithSmolCheck(_:_:expecting:)())
  {
    uint64_t v84 = 2;
  }
  else
  {
    uint64_t v84 = 3;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v84;
}

uint64_t sub_10000F3A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_10000435C(&qword_1000A8D90);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000435C(&qword_1000A8D98);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F5F8((uint64_t)v5);
  if (*(void *)v1)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v9 = v16[1];
    id v10 = [*(id *)(v1 + 48) componentKey];
    char v11 = sub_1000125BC((uint64_t)v10, v9);

    swift_bridgeObjectRelease();
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v13 = swift_allocObject();
    *(unsigned char *)(v13 + 16) = v11 & 1;
    sub_100009E70((uint64_t)v5, (uint64_t)v8, &qword_1000A8D90);
    uint64_t v14 = (uint64_t *)&v8[*(int *)(v6 + 36)];
    uint64_t *v14 = KeyPath;
    v14[1] = (uint64_t)sub_10001FA04;
    v14[2] = v13;
    sub_100009ED4((uint64_t)v5, &qword_1000A8D90);
    return sub_100009F30((uint64_t)v8, a1, &qword_1000A8D98);
  }
  else
  {
    type metadata accessor for TextFormattingState();
    sub_1000200D8((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10000F5F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v275 = a1;
  uint64_t v2 = sub_10000435C(&qword_1000A8DA0);
  __chkstk_darwin(v2);
  v259 = (uint64_t *)((char *)&v258 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v263 = sub_10000435C(&qword_1000A8DA8);
  __chkstk_darwin(v263);
  v260 = (char *)&v258 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (int *)type metadata accessor for TFTextColorControl();
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v258 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v258 = (uint64_t)&v258 - v9;
  uint64_t v265 = sub_10000435C(&qword_1000A8DB0);
  __chkstk_darwin(v265);
  v267 = (_OWORD *)((char *)&v258 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v261 = sub_10000435C(&qword_1000A8DB8);
  __chkstk_darwin(v261);
  v262 = (_OWORD *)((char *)&v258 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v266 = sub_10000435C(&qword_1000A8DC0);
  __chkstk_darwin(v266);
  v264 = (char *)&v258 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v270 = sub_10000435C(&qword_1000A8DC8);
  __chkstk_darwin(v270);
  v268 = (char *)&v258 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v271 = sub_10000435C(&qword_1000A8DD0);
  __chkstk_darwin(v271);
  v274 = (_OWORD *)((char *)&v258 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v269 = sub_10000435C(&qword_1000A8DD8);
  __chkstk_darwin(v269);
  uint64_t v16 = (char *)&v258 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v273 = sub_10000435C(&qword_1000A8DE0);
  __chkstk_darwin(v273);
  v272 = (char *)&v258 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void **)(v1 + 48);
  id v19 = [v18 componentKey];
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v22 = v21;
  if (v20 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v22 == v23)
  {
    swift_bridgeObjectRelease_n();
LABEL_5:

    sub_10005454C((__n128 *)v297);
    if (BYTE1(v298)) {
      uint64_t v25 = 256;
    }
    else {
      uint64_t v25 = 0;
    }
    *(_OWORD *)v294 = *(_OWORD *)v297;
    *(void *)&v294[16] = *(void *)&v297[16];
    *(void *)&v294[24] = v25 | v298;
    *(void *)&v294[32] = v299;
    *(void *)&v294[40] = v300;
    *(void *)&v294[48] = v301;
    *(void *)&v294[56] = v302;
    *(void *)&v294[64] = v303;
    *(void *)&v294[72] = v304;
    *(_OWORD *)&v294[80] = v305;
    *(void *)&v294[96] = v306;
    LOBYTE(v295) = 0;
    sub_100020618((uint64_t)v297);
    sub_10001FBE8();
    sub_10001FC3C();
    _ConditionalContent<>.init(storage:)();
    *(_OWORD *)v294 = v285;
    *(_OWORD *)&v294[16] = v286;
    *(_OWORD *)&v294[32] = v287;
    *(_OWORD *)&v294[48] = v288;
    *(_OWORD *)&v294[64] = v289;
    *(_OWORD *)&v294[80] = v290;
    *(void *)&v294[96] = v291;
    __int16 v295 = v292;
    sub_10000435C(&qword_1000A8E28);
    sub_10000435C(&qword_1000A8E48);
    sub_10001FBAC();
    sub_10001FC90();
    _ConditionalContent<>.init(storage:)();
    if (v284) {
      __int16 v26 = 256;
    }
    else {
      __int16 v26 = 0;
    }
    long long v285 = v276;
    long long v286 = v277;
    long long v287 = v278;
    long long v288 = v279;
    long long v289 = v280;
    unsigned long long v290 = v281;
    uint64_t v291 = v282;
    __int16 v292 = v26 | v283;
    char v293 = 0;
    sub_10000435C(&qword_1000A8E18);
    sub_10000435C(&qword_1000A8E68);
    sub_10001FB70();
    sub_10001FD74();
    _ConditionalContent<>.init(storage:)();
    uint64_t v27 = *(void *)&v294[96];
    __int16 v28 = v295;
    char v29 = v296;
    long long v30 = *(_OWORD *)&v294[16];
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v294;
    *((_OWORD *)v16 + 1) = v30;
    long long v31 = *(_OWORD *)&v294[48];
    *((_OWORD *)v16 + 2) = *(_OWORD *)&v294[32];
    *((_OWORD *)v16 + 3) = v31;
    long long v32 = *(_OWORD *)&v294[80];
    *((_OWORD *)v16 + 4) = *(_OWORD *)&v294[64];
    *((_OWORD *)v16 + 5) = v32;
    *((void *)v16 + 12) = v27;
    *((_WORD *)v16 + 52) = v28;
    v16[106] = v29;
    swift_storeEnumTagMultiPayload();
    sub_10000435C(&qword_1000A8E08);
    sub_10001FB34();
    sub_10001FED0();
    uint64_t v33 = (uint64_t)v272;
    _ConditionalContent<>.init(storage:)();
    sub_100009E70(v33, (uint64_t)v274, &qword_1000A8DE0);
    swift_storeEnumTagMultiPayload();
    sub_10000435C(&qword_1000A8DF0);
    sub_10001FA70();
    sub_100020308();
    _ConditionalContent<>.init(storage:)();
    sub_100009ED4(v33, &qword_1000A8DE0);
    return sub_1000206E0((uint64_t)v297);
  }
  char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v24) {
    goto LABEL_5;
  }
  uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v37 = v36;
  if (v35 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v37 == v38)
  {
    swift_bridgeObjectRelease_n();
LABEL_16:

    type metadata accessor for TextFormattingState();
    sub_1000200D8((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t v40 = EnvironmentObject.init()();
    uint64_t v42 = v41;
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v44 = swift_getKeyPath();
    uint64_t v45 = swift_getKeyPath();
    *(void *)v294 = v40;
    *(void *)&v294[8] = v42;
    *(void *)&v294[16] = KeyPath;
    *(void *)&v294[24] = 0;
    *(void *)&v294[32] = v44;
    *(void *)&v294[40] = 0;
    *(void *)&v294[48] = v45;
    memset(&v294[56], 0, 48);
    LOBYTE(v295) = 1;
    sub_10001FBE8();
    sub_10001FC3C();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    _ConditionalContent<>.init(storage:)();
    *(_OWORD *)v294 = v285;
    *(_OWORD *)&v294[16] = v286;
    *(_OWORD *)&v294[32] = v287;
    *(_OWORD *)&v294[48] = v288;
    *(_OWORD *)&v294[64] = v289;
    *(_OWORD *)&v294[80] = v290;
    *(void *)&v294[96] = v291;
    __int16 v295 = v292;
    sub_10000435C(&qword_1000A8E28);
    sub_10000435C(&qword_1000A8E48);
    sub_10001FBAC();
    sub_10001FC90();
    _ConditionalContent<>.init(storage:)();
    if (v284) {
      __int16 v46 = 256;
    }
    else {
      __int16 v46 = 0;
    }
    long long v285 = v276;
    long long v286 = v277;
    long long v287 = v278;
    long long v288 = v279;
    long long v289 = v280;
    unsigned long long v290 = v281;
    uint64_t v291 = v282;
    __int16 v292 = v46 | v283;
    char v293 = 0;
    sub_10000435C(&qword_1000A8E18);
    sub_10000435C(&qword_1000A8E68);
    sub_10001FB70();
    sub_10001FD74();
    _ConditionalContent<>.init(storage:)();
    uint64_t v47 = *(void *)&v294[96];
    __int16 v48 = v295;
    char v49 = v296;
    long long v50 = *(_OWORD *)&v294[16];
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v294;
    *((_OWORD *)v16 + 1) = v50;
    long long v51 = *(_OWORD *)&v294[48];
    *((_OWORD *)v16 + 2) = *(_OWORD *)&v294[32];
    *((_OWORD *)v16 + 3) = v51;
    long long v52 = *(_OWORD *)&v294[80];
    *((_OWORD *)v16 + 4) = *(_OWORD *)&v294[64];
    *((_OWORD *)v16 + 5) = v52;
    *((void *)v16 + 12) = v47;
    *((_WORD *)v16 + 52) = v48;
    v16[106] = v49;
    swift_storeEnumTagMultiPayload();
    sub_10000435C(&qword_1000A8E08);
    sub_10001FB34();
    sub_10001FED0();
    uint64_t v53 = (uint64_t)v272;
    _ConditionalContent<>.init(storage:)();
    sub_100009E70(v53, (uint64_t)v274, &qword_1000A8DE0);
    swift_storeEnumTagMultiPayload();
    sub_10000435C(&qword_1000A8DF0);
    sub_10001FA70();
    sub_100020308();
    _ConditionalContent<>.init(storage:)();
    sub_100009ED4(v53, &qword_1000A8DE0);
    swift_release();
LABEL_20:
    swift_release();
LABEL_21:
    swift_release();
    return swift_release();
  }
  char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v39) {
    goto LABEL_16;
  }
  uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v56 = v55;
  if (v54 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v56 == v57)
  {
    swift_bridgeObjectRelease_n();
LABEL_26:

    type metadata accessor for TextFormattingState();
    sub_1000200D8((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t v59 = EnvironmentObject.init()();
    uint64_t v61 = v60;
    uint64_t v62 = swift_getKeyPath();
    uint64_t v63 = swift_getKeyPath();
    *(void *)v294 = v59;
    *(void *)&v294[8] = v61;
    *(void *)&v294[16] = v62;
    *(void *)&v294[24] = 0;
    *(void *)&v294[32] = v63;
    memset(&v294[40], 0, 42);
    sub_10001FCCC();
    sub_10001FD20();
    swift_retain();
    swift_retain();
    swift_retain();
    _ConditionalContent<>.init(storage:)();
    if (BYTE1(v290)) {
      uint64_t v64 = 256;
    }
    else {
      uint64_t v64 = 0;
    }
    *(_OWORD *)v294 = v285;
    *(_OWORD *)&v294[16] = v286;
    *(_OWORD *)&v294[32] = v287;
    *(_OWORD *)&v294[48] = v288;
    *(_OWORD *)&v294[64] = v289;
    *(void *)&v294[88] = 0;
    *(void *)&v294[96] = 0;
    *(void *)&v294[80] = v64 | v290;
    __int16 v295 = 256;
    sub_10000435C(&qword_1000A8E28);
    sub_10000435C(&qword_1000A8E48);
    sub_10001FBAC();
    sub_10001FC90();
    _ConditionalContent<>.init(storage:)();
    if (v284) {
      __int16 v65 = 256;
    }
    else {
      __int16 v65 = 0;
    }
    long long v285 = v276;
    long long v286 = v277;
    long long v287 = v278;
    long long v288 = v279;
    long long v289 = v280;
    unsigned long long v290 = v281;
    uint64_t v291 = v282;
    __int16 v292 = v65 | v283;
    char v293 = 0;
    sub_10000435C(&qword_1000A8E18);
    sub_10000435C(&qword_1000A8E68);
    sub_10001FB70();
    sub_10001FD74();
    _ConditionalContent<>.init(storage:)();
    uint64_t v66 = *(void *)&v294[96];
    __int16 v67 = v295;
    char v68 = v296;
    long long v69 = *(_OWORD *)&v294[16];
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v294;
    *((_OWORD *)v16 + 1) = v69;
    long long v70 = *(_OWORD *)&v294[48];
    *((_OWORD *)v16 + 2) = *(_OWORD *)&v294[32];
    *((_OWORD *)v16 + 3) = v70;
    long long v71 = *(_OWORD *)&v294[80];
    *((_OWORD *)v16 + 4) = *(_OWORD *)&v294[64];
    *((_OWORD *)v16 + 5) = v71;
    *((void *)v16 + 12) = v66;
    *((_WORD *)v16 + 52) = v67;
    v16[106] = v68;
    swift_storeEnumTagMultiPayload();
    sub_10000435C(&qword_1000A8E08);
    sub_10001FB34();
    sub_10001FED0();
    uint64_t v72 = (uint64_t)v272;
    _ConditionalContent<>.init(storage:)();
    sub_100009E70(v72, (uint64_t)v274, &qword_1000A8DE0);
    swift_storeEnumTagMultiPayload();
    sub_10000435C(&qword_1000A8DF0);
    sub_10001FA70();
    sub_100020308();
    _ConditionalContent<>.init(storage:)();
    sub_100009ED4(v72, &qword_1000A8DE0);
    goto LABEL_20;
  }
  char v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v58) {
    goto LABEL_26;
  }
  uint64_t v73 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v75 = v74;
  if (v73 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v75 == v76)
  {
    swift_bridgeObjectRelease_n();
LABEL_37:

    sub_100054694((uint64_t)v297);
    if (BYTE1(v299)) {
      uint64_t v78 = 256;
    }
    else {
      uint64_t v78 = 0;
    }
    *(_OWORD *)&v294[8] = *(_OWORD *)&v297[8];
    *(void *)v294 = v297[0];
    *(void *)&v294[24] = v298;
    *(void *)&v294[32] = v78 | v299;
    *(void *)&v294[40] = v300;
    *(void *)&v294[48] = v301;
    *(void *)&v294[56] = v302;
    *(void *)&v294[64] = v303;
    *(void *)&v294[72] = v304;
    v294[80] = v305;
    v294[81] = 1;
    sub_1000204D0((uint64_t)v297);
    sub_10001FCCC();
    sub_10001FD20();
    _ConditionalContent<>.init(storage:)();
    if (BYTE1(v290)) {
      uint64_t v79 = 256;
    }
    else {
      uint64_t v79 = 0;
    }
    *(_OWORD *)v294 = v285;
    *(_OWORD *)&v294[16] = v286;
    *(_OWORD *)&v294[32] = v287;
    *(_OWORD *)&v294[48] = v288;
    *(_OWORD *)&v294[64] = v289;
    *(void *)&v294[88] = 0;
    *(void *)&v294[96] = 0;
    *(void *)&v294[80] = v79 | v290;
    __int16 v295 = 256;
    sub_10000435C(&qword_1000A8E28);
    sub_10000435C(&qword_1000A8E48);
    sub_10001FBAC();
    sub_10001FC90();
    _ConditionalContent<>.init(storage:)();
    if (v284) {
      __int16 v80 = 256;
    }
    else {
      __int16 v80 = 0;
    }
    long long v285 = v276;
    long long v286 = v277;
    long long v287 = v278;
    long long v288 = v279;
    long long v289 = v280;
    unsigned long long v290 = v281;
    uint64_t v291 = v282;
    __int16 v292 = v80 | v283;
    char v293 = 0;
    sub_10000435C(&qword_1000A8E18);
    sub_10000435C(&qword_1000A8E68);
    sub_10001FB70();
    sub_10001FD74();
    _ConditionalContent<>.init(storage:)();
    uint64_t v81 = *(void *)&v294[96];
    __int16 v82 = v295;
    char v83 = v296;
    long long v84 = *(_OWORD *)&v294[16];
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v294;
    *((_OWORD *)v16 + 1) = v84;
    long long v85 = *(_OWORD *)&v294[48];
    *((_OWORD *)v16 + 2) = *(_OWORD *)&v294[32];
    *((_OWORD *)v16 + 3) = v85;
    long long v86 = *(_OWORD *)&v294[80];
    *((_OWORD *)v16 + 4) = *(_OWORD *)&v294[64];
    *((_OWORD *)v16 + 5) = v86;
    *((void *)v16 + 12) = v81;
    *((_WORD *)v16 + 52) = v82;
    v16[106] = v83;
    swift_storeEnumTagMultiPayload();
    sub_10000435C(&qword_1000A8E08);
    sub_10001FB34();
    sub_10001FED0();
    uint64_t v87 = (uint64_t)v272;
    _ConditionalContent<>.init(storage:)();
    sub_100009E70(v87, (uint64_t)v274, &qword_1000A8DE0);
    swift_storeEnumTagMultiPayload();
    sub_10000435C(&qword_1000A8DF0);
    sub_10001FA70();
    sub_100020308();
    _ConditionalContent<>.init(storage:)();
    sub_100009ED4(v87, &qword_1000A8DE0);
    return sub_100020574((uint64_t)v297);
  }
  char v77 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v77) {
    goto LABEL_37;
  }
  uint64_t v88 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v90 = v89;
  if (v88 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v90 == v91)
  {
    swift_bridgeObjectRelease_n();
LABEL_51:

    type metadata accessor for TextFormattingState();
    sub_1000200D8((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t v93 = EnvironmentObject.init()();
    uint64_t v95 = v94;
    uint64_t v96 = swift_getKeyPath();
    uint64_t v97 = swift_getKeyPath();
    uint64_t v98 = swift_getKeyPath();
    uint64_t v99 = swift_getKeyPath();
    *(void *)v294 = 1;
    *(void *)&v294[8] = v93;
    v268 = (char *)v93;
    *(void *)&v294[16] = v95;
    *(void *)&v294[24] = v96;
    *(void *)&v294[32] = 0;
    *(void *)&v294[40] = v97;
    *(void *)&v294[48] = 0;
    *(void *)&v294[56] = v98;
    *(void *)&v294[64] = 0;
    *(void *)&v294[72] = v99;
    *(_WORD *)&v294[80] = 0;
    swift_retain();
    sub_10001F4F8(v96, 0, 0);
    sub_10001F504(v97, 0);
    sub_10001F504(v98, 0);
    sub_10001F504(v99, 0);
    sub_10001FD20();
    sub_10001FDEC();
    _ConditionalContent<>.init(storage:)();
    if (BYTE1(v290)) {
      __int16 v100 = 256;
    }
    else {
      __int16 v100 = 0;
    }
    *(_OWORD *)v294 = v285;
    *(_OWORD *)&v294[16] = v286;
    *(_OWORD *)&v294[32] = v287;
    *(_OWORD *)&v294[48] = v288;
    *(_OWORD *)&v294[64] = v289;
    *(_WORD *)&v294[80] = v100 | v290;
    v294[82] = 0;
    sub_10000435C(&qword_1000A8E78);
    sub_10000435C(&qword_1000A8E90);
    sub_10001FDB0();
    sub_10001FE40();
    _ConditionalContent<>.init(storage:)();
    uint64_t v101 = 0x10000;
    if (!BYTE2(v281)) {
      uint64_t v101 = 0;
    }
    long long v285 = v276;
    long long v286 = v277;
    long long v287 = v278;
    long long v288 = v279;
    long long v289 = v280;
    uint64_t v291 = 0;
    unsigned long long v290 = (unint64_t)v101 | (unsigned __int128)(unsigned __int16)v281;
    __int16 v292 = 0;
    char v293 = 1;
    sub_10000435C(&qword_1000A8E18);
    sub_10000435C(&qword_1000A8E68);
    sub_10001FB70();
    sub_10001FD74();
    _ConditionalContent<>.init(storage:)();
    uint64_t v102 = *(void *)&v294[96];
    __int16 v103 = v295;
    char v104 = v296;
    long long v105 = *(_OWORD *)&v294[16];
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v294;
    *((_OWORD *)v16 + 1) = v105;
    long long v106 = *(_OWORD *)&v294[48];
    *((_OWORD *)v16 + 2) = *(_OWORD *)&v294[32];
    *((_OWORD *)v16 + 3) = v106;
    long long v107 = *(_OWORD *)&v294[80];
    *((_OWORD *)v16 + 4) = *(_OWORD *)&v294[64];
    *((_OWORD *)v16 + 5) = v107;
    *((void *)v16 + 12) = v102;
    *((_WORD *)v16 + 52) = v103;
    v16[106] = v104;
    swift_storeEnumTagMultiPayload();
    sub_10000435C(&qword_1000A8E08);
    sub_10001FB34();
    sub_10001FED0();
    uint64_t v108 = (uint64_t)v272;
    _ConditionalContent<>.init(storage:)();
    sub_100009E70(v108, (uint64_t)v274, &qword_1000A8DE0);
    swift_storeEnumTagMultiPayload();
    sub_10000435C(&qword_1000A8DF0);
    sub_10001FA70();
    sub_100020308();
    _ConditionalContent<>.init(storage:)();
    sub_100009ED4(v108, &qword_1000A8DE0);
    swift_release();
    uint64_t v109 = v96;
    goto LABEL_57;
  }
  char v92 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v92) {
    goto LABEL_51;
  }
  uint64_t v110 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v112 = v111;
  if (v110 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v112 == v113)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_62;
  }
  char v114 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v114)
  {
LABEL_62:

    type metadata accessor for TextFormattingState();
    sub_1000200D8((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t v115 = EnvironmentObject.init()();
    uint64_t v117 = v116;
    uint64_t v118 = swift_getKeyPath();
    *(void *)v294 = 0;
    *(void *)&v294[8] = v115;
    *(void *)&v294[16] = v117;
    *(void *)&v294[24] = v118;
    memset(&v294[32], 0, 48);
    *(_WORD *)&v294[80] = 256;
    sub_10001FD20();
    sub_10001FDEC();
    swift_retain();
    swift_retain();
    _ConditionalContent<>.init(storage:)();
    if (BYTE1(v290)) {
      __int16 v119 = 256;
    }
    else {
      __int16 v119 = 0;
    }
    *(_OWORD *)v294 = v285;
    *(_OWORD *)&v294[16] = v286;
    *(_OWORD *)&v294[32] = v287;
    *(_OWORD *)&v294[48] = v288;
    *(_OWORD *)&v294[64] = v289;
    *(_WORD *)&v294[80] = v119 | v290;
    v294[82] = 0;
    sub_10000435C(&qword_1000A8E78);
    sub_10000435C(&qword_1000A8E90);
    sub_10001FDB0();
    sub_10001FE40();
    _ConditionalContent<>.init(storage:)();
    uint64_t v120 = 0x10000;
    if (!BYTE2(v281)) {
      uint64_t v120 = 0;
    }
    goto LABEL_67;
  }
  uint64_t v128 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v130 = v129;
  if (v128 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v130 == v131)
  {
    swift_bridgeObjectRelease_n();
LABEL_73:

    type metadata accessor for TextFormattingState();
    sub_1000200D8((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t v133 = EnvironmentObject.init()();
    uint64_t v135 = v134;
    uint64_t v136 = swift_getKeyPath();
    *(void *)&long long v285 = 1;
    *((void *)&v285 + 1) = v133;
    *(void *)&long long v286 = v135;
    *((void *)&v286 + 1) = v136;
    LOWORD(v287) = 0;
    BYTE2(v287) = 0;
    sub_10001FDEC();
    sub_10001FE7C();
    swift_retain();
    swift_retain();
    _ConditionalContent<>.init(storage:)();
    if (v294[34]) {
      uint64_t v137 = 0x10000;
    }
    else {
      uint64_t v137 = 0;
    }
    *(void *)&v294[32] = v137 | *(unsigned __int16 *)&v294[32];
    memset(&v294[40], 0, 42);
    v294[82] = 1;
    sub_10000435C(&qword_1000A8E78);
    sub_10000435C(&qword_1000A8E90);
    sub_10001FDB0();
    sub_10001FE40();
    _ConditionalContent<>.init(storage:)();
    if (BYTE2(v281)) {
      uint64_t v120 = 0x10000;
    }
    else {
      uint64_t v120 = 0;
    }
LABEL_67:
    long long v285 = v276;
    long long v286 = v277;
    long long v287 = v278;
    long long v288 = v279;
    long long v289 = v280;
    uint64_t v291 = 0;
    unsigned long long v290 = (unint64_t)v120 | (unsigned __int128)(unsigned __int16)v281;
    __int16 v292 = 0;
    char v293 = 1;
    sub_10000435C(&qword_1000A8E18);
    sub_10000435C(&qword_1000A8E68);
    sub_10001FB70();
    sub_10001FD74();
    _ConditionalContent<>.init(storage:)();
    uint64_t v121 = *(void *)&v294[96];
    __int16 v122 = v295;
    char v123 = v296;
    long long v124 = *(_OWORD *)&v294[16];
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v294;
    *((_OWORD *)v16 + 1) = v124;
    long long v125 = *(_OWORD *)&v294[48];
    *((_OWORD *)v16 + 2) = *(_OWORD *)&v294[32];
    *((_OWORD *)v16 + 3) = v125;
    long long v126 = *(_OWORD *)&v294[80];
    *((_OWORD *)v16 + 4) = *(_OWORD *)&v294[64];
    *((_OWORD *)v16 + 5) = v126;
    *((void *)v16 + 12) = v121;
    *((_WORD *)v16 + 52) = v122;
    v16[106] = v123;
    swift_storeEnumTagMultiPayload();
    sub_10000435C(&qword_1000A8E08);
    sub_10001FB34();
    sub_10001FED0();
    uint64_t v127 = (uint64_t)v272;
    _ConditionalContent<>.init(storage:)();
LABEL_68:
    sub_100009E70(v127, (uint64_t)v274, &qword_1000A8DE0);
    swift_storeEnumTagMultiPayload();
    sub_10000435C(&qword_1000A8DF0);
    sub_10001FA70();
    sub_100020308();
    _ConditionalContent<>.init(storage:)();
    sub_100009ED4(v127, &qword_1000A8DE0);
    goto LABEL_21;
  }
  char v132 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v132) {
    goto LABEL_73;
  }
  uint64_t v138 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v140 = v139;
  if (v138 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v140 == v141)
  {
    swift_bridgeObjectRelease_n();
LABEL_83:

    type metadata accessor for TextFormattingState();
    sub_1000200D8((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t v143 = EnvironmentObject.init()();
    uint64_t v145 = v144;
    uint64_t v146 = swift_getKeyPath();
    *(void *)&long long v285 = v143;
    *((void *)&v285 + 1) = v145;
    long long v286 = (unint64_t)v146;
    LOWORD(v287) = 0;
    BYTE2(v287) = 1;
    sub_10001FDEC();
    sub_10001FE7C();
    swift_retain();
    swift_retain();
    _ConditionalContent<>.init(storage:)();
    if (v294[34]) {
      uint64_t v147 = 0x10000;
    }
    else {
      uint64_t v147 = 0;
    }
    *(void *)&v294[32] = v147 | *(unsigned __int16 *)&v294[32];
    memset(&v294[40], 0, 42);
    v294[82] = 1;
    sub_10000435C(&qword_1000A8E78);
    sub_10000435C(&qword_1000A8E90);
    sub_10001FDB0();
    sub_10001FE40();
    _ConditionalContent<>.init(storage:)();
    if (BYTE2(v281)) {
      uint64_t v120 = 0x10000;
    }
    else {
      uint64_t v120 = 0;
    }
    goto LABEL_67;
  }
  char v142 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v142) {
    goto LABEL_83;
  }
  uint64_t v148 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v150 = v149;
  if (v148 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v150 == v151)
  {
    swift_bridgeObjectRelease_n();
LABEL_93:

    type metadata accessor for TextFormattingState();
    sub_1000200D8((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t v153 = EnvironmentObject.init()();
    uint64_t v155 = v154;
    uint64_t v156 = swift_getKeyPath();
    *(void *)&long long v285 = v153;
    *((void *)&v285 + 1) = v155;
    *(void *)&long long v286 = v156;
    WORD4(v286) = 0;
    BYTE10(v286) = 0;
LABEL_94:
    sub_10001FF84();
    sub_10001FFD8();
    swift_retain();
    swift_retain();
    _ConditionalContent<>.init(storage:)();
    uint64_t v157 = *(void *)&v294[16];
    __int16 v158 = *(_WORD *)&v294[24];
    char v159 = v294[26];
    v160 = v262;
    _OWORD *v262 = *(_OWORD *)v294;
    *((void *)v160 + 2) = v157;
    *((_WORD *)v160 + 12) = v158;
    *((unsigned char *)v160 + 26) = v159;
    swift_storeEnumTagMultiPayload();
    sub_10000435C(&qword_1000A8EB8);
    sub_10001FF48();
    sub_10002002C();
    uint64_t v161 = (uint64_t)v264;
    _ConditionalContent<>.init(storage:)();
LABEL_95:
    sub_100009E70(v161, (uint64_t)v267, &qword_1000A8DC0);
    swift_storeEnumTagMultiPayload();
    sub_10000435C(&qword_1000A8EF0);
    sub_10001FF0C();
    sub_100020174();
    uint64_t v162 = (uint64_t)v268;
    _ConditionalContent<>.init(storage:)();
    sub_100009ED4(v161, &qword_1000A8DC0);
LABEL_96:
    sub_100009E70(v162, (uint64_t)v16, &qword_1000A8DC8);
    swift_storeEnumTagMultiPayload();
    sub_10000435C(&qword_1000A8E08);
    sub_10001FB34();
    sub_10001FED0();
    uint64_t v127 = (uint64_t)v272;
    _ConditionalContent<>.init(storage:)();
    sub_100009ED4(v162, &qword_1000A8DC8);
    goto LABEL_68;
  }
  char v152 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v152) {
    goto LABEL_93;
  }
  uint64_t v163 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v165 = v164;
  if (v163 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v165 == v166)
  {
    swift_bridgeObjectRelease_n();
LABEL_101:

    type metadata accessor for TextFormattingState();
    sub_1000200D8((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t v168 = EnvironmentObject.init()();
    uint64_t v170 = v169;
    uint64_t v171 = swift_getKeyPath();
    *(void *)&long long v285 = v168;
    *((void *)&v285 + 1) = v170;
    *(void *)&long long v286 = v171;
    WORD4(v286) = 0;
    BYTE10(v286) = 1;
    goto LABEL_94;
  }
  char v167 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v167) {
    goto LABEL_101;
  }
  uint64_t v172 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v174 = v173;
  if (v172 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v174 == v175)
  {
    swift_bridgeObjectRelease_n();
LABEL_106:

    type metadata accessor for TextFormattingState();
    sub_1000200D8((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    *(void *)uint64_t v8 = EnvironmentObject.init()();
    *((void *)v8 + 1) = v177;
    *((void *)v8 + 2) = swift_getKeyPath();
    *((_WORD *)v8 + 12) = 0;
    *((void *)v8 + 4) = swift_getKeyPath();
    v8[40] = 0;
    *((void *)v8 + 6) = swift_getKeyPath();
    v8[56] = 0;
    v178 = (uint64_t *)&v8[v5[8]];
    uint64_t *v178 = swift_getKeyPath();
    sub_10000435C(&qword_1000A8F30);
    swift_storeEnumTagMultiPayload();
    *(void *)&v8[v5[9]] = 0x4042000000000000;
    *(void *)&v8[v5[10]] = 0x403C000000000000;
    uint64_t v179 = v258;
    sub_1000203AC((uint64_t)v8, v258);
    sub_100020410(v179, (uint64_t)v259);
    swift_storeEnumTagMultiPayload();
    sub_1000200D8(&qword_1000A8ED8, (void (*)(uint64_t))type metadata accessor for TFTextColorControl);
    sub_100020120();
    uint64_t v180 = (uint64_t)v260;
    _ConditionalContent<>.init(storage:)();
    sub_100009E70(v180, (uint64_t)v262, &qword_1000A8DA8);
    swift_storeEnumTagMultiPayload();
    sub_10000435C(&qword_1000A8EB8);
    sub_10001FF48();
    sub_10002002C();
    uint64_t v181 = (uint64_t)v264;
    _ConditionalContent<>.init(storage:)();
    sub_100009ED4(v180, &qword_1000A8DA8);
    sub_100009E70(v181, (uint64_t)v267, &qword_1000A8DC0);
    swift_storeEnumTagMultiPayload();
    sub_10000435C(&qword_1000A8EF0);
    sub_10001FF0C();
    sub_100020174();
    uint64_t v182 = (uint64_t)v268;
    _ConditionalContent<>.init(storage:)();
    sub_100009ED4(v181, &qword_1000A8DC0);
    sub_100009E70(v182, (uint64_t)v16, &qword_1000A8DC8);
    swift_storeEnumTagMultiPayload();
    sub_10000435C(&qword_1000A8E08);
    sub_10001FB34();
    sub_10001FED0();
    uint64_t v183 = (uint64_t)v272;
    _ConditionalContent<>.init(storage:)();
    sub_100009ED4(v182, &qword_1000A8DC8);
    sub_100009E70(v183, (uint64_t)v274, &qword_1000A8DE0);
    swift_storeEnumTagMultiPayload();
    sub_10000435C(&qword_1000A8DF0);
    sub_10001FA70();
    sub_100020308();
    _ConditionalContent<>.init(storage:)();
    sub_100009ED4(v183, &qword_1000A8DE0);
    return sub_100020474(v179);
  }
  char v176 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v176) {
    goto LABEL_106;
  }
  uint64_t v184 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v186 = v185;
  if (v184 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v186 == v187)
  {
    swift_bridgeObjectRelease_n();
LABEL_111:

    type metadata accessor for TextFormattingState();
    sub_1000200D8((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t v189 = EnvironmentObject.init()();
    uint64_t v191 = v190;
    uint64_t v192 = swift_getKeyPath();
    v193 = v259;
    uint64_t *v259 = v189;
    v193[1] = v191;
    v193[2] = v192;
    *((_WORD *)v193 + 12) = 0;
    swift_storeEnumTagMultiPayload();
    sub_1000200D8(&qword_1000A8ED8, (void (*)(uint64_t))type metadata accessor for TFTextColorControl);
    sub_100020120();
    swift_retain();
    swift_retain();
    uint64_t v194 = (uint64_t)v260;
    _ConditionalContent<>.init(storage:)();
    sub_100009E70(v194, (uint64_t)v262, &qword_1000A8DA8);
    swift_storeEnumTagMultiPayload();
    sub_10000435C(&qword_1000A8EB8);
    sub_10001FF48();
    sub_10002002C();
    uint64_t v161 = (uint64_t)v264;
    _ConditionalContent<>.init(storage:)();
    sub_100009ED4(v194, &qword_1000A8DA8);
    goto LABEL_95;
  }
  char v188 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v188) {
    goto LABEL_111;
  }
  uint64_t v195 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v197 = v196;
  if (v195 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v197 == v198)
  {
    swift_bridgeObjectRelease_n();
LABEL_116:

    type metadata accessor for TextFormattingState();
    sub_1000200D8((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t v200 = EnvironmentObject.init()();
    uint64_t v202 = v201;
    uint64_t v203 = swift_getKeyPath();
    *(void *)v294 = v200;
    *(void *)&v294[8] = v202;
    *(void *)&v294[16] = v203;
    memset(&v294[24], 0, 73);
    sub_1000201EC();
    sub_100020240();
    swift_retain();
    swift_retain();
    _ConditionalContent<>.init(storage:)();
    long long v285 = v276;
    long long v286 = v277;
    long long v287 = v278;
    long long v288 = v279;
    long long v289 = v280;
    unsigned long long v290 = v281;
    LOWORD(v291) = v282;
    sub_10000435C(&qword_1000A8F00);
    sub_10000435C(&qword_1000A8F20);
    sub_1000201B0();
    sub_100020294();
    _ConditionalContent<>.init(storage:)();
    char v204 = v294[96];
    char v205 = v294[97];
    long long v206 = *(_OWORD *)&v294[16];
    v207 = v267;
    _OWORD *v267 = *(_OWORD *)v294;
    v207[1] = v206;
    long long v208 = *(_OWORD *)&v294[48];
    v207[2] = *(_OWORD *)&v294[32];
    v207[3] = v208;
    long long v209 = *(_OWORD *)&v294[80];
    v207[4] = *(_OWORD *)&v294[64];
    v207[5] = v209;
    *((unsigned char *)v207 + 96) = v204;
    *((unsigned char *)v207 + 97) = v205;
    swift_storeEnumTagMultiPayload();
    sub_10000435C(&qword_1000A8EF0);
    sub_10001FF0C();
    sub_100020174();
    uint64_t v162 = (uint64_t)v268;
    _ConditionalContent<>.init(storage:)();
    goto LABEL_96;
  }
  char v199 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v199) {
    goto LABEL_116;
  }
  uint64_t v210 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v212 = v211;
  if (v210 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v212 == v213)
  {
    swift_bridgeObjectRelease_n();
LABEL_121:

    type metadata accessor for TextFormattingState();
    sub_1000200D8((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t v215 = EnvironmentObject.init()();
    uint64_t v217 = v216;
    uint64_t v218 = swift_getKeyPath();
    uint64_t v263 = v218;
    uint64_t v97 = swift_getKeyPath();
    uint64_t v98 = swift_getKeyPath();
    uint64_t v99 = swift_getKeyPath();
    *(void *)v294 = 257;
    *(void *)&v294[8] = v215;
    v264 = (char *)v215;
    *(void *)&v294[16] = v217;
    *(void *)&v294[24] = v218;
    *(void *)&v294[32] = 0;
    *(void *)&v294[40] = v97;
    *(void *)&v294[48] = 0;
    *(void *)&v294[56] = v98;
    *(void *)&v294[64] = 0;
    *(void *)&v294[72] = v99;
    *(_OWORD *)&v294[80] = xmmword_100083950;
    v294[96] = 1;
    swift_retain();
    sub_10001F4F8(v218, 0, 0);
    sub_10001F504(v97, 0);
    sub_10001F504(v98, 0);
    sub_10001F504(v99, 0);
    sub_1000201EC();
    sub_100020240();
    _ConditionalContent<>.init(storage:)();
    long long v285 = v276;
    long long v286 = v277;
    long long v287 = v278;
    long long v288 = v279;
    long long v289 = v280;
    unsigned long long v290 = v281;
    LOWORD(v291) = v282;
LABEL_122:
    sub_10000435C(&qword_1000A8F00);
    sub_10000435C(&qword_1000A8F20);
    sub_1000201B0();
    sub_100020294();
    _ConditionalContent<>.init(storage:)();
    char v219 = v294[96];
    char v220 = v294[97];
    long long v221 = *(_OWORD *)&v294[16];
    v222 = v267;
    _OWORD *v267 = *(_OWORD *)v294;
    v222[1] = v221;
    long long v223 = *(_OWORD *)&v294[48];
    v222[2] = *(_OWORD *)&v294[32];
    v222[3] = v223;
    long long v224 = *(_OWORD *)&v294[80];
    v222[4] = *(_OWORD *)&v294[64];
    v222[5] = v224;
    *((unsigned char *)v222 + 96) = v219;
    *((unsigned char *)v222 + 97) = v220;
    swift_storeEnumTagMultiPayload();
    sub_10000435C(&qword_1000A8EF0);
    sub_10001FF0C();
    sub_100020174();
    uint64_t v225 = (uint64_t)v268;
    _ConditionalContent<>.init(storage:)();
    sub_100009E70(v225, (uint64_t)v16, &qword_1000A8DC8);
    swift_storeEnumTagMultiPayload();
    sub_10000435C(&qword_1000A8E08);
    sub_10001FB34();
    sub_10001FED0();
    uint64_t v226 = (uint64_t)v272;
    _ConditionalContent<>.init(storage:)();
    sub_100009ED4(v225, &qword_1000A8DC8);
    sub_100009E70(v226, (uint64_t)v274, &qword_1000A8DE0);
    swift_storeEnumTagMultiPayload();
    sub_10000435C(&qword_1000A8DF0);
    sub_10001FA70();
    sub_100020308();
    _ConditionalContent<>.init(storage:)();
    sub_100009ED4(v226, &qword_1000A8DE0);
    swift_release();
    uint64_t v109 = v263;
LABEL_57:
    sub_10001F568(v109, 0, 0);
    sub_10001F574(v97, 0);
    sub_10001F574(v98, 0);
    return sub_10001F574(v99, 0);
  }
  char v214 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v214) {
    goto LABEL_121;
  }
  uint64_t v227 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v229 = v228;
  if (v227 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v229 == v230)
  {
    swift_bridgeObjectRelease_n();
LABEL_127:

    type metadata accessor for TextFormattingState();
    sub_1000200D8((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t v232 = EnvironmentObject.init()();
    uint64_t v234 = v233;
    uint64_t v235 = swift_getKeyPath();
    uint64_t v263 = v235;
    uint64_t v97 = swift_getKeyPath();
    uint64_t v98 = swift_getKeyPath();
    uint64_t v99 = swift_getKeyPath();
    *(void *)v294 = 0;
    *(void *)&v294[8] = v232;
    v264 = (char *)v232;
    *(void *)&v294[16] = v234;
    *(void *)&v294[24] = v235;
    *(void *)&v294[32] = 0;
    *(void *)&v294[40] = v97;
    *(void *)&v294[48] = 0;
    *(void *)&v294[56] = v98;
    *(void *)&v294[64] = 0;
    *(void *)&v294[72] = v99;
    *(_OWORD *)&v294[80] = xmmword_100083950;
    v294[96] = 0;
    swift_retain();
    sub_10001F4F8(v235, 0, 0);
    sub_10001F504(v97, 0);
    sub_10001F504(v98, 0);
    sub_10001F504(v99, 0);
    sub_100020240();
    _ConditionalContent<>.init(storage:)();
    long long v285 = v276;
    long long v286 = v277;
    long long v287 = v278;
    long long v288 = v279;
    long long v289 = v280;
    unsigned long long v290 = v281;
    LOBYTE(v291) = v282;
    BYTE1(v291) = 1;
    goto LABEL_122;
  }
  char v231 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v231) {
    goto LABEL_127;
  }
  uint64_t v236 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v238 = v237;
  if (v236 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v238 == v239)
  {

    swift_bridgeObjectRelease_n();
LABEL_132:
    type metadata accessor for TextFormattingState();
    sub_1000200D8((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t v241 = EnvironmentObject.init()();
    uint64_t v243 = v242;
    uint64_t v244 = swift_getKeyPath();
    uint64_t v263 = v244;
    uint64_t v97 = swift_getKeyPath();
    uint64_t v98 = swift_getKeyPath();
    uint64_t v99 = swift_getKeyPath();
    *(void *)v294 = 1;
    *(void *)&v294[8] = v241;
    v264 = (char *)v241;
    *(void *)&v294[16] = v243;
    *(void *)&v294[24] = v244;
    *(void *)&v294[32] = 0;
    *(void *)&v294[40] = v97;
    *(void *)&v294[48] = 0;
    *(void *)&v294[56] = v98;
    *(void *)&v294[64] = 0;
    *(void *)&v294[72] = v99;
    *(_OWORD *)&v294[80] = xmmword_100083950;
    v294[96] = 1;
    swift_retain();
    sub_10001F4F8(v244, 0, 0);
    sub_10001F504(v97, 0);
    sub_10001F504(v98, 0);
    sub_10001F504(v99, 0);
    sub_100020240();
    _ConditionalContent<>.init(storage:)();
    long long v285 = v276;
    long long v286 = v277;
    long long v287 = v278;
    long long v288 = v279;
    long long v289 = v280;
    unsigned long long v290 = v281;
    LOBYTE(v291) = v282;
    BYTE1(v291) = 1;
    goto LABEL_122;
  }
  char v240 = _stringCompareWithSmolCheck(_:_:expecting:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v240) {
    goto LABEL_132;
  }
  self;
  uint64_t v245 = swift_dynamicCastObjCClass();
  if (v245)
  {
    uint64_t v246 = v245;
    type metadata accessor for TextFormattingState();
    sub_1000200D8((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    id v247 = v18;
    uint64_t v248 = EnvironmentObject.init()();
    uint64_t v250 = v249;
    uint64_t v251 = swift_getKeyPath();
    uint64_t v252 = swift_getKeyPath();
    *(void *)&long long v285 = v246;
    *((void *)&v285 + 1) = v248;
    *(void *)&long long v286 = v250;
    *((void *)&v286 + 1) = v251;
    *(void *)&long long v287 = 0;
    *((void *)&v287 + 1) = v252;
    LOWORD(v288) = 0;
    sub_10001FA1C();
    swift_retain();
    swift_retain();
    swift_retain();
    _ConditionalContent<>.init(storage:)();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    long long v286 = 0u;
    long long v287 = 0u;
    long long v285 = 0u;
    LOWORD(v288) = 256;
    sub_10001FA1C();
    _ConditionalContent<>.init(storage:)();
  }
  long long v253 = *(_OWORD *)&v294[16];
  long long v254 = *(_OWORD *)&v294[32];
  char v255 = v294[48];
  char v256 = v294[49];
  v257 = v274;
  _OWORD *v274 = *(_OWORD *)v294;
  v257[1] = v253;
  v257[2] = v254;
  *((unsigned char *)v257 + 48) = v255;
  *((unsigned char *)v257 + 49) = v256;
  swift_storeEnumTagMultiPayload();
  sub_10000435C(&qword_1000A8DF0);
  sub_10001FA70();
  sub_100020308();
  return _ConditionalContent<>.init(storage:)();
}

uint64_t sub_1000125BC(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v3 = Hasher._finalize()();
    swift_bridgeObjectRelease();
    uint64_t v4 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v5 = v3 & ~v4;
    uint64_t v6 = a2 + 56;
    if ((*(void *)(a2 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
    {
      uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v9 = v8;
      if (v7 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v9 == v10)
      {
LABEL_17:
        swift_bridgeObjectRelease_n();
        goto LABEL_18;
      }
      char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v12)
      {
LABEL_18:
        char v20 = 1;
        return v20 & 1;
      }
      uint64_t v13 = ~v4;
      unint64_t v14 = (v5 + 1) & v13;
      if ((*(void *)(v6 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
      {
        while (1)
        {
          uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v17 = v16;
          if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v17 == v18) {
            break;
          }
          char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v20 & 1) == 0)
          {
            unint64_t v14 = (v14 + 1) & v13;
            if ((*(void *)(v6 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14)) {
              continue;
            }
          }
          return v20 & 1;
        }
        goto LABEL_17;
      }
    }
  }
  char v20 = 0;
  return v20 & 1;
}

uint64_t sub_100012784@<X0>(uint64_t a1@<X8>)
{
  return sub_10000F3A4(a1);
}

BOOL sub_1000127C8(char *a1, char *a2)
{
  return qword_100083F50[*a1] == qword_100083F50[*a2];
}

Swift::Int sub_1000127EC()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_100083F50[v1]);
  return Hasher._finalize()();
}

void sub_10001283C()
{
  Hasher._combine(_:)(qword_100083F50[*v0]);
}

Swift::Int sub_100012874()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_100083F50[v1]);
  return Hasher._finalize()();
}

uint64_t sub_1000128C0@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10001CBFC(*a1);
  *a2 = result;
  return result;
}

void sub_1000128EC(void *a1@<X8>)
{
  *a1 = qword_100083F50[*v1];
}

void sub_100012904(void *a1@<X8>)
{
  *a1 = &off_10009E768;
}

uint64_t sub_100012914(void *a1, void *a2)
{
  if (*a1 == *a2) {
    return sub_100014374(a1[1], a2[1]);
  }
  else {
    return 0;
  }
}

uint64_t sub_100012938(uint64_t result, uint64_t a2)
{
  if ((result & 0x8000000000000000) == 0) {
    return a2;
  }
  __break(1u);
  return result;
}

__n128 sub_100012978@<Q0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  __n128 result = v5;
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(__n128 *)(a1 + 32) = v5;
  *(unsigned char *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 56) = v7;
  return result;
}

uint64_t sub_100012A10()
{
  return static Published.subscript.setter();
}

uint64_t sub_100012AD4@<X0>(unsigned char *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_100012B54()
{
  return sub_100028170();
}

uint64_t sub_100012BCC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100012BFC()
{
  return EnvironmentValues.isEnabled.setter();
}

uint64_t sub_100012C24@<X0>(uint64_t a1@<X8>)
{
  return sub_100013974(&qword_1000A8528, (uint64_t (*)(void))&type metadata accessor for Font.Context, 0x747865746E6F43, 0xE700000000000000, a1);
}

uint64_t sub_100012C58(uint64_t a1, char a2)
{
  uint64_t v4 = type metadata accessor for EnvironmentValues();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  long long v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) == 0)
  {
    swift_retain();
    os_log_type_t v8 = static os_log_type_t.fault.getter();
    uint64_t v9 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v10 = v8;
    if (os_log_type_enabled(v9, v8))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136315138;
      uint64_t v13 = sub_100023100(0x666E6F4349554654, 0xEA00000000006769, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    sub_10001F574(a1, 0);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return v14;
  }
  return a1;
}

uint64_t sub_100012E64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for EnvironmentValues();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  long long v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 0x100) == 0)
  {
    swift_retain();
    os_log_type_t v8 = static os_log_type_t.fault.getter();
    uint64_t v9 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v10 = v8;
    if (os_log_type_enabled(v9, v8))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136315138;
      v13[0] = v11 + 4;
      v13[1] = sub_100023100(0xD000000000000035, 0x8000000100086E10, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    sub_10001F568(a1, a2, 0);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return v14;
  }
  return a1;
}

uint64_t sub_100013084(uint64_t a1, char a2)
{
  uint64_t v4 = type metadata accessor for EnvironmentValues();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  long long v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2) {
    return a1 & 1;
  }
  swift_retain();
  os_log_type_t v8 = static os_log_type_t.fault.getter();
  uint64_t v9 = static Log.runtimeIssuesLog.getter();
  os_log_type_t v10 = v8;
  if (os_log_type_enabled(v9, v8))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315138;
    uint64_t v13 = sub_100023100(1819242306, 0xE400000000000000, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath();
  sub_10001F574(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v14;
}

double sub_100013288(uint64_t a1, char a2)
{
  uint64_t v4 = type metadata accessor for EnvironmentValues();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  long long v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2) {
    return *(double *)&a1;
  }
  swift_retain();
  os_log_type_t v8 = static os_log_type_t.fault.getter();
  uint64_t v9 = static Log.runtimeIssuesLog.getter();
  os_log_type_t v10 = v8;
  if (os_log_type_enabled(v9, v8))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315138;
    uint64_t v13 = sub_100023100(0x74616F6C464743, 0xE700000000000000, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath();
  sub_10001F574(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return *(double *)&v14;
}

uint64_t sub_100013494@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for EnvironmentValues();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  long long v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000435C(&qword_1000A8F30);
  __chkstk_darwin(v8);
  os_log_type_t v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100009E70(v2, (uint64_t)v10, &qword_1000A8F30);
  if (swift_getEnumCaseMultiPayload() == 1) {
    return sub_100009F30((uint64_t)v10, a1, &qword_1000A8F38);
  }
  os_log_type_t v12 = static os_log_type_t.fault.getter();
  uint64_t v13 = static Log.runtimeIssuesLog.getter();
  os_log_type_t v14 = v12;
  if (os_log_type_enabled(v13, v12))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    v17[1] = a1;
    uint64_t v18 = v16;
    *(_DWORD *)uint64_t v15 = 136315138;
    v17[2] = sub_100023100(0xD000000000000020, 0x8000000100086E50, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_100013724(uint64_t a1, char a2)
{
  uint64_t v4 = type metadata accessor for EnvironmentValues();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  long long v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) == 0)
  {
    swift_retain();
    os_log_type_t v8 = static os_log_type_t.fault.getter();
    uint64_t v9 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v10 = v8;
    if (os_log_type_enabled(v9, v8))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136315138;
      uint64_t v13 = sub_100023100(0x6C616E6F6974704FLL, 0xEE003E6C6F6F423CLL, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    sub_10001F574(a1, 0);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return v14;
  }
  return a1;
}

uint64_t sub_100013938@<X0>(uint64_t a1@<X8>)
{
  return sub_100013974((uint64_t *)&unk_1000A8F70, (uint64_t (*)(void))&type metadata accessor for ColorScheme, 0x686353726F6C6F43, 0xEB00000000656D65, a1);
}

uint64_t sub_100013974@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v27 = a3;
  uint64_t v9 = v5;
  uint64_t v11 = type metadata accessor for EnvironmentValues();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000435C(a1);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100009E70(v9, (uint64_t)v17, a1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v18 = a2(0);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(a5, v17, v18);
  }
  else
  {
    os_log_type_t v20 = static os_log_type_t.fault.getter();
    uint64_t v21 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v21, v20))
    {
      unint64_t v25 = a4;
      uint64_t v22 = swift_slowAlloc();
      uint64_t v26 = a5;
      uint64_t v23 = (uint8_t *)v22;
      uint64_t v29 = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136315138;
      uint64_t v28 = sub_100023100(v27, v25, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v21, v20, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

uint64_t sub_100013C2C@<X0>(uint64_t a1@<X8>)
{
  return sub_100013974(&qword_1000AA3C0, (uint64_t (*)(void))&type metadata accessor for DynamicTypeSize, 0x5463696D616E7944, 0xEF657A6953657079, a1);
}

void sub_100013C6C(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return;
  }
  uint64_t v2 = a2;
  uint64_t v3 = a1;
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return;
  }
  int64_t v4 = 0;
  uint64_t v5 = a1 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a1 + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    while (1)
    {
LABEL_7:
      if (v8)
      {
        unint64_t v10 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v11 = v10 | (v4 << 6);
      }
      else
      {
        int64_t v12 = v4 + 1;
        if (__OFADD__(v4, 1))
        {
LABEL_104:
          __break(1u);
LABEL_105:
          __break(1u);
LABEL_106:
          __break(1u);
LABEL_107:
          __break(1u);
          goto LABEL_108;
        }
        if (v12 >= v9) {
          return;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v12);
        ++v4;
        if (!v13)
        {
          int64_t v4 = v12 + 1;
          if (v12 + 1 >= v9) {
            return;
          }
          unint64_t v13 = *(void *)(v5 + 8 * v4);
          if (!v13)
          {
            int64_t v4 = v12 + 2;
            if (v12 + 2 >= v9) {
              return;
            }
            unint64_t v13 = *(void *)(v5 + 8 * v4);
            if (!v13)
            {
              int64_t v4 = v12 + 3;
              if (v12 + 3 >= v9) {
                return;
              }
              unint64_t v13 = *(void *)(v5 + 8 * v4);
              if (!v13)
              {
                int64_t v14 = v12 + 4;
                if (v14 >= v9) {
                  return;
                }
                unint64_t v13 = *(void *)(v5 + 8 * v14);
                if (!v13)
                {
                  while (1)
                  {
                    int64_t v4 = v14 + 1;
                    if (__OFADD__(v14, 1)) {
                      goto LABEL_111;
                    }
                    if (v4 >= v9) {
                      return;
                    }
                    unint64_t v13 = *(void *)(v5 + 8 * v4);
                    ++v14;
                    if (v13) {
                      goto LABEL_24;
                    }
                  }
                }
                int64_t v4 = v14;
              }
            }
          }
        }
LABEL_24:
        unint64_t v8 = (v13 - 1) & v13;
        unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
      }
      uint64_t v15 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v11);
      uint64_t v16 = *v15;
      uint64_t v17 = v15[1];
      uint64_t v18 = *(void **)(*(void *)(v3 + 56) + 8 * v11);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v19 = sub_100018964(v16, v17);
      char v21 = v20;
      swift_bridgeObjectRelease();
      if ((v21 & 1) == 0) {
        goto LABEL_97;
      }
      uint64_t v22 = *(void **)(*(void *)(v2 + 56) + 8 * v19);
      uint64_t v23 = v22[2];
      if (v23 != v18[2]) {
        goto LABEL_97;
      }
      if (v23 && v22 != v18) {
        break;
      }
      swift_bridgeObjectRelease();
    }
    __int16 v65 = v18 + 4;
    if (v22[4] != v18[4]) {
      goto LABEL_97;
    }
    uint64_t v64 = v22 + 4;
    uint64_t v66 = v22[2];
    uint64_t v24 = v22[5];
    uint64_t v25 = v18[5];
    uint64_t v62 = v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v26 = sub_100014374(v24, v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v26 & 1) == 0) {
      goto LABEL_96;
    }
    if (v66 != 1) {
      break;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (v18[2] < 2uLL)
  {
LABEL_108:
    __break(1u);
LABEL_109:
    __break(1u);
LABEL_110:
    __break(1u);
LABEL_111:
    __break(1u);
    return;
  }
  if (v62[6] == v18[6])
  {
    unint64_t v60 = v8;
    int64_t v61 = v4;
    unint64_t v27 = v62[7];
    uint64_t v63 = v18;
    unint64_t v28 = v18[7];
    if (!(v27 >> 62))
    {
      uint64_t v29 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (!(v28 >> 62)) {
        goto LABEL_37;
      }
LABEL_92:
      swift_bridgeObjectRetain();
      uint64_t v55 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v29 != v55) {
        goto LABEL_93;
      }
LABEL_38:
      int64_t v56 = v9;
      uint64_t v57 = v5;
      uint64_t v58 = v3;
      uint64_t v59 = v2;
      unint64_t v30 = 2;
      while (2)
      {
        if (v29)
        {
          uint64_t v31 = v27 & 0xFFFFFFFFFFFFFF8;
          uint64_t v32 = (v27 & 0xFFFFFFFFFFFFFF8) + 32;
          if ((v27 & 0x8000000000000000) != 0) {
            uint64_t v31 = v27;
          }
          if (v27 >> 62) {
            uint64_t v32 = v31;
          }
          uint64_t v33 = v28 & 0xFFFFFFFFFFFFFF8;
          uint64_t v34 = (v28 & 0xFFFFFFFFFFFFFF8) + 32;
          if ((v28 & 0x8000000000000000) != 0) {
            uint64_t v33 = v28;
          }
          if (v28 >> 62) {
            uint64_t v34 = v33;
          }
          if (v32 != v34)
          {
            if (v29 < 0) {
              goto LABEL_105;
            }
            unint64_t v68 = v27 & 0xC000000000000001;
            if ((v27 & 0xC000000000000001) != 0)
            {
              id v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else
            {
              if (!*(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                goto LABEL_106;
              }
              id v35 = *(id *)(v27 + 32);
            }
            uint64_t v36 = v35;
            unint64_t v67 = v28 & 0xC000000000000001;
            if ((v28 & 0xC000000000000001) != 0)
            {
              id v37 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else
            {
              if (!*(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                goto LABEL_107;
              }
              id v37 = *(id *)(v28 + 32);
            }
            uint64_t v38 = v37;
            sub_10000A3AC(0, &qword_1000A8AD0);
            char v39 = static NSObject.== infix(_:_:)();

            if ((v39 & 1) == 0) {
              goto LABEL_95;
            }
            if (v29 != 1)
            {
              if (v68)
              {
                id v42 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else
              {
                if (*(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL) {
                  goto LABEL_109;
                }
                id v42 = *(id *)(v27 + 40);
              }
              uint64_t v43 = v42;
              if (v67)
              {
                id v44 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else
              {
                if (*(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL) {
                  goto LABEL_110;
                }
                id v44 = *(id *)(v28 + 40);
              }
              uint64_t v45 = v44;
              char v46 = static NSObject.== infix(_:_:)();

              if ((v46 & 1) == 0)
              {
LABEL_95:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_96;
              }
              uint64_t v47 = 2 - v29;
              uint64_t v48 = 6;
              while (v47 + v48 != 6)
              {
                unint64_t v52 = v48 - 4;
                if (v68)
                {
                  id v53 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
                }
                else
                {
                  if (v52 >= *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10))
                  {
                    __break(1u);
LABEL_102:
                    __break(1u);
                    goto LABEL_103;
                  }
                  id v53 = *(id *)(v27 + 8 * v48);
                }
                uint64_t v54 = v53;
                if (v67)
                {
                  id v49 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
                }
                else
                {
                  if (v52 >= *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                    goto LABEL_102;
                  }
                  id v49 = *(id *)(v28 + 8 * v48);
                }
                long long v50 = v49;
                char v51 = static NSObject.== infix(_:_:)();

                ++v48;
                if ((v51 & 1) == 0) {
                  goto LABEL_95;
                }
              }
            }
          }
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v30 == v66)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v3 = v58;
          uint64_t v2 = v59;
          int64_t v9 = v56;
          uint64_t v5 = v57;
          unint64_t v8 = v60;
          int64_t v4 = v61;
          goto LABEL_7;
        }
        if (v30 >= v63[2])
        {
LABEL_103:
          __break(1u);
          goto LABEL_104;
        }
        uint64_t v40 = &v65[2 * v30];
        if (v64[2 * v30] != *v40) {
          goto LABEL_96;
        }
        unint64_t v27 = v64[2 * v30 + 1];
        unint64_t v28 = v40[1];
        if (v27 >> 62)
        {
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v28 >> 62) {
            goto LABEL_87;
          }
LABEL_63:
          uint64_t v41 = *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        else
        {
          uint64_t v29 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (!(v28 >> 62)) {
            goto LABEL_63;
          }
LABEL_87:
          swift_bridgeObjectRetain();
          uint64_t v41 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        ++v30;
        if (v29 != v41) {
          goto LABEL_93;
        }
        continue;
      }
    }
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v28 >> 62) {
      goto LABEL_92;
    }
LABEL_37:
    if (v29 == *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_38;
    }
LABEL_93:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_96:
    swift_bridgeObjectRelease();
  }
LABEL_97:
  swift_bridgeObjectRelease();
}

uint64_t sub_100014374(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)((unint64_t)a1 >> 62);
  if ((unint64_t)a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v6 == v22) {
      goto LABEL_5;
    }
    return 0;
  }
  if (v6 != *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    return 0;
  }
LABEL_5:
  if (!v6) {
    return 1;
  }
  uint64_t v7 = a1 & 0xFFFFFFFFFFFFFF8;
  uint64_t v8 = (a1 & 0xFFFFFFFFFFFFFF8) + 32;
  if (a1 < 0) {
    uint64_t v7 = a1;
  }
  if (v5) {
    uint64_t v8 = v7;
  }
  uint64_t v9 = a2 & 0xFFFFFFFFFFFFFF8;
  uint64_t v10 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
  if (a2 < 0) {
    uint64_t v9 = a2;
  }
  if ((unint64_t)a2 >> 62) {
    uint64_t v10 = v9;
  }
  if (v8 == v10) {
    return 1;
  }
  if (v6 < 0)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  unint64_t v23 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
LABEL_42:
    uint64_t result = specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_19;
  }
  if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_44;
  }
  uint64_t result = (uint64_t)*(id *)(a1 + 32);
LABEL_19:
  uint64_t v5 = (void *)result;
  unint64_t v2 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) != 0)
  {
LABEL_44:
    id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_22:
    unint64_t v13 = v12;
    sub_10000A3AC(0, &qword_1000A8AD0);
    char v14 = static NSObject.== infix(_:_:)();

    if (v14)
    {
      uint64_t v15 = 1 - v6;
      for (uint64_t i = 5; ; ++i)
      {
        uint64_t v6 = v15 + i == 5;
        if (v15 + i == 5) {
          return v6;
        }
        unint64_t v20 = i - 4;
        if (v23)
        {
          id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          if (v2) {
            goto LABEL_24;
          }
        }
        else
        {
          if (v20 >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_40:
            __break(1u);
            goto LABEL_41;
          }
          id v21 = *(id *)(a1 + 8 * i);
          if (v2)
          {
LABEL_24:
            id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            goto LABEL_25;
          }
        }
        if (v20 >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_40;
        }
        id v17 = *(id *)(a2 + 8 * i);
LABEL_25:
        uint64_t v18 = v17;
        char v19 = static NSObject.== infix(_:_:)();

        if ((v19 & 1) == 0) {
          return v6;
        }
      }
    }
    return 0;
  }
  if (*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v12 = *(id *)(a2 + 32);
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000145F4(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  BOOL v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v6 & 1) != 0))
  {
    uint64_t v8 = v2 - 1;
    if (!v8) {
      return 1;
    }
    uint64_t v9 = a1 + 7;
    for (uint64_t i = a2 + 7; ; i += 2)
    {
      BOOL v11 = *(v9 - 1) == *(i - 1) && *v9 == *i;
      if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      v9 += 2;
      if (!--v8) {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

id sub_1000146BC(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  unint64_t v4 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v5 == v29) {
      goto LABEL_5;
    }
LABEL_49:
    LOBYTE(v5) = 0;
    return (id)(v5 & 1);
  }
  if (v5 != *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_49;
  }
LABEL_5:
  if (!v5) {
    goto LABEL_38;
  }
  uint64_t v6 = v3 & 0xFFFFFFFFFFFFFF8;
  if (v3 < 0) {
    uint64_t v6 = v3;
  }
  if (!v4) {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFF8) + 32;
  }
  uint64_t v7 = a2 & 0xFFFFFFFFFFFFFF8;
  uint64_t v8 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
  if (a2 < 0) {
    uint64_t v9 = a2;
  }
  else {
    uint64_t v9 = a2 & 0xFFFFFFFFFFFFFF8;
  }
  if ((unint64_t)a2 >> 62) {
    uint64_t v8 = v9;
  }
  if (v6 == v8)
  {
LABEL_38:
    LOBYTE(v5) = 1;
    return (id)(v5 & 1);
  }
  if ((v5 & 0x8000000000000000) != 0) {
    goto LABEL_55;
  }
  unint64_t v30 = v3 & 0xC000000000000001;
  if ((v3 & 0xC000000000000001) != 0) {
    goto LABEL_56;
  }
  for (id result = *(id *)(v3 + 32); ; id result = (id)specialized _ArrayBuffer._getElementSlowPath(_:)())
  {
    BOOL v11 = result;
    if ((a2 & 0xC000000000000001) == 0) {
      break;
    }
    id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_22:
    unint64_t v13 = v12;
    sub_10000A3AC(0, (unint64_t *)&unk_1000A8930);
    char v14 = static NSObject.== infix(_:_:)();

    if ((v14 & 1) == 0) {
      goto LABEL_49;
    }
    unint64_t v15 = v5 - 1;
    if (v5 == 1) {
      return (id)(v5 & 1);
    }
    if (((a2 | v3) & 0xC000000000000001) != 0)
    {
      uint64_t v16 = 0;
      unint64_t v17 = v5 - 2;
      while (v15 != v16)
      {
        unint64_t v5 = v16 + 1;
        if (v30) {
          id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v18 = *(id *)(v3 + 40 + 8 * v16);
        }
        char v19 = v18;
        if ((a2 & 0xC000000000000001) != 0)
        {
          id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (v5 >= *(void *)(v7 + 16)) {
            goto LABEL_54;
          }
          id v20 = *(id *)(a2 + 40 + 8 * v16);
        }
        id v21 = v20;
        unint64_t v5 = static NSObject.== infix(_:_:)();

        if ((v5 & 1) != 0 && v17 != v16++) {
          continue;
        }
        return (id)(v5 & 1);
      }
      __break(1u);
    }
    else
    {
      unint64_t v23 = *(void *)(v7 + 16);
      if (v23 <= 1) {
        unint64_t v23 = 1;
      }
      unint64_t v24 = v23 - 1;
      uint64_t v25 = (void **)(v3 + 40);
      uint64_t v7 = a2 + 40;
      while (v15)
      {
        if (!v24) {
          goto LABEL_53;
        }
        unint64_t v27 = *v25++;
        char v26 = v27;
        unint64_t v28 = *(void **)v7;
        v7 += 8;
        a2 = v26;
        uint64_t v3 = v28;
        unint64_t v5 = static NSObject.== infix(_:_:)();

        if (v5)
        {
          --v24;
          if (--v15) {
            continue;
          }
        }
        return (id)(v5 & 1);
      }
    }
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    ;
  }
  if (*(void *)(v7 + 16))
  {
    id v12 = *(id *)(a2 + 32);
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000149A8(uint64_t a1)
{
  uint64_t v2 = sub_10000435C(&qword_1000A8F38);
  __chkstk_darwin(v2 - 8);
  sub_100009E70(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_1000A8F38);
  return EnvironmentValues.horizontalSizeClass.setter();
}

void *sub_100014A3C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000435C(&qword_1000A8AF0);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      unint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      unint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10001C974(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100014B4C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000435C(&qword_1000A8B08);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_10001CEE8(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100014C74(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000435C(&qword_1000A8B00);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      unint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      unint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10001CC20(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100014D84(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000435C(&qword_1000A8AE8);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      unint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      unint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10001E1D4(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100014E94(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  int64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v7 = a2;
    }
LABEL_8:
    int64_t v8 = a4[2];
    if (v7 <= v8) {
      int64_t v9 = a4[2];
    }
    else {
      int64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000435C(&qword_1000A8F60);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * v11 - 64;
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= (void *)((char *)a4 + v8 + 32)) {
          memmove(v12, a4 + 4, v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_10001CA68(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100014F90(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return &_swiftEmptyArrayStorage;
  }
  sub_10000435C(&qword_1000A8B20);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = j__malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 25;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 3);
  unint64_t v6 = sub_10001C318(&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_10001DF9C();
  if (v6 != (void *)v1)
  {
    __break(1u);
    return &_swiftEmptyArrayStorage;
  }
  return v3;
}

void *sub_100015078(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_10000435C(&qword_1000A8B48);
  uint64_t v3 = (void *)swift_allocObject();
  size_t v4 = j__malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 24);
  uint64_t v5 = sub_10001C4AC(&v7, (uint64_t)(v3 + 4), v1, a1);
  swift_bridgeObjectRetain();
  sub_10001DF9C();
  if (v5 != (void *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v3;
}

void *sub_100015170(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_100015184(a1, a2, a3, a4, &qword_1000A86E8);
}

void *sub_100015184(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t *a5)
{
  unint64_t v5 = a4 >> 1;
  uint64_t v6 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v6) {
      return _swiftEmptyArrayStorage;
    }
    uint64_t v10 = v6;
    if (v6 <= 0)
    {
      size_t v11 = _swiftEmptyArrayStorage;
      if (v5 != a3)
      {
LABEL_7:
        if (v6 < 0) {
          goto LABEL_19;
        }
        unint64_t v14 = a2 + 8 * a3;
        if (v14 < (unint64_t)&v11[v10 + 4] && (unint64_t)(v11 + 4) < v14 + v10 * 8) {
          goto LABEL_19;
        }
        sub_10000A3AC(0, a5);
        swift_arrayInitWithCopy();
        return v11;
      }
    }
    else
    {
      sub_10000435C(&qword_1000A8B30);
      size_t v11 = (void *)swift_allocObject();
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 25;
      }
      v11[2] = v6;
      v11[3] = (2 * (v13 >> 3)) | 1;
      if (v5 != a3) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  id result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_100015320(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  int64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5) {
      return _swiftEmptyArrayStorage;
    }
    if (v5 <= 0)
    {
      uint64_t v8 = _swiftEmptyArrayStorage;
      if (v4 != a3)
      {
LABEL_5:
        if (v5 < 0) {
          goto LABEL_17;
        }
        uint64_t v10 = v8 + 4;
        if (a2 + a3 < (unint64_t)v8 + v5 + 32 && (unint64_t)v10 < a2 + a3 + v5) {
          goto LABEL_17;
        }
        memcpy(v10, (const void *)(a2 + a3), v5);
        return v8;
      }
    }
    else
    {
      sub_10000435C(&qword_1000A8F60);
      uint64_t v8 = (void *)swift_allocObject();
      size_t v9 = j__malloc_size(v8);
      v8[2] = v5;
      v8[3] = 2 * v9 - 64;
      if (v4 != a3) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_17:
  id result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10001547C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100015504(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10001549C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000157C4(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000154BC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100015930(a1, a2, a3, *v3, &qword_1000A8B60);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000154E4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100015AA8(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100015504(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000435C(&qword_1000A8AE8);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100015664(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000435C(&qword_1000A8B20);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000157C4(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000435C(&qword_1000A8B00);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100015930(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    sub_10000435C(a5);
    int64_t v11 = (char *)swift_allocObject();
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    int64_t v11 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v11 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v13 >= &v14[24 * v9]) {
      memmove(v13, v14, 24 * v9);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[24 * v9] || v13 >= &v14[24 * v9])
  {
    memcpy(v13, v14, 24 * v9);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100015AA8(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000435C(&qword_1000A8AF0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100015C14(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000435C(&qword_1000A8F60);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100015D64(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      id v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_100016EA8(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_100015F14(Swift::UInt *a1, Swift::UInt a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    sub_100017044(a2, v8, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v13;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  if (*(void *)(v9 + 8 * v8) != a2)
  {
    uint64_t v10 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v10;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v9 + 8 * v8) != a2);
  }
  uint64_t result = 0;
  a2 = *(void *)(*(void *)(*v2 + 48) + 8 * v8);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_100016034(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v7 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v28 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    id v24 = a2;
    sub_100017194((uint64_t)v24, v9, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v28;
    swift_bridgeObjectRelease();
    *a1 = v24;
    return 1;
  }
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;
  if (v10 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v12 == v13)
  {
LABEL_16:
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v15 & 1) == 0)
    {
      uint64_t v16 = ~v8;
      do
      {
        unint64_t v9 = (v9 + 1) & v16;
        if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
          goto LABEL_15;
        }
        uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v19 = v18;
        if (v17 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v19 == v20) {
          goto LABEL_16;
        }
        char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      while ((v22 & 1) == 0);
    }
  }

  swift_bridgeObjectRelease();
  char v26 = *(void **)(*(void *)(*v3 + 48) + 8 * v9);
  *a1 = v26;
  id v27 = v26;
  return 0;
}

uint64_t sub_100016260(double *a1, double a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static Hasher._hash(seed:_:)();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_8:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v15 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_1000173C4(v9, isUniquelyReferenced_nonNull_native, a2);
    *uint64_t v3 = v15;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_9;
  }
  uint64_t v10 = *(void *)(v6 + 48);
  double v11 = *(double *)(v10 + 8 * v9);
  if (v11 != a2)
  {
    uint64_t v13 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v13;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_8;
      }
      double v11 = *(double *)(v10 + 8 * v9);
    }
    while (v11 != a2);
  }
  uint64_t result = 0;
  a2 = v11;
LABEL_9:
  *a1 = a2;
  return result;
}

uint64_t sub_100016370()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000435C(&qword_1000A8AF8);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    unint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      uint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      void *v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_100016650()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000435C(&qword_1000A8B38);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v6 = (void *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v26;
                }
                uint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      Swift::UInt v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v18);
      uint64_t result = Hasher._finalize()();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_1000168FC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000435C(&qword_1000A8B68);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    BOOL v27 = v0;
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v29 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v28 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v10 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v12 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v13 = v12 | (v10 << 6);
      }
      else
      {
        int64_t v14 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v14 >= v28) {
          goto LABEL_33;
        }
        unint64_t v15 = v29[v14];
        ++v10;
        if (!v15)
        {
          int64_t v10 = v14 + 1;
          if (v14 + 1 >= v28) {
            goto LABEL_33;
          }
          unint64_t v15 = v29[v10];
          if (!v15)
          {
            int64_t v10 = v14 + 2;
            if (v14 + 2 >= v28) {
              goto LABEL_33;
            }
            unint64_t v15 = v29[v10];
            if (!v15)
            {
              int64_t v16 = v14 + 3;
              if (v16 >= v28)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v27;
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero(v29, ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v29 = -1 << v26;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v15 = v29[v16];
              if (!v15)
              {
                while (1)
                {
                  int64_t v10 = v16 + 1;
                  if (__OFADD__(v16, 1)) {
                    goto LABEL_39;
                  }
                  if (v10 >= v28) {
                    goto LABEL_33;
                  }
                  unint64_t v15 = v29[v10];
                  ++v16;
                  if (v15) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v10 = v16;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v15 - 1) & v15;
        unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
      }
      uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v13);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      Hasher.init(_seed:)();
      String.hash(into:)();
      Swift::Int v18 = Hasher._finalize()();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = v18 & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v8 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v11 = __clz(__rbit64((-1 << v20) & ~*(void *)(v8 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v8 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v11 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      *(void *)(*(void *)(v4 + 48) + 8 * v11) = v17;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_100016C10()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000435C(&qword_1000A8B80);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    BOOL v27 = v1;
    int64_t v5 = 0;
    uint64_t v6 = (uint64_t *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v26 = -1 << v7;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64) {
                  bzero((void *)(v2 + 56), 8 * v10);
                }
                else {
                  *uint64_t v6 = v26;
                }
                uint64_t v1 = v27;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

Swift::Int sub_100016EA8(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  int64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_100016370();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)sub_1000174F8();
      goto LABEL_22;
    }
    sub_100017B88();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    int64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  unint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *unint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

Swift::Int sub_100017044(Swift::Int result, unint64_t a2, char a3)
{
  Swift::UInt v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_100016650();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (Swift::Int)sub_1000176AC();
      goto LABEL_14;
    }
    sub_100017E38();
  }
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  uint64_t result = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(void *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      type metadata accessor for ComponentSize(0);
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v10 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v12 + 48) + 8 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

uint64_t sub_100017194(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = result;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_22;
  }
  if (a3)
  {
    sub_1000168FC();
  }
  else
  {
    if (v8 > v7)
    {
      uint64_t result = (uint64_t)sub_100017844();
LABEL_22:
      uint64_t v25 = *v4;
      *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
      *(void *)(*(void *)(v25 + 48) + 8 * a2) = v6;
      uint64_t v26 = *(void *)(v25 + 16);
      BOOL v27 = __OFADD__(v26, 1);
      uint64_t v28 = v26 + 1;
      if (!v27)
      {
        *(void *)(v25 + 16) = v28;
        return result;
      }
      __break(1u);
      goto LABEL_25;
    }
    sub_1000180B4();
  }
  uint64_t v9 = *v3;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v10 = Hasher._finalize()();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  a2 = v10 & ~v11;
  if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
    goto LABEL_22;
  }
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;
  if (v12 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v14 == v15)
  {
LABEL_25:
    swift_bridgeObjectRelease_n();
    goto LABEL_26;
  }
  char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v17 & 1) == 0)
  {
    uint64_t v18 = ~v11;
    do
    {
      a2 = (a2 + 1) & v18;
      if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
        goto LABEL_22;
      }
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v21 = v20;
      if (v19 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v21 == v22) {
        goto LABEL_25;
      }
      char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
    }
    while ((v24 & 1) == 0);
  }
LABEL_26:
  type metadata accessor for ComponentKey(0);
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1000173C4(uint64_t result, char a2, double a3)
{
  unint64_t v4 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a2 & 1) != 0) {
    goto LABEL_14;
  }
  if (a2)
  {
    sub_100016C10();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_1000179F0();
      goto LABEL_14;
    }
    sub_100018394();
  }
  uint64_t v8 = *v3;
  uint64_t result = static Hasher._hash(seed:_:)();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  unint64_t v4 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(double *)(v10 + 8 * v4) == a3)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        unint64_t v4 = (v4 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
          break;
        }
        if (*(double *)(v10 + 8 * v4) == a3) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (v4 >> 6) + 56) |= 1 << v4;
  *(double *)(*(void *)(v12 + 48) + 8 * v4) = a3;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

void *sub_1000174F8()
{
  uint64_t v1 = v0;
  sub_10000435C(&qword_1000A8AF8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    char v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1000176AC()
{
  uint64_t v1 = v0;
  sub_10000435C(&qword_1000A8B38);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_100017844()
{
  uint64_t v1 = v0;
  sub_10000435C(&qword_1000A8B68);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    id result = v17;
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1000179F0()
{
  uint64_t v1 = v0;
  sub_10000435C(&qword_1000A8B80);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_100017B88()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000435C(&qword_1000A8AF8);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    unint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    int64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    void *v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100017E38()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000435C(&qword_1000A8B38);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    Swift::UInt v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    uint64_t result = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1000180B4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000435C(&qword_1000A8B68);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  BOOL v27 = v0;
  uint64_t v28 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    int64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v14 >= v29) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v28 + 8 * v14);
    ++v10;
    if (!v15)
    {
      int64_t v10 = v14 + 1;
      if (v14 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v15 = *(void *)(v28 + 8 * v10);
      if (!v15)
      {
        int64_t v10 = v14 + 2;
        if (v14 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v15 = *(void *)(v28 + 8 * v10);
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    int64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v13);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    id v18 = v17;
    String.hash(into:)();
    Swift::Int v19 = Hasher._finalize()();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v21 = v19 & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v8 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v11 = __clz(__rbit64((-1 << v21) & ~*(void *)(v8 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v8 + 8 * v22);
      }
      while (v26 == -1);
      unint64_t v11 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    *(void *)(*(void *)(v4 + 48) + 8 * v11) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v27;
    goto LABEL_35;
  }
  unint64_t v15 = *(void *)(v28 + 8 * v16);
  if (v15)
  {
    int64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v29) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v28 + 8 * v10);
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100018394()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000435C(&qword_1000A8B80);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v26 = v1;
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    uint64_t result = static Hasher._hash(seed:_:)();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v26;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100018608(uint64_t a1, char a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return swift_bridgeObjectRelease();
  }
  char v7 = *(unsigned char *)(a1 + 32);
  uint64_t v39 = *(void *)(a1 + 48);
  uint64_t v40 = *(void *)(a1 + 40);
  swift_bridgeObjectRetain();
  uint64_t v8 = (void *)*a3;
  unint64_t v10 = sub_1000189DC(v7);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12)) {
    goto LABEL_23;
  }
  char v14 = v9;
  if (v8[3] >= v13)
  {
    if (a2)
    {
      if (v9) {
        goto LABEL_10;
      }
    }
    else
    {
      sub_1000190B0();
      if (v14) {
        goto LABEL_10;
      }
    }
LABEL_13:
    uint64_t v18 = (void *)*a3;
    *(void *)(*a3 + 8 * (v10 >> 6) + 64) |= 1 << v10;
    *(unsigned char *)(v18[6] + v10) = v7;
    uint64_t v19 = (void *)(v18[7] + 16 * v10);
    *uint64_t v19 = v40;
    v19[1] = v39;
    uint64_t v20 = v18[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (v21)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v18[2] = v22;
    uint64_t v23 = v4 - 1;
    if (v4 == 1) {
      return swift_bridgeObjectRelease_n();
    }
    for (uint64_t i = (_OWORD *)(a1 + 64); ; uint64_t i = (_OWORD *)((char *)i + 24))
    {
      char v25 = *((unsigned char *)i - 8);
      long long v41 = *i;
      uint64_t v26 = (void *)*a3;
      unint64_t v27 = sub_1000189DC(v25);
      uint64_t v29 = v26[2];
      BOOL v30 = (v28 & 1) == 0;
      BOOL v21 = __OFADD__(v29, v30);
      uint64_t v31 = v29 + v30;
      if (v21) {
        break;
      }
      char v32 = v28;
      if (v26[3] < v31)
      {
        sub_1000198D4(v31, 1);
        unint64_t v27 = sub_1000189DC(v25);
        if ((v32 & 1) != (v33 & 1)) {
          goto LABEL_25;
        }
      }
      if (v32) {
        goto LABEL_10;
      }
      uint64_t v34 = (void *)*a3;
      *(void *)(*a3 + 8 * (v27 >> 6) + 64) |= 1 << v27;
      *(unsigned char *)(v34[6] + v27) = v25;
      *(_OWORD *)(v34[7] + 16 * v27) = v41;
      uint64_t v35 = v34[2];
      BOOL v21 = __OFADD__(v35, 1);
      uint64_t v36 = v35 + 1;
      if (v21) {
        goto LABEL_24;
      }
      v34[2] = v36;
      if (!--v23) {
        return swift_bridgeObjectRelease_n();
      }
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_1000198D4(v13, a2 & 1);
  unint64_t v15 = sub_1000189DC(v7);
  if ((v14 & 1) == (v16 & 1))
  {
    unint64_t v10 = v15;
    if ((v14 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    swift_allocError();
    swift_willThrow();
    swift_errorRetain();
    sub_10000435C(&qword_1000A8B58);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease_n();
      return swift_errorRelease();
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  _StringGuts.grow(_:)(30);
  v37._object = (void *)0x8000000100086DF0;
  v37._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v37);
  _print_unlocked<A, B>(_:_:)();
  v38._countAndFlagsBits = 39;
  v38._object = (void *)0xE100000000000000;
  String.append(_:)(v38);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t sub_100018964(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_100018AE8(a1, a2, v4);
}

unint64_t sub_1000189DC(char a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_100083F50[a1]);
  Swift::Int v2 = Hasher._finalize()();

  return sub_100018CCC(a1, v2);
}

unint64_t sub_100018A54(uint64_t a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();

  return sub_100018D80(a1, v2);
}

unint64_t sub_100018AE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    unint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_100018BDC@<X0>(unsigned char *a1@<X8>)
{
  sub_100018C78();
  uint64_t result = EnvironmentValues.subscript.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_100018C2C()
{
  return EnvironmentValues.subscript.setter();
}

unint64_t sub_100018C78()
{
  unint64_t result = qword_1000A8AD8;
  if (!qword_1000A8AD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A8AD8);
  }
  return result;
}

unint64_t sub_100018CCC(char a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = qword_100083F50[a1];
    uint64_t v8 = *(void *)(v2 + 48);
    if (qword_100083F50[*(char *)(v8 + result)] != v7)
    {
      uint64_t v9 = ~v5;
      for (unint64_t result = (result + 1) & v9;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v9)
      {
        if (qword_100083F50[*(char *)(v8 + result)] == v7) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_100018D80(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
            break;
          }
          char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

void *sub_100018EF8()
{
  uint64_t v1 = v0;
  sub_10000435C(&qword_1000A8AE0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    int64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    BOOL v21 = (void *)(*(void *)(v4 + 48) + v16);
    *BOOL v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000190B0()
{
  uint64_t v1 = v0;
  sub_10000435C(&qword_1000A8B18);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v20 = __clz(__rbit64(v18));
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = v20 + (v9 << 6);
LABEL_12:
    long long v16 = *(_OWORD *)(*(void *)(v2 + 56) + 16 * v15);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    *(_OWORD *)(*(void *)(v4 + 56) + 16 * v15) = v16;
  }
  int64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_100019240()
{
  uint64_t v1 = v0;
  sub_10000435C(&qword_1000A8B70);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    int64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    unint64_t v20 = *(void **)(*(void *)(v2 + 56) + v19);
    BOOL v21 = (void *)(*(void *)(v4 + 48) + v16);
    *BOOL v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = v20;
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1000193F4()
{
  uint64_t v1 = v0;
  sub_10000435C(&qword_1000A8F68);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    int64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 32 * v15;
    sub_100020884(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    sub_1000208E0(v22, (_OWORD *)(*(void *)(v4 + 56) + v18));
    id result = v17;
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1000195BC(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000435C(&qword_1000A8AE0);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    int64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  int64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1000198D4(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000435C(&qword_1000A8B18);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v32 = a2;
    int64_t v8 = 0;
    int64_t v34 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v8 << 6);
      }
      else
      {
        int64_t v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v17 >= v33) {
          goto LABEL_31;
        }
        unint64_t v18 = v34[v17];
        ++v8;
        if (!v18)
        {
          int64_t v8 = v17 + 1;
          if (v17 + 1 >= v33) {
            goto LABEL_31;
          }
          unint64_t v18 = v34[v8];
          if (!v18)
          {
            int64_t v19 = v17 + 2;
            if (v19 >= v33)
            {
LABEL_31:
              if ((v32 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_38;
              }
              uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
              if (v31 >= 64) {
                bzero(v34, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *int64_t v34 = -1 << v31;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v18 = v34[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v8 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v33) {
                  goto LABEL_31;
                }
                unint64_t v18 = v34[v8];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v19;
          }
        }
LABEL_21:
        unint64_t v11 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      uint64_t v20 = *(char *)(*(void *)(v5 + 48) + v16);
      int64_t v21 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v16);
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      Hasher.init(_seed:)();
      Hasher._combine(_:)(qword_100083F50[v20]);
      uint64_t result = Hasher._finalize()();
      uint64_t v24 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v25 = result & ~v24;
      unint64_t v26 = v25 >> 6;
      if (((-1 << v25) & ~*(void *)(v12 + 8 * (v25 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v25) & ~*(void *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v27 = 0;
        unint64_t v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v29 = v26 == v28;
          if (v26 == v28) {
            unint64_t v26 = 0;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v12 + 8 * v26);
        }
        while (v30 == -1);
        unint64_t v13 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(void *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(unsigned char *)(*(void *)(v7 + 48) + v13) = v20;
      uint64_t v14 = (void *)(*(void *)(v7 + 56) + 16 * v13);
      void *v14 = v23;
      v14[1] = v22;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100019BB4(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000435C(&qword_1000A8B70);
  char v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v35 = v2;
  int64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    BOOL v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    char v32 = *(void **)(*(void *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      id v33 = v32;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  uint64_t v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100019EC4(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000435C(&qword_1000A8F68);
  char v35 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v34 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v33 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v16 = v15 | (v13 << 6);
      goto LABEL_22;
    }
    int64_t v17 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v17 >= v33) {
      break;
    }
    unint64_t v18 = (void *)(v5 + 64);
    unint64_t v19 = *(void *)(v34 + 8 * v17);
    ++v13;
    if (!v19)
    {
      int64_t v13 = v17 + 1;
      if (v17 + 1 >= v33) {
        goto LABEL_34;
      }
      unint64_t v19 = *(void *)(v34 + 8 * v13);
      if (!v19)
      {
        int64_t v20 = v17 + 2;
        if (v20 >= v33)
        {
LABEL_34:
          swift_release();
          if ((v35 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v19 = *(void *)(v34 + 8 * v20);
        if (!v19)
        {
          while (1)
          {
            int64_t v13 = v20 + 1;
            if (__OFADD__(v20, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v33) {
              goto LABEL_34;
            }
            unint64_t v19 = *(void *)(v34 + 8 * v13);
            ++v20;
            if (v19) {
              goto LABEL_21;
            }
          }
        }
        int64_t v13 = v20;
      }
    }
LABEL_21:
    unint64_t v10 = (v19 - 1) & v19;
    unint64_t v16 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_22:
    int64_t v21 = *(void **)(*(void *)(v5 + 48) + 8 * v16);
    uint64_t v22 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v16);
    if (v35)
    {
      sub_1000208E0(v22, v36);
    }
    else
    {
      sub_100020884((uint64_t)v22, (uint64_t)v36);
      id v23 = v21;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v24 = Hasher._finalize()();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v26 = v24 & ~v25;
    unint64_t v27 = v26 >> 6;
    if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v30 = v27 == v29;
        if (v27 == v29) {
          unint64_t v27 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v11 + 8 * v27);
      }
      while (v31 == -1);
      unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(void *)(*(void *)(v7 + 48) + 8 * v14) = v21;
    uint64_t result = (uint64_t)sub_1000208E0(v36, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v18 = (void *)(v5 + 64);
  if ((v35 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
  if (v32 >= 64) {
    bzero(v18, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v18 = -1 << v32;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10001A200(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void *))
{
  uint64_t v6 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = a2(v6);
  }
  uint64_t v7 = *(void *)(v6 + 16);
  v9[0] = v6 + 32;
  v9[1] = v7;
  uint64_t result = a3(v9);
  *a1 = v6;
  return result;
}

void *sub_10001A284(void *a1)
{
  return sub_100014C74(0, a1[2], 0, a1);
}

Swift::Int sub_10001A298(void *a1)
{
  uint64_t v2 = a1;
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_137;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v78 = 0;
      uint64_t v79 = *v2;
      for (uint64_t i = 1; i != v3; ++i)
      {
        uint64_t v81 = *(void *)(v79 + 8 * i);
        uint64_t v82 = v78;
        do
        {
          uint64_t v83 = *(void *)(v79 + v82);
          if (v81 >= v83) {
            break;
          }
          if (!v79) {
            goto LABEL_141;
          }
          *(void *)(v79 + v82 + 8) = v83;
          *(void *)(v79 + v82) = v81;
          v82 -= 8;
        }
        while (v82 != -8);
        v78 += 8;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_146;
  }
  Swift::Int v95 = result;
  Swift::Int v96 = v3;
  if (v3 < 2)
  {
    uint64_t v8 = &_swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage + 32;
    if (v3 != 1)
    {
      unint64_t v12 = *((void *)&_swiftEmptyArrayStorage + 2);
      uint64_t v11 = (char *)&_swiftEmptyArrayStorage;
LABEL_103:
      uint64_t v94 = v8;
      if (v12 >= 2)
      {
        uint64_t v84 = *v2;
        do
        {
          unint64_t v85 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_132;
          }
          if (!v84) {
            goto LABEL_145;
          }
          long long v86 = v11;
          uint64_t v87 = v11 + 32;
          uint64_t v88 = *(void *)&v11[16 * v85 + 32];
          uint64_t v89 = *(void *)&v11[16 * v12 + 24];
          sub_10001B144((char *)(v84 + 8 * v88), (char *)(v84 + 8 * *(void *)&v87[16 * v12 - 16]), v84 + 8 * v89, __dst);
          if (v1) {
            break;
          }
          if (v89 < v88) {
            goto LABEL_133;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            long long v86 = sub_10001B9E8((uint64_t)v86);
          }
          if (v85 >= *((void *)v86 + 2)) {
            goto LABEL_134;
          }
          uint64_t v90 = &v86[16 * v85 + 32];
          *(void *)uint64_t v90 = v88;
          *((void *)v90 + 1) = v89;
          unint64_t v91 = *((void *)v86 + 2);
          if (v12 > v91) {
            goto LABEL_135;
          }
          memmove(&v86[16 * v12 + 16], &v86[16 * v12 + 32], 16 * (v91 - v12));
          uint64_t v11 = v86;
          *((void *)v86 + 2) = v91 - 1;
          unint64_t v12 = v91 - 1;
        }
        while (v91 > 2);
      }
LABEL_114:
      swift_bridgeObjectRelease();
      v94[2] = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v94 = &_swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    type metadata accessor for ComponentSize(0);
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    Swift::Int v3 = v96;
    uint64_t v94 = (void *)v7;
    __dst = (char *)(v7 + 32);
  }
  Swift::Int v9 = 0;
  uint64_t v10 = *v2;
  char v92 = v2;
  uint64_t v93 = *v2 - 8;
  uint64_t v11 = (char *)&_swiftEmptyArrayStorage;
  uint64_t v97 = *v2;
  while (1)
  {
    Swift::Int v13 = v9++;
    if (v9 < v3)
    {
      uint64_t v14 = *(void *)(v10 + 8 * v9);
      uint64_t v15 = *(void *)(v10 + 8 * v13);
      Swift::Int v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        uint64_t v16 = v14;
        while (1)
        {
          uint64_t v17 = *(void *)(v10 + 8 * v9);
          if (v14 < v15 == v17 >= v16) {
            break;
          }
          ++v9;
          uint64_t v16 = v17;
          if (v3 == v9)
          {
            Swift::Int v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13) {
          goto LABEL_138;
        }
        if (v13 < v9)
        {
          Swift::Int v18 = v9 - 1;
          Swift::Int v19 = v13;
          do
          {
            if (v19 != v18)
            {
              if (!v10) {
                goto LABEL_144;
              }
              uint64_t v20 = *(void *)(v10 + 8 * v19);
              *(void *)(v10 + 8 * v19) = *(void *)(v10 + 8 * v18);
              *(void *)(v10 + 8 * v18) = v20;
            }
            BOOL v59 = ++v19 < v18--;
          }
          while (v59);
        }
      }
    }
    if (v9 >= v3) {
      goto LABEL_47;
    }
    if (__OFSUB__(v9, v13)) {
      goto LABEL_136;
    }
    if (v9 - v13 >= v95) {
      goto LABEL_47;
    }
    Swift::Int v21 = v13 + v95;
    if (__OFADD__(v13, v95)) {
      goto LABEL_139;
    }
    if (v21 >= v3) {
      Swift::Int v21 = v3;
    }
    if (v21 < v13) {
      break;
    }
    if (v9 != v21)
    {
      uint64_t v22 = (uint64_t *)(v93 + 8 * v9);
      do
      {
        uint64_t v23 = *(void *)(v10 + 8 * v9);
        Swift::Int v24 = v13;
        uint64_t v25 = v22;
        do
        {
          uint64_t v26 = *v25;
          if (v23 >= *v25) {
            break;
          }
          if (!v10) {
            goto LABEL_142;
          }
          *uint64_t v25 = v23;
          v25[1] = v26;
          --v25;
          ++v24;
        }
        while (v9 != v24);
        ++v9;
        ++v22;
      }
      while (v9 != v21);
      Swift::Int v9 = v21;
    }
LABEL_47:
    if (v9 < v13) {
      goto LABEL_131;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = sub_10001B6BC(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v28 = *((void *)v11 + 2);
    unint64_t v27 = *((void *)v11 + 3);
    unint64_t v12 = v28 + 1;
    uint64_t v10 = v97;
    if (v28 >= v27 >> 1)
    {
      char v77 = sub_10001B6BC((char *)(v27 > 1), v28 + 1, 1, v11);
      uint64_t v10 = v97;
      uint64_t v11 = v77;
    }
    *((void *)v11 + 2) = v12;
    unint64_t v29 = v11 + 32;
    BOOL v30 = &v11[16 * v28 + 32];
    *(void *)BOOL v30 = v13;
    *((void *)v30 + 1) = v9;
    if (v28)
    {
      while (1)
      {
        unint64_t v31 = v12 - 1;
        if (v12 >= 4)
        {
          int64_t v36 = &v29[16 * v12];
          uint64_t v37 = *((void *)v36 - 8);
          uint64_t v38 = *((void *)v36 - 7);
          BOOL v42 = __OFSUB__(v38, v37);
          uint64_t v39 = v38 - v37;
          if (v42) {
            goto LABEL_120;
          }
          uint64_t v41 = *((void *)v36 - 6);
          uint64_t v40 = *((void *)v36 - 5);
          BOOL v42 = __OFSUB__(v40, v41);
          uint64_t v34 = v40 - v41;
          char v35 = v42;
          if (v42) {
            goto LABEL_121;
          }
          unint64_t v43 = v12 - 2;
          id v44 = &v29[16 * v12 - 32];
          uint64_t v46 = *(void *)v44;
          uint64_t v45 = *((void *)v44 + 1);
          BOOL v42 = __OFSUB__(v45, v46);
          uint64_t v47 = v45 - v46;
          if (v42) {
            goto LABEL_123;
          }
          BOOL v42 = __OFADD__(v34, v47);
          uint64_t v48 = v34 + v47;
          if (v42) {
            goto LABEL_126;
          }
          if (v48 >= v39)
          {
            uint64_t v66 = &v29[16 * v31];
            uint64_t v68 = *(void *)v66;
            uint64_t v67 = *((void *)v66 + 1);
            BOOL v42 = __OFSUB__(v67, v68);
            uint64_t v69 = v67 - v68;
            if (v42) {
              goto LABEL_130;
            }
            BOOL v59 = v34 < v69;
            goto LABEL_84;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v60 = *((void *)v11 + 4);
            uint64_t v61 = *((void *)v11 + 5);
            BOOL v42 = __OFSUB__(v61, v60);
            uint64_t v53 = v61 - v60;
            char v54 = v42;
            goto LABEL_78;
          }
          uint64_t v33 = *((void *)v11 + 4);
          uint64_t v32 = *((void *)v11 + 5);
          BOOL v42 = __OFSUB__(v32, v33);
          uint64_t v34 = v32 - v33;
          char v35 = v42;
        }
        if (v35) {
          goto LABEL_122;
        }
        unint64_t v43 = v12 - 2;
        id v49 = &v29[16 * v12 - 32];
        uint64_t v51 = *(void *)v49;
        uint64_t v50 = *((void *)v49 + 1);
        BOOL v52 = __OFSUB__(v50, v51);
        uint64_t v53 = v50 - v51;
        char v54 = v52;
        if (v52) {
          goto LABEL_125;
        }
        uint64_t v55 = &v29[16 * v31];
        uint64_t v57 = *(void *)v55;
        uint64_t v56 = *((void *)v55 + 1);
        BOOL v42 = __OFSUB__(v56, v57);
        uint64_t v58 = v56 - v57;
        if (v42) {
          goto LABEL_128;
        }
        if (__OFADD__(v53, v58)) {
          goto LABEL_129;
        }
        if (v53 + v58 >= v34)
        {
          BOOL v59 = v34 < v58;
LABEL_84:
          if (v59) {
            unint64_t v31 = v43;
          }
          goto LABEL_86;
        }
LABEL_78:
        if (v54) {
          goto LABEL_124;
        }
        uint64_t v62 = &v29[16 * v31];
        uint64_t v64 = *(void *)v62;
        uint64_t v63 = *((void *)v62 + 1);
        BOOL v42 = __OFSUB__(v63, v64);
        uint64_t v65 = v63 - v64;
        if (v42) {
          goto LABEL_127;
        }
        if (v65 < v53) {
          goto LABEL_15;
        }
LABEL_86:
        unint64_t v70 = v31 - 1;
        if (v31 - 1 >= v12)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v10) {
          goto LABEL_143;
        }
        long long v71 = &v29[16 * v70];
        uint64_t v72 = *(void *)v71;
        uint64_t v73 = v29;
        uint64_t v74 = &v29[16 * v31];
        uint64_t v75 = *((void *)v74 + 1);
        sub_10001B144((char *)(v10 + 8 * *(void *)v71), (char *)(v10 + 8 * *(void *)v74), v10 + 8 * v75, __dst);
        if (v1) {
          goto LABEL_114;
        }
        if (v75 < v72) {
          goto LABEL_117;
        }
        if (v31 > *((void *)v11 + 2)) {
          goto LABEL_118;
        }
        *(void *)long long v71 = v72;
        *(void *)&v73[16 * v70 + 8] = v75;
        unint64_t v76 = *((void *)v11 + 2);
        if (v31 >= v76) {
          goto LABEL_119;
        }
        unint64_t v12 = v76 - 1;
        memmove(v74, v74 + 16, 16 * (v76 - 1 - v31));
        unint64_t v29 = v73;
        *((void *)v11 + 2) = v76 - 1;
        uint64_t v10 = v97;
        if (v76 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    Swift::Int v3 = v96;
    if (v9 >= v96)
    {
      uint64_t v8 = v94;
      uint64_t v2 = v92;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Int sub_10001A928(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_168;
    }
    if (v3) {
      return sub_10001B09C(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1)
  {
LABEL_176:
    Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  Swift::Int v6 = result;
  __int16 v103 = a1;
  if (v3 < 2)
  {
    Swift::Int v9 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v13 = _swiftEmptyArrayStorage[2];
      unint64_t v12 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_134;
    }
    long long v105 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v7 = v5 >> 1;
    sub_10000435C(&qword_1000A8B50);
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v8 + 16) = v7;
    long long v105 = (void *)v8;
    __dst = (char *)(v8 + 32);
  }
  Swift::Int v10 = 0;
  uint64_t v11 = *a1;
  uint64_t v104 = *a1 + 16;
  unint64_t v12 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v106 = v6;
  Swift::Int v107 = v3;
  uint64_t v108 = v11;
  do
  {
    Swift::Int v14 = v10++;
    if (v10 >= v3) {
      goto LABEL_60;
    }
    uint64_t v15 = *(void *)(v11 + 24 * v10 + 16);
    uint64_t v16 = *(void *)(v11 + 24 * v14 + 16);
    if (v15 == v16)
    {
      BOOL v17 = *(void *)(v11 + 24 * v10 + 8) < *(void *)(v11 + 24 * v14 + 8);
      goto LABEL_22;
    }
    if (!v15)
    {
      Swift::Int v19 = v14 + 2;
      if (v14 + 2 >= v3) {
        goto LABEL_52;
      }
      int v18 = 1;
      goto LABEL_31;
    }
    if (!v16)
    {
      Swift::Int v19 = v14 + 2;
      if (v14 + 2 >= v3)
      {
LABEL_59:
        Swift::Int v10 = v19;
        goto LABEL_60;
      }
      int v18 = 0;
LABEL_31:
      if (v3 <= v19 + 1) {
        Swift::Int v20 = v19 + 1;
      }
      else {
        Swift::Int v20 = v3;
      }
      Swift::Int v21 = (void *)(v104 + 24 * v19);
      uint64_t v22 = v21;
      while (1)
      {
        uint64_t v23 = v15;
        uint64_t v24 = *v22;
        v22 += 3;
        uint64_t v15 = v24;
        if (v24 == v23) {
          break;
        }
        if (v15)
        {
          if (v23)
          {
            BOOL v25 = v23 < v15;
LABEL_42:
            int v26 = v25;
            if (v18 != v26) {
              goto LABEL_50;
            }
            goto LABEL_36;
          }
          if (v18) {
            goto LABEL_51;
          }
        }
        else if ((v18 & 1) == 0)
        {
          goto LABEL_59;
        }
LABEL_36:
        Swift::Int v10 = v19;
        Swift::Int v21 = v22;
        if (++v19 >= v3)
        {
          Swift::Int v19 = v20;
          goto LABEL_50;
        }
      }
      BOOL v25 = *(v21 - 1) < *(void *)(v11 + 24 * v10 + 8);
      goto LABEL_42;
    }
    BOOL v17 = v16 < v15;
LABEL_22:
    int v18 = v17;
    Swift::Int v19 = v14 + 2;
    if (v14 + 2 < v3) {
      goto LABEL_31;
    }
LABEL_50:
    Swift::Int v10 = v19;
    if (v18)
    {
LABEL_51:
      if (v19 < v14) {
        goto LABEL_169;
      }
LABEL_52:
      if (v14 < v19)
      {
        uint64_t v27 = 24 * v19;
        uint64_t v28 = 24 * v14;
        Swift::Int v29 = v19;
        Swift::Int v30 = v14;
        while (1)
        {
          if (v30 != --v29)
          {
            if (!v11) {
              goto LABEL_174;
            }
            uint64_t v31 = v11 + v28;
            uint64_t v32 = v11 + v27;
            char v33 = *(unsigned char *)(v11 + v28);
            long long v34 = *(_OWORD *)(v11 + v28 + 8);
            long long v35 = *(_OWORD *)(v11 + v27 - 24);
            *(void *)(v31 + 16) = *(void *)(v11 + v27 - 8);
            *(_OWORD *)uint64_t v31 = v35;
            *(unsigned char *)(v32 - 24) = v33;
            *(_OWORD *)(v32 - 16) = v34;
          }
          ++v30;
          v27 -= 24;
          v28 += 24;
          if (v30 >= v29) {
            goto LABEL_59;
          }
        }
      }
      goto LABEL_59;
    }
LABEL_60:
    if (v10 >= v3) {
      goto LABEL_84;
    }
    if (__OFSUB__(v10, v14)) {
      goto LABEL_167;
    }
    if (v10 - v14 >= v6) {
      goto LABEL_84;
    }
    Swift::Int v36 = v14 + v6;
    if (__OFADD__(v14, v6)) {
      goto LABEL_170;
    }
    if (v36 >= v3) {
      Swift::Int v36 = v3;
    }
    if (v36 < v14)
    {
LABEL_171:
      __break(1u);
LABEL_172:
      __break(1u);
LABEL_173:
      __break(1u);
LABEL_174:
      __break(1u);
LABEL_175:
      __break(1u);
      goto LABEL_176;
    }
    if (v10 != v36)
    {
      uint64_t v37 = v11 + 24 * v10;
      do
      {
        uint64_t v38 = *(void *)(v11 + 24 * v10 + 16);
        uint64_t v39 = v37;
        Swift::Int v40 = v14;
        do
        {
          uint64_t v41 = *(void *)(v39 - 8);
          if (v38 == v41)
          {
            if (*(void *)(v39 + 8) >= *(void *)(v39 - 16)) {
              break;
            }
          }
          else if (v38)
          {
            if (!v41 || v41 >= v38) {
              break;
            }
          }
          if (!v11) {
            goto LABEL_172;
          }
          char v43 = *(unsigned char *)v39;
          uint64_t v44 = *(void *)(v39 + 8);
          *(_OWORD *)uint64_t v39 = *(_OWORD *)(v39 - 24);
          *(void *)(v39 + 16) = *(void *)(v39 - 8);
          *(void *)(v39 - 16) = v44;
          *(void *)(v39 - 8) = v38;
          *(unsigned char *)(v39 - 24) = v43;
          v39 -= 24;
          ++v40;
        }
        while (v10 != v40);
        ++v10;
        v37 += 24;
      }
      while (v10 != v36);
      Swift::Int v10 = v36;
    }
LABEL_84:
    if (v10 < v14) {
      goto LABEL_162;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v12 = sub_10001B6BC(0, *((void *)v12 + 2) + 1, 1, v12);
    }
    unint64_t v46 = *((void *)v12 + 2);
    unint64_t v45 = *((void *)v12 + 3);
    unint64_t v13 = v46 + 1;
    uint64_t v11 = v108;
    if (v46 >= v45 >> 1)
    {
      uint64_t v94 = sub_10001B6BC((char *)(v45 > 1), v46 + 1, 1, v12);
      uint64_t v11 = v108;
      unint64_t v12 = v94;
    }
    *((void *)v12 + 2) = v13;
    uint64_t v47 = v12 + 32;
    uint64_t v48 = &v12[16 * v46 + 32];
    *(void *)uint64_t v48 = v14;
    *((void *)v48 + 1) = v10;
    if (v46)
    {
      while (1)
      {
        unint64_t v49 = v13 - 1;
        if (v13 >= 4)
        {
          char v54 = &v47[16 * v13];
          uint64_t v55 = *((void *)v54 - 8);
          uint64_t v56 = *((void *)v54 - 7);
          BOOL v60 = __OFSUB__(v56, v55);
          uint64_t v57 = v56 - v55;
          if (v60) {
            goto LABEL_151;
          }
          uint64_t v59 = *((void *)v54 - 6);
          uint64_t v58 = *((void *)v54 - 5);
          BOOL v60 = __OFSUB__(v58, v59);
          uint64_t v52 = v58 - v59;
          char v53 = v60;
          if (v60) {
            goto LABEL_152;
          }
          unint64_t v61 = v13 - 2;
          uint64_t v62 = &v47[16 * v13 - 32];
          uint64_t v64 = *(void *)v62;
          uint64_t v63 = *((void *)v62 + 1);
          BOOL v60 = __OFSUB__(v63, v64);
          uint64_t v65 = v63 - v64;
          if (v60) {
            goto LABEL_154;
          }
          BOOL v60 = __OFADD__(v52, v65);
          uint64_t v66 = v52 + v65;
          if (v60) {
            goto LABEL_157;
          }
          if (v66 >= v57)
          {
            uint64_t v84 = &v47[16 * v49];
            uint64_t v86 = *(void *)v84;
            uint64_t v85 = *((void *)v84 + 1);
            BOOL v60 = __OFSUB__(v85, v86);
            uint64_t v87 = v85 - v86;
            if (v60) {
              goto LABEL_161;
            }
            BOOL v77 = v52 < v87;
            goto LABEL_121;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v78 = *((void *)v12 + 4);
            uint64_t v79 = *((void *)v12 + 5);
            BOOL v60 = __OFSUB__(v79, v78);
            uint64_t v71 = v79 - v78;
            char v72 = v60;
            goto LABEL_115;
          }
          uint64_t v51 = *((void *)v12 + 4);
          uint64_t v50 = *((void *)v12 + 5);
          BOOL v60 = __OFSUB__(v50, v51);
          uint64_t v52 = v50 - v51;
          char v53 = v60;
        }
        if (v53) {
          goto LABEL_153;
        }
        unint64_t v61 = v13 - 2;
        uint64_t v67 = &v47[16 * v13 - 32];
        uint64_t v69 = *(void *)v67;
        uint64_t v68 = *((void *)v67 + 1);
        BOOL v70 = __OFSUB__(v68, v69);
        uint64_t v71 = v68 - v69;
        char v72 = v70;
        if (v70) {
          goto LABEL_156;
        }
        uint64_t v73 = &v47[16 * v49];
        uint64_t v75 = *(void *)v73;
        uint64_t v74 = *((void *)v73 + 1);
        BOOL v60 = __OFSUB__(v74, v75);
        uint64_t v76 = v74 - v75;
        if (v60) {
          goto LABEL_159;
        }
        if (__OFADD__(v71, v76)) {
          goto LABEL_160;
        }
        if (v71 + v76 >= v52)
        {
          BOOL v77 = v52 < v76;
LABEL_121:
          if (v77) {
            unint64_t v49 = v61;
          }
          goto LABEL_123;
        }
LABEL_115:
        if (v72) {
          goto LABEL_155;
        }
        __int16 v80 = &v47[16 * v49];
        uint64_t v82 = *(void *)v80;
        uint64_t v81 = *((void *)v80 + 1);
        BOOL v60 = __OFSUB__(v81, v82);
        uint64_t v83 = v81 - v82;
        if (v60) {
          goto LABEL_158;
        }
        if (v83 < v71) {
          goto LABEL_15;
        }
LABEL_123:
        unint64_t v88 = v49 - 1;
        if (v49 - 1 >= v13)
        {
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          __break(1u);
LABEL_161:
          __break(1u);
LABEL_162:
          __break(1u);
LABEL_163:
          __break(1u);
LABEL_164:
          __break(1u);
LABEL_165:
          __break(1u);
LABEL_166:
          __break(1u);
LABEL_167:
          __break(1u);
LABEL_168:
          __break(1u);
LABEL_169:
          __break(1u);
LABEL_170:
          __break(1u);
          goto LABEL_171;
        }
        if (!v11) {
          goto LABEL_173;
        }
        uint64_t v89 = &v47[16 * v88];
        uint64_t v90 = *(void *)v89;
        unint64_t v91 = &v47[16 * v49];
        uint64_t v92 = *((void *)v91 + 1);
        sub_10001B3B4((char *)(v11 + 24 * *(void *)v89), (char *)(v11 + 24 * *(void *)v91), v11 + 24 * v92, __dst);
        if (v1) {
          goto LABEL_131;
        }
        if (v92 < v90) {
          goto LABEL_148;
        }
        if (v49 > *((void *)v12 + 2)) {
          goto LABEL_149;
        }
        *(void *)uint64_t v89 = v90;
        *(void *)&v47[16 * v88 + 8] = v92;
        unint64_t v93 = *((void *)v12 + 2);
        if (v49 >= v93) {
          goto LABEL_150;
        }
        unint64_t v13 = v93 - 1;
        memmove(&v47[16 * v49], v91 + 16, 16 * (v93 - 1 - v49));
        *((void *)v12 + 2) = v93 - 1;
        uint64_t v11 = v108;
        if (v93 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v13 = 1;
LABEL_15:
    Swift::Int v6 = v106;
    Swift::Int v3 = v107;
  }
  while (v10 < v107);
  Swift::Int v9 = v105;
LABEL_134:
  Swift::Int v95 = v12;
  long long v105 = v9;
  if (v13 >= 2)
  {
    uint64_t v96 = *v103;
    do
    {
      unint64_t v97 = v13 - 2;
      if (v13 < 2) {
        goto LABEL_163;
      }
      if (!v96) {
        goto LABEL_175;
      }
      uint64_t v98 = v95;
      uint64_t v99 = *(void *)&v95[16 * v97 + 32];
      uint64_t v100 = *(void *)&v95[16 * v13 + 24];
      sub_10001B3B4((char *)(v96 + 24 * v99), (char *)(v96 + 24 * *(void *)&v95[16 * v13 + 16]), v96 + 24 * v100, __dst);
      if (v1) {
        break;
      }
      if (v100 < v99) {
        goto LABEL_164;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v98 = sub_10001B9E8((uint64_t)v98);
      }
      if (v97 >= *((void *)v98 + 2)) {
        goto LABEL_165;
      }
      uint64_t v101 = &v98[16 * v97 + 32];
      *(void *)uint64_t v101 = v99;
      *((void *)v101 + 1) = v100;
      unint64_t v102 = *((void *)v98 + 2);
      if (v13 > v102) {
        goto LABEL_166;
      }
      memmove(&v98[16 * v13 + 16], &v98[16 * v13 + 32], 16 * (v102 - v13));
      Swift::Int v95 = v98;
      *((void *)v98 + 2) = v102 - 1;
      unint64_t v13 = v102 - 1;
    }
    while (v102 > 2);
  }
LABEL_131:
  swift_bridgeObjectRelease();
  _DWORD v105[2] = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_10001B09C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = *a4;
    uint64_t v5 = *a4 + 24 * a3;
LABEL_5:
    uint64_t v6 = *(void *)(v4 + 24 * a3 + 16);
    uint64_t v7 = v5;
    uint64_t v8 = result;
    while (1)
    {
      uint64_t v9 = *(void *)(v7 - 8);
      if (v6 == v9)
      {
        if (*(void *)(v7 + 8) >= *(void *)(v7 - 16)) {
          goto LABEL_4;
        }
      }
      else if (v6)
      {
        if (!v9 || v9 >= v6)
        {
LABEL_4:
          ++a3;
          v5 += 24;
          if (a3 == a2) {
            return result;
          }
          goto LABEL_5;
        }
      }
      if (!v4) {
        break;
      }
      char v11 = *(unsigned char *)v7;
      uint64_t v12 = *(void *)(v7 + 8);
      *(_OWORD *)uint64_t v7 = *(_OWORD *)(v7 - 24);
      *(void *)(v7 + 16) = *(void *)(v7 - 8);
      *(void *)(v7 - 16) = v12;
      *(void *)(v7 - 8) = v6;
      *(unsigned char *)(v7 - 24) = v11;
      v7 -= 24;
      if (a3 == ++v8) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_10001B144(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 7;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 3;
  uint64_t v24 = __src;
  uint64_t v23 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[8 * v13] <= __dst) {
        memmove(__dst, a2, 8 * v13);
      }
      uint64_t v16 = &v4[8 * v13];
      uint64_t v22 = v16;
      uint64_t v24 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        BOOL v17 = (char *)(a3 - 8);
        while (1)
        {
          int v18 = v17 + 8;
          Swift::Int v19 = v6 - 8;
          uint64_t v20 = *((void *)v6 - 1);
          if (*((void *)v16 - 1) >= v20)
          {
            uint64_t v22 = v16 - 8;
            if (v18 < v16 || v17 >= v16 || v18 != v16) {
              *(void *)BOOL v17 = *((void *)v16 - 1);
            }
            v16 -= 8;
            if (v6 <= v7) {
              goto LABEL_42;
            }
          }
          else
          {
            if (v18 != v6 || v17 >= v6) {
              *(void *)BOOL v17 = v20;
            }
            uint64_t v24 = v6 - 8;
            v6 -= 8;
            if (v19 <= v7) {
              goto LABEL_42;
            }
          }
          v17 -= 8;
          if (v16 <= v4) {
            goto LABEL_42;
          }
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[8 * v10] <= __dst) {
      memmove(__dst, __src, 8 * v10);
    }
    Swift::Int v14 = &v4[8 * v10];
    uint64_t v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if (*(void *)v6 >= *(void *)v4)
        {
          if (v7 != v4) {
            *(void *)uint64_t v7 = *(void *)v4;
          }
          v4 += 8;
          uint64_t v23 = v4;
          uint64_t v15 = v6;
        }
        else
        {
          uint64_t v15 = v6 + 8;
          if (v7 < v6 || v7 >= v15 || v7 != v6) {
            *(void *)uint64_t v7 = *(void *)v6;
          }
        }
        v7 += 8;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      uint64_t v24 = v7;
    }
LABEL_42:
    sub_10001B7B8((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10001B3B4(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = (a2 - __src) / 24;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 24;
  uint64_t v32 = __src;
  uint64_t v31 = __dst;
  if (v9 >= v11)
  {
    if (v10 < -23) {
      goto LABEL_55;
    }
    if (__dst != a2 || &a2[24 * v11] <= __dst) {
      memmove(__dst, a2, 24 * v11);
    }
    uint64_t v20 = &v4[24 * v11];
    Swift::Int v30 = v20;
    uint64_t v32 = v6;
    if (v7 >= v6 || v10 < 24)
    {
LABEL_54:
      sub_10001B874((void **)&v32, &v31, &v30);
      return 1;
    }
    unint64_t v21 = a3 - 24;
    while (1)
    {
      uint64_t v22 = (char *)(v21 + 24);
      uint64_t v23 = *((void *)v20 - 1);
      uint64_t v24 = *((void *)v6 - 1);
      if (v23 == v24)
      {
        if (*((void *)v20 - 2) < *((void *)v6 - 2)) {
          goto LABEL_49;
        }
      }
      else if (!v23 || (v24 ? (BOOL v25 = v24 < v23) : (BOOL v25 = 0), v25))
      {
LABEL_49:
        uint64_t v27 = v6 - 24;
        if (v22 != v6 || v21 >= (unint64_t)v6)
        {
          long long v28 = *(_OWORD *)v27;
          *(void *)(v21 + 16) = *((void *)v6 - 1);
          *(_OWORD *)unint64_t v21 = v28;
        }
        uint64_t v32 = v6 - 24;
        if (v27 <= v7) {
          goto LABEL_54;
        }
        goto LABEL_53;
      }
      Swift::Int v30 = v20 - 24;
      if (v22 < v20 || v21 >= (unint64_t)v20 || v22 != v20)
      {
        long long v26 = *(_OWORD *)(v20 - 24);
        *(void *)(v21 + 16) = *((void *)v20 - 1);
        *(_OWORD *)unint64_t v21 = v26;
      }
      uint64_t v27 = v6;
      v20 -= 24;
      if (v6 <= v7) {
        goto LABEL_54;
      }
LABEL_53:
      v21 -= 24;
      uint64_t v6 = v27;
      if (v20 <= v4) {
        goto LABEL_54;
      }
    }
  }
  if (v8 >= -23)
  {
    if (__dst != __src || &__src[24 * v9] <= __dst) {
      memmove(__dst, __src, 24 * v9);
    }
    uint64_t v12 = &v4[24 * v9];
    Swift::Int v30 = v12;
    if ((unint64_t)v6 < a3 && v8 >= 24)
    {
      uint64_t v13 = v4;
      while (1)
      {
        uint64_t v14 = *((void *)v6 + 2);
        uint64_t v15 = *((void *)v13 + 2);
        if (v14 == v15)
        {
          if (*((void *)v6 + 1) < *((void *)v13 + 1)) {
            goto LABEL_20;
          }
        }
        else if (!v14 || (v15 ? (BOOL v16 = v15 < v14) : (BOOL v16 = 0), v16))
        {
LABEL_20:
          int v18 = v6 + 24;
          BOOL v17 = v6;
          if (v7 == v6 && v7 < v18) {
            goto LABEL_25;
          }
          goto LABEL_24;
        }
        uint64_t v4 = v13 + 24;
        BOOL v17 = v13;
        int v18 = v6;
        if (v7 == v13)
        {
          v13 += 24;
          if (v7 < v4) {
            goto LABEL_25;
          }
        }
        else
        {
          v13 += 24;
        }
LABEL_24:
        long long v19 = *(_OWORD *)v17;
        *((void *)v7 + 2) = *((void *)v17 + 2);
        *(_OWORD *)uint64_t v7 = v19;
LABEL_25:
        v7 += 24;
        if (v13 < v12)
        {
          uint64_t v6 = v18;
          if ((unint64_t)v18 < a3) {
            continue;
          }
        }
        uint64_t v31 = v4;
        uint64_t v32 = v7;
        goto LABEL_54;
      }
    }
    goto LABEL_54;
  }
LABEL_55:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_10001B6BC(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000435C(&qword_1000A8B40);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_10001B7B8(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 7;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -8)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
    {
      return (char *)memmove(result, v3, 8 * v7);
    }
  }
  return result;
}

char *sub_10001B874(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -24)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v6 = v4 / 24;
    if (result != v3 || result >= &v3[24 * v6])
    {
      return (char *)memmove(result, v3, 24 * v6);
    }
  }
  return result;
}

char *sub_10001B944(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  int64_t v4 = *a3 - (void)v3;
  if (v4 < 0)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    if (result != v3 || result >= &v3[v4])
    {
      return (char *)memmove(result, v3, v4);
    }
  }
  return result;
}

char *sub_10001B9E8(uint64_t a1)
{
  return sub_10001B6BC(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_10001B9FC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  Swift::Int v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  Swift::Int v3 = sub_100014C74(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10001BB50(unint64_t a1)
{
  return sub_10001BB80(a1, (uint64_t (*)(uint64_t, void, unint64_t))sub_10001BEB0);
}

uint64_t sub_10001BB68(unint64_t a1)
{
  return sub_10001BB80(a1, (uint64_t (*)(uint64_t, void, unint64_t))sub_10001C0E4);
}

uint64_t sub_10001BB80(unint64_t a1, uint64_t (*a2)(uint64_t, void, unint64_t))
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!((unint64_t)*v2 >> 62))
  {
    uint64_t v6 = *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v7 = v6 + v5;
    if (!__OFADD__(v6, v5)) {
      goto LABEL_5;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v7 = v17 + v5;
  if (__OFADD__(v17, v5)) {
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v8 = *v2;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v2 = v8;
  if (isUniquelyReferenced_nonNull_bridgeObject)
  {
    if ((v8 & 0x8000000000000000) == 0 && (v8 & 0x4000000000000000) == 0)
    {
      uint64_t v10 = v8 & 0xFFFFFFFFFFFFFF8;
      if (v7 <= *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_11;
      }
    }
  }
  if (v8 >> 62) {
    goto LABEL_23;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    swift_bridgeObjectRelease();
    *uint64_t v2 = v11;
    uint64_t v10 = v11 & 0xFFFFFFFFFFFFFF8;
LABEL_11:
    uint64_t result = a2(v10 + 8 * *(void *)(v10 + 16) + 32, (*(void *)(v10 + 24) >> 1) - *(void *)(v10 + 16), a1);
    if (v13 >= v5) {
      break;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v13 >= 1)
  {
    uint64_t v14 = *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v15 = __OFADD__(v14, v13);
    uint64_t v16 = v14 + v13;
    if (v15)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) = v16;
  }
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

uint64_t sub_10001BD54(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  Swift::Int v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  Swift::Int v3 = sub_100014D84(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = &v3[v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[v2] && (unint64_t)v9 < a1 + 32 + 8 * v2) {
    goto LABEL_24;
  }
  memcpy(v9, (const void *)(a1 + 32), 8 * v2);
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unsigned char *sub_10001BE9C(unsigned char *result, char a2)
{
  *result &= a2 ^ 1;
  return result;
}

uint64_t sub_10001BEB0(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_10000A368(&qword_1000A8B88, &qword_1000A83B0);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_10000435C(&qword_1000A83B0);
          BOOL v12 = sub_1000332BC(v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10000A3AC(0, &qword_1000A86E8);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10001C0E4(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_10000A368(&qword_1000A8B98, &qword_1000A8B90);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_10000435C(&qword_1000A8B90);
          BOOL v12 = sub_100033328(v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10000A3AC(0, (unint64_t *)&unk_1000A8930);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_10001C318(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 56;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v8 = 0;
    a3 = 0;
LABEL_35:
    char *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }
  if (!a3)
  {
    int64_t v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  int64_t v8 = 0;
  uint64_t v9 = 0;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(void *)(*(void *)(a4 + 48) + 8 * v12);
    if (v9 == a3) {
      goto LABEL_35;
    }
  }
  int64_t v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  if (v14) {
    goto LABEL_19;
  }
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    int64_t v13 = v8;
LABEL_19:
    unint64_t v16 = __clz(__rbit64(v14));
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = v16 + (v13 << 6);
    int64_t v8 = v13;
    goto LABEL_8;
  }
  int64_t v15 = v13 + 2;
  if (v13 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    int64_t v13 = v15;
    goto LABEL_19;
  }
  int64_t v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13 + 2;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    unint64_t v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v13 >= v10)
    {
      unint64_t v7 = 0;
      int64_t v8 = v10 - 1;
      goto LABEL_34;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

void *sub_10001C4AC(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 64;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v8 = 0;
    a3 = 0;
LABEL_35:
    char *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }
  if (!a3)
  {
    int64_t v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  int64_t v8 = 0;
  uint64_t v9 = 0;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    long long v13 = *(_OWORD *)(*(void *)(a4 + 56) + 16 * v12);
    *(unsigned char *)a2 = *(unsigned char *)(*(void *)(a4 + 48) + v12);
    *(_OWORD *)(a2 + 8) = v13;
    a2 += 24;
    if (v9 == a3) {
      goto LABEL_35;
    }
  }
  int64_t v14 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v14 >= v10) {
    goto LABEL_30;
  }
  unint64_t v15 = *(void *)(v4 + 8 * v14);
  if (v15) {
    goto LABEL_19;
  }
  v8 += 2;
  if (v14 + 1 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v14;
    goto LABEL_34;
  }
  unint64_t v15 = *(void *)(v4 + 8 * v8);
  if (v15)
  {
LABEL_15:
    int64_t v14 = v8;
LABEL_19:
    unint64_t v17 = __clz(__rbit64(v15));
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v12 = v17 + (v14 << 6);
    int64_t v8 = v14;
    goto LABEL_8;
  }
  int64_t v16 = v14 + 2;
  if (v14 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v15 = *(void *)(v4 + 8 * v16);
  if (v15)
  {
LABEL_18:
    int64_t v14 = v16;
    goto LABEL_19;
  }
  int64_t v8 = v14 + 3;
  if (v14 + 3 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v14 + 2;
    goto LABEL_34;
  }
  unint64_t v15 = *(void *)(v4 + 8 * v8);
  if (v15) {
    goto LABEL_15;
  }
  int64_t v16 = v14 + 4;
  if (v14 + 4 >= v10)
  {
LABEL_30:
    unint64_t v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  unint64_t v15 = *(void *)(v4 + 8 * v16);
  if (v15) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v14 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v14 >= v10)
    {
      unint64_t v7 = 0;
      int64_t v8 = v10 - 1;
      goto LABEL_34;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v14);
    ++v16;
    if (v15) {
      goto LABEL_19;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_10001C64C(uint64_t a1)
{
  return sub_100015664(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_10001C660(uint64_t a1)
{
  return sub_100015930(0, *(void *)(a1 + 16), 0, (char *)a1, &qword_1000A8B48);
}

uint64_t sub_10001C690(uint64_t a1)
{
  return sub_100015C14(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_10001C6A4(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_52;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (v2)
  {
    while (1)
    {
      if (v2 < 1)
      {
        __break(1u);
        goto LABEL_59;
      }
      if ((a1 & 0xC000000000000001) == 0) {
        break;
      }
      uint64_t v4 = 0;
      uint64_t v5 = 0;
      uint64_t v6 = _swiftEmptyArrayStorage;
      unint64_t v7 = &_swiftEmptyArrayStorage[4];
      while (1)
      {
        uint64_t v8 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        if (!v4)
        {
          unint64_t v9 = v6[3];
          if ((uint64_t)((v9 >> 1) + 0x4000000000000000) < 0) {
            goto LABEL_50;
          }
          int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
          if (v10 <= 1) {
            uint64_t v11 = 1;
          }
          else {
            uint64_t v11 = v10;
          }
          sub_10000435C(&qword_1000A8D70);
          unint64_t v12 = (void *)swift_allocObject();
          int64_t v13 = j__malloc_size(v12);
          uint64_t v14 = v13 - 32;
          if (v13 < 32) {
            uint64_t v14 = v13 - 17;
          }
          uint64_t v15 = v14 >> 4;
          v12[2] = v11;
          v12[3] = 2 * (v14 >> 4);
          unint64_t v16 = (unint64_t)(v12 + 4);
          uint64_t v17 = v6[3] >> 1;
          if (v6[2])
          {
            if (v12 != v6 || v16 >= (unint64_t)&v6[2 * v17 + 4]) {
              memmove(v12 + 4, v6 + 4, 16 * v17);
            }
            v6[2] = 0;
          }
          unint64_t v7 = (void *)(v16 + 16 * v17);
          uint64_t v4 = (v15 & 0x7FFFFFFFFFFFFFFFLL) - v17;
          swift_release();
          uint64_t v6 = v12;
        }
        BOOL v19 = __OFSUB__(v4--, 1);
        if (v19) {
          break;
        }
        void *v7 = v5;
        v7[1] = v8;
        v7 += 2;
        if (v2 == ++v5) {
          goto LABEL_47;
        }
      }
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v2 = result;
      if (!result) {
        goto LABEL_53;
      }
    }
    uint64_t v4 = 0;
    uint64_t v20 = 0;
    uint64_t v6 = _swiftEmptyArrayStorage;
    unint64_t v21 = &_swiftEmptyArrayStorage[4];
    do
    {
      uint64_t v22 = *(void **)(a1 + 8 * v20 + 32);
      if (v4)
      {
        id v23 = v22;
        BOOL v19 = __OFSUB__(v4--, 1);
        if (v19) {
          goto LABEL_49;
        }
      }
      else
      {
        unint64_t v24 = v6[3];
        if ((uint64_t)((v24 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_51;
        }
        int64_t v25 = v24 & 0xFFFFFFFFFFFFFFFELL;
        if (v25 <= 1) {
          uint64_t v26 = 1;
        }
        else {
          uint64_t v26 = v25;
        }
        sub_10000435C(&qword_1000A8D70);
        uint64_t v27 = (void *)swift_allocObject();
        int64_t v28 = j__malloc_size(v27);
        uint64_t v29 = v28 - 32;
        if (v28 < 32) {
          uint64_t v29 = v28 - 17;
        }
        uint64_t v30 = v29 >> 4;
        v27[2] = v26;
        v27[3] = 2 * (v29 >> 4);
        uint64_t v31 = v27 + 4;
        uint64_t v32 = v6[3] >> 1;
        unint64_t v21 = &v27[2 * v32 + 4];
        uint64_t v33 = (v30 & 0x7FFFFFFFFFFFFFFFLL) - v32;
        if (v6[2])
        {
          if (v27 != v6 || v31 >= &v6[2 * v32 + 4]) {
            memmove(v31, v6 + 4, 16 * v32);
          }
          id v35 = v22;
          v6[2] = 0;
        }
        else
        {
          id v36 = v22;
        }
        swift_release();
        uint64_t v6 = v27;
        BOOL v19 = __OFSUB__(v33, 1);
        uint64_t v4 = v33 - 1;
        if (v19) {
          goto LABEL_49;
        }
      }
      *unint64_t v21 = v20;
      v21[1] = v22;
      v21 += 2;
      ++v20;
    }
    while (v2 != v20);
LABEL_47:
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
LABEL_53:
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v4 = 0;
    uint64_t v6 = _swiftEmptyArrayStorage;
  }
  unint64_t v37 = v6[3];
  if (v37 < 2) {
    return (uint64_t)v6;
  }
  unint64_t v38 = v37 >> 1;
  BOOL v19 = __OFSUB__(v38, v4);
  uint64_t v39 = v38 - v4;
  if (!v19)
  {
    v6[2] = v39;
    return (uint64_t)v6;
  }
LABEL_59:
  __break(1u);
  return result;
}

uint64_t sub_10001C974(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_10001CA68(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + a1 + 32);
    unint64_t v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10001CB50(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  type metadata accessor for ComponentSize(0);
  sub_1000200D8(&qword_1000A8B28, type metadata accessor for ComponentSize);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v7 = result;
  if (v2)
  {
    size_t v4 = (Swift::UInt *)(a1 + 32);
    do
    {
      Swift::UInt v5 = *v4++;
      sub_100015F14(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_10001CBFC(uint64_t a1)
{
  if ((unint64_t)(a1 - 4) > 8) {
    return 6;
  }
  else {
    return byte_100083F80[a1 - 4];
  }
}

uint64_t sub_10001CC20(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10001CD14(uint64_t result, unint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  unint64_t v2 = a2;
  uint64_t v3 = result;
  unint64_t v4 = a2 >> 62;
  if (a2 >> 62)
  {
LABEL_19:
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v12 = v11 - v3;
    if (__OFSUB__(v11, v3))
    {
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v14 < 0)
    {
LABEL_33:
      __break(1u);
      return result;
    }
    if (v13 >= (v12 & ~(v12 >> 63)) || v13 <= -1) {
      uint64_t v16 = v12 & ~(v12 >> 63);
    }
    else {
      uint64_t v16 = v13;
    }
    if (v12 >= 1) {
      uint64_t v7 = v16;
    }
    else {
      uint64_t v7 = v12 & ~(v12 >> 63);
    }
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v17 >= v7) {
      goto LABEL_10;
    }
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  unint64_t v5 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v5 >= ((v5 - result) & ~((uint64_t)(v5 - result) >> 63))) {
    uint64_t v6 = (v5 - result) & ~((uint64_t)(v5 - result) >> 63);
  }
  else {
    uint64_t v6 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((uint64_t)(v5 - result) >= 1) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = (v5 - result) & ~((uint64_t)(v5 - result) >> 63);
  }
  if ((uint64_t)v5 < v7) {
    goto LABEL_31;
  }
LABEL_10:
  if ((v2 & 0xC000000000000001) != 0 && v7)
  {
    sub_10000A3AC(0, &qword_1000A8AD0);
    Swift::Int v8 = 0;
    do
    {
      Swift::Int v9 = v8 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v8);
      Swift::Int v8 = v9;
    }
    while (v7 != v9);
  }
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.subscript.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
  return v10;
}

uint64_t sub_10001CEE8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      sub_10000435C(&qword_1000A8B10);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10001CFF8(uint64_t result, char a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    unint64_t v6 = (void *)swift_bridgeObjectRetain();
    uint64_t v8 = v6[4];
    uint64_t v7 = v6[5];
    uint64_t v44 = v6;
    uint64_t v9 = v6[6];
    uint64_t v10 = (void *)*a3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v12 = sub_100018964(v8, v7);
    uint64_t v13 = v10[2];
    BOOL v14 = (v11 & 1) == 0;
    uint64_t v15 = v13 + v14;
    if (__OFADD__(v13, v14))
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    char v16 = v11;
    if (v10[3] < v15)
    {
      sub_1000195BC(v15, a2 & 1);
      unint64_t v17 = sub_100018964(v8, v7);
      if ((v16 & 1) != (v18 & 1))
      {
LABEL_27:
        uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      unint64_t v12 = v17;
      BOOL v19 = (void *)*a3;
      if ((v16 & 1) == 0) {
        goto LABEL_12;
      }
LABEL_9:
      uint64_t v45 = *(void *)(v19[7] + 8 * v12);
      swift_bridgeObjectRetain();
      sub_10001B9FC(v9);
      swift_bridgeObjectRelease();
      uint64_t v20 = v19[7];
      swift_bridgeObjectRelease();
      *(void *)(v20 + 8 * v12) = v45;
      uint64_t v21 = v3 - 1;
      if (v3 == 1) {
        return swift_bridgeObjectRelease();
      }
LABEL_16:
      for (unint64_t i = v44 + 9; ; i += 3)
      {
        uint64_t v30 = *(i - 2);
        uint64_t v29 = *(i - 1);
        uint64_t v31 = *i;
        uint64_t v32 = (void *)*a3;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v33 = sub_100018964(v30, v29);
        uint64_t v35 = v32[2];
        BOOL v36 = (v34 & 1) == 0;
        BOOL v24 = __OFADD__(v35, v36);
        uint64_t v37 = v35 + v36;
        if (v24) {
          break;
        }
        char v38 = v34;
        if (v32[3] < v37)
        {
          sub_1000195BC(v37, 1);
          unint64_t v33 = sub_100018964(v30, v29);
          if ((v38 & 1) != (v39 & 1)) {
            goto LABEL_27;
          }
        }
        Swift::Int v40 = (void *)*a3;
        if (v38)
        {
          uint64_t v27 = 8 * v33;
          uint64_t v46 = *(void *)(v40[7] + 8 * v33);
          swift_bridgeObjectRetain();
          sub_10001B9FC(v31);
          swift_bridgeObjectRelease();
          uint64_t v28 = v40[7];
          swift_bridgeObjectRelease();
          *(void *)(v28 + v27) = v46;
        }
        else
        {
          v40[(v33 >> 6) + 8] |= 1 << v33;
          uint64_t v41 = (uint64_t *)(v40[6] + 16 * v33);
          *uint64_t v41 = v30;
          v41[1] = v29;
          *(void *)(v40[7] + 8 * v33) = v31;
          uint64_t v42 = v40[2];
          BOOL v24 = __OFADD__(v42, 1);
          uint64_t v43 = v42 + 1;
          if (v24) {
            goto LABEL_26;
          }
          v40[2] = v43;
        }
        if (!--v21) {
          return swift_bridgeObjectRelease();
        }
      }
      goto LABEL_25;
    }
    if (a2)
    {
      BOOL v19 = (void *)*a3;
      if (v11) {
        goto LABEL_9;
      }
    }
    else
    {
      sub_100018EF8();
      BOOL v19 = (void *)*a3;
      if (v16) {
        goto LABEL_9;
      }
    }
LABEL_12:
    v19[(v12 >> 6) + 8] |= 1 << v12;
    uint64_t v22 = (uint64_t *)(v19[6] + 16 * v12);
    *uint64_t v22 = v8;
    v22[1] = v7;
    *(void *)(v19[7] + 8 * v12) = v9;
    uint64_t v23 = v19[2];
    BOOL v24 = __OFADD__(v23, 1);
    uint64_t v25 = v23 + 1;
    if (v24)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v19[2] = v25;
    uint64_t v21 = v3 - 1;
    if (v3 == 1) {
      return swift_bridgeObjectRelease();
    }
    goto LABEL_16;
  }
  return result;
}

uint64_t sub_10001D2D4@<X0>(char a1@<W0>, unint64_t a2@<X1>, char a3@<W2>, int a4@<W3>, double a5@<X4>, char a6@<W5>, uint64_t a7@<X8>, double a8@<D0>)
{
  LODWORD(v9) = a4;
  double v14 = sub_1000746A8(a3, a4, a1);
  uint64_t v161 = v15;
  double v162 = v14;
  uint64_t v159 = v17;
  double v160 = v16;
  LOBYTE(v183) = a3;
  sub_1000746A8(a3, (char)v9, a1);
  double v20 = v18 + v19;
  unsigned __int8 v184 = a1;
  double v21 = sub_100074A84(a1) + v18 + v19;
  if (v21 < a8) {
    double v22 = a8;
  }
  else {
    double v22 = v21;
  }
  if (a2 >> 62) {
    goto LABEL_136;
  }
  uint64_t v23 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (1)
  {
    double v20 = v22 - v20;
    BOOL v24 = _swiftEmptyArrayStorage;
    int v182 = (int)v9;
    uint64_t v163 = a7;
    if (v23)
    {
      if (v23 < 1) {
        goto LABEL_138;
      }
      for (uint64_t i = 0; i != v23; ++i)
      {
        if ((a2 & 0xC000000000000001) != 0) {
          id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v26 = *(id *)(a2 + 8 * i + 32);
        }
        uint64_t v27 = v26;
        id v28 = [v26 components:v156, v157, v158];
        sub_10000A3AC(0, &qword_1000A8AD0);
        unint64_t v29 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (v29 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v30 = *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        swift_bridgeObjectRelease();
        if (v30)
        {
          id v31 = [v27 identifier];
          uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v34 = v33;

          uint64_t v35 = sub_10000C3A8(v184, v20);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            BOOL v24 = sub_100014B4C(0, v24[2] + 1, 1, v24);
          }
          unint64_t v37 = v24[2];
          unint64_t v36 = v24[3];
          if (v37 >= v36 >> 1) {
            BOOL v24 = sub_100014B4C((void *)(v36 > 1), v37 + 1, 1, v24);
          }
          v24[2] = v37 + 1;
          char v38 = &v24[3 * v37];
          v38[4] = v32;
          v38[5] = v34;
          v38[6] = v35;
        }
        else
        {
        }
      }
    }
    swift_bridgeObjectRelease();
    if (v24[2])
    {
      sub_10000435C(&qword_1000A8AE0);
      char v39 = (void *)static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      char v39 = &_swiftEmptyDictionarySingleton;
    }
    uint64_t v186 = v39;
    sub_10001CFF8((uint64_t)v24, 1, &v186);
    swift_bridgeObjectRelease();
    Swift::Int v40 = v186;
    uint64_t v186 = &_swiftEmptySetSingleton;
    char v167 = v40;
    swift_retain();
    uint64_t v41 = sub_10000BAD4(a2);
    swift_bridgeObjectRelease();
    uint64_t v42 = v41[2];
    uint64_t v165 = v41;
    if (v42)
    {
      swift_bridgeObjectRetain_n();
      *(double *)&a7 = 0.0;
      a2 = (unint64_t)(v41 + 5);
      while (1)
      {
        uint64_t v43 = *(void *)a2;
        if (!v167[2]) {
          break;
        }
        uint64_t v44 = *(void *)(a2 - 8);
        swift_bridgeObjectRetain_n();
        unint64_t v45 = sub_100018964(v44, v43);
        if ((v46 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          goto LABEL_33;
        }
        uint64_t v47 = *(void **)(v167[7] + 8 * v45);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
LABEL_34:
        uint64_t v9 = (double *)v47[2];
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        BOOL v48 = __OFADD__(a7, v9);
        a7 += (uint64_t)v9;
        if (v48) {
          goto LABEL_134;
        }
        a2 += 16;
        if (!--v42)
        {
          swift_bridgeObjectRelease();
          goto LABEL_38;
        }
      }
      swift_bridgeObjectRetain();
LABEL_33:
      uint64_t v47 = _swiftEmptyArrayStorage;
      goto LABEL_34;
    }
    swift_bridgeObjectRetain();
    *(double *)&a7 = 0.0;
LABEL_38:
    double v49 = sub_1000748C8(v182 & 1, v184);
    if (__OFSUB__(a7, 1)) {
      break;
    }
    uint64_t v156 = a7 - 1;
    double v157 = v49;
    double v158 = v20;
    uint64_t v164 = v165[2];
    if (!v164)
    {
      double v20 = 0.0;
      uint64_t v154 = v165;
LABEL_131:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)uint64_t v163 = v167;
      *(void *)(v163 + 8) = v154;
      *(double *)(v163 + 16) = v162;
      *(void *)(v163 + 24) = v161;
      *(double *)(v163 + 32) = v160;
      *(void *)(v163 + 40) = v159;
      *(unsigned char *)(v163 + 48) = v182 & 1;
      *(double *)(v163 + 56) = round(v158);
      *(double *)(v163 + 64) = round(v160 + v162 + v157 * (double)v156 + v20);
      return result;
    }
    double v177 = a5;
    double v50 = 4.0;
    if (v184 == 4) {
      double v50 = 2.0;
    }
    double v176 = v50;
    double v51 = 16.0;
    double v20 = 0.0;
    if (v183) {
      double v51 = 0.0;
    }
    double v170 = v51;
    LODWORD(v9) = v182;
    double v52 = 11.0;
    if (v182) {
      double v52 = 10.0;
    }
    double v171 = v52;
    double v53 = 8.0;
    if (v182) {
      double v54 = 8.0;
    }
    else {
      double v54 = 12.0;
    }
    if (v182) {
      double v53 = 6.0;
    }
    double v168 = v53;
    double v169 = v54;
    swift_bridgeObjectRetain();
    unint64_t v55 = 0;
    if (v182 & 1 | (v184 == 3)) {
      double v56 = 30.0;
    }
    else {
      double v56 = 34.0;
    }
    double v175 = v56;
    while (1)
    {
      if (v55 >= v165[2]) {
        goto LABEL_135;
      }
      unint64_t v166 = v55;
      LODWORD(v9) = v167;
      if (v167[2])
      {
        uint64_t v57 = &v165[2 * v55 + 4];
        *(double *)&a7 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
        uint64_t v58 = *v57;
        uint64_t v59 = v57[1];
        swift_bridgeObjectRetain();
        unint64_t v60 = sub_100018964(v58, v59);
        if (v61)
        {
          a7 = *(uint64_t *)(v167[7] + 8 * v60);
          swift_bridgeObjectRetain();
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        *(double *)&a7 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
      }
      uint64_t v174 = *(void *)(a7 + 16);
      if (v174) {
        break;
      }
LABEL_55:
      swift_bridgeObjectRelease();
      unint64_t v55 = v166 + 1;
      if (v166 + 1 == v164)
      {
        uint64_t v154 = v165;
        swift_bridgeObjectRelease();
        goto LABEL_131;
      }
    }
    unint64_t v62 = 0;
    uint64_t v172 = a7;
    uint64_t v173 = a7 + 32;
    while (1)
    {
      if (v62 >= *(void *)(a7 + 16))
      {
        __break(1u);
        goto LABEL_133;
      }
      unint64_t v178 = v62;
      unint64_t v63 = *(void *)(v173 + 16 * v62 + 8);
      if (!(v63 >> 62))
      {
        a7 = *(uint64_t *)((v63 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (*(double *)&a7 != 0.0) {
          break;
        }
        goto LABEL_121;
      }
      swift_bridgeObjectRetain();
      *(double *)&a7 = COERCE_DOUBLE(_CocoaArrayWrapper.endIndex.getter());
      if (*(double *)&a7 != 0.0) {
        break;
      }
LABEL_121:
      swift_bridgeObjectRelease();
      uint64_t v9 = (double *)_swiftEmptyArrayStorage;
LABEL_122:
      uint64_t v149 = *((void *)v9 + 2);
      if (v149)
      {
        double v22 = v9[4];
        uint64_t v150 = v149 - 1;
        if (v150)
        {
          uint64_t v151 = v9 + 5;
          do
          {
            double v152 = *v151++;
            double v153 = v152;
            if (v22 < v152) {
              double v22 = v153;
            }
            --v150;
          }
          while (v150);
        }
      }
      else
      {
        double v22 = 0.0;
      }
      unint64_t v62 = v178 + 1;
      swift_bridgeObjectRelease();
      double v20 = v20 + v22;
      a7 = v172;
      if (v178 + 1 == v174) {
        goto LABEL_55;
      }
    }
    uint64_t v185 = (double *)_swiftEmptyArrayStorage;
    uint64_t v9 = (double *)&v185;
    sub_10001547C(0, a7 & ~(a7 >> 63), 0);
    if ((a7 & 0x8000000000000000) == 0)
    {
      uint64_t v64 = 0;
      uint64_t v9 = v185;
      unint64_t v183 = v63 & 0xC000000000000001;
      unint64_t v179 = v63;
      a5 = *(double *)&a7;
      while (1)
      {
        id v65 = v183 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v63 + 8 * v64 + 32);
        uint64_t v66 = v65;
        id v67 = [v65 componentKey:v156, v157, v158];
        a2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v69 = v68;
        if (a2 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v69 == v70) {
          break;
        }
        a2 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (a2) {
          goto LABEL_88;
        }
        int v72 = v184;
        if (v184 - 2 >= 3) {
          goto LABEL_91;
        }
        if ((a6 & 1) == 0)
        {
          double v73 = 16.0;
          switch(v184)
          {
            case 2u:
LABEL_84:
              id v74 = [self mainScreen];
              [v74 _referenceBounds];
              CGFloat v76 = v75;
              CGFloat v78 = v77;
              CGFloat v80 = v79;
              CGFloat v82 = v81;

              v187.origin.x = v76;
              v187.origin.y = v78;
              v187.size.width = v80;
              v187.size.height = v82;
              if (CGRectGetHeight(v187) > 667.0) {
                double v83 = v171;
              }
              else {
                double v83 = 10.0;
              }
              break;
            case 3u:
              Swift::Int v95 = self;
              id v96 = [v95 mainScreen];
              [v96 _referenceBounds];
              CGFloat v98 = v97;
              CGFloat v100 = v99;
              CGFloat v102 = v101;
              CGFloat v104 = v103;

              v189.origin.x = v98;
              v189.origin.y = v100;
              v189.size.width = v102;
              v189.size.height = v104;
              if ((CGRectGetHeight(v189) <= 667.0) | v182 & 1) {
                double v83 = 7.0;
              }
              else {
                double v83 = 10.0;
              }
              id v105 = [v95 mainScreen];
              [v105 _referenceBounds];
              CGFloat v107 = v106;
              CGFloat v109 = v108;
              CGFloat v111 = v110;
              CGFloat v113 = v112;

              v190.origin.x = v107;
              v190.origin.y = v109;
              v190.size.width = v111;
              v190.size.height = v113;
              if (v182 & 1 | (CGRectGetHeight(v190) <= 667.0)) {
                double v73 = 10.0;
              }
              else {
                double v73 = 12.0;
              }
              break;
            case 4u:
              goto LABEL_84;
            default:
              double v83 = v170;
              break;
          }
          a2 = v184;
          long long v124 = self;
          id v125 = [v124 mainScreen];
          [v125 _referenceBounds];
          CGFloat v127 = v126;
          CGFloat v129 = v128;
          CGFloat v131 = v130;
          CGFloat v133 = v132;

          v192.origin.x = v127;
          v192.origin.y = v129;
          v192.size.width = v131;
          v192.size.height = v133;
          if ((CGRectGetHeight(v192) <= 667.0) | v182 & 1 | (v184 == 3)) {
            double v134 = 30.0;
          }
          else {
            double v134 = 34.0;
          }
          id v135 = [v124 mainScreen];
          [v135 _referenceBounds];
          CGFloat v137 = v136;
          CGFloat v139 = v138;
          CGFloat v141 = v140;
          CGFloat v143 = v142;

          v193.origin.x = v137;
          v193.origin.y = v139;
          v193.size.width = v141;
          v193.size.height = v143;
          double Height = CGRectGetHeight(v193);

          if (v184 == 3)
          {
            double v145 = 6.0;
            unint64_t v63 = v179;
            *(double *)&a7 = a5;
            if (Height > 667.0) {
              double v145 = v168;
            }
          }
          else
          {
            double v145 = 8.0;
            unint64_t v63 = v179;
            *(double *)&a7 = a5;
            if (Height > 667.0) {
              double v145 = v169;
            }
          }
          double v146 = v177 - (v83 + v73) - v134;
          double v56 = v175;
          double v94 = (v146 - v176 * v145) / v176;
          goto LABEL_116;
        }
        if ((v182 & 1) == 0)
        {
          if (v184 != 3)
          {
            id v114 = [self mainScreen];
            [v114 _referenceBounds];
            CGFloat v116 = v115;
            CGFloat v118 = v117;
            CGFloat v120 = v119;
            CGFloat v122 = v121;

            v191.origin.x = v116;
            v191.origin.y = v118;
            v191.size.width = v120;
            v191.size.height = v122;
            double v123 = CGRectGetHeight(v191);

            if (v123 > 667.0) {
              double v94 = 50.0;
            }
            else {
              double v94 = 45.0;
            }
            goto LABEL_116;
          }
LABEL_96:

          double v94 = 44.0;
          goto LABEL_116;
        }

        double v94 = 34.0;
LABEL_116:
        uint64_t v185 = v9;
        unint64_t v148 = *((void *)v9 + 2);
        unint64_t v147 = *((void *)v9 + 3);
        if (v148 >= v147 >> 1)
        {
          sub_10001547C(v147 > 1, v148 + 1, 1);
          uint64_t v9 = v185;
        }
        ++v64;
        *((void *)v9 + 2) = v148 + 1;
        v9[v148 + 4] = v94;
        if (a7 == v64)
        {
          swift_bridgeObjectRelease();
          goto LABEL_122;
        }
      }
      swift_bridgeObjectRelease_n();
LABEL_88:
      int v72 = v184;
      if (v184 - 2 < 3)
      {
        id v84 = [self mainScreen];
        [v84 _referenceBounds];
        CGFloat v86 = v85;
        CGFloat v88 = v87;
        CGFloat v90 = v89;
        CGFloat v92 = v91;

        v188.origin.x = v86;
        v188.origin.y = v88;
        v188.size.width = v90;
        v188.size.height = v92;
        double v93 = CGRectGetHeight(v188);

        double v94 = 30.0;
        if (v93 > 667.0) {
          double v94 = v56;
        }
        goto LABEL_116;
      }
LABEL_91:
      if (v72) {
        goto LABEL_96;
      }

      double v94 = 45.0;
      goto LABEL_116;
    }
LABEL_133:
    __break(1u);
LABEL_134:
    __break(1u);
LABEL_135:
    __break(1u);
LABEL_136:
    swift_bridgeObjectRetain();
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
  }
  __break(1u);
LABEL_138:
  __break(1u);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_10001DF9C()
{
  return swift_release();
}

uint64_t sub_10001DFA4(char a1, double a2)
{
  double v4 = 88.0;
  switch(a1)
  {
    case 1:
    case 3:
      goto LABEL_4;
    case 2:
    case 4:
      id v5 = [self mainScreen];
      [v5 _referenceBounds];
      CGFloat v7 = v6;
      CGFloat v9 = v8;
      CGFloat v11 = v10;
      CGFloat v13 = v12;

      v16.origin.x = v7;
      v16.origin.y = v9;
      v16.size.width = v11;
      v16.size.height = v13;
      BOOL v14 = CGRectGetHeight(v16) > 667.0;
      double v4 = 100.0;
      if (!v14) {
        double v4 = 90.0;
      }
LABEL_4:
      if (v4 > a2) {
        return 1;
      }
      goto LABEL_7;
    default:
      if (a2 < 90.0) {
        return 1;
      }
LABEL_7:
      if (sub_10000E67C(a1, 3) > a2) {
        return 2;
      }
      if (sub_10000E67C(a1, 4) > a2) {
        return 3;
      }
      if (sub_10000E67C(a1, 5) > a2) {
        return 4;
      }
      if (sub_10000E67C(a1, 5) > a2) {
        return 1;
      }
      return 5;
  }
}

uint64_t sub_10001E160(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_10001E2C0();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v7 = result;
  if (v2)
  {
    double v4 = (double *)(a1 + 32);
    do
    {
      double v5 = *v4++;
      sub_100016260(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

char *sub_10001E1D4(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    double v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t sub_10001E2C0()
{
  unint64_t result = qword_1000A8B78;
  if (!qword_1000A8B78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A8B78);
  }
  return result;
}

unsigned char *initializeBufferWithCopyOfBuffer for TFUIConfig(unsigned char *result, unsigned char *a2)
{
  char *result = *a2;
  return result;
}

uint64_t _s7ColumnsOwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s7ColumnsOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    char *result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10001E47CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 5;
        break;
    }
  }
  return result;
}

uint64_t sub_10001E4A4(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_10001E4AC(unsigned char *result, char a2)
{
  char *result = a2;
  return result;
}

ValueMetadata *_s7ColumnsOMa()
{
  return &_s7ColumnsON;
}

uint64_t destroy for _TextFormattingLayoutView(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(a1 + 72);
  char v3 = *(unsigned char *)(a1 + 80);

  return sub_10001F574(v2, v3);
}

uint64_t initializeWithCopy for _TextFormattingLayoutView(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v5 = *(void *)(a2 + 72);
  char v6 = *(unsigned char *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10001F504(v5, v6);
  *(void *)(a1 + 72) = v5;
  *(unsigned char *)(a1 + 80) = v6;
  return a1;
}

uint64_t assignWithCopy for _TextFormattingLayoutView(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  *(void *)a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = v2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = v2[2];
  *(void *)(a1 + 24) = v2[3];
  *(void *)(a1 + 32) = v2[4];
  *(void *)(a1 + 40) = v2[5];
  *(unsigned char *)(a1 + 48) = *((unsigned char *)v2 + 48);
  *(void *)(a1 + 56) = v2[7];
  *(void *)(a1 + 64) = v2[8];
  uint64_t v4 = v2[9];
  LOBYTE(v2) = *((unsigned char *)v2 + 80);
  sub_10001F504(v4, (char)v2);
  uint64_t v5 = *(void *)(a1 + 72);
  char v6 = *(unsigned char *)(a1 + 80);
  *(void *)(a1 + 72) = v4;
  *(unsigned char *)(a1 + 80) = (_BYTE)v2;
  sub_10001F574(v5, v6);
  return a1;
}

__n128 initializeWithTake for _TextFormattingLayoutView(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for _TextFormattingLayoutView(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  char v5 = *(unsigned char *)(a2 + 80);
  uint64_t v6 = *(void *)(a1 + 72);
  char v7 = *(unsigned char *)(a1 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = v5;
  sub_10001F574(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for _TextFormattingLayoutView(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 81)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _TextFormattingLayoutView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 80) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 81) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 81) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _TextFormattingLayoutView()
{
  return &type metadata for _TextFormattingLayoutView;
}

void *_s7SectionVwCP(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s7SectionVwxx()
{
  return swift_bridgeObjectRelease();
}

void *_s7SectionVwca(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *_s7SectionVwta(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TFFrameTracker(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TFFrameTracker(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *_s7SectionVMa()
{
  return &_s7SectionVN;
}

unint64_t sub_10001E8D0()
{
  unint64_t result = qword_1000A8BA0;
  if (!qword_1000A8BA0)
  {
    sub_100003F9C(&qword_1000A8BA8);
    sub_10001E94C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A8BA0);
  }
  return result;
}

unint64_t sub_10001E94C()
{
  unint64_t result = qword_1000A8BB0;
  if (!qword_1000A8BB0)
  {
    sub_100003F9C(&qword_1000A8BB8);
    sub_10001E9C8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A8BB0);
  }
  return result;
}

unint64_t sub_10001E9C8()
{
  unint64_t result = qword_1000A8BC0;
  if (!qword_1000A8BC0)
  {
    sub_100003F9C(&qword_1000A8BC8);
    sub_10001EA44();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A8BC0);
  }
  return result;
}

unint64_t sub_10001EA44()
{
  unint64_t result = qword_1000A8BD0;
  if (!qword_1000A8BD0)
  {
    sub_100003F9C(&qword_1000A8BD8);
    sub_10001EAE4();
    sub_10000A368(&qword_1000A8C10, &qword_1000A8C18);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A8BD0);
  }
  return result;
}

unint64_t sub_10001EAE4()
{
  unint64_t result = qword_1000A8BE0;
  if (!qword_1000A8BE0)
  {
    sub_100003F9C(&qword_1000A8BE8);
    sub_10000A368(&qword_1000A8BF0, &qword_1000A8BF8);
    sub_10000A368(&qword_1000A8C00, &qword_1000A8C08);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A8BE0);
  }
  return result;
}

void *sub_10001EBA8()
{
  return &protocol witness table for Int;
}

uint64_t sub_10001EBB4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10001EBD0()
{
  return sub_10000A368(&qword_1000A8C20, &qword_1000A8C28);
}

unint64_t sub_10001EC10()
{
  unint64_t result = qword_1000A8C30;
  if (!qword_1000A8C30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A8C30);
  }
  return result;
}

uint64_t sub_10001EC68@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10000D598(a1, v2 + 16, a2);
}

uint64_t sub_10001EC70(uint64_t a1)
{
  return a1;
}

uint64_t sub_10001EC9C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  char v3 = *(unsigned char *)(a1 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10001F504(v2, v3);
  return a1;
}

uint64_t sub_10001ECF4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001F574(*(void *)(v0 + 88), *(unsigned char *)(v0 + 96));

  return _swift_deallocObject(v0, 97, 7);
}

uint64_t sub_10001ED40@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10000D784(a1, v2 + 16, a2);
}

unint64_t sub_10001ED48()
{
  unint64_t result = qword_1000A8C80;
  if (!qword_1000A8C80)
  {
    sub_100003F9C(&qword_1000A8C70);
    sub_10001EDC4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A8C80);
  }
  return result;
}

unint64_t sub_10001EDC4()
{
  unint64_t result = qword_1000A8C88;
  if (!qword_1000A8C88)
  {
    sub_100003F9C(&qword_1000A8C90);
    sub_10000A368(&qword_1000A8C98, &qword_1000A8CA0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A8C88);
  }
  return result;
}

unint64_t sub_10001EE64()
{
  unint64_t result = qword_1000A8CA8;
  if (!qword_1000A8CA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A8CA8);
  }
  return result;
}

uint64_t sub_10001EEB8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001F574(*(void *)(v0 + 96), *(unsigned char *)(v0 + 104));

  return _swift_deallocObject(v0, 107, 7);
}

uint64_t sub_10001EF04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10000DEA0(a1, v2 + 24, *(unsigned char *)(v2 + 105), *(unsigned char *)(v2 + 106), a2, *(double *)(v2 + 16));
}

unint64_t sub_10001EF18()
{
  unint64_t result = qword_1000A8CD8;
  if (!qword_1000A8CD8)
  {
    sub_100003F9C(&qword_1000A8CE0);
    sub_10001EFB8();
    sub_10000A368(&qword_1000A8D48, &qword_1000AAA10);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A8CD8);
  }
  return result;
}

unint64_t sub_10001EFB8()
{
  unint64_t result = qword_1000A8CE8;
  if (!qword_1000A8CE8)
  {
    sub_100003F9C(&qword_1000A8CF0);
    sub_10001F058();
    sub_10000A368(&qword_1000A8D38, &qword_1000A8D40);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A8CE8);
  }
  return result;
}

unint64_t sub_10001F058()
{
  unint64_t result = qword_1000A8CF8;
  if (!qword_1000A8CF8)
  {
    sub_100003F9C(&qword_1000A8D00);
    sub_10001F0F8();
    sub_10000A368(&qword_1000A8D38, &qword_1000A8D40);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A8CF8);
  }
  return result;
}

unint64_t sub_10001F0F8()
{
  unint64_t result = qword_1000A8D08;
  if (!qword_1000A8D08)
  {
    sub_100003F9C(&qword_1000A8D10);
    sub_10000A368(&qword_1000A8D18, &qword_1000A8D20);
    sub_10000A368(&qword_1000A8D28, &qword_1000A8D30);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A8D08);
  }
  return result;
}

uint64_t sub_10001F1BC@<X0>(uint64_t a1@<X8>)
{
  sub_10001F4A4();
  uint64_t result = EnvironmentValues.subscript.getter();
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return result;
}

uint64_t sub_10001F214()
{
  return EnvironmentValues.subscript.setter();
}

double sub_10001F268@<D0>(double *a1@<X8>)
{
  return sub_10000E2E0((void (*)(void))sub_10001F450, a1);
}

uint64_t sub_10001F288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000E35C(a1, a2, a3, a4, (void (*)(void))sub_10001F450);
}

double sub_10001F2A8@<D0>(double *a1@<X8>)
{
  return sub_10000E2E0((void (*)(void))sub_10001F3FC, a1);
}

uint64_t sub_10001F2C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000E35C(a1, a2, a3, a4, (void (*)(void))sub_10001F3FC);
}

uint64_t sub_10001F2E8@<X0>(unsigned char *a1@<X8>)
{
  sub_10001F3A8();
  uint64_t result = EnvironmentValues.subscript.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_10001F338()
{
  return EnvironmentValues.subscript.setter();
}

double sub_10001F384(uint64_t a1)
{
  *(unsigned char *)(a1 + 176) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

unint64_t sub_10001F3A8()
{
  unint64_t result = qword_1000A8D50;
  if (!qword_1000A8D50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A8D50);
  }
  return result;
}

unint64_t sub_10001F3FC()
{
  unint64_t result = qword_1000A8D58;
  if (!qword_1000A8D58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A8D58);
  }
  return result;
}

unint64_t sub_10001F450()
{
  unint64_t result = qword_1000A8D60;
  if (!qword_1000A8D60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A8D60);
  }
  return result;
}

unint64_t sub_10001F4A4()
{
  unint64_t result = qword_1000A8D68;
  if (!qword_1000A8D68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A8D68);
  }
  return result;
}

uint64_t sub_10001F4F8(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_10001F504(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return swift_retain();
  }
  return result;
}

void _s13ComponentViewVwxx(uint64_t a1)
{
  swift_release();
  sub_10001F568(*(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 24), *(unsigned char *)(a1 + 25));
  sub_10001F574(*(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  uint64_t v2 = *(void **)(a1 + 48);
}

uint64_t sub_10001F568(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0) {
    return swift_release();
  }
  return result;
}

uint64_t sub_10001F574(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return swift_release();
  }
  return result;
}

uint64_t _s13ComponentViewVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 25);
  uint64_t v7 = *(unsigned __int8 *)(a2 + 24);
  swift_retain();
  sub_10001F4F8(v5, v7, v6);
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 25) = v6;
  uint64_t v8 = *(void *)(a2 + 32);
  char v9 = *(unsigned char *)(a2 + 40);
  sub_10001F504(v8, v9);
  *(void *)(a1 + 32) = v8;
  *(unsigned char *)(a1 + 40) = v9;
  double v10 = *(void **)(a2 + 48);
  *(void *)(a1 + 48) = v10;
  id v11 = v10;
  return a1;
}

uint64_t _s13ComponentViewVwca(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  char v5 = *(unsigned char *)(a2 + 25);
  unsigned __int8 v6 = *(unsigned char *)(a2 + 24);
  sub_10001F4F8(v4, v6, v5);
  uint64_t v7 = *(void *)(a1 + 16);
  char v8 = *(unsigned char *)(a1 + 25);
  *(void *)(a1 + 16) = v4;
  uint64_t v9 = *(unsigned __int8 *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 25) = v5;
  sub_10001F568(v7, v9, v8);
  uint64_t v10 = *(void *)(a2 + 32);
  char v11 = *(unsigned char *)(a2 + 40);
  sub_10001F504(v10, v11);
  uint64_t v12 = *(void *)(a1 + 32);
  char v13 = *(unsigned char *)(a1 + 40);
  *(void *)(a1 + 32) = v10;
  *(unsigned char *)(a1 + 40) = v11;
  sub_10001F574(v12, v13);
  BOOL v14 = *(void **)(a2 + 48);
  uint64_t v15 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = v14;
  id v16 = v14;

  return a1;
}

__n128 _s13ComponentViewVwtk(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t _s13ComponentViewVwta(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  char v4 = *(unsigned char *)(a2 + 24);
  char v5 = *(unsigned char *)(a2 + 25);
  uint64_t v6 = *(void *)(a1 + 16);
  char v7 = *(unsigned char *)(a1 + 25);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 25) = v5;
  sub_10001F568(v6, v8, v7);
  char v9 = *(unsigned char *)(a2 + 40);
  uint64_t v10 = *(void *)(a1 + 32);
  char v11 = *(unsigned char *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = v9;
  sub_10001F574(v10, v11);
  uint64_t v12 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);

  return a1;
}

uint64_t _s13ComponentViewVwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s13ComponentViewVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 48) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *_s13ComponentViewVMa()
{
  return &_s13ComponentViewVN;
}

uint64_t sub_10001F82C()
{
  return sub_10001F868(&qword_1000A8D78, &qword_1000A8D80, (void (*)(void))sub_10001F8E0);
}

uint64_t sub_10001F868(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100003F9C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10001F8E0()
{
  unint64_t result = qword_1000A8D88;
  if (!qword_1000A8D88)
  {
    sub_100003F9C(&qword_1000A8C38);
    sub_10000A368(&qword_1000A8C58, &qword_1000A8C48);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A8D88);
  }
  return result;
}

uint64_t sub_10001F978()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10001F99C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10001F9CC()
{
  return EnvironmentValues.isEnabled.setter();
}

uint64_t sub_10001F9F4()
{
  return _swift_deallocObject(v0, 17, 7);
}

unsigned char *sub_10001FA04(unsigned char *result)
{
  *result &= ~*(unsigned char *)(v1 + 16) & 1;
  return result;
}

unint64_t sub_10001FA1C()
{
  unint64_t result = qword_1000A8DE8;
  if (!qword_1000A8DE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A8DE8);
  }
  return result;
}

uint64_t sub_10001FA70()
{
  return sub_10001FAAC(&qword_1000A8DF8, &qword_1000A8DE0, (void (*)(void))sub_10001FB34, (void (*)(void))sub_10001FED0);
}

uint64_t sub_10001FAAC(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100003F9C(a2);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10001FB34()
{
  return sub_10001FAAC(&qword_1000A8E00, &qword_1000A8E08, (void (*)(void))sub_10001FB70, (void (*)(void))sub_10001FD74);
}

uint64_t sub_10001FB70()
{
  return sub_10001FAAC(&qword_1000A8E10, &qword_1000A8E18, (void (*)(void))sub_10001FBAC, (void (*)(void))sub_10001FC90);
}

uint64_t sub_10001FBAC()
{
  return sub_10001FAAC(&qword_1000A8E20, &qword_1000A8E28, (void (*)(void))sub_10001FBE8, (void (*)(void))sub_10001FC3C);
}

unint64_t sub_10001FBE8()
{
  unint64_t result = qword_1000A8E30;
  if (!qword_1000A8E30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A8E30);
  }
  return result;
}

unint64_t sub_10001FC3C()
{
  unint64_t result = qword_1000A8E38;
  if (!qword_1000A8E38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A8E38);
  }
  return result;
}

uint64_t sub_10001FC90()
{
  return sub_10001FAAC(&qword_1000A8E40, &qword_1000A8E48, (void (*)(void))sub_10001FCCC, (void (*)(void))sub_10001FD20);
}

unint64_t sub_10001FCCC()
{
  unint64_t result = qword_1000A8E50;
  if (!qword_1000A8E50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A8E50);
  }
  return result;
}

unint64_t sub_10001FD20()
{
  unint64_t result = qword_1000A8E58;
  if (!qword_1000A8E58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A8E58);
  }
  return result;
}

uint64_t sub_10001FD74()
{
  return sub_10001FAAC(&qword_1000A8E60, &qword_1000A8E68, (void (*)(void))sub_10001FDB0, (void (*)(void))sub_10001FE40);
}

uint64_t sub_10001FDB0()
{
  return sub_10001FAAC(&qword_1000A8E70, &qword_1000A8E78, (void (*)(void))sub_10001FD20, (void (*)(void))sub_10001FDEC);
}

unint64_t sub_10001FDEC()
{
  unint64_t result = qword_1000A8E80;
  if (!qword_1000A8E80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A8E80);
  }
  return result;
}

uint64_t sub_10001FE40()
{
  return sub_10001FAAC(&qword_1000A8E88, &qword_1000A8E90, (void (*)(void))sub_10001FDEC, (void (*)(void))sub_10001FE7C);
}

unint64_t sub_10001FE7C()
{
  unint64_t result = qword_1000A8E98;
  if (!qword_1000A8E98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A8E98);
  }
  return result;
}

uint64_t sub_10001FED0()
{
  return sub_10001FAAC(&qword_1000A8EA0, &qword_1000A8DC8, (void (*)(void))sub_10001FF0C, (void (*)(void))sub_100020174);
}

uint64_t sub_10001FF0C()
{
  return sub_10001FAAC(&qword_1000A8EA8, &qword_1000A8DC0, (void (*)(void))sub_10001FF48, (void (*)(void))sub_10002002C);
}

uint64_t sub_10001FF48()
{
  return sub_10001FAAC(&qword_1000A8EB0, &qword_1000A8EB8, (void (*)(void))sub_10001FF84, (void (*)(void))sub_10001FFD8);
}

unint64_t sub_10001FF84()
{
  unint64_t result = qword_1000A8EC0;
  if (!qword_1000A8EC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A8EC0);
  }
  return result;
}

unint64_t sub_10001FFD8()
{
  unint64_t result = qword_1000A8EC8;
  if (!qword_1000A8EC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A8EC8);
  }
  return result;
}

unint64_t sub_10002002C()
{
  unint64_t result = qword_1000A8ED0;
  if (!qword_1000A8ED0)
  {
    sub_100003F9C(&qword_1000A8DA8);
    sub_1000200D8(&qword_1000A8ED8, (void (*)(uint64_t))type metadata accessor for TFTextColorControl);
    sub_100020120();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A8ED0);
  }
  return result;
}

uint64_t sub_1000200D8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100020120()
{
  unint64_t result = qword_1000A8EE0;
  if (!qword_1000A8EE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A8EE0);
  }
  return result;
}

uint64_t sub_100020174()
{
  return sub_10001FAAC(&qword_1000A8EE8, &qword_1000A8EF0, (void (*)(void))sub_1000201B0, (void (*)(void))sub_100020294);
}

uint64_t sub_1000201B0()
{
  return sub_10001FAAC(&qword_1000A8EF8, &qword_1000A8F00, (void (*)(void))sub_1000201EC, (void (*)(void))sub_100020240);
}

unint64_t sub_1000201EC()
{
  unint64_t result = qword_1000A8F08;
  if (!qword_1000A8F08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A8F08);
  }
  return result;
}

unint64_t sub_100020240()
{
  unint64_t result = qword_1000A8F10;
  if (!qword_1000A8F10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A8F10);
  }
  return result;
}

unint64_t sub_100020294()
{
  unint64_t result = qword_1000A8F18;
  if (!qword_1000A8F18)
  {
    sub_100003F9C(&qword_1000A8F20);
    sub_100020240();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A8F18);
  }
  return result;
}

unint64_t sub_100020308()
{
  unint64_t result = qword_1000A8F28;
  if (!qword_1000A8F28)
  {
    sub_100003F9C(&qword_1000A8DF0);
    sub_10001FA1C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A8F28);
  }
  return result;
}

uint64_t sub_100020384()
{
  return EnvironmentValues.horizontalSizeClass.getter();
}

uint64_t sub_1000203AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TFTextColorControl();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100020410(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TFTextColorControl();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100020474(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TFTextColorControl();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000204D0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  char v3 = *(unsigned char *)(a1 + 33);
  uint64_t v4 = *(void *)(a1 + 40);
  char v5 = *(unsigned char *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  char v7 = *(unsigned char *)(a1 + 64);
  uint64_t v8 = *(void *)(a1 + 72);
  char v9 = *(unsigned char *)(a1 + 80);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 32);
  swift_retain();
  sub_10001F4F8(v2, v10, v3);
  sub_10001F504(v4, v5);
  sub_10001F504(v6, v7);
  sub_10001F504(v8, v9);
  return a1;
}

uint64_t sub_100020574(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  char v3 = *(unsigned char *)(a1 + 33);
  uint64_t v4 = *(void *)(a1 + 40);
  char v5 = *(unsigned char *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  char v7 = *(unsigned char *)(a1 + 64);
  uint64_t v8 = *(void *)(a1 + 72);
  char v9 = *(unsigned char *)(a1 + 80);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 32);
  swift_release();
  sub_10001F568(v2, v10, v3);
  sub_10001F574(v4, v5);
  sub_10001F574(v6, v7);
  sub_10001F574(v8, v9);
  return a1;
}

uint64_t sub_100020618(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  char v3 = *(unsigned char *)(a1 + 25);
  uint64_t v4 = *(void *)(a1 + 32);
  char v5 = *(unsigned char *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  char v7 = *(unsigned char *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  char v9 = *(unsigned char *)(a1 + 72);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 24);
  swift_retain();
  sub_10001F4F8(v2, v10, v3);
  sub_10001F504(v4, v5);
  sub_10001F504(v6, v7);
  sub_10001F504(v8, v9);
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1000206E0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  char v3 = *(unsigned char *)(a1 + 25);
  uint64_t v4 = *(void *)(a1 + 32);
  char v5 = *(unsigned char *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  char v7 = *(unsigned char *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  char v9 = *(unsigned char *)(a1 + 72);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 24);
  swift_release();
  sub_10001F568(v2, v10, v3);
  sub_10001F574(v4, v5);
  sub_10001F574(v6, v7);
  sub_10001F574(v8, v9);
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

unint64_t sub_1000207AC()
{
  unint64_t result = qword_1000A8F40;
  if (!qword_1000A8F40)
  {
    sub_100003F9C(&qword_1000A8D98);
    sub_10001FAAC(&qword_1000A8F48, &qword_1000A8D90, (void (*)(void))sub_10001FA70, (void (*)(void))sub_100020308);
    sub_10000A368(&qword_1000A8F50, &qword_1000A8F58);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A8F40);
  }
  return result;
}

uint64_t sub_100020884(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

_OWORD *sub_1000208E0(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t type metadata accessor for _UITextFormattingServiceViewController()
{
  uint64_t result = qword_1000A8F98;
  if (!qword_1000A8F98) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100020954()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1000209BC()
{
  uint64_t v1 = qword_1000A8F90;
  uint64_t v2 = *(void *)&v0[qword_1000A8F90];
  uint64_t v3 = v2;
  if (v2 == 1)
  {
    id v4 = [v0 parentViewController];
    if (v4)
    {
      char v5 = v4;
      uint64_t v3 = swift_dynamicCastObjCProtocolConditional();
      if (!v3) {
    }
      }
    else
    {
      uint64_t v3 = 0;
    }
    uint64_t v6 = *(void *)&v0[v1];
    *(void *)&v0[v1] = v3;
    swift_unknownObjectRetain();
    sub_10002281C(v6);
  }
  sub_10002282C(v2);
  return v3;
}

void sub_100020A78(char *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = qword_1000A8F80;
  type metadata accessor for TextFormattingState();
  swift_allocObject();
  id v6 = a3;
  *(void *)&a1[v5] = sub_100029C34();
  uint64_t v7 = qword_1000A8F88;
  *(void *)&a1[v7] = [objc_allocWithZone((Class)UITextFormattingViewControllerConfiguration) init];
  *(void *)&a1[qword_1000A8F90] = 1;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

char *sub_100020B4C()
{
  uint64_t v1 = qword_1000A8F80;
  type metadata accessor for TextFormattingState();
  swift_allocObject();
  uint64_t v2 = v0;
  *(void *)&v0[v1] = sub_100029C34();
  uint64_t v3 = qword_1000A8F88;
  *(void *)&v2[v3] = [objc_allocWithZone((Class)UITextFormattingViewControllerConfiguration) init];
  *(void *)&v2[qword_1000A8F90] = 1;
  sub_100023B08((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
  swift_retain();
  ObservedObject.init(wrappedValue:)();

  swift_retain();
  id v4 = (char *)UIHostingController.init(rootView:)();
  uint64_t v5 = qword_1000A8F80;
  *(unsigned char *)(*(void *)&v4[qword_1000A8F80]
           + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_isInRemotePresentation) = 1;
  id v6 = v4;
  swift_retain();
  sub_100028170();
  swift_release();
  swift_release();

  uint64_t v7 = *(void *)&v4[v5];
  uint64_t v8 = swift_allocObject();
  swift_unknownObjectWeakInit();
  char v9 = (void (**)(uint64_t, uint64_t))(v7
                                              + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_didChangeValue);
  double *v9 = sub_100023060;
  v9[1] = (void (*)(uint64_t, uint64_t))v8;
  swift_release();
  uint64_t v10 = *(void *)&v4[v5];
  uint64_t v11 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v12 = (void (**)())(v10 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_contentSizeDidUpdate);
  *uint64_t v12 = sub_100023068;
  v12[1] = (void (*)())v11;
  swift_release();
  uint64_t v13 = *(void *)&v4[v5];
  uint64_t v14 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v15 = (void (**)())(v13 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_pickFont);
  void *v15 = sub_100023098;
  v15[1] = (void (*)())v14;
  swift_release();
  uint64_t v16 = *(void *)&v4[v5];
  uint64_t v17 = swift_allocObject();
  swift_unknownObjectWeakInit();
  double v18 = (void (**)())(v16 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_pickColor);
  *double v18 = sub_1000230C8;
  v18[1] = (void (*)())v17;
  swift_release();
  uint64_t v19 = *(void *)&v4[v5];
  uint64_t v20 = swift_allocObject();
  swift_unknownObjectWeakInit();
  double v21 = (void (**)())(v19 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_showTypographySettings);
  *double v21 = sub_1000230D0;
  v21[1] = (void (*)())v20;
  swift_release();
  return v6;
}

void sub_100020E40(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v4 = (void *)Strong;
    uint64_t v5 = (void *)UITextFormattingViewController.ChangeValue._bridgeToObjectiveC()();
    swift_beginAccess();
    uint64_t v6 = swift_unknownObjectWeakLoadStrong();
    if (v6)
    {
      uint64_t v7 = (void *)v6;
      uint64_t v8 = sub_100023758(a2);
      unint64_t v10 = v9;

      uint64_t v11 = sub_1000209BC();
      if (!v11)
      {
LABEL_10:
        sub_10002283C(v8, v10);

        return;
      }
      uint64_t v12 = (void *)v11;
      if (v10 >> 60 == 15) {
        Class isa = 0;
      }
      else {
        Class isa = Data._bridgeToObjectiveC()().super.isa;
      }
    }
    else
    {
      uint64_t v14 = sub_1000209BC();
      unint64_t v10 = 0xF000000000000000;
      if (!v14)
      {
        uint64_t v8 = 0;
        goto LABEL_10;
      }
      uint64_t v12 = (void *)v14;
      uint64_t v8 = 0;
      Class isa = 0;
    }
    [v12 _textFormattingDidChangeValue:v5 textAttributesData:isa];

    swift_unknownObjectRelease();
    goto LABEL_10;
  }
}

void *sub_100020F78()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  unsigned __int8 v0 = v10;
  uint64_t v1 = 6;
  switch(v10)
  {
    case 1u:
      uint64_t v1 = 12;
      break;
    case 2u:
      uint64_t v1 = 4;
      break;
    case 3u:
      uint64_t v1 = 5;
      unsigned __int8 v0 = 3;
      break;
    case 4u:
      uint64_t v1 = 8;
      break;
    default:
      break;
  }
  double v2 = sub_100075CF0(v1, v0);
  double v3 = ceil(v11);
  if (qword_1000A82B8 != -1) {
    swift_once();
  }
  if (*(double *)&qword_1000AB708 < v3) {
    double v3 = *(double *)&qword_1000AB708;
  }
  id v4 = (void *)sub_1000209BC();
  if (!v4
    || ([v4 preferredContentSize],
        double v6 = v5,
        double v8 = v7,
        uint64_t result = (void *)swift_unknownObjectRelease(),
        v2 != v6)
    || v3 != v8)
  {
    uint64_t result = (void *)sub_1000209BC();
    if (result)
    {
      [result setPreferredContentSize:v2, v3];
      return (void *)swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t sub_100021168()
{
  id v1 = [objc_allocWithZone((Class)UIFontPickerViewControllerConfiguration) init];
  [v1 setIncludeFaces:1];
  [v1 setDisplayUsingSystemFont:1];
  [v1 set_includeDefaultFont:[*(id *)(v0 + qword_1000A8F88) _includeDefaultFont]];
  sub_100027DD8();
  uint64_t v2 = sub_1000209BC();
  if (v2)
  {
    double v3 = (void *)v2;
    sub_10000A3AC(0, &qword_1000A8FE8);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    [v3 _presentFontPickerWithConfiguration:v1 selectedFonts:isa];

    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  else
  {

    return swift_bridgeObjectRelease();
  }
}

void sub_1000212AC()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v1 = (void *)Strong;
    uint64_t v2 = *(void *)(Strong + qword_1000A8F80);
    double v3 = *(double *)(v2 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_colorPickerRect);
    double v4 = *(double *)(v2 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_colorPickerRect + 8);
    double v5 = *(double *)(v2 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_colorPickerRect + 16);
    double v6 = *(double *)(v2 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_colorPickerRect + 24);
    id v7 = sub_100027F4C();
    double v8 = (void *)sub_1000209BC();
    if (v8)
    {
      [v8 _presentColorPicker:v7 selectedColor:v3, v4, v5, v6];

      swift_unknownObjectRelease();
    }
    else
    {
    }
  }
}

void sub_100021388(uint64_t a1, void (*a2)(void))
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    double v4 = (void *)Strong;
    a2();
  }
}

void sub_1000213E4()
{
  unint64_t v0 = (unint64_t)sub_100027DD8();
  unint64_t v1 = v0;
  if (v0 >> 62)
  {
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_3;
    }
LABEL_8:
    swift_bridgeObjectRelease();
    double v3 = self;
    [v3 systemFontSize];
    id v5 = [v3 systemFontOfSize:];
    goto LABEL_9;
  }
  if (!*(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_8;
  }
LABEL_3:
  if ((v1 & 0xC000000000000001) != 0)
  {
    id v2 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    id v2 = *(id *)(v1 + 32);
  }
  id v5 = v2;
  swift_bridgeObjectRelease();
LABEL_9:
  double v4 = (void *)sub_1000209BC();
  if (v4)
  {
    [v4 _presentTypographySettingsForFont:v5];

    swift_unknownObjectRelease();
  }
  else
  {
  }
}

char *sub_100021528()
{
  return sub_100020B4C();
}

void sub_10002154C(char a1)
{
  v14.receiver = v1;
  v14.super_class = (Class)swift_getObjectType();
  [super viewWillAppear:a1 & 1];
  id v3 = [v1 view];
  if (!v3) {
    goto LABEL_16;
  }
  double v4 = v3;
  [v3 setBackgroundColor:0];

  id v5 = [v1 view];
  if (!v5)
  {
LABEL_17:
    __break(1u);
    return;
  }
  double v6 = v5;
  id v7 = [v5 subviews];

  sub_10000A3AC(0, &qword_1000A9008);
  unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v8 >> 62))
  {
    if (*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_5;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v13) {
    goto LABEL_12;
  }
LABEL_5:
  if ((v8 & 0xC000000000000001) != 0)
  {
    id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_8;
  }
  if (!*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  id v9 = *(id *)(v8 + 32);
LABEL_8:
  unsigned __int8 v10 = v9;
  swift_bridgeObjectRelease();
  self;
  double v11 = (void *)swift_dynamicCastObjCClass();
  if (v11)
  {
    uint64_t v12 = v11;
    [v11 setClipsToBounds:0];
    [v12 setKeyboardDismissMode:2];
  }
}

void sub_10002170C(void *a1, uint64_t a2, char a3)
{
  id v4 = a1;
  sub_10002154C(a3);
}

id sub_100021760()
{
  unint64_t v1 = v0;
  v18.receiver = v0;
  v18.super_class = (Class)swift_getObjectType();
  [super viewWillLayoutSubviews];
  id result = [v0 view];
  if (!result)
  {
    __break(1u);
    goto LABEL_16;
  }
  id v3 = result;
  [result frame];
  double v5 = v4;

  uint64_t v6 = *(void *)&v1[qword_1000A8F80];
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  double v7 = v15;
  if (v15 != v5)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    double v15 = v5;
    swift_retain();
    static Published.subscript.setter();
    sub_100028170();
  }
  id v8 = [v1 parentViewController:v7 *(void *)&v15];
  if (!v8)
  {
    double v12 = 0.0;
    goto LABEL_8;
  }
  id v9 = v8;
  id result = [v8 view];
  if (!result)
  {
LABEL_16:
    __break(1u);
    return result;
  }
  unsigned __int8 v10 = result;
  [result safeAreaInsets];
  double v12 = v11;

LABEL_8:
  swift_getKeyPath();
  swift_getKeyPath();
  LOBYTE(v16) = v12 > 0.0;
  swift_retain();
  static Published.subscript.setter();
  if (![*(id *)&v1[qword_1000A8F88] _isTextAnimationsConfiguration]
    || (*(unsigned char *)(v6 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_isInPopoverPresentation) & 1) != 0
    || (objc_msgSend(self, "sizeForInterfaceOrientation:", objc_msgSend(v1, "interfaceOrientation")),
        double v14 = v13 - v12,
        swift_getKeyPath(),
        swift_getKeyPath(),
        static Published.subscript.getter(),
        swift_release(),
        id result = (id)swift_release(),
        (v17 & 1) != 0)
    || v16 != v14)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    static Published.subscript.setter();
    return (id)sub_100028170();
  }
  return result;
}

void sub_100021A70(void *a1)
{
  id v1 = a1;
  sub_100021760();
}

void sub_100021AB8(void *a1)
{
  v2.receiver = a1;
  v2.super_class = (Class)swift_getObjectType();
  id v1 = v2.receiver;
  [super viewDidLayoutSubviews];
  sub_100020F78();
}

void *sub_100021B10(void *a1)
{
  uint64_t v2 = v1;
  id v3 = *(void **)(v1 + qword_1000A8F88);
  *(void *)(v2 + qword_1000A8F88) = a1;
  id v4 = a1;

  unsigned __int8 v5 = [v4 _hasPopoverPresentation];
  uint64_t v6 = *(void *)(v2 + qword_1000A8F80);
  if (v5)
  {
    double v7 = (void *)(v6 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_close);
    uint64_t v8 = *(void *)(v6 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_close);
    void *v7 = 0;
    v7[1] = 0;
  }
  else
  {
    uint64_t v9 = swift_allocObject();
    swift_unknownObjectWeakInit();
    unsigned __int8 v10 = (void (**)())(v6 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_close);
    uint64_t v8 = *(void *)(v6 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_close);
    *unsigned __int8 v10 = sub_100022F30;
    v10[1] = (void (*)())v9;
  }
  sub_100022F38(v8);
  id v11 = [v4 groups];
  sub_10000A3AC(0, &qword_1000A9000);
  static Array._unconditionallyBridgeFromObjectiveC(_:)();

  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.setter();
  sub_100028170();
  sub_10002857C();
  uint64_t v12 = UITextFormattingViewControllerConfiguration.formattingStyles.getter();
  if (v12) {
    double v13 = (void *)v12;
  }
  else {
    double v13 = _swiftEmptyArrayStorage;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.setter();
  sub_100029464();
  UITextFormattingViewControllerConfiguration._emphasisStyles.getter();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.setter();
  sub_100029A34((uint64_t)v13);
  swift_bridgeObjectRelease();
  [v4 _useLandscapeLayout];
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.setter();
  sub_1000287E8();
  unsigned __int8 v14 = [v4 _includeDefaultFont];
  *(unsigned char *)(v6 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_includeDefaultFont) = v14;
  unsigned __int8 v15 = [v4 _hasPopoverPresentation];
  *(unsigned char *)(v6 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_isInPopoverPresentation) = v15;
  sub_1000287E8();
  sub_100028170();
  unsigned __int8 v16 = [v4 _hasParentViewController];
  *(unsigned char *)(v6 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_hasParentViewController) = v16;
  sub_100028170();
  unsigned __int8 v17 = [v4 _isTextAnimationsConfiguration];
  *(unsigned char *)(v6 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_isTextAnimationsUI) = v17;
  sub_1000287E8();
  [v4 _isTextViewConfiguration];
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.setter();
  return sub_100020F78();
}

void sub_100021EE4()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    uint64_t v2 = (void *)sub_1000209BC();
    if (v2)
    {
      [v2 _textFormattingDidFinish];

      swift_unknownObjectRelease();
    }
    else
    {
    }
  }
}

void sub_100021F5C(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  sub_100021B10(v4);
}

uint64_t sub_100021FC4(void *a1)
{
  uint64_t v2 = sub_10000435C(&qword_1000A8FF8);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  id v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  double v7 = (char *)&v14 - v6;
  uint64_t v8 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UITextFormattingViewController.FormattingDescriptor._unconditionallyBridgeFromObjectiveC(_:)();
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v7, v11, v8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_100022E30((uint64_t)v7, (uint64_t)v5);
  id v12 = a1;
  swift_retain();
  static Published.subscript.setter();
  sub_10002890C();
  sub_100022E98((uint64_t)v7);

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_1000221C4()
{
  return static Published.subscript.setter();
}

void sub_100022298(void *a1, int a2, void *aBlock)
{
  uint64_t v4 = (void (**)(void))_Block_copy(aBlock);
  id v5 = a1;
  sub_100020F78();
  v4[2](v4);
  _Block_release(v4);
}

void sub_100022310(void *a1, uint64_t a2, void *a3, void *a4)
{
  if (a4)
  {
    id v6 = a3;
    a1;
    id v7 = a4;
    uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v10 = v9;

    uint64_t v11 = sub_1000209BC();
    if (!v11) {
      goto LABEL_9;
    }
    id v12 = (void *)v11;
    if (v10 >> 60 != 15)
    {
      v13.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
LABEL_8:
      [v12 _textFormattingDidChangeValue:a3 textAttributesData:v13.super.isa];

      swift_unknownObjectRelease();
      goto LABEL_9;
    }
LABEL_7:
    v13.super.Class isa = 0;
    goto LABEL_8;
  }
  id v14 = a3;
  id v15 = a1;
  uint64_t v16 = sub_1000209BC();
  unint64_t v10 = 0xF000000000000000;
  if (v16)
  {
    id v12 = (void *)v16;
    uint64_t v8 = 0;
    goto LABEL_7;
  }
  uint64_t v8 = 0;
LABEL_9:
  sub_10002283C(v8, v10);
}

void sub_100022420(void *a1)
{
  id v2 = a1;
  uint64_t v1 = (void *)sub_1000209BC();
  if (v1)
  {
    [v1 _textFormattingDidFinish];

    swift_unknownObjectRelease();
  }
  else
  {
  }
}

void sub_1000224A8(void *a1, double a2, double a3, double a4, double a5, uint64_t a6, void *a7)
{
  id v12 = a7;
  id v14 = a1;
  NSData v13 = (void *)sub_1000209BC();
  if (v13)
  {
    [v13 _presentColorPicker:v12 selectedColor:a2, a3, a4, a5];

    swift_unknownObjectRelease();
  }
  else
  {
  }
}

void sub_100022580(void *a1, uint64_t a2, void *a3)
{
  sub_10000A3AC(0, &qword_1000A8FE8);
  static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v9 = a3;
  id v5 = a1;
  uint64_t v6 = sub_1000209BC();
  if (v6)
  {
    id v7 = (void *)v6;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    [v7 _presentFontPickerWithConfiguration:v9 selectedFonts:isa];

    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
  }
  else
  {

    swift_bridgeObjectRelease();
  }
}

void sub_100022668(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v6 = a1;
  id v5 = (void *)sub_1000209BC();
  if (v5)
  {
    [v5 _presentTypographySettingsForFont:v4];

    swift_unknownObjectRelease();
  }
  else
  {
  }
}

uint64_t sub_100022708()
{
  swift_release();

  uint64_t v1 = *(void *)(v0 + qword_1000A8F90);

  return sub_10002281C(v1);
}

uint64_t sub_100022758(uint64_t a1)
{
  swift_release();

  uint64_t v2 = *(void *)(a1 + qword_1000A8F90);

  return sub_10002281C(v2);
}

void sub_1000227B4()
{
}

void sub_1000227E4()
{
}

uint64_t sub_100022814()
{
  return type metadata accessor for _UITextFormattingServiceViewController();
}

uint64_t sub_10002281C(uint64_t result)
{
  if (result != 1) {
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_10002282C(uint64_t result)
{
  if (result != 1) {
    return swift_unknownObjectRetain();
  }
  return result;
}

uint64_t sub_10002283C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100022850(a1, a2);
  }
  return a1;
}

uint64_t sub_100022850(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t sub_1000228A8@<X0>(unsigned char *a1@<X8>)
{
  return sub_100022CFC(a1);
}

uint64_t sub_1000228BC()
{
  return sub_1000287E8();
}

uint64_t sub_100022934()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();

  return swift_release();
}

uint64_t sub_1000229B0(uint64_t a1)
{
  uint64_t v2 = sub_10000435C(&qword_1000A8FF8);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  id v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  id v7 = (char *)&v9 - v6;
  sub_100022E30(a1, (uint64_t)&v9 - v6);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_100022E30((uint64_t)v7, (uint64_t)v5);
  swift_retain();
  static Published.subscript.setter();
  sub_10002890C();
  return sub_100022E98((uint64_t)v7);
}

uint64_t sub_100022AB4@<X0>(void *a1@<X8>)
{
  return sub_100022BE0(a1);
}

uint64_t sub_100022AC8()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.setter();
  sub_100029A34(v1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100022BA4@<X0>(unsigned char *a1@<X8>)
{
  return sub_100022CFC(a1);
}

uint64_t sub_100022BB8()
{
  return sub_100022D8C();
}

uint64_t sub_100022BCC@<X0>(void *a1@<X8>)
{
  return sub_100022BE0(a1);
}

uint64_t sub_100022BE0@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_100022C5C()
{
  return static Published.subscript.setter();
}

uint64_t sub_100022CE8@<X0>(unsigned char *a1@<X8>)
{
  return sub_100022CFC(a1);
}

uint64_t sub_100022CFC@<X0>(unsigned char *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_100022D78()
{
  return sub_100022D8C();
}

uint64_t sub_100022D8C()
{
  return static Published.subscript.setter();
}

uint64_t sub_100022DFC@<X0>(void *a1@<X8>)
{
  return sub_100022BE0(a1);
}

uint64_t sub_100022E30(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000435C(&qword_1000A8FF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100022E98(uint64_t a1)
{
  uint64_t v2 = sub_10000435C(&qword_1000A8FF8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100022EF8()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_100022F30()
{
}

uint64_t sub_100022F38(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_100022F58@<X0>(void *a1@<X8>)
{
  return sub_100022BE0(a1);
}

uint64_t sub_100022F84@<X0>(unsigned char *a1@<X8>)
{
  return sub_100022CFC(a1);
}

uint64_t sub_100022FB0@<X0>(unsigned char *a1@<X8>)
{
  return sub_100022CFC(a1);
}

uint64_t sub_100022FD8()
{
  return sub_100022D8C();
}

uint64_t sub_100023008@<X0>(unsigned char *a1@<X8>)
{
  return sub_100022CFC(a1);
}

uint64_t sub_100023030()
{
  return sub_100022D8C();
}

void sub_100023060(uint64_t a1, uint64_t a2)
{
}

void sub_100023068()
{
  sub_100021388(v0, (void (*)(void))sub_100020F78);
}

void sub_100023098()
{
  sub_100021388(v0, (void (*)(void))sub_100021168);
}

void sub_1000230C8()
{
}

void sub_1000230D0()
{
  sub_100021388(v0, sub_1000213E4);
}

uint64_t sub_100023100(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_1000231D4(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_100020884((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_100020884((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_100023B50((uint64_t)v12);
  return v7;
}

uint64_t sub_1000231D4(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_100023390(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_100023390(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_100023428(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100023608(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_100023608(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_100023428(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_1000235A0(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_1000235A0(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_10000435C((uint64_t *)&unk_1000A9020);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_100023608(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000435C((uint64_t *)&unk_1000A9020);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  NSData v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100023758(uint64_t a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    if (qword_1000A82A8 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100023AD0(v2, (uint64_t)qword_1000AB6D8);
    swift_bridgeObjectRetain_n();
    unint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      size_t v5 = (uint8_t *)swift_slowAlloc();
      id v15 = (id)swift_slowAlloc();
      *(_DWORD *)size_t v5 = 136315138;
      if (qword_1000A82A0 != -1) {
        swift_once();
      }
      if (byte_1000AB6D0 == 1)
      {
        type metadata accessor for Key(0);
        sub_100023B08((unint64_t *)&unk_1000AA390, type metadata accessor for Key);
        swift_bridgeObjectRetain();
        uint64_t v6 = Dictionary.description.getter();
        unint64_t v8 = v7;
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v6 = 0;
        unint64_t v8 = 0xE000000000000000;
      }
      sub_100023100(v6, v8, (uint64_t *)&v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Will attempt to update text attributes %s", v5, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    int64_t v9 = self;
    type metadata accessor for Key(0);
    sub_100023B08((unint64_t *)&unk_1000AA390, type metadata accessor for Key);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    id v15 = 0;
    id v11 = [v9 archivedDataWithRootObject:isa requiringSecureCoding:1 error:&v15];

    id v12 = v15;
    if (v11)
    {
      uint64_t v1 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      NSData v13 = v12;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_errorRelease();
      return 0;
    }
  }
  return v1;
}

uint64_t sub_100023AD0(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_100023B08(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100023B50(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

void sub_100023BA0()
{
  v4.receiver = v0;
  v4.super_class = (Class)swift_getObjectType();
  [super viewDidLoad];
  id v1 = [objc_allocWithZone((Class)_UIFontPickerContentViewController) init];
  [v0 pushViewController:v1 animated:0];
  [v1 setDelegate:v0];
  id v2 = [objc_allocWithZone((Class)UIFontPickerViewControllerConfiguration) init];
  [v1 _setConfiguration:v2];
  [v0 setPreferredContentSize:CGSizeMake(480.0, 640.0)];

  unint64_t v3 = *(void **)&v0[OBJC_IVAR____TtC19FontPickerUIService46_UIFontPickerUIServiceFontPickerViewController_contentViewController];
  *(void *)&v0[OBJC_IVAR____TtC19FontPickerUIService46_UIFontPickerUIServiceFontPickerViewController_contentViewController] = v1;
}

void sub_100023E74(uint64_t a1)
{
  id v2 = *(void **)(v1
                + OBJC_IVAR____TtC19FontPickerUIService46_UIFontPickerUIServiceFontPickerViewController_contentViewController);
  if (v2)
  {
    if (a1)
    {
      sub_1000241E4();
      id v3 = v2;
      v4.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    }
    else
    {
      id v5 = v2;
      v4.super.Class isa = 0;
    }
    Class isa = v4.super.isa;
    [v2 _setSelectedFonts:scrollToVisible:];
  }
}

id sub_100023FBC(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  id result = *(id *)(a1
                 + OBJC_IVAR____TtC19FontPickerUIService46_UIFontPickerUIServiceFontPickerViewController_contentViewController);
  if (result) {
    return [result *a4];
  }
  return result;
}

uint64_t type metadata accessor for _UIFontPickerUIServiceFontPickerViewController()
{
  return self;
}

unint64_t sub_1000241E4()
{
  unint64_t result = qword_1000A9180;
  if (!qword_1000A9180)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1000A9180);
  }
  return result;
}

uint64_t sub_100024224(uint64_t a1)
{
  unint64_t v2 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v3 = __CocoaSet.startIndex.getter();
    uint64_t v5 = v4;
    __CocoaSet.endIndex.getter();
    char v6 = static __CocoaSet.Index.== infix(_:_:)();
    swift_bridgeObjectRelease();
    if (v6)
    {
LABEL_3:
      sub_100024C7C(v3, v5, v2 != 0);
      return 0;
    }
LABEL_7:
    sub_100024640(v3, v5, v2 != 0, a1);
    uint64_t v7 = v11;
    sub_100024C7C(v3, v5, v2 != 0);
    return v7;
  }
  uint64_t result = sub_100024898(a1);
  if ((v10 & 1) == 0)
  {
    uint64_t v5 = v9;
    if (*(_DWORD *)(a1 + 36) == v9)
    {
      uint64_t v3 = result;
      if (result == 1 << *(unsigned char *)(a1 + 32)) {
        goto LABEL_3;
      }
      goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for _UIFontPickerUIServiceSceneDelegate()
{
  return self;
}

uint64_t type metadata accessor for _UIFontPickerUIServiceSceneDelegate.SecureWindow()
{
  return self;
}

void sub_100024640(uint64_t a1, int a2, char a3, uint64_t a4)
{
  unint64_t v6 = a1;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if (a3)
    {
      __CocoaSet.element(at:)();
      sub_100024BE4();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      return;
    }
    goto LABEL_24;
  }
  if (a3) {
    goto LABEL_10;
  }
  if (a1 < 0 || 1 << *(unsigned char *)(a4 + 32) <= a1)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)a1 >> 6) + 56) >> a1) & 1) == 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    goto LABEL_17;
  }
  __break(1u);
LABEL_10:
  if (__CocoaSet.Index.age.getter() != *(_DWORD *)(a4 + 36))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  __CocoaSet.Index.element.getter();
  sub_100024BE4();
  swift_unknownObjectRetain();
  swift_dynamicCast();
  uint64_t v4 = v16;
  swift_unknownObjectRelease();
  Swift::Int v7 = NSObject._rawHashValue(seed:)(*(void *)(a4 + 40));
  uint64_t v8 = -1 << *(unsigned char *)(a4 + 32);
  unint64_t v6 = v7 & ~v8;
  if (((*(void *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
  {
LABEL_23:

    __break(1u);
LABEL_24:
    __break(1u);
    return;
  }
  id v9 = *(id *)(*(void *)(a4 + 48) + 8 * v6);
  char v10 = static NSObject.== infix(_:_:)();

  if ((v10 & 1) == 0)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v6 = (v6 + 1) & v11;
      if (((*(void *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
        goto LABEL_23;
      }
      id v12 = *(id *)(*(void *)(a4 + 48) + 8 * v6);
      char v13 = static NSObject.== infix(_:_:)();
    }
    while ((v13 & 1) == 0);
  }

LABEL_17:
  id v14 = *(void **)(*(void *)(a4 + 48) + 8 * v6);

  id v15 = v14;
}

uint64_t sub_100024898(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  id v9 = (unint64_t *)(a1 + 72);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

void sub_100024920(void *a1, void *a2)
{
  self;
  uint64_t v5 = swift_dynamicCastObjCClass();
  if (!v5) {
    return;
  }
  uint64_t v6 = v5;
  id v7 = a1;
  id v8 = [a2 userActivities];
  sub_100024BE4();
  sub_100024C24();
  uint64_t v9 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v10 = (void *)sub_100024224(v9);
  swift_bridgeObjectRelease();
  if (!v10)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    goto LABEL_9;
  }
  id v11 = [v10 activityType];

  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;

  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!v14)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  if (v12 != v15 || v14 != v16)
  {
    char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v17) {
      goto LABEL_12;
    }
    if (v12 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v14 == v19)
    {
      swift_bridgeObjectRelease_n();
LABEL_17:
      ObjCClassFromMetadata = (objc_class *)_UIFontPickerUIServiceTextFormattingViewController;
      goto LABEL_18;
    }
    char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v20) {
      goto LABEL_17;
    }
LABEL_10:
    id v27 = 0;
    goto LABEL_19;
  }
  swift_bridgeObjectRelease();
LABEL_12:
  swift_bridgeObjectRelease();
  type metadata accessor for _UIFontPickerUIServiceFontPickerViewController();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
LABEL_18:
  id v27 = [objc_allocWithZone(ObjCClassFromMetadata) init];
LABEL_19:
  id v21 = [objc_allocWithZone((Class)type metadata accessor for _UIFontPickerUIServiceSceneDelegate.SecureWindow()) initWithWindowScene:v6];
  uint64_t v22 = OBJC_IVAR____TtC19FontPickerUIService35_UIFontPickerUIServiceSceneDelegate_window;
  uint64_t v23 = *(void **)(v2 + OBJC_IVAR____TtC19FontPickerUIService35_UIFontPickerUIServiceSceneDelegate_window);
  *(void *)(v2 + OBJC_IVAR____TtC19FontPickerUIService35_UIFontPickerUIServiceSceneDelegate_window) = v21;

  BOOL v24 = *(void **)(v2 + v22);
  if (v24)
  {
    [v24 setRootViewController:v27];
    uint64_t v25 = *(void **)(v2 + v22);
    if (v25)
    {
      id v26 = v25;
      [v26 makeKeyAndVisible];
    }
  }
}

unint64_t sub_100024BE4()
{
  unint64_t result = qword_1000A9248;
  if (!qword_1000A9248)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1000A9248);
  }
  return result;
}

unint64_t sub_100024C24()
{
  unint64_t result = qword_1000A9250;
  if (!qword_1000A9250)
  {
    sub_100024BE4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A9250);
  }
  return result;
}

uint64_t sub_100024C7C(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

id sub_100024C88()
{
  sub_100026E90();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id result = [self bundleForClass:ObjCClassFromMetadata];
  qword_1000AB398 = (uint64_t)result;
  return result;
}

void sub_100024CE0()
{
  if (qword_1000A80F0 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1000AB398;
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v0 localizedStringForKey:v1 value:v2 table:v3];

  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  qword_1000AB3A0 = v5;
  *(void *)algn_1000AB3A8 = v7;
}

void sub_100024DF8()
{
  if (qword_1000A80F0 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1000AB398;
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v0 localizedStringForKey:v1 value:v2 table:v3];

  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  qword_1000AB3B0 = v5;
  *(void *)algn_1000AB3B8 = v7;
}

void sub_100024F10()
{
  if (qword_1000A80F0 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1000AB398;
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v0 localizedStringForKey:v1 value:v2 table:v3];

  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  qword_1000AB3C0 = v5;
  *(void *)algn_1000AB3C8 = v7;
}

void sub_10002502C()
{
  if (qword_1000A80F0 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1000AB398;
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v0 localizedStringForKey:v1 value:v2 table:v3];

  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  qword_1000AB3D0 = v5;
  *(void *)algn_1000AB3D8 = v7;
}

void sub_100025148()
{
  if (qword_1000A80F0 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1000AB398;
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v0 localizedStringForKey:v1 value:v2 table:v3];

  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  qword_1000AB3E0 = v5;
  *(void *)algn_1000AB3E8 = v7;
}

void sub_100025260()
{
  if (qword_1000A80F0 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1000AB398;
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v0 localizedStringForKey:v1 value:v2 table:v3];

  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  qword_1000AB3F0 = v5;
  *(void *)algn_1000AB3F8 = v7;
}

void sub_100025378()
{
  if (qword_1000A80F0 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1000AB398;
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v0 localizedStringForKey:v1 value:v2 table:v3];

  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  qword_1000AB400 = v5;
  *(void *)algn_1000AB408 = v7;
}

void sub_100025490()
{
  if (qword_1000A80F0 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1000AB398;
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v0 localizedStringForKey:v1 value:v2 table:v3];

  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  qword_1000AB410 = v5;
  *(void *)algn_1000AB418 = v7;
}

void sub_1000255A8()
{
  if (qword_1000A80F0 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1000AB398;
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v0 localizedStringForKey:v1 value:v2 table:v3];

  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  qword_1000AB420 = v5;
  *(void *)algn_1000AB428 = v7;
}

void sub_1000256C0()
{
  if (qword_1000A80F0 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1000AB398;
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v0 localizedStringForKey:v1 value:v2 table:v3];

  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  qword_1000AB430 = v5;
  *(void *)algn_1000AB438 = v7;
}

void sub_1000257D8()
{
  if (qword_1000A80F0 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1000AB398;
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v0 localizedStringForKey:v1 value:v2 table:v3];

  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  qword_1000AB440 = v5;
  *(void *)algn_1000AB448 = v7;
}

void sub_1000258E4()
{
  if (qword_1000A80F0 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1000AB398;
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v0 localizedStringForKey:v1 value:v2 table:v3];

  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  qword_1000AB450 = v5;
  *(void *)algn_1000AB458 = v7;
}

void sub_1000259F8()
{
  if (qword_1000A80F0 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1000AB398;
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v0 localizedStringForKey:v1 value:v2 table:v3];

  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  qword_1000AB460 = v5;
  *(void *)algn_1000AB468 = v7;
}

void sub_100025B14()
{
  if (qword_1000A80F0 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1000AB398;
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v0 localizedStringForKey:v1 value:v2 table:v3];

  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  qword_1000AB470 = v5;
  *(void *)algn_1000AB478 = v7;
}

void sub_100025C30()
{
  if (qword_1000A80F0 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1000AB398;
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v0 localizedStringForKey:v1 value:v2 table:v3];

  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  qword_1000AB480 = v5;
  *(void *)algn_1000AB488 = v7;
}

void sub_100025D48()
{
  if (qword_1000A80F0 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1000AB398;
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v0 localizedStringForKey:v1 value:v2 table:v3];

  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  qword_1000AB490 = v5;
  *(void *)algn_1000AB498 = v7;
}

void sub_100025E54()
{
  if (qword_1000A80F0 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1000AB398;
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v0 localizedStringForKey:v1 value:v2 table:v3];

  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  qword_1000AB4A0 = v5;
  *(void *)algn_1000AB4A8 = v7;
}

void sub_100025F70()
{
  if (qword_1000A80F0 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1000AB398;
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v0 localizedStringForKey:v1 value:v2 table:v3];

  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  qword_1000AB4B0 = v5;
  *(void *)algn_1000AB4B8 = v7;
}

void sub_100026088()
{
  if (qword_1000A80F0 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1000AB398;
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v0 localizedStringForKey:v1 value:v2 table:v3];

  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  qword_1000AB4C0 = v5;
  *(void *)algn_1000AB4C8 = v7;
}

void sub_1000261A4()
{
  if (qword_1000A80F0 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1000AB398;
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v0 localizedStringForKey:v1 value:v2 table:v3];

  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  qword_1000AB4D0 = v5;
  *(void *)algn_1000AB4D8 = v7;
}

void sub_1000262C0()
{
  if (qword_1000A80F0 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1000AB398;
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v0 localizedStringForKey:v1 value:v2 table:v3];

  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  qword_1000AB4E0 = v5;
  *(void *)algn_1000AB4E8 = v7;
}

void sub_1000263DC()
{
  if (qword_1000A80F0 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1000AB398;
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v0 localizedStringForKey:v1 value:v2 table:v3];

  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  qword_1000AB4F0 = v5;
  *(void *)algn_1000AB4F8 = v7;
}

void sub_1000264F4()
{
  if (qword_1000A80F0 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1000AB398;
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v0 localizedStringForKey:v1 value:v2 table:v3];

  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  qword_1000AB500 = v5;
  *(void *)algn_1000AB508 = v7;
}

void sub_10002660C()
{
  if (qword_1000A80F0 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1000AB398;
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v0 localizedStringForKey:v1 value:v2 table:v3];

  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  qword_1000AB510 = v5;
  *(void *)algn_1000AB518 = v7;
}

void sub_100026728()
{
  if (qword_1000A80F0 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1000AB398;
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v0 localizedStringForKey:v1 value:v2 table:v3];

  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  qword_1000AB520 = v5;
  *(void *)algn_1000AB528 = v7;
}

void sub_100026844()
{
  if (qword_1000A80F0 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1000AB398;
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v0 localizedStringForKey:v1 value:v2 table:v3];

  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  qword_1000AB530 = v5;
  *(void *)algn_1000AB538 = v7;
}

void sub_100026960()
{
  if (qword_1000A80F0 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1000AB398;
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v0 localizedStringForKey:v1 value:v2 table:v3];

  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  qword_1000AB540 = v5;
  *(void *)algn_1000AB548 = v7;
}

void sub_100026A6C()
{
  if (qword_1000A80F0 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1000AB398;
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v0 localizedStringForKey:v1 value:v2 table:v3];

  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  qword_1000AB550 = v5;
  *(void *)algn_1000AB558 = v7;
}

void sub_100026B74()
{
  if (qword_1000A80F0 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1000AB398;
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v0 localizedStringForKey:v1 value:v2 table:v3];

  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  qword_1000AB560 = v5;
  *(void *)algn_1000AB568 = v7;
}

void sub_100026C80()
{
  if (qword_1000A80F0 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1000AB398;
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v0 localizedStringForKey:v1 value:v2 table:v3];

  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  qword_1000AB570 = v5;
  *(void *)algn_1000AB578 = v7;
}

void sub_100026D88()
{
  if (qword_1000A80F0 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1000AB398;
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v0 localizedStringForKey:v1 value:v2 table:v3];

  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  qword_1000AB580 = v5;
  *(void *)algn_1000AB588 = v7;
}

unint64_t sub_100026E90()
{
  unint64_t result = qword_1000A9320;
  if (!qword_1000A9320)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1000A9320);
  }
  return result;
}

void sub_100026ED0()
{
  if (qword_1000A80F0 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1000AB398;
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v0 localizedStringForKey:v1 value:v2 table:v3];

  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  qword_1000AB590 = v5;
  *(void *)algn_1000AB598 = v7;
}

void sub_100026FE8()
{
  if (qword_1000A80F0 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1000AB398;
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v0 localizedStringForKey:v1 value:v2 table:v3];

  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  qword_1000AB5A0 = v5;
  *(void *)algn_1000AB5A8 = v7;
}

void sub_100027100()
{
  if (qword_1000A80F0 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1000AB398;
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v0 localizedStringForKey:v1 value:v2 table:v3];

  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  qword_1000AB5B0 = v5;
  *(void *)algn_1000AB5B8 = v7;
}

void sub_100027218()
{
  if (qword_1000A80F0 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1000AB398;
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v0 localizedStringForKey:v1 value:v2 table:v3];

  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  qword_1000AB5C0 = v5;
  *(void *)algn_1000AB5C8 = v7;
}

void sub_100027330()
{
  if (qword_1000A80F0 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1000AB398;
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v0 localizedStringForKey:v1 value:v2 table:v3];

  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  qword_1000AB5D0 = v5;
  *(void *)algn_1000AB5D8 = v7;
}

void sub_100027444()
{
  if (qword_1000A80F0 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1000AB398;
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v0 localizedStringForKey:v1 value:v2 table:v3];

  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  qword_1000AB5E0 = v5;
  *(void *)algn_1000AB5E8 = v7;
}

void sub_10002755C()
{
  if (qword_1000A80F0 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1000AB398;
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v0 localizedStringForKey:v1 value:v2 table:v3];

  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  qword_1000AB5F0 = v5;
  *(void *)algn_1000AB5F8 = v7;
}

uint64_t sub_100027674(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 1668508004;
  unint64_t v3 = 0xE400000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 1668508004;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE600000000000000;
      uint64_t v5 = 0x6E6568707968;
      break;
    case 2:
      unint64_t v3 = 0xE700000000000000;
      uint64_t v5 = 0x6C616D69636564;
      break;
    case 3:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v5 = 0x726568746FLL;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE400000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE600000000000000;
      if (v5 == 0x6E6568707968) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      unint64_t v6 = 0xE700000000000000;
      uint64_t v2 = 0x6C616D69636564;
      goto LABEL_9;
    case 3:
      unint64_t v6 = 0xE500000000000000;
      if (v5 == 0x726568746FLL) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v2) {
        goto LABEL_14;
      }
LABEL_12:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_1000277E4(uint64_t a1)
{
  uint64_t v2 = a1 + 56;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 56);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  uint64_t v9 = _swiftEmptyArrayStorage;
  if (!v5) {
    goto LABEL_7;
  }
LABEL_4:
  unint64_t v10 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (unint64_t i = v10 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v8 << 6))
  {
    uint64_t result = sub_100033670(*(id *)(*(void *)(a1 + 48) + 8 * i));
    if (result == 4)
    {
      if (v5) {
        goto LABEL_4;
      }
    }
    else
    {
      char v15 = result;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_100014E94(0, v9[2] + 1, 1, v9);
        uint64_t v9 = (void *)result;
      }
      unint64_t v17 = v9[2];
      unint64_t v16 = v9[3];
      if (v17 >= v16 >> 1)
      {
        uint64_t result = (uint64_t)sub_100014E94((void *)(v16 > 1), v17 + 1, 1, v9);
        uint64_t v9 = (void *)result;
      }
      void v9[2] = v17 + 1;
      *((unsigned char *)v9 + v17 + 32) = v15;
      if (v5) {
        goto LABEL_4;
      }
    }
LABEL_7:
    int64_t v12 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v12 >= v6) {
      goto LABEL_29;
    }
    unint64_t v13 = *(void *)(v2 + 8 * v12);
    ++v8;
    if (!v13)
    {
      int64_t v8 = v12 + 1;
      if (v12 + 1 >= v6) {
        goto LABEL_29;
      }
      unint64_t v13 = *(void *)(v2 + 8 * v8);
      if (!v13)
      {
        int64_t v8 = v12 + 2;
        if (v12 + 2 >= v6) {
          goto LABEL_29;
        }
        unint64_t v13 = *(void *)(v2 + 8 * v8);
        if (!v13)
        {
          int64_t v8 = v12 + 3;
          if (v12 + 3 >= v6) {
            goto LABEL_29;
          }
          unint64_t v13 = *(void *)(v2 + 8 * v8);
          if (!v13) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v5 = (v13 - 1) & v13;
  }
  int64_t v14 = v12 + 4;
  if (v14 >= v6)
  {
LABEL_29:
    swift_release();
    return (uint64_t)v9;
  }
  unint64_t v13 = *(void *)(v2 + 8 * v14);
  if (v13)
  {
    int64_t v8 = v14;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v8 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_29;
    }
    unint64_t v13 = *(void *)(v2 + 8 * v8);
    ++v14;
    if (v13) {
      goto LABEL_22;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_1000279D4()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

__n128 sub_100027A48@<Q0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  __n128 result = v5;
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(__n128 *)(a1 + 32) = v5;
  *(unsigned char *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 56) = v7;
  return result;
}

uint64_t sub_100027ADC(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  char v2 = *(unsigned char *)(a1 + 32);
  uint64_t v3 = 1 << v2;
  uint64_t v4 = -1;
  if (1 << v2 < 64) {
    uint64_t v4 = ~(-1 << (1 << v2));
  }
  unint64_t v5 = v4 & *(void *)(a1 + 56);
  if (v5)
  {
    uint64_t v6 = 0;
    unint64_t v7 = __clz(__rbit64(v5));
    unint64_t v8 = (v5 - 1) & v5;
    int64_t v9 = (unint64_t)(v3 + 63) >> 6;
  }
  else
  {
    LODWORD(v6) = v2 & 0x3F;
    if (v6 <= 6) {
      return 0;
    }
    int64_t v9 = (unint64_t)(v3 + 63) >> 6;
    unint64_t v18 = *(void *)(a1 + 64);
    if (v18)
    {
      uint64_t v6 = 1;
    }
    else
    {
      if (v6 < 8) {
        return 0;
      }
      unint64_t v18 = *(void *)(a1 + 72);
      if (v18)
      {
        uint64_t v6 = 2;
      }
      else
      {
        unint64_t v18 = *(void *)(a1 + 80);
        if (v18)
        {
          uint64_t v6 = 3;
        }
        else
        {
LABEL_37:
          if (v6 < 9) {
            return 0;
          }
          unint64_t v18 = *(void *)(a1 + 88);
          if (v18)
          {
            uint64_t v6 = 4;
          }
          else
          {
            unint64_t v18 = *(void *)(a1 + 96);
            if (!v18) {
              goto LABEL_43;
            }
            uint64_t v6 = 5;
          }
        }
      }
    }
LABEL_30:
    unint64_t v8 = (v18 - 1) & v18;
    unint64_t v7 = __clz(__rbit64(v18)) + (v6 << 6);
  }
  uint64_t v10 = *(void *)(a1 + 48);
  double v11 = *(double *)(v10 + 8 * v7);
  while (v8)
  {
    unint64_t v12 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v13 = v12 | (v6 << 6);
LABEL_7:
    if (v11 < *(double *)(v10 + 8 * v13)) {
      double v11 = *(double *)(v10 + 8 * v13);
    }
  }
  int64_t v14 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v14 >= v9) {
    return *(void *)&v11;
  }
  unint64_t v15 = *(void *)(v1 + 8 * v14);
  ++v6;
  if (v15) {
    goto LABEL_25;
  }
  uint64_t v6 = v14 + 1;
  if (v14 + 1 >= v9) {
    return *(void *)&v11;
  }
  unint64_t v15 = *(void *)(v1 + 8 * v6);
  if (v15) {
    goto LABEL_25;
  }
  uint64_t v6 = v14 + 2;
  if (v14 + 2 >= v9) {
    return *(void *)&v11;
  }
  unint64_t v15 = *(void *)(v1 + 8 * v6);
  if (v15) {
    goto LABEL_25;
  }
  uint64_t v6 = v14 + 3;
  if (v14 + 3 >= v9) {
    return *(void *)&v11;
  }
  unint64_t v15 = *(void *)(v1 + 8 * v6);
  if (v15)
  {
LABEL_25:
    unint64_t v8 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v6 << 6);
    goto LABEL_7;
  }
  int64_t v16 = v14 + 4;
  if (v16 >= v9) {
    return *(void *)&v11;
  }
  unint64_t v15 = *(void *)(v1 + 8 * v16);
  if (v15)
  {
    uint64_t v6 = v16;
    goto LABEL_25;
  }
  while (1)
  {
    uint64_t v6 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v6 >= v9) {
      return *(void *)&v11;
    }
    unint64_t v15 = *(void *)(v1 + 8 * v6);
    ++v16;
    if (v15) {
      goto LABEL_25;
    }
  }
  __break(1u);
LABEL_43:
  uint64_t v19 = 0;
  uint64_t v20 = 6;
  if (v9 > 6) {
    uint64_t v20 = v9;
  }
  uint64_t v21 = v20 - 6;
  while (v21 != v19)
  {
    unint64_t v18 = *(void *)(a1 + 104 + 8 * v19++);
    if (v18)
    {
      uint64_t v6 = v19 + 5;
      goto LABEL_30;
    }
  }
  return 0;
}

uint64_t sub_100027CD8()
{
  return sub_10002F50C();
}

double sub_100027CEC()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_100027D60()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

void *sub_100027DD8()
{
  uint64_t v0 = sub_10000435C(&qword_1000A8FF8);
  __chkstk_darwin(v0 - 8);
  char v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v8 = &_swiftEmptySetSingleton;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v3 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48))(v2, 1, v3))
  {
    sub_100009ED4((uint64_t)v2, &qword_1000A8FF8);
    uint64_t v4 = _swiftEmptyArrayStorage;
  }
  else
  {
    unint64_t v5 = UITextFormattingViewController.FormattingDescriptor.fonts.getter();
    sub_100009ED4((uint64_t)v2, &qword_1000A8FF8);
    uint64_t v4 = sub_1000334E0(v5, (uint64_t)&v8, (SEL *)&selRef_fontName);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return v4;
}

id sub_100027F4C()
{
  uint64_t v0 = sub_10000435C(&qword_1000A8FF8);
  __chkstk_darwin(v0 - 8);
  char v2 = (char *)&v10 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v3 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor();
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48))(v2, 1, v3))
  {
    unint64_t v6 = UITextFormattingViewController.FormattingDescriptor.textColors.getter();
    id result = (id)sub_100009ED4((uint64_t)v2, &qword_1000A8FF8);
    if (v6 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
      id result = (id)swift_bridgeObjectRelease();
      if (v9)
      {
LABEL_8:
        if ((v6 & 0xC000000000000001) != 0)
        {
          id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (!*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            return result;
          }
          id v7 = *(id *)(v6 + 32);
        }
        id v8 = v7;
        swift_bridgeObjectRelease();
        return v8;
      }
    }
    else if (*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_8;
    }
    swift_bridgeObjectRelease();
    goto LABEL_3;
  }
  sub_100009ED4((uint64_t)v2, &qword_1000A8FF8);
LABEL_3:
  id v4 = [self labelColor];

  return v4;
}

NSString sub_100028138()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_1000A9328 = (uint64_t)result;
  return result;
}

uint64_t sub_100028170()
{
  uint64_t v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v2 = *(void *)(*(void *)&v20[0] + 16);
  swift_bridgeObjectRelease();
  v19[1] = &_swiftEmptySetSingleton;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  unint64_t v3 = *(void *)&v20[0];
  *(void *)&v20[0] = _swiftEmptyArrayStorage;
  if (v3 >> 62) {
    goto LABEL_15;
  }
  uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v16 = v1;
    uint64_t v5 = 4;
    while (1)
    {
      id v6 = (v3 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(v3 + 8 * v5);
      id v7 = v6;
      uint64_t v1 = v5 - 3;
      if (__OFADD__(v5 - 4, 1)) {
        break;
      }
      *(void *)&v17[0] = v6;
      sub_10002FBC0((id *)v17, v2 != 0, v19);

      if (v19[0])
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((*(void *)&v20[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)&v20[0] & 0xFFFFFFFFFFFFFF8)
                                                                                         + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      ++v5;
      if (v1 == v4)
      {
        swift_bridgeObjectRelease();
        id v8 = *(void **)&v20[0];
        uint64_t v1 = v16;
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  id v8 = _swiftEmptyArrayStorage;
LABEL_17:
  swift_bridgeObjectRelease();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  char v9 = v20[0];
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_isInPopoverPresentation)) {
    char v10 = 0;
  }
  else {
    char v10 = *(unsigned char *)(v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_hasParentViewController) ^ 1;
  }
  int v11 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_useReducedMetrics);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  double v12 = *(double *)v20;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  sub_10001D2D4(v9, (unint64_t)v8, v10 & 1, v11, *(double *)v20, SBYTE8(v20[0]), (uint64_t)v20, v12);
  swift_getKeyPath();
  swift_getKeyPath();
  v17[2] = v20[2];
  void v17[3] = v20[3];
  uint64_t v18 = v21;
  v17[0] = v20[0];
  v17[1] = v20[1];
  swift_retain();
  static Published.subscript.setter();
  unint64_t v13 = *(void (**)(uint64_t))(v1
                                       + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_contentSizeDidUpdate);
  uint64_t v14 = swift_retain();
  v13(v14);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10002857C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000435C(&qword_1000A95F0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v5 = sub_10002B0B8((uint64_t)_swiftEmptyArrayStorage);
  swift_getKeyPath();
  swift_getKeyPath();
  v11[1] = v5;
  swift_retain();
  static Published.subscript.setter();
  uint64_t v6 = OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_renderTask;
  if (*(void *)(v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_renderTask))
  {
    swift_retain();
    Task.cancel()();
    swift_release();
  }
  uint64_t v7 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v4, 1, 1, v7);
  type metadata accessor for MainActor();
  swift_retain();
  uint64_t v8 = static MainActor.shared.getter();
  char v9 = (void *)swift_allocObject();
  void v9[2] = v8;
  v9[3] = &protocol witness table for MainActor;
  v9[4] = v1;
  *(void *)(v1 + v6) = sub_10002FA14((uint64_t)v4, (uint64_t)&unk_1000A9600, (uint64_t)v9);
  return swift_release();
}

uint64_t sub_10002873C()
{
  return sub_10002F50C();
}

uint64_t sub_100028750@<X0>(void *a1@<X8>)
{
  return sub_100022BE0(a1);
}

uint64_t sub_100028764()
{
  return sub_10002857C();
}

uint64_t sub_1000287E8()
{
  return sub_100028170();
}

uint64_t sub_1000288E4()
{
  return sub_10002AD9C();
}

uint64_t sub_1000288F8()
{
  return sub_10002F50C();
}

void sub_10002890C()
{
  uint64_t v5 = OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_initialUpdateOfRecentFontsCompleted;
  char v6 = *(unsigned char *)(v0 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_initialUpdateOfRecentFontsCompleted);
  unint64_t v7 = (unint64_t)sub_100027DD8();
  unint64_t v8 = v7;
  if ((v6 & 1) == 0)
  {
    BOOL v48 = (unsigned char *)v5;
    unint64_t v52 = (unint64_t)_swiftEmptyArrayStorage;
    if (v7 >> 62)
    {
      swift_retain();
      uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    }
    else
    {
      uint64_t v12 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_retain();
    }
    unint64_t v13 = _swiftEmptyArrayStorage;
    if (v12)
    {
      uint64_t v1 = 0;
      uint64_t v4 = (unsigned char *)OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_includeDefaultFont;
      unint64_t v3 = v8 & 0xC000000000000001;
      while (1)
      {
        if (v3)
        {
          id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if ((unint64_t)v1 >= *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_36;
          }
          id v14 = *(id *)(v8 + 8 * v1 + 32);
        }
        unint64_t v15 = v14;
        unint64_t v2 = v1 + 1;
        if (__OFADD__(v1, 1)) {
          break;
        }
        if ((v4[v50] & 1) != 0 || ([v14 isSystemFont] & 1) == 0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
        }
        ++v1;
        if (v2 == v12)
        {
          unint64_t v16 = v52;
          unint64_t v13 = _swiftEmptyArrayStorage;
          goto LABEL_24;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      if (_CocoaArrayWrapper.endIndex.getter()) {
        goto LABEL_4;
      }
      goto LABEL_38;
    }
    unint64_t v16 = (unint64_t)_swiftEmptyArrayStorage;
LABEL_24:
    swift_bridgeObjectRelease();
    swift_release();
    if ((v16 & 0x8000000000000000) != 0 || (v16 & 0x4000000000000000) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v43 = _CocoaArrayWrapper.endIndex.getter();
      swift_release();
      if (v43)
      {
        swift_bridgeObjectRetain();
        uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
        swift_release();
        if (!v17)
        {
LABEL_34:
          swift_release();
          unint64_t v52 = (unint64_t)&_swiftEmptySetSingleton;
          swift_getKeyPath();
          swift_getKeyPath();
          static Published.subscript.getter();
          swift_release();
          swift_release();
          sub_10001BB50(v51);
          sub_1000334E0((unint64_t)v13, (uint64_t)&v52, (SEL *)&selRef_familyName);
          swift_bridgeObjectRelease();
          swift_getKeyPath();
          swift_getKeyPath();
          swift_retain();
          static Published.subscript.setter();
          v48[v50] = 1;
          swift_bridgeObjectRelease();
          return;
        }
        unint64_t v52 = (unint64_t)_swiftEmptyArrayStorage;
        specialized ContiguousArray.reserveCapacity(_:)();
        if ((v17 & 0x8000000000000000) == 0)
        {
LABEL_28:
          uint64_t v18 = 0;
          do
          {
            if ((v16 & 0xC000000000000001) != 0) {
              id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v19 = *(id *)(v16 + 8 * v18 + 32);
            }
            uint64_t v20 = v19;
            ++v18;
            id v21 = [v19 fontDescriptor];
            [objc_allocWithZone((Class)_UIFontPickerFontInfo) initWithFontDescriptor:v21];

            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
          }
          while (v17 != v18);
          unint64_t v13 = (void *)v52;
          goto LABEL_34;
        }
        __break(1u);
      }
    }
    else
    {
      uint64_t v17 = *(void *)(v16 + 16);
      if (v17)
      {
        unint64_t v52 = (unint64_t)_swiftEmptyArrayStorage;
        specialized ContiguousArray.reserveCapacity(_:)();
        goto LABEL_28;
      }
    }
    swift_release();
    return;
  }
  if (v7 >> 62) {
    goto LABEL_37;
  }
  if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_4:
    if ((v8 & 0xC000000000000001) != 0)
    {
      id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      unint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v9)
      {
        __break(1u);
        goto LABEL_79;
      }
      id v10 = *(id *)(v8 + 32);
    }
    id v47 = v10;
    swift_bridgeObjectRelease();
    id v11 = v47;
    goto LABEL_39;
  }
LABEL_38:
  swift_bridgeObjectRelease();
  uint64_t v22 = self;
  [v22 systemFontSize];
  id v11 = [v22 systemFontOfSize:];
LABEL_39:
  id v49 = v11;
  if (![v11 isSystemFont]
    || *(unsigned char *)(v50 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_includeDefaultFont) == 1)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v4 = v49;
    char v23 = sub_100033D04(v52, v4);
    swift_bridgeObjectRelease();

    if (v23)
    {
LABEL_67:

      return;
    }
    id v24 = [v4 fontDescriptor];
    id v25 = [objc_allocWithZone((Class)_UIFontPickerFontInfo) initWithFontDescriptor:v24];

    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    id v26 = v25;
    unint64_t v2 = sub_100033F5C(v52, v26);
    swift_bridgeObjectRelease();

    if (v2)
    {
      swift_getKeyPath();
      swift_getKeyPath();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      sub_10000435C(&qword_1000A8B30);
      uint64_t v27 = swift_allocObject();
      *(_OWORD *)(v27 + 16) = xmmword_100083940;
      *(void *)(v27 + 32) = v2;
      specialized Array._endMutation()();
      uint64_t v28 = swift_allocObject();
      *(_OWORD *)(v28 + 16) = xmmword_100083940;
      *(void *)(v28 + 32) = v26;
      unint64_t v52 = v28;
      specialized Array._endMutation()();
      id v46 = v26;
      id v29 = (id)v2;
      sub_10000435C(&qword_1000A83B0);
      sub_10000A368(&qword_1000A9688, &qword_1000A83B0);
      sub_10000A368(&qword_1000A8B88, &qword_1000A83B0);
      sub_100034120();
      RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_getKeyPath();
      swift_getKeyPath();
      swift_retain();
      static Published.subscript.setter();

      return;
    }
    sub_10000435C(&qword_1000A8B30);
    uint64_t v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = xmmword_100083940;
    *(void *)(v30 + 32) = v26;
    unint64_t v52 = v30;
    specialized Array._endMutation()();
    swift_getKeyPath();
    swift_getKeyPath();
    unint64_t v8 = (unint64_t)v26;
    static Published.subscript.getter();
    swift_release();
    swift_release();
    sub_10001BB50(v52);
    uint64_t v1 = v52;
    unint64_t v9 = v52 & 0xFFFFFFFFFFFFFF8;
    unint64_t v3 = v52 >> 62;
    if (!(v52 >> 62))
    {
      if (*(uint64_t *)((v52 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 7) {
        uint64_t v31 = 7;
      }
      else {
        uint64_t v31 = *(void *)((v52 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      if ((v52 & 0xC000000000000001) == 0) {
        goto LABEL_55;
      }
      goto LABEL_52;
    }
LABEL_79:
    if (v1 < 0) {
      uint64_t v35 = v1;
    }
    else {
      uint64_t v35 = v9;
    }
    swift_bridgeObjectRetain();
    uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v36 < 0)
    {
      __break(1u);
      goto LABEL_84;
    }
    if (v34 >= 7) {
      uint64_t v44 = 7;
    }
    else {
      uint64_t v44 = v34;
    }
    if (v34 >= 0) {
      uint64_t v31 = v44;
    }
    else {
      uint64_t v31 = 7;
    }
    swift_bridgeObjectRetain();
    uint64_t v45 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v45 < v31) {
      __break(1u);
    }
    if ((v1 & 0xC000000000000001) == 0)
    {
LABEL_55:
      if (v3)
      {
        swift_bridgeObjectRetain();
        uint64_t v35 = _CocoaArrayWrapper.subscript.getter();
        uint64_t v36 = v37;
        uint64_t v34 = v38;
        unint64_t v2 = v39;
        swift_bridgeObjectRelease_n();
        if (v2) {
          goto LABEL_60;
        }
      }
      else
      {
        uint64_t v34 = 0;
        uint64_t v35 = v1 & 0xFFFFFFFFFFFFFF8;
        uint64_t v36 = (v1 & 0xFFFFFFFFFFFFFF8) + 32;
        unint64_t v2 = (2 * v31) | 1;
        if (v2)
        {
LABEL_60:
          type metadata accessor for __ContiguousArrayStorageBase();
          swift_unknownObjectRetain_n();
          uint64_t v41 = (void *)swift_dynamicCastClass();
          if (!v41)
          {
            swift_unknownObjectRelease();
            uint64_t v41 = _swiftEmptyArrayStorage;
          }
          uint64_t v42 = v41[2];
          swift_release();
          if (!__OFSUB__(v2 >> 1, v34))
          {
            if (v42 == (v2 >> 1) - v34)
            {
              Swift::Int v40 = (void *)swift_dynamicCastClass();
              if (!v40)
              {
                swift_unknownObjectRelease();
                Swift::Int v40 = _swiftEmptyArrayStorage;
              }
              goto LABEL_66;
            }
            goto LABEL_85;
          }
LABEL_84:
          __break(1u);
LABEL_85:
          swift_unknownObjectRelease();
        }
      }
      Swift::Int v40 = sub_100015170(v35, v36, v34, v2);
LABEL_66:
      swift_unknownObjectRelease();
      swift_getKeyPath();
      swift_getKeyPath();
      unint64_t v52 = (unint64_t)v40;
      swift_retain();
      static Published.subscript.setter();

      goto LABEL_67;
    }
LABEL_52:
    if (v31)
    {
      sub_10000A3AC(0, &qword_1000A86E8);
      Swift::Int v32 = 0;
      do
      {
        Swift::Int v33 = v32 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v32);
        Swift::Int v32 = v33;
      }
      while (v31 != v33);
    }
    goto LABEL_55;
  }
}

uint64_t sub_1000293EC()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();

  return swift_release();
}

uint64_t sub_100029464()
{
  uint64_t v1 = v0;
  uint64_t v44 = sub_10000435C(&qword_1000A9628);
  uint64_t v2 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v42 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = type metadata accessor for AttributeContainer();
  uint64_t v4 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  uint64_t v41 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UITextFormattingViewController.FormattingStyle();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v10 = v45[2];
  if (v10)
  {
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    uint64_t v11 = v7 + 16;
    unint64_t v13 = (char *)v45 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    uint64_t v38 = *(void *)(v11 + 56);
    unint64_t v39 = v12;
    uint64_t v37 = (void (**)(char *, uint64_t))(v4 + 8);
    uint64_t v35 = v1;
    uint64_t v36 = (void (**)(char *, uint64_t))(v2 + 8);
    Swift::Int v40 = (void (**)(char *, uint64_t))(v11 - 8);
    uint64_t v34 = v45;
    swift_bridgeObjectRetain();
    id v14 = _swiftEmptyArrayStorage;
    uint64_t v15 = v6;
    uint64_t v16 = v11;
    uint64_t v17 = v42;
    do
    {
      uint64_t v18 = v16;
      v39(v9, v13, v15);
      id v19 = v41;
      UITextFormattingViewController.FormattingStyle.attributes.getter();
      swift_getKeyPath();
      type metadata accessor for AttributeScopes.UIKitAttributes();
      sub_100034228(&qword_1000A9630, (void (*)(uint64_t))&type metadata accessor for AttributeScopes.UIKitAttributes);
      AttributeContainer.subscript.getter();
      swift_release();
      (*v37)(v19, v43);
      swift_getKeyPath();
      sub_100033CB0();
      uint64_t v20 = v15;
      uint64_t v21 = v44;
      ScopedAttributeContainer.subscript.getter();
      swift_release();
      (*v36)(v17, v21);
      id v22 = v45;
      if (v45)
      {
        [v45 pointSize];
        uint64_t v24 = v23;

        (*v40)(v9, v20);
        uint64_t v15 = v20;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          id v14 = sub_100014D84(0, v14[2] + 1, 1, v14);
        }
        unint64_t v26 = v14[2];
        unint64_t v25 = v14[3];
        if (v26 >= v25 >> 1) {
          id v14 = sub_100014D84((void *)(v25 > 1), v26 + 1, 1, v14);
        }
        v14[2] = v26 + 1;
        v14[v26 + 4] = v24;
      }
      else
      {
        (*v40)(v9, v20);
        uint64_t v15 = v20;
      }
      v13 += v38;
      --v10;
      uint64_t v16 = v18;
    }
    while (v10);
    swift_bridgeObjectRelease_n();
    uint64_t v1 = v35;
  }
  else
  {
    swift_bridgeObjectRelease();
    id v14 = _swiftEmptyArrayStorage;
  }
  uint64_t v27 = sub_10001E160((uint64_t)v14);
  swift_bridgeObjectRelease();
  if (*(void *)(v27 + 16))
  {
    uint64_t v28 = sub_100027ADC(v27);
    char v30 = v29;
    uint64_t result = swift_bridgeObjectRelease();
    char v32 = v30 & 1;
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v28 = 0;
    char v32 = 1;
  }
  uint64_t v33 = v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_largestFontSizeInFormattingStyles;
  *(void *)uint64_t v33 = v28;
  *(unsigned char *)(v33 + 8) = v32;
  return result;
}

uint64_t sub_100029940()
{
  return sub_10002F50C();
}

uint64_t sub_100029954@<X0>(uint64_t *a1@<X8>)
{
  AttributeScopes.uiKit.getter();
  uint64_t result = type metadata accessor for AttributeScopes.UIKitAttributes();
  *a1 = result;
  return result;
}

void sub_100029984()
{
}

uint64_t sub_1000299A0@<X0>(void *a1@<X8>)
{
  return sub_100022BE0(a1);
}

uint64_t sub_1000299B4()
{
  return sub_100029464();
}

uint64_t sub_100029A34(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  LOBYTE(a1) = sub_1000146BC(v6, a1);
  uint64_t result = swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
  {
    if (qword_1000A8288 != -1) {
      swift_once();
    }
    uint64_t v5 = qword_1000AB650;
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_bridgeObjectRetain();
    sub_10001BB68(v6);
    *(void *)(v2 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_allHighlightStyles) = v5;
    swift_bridgeObjectRelease();
    return sub_10002857C();
  }
  return result;
}

uint64_t sub_100029B84()
{
  return sub_10002F50C();
}

uint64_t sub_100029B98()
{
  return sub_10002AD9C();
}

id sub_100029BAC()
{
  uint64_t v1 = OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState____lazy_storage___configForRecents;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState____lazy_storage___configForRecents);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState____lazy_storage___configForRecents);
  }
  else
  {
    id v4 = [objc_allocWithZone((Class)UIFontPickerViewControllerConfiguration) init];
    [v4 setIncludeFaces:1];
    uint64_t v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

uint64_t sub_100029C34()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v103 = *(void *)(v2 - 8);
  uint64_t v104 = v2;
  __chkstk_darwin(v2);
  CGFloat v102 = (char *)&v69 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000435C(&qword_1000A9680);
  uint64_t v100 = *(void *)(v4 - 8);
  uint64_t v101 = v4;
  __chkstk_darwin(v4);
  double v99 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000435C(&qword_1000A9678);
  uint64_t v97 = *(void *)(v6 - 8);
  uint64_t v98 = v6;
  __chkstk_darwin(v6);
  id v96 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000435C(&qword_1000A8770);
  uint64_t v94 = *(void *)(v8 - 8);
  uint64_t v95 = v8;
  __chkstk_darwin(v8);
  double v93 = (char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = sub_10000435C(&qword_1000A9670);
  uint64_t v91 = *(void *)(v92 - 8);
  __chkstk_darwin(v92);
  CGFloat v90 = (char *)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = sub_10000435C(&qword_1000A9668);
  uint64_t v88 = *(void *)(v89 - 8);
  __chkstk_darwin(v89);
  double v87 = (char *)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = sub_10000435C(&qword_1000A9660);
  uint64_t v85 = *(void *)(v86 - 8);
  __chkstk_darwin(v86);
  id v84 = (char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = sub_10000435C(&qword_1000A9658);
  uint64_t v82 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  double v81 = (char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = sub_10000435C(&qword_1000A9650);
  uint64_t v79 = *(void *)(v80 - 8);
  __chkstk_darwin(v80);
  CGFloat v78 = (char *)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = sub_10000435C(&qword_1000A9648);
  uint64_t v76 = *(void *)(v77 - 8);
  __chkstk_darwin(v77);
  double v75 = (char *)&v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = sub_10000435C(&qword_1000A8FF8);
  uint64_t v16 = __chkstk_darwin(v74);
  uint64_t v73 = (uint64_t)&v69 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  id v19 = (char *)&v69 - v18;
  uint64_t v72 = sub_10000435C(&qword_1000A8750);
  uint64_t v20 = *(void *)(v72 - 8);
  __chkstk_darwin(v72);
  id v22 = (char *)&v69 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = sub_10000435C(&qword_1000A8768);
  uint64_t v23 = *(void *)(v70 - 8);
  __chkstk_darwin(v70);
  unint64_t v25 = (char *)&v69 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_10000435C(&qword_1000A9640);
  uint64_t v27 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  char v29 = (char *)&v69 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState__groups;
  double v105 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
  sub_10000435C(&qword_1000A9410);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v27 + 32))(v30, v29, v26);
  uint64_t v31 = v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState__useLandscapeLayout;
  LOBYTE(v105) = 0;
  Published.init(initialValue:)();
  uint64_t v71 = *(void (**)(uint64_t, char *, uint64_t))(v23 + 32);
  uint64_t v32 = v70;
  v71(v31, v25, v70);
  uint64_t v33 = v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState__recentFonts;
  double v105 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
  sub_10000435C(&qword_1000A83B0);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(v33, v22, v72);
  uint64_t v34 = v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState__formattingDescriptor;
  uint64_t v35 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v19, 1, 1, v35);
  sub_100009E70((uint64_t)v19, v73, &qword_1000A8FF8);
  uint64_t v36 = v75;
  Published.init(initialValue:)();
  sub_100009ED4((uint64_t)v19, &qword_1000A8FF8);
  (*(void (**)(uint64_t, char *, uint64_t))(v76 + 32))(v34, v36, v77);
  uint64_t v37 = v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState__formattingStyles;
  double v105 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
  sub_10000435C(&qword_1000A9428);
  uint64_t v38 = v78;
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v79 + 32))(v37, v38, v80);
  uint64_t v39 = v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState__emphasisStyles;
  double v105 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
  sub_10000435C(&qword_1000A8B90);
  Swift::Int v40 = v81;
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v82 + 32))(v39, v40, v83);
  uint64_t v41 = v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState__isFormattingUITextView;
  LOBYTE(v105) = 0;
  Published.init(initialValue:)();
  uint64_t v42 = v71;
  v71(v41, v25, v32);
  uint64_t v43 = v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState__disabledComponents;
  double v105 = COERCE_DOUBLE(&_swiftEmptySetSingleton);
  sub_10000435C(&qword_1000A9440);
  uint64_t v44 = v84;
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v85 + 32))(v43, v44, v86);
  *(unsigned char *)(v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_isTextAnimationsUI) = 0;
  *(unsigned char *)(v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_isInRemotePresentation) = 0;
  *(unsigned char *)(v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_isInPopoverPresentation) = 0;
  *(unsigned char *)(v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_hasParentViewController) = 0;
  *(unsigned char *)(v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_useReducedMetrics) = 0;
  *(unsigned char *)(v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_includeDefaultFont) = 0;
  *(unsigned char *)(v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_initialUpdateOfRecentFontsCompleted) = 0;
  *(void *)(v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_cancellables) = &_swiftEmptySetSingleton;
  *(void *)(v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState____lazy_storage___configForRecents) = 0;
  uint64_t v45 = v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState__layout;
  sub_10001D2D4(0, (unint64_t)_swiftEmptyArrayStorage, 0, 0, 0.0, 1, (uint64_t)&v105, 0.0);
  id v46 = v87;
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v88 + 32))(v45, v46, v89);
  uint64_t v47 = v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState__uiConfig;
  LOBYTE(v105) = 0;
  BOOL v48 = v90;
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v91 + 32))(v47, v48, v92);
  uint64_t v49 = v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState__availableWidth;
  double v105 = sub_100075CF0(6, 0);
  uint64_t v50 = v93;
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v94 + 32))(v49, v50, v95);
  uint64_t v51 = v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState__idealHeight;
  double v105 = 0.0;
  char v106 = 1;
  sub_10000435C(&qword_1000A9460);
  unint64_t v52 = v96;
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v97 + 32))(v51, v52, v98);
  uint64_t v53 = v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState__hasParentBottomSafeAreaInset;
  LOBYTE(v105) = 0;
  Published.init(initialValue:)();
  v42(v53, v25, v32);
  double v54 = (_OWORD *)(v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_colorPickerRect);
  *double v54 = 0u;
  v54[1] = 0u;
  uint64_t v55 = v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_largestFontSizeInFormattingStyles;
  *(void *)uint64_t v55 = 0;
  *(unsigned char *)(v55 + 8) = 1;
  uint64_t v56 = OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_allHighlightStyles;
  if (qword_1000A8288 != -1) {
    swift_once();
  }
  *(void *)(v1 + v56) = qword_1000AB650;
  uint64_t v57 = (void *)(v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_didChangeValue);
  *uint64_t v57 = nullsub_1;
  v57[1] = 0;
  uint64_t v58 = (void *)(v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_close);
  *uint64_t v58 = 0;
  v58[1] = 0;
  uint64_t v59 = (void *)(v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_contentSizeDidUpdate);
  *uint64_t v59 = nullsub_1;
  v59[1] = 0;
  unint64_t v60 = (void *)(v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_pickFont);
  *unint64_t v60 = nullsub_1;
  v60[1] = 0;
  char v61 = (void *)(v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_pickColor);
  *char v61 = nullsub_1;
  v61[1] = 0;
  unint64_t v62 = (void *)(v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_showTypographySettings);
  *unint64_t v62 = nullsub_1;
  v62[1] = 0;
  uint64_t v63 = v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState__highlightPreviewImages;
  swift_bridgeObjectRetain();
  double v105 = COERCE_DOUBLE(sub_10002B0B8((uint64_t)_swiftEmptyArrayStorage));
  sub_10000435C((uint64_t *)&unk_1000A9470);
  uint64_t v64 = v99;
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v100 + 32))(v63, v64, v101);
  *(void *)(v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_renderTask) = 0;
  id v65 = [self defaultCenter];
  if (qword_1000A8228 != -1) {
    swift_once();
  }
  uint64_t v66 = v102;
  NSNotificationCenter.publisher(for:object:)();

  swift_unownedRetainStrong();
  swift_unownedRetain();
  swift_release();
  *(void *)(swift_allocObject() + 16) = v1;
  sub_100034228(&qword_1000A9698, (void (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher);
  uint64_t v67 = v104;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v103 + 8))(v66, v67);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  sub_10002ABBC();
  return v1;
}

void sub_10002ABBC()
{
  id v0 = sub_100029BAC();
  id v1 = (id)_UIFontPickerLoadRecentsMatchingConfigurationForSuite();

  if (v1)
  {
    sub_10000A3AC(0, &qword_1000A86E8);
    static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  }
}

double sub_10002AC88@<D0>(double *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  double result = v3;
  *a1 = v3;
  return result;
}

uint64_t sub_10002AD08()
{
  return sub_100028170();
}

uint64_t sub_10002AD88()
{
  return sub_10002AD9C();
}

uint64_t sub_10002AD9C()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_10002AE08@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return result;
}

uint64_t sub_10002AE90()
{
  return sub_100028170();
}

void *sub_10002AF18()
{
  uint64_t v14 = &_swiftEmptySetSingleton;
  id v0 = sub_100027DD8();
  unint64_t v1 = (unint64_t)sub_1000334E0((unint64_t)v0, (uint64_t)&v14, (SEL *)&selRef_familyName);
  swift_bridgeObjectRelease();
  if (!(v1 >> 62))
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v2) {
      goto LABEL_3;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
  if (!v2) {
    goto LABEL_13;
  }
LABEL_3:
  uint64_t result = (void *)sub_1000154E4(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    uint64_t v4 = 0;
    do
    {
      if ((v1 & 0xC000000000000001) != 0) {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v5 = *(id *)(v1 + 8 * v4 + 32);
      }
      uint64_t v6 = v5;
      id v7 = [v5 familyName];
      uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v10 = v9;

      unint64_t v12 = _swiftEmptyArrayStorage[2];
      unint64_t v11 = _swiftEmptyArrayStorage[3];
      if (v12 >= v11 >> 1) {
        sub_1000154E4(v11 > 1, v12 + 1, 1);
      }
      ++v4;
      _swiftEmptyArrayStorage[2] = v12 + 1;
      uint64_t v13 = &_swiftEmptyArrayStorage[2 * v12];
      v13[4] = v8;
      v13[5] = v10;
    }
    while (v2 != v4);
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

unint64_t sub_10002B0B8(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000435C(&qword_1000A8B70);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v5 = (uint64_t)*(v4 - 2);
    uint64_t v6 = (uint64_t)*(v4 - 1);
    id v7 = *v4;
    swift_bridgeObjectRetain();
    id v8 = v7;
    unint64_t result = sub_100018964(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    unint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *unint64_t v11 = v5;
    v11[1] = v6;
    *(void *)(v2[7] + 8 * result) = v8;
    uint64_t v12 = v2[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10002B1D4(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000435C(&qword_1000A8F68);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100009E70(v6, (uint64_t)&v13, &qword_1000A96C0);
    uint64_t v7 = v13;
    unint64_t result = sub_100018A54(v13);
    if (v9) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v7;
    unint64_t result = (unint64_t)sub_1000208E0(&v14, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10002B304()
{
  unint64_t v0 = (unint64_t)sub_100027DD8();
  unint64_t v1 = v0;
  if (v0 >> 62) {
    goto LABEL_12;
  }
  uint64_t v2 = *(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v3 = 4;
    while (1)
    {
      id v4 = (v1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(v1 + 8 * v3);
      uint64_t v5 = v4;
      uint64_t v6 = v3 - 3;
      if (__OFADD__(v3 - 4, 1)) {
        break;
      }
      id v7 = [v4 fontDescriptor];
      unsigned int v8 = [v7 symbolicTraits];

      uint64_t v9 = (v8 >> 1) & 1;
      if ((v8 & 2) == 0)
      {
        ++v3;
        if (v6 != v2) {
          continue;
        }
      }
      goto LABEL_14;
    }
    __break(1u);
LABEL_12:
    swift_bridgeObjectRetain();
  }
  uint64_t v9 = 0;
LABEL_14:
  swift_bridgeObjectRelease_n();
  return v9;
}

uint64_t sub_10002B420(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UITextFormattingViewController.ChangeValue();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v8 = (unint64_t)sub_100027DD8();
  unint64_t v9 = v8;
  unint64_t v10 = v8 >> 62;
  if (a1)
  {
    if (v10)
    {
      if (_CocoaArrayWrapper.endIndex.getter()) {
        goto LABEL_4;
      }
    }
    else if (*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_4:
      if ((v9 & 0xC000000000000001) != 0)
      {
        id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        goto LABEL_7;
      }
      if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        id v11 = *(id *)(v9 + 32);
LABEL_7:
        id v12 = v11;
        swift_bridgeObjectRelease();
        goto LABEL_16;
      }
      __break(1u);
      goto LABEL_40;
    }
    swift_bridgeObjectRelease();
    uint64_t v15 = self;
    [v15 systemFontSize];
    id v12 = [v15 systemFontOfSize:];
LABEL_16:
    id v16 = [v12 fontDescriptor];
    unsigned __int8 v17 = [v16 symbolicTraits];

    if ((v17 & 2) != 0) {
      goto LABEL_17;
    }
    goto LABEL_26;
  }
  if (v10)
  {
    if (_CocoaArrayWrapper.endIndex.getter())
    {
LABEL_10:
      if ((v9 & 0xC000000000000001) == 0)
      {
        if (!*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_42;
        }
        id v13 = *(id *)(v9 + 32);
        goto LABEL_13;
      }
LABEL_40:
      id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_13:
      id v14 = v13;
      swift_bridgeObjectRelease();
      goto LABEL_25;
    }
  }
  else if (*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  id v22 = self;
  [v22 systemFontSize];
  id v14 = [v22 systemFontOfSize:];
LABEL_25:
  id v23 = [v14 fontDescriptor];
  unsigned __int8 v24 = [v23 symbolicTraits];

  if ((v24 & 2) == 0)
  {
LABEL_17:
    unint64_t v18 = (unint64_t)sub_100027DD8();
    unint64_t v19 = v18;
    if (v18 >> 62)
    {
      if (_CocoaArrayWrapper.endIndex.getter())
      {
LABEL_19:
        if ((v19 & 0xC000000000000001) == 0)
        {
          if (*(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            id v20 = *(id *)(v19 + 32);
LABEL_22:
            id v21 = v20;
            swift_bridgeObjectRelease();
LABEL_37:
            uint64_t v32 = *(void (**)(unsigned char *, unint64_t))(v2
                                                                   + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_didChangeValue);
            unsigned char *v7 = a1 & 1;
            (*(void (**)(unsigned char *, void, uint64_t))(v5 + 104))(v7, enum case for UITextFormattingViewController.ChangeValue.bold(_:), v4);
            sub_10000435C(&qword_1000AAAA0);
            uint64_t inited = swift_initStackObject();
            *(_OWORD *)(inited + 16) = xmmword_1000843C0;
            *(void *)(inited + 32) = NSFontAttributeName;
            *(void *)(inited + 64) = sub_10000A3AC(0, &qword_1000A8FE8);
            *(void *)(inited + 40) = v21;
            swift_retain();
            uint64_t v34 = NSFontAttributeName;
            id v35 = v21;
            unint64_t v36 = sub_10002B1D4(inited);
            v32(v7, v36);

            swift_release();
            swift_bridgeObjectRelease();
            return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
          }
          __break(1u);
          goto LABEL_44;
        }
LABEL_42:
        id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        goto LABEL_22;
      }
    }
    else if (*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_19;
    }
    swift_bridgeObjectRelease();
    uint64_t v30 = self;
    [v30 systemFontSize];
    id v21 = [v30 systemFontOfSize:];
    goto LABEL_37;
  }
LABEL_26:
  unint64_t v25 = (unint64_t)sub_100027DD8();
  unint64_t v26 = v25;
  if (!(v25 >> 62))
  {
    uint64_t result = *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (result) {
      goto LABEL_28;
    }
LABEL_35:
    swift_bridgeObjectRelease();
    uint64_t v31 = self;
    [v31 systemFontSize];
    id v29 = [v31 systemFontOfSize:];
    goto LABEL_36;
  }
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if (!result) {
    goto LABEL_35;
  }
LABEL_28:
  if ((v26 & 0xC000000000000001) != 0)
  {
LABEL_44:
    id v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_31;
  }
  if (*(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v28 = *(id *)(v26 + 32);
LABEL_31:
    id v29 = v28;
    swift_bridgeObjectRelease();
LABEL_36:
    id v21 = sub_100076820(2);

    goto LABEL_37;
  }
  __break(1u);
  return result;
}

uint64_t sub_10002B918()
{
  uint64_t v0 = sub_10000435C(&qword_1000A8FF8);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v25 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v3 = (unint64_t)sub_100027DD8();
  unint64_t v4 = v3;
  if (v3 >> 62)
  {
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_3;
    }
LABEL_8:
    swift_bridgeObjectRelease();
    id v7 = self;
    [v7 systemFontSize];
    id v6 = [v7 systemFontOfSize:];
    goto LABEL_9;
  }
  if (!*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_8;
  }
LABEL_3:
  if ((v4 & 0xC000000000000001) != 0)
  {
    id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_18;
    }
    id v5 = *(id *)(v4 + 32);
  }
  id v6 = v5;
  swift_bridgeObjectRelease();
LABEL_9:
  id v8 = [v6 fontDescriptor];
  unsigned __int8 v9 = [v8 symbolicTraits];

  BOOL v10 = (v9 & 2) == 0;
  id v11 = sub_100076820(2);
  id v12 = [v11 fontDescriptor];
  unsigned __int8 v13 = [v12 symbolicTraits];

  if ((v10 ^ ((v13 & 2) >> 1))) {
    goto LABEL_26;
  }
  unint64_t v14 = (unint64_t)sub_100027DD8();
  unint64_t v4 = v14;
  if (!(v14 >> 62))
  {
    uint64_t result = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (result) {
      goto LABEL_12;
    }
LABEL_19:
    swift_bridgeObjectRelease();
    unint64_t v18 = self;
    [v18 systemFontSize];
    id v17 = [v18 systemFontOfSize:];
LABEL_20:
    NSString v19 = [v17 familyName];
    if (!v19)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v19 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    id v20 = [self fontNamesForFamilyName:v19];

    uint64_t v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v22 = *(void *)(v21 + 16);

    swift_bridgeObjectRelease();
    if (v22 >= 2)
    {
      swift_getKeyPath();
      swift_getKeyPath();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      uint64_t v23 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor();
      char canToggle = 1;
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 48))(v2, 1, v23)) {
        char canToggle = UITextFormattingViewController.FormattingDescriptor._canToggleBold.getter();
      }
      sub_100009ED4((uint64_t)v2, &qword_1000A8FF8);
      return canToggle & 1;
    }
LABEL_26:
    char canToggle = 0;
    return canToggle & 1;
  }
LABEL_18:
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if (!result) {
    goto LABEL_19;
  }
LABEL_12:
  if ((v4 & 0xC000000000000001) != 0)
  {
    id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_15;
  }
  if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v16 = *(id *)(v4 + 32);
LABEL_15:
    id v17 = v16;
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t sub_10002BCC0()
{
  unint64_t v0 = (unint64_t)sub_100027DD8();
  unint64_t v1 = v0;
  if (v0 >> 62) {
    goto LABEL_12;
  }
  uint64_t v2 = *(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v3 = 4;
    while (1)
    {
      id v4 = (v1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(v1 + 8 * v3);
      id v5 = v4;
      uint64_t v6 = v3 - 3;
      if (__OFADD__(v3 - 4, 1)) {
        break;
      }
      id v7 = [v4 fontDescriptor];
      unsigned __int8 v8 = [v7 symbolicTraits];

      uint64_t v9 = v8 & 1;
      if ((v8 & 1) == 0)
      {
        ++v3;
        if (v6 != v2) {
          continue;
        }
      }
      goto LABEL_14;
    }
    __break(1u);
LABEL_12:
    swift_bridgeObjectRetain();
  }
  uint64_t v9 = 0;
LABEL_14:
  swift_bridgeObjectRelease_n();
  return v9;
}

uint64_t sub_10002BDDC(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UITextFormattingViewController.ChangeValue();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v8 = (unint64_t)sub_100027DD8();
  unint64_t v9 = v8;
  unint64_t v10 = v8 >> 62;
  if (a1)
  {
    if (v10)
    {
      if (_CocoaArrayWrapper.endIndex.getter()) {
        goto LABEL_4;
      }
    }
    else if (*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_4:
      if ((v9 & 0xC000000000000001) != 0)
      {
        id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        goto LABEL_7;
      }
      if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        id v11 = *(id *)(v9 + 32);
LABEL_7:
        id v12 = v11;
        swift_bridgeObjectRelease();
        goto LABEL_16;
      }
      __break(1u);
      goto LABEL_40;
    }
    swift_bridgeObjectRelease();
    uint64_t v15 = self;
    [v15 systemFontSize];
    id v12 = [v15 systemFontOfSize:];
LABEL_16:
    id v16 = [v12 fontDescriptor];
    unsigned __int8 v17 = [v16 symbolicTraits];

    if (v17) {
      goto LABEL_17;
    }
    goto LABEL_26;
  }
  if (v10)
  {
    if (_CocoaArrayWrapper.endIndex.getter())
    {
LABEL_10:
      if ((v9 & 0xC000000000000001) == 0)
      {
        if (!*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_42;
        }
        id v13 = *(id *)(v9 + 32);
        goto LABEL_13;
      }
LABEL_40:
      id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_13:
      id v14 = v13;
      swift_bridgeObjectRelease();
      goto LABEL_25;
    }
  }
  else if (*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  unint64_t v22 = self;
  [v22 systemFontSize];
  id v14 = [v22 systemFontOfSize:];
LABEL_25:
  id v23 = [v14 fontDescriptor];
  unsigned __int8 v24 = [v23 symbolicTraits];

  if ((v24 & 1) == 0)
  {
LABEL_17:
    unint64_t v18 = (unint64_t)sub_100027DD8();
    unint64_t v19 = v18;
    if (v18 >> 62)
    {
      if (_CocoaArrayWrapper.endIndex.getter())
      {
LABEL_19:
        if ((v19 & 0xC000000000000001) == 0)
        {
          if (*(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            id v20 = *(id *)(v19 + 32);
LABEL_22:
            id v21 = v20;
            swift_bridgeObjectRelease();
LABEL_37:
            uint64_t v32 = *(void (**)(unsigned char *, unint64_t))(v2
                                                                   + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_didChangeValue);
            unsigned char *v7 = a1 & 1;
            (*(void (**)(unsigned char *, void, uint64_t))(v5 + 104))(v7, enum case for UITextFormattingViewController.ChangeValue.italic(_:), v4);
            sub_10000435C(&qword_1000AAAA0);
            uint64_t inited = swift_initStackObject();
            *(_OWORD *)(inited + 16) = xmmword_1000843C0;
            *(void *)(inited + 32) = NSFontAttributeName;
            *(void *)(inited + 64) = sub_10000A3AC(0, &qword_1000A8FE8);
            *(void *)(inited + 40) = v21;
            swift_retain();
            uint64_t v34 = NSFontAttributeName;
            id v35 = v21;
            unint64_t v36 = sub_10002B1D4(inited);
            v32(v7, v36);

            swift_release();
            swift_bridgeObjectRelease();
            return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
          }
          __break(1u);
          goto LABEL_44;
        }
LABEL_42:
        id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        goto LABEL_22;
      }
    }
    else if (*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_19;
    }
    swift_bridgeObjectRelease();
    uint64_t v30 = self;
    [v30 systemFontSize];
    id v21 = [v30 systemFontOfSize:];
    goto LABEL_37;
  }
LABEL_26:
  unint64_t v25 = (unint64_t)sub_100027DD8();
  unint64_t v26 = v25;
  if (!(v25 >> 62))
  {
    uint64_t result = *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (result) {
      goto LABEL_28;
    }
LABEL_35:
    swift_bridgeObjectRelease();
    uint64_t v31 = self;
    [v31 systemFontSize];
    id v29 = [v31 systemFontOfSize:];
    goto LABEL_36;
  }
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if (!result) {
    goto LABEL_35;
  }
LABEL_28:
  if ((v26 & 0xC000000000000001) != 0)
  {
LABEL_44:
    id v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_31;
  }
  if (*(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v28 = *(id *)(v26 + 32);
LABEL_31:
    id v29 = v28;
    swift_bridgeObjectRelease();
LABEL_36:
    id v21 = sub_100076820(1);

    goto LABEL_37;
  }
  __break(1u);
  return result;
}

uint64_t sub_10002C2D4()
{
  uint64_t v0 = sub_10000435C(&qword_1000A8FF8);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v25 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v3 = (unint64_t)sub_100027DD8();
  unint64_t v4 = v3;
  if (v3 >> 62)
  {
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_3;
    }
LABEL_8:
    swift_bridgeObjectRelease();
    id v7 = self;
    [v7 systemFontSize];
    id v6 = [v7 systemFontOfSize:];
    goto LABEL_9;
  }
  if (!*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_8;
  }
LABEL_3:
  if ((v4 & 0xC000000000000001) != 0)
  {
    id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_18;
    }
    id v5 = *(id *)(v4 + 32);
  }
  id v6 = v5;
  swift_bridgeObjectRelease();
LABEL_9:
  id v8 = [v6 fontDescriptor];
  unsigned __int8 v9 = [v8 symbolicTraits];

  BOOL v10 = (v9 & 1) == 0;
  id v11 = sub_100076820(1);
  id v12 = [v11 fontDescriptor];
  unsigned int v13 = [v12 symbolicTraits];

  if ((v10 ^ v13)) {
    goto LABEL_26;
  }
  unint64_t v14 = (unint64_t)sub_100027DD8();
  unint64_t v4 = v14;
  if (!(v14 >> 62))
  {
    uint64_t result = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (result) {
      goto LABEL_12;
    }
LABEL_19:
    swift_bridgeObjectRelease();
    unint64_t v18 = self;
    [v18 systemFontSize];
    id v17 = [v18 systemFontOfSize:];
LABEL_20:
    NSString v19 = [v17 familyName];
    if (!v19)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v19 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    id v20 = [self fontNamesForFamilyName:v19];

    uint64_t v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v22 = *(void *)(v21 + 16);

    swift_bridgeObjectRelease();
    if (v22 >= 2)
    {
      swift_getKeyPath();
      swift_getKeyPath();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      uint64_t v23 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor();
      char canToggle = 1;
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 48))(v2, 1, v23)) {
        char canToggle = UITextFormattingViewController.FormattingDescriptor._canToggleItalic.getter();
      }
      sub_100009ED4((uint64_t)v2, &qword_1000A8FF8);
      return canToggle & 1;
    }
LABEL_26:
    char canToggle = 0;
    return canToggle & 1;
  }
LABEL_18:
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if (!result) {
    goto LABEL_19;
  }
LABEL_12:
  if ((v4 & 0xC000000000000001) != 0)
  {
    id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_15;
  }
  if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v16 = *(id *)(v4 + 32);
LABEL_15:
    id v17 = v16;
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t sub_10002C678()
{
  return sub_10002C6BC((uint64_t (*)(void))&UITextFormattingViewController.FormattingDescriptor.underlinePresent.getter);
}

uint64_t sub_10002C690(char a1)
{
  return sub_10002C7FC(a1, &enum case for UITextFormattingViewController.ChangeValue.underline(_:), (void **)&NSUnderlineStyleAttributeName);
}

uint64_t sub_10002C6A4()
{
  return sub_10002C6BC((uint64_t (*)(void))&UITextFormattingViewController.FormattingDescriptor.strikethroughPresent.getter);
}

uint64_t sub_10002C6BC(uint64_t (*a1)(void))
{
  uint64_t v2 = sub_10000435C(&qword_1000A8FF8);
  __chkstk_darwin(v2 - 8);
  unint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v5 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5)) {
    char v6 = 0;
  }
  else {
    char v6 = a1();
  }
  sub_100009ED4((uint64_t)v4, &qword_1000A8FF8);
  return v6 & 1;
}

uint64_t sub_10002C7E8(char a1)
{
  return sub_10002C7FC(a1, &enum case for UITextFormattingViewController.ChangeValue.strikethrough(_:), (void **)&NSStrikethroughStyleAttributeName);
}

uint64_t sub_10002C7FC(char a1, unsigned int *a2, void **a3)
{
  uint64_t v7 = type metadata accessor for UITextFormattingViewController.ChangeValue();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  BOOL v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = *(void (**)(unsigned char *, unint64_t))(v3
                                                         + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_didChangeValue);
  *BOOL v10 = a1;
  (*(void (**)(unsigned char *, void, uint64_t))(v8 + 104))(v10, *a2, v7);
  sub_10000435C(&qword_1000AAAA0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1000843C0;
  unsigned int v13 = *a3;
  *(void *)(inited + 32) = *a3;
  if (a1)
  {
    swift_retain();
    id v14 = v13;
    uint64_t v15 = &type metadata for Int;
    uint64_t v16 = 1;
  }
  else
  {
    id v17 = objc_allocWithZone((Class)NSNull);
    swift_retain();
    id v18 = v13;
    uint64_t v16 = (uint64_t)[v17 init];
    uint64_t v15 = (void *)sub_10000A3AC(0, &qword_1000A96B8);
  }
  *(void *)(inited + 64) = v15;
  *(void *)(inited + 40) = v16;
  unint64_t v19 = sub_10002B1D4(inited);
  v11(v10, v19);
  swift_release();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_10002C9D8()
{
  sub_100027F4C();

  return Color.init(uiColor:)();
}

uint64_t sub_10002CA00()
{
  return sub_10002CF50((id *)&UITextFormattingViewControllerTextAlignmentLeft);
}

uint64_t sub_10002CA0C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UITextFormattingViewController.ChangeValue();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (void **)((char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = sub_10000435C(&qword_1000A8FF8);
  __chkstk_darwin(v8 - 8);
  BOOL v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v11 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor();
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11))
  {
    uint64_t v15 = (void *)UITextFormattingViewController.FormattingDescriptor._paragraphStyle.getter();
    sub_100009ED4((uint64_t)v10, &qword_1000A8FF8);
    if (!v15) {
      goto LABEL_3;
    }
    self;
    uint64_t v16 = swift_dynamicCastObjCClass();
    if (!v16)
    {

      goto LABEL_3;
    }
    id v17 = (void *)v16;
    (*(void (**)(void **, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
    if ((*(unsigned int (**)(void **, uint64_t))(v5 + 88))(v7, v4) != enum case for UITextFormattingViewController.ChangeValue.textAlignment(_:))
    {
      (*(void (**)(void **, uint64_t))(v5 + 8))(v7, v4);
LABEL_21:
      sub_10000435C(&qword_1000AAAA0);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1000843C0;
      *(void *)(inited + 32) = NSParagraphStyleAttributeName;
      *(void *)(inited + 64) = sub_10000A3AC(0, &qword_1000A96F0);
      *(void *)(inited + 40) = v17;
      uint64_t v30 = NSParagraphStyleAttributeName;
      unint64_t v12 = sub_10002B1D4(inited);
      goto LABEL_4;
    }
    (*(void (**)(void **, uint64_t))(v5 + 96))(v7, v4);
    id v18 = *v7;
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v21 = v20;
    if (v19 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v21 == v22)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v24 & 1) == 0)
      {
        uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v27 = v26;
        if (v25 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v27 == v28)
        {
          swift_bridgeObjectRelease_n();
LABEL_23:
          [v17 setAlignment:1];
          goto LABEL_20;
        }
        char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v31) {
          goto LABEL_23;
        }
        uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v34 = v33;
        if (v32 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v34 == v35)
        {
          swift_bridgeObjectRelease_n();
LABEL_28:
          [v17 setAlignment:2];
          goto LABEL_20;
        }
        char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v36) {
          goto LABEL_28;
        }
        uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v39 = v38;
        if (v37 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v39 == v40)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          char v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v41 & 1) == 0)
          {
            [v17 setAlignment:4];
            goto LABEL_20;
          }
        }
        [v17 setAlignment:3];
LABEL_20:

        goto LABEL_21;
      }
    }
    [v17 setAlignment:0];
    goto LABEL_20;
  }
  sub_100009ED4((uint64_t)v10, &qword_1000A8FF8);
LABEL_3:
  unint64_t v12 = 0;
LABEL_4:
  unsigned int v13 = *(void (**)(uint64_t, unint64_t))(v2
                                                         + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_didChangeValue);
  swift_retain();
  v13(a1, v12);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10002CF44()
{
  return sub_10002CF50((id *)&UITextFormattingViewControllerTextAlignmentCenter);
}

uint64_t sub_10002CF50(id *a1)
{
  uint64_t v2 = sub_10000435C(&qword_1000A8FF8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v5 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
  {
    sub_100009ED4((uint64_t)v4, &qword_1000A8FF8);
    char v6 = 0;
  }
  else
  {
    UITextFormattingViewController.FormattingDescriptor.textAlignments.getter();
    sub_100009ED4((uint64_t)v4, &qword_1000A8FF8);
    id v7 = *a1;
    char v6 = sub_1000125B8();

    swift_bridgeObjectRelease();
  }
  return v6 & 1;
}

uint64_t sub_10002D0AC()
{
  return sub_10002CF50((id *)&UITextFormattingViewControllerTextAlignmentRight);
}

uint64_t sub_10002D0B8()
{
  return sub_10002CF50((id *)&UITextFormattingViewControllerTextAlignmentJustified);
}

void *sub_10002D0C4()
{
  uint64_t v0 = sub_10000435C(&qword_1000A8FF8);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v3 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48))(v2, 1, v3))
  {
    sub_100009ED4((uint64_t)v2, &qword_1000A8FF8);
    return _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v5 = UITextFormattingViewController.FormattingDescriptor.textLists.getter();
    sub_100009ED4((uint64_t)v2, &qword_1000A8FF8);
    uint64_t v6 = sub_1000277E4(v5);
    swift_bridgeObjectRelease();
    v7[0] = v6;
    swift_bridgeObjectRetain();
    sub_10003267C(v7);
    swift_bridgeObjectRelease();
    return (void *)v7[0];
  }
}

uint64_t sub_10002D23C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000435C(&qword_1000A8FF8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a1 + 16))
  {
    uint64_t v7 = *(unsigned __int8 *)(a1 + 32);
    swift_bridgeObjectRelease();
    unint64_t v8 = (unint64_t)_swiftEmptyArrayStorage;
    switch(v7)
    {
      case 1:
        uint64_t v9 = &NSTextListMarkerHyphen;
        goto LABEL_6;
      case 2:
        NSString v12 = String._bridgeToObjectiveC()();
        id v10 = [objc_allocWithZone((Class)NSTextList) initWithMarkerFormat:v12 options:0];

        if (!v10) {
          goto LABEL_9;
        }
        goto LABEL_7;
      case 3:
        break;
      default:
        uint64_t v9 = &NSTextListMarkerDisc;
LABEL_6:
        id v10 = [objc_allocWithZone((Class)NSTextList) initWithMarkerFormat:*v9 options:0];
        if (!v10) {
          goto LABEL_9;
        }
LABEL_7:
        sub_10000435C(&qword_1000A8B30);
        uint64_t v11 = swift_allocObject();
        *(_OWORD *)(v11 + 16) = xmmword_100083940;
        *(void *)(v11 + 32) = v10;
        uint64_t v35 = (void *)v11;
        specialized Array._endMutation()();
        unint64_t v8 = (unint64_t)v35;
        break;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    LOBYTE(v7) = 4;
LABEL_9:
    unint64_t v8 = (unint64_t)_swiftEmptyArrayStorage;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v13 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v6, 1, v13))
  {
    sub_100009ED4((uint64_t)v6, &qword_1000A8FF8);
    goto LABEL_12;
  }
  uint64_t v21 = (void *)UITextFormattingViewController.FormattingDescriptor._paragraphStyle.getter();
  sub_100009ED4((uint64_t)v6, &qword_1000A8FF8);
  if (!v21)
  {
LABEL_12:
    if (v8 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v29) {
        goto LABEL_14;
      }
    }
    else if (*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_14:
      id v14 = [self defaultParagraphStyle];
      [v14 mutableCopy];

      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      uint64_t v15 = sub_10000A3AC(0, &qword_1000A96F0);
      if (!swift_dynamicCast())
      {
        swift_bridgeObjectRelease();
        return sub_10002D7AC(0, v7, v2);
      }
      uint64_t v16 = (void *)v34[27];
      sub_10000A3AC(0, &qword_1000A96F8);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v16 setTextLists:isa];

      sub_10000435C(&qword_1000AAAA0);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1000843C0;
      *(void *)(inited + 64) = v15;
      *(void *)(inited + 32) = NSParagraphStyleAttributeName;
      *(void *)(inited + 40) = v16;
      uint64_t v19 = NSParagraphStyleAttributeName;
      id v20 = v16;
      goto LABEL_19;
    }
    swift_bridgeObjectRelease();
    sub_10000435C(&qword_1000AAAA0);
    uint64_t v30 = swift_initStackObject();
    *(_OWORD *)(v30 + 16) = xmmword_1000843C0;
    *(void *)(v30 + 32) = NSParagraphStyleAttributeName;
    *(void *)(v30 + 64) = sub_10000435C(&qword_1000A9700);
    uint64_t v31 = swift_allocObject();
    *(void *)(v30 + 40) = v31;
    *(_OWORD *)(v31 + 16) = 0u;
    *(_OWORD *)(v31 + 32) = 0u;
    uint64_t v32 = NSParagraphStyleAttributeName;
    unint64_t v33 = sub_10002B1D4(v30);
    sub_10002D7AC(v33, v7, v2);
    return swift_bridgeObjectRelease();
  }
  self;
  uint64_t v22 = swift_dynamicCastObjCClass();
  if (!v22)
  {

    goto LABEL_12;
  }
  uint64_t v23 = (void *)v22;
  sub_10000A3AC(0, &qword_1000A96F8);
  Class v24 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v23 setTextLists:v24];

  sub_10000435C(&qword_1000AAAA0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1000843C0;
  *(void *)(inited + 32) = NSParagraphStyleAttributeName;
  *(void *)(inited + 64) = sub_10000A3AC(0, &qword_1000A96F0);
  *(void *)(inited + 40) = v23;
  uint64_t v25 = NSParagraphStyleAttributeName;
  id v20 = v21;
LABEL_19:
  uint64_t v26 = v20;
  unint64_t v27 = sub_10002B1D4(inited);
  sub_10002D7AC(v27, v7, v2);

  return swift_bridgeObjectRelease();
}

uint64_t sub_10002D7AC(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UITextFormattingViewController.ChangeValue();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (void **)((char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  switch(a2)
  {
    case 1:
      id v10 = *(void (**)(void **, uint64_t))(a3
                                                    + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_didChangeValue);
      uint64_t v11 = (void **)&UITextFormattingViewControllerTextListHyphen;
      goto LABEL_6;
    case 2:
      id v10 = *(void (**)(void **, uint64_t))(a3
                                                    + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_didChangeValue);
      uint64_t v11 = (void **)&UITextFormattingViewControllerTextListDecimal;
      goto LABEL_6;
    case 3:
    case 4:
      id v10 = *(void (**)(void **, uint64_t))(a3
                                                    + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_didChangeValue);
      const NSTextListMarkerFormat *v9 = 0;
      (*(void (**)(void **, void, uint64_t))(v7 + 104))(v9, enum case for UITextFormattingViewController.ChangeValue.textList(_:), v6);
      swift_retain();
      goto LABEL_7;
    default:
      id v10 = *(void (**)(void **, uint64_t))(a3
                                                    + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_didChangeValue);
      uint64_t v11 = (void **)&UITextFormattingViewControllerTextListDisc;
LABEL_6:
      NSString v12 = *v11;
      const NSTextListMarkerFormat *v9 = *v11;
      (*(void (**)(void **, void, uint64_t))(v7 + 104))(v9, enum case for UITextFormattingViewController.ChangeValue.textList(_:), v6);
      swift_retain();
      id v13 = v12;
LABEL_7:
      v10(v9, a1);
      swift_release();
      return (*(uint64_t (**)(void **, uint64_t))(v7 + 8))(v9, v6);
  }
}

uint64_t sub_10002D9A8()
{
  uint64_t v0 = sub_10000435C(&qword_1000A8FF8);
  uint64_t v1 = __chkstk_darwin(v0 - 8);
  uint64_t v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v18 - v4;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v6 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor();
  uint64_t v7 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48);
  if (v7(v5, 1, v6))
  {
    sub_100009ED4((uint64_t)v5, &qword_1000A8FF8);
LABEL_3:
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    if (v7(v3, 1, v6))
    {
      sub_100009ED4((uint64_t)v3, &qword_1000A8FF8);
      return 0;
    }
    uint64_t v15 = UITextFormattingViewController.FormattingDescriptor.lineHeight.getter();
    char v17 = v16;
    sub_100009ED4((uint64_t)v3, &qword_1000A8FF8);
    if (v17) {
      return 0;
    }
    else {
      return v15;
    }
  }
  uint64_t v9 = (void *)UITextFormattingViewController.FormattingDescriptor._paragraphStyle.getter();
  sub_100009ED4((uint64_t)v5, &qword_1000A8FF8);
  if (!v9) {
    goto LABEL_3;
  }
  [v9 minimumLineHeight];
  double v11 = v10;
  [v9 maximumLineHeight];
  if (v11 != v12)
  {

    return 0;
  }
  [v9 minimumLineHeight];
  uint64_t v14 = v13;

  return v14;
}

uint64_t sub_10002DC04(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UITextFormattingViewController.ChangeValue();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (uint64_t *)((char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = sub_10000435C(&qword_1000A8FF8);
  uint64_t result = __chkstk_darwin(v10 - 8);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) == 0)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v14 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v13, 1, v14))
    {
      sub_100009ED4((uint64_t)v13, &qword_1000A8FF8);
    }
    else
    {
      uint64_t v22 = (void *)UITextFormattingViewController.FormattingDescriptor._paragraphStyle.getter();
      sub_100009ED4((uint64_t)v13, &qword_1000A8FF8);
      if (v22)
      {
        self;
        uint64_t v23 = (void *)swift_dynamicCastObjCClass();
        if (v23)
        {
          Class v24 = v23;
          [v23 setMinimumLineHeight:*(double *)&a1];
          [v24 setMaximumLineHeight:*(double *)&a1];
          sub_10000435C(&qword_1000AAAA0);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_1000843C0;
          *(void *)(inited + 32) = NSParagraphStyleAttributeName;
          *(void *)(inited + 64) = sub_10000A3AC(0, &qword_1000A96F0);
          *(void *)(inited + 40) = v24;
          uint64_t v25 = NSParagraphStyleAttributeName;
          id v20 = v22;
LABEL_10:
          uint64_t v26 = v20;
          unint64_t v27 = sub_10002B1D4(inited);
          uint64_t v28 = *(void (**)(void *, unint64_t))(v3
                                                                  + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_didChangeValue);
          void *v9 = a1;
          (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, enum case for UITextFormattingViewController.ChangeValue.lineHeightPointSize(_:), v6);
          swift_retain();
          v28(v9, v27);
          swift_release();
          (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);

          return swift_bridgeObjectRelease();
        }
      }
    }
    id v15 = [self defaultParagraphStyle];
    [v15 mutableCopy];

    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    uint64_t v16 = sub_10000A3AC(0, &qword_1000A96F0);
    if (!swift_dynamicCast())
    {
      uint64_t v21 = *(void (**)(void *, void))(v3
                                                    + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_didChangeValue);
      void *v9 = a1;
      (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, enum case for UITextFormattingViewController.ChangeValue.lineHeightPointSize(_:), v6);
      swift_retain();
      v21(v9, 0);
      swift_release();
      return (*(uint64_t (**)(void *, uint64_t))(v7 + 8))(v9, v6);
    }
    id v17 = v30;
    [v30 setMinimumLineHeight:*(double *)&a1];
    [v17 setMaximumLineHeight:*(double *)&a1];
    sub_10000435C(&qword_1000AAAA0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1000843C0;
    *(void *)(inited + 64) = v16;
    *(void *)(inited + 32) = NSParagraphStyleAttributeName;
    *(void *)(inited + 40) = v17;
    uint64_t v19 = NSParagraphStyleAttributeName;
    id v20 = v17;
    goto LABEL_10;
  }
  return result;
}

void *sub_10002E084()
{
  uint64_t v0 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000435C(&qword_1000A8FF8);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)v20 - v8;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48);
  if (v10(v9, 1, v0))
  {
    sub_100009ED4((uint64_t)v9, &qword_1000A8FF8);
  }
  else
  {
    uint64_t v13 = UITextFormattingViewController.FormattingDescriptor._emphasisStyleKey.getter();
    uint64_t v15 = v14;
    sub_100009ED4((uint64_t)v9, &qword_1000A8FF8);
    if (v15)
    {
      swift_bridgeObjectRetain();
      unint64_t v16 = swift_bridgeObjectRetain();
      id v17 = sub_100034CF8(v16, v13, v15);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      if (!v17) {
        return _swiftEmptyArrayStorage;
      }
      sub_10000435C(&qword_1000A8B30);
      uint64_t v18 = swift_allocObject();
      *(_OWORD *)(v18 + 16) = xmmword_100083940;
      *(void *)(v18 + 32) = v17;
      v20[0] = v18;
      specialized Array._endMutation()();
      return (void *)v20[0];
    }
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if (v10(v7, 1, v0) == 1)
  {
    sub_100009ED4((uint64_t)v7, &qword_1000A8FF8);
    return _swiftEmptyArrayStorage;
  }
  (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v3, v7, v0);
  uint64_t v11 = *(void *)(UITextFormattingViewController.FormattingDescriptor.highlights.getter() + 16);
  swift_bridgeObjectRelease();
  if (!v11)
  {
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    return _swiftEmptyArrayStorage;
  }
  UITextFormattingViewController.FormattingDescriptor.highlights.getter();
  uint64_t v12 = sub_100034868();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v12;
}

uint64_t sub_10002E3D0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UITextFormattingViewController.ChangeValue();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v1 = a1;
    }
    else {
      uint64_t v1 = a1 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    if (v8) {
      goto LABEL_3;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    uint64_t v10 = 0;
    goto LABEL_12;
  }
  uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v8) {
    goto LABEL_11;
  }
LABEL_3:
  if ((a1 & 0xC000000000000001) != 0)
  {
    id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_28;
    }
    id v9 = *(id *)(a1 + 32);
  }
  uint64_t v10 = v9;
  swift_bridgeObjectRelease();
LABEL_12:
  if (qword_1000A8250 != -1)
  {
    swift_once();
    if (v10) {
      goto LABEL_14;
    }
LABEL_18:
    if (v8) {
      goto LABEL_30;
    }
    goto LABEL_19;
  }
  if (!v10) {
    goto LABEL_18;
  }
LABEL_14:
  uint64_t v11 = (void *)qword_1000AB618;
  sub_10000A3AC(0, (unint64_t *)&unk_1000A8930);
  id v12 = v11;
  id v13 = v10;
  char v14 = static NSObject.== infix(_:_:)();

  if (v8 && (v14 & 1) == 0) {
    goto LABEL_30;
  }
LABEL_19:
  unint64_t v15 = (unint64_t)sub_10002E084();
  uint64_t v1 = v15;
  if (!(v15 >> 62))
  {
    uint64_t result = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (result) {
      goto LABEL_21;
    }
LABEL_29:
    swift_bridgeObjectRelease();
    if (!v8)
    {
      id v25 = 0;
LABEL_33:
      sub_100034EA0(v25);
      if (v8) {
        goto LABEL_34;
      }
LABEL_25:
      swift_bridgeObjectRelease();
      Class v24 = 0;
LABEL_38:
      sub_10000A3AC(0, (unint64_t *)&unk_1000A8930);
      sub_10002E800(v24, v7);

      unint64_t v27 = *(void (**)(uint64_t *, void))(v2
                                                     + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_didChangeValue);
      swift_retain();
      v27(v7, 0);
      swift_release();
      return (*(uint64_t (**)(uint64_t *, uint64_t))(v5 + 8))(v7, v4);
    }
LABEL_30:
    if ((a1 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      id v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
LABEL_42:
        id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_37:
        Class v24 = v26;
        swift_bridgeObjectRelease();
        goto LABEL_38;
      }
      id v25 = *(id *)(a1 + 32);
    }
    goto LABEL_33;
  }
LABEL_28:
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if (!result) {
    goto LABEL_29;
  }
LABEL_21:
  if ((v1 & 0xC000000000000001) != 0) {
    goto LABEL_44;
  }
  if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    for (id i = *(id *)(v1 + 32); ; id i = (id)specialized _ArrayBuffer._getElementSlowPath(_:)())
    {
      uint64_t v18 = i;
      swift_bridgeObjectRelease();
      id v19 = v18;
      id v20 = [v19 styleKey];
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      id v21 = [self standardUserDefaults];
      NSString v22 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      NSString v23 = String._bridgeToObjectiveC()();
      [v21 setObject:v22 forKey:v23];

      if (!v8) {
        break;
      }
LABEL_34:
      if ((a1 & 0xC000000000000001) != 0) {
        goto LABEL_42;
      }
      if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        id v26 = *(id *)(a1 + 32);
        goto LABEL_37;
      }
      __break(1u);
LABEL_44:
      ;
    }
    goto LABEL_25;
  }
  __break(1u);
  return result;
}

uint64_t sub_10002E800@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  if (!a1)
  {
    *a2 = 0;
    a2[1] = 0;
    uint64_t v15 = enum case for UITextFormattingViewController.ChangeValue.emphasisStyle(_:);
    goto LABEL_15;
  }
  id v3 = a1;
  id v4 = [v3 styleKey];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  v5._object = (void *)0x8000000100087FA0;
  v5._countAndFlagsBits = 0xD00000000000001FLL;
  Swift::Bool v6 = String.hasPrefix(_:)(v5);
  swift_bridgeObjectRelease();
  id v7 = [v3 styleKey];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  if (v6)
  {
    if (qword_1000A8258 != -1) {
      swift_once();
    }
    id v11 = [(id)qword_1000AB620 styleKey];
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v14 = v13;

    if (v12 == v8 && v14 == v10)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v17 & 1) == 0)
      {
        if (qword_1000A8260 != -1) {
          swift_once();
        }
        id v23 = [(id)qword_1000AB628 styleKey];
        uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v26 = v25;

        if (v24 == v8 && v26 == v10)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v27 & 1) == 0)
          {
            if (qword_1000A8268 != -1) {
              swift_once();
            }
            id v28 = [(id)qword_1000AB630 styleKey];
            uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v31 = v30;

            if (v29 == v8 && v31 == v10)
            {
              swift_bridgeObjectRelease();
            }
            else
            {
              char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if ((v32 & 1) == 0)
              {
                if (qword_1000A8270 != -1) {
                  swift_once();
                }
                id v33 = [(id)qword_1000AB638 styleKey];
                uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                uint64_t v36 = v35;

                if (v34 == v8 && v36 == v10)
                {
                  swift_bridgeObjectRelease();
                }
                else
                {
                  char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  if ((v37 & 1) == 0)
                  {
                    if (qword_1000A8278 != -1) {
                      swift_once();
                    }
                    id v38 = [(id)qword_1000AB640 styleKey];
                    uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                    uint64_t v41 = v40;

                    if (v39 == v8 && v41 == v10)
                    {
                      swift_bridgeObjectRelease();
                    }
                    else
                    {
                      char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
                      swift_bridgeObjectRelease();
                      if ((v42 & 1) == 0)
                      {
                        if (qword_1000A8280 != -1) {
                          swift_once();
                        }
                        id v43 = [(id)qword_1000AB648 styleKey];
                        uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                        uint64_t v46 = v45;

                        if (v44 == v8 && v46 == v10)
                        {
                          swift_bridgeObjectRelease_n();
                        }
                        else
                        {
                          char v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          if ((v47 & 1) == 0)
                          {

                            *a2 = 0;
                            goto LABEL_13;
                          }
                        }
                        uint64_t v18 = (id *)&UITextFormattingViewControllerHighlightBlue;
LABEL_12:
                        id v19 = *v18;

                        *a2 = (uint64_t)v19;
LABEL_13:
                        unint64_t v16 = (unsigned int *)&enum case for UITextFormattingViewController.ChangeValue.highlight(_:);
                        goto LABEL_14;
                      }
                    }
                    swift_bridgeObjectRelease();
                    uint64_t v18 = (id *)&UITextFormattingViewControllerHighlightMint;
                    goto LABEL_12;
                  }
                }
                swift_bridgeObjectRelease();
                uint64_t v18 = (id *)&UITextFormattingViewControllerHighlightOrange;
                goto LABEL_12;
              }
            }
            swift_bridgeObjectRelease();
            uint64_t v18 = (id *)&UITextFormattingViewControllerHighlightPink;
            goto LABEL_12;
          }
        }
        swift_bridgeObjectRelease();
        uint64_t v18 = (id *)&UITextFormattingViewControllerHighlightPurple;
        goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v18 = (id *)&UITextFormattingViewControllerHighlightDefault;
    goto LABEL_12;
  }

  *a2 = v8;
  a2[1] = v10;
  unint64_t v16 = (unsigned int *)&enum case for UITextFormattingViewController.ChangeValue.emphasisStyle(_:);
LABEL_14:
  uint64_t v15 = *v16;
LABEL_15:
  uint64_t v20 = type metadata accessor for UITextFormattingViewController.ChangeValue();
  id v21 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 104);

  return v21(a2, v15, v20);
}

uint64_t sub_10002ED9C()
{
  id v1 = [self standardUserDefaults];
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 stringForKey:v2];

  if (v3)
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;

    swift_bridgeObjectRetain();
    unint64_t v7 = swift_bridgeObjectRetain();
    uint64_t v8 = sub_100034CF8(v7, v4, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    if (v8) {
      return (uint64_t)v8;
    }
  }
  unint64_t v9 = *(void *)(v0 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_allHighlightStyles);
  if (!(v9 >> 62))
  {
    uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v10) {
      goto LABEL_5;
    }
LABEL_10:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if (!result) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v9 & 0xC000000000000001) != 0)
  {
    id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_8;
  }
  if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v12 = *(id *)(v9 + 32);
LABEL_8:
    uint64_t v8 = v12;
    swift_bridgeObjectRelease();
    return (uint64_t)v8;
  }
  __break(1u);
  return result;
}

id sub_10002EF34()
{
  unint64_t v0 = (unint64_t)sub_10002E084();
  unint64_t v1 = v0;
  if (v0 >> 62)
  {
    id result = (id)_CocoaArrayWrapper.endIndex.getter();
    if (result) {
      goto LABEL_3;
    }
  }
  else
  {
    id result = *(id *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (result)
    {
LABEL_3:
      if ((v1 & 0xC000000000000001) != 0)
      {
        id v3 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return result;
        }
        id v3 = *(id *)(v1 + 32);
      }
      uint64_t v4 = v3;
      swift_bridgeObjectRelease();
      goto LABEL_10;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v5 = sub_10002ED9C();
  if (v5)
  {
    uint64_t v4 = (void *)v5;
LABEL_10:
    id v6 = [v4 color];

    if (v6) {
      return v6;
    }
  }
  id v7 = [self secondaryLabelColor];

  return v7;
}

uint64_t sub_10002F034(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UITextFormattingViewController.ChangeValue();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = &v35[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  uint64_t v10 = &v35[-v9];
  uint64_t v11 = sub_10000435C(&qword_1000A8FF8);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = &v35[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v14 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor();
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v13, 1, v14)
    || (uint64_t v20 = UITextFormattingViewController.FormattingDescriptor._paragraphStyle.getter()) == 0)
  {
    sub_100009ED4((uint64_t)v13, &qword_1000A8FF8);
  }
  else
  {
    id v21 = (void *)v20;
    sub_100009ED4((uint64_t)v13, &qword_1000A8FF8);
    [v21 mutableCopy];

    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_10000A3AC(0, &qword_1000A96F0);
    if (swift_dynamicCast())
    {
      char v17 = v36;
      if (v36)
      {
        unint64_t v16 = v36;
        goto LABEL_13;
      }
    }
  }
  id v15 = [self defaultParagraphStyle];
  [v15 mutableCopy];

  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_10000A3AC(0, &qword_1000A96F0);
  if (swift_dynamicCast())
  {
    unint64_t v16 = v36;
    if (v36)
    {
      char v17 = 0;
LABEL_13:
      id v22 = v17;
      [v16 firstLineHeadIndent];
      if (a1) {
        double v24 = 28.0;
      }
      else {
        double v24 = -28.0;
      }
      double v25 = v24 + v23;
      if (a1) {
        uint64_t v26 = (unsigned int *)&enum case for UITextFormattingViewController.ChangeValue.increaseIndentation(_:);
      }
      else {
        uint64_t v26 = (unsigned int *)&enum case for UITextFormattingViewController.ChangeValue.decreaseIndentation(_:);
      }
      if (v25 <= 0.0) {
        double v25 = 0.0;
      }
      [v16 setFirstLineHeadIndent:v25];
      [v16 headIndent];
      double v28 = v24 + v27;
      if (v28 <= 0.0) {
        double v28 = 0.0;
      }
      [v16 setHeadIndent:v28];
      uint64_t v29 = *(void (**)(unsigned char *, unint64_t))(v2
                                                             + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_didChangeValue);
      (*(void (**)(unsigned char *, void, uint64_t))(v5 + 104))(v10, *v26, v4);
      sub_10000435C(&qword_1000AAAA0);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1000843C0;
      *(void *)(inited + 32) = NSParagraphStyleAttributeName;
      *(void *)(inited + 64) = sub_10000A3AC(0, &qword_1000A96F0);
      *(void *)(inited + 40) = v16;
      swift_retain();
      uint64_t v31 = NSParagraphStyleAttributeName;
      id v32 = v16;
      unint64_t v33 = sub_10002B1D4(inited);
      v29(v10, v33);

      swift_release();
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v10, v4);
    }
  }
  uint64_t v18 = *(void (**)(unsigned char *, void))(v2
                                               + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_didChangeValue);
  id v19 = (unsigned int *)&enum case for UITextFormattingViewController.ChangeValue.decreaseIndentation(_:);
  if (a1) {
    id v19 = (unsigned int *)&enum case for UITextFormattingViewController.ChangeValue.increaseIndentation(_:);
  }
  (*(void (**)(unsigned char *, void, uint64_t))(v5 + 104))(v8, *v19, v4);
  swift_retain();
  v18(v8, 0);
  swift_release();
  uint64_t v10 = v8;
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v10, v4);
}

uint64_t sub_10002F4F8()
{
  return sub_10002F50C();
}

uint64_t sub_10002F50C()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_10002F578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[17] = a4;
  sub_10000435C(&qword_1000A9618);
  v4[18] = swift_task_alloc();
  type metadata accessor for MainActor();
  v4[19] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10002F640, v6, v5);
}

uint64_t sub_10002F640()
{
  uint64_t v1 = *(void *)(v0 + 136);
  swift_release();
  unint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_allHighlightStyles);
  if (v2 >> 62) {
    goto LABEL_16;
  }
  uint64_t v34 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v34; uint64_t v34 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v3 = 0;
    unint64_t v32 = v2;
    unint64_t v33 = v2 & 0xC000000000000001;
    if ((v2 & 0xC000000000000001) != 0)
    {
LABEL_4:
      id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_6;
    }
    while (1)
    {
      id v4 = *(id *)(v2 + 8 * v3 + 32);
LABEL_6:
      uint64_t v5 = v4;
      if (__OFADD__(v3, 1)) {
        break;
      }
      uint64_t v37 = v3 + 1;
      uint64_t v6 = *(void *)(v0 + 144);
      uint64_t v7 = Image.init(systemName:)();
      id v8 = [v5 color];
      uint64_t v9 = Color.init(uiColor:)();
      uint64_t KeyPath = swift_getKeyPath();
      uint64_t v11 = type metadata accessor for Font.Design();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v6, 1, 1, v11);
      uint64_t v12 = static Font.system(size:weight:design:)();
      sub_100009ED4(v6, &qword_1000A9618);
      uint64_t v13 = swift_getKeyPath();
      char v14 = static Edge.Set.all.getter();
      EdgeInsets.init(_all:)();
      *(void *)(v0 + 16) = v7;
      *(void *)(v0 + 24) = KeyPath;
      *(void *)(v0 + 32) = v9;
      *(void *)(v0 + 40) = v13;
      *(void *)(v0 + 48) = v12;
      *(unsigned char *)(v0 + 56) = v14;
      *(void *)(v0 + 64) = v15;
      *(void *)(v0 + 72) = v16;
      *(void *)(v0 + 80) = v17;
      *(void *)(v0 + 88) = v18;
      *(unsigned char *)(v0 + 96) = 0;
      sub_10000435C(&qword_1000A9620);
      swift_allocObject();
      ImageRenderer.init(content:)();
      uint64_t v19 = ImageRenderer.uiImage.getter();
      if (v19)
      {
        uint64_t v20 = (void *)v19;
        if (static Task<>.isCancelled.getter())
        {
          swift_bridgeObjectRelease();

          swift_release();
          goto LABEL_18;
        }
        id v21 = [v5 styleKey];
        uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v23 = v22;

        swift_getKeyPath();
        swift_getKeyPath();
        id v24 = v20;
        double v25 = (void (*)(uint64_t, void))static Published.subscript.modify();
        uint64_t v36 = v5;
        uint64_t v26 = v3;
        double v28 = v27;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v38 = *v28;
        *double v28 = 0x8000000000000000;
        sub_100032FA0((uint64_t)v24, v35, v23, isUniquelyReferenced_nonNull_native);
        *double v28 = v38;
        uint64_t v3 = v26;
        swift_bridgeObjectRelease();
        unint64_t v2 = v32;
        swift_bridgeObjectRelease();
        v25(v0 + 104, 0);
        swift_release();
        swift_release();

        swift_release();
      }
      else
      {
        swift_release();
      }
      if (v37 == v34) {
        goto LABEL_17;
      }
      ++v3;
      if (v33) {
        goto LABEL_4;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
  }
LABEL_17:
  swift_bridgeObjectRelease();
LABEL_18:
  swift_task_dealloc();
  uint64_t v30 = *(uint64_t (**)(void))(v0 + 8);
  return v30();
}

uint64_t sub_10002FA14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_100009ED4(a1, &qword_1000A95F0);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

void sub_10002FBC0(id *a1@<X0>, char a2@<W2>, void *a3@<X8>)
{
  id v4 = [*a1 components];
  sub_10000A3AC(0, &qword_1000A8AD0);
  unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v6 = v5;
  unint64_t v38 = (unint64_t)_swiftEmptyArrayStorage;
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v7) {
      goto LABEL_3;
    }
LABEL_26:
    swift_bridgeObjectRelease();
    unint64_t v29 = (unint64_t)_swiftEmptyArrayStorage;
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0) {
      goto LABEL_30;
    }
    goto LABEL_27;
  }
  uint64_t v7 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v7) {
    goto LABEL_26;
  }
LABEL_3:
  if (v7 < 1)
  {
    __break(1u);
    return;
  }
  uint64_t v34 = a3;
  uint64_t v8 = 0;
  unint64_t v9 = v6 & 0xC000000000000001;
  uint64_t v10 = &selRef_runWithFontNamesForFamilyName_usingBlock_;
  uint64_t v36 = v7;
  do
  {
    unint64_t v12 = v9;
    unint64_t v13 = v6;
    if (v9) {
      id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v14 = *(id *)(v6 + 8 * v8 + 32);
    }
    uint64_t v15 = v14;
    id v16 = [v14 v10[131]];
    swift_beginAccess();
    id v17 = v16;
    char v18 = sub_100016034(&v37, v17);
    swift_endAccess();
    uint64_t v19 = v10;
    uint64_t v20 = v37;

    if ((v18 & 1) == 0)
    {

      uint64_t v10 = v19;
      unint64_t v9 = v12;
      unint64_t v6 = v13;
      goto LABEL_6;
    }
    id v21 = [v15 v19[131]];
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v24 = v23;
    if (v22 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v24 != v25)
    {
      char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v9 = v12;
      if ((v26 & 1) != 0 && (a2 & 1) == 0) {
        goto LABEL_18;
      }
LABEL_19:
      uint64_t v10 = &selRef_runWithFontNamesForFamilyName_usingBlock_;
      id v27 = [v15 componentKey];
      char v28 = sub_10002FF8C();

      unint64_t v6 = v13;
      if ((v28 & 1) != 0 || (self, swift_dynamicCastObjCClass()))
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        unint64_t v6 = v13;
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {
      }
LABEL_6:
      uint64_t v11 = v36;
      goto LABEL_7;
    }

    swift_bridgeObjectRelease_n();
    unint64_t v9 = v12;
    if (a2) {
      goto LABEL_19;
    }
LABEL_18:

    unint64_t v6 = v13;
    uint64_t v11 = v36;
    uint64_t v10 = &selRef_runWithFontNamesForFamilyName_usingBlock_;
LABEL_7:
    ++v8;
  }
  while (v11 != v8);
  swift_bridgeObjectRelease();
  unint64_t v29 = v38;
  a3 = v34;
  if ((v38 & 0x8000000000000000) != 0)
  {
LABEL_30:
    swift_retain();
    uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    if (!v33) {
      goto LABEL_31;
    }
LABEL_29:
    id v30 = objc_allocWithZone((Class)UITextFormattingViewControllerComponentGroup);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_release();
    id v32 = [v30 initWithComponents:isa];

    goto LABEL_32;
  }
LABEL_27:
  if ((v29 & 0x4000000000000000) != 0) {
    goto LABEL_30;
  }
  if (*(void *)(v29 + 16)) {
    goto LABEL_29;
  }
LABEL_31:
  swift_release();
  id v32 = 0;
LABEL_32:
  *a3 = v32;
}

uint64_t sub_10002FF8C()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    goto LABEL_17;
  }
  char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v5 & 1) == 0)
  {
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;
    if (v7 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v9 != v10)
    {
      char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v12) {
        goto LABEL_6;
      }
      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v15 = v14;
      if (v13 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v15 != v16)
      {
        char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v17) {
          goto LABEL_6;
        }
        uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v20 = v19;
        if (v18 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v20 != v21)
        {
          char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v23) {
            goto LABEL_6;
          }
          uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v26 = v25;
          if (v24 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v26 != v27)
          {
            char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v28) {
              goto LABEL_6;
            }
            uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v31 = v30;
            if (v29 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v31 != v32)
            {
              char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (v33) {
                goto LABEL_6;
              }
              uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v36 = v35;
              if (v34 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v36 != v37)
              {
                char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (v38) {
                  goto LABEL_6;
                }
                uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                uint64_t v41 = v40;
                if (v39 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v41 != v42)
                {
                  char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if (v43) {
                    goto LABEL_6;
                  }
                  uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                  uint64_t v46 = v45;
                  if (v44 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v46 != v47)
                  {
                    char v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    if (v48) {
                      goto LABEL_6;
                    }
                    uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                    uint64_t v51 = v50;
                    if (v49 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v51 != v52)
                    {
                      char v53 = _stringCompareWithSmolCheck(_:_:expecting:)();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      if (v53) {
                        goto LABEL_6;
                      }
                      uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                      uint64_t v56 = v55;
                      if (v54 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v56 != v57)
                      {
                        char v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        if (v58) {
                          goto LABEL_6;
                        }
                        uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                        uint64_t v61 = v60;
                        if (v59 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v61 != v62)
                        {
                          char v63 = _stringCompareWithSmolCheck(_:_:expecting:)();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          if (v63) {
                            goto LABEL_6;
                          }
                          uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                          uint64_t v66 = v65;
                          if (v64 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v66 != v67)
                          {
                            char v68 = _stringCompareWithSmolCheck(_:_:expecting:)();
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            if (v68) {
                              goto LABEL_6;
                            }
                            uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                            uint64_t v71 = v70;
                            if (v69 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v71 != v72)
                            {
                              char v73 = _stringCompareWithSmolCheck(_:_:expecting:)();
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                              if (v73) {
                                goto LABEL_6;
                              }
                              uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                              uint64_t v76 = v75;
                              if (v74 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v76 != v77)
                              {
                                char v78 = _stringCompareWithSmolCheck(_:_:expecting:)();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                if (v78) {
                                  goto LABEL_6;
                                }
                                uint64_t v79 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                                uint64_t v81 = v80;
                                if (v79 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v81 == v82) {
                                  char v6 = 1;
                                }
                                else {
                                  char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
                                }
LABEL_18:
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                return v6 & 1;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_17:
    char v6 = 1;
    goto LABEL_18;
  }
LABEL_6:
  char v6 = 1;
  return v6 & 1;
}

uint64_t sub_100030608()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState__groups;
  uint64_t v2 = sub_10000435C(&qword_1000A9640);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState__useLandscapeLayout;
  uint64_t v4 = sub_10000435C(&qword_1000A8768);
  char v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(v3, v4);
  uint64_t v6 = v0 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState__recentFonts;
  uint64_t v7 = sub_10000435C(&qword_1000A8750);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = v0 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState__formattingDescriptor;
  uint64_t v9 = sub_10000435C(&qword_1000A9648);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  uint64_t v10 = v0 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState__formattingStyles;
  uint64_t v11 = sub_10000435C(&qword_1000A9650);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  uint64_t v12 = v0 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState__emphasisStyles;
  uint64_t v13 = sub_10000435C(&qword_1000A9658);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
  v5(v0 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState__isFormattingUITextView, v4);
  uint64_t v14 = v0 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState__disabledComponents;
  uint64_t v15 = sub_10000435C(&qword_1000A9660);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14, v15);
  swift_bridgeObjectRelease();

  uint64_t v16 = v0 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState__layout;
  uint64_t v17 = sub_10000435C(&qword_1000A9668);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
  uint64_t v18 = v0 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState__uiConfig;
  uint64_t v19 = sub_10000435C(&qword_1000A9670);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v18, v19);
  uint64_t v20 = v0 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState__availableWidth;
  uint64_t v21 = sub_10000435C(&qword_1000A8770);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(v20, v21);
  uint64_t v22 = v0 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState__idealHeight;
  uint64_t v23 = sub_10000435C(&qword_1000A9678);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8))(v22, v23);
  v5(v0 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState__hasParentBottomSafeAreaInset, v4);
  swift_bridgeObjectRelease();
  swift_release();
  sub_100022F38(*(void *)(v0 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_close));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v24 = v0 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState__highlightPreviewImages;
  uint64_t v25 = sub_10000435C(&qword_1000A9680);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8))(v24, v25);
  swift_release();
  return v0;
}

uint64_t sub_100030A8C()
{
  sub_100030608();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_100030AE4()
{
  return type metadata accessor for TextFormattingState();
}

uint64_t type metadata accessor for TextFormattingState()
{
  uint64_t result = qword_1000A93F8;
  if (!qword_1000A93F8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100030B38()
{
  sub_100003FE4(319, &qword_1000A9408, &qword_1000A9410);
  if (v0 <= 0x3F)
  {
    sub_100030F90(319, &qword_1000A83D0);
    if (v1 <= 0x3F)
    {
      sub_100003FE4(319, &qword_1000A83A8, &qword_1000A83B0);
      if (v2 <= 0x3F)
      {
        sub_100003FE4(319, &qword_1000A9418, &qword_1000A8FF8);
        if (v3 <= 0x3F)
        {
          sub_100003FE4(319, &qword_1000A9420, &qword_1000A9428);
          if (v4 <= 0x3F)
          {
            sub_100003FE4(319, &qword_1000A9430, &qword_1000A8B90);
            if (v5 <= 0x3F)
            {
              sub_100003FE4(319, &qword_1000A9438, &qword_1000A9440);
              if (v6 <= 0x3F)
              {
                sub_100030F90(319, &qword_1000A9448);
                if (v7 <= 0x3F)
                {
                  sub_100030F90(319, &qword_1000A9450);
                  if (v8 <= 0x3F)
                  {
                    sub_100030F90(319, &qword_1000A83D8);
                    if (v9 <= 0x3F)
                    {
                      sub_100003FE4(319, &qword_1000A9458, &qword_1000A9460);
                      if (v10 <= 0x3F)
                      {
                        sub_100003FE4(319, &qword_1000A9468, (uint64_t *)&unk_1000A9470);
                        if (v11 <= 0x3F) {
                          swift_updateClassMetadata2();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_100030F90(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for Published();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

uint64_t sub_100030FE0@<X0>(void *a1@<X8>)
{
  return sub_100022BE0(a1);
}

uint64_t sub_10003100C@<X0>(void *a1@<X8>)
{
  return sub_100022BE0(a1);
}

uint64_t sub_100031050()
{
  uint64_t v0 = sub_100012938(1, (uint64_t)&off_10009E790);
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  unint64_t v6 = v5;
  if ((v5 & 1) == 0) {
    goto LABEL_2;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  unint64_t v8 = (void *)swift_dynamicCastClass();
  if (!v8)
  {
    swift_unknownObjectRelease();
    unint64_t v8 = _swiftEmptyArrayStorage;
  }
  uint64_t v9 = v8[2];
  swift_release();
  if (__OFSUB__(v6 >> 1, v4))
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v9 != (v6 >> 1) - v4)
  {
LABEL_11:
    swift_unknownObjectRelease();
LABEL_2:
    unint64_t v7 = sub_100015320(v0, v2, v4, v6);
    goto LABEL_9;
  }
  unint64_t v7 = (void *)swift_dynamicCastClass();
  if (!v7)
  {
    swift_unknownObjectRelease();
    unint64_t v7 = _swiftEmptyArrayStorage;
  }
LABEL_9:
  uint64_t result = swift_unknownObjectRelease();
  qword_1000AB600 = (uint64_t)v7;
  return result;
}

uint64_t sub_10003114C(unsigned __int8 *a1, char *a2)
{
  return sub_100027674(*a1, *a2);
}

Swift::Int sub_100031158()
{
  return Hasher._finalize()();
}

uint64_t sub_100031224()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000312D8()
{
  return Hasher._finalize()();
}

unint64_t sub_1000313A0@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100034F94(*a1);
  *a2 = result;
  return result;
}

void sub_1000313D0(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE400000000000000;
  uint64_t v3 = 1668508004;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE600000000000000;
      uint64_t v3 = 0x6E6568707968;
      goto LABEL_3;
    case 2:
      *a1 = 0x6C616D69636564;
      a1[1] = 0xE700000000000000;
      break;
    case 3:
      *a1 = 0x726568746FLL;
      a1[1] = 0xE500000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

void sub_10003145C(void *a1@<X8>)
{
  *a1 = &off_10009E838;
}

BOOL sub_10003146C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

BOOL sub_100031480(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 >= *a1;
}

BOOL sub_100031494(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 >= *a2;
}

BOOL sub_1000314A8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 < *a1;
}

void sub_1000314BC()
{
  sub_10000435C(&qword_1000A96E8);
  uint64_t v0 = swift_allocObject();
  int64_t v1 = j__malloc_size((const void *)v0);
  uint64_t v2 = v1 - 32;
  if (v1 < 32) {
    uint64_t v2 = v1 - 25;
  }
  *(void *)(v0 + 16) = 5;
  *(void *)(v0 + 24) = 2 * (v2 >> 3);
  *(_OWORD *)(v0 + 32) = xmmword_1000843D0;
  *(_OWORD *)(v0 + 48) = xmmword_1000843E0;
  *(void *)(v0 + 64) = 4;
  swift_retain();
  uint64_t v3 = 32;
  while (1)
  {
    uint64_t v4 = *(void *)(v0 + v3);
    sub_10001547C(0, 6, 0);
    double v5 = exp2((double)v4);
    if ((~*(void *)&v5 & 0x7FF0000000000000) == 0) {
      break;
    }
    if (v5 <= -9.22337204e18) {
      goto LABEL_28;
    }
    if (v5 >= 9.22337204e18) {
      goto LABEL_29;
    }
    uint64_t v6 = (uint64_t)v5;
    uint64_t v7 = 7 * (uint64_t)v5;
    if ((unsigned __int128)(7 * (__int128)(uint64_t)v5) >> 64 != v7 >> 63) {
      goto LABEL_30;
    }
    unint64_t v9 = _swiftEmptyArrayStorage[2];
    unint64_t v8 = _swiftEmptyArrayStorage[3];
    unint64_t v10 = v9 + 1;
    if (v9 >= v8 >> 1) {
      sub_10001547C(v8 > 1, v9 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v10;
    *(double *)&_swiftEmptyArrayStorage[v9 + 4] = (double)v7;
    if ((unsigned __int128)(8 * (__int128)v6) >> 64 != (8 * v6) >> 63) {
      goto LABEL_31;
    }
    unint64_t v11 = _swiftEmptyArrayStorage[3];
    int64_t v12 = v9 + 2;
    if (v10 >= v11 >> 1) {
      sub_10001547C(v11 > 1, v12, 1);
    }
    _swiftEmptyArrayStorage[2] = v12;
    *(double *)&_swiftEmptyArrayStorage[v10 + 4] = (double)(8 * v6);
    if ((unsigned __int128)(9 * (__int128)v6) >> 64 != (9 * v6) >> 63) {
      goto LABEL_32;
    }
    unint64_t v14 = _swiftEmptyArrayStorage[2];
    unint64_t v13 = _swiftEmptyArrayStorage[3];
    unint64_t v15 = v14 + 1;
    if (v14 >= v13 >> 1) {
      sub_10001547C(v13 > 1, v14 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v15;
    *(double *)&_swiftEmptyArrayStorage[v14 + 4] = (double)(9 * v6);
    if ((unsigned __int128)(10 * (__int128)v6) >> 64 != (10 * v6) >> 63) {
      goto LABEL_33;
    }
    unint64_t v16 = _swiftEmptyArrayStorage[3];
    int64_t v17 = v14 + 2;
    if (v15 >= v16 >> 1) {
      sub_10001547C(v16 > 1, v17, 1);
    }
    _swiftEmptyArrayStorage[2] = v17;
    *(double *)&_swiftEmptyArrayStorage[v15 + 4] = (double)(10 * v6);
    if ((unsigned __int128)(11 * (__int128)v6) >> 64 != (11 * v6) >> 63) {
      goto LABEL_34;
    }
    unint64_t v19 = _swiftEmptyArrayStorage[2];
    unint64_t v18 = _swiftEmptyArrayStorage[3];
    unint64_t v20 = v19 + 1;
    if (v19 >= v18 >> 1) {
      sub_10001547C(v18 > 1, v19 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v20;
    *(double *)&_swiftEmptyArrayStorage[v19 + 4] = (double)(11 * v6);
    if ((unsigned __int128)(12 * (__int128)v6) >> 64 != (12 * v6) >> 63) {
      goto LABEL_35;
    }
    unint64_t v21 = _swiftEmptyArrayStorage[3];
    int64_t v22 = v19 + 2;
    if (v20 >= v21 >> 1) {
      sub_10001547C(v21 > 1, v22, 1);
    }
    _swiftEmptyArrayStorage[2] = v22;
    *(double *)&_swiftEmptyArrayStorage[v20 + 4] = (double)(12 * v6);
    sub_10001BD54((uint64_t)_swiftEmptyArrayStorage);
    v3 += 8;
    if (v3 == 72)
    {
      swift_release_n();
      qword_1000AB608 = (uint64_t)_swiftEmptyArrayStorage;
      return;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
}

uint64_t sub_100031844()
{
  if (qword_1000A8238 != -1) {
    swift_once();
  }
  qword_1000AB610 = qword_1000AB608;

  return swift_bridgeObjectRetain();
}

id sub_1000318A8()
{
  uint64_t v0 = type metadata accessor for Locale();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v4 = [objc_allocWithZone((Class)NSNumberFormatter) init];
  [v4 setNumberStyle:1];
  static Locale.current.getter();
  Class isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  [v4 setLocale:isa];

  id result = [v4 setMaximumFractionDigits:0];
  qword_1000A9330 = (uint64_t)v4;
  return result;
}

void sub_1000319D8()
{
  if (qword_1000A81C8 != -1) {
    swift_once();
  }
  uint64_t v0 = self;
  swift_bridgeObjectRetain();
  id v1 = [v0 secondaryLabelColor];
  id v2 = objc_allocWithZone((Class)_UITextFormattingViewControllerEmphasisStyle);
  NSString v3 = String._bridgeToObjectiveC()();
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v5 = [v2 initWithStyleKey:v3 title:v4 color:v1];

  qword_1000AB618 = (uint64_t)v5;
}

void sub_100031AF0()
{
  if (qword_1000A81C8 != -1) {
    swift_once();
  }
  uint64_t v0 = self;
  swift_bridgeObjectRetain();
  id v1 = [v0 systemPurpleColor];
  id v2 = objc_allocWithZone((Class)_UITextFormattingViewControllerEmphasisStyle);
  NSString v3 = String._bridgeToObjectiveC()();
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v5 = [v2 initWithStyleKey:v3 title:v4 color:v1];

  qword_1000AB620 = (uint64_t)v5;
}

void sub_100031C08()
{
  if (qword_1000A81C8 != -1) {
    swift_once();
  }
  uint64_t v0 = self;
  swift_bridgeObjectRetain();
  id v1 = [v0 systemPurpleColor];
  id v2 = objc_allocWithZone((Class)_UITextFormattingViewControllerEmphasisStyle);
  NSString v3 = String._bridgeToObjectiveC()();
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v5 = [v2 initWithStyleKey:v3 title:v4 color:v1];

  qword_1000AB628 = (uint64_t)v5;
}

void sub_100031D20()
{
  if (qword_1000A81D0 != -1) {
    swift_once();
  }
  uint64_t v0 = self;
  swift_bridgeObjectRetain();
  id v1 = [v0 systemPinkColor];
  id v2 = objc_allocWithZone((Class)_UITextFormattingViewControllerEmphasisStyle);
  NSString v3 = String._bridgeToObjectiveC()();
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v5 = [v2 initWithStyleKey:v3 title:v4 color:v1];

  qword_1000AB630 = (uint64_t)v5;
}

void sub_100031E38()
{
  if (qword_1000A81D8 != -1) {
    swift_once();
  }
  uint64_t v0 = self;
  swift_bridgeObjectRetain();
  id v1 = [v0 systemOrangeColor];
  id v2 = objc_allocWithZone((Class)_UITextFormattingViewControllerEmphasisStyle);
  NSString v3 = String._bridgeToObjectiveC()();
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v5 = [v2 initWithStyleKey:v3 title:v4 color:v1];

  qword_1000AB638 = (uint64_t)v5;
}

void sub_100031F50()
{
  if (qword_1000A81E0 != -1) {
    swift_once();
  }
  uint64_t v0 = self;
  swift_bridgeObjectRetain();
  id v1 = [v0 systemMintColor];
  id v2 = objc_allocWithZone((Class)_UITextFormattingViewControllerEmphasisStyle);
  NSString v3 = String._bridgeToObjectiveC()();
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v5 = [v2 initWithStyleKey:v3 title:v4 color:v1];

  qword_1000AB640 = (uint64_t)v5;
}

void sub_100032068()
{
  if (qword_1000A81E8 != -1) {
    swift_once();
  }
  uint64_t v0 = self;
  swift_bridgeObjectRetain();
  id v1 = [v0 systemBlueColor];
  id v2 = objc_allocWithZone((Class)_UITextFormattingViewControllerEmphasisStyle);
  NSString v3 = String._bridgeToObjectiveC()();
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v5 = [v2 initWithStyleKey:v3 title:v4 color:v1];

  qword_1000AB648 = (uint64_t)v5;
}

id sub_100032180()
{
  sub_10000435C(&qword_1000A8B30);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1000843F0;
  if (qword_1000A8260 != -1) {
    swift_once();
  }
  id v1 = (void *)qword_1000AB628;
  *(void *)(v0 + 32) = qword_1000AB628;
  uint64_t v2 = qword_1000A8268;
  id v3 = v1;
  if (v2 != -1) {
    swift_once();
  }
  NSString v4 = (void *)qword_1000AB630;
  *(void *)(v0 + 40) = qword_1000AB630;
  uint64_t v5 = qword_1000A8270;
  id v6 = v4;
  if (v5 != -1) {
    swift_once();
  }
  uint64_t v7 = (void *)qword_1000AB638;
  *(void *)(v0 + 48) = qword_1000AB638;
  uint64_t v8 = qword_1000A8278;
  id v9 = v7;
  if (v8 != -1) {
    swift_once();
  }
  unint64_t v10 = (void *)qword_1000AB640;
  *(void *)(v0 + 56) = qword_1000AB640;
  uint64_t v11 = qword_1000A8280;
  id v12 = v10;
  if (v11 != -1) {
    swift_once();
  }
  unint64_t v14 = (void *)qword_1000AB648;
  *(void *)(v0 + 64) = qword_1000AB648;
  specialized Array._endMutation()();
  qword_1000AB650 = v0;

  return v14;
}

uint64_t sub_100032330@<X0>(void *a1@<X8>)
{
  return sub_100022BE0(a1);
}

uint64_t sub_100032344()
{
  return sub_100032380();
}

uint64_t sub_100032358@<X0>(void *a1@<X8>)
{
  return sub_100022BE0(a1);
}

uint64_t sub_10003236C()
{
  return sub_100032380();
}

uint64_t sub_100032380()
{
  return static Published.subscript.setter();
}

uint64_t sub_1000323F8(uint64_t a1, int *a2)
{
  id v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  NSString v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = sub_1000324D4;
  return v6(a1);
}

uint64_t sub_1000324D4()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1000325CC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000325F8()
{
  return EnvironmentValues.foregroundColor.setter();
}

uint64_t sub_100032624@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100032650()
{
  return EnvironmentValues.font.setter();
}

Swift::Int sub_10003267C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10001C690(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = sub_1000326E8(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_1000326E8(void *a1)
{
  uint64_t v2 = a1;
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_137;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v78 = 0;
      uint64_t v79 = *v2;
      for (uint64_t i = 1; i != v3; ++i)
      {
        unsigned int v81 = *(unsigned __int8 *)(v79 + i);
        uint64_t v82 = v78;
        do
        {
          unsigned int v83 = *(unsigned __int8 *)(v79 + v82);
          if (v81 >= v83) {
            break;
          }
          if (!v79) {
            goto LABEL_141;
          }
          *(unsigned char *)(v79 + v82 + 1) = v83;
          *(unsigned char *)(v79 + v82--) = v81;
        }
        while (v82 != -1);
        ++v78;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_146;
  }
  Swift::Int v94 = result;
  Swift::Int v95 = v3;
  if (v3 < 2)
  {
    uint64_t v8 = _swiftEmptyArrayStorage;
    __dst = (unsigned __int8 *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      uint64_t v11 = (char *)_swiftEmptyArrayStorage;
LABEL_103:
      double v93 = v8;
      if (v12 >= 2)
      {
        uint64_t v84 = *v2;
        do
        {
          unint64_t v85 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_132;
          }
          if (!v84) {
            goto LABEL_145;
          }
          uint64_t v86 = v11;
          double v87 = v11 + 32;
          uint64_t v88 = *(void *)&v11[16 * v85 + 32];
          uint64_t v89 = *(void *)&v11[16 * v12 + 24];
          sub_100032D64((unsigned __int8 *)(v84 + v88), (unsigned __int8 *)(v84 + *(void *)&v87[16 * v12 - 16]), v84 + v89, __dst);
          if (v1) {
            break;
          }
          if (v89 < v88) {
            goto LABEL_133;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v86 = sub_10001B9E8((uint64_t)v86);
          }
          if (v85 >= *((void *)v86 + 2)) {
            goto LABEL_134;
          }
          CGFloat v90 = &v86[16 * v85 + 32];
          *(void *)CGFloat v90 = v88;
          *((void *)v90 + 1) = v89;
          unint64_t v91 = *((void *)v86 + 2);
          if (v12 > v91) {
            goto LABEL_135;
          }
          memmove(&v86[16 * v12 + 16], &v86[16 * v12 + 32], 16 * (v91 - v12));
          uint64_t v11 = v86;
          *((void *)v86 + 2) = v91 - 1;
          unint64_t v12 = v91 - 1;
        }
        while (v91 > 2);
      }
LABEL_114:
      swift_bridgeObjectRelease();
      v93[2] = 0;
      return swift_bridgeObjectRelease();
    }
    double v93 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    Swift::Int v3 = v95;
    double v93 = (void *)v7;
    __dst = (unsigned __int8 *)(v7 + 32);
  }
  Swift::Int v9 = 0;
  uint64_t v92 = v2;
  uint64_t v10 = *v2;
  uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  uint64_t v96 = *v2;
  while (1)
  {
    Swift::Int v13 = v9++;
    if (v9 < v3)
    {
      unsigned int v14 = *(unsigned __int8 *)(v10 + v9);
      unsigned int v15 = *(unsigned __int8 *)(v10 + v13);
      Swift::Int v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        unsigned int v16 = v14;
        while (1)
        {
          unsigned int v17 = *(unsigned __int8 *)(v10 + v9);
          if (v14 < v15 == v17 >= v16) {
            break;
          }
          ++v9;
          unsigned int v16 = v17;
          if (v3 == v9)
          {
            Swift::Int v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13) {
          goto LABEL_138;
        }
        if (v13 < v9)
        {
          Swift::Int v18 = v9 - 1;
          Swift::Int v19 = v13;
          do
          {
            if (v19 != v18)
            {
              if (!v10) {
                goto LABEL_144;
              }
              char v20 = *(unsigned char *)(v10 + v19);
              *(unsigned char *)(v10 + v19) = *(unsigned char *)(v10 + v18);
              *(unsigned char *)(v10 + v18) = v20;
            }
            BOOL v59 = ++v19 < v18--;
          }
          while (v59);
        }
      }
    }
    if (v9 >= v3) {
      goto LABEL_47;
    }
    if (__OFSUB__(v9, v13)) {
      goto LABEL_136;
    }
    if (v9 - v13 >= v94) {
      goto LABEL_47;
    }
    Swift::Int v21 = v13 + v94;
    if (__OFADD__(v13, v94)) {
      goto LABEL_139;
    }
    if (v21 >= v3) {
      Swift::Int v21 = v3;
    }
    if (v21 < v13) {
      break;
    }
    if (v9 != v21)
    {
      int64_t v22 = (unsigned char *)(v10 + v9);
      do
      {
        unsigned int v23 = *(unsigned __int8 *)(v10 + v9);
        Swift::Int v24 = v13;
        uint64_t v25 = v22;
        do
        {
          unsigned int v26 = *(v25 - 1);
          if (v23 >= v26) {
            break;
          }
          if (!v10) {
            goto LABEL_142;
          }
          *uint64_t v25 = v26;
          *--uint64_t v25 = v23;
          ++v24;
        }
        while (v9 != v24);
        ++v9;
        ++v22;
      }
      while (v9 != v21);
      Swift::Int v9 = v21;
    }
LABEL_47:
    if (v9 < v13) {
      goto LABEL_131;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = sub_10001B6BC(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v28 = *((void *)v11 + 2);
    unint64_t v27 = *((void *)v11 + 3);
    unint64_t v12 = v28 + 1;
    uint64_t v10 = v96;
    if (v28 >= v27 >> 1)
    {
      uint64_t v77 = sub_10001B6BC((char *)(v27 > 1), v28 + 1, 1, v11);
      uint64_t v10 = v96;
      uint64_t v11 = v77;
    }
    *((void *)v11 + 2) = v12;
    uint64_t v29 = v11 + 32;
    uint64_t v30 = &v11[16 * v28 + 32];
    *(void *)uint64_t v30 = v13;
    *((void *)v30 + 1) = v9;
    if (v28)
    {
      while (1)
      {
        unint64_t v31 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v36 = &v29[16 * v12];
          uint64_t v37 = *((void *)v36 - 8);
          uint64_t v38 = *((void *)v36 - 7);
          BOOL v42 = __OFSUB__(v38, v37);
          uint64_t v39 = v38 - v37;
          if (v42) {
            goto LABEL_120;
          }
          uint64_t v41 = *((void *)v36 - 6);
          uint64_t v40 = *((void *)v36 - 5);
          BOOL v42 = __OFSUB__(v40, v41);
          uint64_t v34 = v40 - v41;
          char v35 = v42;
          if (v42) {
            goto LABEL_121;
          }
          unint64_t v43 = v12 - 2;
          uint64_t v44 = &v29[16 * v12 - 32];
          uint64_t v46 = *(void *)v44;
          uint64_t v45 = *((void *)v44 + 1);
          BOOL v42 = __OFSUB__(v45, v46);
          uint64_t v47 = v45 - v46;
          if (v42) {
            goto LABEL_123;
          }
          BOOL v42 = __OFADD__(v34, v47);
          uint64_t v48 = v34 + v47;
          if (v42) {
            goto LABEL_126;
          }
          if (v48 >= v39)
          {
            uint64_t v66 = &v29[16 * v31];
            uint64_t v68 = *(void *)v66;
            uint64_t v67 = *((void *)v66 + 1);
            BOOL v42 = __OFSUB__(v67, v68);
            uint64_t v69 = v67 - v68;
            if (v42) {
              goto LABEL_130;
            }
            BOOL v59 = v34 < v69;
            goto LABEL_84;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v60 = *((void *)v11 + 4);
            uint64_t v61 = *((void *)v11 + 5);
            BOOL v42 = __OFSUB__(v61, v60);
            uint64_t v53 = v61 - v60;
            char v54 = v42;
            goto LABEL_78;
          }
          uint64_t v33 = *((void *)v11 + 4);
          uint64_t v32 = *((void *)v11 + 5);
          BOOL v42 = __OFSUB__(v32, v33);
          uint64_t v34 = v32 - v33;
          char v35 = v42;
        }
        if (v35) {
          goto LABEL_122;
        }
        unint64_t v43 = v12 - 2;
        uint64_t v49 = &v29[16 * v12 - 32];
        uint64_t v51 = *(void *)v49;
        uint64_t v50 = *((void *)v49 + 1);
        BOOL v52 = __OFSUB__(v50, v51);
        uint64_t v53 = v50 - v51;
        char v54 = v52;
        if (v52) {
          goto LABEL_125;
        }
        uint64_t v55 = &v29[16 * v31];
        uint64_t v57 = *(void *)v55;
        uint64_t v56 = *((void *)v55 + 1);
        BOOL v42 = __OFSUB__(v56, v57);
        uint64_t v58 = v56 - v57;
        if (v42) {
          goto LABEL_128;
        }
        if (__OFADD__(v53, v58)) {
          goto LABEL_129;
        }
        if (v53 + v58 >= v34)
        {
          BOOL v59 = v34 < v58;
LABEL_84:
          if (v59) {
            unint64_t v31 = v43;
          }
          goto LABEL_86;
        }
LABEL_78:
        if (v54) {
          goto LABEL_124;
        }
        uint64_t v62 = &v29[16 * v31];
        uint64_t v64 = *(void *)v62;
        uint64_t v63 = *((void *)v62 + 1);
        BOOL v42 = __OFSUB__(v63, v64);
        uint64_t v65 = v63 - v64;
        if (v42) {
          goto LABEL_127;
        }
        if (v65 < v53) {
          goto LABEL_15;
        }
LABEL_86:
        unint64_t v70 = v31 - 1;
        if (v31 - 1 >= v12)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v10) {
          goto LABEL_143;
        }
        uint64_t v71 = &v29[16 * v70];
        uint64_t v72 = *(void *)v71;
        char v73 = v29;
        uint64_t v74 = &v29[16 * v31];
        uint64_t v75 = *((void *)v74 + 1);
        sub_100032D64((unsigned __int8 *)(v10 + *(void *)v71), (unsigned __int8 *)(v10 + *(void *)v74), v10 + v75, __dst);
        if (v1) {
          goto LABEL_114;
        }
        if (v75 < v72) {
          goto LABEL_117;
        }
        if (v31 > *((void *)v11 + 2)) {
          goto LABEL_118;
        }
        *(void *)uint64_t v71 = v72;
        *(void *)&v73[16 * v70 + 8] = v75;
        unint64_t v76 = *((void *)v11 + 2);
        if (v31 >= v76) {
          goto LABEL_119;
        }
        unint64_t v12 = v76 - 1;
        memmove(v74, v74 + 16, 16 * (v76 - 1 - v31));
        uint64_t v29 = v73;
        *((void *)v11 + 2) = v76 - 1;
        uint64_t v10 = v96;
        if (v76 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    Swift::Int v3 = v95;
    if (v9 >= v95)
    {
      uint64_t v2 = v92;
      uint64_t v8 = v93;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100032D64(unsigned __int8 *__src, unsigned __int8 *a2, unint64_t a3, unsigned __int8 *__dst)
{
  int64_t v22 = __src;
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  size_t v8 = a2 - __src;
  unint64_t v9 = a3 - (void)a2;
  Swift::Int v21 = __dst;
  if (a2 - __src >= (uint64_t)(a3 - (void)a2))
  {
    if ((v9 & 0x8000000000000000) == 0)
    {
      if (__dst != a2 || a3 <= (unint64_t)__dst) {
        memmove(__dst, a2, a3 - (void)a2);
      }
      unsigned int v14 = &v4[v9];
      char v20 = &v4[v9];
      int64_t v22 = v6;
      if (v7 < v6 && (unsigned __int8 *)a3 != v6)
      {
        unsigned int v15 = (unsigned __int8 *)(a3 - 1);
        while (1)
        {
          unsigned int v16 = v15 + 1;
          unsigned int v17 = v6 - 1;
          unsigned int v18 = *(v6 - 1);
          if (*(v14 - 1) >= v18)
          {
            char v20 = v14 - 1;
            if (v16 < v14 || v15 >= v14 || v16 != v14) {
              unsigned __int8 *v15 = *(v14 - 1);
            }
            --v14;
            if (v6 <= v7) {
              goto LABEL_38;
            }
          }
          else
          {
            if (v16 != v6 || v15 >= v6) {
              unsigned __int8 *v15 = v18;
            }
            int64_t v22 = --v6;
            if (v17 <= v7) {
              goto LABEL_38;
            }
          }
          --v15;
          if (v14 <= v4) {
            goto LABEL_38;
          }
        }
      }
      goto LABEL_38;
    }
  }
  else if ((v8 & 0x8000000000000000) == 0)
  {
    if (__dst != __src || a2 <= __dst) {
      memmove(__dst, __src, v8);
    }
    uint64_t v10 = &v4[v8];
    char v20 = &v4[v8];
    if (v6 != v7 && (unint64_t)v6 < a3)
    {
      do
      {
        unsigned int v11 = *v6;
        unsigned int v12 = *v4;
        if (v11 >= v12)
        {
          if (v7 != v4) {
            unsigned __int8 *v7 = v12;
          }
          Swift::Int v21 = ++v4;
          Swift::Int v13 = v6;
        }
        else
        {
          Swift::Int v13 = v6 + 1;
          if (v7 < v6 || v7 >= v13 || v7 != v6) {
            unsigned __int8 *v7 = v11;
          }
        }
        ++v7;
        if (v4 >= v10) {
          break;
        }
        uint64_t v6 = v13;
      }
      while ((unint64_t)v13 < a3);
      int64_t v22 = v7;
    }
LABEL_38:
    sub_10001B944((void **)&v22, (const void **)&v21, &v20);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_100032FA0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100018964(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_100019240();
LABEL_7:
    unsigned int v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];

      *(void *)(v19 + 8 * v12) = a1;
      return;
    }
    goto LABEL_11;
  }
  sub_100019BB4(v15, a4 & 1);
  unint64_t v20 = sub_100018964(a2, a3);
  if ((v16 & 1) != (v21 & 1))
  {
LABEL_17:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v12 = v20;
  unsigned int v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  int64_t v22 = (uint64_t *)(v18[6] + 16 * v12);
  *int64_t v22 = a2;
  v22[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v23 = v18[2];
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (v24)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v25;

  swift_bridgeObjectRetain();
}

_OWORD *sub_100033110(_OWORD *a1, void *a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v7 = (void *)*v3;
  unint64_t v9 = sub_100018A54((uint64_t)a2);
  uint64_t v10 = v7[2];
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v13 = v8;
  uint64_t v14 = v7[3];
  if (v14 < v12 || (a3 & 1) == 0)
  {
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      sub_1000193F4();
      goto LABEL_7;
    }
    sub_100019EC4(v12, a3 & 1);
    unint64_t v18 = sub_100018A54((uint64_t)a2);
    if ((v13 & 1) == (v19 & 1))
    {
      unint64_t v9 = v18;
      uint64_t v15 = *v4;
      if (v13) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    type metadata accessor for Key(0);
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v15 = *v4;
  if (v13)
  {
LABEL_8:
    char v16 = (_OWORD *)(v15[7] + 32 * v9);
    sub_100023B50((uint64_t)v16);
    return sub_1000208E0(a1, v16);
  }
LABEL_13:
  sub_100033254(v9, (uint64_t)a2, a1, v15);

  return a2;
}

_OWORD *sub_100033254(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t result = sub_1000208E0(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

uint64_t (*sub_1000332BC(void (**a1)(id *a1), unint64_t a2, uint64_t a3))()
{
  uint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_1000333D8(v6, a2, a3);
  return sub_100033324;
}

uint64_t (*sub_100033328(void (**a1)(id *), unint64_t a2, uint64_t a3))()
{
  uint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_100033460(v6, a2, a3);
  return sub_100033324;
}

void sub_100033390(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

void (*sub_1000333D8(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  Swift::Int v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)Swift::Int v3 = v4;
    return sub_100033458;
  }
  __break(1u);
  return result;
}

void sub_100033458(id *a1)
{
}

void (*sub_100033460(void (*result)(id *), unint64_t a2, uint64_t a3))(id *)
{
  Swift::Int v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)Swift::Int v3 = v4;
    return sub_1000352BC;
  }
  __break(1u);
  return result;
}

void *sub_1000334E0(unint64_t a1, uint64_t a2, SEL *a3)
{
  char v16 = _swiftEmptyArrayStorage;
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    while (1)
    {
      unint64_t v5 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_9:
        BOOL v7 = v6;
        unint64_t v8 = v5 + 1;
        if (__OFADD__(v5, 1)) {
          goto LABEL_15;
        }
        id v9 = [v6 *a3];
        Swift::Int v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        Swift::Int v12 = v11;

        LOBYTE(v12) = sub_100015D64(&v15, v10, v12);
        swift_bridgeObjectRelease();
        if (v12)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
        }
        ++v5;
        if (v8 == v4) {
          return v16;
        }
      }
      if (v5 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        break;
      }
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
      if (!v4) {
        return _swiftEmptyArrayStorage;
      }
    }
    id v6 = *(id *)(a1 + 8 * v5 + 32);
    goto LABEL_9;
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100033670(void *a1)
{
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;
  if (v2 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v4 == v5)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_15;
  }
  char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v7)
  {
LABEL_15:

    return 0;
  }
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;
  if (v8 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v10 == v11)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_18;
  }
  char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v13)
  {
LABEL_18:

    return 1;
  }
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;
  if (v14 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v16 == v17)
  {
    swift_bridgeObjectRelease_n();
LABEL_20:

    return 2;
  }
  char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v20) {
    goto LABEL_20;
  }
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v23 = v22;
  uint64_t v18 = 3;
  if (v21 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v23 != v24)
  {
    if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
      uint64_t v18 = 3;
    }
    else {
      uint64_t v18 = 4;
    }
  }
  id v25 = a1;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v18;
}

uint64_t sub_10003388C@<X0>(void *a1@<X8>)
{
  return sub_100022BE0(a1);
}

uint64_t sub_1000338B4()
{
  return sub_100032380();
}

uint64_t sub_1000338DC()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10003391C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  char v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_1000339D0;
  return sub_10002F578(a1, v4, v5, v6);
}

uint64_t sub_1000339D0()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100033AC4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100033AFC(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1000339D0;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1000A9608 + dword_1000A9608);
  return v6(a1, v4);
}

uint64_t sub_100033BB4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100033BE0()
{
  return EnvironmentValues.foregroundColor.setter();
}

uint64_t sub_100033C0C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100033C38()
{
  return EnvironmentValues.font.setter();
}

uint64_t sub_100033C64@<X0>(uint64_t *a1@<X8>)
{
  AttributeScopes.uiKit.getter();
  uint64_t result = type metadata accessor for AttributeScopes.UIKitAttributes();
  *a1 = result;
  return result;
}

void sub_100033C94()
{
}

unint64_t sub_100033CB0()
{
  unint64_t result = qword_1000A9638;
  if (!qword_1000A9638)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A9638);
  }
  return result;
}

uint64_t sub_100033D04(unint64_t a1, void *a2)
{
  unint64_t v2 = a1;
  if (a1 >> 62) {
    goto LABEL_21;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v23 = v2;
    unint64_t v24 = v2 & 0xC000000000000001;
    uint64_t v4 = 4;
    uint64_t v5 = &selRef_runWithFontNamesForFamilyName_usingBlock_;
    while (1)
    {
      id v8 = v24 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v2 + 8 * v4);
      uint64_t v9 = v8;
      uint64_t v10 = v4 - 3;
      if (__OFADD__(v4 - 4, 1)) {
        break;
      }
      uint64_t v11 = v3;
      id v12 = [v8 v5[172]];
      if (v12)
      {
        char v13 = v12;
        uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v16 = v15;
      }
      else
      {
        uint64_t v14 = 0;
        uint64_t v16 = 0;
      }
      id v17 = [a2 v5[172]];
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v20 = v19;

      if (v16)
      {
        if (v14 == v18 && v16 == v20)
        {
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          uint64_t v21 = 1;
          goto LABEL_23;
        }
        char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v6)
        {
          uint64_t v21 = 1;
          goto LABEL_23;
        }
      }
      else
      {

        swift_bridgeObjectRelease();
      }
      ++v4;
      uint64_t v3 = v11;
      BOOL v7 = v10 == v11;
      unint64_t v2 = v23;
      uint64_t v5 = &selRef_runWithFontNamesForFamilyName_usingBlock_;
      if (v7)
      {
        uint64_t v21 = 0;
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_21:
    swift_bridgeObjectRetain();
  }
  uint64_t v21 = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v21;
}

uint64_t sub_100033F0C@<X0>(void *a1@<X8>)
{
  return sub_100022BE0(a1);
}

uint64_t sub_100033F34()
{
  return sub_100032380();
}

uint64_t sub_100033F5C(unint64_t a1, void *a2)
{
  if (a1 >> 62)
  {
LABEL_19:
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v3)
    {
LABEL_3:
      for (uint64_t i = 4; ; ++i)
      {
        uint64_t v5 = i - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v7 = i - 3;
          if (__OFADD__(v5, 1)) {
            goto LABEL_18;
          }
        }
        else
        {
          id v6 = *(id *)(a1 + 8 * i);
          uint64_t v7 = i - 3;
          if (__OFADD__(v5, 1))
          {
LABEL_18:
            __break(1u);
            goto LABEL_19;
          }
        }
        uint64_t v20 = v6;
        id v8 = [v6 familyName];
        uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v11 = v10;

        id v12 = [a2 familyName];
        uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v15 = v14;

        if (v9 == v13 && v11 == v15)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_17:
          uint64_t v3 = (uint64_t)v20;
          swift_bridgeObjectRelease();
          return v3;
        }
        char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v17) {
          goto LABEL_17;
        }

        if (v7 == v3)
        {
          swift_bridgeObjectRelease();
          return 0;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return v3;
}

unint64_t sub_100034120()
{
  unint64_t result = qword_1000A9690;
  if (!qword_1000A9690)
  {
    sub_10000A3AC(255, &qword_1000A86E8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A9690);
  }
  return result;
}

uint64_t sub_1000341B0()
{
  swift_unownedRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000341E8()
{
  swift_unownedRetainStrong();
  sub_10002ABBC();

  return swift_release();
}

uint64_t sub_100034228(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for TFListStyle(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for TFListStyle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    _OWORD *result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000343CCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          _OWORD *result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TFListStyle()
{
  return &type metadata for TFListStyle;
}

unint64_t sub_100034408()
{
  unint64_t result = qword_1000A96A0;
  if (!qword_1000A96A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A96A0);
  }
  return result;
}

uint64_t sub_10003445C()
{
  return sub_10000A368(&qword_1000A96A8, &qword_1000A96B0);
}

void sub_100034498(void *a1)
{
  uint64_t v3 = type metadata accessor for UITextFormattingViewController.ChangeValue();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unsigned int v6 = (uint64_t *)((char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  BOOL v7 = *(void (**)(void *, unint64_t))(v1
                                                         + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_didChangeValue);
  *unsigned int v6 = a1;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for UITextFormattingViewController.ChangeValue.font(_:), v3);
  sub_10000435C(&qword_1000AAAA0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1000843C0;
  *(void *)(inited + 32) = NSFontAttributeName;
  *(void *)(inited + 64) = sub_10000A3AC(0, &qword_1000A8FE8);
  *(void *)(inited + 40) = a1;
  id v9 = a1;
  swift_retain();
  uint64_t v10 = NSFontAttributeName;
  unint64_t v11 = sub_10002B1D4(inited);
  v7(v6, v11);
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if (([v9 isSystemFont] & 1) == 0)
  {
    id v12 = [v9 fontDescriptor];
    id v13 = [objc_allocWithZone((Class)_UIFontPickerFontInfo) initWithFontDescriptor:v12];

    _UIFontPickerPersistToRecentsForSuite();
  }
}

uint64_t sub_1000346A0()
{
  uint64_t v1 = type metadata accessor for UITextFormattingViewController.ChangeValue();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (uint64_t *)((char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = sub_10000A3AC(0, &qword_1000A9708);
  swift_retain();
  unsigned int v6 = (void *)UIColor.init(_:)();
  BOOL v7 = *(void (**)(void *, unint64_t))(v0
                                                         + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_didChangeValue);
  void *v4 = v6;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for UITextFormattingViewController.ChangeValue.textColor(_:), v1);
  sub_10000435C(&qword_1000AAAA0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1000843C0;
  *(void *)(inited + 64) = v5;
  *(void *)(inited + 32) = NSForegroundColorAttributeName;
  *(void *)(inited + 40) = v6;
  id v9 = v6;
  swift_retain();
  uint64_t v10 = NSForegroundColorAttributeName;
  unint64_t v11 = sub_10002B1D4(inited);
  v7(v4, v11);

  swift_release();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void *, uint64_t))(v2 + 8))(v4, v1);
}

void *sub_100034868()
{
  id v0 = UITextFormattingViewControllerHighlightDefault;
  char v1 = sub_1000125B8();

  if (v1)
  {
    if (qword_1000A8258 != -1) {
      swift_once();
    }
    id v2 = (id)qword_1000AB620;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  id v3 = UITextFormattingViewControllerHighlightPurple;
  char v4 = sub_1000125B8();

  if (v4)
  {
    if (qword_1000A8260 != -1) {
      swift_once();
    }
    id v5 = (id)qword_1000AB628;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  id v6 = UITextFormattingViewControllerHighlightPink;
  char v7 = sub_1000125B8();

  if (v7)
  {
    if (qword_1000A8268 != -1) {
      swift_once();
    }
    id v8 = (id)qword_1000AB630;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  id v9 = UITextFormattingViewControllerHighlightOrange;
  char v10 = sub_1000125B8();

  if (v10)
  {
    if (qword_1000A8270 != -1) {
      swift_once();
    }
    id v11 = (id)qword_1000AB638;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  id v12 = UITextFormattingViewControllerHighlightMint;
  char v13 = sub_1000125B8();

  if (v13)
  {
    if (qword_1000A8278 != -1) {
      swift_once();
    }
    id v14 = (id)qword_1000AB640;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  id v15 = UITextFormattingViewControllerHighlightBlue;
  char v16 = sub_1000125B8();

  if (v16)
  {
    if (qword_1000A8280 != -1) {
      swift_once();
    }
    id v17 = (id)qword_1000AB648;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  return _swiftEmptyArrayStorage;
}

void *sub_100034CF8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t v7 = a1;
  if (a1 >> 62)
  {
LABEL_20:
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    if (v8) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v8)
    {
LABEL_3:
      uint64_t v22 = v4;
      unint64_t v23 = v7;
      unint64_t v24 = v7 & 0xC000000000000001;
      uint64_t v4 = 4;
      do
      {
        uint64_t v9 = v4 - 4;
        if (v24)
        {
          id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v11 = v4 - 3;
          if (__OFADD__(v9, 1)) {
            goto LABEL_19;
          }
        }
        else
        {
          id v10 = *(id *)(v7 + 8 * v4);
          uint64_t v11 = v4 - 3;
          if (__OFADD__(v9, 1))
          {
LABEL_19:
            __break(1u);
            goto LABEL_20;
          }
        }
        uint64_t v12 = v8;
        char v13 = v10;
        uint64_t v14 = a3;
        id v15 = [v10 styleKey:v22];
        uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v18 = v17;

        a3 = v14;
        BOOL v19 = v16 == a2 && v18 == v14;
        if (v19)
        {
          swift_bridgeObjectRelease();
LABEL_18:
          swift_bridgeObjectRelease();
          return v13;
        }
        char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v20) {
          goto LABEL_18;
        }

        ++v4;
        uint64_t v8 = v12;
        BOOL v19 = v11 == v12;
        unint64_t v7 = v23;
      }
      while (!v19);
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

void sub_100034EA0(void *a1)
{
  if (a1)
  {
    id v1 = [a1 styleKey];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    id v2 = [self standardUserDefaults];
    NSString v3 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v4 = String._bridgeToObjectiveC()();
    [v2 setObject:v3 forKey:v4];
  }
}

unint64_t sub_100034F94(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10009E7B8, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

uint64_t sub_100034FE0(char a1, Swift::Double a2)
{
  if (qword_1000A8248 != -1) {
    swift_once();
  }
  NSString v4 = (void *)qword_1000A9330;
  sub_10000A3AC(0, &qword_1000A96C8);
  Class isa = NSNumber.init(floatLiteral:)(a2).super.super.isa;
  id v6 = [v4 stringFromNumber:isa];

  if (!v6)
  {
    sub_10000435C(&qword_1000A96D0);
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_1000843C0;
    *(void *)(v12 + 56) = &type metadata for CGFloat;
    *(void *)(v12 + 64) = sub_1000351D4();
    *(Swift::Double *)(v12 + 32) = a2;
    uint64_t v7 = String.init(format:_:)();
    uint64_t v9 = v13;
    if (a1) {
      goto LABEL_5;
    }
    return v7;
  }
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  if ((a1 & 1) == 0) {
    return v7;
  }
LABEL_5:
  if (qword_1000A8148 != -1) {
    swift_once();
  }
  sub_10000435C(&qword_1000A96D0);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1000843C0;
  *(void *)(v10 + 56) = &type metadata for String;
  *(void *)(v10 + 64) = sub_100035228();
  *(void *)(v10 + 32) = v7;
  *(void *)(v10 + 40) = v9;

  return String.init(format:_:)();
}

unint64_t sub_1000351D4()
{
  unint64_t result = qword_1000A96D8;
  if (!qword_1000A96D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A96D8);
  }
  return result;
}

unint64_t sub_100035228()
{
  unint64_t result = qword_1000A96E0;
  if (!qword_1000A96E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A96E0);
  }
  return result;
}

uint64_t sub_10003527C()
{
  if (*(void *)(v0 + 40)) {
    sub_100023B50(v0 + 16);
  }

  return _swift_deallocObject(v0, 48, 7);
}

void *sub_1000352C0()
{
  return &protocol witness table for String;
}

__n128 sub_1000352CC@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void (*a17)(uint64_t, uint64_t, uint64_t), uint64_t *a18)
{
  char v20 = a17;
  uint64_t v21 = a18;
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  int v24 = a8 & 1;
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (v24) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    unint64_t v31 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    uint64_t v21 = a18;
    char v20 = a17;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  v20(v18, a9, a16);
  uint64_t v32 = (_OWORD *)(a9 + *(int *)(sub_10000435C(v21) + 36));
  v32[4] = v38;
  v32[5] = v39;
  v32[6] = v40;
  _OWORD *v32 = v34;
  v32[1] = v35;
  __n128 result = v37;
  v32[2] = v36;
  v32[3] = v37;
  return result;
}

uint64_t sub_1000354B0@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    unint64_t v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  long long v24 = *(_OWORD *)(v13 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v13 + 32);
  *(_OWORD *)(a9 + 48) = v24;
  *(_OWORD *)(a9 + 64) = *(_OWORD *)(v13 + 64);
  long long v25 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v13;
  *(_OWORD *)(a9 + 16) = v25;
  *(_OWORD *)(a9 + 136) = v30;
  *(_OWORD *)(a9 + 152) = v31;
  *(_OWORD *)(a9 + 168) = v32;
  *(_OWORD *)(a9 + 184) = v33;
  *(_OWORD *)(a9 + 88) = v27;
  *(_OWORD *)(a9 + 104) = v28;
  *(unsigned char *)(a9 + 80) = *(unsigned char *)(v13 + 80);
  *(_OWORD *)(a9 + 120) = v29;

  return sub_100059F00(v13);
}

uint64_t sub_100035684@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    unint64_t v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  long long v24 = *(_OWORD *)(v13 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v13 + 32);
  *(_OWORD *)(a9 + 48) = v24;
  *(_OWORD *)(a9 + 64) = *(_OWORD *)(v13 + 64);
  long long v25 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v13;
  *(_OWORD *)(a9 + 16) = v25;
  *(_OWORD *)(a9 + 136) = v30;
  *(_OWORD *)(a9 + 152) = v31;
  *(_OWORD *)(a9 + 168) = v32;
  *(_OWORD *)(a9 + 184) = v33;
  *(_OWORD *)(a9 + 88) = v27;
  *(_OWORD *)(a9 + 104) = v28;
  *(unsigned char *)(a9 + 80) = *(unsigned char *)(v13 + 80);
  *(_OWORD *)(a9 + 120) = v29;

  return sub_10005BB0C(v13);
}

double sub_100035858@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_1000352CC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t)type metadata accessor for TFLabel, (void (*)(uint64_t, uint64_t, uint64_t))sub_10005C814, &qword_1000AA250).n128_u64[0];
  return result;
}

double sub_1000358D0@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_1000352CC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t)&unk_1000AAB30, (void (*)(uint64_t, uint64_t, uint64_t))sub_100009E70, &qword_1000AAB20).n128_u64[0];
  return result;
}

double sub_100035940@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_1000352CC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t)&unk_1000AA2A8, (void (*)(uint64_t, uint64_t, uint64_t))sub_100009E70, &qword_1000AAB00).n128_u64[0];
  return result;
}

double sub_1000359B0@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_1000352CC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t)&unk_1000AA9C0, (void (*)(uint64_t, uint64_t, uint64_t))sub_100009E70, &qword_1000AA258).n128_u64[0];
  return result;
}

uint64_t sub_100035A20@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    long long v25 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  *(_OWORD *)(a9 + 56) = v30;
  *(_OWORD *)(a9 + 72) = v31;
  *(_OWORD *)(a9 + 88) = v32;
  *(_OWORD *)(a9 + 104) = v33;
  *(_OWORD *)(a9 + 8) = v27;
  *(_OWORD *)(a9 + 24) = v28;
  *(void *)a9 = a16;
  *(_OWORD *)(a9 + 40) = v29;

  return swift_retain();
}

uint64_t sub_100035BDC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v134 = a1;
  uint64_t v129 = sub_10000435C(&qword_1000A9920);
  uint64_t v2 = __chkstk_darwin(v129);
  CGFloat v113 = (char *)&v106 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v119 = (uint64_t)&v106 - v4;
  uint64_t v127 = sub_10000435C(&qword_1000A9928);
  __chkstk_darwin(v127);
  uint64_t v128 = (uint64_t)&v106 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v118 = type metadata accessor for ContentMarginPlacement();
  uint64_t v117 = *(void *)(v118 - 8);
  __chkstk_darwin(v118);
  CGFloat v116 = (char *)&v106 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v122 = sub_10000435C(&qword_1000A9930);
  __chkstk_darwin(v122);
  uint64_t v107 = (uint64_t)&v106 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v123 = (void *)sub_10000435C(&qword_1000A9938);
  uint64_t v110 = *(v123 - 1);
  __chkstk_darwin(v123);
  double v108 = (char *)&v106 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v124 = sub_10000435C(&qword_1000A9940);
  uint64_t v112 = *(void *)(v124 - 8);
  __chkstk_darwin(v124);
  CGFloat v111 = (char *)&v106 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v125 = sub_10000435C(&qword_1000A9948);
  uint64_t v115 = *(void *)(v125 - 8);
  uint64_t v10 = __chkstk_darwin(v125);
  CGFloat v109 = (char *)&v106 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  id v114 = (char *)&v106 - v12;
  uint64_t v133 = sub_10000435C(&qword_1000A9950);
  __chkstk_darwin(v133);
  double v126 = (char *)&v106 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v131 = sub_10000435C(&qword_1000A9958);
  __chkstk_darwin(v131);
  uint64_t v132 = (uint64_t)&v106 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v15 = (int *)sub_10000435C(&qword_1000A9960);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v106 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v120 = sub_10000435C(&qword_1000A9968);
  __chkstk_darwin(v120);
  BOOL v19 = (char *)&v106 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v130 = sub_10000435C(&qword_1000A9970);
  uint64_t v20 = __chkstk_darwin(v130);
  uint64_t v22 = (char *)&v106 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v121 = (uint64_t)&v106 - v23;
  uint64_t v24 = v1[2];
  uint64_t v25 = *((unsigned __int8 *)v1 + 24);
  int v26 = *((unsigned __int8 *)v1 + 25);
  sub_10001F4F8(v24, v25, *((unsigned char *)v1 + 25));
  uint64_t v27 = sub_100012E64(v24, v25 | (v26 << 8));
  char v29 = v28;
  sub_10001F568(v24, v25, v26);
  if ((v29 & 1) != 0 || v27 > 2)
  {
    uint64_t v35 = v1[4];
    char v36 = *((unsigned char *)v1 + 40);
    sub_10001F504(v35, v36);
    char v37 = sub_100013084(v35, v36);
    sub_10001F574(v35, v36);
    if (v37)
    {
      uint64_t v38 = v1[6];
      char v39 = *((unsigned char *)v1 + 56);
      sub_10001F504(v38, v39);
      char v40 = sub_100012C58(v38, v39);
      sub_10001F574(v38, v39);
      uint64_t v41 = *v1;
      if (!*v1) {
        goto LABEL_17;
      }
      if (*(unsigned char *)(v41 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_isInPopoverPresentation)) {
        char v42 = 0;
      }
      else {
        char v42 = *(unsigned char *)(v41 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_hasParentViewController) ^ 1;
      }
      sub_1000746A8(v42 & 1, *(unsigned char *)(v41 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_useReducedMetrics), v40);
      uint64_t v89 = v107;
      sub_100037958(v107);
      unint64_t v90 = sub_10005855C();
      unint64_t v91 = v108;
      uint64_t v92 = v122;
      View.scrollClipDisabled(_:)();
      sub_100009ED4(v89, &qword_1000A9930);
      static Edge.Set.leading.getter();
      double v93 = v116;
      static ContentMarginPlacement.automatic.getter();
      double v136 = (void *)v92;
      unint64_t v137 = v90;
      uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
      Swift::Int v95 = v111;
      uint64_t v96 = v123;
      View.contentMargins(_:_:for:)();
      uint64_t v97 = *(void (**)(char *, uint64_t))(v117 + 8);
      uint64_t v98 = v118;
      v97(v93, v118);
      (*(void (**)(char *, void *))(v110 + 8))(v91, v96);
      static Edge.Set.trailing.getter();
      static ContentMarginPlacement.automatic.getter();
      double v136 = v96;
      unint64_t v137 = OpaqueTypeConformance2;
      double v123 = &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>;
      uint64_t v99 = swift_getOpaqueTypeConformance2();
      uint64_t v100 = v109;
      uint64_t v101 = v124;
      View.contentMargins(_:_:for:)();
      v97(v93, v98);
      (*(void (**)(char *, uint64_t))(v112 + 8))(v95, v101);
      uint64_t v102 = v115;
      uint64_t v103 = v114;
      uint64_t v104 = v125;
      (*(void (**)(char *, char *, uint64_t))(v115 + 32))(v114, v100, v125);
      (*(void (**)(uint64_t, char *, uint64_t))(v102 + 16))(v128, v103, v104);
      swift_storeEnumTagMultiPayload();
      double v136 = (void *)v101;
      unint64_t v137 = v99;
      swift_getOpaqueTypeConformance2();
      sub_10000A368(&qword_1000A9990, &qword_1000A9920);
      uint64_t v56 = (uint64_t)v126;
      _ConditionalContent<>.init(storage:)();
      (*(void (**)(char *, uint64_t))(v102 + 8))(v103, v104);
    }
    else
    {
      unint64_t v43 = (int *)v129;
      uint64_t v44 = (uint64_t)v113;
      uint64_t v45 = &v113[*(int *)(v129 + 40)];
      uint64_t v46 = type metadata accessor for HoverEffect();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v45, 1, 1, v46);
      *(void *)uint64_t v44 = 0;
      *(_WORD *)(v44 + 8) = 257;
      sub_100037958(v44 + v43[11]);
      uint64_t v47 = v44 + v43[12];
      *(void *)uint64_t v47 = swift_getKeyPath();
      *(unsigned char *)(v47 + 8) = 0;
      uint64_t v48 = v44 + v43[13];
      *(void *)uint64_t v48 = swift_getKeyPath();
      *(unsigned char *)(v48 + 8) = 0;
      uint64_t v49 = v44 + v43[14];
      *(void *)uint64_t v49 = swift_getKeyPath();
      *(unsigned char *)(v49 + 8) = 0;
      uint64_t v50 = v44 + v43[15];
      char v135 = 0;
      State.init(wrappedValue:)();
      unint64_t v51 = v137;
      *(unsigned char *)uint64_t v50 = (_BYTE)v136;
      *(void *)(v50 + 8) = v51;
      uint64_t v52 = v119;
      sub_100009F30(v44, v119, &qword_1000A9920);
      sub_100009E70(v52, v128, &qword_1000A9920);
      swift_storeEnumTagMultiPayload();
      unint64_t v53 = sub_10005855C();
      double v136 = (void *)v122;
      unint64_t v137 = v53;
      uint64_t v54 = swift_getOpaqueTypeConformance2();
      double v136 = v123;
      unint64_t v137 = v54;
      uint64_t v55 = swift_getOpaqueTypeConformance2();
      double v136 = (void *)v124;
      unint64_t v137 = v55;
      swift_getOpaqueTypeConformance2();
      sub_10000A368(&qword_1000A9990, &qword_1000A9920);
      uint64_t v56 = (uint64_t)v126;
      _ConditionalContent<>.init(storage:)();
      sub_100009ED4(v52, &qword_1000A9920);
    }
    uint64_t v86 = &qword_1000A9950;
    sub_100009E70(v56, v132, &qword_1000A9950);
    swift_storeEnumTagMultiPayload();
    sub_10005864C();
    sub_100058768();
    _ConditionalContent<>.init(storage:)();
    uint64_t v88 = v56;
    return sub_100009ED4(v88, v86);
  }
  uint64_t v30 = v1[6];
  char v31 = *((unsigned char *)v1 + 56);
  sub_10001F504(v30, v31);
  char v32 = sub_100012C58(v30, v31);
  sub_10001F574(v30, v31);
  uint64_t v33 = *v1;
  if (*v1)
  {
    if (*(unsigned char *)(v33 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_isInPopoverPresentation)) {
      char v34 = 0;
    }
    else {
      char v34 = *(unsigned char *)(v33 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_hasParentViewController) ^ 1;
    }
    sub_1000746A8(v34 & 1, *(unsigned char *)(v33 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_useReducedMetrics), v32);
    uint64_t v57 = &v17[v15[10]];
    uint64_t v58 = type metadata accessor for HoverEffect();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 56))(v57, 1, 1, v58);
    *(void *)uint64_t v17 = 0;
    *((_WORD *)v17 + 4) = 257;
    sub_100036AF0(v1, (uint64_t)&v17[v15[11]]);
    BOOL v59 = &v17[v15[12]];
    *(void *)BOOL v59 = swift_getKeyPath();
    v59[8] = 0;
    uint64_t v60 = &v17[v15[13]];
    *(void *)uint64_t v60 = swift_getKeyPath();
    v60[8] = 0;
    uint64_t v61 = &v17[v15[14]];
    *(void *)uint64_t v61 = swift_getKeyPath();
    v61[8] = 0;
    uint64_t v62 = &v17[v15[15]];
    char v135 = 0;
    State.init(wrappedValue:)();
    unint64_t v63 = v137;
    *uint64_t v62 = (char)v136;
    *((void *)v62 + 1) = v63;
    char v64 = static Edge.Set.leading.getter();
    uint64_t v65 = v1[4];
    char v66 = *((unsigned char *)v1 + 40);
    sub_10001F504(v65, v66);
    sub_100013084(v65, v66);
    sub_10001F574(v65, v66);
    EdgeInsets.init(_all:)();
    uint64_t v68 = v67;
    uint64_t v70 = v69;
    uint64_t v72 = v71;
    uint64_t v74 = v73;
    sub_100009E70((uint64_t)v17, (uint64_t)v19, &qword_1000A9960);
    uint64_t v75 = &v19[*(int *)(v120 + 36)];
    *uint64_t v75 = v64;
    *((void *)v75 + 1) = v68;
    *((void *)v75 + 2) = v70;
    *((void *)v75 + 3) = v72;
    *((void *)v75 + 4) = v74;
    v75[40] = 0;
    sub_100009ED4((uint64_t)v17, &qword_1000A9960);
    char v76 = static Edge.Set.trailing.getter();
    sub_10001F504(v65, v66);
    sub_100013084(v65, v66);
    sub_10001F574(v65, v66);
    EdgeInsets.init(_all:)();
    uint64_t v78 = v77;
    uint64_t v80 = v79;
    uint64_t v82 = v81;
    uint64_t v84 = v83;
    sub_100009E70((uint64_t)v19, (uint64_t)v22, &qword_1000A9968);
    unint64_t v85 = &v22[*(int *)(v130 + 36)];
    *unint64_t v85 = v76;
    *((void *)v85 + 1) = v78;
    *((void *)v85 + 2) = v80;
    *((void *)v85 + 3) = v82;
    *((void *)v85 + 4) = v84;
    v85[40] = 0;
    sub_100009ED4((uint64_t)v19, &qword_1000A9968);
    uint64_t v86 = &qword_1000A9970;
    uint64_t v87 = v121;
    sub_100009F30((uint64_t)v22, v121, &qword_1000A9970);
    sub_100009E70(v87, v132, &qword_1000A9970);
    swift_storeEnumTagMultiPayload();
    sub_10005864C();
    sub_100058768();
    _ConditionalContent<>.init(storage:)();
    uint64_t v88 = v87;
    return sub_100009ED4(v88, v86);
  }
LABEL_17:
  type metadata accessor for TextFormattingState();
  sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
  uint64_t result = EnvironmentObject.error()();
  __break(1u);
  return result;
}

uint64_t sub_100036AF0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v27 = a1;
  uint64_t v30 = a2;
  uint64_t v3 = sub_10000435C(&qword_1000A99B8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = sub_10000435C(&qword_1000A99C0);
  uint64_t v7 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_10000435C(&qword_1000A99C8);
  __chkstk_darwin(v28);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v31 = a1;
  sub_10000435C(&qword_1000A99D0);
  sub_10000435C(&qword_1000A99D8);
  sub_10000A368(&qword_1000A99E0, &qword_1000A99D0);
  sub_1000588A8(&qword_1000A99E8, &qword_1000A99D8);
  Menu.init(content:label:)();
  char v35 = 0;
  State.init(wrappedValue:)();
  char v12 = v32;
  uint64_t v13 = v33;
  LOBYTE(v32) = 0;
  LOBYTE(v33) = v12;
  uint64_t v34 = v13;
  sub_10000A368(&qword_1000A9A00, &qword_1000A99B8);
  sub_100057D90();
  View.menuStyle<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t v14 = v27;
  if (*v27)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v15 = *(void *)(v32 + 16);
    swift_bridgeObjectRelease();
    if (v15)
    {
      uint64_t v16 = v14[8];
      char v17 = *((unsigned char *)v14 + 72);
      sub_10001F504(v16, v17);
      char v18 = sub_100013084(v16, v17);
      sub_10001F574(v16, v17);
      char v19 = v18 ^ 1;
    }
    else
    {
      char v19 = 1;
    }
    uint64_t v21 = v29;
    uint64_t v20 = v30;
    uint64_t v22 = v28;
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v24 = swift_allocObject();
    *(unsigned char *)(v24 + 16) = v19 & 1;
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v11, v9, v21);
    uint64_t v25 = (uint64_t *)&v11[*(int *)(v22 + 36)];
    *uint64_t v25 = KeyPath;
    v25[1] = (uint64_t)sub_100058954;
    v25[2] = v24;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v21);
    return sub_100009F30((uint64_t)v11, v20, &qword_1000A99C8);
  }
  else
  {
    type metadata accessor for TextFormattingState();
    sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_100036F78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10000435C(&qword_1000A99D8);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)a1)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    swift_getKeyPath();
    uint64_t v8 = swift_allocObject();
    long long v9 = *(_OWORD *)(a1 + 80);
    *(_OWORD *)(v8 + 80) = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(v8 + 96) = v9;
    *(void *)(v8 + 112) = *(void *)(a1 + 96);
    long long v10 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v8 + 16) = *(_OWORD *)a1;
    *(_OWORD *)(v8 + 32) = v10;
    long long v11 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v8 + 48) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v8 + 64) = v11;
    sub_100020618(a1);
    sub_10000435C(&qword_1000A9428);
    sub_10000435C(&qword_1000A99F8);
    sub_10000A368(&qword_1000A9A08, &qword_1000A9428);
    sub_10000A368(&qword_1000A99F0, &qword_1000A99F8);
    ForEach<>.init(_:id:content:)();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v7, v4);
  }
  else
  {
    type metadata accessor for TextFormattingState();
    sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_100037220@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v25 = a3;
  uint64_t v26 = a1;
  uint64_t v5 = type metadata accessor for UITextFormattingViewController.FormattingStyle();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v24(v8, a1, v5);
  type metadata accessor for MainActor();
  sub_100020618(a2);
  uint64_t v9 = static MainActor.shared.getter();
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = (v10 + 136) & ~v10;
  v23[1] = v10 | 7;
  v23[2] = v11 + v7;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v9;
  *(void *)(v12 + 24) = &protocol witness table for MainActor;
  long long v13 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v12 + 96) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v12 + 112) = v13;
  *(void *)(v12 + 128) = *(void *)(a2 + 96);
  long long v14 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v12 + 32) = *(_OWORD *)a2;
  *(_OWORD *)(v12 + 48) = v14;
  long long v15 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v12 + 64) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v12 + 80) = v15;
  uint64_t v16 = *(void (**)(uint64_t, char *, uint64_t))(v6 + 32);
  v16(v12 + v11, v8, v5);
  v24(v8, v26, v5);
  sub_100020618(a2);
  uint64_t v17 = static MainActor.shared.getter();
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v17;
  *(void *)(v18 + 24) = &protocol witness table for MainActor;
  long long v19 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v18 + 96) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v18 + 112) = v19;
  *(void *)(v18 + 128) = *(void *)(a2 + 96);
  long long v20 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v18 + 32) = *(_OWORD *)a2;
  *(_OWORD *)(v18 + 48) = v20;
  long long v21 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v18 + 64) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v18 + 80) = v21;
  v16(v18 + v11, v8, v5);
  Binding.init(get:set:)();
  uint64_t v27 = v26;
  return Toggle.init(isOn:label:)();
}

uint64_t sub_1000374A0@<X0>(void *a1@<X2>, unsigned char *a2@<X8>)
{
  uint64_t v4 = sub_10000435C(&qword_1000A8FF8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*a1)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v7 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
    {
      uint64_t result = sub_100009ED4((uint64_t)v6, &qword_1000A8FF8);
      char v9 = 0;
    }
    else
    {
      uint64_t v10 = UITextFormattingViewController.FormattingDescriptor.formattingStyleKey.getter();
      uint64_t v12 = v11;
      uint64_t result = sub_100009ED4((uint64_t)v6, &qword_1000A8FF8);
      if (v12)
      {
        if (v10 == UITextFormattingViewController.FormattingStyle.styleKey.getter() && v12 == v13) {
          char v15 = 1;
        }
        else {
          char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
        }
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        char v9 = v15 & 1;
      }
      else
      {
        char v9 = 0;
      }
    }
    *a2 = v9;
  }
  else
  {
    type metadata accessor for TextFormattingState();
    sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000376AC(unsigned char *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = type metadata accessor for AttributeContainer();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = type metadata accessor for UITextFormattingViewController.ChangeValue();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t result = __chkstk_darwin(v7);
  uint64_t v11 = (uint64_t *)((char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (*a1 == 1)
  {
    if (*a4)
    {
      uint64_t v12 = *(void (**)(uint64_t *, uint64_t))(*a4
                                                      + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_didChangeValue);
      swift_retain();
      *uint64_t v11 = UITextFormattingViewController.FormattingStyle.styleKey.getter();
      v11[1] = v13;
      (*(void (**)(uint64_t *, void, uint64_t))(v8 + 104))(v11, enum case for UITextFormattingViewController.ChangeValue.formattingStyle(_:), v7);
      UITextFormattingViewController.FormattingStyle.attributes.getter();
      uint64_t v14 = Dictionary<>.init(_:)();
      v12(v11, v14);
      swift_release();
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(uint64_t *, uint64_t))(v8 + 8))(v11, v7);
    }
    else
    {
      type metadata accessor for TextFormattingState();
      sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
      uint64_t result = EnvironmentObject.error()();
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1000378B8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for LocalizedStringResource();
  __chkstk_darwin(v2 - 8);
  UITextFormattingViewController.FormattingStyle.title.getter();
  uint64_t result = Text.init(_:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5 & 1;
  *(void *)(a1 + 24) = v6;
  return result;
}

uint64_t sub_10003794C@<X0>(uint64_t a1@<X8>)
{
  return sub_100046C20(a1, (__n128)xmmword_100084AB0);
}

uint64_t sub_100037958@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v21 = a1;
  uint64_t v3 = sub_10000435C(&qword_1000A9980);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_10000435C(&qword_1000A9A10);
  uint64_t v7 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  char v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Axis.Set.horizontal.getter();
  uint64_t v22 = v1;
  sub_10000435C(&qword_1000A9A18);
  uint64_t v10 = sub_100003F9C(&qword_1000A9A20);
  uint64_t v11 = sub_10000A368(&qword_1000A9A28, &qword_1000A9A20);
  uint64_t v25 = v10;
  uint64_t v26 = v11;
  swift_getOpaqueTypeConformance2();
  ScrollView.init(_:showsIndicators:content:)();
  long long v23 = *(_OWORD *)(v1 + 80);
  uint64_t v24 = *(void *)(v1 + 96);
  sub_10000435C(&qword_1000A86C8);
  State.projectedValue.getter();
  sub_10000A368(&qword_1000A9988, &qword_1000A9980);
  View.scrollPosition<A>(id:anchor:)();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t v12 = swift_allocObject();
  long long v13 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(v12 + 80) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(v12 + 96) = v13;
  *(void *)(v12 + 112) = *(void *)(v2 + 96);
  long long v14 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v12 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v12 + 32) = v14;
  long long v15 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v12 + 48) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v12 + 64) = v15;
  uint64_t v17 = v20;
  uint64_t v16 = v21;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 16))(v21, v9, v20);
  uint64_t v18 = (uint64_t (**)())(v16 + *(int *)(sub_10000435C(&qword_1000A9930) + 36));
  *uint64_t v18 = sub_100058BB8;
  v18[1] = (uint64_t (*)())v12;
  v18[2] = 0;
  _OWORD v18[3] = 0;
  sub_100020618(v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v17);
}

uint64_t sub_100037CB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v35 = a2;
  uint64_t v34 = sub_10000435C(&qword_1000A9A30);
  uint64_t v3 = *(void *)(v34 - 8);
  uint64_t v4 = __chkstk_darwin(v34);
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v29 - v7;
  uint64_t v33 = sub_10000435C(&qword_1000A9A20);
  __chkstk_darwin(v33);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000435C(&qword_1000A9A18);
  uint64_t v31 = *(void *)(v11 - 8);
  uint64_t v32 = v11;
  __chkstk_darwin(v11);
  long long v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = static VerticalAlignment.center.getter();
  uint64_t v15 = *(void *)(a1 + 32);
  char v16 = *(unsigned char *)(a1 + 40);
  sub_10001F504(v15, v16);
  char v17 = sub_100013084(v15, v16);
  sub_10001F574(v15, v16);
  if (v17)
  {
    uint64_t v18 = 0;
  }
  else
  {
    uint64_t v19 = *(void *)(a1 + 48);
    char v20 = *(unsigned char *)(a1 + 56);
    sub_10001F504(v19, v20);
    char v21 = sub_100012C58(v19, v20);
    sub_10001F574(v19, v20);
    uint64_t v18 = qword_100085A48[v21];
  }
  *(void *)uint64_t v10 = v14;
  *((void *)v10 + 1) = v18;
  v10[16] = 0;
  if (*(void *)a1)
  {
    uint64_t v30 = &v10[*(int *)(sub_10000435C(&qword_1000A9A38) + 44)];
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    swift_getKeyPath();
    uint64_t v22 = swift_allocObject();
    long long v23 = *(_OWORD *)(a1 + 80);
    *(_OWORD *)(v22 + 80) = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(v22 + 96) = v23;
    *(void *)(v22 + 112) = *(void *)(a1 + 96);
    long long v24 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v22 + 16) = *(_OWORD *)a1;
    *(_OWORD *)(v22 + 32) = v24;
    long long v25 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v22 + 48) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v22 + 64) = v25;
    sub_100020618(a1);
    sub_10000435C(&qword_1000A9428);
    sub_10000435C(&qword_1000A9A40);
    sub_10000A368(&qword_1000A9A08, &qword_1000A9428);
    sub_100058C48();
    ForEach<>.init(_:id:content:)();
    uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
    uint64_t v27 = v34;
    v26(v8, v6, v34);
    v26(v30, v8, v27);
    sub_10000A368(&qword_1000A9A28, &qword_1000A9A20);
    View.scrollTargetLayout(isEnabled:)();
    sub_100009ED4((uint64_t)v10, &qword_1000A9A20);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v31 + 32))(v35, v13, v32);
  }
  else
  {
    type metadata accessor for TextFormattingState();
    sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_100038148@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v68 = a3;
  uint64_t v69 = a1;
  uint64_t v4 = type metadata accessor for LocalizedStringResource();
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UITextFormattingViewController.FormattingStyle();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  uint64_t v10 = sub_10000435C(&qword_1000A9A60);
  uint64_t v59 = *(void *)(v10 - 8);
  uint64_t v60 = v10;
  __chkstk_darwin(v10);
  uint64_t v58 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000435C(&qword_1000A9A78);
  uint64_t v64 = *(void *)(v12 - 8);
  uint64_t v65 = v12;
  __chkstk_darwin(v12);
  uint64_t v62 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = sub_10000435C(&qword_1000A9A58);
  __chkstk_darwin(v61);
  char v66 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000435C(&qword_1000A9A40);
  __chkstk_darwin(v15 - 8);
  uint64_t v63 = (uint64_t)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000435C(&qword_1000A8FF8);
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = *(void *)a2;
  if (!*(void *)a2)
  {
    type metadata accessor for TextFormattingState();
    sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
    return result;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v21 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor();
  int v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48))(v19, 1, v21);
  uint64_t v67 = v6;
  if (v22)
  {
    sub_100009ED4((uint64_t)v19, &qword_1000A8FF8);
  }
  else
  {
    uint64_t v53 = UITextFormattingViewController.FormattingDescriptor.formattingStyleKey.getter();
    uint64_t v55 = v54;
    sub_100009ED4((uint64_t)v19, &qword_1000A8FF8);
    if (v55)
    {
      if (v53 == UITextFormattingViewController.FormattingStyle.styleKey.getter() && v55 == v56)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        char v23 = 1;
      }
      else
      {
        char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      goto LABEL_5;
    }
  }
  char v23 = 0;
LABEL_5:
  uint64_t v24 = v69;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v69, v7);
  unint64_t v25 = (*(unsigned __int8 *)(v8 + 80) + 120) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v26 = swift_allocObject();
  long long v27 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v26 + 80) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v26 + 96) = v27;
  *(void *)(v26 + 112) = *(void *)(a2 + 96);
  long long v28 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v26 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v26 + 32) = v28;
  long long v29 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v26 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v26 + 64) = v29;
  uint64_t v30 = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v8 + 32))(v26 + v25, (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  __chkstk_darwin(v30);
  *(&v57 - 2) = v24;
  *(&v57 - 1) = a2;
  sub_100020618(a2);
  sub_10000435C(&qword_1000A9A80);
  sub_100058FB4();
  uint64_t v31 = v58;
  Button.init(action:label:)();
  uint64_t v32 = *(void *)(a2 + 32);
  char v33 = *(unsigned char *)(a2 + 40);
  sub_10001F504(v32, v33);
  char v34 = sub_100013084(v32, v33);
  sub_10001F574(v32, v33);
  uint64_t KeyPath = swift_getKeyPath();
  char v36 = v23 & 1;
  LOBYTE(v70) = v23 & 1;
  BYTE1(v70) = (v34 & 1) == 0;
  *((void *)&v70 + 1) = KeyPath;
  LOBYTE(v71) = 0;
  sub_10000A368(&qword_1000A9A68, &qword_1000A9A60);
  sub_100058DE4();
  char v37 = v62;
  uint64_t v38 = v60;
  View.buttonStyle<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v59 + 8))(v31, v38);
  uint64_t v39 = *(void *)(a2 + 48);
  char v40 = *(unsigned char *)(a2 + 56);
  sub_10001F504(v39, v40);
  char v41 = sub_100012C58(v39, v40);
  sub_10001F574(v39, v40);
  swift_retain();
  NSString v42 = String._bridgeToObjectiveC()();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  char v43 = 0;
  if ((*(unsigned char *)(v20 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_isInPopoverPresentation) & 1) == 0) {
    char v43 = *(unsigned char *)(v20 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_hasParentViewController) ^ 1;
  }
  sub_100074B84((uint64_t)v42, v70, SBYTE8(v70), v43 & 1, *(unsigned char *)(v20 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_useReducedMetrics), v41);
  swift_release();

  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v45 = v64;
  uint64_t v44 = v65;
  uint64_t v46 = (uint64_t)v66;
  (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v66, v37, v65);
  uint64_t v47 = (_OWORD *)(v46 + *(int *)(v61 + 36));
  long long v48 = v71;
  *uint64_t v47 = v70;
  v47[1] = v48;
  v47[2] = v72;
  (*(void (**)(char *, uint64_t))(v45 + 8))(v37, v44);
  UITextFormattingViewController.FormattingStyle.title.getter();
  uint64_t v49 = String.init(localized:)();
  uint64_t v50 = v63;
  sub_10003967C(v36, v49, v51, &qword_1000A9A40, &qword_1000A9A58, (void (*)(void))sub_100058CF4, v63);
  swift_bridgeObjectRelease();
  sub_100009ED4(v46, &qword_1000A9A58);
  return sub_100009F30(v50, v68, &qword_1000A9A40);
}

uint64_t sub_1000389BC(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttributeContainer();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for UITextFormattingViewController.ChangeValue();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (uint64_t *)&v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (*a1)
  {
    uint64_t v9 = *(void (**)(uint64_t *, uint64_t))(*a1
                                                   + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_didChangeValue);
    swift_retain();
    *uint64_t v8 = UITextFormattingViewController.FormattingStyle.styleKey.getter();
    v8[1] = v10;
    (*(void (**)(uint64_t *, void, uint64_t))(v6 + 104))(v8, enum case for UITextFormattingViewController.ChangeValue.formattingStyle(_:), v5);
    UITextFormattingViewController.FormattingStyle.attributes.getter();
    uint64_t v11 = Dictionary<>.init(_:)();
    v9(v8, v11);
    swift_release();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t *, uint64_t))(v6 + 8))(v8, v5);
    static Animation.spring(response:dampingFraction:blendDuration:)();
    Animation.speed(_:)();
    uint64_t v12 = swift_release();
    __chkstk_darwin(v12);
    *(void *)&v14[-16] = a1;
    *(void *)&v14[-8] = a2;
    withAnimation<A>(_:_:)();
    return swift_release();
  }
  else
  {
    type metadata accessor for TextFormattingState();
    sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_100038C50()
{
  return State.wrappedValue.setter();
}

uint64_t sub_100038CC0@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  long long v29 = a1;
  uint64_t v31 = a2;
  uint64_t v30 = type metadata accessor for TFFontModifier();
  __chkstk_darwin(v30);
  uint64_t v3 = (char *)&KeyPath - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000435C(&qword_1000A9628);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&KeyPath - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AttributeContainer();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&KeyPath - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for LocalizedStringResource();
  __chkstk_darwin(v12 - 8);
  uint64_t v28 = sub_10000435C(&qword_1000A9A80);
  __chkstk_darwin(v28);
  uint64_t v14 = (char *)&KeyPath - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  UITextFormattingViewController.FormattingStyle.title.getter();
  uint64_t v15 = String.init(localized:)();
  uint64_t v26 = v16;
  uint64_t v27 = v15;
  uint64_t KeyPath = swift_getKeyPath();
  UITextFormattingViewController.FormattingStyle.attributes.getter();
  swift_getKeyPath();
  type metadata accessor for AttributeScopes.UIKitAttributes();
  sub_100057C6C(&qword_1000A9630, (void (*)(uint64_t))&type metadata accessor for AttributeScopes.UIKitAttributes);
  AttributeContainer.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_getKeyPath();
  sub_100033CB0();
  ScopedAttributeContainer.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (*v29)
  {
    uint64_t v17 = v32;
    uint64_t v18 = *v29 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_largestFontSizeInFormattingStyles;
    uint64_t v19 = *(void *)v18;
    char v20 = *(unsigned char *)(v18 + 8);
    uint64_t v21 = static Font.title3.getter();
    *(void *)uint64_t v3 = v17;
    *((void *)v3 + 1) = v21;
    *((void *)v3 + 2) = 0x4044000000000000;
    *((void *)v3 + 3) = v19;
    v3[32] = v20;
    int v22 = (uint64_t *)&v3[*(int *)(v30 + 32)];
    *int v22 = swift_getKeyPath();
    sub_10000435C(&qword_1000A9A98);
    swift_storeEnumTagMultiPayload();
    sub_10005C814((uint64_t)v3, (uint64_t)&v14[*(int *)(v28 + 36)], (uint64_t (*)(void))type metadata accessor for TFFontModifier);
    uint64_t v23 = v26;
    *(void *)uint64_t v14 = v27;
    *((void *)v14 + 1) = v23;
    unsigned char v14[16] = 0;
    *((void *)v14 + 3) = KeyPath;
    v14[32] = 0;
    sub_10005C87C((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for TFFontModifier);
    return sub_100009F30((uint64_t)v14, v31, &qword_1000A9A80);
  }
  else
  {
    type metadata accessor for TextFormattingState();
    sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_100039128@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v21 = a4;
  uint64_t v20 = type metadata accessor for AccessibilityTraits();
  uint64_t v7 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10000435C(&qword_1000A9810);
  uint64_t v10 = __chkstk_darwin(v19);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v18 - v13;
  if (a1)
  {
    if (qword_1000A81F0 != -1) {
      swift_once();
    }
    sub_10000435C(&qword_1000A96D0);
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_1000843C0;
    *(void *)(v15 + 56) = &type metadata for String;
    *(void *)(v15 + 64) = sub_100035228();
    *(void *)(v15 + 32) = a2;
    *(void *)(v15 + 40) = a3;
    swift_bridgeObjectRetain();
    a2 = String.init(format:_:)();
    a3 = v16;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  type metadata accessor for TFToggle(0);
  sub_100057C6C(&qword_1000A9850, (void (*)(uint64_t))type metadata accessor for TFToggle);
  sub_1000099C8();
  View.accessibilityLabel<A>(_:)();
  swift_bridgeObjectRelease();
  static AccessibilityTraits.isButton.getter();
  ModifiedContent<>.accessibilityRemoveTraits(_:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v20);
  sub_100009ED4((uint64_t)v12, &qword_1000A9810);
  return sub_100009F30((uint64_t)v14, v21, &qword_1000A9810);
}

uint64_t sub_1000393DC@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, unint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v27 = a5;
  uint64_t v28 = a7;
  uint64_t v26 = a6;
  uint64_t v30 = a8;
  uint64_t v29 = type metadata accessor for AccessibilityTraits();
  uint64_t v12 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000435C(a4);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)v25 - v19;
  if (a1)
  {
    if (qword_1000A81F0 != -1) {
      swift_once();
    }
    v25[1] = *(void *)algn_1000AB598;
    sub_10000435C(&qword_1000A96D0);
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_1000843C0;
    *(void *)(v21 + 56) = &type metadata for String;
    *(void *)(v21 + 64) = sub_100035228();
    *(void *)(v21 + 32) = a2;
    *(void *)(v21 + 40) = a3;
    swift_bridgeObjectRetain();
    a2 = String.init(format:_:)();
    a3 = v22;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  uint64_t v31 = a2;
  uint64_t v32 = a3;
  uint64_t v23 = v27;
  sub_10000435C(v27);
  sub_10000A368(v26, v23);
  sub_1000099C8();
  View.accessibilityLabel<A>(_:)();
  swift_bridgeObjectRelease();
  static AccessibilityTraits.isButton.getter();
  ModifiedContent<>.accessibilityRemoveTraits(_:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v29);
  sub_100009ED4((uint64_t)v18, a4);
  return sub_100009F30((uint64_t)v20, v30, a4);
}

uint64_t sub_10003967C@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, void (*a6)(void)@<X5>, uint64_t a7@<X8>)
{
  unint64_t v25 = a5;
  uint64_t v27 = a7;
  uint64_t v26 = type metadata accessor for AccessibilityTraits();
  uint64_t v12 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000435C(a4);
  uint64_t v15 = __chkstk_darwin(v24);
  uint64_t v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v23 - v18;
  if (a1)
  {
    uint64_t v23 = a6;
    if (qword_1000A81F0 != -1) {
      swift_once();
    }
    sub_10000435C(&qword_1000A96D0);
    uint64_t v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_1000843C0;
    *(void *)(v20 + 56) = &type metadata for String;
    *(void *)(v20 + 64) = sub_100035228();
    *(void *)(v20 + 32) = a2;
    *(void *)(v20 + 40) = a3;
    swift_bridgeObjectRetain();
    a2 = String.init(format:_:)();
    a3 = v21;
    a6 = v23;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  uint64_t v28 = a2;
  uint64_t v29 = a3;
  sub_10000435C(v25);
  a6();
  sub_1000099C8();
  View.accessibilityLabel<A>(_:)();
  swift_bridgeObjectRelease();
  static AccessibilityTraits.isButton.getter();
  ModifiedContent<>.accessibilityRemoveTraits(_:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v26);
  sub_100009ED4((uint64_t)v17, a4);
  return sub_100009F30((uint64_t)v19, v27, a4);
}

uint64_t sub_100039910(uint64_t a1)
{
  uint64_t v2 = sub_10000435C(&qword_1000A8FF8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)a1)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v5 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor();
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
    {
      uint64_t v6 = UITextFormattingViewController.FormattingDescriptor.formattingStyleKey.getter();
      uint64_t v7 = v8;
    }
    sub_100009ED4((uint64_t)v4, &qword_1000A8FF8);
    long long v11 = *(_OWORD *)(a1 + 80);
    uint64_t v12 = *(void *)(a1 + 96);
    v10[0] = v6;
    v10[1] = v7;
    sub_10000435C(&qword_1000A86C8);
    return State.wrappedValue.setter();
  }
  else
  {
    type metadata accessor for TextFormattingState();
    sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_100039AD8@<X0>(uint64_t a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  int v10 = a2 & 1;
  uint64_t v11 = sub_10000435C(&qword_1000A97D8);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = &v26[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = (int *)sub_10000435C(&qword_1000AA260);
  __chkstk_darwin(v14);
  uint64_t v16 = &v26[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if ((a2 & 0x100) != 0)
  {
    uint64_t v17 = type metadata accessor for HoverEffect();
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v13, 1, 1, v17);
    __int16 v18 = 256;
  }
  else
  {
    if (v10) {
      static HoverEffect.lift.getter();
    }
    else {
      static HoverEffect.highlight.getter();
    }
    uint64_t v19 = type metadata accessor for HoverEffect();
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v13, 0, 1, v19);
    __int16 v18 = 0;
  }
  *(void *)uint64_t v16 = 0;
  *((_WORD *)v16 + 4) = 257;
  sub_100009F30((uint64_t)v13, (uint64_t)&v16[v14[10]], &qword_1000A97D8);
  sub_100039D48(a1, v18 | v10, a3, a4 & 1, (uint64_t)&v16[v14[11]]);
  uint64_t v20 = &v16[v14[12]];
  *(void *)uint64_t v20 = swift_getKeyPath();
  v20[8] = 0;
  uint64_t v21 = &v16[v14[13]];
  *(void *)uint64_t v21 = swift_getKeyPath();
  v21[8] = 0;
  uint64_t v22 = &v16[v14[14]];
  *(void *)uint64_t v22 = swift_getKeyPath();
  v22[8] = 0;
  uint64_t v23 = &v16[v14[15]];
  v26[7] = 0;
  State.init(wrappedValue:)();
  uint64_t v24 = v27;
  *uint64_t v23 = v26[8];
  *((void *)v23 + 1) = v24;
  return sub_100009F30((uint64_t)v16, a5, &qword_1000AA260);
}

uint64_t sub_100039D48@<X0>(uint64_t a1@<X0>, unsigned __int16 a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v74 = a3;
  char v5 = a2;
  uint64_t v76 = a5;
  int v70 = a2;
  int v71 = a2 & 1;
  int v62 = a4 & 1;
  uint64_t v73 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v73);
  uint64_t v75 = (double *)((char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for ButtonStyleConfiguration.Label();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = sub_10000435C(&qword_1000AA268);
  __chkstk_darwin(v60);
  uint64_t v13 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = sub_10000435C(&qword_1000AA270);
  __chkstk_darwin(v61);
  uint64_t v15 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000435C(&qword_1000AA278);
  __chkstk_darwin(v16 - 8);
  __int16 v18 = (char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = sub_10000435C(&qword_1000AA280);
  __chkstk_darwin(v63);
  uint64_t v20 = (char *)&v59 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_10000435C(&qword_1000AA288);
  __chkstk_darwin(v21 - 8);
  uint64_t v66 = (uint64_t)&v59 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = sub_10000435C(&qword_1000AA290);
  __chkstk_darwin(v65);
  uint64_t v24 = (char *)&v59 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = sub_10000435C(&qword_1000AA298);
  __chkstk_darwin(v64);
  uint64_t v69 = (uint64_t)&v59 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = sub_10000435C(&qword_1000AA2A0);
  __chkstk_darwin(v67);
  uint64_t v68 = (char *)&v59 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = a1;
  ButtonStyleConfiguration.label.getter();
  if (v5) {
    uint64_t v27 = static Color.white.getter();
  }
  else {
    uint64_t v27 = static Color.primary.getter();
  }
  uint64_t v28 = v27;
  uint64_t KeyPath = swift_getKeyPath();
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v13, v11, v8);
  uint64_t v30 = (uint64_t *)&v13[*(int *)(v60 + 36)];
  *uint64_t v30 = KeyPath;
  v30[1] = v28;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  LOBYTE(v28) = static Edge.Set.horizontal.getter();
  uint64_t v31 = v74;
  char v32 = v62;
  sub_10001F504(v74, v62);
  sub_100012C58(v31, v32);
  sub_10001F574(v31, v32);
  EdgeInsets.init(_all:)();
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  uint64_t v38 = v37;
  uint64_t v40 = v39;
  sub_100009E70((uint64_t)v13, (uint64_t)v15, &qword_1000AA268);
  char v41 = &v15[*(int *)(v61 + 36)];
  *char v41 = v28;
  *((void *)v41 + 1) = v34;
  *((void *)v41 + 2) = v36;
  *((void *)v41 + 3) = v38;
  *((void *)v41 + 4) = v40;
  v41[40] = 0;
  sub_100009ED4((uint64_t)v13, &qword_1000AA268);
  uint64_t v42 = static Alignment.center.getter();
  sub_1000352CC(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, (uint64_t)v18, 0.0, 1, INFINITY, 0, v42, v43, (uint64_t)&qword_1000AA270, (void (*)(uint64_t, uint64_t, uint64_t))sub_100009E70, &qword_1000AA278);
  sub_100009ED4((uint64_t)v15, &qword_1000AA270);
  LOBYTE(v28) = (v70 & 0x101) == 0;
  sub_100009E70((uint64_t)v18, (uint64_t)v20, &qword_1000AA278);
  uint64_t v44 = &v20[*(int *)(v63 + 36)];
  *uint64_t v44 = v28;
  *(_WORD *)(v44 + 1) = v71;
  sub_100009ED4((uint64_t)v18, &qword_1000AA278);
  uint64_t v45 = v66;
  sub_100009E70((uint64_t)v20, v66, &qword_1000AA280);
  sub_100009ED4((uint64_t)v20, &qword_1000AA280);
  double v46 = 1.0;
  if (ButtonStyleConfiguration.isPressed.getter())
  {
    sub_10001F504(v31, v32);
    char v47 = sub_100012C58(v31, v32);
    sub_10001F574(v31, v32);
    if ((v47 - 2) >= 3u) {
      double v46 = 0.7;
    }
    else {
      double v46 = 0.5;
    }
  }
  sub_100009E70(v45, (uint64_t)v24, &qword_1000AA288);
  *(double *)&v24[*(int *)(v65 + 36)] = v46;
  sub_100009ED4(v45, &qword_1000AA288);
  uint64_t v48 = v69;
  sub_100009E70((uint64_t)v24, v69, &qword_1000AA290);
  uint64_t v49 = (void *)(v48 + *(int *)(v64 + 36));
  *uint64_t v49 = sub_10005C950;
  v49[1] = 0;
  sub_100009ED4((uint64_t)v24, &qword_1000AA290);
  sub_10001F504(v31, v32);
  char v50 = sub_100012C58(v31, v32);
  sub_10001F574(v31, v32);
  if (((v50 - 2) & 0xFD) != 0) {
    double v51 = 10.0;
  }
  else {
    double v51 = 14.0;
  }
  uint64_t v52 = v75;
  uint64_t v53 = (char *)v75 + *(int *)(v73 + 20);
  uint64_t v54 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v55 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v55 - 8) + 104))(v53, v54, v55);
  *uint64_t v52 = v51;
  v52[1] = v51;
  uint64_t v56 = (uint64_t)v68;
  uint64_t v57 = (uint64_t)&v68[*(int *)(v67 + 36)];
  sub_10005C814((uint64_t)v52, v57, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *(unsigned char *)(v57 + *(int *)(sub_10000435C(&qword_1000A88A8) + 36)) = 0;
  sub_100009E70(v48, v56, &qword_1000AA298);
  sub_10005C87C((uint64_t)v52, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  sub_100009ED4(v48, &qword_1000AA298);
  return sub_100009F30(v56, v76, &qword_1000AA2A0);
}

uint64_t sub_10003A500@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (v2[1]) {
    __int16 v3 = 256;
  }
  else {
    __int16 v3 = 0;
  }
  return sub_100039AD8(a1, v3 | *v2, *((void *)v2 + 1), v2[16], a2);
}

uint64_t sub_10003A52C@<X0>(uint64_t a1@<X8>)
{
  return sub_100035BDC(a1);
}

uint64_t sub_10003A578@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v37 = a1;
  __int16 v3 = (int *)sub_10000435C(&qword_1000A9AA0);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v35 - v7;
  uint64_t v36 = sub_10000435C(&qword_1000A9AA8);
  __chkstk_darwin(v36);
  uint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000435C(&qword_1000A9AB0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000435C(&qword_1000A9AB8);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000435C(&qword_1000A9AC0);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)v2)
  {
    if (*(unsigned char *)(*(void *)v2 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_isTextAnimationsUI))
    {
      uint64_t v20 = *(void *)(v2 + 32);
      char v21 = *(unsigned char *)(v2 + 40);
      sub_10001F504(v20, v21);
      sub_100012C58(v20, v21);
      sub_10001F574(v20, v21);
      *(void *)uint64_t v19 = static VerticalAlignment.center.getter();
      *((void *)v19 + 1) = 0x4008000000000000;
      v19[16] = 0;
      uint64_t v22 = (uint64_t)&v19[*(int *)(sub_10000435C(&qword_1000A9AD8) + 44)];
      sub_10003AAD0((uint64_t *)v2, (uint64_t)v13);
      uint64_t KeyPath = swift_getKeyPath();
      sub_100009E70((uint64_t)v13, (uint64_t)v16, &qword_1000A9AB0);
      uint64_t v24 = &v16[*(int *)(v14 + 36)];
      *(void *)uint64_t v24 = KeyPath;
      v24[8] = 1;
      sub_100009ED4((uint64_t)v13, &qword_1000A9AB0);
      sub_100009F30((uint64_t)v16, v22, &qword_1000A9AB8);
      uint64_t v25 = &qword_1000A9AC0;
      sub_100009E70((uint64_t)v19, (uint64_t)v10, &qword_1000A9AC0);
      swift_storeEnumTagMultiPayload();
      sub_10000A368(&qword_1000A9AC8, &qword_1000A9AC0);
      sub_10000A368(&qword_1000A9AD0, &qword_1000A9AA0);
      _ConditionalContent<>.init(storage:)();
      uint64_t v26 = (uint64_t)v19;
    }
    else
    {
      uint64_t v27 = &v6[v3[10]];
      uint64_t v28 = type metadata accessor for HoverEffect();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v27, 1, 1, v28);
      *(void *)uint64_t v6 = 0;
      *((_WORD *)v6 + 4) = 257;
      sub_10003CBBC(v2, (uint64_t)&v6[v3[11]]);
      uint64_t v29 = &v6[v3[12]];
      *(void *)uint64_t v29 = swift_getKeyPath();
      v29[8] = 0;
      uint64_t v30 = &v6[v3[13]];
      *(void *)uint64_t v30 = swift_getKeyPath();
      v30[8] = 0;
      uint64_t v31 = &v6[v3[14]];
      *(void *)uint64_t v31 = swift_getKeyPath();
      v31[8] = 0;
      char v32 = &v6[v3[15]];
      char v38 = 0;
      State.init(wrappedValue:)();
      uint64_t v33 = v40;
      char *v32 = v39;
      *((void *)v32 + 1) = v33;
      uint64_t v25 = &qword_1000A9AA0;
      sub_100009F30((uint64_t)v6, (uint64_t)v8, &qword_1000A9AA0);
      sub_100009E70((uint64_t)v8, (uint64_t)v10, &qword_1000A9AA0);
      swift_storeEnumTagMultiPayload();
      sub_10000A368(&qword_1000A9AC8, &qword_1000A9AC0);
      sub_10000A368(&qword_1000A9AD0, &qword_1000A9AA0);
      _ConditionalContent<>.init(storage:)();
      uint64_t v26 = (uint64_t)v8;
    }
    return sub_100009ED4(v26, v25);
  }
  else
  {
    type metadata accessor for TextFormattingState();
    sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10003AAD0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v102 = a2;
  uint64_t v3 = sub_10000435C(&qword_1000A8FF8);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v96 = (char *)&v93 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v103 = (char *)&v93 - v6;
  uint64_t v105 = sub_10000435C(&qword_1000A9AE0);
  uint64_t v7 = __chkstk_darwin(v105);
  uint64_t v101 = (char *)&v93 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v100 = (char *)&v93 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v97 = (char *)&v93 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v99 = (char *)&v93 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v93 - v16;
  __chkstk_darwin(v15);
  uint64_t v108 = (uint64_t)&v93 - v18;
  uint64_t v19 = sub_10000435C(&qword_1000A97D8);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  Swift::Int v95 = (char *)&v93 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v20);
  Swift::Int v94 = (char *)&v93 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  double v93 = (char *)&v93 - v25;
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v93 - v26;
  uint64_t v28 = (int *)sub_10000435C(&qword_1000A9AE8);
  uint64_t v29 = __chkstk_darwin(v28);
  uint64_t v98 = (char *)&v93 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v107 = (uint64_t)&v93 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v35 = (char *)&v93 - v34;
  uint64_t v36 = __chkstk_darwin(v33);
  uint64_t v104 = (uint64_t)&v93 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  uint64_t v40 = (char *)&v93 - v39;
  __chkstk_darwin(v38);
  uint64_t v110 = (uint64_t)&v93 - v41;
  uint64_t v42 = a1[4];
  char v43 = *((unsigned char *)a1 + 40);
  sub_10001F504(v42, v43);
  char v44 = sub_100012C58(v42, v43);
  sub_10001F574(v42, v43);
  uint64_t v106 = a1;
  uint64_t v45 = *a1;
  if (*a1)
  {
    uint64_t v46 = UITextFormattingViewControllerFontAttributesComponentKey;
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    if (*(unsigned char *)(v45 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_isInPopoverPresentation)) {
      char v47 = 0;
    }
    else {
      char v47 = *(unsigned char *)(v45 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_hasParentViewController) ^ 1;
    }
    double v48 = sub_100074B84(v46, v112, v113, v47 & 1, *(unsigned char *)(v45 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_useReducedMetrics), v44);
    swift_release();
    swift_retain();
    char v49 = sub_10002B304();
    swift_release();
    if (v49) {
      static HoverEffect.lift.getter();
    }
    else {
      static HoverEffect.highlight.getter();
    }
    uint64_t v50 = type metadata accessor for HoverEffect();
    CGFloat v109 = *(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56);
    v109(v27, 0, 1, v50);
    *(double *)uint64_t v40 = v48;
    *((_WORD *)v40 + 4) = 256;
    sub_100009F30((uint64_t)v27, (uint64_t)&v40[v28[10]], &qword_1000A97D8);
    sub_10003B734(0, (uint64_t)&v40[v28[11]]);
    double v51 = &v40[v28[12]];
    *(void *)double v51 = swift_getKeyPath();
    v51[8] = 0;
    uint64_t v52 = &v40[v28[13]];
    *(void *)uint64_t v52 = swift_getKeyPath();
    v52[8] = 0;
    uint64_t v53 = &v40[v28[14]];
    *(void *)uint64_t v53 = swift_getKeyPath();
    v53[8] = 0;
    uint64_t v54 = &v40[v28[15]];
    char v111 = 0;
    State.init(wrappedValue:)();
    uint64_t v55 = v113;
    *uint64_t v54 = v112;
    *((void *)v54 + 1) = v55;
    sub_100009F30((uint64_t)v40, v110, &qword_1000A9AE8);
    swift_retain();
    LOBYTE(v54) = sub_10002BCC0();
    swift_release();
    if (v54)
    {
      uint64_t v56 = (uint64_t)v93;
      static HoverEffect.lift.getter();
    }
    else
    {
      uint64_t v56 = (uint64_t)v93;
      static HoverEffect.highlight.getter();
    }
    uint64_t v57 = (uint64_t)v103;
    uint64_t v103 = (char *)v50;
    v109((char *)v56, 0, 1, v50);
    *(double *)uint64_t v35 = v48;
    *((_WORD *)v35 + 4) = 256;
    sub_100009F30(v56, (uint64_t)&v35[v28[10]], &qword_1000A97D8);
    sub_10003BC58(0, (uint64_t)&v35[v28[11]]);
    uint64_t v58 = &v35[v28[12]];
    *(void *)uint64_t v58 = swift_getKeyPath();
    v58[8] = 0;
    uint64_t v59 = &v35[v28[13]];
    *(void *)uint64_t v59 = swift_getKeyPath();
    v59[8] = 0;
    uint64_t v60 = &v35[v28[14]];
    *(void *)uint64_t v60 = swift_getKeyPath();
    v60[8] = 0;
    uint64_t v61 = &v35[v28[15]];
    char v111 = 0;
    State.init(wrappedValue:)();
    uint64_t v62 = v113;
    *uint64_t v61 = v112;
    *((void *)v61 + 1) = v62;
    sub_100009F30((uint64_t)v35, v104, &qword_1000A9AE8);
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v63 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor();
    uint64_t v64 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v63 - 8) + 48);
    if (v64(v57, 1, v63))
    {
      sub_100009ED4(v57, &qword_1000A8FF8);
      swift_release();
    }
    else
    {
      char v65 = UITextFormattingViewController.FormattingDescriptor.underlinePresent.getter();
      sub_100009ED4(v57, &qword_1000A8FF8);
      swift_release();
      if (v65)
      {
        uint64_t v66 = (uint64_t)v94;
        static HoverEffect.lift.getter();
        goto LABEL_16;
      }
    }
    uint64_t v66 = (uint64_t)v94;
    static HoverEffect.highlight.getter();
LABEL_16:
    v109((char *)v66, 0, 1, (uint64_t)v103);
    *(double *)uint64_t v17 = v48;
    *((_WORD *)v17 + 4) = 256;
    uint64_t v67 = (int *)v105;
    sub_100009F30(v66, (uint64_t)&v17[*(int *)(v105 + 40)], &qword_1000A97D8);
    sub_10003C164(0, (uint64_t)&v17[v67[11]]);
    uint64_t v68 = &v17[v67[12]];
    *(void *)uint64_t v68 = swift_getKeyPath();
    v68[8] = 0;
    uint64_t v69 = &v17[v67[13]];
    *(void *)uint64_t v69 = swift_getKeyPath();
    v69[8] = 0;
    int v70 = &v17[v67[14]];
    *(void *)int v70 = swift_getKeyPath();
    v70[8] = 0;
    int v71 = &v17[v67[15]];
    char v111 = 0;
    State.init(wrappedValue:)();
    uint64_t v72 = v113;
    *int v71 = v112;
    *((void *)v71 + 1) = v72;
    sub_100009F30((uint64_t)v17, v108, &qword_1000A9AE0);
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    uint64_t v73 = (uint64_t)v96;
    static Published.subscript.getter();
    swift_release();
    swift_release();
    if (v64(v73, 1, v63))
    {
      sub_100009ED4(v73, &qword_1000A8FF8);
      swift_release();
      uint64_t v75 = (uint64_t)v101;
      uint64_t v74 = v102;
      uint64_t v76 = (uint64_t)v99;
      uint64_t v77 = (uint64_t)v100;
      uint64_t v78 = (uint64_t)v97;
    }
    else
    {
      char v79 = UITextFormattingViewController.FormattingDescriptor.strikethroughPresent.getter();
      sub_100009ED4(v73, &qword_1000A8FF8);
      swift_release();
      uint64_t v75 = (uint64_t)v101;
      uint64_t v74 = v102;
      uint64_t v76 = (uint64_t)v99;
      uint64_t v77 = (uint64_t)v100;
      uint64_t v78 = (uint64_t)v97;
      if (v79)
      {
        uint64_t v80 = (uint64_t)v95;
        static HoverEffect.lift.getter();
LABEL_21:
        uint64_t v81 = (uint64_t)v98;
        v109((char *)v80, 0, 1, (uint64_t)v103);
        *(double *)uint64_t v78 = v48;
        *(_WORD *)(v78 + 8) = 256;
        uint64_t v82 = (int *)v105;
        sub_100009F30(v80, v78 + *(int *)(v105 + 40), &qword_1000A97D8);
        sub_10003C738(0, v78 + v82[11]);
        uint64_t v83 = v78 + v82[12];
        *(void *)uint64_t v83 = swift_getKeyPath();
        *(unsigned char *)(v83 + 8) = 0;
        uint64_t v84 = v78 + v82[13];
        *(void *)uint64_t v84 = swift_getKeyPath();
        *(unsigned char *)(v84 + 8) = 0;
        uint64_t v85 = v78 + v82[14];
        *(void *)uint64_t v85 = swift_getKeyPath();
        *(unsigned char *)(v85 + 8) = 0;
        uint64_t v86 = v78 + v82[15];
        char v111 = 0;
        State.init(wrappedValue:)();
        uint64_t v87 = v113;
        *(unsigned char *)uint64_t v86 = v112;
        *(void *)(v86 + 8) = v87;
        sub_100009F30(v78, v76, &qword_1000A9AE0);
        uint64_t v88 = v107;
        sub_100009E70(v110, v107, &qword_1000A9AE8);
        uint64_t v89 = v104;
        sub_100009E70(v104, v81, &qword_1000A9AE8);
        uint64_t v90 = v108;
        sub_100009E70(v108, v77, &qword_1000A9AE0);
        sub_100009E70(v76, v75, &qword_1000A9AE0);
        sub_100009E70(v88, v74, &qword_1000A9AE8);
        unint64_t v91 = (int *)sub_10000435C(&qword_1000A9AF0);
        sub_100009E70(v81, v74 + v91[12], &qword_1000A9AE8);
        sub_100009E70(v77, v74 + v91[16], &qword_1000A9AE0);
        sub_100009E70(v75, v74 + v91[20], &qword_1000A9AE0);
        sub_100009ED4(v76, &qword_1000A9AE0);
        sub_100009ED4(v90, &qword_1000A9AE0);
        sub_100009ED4(v89, &qword_1000A9AE8);
        sub_100009ED4(v110, &qword_1000A9AE8);
        sub_100009ED4(v75, &qword_1000A9AE0);
        sub_100009ED4(v77, &qword_1000A9AE0);
        sub_100009ED4(v81, &qword_1000A9AE8);
        return sub_100009ED4(v107, &qword_1000A9AE8);
      }
    }
    uint64_t v80 = (uint64_t)v95;
    static HoverEffect.highlight.getter();
    goto LABEL_21;
  }
  type metadata accessor for TextFormattingState();
  sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
  uint64_t result = EnvironmentObject.error()();
  __break(1u);
  return result;
}

uint64_t sub_10003B704@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10002B304();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10003B734@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  int v44 = a1;
  uint64_t v48 = a2;
  uint64_t v4 = type metadata accessor for SymbolRenderingMode();
  uint64_t v42 = *(void *)(v4 - 8);
  uint64_t v43 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (int *)type metadata accessor for TFToggle(0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = sub_10000435C(&qword_1000A9AF8);
  __chkstk_darwin(v45);
  uint64_t v47 = (uint64_t)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000435C(&qword_1000A9B00);
  __chkstk_darwin(v11 - 8);
  uint64_t v46 = (uint64_t)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static SymbolRenderingMode.monochrome.getter();
  uint64_t v13 = *(void *)(v2 + 16);
  uint64_t v14 = *(unsigned __int8 *)(v2 + 24);
  int v15 = *(unsigned __int8 *)(v2 + 25);
  sub_10001F4F8(v13, v14, *(unsigned char *)(v2 + 25));
  uint64_t v16 = sub_100012E64(v13, v14 | (v15 << 8));
  char v18 = v17;
  sub_10001F568(v13, v14, v15);
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  if ((v18 & 1) == 0 && v16 == 1)
  {
    if (qword_1000A8150 != -1) {
      swift_once();
    }
    uint64_t v19 = qword_1000AB450;
    uint64_t v20 = *(void *)algn_1000AB458;
    swift_bridgeObjectRetain();
  }
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v22 = sub_10003DF70(KeyPath);
  uint64_t v24 = v23;
  char v26 = v25;
  swift_release();
  *(_OWORD *)uint64_t v9 = xmmword_100084AC0;
  (*(void (**)(char *, char *, uint64_t))(v42 + 32))(&v9[v7[5]], v6, v43);
  uint64_t v27 = (uint64_t *)&v9[v7[6]];
  *uint64_t v27 = v19;
  v27[1] = v20;
  v9[v7[7]] = v44 & 1;
  uint64_t v28 = &v9[v7[8]];
  *(void *)uint64_t v28 = v22;
  *((void *)v28 + 1) = v24;
  v28[16] = v26 & 1;
  uint64_t v29 = &v9[v7[9]];
  *(void *)uint64_t v29 = swift_getKeyPath();
  v29[8] = 0;
  if (*(void *)v3)
  {
    swift_retain();
    char v30 = sub_10002B918();
    swift_release();
    if (v30)
    {
      uint64_t v31 = *(void *)(v3 + 48);
      char v32 = *(unsigned char *)(v3 + 56);
      sub_10001F504(v31, v32);
      char v33 = sub_100013084(v31, v32);
      sub_10001F574(v31, v32);
      char v34 = v33 ^ 1;
    }
    else
    {
      char v34 = 1;
    }
    uint64_t v35 = swift_getKeyPath();
    uint64_t v36 = swift_allocObject();
    *(unsigned char *)(v36 + 16) = v34 & 1;
    uint64_t v37 = v47;
    sub_10005C814((uint64_t)v9, v47, type metadata accessor for TFToggle);
    uint64_t v38 = (uint64_t *)(v37 + *(int *)(v45 + 36));
    *uint64_t v38 = v35;
    v38[1] = (uint64_t)sub_10005C918;
    v38[2] = v36;
    sub_10005C87C((uint64_t)v9, type metadata accessor for TFToggle);
    swift_retain();
    char v39 = sub_10002B304();
    swift_release();
    if (qword_1000A8150 != -1) {
      swift_once();
    }
    uint64_t v40 = v46;
    sub_10003967C(v39 & 1, qword_1000AB450, *(uint64_t *)algn_1000AB458, &qword_1000A9B00, &qword_1000A9AF8, (void (*)(void))sub_10005925C, v46);
    sub_100009ED4(v37, &qword_1000A9AF8);
    return sub_100009F30(v40, v48, &qword_1000A9B00);
  }
  else
  {
    type metadata accessor for TextFormattingState();
    sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10003BC28@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10002BCC0();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10003BC58@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  int v44 = a1;
  uint64_t v48 = a2;
  uint64_t v4 = type metadata accessor for SymbolRenderingMode();
  uint64_t v42 = *(void *)(v4 - 8);
  uint64_t v43 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (int *)type metadata accessor for TFToggle(0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = sub_10000435C(&qword_1000A9AF8);
  __chkstk_darwin(v45);
  uint64_t v47 = (uint64_t)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000435C(&qword_1000A9B00);
  __chkstk_darwin(v11 - 8);
  uint64_t v46 = (uint64_t)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static SymbolRenderingMode.monochrome.getter();
  uint64_t v13 = *(void *)(v2 + 16);
  uint64_t v14 = *(unsigned __int8 *)(v2 + 24);
  int v15 = *(unsigned __int8 *)(v2 + 25);
  sub_10001F4F8(v13, v14, *(unsigned char *)(v2 + 25));
  uint64_t v16 = sub_100012E64(v13, v14 | (v15 << 8));
  char v18 = v17;
  sub_10001F568(v13, v14, v15);
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  if ((v18 & 1) == 0 && v16 == 1)
  {
    if (qword_1000A8158 != -1) {
      swift_once();
    }
    uint64_t v19 = qword_1000AB460;
    uint64_t v20 = *(void *)algn_1000AB468;
    swift_bridgeObjectRetain();
  }
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v22 = sub_10003DF70(KeyPath);
  uint64_t v24 = v23;
  char v26 = v25;
  swift_release();
  *(_OWORD *)uint64_t v9 = xmmword_100084AD0;
  (*(void (**)(char *, char *, uint64_t))(v42 + 32))(&v9[v7[5]], v6, v43);
  uint64_t v27 = (uint64_t *)&v9[v7[6]];
  *uint64_t v27 = v19;
  v27[1] = v20;
  v9[v7[7]] = v44 & 1;
  uint64_t v28 = &v9[v7[8]];
  *(void *)uint64_t v28 = v22;
  *((void *)v28 + 1) = v24;
  v28[16] = v26 & 1;
  uint64_t v29 = &v9[v7[9]];
  *(void *)uint64_t v29 = swift_getKeyPath();
  v29[8] = 0;
  if (*(void *)v3)
  {
    swift_retain();
    char v30 = sub_10002C2D4();
    swift_release();
    if (v30)
    {
      uint64_t v31 = *(void *)(v3 + 48);
      char v32 = *(unsigned char *)(v3 + 56);
      sub_10001F504(v31, v32);
      char v33 = sub_100013084(v31, v32);
      sub_10001F574(v31, v32);
      char v34 = v33 ^ 1;
    }
    else
    {
      char v34 = 1;
    }
    uint64_t v35 = swift_getKeyPath();
    uint64_t v36 = swift_allocObject();
    *(unsigned char *)(v36 + 16) = v34 & 1;
    uint64_t v37 = v47;
    sub_10005C814((uint64_t)v9, v47, type metadata accessor for TFToggle);
    uint64_t v38 = (uint64_t *)(v37 + *(int *)(v45 + 36));
    *uint64_t v38 = v35;
    v38[1] = (uint64_t)sub_10005C918;
    v38[2] = v36;
    sub_10005C87C((uint64_t)v9, type metadata accessor for TFToggle);
    swift_retain();
    char v39 = sub_10002BCC0();
    swift_release();
    if (qword_1000A8158 != -1) {
      swift_once();
    }
    uint64_t v40 = v46;
    sub_10003967C(v39 & 1, qword_1000AB460, *(uint64_t *)algn_1000AB468, &qword_1000A9B00, &qword_1000A9AF8, (void (*)(void))sub_10005925C, v46);
    sub_100009ED4(v37, &qword_1000A9AF8);
    return sub_100009F30(v40, v48, &qword_1000A9B00);
  }
  else
  {
    type metadata accessor for TextFormattingState();
    sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10003C14C@<X0>(unsigned char *a1@<X8>)
{
  return sub_10003C600((uint64_t (*)(void))&UITextFormattingViewController.FormattingDescriptor.underlinePresent.getter, a1);
}

uint64_t sub_10003C164@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  int v39 = a1;
  uint64_t v42 = a2;
  uint64_t v3 = sub_10000435C(&qword_1000A8FF8);
  __chkstk_darwin(v3 - 8);
  uint64_t v41 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for SymbolRenderingMode();
  uint64_t v37 = *(void *)(v5 - 8);
  uint64_t v38 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (int *)type metadata accessor for TFToggle(0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000435C(&qword_1000A9810);
  __chkstk_darwin(v11 - 8);
  uint64_t v40 = (uint64_t)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static SymbolRenderingMode.monochrome.getter();
  uint64_t v13 = *(void *)(v2 + 16);
  uint64_t v14 = *(unsigned __int8 *)(v2 + 24);
  int v15 = *(unsigned __int8 *)(v2 + 25);
  sub_10001F4F8(v13, v14, *(unsigned char *)(v2 + 25));
  uint64_t v16 = sub_100012E64(v13, v14 | (v15 << 8));
  char v18 = v17;
  sub_10001F568(v13, v14, v15);
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  if ((v18 & 1) == 0 && v16 == 1)
  {
    if (qword_1000A8160 != -1) {
      swift_once();
    }
    uint64_t v19 = qword_1000AB470;
    uint64_t v20 = *(void *)algn_1000AB478;
    swift_bridgeObjectRetain();
  }
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v22 = sub_10003DF70(KeyPath);
  uint64_t v24 = v23;
  char v26 = v25;
  swift_release();
  *(_OWORD *)uint64_t v10 = xmmword_100084AE0;
  (*(void (**)(char *, char *, uint64_t))(v37 + 32))(&v10[v8[5]], v7, v38);
  uint64_t v27 = (uint64_t *)&v10[v8[6]];
  *uint64_t v27 = v19;
  v27[1] = v20;
  v10[v8[7]] = v39 & 1;
  uint64_t v28 = &v10[v8[8]];
  *(void *)uint64_t v28 = v22;
  *((void *)v28 + 1) = v24;
  v28[16] = v26 & 1;
  uint64_t v29 = &v10[v8[9]];
  *(void *)uint64_t v29 = swift_getKeyPath();
  v29[8] = 0;
  if (*(void *)v2)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    uint64_t v30 = (uint64_t)v41;
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v31 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 48))(v30, 1, v31)) {
      char v32 = 0;
    }
    else {
      char v32 = UITextFormattingViewController.FormattingDescriptor.underlinePresent.getter();
    }
    uint64_t v33 = v42;
    sub_100009ED4(v30, &qword_1000A8FF8);
    swift_release();
    if (qword_1000A8160 != -1) {
      swift_once();
    }
    uint64_t v34 = v40;
    sub_100039128(v32 & 1, qword_1000AB470, *(uint64_t *)algn_1000AB478, v40);
    sub_10005C87C((uint64_t)v10, type metadata accessor for TFToggle);
    return sub_100009F30(v34, v33, &qword_1000A9810);
  }
  else
  {
    type metadata accessor for TextFormattingState();
    sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10003C5E8@<X0>(unsigned char *a1@<X8>)
{
  return sub_10003C600((uint64_t (*)(void))&UITextFormattingViewController.FormattingDescriptor.strikethroughPresent.getter, a1);
}

uint64_t sub_10003C600@<X0>(uint64_t (*a1)(void)@<X3>, unsigned char *a2@<X8>)
{
  uint64_t v4 = sub_10000435C(&qword_1000A8FF8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v7 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7)) {
    char v8 = 0;
  }
  else {
    char v8 = a1();
  }
  uint64_t result = sub_100009ED4((uint64_t)v6, &qword_1000A8FF8);
  *a2 = v8 & 1;
  return result;
}

uint64_t sub_10003C738@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  int v39 = a1;
  uint64_t v42 = a2;
  uint64_t v3 = sub_10000435C(&qword_1000A8FF8);
  __chkstk_darwin(v3 - 8);
  uint64_t v41 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for SymbolRenderingMode();
  uint64_t v37 = *(void *)(v5 - 8);
  uint64_t v38 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v8 = (int *)type metadata accessor for TFToggle(0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000435C(&qword_1000A9810);
  __chkstk_darwin(v11 - 8);
  uint64_t v40 = (uint64_t)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static SymbolRenderingMode.monochrome.getter();
  uint64_t v13 = *(void *)(v2 + 16);
  uint64_t v14 = *(unsigned __int8 *)(v2 + 24);
  int v15 = *(unsigned __int8 *)(v2 + 25);
  sub_10001F4F8(v13, v14, *(unsigned char *)(v2 + 25));
  uint64_t v16 = sub_100012E64(v13, v14 | (v15 << 8));
  char v18 = v17;
  sub_10001F568(v13, v14, v15);
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  if ((v18 & 1) == 0 && v16 == 1)
  {
    if (qword_1000A8168 != -1) {
      swift_once();
    }
    uint64_t v19 = qword_1000AB480;
    uint64_t v20 = *(void *)algn_1000AB488;
    swift_bridgeObjectRetain();
  }
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v22 = sub_10003DF70(KeyPath);
  uint64_t v24 = v23;
  char v26 = v25;
  swift_release();
  *(_OWORD *)uint64_t v10 = xmmword_100084AF0;
  (*(void (**)(char *, char *, uint64_t))(v37 + 32))(&v10[v8[5]], v7, v38);
  uint64_t v27 = (uint64_t *)&v10[v8[6]];
  *uint64_t v27 = v19;
  v27[1] = v20;
  v10[v8[7]] = v39 & 1;
  uint64_t v28 = &v10[v8[8]];
  *(void *)uint64_t v28 = v22;
  *((void *)v28 + 1) = v24;
  v28[16] = v26 & 1;
  uint64_t v29 = &v10[v8[9]];
  *(void *)uint64_t v29 = swift_getKeyPath();
  v29[8] = 0;
  if (*(void *)v2)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    uint64_t v30 = (uint64_t)v41;
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v31 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 48))(v30, 1, v31)) {
      char v32 = 0;
    }
    else {
      char v32 = UITextFormattingViewController.FormattingDescriptor.strikethroughPresent.getter();
    }
    uint64_t v33 = v42;
    sub_100009ED4(v30, &qword_1000A8FF8);
    swift_release();
    if (qword_1000A8168 != -1) {
      swift_once();
    }
    uint64_t v34 = v40;
    sub_100039128(v32 & 1, qword_1000AB480, *(uint64_t *)algn_1000AB488, v40);
    sub_10005C87C((uint64_t)v10, type metadata accessor for TFToggle);
    return sub_100009F30(v34, v33, &qword_1000A9810);
  }
  else
  {
    type metadata accessor for TextFormattingState();
    sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10003CBBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v98 = a2;
  uint64_t v95 = sub_10000435C(&qword_1000A9B10);
  __chkstk_darwin(v95);
  uint64_t v92 = (uint64_t)v80 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v103 = sub_10000435C(&qword_1000A9B18);
  __chkstk_darwin(v103);
  uint64_t v102 = (uint64_t)v80 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = sub_10000435C(&qword_1000A9B20);
  __chkstk_darwin(v94);
  uint64_t v86 = (uint64_t)v80 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = sub_10000435C(&qword_1000A9B28);
  __chkstk_darwin(v100);
  double v93 = (char *)v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000435C(&qword_1000A9810);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v101 = (char *)v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v80 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v105 = (uint64_t)v80 - v14;
  __chkstk_darwin(v13);
  uint64_t v104 = (uint64_t)v80 - v15;
  uint64_t v91 = sub_10000435C(&qword_1000A9B30);
  __chkstk_darwin(v91);
  uint64_t v85 = (uint64_t)v80 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000435C(&qword_1000A9B00);
  uint64_t v18 = __chkstk_darwin(v17 - 8);
  uint64_t v20 = (char *)v80 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v23 = (char *)v80 - v22;
  uint64_t v24 = __chkstk_darwin(v21);
  uint64_t v107 = (char *)v80 - v25;
  __chkstk_darwin(v24);
  uint64_t v106 = (uint64_t)v80 - v26;
  uint64_t v97 = sub_10000435C(&qword_1000A9B38);
  __chkstk_darwin(v97);
  uint64_t v96 = (uint64_t)v80 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_10000435C(&qword_1000A9B40);
  __chkstk_darwin(v28);
  uint64_t v89 = (uint64_t)v80 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = sub_10000435C(&qword_1000A9B48);
  __chkstk_darwin(v99);
  uint64_t v90 = (char *)v80 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = sub_10000435C(&qword_1000A9B50);
  uint64_t v82 = *(void *)(v87 - 8);
  __chkstk_darwin(v87);
  uint64_t v81 = (char *)v80 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = sub_10000435C(&qword_1000A9B58);
  uint64_t v84 = *(void *)(v88 - 8);
  __chkstk_darwin(v88);
  uint64_t v83 = (char *)v80 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = *(void *)(a1 + 16);
  uint64_t v34 = *(unsigned __int8 *)(a1 + 24);
  int v35 = *(unsigned __int8 *)(a1 + 25);
  sub_10001F4F8(v33, v34, *(unsigned char *)(a1 + 25));
  uint64_t v36 = sub_100012E64(v33, v34 | (v35 << 8));
  char v38 = v37;
  uint64_t v39 = v33;
  uint64_t v40 = (uint64_t)v101;
  uint64_t v41 = sub_10001F568(v39, v34, v35);
  if ((v38 & 1) == 0)
  {
    v80[1] = v28;
    uint64_t v42 = v40;
    uint64_t v43 = v104;
    uint64_t v44 = v105;
    uint64_t v45 = v102;
    uint64_t v46 = (uint64_t)v107;
    if (v36 == 3)
    {
      uint64_t v66 = v106;
      sub_10003B734(0, v106);
      sub_10003BC58(0, v46);
      sub_10003C164(0, v43);
      sub_100009E70(v66, (uint64_t)v23, &qword_1000A9B00);
      sub_100009E70(v46, (uint64_t)v20, &qword_1000A9B00);
      uint64_t v67 = v44;
      sub_100009E70(v43, v44, &qword_1000A9810);
      uint64_t v68 = v86;
      sub_100009E70((uint64_t)v23, v86, &qword_1000A9B00);
      uint64_t v69 = sub_10000435C(&qword_1000A9B98);
      sub_100009E70((uint64_t)v20, v68 + *(int *)(v69 + 48), &qword_1000A9B00);
      sub_100009E70(v67, v68 + *(int *)(v69 + 64), &qword_1000A9810);
      sub_100009ED4(v67, &qword_1000A9810);
      sub_100009ED4((uint64_t)v20, &qword_1000A9B00);
      sub_100009ED4((uint64_t)v23, &qword_1000A9B00);
      sub_100009E70(v68, v45, &qword_1000A9B20);
      swift_storeEnumTagMultiPayload();
      sub_10000A368(&qword_1000A9B68, &qword_1000A9B20);
      sub_10000A368(&qword_1000A9B70, &qword_1000A9B10);
      uint64_t v70 = (uint64_t)v93;
      _ConditionalContent<>.init(storage:)();
      sub_100009ED4(v68, &qword_1000A9B20);
      sub_100009E70(v70, v96, &qword_1000A9B28);
      swift_storeEnumTagMultiPayload();
      sub_100059364();
      sub_100059478();
      _ConditionalContent<>.init(storage:)();
      sub_100009ED4(v70, &qword_1000A9B28);
      sub_100009ED4(v43, &qword_1000A9810);
      sub_100009ED4((uint64_t)v107, &qword_1000A9B00);
      uint64_t v65 = v106;
      return sub_100009ED4(v65, &qword_1000A9B00);
    }
    if (v36 == 2)
    {
      uint64_t v71 = v106;
      sub_10003B734(0, v106);
      uint64_t v72 = v46;
      sub_10003BC58(0, v46);
      sub_100009E70(v71, (uint64_t)v23, &qword_1000A9B00);
      uint64_t v73 = v46;
      uint64_t v74 = (uint64_t)v20;
      sub_100009E70(v73, (uint64_t)v20, &qword_1000A9B00);
      uint64_t v75 = v85;
      sub_100009E70((uint64_t)v23, v85, &qword_1000A9B00);
      uint64_t v76 = sub_10000435C(&qword_1000A9BA0);
      sub_100009E70(v74, v75 + *(int *)(v76 + 48), &qword_1000A9B00);
      sub_100009ED4(v74, &qword_1000A9B00);
      sub_100009ED4((uint64_t)v23, &qword_1000A9B00);
      sub_100009E70(v75, v89, &qword_1000A9B30);
      swift_storeEnumTagMultiPayload();
      uint64_t v77 = sub_10000A368(&qword_1000A9B80, &qword_1000A9B50);
      unint64_t v78 = sub_100057D90();
      uint64_t v109 = v87;
      uint64_t v110 = &type metadata for TFMenuStyle;
      uint64_t v111 = v77;
      unint64_t v112 = v78;
      swift_getOpaqueTypeConformance2();
      sub_10000A368(&qword_1000A9B88, &qword_1000A9B30);
      uint64_t v79 = (uint64_t)v90;
      _ConditionalContent<>.init(storage:)();
      sub_100009ED4(v75, &qword_1000A9B30);
      sub_100009E70(v79, v96, &qword_1000A9B48);
      swift_storeEnumTagMultiPayload();
      sub_100059364();
      sub_100059478();
      _ConditionalContent<>.init(storage:)();
      sub_100009ED4(v79, &qword_1000A9B48);
      sub_100009ED4(v72, &qword_1000A9B00);
      uint64_t v65 = v71;
      return sub_100009ED4(v65, &qword_1000A9B00);
    }
    uint64_t v40 = v42;
    if (v36 == 1)
    {
      __chkstk_darwin(v41);
      v80[-2] = a1;
      sub_10000435C(&qword_1000A99D0);
      sub_10000A368(&qword_1000A99E0, &qword_1000A99D0);
      uint64_t v107 = (char *)&protocol conformance descriptor for TupleView<A>;
      sub_10000A368(&qword_1000A9B70, &qword_1000A9B10);
      uint64_t v47 = v81;
      Menu.init(content:label:)();
      char v108 = 0;
      State.init(wrappedValue:)();
      char v48 = v109;
      char v49 = v110;
      LOBYTE(v109) = 0;
      LOBYTE(v110) = v48;
      uint64_t v111 = (uint64_t)v49;
      uint64_t v50 = sub_10000A368(&qword_1000A9B80, &qword_1000A9B50);
      unint64_t v51 = sub_100057D90();
      uint64_t v52 = v83;
      uint64_t v53 = v87;
      View.menuStyle<A>(_:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v82 + 8))(v47, v53);
      uint64_t v54 = v84;
      uint64_t v55 = v88;
      (*(void (**)(uint64_t, char *, uint64_t))(v84 + 16))(v89, v52, v88);
      swift_storeEnumTagMultiPayload();
      uint64_t v109 = v53;
      uint64_t v110 = &type metadata for TFMenuStyle;
      uint64_t v111 = v50;
      unint64_t v112 = v51;
      swift_getOpaqueTypeConformance2();
      sub_10000A368(&qword_1000A9B88, &qword_1000A9B30);
      uint64_t v56 = (uint64_t)v90;
      _ConditionalContent<>.init(storage:)();
      sub_100009E70(v56, v96, &qword_1000A9B48);
      swift_storeEnumTagMultiPayload();
      sub_100059364();
      sub_100059478();
      _ConditionalContent<>.init(storage:)();
      sub_100009ED4(v56, &qword_1000A9B48);
      return (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v52, v55);
    }
  }
  uint64_t v58 = v106;
  sub_10003B734(0, v106);
  uint64_t v59 = (uint64_t)v107;
  sub_10003BC58(0, (uint64_t)v107);
  uint64_t v60 = v104;
  sub_10003C164(0, v104);
  uint64_t v61 = v105;
  sub_10003C738(0, v105);
  sub_100009E70(v58, (uint64_t)v23, &qword_1000A9B00);
  sub_100009E70(v59, (uint64_t)v20, &qword_1000A9B00);
  sub_100009E70(v60, (uint64_t)v12, &qword_1000A9810);
  sub_100009E70(v61, v40, &qword_1000A9810);
  uint64_t v62 = v92;
  sub_100009E70((uint64_t)v23, v92, &qword_1000A9B00);
  uint64_t v63 = (int *)sub_10000435C(&qword_1000A9B60);
  sub_100009E70((uint64_t)v20, v62 + v63[12], &qword_1000A9B00);
  sub_100009E70((uint64_t)v12, v62 + v63[16], &qword_1000A9810);
  sub_100009E70(v40, v62 + v63[20], &qword_1000A9810);
  sub_100009ED4(v40, &qword_1000A9810);
  sub_100009ED4((uint64_t)v12, &qword_1000A9810);
  sub_100009ED4((uint64_t)v20, &qword_1000A9B00);
  sub_100009ED4((uint64_t)v23, &qword_1000A9B00);
  sub_100009E70(v62, v102, &qword_1000A9B10);
  swift_storeEnumTagMultiPayload();
  sub_10000A368(&qword_1000A9B68, &qword_1000A9B20);
  sub_10000A368(&qword_1000A9B70, &qword_1000A9B10);
  uint64_t v64 = (uint64_t)v93;
  _ConditionalContent<>.init(storage:)();
  sub_100009ED4(v62, &qword_1000A9B10);
  sub_100009E70(v64, v96, &qword_1000A9B28);
  swift_storeEnumTagMultiPayload();
  sub_100059364();
  sub_100059478();
  _ConditionalContent<>.init(storage:)();
  sub_100009ED4(v64, &qword_1000A9B28);
  sub_100009ED4(v105, &qword_1000A9810);
  sub_100009ED4(v104, &qword_1000A9810);
  sub_100009ED4((uint64_t)v107, &qword_1000A9B00);
  uint64_t v65 = v106;
  return sub_100009ED4(v65, &qword_1000A9B00);
}

uint64_t sub_10003DAEC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v33 = a1;
  uint64_t v1 = sub_10000435C(&qword_1000A9810);
  uint64_t v2 = __chkstk_darwin(v1 - 8);
  uint64_t v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v2);
  uint64_t v7 = (char *)&v30 - v6;
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v30 - v9;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v30 - v11;
  uint64_t v13 = sub_10000435C(&qword_1000A9B00);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v30 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v22 = (char *)&v30 - v21;
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v30 - v23;
  sub_10003B734(1, (uint64_t)&v30 - v23);
  sub_10003BC58(1, (uint64_t)v22);
  sub_10003C164(1, (uint64_t)v12);
  uint64_t v31 = v10;
  sub_10003C738(1, (uint64_t)v10);
  uint64_t v25 = (uint64_t)v19;
  uint64_t v32 = v19;
  sub_100009E70((uint64_t)v24, (uint64_t)v19, &qword_1000A9B00);
  sub_100009E70((uint64_t)v22, (uint64_t)v16, &qword_1000A9B00);
  sub_100009E70((uint64_t)v12, (uint64_t)v7, &qword_1000A9810);
  uint64_t v26 = (uint64_t)v4;
  sub_100009E70((uint64_t)v10, (uint64_t)v4, &qword_1000A9810);
  uint64_t v27 = v33;
  sub_100009E70(v25, v33, &qword_1000A9B00);
  uint64_t v28 = (int *)sub_10000435C(&qword_1000A9B60);
  sub_100009E70((uint64_t)v16, v27 + v28[12], &qword_1000A9B00);
  sub_100009E70((uint64_t)v7, v27 + v28[16], &qword_1000A9810);
  sub_100009E70(v26, v27 + v28[20], &qword_1000A9810);
  sub_100009ED4((uint64_t)v31, &qword_1000A9810);
  sub_100009ED4((uint64_t)v12, &qword_1000A9810);
  sub_100009ED4((uint64_t)v22, &qword_1000A9B00);
  sub_100009ED4((uint64_t)v24, &qword_1000A9B00);
  sub_100009ED4(v26, &qword_1000A9810);
  sub_100009ED4((uint64_t)v7, &qword_1000A9810);
  sub_100009ED4((uint64_t)v16, &qword_1000A9B00);
  return sub_100009ED4((uint64_t)v32, &qword_1000A9B00);
}

uint64_t sub_10003DDE0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for TFSymbol(0);
  uint64_t v3 = (int *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static SymbolRenderingMode.monochrome.getter();
  uint64_t v6 = static Font.title3.getter();
  *(void *)uint64_t v5 = 0xD000000000000015;
  *((void *)v5 + 1) = 0x8000000100088040;
  v5[16] = 0;
  *((void *)v5 + 3) = v6;
  *((void *)v5 + 4) = 0;
  v5[v3[11]] = 1;
  v5[v3[12]] = 1;
  uint64_t v7 = &v5[v3[13]];
  *(void *)uint64_t v7 = swift_getKeyPath();
  v7[8] = 0;
  uint64_t v8 = &v5[v3[14]];
  *(void *)uint64_t v8 = swift_getKeyPath();
  v8[8] = 0;
  sub_10005A91C((uint64_t)v5, a1, type metadata accessor for TFSymbol);
  uint64_t v9 = (int *)sub_10000435C(&qword_1000A99D0);
  uint64_t v10 = a1 + v9[9];
  v15[15] = 0;
  State.init(wrappedValue:)();
  uint64_t v11 = v16;
  *(unsigned char *)uint64_t v10 = v15[16];
  *(void *)(v10 + 8) = v11;
  uint64_t v12 = a1 + v9[10];
  *(void *)uint64_t v12 = swift_getKeyPath();
  *(unsigned char *)(v12 + 8) = 0;
  uint64_t v13 = a1 + v9[11];
  uint64_t result = swift_getKeyPath();
  *(void *)uint64_t v13 = result;
  *(unsigned char *)(v13 + 8) = 0;
  return result;
}

uint64_t sub_10003DF70(uint64_t a1)
{
  uint64_t v2 = v1;
  type metadata accessor for MainActor();
  long long v18 = *v1;
  uint64_t v16 = *((void *)v1 + 2);
  __int16 v17 = *((_WORD *)v1 + 12);
  uint64_t v14 = *((void *)v1 + 4);
  char v15 = *((unsigned char *)v1 + 40);
  uint64_t v12 = *((void *)v1 + 6);
  char v13 = *((unsigned char *)v1 + 56);
  sub_10005819C((uint64_t)&v18);
  sub_100057E78((uint64_t)&v16);
  sub_100057EAC((uint64_t)&v14);
  sub_100057EAC((uint64_t)&v12);
  swift_retain();
  uint64_t v4 = static MainActor.shared.getter();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = &protocol witness table for MainActor;
  long long v6 = v1[1];
  *(_OWORD *)(v5 + 32) = *v1;
  *(_OWORD *)(v5 + 48) = v6;
  *(_OWORD *)(v5 + 64) = v1[2];
  *(_OWORD *)(v5 + 73) = *(long long *)((char *)v1 + 41);
  *(void *)(v5 + 96) = a1;
  sub_10005819C((uint64_t)&v18);
  sub_100057E78((uint64_t)&v16);
  sub_100057EAC((uint64_t)&v14);
  sub_100057EAC((uint64_t)&v12);
  swift_retain();
  uint64_t v7 = static MainActor.shared.getter();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v7;
  *(void *)(v8 + 24) = &protocol witness table for MainActor;
  long long v9 = v2[1];
  *(_OWORD *)(v8 + 32) = *v2;
  *(_OWORD *)(v8 + 48) = v9;
  *(_OWORD *)(v8 + 64) = v2[2];
  *(_OWORD *)(v8 + 73) = *(_OWORD *)((char *)v2 + 41);
  *(void *)(v8 + 96) = a1;
  Binding.init(get:set:)();
  return v11;
}

uint64_t sub_10003E10C@<X0>(uint64_t *a1@<X2>, unsigned char *a2@<X8>)
{
  if (*a1)
  {
    uint64_t v7 = *a1;
    swift_retain();
    uint64_t v3 = (void (*)(unsigned char *, void))swift_readAtKeyPath();
    *a2 = *v4;
    v3(v6, 0);
    return swift_release();
  }
  else
  {
    type metadata accessor for TextFormattingState();
    sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10003E1E4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (*a4)
  {
    swift_retain();
    swift_setAtReferenceWritableKeyPath();
    return swift_release();
  }
  else
  {
    type metadata accessor for TextFormattingState();
    sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10003E29C@<X0>(uint64_t a1@<X8>)
{
  return sub_10003A578(a1);
}

uint64_t sub_10003E2E0()
{
  uint64_t v1 = v0;
  uint64_t v2 = (int *)sub_10000435C(&qword_1000A9BA8);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = &v19[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  long long v6 = &v5[*(int *)(v3 + 40)];
  uint64_t v7 = type metadata accessor for HoverEffect();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  *(void *)uint64_t v5 = 0;
  *((_WORD *)v5 + 4) = 257;
  sub_10003E540(v1, (uint64_t)&v5[v2[11]]);
  uint64_t v8 = &v5[v2[12]];
  *(void *)uint64_t v8 = swift_getKeyPath();
  v8[8] = 0;
  long long v9 = &v5[v2[13]];
  *(void *)long long v9 = swift_getKeyPath();
  v9[8] = 0;
  uint64_t v10 = &v5[v2[14]];
  *(void *)uint64_t v10 = swift_getKeyPath();
  v10[8] = 0;
  uint64_t v11 = &v5[v2[15]];
  v19[15] = 0;
  State.init(wrappedValue:)();
  uint64_t v12 = v21;
  *uint64_t v11 = v20;
  *((void *)v11 + 1) = v12;
  if (qword_1000A8108 != -1) {
    swift_once();
  }
  uint64_t v20 = qword_1000AB3C0;
  uint64_t v21 = *(void *)algn_1000AB3C8;
  sub_1000099C8();
  swift_bridgeObjectRetain();
  uint64_t v13 = Text.init<A>(_:)();
  uint64_t v15 = v14;
  char v17 = v16 & 1;
  sub_10000A368(&qword_1000A9BB0, &qword_1000A9BA8);
  View.accessibilityLabel(_:)();
  sub_100009A1C(v13, v15, v17);
  swift_bridgeObjectRelease();
  return sub_100009ED4((uint64_t)v5, &qword_1000A9BA8);
}

uint64_t sub_10003E540@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v57 = a2;
  uint64_t v55 = sub_10000435C(&qword_1000A9BB8);
  uint64_t v50 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  uint64_t v4 = (char *)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = sub_10000435C(&qword_1000A9BC0);
  uint64_t v52 = *(char **)(v56 - 8);
  uint64_t v5 = __chkstk_darwin(v56);
  uint64_t v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  unint64_t v51 = (char *)&v50 - v8;
  uint64_t v53 = sub_10000435C(&qword_1000A9BC8);
  __chkstk_darwin(v53);
  uint64_t v54 = (uint64_t)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000435C(&qword_1000A9BD0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000435C(&qword_1000A9BD8);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000435C(&qword_1000A9BE0);
  __chkstk_darwin(v16);
  long long v18 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = (int *)sub_10000435C(&qword_1000A9BE8);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v50 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v50 - v23;
  long long v67 = *(_OWORD *)a1;
  uint64_t v25 = sub_10005736C(v67);
  if (v25)
  {
    uint64_t v65 = *(void *)(a1 + 16);
    __int16 v66 = *(_WORD *)(a1 + 24);
    uint64_t v63 = *(void *)(a1 + 32);
    char v64 = *(unsigned char *)(a1 + 40);
    uint64_t v26 = (_OWORD *)swift_allocObject();
    long long v27 = *(_OWORD *)(a1 + 16);
    v26[1] = *(_OWORD *)a1;
    v26[2] = v27;
    *(_OWORD *)((char *)v26 + 41) = *(_OWORD *)(a1 + 25);
    *(_WORD *)uint64_t v22 = 0;
    _OWORD v22[2] = 1;
    uint64_t v52 = &v22[v19[11]];
    sub_10005819C((uint64_t)&v67);
    sub_100057E78((uint64_t)&v65);
    sub_100057EAC((uint64_t)&v63);
    sub_10004011C(a1, (uint64_t)v12);
    uint64_t v28 = static Alignment.leading.getter();
    sub_1000352CC(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v15, 0.0, 1, 0.0, 1, v28, v29, (uint64_t)&qword_1000A9BD0, (void (*)(uint64_t, uint64_t, uint64_t))sub_100009E70, &qword_1000A9BD8);
    sub_100009ED4((uint64_t)v12, &qword_1000A9BD0);
    uint64_t KeyPath = swift_getKeyPath();
    sub_100009E70((uint64_t)v15, (uint64_t)v18, &qword_1000A9BD8);
    uint64_t v31 = &v18[*(int *)(v16 + 36)];
    *(void *)uint64_t v31 = KeyPath;
    *((void *)v31 + 1) = 1;
    v31[16] = 0;
    sub_100009ED4((uint64_t)v15, &qword_1000A9BD8);
    sub_100009F30((uint64_t)v18, (uint64_t)v52, &qword_1000A9BE0);
    uint64_t v32 = (uint64_t (**)())&v22[v19[12]];
    char *v32 = sub_10005C938;
    v32[1] = (uint64_t (*)())v26;
    uint64_t v33 = &v22[v19[13]];
    uint64_t v58 = 0;
    char v59 = 1;
    sub_10000435C(&qword_1000A9460);
    State.init(wrappedValue:)();
    char v34 = BYTE8(v60);
    uint64_t v35 = v61;
    *(void *)uint64_t v33 = v60;
    v33[8] = v34;
    *((void *)v33 + 2) = v35;
    uint64_t v36 = v19[14];
    uint64_t v58 = 0;
    sub_10000435C(&qword_1000A9870);
    State.init(wrappedValue:)();
    *(_OWORD *)&v22[v36] = v60;
    char v37 = &v22[v19[15]];
    *(void *)char v37 = swift_getKeyPath();
    v37[8] = 0;
    sub_100009F30((uint64_t)v22, (uint64_t)v24, &qword_1000A9BE8);
    sub_100009E70((uint64_t)v24, v54, &qword_1000A9BE8);
    swift_storeEnumTagMultiPayload();
    sub_10000A368(&qword_1000A9C18, &qword_1000A9BE8);
    uint64_t v38 = sub_10000A368(&qword_1000A9C10, &qword_1000A9BB8);
    unint64_t v39 = sub_100057D90();
    *(void *)&long long v60 = v55;
    *((void *)&v60 + 1) = &type metadata for TFMenuStyle;
    uint64_t v61 = v38;
    unint64_t v62 = v39;
    swift_getOpaqueTypeConformance2();
    _ConditionalContent<>.init(storage:)();
    return sub_100009ED4((uint64_t)v24, &qword_1000A9BE8);
  }
  else
  {
    uint64_t v41 = __chkstk_darwin(v25);
    __chkstk_darwin(v41);
    sub_10000435C(&qword_1000A9BF0);
    sub_10000435C(&qword_1000A9BF8);
    sub_10000A368(&qword_1000A9C00, &qword_1000A9BF0);
    sub_10000A368(&qword_1000A9C08, &qword_1000A9BF8);
    Menu.init(content:label:)();
    LOBYTE(v65) = 0;
    State.init(wrappedValue:)();
    char v42 = v60;
    uint64_t v43 = *((void *)&v60 + 1);
    LOBYTE(v60) = 0;
    BYTE8(v60) = v42;
    uint64_t v61 = v43;
    uint64_t v44 = sub_10000A368(&qword_1000A9C10, &qword_1000A9BB8);
    unint64_t v45 = sub_100057D90();
    uint64_t v46 = v55;
    View.menuStyle<A>(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v50 + 8))(v4, v46);
    uint64_t v47 = v51;
    uint64_t v48 = (uint64_t)v52;
    uint64_t v49 = v56;
    (*((void (**)(char *, char *, uint64_t))v52 + 4))(v51, v7, v56);
    (*(void (**)(uint64_t, char *, uint64_t))(v48 + 16))(v54, v47, v49);
    swift_storeEnumTagMultiPayload();
    sub_10000A368(&qword_1000A9C18, &qword_1000A9BE8);
    *(void *)&long long v60 = v46;
    *((void *)&v60 + 1) = &type metadata for TFMenuStyle;
    uint64_t v61 = v44;
    unint64_t v62 = v45;
    swift_getOpaqueTypeConformance2();
    _ConditionalContent<>.init(storage:)();
    return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v47, v49);
  }
}

uint64_t sub_10003EDF8@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v90 = a2;
  uint64_t v104 = type metadata accessor for Divider();
  uint64_t v107 = *(void *)(v104 - 8);
  uint64_t v3 = __chkstk_darwin(v104);
  uint64_t v106 = (char *)&v85 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  char v108 = (char *)&v85 - v5;
  uint64_t v96 = sub_10000435C(&qword_1000A9C70);
  uint64_t v115 = *(void *)(v96 - 8);
  uint64_t v6 = __chkstk_darwin(v96);
  uint64_t v105 = (char *)&v85 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v85 - v9;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v85 - v11;
  if (*(void *)a1)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    swift_getKeyPath();
    uint64_t v126 = *(void *)(a1 + 16);
    __int16 v127 = *(_WORD *)(a1 + 24);
    uint64_t v124 = *(void *)(a1 + 32);
    char v125 = *(unsigned char *)(a1 + 40);
    uint64_t v13 = (_OWORD *)swift_allocObject();
    long long v14 = *(_OWORD *)(a1 + 16);
    v13[1] = *(_OWORD *)a1;
    void v13[2] = v14;
    *(_OWORD *)((char *)v13 + 41) = *(_OWORD *)(a1 + 25);
    swift_retain();
    sub_100057EAC((uint64_t)&v124);
    sub_100057E78((uint64_t)&v126);
    sub_10000435C(&qword_1000A83B0);
    type metadata accessor for TFToggle(0);
    sub_10000A368(&qword_1000A86D8, &qword_1000A83B0);
    sub_100059884();
    sub_100057C6C(&qword_1000A9850, (void (*)(uint64_t))type metadata accessor for TFToggle);
    ForEach<>.init(_:id:content:)();
    uint64_t v15 = v115;
    uint64_t v16 = v96;
    (*(void (**)(char *, char *, uint64_t))(v115 + 32))(v12, v10, v96);
    Divider.init()();
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v113 = 0;
    uint64_t v114 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v111 = 0;
    uint64_t v112 = 0;
    uint64_t v109 = 0;
    uint64_t v110 = 0;
    uint64_t KeyPath = 0;
    uint64_t v97 = v12;
    if (v121)
    {
      uint64_t v22 = (_OWORD *)swift_allocObject();
      long long v24 = *(_OWORD *)(a1 + 16);
      v22[1] = *(_OWORD *)a1;
      _OWORD v22[2] = v24;
      *(_OWORD *)((char *)v22 + 41) = *(_OWORD *)(a1 + 25);
      swift_retain();
      sub_100057EAC((uint64_t)&v124);
      sub_100057E78((uint64_t)&v126);
      if (qword_1000A8198 != -1) {
        swift_once();
      }
      uint64_t v121 = qword_1000AB4E0;
      uint64_t v122 = *(void *)algn_1000AB4E8;
      sub_1000099C8();
      swift_bridgeObjectRetain();
      uint64_t v18 = Text.init<A>(_:)();
      uint64_t v19 = v25;
      uint64_t v20 = v26;
      uint64_t v114 = v27 & 1;
      uint64_t v119 = 0;
      char v120 = 1;
      sub_10000435C(&qword_1000A9460);
      State.init(wrappedValue:)();
      uint64_t v112 = v122;
      uint64_t v113 = v121;
      uint64_t v111 = v123;
      uint64_t v119 = 0;
      sub_10000435C(&qword_1000A9870);
      State.init(wrappedValue:)();
      uint64_t v109 = v122;
      uint64_t v110 = (void *)v121;
      uint64_t KeyPath = swift_getKeyPath();
      uint64_t v21 = sub_100059AB4;
      uint64_t v17 = 0x10000;
    }
    uint64_t v95 = v19;
    uint64_t v98 = KeyPath;
    uint64_t v99 = v17;
    uint64_t v100 = v21;
    uint64_t v101 = v20;
    uint64_t v102 = v18;
    uint64_t v103 = v22;
    uint64_t v28 = v16;
    uint64_t v29 = (_OWORD *)swift_allocObject();
    long long v30 = *(_OWORD *)(a1 + 16);
    v29[1] = *(_OWORD *)a1;
    v29[2] = v30;
    long long v31 = *(_OWORD *)(a1 + 25);
    uint64_t v89 = v29;
    *(_OWORD *)((char *)v29 + 41) = v31;
    swift_retain();
    sub_100057EAC((uint64_t)&v124);
    sub_100057E78((uint64_t)&v126);
    if (qword_1000A8190 != -1) {
      swift_once();
    }
    uint64_t v121 = qword_1000AB4D0;
    uint64_t v122 = *(void *)algn_1000AB4D8;
    sub_1000099C8();
    swift_bridgeObjectRetain();
    uint64_t v93 = Text.init<A>(_:)();
    uint64_t v92 = v32;
    char v34 = v33;
    uint64_t v94 = v35;
    uint64_t v119 = 0;
    char v120 = 1;
    sub_10000435C(&qword_1000A9460);
    State.init(wrappedValue:)();
    uint64_t v88 = v121;
    char v36 = v122;
    uint64_t v87 = v123;
    uint64_t v119 = 0;
    sub_10000435C(&qword_1000A9870);
    State.init(wrappedValue:)();
    uint64_t v86 = (void *)v121;
    uint64_t v91 = v122;
    uint64_t v85 = swift_getKeyPath();
    char v37 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
    uint64_t v38 = v105;
    v37(v105, v97, v28);
    unint64_t v39 = *(void (**)(char *, char *, uint64_t))(v107 + 16);
    uint64_t v40 = v106;
    uint64_t v41 = v104;
    v39(v106, v108, v104);
    LOBYTE(v121) = 0;
    LOBYTE(v119) = 1;
    char v118 = v34 & 1;
    char v117 = v36;
    char v116 = 0;
    char v42 = v90;
    v37(v90, v38, v28);
    uint64_t v43 = (int *)sub_10000435C(&qword_1000A9C80);
    v39(&v42[v43[12]], v40, v41);
    uint64_t v44 = &v42[v43[16]];
    uint64_t v45 = v99;
    *(void *)uint64_t v44 = v99;
    uint64_t v46 = v45;
    uint64_t v47 = v102;
    *((void *)v44 + 1) = v102;
    uint64_t v48 = v47;
    uint64_t v49 = v95;
    *((void *)v44 + 2) = v95;
    uint64_t v50 = v49;
    uint64_t v51 = v114;
    *((void *)v44 + 3) = v114;
    char v52 = v51;
    uint64_t v114 = v51;
    uint64_t v53 = v101;
    *((void *)v44 + 4) = v101;
    uint64_t v54 = v53;
    uint64_t v55 = (uint64_t)v100;
    *((void *)v44 + 5) = v100;
    uint64_t v56 = v55;
    uint64_t v57 = (uint64_t)v103;
    *((void *)v44 + 6) = v103;
    uint64_t v58 = v57;
    uint64_t v59 = v113;
    *((void *)v44 + 7) = v113;
    uint64_t v60 = v59;
    uint64_t v113 = v59;
    uint64_t v61 = v112;
    *((void *)v44 + 8) = v112;
    uint64_t v62 = v61;
    uint64_t v112 = v61;
    uint64_t v63 = v111;
    *((void *)v44 + 9) = v111;
    uint64_t v64 = v63;
    uint64_t v111 = v63;
    uint64_t v65 = v110;
    *((void *)v44 + 10) = v110;
    __int16 v66 = v65;
    uint64_t v110 = v65;
    uint64_t v67 = v109;
    *((void *)v44 + 11) = v109;
    uint64_t v68 = v67;
    uint64_t v109 = v67;
    uint64_t v69 = v98;
    *((void *)v44 + 12) = v98;
    uint64_t v70 = v69;
    v44[104] = 0;
    uint64_t v71 = &v42[v43[20]];
    LOBYTE(v69) = v121;
    char v72 = v119;
    LOBYTE(v42) = v118;
    char v73 = v117;
    LOBYTE(v43) = v116;
    *uint64_t v71 = 0;
    v71[1] = v69;
    v71[2] = v72;
    uint64_t v74 = v93;
    uint64_t v75 = v92;
    *((void *)v71 + 1) = v93;
    *((void *)v71 + 2) = v75;
    v71[24] = (char)v42;
    *((void *)v71 + 4) = v94;
    *((void *)v71 + 5) = sub_1000598F8;
    uint64_t v76 = v88;
    *((void *)v71 + 6) = v89;
    *((void *)v71 + 7) = v76;
    v71[64] = v73;
    uint64_t v77 = v86;
    *((void *)v71 + 9) = v87;
    *((void *)v71 + 10) = v77;
    uint64_t v78 = v85;
    *((void *)v71 + 11) = v91;
    *((void *)v71 + 12) = v78;
    v71[104] = (char)v43;
    sub_10005991C(v46, v48, v50, v52, v54, v56, v58, v60, v62, v64, v66, v68, v70, 0);
    sub_10000B970(v74, v75, (char)v42);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    id v79 = v77;
    sub_10001F504(v78, (char)v43);
    uint64_t v80 = *(void (**)(char *, uint64_t))(v107 + 8);
    uint64_t v81 = v104;
    v80(v108, v104);
    uint64_t v82 = *(void (**)(char *, uint64_t))(v115 + 8);
    v115 += 8;
    uint64_t v83 = v96;
    v82(v97, v96);
    LOBYTE(v43) = v116;
    sub_100009A1C(v93, v92, v118);
    swift_release();

    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    sub_10001F574(v78, (char)v43);
    sub_1000599BC(v99, v102, v95, v114, v101, (uint64_t)v100, (uint64_t)v103, v113, v112, v111, v110, v109, v98, 0);
    v80(v106, v81);
    return ((uint64_t (*)(char *, uint64_t))v82)(v105, v83);
  }
  else
  {
    type metadata accessor for TextFormattingState();
    sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10003F910@<X0>(void **a1@<X0>, long long *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *a1;
  long long v30 = *a2;
  uint64_t v28 = *((void *)a2 + 2);
  __int16 v29 = *((_WORD *)a2 + 12);
  uint64_t v26 = *((void *)a2 + 4);
  char v27 = *((unsigned char *)a2 + 40);
  type metadata accessor for MainActor();
  sub_10005819C((uint64_t)&v30);
  sub_100057E78((uint64_t)&v28);
  sub_100057EAC((uint64_t)&v26);
  id v6 = v5;
  uint64_t v7 = static MainActor.shared.getter();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v7;
  *(void *)(v8 + 24) = &protocol witness table for MainActor;
  long long v9 = a2[1];
  *(_OWORD *)(v8 + 32) = *a2;
  *(_OWORD *)(v8 + 48) = v9;
  *(_OWORD *)(v8 + 57) = *(long long *)((char *)a2 + 25);
  *(void *)(v8 + 80) = v6;
  sub_10005819C((uint64_t)&v30);
  sub_100057E78((uint64_t)&v28);
  sub_100057EAC((uint64_t)&v26);
  id v10 = v6;
  uint64_t v11 = static MainActor.shared.getter();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v11;
  *(void *)(v12 + 24) = &protocol witness table for MainActor;
  long long v13 = a2[1];
  *(_OWORD *)(v12 + 32) = *a2;
  *(_OWORD *)(v12 + 48) = v13;
  *(_OWORD *)(v12 + 57) = *(long long *)((char *)a2 + 25);
  *(void *)(v12 + 80) = v10;
  Binding.init(get:set:)();
  id v14 = [v10 localizedFullName];
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v17 = v16;

  uint64_t v18 = (int *)type metadata accessor for TFToggle(0);
  static SymbolRenderingMode.hierarchical.getter();
  *a3 = 0;
  a3[1] = 0;
  uint64_t v19 = (void *)((char *)a3 + v18[6]);
  *uint64_t v19 = v15;
  v19[1] = v17;
  *((unsigned char *)a3 + v18[7]) = 1;
  uint64_t v20 = (char *)a3 + v18[8];
  *(void *)uint64_t v20 = v23;
  *((void *)v20 + 1) = v24;
  v20[16] = v25;
  uint64_t v21 = (char *)a3 + v18[9];
  uint64_t result = swift_getKeyPath();
  *(void *)uint64_t v21 = result;
  v21[8] = 0;
  return result;
}

void sub_10003FB14(void *a1@<X2>, void *a2@<X3>, unsigned char *a3@<X8>)
{
  if (*a1)
  {
    swift_retain();
    uint64_t v5 = sub_100027DD8();
    swift_release();
    id v6 = a2;
    LOBYTE(a2) = sub_100054394((unint64_t)v5, v6, (SEL *)&selRef_familyName);
    swift_bridgeObjectRelease();

    *a3 = a2 & 1;
  }
  else
  {
    type metadata accessor for TextFormattingState();
    sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    EnvironmentObject.error()();
    __break(1u);
  }
}

void sub_10003FBFC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  if (!*a4) {
    goto LABEL_15;
  }
  swift_retain();
  id v6 = [a5 fontDescriptor];
  swift_retain();
  unint64_t v7 = (unint64_t)sub_100027DD8();
  unint64_t v8 = v7;
  if (!(v7 >> 62))
  {
    if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_4;
    }
LABEL_9:
    swift_bridgeObjectRelease();
    uint64_t v11 = self;
    [v11 systemFontSize];
    id v10 = [v11 systemFontOfSize:];
    swift_release();
    goto LABEL_10;
  }
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_9;
  }
LABEL_4:
  if ((v8 & 0xC000000000000001) != 0)
  {
    id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_7;
  }
  if (!*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
LABEL_15:
    type metadata accessor for TextFormattingState();
    sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    EnvironmentObject.error()();
    __break(1u);
    return;
  }
  id v9 = *(id *)(v8 + 32);
LABEL_7:
  id v10 = v9;
  swift_release();
  swift_bridgeObjectRelease();
LABEL_10:
  [v10 pointSize];
  double v13 = v12;

  id v14 = [self fontWithDescriptor:v6 size:v13];
  sub_100034498(v14);
  swift_release();
}

uint64_t sub_10003FDF8(void *a1, void *a2)
{
  if (*a1)
  {
    uint64_t v2 = *(void (**)(uint64_t))(*a1 + *a2);
    uint64_t v3 = swift_retain();
    v2(v3);
    return swift_release();
  }
  else
  {
    type metadata accessor for TextFormattingState();
    sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10003FEA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10000435C(&qword_1000A9BD0);
  __chkstk_darwin(v4 - 8);
  id v6 = &v24[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = sub_10000435C(&qword_1000A9BD8);
  __chkstk_darwin(v7 - 8);
  id v9 = &v24[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = sub_10000435C(&qword_1000A9BE0);
  uint64_t v11 = v10 - 8;
  __chkstk_darwin(v10);
  double v13 = &v24[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10004011C(a1, (uint64_t)v6);
  uint64_t v14 = static Alignment.leading.getter();
  sub_1000352CC(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v9, 0.0, 1, 0.0, 1, v14, v15, (uint64_t)&qword_1000A9BD0, (void (*)(uint64_t, uint64_t, uint64_t))sub_100009E70, &qword_1000A9BD8);
  sub_100009ED4((uint64_t)v6, &qword_1000A9BD0);
  uint64_t KeyPath = swift_getKeyPath();
  sub_100009E70((uint64_t)v9, (uint64_t)v13, &qword_1000A9BD8);
  uint64_t v17 = &v13[*(int *)(v11 + 44)];
  *(void *)uint64_t v17 = KeyPath;
  *((void *)v17 + 1) = 1;
  v17[16] = 0;
  sub_100009ED4((uint64_t)v9, &qword_1000A9BD8);
  sub_100009F30((uint64_t)v13, a2, &qword_1000A9BE0);
  uint64_t v18 = (int *)sub_10000435C(&qword_1000A9BF0);
  uint64_t v19 = a2 + v18[9];
  v24[15] = 0;
  State.init(wrappedValue:)();
  uint64_t v20 = v25;
  *(unsigned char *)uint64_t v19 = v24[16];
  *(void *)(v19 + 8) = v20;
  uint64_t v21 = a2 + v18[10];
  *(void *)uint64_t v21 = swift_getKeyPath();
  *(unsigned char *)(v21 + 8) = 0;
  uint64_t v22 = a2 + v18[11];
  uint64_t result = swift_getKeyPath();
  *(void *)uint64_t v22 = result;
  *(unsigned char *)(v22 + 8) = 0;
  return result;
}

uint64_t sub_10004011C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v66 = sub_10000435C(&qword_1000A9C20);
  __chkstk_darwin(v66);
  uint64_t v5 = (uint64_t *)&v58[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v67 = type metadata accessor for TFSymbol(0);
  uint64_t v6 = __chkstk_darwin(v67);
  uint64_t v8 = &v58[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  uint64_t v10 = &v58[-v9];
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(unsigned __int8 *)(a1 + 24);
  int v13 = *(unsigned __int8 *)(a1 + 25);
  sub_10001F4F8(v11, v12, *(unsigned char *)(a1 + 25));
  uint64_t v14 = sub_100012E64(v11, v12 | (v13 << 8));
  char v16 = v15;
  sub_10001F568(v11, v12, v13);
  if ((v16 & 1) == 0 && v14 == 1)
  {
    uint64_t v17 = static Font.title3.getter();
    uint64_t v18 = (int *)v67;
    static SymbolRenderingMode.hierarchical.getter();
    *(_OWORD *)uint64_t v8 = xmmword_100084B00;
    v8[16] = 0;
    *((void *)v8 + 3) = v17;
    *((void *)v8 + 4) = 0;
    v8[v18[9]] = 1;
    v8[v18[10]] = 1;
    uint64_t v19 = (uint64_t)v5;
    uint64_t v20 = &v8[v18[11]];
    *(void *)uint64_t v20 = swift_getKeyPath();
    v20[8] = 0;
    uint64_t v21 = &v8[v18[12]];
    *(void *)uint64_t v21 = swift_getKeyPath();
    v21[8] = 0;
    sub_10005A91C((uint64_t)v8, (uint64_t)v10, type metadata accessor for TFSymbol);
    sub_10005C814((uint64_t)v10, v19, type metadata accessor for TFSymbol);
    swift_storeEnumTagMultiPayload();
    sub_10000435C(&qword_1000A9C28);
    sub_100057C6C(&qword_1000A9C30, (void (*)(uint64_t))type metadata accessor for TFSymbol);
    sub_10005962C();
    _ConditionalContent<>.init(storage:)();
    return sub_10005C87C((uint64_t)v10, type metadata accessor for TFSymbol);
  }
  if (!*(void *)a1) {
    goto LABEL_22;
  }
  swift_retain();
  uint64_t v23 = sub_10002AF18();
  swift_release();
  uint64_t v24 = v23[2];
  swift_bridgeObjectRelease();
  swift_retain();
  unint64_t v25 = (unint64_t)sub_100027DD8();
  unint64_t v26 = v25;
  uint64_t v65 = v24;
  if (!(v25 >> 62))
  {
    if (*(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_7;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    __int16 v29 = self;
    [v29 systemFontSize];
    id v28 = [v29 systemFontOfSize:];
    swift_release();
    goto LABEL_13;
  }
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_12;
  }
LABEL_7:
  if ((v26 & 0xC000000000000001) != 0)
  {
    id v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_10;
  }
  if (!*(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
LABEL_22:
    type metadata accessor for TextFormattingState();
    sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
    return result;
  }
  id v27 = *(id *)(v26 + 32);
LABEL_10:
  id v28 = v27;
  swift_release();
  swift_bridgeObjectRelease();
LABEL_13:
  uint64_t v30 = sub_100074E30();
  uint64_t v32 = v31;

  uint64_t v68 = v30;
  uint64_t v69 = v32;
  sub_1000099C8();
  uint64_t v33 = Text.init<A>(_:)();
  uint64_t v35 = v34;
  char v37 = v36;
  id v38 = [self currentDevice];
  id v39 = [v38 userInterfaceIdiom];

  uint64_t v63 = v5;
  uint64_t v64 = a2;
  if (v39 == (id)6) {
    LODWORD(v68) = static HierarchicalShapeStyle.primary.getter();
  }
  else {
    uint64_t v68 = static Color.primary.getter();
  }
  uint64_t v68 = AnyShapeStyle.init<A>(_:)();
  uint64_t v40 = Text.foregroundStyle<A>(_:)();
  uint64_t v60 = v41;
  uint64_t v61 = v40;
  uint64_t v42 = v41;
  uint64_t v62 = v43;
  char v45 = v44 & 1;
  int v59 = v44 & 1;
  sub_100009A1C(v33, v35, v37 & 1);
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000407D8(v65, v40, v42, v45, (uint64_t)&v68);
  uint64_t v47 = v68;
  uint64_t v46 = v69;
  uint64_t v49 = v70;
  uint64_t v48 = v71;
  uint64_t v50 = v72;
  uint64_t v51 = v73;
  char v52 = v74;
  uint64_t v53 = *(void *)(a1 + 32);
  char v54 = *(unsigned char *)(a1 + 40);
  sub_10001F504(v53, v54);
  char v55 = sub_100013084(v53, v54);
  sub_10001F574(v53, v54);
  double v56 = 0.5;
  uint64_t v57 = v63;
  *uint64_t v63 = v47;
  v57[1] = v46;
  if (v55) {
    double v56 = 1.0;
  }
  v57[2] = v49;
  v57[3] = v48;
  v57[4] = v50;
  v57[5] = v51;
  *((unsigned char *)v57 + 48) = v52;
  *((double *)v57 + 7) = v56;
  swift_storeEnumTagMultiPayload();
  sub_1000595B8(v47, v46, v49, v48, v50, v51, v52);
  sub_1000595B8(v47, v46, v49, v48, v50, v51, v52);
  sub_10000435C(&qword_1000A9C28);
  sub_100057C6C(&qword_1000A9C30, (void (*)(uint64_t))type metadata accessor for TFSymbol);
  sub_10005962C();
  _ConditionalContent<>.init(storage:)();
  sub_100009A1C(v61, v60, v59);
  swift_bridgeObjectRelease();
  sub_1000597D0(v47, v46, v49, v48, v50, v51, v52);
  return sub_1000597D0(v47, v46, v49, v48, v50, v51, v52);
}

double sub_1000407D8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  char v9 = a4 & 1;
  uint64_t v10 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  __chkstk_darwin(v10 - 8);
  if (a1 < 2)
  {
    sub_10000B970(a2, a3, v9);
    swift_bridgeObjectRetain();
  }
  else
  {
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v11._object = (void *)0x8000000100088060;
    v11._countAndFlagsBits = 0xD000000000000021;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v11);
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
    v12._countAndFlagsBits = 32;
    v12._object = (void *)0xE100000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v12);
    LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:specifier:)();
    v13._countAndFlagsBits = 0;
    v13._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v13);
    LocalizedStringKey.init(stringInterpolation:)();
    if (qword_1000A80F0 != -1) {
      swift_once();
    }
    id v14 = (id)qword_1000AB398;
    uint64_t v15 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v17 = v16;
    char v19 = v18;
    id v20 = [self currentDevice];
    id v21 = [v20 userInterfaceIdiom];

    if (v21 == (id)6) {
      static HierarchicalShapeStyle.secondary.getter();
    }
    else {
      static Color.secondary.getter();
    }
    *(void *)&long long v23 = AnyShapeStyle.init<A>(_:)();
    Text.foregroundStyle<A>(_:)();
    sub_100009A1C(v15, v17, v19 & 1);
    swift_release();
    swift_bridgeObjectRelease();
  }
  sub_10000435C(&qword_1000A9C68);
  sub_10005975C();
  _ConditionalContent<>.init(storage:)();
  double result = *(double *)&v23;
  *(_OWORD *)a5 = v23;
  *(_OWORD *)(a5 + 16) = v24;
  *(_OWORD *)(a5 + 32) = v25;
  *(unsigned char *)(a5 + 48) = v26;
  return result;
}

uint64_t sub_100040B28()
{
  return Transaction.animation.setter();
}

uint64_t sub_100040B50()
{
  return sub_10003E2E0();
}

uint64_t sub_100040B8C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v55 = a1;
  uint64_t v2 = (int *)sub_10000435C(&qword_1000A9C88);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)v47 - v6;
  uint64_t v52 = sub_10000435C(&qword_1000A9C90);
  __chkstk_darwin(v52);
  uint64_t v54 = (uint64_t)v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000435C(&qword_1000A9C98);
  uint64_t v49 = *(void *)(v9 - 8);
  uint64_t v50 = v9;
  __chkstk_darwin(v9);
  uint64_t v48 = (char *)v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = sub_10000435C(&qword_1000A9CA0);
  uint64_t v11 = __chkstk_darwin(v53);
  Swift::String v13 = (char *)v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v51 = (uint64_t)v47 - v14;
  uint64_t v15 = *(void *)(v1 + 24);
  uint64_t v16 = *(unsigned __int8 *)(v1 + 32);
  int v17 = *(unsigned __int8 *)(v1 + 33);
  sub_10001F4F8(v15, v16, *(unsigned char *)(v1 + 33));
  uint64_t v18 = sub_100012E64(v15, v16 | (v17 << 8));
  char v20 = v19;
  sub_10001F568(v15, v16, v17);
  if (v20) {
    goto LABEL_5;
  }
  uint64_t v21 = 1;
  if (*(unsigned char *)v1) {
    uint64_t v21 = 2;
  }
  if (v21 < v18)
  {
LABEL_5:
    uint64_t v22 = &v5[v2[10]];
    uint64_t v23 = type metadata accessor for HoverEffect();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v22, 1, 1, v23);
    *(void *)uint64_t v5 = 0;
    *((_WORD *)v5 + 4) = 257;
    sub_10004242C(v1, (uint64_t)&v5[v2[11]]);
    long long v24 = &v5[v2[12]];
    *(void *)long long v24 = swift_getKeyPath();
    v24[8] = 0;
    long long v25 = &v5[v2[13]];
    *(void *)long long v25 = swift_getKeyPath();
    v25[8] = 0;
    char v26 = &v5[v2[14]];
    *(void *)char v26 = swift_getKeyPath();
    v26[8] = 0;
    id v27 = &v5[v2[15]];
    char v59 = 0;
    State.init(wrappedValue:)();
    uint64_t v28 = v57;
    *id v27 = v56;
    *((void *)v27 + 1) = v28;
    __int16 v29 = &qword_1000A9C88;
    sub_100009F30((uint64_t)v5, (uint64_t)v7, &qword_1000A9C88);
    sub_100009E70((uint64_t)v7, v54, &qword_1000A9C88);
    swift_storeEnumTagMultiPayload();
    sub_10000A368(&qword_1000A9CA8, &qword_1000A9CA0);
    sub_10000A368(&qword_1000A9CB0, &qword_1000A9C88);
    _ConditionalContent<>.init(storage:)();
    uint64_t v30 = (uint64_t)v7;
  }
  else
  {
    uint64_t v31 = (int *)v53;
    uint64_t v32 = &v13[*(int *)(v53 + 40)];
    uint64_t v33 = type metadata accessor for HoverEffect();
    uint64_t v34 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v32, 1, 1, v33);
    *(void *)Swift::String v13 = 0;
    *((_WORD *)v13 + 4) = 257;
    v47[1] = &v13[v31[11]];
    uint64_t v35 = __chkstk_darwin(v34);
    v47[-2] = v1;
    __chkstk_darwin(v35);
    v47[-2] = v1;
    sub_10000435C(&qword_1000A9CB8);
    sub_10000435C(&qword_1000A9CC0);
    sub_100059B74();
    sub_10000A368(&qword_1000A9D18, &qword_1000A9CC0);
    char v36 = v48;
    Menu.init(content:label:)();
    char v59 = 0;
    State.init(wrappedValue:)();
    char v37 = v56;
    uint64_t v38 = v57;
    char v56 = 0;
    LOBYTE(v57) = v37;
    uint64_t v58 = v38;
    sub_10000A368(&qword_1000A9D20, &qword_1000A9C98);
    sub_100057D90();
    uint64_t v39 = v50;
    View.menuStyle<A>(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v49 + 8))(v36, v39);
    uint64_t v40 = &v13[v31[12]];
    *(void *)uint64_t v40 = swift_getKeyPath();
    v40[8] = 0;
    uint64_t v41 = &v13[v31[13]];
    *(void *)uint64_t v41 = swift_getKeyPath();
    v41[8] = 0;
    uint64_t v42 = &v13[v31[14]];
    *(void *)uint64_t v42 = swift_getKeyPath();
    v42[8] = 0;
    uint64_t v43 = &v13[v31[15]];
    char v59 = 0;
    State.init(wrappedValue:)();
    uint64_t v44 = v57;
    *uint64_t v43 = v56;
    *((void *)v43 + 1) = v44;
    __int16 v29 = &qword_1000A9CA0;
    uint64_t v45 = v51;
    sub_100009F30((uint64_t)v13, v51, &qword_1000A9CA0);
    sub_100009E70(v45, v54, &qword_1000A9CA0);
    swift_storeEnumTagMultiPayload();
    sub_10000A368(&qword_1000A9CA8, &qword_1000A9CA0);
    sub_10000A368(&qword_1000A9CB0, &qword_1000A9C88);
    _ConditionalContent<>.init(storage:)();
    uint64_t v30 = v45;
  }
  return sub_100009ED4(v30, v29);
}

uint64_t sub_100041298@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v88 = a2;
  uint64_t v76 = (void *)sub_10000435C(&qword_1000A9D30);
  uint64_t v75 = *(v76 - 1);
  __chkstk_darwin(v76);
  char v74 = (char *)&v73 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = sub_10000435C(&qword_1000A9D38);
  uint64_t v78 = *(void *)(v79 - 8);
  uint64_t v4 = __chkstk_darwin(v79);
  uint64_t v84 = (char *)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v81 = (char *)&v73 - v6;
  uint64_t v82 = type metadata accessor for Divider();
  uint64_t v77 = *(void *)(v82 - 8);
  uint64_t v7 = __chkstk_darwin(v82);
  uint64_t v80 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v89 = (char *)&v73 - v9;
  uint64_t v10 = sub_10000435C(&qword_1000A9D40);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v83 = (char *)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v87 = (uint64_t)&v73 - v13;
  uint64_t v14 = sub_10000435C(&qword_1000A9D48);
  uint64_t v15 = (int *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v86 = (uint64_t)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v90 = (uint64_t)&v73 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v73 - v21;
  __chkstk_darwin(v20);
  long long v24 = (char *)&v73 - v23;
  uint64_t v25 = swift_allocObject();
  long long v26 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v25 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v25 + 64) = v26;
  *(_OWORD *)(v25 + 80) = *(_OWORD *)(a1 + 64);
  *(unsigned char *)(v25 + 96) = *(unsigned char *)(a1 + 80);
  long long v27 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v25 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v25 + 32) = v27;
  *(_WORD *)uint64_t v22 = 0;
  _OWORD v22[2] = 1;
  uint64_t v92 = a1;
  sub_10005BC2C(a1, (void (*)(uint64_t, uint64_t))sub_10001F504, (void (*)(uint64_t, uint64_t))sub_10005C948);
  Label.init(title:icon:)();
  uint64_t v28 = (uint64_t (**)())&v22[v15[14]];
  *uint64_t v28 = sub_10005A01C;
  v28[1] = (uint64_t (*)())v25;
  __int16 v29 = &v22[v15[15]];
  uint64_t v93 = 0;
  char v94 = 1;
  sub_10000435C(&qword_1000A9460);
  State.init(wrappedValue:)();
  char v30 = BYTE8(v95);
  uint64_t v31 = v96;
  *(void *)__int16 v29 = v95;
  v29[8] = v30;
  *((void *)v29 + 2) = v31;
  uint64_t v32 = v15[16];
  uint64_t v93 = 0;
  sub_10000435C(&qword_1000A9870);
  State.init(wrappedValue:)();
  *(_OWORD *)&v22[v32] = v95;
  uint64_t v33 = &v22[v15[17]];
  *(void *)uint64_t v33 = swift_getKeyPath();
  v33[8] = 0;
  uint64_t v85 = v24;
  sub_100009F30((uint64_t)v22, (uint64_t)v24, &qword_1000A9D48);
  uint64_t v34 = swift_allocObject();
  long long v35 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v34 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v34 + 64) = v35;
  *(_OWORD *)(v34 + 80) = *(_OWORD *)(a1 + 64);
  *(unsigned char *)(v34 + 96) = *(unsigned char *)(a1 + 80);
  long long v36 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v34 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v34 + 32) = v36;
  *(_WORD *)uint64_t v22 = 0;
  _OWORD v22[2] = 1;
  uint64_t v91 = a1;
  sub_10005BC2C(a1, (void (*)(uint64_t, uint64_t))sub_10001F504, (void (*)(uint64_t, uint64_t))sub_10005C948);
  Label.init(title:icon:)();
  char v37 = (uint64_t (**)())&v22[v15[14]];
  char *v37 = sub_10005A0A8;
  v37[1] = (uint64_t (*)())v34;
  uint64_t v38 = &v22[v15[15]];
  uint64_t v93 = 0;
  char v94 = 1;
  State.init(wrappedValue:)();
  char v39 = BYTE8(v95);
  uint64_t v40 = v96;
  *(void *)uint64_t v38 = v95;
  v38[8] = v39;
  *((void *)v38 + 2) = v40;
  uint64_t v41 = v15[16];
  uint64_t v93 = 0;
  State.init(wrappedValue:)();
  *(_OWORD *)&v22[v41] = v95;
  uint64_t v42 = &v22[v15[17]];
  *(void *)uint64_t v42 = swift_getKeyPath();
  v42[8] = 0;
  sub_100009F30((uint64_t)v22, v90, &qword_1000A9D48);
  if (*(unsigned char *)a1)
  {
    uint64_t v46 = Divider.init()();
    uint64_t v47 = __chkstk_darwin(v46);
    *(&v73 - 2) = a1;
    __chkstk_darwin(v47);
    *(&v73 - 2) = a1;
    *((_WORD *)&v73 - 4) = 1;
    sub_10000435C(&qword_1000A9D60);
    sub_10000435C(&qword_1000A9D68);
    sub_10005A118();
    sub_1000588A8(&qword_1000A9D80, &qword_1000A9D68);
    uint64_t v48 = v74;
    Menu.init(content:label:)();
    LOBYTE(v93) = 0;
    State.init(wrappedValue:)();
    char v49 = v95;
    uint64_t v50 = *((void *)&v95 + 1);
    LOBYTE(v95) = 1;
    BYTE8(v95) = v49;
    uint64_t v96 = v50;
    sub_10000A368(&qword_1000A9D88, &qword_1000A9D30);
    sub_100057D90();
    uint64_t v51 = v84;
    uint64_t v52 = v76;
    View.menuStyle<A>(_:)();
    swift_release();
    (*(void (**)(char *, void *))(v75 + 8))(v48, v52);
    uint64_t v53 = v78;
    uint64_t v54 = v81;
    uint64_t v55 = v79;
    (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v81, v51, v79);
    uint64_t v56 = v77;
    uint64_t v76 = *(void **)(v77 + 16);
    uint64_t v57 = v80;
    ((void (*)(char *, char *, uint64_t))v76)(v80, v89, v82);
    uint64_t v58 = *(void (**)(char *, char *, uint64_t))(v53 + 16);
    v58(v51, v54, v55);
    uint64_t v59 = (uint64_t)v83;
    uint64_t v60 = v57;
    uint64_t v61 = v82;
    ((void (*)(char *, char *, uint64_t))v76)(v83, v60, v82);
    uint64_t v62 = sub_10000435C(&qword_1000A9D90);
    uint64_t v63 = v84;
    v58((char *)(v59 + *(int *)(v62 + 48)), v84, v55);
    uint64_t v64 = *(void (**)(char *, uint64_t))(v53 + 8);
    v64(v81, v55);
    uint64_t v65 = *(void (**)(char *, uint64_t))(v56 + 8);
    v65(v89, v61);
    v64(v63, v55);
    v65(v80, v61);
    uint64_t v66 = sub_10000435C(&qword_1000A9D50);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v66 - 8) + 56))(v59, 0, 1, v66);
    uint64_t v44 = v87;
    sub_100009F30(v59, v87, &qword_1000A9D40);
    uint64_t v45 = v59;
  }
  else
  {
    uint64_t v43 = sub_10000435C(&qword_1000A9D50);
    uint64_t v44 = v87;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v87, 1, 1, v43);
    uint64_t v45 = (uint64_t)v83;
  }
  uint64_t v67 = (uint64_t)v85;
  sub_100009E70((uint64_t)v85, (uint64_t)v22, &qword_1000A9D48);
  uint64_t v68 = v90;
  uint64_t v69 = v86;
  sub_100009E70(v90, v86, &qword_1000A9D48);
  sub_100009E70(v44, v45, &qword_1000A9D40);
  uint64_t v70 = v88;
  sub_100009E70((uint64_t)v22, v88, &qword_1000A9D48);
  uint64_t v71 = sub_10000435C(&qword_1000A9D58);
  sub_100009E70(v69, v70 + *(int *)(v71 + 48), &qword_1000A9D48);
  sub_100009E70(v45, v70 + *(int *)(v71 + 64), &qword_1000A9D40);
  sub_100009ED4(v44, &qword_1000A9D40);
  sub_100009ED4(v68, &qword_1000A9D48);
  sub_100009ED4(v67, &qword_1000A9D48);
  sub_100009ED4(v45, &qword_1000A9D40);
  sub_100009ED4(v69, &qword_1000A9D48);
  return sub_100009ED4((uint64_t)v22, &qword_1000A9D48);
}

uint64_t sub_100041D80@<X0>(uint64_t a1@<X8>)
{
  return sub_100041DD0(&qword_1000A8140, a1);
}

uint64_t sub_100041DA8@<X0>(uint64_t a1@<X8>)
{
  return sub_100041DD0(&qword_1000A8138, a1);
}

uint64_t sub_100041DD0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  sub_1000099C8();
  swift_bridgeObjectRetain();
  uint64_t result = Text.init<A>(_:)();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 16) = v5 & 1;
  *(void *)(a2 + 24) = v6;
  return result;
}

uint64_t sub_100041E60(unsigned char *a1)
{
  uint64_t v2 = (int *)type metadata accessor for TFSymbol(0);
  uint64_t v3 = __chkstk_darwin(v2);
  char v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)v23 - v6;
  uint64_t v8 = sub_10000435C(&qword_1000A9D28);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*a1)
  {
    sub_100042208(0, (uint64_t)v23);
    v27[2] = v23[2];
    v27[3] = v23[3];
    v27[4] = v23[4];
    char v28 = v24;
    v27[0] = v23[0];
    v27[1] = v23[1];
    static Alignment.center.getter();
    sub_1000354B0(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v25, 0.0, 1, INFINITY, 0);
    sub_100059E7C((uint64_t)v27);
    long long v15 = v25[9];
    long long v16 = v25[11];
    *((_OWORD *)v10 + 10) = v25[10];
    *((_OWORD *)v10 + 11) = v16;
    long long v17 = v25[5];
    long long v18 = v25[7];
    long long v19 = v25[8];
    *((_OWORD *)v10 + 6) = v25[6];
    *((_OWORD *)v10 + 7) = v18;
    *((_OWORD *)v10 + 8) = v19;
    *((_OWORD *)v10 + 9) = v15;
    long long v20 = v25[3];
    long long v21 = v25[4];
    *((_OWORD *)v10 + 2) = v25[2];
    *((_OWORD *)v10 + 3) = v20;
    *((void *)v10 + 24) = v26;
    *((_OWORD *)v10 + 4) = v21;
    *((_OWORD *)v10 + 5) = v17;
    long long v22 = v25[1];
    *(_OWORD *)uint64_t v10 = v25[0];
    *((_OWORD *)v10 + 1) = v22;
    swift_storeEnumTagMultiPayload();
    sub_10000435C(&qword_1000A9CD8);
    sub_100059C20();
    sub_100057C6C(&qword_1000A9C30, (void (*)(uint64_t))type metadata accessor for TFSymbol);
    return _ConditionalContent<>.init(storage:)();
  }
  else
  {
    uint64_t v11 = static Font.title3.getter();
    static SymbolRenderingMode.hierarchical.getter();
    *(_OWORD *)char v5 = xmmword_100084B10;
    v5[16] = 0;
    *((void *)v5 + 3) = v11;
    *((void *)v5 + 4) = 0;
    v5[v2[9]] = 1;
    v5[v2[10]] = 1;
    uint64_t v12 = &v5[v2[11]];
    *(void *)uint64_t v12 = swift_getKeyPath();
    v12[8] = 0;
    uint64_t v13 = &v5[v2[12]];
    *(void *)uint64_t v13 = swift_getKeyPath();
    v13[8] = 0;
    sub_10005A91C((uint64_t)v5, (uint64_t)v7, type metadata accessor for TFSymbol);
    sub_10005C814((uint64_t)v7, (uint64_t)v10, type metadata accessor for TFSymbol);
    swift_storeEnumTagMultiPayload();
    sub_10000435C(&qword_1000A9CD8);
    sub_100059C20();
    sub_100057C6C(&qword_1000A9C30, (void (*)(uint64_t))type metadata accessor for TFSymbol);
    _ConditionalContent<>.init(storage:)();
    return sub_10005C87C((uint64_t)v7, type metadata accessor for TFSymbol);
  }
}

uint64_t sub_100042208@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  if (!*(void *)(v2 + 8)) {
    goto LABEL_13;
  }
  swift_retain();
  unint64_t v5 = (unint64_t)sub_100027DD8();
  unint64_t v6 = v5;
  if (v5 >> 62)
  {
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_4;
    }
LABEL_9:
    swift_bridgeObjectRelease();
    uint64_t v9 = self;
    [v9 systemFontSize];
    id v8 = [v9 systemFontOfSize:];
    swift_release();
    goto LABEL_10;
  }
  if (!*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_9;
  }
LABEL_4:
  if ((v6 & 0xC000000000000001) != 0)
  {
    id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_7;
  }
  if (*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v7 = *(id *)(v6 + 32);
LABEL_7:
    id v8 = v7;
    swift_release();
    swift_bridgeObjectRelease();
LABEL_10:
    [v8 pointSize];
    Swift::Double v11 = v10;

    uint64_t v12 = sub_100034FE0(a1 & 1, v11);
    uint64_t v14 = v13;
    uint64_t KeyPath = swift_getKeyPath();
    static Font.body.getter();
    uint64_t v16 = Font.monospacedDigit()();
    swift_release();
    uint64_t v17 = swift_getKeyPath();
    uint64_t v18 = swift_getKeyPath();
    uint64_t result = swift_getKeyPath();
    *(void *)a2 = v12;
    *(void *)(a2 + 8) = v14;
    *(unsigned char *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = KeyPath;
    *(unsigned char *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = v17;
    *(void *)(a2 + 48) = v16;
    *(void *)(a2 + 56) = v18;
    *(void *)(a2 + 64) = 0x3FE999999999999ALL;
    *(void *)(a2 + 72) = result;
    *(unsigned char *)(a2 + 80) = 1;
    return result;
  }
  __break(1u);
LABEL_13:
  type metadata accessor for TextFormattingState();
  sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
  uint64_t result = EnvironmentObject.error()();
  __break(1u);
  return result;
}

uint64_t sub_10004242C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v115 = a2;
  uint64_t v99 = sub_10000435C(&qword_1000A9D30);
  uint64_t v97 = *(void *)(v99 - 8);
  __chkstk_darwin(v99);
  uint64_t v96 = (char *)&v94 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v101 = sub_10000435C(&qword_1000A9D38);
  uint64_t v100 = *(void *)(v101 - 8);
  __chkstk_darwin(v101);
  uint64_t v107 = (char *)&v94 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000435C(&qword_1000A9DA8);
  uint64_t v108 = *(void *)(v5 - 8);
  uint64_t v109 = v5;
  __chkstk_darwin(v5);
  uint64_t v98 = (char *)&v94 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000435C(&qword_1000A9DB0);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v114 = (uint64_t)&v94 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v118 = (uint64_t)&v94 - v10;
  Swift::Double v11 = (int *)type metadata accessor for TFSymbol(0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v94 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (int *)sub_10000435C(&qword_1000A9DB8);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v94 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000435C(&qword_1000A9DC0);
  uint64_t v18 = __chkstk_darwin(v17 - 8);
  uint64_t v112 = (uint64_t)&v94 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v113 = (char *)&v94 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  char v24 = (char *)&v94 - v23;
  __chkstk_darwin(v22);
  uint64_t v117 = (uint64_t)&v94 - v25;
  uint64_t v26 = swift_allocObject();
  long long v27 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v26 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v26 + 64) = v27;
  *(_OWORD *)(v26 + 80) = *(_OWORD *)(a1 + 64);
  *(unsigned char *)(v26 + 96) = *(unsigned char *)(a1 + 80);
  long long v28 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v26 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v26 + 32) = v28;
  *(_WORD *)uint64_t v16 = 0;
  void v16[2] = 1;
  uint64_t v29 = (uint64_t)&v16[v14[11]];
  uint64_t v102 = a1;
  sub_10005BC2C(a1, (void (*)(uint64_t, uint64_t))sub_10001F504, (void (*)(uint64_t, uint64_t))sub_10005C948);
  uint64_t v30 = static Font.title3.getter();
  static SymbolRenderingMode.hierarchical.getter();
  *(_OWORD *)uint64_t v13 = xmmword_100084B20;
  v13[16] = 0;
  *((void *)v13 + 3) = v30;
  *((void *)v13 + 4) = 0;
  v13[v11[9]] = 0;
  v13[v11[10]] = 1;
  uint64_t v31 = &v13[v11[11]];
  *(void *)uint64_t v31 = swift_getKeyPath();
  v31[8] = 0;
  uint64_t v110 = v11;
  uint64_t v32 = &v13[v11[12]];
  *(void *)uint64_t v32 = swift_getKeyPath();
  v32[8] = 0;
  sub_10005A91C((uint64_t)v13, v29, type metadata accessor for TFSymbol);
  uint64_t v33 = &v16[v14[12]];
  *(void *)uint64_t v33 = sub_10005C93C;
  *((void *)v33 + 1) = v26;
  uint64_t v34 = &v16[v14[13]];
  uint64_t v122 = 0;
  char v123 = 1;
  uint64_t v105 = sub_10000435C(&qword_1000A9460);
  State.init(wrappedValue:)();
  char v35 = BYTE8(v119);
  long long v36 = v120;
  *(void *)uint64_t v34 = v119;
  v34[8] = v35;
  *((void *)v34 + 2) = v36;
  uint64_t v37 = v14[14];
  uint64_t v122 = 0;
  uint64_t v104 = sub_10000435C(&qword_1000A9870);
  State.init(wrappedValue:)();
  *(_OWORD *)&v16[v37] = v119;
  uint64_t v38 = &v16[v14[15]];
  *(void *)uint64_t v38 = swift_getKeyPath();
  v38[8] = 0;
  if (qword_1000A8140 != -1) {
    swift_once();
  }
  long long v119 = xmmword_1000AB430;
  unint64_t v39 = sub_1000099C8();
  swift_bridgeObjectRetain();
  unint64_t v116 = v39;
  uint64_t v40 = Text.init<A>(_:)();
  uint64_t v42 = v41;
  char v44 = v43 & 1;
  uint64_t v45 = sub_10000A368(&qword_1000A9DC8, &qword_1000A9DB8);
  uint64_t v106 = v14;
  uint64_t v103 = v45;
  View.accessibilityLabel(_:)();
  sub_100009A1C(v40, v42, v44);
  swift_bridgeObjectRelease();
  sub_100009ED4((uint64_t)v16, &qword_1000A9DB8);
  uint64_t v111 = v24;
  uint64_t v46 = v117;
  sub_100009F30((uint64_t)v24, v117, &qword_1000A9DC0);
  uint64_t v47 = v102;
  BOOL v48 = sub_100043134();
  uint64_t v49 = 1;
  if (v48)
  {
    long long v95 = &v94;
    uint64_t v50 = __chkstk_darwin(v48);
    *(&v94 - 2) = v47;
    __chkstk_darwin(v50);
    *(&v94 - 2) = v47;
    *((_WORD *)&v94 - 4) = 256;
    sub_10000435C(&qword_1000A9D60);
    sub_10000435C(&qword_1000A9D68);
    sub_10005A118();
    sub_1000588A8(&qword_1000A9D80, &qword_1000A9D68);
    uint64_t v51 = v96;
    Menu.init(content:label:)();
    LOBYTE(v122) = 0;
    State.init(wrappedValue:)();
    char v52 = v119;
    uint64_t v53 = (uint64_t *)*((void *)&v119 + 1);
    LOBYTE(v119) = 1;
    BYTE8(v119) = v52;
    char v120 = v53;
    uint64_t v54 = sub_10000A368(&qword_1000A9D88, &qword_1000A9D30);
    unint64_t v55 = sub_100057D90();
    uint64_t v56 = v99;
    long long v95 = (uint64_t *)v54;
    View.menuStyle<A>(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v97 + 8))(v51, v56);
    if (qword_1000A8110 != -1) {
      swift_once();
    }
    long long v119 = xmmword_1000AB3D0;
    swift_bridgeObjectRetain();
    uint64_t v57 = Text.init<A>(_:)();
    uint64_t v59 = v58;
    *(void *)&long long v119 = v56;
    char v61 = v60 & 1;
    *((void *)&v119 + 1) = &type metadata for TFMenuStyle;
    char v120 = v95;
    unint64_t v121 = v55;
    swift_getOpaqueTypeConformance2();
    uint64_t v62 = (uint64_t)v98;
    uint64_t v63 = v101;
    uint64_t v64 = v107;
    View.accessibilityLabel(_:)();
    sub_100009A1C(v57, v59, v61);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v100 + 8))(v64, v63);
    sub_100009F30(v62, v118, &qword_1000A9DA8);
    uint64_t v49 = 0;
    uint64_t v46 = v117;
  }
  uint64_t v65 = v118;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v108 + 56))(v118, v49, 1, v109);
  uint64_t v66 = swift_allocObject();
  long long v67 = *(_OWORD *)(v47 + 48);
  *(_OWORD *)(v66 + 48) = *(_OWORD *)(v47 + 32);
  *(_OWORD *)(v66 + 64) = v67;
  *(_OWORD *)(v66 + 80) = *(_OWORD *)(v47 + 64);
  *(unsigned char *)(v66 + 96) = *(unsigned char *)(v47 + 80);
  long long v68 = *(_OWORD *)(v47 + 16);
  *(_OWORD *)(v66 + 16) = *(_OWORD *)v47;
  *(_OWORD *)(v66 + 32) = v68;
  *(_WORD *)uint64_t v16 = 0;
  void v16[2] = 1;
  uint64_t v69 = v106;
  uint64_t v70 = (uint64_t)&v16[v106[11]];
  sub_10005BC2C(v47, (void (*)(uint64_t, uint64_t))sub_10001F504, (void (*)(uint64_t, uint64_t))sub_10005C948);
  uint64_t v71 = static Font.title3.getter();
  uint64_t v72 = v110;
  static SymbolRenderingMode.hierarchical.getter();
  *(_OWORD *)uint64_t v13 = xmmword_100084B30;
  v13[16] = 0;
  *((void *)v13 + 3) = v71;
  *((void *)v13 + 4) = 0;
  v13[v72[9]] = 0;
  v13[v72[10]] = 1;
  uint64_t v73 = &v13[v72[11]];
  *(void *)uint64_t v73 = swift_getKeyPath();
  v73[8] = 0;
  char v74 = &v13[v72[12]];
  *(void *)char v74 = swift_getKeyPath();
  v74[8] = 0;
  sub_10005A91C((uint64_t)v13, v70, type metadata accessor for TFSymbol);
  uint64_t v75 = &v16[v69[12]];
  *(void *)uint64_t v75 = sub_10005C940;
  *((void *)v75 + 1) = v66;
  uint64_t v76 = &v16[v69[13]];
  uint64_t v122 = 0;
  char v123 = 1;
  State.init(wrappedValue:)();
  char v77 = BYTE8(v119);
  uint64_t v78 = v120;
  *(void *)uint64_t v76 = v119;
  v76[8] = v77;
  *((void *)v76 + 2) = v78;
  uint64_t v79 = v69[14];
  uint64_t v122 = 0;
  State.init(wrappedValue:)();
  *(_OWORD *)&v16[v79] = v119;
  uint64_t v80 = &v16[v69[15]];
  *(void *)uint64_t v80 = swift_getKeyPath();
  v80[8] = 0;
  if (qword_1000A8138 != -1) {
    swift_once();
  }
  long long v119 = xmmword_1000AB420;
  swift_bridgeObjectRetain();
  uint64_t v81 = Text.init<A>(_:)();
  uint64_t v83 = v82;
  char v85 = v84 & 1;
  uint64_t v86 = (uint64_t)v113;
  View.accessibilityLabel(_:)();
  sub_100009A1C(v81, v83, v85);
  swift_bridgeObjectRelease();
  sub_100009ED4((uint64_t)v16, &qword_1000A9DB8);
  uint64_t v87 = (uint64_t)v111;
  sub_100009F30(v86, (uint64_t)v111, &qword_1000A9DC0);
  sub_100009E70(v46, v86, &qword_1000A9DC0);
  uint64_t v88 = v114;
  sub_100009E70(v65, v114, &qword_1000A9DB0);
  uint64_t v89 = v46;
  uint64_t v90 = v112;
  sub_100009E70(v87, v112, &qword_1000A9DC0);
  uint64_t v91 = v115;
  sub_100009E70(v86, v115, &qword_1000A9DC0);
  uint64_t v92 = sub_10000435C(&qword_1000A9DD0);
  sub_100009E70(v88, v91 + *(int *)(v92 + 48), &qword_1000A9DB0);
  sub_100009E70(v90, v91 + *(int *)(v92 + 64), &qword_1000A9DC0);
  sub_100009ED4(v87, &qword_1000A9DC0);
  sub_100009ED4(v65, &qword_1000A9DB0);
  sub_100009ED4(v89, &qword_1000A9DC0);
  sub_100009ED4(v90, &qword_1000A9DC0);
  sub_100009ED4(v88, &qword_1000A9DB0);
  return sub_100009ED4(v86, &qword_1000A9DC0);
}

BOOL sub_100043134()
{
  if ((*(unsigned char *)v0 & 1) == 0) {
    return 0;
  }
  uint64_t v1 = *(void *)(v0 + 56);
  char v2 = *(unsigned char *)(v0 + 64);
  sub_10001F504(v1, v2);
  double v3 = sub_100013288(v1, v2);
  sub_10001F574(v1, v2);
  uint64_t v4 = *(void *)(v0 + 72);
  char v5 = *(unsigned char *)(v0 + 80);
  sub_10001F504(v4, v5);
  char v6 = sub_100012C58(v4, v5);
  sub_10001F574(v4, v5);
  if (sub_100074A84(v6) >= v3) {
    return 0;
  }
  uint64_t v7 = *(void *)(v0 + 40);
  char v8 = *(unsigned char *)(v0 + 48);
  sub_10001F504(v7, v8);
  double v9 = sub_100013288(v7, v8);
  sub_10001F574(v7, v8);
  sub_10001F504(v1, v2);
  double v10 = sub_100013288(v1, v2);
  sub_10001F574(v1, v2);
  double v11 = v9 - (v10 + v10) + -2.0;
  sub_10001F504(v1, v2);
  double v12 = sub_100013288(v1, v2);
  sub_10001F574(v1, v2);
  return v12 < v11;
}

uint64_t sub_100043280(uint64_t a1, unsigned int *a2)
{
  uint64_t v4 = type metadata accessor for UITextFormattingViewController.ChangeValue();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    double v9 = *(void (**)(char *, void))(v8
                                               + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_didChangeValue);
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *a2, v4);
    swift_retain();
    v9(v7, 0);
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  else
  {
    type metadata accessor for TextFormattingState();
    sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_100043404(uint64_t a1)
{
  if (qword_1000A8238 != -1) {
    swift_once();
  }
  swift_getKeyPath();
  uint64_t v2 = swift_allocObject();
  long long v3 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 64) = v3;
  *(_OWORD *)(v2 + 80) = *(_OWORD *)(a1 + 64);
  *(unsigned char *)(v2 + 96) = *(unsigned char *)(a1 + 80);
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v2 + 32) = v4;
  swift_bridgeObjectRetain();
  sub_10005BC2C(a1, (void (*)(uint64_t, uint64_t))sub_10001F504, (void (*)(uint64_t, uint64_t))sub_10005C948);
  sub_10000435C(&qword_1000A9D98);
  sub_10000435C(&qword_1000A99F8);
  sub_10000A368(&qword_1000A9DA0, &qword_1000A9D98);
  sub_10001E2C0();
  sub_10000A368(&qword_1000A99F0, &qword_1000A99F8);
  return ForEach<>.init(_:id:content:)();
}

__n128 sub_1000435BC@<Q0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  sub_100042208(a2, (uint64_t)v22);
  v24[2] = v22[2];
  v24[3] = v22[3];
  v24[4] = v22[4];
  char v25 = v23;
  v24[0] = v22[0];
  v24[1] = v22[1];
  if (a3)
  {
    uint64_t v7 = *(void *)(a1 + 40);
    char v8 = *(unsigned char *)(a1 + 48);
    sub_10001F504(v7, v8);
    double v9 = sub_100013288(v7, v8);
    sub_10001F574(v7, v8);
    uint64_t v10 = *(void *)(a1 + 56);
    char v11 = *(unsigned char *)(a1 + 64);
    sub_10001F504(v10, v11);
    double v12 = sub_100013288(v10, v11);
    sub_10001F574(v10, v11);
    double v13 = v9 - (v12 + v12) + -2.0;
  }
  else
  {
    double v13 = 0.0;
  }
  static Alignment.center.getter();
  sub_1000354B0(v13, (a3 & 1) == 0, 0.0, 1, 0.0, 1, 0.0, 1, (uint64_t)v20, 0.0, 1, INFINITY, 0);
  sub_100059E7C((uint64_t)v24);
  long long v14 = v20[11];
  *(_OWORD *)(a4 + 160) = v20[10];
  *(_OWORD *)(a4 + 176) = v14;
  *(void *)(a4 + 192) = v21;
  long long v15 = v20[7];
  *(_OWORD *)(a4 + 96) = v20[6];
  *(_OWORD *)(a4 + 112) = v15;
  long long v16 = v20[9];
  *(_OWORD *)(a4 + 128) = v20[8];
  *(_OWORD *)(a4 + 144) = v16;
  long long v17 = v20[3];
  *(_OWORD *)(a4 + 32) = v20[2];
  *(_OWORD *)(a4 + 48) = v17;
  long long v18 = v20[5];
  *(_OWORD *)(a4 + 64) = v20[4];
  *(_OWORD *)(a4 + 80) = v18;
  __n128 result = (__n128)v20[1];
  *(_OWORD *)a4 = v20[0];
  *(__n128 *)(a4 + 16) = result;
  *(unsigned char *)(a4 + 200) = 0;
  return result;
}

uint64_t sub_100043744(double *a1, uint64_t a2)
{
  Swift::Double v3 = *a1;
  type metadata accessor for MainActor();
  sub_10005BC2C(a2, (void (*)(uint64_t, uint64_t))sub_10001F504, (void (*)(uint64_t, uint64_t))sub_10005C948);
  uint64_t v4 = static MainActor.shared.getter();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = &protocol witness table for MainActor;
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v5 + 64) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v5 + 80) = v6;
  *(_OWORD *)(v5 + 96) = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(v5 + 112) = *(unsigned char *)(a2 + 80);
  long long v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v5 + 32) = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 48) = v7;
  *(Swift::Double *)(v5 + 120) = v3;
  sub_10005BC2C(a2, (void (*)(uint64_t, uint64_t))sub_10001F504, (void (*)(uint64_t, uint64_t))sub_10005C948);
  uint64_t v8 = static MainActor.shared.getter();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v8;
  *(void *)(v9 + 24) = &protocol witness table for MainActor;
  long long v10 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v9 + 64) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v9 + 80) = v10;
  *(_OWORD *)(v9 + 96) = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(v9 + 112) = *(unsigned char *)(a2 + 80);
  long long v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v9 + 32) = *(_OWORD *)a2;
  *(_OWORD *)(v9 + 48) = v11;
  *(Swift::Double *)(v9 + 120) = v3;
  Binding.init(get:set:)();
  if (qword_1000A8248 != -1) {
    swift_once();
  }
  double v12 = (void *)qword_1000A9330;
  sub_10000A3AC(0, &qword_1000A96C8);
  Class isa = NSNumber.init(floatLiteral:)(v3).super.super.isa;
  id v14 = [v12 stringFromNumber:isa];

  if (v14)
  {
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v17 = v16;
  }
  else
  {
    sub_10000435C(&qword_1000A96D0);
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_1000843C0;
    *(void *)(v18 + 56) = &type metadata for CGFloat;
    *(void *)(v18 + 64) = sub_1000351D4();
    *(Swift::Double *)(v18 + 32) = v3;
    uint64_t v15 = String.init(format:_:)();
    uint64_t v17 = v19;
  }
  if (qword_1000A8148 != -1) {
    swift_once();
  }
  sub_10000435C(&qword_1000A96D0);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_1000843C0;
  *(void *)(v20 + 56) = &type metadata for String;
  *(void *)(v20 + 64) = sub_100035228();
  *(void *)(v20 + 32) = v15;
  *(void *)(v20 + 40) = v17;
  String.init(format:_:)();
  sub_1000099C8();
  return Toggle<>.init<A>(_:isOn:)();
}

uint64_t sub_100043A78@<X0>(uint64_t a1@<X2>, BOOL *a2@<X8>, double a3@<D0>)
{
  if (*(void *)(a1 + 8))
  {
    swift_retain();
    unint64_t v5 = (unint64_t)sub_100027DD8();
    swift_release();
    if (v5 >> 62) {
      goto LABEL_16;
    }
    uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter())
    {
      uint64_t v7 = 4;
      while (1)
      {
        id v8 = (v5 & 0xC000000000000001) != 0
           ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
           : *(id *)(v5 + 8 * v7);
        uint64_t v9 = v8;
        uint64_t v10 = v7 - 3;
        if (__OFADD__(v7 - 4, 1)) {
          break;
        }
        [v8 pointSize];
        double v12 = v11;

        BOOL v13 = v12 == a3;
        ++v7;
        if (v12 == a3 || v10 == v6) {
          goto LABEL_18;
        }
      }
      __break(1u);
LABEL_16:
      swift_bridgeObjectRetain();
    }
    BOOL v13 = 0;
LABEL_18:
    uint64_t result = swift_bridgeObjectRelease_n();
    *a2 = v13;
  }
  else
  {
    type metadata accessor for TextFormattingState();
    sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_100043C00(unsigned char *a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = type metadata accessor for UITextFormattingViewController.ChangeValue();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t result = __chkstk_darwin(v8);
  double v12 = (double *)((char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (*a1 == 1)
  {
    uint64_t v13 = *(void *)(a5 + 8);
    if (v13)
    {
      id v14 = *(void (**)(double *, void))(v13
                                                    + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_didChangeValue);
      *double v12 = a2;
      (*(void (**)(double *, void, uint64_t))(v9 + 104))(v12, enum case for UITextFormattingViewController.ChangeValue.fontSize(_:), v8);
      swift_retain();
      v14(v12, 0);
      swift_release();
      return (*(uint64_t (**)(double *, uint64_t))(v9 + 8))(v12, v8);
    }
    else
    {
      type metadata accessor for TextFormattingState();
      sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
      uint64_t result = EnvironmentObject.error()();
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_100043DA4@<X0>(uint64_t a1@<X8>)
{
  return sub_100040B8C(a1);
}

uint64_t sub_100043DF0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = (int *)sub_10000435C(&qword_1000A9DD8);
  uint64_t v5 = a1 + v4[10];
  uint64_t v6 = type metadata accessor for HoverEffect();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 257;
  sub_100043F1C(v2, a1 + v4[11]);
  uint64_t v7 = a1 + v4[12];
  *(void *)uint64_t v7 = swift_getKeyPath();
  *(unsigned char *)(v7 + 8) = 0;
  uint64_t v8 = a1 + v4[13];
  *(void *)uint64_t v8 = swift_getKeyPath();
  *(unsigned char *)(v8 + 8) = 0;
  uint64_t v9 = a1 + v4[14];
  *(void *)uint64_t v9 = swift_getKeyPath();
  *(unsigned char *)(v9 + 8) = 0;
  uint64_t v10 = a1 + v4[15];
  uint64_t result = State.init(wrappedValue:)();
  *(unsigned char *)uint64_t v10 = v12;
  *(void *)(v10 + 8) = v13;
  return result;
}

uint64_t sub_100043F1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v81 = a2;
  uint64_t v82 = sub_10000435C(&qword_1000A9DE0);
  __chkstk_darwin(v82);
  uint64_t v4 = (char *)&v65 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000435C(&qword_1000A9DE8);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v74 = (uint64_t)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v76 = (uint64_t)&v65 - v8;
  uint64_t v9 = sub_10000435C(&qword_1000A9810);
  uint64_t v72 = *(void *)(v9 - 8);
  uint64_t v73 = v9;
  uint64_t v10 = __chkstk_darwin(v9);
  char v12 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v65 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v65 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v75 = (uint64_t)&v65 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v84 = (uint64_t)&v65 - v22;
  __chkstk_darwin(v21);
  uint64_t v83 = (uint64_t)&v65 - v23;
  uint64_t v78 = sub_10000435C(&qword_1000A9DF0);
  __chkstk_darwin(v78);
  uint64_t v80 = (uint64_t)&v65 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = sub_10000435C(&qword_1000A9DF8);
  uint64_t v67 = *(void *)(v68 - 8);
  __chkstk_darwin(v68);
  uint64_t v65 = (char *)&v65 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = sub_10000435C(&qword_1000A9E00);
  __chkstk_darwin(v77);
  uint64_t v69 = (char *)&v65 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = sub_10000435C(&qword_1000A9E08);
  uint64_t v71 = *(void *)(v79 - 8);
  uint64_t v27 = __chkstk_darwin(v79);
  uint64_t v66 = (char *)&v65 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  uint64_t v70 = (char *)&v65 - v29;
  uint64_t v30 = *(void *)(a1 + 24);
  uint64_t v31 = *(unsigned __int8 *)(a1 + 32);
  int v32 = *(unsigned __int8 *)(a1 + 33);
  sub_10001F4F8(v30, v31, *(unsigned char *)(a1 + 33));
  uint64_t v33 = sub_100012E64(v30, v31 | (v32 << 8));
  char v35 = v34;
  uint64_t v36 = sub_10001F568(v30, v31, v32);
  if (v35) {
    goto LABEL_5;
  }
  uint64_t v37 = 2;
  if (*(unsigned char *)a1) {
    uint64_t v37 = 3;
  }
  if (v37 < v33)
  {
LABEL_5:
    sub_100044C8C(0, v83);
    sub_100045178(0, v84);
    uint64_t v38 = v75;
    sub_100045674(0, v75);
    if (*(unsigned char *)a1)
    {
      uint64_t v40 = v76;
      sub_100045B60(0, v76);
      uint64_t v39 = 0;
    }
    else
    {
      uint64_t v39 = 1;
      uint64_t v40 = v76;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v72 + 56))(v40, v39, 1, v73);
    sub_100009E70(v83, (uint64_t)v18, &qword_1000A9810);
    sub_100009E70(v84, (uint64_t)v15, &qword_1000A9810);
    sub_100009E70(v38, (uint64_t)v12, &qword_1000A9810);
    uint64_t v41 = v74;
    sub_100009E70(v40, v74, &qword_1000A9DE8);
    sub_100009E70((uint64_t)v18, (uint64_t)v4, &qword_1000A9810);
    uint64_t v42 = (int *)sub_10000435C(&qword_1000A9E10);
    sub_100009E70((uint64_t)v15, (uint64_t)&v4[v42[12]], &qword_1000A9810);
    sub_100009E70((uint64_t)v12, (uint64_t)&v4[v42[16]], &qword_1000A9810);
    sub_100009E70(v41, (uint64_t)&v4[v42[20]], &qword_1000A9DE8);
    sub_100009ED4(v41, &qword_1000A9DE8);
    sub_100009ED4((uint64_t)v12, &qword_1000A9810);
    sub_100009ED4((uint64_t)v15, &qword_1000A9810);
    sub_100009ED4((uint64_t)v18, &qword_1000A9810);
    sub_100009E70((uint64_t)v4, v80, &qword_1000A9DE0);
    swift_storeEnumTagMultiPayload();
    unint64_t v43 = sub_10005A2C8();
    unint64_t v44 = sub_100057D90();
    uint64_t v86 = v77;
    uint64_t v87 = &type metadata for TFMenuStyle;
    unint64_t v88 = v43;
    unint64_t v89 = v44;
    swift_getOpaqueTypeConformance2();
    sub_10000A368(&qword_1000A9E28, &qword_1000A9DE0);
    _ConditionalContent<>.init(storage:)();
    sub_100009ED4((uint64_t)v4, &qword_1000A9DE0);
    sub_100009ED4(v40, &qword_1000A9DE8);
    sub_100009ED4(v38, &qword_1000A9810);
    sub_100009ED4(v84, &qword_1000A9810);
    return sub_100009ED4(v83, &qword_1000A9810);
  }
  else
  {
    uint64_t v46 = __chkstk_darwin(v36);
    *(&v65 - 2) = (char *)a1;
    __chkstk_darwin(v46);
    *(&v65 - 2) = (char *)a1;
    sub_10000435C(&qword_1000A99D0);
    sub_10000A368(&qword_1000A99E0, &qword_1000A99D0);
    uint64_t v47 = sub_10000A368(&qword_1000A9E28, &qword_1000A9DE0);
    BOOL v48 = v65;
    uint64_t v84 = v47;
    Menu.init(content:label:)();
    if (qword_1000A81F8 != -1) {
      swift_once();
    }
    uint64_t v86 = qword_1000AB5A0;
    uint64_t v87 = *(ValueMetadata **)algn_1000AB5A8;
    sub_1000099C8();
    swift_bridgeObjectRetain();
    uint64_t v49 = Text.init<A>(_:)();
    uint64_t v51 = v50;
    char v53 = v52 & 1;
    sub_10000A368(&qword_1000A9E20, &qword_1000A9DF8);
    uint64_t v54 = (uint64_t)v69;
    uint64_t v55 = v68;
    View.accessibilityLabel(_:)();
    sub_100009A1C(v49, v51, v53);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v67 + 8))(v48, v55);
    char v85 = 0;
    State.init(wrappedValue:)();
    char v56 = v86;
    uint64_t v57 = v87;
    LOBYTE(v86) = 0;
    LOBYTE(v87) = v56;
    unint64_t v88 = (unint64_t)v57;
    unint64_t v58 = sub_10005A2C8();
    unint64_t v59 = sub_100057D90();
    char v60 = v66;
    uint64_t v61 = v77;
    View.menuStyle<A>(_:)();
    swift_release();
    sub_100009ED4(v54, &qword_1000A9E00);
    uint64_t v62 = v71;
    uint64_t v63 = v70;
    uint64_t v64 = v79;
    (*(void (**)(char *, char *, uint64_t))(v71 + 32))(v70, v60, v79);
    (*(void (**)(uint64_t, char *, uint64_t))(v62 + 16))(v80, v63, v64);
    swift_storeEnumTagMultiPayload();
    uint64_t v86 = v61;
    uint64_t v87 = &type metadata for TFMenuStyle;
    unint64_t v88 = v58;
    unint64_t v89 = v59;
    swift_getOpaqueTypeConformance2();
    _ConditionalContent<>.init(storage:)();
    return (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v63, v64);
  }
}

uint64_t sub_100044920@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v42 = a2;
  uint64_t v3 = sub_10000435C(&qword_1000A9DE8);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v41 = (uint64_t)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v37 - v6;
  uint64_t v39 = sub_10000435C(&qword_1000A9810);
  uint64_t v8 = *(void *)(v39 - 8);
  uint64_t v9 = __chkstk_darwin(v39);
  uint64_t v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v37 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v40 = (uint64_t)&v37 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v37 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v22 = (char *)&v37 - v21;
  __chkstk_darwin(v20);
  uint64_t v23 = 1;
  uint64_t v25 = (char *)&v37 - v24;
  sub_100044C8C(1, (uint64_t)&v37 - v24);
  uint64_t v26 = (uint64_t)v22;
  sub_100045178(1, (uint64_t)v22);
  uint64_t v27 = (uint64_t)v19;
  sub_100045674(1, (uint64_t)v19);
  if (*a1)
  {
    sub_100045B60(1, (uint64_t)v7);
    uint64_t v23 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v7, v23, 1, v39);
  uint64_t v38 = v25;
  uint64_t v28 = (uint64_t)v25;
  uint64_t v29 = v40;
  sub_100009E70(v28, v40, &qword_1000A9810);
  sub_100009E70(v26, (uint64_t)v14, &qword_1000A9810);
  sub_100009E70((uint64_t)v19, (uint64_t)v11, &qword_1000A9810);
  uint64_t v30 = v41;
  sub_100009E70((uint64_t)v7, v41, &qword_1000A9DE8);
  uint64_t v31 = (uint64_t)v7;
  uint64_t v32 = (uint64_t)v14;
  uint64_t v33 = (uint64_t)v11;
  uint64_t v34 = v42;
  sub_100009E70(v29, v42, &qword_1000A9810);
  char v35 = (int *)sub_10000435C(&qword_1000A9E10);
  sub_100009E70(v32, v34 + v35[12], &qword_1000A9810);
  sub_100009E70(v33, v34 + v35[16], &qword_1000A9810);
  sub_100009E70(v30, v34 + v35[20], &qword_1000A9DE8);
  sub_100009ED4(v31, &qword_1000A9DE8);
  sub_100009ED4(v27, &qword_1000A9810);
  sub_100009ED4(v26, &qword_1000A9810);
  sub_100009ED4((uint64_t)v38, &qword_1000A9810);
  sub_100009ED4(v30, &qword_1000A9DE8);
  sub_100009ED4(v33, &qword_1000A9810);
  sub_100009ED4(v32, &qword_1000A9810);
  return sub_100009ED4(v29, &qword_1000A9810);
}

uint64_t sub_100044C8C@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_10000435C(&qword_1000A8FF8);
  __chkstk_darwin(v6 - 8);
  uint64_t v41 = (char *)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (int *)type metadata accessor for TFToggle(0);
  __chkstk_darwin(v8);
  uint64_t v10 = (_OWORD *)((char *)v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = sub_10000435C(&qword_1000A9810);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  int v40 = a1;
  if (a1)
  {
    if (qword_1000A8118 != -1) {
      swift_once();
    }
    uint64_t v14 = qword_1000AB3E0;
    uint64_t v15 = swift_bridgeObjectRetain();
  }
  uint64_t v39 = v15;
  uint64_t v42 = v13;
  uint64_t v43 = a2;
  uint64_t KeyPath = swift_getKeyPath();
  type metadata accessor for MainActor();
  uint64_t v17 = *(void *)(v3 + 8);
  v38[1] = *(void *)(v3 + 16);
  uint64_t v47 = *(void *)(v3 + 24);
  __int16 v48 = *(_WORD *)(v3 + 32);
  swift_retain();
  swift_retain();
  sub_100057E78((uint64_t)&v47);
  uint64_t v18 = static MainActor.shared.getter();
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v18;
  *(void *)(v19 + 24) = &protocol witness table for MainActor;
  long long v20 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v19 + 32) = *(_OWORD *)v3;
  *(_OWORD *)(v19 + 48) = v20;
  *(_WORD *)(v19 + 64) = *(_WORD *)(v3 + 32);
  *(void *)(v19 + 72) = KeyPath;
  swift_retain();
  swift_retain();
  sub_100057E78((uint64_t)&v47);
  uint64_t v21 = static MainActor.shared.getter();
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v21;
  *(void *)(v22 + 24) = &protocol witness table for MainActor;
  long long v23 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v22 + 32) = *(_OWORD *)v3;
  *(_OWORD *)(v22 + 48) = v23;
  *(_WORD *)(v22 + 64) = *(_WORD *)(v3 + 32);
  *(void *)(v22 + 72) = KeyPath;
  Binding.init(get:set:)();
  swift_release();
  uint64_t v24 = v44;
  uint64_t v25 = v45;
  char v26 = v46;
  static SymbolRenderingMode.hierarchical.getter();
  *uint64_t v10 = xmmword_100084B40;
  uint64_t v27 = (uint64_t *)((char *)v10 + v8[6]);
  uint64_t v28 = v39;
  *uint64_t v27 = v14;
  v27[1] = v28;
  *((unsigned char *)v10 + v8[7]) = v40 & 1;
  uint64_t v29 = (char *)v10 + v8[8];
  *(void *)uint64_t v29 = v24;
  *((void *)v29 + 1) = v25;
  v29[16] = v26;
  uint64_t v30 = (char *)v10 + v8[9];
  *(void *)uint64_t v30 = swift_getKeyPath();
  v30[8] = 0;
  if (v17)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    uint64_t v31 = (uint64_t)v41;
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v32 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 48))(v31, 1, v32))
    {
      sub_100009ED4(v31, &qword_1000A8FF8);
      swift_release();
      char v33 = 0;
    }
    else
    {
      UITextFormattingViewController.FormattingDescriptor.textAlignments.getter();
      sub_100009ED4(v31, &qword_1000A8FF8);
      id v34 = UITextFormattingViewControllerTextAlignmentLeft;
      char v33 = sub_1000125B8();
      swift_release();

      swift_bridgeObjectRelease();
    }
    uint64_t v36 = (uint64_t)v42;
    uint64_t v35 = v43;
    if (qword_1000A8118 != -1) {
      swift_once();
    }
    sub_100039128(v33 & 1, qword_1000AB3E0, *(uint64_t *)algn_1000AB3E8, v36);
    sub_10005C87C((uint64_t)v10, type metadata accessor for TFToggle);
    return sub_100009F30(v36, v35, &qword_1000A9810);
  }
  else
  {
    type metadata accessor for TextFormattingState();
    sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_100045178@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_10000435C(&qword_1000A8FF8);
  __chkstk_darwin(v6 - 8);
  uint64_t v41 = (char *)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (int *)type metadata accessor for TFToggle(0);
  __chkstk_darwin(v8);
  uint64_t v10 = (void *)((char *)v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = sub_10000435C(&qword_1000A9810);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  int v40 = a1;
  if (a1)
  {
    if (qword_1000A8120 != -1) {
      swift_once();
    }
    uint64_t v14 = qword_1000AB3F0;
    uint64_t v15 = swift_bridgeObjectRetain();
  }
  uint64_t v39 = v15;
  uint64_t v42 = v13;
  uint64_t v43 = a2;
  uint64_t KeyPath = swift_getKeyPath();
  type metadata accessor for MainActor();
  uint64_t v17 = *(void *)(v3 + 8);
  v38[1] = *(void *)(v3 + 16);
  uint64_t v47 = *(void *)(v3 + 24);
  __int16 v48 = *(_WORD *)(v3 + 32);
  swift_retain();
  swift_retain();
  sub_100057E78((uint64_t)&v47);
  uint64_t v18 = static MainActor.shared.getter();
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v18;
  *(void *)(v19 + 24) = &protocol witness table for MainActor;
  long long v20 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v19 + 32) = *(_OWORD *)v3;
  *(_OWORD *)(v19 + 48) = v20;
  *(_WORD *)(v19 + 64) = *(_WORD *)(v3 + 32);
  *(void *)(v19 + 72) = KeyPath;
  swift_retain();
  swift_retain();
  sub_100057E78((uint64_t)&v47);
  uint64_t v21 = static MainActor.shared.getter();
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v21;
  *(void *)(v22 + 24) = &protocol witness table for MainActor;
  long long v23 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v22 + 32) = *(_OWORD *)v3;
  *(_OWORD *)(v22 + 48) = v23;
  *(_WORD *)(v22 + 64) = *(_WORD *)(v3 + 32);
  *(void *)(v22 + 72) = KeyPath;
  Binding.init(get:set:)();
  swift_release();
  uint64_t v24 = v44;
  uint64_t v25 = v45;
  char v26 = v46;
  static SymbolRenderingMode.hierarchical.getter();
  *uint64_t v10 = 0xD000000000000010;
  v10[1] = 0x80000001000880B0;
  uint64_t v27 = (void *)((char *)v10 + v8[6]);
  uint64_t v28 = v39;
  *uint64_t v27 = v14;
  v27[1] = v28;
  *((unsigned char *)v10 + v8[7]) = v40 & 1;
  uint64_t v29 = (char *)v10 + v8[8];
  *(void *)uint64_t v29 = v24;
  *((void *)v29 + 1) = v25;
  v29[16] = v26;
  uint64_t v30 = (char *)v10 + v8[9];
  *(void *)uint64_t v30 = swift_getKeyPath();
  v30[8] = 0;
  if (v17)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    uint64_t v31 = (uint64_t)v41;
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v32 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 48))(v31, 1, v32))
    {
      sub_100009ED4(v31, &qword_1000A8FF8);
      swift_release();
      char v33 = 0;
    }
    else
    {
      UITextFormattingViewController.FormattingDescriptor.textAlignments.getter();
      sub_100009ED4(v31, &qword_1000A8FF8);
      id v34 = UITextFormattingViewControllerTextAlignmentCenter;
      char v33 = sub_1000125B8();
      swift_release();

      swift_bridgeObjectRelease();
    }
    uint64_t v36 = (uint64_t)v42;
    uint64_t v35 = v43;
    if (qword_1000A8120 != -1) {
      swift_once();
    }
    sub_100039128(v33 & 1, qword_1000AB3F0, *(uint64_t *)algn_1000AB3F8, v36);
    sub_10005C87C((uint64_t)v10, type metadata accessor for TFToggle);
    return sub_100009F30(v36, v35, &qword_1000A9810);
  }
  else
  {
    type metadata accessor for TextFormattingState();
    sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_100045674@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_10000435C(&qword_1000A8FF8);
  __chkstk_darwin(v6 - 8);
  uint64_t v41 = (char *)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (int *)type metadata accessor for TFToggle(0);
  __chkstk_darwin(v8);
  uint64_t v10 = (_OWORD *)((char *)v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = sub_10000435C(&qword_1000A9810);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  int v40 = a1;
  if (a1)
  {
    if (qword_1000A8128 != -1) {
      swift_once();
    }
    uint64_t v14 = qword_1000AB400;
    uint64_t v15 = swift_bridgeObjectRetain();
  }
  uint64_t v39 = v15;
  uint64_t v42 = v13;
  uint64_t v43 = a2;
  uint64_t KeyPath = swift_getKeyPath();
  type metadata accessor for MainActor();
  uint64_t v17 = *(void *)(v3 + 8);
  v38[1] = *(void *)(v3 + 16);
  uint64_t v47 = *(void *)(v3 + 24);
  __int16 v48 = *(_WORD *)(v3 + 32);
  swift_retain();
  swift_retain();
  sub_100057E78((uint64_t)&v47);
  uint64_t v18 = static MainActor.shared.getter();
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v18;
  *(void *)(v19 + 24) = &protocol witness table for MainActor;
  long long v20 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v19 + 32) = *(_OWORD *)v3;
  *(_OWORD *)(v19 + 48) = v20;
  *(_WORD *)(v19 + 64) = *(_WORD *)(v3 + 32);
  *(void *)(v19 + 72) = KeyPath;
  swift_retain();
  swift_retain();
  sub_100057E78((uint64_t)&v47);
  uint64_t v21 = static MainActor.shared.getter();
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v21;
  *(void *)(v22 + 24) = &protocol witness table for MainActor;
  long long v23 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v22 + 32) = *(_OWORD *)v3;
  *(_OWORD *)(v22 + 48) = v23;
  *(_WORD *)(v22 + 64) = *(_WORD *)(v3 + 32);
  *(void *)(v22 + 72) = KeyPath;
  Binding.init(get:set:)();
  swift_release();
  uint64_t v24 = v44;
  uint64_t v25 = v45;
  char v26 = v46;
  static SymbolRenderingMode.hierarchical.getter();
  *uint64_t v10 = xmmword_100084B50;
  uint64_t v27 = (uint64_t *)((char *)v10 + v8[6]);
  uint64_t v28 = v39;
  *uint64_t v27 = v14;
  v27[1] = v28;
  *((unsigned char *)v10 + v8[7]) = v40 & 1;
  uint64_t v29 = (char *)v10 + v8[8];
  *(void *)uint64_t v29 = v24;
  *((void *)v29 + 1) = v25;
  v29[16] = v26;
  uint64_t v30 = (char *)v10 + v8[9];
  *(void *)uint64_t v30 = swift_getKeyPath();
  v30[8] = 0;
  if (v17)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    uint64_t v31 = (uint64_t)v41;
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v32 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 48))(v31, 1, v32))
    {
      sub_100009ED4(v31, &qword_1000A8FF8);
      swift_release();
      char v33 = 0;
    }
    else
    {
      UITextFormattingViewController.FormattingDescriptor.textAlignments.getter();
      sub_100009ED4(v31, &qword_1000A8FF8);
      id v34 = UITextFormattingViewControllerTextAlignmentRight;
      char v33 = sub_1000125B8();
      swift_release();

      swift_bridgeObjectRelease();
    }
    uint64_t v36 = (uint64_t)v42;
    uint64_t v35 = v43;
    if (qword_1000A8128 != -1) {
      swift_once();
    }
    sub_100039128(v33 & 1, qword_1000AB400, *(uint64_t *)algn_1000AB408, v36);
    sub_10005C87C((uint64_t)v10, type metadata accessor for TFToggle);
    return sub_100009F30(v36, v35, &qword_1000A9810);
  }
  else
  {
    type metadata accessor for TextFormattingState();
    sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_100045B60@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_10000435C(&qword_1000A8FF8);
  __chkstk_darwin(v6 - 8);
  uint64_t v41 = (char *)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (int *)type metadata accessor for TFToggle(0);
  __chkstk_darwin(v8);
  uint64_t v10 = (void *)((char *)v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = sub_10000435C(&qword_1000A9810);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  int v40 = a1;
  if (a1)
  {
    if (qword_1000A8130 != -1) {
      swift_once();
    }
    uint64_t v14 = qword_1000AB410;
    uint64_t v15 = swift_bridgeObjectRetain();
  }
  uint64_t v39 = v15;
  uint64_t v42 = v13;
  uint64_t v43 = a2;
  uint64_t KeyPath = swift_getKeyPath();
  type metadata accessor for MainActor();
  uint64_t v17 = *(void *)(v3 + 8);
  v38[1] = *(void *)(v3 + 16);
  uint64_t v47 = *(void *)(v3 + 24);
  __int16 v48 = *(_WORD *)(v3 + 32);
  swift_retain();
  swift_retain();
  sub_100057E78((uint64_t)&v47);
  uint64_t v18 = static MainActor.shared.getter();
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v18;
  *(void *)(v19 + 24) = &protocol witness table for MainActor;
  long long v20 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v19 + 32) = *(_OWORD *)v3;
  *(_OWORD *)(v19 + 48) = v20;
  *(_WORD *)(v19 + 64) = *(_WORD *)(v3 + 32);
  *(void *)(v19 + 72) = KeyPath;
  swift_retain();
  swift_retain();
  sub_100057E78((uint64_t)&v47);
  uint64_t v21 = static MainActor.shared.getter();
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v21;
  *(void *)(v22 + 24) = &protocol witness table for MainActor;
  long long v23 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v22 + 32) = *(_OWORD *)v3;
  *(_OWORD *)(v22 + 48) = v23;
  *(_WORD *)(v22 + 64) = *(_WORD *)(v3 + 32);
  *(void *)(v22 + 72) = KeyPath;
  Binding.init(get:set:)();
  swift_release();
  uint64_t v24 = v44;
  uint64_t v25 = v45;
  char v26 = v46;
  static SymbolRenderingMode.hierarchical.getter();
  *uint64_t v10 = 0xD000000000000014;
  v10[1] = 0x8000000100088090;
  uint64_t v27 = (void *)((char *)v10 + v8[6]);
  uint64_t v28 = v39;
  *uint64_t v27 = v14;
  v27[1] = v28;
  *((unsigned char *)v10 + v8[7]) = v40 & 1;
  uint64_t v29 = (char *)v10 + v8[8];
  *(void *)uint64_t v29 = v24;
  *((void *)v29 + 1) = v25;
  v29[16] = v26;
  uint64_t v30 = (char *)v10 + v8[9];
  *(void *)uint64_t v30 = swift_getKeyPath();
  v30[8] = 0;
  if (v17)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    uint64_t v31 = (uint64_t)v41;
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v32 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 48))(v31, 1, v32))
    {
      sub_100009ED4(v31, &qword_1000A8FF8);
      swift_release();
      char v33 = 0;
    }
    else
    {
      UITextFormattingViewController.FormattingDescriptor.textAlignments.getter();
      sub_100009ED4(v31, &qword_1000A8FF8);
      id v34 = UITextFormattingViewControllerTextAlignmentJustified;
      char v33 = sub_1000125B8();
      swift_release();

      swift_bridgeObjectRelease();
    }
    uint64_t v36 = (uint64_t)v42;
    uint64_t v35 = v43;
    if (qword_1000A8130 != -1) {
      swift_once();
    }
    sub_100039128(v33 & 1, qword_1000AB410, *(uint64_t *)algn_1000AB418, v36);
    sub_10005C87C((uint64_t)v10, type metadata accessor for TFToggle);
    return sub_100009F30(v36, v35, &qword_1000A9810);
  }
  else
  {
    type metadata accessor for TextFormattingState();
    sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10004605C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for TFSymbol(0);
  uint64_t v5 = (int *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v20[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = sub_1000574F8(*(unsigned char *)a1 & 1, *(void *)(a1 + 8));
  uint64_t v10 = v9;
  uint64_t v11 = static Font.title3.getter();
  static SymbolRenderingMode.hierarchical.getter();
  *(void *)uint64_t v7 = v8;
  *((void *)v7 + 1) = v10;
  v7[16] = 0;
  *((void *)v7 + 3) = v11;
  *((void *)v7 + 4) = 0;
  v7[v5[11]] = 1;
  v7[v5[12]] = 1;
  uint64_t v12 = &v7[v5[13]];
  *(void *)uint64_t v12 = swift_getKeyPath();
  v12[8] = 0;
  uint64_t v13 = &v7[v5[14]];
  *(void *)uint64_t v13 = swift_getKeyPath();
  v13[8] = 0;
  sub_10005A91C((uint64_t)v7, a2, type metadata accessor for TFSymbol);
  uint64_t v14 = (int *)sub_10000435C(&qword_1000A99D0);
  uint64_t v15 = a2 + v14[9];
  v20[15] = 0;
  State.init(wrappedValue:)();
  uint64_t v16 = v21;
  *(unsigned char *)uint64_t v15 = v20[16];
  *(void *)(v15 + 8) = v16;
  uint64_t v17 = a2 + v14[10];
  *(void *)uint64_t v17 = swift_getKeyPath();
  *(unsigned char *)(v17 + 8) = 0;
  uint64_t v18 = a2 + v14[11];
  uint64_t result = swift_getKeyPath();
  *(void *)uint64_t v18 = result;
  *(unsigned char *)(v18 + 8) = 0;
  return result;
}

uint64_t sub_1000461FC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10002CA00();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10004622C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10002CF44();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10004625C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10002D0AC();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10004628C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10002D0B8();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1000462BC(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5)
{
  uint64_t v7 = type metadata accessor for UITextFormattingViewController.ChangeValue();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (uint64_t *)((char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (*a1) {
    uint64_t v11 = *a5;
  }
  else {
    uint64_t v11 = (void *)UITextFormattingViewControllerTextAlignmentNatural;
  }
  *uint64_t v10 = v11;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v10, enum case for UITextFormattingViewController.ChangeValue.textAlignment(_:), v7);
  sub_10002CA0C((uint64_t)v10);
  return (*(uint64_t (**)(void *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_1000463E0@<X0>(uint64_t a1@<X2>, unsigned char *a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    uint64_t v7 = *(void *)(a1 + 8);
    swift_retain();
    uint64_t v3 = (void (*)(unsigned char *, void))swift_readAtKeyPath();
    *a2 = *v4;
    v3(v6, 0);
    return swift_release();
  }
  else
  {
    type metadata accessor for TextFormattingState();
    sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000464B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a4 + 8))
  {
    swift_retain();
    swift_setAtReferenceWritableKeyPath();
    return swift_release();
  }
  else
  {
    type metadata accessor for TextFormattingState();
    sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_100046570@<X0>(uint64_t a1@<X8>)
{
  return sub_100043DF0(a1);
}

uint64_t sub_1000465AC@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v35 = a3;
  uint64_t v36 = a4;
  uint64_t v34 = a2;
  uint64_t v38 = a6;
  uint64_t v8 = (int *)type metadata accessor for TFToggle(0);
  __chkstk_darwin(v8);
  uint64_t v10 = (_OWORD *)((char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  int v37 = a1;
  if (a1)
  {
    if (qword_1000A81A8 != -1) {
      swift_once();
    }
    uint64_t v11 = qword_1000AB500;
    uint64_t v12 = swift_bridgeObjectRetain();
  }
  uint64_t v33 = v12;
  type metadata accessor for MainActor();
  uint64_t v13 = static MainActor.shared.getter();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v13;
  *(void *)(v14 + 24) = &protocol witness table for MainActor;
  uint64_t v15 = v34;
  swift_retain();
  uint64_t v16 = v36;
  sub_10001F4F8(v36, a5, BYTE1(a5) & 1);
  uint64_t v17 = static MainActor.shared.getter();
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v17;
  *(void *)(v18 + 24) = &protocol witness table for MainActor;
  uint64_t v19 = v35;
  *(void *)(v18 + 32) = v15;
  *(void *)(v18 + 40) = v19;
  *(void *)(v18 + 48) = v16;
  *(unsigned char *)(v18 + 56) = a5;
  *(unsigned char *)(v18 + 57) = BYTE1(a5) & 1;
  Binding.init(get:set:)();
  uint64_t v20 = v39;
  uint64_t v21 = v40;
  char v22 = v41;
  static SymbolRenderingMode.hierarchical.getter();
  *uint64_t v10 = xmmword_100084B60;
  long long v23 = (uint64_t *)((char *)v10 + v8[6]);
  uint64_t v24 = v33;
  *long long v23 = v11;
  v23[1] = v24;
  *((unsigned char *)v10 + v8[7]) = v37 & 1;
  uint64_t v25 = (char *)v10 + v8[8];
  *(void *)uint64_t v25 = v20;
  *((void *)v25 + 1) = v21;
  v25[16] = v22;
  char v26 = (char *)v10 + v8[9];
  *(void *)char v26 = swift_getKeyPath();
  v26[8] = 0;
  if (qword_1000A81A8 != -1) {
    swift_once();
  }
  uint64_t v39 = qword_1000AB500;
  uint64_t v40 = *(void *)algn_1000AB508;
  sub_1000099C8();
  swift_bridgeObjectRetain();
  uint64_t v27 = Text.init<A>(_:)();
  uint64_t v29 = v28;
  char v31 = v30 & 1;
  sub_100057C6C(&qword_1000A9850, (void (*)(uint64_t))type metadata accessor for TFToggle);
  View.accessibilityLabel(_:)();
  sub_100009A1C(v27, v29, v31);
  swift_bridgeObjectRelease();
  return sub_10005C87C((uint64_t)v10, type metadata accessor for TFToggle);
}

uint64_t sub_1000468E0@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v35 = a3;
  uint64_t v36 = a4;
  uint64_t v34 = a2;
  uint64_t v38 = a6;
  uint64_t v8 = (int *)type metadata accessor for TFToggle(0);
  __chkstk_darwin(v8);
  uint64_t v10 = (_OWORD *)((char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  int v37 = a1;
  if (a1)
  {
    if (qword_1000A81A0 != -1) {
      swift_once();
    }
    uint64_t v11 = qword_1000AB4F0;
    uint64_t v12 = swift_bridgeObjectRetain();
  }
  uint64_t v33 = v12;
  type metadata accessor for MainActor();
  uint64_t v13 = static MainActor.shared.getter();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v13;
  *(void *)(v14 + 24) = &protocol witness table for MainActor;
  uint64_t v15 = v34;
  swift_retain();
  uint64_t v16 = v36;
  sub_10001F4F8(v36, a5, BYTE1(a5) & 1);
  uint64_t v17 = static MainActor.shared.getter();
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v17;
  *(void *)(v18 + 24) = &protocol witness table for MainActor;
  uint64_t v19 = v35;
  *(void *)(v18 + 32) = v15;
  *(void *)(v18 + 40) = v19;
  *(void *)(v18 + 48) = v16;
  *(unsigned char *)(v18 + 56) = a5;
  *(unsigned char *)(v18 + 57) = BYTE1(a5) & 1;
  Binding.init(get:set:)();
  uint64_t v20 = v39;
  uint64_t v21 = v40;
  char v22 = v41;
  static SymbolRenderingMode.hierarchical.getter();
  *uint64_t v10 = xmmword_100084B70;
  long long v23 = (uint64_t *)((char *)v10 + v8[6]);
  uint64_t v24 = v33;
  *long long v23 = v11;
  v23[1] = v24;
  *((unsigned char *)v10 + v8[7]) = v37 & 1;
  uint64_t v25 = (char *)v10 + v8[8];
  *(void *)uint64_t v25 = v20;
  *((void *)v25 + 1) = v21;
  v25[16] = v22;
  char v26 = (char *)v10 + v8[9];
  *(void *)char v26 = swift_getKeyPath();
  v26[8] = 0;
  if (qword_1000A81A0 != -1) {
    swift_once();
  }
  uint64_t v39 = qword_1000AB4F0;
  uint64_t v40 = *(void *)algn_1000AB4F8;
  sub_1000099C8();
  swift_bridgeObjectRetain();
  uint64_t v27 = Text.init<A>(_:)();
  uint64_t v29 = v28;
  char v31 = v30 & 1;
  sub_100057C6C(&qword_1000A9850, (void (*)(uint64_t))type metadata accessor for TFToggle);
  View.accessibilityLabel(_:)();
  sub_100009A1C(v27, v29, v31);
  swift_bridgeObjectRelease();
  return sub_10005C87C((uint64_t)v10, type metadata accessor for TFToggle);
}

uint64_t sub_100046C14@<X0>(uint64_t a1@<X8>)
{
  return sub_100046C20(a1, (__n128)xmmword_100084B70);
}

uint64_t sub_100046C20@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  __n128 v16 = a2;
  uint64_t v3 = type metadata accessor for TFSymbol(0);
  uint64_t v4 = (int *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = static Font.title3.getter();
  static SymbolRenderingMode.hierarchical.getter();
  *(__n128 *)uint64_t v6 = v16;
  v6[16] = 0;
  *((void *)v6 + 3) = v7;
  *((void *)v6 + 4) = 0;
  v6[v4[11]] = 1;
  v6[v4[12]] = 1;
  uint64_t v8 = &v6[v4[13]];
  *(void *)uint64_t v8 = swift_getKeyPath();
  v8[8] = 0;
  uint64_t v9 = &v6[v4[14]];
  *(void *)uint64_t v9 = swift_getKeyPath();
  v9[8] = 0;
  sub_10005A91C((uint64_t)v6, a1, type metadata accessor for TFSymbol);
  uint64_t v10 = (int *)sub_10000435C(&qword_1000A99D0);
  uint64_t v11 = a1 + v10[9];
  char v17 = 0;
  State.init(wrappedValue:)();
  uint64_t v12 = v19;
  *(unsigned char *)uint64_t v11 = v18;
  *(void *)(v11 + 8) = v12;
  uint64_t v13 = a1 + v10[10];
  *(void *)uint64_t v13 = swift_getKeyPath();
  *(unsigned char *)(v13 + 8) = 0;
  uint64_t v14 = a1 + v10[11];
  uint64_t result = swift_getKeyPath();
  *(void *)uint64_t v14 = result;
  *(unsigned char *)(v14 + 8) = 0;
  return result;
}

uint64_t sub_100046DA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  if (a4)
  {
    swift_retain();
    sub_10002F034(a8 & 1);
    return swift_release();
  }
  else
  {
    type metadata accessor for TextFormattingState();
    sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_100046E4C@<X0>(uint64_t a1@<X8>)
{
  return sub_10004D388((uint64_t)sub_10005A4C0, (uint64_t)sub_100046C14, (void (*)(void, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000465AC, (void (*)(void, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000468E0, a1);
}

uint64_t sub_100046EA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __int16 a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v39 = a5;
  uint64_t v36 = sub_10000435C(&qword_1000A9E70);
  uint64_t v38 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  uint64_t v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = sub_10000435C(&qword_1000A9E78);
  uint64_t v11 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  uint64_t v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (int *)sub_10000435C(&qword_1000A9E80);
  uint64_t v15 = __chkstk_darwin(v14);
  char v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v18 = &v17[*(int *)(v15 + 40)];
  uint64_t v19 = type metadata accessor for HoverEffect();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v18, 1, 1, v19);
  *(void *)char v17 = 0;
  *((_WORD *)v17 + 4) = 257;
  uint64_t v35 = &v17[v14[11]];
  uint64_t v40 = a1;
  uint64_t v41 = a2;
  uint64_t v42 = a3;
  __int16 v43 = a4 & 0x1FF;
  sub_10000435C(&qword_1000A99D0);
  sub_10000435C(&qword_1000A9D68);
  sub_10000A368(&qword_1000A99E0, &qword_1000A99D0);
  sub_1000588A8(&qword_1000A9D80, &qword_1000A9D68);
  Menu.init(content:label:)();
  char v47 = 0;
  State.init(wrappedValue:)();
  char v20 = v44;
  uint64_t v21 = v45;
  LOBYTE(v44) = 0;
  LOBYTE(v45) = v20;
  uint64_t v46 = v21;
  sub_10000A368(&qword_1000A9E88, &qword_1000A9E70);
  sub_100057D90();
  uint64_t v22 = v36;
  View.menuStyle<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v38 + 8))(v10, v22);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v35, v13, v37);
  long long v23 = &v17[v14[12]];
  *(void *)long long v23 = swift_getKeyPath();
  v23[8] = 0;
  uint64_t v24 = &v17[v14[13]];
  *(void *)uint64_t v24 = swift_getKeyPath();
  v24[8] = 0;
  uint64_t v25 = &v17[v14[14]];
  *(void *)uint64_t v25 = swift_getKeyPath();
  v25[8] = 0;
  char v26 = &v17[v14[15]];
  char v47 = 0;
  State.init(wrappedValue:)();
  uint64_t v27 = v45;
  *char v26 = v44;
  *((void *)v26 + 1) = v27;
  if (qword_1000A8200 != -1) {
    swift_once();
  }
  uint64_t v44 = qword_1000AB5B0;
  uint64_t v45 = *(void *)algn_1000AB5B8;
  sub_1000099C8();
  swift_bridgeObjectRetain();
  uint64_t v28 = Text.init<A>(_:)();
  uint64_t v30 = v29;
  char v32 = v31 & 1;
  sub_10000A368(&qword_1000A9E90, &qword_1000A9E80);
  View.accessibilityLabel(_:)();
  sub_100009A1C(v28, v30, v32);
  swift_bridgeObjectRelease();
  return sub_100009ED4((uint64_t)v17, &qword_1000A9E80);
}

uint64_t sub_100047388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_1000A8240 != -1) {
    swift_once();
  }
  swift_getKeyPath();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  *(void *)(v8 + 32) = a3;
  *(unsigned char *)(v8 + 40) = a4;
  *(unsigned char *)(v8 + 41) = BYTE1(a4) & 1;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_10001F4F8(a3, a4, BYTE1(a4) & 1);
  sub_10000435C(&qword_1000A9D98);
  sub_10000435C(&qword_1000A99F8);
  sub_10000A368(&qword_1000A9DA0, &qword_1000A9D98);
  sub_10001E2C0();
  sub_10000A368(&qword_1000A99F0, &qword_1000A99F8);
  return ForEach<>.init(_:id:content:)();
}

uint64_t sub_100047530@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for TFSymbol(0);
  uint64_t v3 = (int *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = static Font.title3.getter();
  static SymbolRenderingMode.hierarchical.getter();
  *(void *)uint64_t v5 = 0xD000000000000021;
  *((void *)v5 + 1) = 0x80000001000880D0;
  v5[16] = 0;
  *((void *)v5 + 3) = v6;
  *((void *)v5 + 4) = 0;
  v5[v3[11]] = 1;
  v5[v3[12]] = 1;
  uint64_t v7 = &v5[v3[13]];
  *(void *)uint64_t v7 = swift_getKeyPath();
  v7[8] = 0;
  uint64_t v8 = &v5[v3[14]];
  *(void *)uint64_t v8 = swift_getKeyPath();
  v8[8] = 0;
  sub_10005A91C((uint64_t)v5, a1, type metadata accessor for TFSymbol);
  uint64_t v9 = (int *)sub_10000435C(&qword_1000A99D0);
  uint64_t v10 = a1 + v9[9];
  v15[15] = 0;
  State.init(wrappedValue:)();
  uint64_t v11 = v16;
  *(unsigned char *)uint64_t v10 = v15[16];
  *(void *)(v10 + 8) = v11;
  uint64_t v12 = a1 + v9[10];
  *(void *)uint64_t v12 = swift_getKeyPath();
  *(unsigned char *)(v12 + 8) = 0;
  uint64_t v13 = a1 + v9[11];
  uint64_t result = swift_getKeyPath();
  *(void *)uint64_t v13 = result;
  *(unsigned char *)(v13 + 8) = 0;
  return result;
}

uint64_t sub_1000476C4@<X0>(double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v33 = a6;
  unsigned int v11 = (a5 >> 8) & 1;
  uint64_t v12 = sub_10000435C(&qword_1000A99F8);
  uint64_t v31 = *(void *)(v12 - 8);
  uint64_t v32 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::Double v15 = *a1;
  type metadata accessor for MainActor();
  swift_retain();
  sub_10001F4F8(a4, a5, v11);
  uint64_t v16 = static MainActor.shared.getter();
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v16;
  *(void *)(v17 + 24) = &protocol witness table for MainActor;
  *(void *)(v17 + 32) = a2;
  *(void *)(v17 + 40) = a3;
  *(void *)(v17 + 48) = a4;
  *(unsigned char *)(v17 + 56) = a5;
  *(unsigned char *)(v17 + 57) = v11;
  *(Swift::Double *)(v17 + 64) = v15;
  swift_retain();
  sub_10001F4F8(a4, a5, v11);
  uint64_t v18 = static MainActor.shared.getter();
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v18;
  *(void *)(v19 + 24) = &protocol witness table for MainActor;
  *(void *)(v19 + 32) = a2;
  *(void *)(v19 + 40) = a3;
  *(void *)(v19 + 48) = a4;
  *(unsigned char *)(v19 + 56) = a5;
  *(unsigned char *)(v19 + 57) = v11;
  *(Swift::Double *)(v19 + 64) = v15;
  Binding.init(get:set:)();
  if (qword_1000A8248 != -1) {
    swift_once();
  }
  char v20 = (void *)qword_1000A9330;
  sub_10000A3AC(0, &qword_1000A96C8);
  Class isa = NSNumber.init(floatLiteral:)(v15).super.super.isa;
  id v22 = [v20 stringFromNumber:isa];

  if (v22)
  {
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v25 = v24;
  }
  else
  {
    sub_10000435C(&qword_1000A96D0);
    uint64_t v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = xmmword_1000843C0;
    *(void *)(v26 + 56) = &type metadata for CGFloat;
    *(void *)(v26 + 64) = sub_1000351D4();
    *(Swift::Double *)(v26 + 32) = v15;
    uint64_t v23 = String.init(format:_:)();
    uint64_t v25 = v27;
  }
  if (qword_1000A8148 != -1) {
    swift_once();
  }
  sub_10000435C(&qword_1000A96D0);
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_1000843C0;
  *(void *)(v28 + 56) = &type metadata for String;
  *(void *)(v28 + 64) = sub_100035228();
  *(void *)(v28 + 32) = v23;
  *(void *)(v28 + 40) = v25;
  uint64_t v34 = String.init(format:_:)();
  uint64_t v35 = v29;
  sub_1000099C8();
  Toggle<>.init<A>(_:isOn:)();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v31 + 32))(v33, v14, v32);
}

uint64_t sub_100047A68@<X0>(uint64_t a1@<X2>, BOOL *a2@<X8>, double a3@<D0>)
{
  if (a1)
  {
    swift_retain();
    double v5 = COERCE_DOUBLE(sub_10002D9A8());
    char v7 = v6;
    uint64_t result = swift_release();
    BOOL v9 = v5 == a3;
    if (v7) {
      BOOL v9 = 0;
    }
    *a2 = v9;
  }
  else
  {
    type metadata accessor for TextFormattingState();
    sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

unsigned char *sub_100047B38(unsigned char *result, double a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*result == 1)
  {
    if (a5)
    {
      swift_retain();
      sub_10002DC04(*(uint64_t *)&a2, 0);
      return (unsigned char *)swift_release();
    }
    else
    {
      type metadata accessor for TextFormattingState();
      sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
      uint64_t result = (unsigned char *)EnvironmentObject.error()();
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_100047BFC(uint64_t a1, uint64_t a2)
{
  return sub_100047C14(a1, a2, (uint64_t (*)(void, void, void, void))sub_100046EA0);
}

uint64_t sub_100047C14(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void, void, void))
{
  return a3(*(void *)v3, *(void *)(v3 + 8), *(void *)(v3 + 16), *(unsigned __int8 *)(v3 + 24) | (*(unsigned __int8 *)(v3 + 25) << 8));
}

uint64_t sub_100047C3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __int16 a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10 = (int *)sub_10000435C(&qword_1000A9E98);
  uint64_t v11 = a5 + v10[10];
  uint64_t v12 = type metadata accessor for HoverEffect();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  *(void *)a5 = 0;
  *(_WORD *)(a5 + 8) = 257;
  sub_100047D90(a1, a2, a3, a4 & 0x1FF, a5 + v10[11]);
  uint64_t v13 = a5 + v10[12];
  *(void *)uint64_t v13 = swift_getKeyPath();
  *(unsigned char *)(v13 + 8) = 0;
  uint64_t v14 = a5 + v10[13];
  *(void *)uint64_t v14 = swift_getKeyPath();
  *(unsigned char *)(v14 + 8) = 0;
  uint64_t v15 = a5 + v10[14];
  *(void *)uint64_t v15 = swift_getKeyPath();
  *(unsigned char *)(v15 + 8) = 0;
  uint64_t v16 = a5 + v10[15];
  uint64_t result = State.init(wrappedValue:)();
  *(unsigned char *)uint64_t v16 = v18;
  *(void *)(v16 + 8) = v19;
  return result;
}

uint64_t sub_100047D90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v34 = a2;
  uint64_t v37 = a5;
  unsigned int v8 = a4 >> 8;
  unsigned int v9 = (a4 >> 8) & 1;
  uint64_t v38 = sub_10000435C(&qword_1000A9EA0);
  uint64_t v33 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v32 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = sub_10000435C(&qword_1000A9EA8);
  __chkstk_darwin(v35);
  uint64_t v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = sub_10000435C(&qword_1000A9EB0);
  uint64_t v13 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  uint64_t v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001F4F8(a3, a4, v9);
  uint64_t v16 = sub_100012E64(a3, a4 | ((v8 & 1) << 8));
  LOBYTE(v8) = v17;
  sub_10001F568(a3, a4, v9);
  if ((v8 & 1) != 0 || (unint64_t)(v16 - 1) > 1)
  {
    if (qword_1000A8230 != -1) {
      swift_once();
    }
    uint64_t v39 = qword_1000AB600;
    uint64_t v23 = swift_allocObject();
    uint64_t v24 = v34;
    *(void *)(v23 + 16) = a1;
    *(void *)(v23 + 24) = v24;
    *(void *)(v23 + 32) = a3;
    *(unsigned char *)(v23 + 40) = a4;
    *(unsigned char *)(v23 + 41) = v9;
    sub_10001F4F8(a3, a4, v9);
    swift_retain();
    swift_bridgeObjectRetain();
    sub_10000435C(&qword_1000A96B0);
    sub_10000435C(&qword_1000A9810);
    sub_10000A368(&qword_1000A9EB8, &qword_1000A96B0);
    sub_100057CB4();
    sub_10005A640();
    uint64_t v25 = v32;
    ForEach<>.init(_:content:)();
    uint64_t v26 = v33;
    uint64_t v27 = v38;
    (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v12, v25, v38);
    swift_storeEnumTagMultiPayload();
    uint64_t v28 = sub_100003F9C(&qword_1000A9EC8);
    unint64_t v29 = sub_10005A694();
    unint64_t v30 = sub_100057D90();
    uint64_t v39 = v28;
    uint64_t v40 = &type metadata for TFMenuStyle;
    unint64_t v41 = v29;
    unint64_t v42 = v30;
    swift_getOpaqueTypeConformance2();
    sub_10005B6D0(&qword_1000A9EE8, &qword_1000A9EA0, (void (*)(void))sub_100057CB4);
    _ConditionalContent<>.init(storage:)();
    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v25, v27);
  }
  else
  {
    sub_1000482A8(a1, v34, a3, a4 & 0x1FF);
    uint64_t v18 = v36;
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v12, v15, v36);
    swift_storeEnumTagMultiPayload();
    uint64_t v19 = sub_100003F9C(&qword_1000A9EC8);
    unint64_t v20 = sub_10005A694();
    unint64_t v21 = sub_100057D90();
    uint64_t v39 = v19;
    uint64_t v40 = &type metadata for TFMenuStyle;
    unint64_t v41 = v20;
    unint64_t v42 = v21;
    swift_getOpaqueTypeConformance2();
    sub_10005B6D0(&qword_1000A9EE8, &qword_1000A9EA0, (void (*)(void))sub_100057CB4);
    _ConditionalContent<>.init(storage:)();
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v18);
  }
}

uint64_t sub_1000482A8(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  uint64_t v8 = sub_10000435C(&qword_1000A9EE0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = &v23[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = sub_10000435C(&qword_1000A9EC8);
  __chkstk_darwin(v12);
  uint64_t v14 = &v23[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v28 = a1;
  uint64_t v29 = a2;
  uint64_t v30 = a3;
  __int16 v31 = a4 & 0x1FF;
  uint64_t v24 = a1;
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  __int16 v27 = a4 & 0x1FF;
  sub_10000435C(&qword_1000A99D0);
  sub_10000435C(&qword_1000A9EF0);
  sub_10000A368(&qword_1000A99E0, &qword_1000A99D0);
  sub_10000A368(&qword_1000A9EF8, &qword_1000A9EF0);
  Menu.init(content:label:)();
  if (qword_1000A8208 != -1) {
    swift_once();
  }
  uint64_t v32 = qword_1000AB5C0;
  uint64_t v33 = *(void *)algn_1000AB5C8;
  sub_1000099C8();
  swift_bridgeObjectRetain();
  uint64_t v15 = Text.init<A>(_:)();
  uint64_t v17 = v16;
  char v19 = v18 & 1;
  sub_10000A368(&qword_1000A9ED8, &qword_1000A9EE0);
  View.accessibilityLabel(_:)();
  sub_100009A1C(v15, v17, v19);
  swift_bridgeObjectRelease();
  (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v11, v8);
  char v35 = 0;
  State.init(wrappedValue:)();
  char v20 = v32;
  uint64_t v21 = v33;
  LOBYTE(v32) = 0;
  LOBYTE(v33) = v20;
  uint64_t v34 = v21;
  sub_10005A694();
  sub_100057D90();
  View.menuStyle<A>(_:)();
  swift_release();
  return sub_100009ED4((uint64_t)v14, &qword_1000A9EC8);
}

uint64_t sub_10004860C@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unsigned int v17 = a5 >> 8;
  unsigned int v10 = (a5 >> 8) & 1;
  char v11 = *a1;
  type metadata accessor for MainActor();
  swift_retain();
  sub_10001F4F8(a4, a5, v10);
  uint64_t v12 = static MainActor.shared.getter();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v12;
  *(void *)(v13 + 24) = &protocol witness table for MainActor;
  *(void *)(v13 + 32) = a2;
  *(void *)(v13 + 40) = a3;
  *(void *)(v13 + 48) = a4;
  *(unsigned char *)(v13 + 56) = a5;
  *(unsigned char *)(v13 + 57) = v10;
  *(unsigned char *)(v13 + 58) = v11;
  swift_retain();
  sub_10001F4F8(a4, a5, v10);
  uint64_t v14 = static MainActor.shared.getter();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v14;
  *(void *)(v15 + 24) = &protocol witness table for MainActor;
  *(void *)(v15 + 32) = a2;
  *(void *)(v15 + 40) = a3;
  *(void *)(v15 + 48) = a4;
  *(unsigned char *)(v15 + 56) = a5;
  *(unsigned char *)(v15 + 57) = v10;
  *(unsigned char *)(v15 + 58) = v11;
  Binding.init(get:set:)();
  sub_1000487B0(v11, 0, v19, v20, v21, a4, a6, a5 | ((v17 & 1) << 8));
  swift_release();
  return swift_release();
}

uint64_t sub_1000487B0@<X0>(char a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X7>, uint64_t a7@<X8>, unsigned __int16 a8)
{
  int v40 = a2;
  int v41 = a5;
  uint64_t v43 = a7;
  int v13 = HIBYTE(a8) & 1;
  uint64_t v14 = (int *)type metadata accessor for TFToggle(0);
  __chkstk_darwin(v14);
  uint64_t v16 = (uint64_t *)((char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = sub_10000435C(&qword_1000A9810);
  __chkstk_darwin(v17 - 8);
  uint64_t v42 = (uint64_t)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = 8 * a1;
  uint64_t v20 = *(void *)&aListBullistDas[v19];
  uint64_t v38 = *(void *)&aListBullistDas[v19 + 32];
  uint64_t v39 = v20;
  sub_10001F4F8(a6, a8, v13);
  uint64_t v21 = sub_100012E64(a6, a8 | (v13 << 8));
  char v23 = v22;
  sub_10001F568(a6, a8, v13);
  uint64_t v24 = 0;
  if (v23)
  {
    uint64_t v25 = 0;
  }
  else
  {
    uint64_t v25 = 0;
    if ((unint64_t)(v21 - 1) <= 1)
    {
      switch(a1)
      {
        case 1:
          if (qword_1000A8180 != -1) {
            swift_once();
          }
          uint64_t v26 = &qword_1000AB4B0;
          break;
        case 2:
          if (qword_1000A8188 != -1) {
            swift_once();
          }
          uint64_t v26 = &qword_1000AB4C0;
          break;
        case 3:
          if (qword_1000A8170 != -1) {
            swift_once();
          }
          uint64_t v26 = &qword_1000AB490;
          break;
        default:
          if (qword_1000A8178 != -1) {
            swift_once();
          }
          uint64_t v26 = &qword_1000AB4A0;
          break;
      }
      uint64_t v24 = *v26;
      uint64_t v25 = v26[1];
      swift_bridgeObjectRetain();
    }
  }
  swift_retain();
  swift_retain();
  static SymbolRenderingMode.hierarchical.getter();
  uint64_t v27 = v38;
  *uint64_t v16 = v39;
  v16[1] = v27;
  uint64_t v28 = (void *)((char *)v16 + v14[6]);
  *uint64_t v28 = v24;
  v28[1] = v25;
  *((unsigned char *)v16 + v14[7]) = v40 & 1;
  uint64_t v29 = (char *)v16 + v14[8];
  *(void *)uint64_t v29 = a3;
  *((void *)v29 + 1) = a4;
  char v30 = v41 & 1;
  v29[16] = v41 & 1;
  __int16 v31 = (char *)v16 + v14[9];
  *(void *)__int16 v31 = swift_getKeyPath();
  v31[8] = 0;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  char v46 = v30;
  sub_10000435C(&qword_1000A9F20);
  Binding.wrappedValue.getter();
  char v32 = v47;
  switch(a1)
  {
    case 1:
      if (qword_1000A8180 != -1) {
        swift_once();
      }
      uint64_t v33 = &qword_1000AB4B0;
      break;
    case 2:
      if (qword_1000A8188 != -1) {
        swift_once();
      }
      uint64_t v33 = &qword_1000AB4C0;
      break;
    case 3:
      if (qword_1000A8170 != -1) {
        swift_once();
      }
      uint64_t v33 = &qword_1000AB490;
      break;
    default:
      if (qword_1000A8178 != -1) {
        swift_once();
      }
      uint64_t v33 = &qword_1000AB4A0;
      break;
  }
  uint64_t v35 = *v33;
  uint64_t v34 = v33[1];
  swift_bridgeObjectRetain();
  uint64_t v36 = v42;
  sub_100039128(v32, v35, v34, v42);
  swift_bridgeObjectRelease();
  sub_10005C87C((uint64_t)v16, type metadata accessor for TFToggle);
  return sub_100009F30(v36, v43, &qword_1000A9810);
}

uint64_t sub_100048C78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned char *a5@<X8>)
{
  uint64_t v75 = a5;
  uint64_t v9 = sub_10000435C(&qword_1000A9810);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v68 = &v60[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  uint64_t v64 = &v60[-v12];
  uint64_t v13 = type metadata accessor for Divider();
  uint64_t v66 = *(void *)(v13 - 8);
  uint64_t v67 = v13;
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v63 = &v60[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v14);
  uint64_t v69 = &v60[-v16];
  uint64_t v17 = sub_10000435C(&qword_1000A9F00);
  uint64_t v18 = __chkstk_darwin(v17 - 8);
  uint64_t v20 = &v60[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v18);
  uint64_t v73 = &v60[-v21];
  uint64_t v74 = sub_10000435C(&qword_1000A9EA0);
  uint64_t v70 = *(void *)(v74 - 8);
  uint64_t v22 = __chkstk_darwin(v74);
  uint64_t v72 = &v60[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v22);
  uint64_t v25 = &v60[-v24];
  if (qword_1000A8230 != -1) {
    swift_once();
  }
  unsigned int v26 = (a4 >> 8) & 1;
  uint64_t v76 = qword_1000AB600;
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = a1;
  *(void *)(v27 + 24) = a2;
  uint64_t v65 = a2;
  *(void *)(v27 + 32) = a3;
  *(unsigned char *)(v27 + 40) = a4;
  *(unsigned char *)(v27 + 41) = v26;
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v62 = a3;
  sub_10001F4F8(a3, a4, BYTE1(a4) & 1);
  sub_10000435C(&qword_1000A96B0);
  sub_10000A368(&qword_1000A9EB8, &qword_1000A96B0);
  sub_100057CB4();
  sub_10005A640();
  uint64_t v71 = v25;
  ForEach<>.init(_:content:)();
  if (!a1)
  {
    type metadata accessor for TextFormattingState();
    sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    EnvironmentObject.error()();
    __break(1u);
    JUMPOUT(0x1000494C0);
  }
  swift_retain();
  uint64_t v28 = sub_10002D0C4();
  swift_release();
  uint64_t v29 = v28[2];
  if (v29)
  {
    swift_bridgeObjectRetain();
    uint64_t v30 = 0;
    while (1)
    {
      __int16 v31 = (char *)v28 + v30++;
      switch(v31[32])
      {
        case 3:
          swift_bridgeObjectRelease();
          goto LABEL_13;
        default:
          char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v32)
          {
LABEL_13:
            unsigned int v61 = a4 >> 8;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            Divider.init()();
            type metadata accessor for MainActor();
            uint64_t v35 = static MainActor.shared.getter();
            uint64_t v36 = swift_allocObject();
            *(void *)(v36 + 16) = v35;
            *(void *)(v36 + 24) = &protocol witness table for MainActor;
            swift_retain();
            uint64_t v37 = v62;
            sub_10001F4F8(v62, a4, BYTE1(a4) & 1);
            uint64_t v38 = static MainActor.shared.getter();
            uint64_t v39 = swift_allocObject();
            *(void *)(v39 + 16) = v38;
            *(void *)(v39 + 24) = &protocol witness table for MainActor;
            uint64_t v40 = v65;
            *(void *)(v39 + 32) = a1;
            *(void *)(v39 + 40) = v40;
            *(void *)(v39 + 48) = v37;
            *(unsigned char *)(v39 + 56) = a4;
            *(unsigned char *)(v39 + 57) = v26;
            Binding.init(get:set:)();
            int v41 = v64;
            sub_1000487B0(3, 1, v76, v77, v78, v37, (uint64_t)v64, a4 | ((v61 & 1) << 8));
            swift_release();
            swift_release();
            uint64_t v43 = v66;
            uint64_t v42 = v67;
            uint64_t v44 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v66 + 16);
            uint64_t v45 = v63;
            char v46 = v69;
            v44(v63, v69, v67);
            char v47 = v68;
            sub_100009E70((uint64_t)v41, (uint64_t)v68, &qword_1000A9810);
            v44(v20, v45, v42);
            uint64_t v48 = sub_10000435C(&qword_1000A9F18);
            sub_100009E70((uint64_t)v47, (uint64_t)&v20[*(int *)(v48 + 48)], &qword_1000A9810);
            sub_100009ED4((uint64_t)v41, &qword_1000A9810);
            uint64_t v49 = *(void (**)(unsigned char *, uint64_t))(v43 + 8);
            v49(v46, v42);
            sub_100009ED4((uint64_t)v47, &qword_1000A9810);
            v49(v45, v42);
            uint64_t v50 = sub_10000435C(&qword_1000A9F08);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56))(v20, 0, 1, v50);
            uint64_t v34 = v73;
            sub_100009F30((uint64_t)v20, (uint64_t)v73, &qword_1000A9F00);
            goto LABEL_14;
          }
          if (v29 == v30)
          {
            swift_bridgeObjectRelease();
            goto LABEL_10;
          }
          break;
      }
    }
  }
LABEL_10:
  swift_bridgeObjectRelease();
  uint64_t v33 = sub_10000435C(&qword_1000A9F08);
  uint64_t v34 = v73;
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v73, 1, 1, v33);
LABEL_14:
  uint64_t v52 = v70;
  uint64_t v51 = v71;
  char v53 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v70 + 16);
  uint64_t v54 = v72;
  uint64_t v55 = v74;
  v53(v72, v71, v74);
  sub_100009E70((uint64_t)v34, (uint64_t)v20, &qword_1000A9F00);
  char v56 = v75;
  v53(v75, v54, v55);
  uint64_t v57 = sub_10000435C(&qword_1000A9F10);
  sub_100009E70((uint64_t)v20, (uint64_t)&v56[*(int *)(v57 + 48)], &qword_1000A9F00);
  sub_100009ED4((uint64_t)v34, &qword_1000A9F00);
  unint64_t v58 = *(void (**)(unsigned char *, uint64_t))(v52 + 8);
  v58(v51, v55);
  sub_100009ED4((uint64_t)v20, &qword_1000A9F00);
  return ((uint64_t (*)(unsigned char *, uint64_t))v58)(v54, v55);
}

uint64_t sub_1000494D0@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unsigned int v17 = a5 >> 8;
  unsigned int v10 = (a5 >> 8) & 1;
  char v11 = *a1;
  type metadata accessor for MainActor();
  swift_retain();
  sub_10001F4F8(a4, a5, v10);
  uint64_t v12 = static MainActor.shared.getter();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v12;
  *(void *)(v13 + 24) = &protocol witness table for MainActor;
  *(void *)(v13 + 32) = a2;
  *(void *)(v13 + 40) = a3;
  *(void *)(v13 + 48) = a4;
  *(unsigned char *)(v13 + 56) = a5;
  *(unsigned char *)(v13 + 57) = v10;
  *(unsigned char *)(v13 + 58) = v11;
  swift_retain();
  sub_10001F4F8(a4, a5, v10);
  uint64_t v14 = static MainActor.shared.getter();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v14;
  *(void *)(v15 + 24) = &protocol witness table for MainActor;
  *(void *)(v15 + 32) = a2;
  *(void *)(v15 + 40) = a3;
  *(void *)(v15 + 48) = a4;
  *(unsigned char *)(v15 + 56) = a5;
  *(unsigned char *)(v15 + 57) = v10;
  *(unsigned char *)(v15 + 58) = v11;
  Binding.init(get:set:)();
  sub_1000487B0(v11, 1, v19, v20, v21, a4, a6, a5 | ((v17 & 1) << 8));
  swift_release();
  return swift_release();
}

uint64_t sub_100049674(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    swift_retain();
    sub_10002D23C((uint64_t)_swiftEmptyArrayStorage);
    return swift_release();
  }
  else
  {
    type metadata accessor for TextFormattingState();
    sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10004971C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (int *)type metadata accessor for TFSymbol(0);
  __chkstk_darwin(v4);
  char v6 = &v21[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (a1)
  {
    swift_retain();
    char v7 = sub_10002D0C4();
    swift_release();
    if (v7[2])
    {
      uint64_t v8 = *((char *)v7 + 32);
      swift_bridgeObjectRelease();
      uint64_t v9 = 8 * v8;
      uint64_t v10 = *(void *)&aListBullistDas[8 * v8];
      unint64_t v11 = *(void *)&aListBullistDas[v9 + 32];
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v11 = 0xEB0000000074656CLL;
      uint64_t v10 = 0x6C75622E7473696CLL;
    }
    uint64_t v12 = static Font.title3.getter();
    static SymbolRenderingMode.hierarchical.getter();
    *(void *)char v6 = v10;
    *((void *)v6 + 1) = v11;
    v6[16] = 0;
    *((void *)v6 + 3) = v12;
    *((void *)v6 + 4) = 0;
    v6[v4[9]] = 1;
    v6[v4[10]] = 1;
    uint64_t v13 = &v6[v4[11]];
    *(void *)uint64_t v13 = swift_getKeyPath();
    v13[8] = 0;
    uint64_t v14 = &v6[v4[12]];
    *(void *)uint64_t v14 = swift_getKeyPath();
    v14[8] = 0;
    sub_10005A91C((uint64_t)v6, a2, type metadata accessor for TFSymbol);
    uint64_t v15 = (int *)sub_10000435C(&qword_1000A99D0);
    uint64_t v16 = a2 + v15[9];
    v21[15] = 0;
    State.init(wrappedValue:)();
    uint64_t v17 = v22;
    *(unsigned char *)uint64_t v16 = v21[16];
    *(void *)(v16 + 8) = v17;
    uint64_t v18 = a2 + v15[10];
    *(void *)uint64_t v18 = swift_getKeyPath();
    *(unsigned char *)(v18 + 8) = 0;
    uint64_t v19 = a2 + v15[11];
    uint64_t result = swift_getKeyPath();
    *(void *)uint64_t v19 = result;
    *(unsigned char *)(v19 + 8) = 0;
  }
  else
  {
    type metadata accessor for TextFormattingState();
    sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10004997C@<X0>(uint64_t a1@<X2>, char a2@<W6>, unsigned char *a3@<X8>)
{
  if (a1)
  {
    swift_retain();
    uint64_t v5 = sub_10002D0C4();
    swift_release();
    char v6 = sub_1000065E0(a2, (uint64_t)v5);
    uint64_t result = swift_bridgeObjectRelease();
    *a3 = v6 & 1;
  }
  else
  {
    type metadata accessor for TextFormattingState();
    sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_100049A44(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  if (a4)
  {
    if (*a1)
    {
      sub_10000435C(&qword_1000A8F60);
      uint64_t v9 = (void *)swift_allocObject();
      *((_OWORD *)v9 + 1) = xmmword_1000843C0;
      *((unsigned char *)v9 + 32) = a8;
    }
    else
    {
      uint64_t v9 = _swiftEmptyArrayStorage;
    }
    swift_retain();
    sub_10002D23C((uint64_t)v9);
    return swift_release();
  }
  else
  {
    type metadata accessor for TextFormattingState();
    sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_100049B34(uint64_t a1, uint64_t a2)
{
  return sub_100047C14(a1, a2, (uint64_t (*)(void, void, void, void))sub_100047C3C);
}

void sub_100049B4C(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE400000000000000;
  uint64_t v3 = 1668508004;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE600000000000000;
      uint64_t v3 = 0x6E6568707968;
      goto LABEL_3;
    case 2:
      *a1 = 0x6C616D69636564;
      a1[1] = 0xE700000000000000;
      break;
    case 3:
      *a1 = 0x726568746FLL;
      a1[1] = 0xE500000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t sub_100049BD8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000435C(&qword_1000A8F38);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  char v7 = (char *)&v19 - v6;
  type metadata accessor for TFTextColorControl();
  sub_100013494((uint64_t)v7);
  uint64_t v8 = type metadata accessor for UserInterfaceSizeClass();
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) != 1)
  {
    sub_100009E70((uint64_t)v7, (uint64_t)v5, &qword_1000A8F38);
    if ((*(unsigned int (**)(char *, uint64_t))(v9 + 88))(v5, v8) == enum case for UserInterfaceSizeClass.compact(_:))
    {
      uint64_t v10 = v1[4];
      char v11 = *((unsigned char *)v1 + 40);
      sub_10001F504(v10, v11);
      char v12 = sub_100012C58(v10, v11);
      sub_10001F574(v10, v11);
      uint64_t v13 = *v1;
      if (*v1)
      {
        swift_retain();
        NSString v14 = String._bridgeToObjectiveC()();
        swift_getKeyPath();
        swift_getKeyPath();
        static Published.subscript.getter();
        swift_release();
        swift_release();
        if (*(unsigned char *)(v13 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_isInPopoverPresentation)) {
          char v15 = 0;
        }
        else {
          char v15 = *(unsigned char *)(v13 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_hasParentViewController) ^ 1;
        }
LABEL_12:
        sub_100074B84((uint64_t)v14, v19, v20, v15 & 1, *(unsigned char *)(v13 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_useReducedMetrics), v12);
        swift_release();

        return sub_100009ED4((uint64_t)v7, &qword_1000A8F38);
      }
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v5, v8);
  }
  uint64_t v16 = v1[4];
  char v17 = *((unsigned char *)v1 + 40);
  sub_10001F504(v16, v17);
  char v12 = sub_100012C58(v16, v17);
  sub_10001F574(v16, v17);
  uint64_t v13 = *v1;
  if (*v1)
  {
    swift_retain();
    NSString v14 = String._bridgeToObjectiveC()();
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    if (*(unsigned char *)(v13 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_isInPopoverPresentation)) {
      char v15 = 0;
    }
    else {
      char v15 = *(unsigned char *)(v13 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_hasParentViewController) ^ 1;
    }
    goto LABEL_12;
  }
LABEL_13:
  type metadata accessor for TextFormattingState();
  sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
  uint64_t result = EnvironmentObject.error()();
  __break(1u);
  return result;
}

uint64_t sub_100049FDC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = (int *)sub_10000435C(&qword_1000A9F28);
  uint64_t v5 = a1 + v4[10];
  uint64_t v6 = type metadata accessor for HoverEffect();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 257;
  sub_10004A108(v2, a1 + v4[11]);
  uint64_t v7 = a1 + v4[12];
  *(void *)uint64_t v7 = swift_getKeyPath();
  *(unsigned char *)(v7 + 8) = 0;
  uint64_t v8 = a1 + v4[13];
  *(void *)uint64_t v8 = swift_getKeyPath();
  *(unsigned char *)(v8 + 8) = 0;
  uint64_t v9 = a1 + v4[14];
  *(void *)uint64_t v9 = swift_getKeyPath();
  *(unsigned char *)(v9 + 8) = 0;
  uint64_t v10 = a1 + v4[15];
  uint64_t result = State.init(wrappedValue:)();
  *(unsigned char *)uint64_t v10 = v12;
  *(void *)(v10 + 8) = v13;
  return result;
}

uint64_t sub_10004A108@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v98 = a2;
  uint64_t v91 = sub_10000435C(&qword_1000A9F30);
  __chkstk_darwin(v91);
  uint64_t v93 = (uint64_t)&v76 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = sub_10000435C(&qword_1000A9F38);
  __chkstk_darwin(v88);
  uint64_t v87 = (_WORD *)((char *)&v76 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = sub_10000435C(&qword_1000A9F40);
  __chkstk_darwin(v5 - 8);
  uint64_t v90 = (char *)&v76 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = sub_10000435C(&qword_1000A9F48);
  uint64_t v7 = __chkstk_darwin(v97);
  uint64_t v89 = (uint64_t)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v92 = (uint64_t)&v76 - v9;
  uint64_t v95 = sub_10000435C(&qword_1000A9F50);
  __chkstk_darwin(v95);
  uint64_t v96 = (uint64_t)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = type metadata accessor for BorderlessButtonStyle();
  uint64_t v79 = *(void *)(v86 - 8);
  __chkstk_darwin(v86);
  unsigned __int8 v78 = (char *)&v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for TFTextColorControl();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12 - 8);
  uint64_t v81 = sub_10000435C(&qword_1000A9F58);
  uint64_t v77 = *(void *)(v81 - 8);
  __chkstk_darwin(v81);
  uint64_t v16 = (char *)&v76 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = sub_10000435C(&qword_1000A9F60);
  uint64_t v83 = *(void *)(v85 - 8);
  __chkstk_darwin(v85);
  uint64_t v82 = (char *)&v76 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = sub_10000435C(&qword_1000A9F68);
  uint64_t v18 = __chkstk_darwin(v94);
  uint64_t v80 = (char *)&v76 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v84 = (uint64_t)&v76 - v20;
  uint64_t v21 = *(void *)(a1 + 16);
  uint64_t v22 = *(unsigned __int8 *)(a1 + 24);
  int v23 = *(unsigned __int8 *)(a1 + 25);
  sub_10001F4F8(v21, v22, *(unsigned char *)(a1 + 25));
  uint64_t v24 = sub_100012E64(v21, v22 | (v23 << 8));
  char v26 = v25;
  uint64_t v27 = a1;
  sub_10001F568(v21, v22, v23);
  sub_10005C814(a1, (uint64_t)&v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for TFTextColorControl);
  uint64_t v28 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v29 = (v28 + 16) & ~v28;
  if ((v26 & 1) != 0 || v24 > 2)
  {
    uint64_t v86 = v29 + v14;
    uint64_t v85 = v28 | 7;
    uint64_t v48 = swift_allocObject();
    sub_10005A91C((uint64_t)&v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v48 + v29, (uint64_t (*)(void))type metadata accessor for TFTextColorControl);
    uint64_t v49 = (uint64_t)v87;
    _WORD *v87 = 0;
    uint64_t v84 = (uint64_t)&v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
    *(unsigned char *)(v49 + 2) = 1;
    uint64_t v50 = (int *)v88;
    uint64_t v51 = v49 + *(int *)(v88 + 44);
    uint64_t v52 = *(void *)(v27 + 32);
    uint64_t v83 = v29;
    char v53 = *(unsigned char *)(v27 + 40);
    sub_10001F504(v52, v53);
    sub_100012C58(v52, v53);
    sub_10001F574(v52, v53);
    *(void *)uint64_t v51 = static VerticalAlignment.center.getter();
    *(void *)(v51 + 8) = 0x4028000000000000;
    *(unsigned char *)(v51 + 16) = 0;
    uint64_t v54 = sub_10000435C(&qword_1000A9F70);
    sub_10004B660((uint64_t *)v27, v51 + *(int *)(v54 + 44));
    uint64_t v55 = (void *)(v49 + v50[12]);
    *uint64_t v55 = sub_10005A984;
    v55[1] = v48;
    uint64_t v56 = v49 + v50[13];
    uint64_t v102 = 0;
    char v103 = 1;
    sub_10000435C(&qword_1000A9460);
    State.init(wrappedValue:)();
    char v57 = BYTE8(v99);
    uint64_t v58 = v100;
    *(void *)uint64_t v56 = v99;
    *(unsigned char *)(v56 + 8) = v57;
    *(void *)(v56 + 16) = v58;
    uint64_t v59 = v50[14];
    uint64_t v102 = 0;
    sub_10000435C(&qword_1000A9870);
    State.init(wrappedValue:)();
    *(_OWORD *)(v49 + v59) = v99;
    uint64_t v60 = v49 + v50[15];
    *(void *)uint64_t v60 = swift_getKeyPath();
    *(unsigned char *)(v60 + 8) = 0;
    if (qword_1000A8100 != -1) {
      swift_once();
    }
    long long v99 = xmmword_1000AB3B0;
    sub_1000099C8();
    swift_bridgeObjectRetain();
    uint64_t v61 = Text.init<A>(_:)();
    uint64_t v63 = v62;
    char v65 = v64 & 1;
    sub_10000A368(&qword_1000A9F78, &qword_1000A9F38);
    uint64_t v66 = (uint64_t)v90;
    View.accessibilityLabel(_:)();
    sub_100009A1C(v61, v63, v65);
    swift_bridgeObjectRelease();
    sub_100009ED4(v49, &qword_1000A9F38);
    uint64_t v67 = v84;
    sub_10005C814(v27, v84, (uint64_t (*)(void))type metadata accessor for TFTextColorControl);
    uint64_t v68 = swift_allocObject();
    sub_10005A91C(v67, v68 + v83, (uint64_t (*)(void))type metadata accessor for TFTextColorControl);
    uint64_t v69 = v93;
    sub_100009E70(v66, v93, &qword_1000A9F40);
    uint64_t v70 = (void *)(v69 + *(int *)(v91 + 36));
    *uint64_t v70 = 2003134806;
    v70[1] = 0xE400000000000000;
    uint64_t v71 = swift_allocObject();
    *(void *)(v71 + 16) = sub_10005A98C;
    *(void *)(v71 + 24) = v68;
    uint64_t v72 = v89;
    sub_100009E70(v69, v89, &qword_1000A9F30);
    uint64_t v73 = (uint64_t (**)(double *))(v72 + *(int *)(v97 + 36));
    *uint64_t v73 = sub_10005A9C8;
    v73[1] = (uint64_t (*)(double *))v71;
    sub_100009ED4(v69, &qword_1000A9F30);
    sub_100009ED4(v66, &qword_1000A9F40);
    uint64_t v45 = &qword_1000A9F48;
    uint64_t v74 = v92;
    sub_100009F30(v72, v92, &qword_1000A9F48);
    sub_100009E70(v74, v96, &qword_1000A9F48);
    swift_storeEnumTagMultiPayload();
    sub_10005A9D0();
    sub_10005AB24();
    _ConditionalContent<>.init(storage:)();
    uint64_t v47 = v74;
  }
  else
  {
    uint64_t v30 = swift_allocObject();
    uint64_t v31 = sub_10005A91C((uint64_t)&v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v30 + v29, (uint64_t (*)(void))type metadata accessor for TFTextColorControl);
    __chkstk_darwin(v31);
    *(&v76 - 2) = a1;
    sub_10000435C(&qword_1000A9FB8);
    sub_10005AD80();
    Button.init(action:label:)();
    char v32 = v78;
    BorderlessButtonStyle.init()();
    uint64_t v33 = sub_10000A368(&qword_1000A9F88, &qword_1000A9F58);
    uint64_t v34 = sub_100057C6C(&qword_1000A9F90, (void (*)(uint64_t))&type metadata accessor for BorderlessButtonStyle);
    uint64_t v35 = v82;
    uint64_t v36 = v81;
    uint64_t v37 = v86;
    View.buttonStyle<A>(_:)();
    (*(void (**)(char *, uint64_t))(v79 + 8))(v32, v37);
    (*(void (**)(char *, uint64_t))(v77 + 8))(v16, v36);
    if (qword_1000A8100 != -1) {
      swift_once();
    }
    long long v99 = xmmword_1000AB3B0;
    sub_1000099C8();
    swift_bridgeObjectRetain();
    uint64_t v38 = Text.init<A>(_:)();
    uint64_t v40 = v39;
    *(void *)&long long v99 = v36;
    *((void *)&v99 + 1) = v37;
    char v42 = v41 & 1;
    uint64_t v100 = v33;
    uint64_t v101 = v34;
    swift_getOpaqueTypeConformance2();
    uint64_t v43 = (uint64_t)v80;
    uint64_t v44 = v85;
    View.accessibilityLabel(_:)();
    sub_100009A1C(v38, v40, v42);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v83 + 8))(v35, v44);
    uint64_t v45 = &qword_1000A9F68;
    uint64_t v46 = v84;
    sub_100009F30(v43, v84, &qword_1000A9F68);
    sub_100009E70(v46, v96, &qword_1000A9F68);
    swift_storeEnumTagMultiPayload();
    sub_10005A9D0();
    sub_10005AB24();
    _ConditionalContent<>.init(storage:)();
    uint64_t v47 = v46;
  }
  return sub_100009ED4(v47, v45);
}

uint64_t sub_10004AD18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v75 = a2;
  uint64_t v63 = sub_10000435C(&qword_1000AA010) - 8;
  __chkstk_darwin(v63);
  uint64_t v62 = (uint64_t)&v57 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for TFTextColorControl();
  uint64_t v61 = *(void *)(v4 - 8);
  uint64_t v60 = *(void *)(v61 + 64);
  __chkstk_darwin(v4 - 8);
  uint64_t v59 = (uint64_t)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = sub_10000435C(&qword_1000AA030);
  uint64_t v6 = *(void *)(v57 - 8);
  __chkstk_darwin(v57);
  uint64_t v8 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000435C(&qword_1000AA020);
  uint64_t v10 = v9 - 8;
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000435C(&qword_1000AA000);
  uint64_t v14 = v13 - 8;
  __chkstk_darwin(v13);
  uint64_t v58 = (uint64_t)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = sub_10000435C(&qword_1000A9FF0) - 8;
  __chkstk_darwin(v65);
  uint64_t v64 = (uint64_t)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = sub_10000435C(&qword_1000A9FD8);
  __chkstk_darwin(v70);
  uint64_t v66 = (uint64_t)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10000435C(&qword_1000AA038);
  uint64_t v72 = *(void *)(v18 - 8);
  uint64_t v73 = v18;
  __chkstk_darwin(v18);
  uint64_t v67 = (char *)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = sub_10000435C(&qword_1000A9FD0) - 8;
  __chkstk_darwin(v69);
  uint64_t v68 = (char *)&v57 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = sub_10000435C(&qword_1000A9FB8) - 8;
  __chkstk_darwin(v74);
  uint64_t v71 = (uint64_t)&v57 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TextFormattingState();
  sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
  EnvironmentObject.projectedValue.getter();
  swift_getKeyPath();
  EnvironmentObject.Wrapper.subscript.getter();
  swift_release();
  swift_release();
  ColorPicker.init(selection:supportsOpacity:label:)();
  sub_100049BD8();
  uint64_t v23 = v22;
  static UnitPoint.center.getter();
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v28 = v57;
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v12, v8, v57);
  uint64_t v29 = &v12[*(int *)(v10 + 44)];
  *(void *)uint64_t v29 = v23;
  *((void *)v29 + 1) = v23;
  *((void *)v29 + 2) = v25;
  *((void *)v29 + 3) = v27;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v28);
  uint64_t v30 = v59;
  sub_10005C814(a1, v59, (uint64_t (*)(void))type metadata accessor for TFTextColorControl);
  unint64_t v31 = (*(unsigned __int8 *)(v61 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80);
  uint64_t v32 = swift_allocObject();
  sub_10005A91C(v30, v32 + v31, (uint64_t (*)(void))type metadata accessor for TFTextColorControl);
  uint64_t v33 = v62;
  sub_100009E70((uint64_t)v12, v62, &qword_1000AA020);
  uint64_t v34 = (void *)(v33 + *(int *)(v63 + 44));
  *uint64_t v34 = 2003134806;
  v34[1] = 0xE400000000000000;
  uint64_t v35 = swift_allocObject();
  *(void *)(v35 + 16) = sub_10005A98C;
  *(void *)(v35 + 24) = v32;
  uint64_t v36 = v58;
  sub_100009E70(v33, v58, &qword_1000AA010);
  uint64_t v37 = (uint64_t (**)(double *))(v36 + *(int *)(v14 + 44));
  char *v37 = sub_10005C944;
  v37[1] = (uint64_t (*)(double *))v35;
  sub_100009ED4(v33, &qword_1000AA010);
  sub_100009ED4((uint64_t)v12, &qword_1000AA020);
  uint64_t v38 = *(void *)(a1 + 32);
  LOBYTE(v35) = *(unsigned char *)(a1 + 40);
  sub_10001F504(v38, v35);
  LOBYTE(v33) = sub_100012C58(v38, v35);
  sub_10001F574(v38, v35);
  sub_100074A84(v33);
  sub_10001F504(v38, v35);
  LOBYTE(v14) = sub_100012C58(v38, v35);
  sub_10001F574(v38, v35);
  sub_100075204(v14);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v39 = v64;
  sub_100009E70(v36, v64, &qword_1000AA000);
  uint64_t v40 = (_OWORD *)(v39 + *(int *)(v65 + 44));
  long long v41 = v77;
  *uint64_t v40 = v76;
  v40[1] = v41;
  v40[2] = v78;
  sub_100009ED4(v36, &qword_1000AA000);
  uint64_t v42 = static Alignment.center.getter();
  uint64_t v43 = v66;
  sub_1000352CC(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v66, 0.0, 1, INFINITY, 0, v42, v44, (uint64_t)&qword_1000A9FF0, (void (*)(uint64_t, uint64_t, uint64_t))sub_100009E70, &qword_1000A9FD8);
  sub_100009ED4(v39, &qword_1000A9FF0);
  sub_10005AED0();
  uint64_t v45 = v67;
  View.labelsHidden()();
  sub_100009ED4(v43, &qword_1000A9FD8);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v47 = swift_allocObject();
  *(unsigned char *)(v47 + 16) = 1;
  uint64_t v49 = v72;
  uint64_t v48 = v73;
  uint64_t v50 = (uint64_t)v68;
  (*(void (**)(char *, char *, uint64_t))(v72 + 16))(v68, v45, v73);
  uint64_t v51 = (uint64_t *)(v50 + *(int *)(v69 + 44));
  uint64_t v52 = v50;
  *uint64_t v51 = KeyPath;
  v51[1] = (uint64_t)sub_10005C918;
  v51[2] = v47;
  (*(void (**)(char *, uint64_t))(v49 + 8))(v45, v48);
  uint64_t v53 = *(void *)(a1 + 48);
  LOBYTE(v47) = *(unsigned char *)(a1 + 56);
  sub_10001F504(v53, v47);
  LOBYTE(v50) = sub_100013084(v53, v47);
  sub_10001F574(v53, v47);
  if (v50) {
    double v54 = 1.0;
  }
  else {
    double v54 = 0.7;
  }
  uint64_t v55 = v71;
  sub_100009E70(v52, v71, &qword_1000A9FD0);
  *(double *)(v55 + *(int *)(v74 + 44)) = v54;
  sub_100009ED4(v52, &qword_1000A9FD0);
  return sub_100009F30(v55, v75, &qword_1000A9FB8);
}

uint64_t sub_10004B660@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v53 = a2;
  uint64_t v45 = sub_10000435C(&qword_1000AA030);
  uint64_t v3 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v5 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = sub_10000435C(&qword_1000AA040);
  __chkstk_darwin(v44);
  uint64_t v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000435C(&qword_1000AA048);
  uint64_t v49 = *(void *)(v8 - 8);
  uint64_t v50 = v8;
  __chkstk_darwin(v8);
  uint64_t v47 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = sub_10000435C(&qword_1000AA050);
  __chkstk_darwin(v43);
  uint64_t v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = sub_10000435C(&qword_1000AA058);
  uint64_t v12 = __chkstk_darwin(v48);
  uint64_t v52 = (uint64_t)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v46 = (uint64_t)&v43 - v15;
  __chkstk_darwin(v14);
  uint64_t v51 = (uint64_t)&v43 - v16;
  type metadata accessor for TextFormattingState();
  sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
  EnvironmentObject.projectedValue.getter();
  swift_getKeyPath();
  EnvironmentObject.Wrapper.subscript.getter();
  swift_release();
  swift_release();
  ColorPicker.init(selection:supportsOpacity:label:)();
  uint64_t v17 = a1[4];
  char v18 = *((unsigned char *)a1 + 40);
  sub_10001F504(v17, v18);
  char v19 = sub_100012C58(v17, v18);
  sub_10001F574(v17, v18);
  uint64_t v20 = *a1;
  if (*a1)
  {
    swift_retain();
    NSString v21 = String._bridgeToObjectiveC()();
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    if (*(unsigned char *)(v20 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_isInPopoverPresentation)) {
      char v22 = 0;
    }
    else {
      char v22 = *(unsigned char *)(v20 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_hasParentViewController) ^ 1;
    }
    sub_100074B84((uint64_t)v21, v54, SBYTE8(v54), v22 & 1, *(unsigned char *)(v20 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_useReducedMetrics), v19);
    swift_release();

    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v23 = v45;
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v7, v5, v45);
    uint64_t v24 = &v7[*(int *)(v44 + 36)];
    long long v25 = v55;
    *(_OWORD *)uint64_t v24 = v54;
    *((_OWORD *)v24 + 1) = v25;
    *((_OWORD *)v24 + 2) = v56;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v23);
    sub_10005B0FC(&qword_1000AA060, &qword_1000AA040);
    uint64_t v26 = v47;
    View.labelsHidden()();
    sub_100009ED4((uint64_t)v7, &qword_1000AA040);
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v28 = swift_allocObject();
    *(unsigned char *)(v28 + 16) = 1;
    uint64_t v30 = v49;
    uint64_t v29 = v50;
    (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v11, v26, v50);
    unint64_t v31 = (uint64_t *)&v11[*(int *)(v43 + 36)];
    uint64_t *v31 = KeyPath;
    v31[1] = (uint64_t)sub_10005C918;
    v31[2] = v28;
    (*(void (**)(char *, uint64_t))(v30 + 8))(v26, v29);
    uint64_t v32 = a1[6];
    LOBYTE(v28) = *((unsigned char *)a1 + 56);
    sub_10001F504(v32, v28);
    LOBYTE(v29) = sub_100013084(v32, v28);
    sub_10001F574(v32, v28);
    if (v29) {
      double v33 = 1.0;
    }
    else {
      double v33 = 0.7;
    }
    uint64_t v34 = v46;
    sub_100009E70((uint64_t)v11, v46, &qword_1000AA050);
    *(double *)(v34 + *(int *)(v48 + 36)) = v33;
    sub_100009ED4((uint64_t)v11, &qword_1000AA050);
    uint64_t v35 = v51;
    sub_100009F30(v34, v51, &qword_1000AA058);
    if (qword_1000A81C0 != -1) {
      swift_once();
    }
    uint64_t v37 = qword_1000AB530;
    uint64_t v36 = *(void *)algn_1000AB538;
    uint64_t v38 = swift_getKeyPath();
    uint64_t v39 = v52;
    sub_100009E70(v35, v52, &qword_1000AA058);
    uint64_t v40 = v53;
    sub_100009E70(v39, v53, &qword_1000AA058);
    uint64_t v41 = v40 + *(int *)(sub_10000435C(&qword_1000AA068) + 48);
    *(void *)uint64_t v41 = v37;
    *(void *)(v41 + 8) = v36;
    *(unsigned char *)(v41 + 16) = 0;
    *(void *)(v41 + 24) = v38;
    *(unsigned char *)(v41 + 32) = 0;
    swift_bridgeObjectRetain();
    sub_10001F504(v38, 0);
    swift_bridgeObjectRetain();
    sub_100009ED4(v35, &qword_1000AA058);
    swift_bridgeObjectRelease();
    sub_10001F574(v38, 0);
    return sub_100009ED4(v39, &qword_1000AA058);
  }
  else
  {
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10004BD9C(void *a1)
{
  if (*a1)
  {
    uint64_t v1 = *(void (**)(uint64_t))(*a1 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_pickColor);
    uint64_t v2 = swift_retain();
    v1(v2);
    return swift_release();
  }
  else
  {
    type metadata accessor for TextFormattingState();
    sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

void *sub_10004BE54(void *result, double a2, double a3, double a4, double a5)
{
  if (*result)
  {
    uint64_t v5 = (double *)(*result + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_colorPickerRect);
    *uint64_t v5 = a2;
    v5[1] = a3;
    void v5[2] = a4;
    v5[3] = a5;
  }
  else
  {
    type metadata accessor for TextFormattingState();
    sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t result = (void *)EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10004BEF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __int16 a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (*a7)(void, uint64_t, uint64_t, uint64_t, uint64_t)@<X6>, void (*a8)(void, uint64_t, uint64_t, uint64_t, uint64_t)@<X7>, uint64_t a9@<X8>)
{
  uint64_t v17 = (int *)sub_10000435C(&qword_1000A9E30);
  uint64_t v18 = a9 + v17[10];
  uint64_t v19 = type metadata accessor for HoverEffect();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v18, 1, 1, v19);
  *(void *)a9 = 0;
  *(_WORD *)(a9 + 8) = 257;
  sub_10004C06C(a1, a2, a3, a4 & 0x1FF, a5, a6, a7, a8, a9 + v17[11]);
  uint64_t v20 = a9 + v17[12];
  *(void *)uint64_t v20 = swift_getKeyPath();
  *(unsigned char *)(v20 + 8) = 0;
  uint64_t v21 = a9 + v17[13];
  *(void *)uint64_t v21 = swift_getKeyPath();
  *(unsigned char *)(v21 + 8) = 0;
  uint64_t v22 = a9 + v17[14];
  *(void *)uint64_t v22 = swift_getKeyPath();
  *(unsigned char *)(v22 + 8) = 0;
  uint64_t v23 = a9 + v17[15];
  uint64_t result = State.init(wrappedValue:)();
  *(unsigned char *)uint64_t v23 = v26;
  *(void *)(v23 + 8) = v27;
  return result;
}

uint64_t sub_10004C06C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (*a7)(void, uint64_t, uint64_t, uint64_t, uint64_t)@<X6>, void (*a8)(void, uint64_t, uint64_t, uint64_t, uint64_t)@<X7>, uint64_t a9@<X8>)
{
  uint64_t v59 = a7;
  uint64_t v60 = a8;
  uint64_t v57 = a5;
  uint64_t v58 = a6;
  uint64_t v64 = a1;
  uint64_t v65 = a2;
  uint64_t v71 = a9;
  unsigned int v11 = a4 >> 8;
  unsigned int v12 = (a4 >> 8) & 1;
  uint64_t v70 = sub_10000435C(&qword_1000A9E38);
  __chkstk_darwin(v70);
  uint64_t v63 = (uint64_t)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000435C(&qword_1000A9810);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v17 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v53 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v62 = (char *)&v53 - v22;
  __chkstk_darwin(v21);
  uint64_t v61 = (char *)&v53 - v23;
  uint64_t v66 = sub_10000435C(&qword_1000A9E40);
  __chkstk_darwin(v66);
  uint64_t v69 = (uint64_t)&v53 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = sub_10000435C(&qword_1000A9E48);
  uint64_t v54 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  char v26 = (char *)&v53 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = sub_10000435C(&qword_1000A9E50);
  uint64_t v56 = *(void *)(v68 - 8);
  uint64_t v27 = __chkstk_darwin(v68);
  uint64_t v29 = (char *)&v53 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  long long v55 = (char *)&v53 - v30;
  sub_10001F4F8(a3, a4, v12);
  uint64_t v31 = sub_100012E64(a3, a4 | ((v11 & 1) << 8));
  LOBYTE(v11) = v32;
  uint64_t v33 = sub_10001F568(a3, a4, v12);
  if ((v11 & 1) != 0 || v31 != 1)
  {
    uint64_t v44 = a4 & 0x1FF;
    uint64_t v45 = (uint64_t)v61;
    uint64_t v47 = v64;
    uint64_t v46 = v65;
    v59(0, v64, v65, a3, v44);
    uint64_t v48 = (uint64_t)v62;
    v60(0, v47, v46, a3, v44);
    sub_100009E70(v45, (uint64_t)v20, &qword_1000A9810);
    sub_100009E70(v48, (uint64_t)v17, &qword_1000A9810);
    uint64_t v49 = v63;
    sub_100009E70((uint64_t)v20, v63, &qword_1000A9810);
    uint64_t v50 = sub_10000435C(&qword_1000A9E58);
    sub_100009E70((uint64_t)v17, v49 + *(int *)(v50 + 48), &qword_1000A9810);
    sub_100009ED4((uint64_t)v17, &qword_1000A9810);
    sub_100009ED4((uint64_t)v20, &qword_1000A9810);
    sub_100009E70(v49, v69, &qword_1000A9E38);
    swift_storeEnumTagMultiPayload();
    uint64_t v51 = sub_10000A368(&qword_1000A9E60, &qword_1000A9E48);
    unint64_t v52 = sub_100057D90();
    uint64_t v73 = v67;
    uint64_t v74 = &type metadata for TFMenuStyle;
    uint64_t v75 = v51;
    unint64_t v76 = v52;
    swift_getOpaqueTypeConformance2();
    sub_10000A368(&qword_1000A9E68, &qword_1000A9E38);
    _ConditionalContent<>.init(storage:)();
    sub_100009ED4(v49, &qword_1000A9E38);
    sub_100009ED4(v48, &qword_1000A9810);
    return sub_100009ED4(v45, &qword_1000A9810);
  }
  else
  {
    __chkstk_darwin(v33);
    uint64_t v34 = v65;
    *(&v53 - 4) = v64;
    *(&v53 - 3) = v34;
    *(&v53 - 2) = a3;
    *((unsigned char *)&v53 - 8) = a4;
    *((unsigned char *)&v53 - 7) = v12;
    sub_10000435C(&qword_1000A99D0);
    sub_10000A368(&qword_1000A99E0, &qword_1000A99D0);
    sub_10000A368(&qword_1000A9E68, &qword_1000A9E38);
    Menu.init(content:label:)();
    char v72 = 0;
    State.init(wrappedValue:)();
    char v35 = v73;
    uint64_t v36 = v74;
    LOBYTE(v73) = 0;
    LOBYTE(v74) = v35;
    uint64_t v75 = (uint64_t)v36;
    uint64_t v37 = sub_10000A368(&qword_1000A9E60, &qword_1000A9E48);
    unint64_t v38 = sub_100057D90();
    uint64_t v39 = v67;
    View.menuStyle<A>(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v26, v39);
    uint64_t v40 = v56;
    uint64_t v41 = v55;
    uint64_t v42 = v68;
    (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v55, v29, v68);
    (*(void (**)(uint64_t, char *, uint64_t))(v40 + 16))(v69, v41, v42);
    swift_storeEnumTagMultiPayload();
    uint64_t v73 = v39;
    uint64_t v74 = &type metadata for TFMenuStyle;
    uint64_t v75 = v37;
    unint64_t v76 = v38;
    swift_getOpaqueTypeConformance2();
    _ConditionalContent<>.init(storage:)();
    return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v41, v42);
  }
}

uint64_t sub_10004C7AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __int16 a4@<W3>, void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X4>, void (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X5>, uint64_t a7@<X8>)
{
  uint64_t v28 = a5;
  uint64_t v29 = a6;
  uint64_t v12 = sub_10000435C(&qword_1000A9810);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v27 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v27 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v27 - v22;
  uint64_t v24 = a4 & 0x1FF;
  v28(1, a1, a2, a3, v24);
  v29(1, a1, a2, a3, v24);
  sub_100009E70((uint64_t)v23, (uint64_t)v18, &qword_1000A9810);
  sub_100009E70((uint64_t)v21, (uint64_t)v15, &qword_1000A9810);
  sub_100009E70((uint64_t)v18, a7, &qword_1000A9810);
  uint64_t v25 = sub_10000435C(&qword_1000A9E58);
  sub_100009E70((uint64_t)v15, a7 + *(int *)(v25 + 48), &qword_1000A9810);
  sub_100009ED4((uint64_t)v21, &qword_1000A9810);
  sub_100009ED4((uint64_t)v23, &qword_1000A9810);
  sub_100009ED4((uint64_t)v15, &qword_1000A9810);
  return sub_100009ED4((uint64_t)v18, &qword_1000A9810);
}

uint64_t sub_10004C980@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v35 = a3;
  uint64_t v36 = a4;
  uint64_t v34 = a2;
  uint64_t v38 = a6;
  uint64_t v8 = (int *)type metadata accessor for TFToggle(0);
  __chkstk_darwin(v8);
  uint64_t v10 = (uint64_t *)((char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  int v37 = a1;
  if (a1)
  {
    if (qword_1000A81B8 != -1) {
      swift_once();
    }
    uint64_t v11 = qword_1000AB520;
    uint64_t v12 = swift_bridgeObjectRetain();
  }
  uint64_t v33 = v12;
  type metadata accessor for MainActor();
  uint64_t v13 = static MainActor.shared.getter();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v13;
  *(void *)(v14 + 24) = &protocol witness table for MainActor;
  uint64_t v15 = v34;
  swift_retain();
  uint64_t v16 = v36;
  sub_10001F4F8(v36, a5, BYTE1(a5) & 1);
  uint64_t v17 = static MainActor.shared.getter();
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v17;
  *(void *)(v18 + 24) = &protocol witness table for MainActor;
  uint64_t v19 = v35;
  *(void *)(v18 + 32) = v15;
  *(void *)(v18 + 40) = v19;
  *(void *)(v18 + 48) = v16;
  *(unsigned char *)(v18 + 56) = a5;
  *(unsigned char *)(v18 + 57) = BYTE1(a5) & 1;
  Binding.init(get:set:)();
  uint64_t v20 = v39;
  uint64_t v21 = v40;
  char v22 = v41;
  static SymbolRenderingMode.hierarchical.getter();
  *uint64_t v10 = 0xD000000000000013;
  v10[1] = 0x8000000100088120;
  uint64_t v23 = (void *)((char *)v10 + v8[6]);
  uint64_t v24 = v33;
  *uint64_t v23 = v11;
  v23[1] = v24;
  *((unsigned char *)v10 + v8[7]) = v37 & 1;
  uint64_t v25 = (char *)v10 + v8[8];
  *(void *)uint64_t v25 = v20;
  *((void *)v25 + 1) = v21;
  v25[16] = v22;
  char v26 = (char *)v10 + v8[9];
  *(void *)char v26 = swift_getKeyPath();
  v26[8] = 0;
  if (qword_1000A81B8 != -1) {
    swift_once();
  }
  uint64_t v39 = qword_1000AB520;
  uint64_t v40 = *(void *)algn_1000AB528;
  sub_1000099C8();
  swift_bridgeObjectRetain();
  uint64_t v27 = Text.init<A>(_:)();
  uint64_t v29 = v28;
  char v31 = v30 & 1;
  sub_100057C6C(&qword_1000A9850, (void (*)(uint64_t))type metadata accessor for TFToggle);
  View.accessibilityLabel(_:)();
  sub_100009A1C(v27, v29, v31);
  swift_bridgeObjectRelease();
  return sub_10005C87C((uint64_t)v10, type metadata accessor for TFToggle);
}

uint64_t sub_10004CCC4@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v35 = a3;
  uint64_t v36 = a4;
  uint64_t v34 = a2;
  uint64_t v38 = a6;
  uint64_t v8 = (int *)type metadata accessor for TFToggle(0);
  __chkstk_darwin(v8);
  uint64_t v10 = (uint64_t *)((char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  int v37 = a1;
  if (a1)
  {
    if (qword_1000A81B0 != -1) {
      swift_once();
    }
    uint64_t v11 = qword_1000AB510;
    uint64_t v12 = swift_bridgeObjectRetain();
  }
  uint64_t v33 = v12;
  type metadata accessor for MainActor();
  uint64_t v13 = static MainActor.shared.getter();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v13;
  *(void *)(v14 + 24) = &protocol witness table for MainActor;
  uint64_t v15 = v34;
  swift_retain();
  uint64_t v16 = v36;
  sub_10001F4F8(v36, a5, BYTE1(a5) & 1);
  uint64_t v17 = static MainActor.shared.getter();
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v17;
  *(void *)(v18 + 24) = &protocol witness table for MainActor;
  uint64_t v19 = v35;
  *(void *)(v18 + 32) = v15;
  *(void *)(v18 + 40) = v19;
  *(void *)(v18 + 48) = v16;
  *(unsigned char *)(v18 + 56) = a5;
  *(unsigned char *)(v18 + 57) = BYTE1(a5) & 1;
  Binding.init(get:set:)();
  uint64_t v20 = v39;
  uint64_t v21 = v40;
  char v22 = v41;
  static SymbolRenderingMode.hierarchical.getter();
  *uint64_t v10 = 0xD000000000000013;
  v10[1] = 0x8000000100088100;
  uint64_t v23 = (void *)((char *)v10 + v8[6]);
  uint64_t v24 = v33;
  *uint64_t v23 = v11;
  v23[1] = v24;
  *((unsigned char *)v10 + v8[7]) = v37 & 1;
  uint64_t v25 = (char *)v10 + v8[8];
  *(void *)uint64_t v25 = v20;
  *((void *)v25 + 1) = v21;
  v25[16] = v22;
  char v26 = (char *)v10 + v8[9];
  *(void *)char v26 = swift_getKeyPath();
  v26[8] = 0;
  if (qword_1000A81B0 != -1) {
    swift_once();
  }
  uint64_t v39 = qword_1000AB510;
  uint64_t v40 = *(void *)algn_1000AB518;
  sub_1000099C8();
  swift_bridgeObjectRetain();
  uint64_t v27 = Text.init<A>(_:)();
  uint64_t v29 = v28;
  char v31 = v30 & 1;
  sub_100057C6C(&qword_1000A9850, (void (*)(uint64_t))type metadata accessor for TFToggle);
  View.accessibilityLabel(_:)();
  sub_100009A1C(v27, v29, v31);
  swift_bridgeObjectRelease();
  return sub_10005C87C((uint64_t)v10, type metadata accessor for TFToggle);
}

uint64_t sub_10004D008@<X0>(uint64_t a1@<X8>)
{
  return sub_100046C20(a1, (__n128)xmmword_100084B80);
}

uint64_t sub_10004D014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = type metadata accessor for UITextFormattingViewController.ChangeValue();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a4)
  {
    uint64_t v9 = *(void (**)(char *, void))(a4
                                               + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_didChangeValue);
    (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for UITextFormattingViewController.ChangeValue.increaseQuoteLevel(_:), v5);
    swift_retain();
    swift_retain();
    v9(v8, 0);
    swift_release();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    return swift_release();
  }
  else
  {
    type metadata accessor for TextFormattingState();
    sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10004D1A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = type metadata accessor for UITextFormattingViewController.ChangeValue();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a4)
  {
    uint64_t v9 = *(void (**)(char *, void))(a4
                                               + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_didChangeValue);
    (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for UITextFormattingViewController.ChangeValue.decreaseQuoteLevel(_:), v5);
    swift_retain();
    swift_retain();
    v9(v8, 0);
    swift_release();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    return swift_release();
  }
  else
  {
    type metadata accessor for TextFormattingState();
    sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10004D334@<X0>(uint64_t a1@<X8>)
{
  return sub_10004D388((uint64_t)sub_10005B448, (uint64_t)sub_10004D008, (void (*)(void, uint64_t, uint64_t, uint64_t, uint64_t))sub_10004C980, (void (*)(void, uint64_t, uint64_t, uint64_t, uint64_t))sub_10004CCC4, a1);
}

uint64_t sub_10004D388@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, void (*a3)(void, uint64_t, uint64_t, uint64_t, uint64_t)@<X4>, void (*a4)(void, uint64_t, uint64_t, uint64_t, uint64_t)@<X5>, uint64_t a5@<X8>)
{
  return sub_10004BEF0(*(void *)v5, *(void *)(v5 + 8), *(void *)(v5 + 16), *(unsigned __int8 *)(v5 + 24) | (unsigned __int16)(*(unsigned __int8 *)(v5 + 25) << 8), a1, a2, a3, a4, a5);
}

uint64_t sub_10004D3CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __int16 a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10 = sub_10000435C(&qword_1000A8FF8);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = &v31[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = sub_10000435C(&qword_1000AA070);
  uint64_t v14 = (int *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = &v31[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v17 = sub_10000435C(&qword_1000AA078);
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = &v31[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v20 = &v16[v14[12]];
  uint64_t v21 = type metadata accessor for HoverEffect();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v20, 1, 1, v21);
  *(void *)uint64_t v16 = 0;
  *((_WORD *)v16 + 4) = 257;
  sub_10004D7BC(a1, a2, a3, a4 & 0x1FF, &v16[v14[13]]);
  char v22 = &v16[v14[14]];
  *(void *)char v22 = swift_getKeyPath();
  v22[8] = 0;
  uint64_t v23 = &v16[v14[15]];
  *(void *)uint64_t v23 = swift_getKeyPath();
  v23[8] = 0;
  uint64_t v24 = &v16[v14[16]];
  *(void *)uint64_t v24 = swift_getKeyPath();
  v24[8] = 0;
  uint64_t v25 = &v16[v14[17]];
  v31[7] = 0;
  State.init(wrappedValue:)();
  uint64_t v26 = v32;
  *uint64_t v25 = v31[8];
  *((void *)v25 + 1) = v26;
  if (a1)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v27 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor();
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v27 - 8) + 48))(v12, 1, v27))
    {
      sub_100009ED4((uint64_t)v12, &qword_1000A8FF8);
      swift_release();
      char v28 = 0;
    }
    else
    {
      uint64_t v29 = UITextFormattingViewController.FormattingDescriptor._blockquote.getter();
      sub_100009ED4((uint64_t)v12, &qword_1000A8FF8);
      swift_release();
      char v28 = v29 == 1;
    }
    if (qword_1000A8210 != -1) {
      swift_once();
    }
    sub_1000393DC(v28, qword_1000AB5D0, *(uint64_t *)algn_1000AB5D8, &qword_1000AA078, &qword_1000AA070, &qword_1000AA080, (uint64_t)&unk_100085FB0, (uint64_t)v19);
    sub_100009ED4((uint64_t)v16, &qword_1000AA070);
    return sub_100009F30((uint64_t)v19, a5, &qword_1000AA078);
  }
  else
  {
    type metadata accessor for TextFormattingState();
    sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10004D7BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  unsigned int v10 = (a4 >> 8) & 1;
  type metadata accessor for MainActor();
  swift_retain();
  sub_10001F4F8(a3, a4, v10);
  uint64_t v11 = static MainActor.shared.getter();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v11;
  *(void *)(v12 + 24) = &protocol witness table for MainActor;
  *(void *)(v12 + 32) = a1;
  *(void *)(v12 + 40) = a2;
  *(void *)(v12 + 48) = a3;
  *(unsigned char *)(v12 + 56) = a4;
  *(unsigned char *)(v12 + 57) = v10;
  swift_retain();
  sub_10001F4F8(a3, a4, v10);
  uint64_t v13 = static MainActor.shared.getter();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v13;
  *(void *)(v14 + 24) = &protocol witness table for MainActor;
  *(void *)(v14 + 32) = a1;
  *(void *)(v14 + 40) = a2;
  *(void *)(v14 + 48) = a3;
  *(unsigned char *)(v14 + 56) = a4;
  *(unsigned char *)(v14 + 57) = v10;
  Binding.init(get:set:)();
  uint64_t v15 = (int *)type metadata accessor for TFToggle(0);
  static SymbolRenderingMode.hierarchical.getter();
  *a5 = 0xD000000000000016;
  a5[1] = 0x8000000100088140;
  uint64_t v16 = (void *)((char *)a5 + v15[6]);
  *uint64_t v16 = 0;
  v16[1] = 0;
  *((unsigned char *)a5 + v15[7]) = 0;
  uint64_t v17 = (char *)a5 + v15[8];
  *(void *)uint64_t v17 = v20;
  *((void *)v17 + 1) = v21;
  v17[16] = v22;
  uint64_t v18 = (char *)a5 + v15[9];
  uint64_t result = swift_getKeyPath();
  *(void *)uint64_t v18 = result;
  v18[8] = 0;
  return result;
}

uint64_t sub_10004D97C@<X0>(uint64_t a1@<X2>, BOOL *a2@<X8>)
{
  uint64_t v4 = sub_10000435C(&qword_1000A8FF8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v7 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
    {
      sub_100009ED4((uint64_t)v6, &qword_1000A8FF8);
      uint64_t result = swift_release();
      BOOL v9 = 0;
    }
    else
    {
      uint64_t v10 = UITextFormattingViewController.FormattingDescriptor._blockquote.getter();
      sub_100009ED4((uint64_t)v6, &qword_1000A8FF8);
      uint64_t result = swift_release();
      BOOL v9 = v10 == 1;
    }
    *a2 = v9;
  }
  else
  {
    type metadata accessor for TextFormattingState();
    sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10004DB30(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for UITextFormattingViewController.ChangeValue();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  BOOL v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a4)
  {
    char v10 = *a1;
    uint64_t v11 = *(void (**)(unsigned char *, void))(a4
                                                 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_didChangeValue);
    unsigned char *v9 = v10;
    (*(void (**)(unsigned char *, void, uint64_t))(v7 + 104))(v9, enum case for UITextFormattingViewController.ChangeValue.toggleBlockquote(_:), v6);
    swift_retain();
    swift_retain();
    v11(v9, 0);
    swift_release();
    (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
    return swift_release();
  }
  else
  {
    type metadata accessor for TextFormattingState();
    sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10004DCCC(uint64_t a1, uint64_t a2)
{
  return sub_100047C14(a1, a2, (uint64_t (*)(void, void, void, void))sub_10004D3CC);
}

uint64_t sub_10004DCE4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = (int *)sub_10000435C(&qword_1000AA088);
  uint64_t v5 = a1 + v4[10];
  uint64_t v6 = type metadata accessor for HoverEffect();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 257;
  sub_10004DE10(v2, a1 + v4[11]);
  uint64_t v7 = a1 + v4[12];
  *(void *)uint64_t v7 = swift_getKeyPath();
  *(unsigned char *)(v7 + 8) = 0;
  uint64_t v8 = a1 + v4[13];
  *(void *)uint64_t v8 = swift_getKeyPath();
  *(unsigned char *)(v8 + 8) = 0;
  uint64_t v9 = a1 + v4[14];
  *(void *)uint64_t v9 = swift_getKeyPath();
  *(unsigned char *)(v9 + 8) = 0;
  uint64_t v10 = a1 + v4[15];
  uint64_t result = State.init(wrappedValue:)();
  *(unsigned char *)uint64_t v10 = v12;
  *(void *)(v10 + 8) = v13;
  return result;
}

uint64_t sub_10004DE10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v76 = a2;
  uint64_t v3 = sub_10000435C(&qword_1000AA090);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000435C(&qword_1000AA098);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000435C(&qword_1000AA0A0);
  __chkstk_darwin(v10);
  char v12 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000435C(&qword_1000AA0A8);
  uint64_t v66 = *(void *)(v13 - 8);
  uint64_t v67 = v13;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = sub_10000435C(&qword_1000AA0B0);
  __chkstk_darwin(v68);
  uint64_t v69 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000435C(&qword_1000AA0B8);
  uint64_t v72 = *(void *)(v17 - 8);
  uint64_t v73 = v17;
  __chkstk_darwin(v17);
  uint64_t v71 = (char *)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = sub_10000435C(&qword_1000AA0C0);
  uint64_t v19 = __chkstk_darwin(v70);
  uint64_t v21 = (char *)&v59 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v74 = (uint64_t)&v59 - v22;
  uint64_t v23 = sub_10000435C(&qword_1000AA0C8);
  uint64_t v24 = __chkstk_darwin(v23 - 8);
  __chkstk_darwin(v24);
  uint64_t v75 = (uint64_t)&v59 - v26;
  if (*(unsigned char *)a1)
  {
    uint64_t v60 = v25;
    uint64_t v61 = v12;
    uint64_t v62 = v7;
    uint64_t v63 = v10;
    uint64_t v64 = v9;
    uint64_t v29 = *(void *)(a1 + 24);
    uint64_t v30 = *(unsigned __int8 *)(a1 + 32);
    int v31 = *(unsigned __int8 *)(a1 + 33);
    sub_10001F4F8(v29, v30, *(unsigned char *)(a1 + 33));
    uint64_t v32 = sub_100012E64(v29, v30 | (v31 << 8));
    char v34 = v33;
    sub_10001F568(v29, v30, v31);
    uint64_t v65 = v3;
    if ((v34 & 1) != 0 || v32 >= 2)
    {
      uint64_t v36 = v75;
      sub_10004E738(v75);
      uint64_t v35 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v36, 0, 1, v3);
    }
    else
    {
      uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v75, 1, 1, v3);
    }
    uint64_t v37 = __chkstk_darwin(v35);
    *(&v59 - 2) = a1;
    __chkstk_darwin(v37);
    *(&v59 - 2) = a1;
    sub_10000435C(&qword_1000AA0F0);
    sub_10000435C(&qword_1000AA0F8);
    sub_10000A368(&qword_1000AA100, &qword_1000AA0F0);
    sub_10005B6D0(&qword_1000AA108, &qword_1000AA0F8, (void (*)(void))sub_10005B73C);
    Menu.init(content:label:)();
    if (qword_1000A8220 != -1) {
      swift_once();
    }
    uint64_t v77 = qword_1000AB5F0;
    uint64_t v78 = *(void *)algn_1000AB5F8;
    sub_1000099C8();
    swift_bridgeObjectRetain();
    uint64_t v38 = Text.init<A>(_:)();
    uint64_t v40 = v39;
    char v42 = v41 & 1;
    sub_10000A368(&qword_1000AA138, &qword_1000AA0A8);
    uint64_t v43 = (uint64_t)v69;
    uint64_t v44 = v67;
    View.accessibilityLabel(_:)();
    sub_100009A1C(v38, v40, v42);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v66 + 8))(v15, v44);
    char v80 = 0;
    State.init(wrappedValue:)();
    char v45 = v77;
    uint64_t v46 = v78;
    LOBYTE(v77) = 0;
    LOBYTE(v78) = v45;
    uint64_t v79 = v46;
    sub_10005B890();
    sub_100057D90();
    uint64_t v47 = v71;
    View.menuStyle<A>(_:)();
    swift_release();
    sub_100009ED4(v43, &qword_1000AA0B0);
    LOBYTE(v46) = sub_10005074C();
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v49 = swift_allocObject();
    *(unsigned char *)(v49 + 16) = v46 & 1;
    uint64_t v51 = v72;
    uint64_t v50 = v73;
    (*(void (**)(char *, char *, uint64_t))(v72 + 16))(v21, v47, v73);
    unint64_t v52 = (uint64_t *)&v21[*(int *)(v70 + 36)];
    *unint64_t v52 = KeyPath;
    v52[1] = (uint64_t)sub_10005C918;
    v52[2] = v49;
    (*(void (**)(char *, uint64_t))(v51 + 8))(v47, v50);
    uint64_t v53 = v74;
    sub_100009F30((uint64_t)v21, v74, &qword_1000AA0C0);
    uint64_t v54 = v75;
    uint64_t v55 = v60;
    sub_100009E70(v75, v60, &qword_1000AA0C8);
    sub_100009E70(v53, (uint64_t)v21, &qword_1000AA0C0);
    uint64_t v56 = (uint64_t)v61;
    sub_100009E70(v55, (uint64_t)v61, &qword_1000AA0C8);
    uint64_t v57 = sub_10000435C(&qword_1000AA148);
    sub_100009E70((uint64_t)v21, v56 + *(int *)(v57 + 48), &qword_1000AA0C0);
    sub_100009ED4((uint64_t)v21, &qword_1000AA0C0);
    sub_100009ED4(v55, &qword_1000AA0C8);
    sub_100009E70(v56, (uint64_t)v64, &qword_1000AA0A0);
    swift_storeEnumTagMultiPayload();
    sub_10000A368(&qword_1000AA0D0, &qword_1000AA0A0);
    sub_10005B598();
    _ConditionalContent<>.init(storage:)();
    sub_100009ED4(v56, &qword_1000AA0A0);
    sub_100009ED4(v53, &qword_1000AA0C0);
    uint64_t v27 = v54;
    char v28 = &qword_1000AA0C8;
  }
  else
  {
    sub_10004E738((uint64_t)v6);
    sub_100009E70((uint64_t)v6, (uint64_t)v9, &qword_1000AA090);
    swift_storeEnumTagMultiPayload();
    sub_10000A368(&qword_1000AA0D0, &qword_1000AA0A0);
    sub_10005B598();
    _ConditionalContent<>.init(storage:)();
    uint64_t v27 = (uint64_t)v6;
    char v28 = &qword_1000AA090;
  }
  return sub_100009ED4(v27, v28);
}

uint64_t sub_10004E738@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v52 = a1;
  uint64_t v3 = type metadata accessor for TFToggle(0);
  uint64_t v4 = (int *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (_OWORD *)((char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v53 = sub_10000435C(&qword_1000A9AF8) - 8;
  __chkstk_darwin(v53);
  uint64_t v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000435C(&qword_1000AA0E8);
  __chkstk_darwin(v9 - 8);
  uint64_t v54 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000435C(&qword_1000AA090);
  __chkstk_darwin(v11 - 8);
  uint64_t v51 = (uint64_t)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for MainActor();
  sub_10005BC2C((uint64_t)v1, (void (*)(uint64_t, uint64_t))sub_10005C948, (void (*)(uint64_t, uint64_t))sub_10005C948);
  uint64_t v13 = static MainActor.shared.getter();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v13;
  *(void *)(v14 + 24) = &protocol witness table for MainActor;
  long long v15 = v1[3];
  *(_OWORD *)(v14 + 64) = v1[2];
  *(_OWORD *)(v14 + 80) = v15;
  long long v16 = v1[5];
  *(_OWORD *)(v14 + 96) = v1[4];
  *(_OWORD *)(v14 + 112) = v16;
  long long v17 = v1[1];
  *(_OWORD *)(v14 + 32) = *v1;
  *(_OWORD *)(v14 + 48) = v17;
  sub_10005BC2C((uint64_t)v1, (void (*)(uint64_t, uint64_t))sub_10005C948, (void (*)(uint64_t, uint64_t))sub_10005C948);
  uint64_t v18 = static MainActor.shared.getter();
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v18;
  *(void *)(v19 + 24) = &protocol witness table for MainActor;
  long long v20 = v2[3];
  *(_OWORD *)(v19 + 64) = v2[2];
  *(_OWORD *)(v19 + 80) = v20;
  long long v21 = v2[5];
  *(_OWORD *)(v19 + 96) = v2[4];
  *(_OWORD *)(v19 + 112) = v21;
  long long v22 = v2[1];
  *(_OWORD *)(v19 + 32) = *v2;
  *(_OWORD *)(v19 + 48) = v22;
  Binding.init(get:set:)();
  uint64_t v23 = v55;
  uint64_t v24 = v56;
  char v25 = v57;
  swift_retain();
  swift_retain();
  static SymbolRenderingMode.hierarchical.getter();
  *uint64_t v6 = xmmword_100084B90;
  uint64_t v26 = (void *)((char *)v6 + v4[8]);
  *uint64_t v26 = 0;
  v26[1] = 0;
  *((unsigned char *)v6 + v4[9]) = 0;
  uint64_t v27 = (char *)v6 + v4[10];
  *(void *)uint64_t v27 = v23;
  *((void *)v27 + 1) = v24;
  v27[16] = v25;
  char v28 = (char *)v6 + v4[11];
  *(void *)char v28 = swift_getKeyPath();
  v28[8] = 0;
  LOBYTE(v28) = sub_10005074C();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v30 = swift_allocObject();
  *(unsigned char *)(v30 + 16) = v28 & 1;
  sub_10005C814((uint64_t)v6, (uint64_t)v8, type metadata accessor for TFToggle);
  int v31 = (uint64_t *)&v8[*(int *)(v53 + 44)];
  uint64_t *v31 = KeyPath;
  v31[1] = (uint64_t)sub_10005C918;
  v31[2] = v30;
  sub_10005C87C((uint64_t)v6, type metadata accessor for TFToggle);
  if ((*(unsigned char *)v2 & 1) == 0)
  {
    double v32 = 0.0;
    char v33 = 1;
LABEL_3:
    uint64_t v34 = (uint64_t)v54;
    goto LABEL_7;
  }
  uint64_t v35 = *((void *)v2 + 3);
  uint64_t v36 = *((unsigned __int8 *)v2 + 32);
  int v37 = *((unsigned __int8 *)v2 + 33);
  sub_10001F4F8(v35, v36, *((unsigned char *)v2 + 33));
  uint64_t v38 = sub_100012E64(v35, v36 | (v37 << 8));
  char v40 = v39;
  sub_10001F568(v35, v36, v37);
  double v32 = 0.0;
  char v33 = 1;
  if (v40) {
    goto LABEL_3;
  }
  uint64_t v34 = (uint64_t)v54;
  if (v38 >= 4)
  {
    uint64_t v41 = *((void *)v2 + 7);
    char v42 = *((unsigned char *)v2 + 64);
    sub_10001F504(v41, v42);
    char v43 = sub_100012C58(v41, v42);
    sub_10001F574(v41, v42);
    char v33 = 0;
    double v32 = sub_100074A84(v43);
  }
LABEL_7:
  uint64_t v44 = static Alignment.center.getter();
  sub_1000352CC(0.0, 1, 0.0, 1, v32, v33, 0.0, 1, v34, 0.0, 1, 0.0, 1, v44, v45, (uint64_t)&qword_1000A9AF8, (void (*)(uint64_t, uint64_t, uint64_t))sub_100009E70, &qword_1000AA0E8);
  sub_100009ED4((uint64_t)v8, &qword_1000A9AF8);
  if (*((void *)v2 + 1))
  {
    swift_retain();
    unint64_t v46 = (unint64_t)sub_10002E084();
    swift_release();
    if (v46 >> 62) {
      goto LABEL_13;
    }
    uint64_t v47 = *(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v47)
    {
      while ((v46 & 0xC000000000000001) == 0)
      {
        uint64_t v48 = *(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRelease();
        if (v48) {
          goto LABEL_17;
        }
        __break(1u);
LABEL_13:
        swift_bridgeObjectRetain();
        uint64_t v47 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v47) {
          goto LABEL_16;
        }
      }
      specialized _ArrayBuffer._getElementSlowPath(_:)();
      swift_unknownObjectRelease();
    }
LABEL_16:
    swift_bridgeObjectRelease();
LABEL_17:
    if (qword_1000A8218 != -1) {
      swift_once();
    }
    uint64_t v49 = v51;
    sub_10003967C(v47 != 0, qword_1000AB5E0, *(uint64_t *)algn_1000AB5E8, &qword_1000AA090, &qword_1000AA0E8, (void (*)(void))sub_10005B644, v51);
    swift_release();
    swift_release();
    sub_100009ED4(v34, &qword_1000AA0E8);
    return sub_100009F30(v49, v52, &qword_1000AA090);
  }
  else
  {
    type metadata accessor for TextFormattingState();
    sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10004EDB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10000435C(&qword_1000AA0F8);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned char *)(a1 + 1) & 1) == 0)
  {
    if (qword_1000A8288 != -1) {
      swift_once();
    }
    uint64_t v8 = swift_bridgeObjectRetain();
    goto LABEL_7;
  }
  if (*(void *)(a1 + 8))
  {
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v8 = v15;
LABEL_7:
    uint64_t v15 = v8;
    swift_getKeyPath();
    uint64_t v9 = (_OWORD *)swift_allocObject();
    long long v10 = *(_OWORD *)(a1 + 48);
    v9[3] = *(_OWORD *)(a1 + 32);
    v9[4] = v10;
    long long v11 = *(_OWORD *)(a1 + 80);
    v9[5] = *(_OWORD *)(a1 + 64);
    v9[6] = v11;
    long long v12 = *(_OWORD *)(a1 + 16);
    v9[1] = *(_OWORD *)a1;
    void v9[2] = v12;
    sub_10005BC2C(a1, (void (*)(uint64_t, uint64_t))sub_10005C948, (void (*)(uint64_t, uint64_t))sub_10005C948);
    sub_10000435C(&qword_1000A8B90);
    sub_10000435C(&qword_1000AA118);
    sub_10000A368(&qword_1000AA190, &qword_1000A8B90);
    sub_10005B73C();
    ForEach<>.init(_:id:content:)();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v7, v4);
  }
  type metadata accessor for TextFormattingState();
  sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
  uint64_t result = EnvironmentObject.error()();
  __break(1u);
  return result;
}

void sub_10004F0A4(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = [*a1 styleKey];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  *a2 = v4;
  a2[1] = v6;
}

uint64_t sub_10004F0FC@<X0>(void **a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v55 = a3;
  uint64_t v5 = type metadata accessor for ButtonToggleStyle();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v51 = v5;
  uint64_t v52 = v6;
  __chkstk_darwin(v5);
  uint64_t v48 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000435C(&qword_1000AA120);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v49 = v8;
  uint64_t v50 = v9;
  __chkstk_darwin(v8);
  long long v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000435C(&qword_1000AA198);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v53 = v12;
  uint64_t v54 = v13;
  __chkstk_darwin(v12);
  uint64_t v47 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *a1;
  type metadata accessor for MainActor();
  sub_10005BC2C((uint64_t)a2, (void (*)(uint64_t, uint64_t))sub_10005C948, (void (*)(uint64_t, uint64_t))sub_10005C948);
  id v16 = v15;
  uint64_t v17 = static MainActor.shared.getter();
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v17;
  *(void *)(v18 + 24) = &protocol witness table for MainActor;
  long long v19 = a2[3];
  *(_OWORD *)(v18 + 64) = a2[2];
  *(_OWORD *)(v18 + 80) = v19;
  long long v20 = a2[5];
  *(_OWORD *)(v18 + 96) = a2[4];
  *(_OWORD *)(v18 + 112) = v20;
  long long v21 = a2[1];
  *(_OWORD *)(v18 + 32) = *a2;
  *(_OWORD *)(v18 + 48) = v21;
  *(void *)(v18 + 128) = v16;
  sub_10005BC2C((uint64_t)a2, (void (*)(uint64_t, uint64_t))sub_10005C948, (void (*)(uint64_t, uint64_t))sub_10005C948);
  id v22 = v16;
  uint64_t v23 = static MainActor.shared.getter();
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = v23;
  *(void *)(v24 + 24) = &protocol witness table for MainActor;
  long long v25 = a2[3];
  *(_OWORD *)(v24 + 64) = a2[2];
  *(_OWORD *)(v24 + 80) = v25;
  long long v26 = a2[5];
  *(_OWORD *)(v24 + 96) = a2[4];
  *(_OWORD *)(v24 + 112) = v26;
  long long v27 = a2[1];
  *(_OWORD *)(v24 + 32) = *a2;
  *(_OWORD *)(v24 + 48) = v27;
  *(void *)(v24 + 128) = v22;
  Binding.init(get:set:)();
  id v56 = v22;
  char v57 = a2;
  swift_retain();
  swift_retain();
  sub_10000435C(&qword_1000AA1A0);
  sub_10000A368(&qword_1000AA1A8, &qword_1000AA1A0);
  Toggle.init(isOn:label:)();
  char v28 = v48;
  ButtonToggleStyle.init()();
  uint64_t v29 = sub_10000A368(&qword_1000AA128, &qword_1000AA120);
  uint64_t v30 = sub_100057C6C(&qword_1000AA130, (void (*)(uint64_t))&type metadata accessor for ButtonToggleStyle);
  uint64_t v31 = v49;
  uint64_t v32 = v51;
  View.toggleStyle<A>(_:)();
  char v33 = v28;
  uint64_t v34 = v32;
  (*(void (**)(char *, uint64_t))(v52 + 8))(v33, v32);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v11, v31);
  id v35 = [v22 title];
  uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v38 = v37;

  uint64_t v58 = v36;
  uint64_t v59 = v38;
  sub_1000099C8();
  uint64_t v39 = Text.init<A>(_:)();
  uint64_t v41 = v40;
  uint64_t v58 = v31;
  uint64_t v59 = v34;
  LOBYTE(v34) = v42 & 1;
  uint64_t v60 = v29;
  uint64_t v61 = v30;
  swift_getOpaqueTypeConformance2();
  uint64_t v43 = v53;
  uint64_t v44 = v47;
  View.accessibilityLabel(_:)();
  sub_100009A1C(v39, v41, v34);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v44, v43);
}

void sub_10004F630(uint64_t a1@<X2>, void *a2@<X3>, unsigned char *a3@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    swift_retain();
    uint64_t v5 = sub_10002E084();
    swift_release();
    id v6 = a2;
    LOBYTE(a2) = sub_100054394((unint64_t)v5, v6, (SEL *)&selRef_styleKey);
    swift_bridgeObjectRelease();

    *a3 = a2 & 1;
  }
  else
  {
    type metadata accessor for TextFormattingState();
    sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    EnvironmentObject.error()();
    __break(1u);
  }
}

uint64_t sub_10004F718(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (!*(void *)(a4 + 8))
  {
    type metadata accessor for TextFormattingState();
    sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
    return result;
  }
  if (*a1)
  {
    sub_10000435C(&qword_1000A8B30);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_100083940;
    *(void *)(v6 + 32) = a5;
    long long v11 = (void *)v6;
    specialized Array._endMutation()();
    uint64_t v7 = v11;
    swift_retain();
  }
  else
  {
    if (*(unsigned char *)(a4 + 1))
    {
      swift_retain();
      uint64_t v7 = _swiftEmptyArrayStorage;
      goto LABEL_10;
    }
    sub_10000435C(&qword_1000A8B30);
    uint64_t v7 = (void *)swift_allocObject();
    *((_OWORD *)v7 + 1) = xmmword_100083940;
    uint64_t v8 = qword_1000A8250;
    swift_retain();
    if (v8 != -1) {
      swift_once();
    }
    a5 = (void *)qword_1000AB618;
    v7[4] = qword_1000AB618;
    specialized Array._endMutation()();
  }
  id v9 = a5;
LABEL_10:
  sub_10002E3D0((uint64_t)v7);

  return swift_release();
}

uint64_t sub_10004F8B4()
{
  return Label.init(title:icon:)();
}

uint64_t sub_10004F97C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = [a1 title];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  sub_1000099C8();
  uint64_t result = Text.init<A>(_:)();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v5;
  *(unsigned char *)(a2 + 16) = v6 & 1;
  *(void *)(a2 + 24) = v7;
  return result;
}

uint64_t sub_10004FA00@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    swift_retain();
    id v5 = [a2 styleKey];
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;

    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    if (*(void *)(v13 + 16) && (unint64_t v9 = sub_100018964(v6, v8), (v10 & 1) != 0))
    {
      id v11 = *(id *)(*(void *)(v13 + 56) + 8 * v9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = Image.init(uiImage:)();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = 0;
    }
    *a3 = result;
  }
  else
  {
    type metadata accessor for TextFormattingState();
    sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10004FB80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_10004FC2C(a1, a2);
  id v3 = (int *)sub_10000435C(&qword_1000AA0F0);
  uint64_t v4 = a2 + v3[9];
  State.init(wrappedValue:)();
  *(unsigned char *)uint64_t v4 = v8;
  *(void *)(v4 + 8) = v9;
  uint64_t v5 = a2 + v3[10];
  *(void *)uint64_t v5 = swift_getKeyPath();
  *(unsigned char *)(v5 + 8) = 0;
  uint64_t v6 = a2 + v3[11];
  uint64_t result = swift_getKeyPath();
  *(void *)uint64_t v6 = result;
  *(unsigned char *)(v6 + 8) = 0;
  return result;
}

uint64_t sub_10004FC2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = a2;
  uint64_t v27 = sub_10000435C(&qword_1000AA150);
  __chkstk_darwin(v27);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000435C(&qword_1000AA158);
  __chkstk_darwin(v24);
  uint64_t v25 = (uint64_t)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (int *)type metadata accessor for TFSymbol(0);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  id v11 = (char *)&v23 - v10;
  uint64_t v12 = *(void *)(a1 + 24);
  uint64_t v13 = *(unsigned __int8 *)(a1 + 32);
  int v14 = *(unsigned __int8 *)(a1 + 33);
  sub_10001F4F8(v12, v13, *(unsigned char *)(a1 + 33));
  uint64_t v15 = sub_100012E64(v12, v13 | (v14 << 8));
  char v17 = v16;
  sub_10001F568(v12, v13, v14);
  if ((v17 & 1) != 0 || v15 > 1)
  {
    *(void *)uint64_t v4 = static VerticalAlignment.center.getter();
    *((void *)v4 + 1) = 0;
    v4[16] = 0;
    uint64_t v22 = sub_10000435C(&qword_1000AA160);
    sub_100050008(a1, (uint64_t)&v4[*(int *)(v22 + 44)]);
    sub_100009E70((uint64_t)v4, v25, &qword_1000AA150);
    swift_storeEnumTagMultiPayload();
    sub_100057C6C(&qword_1000A9C30, (void (*)(uint64_t))type metadata accessor for TFSymbol);
    sub_10000A368(&qword_1000AA168, &qword_1000AA150);
    _ConditionalContent<>.init(storage:)();
    return sub_100009ED4((uint64_t)v4, &qword_1000AA150);
  }
  else
  {
    uint64_t v18 = static Font.title3.getter();
    static SymbolRenderingMode.hierarchical.getter();
    *(_OWORD *)uint64_t v9 = xmmword_100084B90;
    v9[16] = 0;
    *((void *)v9 + 3) = v18;
    *((void *)v9 + 4) = 0;
    v9[v6[9]] = 1;
    v9[v6[10]] = 1;
    long long v19 = &v9[v6[11]];
    *(void *)long long v19 = swift_getKeyPath();
    v19[8] = 0;
    long long v20 = &v9[v6[12]];
    *(void *)long long v20 = swift_getKeyPath();
    v20[8] = 0;
    sub_10005A91C((uint64_t)v9, (uint64_t)v11, type metadata accessor for TFSymbol);
    sub_10005C814((uint64_t)v11, v25, type metadata accessor for TFSymbol);
    swift_storeEnumTagMultiPayload();
    sub_100057C6C(&qword_1000A9C30, (void (*)(uint64_t))type metadata accessor for TFSymbol);
    sub_10000A368(&qword_1000AA168, &qword_1000AA150);
    _ConditionalContent<>.init(storage:)();
    return sub_10005C87C((uint64_t)v11, type metadata accessor for TFSymbol);
  }
}

uint64_t sub_100050008@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v56 = a2;
  uint64_t v3 = type metadata accessor for Image.Scale();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (int *)type metadata accessor for TFSymbol(0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = sub_10000435C(&qword_1000AA170);
  uint64_t v10 = __chkstk_darwin(v57);
  uint64_t v55 = (uint64_t)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  int v14 = (char *)&v55 - v13;
  __chkstk_darwin(v12);
  uint64_t v58 = (uint64_t)&v55 - v15;
  uint64_t v59 = a1;
  if (!*(void *)(a1 + 8)) {
    goto LABEL_20;
  }
  swift_retain();
  sub_10002EF34();
  swift_release();
  v66[0] = Color.init(uiColor:)();
  uint64_t v16 = AnyShapeStyle.init<A>(_:)();
  uint64_t v17 = static Font.title3.getter();
  static SymbolRenderingMode.hierarchical.getter();
  *(_OWORD *)uint64_t v9 = xmmword_100084BA0;
  v9[16] = 0;
  *((void *)v9 + 3) = v17;
  *((void *)v9 + 4) = v16;
  v9[v7[9]] = 1;
  v9[v7[10]] = 1;
  uint64_t v18 = &v9[v7[11]];
  *(void *)uint64_t v18 = swift_getKeyPath();
  v18[8] = 0;
  long long v19 = &v9[v7[12]];
  *(void *)long long v19 = swift_getKeyPath();
  v19[8] = 0;
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for Image.Scale.small(_:), v3);
  uint64_t KeyPath = swift_getKeyPath();
  long long v21 = (uint64_t *)&v14[*(int *)(v57 + 36)];
  uint64_t v22 = sub_10000435C(&qword_1000AA178);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))((char *)v21 + *(int *)(v22 + 28), v6, v3);
  *long long v21 = KeyPath;
  sub_10005C814((uint64_t)v9, (uint64_t)v14, type metadata accessor for TFSymbol);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_10005C87C((uint64_t)v9, type metadata accessor for TFSymbol);
  uint64_t v23 = v58;
  sub_100009F30((uint64_t)v14, v58, &qword_1000AA170);
  swift_retain();
  unint64_t v24 = (unint64_t)sub_10002E084();
  unint64_t v25 = v24;
  if (v24 >> 62)
  {
    uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v26 = v59;
    if (v29) {
      goto LABEL_4;
    }
LABEL_9:
    swift_bridgeObjectRelease();
    char v28 = (void *)sub_10002ED9C();
    swift_release();
    if (!v28) {
      goto LABEL_12;
    }
    goto LABEL_10;
  }
  uint64_t v26 = v59;
  if (!*(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_9;
  }
LABEL_4:
  if ((v25 & 0xC000000000000001) != 0)
  {
    id v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_7;
  }
  if (*(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v27 = *(id *)(v25 + 32);
LABEL_7:
    char v28 = v27;
    swift_release();
    swift_bridgeObjectRelease();
LABEL_10:
    id v30 = [v28 title];

    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v33 = v32;

    if (*(unsigned char *)v26)
    {
      uint64_t v38 = *(void *)(v26 + 24);
      uint64_t v39 = *(unsigned __int8 *)(v26 + 32);
      int v40 = *(unsigned __int8 *)(v26 + 33);
      sub_10001F4F8(v38, v39, *(unsigned char *)(v26 + 33));
      uint64_t v41 = sub_100012E64(v38, v39 | (v40 << 8));
      char v43 = v42;
      sub_10001F568(v38, v39, v40);
      if ((v43 & 1) == 0 && v41 >= 4)
      {
        uint64_t v44 = *(void *)(v26 + 40);
        char v45 = *(unsigned char *)(v26 + 48);
        sub_10001F504(v44, v45);
        double v46 = sub_100013288(v44, v45);
        sub_10001F574(v44, v45);
        if (*(double *)(v26 + 88) < v46)
        {
          uint64_t v47 = swift_getKeyPath();
          char v48 = static Edge.Set.horizontal.getter();
          uint64_t v49 = *(void *)(v26 + 56);
          char v50 = *(unsigned char *)(v26 + 64);
          sub_10001F504(v49, v50);
          sub_100012C58(v49, v50);
          sub_10001F574(v49, v50);
          EdgeInsets.init(_all:)();
          v66[26] = v31;
          v66[27] = v33;
          char v67 = 0;
          uint64_t v68 = v47;
          char v69 = 0;
          char v70 = v48;
          uint64_t v71 = v51;
          uint64_t v72 = v52;
          uint64_t v73 = v53;
          uint64_t v74 = v54;
          char v75 = 0;
          static Alignment.leading.getter();
          sub_100035684(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v61, 0.0, 1, 0.0, 1);
          swift_release();
          swift_bridgeObjectRelease();
          v63[10] = v61[10];
          v63[11] = v61[11];
          v63[6] = v61[6];
          v63[7] = v61[7];
          v63[8] = v61[8];
          v63[9] = v61[9];
          v63[2] = v61[2];
          v63[3] = v61[3];
          v63[4] = v61[4];
          v63[5] = v61[5];
          v63[0] = v61[0];
          v63[1] = v61[1];
          uint64_t v64 = v62;
          uint64_t v65 = 0x3FF0000000000000;
          nullsub_1(v63);
          goto LABEL_13;
        }
      }
    }
    swift_bridgeObjectRelease();
LABEL_12:
    sub_10005B9DC(v63);
LABEL_13:
    sub_100009F30((uint64_t)v63, (uint64_t)v66, &qword_1000AA180);
    uint64_t v34 = v55;
    sub_100009E70(v23, v55, &qword_1000AA170);
    sub_100009F30((uint64_t)v66, (uint64_t)v60, &qword_1000AA180);
    uint64_t v35 = v56;
    sub_100009E70(v34, v56, &qword_1000AA170);
    uint64_t v36 = v35 + *(int *)(sub_10000435C(&qword_1000AA188) + 48);
    sub_100009F30((uint64_t)v60, (uint64_t)v61, &qword_1000AA180);
    sub_100009F30((uint64_t)v61, v36, &qword_1000AA180);
    sub_10005BA4C(v61, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10005BA00);
    sub_100009ED4(v23, &qword_1000AA170);
    sub_100009F30((uint64_t)v60, (uint64_t)v63, &qword_1000AA180);
    sub_10005BA4C(v63, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10005BAC0);
    return sub_100009ED4(v34, &qword_1000AA170);
  }
  __break(1u);
LABEL_20:
  type metadata accessor for TextFormattingState();
  sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
  uint64_t result = EnvironmentObject.error()();
  __break(1u);
  return result;
}

uint64_t sub_10005074C()
{
  if ((*(unsigned char *)(v0 + 1) & 1) == 0) {
    goto LABEL_6;
  }
  if (*(void *)(v0 + 8))
  {
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    if (v7 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v1 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v1 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (!v1)
    {
      char v5 = 1;
      return v5 & 1;
    }
LABEL_6:
    uint64_t v2 = *(void *)(v0 + 72);
    char v3 = *(unsigned char *)(v0 + 80);
    sub_10001F504(v2, v3);
    char v4 = sub_100013084(v2, v3);
    sub_10001F574(v2, v3);
    char v5 = v4 ^ 1;
    return v5 & 1;
  }
  type metadata accessor for TextFormattingState();
  sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
  uint64_t result = EnvironmentObject.error()();
  __break(1u);
  return result;
}

uint64_t sub_1000508C0@<X0>(uint64_t a1@<X2>, BOOL *a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    swift_retain();
    unint64_t v3 = (unint64_t)sub_10002E084();
    swift_release();
    if (v3 >> 62) {
      goto LABEL_7;
    }
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v4)
    {
      while ((v3 & 0xC000000000000001) == 0)
      {
        uint64_t v5 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
        uint64_t result = swift_bridgeObjectRelease();
        if (v5) {
          goto LABEL_11;
        }
        __break(1u);
LABEL_7:
        swift_bridgeObjectRetain();
        uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v4) {
          goto LABEL_10;
        }
      }
      specialized _ArrayBuffer._getElementSlowPath(_:)();
      swift_unknownObjectRelease();
    }
LABEL_10:
    uint64_t result = swift_bridgeObjectRelease();
LABEL_11:
    *a2 = v4 != 0;
  }
  else
  {
    type metadata accessor for TextFormattingState();
    sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

void sub_1000509F0(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!*(void *)(a4 + 8)) {
    goto LABEL_32;
  }
  int v5 = *a1;
  swift_retain();
  uint64_t v6 = (void *)sub_10002ED9C();
  swift_release();
  if ((*(unsigned char *)(a4 + 1) & 1) == 0)
  {
    if (!v5)
    {
      if (qword_1000A8250 != -1) {
        swift_once();
      }
      unint64_t v7 = (void *)qword_1000AB618;
      id v13 = (id)qword_1000AB618;
      goto LABEL_24;
    }
    if ((*(unsigned char *)a4 & 1) == 0)
    {
      if (qword_1000A8258 != -1) {
        swift_once();
      }
      unint64_t v7 = (void *)qword_1000AB620;
      id v8 = (id)qword_1000AB620;
      goto LABEL_24;
    }
    if (v6)
    {
      id v14 = v6;
      unint64_t v7 = v6;
      goto LABEL_24;
    }
    goto LABEL_25;
  }
  if (v6) {
    int v9 = v5;
  }
  else {
    int v9 = 0;
  }
  if (v9 != 1)
  {
LABEL_25:
    unint64_t v7 = 0;
LABEL_26:
    uint64_t v16 = _swiftEmptyArrayStorage;
    goto LABEL_27;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  id v10 = v6;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  char v11 = sub_1000067C0((uint64_t)v10, v18);
  swift_bridgeObjectRelease();
  unint64_t v7 = v6;
  if (v11)
  {
LABEL_24:
    sub_10000435C(&qword_1000A8B30);
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_100083940;
    *(void *)(v15 + 32) = v7;
    long long v19 = (void *)v15;
    specialized Array._endMutation()();
    uint64_t v16 = v19;
LABEL_27:
    id v17 = v7;
    swift_retain();
    sub_10002E3D0((uint64_t)v16);
    swift_release();

    return;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  if (v18 >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t v7 = (void *)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v7) {
      goto LABEL_15;
    }
LABEL_29:

    swift_bridgeObjectRelease();
    goto LABEL_26;
  }
  unint64_t v7 = *(void **)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v7) {
    goto LABEL_29;
  }
LABEL_15:
  if ((v18 & 0xC000000000000001) != 0)
  {
    id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_18;
  }
  if (*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v12 = *(id *)(v18 + 32);
LABEL_18:
    unint64_t v7 = v12;

    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
  __break(1u);
LABEL_32:
  type metadata accessor for TextFormattingState();
  sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
  EnvironmentObject.error()();
  __break(1u);
}

uint64_t sub_100050D38@<X0>(uint64_t a1@<X8>)
{
  return sub_10004DCE4(a1);
}

uint64_t sub_100050D7C@<X0>(uint64_t a1@<X8>)
{
  unint64_t v3 = (int *)sub_10000435C(&qword_1000A97C8);
  __chkstk_darwin(v3);
  int v5 = &v39[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = sub_10000435C(&qword_1000A97D0);
  __chkstk_darwin(v6 - 8);
  id v8 = &v39[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = sub_10000435C(&qword_1000A97D8);
  __chkstk_darwin(v9 - 8);
  char v11 = &v39[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v12 = *(id *)v1;
  id v13 = [*(id *)v1 _textAnimationName];
  if (v13
    && (v13,
        id v14 = [self currentDevice],
        id v15 = [v14 userInterfaceIdiom],
        v14,
        v15 != (id)6))
  {
    static HoverEffect.lift.getter();
    uint64_t v17 = type metadata accessor for HoverEffect();
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v11, 0, 1, v17);
  }
  else
  {
    uint64_t v16 = type metadata accessor for HoverEffect();
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v11, 1, 1, v16);
  }
  uint64_t v18 = *(void *)(v1 + 40);
  char v19 = *(unsigned char *)(v1 + 48);
  sub_10001F504(v18, v19);
  int v40 = sub_100012C58(v18, v19);
  sub_10001F574(v18, v19);
  uint64_t v20 = *(void *)(v1 + 8);
  if (v20)
  {
    char v42 = v12;
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v21 = v46;
    char v22 = v47;
    char v23 = *(unsigned char *)(v20 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_isInPopoverPresentation);
    char v43 = v8;
    uint64_t v44 = a1;
    uint64_t v24 = (uint64_t)v11;
    if (v23) {
      char v25 = 0;
    }
    else {
      char v25 = *(unsigned char *)(v20 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_hasParentViewController) ^ 1;
    }
    uint64_t v41 = OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_useReducedMetrics;
    char v26 = *(unsigned char *)(v20 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_useReducedMetrics);
    NSString v27 = String._bridgeToObjectiveC()();
    double v28 = sub_100074B84((uint64_t)v27, v21, v22, v25 & 1, v26, v40);

    *(double *)int v5 = v28;
    *((_WORD *)v5 + 4) = 256;
    sub_100009E70(v24, (uint64_t)&v5[v3[10]], &qword_1000A97D8);
    sub_100051294((void **)v1, (uint64_t)&v5[v3[11]]);
    uint64_t v29 = &v5[v3[12]];
    *(void *)uint64_t v29 = swift_getKeyPath();
    v29[8] = 0;
    id v30 = &v5[v3[13]];
    *(void *)id v30 = swift_getKeyPath();
    v30[8] = 0;
    uint64_t v31 = &v5[v3[14]];
    *(void *)uint64_t v31 = swift_getKeyPath();
    v31[8] = 0;
    uint64_t v32 = &v5[v3[15]];
    char v45 = 0;
    State.init(wrappedValue:)();
    uint64_t v33 = v47;
    unsigned char *v32 = v46;
    *((void *)v32 + 1) = v33;
    sub_100057A2C(v42);
    sub_10000A368(&qword_1000A97E0, &qword_1000A97C8);
    uint64_t v34 = (uint64_t)v43;
    View.accessibilityIdentifier(_:)();
    swift_bridgeObjectRelease();
    sub_100009ED4((uint64_t)v5, &qword_1000A97C8);
    uint64_t KeyPath = swift_getKeyPath();
    LOBYTE(v27) = *(unsigned char *)(v20 + v41);
    uint64_t v36 = v44;
    sub_100009E70(v34, v44, &qword_1000A97D0);
    uint64_t v37 = v36 + *(int *)(sub_10000435C(&qword_1000A97E8) + 36);
    *(void *)uint64_t v37 = KeyPath;
    *(unsigned char *)(v37 + 8) = (_BYTE)v27;
    sub_100009ED4(v34, &qword_1000A97D0);
    return sub_100009ED4(v24, &qword_1000A97D8);
  }
  else
  {
    type metadata accessor for TextFormattingState();
    sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_100051294@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v165 = a2;
  uint64_t v154 = sub_10000435C(&qword_1000A97F8);
  __chkstk_darwin(v154);
  uint64_t v155 = (uint64_t)&v138 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v150 = sub_10000435C(&qword_1000A9800);
  __chkstk_darwin(v150);
  unint64_t v148 = (_WORD *)((char *)&v138 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v153 = sub_10000435C(&qword_1000A9808);
  uint64_t v5 = __chkstk_darwin(v153);
  uint64_t v147 = (uint64_t)&v138 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v149 = (uint64_t)&v138 - v7;
  uint64_t v8 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor();
  uint64_t v156 = *(void *)(v8 - 8);
  double v157 = (id *)v8;
  __chkstk_darwin(v8);
  double v142 = (char *)&v138 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000435C(&qword_1000A8FF8);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v146 = (uint64_t)&v138 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v143 = (uint64_t)&v138 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v144 = (char *)&v138 - v16;
  __chkstk_darwin(v15);
  double v152 = (char *)&v138 - v17;
  uint64_t v145 = type metadata accessor for TFToggle(0);
  __chkstk_darwin(v145);
  uint64_t v151 = (id *)((char *)&v138 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = sub_10000435C(&qword_1000A9810);
  uint64_t v20 = __chkstk_darwin(v19);
  char v22 = (char *)&v138 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v138 - v23;
  uint64_t v162 = sub_10000435C(&qword_1000A9818);
  __chkstk_darwin(v162);
  uint64_t v164 = (char *)&v138 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_10000435C(&qword_1000A9820);
  uint64_t v159 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  double v28 = (char *)&v138 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = sub_10000435C(&qword_1000A9828);
  uint64_t v161 = *(void ***)(v29 - 8);
  uint64_t v30 = __chkstk_darwin(v29);
  double v158 = (char *)&v138 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  double v160 = (char *)&v138 - v32;
  uint64_t v163 = sub_10000435C(&qword_1000A9830);
  __chkstk_darwin(v163);
  uint64_t v34 = (char *)&v138 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = a1;
  uint64_t v36 = *a1;
  id v37 = [v36 _subcomponents];
  if (v37)
  {
    uint64_t v38 = v37;
    sub_10000A3AC(0, &qword_1000A9878);
    uint64_t v39 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

    double v157 = &v138;
    uint64_t v41 = __chkstk_darwin(v40);
    *(&v138 - 2) = v39;
    *(&v138 - 1) = v35;
    __chkstk_darwin(v41);
    *(&v138 - 2) = v35;
    sub_10000435C(&qword_1000A9880);
    sub_10000435C(&qword_1000A9888);
    sub_10000A368(&qword_1000A9890, &qword_1000A9880);
    sub_10005B6D0(&qword_1000A9898, &qword_1000A9888, (void (*)(void))sub_100057EEC);
    Menu.init(content:label:)();
    swift_bridgeObjectRelease();
    LOBYTE(v173) = 0;
    State.init(wrappedValue:)();
    char v42 = v168;
    uint64_t v43 = *((void *)&v168 + 1);
    LOBYTE(v168) = 0;
    BYTE8(v168) = v42;
    uint64_t v169 = v43;
    uint64_t v44 = sub_10000A368(&qword_1000A9858, &qword_1000A9820);
    unint64_t v45 = sub_100057D90();
    uint64_t v46 = v158;
    View.menuStyle<A>(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v159 + 8))(v28, v26);
    char v48 = v160;
    uint64_t v47 = v161;
    ((void (*)(char *, char *, uint64_t))v161[4])(v160, v46, v29);
    ((void (*)(char *, char *, uint64_t))v47[2])(v164, v48, v29);
    swift_storeEnumTagMultiPayload();
    *(void *)&long long v168 = v26;
    *((void *)&v168 + 1) = &type metadata for TFMenuStyle;
    uint64_t v169 = v44;
    unint64_t v170 = v45;
    swift_getOpaqueTypeConformance2();
    sub_100057DE4(&qword_1000A9868, &qword_1000A9830, (void (*)(void))sub_100057B9C, (void (*)(void))sub_100057CB4);
    _ConditionalContent<>.init(storage:)();
    return ((uint64_t (*)(char *, uint64_t))v47[1])(v48, v29);
  }
  char v50 = v152;
  CGFloat v139 = v22;
  double v140 = v24;
  uint64_t v161 = v35;
  CGFloat v141 = v34;
  double v158 = (char *)v19;
  uint64_t v159 = v26;
  double v160 = (char *)v29;
  id v51 = [v36 _textAnimationName];
  if (!v51)
  {
    id v88 = [v36 systemImageName];
    uint64_t v89 = v161;
    if (v88)
    {
      uint64_t v90 = v88;
      double v152 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v92 = v91;
    }
    else
    {
      double v152 = 0;
      uint64_t v92 = 0;
    }
    uint64_t v102 = v151;
    char v103 = (int *)v145;
    uint64_t v104 = (uint64_t)v89[3];
    uint64_t v105 = *((unsigned __int8 *)v89 + 32);
    int v106 = *((unsigned __int8 *)v89 + 33);
    sub_10001F4F8(v104, v105, *((unsigned char *)v89 + 33));
    uint64_t v107 = sub_100012E64(v104, v105 | (v106 << 8));
    char v109 = v108;
    sub_10001F568(v104, v105, v106);
    if ((v109 & 1) != 0
      || v107 > 2
      || (id v110 = [v36 systemImageName]) == 0)
    {
      id v113 = [v36 title];
      uint64_t v111 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v112 = v114;
    }
    else
    {

      uint64_t v111 = 0;
      uint64_t v112 = 0;
    }
    uint64_t v115 = sub_100053844(v36);
    uint64_t v117 = v116;
    char v119 = v118;
    static SymbolRenderingMode.hierarchical.getter();
    *uint64_t v102 = v152;
    v102[1] = v92;
    char v120 = (void *)((char *)v102 + v103[6]);
    *char v120 = v111;
    v120[1] = v112;
    *((unsigned char *)v102 + v103[7]) = 0;
    unint64_t v121 = (char *)v102 + v103[8];
    *(void *)unint64_t v121 = v115;
    *((void *)v121 + 1) = v117;
    v121[16] = v119 & 1;
    uint64_t v122 = (char *)v102 + v103[9];
    *(void *)uint64_t v122 = swift_getKeyPath();
    v122[8] = 0;
    if (v89[1])
    {
      swift_getKeyPath();
      swift_getKeyPath();
      swift_retain();
      uint64_t v123 = v146;
      static Published.subscript.getter();
      swift_release();
      swift_release();
      swift_release();
      int v124 = (*(uint64_t (**)(uint64_t, uint64_t, id *))(v156 + 48))(v123, 1, v157);
      uint64_t v87 = (uint64_t)v164;
      uint64_t v125 = v155;
      if (v124)
      {
        sub_100009ED4(v123, &qword_1000A8FF8);
        char v126 = 0;
      }
      else
      {
        UITextFormattingViewController.FormattingDescriptor._customComponentKeys.getter();
        sub_100009ED4(v123, &qword_1000A8FF8);
        id v127 = [v36 componentKey];
        char v126 = sub_1000125B8();

        swift_bridgeObjectRelease();
      }
      id v128 = [v36 accessibilityLabel];
      if (!v128) {
        id v128 = [v36 title];
      }
      uint64_t v129 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v131 = v130;

      uint64_t v132 = (uint64_t)v139;
      uint64_t v133 = (uint64_t)v151;
      sub_100039128(v126 & 1, v129, v131, (uint64_t)v139);
      swift_bridgeObjectRelease();
      sub_10005C87C(v133, type metadata accessor for TFToggle);
      uint64_t v134 = (uint64_t)v140;
      sub_100009F30(v132, (uint64_t)v140, &qword_1000A9810);
      sub_100009E70(v134, v125, &qword_1000A9810);
      swift_storeEnumTagMultiPayload();
      sub_100057B9C();
      sub_100057CB4();
      uint64_t v63 = (uint64_t)v141;
      _ConditionalContent<>.init(storage:)();
      sub_100009ED4(v134, &qword_1000A9810);
      goto LABEL_30;
    }
LABEL_33:
    type metadata accessor for TextFormattingState();
    sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
    return result;
  }
  uint64_t v52 = v51;
  uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v55 = v54;

  uint64_t v56 = v161[1];
  uint64_t v57 = (uint64_t)v141;
  if (!v56) {
    goto LABEL_33;
  }
  uint64_t v151 = (void *)v55;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  uint64_t v58 = (uint64_t)v50;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v59 = *(uint64_t (**)(char *, uint64_t, id *))(v156 + 48);
  int v60 = v59(v50, 1, v157);
  BOOL v61 = v60 == 0;
  id v138 = v36;
  uint64_t v146 = v53;
  if (v60)
  {
    char v62 = 0;
    uint64_t v63 = v57;
LABEL_7:
    sub_100009ED4(v58, &qword_1000A8FF8);
    char v64 = v61;
    uint64_t v65 = (int *)v150;
    goto LABEL_8;
  }
  UITextFormattingViewController.FormattingDescriptor._customComponentKeys.getter();
  sub_100009ED4(v58, &qword_1000A8FF8);
  id v93 = [v36 componentKey:v138];
  char v64 = sub_1000125B8();

  swift_bridgeObjectRelease();
  char v62 = (v56[OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_isTextAnimationsUI] ^ 1) & v64;
  if ((v56[OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_isTextAnimationsUI] ^ 1))
  {
    uint64_t v65 = (int *)v150;
    uint64_t v63 = v57;
    goto LABEL_8;
  }
  uint64_t v65 = (int *)v150;
  uint64_t v63 = v57;
  if (v64)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    uint64_t v94 = (uint64_t)v144;
    static Published.subscript.getter();
    swift_release();
    uint64_t v58 = v94;
    swift_release();
    swift_release();
    uint64_t v95 = v143;
    sub_100009E70(v94, v143, &qword_1000A8FF8);
    char v62 = 1;
    uint64_t v96 = v157;
    if (v59((char *)v95, 1, v157) != 1)
    {
      uint64_t v97 = v156;
      uint64_t v98 = v95;
      long long v99 = v142;
      (*(void (**)(char *, uint64_t, id *))(v156 + 32))(v142, v98, v96);
      uint64_t v100 = v58;
      uint64_t v101 = *(void *)(UITextFormattingViewController.FormattingDescriptor._customComponentKeys.getter() + 16);
      swift_bridgeObjectRelease();
      char v62 = v101 == 1;
      (*(void (**)(char *, id *))(v97 + 8))(v99, v96);
      uint64_t v58 = v100;
    }
    goto LABEL_7;
  }
LABEL_8:
  uint64_t v66 = v161;
  uint64_t v173 = v161[3];
  __int16 v174 = *((_WORD *)v161 + 16);
  double v171 = v161[5];
  char v172 = *((unsigned char *)v161 + 48);
  uint64_t v67 = swift_allocObject();
  long long v68 = *((_OWORD *)v66 + 1);
  *(_OWORD *)(v67 + 16) = *(_OWORD *)v66;
  *(_OWORD *)(v67 + 32) = v68;
  *(_OWORD *)(v67 + 48) = *((_OWORD *)v66 + 2);
  *(unsigned char *)(v67 + 64) = *((unsigned char *)v66 + 48);
  uint64_t v69 = (uint64_t)v148;
  *unint64_t v148 = 256;
  *(unsigned char *)(v69 + 2) = 0;
  uint64_t v70 = v69 + v65[11];
  swift_retain();
  uint64_t v71 = v65;
  id v72 = v138;
  sub_100057E78((uint64_t)&v173);
  sub_100057EAC((uint64_t)&v171);
  sub_100053290(v66, v146, (uint64_t)v151, v62 & 1, v70);
  uint64_t v73 = (uint64_t (**)())(v69 + v71[12]);
  *uint64_t v73 = sub_100057E70;
  v73[1] = (uint64_t (*)())v67;
  uint64_t v74 = v69 + v71[13];
  uint64_t v166 = 0;
  char v167 = 1;
  sub_10000435C(&qword_1000A9460);
  State.init(wrappedValue:)();
  char v75 = BYTE8(v168);
  uint64_t v76 = v169;
  *(void *)uint64_t v74 = v168;
  *(unsigned char *)(v74 + 8) = v75;
  *(void *)(v74 + 16) = v76;
  uint64_t v77 = v71[14];
  uint64_t v166 = 0;
  sub_10000435C(&qword_1000A9870);
  State.init(wrappedValue:)();
  *(_OWORD *)(v69 + v77) = v168;
  uint64_t v78 = v69 + v71[15];
  uint64_t KeyPath = swift_getKeyPath();
  swift_bridgeObjectRelease();
  *(void *)uint64_t v78 = KeyPath;
  *(unsigned char *)(v78 + 8) = 0;
  id v80 = [v72 accessibilityLabel];
  if (!v80) {
    id v80 = [v72 title];
  }
  uint64_t v81 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v83 = v82;

  char v84 = v64 & 1;
  uint64_t v85 = v147;
  sub_1000393DC(v84, v81, v83, &qword_1000A9808, &qword_1000A9800, &qword_1000A9840, (uint64_t)&unk_100085F60, v147);
  swift_bridgeObjectRelease();
  sub_100009ED4(v69, &qword_1000A9800);
  uint64_t v86 = v149;
  sub_100009F30(v85, v149, &qword_1000A9808);
  sub_100009E70(v86, v155, &qword_1000A9808);
  swift_storeEnumTagMultiPayload();
  sub_100057B9C();
  sub_100057CB4();
  _ConditionalContent<>.init(storage:)();
  sub_100009ED4(v86, &qword_1000A9808);
  uint64_t v87 = (uint64_t)v164;
LABEL_30:
  uint64_t v135 = v159;
  sub_100009E70(v63, v87, &qword_1000A9830);
  swift_storeEnumTagMultiPayload();
  uint64_t v136 = sub_10000A368(&qword_1000A9858, &qword_1000A9820);
  unint64_t v137 = sub_100057D90();
  *(void *)&long long v168 = v135;
  *((void *)&v168 + 1) = &type metadata for TFMenuStyle;
  uint64_t v169 = v136;
  unint64_t v170 = v137;
  swift_getOpaqueTypeConformance2();
  sub_100057DE4(&qword_1000A9868, &qword_1000A9830, (void (*)(void))sub_100057B9C, (void (*)(void))sub_100057CB4);
  _ConditionalContent<>.init(storage:)();
  return sub_100009ED4(v63, &qword_1000A9830);
}

uint64_t sub_100052568(uint64_t a1, uint64_t a2)
{
  swift_getKeyPath();
  uint64_t v3 = *(void **)a2;
  long long v12 = *(_OWORD *)(a2 + 8);
  uint64_t v10 = *(void *)(a2 + 24);
  __int16 v11 = *(_WORD *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  char v9 = *(unsigned char *)(a2 + 48);
  uint64_t v4 = swift_allocObject();
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 32) = v5;
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(v4 + 64) = *(unsigned char *)(a2 + 48);
  swift_bridgeObjectRetain();
  id v6 = v3;
  sub_10005819C((uint64_t)&v12);
  sub_100057E78((uint64_t)&v10);
  sub_100057EAC((uint64_t)&v8);
  sub_10000435C(&qword_1000A98C0);
  sub_10000435C(&qword_1000A98A8);
  sub_10000A368(&qword_1000A98C8, &qword_1000A98C0);
  sub_100057EEC();
  return ForEach<>.init(_:id:content:)();
}

uint64_t sub_1000526CC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v60 = a2;
  uint64_t v4 = type metadata accessor for TFToggle(0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (void *)((char *)v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  char v9 = (char *)v54 - v8;
  uint64_t v61 = sub_10000435C(&qword_1000A98D0);
  __chkstk_darwin(v61);
  uint64_t v64 = (uint64_t)v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = sub_10000435C(&qword_1000A98B0);
  uint64_t v57 = *(void *)(v62 - 8);
  __chkstk_darwin(v62);
  uint64_t v55 = (char *)v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000435C(&qword_1000A98D8);
  uint64_t v59 = *(void *)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v56 = (char *)v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v58 = (char *)v54 - v15;
  uint64_t v16 = sub_100053844(a1);
  uint64_t v18 = v17;
  int v20 = v19;
  id v21 = [a1 _subcomponents];
  uint64_t v63 = v16;
  if (v21)
  {
    char v22 = v21;
    sub_10000A3AC(0, &qword_1000A9878);
    uint64_t v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    v54[2] = v4;
    uint64_t v24 = v23;

    v54[0] = v54;
    uint64_t v26 = __chkstk_darwin(v25);
    v54[-2] = v24;
    v54[-1] = v2;
    __chkstk_darwin(v26);
    v54[-4] = a1;
    v54[-3] = v16;
    v54[3] = v18;
    v54[-2] = v18;
    LOBYTE(v54[-1]) = v20 & 1;
    sub_10000435C(&qword_1000A98E0);
    v54[1] = sub_100057C6C(&qword_1000A9850, (void (*)(uint64_t))type metadata accessor for TFToggle);
    sub_10005BDA8(&qword_1000A98E8, &qword_1000A98E0);
    uint64_t v27 = v55;
    Menu.init(content:label:)();
    swift_bridgeObjectRelease();
    char v65 = 0;
    State.init(wrappedValue:)();
    char v28 = v66;
    uint64_t v29 = v67;
    LOBYTE(v66) = 0;
    LOBYTE(v67) = v28;
    uint64_t v68 = (uint64_t)v29;
    uint64_t v30 = sub_10000A368(&qword_1000A98B8, &qword_1000A98B0);
    unint64_t v31 = sub_100057D90();
    uint64_t v32 = v56;
    uint64_t v33 = v62;
    View.menuStyle<A>(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v57 + 8))(v27, v33);
    uint64_t v35 = (uint64_t)v58;
    uint64_t v34 = v59;
    (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v58, v32, v12);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v64, v35, v12);
    swift_storeEnumTagMultiPayload();
    uint64_t v66 = v33;
    uint64_t v67 = &type metadata for TFMenuStyle;
    uint64_t v68 = v30;
    unint64_t v69 = v31;
    swift_getOpaqueTypeConformance2();
    _ConditionalContent<>.init(storage:)();
    swift_release();
    swift_release();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 8))(v35, v12);
  }
  else
  {
    LODWORD(v57) = v20;
    uint64_t v58 = v9;
    uint64_t v59 = v12;
    uint64_t v37 = v18;
    id v38 = [a1 systemImageName];
    if (v38)
    {
      uint64_t v39 = v38;
      uint64_t v40 = (int *)v4;
      uint64_t v56 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v42 = v41;
    }
    else
    {
      uint64_t v40 = (int *)v4;
      uint64_t v56 = 0;
      uint64_t v42 = 0;
    }
    id v43 = [a1 title];
    uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v46 = v45;

    uint64_t v47 = v63;
    swift_retain();
    swift_retain();
    static SymbolRenderingMode.hierarchical.getter();
    void *v7 = v56;
    v7[1] = v42;
    char v48 = (void *)((char *)v7 + v40[6]);
    *char v48 = v44;
    v48[1] = v46;
    *((unsigned char *)v7 + v40[7]) = 1;
    uint64_t v49 = (char *)v7 + v40[8];
    *(void *)uint64_t v49 = v47;
    *((void *)v49 + 1) = v37;
    v49[16] = v57 & 1;
    char v50 = (char *)v7 + v40[9];
    *(void *)char v50 = swift_getKeyPath();
    v50[8] = 0;
    uint64_t v51 = (uint64_t)v58;
    sub_10005A91C((uint64_t)v7, (uint64_t)v58, type metadata accessor for TFToggle);
    sub_10005C814(v51, v64, type metadata accessor for TFToggle);
    swift_storeEnumTagMultiPayload();
    uint64_t v52 = sub_10000A368(&qword_1000A98B8, &qword_1000A98B0);
    unint64_t v53 = sub_100057D90();
    uint64_t v66 = v62;
    uint64_t v67 = &type metadata for TFMenuStyle;
    uint64_t v68 = v52;
    unint64_t v69 = v53;
    swift_getOpaqueTypeConformance2();
    sub_100057C6C(&qword_1000A9850, (void (*)(uint64_t))type metadata accessor for TFToggle);
    _ConditionalContent<>.init(storage:)();
    swift_release();
    swift_release();
    return sub_10005C87C(v51, type metadata accessor for TFToggle);
  }
}

uint64_t sub_100052E48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_100052EF4(a1, a2);
  uint64_t v3 = (int *)sub_10000435C(&qword_1000A9880);
  uint64_t v4 = a2 + v3[9];
  State.init(wrappedValue:)();
  *(unsigned char *)uint64_t v4 = v8;
  *(void *)(v4 + 8) = v9;
  uint64_t v5 = a2 + v3[10];
  *(void *)uint64_t v5 = swift_getKeyPath();
  *(unsigned char *)(v5 + 8) = 0;
  uint64_t v6 = a2 + v3[11];
  uint64_t result = swift_getKeyPath();
  *(void *)uint64_t v6 = result;
  *(unsigned char *)(v6 + 8) = 0;
  return result;
}

uint64_t sub_100052EF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10000435C(&qword_1000A8FF8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (int *)type metadata accessor for TFLabel(0);
  __chkstk_darwin(v7);
  uint64_t v9 = (uint64_t *)((char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v39 = *(id *)a1;
  id v10 = [v39 systemImageName];
  uint64_t v38 = a2;
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v36 = v13;
    uint64_t v37 = v12;
  }
  else
  {
    uint64_t v36 = 0;
    uint64_t v37 = 0;
  }
  uint64_t v14 = *(void *)(a1 + 24);
  uint64_t v15 = *(unsigned __int8 *)(a1 + 32);
  int v16 = *(unsigned __int8 *)(a1 + 33);
  sub_10001F4F8(v14, v15, *(unsigned char *)(a1 + 33));
  uint64_t v17 = sub_100012E64(v14, v15 | (v16 << 8));
  char v19 = v18;
  sub_10001F568(v14, v15, v16);
  if ((v19 & 1) != 0
    || v17 > 2
    || (id v20 = [v39 systemImageName]) == 0)
  {
    id v23 = [v39 title];
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v22 = v24;
  }
  else
  {

    uint64_t v21 = 0;
    uint64_t v22 = 0;
  }
  if (*(void *)(a1 + 8))
  {
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v25 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(v6, 1, v25))
    {
      sub_100009ED4((uint64_t)v6, &qword_1000A8FF8);
      char v26 = 0;
    }
    else
    {
      UITextFormattingViewController.FormattingDescriptor._customComponentKeys.getter();
      sub_100009ED4((uint64_t)v6, &qword_1000A8FF8);
      id v27 = [v39 componentKey];
      char v26 = sub_1000125B8();

      swift_bridgeObjectRelease();
    }
    uint64_t v29 = v37;
    uint64_t v28 = v38;
    uint64_t v30 = v36;
    static SymbolRenderingMode.hierarchical.getter();
    uint64_t *v9 = v29;
    v9[1] = v30;
    unint64_t v31 = (uint64_t *)((char *)v9 + v7[6]);
    uint64_t *v31 = v21;
    v31[1] = v22;
    *((unsigned char *)v9 + v7[7]) = v26 & 1;
    uint64_t v32 = (char *)v9 + v7[8];
    *(void *)uint64_t v32 = swift_getKeyPath();
    v32[8] = 0;
    uint64_t v33 = (char *)v9 + v7[9];
    *(void *)uint64_t v33 = swift_getKeyPath();
    v33[8] = 0;
    return sub_10005A91C((uint64_t)v9, v28, type metadata accessor for TFLabel);
  }
  else
  {
    type metadata accessor for TextFormattingState();
    sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_100053290@<X0>(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v35 = a4;
  uint64_t v34 = a3;
  uint64_t v37 = a5;
  uint64_t v38 = type metadata accessor for AccessibilityChildBehavior();
  uint64_t v36 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TFAnimatedText(0);
  id v10 = (int *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000435C(&qword_1000A98F0);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000435C(&qword_1000A98F8);
  __chkstk_darwin(v16);
  char v18 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v19 = [*a1 title];
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v22 = v21;

  *(void *)uint64_t v12 = v20;
  *((void *)v12 + 1) = v22;
  uint64_t v23 = v34;
  *((void *)v12 + 2) = a2;
  *((void *)v12 + 3) = v23;
  LOBYTE(v20) = v35;
  v12[32] = v35;
  uint64_t v24 = (uint64_t *)&v12[v10[9]];
  *uint64_t v24 = swift_getKeyPath();
  sub_10000435C((uint64_t *)&unk_1000A8F70);
  swift_storeEnumTagMultiPayload();
  uint64_t v25 = (uint64_t *)&v12[v10[10]];
  *uint64_t v25 = swift_getKeyPath();
  sub_10000435C(&qword_1000AA3C0);
  swift_storeEnumTagMultiPayload();
  char v26 = &v12[v10[11]];
  *(void *)char v26 = swift_getKeyPath();
  v26[8] = 0;
  id v27 = &v12[v10[12]];
  *(void *)id v27 = swift_getKeyPath();
  v27[8] = 0;
  uint64_t v28 = &v12[v10[13]];
  *(void *)uint64_t v28 = swift_getKeyPath();
  v28[8] = 0;
  swift_bridgeObjectRetain();
  uint64_t v29 = static Alignment.center.getter();
  sub_1000352CC(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v15, 0.0, 1, INFINITY, 0, v29, v30, (uint64_t)type metadata accessor for TFAnimatedText, (void (*)(uint64_t, uint64_t, uint64_t))sub_10005C814, &qword_1000A98F0);
  sub_10005C87C((uint64_t)v12, type metadata accessor for TFAnimatedText);
  sub_100009E70((uint64_t)v15, (uint64_t)v18, &qword_1000A98F0);
  unint64_t v31 = &v18[*(int *)(v16 + 36)];
  char *v31 = 0;
  v31[1] = v20;
  v31[2] = 0;
  sub_100009ED4((uint64_t)v15, &qword_1000A98F0);
  static AccessibilityChildBehavior.ignore.getter();
  sub_100058340(&qword_1000A9900, &qword_1000A98F8, (void (*)(void))sub_1000583C8, (void (*)(void))sub_100058474);
  View.accessibilityElement(children:)();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v8, v38);
  return sub_100009ED4((uint64_t)v18, &qword_1000A98F8);
}

uint64_t sub_10005369C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UITextFormattingViewController.ChangeValue();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint64_t v7 = *(void (**)(void *, void))(v6
                                                 + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_didChangeValue);
    uint64_t v8 = *(void **)a1;
    swift_retain();
    *uint64_t v5 = [v8 componentKey];
    (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, enum case for UITextFormattingViewController.ChangeValue.customComponentSelected(_:), v2);
    v7(v5, 0);
    swift_release();
    return (*(uint64_t (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  }
  else
  {
    type metadata accessor for TextFormattingState();
    sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_100053844(void *a1)
{
  uint64_t v2 = v1;
  type metadata accessor for MainActor();
  uint64_t v4 = *(void **)v1;
  long long v21 = *(_OWORD *)(v1 + 8);
  uint64_t v19 = *(void *)(v1 + 24);
  __int16 v20 = *(_WORD *)(v1 + 32);
  uint64_t v17 = *(void *)(v1 + 40);
  char v18 = *(unsigned char *)(v1 + 48);
  id v5 = v4;
  sub_10005819C((uint64_t)&v21);
  sub_100057E78((uint64_t)&v19);
  sub_100057EAC((uint64_t)&v17);
  id v6 = a1;
  uint64_t v7 = static MainActor.shared.getter();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v7;
  *(void *)(v8 + 24) = &protocol witness table for MainActor;
  long long v9 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v8 + 32) = *(_OWORD *)v1;
  *(_OWORD *)(v8 + 48) = v9;
  *(_OWORD *)(v8 + 64) = *(_OWORD *)(v1 + 32);
  *(unsigned char *)(v8 + 80) = *(unsigned char *)(v1 + 48);
  *(void *)(v8 + 88) = v6;
  id v10 = v5;
  sub_10005819C((uint64_t)&v21);
  sub_100057E78((uint64_t)&v19);
  sub_100057EAC((uint64_t)&v17);
  id v11 = v6;
  uint64_t v12 = static MainActor.shared.getter();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v12;
  *(void *)(v13 + 24) = &protocol witness table for MainActor;
  long long v14 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v13 + 32) = *(_OWORD *)v2;
  *(_OWORD *)(v13 + 48) = v14;
  *(_OWORD *)(v13 + 64) = *(_OWORD *)(v2 + 32);
  *(unsigned char *)(v13 + 80) = *(unsigned char *)(v2 + 48);
  *(void *)(v13 + 88) = v11;
  Binding.init(get:set:)();
  return v16;
}

uint64_t sub_1000539D8(uint64_t a1, uint64_t a2)
{
  swift_getKeyPath();
  uint64_t v3 = *(void **)a2;
  long long v12 = *(_OWORD *)(a2 + 8);
  uint64_t v10 = *(void *)(a2 + 24);
  __int16 v11 = *(_WORD *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  char v9 = *(unsigned char *)(a2 + 48);
  uint64_t v4 = swift_allocObject();
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 32) = v5;
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(v4 + 64) = *(unsigned char *)(a2 + 48);
  swift_bridgeObjectRetain();
  id v6 = v3;
  sub_10005819C((uint64_t)&v12);
  sub_100057E78((uint64_t)&v10);
  sub_100057EAC((uint64_t)&v8);
  sub_10000435C(&qword_1000A98C0);
  sub_10000A368(&qword_1000A98C8, &qword_1000A98C0);
  return ForEach<>.init(_:id:content:)();
}

uint64_t sub_100053B30@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_10000435C(&qword_1000A98A8);
  __chkstk_darwin(v4);
  sub_1000526CC(*a1);
  sub_100057EEC();
  uint64_t result = AnyView.init<A>(_:)();
  *a2 = result;
  return result;
}

uint64_t sub_100053BE0@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v26 = a5;
  char v9 = (int *)type metadata accessor for TFToggle(0);
  __chkstk_darwin(v9);
  __int16 v11 = (uint64_t *)((char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v12 = [a1 systemImageName];
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v15;
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v16 = 0;
  }
  id v17 = [a1 title];
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v20 = v19;

  swift_retain();
  swift_retain();
  static SymbolRenderingMode.hierarchical.getter();
  *__int16 v11 = v14;
  v11[1] = v16;
  long long v21 = (uint64_t *)((char *)v11 + v9[6]);
  *long long v21 = v18;
  v21[1] = v20;
  *((unsigned char *)v11 + v9[7]) = 0;
  uint64_t v22 = (char *)v11 + v9[8];
  *(void *)uint64_t v22 = a2;
  *((void *)v22 + 1) = a3;
  v22[16] = a4 & 1;
  uint64_t v23 = (char *)v11 + v9[9];
  *(void *)uint64_t v23 = swift_getKeyPath();
  v23[8] = 0;
  return sub_10005A91C((uint64_t)v11, v26, type metadata accessor for TFToggle);
}

uint64_t sub_100053D74@<X0>(uint64_t a1@<X2>, void *a2@<X3>, unsigned char *a3@<X8>)
{
  uint64_t v6 = sub_10000435C(&qword_1000A8FF8);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a1 + 8))
  {
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v9 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9))
    {
      uint64_t result = sub_100009ED4((uint64_t)v8, &qword_1000A8FF8);
      char v11 = 0;
    }
    else
    {
      UITextFormattingViewController.FormattingDescriptor._customComponentKeys.getter();
      sub_100009ED4((uint64_t)v8, &qword_1000A8FF8);
      id v12 = [a2 componentKey];
      char v13 = sub_1000125B8();

      uint64_t result = swift_bridgeObjectRelease();
      char v11 = v13 & 1;
    }
    *a3 = v11;
  }
  else
  {
    type metadata accessor for TextFormattingState();
    sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_100053F58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v7 = type metadata accessor for UITextFormattingViewController.ChangeValue();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (uint64_t *)((char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = *(void *)(a4 + 8);
  if (v11)
  {
    id v12 = *(void (**)(void *, void))(v11
                                                  + OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_didChangeValue);
    swift_retain();
    *uint64_t v10 = [a5 componentKey];
    (*(void (**)(void *, void, uint64_t))(v8 + 104))(v10, enum case for UITextFormattingViewController.ChangeValue.customComponentSelected(_:), v7);
    v12(v10, 0);
    swift_release();
    return (*(uint64_t (**)(void *, uint64_t))(v8 + 8))(v10, v7);
  }
  else
  {
    type metadata accessor for TextFormattingState();
    sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_100054100@<X0>(uint64_t a1@<X8>)
{
  return sub_100050D7C(a1);
}

uint64_t sub_100054144@<X0>(unsigned char *a1@<X8>)
{
  sub_1000580A8();
  uint64_t result = EnvironmentValues.subscript.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_100054194()
{
  return EnvironmentValues.subscript.setter();
}

uint64_t sub_1000541E0()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_100054204(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000542C4(a1, a2, a3, a4, (void (*)(void))&type metadata accessor for ColorScheme, (uint64_t (*)(char *))&EnvironmentValues.colorScheme.setter);
}

uint64_t sub_100054230@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.accessibilityReduceMotion.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100054260@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.lineLimit.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_100054294()
{
  return EnvironmentValues.lineLimit.setter();
}

uint64_t sub_1000542C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t (*a6)(char *))
{
  a5(0);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v12 - v8;
  (*(void (**)(char *, uint64_t))(v10 + 16))((char *)&v12 - v8, a1);
  return a6(v9);
}

uint64_t sub_100054394(unint64_t a1, void *a2, SEL *a3)
{
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v19 = v4;
    uint64_t v5 = 4;
    while (1)
    {
      id v6 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v5);
      uint64_t v7 = v6;
      uint64_t v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1)) {
        break;
      }
      id v9 = [v6 *a3];
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v12 = v11;

      id v13 = [a2 *a3];
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v16 = v15;

      if (v10 == v14 && v12 == v16)
      {
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        char v17 = 1;
        goto LABEL_18;
      }
      char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v17 & 1) == 0)
      {
        ++v5;
        if (v8 != v19) {
          continue;
        }
      }
      goto LABEL_18;
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
  }
  char v17 = 0;
LABEL_18:
  swift_bridgeObjectRelease();
  return v17 & 1;
}

__n128 sub_10005454C@<Q0>(__n128 *a1@<X8>)
{
  type metadata accessor for TextFormattingState();
  sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
  uint64_t v2 = EnvironmentObject.init()();
  unint64_t v4 = v3;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v6 = swift_getKeyPath();
  uint64_t v7 = swift_getKeyPath();
  uint64_t v8 = swift_getKeyPath();
  sub_10000435C(&qword_1000A8780);
  State.init(wrappedValue:)();
  __n128 result = v10;
  a1->n128_u64[0] = v2;
  a1->n128_u64[1] = v4;
  a1[1].n128_u64[0] = KeyPath;
  a1[1].n128_u16[4] = 0;
  a1[2].n128_u64[0] = v6;
  a1[2].n128_u8[8] = 0;
  a1[3].n128_u64[0] = v7;
  a1[3].n128_u8[8] = 0;
  a1[4].n128_u64[0] = v8;
  a1[4].n128_u8[8] = 0;
  a1[5] = v10;
  a1[6].n128_u64[0] = v11;
  return result;
}

uint64_t sub_100054694@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for TextFormattingState();
  sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
  uint64_t v2 = EnvironmentObject.init()();
  uint64_t v4 = v3;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v6 = swift_getKeyPath();
  uint64_t v7 = swift_getKeyPath();
  uint64_t result = swift_getKeyPath();
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = KeyPath;
  *(_WORD *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = v6;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = v7;
  *(unsigned char *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = result;
  *(unsigned char *)(a1 + 80) = 0;
  return result;
}

uint64_t destroy for TFCustomControl(uint64_t a1)
{
  swift_release();
  sub_10001F568(*(void *)(a1 + 24), *(unsigned __int8 *)(a1 + 32), *(unsigned char *)(a1 + 33));
  uint64_t v2 = *(void *)(a1 + 40);
  char v3 = *(unsigned char *)(a1 + 48);

  return sub_10001F574(v2, v3);
}

uint64_t initializeWithCopy for TFCustomControl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  char v7 = *(unsigned char *)(a2 + 33);
  uint64_t v8 = *(unsigned __int8 *)(a2 + 32);
  id v9 = v4;
  swift_retain();
  sub_10001F4F8(v6, v8, v7);
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v8;
  *(unsigned char *)(a1 + 33) = v7;
  uint64_t v10 = *(void *)(v2 + 40);
  LOBYTE(v2) = *(unsigned char *)(v2 + 48);
  sub_10001F504(v10, v2);
  *(void *)(a1 + 40) = v10;
  *(unsigned char *)(a1 + 48) = v2;
  return a1;
}

uint64_t assignWithCopy for TFCustomControl(uint64_t a1, void **a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *a2;
  id v6 = v4;

  *(void *)(a1 + 8) = v2[1];
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = v2[2];
  uint64_t v7 = (uint64_t)v2[3];
  char v8 = *((unsigned char *)v2 + 33);
  unsigned __int8 v9 = *((unsigned char *)v2 + 32);
  sub_10001F4F8(v7, v9, v8);
  uint64_t v10 = *(void *)(a1 + 24);
  char v11 = *(unsigned char *)(a1 + 33);
  *(void *)(a1 + 24) = v7;
  uint64_t v12 = *(unsigned __int8 *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v9;
  *(unsigned char *)(a1 + 33) = v8;
  sub_10001F568(v10, v12, v11);
  uint64_t v13 = (uint64_t)v2[5];
  LOBYTE(v2) = *((unsigned char *)v2 + 48);
  sub_10001F504(v13, (char)v2);
  uint64_t v14 = *(void *)(a1 + 40);
  char v15 = *(unsigned char *)(a1 + 48);
  *(void *)(a1 + 40) = v13;
  *(unsigned char *)(a1 + 48) = (_BYTE)v2;
  sub_10001F574(v14, v15);
  return a1;
}

__n128 initializeWithTake for TFCustomControl(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for TFCustomControl(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  char v4 = *(unsigned char *)(a2 + 32);
  char v5 = *(unsigned char *)(a2 + 33);
  uint64_t v6 = *(void *)(a1 + 24);
  char v7 = *(unsigned char *)(a1 + 33);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v4;
  *(unsigned char *)(a1 + 33) = v5;
  sub_10001F568(v6, v8, v7);
  char v9 = *(unsigned char *)(a2 + 48);
  uint64_t v10 = *(void *)(a1 + 40);
  char v11 = *(unsigned char *)(a1 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = v9;
  sub_10001F574(v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for TFCustomControl(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 49)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TFCustomControl(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 49) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TFCustomControl()
{
  return &type metadata for TFCustomControl;
}

uint64_t destroy for TFHighlightControl(uint64_t a1, uint64_t a2)
{
  return sub_1000562B0(a1, a2, (void (*)(void, void))sub_10005C94C, (uint64_t (*)(uint64_t, uint64_t))sub_10005C94C);
}

uint64_t initializeWithCopy for TFHighlightControl(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  char v6 = *(unsigned char *)(a2 + 33);
  uint64_t v7 = *(unsigned __int8 *)(a2 + 32);
  swift_retain();
  sub_10001F4F8(v5, v7, v6);
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 33) = v6;
  uint64_t v8 = *(void *)(a2 + 40);
  char v9 = *(unsigned char *)(a2 + 48);
  sub_10001F504(v8, v9);
  *(void *)(a1 + 40) = v8;
  *(unsigned char *)(a1 + 48) = v9;
  uint64_t v10 = *(void *)(a2 + 56);
  char v11 = *(unsigned char *)(a2 + 64);
  sub_10001F504(v10, v11);
  *(void *)(a1 + 56) = v10;
  *(unsigned char *)(a1 + 64) = v11;
  uint64_t v12 = *(void *)(a2 + 72);
  char v13 = *(unsigned char *)(a2 + 80);
  sub_10001F504(v12, v13);
  *(void *)(a1 + 72) = v12;
  *(unsigned char *)(a1 + 80) = v13;
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  return a1;
}

uint64_t assignWithCopy for TFHighlightControl(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  char v5 = *(unsigned char *)(a2 + 33);
  unsigned __int8 v6 = *(unsigned char *)(a2 + 32);
  sub_10001F4F8(v4, v6, v5);
  uint64_t v7 = *(void *)(a1 + 24);
  char v8 = *(unsigned char *)(a1 + 33);
  *(void *)(a1 + 24) = v4;
  uint64_t v9 = *(unsigned __int8 *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 33) = v5;
  sub_10001F568(v7, v9, v8);
  uint64_t v10 = *(void *)(a2 + 40);
  char v11 = *(unsigned char *)(a2 + 48);
  sub_10001F504(v10, v11);
  uint64_t v12 = *(void *)(a1 + 40);
  char v13 = *(unsigned char *)(a1 + 48);
  *(void *)(a1 + 40) = v10;
  *(unsigned char *)(a1 + 48) = v11;
  sub_10001F574(v12, v13);
  uint64_t v14 = *(void *)(a2 + 56);
  char v15 = *(unsigned char *)(a2 + 64);
  sub_10001F504(v14, v15);
  uint64_t v16 = *(void *)(a1 + 56);
  char v17 = *(unsigned char *)(a1 + 64);
  *(void *)(a1 + 56) = v14;
  *(unsigned char *)(a1 + 64) = v15;
  sub_10001F574(v16, v17);
  uint64_t v18 = *(void *)(a2 + 72);
  char v19 = *(unsigned char *)(a2 + 80);
  sub_10001F504(v18, v19);
  uint64_t v20 = *(void *)(a1 + 72);
  char v21 = *(unsigned char *)(a1 + 80);
  *(void *)(a1 + 72) = v18;
  *(unsigned char *)(a1 + 80) = v19;
  sub_10001F574(v20, v21);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  return a1;
}

__n128 initializeWithTake for TFHighlightControl(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t assignWithTake for TFHighlightControl(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  char v4 = *(unsigned char *)(a2 + 32);
  char v5 = *(unsigned char *)(a2 + 33);
  uint64_t v6 = *(void *)(a1 + 24);
  char v7 = *(unsigned char *)(a1 + 33);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v4;
  *(unsigned char *)(a1 + 33) = v5;
  sub_10001F568(v6, v8, v7);
  char v9 = *(unsigned char *)(a2 + 48);
  uint64_t v10 = *(void *)(a1 + 40);
  char v11 = *(unsigned char *)(a1 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = v9;
  sub_10001F574(v10, v11);
  char v12 = *(unsigned char *)(a2 + 64);
  uint64_t v13 = *(void *)(a1 + 56);
  char v14 = *(unsigned char *)(a1 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = v12;
  sub_10001F574(v13, v14);
  char v15 = *(unsigned char *)(a2 + 80);
  uint64_t v16 = *(void *)(a1 + 72);
  char v17 = *(unsigned char *)(a1 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = v15;
  sub_10001F574(v16, v17);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  return a1;
}

uint64_t getEnumTagSinglePayload for TFHighlightControl(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 96)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TFHighlightControl(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 96) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TFHighlightControl()
{
  return &type metadata for TFHighlightControl;
}

__n128 initializeWithTake for TFBlockquoteControl(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 10) = *(_OWORD *)(a2 + 10);
  *(__n128 *)a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for TFBlockquoteControl()
{
  return &type metadata for TFBlockquoteControl;
}

ValueMetadata *type metadata accessor for TFQuoteLevelControl()
{
  return &type metadata for TFQuoteLevelControl;
}

uint64_t sub_100054EB4(uint64_t a1, uint64_t *a2, int *a3)
{
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    uint64_t v8 = a2[2];
    *(void *)(a1 + 8) = a2[1];
    char v9 = *((unsigned char *)a2 + 25);
    uint64_t v10 = *((unsigned __int8 *)a2 + 24);
    swift_retain();
    sub_10001F4F8(v8, v10, v9);
    *(void *)(a1 + 16) = v8;
    *(unsigned char *)(a1 + 24) = v10;
    *(unsigned char *)(a1 + 25) = v9;
    uint64_t v11 = a2[4];
    char v12 = *((unsigned char *)a2 + 40);
    sub_10001F504(v11, v12);
    *(void *)(a1 + 32) = v11;
    *(unsigned char *)(a1 + 40) = v12;
    uint64_t v13 = a2[6];
    char v14 = *((unsigned char *)a2 + 56);
    sub_10001F504(v13, v14);
    *(void *)(a1 + 48) = v13;
    *(unsigned char *)(a1 + 56) = v14;
    uint64_t v15 = a3[8];
    uint64_t v16 = (void *)(a1 + v15);
    char v17 = (uint64_t *)((char *)a2 + v15);
    sub_10000435C(&qword_1000A8F30);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v18 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v19 = *(void *)(v18 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
      {
        uint64_t v20 = sub_10000435C(&qword_1000A8F38);
        memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v19 + 16))(v16, v17, v18);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      }
    }
    else
    {
      *uint64_t v16 = *v17;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v21 = a3[10];
    *(void *)(a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    *(void *)(a1 + v21) = *(uint64_t *)((char *)a2 + v21);
  }
  return a1;
}

uint64_t sub_100055100(uint64_t a1, uint64_t a2)
{
  swift_release();
  sub_10001F568(*(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 24), *(unsigned char *)(a1 + 25));
  sub_10001F574(*(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  sub_10001F574(*(void *)(a1 + 48), *(unsigned char *)(a1 + 56));
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  sub_10000435C(&qword_1000A8F30);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v8 = *(void *)(v5 - 8);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v4, 1, v5);
    if (!result)
    {
      char v7 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
      return v7(v4, v5);
    }
  }
  else
  {
    return swift_release();
  }
  return result;
}

uint64_t sub_100055250(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 16);
  char v8 = *(unsigned char *)(a2 + 25);
  uint64_t v9 = *(unsigned __int8 *)(a2 + 24);
  swift_retain();
  sub_10001F4F8(v7, v9, v8);
  *(void *)(a1 + 16) = v7;
  *(unsigned char *)(a1 + 24) = v9;
  *(unsigned char *)(a1 + 25) = v8;
  uint64_t v10 = *(void *)(a2 + 32);
  char v11 = *(unsigned char *)(a2 + 40);
  sub_10001F504(v10, v11);
  *(void *)(a1 + 32) = v10;
  *(unsigned char *)(a1 + 40) = v11;
  uint64_t v12 = *(void *)(a2 + 48);
  char v13 = *(unsigned char *)(a2 + 56);
  sub_10001F504(v12, v13);
  *(void *)(a1 + 48) = v12;
  *(unsigned char *)(a1 + 56) = v13;
  uint64_t v14 = a3[8];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  sub_10000435C(&qword_1000A8F30);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v17 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      uint64_t v19 = sub_10000435C(&qword_1000A8F38);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(v18 + 16))(v15, v16, v17);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
  }
  else
  {
    void *v15 = *v16;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v20 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(void *)(a1 + v20) = *(void *)(a2 + v20);
  return a1;
}

uint64_t sub_100055450(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  char v7 = *(unsigned char *)(a2 + 25);
  unsigned __int8 v8 = *(unsigned char *)(a2 + 24);
  sub_10001F4F8(v6, v8, v7);
  uint64_t v9 = *(void *)(a1 + 16);
  char v10 = *(unsigned char *)(a1 + 25);
  *(void *)(a1 + 16) = v6;
  uint64_t v11 = *(unsigned __int8 *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v8;
  *(unsigned char *)(a1 + 25) = v7;
  sub_10001F568(v9, v11, v10);
  uint64_t v12 = *(void *)(a2 + 32);
  char v13 = *(unsigned char *)(a2 + 40);
  sub_10001F504(v12, v13);
  uint64_t v14 = *(void *)(a1 + 32);
  char v15 = *(unsigned char *)(a1 + 40);
  *(void *)(a1 + 32) = v12;
  *(unsigned char *)(a1 + 40) = v13;
  sub_10001F574(v14, v15);
  uint64_t v16 = *(void *)(a2 + 48);
  char v17 = *(unsigned char *)(a2 + 56);
  sub_10001F504(v16, v17);
  uint64_t v18 = *(void *)(a1 + 48);
  char v19 = *(unsigned char *)(a1 + 56);
  *(void *)(a1 + 48) = v16;
  *(unsigned char *)(a1 + 56) = v17;
  sub_10001F574(v18, v19);
  if (a1 != a2)
  {
    uint64_t v20 = a3[8];
    uint64_t v21 = (void *)(a1 + v20);
    uint64_t v22 = (void *)(a2 + v20);
    sub_100009ED4(a1 + v20, &qword_1000A8F30);
    sub_10000435C(&qword_1000A8F30);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v23 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v24 = *(void *)(v23 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
      {
        uint64_t v25 = sub_10000435C(&qword_1000A8F38);
        memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v24 + 16))(v21, v22, v23);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      }
    }
    else
    {
      *uint64_t v21 = *v22;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_1000556A8(uint64_t a1, long long *a2, int *a3)
{
  long long v6 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_WORD *)(a1 + 24) = *((_WORD *)a2 + 12);
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
  uint64_t v7 = a3[8];
  unsigned __int8 v8 = (void *)(a1 + v7);
  uint64_t v9 = (char *)a2 + v7;
  *(_OWORD *)a1 = v6;
  uint64_t v10 = sub_10000435C(&qword_1000A8F30);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v12 = *(void *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11))
    {
      uint64_t v13 = sub_10000435C(&qword_1000A8F38);
      memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v12 + 32))(v8, v9, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v8, 0, 1, v11);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
  }
  uint64_t v14 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  *(void *)(a1 + v14) = *(void *)((char *)a2 + v14);
  return a1;
}

uint64_t sub_10005587C(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  char v6 = *(unsigned char *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 25);
  uint64_t v8 = *(void *)(a1 + 16);
  char v9 = *(unsigned char *)(a1 + 25);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 25) = v7;
  sub_10001F568(v8, v10, v9);
  char v11 = *(unsigned char *)(a2 + 40);
  uint64_t v12 = *(void *)(a1 + 32);
  char v13 = *(unsigned char *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = v11;
  sub_10001F574(v12, v13);
  char v14 = *(unsigned char *)(a2 + 56);
  uint64_t v15 = *(void *)(a1 + 48);
  char v16 = *(unsigned char *)(a1 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = v14;
  sub_10001F574(v15, v16);
  if (a1 != a2)
  {
    uint64_t v17 = a3[8];
    uint64_t v18 = (void *)(a1 + v17);
    char v19 = (const void *)(a2 + v17);
    sub_100009ED4(a1 + v17, &qword_1000A8F30);
    uint64_t v20 = sub_10000435C(&qword_1000A8F30);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v21 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v22 = *(void *)(v21 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48))(v19, 1, v21))
      {
        uint64_t v23 = sub_10000435C(&qword_1000A8F38);
        memcpy(v18, v19, *(void *)(*(void *)(v23 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v22 + 32))(v18, v19, v21);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v18, 0, 1, v21);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64));
    }
  }
  uint64_t v24 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(void *)(a1 + v24) = *(void *)(a2 + v24);
  return a1;
}

uint64_t sub_100055AA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100055AB4);
}

uint64_t sub_100055AB4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = sub_10000435C(&qword_1000A9710);
    uint64_t v10 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = (char *)a1 + *(int *)(a3 + 32);
    return v10(v12, a2, v11);
  }
}

uint64_t sub_100055B74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100055B88);
}

void *sub_100055B88(void *result, uint64_t a2, int a3, uint64_t a4)
{
  int v5 = result;
  if (a3 == 2147483646)
  {
    _OWORD *result = a2;
  }
  else
  {
    uint64_t v7 = sub_10000435C(&qword_1000A9710);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 32);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for TFTextColorControl()
{
  uint64_t result = qword_1000A9770;
  if (!qword_1000A9770) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100055C80()
{
  sub_100055D3C();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_100055D3C()
{
  if (!qword_1000A9780)
  {
    sub_100003F9C(&qword_1000A8F38);
    unint64_t v0 = type metadata accessor for Environment.Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1000A9780);
    }
  }
}

ValueMetadata *type metadata accessor for TFListStylesControl()
{
  return &type metadata for TFListStylesControl;
}

ValueMetadata *type metadata accessor for TFLineHeightControl()
{
  return &type metadata for TFLineHeightControl;
}

uint64_t _s19FontPickerUIService19TFBlockquoteControlVwxx_0(uint64_t a1)
{
  swift_release();
  uint64_t v2 = *(void *)(a1 + 16);
  char v3 = *(unsigned char *)(a1 + 25);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 24);

  return sub_10001F568(v2, v4, v3);
}

uint64_t _s19FontPickerUIService19TFBlockquoteControlVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 16);
  char v5 = *(unsigned char *)(a2 + 25);
  uint64_t v6 = *(unsigned __int8 *)(a2 + 24);
  swift_retain();
  sub_10001F4F8(v4, v6, v5);
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 25) = v5;
  return a1;
}

uint64_t _s19FontPickerUIService19TFBlockquoteControlVwca_0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  char v5 = *(unsigned char *)(a2 + 25);
  uint64_t v6 = *(unsigned __int8 *)(a2 + 24);
  sub_10001F4F8(v4, v6, v5);
  uint64_t v7 = *(void *)(a1 + 16);
  char v8 = *(unsigned char *)(a1 + 25);
  *(void *)(a1 + 16) = v4;
  uint64_t v9 = *(unsigned __int8 *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 25) = v5;
  sub_10001F568(v7, v9, v8);
  return a1;
}

uint64_t _s19FontPickerUIService19TFBlockquoteControlVwta_0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  char v4 = *(unsigned char *)(a2 + 24);
  char v5 = *(unsigned char *)(a2 + 25);
  uint64_t v6 = *(void *)(a1 + 16);
  char v7 = *(unsigned char *)(a1 + 25);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 25) = v5;
  sub_10001F568(v6, v8, v7);
  return a1;
}

uint64_t _s19FontPickerUIService19TFBlockquoteControlVwet_0(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 26)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t _s19FontPickerUIService19TFBlockquoteControlVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_WORD *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 26) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 26) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TFTextIndentationControl()
{
  return &type metadata for TFTextIndentationControl;
}

uint64_t destroy for TFTextAlignmentControl(uint64_t a1)
{
  swift_release();
  uint64_t v2 = *(void *)(a1 + 24);
  char v3 = *(unsigned char *)(a1 + 33);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 32);

  return sub_10001F568(v2, v4, v3);
}

uint64_t initializeWithCopy for TFTextAlignmentControl(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  char v5 = *(unsigned char *)(a2 + 33);
  uint64_t v6 = *(unsigned __int8 *)(a2 + 32);
  swift_retain();
  sub_10001F4F8(v4, v6, v5);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 33) = v5;
  return a1;
}

uint64_t assignWithCopy for TFTextAlignmentControl(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  char v5 = *(unsigned char *)(a2 + 33);
  uint64_t v6 = *(unsigned __int8 *)(a2 + 32);
  sub_10001F4F8(v4, v6, v5);
  uint64_t v7 = *(void *)(a1 + 24);
  char v8 = *(unsigned char *)(a1 + 33);
  *(void *)(a1 + 24) = v4;
  uint64_t v9 = *(unsigned __int8 *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 33) = v5;
  sub_10001F568(v7, v9, v8);
  return a1;
}

__n128 initializeWithTake for TFTextAlignmentControl(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for TFTextAlignmentControl(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  char v4 = *(unsigned char *)(a2 + 32);
  char v5 = *(unsigned char *)(a2 + 33);
  uint64_t v6 = *(void *)(a1 + 24);
  char v7 = *(unsigned char *)(a1 + 33);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v4;
  *(unsigned char *)(a1 + 33) = v5;
  sub_10001F568(v6, v8, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for TFTextAlignmentControl(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 34)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TFTextAlignmentControl(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(_WORD *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 34) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 34) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TFTextAlignmentControl()
{
  return &type metadata for TFTextAlignmentControl;
}

uint64_t destroy for TFFontSizeControl(uint64_t a1, uint64_t a2)
{
  return sub_1000562B0(a1, a2, (void (*)(void, void))sub_10001F574, (uint64_t (*)(uint64_t, uint64_t))sub_10005C94C);
}

uint64_t sub_1000562B0(uint64_t a1, uint64_t a2, void (*a3)(void, void), uint64_t (*a4)(uint64_t, uint64_t))
{
  swift_release();
  sub_10001F568(*(void *)(a1 + 24), *(unsigned __int8 *)(a1 + 32), *(unsigned char *)(a1 + 33));
  sub_10001F574(*(void *)(a1 + 40), *(unsigned char *)(a1 + 48));
  a3(*(void *)(a1 + 56), *(unsigned __int8 *)(a1 + 64));
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v7 = *(unsigned __int8 *)(a1 + 80);

  return a4(v6, v7);
}

uint64_t initializeWithCopy for TFFontSizeControl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  char v6 = *(unsigned char *)(a2 + 33);
  uint64_t v7 = *(unsigned __int8 *)(a2 + 32);
  swift_retain();
  sub_10001F4F8(v5, v7, v6);
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 33) = v6;
  uint64_t v8 = *(void *)(v2 + 40);
  char v9 = *(unsigned char *)(v2 + 48);
  sub_10001F504(v8, v9);
  *(void *)(a1 + 40) = v8;
  *(unsigned char *)(a1 + 48) = v9;
  uint64_t v10 = *(void *)(v2 + 56);
  char v11 = *(unsigned char *)(v2 + 64);
  sub_10001F504(v10, v11);
  *(void *)(a1 + 56) = v10;
  *(unsigned char *)(a1 + 64) = v11;
  uint64_t v12 = *(void *)(v2 + 72);
  LOBYTE(v2) = *(unsigned char *)(v2 + 80);
  sub_10001F504(v12, v2);
  *(void *)(a1 + 72) = v12;
  *(unsigned char *)(a1 + 80) = v2;
  return a1;
}

uint64_t assignWithCopy for TFFontSizeControl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(v2 + 16);
  uint64_t v4 = *(void *)(v2 + 24);
  char v5 = *(unsigned char *)(v2 + 33);
  unsigned __int8 v6 = *(unsigned char *)(v2 + 32);
  sub_10001F4F8(v4, v6, v5);
  uint64_t v7 = *(void *)(a1 + 24);
  char v8 = *(unsigned char *)(a1 + 33);
  *(void *)(a1 + 24) = v4;
  uint64_t v9 = *(unsigned __int8 *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 33) = v5;
  sub_10001F568(v7, v9, v8);
  uint64_t v10 = *(void *)(v2 + 40);
  char v11 = *(unsigned char *)(v2 + 48);
  sub_10001F504(v10, v11);
  uint64_t v12 = *(void *)(a1 + 40);
  char v13 = *(unsigned char *)(a1 + 48);
  *(void *)(a1 + 40) = v10;
  *(unsigned char *)(a1 + 48) = v11;
  sub_10001F574(v12, v13);
  uint64_t v14 = *(void *)(v2 + 56);
  char v15 = *(unsigned char *)(v2 + 64);
  sub_10001F504(v14, v15);
  uint64_t v16 = *(void *)(a1 + 56);
  char v17 = *(unsigned char *)(a1 + 64);
  *(void *)(a1 + 56) = v14;
  *(unsigned char *)(a1 + 64) = v15;
  sub_10001F574(v16, v17);
  uint64_t v18 = *(void *)(v2 + 72);
  LOBYTE(v2) = *(unsigned char *)(v2 + 80);
  sub_10001F504(v18, v2);
  uint64_t v19 = *(void *)(a1 + 72);
  char v20 = *(unsigned char *)(a1 + 80);
  *(void *)(a1 + 72) = v18;
  *(unsigned char *)(a1 + 80) = v2;
  sub_10001F574(v19, v20);
  return a1;
}

uint64_t assignWithTake for TFFontSizeControl(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  char v4 = *(unsigned char *)(a2 + 32);
  char v5 = *(unsigned char *)(a2 + 33);
  uint64_t v6 = *(void *)(a1 + 24);
  char v7 = *(unsigned char *)(a1 + 33);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v4;
  *(unsigned char *)(a1 + 33) = v5;
  sub_10001F568(v6, v8, v7);
  char v9 = *(unsigned char *)(a2 + 48);
  uint64_t v10 = *(void *)(a1 + 40);
  char v11 = *(unsigned char *)(a1 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = v9;
  sub_10001F574(v10, v11);
  char v12 = *(unsigned char *)(a2 + 64);
  uint64_t v13 = *(void *)(a1 + 56);
  char v14 = *(unsigned char *)(a1 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = v12;
  sub_10001F574(v13, v14);
  char v15 = *(unsigned char *)(a2 + 80);
  uint64_t v16 = *(void *)(a1 + 72);
  char v17 = *(unsigned char *)(a1 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = v15;
  sub_10001F574(v16, v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for TFFontSizeControl(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 81)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TFFontSizeControl(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 80) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 81) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 81) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TFFontSizeControl()
{
  return &type metadata for TFFontSizeControl;
}

uint64_t destroy for TFFontPickerControl(uint64_t a1)
{
  swift_release();
  sub_10001F568(*(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 24), *(unsigned char *)(a1 + 25));
  uint64_t v2 = *(void *)(a1 + 32);
  char v3 = *(unsigned char *)(a1 + 40);

  return sub_10001F574(v2, v3);
}

uint64_t initializeWithCopy for TFFontPickerControl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 25);
  uint64_t v7 = *(unsigned __int8 *)(a2 + 24);
  swift_retain();
  sub_10001F4F8(v5, v7, v6);
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 25) = v6;
  uint64_t v8 = *(void *)(v2 + 32);
  LOBYTE(v2) = *(unsigned char *)(v2 + 40);
  sub_10001F504(v8, v2);
  *(void *)(a1 + 32) = v8;
  *(unsigned char *)(a1 + 40) = v2;
  return a1;
}

uint64_t assignWithCopy for TFFontPickerControl(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  *(void *)a1 = *a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = v2[1];
  uint64_t v4 = v2[2];
  char v5 = *((unsigned char *)v2 + 25);
  unsigned __int8 v6 = *((unsigned char *)v2 + 24);
  sub_10001F4F8(v4, v6, v5);
  uint64_t v7 = *(void *)(a1 + 16);
  char v8 = *(unsigned char *)(a1 + 25);
  *(void *)(a1 + 16) = v4;
  uint64_t v9 = *(unsigned __int8 *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 25) = v5;
  sub_10001F568(v7, v9, v8);
  uint64_t v10 = v2[4];
  LOBYTE(v2) = *((unsigned char *)v2 + 40);
  sub_10001F504(v10, (char)v2);
  uint64_t v11 = *(void *)(a1 + 32);
  char v12 = *(unsigned char *)(a1 + 40);
  *(void *)(a1 + 32) = v10;
  *(unsigned char *)(a1 + 40) = (_BYTE)v2;
  sub_10001F574(v11, v12);
  return a1;
}

__n128 initializeWithTake for TFFontPickerControl(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for TFFontPickerControl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  char v4 = *(unsigned char *)(a2 + 24);
  char v5 = *(unsigned char *)(a2 + 25);
  uint64_t v6 = *(void *)(a1 + 16);
  char v7 = *(unsigned char *)(a1 + 25);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 25) = v5;
  sub_10001F568(v6, v8, v7);
  char v9 = *(unsigned char *)(a2 + 40);
  uint64_t v10 = *(void *)(a1 + 32);
  char v11 = *(unsigned char *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = v9;
  sub_10001F574(v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for TFFontPickerControl(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 41)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TFFontPickerControl(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TFFontPickerControl()
{
  return &type metadata for TFFontPickerControl;
}

uint64_t destroy for TFFontAttributesControl(uint64_t a1)
{
  swift_release();
  sub_10001F568(*(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 24), *(unsigned char *)(a1 + 25));
  sub_10001F574(*(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  uint64_t v2 = *(void *)(a1 + 48);
  char v3 = *(unsigned char *)(a1 + 56);

  return sub_10001F574(v2, v3);
}

uint64_t initializeWithCopy for TFFontAttributesControl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 25);
  uint64_t v7 = *(unsigned __int8 *)(a2 + 24);
  swift_retain();
  sub_10001F4F8(v5, v7, v6);
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 25) = v6;
  uint64_t v8 = *(void *)(v2 + 32);
  char v9 = *(unsigned char *)(v2 + 40);
  sub_10001F504(v8, v9);
  *(void *)(a1 + 32) = v8;
  *(unsigned char *)(a1 + 40) = v9;
  uint64_t v10 = *(void *)(v2 + 48);
  LOBYTE(v2) = *(unsigned char *)(v2 + 56);
  sub_10001F504(v10, v2);
  *(void *)(a1 + 48) = v10;
  *(unsigned char *)(a1 + 56) = v2;
  return a1;
}

uint64_t assignWithCopy for TFFontAttributesControl(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  *(void *)a1 = *a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = v2[1];
  uint64_t v4 = v2[2];
  char v5 = *((unsigned char *)v2 + 25);
  unsigned __int8 v6 = *((unsigned char *)v2 + 24);
  sub_10001F4F8(v4, v6, v5);
  uint64_t v7 = *(void *)(a1 + 16);
  char v8 = *(unsigned char *)(a1 + 25);
  *(void *)(a1 + 16) = v4;
  uint64_t v9 = *(unsigned __int8 *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 25) = v5;
  sub_10001F568(v7, v9, v8);
  uint64_t v10 = v2[4];
  char v11 = *((unsigned char *)v2 + 40);
  sub_10001F504(v10, v11);
  uint64_t v12 = *(void *)(a1 + 32);
  char v13 = *(unsigned char *)(a1 + 40);
  *(void *)(a1 + 32) = v10;
  *(unsigned char *)(a1 + 40) = v11;
  sub_10001F574(v12, v13);
  uint64_t v14 = v2[6];
  LOBYTE(v2) = *((unsigned char *)v2 + 56);
  sub_10001F504(v14, (char)v2);
  uint64_t v15 = *(void *)(a1 + 48);
  char v16 = *(unsigned char *)(a1 + 56);
  *(void *)(a1 + 48) = v14;
  *(unsigned char *)(a1 + 56) = (_BYTE)v2;
  sub_10001F574(v15, v16);
  return a1;
}

__n128 initializeWithTake for TFFontAttributesControl(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for TFFontAttributesControl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  char v4 = *(unsigned char *)(a2 + 24);
  char v5 = *(unsigned char *)(a2 + 25);
  uint64_t v6 = *(void *)(a1 + 16);
  char v7 = *(unsigned char *)(a1 + 25);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 25) = v5;
  sub_10001F568(v6, v8, v7);
  char v9 = *(unsigned char *)(a2 + 40);
  uint64_t v10 = *(void *)(a1 + 32);
  char v11 = *(unsigned char *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = v9;
  sub_10001F574(v10, v11);
  char v12 = *(unsigned char *)(a2 + 56);
  uint64_t v13 = *(void *)(a1 + 48);
  char v14 = *(unsigned char *)(a1 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = v12;
  sub_10001F574(v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for TFFontAttributesControl(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 57)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TFFontAttributesControl(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 56) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 57) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 57) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TFFontAttributesControl()
{
  return &type metadata for TFFontAttributesControl;
}

uint64_t destroy for TFFormattingStylesControl(uint64_t a1)
{
  swift_release();
  sub_10001F568(*(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 24), *(unsigned char *)(a1 + 25));
  sub_10001F574(*(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  sub_10001F574(*(void *)(a1 + 48), *(unsigned char *)(a1 + 56));
  sub_10001F574(*(void *)(a1 + 64), *(unsigned char *)(a1 + 72));
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for TFFormattingStylesControl(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 25);
  uint64_t v7 = *(unsigned __int8 *)(a2 + 24);
  swift_retain();
  sub_10001F4F8(v5, v7, v6);
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 25) = v6;
  uint64_t v8 = *(void *)(a2 + 32);
  char v9 = *(unsigned char *)(a2 + 40);
  sub_10001F504(v8, v9);
  *(void *)(a1 + 32) = v8;
  *(unsigned char *)(a1 + 40) = v9;
  uint64_t v10 = *(void *)(a2 + 48);
  char v11 = *(unsigned char *)(a2 + 56);
  sub_10001F504(v10, v11);
  *(void *)(a1 + 48) = v10;
  *(unsigned char *)(a1 + 56) = v11;
  uint64_t v12 = *(void *)(a2 + 64);
  char v13 = *(unsigned char *)(a2 + 72);
  sub_10001F504(v12, v13);
  *(void *)(a1 + 64) = v12;
  *(unsigned char *)(a1 + 72) = v13;
  uint64_t v14 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v14;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for TFFormattingStylesControl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  char v5 = *(unsigned char *)(a2 + 25);
  unsigned __int8 v6 = *(unsigned char *)(a2 + 24);
  sub_10001F4F8(v4, v6, v5);
  uint64_t v7 = *(void *)(a1 + 16);
  char v8 = *(unsigned char *)(a1 + 25);
  *(void *)(a1 + 16) = v4;
  uint64_t v9 = *(unsigned __int8 *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 25) = v5;
  sub_10001F568(v7, v9, v8);
  uint64_t v10 = *(void *)(a2 + 32);
  char v11 = *(unsigned char *)(a2 + 40);
  sub_10001F504(v10, v11);
  uint64_t v12 = *(void *)(a1 + 32);
  char v13 = *(unsigned char *)(a1 + 40);
  *(void *)(a1 + 32) = v10;
  *(unsigned char *)(a1 + 40) = v11;
  sub_10001F574(v12, v13);
  uint64_t v14 = *(void *)(a2 + 48);
  char v15 = *(unsigned char *)(a2 + 56);
  sub_10001F504(v14, v15);
  uint64_t v16 = *(void *)(a1 + 48);
  char v17 = *(unsigned char *)(a1 + 56);
  *(void *)(a1 + 48) = v14;
  *(unsigned char *)(a1 + 56) = v15;
  sub_10001F574(v16, v17);
  uint64_t v18 = *(void *)(a2 + 64);
  char v19 = *(unsigned char *)(a2 + 72);
  sub_10001F504(v18, v19);
  uint64_t v20 = *(void *)(a1 + 64);
  char v21 = *(unsigned char *)(a1 + 72);
  *(void *)(a1 + 64) = v18;
  *(unsigned char *)(a1 + 72) = v19;
  sub_10001F574(v20, v21);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for TFFormattingStylesControl(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for TFFormattingStylesControl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  char v4 = *(unsigned char *)(a2 + 24);
  char v5 = *(unsigned char *)(a2 + 25);
  uint64_t v6 = *(void *)(a1 + 16);
  char v7 = *(unsigned char *)(a1 + 25);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 25) = v5;
  sub_10001F568(v6, v8, v7);
  char v9 = *(unsigned char *)(a2 + 40);
  uint64_t v10 = *(void *)(a1 + 32);
  char v11 = *(unsigned char *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = v9;
  sub_10001F574(v10, v11);
  char v12 = *(unsigned char *)(a2 + 56);
  uint64_t v13 = *(void *)(a1 + 48);
  char v14 = *(unsigned char *)(a1 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = v12;
  sub_10001F574(v13, v14);
  char v15 = *(unsigned char *)(a2 + 72);
  uint64_t v16 = *(void *)(a1 + 64);
  char v17 = *(unsigned char *)(a1 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = v15;
  sub_10001F574(v16, v17);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for TFFormattingStylesControl(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 104)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TFFormattingStylesControl(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 104) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TFFormattingStylesControl()
{
  return &type metadata for TFFormattingStylesControl;
}

uint64_t sub_10005715C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100057178()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100057194()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000571B0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000571CC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000571E8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100057204()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100057220()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10005723C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100057258()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100057274()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100057290()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000572AC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000572D0@<X0>(unsigned char *a1@<X8>)
{
  sub_100057B40();
  uint64_t result = EnvironmentValues.subscript.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_100057320()
{
  return EnvironmentValues.subscript.setter();
}

uint64_t sub_10005736C(uint64_t a1)
{
  if (a1)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    if (v5 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v1 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v1 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (v1)
    {
      char v2 = 0;
    }
    else
    {
      swift_getKeyPath();
      swift_getKeyPath();
      swift_retain();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      swift_release();
      char v2 = v4 ^ 1;
    }
    return v2 & 1;
  }
  else
  {
    type metadata accessor for TextFormattingState();
    sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000574F8(int a1, uint64_t a2)
{
  int v27 = a1;
  uint64_t v3 = sub_10000435C(&qword_1000A8FF8);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = &v26[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = __chkstk_darwin(v4);
  char v9 = &v26[-v8];
  uint64_t v10 = __chkstk_darwin(v7);
  char v12 = &v26[-v11];
  __chkstk_darwin(v10);
  char v14 = &v26[-v13];
  if (!a2)
  {
    type metadata accessor for TextFormattingState();
    sub_100057C6C((unint64_t *)&unk_1000A9010, (void (*)(uint64_t))type metadata accessor for TextFormattingState);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
    return result;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v15 = type metadata accessor for UITextFormattingViewController.FormattingDescriptor();
  uint64_t v16 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
  if (v16(v14, 1, v15))
  {
    sub_100009ED4((uint64_t)v14, &qword_1000A8FF8);
    swift_release();
  }
  else
  {
    UITextFormattingViewController.FormattingDescriptor.textAlignments.getter();
    sub_100009ED4((uint64_t)v14, &qword_1000A8FF8);
    id v17 = UITextFormattingViewControllerTextAlignmentLeft;
    char v18 = sub_1000125B8();
    swift_release();

    swift_bridgeObjectRelease();
    if (v18) {
      return 0x696C612E74786574;
    }
  }
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if (v16(v12, 1, v15))
  {
    sub_100009ED4((uint64_t)v12, &qword_1000A8FF8);
    swift_release();
  }
  else
  {
    UITextFormattingViewController.FormattingDescriptor.textAlignments.getter();
    sub_100009ED4((uint64_t)v12, &qword_1000A8FF8);
    id v19 = UITextFormattingViewControllerTextAlignmentCenter;
    char v20 = sub_1000125B8();
    swift_release();

    swift_bridgeObjectRelease();
    if (v20) {
      return 0xD000000000000010;
    }
  }
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if (!v16(v9, 1, v15))
  {
    UITextFormattingViewController.FormattingDescriptor.textAlignments.getter();
    sub_100009ED4((uint64_t)v9, &qword_1000A8FF8);
    id v22 = UITextFormattingViewControllerTextAlignmentRight;
    char v23 = sub_1000125B8();
    swift_release();

    swift_bridgeObjectRelease();
    if ((v23 & 1) == 0) {
      goto LABEL_12;
    }
    return 0x696C612E74786574;
  }
  sub_100009ED4((uint64_t)v9, &qword_1000A8FF8);
  swift_release();
LABEL_12:
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if (v16(v6, 1, v15))
  {
    sub_100009ED4((uint64_t)v6, &qword_1000A8FF8);
    swift_release();
    return 0x696C612E74786574;
  }
  UITextFormattingViewController.FormattingDescriptor.textAlignments.getter();
  sub_100009ED4((uint64_t)v6, &qword_1000A8FF8);
  id v24 = UITextFormattingViewControllerTextAlignmentJustified;
  char v25 = sub_1000125B8();
  swift_release();

  swift_bridgeObjectRelease();
  if ((v25 & 1) == 0 || (v27 & 1) == 0) {
    return 0x696C612E74786574;
  }
  return 0xD000000000000014;
}

unint64_t sub_100057A2C(void *a1)
{
  id v2 = [a1 _textAnimationName];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;

    unint64_t v14 = 0x6566666574786574;
    uint64_t v7 = v4;
    uint64_t v8 = v6;
  }
  else
  {
    _StringGuts.grow(_:)(18);
    swift_bridgeObjectRelease();
    unint64_t v14 = 0xD000000000000010;
    id v9 = [a1 componentKey];
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v12 = v11;

    uint64_t v7 = v10;
    uint64_t v8 = v12;
  }
  String.append(_:)(*(Swift::String *)&v7);
  swift_bridgeObjectRelease();
  return v14;
}

unint64_t sub_100057B40()
{
  unint64_t result = qword_1000A97F0;
  if (!qword_1000A97F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A97F0);
  }
  return result;
}

unint64_t sub_100057B9C()
{
  unint64_t result = qword_1000A9838;
  if (!qword_1000A9838)
  {
    sub_100003F9C(&qword_1000A9808);
    sub_10000A368(&qword_1000A9840, &qword_1000A9800);
    sub_100057C6C(&qword_1000A8808, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A9838);
  }
  return result;
}

uint64_t sub_100057C6C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100057CB4()
{
  unint64_t result = qword_1000A9848;
  if (!qword_1000A9848)
  {
    sub_100003F9C(&qword_1000A9810);
    sub_100057C6C(&qword_1000A9850, (void (*)(uint64_t))type metadata accessor for TFToggle);
    sub_100057C6C(&qword_1000A8808, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A9848);
  }
  return result;
}

unint64_t sub_100057D90()
{
  unint64_t result = qword_1000A9860;
  if (!qword_1000A9860)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A9860);
  }
  return result;
}

uint64_t sub_100057DE4(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100003F9C(a2);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100057E70()
{
  return sub_10005369C(v0 + 16);
}

uint64_t sub_100057E78(uint64_t a1)
{
  return a1;
}

uint64_t sub_100057EAC(uint64_t a1)
{
  return a1;
}

uint64_t sub_100057EDC()
{
  return sub_100052568(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100057EE4@<X0>(uint64_t a1@<X8>)
{
  return sub_100052E48(*(void *)(v1 + 16), a1);
}

unint64_t sub_100057EEC()
{
  unint64_t result = qword_1000A98A0;
  if (!qword_1000A98A0)
  {
    sub_100003F9C(&qword_1000A98A8);
    sub_100003F9C(&qword_1000A98B0);
    sub_10000A368(&qword_1000A98B8, &qword_1000A98B0);
    sub_100057D90();
    swift_getOpaqueTypeConformance2();
    sub_100057C6C(&qword_1000A9850, (void (*)(uint64_t))type metadata accessor for TFToggle);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A98A0);
  }
  return result;
}

uint64_t sub_10005800C@<X0>(unsigned char *a1@<X8>)
{
  sub_1000580A8();
  uint64_t result = EnvironmentValues.subscript.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_10005805C()
{
  return EnvironmentValues.subscript.setter();
}

unint64_t sub_1000580A8()
{
  unint64_t result = qword_1000AA3B0;
  if (!qword_1000AA3B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AA3B0);
  }
  return result;
}

const char *sub_1000580FC()
{
  return "componentKey";
}

id sub_100058108@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 componentKey];
  *a2 = result;
  return result;
}

uint64_t sub_100058144@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_100058174@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000526CC(*a1, a2);
}

uint64_t sub_10005819C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000581C8()
{
  return sub_1000539D8(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1000581D0@<X0>(uint64_t a1@<X8>)
{
  return sub_100053BE0(*(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(unsigned char *)(v1 + 40), a1);
}

uint64_t sub_1000581E4()
{
  swift_release();
  sub_10001F568(*(void *)(v0 + 40), *(unsigned __int8 *)(v0 + 48), *(unsigned char *)(v0 + 49));
  sub_10001F574(*(void *)(v0 + 56), *(unsigned char *)(v0 + 64));

  return _swift_deallocObject(v0, 65, 7);
}

uint64_t sub_100058240@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100053B30(a1, a2);
}

uint64_t sub_100058248()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_10005826C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000542C4(a1, a2, a3, a4, (void (*)(void))&type metadata accessor for ColorScheme, (uint64_t (*)(char *))&EnvironmentValues.colorScheme.setter);
}

uint64_t sub_1000582AC()
{
  return EnvironmentValues.dynamicTypeSize.getter();
}

uint64_t sub_1000582D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000542C4(a1, a2, a3, a4, (void (*)(void))&type metadata accessor for DynamicTypeSize, (uint64_t (*)(char *))&EnvironmentValues.dynamicTypeSize.setter);
}

uint64_t sub_100058310@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.accessibilityReduceMotion.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100058340(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100003F9C(a2);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000583C8()
{
  unint64_t result = qword_1000A9908;
  if (!qword_1000A9908)
  {
    sub_100003F9C(&qword_1000A98F0);
    sub_100057C6C(&qword_1000A9910, (void (*)(uint64_t))type metadata accessor for TFAnimatedText);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A9908);
  }
  return result;
}

unint64_t sub_100058474()
{
  unint64_t result = qword_1000A9918;
  if (!qword_1000A9918)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A9918);
  }
  return result;
}

uint64_t sub_1000584CC@<X0>(unsigned char *a1@<X8>)
{
  return sub_100053D74(v1 + 32, *(void **)(v1 + 88), a1);
}

uint64_t sub_1000584E0()
{
  swift_unknownObjectRelease();

  swift_release();
  sub_10001F568(*(void *)(v0 + 56), *(unsigned __int8 *)(v0 + 64), *(unsigned char *)(v0 + 65));
  sub_10001F574(*(void *)(v0 + 72), *(unsigned char *)(v0 + 80));

  return _swift_deallocObject(v0, 96, 7);
}

uint64_t sub_10005854C(uint64_t a1)
{
  return sub_100053F58(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), v1 + 32, *(void **)(v1 + 88));
}

unint64_t sub_10005855C()
{
  unint64_t result = qword_1000A9978;
  if (!qword_1000A9978)
  {
    sub_100003F9C(&qword_1000A9930);
    sub_100003F9C(&qword_1000A9980);
    sub_10000A368(&qword_1000A9988, &qword_1000A9980);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A9978);
  }
  return result;
}

unint64_t sub_10005864C()
{
  unint64_t result = qword_1000A9998;
  if (!qword_1000A9998)
  {
    sub_100003F9C(&qword_1000A9970);
    sub_1000586C8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A9998);
  }
  return result;
}

unint64_t sub_1000586C8()
{
  unint64_t result = qword_1000A99A0;
  if (!qword_1000A99A0)
  {
    sub_100003F9C(&qword_1000A9968);
    sub_10000A368(&qword_1000A99A8, &qword_1000A9960);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A99A0);
  }
  return result;
}

unint64_t sub_100058768()
{
  unint64_t result = qword_1000A99B0;
  if (!qword_1000A99B0)
  {
    sub_100003F9C(&qword_1000A9950);
    sub_100003F9C(&qword_1000A9940);
    sub_100003F9C(&qword_1000A9938);
    sub_100003F9C(&qword_1000A9930);
    sub_10005855C();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_10000A368(&qword_1000A9990, &qword_1000A9920);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A99B0);
  }
  return result;
}

uint64_t sub_1000588A0@<X0>(uint64_t a1@<X8>)
{
  return sub_100036F78(*(void *)(v1 + 16), a1);
}

uint64_t sub_1000588A8(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100003F9C(a2);
    sub_10000A368(&qword_1000A99F0, &qword_1000A99F8);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100058944()
{
  return _swift_deallocObject(v0, 17, 7);
}

unsigned char *sub_100058954(unsigned char *a1)
{
  return sub_10001BE9C(a1, *(unsigned char *)(v1 + 16));
}

uint64_t sub_10005895C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = UITextFormattingViewController.FormattingStyle.styleKey.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_10005898C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100037220(a1, v2 + 16, a2);
}

uint64_t sub_100058998@<X0>(unsigned char *a1@<X8>)
{
  type metadata accessor for UITextFormattingViewController.FormattingStyle();

  return sub_1000374A0((void *)(v1 + 32), a1);
}

uint64_t sub_100058A14()
{
  uint64_t v1 = type metadata accessor for UITextFormattingViewController.FormattingStyle();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 136) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  swift_release();
  sub_10001F568(*(void *)(v0 + 48), *(unsigned __int8 *)(v0 + 56), *(unsigned char *)(v0 + 57));
  sub_10001F574(*(void *)(v0 + 64), *(unsigned char *)(v0 + 72));
  sub_10001F574(*(void *)(v0 + 80), *(unsigned char *)(v0 + 88));
  sub_10001F574(*(void *)(v0 + 96), *(unsigned char *)(v0 + 104));
  swift_bridgeObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100058B2C(unsigned char *a1)
{
  type metadata accessor for UITextFormattingViewController.FormattingStyle();
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];

  return sub_1000376AC(a1, v3, v4, v1 + 4);
}

uint64_t sub_100058BA4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000378B8(a1);
}

uint64_t sub_100058BAC@<X0>(uint64_t a1@<X8>)
{
  return sub_100037CB0(*(void *)(v1 + 16), a1);
}

uint64_t sub_100058BB8()
{
  return sub_100039910(v0 + 16);
}

uint64_t sub_100058BC4()
{
  swift_release();
  sub_10001F568(*(void *)(v0 + 32), *(unsigned __int8 *)(v0 + 40), *(unsigned char *)(v0 + 41));
  sub_10001F574(*(void *)(v0 + 48), *(unsigned char *)(v0 + 56));
  sub_10001F574(*(void *)(v0 + 64), *(unsigned char *)(v0 + 72));
  sub_10001F574(*(void *)(v0 + 80), *(unsigned char *)(v0 + 88));
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 120, 7);
}

uint64_t sub_100058C40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100038148(a1, v2 + 16, a2);
}

unint64_t sub_100058C48()
{
  unint64_t result = qword_1000A9A48;
  if (!qword_1000A9A48)
  {
    sub_100003F9C(&qword_1000A9A40);
    sub_100058CF4();
    sub_100057C6C(&qword_1000A8808, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A9A48);
  }
  return result;
}

unint64_t sub_100058CF4()
{
  unint64_t result = qword_1000A9A50;
  if (!qword_1000A9A50)
  {
    sub_100003F9C(&qword_1000A9A58);
    sub_100003F9C(&qword_1000A9A60);
    sub_10000A368(&qword_1000A9A68, &qword_1000A9A60);
    sub_100058DE4();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A9A50);
  }
  return result;
}

unint64_t sub_100058DE4()
{
  unint64_t result = qword_1000A9A70;
  if (!qword_1000A9A70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A9A70);
  }
  return result;
}

uint64_t sub_100058E38()
{
  uint64_t v1 = type metadata accessor for UITextFormattingViewController.FormattingStyle();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 120) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  sub_10001F568(*(void *)(v0 + 32), *(unsigned __int8 *)(v0 + 40), *(unsigned char *)(v0 + 41));
  sub_10001F574(*(void *)(v0 + 48), *(unsigned char *)(v0 + 56));
  sub_10001F574(*(void *)(v0 + 64), *(unsigned char *)(v0 + 72));
  sub_10001F574(*(void *)(v0 + 80), *(unsigned char *)(v0 + 88));
  swift_bridgeObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100058F48()
{
  uint64_t v1 = *(void *)(type metadata accessor for UITextFormattingViewController.FormattingStyle() - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 120) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_1000389BC((void *)(v0 + 16), v2);
}

uint64_t sub_100058FAC@<X0>(uint64_t a1@<X8>)
{
  return sub_100038CC0(*(void **)(v1 + 24), a1);
}

unint64_t sub_100058FB4()
{
  unint64_t result = qword_1000A9A88;
  if (!qword_1000A9A88)
  {
    sub_100003F9C(&qword_1000A9A80);
    sub_100059060();
    sub_100057C6C(&qword_1000A9A90, (void (*)(uint64_t))type metadata accessor for TFFontModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A9A88);
  }
  return result;
}

unint64_t sub_100059060()
{
  unint64_t result = qword_1000AAB70;
  if (!qword_1000AAB70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AAB70);
  }
  return result;
}

uint64_t sub_1000590BC()
{
  return EnvironmentValues.sizeCategory.getter();
}

uint64_t sub_1000590E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000542C4(a1, a2, a3, a4, (void (*)(void))&type metadata accessor for ContentSizeCategory, (uint64_t (*)(char *))&EnvironmentValues.sizeCategory.setter);
}

uint64_t sub_100059120()
{
  return sub_100038C50();
}

uint64_t sub_10005913C(char *a1)
{
  return sub_10002C7E8(*a1);
}

uint64_t sub_100059168@<X0>(unsigned char *a1@<X8>)
{
  return sub_10003E10C((uint64_t *)(v1 + 32), a1);
}

uint64_t sub_10005917C()
{
  swift_unknownObjectRelease();
  swift_release();
  sub_10001F568(*(void *)(v0 + 48), *(unsigned __int8 *)(v0 + 56), *(unsigned char *)(v0 + 57));
  sub_10001F574(*(void *)(v0 + 64), *(unsigned char *)(v0 + 72));
  sub_10001F574(*(void *)(v0 + 80), *(unsigned char *)(v0 + 88));
  swift_release();

  return _swift_deallocObject(v0, 104, 7);
}

uint64_t sub_1000591EC(uint64_t a1)
{
  return sub_10003E1E4(a1, v1[2], v1[3], v1 + 4);
}

uint64_t sub_1000591FC(char *a1)
{
  return sub_10002C690(*a1);
}

uint64_t sub_100059224(char *a1)
{
  return sub_10002BDDC(*a1);
}

uint64_t sub_10005924C()
{
  return _swift_deallocObject(v0, 17, 7);
}

unint64_t sub_10005925C()
{
  unint64_t result = qword_1000A9B08;
  if (!qword_1000A9B08)
  {
    sub_100003F9C(&qword_1000A9AF8);
    sub_100057C6C(&qword_1000A9850, (void (*)(uint64_t))type metadata accessor for TFToggle);
    sub_10000A368(&qword_1000A8F50, &qword_1000A8F58);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A9B08);
  }
  return result;
}

uint64_t sub_10005932C(char *a1)
{
  return sub_10002B420(*a1);
}

uint64_t sub_100059354()
{
  return _swift_deallocObject(v0, 17, 7);
}

unint64_t sub_100059364()
{
  unint64_t result = qword_1000A9B78;
  if (!qword_1000A9B78)
  {
    sub_100003F9C(&qword_1000A9B48);
    sub_100003F9C(&qword_1000A9B50);
    sub_10000A368(&qword_1000A9B80, &qword_1000A9B50);
    sub_100057D90();
    swift_getOpaqueTypeConformance2();
    sub_10000A368(&qword_1000A9B88, &qword_1000A9B30);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A9B78);
  }
  return result;
}

unint64_t sub_100059478()
{
  unint64_t result = qword_1000A9B90;
  if (!qword_1000A9B90)
  {
    sub_100003F9C(&qword_1000A9B28);
    sub_10000A368(&qword_1000A9B68, &qword_1000A9B20);
    sub_10000A368(&qword_1000A9B70, &qword_1000A9B10);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A9B90);
  }
  return result;
}

uint64_t sub_100059538@<X0>(uint64_t a1@<X8>)
{
  return sub_10003DAEC(a1);
}

uint64_t sub_100059540@<X0>(char *a1@<X8>)
{
  return sub_10003EDF8(*(void *)(v1 + 16), a1);
}

uint64_t sub_100059548@<X0>(uint64_t a1@<X8>)
{
  return sub_10003FEA8(*(void *)(v1 + 16), a1);
}

uint64_t sub_100059554@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.lineLimit.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_100059588()
{
  return EnvironmentValues.lineLimit.setter();
}

uint64_t sub_1000595B8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if (a7)
  {
    sub_10000B970(a1, a2, a3 & 1);
    return swift_bridgeObjectRetain();
  }
  else
  {
    sub_10000B970(a1, a2, a3 & 1);
    swift_bridgeObjectRetain();
    return swift_retain();
  }
}

unint64_t sub_10005962C()
{
  unint64_t result = qword_1000A9C38;
  if (!qword_1000A9C38)
  {
    sub_100003F9C(&qword_1000A9C28);
    sub_10005B6D0(&qword_1000A9C40, &qword_1000A9C48, (void (*)(void))sub_1000596E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A9C38);
  }
  return result;
}

unint64_t sub_1000596E0()
{
  unint64_t result = qword_1000A9C50;
  if (!qword_1000A9C50)
  {
    sub_100003F9C(&qword_1000A9C58);
    sub_10005975C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A9C50);
  }
  return result;
}

unint64_t sub_10005975C()
{
  unint64_t result = qword_1000A9C60;
  if (!qword_1000A9C60)
  {
    sub_100003F9C(&qword_1000A9C68);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A9C60);
  }
  return result;
}

uint64_t sub_1000597D0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if (a7)
  {
    sub_100009A1C(a1, a2, a3 & 1);
  }
  else
  {
    sub_100009A1C(a1, a2, a3 & 1);
    swift_release();
  }

  return swift_bridgeObjectRelease();
}

const char *sub_100059830()
{
  return "fontDescriptor";
}

id sub_10005983C@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 fontDescriptor];
  *a2 = result;
  return result;
}

uint64_t sub_10005987C@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  return sub_10003F910(a1, (long long *)(v2 + 16), a2);
}

unint64_t sub_100059884()
{
  unint64_t result = qword_1000A9C78;
  if (!qword_1000A9C78)
  {
    sub_10000A3AC(255, (unint64_t *)&qword_1000A9180);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A9C78);
  }
  return result;
}

uint64_t sub_1000598F8()
{
  return sub_10003FDF8((void *)(v0 + 16), &OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_pickFont);
}

void sub_10005991C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a5)
  {
    sub_10000B970(a2, a3, a4 & 1);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    id v14 = a11;
    sub_10001F504(a13, a14 & 1);
  }
}

void sub_1000599BC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a5)
  {
    sub_100009A1C(a2, a3, a4 & 1);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();

    swift_release();
    sub_10001F574(a13, a14 & 1);
  }
}

uint64_t sub_100059A60()
{
  swift_release();
  sub_10001F568(*(void *)(v0 + 32), *(unsigned __int8 *)(v0 + 40), *(unsigned char *)(v0 + 41));
  sub_10001F574(*(void *)(v0 + 48), *(unsigned char *)(v0 + 56));

  return _swift_deallocObject(v0, 57, 7);
}

uint64_t sub_100059AB4()
{
  return sub_10003FDF8((void *)(v0 + 16), &OBJC_IVAR____TtC19FontPickerUIService19TextFormattingState_showTypographySettings);
}

void sub_100059ADC(unsigned char *a1@<X8>)
{
  sub_10003FB14((void *)(v1 + 32), *(void **)(v1 + 80), a1);
}

uint64_t sub_100059AF0()
{
  swift_unknownObjectRelease();
  swift_release();
  sub_10001F568(*(void *)(v0 + 48), *(unsigned __int8 *)(v0 + 56), *(unsigned char *)(v0 + 57));
  sub_10001F574(*(void *)(v0 + 64), *(unsigned char *)(v0 + 72));

  return _swift_deallocObject(v0, 88, 7);
}

void sub_100059B54(uint64_t a1)
{
  sub_10003FBFC(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), (void *)(v1 + 32), *(void **)(v1 + 80));
}

uint64_t sub_100059B64@<X0>(uint64_t a1@<X8>)
{
  return sub_100041298(*(void *)(v1 + 16), a1);
}

uint64_t sub_100059B6C()
{
  return sub_100041E60(*(unsigned char **)(v0 + 16));
}

unint64_t sub_100059B74()
{
  unint64_t result = qword_1000A9CC8;
  if (!qword_1000A9CC8)
  {
    sub_100003F9C(&qword_1000A9CB8);
    sub_100059C20();
    sub_100057C6C(&qword_1000A9C30, (void (*)(uint64_t))type metadata accessor for TFSymbol);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A9CC8);
  }
  return result;
}

unint64_t sub_100059C20()
{
  unint64_t result = qword_1000A9CD0;
  if (!qword_1000A9CD0)
  {
    sub_100003F9C(&qword_1000A9CD8);
    sub_100059C9C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A9CD0);
  }
  return result;
}

unint64_t sub_100059C9C()
{
  unint64_t result = qword_1000A9CE0;
  if (!qword_1000A9CE0)
  {
    sub_100003F9C(&qword_1000A9CE8);
    sub_100059D3C();
    sub_10000A368(&qword_1000A8D48, &qword_1000AAA10);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A9CE0);
  }
  return result;
}

unint64_t sub_100059D3C()
{
  unint64_t result = qword_1000A9CF0;
  if (!qword_1000A9CF0)
  {
    sub_100003F9C(&qword_1000A9CF8);
    sub_100059DDC();
    sub_10000A368(&qword_1000A8D38, &qword_1000A8D40);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A9CF0);
  }
  return result;
}

unint64_t sub_100059DDC()
{
  unint64_t result = qword_1000A9D00;
  if (!qword_1000A9D00)
  {
    sub_100003F9C(&qword_1000A9D08);
    sub_100059060();
    sub_10000A368((unint64_t *)&unk_1000AADC0, &qword_1000A9D10);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A9D00);
  }
  return result;
}

uint64_t sub_100059E7C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  char v3 = *(unsigned char *)(a1 + 32);
  swift_bridgeObjectRelease();
  sub_10001F574(v2, v3);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

uint64_t sub_100059F00(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  char v3 = *(unsigned char *)(a1 + 32);
  swift_bridgeObjectRetain();
  sub_10001F504(v2, v3);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_100059F94@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.allowsTightening.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100059FC4()
{
  return EnvironmentValues.allowsTightening.setter();
}

uint64_t sub_100059FEC()
{
  return sub_10005BB94((void (*)(void, void))sub_10001F574, (void (*)(void, void))sub_10005C94C, 97);
}

uint64_t sub_10005A01C()
{
  return sub_100043280(v0 + 16, &enum case for UITextFormattingViewController.ChangeValue.decreaseFontSize(_:));
}

uint64_t sub_10005A040@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Image.init(systemName:)();
  *a1 = result;
  return result;
}

uint64_t sub_10005A078()
{
  return sub_10005BB94((void (*)(void, void))sub_10001F574, (void (*)(void, void))sub_10005C94C, 97);
}

uint64_t sub_10005A0A8()
{
  return sub_100043280(v0 + 16, &enum case for UITextFormattingViewController.ChangeValue.increaseFontSize(_:));
}

uint64_t sub_10005A0CC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Image.init(systemName:)();
  *a1 = result;
  return result;
}

uint64_t sub_10005A100()
{
  return sub_100043404(*(void *)(v0 + 16));
}

double sub_10005A108@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = sub_1000435BC(*(void *)(v1 + 16), *(unsigned char *)(v1 + 24), *(unsigned char *)(v1 + 25), a1).n128_u64[0];
  return result;
}

unint64_t sub_10005A118()
{
  unint64_t result = qword_1000A9D70;
  if (!qword_1000A9D70)
  {
    sub_100003F9C(&qword_1000A9D60);
    sub_100059C20();
    sub_10000A368(&qword_1000A9D78, &qword_1000AAA30);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A9D70);
  }
  return result;
}

uint64_t sub_10005A1B8()
{
  return sub_10005BB94((void (*)(void, void))sub_10001F574, (void (*)(void, void))sub_10005C94C, 97);
}

uint64_t sub_10005A1E8(double *a1)
{
  return sub_100043744(a1, v1 + 16);
}

uint64_t sub_10005A1F0()
{
  return sub_10005BE74((void (*)(void, void))sub_10001F574, (void (*)(void, void))sub_10005C94C);
}

uint64_t sub_10005A21C@<X0>(BOOL *a1@<X8>)
{
  return sub_100043A78(v1 + 32, a1, *(double *)(v1 + 120));
}

uint64_t sub_10005A22C()
{
  return sub_10005BE74((void (*)(void, void))sub_10001F574, (void (*)(void, void))sub_10005C94C);
}

uint64_t sub_10005A258(unsigned char *a1)
{
  return sub_100043C00(a1, *(double *)(v1 + 120), *(void *)(v1 + 16), *(void *)(v1 + 24), v1 + 32);
}

uint64_t sub_10005A268()
{
  return sub_10005BB94((void (*)(void, void))sub_10001F574, (void (*)(void, void))sub_10005C94C, 97);
}

uint64_t sub_10005A298()
{
  return sub_10005BB94((void (*)(void, void))sub_10001F574, (void (*)(void, void))sub_10005C94C, 97);
}

unint64_t sub_10005A2C8()
{
  unint64_t result = qword_1000A9E18;
  if (!qword_1000A9E18)
  {
    sub_100003F9C(&qword_1000A9E00);
    sub_10000A368(&qword_1000A9E20, &qword_1000A9DF8);
    sub_100057C6C(&qword_1000A8808, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A9E18);
  }
  return result;
}

uint64_t sub_10005A398@<X0>(uint64_t a1@<X8>)
{
  return sub_100044920(*(unsigned char **)(v1 + 16), a1);
}

uint64_t sub_10005A3A0@<X0>(uint64_t a1@<X8>)
{
  return sub_10004605C(*(void *)(v1 + 16), a1);
}

uint64_t sub_10005A3A8(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000462BC(a1, a2, a3, a4, (void **)&UITextFormattingViewControllerTextAlignmentJustified);
}

uint64_t sub_10005A3CC@<X0>(unsigned char *a1@<X8>)
{
  return sub_1000463E0(v1 + 32, a1);
}

uint64_t sub_10005A3E0(uint64_t a1)
{
  return sub_1000464B8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), v1 + 32);
}

uint64_t sub_10005A3F0(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000462BC(a1, a2, a3, a4, (void **)&UITextFormattingViewControllerTextAlignmentRight);
}

uint64_t sub_10005A418(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000462BC(a1, a2, a3, a4, (void **)&UITextFormattingViewControllerTextAlignmentCenter);
}

uint64_t sub_10005A440(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000462BC(a1, a2, a3, a4, (void **)&UITextFormattingViewControllerTextAlignmentLeft);
}

uint64_t sub_10005A468()
{
  swift_unknownObjectRelease();
  swift_release();
  sub_10001F568(*(void *)(v0 + 56), *(unsigned __int8 *)(v0 + 64), *(unsigned char *)(v0 + 65));
  swift_release();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_10005A4C0@<X0>(uint64_t a1@<X8>)
{
  return sub_10005B474((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000465AC, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000468E0, a1);
}

uint64_t sub_10005A4EC()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_10005A524(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_10005A52C()
{
  return sub_10005B524(58);
}

uint64_t sub_10005A534(uint64_t a1)
{
  return sub_10005A54C(a1, 1);
}

uint64_t sub_10005A53C()
{
  return sub_10005B524(58);
}

uint64_t sub_10005A544(uint64_t a1)
{
  return sub_10005A54C(a1, 0);
}

uint64_t sub_10005A54C(uint64_t a1, char a2)
{
  return sub_100046DA4(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), *(unsigned __int8 *)(v2 + 56) | (*(unsigned __int8 *)(v2 + 57) << 8), a2);
}

uint64_t sub_10005A588()
{
  return sub_10005A794(sub_100047388);
}

uint64_t sub_10005A5A4@<X0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000476C4(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(unsigned __int8 *)(v2 + 40) | (*(unsigned __int8 *)(v2 + 41) << 8), a2);
}

uint64_t sub_10005A5C4()
{
  return sub_10005B524(72);
}

uint64_t sub_10005A5CC@<X0>(BOOL *a1@<X8>)
{
  return sub_100047A68(*(void *)(v1 + 32), a1, *(double *)(v1 + 64));
}

uint64_t sub_10005A5F4()
{
  return sub_10005B524(72);
}

unsigned char *sub_10005A5FC(unsigned char *a1)
{
  return sub_100047B38(a1, *(double *)(v1 + 64), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_10005A628(uint64_t a1)
{
  return sub_10005A820(a1, (uint64_t (*)(uint64_t, void, void, void, void))sub_10004860C);
}

unint64_t sub_10005A640()
{
  unint64_t result = qword_1000A9EC0;
  if (!qword_1000A9EC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A9EC0);
  }
  return result;
}

unint64_t sub_10005A694()
{
  unint64_t result = qword_1000A9ED0;
  if (!qword_1000A9ED0)
  {
    sub_100003F9C(&qword_1000A9EC8);
    sub_10000A368(&qword_1000A9ED8, &qword_1000A9EE0);
    sub_100057C6C(&qword_1000A8808, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A9ED0);
  }
  return result;
}

uint64_t sub_10005A764()
{
  return sub_10005A794((uint64_t (*)(void, void, void, void))sub_100048C78);
}

uint64_t sub_10005A77C()
{
  return sub_10005A794((uint64_t (*)(void, void, void, void))sub_10004971C);
}

uint64_t sub_10005A794(uint64_t (*a1)(void, void, void, void))
{
  return a1(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(unsigned __int8 *)(v1 + 40) | (*(unsigned __int8 *)(v1 + 41) << 8));
}

uint64_t sub_10005A7C0()
{
  swift_release();
  sub_10001F568(*(void *)(v0 + 32), *(unsigned __int8 *)(v0 + 40), *(unsigned char *)(v0 + 41));

  return _swift_deallocObject(v0, 42, 7);
}

uint64_t sub_10005A808(uint64_t a1)
{
  return sub_10005A820(a1, (uint64_t (*)(uint64_t, void, void, void, void))sub_1000494D0);
}

uint64_t sub_10005A820(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void))
{
  return a2(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(unsigned __int8 *)(v2 + 40) | (*(unsigned __int8 *)(v2 + 41) << 8));
}

void sub_10005A848(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_10005A854()
{
  return sub_10005B524(58);
}

uint64_t sub_10005A85C(uint64_t a1)
{
  return sub_10005A874(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void))sub_100049674);
}

uint64_t sub_10005A874(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void, void))
{
  return a2(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), *(unsigned __int8 *)(v2 + 56) | (*(unsigned __int8 *)(v2 + 57) << 8));
}

uint64_t sub_10005A8A0()
{
  return sub_10005B524(59);
}

uint64_t sub_10005A8AC()
{
  return sub_10005B524(59);
}

uint64_t sub_10005A8B8()
{
  return sub_10005B524(59);
}

uint64_t sub_10005A8C0@<X0>(unsigned char *a1@<X8>)
{
  return sub_10004997C(*(void *)(v1 + 32), *(unsigned char *)(v1 + 58), a1);
}

uint64_t sub_10005A8E8()
{
  return sub_10005B524(59);
}

uint64_t sub_10005A8F0(unsigned char *a1)
{
  return sub_100049A44(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(unsigned __int8 *)(v1 + 56) | (*(unsigned __int8 *)(v1 + 57) << 8), *(unsigned char *)(v1 + 58));
}

uint64_t sub_10005A91C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10005A990()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10005A9C8(double *a1)
{
  return sub_1000762C4(a1, *(uint64_t (**)(double, double, double, double))(v1 + 16));
}

unint64_t sub_10005A9D0()
{
  unint64_t result = qword_1000A9F80;
  if (!qword_1000A9F80)
  {
    sub_100003F9C(&qword_1000A9F68);
    sub_100003F9C(&qword_1000A9F58);
    type metadata accessor for BorderlessButtonStyle();
    sub_10000A368(&qword_1000A9F88, &qword_1000A9F58);
    sub_100057C6C(&qword_1000A9F90, (void (*)(uint64_t))&type metadata accessor for BorderlessButtonStyle);
    swift_getOpaqueTypeConformance2();
    sub_100057C6C(&qword_1000A8808, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A9F80);
  }
  return result;
}

unint64_t sub_10005AB24()
{
  unint64_t result = qword_1000A9F98;
  if (!qword_1000A9F98)
  {
    sub_100003F9C(&qword_1000A9F48);
    sub_100058340(&qword_1000A9FA0, &qword_1000A9F30, (void (*)(void))sub_10005ABFC, (void (*)(void))sub_10005ACCC);
    sub_10000A368(&qword_1000A9FB0, &qword_1000AA890);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A9F98);
  }
  return result;
}

unint64_t sub_10005ABFC()
{
  unint64_t result = qword_1000A9FA8;
  if (!qword_1000A9FA8)
  {
    sub_100003F9C(&qword_1000A9F40);
    sub_10000A368(&qword_1000A9F78, &qword_1000A9F38);
    sub_100057C6C(&qword_1000A8808, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A9FA8);
  }
  return result;
}

unint64_t sub_10005ACCC()
{
  unint64_t result = qword_1000AA8B0;
  if (!qword_1000AA8B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AA8B0);
  }
  return result;
}

uint64_t sub_10005AD24()
{
  uint64_t v1 = *(void *)(type metadata accessor for TFTextColorControl() - 8);
  return sub_10004BD9C((void *)(v0
                                + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))));
}

uint64_t sub_10005AD78@<X0>(uint64_t a1@<X8>)
{
  return sub_10004AD18(*(void *)(v1 + 16), a1);
}

unint64_t sub_10005AD80()
{
  unint64_t result = qword_1000A9FC0;
  if (!qword_1000A9FC0)
  {
    sub_100003F9C(&qword_1000A9FB8);
    sub_10005ADFC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A9FC0);
  }
  return result;
}

unint64_t sub_10005ADFC()
{
  unint64_t result = qword_1000A9FC8;
  if (!qword_1000A9FC8)
  {
    sub_100003F9C(&qword_1000A9FD0);
    sub_100003F9C(&qword_1000A9FD8);
    sub_10005AED0();
    swift_getOpaqueTypeConformance2();
    sub_10000A368(&qword_1000A8F50, &qword_1000A8F58);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A9FC8);
  }
  return result;
}

unint64_t sub_10005AED0()
{
  unint64_t result = qword_1000A9FE0;
  if (!qword_1000A9FE0)
  {
    sub_100003F9C(&qword_1000A9FD8);
    sub_10005AF4C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A9FE0);
  }
  return result;
}

unint64_t sub_10005AF4C()
{
  unint64_t result = qword_1000A9FE8;
  if (!qword_1000A9FE8)
  {
    sub_100003F9C(&qword_1000A9FF0);
    sub_10005AFC8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A9FE8);
  }
  return result;
}

unint64_t sub_10005AFC8()
{
  unint64_t result = qword_1000A9FF8;
  if (!qword_1000A9FF8)
  {
    sub_100003F9C(&qword_1000AA000);
    sub_10005B068();
    sub_10000A368(&qword_1000A9FB0, &qword_1000AA890);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A9FF8);
  }
  return result;
}

unint64_t sub_10005B068()
{
  unint64_t result = qword_1000AA008;
  if (!qword_1000AA008)
  {
    sub_100003F9C(&qword_1000AA010);
    sub_10005B0FC(&qword_1000AA018, &qword_1000AA020);
    sub_10005ACCC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AA008);
  }
  return result;
}

uint64_t sub_10005B0FC(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100003F9C(a2);
    sub_10000A368(&qword_1000AA028, &qword_1000AA030);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10005B194@<X0>(uint64_t *a1@<X8>)
{
  sub_100027F4C();
  uint64_t result = Color.init(uiColor:)();
  *a1 = result;
  return result;
}

uint64_t sub_10005B1C4()
{
  swift_retain();
  sub_1000346A0();

  return swift_release();
}

uint64_t sub_10005B20C()
{
  uint64_t v1 = (int *)(type metadata accessor for TFTextColorControl() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v0 + v3;
  swift_release();
  sub_10001F568(*(void *)(v5 + 16), *(unsigned __int8 *)(v5 + 24), *(unsigned char *)(v5 + 25));
  sub_10001F574(*(void *)(v5 + 32), *(unsigned char *)(v5 + 40));
  sub_10001F574(*(void *)(v5 + 48), *(unsigned char *)(v5 + 56));
  uint64_t v6 = v0 + v3 + v1[10];
  sub_10000435C(&qword_1000A8F30);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v8 = *(void *)(v7 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    }
  }
  else
  {
    swift_release();
  }

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

void *sub_10005B3A4(double a1, double a2, double a3, double a4)
{
  uint64_t v9 = *(void *)(type metadata accessor for TFTextColorControl() - 8);
  return sub_10004BE54((void *)(v4 + ((*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))), a1, a2, a3, a4);
}

uint64_t sub_10005B428()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10005B438()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10005B448@<X0>(uint64_t a1@<X8>)
{
  return sub_10005B474((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10004C980, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10004CCC4, a1);
}

uint64_t sub_10005B474@<X0>(void (*a1)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X0>, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X1>, uint64_t a3@<X8>)
{
  return sub_10004C7AC(*(void *)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32), *(unsigned __int8 *)(v3 + 40) | (unsigned __int16)(*(unsigned __int8 *)(v3 + 41) << 8), a1, a2, a3);
}

uint64_t sub_10005B4B0()
{
  return sub_10005B524(58);
}

uint64_t sub_10005B4B8(uint64_t a1)
{
  return sub_10005A874(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void))sub_10004D014);
}

uint64_t sub_10005B4D0()
{
  return sub_10005B524(58);
}

uint64_t sub_10005B4D8(uint64_t a1)
{
  return sub_10005A874(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void))sub_10004D1A4);
}

uint64_t sub_10005B4F0()
{
  return sub_10005B524(58);
}

uint64_t sub_10005B4F8@<X0>(BOOL *a1@<X8>)
{
  return sub_10004D97C(*(void *)(v1 + 32), a1);
}

uint64_t sub_10005B51C()
{
  return sub_10005B524(58);
}

uint64_t sub_10005B524(uint64_t a1)
{
  swift_unknownObjectRelease();
  swift_release();
  sub_10001F568(*(void *)(v1 + 48), *(unsigned __int8 *)(v1 + 56), *(unsigned char *)(v1 + 57));

  return _swift_deallocObject(v1, a1, 7);
}

uint64_t sub_10005B580(uint64_t a1)
{
  return sub_10005A874(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void))sub_10004DB30);
}

unint64_t sub_10005B598()
{
  unint64_t result = qword_1000AA0D8;
  if (!qword_1000AA0D8)
  {
    sub_100003F9C(&qword_1000AA090);
    sub_10005B644();
    sub_100057C6C(&qword_1000A8808, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AA0D8);
  }
  return result;
}

unint64_t sub_10005B644()
{
  unint64_t result = qword_1000AA0E0;
  if (!qword_1000AA0E0)
  {
    sub_100003F9C(&qword_1000AA0E8);
    sub_10005925C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AA0E0);
  }
  return result;
}

uint64_t sub_10005B6C0@<X0>(uint64_t a1@<X8>)
{
  return sub_10004EDB8(*(void *)(v1 + 16), a1);
}

uint64_t sub_10005B6C8@<X0>(uint64_t a1@<X8>)
{
  return sub_10004FB80(*(void *)(v1 + 16), a1);
}

uint64_t sub_10005B6D0(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100003F9C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10005B73C()
{
  unint64_t result = qword_1000AA110;
  if (!qword_1000AA110)
  {
    sub_100003F9C(&qword_1000AA118);
    sub_100003F9C(&qword_1000AA120);
    type metadata accessor for ButtonToggleStyle();
    sub_10000A368(&qword_1000AA128, &qword_1000AA120);
    sub_100057C6C(&qword_1000AA130, (void (*)(uint64_t))&type metadata accessor for ButtonToggleStyle);
    swift_getOpaqueTypeConformance2();
    sub_100057C6C(&qword_1000A8808, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AA110);
  }
  return result;
}

unint64_t sub_10005B890()
{
  unint64_t result = qword_1000AA140;
  if (!qword_1000AA140)
  {
    sub_100003F9C(&qword_1000AA0B0);
    sub_10000A368(&qword_1000AA138, &qword_1000AA0A8);
    sub_100057C6C(&qword_1000A8808, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AA140);
  }
  return result;
}

uint64_t sub_10005B960()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10005B978()
{
  return EnvironmentValues.imageScale.getter();
}

uint64_t sub_10005B99C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000542C4(a1, a2, a3, a4, (void (*)(void))&type metadata accessor for Image.Scale, (uint64_t (*)(char *))&EnvironmentValues.imageScale.setter);
}

double sub_10005B9DC(_OWORD *a1)
{
  double result = 0.0;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

void sub_10005BA00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a2)
  {
    char v6 = a5 & 1;
    swift_bridgeObjectRetain();
    sub_10001F504(a4, v6);
  }
}

void *sub_10005BA4C(void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19],
    a1[20],
    a1[21],
    a1[22],
    a1[23],
    a1[24],
    a1[25]);
  return a1;
}

void sub_10005BAC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    sub_10001F574(a4, a5 & 1);
  }
}

uint64_t sub_10005BB0C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  char v3 = *(unsigned char *)(a1 + 32);
  swift_bridgeObjectRetain();
  sub_10001F504(v2, v3);
  return a1;
}

const char *sub_10005BB54()
{
  return "styleKey";
}

uint64_t sub_10005BB64()
{
  return sub_10005BB94((void (*)(void, void))sub_10005C94C, (void (*)(void, void))sub_10005C94C, 112);
}

uint64_t sub_10005BB94(void (*a1)(void, void), void (*a2)(void, void), uint64_t a3)
{
  swift_release();
  sub_10001F568(*(void *)(v3 + 40), *(unsigned __int8 *)(v3 + 48), *(unsigned char *)(v3 + 49));
  sub_10001F574(*(void *)(v3 + 56), *(unsigned char *)(v3 + 64));
  a1(*(void *)(v3 + 72), *(unsigned __int8 *)(v3 + 80));
  a2(*(void *)(v3 + 88), *(unsigned __int8 *)(v3 + 96));

  return _swift_deallocObject(v3, a3, 7);
}

uint64_t sub_10005BC24@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10004F0FC(a1, (_OWORD *)(v2 + 16), a2);
}

uint64_t sub_10005BC2C(uint64_t a1, void (*a2)(uint64_t, uint64_t), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(a1 + 24);
  char v5 = *(unsigned char *)(a1 + 33);
  uint64_t v6 = *(void *)(a1 + 40);
  char v7 = *(unsigned char *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v9 = *(unsigned __int8 *)(a1 + 64);
  uint64_t v10 = *(void *)(a1 + 72);
  uint64_t v11 = *(unsigned __int8 *)(a1 + 80);
  uint64_t v12 = *(unsigned __int8 *)(a1 + 32);
  swift_retain();
  sub_10001F4F8(v4, v12, v5);
  sub_10001F504(v6, v7);
  a2(v8, v9);
  a3(v10, v11);
  return a1;
}

void sub_10005BCF0(unsigned char *a1@<X8>)
{
  sub_10004F630(v1 + 32, *(void **)(v1 + 128), a1);
}

uint64_t sub_10005BD04()
{
  swift_unknownObjectRelease();
  swift_release();
  sub_10001F568(*(void *)(v0 + 56), *(unsigned __int8 *)(v0 + 64), *(unsigned char *)(v0 + 65));
  sub_10001F574(*(void *)(v0 + 72), *(unsigned char *)(v0 + 80));
  sub_10001F574(*(void *)(v0 + 88), *(unsigned char *)(v0 + 96));
  sub_10001F574(*(void *)(v0 + 104), *(unsigned char *)(v0 + 112));

  return _swift_deallocObject(v0, 136, 7);
}

uint64_t sub_10005BD80(unsigned char *a1)
{
  return sub_10004F718(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), v1 + 32, *(void **)(v1 + 128));
}

uint64_t sub_10005BD90()
{
  return sub_10004F8B4();
}

uint64_t sub_10005BD98@<X0>(uint64_t a1@<X8>)
{
  return sub_10004F97C(*(void **)(v1 + 16), a1);
}

uint64_t sub_10005BDA0@<X0>(uint64_t *a1@<X8>)
{
  return sub_10004FA00(*(void *)(v1 + 16), *(void **)(v1 + 24), a1);
}

uint64_t sub_10005BDA8(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100003F9C(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10005BE10()
{
  return sub_10005BE74((void (*)(void, void))sub_10005C94C, (void (*)(void, void))sub_10005C94C);
}

uint64_t sub_10005BE3C@<X0>(BOOL *a1@<X8>)
{
  return sub_1000508C0(v1 + 32, a1);
}

uint64_t sub_10005BE48()
{
  return sub_10005BE74((void (*)(void, void))sub_10005C94C, (void (*)(void, void))sub_10005C94C);
}

uint64_t sub_10005BE74(void (*a1)(void, void), void (*a2)(void, void))
{
  swift_unknownObjectRelease();
  swift_release();
  sub_10001F568(*(void *)(v2 + 56), *(unsigned __int8 *)(v2 + 64), *(unsigned char *)(v2 + 65));
  sub_10001F574(*(void *)(v2 + 72), *(unsigned char *)(v2 + 80));
  a1(*(void *)(v2 + 88), *(unsigned __int8 *)(v2 + 96));
  a2(*(void *)(v2 + 104), *(unsigned __int8 *)(v2 + 112));

  return _swift_deallocObject(v2, 128, 7);
}

void sub_10005BF08(unsigned __int8 *a1)
{
  sub_1000509F0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), v1 + 32);
}

uint64_t sub_10005BF14()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t destroy for TFFormattingStylesControl.FormatButtonStyle(uint64_t a1)
{
  return sub_10001F574(*(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t _s19FontPickerUIService25TFFormattingStylesControlV17FormatButtonStyleVwCP_0(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  char v4 = *(unsigned char *)(a2 + 16);
  sub_10001F504(v3, v4);
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4;
  return a1;
}

uint64_t assignWithCopy for TFFormattingStylesControl.FormatButtonStyle(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  uint64_t v3 = *(void *)(a2 + 8);
  char v4 = *(unsigned char *)(a2 + 16);
  sub_10001F504(v3, v4);
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4;
  sub_10001F574(v5, v6);
  return a1;
}

__n128 initializeWithTake for TFFormattingStylesControl.FormatButtonStyle(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for TFFormattingStylesControl.FormatButtonStyle(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  uint64_t v3 = *(void *)(a2 + 8);
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4;
  sub_10001F574(v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for TFFormattingStylesControl.FormatButtonStyle(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[17]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TFFormattingStylesControl.FormatButtonStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)__n128 result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TFFormattingStylesControl.FormatButtonStyle()
{
  return &type metadata for TFFormattingStylesControl.FormatButtonStyle;
}

unint64_t sub_10005C0FC()
{
  unint64_t result = qword_1000AA1C0;
  if (!qword_1000AA1C0)
  {
    sub_100003F9C(&qword_1000A97E8);
    sub_10005C19C();
    sub_10000A368(&qword_1000A8D48, &qword_1000AAA10);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AA1C0);
  }
  return result;
}

unint64_t sub_10005C19C()
{
  unint64_t result = qword_1000AA1C8;
  if (!qword_1000AA1C8)
  {
    sub_100003F9C(&qword_1000A97D0);
    sub_10000A368(&qword_1000A97E0, &qword_1000A97C8);
    sub_100057C6C(&qword_1000A8808, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AA1C8);
  }
  return result;
}

uint64_t sub_10005C26C()
{
  return sub_100057DE4(&qword_1000AA1D0, &qword_1000AA1D8, (void (*)(void))sub_10005864C, (void (*)(void))sub_100058768);
}

unint64_t sub_10005C2C0()
{
  unint64_t result = qword_1000AA1E0;
  if (!qword_1000AA1E0)
  {
    sub_100003F9C(&qword_1000AA1E8);
    sub_10000A368(&qword_1000A9AC8, &qword_1000A9AC0);
    sub_10000A368(&qword_1000A9AD0, &qword_1000A9AA0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AA1E0);
  }
  return result;
}

unint64_t sub_10005C388()
{
  unint64_t result = qword_1000AA1F0;
  if (!qword_1000AA1F0)
  {
    sub_100003F9C(&qword_1000AA1F8);
    sub_10000A368(&qword_1000A9BB0, &qword_1000A9BA8);
    sub_100057C6C(&qword_1000A8808, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AA1F0);
  }
  return result;
}

unint64_t sub_10005C45C()
{
  unint64_t result = qword_1000AA200;
  if (!qword_1000AA200)
  {
    sub_100003F9C(&qword_1000AA208);
    sub_10000A368(&qword_1000A9CA8, &qword_1000A9CA0);
    sub_10000A368(&qword_1000A9CB0, &qword_1000A9C88);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AA200);
  }
  return result;
}

uint64_t sub_10005C51C()
{
  return sub_10000A368(&qword_1000AA210, &qword_1000A9DD8);
}

uint64_t sub_10005C558()
{
  return sub_10000A368(&qword_1000AA218, &qword_1000A9E30);
}

unint64_t sub_10005C598()
{
  unint64_t result = qword_1000AA220;
  if (!qword_1000AA220)
  {
    sub_100003F9C(&qword_1000AA228);
    sub_10000A368(&qword_1000A9E90, &qword_1000A9E80);
    sub_100057C6C(&qword_1000A8808, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AA220);
  }
  return result;
}

uint64_t sub_10005C668()
{
  return sub_10000A368(&qword_1000AA230, &qword_1000A9E98);
}

uint64_t sub_10005C6A4()
{
  return sub_10000A368(&qword_1000AA238, &qword_1000A9F28);
}

unint64_t sub_10005C6E4()
{
  unint64_t result = qword_1000AA240;
  if (!qword_1000AA240)
  {
    sub_100003F9C(&qword_1000AA078);
    sub_10000A368(&qword_1000AA080, &qword_1000AA070);
    sub_100057C6C(&qword_1000A8808, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AA240);
  }
  return result;
}

uint64_t sub_10005C7B4()
{
  return sub_10000A368(&qword_1000AA248, &qword_1000AA088);
}

uint64_t sub_10005C7F0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10005C814(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10005C87C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10005C8DC()
{
  return sub_10000A368((unint64_t *)&unk_1000AA2B0, &qword_1000AA260);
}

uint64_t sub_10005C95C(uint64_t TupleTypeMetadata, unint64_t a2, uint64_t a3)
{
  BOOL v4 = (uint64_t *)TupleTypeMetadata;
  uint64_t v5 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 == 1)
  {
    uint64_t v6 = *v5;
  }
  else
  {
    __chkstk_darwin(TupleTypeMetadata);
    uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (a2)
    {
      unint64_t v9 = 0;
      if (a2 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)(v8 - (char *)v5) < 0x20) {
        goto LABEL_9;
      }
      unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v10 = (long long *)(v5 + 2);
      uint64_t v11 = v8 + 16;
      unint64_t v12 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v13 = *v10;
        *(v11 - 1) = *(v10 - 1);
        *uint64_t v11 = v13;
        v10 += 2;
        v11 += 2;
        v12 -= 4;
      }
      while (v12);
      if (v9 != a2)
      {
LABEL_9:
        unint64_t v14 = a2 - v9;
        uint64_t v15 = v9;
        uint64_t v16 = &v8[8 * v9];
        id v17 = &v5[v15];
        do
        {
          uint64_t v18 = *v17++;
          *(void *)uint64_t v16 = v18;
          v16 += 8;
          --v14;
        }
        while (v14);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v6 = TupleTypeMetadata;
  }
  __chkstk_darwin(TupleTypeMetadata);
  char v20 = (char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    char v21 = (int *)(v6 + 32);
    unint64_t v22 = a2;
    do
    {
      if (a2 == 1) {
        int v23 = 0;
      }
      else {
        int v23 = *v21;
      }
      uint64_t v25 = *v5++;
      uint64_t v24 = v25;
      uint64_t v26 = *v4++;
      (*(void (**)(char *, uint64_t))(*(void *)(v24 - 8) + 16))(&v20[v23], v26);
      v21 += 4;
      --v22;
    }
    while (v22);
  }
  return TupleView.init(_:)();
}

uint64_t sub_10005CB20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for _ConditionalContent.Storage();
  __chkstk_darwin(v4);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))((char *)&v7 - v5, a1, a2);
  swift_storeEnumTagMultiPayload();
  return _ConditionalContent<>.init(storage:)();
}

uint64_t sub_10005CC18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for _ConditionalContent.Storage();
  __chkstk_darwin(v5);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))((char *)&v8 - v6, a1, a3);
  swift_storeEnumTagMultiPayload();
  return _ConditionalContent<>.init(storage:)();
}

uint64_t sub_10005CD10()
{
  return _swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for _TFUIBundleDetector()
{
  return self;
}

uint64_t sub_10005CD44@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v151 = a2;
  uint64_t v3 = sub_10000435C(&qword_1000A97D8);
  __chkstk_darwin(v3 - 8);
  uint64_t v148 = (uint64_t)&v102 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v155 = type metadata accessor for HoverEffect();
  uint64_t v150 = *(void *)(v155 - 8);
  uint64_t v5 = __chkstk_darwin(v155);
  uint64_t v149 = (char *)&v102 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v144 = a1;
  uint64_t v7 = *(void *)(a1 - 8);
  a1 -= 8;
  uint64_t v147 = v7;
  __chkstk_darwin(v5);
  uint64_t v145 = v8;
  uint64_t v146 = (char *)&v102 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v106 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v106);
  uint64_t v105 = (double *)((char *)&v102 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v104 = type metadata accessor for Capsule();
  __chkstk_darwin(v104);
  char v103 = (char *)&v102 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000435C(&qword_1000AA810);
  __chkstk_darwin(v11);
  uint64_t v124 = (uint64_t)&v102 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v117 = a1;
  uint64_t v154 = *(void *)(a1 + 24);
  type metadata accessor for ModifiedContent();
  uint64_t v13 = type metadata accessor for ModifiedContent();
  uint64_t v153 = *(void *)(a1 + 32);
  uint64_t v14 = v153;
  unint64_t v15 = sub_10006F478();
  uint64_t v175 = v14;
  unint64_t v176 = v15;
  uint64_t WitnessTable = swift_getWitnessTable();
  __int16 v174 = &protocol witness table for _FrameLayout;
  uint64_t v115 = v13;
  uint64_t v116 = swift_getWitnessTable();
  uint64_t v16 = type metadata accessor for HStack();
  uint64_t v118 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v112 = (char *)&v102 - v17;
  uint64_t v113 = v16;
  uint64_t v18 = type metadata accessor for ModifiedContent();
  uint64_t v152 = v18;
  uint64_t v119 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v114 = (char *)&v102 - v19;
  uint64_t v111 = swift_getWitnessTable();
  uint64_t v171 = v111;
  char v172 = &protocol witness table for _FlexFrameLayout;
  uint64_t v20 = swift_getWitnessTable();
  uint64_t v21 = sub_10000A368(&qword_1000AA820, &qword_1000AA810);
  uint64_t v167 = v18;
  uint64_t v168 = v11;
  uint64_t v110 = v11;
  uint64_t v169 = v20;
  uint64_t v170 = v21;
  uint64_t v109 = v20;
  uint64_t v108 = v21;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v137 = *(void *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2);
  uint64_t v107 = (char *)&v102 - v23;
  sub_100003F9C(&qword_1000AA828);
  uint64_t v139 = OpaqueTypeMetadata2;
  uint64_t v24 = type metadata accessor for ModifiedContent();
  uint64_t v134 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v131 = (char *)&v102 - v25;
  uint64_t v26 = type metadata accessor for ModifiedContent();
  uint64_t v132 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v130 = (char *)&v102 - v27;
  sub_100003F9C(&qword_1000AA830);
  uint64_t v28 = type metadata accessor for ModifiedContent();
  uint64_t v138 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v135 = (char *)&v102 - v29;
  uint64_t v30 = type metadata accessor for ModifiedContent();
  uint64_t v142 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  CGFloat v141 = (char *)&v102 - v31;
  uint64_t v167 = v152;
  uint64_t v168 = v11;
  uint64_t v169 = v20;
  uint64_t v170 = v21;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v33 = sub_10000A368(&qword_1000AA838, &qword_1000AA828);
  uint64_t v120 = OpaqueTypeConformance2;
  uint64_t v165 = OpaqueTypeConformance2;
  uint64_t v166 = v33;
  uint64_t v136 = v24;
  uint64_t v121 = swift_getWitnessTable();
  uint64_t v163 = v121;
  uint64_t v164 = &protocol witness table for _FixedSizeLayout;
  uint64_t v133 = v26;
  uint64_t v34 = swift_getWitnessTable();
  uint64_t v35 = sub_10000A368(&qword_1000AA840, &qword_1000AA830);
  uint64_t v122 = v34;
  uint64_t v161 = v34;
  uint64_t v162 = v35;
  uint64_t v140 = v28;
  uint64_t v36 = swift_getWitnessTable();
  unint64_t v37 = sub_10006F4CC();
  uint64_t v123 = v36;
  uint64_t v159 = v36;
  unint64_t v160 = v37;
  uint64_t v38 = swift_getWitnessTable();
  uint64_t v39 = sub_10006F520(&qword_1000AA850, (void (*)(uint64_t))&type metadata accessor for HoverEffect);
  uint64_t v143 = v30;
  uint64_t v167 = v30;
  uint64_t v168 = v155;
  uint64_t v129 = v38;
  uint64_t v169 = v38;
  uint64_t v170 = v39;
  uint64_t v127 = v39;
  uint64_t v40 = swift_getOpaqueTypeMetadata2();
  uint64_t v41 = *(void *)(v40 - 8);
  uint64_t v42 = __chkstk_darwin(v40);
  char v126 = (char *)&v102 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v42);
  id v128 = (char *)&v102 - v44;
  uint64_t v45 = v125;
  uint64_t v156 = v154;
  uint64_t v157 = v153;
  uint64_t v158 = v125;
  static VerticalAlignment.center.getter();
  uint64_t v46 = v112;
  HStack.init(alignment:spacing:content:)();
  uint64_t v47 = v117;
  uint64_t v48 = v45 + *(int *)(v117 + 56);
  uint64_t v49 = *(void *)v48;
  LOBYTE(OpaqueTypeConformance2) = *(unsigned char *)(v48 + 8);
  sub_10001F504(*(void *)v48, OpaqueTypeConformance2);
  sub_100013288(v49, OpaqueTypeConformance2);
  char v50 = OpaqueTypeConformance2;
  uint64_t v51 = v45;
  sub_10001F574(v49, v50);
  static Alignment.center.getter();
  uint64_t v52 = v113;
  unint64_t v53 = v114;
  View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  (*(void (**)(char *, uint64_t))(v118 + 8))(v46, v52);
  uint64_t v54 = v45 + *(int *)(v47 + 60);
  uint64_t v55 = *(void *)v54;
  LOBYTE(v49) = *(unsigned char *)(v54 + 8);
  sub_10001F504(*(void *)v54, v49);
  LOBYTE(v52) = sub_100012C58(v55, v49);
  sub_10001F574(v55, v49);
  uint64_t v56 = v124;
  sub_100075304(v52, v124);
  uint64_t v57 = v107;
  uint64_t v58 = v152;
  View.dynamicTypeSize<A>(_:)();
  sub_100009ED4(v56, &qword_1000AA810);
  (*(void (**)(char *, uint64_t))(v119 + 8))(v53, v58);
  id v59 = [self currentDevice];
  id v60 = [v59 userInterfaceIdiom];

  if (v60 == (id)6)
  {
    uint64_t v61 = enum case for RoundedCornerStyle.continuous(_:);
    uint64_t v62 = type metadata accessor for RoundedCornerStyle();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v62 - 8) + 104))(v103, v61, v62);
    sub_10006F520(&qword_1000AA868, (void (*)(uint64_t))&type metadata accessor for Capsule);
    uint64_t v63 = AnyShape.init<A>(_:)();
    uint64_t v64 = v144;
  }
  else
  {
    uint64_t v65 = *(void *)v54;
    char v66 = *(unsigned char *)(v54 + 8);
    sub_10001F504(*(void *)v54, v66);
    unsigned __int8 v67 = sub_100012C58(v65, v66);
    sub_10001F574(v65, v66);
    uint64_t v68 = v144;
    uint64_t v69 = v51 + *(int *)(v144 + 56);
    uint64_t v70 = *(void *)v69;
    char v71 = *(unsigned char *)(v69 + 8);
    sub_10001F504(*(void *)v69, v71);
    char v72 = sub_100013084(v70, v71);
    sub_10001F574(v70, v71);
    int v73 = v67;
    uint64_t v64 = v68;
    if (v73 == 4 || (double v74 = 10.0, v73 == 2))
    {
      if (v72) {
        double v74 = 12.0;
      }
      else {
        double v74 = 14.0;
      }
    }
    char v75 = v105;
    uint64_t v76 = (char *)v105 + *(int *)(v106 + 20);
    uint64_t v77 = enum case for RoundedCornerStyle.continuous(_:);
    uint64_t v78 = type metadata accessor for RoundedCornerStyle();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v78 - 8) + 104))(v76, v77, v78);
    *char v75 = v74;
    v75[1] = v74;
    sub_10006F520(&qword_1000AA858, (void (*)(uint64_t))&type metadata accessor for RoundedRectangle);
    uint64_t v63 = AnyShape.init<A>(_:)();
  }
  uint64_t v79 = v149;
  uint64_t v167 = v63;
  sub_10006F574();
  id v80 = v131;
  uint64_t v81 = v139;
  View.clipShape<A>(_:style:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v137 + 8))(v57, v81);
  uint64_t v82 = v130;
  uint64_t v83 = v136;
  View.fixedSize(horizontal:vertical:)();
  (*(void (**)(char *, uint64_t))(v134 + 8))(v80, v83);
  sub_10005E3A0(v64);
  char v84 = v135;
  uint64_t v85 = v133;
  View.zIndex(_:)();
  (*(void (**)(char *, uint64_t))(v132 + 8))(v82, v85);
  uint64_t v86 = v147;
  uint64_t v87 = v146;
  (*(void (**)(char *, uint64_t, uint64_t))(v147 + 16))(v146, v51, v64);
  unint64_t v88 = (*(unsigned __int8 *)(v86 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v86 + 80);
  uint64_t v89 = swift_allocObject();
  uint64_t v90 = v153;
  *(void *)(v89 + 16) = v154;
  *(void *)(v89 + 24) = v90;
  (*(void (**)(unint64_t, char *, uint64_t))(v86 + 32))(v89 + v88, v87, v64);
  uint64_t v91 = v141;
  uint64_t v92 = v140;
  View.onHover(perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v138 + 8))(v84, v92);
  uint64_t v93 = v148;
  sub_100009E70(v51 + *(int *)(v64 + 40), v148, &qword_1000A97D8);
  uint64_t v94 = v150;
  uint64_t v95 = v155;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v150 + 48))(v93, 1, v155) == 1)
  {
    static HoverEffect.automatic.getter();
    sub_100009ED4(v93, &qword_1000A97D8);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v94 + 32))(v79, v93, v95);
  }
  sub_10005E560(v64);
  uint64_t v96 = v126;
  uint64_t v97 = v143;
  View.hoverEffect<A>(_:isEnabled:)();
  (*(void (**)(char *, uint64_t))(v94 + 8))(v79, v95);
  (*(void (**)(char *, uint64_t))(v142 + 8))(v91, v97);
  uint64_t v98 = *(void (**)(char *, char *, uint64_t))(v41 + 16);
  long long v99 = v128;
  v98(v128, v96, v40);
  uint64_t v100 = *(void (**)(char *, uint64_t))(v41 + 8);
  v100(v96, v40);
  v98(v151, v99, v40);
  return ((uint64_t (*)(char *, uint64_t))v100)(v99, v40);
}

uint64_t sub_10005DF54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, char *a3@<X8>)
{
  uint64_t v38 = a3;
  uint64_t v5 = type metadata accessor for TFComponent();
  uint64_t v32 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v31 - v6;
  uint64_t v8 = type metadata accessor for ModifiedContent();
  uint64_t v36 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v31 - v9;
  uint64_t v11 = type metadata accessor for ModifiedContent();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v33 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v34 = v10;
  uint64_t v35 = (char *)&v31 - v15;
  uint64_t v16 = v7;
  uint64_t v17 = v32;
  uint64_t v37 = a2;
  sub_10005E314();
  int v18 = *(unsigned __int8 *)(a1 + 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v16, a1, v5);
  if (v18 == 1)
  {
    uint64_t v19 = &v16[*(int *)(v5 + 52)];
    uint64_t v20 = *(void *)v19;
    char v21 = v19[8];
    sub_10001F504(*(void *)v19, v21);
    char v22 = sub_100012C58(v20, v21);
    sub_10001F574(v20, v21);
    sub_100075204(v22);
  }
  (*(void (**)(char *, uint64_t))(v17 + 8))(v16, v5);
  static Alignment.center.getter();
  unint64_t v23 = sub_10006F478();
  uint64_t v41 = v37;
  unint64_t v42 = v23;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v25 = v33;
  uint64_t v26 = v34;
  View.frame(width:height:alignment:)();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v26, v8);
  uint64_t v39 = WitnessTable;
  uint64_t v40 = &protocol witness table for _FrameLayout;
  swift_getWitnessTable();
  uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  uint64_t v28 = v35;
  v27(v35, v25, v11);
  uint64_t v29 = *(void (**)(char *, uint64_t))(v12 + 8);
  v29(v25, v11);
  v27(v38, v28, v11);
  return ((uint64_t (*)(char *, uint64_t))v29)(v28, v11);
}

uint64_t sub_10005E314()
{
  return swift_release();
}

double sub_10005E3A0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 - 8);
  uint64_t v4 = __chkstk_darwin(a1);
  uint64_t v6 = &v12[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  BOOL v7 = sub_10005E560(v4);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v3 + 16))(v6, v1, a1);
  if (v7)
  {
    uint64_t v8 = &v6[*(int *)(a1 + 60)];
    char v9 = *v8;
    uint64_t v10 = *((void *)v8 + 1);
    v12[8] = v9;
    uint64_t v13 = v10;
    sub_10000435C((uint64_t *)&unk_1000AA870);
    State.wrappedValue.getter();
    (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v6, a1);
    if (v14) {
      return 1000.0;
    }
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v6, a1);
  }
  return 0.0;
}

uint64_t sub_10005E4EC()
{
  return State.wrappedValue.setter();
}

BOOL sub_10005E560(uint64_t a1)
{
  uint64_t v3 = sub_10000435C(&qword_1000A97D8);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100009E70(v1 + *(int *)(a1 + 40), (uint64_t)v5, &qword_1000A97D8);
  uint64_t v6 = type metadata accessor for HoverEffect();
  BOOL v7 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6) != 1;
  sub_100009ED4((uint64_t)v5, &qword_1000A97D8);
  return v7;
}

uint64_t sub_10005E64C()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

uint64_t sub_10005E668@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000435C(&qword_1000AAE00);
  uint64_t v6 = v5 - 8;
  __chkstk_darwin(v5);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  char v9 = *v2;
  uint64_t v10 = *((void *)v2 + 1);
  uint64_t v11 = swift_allocObject();
  *(unsigned char *)(v11 + 16) = v9;
  *(void *)(v11 + 24) = v10;
  uint64_t v12 = sub_10000435C(&qword_1000AAE08);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v8, a1, v12);
  uint64_t v13 = (uint64_t (**)())&v8[*(int *)(v6 + 44)];
  void *v13 = sub_100073BB8;
  v13[1] = (uint64_t (*)())v11;
  uint64_t KeyPath = swift_getKeyPath();
  v17[8] = v9;
  uint64_t v18 = v10;
  swift_retain();
  sub_10000435C((uint64_t *)&unk_1000AA870);
  State.wrappedValue.getter();
  LOBYTE(v10) = v19;
  sub_100009E70((uint64_t)v8, a2, &qword_1000AAE00);
  uint64_t v15 = a2 + *(int *)(sub_10000435C(&qword_1000AAE10) + 36);
  *(void *)uint64_t v15 = KeyPath;
  *(unsigned char *)(v15 + 8) = v10;
  return sub_100009ED4((uint64_t)v8, &qword_1000AAE00);
}

uint64_t sub_10005E7F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v165 = a1;
  uint64_t v163 = sub_10000435C(&qword_1000AA8E8);
  uint64_t v133 = *(void *)(v163 - 8);
  __chkstk_darwin(v163);
  uint64_t v131 = (char *)&v127 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v164 = sub_10000435C((uint64_t *)&unk_1000AA8F0);
  id v137 = *(id *)(v164 - 8);
  uint64_t v4 = __chkstk_darwin(v164);
  uint64_t v130 = (char *)&v127 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v135 = (char *)&v127 - v6;
  uint64_t v156 = type metadata accessor for HighlightHoverEffect();
  uint64_t v145 = *(void *)(v156 - 8);
  __chkstk_darwin(v156);
  uint64_t v144 = (char *)&v127 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v141 = type metadata accessor for AccessibilityActionKind();
  uint64_t v140 = *(void *)(v141 - 8);
  __chkstk_darwin(v141);
  uint64_t v139 = (char *)&v127 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v9 = (int *)type metadata accessor for TFToggle(0);
  uint64_t v151 = (char *)*((void *)v9 - 1);
  uint64_t v10 = *((void *)v151 + 8);
  __chkstk_darwin(v9);
  uint64_t v149 = (uint64_t *)((char *)&v127 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = type metadata accessor for TFComponentBackground(0);
  __chkstk_darwin(v11 - 8);
  uint64_t v129 = (uint64_t)&v127 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v159 = (int *)type metadata accessor for TFLabel(0);
  __chkstk_darwin(v159);
  char v14 = (uint64_t *)((char *)&v127 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = sub_10000435C(&qword_1000AA250);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v127 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v148 = sub_10000435C(&qword_1000AA900);
  __chkstk_darwin(v148);
  id v128 = (char *)&v127 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v134 = sub_10000435C(&qword_1000AA908);
  uint64_t v132 = *(void *)(v134 - 8);
  __chkstk_darwin(v134);
  uint64_t v150 = (void (**)(char *, char *, uint64_t))((char *)&v127 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v153 = sub_10000435C(&qword_1000AA910);
  __chkstk_darwin(v153);
  uint64_t v138 = (char *)&v127 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v158 = sub_10000435C(&qword_1000AA918);
  uint64_t v143 = *(void *)(v158 - 8);
  uint64_t v21 = __chkstk_darwin(v158);
  uint64_t v136 = (char *)&v127 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v142 = (char *)&v127 - v23;
  uint64_t v160 = sub_10000435C(&qword_1000AA920);
  __chkstk_darwin(v160);
  uint64_t v162 = (uint64_t)&v127 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v152 = sub_10000435C(&qword_1000AA928);
  __chkstk_darwin(v152);
  uint64_t v155 = (char *)&v127 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v161 = sub_10000435C(&qword_1000AA930);
  __chkstk_darwin(v161);
  uint64_t v157 = (char *)&v127 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for ButtonToggleStyle();
  uint64_t v147 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v29 = (char *)&v127 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = sub_10000435C(&qword_1000AA938);
  uint64_t v146 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v32 = (char *)&v127 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = sub_10000435C(&qword_1000AA940);
  uint64_t v34 = __chkstk_darwin(v33);
  uint64_t v36 = (char *)&v127 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = __chkstk_darwin(v34);
  int v40 = *((unsigned __int8 *)v2 + v9[7]);
  uint64_t v154 = v37;
  if (v40 == 1)
  {
    uint64_t v41 = (char *)v2 + v9[8];
    uint64_t v42 = *(void *)v41;
    uint64_t v43 = *((void *)v41 + 1);
    LOBYTE(v41) = v41[16];
    uint64_t v166 = v42;
    uint64_t v167 = v43;
    char v168 = (char)v41;
    uint64_t v150 = v39;
    uint64_t v151 = (char *)&v127 - v38;
    sub_10000435C(&qword_1000A9F20);
    uint64_t v44 = Binding.projectedValue.getter();
    uint64_t v149 = &v127;
    __chkstk_darwin(v44);
    sub_10006F520(&qword_1000AA958, (void (*)(uint64_t))type metadata accessor for TFLabel);
    Toggle.init(isOn:label:)();
    ButtonToggleStyle.init()();
    uint64_t v45 = sub_10000A368((unint64_t *)&unk_1000AA980, &qword_1000AA938);
    uint64_t v46 = sub_10006F520(&qword_1000AA130, (void (*)(uint64_t))&type metadata accessor for ButtonToggleStyle);
    View.toggleStyle<A>(_:)();
    (*(void (**)(char *, uint64_t))(v147 + 8))(v29, v27);
    (*(void (**)(char *, uint64_t))(v146 + 8))(v32, v30);
    uint64_t v47 = v150;
    uint64_t v48 = v151;
    uint64_t v49 = v154;
    v150[4](v151, v36, v154);
    v47[2](v155, v48, v49);
    swift_storeEnumTagMultiPayload();
    uint64_t v169 = v30;
    uint64_t v170 = (ValueMetadata *)v27;
    unint64_t v171 = v45;
    unint64_t v172 = v46;
    swift_getOpaqueTypeConformance2();
    unint64_t v50 = sub_10006FD0C();
    uint64_t v51 = sub_10006F520(&qword_1000AA880, (void (*)(uint64_t))&type metadata accessor for HighlightHoverEffect);
    uint64_t v169 = v153;
    uint64_t v170 = (ValueMetadata *)v156;
    unint64_t v171 = v50;
    unint64_t v172 = v51;
    swift_getOpaqueTypeConformance2();
    uint64_t v52 = (uint64_t)v157;
    _ConditionalContent<>.init(storage:)();
    sub_100009E70(v52, v162, &qword_1000AA930);
    swift_storeEnumTagMultiPayload();
    sub_10006FB64();
    uint64_t v53 = sub_10000A368(&qword_1000AA970, &qword_1000AA8E8);
    unint64_t v54 = sub_10006F818();
    uint64_t v169 = v163;
    uint64_t v170 = &type metadata for TFPressedButtonStyle;
    unint64_t v171 = v53;
    unint64_t v172 = v54;
    swift_getOpaqueTypeConformance2();
    _ConditionalContent<>.init(storage:)();
    sub_100009ED4(v52, &qword_1000AA930);
    return ((uint64_t (*)(char *, uint64_t))v47[1])(v48, v49);
  }
  else
  {
    uint64_t v56 = v159;
    uint64_t v146 = v30;
    uint64_t v147 = v27;
    uint64_t v57 = v2;
    uint64_t v58 = self;
    id v59 = [v58 currentDevice];
    id v60 = [v59 userInterfaceIdiom];

    if (v60 == (id)6)
    {
      id v137 = v58;
      uint64_t v62 = *v57;
      uint64_t v61 = v57[1];
      uint64_t v63 = (char *)v57 + v9[5];
      uint64_t v64 = v57;
      uint64_t v65 = v56;
      char v66 = (char *)v14 + v56[5];
      uint64_t v67 = type metadata accessor for SymbolRenderingMode();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v67 - 8) + 16))(v66, v63, v67);
      uint64_t v68 = (uint64_t)v64;
      uint64_t v69 = (void *)((char *)v64 + v9[6]);
      uint64_t v71 = *v69;
      uint64_t v70 = v69[1];
      uint64_t v72 = v68 + v9[8];
      uint64_t v73 = v68;
      uint64_t v74 = *(void *)v72;
      char v75 = *(ValueMetadata **)(v72 + 8);
      LOBYTE(v72) = *(unsigned char *)(v72 + 16);
      uint64_t v169 = v74;
      uint64_t v170 = v75;
      LOBYTE(v171) = v72;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_10000435C(&qword_1000A9F20);
      Binding.wrappedValue.getter();
      char v76 = v166;
      void *v14 = v62;
      v14[1] = v61;
      uint64_t v77 = (void *)((char *)v14 + v65[6]);
      *uint64_t v77 = v71;
      v77[1] = v70;
      *((unsigned char *)v14 + v65[7]) = v76;
      uint64_t v78 = (char *)v14 + v65[8];
      *(void *)uint64_t v78 = swift_getKeyPath();
      v78[8] = 0;
      uint64_t v79 = (char *)v14 + v65[9];
      *(void *)uint64_t v79 = swift_getKeyPath();
      v79[8] = 0;
      uint64_t v80 = static Alignment.center.getter();
      sub_100035858(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v17, 0.0, 1, INFINITY, 0, v80, v81);
      sub_10006FFA8((uint64_t)v14, type metadata accessor for TFLabel);
      uint64_t v82 = v129;
      uint64_t v127 = v73;
      sub_10005FF6C(v129);
      uint64_t v83 = static Alignment.center.getter();
      uint64_t v85 = v84;
      uint64_t v86 = (uint64_t)v128;
      uint64_t v87 = (uint64_t)&v128[*(int *)(v148 + 36)];
      sub_10006FF40(v82, v87, type metadata accessor for TFComponentBackground);
      unint64_t v88 = (uint64_t *)(v87 + *(int *)(sub_10000435C(&qword_1000AA968) + 36));
      *unint64_t v88 = v83;
      v88[1] = v85;
      sub_100009E70((uint64_t)v17, v86, &qword_1000AA250);
      sub_10006FFA8(v82, type metadata accessor for TFComponentBackground);
      sub_100009ED4((uint64_t)v17, &qword_1000AA250);
      uint64_t v159 = (int *)type metadata accessor for TFToggle;
      uint64_t v89 = (uint64_t)v149;
      sub_10006FF40(v73, (uint64_t)v149, type metadata accessor for TFToggle);
      unint64_t v90 = (v151[80] + 16) & ~(unint64_t)v151[80];
      uint64_t v91 = swift_allocObject();
      sub_100070DF0(v89, v91 + v90, type metadata accessor for TFToggle);
      unint64_t v92 = sub_10006FDEC();
      uint64_t v93 = v148;
      View.onTapGesture(count:perform:)();
      swift_release();
      sub_100009ED4(v86, &qword_1000AA900);
      sub_10006FF40(v127, v89, (uint64_t (*)(void))v159);
      uint64_t v94 = swift_allocObject();
      sub_100070DF0(v89, v94 + v90, type metadata accessor for TFToggle);
      uint64_t v95 = v139;
      static AccessibilityActionKind.default.getter();
      uint64_t v169 = v93;
      uint64_t v170 = (ValueMetadata *)v92;
      swift_getOpaqueTypeConformance2();
      uint64_t v96 = (uint64_t)v138;
      uint64_t v97 = v134;
      uint64_t v98 = (char *)v150;
      View.accessibilityAction(_:_:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v140 + 8))(v95, v141);
      (*(void (**)(char *, uint64_t))(v132 + 8))(v98, v97);
      long long v99 = v144;
      static CustomHoverEffect<>.highlight.getter();
      id v100 = [v137 currentDevice];
      [v100 userInterfaceIdiom];

      unint64_t v101 = sub_10006FD0C();
      uint64_t v102 = sub_10006F520(&qword_1000AA880, (void (*)(uint64_t))&type metadata accessor for HighlightHoverEffect);
      char v103 = v136;
      uint64_t v104 = v153;
      uint64_t v105 = (ValueMetadata *)v156;
      View.hoverEffect<A>(_:isEnabled:)();
      (*(void (**)(char *, ValueMetadata *))(v145 + 8))(v99, v105);
      sub_100009ED4(v96, &qword_1000AA910);
      uint64_t v106 = v143;
      uint64_t v107 = v142;
      uint64_t v108 = v158;
      (*(void (**)(char *, char *, uint64_t))(v143 + 32))(v142, v103, v158);
      (*(void (**)(char *, char *, uint64_t))(v106 + 16))(v155, v107, v108);
      swift_storeEnumTagMultiPayload();
      uint64_t v109 = sub_10000A368((unint64_t *)&unk_1000AA980, &qword_1000AA938);
      uint64_t v110 = sub_10006F520(&qword_1000AA130, (void (*)(uint64_t))&type metadata accessor for ButtonToggleStyle);
      uint64_t v169 = v146;
      uint64_t v170 = (ValueMetadata *)v147;
      unint64_t v171 = v109;
      unint64_t v172 = v110;
      swift_getOpaqueTypeConformance2();
      uint64_t v169 = v104;
      uint64_t v170 = v105;
      unint64_t v171 = v101;
      unint64_t v172 = v102;
      swift_getOpaqueTypeConformance2();
      uint64_t v111 = (uint64_t)v157;
      _ConditionalContent<>.init(storage:)();
      sub_100009E70(v111, v162, &qword_1000AA930);
      swift_storeEnumTagMultiPayload();
      sub_10006FB64();
      uint64_t v112 = sub_10000A368(&qword_1000AA970, &qword_1000AA8E8);
      unint64_t v113 = sub_10006F818();
      uint64_t v169 = v163;
      uint64_t v170 = &type metadata for TFPressedButtonStyle;
      unint64_t v171 = v112;
      unint64_t v172 = v113;
      swift_getOpaqueTypeConformance2();
      _ConditionalContent<>.init(storage:)();
      sub_100009ED4(v111, &qword_1000AA930);
      return (*(uint64_t (**)(char *, uint64_t))(v106 + 8))(v107, v108);
    }
    else
    {
      uint64_t v114 = (uint64_t)v149;
      sub_10006FF40((uint64_t)v57, (uint64_t)v149, type metadata accessor for TFToggle);
      unint64_t v115 = (v151[80] + 16) & ~(unint64_t)v151[80];
      uint64_t v116 = swift_allocObject();
      uint64_t v117 = sub_100070DF0(v114, v116 + v115, type metadata accessor for TFToggle);
      __chkstk_darwin(v117);
      sub_10000435C(&qword_1000AA948);
      sub_10006FA94();
      uint64_t v118 = v131;
      Button.init(action:label:)();
      uint64_t KeyPath = swift_getKeyPath();
      uint64_t v169 = 0;
      uint64_t v170 = 0;
      LOBYTE(v171) = 0;
      unint64_t v172 = KeyPath;
      char v173 = 0;
      uint64_t v120 = sub_10000A368(&qword_1000AA970, &qword_1000AA8E8);
      unint64_t v121 = sub_10006F818();
      uint64_t v122 = v130;
      uint64_t v123 = v163;
      View.buttonStyle<A>(_:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v133 + 8))(v118, v123);
      uint64_t v124 = (void (**)(uint64_t, void, void))v137;
      uint64_t v125 = v135;
      uint64_t v126 = v164;
      (*((void (**)(char *, char *, uint64_t))v137 + 4))(v135, v122, v164);
      ((void (**)(uint64_t, char *, uint64_t))v124)[2](v162, v125, v126);
      swift_storeEnumTagMultiPayload();
      sub_10006FB64();
      uint64_t v169 = v123;
      uint64_t v170 = &type metadata for TFPressedButtonStyle;
      unint64_t v171 = v120;
      unint64_t v172 = v121;
      swift_getOpaqueTypeConformance2();
      _ConditionalContent<>.init(storage:)();
      return ((uint64_t (*)(char *, uint64_t))v124[1])(v125, v126);
    }
  }
}

uint64_t sub_10005FE20@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = type metadata accessor for TFToggle(0);
  uint64_t v7 = (char *)a1 + *(int *)(v6 + 20);
  uint64_t v8 = (int *)type metadata accessor for TFLabel(0);
  char v9 = (char *)a2 + v8[5];
  uint64_t v10 = type metadata accessor for SymbolRenderingMode();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v9, v7, v10);
  uint64_t v11 = (uint64_t *)((char *)a1 + *(int *)(v6 + 24));
  uint64_t v13 = *v11;
  uint64_t v12 = v11[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10000435C(&qword_1000A9F20);
  Binding.wrappedValue.getter();
  *a2 = v5;
  a2[1] = v4;
  char v14 = (void *)((char *)a2 + v8[6]);
  void *v14 = v13;
  v14[1] = v12;
  *((unsigned char *)a2 + v8[7]) = v18;
  uint64_t v15 = (char *)a2 + v8[8];
  *(void *)uint64_t v15 = swift_getKeyPath();
  v15[8] = 0;
  uint64_t v16 = (char *)a2 + v8[9];
  uint64_t result = swift_getKeyPath();
  *(void *)uint64_t v16 = result;
  v16[8] = 0;
  return result;
}

uint64_t sub_10005FF6C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000435C(&qword_1000AA3C8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (uint64_t *)((char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for TFToggle(0);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = v1 + *(int *)(v8 + 36);
  uint64_t v12 = *(void *)v11;
  char v13 = *(unsigned char *)(v11 + 8);
  sub_10001F504(*(void *)v11, v13);
  char v14 = sub_100012C58(v12, v13);
  sub_10001F574(v12, v13);
  sub_10006FF40(v2, (uint64_t)v10, type metadata accessor for TFToggle);
  if ((v14 - 2) > 2u)
  {
    char v18 = 0;
  }
  else
  {
    uint64_t v15 = &v10[*(int *)(v7 + 32)];
    uint64_t v16 = *(void *)v15;
    uint64_t v17 = *((void *)v15 + 1);
    LOBYTE(v15) = v15[16];
    uint64_t v37 = v16;
    uint64_t v38 = v17;
    char v39 = (char)v15;
    sub_10000435C(&qword_1000A9F20);
    Binding.wrappedValue.getter();
    char v18 = v40 ^ 1;
  }
  sub_10006FFA8((uint64_t)v10, type metadata accessor for TFToggle);
  uint64_t v19 = v2 + *(int *)(v7 + 32);
  uint64_t v20 = *(void *)v19;
  uint64_t v21 = *(void *)(v19 + 8);
  LOBYTE(v19) = *(unsigned char *)(v19 + 16);
  uint64_t v37 = v20;
  uint64_t v38 = v21;
  char v39 = v19;
  sub_10000435C(&qword_1000A9F20);
  Binding.wrappedValue.getter();
  char v22 = v40;
  uint64_t v23 = *(void *)v11;
  char v24 = *(unsigned char *)(v11 + 8);
  sub_10001F504(*(void *)v11, v24);
  char v25 = sub_100012C58(v23, v24);
  sub_10001F574(v23, v24);
  BOOL v26 = (v25 - 2) < 3u;
  uint64_t KeyPath = swift_getKeyPath();
  *uint64_t v6 = swift_getKeyPath();
  sub_10000435C((uint64_t *)&unk_1000A8F70);
  swift_storeEnumTagMultiPayload();
  uint64_t v28 = swift_getKeyPath();
  uint64_t v29 = swift_getKeyPath();
  *(unsigned char *)a1 = v18 & 1;
  *(unsigned char *)(a1 + 1) = v22;
  *(unsigned char *)(a1 + 2) = v26;
  *(void *)(a1 + 8) = KeyPath;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v30 = (int *)type metadata accessor for TFComponentBackground(0);
  sub_100009F30((uint64_t)v6, a1 + v30[8], &qword_1000AA3C8);
  uint64_t v31 = a1 + v30[9];
  *(void *)uint64_t v31 = v28;
  *(unsigned char *)(v31 + 8) = 0;
  uint64_t v32 = a1 + v30[10];
  *(void *)uint64_t v32 = v29;
  *(unsigned char *)(v32 + 8) = 0;
  uint64_t v33 = a1 + v30[11];
  *(void *)uint64_t v33 = swift_getKeyPath();
  *(unsigned char *)(v33 + 8) = 0;
  uint64_t v34 = a1 + v30[12];
  uint64_t result = swift_getKeyPath();
  *(void *)uint64_t v34 = result;
  *(unsigned char *)(v34 + 8) = 0;
  return result;
}

uint64_t sub_100060274()
{
  return swift_release();
}

uint64_t sub_100060330@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for TFComponentBackground(0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for TFLabel(0);
  uint64_t v8 = (int *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (void *)((char *)v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = *a1;
  uint64_t v11 = a1[1];
  char v13 = (int *)type metadata accessor for TFToggle(0);
  char v14 = (char *)a1 + v13[5];
  uint64_t v15 = (char *)v10 + v8[7];
  uint64_t v16 = type metadata accessor for SymbolRenderingMode();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v15, v14, v16);
  uint64_t v17 = (uint64_t *)((char *)a1 + v13[6]);
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  uint64_t v20 = (char *)a1 + v13[8];
  uint64_t v21 = *(void *)v20;
  uint64_t v22 = *((void *)v20 + 1);
  LOBYTE(v20) = v20[16];
  v33[1] = v21;
  v33[2] = v22;
  char v34 = (char)v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10000435C(&qword_1000A9F20);
  Binding.wrappedValue.getter();
  char v23 = v35;
  *uint64_t v10 = v12;
  v10[1] = v11;
  char v24 = (void *)((char *)v10 + v8[8]);
  *char v24 = v19;
  v24[1] = v18;
  *((unsigned char *)v10 + v8[9]) = v23;
  char v25 = (char *)v10 + v8[10];
  *(void *)char v25 = swift_getKeyPath();
  v25[8] = 0;
  BOOL v26 = (char *)v10 + v8[11];
  *(void *)BOOL v26 = swift_getKeyPath();
  v26[8] = 0;
  sub_10005FF6C((uint64_t)v6);
  uint64_t v27 = static Alignment.center.getter();
  uint64_t v29 = v28;
  uint64_t v30 = a2 + *(int *)(sub_10000435C(&qword_1000AA948) + 36);
  sub_10006FF40((uint64_t)v6, v30, type metadata accessor for TFComponentBackground);
  uint64_t v31 = (uint64_t *)(v30 + *(int *)(sub_10000435C(&qword_1000AA968) + 36));
  uint64_t *v31 = v27;
  v31[1] = v29;
  sub_10006FF40((uint64_t)v10, a2, type metadata accessor for TFLabel);
  sub_10006FFA8((uint64_t)v6, type metadata accessor for TFComponentBackground);
  return sub_10006FFA8((uint64_t)v10, type metadata accessor for TFLabel);
}

uint64_t sub_1000605C0@<X0>(uint64_t a1@<X8>)
{
  return sub_10006107C(&qword_1000AA8D8, (void (*)(uint64_t))sub_10005E7F4, &qword_1000AA8E0, a1);
}

uint64_t sub_1000605E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000435C(&qword_1000AAB30);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000435C(&qword_1000AAB20);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006077C(v2, (uint64_t)v6);
  uint64_t v10 = v2 + *(int *)(type metadata accessor for TFLabel(0) + 36);
  uint64_t v11 = *(void *)v10;
  char v12 = *(unsigned char *)(v10 + 8);
  sub_10001F504(*(void *)v10, v12);
  char v13 = sub_100013724(v11, v12);
  sub_10001F574(v11, v12);
  if (v13) {
    uint64_t v14 = static Alignment.leading.getter();
  }
  else {
    uint64_t v14 = static Alignment.center.getter();
  }
  sub_1000358D0(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v9, 0.0, 1, INFINITY, 0, v14, v15);
  sub_100009ED4((uint64_t)v6, &qword_1000AAB30);
  return sub_100009F30((uint64_t)v9, a1, &qword_1000AAB20);
}

uint64_t sub_10006077C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10000435C(&qword_1000AAB38);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000435C(&qword_1000AAB40);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000435C(&qword_1000AAB48);
  uint64_t v53 = *(void *)(v10 - 8);
  uint64_t v54 = v10;
  __chkstk_darwin(v10);
  char v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = sub_10000435C(&qword_1000AAB50);
  uint64_t v13 = __chkstk_darwin(v55);
  uint64_t v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v48 - v16;
  uint64_t v18 = type metadata accessor for TFLabel(0);
  uint64_t v19 = (uint64_t *)(a1 + *(int *)(v18 + 24));
  unint64_t v20 = v19[1];
  if (!v20) {
    goto LABEL_8;
  }
  uint64_t v21 = *v19;
  uint64_t v22 = HIBYTE(v20) & 0xF;
  if ((v20 & 0x2000000000000000) == 0) {
    uint64_t v22 = v21 & 0xFFFFFFFFFFFFLL;
  }
  if (v22)
  {
    uint64_t v23 = v18;
    uint64_t v50 = v7;
    uint64_t v51 = a2;
    uint64_t v49 = &v48;
    uint64_t v24 = __chkstk_darwin(v18);
    *(&v48 - 4) = v26;
    *(&v48 - 3) = v25;
    *(&v48 - 2) = a1;
    __chkstk_darwin(v24);
    *(&v48 - 2) = a1;
    sub_100059060();
    sub_100070D14();
    uint64_t v52 = v4;
    Label.init(title:icon:)();
    LODWORD(v49) = static Edge.Set.horizontal.getter();
    uint64_t v27 = a1 + *(int *)(v23 + 36);
    uint64_t v28 = *(void *)v27;
    char v29 = *(unsigned char *)(v27 + 8);
    sub_10001F504(*(void *)v27, v29);
    int v30 = sub_100013724(v28, v29);
    sub_10001F574(v28, v29);
    if (v30 == 2)
    {
      uint64_t v31 = a1 + *(int *)(v23 + 32);
      uint64_t v32 = *(void *)v31;
      char v33 = *(unsigned char *)(v31 + 8);
      sub_10001F504(*(void *)v31, v33);
      sub_100012C58(v32, v33);
      sub_10001F574(v32, v33);
    }
    EdgeInsets.init(_all:)();
    uint64_t v35 = v34;
    uint64_t v37 = v36;
    uint64_t v39 = v38;
    uint64_t v41 = v40;
    uint64_t v43 = v53;
    uint64_t v42 = v54;
    (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v15, v12, v54);
    uint64_t v44 = &v15[*(int *)(v55 + 36)];
    *uint64_t v44 = (char)v49;
    *((void *)v44 + 1) = v35;
    *((void *)v44 + 2) = v37;
    *((void *)v44 + 3) = v39;
    *((void *)v44 + 4) = v41;
    v44[40] = 0;
    (*(void (**)(char *, uint64_t))(v43 + 8))(v12, v42);
    uint64_t v45 = &qword_1000AAB50;
    sub_100009F30((uint64_t)v15, (uint64_t)v17, &qword_1000AAB50);
    sub_100009E70((uint64_t)v17, (uint64_t)v9, &qword_1000AAB50);
    swift_storeEnumTagMultiPayload();
    sub_100070C74();
    _ConditionalContent<>.init(storage:)();
    uint64_t v46 = (uint64_t)v17;
  }
  else
  {
LABEL_8:
    sub_100060C84((uint64_t)v6);
    uint64_t v45 = &qword_1000AAB38;
    sub_100009E70((uint64_t)v6, (uint64_t)v9, &qword_1000AAB38);
    swift_storeEnumTagMultiPayload();
    sub_100070C74();
    sub_100070D14();
    _ConditionalContent<>.init(storage:)();
    uint64_t v46 = (uint64_t)v6;
  }
  return sub_100009ED4(v46, v45);
}

uint64_t sub_100060C10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v7 = *(unsigned char *)(a3 + *(int *)(type metadata accessor for TFLabel(0) + 28));
  uint64_t KeyPath = swift_getKeyPath();
  *(void *)a4 = a1;
  *(void *)(a4 + 8) = a2;
  *(unsigned char *)(a4 + 16) = v7;
  *(void *)(a4 + 24) = KeyPath;
  *(unsigned char *)(a4 + 32) = 0;

  return swift_bridgeObjectRetain();
}

uint64_t sub_100060C84@<X0>(uint64_t a1@<X8>)
{
  uint64_t v26 = sub_10000435C(&qword_1000AAB78);
  __chkstk_darwin(v26);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for SymbolRenderingMode();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (int *)type metadata accessor for TFSymbol(0);
  uint64_t v10 = __chkstk_darwin(v9);
  char v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v23 - v13;
  uint64_t v15 = v1[1];
  if (v15)
  {
    uint64_t v23 = *v1;
    uint64_t v16 = type metadata accessor for TFLabel(0);
    uint64_t v24 = v4;
    uint64_t v25 = a1;
    uint64_t v17 = v16;
    char v18 = *((unsigned char *)v1 + *(int *)(v16 + 28));
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, (char *)v1 + *(int *)(v16 + 20), v5);
    LOBYTE(v17) = *(void *)((char *)v1 + *(int *)(v17 + 24) + 8) == 0;
    swift_bridgeObjectRetain();
    uint64_t v19 = static Font.title3.getter();
    *(void *)char v12 = v23;
    *((void *)v12 + 1) = v15;
    unsigned char v12[16] = v18;
    *((void *)v12 + 3) = v19;
    *((void *)v12 + 4) = 0;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v12[v9[8]], v8, v5);
    v12[v9[9]] = 0;
    v12[v9[10]] = v17;
    unint64_t v20 = &v12[v9[11]];
    *(void *)unint64_t v20 = swift_getKeyPath();
    v20[8] = 0;
    uint64_t v21 = &v12[v9[12]];
    *(void *)uint64_t v21 = swift_getKeyPath();
    v21[8] = 0;
    sub_100070DF0((uint64_t)v12, (uint64_t)v14, type metadata accessor for TFSymbol);
    sub_10006FF40((uint64_t)v14, (uint64_t)v24, type metadata accessor for TFSymbol);
    swift_storeEnumTagMultiPayload();
    sub_10006F520(&qword_1000A9C30, (void (*)(uint64_t))type metadata accessor for TFSymbol);
    _ConditionalContent<>.init(storage:)();
    return sub_10006FFA8((uint64_t)v14, type metadata accessor for TFSymbol);
  }
  else
  {
    swift_storeEnumTagMultiPayload();
    sub_10006F520(&qword_1000A9C30, (void (*)(uint64_t))type metadata accessor for TFSymbol);
    return _ConditionalContent<>.init(storage:)();
  }
}

uint64_t sub_100061018()
{
  sub_1000580A8();
  EnvironmentValues.subscript.getter();
  return v1;
}

uint64_t sub_100061054@<X0>(uint64_t a1@<X8>)
{
  return sub_10006107C(&qword_1000AAB20, (void (*)(uint64_t))sub_1000605E8, &qword_1000AAB28, a1);
}

uint64_t sub_10006107C@<X0>(uint64_t *a1@<X2>, void (*a2)(uint64_t)@<X3>, uint64_t *a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_10000435C(a1);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = &v16[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  a2(v9);
  v16[15] = 0;
  State.init(wrappedValue:)();
  char v12 = v16[16];
  uint64_t v13 = v17;
  sub_100009E70((uint64_t)v11, a4, a1);
  uint64_t v14 = a4 + *(int *)(sub_10000435C(a3) + 36);
  *(unsigned char *)uint64_t v14 = v12;
  *(void *)(v14 + 8) = v13;
  return sub_100009ED4((uint64_t)v11, a1);
}

uint64_t sub_100061164@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v67 = a1;
  uint64_t v3 = type metadata accessor for TFSymbol(0);
  uint64_t v4 = __chkstk_darwin(v3);
  char v66 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v65 = (char *)&v61 - v6;
  uint64_t v77 = sub_10000435C(&qword_1000AAAE8) - 8;
  __chkstk_darwin(v77);
  uint64_t v80 = (uint64_t *)((char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = sub_10000435C((uint64_t *)&unk_1000AAAF0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000435C(&qword_1000AA2A8);
  uint64_t v12 = v11 - 8;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000435C(&qword_1000AAB00);
  __chkstk_darwin(v15 - 8);
  uint64_t v79 = (uint64_t)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = sub_10000435C(&qword_1000AAB08);
  __chkstk_darwin(v78);
  uint64_t v64 = (char *)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = sub_10000435C(&qword_1000AAAD8);
  __chkstk_darwin(v62);
  uint64_t v63 = (char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = static HorizontalAlignment.center.getter();
  uint64_t v74 = static VerticalAlignment.firstTextBaseline.getter();
  uint64_t v76 = v1;
  sub_10006189C((uint64_t)v81);
  uint64_t v19 = v81[0];
  int v70 = v82;
  uint64_t v73 = v83;
  uint64_t v71 = v81[1];
  uint64_t v72 = v84;
  uint64_t v20 = *(void *)(v1 + 24);
  uint64_t KeyPath = swift_getKeyPath();
  swift_retain();
  uint64_t v21 = sub_100061994();
  uint64_t v22 = v2 + *(int *)(v3 + 32);
  uint64_t v23 = type metadata accessor for SymbolRenderingMode();
  uint64_t v24 = *(void *)(v23 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v10, v22, v23);
  uint64_t v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56);
  uint64_t v68 = v10;
  v25(v10, 0, 1, v23);
  uint64_t v26 = swift_getKeyPath();
  uint64_t v27 = v80;
  sub_100009E70((uint64_t)v10, (uint64_t)v80 + *(int *)(v77 + 36), (uint64_t *)&unk_1000AAAF0);
  *uint64_t v27 = v26;
  uint64_t v28 = v3;
  sub_100009E70((uint64_t)v27, (uint64_t)&v14[*(int *)(v12 + 44)], &qword_1000AAAE8);
  uint64_t v30 = v73;
  uint64_t v29 = v74;
  *(void *)uint64_t v14 = v75;
  *((void *)v14 + 1) = v29;
  uint64_t v31 = v71;
  uint64_t v32 = v72;
  *((void *)v14 + 2) = v19;
  *((void *)v14 + 3) = v31;
  LOBYTE(v12) = v70;
  v14[32] = v70;
  *((void *)v14 + 5) = v30;
  *((void *)v14 + 6) = v32;
  *((void *)v14 + 7) = KeyPath;
  *((void *)v14 + 8) = v20;
  *((void *)v14 + 9) = v21;
  sub_10000B970(v19, v31, v12);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_100009ED4((uint64_t)v80, &qword_1000AAAE8);
  sub_100009ED4((uint64_t)v68, (uint64_t *)&unk_1000AAAF0);
  uint64_t v33 = v19;
  uint64_t v34 = v76;
  sub_100009A1C(v33, v31, v12);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v35 = *(int *)(v28 + 44);
  uint64_t v36 = v28;
  if (*(unsigned char *)(v34 + *(int *)(v28 + 40))) {
    double v37 = INFINITY;
  }
  else {
    double v37 = 0.0;
  }
  char v38 = *(unsigned char *)(v34 + *(int *)(v28 + 40)) ^ 1;
  uint64_t v39 = *(void *)(v34 + v35);
  char v40 = *(unsigned char *)(v34 + v35 + 8);
  sub_10001F504(v39, v40);
  char v41 = sub_100013724(v39, v40);
  sub_10001F574(v39, v40);
  if (v41) {
    uint64_t v42 = static Alignment.leading.getter();
  }
  else {
    uint64_t v42 = static Alignment.center.getter();
  }
  uint64_t v44 = (uint64_t)v65;
  uint64_t v45 = (uint64_t)v66;
  uint64_t v46 = (uint64_t)v64;
  uint64_t v47 = (uint64_t)v63;
  uint64_t v48 = v79;
  sub_100035940(0.0, 1, 0.0, 1, v37, v38, 0.0, 1, v79, 0.0, 1, INFINITY, 0, v42, v43);
  sub_100009ED4((uint64_t)v14, &qword_1000AA2A8);
  sub_100009E70(v48, v46, &qword_1000AAB00);
  *(unsigned char *)(v46 + *(int *)(v78 + 36)) = 0;
  sub_100009ED4(v48, &qword_1000AAB00);
  int v49 = *(unsigned __int8 *)(v34 + *(int *)(v36 + 36));
  sub_10006FF40(v34, v44, type metadata accessor for TFSymbol);
  if (v49 != 1)
  {
    sub_10006FFA8(v44, type metadata accessor for TFSymbol);
    sub_10006FF40(v34, v45, type metadata accessor for TFSymbol);
    uint64_t v51 = v62;
    uint64_t v52 = v67;
    goto LABEL_11;
  }
  char v50 = *(unsigned char *)(v44 + 16);
  sub_10006FFA8(v44, type metadata accessor for TFSymbol);
  sub_10006FF40(v34, v45, type metadata accessor for TFSymbol);
  uint64_t v51 = v62;
  uint64_t v52 = v67;
  if ((v50 & 1) == 0)
  {
LABEL_11:
    sub_10006FFA8(v45, type metadata accessor for TFSymbol);
    char v57 = 1;
    goto LABEL_12;
  }
  uint64_t v53 = v45 + *(int *)(v36 + 44);
  uint64_t v54 = *(void *)v53;
  char v55 = *(unsigned char *)(v53 + 8);
  sub_10001F504(*(void *)v53, v55);
  char v56 = sub_100013724(v54, v55);
  sub_10001F574(v54, v55);
  sub_10006FFA8(v45, type metadata accessor for TFSymbol);
  char v57 = v56 & 1;
LABEL_12:
  char v58 = *(unsigned char *)(v34 + 16);
  sub_100009E70(v46, v47, &qword_1000AAB08);
  id v59 = (char *)(v47 + *(int *)(v51 + 36));
  *id v59 = v57;
  v59[1] = v58;
  v59[2] = 0;
  sub_100009ED4(v46, &qword_1000AAB08);
  return sub_100009F30(v47, v52, &qword_1000AAAD8);
}

uint64_t sub_10006189C@<X0>(uint64_t a1@<X8>)
{
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v2 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  char v8 = v7 & 1;
  swift_bridgeObjectRetain();
  uint64_t v9 = Image.init(_internalSystemName:)();
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v9;
  sub_10000B970(v2, v4, v8);
  swift_bridgeObjectRetain();
  sub_100009A1C(v2, v4, v8);

  return swift_bridgeObjectRelease();
}

uint64_t sub_100061994()
{
  uint64_t v1 = type metadata accessor for TFSymbol(0);
  __chkstk_darwin(v1);
  unint64_t v3 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = (char *)&v20 - v3;
  if (*(void *)(v0 + 32))
  {
    unint64_t v21 = *(void *)(v0 + 32);
    swift_retain();
    return AnyShapeStyle.init<A>(_:)();
  }
  int v5 = *(unsigned __int8 *)(v0 + 16);
  sub_10006FF40(v0, (uint64_t)&v20 - v3, type metadata accessor for TFSymbol);
  if (v5 == 1)
  {
    uint64_t v6 = &v4[*(int *)(v1 + 44)];
    uint64_t v7 = *(void *)v6;
    char v8 = v6[8];
    sub_10001F504(*(void *)v6, v8);
    char v9 = sub_100013724(v7, v8);
    sub_10001F574(v7, v8);
    sub_10006FFA8((uint64_t)v4, type metadata accessor for TFSymbol);
    if ((v9 & 1) == 0)
    {
      id v10 = [self currentDevice];
      id v11 = [v10 userInterfaceIdiom];

      if (v11 == (id)6) {
        uint64_t v12 = static Color.black.getter();
      }
      else {
        uint64_t v12 = static Color.white.getter();
      }
      unint64_t v21 = v12;
      return AnyShapeStyle.init<A>(_:)();
    }
  }
  else
  {
    sub_10006FFA8((uint64_t)v4, type metadata accessor for TFSymbol);
  }
  unsigned int v13 = static HierarchicalShapeStyle.primary.getter();
  uint64_t v14 = v0 + *(int *)(v1 + 48);
  uint64_t v15 = *(void *)v14;
  char v16 = *(unsigned char *)(v14 + 8);
  sub_10001F504(*(void *)v14, v16);
  char v17 = sub_100013084(v15, v16);
  sub_10001F574(v15, v16);
  float v18 = 0.5;
  if (v17) {
    float v18 = 1.0;
  }
  unint64_t v21 = __PAIR64__(LODWORD(v18), v13);
  sub_10000435C(&qword_1000AAB10);
  sub_10000A368(&qword_1000AAB18, &qword_1000AAB10);
  return AnyShapeStyle.init<A>(_:)();
}

void sub_100061BE0()
{
  qword_1000AB6C8 = 0x4024000000000000;
}

uint64_t sub_100061BF0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for TFSymbol(0);
  unint64_t v3 = (int *)(v2 - 8);
  __chkstk_darwin(v2);
  int v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Font.callout.getter();
  uint64_t v6 = Font.bold()();
  swift_release();
  LODWORD(v13[0]) = static HierarchicalShapeStyle.secondary.getter();
  uint64_t v7 = AnyShapeStyle.init<A>(_:)();
  static SymbolRenderingMode.hierarchical.getter();
  *(void *)int v5 = 0xD000000000000017;
  *((void *)v5 + 1) = 0x80000001000882D0;
  v5[16] = 0;
  *((void *)v5 + 3) = v6;
  *((void *)v5 + 4) = v7;
  v5[v3[11]] = 1;
  v5[v3[12]] = 1;
  char v8 = &v5[v3[13]];
  *(void *)char v8 = swift_getKeyPath();
  v8[8] = 0;
  char v9 = &v5[v3[14]];
  *(void *)char v9 = swift_getKeyPath();
  v9[8] = 0;
  if (qword_1000A8290 != -1) {
    swift_once();
  }
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  sub_10006FF40((uint64_t)v5, a1, type metadata accessor for TFSymbol);
  id v10 = (_OWORD *)(a1 + *(int *)(sub_10000435C(&qword_1000AAA50) + 36));
  long long v11 = v13[1];
  *id v10 = v13[0];
  v10[1] = v11;
  void v10[2] = v13[2];
  return sub_10006FFA8((uint64_t)v5, type metadata accessor for TFSymbol);
}

BOOL sub_100061DE4(char a1, char a2)
{
  return a1 == a2;
}

void sub_100061DF4(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int sub_100061E1C(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

uint64_t sub_100061E64@<X0>(uint64_t a1@<X8>)
{
  return sub_10006107C(&qword_1000AAAD8, (void (*)(uint64_t))sub_100061164, &qword_1000AAAE0, a1);
}

BOOL sub_100061E8C(char *a1, char *a2)
{
  return sub_100061DE4(*a1, *a2);
}

Swift::Int sub_100061E98()
{
  return sub_100061E1C(*v0);
}

void sub_100061EA0(uint64_t a1)
{
  sub_100061DF4(a1, *v1);
}

Swift::Int sub_100061EA8()
{
  Hasher.init(_seed:)();
  sub_100061DF4((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t sub_100061EE8@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v34 = a2;
  uint64_t v33 = a1;
  uint64_t v2 = *(void *)(a1 + 24);
  swift_getOpaqueTypeMetadata2();
  type metadata accessor for AccessibilityAttachmentModifier();
  uint64_t v3 = type metadata accessor for ModifiedContent();
  uint64_t v31 = type metadata accessor for HighlightHoverEffect();
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v60 = sub_10006F520(&qword_1000A8808, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
  uint64_t v32 = v3;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v29 = sub_10006F520(&qword_1000AA880, (void (*)(uint64_t))&type metadata accessor for HighlightHoverEffect);
  uint64_t v28 = &opaque type descriptor for <<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  sub_100003F9C(&qword_1000AA888);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  sub_100003F9C(&qword_1000AA890);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  sub_100003F9C(&qword_1000AA898);
  type metadata accessor for ModifiedContent();
  uint64_t v53 = v2;
  uint64_t v54 = sub_10000A368((unint64_t *)&unk_1000AA8A0, &qword_1000AA888);
  uint64_t v51 = swift_getWitnessTable();
  uint64_t v52 = &protocol witness table for _FlexFrameLayout;
  uint64_t v49 = swift_getWitnessTable();
  char v50 = &protocol witness table for _PaddingLayout;
  uint64_t v47 = swift_getWitnessTable();
  unint64_t v48 = sub_100058474();
  uint64_t v45 = swift_getWitnessTable();
  unint64_t v46 = sub_10005ACCC();
  uint64_t v43 = swift_getWitnessTable();
  uint64_t v44 = sub_10000A368(&qword_1000A9FB0, &qword_1000AA890);
  uint64_t v41 = swift_getWitnessTable();
  uint64_t v42 = &protocol witness table for _FrameLayout;
  uint64_t v26 = &protocol conformance descriptor for <> ModifiedContent<A, B>;
  uint64_t v39 = swift_getWitnessTable();
  uint64_t v40 = sub_10000A368(&qword_1000AA8C0, &qword_1000AA898);
  swift_getWitnessTable();
  uint64_t v4 = type metadata accessor for Button();
  uint64_t v25 = swift_getWitnessTable();
  unint64_t v24 = sub_10006F818();
  uint64_t v55 = v4;
  char v56 = &type metadata for TFPressedButtonStyle;
  uint64_t v57 = v25;
  unint64_t v58 = v24;
  swift_getOpaqueTypeMetadata2();
  uint64_t v5 = type metadata accessor for _ConditionalContent();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v23 - v7;
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  unsigned int v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v23 - v14;
  sub_1000625F8(v33, (uint64_t)v8);
  uint64_t v55 = v32;
  char v56 = (ValueMetadata *)v31;
  uint64_t v57 = WitnessTable;
  unint64_t v58 = v29;
  uint64_t v16 = swift_getOpaqueTypeConformance2();
  uint64_t v55 = v4;
  char v56 = &type metadata for TFPressedButtonStyle;
  uint64_t v57 = v25;
  unint64_t v58 = v24;
  uint64_t v17 = swift_getOpaqueTypeConformance2();
  uint64_t v37 = v16;
  uint64_t v38 = v17;
  uint64_t v18 = swift_getWitnessTable();
  sub_10005E314();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  unint64_t v19 = sub_10006F478();
  uint64_t v35 = v18;
  unint64_t v36 = v19;
  swift_getWitnessTable();
  uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v20(v15, v13, v9);
  unint64_t v21 = *(void (**)(char *, uint64_t))(v10 + 8);
  v21(v13, v9);
  v20(v34, v15, v9);
  return ((uint64_t (*)(char *, uint64_t))v21)(v15, v9);
}

uint64_t sub_1000625F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v127 = a2;
  uint64_t v119 = *(void *)(a1 + 16);
  sub_100003F9C(&qword_1000AA888);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  sub_100003F9C(&qword_1000AA890);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  sub_100003F9C(&qword_1000AA898);
  uint64_t v3 = type metadata accessor for ModifiedContent();
  uint64_t v132 = *(ValueMetadata **)(a1 + 24);
  uint64_t v159 = v132;
  uint64_t v160 = sub_10000A368((unint64_t *)&unk_1000AA8A0, &qword_1000AA888);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v158 = &protocol witness table for _FlexFrameLayout;
  uint64_t v155 = swift_getWitnessTable();
  uint64_t v156 = &protocol witness table for _PaddingLayout;
  uint64_t v153 = swift_getWitnessTable();
  unint64_t v154 = sub_100058474();
  uint64_t v151 = swift_getWitnessTable();
  unint64_t v152 = sub_10005ACCC();
  uint64_t v149 = swift_getWitnessTable();
  uint64_t v150 = sub_10000A368(&qword_1000A9FB0, &qword_1000AA890);
  uint64_t v147 = swift_getWitnessTable();
  uint64_t v148 = &protocol witness table for _FrameLayout;
  uint64_t v145 = swift_getWitnessTable();
  uint64_t v146 = sub_10000A368(&qword_1000AA8C0, &qword_1000AA898);
  uint64_t v116 = (char *)v3;
  uint64_t v111 = swift_getWitnessTable();
  uint64_t v4 = type metadata accessor for Button();
  uint64_t v114 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v101 = (char *)&v98 - v5;
  uint64_t v6 = swift_getWitnessTable();
  unint64_t v7 = sub_10006F818();
  uint64_t v135 = v4;
  uint64_t v138 = v4;
  uint64_t v139 = &type metadata for TFPressedButtonStyle;
  uint64_t v134 = v6;
  uint64_t v140 = v6;
  unint64_t v141 = v7;
  unint64_t v126 = v7;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v108 = *(void *)(OpaqueTypeMetadata2 - 8);
  uint64_t v9 = __chkstk_darwin(OpaqueTypeMetadata2);
  unint64_t v115 = (char *)&v98 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v112 = (char *)&v98 - v11;
  uint64_t v12 = type metadata accessor for HighlightHoverEffect();
  uint64_t v106 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  unint64_t v113 = (char *)&v98 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v110 = type metadata accessor for AccessibilityActionKind();
  uint64_t v109 = *(void *)(v110 - 8);
  uint64_t v14 = __chkstk_darwin(v110);
  uint64_t v107 = (char *)&v98 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v124 = a1;
  uint64_t v16 = *(void *)(a1 - 8);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v117 = v18;
  unint64_t v19 = (char *)&v98 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = *(void *)(v119 - 8);
  __chkstk_darwin(v17);
  unint64_t v21 = (char *)&v98 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v138 = v22;
  uint64_t v23 = v22;
  unint64_t v24 = v132;
  uint64_t v139 = v132;
  uint64_t v25 = swift_getOpaqueTypeMetadata2();
  uint64_t v102 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v118 = (char *)&v98 - v26;
  type metadata accessor for AccessibilityAttachmentModifier();
  uint64_t v103 = v25;
  uint64_t v27 = type metadata accessor for ModifiedContent();
  uint64_t v105 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v104 = (char *)&v98 - v28;
  uint64_t v138 = v23;
  uint64_t v139 = v24;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v30 = sub_10006F520(&qword_1000A8808, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
  uint64_t v143 = OpaqueTypeConformance2;
  uint64_t v144 = v30;
  uint64_t v31 = swift_getWitnessTable();
  uint64_t v32 = sub_10006F520(&qword_1000AA880, (void (*)(uint64_t))&type metadata accessor for HighlightHoverEffect);
  uint64_t v131 = v27;
  uint64_t v138 = v27;
  uint64_t v133 = (ValueMetadata *)v12;
  uint64_t v139 = (ValueMetadata *)v12;
  uint64_t v130 = v31;
  uint64_t v140 = v31;
  unint64_t v141 = v32;
  uint64_t v129 = v32;
  uint64_t v33 = swift_getOpaqueTypeMetadata2();
  uint64_t v98 = *(void *)(v33 - 8);
  uint64_t v34 = __chkstk_darwin(v33);
  unint64_t v36 = (char *)&v98 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  uint64_t v38 = (char *)&v98 - v37;
  uint64_t v120 = v39;
  uint64_t v125 = OpaqueTypeMetadata2;
  uint64_t v123 = type metadata accessor for _ConditionalContent();
  uint64_t v122 = *(void *)(v123 - 8);
  __chkstk_darwin(v123);
  unint64_t v121 = (char *)&v98 - v40;
  id v99 = self;
  id v41 = [v99 currentDevice];
  id v42 = [v41 userInterfaceIdiom];

  if (v42 == (id)6)
  {
    uint64_t v116 = v38;
    uint64_t v43 = v124;
    uint64_t v44 = *(int *)(v124 + 44);
    unint64_t v115 = v36;
    uint64_t v45 = v128;
    uint64_t v46 = v100;
    (*(void (**)(char *, uint64_t, uint64_t))(v100 + 16))(v21, v128 + v44, v23);
    uint64_t v114 = *(void *)(v16 + 16);
    ((void (*)(char *, uint64_t, uint64_t))v114)(v19, v45, v43);
    uint64_t v47 = *(unsigned __int8 *)(v16 + 80);
    uint64_t v111 = ((v47 + 32) & ~v47) + v117;
    uint64_t v48 = (v47 + 32) & ~v47;
    uint64_t v112 = (char *)v48;
    uint64_t v108 = v47 | 7;
    uint64_t v49 = swift_allocObject();
    uint64_t v117 = OpaqueTypeConformance2;
    char v50 = v132;
    *(void *)(v49 + 16) = v23;
    *(void *)(v49 + 24) = v50;
    uint64_t v51 = v49 + v48;
    uint64_t v52 = *(void (**)(uint64_t, char *, uint64_t))(v16 + 32);
    v52(v51, v19, v43);
    View.onTapGesture(count:perform:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v21, v23);
    ((void (*)(char *, uint64_t, uint64_t))v114)(v19, v128, v43);
    uint64_t v53 = swift_allocObject();
    *(void *)(v53 + 16) = v23;
    *(void *)(v53 + 24) = v50;
    v52((uint64_t)&v112[v53], v19, v43);
    uint64_t v54 = v107;
    static AccessibilityActionKind.default.getter();
    uint64_t v55 = v104;
    uint64_t v56 = v103;
    uint64_t v57 = v118;
    View.accessibilityAction(_:_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v109 + 8))(v54, v110);
    (*(void (**)(char *, uint64_t))(v102 + 8))(v57, v56);
    unint64_t v58 = v113;
    static CustomHoverEffect<>.highlight.getter();
    id v59 = [v99 currentDevice];
    [v59 userInterfaceIdiom];

    uint64_t v60 = (uint64_t)v115;
    uint64_t v61 = v131;
    uint64_t v62 = v133;
    uint64_t v63 = v130;
    unint64_t v64 = v129;
    View.hoverEffect<A>(_:isEnabled:)();
    (*(void (**)(char *, ValueMetadata *))(v106 + 8))(v58, v62);
    (*(void (**)(char *, uint64_t))(v105 + 8))(v55, v61);
    uint64_t v138 = v61;
    uint64_t v139 = v62;
    uint64_t v140 = v63;
    unint64_t v141 = v64;
    swift_getOpaqueTypeConformance2();
    uint64_t v65 = v98;
    char v66 = *(void (**)(char *, uint64_t, uint64_t))(v98 + 16);
    uint64_t v67 = v116;
    uint64_t v68 = v120;
    v66(v116, v60, v120);
    uint64_t v69 = *(void (**)(uint64_t, uint64_t))(v65 + 8);
    v69(v60, v68);
    int v70 = v67;
    v66((char *)v60, (uint64_t)v67, v68);
    uint64_t v138 = v135;
    uint64_t v139 = &type metadata for TFPressedButtonStyle;
    unint64_t v71 = v126;
    uint64_t v140 = v134;
    unint64_t v141 = v126;
    swift_getOpaqueTypeConformance2();
    uint64_t v72 = v121;
    sub_10005CB20(v60, v68);
    v69(v60, v68);
    v69((uint64_t)v70, v68);
  }
  else
  {
    uint64_t v73 = v16;
    uint64_t v74 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
    uint64_t v75 = v19;
    uint64_t v76 = v19;
    uint64_t v77 = v128;
    uint64_t v78 = v124;
    v74(v76, v128, v124);
    unint64_t v79 = (*(unsigned __int8 *)(v73 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80);
    uint64_t v80 = swift_allocObject();
    uint64_t v81 = v132;
    *(void *)(v80 + 16) = v23;
    *(void *)(v80 + 24) = v81;
    uint64_t v82 = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v73 + 32))(v80 + v79, v75, v78);
    __chkstk_darwin(v82);
    *(&v98 - 4) = v23;
    *(&v98 - 3) = (uint64_t)v81;
    *(&v98 - 2) = v77;
    uint64_t v83 = v101;
    Button.init(action:label:)();
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v139 = 0;
    uint64_t v138 = 0;
    LOBYTE(v140) = 0;
    unint64_t v141 = KeyPath;
    char v142 = 0;
    uint64_t v85 = (uint64_t)v115;
    uint64_t v86 = v135;
    uint64_t v87 = v134;
    unint64_t v71 = v126;
    View.buttonStyle<A>(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v114 + 8))(v83, v86);
    uint64_t v138 = v86;
    uint64_t v139 = &type metadata for TFPressedButtonStyle;
    uint64_t v140 = v87;
    unint64_t v141 = v71;
    swift_getOpaqueTypeConformance2();
    uint64_t v88 = v108;
    uint64_t v89 = *(void (**)(char *, uint64_t, uint64_t))(v108 + 16);
    unint64_t v90 = v112;
    uint64_t v91 = v125;
    v89(v112, v85, v125);
    unint64_t v92 = *(void (**)(uint64_t, uint64_t))(v88 + 8);
    v92(v85, v91);
    v89((char *)v85, (uint64_t)v90, v91);
    uint64_t v138 = v131;
    uint64_t v139 = v133;
    uint64_t v140 = v130;
    unint64_t v141 = v129;
    swift_getOpaqueTypeConformance2();
    uint64_t v72 = v121;
    sub_10005CC18(v85, v120, v91);
    v92(v85, v91);
    v92((uint64_t)v90, v91);
  }
  uint64_t v138 = v131;
  uint64_t v139 = v133;
  uint64_t v140 = v130;
  unint64_t v141 = v129;
  uint64_t v93 = swift_getOpaqueTypeConformance2();
  uint64_t v138 = v135;
  uint64_t v139 = &type metadata for TFPressedButtonStyle;
  uint64_t v140 = v134;
  unint64_t v141 = v71;
  uint64_t v94 = swift_getOpaqueTypeConformance2();
  uint64_t v136 = v93;
  uint64_t v137 = v94;
  uint64_t v95 = v123;
  swift_getWitnessTable();
  uint64_t v96 = v122;
  (*(void (**)(uint64_t, char *, uint64_t))(v122 + 16))(v127, v72, v95);
  return (*(uint64_t (**)(char *, uint64_t))(v96 + 8))(v72, v95);
}

uint64_t sub_100063888@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, char *a3@<X8>)
{
  v24[0] = a1;
  uint64_t v25 = a3;
  sub_100003F9C(&qword_1000AA888);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  v24[1] = type metadata accessor for ModifiedContent();
  sub_100003F9C(&qword_1000AA890);
  v24[3] = type metadata accessor for ModifiedContent();
  v24[2] = type metadata accessor for ModifiedContent();
  sub_100003F9C(&qword_1000AA898);
  uint64_t v4 = type metadata accessor for ModifiedContent();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  char v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v24 - v9;
  uint64_t v11 = type metadata accessor for TFButton();
  sub_100063C24(v11, (uint64_t)v8);
  uint64_t v12 = sub_10000A368((unint64_t *)&unk_1000AA8A0, &qword_1000AA888);
  uint64_t v40 = a2;
  uint64_t v41 = v12;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v39 = &protocol witness table for _FlexFrameLayout;
  uint64_t v36 = swift_getWitnessTable();
  uint64_t v37 = &protocol witness table for _PaddingLayout;
  uint64_t v13 = swift_getWitnessTable();
  unint64_t v14 = sub_100058474();
  uint64_t v34 = v13;
  unint64_t v35 = v14;
  uint64_t v15 = swift_getWitnessTable();
  unint64_t v16 = sub_10005ACCC();
  uint64_t v32 = v15;
  unint64_t v33 = v16;
  uint64_t v17 = swift_getWitnessTable();
  uint64_t v18 = sub_10000A368(&qword_1000A9FB0, &qword_1000AA890);
  uint64_t v30 = v17;
  uint64_t v31 = v18;
  uint64_t v28 = swift_getWitnessTable();
  uint64_t v29 = &protocol witness table for _FrameLayout;
  uint64_t v19 = swift_getWitnessTable();
  uint64_t v20 = sub_10000A368(&qword_1000AA8C0, &qword_1000AA898);
  uint64_t v26 = v19;
  uint64_t v27 = v20;
  swift_getWitnessTable();
  unint64_t v21 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v21(v10, v8, v4);
  uint64_t v22 = *(void (**)(char *, uint64_t))(v5 + 8);
  v22(v8, v4);
  v21(v25, v10, v4);
  return ((uint64_t (*)(char *, uint64_t))v22)(v10, v4);
}

uint64_t sub_100063C24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v82 = a2;
  uint64_t v85 = a1;
  uint64_t v3 = a1 - 8;
  uint64_t v81 = *(void *)(a1 - 8);
  uint64_t v4 = __chkstk_darwin(a1);
  uint64_t v79 = v5;
  uint64_t v80 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100003F9C(&qword_1000AA888);
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v64 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v64 - v11;
  uint64_t v13 = type metadata accessor for ModifiedContent();
  uint64_t v67 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v65 = (char *)&v64 - v14;
  uint64_t v15 = type metadata accessor for ModifiedContent();
  uint64_t v68 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  char v66 = (char *)&v64 - v16;
  uint64_t v17 = type metadata accessor for ModifiedContent();
  uint64_t v70 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v69 = (char *)&v64 - v18;
  uint64_t v71 = v19;
  uint64_t v20 = type metadata accessor for ModifiedContent();
  sub_100003F9C(&qword_1000AA890);
  uint64_t v72 = v20;
  uint64_t v21 = type metadata accessor for ModifiedContent();
  uint64_t v75 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v73 = (uint64_t)&v64 - v22;
  uint64_t v76 = v23;
  uint64_t v78 = type metadata accessor for ModifiedContent();
  uint64_t v77 = *(void *)(v78 - 8);
  __chkstk_darwin(v78);
  uint64_t v74 = (char *)&v64 - v24;
  uint64_t v25 = *(int *)(v3 + 52);
  uint64_t v84 = v2;
  uint64_t v26 = *(void (**)(char *, unsigned char *, uint64_t))(v7 + 16);
  uint64_t v83 = v6;
  v26(v9, &v2[v25], v6);
  id v27 = [self currentDevice];
  id v28 = [v27 userInterfaceIdiom];

  if (v28 == (id)6) {
    LODWORD(v92) = static HierarchicalShapeStyle.primary.getter();
  }
  else {
    uint64_t v92 = static Color.primary.getter();
  }
  uint64_t v92 = AnyShapeStyle.init<A>(_:)();
  uint64_t v29 = *(void *)(v85 + 24);
  uint64_t v30 = v83;
  View.foregroundStyle<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v30);
  if (*v84 == 1) {
    static Alignment.leading.getter();
  }
  else {
    static Alignment.center.getter();
  }
  uint64_t v31 = v65;
  uint64_t v32 = sub_10000A368((unint64_t *)&unk_1000AA8A0, &qword_1000AA888);
  uint64_t v101 = v29;
  uint64_t v102 = v32;
  uint64_t WitnessTable = swift_getWitnessTable();
  View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  (*(void (**)(char *, uint64_t))(v64 + 8))(v12, v10);
  static Edge.Set.horizontal.getter();
  uint64_t v34 = v84;
  if (v84[2] == 1)
  {
    unint64_t v35 = &v84[*(int *)(v85 + 60)];
    uint64_t v36 = *(void *)v35;
    char v37 = v35[8];
    sub_10001F504(*(void *)v35, v37);
    sub_100012C58(v36, v37);
    sub_10001F574(v36, v37);
  }
  uint64_t v99 = WitnessTable;
  uint64_t v100 = &protocol witness table for _FlexFrameLayout;
  uint64_t v38 = swift_getWitnessTable();
  uint64_t v39 = v66;
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v67 + 8))(v31, v13);
  char v40 = v34[1];
  uint64_t v97 = v38;
  uint64_t v98 = &protocol witness table for _PaddingLayout;
  uint64_t v41 = swift_getWitnessTable();
  LOBYTE(v92) = v40;
  *(_WORD *)((char *)&v92 + 1) = 0;
  id v42 = v69;
  View.modifier<A>(_:)();
  (*(void (**)(char *, uint64_t))(v68 + 8))(v39, v15);
  uint64_t v43 = v81;
  uint64_t v44 = v80;
  uint64_t v45 = v85;
  (*(void (**)(char *, unsigned char *, uint64_t))(v81 + 16))(v80, v34, v85);
  unint64_t v46 = (*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
  uint64_t v47 = swift_allocObject();
  *(void *)(v47 + 16) = v83;
  *(void *)(v47 + 24) = v29;
  (*(void (**)(unint64_t, char *, uint64_t))(v43 + 32))(v47 + v46, v44, v45);
  unint64_t v48 = sub_100058474();
  uint64_t v95 = v41;
  unint64_t v96 = v48;
  uint64_t v49 = v71;
  uint64_t v50 = swift_getWitnessTable();
  uint64_t v51 = v73;
  sub_100075018(2003134806, 0xE400000000000000, (uint64_t)sub_10006FA38, v47, v50, v73);
  swift_release();
  (*(void (**)(char *, uint64_t))(v70 + 8))(v42, v49);
  uint64_t v52 = &v34[*(int *)(v45 + 52)];
  uint64_t v53 = *(void *)v52;
  char v54 = v52[8];
  uint64_t v55 = *((void *)v52 + 2);
  uint64_t v92 = v53;
  char v93 = v54;
  uint64_t v94 = v55;
  sub_10000435C(&qword_1000AA8D0);
  State.wrappedValue.getter();
  static Alignment.center.getter();
  unint64_t v56 = sub_10005ACCC();
  uint64_t v90 = v50;
  unint64_t v91 = v56;
  uint64_t v57 = swift_getWitnessTable();
  uint64_t v58 = sub_10000A368(&qword_1000A9FB0, &qword_1000AA890);
  uint64_t v88 = v57;
  uint64_t v89 = v58;
  uint64_t v59 = v76;
  uint64_t v60 = swift_getWitnessTable();
  uint64_t v61 = v74;
  View.frame(width:height:alignment:)();
  (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v51, v59);
  uint64_t v86 = v60;
  uint64_t v87 = &protocol witness table for _FrameLayout;
  uint64_t v62 = v78;
  swift_getWitnessTable();
  View.layoutPriority(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v77 + 8))(v61, v62);
}

uint64_t sub_1000646D8()
{
  return State.wrappedValue.setter();
}

uint64_t sub_10006476C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v23 = a1;
  uint64_t v3 = type metadata accessor for ButtonStyleConfiguration.Label();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000435C(&qword_1000AAE18);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000435C(&qword_1000AAE20);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000435C(&qword_1000AAE28);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  ButtonStyleConfiguration.label.getter();
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v9, v6, v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  double v16 = 1.0;
  if (ButtonStyleConfiguration.isPressed.getter())
  {
    uint64_t v17 = *(void *)(v1 + 24);
    char v18 = *(unsigned char *)(v2 + 32);
    sub_10001F504(v17, v18);
    char v19 = sub_100012C58(v17, v18);
    sub_10001F574(v17, v18);
    if ((v19 - 2) >= 3u) {
      double v16 = 0.7;
    }
    else {
      double v16 = 0.5;
    }
  }
  sub_100009E70((uint64_t)v9, (uint64_t)v12, &qword_1000AAE18);
  *(double *)&v12[*(int *)(v10 + 36)] = v16;
  sub_100009ED4((uint64_t)v9, &qword_1000AAE18);
  sub_100009E70((uint64_t)v12, (uint64_t)v15, &qword_1000AAE20);
  uint64_t v20 = (uint64_t (**)())&v15[*(int *)(v13 + 36)];
  *uint64_t v20 = sub_100040B28;
  v20[1] = 0;
  sub_100009ED4((uint64_t)v12, &qword_1000AAE20);
  return sub_100009F30((uint64_t)v15, v23, &qword_1000AAE28);
}

uint64_t sub_100064A44@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v106 = a2;
  uint64_t v105 = a1;
  uint64_t v3 = a1 - 8;
  uint64_t v104 = *(void *)(a1 - 8);
  __chkstk_darwin(a1);
  uint64_t v101 = v4;
  uint64_t v103 = (char *)&v78 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v107 = *(void *)(v3 + 24);
  type metadata accessor for ModifiedContent();
  sub_100003F9C(&qword_1000AAA20);
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = type metadata accessor for HStack();
  uint64_t v78 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v78 - v6;
  sub_100003F9C(&qword_1000AAA28);
  uint64_t v8 = type metadata accessor for ModifiedContent();
  uint64_t v81 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v78 - v9;
  uint64_t v11 = type metadata accessor for ModifiedContent();
  uint64_t v84 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v82 = (char *)&v78 - v12;
  uint64_t v79 = v13;
  uint64_t v14 = type metadata accessor for ModifiedContent();
  uint64_t v85 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v83 = (char *)&v78 - v15;
  sub_100003F9C(&qword_1000AAA30);
  uint64_t v86 = v14;
  uint64_t v16 = type metadata accessor for ModifiedContent();
  uint64_t v88 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v87 = (char *)&v78 - v17;
  uint64_t v89 = v18;
  uint64_t v19 = type metadata accessor for ModifiedContent();
  uint64_t v92 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v90 = (char *)&v78 - v20;
  uint64_t v94 = v21;
  uint64_t v22 = type metadata accessor for ModifiedContent();
  sub_100003F9C(&qword_1000AA890);
  uint64_t v91 = v22;
  uint64_t v23 = type metadata accessor for ModifiedContent();
  uint64_t v97 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v93 = (uint64_t)&v78 - v24;
  uint64_t v98 = v25;
  uint64_t v100 = type metadata accessor for ModifiedContent();
  uint64_t v99 = *(void *)(v100 - 8);
  uint64_t v26 = __chkstk_darwin(v100);
  uint64_t v95 = (char *)&v78 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  unint64_t v96 = (char *)&v78 - v28;
  uint64_t v29 = v2 + *(int *)(v3 + 52);
  uint64_t v30 = *(void *)v29;
  char v31 = *(unsigned char *)(v29 + 8);
  sub_10001F504(*(void *)v29, v31);
  sub_100012C58(v30, v31);
  sub_10001F574(v30, v31);
  uint64_t v32 = *(void *)(v3 + 32);
  uint64_t v108 = v107;
  uint64_t v80 = v32;
  uint64_t v109 = v32;
  uint64_t v110 = v2;
  static VerticalAlignment.center.getter();
  HStack.init(alignment:spacing:content:)();
  swift_getKeyPath();
  uint64_t v33 = *(int *)(v3 + 44);
  uint64_t WitnessTable = v2;
  uint64_t v34 = (char *)(v2 + v33);
  uint64_t v35 = *(void *)(v2 + v33 + 8);
  char v127 = *(unsigned char *)(v2 + v33);
  uint64_t v128 = v35;
  sub_10000435C((uint64_t *)&unk_1000AA870);
  State.wrappedValue.getter();
  char v127 = v129;
  uint64_t v36 = swift_getWitnessTable();
  View.environment<A>(_:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v78 + 8))(v7, v5);
  static Edge.Set.leading.getter();
  uint64_t v37 = *((void *)v34 + 1);
  char v127 = *v34;
  uint64_t v128 = v37;
  State.wrappedValue.getter();
  if (v129 == 1)
  {
    uint64_t v38 = *(void *)v29;
    char v39 = *(unsigned char *)(v29 + 8);
    sub_10001F504(*(void *)v29, v39);
    sub_100012C58(v38, v39);
    sub_10001F574(v38, v39);
  }
  uint64_t v40 = sub_10000A368(&qword_1000AAA38, &qword_1000AAA28);
  uint64_t v125 = v36;
  uint64_t v126 = v40;
  uint64_t v41 = swift_getWitnessTable();
  id v42 = v82;
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v81 + 8))(v10, v8);
  static Edge.Set.trailing.getter();
  uint64_t v43 = *((void *)v34 + 1);
  char v127 = *v34;
  uint64_t v128 = v43;
  State.wrappedValue.getter();
  if (v129 == 1)
  {
    uint64_t v44 = *(void *)v29;
    char v45 = *(unsigned char *)(v29 + 8);
    sub_10001F504(*(void *)v29, v45);
    sub_100012C58(v44, v45);
    sub_10001F574(v44, v45);
  }
  uint64_t v123 = v41;
  uint64_t v124 = &protocol witness table for _PaddingLayout;
  uint64_t v46 = v79;
  uint64_t v47 = swift_getWitnessTable();
  unint64_t v48 = v83;
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v84 + 8))(v42, v46);
  uint64_t v121 = v47;
  uint64_t v122 = &protocol witness table for _PaddingLayout;
  uint64_t v49 = v86;
  uint64_t v50 = swift_getWitnessTable();
  sub_100070734();
  uint64_t v51 = v87;
  View.contentShape<A>(_:eoFill:)();
  (*(void (**)(char *, uint64_t))(v85 + 8))(v48, v49);
  static Alignment.center.getter();
  uint64_t v52 = sub_10000A368(&qword_1000A9D78, &qword_1000AAA30);
  uint64_t v119 = v50;
  uint64_t v120 = v52;
  uint64_t v76 = v89;
  uint64_t v77 = swift_getWitnessTable();
  uint64_t v53 = v90;
  View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  (*(void (**)(char *, uint64_t))(v88 + 8))(v51, v76);
  uint64_t v54 = v104;
  uint64_t v55 = v103;
  uint64_t v56 = v105;
  (*(void (**)(char *, uint64_t, uint64_t))(v104 + 16))(v103, WitnessTable, v105);
  unint64_t v57 = (*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80);
  uint64_t v58 = swift_allocObject();
  uint64_t v59 = v80;
  *(void *)(v58 + 16) = v107;
  *(void *)(v58 + 24) = v59;
  (*(void (**)(unint64_t, char *, uint64_t))(v54 + 32))(v58 + v57, v55, v56);
  uint64_t v117 = v77;
  uint64_t v118 = &protocol witness table for _FlexFrameLayout;
  uint64_t v60 = v94;
  uint64_t v61 = swift_getWitnessTable();
  uint64_t v62 = v93;
  sub_100075018(2003134806, 0xE400000000000000, (uint64_t)sub_1000708A4, v58, v61, v93);
  swift_release();
  (*(void (**)(char *, uint64_t))(v92 + 8))(v53, v60);
  unint64_t v63 = sub_10005ACCC();
  uint64_t v115 = v61;
  unint64_t v116 = v63;
  uint64_t v64 = swift_getWitnessTable();
  uint64_t v65 = sub_10000A368(&qword_1000A9FB0, &qword_1000AA890);
  uint64_t v113 = v64;
  uint64_t v114 = v65;
  uint64_t v66 = v98;
  uint64_t v67 = swift_getWitnessTable();
  uint64_t v68 = v95;
  sub_10005E314();
  (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v62, v66);
  unint64_t v69 = sub_10006F478();
  uint64_t v111 = v67;
  unint64_t v112 = v69;
  uint64_t v70 = v100;
  swift_getWitnessTable();
  uint64_t v71 = v99;
  uint64_t v72 = *(void (**)(char *, char *, uint64_t))(v99 + 16);
  uint64_t v73 = v96;
  v72(v96, v68, v70);
  uint64_t v74 = *(void (**)(char *, uint64_t))(v71 + 8);
  v74(v68, v70);
  v72(v106, v73, v70);
  return ((uint64_t (*)(char *, uint64_t))v74)(v73, v70);
}

uint64_t sub_10006573C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v40 = a4;
  uint64_t v37 = sub_10000435C(&qword_1000AAA20);
  uint64_t v7 = __chkstk_darwin(v37);
  uint64_t v39 = (uint64_t)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v38 = (uint64_t)&v34 - v10;
  uint64_t v11 = *(void *)(a2 - 8);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for ModifiedContent();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v36 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v34 - v19;
  __chkstk_darwin(v18);
  uint64_t v41 = (char *)&v34 - v21;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, a2);
  uint64_t v22 = a1 + *(int *)(type metadata accessor for TFMenuLabel() + 36);
  uint64_t v23 = *(void *)(v22 + 8);
  LOBYTE(v45) = *(unsigned char *)v22;
  uint64_t v46 = v23;
  sub_10000435C((uint64_t *)&unk_1000AA870);
  State.wrappedValue.getter();
  if (LOBYTE(v44[0]) == 1) {
    static Alignment.leading.getter();
  }
  else {
    static Alignment.center.getter();
  }
  View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, a2);
  v44[2] = a3;
  v44[3] = &protocol witness table for _FlexFrameLayout;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  v24(v41, v20, v14);
  uint64_t v25 = *(void (**)(char *, uint64_t))(v15 + 8);
  v25(v20, v14);
  uint64_t v26 = *(void *)(v22 + 8);
  LOBYTE(v45) = *(unsigned char *)v22;
  uint64_t v46 = v26;
  State.wrappedValue.getter();
  if (LOBYTE(v44[0]) == 1)
  {
    uint64_t v27 = v38;
    sub_100061BF0(v38);
    uint64_t v28 = sub_10000435C(&qword_1000AAA50);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v27, 0, 1, v28);
  }
  else
  {
    uint64_t v29 = sub_10000435C(&qword_1000AAA50);
    uint64_t v27 = v38;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v38, 1, 1, v29);
  }
  uint64_t v30 = v36;
  char v31 = v41;
  v24(v36, v41, v14);
  char v45 = v30;
  uint64_t v32 = v39;
  sub_100009E70(v27, v39, &qword_1000AAA20);
  uint64_t v46 = v32;
  v44[0] = v14;
  v44[1] = v37;
  uint64_t v42 = WitnessTable;
  uint64_t v43 = sub_100073A14(&qword_1000AAA58, &qword_1000AAA20, (void (*)(void))sub_1000709A0);
  sub_10005C95C((uint64_t)&v45, 2uLL, (uint64_t)v44);
  sub_100009ED4(v27, &qword_1000AAA20);
  v25(v31, v14);
  sub_100009ED4(v32, &qword_1000AAA20);
  return ((uint64_t (*)(char *, uint64_t))v25)(v30, v14);
}

uint64_t sub_100065C2C(uint64_t a1, double a2, double a3, double a4, double a5)
{
  CGRectGetWidth(*(CGRect *)&a2);
  uint64_t v6 = a1 + *(int *)(type metadata accessor for TFMenuLabel() + 44);
  uint64_t v7 = *(void *)v6;
  char v8 = *(unsigned char *)(v6 + 8);
  sub_10001F504(*(void *)v6, v8);
  char v9 = sub_100012C58(v7, v8);
  sub_10001F574(v7, v8);
  sub_100074A84(v9);
  sub_10001F504(v7, v8);
  sub_100012C58(v7, v8);
  sub_10001F574(v7, v8);
  if (qword_1000A8290 != -1) {
    swift_once();
  }
  sub_10001F504(v7, v8);
  sub_100012C58(v7, v8);
  sub_10001F574(v7, v8);
  sub_10000435C((uint64_t *)&unk_1000AA870);
  return State.wrappedValue.setter();
}

void sub_100065DAC(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_100065DB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = sub_100070A4C();

  return static EnvironmentKey<>._valuesEqual(_:_:)(a1, a2, a3, a4, v8);
}

uint64_t sub_100065E1C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v44 = a1;
  uint64_t v2 = sub_10000435C(&qword_1000AAAB8) - 8;
  __chkstk_darwin(v2);
  uint64_t v41 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for Text.TruncationMode();
  uint64_t v37 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v36 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = sub_10000435C(&qword_1000AAAC0) - 8;
  __chkstk_darwin(v38);
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = sub_10000435C(&qword_1000AAAC8) - 8;
  __chkstk_darwin(v43);
  uint64_t v42 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v8 = v1;
  uint64_t v9 = *v1;
  uint64_t v10 = v1[1];
  uint64_t v11 = v8;
  uint64_t v39 = v8;
  uint64_t v45 = v9;
  uint64_t v46 = v10;
  sub_1000099C8();
  swift_bridgeObjectRetain();
  uint64_t v12 = Text.init<A>(_:)();
  uint64_t v14 = v13;
  char v16 = v15 & 1;
  uint64_t v45 = sub_100070B64(v11[2] & 1);
  uint64_t v17 = Text.foregroundStyle<A>(_:)();
  uint64_t v19 = v18;
  uint64_t v35 = v20;
  char v22 = v21 & 1;
  sub_100009A1C(v12, v14, v16);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v25 = v36;
  uint64_t v24 = v37;
  uint64_t v26 = v40;
  (*(void (**)(char *, void, uint64_t))(v37 + 104))(v36, enum case for Text.TruncationMode.tail(_:), v40);
  uint64_t v27 = swift_getKeyPath();
  uint64_t v28 = *(int *)(v2 + 36);
  uint64_t v29 = (uint64_t)v41;
  (*(void (**)(char *, char *, uint64_t))(v24 + 16))(&v41[v28], v25, v26);
  *(void *)uint64_t v29 = v27;
  sub_100009E70(v29, (uint64_t)&v6[*(int *)(v38 + 44)], &qword_1000AAAB8);
  *(void *)uint64_t v6 = v17;
  *((void *)v6 + 1) = v19;
  v6[16] = v22;
  *((void *)v6 + 3) = v35;
  *((void *)v6 + 4) = KeyPath;
  *((void *)v6 + 5) = 1;
  v6[48] = 0;
  sub_10000B970(v17, v19, v22);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_100009ED4(v29, &qword_1000AAAB8);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v25, v26);
  sub_100009A1C(v17, v19, v22);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v30 = v39[3];
  LOBYTE(KeyPath) = *((unsigned char *)v39 + 32);
  sub_10001F504(v30, KeyPath);
  LOBYTE(v29) = sub_100013084(v30, KeyPath);
  sub_10001F574(v30, KeyPath);
  if (v29) {
    double v31 = 1.0;
  }
  else {
    double v31 = 0.5;
  }
  uint64_t v32 = v42;
  sub_100009E70((uint64_t)v6, v42, &qword_1000AAAC0);
  *(double *)(v32 + *(int *)(v43 + 44)) = v31;
  sub_100009ED4((uint64_t)v6, &qword_1000AAAC0);
  return sub_100009F30(v32, v44, &qword_1000AAAC8);
}

uint64_t sub_100066238@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v79 = a4;
  int v78 = a3;
  LODWORD(v74) = a2;
  uint64_t v77 = a5;
  uint64_t v6 = type metadata accessor for HighlightHoverEffect();
  uint64_t v75 = *(void *)(v6 - 8);
  uint64_t v76 = v6;
  __chkstk_darwin(v6);
  unint64_t v69 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = sub_10000435C(&qword_1000AA9B8);
  uint64_t v8 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  uint64_t v10 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000435C((uint64_t *)&unk_1000AA9C0);
  uint64_t v12 = v11 - 8;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000435C(&qword_1000AA258);
  __chkstk_darwin(v15 - 8);
  uint64_t v61 = (char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = sub_10000435C(&qword_1000AA9D0);
  __chkstk_darwin(v64);
  uint64_t v65 = (uint64_t)&v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = sub_10000435C(&qword_1000AA9D8);
  uint64_t v70 = *(void *)(v73 - 8);
  __chkstk_darwin(v73);
  uint64_t v68 = (char *)&v60 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = sub_10000435C(&qword_1000AA9E0);
  __chkstk_darwin(v66);
  uint64_t v72 = (char *)&v60 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for MenuStyleConfiguration();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v60 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v60 - v25;
  uint64_t v71 = v21;
  uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  v27((char *)&v60 - v25, a1, v20);
  uint64_t v28 = swift_allocObject();
  char v29 = v74;
  *(unsigned char *)(v28 + 16) = v74;
  int v62 = v29 & 1;
  *(unsigned char *)(v28 + 24) = v78;
  *(void *)(v28 + 32) = v79;
  swift_retain();
  MenuStyleConfiguration.onPresentationChanged.setter();
  uint64_t v67 = v26;
  uint64_t v74 = v20;
  v27(v24, (uint64_t)v26, v20);
  uint64_t v30 = (uint64_t)v61;
  Menu<>.init(_:)();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v32 = v63;
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v14, v10, v63);
  uint64_t v33 = &v14[*(int *)(v12 + 44)];
  *(void *)uint64_t v33 = KeyPath;
  v33[8] = 0;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v32);
  uint64_t v34 = static Alignment.center.getter();
  sub_1000359B0(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v30, 0.0, 1, INFINITY, 0, v34, v35);
  sub_100009ED4((uint64_t)v14, (uint64_t *)&unk_1000AA9C0);
  uint64_t v36 = self;
  id v37 = [v36 currentDevice];
  id v38 = [v37 userInterfaceIdiom];

  char v39 = 0;
  if (v38 == (id)6)
  {
    LOBYTE(v81) = v78 & 1;
    uint64_t v82 = v79;
    sub_10000435C((uint64_t *)&unk_1000AA870);
    State.wrappedValue.getter();
    char v39 = v80;
  }
  uint64_t v40 = v65;
  sub_100009E70(v30, v65, &qword_1000AA258);
  uint64_t v41 = (unsigned char *)(v40 + *(int *)(v64 + 36));
  *uint64_t v41 = v39;
  v41[1] = 0;
  v41[2] = v62;
  sub_100009ED4(v30, &qword_1000AA258);
  uint64_t v42 = v69;
  static CustomHoverEffect<>.highlight.getter();
  id v43 = [v36 currentDevice];
  [v43 userInterfaceIdiom];

  sub_100070408();
  sub_10006F520(&qword_1000AA880, (void (*)(uint64_t))&type metadata accessor for HighlightHoverEffect);
  uint64_t v44 = v68;
  uint64_t v45 = v76;
  View.hoverEffect<A>(_:isEnabled:)();
  (*(void (**)(char *, uint64_t))(v75 + 8))(v42, v45);
  sub_100009ED4(v40, &qword_1000AA9D0);
  id v46 = [v36 currentDevice];
  id v47 = [v46 userInterfaceIdiom];

  if (v47 == (id)6) {
    uint64_t v48 = static Color.clear.getter();
  }
  else {
    uint64_t v48 = static Color.primary.getter();
  }
  uint64_t v49 = v48;
  uint64_t v50 = swift_getKeyPath();
  uint64_t v81 = v49;
  swift_retain();
  uint64_t v51 = AnyShapeStyle.init<A>(_:)();
  uint64_t v52 = v70;
  uint64_t v54 = (uint64_t)v72;
  uint64_t v53 = v73;
  (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v72, v44, v73);
  swift_release();
  uint64_t v55 = (uint64_t *)(v54 + *(int *)(v66 + 36));
  *uint64_t v55 = v50;
  v55[1] = v51;
  (*(void (**)(char *, uint64_t))(v52 + 8))(v44, v53);
  char v80 = 0;
  State.init(wrappedValue:)();
  LOBYTE(v50) = v81;
  uint64_t v56 = v82;
  uint64_t v57 = v77;
  sub_100009E70(v54, v77, &qword_1000AA9E0);
  uint64_t v58 = v57 + *(int *)(sub_10000435C(&qword_1000AAA18) + 36);
  *(unsigned char *)uint64_t v58 = v50;
  *(void *)(v58 + 8) = v56;
  sub_100009ED4(v54, &qword_1000AA9E0);
  return (*(uint64_t (**)(char *, uint64_t))(v71 + 8))(v67, v74);
}

uint64_t sub_100066A2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100066238(a1, *v2, v2[8], *((void *)v2 + 2), a2);
}

__n128 sub_100066A3C@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v3 = static Color.clear.getter();
  uint64_t v4 = static Alignment.center.getter();
  sub_100035A20(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v32, 0.0, 1, INFINITY, 0, v4, v5, v3);
  swift_release();
  unint64_t v28 = v32.n128_u64[1];
  unint64_t v29 = v32.n128_u64[0];
  unsigned __int8 v6 = v33;
  unsigned __int8 v7 = v36;
  unint64_t v26 = v37;
  unint64_t v27 = v35;
  unsigned __int8 v8 = v38;
  unsigned __int8 v9 = v40;
  unint64_t v24 = v41;
  unint64_t v25 = v39;
  unsigned __int8 v10 = v42;
  unint64_t v23 = v43;
  unsigned __int8 v22 = v44;
  unint64_t v20 = v46;
  unint64_t v21 = v45;
  uint64_t v11 = static Alignment.center.getter();
  unint64_t v30 = v12;
  uint64_t v31 = v11;
  uint64_t v13 = v1 + *(int *)(type metadata accessor for TFAnimatedText(0) + 36);
  uint64_t v14 = *(void *)v13;
  char v15 = *(unsigned char *)(v13 + 8);
  sub_10001F504(*(void *)v13, v15);
  char v16 = sub_100013084(v14, v15);
  sub_10001F574(v14, v15);
  sub_100066C80();
  if ((v16 & 1) == 0) {
    swift_getKeyPath();
  }
  sub_100070ABC();
  sub_100070B10();
  _ConditionalContent<>.init(storage:)();
  __n128 result = v32;
  unsigned __int8 v18 = v33;
  unsigned __int8 v19 = v34;
  a1->n128_u64[0] = v29;
  a1->n128_u64[1] = v28;
  a1[1].n128_u8[0] = v6;
  a1[1].n128_u64[1] = v27;
  a1[2].n128_u8[0] = v7;
  a1[2].n128_u64[1] = v26;
  a1[3].n128_u8[0] = v8;
  a1[3].n128_u64[1] = v25;
  a1[4].n128_u8[0] = v9;
  a1[4].n128_u64[1] = v24;
  a1[5].n128_u8[0] = v10;
  a1[5].n128_u64[1] = v23;
  a1[6].n128_u8[0] = v22;
  a1[6].n128_u64[1] = v21;
  a1[7].n128_u64[0] = v20;
  a1[7].n128_u8[8] = 0;
  a1[8] = result;
  a1[9].n128_u8[0] = v18;
  a1[9].n128_u8[1] = v19;
  a1[9].n128_u64[1] = v31;
  a1[10].n128_u64[0] = v30;
  return result;
}

uint64_t sub_100066C80()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for TFAnimatedText(0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for DynamicTypeSize();
  uint64_t v5 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  unsigned __int8 v7 = (NSString *)((char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  unsigned __int8 v8 = self;
  uint64_t v9 = *(void *)(v1 + 16);
  uint64_t v10 = *(void *)(v1 + 24);
  NSString v11 = String._bridgeToObjectiveC()();
  id v12 = [v8 animationWithName:v11];

  sub_100013C2C((uint64_t)v7);
  if (v9 == 6777186 && v10 == 0xE300000000000000)
  {
    sub_10006FF40(v1, (uint64_t)v4, type metadata accessor for TFAnimatedText);
    uint64_t v13 = v26;
LABEL_5:
    char v16 = &v4[*(int *)(v2 + 36)];
    uint64_t v17 = *(void *)v16;
    char v18 = v16[8];
    sub_10001F504(*(void *)v16, v18);
    char v15 = sub_100013084(v17, v18);
    sub_10001F574(v17, v18);
    goto LABEL_6;
  }
  char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
  sub_10006FF40(v1, (uint64_t)v4, type metadata accessor for TFAnimatedText);
  char v15 = 0;
  uint64_t v13 = v26;
  if (v14) {
    goto LABEL_5;
  }
LABEL_6:
  sub_10006FFA8((uint64_t)v4, type metadata accessor for TFAnimatedText);
  uint64_t v19 = v1 + *(int *)(v2 + 40);
  uint64_t v20 = *(void *)v19;
  char v21 = *(unsigned char *)(v19 + 8);
  sub_10001F504(*(void *)v19, v21);
  double v22 = sub_100013288(v20, v21);
  sub_10001F574(v20, v21);
  uint64_t v23 = sub_100066F48(v7, (uint64_t)v12, v15 & 1, v22);
  swift_unknownObjectRelease();
  (*(void (**)(NSString *, uint64_t))(v5 + 8))(v7, v13);
  return v23;
}

uint64_t sub_100066F48(NSString *a1, uint64_t a2, int a3, double a4)
{
  uint64_t v5 = v4;
  int v76 = a3;
  uint64_t v79 = a2;
  int v78 = a1;
  uint64_t v7 = sub_10000435C((uint64_t *)&unk_1000AAA90);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ColorScheme();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  char v14 = (char *)v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  char v16 = (char *)v75 - v15;
  uint64_t v17 = type metadata accessor for TFAnimatedText(0);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v20 = (char *)v75 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = v5 + *(int *)(v18 + 44);
  uint64_t v22 = *(void *)v21;
  char v23 = *(unsigned char *)(v21 + 8);
  sub_10001F504(*(void *)v21, v23);
  sub_100012C58(v22, v23);
  sub_10001F574(v22, v23);
  LODWORD(v22) = *(unsigned __int8 *)(v5 + 32);
  uint64_t v77 = v5;
  sub_10006FF40(v5, (uint64_t)v20, type metadata accessor for TFAnimatedText);
  if (v22 == 1)
  {
    sub_10006FFA8((uint64_t)v20, type metadata accessor for TFAnimatedText);
  }
  else
  {
    sub_100013938((uint64_t)v16);
    (*(void (**)(char *, void, uint64_t))(v11 + 104))(v14, enum case for ColorScheme.dark(_:), v10);
    char v24 = static ColorScheme.== infix(_:_:)();
    uint64_t v25 = *(void (**)(char *, uint64_t))(v11 + 8);
    v25(v14, v10);
    v25(v16, v10);
    sub_10006FFA8((uint64_t)v20, type metadata accessor for TFAnimatedText);
    if ((v24 & 1) == 0)
    {
      sub_10000A3AC(0, &qword_1000A9708);
      static Color.primary.getter();
      id v26 = (id)UIColor.init(_:)();
      goto LABEL_6;
    }
  }
  id v26 = [self whiteColor];
LABEL_6:
  unint64_t v27 = v26;
  uint64_t v28 = v79;
  unint64_t v29 = v78;
  unint64_t v30 = self;
  uint64_t v31 = type metadata accessor for DynamicTypeSize();
  uint64_t v32 = *(void *)(v31 - 8);
  (*(void (**)(char *, NSString *, uint64_t))(v32 + 16))(v9, v29, v31);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v9, 0, 1, v31);
  unsigned __int8 v33 = (void *)UIContentSizeCategory.init(_:)();
  id v34 = [self traitCollectionWithPreferredContentSizeCategory:v33];

  id v35 = [v30 preferredFontForTextStyle:UIFontTextStyleTitle3 compatibleWithTraitCollection:v34];
  sub_10000435C(&qword_1000AAAA0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100083920;
  *(void *)(inited + 32) = NSFontAttributeName;
  uint64_t v37 = sub_10000A3AC(0, &qword_1000A8FE8);
  *(void *)(inited + 40) = v35;
  uint64_t v79 = v37;
  *(void *)(inited + 64) = v37;
  *(void *)(inited + 72) = NSForegroundColorAttributeName;
  *(void *)(inited + 104) = sub_10000A3AC(0, &qword_1000A9708);
  *(void *)(inited + 80) = v27;
  id v38 = v35;
  int v78 = NSFontAttributeName;
  unint64_t v39 = NSForegroundColorAttributeName;
  v75[0] = v27;
  unint64_t v40 = sub_10002B1D4(inited);
  if (v28)
  {
    unint64_t v41 = NSTextAnimationAttributeName;
    uint64_t ObjectType = swift_getObjectType();
    *(void *)&long long v82 = v28;
    sub_1000208E0(&v82, v81);
    swift_unknownObjectRetain_n();
    id v42 = v41;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v80 = v40;
    sub_100033110(v81, v42, isUniquelyReferenced_nonNull_native);
    unint64_t v40 = v80;
    swift_unknownObjectRelease();

    swift_bridgeObjectRelease();
  }
  char v44 = v76;
  id v45 = 0;
  double v46 = a4 + -12.0;
  id v47 = &swift_retain_ptr;
  v75[1] = (char *)&type metadata for Any + 8;
  uint64_t v48 = &selRef_runWithFontNamesForFamilyName_usingBlock_;
  while (1)
  {
    id v49 = [objc_allocWithZone((Class)NSMutableAttributedString) init];

    uint64_t ObjectType = v79;
    *(void *)&long long v82 = v38;
    sub_1000208E0(&v82, v81);
    id v50 = v49;
    uint64_t v51 = v78;
    id v52 = v38;
    char v53 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v80 = v40;
    sub_100033110(v81, v51, v53);
    unint64_t v40 = v80;

    uint64_t result = swift_bridgeObjectRelease();
    if (v44) {
      break;
    }
    uint64_t v55 = v48;
    if (!v50) {
      goto LABEL_21;
    }
LABEL_13:
    id v61 = objc_allocWithZone((Class)v47[287]);
    id v45 = v50;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    NSString v62 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    type metadata accessor for Key(0);
    sub_10006F520((unint64_t *)&unk_1000AA390, type metadata accessor for Key);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v64 = [v61 initWithString:v62 attributes:isa];

    [v45 v55[223] v64];
    uint64_t v48 = v55;
    if (v44)
    {
      id v65 = objc_allocWithZone((Class)NSAttributedString);
      id v66 = v45;
      NSString v67 = String._bridgeToObjectiveC()();
      id v68 = [v65 initWithString:v67];

      [v66 v55[223] v68];
    }
    [v52 pointSize];
    id v70 = [v52 fontWithSize:v69 + -2.0];

    id v38 = v70;
    [v45 size];
    if (v46 >= v71)
    {

      id v74 = v38;
      id v38 = v45;
      goto LABEL_19;
    }
    [v38 pointSize];
    double v73 = v72;

    id v47 = &swift_retain_ptr;
    if (v73 <= 8.0)
    {
      id v74 = v75[0];
LABEL_19:

      swift_bridgeObjectRelease();
      return (uint64_t)v45;
    }
  }
  if (v50)
  {
    uint64_t v55 = v48;
    id v56 = objc_allocWithZone((Class)v47[287]);
    id v57 = v50;
    swift_bridgeObjectRetain();
    NSString v58 = String._bridgeToObjectiveC()();
    type metadata accessor for Key(0);
    sub_10006F520((unint64_t *)&unk_1000AA390, type metadata accessor for Key);
    Class v59 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v60 = [v56 initWithString:v58 attributes:v59];

    id v47 = &swift_retain_ptr;
    [v57 v48[223] v60];

    char v44 = v76;
    goto LABEL_13;
  }
  __break(1u);
LABEL_21:
  __break(1u);
  return result;
}

unsigned __int8 *sub_100067874(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v6 = a4 & 1;
  type metadata accessor for _UIAnimatedTextView();
  uint64_t ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  id v8 = [objc_allocWithZone(ObjCClassFromMetadata) initReadonlyAndUnselectableWithFrame:0.0 textContainer:0.0];
  if (!v8) {
    id v8 = [objc_allocWithZone(ObjCClassFromMetadata) init];
  }
  uint64_t v9 = self;
  uint64_t v10 = (unsigned __int8 *)v8;
  id v11 = [v9 clearColor];
  [v10 setBackgroundColor:v11];

  [v10 setSelectable:0];
  [v10 setEditable:0];
  id v12 = [v10 textLayoutManager];
  if (v12)
  {
    uint64_t v13 = v12;
    id v14 = [v12 textContainer];

    if (v14)
    {
      [v14 setMaximumNumberOfLines:1];
    }
  }
  double left = UIEdgeInsetsZero.left;
  double bottom = UIEdgeInsetsZero.bottom;
  double right = UIEdgeInsetsZero.right;
  [v10 setContentInset:UIEdgeInsetsZero.top, left, bottom, right];
  [v10 setAttributedText:a2];
  [v10 setTextAlignment:1];
  [v10 setContentInset:UIEdgeInsetsZero.top, left, bottom, right];
  sub_1000682F4(0, 1);
  sub_10001F504(a3, v6);
  char v18 = sub_100013084(a3, v6);
  sub_10001F574(a3, v6);
  if (v18)
  {
    int v19 = v10[OBJC_IVAR____TtC19FontPickerUIServiceP33_364789B77C608B517795CE5B8DEADC4419_UIAnimatedTextView_shouldAnimate];
    v10[OBJC_IVAR____TtC19FontPickerUIServiceP33_364789B77C608B517795CE5B8DEADC4419_UIAnimatedTextView_shouldAnimate] = 0;
    if (v19 == 1)
    {
      [v10 setAllowsTextAnimations:0];
      id v20 = [v10 textLayoutManager];
      if (v20)
      {
        uint64_t v21 = v20;
        Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
        NSString v23 = String._bridgeToObjectiveC()();
        [v21 setValue:isa forKey:v23];
      }
    }
  }
  else
  {
    sub_100067F70();
  }
  return v10;
}

void sub_100067B38(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  [a1 setAttributedText:];
  [a1 setTextAlignment:1];
  type metadata accessor for _UIAnimatedTextView();
  uint64_t v8 = swift_dynamicCastClass();
  if (!v8) {
    return;
  }
  uint64_t v9 = (unsigned char *)v8;
  id v18 = a1;
  sub_1000682F4(0, 1);
  char v10 = a5 & 1;
  sub_10001F504(a4, v10);
  char v11 = sub_100013084(a4, v10);
  sub_10001F574(a4, v10);
  if ((v11 & 1) == 0)
  {
    sub_100067F70();
LABEL_8:
    uint64_t v17 = v18;
    goto LABEL_9;
  }
  int v12 = v9[OBJC_IVAR____TtC19FontPickerUIServiceP33_364789B77C608B517795CE5B8DEADC4419_UIAnimatedTextView_shouldAnimate];
  v9[OBJC_IVAR____TtC19FontPickerUIServiceP33_364789B77C608B517795CE5B8DEADC4419_UIAnimatedTextView_shouldAnimate] = 0;
  if (v12 != 1) {
    goto LABEL_8;
  }
  [v9 setAllowsTextAnimations:0];
  id v13 = [v9 textLayoutManager];
  if (!v13) {
    goto LABEL_8;
  }
  id v14 = v13;
  Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
  NSString v16 = String._bridgeToObjectiveC()();
  [v14 setValue:isa forKey:v16];

  uint64_t v17 = v16;
LABEL_9:
}

unsigned __int8 *sub_100067CC4(uint64_t a1)
{
  return sub_100067874(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned char *)(v1 + 16));
}

void sub_100067CD0(void *a1, uint64_t a2)
{
  sub_100067B38(a1, a2, *(void *)v2, *(void *)(v2 + 8), *(unsigned char *)(v2 + 16));
}

uint64_t sub_100067CEC(uint64_t a1, unsigned __int8 a2, uint64_t a3, unsigned __int8 a4)
{
  if ((a2 | a4)) {
    return 0;
  }
  uint64_t v4 = a1;
  type metadata accessor for _UIAnimatedTextView();
  if (swift_dynamicCastClass()) {
    sub_1000682F4(a3, 0);
  }
  return v4;
}

uint64_t sub_100067D74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100073C0C();

  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_100067DD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100073C0C();

  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_100067E3C()
{
}

uint64_t sub_100067F70()
{
  uint64_t result = (uint64_t)[v0 attributedText];
  if (result)
  {
    uint64_t v2 = (void *)result;
    id v3 = [(id)result attribute:NSTextAnimationAttributeName atIndex:0 effectiveRange:0];

    if (v3)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v18, 0, sizeof(v18));
    }
    sub_100009F30((uint64_t)v18, (uint64_t)aBlock, &qword_1000A9700);
    if (v14)
    {
      sub_10000435C((uint64_t *)&unk_1000AA3A0);
      uint64_t result = swift_dynamicCast();
      if (result)
      {
        uint64_t v4 = v17;
        char v5 = *((unsigned char *)v0
             + OBJC_IVAR____TtC19FontPickerUIServiceP33_364789B77C608B517795CE5B8DEADC4419_UIAnimatedTextView_shouldAnimate);
        *((unsigned char *)v0
        + OBJC_IVAR____TtC19FontPickerUIServiceP33_364789B77C608B517795CE5B8DEADC4419_UIAnimatedTextView_shouldAnimate) = 1;
        if ((v5 & 1) == 0)
        {
          [v0 setAllowsTextAnimations:1];
          id v6 = [v0 textLayoutManager];
          if (v6)
          {
            uint64_t v7 = v6;
            Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
            NSString v9 = String._bridgeToObjectiveC()();
            [v7 setValue:isa forKey:v9];
          }
        }
        uint64_t v10 = swift_allocObject();
        swift_unknownObjectWeakInit();
        uint64_t v15 = sub_1000687B4;
        uint64_t v16 = v10;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_100068294;
        id v14 = &unk_1000A04A0;
        char v11 = _Block_copy(aBlock);
        swift_release();
        id v12 = [v0 _animatorForTextAnimation:v4 notify:v11];
        _Block_release(v11);
        if (v12)
        {
          [v12 start];
          swift_unknownObjectRelease();
        }
        return swift_unknownObjectRelease();
      }
    }
    else
    {
      return sub_100009ED4((uint64_t)aBlock, &qword_1000A9700);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100068204(void *a1)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v3 = (void *)Strong;
    if (*(unsigned char *)(Strong
                  + OBJC_IVAR____TtC19FontPickerUIServiceP33_364789B77C608B517795CE5B8DEADC4419_UIAnimatedTextView_shouldAnimate) == 1
      && [a1 state] == (id)1)
    {
      [a1 start];
    }
  }
}

uint64_t sub_100068294(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();

  return swift_unknownObjectRelease();
}

void sub_1000682F4(uint64_t a1, char a2)
{
  id v5 = [v2 attributedText];
  if (!v5)
  {
    __break(1u);
    goto LABEL_22;
  }
  id v6 = v5;
  id v7 = [v5 string];

  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v10 = v9;

  swift_bridgeObjectRelease();
  uint64_t v11 = HIBYTE(v10) & 0xF;
  if ((v10 & 0x2000000000000000) == 0) {
    uint64_t v11 = v8 & 0xFFFFFFFFFFFFLL;
  }
  if (v11)
  {
    id v12 = [v2 attributedText];
    if (v12)
    {
      id v13 = v12;
      id v14 = [v12 attribute:NSFontAttributeName atIndex:0 effectiveRange:0];

      if (v14)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        memset(v30, 0, sizeof(v30));
      }
      sub_100009F30((uint64_t)v30, (uint64_t)v31, &qword_1000A9700);
      if (v32)
      {
        sub_10000A3AC(0, &qword_1000A8FE8);
        if (swift_dynamicCast())
        {
          [v29 ascender];
          double v16 = v15;
          [v29 descender];
          double v18 = v17;

          double v19 = v16 + fabs(v18);
          if (a2)
          {
LABEL_12:
            [v2 bounds];
            double Height = CGRectGetHeight(v33);
LABEL_19:
            [v2 setTextContainerInset:(Height - v19) * 0.5, 0.0, 0.0, 0.0];
            return;
          }
LABEL_18:
          double Height = *(double *)&a1;
          goto LABEL_19;
        }
      }
      else
      {
        sub_100009ED4((uint64_t)v31, &qword_1000A9700);
      }
      id v21 = [v2 attributedText];
      if (v21)
      {
        uint64_t v22 = v21;
        id v23 = [v21 string];

        if (v23)
        {
          id v24 = [v2 attributedText];
          if (v24)
          {
            uint64_t v25 = v24;
            id v26 = [v24 attributesAtIndex:0 effectiveRange:0];

            type metadata accessor for Key(0);
            sub_10006F520((unint64_t *)&unk_1000AA390, type metadata accessor for Key);
            static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

            Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            [v23 sizeWithAttributes:isa];
            double v19 = v28;

            if (a2) {
              goto LABEL_12;
            }
            goto LABEL_18;
          }
LABEL_25:
          __break(1u);
          return;
        }
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
}

id sub_100068720()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for _UIAnimatedTextView();
  return [super dealloc];
}

uint64_t type metadata accessor for _UIAnimatedTextView()
{
  return self;
}

uint64_t sub_10006877C()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000687B4(void *a1)
{
}

uint64_t sub_1000687BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000687CC()
{
  return swift_release();
}

id sub_1000687D4()
{
  uint64_t v1 = *v0;
  id v2 = [objc_allocWithZone((Class)UILabel) init];
  id v3 = self;
  id v4 = v2;
  id v5 = [v3 clearColor];
  [v4 setBackgroundColor:v5];

  [v4 setAttributedText:v1];
  [v4 setTextAlignment:1];
  return v4;
}

id sub_100068894(void *a1)
{
  return [a1 setAttributedText:*v1];
}

double sub_1000688A4(uint64_t a1, char a2)
{
  [*v2 size];
  double v6 = *(double *)&a1;
  if (a2) {
    double v6 = result;
  }
  if (v6 < result) {
    return v6;
  }
  return result;
}

uint64_t sub_100068930(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100073C60();

  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_100068994(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100073C60();

  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_1000689F8()
{
}

uint64_t sub_100068A20@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_10000435C(&qword_1000AA3C8);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (uint64_t *)((char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = type metadata accessor for TFComponentBackground(0);
  unint64_t v10 = (int *)(v9 - 8);
  __chkstk_darwin(v9);
  id v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t KeyPath = swift_getKeyPath();
  *uint64_t v8 = swift_getKeyPath();
  sub_10000435C((uint64_t *)&unk_1000A8F70);
  swift_storeEnumTagMultiPayload();
  uint64_t v14 = swift_getKeyPath();
  uint64_t v15 = swift_getKeyPath();
  *id v12 = a2 & 1;
  v12[1] = BYTE1(a2) & 1;
  v12[2] = BYTE2(a2) & 1;
  *((void *)v12 + 1) = KeyPath;
  unsigned char v12[16] = 0;
  sub_100009F30((uint64_t)v8, (uint64_t)&v12[v10[10]], &qword_1000AA3C8);
  double v16 = &v12[v10[11]];
  *(void *)double v16 = v14;
  v16[8] = 0;
  double v17 = &v12[v10[12]];
  *(void *)double v17 = v15;
  v17[8] = 0;
  double v18 = &v12[v10[13]];
  *(void *)double v18 = swift_getKeyPath();
  v18[8] = 0;
  double v19 = &v12[v10[14]];
  *(void *)double v19 = swift_getKeyPath();
  v19[8] = 0;
  uint64_t v20 = static Alignment.center.getter();
  uint64_t v22 = v21;
  uint64_t v23 = a3 + *(int *)(sub_10000435C(&qword_1000AAAA8) + 36);
  sub_10006FF40((uint64_t)v12, v23, type metadata accessor for TFComponentBackground);
  id v24 = (uint64_t *)(v23 + *(int *)(sub_10000435C(&qword_1000AA968) + 36));
  *id v24 = v20;
  v24[1] = v22;
  uint64_t v25 = sub_10000435C(&qword_1000AAAB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 16))(a3, a1, v25);
  return sub_10006FFA8((uint64_t)v12, type metadata accessor for TFComponentBackground);
}

uint64_t sub_100068C9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (v2[2]) {
    int v3 = 0x10000;
  }
  else {
    int v3 = 0;
  }
  if (v2[1]) {
    int v4 = 256;
  }
  else {
    int v4 = 0;
  }
  return sub_100068A20(a1, v4 | *v2 | v3, a2);
}

uint64_t sub_100068CCC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for TFComponentBackground(0);
  __chkstk_darwin(v3);
  id v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v6 = *v1;
  sub_10006FF40((uint64_t)v1, (uint64_t)v5, type metadata accessor for TFComponentBackground);
  if (v6)
  {
    sub_10006FFA8((uint64_t)v5, type metadata accessor for TFComponentBackground);
    goto LABEL_7;
  }
  uint64_t v7 = &v5[*(int *)(v3 + 40)];
  uint64_t v8 = *(void *)v7;
  char v9 = v7[8];
  sub_10001F504(*(void *)v7, v9);
  char v10 = sub_100013084(v8, v9);
  sub_10001F574(v8, v9);
  sub_10006FFA8((uint64_t)v5, type metadata accessor for TFComponentBackground);
  if ((v10 & 1) == 0)
  {
LABEL_7:
    if (*v1)
    {
      BOOL v13 = 0;
      goto LABEL_9;
    }
    BOOL v13 = 0;
    if ((v1[1] & 1) == 0) {
      goto LABEL_11;
    }
LABEL_6:
    uint64_t v14 = sub_100068EBC();
    goto LABEL_12;
  }
  id v11 = [self currentDevice];
  id v12 = [v11 userInterfaceIdiom];

  BOOL v13 = v12 != (id)6;
  if (*v1)
  {
LABEL_9:
    v21[1] = static Color.clear.getter();
    uint64_t v14 = AnyShapeStyle.init<A>(_:)();
    goto LABEL_12;
  }
  if (v1[1]) {
    goto LABEL_6;
  }
LABEL_11:
  uint64_t v14 = sub_1000691B4();
LABEL_12:
  uint64_t v15 = v14;
  uint64_t v16 = static Alignment.center.getter();
  uint64_t v18 = v17;
  uint64_t result = static HierarchicalShapeStyle.quaternary.getter();
  float v20 = 0.0;
  *(void *)a1 = v15;
  *(_DWORD *)(a1 + 8) = result;
  if (v13) {
    float v20 = 0.5;
  }
  *(float *)(a1 + 12) = v20;
  *(void *)(a1 + 16) = v16;
  *(void *)(a1 + 24) = v18;
  return result;
}

uint64_t sub_100068EBC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ColorScheme();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  char v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v20 - v7;
  id v9 = [self currentDevice];
  id v10 = [v9 userInterfaceIdiom];

  if (v10 == (id)6)
  {
  }
  else if (*(unsigned char *)(v1 + 2) == 1)
  {
    type metadata accessor for TFComponentBackground(0);
    sub_100013938((uint64_t)v8);
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v6, enum case for ColorScheme.dark(_:), v2);
    char v11 = static ColorScheme.== infix(_:_:)();
    id v12 = *(void (**)(char *, uint64_t))(v3 + 8);
    v12(v6, v2);
    v12(v8, v2);
    BOOL v13 = self;
    if (v11) {
      id v14 = [v13 systemGray3Color];
    }
    else {
      id v17 = [v13 systemGray2Color];
    }
    Color.init(uiColor:)();
    uint64_t v15 = *(void *)(v1 + 8);
    char v16 = *(unsigned char *)(v1 + 16);
    sub_10001F504(v15, v16);
    sub_100012C58(v15, v16);
    sub_10001F574(v15, v16);
    uint64_t v18 = Color.opacity(_:)();
    swift_release();
    uint64_t v21 = v18;
  }
  else
  {
    uint64_t v21 = static Color.accentColor.getter();
  }
  return AnyShapeStyle.init<A>(_:)();
}

uint64_t sub_1000691B4()
{
  uint64_t v1 = type metadata accessor for ColorScheme();
  uint64_t v45 = *(void *)(v1 - 8);
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  char v6 = (char *)&v43 - v5;
  uint64_t v7 = type metadata accessor for TFComponentBackground(0);
  __chkstk_darwin(v7);
  id v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Material();
  __chkstk_darwin(v10);
  id v11 = [self currentDevice];
  id v12 = [v11 userInterfaceIdiom];

  if (v12 == (id)6)
  {
    static Material.thin.getter();
    return AnyShapeStyle.init<A>(_:)();
  }
  char v44 = v4;
  uint64_t v13 = v45;
  uint64_t v14 = *(void *)(v0 + 8);
  char v15 = *(unsigned char *)(v0 + 16);
  sub_10001F504(v14, v15);
  char v16 = sub_100012C58(v14, v15);
  sub_10001F574(v14, v15);
  uint64_t v17 = v0;
  if ((v16 - 2) < 3u)
  {
    int v18 = *(unsigned __int8 *)(v0 + 2);
    sub_10006FF40(v0, (uint64_t)v9, type metadata accessor for TFComponentBackground);
    if (v18 != 1)
    {
      uint64_t v34 = *((void *)v9 + 1);
      char v35 = v9[16];
      sub_10001F504(v34, v35);
      sub_100012C58(v34, v35);
      sub_10001F574(v34, v35);
    }
    sub_10006FFA8((uint64_t)v9, type metadata accessor for TFComponentBackground);
    unsigned __int8 v36 = v44;
    uint64_t v37 = v0;
    sub_100013938((uint64_t)v6);
    (*(void (**)(char *, void, uint64_t))(v13 + 104))(v36, enum case for ColorScheme.dark(_:), v1);
    char v38 = static ColorScheme.== infix(_:_:)();
    unint64_t v39 = *(void (**)(char *, uint64_t))(v13 + 8);
    v39(v36, v1);
    v39(v6, v1);
    if (v38)
    {
      static Color.primary.getter();
      uint64_t v40 = Color.opacity(_:)();
      swift_release();
      uint64_t v46 = v40;
    }
    else
    {
      float v41 = 0.85;
      if (*(unsigned char *)(v37 + 2)) {
        float v41 = 0.7;
      }
      *(float *)&uint64_t v46 = v41;
      sub_10000435C(&qword_1000AAE40);
      sub_10000A368(&qword_1000AAE48, &qword_1000AAE40);
    }
    return AnyShapeStyle.init<A>(_:)();
  }
  uint64_t v19 = v0 + *(int *)(v7 + 48);
  uint64_t v20 = *(void *)v19;
  char v21 = *(unsigned char *)(v19 + 8);
  sub_10001F504(*(void *)v19, v21);
  char v22 = sub_100013084(v20, v21);
  sub_10001F574(v20, v21);
  uint64_t v23 = self;
  id v24 = &selRef_secondarySystemFillColor;
  if ((v22 & 1) == 0) {
    id v24 = &selRef_tertiarySystemFillColor;
  }
  id v25 = [v23 *v24];
  sub_10001F504(v20, v21);
  char v26 = sub_100013084(v20, v21);
  sub_10001F574(v20, v21);
  uint64_t v27 = self;
  double v28 = &selRef_quaternarySystemFillColor;
  if (v26) {
    double v28 = &selRef_tertiarySystemFillColor;
  }
  id v29 = [v27 *v28];
  unint64_t v30 = v29;
  if (*(unsigned char *)(v17 + 2)) {
    uint64_t v31 = v29;
  }
  else {
    uint64_t v31 = v25;
  }
  id v32 = v31;
  uint64_t v46 = Color.init(uiColor:)();
  uint64_t v33 = AnyShapeStyle.init<A>(_:)();

  return v33;
}

ValueMetadata *type metadata accessor for TFMenuLabelChevronDisplayedKey()
{
  return &type metadata for TFMenuLabelChevronDisplayedKey;
}

uint64_t initializeBufferWithCopyOfBuffer for TFComponentBackgroundModifier(uint64_t result, __int16 *a2)
{
  __int16 v2 = *a2;
  *(unsigned char *)(result + 2) = *((unsigned char *)a2 + 2);
  *(_WORD *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for TFComponentBackgroundModifier(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF)
  {
    if ((a2 + 33554177) >> 24)
    {
      int v2 = *((unsigned __int8 *)a1 + 3);
      if (*((unsigned char *)a1 + 3)) {
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
      }
    }
    else
    {
      int v2 = *(unsigned __int16 *)((char *)a1 + 3);
      if (*(unsigned __int16 *)((char *)a1 + 3)) {
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
      }
    }
  }
  unsigned int v4 = *(unsigned __int8 *)a1;
  BOOL v5 = v4 >= 2;
  int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
  if (!v5) {
    int v6 = -1;
  }
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for TFComponentBackgroundModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if ((a3 + 33554177) >> 24) {
    int v3 = 1;
  }
  else {
    int v3 = 2;
  }
  if (a3 <= 0xFE) {
    int v3 = 0;
  }
  if (a2 > 0xFE)
  {
    *(_WORD *)uint64_t result = a2 - 255;
    *(unsigned char *)(result + 2) = (a2 - 255) >> 16;
    if (v3)
    {
      unsigned int v4 = ((a2 - 255) >> 24) + 1;
      if (v3 == 2) {
        *(_WORD *)(result + 3) = v4;
      }
      else {
        *(unsigned char *)(result + 3) = v4;
      }
    }
  }
  else
  {
    if (!v3) {
      goto LABEL_10;
    }
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2) {
        return result;
      }
LABEL_16:
      *(unsigned char *)uint64_t result = a2 + 1;
      return result;
    }
    *(unsigned char *)(result + 3) = 0;
    if (a2) {
      goto LABEL_16;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TFComponentBackgroundModifier()
{
  return &type metadata for TFComponentBackgroundModifier;
}

uint64_t sub_100069818(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *(void *)a1 = *a2;
    a1 = v13 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v8;
    uint64_t v9 = a3[7];
    uint64_t v10 = (void *)(a1 + v9);
    id v11 = (uint64_t *)((char *)a2 + v9);
    *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10000435C((uint64_t *)&unk_1000A8F70);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      *uint64_t v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v14 = a3[8];
    char v15 = (void *)(a1 + v14);
    char v16 = (uint64_t *)((char *)a2 + v14);
    sub_10000435C(&qword_1000AA3C0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v17 = type metadata accessor for DynamicTypeSize();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
    }
    else
    {
      void *v15 = *v16;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v18 = a3[9];
    uint64_t v19 = a1 + v18;
    uint64_t v20 = (uint64_t)a2 + v18;
    uint64_t v21 = *(void *)v20;
    char v22 = *(unsigned char *)(v20 + 8);
    sub_10001F504(*(void *)v20, v22);
    *(void *)uint64_t v19 = v21;
    *(unsigned char *)(v19 + 8) = v22;
    uint64_t v23 = a3[10];
    uint64_t v24 = a1 + v23;
    uint64_t v25 = (uint64_t)a2 + v23;
    uint64_t v26 = *(void *)v25;
    char v27 = *(unsigned char *)(v25 + 8);
    sub_10001F504(*(void *)v25, v27);
    *(void *)uint64_t v24 = v26;
    *(unsigned char *)(v24 + 8) = v27;
    uint64_t v28 = a3[11];
    uint64_t v29 = a1 + v28;
    uint64_t v30 = (uint64_t)a2 + v28;
    uint64_t v31 = *(void *)v30;
    char v32 = *(unsigned char *)(v30 + 8);
    sub_10001F504(*(void *)v30, v32);
    *(void *)uint64_t v29 = v31;
    *(unsigned char *)(v29 + 8) = v32;
  }
  return a1;
}

uint64_t sub_100069A60(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[7];
  sub_10000435C((uint64_t *)&unk_1000A8F70);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  uint64_t v6 = a1 + a2[8];
  sub_10000435C(&qword_1000AA3C0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for DynamicTypeSize();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  sub_10001F574(*(void *)(a1 + a2[9]), *(unsigned char *)(a1 + a2[9] + 8));
  sub_10001F574(*(void *)(a1 + a2[10]), *(unsigned char *)(a1 + a2[10] + 8));
  uint64_t v8 = a1 + a2[11];
  uint64_t v9 = *(void *)v8;
  char v10 = *(unsigned char *)(v8 + 8);

  return sub_10001F574(v9, v10);
}

uint64_t sub_100069BBC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v8 = a3[7];
  uint64_t v9 = (void *)(a1 + v8);
  char v10 = (void *)(a2 + v8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10000435C((uint64_t *)&unk_1000A8F70);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  }
  else
  {
    void *v9 = *v10;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v12 = a3[8];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  sub_10000435C(&qword_1000AA3C0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v15 = type metadata accessor for DynamicTypeSize();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  }
  else
  {
    void *v13 = *v14;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v16 = a3[9];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = *(void *)v18;
  char v20 = *(unsigned char *)(v18 + 8);
  sub_10001F504(*(void *)v18, v20);
  *(void *)uint64_t v17 = v19;
  *(unsigned char *)(v17 + 8) = v20;
  uint64_t v21 = a3[10];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  uint64_t v24 = *(void *)v23;
  char v25 = *(unsigned char *)(v23 + 8);
  sub_10001F504(*(void *)v23, v25);
  *(void *)uint64_t v22 = v24;
  *(unsigned char *)(v22 + 8) = v25;
  uint64_t v26 = a3[11];
  uint64_t v27 = a1 + v26;
  uint64_t v28 = a2 + v26;
  uint64_t v29 = *(void *)v28;
  char v30 = *(unsigned char *)(v28 + 8);
  sub_10001F504(*(void *)v28, v30);
  *(void *)uint64_t v27 = v29;
  *(unsigned char *)(v27 + 8) = v30;
  return a1;
}

uint64_t sub_100069DB4(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  if (a1 != a2)
  {
    uint64_t v6 = a3[7];
    uint64_t v7 = (void *)(a1 + v6);
    uint64_t v8 = (void *)(a2 + v6);
    sub_100009ED4(a1 + v6, (uint64_t *)&unk_1000A8F70);
    sub_10000435C((uint64_t *)&unk_1000A8F70);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v9 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
    }
    else
    {
      void *v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v10 = a3[8];
    uint64_t v11 = (void *)(a1 + v10);
    uint64_t v12 = (void *)(a2 + v10);
    sub_100009ED4(a1 + v10, &qword_1000AA3C0);
    sub_10000435C(&qword_1000AA3C0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = type metadata accessor for DynamicTypeSize();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    }
    else
    {
      *uint64_t v11 = *v12;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v14 = a3[9];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v17 = *(void *)v16;
  char v18 = *(unsigned char *)(v16 + 8);
  sub_10001F504(*(void *)v16, v18);
  uint64_t v19 = *(void *)v15;
  char v20 = *(unsigned char *)(v15 + 8);
  *(void *)uint64_t v15 = v17;
  *(unsigned char *)(v15 + 8) = v18;
  sub_10001F574(v19, v20);
  uint64_t v21 = a3[10];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  uint64_t v24 = *(void *)v23;
  char v25 = *(unsigned char *)(v23 + 8);
  sub_10001F504(*(void *)v23, v25);
  uint64_t v26 = *(void *)v22;
  char v27 = *(unsigned char *)(v22 + 8);
  *(void *)uint64_t v22 = v24;
  *(unsigned char *)(v22 + 8) = v25;
  sub_10001F574(v26, v27);
  uint64_t v28 = a3[11];
  uint64_t v29 = a1 + v28;
  uint64_t v30 = a2 + v28;
  uint64_t v31 = *(void *)v30;
  char v32 = *(unsigned char *)(v30 + 8);
  sub_10001F504(*(void *)v30, v32);
  uint64_t v33 = *(void *)v29;
  char v34 = *(unsigned char *)(v29 + 8);
  *(void *)uint64_t v29 = v31;
  *(unsigned char *)(v29 + 8) = v32;
  sub_10001F574(v33, v34);
  return a1;
}

uint64_t sub_10006A01C(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v7 = a3[7];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = sub_10000435C((uint64_t *)&unk_1000A8F70);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
  }
  uint64_t v12 = a3[8];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  uint64_t v15 = sub_10000435C(&qword_1000AA3C0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v16 = type metadata accessor for DynamicTypeSize();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v16 - 8) + 32))(v13, v14, v16);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  uint64_t v17 = a3[9];
  uint64_t v18 = a3[10];
  uint64_t v19 = a1 + v17;
  uint64_t v20 = a2 + v17;
  *(void *)uint64_t v19 = *(void *)v20;
  *(unsigned char *)(v19 + 8) = *(unsigned char *)(v20 + 8);
  uint64_t v21 = a1 + v18;
  uint64_t v22 = a2 + v18;
  *(void *)uint64_t v21 = *(void *)v22;
  *(unsigned char *)(v21 + 8) = *(unsigned char *)(v22 + 8);
  uint64_t v23 = a3[11];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  *(void *)uint64_t v24 = *(void *)v25;
  *(unsigned char *)(v24 + 8) = *(unsigned char *)(v25 + 8);
  return a1;
}

uint64_t sub_10006A1F8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  if (a1 != a2)
  {
    uint64_t v8 = a3[7];
    uint64_t v9 = (void *)(a1 + v8);
    uint64_t v10 = (const void *)(a2 + v8);
    sub_100009ED4(a1 + v8, (uint64_t *)&unk_1000A8F70);
    uint64_t v11 = sub_10000435C((uint64_t *)&unk_1000A8F70);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
    }
    uint64_t v13 = a3[8];
    uint64_t v14 = (void *)(a1 + v13);
    uint64_t v15 = (const void *)(a2 + v13);
    sub_100009ED4(a1 + v13, &qword_1000AA3C0);
    uint64_t v16 = sub_10000435C(&qword_1000AA3C0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v17 = type metadata accessor for DynamicTypeSize();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v17 - 8) + 32))(v14, v15, v17);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
    }
  }
  uint64_t v18 = a3[9];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = (uint64_t *)(a2 + v18);
  uint64_t v21 = *v20;
  LOBYTE(v20) = *((unsigned char *)v20 + 8);
  uint64_t v22 = *(void *)v19;
  char v23 = *(unsigned char *)(v19 + 8);
  *(void *)uint64_t v19 = v21;
  *(unsigned char *)(v19 + 8) = (_BYTE)v20;
  sub_10001F574(v22, v23);
  uint64_t v24 = a3[10];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = (uint64_t *)(a2 + v24);
  uint64_t v27 = *v26;
  LOBYTE(v26) = *((unsigned char *)v26 + 8);
  uint64_t v28 = *(void *)v25;
  char v29 = *(unsigned char *)(v25 + 8);
  *(void *)uint64_t v25 = v27;
  *(unsigned char *)(v25 + 8) = (_BYTE)v26;
  sub_10001F574(v28, v29);
  uint64_t v30 = a3[11];
  uint64_t v31 = a1 + v30;
  char v32 = (uint64_t *)(a2 + v30);
  uint64_t v33 = *v32;
  LOBYTE(v32) = *((unsigned char *)v32 + 8);
  uint64_t v34 = *(void *)v31;
  char v35 = *(unsigned char *)(v31 + 8);
  *(void *)uint64_t v31 = v33;
  *(unsigned char *)(v31 + 8) = (_BYTE)v32;
  sub_10001F574(v34, v35);
  return a1;
}

uint64_t sub_10006A43C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006A450);
}

uint64_t sub_10006A450(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10000435C(&qword_1000AA3C8);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 28);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_10000435C(&qword_1000AA3D0);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 32);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_10006A584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006A598);
}

uint64_t sub_10006A598(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = sub_10000435C(&qword_1000AA3C8);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 28);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_10000435C(&qword_1000AA3D0);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 32);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t type metadata accessor for TFAnimatedText(uint64_t a1)
{
  return sub_100004BF8(a1, (uint64_t *)&unk_1000AA430);
}

void sub_10006A6EC()
{
  sub_10006F284(319, &qword_1000AA440, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v0 <= 0x3F)
  {
    sub_10006F284(319, (unint64_t *)&unk_1000AA448, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void *sub_10006A838(void *a1, void *a2, int *a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v26 = *a2;
    void *v4 = *a2;
    unint64_t v4 = (void *)(v26 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a3;
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for SymbolRenderingMode();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = v6[6];
    uint64_t v14 = v6[7];
    uint64_t v15 = (void *)((char *)v4 + v13);
    uint64_t v16 = (void *)((char *)a2 + v13);
    uint64_t v17 = v16[1];
    void *v15 = *v16;
    v15[1] = v17;
    *((unsigned char *)v4 + v14) = *((unsigned char *)a2 + v14);
    uint64_t v18 = v6[8];
    uint64_t v19 = (char *)v4 + v18;
    uint64_t v20 = (char *)a2 + v18;
    uint64_t v21 = *(void *)v20;
    LOBYTE(v9) = v20[8];
    swift_bridgeObjectRetain();
    sub_10001F504(v21, (char)v9);
    *(void *)uint64_t v19 = v21;
    v19[8] = (char)v9;
    uint64_t v22 = v6[9];
    char v23 = (char *)v4 + v22;
    uint64_t v24 = (char *)a2 + v22;
    uint64_t v25 = *(void *)v24;
    LOBYTE(v6) = v24[8];
    sub_10001F504(*(void *)v24, (char)v6);
    *(void *)char v23 = v25;
    v23[8] = (char)v6;
  }
  return v4;
}

uint64_t sub_10006A9A0(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for SymbolRenderingMode();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  sub_10001F574(*(void *)(a1 + a2[8]), *(unsigned char *)(a1 + a2[8] + 8));
  uint64_t v6 = a1 + a2[9];
  uint64_t v7 = *(void *)v6;
  char v8 = *(unsigned char *)(v6 + 8);

  return sub_10001F574(v7, v8);
}

void *sub_10006AA58(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  char v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for SymbolRenderingMode();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)((char *)a1 + v12);
  uint64_t v15 = (void *)((char *)v4 + v12);
  uint64_t v16 = v15[1];
  void *v14 = *v15;
  v14[1] = v16;
  *((unsigned char *)a1 + v13) = *((unsigned char *)v4 + v13);
  uint64_t v17 = a3[8];
  uint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)v4 + v17;
  uint64_t v20 = *(void *)v19;
  LOBYTE(v8) = v19[8];
  swift_bridgeObjectRetain();
  sub_10001F504(v20, (char)v8);
  *(void *)uint64_t v18 = v20;
  v18[8] = (char)v8;
  uint64_t v21 = a3[9];
  uint64_t v22 = (char *)a1 + v21;
  char v23 = (char *)v4 + v21;
  uint64_t v24 = *(void *)v23;
  LOBYTE(v4) = v23[8];
  sub_10001F504(*(void *)v23, (char)v4);
  *(void *)uint64_t v22 = v24;
  v22[8] = (char)v4;
  return a1;
}

void *sub_10006AB70(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  char v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SymbolRenderingMode();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  uint64_t v13 = a3[8];
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = *(void *)v15;
  LOBYTE(v8) = v15[8];
  sub_10001F504(*(void *)v15, (char)v8);
  uint64_t v17 = *(void *)v14;
  char v18 = v14[8];
  *(void *)uint64_t v14 = v16;
  v14[8] = (char)v8;
  sub_10001F574(v17, v18);
  uint64_t v19 = a3[9];
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  uint64_t v22 = *(void *)v21;
  LOBYTE(a3) = v21[8];
  sub_10001F504(*(void *)v21, (char)a3);
  uint64_t v23 = *(void *)v20;
  char v24 = v20[8];
  *(void *)uint64_t v20 = v22;
  v20[8] = (char)a3;
  sub_10001F574(v23, v24);
  return a1;
}

_OWORD *sub_10006ACB4(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  char v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SymbolRenderingMode();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *((unsigned char *)a1 + v10) = *((unsigned char *)a2 + v10);
  uint64_t v11 = a3[8];
  uint64_t v12 = a3[9];
  uint64_t v13 = (char *)a1 + v11;
  uint64_t v14 = (char *)a2 + v11;
  v13[8] = v14[8];
  *(void *)uint64_t v13 = *(void *)v14;
  uint64_t v15 = (char *)a1 + v12;
  uint64_t v16 = (char *)a2 + v12;
  *(void *)uint64_t v15 = *(void *)v16;
  v15[8] = v16[8];
  return a1;
}

void *sub_10006AD88(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  char v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for SymbolRenderingMode();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  *uint64_t v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[8];
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  uint64_t v17 = (char *)a1 + v16;
  char v18 = (char *)a2 + v16;
  uint64_t v19 = *(void *)v18;
  LOBYTE(v18) = v18[8];
  uint64_t v20 = *(void *)v17;
  char v21 = v17[8];
  *(void *)uint64_t v17 = v19;
  v17[8] = (char)v18;
  sub_10001F574(v20, v21);
  uint64_t v22 = a3[9];
  uint64_t v23 = (char *)a1 + v22;
  char v24 = (char *)a2 + v22;
  uint64_t v25 = *(void *)v24;
  LOBYTE(v24) = v24[8];
  uint64_t v26 = *(void *)v23;
  char v27 = v23[8];
  *(void *)uint64_t v23 = v25;
  v23[8] = (char)v24;
  sub_10001F574(v26, v27);
  return a1;
}

uint64_t sub_10006AE90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006AEA4);
}

uint64_t sub_10006AEA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = type metadata accessor for SymbolRenderingMode();
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = a1 + *(int *)(a3 + 20);
    return v10(v12, a2, v11);
  }
}

uint64_t sub_10006AF60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006AF74);
}

uint64_t sub_10006AF74(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 8) = a2;
  }
  else
  {
    uint64_t v7 = type metadata accessor for SymbolRenderingMode();
    char v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for TFLabel(uint64_t a1)
{
  return sub_100004BF8(a1, qword_1000AA4E8);
}

uint64_t sub_10006B03C()
{
  return sub_10006DC8C();
}

uint64_t sub_10006B048(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 48);
}

uint64_t sub_10006B050()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_10006B124(unsigned char *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64) + 7;
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((((((((v6 + ((v5 + 3) & ~v5)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
       + 23) & 0xFFFFFFFFFFFFFFF8)
     + 9 > 0x18)
  {
    uint64_t v9 = *a2;
    *int v3 = *a2;
    int v3 = (void *)(v9 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  else
  {
    *a1 = *(unsigned char *)a2;
    a1[1] = *((unsigned char *)a2 + 1);
    a1[2] = *((unsigned char *)a2 + 2);
    uint64_t v10 = (unint64_t)&a1[v5 + 3] & ~v5;
    uint64_t v11 = ((unint64_t)a2 + v5 + 3) & ~v5;
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v10, v11);
    uint64_t v12 = (void *)((v6 + v10) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v13 = (void *)((v6 + v11) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v14 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v14;
    unint64_t v15 = ((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v16 = ((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8;
    char v17 = *(unsigned char *)(v16 + 8);
    *(void *)unint64_t v15 = *(void *)v16;
    *(unsigned char *)(v15 + 8) = v17;
    *(void *)(v15 + 16) = *(void *)(v16 + 16);
    char v18 = (void *)((v15 + 31) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v19 = (v16 + 31) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v20 = *(void **)v19;
    *char v18 = *(void *)v19;
    v18[1] = *(void *)(v19 + 8);
    unint64_t v21 = ((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v22 = (v19 + 23) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v23 = *(void *)v22;
    char v24 = *(unsigned char *)(v22 + 8);
    swift_retain();
    swift_retain();
    id v25 = v20;
    swift_retain();
    sub_10001F504(v23, v24);
    *(void *)unint64_t v21 = v23;
    *(unsigned char *)(v21 + 8) = v24;
  }
  return v3;
}

uint64_t sub_10006B308(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v3 = v2 + 8;
  unint64_t v4 = (a1 + *(unsigned __int8 *)(v2 + 80) + 3) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  (*(void (**)(unint64_t))(v2 + 8))(v4);
  unint64_t v5 = (*(void *)(v3 + 56) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  uint64_t v6 = (id *)((((v5 + 23) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8);

  swift_release();
  unint64_t v7 = ((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)v7;
  char v9 = *(unsigned char *)(v7 + 8);

  return sub_10001F574(v8, v9);
}

unsigned char *sub_10006B3C4(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 16;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (unint64_t)&a1[v6 + 3] & ~v6;
  uint64_t v8 = (unint64_t)&a2[v6 + 3] & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 48) + 7;
  uint64_t v10 = (void *)((v9 + v7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = (void *)((v9 + v8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = v11[1];
  *uint64_t v10 = *v11;
  v10[1] = v12;
  unint64_t v13 = ((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = ((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8;
  char v15 = *(unsigned char *)(v14 + 8);
  *(void *)unint64_t v13 = *(void *)v14;
  *(unsigned char *)(v13 + 8) = v15;
  *(void *)(v13 + 16) = *(void *)(v14 + 16);
  unint64_t v16 = (void *)((v13 + 31) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v17 = (v14 + 31) & 0xFFFFFFFFFFFFFFF8;
  char v18 = *(void **)v17;
  *unint64_t v16 = *(void *)v17;
  v16[1] = *(void *)(v17 + 8);
  unint64_t v19 = ((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = (v17 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v21 = *(void *)v20;
  char v22 = *(unsigned char *)(v20 + 8);
  swift_retain();
  swift_retain();
  id v23 = v18;
  swift_retain();
  sub_10001F504(v21, v22);
  *(void *)unint64_t v19 = v21;
  *(unsigned char *)(v19 + 8) = v22;
  return a1;
}

unsigned char *sub_10006B510(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 24;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (unint64_t)&a1[v6 + 3] & ~v6;
  uint64_t v8 = (unint64_t)&a2[v6 + 3] & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 24))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 40) + 7;
  uint64_t v10 = (void *)((v9 + v7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = (void *)((v9 + v8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = v11[1];
  *uint64_t v10 = *v11;
  v10[1] = v12;
  swift_retain();
  swift_release();
  unint64_t v13 = ((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = ((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = *(void *)v14;
  *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
  *(void *)unint64_t v13 = v15;
  *(void *)(v13 + 16) = *(void *)(v14 + 16);
  swift_retain();
  swift_release();
  unint64_t v16 = (v13 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = (v14 + 31) & 0xFFFFFFFFFFFFFFF8;
  char v18 = *(void **)v16;
  unint64_t v19 = *(void **)v17;
  *(void *)unint64_t v16 = *(void *)v17;
  id v20 = v19;

  *(void *)(v16 + 8) = *(void *)(v17 + 8);
  swift_retain();
  swift_release();
  unint64_t v21 = (v16 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = (v17 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v23 = *(void *)v22;
  LOBYTE(v17) = *(unsigned char *)(v22 + 8);
  sub_10001F504(*(void *)v22, v17);
  uint64_t v24 = *(void *)v21;
  char v25 = *(unsigned char *)(v21 + 8);
  *(void *)unint64_t v21 = v23;
  *(unsigned char *)(v21 + 8) = v17;
  sub_10001F574(v24, v25);
  return a1;
}

unsigned char *sub_10006B67C(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 32;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (unint64_t)&a1[v6 + 3] & ~v6;
  uint64_t v8 = (unint64_t)&a2[v6 + 3] & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 32) + 7;
  unint64_t v10 = v9 + v7;
  uint64_t v11 = (_OWORD *)((v9 + v8) & 0xFFFFFFFFFFFFFFF8);
  v10 &= 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)unint64_t v10 = *v11;
  unint64_t v12 = (v10 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = ((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v14 = *(void *)(v13 + 16);
  *(_OWORD *)unint64_t v12 = *(_OWORD *)v13;
  *(void *)(v12 + 16) = v14;
  uint64_t v15 = (_OWORD *)((v12 + 31) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v16 = (_OWORD *)((v13 + 31) & 0xFFFFFFFFFFFFFFF8);
  _OWORD *v15 = *v16;
  unint64_t v17 = ((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = ((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  *(void *)unint64_t v17 = v19;
  return a1;
}

unsigned char *sub_10006B770(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 40;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (unint64_t)&a1[v6 + 3] & ~v6;
  uint64_t v8 = (unint64_t)&a2[v6 + 3] & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 40))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 24) + 7;
  unint64_t v10 = (_OWORD *)((v9 + v7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = v9 + v8;
  unint64_t v12 = (v11 & 0xFFFFFFFFFFFFFFF8) + 23;
  *unint64_t v10 = *(_OWORD *)(v11 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  unint64_t v13 = ((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8;
  v12 &= 0xFFFFFFFFFFFFFFF8;
  uint64_t v14 = *(void *)v12;
  *(unsigned char *)(v13 + 8) = *(unsigned char *)(v12 + 8);
  *(void *)unint64_t v13 = v14;
  *(void *)(v13 + 16) = *(void *)(v12 + 16);
  swift_release();
  unint64_t v15 = (v13 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (void *)((v12 + 31) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v17 = *(void **)v15;
  *(void *)unint64_t v15 = *v16;

  *(void *)(v15 + 8) = v16[1];
  swift_release();
  unint64_t v18 = (v15 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = ((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = *(void *)v19;
  LOBYTE(v19) = *(unsigned char *)(v19 + 8);
  uint64_t v21 = *(void *)v18;
  char v22 = *(unsigned char *)(v18 + 8);
  *(void *)unint64_t v18 = v20;
  *(unsigned char *)(v18 + 8) = v19;
  sub_10001F574(v21, v22);
  return a1;
}

uint64_t sub_10006B8B0(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7;
  if (v7 < a2)
  {
    unint64_t v9 = ((((((((v8 + ((v6 + 3) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
         + 23) & 0xFFFFFFFFFFFFFFF8)
       + 9;
    unsigned int v10 = (a2 - v7 + 255) >> (8 * v9);
    if (v9 < 4) {
      unsigned int v11 = v10 + 1;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = a1[v9];
        if (!a1[v9]) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)&a1[v9];
        if (*(_WORD *)&a1[v9]) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x10006BA4CLL);
      case 4:
        int v14 = *(_DWORD *)&a1[v9];
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = (v14 - 1) << (8 * v9);
        if (v9 >= 4) {
          int v16 = 0;
        }
        if (((((((((v8 + ((v6 + 3) & ~v6)) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 31) & 0xFFFFFFF8)
             + 23) & 0xFFFFFFF8) == 0xFFFFFFF8)
          int v17 = *a1;
        else {
          int v17 = *(_DWORD *)a1;
        }
        return v7 + (v17 | v16) + 1;
      default:
        break;
    }
  }
  uint64_t v18 = (unint64_t)&a1[v6 + 3] & ~v6;
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(uint64_t))(v4 + 48))(v18);
  }
  unint64_t v19 = *(void *)((v8 + v18) & 0xFFFFFFFFFFFFFFF8);
  if (v19 >= 0xFFFFFFFF) {
    LODWORD(v19) = -1;
  }
  return (v19 + 1);
}

void sub_10006BA60(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + 7;
  size_t v11 = ((((((((v10 + ((v9 + 3) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
        + 23) & 0xFFFFFFFFFFFFFFF8)
      + 9;
  char v12 = 8 * v11;
  if (v8 >= a3)
  {
    int v16 = 0;
    if (v8 >= a2)
    {
LABEL_17:
      switch(v16)
      {
        case 1:
          a1[v11] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 2:
          *(_WORD *)&a1[v11] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 3:
          goto LABEL_47;
        case 4:
          *(_DWORD *)&a1[v11] = 0;
          goto LABEL_33;
        default:
LABEL_33:
          if (a2)
          {
LABEL_34:
            unint64_t v19 = (unint64_t)&a1[v9 + 3] & ~v9;
            if (v7 < 0x7FFFFFFF)
            {
              uint64_t v21 = (void *)((v10 + v19) & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0)
              {
                uint64_t v22 = a2 ^ 0x80000000;
                v21[1] = 0;
              }
              else
              {
                uint64_t v22 = a2 - 1;
              }
              *uint64_t v21 = v22;
            }
            else
            {
              uint64_t v20 = *(void (**)(unint64_t))(v6 + 56);
              v20(v19);
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v13 = (a3 - v8 + 255) >> v12;
    if (v11 <= 3) {
      unsigned int v14 = v13 + 1;
    }
    else {
      unsigned int v14 = 2;
    }
    if (v14 >= 0x10000) {
      int v15 = 4;
    }
    else {
      int v15 = 2;
    }
    if (v14 < 0x100) {
      int v15 = 1;
    }
    if (v14 >= 2) {
      int v16 = v15;
    }
    else {
      int v16 = 0;
    }
    if (v8 >= a2) {
      goto LABEL_17;
    }
  }
  if (v11 < 4) {
    unsigned int v17 = ((~v8 + a2) >> v12) + 1;
  }
  else {
    unsigned int v17 = 1;
  }
  if (v11 >= 4) {
    unsigned int v18 = ~v8 + a2;
  }
  else {
    unsigned int v18 = (~(_BYTE)v8 + a2);
  }
  bzero(a1, v11);
  if (v11 == 1) {
    *a1 = v18;
  }
  else {
    *(_DWORD *)a1 = v18;
  }
  switch(v16)
  {
    case 1:
      a1[v11] = v17;
      break;
    case 2:
      *(_WORD *)&a1[v11] = v17;
      break;
    case 3:
LABEL_47:
      __break(1u);
      JUMPOUT(0x10006BCA4);
    case 4:
      *(_DWORD *)&a1[v11] = v17;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for TFButton()
{
  return sub_100070E58();
}

uint64_t destroy for TFMenuStyle()
{
  return swift_release();
}

uint64_t _s19FontPickerUIService11TFMenuStyleVwCP_0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for TFMenuStyle(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for TFMenuStyle(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for TFMenuStyle(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for TFMenuStyle(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TFMenuStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TFMenuStyle()
{
  return &type metadata for TFMenuStyle;
}

uint64_t destroy for TFText(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(a1 + 24);
  char v3 = *(unsigned char *)(a1 + 32);

  return sub_10001F574(v2, v3);
}

uint64_t initializeWithCopy for TFText(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  char v5 = *(unsigned char *)(a2 + 32);
  swift_bridgeObjectRetain();
  sub_10001F504(v4, v5);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = v5;
  return a1;
}

uint64_t assignWithCopy for TFText(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *((unsigned char *)v2 + 16);
  uint64_t v4 = v2[3];
  LOBYTE(v2) = *((unsigned char *)v2 + 32);
  sub_10001F504(v4, (char)v2);
  uint64_t v5 = *(void *)(a1 + 24);
  char v6 = *(unsigned char *)(a1 + 32);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = (_BYTE)v2;
  sub_10001F574(v5, v6);
  return a1;
}

__n128 initializeWithTake for TFText(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for TFText(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  char v5 = *(unsigned char *)(a2 + 32);
  uint64_t v6 = *(void *)(a1 + 24);
  char v7 = *(unsigned char *)(a1 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = v5;
  sub_10001F574(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for TFText(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 33)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TFText(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 33) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TFText()
{
  return &type metadata for TFText;
}

void *sub_10006C0BC(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v23 = *a2;
    void *v4 = *a2;
    uint64_t v4 = (void *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a3;
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    uint64_t v8 = a2[4];
    uint64_t v9 = a3[8];
    uint64_t v25 = a1 + v9;
    uint64_t v10 = (uint64_t)a2 + v9;
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 32) = v8;
    uint64_t v11 = type metadata accessor for SymbolRenderingMode();
    char v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    v12(v25, v10, v11);
    uint64_t v13 = v6[10];
    *((unsigned char *)v4 + v6[9]) = *((unsigned char *)a2 + v6[9]);
    *((unsigned char *)v4 + v13) = *((unsigned char *)a2 + v13);
    uint64_t v14 = v6[11];
    int v15 = (char *)v4 + v14;
    uint64_t v16 = (uint64_t)a2 + v14;
    uint64_t v17 = *(void *)v16;
    char v18 = *(unsigned char *)(v16 + 8);
    sub_10001F504(*(void *)v16, v18);
    *(void *)int v15 = v17;
    v15[8] = v18;
    uint64_t v19 = v6[12];
    uint64_t v20 = (char *)v4 + v19;
    uint64_t v21 = (uint64_t)a2 + v19;
    uint64_t v22 = *(void *)v21;
    LOBYTE(v6) = *(unsigned char *)(v21 + 8);
    sub_10001F504(*(void *)v21, (char)v6);
    *(void *)uint64_t v20 = v22;
    v20[8] = (char)v6;
  }
  return v4;
}

uint64_t sub_10006C244(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v4 = a1 + a2[8];
  uint64_t v5 = type metadata accessor for SymbolRenderingMode();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  sub_10001F574(*(void *)(a1 + a2[11]), *(unsigned char *)(a1 + a2[11] + 8));
  uint64_t v6 = a1 + a2[12];
  uint64_t v7 = *(void *)v6;
  char v8 = *(unsigned char *)(v6 + 8);

  return sub_10001F574(v7, v8);
}

uint64_t sub_10006C2FC(uint64_t a1, uint64_t a2, int *a3)
{
  long long v3 = a3;
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7;
  uint64_t v8 = a3[8];
  uint64_t v23 = a1 + v8;
  uint64_t v9 = a2 + v8;
  uint64_t v10 = type metadata accessor for SymbolRenderingMode();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v11(v23, v9, v10);
  uint64_t v12 = v3[10];
  *(unsigned char *)(a1 + v3[9]) = *(unsigned char *)(a2 + v3[9]);
  *(unsigned char *)(a1 + v12) = *(unsigned char *)(a2 + v12);
  uint64_t v13 = v3[11];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = *(void *)v15;
  char v17 = *(unsigned char *)(v15 + 8);
  sub_10001F504(*(void *)v15, v17);
  *(void *)uint64_t v14 = v16;
  *(unsigned char *)(v14 + 8) = v17;
  uint64_t v18 = v3[12];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  uint64_t v21 = *(void *)v20;
  LOBYTE(v3) = *(unsigned char *)(v20 + 8);
  sub_10001F504(*(void *)v20, (char)v3);
  *(void *)uint64_t v19 = v21;
  *(unsigned char *)(v19 + 8) = (_BYTE)v3;
  return a1;
}

uint64_t sub_10006C434(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  uint64_t v6 = a3[8];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for SymbolRenderingMode();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  uint64_t v10 = a3[11];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = *(void *)v12;
  LOBYTE(v8) = *(unsigned char *)(v12 + 8);
  sub_10001F504(*(void *)v12, v8);
  uint64_t v14 = *(void *)v11;
  char v15 = *(unsigned char *)(v11 + 8);
  *(void *)uint64_t v11 = v13;
  *(unsigned char *)(v11 + 8) = v8;
  sub_10001F574(v14, v15);
  uint64_t v16 = a3[12];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = *(void *)v18;
  LOBYTE(a3) = *(unsigned char *)(v18 + 8);
  sub_10001F504(*(void *)v18, (char)a3);
  uint64_t v20 = *(void *)v17;
  char v21 = *(unsigned char *)(v17 + 8);
  *(void *)uint64_t v17 = v19;
  *(unsigned char *)(v17 + 8) = (_BYTE)a3;
  sub_10001F574(v20, v21);
  return a1;
}

uint64_t sub_10006C590(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  uint64_t v7 = a3[8];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for SymbolRenderingMode();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v11) = *(unsigned char *)(a2 + v11);
  uint64_t v12 = a3[11];
  uint64_t v13 = a3[12];
  uint64_t v14 = a1 + v12;
  uint64_t v15 = a2 + v12;
  *(void *)uint64_t v14 = *(void *)v15;
  *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
  uint64_t v16 = a1 + v13;
  uint64_t v17 = a2 + v13;
  *(void *)uint64_t v16 = *(void *)v17;
  *(unsigned char *)(v16 + 8) = *(unsigned char *)(v17 + 8);
  return a1;
}

uint64_t sub_10006C674(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  uint64_t v7 = a3[8];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for SymbolRenderingMode();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v11) = *(unsigned char *)(a2 + v11);
  uint64_t v12 = a3[11];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v15 = *v14;
  LOBYTE(v14) = *((unsigned char *)v14 + 8);
  uint64_t v16 = *(void *)v13;
  char v17 = *(unsigned char *)(v13 + 8);
  *(void *)uint64_t v13 = v15;
  *(unsigned char *)(v13 + 8) = (_BYTE)v14;
  sub_10001F574(v16, v17);
  uint64_t v18 = a3[12];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = (uint64_t *)(a2 + v18);
  uint64_t v21 = *v20;
  LOBYTE(v20) = *((unsigned char *)v20 + 8);
  uint64_t v22 = *(void *)v19;
  char v23 = *(unsigned char *)(v19 + 8);
  *(void *)uint64_t v19 = v21;
  *(unsigned char *)(v19 + 8) = (_BYTE)v20;
  sub_10001F574(v22, v23);
  return a1;
}

uint64_t sub_10006C794(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006C7A8);
}

uint64_t sub_10006C7A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for SymbolRenderingMode();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 32);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10006C858(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006C86C);
}

uint64_t sub_10006C86C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for SymbolRenderingMode();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 32);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for TFSymbol(uint64_t a1)
{
  return sub_100004BF8(a1, qword_1000AA608);
}

uint64_t sub_10006C934()
{
  uint64_t result = type metadata accessor for SymbolRenderingMode();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10006C9FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 32);
}

uint64_t sub_10006CA04()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_10006CAA8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 9 > 0x18)
  {
    uint64_t v9 = *a2;
    uint64_t *v4 = *a2;
    unint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(unsigned char *)unint64_t v10 = *(unsigned char *)v11;
    *(void *)(v10 + 8) = *(void *)(v11 + 8);
    unint64_t v12 = (v10 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v13 = (v11 + 23) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v14 = *(void *)v13;
    char v15 = *(unsigned char *)(v13 + 8);
    swift_retain();
    sub_10001F504(v14, v15);
    *(void *)unint64_t v12 = v14;
    *(unsigned char *)(v12 + 8) = v15;
    unint64_t v16 = (v10 + 39) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v17 = (v11 + 39) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v18 = *(void *)v17;
    char v19 = *(unsigned char *)(v17 + 8);
    sub_10001F504(*(void *)v17, v19);
    *(void *)unint64_t v16 = v18;
    *(unsigned char *)(v16 + 8) = v19;
  }
  return v4;
}

uint64_t sub_10006CC14(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  unint64_t v4 = (a1 + *(void *)(v3 + 56) + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  sub_10001F574(*(void *)((v4 + 23) & 0xFFFFFFFFFFFFFFF8), *(unsigned char *)(((v4 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
  unint64_t v5 = (v4 + 39) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)v5;
  char v7 = *(unsigned char *)(v5 + 8);

  return sub_10001F574(v6, v7);
}

uint64_t sub_10006CCAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v7 = *(unsigned char *)v8;
  *(void *)(v7 + 8) = *(void *)(v8 + 8);
  unint64_t v9 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = *(void *)v10;
  LOBYTE(v5) = *(unsigned char *)(v10 + 8);
  swift_retain();
  sub_10001F504(v11, v5);
  *(void *)unint64_t v9 = v11;
  *(unsigned char *)(v9 + 8) = v5;
  unint64_t v12 = (v7 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (v8 + 39) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v14 = *(void *)v13;
  LOBYTE(v5) = *(unsigned char *)(v13 + 8);
  sub_10001F504(*(void *)v13, v5);
  *(void *)unint64_t v12 = v14;
  *(unsigned char *)(v12 + 8) = v5;
  return a1;
}

uint64_t sub_10006CD94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v7 = *(unsigned char *)v8;
  *(void *)(v7 + 8) = *(void *)(v8 + 8);
  swift_retain();
  swift_release();
  unint64_t v9 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = *(void *)v10;
  LOBYTE(v5) = *(unsigned char *)(v10 + 8);
  sub_10001F504(*(void *)v10, v5);
  uint64_t v12 = *(void *)v9;
  char v13 = *(unsigned char *)(v9 + 8);
  *(void *)unint64_t v9 = v11;
  *(unsigned char *)(v9 + 8) = v5;
  sub_10001F574(v12, v13);
  unint64_t v14 = (v7 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (v8 + 39) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v16 = *(void *)v15;
  LOBYTE(v5) = *(unsigned char *)(v15 + 8);
  sub_10001F504(*(void *)v15, v5);
  uint64_t v17 = *(void *)v14;
  char v18 = *(unsigned char *)(v14 + 8);
  *(void *)unint64_t v14 = v16;
  *(unsigned char *)(v14 + 8) = v5;
  sub_10001F574(v17, v18);
  return a1;
}

uint64_t sub_10006CEA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  _OWORD *v7 = *v8;
  unint64_t v9 = ((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  *(void *)unint64_t v9 = v11;
  unint64_t v12 = ((unint64_t)v7 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = ((unint64_t)v8 + 39) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v9) = *(unsigned char *)(v13 + 8);
  *(void *)unint64_t v12 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = v9;
  return a1;
}

uint64_t sub_10006CF5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v7 = *(unsigned char *)v8;
  *(void *)(v7 + 8) = *(void *)(v8 + 8);
  swift_release();
  unint64_t v9 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = *(void *)v10;
  LOBYTE(v10) = *(unsigned char *)(v10 + 8);
  uint64_t v12 = *(void *)v9;
  char v13 = *(unsigned char *)(v9 + 8);
  *(void *)unint64_t v9 = v11;
  *(unsigned char *)(v9 + 8) = v10;
  sub_10001F574(v12, v13);
  unint64_t v14 = (v7 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (v8 + 39) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v16 = *(void *)v15;
  LOBYTE(v15) = *(unsigned char *)(v15 + 8);
  uint64_t v17 = *(void *)v14;
  char v18 = *(unsigned char *)(v14 + 8);
  *(void *)unint64_t v14 = v16;
  *(unsigned char *)(v14 + 8) = v15;
  sub_10001F574(v17, v18);
  return a1;
}

uint64_t sub_10006D040(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 9;
    unsigned int v9 = (a2 - v7 + 255) >> (8 * v8);
    if (v8 < 4) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    switch(v12)
    {
      case 1:
        int v13 = a1[v8];
        if (!a1[v8]) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v13 = *(unsigned __int16 *)&a1[v8];
        if (*(_WORD *)&a1[v8]) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x10006D1BCLL);
      case 4:
        int v13 = *(_DWORD *)&a1[v8];
        if (!v13) {
          break;
        }
LABEL_22:
        int v15 = (v13 - 1) << (8 * v8);
        if (v8 >= 4) {
          int v15 = 0;
        }
        if (((((v6 + 7) & 0xFFFFFFF8) + 39) & 0xFFFFFFF8) == 0xFFFFFFF8) {
          int v16 = *a1;
        }
        else {
          int v16 = *(_DWORD *)a1;
        }
        return v7 + (v16 | v15) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)&a1[v6 + 7] & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  int v18 = v17 - 1;
  if (v18 < 0) {
    int v18 = -1;
  }
  return (v18 + 1);
}

void sub_10006D1D0(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v10 = ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 9;
  char v11 = 8 * v10;
  if (v8 >= a3)
  {
    int v15 = 0;
    if (v8 >= a2)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 3:
          goto LABEL_46;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_33;
        default:
LABEL_33:
          if (a2)
          {
LABEL_34:
            if (v7 < 0x7FFFFFFE)
            {
              uint64_t v21 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
              if (a2 > 0x7FFFFFFE)
              {
                *uint64_t v21 = a2 - 0x7FFFFFFF;
                v21[1] = 0;
              }
              else
              {
                v21[1] = a2;
              }
            }
            else
            {
              uint64_t v20 = *(void (**)(void))(v6 + 56);
              v20();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v12 = (a3 - v8 + 255) >> v11;
    if (v10 <= 3) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    if (v8 >= a2) {
      goto LABEL_17;
    }
  }
  unsigned int v16 = ~v8 + a2;
  unsigned int v17 = (~(_BYTE)v8 + a2);
  if (v10 < 4) {
    int v18 = (v16 >> v11) + 1;
  }
  else {
    int v18 = 1;
  }
  if (v10 >= 4) {
    unsigned int v19 = v16;
  }
  else {
    unsigned int v19 = v17;
  }
  bzero(a1, v10);
  if (v10 == 1) {
    *a1 = v19;
  }
  else {
    *(_DWORD *)a1 = v19;
  }
  switch(v15)
  {
    case 1:
      a1[v10] = v18;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v18;
      break;
    case 3:
LABEL_46:
      __break(1u);
      JUMPOUT(0x10006D3F4);
    case 4:
      *(_DWORD *)&a1[v10] = v18;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for TFMenuLabel()
{
  return sub_100070E58();
}

void *sub_10006D434(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v26 = *a2;
    void *v4 = *a2;
    uint64_t v4 = (void *)(v26 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    size_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for SymbolRenderingMode();
    unsigned int v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    uint64_t v14 = a3[7];
    int v15 = (void *)((char *)v4 + v13);
    unsigned int v16 = (void *)((char *)a2 + v13);
    uint64_t v17 = v16[1];
    void *v15 = *v16;
    v15[1] = v17;
    *((unsigned char *)v4 + v14) = *((unsigned char *)a2 + v14);
    uint64_t v18 = a3[8];
    uint64_t v19 = a3[9];
    uint64_t v20 = (char *)v4 + v18;
    uint64_t v21 = (char *)a2 + v18;
    uint64_t v22 = *((void *)v21 + 1);
    *(void *)uint64_t v20 = *(void *)v21;
    *((void *)v20 + 1) = v22;
    v20[16] = v21[16];
    char v23 = (char *)v4 + v19;
    uint64_t v24 = (char *)a2 + v19;
    uint64_t v25 = *(void *)((char *)a2 + v19);
    LOBYTE(v9) = v24[8];
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    sub_10001F504(v25, (char)v9);
    *(void *)char v23 = v25;
    v23[8] = (char)v9;
  }
  return v4;
}

uint64_t sub_10006D59C(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for SymbolRenderingMode();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v6 = a1 + *(int *)(a2 + 36);
  uint64_t v7 = *(void *)v6;
  char v8 = *(unsigned char *)(v6 + 8);

  return sub_10001F574(v7, v8);
}

void *sub_10006D658(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  char v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for SymbolRenderingMode();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)((char *)a1 + v12);
  int v15 = (void *)((char *)a2 + v12);
  uint64_t v16 = v15[1];
  void *v14 = *v15;
  v14[1] = v16;
  *((unsigned char *)a1 + v13) = *((unsigned char *)a2 + v13);
  uint64_t v17 = a3[8];
  uint64_t v18 = a3[9];
  uint64_t v19 = (char *)a1 + v17;
  uint64_t v20 = (char *)a2 + v17;
  uint64_t v21 = *((void *)v20 + 1);
  *(void *)uint64_t v19 = *(void *)v20;
  *((void *)v19 + 1) = v21;
  unsigned char v19[16] = v20[16];
  uint64_t v22 = (char *)a1 + v18;
  char v23 = (char *)a2 + v18;
  uint64_t v24 = *(void *)((char *)a2 + v18);
  LOBYTE(v8) = v23[8];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  sub_10001F504(v24, (char)v8);
  *(void *)uint64_t v22 = v24;
  v22[8] = (char)v8;
  return a1;
}

void *sub_10006D770(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  char v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SymbolRenderingMode();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  uint64_t v13 = a3[8];
  uint64_t v14 = (char *)a1 + v13;
  int v15 = (char *)a2 + v13;
  *(void *)((char *)a1 + v13) = *(void *)((char *)a2 + v13);
  swift_retain();
  swift_release();
  *((void *)v14 + 1) = *((void *)v15 + 1);
  swift_retain();
  swift_release();
  unsigned char v14[16] = v15[16];
  uint64_t v16 = a3[9];
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = *(void *)v18;
  LOBYTE(a3) = v18[8];
  sub_10001F504(*(void *)v18, (char)a3);
  uint64_t v20 = *(void *)v17;
  char v21 = v17[8];
  *(void *)uint64_t v17 = v19;
  v17[8] = (char)a3;
  sub_10001F574(v20, v21);
  return a1;
}

_OWORD *sub_10006D8C4(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  char v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SymbolRenderingMode();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *((unsigned char *)a1 + v10) = *((unsigned char *)a2 + v10);
  uint64_t v11 = a3[8];
  uint64_t v12 = a3[9];
  uint64_t v13 = (char *)a1 + v11;
  uint64_t v14 = (char *)a2 + v11;
  v13[16] = v14[16];
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  int v15 = (char *)a1 + v12;
  uint64_t v16 = (char *)a2 + v12;
  *(void *)int v15 = *(void *)v16;
  v15[8] = v16[8];
  return a1;
}

void *sub_10006D998(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  char v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for SymbolRenderingMode();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  *uint64_t v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[8];
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  *(void *)((char *)a1 + v16) = *(void *)((char *)a2 + v16);
  swift_release();
  *((void *)v17 + 1) = *((void *)v18 + 1);
  swift_release();
  unsigned char v17[16] = v18[16];
  uint64_t v19 = a3[9];
  uint64_t v20 = (char *)a1 + v19;
  char v21 = (char *)a2 + v19;
  uint64_t v22 = *(void *)v21;
  LOBYTE(v21) = v21[8];
  uint64_t v23 = *(void *)v20;
  char v24 = v20[8];
  *(void *)uint64_t v20 = v22;
  v20[8] = (char)v21;
  sub_10001F574(v23, v24);
  return a1;
}

uint64_t sub_10006DAAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006DAC0);
}

uint64_t sub_10006DAC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SymbolRenderingMode();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 32) + 8);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
}

uint64_t sub_10006DB88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006DB9C);
}

uint64_t sub_10006DB9C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for SymbolRenderingMode();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 32) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for TFToggle(uint64_t a1)
{
  return sub_100004BF8(a1, qword_1000AA738);
}

uint64_t sub_10006DC80()
{
  return sub_10006DC8C();
}

uint64_t sub_10006DC8C()
{
  uint64_t result = type metadata accessor for SymbolRenderingMode();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void sub_10006DD48()
{
  sub_10006F284(319, (unint64_t *)&unk_1000AA800, (uint64_t (*)(uint64_t))&type metadata accessor for HoverEffect, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v0 <= 0x3F)
  {
    swift_checkMetadataState();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t sub_10006DE70(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for HoverEffect();
  uint64_t v7 = *(void *)(v6 - 8);
  unint64_t v8 = *(_DWORD *)(v7 + 80);
  if (*(_DWORD *)(v7 + 84)) {
    size_t v9 = *(void *)(v7 + 64);
  }
  else {
    size_t v9 = *(void *)(v7 + 64) + 1;
  }
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(_DWORD *)(v11 + 80);
  uint64_t v13 = *(void *)(v11 + 64);
  if ((v12 | v8) > 7
    || ((*(_DWORD *)(v11 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || ((v13 + ((v9 + ((v8 + 10) & ~v8) + v12) & ~v12) + 55) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v16 = *a2;
    *(void *)a1 = *a2;
    a1 = v16 + (((v12 | v8) & 0xF8 ^ 0x1F8) & ((v12 | v8) + 16));
  }
  else
  {
    uint64_t v17 = v6;
    uint64_t v18 = ~v8;
    uint64_t v39 = ~v12;
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    *(unsigned char *)(a1 + 9) = *((unsigned char *)a2 + 9);
    uint64_t v19 = a1 + v8;
    uint64_t v20 = (uint64_t)a2 + v8;
    char v21 = (void *)((v19 + 10) & v18);
    uint64_t v22 = (const void *)((v20 + 10) & v18);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v22, 1, v6))
    {
      memcpy(v21, v22, v9);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v21, v22, v17);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v21, 0, 1, v17);
    }
    unint64_t v23 = ((unint64_t)v21 + v9 + v12) & v39;
    unint64_t v24 = ((unint64_t)v22 + v9 + v12) & v39;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 16))(v23, v24, v10);
    uint64_t v25 = v23 + v13;
    uint64_t v26 = v24 + v13;
    unint64_t v27 = (v23 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v28 = (v26 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v29 = *(void *)v28;
    LOBYTE(v23) = *(unsigned char *)(v28 + 8);
    sub_10001F504(*(void *)v28, v23);
    *(void *)unint64_t v27 = v29;
    *(unsigned char *)(v27 + 8) = v23;
    unint64_t v30 = (v25 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v31 = (v26 + 23) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v32 = *(void *)v31;
    LOBYTE(v23) = *(unsigned char *)(v31 + 8);
    sub_10001F504(*(void *)v31, v23);
    *(void *)unint64_t v30 = v32;
    *(unsigned char *)(v30 + 8) = v23;
    unint64_t v33 = (v25 + 39) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v34 = (v26 + 39) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v35 = *(void *)v34;
    LOBYTE(v23) = *(unsigned char *)(v34 + 8);
    sub_10001F504(*(void *)v34, v23);
    *(void *)unint64_t v33 = v35;
    *(unsigned char *)(v33 + 8) = v23;
    unint64_t v36 = (v25 + 55) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v37 = (v26 + 55) & 0xFFFFFFFFFFFFFFF8;
    *(unsigned char *)unint64_t v36 = *(unsigned char *)v37;
    *(void *)(v36 + 8) = *(void *)(v37 + 8);
  }
  swift_retain();
  return a1;
}

uint64_t sub_10006E170(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for HoverEffect();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v5 + 80) + 10) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4)) {
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v6, v4);
  }
  uint64_t v7 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  uint64_t v8 = v7;
  unint64_t v9 = *(void *)(v5 + 64) + v6;
  if (!*(_DWORD *)(v5 + 84)) {
    ++v9;
  }
  unint64_t v10 = (v9 + *(unsigned __int8 *)(v7 + 72)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 72);
  (*(void (**)(unint64_t))v7)(v10);
  unint64_t v11 = v10 + *(void *)(v8 + 56);
  sub_10001F574(*(void *)((v11 + 7) & 0xFFFFFFFFFFFFFFF8), *(unsigned char *)(((v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 8));
  sub_10001F574(*(void *)((v11 + 23) & 0xFFFFFFFFFFFFFFF8), *(unsigned char *)(((v11 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
  sub_10001F574(*(void *)((v11 + 39) & 0xFFFFFFFFFFFFFFF8), *(unsigned char *)(((v11 + 39) & 0xFFFFFFFFFFFFFFF8) + 8));

  return swift_release();
}

uint64_t sub_10006E2E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  uint64_t v6 = type metadata accessor for HoverEffect();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  unint64_t v9 = (void *)((v8 + 10 + a1) & ~v8);
  unint64_t v10 = (const void *)((v8 + 10 + a2) & ~v8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6))
  {
    int v11 = *(_DWORD *)(v7 + 84);
    size_t v12 = *(void *)(v7 + 64);
    if (v11) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v12 + 1;
    }
    memcpy(v9, v10, v13);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v9, v10, v6);
    uint64_t v15 = *(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56);
    uint64_t v14 = v7 + 56;
    v15(v9, 0, 1, v6);
    int v11 = *(_DWORD *)(v14 + 28);
    size_t v12 = *(void *)(v14 + 8);
  }
  if (v11) {
    size_t v16 = v12;
  }
  else {
    size_t v16 = v12 + 1;
  }
  uint64_t v17 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v18 = v17 + 16;
  uint64_t v19 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v20 = v16 + v19;
  unint64_t v21 = ((unint64_t)v9 + v20) & ~v19;
  unint64_t v22 = ((unint64_t)v10 + v20) & ~v19;
  (*(void (**)(unint64_t, unint64_t))(v17 + 16))(v21, v22);
  uint64_t v23 = *(void *)(v18 + 48);
  uint64_t v24 = v23 + v21;
  uint64_t v25 = v23 + v22;
  unint64_t v26 = (v23 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v27 = (v23 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v28 = *(void *)v27;
  LOBYTE(v22) = *(unsigned char *)(v27 + 8);
  sub_10001F504(*(void *)v27, v22);
  *(void *)unint64_t v26 = v28;
  *(unsigned char *)(v26 + 8) = v22;
  unint64_t v29 = (v24 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v30 = (v25 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v31 = *(void *)v30;
  LOBYTE(v22) = *(unsigned char *)(v30 + 8);
  sub_10001F504(*(void *)v30, v22);
  *(void *)unint64_t v29 = v31;
  *(unsigned char *)(v29 + 8) = v22;
  unint64_t v32 = (v24 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v33 = (v25 + 39) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v34 = *(void *)v33;
  LOBYTE(v22) = *(unsigned char *)(v33 + 8);
  sub_10001F504(*(void *)v33, v22);
  *(void *)unint64_t v32 = v34;
  *(unsigned char *)(v32 + 8) = v22;
  unint64_t v35 = (v24 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v36 = (v25 + 55) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v35 = *(unsigned char *)v36;
  *(void *)(v35 + 8) = *(void *)(v36 + 8);
  swift_retain();
  return a1;
}

uint64_t sub_10006E520(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 9) = *((unsigned char *)a2 + 9);
  uint64_t v7 = type metadata accessor for HoverEffect();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  unint64_t v10 = (void *)((v9 + 10 + a1) & ~v9);
  int v11 = (void *)(((unint64_t)a2 + v9 + 10) & ~v9);
  size_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  int v13 = v12(v10, 1, v7);
  int v14 = v12(v11, 1, v7);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 16))(v10, v11, v7);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, v7);
      goto LABEL_12;
    }
    int v15 = *(_DWORD *)(v8 + 84);
    size_t v16 = *(void *)(v8 + 64);
  }
  else
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 24))(v10, v11, v7);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v10, v7);
    int v15 = *(_DWORD *)(v8 + 84);
    size_t v16 = *(void *)(v8 + 64);
  }
  if (v15) {
    size_t v17 = v16;
  }
  else {
    size_t v17 = v16 + 1;
  }
  memcpy(v10, v11, v17);
LABEL_12:
  if (*(_DWORD *)(v8 + 84)) {
    uint64_t v18 = *(void *)(v8 + 64);
  }
  else {
    uint64_t v18 = *(void *)(v8 + 64) + 1;
  }
  uint64_t v19 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v20 = v19 + 24;
  uint64_t v21 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v22 = v18 + v21;
  unint64_t v23 = ((unint64_t)v10 + v22) & ~v21;
  unint64_t v24 = ((unint64_t)v11 + v22) & ~v21;
  (*(void (**)(unint64_t, unint64_t))(v19 + 24))(v23, v24);
  uint64_t v25 = *(void *)(v20 + 40);
  uint64_t v26 = v25 + v23;
  uint64_t v27 = v25 + v24;
  unint64_t v28 = (v25 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v29 = (v25 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v30 = *(void *)v29;
  LOBYTE(v24) = *(unsigned char *)(v29 + 8);
  sub_10001F504(*(void *)v29, v24);
  uint64_t v31 = *(void *)v28;
  char v32 = *(unsigned char *)(v28 + 8);
  *(void *)unint64_t v28 = v30;
  *(unsigned char *)(v28 + 8) = v24;
  sub_10001F574(v31, v32);
  unint64_t v33 = (v26 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v34 = (v27 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v35 = *(void *)v34;
  LOBYTE(v24) = *(unsigned char *)(v34 + 8);
  sub_10001F504(*(void *)v34, v24);
  uint64_t v36 = *(void *)v33;
  char v37 = *(unsigned char *)(v33 + 8);
  *(void *)unint64_t v33 = v35;
  *(unsigned char *)(v33 + 8) = v24;
  sub_10001F574(v36, v37);
  unint64_t v38 = (v26 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v39 = (v27 + 39) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v40 = *(void *)v39;
  LOBYTE(v24) = *(unsigned char *)(v39 + 8);
  sub_10001F504(*(void *)v39, v24);
  uint64_t v41 = *(void *)v38;
  char v42 = *(unsigned char *)(v38 + 8);
  *(void *)unint64_t v38 = v40;
  *(unsigned char *)(v38 + 8) = v24;
  sub_10001F574(v41, v42);
  unint64_t v43 = (v26 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v44 = (v27 + 55) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v43 = *(unsigned char *)v44;
  *(void *)(v43 + 8) = *(void *)(v44 + 8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_10006E80C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  uint64_t v6 = type metadata accessor for HoverEffect();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (void *)((v8 + 10 + a1) & ~v8);
  unint64_t v10 = (const void *)((v8 + 10 + a2) & ~v8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6))
  {
    int v11 = *(_DWORD *)(v7 + 84);
    size_t v12 = *(void *)(v7 + 64);
    if (v11) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v12 + 1;
    }
    memcpy(v9, v10, v13);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(v9, v10, v6);
    int v15 = *(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56);
    uint64_t v14 = v7 + 56;
    v15(v9, 0, 1, v6);
    int v11 = *(_DWORD *)(v14 + 28);
    size_t v12 = *(void *)(v14 + 8);
  }
  if (v11) {
    size_t v16 = v12;
  }
  else {
    size_t v16 = v12 + 1;
  }
  uint64_t v17 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v18 = v17 + 32;
  uint64_t v19 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v20 = v16 + v19;
  unint64_t v21 = ((unint64_t)v9 + v20) & ~v19;
  unint64_t v22 = ((unint64_t)v10 + v20) & ~v19;
  (*(void (**)(unint64_t, unint64_t))(v17 + 32))(v21, v22);
  uint64_t v23 = *(void *)(v18 + 32);
  uint64_t v24 = v23 + v21;
  uint64_t v25 = v23 + v22;
  unint64_t v26 = (v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v27 = (v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v28 = *(void *)v27;
  *(unsigned char *)(v26 + 8) = *(unsigned char *)(v27 + 8);
  *(void *)unint64_t v26 = v28;
  unint64_t v29 = (v24 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v30 = (v25 + 23) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v28) = *(unsigned char *)(v30 + 8);
  *(void *)unint64_t v29 = *(void *)v30;
  *(unsigned char *)(v29 + 8) = v28;
  unint64_t v31 = (v24 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v32 = (v25 + 39) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v28) = *(unsigned char *)(v32 + 8);
  *(void *)unint64_t v31 = *(void *)v32;
  *(unsigned char *)(v31 + 8) = v28;
  *(_OWORD *)((v24 + 55) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v25 + 55) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_10006EA14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  uint64_t v6 = type metadata accessor for HoverEffect();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (void *)((v8 + 10 + a1) & ~v8);
  unint64_t v10 = (void *)((v8 + 10 + a2) & ~v8);
  int v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v12 = v11(v9, 1, v6);
  int v13 = v11(v10, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v9, v10, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
      goto LABEL_12;
    }
    int v14 = *(_DWORD *)(v7 + 84);
    size_t v15 = *(void *)(v7 + 64);
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(v9, v10, v6);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
    int v14 = *(_DWORD *)(v7 + 84);
    size_t v15 = *(void *)(v7 + 64);
  }
  if (v14) {
    size_t v16 = v15;
  }
  else {
    size_t v16 = v15 + 1;
  }
  memcpy(v9, v10, v16);
LABEL_12:
  if (*(_DWORD *)(v7 + 84)) {
    uint64_t v17 = *(void *)(v7 + 64);
  }
  else {
    uint64_t v17 = *(void *)(v7 + 64) + 1;
  }
  uint64_t v18 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v19 = v18 + 40;
  uint64_t v20 = *(unsigned __int8 *)(v18 + 80);
  uint64_t v21 = v17 + v20;
  unint64_t v22 = ((unint64_t)v9 + v21) & ~v20;
  unint64_t v23 = ((unint64_t)v10 + v21) & ~v20;
  (*(void (**)(unint64_t, unint64_t))(v18 + 40))(v22, v23);
  uint64_t v24 = *(void *)(v19 + 24);
  uint64_t v25 = v24 + v22;
  uint64_t v26 = v24 + v23;
  unint64_t v27 = (v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v28 = (v26 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v29 = *(void *)v28;
  LOBYTE(v28) = *(unsigned char *)(v28 + 8);
  uint64_t v30 = *(void *)v27;
  char v31 = *(unsigned char *)(v27 + 8);
  *(void *)unint64_t v27 = v29;
  *(unsigned char *)(v27 + 8) = v28;
  sub_10001F574(v30, v31);
  unint64_t v32 = (v25 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v33 = (v26 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v34 = *(void *)v33;
  LOBYTE(v33) = *(unsigned char *)(v33 + 8);
  uint64_t v35 = *(void *)v32;
  char v36 = *(unsigned char *)(v32 + 8);
  *(void *)unint64_t v32 = v34;
  *(unsigned char *)(v32 + 8) = v33;
  sub_10001F574(v35, v36);
  unint64_t v37 = (v25 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v38 = (v26 + 39) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v39 = *(void *)v38;
  LOBYTE(v38) = *(unsigned char *)(v38 + 8);
  uint64_t v40 = *(void *)v37;
  char v41 = *(unsigned char *)(v37 + 8);
  *(void *)unint64_t v37 = v39;
  *(unsigned char *)(v37 + 8) = v38;
  sub_10001F574(v40, v41);
  unint64_t v42 = (v25 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v43 = (v26 + 55) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v42 = *(unsigned char *)v43;
  *(void *)(v42 + 8) = *(void *)(v43 + 8);
  swift_release();
  return a1;
}

uint64_t sub_10006ECD4(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(type metadata accessor for HoverEffect() - 8);
  uint64_t v7 = v6;
  unsigned int v8 = *(_DWORD *)(v6 + 84);
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  if (v8) {
    unsigned int v10 = v8 - 1;
  }
  else {
    unsigned int v10 = 0;
  }
  uint64_t v11 = *(unsigned int *)(v9 + 84);
  uint64_t v12 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v13 = *(void *)(v6 + 64);
  uint64_t v14 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v15 = *(void *)(v9 + 64);
  if (v10 <= v11) {
    unsigned int v16 = v11;
  }
  else {
    unsigned int v16 = v10;
  }
  if (v16 <= 0x7FFFFFFE) {
    unsigned int v16 = 2147483646;
  }
  if (!v8) {
    ++v13;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v17 = v15 + 55;
  if (v16 < a2)
  {
    unint64_t v18 = ((v17 + ((v13 + ((v12 + 10) & ~v12) + v14) & ~v14)) & 0xFFFFFFFFFFFFFFF8) + 16;
    if ((v18 & 0xFFFFFFF8) != 0) {
      unsigned int v19 = 2;
    }
    else {
      unsigned int v19 = a2 - v16 + 1;
    }
    if (v19 >= 0x10000) {
      unsigned int v20 = 4;
    }
    else {
      unsigned int v20 = 2;
    }
    if (v19 < 0x100) {
      unsigned int v20 = 1;
    }
    if (v19 >= 2) {
      uint64_t v21 = v20;
    }
    else {
      uint64_t v21 = 0;
    }
    switch(v21)
    {
      case 1:
        int v22 = *((unsigned __int8 *)a1 + v18);
        if (!*((unsigned char *)a1 + v18)) {
          break;
        }
        goto LABEL_28;
      case 2:
        int v22 = *(unsigned __int16 *)((char *)a1 + v18);
        if (*(_WORD *)((char *)a1 + v18)) {
          goto LABEL_28;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x10006EF50);
      case 4:
        int v22 = *(_DWORD *)((char *)a1 + v18);
        if (!v22) {
          break;
        }
LABEL_28:
        int v23 = v22 - 1;
        if ((v18 & 0xFFFFFFF8) != 0)
        {
          int v23 = 0;
          int v24 = *a1;
        }
        else
        {
          int v24 = 0;
        }
        int v31 = v16 + (v24 | v23);
        return (v31 + 1);
      default:
        break;
    }
  }
  uint64_t v25 = ((unint64_t)a1 + v12 + 10) & ~v12;
  if (v10 == v16)
  {
    if (v8 < 2) {
      return 0;
    }
    unsigned int v29 = (*(uint64_t (**)(uint64_t))(v7 + 48))(v25);
    if (v29 >= 2) {
      return v29 - 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v27 = (v25 + v13 + v14) & ~v14;
    if (v11 == v16)
    {
      unint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 48);
      return v28(v27, v11);
    }
    else
    {
      unint64_t v30 = *(void *)(((v17 + v27) & 0xFFFFFFFFFFFFFFF8) + 8);
      if (v30 >= 0xFFFFFFFF) {
        LODWORD(v30) = -1;
      }
      int v31 = v30 - 1;
      if (v31 < 0) {
        int v31 = -1;
      }
      return (v31 + 1);
    }
  }
}

void sub_10006EF64(_DWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  int v8 = 0;
  uint64_t v9 = *(void *)(type metadata accessor for HoverEffect() - 8);
  uint64_t v10 = v9;
  int v11 = *(_DWORD *)(v9 + 84);
  if (v11) {
    unsigned int v12 = v11 - 1;
  }
  else {
    unsigned int v12 = 0;
  }
  uint64_t v13 = *(void *)(*(void *)(a4 + 16) - 8);
  uint64_t v14 = *(unsigned int *)(v13 + 84);
  uint64_t v15 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v16 = *(void *)(v9 + 64);
  uint64_t v17 = *(unsigned __int8 *)(v13 + 80);
  if (v12 <= v14) {
    unsigned int v18 = *(_DWORD *)(v13 + 84);
  }
  else {
    unsigned int v18 = v12;
  }
  if (v18 <= 0x7FFFFFFE) {
    unsigned int v18 = 2147483646;
  }
  if (v11) {
    uint64_t v19 = v16;
  }
  else {
    uint64_t v19 = v16 + 1;
  }
  uint64_t v20 = *(void *)(v13 + 64) + 55;
  unint64_t v21 = ((v20 + ((v19 + ((v15 + 10) & ~v15) + v17) & ~v17)) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v18 < a3)
  {
    if (((v20 + ((v19 + ((v15 + 10) & ~v15) + v17) & ~v17)) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v22 = a3 - v18 + 1;
    }
    else {
      unsigned int v22 = 2;
    }
    if (v22 >= 0x10000) {
      int v23 = 4;
    }
    else {
      int v23 = 2;
    }
    if (v22 < 0x100) {
      int v23 = 1;
    }
    if (v22 >= 2) {
      int v8 = v23;
    }
    else {
      int v8 = 0;
    }
  }
  if (a2 > v18)
  {
    if (((v20 + ((v19 + ((v15 + 10) & ~v15) + v17) & ~v17)) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v24 = a2 - v18;
    }
    else {
      int v24 = 1;
    }
    if (((v20 + ((v19 + ((v15 + 10) & ~v15) + v17) & ~v17)) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v25 = ~v18 + a2;
      bzero(a1, ((v20 + ((v19 + ((v15 + 10) & ~v15) + v17) & ~v17)) & 0xFFFFFFFFFFFFFFF8) + 16);
      *a1 = v25;
    }
    switch(v8)
    {
      case 1:
        *((unsigned char *)a1 + v21) = v24;
        return;
      case 2:
        *(_WORD *)((char *)a1 + v21) = v24;
        return;
      case 3:
        goto LABEL_53;
      case 4:
        *(_DWORD *)((char *)a1 + v21) = v24;
        return;
      default:
        return;
    }
  }
  switch(v8)
  {
    case 1:
      *((unsigned char *)a1 + v21) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_39;
    case 2:
      *(_WORD *)((char *)a1 + v21) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_39;
    case 3:
LABEL_53:
      __break(1u);
      JUMPOUT(0x10006F244);
    case 4:
      *(_DWORD *)((char *)a1 + v21) = 0;
      goto LABEL_38;
    default:
LABEL_38:
      if (a2)
      {
LABEL_39:
        uint64_t v26 = ((unint64_t)a1 + v15 + 10) & ~v15;
        if (v12 == v18)
        {
          uint64_t v27 = *(void (**)(uint64_t, void))(v10 + 56);
          v27(v26, (a2 + 1));
        }
        else
        {
          uint64_t v28 = (v26 + v19 + v17) & ~v17;
          if (v14 == v18)
          {
            unsigned int v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 56);
            v29(v28, a2, v14);
          }
          else
          {
            unint64_t v30 = (void *)((v20 + v28) & 0xFFFFFFFFFFFFFFF8);
            if (a2 > 0x7FFFFFFE)
            {
              *unint64_t v30 = (a2 - 0x7FFFFFFF);
              v30[1] = 0;
            }
            else
            {
              v30[1] = a2;
            }
          }
        }
      }
      return;
  }
}

uint64_t type metadata accessor for TFComponent()
{
  return sub_100070E58();
}

void sub_10006F284(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_10006F2E8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10006F304()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10006F320()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10006F33C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10006F358()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10006F374()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10006F3B8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10006F3D4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10006F3F0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10006F434()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_10006F478()
{
  unint64_t result = qword_1000AA818;
  if (!qword_1000AA818)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AA818);
  }
  return result;
}

unint64_t sub_10006F4CC()
{
  unint64_t result = qword_1000AA848;
  if (!qword_1000AA848)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AA848);
  }
  return result;
}

uint64_t sub_10006F520(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10006F568@<X0>(char *a1@<X8>)
{
  return sub_10005DF54(*(void *)(v1 + 32), *(void *)(v1 + 24), a1);
}

unint64_t sub_10006F574()
{
  unint64_t result = qword_1000AA860;
  if (!qword_1000AA860)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AA860);
  }
  return result;
}

uint64_t sub_10006F5C8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  unint64_t v2 = (int *)type metadata accessor for TFComponent();
  uint64_t v3 = *(unsigned __int8 *)(*((void *)v2 - 1) + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = *(void *)(*((void *)v2 - 1) + 64);
  uint64_t v6 = v0 + v4;
  uint64_t v7 = v0 + v4 + v2[10];
  uint64_t v8 = type metadata accessor for HoverEffect();
  uint64_t v9 = *(void *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v6 + v2[11], v1);
  sub_10001F574(*(void *)(v6 + v2[12]), *(unsigned char *)(v6 + v2[12] + 8));
  sub_10001F574(*(void *)(v6 + v2[13]), *(unsigned char *)(v6 + v2[13] + 8));
  sub_10001F574(*(void *)(v6 + v2[14]), *(unsigned char *)(v6 + v2[14] + 8));
  swift_release();

  return _swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10006F78C()
{
  type metadata accessor for TFComponent();

  return sub_10005E4EC();
}

unint64_t sub_10006F818()
{
  unint64_t result = qword_1000AA8C8;
  if (!qword_1000AA8C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AA8C8);
  }
  return result;
}

uint64_t sub_10006F874@<X0>(char *a1@<X8>)
{
  return sub_100063888(*(void *)(v1 + 32), *(void *)(v1 + 24), a1);
}

uint64_t sub_10006F890()
{
  uint64_t v1 = type metadata accessor for TFButton();
  return (*(uint64_t (**)(void))(v0
                              + *(int *)(v1 + 48)
                              + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80))))();
}

uint64_t sub_10006F904()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = type metadata accessor for TFButton();
  uint64_t v3 = v2 - 8;
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(v2 - 8) + 80);
  uint64_t v5 = (v4 + 32) & ~v4;
  uint64_t v6 = v5 + *(void *)(*(void *)(v2 - 8) + 64);
  uint64_t v7 = v4 | 7;
  uint64_t v8 = v0 + v5;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + v5 + *(int *)(v2 + 44), v1);
  swift_release();
  swift_release();

  swift_release();
  sub_10001F574(*(void *)(v8 + *(int *)(v3 + 68)), *(unsigned char *)(v8 + *(int *)(v3 + 68) + 8));

  return _swift_deallocObject(v0, v6, v7);
}

uint64_t sub_10006FA38(double a1, double a2, double a3, double a4)
{
  return sub_1000708D0((uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TFButton, (uint64_t (*)(uint64_t, uint64_t, uint64_t, __n128, __n128, __n128, __n128))sub_1000646D8, a1, a2, a3, a4);
}

uint64_t type metadata accessor for TFComponentBackground(uint64_t a1)
{
  return sub_100004BF8(a1, qword_1000AABD8);
}

uint64_t sub_10006FA8C@<X0>(uint64_t a1@<X8>)
{
  return sub_100060330(*(uint64_t **)(v1 + 16), a1);
}

unint64_t sub_10006FA94()
{
  unint64_t result = qword_1000AA950;
  if (!qword_1000AA950)
  {
    sub_100003F9C(&qword_1000AA948);
    sub_10006F520(&qword_1000AA958, (void (*)(uint64_t))type metadata accessor for TFLabel);
    sub_10000A368(&qword_1000AA960, &qword_1000AA968);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AA950);
  }
  return result;
}

unint64_t sub_10006FB64()
{
  unint64_t result = qword_1000AA978;
  if (!qword_1000AA978)
  {
    sub_100003F9C(&qword_1000AA930);
    sub_100003F9C(&qword_1000AA938);
    type metadata accessor for ButtonToggleStyle();
    sub_10000A368((unint64_t *)&unk_1000AA980, &qword_1000AA938);
    sub_10006F520(&qword_1000AA130, (void (*)(uint64_t))&type metadata accessor for ButtonToggleStyle);
    swift_getOpaqueTypeConformance2();
    sub_100003F9C(&qword_1000AA910);
    type metadata accessor for HighlightHoverEffect();
    sub_10006FD0C();
    sub_10006F520(&qword_1000AA880, (void (*)(uint64_t))&type metadata accessor for HighlightHoverEffect);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AA978);
  }
  return result;
}

unint64_t sub_10006FD0C()
{
  unint64_t result = qword_1000AA990;
  if (!qword_1000AA990)
  {
    sub_100003F9C(&qword_1000AA910);
    sub_100003F9C(&qword_1000AA900);
    sub_10006FDEC();
    swift_getOpaqueTypeConformance2();
    sub_10006F520(&qword_1000A8808, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AA990);
  }
  return result;
}

unint64_t sub_10006FDEC()
{
  unint64_t result = qword_1000AA998;
  if (!qword_1000AA998)
  {
    sub_100003F9C(&qword_1000AA900);
    sub_10006FE8C();
    sub_10000A368(&qword_1000AA960, &qword_1000AA968);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AA998);
  }
  return result;
}

unint64_t sub_10006FE8C()
{
  unint64_t result = qword_1000AA9A0;
  if (!qword_1000AA9A0)
  {
    sub_100003F9C(&qword_1000AA250);
    sub_10006F520(&qword_1000AA958, (void (*)(uint64_t))type metadata accessor for TFLabel);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AA9A0);
  }
  return result;
}

uint64_t sub_10006FF40(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10006FFA8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10007000C()
{
  uint64_t v1 = (int *)(type metadata accessor for TFToggle(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  swift_bridgeObjectRelease();
  uint64_t v7 = v6 + v1[7];
  uint64_t v8 = type metadata accessor for SymbolRenderingMode();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  sub_10001F574(*(void *)(v6 + v1[11]), *(unsigned char *)(v6 + v1[11] + 8));

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_100070140()
{
  return sub_100060274();
}

uint64_t sub_100070194@<X0>(void *a1@<X8>)
{
  return sub_10005FE20(*(uint64_t **)(v1 + 16), a1);
}

uint64_t sub_1000701A4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.isHoverEffectEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1000701D4()
{
  return EnvironmentValues.isHoverEffectEnabled.setter();
}

uint64_t sub_1000701FC@<X0>(unsigned char *a1@<X8>)
{
  sub_1000702D0();
  uint64_t result = EnvironmentValues.subscript.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_10007024C()
{
  return EnvironmentValues.subscript.setter();
}

uint64_t sub_1000702A0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.accessibilityShowButtonShapes.getter();
  *a1 = result & 1;
  return result;
}

unint64_t sub_1000702D0()
{
  unint64_t result = qword_1000AA9B0;
  if (!qword_1000AA9B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AA9B0);
  }
  return result;
}

uint64_t sub_100070324()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10007035C()
{
  return State.wrappedValue.setter();
}

uint64_t sub_1000703B0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues._accessibilityShowButtonShapes.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1000703E0()
{
  return EnvironmentValues._accessibilityShowButtonShapes.setter();
}

unint64_t sub_100070408()
{
  unint64_t result = qword_1000AA9E8;
  if (!qword_1000AA9E8)
  {
    sub_100003F9C(&qword_1000AA9D0);
    sub_100073E6C(&qword_1000AA9F0, &qword_1000AA258, (void (*)(void))sub_1000704B0);
    sub_100058474();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AA9E8);
  }
  return result;
}

unint64_t sub_1000704B0()
{
  unint64_t result = qword_1000AA9F8;
  if (!qword_1000AA9F8)
  {
    sub_100003F9C((uint64_t *)&unk_1000AA9C0);
    sub_10000A368((unint64_t *)&unk_1000AAA00, &qword_1000AA9B8);
    sub_10000A368(&qword_1000A8D48, &qword_1000AAA10);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AA9F8);
  }
  return result;
}

uint64_t sub_100070574(uint64_t a1)
{
  uint64_t v2 = sub_10000435C((uint64_t *)&unk_1000AAAF0);
  __chkstk_darwin(v2 - 8);
  sub_100009E70(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&unk_1000AAAF0);
  return EnvironmentValues.symbolRenderingMode.setter();
}

uint64_t sub_100070608(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Text.TruncationMode();
  __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return EnvironmentValues.truncationMode.setter();
}

uint64_t sub_1000706D0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.tint.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000706FC()
{
  return EnvironmentValues.tint.setter();
}

uint64_t sub_100070728@<X0>(uint64_t a1@<X8>)
{
  return sub_10006573C(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_100070734()
{
  unint64_t result = qword_1000AAA40;
  if (!qword_1000AAA40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AAA40);
  }
  return result;
}

uint64_t sub_100070788()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = (int *)(type metadata accessor for TFMenuLabel() - 8);
  uint64_t v3 = *(unsigned __int8 *)(*(void *)v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(*(void *)v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = v0 + v4;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + v4, v1);
  swift_release();
  sub_10001F574(*(void *)(v7 + v2[12]), *(unsigned char *)(v7 + v2[12] + 8));
  sub_10001F574(*(void *)(v7 + v2[13]), *(unsigned char *)(v7 + v2[13] + 8));

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000708A4(double a1, double a2, double a3, double a4)
{
  return sub_1000708D0((uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TFMenuLabel, (uint64_t (*)(uint64_t, uint64_t, uint64_t, __n128, __n128, __n128, __n128))sub_100065C2C, a1, a2, a3, a4);
}

uint64_t sub_1000708D0(uint64_t (*a1)(void, uint64_t, uint64_t), uint64_t (*a2)(uint64_t, uint64_t, uint64_t, __n128, __n128, __n128, __n128), double a3, double a4, double a5, double a6)
{
  uint64_t v11 = *(void *)(v6 + 16);
  uint64_t v12 = *(void *)(v6 + 24);
  uint64_t v13 = *(void *)(a1(0, v11, v12) - 8);
  uint64_t v14 = v6 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  v15.n128_f64[0] = a3;
  v16.n128_f64[0] = a4;
  v17.n128_f64[0] = a5;
  v18.n128_f64[0] = a6;

  return a2(v14, v11, v12, v15, v16, v17, v18);
}

unint64_t sub_1000709A0()
{
  unint64_t result = qword_1000AAA60;
  if (!qword_1000AAA60)
  {
    sub_100003F9C(&qword_1000AAA50);
    sub_10006F520(&qword_1000A9C30, (void (*)(uint64_t))type metadata accessor for TFSymbol);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AAA60);
  }
  return result;
}

unint64_t sub_100070A4C()
{
  unint64_t result = qword_1000AAA70;
  if (!qword_1000AAA70)
  {
    sub_100003F9C(&qword_1000AAA78);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AAA70);
  }
  return result;
}

unint64_t sub_100070ABC()
{
  unint64_t result = qword_1000AAA80;
  if (!qword_1000AAA80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AAA80);
  }
  return result;
}

unint64_t sub_100070B10()
{
  unint64_t result = qword_1000AAA88;
  if (!qword_1000AAA88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AAA88);
  }
  return result;
}

uint64_t sub_100070B64(char a1)
{
  if (a1)
  {
    id v1 = [self currentDevice];
    id v2 = [v1 userInterfaceIdiom];

    if (v2 == (id)6) {
      static Color.black.getter();
    }
    else {
      static Color.white.getter();
    }
  }
  else
  {
    static HierarchicalShapeStyle.primary.getter();
  }
  return AnyShapeStyle.init<A>(_:)();
}

uint64_t sub_100070C1C()
{
  return EnvironmentValues.truncationMode.getter();
}

uint64_t sub_100070C4C()
{
  return EnvironmentValues.symbolRenderingMode.getter();
}

unint64_t sub_100070C74()
{
  unint64_t result = qword_1000AAB58;
  if (!qword_1000AAB58)
  {
    sub_100003F9C(&qword_1000AAB50);
    sub_10000A368(&qword_1000AAB60, &qword_1000AAB48);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AAB58);
  }
  return result;
}

unint64_t sub_100070D14()
{
  unint64_t result = qword_1000AAB68;
  if (!qword_1000AAB68)
  {
    sub_100003F9C(&qword_1000AAB38);
    sub_10006F520(&qword_1000A9C30, (void (*)(uint64_t))type metadata accessor for TFSymbol);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AAB68);
  }
  return result;
}

uint64_t sub_100070DC0@<X0>(uint64_t a1@<X8>)
{
  return sub_100060C10(v1[2], v1[3], v1[4], a1);
}

uint64_t sub_100070DCC@<X0>(uint64_t a1@<X8>)
{
  return sub_100060C84(a1);
}

uint64_t sub_100070DF0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100070E58()
{
  return swift_getGenericMetadata();
}

uint64_t destroy for TFPressedButtonStyle(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    swift_release();
    swift_release();
  }
  uint64_t v2 = *(void *)(a1 + 24);
  char v3 = *(unsigned char *)(a1 + 32);

  return sub_10001F574(v2, v3);
}

uint64_t initializeWithCopy for TFPressedButtonStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v4;
    *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  }
  uint64_t v5 = *(void *)(a2 + 24);
  char v6 = *(unsigned char *)(a2 + 32);
  sub_10001F504(v5, v6);
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = v6;
  return a1;
}

uint64_t assignWithCopy for TFPressedButtonStyle(uint64_t a1, long long *a2)
{
  uint64_t v4 = *((void *)a2 + 1);
  if (*(void *)(a1 + 8))
  {
    if (v4)
    {
      *(void *)a1 = *(void *)a2;
      swift_retain();
      swift_release();
      *(void *)(a1 + 8) = *((void *)a2 + 1);
      swift_retain();
      swift_release();
      *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    }
    else
    {
      sub_100009ED4(a1, &qword_1000A9F20);
      char v5 = *((unsigned char *)a2 + 16);
      *(_OWORD *)a1 = *a2;
      *(unsigned char *)(a1 + 16) = v5;
    }
  }
  else if (v4)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = *((void *)a2 + 1);
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v6 = *a2;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    *(_OWORD *)a1 = v6;
  }
  uint64_t v7 = *((void *)a2 + 3);
  char v8 = *((unsigned char *)a2 + 32);
  sub_10001F504(v7, v8);
  uint64_t v9 = *(void *)(a1 + 24);
  char v10 = *(unsigned char *)(a1 + 32);
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = v8;
  sub_10001F574(v9, v10);
  return a1;
}

uint64_t assignWithTake for TFPressedButtonStyle(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 8)) {
    goto LABEL_5;
  }
  uint64_t v4 = *(void *)(a2 + 8);
  if (!v4)
  {
    sub_100009ED4(a1, &qword_1000A9F20);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = v4;
  swift_release();
LABEL_6:
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  char v5 = *(unsigned char *)(a2 + 32);
  uint64_t v6 = *(void *)(a1 + 24);
  char v7 = *(unsigned char *)(a1 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = v5;
  sub_10001F574(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for TFPressedButtonStyle(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TFPressedButtonStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TFPressedButtonStyle()
{
  return &type metadata for TFPressedButtonStyle;
}

ValueMetadata *type metadata accessor for _TFUILabel()
{
  return &type metadata for _TFUILabel;
}

uint64_t destroy for _TFUITextView(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  char v3 = *(unsigned char *)(a1 + 16);

  return sub_10001F574(v2, v3);
}

uint64_t _s19FontPickerUIService13_TFUITextViewVwCP_0(uint64_t a1, uint64_t a2)
{
  char v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 16);
  id v6 = v3;
  sub_10001F504(v4, v5);
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for _TFUITextView(uint64_t a1, void **a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *a2;
  char v5 = *(void **)a1;
  *(void *)a1 = *a2;
  id v6 = v4;

  uint64_t v7 = (uint64_t)v2[1];
  LOBYTE(v2) = *((unsigned char *)v2 + 16);
  sub_10001F504(v7, (char)v2);
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = (_BYTE)v2;
  sub_10001F574(v8, v9);
  return a1;
}

uint64_t assignWithTake for _TFUITextView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  char v5 = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = v5;
  sub_10001F574(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for _TFUITextView(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _TFUITextView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _TFUITextView()
{
  return &type metadata for _TFUITextView;
}

uint64_t sub_1000713BC(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = v13 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    *(_WORD *)(a1 + 1) = *(_WORD *)((char *)a2 + 1);
    uint64_t v7 = a2[1];
    char v8 = *((unsigned char *)a2 + 16);
    sub_10001F504(v7, v8);
    *(void *)(v4 + 8) = v7;
    *(unsigned char *)(v4 + 16) = v8;
    uint64_t v9 = a3[8];
    char v10 = (void *)(v4 + v9);
    uint64_t v11 = (uint64_t *)((char *)a2 + v9);
    sub_10000435C((uint64_t *)&unk_1000A8F70);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      *char v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v14 = a3[9];
    uint64_t v15 = v4 + v14;
    uint64_t v16 = (uint64_t)a2 + v14;
    uint64_t v17 = *(void *)v16;
    char v18 = *(unsigned char *)(v16 + 8);
    sub_10001F504(*(void *)v16, v18);
    *(void *)uint64_t v15 = v17;
    *(unsigned char *)(v15 + 8) = v18;
    uint64_t v19 = a3[10];
    uint64_t v20 = v4 + v19;
    uint64_t v21 = (uint64_t)a2 + v19;
    uint64_t v22 = *(void *)v21;
    char v23 = *(unsigned char *)(v21 + 8);
    sub_10001F504(*(void *)v21, v23);
    *(void *)uint64_t v20 = v22;
    *(unsigned char *)(v20 + 8) = v23;
    uint64_t v24 = a3[11];
    uint64_t v25 = v4 + v24;
    uint64_t v26 = (uint64_t)a2 + v24;
    uint64_t v27 = *(void *)v26;
    char v28 = *(unsigned char *)(v26 + 8);
    sub_10001F504(*(void *)v26, v28);
    *(void *)uint64_t v25 = v27;
    *(unsigned char *)(v25 + 8) = v28;
    uint64_t v29 = a3[12];
    uint64_t v30 = v4 + v29;
    uint64_t v31 = (uint64_t)a2 + v29;
    uint64_t v32 = *(void *)v31;
    char v33 = *(unsigned char *)(v31 + 8);
    sub_10001F504(*(void *)v31, v33);
    *(void *)uint64_t v30 = v32;
    *(unsigned char *)(v30 + 8) = v33;
  }
  return v4;
}

uint64_t sub_1000715A4(uint64_t a1, int *a2)
{
  sub_10001F574(*(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  uint64_t v4 = a1 + a2[8];
  sub_10000435C((uint64_t *)&unk_1000A8F70);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  sub_10001F574(*(void *)(a1 + a2[9]), *(unsigned char *)(a1 + a2[9] + 8));
  sub_10001F574(*(void *)(a1 + a2[10]), *(unsigned char *)(a1 + a2[10] + 8));
  sub_10001F574(*(void *)(a1 + a2[11]), *(unsigned char *)(a1 + a2[11] + 8));
  uint64_t v6 = a1 + a2[12];
  uint64_t v7 = *(void *)v6;
  char v8 = *(unsigned char *)(v6 + 8);

  return sub_10001F574(v7, v8);
}

uint64_t sub_1000716A4(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  uint64_t v6 = *(void *)(a2 + 8);
  char v7 = *(unsigned char *)(a2 + 16);
  sub_10001F504(v6, v7);
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = v7;
  uint64_t v8 = a3[8];
  uint64_t v9 = (void *)(a1 + v8);
  char v10 = (void *)(a2 + v8);
  sub_10000435C((uint64_t *)&unk_1000A8F70);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  }
  else
  {
    void *v9 = *v10;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v12 = a3[9];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = *(void *)v14;
  char v16 = *(unsigned char *)(v14 + 8);
  sub_10001F504(*(void *)v14, v16);
  *(void *)uint64_t v13 = v15;
  *(unsigned char *)(v13 + 8) = v16;
  uint64_t v17 = a3[10];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  uint64_t v20 = *(void *)v19;
  char v21 = *(unsigned char *)(v19 + 8);
  sub_10001F504(*(void *)v19, v21);
  *(void *)uint64_t v18 = v20;
  *(unsigned char *)(v18 + 8) = v21;
  uint64_t v22 = a3[11];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  uint64_t v25 = *(void *)v24;
  char v26 = *(unsigned char *)(v24 + 8);
  sub_10001F504(*(void *)v24, v26);
  *(void *)uint64_t v23 = v25;
  *(unsigned char *)(v23 + 8) = v26;
  uint64_t v27 = a3[12];
  uint64_t v28 = a1 + v27;
  uint64_t v29 = a2 + v27;
  uint64_t v30 = *(void *)v29;
  char v31 = *(unsigned char *)(v29 + 8);
  sub_10001F504(*(void *)v29, v31);
  *(void *)uint64_t v28 = v30;
  *(unsigned char *)(v28 + 8) = v31;
  return a1;
}

uint64_t sub_10007183C(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  uint64_t v6 = *(void *)(a2 + 8);
  char v7 = *(unsigned char *)(a2 + 16);
  sub_10001F504(v6, v7);
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = v7;
  sub_10001F574(v8, v9);
  if (a1 != a2)
  {
    uint64_t v10 = a3[8];
    uint64_t v11 = (void *)(a1 + v10);
    uint64_t v12 = (void *)(a2 + v10);
    sub_100009ED4(a1 + v10, (uint64_t *)&unk_1000A8F70);
    sub_10000435C((uint64_t *)&unk_1000A8F70);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    }
    else
    {
      *uint64_t v11 = *v12;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v14 = a3[9];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v17 = *(void *)v16;
  char v18 = *(unsigned char *)(v16 + 8);
  sub_10001F504(*(void *)v16, v18);
  uint64_t v19 = *(void *)v15;
  char v20 = *(unsigned char *)(v15 + 8);
  *(void *)uint64_t v15 = v17;
  *(unsigned char *)(v15 + 8) = v18;
  sub_10001F574(v19, v20);
  uint64_t v21 = a3[10];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  uint64_t v24 = *(void *)v23;
  char v25 = *(unsigned char *)(v23 + 8);
  sub_10001F504(*(void *)v23, v25);
  uint64_t v26 = *(void *)v22;
  char v27 = *(unsigned char *)(v22 + 8);
  *(void *)uint64_t v22 = v24;
  *(unsigned char *)(v22 + 8) = v25;
  sub_10001F574(v26, v27);
  uint64_t v28 = a3[11];
  uint64_t v29 = a1 + v28;
  uint64_t v30 = a2 + v28;
  uint64_t v31 = *(void *)v30;
  char v32 = *(unsigned char *)(v30 + 8);
  sub_10001F504(*(void *)v30, v32);
  uint64_t v33 = *(void *)v29;
  char v34 = *(unsigned char *)(v29 + 8);
  *(void *)uint64_t v29 = v31;
  *(unsigned char *)(v29 + 8) = v32;
  sub_10001F574(v33, v34);
  uint64_t v35 = a3[12];
  uint64_t v36 = a1 + v35;
  uint64_t v37 = a2 + v35;
  uint64_t v38 = *(void *)v37;
  char v39 = *(unsigned char *)(v37 + 8);
  sub_10001F504(*(void *)v37, v39);
  uint64_t v40 = *(void *)v36;
  char v41 = *(unsigned char *)(v36 + 8);
  *(void *)uint64_t v36 = v38;
  *(unsigned char *)(v36 + 8) = v39;
  sub_10001F574(v40, v41);
  return a1;
}

uint64_t sub_100071A30(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = a3[8];
  char v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_10000435C((uint64_t *)&unk_1000A8F70);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  uint64_t v11 = a3[9];
  uint64_t v12 = a3[10];
  uint64_t v13 = a1 + v11;
  uint64_t v14 = a2 + v11;
  *(void *)uint64_t v13 = *(void *)v14;
  *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
  uint64_t v15 = a1 + v12;
  uint64_t v16 = a2 + v12;
  *(void *)uint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
  uint64_t v17 = a3[11];
  uint64_t v18 = a3[12];
  uint64_t v19 = a1 + v17;
  uint64_t v20 = a2 + v17;
  *(void *)uint64_t v19 = *(void *)v20;
  *(unsigned char *)(v19 + 8) = *(unsigned char *)(v20 + 8);
  uint64_t v21 = a1 + v18;
  uint64_t v22 = a2 + v18;
  *(void *)uint64_t v21 = *(void *)v22;
  *(unsigned char *)(v21 + 8) = *(unsigned char *)(v22 + 8);
  return a1;
}

uint64_t sub_100071B94(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  uint64_t v6 = *(void *)(a2 + 8);
  char v7 = *(unsigned char *)(a2 + 16);
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = v7;
  sub_10001F574(v8, v9);
  if (a1 != a2)
  {
    uint64_t v10 = a3[8];
    uint64_t v11 = (void *)(a1 + v10);
    uint64_t v12 = (const void *)(a2 + v10);
    sub_100009ED4(a1 + v10, (uint64_t *)&unk_1000A8F70);
    uint64_t v13 = sub_10000435C((uint64_t *)&unk_1000A8F70);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v14 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v14 - 8) + 32))(v11, v12, v14);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
    }
  }
  uint64_t v15 = a3[9];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = (uint64_t *)(a2 + v15);
  uint64_t v18 = *v17;
  LOBYTE(v17) = *((unsigned char *)v17 + 8);
  uint64_t v19 = *(void *)v16;
  char v20 = *(unsigned char *)(v16 + 8);
  *(void *)uint64_t v16 = v18;
  *(unsigned char *)(v16 + 8) = (_BYTE)v17;
  sub_10001F574(v19, v20);
  uint64_t v21 = a3[10];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = (uint64_t *)(a2 + v21);
  uint64_t v24 = *v23;
  LOBYTE(v23) = *((unsigned char *)v23 + 8);
  uint64_t v25 = *(void *)v22;
  char v26 = *(unsigned char *)(v22 + 8);
  *(void *)uint64_t v22 = v24;
  *(unsigned char *)(v22 + 8) = (_BYTE)v23;
  sub_10001F574(v25, v26);
  uint64_t v27 = a3[11];
  uint64_t v28 = a1 + v27;
  uint64_t v29 = (uint64_t *)(a2 + v27);
  uint64_t v30 = *v29;
  LOBYTE(v29) = *((unsigned char *)v29 + 8);
  uint64_t v31 = *(void *)v28;
  char v32 = *(unsigned char *)(v28 + 8);
  *(void *)uint64_t v28 = v30;
  *(unsigned char *)(v28 + 8) = (_BYTE)v29;
  sub_10001F574(v31, v32);
  uint64_t v33 = a3[12];
  uint64_t v34 = a1 + v33;
  uint64_t v35 = (uint64_t *)(a2 + v33);
  uint64_t v36 = *v35;
  LOBYTE(v35) = *((unsigned char *)v35 + 8);
  uint64_t v37 = *(void *)v34;
  char v38 = *(unsigned char *)(v34 + 8);
  *(void *)uint64_t v34 = v36;
  *(unsigned char *)(v34 + 8) = (_BYTE)v35;
  sub_10001F574(v37, v38);
  return a1;
}

uint64_t sub_100071D5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100071D70);
}

uint64_t sub_100071D70(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *a1;
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v10 = sub_10000435C(&qword_1000AA3C8);
    uint64_t v11 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = &a1[*(int *)(a3 + 32)];
    return v11(v13, a2, v12);
  }
}

uint64_t sub_100071E24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100071E38);
}

unsigned char *sub_100071E38(unsigned char *result, uint64_t a2, int a3, uint64_t a4)
{
  BOOL v5 = result;
  if (a3 == 254)
  {
    _OWORD *result = a2 + 1;
  }
  else
  {
    uint64_t v7 = sub_10000435C(&qword_1000AA3C8);
    uint64_t v8 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = &v5[*(int *)(a4 + 32)];
    return (unsigned char *)v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_100071EE0()
{
  sub_10006F284(319, &qword_1000AA440, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t initializeBufferWithCopyOfBuffer for ComponentItem(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ComponentItem(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ComponentItem(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ComponentItem(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ComponentItem(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ComponentItem()
{
  return &type metadata for ComponentItem;
}

uint64_t sub_100072130(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 16);
}

uint64_t sub_100072138(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *sub_1000721C8(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    _OWORD *result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100072294);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          _OWORD *result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t type metadata accessor for TFButton.Sizing()
{
  return sub_100070E58();
}

uint64_t sub_1000722D4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100072618()
{
  return swift_getWitnessTable();
}

unint64_t sub_100072AF4()
{
  unint64_t result = qword_1000AACB0;
  if (!qword_1000AACB0)
  {
    sub_100003F9C(&qword_1000AA8E0);
    sub_100072B70();
    sub_10006F478();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AACB0);
  }
  return result;
}

unint64_t sub_100072B70()
{
  unint64_t result = qword_1000AACB8;
  if (!qword_1000AACB8)
  {
    sub_100003F9C(&qword_1000AA8D8);
    sub_10006FB64();
    sub_100003F9C(&qword_1000AA8E8);
    sub_10000A368(&qword_1000AA970, &qword_1000AA8E8);
    sub_10006F818();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AACB8);
  }
  return result;
}

unint64_t sub_100072C64()
{
  unint64_t result = qword_1000AACC0;
  if (!qword_1000AACC0)
  {
    sub_100003F9C(&qword_1000AAA18);
    sub_100072CE0();
    sub_10006F478();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AACC0);
  }
  return result;
}

unint64_t sub_100072CE0()
{
  unint64_t result = qword_1000AACC8;
  if (!qword_1000AACC8)
  {
    sub_100003F9C(&qword_1000AA9E0);
    sub_100003F9C(&qword_1000AA9D0);
    type metadata accessor for HighlightHoverEffect();
    sub_100070408();
    sub_10006F520(&qword_1000AA880, (void (*)(uint64_t))&type metadata accessor for HighlightHoverEffect);
    swift_getOpaqueTypeConformance2();
    sub_10000A368(&qword_1000AACD0, &qword_1000AACD8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AACC8);
  }
  return result;
}

uint64_t sub_100072E04()
{
  return swift_getWitnessTable();
}

unint64_t sub_100073114()
{
  unint64_t result = qword_1000AACE0;
  if (!qword_1000AACE0)
  {
    sub_100003F9C(&qword_1000AACE8);
    sub_1000731B4();
    sub_10000A368(&qword_1000AAD10, &qword_1000AAD18);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AACE0);
  }
  return result;
}

unint64_t sub_1000731B4()
{
  unint64_t result = qword_1000AACF0;
  if (!qword_1000AACF0)
  {
    sub_100003F9C(&qword_1000AACF8);
    sub_100073254();
    sub_10000A368(&qword_1000A9D78, &qword_1000AAA30);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AACF0);
  }
  return result;
}

unint64_t sub_100073254()
{
  unint64_t result = qword_1000AAD00;
  if (!qword_1000AAD00)
  {
    sub_100003F9C(&qword_1000AAD08);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AAD00);
  }
  return result;
}

unint64_t sub_1000732CC()
{
  unint64_t result = qword_1000AAD20;
  if (!qword_1000AAD20)
  {
    sub_100003F9C(&qword_1000AAAA8);
    sub_10000A368(&qword_1000AAD28, &qword_1000AAAB0);
    sub_10000A368(&qword_1000AA960, &qword_1000AA968);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AAD20);
  }
  return result;
}

uint64_t sub_100073390()
{
  return sub_100073E6C(&qword_1000AAD30, &qword_1000AAAC8, (void (*)(void))sub_1000733D4);
}

unint64_t sub_1000733D4()
{
  unint64_t result = qword_1000AAD38;
  if (!qword_1000AAD38)
  {
    sub_100003F9C(&qword_1000AAAC0);
    sub_100073474();
    sub_10000A368(&qword_1000AAD60, &qword_1000AAAB8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AAD38);
  }
  return result;
}

unint64_t sub_100073474()
{
  unint64_t result = qword_1000AAD40;
  if (!qword_1000AAD40)
  {
    sub_100003F9C(&qword_1000AAD48);
    sub_10000A368(&qword_1000AAD50, &qword_1000AAD58);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AAD40);
  }
  return result;
}

unint64_t sub_100073518()
{
  unint64_t result = qword_1000AAD68;
  if (!qword_1000AAD68)
  {
    sub_100003F9C(&qword_1000AAAE0);
    sub_100073594();
    sub_10006F478();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AAD68);
  }
  return result;
}

unint64_t sub_100073594()
{
  unint64_t result = qword_1000AAD70;
  if (!qword_1000AAD70)
  {
    sub_100003F9C(&qword_1000AAAD8);
    sub_100073610();
    sub_100058474();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AAD70);
  }
  return result;
}

unint64_t sub_100073610()
{
  unint64_t result = qword_1000AAD78;
  if (!qword_1000AAD78)
  {
    sub_100003F9C(&qword_1000AAB08);
    sub_100073E6C(&qword_1000AAD80, &qword_1000AAB00, (void (*)(void))sub_1000736DC);
    sub_10000A368(&qword_1000A9D78, &qword_1000AAA30);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AAD78);
  }
  return result;
}

unint64_t sub_1000736DC()
{
  unint64_t result = qword_1000AAD88;
  if (!qword_1000AAD88)
  {
    sub_100003F9C(&qword_1000AA2A8);
    sub_10007377C();
    sub_10000A368(&qword_1000AADD0, &qword_1000AAAE8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AAD88);
  }
  return result;
}

unint64_t sub_10007377C()
{
  unint64_t result = qword_1000AAD90;
  if (!qword_1000AAD90)
  {
    sub_100003F9C(&qword_1000AAD98);
    sub_10007381C();
    sub_10000A368((unint64_t *)&unk_1000AA8A0, &qword_1000AA888);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AAD90);
  }
  return result;
}

unint64_t sub_10007381C()
{
  unint64_t result = qword_1000AADA0;
  if (!qword_1000AADA0)
  {
    sub_100003F9C(&qword_1000AADA8);
    sub_10000A368(&qword_1000AADB0, &qword_1000AADB8);
    sub_10000A368((unint64_t *)&unk_1000AADC0, &qword_1000A9D10);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AADA0);
  }
  return result;
}

unint64_t sub_1000738E4()
{
  unint64_t result = qword_1000AADD8;
  if (!qword_1000AADD8)
  {
    sub_100003F9C(&qword_1000AAB28);
    sub_100073960();
    sub_10006F478();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AADD8);
  }
  return result;
}

unint64_t sub_100073960()
{
  unint64_t result = qword_1000AADE0;
  if (!qword_1000AADE0)
  {
    sub_100003F9C(&qword_1000AAB20);
    sub_100073A14(&qword_1000AADE8, &qword_1000AAB30, (void (*)(void))sub_100073A80);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AADE0);
  }
  return result;
}

uint64_t sub_100073A14(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100003F9C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100073A80()
{
  unint64_t result = qword_1000AADF0;
  if (!qword_1000AADF0)
  {
    sub_100003F9C(&qword_1000AADF8);
    sub_100070C74();
    sub_100070D14();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AADF0);
  }
  return result;
}

uint64_t sub_100073AFC()
{
  return swift_getWitnessTable();
}

uint64_t sub_100073B18()
{
  return swift_getOpaqueTypeConformance2();
}

void *sub_100073B3C()
{
  return &protocol witness table for Never;
}

uint64_t sub_100073B48()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100073B64()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100073B80()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100073BB8()
{
  return State.wrappedValue.setter();
}

unint64_t sub_100073C0C()
{
  unint64_t result = qword_1000AAE30;
  if (!qword_1000AAE30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AAE30);
  }
  return result;
}

unint64_t sub_100073C60()
{
  unint64_t result = qword_1000AAE38;
  if (!qword_1000AAE38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AAE38);
  }
  return result;
}

unint64_t sub_100073CB8()
{
  unint64_t result = qword_1000AAE50;
  if (!qword_1000AAE50)
  {
    sub_100003F9C(&qword_1000AAE10);
    sub_100073D58();
    sub_10000A368(&qword_1000A8D48, &qword_1000AAA10);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AAE50);
  }
  return result;
}

unint64_t sub_100073D58()
{
  unint64_t result = qword_1000AAE58;
  if (!qword_1000AAE58)
  {
    sub_100003F9C(&qword_1000AAE00);
    sub_10000A368(&qword_1000AAE60, &qword_1000AAE08);
    sub_10006F4CC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AAE58);
  }
  return result;
}

uint64_t sub_100073DF8()
{
  return sub_100073E6C(&qword_1000AAE68, &qword_1000AAE28, (void (*)(void))sub_100073E3C);
}

uint64_t sub_100073E3C()
{
  return sub_100073E6C(&qword_1000AAE70, &qword_1000AAE20, (void (*)(void))sub_100073EE8);
}

uint64_t sub_100073E6C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100003F9C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100073EE8()
{
  unint64_t result = qword_1000AAE78;
  if (!qword_1000AAE78)
  {
    sub_100003F9C(&qword_1000AAE18);
    sub_10006F520(&qword_1000AAE80, (void (*)(uint64_t))&type metadata accessor for ButtonStyleConfiguration.Label);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AAE78);
  }
  return result;
}

unint64_t sub_100073F98()
{
  unint64_t result = qword_1000AAE88;
  if (!qword_1000AAE88)
  {
    sub_100003F9C(&qword_1000AAE90);
    sub_100074038();
    sub_10000A368(&qword_1000AAEB0, &qword_1000AAEB8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AAE88);
  }
  return result;
}

unint64_t sub_100074038()
{
  unint64_t result = qword_1000AAE98;
  if (!qword_1000AAE98)
  {
    sub_100003F9C(&qword_1000AAEA0);
    sub_1000740D8();
    sub_10000A368((unint64_t *)&unk_1000AA8A0, &qword_1000AA888);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AAE98);
  }
  return result;
}

unint64_t sub_1000740D8()
{
  unint64_t result = qword_1000AAEA8;
  if (!qword_1000AAEA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AAEA8);
  }
  return result;
}

id sub_1000741FC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for _UIFontPickerUIServiceAppDelegate();
  return [super dealloc];
}

int main(int argc, const char **argv, const char **envp)
{
  type metadata accessor for _UIFontPickerUIServiceAppDelegate();
  static CommandLine.unsafeArgv.getter();
  static CommandLine.argc.getter();
  static CommandLine.argc.getter();
  uint64_t ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  unsigned int v4 = NSStringFromClass(ObjCClassFromMetadata);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  LODWORD(v4) = UIApplicationMain(_:_:_:_:)();
  swift_bridgeObjectRelease();
  exit((int)v4);
}

uint64_t type metadata accessor for _UIFontPickerUIServiceAppDelegate()
{
  return self;
}

id sub_1000742E0(void *a1)
{
  id v1 = a1;
  objc_super v2 = [a1 role];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;
  if (v3 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v5 == v6) {
    goto LABEL_7;
  }
  char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v8 & 1) == 0)
  {
    v19[0] = 0;
    v19[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(136);
    id v1 = [v1 role];
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;

    v12._countAndFlagsBits = v9;
    v12._object = v11;
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._object = (void *)0x80000001000883A0;
    objc_super v2 = v19;
    v13._countAndFlagsBits = 0xD000000000000086;
    String.append(_:)(v13);
    LODWORD(v18) = 0;
    uint64_t v17 = 19;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_7:

    swift_bridgeObjectRelease_n();
  }
  id v14 = [v1 role:v17, v18];
  id v15 = [objc_allocWithZone((Class)UISceneConfiguration) initWithName:0 sessionRole:v14];

  type metadata accessor for _UIFontPickerUIServiceSceneDelegate();
  [v15 setDelegateClass:swift_getObjCClassFromMetadata()];
  return v15;
}

uint64_t getEnumTagSinglePayload for TFUIConfig(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for TFUIConfig(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    _OWORD *result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100074618);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          _OWORD *result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TFUIConfig()
{
  return &type metadata for TFUIConfig;
}

unint64_t sub_100074654()
{
  unint64_t result = qword_1000AAF80;
  if (!qword_1000AAF80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AAF80);
  }
  return result;
}

double sub_1000746A8(char a1, char a2, char a3)
{
  if (a3 == 2 || a3 == 4)
  {
    id v5 = [self mainScreen];
    [v5 _referenceBounds];
    CGFloat v7 = v6;
    CGFloat v9 = v8;
    CGFloat v11 = v10;
    CGFloat v13 = v12;

    v35.origin.x = v7;
    v35.origin.y = v9;
    v35.size.width = v11;
    v35.size.height = v13;
    double v14 = 10.0;
    if (CGRectGetHeight(v35) > 667.0)
    {
      if (a2) {
        return 10.0;
      }
      else {
        return 11.0;
      }
    }
  }
  else if (a3 == 3)
  {
    id v15 = self;
    id v16 = [v15 mainScreen];
    [v16 _referenceBounds];
    CGFloat v18 = v17;
    CGFloat v20 = v19;
    CGFloat v22 = v21;
    CGFloat v24 = v23;

    v36.origin.x = v18;
    v36.origin.y = v20;
    v36.size.width = v22;
    v36.size.height = v24;
    if ((CGRectGetHeight(v36) <= 667.0) | a2 & 1) {
      double v14 = 7.0;
    }
    else {
      double v14 = 10.0;
    }
    id v25 = [v15 mainScreen];
    [v25 _referenceBounds];
    CGFloat v27 = v26;
    CGFloat v29 = v28;
    CGFloat v31 = v30;
    CGFloat v33 = v32;

    v37.origin.x = v27;
    v37.origin.y = v29;
    v37.size.width = v31;
    v37.size.height = v33;
    CGRectGetHeight(v37);
  }
  else if (a1)
  {
    return 0.0;
  }
  else
  {
    return 16.0;
  }
  return v14;
}

double sub_1000748C8(char a1, char a2)
{
  double v2 = 8.0;
  switch(a2)
  {
    case 1:
      return v2;
    case 2:
    case 4:
      id v4 = [self mainScreen];
      [v4 _referenceBounds];
      CGFloat v6 = v5;
      CGFloat v8 = v7;
      CGFloat v10 = v9;
      CGFloat v12 = v11;

      v23.origin.x = v6;
      v23.origin.y = v8;
      v23.size.width = v10;
      v23.size.height = v12;
      if (CGRectGetHeight(v23) > 667.0)
      {
        if (a1) {
          double v2 = 8.0;
        }
        else {
          double v2 = 12.0;
        }
      }
      break;
    case 3:
      id v13 = [self mainScreen];
      [v13 _referenceBounds];
      CGFloat v15 = v14;
      CGFloat v17 = v16;
      CGFloat v19 = v18;
      CGFloat v21 = v20;

      v24.origin.x = v15;
      v24.origin.y = v17;
      v24.size.width = v19;
      v24.size.height = v21;
      double v2 = 6.0;
      if (CGRectGetHeight(v24) > 667.0)
      {
        if (a1) {
          double v2 = 6.0;
        }
        else {
          double v2 = 8.0;
        }
      }
      break;
    default:
      double v2 = 14.0;
      break;
  }
  return v2;
}

uint64_t sub_100074A48()
{
  sub_100018C78();
  EnvironmentValues.subscript.getter();
  return v1;
}

double sub_100074A84(char a1)
{
  double result = 44.0;
  switch(a1)
  {
    case 1:
    case 3:
      return result;
    case 2:
    case 4:
      id v2 = [self mainScreen];
      [v2 _referenceBounds];
      CGFloat v4 = v3;
      CGFloat v6 = v5;
      CGFloat v8 = v7;
      CGFloat v10 = v9;

      v12.origin.x = v4;
      v12.origin.y = v6;
      v12.size.width = v8;
      v12.size.height = v10;
      BOOL v11 = CGRectGetHeight(v12) > 667.0;
      double result = 50.0;
      if (!v11) {
        double result = 45.0;
      }
      break;
    default:
      double result = 45.0;
      break;
  }
  return result;
}

double sub_100074B84(uint64_t a1, uint64_t a2, char a3, char a4, char a5, char a6)
{
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;
  if (v11 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v13 == v14)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_13;
  }
  char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v16)
  {
LABEL_13:
    sub_100075E54(a5 & 1, a6);
    return result;
  }
  if ((a6 - 2) < 3u)
  {
    if ((a3 & 1) == 0)
    {
      if (a6 == 4) {
        double v17 = 2.0;
      }
      else {
        double v17 = 4.0;
      }
      uint64_t v18 = a5 & 1;
      double v19 = sub_1000746A8(a4 & 1, v18, a6);
      double v21 = *(double *)&a2 - (v19 + v20);
      sub_100075E54(v18, a6);
      return (v21 - v22 - v17 * sub_1000748C8(v18, a6)) / v17;
    }
    if (a5) {
      return 34.0;
    }
  }

  return sub_100075204(a6);
}

uint64_t sub_100074D28()
{
  sub_10001F4A4();
  EnvironmentValues.subscript.getter();
  return v1;
}

double sub_100074D68()
{
  return sub_100074DA8((void (*)(void))sub_10001F450);
}

double sub_100074D88()
{
  return sub_100074DA8((void (*)(void))sub_10001F3FC);
}

double sub_100074DA8(void (*a1)(void))
{
  a1();
  EnvironmentValues.subscript.getter();
  return v2;
}

uint64_t sub_100074DF0()
{
  return sub_100075718((void (*)(void))sub_10001F3A8);
}

uint64_t sub_100074E10()
{
  return sub_100075718((void (*)(void))sub_100057B40);
}

uint64_t sub_100074E30()
{
  id v1 = [v0 familyName];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  v2._countAndFlagsBits = 46;
  v2._object = (void *)0xE100000000000000;
  LOBYTE(v1) = String.hasPrefix(_:)(v2);
  swift_bridgeObjectRelease();
  if ((v1 & 1) == 0)
  {
    id v3 = [v0 familyName];
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;

    double v7 = self;
    [v7 systemFontSize];
    id v8 = [v7 systemFontOfSize:];
    id v9 = [v8 familyName];

    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v12 = v11;

    if (v4 == v10 && v6 == v12)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v14 & 1) == 0)
      {
        CFStringRef v15 = CTFontCopyName((CTFontRef)v0, kCTFontFamilyNameKey);
        if (!v15) {
          CFStringRef v15 = (CFStringRef)[v0 familyName];
        }
        char v16 = (__CFString *)v15;
        uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();

        return v17;
      }
    }
  }
  if (qword_1000A80F8 != -1) {
    swift_once();
  }
  uint64_t v17 = qword_1000AB3A0;
  swift_bridgeObjectRetain();
  return v17;
}

uint64_t sub_100075018@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  v17[0] = a3;
  v17[1] = a6;
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v17 - v12;
  _OWORD v17[4] = a1;
  v17[5] = a2;
  View.modifier<A>(_:)();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v17[0];
  *(void *)(v14 + 24) = a4;
  unint64_t v15 = sub_10005ACCC();
  v17[2] = a5;
  void v17[3] = v15;
  swift_retain();
  swift_getWitnessTable();
  sub_100076D50();
  sub_1000776FC(&qword_1000AAFA8, type metadata accessor for CGRect);
  View.onPreferenceChange<A>(_:perform:)();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

double sub_100075204(char a1)
{
  double result = 44.0;
  switch(a1)
  {
    case 1:
    case 3:
      return result;
    case 2:
    case 4:
      id v2 = [self mainScreen];
      [v2 _referenceBounds];
      CGFloat v4 = v3;
      CGFloat v6 = v5;
      CGFloat v8 = v7;
      CGFloat v10 = v9;

      v12.origin.x = v4;
      v12.origin.y = v6;
      v12.size.width = v8;
      v12.size.height = v10;
      BOOL v11 = CGRectGetHeight(v12) > 667.0;
      double result = 50.0;
      if (!v11) {
        double result = 45.0;
      }
      break;
    default:
      double result = 45.0;
      break;
  }
  return result;
}

uint64_t sub_100075304@<X0>(unsigned __int8 a1@<W0>, uint64_t a2@<X8>)
{
  int v3 = a1;
  uint64_t v4 = sub_10000435C(&qword_1000AB060);
  uint64_t v5 = __chkstk_darwin(v4);
  char v39 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  CGFloat v8 = (char *)&v34 - v7;
  uint64_t v9 = sub_10000435C(&qword_1000AA810);
  __chkstk_darwin(v9);
  BOOL v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DynamicTypeSize();
  uint64_t v13 = *(void **)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  char v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v34 - v17;
  if ((v3 - 2) < 3)
  {
    uint64_t v19 = v4;
    uint64_t v38 = v9;
    uint64_t v9 = (uint64_t)(v13 + 13);
    double v20 = (void (*)(char *, void, uint64_t))v13[13];
    v20((char *)&v34 - v17, enum case for DynamicTypeSize.small(_:), v12);
    v20(v16, enum case for DynamicTypeSize.xxxLarge(_:), v12);
    sub_1000776FC(&qword_1000AB068, (void (*)(uint64_t))&type metadata accessor for DynamicTypeSize);
    if (dispatch thunk of static Comparable.<= infix(_:_:)())
    {
      uint64_t v21 = *(int *)(v19 + 48);
      uint64_t v35 = v19;
      CGRect v36 = v11;
      double v22 = v8;
      uint64_t v34 = v8;
      CGRect v23 = &v8[v21];
      CGRect v24 = (void (*)(char *, char *, uint64_t))v13[4];
      v24(v22, v18, v12);
      v24(v23, v16, v12);
      id v25 = v39;
      double v26 = &v39[*(int *)(v19 + 48)];
      uint64_t v37 = a2;
      CGFloat v27 = (void (*)(char *, char *, uint64_t))v13[2];
      double v28 = v34;
      v27(v39, v34, v12);
      v27(v26, v23, v12);
      uint64_t v29 = (uint64_t)v36;
      v24(v36, v25, v12);
      double v30 = (void (*)(char *, uint64_t))v13[1];
      v30(v26, v12);
      CGFloat v31 = &v25[*(int *)(v35 + 48)];
      v24(v25, v28, v12);
      v24(v31, v23, v12);
      v24((char *)(v29 + *(int *)(v38 + 36)), v31, v12);
      v30(v25, v12);
      return sub_100077744(v29, v37);
    }
    __break(1u);
    goto LABEL_7;
  }
  if (qword_1000A82B0 != -1) {
LABEL_7:
  }
    swift_once();
  uint64_t v33 = sub_100023AD0(v9, (uint64_t)qword_1000AB6F0);
  return sub_100009E70(v33, a2, &qword_1000AA810);
}

uint64_t sub_1000756F8()
{
  return sub_100075718((void (*)(void))sub_1000702D0);
}

uint64_t sub_100075718(void (*a1)(void))
{
  a1();
  EnvironmentValues.subscript.getter();
  return v2;
}

void sub_100075760()
{
  id v0 = [self mainBundle];
  id v1 = [v0 bundleIdentifier];

  if (v1)
  {
    uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v4 = v3;

    qword_1000AAF50 = v2;
    *(void *)algn_1000AAF58 = v4;
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000757EC()
{
  if (qword_1000A8298 != -1) {
    swift_once();
  }
  String.utf8CString.getter();
  char has_internal_content = os_variant_has_internal_content();
  uint64_t result = swift_release();
  byte_1000AB6D0 = has_internal_content;
  return result;
}

uint64_t sub_100075868()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100076B3C(v0, qword_1000AB6D8);
  sub_100023AD0(v0, (uint64_t)qword_1000AB6D8);
  if (qword_1000A8298 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100075924()
{
  uint64_t v33 = sub_10000435C(&qword_1000AB060);
  uint64_t v0 = __chkstk_darwin(v33);
  uint64_t v2 = (char *)&v26 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v26 - v3;
  uint64_t v5 = sub_10000435C(&qword_1000AA810);
  __chkstk_darwin(v5);
  CGFloat v31 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DynamicTypeSize();
  CGFloat v8 = *(void **)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  BOOL v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v26 - v12;
  sub_100076B3C(v5, qword_1000AB6F0);
  uint64_t v32 = sub_100023AD0(v5, (uint64_t)qword_1000AB6F0);
  uint64_t v14 = (void (*)(char *, void, uint64_t))v8[13];
  v14(v13, enum case for DynamicTypeSize.small(_:), v7);
  v14(v11, enum case for DynamicTypeSize.xxLarge(_:), v7);
  sub_1000776FC(&qword_1000AB068, (void (*)(uint64_t))&type metadata accessor for DynamicTypeSize);
  uint64_t v15 = v13;
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    uint64_t v17 = v33;
    uint64_t v18 = &v4[*(int *)(v33 + 48)];
    uint64_t v29 = v5;
    double v30 = v13;
    uint64_t v19 = (void (*)(char *, char *, uint64_t))v8[2];
    v19(v4, v15, v7);
    v19(v18, v11, v7);
    double v20 = &v2[*(int *)(v17 + 48)];
    v19(v2, v4, v7);
    v19(v20, v18, v7);
    CGFloat v27 = v4;
    uint64_t v21 = (void (*)(char *, char *, uint64_t))v8[4];
    double v22 = v31;
    v21(v31, v2, v7);
    double v28 = v11;
    uint64_t v23 = (uint64_t)v22;
    CGRect v24 = (void (*)(char *, uint64_t))v8[1];
    v24(v20, v7);
    id v25 = &v2[*(int *)(v33 + 48)];
    v21(v2, v27, v7);
    v21(v25, v18, v7);
    v21((char *)(v23 + *(int *)(v29 + 36)), v25, v7);
    v24(v2, v7);
    sub_100077744(v23, v32);
    v24(v28, v7);
    return ((uint64_t (*)(char *, uint64_t))v24)(v30, v7);
  }
  else
  {
    __break(1u);
  }
  return result;
}

double sub_100075CF0(uint64_t a1, unsigned __int8 a2)
{
  int v2 = a2;
  double v3 = 14.0;
  double v4 = 45.0;
  double v6 = 44.0;
  switch(a2)
  {
    case 1u:
    case 3u:
      goto LABEL_5;
    case 2u:
    case 4u:
      id v7 = [self mainScreen];
      [v7 _referenceBounds];
      CGFloat v9 = v8;
      CGFloat v11 = v10;
      CGFloat v13 = v12;
      CGFloat v15 = v14;

      v21.origin.x = v9;
      v21.origin.y = v11;
      v21.size.width = v13;
      v21.size.height = v15;
      if (CGRectGetHeight(v21) > 667.0) {
        double v6 = 50.0;
      }
      else {
        double v6 = 45.0;
      }
LABEL_5:
      double v3 = 8.0;
      if ((v2 - 2) < 3) {
        double v3 = 10.0;
      }
      double v4 = v6;
      break;
    default:
      break;
  }
  if (a1 <= 1) {
    uint64_t v16 = 1;
  }
  else {
    uint64_t v16 = a1;
  }
  BOOL v17 = v2 == 4 || v2 == 1;
  double v18 = v4 * (double)v16 + ((double)v16 + -1.0) * v3;
  double v19 = 32.0;
  if (v17) {
    double v19 = 40.0;
  }
  return v19 + v18;
}

void sub_100075E54(uint64_t a1, unsigned __int8 a2)
{
  if (a2 - 2 < 3)
  {
    id v2 = [self mainScreen];
    [v2 _referenceBounds];
    CGFloat v4 = v3;
    CGFloat v6 = v5;
    CGFloat v8 = v7;
    CGFloat v10 = v9;

    v11.origin.x = v4;
    v11.origin.y = v6;
    v11.size.width = v8;
    v11.size.height = v10;
    CGRectGetHeight(v11);
  }
}

void sub_100075F4C()
{
  qword_1000AB708 = 0x407F400000000000;
}

BOOL sub_100075F60(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_100075F74()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100075FBC()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100075FE8()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

double sub_10007602C()
{
  double result = 0.0;
  xmmword_1000AAF60 = 0u;
  *(_OWORD *)algn_1000AAF70 = 0u;
  return result;
}

double sub_100076040@<D0>(_OWORD *a1@<X8>)
{
  if (qword_1000A82C0 != -1) {
    swift_once();
  }
  double result = *(double *)&xmmword_1000AAF60;
  long long v3 = *(_OWORD *)algn_1000AAF70;
  *a1 = xmmword_1000AAF60;
  a1[1] = v3;
  return result;
}

uint64_t sub_1000760A8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for NamedCoordinateSpace();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  double v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = static Color.clear.getter();
  v20[0] = a1;
  v20[1] = a2;
  static CoordinateSpaceProtocol<>.named<A>(_:)();
  GeometryProxy.frame<A>(in:)();
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  *a3 = v10;
  a3[1] = v12;
  a3[2] = v14;
  a3[3] = v16;
  a3[4] = v18;
  return result;
}

uint64_t sub_1000761F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = *v2;
  uint64_t v5 = v2[1];
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v6;
  *(void *)(v7 + 24) = v5;
  swift_bridgeObjectRetain();
  uint64_t v8 = static Alignment.center.getter();
  uint64_t v10 = v9;
  uint64_t v11 = sub_10000435C(&qword_1000AB0B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(a2, a1, v11);
  uint64_t result = sub_10000435C(&qword_1000AB0C0);
  uint64_t v13 = (uint64_t (**)@<X0>(uint64_t *@<X8>))(a2 + *(int *)(result + 36));
  char *v13 = sub_100077998;
  v13[1] = (uint64_t (*)@<X0>(uint64_t *@<X8>))v7;
  void v13[2] = (uint64_t (*)@<X0>(uint64_t *@<X8>))v8;
  _OWORD v13[3] = v10;
  return result;
}

uint64_t sub_1000762C4(double *a1, uint64_t (*a2)(double, double, double, double))
{
  return a2(*a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_1000762F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000435C(&qword_1000AB0B0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000435C(&qword_1000AB098);
  __chkstk_darwin(v7);
  double v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = sub_100076560();
  if (v10)
  {
    id v11 = v10;
    uint64_t v12 = Font.init(_:)();
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v14 = sub_10000435C(&qword_1000AB0A8);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v9, a2, v14);
    uint64_t v15 = (uint64_t *)&v9[*(int *)(v7 + 36)];
    uint64_t *v15 = KeyPath;
    v15[1] = v12;
    sub_100009E70((uint64_t)v9, (uint64_t)v6, &qword_1000AB098);
    swift_storeEnumTagMultiPayload();
    sub_100077894();
    _ConditionalContent<>.init(storage:)();
  }
  else
  {
    uint64_t v16 = *(void *)(a1 + 8);
    uint64_t v17 = swift_getKeyPath();
    uint64_t v18 = sub_10000435C(&qword_1000AB0A8);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v9, a2, v18);
    double v19 = (uint64_t *)&v9[*(int *)(v7 + 36)];
    *double v19 = v17;
    v19[1] = v16;
    sub_100009E70((uint64_t)v9, (uint64_t)v6, &qword_1000AB098);
    swift_storeEnumTagMultiPayload();
    sub_100077894();
    swift_retain();
    _ConditionalContent<>.init(storage:)();
  }
  return sub_100009ED4((uint64_t)v9, &qword_1000AB098);
}

id sub_100076560()
{
  Swift::UInt v1 = *(void **)v0;
  if (!*(void *)v0) {
    return 0;
  }
  id v2 = self;
  id v3 = v1;
  id v4 = [v2 defaultMetrics];
  double v5 = *(double *)(v0 + 16);
  id v6 = [v4 scaledFontForFont:v3 maximumPointSize:v5];

  if ((*(unsigned char *)(v0 + 32) & 1) == 0)
  {
    double v7 = *(double *)(v0 + 24);
    id v8 = [v2 defaultMetrics];
    [v8 scaledValueForValue:v7];
    double v10 = v9;

    if (v5 < v10)
    {
      id v11 = [v2 defaultMetrics];
      [v3 pointSize];
      id v13 = [v3 fontWithSize:v5 / v10 * v12];
      id v14 = [v11 scaledFontForFont:v13];

      id v3 = v6;
      id v6 = v14;
    }
  }

  return v6;
}

uint64_t sub_1000766CC(uint64_t a1)
{
  uint64_t v3 = sub_10000435C(&qword_1000AB070);
  __chkstk_darwin(v3);
  double v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000762F4(v1, a1);
  if (qword_1000A82B0 != -1) {
    swift_once();
  }
  uint64_t v6 = sub_10000435C(&qword_1000AA810);
  sub_100023AD0(v6, (uint64_t)qword_1000AB6F0);
  sub_1000777AC();
  sub_10000A368(&qword_1000AA820, &qword_1000AA810);
  View.dynamicTypeSize<A>(_:)();
  return sub_100009ED4((uint64_t)v5, &qword_1000AB070);
}

id sub_100076820(int a1)
{
  id v3 = [v1 fontDescriptor];
  id v4 = [v11 fontDescriptor];
  unsigned int v5 = [v4 symbolicTraits];

  if ((a1 & ~v5) != 0) {
    uint64_t v6 = v5 | a1;
  }
  else {
    uint64_t v6 = v5 & ~a1;
  }
  id v7 = [v3 fontDescriptorWithSymbolicTraits:v6];

  if (v7)
  {
    [v11 pointSize];
    id v9 = [self fontWithDescriptor:v7 size:v8];

    return v9;
  }
  else
  {
    return v11;
  }
}

void sub_10007694C(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
}

uint64_t sub_10007695C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = sub_100076C44();

  return static EnvironmentKey<>._valuesEqual(_:_:)(a1, a2, a3, a4, v8);
}

void sub_1000769C0()
{
  qword_1000AB710 = 0;
}

double sub_1000769CC@<D0>(void *a1@<X8>)
{
  return sub_100076A84(&qword_1000A82C8, (double *)&qword_1000AB710, a1);
}

uint64_t sub_1000769F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = sub_100076BF0();

  return static EnvironmentKey<>._valuesEqual(_:_:)(a1, a2, a3, a4, v8);
}

void sub_100076A54()
{
  qword_1000AB718 = 0;
}

double sub_100076A60@<D0>(void *a1@<X8>)
{
  return sub_100076A84(&qword_1000A82D0, (double *)&qword_1000AB718, a1);
}

double sub_100076A84@<D0>(void *a1@<X2>, double *a2@<X3>, void *a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  double result = *a2;
  *a3 = *(void *)a2;
  return result;
}

uint64_t sub_100076ACC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static EnvironmentKey<>._valuesEqual(_:_:)(a1, a2, a3, a4, &protocol witness table for Bool);
}

uint64_t sub_100076AD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = sub_100074654();

  return static EnvironmentKey<>._valuesEqual(_:_:)(a1, a2, a3, a4, v8);
}

uint64_t *sub_100076B3C(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

ValueMetadata *type metadata accessor for TFUIConfigKey()
{
  return &type metadata for TFUIConfigKey;
}

ValueMetadata *type metadata accessor for TFEffectiveComponentSizeKey()
{
  return &type metadata for TFEffectiveComponentSizeKey;
}

ValueMetadata *type metadata accessor for TFComponentWidthKey()
{
  return &type metadata for TFComponentWidthKey;
}

ValueMetadata *type metadata accessor for TFComponentColumnWidthKey()
{
  return &type metadata for TFComponentColumnWidthKey;
}

ValueMetadata *type metadata accessor for TFComponentSpansWidthKey()
{
  return &type metadata for TFComponentSpansWidthKey;
}

unint64_t sub_100076BF0()
{
  unint64_t result = qword_1000AAF88;
  if (!qword_1000AAF88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AAF88);
  }
  return result;
}

unint64_t sub_100076C44()
{
  unint64_t result = qword_1000AAF90;
  if (!qword_1000AAF90)
  {
    sub_100003F9C(&qword_1000AAF98);
    sub_1000776FC(&qword_1000A85E8, type metadata accessor for ComponentSize);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AAF90);
  }
  return result;
}

uint64_t sub_100076CE8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100076D20(double *a1)
{
  return (*(uint64_t (**)(double, double, double, double))(v1 + 16))(*a1, a1[1], a1[2], a1[3]);
}

unint64_t sub_100076D50()
{
  unint64_t result = qword_1000AAFA0;
  if (!qword_1000AAFA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AAFA0);
  }
  return result;
}

ValueMetadata *type metadata accessor for TFReducedComponentCornerSizeKey()
{
  return &type metadata for TFReducedComponentCornerSizeKey;
}

char *sub_100076DB4(char *a1, char **a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  unsigned int v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = &v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain();
  }
  else
  {
    uint64_t v6 = a2[2];
    *((void *)a1 + 1) = a2[1];
    *((void *)a1 + 2) = v6;
    *((void *)a1 + 3) = a2[3];
    a1[32] = *((unsigned char *)a2 + 32);
    uint64_t v7 = *(int *)(a3 + 32);
    unint64_t v8 = &a1[v7];
    id v9 = (char **)((char *)a2 + v7);
    double v10 = v5;
    swift_retain();
    sub_10000435C(&qword_1000A9A98);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = type metadata accessor for ContentSizeCategory();
      (*(void (**)(char *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(v8, v9, v11);
    }
    else
    {
      *(void *)unint64_t v8 = *v9;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_100076EEC(id *a1, uint64_t a2)
{
  swift_release();
  int v4 = (char *)a1 + *(int *)(a2 + 32);
  sub_10000435C(&qword_1000A9A98);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for ContentSizeCategory();
    uint64_t v6 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8);
    return v6(v4, v5);
  }
  else
  {
    return swift_release();
  }
}

uint64_t sub_100076FAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = *(void **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v7 = *(int *)(a3 + 32);
  unint64_t v8 = (void *)(a1 + v7);
  id v9 = (void *)(a2 + v7);
  id v10 = v4;
  swift_retain();
  sub_10000435C(&qword_1000A9A98);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = type metadata accessor for ContentSizeCategory();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(v8, v9, v11);
  }
  else
  {
    *unint64_t v8 = *v9;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_10007708C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v8 = v7;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24) = v9;
  if (a1 != a2)
  {
    uint64_t v10 = *(int *)(a3 + 32);
    uint64_t v11 = (void *)(a1 + v10);
    double v12 = (void *)(a2 + v10);
    sub_100009ED4(a1 + v10, &qword_1000A9A98);
    sub_10000435C(&qword_1000A9A98);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = type metadata accessor for ContentSizeCategory();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    }
    else
    {
      *uint64_t v11 = *v12;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1000771AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = (void *)(a1 + v4);
  uint64_t v6 = (const void *)(a2 + v4);
  uint64_t v7 = sub_10000435C(&qword_1000A9A98);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for ContentSizeCategory();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(v5, v6, v8);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v5, v6, *(void *)(*(void *)(v7 - 8) + 64));
  }
  return a1;
}

uint64_t sub_100077298(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  if (a1 != a2)
  {
    uint64_t v7 = *(int *)(a3 + 32);
    uint64_t v8 = (void *)(a1 + v7);
    uint64_t v9 = (const void *)(a2 + v7);
    sub_100009ED4(a1 + v7, &qword_1000A9A98);
    uint64_t v10 = sub_10000435C(&qword_1000A9A98);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = type metadata accessor for ContentSizeCategory();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000773BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000773D0);
}

uint64_t sub_1000773D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10000435C(&qword_1000AAFB0);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 32);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100077484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100077498);
}

uint64_t sub_100077498(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_10000435C(&qword_1000AAFB0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 32);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for TFFontModifier()
{
  uint64_t result = qword_1000AB010;
  if (!qword_1000AB010) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100077590()
{
  sub_10007764C();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_10007764C()
{
  if (!qword_1000AB020)
  {
    type metadata accessor for ContentSizeCategory();
    unint64_t v0 = type metadata accessor for Environment.Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1000AB020);
    }
  }
}

ValueMetadata *type metadata accessor for TFFrameTrackerKey()
{
  return &type metadata for TFFrameTrackerKey;
}

ValueMetadata *type metadata accessor for TFFrameTracker()
{
  return &type metadata for TFFrameTracker;
}

uint64_t sub_1000776C4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000776E0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000776FC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100077744(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000435C(&qword_1000AA810);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000777AC()
{
  unint64_t result = qword_1000AB078;
  if (!qword_1000AB078)
  {
    sub_100003F9C(&qword_1000AB070);
    sub_100077820();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AB078);
  }
  return result;
}

unint64_t sub_100077820()
{
  unint64_t result = qword_1000AB080;
  if (!qword_1000AB080)
  {
    sub_100003F9C(&qword_1000AB088);
    sub_100077894();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AB080);
  }
  return result;
}

unint64_t sub_100077894()
{
  unint64_t result = qword_1000AB090;
  if (!qword_1000AB090)
  {
    sub_100003F9C(&qword_1000AB098);
    sub_10000A368(&qword_1000AB0A0, &qword_1000AB0A8);
    sub_10000A368((unint64_t *)&unk_1000AADC0, &qword_1000A9D10);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AB090);
  }
  return result;
}

uint64_t sub_100077960()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100077998@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000760A8(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

ValueMetadata *type metadata accessor for TFComponentIsHoveredKey()
{
  return &type metadata for TFComponentIsHoveredKey;
}

uint64_t sub_1000779B0()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_100077A58()
{
  unint64_t result = qword_1000AB0C8;
  if (!qword_1000AB0C8)
  {
    sub_100003F9C(&qword_1000AB0C0);
    sub_10000A368(&qword_1000AB0D0, &qword_1000AB0B8);
    sub_10000A368(&qword_1000AB0D8, &qword_1000AB0E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000AB0C8);
  }
  return result;
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return self;
}

void sub_100077B44()
{
  id v1 = +[LSApplicationWorkspace defaultWorkspace];
  id v0 = [objc_alloc((Class)NSURL) initWithString:@"settings-navigation://com.apple.Settings.General/FONT_SETTING"];
  [v1 openSensitiveURL:v0 withOptions:0];
}

id sub_100077CB0()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)qword_1000AE9A0;
  uint64_t v7 = qword_1000AE9A0;
  if (!qword_1000AE9A0)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_10007D1D8;
    v3[3] = &unk_1000A1050;
    v3[4] = &v4;
    sub_10007D1D8((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_100077D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000780CC(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  double v3 = *(double *)(a1 + 40);
  [v2 size];
  double v5 = (v3 - v4) * 0.5;
  double v6 = *(double *)(a1 + 48);
  [*(id *)(a1 + 32) size];
  double v8 = (v6 - v7) * 0.5;
  [*(id *)(a1 + 32) size];
  double v10 = v9;
  [*(id *)(a1 + 32) size];

  return [v2 drawInRect:v5, v8, v10, v11];
}

void sub_100078518(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 count])
  {
    uint64_t v4 = +[NSMutableDictionary dictionaryWithCapacity:1];
    uint64_t v5 = *(void *)(a1 + 32);
    double v6 = *(void **)(v5 + 448);
    *(void *)(v5 + 448) = v4;

    uint64_t v7 = +[NSMutableArray arrayWithCapacity:1];
    uint64_t v8 = *(void *)(a1 + 32);
    double v9 = *(void **)(v8 + 456);
    *(void *)(v8 + 456) = v7;

    [*(id *)(*(void *)(a1 + 32) + 456) addObject:&off_1000A1610];
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    id v20 = v3;
    obuint64_t j = v3;
    id v10 = [obj countByEnumeratingWithState:&v22 objects:v26 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v23;
      do
      {
        uint64_t v13 = 0;
        do
        {
          if (*(void *)v23 != v12) {
            objc_enumerationMutation(obj);
          }
          uint64_t v14 = *(void *)(*((void *)&v22 + 1) + 8 * (void)v13);
          id v15 = objc_alloc((Class)_UIFontPickerFontInfo);
          +[UIFont defaultFontSize];
          uint64_t v16 = +[UIFont fontWithName:size:](UIFont, "fontWithName:size:", v14);
          uint64_t v17 = [v16 fontDescriptor];
          id v18 = [v15 initWithFontDescriptor:v17];

          if ([v18 matchesConfiguration:*(void *)(*(void *)(a1 + 32) + 504)])
          {
            double v19 = [*(id *)(*(void *)(a1 + 32) + 448) objectForKeyedSubscript:&off_1000A1610];
            if (!v19)
            {
              double v19 = +[NSMutableArray array];
              [*(id *)(*(void *)(a1 + 32) + 448) setObject:v19 forKey:&off_1000A1610];
            }
            [v19 addObject:v18, v20];
          }
          uint64_t v13 = (char *)v13 + 1;
        }
        while (v11 != v13);
        id v11 = [obj countByEnumeratingWithState:&v22 objects:v26 count:16];
      }
      while (v11);
    }

    id v3 = v20;
  }
}

void sub_100078770(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_100078A10;
  v24[3] = &unk_1000A0E08;
  void v24[4] = *(void *)(a1 + 40);
  [v2 enumerateFontFamilyNamesUsingBlock:v24];
  [*(id *)(*(void *)(a1 + 40) + 456) sortUsingSelector:"compare:"];
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  obuint64_t j = *(id *)(*(void *)(a1 + 40) + 456);
  id v3 = [obj countByEnumeratingWithState:&v20 objects:v25 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v21;
    do
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v21 != v5) {
          objc_enumerationMutation(obj);
        }
        uint64_t v7 = *(void *)(*((void *)&v20 + 1) + 8 * i);
        uint64_t v8 = *(void *)(a1 + 40);
        double v9 = *(void **)(v8 + 440);
        id v10 = [*(id *)(v8 + 448) objectForKeyedSubscript:v7];
        id v11 = [v9 sortedArrayFromArray:v10 collationStringSelector:"localizedFamilyName"];
        [*(id *)(*(void *)(a1 + 40) + 448) setObject:v11 forKeyedSubscript:v7];
      }
      id v4 = [obj countByEnumeratingWithState:&v20 objects:v25 count:16];
    }
    while (v4);
  }

  uint64_t v12 = [*(id *)(a1 + 40) _loadRecents];
  [*(id *)(*(void *)(a1 + 40) + 448) setObject:v12 forKeyedSubscript:&off_1000A1628];

  uint64_t v13 = *(void *)(a1 + 40);
  uint64_t v14 = *(void **)(v13 + 536);
  id v15 = [*(id *)(v13 + 448) objectForKeyedSubscript:&off_1000A1628];
  [v14 _setRecents:v15];

  uint64_t v16 = *(id **)(a1 + 40);
  uint64_t v17 = [v16[56] objectForKeyedSubscript:&off_1000A1628];
  [v16 _setRecentsHidden:[v17 count] == 0];

  id v18 = [*(id *)(a1 + 40) _loadSystemExtras];
  [*(id *)(*(void *)(a1 + 40) + 448) setObject:v18 forKeyedSubscript:&off_1000A1640];
}

void sub_100078A10(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v16 = [objc_alloc((Class)_UIFontPickerFontInfo) initWithFamilyName:v6];

  id v7 = [v5 count];
  [v16 setHasMultipleFaces:(unint64_t)v7 > 1];
  if ([v16 matchesConfiguration:*(void *)(*(void *)(a1 + 32) + 504)])
  {
    id v8 = [*(id *)(*(void *)(a1 + 32) + 440) sectionForObject:v16 collationStringSelector:"localizedFamilyName"];
    double v9 = *(void **)(*(void *)(a1 + 32) + 448);
    id v10 = +[NSNumber numberWithInteger:v8];
    id v11 = [v9 objectForKeyedSubscript:v10];

    if (!v11)
    {
      id v11 = +[NSMutableArray array];
      uint64_t v12 = *(void **)(*(void *)(a1 + 32) + 448);
      uint64_t v13 = +[NSNumber numberWithInteger:v8];
      [v12 setObject:v11 forKey:v13];

      uint64_t v14 = *(void **)(*(void *)(a1 + 32) + 456);
      id v15 = +[NSNumber numberWithInteger:v8];
      [v14 addObject:v15];
    }
    [v11 addObject:v16];
  }
}

void sub_10007940C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *location)
{
  objc_destroyWeak(v11);
  objc_destroyWeak((id *)(v12 - 192));
  _Unwind_Resume(a1);
}

void sub_100079458(uint64_t a1, void *a2)
{
  id v3 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v7 = v3;
    id v5 = +[NSArray arrayWithObjects:&v7 count:1];
    [WeakRetained _setSelectedFonts:v5 scrollToVisible:0 updatingRecentsSection:1];

    id v6 = objc_loadWeakRetained(WeakRetained + 72);
    [v6 _pickerDidSelectFont:v3];
  }
}

void sub_10007952C(uint64_t a1)
{
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v6 = WeakRetained;
    [WeakRetained _loadFonts];
    id v2 = [v6[60] searchBar];
    id v3 = [v2 text];

    if ([v3 length])
    {
      id v4 = v6[61];
      id v5 = [v6 _fontsForSearchTerm:v3];
      [v4 _setResultFonts:v5];
    }
    WeakRetained = v6;
  }
}

uint64_t sub_100079F74(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = [*(id *)(a1 + 32) _indexPathForFont:a2 fontInfo:0];
  if (v3) {
    [*(id *)(a1 + 40) addObject:v3];
  }

  return _objc_release_x1();
}

void sub_100079FDC(uint64_t a1)
{
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_10007A240;
  v24[3] = &unk_1000A0ED0;
  id v2 = *(void **)(a1 + 32);
  id v25 = *(id *)(a1 + 40);
  [v2 enumerateObjectsUsingBlock:v24];
  if ([*(id *)(a1 + 40) count])
  {
    uint64_t v3 = *(void *)(a1 + 48);
    id v4 = *(id *)(a1 + 40);
    id v5 = *(void **)(v3 + 472);
    *(void *)(v3 + 472) = v4;
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 48);
    id v5 = *(void **)(v6 + 472);
    *(void *)(v6 + 472) = 0;
  }

  id v7 = *(void **)(a1 + 48);
  if (v7[58])
  {
    id v8 = [v7 tableView];
    double v9 = v8;
    if (*(unsigned char *)(a1 + 64)) {
      uint64_t v10 = 5;
    }
    else {
      uint64_t v10 = 0;
    }
    [v8 reloadRowsAtIndexPaths:*(void *)(*(void *)(a1 + 48) + 464) withRowAnimation:v10];
  }
  if ([*(id *)(a1 + 56) count])
  {
    objc_storeStrong((id *)(*(void *)(a1 + 48) + 464), *(id *)(a1 + 56));
    if (*(unsigned char *)(a1 + 64))
    {
      id v11 = [*(id *)(a1 + 56) firstObject];

      if (v11)
      {
        uint64_t v12 = [*(id *)(a1 + 48) tableView];
        uint64_t v13 = [*(id *)(a1 + 56) firstObject];
        [v12 scrollToRowAtIndexPath:v13 atScrollPosition:1 animated:0];
      }
    }
    uint64_t v14 = [*(id *)(a1 + 48) tableView];
    id v15 = v14;
    if (*(unsigned char *)(a1 + 64)) {
      uint64_t v16 = 5;
    }
    else {
      uint64_t v16 = 0;
    }
    [v14 reloadRowsAtIndexPaths:*(void *)(a1 + 56) withRowAnimation:v16];
  }
  else
  {
    uint64_t v17 = *(void *)(a1 + 48);
    id v15 = *(void **)(v17 + 464);
    *(void *)(v17 + 464) = 0;
  }

  id v18 = [*(id *)(a1 + 48) _selectedFontsForCurrentConfiguration];
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  _OWORD v22[2] = sub_10007A2B8;
  v22[3] = &unk_1000A0EF8;
  char v23 = *(unsigned char *)(a1 + 65);
  v22[4] = *(void *)(a1 + 48);
  [v18 enumerateObjectsWithOptions:2 usingBlock:v22];

  double v19 = *(void **)(a1 + 48);
  long long v20 = (void *)v19[67];
  long long v21 = [v19 _selectedFontsForCurrentConfiguration];
  [v20 _setSelectedFontsInfo:v21];
}

void sub_10007A240(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [objc_alloc((Class)_UIFontPickerFontInfo) initWithFontDescriptor:v3];

  [*(id *)(a1 + 32) addObject:v4];
}

void sub_10007A2B8(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (([v4 isSystemFont] & 1) == 0)
  {
    id v3 = *(void **)(a1 + 32);
    if (*(unsigned char *)(a1 + 40)) {
      [v3 _addToRecents:v4];
    }
    else {
      [v3 _persistToRecents:v4];
    }
  }
}

uint64_t sub_10007A3CC(uint64_t a1)
{
  return __UIFontPickerPersistToRecents(*(void *)(a1 + 32));
}

void sub_10007A630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10007A648(uint64_t a1, void *a2)
{
  id result = [a2 count];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = (unint64_t)result > 1;
  return result;
}

void sub_10007AC00(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [a2 familyInfo];
  [v2 addObject:v3];
}

void sub_10007B6C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10007B6DC(void *a1)
{
  id v1 = (void *)a1[4];
  uint64_t v2 = a1[5];
  id v3 = [*(id *)(a1[6] + 504) displayUsingSystemFont];

  return _[v1 setFontInfo:v2 usingSystemFont:v3];
}

void sub_10007B72C(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v6 = a2;
  int v7 = *(unsigned __int8 *)(a1 + 48);
  id v9 = v6;
  id v8 = v6;
  if (!*(unsigned char *)(a1 + 48))
  {
    id v8 = [v6 familyInfo];
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v8 isEqual:*(void *)(a1 + 32)];
  if (!v7) {

  }
  *a4 = *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
}

id sub_10007C680(void *a1)
{
  id v1 = (void *)a1[4];
  uint64_t v2 = a1[5];
  id v3 = [*(id *)(a1[6] + 448) displayUsingSystemFont];

  return _[v1 setFontInfo:v2 usingSystemFont:v3];
}

Class sub_10007D1D8(uint64_t a1)
{
  v6[0] = 0;
  if (!qword_1000AE9A8)
  {
    v6[1] = _NSConcreteStackBlock;
    v6[2] = (void *)3221225472;
    v6[3] = sub_10007D3C4;
    v6[4] = &unk_1000A1088;
    v6[5] = v6;
    long long v7 = off_1000A1070;
    uint64_t v8 = 0;
    qword_1000AE9A8 = _sl_dlopen();
  }
  if (!qword_1000AE9A8)
  {
    id v3 = +[NSAssertionHandler currentHandler];
    id v4 = +[NSString stringWithUTF8String:"void *FontServicesLibrary(void)"];
    [v3 handleFailureInFunction:v4 file:@"_UIFontPickerContentViewController.m" lineNumber:35 description:@"%s" v6[0]];

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("FontPickerClientFontContext");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = +[NSAssertionHandler currentHandler];
    id v5 = +[NSString stringWithUTF8String:"Class getFontPickerClientFontContextClass(void)_block_invoke"];
    [v3 handleFailureInFunction:v5 file:@"_UIFontPickerContentViewController.m" lineNumber:36 description:@"Unable to find class %s" FontPickerClientFontContext];

LABEL_10:
    __break(1u);
  }
  qword_1000AE9A0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_10007D3C4()
{
  uint64_t result = _sl_dlopen();
  qword_1000AE9A8 = result;
  return result;
}

uint64_t AttributeScopes.UIKitAttributes.font.getter()
{
  return AttributeScopes.UIKitAttributes.font.getter();
}

uint64_t type metadata accessor for AttributeScopes.UIKitAttributes()
{
  return type metadata accessor for AttributeScopes.UIKitAttributes();
}

uint64_t AttributeScopes.uiKit.getter()
{
  return AttributeScopes.uiKit.getter();
}

uint64_t AttributeContainer.subscript.getter()
{
  return AttributeContainer.subscript.getter();
}

uint64_t type metadata accessor for AttributeContainer()
{
  return type metadata accessor for AttributeContainer();
}

uint64_t _convertNSErrorToError(_:)()
{
  return _convertNSErrorToError(_:)();
}

uint64_t type metadata accessor for LocalizedStringResource()
{
  return type metadata accessor for LocalizedStringResource();
}

uint64_t ScopedAttributeContainer.subscript.getter()
{
  return ScopedAttributeContainer.subscript.getter();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)Data._bridgeToObjectiveC()();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Data._unconditionallyBridgeFromObjectiveC(_:)();
}

NSLocale __swiftcall Locale._bridgeToObjectiveC()()
{
  return (NSLocale)Locale._bridgeToObjectiveC()();
}

uint64_t static Locale.current.getter()
{
  return static Locale.current.getter();
}

uint64_t type metadata accessor for Locale()
{
  return type metadata accessor for Locale();
}

uint64_t os_log(_:dso:log:_:_:)()
{
  return os_log(_:dso:log:_:_:)();
}

uint64_t Logger.logObject.getter()
{
  return Logger.logObject.getter();
}

uint64_t Logger.init(subsystem:category:)()
{
  return Logger.init(subsystem:category:)();
}

uint64_t type metadata accessor for Logger()
{
  return type metadata accessor for Logger();
}

uint64_t UIApplicationMain(_:_:_:_:)()
{
  return UIApplicationMain(_:_:_:_:)();
}

uint64_t AnyCancellable.store(in:)()
{
  return AnyCancellable.store(in:)();
}

uint64_t static ObservableObject.environmentStore.getter()
{
  return static ObservableObject.environmentStore.getter();
}

uint64_t ObservableObject<>.objectWillChange.getter()
{
  return ObservableObject<>.objectWillChange.getter();
}

uint64_t Published.init(initialValue:)()
{
  return Published.init(initialValue:)();
}

uint64_t static Published.subscript.modify()
{
  return static Published.subscript.modify();
}

uint64_t static Published.subscript.getter()
{
  return static Published.subscript.getter();
}

uint64_t static Published.subscript.setter()
{
  return static Published.subscript.setter();
}

uint64_t type metadata accessor for Published()
{
  return type metadata accessor for Published();
}

uint64_t Publisher<>.sink(receiveValue:)()
{
  return Publisher<>.sink(receiveValue:)();
}

uint64_t static EdgeInsets.== infix(_:_:)()
{
  return static EdgeInsets.== infix(_:_:)();
}

uint64_t EdgeInsets.init(_all:)()
{
  return EdgeInsets.init(_all:)();
}

uint64_t ScrollView.init(_:showsIndicators:content:)()
{
  return ScrollView.init(_:showsIndicators:content:)();
}

uint64_t ColorPicker.init(selection:supportsOpacity:label:)()
{
  return ColorPicker.init(selection:supportsOpacity:label:)();
}

uint64_t static ColorScheme.== infix(_:_:)()
{
  return static ColorScheme.== infix(_:_:)();
}

uint64_t type metadata accessor for ColorScheme()
{
  return type metadata accessor for ColorScheme();
}

uint64_t type metadata accessor for Environment.Content()
{
  return type metadata accessor for Environment.Content();
}

uint64_t static HoverEffect.lift.getter()
{
  return static HoverEffect.lift.getter();
}

uint64_t static HoverEffect.automatic.getter()
{
  return static HoverEffect.automatic.getter();
}

uint64_t static HoverEffect.highlight.getter()
{
  return static HoverEffect.highlight.getter();
}

uint64_t type metadata accessor for HoverEffect()
{
  return type metadata accessor for HoverEffect();
}

uint64_t StateObject.wrappedValue.getter()
{
  return StateObject.wrappedValue.getter();
}

uint64_t StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)()
{
  return StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
}

uint64_t Transaction.animation.setter()
{
  return Transaction.animation.setter();
}

uint64_t static ViewModifier._makeView(modifier:inputs:body:)()
{
  return static ViewModifier._makeView(modifier:inputs:body:)();
}

uint64_t static ViewModifier._makeViewList(modifier:inputs:body:)()
{
  return static ViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t static ViewModifier._viewListCount(inputs:body:)()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

uint64_t _FrameLayout.init(width:height:alignment:)()
{
  return _FrameLayout.init(width:height:alignment:)();
}

uint64_t AnyShapeStyle.init<A>(_:)()
{
  return AnyShapeStyle.init<A>(_:)();
}

uint64_t GeometryProxy.frame<A>(in:)()
{
  return GeometryProxy.frame<A>(in:)();
}

uint64_t ImageRenderer.uiImage.getter()
{
  return ImageRenderer.uiImage.getter();
}

uint64_t ImageRenderer.init(content:)()
{
  return ImageRenderer.init(content:)();
}

uint64_t static PreferenceKey._isReadableByHost.getter()
{
  return static PreferenceKey._isReadableByHost.getter();
}

uint64_t static PreferenceKey._includesRemovedValues.getter()
{
  return static PreferenceKey._includesRemovedValues.getter();
}

uint64_t withAnimation<A>(_:_:)()
{
  return withAnimation<A>(_:_:)();
}

uint64_t ObservedObject.init(wrappedValue:)()
{
  return ObservedObject.init(wrappedValue:)();
}

uint64_t ViewDimensions.subscript.getter()
{
  return ViewDimensions.subscript.getter();
}

uint64_t type metadata accessor for DynamicTypeSize()
{
  return type metadata accessor for DynamicTypeSize();
}

uint64_t ModifiedContent<>.accessibilityRemoveTraits(_:)()
{
  return ModifiedContent<>.accessibilityRemoveTraits(_:)();
}

uint64_t type metadata accessor for ModifiedContent()
{
  return type metadata accessor for ModifiedContent();
}

uint64_t type metadata accessor for RoundedRectangle._Inset()
{
  return type metadata accessor for RoundedRectangle._Inset();
}

uint64_t type metadata accessor for RoundedRectangle()
{
  return type metadata accessor for RoundedRectangle();
}

uint64_t _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)()
{
  return _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
}

uint64_t ButtonToggleStyle.init()()
{
  return ButtonToggleStyle.init()();
}

uint64_t type metadata accessor for ButtonToggleStyle()
{
  return type metadata accessor for ButtonToggleStyle();
}

uint64_t static CustomHoverEffect<>.automatic.getter()
{
  return static CustomHoverEffect<>.automatic.getter();
}

uint64_t static CustomHoverEffect<>.highlight.getter()
{
  return static CustomHoverEffect<>.highlight.getter();
}

uint64_t EnvironmentObject.projectedValue.getter()
{
  return EnvironmentObject.projectedValue.getter();
}

uint64_t EnvironmentObject.error()()
{
  return EnvironmentObject.error()();
}

uint64_t EnvironmentObject.Wrapper.subscript.getter()
{
  return EnvironmentObject.Wrapper.subscript.getter();
}

uint64_t EnvironmentObject.init()()
{
  return EnvironmentObject.init()();
}

uint64_t EnvironmentValues.imageScale.getter()
{
  return EnvironmentValues.imageScale.getter();
}

uint64_t EnvironmentValues.colorScheme.getter()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t EnvironmentValues.sizeCategory.getter()
{
  return EnvironmentValues.sizeCategory.getter();
}

uint64_t EnvironmentValues.truncationMode.getter()
{
  return EnvironmentValues.truncationMode.getter();
}

uint64_t EnvironmentValues.truncationMode.setter()
{
  return EnvironmentValues.truncationMode.setter();
}

uint64_t EnvironmentValues.dynamicTypeSize.getter()
{
  return EnvironmentValues.dynamicTypeSize.getter();
}

uint64_t EnvironmentValues.foregroundColor.getter()
{
  return EnvironmentValues.foregroundColor.getter();
}

uint64_t EnvironmentValues.foregroundColor.setter()
{
  return EnvironmentValues.foregroundColor.setter();
}

uint64_t EnvironmentValues.allowsTightening.getter()
{
  return EnvironmentValues.allowsTightening.getter();
}

uint64_t EnvironmentValues.allowsTightening.setter()
{
  return EnvironmentValues.allowsTightening.setter();
}

uint64_t EnvironmentValues.minimumScaleFactor.getter()
{
  return EnvironmentValues.minimumScaleFactor.getter();
}

uint64_t EnvironmentValues.minimumScaleFactor.setter()
{
  return EnvironmentValues.minimumScaleFactor.setter();
}

uint64_t EnvironmentValues.horizontalSizeClass.getter()
{
  return EnvironmentValues.horizontalSizeClass.getter();
}

uint64_t EnvironmentValues.horizontalSizeClass.setter()
{
  return EnvironmentValues.horizontalSizeClass.setter();
}

uint64_t EnvironmentValues.symbolRenderingMode.getter()
{
  return EnvironmentValues.symbolRenderingMode.getter();
}

uint64_t EnvironmentValues.symbolRenderingMode.setter()
{
  return EnvironmentValues.symbolRenderingMode.setter();
}

uint64_t EnvironmentValues.isHoverEffectEnabled.getter()
{
  return EnvironmentValues.isHoverEffectEnabled.getter();
}

uint64_t EnvironmentValues.isHoverEffectEnabled.setter()
{
  return EnvironmentValues.isHoverEffectEnabled.setter();
}

uint64_t EnvironmentValues.fontResolutionContext.getter()
{
  return EnvironmentValues.fontResolutionContext.getter();
}

uint64_t EnvironmentValues.accessibilityReduceMotion.getter()
{
  return EnvironmentValues.accessibilityReduceMotion.getter();
}

uint64_t EnvironmentValues.accessibilityShowButtonShapes.getter()
{
  return EnvironmentValues.accessibilityShowButtonShapes.getter();
}

uint64_t EnvironmentValues._accessibilityShowButtonShapes.getter()
{
  return EnvironmentValues._accessibilityShowButtonShapes.getter();
}

uint64_t EnvironmentValues._accessibilityShowButtonShapes.setter()
{
  return EnvironmentValues._accessibilityShowButtonShapes.setter();
}

uint64_t EnvironmentValues.font.getter()
{
  return EnvironmentValues.font.getter();
}

uint64_t EnvironmentValues.font.setter()
{
  return EnvironmentValues.font.setter();
}

uint64_t EnvironmentValues.tint.getter()
{
  return EnvironmentValues.tint.getter();
}

uint64_t EnvironmentValues.tint.setter()
{
  return EnvironmentValues.tint.setter();
}

uint64_t EnvironmentValues.isEnabled.getter()
{
  return EnvironmentValues.isEnabled.getter();
}

uint64_t EnvironmentValues.isEnabled.setter()
{
  return EnvironmentValues.isEnabled.setter();
}

uint64_t EnvironmentValues.lineLimit.getter()
{
  return EnvironmentValues.lineLimit.getter();
}

uint64_t EnvironmentValues.lineLimit.setter()
{
  return EnvironmentValues.lineLimit.setter();
}

uint64_t EnvironmentValues.init()()
{
  return EnvironmentValues.init()();
}

uint64_t type metadata accessor for EnvironmentValues()
{
  return type metadata accessor for EnvironmentValues();
}

uint64_t EnvironmentValues.subscript.getter()
{
  return EnvironmentValues.subscript.getter();
}

uint64_t EnvironmentValues.subscript.setter()
{
  return EnvironmentValues.subscript.setter();
}

uint64_t static VerticalAlignment.firstTextBaseline.getter()
{
  return static VerticalAlignment.firstTextBaseline.getter();
}

uint64_t static VerticalAlignment.center.getter()
{
  return static VerticalAlignment.center.getter();
}

uint64_t LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:specifier:)()
{
  return LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:specifier:)();
}

uint64_t LocalizedStringKey.StringInterpolation.appendInterpolation(_:)()
{
  return LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
}

Swift::Void __swiftcall LocalizedStringKey.StringInterpolation.appendLiteral(_:)(Swift::String a1)
{
}

uint64_t LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)()
{
  return LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
}

uint64_t type metadata accessor for LocalizedStringKey.StringInterpolation()
{
  return type metadata accessor for LocalizedStringKey.StringInterpolation();
}

uint64_t LocalizedStringKey.init(stringLiteral:)()
{
  return LocalizedStringKey.init(stringLiteral:)();
}

uint64_t LocalizedStringKey.init(stringInterpolation:)()
{
  return LocalizedStringKey.init(stringInterpolation:)();
}

uint64_t type metadata accessor for RoundedCornerStyle()
{
  return type metadata accessor for RoundedCornerStyle();
}

uint64_t static AccessibilityTraits.isButton.getter()
{
  return static AccessibilityTraits.isButton.getter();
}

uint64_t type metadata accessor for AccessibilityTraits()
{
  return type metadata accessor for AccessibilityTraits();
}

uint64_t type metadata accessor for ContentSizeCategory()
{
  return type metadata accessor for ContentSizeCategory();
}

uint64_t static HorizontalAlignment.center.getter()
{
  return static HorizontalAlignment.center.getter();
}

uint64_t static SymbolRenderingMode.monochrome.getter()
{
  return static SymbolRenderingMode.monochrome.getter();
}

uint64_t static SymbolRenderingMode.hierarchical.getter()
{
  return static SymbolRenderingMode.hierarchical.getter();
}

uint64_t type metadata accessor for SymbolRenderingMode()
{
  return type metadata accessor for SymbolRenderingMode();
}

uint64_t UIHostingController.init(coder:rootView:)()
{
  return UIHostingController.init(coder:rootView:)();
}

uint64_t UIHostingController.init(rootView:)()
{
  return UIHostingController.init(rootView:)();
}

uint64_t UIViewRepresentable._resetUIView(_:coordinator:destroy:)()
{
  return UIViewRepresentable._resetUIView(_:coordinator:destroy:)();
}

uint64_t static UIViewRepresentable.dismantleUIView(_:coordinator:)()
{
  return static UIViewRepresentable.dismantleUIView(_:coordinator:)();
}

uint64_t static UIViewRepresentable._layoutOptions(_:)()
{
  return static UIViewRepresentable._layoutOptions(_:)();
}

uint64_t UIViewRepresentable._identifiedViewTree(in:)()
{
  return UIViewRepresentable._identifiedViewTree(in:)();
}

uint64_t UIViewRepresentable._overrideLayoutTraits(_:for:)()
{
  return UIViewRepresentable._overrideLayoutTraits(_:for:)();
}

uint64_t UIViewRepresentable._overrideSizeThatFits(_:in:uiView:)()
{
  return UIViewRepresentable._overrideSizeThatFits(_:in:uiView:)();
}

uint64_t static UIViewRepresentable._modifyBridgedViewInputs(_:)()
{
  return static UIViewRepresentable._modifyBridgedViewInputs(_:)();
}

uint64_t UIViewRepresentable.body.getter()
{
  return UIViewRepresentable.body.getter();
}

uint64_t UIViewRepresentable<>.makeCoordinator()()
{
  return UIViewRepresentable<>.makeCoordinator()();
}

uint64_t type metadata accessor for _ConditionalContent.Storage()
{
  return type metadata accessor for _ConditionalContent.Storage();
}

uint64_t _ConditionalContent<>.init(storage:)()
{
  return _ConditionalContent<>.init(storage:)();
}

uint64_t type metadata accessor for _ConditionalContent()
{
  return type metadata accessor for _ConditionalContent();
}

uint64_t type metadata accessor for AutomaticHoverEffect()
{
  return type metadata accessor for AutomaticHoverEffect();
}

uint64_t type metadata accessor for HighlightHoverEffect()
{
  return type metadata accessor for HighlightHoverEffect();
}

uint64_t type metadata accessor for NamedCoordinateSpace()
{
  return type metadata accessor for NamedCoordinateSpace();
}

uint64_t BorderlessButtonStyle.init()()
{
  return BorderlessButtonStyle.init()();
}

uint64_t type metadata accessor for BorderlessButtonStyle()
{
  return type metadata accessor for BorderlessButtonStyle();
}

uint64_t static ContentMarginPlacement.automatic.getter()
{
  return static ContentMarginPlacement.automatic.getter();
}

uint64_t type metadata accessor for ContentMarginPlacement()
{
  return type metadata accessor for ContentMarginPlacement();
}

uint64_t static HierarchicalShapeStyle.quaternary.getter()
{
  return static HierarchicalShapeStyle.quaternary.getter();
}

uint64_t static HierarchicalShapeStyle.primary.getter()
{
  return static HierarchicalShapeStyle.primary.getter();
}

uint64_t static HierarchicalShapeStyle.secondary.getter()
{
  return static HierarchicalShapeStyle.secondary.getter();
}

uint64_t MenuStyleConfiguration.onPresentationChanged.setter()
{
  return MenuStyleConfiguration.onPresentationChanged.setter();
}

uint64_t type metadata accessor for MenuStyleConfiguration()
{
  return type metadata accessor for MenuStyleConfiguration();
}

uint64_t type metadata accessor for UserInterfaceSizeClass()
{
  return type metadata accessor for UserInterfaceSizeClass();
}

uint64_t static AccessibilityActionKind.default.getter()
{
  return static AccessibilityActionKind.default.getter();
}

uint64_t type metadata accessor for AccessibilityActionKind()
{
  return type metadata accessor for AccessibilityActionKind();
}

uint64_t static CoordinateSpaceProtocol<>.named<A>(_:)()
{
  return static CoordinateSpaceProtocol<>.named<A>(_:)();
}

uint64_t type metadata accessor for ButtonStyleConfiguration.Label()
{
  return type metadata accessor for ButtonStyleConfiguration.Label();
}

uint64_t ButtonStyleConfiguration.label.getter()
{
  return ButtonStyleConfiguration.label.getter();
}

uint64_t ButtonStyleConfiguration.isPressed.getter()
{
  return ButtonStyleConfiguration.isPressed.getter();
}

uint64_t static ScrollIndicatorVisibility.never.getter()
{
  return static ScrollIndicatorVisibility.never.getter();
}

uint64_t type metadata accessor for ScrollIndicatorVisibility()
{
  return type metadata accessor for ScrollIndicatorVisibility();
}

uint64_t static AccessibilityChildBehavior.ignore.getter()
{
  return static AccessibilityChildBehavior.ignore.getter();
}

uint64_t type metadata accessor for AccessibilityChildBehavior()
{
  return type metadata accessor for AccessibilityChildBehavior();
}

uint64_t type metadata accessor for AccessibilityAttachmentModifier()
{
  return type metadata accessor for AccessibilityAttachmentModifier();
}

uint64_t static Log.runtimeIssuesLog.getter()
{
  return static Log.runtimeIssuesLog.getter();
}

uint64_t static Axis.Set.horizontal.getter()
{
  return static Axis.Set.horizontal.getter();
}

uint64_t Axis.Set.init(rawValue:)()
{
  return Axis.Set.init(rawValue:)();
}

uint64_t static Axis.Set.vertical.getter()
{
  return static Axis.Set.vertical.getter();
}

uint64_t static Edge.Set.horizontal.getter()
{
  return static Edge.Set.horizontal.getter();
}

uint64_t static Edge.Set.all.getter()
{
  return static Edge.Set.all.getter();
}

uint64_t static Edge.Set.top.getter()
{
  return static Edge.Set.top.getter();
}

uint64_t static Edge.Set.bottom.getter()
{
  return static Edge.Set.bottom.getter();
}

uint64_t static Edge.Set.leading.getter()
{
  return static Edge.Set.leading.getter();
}

uint64_t static Edge.Set.trailing.getter()
{
  return static Edge.Set.trailing.getter();
}

uint64_t static Edge.Set.vertical.getter()
{
  return static Edge.Set.vertical.getter();
}

uint64_t Font.platformFont(in:)()
{
  return Font.platformFont(in:)();
}

uint64_t Font.monospacedDigit()()
{
  return Font.monospacedDigit()();
}

uint64_t static Font.body.getter()
{
  return static Font.body.getter();
}

uint64_t Font.bold()()
{
  return Font.bold()();
}

uint64_t type metadata accessor for Font.Design()
{
  return type metadata accessor for Font.Design();
}

uint64_t static Font.custom(_:fixedSize:)()
{
  return static Font.custom(_:fixedSize:)();
}

uint64_t static Font.system(size:weight:design:)()
{
  return static Font.system(size:weight:design:)();
}

uint64_t static Font.title3.getter()
{
  return static Font.title3.getter();
}

uint64_t type metadata accessor for Font.Context()
{
  return type metadata accessor for Font.Context();
}

uint64_t static Font.callout.getter()
{
  return static Font.callout.getter();
}

uint64_t Font.init(_:)()
{
  return Font.init(_:)();
}

uint64_t Menu.init(content:label:)()
{
  return Menu.init(content:label:)();
}

uint64_t Menu<>.init(_:)()
{
  return Menu<>.init(_:)();
}

uint64_t type metadata accessor for Text.TruncationMode()
{
  return type metadata accessor for Text.TruncationMode();
}

uint64_t Text.foregroundStyle<A>(_:)()
{
  return Text.foregroundStyle<A>(_:)();
}

uint64_t Text.font(_:)()
{
  return Text.font(_:)();
}

uint64_t Text.init(_:tableName:bundle:comment:)()
{
  return Text.init(_:tableName:bundle:comment:)();
}

uint64_t Text.init(_:)()
{
  return Text.init(_:)();
}

uint64_t Text.init<A>(_:)()
{
  return Text.init<A>(_:)();
}

uint64_t static View._makeView(view:inputs:)()
{
  return static View._makeView(view:inputs:)();
}

uint64_t static View._makeViewList(view:inputs:)()
{
  return static View._makeViewList(view:inputs:)();
}

uint64_t View.buttonStyle<A>(_:)()
{
  return View.buttonStyle<A>(_:)();
}

{
  return View.buttonStyle<A>(_:)();
}

uint64_t View.environment<A>(_:_:)()
{
  return View.environment<A>(_:_:)();
}

uint64_t View.hoverEffect<A>(_:isEnabled:)()
{
  return View.hoverEffect<A>(_:isEnabled:)();
}

uint64_t View.toggleStyle<A>(_:)()
{
  return View.toggleStyle<A>(_:)();
}

uint64_t View.contentShape<A>(_:eoFill:)()
{
  return View.contentShape<A>(_:eoFill:)();
}

uint64_t View.labelsHidden()()
{
  return View.labelsHidden()();
}

uint64_t View.onTapGesture(count:perform:)()
{
  return View.onTapGesture(count:perform:)();
}

uint64_t View.accessibility(label:)()
{
  return View.accessibility(label:)();
}

uint64_t static View._viewListCount(inputs:)()
{
  return static View._viewListCount(inputs:)();
}

uint64_t View.contentMargins(_:_:for:)()
{
  return View.contentMargins(_:_:for:)();
}

uint64_t View.layoutPriority(_:)()
{
  return View.layoutPriority(_:)();
}

uint64_t View.scrollPosition<A>(id:anchor:)()
{
  return View.scrollPosition<A>(id:anchor:)();
}

uint64_t View.dynamicTypeSize<A>(_:)()
{
  return View.dynamicTypeSize<A>(_:)();
}

uint64_t View.foregroundStyle<A>(_:)()
{
  return View.foregroundStyle<A>(_:)();
}

uint64_t View.scrollIndicators(_:axes:)()
{
  return View.scrollIndicators(_:axes:)();
}

uint64_t View.accessibilityLabel(_:)()
{
  return View.accessibilityLabel(_:)();
}

uint64_t View.accessibilityLabel<A>(_:)()
{
  return View.accessibilityLabel<A>(_:)();
}

uint64_t View.onPreferenceChange<A>(_:perform:)()
{
  return View.onPreferenceChange<A>(_:perform:)();
}

uint64_t View.scrollClipDisabled(_:)()
{
  return View.scrollClipDisabled(_:)();
}

uint64_t View.scrollTargetLayout(isEnabled:)()
{
  return View.scrollTargetLayout(isEnabled:)();
}

uint64_t View.accessibilityAction(_:_:)()
{
  return View.accessibilityAction(_:_:)();
}

uint64_t View.accessibilityElement(children:)()
{
  return View.accessibilityElement(children:)();
}

uint64_t View.accessibilityIdentifier(_:)()
{
  return View.accessibilityIdentifier(_:)();
}

uint64_t View.frame(width:height:alignment:)()
{
  return View.frame(width:height:alignment:)();
}

uint64_t View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)()
{
  return View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
}

uint64_t View.zIndex(_:)()
{
  return View.zIndex(_:)();
}

uint64_t View.onHover(perform:)()
{
  return View.onHover(perform:)();
}

uint64_t View.padding(_:_:)()
{
  return View.padding(_:_:)();
}

uint64_t View.modifier<A>(_:)()
{
  return View.modifier<A>(_:)();
}

uint64_t View.clipShape<A>(_:style:)()
{
  return View.clipShape<A>(_:style:)();
}

uint64_t View.fixedSize(horizontal:vertical:)()
{
  return View.fixedSize(horizontal:vertical:)();
}

uint64_t View.menuStyle<A>(_:)()
{
  return View.menuStyle<A>(_:)();
}

uint64_t Color.init(uiColor:)()
{
  return Color.init(uiColor:)();
}

uint64_t static Color.accentColor.getter()
{
  return static Color.accentColor.getter();
}

uint64_t static Color.black.getter()
{
  return static Color.black.getter();
}

uint64_t static Color.clear.getter()
{
  return static Color.clear.getter();
}

uint64_t static Color.white.getter()
{
  return static Color.white.getter();
}

uint64_t Color.opacity(_:)()
{
  return Color.opacity(_:)();
}

uint64_t static Color.primary.getter()
{
  return static Color.primary.getter();
}

uint64_t static Color.secondary.getter()
{
  return static Color.secondary.getter();
}

uint64_t Image.init(uiImage:)()
{
  return Image.init(uiImage:)();
}

uint64_t Image.init(systemName:)()
{
  return Image.init(systemName:)();
}

uint64_t Image.init(_internalSystemName:)()
{
  return Image.init(_internalSystemName:)();
}

uint64_t type metadata accessor for Image.Scale()
{
  return type metadata accessor for Image.Scale();
}

uint64_t Label.init(title:icon:)()
{
  return Label.init(title:icon:)();
}

uint64_t State.init(wrappedValue:)()
{
  return State.init(wrappedValue:)();
}

uint64_t State.wrappedValue.getter()
{
  return State.wrappedValue.getter();
}

uint64_t State.wrappedValue.setter()
{
  return State.wrappedValue.setter();
}

uint64_t State.projectedValue.getter()
{
  return State.projectedValue.getter();
}

uint64_t Button.init(action:label:)()
{
  return Button.init(action:label:)();
}

uint64_t type metadata accessor for Button()
{
  return type metadata accessor for Button();
}

uint64_t HStack.init(alignment:spacing:content:)()
{
  return HStack.init(alignment:spacing:content:)();
}

uint64_t type metadata accessor for HStack()
{
  return type metadata accessor for HStack();
}

uint64_t Toggle.init(isOn:label:)()
{
  return Toggle.init(isOn:label:)();
}

uint64_t Toggle<>.init<A>(_:isOn:)()
{
  return Toggle<>.init<A>(_:isOn:)();
}

uint64_t AnyView.init<A>(_:)()
{
  return AnyView.init<A>(_:)();
}

uint64_t Binding.wrappedValue.getter()
{
  return Binding.wrappedValue.getter();
}

uint64_t Binding.wrappedValue.setter()
{
  return Binding.wrappedValue.setter();
}

uint64_t Binding.projectedValue.getter()
{
  return Binding.projectedValue.getter();
}

uint64_t Binding.init(get:set:)()
{
  return Binding.init(get:set:)();
}

uint64_t type metadata accessor for Capsule()
{
  return type metadata accessor for Capsule();
}

uint64_t Divider.init()()
{
  return Divider.init()();
}

uint64_t type metadata accessor for Divider()
{
  return type metadata accessor for Divider();
}

uint64_t ForEach<>.init(_:id:content:)()
{
  return ForEach<>.init(_:id:content:)();
}

uint64_t ForEach<>.init(_:content:)()
{
  return ForEach<>.init(_:content:)();
}

uint64_t AnyShape.init<A>(_:)()
{
  return AnyShape.init<A>(_:)();
}

uint64_t static Material.thin.getter()
{
  return static Material.thin.getter();
}

uint64_t static Material.regular.getter()
{
  return static Material.regular.getter();
}

uint64_t type metadata accessor for Material()
{
  return type metadata accessor for Material();
}

uint64_t static Alignment.center.getter()
{
  return static Alignment.center.getter();
}

uint64_t static Alignment.leading.getter()
{
  return static Alignment.leading.getter();
}

uint64_t Animation.speed(_:)()
{
  return Animation.speed(_:)();
}

uint64_t static Animation.spring(response:dampingFraction:blendDuration:)()
{
  return static Animation.spring(response:dampingFraction:blendDuration:)();
}

uint64_t type metadata accessor for TupleView()
{
  return type metadata accessor for TupleView();
}

uint64_t TupleView.init(_:)()
{
  return TupleView.init(_:)();
}

uint64_t static UnitPoint.center.getter()
{
  return static UnitPoint.center.getter();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)Dictionary._bridgeToObjectiveC()();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Dictionary<>.init(_:)()
{
  return Dictionary<>.init(_:)();
}

uint64_t Dictionary.description.getter()
{
  return Dictionary.description.getter();
}

uint64_t dispatch thunk of static Comparable.<= infix(_:_:)()
{
  return dispatch thunk of static Comparable.<= infix(_:_:)();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)String._bridgeToObjectiveC()();
}

uint64_t static String._forceBridgeFromObjectiveC(_:result:)()
{
  return static String._forceBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static String._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t String.init(format:_:)()
{
  return String.init(format:_:)();
}

uint64_t String.init(localized:)()
{
  return String.init(localized:)();
}

uint64_t String.utf8CString.getter()
{
  return String.utf8CString.getter();
}

uint64_t String.hash(into:)()
{
  return String.hash(into:)();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return String.UTF8View._foreignCount()();
}

Swift::Bool __swiftcall String.hasPrefix(_:)(Swift::String a1)
{
  return String.hasPrefix(_:)(a1._countAndFlagsBits, a1._object);
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)Array._bridgeToObjectiveC()();
}

uint64_t static Array._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static Array._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t specialized Array._endMutation()()
{
  return specialized Array._endMutation()();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return static Array._allocateBufferUninitialized(minimumCapacity:)();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

NSNumber __swiftcall Bool._bridgeToObjectiveC()()
{
  return (NSNumber)Bool._bridgeToObjectiveC()();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return dispatch thunk of Actor.unownedExecutor.getter();
}

uint64_t static MainActor.shared.getter()
{
  return static MainActor.shared.getter();
}

uint64_t type metadata accessor for MainActor()
{
  return type metadata accessor for MainActor();
}

uint64_t TaskPriority.rawValue.getter()
{
  return TaskPriority.rawValue.getter();
}

uint64_t type metadata accessor for TaskPriority()
{
  return type metadata accessor for TaskPriority();
}

Swift::Void __swiftcall Task.cancel()()
{
}

uint64_t static Task<>.isCancelled.getter()
{
  return static Task<>.isCancelled.getter();
}

uint64_t static Set._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Set._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Set.init(minimumCapacity:)()
{
  return Set.init(minimumCapacity:)();
}

uint64_t RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)()
{
  return RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)();
}

uint64_t static os_log_type_t.debug.getter()
{
  return static os_log_type_t.debug.getter();
}

uint64_t static os_log_type_t.fault.getter()
{
  return static os_log_type_t.fault.getter();
}

uint64_t type metadata accessor for NSNotificationCenter.Publisher()
{
  return type metadata accessor for NSNotificationCenter.Publisher();
}

uint64_t NSNotificationCenter.publisher(for:object:)()
{
  return NSNotificationCenter.publisher(for:object:)();
}

uint64_t UIContentSizeCategory.init(_:)()
{
  return UIContentSizeCategory.init(_:)();
}

uint64_t UITextFormattingViewController.FormattingDescriptor.highlights.getter()
{
  return UITextFormattingViewController.FormattingDescriptor.highlights.getter();
}

uint64_t UITextFormattingViewController.FormattingDescriptor.lineHeight.getter()
{
  return UITextFormattingViewController.FormattingDescriptor.lineHeight.getter();
}

uint64_t UITextFormattingViewController.FormattingDescriptor.textColors.getter()
{
  return UITextFormattingViewController.FormattingDescriptor.textColors.getter();
}

uint64_t UITextFormattingViewController.FormattingDescriptor._blockquote.getter()
{
  return UITextFormattingViewController.FormattingDescriptor._blockquote.getter();
}

uint64_t UITextFormattingViewController.FormattingDescriptor._canToggleBold.getter()
{
  return UITextFormattingViewController.FormattingDescriptor._canToggleBold.getter();
}

uint64_t UITextFormattingViewController.FormattingDescriptor.textAlignments.getter()
{
  return UITextFormattingViewController.FormattingDescriptor.textAlignments.getter();
}

uint64_t UITextFormattingViewController.FormattingDescriptor._paragraphStyle.getter()
{
  return UITextFormattingViewController.FormattingDescriptor._paragraphStyle.getter();
}

uint64_t UITextFormattingViewController.FormattingDescriptor._canToggleItalic.getter()
{
  return UITextFormattingViewController.FormattingDescriptor._canToggleItalic.getter();
}

uint64_t UITextFormattingViewController.FormattingDescriptor.underlinePresent.getter()
{
  return UITextFormattingViewController.FormattingDescriptor.underlinePresent.getter();
}

uint64_t UITextFormattingViewController.FormattingDescriptor._emphasisStyleKey.getter()
{
  return UITextFormattingViewController.FormattingDescriptor._emphasisStyleKey.getter();
}

uint64_t UITextFormattingViewController.FormattingDescriptor.formattingStyleKey.getter()
{
  return UITextFormattingViewController.FormattingDescriptor.formattingStyleKey.getter();
}

uint64_t UITextFormattingViewController.FormattingDescriptor._customComponentKeys.getter()
{
  return UITextFormattingViewController.FormattingDescriptor._customComponentKeys.getter();
}

uint64_t UITextFormattingViewController.FormattingDescriptor.strikethroughPresent.getter()
{
  return UITextFormattingViewController.FormattingDescriptor.strikethroughPresent.getter();
}

uint64_t static UITextFormattingViewController.FormattingDescriptor._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static UITextFormattingViewController.FormattingDescriptor._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t UITextFormattingViewController.FormattingDescriptor.fonts.getter()
{
  return UITextFormattingViewController.FormattingDescriptor.fonts.getter();
}

uint64_t UITextFormattingViewController.FormattingDescriptor.textLists.getter()
{
  return UITextFormattingViewController.FormattingDescriptor.textLists.getter();
}

uint64_t type metadata accessor for UITextFormattingViewController.FormattingDescriptor()
{
  return type metadata accessor for UITextFormattingViewController.FormattingDescriptor();
}

uint64_t UITextFormattingViewController.FormattingStyle.attributes.getter()
{
  return UITextFormattingViewController.FormattingStyle.attributes.getter();
}

uint64_t UITextFormattingViewController.FormattingStyle.title.getter()
{
  return UITextFormattingViewController.FormattingStyle.title.getter();
}

uint64_t UITextFormattingViewController.FormattingStyle.styleKey.getter()
{
  return UITextFormattingViewController.FormattingStyle.styleKey.getter();
}

uint64_t type metadata accessor for UITextFormattingViewController.FormattingStyle()
{
  return type metadata accessor for UITextFormattingViewController.FormattingStyle();
}

uint64_t UITextFormattingViewController.ChangeValue._bridgeToObjectiveC()()
{
  return UITextFormattingViewController.ChangeValue._bridgeToObjectiveC()();
}

uint64_t type metadata accessor for UITextFormattingViewController.ChangeValue()
{
  return type metadata accessor for UITextFormattingViewController.ChangeValue();
}

uint64_t UITextFormattingViewControllerConfiguration._emphasisStyles.getter()
{
  return UITextFormattingViewControllerConfiguration._emphasisStyles.getter();
}

uint64_t UITextFormattingViewControllerConfiguration.formattingStyles.getter()
{
  return UITextFormattingViewControllerConfiguration.formattingStyles.getter();
}

uint64_t UIColor.init(_:)()
{
  return UIColor.init(_:)();
}

NSNumber __swiftcall NSNumber.init(floatLiteral:)(Swift::Double floatLiteral)
{
  return (NSNumber)NSNumber.init(floatLiteral:)(floatLiteral);
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return NSObject._rawHashValue(seed:)(seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return UnsafeMutableRawBufferPointer.subscript.setter();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return _bridgeAnyObjectToAny(_:)();
}

uint64_t __CocoaSet.startIndex.getter()
{
  return __CocoaSet.startIndex.getter();
}

uint64_t static __CocoaSet.Index.== infix(_:_:)()
{
  return static __CocoaSet.Index.== infix(_:_:)();
}

uint64_t __CocoaSet.Index.age.getter()
{
  return __CocoaSet.Index.age.getter();
}

uint64_t __CocoaSet.Index.element.getter()
{
  return __CocoaSet.Index.element.getter();
}

uint64_t __CocoaSet.element(at:)()
{
  return __CocoaSet.element(at:)();
}

uint64_t __CocoaSet.endIndex.getter()
{
  return __CocoaSet.endIndex.getter();
}

uint64_t static CommandLine.unsafeArgv.getter()
{
  return static CommandLine.unsafeArgv.getter();
}

uint64_t static CommandLine.argc.getter()
{
  return static CommandLine.argc.getter();
}

uint64_t static _SetStorage.copy(original:)()
{
  return static _SetStorage.copy(original:)();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return static _SetStorage.resize(original:capacity:move:)();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return _StringGuts.copyUTF8(into:)();
}

Swift::Void __swiftcall _ArrayBuffer._typeCheckSlowPath(_:)(Swift::Int a1)
{
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return specialized ContiguousArray._endMutation()();
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return specialized ContiguousArray.reserveCapacity(_:)();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return _print_unlocked<A, B>(_:_:)();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t _CocoaArrayWrapper.subscript.getter()
{
  return _CocoaArrayWrapper.subscript.getter();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return static _DictionaryStorage.copy(original:)();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return _findStringSwitchCase(cases:string:)(cases._rawValue, string._countAndFlagsBits, string._object);
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return _minimumMergeRunLength(_:)(a1);
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t type metadata accessor for __ContiguousArrayStorageBase()
{
  return type metadata accessor for __ContiguousArrayStorageBase();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t static Hasher._hash(seed:_:)()
{
  return static Hasher._hash(seed:_:)();
}

uint64_t Hasher.init(_seed:)()
{
  return Hasher.init(_seed:)();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return Hasher._finalize()();
}

CGFloat CGRectGetHeight(CGRect rect)
{
  return _CGRectGetHeight(rect);
}

CGFloat CGRectGetWidth(CGRect rect)
{
  return _CGRectGetWidth(rect);
}

CFStringRef CTFontCopyName(CTFontRef font, CFStringRef nameKey)
{
  return _CTFontCopyName(font, nameKey);
}

Class NSClassFromString(NSString *aClassName)
{
  return _NSClassFromString(aClassName);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return _NSStringFromClass(aClass);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _UIFontPickerLoadRecentsMatchingConfigurationForSuite()
{
  return __UIFontPickerLoadRecentsMatchingConfigurationForSuite();
}

uint64_t _UIFontPickerPersistToRecentsForSuite()
{
  return __UIFontPickerPersistToRecentsForSuite();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _sl_dlopen()
{
  return __sl_dlopen();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return __swift_stdlib_reportUnimplementedInitializer();
}

void bzero(void *a1, size_t a2)
{
}

void exit(int a1)
{
}

long double exp2(long double __x)
{
  return _exp2(__x);
}

void free(void *a1)
{
}

void *__cdecl malloc(size_t __size)
{
  return _malloc(__size);
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

id objc_alloc(Class a1)
{
  return _[a1 alloc];
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

uint64_t objc_alloc_init()
{
  return _objc_alloc_init();
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return _objc_claimAutoreleasedReturnValue();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_enumerationMutation(id obj)
{
}

Class objc_getClass(const char *name)
{
  return _objc_getClass(name);
}

id objc_initWeak(id *location, id val)
{
  return _objc_initWeak(location, val);
}

id objc_loadWeakRetained(id *location)
{
  return _objc_loadWeakRetained(location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return [super a2];
}

uint64_t objc_opt_class()
{
  return _objc_opt_class();
}

uint64_t objc_opt_isKindOfClass()
{
  return _objc_opt_isKindOfClass();
}

uint64_t objc_opt_new()
{
  return _objc_opt_new();
}

uint64_t objc_opt_respondsToSelector()
{
  return _objc_opt_respondsToSelector();
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutorelease(id a1)
{
  return _a1;
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return _a1;
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return _objc_storeWeak(location, obj);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

uint64_t os_variant_has_internal_content()
{
  return _os_variant_has_internal_content();
}

uint64_t swift_allocError()
{
  return _swift_allocError();
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_arrayDestroy()
{
  return _swift_arrayDestroy();
}

uint64_t swift_arrayInitWithCopy()
{
  return _swift_arrayInitWithCopy();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return _swift_bridgeObjectRelease_n();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return _swift_bridgeObjectRetain_n();
}

uint64_t swift_checkMetadataState()
{
  return _swift_checkMetadataState();
}

uint64_t swift_deallocPartialClassInstance()
{
  return _swift_deallocPartialClassInstance();
}

uint64_t swift_dynamicCast()
{
  return _swift_dynamicCast();
}

uint64_t swift_dynamicCastClass()
{
  return _swift_dynamicCastClass();
}

uint64_t swift_dynamicCastObjCClass()
{
  return _swift_dynamicCastObjCClass();
}

uint64_t swift_dynamicCastObjCProtocolConditional()
{
  return _swift_dynamicCastObjCProtocolConditional();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_errorRetain()
{
  return _swift_errorRetain();
}

uint64_t swift_getAtKeyPath()
{
  return _swift_getAtKeyPath();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return _swift_getEnumCaseMultiPayload();
}

uint64_t swift_getGenericMetadata()
{
  return _swift_getGenericMetadata();
}

uint64_t swift_getKeyPath()
{
  return _swift_getKeyPath();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return _swift_getObjCClassFromMetadata();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getOpaqueTypeConformance2()
{
  return _swift_getOpaqueTypeConformance2();
}

uint64_t swift_getOpaqueTypeMetadata2()
{
  return _swift_getOpaqueTypeMetadata2();
}

uint64_t swift_getSingletonMetadata()
{
  return _swift_getSingletonMetadata();
}

uint64_t swift_getTupleTypeMetadata()
{
  return _swift_getTupleTypeMetadata();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return _swift_getTupleTypeMetadata2();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return _swift_getTypeByMangledNameInContextInMetadataState2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initClassMetadata2()
{
  return _swift_initClassMetadata2();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_initStructMetadata()
{
  return _swift_initStructMetadata();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return _swift_isUniquelyReferenced_nonNull_bridgeObject();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_readAtKeyPath()
{
  return _swift_readAtKeyPath();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_release_n()
{
  return _swift_release_n();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_setAtReferenceWritableKeyPath()
{
  return _swift_setAtReferenceWritableKeyPath();
}

uint64_t swift_setDeallocating()
{
  return _swift_setDeallocating();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_slowDealloc()
{
  return _swift_slowDealloc();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return _swift_storeEnumTagMultiPayload();
}

uint64_t swift_task_alloc()
{
  return _swift_task_alloc();
}

uint64_t swift_task_create()
{
  return _swift_task_create();
}

uint64_t swift_task_dealloc()
{
  return _swift_task_dealloc();
}

uint64_t swift_unexpectedError()
{
  return _swift_unexpectedError();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

uint64_t swift_unknownObjectRetain_n()
{
  return _swift_unknownObjectRetain_n();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return _swift_unknownObjectWeakDestroy();
}

uint64_t swift_unknownObjectWeakInit()
{
  return _swift_unknownObjectWeakInit();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return _swift_unknownObjectWeakLoadStrong();
}

uint64_t swift_unownedRelease()
{
  return _swift_unownedRelease();
}

uint64_t swift_unownedRetain()
{
  return _swift_unownedRetain();
}

uint64_t swift_unownedRetainStrong()
{
  return _swift_unownedRetainStrong();
}

uint64_t swift_updateClassMetadata2()
{
  return _swift_updateClassMetadata2();
}

uint64_t swift_willThrow()
{
  return _swift_willThrow();
}

id objc_msgSend_CGImage(void *a1, const char *a2, ...)
{
  return _[a1 CGImage];
}

id objc_msgSend_CGRectValue(void *a1, const char *a2, ...)
{
  return _[a1 CGRectValue];
}

id objc_msgSend__addToRecents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addToRecents:");
}

id objc_msgSend__clientFontContext(void *a1, const char *a2, ...)
{
  return _[a1 _clientFontContext];
}

id objc_msgSend__clientFontContextEndpoint(void *a1, const char *a2, ...)
{
  return _[a1 _clientFontContextEndpoint];
}

id objc_msgSend__constants(void *a1, const char *a2, ...)
{
  return _[a1 _constants];
}

id objc_msgSend__filterFamilyName(void *a1, const char *a2, ...)
{
  return _[a1 _filterFamilyName];
}

id objc_msgSend__filterResultsForSearchTerm_(void *a1, const char *a2, ...)
{
  return [a1 _filterResultsForSearchTerm:];
}

id objc_msgSend__fontsForSearchTerm_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fontsForSearchTerm:");
}

id objc_msgSend__hasMultipleFacesInClientFontContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hasMultipleFacesInClientFontContext:");
}

id objc_msgSend__hasSettingsLinkSection(void *a1, const char *a2, ...)
{
  return _[a1 _hasSettingsLinkSection];
}

id objc_msgSend__hideSearchBar(void *a1, const char *a2, ...)
{
  return _[a1 _hideSearchBar];
}

id objc_msgSend__hostedWindowScene(void *a1, const char *a2, ...)
{
  return _[a1 _hostedWindowScene];
}

id objc_msgSend__identifierForSection_(void *a1, const char *a2, ...)
{
  return [a1 _identifierForSection:];
}

id objc_msgSend__includeDefaultFont(void *a1, const char *a2, ...)
{
  return _[a1 _includeDefaultFont];
}

id objc_msgSend__indexPathForFont_fontInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_indexPathForFont:fontInfo:");
}

id objc_msgSend__infoForIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_infoForIndexPath:");
}

id objc_msgSend__isSettingsLinkSection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isSettingsLinkSection:");
}

id objc_msgSend__loadFonts(void *a1, const char *a2, ...)
{
  return _[a1 _loadFonts];
}

id objc_msgSend__loadRecents(void *a1, const char *a2, ...)
{
  return _[a1 _loadRecents];
}

id objc_msgSend__loadSystemExtras(void *a1, const char *a2, ...)
{
  return _[a1 _loadSystemExtras];
}

id objc_msgSend__numberOfExtraTopSections(void *a1, const char *a2, ...)
{
  return _[a1 _numberOfExtraTopSections];
}

id objc_msgSend__persistToRecents_(void *a1, const char *a2, ...)
{
  return [a1 _persistToRecents];
}

id objc_msgSend__pickerDidCancel(void *a1, const char *a2, ...)
{
  return _[a1 _pickerDidCancel];
}

id objc_msgSend__pickerDidSelectFont_(void *a1, const char *a2, ...)
{
  return [a1 _pickerDidSelectFont:];
}

id objc_msgSend__pickerIsShowingKeyboard_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pickerIsShowingKeyboard:");
}

id objc_msgSend__presentColorPicker_selectedColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_presentColorPicker:selectedColor:");
}

id objc_msgSend__presentFontPickerWithConfiguration_selectedFonts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_presentFontPickerWithConfiguration:selectedFonts:");
}

id objc_msgSend__presentTypographySettingsForFont_(void *a1, const char *a2, ...)
{
  return [a1 _presentTypographySettingsForFont:];
}

id objc_msgSend__sectionContentInset(void *a1, const char *a2, ...)
{
  return _[a1 _sectionContentInset];
}

id objc_msgSend__selectedFontsForCurrentConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 _selectedFontsForCurrentConfiguration];
}

id objc_msgSend__setAdjustForIndexBar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setAdjustForIndexBar:");
}

id objc_msgSend__setConfiguration_(void *a1, const char *a2, ...)
{
  return [a1 _setConfiguration:];
}

id objc_msgSend__setConstants_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setConstants:");
}

id objc_msgSend__setHideNavigationBar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setHideNavigationBar:");
}

id objc_msgSend__setLayoutMarginLeading_trailing_header_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setLayoutMarginLeading:trailing:header:");
}

id objc_msgSend__setPreferredContentSize_(void *a1, const char *a2, ...)
{
  return [a1 _setPreferredContentSize:];
}

id objc_msgSend__setRecents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setRecents:");
}

id objc_msgSend__setRecentsHidden_(void *a1, const char *a2, ...)
{
  return [a1 _setRecentsHidden:];
}

id objc_msgSend__setResultFonts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setResultFonts:");
}

id objc_msgSend__setSelectedFonts_scrollToVisible_updatingRecentsSection_(void *a1, const char *a2, ...)
{
  return [_a1 _setSelectedFonts:scrollToVisible:updatingRecentsSection:];
}

id objc_msgSend__setSelectedFontsInfo_(void *a1, const char *a2, ...)
{
  return [_a1 _setSelectedFontsInfo:];
}

id objc_msgSend__setSelectionHandler_(void *a1, const char *a2, ...)
{
  return [a1 _setSelectionHandler:];
}

id objc_msgSend__setShowsGrabber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setShowsGrabber:");
}

id objc_msgSend__settingsLinkSymbolImage(void *a1, const char *a2, ...)
{
  return _[a1 _settingsLinkSymbolImage];
}

id objc_msgSend__setupTitleViewWhenNavigationBarHidden_searchBarHidden_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setupTitleViewWhenNavigationBarHidden:searchBarHidden:");
}

id objc_msgSend__showsSectionIndexBar(void *a1, const char *a2, ...)
{
  return _[a1 _showsSectionIndexBar];
}

id objc_msgSend__textFormattingDidChangeValue_textAttributesData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_textFormattingDidChangeValue:textAttributesData:");
}

id objc_msgSend__textFormattingDidFinish(void *a1, const char *a2, ...)
{
  return _[a1 _textFormattingDidFinish];
}

id objc_msgSend__tintColor(void *a1, const char *a2, ...)
{
  return _[a1 _tintColor];
}

id objc_msgSend__updateSettingsLinkSymbolImageIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _updateSettingsLinkSymbolImageIfNeeded];
}

id objc_msgSend_actionForChangeValue_textAttributesData_(void *a1, const char *a2, ...)
{
  return [a1 actionForChangeValue:textAttributesData:];
}

id objc_msgSend_actionForDidFinish(void *a1, const char *a2, ...)
{
  return _[a1 actionForDidFinish];
}

id objc_msgSend_actionForPresentColorPickerWithRect_selectedColor_(void *a1, const char *a2, ...)
{
  return [a1 actionForPresentColorPickerWithRect:selectedColor:];
}

id objc_msgSend_actionForPresentFontPickerWithConfiguration_selectedFonts_(void *a1, const char *a2, ...)
{
  return [a1 actionForPresentFontPickerWithConfiguration:selectedFonts:];
}

id objc_msgSend_actionForPresentTypographySettingsForFont_(void *a1, const char *a2, ...)
{
  return [a1 actionForPresentTypographySettingsForFont:];
}

id objc_msgSend_actionWithHandler_(void *a1, const char *a2, ...)
{
  return [a1 actionWithHandler:];
}

id objc_msgSend_activateConstraints_(void *a1, const char *a2, ...)
{
  return [a1 activateConstraints:];
}

id objc_msgSend_addAttribute_value_range_(void *a1, const char *a2, ...)
{
  return [a1 addAttribute:value:range:];
}

id objc_msgSend_addChildViewController_(void *a1, const char *a2, ...)
{
  return [a1 addChildViewController:];
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return [a1 addObject:];
}

id objc_msgSend_addObserverForName_object_queue_usingBlock_(void *a1, const char *a2, ...)
{
  return [a1 addObserverForName:object:queue:usingBlock:];
}

id objc_msgSend_addSubview_(void *a1, const char *a2, ...)
{
  return [a1 addSubview:];
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return _[a1 array];
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return [a1 arrayWithCapacity:];
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return [a1 arrayWithObjects:count:];
}

id objc_msgSend_attributedString(void *a1, const char *a2, ...)
{
  return _[a1 attributedString];
}

id objc_msgSend_backgroundColor(void *a1, const char *a2, ...)
{
  return _[a1 backgroundColor];
}

id objc_msgSend_beginUpdates(void *a1, const char *a2, ...)
{
  return _[a1 beginUpdates];
}

id objc_msgSend_bottomAnchor(void *a1, const char *a2, ...)
{
  return _[a1 bottomAnchor];
}

id objc_msgSend_bounds(void *a1, const char *a2, ...)
{
  return _[a1 bounds];
}

id objc_msgSend_bs_secureDataFromObject_(void *a1, const char *a2, ...)
{
  return [a1 bs_secureDataFromObject];
}

id objc_msgSend_bs_secureDecodedFromData_(void *a1, const char *a2, ...)
{
  return [a1 bs_secureDecodedFromData:];
}

id objc_msgSend_bs_secureDecodedFromData_withAdditionalClasses_(void *a1, const char *a2, ...)
{
  return [a1 bs_secureDecodedFromData:withAdditionalClasses:];
}

id objc_msgSend_bundleForClass_(void *a1, const char *a2, ...)
{
  return [a1 bundleForClass:];
}

id objc_msgSend_clearColor(void *a1, const char *a2, ...)
{
  return _[a1 clearColor];
}

id objc_msgSend_clearConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 clearConfiguration];
}

id objc_msgSend_color(void *a1, const char *a2, ...)
{
  return _[a1 color];
}

id objc_msgSend_configureWithOpaqueBackground(void *a1, const char *a2, ...)
{
  return _[a1 configureWithOpaqueBackground];
}

id objc_msgSend_configureWithTransparentBackground(void *a1, const char *a2, ...)
{
  return _[a1 configureWithTransparentBackground];
}

id objc_msgSend_conformsToProtocol_(void *a1, const char *a2, ...)
{
  return [a1 conformsToProtocol:];
}

id objc_msgSend_constraintEqualToAnchor_(void *a1, const char *a2, ...)
{
  return [a1 constraintEqualToAnchor:];
}

id objc_msgSend_contentType(void *a1, const char *a2, ...)
{
  return _[a1 contentType];
}

id objc_msgSend_contentView(void *a1, const char *a2, ...)
{
  return _[a1 contentView];
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _[a1 copy];
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _[a1 count];
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_currentCollation(void *a1, const char *a2, ...)
{
  return _[a1 currentCollation];
}

id objc_msgSend_currentHandler(void *a1, const char *a2, ...)
{
  return _[a1 currentHandler];
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return _[a1 defaultCenter];
}

id objc_msgSend_defaultContentConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 defaultContentConfiguration];
}

id objc_msgSend_defaultFontSize(void *a1, const char *a2, ...)
{
  return _[a1 defaultFontSize];
}

id objc_msgSend_defaultWorkspace(void *a1, const char *a2, ...)
{
  return _[a1 defaultWorkspace];
}

id objc_msgSend_delegate(void *a1, const char *a2, ...)
{
  return _[a1 delegate];
}

id objc_msgSend_deleteRowsAtIndexPaths_withRowAnimation_(void *a1, const char *a2, ...)
{
  return [a1 deleteRowsAtIndexPaths:withRowAnimation:];
}

id objc_msgSend_dequeueReusableCellWithIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 dequeueReusableCellWithIdentifier:];
}

id objc_msgSend_dequeueReusableHeaderFooterViewWithIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 dequeueReusableHeaderFooterViewWithIdentifier:];
}

id objc_msgSend_deselectRowAtIndexPath_animated_(void *a1, const char *a2, ...)
{
  return [a1 deselectRowAtIndexPath:animated:];
}

id objc_msgSend_dictionaryWithCapacity_(void *a1, const char *a2, ...)
{
  return [a1 dictionaryWithCapacity:];
}

id objc_msgSend_didMoveToParentViewController_(void *a1, const char *a2, ...)
{
  return [a1 didMoveToParentViewController:];
}

id objc_msgSend_directionalLayoutMargins(void *a1, const char *a2, ...)
{
  return _[a1 directionalLayoutMargins];
}

id objc_msgSend_displayScale(void *a1, const char *a2, ...)
{
  return _[a1 displayScale];
}

id objc_msgSend_displayUsingSystemFont(void *a1, const char *a2, ...)
{
  return _[a1 displayUsingSystemFont];
}

id objc_msgSend_endUpdates(void *a1, const char *a2, ...)
{
  return _[a1 endUpdates];
}

id objc_msgSend_enumerateFontFamilyNamesUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateFontFamilyNamesUsingBlock:");
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return [a1 enumerateObjectsUsingBlock:];
}

id objc_msgSend_enumerateObjectsWithOptions_usingBlock_(void *a1, const char *a2, ...)
{
  return [a1 enumerateObjectsWithOptions:];
}

id objc_msgSend_familyInfo(void *a1, const char *a2, ...)
{
  return _[a1 familyInfo];
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _[a1 firstObject];
}

id objc_msgSend_font(void *a1, const char *a2, ...)
{
  return _[a1 font];
}

id objc_msgSend_fontCanRenderLocalizedName(void *a1, const char *a2, ...)
{
  return _[a1 fontCanRenderLocalizedName];
}

id objc_msgSend_fontDescriptor(void *a1, const char *a2, ...)
{
  return _[a1 fontDescriptor];
}

id objc_msgSend_fontSelected_(void *a1, const char *a2, ...)
{
  return [a1 fontSelected:];
}

id objc_msgSend_fontWithName_size_(void *a1, const char *a2, ...)
{
  return [a1 fontWithName:size:];
}

id objc_msgSend_frame(void *a1, const char *a2, ...)
{
  return _[a1 frame];
}

id objc_msgSend_handleFailureInFunction_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return [a1 handleFailureInFunction:file:lineNumber:description:];
}

id objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return [a1 handleFailureInMethod:object:file:lineNumber:description:];
}

id objc_msgSend_hasMultipleFaces(void *a1, const char *a2, ...)
{
  return _[a1 hasMultipleFaces];
}

id objc_msgSend_headerViewForSection_(void *a1, const char *a2, ...)
{
  return [a1 headerViewForSection:];
}

id objc_msgSend_imageForGraphicSymbolDescriptor_(void *a1, const char *a2, ...)
{
  return [a1 imageForGraphicSymbolDescriptor:];
}

id objc_msgSend_imageProperties(void *a1, const char *a2, ...)
{
  return _[a1 imageProperties];
}

id objc_msgSend_imageWithActions_(void *a1, const char *a2, ...)
{
  return [a1 imageWithActions:];
}

id objc_msgSend_includeFaces(void *a1, const char *a2, ...)
{
  return _[a1 includeFaces];
}

id objc_msgSend_indexOfObject_(void *a1, const char *a2, ...)
{
  return [a1 indexOfObject:];
}

id objc_msgSend_indexPathForRow_inSection_(void *a1, const char *a2, ...)
{
  return [a1 indexPathForRow:inSection:];
}

id objc_msgSend_info(void *a1, const char *a2, ...)
{
  return _[a1 info];
}

id objc_msgSend_initWithBarButtonSystemItem_target_action_(void *a1, const char *a2, ...)
{
  return [a1 initWithBarButtonSystemItem:target:action:];
}

id objc_msgSend_initWithCGImage_scale_orientation_(void *a1, const char *a2, ...)
{
  return [a1 initWithCGImage:scale:orientation:];
}

id objc_msgSend_initWithFamilyName_(void *a1, const char *a2, ...)
{
  return [a1 initWithFamilyName:];
}

id objc_msgSend_initWithFontDescriptor_(void *a1, const char *a2, ...)
{
  return [a1 initWithFontDescriptor:];
}

id objc_msgSend_initWithFrame_(void *a1, const char *a2, ...)
{
  return [a1 initWithFrame:];
}

id objc_msgSend_initWithInfo_responder_(void *a1, const char *a2, ...)
{
  return [a1 initWithInfo:responder:];
}

id objc_msgSend_initWithReuseIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 initWithReuseIdentifier:];
}

id objc_msgSend_initWithSearchResultsController_(void *a1, const char *a2, ...)
{
  return [a1 initWithSearchResultsController:];
}

id objc_msgSend_initWithSize_format_(void *a1, const char *a2, ...)
{
  return [a1 initWithSize:format:];
}

id objc_msgSend_initWithString_(void *a1, const char *a2, ...)
{
  return [a1 initWithString:];
}

id objc_msgSend_initWithStyle_(void *a1, const char *a2, ...)
{
  return [a1 initWithStyle:];
}

id objc_msgSend_initWithStyle_reuseIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 initWithStyle:reuseIdentifier:];
}

id objc_msgSend_initWithSymbolName_bundleURL_(void *a1, const char *a2, ...)
{
  return [a1 initWithSymbolName:bundleURL:];
}

id objc_msgSend_initWithSystemDefaultFont(void *a1, const char *a2, ...)
{
  return _[a1 initWithSystemDefaultFont];
}

id objc_msgSend_insertObject_atIndex_(void *a1, const char *a2, ...)
{
  return [a1 insertObject:atIndex:];
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return _[a1 integerValue];
}

id objc_msgSend_intrinsicContentSize(void *a1, const char *a2, ...)
{
  return _[a1 intrinsicContentSize];
}

id objc_msgSend_invalidateSharedInstanceForEndpoint_(void *a1, const char *a2, ...)
{
  return [a1 invalidateSharedInstanceForEndpoint:];
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return [a1 isEqual:];
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return [a1 isEqualToString:];
}

id objc_msgSend_isFontFamilyAvailable(void *a1, const char *a2, ...)
{
  return _[a1 isFontFamilyAvailable];
}

id objc_msgSend_isHidden(void *a1, const char *a2, ...)
{
  return _[a1 isHidden];
}

id objc_msgSend_isSystemFont(void *a1, const char *a2, ...)
{
  return _[a1 isSystemFont];
}

id objc_msgSend_labelColor(void *a1, const char *a2, ...)
{
  return _[a1 labelColor];
}

id objc_msgSend_layoutDirection(void *a1, const char *a2, ...)
{
  return _[a1 layoutDirection];
}

id objc_msgSend_layoutMargins(void *a1, const char *a2, ...)
{
  return _[a1 layoutMargins];
}

id objc_msgSend_leadingAnchor(void *a1, const char *a2, ...)
{
  return _[a1 leadingAnchor];
}

id objc_msgSend_leftAnchor(void *a1, const char *a2, ...)
{
  return _[a1 leftAnchor];
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _[a1 length];
}

id objc_msgSend_lineHeight(void *a1, const char *a2, ...)
{
  return _[a1 lineHeight];
}

id objc_msgSend_localizedFamilyName(void *a1, const char *a2, ...)
{
  return _[a1 localizedFamilyName];
}

id objc_msgSend_localizedName(void *a1, const char *a2, ...)
{
  return _[a1 localizedName];
}

id objc_msgSend_localizedStringForKey_value_table_(void *a1, const char *a2, ...)
{
  return [a1 localizedStringForKey:value:table:];
}

id objc_msgSend_localizedStringWithFormat_(void *a1, const char *a2, ...)
{
  return [a1 localizedStringWithFormat:];
}

id objc_msgSend_mainQueue(void *a1, const char *a2, ...)
{
  return _[a1 mainQueue];
}

id objc_msgSend_matchesConfiguration_(void *a1, const char *a2, ...)
{
  return [a1 matchesConfiguration:];
}

id objc_msgSend_matchesFamilyForFontDescriptor_(void *a1, const char *a2, ...)
{
  return [a1 matchesFamilyForFontDescriptor:];
}

id objc_msgSend_matchesFontDescriptor_(void *a1, const char *a2, ...)
{
  return [a1 matchesFontDescriptor:];
}

id objc_msgSend_matchesSearchString_(void *a1, const char *a2, ...)
{
  return [a1 matchesSearchString:];
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return _[a1 mutableCopy];
}

id objc_msgSend_navigationController(void *a1, const char *a2, ...)
{
  return _[a1 navigationController];
}

id objc_msgSend_navigationItem(void *a1, const char *a2, ...)
{
  return _[a1 navigationItem];
}

id objc_msgSend_numberOfSectionsInTableView_(void *a1, const char *a2, ...)
{
  return [a1 numberOfSectionsInTableView:];
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return [a1 numberWithInteger:];
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return [a1 objectAtIndexedSubscript:];
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return [a1 objectForKey:];
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return [a1 objectForKeyedSubscript:];
}

id objc_msgSend_objectForSetting_(void *a1, const char *a2, ...)
{
  return [a1 objectForSetting:];
}

id objc_msgSend_openSensitiveURL_withOptions_(void *a1, const char *a2, ...)
{
  return [a1 openSensitiveURL:withOptions:];
}

id objc_msgSend_plainButtonConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 plainButtonConfiguration];
}

id objc_msgSend_pointSize(void *a1, const char *a2, ...)
{
  return _[a1 pointSize];
}

id objc_msgSend_postscriptName(void *a1, const char *a2, ...)
{
  return _[a1 postscriptName];
}

id objc_msgSend_preferredContentSizeCategory(void *a1, const char *a2, ...)
{
  return _[a1 preferredContentSizeCategory];
}

id objc_msgSend_preferredFontForTextStyle_(void *a1, const char *a2, ...)
{
  return [a1 preferredFontForTextStyle:];
}

id objc_msgSend_preferredFontForTextStyle_compatibleWithTraitCollection_(void *a1, const char *a2, ...)
{
  return [a1 preferredFontForTextStyle:];
}

id objc_msgSend_previewImage(void *a1, const char *a2, ...)
{
  return _[a1 previewImage];
}

id objc_msgSend_pushViewController_animated_(void *a1, const char *a2, ...)
{
  return [a1 pushViewController:animated:];
}

id objc_msgSend_rangeOfString_(void *a1, const char *a2, ...)
{
  return [a1 rangeOfString:];
}

id objc_msgSend_rangeOfString_options_(void *a1, const char *a2, ...)
{
  return [a1 rangeOfString:options:];
}

id objc_msgSend_registerClass_forCellReuseIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 registerClass:forCellReuseIdentifier:];
}

id objc_msgSend_registerClass_forHeaderFooterViewReuseIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 registerClass:forHeaderFooterViewReuseIdentifier:];
}

id objc_msgSend_reloadData(void *a1, const char *a2, ...)
{
  return _[a1 reloadData];
}

id objc_msgSend_reloadRowsAtIndexPaths_withRowAnimation_(void *a1, const char *a2, ...)
{
  return [a1 reloadRowsAtIndexPaths:withRowAnimation:];
}

id objc_msgSend_removeLastObject(void *a1, const char *a2, ...)
{
  return _[a1 removeLastObject];
}

id objc_msgSend_removeObserver_(void *a1, const char *a2, ...)
{
  return [a1 removeObserver];
}

id objc_msgSend_rightAnchor(void *a1, const char *a2, ...)
{
  return _[a1 rightAnchor];
}

id objc_msgSend_row(void *a1, const char *a2, ...)
{
  return _[a1 row];
}

id objc_msgSend_runBlockInClientFontContext_(void *a1, const char *a2, ...)
{
  return [a1 runBlockInClientFontContext:];
}

id objc_msgSend_runWithFontNamesForFamilyName_usingBlock_(void *a1, const char *a2, ...)
{
  return [a1 runWithFontNamesForFamilyName:usingBlock:];
}

id objc_msgSend_safeAreaInsets(void *a1, const char *a2, ...)
{
  return _[a1 safeAreaInsets];
}

id objc_msgSend_safeAreaLayoutGuide(void *a1, const char *a2, ...)
{
  return _[a1 safeAreaLayoutGuide];
}

id objc_msgSend_scale(void *a1, const char *a2, ...)
{
  return _[a1 scale];
}

id objc_msgSend_scrollToRowAtIndexPath_atScrollPosition_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrollToRowAtIndexPath:atScrollPosition:animated:");
}

id objc_msgSend_searchBar(void *a1, const char *a2, ...)
{
  return _[a1 searchBar];
}

id objc_msgSend_searchConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 searchConfiguration];
}

id objc_msgSend_searchTerm(void *a1, const char *a2, ...)
{
  return _[a1 searchTerm];
}

id objc_msgSend_secondaryButtonProperties(void *a1, const char *a2, ...)
{
  return _[a1 secondaryButtonProperties];
}

id objc_msgSend_section(void *a1, const char *a2, ...)
{
  return _[a1 section];
}

id objc_msgSend_sectionForObject_collationStringSelector_(void *a1, const char *a2, ...)
{
  return [a1 sectionForObject:collationStringSelector:];
}

id objc_msgSend_sectionForSectionIndexTitleAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 sectionForSectionIndexTitleAtIndex:];
}

id objc_msgSend_sectionIndexTitles(void *a1, const char *a2, ...)
{
  return _[a1 sectionIndexTitles];
}

id objc_msgSend_sectionTitles(void *a1, const char *a2, ...)
{
  return _[a1 sectionTitles];
}

id objc_msgSend_sendAction_(void *a1, const char *a2, ...)
{
  return [a1 sendAction:];
}

id objc_msgSend_setAccessoryType_(void *a1, const char *a2, ...)
{
  return [a1 setAccessoryType:];
}

id objc_msgSend_setAttributedText_(void *a1, const char *a2, ...)
{
  return [a1 setAttributedText:];
}

id objc_msgSend_setAxesPreservingSuperviewLayoutMargins_(void *a1, const char *a2, ...)
{
  return [a1 setAxesPreservingSuperviewLayoutMargins:];
}

id objc_msgSend_setBackground_(void *a1, const char *a2, ...)
{
  return [a1 setBackground:];
}

id objc_msgSend_setBackgroundColor_(void *a1, const char *a2, ...)
{
  return [a1 setBackgroundColor:];
}

id objc_msgSend_setCompactScrollEdgeAppearance_(void *a1, const char *a2, ...)
{
  return [a1 setCompactScrollEdgeAppearance:];
}

id objc_msgSend_setContentConfiguration_(void *a1, const char *a2, ...)
{
  return [a1 setContentConfiguration:];
}

id objc_msgSend_setContentInset_(void *a1, const char *a2, ...)
{
  return [a1 setContentInset:];
}

id objc_msgSend_setContentUnavailableConfiguration_(void *a1, const char *a2, ...)
{
  return [a1 setContentUnavailableConfiguration:];
}

id objc_msgSend_setDataDetectorTypes_(void *a1, const char *a2, ...)
{
  return [a1 setDataDetectorTypes:];
}

id objc_msgSend_setDefinesPresentationContext_(void *a1, const char *a2, ...)
{
  return [a1 setDefinesPresentationContext:];
}

id objc_msgSend_setDelegate_(void *a1, const char *a2, ...)
{
  return [a1 setDelegate:];
}

id objc_msgSend_setDirectionalLayoutMargins_(void *a1, const char *a2, ...)
{
  return [a1 setDirectionalLayoutMargins:];
}

id objc_msgSend_setEditable_(void *a1, const char *a2, ...)
{
  return [a1 setEditable:];
}

id objc_msgSend_setEnclosureColors_(void *a1, const char *a2, ...)
{
  return [a1 setEnclosureColors:];
}

id objc_msgSend_setFrame_(void *a1, const char *a2, ...)
{
  return [a1 setFrame:];
}

id objc_msgSend_setHasMultipleFaces_(void *a1, const char *a2, ...)
{
  return [a1 setHasMultipleFaces:];
}

id objc_msgSend_setHidden_(void *a1, const char *a2, ...)
{
  return [a1 setHidden:];
}

id objc_msgSend_setHidesNavigationBarDuringPresentation_(void *a1, const char *a2, ...)
{
  return [a1 setHidesNavigationBarDuringPresentation:];
}

id objc_msgSend_setHidesSearchBarWhenScrolling_(void *a1, const char *a2, ...)
{
  return [a1 setHidesSearchBarWhenScrolling:];
}

id objc_msgSend_setImage_(void *a1, const char *a2, ...)
{
  return [a1 setImage:];
}

id objc_msgSend_setImageToTextPadding_(void *a1, const char *a2, ...)
{
  return [a1 setImageToTextPadding];
}

id objc_msgSend_setKeyboardDismissMode_(void *a1, const char *a2, ...)
{
  return [a1 setKeyboardDismissMode:];
}

id objc_msgSend_setLineFragmentPadding_(void *a1, const char *a2, ...)
{
  return [a1 setLineFragmentPadding:];
}

id objc_msgSend_setNeedsLayout(void *a1, const char *a2, ...)
{
  return _[a1 setNeedsLayout];
}

id objc_msgSend_setNeedsUpdateContentUnavailableConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 setNeedsUpdateContentUnavailableConfiguration];
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return [a1 setObject:forKey:];
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return [a1 setObject:forKeyedSubscript:];
}

id objc_msgSend_setObject_forSetting_(void *a1, const char *a2, ...)
{
  return [a1 setObject:forSetting:];
}

id objc_msgSend_setOpaque_(void *a1, const char *a2, ...)
{
  return [a1 setOpaque:];
}

id objc_msgSend_setPreferredSearchBarPlacement_(void *a1, const char *a2, ...)
{
  return [a1 setPreferredSearchBarPlacement:];
}

id objc_msgSend_setPrimaryAction_(void *a1, const char *a2, ...)
{
  return [a1 setPrimaryAction:];
}

id objc_msgSend_setRenderingMode_(void *a1, const char *a2, ...)
{
  return [a1 setRenderingMode:];
}

id objc_msgSend_setRightBarButtonItem_(void *a1, const char *a2, ...)
{
  return [a1 setRightBarButtonItem:];
}

id objc_msgSend_setScale_(void *a1, const char *a2, ...)
{
  return [a1 setScale:];
}

id objc_msgSend_setScrollEdgeAppearance_(void *a1, const char *a2, ...)
{
  return [a1 setScrollEdgeAppearance:];
}

id objc_msgSend_setScrollEnabled_(void *a1, const char *a2, ...)
{
  return [a1 setScrollEnabled:];
}

id objc_msgSend_setSearchController_(void *a1, const char *a2, ...)
{
  return [a1 setSearchController:];
}

id objc_msgSend_setSearchResultsUpdater_(void *a1, const char *a2, ...)
{
  return [a1 setSearchResultsUpdater:];
}

id objc_msgSend_setSearchTerm_(void *a1, const char *a2, ...)
{
  return [a1 setSearchTerm:];
}

id objc_msgSend_setSearchText_(void *a1, const char *a2, ...)
{
  return [a1 setSearchText:];
}

id objc_msgSend_setSecondaryButton_(void *a1, const char *a2, ...)
{
  return [a1 setSecondaryButton:];
}

id objc_msgSend_setSectionFooterHeight_(void *a1, const char *a2, ...)
{
  return [a1 setSectionFooterHeight:];
}

id objc_msgSend_setSelectable_(void *a1, const char *a2, ...)
{
  return [a1 setSelectable:];
}

id objc_msgSend_setSeparatorInsetReference_(void *a1, const char *a2, ...)
{
  return [a1 setSeparatorInsetReference:];
}

id objc_msgSend_setSymbolColors_(void *a1, const char *a2, ...)
{
  return [a1 setSymbolColors:];
}

id objc_msgSend_setTableHeaderView_(void *a1, const char *a2, ...)
{
  return [a1 setTableHeaderView:];
}

id objc_msgSend_setTableView_(void *a1, const char *a2, ...)
{
  return [a1 setTableView:];
}

id objc_msgSend_setText_(void *a1, const char *a2, ...)
{
  return [a1 setText:];
}

id objc_msgSend_setTextContainerInset_(void *a1, const char *a2, ...)
{
  return [a1 setTextContainerInset:];
}

id objc_msgSend_setTintColor_(void *a1, const char *a2, ...)
{
  return [a1 setTintColor:];
}

id objc_msgSend_setTitle_(void *a1, const char *a2, ...)
{
  return [a1 setTitle:];
}

id objc_msgSend_setTitleView_(void *a1, const char *a2, ...)
{
  return [a1 setTitleView:];
}

id objc_msgSend_setTranslatesAutoresizingMaskIntoConstraints_(void *a1, const char *a2, ...)
{
  return [a1 setTranslatesAutoresizingMaskIntoConstraints:];
}

id objc_msgSend_setView_(void *a1, const char *a2, ...)
{
  return [a1 setView:];
}

id objc_msgSend_setWithObject_(void *a1, const char *a2, ...)
{
  return [a1 setWithObject:];
}

id objc_msgSend_set_filterFamilyName_(void *a1, const char *a2, ...)
{
  return [a1 set_filterFamilyName:];
}

id objc_msgSend_sharedInstanceForEndpoint_(void *a1, const char *a2, ...)
{
  return [a1 sharedInstanceForEndpoint:];
}

id objc_msgSend_size(void *a1, const char *a2, ...)
{
  return _[a1 size];
}

id objc_msgSend_sizeThatFits_(void *a1, const char *a2, ...)
{
  return [a1 sizeThatFits:];
}

id objc_msgSend_sortUsingSelector_(void *a1, const char *a2, ...)
{
  return [a1 sortUsingSelector:];
}

id objc_msgSend_sortedArrayFromArray_collationStringSelector_(void *a1, const char *a2, ...)
{
  return [a1 sortedArrayFromArray:collationStringSelector:];
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return [a1 stringWithUTF8String:];
}

id objc_msgSend_tableHeaderView(void *a1, const char *a2, ...)
{
  return _[a1 tableHeaderView];
}

id objc_msgSend_tableView(void *a1, const char *a2, ...)
{
  return _[a1 tableView];
}

id objc_msgSend_text(void *a1, const char *a2, ...)
{
  return _[a1 text];
}

id objc_msgSend_textContainer(void *a1, const char *a2, ...)
{
  return _[a1 textContainer];
}

id objc_msgSend_textProperties(void *a1, const char *a2, ...)
{
  return _[a1 textProperties];
}

id objc_msgSend_topAnchor(void *a1, const char *a2, ...)
{
  return _[a1 topAnchor];
}

id objc_msgSend_trailingAnchor(void *a1, const char *a2, ...)
{
  return _[a1 trailingAnchor];
}

id objc_msgSend_traitCollection(void *a1, const char *a2, ...)
{
  return _[a1 traitCollection];
}

id objc_msgSend_traitCollectionWithPreferredContentSizeCategory_(void *a1, const char *a2, ...)
{
  return [a1 traitCollectionWithPreferredContentSizeCategory:];
}

id objc_msgSend_userInterfaceIdiom(void *a1, const char *a2, ...)
{
  return _[a1 userInterfaceIdiom];
}

id objc_msgSend_valueWithBytes_objCType_(void *a1, const char *a2, ...)
{
  return [a1 valueWithBytes:objCType:];
}

id objc_msgSend_view(void *a1, const char *a2, ...)
{
  return _[a1 view];
}

id objc_msgSend_viewControllers(void *a1, const char *a2, ...)
{
  return _[a1 viewControllers];
}

id objc_msgSend_willMoveToParentViewController_(void *a1, const char *a2, ...)
{
  return [a1 willMoveToParentViewController:];
}